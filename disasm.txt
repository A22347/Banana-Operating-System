
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 3f f6 00 00       	call   c000f65f <kernel_main>

c0000020 <callGlobalConstructors>:
c0000020:	e8 93 83 02 00       	call   c00283b8 <_init>
c0000025:	c3                   	ret    
c0000026:	bb 0c 90 02 c0       	mov    ebx,0xc002900c
c000002b:	e9 08 00 00 00       	jmp    c0000038 <callGlobalConstructors.ctors_until_end>

c0000030 <callGlobalConstructors.call_constructor>:
c0000030:	ff 13                	call   DWORD PTR [ebx]
c0000032:	81 c3 04 00 00 00    	add    ebx,0x4

c0000038 <callGlobalConstructors.ctors_until_end>:
c0000038:	81 fb 18 90 02 c0    	cmp    ebx,0xc0029018
c000003e:	72 f0                	jb     c0000030 <callGlobalConstructors.call_constructor>
c0000040:	c3                   	ret    
c0000041:	66 90                	xchg   ax,ax
c0000043:	90                   	nop

c0000044 <deregister_tm_clones>:
c0000044:	b8 38 cf 02 c0       	mov    eax,0xc002cf38
c0000049:	3d 38 cf 02 c0       	cmp    eax,0xc002cf38
c000004e:	74 1c                	je     c000006c <deregister_tm_clones+0x28>
c0000050:	b8 00 00 00 00       	mov    eax,0x0
c0000055:	85 c0                	test   eax,eax
c0000057:	74 13                	je     c000006c <deregister_tm_clones+0x28>
c0000059:	55                   	push   ebp
c000005a:	89 e5                	mov    ebp,esp
c000005c:	83 ec 14             	sub    esp,0x14
c000005f:	68 38 cf 02 c0       	push   0xc002cf38
c0000064:	ff d0                	call   eax
c0000066:	83 c4 10             	add    esp,0x10
c0000069:	c9                   	leave  
c000006a:	c3                   	ret    
c000006b:	90                   	nop
c000006c:	c3                   	ret    
c000006d:	8d 76 00             	lea    esi,[esi+0x0]

c0000070 <register_tm_clones>:
c0000070:	b8 38 cf 02 c0       	mov    eax,0xc002cf38
c0000075:	2d 38 cf 02 c0       	sub    eax,0xc002cf38
c000007a:	c1 f8 02             	sar    eax,0x2
c000007d:	89 c2                	mov    edx,eax
c000007f:	c1 ea 1f             	shr    edx,0x1f
c0000082:	01 d0                	add    eax,edx
c0000084:	d1 f8                	sar    eax,1
c0000086:	74 1c                	je     c00000a4 <register_tm_clones+0x34>
c0000088:	ba 00 00 00 00       	mov    edx,0x0
c000008d:	85 d2                	test   edx,edx
c000008f:	74 13                	je     c00000a4 <register_tm_clones+0x34>
c0000091:	55                   	push   ebp
c0000092:	89 e5                	mov    ebp,esp
c0000094:	83 ec 10             	sub    esp,0x10
c0000097:	50                   	push   eax
c0000098:	68 38 cf 02 c0       	push   0xc002cf38
c000009d:	ff d2                	call   edx
c000009f:	83 c4 10             	add    esp,0x10
c00000a2:	c9                   	leave  
c00000a3:	c3                   	ret    
c00000a4:	c3                   	ret    
c00000a5:	8d 76 00             	lea    esi,[esi+0x0]

c00000a8 <__do_global_dtors_aux>:
c00000a8:	80 3d 68 d5 02 c0 00 	cmp    BYTE PTR ds:0xc002d568,0x0
c00000af:	75 63                	jne    c0000114 <__do_global_dtors_aux+0x6c>
c00000b1:	55                   	push   ebp
c00000b2:	89 e5                	mov    ebp,esp
c00000b4:	56                   	push   esi
c00000b5:	53                   	push   ebx
c00000b6:	bb 20 90 02 c0       	mov    ebx,0xc0029020
c00000bb:	81 eb 1c 90 02 c0    	sub    ebx,0xc002901c
c00000c1:	c1 fb 02             	sar    ebx,0x2
c00000c4:	4b                   	dec    ebx
c00000c5:	be 1c 90 02 c0       	mov    esi,0xc002901c
c00000ca:	a1 6c d5 02 c0       	mov    eax,ds:0xc002d56c
c00000cf:	39 d8                	cmp    eax,ebx
c00000d1:	73 13                	jae    c00000e6 <__do_global_dtors_aux+0x3e>
c00000d3:	90                   	nop
c00000d4:	40                   	inc    eax
c00000d5:	a3 6c d5 02 c0       	mov    ds:0xc002d56c,eax
c00000da:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000dd:	a1 6c d5 02 c0       	mov    eax,ds:0xc002d56c
c00000e2:	39 d8                	cmp    eax,ebx
c00000e4:	72 ee                	jb     c00000d4 <__do_global_dtors_aux+0x2c>
c00000e6:	e8 59 ff ff ff       	call   c0000044 <deregister_tm_clones>
c00000eb:	b8 00 00 00 00       	mov    eax,0x0
c00000f0:	85 c0                	test   eax,eax
c00000f2:	74 10                	je     c0000104 <__do_global_dtors_aux+0x5c>
c00000f4:	83 ec 0c             	sub    esp,0xc
c00000f7:	68 38 cf 02 c0       	push   0xc002cf38
c00000fc:	e8 ff fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000101:	83 c4 10             	add    esp,0x10
c0000104:	c6 05 68 d5 02 c0 01 	mov    BYTE PTR ds:0xc002d568,0x1
c000010b:	8d 65 f8             	lea    esp,[ebp-0x8]
c000010e:	5b                   	pop    ebx
c000010f:	5e                   	pop    esi
c0000110:	5d                   	pop    ebp
c0000111:	c3                   	ret    
c0000112:	66 90                	xchg   ax,ax
c0000114:	c3                   	ret    
c0000115:	8d 76 00             	lea    esi,[esi+0x0]

c0000118 <frame_dummy>:
c0000118:	b8 00 00 00 00       	mov    eax,0x0
c000011d:	85 c0                	test   eax,eax
c000011f:	74 1f                	je     c0000140 <frame_dummy+0x28>
c0000121:	55                   	push   ebp
c0000122:	89 e5                	mov    ebp,esp
c0000124:	83 ec 10             	sub    esp,0x10
c0000127:	68 70 d5 02 c0       	push   0xc002d570
c000012c:	68 38 cf 02 c0       	push   0xc002cf38
c0000131:	e8 ca fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000136:	83 c4 10             	add    esp,0x10
c0000139:	c9                   	leave  
c000013a:	e9 31 ff ff ff       	jmp    c0000070 <register_tm_clones>
c000013f:	90                   	nop
c0000140:	e9 2b ff ff ff       	jmp    c0000070 <register_tm_clones>
c0000145:	66 90                	xchg   ax,ax
c0000147:	66 90                	xchg   ax,ax
c0000149:	66 90                	xchg   ax,ax
c000014b:	66 90                	xchg   ax,ax
c000014d:	66 90                	xchg   ax,ax
c000014f:	90                   	nop

c0000150 <manualPCIProbe>:
c0000150:	31 c0                	xor    eax,eax
c0000152:	66 ba f8 0c          	mov    dx,0xcf8
c0000156:	ed                   	in     eax,dx
c0000157:	89 c3                	mov    ebx,eax
c0000159:	b8 00 00 00 80       	mov    eax,0x80000000
c000015e:	ef                   	out    dx,eax
c000015f:	ed                   	in     eax,dx
c0000160:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000165:	75 0a                	jne    c0000171 <manualPCIProbe.noMech1>
c0000167:	b8 01 00 00 00       	mov    eax,0x1
c000016c:	e9 26 00 00 00       	jmp    c0000197 <manualPCIProbe.gotPCI>

c0000171 <manualPCIProbe.noMech1>:
c0000171:	89 d8                	mov    eax,ebx
c0000173:	ef                   	out    dx,eax
c0000174:	66 ba f8 0c          	mov    dx,0xcf8
c0000178:	ec                   	in     al,dx
c0000179:	88 c3                	mov    bl,al
c000017b:	30 c0                	xor    al,al
c000017d:	ee                   	out    dx,al
c000017e:	ec                   	in     al,dx
c000017f:	84 c0                	test   al,al
c0000181:	75 15                	jne    c0000198 <manualPCIProbe.noPCI>
c0000183:	66 ba fa 0c          	mov    dx,0xcfa
c0000187:	ec                   	in     al,dx
c0000188:	88 c7                	mov    bh,al
c000018a:	30 c0                	xor    al,al
c000018c:	ee                   	out    dx,al
c000018d:	ec                   	in     al,dx
c000018e:	84 c0                	test   al,al
c0000190:	75 06                	jne    c0000198 <manualPCIProbe.noPCI>
c0000192:	b8 02 00 00 00       	mov    eax,0x2

c0000197 <manualPCIProbe.gotPCI>:
c0000197:	c3                   	ret    

c0000198 <manualPCIProbe.noPCI>:
c0000198:	31 c0                	xor    eax,eax
c000019a:	c3                   	ret    

c000019b <prepareTramp>:
c000019b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c00001a2:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c00001a9:	50                   	push   eax
c00001aa:	0f 20 d8             	mov    eax,cr3
c00001ad:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c00001b2:	58                   	pop    eax
c00001b3:	c3                   	ret    

c00001b4 <voodooXADD>:
c00001b4:	55                   	push   ebp
c00001b5:	89 e5                	mov    ebp,esp
c00001b7:	60                   	pusha  
c00001b8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00001bb:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00001be:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c00001c1:	8b 70 44             	mov    esi,DWORD PTR [eax+0x44]
c00001c4:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00001c7:	8b 78 3c             	mov    edi,DWORD PTR [eax+0x3c]
c00001ca:	0f 02 ff             	lar    edi,di
c00001cd:	c1 ef 0d             	shr    edi,0xd
c00001d0:	66 81 e7 03 00       	and    di,0x3
c00001d5:	75 09                	jne    c00001e0 <voodooXADD.usermode>
c00001d7:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
c00001da:	81 c4 14 00 00 00    	add    esp,0x14

c00001e0 <voodooXADD.usermode>:
c00001e0:	89 35 7b 02 00 c0    	mov    DWORD PTR ds:0xc000027b,esi
c00001e6:	89 25 77 02 00 c0    	mov    DWORD PTR ds:0xc0000277,esp
c00001ec:	60                   	pusha  
c00001ed:	b0 90                	mov    al,0x90
c00001ef:	b9 20 00 00 00       	mov    ecx,0x20
c00001f4:	bf 4e 02 00 c0       	mov    edi,0xc000024e
c00001f9:	f3 aa                	rep stos BYTE PTR es:[edi],al
c00001fb:	61                   	popa   
c00001fc:	60                   	pusha  
c00001fd:	89 d6                	mov    esi,edx
c00001ff:	bf 4e 02 00 c0       	mov    edi,0xc000024e
c0000204:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0000206:	61                   	popa   
c0000207:	60                   	pusha  
c0000208:	89 d6                	mov    esi,edx
c000020a:	bf 5e 02 00 c0       	mov    edi,0xc000025e
c000020f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0000211:	61                   	popa   
c0000212:	b1 90                	mov    cl,0x90
c0000214:	85 db                	test   ebx,ebx
c0000216:	74 06                	je     c000021e <voodooXADD.skipChange>
c0000218:	8a 8b 4d 02 00 c0    	mov    cl,BYTE PTR [ebx-0x3ffffdb3]

c000021e <voodooXADD.skipChange>:
c000021e:	88 8b 4e 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffdb2],cl
c0000224:	80 ab 4f 02 00 c0 3a 	sub    BYTE PTR [ebx-0x3ffffdb1],0x3a
c000022b:	88 8b 5e 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffda2],cl
c0000231:	80 ab 5f 02 00 c0 be 	sub    BYTE PTR [ebx-0x3ffffda1],0xbe
c0000238:	89 c4                	mov    esp,eax
c000023a:	81 c4 10 00 00 00    	add    esp,0x10
c0000240:	5f                   	pop    edi
c0000241:	5e                   	pop    esi
c0000242:	5d                   	pop    ebp
c0000243:	5b                   	pop    ebx
c0000244:	5b                   	pop    ebx
c0000245:	5a                   	pop    edx
c0000246:	59                   	pop    ecx
c0000247:	58                   	pop    eax
c0000248:	8b 25 7b 02 00 c0    	mov    esp,DWORD PTR ds:0xc000027b

c000024e <voodooXADD.helper>:
c000024e:	90                   	nop
c000024f:	90                   	nop
c0000250:	90                   	nop
c0000251:	90                   	nop
c0000252:	90                   	nop
c0000253:	90                   	nop
c0000254:	90                   	nop
c0000255:	90                   	nop
c0000256:	90                   	nop
c0000257:	90                   	nop
c0000258:	90                   	nop
c0000259:	90                   	nop
c000025a:	90                   	nop
c000025b:	90                   	nop
c000025c:	90                   	nop
c000025d:	90                   	nop
c000025e:	90                   	nop
c000025f:	90                   	nop
c0000260:	90                   	nop
c0000261:	90                   	nop
c0000262:	90                   	nop
c0000263:	90                   	nop
c0000264:	90                   	nop
c0000265:	90                   	nop
c0000266:	90                   	nop
c0000267:	90                   	nop
c0000268:	90                   	nop
c0000269:	90                   	nop
c000026a:	90                   	nop
c000026b:	90                   	nop
c000026c:	90                   	nop
c000026d:	90                   	nop
c000026e:	8b 25 77 02 00 c0    	mov    esp,DWORD PTR ds:0xc0000277
c0000274:	61                   	popa   
c0000275:	c9                   	leave  
c0000276:	c3                   	ret    

c0000277 <voodooXADD.oldStack>:
c0000277:	00 00                	add    BYTE PTR [eax],al
	...

c000027b <voodooXADD.newStack>:
c000027b:	00 00                	add    BYTE PTR [eax],al
	...

c000027f <doTPAUSE>:
c000027f:	fb                   	sti    
c0000280:	31 c0                	xor    eax,eax
c0000282:	31 d2                	xor    edx,edx
c0000284:	66 0f ae f0          	tpause eax
c0000288:	c3                   	ret    

c0000289 <hasLegacyFPU>:
c0000289:	0f 20 c2             	mov    edx,cr0
c000028c:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c0000292:	0f 22 c2             	mov    cr0,edx
c0000295:	db e3                	fninit 
c0000297:	dd 3d ac 02 00 c0    	fnstsw WORD PTR ds:0xc00002ac
c000029d:	31 c0                	xor    eax,eax
c000029f:	66 81 3d ac 02 00 c0 00 00 	cmp    WORD PTR ds:0xc00002ac,0x0
c00002a8:	75 01                	jne    c00002ab <hasLegacyFPU.nofpu>

c00002aa <hasLegacyFPU.hasfpu>:
c00002aa:	40                   	inc    eax

c00002ab <hasLegacyFPU.nofpu>:
c00002ab:	c3                   	ret    

c00002ac <testword>:
c00002ac:	aa                   	stos   BYTE PTR es:[edi],al
c00002ad:	55                   	push   ebp

c00002ae <is486>:
c00002ae:	0f 09                	wbinvd 
c00002b0:	31 c0                	xor    eax,eax
c00002b2:	40                   	inc    eax
c00002b3:	c3                   	ret    
c00002b4:	90                   	nop
c00002b5:	90                   	nop
c00002b6:	90                   	nop
c00002b7:	90                   	nop
c00002b8:	90                   	nop
c00002b9:	90                   	nop
c00002ba:	90                   	nop
c00002bb:	90                   	nop
c00002bc:	90                   	nop
c00002bd:	90                   	nop
c00002be:	90                   	nop
c00002bf:	90                   	nop
c00002c0:	90                   	nop
c00002c1:	90                   	nop
c00002c2:	90                   	nop
c00002c3:	90                   	nop
c00002c4:	90                   	nop
c00002c5:	90                   	nop
c00002c6:	90                   	nop
c00002c7:	90                   	nop
c00002c8:	90                   	nop
c00002c9:	90                   	nop
c00002ca:	90                   	nop
c00002cb:	90                   	nop
c00002cc:	90                   	nop
c00002cd:	90                   	nop
c00002ce:	90                   	nop
c00002cf:	90                   	nop
c00002d0:	90                   	nop
c00002d1:	90                   	nop
c00002d2:	90                   	nop
c00002d3:	90                   	nop
c00002d4:	90                   	nop
c00002d5:	90                   	nop
c00002d6:	90                   	nop
c00002d7:	90                   	nop
c00002d8:	90                   	nop
c00002d9:	90                   	nop
c00002da:	90                   	nop
c00002db:	90                   	nop
c00002dc:	90                   	nop
c00002dd:	90                   	nop
c00002de:	90                   	nop
c00002df:	90                   	nop
c00002e0:	90                   	nop
c00002e1:	31 c0                	xor    eax,eax
c00002e3:	c3                   	ret    

c00002e4 <detectCPUID>:
c00002e4:	9c                   	pushf  
c00002e5:	9c                   	pushf  
c00002e6:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c00002ed:	9d                   	popf   
c00002ee:	9c                   	pushf  
c00002ef:	58                   	pop    eax
c00002f0:	33 04 24             	xor    eax,DWORD PTR [esp]
c00002f3:	9d                   	popf   
c00002f4:	25 00 00 20 00       	and    eax,0x200000
c00002f9:	c3                   	ret    

c00002fa <goToVM86>:
c00002fa:	55                   	push   ebp
c00002fb:	89 e5                	mov    ebp,esp
c00002fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000300:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000303:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c0000306:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0000309:	25 ff ff 00 00       	and    eax,0xffff
c000030e:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000314:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000031a:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000320:	52                   	push   edx
c0000321:	51                   	push   ecx
c0000322:	68 02 02 02 00       	push   0x20202
c0000327:	53                   	push   ebx
c0000328:	50                   	push   eax
c0000329:	cf                   	iret   

c000032a <goToUsermode>:
c000032a:	55                   	push   ebp
c000032b:	89 e5                	mov    ebp,esp
c000032d:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000330:	66 b8 23 00          	mov    ax,0x23
c0000334:	66 8e d8             	mov    ds,ax
c0000337:	66 8e c0             	mov    es,ax
c000033a:	66 8e e0             	mov    fs,ax
c000033d:	66 8e e8             	mov    gs,ax
c0000340:	89 e0                	mov    eax,esp
c0000342:	68 23 00 00 00       	push   0x23
c0000347:	50                   	push   eax
c0000348:	68 02 02 00 00       	push   0x202
c000034d:	68 1b 00 00 00       	push   0x1b
c0000352:	53                   	push   ebx
c0000353:	cf                   	iret   

c0000354 <switchToThreadASMFirstTime>:
c0000354:	9c                   	pushf  
c0000355:	fa                   	cli    
c0000356:	50                   	push   eax
c0000357:	53                   	push   ebx
c0000358:	51                   	push   ecx
c0000359:	52                   	push   edx
c000035a:	56                   	push   esi
c000035b:	57                   	push   edi
c000035c:	55                   	push   ebp
c000035d:	e9 11 00 00 00       	jmp    c0000373 <commonThreadSwitch>

c0000362 <switchToThreadASM>:
c0000362:	9c                   	pushf  
c0000363:	50                   	push   eax
c0000364:	53                   	push   ebx
c0000365:	51                   	push   ecx
c0000366:	52                   	push   edx
c0000367:	56                   	push   esi
c0000368:	57                   	push   edi
c0000369:	55                   	push   ebp
c000036a:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000370:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000373 <commonThreadSwitch>:
c0000373:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000377:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c000037d:	8b 06                	mov    eax,DWORD PTR [esi]
c000037f:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000382:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0000385:	0f 20 d9             	mov    ecx,cr3
c0000388:	39 c8                	cmp    eax,ecx
c000038a:	74 03                	je     c000038f <commonThreadSwitch.doneVAS>
c000038c:	0f 22 d8             	mov    cr3,eax

c000038f <commonThreadSwitch.doneVAS>:
c000038f:	0f 20 c0             	mov    eax,cr0
c0000392:	0c 08                	or     al,0x8
c0000394:	0f 22 c0             	mov    cr0,eax
c0000397:	85 d2                	test   edx,edx
c0000399:	75 11                	jne    c00003ac <commonThreadSwitch.firstTime>
c000039b:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c000039e:	e8 ed ce 01 00       	call   c001d290 <changeTSS>
c00003a3:	5d                   	pop    ebp
c00003a4:	5f                   	pop    edi
c00003a5:	5e                   	pop    esi
c00003a6:	5a                   	pop    edx
c00003a7:	59                   	pop    ecx
c00003a8:	5b                   	pop    ebx
c00003a9:	58                   	pop    eax
c00003aa:	9d                   	popf   
c00003ab:	c3                   	ret    

c00003ac <commonThreadSwitch.firstTime>:
c00003ac:	fa                   	cli    
c00003ad:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00003b0:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00003b5:	60                   	pusha  
c00003b6:	e8 84 20 01 00       	call   c001243f <mapVASFirstTime>
c00003bb:	61                   	popa   
c00003bc:	89 c4                	mov    esp,eax
c00003be:	56                   	push   esi
c00003bf:	52                   	push   edx
c00003c0:	e8 cb ce 01 00       	call   c001d290 <changeTSS>
c00003c5:	5a                   	pop    edx
c00003c6:	5e                   	pop    esi
c00003c7:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00003ce:	5d                   	pop    ebp
c00003cf:	5f                   	pop    edi
c00003d0:	5e                   	pop    esi
c00003d1:	59                   	pop    ecx
c00003d2:	59                   	pop    ecx
c00003d3:	5b                   	pop    ebx
c00003d4:	58                   	pop    eax
c00003d5:	81 c4 04 00 00 00    	add    esp,0x4
c00003db:	6a 02                	push   0x2
c00003dd:	9d                   	popf   
c00003de:	52                   	push   edx
c00003df:	e8 73 d3 01 00       	call   c001d757 <taskStartupFunction>
c00003e4:	5a                   	pop    edx
c00003e5:	50                   	push   eax
c00003e6:	ff d2                	call   edx
c00003e8:	e8 89 d9 01 00       	call   c001dd76 <taskReturned>
c00003ed:	e9 fb ff ff ff       	jmp    c00003ed <commonThreadSwitch.firstTime+0x41>

c00003f2 <asmQuickAcquireLock>:
c00003f2:	55                   	push   ebp
c00003f3:	89 e5                	mov    ebp,esp
c00003f5:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c00003f8 <asmQuickAcquireLock.retry>:
c00003f8:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c00003fd:	72 02                	jb     c0000401 <asmQuickAcquireLock.spin_with_pause>
c00003ff:	fa                   	cli    
c0000400:	c3                   	ret    

c0000401 <asmQuickAcquireLock.spin_with_pause>:
c0000401:	f3 90                	pause  
c0000403:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000409:	75 f6                	jne    c0000401 <asmQuickAcquireLock.spin_with_pause>
c000040b:	e9 e8 ff ff ff       	jmp    c00003f8 <asmQuickAcquireLock.retry>

c0000410 <asmQuickReleaseLock>:
c0000410:	55                   	push   ebp
c0000411:	89 e5                	mov    ebp,esp
c0000413:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c000041a:	5d                   	pop    ebp
c000041b:	c3                   	ret    

c000041c <asmAcquireLock>:
c000041c:	55                   	push   ebp
c000041d:	89 e5                	mov    ebp,esp
c000041f:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000422 <asmAcquireLock.retry>:
c0000422:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000427:	72 05                	jb     c000042e <asmAcquireLock.spin_with_pause>
c0000429:	9c                   	pushf  
c000042a:	58                   	pop    eax
c000042b:	fa                   	cli    
c000042c:	5d                   	pop    ebp
c000042d:	c3                   	ret    

c000042e <asmAcquireLock.spin_with_pause>:
c000042e:	f3 90                	pause  
c0000430:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000436:	75 f6                	jne    c000042e <asmAcquireLock.spin_with_pause>
c0000438:	e9 e5 ff ff ff       	jmp    c0000422 <asmAcquireLock.retry>

c000043d <asmReleaseLock>:
c000043d:	55                   	push   ebp
c000043e:	89 e5                	mov    ebp,esp
c0000440:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000443:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000446:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000044c:	52                   	push   edx
c000044d:	9d                   	popf   
c000044e:	5d                   	pop    ebp
c000044f:	c3                   	ret    

c0000450 <loadGDT>:
c0000450:	0f 01 15 b0 d9 02 c0 	lgdtd  ds:0xc002d9b0
c0000457:	66 b8 10 00          	mov    ax,0x10
c000045b:	66 8e d8             	mov    ds,ax
c000045e:	66 8e c0             	mov    es,ax
c0000461:	66 8e e0             	mov    fs,ax
c0000464:	66 8e e8             	mov    gs,ax
c0000467:	66 8e d0             	mov    ss,ax
c000046a:	e9 00 00 00 00       	jmp    c000046f <flush2>

c000046f <flush2>:
c000046f:	c3                   	ret    

c0000470 <isr0>:
c0000470:	fa                   	cli    
c0000471:	68 00 00 00 00       	push   0x0
c0000476:	68 00 00 00 00       	push   0x0
c000047b:	e9 44 01 00 00       	jmp    c00005c4 <int_common_stub>

c0000480 <isr1>:
c0000480:	fa                   	cli    
c0000481:	6a 00                	push   0x0
c0000483:	6a 01                	push   0x1
c0000485:	e9 3a 01 00 00       	jmp    c00005c4 <int_common_stub>

c000048a <isr2>:
c000048a:	fa                   	cli    
c000048b:	6a 00                	push   0x0
c000048d:	6a 02                	push   0x2
c000048f:	e9 30 01 00 00       	jmp    c00005c4 <int_common_stub>

c0000494 <isr3>:
c0000494:	fa                   	cli    
c0000495:	6a 00                	push   0x0
c0000497:	6a 03                	push   0x3
c0000499:	e9 26 01 00 00       	jmp    c00005c4 <int_common_stub>

c000049e <isr4>:
c000049e:	fa                   	cli    
c000049f:	6a 00                	push   0x0
c00004a1:	6a 04                	push   0x4
c00004a3:	e9 1c 01 00 00       	jmp    c00005c4 <int_common_stub>

c00004a8 <isr5>:
c00004a8:	fa                   	cli    
c00004a9:	6a 00                	push   0x0
c00004ab:	6a 05                	push   0x5
c00004ad:	e9 12 01 00 00       	jmp    c00005c4 <int_common_stub>

c00004b2 <isr6>:
c00004b2:	fa                   	cli    
c00004b3:	6a 00                	push   0x0
c00004b5:	6a 06                	push   0x6
c00004b7:	e9 08 01 00 00       	jmp    c00005c4 <int_common_stub>

c00004bc <isr7>:
c00004bc:	fa                   	cli    
c00004bd:	6a 00                	push   0x0
c00004bf:	6a 07                	push   0x7
c00004c1:	e9 fe 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004c6 <isr8>:
c00004c6:	fa                   	cli    
c00004c7:	6a 08                	push   0x8
c00004c9:	e9 f6 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004ce <isr9>:
c00004ce:	fa                   	cli    
c00004cf:	6a 00                	push   0x0
c00004d1:	6a 09                	push   0x9
c00004d3:	e9 ec 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004d8 <isr10>:
c00004d8:	fa                   	cli    
c00004d9:	6a 0a                	push   0xa
c00004db:	e9 e4 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004e0 <isr11>:
c00004e0:	fa                   	cli    
c00004e1:	6a 0b                	push   0xb
c00004e3:	e9 dc 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004e8 <isr12>:
c00004e8:	fa                   	cli    
c00004e9:	6a 0c                	push   0xc
c00004eb:	e9 d4 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004f0 <isr13>:
c00004f0:	fa                   	cli    
c00004f1:	6a 0d                	push   0xd
c00004f3:	e9 cc 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004f8 <isr14>:
c00004f8:	fa                   	cli    
c00004f9:	6a 0e                	push   0xe
c00004fb:	e9 c4 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000500 <isr15>:
c0000500:	fa                   	cli    
c0000501:	6a 00                	push   0x0
c0000503:	6a 0f                	push   0xf
c0000505:	e9 ba 00 00 00       	jmp    c00005c4 <int_common_stub>

c000050a <isr16>:
c000050a:	fa                   	cli    
c000050b:	6a 00                	push   0x0
c000050d:	6a 10                	push   0x10
c000050f:	e9 b0 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000514 <isr17>:
c0000514:	fa                   	cli    
c0000515:	6a 00                	push   0x0
c0000517:	6a 11                	push   0x11
c0000519:	e9 a6 00 00 00       	jmp    c00005c4 <int_common_stub>

c000051e <isr18>:
c000051e:	fa                   	cli    
c000051f:	6a 00                	push   0x0
c0000521:	6a 12                	push   0x12
c0000523:	e9 9c 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000528 <irq3>:
c0000528:	fa                   	cli    
c0000529:	6a 00                	push   0x0
c000052b:	6a 23                	push   0x23
c000052d:	e9 92 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000532 <irq4>:
c0000532:	fa                   	cli    
c0000533:	6a 00                	push   0x0
c0000535:	6a 24                	push   0x24
c0000537:	e9 88 00 00 00       	jmp    c00005c4 <int_common_stub>

c000053c <irq5>:
c000053c:	fa                   	cli    
c000053d:	6a 00                	push   0x0
c000053f:	6a 25                	push   0x25
c0000541:	e9 7e 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000546 <irq6>:
c0000546:	fa                   	cli    
c0000547:	6a 00                	push   0x0
c0000549:	6a 26                	push   0x26
c000054b:	e9 74 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000550 <irq7>:
c0000550:	fa                   	cli    
c0000551:	6a 00                	push   0x0
c0000553:	6a 27                	push   0x27
c0000555:	e9 6a 00 00 00       	jmp    c00005c4 <int_common_stub>

c000055a <irq8>:
c000055a:	fa                   	cli    
c000055b:	6a 00                	push   0x0
c000055d:	6a 28                	push   0x28
c000055f:	e9 60 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000564 <irq9>:
c0000564:	fa                   	cli    
c0000565:	6a 00                	push   0x0
c0000567:	6a 29                	push   0x29
c0000569:	e9 56 00 00 00       	jmp    c00005c4 <int_common_stub>

c000056e <irq10>:
c000056e:	fa                   	cli    
c000056f:	6a 00                	push   0x0
c0000571:	6a 2a                	push   0x2a
c0000573:	e9 4c 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000578 <irq11>:
c0000578:	fa                   	cli    
c0000579:	6a 00                	push   0x0
c000057b:	6a 2b                	push   0x2b
c000057d:	e9 42 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000582 <irq12>:
c0000582:	fa                   	cli    
c0000583:	6a 00                	push   0x0
c0000585:	6a 2c                	push   0x2c
c0000587:	e9 38 00 00 00       	jmp    c00005c4 <int_common_stub>

c000058c <irq13>:
c000058c:	fa                   	cli    
c000058d:	6a 00                	push   0x0
c000058f:	6a 2d                	push   0x2d
c0000591:	e9 2e 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000596 <irq14>:
c0000596:	fa                   	cli    
c0000597:	6a 00                	push   0x0
c0000599:	6a 2e                	push   0x2e
c000059b:	e9 24 00 00 00       	jmp    c00005c4 <int_common_stub>

c00005a0 <irq15>:
c00005a0:	fa                   	cli    
c00005a1:	6a 00                	push   0x0
c00005a3:	6a 2f                	push   0x2f
c00005a5:	e9 1a 00 00 00       	jmp    c00005c4 <int_common_stub>

c00005aa <irq1>:
c00005aa:	fa                   	cli    
c00005ab:	6a 00                	push   0x0
c00005ad:	6a 21                	push   0x21
c00005af:	eb 13                	jmp    c00005c4 <int_common_stub>

c00005b1 <irq2>:
c00005b1:	fa                   	cli    
c00005b2:	6a 00                	push   0x0
c00005b4:	6a 22                	push   0x22
c00005b6:	eb 0c                	jmp    c00005c4 <int_common_stub>

c00005b8 <isr96>:
c00005b8:	6a 00                	push   0x0
c00005ba:	6a 60                	push   0x60
c00005bc:	fb                   	sti    
c00005bd:	eb 05                	jmp    c00005c4 <int_common_stub>

c00005bf <irq0>:
c00005bf:	fa                   	cli    
c00005c0:	6a 00                	push   0x0
c00005c2:	6a 20                	push   0x20

c00005c4 <int_common_stub>:
c00005c4:	60                   	pusha  
c00005c5:	1e                   	push   ds
c00005c6:	06                   	push   es
c00005c7:	0f a0                	push   fs
c00005c9:	0f a8                	push   gs
c00005cb:	66 b8 10 00          	mov    ax,0x10
c00005cf:	66 8e d8             	mov    ds,ax
c00005d2:	66 8e c0             	mov    es,ax
c00005d5:	66 8e e0             	mov    fs,ax
c00005d8:	66 8e e8             	mov    gs,ax
c00005db:	54                   	push   esp
c00005dc:	fc                   	cld    
c00005dd:	e8 ed 3d 01 00       	call   c00143cf <int_handler>
c00005e2:	81 c4 04 00 00 00    	add    esp,0x4
c00005e8:	0f a9                	pop    gs
c00005ea:	0f a1                	pop    fs
c00005ec:	07                   	pop    es
c00005ed:	1f                   	pop    ds
c00005ee:	61                   	popa   
c00005ef:	81 c4 08 00 00 00    	add    esp,0x8
c00005f5:	cf                   	iret   

c00005f6 <irq16>:
c00005f6:	fa                   	cli    
c00005f7:	6a 00                	push   0x0
c00005f9:	6a 30                	push   0x30
c00005fb:	e9 c4 ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000600 <irq17>:
c0000600:	fa                   	cli    
c0000601:	6a 00                	push   0x0
c0000603:	6a 31                	push   0x31
c0000605:	e9 ba ff ff ff       	jmp    c00005c4 <int_common_stub>

c000060a <irq18>:
c000060a:	fa                   	cli    
c000060b:	6a 00                	push   0x0
c000060d:	6a 32                	push   0x32
c000060f:	e9 b0 ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000614 <irq19>:
c0000614:	fa                   	cli    
c0000615:	6a 00                	push   0x0
c0000617:	6a 33                	push   0x33
c0000619:	e9 a6 ff ff ff       	jmp    c00005c4 <int_common_stub>

c000061e <irq20>:
c000061e:	fa                   	cli    
c000061f:	6a 00                	push   0x0
c0000621:	6a 34                	push   0x34
c0000623:	e9 9c ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000628 <irq21>:
c0000628:	fa                   	cli    
c0000629:	6a 00                	push   0x0
c000062b:	6a 35                	push   0x35
c000062d:	e9 92 ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000632 <irq22>:
c0000632:	fa                   	cli    
c0000633:	6a 00                	push   0x0
c0000635:	6a 36                	push   0x36
c0000637:	e9 88 ff ff ff       	jmp    c00005c4 <int_common_stub>

c000063c <irq23>:
c000063c:	fa                   	cli    
c000063d:	6a 00                	push   0x0
c000063f:	6a 37                	push   0x37
c0000641:	e9 7e ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000646 <memcpy>:
c0000646:	e9 df de 00 00       	jmp    c000e52a <__not_memcpy>
c000064b:	90                   	nop

c000064c <memcmp>:
c000064c:	56                   	push   esi
c000064d:	53                   	push   ebx
c000064e:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000652:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000656:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000065a:	85 f6                	test   esi,esi
c000065c:	74 1d                	je     c000067b <memcmp+0x2f>
c000065e:	8a 08                	mov    cl,BYTE PTR [eax]
c0000660:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000663:	38 cb                	cmp    bl,cl
c0000665:	75 19                	jne    c0000680 <memcmp+0x34>
c0000667:	01 c6                	add    esi,eax
c0000669:	eb 0a                	jmp    c0000675 <memcmp+0x29>
c000066b:	90                   	nop
c000066c:	8a 08                	mov    cl,BYTE PTR [eax]
c000066e:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000671:	38 d9                	cmp    cl,bl
c0000673:	75 0b                	jne    c0000680 <memcmp+0x34>
c0000675:	40                   	inc    eax
c0000676:	42                   	inc    edx
c0000677:	39 f0                	cmp    eax,esi
c0000679:	75 f1                	jne    c000066c <memcmp+0x20>
c000067b:	31 c0                	xor    eax,eax
c000067d:	5b                   	pop    ebx
c000067e:	5e                   	pop    esi
c000067f:	c3                   	ret    
c0000680:	0f b6 c1             	movzx  eax,cl
c0000683:	29 d8                	sub    eax,ebx
c0000685:	5b                   	pop    ebx
c0000686:	5e                   	pop    esi
c0000687:	c3                   	ret    

c0000688 <memmove>:
c0000688:	55                   	push   ebp
c0000689:	57                   	push   edi
c000068a:	56                   	push   esi
c000068b:	53                   	push   ebx
c000068c:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0000690:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0000694:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0000698:	39 dd                	cmp    ebp,ebx
c000069a:	0f 83 80 00 00 00    	jae    c0000720 <memmove+0x98>
c00006a0:	85 d2                	test   edx,edx
c00006a2:	74 74                	je     c0000718 <memmove+0x90>
c00006a4:	8d 4b 04             	lea    ecx,[ebx+0x4]
c00006a7:	8d 75 04             	lea    esi,[ebp+0x4]
c00006aa:	39 cd                	cmp    ebp,ecx
c00006ac:	0f 93 c1             	setae  cl
c00006af:	39 f3                	cmp    ebx,esi
c00006b1:	0f 93 c0             	setae  al
c00006b4:	89 c6                	mov    esi,eax
c00006b6:	09 ce                	or     esi,ecx
c00006b8:	8d 4a ff             	lea    ecx,[edx-0x1]
c00006bb:	89 f0                	mov    eax,esi
c00006bd:	83 f9 0c             	cmp    ecx,0xc
c00006c0:	0f 97 c1             	seta   cl
c00006c3:	84 c8                	test   al,cl
c00006c5:	74 75                	je     c000073c <memmove+0xb4>
c00006c7:	89 e9                	mov    ecx,ebp
c00006c9:	09 d9                	or     ecx,ebx
c00006cb:	83 e1 03             	and    ecx,0x3
c00006ce:	75 6c                	jne    c000073c <memmove+0xb4>
c00006d0:	89 d7                	mov    edi,edx
c00006d2:	89 d9                	mov    ecx,ebx
c00006d4:	83 e7 fc             	and    edi,0xfffffffc
c00006d7:	89 ee                	mov    esi,ebp
c00006d9:	01 df                	add    edi,ebx
c00006db:	90                   	nop
c00006dc:	8b 01                	mov    eax,DWORD PTR [ecx]
c00006de:	83 c6 04             	add    esi,0x4
c00006e1:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c00006e4:	83 c1 04             	add    ecx,0x4
c00006e7:	39 f9                	cmp    ecx,edi
c00006e9:	75 f1                	jne    c00006dc <memmove+0x54>
c00006eb:	89 d1                	mov    ecx,edx
c00006ed:	89 d7                	mov    edi,edx
c00006ef:	83 e1 fc             	and    ecx,0xfffffffc
c00006f2:	29 cf                	sub    edi,ecx
c00006f4:	01 cb                	add    ebx,ecx
c00006f6:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c00006fa:	39 ca                	cmp    edx,ecx
c00006fc:	74 1a                	je     c0000718 <memmove+0x90>
c00006fe:	8a 03                	mov    al,BYTE PTR [ebx]
c0000700:	83 ff 01             	cmp    edi,0x1
c0000703:	88 06                	mov    BYTE PTR [esi],al
c0000705:	74 11                	je     c0000718 <memmove+0x90>
c0000707:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000070a:	83 ff 02             	cmp    edi,0x2
c000070d:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000710:	74 06                	je     c0000718 <memmove+0x90>
c0000712:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000715:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c0000718:	5b                   	pop    ebx
c0000719:	89 e8                	mov    eax,ebp
c000071b:	5e                   	pop    esi
c000071c:	5f                   	pop    edi
c000071d:	5d                   	pop    ebp
c000071e:	c3                   	ret    
c000071f:	90                   	nop
c0000720:	76 f6                	jbe    c0000718 <memmove+0x90>
c0000722:	85 d2                	test   edx,edx
c0000724:	74 f2                	je     c0000718 <memmove+0x90>
c0000726:	4b                   	dec    ebx
c0000727:	8d 4d ff             	lea    ecx,[ebp-0x1]
c000072a:	66 90                	xchg   ax,ax
c000072c:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c000072f:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c0000732:	4a                   	dec    edx
c0000733:	75 f7                	jne    c000072c <memmove+0xa4>
c0000735:	5b                   	pop    ebx
c0000736:	89 e8                	mov    eax,ebp
c0000738:	5e                   	pop    esi
c0000739:	5f                   	pop    edi
c000073a:	5d                   	pop    ebp
c000073b:	c3                   	ret    
c000073c:	01 ea                	add    edx,ebp
c000073e:	89 e9                	mov    ecx,ebp
c0000740:	8a 03                	mov    al,BYTE PTR [ebx]
c0000742:	41                   	inc    ecx
c0000743:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c0000746:	43                   	inc    ebx
c0000747:	39 d1                	cmp    ecx,edx
c0000749:	75 f5                	jne    c0000740 <memmove+0xb8>
c000074b:	eb cb                	jmp    c0000718 <memmove+0x90>
c000074d:	8d 76 00             	lea    esi,[esi+0x0]

c0000750 <memset>:
c0000750:	57                   	push   edi
c0000751:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000755:	85 c9                	test   ecx,ecx
c0000757:	74 0b                	je     c0000764 <memset+0x14>
c0000759:	fc                   	cld    
c000075a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000075e:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0000762:	f3 aa                	rep stos BYTE PTR es:[edi],al
c0000764:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000768:	5f                   	pop    edi
c0000769:	c3                   	ret    
c000076a:	66 90                	xchg   ax,ax

c000076c <strlen>:
c000076c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000770:	31 c0                	xor    eax,eax
c0000772:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c0000775:	74 09                	je     c0000780 <strlen+0x14>
c0000777:	90                   	nop
c0000778:	40                   	inc    eax
c0000779:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c000077d:	75 f9                	jne    c0000778 <strlen+0xc>
c000077f:	c3                   	ret    
c0000780:	c3                   	ret    
c0000781:	8d 76 00             	lea    esi,[esi+0x0]

c0000784 <strpbrk>:
c0000784:	57                   	push   edi
c0000785:	56                   	push   esi
c0000786:	53                   	push   ebx
c0000787:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000078b:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000078f:	8a 1e                	mov    bl,BYTE PTR [esi]
c0000791:	84 db                	test   bl,bl
c0000793:	74 21                	je     c00007b6 <strpbrk+0x32>
c0000795:	8a 07                	mov    al,BYTE PTR [edi]
c0000797:	84 c0                	test   al,al
c0000799:	74 14                	je     c00007af <strpbrk+0x2b>
c000079b:	38 d8                	cmp    al,bl
c000079d:	74 19                	je     c00007b8 <strpbrk+0x34>
c000079f:	89 fa                	mov    edx,edi
c00007a1:	eb 05                	jmp    c00007a8 <strpbrk+0x24>
c00007a3:	90                   	nop
c00007a4:	38 d9                	cmp    cl,bl
c00007a6:	74 10                	je     c00007b8 <strpbrk+0x34>
c00007a8:	42                   	inc    edx
c00007a9:	8a 0a                	mov    cl,BYTE PTR [edx]
c00007ab:	84 c9                	test   cl,cl
c00007ad:	75 f5                	jne    c00007a4 <strpbrk+0x20>
c00007af:	46                   	inc    esi
c00007b0:	8a 1e                	mov    bl,BYTE PTR [esi]
c00007b2:	84 db                	test   bl,bl
c00007b4:	75 e1                	jne    c0000797 <strpbrk+0x13>
c00007b6:	31 f6                	xor    esi,esi
c00007b8:	89 f0                	mov    eax,esi
c00007ba:	5b                   	pop    ebx
c00007bb:	5e                   	pop    esi
c00007bc:	5f                   	pop    edi
c00007bd:	c3                   	ret    
c00007be:	66 90                	xchg   ax,ax

c00007c0 <strtok>:
c00007c0:	56                   	push   esi
c00007c1:	53                   	push   ebx
c00007c2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00007c6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00007ca:	85 db                	test   ebx,ebx
c00007cc:	75 07                	jne    c00007d5 <strtok+0x15>
c00007ce:	eb 2c                	jmp    c00007fc <strtok+0x3c>
c00007d0:	43                   	inc    ebx
c00007d1:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c00007d5:	56                   	push   esi
c00007d6:	53                   	push   ebx
c00007d7:	e8 a8 ff ff ff       	call   c0000784 <strpbrk>
c00007dc:	5a                   	pop    edx
c00007dd:	a3 88 d5 02 c0       	mov    ds:0xc002d588,eax
c00007e2:	59                   	pop    ecx
c00007e3:	39 d8                	cmp    eax,ebx
c00007e5:	74 e9                	je     c00007d0 <strtok+0x10>
c00007e7:	85 c0                	test   eax,eax
c00007e9:	74 1b                	je     c0000806 <strtok+0x46>
c00007eb:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00007ee:	8d 50 01             	lea    edx,[eax+0x1]
c00007f1:	89 d8                	mov    eax,ebx
c00007f3:	89 15 88 d5 02 c0    	mov    DWORD PTR ds:0xc002d588,edx
c00007f9:	5b                   	pop    ebx
c00007fa:	5e                   	pop    esi
c00007fb:	c3                   	ret    
c00007fc:	8b 1d 88 d5 02 c0    	mov    ebx,DWORD PTR ds:0xc002d588
c0000802:	85 db                	test   ebx,ebx
c0000804:	75 cf                	jne    c00007d5 <strtok+0x15>
c0000806:	31 c0                	xor    eax,eax
c0000808:	5b                   	pop    ebx
c0000809:	5e                   	pop    esi
c000080a:	c3                   	ret    
c000080b:	90                   	nop

c000080c <strcpy>:
c000080c:	53                   	push   ebx
c000080d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000811:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000815:	89 c3                	mov    ebx,eax
c0000817:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000819:	84 d2                	test   dl,dl
c000081b:	74 0d                	je     c000082a <strcpy+0x1e>
c000081d:	8d 76 00             	lea    esi,[esi+0x0]
c0000820:	88 13                	mov    BYTE PTR [ebx],dl
c0000822:	41                   	inc    ecx
c0000823:	43                   	inc    ebx
c0000824:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000826:	84 d2                	test   dl,dl
c0000828:	75 f6                	jne    c0000820 <strcpy+0x14>
c000082a:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000082d:	5b                   	pop    ebx
c000082e:	c3                   	ret    
c000082f:	90                   	nop

c0000830 <strncpy>:
c0000830:	55                   	push   ebp
c0000831:	57                   	push   edi
c0000832:	56                   	push   esi
c0000833:	53                   	push   ebx
c0000834:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0000838:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c000083c:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0000840:	85 c0                	test   eax,eax
c0000842:	74 39                	je     c000087d <strncpy+0x4d>
c0000844:	8a 1e                	mov    bl,BYTE PTR [esi]
c0000846:	8d 48 ff             	lea    ecx,[eax-0x1]
c0000849:	8d 55 01             	lea    edx,[ebp+0x1]
c000084c:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c000084f:	84 db                	test   bl,bl
c0000851:	74 31                	je     c0000884 <strncpy+0x54>
c0000853:	85 c9                	test   ecx,ecx
c0000855:	74 26                	je     c000087d <strncpy+0x4d>
c0000857:	8a 5e 01             	mov    bl,BYTE PTR [esi+0x1]
c000085a:	8d 48 fe             	lea    ecx,[eax-0x2]
c000085d:	8d 55 02             	lea    edx,[ebp+0x2]
c0000860:	8d 46 02             	lea    eax,[esi+0x2]
c0000863:	88 5d 01             	mov    BYTE PTR [ebp+0x1],bl
c0000866:	84 db                	test   bl,bl
c0000868:	75 0f                	jne    c0000879 <strncpy+0x49>
c000086a:	eb 18                	jmp    c0000884 <strncpy+0x54>
c000086c:	40                   	inc    eax
c000086d:	42                   	inc    edx
c000086e:	8a 58 ff             	mov    bl,BYTE PTR [eax-0x1]
c0000871:	49                   	dec    ecx
c0000872:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c0000875:	84 db                	test   bl,bl
c0000877:	74 0b                	je     c0000884 <strncpy+0x54>
c0000879:	85 c9                	test   ecx,ecx
c000087b:	75 ef                	jne    c000086c <strncpy+0x3c>
c000087d:	5b                   	pop    ebx
c000087e:	89 e8                	mov    eax,ebp
c0000880:	5e                   	pop    esi
c0000881:	5f                   	pop    edi
c0000882:	5d                   	pop    ebp
c0000883:	c3                   	ret    
c0000884:	85 c9                	test   ecx,ecx
c0000886:	74 f5                	je     c000087d <strncpy+0x4d>
c0000888:	fc                   	cld    
c0000889:	31 c0                	xor    eax,eax
c000088b:	89 d7                	mov    edi,edx
c000088d:	f3 aa                	rep stos BYTE PTR es:[edi],al
c000088f:	89 e8                	mov    eax,ebp
c0000891:	5b                   	pop    ebx
c0000892:	5e                   	pop    esi
c0000893:	5f                   	pop    edi
c0000894:	5d                   	pop    ebp
c0000895:	c3                   	ret    
c0000896:	66 90                	xchg   ax,ax

c0000898 <strcmp>:
c0000898:	56                   	push   esi
c0000899:	53                   	push   ebx
c000089a:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000089e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00008a2:	8a 16                	mov    dl,BYTE PTR [esi]
c00008a4:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c00008a7:	38 d1                	cmp    cl,dl
c00008a9:	75 1d                	jne    c00008c8 <strcmp+0x30>
c00008ab:	84 c9                	test   cl,cl
c00008ad:	74 21                	je     c00008d0 <strcmp+0x38>
c00008af:	b8 01 00 00 00       	mov    eax,0x1
c00008b4:	eb 07                	jmp    c00008bd <strcmp+0x25>
c00008b6:	66 90                	xchg   ax,ax
c00008b8:	40                   	inc    eax
c00008b9:	84 d2                	test   dl,dl
c00008bb:	74 13                	je     c00008d0 <strcmp+0x38>
c00008bd:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c00008c0:	0f b6 0c 03          	movzx  ecx,BYTE PTR [ebx+eax*1]
c00008c4:	38 ca                	cmp    dl,cl
c00008c6:	74 f0                	je     c00008b8 <strcmp+0x20>
c00008c8:	0f b6 c2             	movzx  eax,dl
c00008cb:	5b                   	pop    ebx
c00008cc:	29 c8                	sub    eax,ecx
c00008ce:	5e                   	pop    esi
c00008cf:	c3                   	ret    
c00008d0:	31 c0                	xor    eax,eax
c00008d2:	5b                   	pop    ebx
c00008d3:	5e                   	pop    esi
c00008d4:	c3                   	ret    
c00008d5:	8d 76 00             	lea    esi,[esi+0x0]

c00008d8 <strchr>:
c00008d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00008dc:	8a 10                	mov    dl,BYTE PTR [eax]
c00008de:	84 d2                	test   dl,dl
c00008e0:	74 15                	je     c00008f7 <strchr+0x1f>
c00008e2:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c00008e6:	38 ca                	cmp    dl,cl
c00008e8:	75 06                	jne    c00008f0 <strchr+0x18>
c00008ea:	eb 0e                	jmp    c00008fa <strchr+0x22>
c00008ec:	38 ca                	cmp    dl,cl
c00008ee:	74 09                	je     c00008f9 <strchr+0x21>
c00008f0:	40                   	inc    eax
c00008f1:	8a 10                	mov    dl,BYTE PTR [eax]
c00008f3:	84 d2                	test   dl,dl
c00008f5:	75 f5                	jne    c00008ec <strchr+0x14>
c00008f7:	31 c0                	xor    eax,eax
c00008f9:	c3                   	ret    
c00008fa:	c3                   	ret    
c00008fb:	90                   	nop

c00008fc <strncmp>:
c00008fc:	57                   	push   edi
c00008fd:	56                   	push   esi
c00008fe:	53                   	push   ebx
c00008ff:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0000903:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000907:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000090b:	85 ff                	test   edi,edi
c000090d:	74 28                	je     c0000937 <strncmp+0x3b>
c000090f:	8a 16                	mov    dl,BYTE PTR [esi]
c0000911:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000914:	38 d1                	cmp    cl,dl
c0000916:	75 28                	jne    c0000940 <strncmp+0x44>
c0000918:	8d 46 01             	lea    eax,[esi+0x1]
c000091b:	84 c9                	test   cl,cl
c000091d:	74 18                	je     c0000937 <strncmp+0x3b>
c000091f:	01 fe                	add    esi,edi
c0000921:	eb 0f                	jmp    c0000932 <strncmp+0x36>
c0000923:	90                   	nop
c0000924:	8a 10                	mov    dl,BYTE PTR [eax]
c0000926:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000929:	38 ca                	cmp    dl,cl
c000092b:	75 13                	jne    c0000940 <strncmp+0x44>
c000092d:	40                   	inc    eax
c000092e:	84 d2                	test   dl,dl
c0000930:	74 05                	je     c0000937 <strncmp+0x3b>
c0000932:	43                   	inc    ebx
c0000933:	39 c6                	cmp    esi,eax
c0000935:	75 ed                	jne    c0000924 <strncmp+0x28>
c0000937:	5b                   	pop    ebx
c0000938:	31 c0                	xor    eax,eax
c000093a:	5e                   	pop    esi
c000093b:	5f                   	pop    edi
c000093c:	c3                   	ret    
c000093d:	8d 76 00             	lea    esi,[esi+0x0]
c0000940:	5b                   	pop    ebx
c0000941:	0f b6 c2             	movzx  eax,dl
c0000944:	5e                   	pop    esi
c0000945:	29 c8                	sub    eax,ecx
c0000947:	5f                   	pop    edi
c0000948:	c3                   	ret    
c0000949:	8d 76 00             	lea    esi,[esi+0x0]

c000094c <strcat>:
c000094c:	56                   	push   esi
c000094d:	53                   	push   ebx
c000094e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000952:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000956:	89 c3                	mov    ebx,eax
c0000958:	eb 04                	jmp    c000095e <strcat+0x12>
c000095a:	66 90                	xchg   ax,ax
c000095c:	89 d3                	mov    ebx,edx
c000095e:	8d 53 01             	lea    edx,[ebx+0x1]
c0000961:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000965:	75 f5                	jne    c000095c <strcat+0x10>
c0000967:	31 d2                	xor    edx,edx
c0000969:	8d 76 00             	lea    esi,[esi+0x0]
c000096c:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c000096f:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c0000972:	42                   	inc    edx
c0000973:	84 c9                	test   cl,cl
c0000975:	75 f5                	jne    c000096c <strcat+0x20>
c0000977:	5b                   	pop    ebx
c0000978:	5e                   	pop    esi
c0000979:	c3                   	ret    
c000097a:	66 90                	xchg   ax,ax

c000097c <strncat>:
c000097c:	56                   	push   esi
c000097d:	53                   	push   ebx
c000097e:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000982:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000986:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000098a:	85 f6                	test   esi,esi
c000098c:	74 1e                	je     c00009ac <strncat+0x30>
c000098e:	89 c2                	mov    edx,eax
c0000990:	42                   	inc    edx
c0000991:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000995:	75 f9                	jne    c0000990 <strncat+0x14>
c0000997:	01 ce                	add    esi,ecx
c0000999:	eb 06                	jmp    c00009a1 <strncat+0x25>
c000099b:	90                   	nop
c000099c:	39 f1                	cmp    ecx,esi
c000099e:	74 10                	je     c00009b0 <strncat+0x34>
c00009a0:	42                   	inc    edx
c00009a1:	41                   	inc    ecx
c00009a2:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00009a5:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00009a8:	84 db                	test   bl,bl
c00009aa:	75 f0                	jne    c000099c <strncat+0x20>
c00009ac:	5b                   	pop    ebx
c00009ad:	5e                   	pop    esi
c00009ae:	c3                   	ret    
c00009af:	90                   	nop
c00009b0:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00009b3:	5b                   	pop    ebx
c00009b4:	5e                   	pop    esi
c00009b5:	c3                   	ret    
c00009b6:	66 90                	xchg   ax,ax

c00009b8 <strstr>:
c00009b8:	57                   	push   edi
c00009b9:	56                   	push   esi
c00009ba:	53                   	push   ebx
c00009bb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00009bf:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00009c3:	57                   	push   edi
c00009c4:	e8 a3 fd ff ff       	call   c000076c <strlen>
c00009c9:	59                   	pop    ecx
c00009ca:	85 c0                	test   eax,eax
c00009cc:	74 2a                	je     c00009f8 <strstr+0x40>
c00009ce:	89 c6                	mov    esi,eax
c00009d0:	eb 12                	jmp    c00009e4 <strstr+0x2c>
c00009d2:	66 90                	xchg   ax,ax
c00009d4:	56                   	push   esi
c00009d5:	57                   	push   edi
c00009d6:	53                   	push   ebx
c00009d7:	e8 70 fc ff ff       	call   c000064c <memcmp>
c00009dc:	83 c4 0c             	add    esp,0xc
c00009df:	85 c0                	test   eax,eax
c00009e1:	74 15                	je     c00009f8 <strstr+0x40>
c00009e3:	43                   	inc    ebx
c00009e4:	53                   	push   ebx
c00009e5:	e8 82 fd ff ff       	call   c000076c <strlen>
c00009ea:	5a                   	pop    edx
c00009eb:	39 f0                	cmp    eax,esi
c00009ed:	73 e5                	jae    c00009d4 <strstr+0x1c>
c00009ef:	5b                   	pop    ebx
c00009f0:	31 c0                	xor    eax,eax
c00009f2:	5e                   	pop    esi
c00009f3:	5f                   	pop    edi
c00009f4:	c3                   	ret    
c00009f5:	8d 76 00             	lea    esi,[esi+0x0]
c00009f8:	89 d8                	mov    eax,ebx
c00009fa:	5b                   	pop    ebx
c00009fb:	5e                   	pop    esi
c00009fc:	5f                   	pop    edi
c00009fd:	c3                   	ret    
c00009fe:	66 90                	xchg   ax,ax

c0000a00 <toupper>:
c0000a00:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000a04:	0f b6 d0             	movzx  edx,al
c0000a07:	f6 82 40 90 02 c0 02 	test   BYTE PTR [edx-0x3ffd6fc0],0x2
c0000a0e:	74 03                	je     c0000a13 <toupper+0x13>
c0000a10:	83 e8 20             	sub    eax,0x20
c0000a13:	c3                   	ret    

c0000a14 <tolower>:
c0000a14:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000a18:	0f b6 d0             	movzx  edx,al
c0000a1b:	f6 82 40 90 02 c0 01 	test   BYTE PTR [edx-0x3ffd6fc0],0x1
c0000a22:	74 03                	je     c0000a27 <tolower+0x13>
c0000a24:	83 c0 20             	add    eax,0x20
c0000a27:	c3                   	ret    

c0000a28 <simple_strtoul>:
c0000a28:	55                   	push   ebp
c0000a29:	57                   	push   edi
c0000a2a:	56                   	push   esi
c0000a2b:	53                   	push   ebx
c0000a2c:	83 ec 08             	sub    esp,0x8
c0000a2f:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000a33:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0000a37:	90                   	nop
c0000a38:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0000a3b:	f6 82 40 90 02 c0 08 	test   BYTE PTR [edx-0x3ffd6fc0],0x8
c0000a42:	75 05                	jne    c0000a49 <simple_strtoul+0x21>
c0000a44:	80 fa 09             	cmp    dl,0x9
c0000a47:	75 03                	jne    c0000a4c <simple_strtoul+0x24>
c0000a49:	41                   	inc    ecx
c0000a4a:	eb ec                	jmp    c0000a38 <simple_strtoul+0x10>
c0000a4c:	80 fa 2d             	cmp    dl,0x2d
c0000a4f:	0f 84 1b 01 00 00    	je     c0000b70 <simple_strtoul+0x148>
c0000a55:	80 fa 2b             	cmp    dl,0x2b
c0000a58:	0f 84 c2 00 00 00    	je     c0000b20 <simple_strtoul+0xf8>
c0000a5e:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000a66:	85 f6                	test   esi,esi
c0000a68:	0f 85 c3 00 00 00    	jne    c0000b31 <simple_strtoul+0x109>
c0000a6e:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000a70:	80 fa 30             	cmp    dl,0x30
c0000a73:	0f 84 47 01 00 00    	je     c0000bc0 <simple_strtoul+0x198>
c0000a79:	be 0a 00 00 00       	mov    esi,0xa
c0000a7e:	84 d2                	test   dl,dl
c0000a80:	0f 84 6f 01 00 00    	je     c0000bf5 <simple_strtoul+0x1cd>
c0000a86:	31 ed                	xor    ebp,ebp
c0000a88:	31 ff                	xor    edi,edi
c0000a8a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0000a91:	eb 2b                	jmp    c0000abe <simple_strtoul+0x96>
c0000a93:	90                   	nop
c0000a94:	83 eb 30             	sub    ebx,0x30
c0000a97:	39 f3                	cmp    ebx,esi
c0000a99:	73 4d                	jae    c0000ae8 <simple_strtoul+0xc0>
c0000a9b:	31 d2                	xor    edx,edx
c0000a9d:	89 d8                	mov    eax,ebx
c0000a9f:	f7 d0                	not    eax
c0000aa1:	f7 f6                	div    esi
c0000aa3:	39 f8                	cmp    eax,edi
c0000aa5:	0f 82 b1 00 00 00    	jb     c0000b5c <simple_strtoul+0x134>
c0000aab:	0f af fe             	imul   edi,esi
c0000aae:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0000ab5:	01 df                	add    edi,ebx
c0000ab7:	41                   	inc    ecx
c0000ab8:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000aba:	84 d2                	test   dl,dl
c0000abc:	74 2a                	je     c0000ae8 <simple_strtoul+0xc0>
c0000abe:	0f b6 da             	movzx  ebx,dl
c0000ac1:	f6 83 40 90 02 c0 04 	test   BYTE PTR [ebx-0x3ffd6fc0],0x4
c0000ac8:	75 ca                	jne    c0000a94 <simple_strtoul+0x6c>
c0000aca:	0f be d2             	movsx  edx,dl
c0000acd:	52                   	push   edx
c0000ace:	e8 2d ff ff ff       	call   c0000a00 <toupper>
c0000ad3:	5b                   	pop    ebx
c0000ad4:	0f b6 d0             	movzx  edx,al
c0000ad7:	f6 82 40 90 02 c0 01 	test   BYTE PTR [edx-0x3ffd6fc0],0x1
c0000ade:	74 08                	je     c0000ae8 <simple_strtoul+0xc0>
c0000ae0:	8d 58 c9             	lea    ebx,[eax-0x37]
c0000ae3:	39 f3                	cmp    ebx,esi
c0000ae5:	72 b4                	jb     c0000a9b <simple_strtoul+0x73>
c0000ae7:	90                   	nop
c0000ae8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000aec:	85 c0                	test   eax,eax
c0000aee:	74 14                	je     c0000b04 <simple_strtoul+0xdc>
c0000af0:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0000af3:	09 f8                	or     eax,edi
c0000af5:	75 71                	jne    c0000b68 <simple_strtoul+0x140>
c0000af7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000afb:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000aff:	31 ff                	xor    edi,edi
c0000b01:	89 30                	mov    DWORD PTR [eax],esi
c0000b03:	90                   	nop
c0000b04:	4d                   	dec    ebp
c0000b05:	75 05                	jne    c0000b0c <simple_strtoul+0xe4>
c0000b07:	bf ff ff ff ff       	mov    edi,0xffffffff
c0000b0c:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000b11:	75 02                	jne    c0000b15 <simple_strtoul+0xed>
c0000b13:	f7 df                	neg    edi
c0000b15:	83 c4 08             	add    esp,0x8
c0000b18:	89 f8                	mov    eax,edi
c0000b1a:	5b                   	pop    ebx
c0000b1b:	5e                   	pop    esi
c0000b1c:	5f                   	pop    edi
c0000b1d:	5d                   	pop    ebp
c0000b1e:	c3                   	ret    
c0000b1f:	90                   	nop
c0000b20:	41                   	inc    ecx
c0000b21:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000b29:	85 f6                	test   esi,esi
c0000b2b:	0f 84 3d ff ff ff    	je     c0000a6e <simple_strtoul+0x46>
c0000b31:	8d 46 fe             	lea    eax,[esi-0x2]
c0000b34:	83 f8 22             	cmp    eax,0x22
c0000b37:	77 6a                	ja     c0000ba3 <simple_strtoul+0x17b>
c0000b39:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000b3b:	83 fe 08             	cmp    esi,0x8
c0000b3e:	0f 84 a2 00 00 00    	je     c0000be6 <simple_strtoul+0x1be>
c0000b44:	83 fe 10             	cmp    esi,0x10
c0000b47:	0f 85 31 ff ff ff    	jne    c0000a7e <simple_strtoul+0x56>
c0000b4d:	80 fa 30             	cmp    dl,0x30
c0000b50:	74 2c                	je     c0000b7e <simple_strtoul+0x156>
c0000b52:	be 10 00 00 00       	mov    esi,0x10
c0000b57:	e9 22 ff ff ff       	jmp    c0000a7e <simple_strtoul+0x56>
c0000b5c:	bd 01 00 00 00       	mov    ebp,0x1
c0000b61:	31 ff                	xor    edi,edi
c0000b63:	e9 4f ff ff ff       	jmp    c0000ab7 <simple_strtoul+0x8f>
c0000b68:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b6c:	89 08                	mov    DWORD PTR [eax],ecx
c0000b6e:	eb 94                	jmp    c0000b04 <simple_strtoul+0xdc>
c0000b70:	41                   	inc    ecx
c0000b71:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000b79:	e9 e8 fe ff ff       	jmp    c0000a66 <simple_strtoul+0x3e>
c0000b7e:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000b82:	88 04 24             	mov    BYTE PTR [esp],al
c0000b85:	50                   	push   eax
c0000b86:	e8 89 fe ff ff       	call   c0000a14 <tolower>
c0000b8b:	5e                   	pop    esi
c0000b8c:	83 f8 78             	cmp    eax,0x78
c0000b8f:	0f 84 84 00 00 00    	je     c0000c19 <simple_strtoul+0x1f1>
c0000b95:	41                   	inc    ecx
c0000b96:	be 10 00 00 00       	mov    esi,0x10
c0000b9b:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000b9e:	e9 db fe ff ff       	jmp    c0000a7e <simple_strtoul+0x56>
c0000ba3:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0000ba7:	85 ff                	test   edi,edi
c0000ba9:	74 5c                	je     c0000c07 <simple_strtoul+0x1df>
c0000bab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000baf:	85 c9                	test   ecx,ecx
c0000bb1:	75 4e                	jne    c0000c01 <simple_strtoul+0x1d9>
c0000bb3:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000bb9:	31 ff                	xor    edi,edi
c0000bbb:	e9 4c ff ff ff       	jmp    c0000b0c <simple_strtoul+0xe4>
c0000bc0:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000bc4:	88 04 24             	mov    BYTE PTR [esp],al
c0000bc7:	50                   	push   eax
c0000bc8:	e8 47 fe ff ff       	call   c0000a14 <tolower>
c0000bcd:	5d                   	pop    ebp
c0000bce:	83 f8 78             	cmp    eax,0x78
c0000bd1:	74 3b                	je     c0000c0e <simple_strtoul+0x1e6>
c0000bd3:	41                   	inc    ecx
c0000bd4:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000bd7:	80 fa 30             	cmp    dl,0x30
c0000bda:	74 13                	je     c0000bef <simple_strtoul+0x1c7>
c0000bdc:	be 08 00 00 00       	mov    esi,0x8
c0000be1:	e9 98 fe ff ff       	jmp    c0000a7e <simple_strtoul+0x56>
c0000be6:	80 fa 30             	cmp    dl,0x30
c0000be9:	0f 85 8f fe ff ff    	jne    c0000a7e <simple_strtoul+0x56>
c0000bef:	8a 51 01             	mov    dl,BYTE PTR [ecx+0x1]
c0000bf2:	41                   	inc    ecx
c0000bf3:	eb e7                	jmp    c0000bdc <simple_strtoul+0x1b4>
c0000bf5:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000bf9:	85 d2                	test   edx,edx
c0000bfb:	74 0a                	je     c0000c07 <simple_strtoul+0x1df>
c0000bfd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000c01:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000c05:	89 30                	mov    DWORD PTR [eax],esi
c0000c07:	31 ff                	xor    edi,edi
c0000c09:	e9 fe fe ff ff       	jmp    c0000b0c <simple_strtoul+0xe4>
c0000c0e:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000c11:	83 c1 02             	add    ecx,0x2
c0000c14:	e9 34 ff ff ff       	jmp    c0000b4d <simple_strtoul+0x125>
c0000c19:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000c1c:	be 10 00 00 00       	mov    esi,0x10
c0000c21:	83 c1 02             	add    ecx,0x2
c0000c24:	e9 55 fe ff ff       	jmp    c0000a7e <simple_strtoul+0x56>

c0000c29 <largebin_index>:
c0000c29:	89 c2                	mov    edx,eax
c0000c2b:	c1 ea 08             	shr    edx,0x8
c0000c2e:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000c34:	77 10                	ja     c0000c46 <largebin_index+0x1d>
c0000c36:	0f bd d2             	bsr    edx,edx
c0000c39:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000c3c:	d3 e8                	shr    eax,cl
c0000c3e:	83 e0 03             	and    eax,0x3
c0000c41:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000c45:	c3                   	ret    
c0000c46:	b8 5f 00 00 00       	mov    eax,0x5f
c0000c4b:	c3                   	ret    

c0000c4c <malloc_init_state>:
c0000c4c:	53                   	push   ebx
c0000c4d:	8d 50 34             	lea    edx,[eax+0x34]
c0000c50:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000c56:	89 d1                	mov    ecx,edx
c0000c58:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000c5b:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000c5e:	83 c2 08             	add    edx,0x8
c0000c61:	39 da                	cmp    edx,ebx
c0000c63:	75 f3                	jne    c0000c58 <malloc_init_state+0xc>
c0000c65:	8b 10                	mov    edx,DWORD PTR [eax]
c0000c67:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000c71:	83 e2 03             	and    edx,0x3
c0000c74:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000c7e:	83 ca 48             	or     edx,0x48
c0000c81:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000c8b:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000c95:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000c9c:	89 10                	mov    DWORD PTR [eax],edx
c0000c9e:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000ca1:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000cab:	5b                   	pop    ebx
c0000cac:	c3                   	ret    

c0000cad <malloc_consolidate>:
c0000cad:	8b 10                	mov    edx,DWORD PTR [eax]
c0000caf:	85 d2                	test   edx,edx
c0000cb1:	0f 84 d8 00 00 00    	je     c0000d8f <malloc_consolidate+0xe2>
c0000cb7:	55                   	push   ebp
c0000cb8:	83 e2 fd             	and    edx,0xfffffffd
c0000cbb:	57                   	push   edi
c0000cbc:	89 c5                	mov    ebp,eax
c0000cbe:	56                   	push   esi
c0000cbf:	8d 78 34             	lea    edi,[eax+0x34]
c0000cc2:	53                   	push   ebx
c0000cc3:	83 ec 10             	sub    esp,0x10
c0000cc6:	89 10                	mov    DWORD PTR [eax],edx
c0000cc8:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000ccc:	c1 ea 03             	shr    edx,0x3
c0000ccf:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000cd3:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000cd7:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000cda:	85 d2                	test   edx,edx
c0000cdc:	0f 84 98 00 00 00    	je     c0000d7a <malloc_consolidate+0xcd>
c0000ce2:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000ce9:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000cec:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000cef:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000cf3:	89 f9                	mov    ecx,edi
c0000cf5:	83 e1 fe             	and    ecx,0xfffffffe
c0000cf8:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000cfb:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000cfe:	83 e3 fc             	and    ebx,0xfffffffc
c0000d01:	83 e7 01             	and    edi,0x1
c0000d04:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000d07:	75 14                	jne    c0000d1d <malloc_consolidate+0x70>
c0000d09:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000d0b:	29 fa                	sub    edx,edi
c0000d0d:	01 f9                	add    ecx,edi
c0000d0f:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000d12:	89 fb                	mov    ebx,edi
c0000d14:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000d17:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000d1a:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000d1d:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000d20:	74 40                	je     c0000d62 <malloc_consolidate+0xb5>
c0000d22:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000d25:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000d28:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000d2c:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000d2f:	83 e7 01             	and    edi,0x1
c0000d32:	75 0e                	jne    c0000d42 <malloc_consolidate+0x95>
c0000d34:	01 d9                	add    ecx,ebx
c0000d36:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000d39:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000d3c:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000d3f:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000d42:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000d45:	89 ce                	mov    esi,ecx
c0000d47:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000d4a:	83 ce 01             	or     esi,0x1
c0000d4d:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000d50:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000d53:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000d56:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000d5a:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000d5d:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000d60:	eb 0c                	jmp    c0000d6e <malloc_consolidate+0xc1>
c0000d62:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000d65:	83 c9 01             	or     ecx,0x1
c0000d68:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d6b:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000d6e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000d72:	85 d2                	test   edx,edx
c0000d74:	0f 85 6f ff ff ff    	jne    c0000ce9 <malloc_consolidate+0x3c>
c0000d7a:	83 c5 04             	add    ebp,0x4
c0000d7d:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000d81:	0f 85 50 ff ff ff    	jne    c0000cd7 <malloc_consolidate+0x2a>
c0000d87:	83 c4 10             	add    esp,0x10
c0000d8a:	5b                   	pop    ebx
c0000d8b:	5e                   	pop    esi
c0000d8c:	5f                   	pop    edi
c0000d8d:	5d                   	pop    ebp
c0000d8e:	c3                   	ret    
c0000d8f:	e9 b8 fe ff ff       	jmp    c0000c4c <malloc_init_state>

c0000d94 <dlfree>:
c0000d94:	57                   	push   edi
c0000d95:	56                   	push   esi
c0000d96:	53                   	push   ebx
c0000d97:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000d9b:	85 db                	test   ebx,ebx
c0000d9d:	0f 84 e2 00 00 00    	je     c0000e85 <dlfree+0xf1>
c0000da3:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000da6:	8b 0d a0 d5 02 c0    	mov    ecx,DWORD PTR ds:0xc002d5a0
c0000dac:	89 f0                	mov    eax,esi
c0000dae:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000db1:	83 e0 fc             	and    eax,0xfffffffc
c0000db4:	39 c1                	cmp    ecx,eax
c0000db6:	72 24                	jb     c0000ddc <dlfree+0x48>
c0000db8:	83 c9 03             	or     ecx,0x3
c0000dbb:	c1 e8 03             	shr    eax,0x3
c0000dbe:	89 0d a0 d5 02 c0    	mov    DWORD PTR ds:0xc002d5a0,ecx
c0000dc4:	83 e8 02             	sub    eax,0x2
c0000dc7:	8b 0c 85 a4 d5 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd2a5c]
c0000dce:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000dd0:	89 14 85 a4 d5 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2a5c],edx
c0000dd7:	e9 a9 00 00 00       	jmp    c0000e85 <dlfree+0xf1>
c0000ddc:	83 e6 02             	and    esi,0x2
c0000ddf:	0f 85 a0 00 00 00    	jne    c0000e85 <dlfree+0xf1>
c0000de5:	83 c9 01             	or     ecx,0x1
c0000de8:	8d 34 02             	lea    esi,[edx+eax*1]
c0000deb:	89 0d a0 d5 02 c0    	mov    DWORD PTR ds:0xc002d5a0,ecx
c0000df1:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000df4:	83 e1 fc             	and    ecx,0xfffffffc
c0000df7:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000dfb:	75 13                	jne    c0000e10 <dlfree+0x7c>
c0000dfd:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000e00:	29 da                	sub    edx,ebx
c0000e02:	01 d8                	add    eax,ebx
c0000e04:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000e07:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000e0a:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000e0d:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e10:	39 35 cc d5 02 c0    	cmp    DWORD PTR ds:0xc002d5cc,esi
c0000e16:	74 40                	je     c0000e58 <dlfree+0xc4>
c0000e18:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000e1c:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000e1f:	80 e3 01             	and    bl,0x1
c0000e22:	75 0e                	jne    c0000e32 <dlfree+0x9e>
c0000e24:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000e27:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000e2a:	01 c8                	add    eax,ecx
c0000e2c:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000e2f:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e32:	8b 0d dc d5 02 c0    	mov    ecx,DWORD PTR ds:0xc002d5dc
c0000e38:	c7 42 0c d4 d5 02 c0 	mov    DWORD PTR [edx+0xc],0xc002d5d4
c0000e3f:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000e42:	89 15 dc d5 02 c0    	mov    DWORD PTR ds:0xc002d5dc,edx
c0000e48:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000e4b:	89 c1                	mov    ecx,eax
c0000e4d:	83 c9 01             	or     ecx,0x1
c0000e50:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e53:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000e56:	eb 10                	jmp    c0000e68 <dlfree+0xd4>
c0000e58:	01 c8                	add    eax,ecx
c0000e5a:	89 c1                	mov    ecx,eax
c0000e5c:	83 c9 01             	or     ecx,0x1
c0000e5f:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e62:	89 15 cc d5 02 c0    	mov    DWORD PTR ds:0xc002d5cc,edx
c0000e68:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000e6d:	76 16                	jbe    c0000e85 <dlfree+0xf1>
c0000e6f:	f6 05 a0 d5 02 c0 02 	test   BYTE PTR ds:0xc002d5a0,0x2
c0000e76:	74 0d                	je     c0000e85 <dlfree+0xf1>
c0000e78:	5b                   	pop    ebx
c0000e79:	b8 a0 d5 02 c0       	mov    eax,0xc002d5a0
c0000e7e:	5e                   	pop    esi
c0000e7f:	5f                   	pop    edi
c0000e80:	e9 28 fe ff ff       	jmp    c0000cad <malloc_consolidate>
c0000e85:	5b                   	pop    ebx
c0000e86:	5e                   	pop    esi
c0000e87:	5f                   	pop    edi
c0000e88:	c3                   	ret    

c0000e89 <sYSMALLOc>:
c0000e89:	55                   	push   ebp
c0000e8a:	57                   	push   edi
c0000e8b:	56                   	push   esi
c0000e8c:	53                   	push   ebx
c0000e8d:	89 d3                	mov    ebx,edx
c0000e8f:	83 ec 2c             	sub    esp,0x2c
c0000e92:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000e96:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000e9c:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000e9f:	8d 42 ff             	lea    eax,[edx-0x1]
c0000ea2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000ea6:	74 1f                	je     c0000ec7 <sYSMALLOc+0x3e>
c0000ea8:	89 d8                	mov    eax,ebx
c0000eaa:	e8 fe fd ff ff       	call   c0000cad <malloc_consolidate>
c0000eaf:	83 ec 0c             	sub    esp,0xc
c0000eb2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000eb6:	83 e8 07             	sub    eax,0x7
c0000eb9:	50                   	push   eax
c0000eba:	e8 30 02 00 00       	call   c00010ef <dlmalloc>
c0000ebf:	83 c4 10             	add    esp,0x10
c0000ec2:	e9 20 02 00 00       	jmp    c00010e7 <sYSMALLOc+0x25e>
c0000ec7:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000eca:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000ed0:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000ed3:	83 e0 fc             	and    eax,0xfffffffc
c0000ed6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000eda:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000ede:	83 c0 10             	add    eax,0x10
c0000ee1:	01 c1                	add    ecx,eax
c0000ee3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000ee7:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000eee:	74 04                	je     c0000ef4 <sYSMALLOc+0x6b>
c0000ef0:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000ef4:	f7 da                	neg    edx
c0000ef6:	03 4c 24 10          	add    ecx,DWORD PTR [esp+0x10]
c0000efa:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0000efe:	21 d1                	and    ecx,edx
c0000f00:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000f04:	7f 07                	jg     c0000f0d <sYSMALLOc+0x84>
c0000f06:	31 c0                	xor    eax,eax
c0000f08:	e9 da 01 00 00       	jmp    c00010e7 <sYSMALLOc+0x25e>
c0000f0d:	83 ec 0c             	sub    esp,0xc
c0000f10:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000f14:	e8 df e4 00 00       	call   c000f3f8 <sbrk>
c0000f19:	83 c4 10             	add    esp,0x10
c0000f1c:	89 c6                	mov    esi,eax
c0000f1e:	83 f8 ff             	cmp    eax,0xffffffff
c0000f21:	74 e3                	je     c0000f06 <sYSMALLOc+0x7d>
c0000f23:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000f27:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0000f2b:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000f2e:	03 ab 68 03 00 00    	add    ebp,DWORD PTR [ebx+0x368]
c0000f34:	39 f1                	cmp    ecx,esi
c0000f36:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0000f3c:	75 13                	jne    c0000f51 <sYSMALLOc+0xc8>
c0000f3e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000f42:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000f46:	83 c8 01             	or     eax,0x1
c0000f49:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000f4c:	e9 3e 01 00 00       	jmp    c000108f <sYSMALLOc+0x206>
c0000f51:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000f57:	88 d0                	mov    al,dl
c0000f59:	83 e0 01             	and    eax,0x1
c0000f5c:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000f61:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0000f65:	0f 95 c0             	setne  al
c0000f68:	22 44 24 1f          	and    al,BYTE PTR [esp+0x1f]
c0000f6c:	39 f1                	cmp    ecx,esi
c0000f6e:	76 12                	jbe    c0000f82 <sYSMALLOc+0xf9>
c0000f70:	84 c0                	test   al,al
c0000f72:	74 0e                	je     c0000f82 <sYSMALLOc+0xf9>
c0000f74:	83 e2 fe             	and    edx,0xfffffffe
c0000f77:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000f7d:	e9 83 00 00 00       	jmp    c0001005 <sYSMALLOc+0x17c>
c0000f82:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0000f87:	74 7c                	je     c0001005 <sYSMALLOc+0x17c>
c0000f89:	84 c0                	test   al,al
c0000f8b:	74 0c                	je     c0000f99 <sYSMALLOc+0x110>
c0000f8d:	89 f0                	mov    eax,esi
c0000f8f:	29 c8                	sub    eax,ecx
c0000f91:	01 e8                	add    eax,ebp
c0000f93:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000f99:	89 f2                	mov    edx,esi
c0000f9b:	83 e2 07             	and    edx,0x7
c0000f9e:	74 0c                	je     c0000fac <sYSMALLOc+0x123>
c0000fa0:	b8 08 00 00 00       	mov    eax,0x8
c0000fa5:	29 d0                	sub    eax,edx
c0000fa7:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000faa:	eb 04                	jmp    c0000fb0 <sYSMALLOc+0x127>
c0000fac:	89 f5                	mov    ebp,esi
c0000fae:	31 c0                	xor    eax,eax
c0000fb0:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000fb4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000fb8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000fbc:	01 c1                	add    ecx,eax
c0000fbe:	83 ec 0c             	sub    esp,0xc
c0000fc1:	01 f1                	add    ecx,esi
c0000fc3:	01 ca                	add    edx,ecx
c0000fc5:	29 c8                	sub    eax,ecx
c0000fc7:	23 54 24 20          	and    edx,DWORD PTR [esp+0x20]
c0000fcb:	01 c2                	add    edx,eax
c0000fcd:	52                   	push   edx
c0000fce:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0000fd2:	e8 21 e4 00 00       	call   c000f3f8 <sbrk>
c0000fd7:	83 c4 10             	add    esp,0x10
c0000fda:	83 f8 ff             	cmp    eax,0xffffffff
c0000fdd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000fe1:	75 0f                	jne    c0000ff2 <sYSMALLOc+0x169>
c0000fe3:	83 ec 0c             	sub    esp,0xc
c0000fe6:	6a 00                	push   0x0
c0000fe8:	e8 0b e4 00 00       	call   c000f3f8 <sbrk>
c0000fed:	83 c4 10             	add    esp,0x10
c0000ff0:	eb 30                	jmp    c0001022 <sYSMALLOc+0x199>
c0000ff2:	39 c6                	cmp    esi,eax
c0000ff4:	76 33                	jbe    c0001029 <sYSMALLOc+0x1a0>
c0000ff6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000ffa:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0001001:	01 f0                	add    eax,esi
c0001003:	eb 1d                	jmp    c0001022 <sYSMALLOc+0x199>
c0001005:	83 ec 0c             	sub    esp,0xc
c0001008:	89 f5                	mov    ebp,esi
c000100a:	6a 00                	push   0x0
c000100c:	e8 e7 e3 00 00       	call   c000f3f8 <sbrk>
c0001011:	89 c2                	mov    edx,eax
c0001013:	29 f2                	sub    edx,esi
c0001015:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0001019:	83 c4 10             	add    esp,0x10
c000101c:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0001022:	31 d2                	xor    edx,edx
c0001024:	83 f8 ff             	cmp    eax,0xffffffff
c0001027:	74 66                	je     c000108f <sYSMALLOc+0x206>
c0001029:	29 e8                	sub    eax,ebp
c000102b:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c000102e:	01 d0                	add    eax,edx
c0001030:	83 c8 01             	or     eax,0x1
c0001033:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0001036:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c000103c:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0001041:	74 4c                	je     c000108f <sYSMALLOc+0x206>
c0001043:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001047:	83 e8 0c             	sub    eax,0xc
c000104a:	83 e0 f8             	and    eax,0xfffffff8
c000104d:	89 c2                	mov    edx,eax
c000104f:	83 ca 01             	or     edx,0x1
c0001052:	83 f8 0f             	cmp    eax,0xf
c0001055:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0001058:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0001060:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0001068:	76 25                	jbe    c000108f <sYSMALLOc+0x206>
c000106a:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0001070:	83 ec 0c             	sub    esp,0xc
c0001073:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c000107d:	83 c7 08             	add    edi,0x8
c0001080:	57                   	push   edi
c0001081:	e8 0e fd ff ff       	call   c0000d94 <dlfree>
c0001086:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c000108c:	83 c4 10             	add    esp,0x10
c000108f:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0001095:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c000109b:	73 06                	jae    c00010a3 <sYSMALLOc+0x21a>
c000109d:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c00010a3:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c00010a9:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c00010af:	73 06                	jae    c00010b7 <sYSMALLOc+0x22e>
c00010b1:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c00010b7:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00010ba:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00010bd:	83 e2 fc             	and    edx,0xfffffffc
c00010c0:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c00010c4:	0f 82 3c fe ff ff    	jb     c0000f06 <sYSMALLOc+0x7d>
c00010ca:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00010ce:	8d 0c 38             	lea    ecx,[eax+edi*1]
c00010d1:	29 fa                	sub    edx,edi
c00010d3:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c00010d6:	83 ca 01             	or     edx,0x1
c00010d9:	89 fb                	mov    ebx,edi
c00010db:	83 c0 08             	add    eax,0x8
c00010de:	83 cb 01             	or     ebx,0x1
c00010e1:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c00010e4:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00010e7:	83 c4 2c             	add    esp,0x2c
c00010ea:	5b                   	pop    ebx
c00010eb:	5e                   	pop    esi
c00010ec:	5f                   	pop    edi
c00010ed:	5d                   	pop    ebp
c00010ee:	c3                   	ret    

c00010ef <dlmalloc>:
c00010ef:	55                   	push   ebp
c00010f0:	57                   	push   edi
c00010f1:	56                   	push   esi
c00010f2:	53                   	push   ebx
c00010f3:	83 ec 1c             	sub    esp,0x1c
c00010f6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00010fa:	83 f8 df             	cmp    eax,0xffffffdf
c00010fd:	0f 87 70 03 00 00    	ja     c0001473 <dlmalloc+0x384>
c0001103:	83 c0 0b             	add    eax,0xb
c0001106:	be 10 00 00 00       	mov    esi,0x10
c000110b:	83 f8 0f             	cmp    eax,0xf
c000110e:	76 05                	jbe    c0001115 <dlmalloc+0x26>
c0001110:	83 e0 f8             	and    eax,0xfffffff8
c0001113:	89 c6                	mov    esi,eax
c0001115:	8b 3d a0 d5 02 c0    	mov    edi,DWORD PTR ds:0xc002d5a0
c000111b:	f7 c7 01 00 00 00    	test   edi,0x1
c0001121:	75 17                	jne    c000113a <dlmalloc+0x4b>
c0001123:	85 ff                	test   edi,edi
c0001125:	0f 85 05 03 00 00    	jne    c0001430 <dlmalloc+0x341>
c000112b:	b8 a0 d5 02 c0       	mov    eax,0xc002d5a0
c0001130:	e8 78 fb ff ff       	call   c0000cad <malloc_consolidate>
c0001135:	e9 f6 02 00 00       	jmp    c0001430 <dlmalloc+0x341>
c000113a:	39 f7                	cmp    edi,esi
c000113c:	72 1f                	jb     c000115d <dlmalloc+0x6e>
c000113e:	89 f2                	mov    edx,esi
c0001140:	c1 ea 03             	shr    edx,0x3
c0001143:	83 ea 02             	sub    edx,0x2
c0001146:	8b 04 95 a4 d5 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd2a5c]
c000114d:	85 c0                	test   eax,eax
c000114f:	74 0c                	je     c000115d <dlmalloc+0x6e>
c0001151:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0001154:	89 0c 95 a4 d5 02 c0 	mov    DWORD PTR [edx*4-0x3ffd2a5c],ecx
c000115b:	eb 30                	jmp    c000118d <dlmalloc+0x9e>
c000115d:	89 f0                	mov    eax,esi
c000115f:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001165:	77 2e                	ja     c0001195 <dlmalloc+0xa6>
c0001167:	c1 e8 03             	shr    eax,0x3
c000116a:	8d 14 c5 d4 d5 02 c0 	lea    edx,[eax*8-0x3ffd2a2c]
c0001171:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001175:	8d 5a f8             	lea    ebx,[edx-0x8]
c0001178:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c000117b:	39 c3                	cmp    ebx,eax
c000117d:	74 2e                	je     c00011ad <dlmalloc+0xbe>
c000117f:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0001182:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c0001187:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c000118a:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c000118d:	83 c0 08             	add    eax,0x8
c0001190:	e9 e0 02 00 00       	jmp    c0001475 <dlmalloc+0x386>
c0001195:	e8 8f fa ff ff       	call   c0000c29 <largebin_index>
c000119a:	83 e7 02             	and    edi,0x2
c000119d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00011a1:	74 0a                	je     c00011ad <dlmalloc+0xbe>
c00011a3:	b8 a0 d5 02 c0       	mov    eax,0xc002d5a0
c00011a8:	e8 00 fb ff ff       	call   c0000cad <malloc_consolidate>
c00011ad:	8d 46 10             	lea    eax,[esi+0x10]
c00011b0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00011b4:	8b 1d e0 d5 02 c0    	mov    ebx,DWORD PTR ds:0xc002d5e0
c00011ba:	81 fb d4 d5 02 c0    	cmp    ebx,0xc002d5d4
c00011c0:	0f 84 13 01 00 00    	je     c00012d9 <dlmalloc+0x1ea>
c00011c6:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00011c9:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00011cc:	83 e7 fc             	and    edi,0xfffffffc
c00011cf:	81 fe ff 00 00 00    	cmp    esi,0xff
c00011d5:	77 4c                	ja     c0001223 <dlmalloc+0x134>
c00011d7:	3d d4 d5 02 c0       	cmp    eax,0xc002d5d4
c00011dc:	75 45                	jne    c0001223 <dlmalloc+0x134>
c00011de:	39 1d d0 d5 02 c0    	cmp    DWORD PTR ds:0xc002d5d0,ebx
c00011e4:	75 3d                	jne    c0001223 <dlmalloc+0x134>
c00011e6:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c00011ea:	73 37                	jae    c0001223 <dlmalloc+0x134>
c00011ec:	8d 04 33             	lea    eax,[ebx+esi*1]
c00011ef:	89 fa                	mov    edx,edi
c00011f1:	a3 dc d5 02 c0       	mov    ds:0xc002d5dc,eax
c00011f6:	a3 e0 d5 02 c0       	mov    ds:0xc002d5e0,eax
c00011fb:	a3 d0 d5 02 c0       	mov    ds:0xc002d5d0,eax
c0001200:	29 f2                	sub    edx,esi
c0001202:	c7 40 08 d4 d5 02 c0 	mov    DWORD PTR [eax+0x8],0xc002d5d4
c0001209:	c7 40 0c d4 d5 02 c0 	mov    DWORD PTR [eax+0xc],0xc002d5d4
c0001210:	83 ce 01             	or     esi,0x1
c0001213:	89 d1                	mov    ecx,edx
c0001215:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c0001218:	83 c9 01             	or     ecx,0x1
c000121b:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c000121e:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0001221:	eb 15                	jmp    c0001238 <dlmalloc+0x149>
c0001223:	a3 e0 d5 02 c0       	mov    ds:0xc002d5e0,eax
c0001228:	39 fe                	cmp    esi,edi
c000122a:	c7 40 08 d4 d5 02 c0 	mov    DWORD PTR [eax+0x8],0xc002d5d4
c0001231:	75 0d                	jne    c0001240 <dlmalloc+0x151>
c0001233:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c0001238:	8d 43 08             	lea    eax,[ebx+0x8]
c000123b:	e9 35 02 00 00       	jmp    c0001475 <dlmalloc+0x386>
c0001240:	89 f8                	mov    eax,edi
c0001242:	81 ff ff 00 00 00    	cmp    edi,0xff
c0001248:	77 19                	ja     c0001263 <dlmalloc+0x174>
c000124a:	c1 e8 03             	shr    eax,0x3
c000124d:	8d 14 00             	lea    edx,[eax+eax*1]
c0001250:	83 c2 0d             	add    edx,0xd
c0001253:	8d 2c 95 98 d5 02 c0 	lea    ebp,[edx*4-0x3ffd2a68]
c000125a:	8b 14 95 a0 d5 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2a60]
c0001261:	eb 46                	jmp    c00012a9 <dlmalloc+0x1ba>
c0001263:	e8 c1 f9 ff ff       	call   c0000c29 <largebin_index>
c0001268:	8d 14 00             	lea    edx,[eax+eax*1]
c000126b:	83 c2 0d             	add    edx,0xd
c000126e:	8d 0c 95 a0 d5 02 c0 	lea    ecx,[edx*4-0x3ffd2a60]
c0001275:	8b 14 95 a0 d5 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2a60]
c000127c:	8d 69 f8             	lea    ebp,[ecx-0x8]
c000127f:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c0001283:	89 d5                	mov    ebp,edx
c0001285:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c0001289:	74 1e                	je     c00012a9 <dlmalloc+0x1ba>
c000128b:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c000128e:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c0001291:	77 12                	ja     c00012a5 <dlmalloc+0x1b6>
c0001293:	83 cf 01             	or     edi,0x1
c0001296:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c0001299:	76 05                	jbe    c00012a0 <dlmalloc+0x1b1>
c000129b:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c000129e:	eb f6                	jmp    c0001296 <dlmalloc+0x1a7>
c00012a0:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00012a3:	eb 04                	jmp    c00012a9 <dlmalloc+0x1ba>
c00012a5:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00012a9:	89 c7                	mov    edi,eax
c00012ab:	88 c1                	mov    cl,al
c00012ad:	c1 ff 05             	sar    edi,0x5
c00012b0:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00012b4:	bf 01 00 00 00       	mov    edi,0x1
c00012b9:	d3 e7                	shl    edi,cl
c00012bb:	89 f8                	mov    eax,edi
c00012bd:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00012c1:	09 04 bd d4 d8 02 c0 	or     DWORD PTR [edi*4-0x3ffd272c],eax
c00012c8:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00012cb:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00012ce:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c00012d1:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c00012d4:	e9 db fe ff ff       	jmp    c00011b4 <dlmalloc+0xc5>
c00012d9:	81 fe ff 00 00 00    	cmp    esi,0xff
c00012df:	76 78                	jbe    c0001359 <dlmalloc+0x26a>
c00012e1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00012e5:	8d 04 c5 d4 d5 02 c0 	lea    eax,[eax*8-0x3ffd2a2c]
c00012ec:	8d 48 f8             	lea    ecx,[eax-0x8]
c00012ef:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00012f2:	39 ca                	cmp    edx,ecx
c00012f4:	74 63                	je     c0001359 <dlmalloc+0x26a>
c00012f6:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c00012f9:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00012fc:	83 e3 fc             	and    ebx,0xfffffffc
c00012ff:	39 de                	cmp    esi,ebx
c0001301:	77 52                	ja     c0001355 <dlmalloc+0x266>
c0001303:	89 df                	mov    edi,ebx
c0001305:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0001308:	29 f7                	sub    edi,esi
c000130a:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c000130d:	01 d3                	add    ebx,edx
c000130f:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0001312:	83 ff 0f             	cmp    edi,0xf
c0001315:	8d 42 08             	lea    eax,[edx+0x8]
c0001318:	77 09                	ja     c0001323 <dlmalloc+0x234>
c000131a:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c000131e:	e9 52 01 00 00       	jmp    c0001475 <dlmalloc+0x386>
c0001323:	8d 0c 32             	lea    ecx,[edx+esi*1]
c0001326:	83 ce 01             	or     esi,0x1
c0001329:	89 0d dc d5 02 c0    	mov    DWORD PTR ds:0xc002d5dc,ecx
c000132f:	89 0d e0 d5 02 c0    	mov    DWORD PTR ds:0xc002d5e0,ecx
c0001335:	c7 41 08 d4 d5 02 c0 	mov    DWORD PTR [ecx+0x8],0xc002d5d4
c000133c:	c7 41 0c d4 d5 02 c0 	mov    DWORD PTR [ecx+0xc],0xc002d5d4
c0001343:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0001346:	89 fa                	mov    edx,edi
c0001348:	83 ca 01             	or     edx,0x1
c000134b:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000134e:	89 3b                	mov    DWORD PTR [ebx],edi
c0001350:	e9 20 01 00 00       	jmp    c0001475 <dlmalloc+0x386>
c0001355:	89 c2                	mov    edx,eax
c0001357:	eb 99                	jmp    c00012f2 <dlmalloc+0x203>
c0001359:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000135d:	b8 01 00 00 00       	mov    eax,0x1
c0001362:	41                   	inc    ecx
c0001363:	89 cb                	mov    ebx,ecx
c0001365:	8d 14 cd cc d5 02 c0 	lea    edx,[ecx*8-0x3ffd2a34]
c000136c:	c1 eb 05             	shr    ebx,0x5
c000136f:	d3 e0                	shl    eax,cl
c0001371:	8b 3c 9d d4 d8 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd272c]
c0001378:	39 f8                	cmp    eax,edi
c000137a:	77 04                	ja     c0001380 <dlmalloc+0x291>
c000137c:	85 c0                	test   eax,eax
c000137e:	75 26                	jne    c00013a6 <dlmalloc+0x2b7>
c0001380:	43                   	inc    ebx
c0001381:	83 fb 02             	cmp    ebx,0x2
c0001384:	0f 87 a6 00 00 00    	ja     c0001430 <dlmalloc+0x341>
c000138a:	8b 3c 9d d4 d8 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd272c]
c0001391:	85 ff                	test   edi,edi
c0001393:	74 eb                	je     c0001380 <dlmalloc+0x291>
c0001395:	89 d8                	mov    eax,ebx
c0001397:	c1 e0 06             	shl    eax,0x6
c000139a:	8d 14 85 cc d5 02 c0 	lea    edx,[eax*4-0x3ffd2a34]
c00013a1:	b8 01 00 00 00       	mov    eax,0x1
c00013a6:	85 f8                	test   eax,edi
c00013a8:	75 07                	jne    c00013b1 <dlmalloc+0x2c2>
c00013aa:	83 c2 08             	add    edx,0x8
c00013ad:	01 c0                	add    eax,eax
c00013af:	eb f5                	jmp    c00013a6 <dlmalloc+0x2b7>
c00013b1:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00013b4:	39 ca                	cmp    edx,ecx
c00013b6:	75 14                	jne    c00013cc <dlmalloc+0x2dd>
c00013b8:	89 c1                	mov    ecx,eax
c00013ba:	83 c2 08             	add    edx,0x8
c00013bd:	f7 d1                	not    ecx
c00013bf:	01 c0                	add    eax,eax
c00013c1:	21 cf                	and    edi,ecx
c00013c3:	89 3c 9d d4 d8 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd272c],edi
c00013ca:	eb ac                	jmp    c0001378 <dlmalloc+0x289>
c00013cc:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00013cf:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c00013d2:	83 e0 fc             	and    eax,0xfffffffc
c00013d5:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c00013d8:	89 c3                	mov    ebx,eax
c00013da:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c00013dd:	29 f3                	sub    ebx,esi
c00013df:	8d 14 01             	lea    edx,[ecx+eax*1]
c00013e2:	83 fb 0f             	cmp    ebx,0xf
c00013e5:	8d 41 08             	lea    eax,[ecx+0x8]
c00013e8:	77 09                	ja     c00013f3 <dlmalloc+0x304>
c00013ea:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c00013ee:	e9 82 00 00 00       	jmp    c0001475 <dlmalloc+0x386>
c00013f3:	8d 3c 31             	lea    edi,[ecx+esi*1]
c00013f6:	81 fe ff 00 00 00    	cmp    esi,0xff
c00013fc:	89 3d dc d5 02 c0    	mov    DWORD PTR ds:0xc002d5dc,edi
c0001402:	89 3d e0 d5 02 c0    	mov    DWORD PTR ds:0xc002d5e0,edi
c0001408:	c7 47 08 d4 d5 02 c0 	mov    DWORD PTR [edi+0x8],0xc002d5d4
c000140f:	c7 47 0c d4 d5 02 c0 	mov    DWORD PTR [edi+0xc],0xc002d5d4
c0001416:	77 06                	ja     c000141e <dlmalloc+0x32f>
c0001418:	89 3d d0 d5 02 c0    	mov    DWORD PTR ds:0xc002d5d0,edi
c000141e:	83 ce 01             	or     esi,0x1
c0001421:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c0001424:	89 d9                	mov    ecx,ebx
c0001426:	83 c9 01             	or     ecx,0x1
c0001429:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c000142c:	89 1a                	mov    DWORD PTR [edx],ebx
c000142e:	eb 45                	jmp    c0001475 <dlmalloc+0x386>
c0001430:	a1 cc d5 02 c0       	mov    eax,ds:0xc002d5cc
c0001435:	8d 4e 10             	lea    ecx,[esi+0x10]
c0001438:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000143b:	83 e2 fc             	and    edx,0xfffffffc
c000143e:	39 d1                	cmp    ecx,edx
c0001440:	77 1e                	ja     c0001460 <dlmalloc+0x371>
c0001442:	8d 0c 30             	lea    ecx,[eax+esi*1]
c0001445:	89 f3                	mov    ebx,esi
c0001447:	89 0d cc d5 02 c0    	mov    DWORD PTR ds:0xc002d5cc,ecx
c000144d:	83 cb 01             	or     ebx,0x1
c0001450:	29 f2                	sub    edx,esi
c0001452:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001455:	83 ca 01             	or     edx,0x1
c0001458:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000145b:	e9 2d fd ff ff       	jmp    c000118d <dlmalloc+0x9e>
c0001460:	83 c4 1c             	add    esp,0x1c
c0001463:	89 f0                	mov    eax,esi
c0001465:	5b                   	pop    ebx
c0001466:	ba a0 d5 02 c0       	mov    edx,0xc002d5a0
c000146b:	5e                   	pop    esi
c000146c:	5f                   	pop    edi
c000146d:	5d                   	pop    ebp
c000146e:	e9 16 fa ff ff       	jmp    c0000e89 <sYSMALLOc>
c0001473:	31 c0                	xor    eax,eax
c0001475:	83 c4 1c             	add    esp,0x1c
c0001478:	5b                   	pop    ebx
c0001479:	5e                   	pop    esi
c000147a:	5f                   	pop    edi
c000147b:	5d                   	pop    ebp
c000147c:	c3                   	ret    

c000147d <iALLOc>:
c000147d:	55                   	push   ebp
c000147e:	89 c5                	mov    ebp,eax
c0001480:	57                   	push   edi
c0001481:	56                   	push   esi
c0001482:	53                   	push   ebx
c0001483:	83 ec 2c             	sub    esp,0x2c
c0001486:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000148a:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000148e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001492:	83 3d a0 d5 02 c0 00 	cmp    DWORD PTR ds:0xc002d5a0,0x0
c0001499:	75 12                	jne    c00014ad <iALLOc+0x30>
c000149b:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000149f:	b8 a0 d5 02 c0       	mov    eax,0xc002d5a0
c00014a4:	e8 04 f8 ff ff       	call   c0000cad <malloc_consolidate>
c00014a9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00014ad:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00014b2:	74 12                	je     c00014c6 <iALLOc+0x49>
c00014b4:	85 ed                	test   ebp,ebp
c00014b6:	0f 84 64 01 00 00    	je     c0001620 <iALLOc+0x1a3>
c00014bc:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00014c4:	eb 33                	jmp    c00014f9 <iALLOc+0x7c>
c00014c6:	85 ed                	test   ebp,ebp
c00014c8:	75 14                	jne    c00014de <iALLOc+0x61>
c00014ca:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c00014d2:	83 c4 2c             	add    esp,0x2c
c00014d5:	5b                   	pop    ebx
c00014d6:	5e                   	pop    esi
c00014d7:	5f                   	pop    edi
c00014d8:	5d                   	pop    ebp
c00014d9:	e9 11 fc ff ff       	jmp    c00010ef <dlmalloc>
c00014de:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c00014e5:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c00014ed:	83 f8 0f             	cmp    eax,0xf
c00014f0:	76 07                	jbe    c00014f9 <iALLOc+0x7c>
c00014f2:	83 e0 f8             	and    eax,0xfffffff8
c00014f5:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00014f9:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c00014fe:	75 09                	jne    c0001509 <iALLOc+0x8c>
c0001500:	89 d0                	mov    eax,edx
c0001502:	8d 3c aa             	lea    edi,[edx+ebp*4]
c0001505:	31 f6                	xor    esi,esi
c0001507:	eb 3b                	jmp    c0001544 <iALLOc+0xc7>
c0001509:	8b 02                	mov    eax,DWORD PTR [edx]
c000150b:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c0001513:	83 c0 0b             	add    eax,0xb
c0001516:	83 f8 0f             	cmp    eax,0xf
c0001519:	76 07                	jbe    c0001522 <iALLOc+0xa5>
c000151b:	83 e0 f8             	and    eax,0xfffffff8
c000151e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0001522:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0001526:	0f af f5             	imul   esi,ebp
c0001529:	eb 25                	jmp    c0001550 <iALLOc+0xd3>
c000152b:	8b 18                	mov    ebx,DWORD PTR [eax]
c000152d:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001530:	bb 10 00 00 00       	mov    ebx,0x10
c0001535:	83 f9 0f             	cmp    ecx,0xf
c0001538:	76 05                	jbe    c000153f <iALLOc+0xc2>
c000153a:	83 e1 f8             	and    ecx,0xfffffff8
c000153d:	89 cb                	mov    ebx,ecx
c000153f:	01 de                	add    esi,ebx
c0001541:	83 c0 04             	add    eax,0x4
c0001544:	39 c7                	cmp    edi,eax
c0001546:	75 e3                	jne    c000152b <iALLOc+0xae>
c0001548:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0001550:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0001554:	8b 1d f4 d8 02 c0    	mov    ebx,DWORD PTR ds:0xc002d8f4
c000155a:	83 ec 0c             	sub    esp,0xc
c000155d:	c7 05 f4 d8 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002d8f4,0x0
c0001567:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000156b:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c000156f:	50                   	push   eax
c0001570:	e8 7a fb ff ff       	call   c00010ef <dlmalloc>
c0001575:	83 c4 10             	add    esp,0x10
c0001578:	89 1d f4 d8 02 c0    	mov    DWORD PTR ds:0xc002d8f4,ebx
c000157e:	85 c0                	test   eax,eax
c0001580:	0f 84 92 00 00 00    	je     c0001618 <iALLOc+0x19b>
c0001586:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c0001589:	8d 78 f8             	lea    edi,[eax-0x8]
c000158c:	83 e3 fc             	and    ebx,0xfffffffc
c000158f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0001593:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c0001598:	74 1e                	je     c00015b8 <iALLOc+0x13b>
c000159a:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000159e:	89 d9                	mov    ecx,ebx
c00015a0:	52                   	push   edx
c00015a1:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00015a5:	83 e9 04             	sub    ecx,0x4
c00015a8:	51                   	push   ecx
c00015a9:	6a 00                	push   0x0
c00015ab:	50                   	push   eax
c00015ac:	e8 9f f1 ff ff       	call   c0000750 <memset>
c00015b1:	83 c4 10             	add    esp,0x10
c00015b4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00015b8:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00015bd:	75 14                	jne    c00015d3 <iALLOc+0x156>
c00015bf:	8d 04 37             	lea    eax,[edi+esi*1]
c00015c2:	29 f3                	sub    ebx,esi
c00015c4:	8d 48 08             	lea    ecx,[eax+0x8]
c00015c7:	83 cb 01             	or     ebx,0x1
c00015ca:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00015ce:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00015d1:	89 f3                	mov    ebx,esi
c00015d3:	31 c0                	xor    eax,eax
c00015d5:	4d                   	dec    ebp
c00015d6:	8d 4f 08             	lea    ecx,[edi+0x8]
c00015d9:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00015dd:	39 c5                	cmp    ebp,eax
c00015df:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c00015e2:	74 2c                	je     c0001610 <iALLOc+0x193>
c00015e4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00015e8:	85 c9                	test   ecx,ecx
c00015ea:	75 15                	jne    c0001601 <iALLOc+0x184>
c00015ec:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c00015ef:	8d 71 0b             	lea    esi,[ecx+0xb]
c00015f2:	b9 10 00 00 00       	mov    ecx,0x10
c00015f7:	83 fe 0f             	cmp    esi,0xf
c00015fa:	76 05                	jbe    c0001601 <iALLOc+0x184>
c00015fc:	83 e6 f8             	and    esi,0xfffffff8
c00015ff:	89 f1                	mov    ecx,esi
c0001601:	89 ce                	mov    esi,ecx
c0001603:	29 cb                	sub    ebx,ecx
c0001605:	83 ce 01             	or     esi,0x1
c0001608:	40                   	inc    eax
c0001609:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c000160c:	01 cf                	add    edi,ecx
c000160e:	eb c6                	jmp    c00015d6 <iALLOc+0x159>
c0001610:	83 cb 01             	or     ebx,0x1
c0001613:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c0001616:	eb 08                	jmp    c0001620 <iALLOc+0x1a3>
c0001618:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001620:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001624:	83 c4 2c             	add    esp,0x2c
c0001627:	5b                   	pop    ebx
c0001628:	5e                   	pop    esi
c0001629:	5f                   	pop    edi
c000162a:	5d                   	pop    ebp
c000162b:	c3                   	ret    

c000162c <dlrealloc>:
c000162c:	55                   	push   ebp
c000162d:	57                   	push   edi
c000162e:	56                   	push   esi
c000162f:	53                   	push   ebx
c0001630:	83 ec 1c             	sub    esp,0x1c
c0001633:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0001637:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000163b:	85 db                	test   ebx,ebx
c000163d:	75 10                	jne    c000164f <dlrealloc+0x23>
c000163f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0001643:	83 c4 1c             	add    esp,0x1c
c0001646:	5b                   	pop    ebx
c0001647:	5e                   	pop    esi
c0001648:	5f                   	pop    edi
c0001649:	5d                   	pop    ebp
c000164a:	e9 a0 fa ff ff       	jmp    c00010ef <dlmalloc>
c000164f:	83 f8 df             	cmp    eax,0xffffffdf
c0001652:	76 07                	jbe    c000165b <dlrealloc+0x2f>
c0001654:	31 db                	xor    ebx,ebx
c0001656:	e9 6a 01 00 00       	jmp    c00017c5 <dlrealloc+0x199>
c000165b:	83 c0 0b             	add    eax,0xb
c000165e:	bd 10 00 00 00       	mov    ebp,0x10
c0001663:	83 f8 0f             	cmp    eax,0xf
c0001666:	76 05                	jbe    c000166d <dlrealloc+0x41>
c0001668:	83 e0 f8             	and    eax,0xfffffff8
c000166b:	89 c5                	mov    ebp,eax
c000166d:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c0001670:	8d 7b f8             	lea    edi,[ebx-0x8]
c0001673:	89 c6                	mov    esi,eax
c0001675:	83 e6 fc             	and    esi,0xfffffffc
c0001678:	a8 02                	test   al,0x2
c000167a:	75 d8                	jne    c0001654 <dlrealloc+0x28>
c000167c:	39 f5                	cmp    ebp,esi
c000167e:	0f 86 04 01 00 00    	jbe    c0001788 <dlrealloc+0x15c>
c0001684:	8d 14 37             	lea    edx,[edi+esi*1]
c0001687:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c000168a:	39 15 cc d5 02 c0    	cmp    DWORD PTR ds:0xc002d5cc,edx
c0001690:	75 33                	jne    c00016c5 <dlrealloc+0x99>
c0001692:	83 e1 fc             	and    ecx,0xfffffffc
c0001695:	01 f1                	add    ecx,esi
c0001697:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000169b:	8d 4d 10             	lea    ecx,[ebp+0x10]
c000169e:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00016a2:	77 49                	ja     c00016ed <dlrealloc+0xc1>
c00016a4:	01 ef                	add    edi,ebp
c00016a6:	83 e0 01             	and    eax,0x1
c00016a9:	09 e8                	or     eax,ebp
c00016ab:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c00016ae:	89 3d cc d5 02 c0    	mov    DWORD PTR ds:0xc002d5cc,edi
c00016b4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00016b8:	29 e8                	sub    eax,ebp
c00016ba:	83 c8 01             	or     eax,0x1
c00016bd:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c00016c0:	e9 00 01 00 00       	jmp    c00017c5 <dlrealloc+0x199>
c00016c5:	89 c8                	mov    eax,ecx
c00016c7:	83 e0 fe             	and    eax,0xfffffffe
c00016ca:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c00016cf:	75 1c                	jne    c00016ed <dlrealloc+0xc1>
c00016d1:	83 e1 fc             	and    ecx,0xfffffffc
c00016d4:	01 f1                	add    ecx,esi
c00016d6:	39 cd                	cmp    ebp,ecx
c00016d8:	77 13                	ja     c00016ed <dlrealloc+0xc1>
c00016da:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c00016dd:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00016e0:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c00016e3:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c00016e6:	89 ce                	mov    esi,ecx
c00016e8:	e9 9b 00 00 00       	jmp    c0001788 <dlrealloc+0x15c>
c00016ed:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00016f1:	8d 45 f9             	lea    eax,[ebp-0x7]
c00016f4:	83 ec 0c             	sub    esp,0xc
c00016f7:	50                   	push   eax
c00016f8:	e8 f2 f9 ff ff       	call   c00010ef <dlmalloc>
c00016fd:	83 c4 10             	add    esp,0x10
c0001700:	85 c0                	test   eax,eax
c0001702:	0f 84 4c ff ff ff    	je     c0001654 <dlrealloc+0x28>
c0001708:	8d 48 f8             	lea    ecx,[eax-0x8]
c000170b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000170f:	39 ca                	cmp    edx,ecx
c0001711:	75 0a                	jne    c000171d <dlrealloc+0xf1>
c0001713:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c0001716:	83 e0 fc             	and    eax,0xfffffffc
c0001719:	01 c6                	add    esi,eax
c000171b:	eb 6b                	jmp    c0001788 <dlrealloc+0x15c>
c000171d:	8d 4e fc             	lea    ecx,[esi-0x4]
c0001720:	83 f9 27             	cmp    ecx,0x27
c0001723:	76 08                	jbe    c000172d <dlrealloc+0x101>
c0001725:	89 de                	mov    esi,ebx
c0001727:	89 c7                	mov    edi,eax
c0001729:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000172b:	eb 43                	jmp    c0001770 <dlrealloc+0x144>
c000172d:	8b 13                	mov    edx,DWORD PTR [ebx]
c000172f:	83 f9 13             	cmp    ecx,0x13
c0001732:	89 10                	mov    DWORD PTR [eax],edx
c0001734:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c0001737:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000173a:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000173d:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0001740:	76 2e                	jbe    c0001770 <dlrealloc+0x144>
c0001742:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0001745:	83 f9 1b             	cmp    ecx,0x1b
c0001748:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000174b:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000174e:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0001751:	76 1d                	jbe    c0001770 <dlrealloc+0x144>
c0001753:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0001756:	83 f9 23             	cmp    ecx,0x23
c0001759:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c000175c:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000175f:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0001762:	76 0c                	jbe    c0001770 <dlrealloc+0x144>
c0001764:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0001767:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c000176a:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c000176d:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0001770:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001774:	83 ec 0c             	sub    esp,0xc
c0001777:	53                   	push   ebx
c0001778:	e8 17 f6 ff ff       	call   c0000d94 <dlfree>
c000177d:	83 c4 10             	add    esp,0x10
c0001780:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001784:	89 c3                	mov    ebx,eax
c0001786:	eb 3d                	jmp    c00017c5 <dlrealloc+0x199>
c0001788:	89 f2                	mov    edx,esi
c000178a:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c000178d:	29 ea                	sub    edx,ebp
c000178f:	83 e1 01             	and    ecx,0x1
c0001792:	8d 04 37             	lea    eax,[edi+esi*1]
c0001795:	83 fa 0f             	cmp    edx,0xf
c0001798:	77 0b                	ja     c00017a5 <dlrealloc+0x179>
c000179a:	09 ce                	or     esi,ecx
c000179c:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c000179f:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00017a3:	eb 20                	jmp    c00017c5 <dlrealloc+0x199>
c00017a5:	01 ef                	add    edi,ebp
c00017a7:	83 ec 0c             	sub    esp,0xc
c00017aa:	09 cd                	or     ebp,ecx
c00017ac:	83 ca 01             	or     edx,0x1
c00017af:	89 6b fc             	mov    DWORD PTR [ebx-0x4],ebp
c00017b2:	83 c7 08             	add    edi,0x8
c00017b5:	89 57 fc             	mov    DWORD PTR [edi-0x4],edx
c00017b8:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00017bc:	57                   	push   edi
c00017bd:	e8 d2 f5 ff ff       	call   c0000d94 <dlfree>
c00017c2:	83 c4 10             	add    esp,0x10
c00017c5:	83 c4 1c             	add    esp,0x1c
c00017c8:	89 d8                	mov    eax,ebx
c00017ca:	5b                   	pop    ebx
c00017cb:	5e                   	pop    esi
c00017cc:	5f                   	pop    edi
c00017cd:	5d                   	pop    ebp
c00017ce:	c3                   	ret    

c00017cf <dlmemalign>:
c00017cf:	55                   	push   ebp
c00017d0:	57                   	push   edi
c00017d1:	56                   	push   esi
c00017d2:	53                   	push   ebx
c00017d3:	83 ec 0c             	sub    esp,0xc
c00017d6:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00017da:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00017de:	83 fa 08             	cmp    edx,0x8
c00017e1:	77 10                	ja     c00017f3 <dlmemalign+0x24>
c00017e3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00017e7:	83 c4 0c             	add    esp,0xc
c00017ea:	5b                   	pop    ebx
c00017eb:	5e                   	pop    esi
c00017ec:	5f                   	pop    edi
c00017ed:	5d                   	pop    ebp
c00017ee:	e9 fc f8 ff ff       	jmp    c00010ef <dlmalloc>
c00017f3:	bf 10 00 00 00       	mov    edi,0x10
c00017f8:	83 fa 0f             	cmp    edx,0xf
c00017fb:	76 13                	jbe    c0001810 <dlmemalign+0x41>
c00017fd:	8d 4a ff             	lea    ecx,[edx-0x1]
c0001800:	85 d1                	test   ecx,edx
c0001802:	75 04                	jne    c0001808 <dlmemalign+0x39>
c0001804:	89 d7                	mov    edi,edx
c0001806:	eb 08                	jmp    c0001810 <dlmemalign+0x41>
c0001808:	39 d7                	cmp    edi,edx
c000180a:	73 04                	jae    c0001810 <dlmemalign+0x41>
c000180c:	01 ff                	add    edi,edi
c000180e:	eb f8                	jmp    c0001808 <dlmemalign+0x39>
c0001810:	83 f8 df             	cmp    eax,0xffffffdf
c0001813:	76 07                	jbe    c000181c <dlmemalign+0x4d>
c0001815:	31 c0                	xor    eax,eax
c0001817:	e9 ce 00 00 00       	jmp    c00018ea <dlmemalign+0x11b>
c000181c:	83 c0 0b             	add    eax,0xb
c000181f:	bd 10 00 00 00       	mov    ebp,0x10
c0001824:	83 f8 0f             	cmp    eax,0xf
c0001827:	76 05                	jbe    c000182e <dlmemalign+0x5f>
c0001829:	83 e0 f8             	and    eax,0xfffffff8
c000182c:	89 c5                	mov    ebp,eax
c000182e:	83 ec 0c             	sub    esp,0xc
c0001831:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c0001835:	50                   	push   eax
c0001836:	e8 b4 f8 ff ff       	call   c00010ef <dlmalloc>
c000183b:	83 c4 10             	add    esp,0x10
c000183e:	89 c1                	mov    ecx,eax
c0001840:	85 c0                	test   eax,eax
c0001842:	74 d1                	je     c0001815 <dlmemalign+0x46>
c0001844:	31 d2                	xor    edx,edx
c0001846:	8d 70 f8             	lea    esi,[eax-0x8]
c0001849:	f7 f7                	div    edi
c000184b:	85 d2                	test   edx,edx
c000184d:	74 62                	je     c00018b1 <dlmemalign+0xe2>
c000184f:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c0001853:	89 f8                	mov    eax,edi
c0001855:	f7 d8                	neg    eax
c0001857:	21 c3                	and    ebx,eax
c0001859:	83 eb 08             	sub    ebx,0x8
c000185c:	89 d8                	mov    eax,ebx
c000185e:	29 f0                	sub    eax,esi
c0001860:	83 f8 0f             	cmp    eax,0xf
c0001863:	77 02                	ja     c0001867 <dlmemalign+0x98>
c0001865:	01 fb                	add    ebx,edi
c0001867:	89 d8                	mov    eax,ebx
c0001869:	29 f0                	sub    eax,esi
c000186b:	89 c6                	mov    esi,eax
c000186d:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001870:	89 c2                	mov    edx,eax
c0001872:	83 e2 fc             	and    edx,0xfffffffc
c0001875:	29 f2                	sub    edx,esi
c0001877:	a8 02                	test   al,0x2
c0001879:	74 10                	je     c000188b <dlmemalign+0xbc>
c000187b:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c000187e:	83 ca 02             	or     edx,0x2
c0001881:	8d 43 08             	lea    eax,[ebx+0x8]
c0001884:	89 33                	mov    DWORD PTR [ebx],esi
c0001886:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0001889:	eb 5f                	jmp    c00018ea <dlmemalign+0x11b>
c000188b:	83 ec 0c             	sub    esp,0xc
c000188e:	89 d0                	mov    eax,edx
c0001890:	83 c8 01             	or     eax,0x1
c0001893:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0001896:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c000189b:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c000189e:	83 e0 01             	and    eax,0x1
c00018a1:	09 f0                	or     eax,esi
c00018a3:	89 de                	mov    esi,ebx
c00018a5:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c00018a8:	51                   	push   ecx
c00018a9:	e8 e6 f4 ff ff       	call   c0000d94 <dlfree>
c00018ae:	83 c4 10             	add    esp,0x10
c00018b1:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00018b4:	a8 02                	test   al,0x2
c00018b6:	75 2f                	jne    c00018e7 <dlmemalign+0x118>
c00018b8:	83 e0 fc             	and    eax,0xfffffffc
c00018bb:	8d 55 10             	lea    edx,[ebp+0x10]
c00018be:	39 c2                	cmp    edx,eax
c00018c0:	73 25                	jae    c00018e7 <dlmemalign+0x118>
c00018c2:	8d 14 2e             	lea    edx,[esi+ebp*1]
c00018c5:	83 ec 0c             	sub    esp,0xc
c00018c8:	29 e8                	sub    eax,ebp
c00018ca:	83 c2 08             	add    edx,0x8
c00018cd:	83 c8 01             	or     eax,0x1
c00018d0:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c00018d3:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00018d6:	83 e0 01             	and    eax,0x1
c00018d9:	09 c5                	or     ebp,eax
c00018db:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c00018de:	52                   	push   edx
c00018df:	e8 b0 f4 ff ff       	call   c0000d94 <dlfree>
c00018e4:	83 c4 10             	add    esp,0x10
c00018e7:	8d 46 08             	lea    eax,[esi+0x8]
c00018ea:	83 c4 0c             	add    esp,0xc
c00018ed:	5b                   	pop    ebx
c00018ee:	5e                   	pop    esi
c00018ef:	5f                   	pop    edi
c00018f0:	5d                   	pop    ebp
c00018f1:	c3                   	ret    

c00018f2 <dlcalloc>:
c00018f2:	53                   	push   ebx
c00018f3:	83 ec 14             	sub    esp,0x14
c00018f6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00018fa:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c00018ff:	50                   	push   eax
c0001900:	e8 ea f7 ff ff       	call   c00010ef <dlmalloc>
c0001905:	83 c4 10             	add    esp,0x10
c0001908:	89 c3                	mov    ebx,eax
c000190a:	85 c0                	test   eax,eax
c000190c:	74 77                	je     c0001985 <dlcalloc+0x93>
c000190e:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c0001911:	89 d0                	mov    eax,edx
c0001913:	83 e0 fc             	and    eax,0xfffffffc
c0001916:	80 e2 02             	and    dl,0x2
c0001919:	75 5a                	jne    c0001975 <dlcalloc+0x83>
c000191b:	83 e8 04             	sub    eax,0x4
c000191e:	83 f8 27             	cmp    eax,0x27
c0001921:	76 03                	jbe    c0001926 <dlcalloc+0x34>
c0001923:	51                   	push   ecx
c0001924:	eb 53                	jmp    c0001979 <dlcalloc+0x87>
c0001926:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000192c:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0001933:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000193a:	83 f8 13             	cmp    eax,0x13
c000193d:	76 46                	jbe    c0001985 <dlcalloc+0x93>
c000193f:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0001946:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000194d:	83 f8 1b             	cmp    eax,0x1b
c0001950:	76 33                	jbe    c0001985 <dlcalloc+0x93>
c0001952:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0001959:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0001960:	83 f8 23             	cmp    eax,0x23
c0001963:	76 20                	jbe    c0001985 <dlcalloc+0x93>
c0001965:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000196c:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0001973:	eb 10                	jmp    c0001985 <dlcalloc+0x93>
c0001975:	83 e8 08             	sub    eax,0x8
c0001978:	52                   	push   edx
c0001979:	50                   	push   eax
c000197a:	6a 00                	push   0x0
c000197c:	53                   	push   ebx
c000197d:	e8 ce ed ff ff       	call   c0000750 <memset>
c0001982:	83 c4 10             	add    esp,0x10
c0001985:	89 d8                	mov    eax,ebx
c0001987:	83 c4 08             	add    esp,0x8
c000198a:	5b                   	pop    ebx
c000198b:	c3                   	ret    

c000198c <dlcfree>:
c000198c:	e9 03 f4 ff ff       	jmp    c0000d94 <dlfree>

c0001991 <dlindependent_calloc>:
c0001991:	83 ec 28             	sub    esp,0x28
c0001994:	b9 03 00 00 00       	mov    ecx,0x3
c0001999:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000199d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00019a1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00019a5:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00019a9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00019ad:	e8 cb fa ff ff       	call   c000147d <iALLOc>
c00019b2:	83 c4 2c             	add    esp,0x2c
c00019b5:	c3                   	ret    

c00019b6 <dlindependent_comalloc>:
c00019b6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00019ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00019be:	31 c9                	xor    ecx,ecx
c00019c0:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00019c4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00019c8:	e9 b0 fa ff ff       	jmp    c000147d <iALLOc>

c00019cd <dlvalloc>:
c00019cd:	83 ec 0c             	sub    esp,0xc
c00019d0:	83 3d a0 d5 02 c0 00 	cmp    DWORD PTR ds:0xc002d5a0,0x0
c00019d7:	75 0a                	jne    c00019e3 <dlvalloc+0x16>
c00019d9:	b8 a0 d5 02 c0       	mov    eax,0xc002d5a0
c00019de:	e8 ca f2 ff ff       	call   c0000cad <malloc_consolidate>
c00019e3:	50                   	push   eax
c00019e4:	50                   	push   eax
c00019e5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00019e9:	ff 35 fc d8 02 c0    	push   DWORD PTR ds:0xc002d8fc
c00019ef:	e8 db fd ff ff       	call   c00017cf <dlmemalign>
c00019f4:	83 c4 1c             	add    esp,0x1c
c00019f7:	c3                   	ret    

c00019f8 <dlpvalloc>:
c00019f8:	83 ec 0c             	sub    esp,0xc
c00019fb:	83 3d a0 d5 02 c0 00 	cmp    DWORD PTR ds:0xc002d5a0,0x0
c0001a02:	75 0a                	jne    c0001a0e <dlpvalloc+0x16>
c0001a04:	b8 a0 d5 02 c0       	mov    eax,0xc002d5a0
c0001a09:	e8 9f f2 ff ff       	call   c0000cad <malloc_consolidate>
c0001a0e:	a1 fc d8 02 c0       	mov    eax,ds:0xc002d8fc
c0001a13:	89 c1                	mov    ecx,eax
c0001a15:	52                   	push   edx
c0001a16:	f7 d9                	neg    ecx
c0001a18:	52                   	push   edx
c0001a19:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001a1d:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001a21:	21 ca                	and    edx,ecx
c0001a23:	52                   	push   edx
c0001a24:	50                   	push   eax
c0001a25:	e8 a5 fd ff ff       	call   c00017cf <dlmemalign>
c0001a2a:	83 c4 1c             	add    esp,0x1c
c0001a2d:	c3                   	ret    

c0001a2e <dlmalloc_trim>:
c0001a2e:	b8 a0 d5 02 c0       	mov    eax,0xc002d5a0
c0001a33:	e8 75 f2 ff ff       	call   c0000cad <malloc_consolidate>
c0001a38:	31 c0                	xor    eax,eax
c0001a3a:	c3                   	ret    

c0001a3b <dlmalloc_usable_size>:
c0001a3b:	53                   	push   ebx
c0001a3c:	31 c0                	xor    eax,eax
c0001a3e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001a42:	85 c9                	test   ecx,ecx
c0001a44:	74 24                	je     c0001a6a <dlmalloc_usable_size+0x2f>
c0001a46:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001a49:	f6 c2 02             	test   dl,0x2
c0001a4c:	74 08                	je     c0001a56 <dlmalloc_usable_size+0x1b>
c0001a4e:	83 e2 fc             	and    edx,0xfffffffc
c0001a51:	8d 42 f8             	lea    eax,[edx-0x8]
c0001a54:	eb 14                	jmp    c0001a6a <dlmalloc_usable_size+0x2f>
c0001a56:	89 d3                	mov    ebx,edx
c0001a58:	31 c0                	xor    eax,eax
c0001a5a:	83 e3 fe             	and    ebx,0xfffffffe
c0001a5d:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001a62:	74 06                	je     c0001a6a <dlmalloc_usable_size+0x2f>
c0001a64:	83 e2 fc             	and    edx,0xfffffffc
c0001a67:	8d 42 fc             	lea    eax,[edx-0x4]
c0001a6a:	5b                   	pop    ebx
c0001a6b:	c3                   	ret    

c0001a6c <dlmallinfo>:
c0001a6c:	55                   	push   ebp
c0001a6d:	57                   	push   edi
c0001a6e:	56                   	push   esi
c0001a6f:	53                   	push   ebx
c0001a70:	83 ec 08             	sub    esp,0x8
c0001a73:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0001a77:	83 3d cc d5 02 c0 00 	cmp    DWORD PTR ds:0xc002d5cc,0x0
c0001a7e:	75 0a                	jne    c0001a8a <dlmallinfo+0x1e>
c0001a80:	b8 a0 d5 02 c0       	mov    eax,0xc002d5a0
c0001a85:	e8 23 f2 ff ff       	call   c0000cad <malloc_consolidate>
c0001a8a:	a1 cc d5 02 c0       	mov    eax,ds:0xc002d5cc
c0001a8f:	31 ed                	xor    ebp,ebp
c0001a91:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001a94:	31 c9                	xor    ecx,ecx
c0001a96:	83 e0 fc             	and    eax,0xfffffffc
c0001a99:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001a9d:	31 c0                	xor    eax,eax
c0001a9f:	8b 14 85 a4 d5 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd2a5c]
c0001aa6:	85 d2                	test   edx,edx
c0001aa8:	74 0e                	je     c0001ab8 <dlmallinfo+0x4c>
c0001aaa:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001aad:	45                   	inc    ebp
c0001aae:	83 e6 fc             	and    esi,0xfffffffc
c0001ab1:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001ab4:	01 f1                	add    ecx,esi
c0001ab6:	eb ee                	jmp    c0001aa6 <dlmallinfo+0x3a>
c0001ab8:	40                   	inc    eax
c0001ab9:	83 f8 0a             	cmp    eax,0xa
c0001abc:	75 e1                	jne    c0001a9f <dlmallinfo+0x33>
c0001abe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001ac2:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0001ac9:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001acc:	b8 d4 d5 02 c0       	mov    eax,0xc002d5d4
c0001ad1:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001ad4:	39 f0                	cmp    eax,esi
c0001ad6:	74 10                	je     c0001ae8 <dlmallinfo+0x7c>
c0001ad8:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001adb:	ff 04 24             	inc    DWORD PTR [esp]
c0001ade:	83 e7 fc             	and    edi,0xfffffffc
c0001ae1:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001ae4:	01 fa                	add    edx,edi
c0001ae6:	eb ec                	jmp    c0001ad4 <dlmallinfo+0x68>
c0001ae8:	83 c0 08             	add    eax,0x8
c0001aeb:	3d cc d8 02 c0       	cmp    eax,0xc002d8cc
c0001af0:	75 df                	jne    c0001ad1 <dlmallinfo+0x65>
c0001af2:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001af5:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001af8:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001afb:	a1 08 d9 02 c0       	mov    eax,ds:0xc002d908
c0001b00:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001b03:	89 03                	mov    DWORD PTR [ebx],eax
c0001b05:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001b08:	8b 35 f0 d8 02 c0    	mov    esi,DWORD PTR ds:0xc002d8f0
c0001b0e:	29 d0                	sub    eax,edx
c0001b10:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001b13:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001b16:	8b 35 04 d9 02 c0    	mov    esi,DWORD PTR ds:0xc002d904
c0001b1c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001b20:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001b23:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001b26:	8b 35 14 d9 02 c0    	mov    esi,DWORD PTR ds:0xc002d914
c0001b2c:	89 d8                	mov    eax,ebx
c0001b2e:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001b31:	83 c4 08             	add    esp,0x8
c0001b34:	5b                   	pop    ebx
c0001b35:	5e                   	pop    esi
c0001b36:	5f                   	pop    edi
c0001b37:	5d                   	pop    ebp
c0001b38:	c2 04 00             	ret    0x4

c0001b3b <dlmalloc_stats>:
c0001b3b:	83 ec 30             	sub    esp,0x30
c0001b3e:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001b42:	50                   	push   eax
c0001b43:	e8 24 ff ff ff       	call   c0001a6c <dlmallinfo>
c0001b48:	83 c4 30             	add    esp,0x30
c0001b4b:	c3                   	ret    

c0001b4c <dlmallopt>:
c0001b4c:	56                   	push   esi
c0001b4d:	b8 a0 d5 02 c0       	mov    eax,0xc002d5a0
c0001b52:	53                   	push   ebx
c0001b53:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001b57:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001b5b:	e8 4d f1 ff ff       	call   c0000cad <malloc_consolidate>
c0001b60:	8d 46 04             	lea    eax,[esi+0x4]
c0001b63:	83 f8 05             	cmp    eax,0x5
c0001b66:	77 67                	ja     c0001bcf <dlmallopt+0x83>
c0001b68:	ff 24 85 44 91 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd6ebc]
c0001b6f:	83 fb 50             	cmp    ebx,0x50
c0001b72:	77 5b                	ja     c0001bcf <dlmallopt+0x83>
c0001b74:	ba 08 00 00 00       	mov    edx,0x8
c0001b79:	85 db                	test   ebx,ebx
c0001b7b:	74 12                	je     c0001b8f <dlmallopt+0x43>
c0001b7d:	83 c3 0b             	add    ebx,0xb
c0001b80:	ba 10 00 00 00       	mov    edx,0x10
c0001b85:	83 fb 0f             	cmp    ebx,0xf
c0001b88:	76 05                	jbe    c0001b8f <dlmallopt+0x43>
c0001b8a:	89 da                	mov    edx,ebx
c0001b8c:	83 e2 f8             	and    edx,0xfffffff8
c0001b8f:	a1 a0 d5 02 c0       	mov    eax,ds:0xc002d5a0
c0001b94:	83 e0 03             	and    eax,0x3
c0001b97:	09 d0                	or     eax,edx
c0001b99:	a3 a0 d5 02 c0       	mov    ds:0xc002d5a0,eax
c0001b9e:	eb 31                	jmp    c0001bd1 <dlmallopt+0x85>
c0001ba0:	89 1d e4 d8 02 c0    	mov    DWORD PTR ds:0xc002d8e4,ebx
c0001ba6:	eb 06                	jmp    c0001bae <dlmallopt+0x62>
c0001ba8:	89 1d e8 d8 02 c0    	mov    DWORD PTR ds:0xc002d8e8,ebx
c0001bae:	be 01 00 00 00       	mov    esi,0x1
c0001bb3:	eb 1c                	jmp    c0001bd1 <dlmallopt+0x85>
c0001bb5:	89 1d ec d8 02 c0    	mov    DWORD PTR ds:0xc002d8ec,ebx
c0001bbb:	eb f1                	jmp    c0001bae <dlmallopt+0x62>
c0001bbd:	31 f6                	xor    esi,esi
c0001bbf:	85 db                	test   ebx,ebx
c0001bc1:	75 0e                	jne    c0001bd1 <dlmallopt+0x85>
c0001bc3:	c7 05 f4 d8 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002d8f4,0x0
c0001bcd:	eb df                	jmp    c0001bae <dlmallopt+0x62>
c0001bcf:	31 f6                	xor    esi,esi
c0001bd1:	89 f0                	mov    eax,esi
c0001bd3:	5b                   	pop    ebx
c0001bd4:	5e                   	pop    esi
c0001bd5:	c3                   	ret    

c0001bd6 <disk_status>:
c0001bd6:	31 c0                	xor    eax,eax
c0001bd8:	c3                   	ret    

c0001bd9 <disk_initialize>:
c0001bd9:	31 c0                	xor    eax,eax
c0001bdb:	c3                   	ret    

c0001bdc <disk_read>:
c0001bdc:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001be1:	0f b6 04 85 60 10 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffcefa0]
c0001be9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001bed:	e9 b4 eb 01 00       	jmp    c00207a6 <fatWrapperReadDisk>

c0001bf2 <disk_write>:
c0001bf2:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001bf7:	0f b6 04 85 60 10 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffcefa0]
c0001bff:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c03:	e9 e5 eb 01 00       	jmp    c00207ed <fatWrapperWriteDisk>

c0001c08 <disk_ioctl>:
c0001c08:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001c0d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001c11:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001c16:	0f b6 04 85 60 10 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffcefa0]
c0001c1e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c22:	e9 0d ec 01 00       	jmp    c0020834 <fatWrapperIoctl>

c0001c27 <ld_word>:
c0001c27:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001c2b:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001c2e:	c1 e2 08             	shl    edx,0x8
c0001c31:	09 d0                	or     eax,edx
c0001c33:	c3                   	ret    

c0001c34 <ld_dword>:
c0001c34:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001c38:	89 d1                	mov    ecx,edx
c0001c3a:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001c3e:	c1 e1 08             	shl    ecx,0x8
c0001c41:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001c44:	09 ca                	or     edx,ecx
c0001c46:	c1 e2 08             	shl    edx,0x8
c0001c49:	09 d0                	or     eax,edx
c0001c4b:	c3                   	ret    

c0001c4c <ld_qword>:
c0001c4c:	57                   	push   edi
c0001c4d:	56                   	push   esi
c0001c4e:	53                   	push   ebx
c0001c4f:	31 db                	xor    ebx,ebx
c0001c51:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c0001c54:	89 df                	mov    edi,ebx
c0001c56:	89 ce                	mov    esi,ecx
c0001c58:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c0001c5c:	0f a4 f7 08          	shld   edi,esi,0x8
c0001c60:	c1 e6 08             	shl    esi,0x8
c0001c63:	09 f2                	or     edx,esi
c0001c65:	89 d6                	mov    esi,edx
c0001c67:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c0001c6b:	0f a4 f7 08          	shld   edi,esi,0x8
c0001c6f:	c1 e6 08             	shl    esi,0x8
c0001c72:	09 f2                	or     edx,esi
c0001c74:	89 d6                	mov    esi,edx
c0001c76:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001c7a:	0f a4 f7 08          	shld   edi,esi,0x8
c0001c7e:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001c81:	c1 e6 08             	shl    esi,0x8
c0001c84:	89 fb                	mov    ebx,edi
c0001c86:	09 f2                	or     edx,esi
c0001c88:	89 d1                	mov    ecx,edx
c0001c8a:	0f a4 cb 08          	shld   ebx,ecx,0x8
c0001c8e:	c1 e1 08             	shl    ecx,0x8
c0001c91:	89 da                	mov    edx,ebx
c0001c93:	09 c8                	or     eax,ecx
c0001c95:	5b                   	pop    ebx
c0001c96:	5e                   	pop    esi
c0001c97:	5f                   	pop    edi
c0001c98:	c3                   	ret    

c0001c99 <st_word>:
c0001c99:	66 89 10             	mov    WORD PTR [eax],dx
c0001c9c:	c3                   	ret    

c0001c9d <st_dword>:
c0001c9d:	89 10                	mov    DWORD PTR [eax],edx
c0001c9f:	c3                   	ret    

c0001ca0 <st_qword>:
c0001ca0:	89 10                	mov    DWORD PTR [eax],edx
c0001ca2:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001ca5:	c3                   	ret    

c0001ca6 <mem_cpy>:
c0001ca6:	85 c9                	test   ecx,ecx
c0001ca8:	74 10                	je     c0001cba <mem_cpy+0x14>
c0001caa:	57                   	push   edi
c0001cab:	01 c1                	add    ecx,eax
c0001cad:	56                   	push   esi
c0001cae:	89 c7                	mov    edi,eax
c0001cb0:	89 d6                	mov    esi,edx
c0001cb2:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001cb3:	39 f9                	cmp    ecx,edi
c0001cb5:	75 fb                	jne    c0001cb2 <mem_cpy+0xc>
c0001cb7:	5e                   	pop    esi
c0001cb8:	5f                   	pop    edi
c0001cb9:	c3                   	ret    
c0001cba:	c3                   	ret    

c0001cbb <mem_set>:
c0001cbb:	01 c1                	add    ecx,eax
c0001cbd:	40                   	inc    eax
c0001cbe:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001cc1:	39 c8                	cmp    eax,ecx
c0001cc3:	75 f8                	jne    c0001cbd <mem_set+0x2>
c0001cc5:	c3                   	ret    

c0001cc6 <mem_cmp>:
c0001cc6:	57                   	push   edi
c0001cc7:	56                   	push   esi
c0001cc8:	89 c6                	mov    esi,eax
c0001cca:	53                   	push   ebx
c0001ccb:	46                   	inc    esi
c0001ccc:	42                   	inc    edx
c0001ccd:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001cd1:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001cd5:	29 fb                	sub    ebx,edi
c0001cd7:	89 cf                	mov    edi,ecx
c0001cd9:	29 f7                	sub    edi,esi
c0001cdb:	01 c7                	add    edi,eax
c0001cdd:	74 04                	je     c0001ce3 <mem_cmp+0x1d>
c0001cdf:	85 db                	test   ebx,ebx
c0001ce1:	74 e8                	je     c0001ccb <mem_cmp+0x5>
c0001ce3:	89 d8                	mov    eax,ebx
c0001ce5:	5b                   	pop    ebx
c0001ce6:	5e                   	pop    esi
c0001ce7:	5f                   	pop    edi
c0001ce8:	c3                   	ret    

c0001ce9 <chk_chr>:
c0001ce9:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0001cec:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001cef:	74 07                	je     c0001cf8 <chk_chr+0xf>
c0001cf1:	39 d1                	cmp    ecx,edx
c0001cf3:	74 03                	je     c0001cf8 <chk_chr+0xf>
c0001cf5:	40                   	inc    eax
c0001cf6:	eb f1                	jmp    c0001ce9 <chk_chr>
c0001cf8:	89 c8                	mov    eax,ecx
c0001cfa:	c3                   	ret    

c0001cfb <dbc_1st>:
c0001cfb:	31 c0                	xor    eax,eax
c0001cfd:	c3                   	ret    

c0001cfe <dbc_2nd>:
c0001cfe:	31 c0                	xor    eax,eax
c0001d00:	c3                   	ret    

c0001d01 <tchar2uni>:
c0001d01:	57                   	push   edi
c0001d02:	89 c7                	mov    edi,eax
c0001d04:	56                   	push   esi
c0001d05:	53                   	push   ebx
c0001d06:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001d08:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001d0a:	8d 73 01             	lea    esi,[ebx+0x1]
c0001d0d:	84 c9                	test   cl,cl
c0001d0f:	78 0a                	js     c0001d1b <tchar2uni+0x1a>
c0001d11:	0f b6 d1             	movzx  edx,cl
c0001d14:	89 f3                	mov    ebx,esi
c0001d16:	e9 9f 00 00 00       	jmp    c0001dba <tchar2uni+0xb9>
c0001d1b:	88 ca                	mov    dl,cl
c0001d1d:	83 e2 e0             	and    edx,0xffffffe0
c0001d20:	80 fa c0             	cmp    dl,0xc0
c0001d23:	75 0c                	jne    c0001d31 <tchar2uni+0x30>
c0001d25:	89 ca                	mov    edx,ecx
c0001d27:	b9 01 00 00 00       	mov    ecx,0x1
c0001d2c:	83 e2 1f             	and    edx,0x1f
c0001d2f:	eb 2e                	jmp    c0001d5f <tchar2uni+0x5e>
c0001d31:	88 ca                	mov    dl,cl
c0001d33:	83 e2 f0             	and    edx,0xfffffff0
c0001d36:	80 fa e0             	cmp    dl,0xe0
c0001d39:	75 0c                	jne    c0001d47 <tchar2uni+0x46>
c0001d3b:	89 ca                	mov    edx,ecx
c0001d3d:	b9 02 00 00 00       	mov    ecx,0x2
c0001d42:	83 e2 0f             	and    edx,0xf
c0001d45:	eb 18                	jmp    c0001d5f <tchar2uni+0x5e>
c0001d47:	88 ca                	mov    dl,cl
c0001d49:	83 e2 f8             	and    edx,0xfffffff8
c0001d4c:	88 d0                	mov    al,dl
c0001d4e:	83 ca ff             	or     edx,0xffffffff
c0001d51:	3c f0                	cmp    al,0xf0
c0001d53:	75 6c                	jne    c0001dc1 <tchar2uni+0xc0>
c0001d55:	89 ca                	mov    edx,ecx
c0001d57:	b9 03 00 00 00       	mov    ecx,0x3
c0001d5c:	83 e2 07             	and    edx,0x7
c0001d5f:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001d63:	46                   	inc    esi
c0001d64:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001d67:	88 c8                	mov    al,cl
c0001d69:	83 e0 c0             	and    eax,0xffffffc0
c0001d6c:	3c 80                	cmp    al,0x80
c0001d6e:	75 4e                	jne    c0001dbe <tchar2uni+0xbd>
c0001d70:	c1 e2 06             	shl    edx,0x6
c0001d73:	83 e1 3f             	and    ecx,0x3f
c0001d76:	09 ca                	or     edx,ecx
c0001d78:	39 de                	cmp    esi,ebx
c0001d7a:	75 e7                	jne    c0001d63 <tchar2uni+0x62>
c0001d7c:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001d7f:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001d85:	77 37                	ja     c0001dbe <tchar2uni+0xbd>
c0001d87:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001d8d:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001d93:	76 29                	jbe    c0001dbe <tchar2uni+0xbd>
c0001d95:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001d9b:	76 1d                	jbe    c0001dba <tchar2uni+0xb9>
c0001d9d:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001da3:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001da9:	c1 e1 06             	shl    ecx,0x6
c0001dac:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001db2:	09 ca                	or     edx,ecx
c0001db4:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001dba:	89 1f                	mov    DWORD PTR [edi],ebx
c0001dbc:	eb 03                	jmp    c0001dc1 <tchar2uni+0xc0>
c0001dbe:	83 ca ff             	or     edx,0xffffffff
c0001dc1:	5b                   	pop    ebx
c0001dc2:	89 d0                	mov    eax,edx
c0001dc4:	5e                   	pop    esi
c0001dc5:	5f                   	pop    edi
c0001dc6:	c3                   	ret    

c0001dc7 <put_utf>:
c0001dc7:	53                   	push   ebx
c0001dc8:	83 f8 7f             	cmp    eax,0x7f
c0001dcb:	89 c3                	mov    ebx,eax
c0001dcd:	b0 00                	mov    al,0x0
c0001dcf:	77 11                	ja     c0001de2 <put_utf+0x1b>
c0001dd1:	85 c9                	test   ecx,ecx
c0001dd3:	0f 84 e5 00 00 00    	je     c0001ebe <put_utf+0xf7>
c0001dd9:	88 1a                	mov    BYTE PTR [edx],bl
c0001ddb:	b0 01                	mov    al,0x1
c0001ddd:	e9 dc 00 00 00       	jmp    c0001ebe <put_utf+0xf7>
c0001de2:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001de8:	77 23                	ja     c0001e0d <put_utf+0x46>
c0001dea:	83 f9 01             	cmp    ecx,0x1
c0001ded:	0f 86 cb 00 00 00    	jbe    c0001ebe <put_utf+0xf7>
c0001df3:	89 d8                	mov    eax,ebx
c0001df5:	83 e3 3f             	and    ebx,0x3f
c0001df8:	c1 e8 06             	shr    eax,0x6
c0001dfb:	83 cb 80             	or     ebx,0xffffff80
c0001dfe:	83 c8 c0             	or     eax,0xffffffc0
c0001e01:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001e04:	88 02                	mov    BYTE PTR [edx],al
c0001e06:	b0 02                	mov    al,0x2
c0001e08:	e9 b1 00 00 00       	jmp    c0001ebe <put_utf+0xf7>
c0001e0d:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001e13:	77 40                	ja     c0001e55 <put_utf+0x8e>
c0001e15:	83 f9 02             	cmp    ecx,0x2
c0001e18:	0f 86 a0 00 00 00    	jbe    c0001ebe <put_utf+0xf7>
c0001e1e:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001e24:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001e2a:	0f 86 8e 00 00 00    	jbe    c0001ebe <put_utf+0xf7>
c0001e30:	89 d8                	mov    eax,ebx
c0001e32:	c1 e8 0c             	shr    eax,0xc
c0001e35:	83 c8 e0             	or     eax,0xffffffe0
c0001e38:	88 02                	mov    BYTE PTR [edx],al
c0001e3a:	89 d8                	mov    eax,ebx
c0001e3c:	83 e3 3f             	and    ebx,0x3f
c0001e3f:	c1 e8 06             	shr    eax,0x6
c0001e42:	83 cb 80             	or     ebx,0xffffff80
c0001e45:	83 e0 3f             	and    eax,0x3f
c0001e48:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001e4b:	83 c8 80             	or     eax,0xffffff80
c0001e4e:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001e51:	b0 03                	mov    al,0x3
c0001e53:	eb 69                	jmp    c0001ebe <put_utf+0xf7>
c0001e55:	83 f9 03             	cmp    ecx,0x3
c0001e58:	76 64                	jbe    c0001ebe <put_utf+0xf7>
c0001e5a:	89 d9                	mov    ecx,ebx
c0001e5c:	0f b7 c3             	movzx  eax,bx
c0001e5f:	66 31 c9             	xor    cx,cx
c0001e62:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001e68:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001e6e:	c1 e9 06             	shr    ecx,0x6
c0001e71:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001e77:	77 43                	ja     c0001ebc <put_utf+0xf5>
c0001e79:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001e7f:	77 3b                	ja     c0001ebc <put_utf+0xf5>
c0001e81:	09 cb                	or     ebx,ecx
c0001e83:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001e89:	89 d8                	mov    eax,ebx
c0001e8b:	c1 e8 12             	shr    eax,0x12
c0001e8e:	83 c8 f0             	or     eax,0xfffffff0
c0001e91:	88 02                	mov    BYTE PTR [edx],al
c0001e93:	89 d8                	mov    eax,ebx
c0001e95:	c1 e8 0c             	shr    eax,0xc
c0001e98:	83 e0 3f             	and    eax,0x3f
c0001e9b:	83 c8 80             	or     eax,0xffffff80
c0001e9e:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001ea1:	89 d8                	mov    eax,ebx
c0001ea3:	83 e3 3f             	and    ebx,0x3f
c0001ea6:	c1 e8 06             	shr    eax,0x6
c0001ea9:	83 cb 80             	or     ebx,0xffffff80
c0001eac:	83 e0 3f             	and    eax,0x3f
c0001eaf:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0001eb2:	83 c8 80             	or     eax,0xffffff80
c0001eb5:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0001eb8:	b0 04                	mov    al,0x4
c0001eba:	eb 02                	jmp    c0001ebe <put_utf+0xf7>
c0001ebc:	31 c0                	xor    eax,eax
c0001ebe:	5b                   	pop    ebx
c0001ebf:	c3                   	ret    

c0001ec0 <clst2sect>:
c0001ec0:	89 c1                	mov    ecx,eax
c0001ec2:	83 ea 02             	sub    edx,0x2
c0001ec5:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0001ec8:	83 e8 02             	sub    eax,0x2
c0001ecb:	39 d0                	cmp    eax,edx
c0001ecd:	76 0d                	jbe    c0001edc <clst2sect+0x1c>
c0001ecf:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0001ed3:	f7 e2                	mul    edx
c0001ed5:	03 41 3c             	add    eax,DWORD PTR [ecx+0x3c]
c0001ed8:	13 51 40             	adc    edx,DWORD PTR [ecx+0x40]
c0001edb:	c3                   	ret    
c0001edc:	31 c0                	xor    eax,eax
c0001ede:	31 d2                	xor    edx,edx
c0001ee0:	c3                   	ret    

c0001ee1 <clmt_clust>:
c0001ee1:	57                   	push   edi
c0001ee2:	89 cf                	mov    edi,ecx
c0001ee4:	56                   	push   esi
c0001ee5:	89 d6                	mov    esi,edx
c0001ee7:	53                   	push   ebx
c0001ee8:	0f ac fe 09          	shrd   esi,edi,0x9
c0001eec:	8b 48 4c             	mov    ecx,DWORD PTR [eax+0x4c]
c0001eef:	89 f2                	mov    edx,esi
c0001ef1:	8b 00                	mov    eax,DWORD PTR [eax]
c0001ef3:	c1 ef 09             	shr    edi,0x9
c0001ef6:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0001efa:	8d 59 04             	lea    ebx,[ecx+0x4]
c0001efd:	89 f9                	mov    ecx,edi
c0001eff:	31 ff                	xor    edi,edi
c0001f01:	57                   	push   edi
c0001f02:	56                   	push   esi
c0001f03:	51                   	push   ecx
c0001f04:	52                   	push   edx
c0001f05:	e8 0a 48 02 00       	call   c0026714 <__udivdi3>
c0001f0a:	83 c4 10             	add    esp,0x10
c0001f0d:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001f0f:	85 d2                	test   edx,edx
c0001f11:	74 10                	je     c0001f23 <clmt_clust+0x42>
c0001f13:	39 d0                	cmp    eax,edx
c0001f15:	72 07                	jb     c0001f1e <clmt_clust+0x3d>
c0001f17:	29 d0                	sub    eax,edx
c0001f19:	83 c3 08             	add    ebx,0x8
c0001f1c:	eb ef                	jmp    c0001f0d <clmt_clust+0x2c>
c0001f1e:	03 43 04             	add    eax,DWORD PTR [ebx+0x4]
c0001f21:	89 c2                	mov    edx,eax
c0001f23:	5b                   	pop    ebx
c0001f24:	89 d0                	mov    eax,edx
c0001f26:	5e                   	pop    esi
c0001f27:	5f                   	pop    edi
c0001f28:	c3                   	ret    

c0001f29 <pick_lfn>:
c0001f29:	55                   	push   ebp
c0001f2a:	57                   	push   edi
c0001f2b:	56                   	push   esi
c0001f2c:	89 d6                	mov    esi,edx
c0001f2e:	53                   	push   ebx
c0001f2f:	89 c3                	mov    ebx,eax
c0001f31:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001f34:	e8 ee fc ff ff       	call   c0001c27 <ld_word>
c0001f39:	66 85 c0             	test   ax,ax
c0001f3c:	74 04                	je     c0001f42 <pick_lfn+0x19>
c0001f3e:	31 c0                	xor    eax,eax
c0001f40:	eb 5c                	jmp    c0001f9e <pick_lfn+0x75>
c0001f42:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0001f45:	bd 01 00 00 00       	mov    ebp,0x1
c0001f4a:	83 e1 bf             	and    ecx,0xffffffbf
c0001f4d:	31 ff                	xor    edi,edi
c0001f4f:	49                   	dec    ecx
c0001f50:	6b c9 0d             	imul   ecx,ecx,0xd
c0001f53:	0f b6 87 60 92 02 c0 	movzx  eax,BYTE PTR [edi-0x3ffd6da0]
c0001f5a:	01 f0                	add    eax,esi
c0001f5c:	e8 c6 fc ff ff       	call   c0001c27 <ld_word>
c0001f61:	66 85 ed             	test   bp,bp
c0001f64:	74 11                	je     c0001f77 <pick_lfn+0x4e>
c0001f66:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001f6c:	77 d0                	ja     c0001f3e <pick_lfn+0x15>
c0001f6e:	66 89 04 4b          	mov    WORD PTR [ebx+ecx*2],ax
c0001f72:	89 c5                	mov    ebp,eax
c0001f74:	41                   	inc    ecx
c0001f75:	eb 04                	jmp    c0001f7b <pick_lfn+0x52>
c0001f77:	66 40                	inc    ax
c0001f79:	75 c3                	jne    c0001f3e <pick_lfn+0x15>
c0001f7b:	47                   	inc    edi
c0001f7c:	83 ff 0d             	cmp    edi,0xd
c0001f7f:	75 d2                	jne    c0001f53 <pick_lfn+0x2a>
c0001f81:	f6 06 40             	test   BYTE PTR [esi],0x40
c0001f84:	74 13                	je     c0001f99 <pick_lfn+0x70>
c0001f86:	66 85 ed             	test   bp,bp
c0001f89:	74 0e                	je     c0001f99 <pick_lfn+0x70>
c0001f8b:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001f91:	77 ab                	ja     c0001f3e <pick_lfn+0x15>
c0001f93:	66 c7 04 4b 00 00    	mov    WORD PTR [ebx+ecx*2],0x0
c0001f99:	b8 01 00 00 00       	mov    eax,0x1
c0001f9e:	5b                   	pop    ebx
c0001f9f:	5e                   	pop    esi
c0001fa0:	5f                   	pop    edi
c0001fa1:	5d                   	pop    ebp
c0001fa2:	c3                   	ret    

c0001fa3 <put_lfn>:
c0001fa3:	55                   	push   ebp
c0001fa4:	31 ed                	xor    ebp,ebp
c0001fa6:	57                   	push   edi
c0001fa7:	89 d7                	mov    edi,edx
c0001fa9:	56                   	push   esi
c0001faa:	31 f6                	xor    esi,esi
c0001fac:	53                   	push   ebx
c0001fad:	83 ec 08             	sub    esp,0x8
c0001fb0:	89 04 24             	mov    DWORD PTR [esp],eax
c0001fb3:	88 4c 24 07          	mov    BYTE PTR [esp+0x7],cl
c0001fb7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0001fbb:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c0001fc1:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0001fc4:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001fc7:	31 d2                	xor    edx,edx
c0001fc9:	e8 cb fc ff ff       	call   c0001c99 <st_word>
c0001fce:	0f b6 d9             	movzx  ebx,cl
c0001fd1:	4b                   	dec    ebx
c0001fd2:	6b db 0d             	imul   ebx,ebx,0xd
c0001fd5:	66 83 fe ff          	cmp    si,0xffff
c0001fd9:	74 08                	je     c0001fe3 <put_lfn+0x40>
c0001fdb:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001fde:	66 8b 34 58          	mov    si,WORD PTR [eax+ebx*2]
c0001fe2:	43                   	inc    ebx
c0001fe3:	0f b6 85 60 92 02 c0 	movzx  eax,BYTE PTR [ebp-0x3ffd6da0]
c0001fea:	0f b7 d6             	movzx  edx,si
c0001fed:	01 f8                	add    eax,edi
c0001fef:	e8 a5 fc ff ff       	call   c0001c99 <st_word>
c0001ff4:	66 85 f6             	test   si,si
c0001ff7:	75 03                	jne    c0001ffc <put_lfn+0x59>
c0001ff9:	83 ce ff             	or     esi,0xffffffff
c0001ffc:	45                   	inc    ebp
c0001ffd:	83 fd 0d             	cmp    ebp,0xd
c0002000:	75 d3                	jne    c0001fd5 <put_lfn+0x32>
c0002002:	66 46                	inc    si
c0002004:	74 0a                	je     c0002010 <put_lfn+0x6d>
c0002006:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002009:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c000200e:	75 09                	jne    c0002019 <put_lfn+0x76>
c0002010:	88 c8                	mov    al,cl
c0002012:	83 c8 40             	or     eax,0x40
c0002015:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0002019:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c000201d:	88 07                	mov    BYTE PTR [edi],al
c000201f:	83 c4 08             	add    esp,0x8
c0002022:	5b                   	pop    ebx
c0002023:	5e                   	pop    esi
c0002024:	5f                   	pop    edi
c0002025:	5d                   	pop    ebp
c0002026:	c3                   	ret    

c0002027 <gen_numname>:
c0002027:	57                   	push   edi
c0002028:	89 cf                	mov    edi,ecx
c000202a:	56                   	push   esi
c000202b:	b9 0b 00 00 00       	mov    ecx,0xb
c0002030:	53                   	push   ebx
c0002031:	89 c6                	mov    esi,eax
c0002033:	83 ec 10             	sub    esp,0x10
c0002036:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000203a:	e8 67 fc ff ff       	call   c0001ca6 <mem_cpy>
c000203f:	83 fb 05             	cmp    ebx,0x5
c0002042:	76 2d                	jbe    c0002071 <gen_numname+0x4a>
c0002044:	66 8b 07             	mov    ax,WORD PTR [edi]
c0002047:	66 85 c0             	test   ax,ax
c000204a:	74 25                	je     c0002071 <gen_numname+0x4a>
c000204c:	83 c7 02             	add    edi,0x2
c000204f:	ba 10 00 00 00       	mov    edx,0x10
c0002054:	01 db                	add    ebx,ebx
c0002056:	89 c1                	mov    ecx,eax
c0002058:	66 d1 e8             	shr    ax,1
c000205b:	83 e1 01             	and    ecx,0x1
c000205e:	01 cb                	add    ebx,ecx
c0002060:	0f ba e3 10          	bt     ebx,0x10
c0002064:	73 06                	jae    c000206c <gen_numname+0x45>
c0002066:	81 f3 21 10 01 00    	xor    ebx,0x11021
c000206c:	4a                   	dec    edx
c000206d:	75 e5                	jne    c0002054 <gen_numname+0x2d>
c000206f:	eb d3                	jmp    c0002044 <gen_numname+0x1d>
c0002071:	b8 07 00 00 00       	mov    eax,0x7
c0002076:	88 d9                	mov    cl,bl
c0002078:	83 e1 0f             	and    ecx,0xf
c000207b:	8d 51 30             	lea    edx,[ecx+0x30]
c000207e:	80 fa 39             	cmp    dl,0x39
c0002081:	76 03                	jbe    c0002086 <gen_numname+0x5f>
c0002083:	8d 51 37             	lea    edx,[ecx+0x37]
c0002086:	8d 48 ff             	lea    ecx,[eax-0x1]
c0002089:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c000208d:	89 da                	mov    edx,ebx
c000208f:	c1 ea 04             	shr    edx,0x4
c0002092:	83 fb 0f             	cmp    ebx,0xf
c0002095:	76 06                	jbe    c000209d <gen_numname+0x76>
c0002097:	89 c8                	mov    eax,ecx
c0002099:	89 d3                	mov    ebx,edx
c000209b:	eb d9                	jmp    c0002076 <gen_numname+0x4f>
c000209d:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c00020a2:	31 d2                	xor    edx,edx
c00020a4:	8d 58 fe             	lea    ebx,[eax-0x2]
c00020a7:	8d 04 16             	lea    eax,[esi+edx*1]
c00020aa:	39 ca                	cmp    edx,ecx
c00020ac:	73 18                	jae    c00020c6 <gen_numname+0x9f>
c00020ae:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00020b1:	3c 20                	cmp    al,0x20
c00020b3:	74 11                	je     c00020c6 <gen_numname+0x9f>
c00020b5:	e8 41 fc ff ff       	call   c0001cfb <dbc_1st>
c00020ba:	85 c0                	test   eax,eax
c00020bc:	74 05                	je     c00020c3 <gen_numname+0x9c>
c00020be:	39 d3                	cmp    ebx,edx
c00020c0:	74 04                	je     c00020c6 <gen_numname+0x9f>
c00020c2:	42                   	inc    edx
c00020c3:	42                   	inc    edx
c00020c4:	eb e1                	jmp    c00020a7 <gen_numname+0x80>
c00020c6:	b0 20                	mov    al,0x20
c00020c8:	83 f9 07             	cmp    ecx,0x7
c00020cb:	77 05                	ja     c00020d2 <gen_numname+0xab>
c00020cd:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c00020d1:	41                   	inc    ecx
c00020d2:	42                   	inc    edx
c00020d3:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c00020d7:	83 fa 07             	cmp    edx,0x7
c00020da:	76 ea                	jbe    c00020c6 <gen_numname+0x9f>
c00020dc:	83 c4 10             	add    esp,0x10
c00020df:	5b                   	pop    ebx
c00020e0:	5e                   	pop    esi
c00020e1:	5f                   	pop    edi
c00020e2:	c3                   	ret    

c00020e3 <sum_sfn>:
c00020e3:	31 c9                	xor    ecx,ecx
c00020e5:	31 d2                	xor    edx,edx
c00020e7:	d0 ca                	ror    dl,1
c00020e9:	02 14 08             	add    dl,BYTE PTR [eax+ecx*1]
c00020ec:	41                   	inc    ecx
c00020ed:	83 f9 0b             	cmp    ecx,0xb
c00020f0:	75 f5                	jne    c00020e7 <sum_sfn+0x4>
c00020f2:	88 d0                	mov    al,dl
c00020f4:	c3                   	ret    

c00020f5 <xdir_sum>:
c00020f5:	56                   	push   esi
c00020f6:	31 c9                	xor    ecx,ecx
c00020f8:	53                   	push   ebx
c00020f9:	31 d2                	xor    edx,edx
c00020fb:	0f b6 58 01          	movzx  ebx,BYTE PTR [eax+0x1]
c00020ff:	43                   	inc    ebx
c0002100:	c1 e3 05             	shl    ebx,0x5
c0002103:	83 fa 02             	cmp    edx,0x2
c0002106:	74 0b                	je     c0002113 <xdir_sum+0x1e>
c0002108:	0f b6 34 10          	movzx  esi,BYTE PTR [eax+edx*1]
c000210c:	66 d1 c9             	ror    cx,1
c000210f:	01 f1                	add    ecx,esi
c0002111:	eb 05                	jmp    c0002118 <xdir_sum+0x23>
c0002113:	ba 03 00 00 00       	mov    edx,0x3
c0002118:	42                   	inc    edx
c0002119:	39 d3                	cmp    ebx,edx
c000211b:	77 e6                	ja     c0002103 <xdir_sum+0xe>
c000211d:	89 c8                	mov    eax,ecx
c000211f:	5b                   	pop    ebx
c0002120:	5e                   	pop    esi
c0002121:	c3                   	ret    

c0002122 <xsum32>:
c0002122:	d1 ca                	ror    edx,1
c0002124:	0f b6 c0             	movzx  eax,al
c0002127:	01 d0                	add    eax,edx
c0002129:	c3                   	ret    

c000212a <get_xfileinfo>:
c000212a:	55                   	push   ebp
c000212b:	31 c9                	xor    ecx,ecx
c000212d:	57                   	push   edi
c000212e:	bd 40 00 00 00       	mov    ebp,0x40
c0002133:	56                   	push   esi
c0002134:	31 ff                	xor    edi,edi
c0002136:	53                   	push   ebx
c0002137:	89 c6                	mov    esi,eax
c0002139:	83 ec 0c             	sub    esp,0xc
c000213c:	89 d3                	mov    ebx,edx
c000213e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0002145:	0f b6 46 23          	movzx  eax,BYTE PTR [esi+0x23]
c0002149:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000214c:	76 6d                	jbe    c00021bb <get_xfileinfo+0x91>
c000214e:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0002154:	76 0b                	jbe    c0002161 <get_xfileinfo+0x37>
c0002156:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c000215a:	bf 01 00 00 00       	mov    edi,0x1
c000215f:	eb 63                	jmp    c00021c4 <get_xfileinfo+0x9a>
c0002161:	f7 c5 1f 00 00 00    	test   ebp,0x1f
c0002167:	75 03                	jne    c000216c <get_xfileinfo+0x42>
c0002169:	83 c5 02             	add    ebp,0x2
c000216c:	8d 04 2e             	lea    eax,[esi+ebp*1]
c000216f:	83 c5 02             	add    ebp,0x2
c0002172:	e8 b0 fa ff ff       	call   c0001c27 <ld_word>
c0002177:	ff 04 24             	inc    DWORD PTR [esp]
c000217a:	66 85 c9             	test   cx,cx
c000217d:	75 0d                	jne    c000218c <get_xfileinfo+0x62>
c000217f:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0002185:	66 81 fa ff 07       	cmp    dx,0x7ff
c000218a:	76 2b                	jbe    c00021b7 <get_xfileinfo+0x8d>
c000218c:	c1 e1 10             	shl    ecx,0x10
c000218f:	ba ff 00 00 00       	mov    edx,0xff
c0002194:	0f b7 c0             	movzx  eax,ax
c0002197:	29 fa                	sub    edx,edi
c0002199:	09 c8                	or     eax,ecx
c000219b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000219f:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c00021a3:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00021a7:	e8 1b fc ff ff       	call   c0001dc7 <put_utf>
c00021ac:	84 c0                	test   al,al
c00021ae:	74 a6                	je     c0002156 <get_xfileinfo+0x2c>
c00021b0:	0f b6 c0             	movzx  eax,al
c00021b3:	01 c7                	add    edi,eax
c00021b5:	31 c0                	xor    eax,eax
c00021b7:	89 c1                	mov    ecx,eax
c00021b9:	eb 8a                	jmp    c0002145 <get_xfileinfo+0x1b>
c00021bb:	85 ff                	test   edi,edi
c00021bd:	74 97                	je     c0002156 <get_xfileinfo+0x2c>
c00021bf:	66 85 c9             	test   cx,cx
c00021c2:	75 92                	jne    c0002156 <get_xfileinfo+0x2c>
c00021c4:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c00021c9:	31 c0                	xor    eax,eax
c00021cb:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c00021cf:	31 d2                	xor    edx,edx
c00021d1:	8a 4e 04             	mov    cl,BYTE PTR [esi+0x4]
c00021d4:	88 4b 0c             	mov    BYTE PTR [ebx+0xc],cl
c00021d7:	80 e1 10             	and    cl,0x10
c00021da:	75 08                	jne    c00021e4 <get_xfileinfo+0xba>
c00021dc:	8d 46 38             	lea    eax,[esi+0x38]
c00021df:	e8 68 fa ff ff       	call   c0001c4c <ld_qword>
c00021e4:	89 03                	mov    DWORD PTR [ebx],eax
c00021e6:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00021e9:	8d 46 0c             	lea    eax,[esi+0xc]
c00021ec:	e8 36 fa ff ff       	call   c0001c27 <ld_word>
c00021f1:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c00021f5:	8d 46 0e             	lea    eax,[esi+0xe]
c00021f8:	e8 2a fa ff ff       	call   c0001c27 <ld_word>
c00021fd:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0002201:	83 c4 0c             	add    esp,0xc
c0002204:	5b                   	pop    ebx
c0002205:	5e                   	pop    esi
c0002206:	5f                   	pop    edi
c0002207:	5d                   	pop    ebp
c0002208:	c3                   	ret    

c0002209 <get_ldnumber>:
c0002209:	8b 10                	mov    edx,DWORD PTR [eax]
c000220b:	85 d2                	test   edx,edx
c000220d:	74 14                	je     c0002223 <get_ldnumber+0x1a>
c000220f:	56                   	push   esi
c0002210:	53                   	push   ebx
c0002211:	89 d3                	mov    ebx,edx
c0002213:	43                   	inc    ebx
c0002214:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c0002217:	80 f9 1f             	cmp    cl,0x1f
c000221a:	76 0d                	jbe    c0002229 <get_ldnumber+0x20>
c000221c:	80 f9 3a             	cmp    cl,0x3a
c000221f:	75 f2                	jne    c0002213 <get_ldnumber+0xa>
c0002221:	eb 0a                	jmp    c000222d <get_ldnumber+0x24>
c0002223:	83 c9 ff             	or     ecx,0xffffffff
c0002226:	89 c8                	mov    eax,ecx
c0002228:	c3                   	ret    
c0002229:	31 c9                	xor    ecx,ecx
c000222b:	eb 24                	jmp    c0002251 <get_ldnumber+0x48>
c000222d:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c0002230:	8d 4e d0             	lea    ecx,[esi-0x30]
c0002233:	80 f9 09             	cmp    cl,0x9
c0002236:	77 16                	ja     c000224e <get_ldnumber+0x45>
c0002238:	83 c2 02             	add    edx,0x2
c000223b:	83 c9 ff             	or     ecx,0xffffffff
c000223e:	39 d3                	cmp    ebx,edx
c0002240:	75 0f                	jne    c0002251 <get_ldnumber+0x48>
c0002242:	89 f2                	mov    edx,esi
c0002244:	89 18                	mov    DWORD PTR [eax],ebx
c0002246:	0f be ca             	movsx  ecx,dl
c0002249:	83 e9 30             	sub    ecx,0x30
c000224c:	eb 03                	jmp    c0002251 <get_ldnumber+0x48>
c000224e:	83 c9 ff             	or     ecx,0xffffffff
c0002251:	89 c8                	mov    eax,ecx
c0002253:	5b                   	pop    ebx
c0002254:	5e                   	pop    esi
c0002255:	c3                   	ret    

c0002256 <crc32>:
c0002256:	56                   	push   esi
c0002257:	89 d6                	mov    esi,edx
c0002259:	53                   	push   ebx
c000225a:	b2 01                	mov    dl,0x1
c000225c:	bb 08 00 00 00       	mov    ebx,0x8
c0002261:	89 f1                	mov    ecx,esi
c0002263:	84 d1                	test   cl,dl
c0002265:	0f 95 c1             	setne  cl
c0002268:	0f b6 c9             	movzx  ecx,cl
c000226b:	31 c1                	xor    ecx,eax
c000226d:	89 c8                	mov    eax,ecx
c000226f:	d1 e8                	shr    eax,1
c0002271:	80 e1 01             	and    cl,0x1
c0002274:	74 05                	je     c000227b <crc32+0x25>
c0002276:	35 20 83 b8 ed       	xor    eax,0xedb88320
c000227b:	d1 e2                	shl    edx,1
c000227d:	4b                   	dec    ebx
c000227e:	75 e1                	jne    c0002261 <crc32+0xb>
c0002280:	5b                   	pop    ebx
c0002281:	5e                   	pop    esi
c0002282:	c3                   	ret    

c0002283 <test_gpt_header>:
c0002283:	55                   	push   ebp
c0002284:	b9 10 00 00 00       	mov    ecx,0x10
c0002289:	57                   	push   edi
c000228a:	ba 60 91 02 c0       	mov    edx,0xc0029160
c000228f:	56                   	push   esi
c0002290:	31 ff                	xor    edi,edi
c0002292:	53                   	push   ebx
c0002293:	89 c3                	mov    ebx,eax
c0002295:	e8 2c fa ff ff       	call   c0001cc6 <mem_cmp>
c000229a:	85 c0                	test   eax,eax
c000229c:	75 55                	jne    c00022f3 <test_gpt_header+0x70>
c000229e:	89 c7                	mov    edi,eax
c00022a0:	bd f0 ff ff ff       	mov    ebp,0xfffffff0
c00022a5:	83 ce ff             	or     esi,0xffffffff
c00022a8:	31 d2                	xor    edx,edx
c00022aa:	83 fd 03             	cmp    ebp,0x3
c00022ad:	76 05                	jbe    c00022b4 <test_gpt_header+0x31>
c00022af:	0f b6 54 2b 10       	movzx  edx,BYTE PTR [ebx+ebp*1+0x10]
c00022b4:	89 f0                	mov    eax,esi
c00022b6:	45                   	inc    ebp
c00022b7:	e8 9a ff ff ff       	call   c0002256 <crc32>
c00022bc:	83 fd 4c             	cmp    ebp,0x4c
c00022bf:	89 c6                	mov    esi,eax
c00022c1:	75 e5                	jne    c00022a8 <test_gpt_header+0x25>
c00022c3:	8d 43 10             	lea    eax,[ebx+0x10]
c00022c6:	f7 d6                	not    esi
c00022c8:	e8 67 f9 ff ff       	call   c0001c34 <ld_dword>
c00022cd:	39 c6                	cmp    esi,eax
c00022cf:	75 22                	jne    c00022f3 <test_gpt_header+0x70>
c00022d1:	8d 43 54             	lea    eax,[ebx+0x54]
c00022d4:	e8 5b f9 ff ff       	call   c0001c34 <ld_dword>
c00022d9:	83 c0 80             	add    eax,0xffffff80
c00022dc:	75 15                	jne    c00022f3 <test_gpt_header+0x70>
c00022de:	8d 43 50             	lea    eax,[ebx+0x50]
c00022e1:	e8 4e f9 ff ff       	call   c0001c34 <ld_dword>
c00022e6:	3d 80 00 00 00       	cmp    eax,0x80
c00022eb:	0f 96 c0             	setbe  al
c00022ee:	0f b6 c0             	movzx  eax,al
c00022f1:	89 c7                	mov    edi,eax
c00022f3:	5b                   	pop    ebx
c00022f4:	89 f8                	mov    eax,edi
c00022f6:	5e                   	pop    esi
c00022f7:	5f                   	pop    edi
c00022f8:	5d                   	pop    ebp
c00022f9:	c3                   	ret    

c00022fa <make_rand>:
c00022fa:	56                   	push   esi
c00022fb:	85 c0                	test   eax,eax
c00022fd:	53                   	push   ebx
c00022fe:	75 05                	jne    c0002305 <make_rand+0xb>
c0002300:	b8 01 00 00 00       	mov    eax,0x1
c0002305:	01 d1                	add    ecx,edx
c0002307:	bb 08 00 00 00       	mov    ebx,0x8
c000230c:	89 c6                	mov    esi,eax
c000230e:	d1 e8                	shr    eax,1
c0002310:	83 e6 01             	and    esi,0x1
c0002313:	85 f6                	test   esi,esi
c0002315:	74 05                	je     c000231c <make_rand+0x22>
c0002317:	35 00 00 00 a3       	xor    eax,0xa3000000
c000231c:	4b                   	dec    ebx
c000231d:	75 ed                	jne    c000230c <make_rand+0x12>
c000231f:	42                   	inc    edx
c0002320:	88 42 ff             	mov    BYTE PTR [edx-0x1],al
c0002323:	39 ca                	cmp    edx,ecx
c0002325:	75 e0                	jne    c0002307 <make_rand+0xd>
c0002327:	5b                   	pop    ebx
c0002328:	5e                   	pop    esi
c0002329:	c3                   	ret    

c000232a <validate>:
c000232a:	56                   	push   esi
c000232b:	53                   	push   ebx
c000232c:	89 d6                	mov    esi,edx
c000232e:	51                   	push   ecx
c000232f:	85 c0                	test   eax,eax
c0002331:	75 09                	jne    c000233c <validate+0x12>
c0002333:	b8 09 00 00 00       	mov    eax,0x9
c0002338:	31 c9                	xor    ecx,ecx
c000233a:	eb 2f                	jmp    c000236b <validate+0x41>
c000233c:	89 c3                	mov    ebx,eax
c000233e:	8b 00                	mov    eax,DWORD PTR [eax]
c0002340:	85 c0                	test   eax,eax
c0002342:	74 ef                	je     c0002333 <validate+0x9>
c0002344:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0002347:	74 ea                	je     c0002333 <validate+0x9>
c0002349:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c000234d:	66 39 53 04          	cmp    WORD PTR [ebx+0x4],dx
c0002351:	75 e0                	jne    c0002333 <validate+0x9>
c0002353:	83 ec 0c             	sub    esp,0xc
c0002356:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000235a:	50                   	push   eax
c000235b:	e8 76 f8 ff ff       	call   c0001bd6 <disk_status>
c0002360:	83 c4 10             	add    esp,0x10
c0002363:	a8 01                	test   al,0x1
c0002365:	75 cc                	jne    c0002333 <validate+0x9>
c0002367:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0002369:	31 c0                	xor    eax,eax
c000236b:	89 0e                	mov    DWORD PTR [esi],ecx
c000236d:	5a                   	pop    edx
c000236e:	5b                   	pop    ebx
c000236f:	5e                   	pop    esi
c0002370:	c3                   	ret    

c0002371 <sync_window>:
c0002371:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c0002375:	0f 84 85 00 00 00    	je     c0002400 <sync_window+0x8f>
c000237b:	55                   	push   ebp
c000237c:	8d 68 54             	lea    ebp,[eax+0x54]
c000237f:	57                   	push   edi
c0002380:	56                   	push   esi
c0002381:	53                   	push   ebx
c0002382:	89 c3                	mov    ebx,eax
c0002384:	83 ec 28             	sub    esp,0x28
c0002387:	6a 01                	push   0x1
c0002389:	ff 70 50             	push   DWORD PTR [eax+0x50]
c000238c:	ff 70 4c             	push   DWORD PTR [eax+0x4c]
c000238f:	55                   	push   ebp
c0002390:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0002394:	50                   	push   eax
c0002395:	e8 58 f8 ff ff       	call   c0001bf2 <disk_write>
c000239a:	83 c4 20             	add    esp,0x20
c000239d:	ba 01 00 00 00       	mov    edx,0x1
c00023a2:	85 c0                	test   eax,eax
c00023a4:	75 50                	jne    c00023f6 <sync_window+0x85>
c00023a6:	31 ff                	xor    edi,edi
c00023a8:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c00023ab:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00023af:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00023b3:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c00023b6:	8b 53 50             	mov    edx,DWORD PTR [ebx+0x50]
c00023b9:	89 c6                	mov    esi,eax
c00023bb:	89 d7                	mov    edi,edx
c00023bd:	2b 73 2c             	sub    esi,DWORD PTR [ebx+0x2c]
c00023c0:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c00023c4:	1b 7b 30             	sbb    edi,DWORD PTR [ebx+0x30]
c00023c7:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c00023cb:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c00023cf:	73 23                	jae    c00023f4 <sync_window+0x83>
c00023d1:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c00023d5:	75 1d                	jne    c00023f4 <sync_window+0x83>
c00023d7:	83 ec 0c             	sub    esp,0xc
c00023da:	6a 01                	push   0x1
c00023dc:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00023e0:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c00023e4:	52                   	push   edx
c00023e5:	50                   	push   eax
c00023e6:	55                   	push   ebp
c00023e7:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00023eb:	50                   	push   eax
c00023ec:	e8 01 f8 ff ff       	call   c0001bf2 <disk_write>
c00023f1:	83 c4 20             	add    esp,0x20
c00023f4:	31 d2                	xor    edx,edx
c00023f6:	83 c4 1c             	add    esp,0x1c
c00023f9:	89 d0                	mov    eax,edx
c00023fb:	5b                   	pop    ebx
c00023fc:	5e                   	pop    esi
c00023fd:	5f                   	pop    edi
c00023fe:	5d                   	pop    ebp
c00023ff:	c3                   	ret    
c0002400:	31 d2                	xor    edx,edx
c0002402:	89 d0                	mov    eax,edx
c0002404:	c3                   	ret    

c0002405 <move_window>:
c0002405:	56                   	push   esi
c0002406:	53                   	push   ebx
c0002407:	89 c3                	mov    ebx,eax
c0002409:	83 ec 14             	sub    esp,0x14
c000240c:	39 48 50             	cmp    DWORD PTR [eax+0x50],ecx
c000240f:	75 07                	jne    c0002418 <move_window+0x13>
c0002411:	31 f6                	xor    esi,esi
c0002413:	39 50 4c             	cmp    DWORD PTR [eax+0x4c],edx
c0002416:	74 59                	je     c0002471 <move_window+0x6c>
c0002418:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000241c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002420:	89 d8                	mov    eax,ebx
c0002422:	e8 4a ff ff ff       	call   c0002371 <sync_window>
c0002427:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000242b:	89 c6                	mov    esi,eax
c000242d:	85 c0                	test   eax,eax
c000242f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002433:	75 3c                	jne    c0002471 <move_window+0x6c>
c0002435:	83 ec 0c             	sub    esp,0xc
c0002438:	8d 43 54             	lea    eax,[ebx+0x54]
c000243b:	6a 01                	push   0x1
c000243d:	51                   	push   ecx
c000243e:	52                   	push   edx
c000243f:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0002443:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0002447:	50                   	push   eax
c0002448:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000244c:	50                   	push   eax
c000244d:	e8 8a f7 ff ff       	call   c0001bdc <disk_read>
c0002452:	83 c4 20             	add    esp,0x20
c0002455:	85 c0                	test   eax,eax
c0002457:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000245b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000245f:	74 0a                	je     c000246b <move_window+0x66>
c0002461:	83 ca ff             	or     edx,0xffffffff
c0002464:	be 01 00 00 00       	mov    esi,0x1
c0002469:	89 d1                	mov    ecx,edx
c000246b:	89 53 4c             	mov    DWORD PTR [ebx+0x4c],edx
c000246e:	89 4b 50             	mov    DWORD PTR [ebx+0x50],ecx
c0002471:	89 f0                	mov    eax,esi
c0002473:	83 c4 14             	add    esp,0x14
c0002476:	5b                   	pop    ebx
c0002477:	5e                   	pop    esi
c0002478:	c3                   	ret    

c0002479 <check_fs>:
c0002479:	53                   	push   ebx
c000247a:	89 c3                	mov    ebx,eax
c000247c:	83 ec 08             	sub    esp,0x8
c000247f:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c0002483:	c7 40 4c ff ff ff ff 	mov    DWORD PTR [eax+0x4c],0xffffffff
c000248a:	c7 40 50 ff ff ff ff 	mov    DWORD PTR [eax+0x50],0xffffffff
c0002491:	e8 6f ff ff ff       	call   c0002405 <move_window>
c0002496:	ba 04 00 00 00       	mov    edx,0x4
c000249b:	85 c0                	test   eax,eax
c000249d:	0f 85 89 00 00 00    	jne    c000252c <check_fs+0xb3>
c00024a3:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00024a9:	e8 79 f7 ff ff       	call   c0001c27 <ld_word>
c00024ae:	ba 03 00 00 00       	mov    edx,0x3
c00024b3:	66 3d 55 aa          	cmp    ax,0xaa55
c00024b7:	75 73                	jne    c000252c <check_fs+0xb3>
c00024b9:	ba 80 92 02 c0       	mov    edx,0xc0029280
c00024be:	8d 43 54             	lea    eax,[ebx+0x54]
c00024c1:	b9 0b 00 00 00       	mov    ecx,0xb
c00024c6:	e8 fb f7 ff ff       	call   c0001cc6 <mem_cmp>
c00024cb:	ba 01 00 00 00       	mov    edx,0x1
c00024d0:	85 c0                	test   eax,eax
c00024d2:	74 58                	je     c000252c <check_fs+0xb3>
c00024d4:	8a 43 54             	mov    al,BYTE PTR [ebx+0x54]
c00024d7:	8d 50 18             	lea    edx,[eax+0x18]
c00024da:	80 fa 01             	cmp    dl,0x1
c00024dd:	76 09                	jbe    c00024e8 <check_fs+0x6f>
c00024df:	ba 02 00 00 00       	mov    edx,0x2
c00024e4:	3c eb                	cmp    al,0xeb
c00024e6:	75 44                	jne    c000252c <check_fs+0xb3>
c00024e8:	ba 74 be 02 c0       	mov    edx,0xc002be74
c00024ed:	8d 83 8a 00 00 00    	lea    eax,[ebx+0x8a]
c00024f3:	b9 03 00 00 00       	mov    ecx,0x3
c00024f8:	e8 c9 f7 ff ff       	call   c0001cc6 <mem_cmp>
c00024fd:	31 d2                	xor    edx,edx
c00024ff:	85 c0                	test   eax,eax
c0002501:	74 29                	je     c000252c <check_fs+0xb3>
c0002503:	ba 8c 92 02 c0       	mov    edx,0xc002928c
c0002508:	8d 83 a6 00 00 00    	lea    eax,[ebx+0xa6]
c000250e:	b9 05 00 00 00       	mov    ecx,0x5
c0002513:	e8 ae f7 ff ff       	call   c0001cc6 <mem_cmp>
c0002518:	31 d2                	xor    edx,edx
c000251a:	85 c0                	test   eax,eax
c000251c:	74 0e                	je     c000252c <check_fs+0xb3>
c000251e:	31 d2                	xor    edx,edx
c0002520:	80 bb 96 00 00 00 28 	cmp    BYTE PTR [ebx+0x96],0x28
c0002527:	0f 95 c2             	setne  dl
c000252a:	01 d2                	add    edx,edx
c000252c:	89 d0                	mov    eax,edx
c000252e:	83 c4 08             	add    esp,0x8
c0002531:	5b                   	pop    ebx
c0002532:	c3                   	ret    

c0002533 <find_volume>:
c0002533:	55                   	push   ebp
c0002534:	31 c9                	xor    ecx,ecx
c0002536:	57                   	push   edi
c0002537:	56                   	push   esi
c0002538:	89 d6                	mov    esi,edx
c000253a:	53                   	push   ebx
c000253b:	31 d2                	xor    edx,edx
c000253d:	83 ec 3c             	sub    esp,0x3c
c0002540:	89 c3                	mov    ebx,eax
c0002542:	e8 32 ff ff ff       	call   c0002479 <check_fs>
c0002547:	83 f8 02             	cmp    eax,0x2
c000254a:	74 0e                	je     c000255a <find_volume+0x27>
c000254c:	0f 87 5d 01 00 00    	ja     c00026af <find_volume+0x17c>
c0002552:	85 f6                	test   esi,esi
c0002554:	0f 84 55 01 00 00    	je     c00026af <find_volume+0x17c>
c000255a:	80 bb 16 02 00 00 ee 	cmp    BYTE PTR [ebx+0x216],0xee
c0002561:	0f 85 dd 00 00 00    	jne    c0002644 <find_volume+0x111>
c0002567:	31 c9                	xor    ecx,ecx
c0002569:	ba 01 00 00 00       	mov    edx,0x1
c000256e:	89 d8                	mov    eax,ebx
c0002570:	e8 90 fe ff ff       	call   c0002405 <move_window>
c0002575:	85 c0                	test   eax,eax
c0002577:	74 0a                	je     c0002583 <find_volume+0x50>
c0002579:	b8 04 00 00 00       	mov    eax,0x4
c000257e:	e9 2c 01 00 00       	jmp    c00026af <find_volume+0x17c>
c0002583:	8d 6b 54             	lea    ebp,[ebx+0x54]
c0002586:	89 e8                	mov    eax,ebp
c0002588:	e8 f6 fc ff ff       	call   c0002283 <test_gpt_header>
c000258d:	85 c0                	test   eax,eax
c000258f:	75 0a                	jne    c000259b <find_volume+0x68>
c0002591:	b8 03 00 00 00       	mov    eax,0x3
c0002596:	e9 14 01 00 00       	jmp    c00026af <find_volume+0x17c>
c000259b:	8d 83 a4 00 00 00    	lea    eax,[ebx+0xa4]
c00025a1:	e8 8e f6 ff ff       	call   c0001c34 <ld_dword>
c00025a6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00025aa:	8d 83 9c 00 00 00    	lea    eax,[ebx+0x9c]
c00025b0:	e8 97 f6 ff ff       	call   c0001c4c <ld_qword>
c00025b5:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00025bd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00025c1:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00025c5:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00025cd:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00025d1:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c00025d5:	74 ba                	je     c0002591 <find_volume+0x5e>
c00025d7:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00025db:	31 c9                	xor    ecx,ecx
c00025dd:	c1 e7 07             	shl    edi,0x7
c00025e0:	89 d8                	mov    eax,ebx
c00025e2:	89 fa                	mov    edx,edi
c00025e4:	c1 ea 09             	shr    edx,0x9
c00025e7:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c00025eb:	13 4c 24 1c          	adc    ecx,DWORD PTR [esp+0x1c]
c00025ef:	e8 11 fe ff ff       	call   c0002405 <move_window>
c00025f4:	85 c0                	test   eax,eax
c00025f6:	75 81                	jne    c0002579 <find_volume+0x46>
c00025f8:	81 e7 80 01 00 00    	and    edi,0x180
c00025fe:	b9 10 00 00 00       	mov    ecx,0x10
c0002603:	8d 44 3d 00          	lea    eax,[ebp+edi*1+0x0]
c0002607:	ba 70 92 02 c0       	mov    edx,0xc0029270
c000260c:	e8 b5 f6 ff ff       	call   c0001cc6 <mem_cmp>
c0002611:	85 c0                	test   eax,eax
c0002613:	75 29                	jne    c000263e <find_volume+0x10b>
c0002615:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0002619:	8d 44 3d 20          	lea    eax,[ebp+edi*1+0x20]
c000261d:	e8 2a f6 ff ff       	call   c0001c4c <ld_qword>
c0002622:	89 d1                	mov    ecx,edx
c0002624:	89 c2                	mov    edx,eax
c0002626:	89 d8                	mov    eax,ebx
c0002628:	e8 4c fe ff ff       	call   c0002479 <check_fs>
c000262d:	85 f6                	test   esi,esi
c000262f:	75 07                	jne    c0002638 <find_volume+0x105>
c0002631:	83 f8 01             	cmp    eax,0x1
c0002634:	77 08                	ja     c000263e <find_volume+0x10b>
c0002636:	eb 77                	jmp    c00026af <find_volume+0x17c>
c0002638:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c000263c:	74 71                	je     c00026af <find_volume+0x17c>
c000263e:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0002642:	eb 89                	jmp    c00025cd <find_volume+0x9a>
c0002644:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0002648:	8d 83 5a 02 00 00    	lea    eax,[ebx+0x25a]
c000264e:	8d bb 1a 02 00 00    	lea    edi,[ebx+0x21a]
c0002654:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002658:	89 cd                	mov    ebp,ecx
c000265a:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000265e:	89 f8                	mov    eax,edi
c0002660:	83 c7 10             	add    edi,0x10
c0002663:	e8 cc f5 ff ff       	call   c0001c34 <ld_dword>
c0002668:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000266c:	89 01                	mov    DWORD PTR [ecx],eax
c000266e:	83 c1 04             	add    ecx,0x4
c0002671:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c0002675:	75 e3                	jne    c000265a <find_volume+0x127>
c0002677:	31 ff                	xor    edi,edi
c0002679:	85 f6                	test   esi,esi
c000267b:	74 03                	je     c0002680 <find_volume+0x14d>
c000267d:	8d 7e ff             	lea    edi,[esi-0x1]
c0002680:	8b 54 bd 00          	mov    edx,DWORD PTR [ebp+edi*4+0x0]
c0002684:	85 d2                	test   edx,edx
c0002686:	74 14                	je     c000269c <find_volume+0x169>
c0002688:	31 c9                	xor    ecx,ecx
c000268a:	89 d8                	mov    eax,ebx
c000268c:	e8 e8 fd ff ff       	call   c0002479 <check_fs>
c0002691:	83 f8 01             	cmp    eax,0x1
c0002694:	76 19                	jbe    c00026af <find_volume+0x17c>
c0002696:	85 f6                	test   esi,esi
c0002698:	74 0f                	je     c00026a9 <find_volume+0x176>
c000269a:	eb 13                	jmp    c00026af <find_volume+0x17c>
c000269c:	85 f6                	test   esi,esi
c000269e:	0f 85 ed fe ff ff    	jne    c0002591 <find_volume+0x5e>
c00026a4:	b8 03 00 00 00       	mov    eax,0x3
c00026a9:	47                   	inc    edi
c00026aa:	83 ff 03             	cmp    edi,0x3
c00026ad:	76 d1                	jbe    c0002680 <find_volume+0x14d>
c00026af:	83 c4 3c             	add    esp,0x3c
c00026b2:	5b                   	pop    ebx
c00026b3:	5e                   	pop    esi
c00026b4:	5f                   	pop    edi
c00026b5:	5d                   	pop    ebp
c00026b6:	c3                   	ret    

c00026b7 <mount_volume>:
c00026b7:	55                   	push   ebp
c00026b8:	57                   	push   edi
c00026b9:	89 cf                	mov    edi,ecx
c00026bb:	56                   	push   esi
c00026bc:	53                   	push   ebx
c00026bd:	bb 0b 00 00 00       	mov    ebx,0xb
c00026c2:	83 ec 3c             	sub    esp,0x3c
c00026c5:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00026cb:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00026cf:	e8 35 fb ff ff       	call   c0002209 <get_ldnumber>
c00026d4:	85 c0                	test   eax,eax
c00026d6:	0f 88 3a 05 00 00    	js     c0002c16 <mount_volume+0x55f>
c00026dc:	8b 2c 85 40 d9 02 c0 	mov    ebp,DWORD PTR [eax*4-0x3ffd26c0]
c00026e3:	89 c6                	mov    esi,eax
c00026e5:	bb 0c 00 00 00       	mov    ebx,0xc
c00026ea:	85 ed                	test   ebp,ebp
c00026ec:	0f 84 24 05 00 00    	je     c0002c16 <mount_volume+0x55f>
c00026f2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00026f6:	83 e7 fe             	and    edi,0xfffffffe
c00026f9:	89 2a                	mov    DWORD PTR [edx],ebp
c00026fb:	80 7d 00 00          	cmp    BYTE PTR [ebp+0x0],0x0
c00026ff:	74 32                	je     c0002733 <mount_volume+0x7c>
c0002701:	83 ec 0c             	sub    esp,0xc
c0002704:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0002708:	50                   	push   eax
c0002709:	e8 c8 f4 ff ff       	call   c0001bd6 <disk_status>
c000270e:	83 c4 10             	add    esp,0x10
c0002711:	a8 01                	test   al,0x1
c0002713:	75 1e                	jne    c0002733 <mount_volume+0x7c>
c0002715:	31 db                	xor    ebx,ebx
c0002717:	89 f9                	mov    ecx,edi
c0002719:	84 c9                	test   cl,cl
c000271b:	0f 84 f5 04 00 00    	je     c0002c16 <mount_volume+0x55f>
c0002721:	a8 04                	test   al,0x4
c0002723:	0f 84 ed 04 00 00    	je     c0002c16 <mount_volume+0x55f>
c0002729:	bb 0a 00 00 00       	mov    ebx,0xa
c000272e:	e9 e3 04 00 00       	jmp    c0002c16 <mount_volume+0x55f>
c0002733:	83 ec 0c             	sub    esp,0xc
c0002736:	89 f0                	mov    eax,esi
c0002738:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c000273c:	88 45 01             	mov    BYTE PTR [ebp+0x1],al
c000273f:	0f b6 f0             	movzx  esi,al
c0002742:	bb 03 00 00 00       	mov    ebx,0x3
c0002747:	56                   	push   esi
c0002748:	e8 8c f4 ff ff       	call   c0001bd9 <disk_initialize>
c000274d:	83 c4 10             	add    esp,0x10
c0002750:	a8 01                	test   al,0x1
c0002752:	0f 85 be 04 00 00    	jne    c0002c16 <mount_volume+0x55f>
c0002758:	89 f9                	mov    ecx,edi
c000275a:	84 c9                	test   cl,cl
c000275c:	74 04                	je     c0002762 <mount_volume+0xab>
c000275e:	a8 04                	test   al,0x4
c0002760:	75 c7                	jne    c0002729 <mount_volume+0x72>
c0002762:	31 d2                	xor    edx,edx
c0002764:	89 e8                	mov    eax,ebp
c0002766:	e8 c8 fd ff ff       	call   c0002533 <find_volume>
c000276b:	83 f8 04             	cmp    eax,0x4
c000276e:	75 0a                	jne    c000277a <mount_volume+0xc3>
c0002770:	bb 01 00 00 00       	mov    ebx,0x1
c0002775:	e9 9c 04 00 00       	jmp    c0002c16 <mount_volume+0x55f>
c000277a:	83 f8 01             	cmp    eax,0x1
c000277d:	76 0a                	jbe    c0002789 <mount_volume+0xd2>
c000277f:	bb 0d 00 00 00       	mov    ebx,0xd
c0002784:	e9 8d 04 00 00       	jmp    c0002c16 <mount_volume+0x55f>
c0002789:	8b 45 4c             	mov    eax,DWORD PTR [ebp+0x4c]
c000278c:	8b 55 50             	mov    edx,DWORD PTR [ebp+0x50]
c000278f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002793:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0002797:	75 17                	jne    c00027b0 <mount_volume+0xf9>
c0002799:	b8 0b 00 00 00       	mov    eax,0xb
c000279e:	80 7c 05 54 00       	cmp    BYTE PTR [ebp+eax*1+0x54],0x0
c00027a3:	75 da                	jne    c000277f <mount_volume+0xc8>
c00027a5:	40                   	inc    eax
c00027a6:	83 f8 40             	cmp    eax,0x40
c00027a9:	75 f3                	jne    c000279e <mount_volume+0xe7>
c00027ab:	e9 5a 02 00 00       	jmp    c0002a0a <mount_volume+0x353>
c00027b0:	8d 45 5f             	lea    eax,[ebp+0x5f]
c00027b3:	e8 6f f4 ff ff       	call   c0001c27 <ld_word>
c00027b8:	66 3d 00 02          	cmp    ax,0x200
c00027bc:	75 c1                	jne    c000277f <mount_volume+0xc8>
c00027be:	8d 45 6a             	lea    eax,[ebp+0x6a]
c00027c1:	e8 61 f4 ff ff       	call   c0001c27 <ld_word>
c00027c6:	0f b7 c0             	movzx  eax,ax
c00027c9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00027cd:	85 c0                	test   eax,eax
c00027cf:	75 0c                	jne    c00027dd <mount_volume+0x126>
c00027d1:	8d 45 78             	lea    eax,[ebp+0x78]
c00027d4:	e8 5b f4 ff ff       	call   c0001c34 <ld_dword>
c00027d9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00027dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00027e1:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c00027e4:	8a 45 64             	mov    al,BYTE PTR [ebp+0x64]
c00027e7:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c00027eb:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c00027ee:	48                   	dec    eax
c00027ef:	3c 01                	cmp    al,0x1
c00027f1:	77 8c                	ja     c000277f <mount_volume+0xc8>
c00027f3:	0f b6 45 61          	movzx  eax,BYTE PTR [ebp+0x61]
c00027f7:	89 c3                	mov    ebx,eax
c00027f9:	66 89 45 0a          	mov    WORD PTR [ebp+0xa],ax
c00027fd:	66 85 c0             	test   ax,ax
c0002800:	0f 84 79 ff ff ff    	je     c000277f <mount_volume+0xc8>
c0002806:	8d 40 ff             	lea    eax,[eax-0x1]
c0002809:	85 d8                	test   eax,ebx
c000280b:	0f 85 6e ff ff ff    	jne    c000277f <mount_volume+0xc8>
c0002811:	8d 45 65             	lea    eax,[ebp+0x65]
c0002814:	e8 0e f4 ff ff       	call   c0001c27 <ld_word>
c0002819:	89 c7                	mov    edi,eax
c000281b:	66 89 45 08          	mov    WORD PTR [ebp+0x8],ax
c000281f:	a8 0f                	test   al,0xf
c0002821:	0f 85 58 ff ff ff    	jne    c000277f <mount_volume+0xc8>
c0002827:	8d 45 67             	lea    eax,[ebp+0x67]
c000282a:	e8 f8 f3 ff ff       	call   c0001c27 <ld_word>
c000282f:	0f b7 f0             	movzx  esi,ax
c0002832:	85 f6                	test   esi,esi
c0002834:	75 0a                	jne    c0002840 <mount_volume+0x189>
c0002836:	8d 45 74             	lea    eax,[ebp+0x74]
c0002839:	e8 f6 f3 ff ff       	call   c0001c34 <ld_dword>
c000283e:	89 c6                	mov    esi,eax
c0002840:	8d 45 62             	lea    eax,[ebp+0x62]
c0002843:	e8 df f3 ff ff       	call   c0001c27 <ld_word>
c0002848:	66 85 c0             	test   ax,ax
c000284b:	0f 84 2e ff ff ff    	je     c000277f <mount_volume+0xc8>
c0002851:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c0002856:	0f b7 c8             	movzx  ecx,ax
c0002859:	0f af 54 24 10       	imul   edx,DWORD PTR [esp+0x10]
c000285e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0002862:	89 fa                	mov    edx,edi
c0002864:	66 c1 ea 04          	shr    dx,0x4
c0002868:	0f b7 d2             	movzx  edx,dx
c000286b:	03 54 24 2c          	add    edx,DWORD PTR [esp+0x2c]
c000286f:	8d 04 0a             	lea    eax,[edx+ecx*1]
c0002872:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002876:	39 c6                	cmp    esi,eax
c0002878:	0f 82 01 ff ff ff    	jb     c000277f <mount_volume+0xc8>
c000287e:	29 c6                	sub    esi,eax
c0002880:	31 d2                	xor    edx,edx
c0002882:	89 f0                	mov    eax,esi
c0002884:	f7 f3                	div    ebx
c0002886:	39 de                	cmp    esi,ebx
c0002888:	0f 82 f1 fe ff ff    	jb     c000277f <mount_volume+0xc8>
c000288e:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c0002893:	0f 87 e6 fe ff ff    	ja     c000277f <mount_volume+0xc8>
c0002899:	3d f5 ff 00 00       	cmp    eax,0xfff5
c000289e:	0f 86 63 03 00 00    	jbe    c0002c07 <mount_volume+0x550>
c00028a4:	bb 03 00 00 00       	mov    ebx,0x3
c00028a9:	8d 70 02             	lea    esi,[eax+0x2]
c00028ac:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00028b0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00028b4:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c00028b7:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c00028ba:	31 d2                	xor    edx,edx
c00028bc:	89 c8                	mov    eax,ecx
c00028be:	89 75 1c             	mov    DWORD PTR [ebp+0x1c],esi
c00028c1:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00028c5:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00028c9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00028cd:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00028d1:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c00028d4:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c00028d7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00028db:	31 d2                	xor    edx,edx
c00028dd:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00028e1:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00028e5:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c00028e8:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c00028eb:	83 fb 03             	cmp    ebx,0x3
c00028ee:	75 2b                	jne    c000291b <mount_volume+0x264>
c00028f0:	8d 45 7e             	lea    eax,[ebp+0x7e]
c00028f3:	e8 2f f3 ff ff       	call   c0001c27 <ld_word>
c00028f8:	66 09 c7             	or     di,ax
c00028fb:	0f 85 7e fe ff ff    	jne    c000277f <mount_volume+0xc8>
c0002901:	8d 85 80 00 00 00    	lea    eax,[ebp+0x80]
c0002907:	c1 e6 02             	shl    esi,0x2
c000290a:	e8 25 f3 ff ff       	call   c0001c34 <ld_dword>
c000290f:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002916:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002919:	eb 30                	jmp    c000294b <mount_volume+0x294>
c000291b:	66 85 ff             	test   di,di
c000291e:	0f 84 5b fe ff ff    	je     c000277f <mount_volume+0xc8>
c0002924:	31 d2                	xor    edx,edx
c0002926:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000292a:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000292e:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c0002932:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002935:	89 55 38             	mov    DWORD PTR [ebp+0x38],edx
c0002938:	83 fb 02             	cmp    ebx,0x2
c000293b:	75 04                	jne    c0002941 <mount_volume+0x28a>
c000293d:	01 f6                	add    esi,esi
c000293f:	eb 0a                	jmp    c000294b <mount_volume+0x294>
c0002941:	8d 04 76             	lea    eax,[esi+esi*2]
c0002944:	83 e6 01             	and    esi,0x1
c0002947:	d1 e8                	shr    eax,1
c0002949:	01 c6                	add    esi,eax
c000294b:	81 c6 ff 01 00 00    	add    esi,0x1ff
c0002951:	c1 ee 09             	shr    esi,0x9
c0002954:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0002958:	0f 87 21 fe ff ff    	ja     c000277f <mount_volume+0xc8>
c000295e:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002965:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c000296c:	c6 45 04 80          	mov    BYTE PTR [ebp+0x4],0x80
c0002970:	83 fb 03             	cmp    ebx,0x3
c0002973:	75 7a                	jne    c00029ef <mount_volume+0x338>
c0002975:	8d 85 84 00 00 00    	lea    eax,[ebp+0x84]
c000297b:	e8 a7 f2 ff ff       	call   c0001c27 <ld_word>
c0002980:	66 48                	dec    ax
c0002982:	75 6b                	jne    c00029ef <mount_volume+0x338>
c0002984:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002988:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000298c:	83 c2 01             	add    edx,0x1
c000298f:	89 e8                	mov    eax,ebp
c0002991:	83 d1 00             	adc    ecx,0x0
c0002994:	e8 6c fa ff ff       	call   c0002405 <move_window>
c0002999:	85 c0                	test   eax,eax
c000299b:	75 52                	jne    c00029ef <mount_volume+0x338>
c000299d:	c6 45 04 00          	mov    BYTE PTR [ebp+0x4],0x0
c00029a1:	8d 85 52 02 00 00    	lea    eax,[ebp+0x252]
c00029a7:	e8 7b f2 ff ff       	call   c0001c27 <ld_word>
c00029ac:	66 3d 55 aa          	cmp    ax,0xaa55
c00029b0:	75 3d                	jne    c00029ef <mount_volume+0x338>
c00029b2:	8d 45 54             	lea    eax,[ebp+0x54]
c00029b5:	e8 7a f2 ff ff       	call   c0001c34 <ld_dword>
c00029ba:	3d 52 52 61 41       	cmp    eax,0x41615252
c00029bf:	75 2e                	jne    c00029ef <mount_volume+0x338>
c00029c1:	8d 85 38 02 00 00    	lea    eax,[ebp+0x238]
c00029c7:	e8 68 f2 ff ff       	call   c0001c34 <ld_dword>
c00029cc:	3d 72 72 41 61       	cmp    eax,0x61417272
c00029d1:	75 1c                	jne    c00029ef <mount_volume+0x338>
c00029d3:	8d 85 3c 02 00 00    	lea    eax,[ebp+0x23c]
c00029d9:	e8 56 f2 ff ff       	call   c0001c34 <ld_dword>
c00029de:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
c00029e1:	8d 85 40 02 00 00    	lea    eax,[ebp+0x240]
c00029e7:	e8 48 f2 ff ff       	call   c0001c34 <ld_dword>
c00029ec:	89 45 14             	mov    DWORD PTR [ebp+0x14],eax
c00029ef:	66 a1 20 d9 02 c0    	mov    ax,ds:0xc002d920
c00029f5:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c00029f8:	40                   	inc    eax
c00029f9:	31 db                	xor    ebx,ebx
c00029fb:	66 a3 20 d9 02 c0    	mov    ds:0xc002d920,ax
c0002a01:	66 89 45 06          	mov    WORD PTR [ebp+0x6],ax
c0002a05:	e9 0c 02 00 00       	jmp    c0002c16 <mount_volume+0x55f>
c0002a0a:	8d 85 bc 00 00 00    	lea    eax,[ebp+0xbc]
c0002a10:	e8 12 f2 ff ff       	call   c0001c27 <ld_word>
c0002a15:	66 3d 00 01          	cmp    ax,0x100
c0002a19:	0f 85 60 fd ff ff    	jne    c000277f <mount_volume+0xc8>
c0002a1f:	80 bd c0 00 00 00 09 	cmp    BYTE PTR [ebp+0xc0],0x9
c0002a26:	0f 85 53 fd ff ff    	jne    c000277f <mount_volume+0xc8>
c0002a2c:	8d 85 9c 00 00 00    	lea    eax,[ebp+0x9c]
c0002a32:	e8 15 f2 ff ff       	call   c0001c4c <ld_qword>
c0002a37:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002a3b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002a3f:	8d 85 a8 00 00 00    	lea    eax,[ebp+0xa8]
c0002a45:	e8 ea f1 ff ff       	call   c0001c34 <ld_dword>
c0002a4a:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c0002a4d:	8a 85 c2 00 00 00    	mov    al,BYTE PTR [ebp+0xc2]
c0002a53:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002a56:	fe c8                	dec    al
c0002a58:	0f 85 21 fd ff ff    	jne    c000277f <mount_volume+0xc8>
c0002a5e:	0f b6 8d c1 00 00 00 	movzx  ecx,BYTE PTR [ebp+0xc1]
c0002a65:	bb 01 00 00 00       	mov    ebx,0x1
c0002a6a:	d3 e3                	shl    ebx,cl
c0002a6c:	66 89 5d 0a          	mov    WORD PTR [ebp+0xa],bx
c0002a70:	66 85 db             	test   bx,bx
c0002a73:	0f 84 06 fd ff ff    	je     c000277f <mount_volume+0xc8>
c0002a79:	8d 85 b0 00 00 00    	lea    eax,[ebp+0xb0]
c0002a7f:	e8 b0 f1 ff ff       	call   c0001c34 <ld_dword>
c0002a84:	89 c6                	mov    esi,eax
c0002a86:	3d fd ff ff 7f       	cmp    eax,0x7ffffffd
c0002a8b:	0f 87 ee fc ff ff    	ja     c000277f <mount_volume+0xc8>
c0002a91:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002a95:	8d 40 02             	lea    eax,[eax+0x2]
c0002a98:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c0002a9b:	89 45 1c             	mov    DWORD PTR [ebp+0x1c],eax
c0002a9e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002aa2:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c0002aa5:	8d 85 ac 00 00 00    	lea    eax,[ebp+0xac]
c0002aab:	e8 84 f1 ff ff       	call   c0001c34 <ld_dword>
c0002ab0:	31 d2                	xor    edx,edx
c0002ab2:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002ab6:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002aba:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002abe:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0002ac2:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c0002ac5:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c0002ac8:	8d 85 a4 00 00 00    	lea    eax,[ebp+0xa4]
c0002ace:	e8 61 f1 ff ff       	call   c0001c34 <ld_dword>
c0002ad3:	31 d2                	xor    edx,edx
c0002ad5:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002ad9:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002add:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002ae1:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c0002ae4:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c0002ae7:	0f b7 c3             	movzx  eax,bx
c0002aea:	31 d2                	xor    edx,edx
c0002aec:	0f af f0             	imul   esi,eax
c0002aef:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0002af3:	89 f0                	mov    eax,esi
c0002af5:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0002af9:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0002afd:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002b01:	13 5c 24 0c          	adc    ebx,DWORD PTR [esp+0xc]
c0002b05:	39 c1                	cmp    ecx,eax
c0002b07:	89 df                	mov    edi,ebx
c0002b09:	19 d7                	sbb    edi,edx
c0002b0b:	0f 82 6e fc ff ff    	jb     c000277f <mount_volume+0xc8>
c0002b11:	8d 85 b4 00 00 00    	lea    eax,[ebp+0xb4]
c0002b17:	31 db                	xor    ebx,ebx
c0002b19:	e8 16 f1 ff ff       	call   c0001c34 <ld_dword>
c0002b1e:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002b25:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002b28:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002b30:	85 db                	test   ebx,ebx
c0002b32:	75 39                	jne    c0002b6d <mount_volume+0x4b6>
c0002b34:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002b38:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0002b3c:	0f 86 3d fc ff ff    	jbe    c000277f <mount_volume+0xc8>
c0002b42:	8b 55 34             	mov    edx,DWORD PTR [ebp+0x34]
c0002b45:	31 ff                	xor    edi,edi
c0002b47:	89 e8                	mov    eax,ebp
c0002b49:	e8 72 f3 ff ff       	call   c0001ec0 <clst2sect>
c0002b4e:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0002b52:	01 c6                	add    esi,eax
c0002b54:	89 e8                	mov    eax,ebp
c0002b56:	11 d7                	adc    edi,edx
c0002b58:	89 f2                	mov    edx,esi
c0002b5a:	89 f9                	mov    ecx,edi
c0002b5c:	e8 a4 f8 ff ff       	call   c0002405 <move_window>
c0002b61:	85 c0                	test   eax,eax
c0002b63:	0f 85 07 fc ff ff    	jne    c0002770 <mount_volume+0xb9>
c0002b69:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0002b6d:	80 7c 1d 54 81       	cmp    BYTE PTR [ebp+ebx*1+0x54],0x81
c0002b72:	74 0b                	je     c0002b7f <mount_volume+0x4c8>
c0002b74:	83 c3 20             	add    ebx,0x20
c0002b77:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002b7d:	eb b1                	jmp    c0002b30 <mount_volume+0x479>
c0002b7f:	8d 75 54             	lea    esi,[ebp+0x54]
c0002b82:	8d 44 1e 14          	lea    eax,[esi+ebx*1+0x14]
c0002b86:	e8 a9 f0 ff ff       	call   c0001c34 <ld_dword>
c0002b8b:	89 c3                	mov    ebx,eax
c0002b8d:	83 f8 01             	cmp    eax,0x1
c0002b90:	0f 86 e9 fb ff ff    	jbe    c000277f <mount_volume+0xc8>
c0002b96:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c0002b99:	0f 86 e0 fb ff ff    	jbe    c000277f <mount_volume+0xc8>
c0002b9f:	8d 53 fe             	lea    edx,[ebx-0x2]
c0002ba2:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002ba6:	0f af c2             	imul   eax,edx
c0002ba9:	31 d2                	xor    edx,edx
c0002bab:	03 45 3c             	add    eax,DWORD PTR [ebp+0x3c]
c0002bae:	13 55 40             	adc    edx,DWORD PTR [ebp+0x40]
c0002bb1:	89 45 44             	mov    DWORD PTR [ebp+0x44],eax
c0002bb4:	89 55 48             	mov    DWORD PTR [ebp+0x48],edx
c0002bb7:	31 c9                	xor    ecx,ecx
c0002bb9:	89 da                	mov    edx,ebx
c0002bbb:	89 e8                	mov    eax,ebp
c0002bbd:	c1 ea 07             	shr    edx,0x7
c0002bc0:	03 55 2c             	add    edx,DWORD PTR [ebp+0x2c]
c0002bc3:	13 4d 30             	adc    ecx,DWORD PTR [ebp+0x30]
c0002bc6:	e8 3a f8 ff ff       	call   c0002405 <move_window>
c0002bcb:	85 c0                	test   eax,eax
c0002bcd:	0f 85 9d fb ff ff    	jne    c0002770 <mount_volume+0xb9>
c0002bd3:	89 d8                	mov    eax,ebx
c0002bd5:	83 e0 7f             	and    eax,0x7f
c0002bd8:	8d 04 86             	lea    eax,[esi+eax*4]
c0002bdb:	e8 54 f0 ff ff       	call   c0001c34 <ld_dword>
c0002be0:	83 f8 ff             	cmp    eax,0xffffffff
c0002be3:	74 0a                	je     c0002bef <mount_volume+0x538>
c0002be5:	43                   	inc    ebx
c0002be6:	39 d8                	cmp    eax,ebx
c0002be8:	74 cd                	je     c0002bb7 <mount_volume+0x500>
c0002bea:	e9 90 fb ff ff       	jmp    c000277f <mount_volume+0xc8>
c0002bef:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002bf6:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c0002bfd:	bb 04 00 00 00       	mov    ebx,0x4
c0002c02:	e9 e8 fd ff ff       	jmp    c00029ef <mount_volume+0x338>
c0002c07:	3d f6 0f 00 00       	cmp    eax,0xff6
c0002c0c:	19 db                	sbb    ebx,ebx
c0002c0e:	83 c3 02             	add    ebx,0x2
c0002c11:	e9 93 fc ff ff       	jmp    c00028a9 <mount_volume+0x1f2>
c0002c16:	83 c4 3c             	add    esp,0x3c
c0002c19:	89 d8                	mov    eax,ebx
c0002c1b:	5b                   	pop    ebx
c0002c1c:	5e                   	pop    esi
c0002c1d:	5f                   	pop    edi
c0002c1e:	5d                   	pop    ebp
c0002c1f:	c3                   	ret    

c0002c20 <find_bitmap>:
c0002c20:	55                   	push   ebp
c0002c21:	57                   	push   edi
c0002c22:	89 c7                	mov    edi,eax
c0002c24:	56                   	push   esi
c0002c25:	8d 72 fe             	lea    esi,[edx-0x2]
c0002c28:	53                   	push   ebx
c0002c29:	83 ec 1c             	sub    esp,0x1c
c0002c2c:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0002c2f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002c33:	83 e8 02             	sub    eax,0x2
c0002c36:	39 f0                	cmp    eax,esi
c0002c38:	77 02                	ja     c0002c3c <find_bitmap+0x1c>
c0002c3a:	31 f6                	xor    esi,esi
c0002c3c:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0002c40:	89 f3                	mov    ebx,esi
c0002c42:	31 ed                	xor    ebp,ebp
c0002c44:	31 c9                	xor    ecx,ecx
c0002c46:	89 da                	mov    edx,ebx
c0002c48:	89 f8                	mov    eax,edi
c0002c4a:	c1 ea 0c             	shr    edx,0xc
c0002c4d:	03 57 44             	add    edx,DWORD PTR [edi+0x44]
c0002c50:	13 4f 48             	adc    ecx,DWORD PTR [edi+0x48]
c0002c53:	e8 ad f7 ff ff       	call   c0002405 <move_window>
c0002c58:	85 c0                	test   eax,eax
c0002c5a:	75 68                	jne    c0002cc4 <find_bitmap+0xa4>
c0002c5c:	89 da                	mov    edx,ebx
c0002c5e:	89 d9                	mov    ecx,ebx
c0002c60:	c1 ea 03             	shr    edx,0x3
c0002c63:	83 e1 07             	and    ecx,0x7
c0002c66:	b8 01 00 00 00       	mov    eax,0x1
c0002c6b:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0002c71:	d3 e0                	shl    eax,cl
c0002c73:	8b 4f 1c             	mov    ecx,DWORD PTR [edi+0x1c]
c0002c76:	83 e9 02             	sub    ecx,0x2
c0002c79:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002c7d:	8a 4c 17 54          	mov    cl,BYTE PTR [edi+edx*1+0x54]
c0002c81:	43                   	inc    ebx
c0002c82:	21 c1                	and    ecx,eax
c0002c84:	d1 e0                	shl    eax,1
c0002c86:	39 5c 24 08          	cmp    DWORD PTR [esp+0x8],ebx
c0002c8a:	77 09                	ja     c0002c95 <find_bitmap+0x75>
c0002c8c:	31 db                	xor    ebx,ebx
c0002c8e:	ba 00 02 00 00       	mov    edx,0x200
c0002c93:	31 c0                	xor    eax,eax
c0002c95:	84 c9                	test   cl,cl
c0002c97:	75 10                	jne    c0002ca9 <find_bitmap+0x89>
c0002c99:	45                   	inc    ebp
c0002c9a:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0002c9e:	75 0f                	jne    c0002caf <find_bitmap+0x8f>
c0002ca0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002ca4:	83 c0 02             	add    eax,0x2
c0002ca7:	eb 22                	jmp    c0002ccb <find_bitmap+0xab>
c0002ca9:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0002cad:	31 ed                	xor    ebp,ebp
c0002caf:	39 de                	cmp    esi,ebx
c0002cb1:	74 16                	je     c0002cc9 <find_bitmap+0xa9>
c0002cb3:	84 c0                	test   al,al
c0002cb5:	75 c6                	jne    c0002c7d <find_bitmap+0x5d>
c0002cb7:	42                   	inc    edx
c0002cb8:	81 fa ff 01 00 00    	cmp    edx,0x1ff
c0002cbe:	77 84                	ja     c0002c44 <find_bitmap+0x24>
c0002cc0:	b0 01                	mov    al,0x1
c0002cc2:	eb b9                	jmp    c0002c7d <find_bitmap+0x5d>
c0002cc4:	83 c8 ff             	or     eax,0xffffffff
c0002cc7:	eb 02                	jmp    c0002ccb <find_bitmap+0xab>
c0002cc9:	31 c0                	xor    eax,eax
c0002ccb:	83 c4 1c             	add    esp,0x1c
c0002cce:	5b                   	pop    ebx
c0002ccf:	5e                   	pop    esi
c0002cd0:	5f                   	pop    edi
c0002cd1:	5d                   	pop    ebp
c0002cd2:	c3                   	ret    

c0002cd3 <change_bitmap>:
c0002cd3:	55                   	push   ebp
c0002cd4:	89 cd                	mov    ebp,ecx
c0002cd6:	57                   	push   edi
c0002cd7:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002cda:	56                   	push   esi
c0002cdb:	89 c7                	mov    edi,eax
c0002cdd:	53                   	push   ebx
c0002cde:	89 c8                	mov    eax,ecx
c0002ce0:	83 ec 1c             	sub    esp,0x1c
c0002ce3:	31 d2                	xor    edx,edx
c0002ce5:	89 ce                	mov    esi,ecx
c0002ce7:	c1 e8 0c             	shr    eax,0xc
c0002cea:	bb 01 00 00 00       	mov    ebx,0x1
c0002cef:	03 47 44             	add    eax,DWORD PTR [edi+0x44]
c0002cf2:	13 57 48             	adc    edx,DWORD PTR [edi+0x48]
c0002cf5:	c1 ee 03             	shr    esi,0x3
c0002cf8:	83 e1 07             	and    ecx,0x7
c0002cfb:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0002d01:	d3 e3                	shl    ebx,cl
c0002d03:	88 5c 24 07          	mov    BYTE PTR [esp+0x7],bl
c0002d07:	89 c1                	mov    ecx,eax
c0002d09:	89 d3                	mov    ebx,edx
c0002d0b:	83 c1 01             	add    ecx,0x1
c0002d0e:	83 d3 00             	adc    ebx,0x0
c0002d11:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002d15:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0002d19:	89 d1                	mov    ecx,edx
c0002d1b:	89 c2                	mov    edx,eax
c0002d1d:	89 f8                	mov    eax,edi
c0002d1f:	e8 e1 f6 ff ff       	call   c0002405 <move_window>
c0002d24:	89 c1                	mov    ecx,eax
c0002d26:	85 c0                	test   eax,eax
c0002d28:	75 48                	jne    c0002d72 <change_bitmap+0x9f>
c0002d2a:	31 d2                	xor    edx,edx
c0002d2c:	8a 44 37 54          	mov    al,BYTE PTR [edi+esi*1+0x54]
c0002d30:	84 44 24 07          	test   BYTE PTR [esp+0x7],al
c0002d34:	0f 95 c2             	setne  dl
c0002d37:	3b 54 24 30          	cmp    edx,DWORD PTR [esp+0x30]
c0002d3b:	74 3c                	je     c0002d79 <change_bitmap+0xa6>
c0002d3d:	32 44 24 07          	xor    al,BYTE PTR [esp+0x7]
c0002d41:	4d                   	dec    ebp
c0002d42:	88 44 37 54          	mov    BYTE PTR [edi+esi*1+0x54],al
c0002d46:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0002d4a:	74 32                	je     c0002d7e <change_bitmap+0xab>
c0002d4c:	d0 64 24 07          	shl    BYTE PTR [esp+0x7],1
c0002d50:	75 d8                	jne    c0002d2a <change_bitmap+0x57>
c0002d52:	8d 46 01             	lea    eax,[esi+0x1]
c0002d55:	c6 44 24 07 01       	mov    BYTE PTR [esp+0x7],0x1
c0002d5a:	89 c3                	mov    ebx,eax
c0002d5c:	31 f6                	xor    esi,esi
c0002d5e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002d62:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002d66:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002d6c:	74 99                	je     c0002d07 <change_bitmap+0x34>
c0002d6e:	89 de                	mov    esi,ebx
c0002d70:	eb b8                	jmp    c0002d2a <change_bitmap+0x57>
c0002d72:	b9 01 00 00 00       	mov    ecx,0x1
c0002d77:	eb 05                	jmp    c0002d7e <change_bitmap+0xab>
c0002d79:	b9 02 00 00 00       	mov    ecx,0x2
c0002d7e:	83 c4 1c             	add    esp,0x1c
c0002d81:	89 c8                	mov    eax,ecx
c0002d83:	5b                   	pop    ebx
c0002d84:	5e                   	pop    esi
c0002d85:	5f                   	pop    edi
c0002d86:	5d                   	pop    ebp
c0002d87:	c3                   	ret    

c0002d88 <put_fat>:
c0002d88:	83 fa 01             	cmp    edx,0x1
c0002d8b:	0f 86 7b 01 00 00    	jbe    c0002f0c <put_fat+0x184>
c0002d91:	55                   	push   ebp
c0002d92:	57                   	push   edi
c0002d93:	89 cf                	mov    edi,ecx
c0002d95:	56                   	push   esi
c0002d96:	b9 02 00 00 00       	mov    ecx,0x2
c0002d9b:	53                   	push   ebx
c0002d9c:	89 c6                	mov    esi,eax
c0002d9e:	83 ec 1c             	sub    esp,0x1c
c0002da1:	89 d3                	mov    ebx,edx
c0002da3:	39 50 1c             	cmp    DWORD PTR [eax+0x1c],edx
c0002da6:	0f 86 68 01 00 00    	jbe    c0002f14 <put_fat+0x18c>
c0002dac:	8a 00                	mov    al,BYTE PTR [eax]
c0002dae:	3c 02                	cmp    al,0x2
c0002db0:	0f 84 c7 00 00 00    	je     c0002e7d <put_fat+0xf5>
c0002db6:	77 09                	ja     c0002dc1 <put_fat+0x39>
c0002db8:	fe c8                	dec    al
c0002dba:	74 17                	je     c0002dd3 <put_fat+0x4b>
c0002dbc:	e9 53 01 00 00       	jmp    c0002f14 <put_fat+0x18c>
c0002dc1:	b9 02 00 00 00       	mov    ecx,0x2
c0002dc6:	3c 04                	cmp    al,0x4
c0002dc8:	0f 86 e1 00 00 00    	jbe    c0002eaf <put_fat+0x127>
c0002dce:	e9 41 01 00 00       	jmp    c0002f14 <put_fat+0x18c>
c0002dd3:	89 d5                	mov    ebp,edx
c0002dd5:	31 c9                	xor    ecx,ecx
c0002dd7:	d1 ed                	shr    ebp,1
c0002dd9:	89 f0                	mov    eax,esi
c0002ddb:	01 d5                	add    ebp,edx
c0002ddd:	89 ea                	mov    edx,ebp
c0002ddf:	c1 ea 09             	shr    edx,0x9
c0002de2:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002de5:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002de8:	e8 18 f6 ff ff       	call   c0002405 <move_window>
c0002ded:	89 c1                	mov    ecx,eax
c0002def:	85 c0                	test   eax,eax
c0002df1:	0f 85 1d 01 00 00    	jne    c0002f14 <put_fat+0x18c>
c0002df7:	8d 46 54             	lea    eax,[esi+0x54]
c0002dfa:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002dfe:	8d 45 01             	lea    eax,[ebp+0x1]
c0002e01:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002e07:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002e0b:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002e0f:	89 f8                	mov    eax,edi
c0002e11:	83 e3 01             	and    ebx,0x1
c0002e14:	74 0d                	je     c0002e23 <put_fat+0x9b>
c0002e16:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0002e19:	89 fa                	mov    edx,edi
c0002e1b:	83 e0 0f             	and    eax,0xf
c0002e1e:	c1 e2 04             	shl    edx,0x4
c0002e21:	09 d0                	or     eax,edx
c0002e23:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c0002e26:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002e2a:	31 c9                	xor    ecx,ecx
c0002e2c:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002e30:	c1 ea 09             	shr    edx,0x9
c0002e33:	89 f0                	mov    eax,esi
c0002e35:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002e38:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002e3b:	e8 c5 f5 ff ff       	call   c0002405 <move_window>
c0002e40:	89 c1                	mov    ecx,eax
c0002e42:	85 c0                	test   eax,eax
c0002e44:	0f 85 ca 00 00 00    	jne    c0002f14 <put_fat+0x18c>
c0002e4a:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0002e4e:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002e54:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002e58:	85 db                	test   ebx,ebx
c0002e5a:	74 07                	je     c0002e63 <put_fat+0xdb>
c0002e5c:	c1 ef 04             	shr    edi,0x4
c0002e5f:	89 fa                	mov    edx,edi
c0002e61:	eb 0e                	jmp    c0002e71 <put_fat+0xe9>
c0002e63:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c0002e66:	c1 ef 08             	shr    edi,0x8
c0002e69:	83 e2 f0             	and    edx,0xfffffff0
c0002e6c:	83 e7 0f             	and    edi,0xf
c0002e6f:	09 fa                	or     edx,edi
c0002e71:	88 55 00             	mov    BYTE PTR [ebp+0x0],dl
c0002e74:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002e78:	e9 97 00 00 00       	jmp    c0002f14 <put_fat+0x18c>
c0002e7d:	31 c9                	xor    ecx,ecx
c0002e7f:	c1 ea 08             	shr    edx,0x8
c0002e82:	89 f0                	mov    eax,esi
c0002e84:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002e87:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002e8a:	e8 76 f5 ff ff       	call   c0002405 <move_window>
c0002e8f:	89 c1                	mov    ecx,eax
c0002e91:	85 c0                	test   eax,eax
c0002e93:	75 7f                	jne    c0002f14 <put_fat+0x18c>
c0002e95:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002e99:	01 db                	add    ebx,ebx
c0002e9b:	0f b7 d7             	movzx  edx,di
c0002e9e:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002ea4:	8d 44 1e 54          	lea    eax,[esi+ebx*1+0x54]
c0002ea8:	e8 ec ed ff ff       	call   c0001c99 <st_word>
c0002ead:	eb 53                	jmp    c0002f02 <put_fat+0x17a>
c0002eaf:	31 c9                	xor    ecx,ecx
c0002eb1:	c1 ea 07             	shr    edx,0x7
c0002eb4:	89 f0                	mov    eax,esi
c0002eb6:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002eb9:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002ebc:	e8 44 f5 ff ff       	call   c0002405 <move_window>
c0002ec1:	89 c1                	mov    ecx,eax
c0002ec3:	85 c0                	test   eax,eax
c0002ec5:	75 4d                	jne    c0002f14 <put_fat+0x18c>
c0002ec7:	c1 e3 02             	shl    ebx,0x2
c0002eca:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0002ed0:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0002ed3:	8d 5c 1e 54          	lea    ebx,[esi+ebx*1+0x54]
c0002ed7:	74 1c                	je     c0002ef5 <put_fat+0x16d>
c0002ed9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002edd:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c0002ee3:	89 d8                	mov    eax,ebx
c0002ee5:	e8 4a ed ff ff       	call   c0001c34 <ld_dword>
c0002eea:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002eee:	25 00 00 00 f0       	and    eax,0xf0000000
c0002ef3:	09 c7                	or     edi,eax
c0002ef5:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002ef9:	89 fa                	mov    edx,edi
c0002efb:	89 d8                	mov    eax,ebx
c0002efd:	e8 9b ed ff ff       	call   c0001c9d <st_dword>
c0002f02:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002f06:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002f0a:	eb 08                	jmp    c0002f14 <put_fat+0x18c>
c0002f0c:	b9 02 00 00 00       	mov    ecx,0x2
c0002f11:	89 c8                	mov    eax,ecx
c0002f13:	c3                   	ret    
c0002f14:	83 c4 1c             	add    esp,0x1c
c0002f17:	89 c8                	mov    eax,ecx
c0002f19:	5b                   	pop    ebx
c0002f1a:	5e                   	pop    esi
c0002f1b:	5f                   	pop    edi
c0002f1c:	5d                   	pop    ebp
c0002f1d:	c3                   	ret    

c0002f1e <fill_last_frag>:
c0002f1e:	57                   	push   edi
c0002f1f:	89 cf                	mov    edi,ecx
c0002f21:	56                   	push   esi
c0002f22:	89 d6                	mov    esi,edx
c0002f24:	53                   	push   ebx
c0002f25:	89 c3                	mov    ebx,eax
c0002f27:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0002f2a:	85 c0                	test   eax,eax
c0002f2c:	74 21                	je     c0002f4f <fill_last_frag+0x31>
c0002f2e:	89 f9                	mov    ecx,edi
c0002f30:	83 f8 01             	cmp    eax,0x1
c0002f33:	76 05                	jbe    c0002f3a <fill_last_frag+0x1c>
c0002f35:	8d 4e 02             	lea    ecx,[esi+0x2]
c0002f38:	29 c1                	sub    ecx,eax
c0002f3a:	8d 56 01             	lea    edx,[esi+0x1]
c0002f3d:	29 c2                	sub    edx,eax
c0002f3f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002f41:	e8 42 fe ff ff       	call   c0002d88 <put_fat>
c0002f46:	85 c0                	test   eax,eax
c0002f48:	75 05                	jne    c0002f4f <fill_last_frag+0x31>
c0002f4a:	ff 4b 18             	dec    DWORD PTR [ebx+0x18]
c0002f4d:	eb d8                	jmp    c0002f27 <fill_last_frag+0x9>
c0002f4f:	5b                   	pop    ebx
c0002f50:	5e                   	pop    esi
c0002f51:	5f                   	pop    edi
c0002f52:	c3                   	ret    

c0002f53 <fill_first_frag>:
c0002f53:	80 78 07 03          	cmp    BYTE PTR [eax+0x7],0x3
c0002f57:	75 2d                	jne    c0002f86 <fill_first_frag+0x33>
c0002f59:	57                   	push   edi
c0002f5a:	56                   	push   esi
c0002f5b:	53                   	push   ebx
c0002f5c:	89 c3                	mov    ebx,eax
c0002f5e:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0002f61:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c0002f64:	01 d7                	add    edi,edx
c0002f66:	39 fa                	cmp    edx,edi
c0002f68:	74 14                	je     c0002f7e <fill_first_frag+0x2b>
c0002f6a:	8d 72 01             	lea    esi,[edx+0x1]
c0002f6d:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002f6f:	89 f1                	mov    ecx,esi
c0002f71:	e8 12 fe ff ff       	call   c0002d88 <put_fat>
c0002f76:	89 f2                	mov    edx,esi
c0002f78:	85 c0                	test   eax,eax
c0002f7a:	74 ea                	je     c0002f66 <fill_first_frag+0x13>
c0002f7c:	eb 0b                	jmp    c0002f89 <fill_first_frag+0x36>
c0002f7e:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0002f82:	31 c0                	xor    eax,eax
c0002f84:	eb 03                	jmp    c0002f89 <fill_first_frag+0x36>
c0002f86:	31 c0                	xor    eax,eax
c0002f88:	c3                   	ret    
c0002f89:	5b                   	pop    ebx
c0002f8a:	5e                   	pop    esi
c0002f8b:	5f                   	pop    edi
c0002f8c:	c3                   	ret    

c0002f8d <get_fat>:
c0002f8d:	83 fa 01             	cmp    edx,0x1
c0002f90:	0f 86 db 01 00 00    	jbe    c0003171 <get_fat+0x1e4>
c0002f96:	55                   	push   ebp
c0002f97:	b9 01 00 00 00       	mov    ecx,0x1
c0002f9c:	57                   	push   edi
c0002f9d:	56                   	push   esi
c0002f9e:	53                   	push   ebx
c0002f9f:	83 ec 1c             	sub    esp,0x1c
c0002fa2:	8b 38                	mov    edi,DWORD PTR [eax]
c0002fa4:	39 57 1c             	cmp    DWORD PTR [edi+0x1c],edx
c0002fa7:	0f 86 cc 01 00 00    	jbe    c0003179 <get_fat+0x1ec>
c0002fad:	89 c3                	mov    ebx,eax
c0002faf:	89 d6                	mov    esi,edx
c0002fb1:	8a 07                	mov    al,BYTE PTR [edi]
c0002fb3:	3c 02                	cmp    al,0x2
c0002fb5:	0f 84 99 00 00 00    	je     c0003054 <get_fat+0xc7>
c0002fbb:	77 09                	ja     c0002fc6 <get_fat+0x39>
c0002fbd:	fe c8                	dec    al
c0002fbf:	74 1a                	je     c0002fdb <get_fat+0x4e>
c0002fc1:	e9 b3 01 00 00       	jmp    c0003179 <get_fat+0x1ec>
c0002fc6:	3c 03                	cmp    al,0x3
c0002fc8:	0f 84 b5 00 00 00    	je     c0003083 <get_fat+0xf6>
c0002fce:	3c 04                	cmp    al,0x4
c0002fd0:	0f 84 e3 00 00 00    	je     c00030b9 <get_fat+0x12c>
c0002fd6:	e9 9e 01 00 00       	jmp    c0003179 <get_fat+0x1ec>
c0002fdb:	89 d3                	mov    ebx,edx
c0002fdd:	31 c9                	xor    ecx,ecx
c0002fdf:	d1 eb                	shr    ebx,1
c0002fe1:	89 f8                	mov    eax,edi
c0002fe3:	01 d3                	add    ebx,edx
c0002fe5:	89 da                	mov    edx,ebx
c0002fe7:	c1 ea 09             	shr    edx,0x9
c0002fea:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002fed:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002ff0:	e8 10 f4 ff ff       	call   c0002405 <move_window>
c0002ff5:	85 c0                	test   eax,eax
c0002ff7:	74 08                	je     c0003001 <get_fat+0x74>
c0002ff9:	83 c9 ff             	or     ecx,0xffffffff
c0002ffc:	e9 78 01 00 00       	jmp    c0003179 <get_fat+0x1ec>
c0003001:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0003004:	31 c9                	xor    ecx,ecx
c0003006:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c000300c:	89 ea                	mov    edx,ebp
c000300e:	8a 5c 1f 54          	mov    bl,BYTE PTR [edi+ebx*1+0x54]
c0003012:	c1 ea 09             	shr    edx,0x9
c0003015:	89 f8                	mov    eax,edi
c0003017:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c000301a:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c000301d:	e8 e3 f3 ff ff       	call   c0002405 <move_window>
c0003022:	85 c0                	test   eax,eax
c0003024:	75 d3                	jne    c0002ff9 <get_fat+0x6c>
c0003026:	0f b6 c3             	movzx  eax,bl
c0003029:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c000302f:	0f b6 5c 2f 54       	movzx  ebx,BYTE PTR [edi+ebp*1+0x54]
c0003034:	c1 e3 08             	shl    ebx,0x8
c0003037:	09 c3                	or     ebx,eax
c0003039:	89 d9                	mov    ecx,ebx
c000303b:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c0003041:	83 e6 01             	and    esi,0x1
c0003044:	0f 84 2f 01 00 00    	je     c0003179 <get_fat+0x1ec>
c000304a:	89 d9                	mov    ecx,ebx
c000304c:	c1 e9 04             	shr    ecx,0x4
c000304f:	e9 25 01 00 00       	jmp    c0003179 <get_fat+0x1ec>
c0003054:	31 c9                	xor    ecx,ecx
c0003056:	c1 ea 08             	shr    edx,0x8
c0003059:	89 f8                	mov    eax,edi
c000305b:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c000305e:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0003061:	e8 9f f3 ff ff       	call   c0002405 <move_window>
c0003066:	85 c0                	test   eax,eax
c0003068:	75 8f                	jne    c0002ff9 <get_fat+0x6c>
c000306a:	01 f6                	add    esi,esi
c000306c:	81 e6 fe 01 00 00    	and    esi,0x1fe
c0003072:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0003076:	e8 ac eb ff ff       	call   c0001c27 <ld_word>
c000307b:	0f b7 c8             	movzx  ecx,ax
c000307e:	e9 f6 00 00 00       	jmp    c0003179 <get_fat+0x1ec>
c0003083:	31 c9                	xor    ecx,ecx
c0003085:	c1 ea 07             	shr    edx,0x7
c0003088:	89 f8                	mov    eax,edi
c000308a:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c000308d:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0003090:	e8 70 f3 ff ff       	call   c0002405 <move_window>
c0003095:	85 c0                	test   eax,eax
c0003097:	0f 85 5c ff ff ff    	jne    c0002ff9 <get_fat+0x6c>
c000309d:	c1 e6 02             	shl    esi,0x2
c00030a0:	81 e6 fc 01 00 00    	and    esi,0x1fc
c00030a6:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c00030aa:	e8 85 eb ff ff       	call   c0001c34 <ld_dword>
c00030af:	25 ff ff ff 0f       	and    eax,0xfffffff
c00030b4:	e9 b4 00 00 00       	jmp    c000316d <get_fat+0x1e0>
c00030b9:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00030bc:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00030bf:	89 d1                	mov    ecx,edx
c00030c1:	09 c1                	or     ecx,eax
c00030c3:	74 06                	je     c00030cb <get_fat+0x13e>
c00030c5:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c00030c9:	75 0f                	jne    c00030da <get_fat+0x14d>
c00030cb:	b9 01 00 00 00       	mov    ecx,0x1
c00030d0:	80 7b 07 00          	cmp    BYTE PTR [ebx+0x7],0x0
c00030d4:	0f 85 9f 00 00 00    	jne    c0003179 <get_fat+0x1ec>
c00030da:	66 8b 4f 0a          	mov    cx,WORD PTR [edi+0xa]
c00030de:	89 f5                	mov    ebp,esi
c00030e0:	66 89 4c 24 0e       	mov    WORD PTR [esp+0xe],cx
c00030e5:	2b 6b 08             	sub    ebp,DWORD PTR [ebx+0x8]
c00030e8:	8a 4b 07             	mov    cl,BYTE PTR [ebx+0x7]
c00030eb:	80 f9 02             	cmp    cl,0x2
c00030ee:	75 35                	jne    c0003125 <get_fat+0x198>
c00030f0:	83 c0 ff             	add    eax,0xffffffff
c00030f3:	0f b7 4c 24 0e       	movzx  ecx,WORD PTR [esp+0xe]
c00030f8:	83 d2 ff             	adc    edx,0xffffffff
c00030fb:	31 db                	xor    ebx,ebx
c00030fd:	0f ac d0 09          	shrd   eax,edx,0x9
c0003101:	53                   	push   ebx
c0003102:	c1 ea 09             	shr    edx,0x9
c0003105:	51                   	push   ecx
c0003106:	52                   	push   edx
c0003107:	50                   	push   eax
c0003108:	e8 07 36 02 00       	call   c0026714 <__udivdi3>
c000310d:	83 c4 10             	add    esp,0x10
c0003110:	b9 01 00 00 00       	mov    ecx,0x1
c0003115:	39 c5                	cmp    ebp,eax
c0003117:	77 60                	ja     c0003179 <get_fat+0x1ec>
c0003119:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c000311e:	74 59                	je     c0003179 <get_fat+0x1ec>
c0003120:	8d 4e 01             	lea    ecx,[esi+0x1]
c0003123:	eb 54                	jmp    c0003179 <get_fat+0x1ec>
c0003125:	80 f9 03             	cmp    cl,0x3
c0003128:	75 05                	jne    c000312f <get_fat+0x1a2>
c000312a:	39 6b 14             	cmp    DWORD PTR [ebx+0x14],ebp
c000312d:	77 f1                	ja     c0003120 <get_fat+0x193>
c000312f:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0003134:	83 7b 18 00          	cmp    DWORD PTR [ebx+0x18],0x0
c0003138:	75 3f                	jne    c0003179 <get_fat+0x1ec>
c000313a:	31 c9                	xor    ecx,ecx
c000313c:	89 f2                	mov    edx,esi
c000313e:	89 f8                	mov    eax,edi
c0003140:	c1 ea 07             	shr    edx,0x7
c0003143:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0003146:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0003149:	e8 b7 f2 ff ff       	call   c0002405 <move_window>
c000314e:	85 c0                	test   eax,eax
c0003150:	0f 85 a3 fe ff ff    	jne    c0002ff9 <get_fat+0x6c>
c0003156:	c1 e6 02             	shl    esi,0x2
c0003159:	81 e6 fc 01 00 00    	and    esi,0x1fc
c000315f:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0003163:	e8 cc ea ff ff       	call   c0001c34 <ld_dword>
c0003168:	25 ff ff ff 7f       	and    eax,0x7fffffff
c000316d:	89 c1                	mov    ecx,eax
c000316f:	eb 08                	jmp    c0003179 <get_fat+0x1ec>
c0003171:	b9 01 00 00 00       	mov    ecx,0x1
c0003176:	89 c8                	mov    eax,ecx
c0003178:	c3                   	ret    
c0003179:	83 c4 1c             	add    esp,0x1c
c000317c:	89 c8                	mov    eax,ecx
c000317e:	5b                   	pop    ebx
c000317f:	5e                   	pop    esi
c0003180:	5f                   	pop    edi
c0003181:	5d                   	pop    ebp
c0003182:	c3                   	ret    

c0003183 <dir_sdi>:
c0003183:	55                   	push   ebp
c0003184:	57                   	push   edi
c0003185:	56                   	push   esi
c0003186:	53                   	push   ebx
c0003187:	89 c3                	mov    ebx,eax
c0003189:	83 ec 1c             	sub    esp,0x1c
c000318c:	8b 38                	mov    edi,DWORD PTR [eax]
c000318e:	31 c0                	xor    eax,eax
c0003190:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003193:	0f 94 c0             	sete   al
c0003196:	48                   	dec    eax
c0003197:	25 00 00 20 f0       	and    eax,0xf0200000
c000319c:	05 00 00 00 10       	add    eax,0x10000000
c00031a1:	39 d0                	cmp    eax,edx
c00031a3:	77 0a                	ja     c00031af <dir_sdi+0x2c>
c00031a5:	b8 02 00 00 00       	mov    eax,0x2
c00031aa:	e9 c4 00 00 00       	jmp    c0003273 <dir_sdi+0xf0>
c00031af:	89 d6                	mov    esi,edx
c00031b1:	f6 c2 1f             	test   dl,0x1f
c00031b4:	75 ef                	jne    c00031a5 <dir_sdi+0x22>
c00031b6:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00031b9:	89 53 28             	mov    DWORD PTR [ebx+0x28],edx
c00031bc:	85 c9                	test   ecx,ecx
c00031be:	75 2d                	jne    c00031ed <dir_sdi+0x6a>
c00031c0:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c00031c3:	77 1b                	ja     c00031e0 <dir_sdi+0x5d>
c00031c5:	89 f2                	mov    edx,esi
c00031c7:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c00031cb:	c1 ea 05             	shr    edx,0x5
c00031ce:	39 c2                	cmp    edx,eax
c00031d0:	73 d3                	jae    c00031a5 <dir_sdi+0x22>
c00031d2:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c00031d5:	8b 57 38             	mov    edx,DWORD PTR [edi+0x38]
c00031d8:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c00031db:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c00031de:	eb 4b                	jmp    c000322b <dir_sdi+0xa8>
c00031e0:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c00031e3:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c00031e7:	85 c0                	test   eax,eax
c00031e9:	74 da                	je     c00031c5 <dir_sdi+0x42>
c00031eb:	89 c1                	mov    ecx,eax
c00031ed:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c00031f1:	c1 e5 09             	shl    ebp,0x9
c00031f4:	89 ca                	mov    edx,ecx
c00031f6:	39 ee                	cmp    esi,ebp
c00031f8:	72 1c                	jb     c0003216 <dir_sdi+0x93>
c00031fa:	89 d8                	mov    eax,ebx
c00031fc:	e8 8c fd ff ff       	call   c0002f8d <get_fat>
c0003201:	89 c1                	mov    ecx,eax
c0003203:	83 f8 ff             	cmp    eax,0xffffffff
c0003206:	74 66                	je     c000326e <dir_sdi+0xeb>
c0003208:	83 f8 01             	cmp    eax,0x1
c000320b:	76 98                	jbe    c00031a5 <dir_sdi+0x22>
c000320d:	39 47 1c             	cmp    DWORD PTR [edi+0x1c],eax
c0003210:	76 93                	jbe    c00031a5 <dir_sdi+0x22>
c0003212:	29 ee                	sub    esi,ebp
c0003214:	eb de                	jmp    c00031f4 <dir_sdi+0x71>
c0003216:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000321a:	89 f8                	mov    eax,edi
c000321c:	e8 9f ec ff ff       	call   c0001ec0 <clst2sect>
c0003221:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003225:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003228:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000322b:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c000322e:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0003231:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0003234:	89 d1                	mov    ecx,edx
c0003236:	09 c1                	or     ecx,eax
c0003238:	0f 84 67 ff ff ff    	je     c00031a5 <dir_sdi+0x22>
c000323e:	89 f1                	mov    ecx,esi
c0003240:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003248:	c1 e9 09             	shr    ecx,0x9
c000324b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000324f:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0003253:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0003257:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000325a:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0003260:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003263:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0003267:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c000326a:	31 c0                	xor    eax,eax
c000326c:	eb 05                	jmp    c0003273 <dir_sdi+0xf0>
c000326e:	b8 01 00 00 00       	mov    eax,0x1
c0003273:	83 c4 1c             	add    esp,0x1c
c0003276:	5b                   	pop    ebx
c0003277:	5e                   	pop    esi
c0003278:	5f                   	pop    edi
c0003279:	5d                   	pop    ebp
c000327a:	c3                   	ret    

c000327b <create_chain>:
c000327b:	55                   	push   ebp
c000327c:	89 c5                	mov    ebp,eax
c000327e:	57                   	push   edi
c000327f:	56                   	push   esi
c0003280:	53                   	push   ebx
c0003281:	83 ec 1c             	sub    esp,0x1c
c0003284:	85 d2                	test   edx,edx
c0003286:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000328a:	8b 30                	mov    esi,DWORD PTR [eax]
c000328c:	75 0e                	jne    c000329c <create_chain+0x21>
c000328e:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c0003291:	85 ff                	test   edi,edi
c0003293:	74 39                	je     c00032ce <create_chain+0x53>
c0003295:	39 7e 1c             	cmp    DWORD PTR [esi+0x1c],edi
c0003298:	77 39                	ja     c00032d3 <create_chain+0x58>
c000329a:	eb 32                	jmp    c00032ce <create_chain+0x53>
c000329c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00032a0:	e8 e8 fc ff ff       	call   c0002f8d <get_fat>
c00032a5:	89 c3                	mov    ebx,eax
c00032a7:	83 f8 01             	cmp    eax,0x1
c00032aa:	77 0a                	ja     c00032b6 <create_chain+0x3b>
c00032ac:	bb 01 00 00 00       	mov    ebx,0x1
c00032b1:	e9 ba 01 00 00       	jmp    c0003470 <create_chain+0x1f5>
c00032b6:	83 f8 ff             	cmp    eax,0xffffffff
c00032b9:	0f 84 62 01 00 00    	je     c0003421 <create_chain+0x1a6>
c00032bf:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00032c2:	0f 87 a8 01 00 00    	ja     c0003470 <create_chain+0x1f5>
c00032c8:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00032cc:	eb 05                	jmp    c00032d3 <create_chain+0x58>
c00032ce:	bf 01 00 00 00       	mov    edi,0x1
c00032d3:	83 7e 18 00          	cmp    DWORD PTR [esi+0x18],0x0
c00032d7:	75 07                	jne    c00032e0 <create_chain+0x65>
c00032d9:	31 db                	xor    ebx,ebx
c00032db:	e9 90 01 00 00       	jmp    c0003470 <create_chain+0x1f5>
c00032e0:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c00032e3:	75 74                	jne    c0003359 <create_chain+0xde>
c00032e5:	b9 01 00 00 00       	mov    ecx,0x1
c00032ea:	89 fa                	mov    edx,edi
c00032ec:	89 f0                	mov    eax,esi
c00032ee:	e8 2d f9 ff ff       	call   c0002c20 <find_bitmap>
c00032f3:	89 c3                	mov    ebx,eax
c00032f5:	8d 40 ff             	lea    eax,[eax-0x1]
c00032f8:	83 f8 fd             	cmp    eax,0xfffffffd
c00032fb:	0f 87 6f 01 00 00    	ja     c0003470 <create_chain+0x1f5>
c0003301:	83 ec 0c             	sub    esp,0xc
c0003304:	b9 01 00 00 00       	mov    ecx,0x1
c0003309:	6a 01                	push   0x1
c000330b:	89 da                	mov    edx,ebx
c000330d:	89 f0                	mov    eax,esi
c000330f:	e8 bf f9 ff ff       	call   c0002cd3 <change_bitmap>
c0003314:	83 c4 10             	add    esp,0x10
c0003317:	83 f8 02             	cmp    eax,0x2
c000331a:	74 90                	je     c00032ac <create_chain+0x31>
c000331c:	83 f8 01             	cmp    eax,0x1
c000331f:	0f 84 fc 00 00 00    	je     c0003421 <create_chain+0x1a6>
c0003325:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000332a:	75 09                	jne    c0003335 <create_chain+0xba>
c000332c:	c6 45 07 02          	mov    BYTE PTR [ebp+0x7],0x2
c0003330:	e9 0c 01 00 00       	jmp    c0003441 <create_chain+0x1c6>
c0003335:	80 7d 07 02          	cmp    BYTE PTR [ebp+0x7],0x2
c0003339:	0f 85 e7 00 00 00    	jne    c0003426 <create_chain+0x1ab>
c000333f:	8d 57 01             	lea    edx,[edi+0x1]
c0003342:	39 da                	cmp    edx,ebx
c0003344:	0f 84 f7 00 00 00    	je     c0003441 <create_chain+0x1c6>
c000334a:	2b 7d 08             	sub    edi,DWORD PTR [ebp+0x8]
c000334d:	c6 45 07 03          	mov    BYTE PTR [ebp+0x7],0x3
c0003351:	89 7d 14             	mov    DWORD PTR [ebp+0x14],edi
c0003354:	e9 cd 00 00 00       	jmp    c0003426 <create_chain+0x1ab>
c0003359:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c000335d:	75 41                	jne    c00033a0 <create_chain+0x125>
c000335f:	8d 5f 01             	lea    ebx,[edi+0x1]
c0003362:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c0003365:	77 05                	ja     c000336c <create_chain+0xf1>
c0003367:	bb 02 00 00 00       	mov    ebx,0x2
c000336c:	89 da                	mov    edx,ebx
c000336e:	89 e8                	mov    eax,ebp
c0003370:	e8 18 fc ff ff       	call   c0002f8d <get_fat>
c0003375:	83 f8 01             	cmp    eax,0x1
c0003378:	0f 84 2e ff ff ff    	je     c00032ac <create_chain+0x31>
c000337e:	83 f8 ff             	cmp    eax,0xffffffff
c0003381:	0f 84 9a 00 00 00    	je     c0003421 <create_chain+0x1a6>
c0003387:	85 c0                	test   eax,eax
c0003389:	74 11                	je     c000339c <create_chain+0x121>
c000338b:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000338e:	83 f8 01             	cmp    eax,0x1
c0003391:	76 0d                	jbe    c00033a0 <create_chain+0x125>
c0003393:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c0003396:	76 08                	jbe    c00033a0 <create_chain+0x125>
c0003398:	89 c7                	mov    edi,eax
c000339a:	eb 04                	jmp    c00033a0 <create_chain+0x125>
c000339c:	85 db                	test   ebx,ebx
c000339e:	75 38                	jne    c00033d8 <create_chain+0x15d>
c00033a0:	89 fb                	mov    ebx,edi
c00033a2:	43                   	inc    ebx
c00033a3:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c00033a6:	77 0e                	ja     c00033b6 <create_chain+0x13b>
c00033a8:	83 ff 01             	cmp    edi,0x1
c00033ab:	0f 86 28 ff ff ff    	jbe    c00032d9 <create_chain+0x5e>
c00033b1:	bb 02 00 00 00       	mov    ebx,0x2
c00033b6:	89 da                	mov    edx,ebx
c00033b8:	89 e8                	mov    eax,ebp
c00033ba:	e8 ce fb ff ff       	call   c0002f8d <get_fat>
c00033bf:	85 c0                	test   eax,eax
c00033c1:	74 15                	je     c00033d8 <create_chain+0x15d>
c00033c3:	83 f8 01             	cmp    eax,0x1
c00033c6:	0f 84 e0 fe ff ff    	je     c00032ac <create_chain+0x31>
c00033cc:	40                   	inc    eax
c00033cd:	74 52                	je     c0003421 <create_chain+0x1a6>
c00033cf:	39 fb                	cmp    ebx,edi
c00033d1:	75 cf                	jne    c00033a2 <create_chain+0x127>
c00033d3:	e9 01 ff ff ff       	jmp    c00032d9 <create_chain+0x5e>
c00033d8:	83 c9 ff             	or     ecx,0xffffffff
c00033db:	89 da                	mov    edx,ebx
c00033dd:	89 f0                	mov    eax,esi
c00033df:	e8 a4 f9 ff ff       	call   c0002d88 <put_fat>
c00033e4:	85 c0                	test   eax,eax
c00033e6:	75 32                	jne    c000341a <create_chain+0x19f>
c00033e8:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00033ed:	74 11                	je     c0003400 <create_chain+0x185>
c00033ef:	89 d9                	mov    ecx,ebx
c00033f1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00033f5:	89 f0                	mov    eax,esi
c00033f7:	e8 8c f9 ff ff       	call   c0002d88 <put_fat>
c00033fc:	85 c0                	test   eax,eax
c00033fe:	75 1a                	jne    c000341a <create_chain+0x19f>
c0003400:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0003403:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c0003406:	89 5e 14             	mov    DWORD PTR [esi+0x14],ebx
c0003409:	8d 51 fe             	lea    edx,[ecx-0x2]
c000340c:	39 d0                	cmp    eax,edx
c000340e:	77 04                	ja     c0003414 <create_chain+0x199>
c0003410:	48                   	dec    eax
c0003411:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003414:	80 4e 04 01          	or     BYTE PTR [esi+0x4],0x1
c0003418:	eb 56                	jmp    c0003470 <create_chain+0x1f5>
c000341a:	48                   	dec    eax
c000341b:	0f 85 8b fe ff ff    	jne    c00032ac <create_chain+0x31>
c0003421:	83 cb ff             	or     ebx,0xffffffff
c0003424:	eb 4a                	jmp    c0003470 <create_chain+0x1f5>
c0003426:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000342a:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c000342d:	41                   	inc    ecx
c000342e:	39 d9                	cmp    ecx,ebx
c0003430:	75 19                	jne    c000344b <create_chain+0x1d0>
c0003432:	b9 02 00 00 00       	mov    ecx,0x2
c0003437:	85 d2                	test   edx,edx
c0003439:	74 03                	je     c000343e <create_chain+0x1c3>
c000343b:	8d 4a 01             	lea    ecx,[edx+0x1]
c000343e:	89 4d 18             	mov    DWORD PTR [ebp+0x18],ecx
c0003441:	85 c0                	test   eax,eax
c0003443:	0f 85 63 fe ff ff    	jne    c00032ac <create_chain+0x31>
c0003449:	eb b5                	jmp    c0003400 <create_chain+0x185>
c000344b:	85 d2                	test   edx,edx
c000344d:	75 07                	jne    c0003456 <create_chain+0x1db>
c000344f:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c0003456:	89 d9                	mov    ecx,ebx
c0003458:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000345c:	89 e8                	mov    eax,ebp
c000345e:	e8 bb fa ff ff       	call   c0002f1e <fill_last_frag>
c0003463:	85 c0                	test   eax,eax
c0003465:	75 b3                	jne    c000341a <create_chain+0x19f>
c0003467:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c000346e:	eb 90                	jmp    c0003400 <create_chain+0x185>
c0003470:	83 c4 1c             	add    esp,0x1c
c0003473:	89 d8                	mov    eax,ebx
c0003475:	5b                   	pop    ebx
c0003476:	5e                   	pop    esi
c0003477:	5f                   	pop    edi
c0003478:	5d                   	pop    ebp
c0003479:	c3                   	ret    

c000347a <remove_chain>:
c000347a:	55                   	push   ebp
c000347b:	57                   	push   edi
c000347c:	56                   	push   esi
c000347d:	53                   	push   ebx
c000347e:	83 ec 1c             	sub    esp,0x1c
c0003481:	83 fa 01             	cmp    edx,0x1
c0003484:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003488:	8b 18                	mov    ebx,DWORD PTR [eax]
c000348a:	77 0a                	ja     c0003496 <remove_chain+0x1c>
c000348c:	b8 02 00 00 00       	mov    eax,0x2
c0003491:	e9 24 01 00 00       	jmp    c00035ba <remove_chain+0x140>
c0003496:	89 d6                	mov    esi,edx
c0003498:	39 53 1c             	cmp    DWORD PTR [ebx+0x1c],edx
c000349b:	76 ef                	jbe    c000348c <remove_chain+0x12>
c000349d:	89 c7                	mov    edi,eax
c000349f:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00034a4:	75 06                	jne    c00034ac <remove_chain+0x32>
c00034a6:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00034aa:	eb 54                	jmp    c0003500 <remove_chain+0x86>
c00034ac:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00034af:	75 06                	jne    c00034b7 <remove_chain+0x3d>
c00034b1:	80 78 07 02          	cmp    BYTE PTR [eax+0x7],0x2
c00034b5:	74 ef                	je     c00034a6 <remove_chain+0x2c>
c00034b7:	83 c9 ff             	or     ecx,0xffffffff
c00034ba:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00034be:	89 d8                	mov    eax,ebx
c00034c0:	e8 c3 f8 ff ff       	call   c0002d88 <put_fat>
c00034c5:	85 c0                	test   eax,eax
c00034c7:	74 dd                	je     c00034a6 <remove_chain+0x2c>
c00034c9:	e9 ec 00 00 00       	jmp    c00035ba <remove_chain+0x140>
c00034ce:	83 f8 01             	cmp    eax,0x1
c00034d1:	74 b9                	je     c000348c <remove_chain+0x12>
c00034d3:	83 f8 ff             	cmp    eax,0xffffffff
c00034d6:	74 6d                	je     c0003545 <remove_chain+0xcb>
c00034d8:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00034db:	75 6f                	jne    c000354c <remove_chain+0xd2>
c00034dd:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00034e0:	8b 4b 1c             	mov    ecx,DWORD PTR [ebx+0x1c]
c00034e3:	8d 51 fe             	lea    edx,[ecx-0x2]
c00034e6:	39 d0                	cmp    eax,edx
c00034e8:	73 08                	jae    c00034f2 <remove_chain+0x78>
c00034ea:	40                   	inc    eax
c00034eb:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c00034ef:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00034f2:	8d 4e 01             	lea    ecx,[esi+0x1]
c00034f5:	39 e9                	cmp    ecx,ebp
c00034f7:	75 64                	jne    c000355d <remove_chain+0xe3>
c00034f9:	89 ee                	mov    esi,ebp
c00034fb:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c00034fe:	76 0f                	jbe    c000350f <remove_chain+0x95>
c0003500:	89 f2                	mov    edx,esi
c0003502:	89 f8                	mov    eax,edi
c0003504:	e8 84 fa ff ff       	call   c0002f8d <get_fat>
c0003509:	89 c5                	mov    ebp,eax
c000350b:	85 c0                	test   eax,eax
c000350d:	75 bf                	jne    c00034ce <remove_chain+0x54>
c000350f:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003512:	0f 85 a0 00 00 00    	jne    c00035b8 <remove_chain+0x13e>
c0003518:	eb 6c                	jmp    c0003586 <remove_chain+0x10c>
c000351a:	8a 47 07             	mov    al,BYTE PTR [edi+0x7]
c000351d:	84 c0                	test   al,al
c000351f:	75 7d                	jne    c000359e <remove_chain+0x124>
c0003521:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c0003524:	3b 5c 24 08          	cmp    ebx,DWORD PTR [esp+0x8]
c0003528:	0f 84 86 00 00 00    	je     c00035b4 <remove_chain+0x13a>
c000352e:	89 da                	mov    edx,ebx
c0003530:	89 f8                	mov    eax,edi
c0003532:	e8 56 fa ff ff       	call   c0002f8d <get_fat>
c0003537:	83 f8 01             	cmp    eax,0x1
c000353a:	0f 86 4c ff ff ff    	jbe    c000348c <remove_chain+0x12>
c0003540:	83 f8 ff             	cmp    eax,0xffffffff
c0003543:	75 4e                	jne    c0003593 <remove_chain+0x119>
c0003545:	b8 01 00 00 00       	mov    eax,0x1
c000354a:	eb 6e                	jmp    c00035ba <remove_chain+0x140>
c000354c:	31 c9                	xor    ecx,ecx
c000354e:	89 f2                	mov    edx,esi
c0003550:	89 d8                	mov    eax,ebx
c0003552:	e8 31 f8 ff ff       	call   c0002d88 <put_fat>
c0003557:	85 c0                	test   eax,eax
c0003559:	74 82                	je     c00034dd <remove_chain+0x63>
c000355b:	eb 5d                	jmp    c00035ba <remove_chain+0x140>
c000355d:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003560:	75 1b                	jne    c000357d <remove_chain+0x103>
c0003562:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c0003566:	89 d8                	mov    eax,ebx
c0003568:	83 ec 0c             	sub    esp,0xc
c000356b:	6a 00                	push   0x0
c000356d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003571:	e8 5d f7 ff ff       	call   c0002cd3 <change_bitmap>
c0003576:	83 c4 10             	add    esp,0x10
c0003579:	85 c0                	test   eax,eax
c000357b:	75 3d                	jne    c00035ba <remove_chain+0x140>
c000357d:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c0003581:	e9 73 ff ff ff       	jmp    c00034f9 <remove_chain+0x7f>
c0003586:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000358b:	75 8d                	jne    c000351a <remove_chain+0xa0>
c000358d:	c6 47 07 00          	mov    BYTE PTR [edi+0x7],0x0
c0003591:	eb 25                	jmp    c00035b8 <remove_chain+0x13e>
c0003593:	8d 53 01             	lea    edx,[ebx+0x1]
c0003596:	89 c3                	mov    ebx,eax
c0003598:	39 c2                	cmp    edx,eax
c000359a:	74 88                	je     c0003524 <remove_chain+0xaa>
c000359c:	eb 1a                	jmp    c00035b8 <remove_chain+0x13e>
c000359e:	3c 03                	cmp    al,0x3
c00035a0:	75 16                	jne    c00035b8 <remove_chain+0x13e>
c00035a2:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00035a5:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00035a9:	77 0d                	ja     c00035b8 <remove_chain+0x13e>
c00035ab:	03 47 14             	add    eax,DWORD PTR [edi+0x14]
c00035ae:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00035b2:	72 04                	jb     c00035b8 <remove_chain+0x13e>
c00035b4:	c6 47 07 02          	mov    BYTE PTR [edi+0x7],0x2
c00035b8:	31 c0                	xor    eax,eax
c00035ba:	83 c4 1c             	add    esp,0x1c
c00035bd:	5b                   	pop    ebx
c00035be:	5e                   	pop    esi
c00035bf:	5f                   	pop    edi
c00035c0:	5d                   	pop    ebp
c00035c1:	c3                   	ret    

c00035c2 <dir_clear>:
c00035c2:	55                   	push   ebp
c00035c3:	57                   	push   edi
c00035c4:	56                   	push   esi
c00035c5:	89 c6                	mov    esi,eax
c00035c7:	53                   	push   ebx
c00035c8:	83 ec 1c             	sub    esp,0x1c
c00035cb:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00035cf:	e8 9d ed ff ff       	call   c0002371 <sync_window>
c00035d4:	85 c0                	test   eax,eax
c00035d6:	0f 85 de 00 00 00    	jne    c00036ba <dir_clear+0xf8>
c00035dc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00035e0:	89 f0                	mov    eax,esi
c00035e2:	8d 6e 54             	lea    ebp,[esi+0x54]
c00035e5:	e8 d6 e8 ff ff       	call   c0001ec0 <clst2sect>
c00035ea:	b9 00 02 00 00       	mov    ecx,0x200
c00035ef:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00035f3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00035f7:	89 46 4c             	mov    DWORD PTR [esi+0x4c],eax
c00035fa:	89 56 50             	mov    DWORD PTR [esi+0x50],edx
c00035fd:	89 e8                	mov    eax,ebp
c00035ff:	31 d2                	xor    edx,edx
c0003601:	e8 b5 e6 ff ff       	call   c0001cbb <mem_set>
c0003606:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c000360a:	c1 e3 09             	shl    ebx,0x9
c000360d:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0003613:	76 1f                	jbe    c0003634 <dir_clear+0x72>
c0003615:	bb 00 80 00 00       	mov    ebx,0x8000
c000361a:	eb 18                	jmp    c0003634 <dir_clear+0x72>
c000361c:	83 ec 0c             	sub    esp,0xc
c000361f:	53                   	push   ebx
c0003620:	e8 35 4e 00 00       	call   c000845a <ff_memalloc>
c0003625:	83 c4 10             	add    esp,0x10
c0003628:	89 c7                	mov    edi,eax
c000362a:	85 c0                	test   eax,eax
c000362c:	0f 85 8f 00 00 00    	jne    c00036c1 <dir_clear+0xff>
c0003632:	d1 eb                	shr    ebx,1
c0003634:	81 fb 00 02 00 00    	cmp    ebx,0x200
c000363a:	77 e0                	ja     c000361c <dir_clear+0x5a>
c000363c:	31 db                	xor    ebx,ebx
c000363e:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0003642:	39 d8                	cmp    eax,ebx
c0003644:	76 66                	jbe    c00036ac <dir_clear+0xea>
c0003646:	83 ec 0c             	sub    esp,0xc
c0003649:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c000364d:	6a 01                	push   0x1
c000364f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0003653:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0003657:	55                   	push   ebp
c0003658:	50                   	push   eax
c0003659:	e8 94 e5 ff ff       	call   c0001bf2 <disk_write>
c000365e:	83 44 24 28 01       	add    DWORD PTR [esp+0x28],0x1
c0003663:	83 54 24 2c 00       	adc    DWORD PTR [esp+0x2c],0x0
c0003668:	83 c4 20             	add    esp,0x20
c000366b:	85 c0                	test   eax,eax
c000366d:	75 3d                	jne    c00036ac <dir_clear+0xea>
c000366f:	43                   	inc    ebx
c0003670:	eb cc                	jmp    c000363e <dir_clear+0x7c>
c0003672:	83 ec 0c             	sub    esp,0xc
c0003675:	31 d2                	xor    edx,edx
c0003677:	55                   	push   ebp
c0003678:	89 d8                	mov    eax,ebx
c000367a:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c000367e:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c0003682:	52                   	push   edx
c0003683:	50                   	push   eax
c0003684:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003688:	57                   	push   edi
c0003689:	50                   	push   eax
c000368a:	e8 63 e5 ff ff       	call   c0001bf2 <disk_write>
c000368f:	83 c4 20             	add    esp,0x20
c0003692:	85 c0                	test   eax,eax
c0003694:	75 0a                	jne    c00036a0 <dir_clear+0xde>
c0003696:	01 eb                	add    ebx,ebp
c0003698:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c000369c:	39 d8                	cmp    eax,ebx
c000369e:	77 d2                	ja     c0003672 <dir_clear+0xb0>
c00036a0:	83 ec 0c             	sub    esp,0xc
c00036a3:	57                   	push   edi
c00036a4:	e8 c7 4d 00 00       	call   c0008470 <ff_memfree>
c00036a9:	83 c4 10             	add    esp,0x10
c00036ac:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00036b0:	39 d8                	cmp    eax,ebx
c00036b2:	0f 95 c0             	setne  al
c00036b5:	0f b6 c0             	movzx  eax,al
c00036b8:	eb 19                	jmp    c00036d3 <dir_clear+0x111>
c00036ba:	b8 01 00 00 00       	mov    eax,0x1
c00036bf:	eb 12                	jmp    c00036d3 <dir_clear+0x111>
c00036c1:	89 d9                	mov    ecx,ebx
c00036c3:	31 d2                	xor    edx,edx
c00036c5:	c1 eb 09             	shr    ebx,0x9
c00036c8:	e8 ee e5 ff ff       	call   c0001cbb <mem_set>
c00036cd:	89 dd                	mov    ebp,ebx
c00036cf:	31 db                	xor    ebx,ebx
c00036d1:	eb c5                	jmp    c0003698 <dir_clear+0xd6>
c00036d3:	83 c4 1c             	add    esp,0x1c
c00036d6:	5b                   	pop    ebx
c00036d7:	5e                   	pop    esi
c00036d8:	5f                   	pop    edi
c00036d9:	5d                   	pop    ebp
c00036da:	c3                   	ret    

c00036db <dir_next>:
c00036db:	55                   	push   ebp
c00036dc:	57                   	push   edi
c00036dd:	56                   	push   esi
c00036de:	53                   	push   ebx
c00036df:	89 c3                	mov    ebx,eax
c00036e1:	83 ec 1c             	sub    esp,0x1c
c00036e4:	8b 28                	mov    ebp,DWORD PTR [eax]
c00036e6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00036ea:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00036ed:	8d 78 20             	lea    edi,[eax+0x20]
c00036f0:	31 c0                	xor    eax,eax
c00036f2:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c00036f6:	0f 94 c0             	sete   al
c00036f9:	48                   	dec    eax
c00036fa:	25 00 00 20 f0       	and    eax,0xf0200000
c00036ff:	05 00 00 00 10       	add    eax,0x10000000
c0003704:	39 f8                	cmp    eax,edi
c0003706:	77 0e                	ja     c0003716 <dir_next+0x3b>
c0003708:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c000370f:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003716:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003719:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000371c:	b8 04 00 00 00       	mov    eax,0x4
c0003721:	89 ce                	mov    esi,ecx
c0003723:	09 d6                	or     esi,edx
c0003725:	0f 84 da 00 00 00    	je     c0003805 <dir_next+0x12a>
c000372b:	89 f8                	mov    eax,edi
c000372d:	25 ff 01 00 00       	and    eax,0x1ff
c0003732:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003736:	0f 85 b9 00 00 00    	jne    c00037f5 <dir_next+0x11a>
c000373c:	83 c2 01             	add    edx,0x1
c000373f:	83 d1 00             	adc    ecx,0x0
c0003742:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0003745:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c0003748:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000374b:	85 d2                	test   edx,edx
c000374d:	75 29                	jne    c0003778 <dir_next+0x9d>
c000374f:	89 fa                	mov    edx,edi
c0003751:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c0003755:	c1 ea 05             	shr    edx,0x5
c0003758:	39 c2                	cmp    edx,eax
c000375a:	0f 82 95 00 00 00    	jb     c00037f5 <dir_next+0x11a>
c0003760:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003767:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000376e:	b8 04 00 00 00       	mov    eax,0x4
c0003773:	e9 8d 00 00 00       	jmp    c0003805 <dir_next+0x12a>
c0003778:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c000377c:	89 f9                	mov    ecx,edi
c000377e:	48                   	dec    eax
c000377f:	c1 e9 09             	shr    ecx,0x9
c0003782:	85 c8                	test   eax,ecx
c0003784:	75 6f                	jne    c00037f5 <dir_next+0x11a>
c0003786:	89 d8                	mov    eax,ebx
c0003788:	e8 00 f8 ff ff       	call   c0002f8d <get_fat>
c000378d:	89 c6                	mov    esi,eax
c000378f:	83 f8 01             	cmp    eax,0x1
c0003792:	77 07                	ja     c000379b <dir_next+0xc0>
c0003794:	b8 02 00 00 00       	mov    eax,0x2
c0003799:	eb 6a                	jmp    c0003805 <dir_next+0x12a>
c000379b:	83 f8 ff             	cmp    eax,0xffffffff
c000379e:	75 07                	jne    c00037a7 <dir_next+0xcc>
c00037a0:	b8 01 00 00 00       	mov    eax,0x1
c00037a5:	eb 5e                	jmp    c0003805 <dir_next+0x12a>
c00037a7:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c00037aa:	77 37                	ja     c00037e3 <dir_next+0x108>
c00037ac:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00037b1:	74 ad                	je     c0003760 <dir_next+0x85>
c00037b3:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00037b6:	89 d8                	mov    eax,ebx
c00037b8:	e8 be fa ff ff       	call   c000327b <create_chain>
c00037bd:	89 c6                	mov    esi,eax
c00037bf:	b8 07 00 00 00       	mov    eax,0x7
c00037c4:	85 f6                	test   esi,esi
c00037c6:	74 3d                	je     c0003805 <dir_next+0x12a>
c00037c8:	83 fe 01             	cmp    esi,0x1
c00037cb:	74 c7                	je     c0003794 <dir_next+0xb9>
c00037cd:	83 fe ff             	cmp    esi,0xffffffff
c00037d0:	74 ce                	je     c00037a0 <dir_next+0xc5>
c00037d2:	89 f2                	mov    edx,esi
c00037d4:	89 e8                	mov    eax,ebp
c00037d6:	e8 e7 fd ff ff       	call   c00035c2 <dir_clear>
c00037db:	85 c0                	test   eax,eax
c00037dd:	75 c1                	jne    c00037a0 <dir_next+0xc5>
c00037df:	80 4b 07 04          	or     BYTE PTR [ebx+0x7],0x4
c00037e3:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c00037e6:	89 f2                	mov    edx,esi
c00037e8:	89 e8                	mov    eax,ebp
c00037ea:	e8 d1 e6 ff ff       	call   c0001ec0 <clst2sect>
c00037ef:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c00037f2:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c00037f5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00037f9:	89 7b 28             	mov    DWORD PTR [ebx+0x28],edi
c00037fc:	8d 44 05 54          	lea    eax,[ebp+eax*1+0x54]
c0003800:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0003803:	31 c0                	xor    eax,eax
c0003805:	83 c4 1c             	add    esp,0x1c
c0003808:	5b                   	pop    ebx
c0003809:	5e                   	pop    esi
c000380a:	5f                   	pop    edi
c000380b:	5d                   	pop    ebp
c000380c:	c3                   	ret    

c000380d <load_xdir>:
c000380d:	55                   	push   ebp
c000380e:	57                   	push   edi
c000380f:	56                   	push   esi
c0003810:	89 c6                	mov    esi,eax
c0003812:	53                   	push   ebx
c0003813:	83 ec 1c             	sub    esp,0x1c
c0003816:	8b 00                	mov    eax,DWORD PTR [eax]
c0003818:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000381b:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000381e:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0003821:	e8 df eb ff ff       	call   c0002405 <move_window>
c0003826:	89 c3                	mov    ebx,eax
c0003828:	85 c0                	test   eax,eax
c000382a:	0f 85 0c 01 00 00    	jne    c000393c <load_xdir+0x12f>
c0003830:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c0003833:	80 3a 85             	cmp    BYTE PTR [edx],0x85
c0003836:	0f 85 fb 00 00 00    	jne    c0003937 <load_xdir+0x12a>
c000383c:	89 f8                	mov    eax,edi
c000383e:	b9 20 00 00 00       	mov    ecx,0x20
c0003843:	e8 5e e4 ff ff       	call   c0001ca6 <mem_cpy>
c0003848:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c000384c:	40                   	inc    eax
c000384d:	c1 e0 05             	shl    eax,0x5
c0003850:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003854:	83 e8 60             	sub    eax,0x60
c0003857:	3d 00 02 00 00       	cmp    eax,0x200
c000385c:	0f 87 d5 00 00 00    	ja     c0003937 <load_xdir+0x12a>
c0003862:	31 d2                	xor    edx,edx
c0003864:	89 f0                	mov    eax,esi
c0003866:	e8 70 fe ff ff       	call   c00036db <dir_next>
c000386b:	89 c3                	mov    ebx,eax
c000386d:	83 f8 04             	cmp    eax,0x4
c0003870:	0f 84 c1 00 00 00    	je     c0003937 <load_xdir+0x12a>
c0003876:	85 c0                	test   eax,eax
c0003878:	0f 85 be 00 00 00    	jne    c000393c <load_xdir+0x12f>
c000387e:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c0003881:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0003884:	8b 06                	mov    eax,DWORD PTR [esi]
c0003886:	e8 7a eb ff ff       	call   c0002405 <move_window>
c000388b:	89 c3                	mov    ebx,eax
c000388d:	85 c0                	test   eax,eax
c000388f:	0f 85 a7 00 00 00    	jne    c000393c <load_xdir+0x12f>
c0003895:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c0003898:	80 3a c0             	cmp    BYTE PTR [edx],0xc0
c000389b:	0f 85 96 00 00 00    	jne    c0003937 <load_xdir+0x12a>
c00038a1:	8d 47 20             	lea    eax,[edi+0x20]
c00038a4:	b9 20 00 00 00       	mov    ecx,0x20
c00038a9:	e8 f8 e3 ff ff       	call   c0001ca6 <mem_cpy>
c00038ae:	31 d2                	xor    edx,edx
c00038b0:	0f b6 47 23          	movzx  eax,BYTE PTR [edi+0x23]
c00038b4:	b9 0f 00 00 00       	mov    ecx,0xf
c00038b9:	83 c0 2c             	add    eax,0x2c
c00038bc:	f7 f1                	div    ecx
c00038be:	c1 e0 05             	shl    eax,0x5
c00038c1:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00038c5:	77 70                	ja     c0003937 <load_xdir+0x12a>
c00038c7:	bd 40 00 00 00       	mov    ebp,0x40
c00038cc:	31 d2                	xor    edx,edx
c00038ce:	89 f0                	mov    eax,esi
c00038d0:	e8 06 fe ff ff       	call   c00036db <dir_next>
c00038d5:	89 c3                	mov    ebx,eax
c00038d7:	83 f8 04             	cmp    eax,0x4
c00038da:	74 5b                	je     c0003937 <load_xdir+0x12a>
c00038dc:	85 c0                	test   eax,eax
c00038de:	75 5c                	jne    c000393c <load_xdir+0x12f>
c00038e0:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c00038e3:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c00038e6:	8b 06                	mov    eax,DWORD PTR [esi]
c00038e8:	e8 18 eb ff ff       	call   c0002405 <move_window>
c00038ed:	89 c3                	mov    ebx,eax
c00038ef:	85 c0                	test   eax,eax
c00038f1:	75 49                	jne    c000393c <load_xdir+0x12f>
c00038f3:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c00038f6:	80 3a c1             	cmp    BYTE PTR [edx],0xc1
c00038f9:	75 3c                	jne    c0003937 <load_xdir+0x12a>
c00038fb:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0003901:	77 0d                	ja     c0003910 <load_xdir+0x103>
c0003903:	8d 04 2f             	lea    eax,[edi+ebp*1]
c0003906:	b9 20 00 00 00       	mov    ecx,0x20
c000390b:	e8 96 e3 ff ff       	call   c0001ca6 <mem_cpy>
c0003910:	83 c5 20             	add    ebp,0x20
c0003913:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
c0003917:	77 b3                	ja     c00038cc <load_xdir+0xbf>
c0003919:	81 fd 60 02 00 00    	cmp    ebp,0x260
c000391f:	77 1b                	ja     c000393c <load_xdir+0x12f>
c0003921:	89 f8                	mov    eax,edi
c0003923:	e8 cd e7 ff ff       	call   c00020f5 <xdir_sum>
c0003928:	89 c1                	mov    ecx,eax
c000392a:	8d 47 02             	lea    eax,[edi+0x2]
c000392d:	e8 f5 e2 ff ff       	call   c0001c27 <ld_word>
c0003932:	66 39 c1             	cmp    cx,ax
c0003935:	74 05                	je     c000393c <load_xdir+0x12f>
c0003937:	bb 02 00 00 00       	mov    ebx,0x2
c000393c:	83 c4 1c             	add    esp,0x1c
c000393f:	89 d8                	mov    eax,ebx
c0003941:	5b                   	pop    ebx
c0003942:	5e                   	pop    esi
c0003943:	5f                   	pop    edi
c0003944:	5d                   	pop    ebp
c0003945:	c3                   	ret    

c0003946 <load_obj_xdir>:
c0003946:	53                   	push   ebx
c0003947:	89 c3                	mov    ebx,eax
c0003949:	83 ec 08             	sub    esp,0x8
c000394c:	8b 02                	mov    eax,DWORD PTR [edx]
c000394e:	89 03                	mov    DWORD PTR [ebx],eax
c0003950:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0003953:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003956:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0003959:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c000395c:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c000395f:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0003966:	30 c0                	xor    al,al
c0003968:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000396f:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0003972:	89 d8                	mov    eax,ebx
c0003974:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c0003977:	89 53 48             	mov    DWORD PTR [ebx+0x48],edx
c000397a:	e8 04 f8 ff ff       	call   c0003183 <dir_sdi>
c000397f:	85 c0                	test   eax,eax
c0003981:	75 0b                	jne    c000398e <load_obj_xdir+0x48>
c0003983:	89 d8                	mov    eax,ebx
c0003985:	83 c4 08             	add    esp,0x8
c0003988:	5b                   	pop    ebx
c0003989:	e9 7f fe ff ff       	jmp    c000380d <load_xdir>
c000398e:	83 c4 08             	add    esp,0x8
c0003991:	5b                   	pop    ebx
c0003992:	c3                   	ret    

c0003993 <dir_read>:
c0003993:	55                   	push   ebp
c0003994:	bd 04 00 00 00       	mov    ebp,0x4
c0003999:	57                   	push   edi
c000399a:	56                   	push   esi
c000399b:	be ff ff ff ff       	mov    esi,0xffffffff
c00039a0:	53                   	push   ebx
c00039a1:	89 c3                	mov    ebx,eax
c00039a3:	83 ec 1c             	sub    esp,0x1c
c00039a6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00039aa:	8b 38                	mov    edi,DWORD PTR [eax]
c00039ac:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c00039b1:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00039b4:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00039b7:	89 c8                	mov    eax,ecx
c00039b9:	09 d0                	or     eax,edx
c00039bb:	0f 84 25 01 00 00    	je     c0003ae6 <dir_read+0x153>
c00039c1:	89 f8                	mov    eax,edi
c00039c3:	e8 3d ea ff ff       	call   c0002405 <move_window>
c00039c8:	89 c5                	mov    ebp,eax
c00039ca:	85 c0                	test   eax,eax
c00039cc:	0f 85 23 01 00 00    	jne    c0003af5 <dir_read+0x162>
c00039d2:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00039d5:	8a 0a                	mov    cl,BYTE PTR [edx]
c00039d7:	84 c9                	test   cl,cl
c00039d9:	0f 84 11 01 00 00    	je     c0003af0 <dir_read+0x15d>
c00039df:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c00039e2:	75 48                	jne    c0003a2c <dir_read+0x99>
c00039e4:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00039e9:	74 10                	je     c00039fb <dir_read+0x68>
c00039eb:	80 f9 83             	cmp    cl,0x83
c00039ee:	0f 85 dd 00 00 00    	jne    c0003ad1 <dir_read+0x13e>
c00039f4:	31 ed                	xor    ebp,ebp
c00039f6:	e9 08 01 00 00       	jmp    c0003b03 <dir_read+0x170>
c00039fb:	80 f9 85             	cmp    cl,0x85
c00039fe:	0f 85 cd 00 00 00    	jne    c0003ad1 <dir_read+0x13e>
c0003a04:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003a07:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003a0a:	89 d8                	mov    eax,ebx
c0003a0c:	e8 fc fd ff ff       	call   c000380d <load_xdir>
c0003a11:	89 c5                	mov    ebp,eax
c0003a13:	85 c0                	test   eax,eax
c0003a15:	0f 85 da 00 00 00    	jne    c0003af5 <dir_read+0x162>
c0003a1b:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0003a1e:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c0003a21:	83 e0 3f             	and    eax,0x3f
c0003a24:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003a27:	e9 d7 00 00 00       	jmp    c0003b03 <dir_read+0x170>
c0003a2c:	8a 42 0b             	mov    al,BYTE PTR [edx+0xb]
c0003a2f:	83 e0 3f             	and    eax,0x3f
c0003a32:	80 f9 2e             	cmp    cl,0x2e
c0003a35:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0003a39:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003a3c:	0f 84 8a 00 00 00    	je     c0003acc <dir_read+0x139>
c0003a42:	80 f9 e5             	cmp    cl,0xe5
c0003a45:	0f 84 81 00 00 00    	je     c0003acc <dir_read+0x139>
c0003a4b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003a4f:	83 e0 1f             	and    eax,0x1f
c0003a52:	83 f8 08             	cmp    eax,0x8
c0003a55:	0f 94 c0             	sete   al
c0003a58:	0f b6 c0             	movzx  eax,al
c0003a5b:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0003a5f:	75 6b                	jne    c0003acc <dir_read+0x139>
c0003a61:	80 7c 24 08 0f       	cmp    BYTE PTR [esp+0x8],0xf
c0003a66:	75 44                	jne    c0003aac <dir_read+0x119>
c0003a68:	f6 c1 40             	test   cl,0x40
c0003a6b:	74 12                	je     c0003a7f <dir_read+0xec>
c0003a6d:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c0003a70:	83 e1 bf             	and    ecx,0xffffffbf
c0003a73:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0003a77:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003a7a:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003a7d:	eb 06                	jmp    c0003a85 <dir_read+0xf2>
c0003a7f:	89 f0                	mov    eax,esi
c0003a81:	38 c8                	cmp    al,cl
c0003a83:	75 47                	jne    c0003acc <dir_read+0x139>
c0003a85:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0003a89:	be ff ff ff ff       	mov    esi,0xffffffff
c0003a8e:	38 42 0d             	cmp    BYTE PTR [edx+0xd],al
c0003a91:	75 3e                	jne    c0003ad1 <dir_read+0x13e>
c0003a93:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0003a97:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003a9a:	e8 8a e4 ff ff       	call   c0001f29 <pick_lfn>
c0003a9f:	85 c0                	test   eax,eax
c0003aa1:	74 2e                	je     c0003ad1 <dir_read+0x13e>
c0003aa3:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0003aa7:	8d 71 ff             	lea    esi,[ecx-0x1]
c0003aaa:	eb 25                	jmp    c0003ad1 <dir_read+0x13e>
c0003aac:	89 f0                	mov    eax,esi
c0003aae:	84 c0                	test   al,al
c0003ab0:	75 11                	jne    c0003ac3 <dir_read+0x130>
c0003ab2:	89 d0                	mov    eax,edx
c0003ab4:	e8 2a e6 ff ff       	call   c00020e3 <sum_sfn>
c0003ab9:	3a 44 24 07          	cmp    al,BYTE PTR [esp+0x7]
c0003abd:	0f 84 31 ff ff ff    	je     c00039f4 <dir_read+0x61>
c0003ac3:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0003aca:	eb 37                	jmp    c0003b03 <dir_read+0x170>
c0003acc:	be ff ff ff ff       	mov    esi,0xffffffff
c0003ad1:	31 d2                	xor    edx,edx
c0003ad3:	89 d8                	mov    eax,ebx
c0003ad5:	e8 01 fc ff ff       	call   c00036db <dir_next>
c0003ada:	89 c5                	mov    ebp,eax
c0003adc:	85 c0                	test   eax,eax
c0003ade:	0f 84 cd fe ff ff    	je     c00039b1 <dir_read+0x1e>
c0003ae4:	eb 0f                	jmp    c0003af5 <dir_read+0x162>
c0003ae6:	85 ed                	test   ebp,ebp
c0003ae8:	0f 84 06 ff ff ff    	je     c00039f4 <dir_read+0x61>
c0003aee:	eb 05                	jmp    c0003af5 <dir_read+0x162>
c0003af0:	bd 04 00 00 00       	mov    ebp,0x4
c0003af5:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003afc:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003b03:	83 c4 1c             	add    esp,0x1c
c0003b06:	89 e8                	mov    eax,ebp
c0003b08:	5b                   	pop    ebx
c0003b09:	5e                   	pop    esi
c0003b0a:	5f                   	pop    edi
c0003b0b:	5d                   	pop    ebp
c0003b0c:	c3                   	ret    

c0003b0d <dir_alloc>:
c0003b0d:	55                   	push   ebp
c0003b0e:	89 d5                	mov    ebp,edx
c0003b10:	57                   	push   edi
c0003b11:	31 d2                	xor    edx,edx
c0003b13:	56                   	push   esi
c0003b14:	53                   	push   ebx
c0003b15:	89 c3                	mov    ebx,eax
c0003b17:	83 ec 0c             	sub    esp,0xc
c0003b1a:	8b 38                	mov    edi,DWORD PTR [eax]
c0003b1c:	e8 62 f6 ff ff       	call   c0003183 <dir_sdi>
c0003b21:	85 c0                	test   eax,eax
c0003b23:	75 4e                	jne    c0003b73 <dir_alloc+0x66>
c0003b25:	31 f6                	xor    esi,esi
c0003b27:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003b2a:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003b2d:	89 f8                	mov    eax,edi
c0003b2f:	e8 d1 e8 ff ff       	call   c0002405 <move_window>
c0003b34:	85 c0                	test   eax,eax
c0003b36:	75 3b                	jne    c0003b73 <dir_alloc+0x66>
c0003b38:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003b3b:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003b3e:	8a 12                	mov    dl,BYTE PTR [edx]
c0003b40:	75 07                	jne    c0003b49 <dir_alloc+0x3c>
c0003b42:	f7 d2                	not    edx
c0003b44:	c0 ea 07             	shr    dl,0x7
c0003b47:	eb 0d                	jmp    c0003b56 <dir_alloc+0x49>
c0003b49:	84 d2                	test   dl,dl
c0003b4b:	0f 94 c1             	sete   cl
c0003b4e:	80 fa e5             	cmp    dl,0xe5
c0003b51:	0f 94 c2             	sete   dl
c0003b54:	09 ca                	or     edx,ecx
c0003b56:	84 d2                	test   dl,dl
c0003b58:	74 07                	je     c0003b61 <dir_alloc+0x54>
c0003b5a:	46                   	inc    esi
c0003b5b:	39 ee                	cmp    esi,ebp
c0003b5d:	75 04                	jne    c0003b63 <dir_alloc+0x56>
c0003b5f:	eb 1c                	jmp    c0003b7d <dir_alloc+0x70>
c0003b61:	31 f6                	xor    esi,esi
c0003b63:	ba 01 00 00 00       	mov    edx,0x1
c0003b68:	89 d8                	mov    eax,ebx
c0003b6a:	e8 6c fb ff ff       	call   c00036db <dir_next>
c0003b6f:	85 c0                	test   eax,eax
c0003b71:	74 b4                	je     c0003b27 <dir_alloc+0x1a>
c0003b73:	83 f8 04             	cmp    eax,0x4
c0003b76:	75 05                	jne    c0003b7d <dir_alloc+0x70>
c0003b78:	b8 07 00 00 00       	mov    eax,0x7
c0003b7d:	83 c4 0c             	add    esp,0xc
c0003b80:	5b                   	pop    ebx
c0003b81:	5e                   	pop    esi
c0003b82:	5f                   	pop    edi
c0003b83:	5d                   	pop    ebp
c0003b84:	c3                   	ret    

c0003b85 <store_xdir>:
c0003b85:	55                   	push   ebp
c0003b86:	57                   	push   edi
c0003b87:	89 c7                	mov    edi,eax
c0003b89:	56                   	push   esi
c0003b8a:	53                   	push   ebx
c0003b8b:	83 ec 0c             	sub    esp,0xc
c0003b8e:	8b 00                	mov    eax,DWORD PTR [eax]
c0003b90:	8b 68 10             	mov    ebp,DWORD PTR [eax+0x10]
c0003b93:	89 e8                	mov    eax,ebp
c0003b95:	e8 5b e5 ff ff       	call   c00020f5 <xdir_sum>
c0003b9a:	0f b7 d0             	movzx  edx,ax
c0003b9d:	8d 45 02             	lea    eax,[ebp+0x2]
c0003ba0:	e8 f4 e0 ff ff       	call   c0001c99 <st_word>
c0003ba5:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c0003ba9:	8b 57 48             	mov    edx,DWORD PTR [edi+0x48]
c0003bac:	89 f8                	mov    eax,edi
c0003bae:	e8 d0 f5 ff ff       	call   c0003183 <dir_sdi>
c0003bb3:	89 c6                	mov    esi,eax
c0003bb5:	85 f6                	test   esi,esi
c0003bb7:	75 3d                	jne    c0003bf6 <store_xdir+0x71>
c0003bb9:	8b 57 30             	mov    edx,DWORD PTR [edi+0x30]
c0003bbc:	8b 4f 34             	mov    ecx,DWORD PTR [edi+0x34]
c0003bbf:	8b 07                	mov    eax,DWORD PTR [edi]
c0003bc1:	e8 3f e8 ff ff       	call   c0002405 <move_window>
c0003bc6:	89 c6                	mov    esi,eax
c0003bc8:	85 c0                	test   eax,eax
c0003bca:	75 2a                	jne    c0003bf6 <store_xdir+0x71>
c0003bcc:	8b 47 38             	mov    eax,DWORD PTR [edi+0x38]
c0003bcf:	b9 20 00 00 00       	mov    ecx,0x20
c0003bd4:	89 ea                	mov    edx,ebp
c0003bd6:	e8 cb e0 ff ff       	call   c0001ca6 <mem_cpy>
c0003bdb:	8b 07                	mov    eax,DWORD PTR [edi]
c0003bdd:	85 db                	test   ebx,ebx
c0003bdf:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003be3:	74 11                	je     c0003bf6 <store_xdir+0x71>
c0003be5:	31 d2                	xor    edx,edx
c0003be7:	89 f8                	mov    eax,edi
c0003be9:	83 c5 20             	add    ebp,0x20
c0003bec:	e8 ea fa ff ff       	call   c00036db <dir_next>
c0003bf1:	4b                   	dec    ebx
c0003bf2:	89 c6                	mov    esi,eax
c0003bf4:	eb bf                	jmp    c0003bb5 <store_xdir+0x30>
c0003bf6:	89 f0                	mov    eax,esi
c0003bf8:	83 fe 02             	cmp    esi,0x2
c0003bfb:	76 05                	jbe    c0003c02 <store_xdir+0x7d>
c0003bfd:	b8 02 00 00 00       	mov    eax,0x2
c0003c02:	83 c4 0c             	add    esp,0xc
c0003c05:	5b                   	pop    ebx
c0003c06:	5e                   	pop    esi
c0003c07:	5f                   	pop    edi
c0003c08:	5d                   	pop    ebp
c0003c09:	c3                   	ret    

c0003c0a <dir_remove>:
c0003c0a:	57                   	push   edi
c0003c0b:	56                   	push   esi
c0003c0c:	53                   	push   ebx
c0003c0d:	89 c3                	mov    ebx,eax
c0003c0f:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c0003c12:	8b 30                	mov    esi,DWORD PTR [eax]
c0003c14:	8b 78 28             	mov    edi,DWORD PTR [eax+0x28]
c0003c17:	83 fa ff             	cmp    edx,0xffffffff
c0003c1a:	74 09                	je     c0003c25 <dir_remove+0x1b>
c0003c1c:	e8 62 f5 ff ff       	call   c0003183 <dir_sdi>
c0003c21:	85 c0                	test   eax,eax
c0003c23:	75 41                	jne    c0003c66 <dir_remove+0x5c>
c0003c25:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003c28:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003c2b:	89 f0                	mov    eax,esi
c0003c2d:	e8 d3 e7 ff ff       	call   c0002405 <move_window>
c0003c32:	85 c0                	test   eax,eax
c0003c34:	75 26                	jne    c0003c5c <dir_remove+0x52>
c0003c36:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003c39:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003c3c:	75 05                	jne    c0003c43 <dir_remove+0x39>
c0003c3e:	80 22 7f             	and    BYTE PTR [edx],0x7f
c0003c41:	eb 03                	jmp    c0003c46 <dir_remove+0x3c>
c0003c43:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003c46:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003c4a:	39 7b 28             	cmp    DWORD PTR [ebx+0x28],edi
c0003c4d:	73 17                	jae    c0003c66 <dir_remove+0x5c>
c0003c4f:	31 d2                	xor    edx,edx
c0003c51:	89 d8                	mov    eax,ebx
c0003c53:	e8 83 fa ff ff       	call   c00036db <dir_next>
c0003c58:	85 c0                	test   eax,eax
c0003c5a:	74 c9                	je     c0003c25 <dir_remove+0x1b>
c0003c5c:	83 f8 04             	cmp    eax,0x4
c0003c5f:	75 05                	jne    c0003c66 <dir_remove+0x5c>
c0003c61:	b8 02 00 00 00       	mov    eax,0x2
c0003c66:	5b                   	pop    ebx
c0003c67:	5e                   	pop    esi
c0003c68:	5f                   	pop    edi
c0003c69:	c3                   	ret    

c0003c6a <create_name>:
c0003c6a:	55                   	push   ebp
c0003c6b:	89 d5                	mov    ebp,edx
c0003c6d:	57                   	push   edi
c0003c6e:	89 c7                	mov    edi,eax
c0003c70:	56                   	push   esi
c0003c71:	31 f6                	xor    esi,esi
c0003c73:	53                   	push   ebx
c0003c74:	83 ec 3c             	sub    esp,0x3c
c0003c77:	8b 02                	mov    eax,DWORD PTR [edx]
c0003c79:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003c7d:	8b 07                	mov    eax,DWORD PTR [edi]
c0003c7f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003c82:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0003c86:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0003c8a:	e8 72 e0 ff ff       	call   c0001d01 <tchar2uni>
c0003c8f:	89 c3                	mov    ebx,eax
c0003c91:	83 f8 ff             	cmp    eax,0xffffffff
c0003c94:	75 0a                	jne    c0003ca0 <create_name+0x36>
c0003c96:	b8 06 00 00 00       	mov    eax,0x6
c0003c9b:	e9 9e 02 00 00       	jmp    c0003f3e <create_name+0x2d4>
c0003ca0:	3d ff ff 00 00       	cmp    eax,0xffff
c0003ca5:	76 0c                	jbe    c0003cb3 <create_name+0x49>
c0003ca7:	c1 e8 10             	shr    eax,0x10
c0003caa:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0003cae:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0003cb2:	46                   	inc    esi
c0003cb3:	66 83 fb 1f          	cmp    bx,0x1f
c0003cb7:	76 4f                	jbe    c0003d08 <create_name+0x9e>
c0003cb9:	66 83 fb 5c          	cmp    bx,0x5c
c0003cbd:	74 35                	je     c0003cf4 <create_name+0x8a>
c0003cbf:	66 83 fb 2f          	cmp    bx,0x2f
c0003cc3:	74 2f                	je     c0003cf4 <create_name+0x8a>
c0003cc5:	66 83 fb 7f          	cmp    bx,0x7f
c0003cc9:	77 11                	ja     c0003cdc <create_name+0x72>
c0003ccb:	0f b7 d3             	movzx  edx,bx
c0003cce:	b8 92 92 02 c0       	mov    eax,0xc0029292
c0003cd3:	e8 11 e0 ff ff       	call   c0001ce9 <chk_chr>
c0003cd8:	85 c0                	test   eax,eax
c0003cda:	75 ba                	jne    c0003c96 <create_name+0x2c>
c0003cdc:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0003ce2:	77 b2                	ja     c0003c96 <create_name+0x2c>
c0003ce4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003ce8:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0003cec:	46                   	inc    esi
c0003ced:	eb 97                	jmp    c0003c86 <create_name+0x1c>
c0003cef:	40                   	inc    eax
c0003cf0:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003cf4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003cf8:	8a 10                	mov    dl,BYTE PTR [eax]
c0003cfa:	80 fa 2f             	cmp    dl,0x2f
c0003cfd:	74 f0                	je     c0003cef <create_name+0x85>
c0003cff:	80 fa 5c             	cmp    dl,0x5c
c0003d02:	74 eb                	je     c0003cef <create_name+0x85>
c0003d04:	31 db                	xor    ebx,ebx
c0003d06:	eb 02                	jmp    c0003d0a <create_name+0xa0>
c0003d08:	b3 04                	mov    bl,0x4
c0003d0a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003d0e:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0003d11:	85 f6                	test   esi,esi
c0003d13:	74 18                	je     c0003d2d <create_name+0xc3>
c0003d15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d19:	66 8b 44 70 fe       	mov    ax,WORD PTR [eax+esi*2-0x2]
c0003d1e:	66 83 f8 20          	cmp    ax,0x20
c0003d22:	74 06                	je     c0003d2a <create_name+0xc0>
c0003d24:	66 83 f8 2e          	cmp    ax,0x2e
c0003d28:	75 03                	jne    c0003d2d <create_name+0xc3>
c0003d2a:	4e                   	dec    esi
c0003d2b:	eb e4                	jmp    c0003d11 <create_name+0xa7>
c0003d2d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d31:	31 ed                	xor    ebp,ebp
c0003d33:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0003d39:	85 f6                	test   esi,esi
c0003d3b:	0f 84 55 ff ff ff    	je     c0003c96 <create_name+0x2c>
c0003d41:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d45:	8d 55 01             	lea    edx,[ebp+0x1]
c0003d48:	66 8b 04 68          	mov    ax,WORD PTR [eax+ebp*2]
c0003d4c:	66 83 f8 20          	cmp    ax,0x20
c0003d50:	75 04                	jne    c0003d56 <create_name+0xec>
c0003d52:	89 d5                	mov    ebp,edx
c0003d54:	eb eb                	jmp    c0003d41 <create_name+0xd7>
c0003d56:	85 ed                	test   ebp,ebp
c0003d58:	75 06                	jne    c0003d60 <create_name+0xf6>
c0003d5a:	66 83 f8 2e          	cmp    ax,0x2e
c0003d5e:	75 08                	jne    c0003d68 <create_name+0xfe>
c0003d60:	83 cb 03             	or     ebx,0x3
c0003d63:	eb 03                	jmp    c0003d68 <create_name+0xfe>
c0003d65:	4e                   	dec    esi
c0003d66:	74 0c                	je     c0003d74 <create_name+0x10a>
c0003d68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d6c:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0003d72:	75 f1                	jne    c0003d65 <create_name+0xfb>
c0003d74:	b9 0b 00 00 00       	mov    ecx,0xb
c0003d79:	8d 47 3c             	lea    eax,[edi+0x3c]
c0003d7c:	ba 20 00 00 00       	mov    edx,0x20
c0003d81:	e8 35 df ff ff       	call   c0001cbb <mem_set>
c0003d86:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0003d8e:	31 c9                	xor    ecx,ecx
c0003d90:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0003d95:	8d 45 01             	lea    eax,[ebp+0x1]
c0003d98:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0003d9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003da0:	0f b7 2c 68          	movzx  ebp,WORD PTR [eax+ebp*2]
c0003da4:	66 85 ed             	test   bp,bp
c0003da7:	0f 84 30 01 00 00    	je     c0003edd <create_name+0x273>
c0003dad:	66 83 fd 20          	cmp    bp,0x20
c0003db1:	74 10                	je     c0003dc3 <create_name+0x159>
c0003db3:	66 83 fd 2e          	cmp    bp,0x2e
c0003db7:	75 13                	jne    c0003dcc <create_name+0x162>
c0003db9:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003dbd:	0f 84 6b 01 00 00    	je     c0003f2e <create_name+0x2c4>
c0003dc3:	83 cb 03             	or     ebx,0x3
c0003dc6:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0003dca:	eb c9                	jmp    c0003d95 <create_name+0x12b>
c0003dcc:	3b 4c 24 08          	cmp    ecx,DWORD PTR [esp+0x8]
c0003dd0:	73 0b                	jae    c0003ddd <create_name+0x173>
c0003dd2:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003dd6:	75 47                	jne    c0003e1f <create_name+0x1b5>
c0003dd8:	e9 51 01 00 00       	jmp    c0003f2e <create_name+0x2c4>
c0003ddd:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003de2:	75 10                	jne    c0003df4 <create_name+0x18a>
c0003de4:	83 cb 03             	or     ebx,0x3
c0003de7:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003def:	e9 e9 00 00 00       	jmp    c0003edd <create_name+0x273>
c0003df4:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003df8:	74 0d                	je     c0003e07 <create_name+0x19d>
c0003dfa:	83 cb 03             	or     ebx,0x3
c0003dfd:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003e01:	0f 87 d6 00 00 00    	ja     c0003edd <create_name+0x273>
c0003e07:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003e0c:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0003e10:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003e18:	b9 08 00 00 00       	mov    ecx,0x8
c0003e1d:	eb a7                	jmp    c0003dc6 <create_name+0x15c>
c0003e1f:	66 83 fd 7f          	cmp    bp,0x7f
c0003e23:	76 68                	jbe    c0003e8d <create_name+0x223>
c0003e25:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0003e29:	88 da                	mov    dl,bl
c0003e2b:	83 ca 02             	or     edx,0x2
c0003e2e:	88 54 24 18          	mov    BYTE PTR [esp+0x18],dl
c0003e32:	50                   	push   eax
c0003e33:	50                   	push   eax
c0003e34:	68 b5 01 00 00       	push   0x1b5
c0003e39:	55                   	push   ebp
c0003e3a:	e8 48 46 00 00       	call   c0008487 <ff_uni2oem>
c0003e3f:	83 c4 10             	add    esp,0x10
c0003e42:	89 c5                	mov    ebp,eax
c0003e44:	a8 80                	test   al,0x80
c0003e46:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0003e4a:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003e4e:	74 0c                	je     c0003e5c <create_name+0x1f2>
c0003e50:	83 e5 7f             	and    ebp,0x7f
c0003e53:	0f b6 ad e0 91 02 c0 	movzx  ebp,BYTE PTR [ebp-0x3ffd6e20]
c0003e5a:	eb 2a                	jmp    c0003e86 <create_name+0x21c>
c0003e5c:	66 3d ff 00          	cmp    ax,0xff
c0003e60:	76 24                	jbe    c0003e86 <create_name+0x21c>
c0003e62:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003e66:	48                   	dec    eax
c0003e67:	39 c8                	cmp    eax,ecx
c0003e69:	77 0c                	ja     c0003e77 <create_name+0x20d>
c0003e6b:	83 cb 03             	or     ebx,0x3
c0003e6e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003e72:	e9 4f ff ff ff       	jmp    c0003dc6 <create_name+0x15c>
c0003e77:	89 e8                	mov    eax,ebp
c0003e79:	88 d3                	mov    bl,dl
c0003e7b:	66 c1 e8 08          	shr    ax,0x8
c0003e7f:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003e83:	41                   	inc    ecx
c0003e84:	eb 4b                	jmp    c0003ed1 <create_name+0x267>
c0003e86:	88 d3                	mov    bl,dl
c0003e88:	66 85 ed             	test   bp,bp
c0003e8b:	74 19                	je     c0003ea6 <create_name+0x23c>
c0003e8d:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0003e91:	0f b7 d5             	movzx  edx,bp
c0003e94:	b8 9b 92 02 c0       	mov    eax,0xc002929b
c0003e99:	e8 4b de ff ff       	call   c0001ce9 <chk_chr>
c0003e9e:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0003ea2:	85 c0                	test   eax,eax
c0003ea4:	74 0a                	je     c0003eb0 <create_name+0x246>
c0003ea6:	83 cb 03             	or     ebx,0x3
c0003ea9:	bd 5f 00 00 00       	mov    ebp,0x5f
c0003eae:	eb 21                	jmp    c0003ed1 <create_name+0x267>
c0003eb0:	8d 45 bf             	lea    eax,[ebp-0x41]
c0003eb3:	66 83 f8 19          	cmp    ax,0x19
c0003eb7:	77 07                	ja     c0003ec0 <create_name+0x256>
c0003eb9:	80 4c 24 0f 02       	or     BYTE PTR [esp+0xf],0x2
c0003ebe:	eb 11                	jmp    c0003ed1 <create_name+0x267>
c0003ec0:	8d 45 9f             	lea    eax,[ebp-0x61]
c0003ec3:	66 83 f8 19          	cmp    ax,0x19
c0003ec7:	77 08                	ja     c0003ed1 <create_name+0x267>
c0003ec9:	80 4c 24 0f 01       	or     BYTE PTR [esp+0xf],0x1
c0003ece:	83 ed 20             	sub    ebp,0x20
c0003ed1:	89 e8                	mov    eax,ebp
c0003ed3:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003ed7:	41                   	inc    ecx
c0003ed8:	e9 e9 fe ff ff       	jmp    c0003dc6 <create_name+0x15c>
c0003edd:	80 7f 3c e5          	cmp    BYTE PTR [edi+0x3c],0xe5
c0003ee1:	75 04                	jne    c0003ee7 <create_name+0x27d>
c0003ee3:	c6 47 3c 05          	mov    BYTE PTR [edi+0x3c],0x5
c0003ee7:	83 7c 24 08 08       	cmp    DWORD PTR [esp+0x8],0x8
c0003eec:	75 05                	jne    c0003ef3 <create_name+0x289>
c0003eee:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003ef3:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003ef7:	83 e0 0c             	and    eax,0xc
c0003efa:	3c 0c                	cmp    al,0xc
c0003efc:	74 0b                	je     c0003f09 <create_name+0x29f>
c0003efe:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003f02:	83 e0 03             	and    eax,0x3
c0003f05:	3c 03                	cmp    al,0x3
c0003f07:	75 05                	jne    c0003f0e <create_name+0x2a4>
c0003f09:	83 cb 02             	or     ebx,0x2
c0003f0c:	eb 19                	jmp    c0003f27 <create_name+0x2bd>
c0003f0e:	f6 c3 02             	test   bl,0x2
c0003f11:	75 14                	jne    c0003f27 <create_name+0x2bd>
c0003f13:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0003f18:	74 03                	je     c0003f1d <create_name+0x2b3>
c0003f1a:	83 cb 10             	or     ebx,0x10
c0003f1d:	f6 44 24 0f 04       	test   BYTE PTR [esp+0xf],0x4
c0003f22:	74 03                	je     c0003f27 <create_name+0x2bd>
c0003f24:	83 cb 08             	or     ebx,0x8
c0003f27:	88 5f 47             	mov    BYTE PTR [edi+0x47],bl
c0003f2a:	31 c0                	xor    eax,eax
c0003f2c:	eb 10                	jmp    c0003f3e <create_name+0x2d4>
c0003f2e:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003f33:	0f 85 ce fe ff ff    	jne    c0003e07 <create_name+0x19d>
c0003f39:	e9 a6 fe ff ff       	jmp    c0003de4 <create_name+0x17a>
c0003f3e:	83 c4 3c             	add    esp,0x3c
c0003f41:	5b                   	pop    ebx
c0003f42:	5e                   	pop    esi
c0003f43:	5f                   	pop    edi
c0003f44:	5d                   	pop    ebp
c0003f45:	c3                   	ret    

c0003f46 <xname_sum>:
c0003f46:	56                   	push   esi
c0003f47:	53                   	push   ebx
c0003f48:	89 c6                	mov    esi,eax
c0003f4a:	51                   	push   ecx
c0003f4b:	31 db                	xor    ebx,ebx
c0003f4d:	83 c6 02             	add    esi,0x2
c0003f50:	0f b7 46 fe          	movzx  eax,WORD PTR [esi-0x2]
c0003f54:	66 85 c0             	test   ax,ax
c0003f57:	74 1f                	je     c0003f78 <xname_sum+0x32>
c0003f59:	83 ec 0c             	sub    esp,0xc
c0003f5c:	66 d1 cb             	ror    bx,1
c0003f5f:	50                   	push   eax
c0003f60:	e8 1e 46 00 00       	call   c0008583 <ff_wtoupper>
c0003f65:	83 c4 10             	add    esp,0x10
c0003f68:	0f b6 d0             	movzx  edx,al
c0003f6b:	66 c1 e8 08          	shr    ax,0x8
c0003f6f:	01 d3                	add    ebx,edx
c0003f71:	66 d1 cb             	ror    bx,1
c0003f74:	01 c3                	add    ebx,eax
c0003f76:	eb d5                	jmp    c0003f4d <xname_sum+0x7>
c0003f78:	89 d8                	mov    eax,ebx
c0003f7a:	5a                   	pop    edx
c0003f7b:	5b                   	pop    ebx
c0003f7c:	5e                   	pop    esi
c0003f7d:	c3                   	ret    

c0003f7e <create_xdir>:
c0003f7e:	55                   	push   ebp
c0003f7f:	b9 40 00 00 00       	mov    ecx,0x40
c0003f84:	57                   	push   edi
c0003f85:	bd 01 00 00 00       	mov    ebp,0x1
c0003f8a:	56                   	push   esi
c0003f8b:	31 ff                	xor    edi,edi
c0003f8d:	53                   	push   ebx
c0003f8e:	be 40 00 00 00       	mov    esi,0x40
c0003f93:	89 c3                	mov    ebx,eax
c0003f95:	83 ec 1c             	sub    esp,0x1c
c0003f98:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003f9c:	31 d2                	xor    edx,edx
c0003f9e:	e8 18 dd ff ff       	call   c0001cbb <mem_set>
c0003fa3:	c6 03 85             	mov    BYTE PTR [ebx],0x85
c0003fa6:	c6 43 20 c0          	mov    BYTE PTR [ebx+0x20],0xc0
c0003faa:	31 c9                	xor    ecx,ecx
c0003fac:	8d 46 01             	lea    eax,[esi+0x1]
c0003faf:	c6 04 33 c1          	mov    BYTE PTR [ebx+esi*1],0xc1
c0003fb3:	83 c6 02             	add    esi,0x2
c0003fb6:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0003fba:	66 85 ed             	test   bp,bp
c0003fbd:	74 12                	je     c0003fd1 <create_xdir+0x53>
c0003fbf:	0f b6 c1             	movzx  eax,cl
c0003fc2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003fc6:	66 8b 2c 42          	mov    bp,WORD PTR [edx+eax*2]
c0003fca:	66 83 fd 01          	cmp    bp,0x1
c0003fce:	80 d9 ff             	sbb    cl,0xff
c0003fd1:	8d 04 33             	lea    eax,[ebx+esi*1]
c0003fd4:	0f b7 d5             	movzx  edx,bp
c0003fd7:	83 c6 02             	add    esi,0x2
c0003fda:	e8 ba dc ff ff       	call   c0001c99 <st_word>
c0003fdf:	f7 c6 1f 00 00 00    	test   esi,0x1f
c0003fe5:	75 d3                	jne    c0003fba <create_xdir+0x3c>
c0003fe7:	8d 47 01             	lea    eax,[edi+0x1]
c0003fea:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003fee:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0003ff2:	0f b6 c1             	movzx  eax,cl
c0003ff5:	66 83 3c 42 00       	cmp    WORD PTR [edx+eax*2],0x0
c0003ffa:	74 07                	je     c0004003 <create_xdir+0x85>
c0003ffc:	0f b6 7c 24 0f       	movzx  edi,BYTE PTR [esp+0xf]
c0004001:	eb a9                	jmp    c0003fac <create_xdir+0x2e>
c0004003:	8d 47 02             	lea    eax,[edi+0x2]
c0004006:	88 4b 23             	mov    BYTE PTR [ebx+0x23],cl
c0004009:	88 43 01             	mov    BYTE PTR [ebx+0x1],al
c000400c:	89 d0                	mov    eax,edx
c000400e:	e8 33 ff ff ff       	call   c0003f46 <xname_sum>
c0004013:	83 c4 1c             	add    esp,0x1c
c0004016:	0f b7 d0             	movzx  edx,ax
c0004019:	8d 43 24             	lea    eax,[ebx+0x24]
c000401c:	5b                   	pop    ebx
c000401d:	5e                   	pop    esi
c000401e:	5f                   	pop    edi
c000401f:	5d                   	pop    ebp
c0004020:	e9 74 dc ff ff       	jmp    c0001c99 <st_word>

c0004025 <cmp_lfn>:
c0004025:	55                   	push   ebp
c0004026:	57                   	push   edi
c0004027:	89 d7                	mov    edi,edx
c0004029:	56                   	push   esi
c000402a:	53                   	push   ebx
c000402b:	83 ec 1c             	sub    esp,0x1c
c000402e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004032:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004035:	e8 ed db ff ff       	call   c0001c27 <ld_word>
c000403a:	66 85 c0             	test   ax,ax
c000403d:	74 07                	je     c0004046 <cmp_lfn+0x21>
c000403f:	31 c0                	xor    eax,eax
c0004041:	e9 9a 00 00 00       	jmp    c00040e0 <cmp_lfn+0xbb>
c0004046:	8a 1f                	mov    bl,BYTE PTR [edi]
c0004048:	bd 01 00 00 00       	mov    ebp,0x1
c000404d:	83 e3 3f             	and    ebx,0x3f
c0004050:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0004058:	4b                   	dec    ebx
c0004059:	6b db 0d             	imul   ebx,ebx,0xd
c000405c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004060:	0f b6 80 60 92 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd6da0]
c0004067:	01 f8                	add    eax,edi
c0004069:	e8 b9 db ff ff       	call   c0001c27 <ld_word>
c000406e:	66 85 ed             	test   bp,bp
c0004071:	89 c6                	mov    esi,eax
c0004073:	74 3c                	je     c00040b1 <cmp_lfn+0x8c>
c0004075:	81 fb ff 00 00 00    	cmp    ebx,0xff
c000407b:	77 c2                	ja     c000403f <cmp_lfn+0x1a>
c000407d:	83 ec 0c             	sub    esp,0xc
c0004080:	0f b7 c0             	movzx  eax,ax
c0004083:	50                   	push   eax
c0004084:	e8 fa 44 00 00       	call   c0008583 <ff_wtoupper>
c0004089:	89 c5                	mov    ebp,eax
c000408b:	8d 43 01             	lea    eax,[ebx+0x1]
c000408e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0004092:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004096:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c000409a:	89 04 24             	mov    DWORD PTR [esp],eax
c000409d:	e8 e1 44 00 00       	call   c0008583 <ff_wtoupper>
c00040a2:	83 c4 10             	add    esp,0x10
c00040a5:	39 c5                	cmp    ebp,eax
c00040a7:	75 96                	jne    c000403f <cmp_lfn+0x1a>
c00040a9:	89 f5                	mov    ebp,esi
c00040ab:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00040af:	eb 04                	jmp    c00040b5 <cmp_lfn+0x90>
c00040b1:	66 46                	inc    si
c00040b3:	75 8a                	jne    c000403f <cmp_lfn+0x1a>
c00040b5:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c00040b9:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c00040be:	75 9c                	jne    c000405c <cmp_lfn+0x37>
c00040c0:	f6 07 40             	test   BYTE PTR [edi],0x40
c00040c3:	74 16                	je     c00040db <cmp_lfn+0xb6>
c00040c5:	66 85 ed             	test   bp,bp
c00040c8:	74 11                	je     c00040db <cmp_lfn+0xb6>
c00040ca:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00040ce:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c00040d3:	0f 94 c0             	sete   al
c00040d6:	0f b6 c0             	movzx  eax,al
c00040d9:	eb 05                	jmp    c00040e0 <cmp_lfn+0xbb>
c00040db:	b8 01 00 00 00       	mov    eax,0x1
c00040e0:	83 c4 1c             	add    esp,0x1c
c00040e3:	5b                   	pop    ebx
c00040e4:	5e                   	pop    esi
c00040e5:	5f                   	pop    edi
c00040e6:	5d                   	pop    ebp
c00040e7:	c3                   	ret    

c00040e8 <dir_find>:
c00040e8:	55                   	push   ebp
c00040e9:	31 d2                	xor    edx,edx
c00040eb:	57                   	push   edi
c00040ec:	56                   	push   esi
c00040ed:	53                   	push   ebx
c00040ee:	89 c3                	mov    ebx,eax
c00040f0:	83 ec 1c             	sub    esp,0x1c
c00040f3:	8b 30                	mov    esi,DWORD PTR [eax]
c00040f5:	e8 89 f0 ff ff       	call   c0003183 <dir_sdi>
c00040fa:	89 04 24             	mov    DWORD PTR [esp],eax
c00040fd:	85 c0                	test   eax,eax
c00040ff:	0f 85 9e 01 00 00    	jne    c00042a3 <dir_find+0x1bb>
c0004105:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0004108:	0f 85 8d 00 00 00    	jne    c000419b <dir_find+0xb3>
c000410e:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0004111:	e8 30 fe ff ff       	call   c0003f46 <xname_sum>
c0004116:	89 c7                	mov    edi,eax
c0004118:	31 d2                	xor    edx,edx
c000411a:	89 d8                	mov    eax,ebx
c000411c:	e8 72 f8 ff ff       	call   c0003993 <dir_read>
c0004121:	85 c0                	test   eax,eax
c0004123:	0f 85 5e 01 00 00    	jne    c0004287 <dir_find+0x19f>
c0004129:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c000412c:	8d 41 24             	lea    eax,[ecx+0x24]
c000412f:	e8 f3 da ff ff       	call   c0001c27 <ld_word>
c0004134:	66 39 f8             	cmp    ax,di
c0004137:	75 df                	jne    c0004118 <dir_find+0x30>
c0004139:	8a 41 23             	mov    al,BYTE PTR [ecx+0x23]
c000413c:	31 ed                	xor    ebp,ebp
c000413e:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0004142:	ba 40 00 00 00       	mov    edx,0x40
c0004147:	89 e9                	mov    ecx,ebp
c0004149:	38 4c 24 0b          	cmp    BYTE PTR [esp+0xb],cl
c000414d:	0f 84 42 01 00 00    	je     c0004295 <dir_find+0x1ad>
c0004153:	f6 c2 1f             	test   dl,0x1f
c0004156:	75 03                	jne    c000415b <dir_find+0x73>
c0004158:	83 c2 02             	add    edx,0x2
c000415b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000415f:	89 d0                	mov    eax,edx
c0004161:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c0004164:	e8 be da ff ff       	call   c0001c27 <ld_word>
c0004169:	83 ec 0c             	sub    esp,0xc
c000416c:	0f b7 c0             	movzx  eax,ax
c000416f:	50                   	push   eax
c0004170:	e8 0e 44 00 00       	call   c0008583 <ff_wtoupper>
c0004175:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0004179:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000417c:	0f b7 04 68          	movzx  eax,WORD PTR [eax+ebp*2]
c0004180:	89 04 24             	mov    DWORD PTR [esp],eax
c0004183:	e8 fb 43 00 00       	call   c0008583 <ff_wtoupper>
c0004188:	83 c4 10             	add    esp,0x10
c000418b:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c000418f:	75 87                	jne    c0004118 <dir_find+0x30>
c0004191:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004195:	45                   	inc    ebp
c0004196:	83 c2 02             	add    edx,0x2
c0004199:	eb ac                	jmp    c0004147 <dir_find+0x5f>
c000419b:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00041a2:	c6 44 24 04 ff       	mov    BYTE PTR [esp+0x4],0xff
c00041a7:	bf ff ff ff ff       	mov    edi,0xffffffff
c00041ac:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00041af:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00041b2:	89 f0                	mov    eax,esi
c00041b4:	e8 4c e2 ff ff       	call   c0002405 <move_window>
c00041b9:	85 c0                	test   eax,eax
c00041bb:	0f 85 c6 00 00 00    	jne    c0004287 <dir_find+0x19f>
c00041c1:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c00041c4:	8a 4d 00             	mov    cl,BYTE PTR [ebp+0x0]
c00041c7:	84 c9                	test   cl,cl
c00041c9:	0f 84 bd 00 00 00    	je     c000428c <dir_find+0x1a4>
c00041cf:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c00041d2:	88 d0                	mov    al,dl
c00041d4:	83 e0 3f             	and    eax,0x3f
c00041d7:	80 f9 e5             	cmp    cl,0xe5
c00041da:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c00041dd:	0f 84 87 00 00 00    	je     c000426a <dir_find+0x182>
c00041e3:	80 e2 08             	and    dl,0x8
c00041e6:	74 06                	je     c00041ee <dir_find+0x106>
c00041e8:	3c 0f                	cmp    al,0xf
c00041ea:	75 7e                	jne    c000426a <dir_find+0x182>
c00041ec:	eb 04                	jmp    c00041f2 <dir_find+0x10a>
c00041ee:	3c 0f                	cmp    al,0xf
c00041f0:	75 4c                	jne    c000423e <dir_find+0x156>
c00041f2:	f6 43 47 40          	test   BYTE PTR [ebx+0x47],0x40
c00041f6:	75 7e                	jne    c0004276 <dir_find+0x18e>
c00041f8:	f6 c1 40             	test   cl,0x40
c00041fb:	74 12                	je     c000420f <dir_find+0x127>
c00041fd:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0004200:	83 e1 bf             	and    ecx,0xffffffbf
c0004203:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0004207:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000420a:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c000420d:	eb 06                	jmp    c0004215 <dir_find+0x12d>
c000420f:	89 f8                	mov    eax,edi
c0004211:	38 c8                	cmp    al,cl
c0004213:	75 5c                	jne    c0004271 <dir_find+0x189>
c0004215:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0004219:	bf ff ff ff ff       	mov    edi,0xffffffff
c000421e:	38 45 0d             	cmp    BYTE PTR [ebp+0xd],al
c0004221:	75 53                	jne    c0004276 <dir_find+0x18e>
c0004223:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c0004227:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000422a:	89 ea                	mov    edx,ebp
c000422c:	e8 f4 fd ff ff       	call   c0004025 <cmp_lfn>
c0004231:	85 c0                	test   eax,eax
c0004233:	74 41                	je     c0004276 <dir_find+0x18e>
c0004235:	8a 4c 24 0b          	mov    cl,BYTE PTR [esp+0xb]
c0004239:	8d 79 ff             	lea    edi,[ecx-0x1]
c000423c:	eb 38                	jmp    c0004276 <dir_find+0x18e>
c000423e:	89 f8                	mov    eax,edi
c0004240:	84 c0                	test   al,al
c0004242:	75 0d                	jne    c0004251 <dir_find+0x169>
c0004244:	89 e8                	mov    eax,ebp
c0004246:	e8 98 de ff ff       	call   c00020e3 <sum_sfn>
c000424b:	3a 44 24 04          	cmp    al,BYTE PTR [esp+0x4]
c000424f:	74 52                	je     c00042a3 <dir_find+0x1bb>
c0004251:	f6 43 47 01          	test   BYTE PTR [ebx+0x47],0x1
c0004255:	75 13                	jne    c000426a <dir_find+0x182>
c0004257:	8d 53 3c             	lea    edx,[ebx+0x3c]
c000425a:	b9 0b 00 00 00       	mov    ecx,0xb
c000425f:	89 e8                	mov    eax,ebp
c0004261:	e8 60 da ff ff       	call   c0001cc6 <mem_cmp>
c0004266:	85 c0                	test   eax,eax
c0004268:	74 39                	je     c00042a3 <dir_find+0x1bb>
c000426a:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0004271:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004276:	31 d2                	xor    edx,edx
c0004278:	89 d8                	mov    eax,ebx
c000427a:	e8 5c f4 ff ff       	call   c00036db <dir_next>
c000427f:	85 c0                	test   eax,eax
c0004281:	0f 84 25 ff ff ff    	je     c00041ac <dir_find+0xc4>
c0004287:	89 04 24             	mov    DWORD PTR [esp],eax
c000428a:	eb 17                	jmp    c00042a3 <dir_find+0x1bb>
c000428c:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0004293:	eb 0e                	jmp    c00042a3 <dir_find+0x1bb>
c0004295:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0004298:	66 83 3c 68 00       	cmp    WORD PTR [eax+ebp*2],0x0
c000429d:	0f 85 75 fe ff ff    	jne    c0004118 <dir_find+0x30>
c00042a3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00042a6:	83 c4 1c             	add    esp,0x1c
c00042a9:	5b                   	pop    ebx
c00042aa:	5e                   	pop    esi
c00042ab:	5f                   	pop    edi
c00042ac:	5d                   	pop    ebp
c00042ad:	c3                   	ret    

c00042ae <dir_register>:
c00042ae:	55                   	push   ebp
c00042af:	57                   	push   edi
c00042b0:	56                   	push   esi
c00042b1:	be 06 00 00 00       	mov    esi,0x6
c00042b6:	53                   	push   ebx
c00042b7:	83 ec 6c             	sub    esp,0x6c
c00042ba:	f6 40 47 a0          	test   BYTE PTR [eax+0x47],0xa0
c00042be:	0f 85 62 02 00 00    	jne    c0004526 <dir_register+0x278>
c00042c4:	8b 28                	mov    ebp,DWORD PTR [eax]
c00042c6:	31 ff                	xor    edi,edi
c00042c8:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00042cb:	66 83 3c 7a 00       	cmp    WORD PTR [edx+edi*2],0x0
c00042d0:	74 03                	je     c00042d5 <dir_register+0x27>
c00042d2:	47                   	inc    edi
c00042d3:	eb f6                	jmp    c00042cb <dir_register+0x1d>
c00042d5:	89 c3                	mov    ebx,eax
c00042d7:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c00042db:	0f 85 e1 00 00 00    	jne    c00043c2 <dir_register+0x114>
c00042e1:	83 c7 0e             	add    edi,0xe
c00042e4:	b9 0f 00 00 00       	mov    ecx,0xf
c00042e9:	89 f8                	mov    eax,edi
c00042eb:	31 d2                	xor    edx,edx
c00042ed:	f7 f1                	div    ecx
c00042ef:	8d 50 02             	lea    edx,[eax+0x2]
c00042f2:	89 c7                	mov    edi,eax
c00042f4:	89 d8                	mov    eax,ebx
c00042f6:	e8 12 f8 ff ff       	call   c0003b0d <dir_alloc>
c00042fb:	89 c6                	mov    esi,eax
c00042fd:	85 c0                	test   eax,eax
c00042ff:	0f 85 21 02 00 00    	jne    c0004526 <dir_register+0x278>
c0004305:	81 c7 01 00 00 08    	add    edi,0x8000001
c000430b:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000430e:	c1 e7 05             	shl    edi,0x5
c0004311:	29 f8                	sub    eax,edi
c0004313:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0004316:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c0004319:	a8 04                	test   al,0x4
c000431b:	0f 84 91 00 00 00    	je     c00043b2 <dir_register+0x104>
c0004321:	83 e0 fb             	and    eax,0xfffffffb
c0004324:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004327:	89 d8                	mov    eax,ebx
c0004329:	e8 25 ec ff ff       	call   c0002f53 <fill_first_frag>
c000432e:	85 c0                	test   eax,eax
c0004330:	0f 85 ee 01 00 00    	jne    c0004524 <dir_register+0x276>
c0004336:	83 c9 ff             	or     ecx,0xffffffff
c0004339:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000433c:	89 d8                	mov    eax,ebx
c000433e:	e8 db eb ff ff       	call   c0002f1e <fill_last_frag>
c0004343:	85 c0                	test   eax,eax
c0004345:	0f 85 d9 01 00 00    	jne    c0004524 <dir_register+0x276>
c000434b:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000434f:	74 61                	je     c00043b2 <dir_register+0x104>
c0004351:	89 da                	mov    edx,ebx
c0004353:	8d 44 24 14          	lea    eax,[esp+0x14]
c0004357:	e8 ea f5 ff ff       	call   c0003946 <load_obj_xdir>
c000435c:	85 c0                	test   eax,eax
c000435e:	0f 85 c0 01 00 00    	jne    c0004524 <dir_register+0x276>
c0004364:	0f b7 55 0a          	movzx  edx,WORD PTR [ebp+0xa]
c0004368:	31 c9                	xor    ecx,ecx
c000436a:	c1 e2 09             	shl    edx,0x9
c000436d:	03 53 0c             	add    edx,DWORD PTR [ebx+0xc]
c0004370:	13 4b 10             	adc    ecx,DWORD PTR [ebx+0x10]
c0004373:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0004376:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c0004379:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c000437c:	83 c0 38             	add    eax,0x38
c000437f:	e8 1c d9 ff ff       	call   c0001ca0 <st_qword>
c0004384:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0004387:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000438a:	83 c0 28             	add    eax,0x28
c000438d:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0004390:	e8 0b d9 ff ff       	call   c0001ca0 <st_qword>
c0004395:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c0004398:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c000439b:	83 c8 01             	or     eax,0x1
c000439e:	88 42 21             	mov    BYTE PTR [edx+0x21],al
c00043a1:	8d 44 24 14          	lea    eax,[esp+0x14]
c00043a5:	e8 db f7 ff ff       	call   c0003b85 <store_xdir>
c00043aa:	85 c0                	test   eax,eax
c00043ac:	0f 85 72 01 00 00    	jne    c0004524 <dir_register+0x276>
c00043b2:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00043b5:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00043b8:	e8 c1 fb ff ff       	call   c0003f7e <create_xdir>
c00043bd:	e9 64 01 00 00       	jmp    c0004526 <dir_register+0x278>
c00043c2:	8d 40 3c             	lea    eax,[eax+0x3c]
c00043c5:	b9 0c 00 00 00       	mov    ecx,0xc
c00043ca:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00043ce:	89 c2                	mov    edx,eax
c00043d0:	8d 44 24 14          	lea    eax,[esp+0x14]
c00043d4:	e8 cd d8 ff ff       	call   c0001ca6 <mem_cpy>
c00043d9:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c00043de:	74 58                	je     c0004438 <dir_register+0x18a>
c00043e0:	c6 43 47 40          	mov    BYTE PTR [ebx+0x47],0x40
c00043e4:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c00043ec:	83 ec 0c             	sub    esp,0xc
c00043ef:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00043f2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00043f6:	8d 54 24 24          	lea    edx,[esp+0x24]
c00043fa:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00043fe:	e8 24 dc ff ff       	call   c0002027 <gen_numname>
c0004403:	89 d8                	mov    eax,ebx
c0004405:	e8 de fc ff ff       	call   c00040e8 <dir_find>
c000440a:	83 c4 10             	add    esp,0x10
c000440d:	89 c6                	mov    esi,eax
c000440f:	85 c0                	test   eax,eax
c0004411:	75 15                	jne    c0004428 <dir_register+0x17a>
c0004413:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0004417:	83 7c 24 0c 64       	cmp    DWORD PTR [esp+0xc],0x64
c000441c:	75 ce                	jne    c00043ec <dir_register+0x13e>
c000441e:	be 07 00 00 00       	mov    esi,0x7
c0004423:	e9 fe 00 00 00       	jmp    c0004526 <dir_register+0x278>
c0004428:	83 f8 04             	cmp    eax,0x4
c000442b:	0f 85 f5 00 00 00    	jne    c0004526 <dir_register+0x278>
c0004431:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0004435:	88 43 47             	mov    BYTE PTR [ebx+0x47],al
c0004438:	b9 01 00 00 00       	mov    ecx,0x1
c000443d:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c0004442:	74 0f                	je     c0004453 <dir_register+0x1a5>
c0004444:	b9 0d 00 00 00       	mov    ecx,0xd
c0004449:	8d 47 0c             	lea    eax,[edi+0xc]
c000444c:	31 d2                	xor    edx,edx
c000444e:	f7 f1                	div    ecx
c0004450:	8d 48 01             	lea    ecx,[eax+0x1]
c0004453:	89 ca                	mov    edx,ecx
c0004455:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004459:	89 d8                	mov    eax,ebx
c000445b:	e8 ad f6 ff ff       	call   c0003b0d <dir_alloc>
c0004460:	89 c6                	mov    esi,eax
c0004462:	85 c0                	test   eax,eax
c0004464:	0f 85 bc 00 00 00    	jne    c0004526 <dir_register+0x278>
c000446a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000446e:	49                   	dec    ecx
c000446f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004473:	74 6a                	je     c00044df <dir_register+0x231>
c0004475:	89 c8                	mov    eax,ecx
c0004477:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c000447a:	c1 e0 05             	shl    eax,0x5
c000447d:	29 c2                	sub    edx,eax
c000447f:	89 d8                	mov    eax,ebx
c0004481:	e8 fd ec ff ff       	call   c0003183 <dir_sdi>
c0004486:	89 c6                	mov    esi,eax
c0004488:	85 c0                	test   eax,eax
c000448a:	0f 85 96 00 00 00    	jne    c0004526 <dir_register+0x278>
c0004490:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004494:	e8 4a dc ff ff       	call   c00020e3 <sum_sfn>
c0004499:	0f b6 f8             	movzx  edi,al
c000449c:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000449f:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00044a2:	89 e8                	mov    eax,ebp
c00044a4:	e8 5c df ff ff       	call   c0002405 <move_window>
c00044a9:	89 c6                	mov    esi,eax
c00044ab:	85 c0                	test   eax,eax
c00044ad:	75 77                	jne    c0004526 <dir_register+0x278>
c00044af:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c00044b4:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00044b7:	83 ec 0c             	sub    esp,0xc
c00044ba:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00044bd:	57                   	push   edi
c00044be:	e8 e0 da ff ff       	call   c0001fa3 <put_lfn>
c00044c3:	31 d2                	xor    edx,edx
c00044c5:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c00044c9:	89 d8                	mov    eax,ebx
c00044cb:	e8 0b f2 ff ff       	call   c00036db <dir_next>
c00044d0:	83 c4 10             	add    esp,0x10
c00044d3:	89 c6                	mov    esi,eax
c00044d5:	85 c0                	test   eax,eax
c00044d7:	75 4d                	jne    c0004526 <dir_register+0x278>
c00044d9:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
c00044dd:	75 bd                	jne    c000449c <dir_register+0x1ee>
c00044df:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00044e2:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00044e5:	89 e8                	mov    eax,ebp
c00044e7:	e8 19 df ff ff       	call   c0002405 <move_window>
c00044ec:	89 c6                	mov    esi,eax
c00044ee:	85 c0                	test   eax,eax
c00044f0:	75 34                	jne    c0004526 <dir_register+0x278>
c00044f2:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00044f5:	b9 20 00 00 00       	mov    ecx,0x20
c00044fa:	31 d2                	xor    edx,edx
c00044fc:	e8 ba d7 ff ff       	call   c0001cbb <mem_set>
c0004501:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0004504:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004508:	b9 0b 00 00 00       	mov    ecx,0xb
c000450d:	e8 94 d7 ff ff       	call   c0001ca6 <mem_cpy>
c0004512:	8a 43 47             	mov    al,BYTE PTR [ebx+0x47]
c0004515:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0004518:	83 e0 18             	and    eax,0x18
c000451b:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c000451e:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c0004522:	eb 02                	jmp    c0004526 <dir_register+0x278>
c0004524:	89 c6                	mov    esi,eax
c0004526:	83 c4 6c             	add    esp,0x6c
c0004529:	89 f0                	mov    eax,esi
c000452b:	5b                   	pop    ebx
c000452c:	5e                   	pop    esi
c000452d:	5f                   	pop    edi
c000452e:	5d                   	pop    ebp
c000452f:	c3                   	ret    

c0004530 <sync_fs>:
c0004530:	56                   	push   esi
c0004531:	53                   	push   ebx
c0004532:	53                   	push   ebx
c0004533:	89 c3                	mov    ebx,eax
c0004535:	e8 37 de ff ff       	call   c0002371 <sync_window>
c000453a:	85 c0                	test   eax,eax
c000453c:	0f 85 b1 00 00 00    	jne    c00045f3 <sync_fs+0xc3>
c0004542:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0004545:	0f 85 8e 00 00 00    	jne    c00045d9 <sync_fs+0xa9>
c000454b:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c000454f:	0f 85 84 00 00 00    	jne    c00045d9 <sync_fs+0xa9>
c0004555:	b9 00 02 00 00       	mov    ecx,0x200
c000455a:	8d 73 54             	lea    esi,[ebx+0x54]
c000455d:	31 d2                	xor    edx,edx
c000455f:	89 f0                	mov    eax,esi
c0004561:	e8 55 d7 ff ff       	call   c0001cbb <mem_set>
c0004566:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c000456c:	ba 55 aa 00 00       	mov    edx,0xaa55
c0004571:	e8 23 d7 ff ff       	call   c0001c99 <st_word>
c0004576:	ba 52 52 61 41       	mov    edx,0x41615252
c000457b:	89 f0                	mov    eax,esi
c000457d:	e8 1b d7 ff ff       	call   c0001c9d <st_dword>
c0004582:	8d 83 38 02 00 00    	lea    eax,[ebx+0x238]
c0004588:	ba 72 72 41 61       	mov    edx,0x61417272
c000458d:	e8 0b d7 ff ff       	call   c0001c9d <st_dword>
c0004592:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004595:	8d 83 3c 02 00 00    	lea    eax,[ebx+0x23c]
c000459b:	e8 fd d6 ff ff       	call   c0001c9d <st_dword>
c00045a0:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00045a3:	8d 83 40 02 00 00    	lea    eax,[ebx+0x240]
c00045a9:	e8 ef d6 ff ff       	call   c0001c9d <st_dword>
c00045ae:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00045b1:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00045b4:	83 c0 01             	add    eax,0x1
c00045b7:	83 d2 00             	adc    edx,0x0
c00045ba:	89 43 4c             	mov    DWORD PTR [ebx+0x4c],eax
c00045bd:	83 ec 0c             	sub    esp,0xc
c00045c0:	89 53 50             	mov    DWORD PTR [ebx+0x50],edx
c00045c3:	6a 01                	push   0x1
c00045c5:	52                   	push   edx
c00045c6:	50                   	push   eax
c00045c7:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00045cb:	56                   	push   esi
c00045cc:	50                   	push   eax
c00045cd:	e8 20 d6 ff ff       	call   c0001bf2 <disk_write>
c00045d2:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c00045d6:	83 c4 20             	add    esp,0x20
c00045d9:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00045dd:	51                   	push   ecx
c00045de:	6a 00                	push   0x0
c00045e0:	6a 00                	push   0x0
c00045e2:	50                   	push   eax
c00045e3:	e8 20 d6 ff ff       	call   c0001c08 <disk_ioctl>
c00045e8:	83 c4 10             	add    esp,0x10
c00045eb:	85 c0                	test   eax,eax
c00045ed:	0f 95 c0             	setne  al
c00045f0:	0f b6 c0             	movzx  eax,al
c00045f3:	5a                   	pop    edx
c00045f4:	5b                   	pop    ebx
c00045f5:	5e                   	pop    esi
c00045f6:	c3                   	ret    

c00045f7 <create_partition>:
c00045f7:	55                   	push   ebp
c00045f8:	0f b6 c0             	movzx  eax,al
c00045fb:	57                   	push   edi
c00045fc:	56                   	push   esi
c00045fd:	53                   	push   ebx
c00045fe:	83 ec 60             	sub    esp,0x60
c0004601:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004605:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0004609:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000460d:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0004611:	8d 44 24 4c          	lea    eax,[esp+0x4c]
c0004615:	50                   	push   eax
c0004616:	6a 01                	push   0x1
c0004618:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000461c:	e8 e7 d5 ff ff       	call   c0001c08 <disk_ioctl>
c0004621:	83 c4 10             	add    esp,0x10
c0004624:	85 c0                	test   eax,eax
c0004626:	74 0a                	je     c0004632 <create_partition+0x3b>
c0004628:	b8 01 00 00 00       	mov    eax,0x1
c000462d:	e9 67 05 00 00       	jmp    c0004b99 <create_partition+0x5a2>
c0004632:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0004636:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c000463a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000463e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0004642:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0004647:	0f 86 ed 03 00 00    	jbe    c0004a3a <create_partition+0x443>
c000464d:	83 c0 df             	add    eax,0xffffffdf
c0004650:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0004658:	83 d2 ff             	adc    edx,0xffffffff
c000465b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000465f:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0004663:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004667:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000466b:	83 c0 bd             	add    eax,0xffffffbd
c000466e:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0004675:	83 d2 ff             	adc    edx,0xffffffff
c0004678:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000467c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0004680:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0004688:	be 22 00 00 00       	mov    esi,0x22
c000468d:	31 ff                	xor    edi,edi
c000468f:	c7 44 24 2c 00 00 21 50 	mov    DWORD PTR [esp+0x2c],0x50210000
c0004697:	c7 44 24 28 ff ff ff ff 	mov    DWORD PTR [esp+0x28],0xffffffff
c000469f:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c00046a7:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00046ab:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00046b1:	75 0e                	jne    c00046c1 <create_partition+0xca>
c00046b3:	b9 00 02 00 00       	mov    ecx,0x200
c00046b8:	31 d2                	xor    edx,edx
c00046ba:	89 d8                	mov    eax,ebx
c00046bc:	e8 fa d5 ff ff       	call   c0001cbb <mem_set>
c00046c1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00046c5:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00046c9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00046cd:	0b 04 24             	or     eax,DWORD PTR [esp]
c00046d0:	0f 84 23 01 00 00    	je     c00047f9 <create_partition+0x202>
c00046d6:	89 f0                	mov    eax,esi
c00046d8:	89 fa                	mov    edx,edi
c00046da:	05 ff 07 00 00       	add    eax,0x7ff
c00046df:	83 d2 00             	adc    edx,0x0
c00046e2:	89 c1                	mov    ecx,eax
c00046e4:	89 d7                	mov    edi,edx
c00046e6:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c00046ec:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00046f0:	89 ce                	mov    esi,ecx
c00046f2:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c00046f6:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00046fa:	8b 54 c8 04          	mov    edx,DWORD PTR [eax+ecx*8+0x4]
c00046fe:	8b 04 c8             	mov    eax,DWORD PTR [eax+ecx*8]
c0004701:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0004705:	89 04 24             	mov    DWORD PTR [esp],eax
c0004708:	b8 64 00 00 00       	mov    eax,0x64
c000470d:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004710:	b8 00 00 00 00       	mov    eax,0x0
c0004715:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0004719:	72 41                	jb     c000475c <create_partition+0x165>
c000471b:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000471f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004723:	0f af 0c 24          	imul   ecx,DWORD PTR [esp]
c0004727:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c000472c:	01 c1                	add    ecx,eax
c000472e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0004732:	f7 24 24             	mul    DWORD PTR [esp]
c0004735:	6a 00                	push   0x0
c0004737:	01 ca                	add    edx,ecx
c0004739:	6a 64                	push   0x64
c000473b:	52                   	push   edx
c000473c:	50                   	push   eax
c000473d:	e8 d2 1f 02 00       	call   c0026714 <__udivdi3>
c0004742:	83 c4 10             	add    esp,0x10
c0004745:	05 ff 07 00 00       	add    eax,0x7ff
c000474a:	83 d2 00             	adc    edx,0x0
c000474d:	89 c1                	mov    ecx,eax
c000474f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0004753:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0004759:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000475c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000475f:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0004763:	01 f0                	add    eax,esi
c0004765:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004769:	11 fa                	adc    edx,edi
c000476b:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c000476f:	19 d1                	sbb    ecx,edx
c0004771:	73 2e                	jae    c00047a1 <create_partition+0x1aa>
c0004773:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0004777:	89 f8                	mov    eax,edi
c0004779:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0004780:	1b 44 24 14          	sbb    eax,DWORD PTR [esp+0x14]
c0004784:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000478c:	73 6b                	jae    c00047f9 <create_partition+0x202>
c000478e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0004792:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0004796:	29 f0                	sub    eax,esi
c0004798:	19 fa                	sbb    edx,edi
c000479a:	89 04 24             	mov    DWORD PTR [esp],eax
c000479d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00047a1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00047a5:	0b 04 24             	or     eax,DWORD PTR [esp]
c00047a8:	74 4f                	je     c00047f9 <create_partition+0x202>
c00047aa:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c00047ad:	b9 10 00 00 00       	mov    ecx,0x10
c00047b2:	ba 70 92 02 c0       	mov    edx,0xc0029270
c00047b7:	e8 ea d4 ff ff       	call   c0001ca6 <mem_cpy>
c00047bc:	8d 54 2b 10          	lea    edx,[ebx+ebp*1+0x10]
c00047c0:	b9 10 00 00 00       	mov    ecx,0x10
c00047c5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00047c9:	e8 2c db ff ff       	call   c00022fa <make_rand>
c00047ce:	89 f2                	mov    edx,esi
c00047d0:	89 f9                	mov    ecx,edi
c00047d2:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00047d6:	8d 44 2b 20          	lea    eax,[ebx+ebp*1+0x20]
c00047da:	e8 c1 d4 ff ff       	call   c0001ca0 <st_qword>
c00047df:	03 34 24             	add    esi,DWORD PTR [esp]
c00047e2:	8d 44 2b 28          	lea    eax,[ebx+ebp*1+0x28]
c00047e6:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c00047ea:	89 f2                	mov    edx,esi
c00047ec:	89 f9                	mov    ecx,edi
c00047ee:	83 c2 ff             	add    edx,0xffffffff
c00047f1:	83 d1 ff             	adc    ecx,0xffffffff
c00047f4:	e8 a7 d4 ff ff       	call   c0001ca0 <st_qword>
c00047f9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00047fd:	83 e8 80             	sub    eax,0xffffff80
c0004800:	89 c5                	mov    ebp,eax
c0004802:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004806:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c000480c:	75 6b                	jne    c0004879 <create_partition+0x282>
c000480e:	45                   	inc    ebp
c000480f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004813:	0f b6 54 2b ff       	movzx  edx,BYTE PTR [ebx+ebp*1-0x1]
c0004818:	e8 39 da ff ff       	call   c0002256 <crc32>
c000481d:	81 fd 00 02 00 00    	cmp    ebp,0x200
c0004823:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0004827:	75 e5                	jne    c000480e <create_partition+0x217>
c0004829:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c000482d:	31 d2                	xor    edx,edx
c000482f:	83 ec 0c             	sub    esp,0xc
c0004832:	c1 ed 09             	shr    ebp,0x9
c0004835:	6a 01                	push   0x1
c0004837:	8d 45 02             	lea    eax,[ebp+0x2]
c000483a:	52                   	push   edx
c000483b:	50                   	push   eax
c000483c:	53                   	push   ebx
c000483d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004841:	e8 ac d3 ff ff       	call   c0001bf2 <disk_write>
c0004846:	83 c4 20             	add    esp,0x20
c0004849:	85 c0                	test   eax,eax
c000484b:	0f 85 d7 fd ff ff    	jne    c0004628 <create_partition+0x31>
c0004851:	83 ec 0c             	sub    esp,0xc
c0004854:	31 d2                	xor    edx,edx
c0004856:	6a 01                	push   0x1
c0004858:	89 e8                	mov    eax,ebp
c000485a:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000485e:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c0004862:	52                   	push   edx
c0004863:	50                   	push   eax
c0004864:	53                   	push   ebx
c0004865:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004869:	e8 84 d3 ff ff       	call   c0001bf2 <disk_write>
c000486e:	83 c4 20             	add    esp,0x20
c0004871:	85 c0                	test   eax,eax
c0004873:	0f 85 af fd ff ff    	jne    c0004628 <create_partition+0x31>
c0004879:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000487d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0004881:	3d 00 40 00 00       	cmp    eax,0x4000
c0004886:	74 0d                	je     c0004895 <create_partition+0x29e>
c0004888:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000488c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004890:	e9 12 fe ff ff       	jmp    c00046a7 <create_partition+0xb0>
c0004895:	31 d2                	xor    edx,edx
c0004897:	b9 00 02 00 00       	mov    ecx,0x200
c000489c:	89 d8                	mov    eax,ebx
c000489e:	8d 6b 20             	lea    ebp,[ebx+0x20]
c00048a1:	e8 15 d4 ff ff       	call   c0001cbb <mem_set>
c00048a6:	8d 7b 48             	lea    edi,[ebx+0x48]
c00048a9:	b9 10 00 00 00       	mov    ecx,0x10
c00048ae:	ba 60 91 02 c0       	mov    edx,0xc0029160
c00048b3:	89 d8                	mov    eax,ebx
c00048b5:	e8 ec d3 ff ff       	call   c0001ca6 <mem_cpy>
c00048ba:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00048be:	8d 43 58             	lea    eax,[ebx+0x58]
c00048c1:	f7 d2                	not    edx
c00048c3:	e8 d5 d3 ff ff       	call   c0001c9d <st_dword>
c00048c8:	8d 43 18             	lea    eax,[ebx+0x18]
c00048cb:	31 c9                	xor    ecx,ecx
c00048cd:	89 04 24             	mov    DWORD PTR [esp],eax
c00048d0:	ba 01 00 00 00       	mov    edx,0x1
c00048d5:	e8 c6 d3 ff ff       	call   c0001ca0 <st_qword>
c00048da:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c00048de:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00048e2:	83 c2 ff             	add    edx,0xffffffff
c00048e5:	89 e8                	mov    eax,ebp
c00048e7:	83 d1 ff             	adc    ecx,0xffffffff
c00048ea:	e8 b1 d3 ff ff       	call   c0001ca0 <st_qword>
c00048ef:	31 c9                	xor    ecx,ecx
c00048f1:	8d 43 28             	lea    eax,[ebx+0x28]
c00048f4:	ba 22 00 00 00       	mov    edx,0x22
c00048f9:	e8 a2 d3 ff ff       	call   c0001ca0 <st_qword>
c00048fe:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0004902:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004906:	83 c2 de             	add    edx,0xffffffde
c0004909:	8d 43 30             	lea    eax,[ebx+0x30]
c000490c:	83 d1 ff             	adc    ecx,0xffffffff
c000490f:	31 f6                	xor    esi,esi
c0004911:	e8 8a d3 ff ff       	call   c0001ca0 <st_qword>
c0004916:	8d 43 54             	lea    eax,[ebx+0x54]
c0004919:	ba 80 00 00 00       	mov    edx,0x80
c000491e:	e8 7a d3 ff ff       	call   c0001c9d <st_dword>
c0004923:	8d 43 50             	lea    eax,[ebx+0x50]
c0004926:	ba 80 00 00 00       	mov    edx,0x80
c000492b:	e8 6d d3 ff ff       	call   c0001c9d <st_dword>
c0004930:	ba 02 00 00 00       	mov    edx,0x2
c0004935:	89 f8                	mov    eax,edi
c0004937:	e8 61 d3 ff ff       	call   c0001c9d <st_dword>
c000493c:	8d 53 38             	lea    edx,[ebx+0x38]
c000493f:	b9 10 00 00 00       	mov    ecx,0x10
c0004944:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0004948:	e8 ad d9 ff ff       	call   c00022fa <make_rand>
c000494d:	83 c8 ff             	or     eax,0xffffffff
c0004950:	46                   	inc    esi
c0004951:	0f b6 54 33 ff       	movzx  edx,BYTE PTR [ebx+esi*1-0x1]
c0004956:	e8 fb d8 ff ff       	call   c0002256 <crc32>
c000495b:	83 fe 5c             	cmp    esi,0x5c
c000495e:	75 f0                	jne    c0004950 <create_partition+0x359>
c0004960:	f7 d0                	not    eax
c0004962:	8d 73 10             	lea    esi,[ebx+0x10]
c0004965:	89 c2                	mov    edx,eax
c0004967:	89 f0                	mov    eax,esi
c0004969:	e8 2f d3 ff ff       	call   c0001c9d <st_dword>
c000496e:	83 ec 0c             	sub    esp,0xc
c0004971:	6a 01                	push   0x1
c0004973:	6a 00                	push   0x0
c0004975:	6a 01                	push   0x1
c0004977:	53                   	push   ebx
c0004978:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000497c:	e8 71 d2 ff ff       	call   c0001bf2 <disk_write>
c0004981:	83 c4 20             	add    esp,0x20
c0004984:	85 c0                	test   eax,eax
c0004986:	0f 85 9c fc ff ff    	jne    c0004628 <create_partition+0x31>
c000498c:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c0004990:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c0004994:	83 c2 ff             	add    edx,0xffffffff
c0004997:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000499a:	83 d1 ff             	adc    ecx,0xffffffff
c000499d:	e8 fe d2 ff ff       	call   c0001ca0 <st_qword>
c00049a2:	ba 01 00 00 00       	mov    edx,0x1
c00049a7:	31 c9                	xor    ecx,ecx
c00049a9:	89 e8                	mov    eax,ebp
c00049ab:	e8 f0 d2 ff ff       	call   c0001ca0 <st_qword>
c00049b0:	89 f8                	mov    eax,edi
c00049b2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00049b6:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00049ba:	31 ff                	xor    edi,edi
c00049bc:	e8 df d2 ff ff       	call   c0001ca0 <st_qword>
c00049c1:	89 f0                	mov    eax,esi
c00049c3:	31 d2                	xor    edx,edx
c00049c5:	e8 d3 d2 ff ff       	call   c0001c9d <st_dword>
c00049ca:	83 c8 ff             	or     eax,0xffffffff
c00049cd:	47                   	inc    edi
c00049ce:	0f b6 54 3b ff       	movzx  edx,BYTE PTR [ebx+edi*1-0x1]
c00049d3:	e8 7e d8 ff ff       	call   c0002256 <crc32>
c00049d8:	83 ff 5c             	cmp    edi,0x5c
c00049db:	75 f0                	jne    c00049cd <create_partition+0x3d6>
c00049dd:	f7 d0                	not    eax
c00049df:	89 c2                	mov    edx,eax
c00049e1:	89 f0                	mov    eax,esi
c00049e3:	e8 b5 d2 ff ff       	call   c0001c9d <st_dword>
c00049e8:	83 ec 0c             	sub    esp,0xc
c00049eb:	6a 01                	push   0x1
c00049ed:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c00049f1:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c00049f5:	83 c0 ff             	add    eax,0xffffffff
c00049f8:	83 d2 ff             	adc    edx,0xffffffff
c00049fb:	52                   	push   edx
c00049fc:	50                   	push   eax
c00049fd:	53                   	push   ebx
c00049fe:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004a02:	e8 eb d1 ff ff       	call   c0001bf2 <disk_write>
c0004a07:	83 c4 20             	add    esp,0x20
c0004a0a:	85 c0                	test   eax,eax
c0004a0c:	0f 85 16 fc ff ff    	jne    c0004628 <create_partition+0x31>
c0004a12:	31 d2                	xor    edx,edx
c0004a14:	89 d8                	mov    eax,ebx
c0004a16:	b9 00 02 00 00       	mov    ecx,0x200
c0004a1b:	e8 9b d2 ff ff       	call   c0001cbb <mem_set>
c0004a20:	8d 83 be 01 00 00    	lea    eax,[ebx+0x1be]
c0004a26:	b9 10 00 00 00       	mov    ecx,0x10
c0004a2b:	ba 70 91 02 c0       	mov    edx,0xc0029170
c0004a30:	e8 71 d2 ff ff       	call   c0001ca6 <mem_cpy>
c0004a35:	e9 21 01 00 00       	jmp    c0004b5b <create_partition+0x564>
c0004a3a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004a3e:	b9 05 00 00 00       	mov    ecx,0x5
c0004a43:	89 04 24             	mov    DWORD PTR [esp],eax
c0004a46:	bf 08 00 00 00       	mov    edi,0x8
c0004a4b:	89 f8                	mov    eax,edi
c0004a4d:	31 d2                	xor    edx,edx
c0004a4f:	0f b6 f0             	movzx  esi,al
c0004a52:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004a55:	f7 f6                	div    esi
c0004a57:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0004a5c:	76 0a                	jbe    c0004a68 <create_partition+0x471>
c0004a5e:	d1 e7                	shl    edi,1
c0004a60:	49                   	dec    ecx
c0004a61:	75 e8                	jne    c0004a4b <create_partition+0x454>
c0004a63:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004a68:	b9 00 02 00 00       	mov    ecx,0x200
c0004a6d:	31 d2                	xor    edx,edx
c0004a6f:	89 d8                	mov    eax,ebx
c0004a71:	8d b3 c6 01 00 00    	lea    esi,[ebx+0x1c6]
c0004a77:	e8 3f d2 ff ff       	call   c0001cbb <mem_set>
c0004a7c:	b9 64 00 00 00       	mov    ecx,0x64
c0004a81:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004a84:	31 d2                	xor    edx,edx
c0004a86:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0004a8e:	f7 f1                	div    ecx
c0004a90:	b9 3f 00 00 00       	mov    ecx,0x3f
c0004a95:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004a99:	89 f8                	mov    eax,edi
c0004a9b:	0f b6 c0             	movzx  eax,al
c0004a9e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0004aa2:	e9 80 00 00 00       	jmp    c0004b27 <create_partition+0x530>
c0004aa7:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004aaa:	29 cf                	sub    edi,ecx
c0004aac:	89 ca                	mov    edx,ecx
c0004aae:	89 f0                	mov    eax,esi
c0004ab0:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004ab5:	e8 e3 d1 ff ff       	call   c0001c9d <st_dword>
c0004aba:	8d 46 04             	lea    eax,[esi+0x4]
c0004abd:	89 fa                	mov    edx,edi
c0004abf:	83 c6 10             	add    esi,0x10
c0004ac2:	e8 d6 d1 ff ff       	call   c0001c9d <st_dword>
c0004ac7:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c0004acb:	31 d2                	xor    edx,edx
c0004acd:	88 46 ec             	mov    BYTE PTR [esi-0x14],al
c0004ad0:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0004ad4:	89 c8                	mov    eax,ecx
c0004ad6:	01 f9                	add    ecx,edi
c0004ad8:	f7 f5                	div    ebp
c0004ada:	89 d5                	mov    ebp,edx
c0004adc:	31 d2                	xor    edx,edx
c0004ade:	45                   	inc    ebp
c0004adf:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004ae3:	88 56 e9             	mov    BYTE PTR [esi-0x17],dl
c0004ae6:	88 46 eb             	mov    BYTE PTR [esi-0x15],al
c0004ae9:	89 c2                	mov    edx,eax
c0004aeb:	8d 41 ff             	lea    eax,[ecx-0x1]
c0004aee:	c1 ea 02             	shr    edx,0x2
c0004af1:	83 e2 c0             	and    edx,0xffffffc0
c0004af4:	09 ea                	or     edx,ebp
c0004af6:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004afb:	88 56 ea             	mov    BYTE PTR [esi-0x16],dl
c0004afe:	31 d2                	xor    edx,edx
c0004b00:	f7 f5                	div    ebp
c0004b02:	89 d7                	mov    edi,edx
c0004b04:	31 d2                	xor    edx,edx
c0004b06:	47                   	inc    edi
c0004b07:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004b0b:	88 56 ed             	mov    BYTE PTR [esi-0x13],dl
c0004b0e:	88 46 ef             	mov    BYTE PTR [esi-0x11],al
c0004b11:	89 c5                	mov    ebp,eax
c0004b13:	c1 ed 02             	shr    ebp,0x2
c0004b16:	83 e5 c0             	and    ebp,0xffffffc0
c0004b19:	09 ef                	or     edi,ebp
c0004b1b:	89 fa                	mov    edx,edi
c0004b1d:	88 56 ee             	mov    BYTE PTR [esi-0x12],dl
c0004b20:	83 7c 24 10 04       	cmp    DWORD PTR [esp+0x10],0x4
c0004b25:	74 34                	je     c0004b5b <create_partition+0x564>
c0004b27:	85 c9                	test   ecx,ecx
c0004b29:	74 30                	je     c0004b5b <create_partition+0x564>
c0004b2b:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0004b2e:	76 2b                	jbe    c0004b5b <create_partition+0x564>
c0004b30:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004b34:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0004b38:	8b 3c f8             	mov    edi,DWORD PTR [eax+edi*8]
c0004b3b:	83 ff 64             	cmp    edi,0x64
c0004b3e:	76 4b                	jbe    c0004b8b <create_partition+0x594>
c0004b40:	89 f8                	mov    eax,edi
c0004b42:	01 c8                	add    eax,ecx
c0004b44:	0f 82 5d ff ff ff    	jb     c0004aa7 <create_partition+0x4b0>
c0004b4a:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004b4d:	0f 87 54 ff ff ff    	ja     c0004aa7 <create_partition+0x4b0>
c0004b53:	85 ff                	test   edi,edi
c0004b55:	0f 85 51 ff ff ff    	jne    c0004aac <create_partition+0x4b5>
c0004b5b:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0004b61:	ba 55 aa 00 00       	mov    edx,0xaa55
c0004b66:	e8 2e d1 ff ff       	call   c0001c99 <st_word>
c0004b6b:	83 ec 0c             	sub    esp,0xc
c0004b6e:	6a 01                	push   0x1
c0004b70:	6a 00                	push   0x0
c0004b72:	6a 00                	push   0x0
c0004b74:	53                   	push   ebx
c0004b75:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004b79:	e8 74 d0 ff ff       	call   c0001bf2 <disk_write>
c0004b7e:	83 c4 20             	add    esp,0x20
c0004b81:	85 c0                	test   eax,eax
c0004b83:	0f 95 c0             	setne  al
c0004b86:	0f b6 c0             	movzx  eax,al
c0004b89:	eb 0e                	jmp    c0004b99 <create_partition+0x5a2>
c0004b8b:	74 07                	je     c0004b94 <create_partition+0x59d>
c0004b8d:	0f af 7c 24 24       	imul   edi,DWORD PTR [esp+0x24]
c0004b92:	eb ac                	jmp    c0004b40 <create_partition+0x549>
c0004b94:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004b97:	eb a7                	jmp    c0004b40 <create_partition+0x549>
c0004b99:	83 c4 5c             	add    esp,0x5c
c0004b9c:	5b                   	pop    ebx
c0004b9d:	5e                   	pop    esi
c0004b9e:	5f                   	pop    edi
c0004b9f:	5d                   	pop    ebp
c0004ba0:	c3                   	ret    

c0004ba1 <get_fileinfo>:
c0004ba1:	55                   	push   ebp
c0004ba2:	57                   	push   edi
c0004ba3:	56                   	push   esi
c0004ba4:	53                   	push   ebx
c0004ba5:	83 ec 1c             	sub    esp,0x1c
c0004ba8:	8b 30                	mov    esi,DWORD PTR [eax]
c0004baa:	c6 42 1a 00          	mov    BYTE PTR [edx+0x1a],0x0
c0004bae:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0004bb2:	8b 48 34             	mov    ecx,DWORD PTR [eax+0x34]
c0004bb5:	0b 48 30             	or     ecx,DWORD PTR [eax+0x30]
c0004bb8:	0f 84 dc 01 00 00    	je     c0004d9a <get_fileinfo+0x1f9>
c0004bbe:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0004bc1:	75 0f                	jne    c0004bd2 <get_fileinfo+0x31>
c0004bc3:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0004bc6:	83 c4 1c             	add    esp,0x1c
c0004bc9:	5b                   	pop    ebx
c0004bca:	5e                   	pop    esi
c0004bcb:	5f                   	pop    edi
c0004bcc:	5d                   	pop    ebp
c0004bcd:	e9 58 d5 ff ff       	jmp    c000212a <get_xfileinfo>
c0004bd2:	89 d3                	mov    ebx,edx
c0004bd4:	89 c6                	mov    esi,eax
c0004bd6:	83 78 48 ff          	cmp    DWORD PTR [eax+0x48],0xffffffff
c0004bda:	74 6a                	je     c0004c46 <get_fileinfo+0xa5>
c0004bdc:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0004be4:	31 ed                	xor    ebp,ebp
c0004be6:	31 ff                	xor    edi,edi
c0004be8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004bec:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004bf0:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0004bf3:	0f b7 14 08          	movzx  edx,WORD PTR [eax+ecx*1]
c0004bf7:	66 85 d2             	test   dx,dx
c0004bfa:	74 3e                	je     c0004c3a <get_fileinfo+0x99>
c0004bfc:	66 85 ed             	test   bp,bp
c0004bff:	75 0c                	jne    c0004c0d <get_fileinfo+0x6c>
c0004c01:	8d 82 00 28 00 00    	lea    eax,[edx+0x2800]
c0004c07:	66 3d ff 07          	cmp    ax,0x7ff
c0004c0b:	76 22                	jbe    c0004c2f <get_fileinfo+0x8e>
c0004c0d:	b9 ff 00 00 00       	mov    ecx,0xff
c0004c12:	89 e8                	mov    eax,ebp
c0004c14:	29 f9                	sub    ecx,edi
c0004c16:	c1 e0 10             	shl    eax,0x10
c0004c19:	09 d0                	or     eax,edx
c0004c1b:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0004c1f:	e8 a3 d1 ff ff       	call   c0001dc7 <put_utf>
c0004c24:	84 c0                	test   al,al
c0004c26:	74 10                	je     c0004c38 <get_fileinfo+0x97>
c0004c28:	0f b6 c0             	movzx  eax,al
c0004c2b:	31 d2                	xor    edx,edx
c0004c2d:	01 c7                	add    edi,eax
c0004c2f:	83 44 24 0c 02       	add    DWORD PTR [esp+0xc],0x2
c0004c34:	89 d5                	mov    ebp,edx
c0004c36:	eb b0                	jmp    c0004be8 <get_fileinfo+0x47>
c0004c38:	31 ff                	xor    edi,edi
c0004c3a:	66 85 ed             	test   bp,bp
c0004c3d:	74 02                	je     c0004c41 <get_fileinfo+0xa0>
c0004c3f:	31 ff                	xor    edi,edi
c0004c41:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0004c46:	31 ff                	xor    edi,edi
c0004c48:	31 c9                	xor    ecx,ecx
c0004c4a:	83 f9 0a             	cmp    ecx,0xa
c0004c4d:	0f 87 ad 00 00 00    	ja     c0004d00 <get_fileinfo+0x15f>
c0004c53:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004c56:	8d 69 01             	lea    ebp,[ecx+0x1]
c0004c59:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
c0004c5d:	66 83 fa 20          	cmp    dx,0x20
c0004c61:	0f 84 92 00 00 00    	je     c0004cf9 <get_fileinfo+0x158>
c0004c67:	66 83 fa 05          	cmp    dx,0x5
c0004c6b:	75 05                	jne    c0004c72 <get_fileinfo+0xd1>
c0004c6d:	ba e5 00 00 00       	mov    edx,0xe5
c0004c72:	83 ff 0b             	cmp    edi,0xb
c0004c75:	77 0b                	ja     c0004c82 <get_fileinfo+0xe1>
c0004c77:	83 fd 09             	cmp    ebp,0x9
c0004c7a:	75 06                	jne    c0004c82 <get_fileinfo+0xe1>
c0004c7c:	c6 44 3b 0d 2e       	mov    BYTE PTR [ebx+edi*1+0xd],0x2e
c0004c81:	47                   	inc    edi
c0004c82:	0f b7 c2             	movzx  eax,dx
c0004c85:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004c89:	e8 6d d0 ff ff       	call   c0001cfb <dbc_1st>
c0004c8e:	85 c0                	test   eax,eax
c0004c90:	74 2f                	je     c0004cc1 <get_fileinfo+0x120>
c0004c92:	83 fd 08             	cmp    ebp,0x8
c0004c95:	74 2a                	je     c0004cc1 <get_fileinfo+0x120>
c0004c97:	83 fd 0b             	cmp    ebp,0xb
c0004c9a:	74 25                	je     c0004cc1 <get_fileinfo+0x120>
c0004c9c:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004c9f:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0004ca3:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0004ca7:	e8 52 d0 ff ff       	call   c0001cfe <dbc_2nd>
c0004cac:	85 c0                	test   eax,eax
c0004cae:	74 11                	je     c0004cc1 <get_fileinfo+0x120>
c0004cb0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004cb4:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0004cb9:	c1 e2 08             	shl    edx,0x8
c0004cbc:	8d 69 02             	lea    ebp,[ecx+0x2]
c0004cbf:	09 c2                	or     edx,eax
c0004cc1:	0f b7 d2             	movzx  edx,dx
c0004cc4:	50                   	push   eax
c0004cc5:	50                   	push   eax
c0004cc6:	68 b5 01 00 00       	push   0x1b5
c0004ccb:	52                   	push   edx
c0004ccc:	e8 46 38 00 00       	call   c0008517 <ff_oem2uni>
c0004cd1:	83 c4 10             	add    esp,0x10
c0004cd4:	66 85 c0             	test   ax,ax
c0004cd7:	75 04                	jne    c0004cdd <get_fileinfo+0x13c>
c0004cd9:	31 ff                	xor    edi,edi
c0004cdb:	eb 23                	jmp    c0004d00 <get_fileinfo+0x15f>
c0004cdd:	b9 0c 00 00 00       	mov    ecx,0xc
c0004ce2:	8d 54 3b 0d          	lea    edx,[ebx+edi*1+0xd]
c0004ce6:	29 f9                	sub    ecx,edi
c0004ce8:	0f b7 c0             	movzx  eax,ax
c0004ceb:	e8 d7 d0 ff ff       	call   c0001dc7 <put_utf>
c0004cf0:	84 c0                	test   al,al
c0004cf2:	74 e5                	je     c0004cd9 <get_fileinfo+0x138>
c0004cf4:	0f b6 c0             	movzx  eax,al
c0004cf7:	01 c7                	add    edi,eax
c0004cf9:	89 e9                	mov    ecx,ebp
c0004cfb:	e9 4a ff ff ff       	jmp    c0004c4a <get_fileinfo+0xa9>
c0004d00:	c6 44 3b 0d 00       	mov    BYTE PTR [ebx+edi*1+0xd],0x0
c0004d05:	80 7b 1a 00          	cmp    BYTE PTR [ebx+0x1a],0x0
c0004d09:	75 54                	jne    c0004d5f <get_fileinfo+0x1be>
c0004d0b:	85 ff                	test   edi,edi
c0004d0d:	75 0b                	jne    c0004d1a <get_fileinfo+0x179>
c0004d0f:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0004d13:	ba 01 00 00 00       	mov    edx,0x1
c0004d18:	eb 33                	jmp    c0004d4d <get_fileinfo+0x1ac>
c0004d1a:	b1 08                	mov    cl,0x8
c0004d1c:	31 d2                	xor    edx,edx
c0004d1e:	66 0f be 44 13 0d    	movsx  ax,BYTE PTR [ebx+edx*1+0xd]
c0004d24:	84 c0                	test   al,al
c0004d26:	74 25                	je     c0004d4d <get_fileinfo+0x1ac>
c0004d28:	66 83 f8 2e          	cmp    ax,0x2e
c0004d2c:	74 16                	je     c0004d44 <get_fileinfo+0x1a3>
c0004d2e:	8d 78 bf             	lea    edi,[eax-0x41]
c0004d31:	66 83 ff 19          	cmp    di,0x19
c0004d35:	77 0f                	ja     c0004d46 <get_fileinfo+0x1a5>
c0004d37:	8b 7e 38             	mov    edi,DWORD PTR [esi+0x38]
c0004d3a:	84 4f 0c             	test   BYTE PTR [edi+0xc],cl
c0004d3d:	74 07                	je     c0004d46 <get_fileinfo+0x1a5>
c0004d3f:	83 c0 20             	add    eax,0x20
c0004d42:	eb 02                	jmp    c0004d46 <get_fileinfo+0x1a5>
c0004d44:	b1 10                	mov    cl,0x10
c0004d46:	88 44 13 1a          	mov    BYTE PTR [ebx+edx*1+0x1a],al
c0004d4a:	42                   	inc    edx
c0004d4b:	eb d1                	jmp    c0004d1e <get_fileinfo+0x17d>
c0004d4d:	c6 44 13 1a 00       	mov    BYTE PTR [ebx+edx*1+0x1a],0x0
c0004d52:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d55:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c0004d59:	75 04                	jne    c0004d5f <get_fileinfo+0x1be>
c0004d5b:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0004d5f:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d62:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c0004d65:	88 43 0c             	mov    BYTE PTR [ebx+0xc],al
c0004d68:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d6b:	83 c0 1c             	add    eax,0x1c
c0004d6e:	e8 c1 ce ff ff       	call   c0001c34 <ld_dword>
c0004d73:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0004d7a:	89 03                	mov    DWORD PTR [ebx],eax
c0004d7c:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d7f:	83 c0 16             	add    eax,0x16
c0004d82:	e8 a0 ce ff ff       	call   c0001c27 <ld_word>
c0004d87:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0004d8b:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d8e:	83 c0 18             	add    eax,0x18
c0004d91:	e8 91 ce ff ff       	call   c0001c27 <ld_word>
c0004d96:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0004d9a:	83 c4 1c             	add    esp,0x1c
c0004d9d:	5b                   	pop    ebx
c0004d9e:	5e                   	pop    esi
c0004d9f:	5f                   	pop    edi
c0004da0:	5d                   	pop    ebp
c0004da1:	c3                   	ret    

c0004da2 <ld_clust.isra.0>:
c0004da2:	56                   	push   esi
c0004da3:	89 c6                	mov    esi,eax
c0004da5:	53                   	push   ebx
c0004da6:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004da9:	89 d3                	mov    ebx,edx
c0004dab:	e8 77 ce ff ff       	call   c0001c27 <ld_word>
c0004db0:	0f b7 c8             	movzx  ecx,ax
c0004db3:	89 f0                	mov    eax,esi
c0004db5:	3c 03                	cmp    al,0x3
c0004db7:	75 0d                	jne    c0004dc6 <ld_clust.isra.0+0x24>
c0004db9:	8d 43 14             	lea    eax,[ebx+0x14]
c0004dbc:	e8 66 ce ff ff       	call   c0001c27 <ld_word>
c0004dc1:	c1 e0 10             	shl    eax,0x10
c0004dc4:	09 c1                	or     ecx,eax
c0004dc6:	89 c8                	mov    eax,ecx
c0004dc8:	5b                   	pop    ebx
c0004dc9:	5e                   	pop    esi
c0004dca:	c3                   	ret    

c0004dcb <st_clust.isra.1>:
c0004dcb:	56                   	push   esi
c0004dcc:	89 c6                	mov    esi,eax
c0004dce:	53                   	push   ebx
c0004dcf:	89 d3                	mov    ebx,edx
c0004dd1:	0f b7 d1             	movzx  edx,cx
c0004dd4:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0004dd7:	e8 bd ce ff ff       	call   c0001c99 <st_word>
c0004ddc:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c0004ddf:	75 0f                	jne    c0004df0 <st_clust.isra.1+0x25>
c0004de1:	c1 e9 10             	shr    ecx,0x10
c0004de4:	8d 43 14             	lea    eax,[ebx+0x14]
c0004de7:	89 ca                	mov    edx,ecx
c0004de9:	5b                   	pop    ebx
c0004dea:	5e                   	pop    esi
c0004deb:	e9 a9 ce ff ff       	jmp    c0001c99 <st_word>
c0004df0:	5b                   	pop    ebx
c0004df1:	5e                   	pop    esi
c0004df2:	c3                   	ret    

c0004df3 <init_alloc_info.isra.2>:
c0004df3:	56                   	push   esi
c0004df4:	53                   	push   ebx
c0004df5:	89 c6                	mov    esi,eax
c0004df7:	89 d3                	mov    ebx,edx
c0004df9:	51                   	push   ecx
c0004dfa:	8b 00                	mov    eax,DWORD PTR [eax]
c0004dfc:	83 c0 34             	add    eax,0x34
c0004dff:	e8 30 ce ff ff       	call   c0001c34 <ld_dword>
c0004e04:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004e07:	8b 06                	mov    eax,DWORD PTR [esi]
c0004e09:	83 c0 38             	add    eax,0x38
c0004e0c:	e8 3b ce ff ff       	call   c0001c4c <ld_qword>
c0004e11:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004e14:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0004e17:	8b 06                	mov    eax,DWORD PTR [esi]
c0004e19:	8a 40 21             	mov    al,BYTE PTR [eax+0x21]
c0004e1c:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004e23:	83 e0 02             	and    eax,0x2
c0004e26:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004e29:	5b                   	pop    ebx
c0004e2a:	5b                   	pop    ebx
c0004e2b:	5e                   	pop    esi
c0004e2c:	c3                   	ret    

c0004e2d <follow_path>:
c0004e2d:	56                   	push   esi
c0004e2e:	53                   	push   ebx
c0004e2f:	89 c3                	mov    ebx,eax
c0004e31:	83 ec 14             	sub    esp,0x14
c0004e34:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004e38:	8b 30                	mov    esi,DWORD PTR [eax]
c0004e3a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e3e:	8a 10                	mov    dl,BYTE PTR [eax]
c0004e40:	80 fa 5c             	cmp    dl,0x5c
c0004e43:	75 07                	jne    c0004e4c <follow_path+0x1f>
c0004e45:	40                   	inc    eax
c0004e46:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004e4a:	eb ee                	jmp    c0004e3a <follow_path+0xd>
c0004e4c:	80 fa 2f             	cmp    dl,0x2f
c0004e4f:	74 f4                	je     c0004e45 <follow_path+0x18>
c0004e51:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004e58:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004e5f:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0004e62:	77 52                	ja     c0004eb6 <follow_path+0x89>
c0004e64:	c6 43 47 80          	mov    BYTE PTR [ebx+0x47],0x80
c0004e68:	31 d2                	xor    edx,edx
c0004e6a:	89 d8                	mov    eax,ebx
c0004e6c:	e8 12 e3 ff ff       	call   c0003183 <dir_sdi>
c0004e71:	eb 7c                	jmp    c0004eef <follow_path+0xc2>
c0004e73:	89 d8                	mov    eax,ebx
c0004e75:	e8 6e f2 ff ff       	call   c00040e8 <dir_find>
c0004e7a:	8a 53 47             	mov    dl,BYTE PTR [ebx+0x47]
c0004e7d:	85 c0                	test   eax,eax
c0004e7f:	75 46                	jne    c0004ec7 <follow_path+0x9a>
c0004e81:	80 e2 04             	and    dl,0x4
c0004e84:	75 69                	jne    c0004eef <follow_path+0xc2>
c0004e86:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004e8a:	74 5e                	je     c0004eea <follow_path+0xbd>
c0004e8c:	8a 06                	mov    al,BYTE PTR [esi]
c0004e8e:	3c 04                	cmp    al,0x4
c0004e90:	75 41                	jne    c0004ed3 <follow_path+0xa6>
c0004e92:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004e95:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c0004e99:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004e9c:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004e9f:	30 c0                	xor    al,al
c0004ea1:	09 d0                	or     eax,edx
c0004ea3:	89 da                	mov    edx,ebx
c0004ea5:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004ea8:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0004eab:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0004eae:	8d 46 10             	lea    eax,[esi+0x10]
c0004eb1:	e8 3d ff ff ff       	call   c0004df3 <init_alloc_info.isra.2>
c0004eb6:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004eba:	89 d8                	mov    eax,ebx
c0004ebc:	e8 a9 ed ff ff       	call   c0003c6a <create_name>
c0004ec1:	85 c0                	test   eax,eax
c0004ec3:	74 ae                	je     c0004e73 <follow_path+0x46>
c0004ec5:	eb 28                	jmp    c0004eef <follow_path+0xc2>
c0004ec7:	83 f8 04             	cmp    eax,0x4
c0004eca:	75 23                	jne    c0004eef <follow_path+0xc2>
c0004ecc:	80 e2 04             	and    dl,0x4
c0004ecf:	74 19                	je     c0004eea <follow_path+0xbd>
c0004ed1:	eb 1c                	jmp    c0004eef <follow_path+0xc2>
c0004ed3:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0004ed6:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0004edc:	8d 54 16 54          	lea    edx,[esi+edx*1+0x54]
c0004ee0:	e8 bd fe ff ff       	call   c0004da2 <ld_clust.isra.0>
c0004ee5:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004ee8:	eb cc                	jmp    c0004eb6 <follow_path+0x89>
c0004eea:	b8 05 00 00 00       	mov    eax,0x5
c0004eef:	83 c4 14             	add    esp,0x14
c0004ef2:	5b                   	pop    ebx
c0004ef3:	5e                   	pop    esi
c0004ef4:	c3                   	ret    

c0004ef5 <f_mount>:
c0004ef5:	53                   	push   ebx
c0004ef6:	83 ec 18             	sub    esp,0x18
c0004ef9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004efd:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0004f01:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004f05:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0004f09:	e8 fb d2 ff ff       	call   c0002209 <get_ldnumber>
c0004f0e:	89 c2                	mov    edx,eax
c0004f10:	b8 0b 00 00 00       	mov    eax,0xb
c0004f15:	85 d2                	test   edx,edx
c0004f17:	78 39                	js     c0004f52 <f_mount+0x5d>
c0004f19:	8b 04 95 40 d9 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd26c0]
c0004f20:	85 c0                	test   eax,eax
c0004f22:	74 03                	je     c0004f27 <f_mount+0x32>
c0004f24:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004f27:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f2b:	85 c0                	test   eax,eax
c0004f2d:	74 03                	je     c0004f32 <f_mount+0x3d>
c0004f2f:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004f32:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f36:	89 04 95 40 d9 02 c0 	mov    DWORD PTR [edx*4-0x3ffd26c0],eax
c0004f3d:	31 c0                	xor    eax,eax
c0004f3f:	84 db                	test   bl,bl
c0004f41:	74 0f                	je     c0004f52 <f_mount+0x5d>
c0004f43:	31 c9                	xor    ecx,ecx
c0004f45:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004f49:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004f4d:	e8 65 d7 ff ff       	call   c00026b7 <mount_volume>
c0004f52:	83 c4 18             	add    esp,0x18
c0004f55:	5b                   	pop    ebx
c0004f56:	c3                   	ret    

c0004f57 <f_open>:
c0004f57:	55                   	push   ebp
c0004f58:	bd 09 00 00 00       	mov    ebp,0x9
c0004f5d:	57                   	push   edi
c0004f5e:	56                   	push   esi
c0004f5f:	53                   	push   ebx
c0004f60:	83 ec 7c             	sub    esp,0x7c
c0004f63:	8b 9c 24 90 00 00 00 	mov    ebx,DWORD PTR [esp+0x90]
c0004f6a:	8b bc 24 98 00 00 00 	mov    edi,DWORD PTR [esp+0x98]
c0004f71:	85 db                	test   ebx,ebx
c0004f73:	0f 84 10 04 00 00    	je     c0005389 <f_open+0x432>
c0004f79:	89 fe                	mov    esi,edi
c0004f7b:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004f7f:	83 e6 3f             	and    esi,0x3f
c0004f82:	89 f0                	mov    eax,esi
c0004f84:	0f b6 c8             	movzx  ecx,al
c0004f87:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0004f8e:	e8 24 d7 ff ff       	call   c00026b7 <mount_volume>
c0004f93:	89 c5                	mov    ebp,eax
c0004f95:	85 c0                	test   eax,eax
c0004f97:	0f 85 e6 03 00 00    	jne    c0005383 <f_open+0x42c>
c0004f9d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fa1:	bd 11 00 00 00       	mov    ebp,0x11
c0004fa6:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004faa:	83 ec 0c             	sub    esp,0xc
c0004fad:	68 60 04 00 00       	push   0x460
c0004fb2:	e8 a3 34 00 00       	call   c000845a <ff_memalloc>
c0004fb7:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004fbb:	83 c4 10             	add    esp,0x10
c0004fbe:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0004fc3:	0f 84 c0 03 00 00    	je     c0005389 <f_open+0x432>
c0004fc9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fcd:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004fd1:	8d 91 00 02 00 00    	lea    edx,[ecx+0x200]
c0004fd7:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0004fda:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0004fdd:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0004fe4:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004fe8:	e8 40 fe ff ff       	call   c0004e2d <follow_path>
c0004fed:	89 c5                	mov    ebp,eax
c0004fef:	85 c0                	test   eax,eax
c0004ff1:	75 0c                	jne    c0004fff <f_open+0xa8>
c0004ff3:	80 7c 24 6b 00       	cmp    BYTE PTR [esp+0x6b],0x0
c0004ff8:	79 05                	jns    c0004fff <f_open+0xa8>
c0004ffa:	bd 06 00 00 00       	mov    ebp,0x6
c0004fff:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0005005:	0f 84 84 01 00 00    	je     c000518f <f_open+0x238>
c000500b:	85 ed                	test   ebp,ebp
c000500d:	74 20                	je     c000502f <f_open+0xd8>
c000500f:	83 fd 04             	cmp    ebp,0x4
c0005012:	0f 85 58 03 00 00    	jne    c0005370 <f_open+0x419>
c0005018:	8d 44 24 24          	lea    eax,[esp+0x24]
c000501c:	83 ce 08             	or     esi,0x8
c000501f:	e8 8a f2 ff ff       	call   c00042ae <dir_register>
c0005024:	89 c5                	mov    ebp,eax
c0005026:	85 c0                	test   eax,eax
c0005028:	74 2f                	je     c0005059 <f_open+0x102>
c000502a:	e9 41 03 00 00       	jmp    c0005370 <f_open+0x419>
c000502f:	bd 07 00 00 00       	mov    ebp,0x7
c0005034:	f6 44 24 2a 11       	test   BYTE PTR [esp+0x2a],0x11
c0005039:	0f 85 31 03 00 00    	jne    c0005370 <f_open+0x419>
c000503f:	bd 08 00 00 00       	mov    ebp,0x8
c0005044:	f7 c7 04 00 00 00    	test   edi,0x4
c000504a:	0f 85 20 03 00 00    	jne    c0005370 <f_open+0x419>
c0005050:	83 e7 08             	and    edi,0x8
c0005053:	0f 84 65 01 00 00    	je     c00051be <f_open+0x267>
c0005059:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000505d:	8a 02                	mov    al,BYTE PTR [edx]
c000505f:	3c 04                	cmp    al,0x4
c0005061:	0f 85 97 00 00 00    	jne    c00050fe <f_open+0x1a7>
c0005067:	8d 42 10             	lea    eax,[edx+0x10]
c000506a:	89 13                	mov    DWORD PTR [ebx],edx
c000506c:	89 da                	mov    edx,ebx
c000506e:	e8 80 fd ff ff       	call   c0004df3 <init_alloc_info.isra.2>
c0005073:	31 d2                	xor    edx,edx
c0005075:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005079:	b9 1e 00 00 00       	mov    ecx,0x1e
c000507e:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005081:	83 c0 02             	add    eax,0x2
c0005084:	e8 32 cc ff ff       	call   c0001cbb <mem_set>
c0005089:	b9 1a 00 00 00       	mov    ecx,0x1a
c000508e:	31 d2                	xor    edx,edx
c0005090:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005094:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005097:	83 c0 26             	add    eax,0x26
c000509a:	e8 1c cc ff ff       	call   c0001cbb <mem_set>
c000509f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050a3:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00050a6:	c6 42 04 20          	mov    BYTE PTR [edx+0x4],0x20
c00050aa:	ba 00 00 21 50       	mov    edx,0x50210000
c00050af:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050b2:	83 c0 08             	add    eax,0x8
c00050b5:	e8 e3 cb ff ff       	call   c0001c9d <st_dword>
c00050ba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050be:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050c1:	c6 40 21 01          	mov    BYTE PTR [eax+0x21],0x1
c00050c5:	8d 44 24 24          	lea    eax,[esp+0x24]
c00050c9:	e8 b7 ea ff ff       	call   c0003b85 <store_xdir>
c00050ce:	89 c5                	mov    ebp,eax
c00050d0:	85 c0                	test   eax,eax
c00050d2:	0f 85 98 02 00 00    	jne    c0005370 <f_open+0x419>
c00050d8:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00050db:	85 d2                	test   edx,edx
c00050dd:	0f 84 db 00 00 00    	je     c00051be <f_open+0x267>
c00050e3:	31 c9                	xor    ecx,ecx
c00050e5:	89 d8                	mov    eax,ebx
c00050e7:	e8 8e e3 ff ff       	call   c000347a <remove_chain>
c00050ec:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00050f0:	89 c5                	mov    ebp,eax
c00050f2:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00050f5:	48                   	dec    eax
c00050f6:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c00050f9:	e9 b8 00 00 00       	jmp    c00051b6 <f_open+0x25f>
c00050fe:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c0005102:	89 ea                	mov    edx,ebp
c0005104:	e8 99 fc ff ff       	call   c0004da2 <ld_clust.isra.0>
c0005109:	ba 00 00 21 50       	mov    edx,0x50210000
c000510e:	89 c7                	mov    edi,eax
c0005110:	8d 45 0e             	lea    eax,[ebp+0xe]
c0005113:	e8 85 cb ff ff       	call   c0001c9d <st_dword>
c0005118:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000511c:	31 c9                	xor    ecx,ecx
c000511e:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0005122:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005126:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c000512a:	e8 9c fc ff ff       	call   c0004dcb <st_clust.isra.1>
c000512f:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0005133:	31 d2                	xor    edx,edx
c0005135:	83 c0 1c             	add    eax,0x1c
c0005138:	e8 60 cb ff ff       	call   c0001c9d <st_dword>
c000513d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005141:	85 ff                	test   edi,edi
c0005143:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005147:	74 75                	je     c00051be <f_open+0x267>
c0005149:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000514d:	31 c9                	xor    ecx,ecx
c000514f:	8b 50 50             	mov    edx,DWORD PTR [eax+0x50]
c0005152:	8b 40 4c             	mov    eax,DWORD PTR [eax+0x4c]
c0005155:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005159:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000515d:	89 fa                	mov    edx,edi
c000515f:	8d 44 24 24          	lea    eax,[esp+0x24]
c0005163:	e8 12 e3 ff ff       	call   c000347a <remove_chain>
c0005168:	89 c5                	mov    ebp,eax
c000516a:	85 c0                	test   eax,eax
c000516c:	0f 85 fe 01 00 00    	jne    c0005370 <f_open+0x419>
c0005172:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0005176:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000517a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000517e:	4f                   	dec    edi
c000517f:	e8 81 d2 ff ff       	call   c0002405 <move_window>
c0005184:	89 c5                	mov    ebp,eax
c0005186:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000518a:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c000518d:	eb 27                	jmp    c00051b6 <f_open+0x25f>
c000518f:	85 ed                	test   ebp,ebp
c0005191:	0f 85 d9 01 00 00    	jne    c0005370 <f_open+0x419>
c0005197:	8a 44 24 2a          	mov    al,BYTE PTR [esp+0x2a]
c000519b:	bd 04 00 00 00       	mov    ebp,0x4
c00051a0:	a8 10                	test   al,0x10
c00051a2:	0f 85 c8 01 00 00    	jne    c0005370 <f_open+0x419>
c00051a8:	83 e7 02             	and    edi,0x2
c00051ab:	74 11                	je     c00051be <f_open+0x267>
c00051ad:	bd 07 00 00 00       	mov    ebp,0x7
c00051b2:	a8 01                	test   al,0x1
c00051b4:	eb 02                	jmp    c00051b8 <f_open+0x261>
c00051b6:	85 ed                	test   ebp,ebp
c00051b8:	0f 85 b2 01 00 00    	jne    c0005370 <f_open+0x419>
c00051be:	f7 c6 08 00 00 00    	test   esi,0x8
c00051c4:	74 03                	je     c00051c9 <f_open+0x272>
c00051c6:	83 ce 40             	or     esi,0x40
c00051c9:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00051cd:	8b 7a 4c             	mov    edi,DWORD PTR [edx+0x4c]
c00051d0:	8b 6a 50             	mov    ebp,DWORD PTR [edx+0x50]
c00051d3:	89 7b 40             	mov    DWORD PTR [ebx+0x40],edi
c00051d6:	89 6b 44             	mov    DWORD PTR [ebx+0x44],ebp
c00051d9:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c00051dd:	89 7b 48             	mov    DWORD PTR [ebx+0x48],edi
c00051e0:	8a 02                	mov    al,BYTE PTR [edx]
c00051e2:	3c 04                	cmp    al,0x4
c00051e4:	75 2a                	jne    c0005210 <f_open+0x2b9>
c00051e6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00051ea:	0f b6 4c 24 2b       	movzx  ecx,BYTE PTR [esp+0x2b]
c00051ef:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c00051f2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00051f6:	30 c0                	xor    al,al
c00051f8:	09 c8                	or     eax,ecx
c00051fa:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c00051fd:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0005201:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0005204:	8d 42 10             	lea    eax,[edx+0x10]
c0005207:	89 da                	mov    edx,ebx
c0005209:	e8 e5 fb ff ff       	call   c0004df3 <init_alloc_info.isra.2>
c000520e:	eb 1c                	jmp    c000522c <f_open+0x2d5>
c0005210:	89 fa                	mov    edx,edi
c0005212:	e8 8b fb ff ff       	call   c0004da2 <ld_clust.isra.0>
c0005217:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000521a:	8d 47 1c             	lea    eax,[edi+0x1c]
c000521d:	e8 12 ca ff ff       	call   c0001c34 <ld_dword>
c0005222:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0005229:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000522c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005230:	c7 43 4c 00 00 00 00 	mov    DWORD PTR [ebx+0x4c],0x0
c0005237:	89 03                	mov    DWORD PTR [ebx],eax
c0005239:	31 d2                	xor    edx,edx
c000523b:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c000523f:	b9 00 02 00 00       	mov    ecx,0x200
c0005244:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0005248:	c6 43 29 00          	mov    BYTE PTR [ebx+0x29],0x0
c000524c:	89 f0                	mov    eax,esi
c000524e:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0005255:	88 43 28             	mov    BYTE PTR [ebx+0x28],al
c0005258:	c7 43 3c 00 00 00 00 	mov    DWORD PTR [ebx+0x3c],0x0
c000525f:	8d 43 50             	lea    eax,[ebx+0x50]
c0005262:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005269:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005270:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005274:	e8 42 ca ff ff       	call   c0001cbb <mem_set>
c0005279:	83 e6 20             	and    esi,0x20
c000527c:	75 07                	jne    c0005285 <f_open+0x32e>
c000527e:	31 ed                	xor    ebp,ebp
c0005280:	e9 eb 00 00 00       	jmp    c0005370 <f_open+0x419>
c0005285:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005288:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000528b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000528f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005293:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005297:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000529b:	74 e1                	je     c000527e <f_open+0x327>
c000529d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00052a1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00052a5:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00052a8:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c00052ab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00052af:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00052b2:	0f b7 68 0a          	movzx  ebp,WORD PTR [eax+0xa]
c00052b6:	31 ff                	xor    edi,edi
c00052b8:	c1 e5 09             	shl    ebp,0x9
c00052bb:	89 ee                	mov    esi,ebp
c00052bd:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c00052c1:	89 f8                	mov    eax,edi
c00052c3:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c00052c7:	73 22                	jae    c00052eb <f_open+0x394>
c00052c9:	89 d8                	mov    eax,ebx
c00052cb:	e8 bd dc ff ff       	call   c0002f8d <get_fat>
c00052d0:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c00052d4:	89 c2                	mov    edx,eax
c00052d6:	19 7c 24 0c          	sbb    DWORD PTR [esp+0xc],edi
c00052da:	83 f8 01             	cmp    eax,0x1
c00052dd:	76 10                	jbe    c00052ef <f_open+0x398>
c00052df:	83 f8 ff             	cmp    eax,0xffffffff
c00052e2:	75 d9                	jne    c00052bd <f_open+0x366>
c00052e4:	bd 01 00 00 00       	mov    ebp,0x1
c00052e9:	eb 09                	jmp    c00052f4 <f_open+0x39d>
c00052eb:	31 ed                	xor    ebp,ebp
c00052ed:	eb 05                	jmp    c00052f4 <f_open+0x39d>
c00052ef:	bd 02 00 00 00       	mov    ebp,0x2
c00052f4:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c00052f7:	85 ed                	test   ebp,ebp
c00052f9:	75 75                	jne    c0005370 <f_open+0x419>
c00052fb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00052ff:	25 ff 01 00 00       	and    eax,0x1ff
c0005304:	0f 84 74 ff ff ff    	je     c000527e <f_open+0x327>
c000530a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000530e:	bd 02 00 00 00       	mov    ebp,0x2
c0005313:	89 c8                	mov    eax,ecx
c0005315:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0005319:	e8 a2 cb ff ff       	call   c0001ec0 <clst2sect>
c000531e:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005322:	89 d7                	mov    edi,edx
c0005324:	09 c7                	or     edi,eax
c0005326:	74 48                	je     c0005370 <f_open+0x419>
c0005328:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000532c:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005330:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0005338:	0f ac fe 09          	shrd   esi,edi,0x9
c000533c:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0005340:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0005344:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0005347:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000534b:	83 ec 0c             	sub    esp,0xc
c000534e:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c0005351:	6a 01                	push   0x1
c0005353:	52                   	push   edx
c0005354:	50                   	push   eax
c0005355:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0005359:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000535d:	50                   	push   eax
c000535e:	e8 79 c8 ff ff       	call   c0001bdc <disk_read>
c0005363:	83 c4 20             	add    esp,0x20
c0005366:	85 c0                	test   eax,eax
c0005368:	0f 95 c0             	setne  al
c000536b:	0f b6 c0             	movzx  eax,al
c000536e:	89 c5                	mov    ebp,eax
c0005370:	83 ec 0c             	sub    esp,0xc
c0005373:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0005377:	e8 f4 30 00 00       	call   c0008470 <ff_memfree>
c000537c:	83 c4 10             	add    esp,0x10
c000537f:	85 ed                	test   ebp,ebp
c0005381:	74 06                	je     c0005389 <f_open+0x432>
c0005383:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005389:	83 c4 7c             	add    esp,0x7c
c000538c:	89 e8                	mov    eax,ebp
c000538e:	5b                   	pop    ebx
c000538f:	5e                   	pop    esi
c0005390:	5f                   	pop    edi
c0005391:	5d                   	pop    ebp
c0005392:	c3                   	ret    

c0005393 <f_read>:
c0005393:	55                   	push   ebp
c0005394:	57                   	push   edi
c0005395:	56                   	push   esi
c0005396:	53                   	push   ebx
c0005397:	83 ec 2c             	sub    esp,0x2c
c000539a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000539e:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00053a2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00053a8:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00053ac:	89 d8                	mov    eax,ebx
c00053ae:	e8 77 cf ff ff       	call   c000232a <validate>
c00053b3:	89 c5                	mov    ebp,eax
c00053b5:	85 c0                	test   eax,eax
c00053b7:	0f 85 4c 02 00 00    	jne    c0005609 <f_read+0x276>
c00053bd:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00053c1:	85 ed                	test   ebp,ebp
c00053c3:	0f 85 40 02 00 00    	jne    c0005609 <f_read+0x276>
c00053c9:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c00053cd:	0f 84 31 02 00 00    	je     c0005604 <f_read+0x271>
c00053d3:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00053d6:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00053d9:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c00053dc:	bf 00 00 00 00       	mov    edi,0x0
c00053e1:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c00053e4:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c00053e8:	89 d1                	mov    ecx,edx
c00053ea:	19 f9                	sbb    ecx,edi
c00053ec:	0f 83 cf 00 00 00    	jae    c00054c1 <f_read+0x12e>
c00053f2:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00053f6:	e9 c6 00 00 00       	jmp    c00054c1 <f_read+0x12e>
c00053fb:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00053fe:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005401:	89 d0                	mov    eax,edx
c0005403:	25 ff 01 00 00       	and    eax,0x1ff
c0005408:	0f 85 c9 01 00 00    	jne    c00055d7 <f_read+0x244>
c000540e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005412:	89 d6                	mov    esi,edx
c0005414:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0005418:	89 cf                	mov    edi,ecx
c000541a:	48                   	dec    eax
c000541b:	0f ac fe 09          	shrd   esi,edi,0x9
c000541f:	21 f0                	and    eax,esi
c0005421:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005425:	0f 84 a6 00 00 00    	je     c00054d1 <f_read+0x13e>
c000542b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000542f:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005432:	89 c8                	mov    eax,ecx
c0005434:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0005437:	e8 84 ca ff ff       	call   c0001ec0 <clst2sect>
c000543c:	89 d7                	mov    edi,edx
c000543e:	09 c7                	or     edi,eax
c0005440:	0f 84 b4 00 00 00    	je     c00054fa <f_read+0x167>
c0005446:	31 ff                	xor    edi,edi
c0005448:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000544c:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000544f:	01 c6                	add    esi,eax
c0005451:	11 d7                	adc    edi,edx
c0005453:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c000545b:	0f 86 fd 00 00 00    	jbe    c000555e <f_read+0x1cb>
c0005461:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005465:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005469:	c1 e8 09             	shr    eax,0x9
c000546c:	89 04 24             	mov    DWORD PTR [esp],eax
c000546f:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0005473:	03 14 24             	add    edx,DWORD PTR [esp]
c0005476:	39 c2                	cmp    edx,eax
c0005478:	76 07                	jbe    c0005481 <f_read+0xee>
c000547a:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c000547e:	89 04 24             	mov    DWORD PTR [esp],eax
c0005481:	83 ec 0c             	sub    esp,0xc
c0005484:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0005488:	57                   	push   edi
c0005489:	56                   	push   esi
c000548a:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000548e:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005492:	50                   	push   eax
c0005493:	e8 44 c7 ff ff       	call   c0001bdc <disk_read>
c0005498:	83 c4 20             	add    esp,0x20
c000549b:	85 c0                	test   eax,eax
c000549d:	75 6e                	jne    c000550d <f_read+0x17a>
c000549f:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00054a3:	78 7e                	js     c0005523 <f_read+0x190>
c00054a5:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00054a8:	c1 e6 09             	shl    esi,0x9
c00054ab:	31 ff                	xor    edi,edi
c00054ad:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00054b1:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00054b5:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00054b9:	01 30                	add    DWORD PTR [eax],esi
c00054bb:	01 73 2c             	add    DWORD PTR [ebx+0x2c],esi
c00054be:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c00054c1:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00054c6:	0f 85 2f ff ff ff    	jne    c00053fb <f_read+0x68>
c00054cc:	e9 38 01 00 00       	jmp    c0005609 <f_read+0x276>
c00054d1:	89 c8                	mov    eax,ecx
c00054d3:	09 d0                	or     eax,edx
c00054d5:	75 05                	jne    c00054dc <f_read+0x149>
c00054d7:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00054da:	eb 19                	jmp    c00054f5 <f_read+0x162>
c00054dc:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c00054e0:	74 09                	je     c00054eb <f_read+0x158>
c00054e2:	89 d8                	mov    eax,ebx
c00054e4:	e8 f8 c9 ff ff       	call   c0001ee1 <clmt_clust>
c00054e9:	eb 0a                	jmp    c00054f5 <f_read+0x162>
c00054eb:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00054ee:	89 d8                	mov    eax,ebx
c00054f0:	e8 98 da ff ff       	call   c0002f8d <get_fat>
c00054f5:	83 f8 01             	cmp    eax,0x1
c00054f8:	77 0e                	ja     c0005508 <f_read+0x175>
c00054fa:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00054fe:	bd 02 00 00 00       	mov    ebp,0x2
c0005503:	e9 01 01 00 00       	jmp    c0005609 <f_read+0x276>
c0005508:	83 f8 ff             	cmp    eax,0xffffffff
c000550b:	75 0e                	jne    c000551b <f_read+0x188>
c000550d:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005511:	bd 01 00 00 00       	mov    ebp,0x1
c0005516:	e9 ee 00 00 00       	jmp    c0005609 <f_read+0x276>
c000551b:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c000551e:	e9 08 ff ff ff       	jmp    c000542b <f_read+0x98>
c0005523:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005526:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005529:	29 f0                	sub    eax,esi
c000552b:	19 fa                	sbb    edx,edi
c000552d:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0005530:	89 d7                	mov    edi,edx
c0005532:	ba 00 00 00 00       	mov    edx,0x0
c0005537:	89 f9                	mov    ecx,edi
c0005539:	19 d1                	sbb    ecx,edx
c000553b:	0f 83 64 ff ff ff    	jae    c00054a5 <f_read+0x112>
c0005541:	89 c7                	mov    edi,eax
c0005543:	8d 53 50             	lea    edx,[ebx+0x50]
c0005546:	c1 e7 09             	shl    edi,0x9
c0005549:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000554d:	b9 00 02 00 00       	mov    ecx,0x200
c0005552:	01 f8                	add    eax,edi
c0005554:	e8 4d c7 ff ff       	call   c0001ca6 <mem_cpy>
c0005559:	e9 47 ff ff ff       	jmp    c00054a5 <f_read+0x112>
c000555e:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005561:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005564:	89 04 24             	mov    DWORD PTR [esp],eax
c0005567:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000556b:	39 7c 24 04          	cmp    DWORD PTR [esp+0x4],edi
c000556f:	75 05                	jne    c0005576 <f_read+0x1e3>
c0005571:	39 34 24             	cmp    DWORD PTR [esp],esi
c0005574:	74 5b                	je     c00055d1 <f_read+0x23e>
c0005576:	8d 43 50             	lea    eax,[ebx+0x50]
c0005579:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c000557d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005581:	79 2a                	jns    c00055ad <f_read+0x21a>
c0005583:	83 ec 0c             	sub    esp,0xc
c0005586:	6a 01                	push   0x1
c0005588:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000558c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005590:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005594:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005598:	50                   	push   eax
c0005599:	e8 54 c6 ff ff       	call   c0001bf2 <disk_write>
c000559e:	83 c4 20             	add    esp,0x20
c00055a1:	85 c0                	test   eax,eax
c00055a3:	0f 85 64 ff ff ff    	jne    c000550d <f_read+0x17a>
c00055a9:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00055ad:	83 ec 0c             	sub    esp,0xc
c00055b0:	6a 01                	push   0x1
c00055b2:	57                   	push   edi
c00055b3:	56                   	push   esi
c00055b4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00055b8:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00055bc:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00055c0:	50                   	push   eax
c00055c1:	e8 16 c6 ff ff       	call   c0001bdc <disk_read>
c00055c6:	83 c4 20             	add    esp,0x20
c00055c9:	85 c0                	test   eax,eax
c00055cb:	0f 85 3c ff ff ff    	jne    c000550d <f_read+0x17a>
c00055d1:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00055d4:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00055d7:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00055da:	ba 00 02 00 00       	mov    edx,0x200
c00055df:	25 ff 01 00 00       	and    eax,0x1ff
c00055e4:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00055e8:	29 c2                	sub    edx,eax
c00055ea:	39 d6                	cmp    esi,edx
c00055ec:	76 02                	jbe    c00055f0 <f_read+0x25d>
c00055ee:	89 d6                	mov    esi,edx
c00055f0:	8d 54 03 50          	lea    edx,[ebx+eax*1+0x50]
c00055f4:	89 f1                	mov    ecx,esi
c00055f6:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00055fa:	e8 a7 c6 ff ff       	call   c0001ca6 <mem_cpy>
c00055ff:	e9 a7 fe ff ff       	jmp    c00054ab <f_read+0x118>
c0005604:	bd 07 00 00 00       	mov    ebp,0x7
c0005609:	83 c4 2c             	add    esp,0x2c
c000560c:	89 e8                	mov    eax,ebp
c000560e:	5b                   	pop    ebx
c000560f:	5e                   	pop    esi
c0005610:	5f                   	pop    edi
c0005611:	5d                   	pop    ebp
c0005612:	c3                   	ret    

c0005613 <f_write>:
c0005613:	55                   	push   ebp
c0005614:	57                   	push   edi
c0005615:	56                   	push   esi
c0005616:	53                   	push   ebx
c0005617:	83 ec 2c             	sub    esp,0x2c
c000561a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000561e:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0005622:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0005628:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000562c:	89 d8                	mov    eax,ebx
c000562e:	e8 f7 cc ff ff       	call   c000232a <validate>
c0005633:	89 c5                	mov    ebp,eax
c0005635:	85 c0                	test   eax,eax
c0005637:	0f 85 86 02 00 00    	jne    c00058c3 <f_write+0x2b0>
c000563d:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0005641:	85 ed                	test   ebp,ebp
c0005643:	0f 85 7a 02 00 00    	jne    c00058c3 <f_write+0x2b0>
c0005649:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c000564d:	0f 84 6b 02 00 00    	je     c00058be <f_write+0x2ab>
c0005653:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005657:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000565a:	0f 84 43 01 00 00    	je     c00057a3 <f_write+0x190>
c0005660:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005663:	89 c1                	mov    ecx,eax
c0005665:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c0005669:	0f 83 34 01 00 00    	jae    c00057a3 <f_write+0x190>
c000566f:	f7 d0                	not    eax
c0005671:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0005675:	e9 29 01 00 00       	jmp    c00057a3 <f_write+0x190>
c000567a:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000567d:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005680:	89 d0                	mov    eax,edx
c0005682:	25 ff 01 00 00       	and    eax,0x1ff
c0005687:	0f 85 00 02 00 00    	jne    c000588d <f_write+0x27a>
c000568d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005691:	89 d6                	mov    esi,edx
c0005693:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0005697:	89 cf                	mov    edi,ecx
c0005699:	48                   	dec    eax
c000569a:	0f ac fe 09          	shrd   esi,edi,0x9
c000569e:	21 f0                	and    eax,esi
c00056a0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00056a4:	0f 84 06 01 00 00    	je     c00057b0 <f_write+0x19d>
c00056aa:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00056ae:	0f 88 6e 01 00 00    	js     c0005822 <f_write+0x20f>
c00056b4:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00056b8:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00056bb:	89 c8                	mov    eax,ecx
c00056bd:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00056c1:	e8 fa c7 ff ff       	call   c0001ec0 <clst2sect>
c00056c6:	89 d1                	mov    ecx,edx
c00056c8:	09 c1                	or     ecx,eax
c00056ca:	0f 84 1c 01 00 00    	je     c00057ec <f_write+0x1d9>
c00056d0:	31 ff                	xor    edi,edi
c00056d2:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00056d6:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00056da:	01 c6                	add    esi,eax
c00056dc:	11 d7                	adc    edi,edx
c00056de:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c00056e6:	0f 86 63 01 00 00    	jbe    c000584f <f_write+0x23c>
c00056ec:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00056f0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00056f4:	c1 e8 09             	shr    eax,0x9
c00056f7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00056fb:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00056ff:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c0005703:	39 c2                	cmp    edx,eax
c0005705:	76 08                	jbe    c000570f <f_write+0xfc>
c0005707:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c000570b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000570f:	83 ec 0c             	sub    esp,0xc
c0005712:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005716:	57                   	push   edi
c0005717:	56                   	push   esi
c0005718:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000571c:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005720:	50                   	push   eax
c0005721:	e8 cc c4 ff ff       	call   c0001bf2 <disk_write>
c0005726:	83 c4 20             	add    esp,0x20
c0005729:	85 c0                	test   eax,eax
c000572b:	0f 85 ce 00 00 00    	jne    c00057ff <f_write+0x1ec>
c0005731:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005734:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005737:	29 f0                	sub    eax,esi
c0005739:	19 fa                	sbb    edx,edi
c000573b:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c000573f:	89 d7                	mov    edi,edx
c0005741:	ba 00 00 00 00       	mov    edx,0x0
c0005746:	89 f9                	mov    ecx,edi
c0005748:	19 d1                	sbb    ecx,edx
c000574a:	73 1c                	jae    c0005768 <f_write+0x155>
c000574c:	89 c7                	mov    edi,eax
c000574e:	b9 00 02 00 00       	mov    ecx,0x200
c0005753:	c1 e7 09             	shl    edi,0x9
c0005756:	8d 43 50             	lea    eax,[ebx+0x50]
c0005759:	03 7c 24 44          	add    edi,DWORD PTR [esp+0x44]
c000575d:	89 fa                	mov    edx,edi
c000575f:	e8 42 c5 ff ff       	call   c0001ca6 <mem_cpy>
c0005764:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005768:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000576c:	c1 e6 09             	shl    esi,0x9
c000576f:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0005773:	31 ff                	xor    edi,edi
c0005775:	01 30                	add    DWORD PTR [eax],esi
c0005777:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c000577b:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c000577f:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005782:	03 73 2c             	add    esi,DWORD PTR [ebx+0x2c]
c0005785:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005788:	13 7b 30             	adc    edi,DWORD PTR [ebx+0x30]
c000578b:	89 c1                	mov    ecx,eax
c000578d:	39 f2                	cmp    edx,esi
c000578f:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0005792:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c0005795:	19 f9                	sbb    ecx,edi
c0005797:	73 04                	jae    c000579d <f_write+0x18a>
c0005799:	89 f2                	mov    edx,esi
c000579b:	89 f8                	mov    eax,edi
c000579d:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00057a0:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00057a3:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00057a8:	0f 85 cc fe ff ff    	jne    c000567a <f_write+0x67>
c00057ae:	eb 2e                	jmp    c00057de <f_write+0x1cb>
c00057b0:	89 c8                	mov    eax,ecx
c00057b2:	09 d0                	or     eax,edx
c00057b4:	75 0b                	jne    c00057c1 <f_write+0x1ae>
c00057b6:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00057b9:	31 d2                	xor    edx,edx
c00057bb:	85 c0                	test   eax,eax
c00057bd:	75 28                	jne    c00057e7 <f_write+0x1d4>
c00057bf:	eb 12                	jmp    c00057d3 <f_write+0x1c0>
c00057c1:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c00057c5:	74 09                	je     c00057d0 <f_write+0x1bd>
c00057c7:	89 d8                	mov    eax,ebx
c00057c9:	e8 13 c7 ff ff       	call   c0001ee1 <clmt_clust>
c00057ce:	eb 0a                	jmp    c00057da <f_write+0x1c7>
c00057d0:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00057d3:	89 d8                	mov    eax,ebx
c00057d5:	e8 a1 da ff ff       	call   c000327b <create_chain>
c00057da:	85 c0                	test   eax,eax
c00057dc:	75 09                	jne    c00057e7 <f_write+0x1d4>
c00057de:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c00057e2:	e9 dc 00 00 00       	jmp    c00058c3 <f_write+0x2b0>
c00057e7:	83 f8 01             	cmp    eax,0x1
c00057ea:	75 0e                	jne    c00057fa <f_write+0x1e7>
c00057ec:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00057f0:	bd 02 00 00 00       	mov    ebp,0x2
c00057f5:	e9 c9 00 00 00       	jmp    c00058c3 <f_write+0x2b0>
c00057fa:	83 f8 ff             	cmp    eax,0xffffffff
c00057fd:	75 0e                	jne    c000580d <f_write+0x1fa>
c00057ff:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005803:	bd 01 00 00 00       	mov    ebp,0x1
c0005808:	e9 b6 00 00 00       	jmp    c00058c3 <f_write+0x2b0>
c000580d:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005810:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0005814:	0f 85 90 fe ff ff    	jne    c00056aa <f_write+0x97>
c000581a:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000581d:	e9 88 fe ff ff       	jmp    c00056aa <f_write+0x97>
c0005822:	83 ec 0c             	sub    esp,0xc
c0005825:	8d 43 50             	lea    eax,[ebx+0x50]
c0005828:	6a 01                	push   0x1
c000582a:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c000582d:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0005830:	50                   	push   eax
c0005831:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0005835:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005839:	50                   	push   eax
c000583a:	e8 b3 c3 ff ff       	call   c0001bf2 <disk_write>
c000583f:	83 c4 20             	add    esp,0x20
c0005842:	85 c0                	test   eax,eax
c0005844:	75 b9                	jne    c00057ff <f_write+0x1ec>
c0005846:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000584a:	e9 65 fe ff ff       	jmp    c00056b4 <f_write+0xa1>
c000584f:	39 7b 3c             	cmp    DWORD PTR [ebx+0x3c],edi
c0005852:	75 05                	jne    c0005859 <f_write+0x246>
c0005854:	39 73 38             	cmp    DWORD PTR [ebx+0x38],esi
c0005857:	74 2e                	je     c0005887 <f_write+0x274>
c0005859:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c000585c:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000585f:	39 53 2c             	cmp    DWORD PTR [ebx+0x2c],edx
c0005862:	1b 43 10             	sbb    eax,DWORD PTR [ebx+0x10]
c0005865:	73 20                	jae    c0005887 <f_write+0x274>
c0005867:	83 ec 0c             	sub    esp,0xc
c000586a:	8d 43 50             	lea    eax,[ebx+0x50]
c000586d:	6a 01                	push   0x1
c000586f:	57                   	push   edi
c0005870:	56                   	push   esi
c0005871:	50                   	push   eax
c0005872:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005876:	50                   	push   eax
c0005877:	e8 60 c3 ff ff       	call   c0001bdc <disk_read>
c000587c:	83 c4 20             	add    esp,0x20
c000587f:	85 c0                	test   eax,eax
c0005881:	0f 85 78 ff ff ff    	jne    c00057ff <f_write+0x1ec>
c0005887:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000588a:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c000588d:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005890:	ba 00 02 00 00       	mov    edx,0x200
c0005895:	25 ff 01 00 00       	and    eax,0x1ff
c000589a:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c000589e:	29 c2                	sub    edx,eax
c00058a0:	39 d6                	cmp    esi,edx
c00058a2:	76 02                	jbe    c00058a6 <f_write+0x293>
c00058a4:	89 d6                	mov    esi,edx
c00058a6:	8d 44 03 50          	lea    eax,[ebx+eax*1+0x50]
c00058aa:	89 f1                	mov    ecx,esi
c00058ac:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00058b0:	e8 f1 c3 ff ff       	call   c0001ca6 <mem_cpy>
c00058b5:	80 4b 28 80          	or     BYTE PTR [ebx+0x28],0x80
c00058b9:	e9 b1 fe ff ff       	jmp    c000576f <f_write+0x15c>
c00058be:	bd 07 00 00 00       	mov    ebp,0x7
c00058c3:	83 c4 2c             	add    esp,0x2c
c00058c6:	89 e8                	mov    eax,ebp
c00058c8:	5b                   	pop    ebx
c00058c9:	5e                   	pop    esi
c00058ca:	5f                   	pop    edi
c00058cb:	5d                   	pop    ebp
c00058cc:	c3                   	ret    

c00058cd <f_sync>:
c00058cd:	56                   	push   esi
c00058ce:	53                   	push   ebx
c00058cf:	83 ec 64             	sub    esp,0x64
c00058d2:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c00058d6:	8d 54 24 10          	lea    edx,[esp+0x10]
c00058da:	89 d8                	mov    eax,ebx
c00058dc:	e8 49 ca ff ff       	call   c000232a <validate>
c00058e1:	85 c0                	test   eax,eax
c00058e3:	0f 85 ba 01 00 00    	jne    c0005aa3 <f_sync+0x1d6>
c00058e9:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c00058ec:	f6 c2 40             	test   dl,0x40
c00058ef:	0f 84 ae 01 00 00    	je     c0005aa3 <f_sync+0x1d6>
c00058f5:	84 d2                	test   dl,dl
c00058f7:	79 33                	jns    c000592c <f_sync+0x5f>
c00058f9:	83 ec 0c             	sub    esp,0xc
c00058fc:	8d 43 50             	lea    eax,[ebx+0x50]
c00058ff:	6a 01                	push   0x1
c0005901:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0005904:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0005907:	50                   	push   eax
c0005908:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000590c:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005910:	50                   	push   eax
c0005911:	e8 dc c2 ff ff       	call   c0001bf2 <disk_write>
c0005916:	83 c4 20             	add    esp,0x20
c0005919:	89 c2                	mov    edx,eax
c000591b:	b8 01 00 00 00       	mov    eax,0x1
c0005920:	85 d2                	test   edx,edx
c0005922:	0f 85 7b 01 00 00    	jne    c0005aa3 <f_sync+0x1d6>
c0005928:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000592c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005930:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005933:	0f 85 11 01 00 00    	jne    c0005a4a <f_sync+0x17d>
c0005939:	89 d8                	mov    eax,ebx
c000593b:	e8 13 d6 ff ff       	call   c0002f53 <fill_first_frag>
c0005940:	85 c0                	test   eax,eax
c0005942:	0f 85 5b 01 00 00    	jne    c0005aa3 <f_sync+0x1d6>
c0005948:	83 c9 ff             	or     ecx,0xffffffff
c000594b:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000594e:	89 d8                	mov    eax,ebx
c0005950:	e8 c9 d5 ff ff       	call   c0002f1e <fill_last_frag>
c0005955:	85 c0                	test   eax,eax
c0005957:	0f 85 46 01 00 00    	jne    c0005aa3 <f_sync+0x1d6>
c000595d:	83 ec 0c             	sub    esp,0xc
c0005960:	68 60 04 00 00       	push   0x460
c0005965:	e8 f0 2a 00 00       	call   c000845a <ff_memalloc>
c000596a:	83 c4 10             	add    esp,0x10
c000596d:	89 c6                	mov    esi,eax
c000596f:	b8 11 00 00 00       	mov    eax,0x11
c0005974:	85 f6                	test   esi,esi
c0005976:	0f 84 27 01 00 00    	je     c0005aa3 <f_sync+0x1d6>
c000597c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005980:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005986:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005989:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000598c:	89 da                	mov    edx,ebx
c000598e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0005992:	e8 af df ff ff       	call   c0003946 <load_obj_xdir>
c0005997:	85 c0                	test   eax,eax
c0005999:	0f 85 95 00 00 00    	jne    c0005a34 <f_sync+0x167>
c000599f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059a3:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00059a6:	80 4a 04 20          	or     BYTE PTR [edx+0x4],0x20
c00059aa:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
c00059ad:	8a 53 07             	mov    dl,BYTE PTR [ebx+0x7]
c00059b0:	83 ca 01             	or     edx,0x1
c00059b3:	88 51 21             	mov    BYTE PTR [ecx+0x21],dl
c00059b6:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00059b9:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00059bc:	83 c0 34             	add    eax,0x34
c00059bf:	e8 d9 c2 ff ff       	call   c0001c9d <st_dword>
c00059c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059c8:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00059cb:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00059ce:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00059d1:	83 c0 38             	add    eax,0x38
c00059d4:	e8 c7 c2 ff ff       	call   c0001ca0 <st_qword>
c00059d9:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00059dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059e0:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00059e3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00059e6:	83 c0 28             	add    eax,0x28
c00059e9:	e8 b2 c2 ff ff       	call   c0001ca0 <st_qword>
c00059ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059f2:	ba 00 00 21 50       	mov    edx,0x50210000
c00059f7:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00059fa:	83 c0 0c             	add    eax,0xc
c00059fd:	e8 9b c2 ff ff       	call   c0001c9d <st_dword>
c0005a02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a06:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0005a09:	c6 42 15 00          	mov    BYTE PTR [edx+0x15],0x0
c0005a0d:	31 d2                	xor    edx,edx
c0005a0f:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a12:	83 c0 10             	add    eax,0x10
c0005a15:	e8 83 c2 ff ff       	call   c0001c9d <st_dword>
c0005a1a:	8d 44 24 14          	lea    eax,[esp+0x14]
c0005a1e:	e8 62 e1 ff ff       	call   c0003b85 <store_xdir>
c0005a23:	85 c0                	test   eax,eax
c0005a25:	75 0d                	jne    c0005a34 <f_sync+0x167>
c0005a27:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a2b:	e8 00 eb ff ff       	call   c0004530 <sync_fs>
c0005a30:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005a34:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005a38:	83 ec 0c             	sub    esp,0xc
c0005a3b:	56                   	push   esi
c0005a3c:	e8 2f 2a 00 00       	call   c0008470 <ff_memfree>
c0005a41:	83 c4 10             	add    esp,0x10
c0005a44:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005a48:	eb 59                	jmp    c0005aa3 <f_sync+0x1d6>
c0005a4a:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0005a4d:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c0005a50:	e8 b0 c9 ff ff       	call   c0002405 <move_window>
c0005a55:	85 c0                	test   eax,eax
c0005a57:	75 4a                	jne    c0005aa3 <f_sync+0x1d6>
c0005a59:	8b 73 48             	mov    esi,DWORD PTR [ebx+0x48]
c0005a5c:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c0005a60:	89 f2                	mov    edx,esi
c0005a62:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0005a65:	8b 03                	mov    eax,DWORD PTR [ebx]
c0005a67:	e8 5f f3 ff ff       	call   c0004dcb <st_clust.isra.1>
c0005a6c:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005a6f:	8d 46 1c             	lea    eax,[esi+0x1c]
c0005a72:	e8 26 c2 ff ff       	call   c0001c9d <st_dword>
c0005a77:	8d 46 16             	lea    eax,[esi+0x16]
c0005a7a:	ba 00 00 21 50       	mov    edx,0x50210000
c0005a7f:	e8 19 c2 ff ff       	call   c0001c9d <st_dword>
c0005a84:	8d 46 12             	lea    eax,[esi+0x12]
c0005a87:	31 d2                	xor    edx,edx
c0005a89:	e8 0b c2 ff ff       	call   c0001c99 <st_word>
c0005a8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a92:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005a96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a9a:	e8 91 ea ff ff       	call   c0004530 <sync_fs>
c0005a9f:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005aa3:	83 c4 64             	add    esp,0x64
c0005aa6:	5b                   	pop    ebx
c0005aa7:	5e                   	pop    esi
c0005aa8:	c3                   	ret    

c0005aa9 <f_close>:
c0005aa9:	53                   	push   ebx
c0005aaa:	83 ec 24             	sub    esp,0x24
c0005aad:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0005ab1:	53                   	push   ebx
c0005ab2:	e8 16 fe ff ff       	call   c00058cd <f_sync>
c0005ab7:	83 c4 10             	add    esp,0x10
c0005aba:	85 c0                	test   eax,eax
c0005abc:	75 15                	jne    c0005ad3 <f_close+0x2a>
c0005abe:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0005ac2:	89 d8                	mov    eax,ebx
c0005ac4:	e8 61 c8 ff ff       	call   c000232a <validate>
c0005ac9:	85 c0                	test   eax,eax
c0005acb:	75 06                	jne    c0005ad3 <f_close+0x2a>
c0005acd:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005ad3:	83 c4 18             	add    esp,0x18
c0005ad6:	5b                   	pop    ebx
c0005ad7:	c3                   	ret    

c0005ad8 <f_lseek>:
c0005ad8:	55                   	push   ebp
c0005ad9:	57                   	push   edi
c0005ada:	56                   	push   esi
c0005adb:	53                   	push   ebx
c0005adc:	83 ec 3c             	sub    esp,0x3c
c0005adf:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0005ae3:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0005ae7:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0005aeb:	89 04 24             	mov    DWORD PTR [esp],eax
c0005aee:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0005af2:	89 d8                	mov    eax,ebx
c0005af4:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c0005af8:	e8 2d c8 ff ff       	call   c000232a <validate>
c0005afd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b01:	85 c0                	test   eax,eax
c0005b03:	0f 85 7a 04 00 00    	jne    c0005f83 <f_lseek+0x4ab>
c0005b09:	0f b6 43 29          	movzx  eax,BYTE PTR [ebx+0x29]
c0005b0d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b11:	85 c0                	test   eax,eax
c0005b13:	0f 85 6a 04 00 00    	jne    c0005f83 <f_lseek+0x4ab>
c0005b19:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005b1d:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005b20:	74 0c                	je     c0005b2e <f_lseek+0x56>
c0005b22:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005b25:	85 c0                	test   eax,eax
c0005b27:	75 1f                	jne    c0005b48 <f_lseek+0x70>
c0005b29:	e9 b5 01 00 00       	jmp    c0005ce3 <f_lseek+0x20b>
c0005b2e:	83 c9 ff             	or     ecx,0xffffffff
c0005b31:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005b34:	89 d8                	mov    eax,ebx
c0005b36:	e8 e3 d3 ff ff       	call   c0002f1e <fill_last_frag>
c0005b3b:	85 c0                	test   eax,eax
c0005b3d:	74 e3                	je     c0005b22 <f_lseek+0x4a>
c0005b3f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b43:	e9 3b 04 00 00       	jmp    c0005f83 <f_lseek+0x4ab>
c0005b48:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c0005b4d:	0f 85 ac 00 00 00    	jne    c0005bff <f_lseek+0x127>
c0005b53:	83 3c 24 ff          	cmp    DWORD PTR [esp],0xffffffff
c0005b57:	0f 85 a2 00 00 00    	jne    c0005bff <f_lseek+0x127>
c0005b5d:	8d 78 04             	lea    edi,[eax+0x4]
c0005b60:	8b 6b 08             	mov    ebp,DWORD PTR [ebx+0x8]
c0005b63:	8b 00                	mov    eax,DWORD PTR [eax]
c0005b65:	be 02 00 00 00       	mov    esi,0x2
c0005b6a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005b6e:	85 ed                	test   ebp,ebp
c0005b70:	74 73                	je     c0005be5 <f_lseek+0x10d>
c0005b72:	89 e9                	mov    ecx,ebp
c0005b74:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005b7b:	ff 04 24             	inc    DWORD PTR [esp]
c0005b7e:	89 ca                	mov    edx,ecx
c0005b80:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005b84:	89 d8                	mov    eax,ebx
c0005b86:	e8 02 d4 ff ff       	call   c0002f8d <get_fat>
c0005b8b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005b8f:	83 f8 01             	cmp    eax,0x1
c0005b92:	77 11                	ja     c0005ba5 <f_lseek+0xcd>
c0005b94:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005b98:	c7 44 24 18 02 00 00 00 	mov    DWORD PTR [esp+0x18],0x2
c0005ba0:	e9 de 03 00 00       	jmp    c0005f83 <f_lseek+0x4ab>
c0005ba5:	83 f8 ff             	cmp    eax,0xffffffff
c0005ba8:	75 11                	jne    c0005bbb <f_lseek+0xe3>
c0005baa:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005bae:	c7 44 24 18 01 00 00 00 	mov    DWORD PTR [esp+0x18],0x1
c0005bb6:	e9 c8 03 00 00       	jmp    c0005f83 <f_lseek+0x4ab>
c0005bbb:	8d 51 01             	lea    edx,[ecx+0x1]
c0005bbe:	89 c1                	mov    ecx,eax
c0005bc0:	39 c2                	cmp    edx,eax
c0005bc2:	74 b7                	je     c0005b7b <f_lseek+0xa3>
c0005bc4:	83 c6 02             	add    esi,0x2
c0005bc7:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c0005bcb:	72 0b                	jb     c0005bd8 <f_lseek+0x100>
c0005bcd:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005bd0:	89 6f 04             	mov    DWORD PTR [edi+0x4],ebp
c0005bd3:	89 0f                	mov    DWORD PTR [edi],ecx
c0005bd5:	83 c7 08             	add    edi,0x8
c0005bd8:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005bdc:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005bdf:	76 04                	jbe    c0005be5 <f_lseek+0x10d>
c0005be1:	89 c5                	mov    ebp,eax
c0005be3:	eb 8d                	jmp    c0005b72 <f_lseek+0x9a>
c0005be5:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005be8:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0005bec:	89 30                	mov    DWORD PTR [eax],esi
c0005bee:	0f 87 87 03 00 00    	ja     c0005f7b <f_lseek+0x4a3>
c0005bf4:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0005bfa:	e9 84 03 00 00       	jmp    c0005f83 <f_lseek+0x4ab>
c0005bff:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005c02:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0005c05:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005c09:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c0d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c11:	39 04 24             	cmp    DWORD PTR [esp],eax
c0005c14:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005c18:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0005c1c:	73 0f                	jae    c0005c2d <f_lseek+0x155>
c0005c1e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005c21:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005c25:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005c29:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c2d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c31:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005c35:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0005c38:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005c3b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005c3f:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0005c43:	0f 84 3a 03 00 00    	je     c0005f83 <f_lseek+0x4ab>
c0005c49:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005c4d:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005c51:	83 c6 ff             	add    esi,0xffffffff
c0005c54:	89 d8                	mov    eax,ebx
c0005c56:	83 d7 ff             	adc    edi,0xffffffff
c0005c59:	89 f2                	mov    edx,esi
c0005c5b:	89 f9                	mov    ecx,edi
c0005c5d:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0005c61:	89 34 24             	mov    DWORD PTR [esp],esi
c0005c64:	e8 78 c2 ff ff       	call   c0001ee1 <clmt_clust>
c0005c69:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005c6d:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005c70:	89 c2                	mov    edx,eax
c0005c72:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005c76:	89 c8                	mov    eax,ecx
c0005c78:	e8 43 c2 ff ff       	call   c0001ec0 <clst2sect>
c0005c7d:	89 d7                	mov    edi,edx
c0005c7f:	09 c7                	or     edi,eax
c0005c81:	0f 84 0d ff ff ff    	je     c0005b94 <f_lseek+0xbc>
c0005c87:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0005c8b:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0005c91:	0f 84 ec 02 00 00    	je     c0005f83 <f_lseek+0x4ab>
c0005c97:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005c9b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005c9f:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005ca2:	0f b7 69 0a          	movzx  ebp,WORD PTR [ecx+0xa]
c0005ca6:	0f ac fe 09          	shrd   esi,edi,0x9
c0005caa:	4d                   	dec    ebp
c0005cab:	31 ff                	xor    edi,edi
c0005cad:	21 ee                	and    esi,ebp
c0005caf:	01 c6                	add    esi,eax
c0005cb1:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005cb4:	11 d7                	adc    edi,edx
c0005cb6:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005cb9:	39 fa                	cmp    edx,edi
c0005cbb:	75 08                	jne    c0005cc5 <f_lseek+0x1ed>
c0005cbd:	39 f0                	cmp    eax,esi
c0005cbf:	0f 84 be 02 00 00    	je     c0005f83 <f_lseek+0x4ab>
c0005cc5:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005cc8:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005ccc:	0f 89 80 02 00 00    	jns    c0005f52 <f_lseek+0x47a>
c0005cd2:	83 ec 0c             	sub    esp,0xc
c0005cd5:	6a 01                	push   0x1
c0005cd7:	52                   	push   edx
c0005cd8:	50                   	push   eax
c0005cd9:	55                   	push   ebp
c0005cda:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005cde:	e9 5a 02 00 00       	jmp    c0005f3d <f_lseek+0x465>
c0005ce3:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005ce7:	80 39 04             	cmp    BYTE PTR [ecx],0x4
c0005cea:	74 16                	je     c0005d02 <f_lseek+0x22a>
c0005cec:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0005cf1:	76 0f                	jbe    c0005d02 <f_lseek+0x22a>
c0005cf3:	c7 04 24 ff ff ff ff 	mov    DWORD PTR [esp],0xffffffff
c0005cfa:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005d02:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005d05:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005d08:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0005d0b:	89 c7                	mov    edi,eax
c0005d0d:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005d11:	73 0d                	jae    c0005d20 <f_lseek+0x248>
c0005d13:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005d17:	75 07                	jne    c0005d20 <f_lseek+0x248>
c0005d19:	89 14 24             	mov    DWORD PTR [esp],edx
c0005d1c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005d20:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005d23:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005d26:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005d2a:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005d31:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005d38:	0b 3c 24             	or     edi,DWORD PTR [esp]
c0005d3b:	75 09                	jne    c0005d46 <f_lseek+0x26e>
c0005d3d:	31 f6                	xor    esi,esi
c0005d3f:	31 ff                	xor    edi,edi
c0005d41:	e9 af 01 00 00       	jmp    c0005ef5 <f_lseek+0x41d>
c0005d46:	0f b7 49 0a          	movzx  ecx,WORD PTR [ecx+0xa]
c0005d4a:	89 d7                	mov    edi,edx
c0005d4c:	c1 e1 09             	shl    ecx,0x9
c0005d4f:	09 c7                	or     edi,eax
c0005d51:	89 cd                	mov    ebp,ecx
c0005d53:	74 6d                	je     c0005dc2 <f_lseek+0x2ea>
c0005d55:	83 c0 ff             	add    eax,0xffffffff
c0005d58:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005d5c:	83 d2 ff             	adc    edx,0xffffffff
c0005d5f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005d62:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005d66:	83 c0 ff             	add    eax,0xffffffff
c0005d69:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005d6d:	83 d2 ff             	adc    edx,0xffffffff
c0005d70:	31 ff                	xor    edi,edi
c0005d72:	57                   	push   edi
c0005d73:	51                   	push   ecx
c0005d74:	52                   	push   edx
c0005d75:	50                   	push   eax
c0005d76:	e8 99 09 02 00       	call   c0026714 <__udivdi3>
c0005d7b:	83 c4 10             	add    esp,0x10
c0005d7e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005d82:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0005d86:	57                   	push   edi
c0005d87:	55                   	push   ebp
c0005d88:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005d8c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005d90:	e8 7f 09 02 00       	call   c0026714 <__udivdi3>
c0005d95:	83 c4 10             	add    esp,0x10
c0005d98:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0005d9c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005da0:	19 d1                	sbb    ecx,edx
c0005da2:	72 1e                	jb     c0005dc2 <f_lseek+0x2ea>
c0005da4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005da8:	89 e9                	mov    ecx,ebp
c0005daa:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005dad:	f7 d9                	neg    ecx
c0005daf:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0005db2:	23 4c 24 08          	and    ecx,DWORD PTR [esp+0x8]
c0005db6:	29 0c 24             	sub    DWORD PTR [esp],ecx
c0005db9:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0005dbc:	19 54 24 04          	sbb    DWORD PTR [esp+0x4],edx
c0005dc0:	eb 28                	jmp    c0005dea <f_lseek+0x312>
c0005dc2:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005dc5:	85 c0                	test   eax,eax
c0005dc7:	75 1e                	jne    c0005de7 <f_lseek+0x30f>
c0005dc9:	31 d2                	xor    edx,edx
c0005dcb:	89 d8                	mov    eax,ebx
c0005dcd:	e8 a9 d4 ff ff       	call   c000327b <create_chain>
c0005dd2:	83 f8 01             	cmp    eax,0x1
c0005dd5:	0f 84 b9 fd ff ff    	je     c0005b94 <f_lseek+0xbc>
c0005ddb:	83 f8 ff             	cmp    eax,0xffffffff
c0005dde:	0f 84 c6 fd ff ff    	je     c0005baa <f_lseek+0xd2>
c0005de4:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005de7:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005dea:	85 c0                	test   eax,eax
c0005dec:	0f 84 4b ff ff ff    	je     c0005d3d <f_lseek+0x265>
c0005df2:	89 6c 24 10          	mov    DWORD PTR [esp+0x10],ebp
c0005df6:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005dfe:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c0005e01:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005e05:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005e08:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005e0b:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005e0f:	0f 83 9d 00 00 00    	jae    c0005eb2 <f_lseek+0x3da>
c0005e15:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005e19:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005e1d:	29 34 24             	sub    DWORD PTR [esp],esi
c0005e20:	19 7c 24 04          	sbb    DWORD PTR [esp+0x4],edi
c0005e24:	01 f2                	add    edx,esi
c0005e26:	11 f9                	adc    ecx,edi
c0005e28:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0005e2c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005e30:	89 4b 30             	mov    DWORD PTR [ebx+0x30],ecx
c0005e33:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c0005e36:	8a 4b 28             	mov    cl,BYTE PTR [ebx+0x28]
c0005e39:	f6 c1 02             	test   cl,0x2
c0005e3c:	74 35                	je     c0005e73 <f_lseek+0x39b>
c0005e3e:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0005e42:	39 7b 0c             	cmp    DWORD PTR [ebx+0xc],edi
c0005e45:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0005e48:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0005e4c:	73 16                	jae    c0005e64 <f_lseek+0x38c>
c0005e4e:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005e52:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005e56:	88 ca                	mov    dl,cl
c0005e58:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0005e5b:	83 ca 40             	or     edx,0x40
c0005e5e:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0005e61:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0005e64:	89 c2                	mov    edx,eax
c0005e66:	89 d8                	mov    eax,ebx
c0005e68:	e8 0e d4 ff ff       	call   c000327b <create_chain>
c0005e6d:	85 c0                	test   eax,eax
c0005e6f:	75 0b                	jne    c0005e7c <f_lseek+0x3a4>
c0005e71:	eb 30                	jmp    c0005ea3 <f_lseek+0x3cb>
c0005e73:	89 c2                	mov    edx,eax
c0005e75:	89 d8                	mov    eax,ebx
c0005e77:	e8 11 d1 ff ff       	call   c0002f8d <get_fat>
c0005e7c:	83 f8 ff             	cmp    eax,0xffffffff
c0005e7f:	0f 84 25 fd ff ff    	je     c0005baa <f_lseek+0xd2>
c0005e85:	83 f8 01             	cmp    eax,0x1
c0005e88:	0f 86 06 fd ff ff    	jbe    c0005b94 <f_lseek+0xbc>
c0005e8e:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005e92:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005e95:	0f 86 f9 fc ff ff    	jbe    c0005b94 <f_lseek+0xbc>
c0005e9b:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005e9e:	e9 5b ff ff ff       	jmp    c0005dfe <f_lseek+0x326>
c0005ea3:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005eaa:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005eb2:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0005eb5:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0005eb9:	01 7b 2c             	add    DWORD PTR [ebx+0x2c],edi
c0005ebc:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0005ebf:	11 6b 30             	adc    DWORD PTR [ebx+0x30],ebp
c0005ec2:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0005ec8:	0f 84 6f fe ff ff    	je     c0005d3d <f_lseek+0x265>
c0005ece:	89 c2                	mov    edx,eax
c0005ed0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005ed4:	e8 e7 bf ff ff       	call   c0001ec0 <clst2sect>
c0005ed9:	89 d7                	mov    edi,edx
c0005edb:	09 c7                	or     edi,eax
c0005edd:	0f 84 b1 fc ff ff    	je     c0005b94 <f_lseek+0xbc>
c0005ee3:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005ee7:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005eea:	0f ac fe 09          	shrd   esi,edi,0x9
c0005eee:	c1 ef 09             	shr    edi,0x9
c0005ef1:	01 c6                	add    esi,eax
c0005ef3:	11 d7                	adc    edi,edx
c0005ef5:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005ef8:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005efb:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005efe:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c0005f01:	19 d1                	sbb    ecx,edx
c0005f03:	73 0a                	jae    c0005f0f <f_lseek+0x437>
c0005f05:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005f08:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0005f0b:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005f0f:	a9 ff 01 00 00       	test   eax,0x1ff
c0005f14:	74 6d                	je     c0005f83 <f_lseek+0x4ab>
c0005f16:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005f19:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005f1c:	39 fa                	cmp    edx,edi
c0005f1e:	75 04                	jne    c0005f24 <f_lseek+0x44c>
c0005f20:	39 f0                	cmp    eax,esi
c0005f22:	74 5f                	je     c0005f83 <f_lseek+0x4ab>
c0005f24:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005f27:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005f2b:	79 25                	jns    c0005f52 <f_lseek+0x47a>
c0005f2d:	83 ec 0c             	sub    esp,0xc
c0005f30:	6a 01                	push   0x1
c0005f32:	52                   	push   edx
c0005f33:	50                   	push   eax
c0005f34:	55                   	push   ebp
c0005f35:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005f39:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005f3d:	50                   	push   eax
c0005f3e:	e8 af bc ff ff       	call   c0001bf2 <disk_write>
c0005f43:	83 c4 20             	add    esp,0x20
c0005f46:	85 c0                	test   eax,eax
c0005f48:	0f 85 5c fc ff ff    	jne    c0005baa <f_lseek+0xd2>
c0005f4e:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005f52:	83 ec 0c             	sub    esp,0xc
c0005f55:	6a 01                	push   0x1
c0005f57:	57                   	push   edi
c0005f58:	56                   	push   esi
c0005f59:	55                   	push   ebp
c0005f5a:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005f5e:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005f62:	50                   	push   eax
c0005f63:	e8 74 bc ff ff       	call   c0001bdc <disk_read>
c0005f68:	83 c4 20             	add    esp,0x20
c0005f6b:	85 c0                	test   eax,eax
c0005f6d:	0f 85 37 fc ff ff    	jne    c0005baa <f_lseek+0xd2>
c0005f73:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005f76:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005f79:	eb 08                	jmp    c0005f83 <f_lseek+0x4ab>
c0005f7b:	c7 44 24 18 11 00 00 00 	mov    DWORD PTR [esp+0x18],0x11
c0005f83:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005f87:	83 c4 3c             	add    esp,0x3c
c0005f8a:	5b                   	pop    ebx
c0005f8b:	5e                   	pop    esi
c0005f8c:	5f                   	pop    edi
c0005f8d:	5d                   	pop    ebp
c0005f8e:	c3                   	ret    

c0005f8f <f_opendir>:
c0005f8f:	56                   	push   esi
c0005f90:	b8 09 00 00 00       	mov    eax,0x9
c0005f95:	53                   	push   ebx
c0005f96:	83 ec 24             	sub    esp,0x24
c0005f99:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005f9d:	85 db                	test   ebx,ebx
c0005f9f:	0f 84 e6 00 00 00    	je     c000608b <f_opendir+0xfc>
c0005fa5:	31 c9                	xor    ecx,ecx
c0005fa7:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005fab:	8d 44 24 34          	lea    eax,[esp+0x34]
c0005faf:	e8 03 c7 ff ff       	call   c00026b7 <mount_volume>
c0005fb4:	85 c0                	test   eax,eax
c0005fb6:	0f 85 c9 00 00 00    	jne    c0006085 <f_opendir+0xf6>
c0005fbc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005fc0:	83 ec 0c             	sub    esp,0xc
c0005fc3:	89 03                	mov    DWORD PTR [ebx],eax
c0005fc5:	68 60 04 00 00       	push   0x460
c0005fca:	e8 8b 24 00 00       	call   c000845a <ff_memalloc>
c0005fcf:	83 c4 10             	add    esp,0x10
c0005fd2:	89 c6                	mov    esi,eax
c0005fd4:	b8 11 00 00 00       	mov    eax,0x11
c0005fd9:	85 f6                	test   esi,esi
c0005fdb:	0f 84 aa 00 00 00    	je     c000608b <f_opendir+0xfc>
c0005fe1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005fe5:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005feb:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005fee:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005ff1:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0005ff5:	89 d8                	mov    eax,ebx
c0005ff7:	e8 31 ee ff ff       	call   c0004e2d <follow_path>
c0005ffc:	85 c0                	test   eax,eax
c0005ffe:	75 61                	jne    c0006061 <f_opendir+0xd2>
c0006000:	80 7b 47 00          	cmp    BYTE PTR [ebx+0x47],0x0
c0006004:	78 46                	js     c000604c <f_opendir+0xbd>
c0006006:	b8 05 00 00 00       	mov    eax,0x5
c000600b:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c000600f:	74 50                	je     c0006061 <f_opendir+0xd2>
c0006011:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006015:	8a 01                	mov    al,BYTE PTR [ecx]
c0006017:	3c 04                	cmp    al,0x4
c0006019:	75 26                	jne    c0006041 <f_opendir+0xb2>
c000601b:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000601e:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0006021:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0006024:	30 d2                	xor    dl,dl
c0006026:	0f b6 43 07          	movzx  eax,BYTE PTR [ebx+0x7]
c000602a:	09 c2                	or     edx,eax
c000602c:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c000602f:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0006032:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0006035:	89 da                	mov    edx,ebx
c0006037:	8d 41 10             	lea    eax,[ecx+0x10]
c000603a:	e8 b4 ed ff ff       	call   c0004df3 <init_alloc_info.isra.2>
c000603f:	eb 0b                	jmp    c000604c <f_opendir+0xbd>
c0006041:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0006044:	e8 59 ed ff ff       	call   c0004da2 <ld_clust.isra.0>
c0006049:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000604c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006050:	31 d2                	xor    edx,edx
c0006052:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0006056:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c000605a:	89 d8                	mov    eax,ebx
c000605c:	e8 22 d1 ff ff       	call   c0003183 <dir_sdi>
c0006061:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006065:	83 ec 0c             	sub    esp,0xc
c0006068:	56                   	push   esi
c0006069:	e8 02 24 00 00       	call   c0008470 <ff_memfree>
c000606e:	83 c4 10             	add    esp,0x10
c0006071:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006075:	83 f8 04             	cmp    eax,0x4
c0006078:	74 06                	je     c0006080 <f_opendir+0xf1>
c000607a:	85 c0                	test   eax,eax
c000607c:	74 0d                	je     c000608b <f_opendir+0xfc>
c000607e:	eb 05                	jmp    c0006085 <f_opendir+0xf6>
c0006080:	b8 05 00 00 00       	mov    eax,0x5
c0006085:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000608b:	83 c4 24             	add    esp,0x24
c000608e:	5b                   	pop    ebx
c000608f:	5e                   	pop    esi
c0006090:	c3                   	ret    

c0006091 <f_closedir>:
c0006091:	53                   	push   ebx
c0006092:	83 ec 18             	sub    esp,0x18
c0006095:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0006099:	8d 54 24 0c          	lea    edx,[esp+0xc]
c000609d:	89 d8                	mov    eax,ebx
c000609f:	e8 86 c2 ff ff       	call   c000232a <validate>
c00060a4:	85 c0                	test   eax,eax
c00060a6:	75 06                	jne    c00060ae <f_closedir+0x1d>
c00060a8:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00060ae:	83 c4 18             	add    esp,0x18
c00060b1:	5b                   	pop    ebx
c00060b2:	c3                   	ret    

c00060b3 <f_readdir>:
c00060b3:	57                   	push   edi
c00060b4:	56                   	push   esi
c00060b5:	53                   	push   ebx
c00060b6:	83 ec 20             	sub    esp,0x20
c00060b9:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00060bd:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00060c1:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00060c5:	89 d8                	mov    eax,ebx
c00060c7:	e8 5e c2 ff ff       	call   c000232a <validate>
c00060cc:	85 c0                	test   eax,eax
c00060ce:	75 77                	jne    c0006147 <f_readdir+0x94>
c00060d0:	85 ff                	test   edi,edi
c00060d2:	75 0b                	jne    c00060df <f_readdir+0x2c>
c00060d4:	31 d2                	xor    edx,edx
c00060d6:	89 d8                	mov    eax,ebx
c00060d8:	e8 a6 d0 ff ff       	call   c0003183 <dir_sdi>
c00060dd:	eb 68                	jmp    c0006147 <f_readdir+0x94>
c00060df:	83 ec 0c             	sub    esp,0xc
c00060e2:	68 60 04 00 00       	push   0x460
c00060e7:	e8 6e 23 00 00       	call   c000845a <ff_memalloc>
c00060ec:	83 c4 10             	add    esp,0x10
c00060ef:	89 c6                	mov    esi,eax
c00060f1:	b8 11 00 00 00       	mov    eax,0x11
c00060f6:	85 f6                	test   esi,esi
c00060f8:	74 4d                	je     c0006147 <f_readdir+0x94>
c00060fa:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00060fe:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006104:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006107:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000610a:	31 d2                	xor    edx,edx
c000610c:	89 d8                	mov    eax,ebx
c000610e:	e8 80 d8 ff ff       	call   c0003993 <dir_read>
c0006113:	a9 fb ff ff ff       	test   eax,0xfffffffb
c0006118:	75 19                	jne    c0006133 <f_readdir+0x80>
c000611a:	89 fa                	mov    edx,edi
c000611c:	89 d8                	mov    eax,ebx
c000611e:	e8 7e ea ff ff       	call   c0004ba1 <get_fileinfo>
c0006123:	31 d2                	xor    edx,edx
c0006125:	89 d8                	mov    eax,ebx
c0006127:	e8 af d5 ff ff       	call   c00036db <dir_next>
c000612c:	83 f8 04             	cmp    eax,0x4
c000612f:	75 02                	jne    c0006133 <f_readdir+0x80>
c0006131:	31 c0                	xor    eax,eax
c0006133:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006137:	83 ec 0c             	sub    esp,0xc
c000613a:	56                   	push   esi
c000613b:	e8 30 23 00 00       	call   c0008470 <ff_memfree>
c0006140:	83 c4 10             	add    esp,0x10
c0006143:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006147:	83 c4 20             	add    esp,0x20
c000614a:	5b                   	pop    ebx
c000614b:	5e                   	pop    esi
c000614c:	5f                   	pop    edi
c000614d:	c3                   	ret    

c000614e <f_stat>:
c000614e:	57                   	push   edi
c000614f:	31 c9                	xor    ecx,ecx
c0006151:	56                   	push   esi
c0006152:	53                   	push   ebx
c0006153:	83 ec 50             	sub    esp,0x50
c0006156:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c000615a:	8d 54 24 04          	lea    edx,[esp+0x4]
c000615e:	8d 44 24 60          	lea    eax,[esp+0x60]
c0006162:	e8 50 c5 ff ff       	call   c00026b7 <mount_volume>
c0006167:	89 c3                	mov    ebx,eax
c0006169:	85 c0                	test   eax,eax
c000616b:	75 67                	jne    c00061d4 <f_stat+0x86>
c000616d:	83 ec 0c             	sub    esp,0xc
c0006170:	bb 11 00 00 00       	mov    ebx,0x11
c0006175:	68 60 04 00 00       	push   0x460
c000617a:	e8 db 22 00 00       	call   c000845a <ff_memalloc>
c000617f:	83 c4 10             	add    esp,0x10
c0006182:	89 c6                	mov    esi,eax
c0006184:	85 c0                	test   eax,eax
c0006186:	74 4c                	je     c00061d4 <f_stat+0x86>
c0006188:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000618c:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006192:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006195:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006198:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c000619c:	8d 44 24 04          	lea    eax,[esp+0x4]
c00061a0:	e8 88 ec ff ff       	call   c0004e2d <follow_path>
c00061a5:	89 c3                	mov    ebx,eax
c00061a7:	85 c0                	test   eax,eax
c00061a9:	75 1d                	jne    c00061c8 <f_stat+0x7a>
c00061ab:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c00061b0:	78 11                	js     c00061c3 <f_stat+0x75>
c00061b2:	85 ff                	test   edi,edi
c00061b4:	74 12                	je     c00061c8 <f_stat+0x7a>
c00061b6:	89 fa                	mov    edx,edi
c00061b8:	8d 44 24 04          	lea    eax,[esp+0x4]
c00061bc:	e8 e0 e9 ff ff       	call   c0004ba1 <get_fileinfo>
c00061c1:	eb 05                	jmp    c00061c8 <f_stat+0x7a>
c00061c3:	bb 06 00 00 00       	mov    ebx,0x6
c00061c8:	83 ec 0c             	sub    esp,0xc
c00061cb:	56                   	push   esi
c00061cc:	e8 9f 22 00 00       	call   c0008470 <ff_memfree>
c00061d1:	83 c4 10             	add    esp,0x10
c00061d4:	83 c4 50             	add    esp,0x50
c00061d7:	89 d8                	mov    eax,ebx
c00061d9:	5b                   	pop    ebx
c00061da:	5e                   	pop    esi
c00061db:	5f                   	pop    edi
c00061dc:	c3                   	ret    

c00061dd <f_getfree>:
c00061dd:	55                   	push   ebp
c00061de:	31 c9                	xor    ecx,ecx
c00061e0:	57                   	push   edi
c00061e1:	56                   	push   esi
c00061e2:	53                   	push   ebx
c00061e3:	83 ec 5c             	sub    esp,0x5c
c00061e6:	8d 54 24 24          	lea    edx,[esp+0x24]
c00061ea:	8d 44 24 70          	lea    eax,[esp+0x70]
c00061ee:	e8 c4 c4 ff ff       	call   c00026b7 <mount_volume>
c00061f3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00061f7:	85 c0                	test   eax,eax
c00061f9:	0f 85 9d 01 00 00    	jne    c000639c <f_getfree+0x1bf>
c00061ff:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006203:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0006207:	89 02                	mov    DWORD PTR [edx],eax
c0006209:	8b 48 1c             	mov    ecx,DWORD PTR [eax+0x1c]
c000620c:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c000620f:	8d 71 fe             	lea    esi,[ecx-0x2]
c0006212:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0006216:	39 f2                	cmp    edx,esi
c0006218:	77 0b                	ja     c0006225 <f_getfree+0x48>
c000621a:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c000621e:	89 10                	mov    DWORD PTR [eax],edx
c0006220:	e9 77 01 00 00       	jmp    c000639c <f_getfree+0x1bf>
c0006225:	8a 10                	mov    dl,BYTE PTR [eax]
c0006227:	80 fa 01             	cmp    dl,0x1
c000622a:	75 3a                	jne    c0006266 <f_getfree+0x89>
c000622c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0006230:	be 02 00 00 00       	mov    esi,0x2
c0006235:	31 db                	xor    ebx,ebx
c0006237:	89 f2                	mov    edx,esi
c0006239:	8d 44 24 28          	lea    eax,[esp+0x28]
c000623d:	e8 4b cd ff ff       	call   c0002f8d <get_fat>
c0006242:	83 f8 ff             	cmp    eax,0xffffffff
c0006245:	0f 84 28 01 00 00    	je     c0006373 <f_getfree+0x196>
c000624b:	83 f8 01             	cmp    eax,0x1
c000624e:	0f 84 29 01 00 00    	je     c000637d <f_getfree+0x1a0>
c0006254:	83 d3 00             	adc    ebx,0x0
c0006257:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000625b:	46                   	inc    esi
c000625c:	39 70 1c             	cmp    DWORD PTR [eax+0x1c],esi
c000625f:	77 d6                	ja     c0006237 <f_getfree+0x5a>
c0006261:	e9 25 01 00 00       	jmp    c000638b <f_getfree+0x1ae>
c0006266:	80 fa 04             	cmp    dl,0x4
c0006269:	0f 85 88 00 00 00    	jne    c00062f7 <f_getfree+0x11a>
c000626f:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c0006272:	31 ed                	xor    ebp,ebp
c0006274:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0006277:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000627b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000627f:	31 db                	xor    ebx,ebx
c0006281:	85 ed                	test   ebp,ebp
c0006283:	75 3f                	jne    c00062c4 <f_getfree+0xe7>
c0006285:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006289:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000628d:	83 c0 01             	add    eax,0x1
c0006290:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0006294:	83 d2 00             	adc    edx,0x0
c0006297:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000629b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000629f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00062a3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00062a7:	e8 59 c1 ff ff       	call   c0002405 <move_window>
c00062ac:	85 c0                	test   eax,eax
c00062ae:	0f 85 d3 00 00 00    	jne    c0006387 <f_getfree+0x1aa>
c00062b4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00062b8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00062bc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00062c0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00062c4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00062c8:	8d 4e f8             	lea    ecx,[esi-0x8]
c00062cb:	8a 44 28 54          	mov    al,BYTE PTR [eax+ebp*1+0x54]
c00062cf:	89 cf                	mov    edi,ecx
c00062d1:	85 f6                	test   esi,esi
c00062d3:	74 12                	je     c00062e7 <f_getfree+0x10a>
c00062d5:	88 c1                	mov    cl,al
c00062d7:	83 e1 01             	and    ecx,0x1
c00062da:	80 f9 01             	cmp    cl,0x1
c00062dd:	83 d3 00             	adc    ebx,0x0
c00062e0:	d0 e8                	shr    al,1
c00062e2:	4e                   	dec    esi
c00062e3:	39 fe                	cmp    esi,edi
c00062e5:	75 ea                	jne    c00062d1 <f_getfree+0xf4>
c00062e7:	45                   	inc    ebp
c00062e8:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00062ee:	85 f6                	test   esi,esi
c00062f0:	75 8f                	jne    c0006281 <f_getfree+0xa4>
c00062f2:	e9 94 00 00 00       	jmp    c000638b <f_getfree+0x1ae>
c00062f7:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c00062fa:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c00062fd:	31 f6                	xor    esi,esi
c00062ff:	31 db                	xor    ebx,ebx
c0006301:	85 f6                	test   esi,esi
c0006303:	75 1b                	jne    c0006320 <f_getfree+0x143>
c0006305:	89 d7                	mov    edi,edx
c0006307:	89 cd                	mov    ebp,ecx
c0006309:	83 c7 01             	add    edi,0x1
c000630c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006310:	83 d5 00             	adc    ebp,0x0
c0006313:	e8 ed c0 ff ff       	call   c0002405 <move_window>
c0006318:	85 c0                	test   eax,eax
c000631a:	75 6b                	jne    c0006387 <f_getfree+0x1aa>
c000631c:	89 fa                	mov    edx,edi
c000631e:	89 e9                	mov    ecx,ebp
c0006320:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006324:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0006328:	8d 44 30 54          	lea    eax,[eax+esi*1+0x54]
c000632c:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c000632f:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0006333:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0006337:	75 11                	jne    c000634a <f_getfree+0x16d>
c0006339:	e8 e9 b8 ff ff       	call   c0001c27 <ld_word>
c000633e:	66 83 f8 01          	cmp    ax,0x1
c0006342:	83 d3 00             	adc    ebx,0x0
c0006345:	83 c6 02             	add    esi,0x2
c0006348:	eb 13                	jmp    c000635d <f_getfree+0x180>
c000634a:	e8 e5 b8 ff ff       	call   c0001c34 <ld_dword>
c000634f:	25 ff ff ff 0f       	and    eax,0xfffffff
c0006354:	83 f8 01             	cmp    eax,0x1
c0006357:	83 d3 00             	adc    ebx,0x0
c000635a:	83 c6 04             	add    esi,0x4
c000635d:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0006363:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0006367:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000636b:	ff 4c 24 10          	dec    DWORD PTR [esp+0x10]
c000636f:	75 90                	jne    c0006301 <f_getfree+0x124>
c0006371:	eb 18                	jmp    c000638b <f_getfree+0x1ae>
c0006373:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c000637b:	eb 0e                	jmp    c000638b <f_getfree+0x1ae>
c000637d:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c0006385:	eb 04                	jmp    c000638b <f_getfree+0x1ae>
c0006387:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000638b:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c000638f:	89 18                	mov    DWORD PTR [eax],ebx
c0006391:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006395:	89 58 18             	mov    DWORD PTR [eax+0x18],ebx
c0006398:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c000639c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00063a0:	83 c4 5c             	add    esp,0x5c
c00063a3:	5b                   	pop    ebx
c00063a4:	5e                   	pop    esi
c00063a5:	5f                   	pop    edi
c00063a6:	5d                   	pop    ebp
c00063a7:	c3                   	ret    

c00063a8 <f_truncate>:
c00063a8:	56                   	push   esi
c00063a9:	53                   	push   ebx
c00063aa:	83 ec 14             	sub    esp,0x14
c00063ad:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00063b1:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00063b5:	89 d8                	mov    eax,ebx
c00063b7:	e8 6e bf ff ff       	call   c000232a <validate>
c00063bc:	89 c6                	mov    esi,eax
c00063be:	85 c0                	test   eax,eax
c00063c0:	0f 85 d2 00 00 00    	jne    c0006498 <f_truncate+0xf0>
c00063c6:	0f b6 73 29          	movzx  esi,BYTE PTR [ebx+0x29]
c00063ca:	85 f6                	test   esi,esi
c00063cc:	0f 85 c6 00 00 00    	jne    c0006498 <f_truncate+0xf0>
c00063d2:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c00063d6:	0f 84 b7 00 00 00    	je     c0006493 <f_truncate+0xeb>
c00063dc:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00063df:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00063e2:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c00063e5:	89 d1                	mov    ecx,edx
c00063e7:	1b 4b 10             	sbb    ecx,DWORD PTR [ebx+0x10]
c00063ea:	0f 83 a8 00 00 00    	jae    c0006498 <f_truncate+0xf0>
c00063f0:	09 c2                	or     edx,eax
c00063f2:	75 15                	jne    c0006409 <f_truncate+0x61>
c00063f4:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00063f7:	31 c9                	xor    ecx,ecx
c00063f9:	89 d8                	mov    eax,ebx
c00063fb:	e8 7a d0 ff ff       	call   c000347a <remove_chain>
c0006400:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0006407:	eb 35                	jmp    c000643e <f_truncate+0x96>
c0006409:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000640c:	89 d8                	mov    eax,ebx
c000640e:	e8 7a cb ff ff       	call   c0002f8d <get_fat>
c0006413:	89 c2                	mov    edx,eax
c0006415:	b8 01 00 00 00       	mov    eax,0x1
c000641a:	83 fa ff             	cmp    edx,0xffffffff
c000641d:	74 1f                	je     c000643e <f_truncate+0x96>
c000641f:	b8 02 00 00 00       	mov    eax,0x2
c0006424:	83 fa 01             	cmp    edx,0x1
c0006427:	74 15                	je     c000643e <f_truncate+0x96>
c0006429:	31 c0                	xor    eax,eax
c000642b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000642f:	39 51 1c             	cmp    DWORD PTR [ecx+0x1c],edx
c0006432:	76 0a                	jbe    c000643e <f_truncate+0x96>
c0006434:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0006437:	89 d8                	mov    eax,ebx
c0006439:	e8 3c d0 ff ff       	call   c000347a <remove_chain>
c000643e:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0006441:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0006444:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0006447:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c000644a:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c000644d:	83 ca 40             	or     edx,0x40
c0006450:	85 c0                	test   eax,eax
c0006452:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0006455:	75 35                	jne    c000648c <f_truncate+0xe4>
c0006457:	84 d2                	test   dl,dl
c0006459:	79 3d                	jns    c0006498 <f_truncate+0xf0>
c000645b:	83 ec 0c             	sub    esp,0xc
c000645e:	8d 43 50             	lea    eax,[ebx+0x50]
c0006461:	6a 01                	push   0x1
c0006463:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0006466:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0006469:	50                   	push   eax
c000646a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000646e:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0006472:	50                   	push   eax
c0006473:	e8 7a b7 ff ff       	call   c0001bf2 <disk_write>
c0006478:	83 c4 20             	add    esp,0x20
c000647b:	85 c0                	test   eax,eax
c000647d:	75 08                	jne    c0006487 <f_truncate+0xdf>
c000647f:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0006483:	31 f6                	xor    esi,esi
c0006485:	eb 11                	jmp    c0006498 <f_truncate+0xf0>
c0006487:	b8 01 00 00 00       	mov    eax,0x1
c000648c:	88 43 29             	mov    BYTE PTR [ebx+0x29],al
c000648f:	89 c6                	mov    esi,eax
c0006491:	eb 05                	jmp    c0006498 <f_truncate+0xf0>
c0006493:	be 07 00 00 00       	mov    esi,0x7
c0006498:	89 f0                	mov    eax,esi
c000649a:	83 c4 14             	add    esp,0x14
c000649d:	5b                   	pop    ebx
c000649e:	5e                   	pop    esi
c000649f:	c3                   	ret    

c00064a0 <f_unlink>:
c00064a0:	56                   	push   esi
c00064a1:	b9 02 00 00 00       	mov    ecx,0x2
c00064a6:	53                   	push   ebx
c00064a7:	81 ec e4 00 00 00    	sub    esp,0xe4
c00064ad:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00064b1:	8d 84 24 f0 00 00 00 	lea    eax,[esp+0xf0]
c00064b8:	e8 fa c1 ff ff       	call   c00026b7 <mount_volume>
c00064bd:	85 c0                	test   eax,eax
c00064bf:	0f 85 55 01 00 00    	jne    c000661a <f_unlink+0x17a>
c00064c5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00064c9:	83 ec 0c             	sub    esp,0xc
c00064cc:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c00064d0:	68 60 04 00 00       	push   0x460
c00064d5:	e8 80 1f 00 00       	call   c000845a <ff_memalloc>
c00064da:	83 c4 10             	add    esp,0x10
c00064dd:	89 c3                	mov    ebx,eax
c00064df:	b8 11 00 00 00       	mov    eax,0x11
c00064e4:	85 db                	test   ebx,ebx
c00064e6:	0f 84 2e 01 00 00    	je     c000661a <f_unlink+0x17a>
c00064ec:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00064f0:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c00064f6:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00064f9:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00064fc:	8b 94 24 f0 00 00 00 	mov    edx,DWORD PTR [esp+0xf0]
c0006503:	8d 44 24 48          	lea    eax,[esp+0x48]
c0006507:	e8 21 e9 ff ff       	call   c0004e2d <follow_path>
c000650c:	85 c0                	test   eax,eax
c000650e:	0f 85 f2 00 00 00    	jne    c0006606 <f_unlink+0x166>
c0006514:	b8 06 00 00 00       	mov    eax,0x6
c0006519:	80 bc 24 8f 00 00 00 00 	cmp    BYTE PTR [esp+0x8f],0x0
c0006521:	0f 88 df 00 00 00    	js     c0006606 <f_unlink+0x166>
c0006527:	f6 44 24 4e 01       	test   BYTE PTR [esp+0x4e],0x1
c000652c:	74 0a                	je     c0006538 <f_unlink+0x98>
c000652e:	b8 07 00 00 00       	mov    eax,0x7
c0006533:	e9 ce 00 00 00       	jmp    c0006606 <f_unlink+0x166>
c0006538:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000653c:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0006540:	8a 02                	mov    al,BYTE PTR [edx]
c0006542:	3c 04                	cmp    al,0x4
c0006544:	75 12                	jne    c0006558 <f_unlink+0xb8>
c0006546:	8d 42 10             	lea    eax,[edx+0x10]
c0006549:	8d 54 24 20          	lea    edx,[esp+0x20]
c000654d:	e8 a1 e8 ff ff       	call   c0004df3 <init_alloc_info.isra.2>
c0006552:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0006556:	eb 0e                	jmp    c0006566 <f_unlink+0xc6>
c0006558:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c000655f:	e8 3e e8 ff ff       	call   c0004da2 <ld_clust.isra.0>
c0006564:	89 c6                	mov    esi,eax
c0006566:	f6 44 24 4e 10       	test   BYTE PTR [esp+0x4e],0x10
c000656b:	75 12                	jne    c000657f <f_unlink+0xdf>
c000656d:	8d 44 24 48          	lea    eax,[esp+0x48]
c0006571:	e8 94 d6 ff ff       	call   c0003c0a <dir_remove>
c0006576:	85 c0                	test   eax,eax
c0006578:	74 6c                	je     c00065e6 <f_unlink+0x146>
c000657a:	e9 87 00 00 00       	jmp    c0006606 <f_unlink+0x166>
c000657f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006583:	89 b4 24 9c 00 00 00 	mov    DWORD PTR [esp+0x9c],esi
c000658a:	89 84 24 94 00 00 00 	mov    DWORD PTR [esp+0x94],eax
c0006591:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006594:	75 21                	jne    c00065b7 <f_unlink+0x117>
c0006596:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000659a:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000659e:	89 84 24 a0 00 00 00 	mov    DWORD PTR [esp+0xa0],eax
c00065a5:	89 94 24 a4 00 00 00 	mov    DWORD PTR [esp+0xa4],edx
c00065ac:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c00065b0:	88 84 24 9b 00 00 00 	mov    BYTE PTR [esp+0x9b],al
c00065b7:	31 d2                	xor    edx,edx
c00065b9:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c00065c0:	e8 be cb ff ff       	call   c0003183 <dir_sdi>
c00065c5:	85 c0                	test   eax,eax
c00065c7:	75 3d                	jne    c0006606 <f_unlink+0x166>
c00065c9:	31 d2                	xor    edx,edx
c00065cb:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c00065d2:	e8 bc d3 ff ff       	call   c0003993 <dir_read>
c00065d7:	85 c0                	test   eax,eax
c00065d9:	0f 84 4f ff ff ff    	je     c000652e <f_unlink+0x8e>
c00065df:	83 f8 04             	cmp    eax,0x4
c00065e2:	75 22                	jne    c0006606 <f_unlink+0x166>
c00065e4:	eb 87                	jmp    c000656d <f_unlink+0xcd>
c00065e6:	85 f6                	test   esi,esi
c00065e8:	75 0b                	jne    c00065f5 <f_unlink+0x155>
c00065ea:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00065ee:	e8 3d df ff ff       	call   c0004530 <sync_fs>
c00065f3:	eb 11                	jmp    c0006606 <f_unlink+0x166>
c00065f5:	31 c9                	xor    ecx,ecx
c00065f7:	89 f2                	mov    edx,esi
c00065f9:	8d 44 24 20          	lea    eax,[esp+0x20]
c00065fd:	e8 78 ce ff ff       	call   c000347a <remove_chain>
c0006602:	85 c0                	test   eax,eax
c0006604:	74 e4                	je     c00065ea <f_unlink+0x14a>
c0006606:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000660a:	83 ec 0c             	sub    esp,0xc
c000660d:	53                   	push   ebx
c000660e:	e8 5d 1e 00 00       	call   c0008470 <ff_memfree>
c0006613:	83 c4 10             	add    esp,0x10
c0006616:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000661a:	81 c4 e4 00 00 00    	add    esp,0xe4
c0006620:	5b                   	pop    ebx
c0006621:	5e                   	pop    esi
c0006622:	c3                   	ret    

c0006623 <f_mkdir>:
c0006623:	57                   	push   edi
c0006624:	b9 02 00 00 00       	mov    ecx,0x2
c0006629:	56                   	push   esi
c000662a:	53                   	push   ebx
c000662b:	83 c4 80             	add    esp,0xffffff80
c000662e:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006632:	8d 84 24 90 00 00 00 	lea    eax,[esp+0x90]
c0006639:	e8 79 c0 ff ff       	call   c00026b7 <mount_volume>
c000663e:	89 c3                	mov    ebx,eax
c0006640:	85 c0                	test   eax,eax
c0006642:	0f 85 fe 01 00 00    	jne    c0006846 <f_mkdir+0x223>
c0006648:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000664c:	bb 11 00 00 00       	mov    ebx,0x11
c0006651:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0006655:	83 ec 0c             	sub    esp,0xc
c0006658:	68 60 04 00 00       	push   0x460
c000665d:	e8 f8 1d 00 00       	call   c000845a <ff_memalloc>
c0006662:	83 c4 10             	add    esp,0x10
c0006665:	89 c7                	mov    edi,eax
c0006667:	85 c0                	test   eax,eax
c0006669:	0f 84 d7 01 00 00    	je     c0006846 <f_mkdir+0x223>
c000666f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006673:	8d 97 00 02 00 00    	lea    edx,[edi+0x200]
c0006679:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c000667c:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000667f:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c0006686:	8d 44 24 34          	lea    eax,[esp+0x34]
c000668a:	e8 9e e7 ff ff       	call   c0004e2d <follow_path>
c000668f:	89 c3                	mov    ebx,eax
c0006691:	85 c0                	test   eax,eax
c0006693:	74 3e                	je     c00066d3 <f_mkdir+0xb0>
c0006695:	83 f8 04             	cmp    eax,0x4
c0006698:	75 3e                	jne    c00066d8 <f_mkdir+0xb5>
c000669a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000669e:	31 d2                	xor    edx,edx
c00066a0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00066a4:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00066a8:	e8 ce cb ff ff       	call   c000327b <create_chain>
c00066ad:	89 c6                	mov    esi,eax
c00066af:	85 c0                	test   eax,eax
c00066b1:	74 0c                	je     c00066bf <f_mkdir+0x9c>
c00066b3:	bb 02 00 00 00       	mov    ebx,0x2
c00066b8:	83 f8 01             	cmp    eax,0x1
c00066bb:	74 07                	je     c00066c4 <f_mkdir+0xa1>
c00066bd:	eb 2a                	jmp    c00066e9 <f_mkdir+0xc6>
c00066bf:	bb 07 00 00 00       	mov    ebx,0x7
c00066c4:	31 c9                	xor    ecx,ecx
c00066c6:	89 f2                	mov    edx,esi
c00066c8:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00066cc:	e8 a9 cd ff ff       	call   c000347a <remove_chain>
c00066d1:	eb 05                	jmp    c00066d8 <f_mkdir+0xb5>
c00066d3:	bb 08 00 00 00       	mov    ebx,0x8
c00066d8:	83 ec 0c             	sub    esp,0xc
c00066db:	57                   	push   edi
c00066dc:	e8 8f 1d 00 00       	call   c0008470 <ff_memfree>
c00066e1:	83 c4 10             	add    esp,0x10
c00066e4:	e9 5d 01 00 00       	jmp    c0006846 <f_mkdir+0x223>
c00066e9:	bb 01 00 00 00       	mov    ebx,0x1
c00066ee:	83 f8 ff             	cmp    eax,0xffffffff
c00066f1:	74 d1                	je     c00066c4 <f_mkdir+0xa1>
c00066f3:	89 f2                	mov    edx,esi
c00066f5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066f9:	e8 c4 ce ff ff       	call   c00035c2 <dir_clear>
c00066fe:	89 c3                	mov    ebx,eax
c0006700:	85 c0                	test   eax,eax
c0006702:	75 c0                	jne    c00066c4 <f_mkdir+0xa1>
c0006704:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006708:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000670b:	74 69                	je     c0006776 <f_mkdir+0x153>
c000670d:	b9 0b 00 00 00       	mov    ecx,0xb
c0006712:	83 c0 54             	add    eax,0x54
c0006715:	ba 20 00 00 00       	mov    edx,0x20
c000671a:	e8 9c b5 ff ff       	call   c0001cbb <mem_set>
c000671f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006723:	ba 00 00 21 50       	mov    edx,0x50210000
c0006728:	c6 40 54 2e          	mov    BYTE PTR [eax+0x54],0x2e
c000672c:	c6 40 5f 10          	mov    BYTE PTR [eax+0x5f],0x10
c0006730:	83 c0 6a             	add    eax,0x6a
c0006733:	e8 65 b5 ff ff       	call   c0001c9d <st_dword>
c0006738:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000673c:	89 f1                	mov    ecx,esi
c000673e:	8d 50 54             	lea    edx,[eax+0x54]
c0006741:	e8 85 e6 ff ff       	call   c0004dcb <st_clust.isra.1>
c0006746:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000674a:	b9 20 00 00 00       	mov    ecx,0x20
c000674f:	8d 50 54             	lea    edx,[eax+0x54]
c0006752:	83 c0 74             	add    eax,0x74
c0006755:	e8 4c b5 ff ff       	call   c0001ca6 <mem_cpy>
c000675a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000675e:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c0006762:	c6 40 75 2e          	mov    BYTE PTR [eax+0x75],0x2e
c0006766:	8d 50 74             	lea    edx,[eax+0x74]
c0006769:	e8 5d e6 ff ff       	call   c0004dcb <st_clust.isra.1>
c000676e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006772:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006776:	8d 44 24 34          	lea    eax,[esp+0x34]
c000677a:	e8 2f db ff ff       	call   c00042ae <dir_register>
c000677f:	89 c3                	mov    ebx,eax
c0006781:	85 c0                	test   eax,eax
c0006783:	0f 85 3b ff ff ff    	jne    c00066c4 <f_mkdir+0xa1>
c0006789:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000678d:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006790:	75 74                	jne    c0006806 <f_mkdir+0x1e3>
c0006792:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006795:	ba 00 00 21 50       	mov    edx,0x50210000
c000679a:	83 c0 0c             	add    eax,0xc
c000679d:	e8 fb b4 ff ff       	call   c0001c9d <st_dword>
c00067a2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067a6:	89 f2                	mov    edx,esi
c00067a8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067ab:	83 c0 34             	add    eax,0x34
c00067ae:	e8 ea b4 ff ff       	call   c0001c9d <st_dword>
c00067b3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067b7:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00067bb:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067be:	c1 e2 09             	shl    edx,0x9
c00067c1:	83 c0 38             	add    eax,0x38
c00067c4:	e8 d4 b4 ff ff       	call   c0001c9d <st_dword>
c00067c9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067cd:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00067d1:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067d4:	c1 e2 09             	shl    edx,0x9
c00067d7:	83 c0 28             	add    eax,0x28
c00067da:	e8 be b4 ff ff       	call   c0001c9d <st_dword>
c00067df:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067e3:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00067e6:	c6 42 21 03          	mov    BYTE PTR [edx+0x21],0x3
c00067ea:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067ed:	c6 40 04 10          	mov    BYTE PTR [eax+0x4],0x10
c00067f1:	8d 44 24 34          	lea    eax,[esp+0x34]
c00067f5:	e8 8b d3 ff ff       	call   c0003b85 <store_xdir>
c00067fa:	89 c3                	mov    ebx,eax
c00067fc:	85 c0                	test   eax,eax
c00067fe:	0f 85 d4 fe ff ff    	jne    c00066d8 <f_mkdir+0xb5>
c0006804:	eb 30                	jmp    c0006836 <f_mkdir+0x213>
c0006806:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000680a:	ba 00 00 21 50       	mov    edx,0x50210000
c000680f:	83 c0 16             	add    eax,0x16
c0006812:	e8 86 b4 ff ff       	call   c0001c9d <st_dword>
c0006817:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000681b:	89 f1                	mov    ecx,esi
c000681d:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0006821:	e8 a5 e5 ff ff       	call   c0004dcb <st_clust.isra.1>
c0006826:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000682a:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c000682e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006832:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006836:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000683a:	e8 f1 dc ff ff       	call   c0004530 <sync_fs>
c000683f:	89 c3                	mov    ebx,eax
c0006841:	e9 92 fe ff ff       	jmp    c00066d8 <f_mkdir+0xb5>
c0006846:	83 ec 80             	sub    esp,0xffffff80
c0006849:	89 d8                	mov    eax,ebx
c000684b:	5b                   	pop    ebx
c000684c:	5e                   	pop    esi
c000684d:	5f                   	pop    edi
c000684e:	c3                   	ret    

c000684f <f_rename>:
c000684f:	55                   	push   ebp
c0006850:	57                   	push   edi
c0006851:	56                   	push   esi
c0006852:	53                   	push   ebx
c0006853:	81 ec fc 00 00 00    	sub    esp,0xfc
c0006859:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c0006860:	e8 a4 b9 ff ff       	call   c0002209 <get_ldnumber>
c0006865:	b9 02 00 00 00       	mov    ecx,0x2
c000686a:	8d 54 24 14          	lea    edx,[esp+0x14]
c000686e:	8d 84 24 10 01 00 00 	lea    eax,[esp+0x110]
c0006875:	e8 3d be ff ff       	call   c00026b7 <mount_volume>
c000687a:	85 c0                	test   eax,eax
c000687c:	0f 85 b5 02 00 00    	jne    c0006b37 <f_rename+0x2e8>
c0006882:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006886:	83 ec 0c             	sub    esp,0xc
c0006889:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000688d:	68 60 04 00 00       	push   0x460
c0006892:	e8 c3 1b 00 00       	call   c000845a <ff_memalloc>
c0006897:	83 c4 10             	add    esp,0x10
c000689a:	89 c3                	mov    ebx,eax
c000689c:	b8 11 00 00 00       	mov    eax,0x11
c00068a1:	85 db                	test   ebx,ebx
c00068a3:	0f 84 8e 02 00 00    	je     c0006b37 <f_rename+0x2e8>
c00068a9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068ad:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c00068b3:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00068b6:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00068b9:	8b 94 24 10 01 00 00 	mov    edx,DWORD PTR [esp+0x110]
c00068c0:	8d 44 24 58          	lea    eax,[esp+0x58]
c00068c4:	e8 64 e5 ff ff       	call   c0004e2d <follow_path>
c00068c9:	85 c0                	test   eax,eax
c00068cb:	0f 85 52 02 00 00    	jne    c0006b23 <f_rename+0x2d4>
c00068d1:	b8 06 00 00 00       	mov    eax,0x6
c00068d6:	f6 84 24 9f 00 00 00 a0 	test   BYTE PTR [esp+0x9f],0xa0
c00068de:	0f 85 3f 02 00 00    	jne    c0006b23 <f_rename+0x2d4>
c00068e4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068e8:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00068eb:	0f 85 05 01 00 00    	jne    c00069f6 <f_rename+0x1a7>
c00068f1:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00068f4:	b9 40 00 00 00       	mov    ecx,0x40
c00068f9:	8d 44 24 18          	lea    eax,[esp+0x18]
c00068fd:	e8 a4 b3 ff ff       	call   c0001ca6 <mem_cpy>
c0006902:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006907:	8d 54 24 58          	lea    edx,[esp+0x58]
c000690b:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006912:	e8 8f b3 ff ff       	call   c0001ca6 <mem_cpy>
c0006917:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c000691e:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006925:	e8 03 e5 ff ff       	call   c0004e2d <follow_path>
c000692a:	85 c0                	test   eax,eax
c000692c:	75 29                	jne    c0006957 <f_rename+0x108>
c000692e:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006932:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006939:	74 0a                	je     c0006945 <f_rename+0xf6>
c000693b:	b8 08 00 00 00       	mov    eax,0x8
c0006940:	e9 de 01 00 00       	jmp    c0006b23 <f_rename+0x2d4>
c0006945:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c000694c:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c0006953:	75 e6                	jne    c000693b <f_rename+0xec>
c0006955:	eb 09                	jmp    c0006960 <f_rename+0x111>
c0006957:	83 f8 04             	cmp    eax,0x4
c000695a:	0f 85 c3 01 00 00    	jne    c0006b23 <f_rename+0x2d4>
c0006960:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006967:	e8 42 d9 ff ff       	call   c00042ae <dir_register>
c000696c:	85 c0                	test   eax,eax
c000696e:	0f 85 af 01 00 00    	jne    c0006b23 <f_rename+0x2d4>
c0006974:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006978:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c000697b:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c000697e:	89 c5                	mov    ebp,eax
c0006980:	8a 46 23             	mov    al,BYTE PTR [esi+0x23]
c0006983:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0006987:	8d 46 24             	lea    eax,[esi+0x24]
c000698a:	e8 98 b2 ff ff       	call   c0001c27 <ld_word>
c000698f:	b9 40 00 00 00       	mov    ecx,0x40
c0006994:	89 c7                	mov    edi,eax
c0006996:	8d 54 24 18          	lea    edx,[esp+0x18]
c000699a:	89 f0                	mov    eax,esi
c000699c:	e8 05 b3 ff ff       	call   c0001ca6 <mem_cpy>
c00069a1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069a5:	89 e9                	mov    ecx,ebp
c00069a7:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00069aa:	88 48 01             	mov    BYTE PTR [eax+0x1],cl
c00069ad:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c00069b1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069b5:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00069b8:	88 4a 23             	mov    BYTE PTR [edx+0x23],cl
c00069bb:	0f b7 d7             	movzx  edx,di
c00069be:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00069c1:	83 c0 24             	add    eax,0x24
c00069c4:	e8 d0 b2 ff ff       	call   c0001c99 <st_word>
c00069c9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069cd:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00069d0:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c00069d3:	a8 10                	test   al,0x10
c00069d5:	75 06                	jne    c00069dd <f_rename+0x18e>
c00069d7:	83 c8 20             	or     eax,0x20
c00069da:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c00069dd:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00069e4:	e8 9c d1 ff ff       	call   c0003b85 <store_xdir>
c00069e9:	85 c0                	test   eax,eax
c00069eb:	0f 84 1c 01 00 00    	je     c0006b0d <f_rename+0x2be>
c00069f1:	e9 2d 01 00 00       	jmp    c0006b23 <f_rename+0x2d4>
c00069f6:	b9 20 00 00 00       	mov    ecx,0x20
c00069fb:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c0006a02:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006a06:	e8 9b b2 ff ff       	call   c0001ca6 <mem_cpy>
c0006a0b:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006a10:	8d 54 24 58          	lea    edx,[esp+0x58]
c0006a14:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a1b:	e8 86 b2 ff ff       	call   c0001ca6 <mem_cpy>
c0006a20:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006a27:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a2e:	e8 fa e3 ff ff       	call   c0004e2d <follow_path>
c0006a33:	85 c0                	test   eax,eax
c0006a35:	75 27                	jne    c0006a5e <f_rename+0x20f>
c0006a37:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006a3b:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006a42:	0f 85 f3 fe ff ff    	jne    c000693b <f_rename+0xec>
c0006a48:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006a4f:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c0006a56:	0f 85 df fe ff ff    	jne    c000693b <f_rename+0xec>
c0006a5c:	eb 09                	jmp    c0006a67 <f_rename+0x218>
c0006a5e:	83 f8 04             	cmp    eax,0x4
c0006a61:	0f 85 bc 00 00 00    	jne    c0006b23 <f_rename+0x2d4>
c0006a67:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a6e:	e8 3b d8 ff ff       	call   c00042ae <dir_register>
c0006a73:	85 c0                	test   eax,eax
c0006a75:	0f 85 a8 00 00 00    	jne    c0006b23 <f_rename+0x2d4>
c0006a7b:	8b b4 24 dc 00 00 00 	mov    esi,DWORD PTR [esp+0xdc]
c0006a82:	b9 13 00 00 00       	mov    ecx,0x13
c0006a87:	8d 46 0d             	lea    eax,[esi+0xd]
c0006a8a:	8d 54 24 25          	lea    edx,[esp+0x25]
c0006a8e:	e8 13 b2 ff ff       	call   c0001ca6 <mem_cpy>
c0006a93:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0006a97:	a8 10                	test   al,0x10
c0006a99:	75 03                	jne    c0006a9e <f_rename+0x24f>
c0006a9b:	83 c8 20             	or     eax,0x20
c0006a9e:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c0006aa1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006aa5:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006aa9:	f6 46 0b 10          	test   BYTE PTR [esi+0xb],0x10
c0006aad:	74 5e                	je     c0006b0d <f_rename+0x2be>
c0006aaf:	8b 84 24 ac 00 00 00 	mov    eax,DWORD PTR [esp+0xac]
c0006ab6:	39 44 24 60          	cmp    DWORD PTR [esp+0x60],eax
c0006aba:	74 51                	je     c0006b0d <f_rename+0x2be>
c0006abc:	89 f2                	mov    edx,esi
c0006abe:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0006ac2:	8a 07                	mov    al,BYTE PTR [edi]
c0006ac4:	e8 d9 e2 ff ff       	call   c0004da2 <ld_clust.isra.0>
c0006ac9:	89 c2                	mov    edx,eax
c0006acb:	89 f8                	mov    eax,edi
c0006acd:	e8 ee b3 ff ff       	call   c0001ec0 <clst2sect>
c0006ad2:	89 c6                	mov    esi,eax
c0006ad4:	89 d1                	mov    ecx,edx
c0006ad6:	b8 02 00 00 00       	mov    eax,0x2
c0006adb:	09 f2                	or     edx,esi
c0006add:	74 44                	je     c0006b23 <f_rename+0x2d4>
c0006adf:	89 f2                	mov    edx,esi
c0006ae1:	89 f8                	mov    eax,edi
c0006ae3:	e8 1d b9 ff ff       	call   c0002405 <move_window>
c0006ae8:	85 c0                	test   eax,eax
c0006aea:	75 37                	jne    c0006b23 <f_rename+0x2d4>
c0006aec:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006af0:	80 78 75 2e          	cmp    BYTE PTR [eax+0x75],0x2e
c0006af4:	75 17                	jne    c0006b0d <f_rename+0x2be>
c0006af6:	8d 50 74             	lea    edx,[eax+0x74]
c0006af9:	8b 8c 24 ac 00 00 00 	mov    ecx,DWORD PTR [esp+0xac]
c0006b00:	e8 c6 e2 ff ff       	call   c0004dcb <st_clust.isra.1>
c0006b05:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b09:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006b0d:	8d 44 24 58          	lea    eax,[esp+0x58]
c0006b11:	e8 f4 d0 ff ff       	call   c0003c0a <dir_remove>
c0006b16:	85 c0                	test   eax,eax
c0006b18:	75 09                	jne    c0006b23 <f_rename+0x2d4>
c0006b1a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b1e:	e8 0d da ff ff       	call   c0004530 <sync_fs>
c0006b23:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006b27:	83 ec 0c             	sub    esp,0xc
c0006b2a:	53                   	push   ebx
c0006b2b:	e8 40 19 00 00       	call   c0008470 <ff_memfree>
c0006b30:	83 c4 10             	add    esp,0x10
c0006b33:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006b37:	81 c4 fc 00 00 00    	add    esp,0xfc
c0006b3d:	5b                   	pop    ebx
c0006b3e:	5e                   	pop    esi
c0006b3f:	5f                   	pop    edi
c0006b40:	5d                   	pop    ebp
c0006b41:	c3                   	ret    

c0006b42 <f_chmod>:
c0006b42:	57                   	push   edi
c0006b43:	b9 02 00 00 00       	mov    ecx,0x2
c0006b48:	56                   	push   esi
c0006b49:	53                   	push   ebx
c0006b4a:	83 ec 60             	sub    esp,0x60
c0006b4d:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0006b51:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0006b55:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006b59:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006b5d:	e8 55 bb ff ff       	call   c00026b7 <mount_volume>
c0006b62:	85 c0                	test   eax,eax
c0006b64:	0f 85 af 00 00 00    	jne    c0006c19 <f_chmod+0xd7>
c0006b6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b6e:	83 ec 0c             	sub    esp,0xc
c0006b71:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006b75:	68 60 04 00 00       	push   0x460
c0006b7a:	e8 db 18 00 00       	call   c000845a <ff_memalloc>
c0006b7f:	83 c4 10             	add    esp,0x10
c0006b82:	89 c6                	mov    esi,eax
c0006b84:	b8 11 00 00 00       	mov    eax,0x11
c0006b89:	85 f6                	test   esi,esi
c0006b8b:	0f 84 88 00 00 00    	je     c0006c19 <f_chmod+0xd7>
c0006b91:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b95:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006b9b:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006b9e:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006ba1:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006ba5:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006ba9:	e8 7f e2 ff ff       	call   c0004e2d <follow_path>
c0006bae:	85 c0                	test   eax,eax
c0006bb0:	75 53                	jne    c0006c05 <f_chmod+0xc3>
c0006bb2:	b8 06 00 00 00       	mov    eax,0x6
c0006bb7:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006bbc:	75 47                	jne    c0006c05 <f_chmod+0xc3>
c0006bbe:	89 f9                	mov    ecx,edi
c0006bc0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bc4:	83 e1 27             	and    ecx,0x27
c0006bc7:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006bca:	75 1d                	jne    c0006be9 <f_chmod+0xa7>
c0006bcc:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006bcf:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006bd2:	21 cb                	and    ebx,ecx
c0006bd4:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006bd7:	88 58 04             	mov    BYTE PTR [eax+0x4],bl
c0006bda:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006bde:	e8 a2 cf ff ff       	call   c0003b85 <store_xdir>
c0006be3:	85 c0                	test   eax,eax
c0006be5:	75 1e                	jne    c0006c05 <f_chmod+0xc3>
c0006be7:	eb 13                	jmp    c0006bfc <f_chmod+0xba>
c0006be9:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0006bed:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006bf0:	21 cb                	and    ebx,ecx
c0006bf2:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006bf5:	88 5a 0b             	mov    BYTE PTR [edx+0xb],bl
c0006bf8:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006bfc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c00:	e8 2b d9 ff ff       	call   c0004530 <sync_fs>
c0006c05:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006c09:	83 ec 0c             	sub    esp,0xc
c0006c0c:	56                   	push   esi
c0006c0d:	e8 5e 18 00 00       	call   c0008470 <ff_memfree>
c0006c12:	83 c4 10             	add    esp,0x10
c0006c15:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006c19:	83 c4 60             	add    esp,0x60
c0006c1c:	5b                   	pop    ebx
c0006c1d:	5e                   	pop    esi
c0006c1e:	5f                   	pop    edi
c0006c1f:	c3                   	ret    

c0006c20 <f_utime>:
c0006c20:	56                   	push   esi
c0006c21:	b9 02 00 00 00       	mov    ecx,0x2
c0006c26:	53                   	push   ebx
c0006c27:	83 ec 64             	sub    esp,0x64
c0006c2a:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0006c2e:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006c32:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006c36:	e8 7c ba ff ff       	call   c00026b7 <mount_volume>
c0006c3b:	85 c0                	test   eax,eax
c0006c3d:	0f 85 b5 00 00 00    	jne    c0006cf8 <f_utime+0xd8>
c0006c43:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c47:	83 ec 0c             	sub    esp,0xc
c0006c4a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006c4e:	68 60 04 00 00       	push   0x460
c0006c53:	e8 02 18 00 00       	call   c000845a <ff_memalloc>
c0006c58:	83 c4 10             	add    esp,0x10
c0006c5b:	89 c3                	mov    ebx,eax
c0006c5d:	b8 11 00 00 00       	mov    eax,0x11
c0006c62:	85 db                	test   ebx,ebx
c0006c64:	0f 84 8e 00 00 00    	je     c0006cf8 <f_utime+0xd8>
c0006c6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c6e:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006c74:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006c77:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006c7a:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006c7e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006c82:	e8 a6 e1 ff ff       	call   c0004e2d <follow_path>
c0006c87:	85 c0                	test   eax,eax
c0006c89:	75 59                	jne    c0006ce4 <f_utime+0xc4>
c0006c8b:	b8 06 00 00 00       	mov    eax,0x6
c0006c90:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006c95:	75 4d                	jne    c0006ce4 <f_utime+0xc4>
c0006c97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c9b:	0f b7 56 08          	movzx  edx,WORD PTR [esi+0x8]
c0006c9f:	0f b7 4e 0a          	movzx  ecx,WORD PTR [esi+0xa]
c0006ca3:	c1 e2 10             	shl    edx,0x10
c0006ca6:	09 ca                	or     edx,ecx
c0006ca8:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006cab:	75 1a                	jne    c0006cc7 <f_utime+0xa7>
c0006cad:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006cb0:	83 c0 0c             	add    eax,0xc
c0006cb3:	e8 e5 af ff ff       	call   c0001c9d <st_dword>
c0006cb8:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006cbc:	e8 c4 ce ff ff       	call   c0003b85 <store_xdir>
c0006cc1:	85 c0                	test   eax,eax
c0006cc3:	75 1f                	jne    c0006ce4 <f_utime+0xc4>
c0006cc5:	eb 14                	jmp    c0006cdb <f_utime+0xbb>
c0006cc7:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006ccb:	83 c0 16             	add    eax,0x16
c0006cce:	e8 ca af ff ff       	call   c0001c9d <st_dword>
c0006cd3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006cd7:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006cdb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006cdf:	e8 4c d8 ff ff       	call   c0004530 <sync_fs>
c0006ce4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006ce8:	83 ec 0c             	sub    esp,0xc
c0006ceb:	53                   	push   ebx
c0006cec:	e8 7f 17 00 00       	call   c0008470 <ff_memfree>
c0006cf1:	83 c4 10             	add    esp,0x10
c0006cf4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006cf8:	83 c4 64             	add    esp,0x64
c0006cfb:	5b                   	pop    ebx
c0006cfc:	5e                   	pop    esi
c0006cfd:	c3                   	ret    

c0006cfe <f_getlabel>:
c0006cfe:	55                   	push   ebp
c0006cff:	31 c9                	xor    ecx,ecx
c0006d01:	57                   	push   edi
c0006d02:	56                   	push   esi
c0006d03:	53                   	push   ebx
c0006d04:	83 ec 6c             	sub    esp,0x6c
c0006d07:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006d0b:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006d12:	e8 a0 b9 ff ff       	call   c00026b7 <mount_volume>
c0006d17:	89 c6                	mov    esi,eax
c0006d19:	85 c0                	test   eax,eax
c0006d1b:	0f 85 c1 01 00 00    	jne    c0006ee2 <f_getlabel+0x1e4>
c0006d21:	83 bc 24 84 00 00 00 00 	cmp    DWORD PTR [esp+0x84],0x0
c0006d29:	0f 84 5f 01 00 00    	je     c0006e8e <f_getlabel+0x190>
c0006d2f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d33:	31 d2                	xor    edx,edx
c0006d35:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0006d39:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0006d41:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006d45:	e8 39 c4 ff ff       	call   c0003183 <dir_sdi>
c0006d4a:	85 c0                	test   eax,eax
c0006d4c:	0f 85 2d 01 00 00    	jne    c0006e7f <f_getlabel+0x181>
c0006d52:	ba 01 00 00 00       	mov    edx,0x1
c0006d57:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006d5b:	e8 33 cc ff ff       	call   c0003993 <dir_read>
c0006d60:	85 c0                	test   eax,eax
c0006d62:	0f 85 17 01 00 00    	jne    c0006e7f <f_getlabel+0x181>
c0006d68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d6c:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006d6f:	74 09                	je     c0006d7a <f_getlabel+0x7c>
c0006d71:	31 db                	xor    ebx,ebx
c0006d73:	31 c9                	xor    ecx,ecx
c0006d75:	e9 c8 00 00 00       	jmp    c0006e42 <f_getlabel+0x144>
c0006d7a:	31 ed                	xor    ebp,ebp
c0006d7c:	31 db                	xor    ebx,ebx
c0006d7e:	31 ff                	xor    edi,edi
c0006d80:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006d84:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0006d88:	39 fa                	cmp    edx,edi
c0006d8a:	76 4b                	jbe    c0006dd7 <f_getlabel+0xd9>
c0006d8c:	47                   	inc    edi
c0006d8d:	8d 14 3f             	lea    edx,[edi+edi*1]
c0006d90:	01 d0                	add    eax,edx
c0006d92:	e8 90 ae ff ff       	call   c0001c27 <ld_word>
c0006d97:	66 85 ed             	test   bp,bp
c0006d9a:	75 0d                	jne    c0006da9 <f_getlabel+0xab>
c0006d9c:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0006da2:	66 81 fa ff 07       	cmp    dx,0x7ff
c0006da7:	76 28                	jbe    c0006dd1 <f_getlabel+0xd3>
c0006da9:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006db0:	89 e9                	mov    ecx,ebp
c0006db2:	01 da                	add    edx,ebx
c0006db4:	c1 e1 10             	shl    ecx,0x10
c0006db7:	0f b7 c0             	movzx  eax,ax
c0006dba:	09 c8                	or     eax,ecx
c0006dbc:	b9 04 00 00 00       	mov    ecx,0x4
c0006dc1:	e8 01 b0 ff ff       	call   c0001dc7 <put_utf>
c0006dc6:	84 c0                	test   al,al
c0006dc8:	74 0b                	je     c0006dd5 <f_getlabel+0xd7>
c0006dca:	0f b6 c0             	movzx  eax,al
c0006dcd:	01 c3                	add    ebx,eax
c0006dcf:	31 c0                	xor    eax,eax
c0006dd1:	89 c5                	mov    ebp,eax
c0006dd3:	eb ab                	jmp    c0006d80 <f_getlabel+0x82>
c0006dd5:	31 db                	xor    ebx,ebx
c0006dd7:	66 85 ed             	test   bp,bp
c0006dda:	74 02                	je     c0006dde <f_getlabel+0xe0>
c0006ddc:	31 db                	xor    ebx,ebx
c0006dde:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006de5:	c6 04 18 00          	mov    BYTE PTR [eax+ebx*1],0x0
c0006de9:	e9 a0 00 00 00       	jmp    c0006e8e <f_getlabel+0x190>
c0006dee:	83 ff 0b             	cmp    edi,0xb
c0006df1:	74 11                	je     c0006e04 <f_getlabel+0x106>
c0006df3:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0006df8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006dfc:	8d 79 02             	lea    edi,[ecx+0x2]
c0006dff:	c1 e0 08             	shl    eax,0x8
c0006e02:	09 c2                	or     edx,eax
c0006e04:	0f b7 d2             	movzx  edx,dx
c0006e07:	50                   	push   eax
c0006e08:	50                   	push   eax
c0006e09:	68 b5 01 00 00       	push   0x1b5
c0006e0e:	52                   	push   edx
c0006e0f:	e8 03 17 00 00       	call   c0008517 <ff_oem2uni>
c0006e14:	83 c4 10             	add    esp,0x10
c0006e17:	66 85 c0             	test   ax,ax
c0006e1a:	74 46                	je     c0006e62 <f_getlabel+0x164>
c0006e1c:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006e23:	0f b7 c0             	movzx  eax,ax
c0006e26:	01 da                	add    edx,ebx
c0006e28:	b9 04 00 00 00       	mov    ecx,0x4
c0006e2d:	e8 95 af ff ff       	call   c0001dc7 <put_utf>
c0006e32:	84 c0                	test   al,al
c0006e34:	74 2c                	je     c0006e62 <f_getlabel+0x164>
c0006e36:	0f b6 c0             	movzx  eax,al
c0006e39:	01 c3                	add    ebx,eax
c0006e3b:	83 ff 0b             	cmp    edi,0xb
c0006e3e:	74 24                	je     c0006e64 <f_getlabel+0x166>
c0006e40:	89 f9                	mov    ecx,edi
c0006e42:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0006e46:	8d 79 01             	lea    edi,[ecx+0x1]
c0006e49:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0006e4e:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0006e53:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006e57:	e8 9f ae ff ff       	call   c0001cfb <dbc_1st>
c0006e5c:	85 c0                	test   eax,eax
c0006e5e:	74 a4                	je     c0006e04 <f_getlabel+0x106>
c0006e60:	eb 8c                	jmp    c0006dee <f_getlabel+0xf0>
c0006e62:	31 db                	xor    ebx,ebx
c0006e64:	03 9c 24 84 00 00 00 	add    ebx,DWORD PTR [esp+0x84]
c0006e6b:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0006e6e:	39 9c 24 84 00 00 00 	cmp    DWORD PTR [esp+0x84],ebx
c0006e75:	74 17                	je     c0006e8e <f_getlabel+0x190>
c0006e77:	4b                   	dec    ebx
c0006e78:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c0006e7b:	74 ee                	je     c0006e6b <f_getlabel+0x16d>
c0006e7d:	eb 0f                	jmp    c0006e8e <f_getlabel+0x190>
c0006e7f:	83 f8 04             	cmp    eax,0x4
c0006e82:	75 5c                	jne    c0006ee0 <f_getlabel+0x1e2>
c0006e84:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006e8b:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006e8e:	83 bc 24 88 00 00 00 00 	cmp    DWORD PTR [esp+0x88],0x0
c0006e96:	74 4a                	je     c0006ee2 <f_getlabel+0x1e4>
c0006e98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e9c:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0006e9f:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0006ea2:	e8 5e b5 ff ff       	call   c0002405 <move_window>
c0006ea7:	89 c6                	mov    esi,eax
c0006ea9:	85 c0                	test   eax,eax
c0006eab:	75 35                	jne    c0006ee2 <f_getlabel+0x1e4>
c0006ead:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006eb1:	b8 43 00 00 00       	mov    eax,0x43
c0006eb6:	8a 0a                	mov    cl,BYTE PTR [edx]
c0006eb8:	80 f9 03             	cmp    cl,0x3
c0006ebb:	74 0f                	je     c0006ecc <f_getlabel+0x1ce>
c0006ebd:	31 c0                	xor    eax,eax
c0006ebf:	80 f9 04             	cmp    cl,0x4
c0006ec2:	0f 94 c0             	sete   al
c0006ec5:	48                   	dec    eax
c0006ec6:	83 e0 c3             	and    eax,0xffffffc3
c0006ec9:	83 c0 64             	add    eax,0x64
c0006ecc:	8d 44 02 54          	lea    eax,[edx+eax*1+0x54]
c0006ed0:	e8 5f ad ff ff       	call   c0001c34 <ld_dword>
c0006ed5:	8b bc 24 88 00 00 00 	mov    edi,DWORD PTR [esp+0x88]
c0006edc:	89 07                	mov    DWORD PTR [edi],eax
c0006ede:	eb 02                	jmp    c0006ee2 <f_getlabel+0x1e4>
c0006ee0:	89 c6                	mov    esi,eax
c0006ee2:	83 c4 6c             	add    esp,0x6c
c0006ee5:	89 f0                	mov    eax,esi
c0006ee7:	5b                   	pop    ebx
c0006ee8:	5e                   	pop    esi
c0006ee9:	5f                   	pop    edi
c0006eea:	5d                   	pop    ebp
c0006eeb:	c3                   	ret    

c0006eec <f_setlabel>:
c0006eec:	56                   	push   esi
c0006eed:	b9 02 00 00 00       	mov    ecx,0x2
c0006ef2:	53                   	push   ebx
c0006ef3:	83 ec 74             	sub    esp,0x74
c0006ef6:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006efa:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006f01:	e8 b1 b7 ff ff       	call   c00026b7 <mount_volume>
c0006f06:	89 c6                	mov    esi,eax
c0006f08:	85 c0                	test   eax,eax
c0006f0a:	0f 85 41 02 00 00    	jne    c0007151 <f_setlabel+0x265>
c0006f10:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006f14:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006f17:	0f 85 8e 00 00 00    	jne    c0006fab <f_setlabel+0xbf>
c0006f1d:	b9 16 00 00 00       	mov    ecx,0x16
c0006f22:	31 d2                	xor    edx,edx
c0006f24:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006f28:	31 db                	xor    ebx,ebx
c0006f2a:	e8 8c ad ff ff       	call   c0001cbb <mem_set>
c0006f2f:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006f36:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006f39:	0f 86 0a 01 00 00    	jbe    c0007049 <f_setlabel+0x15d>
c0006f3f:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006f46:	e8 b6 ad ff ff       	call   c0001d01 <tchar2uni>
c0006f4b:	89 c6                	mov    esi,eax
c0006f4d:	3d ff ff 00 00       	cmp    eax,0xffff
c0006f52:	76 2a                	jbe    c0006f7e <f_setlabel+0x92>
c0006f54:	83 f8 ff             	cmp    eax,0xffffffff
c0006f57:	74 05                	je     c0006f5e <f_setlabel+0x72>
c0006f59:	83 fb 09             	cmp    ebx,0x9
c0006f5c:	76 0a                	jbe    c0006f68 <f_setlabel+0x7c>
c0006f5e:	be 06 00 00 00       	mov    esi,0x6
c0006f63:	e9 e9 01 00 00       	jmp    c0007151 <f_setlabel+0x265>
c0006f68:	89 c2                	mov    edx,eax
c0006f6a:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006f6e:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006f71:	c1 ea 10             	shr    edx,0x10
c0006f74:	01 c8                	add    eax,ecx
c0006f76:	43                   	inc    ebx
c0006f77:	e8 1d ad ff ff       	call   c0001c99 <st_word>
c0006f7c:	eb 04                	jmp    c0006f82 <f_setlabel+0x96>
c0006f7e:	85 c0                	test   eax,eax
c0006f80:	74 dc                	je     c0006f5e <f_setlabel+0x72>
c0006f82:	89 f2                	mov    edx,esi
c0006f84:	b8 b7 91 02 c0       	mov    eax,0xc00291b7
c0006f89:	e8 5b ad ff ff       	call   c0001ce9 <chk_chr>
c0006f8e:	85 c0                	test   eax,eax
c0006f90:	75 cc                	jne    c0006f5e <f_setlabel+0x72>
c0006f92:	83 fb 0a             	cmp    ebx,0xa
c0006f95:	77 c7                	ja     c0006f5e <f_setlabel+0x72>
c0006f97:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006f9a:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006f9e:	0f b7 d6             	movzx  edx,si
c0006fa1:	01 c8                	add    eax,ecx
c0006fa3:	43                   	inc    ebx
c0006fa4:	e8 f0 ac ff ff       	call   c0001c99 <st_word>
c0006fa9:	eb 84                	jmp    c0006f2f <f_setlabel+0x43>
c0006fab:	b9 0b 00 00 00       	mov    ecx,0xb
c0006fb0:	ba 20 00 00 00       	mov    edx,0x20
c0006fb5:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006fb9:	31 db                	xor    ebx,ebx
c0006fbb:	e8 fb ac ff ff       	call   c0001cbb <mem_set>
c0006fc0:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006fc7:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006fca:	76 60                	jbe    c000702c <f_setlabel+0x140>
c0006fcc:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006fd3:	e8 29 ad ff ff       	call   c0001d01 <tchar2uni>
c0006fd8:	3d ff ff 00 00       	cmp    eax,0xffff
c0006fdd:	0f 87 7b ff ff ff    	ja     c0006f5e <f_setlabel+0x72>
c0006fe3:	83 ec 0c             	sub    esp,0xc
c0006fe6:	50                   	push   eax
c0006fe7:	e8 97 15 00 00       	call   c0008583 <ff_wtoupper>
c0006fec:	5a                   	pop    edx
c0006fed:	59                   	pop    ecx
c0006fee:	68 b5 01 00 00       	push   0x1b5
c0006ff3:	50                   	push   eax
c0006ff4:	e8 8e 14 00 00       	call   c0008487 <ff_uni2oem>
c0006ff9:	83 c4 10             	add    esp,0x10
c0006ffc:	89 c6                	mov    esi,eax
c0006ffe:	66 85 c0             	test   ax,ax
c0007001:	0f 84 57 ff ff ff    	je     c0006f5e <f_setlabel+0x72>
c0007007:	0f b7 d0             	movzx  edx,ax
c000700a:	b8 b0 91 02 c0       	mov    eax,0xc00291b0
c000700f:	e8 d5 ac ff ff       	call   c0001ce9 <chk_chr>
c0007014:	85 c0                	test   eax,eax
c0007016:	0f 85 42 ff ff ff    	jne    c0006f5e <f_setlabel+0x72>
c000701c:	66 81 fe ff 00       	cmp    si,0xff
c0007021:	0f 87 14 01 00 00    	ja     c000713b <f_setlabel+0x24f>
c0007027:	e9 fa 00 00 00       	jmp    c0007126 <f_setlabel+0x23a>
c000702c:	80 7c 24 0e e5       	cmp    BYTE PTR [esp+0xe],0xe5
c0007031:	0f 84 27 ff ff ff    	je     c0006f5e <f_setlabel+0x72>
c0007037:	85 db                	test   ebx,ebx
c0007039:	74 0e                	je     c0007049 <f_setlabel+0x15d>
c000703b:	8d 43 ff             	lea    eax,[ebx-0x1]
c000703e:	80 7c 1c 0d 20       	cmp    BYTE PTR [esp+ebx*1+0xd],0x20
c0007043:	75 04                	jne    c0007049 <f_setlabel+0x15d>
c0007045:	89 c3                	mov    ebx,eax
c0007047:	eb ee                	jmp    c0007037 <f_setlabel+0x14b>
c0007049:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000704d:	31 d2                	xor    edx,edx
c000704f:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0007053:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000705b:	8d 44 24 24          	lea    eax,[esp+0x24]
c000705f:	e8 1f c1 ff ff       	call   c0003183 <dir_sdi>
c0007064:	89 c6                	mov    esi,eax
c0007066:	85 c0                	test   eax,eax
c0007068:	0f 85 e3 00 00 00    	jne    c0007151 <f_setlabel+0x265>
c000706e:	ba 01 00 00 00       	mov    edx,0x1
c0007073:	8d 44 24 24          	lea    eax,[esp+0x24]
c0007077:	e8 17 c9 ff ff       	call   c0003993 <dir_read>
c000707c:	85 c0                	test   eax,eax
c000707e:	75 21                	jne    c00070a1 <f_setlabel+0x1b5>
c0007080:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007084:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007088:	80 3a 04             	cmp    BYTE PTR [edx],0x4
c000708b:	74 5d                	je     c00070ea <f_setlabel+0x1fe>
c000708d:	85 db                	test   ebx,ebx
c000708f:	74 0b                	je     c000709c <f_setlabel+0x1b0>
c0007091:	b9 0b 00 00 00       	mov    ecx,0xb
c0007096:	8d 54 24 0e          	lea    edx,[esp+0xe]
c000709a:	eb 70                	jmp    c000710c <f_setlabel+0x220>
c000709c:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c000709f:	eb 70                	jmp    c0007111 <f_setlabel+0x225>
c00070a1:	83 f8 04             	cmp    eax,0x4
c00070a4:	75 7c                	jne    c0007122 <f_setlabel+0x236>
c00070a6:	85 db                	test   ebx,ebx
c00070a8:	0f 84 a3 00 00 00    	je     c0007151 <f_setlabel+0x265>
c00070ae:	ba 01 00 00 00       	mov    edx,0x1
c00070b3:	8d 44 24 24          	lea    eax,[esp+0x24]
c00070b7:	e8 51 ca ff ff       	call   c0003b0d <dir_alloc>
c00070bc:	89 c6                	mov    esi,eax
c00070be:	85 c0                	test   eax,eax
c00070c0:	0f 85 8b 00 00 00    	jne    c0007151 <f_setlabel+0x265>
c00070c6:	31 d2                	xor    edx,edx
c00070c8:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070cc:	b9 20 00 00 00       	mov    ecx,0x20
c00070d1:	e8 e5 ab ff ff       	call   c0001cbb <mem_set>
c00070d6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00070da:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00070dd:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070e1:	75 18                	jne    c00070fb <f_setlabel+0x20f>
c00070e3:	c6 00 83             	mov    BYTE PTR [eax],0x83
c00070e6:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070ea:	88 58 01             	mov    BYTE PTR [eax+0x1],bl
c00070ed:	b9 16 00 00 00       	mov    ecx,0x16
c00070f2:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070f6:	83 c0 02             	add    eax,0x2
c00070f9:	eb 9b                	jmp    c0007096 <f_setlabel+0x1aa>
c00070fb:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c00070ff:	b9 0b 00 00 00       	mov    ecx,0xb
c0007104:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0007108:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000710c:	e8 95 ab ff ff       	call   c0001ca6 <mem_cpy>
c0007111:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007115:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0007119:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000711d:	e8 0e d4 ff ff       	call   c0004530 <sync_fs>
c0007122:	89 c6                	mov    esi,eax
c0007124:	eb 2b                	jmp    c0007151 <f_setlabel+0x265>
c0007126:	83 fb 0a             	cmp    ebx,0xa
c0007129:	0f 87 2f fe ff ff    	ja     c0006f5e <f_setlabel+0x72>
c000712f:	89 f0                	mov    eax,esi
c0007131:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0007135:	43                   	inc    ebx
c0007136:	e9 85 fe ff ff       	jmp    c0006fc0 <f_setlabel+0xd4>
c000713b:	83 fb 09             	cmp    ebx,0x9
c000713e:	0f 87 1a fe ff ff    	ja     c0006f5e <f_setlabel+0x72>
c0007144:	89 f0                	mov    eax,esi
c0007146:	66 c1 e8 08          	shr    ax,0x8
c000714a:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c000714e:	43                   	inc    ebx
c000714f:	eb de                	jmp    c000712f <f_setlabel+0x243>
c0007151:	89 f0                	mov    eax,esi
c0007153:	83 c4 74             	add    esp,0x74
c0007156:	5b                   	pop    ebx
c0007157:	5e                   	pop    esi
c0007158:	c3                   	ret    

c0007159 <f_forward>:
c0007159:	55                   	push   ebp
c000715a:	57                   	push   edi
c000715b:	56                   	push   esi
c000715c:	53                   	push   ebx
c000715d:	83 ec 2c             	sub    esp,0x2c
c0007160:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0007164:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0007168:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000716e:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0007172:	89 d8                	mov    eax,ebx
c0007174:	e8 b1 b1 ff ff       	call   c000232a <validate>
c0007179:	89 c5                	mov    ebp,eax
c000717b:	85 c0                	test   eax,eax
c000717d:	0f 85 aa 01 00 00    	jne    c000732d <f_forward+0x1d4>
c0007183:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0007187:	85 ed                	test   ebp,ebp
c0007189:	0f 85 9e 01 00 00    	jne    c000732d <f_forward+0x1d4>
c000718f:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c0007193:	0f 84 8f 01 00 00    	je     c0007328 <f_forward+0x1cf>
c0007199:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000719c:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000719f:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c00071a2:	bf 00 00 00 00       	mov    edi,0x0
c00071a7:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c00071aa:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c00071ae:	89 d1                	mov    ecx,edx
c00071b0:	19 f9                	sbb    ecx,edi
c00071b2:	0f 83 cf 00 00 00    	jae    c0007287 <f_forward+0x12e>
c00071b8:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00071bc:	e9 c6 00 00 00       	jmp    c0007287 <f_forward+0x12e>
c00071c1:	50                   	push   eax
c00071c2:	50                   	push   eax
c00071c3:	6a 00                	push   0x0
c00071c5:	6a 00                	push   0x0
c00071c7:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c00071cb:	83 c4 10             	add    esp,0x10
c00071ce:	85 c0                	test   eax,eax
c00071d0:	0f 84 57 01 00 00    	je     c000732d <f_forward+0x1d4>
c00071d6:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00071d9:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00071dd:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00071e0:	0f b7 71 0a          	movzx  esi,WORD PTR [ecx+0xa]
c00071e4:	89 d7                	mov    edi,edx
c00071e6:	8d 4e ff             	lea    ecx,[esi-0x1]
c00071e9:	89 c6                	mov    esi,eax
c00071eb:	0f ac fe 09          	shrd   esi,edi,0x9
c00071ef:	21 ce                	and    esi,ecx
c00071f1:	89 c1                	mov    ecx,eax
c00071f3:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c00071f9:	0f 84 98 00 00 00    	je     c0007297 <f_forward+0x13e>
c00071ff:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0007203:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0007206:	89 c8                	mov    eax,ecx
c0007208:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000720c:	e8 af ac ff ff       	call   c0001ec0 <clst2sect>
c0007211:	89 d7                	mov    edi,edx
c0007213:	09 c7                	or     edi,eax
c0007215:	0f 84 9e 00 00 00    	je     c00072b9 <f_forward+0x160>
c000721b:	31 ff                	xor    edi,edi
c000721d:	8d 4b 50             	lea    ecx,[ebx+0x50]
c0007220:	01 c6                	add    esi,eax
c0007222:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0007226:	11 d7                	adc    edi,edx
c0007228:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000722b:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c000722e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007232:	39 fa                	cmp    edx,edi
c0007234:	0f 85 a2 00 00 00    	jne    c00072dc <f_forward+0x183>
c000723a:	39 f0                	cmp    eax,esi
c000723c:	0f 85 9a 00 00 00    	jne    c00072dc <f_forward+0x183>
c0007242:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0007245:	ba 00 02 00 00       	mov    edx,0x200
c000724a:	25 ff 01 00 00       	and    eax,0x1ff
c000724f:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0007253:	29 c2                	sub    edx,eax
c0007255:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0007258:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c000725b:	39 d1                	cmp    ecx,edx
c000725d:	76 02                	jbe    c0007261 <f_forward+0x108>
c000725f:	89 d1                	mov    ecx,edx
c0007261:	8d 73 50             	lea    esi,[ebx+0x50]
c0007264:	52                   	push   edx
c0007265:	01 c6                	add    esi,eax
c0007267:	52                   	push   edx
c0007268:	51                   	push   ecx
c0007269:	56                   	push   esi
c000726a:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c000726e:	83 c4 10             	add    esp,0x10
c0007271:	85 c0                	test   eax,eax
c0007273:	74 44                	je     c00072b9 <f_forward+0x160>
c0007275:	31 ff                	xor    edi,edi
c0007277:	01 43 2c             	add    DWORD PTR [ebx+0x2c],eax
c000727a:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c000727d:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c0007281:	29 44 24 48          	sub    DWORD PTR [esp+0x48],eax
c0007285:	01 07                	add    DWORD PTR [edi],eax
c0007287:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c000728c:	0f 85 2f ff ff ff    	jne    c00071c1 <f_forward+0x68>
c0007292:	e9 96 00 00 00       	jmp    c000732d <f_forward+0x1d4>
c0007297:	85 f6                	test   esi,esi
c0007299:	0f 85 60 ff ff ff    	jne    c00071ff <f_forward+0xa6>
c000729f:	89 d7                	mov    edi,edx
c00072a1:	09 c7                	or     edi,eax
c00072a3:	75 05                	jne    c00072aa <f_forward+0x151>
c00072a5:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00072a8:	eb 0a                	jmp    c00072b4 <f_forward+0x15b>
c00072aa:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00072ad:	89 d8                	mov    eax,ebx
c00072af:	e8 d9 bc ff ff       	call   c0002f8d <get_fat>
c00072b4:	83 f8 01             	cmp    eax,0x1
c00072b7:	77 0b                	ja     c00072c4 <f_forward+0x16b>
c00072b9:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00072bd:	bd 02 00 00 00       	mov    ebp,0x2
c00072c2:	eb 69                	jmp    c000732d <f_forward+0x1d4>
c00072c4:	83 f8 ff             	cmp    eax,0xffffffff
c00072c7:	75 0b                	jne    c00072d4 <f_forward+0x17b>
c00072c9:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c00072cd:	bd 01 00 00 00       	mov    ebp,0x1
c00072d2:	eb 59                	jmp    c000732d <f_forward+0x1d4>
c00072d4:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c00072d7:	e9 23 ff ff ff       	jmp    c00071ff <f_forward+0xa6>
c00072dc:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00072e0:	79 20                	jns    c0007302 <f_forward+0x1a9>
c00072e2:	83 ec 0c             	sub    esp,0xc
c00072e5:	6a 01                	push   0x1
c00072e7:	52                   	push   edx
c00072e8:	50                   	push   eax
c00072e9:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00072ed:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00072f1:	50                   	push   eax
c00072f2:	e8 fb a8 ff ff       	call   c0001bf2 <disk_write>
c00072f7:	83 c4 20             	add    esp,0x20
c00072fa:	85 c0                	test   eax,eax
c00072fc:	75 cb                	jne    c00072c9 <f_forward+0x170>
c00072fe:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0007302:	83 ec 0c             	sub    esp,0xc
c0007305:	6a 01                	push   0x1
c0007307:	57                   	push   edi
c0007308:	56                   	push   esi
c0007309:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000730d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007311:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0007315:	50                   	push   eax
c0007316:	e8 c1 a8 ff ff       	call   c0001bdc <disk_read>
c000731b:	83 c4 20             	add    esp,0x20
c000731e:	85 c0                	test   eax,eax
c0007320:	0f 84 1c ff ff ff    	je     c0007242 <f_forward+0xe9>
c0007326:	eb a1                	jmp    c00072c9 <f_forward+0x170>
c0007328:	bd 07 00 00 00       	mov    ebp,0x7
c000732d:	83 c4 2c             	add    esp,0x2c
c0007330:	89 e8                	mov    eax,ebp
c0007332:	5b                   	pop    ebx
c0007333:	5e                   	pop    esi
c0007334:	5f                   	pop    edi
c0007335:	5d                   	pop    ebp
c0007336:	c3                   	ret    

c0007337 <f_mkfs>:
c0007337:	55                   	push   ebp
c0007338:	57                   	push   edi
c0007339:	56                   	push   esi
c000733a:	53                   	push   ebx
c000733b:	bb 0b 00 00 00       	mov    ebx,0xb
c0007340:	81 ec 9c 00 00 00    	sub    esp,0x9c
c0007346:	8b b4 24 b4 00 00 00 	mov    esi,DWORD PTR [esp+0xb4]
c000734d:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c0007354:	e8 b0 ae ff ff       	call   c0002209 <get_ldnumber>
c0007359:	85 c0                	test   eax,eax
c000735b:	0f 88 ec 10 00 00    	js     c000844d <f_mkfs+0x1116>
c0007361:	8b 14 85 40 d9 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd26c0]
c0007368:	85 d2                	test   edx,edx
c000736a:	74 03                	je     c000736f <f_mkfs+0x38>
c000736c:	c6 02 00             	mov    BYTE PTR [edx],0x0
c000736f:	85 f6                	test   esi,esi
c0007371:	75 05                	jne    c0007378 <f_mkfs+0x41>
c0007373:	be a0 91 02 c0       	mov    esi,0xc00291a0
c0007378:	83 ec 0c             	sub    esp,0xc
c000737b:	0f b6 c0             	movzx  eax,al
c000737e:	bb 03 00 00 00       	mov    ebx,0x3
c0007383:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007387:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000738b:	e8 49 a8 ff ff       	call   c0001bd9 <disk_initialize>
c0007390:	83 c4 10             	add    esp,0x10
c0007393:	a8 01                	test   al,0x1
c0007395:	0f 85 b2 10 00 00    	jne    c000844d <f_mkfs+0x1116>
c000739b:	bb 0a 00 00 00       	mov    ebx,0xa
c00073a0:	a8 04                	test   al,0x4
c00073a2:	0f 85 a5 10 00 00    	jne    c000844d <f_mkfs+0x1116>
c00073a8:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00073ab:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c00073af:	85 c0                	test   eax,eax
c00073b1:	75 20                	jne    c00073d3 <f_mkfs+0x9c>
c00073b3:	51                   	push   ecx
c00073b4:	8d 44 24 78          	lea    eax,[esp+0x78]
c00073b8:	50                   	push   eax
c00073b9:	6a 03                	push   0x3
c00073bb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00073bf:	e8 44 a8 ff ff       	call   c0001c08 <disk_ioctl>
c00073c4:	83 c4 10             	add    esp,0x10
c00073c7:	85 c0                	test   eax,eax
c00073c9:	74 08                	je     c00073d3 <f_mkfs+0x9c>
c00073cb:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c00073d3:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c00073d7:	8d 42 ff             	lea    eax,[edx-0x1]
c00073da:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00073df:	77 04                	ja     c00073e5 <f_mkfs+0xae>
c00073e1:	85 c2                	test   edx,eax
c00073e3:	74 08                	je     c00073ed <f_mkfs+0xb6>
c00073e5:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c00073ed:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c00073f0:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c00073f4:	48                   	dec    eax
c00073f5:	3c 01                	cmp    al,0x1
c00073f7:	76 05                	jbe    c00073fe <f_mkfs+0xc7>
c00073f9:	c6 44 24 48 01       	mov    BYTE PTR [esp+0x48],0x1
c00073fe:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c0007401:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007405:	48                   	dec    eax
c0007406:	3d ff 7f 00 00       	cmp    eax,0x7fff
c000740b:	77 07                	ja     c0007414 <f_mkfs+0xdd>
c000740d:	f6 44 24 28 0f       	test   BYTE PTR [esp+0x28],0xf
c0007412:	74 08                	je     c000741c <f_mkfs+0xe5>
c0007414:	c7 44 24 28 00 02 00 00 	mov    DWORD PTR [esp+0x28],0x200
c000741c:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c000741f:	81 fb 00 00 00 01    	cmp    ebx,0x1000000
c0007425:	77 07                	ja     c000742e <f_mkfs+0xf7>
c0007427:	8d 43 ff             	lea    eax,[ebx-0x1]
c000742a:	85 d8                	test   eax,ebx
c000742c:	74 02                	je     c0007430 <f_mkfs+0xf9>
c000742e:	31 db                	xor    ebx,ebx
c0007430:	81 bc 24 bc 00 00 00 ff 01 00 00 	cmp    DWORD PTR [esp+0xbc],0x1ff
c000743b:	77 0a                	ja     c0007447 <f_mkfs+0x110>
c000743d:	bb 11 00 00 00       	mov    ebx,0x11
c0007442:	e9 06 10 00 00       	jmp    c000844d <f_mkfs+0x1116>
c0007447:	8b ac 24 b8 00 00 00 	mov    ebp,DWORD PTR [esp+0xb8]
c000744e:	8b 36                	mov    esi,DWORD PTR [esi]
c0007450:	85 ed                	test   ebp,ebp
c0007452:	75 1e                	jne    c0007472 <f_mkfs+0x13b>
c0007454:	83 ec 0c             	sub    esp,0xc
c0007457:	8b 84 24 c8 00 00 00 	mov    eax,DWORD PTR [esp+0xc8]
c000745e:	25 00 fe ff ff       	and    eax,0xfffffe00
c0007463:	50                   	push   eax
c0007464:	e8 f1 0f 00 00       	call   c000845a <ff_memalloc>
c0007469:	83 c4 10             	add    esp,0x10
c000746c:	89 c5                	mov    ebp,eax
c000746e:	85 c0                	test   eax,eax
c0007470:	74 cb                	je     c000743d <f_mkfs+0x106>
c0007472:	c7 44 24 78 00 00 00 00 	mov    DWORD PTR [esp+0x78],0x0
c000747a:	c7 44 24 7c 00 00 00 00 	mov    DWORD PTR [esp+0x7c],0x0
c0007482:	52                   	push   edx
c0007483:	8d 44 24 7c          	lea    eax,[esp+0x7c]
c0007487:	50                   	push   eax
c0007488:	6a 01                	push   0x1
c000748a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000748e:	e8 75 a7 ff ff       	call   c0001c08 <disk_ioctl>
c0007493:	83 c4 10             	add    esp,0x10
c0007496:	85 c0                	test   eax,eax
c0007498:	0f 85 4a 0f 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c000749e:	89 f1                	mov    ecx,esi
c00074a0:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00074a8:	83 e1 0f             	and    ecx,0xf
c00074ab:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00074b3:	88 4c 24 3f          	mov    BYTE PTR [esp+0x3f],cl
c00074b7:	83 e6 08             	and    esi,0x8
c00074ba:	75 56                	jne    c0007512 <f_mkfs+0x1db>
c00074bc:	8b 7c 24 7c          	mov    edi,DWORD PTR [esp+0x7c]
c00074c0:	8b 74 24 78          	mov    esi,DWORD PTR [esp+0x78]
c00074c4:	83 ff 00             	cmp    edi,0x0
c00074c7:	76 20                	jbe    c00074e9 <f_mkfs+0x1b2>
c00074c9:	80 4c 24 3f 80       	or     BYTE PTR [esp+0x3f],0x80
c00074ce:	c7 44 24 10 00 08 00 00 	mov    DWORD PTR [esp+0x10],0x800
c00074d6:	81 c6 df f7 ff ff    	add    esi,0xfffff7df
c00074dc:	83 d7 ff             	adc    edi,0xffffffff
c00074df:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c00074e3:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c00074e7:	eb 21                	jmp    c000750a <f_mkfs+0x1d3>
c00074e9:	ba 3f 00 00 00       	mov    edx,0x3f
c00074ee:	39 f2                	cmp    edx,esi
c00074f0:	19 f8                	sbb    eax,edi
c00074f2:	73 1e                	jae    c0007512 <f_mkfs+0x1db>
c00074f4:	83 c6 c1             	add    esi,0xffffffc1
c00074f7:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c00074ff:	83 d7 ff             	adc    edi,0xffffffff
c0007502:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c0007506:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c000750a:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0007512:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0007516:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c000751a:	89 04 24             	mov    DWORD PTR [esp],eax
c000751d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007521:	31 c0                	xor    eax,eax
c0007523:	ba 7f 00 00 00       	mov    edx,0x7f
c0007528:	89 c7                	mov    edi,eax
c000752a:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c000752d:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0007531:	0f 83 c5 0a 00 00    	jae    c0007ffc <f_mkfs+0xcc5>
c0007537:	89 df                	mov    edi,ebx
c0007539:	c1 ef 09             	shr    edi,0x9
c000753c:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0007540:	8b bc 24 bc 00 00 00 	mov    edi,DWORD PTR [esp+0xbc]
c0007547:	c1 ef 09             	shr    edi,0x9
c000754a:	f6 44 24 3f 04       	test   BYTE PTR [esp+0x3f],0x4
c000754f:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c0007553:	74 29                	je     c000757e <f_mkfs+0x247>
c0007555:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c000755b:	b9 ff ff ff 03       	mov    ecx,0x3ffffff
c0007560:	0f 97 c2             	seta   dl
c0007563:	3b 0c 24             	cmp    ecx,DWORD PTR [esp]
c0007566:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c000756a:	0f 92 c0             	setb   al
c000756d:	08 c2                	or     dl,al
c000756f:	75 5b                	jne    c00075cc <f_mkfs+0x295>
c0007571:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c0007575:	83 e0 07             	and    eax,0x7
c0007578:	3c 04                	cmp    al,0x4
c000757a:	74 50                	je     c00075cc <f_mkfs+0x295>
c000757c:	eb 1b                	jmp    c0007599 <f_mkfs+0x262>
c000757e:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0007583:	0f 87 73 0a 00 00    	ja     c0007ffc <f_mkfs+0xcc5>
c0007589:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c000758f:	76 08                	jbe    c0007599 <f_mkfs+0x262>
c0007591:	c7 44 24 08 80 00 00 00 	mov    DWORD PTR [esp+0x8],0x80
c0007599:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c000759d:	8a 4c 24 3f          	mov    cl,BYTE PTR [esp+0x3f]
c00075a1:	83 e0 01             	and    eax,0x1
c00075a4:	80 e1 02             	and    cl,0x2
c00075a7:	88 4c 24 54          	mov    BYTE PTR [esp+0x54],cl
c00075ab:	74 0d                	je     c00075ba <f_mkfs+0x283>
c00075ad:	84 c0                	test   al,al
c00075af:	0f 84 53 09 00 00    	je     c0007f08 <f_mkfs+0xbd1>
c00075b5:	e9 12 08 00 00       	jmp    c0007dcc <f_mkfs+0xa95>
c00075ba:	bb 13 00 00 00       	mov    ebx,0x13
c00075bf:	84 c0                	test   al,al
c00075c1:	0f 85 05 08 00 00    	jne    c0007dcc <f_mkfs+0xa95>
c00075c7:	e9 39 0e 00 00       	jmp    c0008405 <f_mkfs+0x10ce>
c00075cc:	31 c0                	xor    eax,eax
c00075ce:	ba ff 0f 00 00       	mov    edx,0xfff
c00075d3:	89 c7                	mov    edi,eax
c00075d5:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c00075d8:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c00075dc:	0f 83 1a 0a 00 00    	jae    c0007ffc <f_mkfs+0xcc5>
c00075e2:	81 fb ff 01 00 00    	cmp    ebx,0x1ff
c00075e8:	77 39                	ja     c0007623 <f_mkfs+0x2ec>
c00075ea:	ba ff ff 07 00       	mov    edx,0x7ffff
c00075ef:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c00075f7:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c00075fa:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c00075fe:	73 08                	jae    c0007608 <f_mkfs+0x2d1>
c0007600:	c7 44 24 08 40 00 00 00 	mov    DWORD PTR [esp+0x8],0x40
c0007608:	b8 ff ff ff 03       	mov    eax,0x3ffffff
c000760d:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0007610:	b8 00 00 00 00       	mov    eax,0x0
c0007615:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007619:	73 08                	jae    c0007623 <f_mkfs+0x2ec>
c000761b:	c7 44 24 08 00 01 00 00 	mov    DWORD PTR [esp+0x8],0x100
c0007623:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007627:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000762b:	83 c0 20             	add    eax,0x20
c000762e:	83 d2 00             	adc    edx,0x0
c0007631:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007635:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0007639:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000763d:	31 d2                	xor    edx,edx
c000763f:	31 ff                	xor    edi,edi
c0007641:	52                   	push   edx
c0007642:	89 fb                	mov    ebx,edi
c0007644:	50                   	push   eax
c0007645:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0007649:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000764d:	e8 c2 f0 01 00       	call   c0026714 <__udivdi3>
c0007652:	83 c4 10             	add    esp,0x10
c0007655:	c1 e0 02             	shl    eax,0x2
c0007658:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c000765c:	05 07 02 00 00       	add    eax,0x207
c0007661:	89 f1                	mov    ecx,esi
c0007663:	c1 e8 09             	shr    eax,0x9
c0007666:	83 c1 ff             	add    ecx,0xffffffff
c0007669:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000766d:	83 d3 ff             	adc    ebx,0xffffffff
c0007670:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c0007674:	13 5c 24 4c          	adc    ebx,DWORD PTR [esp+0x4c]
c0007678:	31 d2                	xor    edx,edx
c000767a:	01 c8                	add    eax,ecx
c000767c:	11 da                	adc    edx,ebx
c000767e:	89 c1                	mov    ecx,eax
c0007680:	f7 de                	neg    esi
c0007682:	89 d0                	mov    eax,edx
c0007684:	83 d7 00             	adc    edi,0x0
c0007687:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000768b:	f7 df                	neg    edi
c000768d:	21 f1                	and    ecx,esi
c000768f:	21 f8                	and    eax,edi
c0007691:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0007695:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0007699:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000769d:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00076a1:	2b 4c 24 10          	sub    ecx,DWORD PTR [esp+0x10]
c00076a5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00076a8:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c00076ac:	0f ac d0 01          	shrd   eax,edx,0x1
c00076b0:	89 df                	mov    edi,ebx
c00076b2:	d1 ea                	shr    edx,1
c00076b4:	39 c1                	cmp    ecx,eax
c00076b6:	19 d7                	sbb    edi,edx
c00076b8:	0f 83 3e 09 00 00    	jae    c0007ffc <f_mkfs+0xcc5>
c00076be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00076c2:	31 d2                	xor    edx,edx
c00076c4:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
c00076c8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00076cc:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c00076d0:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00076d3:	03 44 24 68          	add    eax,DWORD PTR [esp+0x68]
c00076d7:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c00076db:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c00076df:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00076e3:	83 f8 0f             	cmp    eax,0xf
c00076e6:	0f 86 10 09 00 00    	jbe    c0007ffc <f_mkfs+0xcc5>
c00076ec:	81 7c 24 38 fd ff ff 7f 	cmp    DWORD PTR [esp+0x38],0x7ffffffd
c00076f4:	0f 87 02 09 00 00    	ja     c0007ffc <f_mkfs+0xcc5>
c00076fa:	31 d2                	xor    edx,edx
c00076fc:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007700:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c0007708:	83 c0 07             	add    eax,0x7
c000770b:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c0007713:	c1 e8 03             	shr    eax,0x3
c0007716:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000771d:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c0007721:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007725:	c1 e0 09             	shl    eax,0x9
c0007728:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000772c:	48                   	dec    eax
c000772d:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007731:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c0007735:	03 44 24 50          	add    eax,DWORD PTR [esp+0x50]
c0007739:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c000773d:	31 d2                	xor    edx,edx
c000773f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007743:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c000774a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000774e:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0007753:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0007757:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c000775b:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000775f:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0007763:	31 ff                	xor    edi,edi
c0007765:	31 f6                	xor    esi,esi
c0007767:	31 db                	xor    ebx,ebx
c0007769:	85 ff                	test   edi,edi
c000776b:	74 05                	je     c0007772 <f_mkfs+0x43b>
c000776d:	4f                   	dec    edi
c000776e:	74 44                	je     c00077b4 <f_mkfs+0x47d>
c0007770:	eb 4f                	jmp    c00077c1 <f_mkfs+0x48a>
c0007772:	83 ec 0c             	sub    esp,0xc
c0007775:	0f b7 c3             	movzx  eax,bx
c0007778:	50                   	push   eax
c0007779:	e8 05 0e 00 00       	call   c0008583 <ff_wtoupper>
c000777e:	83 c4 10             	add    esp,0x10
c0007781:	89 c1                	mov    ecx,eax
c0007783:	8d 53 01             	lea    edx,[ebx+0x1]
c0007786:	66 39 c3             	cmp    bx,ax
c0007789:	75 3e                	jne    c00077c9 <f_mkfs+0x492>
c000778b:	be 01 00 00 00       	mov    esi,0x1
c0007790:	89 df                	mov    edi,ebx
c0007792:	66 01 f7             	add    di,si
c0007795:	75 07                	jne    c000779e <f_mkfs+0x467>
c0007797:	83 fe 7f             	cmp    esi,0x7f
c000779a:	77 31                	ja     c00077cd <f_mkfs+0x496>
c000779c:	eb 16                	jmp    c00077b4 <f_mkfs+0x47d>
c000779e:	83 ec 0c             	sub    esp,0xc
c00077a1:	0f b7 ff             	movzx  edi,di
c00077a4:	57                   	push   edi
c00077a5:	e8 d9 0d 00 00       	call   c0008583 <ff_wtoupper>
c00077aa:	83 c4 10             	add    esp,0x10
c00077ad:	39 c7                	cmp    edi,eax
c00077af:	75 e6                	jne    c0007797 <f_mkfs+0x460>
c00077b1:	46                   	inc    esi
c00077b2:	eb dc                	jmp    c0007790 <f_mkfs+0x459>
c00077b4:	31 c0                	xor    eax,eax
c00077b6:	89 d9                	mov    ecx,ebx
c00077b8:	4e                   	dec    esi
c00077b9:	0f 95 c0             	setne  al
c00077bc:	43                   	inc    ebx
c00077bd:	89 c7                	mov    edi,eax
c00077bf:	eb 14                	jmp    c00077d5 <f_mkfs+0x49e>
c00077c1:	89 f1                	mov    ecx,esi
c00077c3:	01 f3                	add    ebx,esi
c00077c5:	31 ff                	xor    edi,edi
c00077c7:	eb 0c                	jmp    c00077d5 <f_mkfs+0x49e>
c00077c9:	89 d3                	mov    ebx,edx
c00077cb:	eb 08                	jmp    c00077d5 <f_mkfs+0x49e>
c00077cd:	bf 02 00 00 00       	mov    edi,0x2
c00077d2:	83 c9 ff             	or     ecx,0xffffffff
c00077d5:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c00077d9:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00077dc:	88 4c 05 00          	mov    BYTE PTR [ebp+eax*1+0x0],cl
c00077e0:	0f b6 c1             	movzx  eax,cl
c00077e3:	e8 3a a9 ff ff       	call   c0002122 <xsum32>
c00077e8:	66 c1 e9 08          	shr    cx,0x8
c00077ec:	89 c2                	mov    edx,eax
c00077ee:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00077f1:	88 4c 05 01          	mov    BYTE PTR [ebp+eax*1+0x1],cl
c00077f5:	0f b7 c1             	movzx  eax,cx
c00077f8:	e8 25 a9 ff ff       	call   c0002122 <xsum32>
c00077fd:	83 44 24 54 02       	add    DWORD PTR [esp+0x54],0x2
c0007802:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007806:	66 85 db             	test   bx,bx
c0007809:	74 1f                	je     c000782a <f_mkfs+0x4f3>
c000780b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000780e:	8b 94 24 bc 00 00 00 	mov    edx,DWORD PTR [esp+0xbc]
c0007815:	83 c0 02             	add    eax,0x2
c0007818:	81 e2 00 fe ff ff    	and    edx,0xfffffe00
c000781e:	39 c2                	cmp    edx,eax
c0007820:	74 08                	je     c000782a <f_mkfs+0x4f3>
c0007822:	89 04 24             	mov    DWORD PTR [esp],eax
c0007825:	e9 3f ff ff ff       	jmp    c0007769 <f_mkfs+0x432>
c000782a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000782d:	83 ec 0c             	sub    esp,0xc
c0007830:	05 01 02 00 00       	add    eax,0x201
c0007835:	c1 e8 09             	shr    eax,0x9
c0007838:	50                   	push   eax
c0007839:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000783d:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0007841:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0007845:	55                   	push   ebp
c0007846:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000784a:	e8 a3 a3 ff ff       	call   c0001bf2 <disk_write>
c000784f:	83 c4 20             	add    esp,0x20
c0007852:	85 c0                	test   eax,eax
c0007854:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0007857:	0f 85 8b 0b 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c000785d:	89 d0                	mov    eax,edx
c000785f:	31 d2                	xor    edx,edx
c0007861:	01 44 24 40          	add    DWORD PTR [esp+0x40],eax
c0007865:	11 54 24 44          	adc    DWORD PTR [esp+0x44],edx
c0007869:	66 85 db             	test   bx,bx
c000786c:	74 04                	je     c0007872 <f_mkfs+0x53b>
c000786e:	31 c0                	xor    eax,eax
c0007870:	eb b0                	jmp    c0007822 <f_mkfs+0x4eb>
c0007872:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0007876:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000787a:	03 44 24 54          	add    eax,DWORD PTR [esp+0x54]
c000787e:	8d 9e ff 01 00 00    	lea    ebx,[esi+0x1ff]
c0007884:	31 d2                	xor    edx,edx
c0007886:	c7 84 24 88 00 00 00 01 00 00 00 	mov    DWORD PTR [esp+0x88],0x1
c0007891:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c0007895:	c1 eb 09             	shr    ebx,0x9
c0007898:	89 84 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],eax
c000789f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00078a3:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c00078a7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00078ab:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c00078af:	8d 70 01             	lea    esi,[eax+0x1]
c00078b2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00078b6:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00078ba:	8b 84 24 bc 00 00 00 	mov    eax,DWORD PTR [esp+0xbc]
c00078c1:	31 d2                	xor    edx,edx
c00078c3:	25 00 fe ff ff       	and    eax,0xfffffe00
c00078c8:	89 04 24             	mov    DWORD PTR [esp],eax
c00078cb:	89 c1                	mov    ecx,eax
c00078cd:	89 e8                	mov    eax,ebp
c00078cf:	e8 e7 a3 ff ff       	call   c0001cbb <mem_set>
c00078d4:	31 c0                	xor    eax,eax
c00078d6:	39 04 24             	cmp    DWORD PTR [esp],eax
c00078d9:	76 10                	jbe    c00078eb <f_mkfs+0x5b4>
c00078db:	83 fe 07             	cmp    esi,0x7
c00078de:	76 0b                	jbe    c00078eb <f_mkfs+0x5b4>
c00078e0:	40                   	inc    eax
c00078e1:	83 ee 08             	sub    esi,0x8
c00078e4:	c6 44 05 ff ff       	mov    BYTE PTR [ebp+eax*1-0x1],0xff
c00078e9:	eb eb                	jmp    c00078d6 <f_mkfs+0x59f>
c00078eb:	b2 01                	mov    dl,0x1
c00078ed:	8d 4c 05 00          	lea    ecx,[ebp+eax*1+0x0]
c00078f1:	85 f6                	test   esi,esi
c00078f3:	74 0c                	je     c0007901 <f_mkfs+0x5ca>
c00078f5:	39 04 24             	cmp    DWORD PTR [esp],eax
c00078f8:	76 07                	jbe    c0007901 <f_mkfs+0x5ca>
c00078fa:	08 11                	or     BYTE PTR [ecx],dl
c00078fc:	4e                   	dec    esi
c00078fd:	d1 e2                	shl    edx,1
c00078ff:	eb f0                	jmp    c00078f1 <f_mkfs+0x5ba>
c0007901:	89 df                	mov    edi,ebx
c0007903:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c0007907:	76 04                	jbe    c000790d <f_mkfs+0x5d6>
c0007909:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000790d:	83 ec 0c             	sub    esp,0xc
c0007910:	57                   	push   edi
c0007911:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007915:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007919:	55                   	push   ebp
c000791a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000791e:	e8 cf a2 ff ff       	call   c0001bf2 <disk_write>
c0007923:	83 c4 20             	add    esp,0x20
c0007926:	85 c0                	test   eax,eax
c0007928:	0f 85 ba 0a 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c000792e:	31 d2                	xor    edx,edx
c0007930:	01 7c 24 28          	add    DWORD PTR [esp+0x28],edi
c0007934:	11 54 24 2c          	adc    DWORD PTR [esp+0x2c],edx
c0007938:	29 fb                	sub    ebx,edi
c000793a:	0f 85 7a ff ff ff    	jne    c00078ba <f_mkfs+0x583>
c0007940:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0007944:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c000794c:	31 f6                	xor    esi,esi
c000794e:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007952:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007955:	31 d2                	xor    edx,edx
c0007957:	89 e8                	mov    eax,ebp
c0007959:	e8 5d a3 ff ff       	call   c0001cbb <mem_set>
c000795e:	31 c9                	xor    ecx,ecx
c0007960:	85 db                	test   ebx,ebx
c0007962:	75 40                	jne    c00079a4 <f_mkfs+0x66d>
c0007964:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0007969:	89 e8                	mov    eax,ebp
c000796b:	bb 02 00 00 00       	mov    ebx,0x2
c0007970:	e8 28 a3 ff ff       	call   c0001c9d <st_dword>
c0007975:	8d 45 04             	lea    eax,[ebp+0x4]
c0007978:	83 ca ff             	or     edx,0xffffffff
c000797b:	e8 1d a3 ff ff       	call   c0001c9d <st_dword>
c0007980:	b9 08 00 00 00       	mov    ecx,0x8
c0007985:	eb 1d                	jmp    c00079a4 <f_mkfs+0x66d>
c0007987:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c000798a:	76 3b                	jbe    c00079c7 <f_mkfs+0x690>
c000798c:	43                   	inc    ebx
c000798d:	83 fe 01             	cmp    esi,0x1
c0007990:	89 da                	mov    edx,ebx
c0007992:	77 03                	ja     c0007997 <f_mkfs+0x660>
c0007994:	83 ca ff             	or     edx,0xffffffff
c0007997:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c000799b:	4e                   	dec    esi
c000799c:	e8 fc a2 ff ff       	call   c0001c9d <st_dword>
c00079a1:	83 c1 04             	add    ecx,0x4
c00079a4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00079a8:	85 f6                	test   esi,esi
c00079aa:	75 db                	jne    c0007987 <f_mkfs+0x650>
c00079ac:	83 7c 24 28 02       	cmp    DWORD PTR [esp+0x28],0x2
c00079b1:	77 14                	ja     c00079c7 <f_mkfs+0x690>
c00079b3:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c00079b7:	8b b4 84 80 00 00 00 	mov    esi,DWORD PTR [esp+eax*4+0x80]
c00079be:	85 f6                	test   esi,esi
c00079c0:	74 05                	je     c00079c7 <f_mkfs+0x690>
c00079c2:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c00079c5:	77 dd                	ja     c00079a4 <f_mkfs+0x66d>
c00079c7:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c00079cb:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00079cf:	39 cf                	cmp    edi,ecx
c00079d1:	76 02                	jbe    c00079d5 <f_mkfs+0x69e>
c00079d3:	89 cf                	mov    edi,ecx
c00079d5:	83 ec 0c             	sub    esp,0xc
c00079d8:	57                   	push   edi
c00079d9:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00079dd:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00079e1:	55                   	push   ebp
c00079e2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00079e6:	e8 07 a2 ff ff       	call   c0001bf2 <disk_write>
c00079eb:	83 c4 20             	add    esp,0x20
c00079ee:	85 c0                	test   eax,eax
c00079f0:	0f 85 f2 09 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c00079f6:	31 d2                	xor    edx,edx
c00079f8:	01 7c 24 48          	add    DWORD PTR [esp+0x48],edi
c00079fc:	11 54 24 4c          	adc    DWORD PTR [esp+0x4c],edx
c0007a00:	29 7c 24 40          	sub    DWORD PTR [esp+0x40],edi
c0007a04:	0f 85 48 ff ff ff    	jne    c0007952 <f_mkfs+0x61b>
c0007a0a:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007a0d:	31 d2                	xor    edx,edx
c0007a0f:	89 e8                	mov    eax,ebp
c0007a11:	31 ff                	xor    edi,edi
c0007a13:	e8 a3 a2 ff ff       	call   c0001cbb <mem_set>
c0007a18:	8d 45 34             	lea    eax,[ebp+0x34]
c0007a1b:	ba 02 00 00 00       	mov    edx,0x2
c0007a20:	c6 45 00 83          	mov    BYTE PTR [ebp+0x0],0x83
c0007a24:	c6 45 20 81          	mov    BYTE PTR [ebp+0x20],0x81
c0007a28:	e8 70 a2 ff ff       	call   c0001c9d <st_dword>
c0007a2d:	8d 45 38             	lea    eax,[ebp+0x38]
c0007a30:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c0007a34:	e8 64 a2 ff ff       	call   c0001c9d <st_dword>
c0007a39:	8d 45 44             	lea    eax,[ebp+0x44]
c0007a3c:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007a40:	c6 45 40 82          	mov    BYTE PTR [ebp+0x40],0x82
c0007a44:	e8 54 a2 ff ff       	call   c0001c9d <st_dword>
c0007a49:	8d 45 54             	lea    eax,[ebp+0x54]
c0007a4c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0007a50:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007a54:	83 c2 02             	add    edx,0x2
c0007a57:	e8 41 a2 ff ff       	call   c0001c9d <st_dword>
c0007a5c:	8d 45 58             	lea    eax,[ebp+0x58]
c0007a5f:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c0007a63:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007a67:	e8 31 a2 ff ff       	call   c0001c9d <st_dword>
c0007a6c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007a70:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c0007a75:	89 c6                	mov    esi,eax
c0007a77:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007a7b:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0007a7f:	89 04 24             	mov    DWORD PTR [esp],eax
c0007a82:	13 7c 24 1c          	adc    edi,DWORD PTR [esp+0x1c]
c0007a86:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0007a89:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007a8d:	39 cb                	cmp    ebx,ecx
c0007a8f:	76 02                	jbe    c0007a93 <f_mkfs+0x75c>
c0007a91:	89 cb                	mov    ebx,ecx
c0007a93:	83 ec 0c             	sub    esp,0xc
c0007a96:	53                   	push   ebx
c0007a97:	57                   	push   edi
c0007a98:	56                   	push   esi
c0007a99:	55                   	push   ebp
c0007a9a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007a9e:	e8 4f a1 ff ff       	call   c0001bf2 <disk_write>
c0007aa3:	83 c4 20             	add    esp,0x20
c0007aa6:	85 c0                	test   eax,eax
c0007aa8:	0f 85 3a 09 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c0007aae:	31 d2                	xor    edx,edx
c0007ab0:	b9 00 02 00 00       	mov    ecx,0x200
c0007ab5:	89 e8                	mov    eax,ebp
c0007ab7:	e8 ff a1 ff ff       	call   c0001cbb <mem_set>
c0007abc:	31 d2                	xor    edx,edx
c0007abe:	01 de                	add    esi,ebx
c0007ac0:	11 d7                	adc    edi,edx
c0007ac2:	29 1c 24             	sub    DWORD PTR [esp],ebx
c0007ac5:	75 bf                	jne    c0007a86 <f_mkfs+0x74f>
c0007ac7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007acb:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0007acf:	c7 44 24 30 02 00 00 00 	mov    DWORD PTR [esp+0x30],0x2
c0007ad7:	b9 00 02 00 00       	mov    ecx,0x200
c0007adc:	31 d2                	xor    edx,edx
c0007ade:	89 e8                	mov    eax,ebp
c0007ae0:	e8 d6 a1 ff ff       	call   c0001cbb <mem_set>
c0007ae5:	b9 0b 00 00 00       	mov    ecx,0xb
c0007aea:	ba 80 92 02 c0       	mov    edx,0xc0029280
c0007aef:	89 e8                	mov    eax,ebp
c0007af1:	e8 b0 a1 ff ff       	call   c0001ca6 <mem_cpy>
c0007af6:	8d 45 40             	lea    eax,[ebp+0x40]
c0007af9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0007afd:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0007b01:	e8 9a a1 ff ff       	call   c0001ca0 <st_qword>
c0007b06:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0007b0a:	8d 45 48             	lea    eax,[ebp+0x48]
c0007b0d:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0007b11:	e8 8a a1 ff ff       	call   c0001ca0 <st_qword>
c0007b16:	8d 45 50             	lea    eax,[ebp+0x50]
c0007b19:	ba 20 00 00 00       	mov    edx,0x20
c0007b1e:	e8 7a a1 ff ff       	call   c0001c9d <st_dword>
c0007b23:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0007b27:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0007b2b:	e8 6d a1 ff ff       	call   c0001c9d <st_dword>
c0007b30:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0007b34:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0007b38:	2b 54 24 68          	sub    edx,DWORD PTR [esp+0x68]
c0007b3c:	e8 5c a1 ff ff       	call   c0001c9d <st_dword>
c0007b41:	8d 45 5c             	lea    eax,[ebp+0x5c]
c0007b44:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007b48:	e8 50 a1 ff ff       	call   c0001c9d <st_dword>
c0007b4d:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0007b51:	8d 50 02             	lea    edx,[eax+0x2]
c0007b54:	8d 45 60             	lea    eax,[ebp+0x60]
c0007b57:	e8 41 a1 ff ff       	call   c0001c9d <st_dword>
c0007b5c:	8d 45 64             	lea    eax,[ebp+0x64]
c0007b5f:	ba 00 00 21 50       	mov    edx,0x50210000
c0007b64:	e8 34 a1 ff ff       	call   c0001c9d <st_dword>
c0007b69:	8d 45 68             	lea    eax,[ebp+0x68]
c0007b6c:	ba 00 01 00 00       	mov    edx,0x100
c0007b71:	e8 23 a1 ff ff       	call   c0001c99 <st_word>
c0007b76:	c6 45 6c 00          	mov    BYTE PTR [ebp+0x6c],0x0
c0007b7a:	b8 0a 00 00 00       	mov    eax,0xa
c0007b7f:	48                   	dec    eax
c0007b80:	74 05                	je     c0007b87 <f_mkfs+0x850>
c0007b82:	fe 45 6c             	inc    BYTE PTR [ebp+0x6c]
c0007b85:	eb f8                	jmp    c0007b7f <f_mkfs+0x848>
c0007b87:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007b8b:	c6 45 6d 00          	mov    BYTE PTR [ebp+0x6d],0x0
c0007b8f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007b93:	d1 6c 24 18          	shr    DWORD PTR [esp+0x18],1
c0007b97:	74 05                	je     c0007b9e <f_mkfs+0x867>
c0007b99:	fe 45 6d             	inc    BYTE PTR [ebp+0x6d]
c0007b9c:	eb f5                	jmp    c0007b93 <f_mkfs+0x85c>
c0007b9e:	8d 45 78             	lea    eax,[ebp+0x78]
c0007ba1:	ba eb fe 00 00       	mov    edx,0xfeeb
c0007ba6:	66 c7 45 6e 01 80    	mov    WORD PTR [ebp+0x6e],0x8001
c0007bac:	31 db                	xor    ebx,ebx
c0007bae:	e8 e6 a0 ff ff       	call   c0001c99 <st_word>
c0007bb3:	8d 85 fe 01 00 00    	lea    eax,[ebp+0x1fe]
c0007bb9:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007bbe:	89 04 24             	mov    DWORD PTR [esp],eax
c0007bc1:	e8 d3 a0 ff ff       	call   c0001c99 <st_word>
c0007bc6:	31 c9                	xor    ecx,ecx
c0007bc8:	8d 41 96             	lea    eax,[ecx-0x6a]
c0007bcb:	83 f8 01             	cmp    eax,0x1
c0007bce:	76 13                	jbe    c0007be3 <f_mkfs+0x8ac>
c0007bd0:	83 f9 70             	cmp    ecx,0x70
c0007bd3:	74 0e                	je     c0007be3 <f_mkfs+0x8ac>
c0007bd5:	89 da                	mov    edx,ebx
c0007bd7:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0007bdc:	e8 41 a5 ff ff       	call   c0002122 <xsum32>
c0007be1:	89 c3                	mov    ebx,eax
c0007be3:	41                   	inc    ecx
c0007be4:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007bea:	75 dc                	jne    c0007bc8 <f_mkfs+0x891>
c0007bec:	89 f0                	mov    eax,esi
c0007bee:	89 fa                	mov    edx,edi
c0007bf0:	83 c0 01             	add    eax,0x1
c0007bf3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007bf7:	83 d2 00             	adc    edx,0x0
c0007bfa:	83 ec 0c             	sub    esp,0xc
c0007bfd:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007c01:	6a 01                	push   0x1
c0007c03:	57                   	push   edi
c0007c04:	56                   	push   esi
c0007c05:	55                   	push   ebp
c0007c06:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007c0a:	e8 e3 9f ff ff       	call   c0001bf2 <disk_write>
c0007c0f:	83 c4 20             	add    esp,0x20
c0007c12:	85 c0                	test   eax,eax
c0007c14:	0f 85 ce 07 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c0007c1a:	31 d2                	xor    edx,edx
c0007c1c:	b9 00 02 00 00       	mov    ecx,0x200
c0007c21:	89 e8                	mov    eax,ebp
c0007c23:	e8 93 a0 ff ff       	call   c0001cbb <mem_set>
c0007c28:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007c2d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007c30:	e8 64 a0 ff ff       	call   c0001c99 <st_word>
c0007c35:	89 f0                	mov    eax,esi
c0007c37:	89 fa                	mov    edx,edi
c0007c39:	83 c0 09             	add    eax,0x9
c0007c3c:	83 d2 00             	adc    edx,0x0
c0007c3f:	89 04 24             	mov    DWORD PTR [esp],eax
c0007c42:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007c46:	31 c9                	xor    ecx,ecx
c0007c48:	41                   	inc    ecx
c0007c49:	89 da                	mov    edx,ebx
c0007c4b:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007c50:	e8 cd a4 ff ff       	call   c0002122 <xsum32>
c0007c55:	89 c3                	mov    ebx,eax
c0007c57:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007c5d:	75 e9                	jne    c0007c48 <f_mkfs+0x911>
c0007c5f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007c63:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0007c67:	83 c0 01             	add    eax,0x1
c0007c6a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0007c6e:	83 d2 00             	adc    edx,0x0
c0007c71:	83 ec 0c             	sub    esp,0xc
c0007c74:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0007c78:	6a 01                	push   0x1
c0007c7a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007c7e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007c82:	55                   	push   ebp
c0007c83:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007c87:	e8 66 9f ff ff       	call   c0001bf2 <disk_write>
c0007c8c:	83 c4 20             	add    esp,0x20
c0007c8f:	85 c0                	test   eax,eax
c0007c91:	0f 85 51 07 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c0007c97:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007c9b:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c0007c9f:	75 09                	jne    c0007caa <f_mkfs+0x973>
c0007ca1:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007ca4:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0007ca8:	74 12                	je     c0007cbc <f_mkfs+0x985>
c0007caa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007cae:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007cb2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007cb6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007cba:	eb 8a                	jmp    c0007c46 <f_mkfs+0x90f>
c0007cbc:	31 d2                	xor    edx,edx
c0007cbe:	b9 00 02 00 00       	mov    ecx,0x200
c0007cc3:	89 e8                	mov    eax,ebp
c0007cc5:	e8 f1 9f ff ff       	call   c0001cbb <mem_set>
c0007cca:	83 c6 0b             	add    esi,0xb
c0007ccd:	83 d7 00             	adc    edi,0x0
c0007cd0:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0007cd4:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c0007cd8:	31 c9                	xor    ecx,ecx
c0007cda:	41                   	inc    ecx
c0007cdb:	89 da                	mov    edx,ebx
c0007cdd:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007ce2:	e8 3b a4 ff ff       	call   c0002122 <xsum32>
c0007ce7:	89 c3                	mov    ebx,eax
c0007ce9:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007cef:	75 e9                	jne    c0007cda <f_mkfs+0x9a3>
c0007cf1:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007cf4:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007cf8:	83 c6 01             	add    esi,0x1
c0007cfb:	83 d7 00             	adc    edi,0x0
c0007cfe:	83 ec 0c             	sub    esp,0xc
c0007d01:	6a 01                	push   0x1
c0007d03:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007d07:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007d0b:	55                   	push   ebp
c0007d0c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007d10:	e8 dd 9e ff ff       	call   c0001bf2 <disk_write>
c0007d15:	83 c4 20             	add    esp,0x20
c0007d18:	85 c0                	test   eax,eax
c0007d1a:	0f 85 c8 06 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c0007d20:	3b 7c 24 24          	cmp    edi,DWORD PTR [esp+0x24]
c0007d24:	75 06                	jne    c0007d2c <f_mkfs+0x9f5>
c0007d26:	3b 74 24 20          	cmp    esi,DWORD PTR [esp+0x20]
c0007d2a:	74 09                	je     c0007d35 <f_mkfs+0x9fe>
c0007d2c:	89 34 24             	mov    DWORD PTR [esp],esi
c0007d2f:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0007d33:	eb a3                	jmp    c0007cd8 <f_mkfs+0x9a1>
c0007d35:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007d39:	89 da                	mov    edx,ebx
c0007d3b:	01 e8                	add    eax,ebp
c0007d3d:	e8 5b 9f ff ff       	call   c0001c9d <st_dword>
c0007d42:	83 44 24 18 04       	add    DWORD PTR [esp+0x18],0x4
c0007d47:	81 7c 24 18 00 02 00 00 	cmp    DWORD PTR [esp+0x18],0x200
c0007d4f:	75 e4                	jne    c0007d35 <f_mkfs+0x9fe>
c0007d51:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007d54:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007d58:	83 c6 02             	add    esi,0x2
c0007d5b:	83 d7 00             	adc    edi,0x0
c0007d5e:	83 ec 0c             	sub    esp,0xc
c0007d61:	6a 01                	push   0x1
c0007d63:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007d67:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007d6b:	55                   	push   ebp
c0007d6c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007d70:	e8 7d 9e ff ff       	call   c0001bf2 <disk_write>
c0007d75:	83 c4 20             	add    esp,0x20
c0007d78:	85 c0                	test   eax,eax
c0007d7a:	0f 85 68 06 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c0007d80:	83 7c 24 30 01       	cmp    DWORD PTR [esp+0x30],0x1
c0007d85:	74 0d                	je     c0007d94 <f_mkfs+0xa5d>
c0007d87:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0007d8f:	e9 43 fd ff ff       	jmp    c0007ad7 <f_mkfs+0x7a0>
c0007d94:	b1 07                	mov    cl,0x7
c0007d96:	e9 e3 05 00 00       	jmp    c000837e <f_mkfs+0x1047>
c0007d9b:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0007da0:	0f 85 4f 02 00 00    	jne    c0007ff5 <f_mkfs+0xcbe>
c0007da6:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007dab:	0f 86 22 02 00 00    	jbe    c0007fd3 <f_mkfs+0xc9c>
c0007db1:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007db6:	0f 85 81 06 00 00    	jne    c000843d <f_mkfs+0x1106>
c0007dbc:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007dbf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007dc3:	83 f8 40             	cmp    eax,0x40
c0007dc6:	0f 87 51 06 00 00    	ja     c000841d <f_mkfs+0x10e6>
c0007dcc:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007dd0:	85 ff                	test   edi,edi
c0007dd2:	75 1c                	jne    c0007df0 <f_mkfs+0xab9>
c0007dd4:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007dd7:	ba 80 91 02 c0       	mov    edx,0xc0029180
c0007ddc:	c1 e9 0c             	shr    ecx,0xc
c0007ddf:	bf 01 00 00 00       	mov    edi,0x1
c0007de4:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007de7:	66 85 c0             	test   ax,ax
c0007dea:	0f 85 95 01 00 00    	jne    c0007f85 <f_mkfs+0xc4e>
c0007df0:	31 d2                	xor    edx,edx
c0007df2:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007df5:	f7 f7                	div    edi
c0007df7:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007dfc:	0f 86 95 01 00 00    	jbe    c0007f97 <f_mkfs+0xc60>
c0007e02:	83 c0 02             	add    eax,0x2
c0007e05:	c6 44 24 18 02       	mov    BYTE PTR [esp+0x18],0x2
c0007e0a:	01 c0                	add    eax,eax
c0007e0c:	05 ff 01 00 00       	add    eax,0x1ff
c0007e11:	be 01 00 00 00       	mov    esi,0x1
c0007e16:	c1 e8 09             	shr    eax,0x9
c0007e19:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0007e1d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007e21:	c1 e0 05             	shl    eax,0x5
c0007e24:	c1 e8 09             	shr    eax,0x9
c0007e27:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007e2b:	0f b6 44 24 48       	movzx  eax,BYTE PTR [esp+0x48]
c0007e30:	31 d2                	xor    edx,edx
c0007e32:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007e36:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0007e3a:	89 f0                	mov    eax,esi
c0007e3c:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0007e40:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0007e44:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007e48:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0007e4c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007e50:	31 d2                	xor    edx,edx
c0007e52:	0f af 44 24 40       	imul   eax,DWORD PTR [esp+0x40]
c0007e57:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007e5b:	13 54 24 34          	adc    edx,DWORD PTR [esp+0x34]
c0007e5f:	31 db                	xor    ebx,ebx
c0007e61:	01 c8                	add    eax,ecx
c0007e63:	11 da                	adc    edx,ebx
c0007e65:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007e69:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0007e6d:	8b 5c 24 58          	mov    ebx,DWORD PTR [esp+0x58]
c0007e71:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007e75:	8d 4c 13 ff          	lea    ecx,[ebx+edx*1-0x1]
c0007e79:	f7 da                	neg    edx
c0007e7b:	21 d1                	and    ecx,edx
c0007e7d:	29 d9                	sub    ecx,ebx
c0007e7f:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007e84:	0f 85 20 01 00 00    	jne    c0007faa <f_mkfs+0xc73>
c0007e8a:	31 db                	xor    ebx,ebx
c0007e8c:	01 ce                	add    esi,ecx
c0007e8e:	01 4c 24 30          	add    DWORD PTR [esp+0x30],ecx
c0007e92:	11 5c 24 34          	adc    DWORD PTR [esp+0x34],ebx
c0007e96:	31 d2                	xor    edx,edx
c0007e98:	89 f8                	mov    eax,edi
c0007e9a:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0007e9e:	c1 e0 04             	shl    eax,0x4
c0007ea1:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c0007ea5:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0007ea9:	03 44 24 58          	add    eax,DWORD PTR [esp+0x58]
c0007ead:	13 54 24 5c          	adc    edx,DWORD PTR [esp+0x5c]
c0007eb1:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007eb4:	19 d3                	sbb    ebx,edx
c0007eb6:	0f 82 40 01 00 00    	jb     c0007ffc <f_mkfs+0xcc5>
c0007ebc:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007ebf:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007ec3:	89 c8                	mov    eax,ecx
c0007ec5:	0f af 54 24 40       	imul   edx,DWORD PTR [esp+0x40]
c0007eca:	2b 44 24 50          	sub    eax,DWORD PTR [esp+0x50]
c0007ece:	29 f0                	sub    eax,esi
c0007ed0:	29 d0                	sub    eax,edx
c0007ed2:	31 d2                	xor    edx,edx
c0007ed4:	f7 f7                	div    edi
c0007ed6:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007edb:	89 c3                	mov    ebx,eax
c0007edd:	0f 85 b8 fe ff ff    	jne    c0007d9b <f_mkfs+0xa64>
c0007ee3:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007ee8:	0f 87 1d 01 00 00    	ja     c000800b <f_mkfs+0xcd4>
c0007eee:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007ef3:	0f 85 03 01 00 00    	jne    c0007ffc <f_mkfs+0xcc5>
c0007ef9:	83 ff 01             	cmp    edi,0x1
c0007efc:	0f 86 fa 00 00 00    	jbe    c0007ffc <f_mkfs+0xcc5>
c0007f02:	d1 ef                	shr    edi,1
c0007f04:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0007f08:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0007f0c:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007f0f:	85 db                	test   ebx,ebx
c0007f11:	75 2d                	jne    c0007f40 <f_mkfs+0xc09>
c0007f13:	89 cb                	mov    ebx,ecx
c0007f15:	ba 90 91 02 c0       	mov    edx,0xc0029190
c0007f1a:	c1 eb 11             	shr    ebx,0x11
c0007f1d:	c7 44 24 08 01 00 00 00 	mov    DWORD PTR [esp+0x8],0x1
c0007f25:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007f28:	66 85 c0             	test   ax,ax
c0007f2b:	74 11                	je     c0007f3e <f_mkfs+0xc07>
c0007f2d:	83 c2 02             	add    edx,0x2
c0007f30:	39 d8                	cmp    eax,ebx
c0007f32:	77 0a                	ja     c0007f3e <f_mkfs+0xc07>
c0007f34:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0007f38:	01 74 24 08          	add    DWORD PTR [esp+0x8],esi
c0007f3c:	eb e7                	jmp    c0007f25 <f_mkfs+0xbee>
c0007f3e:	31 db                	xor    ebx,ebx
c0007f40:	31 d2                	xor    edx,edx
c0007f42:	89 c8                	mov    eax,ecx
c0007f44:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007f48:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c0007f4f:	2d f6 ff 00 00       	sub    eax,0xfff6
c0007f54:	c1 ea 09             	shr    edx,0x9
c0007f57:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c0007f5c:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007f60:	0f 87 96 00 00 00    	ja     c0007ffc <f_mkfs+0xcc5>
c0007f66:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007f6a:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c0007f72:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0007f76:	be 20 00 00 00       	mov    esi,0x20
c0007f7b:	c6 44 24 18 03       	mov    BYTE PTR [esp+0x18],0x3
c0007f80:	e9 a6 fe ff ff       	jmp    c0007e2b <f_mkfs+0xaf4>
c0007f85:	83 c2 02             	add    edx,0x2
c0007f88:	39 c8                	cmp    eax,ecx
c0007f8a:	0f 87 60 fe ff ff    	ja     c0007df0 <f_mkfs+0xab9>
c0007f90:	01 ff                	add    edi,edi
c0007f92:	e9 4d fe ff ff       	jmp    c0007de4 <f_mkfs+0xaad>
c0007f97:	8d 04 40             	lea    eax,[eax+eax*2]
c0007f9a:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0007f9f:	40                   	inc    eax
c0007fa0:	d1 e8                	shr    eax,1
c0007fa2:	83 c0 03             	add    eax,0x3
c0007fa5:	e9 62 fe ff ff       	jmp    c0007e0c <f_mkfs+0xad5>
c0007faa:	31 d2                	xor    edx,edx
c0007fac:	89 c8                	mov    eax,ecx
c0007fae:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0007fb2:	85 d2                	test   edx,edx
c0007fb4:	74 0c                	je     c0007fc2 <f_mkfs+0xc8b>
c0007fb6:	49                   	dec    ecx
c0007fb7:	46                   	inc    esi
c0007fb8:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c0007fbd:	83 54 24 34 00       	adc    DWORD PTR [esp+0x34],0x0
c0007fc2:	89 c8                	mov    eax,ecx
c0007fc4:	31 d2                	xor    edx,edx
c0007fc6:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0007fca:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c0007fce:	e9 c3 fe ff ff       	jmp    c0007e96 <f_mkfs+0xb5f>
c0007fd3:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007fd8:	77 31                	ja     c000800b <f_mkfs+0xcd4>
c0007fda:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007fdf:	75 1b                	jne    c0007ffc <f_mkfs+0xcc5>
c0007fe1:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007fe4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007fe8:	3d 80 00 00 00       	cmp    eax,0x80
c0007fed:	0f 86 d9 fd ff ff    	jbe    c0007dcc <f_mkfs+0xa95>
c0007ff3:	eb 07                	jmp    c0007ffc <f_mkfs+0xcc5>
c0007ff5:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007ffa:	76 0a                	jbe    c0008006 <f_mkfs+0xccf>
c0007ffc:	bb 0e 00 00 00       	mov    ebx,0xe
c0008001:	e9 ff 03 00 00       	jmp    c0008405 <f_mkfs+0x10ce>
c0008006:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c000800b:	31 d2                	xor    edx,edx
c000800d:	b9 00 02 00 00       	mov    ecx,0x200
c0008012:	89 e8                	mov    eax,ebp
c0008014:	e8 a2 9c ff ff       	call   c0001cbb <mem_set>
c0008019:	b9 0b 00 00 00       	mov    ecx,0xb
c000801e:	ba a2 92 02 c0       	mov    edx,0xc00292a2
c0008023:	89 e8                	mov    eax,ebp
c0008025:	e8 7c 9c ff ff       	call   c0001ca6 <mem_cpy>
c000802a:	8d 45 0b             	lea    eax,[ebp+0xb]
c000802d:	ba 00 02 00 00       	mov    edx,0x200
c0008032:	e8 62 9c ff ff       	call   c0001c99 <st_word>
c0008037:	89 f8                	mov    eax,edi
c0008039:	0f b7 d6             	movzx  edx,si
c000803c:	88 45 0d             	mov    BYTE PTR [ebp+0xd],al
c000803f:	8d 45 0e             	lea    eax,[ebp+0xe]
c0008042:	e8 52 9c ff ff       	call   c0001c99 <st_word>
c0008047:	8a 44 24 48          	mov    al,BYTE PTR [esp+0x48]
c000804b:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008050:	88 45 10             	mov    BYTE PTR [ebp+0x10],al
c0008053:	75 08                	jne    c000805d <f_mkfs+0xd26>
c0008055:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c000805d:	8d 45 11             	lea    eax,[ebp+0x11]
c0008060:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0008064:	e8 30 9c ff ff       	call   c0001c99 <st_word>
c0008069:	b8 ff ff 00 00       	mov    eax,0xffff
c000806e:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0008072:	39 d0                	cmp    eax,edx
c0008074:	b8 00 00 00 00       	mov    eax,0x0
c0008079:	1b 44 24 7c          	sbb    eax,DWORD PTR [esp+0x7c]
c000807d:	72 0a                	jb     c0008089 <f_mkfs+0xd52>
c000807f:	8d 45 13             	lea    eax,[ebp+0x13]
c0008082:	e8 12 9c ff ff       	call   c0001c99 <st_word>
c0008087:	eb 08                	jmp    c0008091 <f_mkfs+0xd5a>
c0008089:	8d 45 20             	lea    eax,[ebp+0x20]
c000808c:	e8 0c 9c ff ff       	call   c0001c9d <st_dword>
c0008091:	8d 45 18             	lea    eax,[ebp+0x18]
c0008094:	ba 3f 00 00 00       	mov    edx,0x3f
c0008099:	c6 45 15 f8          	mov    BYTE PTR [ebp+0x15],0xf8
c000809d:	e8 f7 9b ff ff       	call   c0001c99 <st_word>
c00080a2:	8d 45 1a             	lea    eax,[ebp+0x1a]
c00080a5:	ba ff 00 00 00       	mov    edx,0xff
c00080aa:	e8 ea 9b ff ff       	call   c0001c99 <st_word>
c00080af:	8d 45 1c             	lea    eax,[ebp+0x1c]
c00080b2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00080b6:	e8 e2 9b ff ff       	call   c0001c9d <st_dword>
c00080bb:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00080c0:	75 57                	jne    c0008119 <f_mkfs+0xde2>
c00080c2:	8d 45 43             	lea    eax,[ebp+0x43]
c00080c5:	ba 00 00 21 50       	mov    edx,0x50210000
c00080ca:	e8 ce 9b ff ff       	call   c0001c9d <st_dword>
c00080cf:	8d 45 24             	lea    eax,[ebp+0x24]
c00080d2:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00080d6:	e8 c2 9b ff ff       	call   c0001c9d <st_dword>
c00080db:	8d 45 2c             	lea    eax,[ebp+0x2c]
c00080de:	ba 02 00 00 00       	mov    edx,0x2
c00080e3:	e8 b5 9b ff ff       	call   c0001c9d <st_dword>
c00080e8:	8d 45 30             	lea    eax,[ebp+0x30]
c00080eb:	ba 01 00 00 00       	mov    edx,0x1
c00080f0:	e8 a4 9b ff ff       	call   c0001c99 <st_word>
c00080f5:	8d 45 32             	lea    eax,[ebp+0x32]
c00080f8:	ba 06 00 00 00       	mov    edx,0x6
c00080fd:	e8 97 9b ff ff       	call   c0001c99 <st_word>
c0008102:	c6 45 40 80          	mov    BYTE PTR [ebp+0x40],0x80
c0008106:	c6 45 42 29          	mov    BYTE PTR [ebp+0x42],0x29
c000810a:	8d 45 47             	lea    eax,[ebp+0x47]
c000810d:	b9 13 00 00 00       	mov    ecx,0x13
c0008112:	ba ae 92 02 c0       	mov    edx,0xc00292ae
c0008117:	eb 2f                	jmp    c0008148 <f_mkfs+0xe11>
c0008119:	8d 45 27             	lea    eax,[ebp+0x27]
c000811c:	ba 00 00 21 50       	mov    edx,0x50210000
c0008121:	e8 77 9b ff ff       	call   c0001c9d <st_dword>
c0008126:	0f b7 54 24 38       	movzx  edx,WORD PTR [esp+0x38]
c000812b:	8d 45 16             	lea    eax,[ebp+0x16]
c000812e:	e8 66 9b ff ff       	call   c0001c99 <st_word>
c0008133:	c6 45 24 80          	mov    BYTE PTR [ebp+0x24],0x80
c0008137:	c6 45 26 29          	mov    BYTE PTR [ebp+0x26],0x29
c000813b:	8d 45 2b             	lea    eax,[ebp+0x2b]
c000813e:	b9 13 00 00 00       	mov    ecx,0x13
c0008143:	ba c2 92 02 c0       	mov    edx,0xc00292c2
c0008148:	e8 59 9b ff ff       	call   c0001ca6 <mem_cpy>
c000814d:	8d b5 fe 01 00 00    	lea    esi,[ebp+0x1fe]
c0008153:	ba 55 aa 00 00       	mov    edx,0xaa55
c0008158:	89 f0                	mov    eax,esi
c000815a:	e8 3a 9b ff ff       	call   c0001c99 <st_word>
c000815f:	83 ec 0c             	sub    esp,0xc
c0008162:	6a 01                	push   0x1
c0008164:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0008168:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000816c:	55                   	push   ebp
c000816d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008171:	e8 7c 9a ff ff       	call   c0001bf2 <disk_write>
c0008176:	83 c4 20             	add    esp,0x20
c0008179:	85 c0                	test   eax,eax
c000817b:	0f 85 67 02 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c0008181:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008186:	0f 85 b7 00 00 00    	jne    c0008243 <f_mkfs+0xf0c>
c000818c:	83 ec 0c             	sub    esp,0xc
c000818f:	6a 01                	push   0x1
c0008191:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008195:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008199:	83 c0 06             	add    eax,0x6
c000819c:	83 d2 00             	adc    edx,0x0
c000819f:	52                   	push   edx
c00081a0:	50                   	push   eax
c00081a1:	55                   	push   ebp
c00081a2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00081a6:	e8 47 9a ff ff       	call   c0001bf2 <disk_write>
c00081ab:	83 c4 20             	add    esp,0x20
c00081ae:	b9 00 02 00 00       	mov    ecx,0x200
c00081b3:	31 d2                	xor    edx,edx
c00081b5:	89 e8                	mov    eax,ebp
c00081b7:	e8 ff 9a ff ff       	call   c0001cbb <mem_set>
c00081bc:	ba 52 52 61 41       	mov    edx,0x41615252
c00081c1:	89 e8                	mov    eax,ebp
c00081c3:	e8 d5 9a ff ff       	call   c0001c9d <st_dword>
c00081c8:	8d 85 e4 01 00 00    	lea    eax,[ebp+0x1e4]
c00081ce:	ba 72 72 41 61       	mov    edx,0x61417272
c00081d3:	e8 c5 9a ff ff       	call   c0001c9d <st_dword>
c00081d8:	8d 53 ff             	lea    edx,[ebx-0x1]
c00081db:	8d 85 e8 01 00 00    	lea    eax,[ebp+0x1e8]
c00081e1:	e8 b7 9a ff ff       	call   c0001c9d <st_dword>
c00081e6:	8d 85 ec 01 00 00    	lea    eax,[ebp+0x1ec]
c00081ec:	ba 02 00 00 00       	mov    edx,0x2
c00081f1:	e8 a7 9a ff ff       	call   c0001c9d <st_dword>
c00081f6:	ba 55 aa 00 00       	mov    edx,0xaa55
c00081fb:	89 f0                	mov    eax,esi
c00081fd:	e8 97 9a ff ff       	call   c0001c99 <st_word>
c0008202:	83 ec 0c             	sub    esp,0xc
c0008205:	6a 01                	push   0x1
c0008207:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000820b:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000820f:	83 c0 07             	add    eax,0x7
c0008212:	83 d2 00             	adc    edx,0x0
c0008215:	52                   	push   edx
c0008216:	50                   	push   eax
c0008217:	55                   	push   ebp
c0008218:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000821c:	e8 d1 99 ff ff       	call   c0001bf2 <disk_write>
c0008221:	83 c4 14             	add    esp,0x14
c0008224:	6a 01                	push   0x1
c0008226:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000822a:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000822e:	83 c0 01             	add    eax,0x1
c0008231:	83 d2 00             	adc    edx,0x0
c0008234:	52                   	push   edx
c0008235:	50                   	push   eax
c0008236:	55                   	push   ebp
c0008237:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000823b:	e8 b2 99 ff ff       	call   c0001bf2 <disk_write>
c0008240:	83 c4 20             	add    esp,0x20
c0008243:	8b 8c 24 bc 00 00 00 	mov    ecx,DWORD PTR [esp+0xbc]
c000824a:	31 d2                	xor    edx,edx
c000824c:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c0008252:	31 db                	xor    ebx,ebx
c0008254:	89 e8                	mov    eax,ebp
c0008256:	e8 60 9a ff ff       	call   c0001cbb <mem_set>
c000825b:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c0008260:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0008267:	0f 94 c3             	sete   bl
c000826a:	4b                   	dec    ebx
c000826b:	81 e3 00 00 00 ff    	and    ebx,0xff000000
c0008271:	81 c3 f8 ff ff 00    	add    ebx,0xfffff8
c0008277:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c000827c:	75 21                	jne    c000829f <f_mkfs+0xf68>
c000827e:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0008283:	89 e8                	mov    eax,ebp
c0008285:	e8 13 9a ff ff       	call   c0001c9d <st_dword>
c000828a:	8d 45 04             	lea    eax,[ebp+0x4]
c000828d:	83 ca ff             	or     edx,0xffffffff
c0008290:	e8 08 9a ff ff       	call   c0001c9d <st_dword>
c0008295:	8d 45 08             	lea    eax,[ebp+0x8]
c0008298:	ba ff ff ff 0f       	mov    edx,0xfffffff
c000829d:	eb 04                	jmp    c00082a3 <f_mkfs+0xf6c>
c000829f:	89 da                	mov    edx,ebx
c00082a1:	89 e8                	mov    eax,ebp
c00082a3:	e8 f5 99 ff ff       	call   c0001c9d <st_dword>
c00082a8:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00082ac:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00082b0:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00082b4:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00082b8:	39 ce                	cmp    esi,ecx
c00082ba:	76 02                	jbe    c00082be <f_mkfs+0xf87>
c00082bc:	89 ce                	mov    esi,ecx
c00082be:	83 ec 0c             	sub    esp,0xc
c00082c1:	56                   	push   esi
c00082c2:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00082c6:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00082ca:	55                   	push   ebp
c00082cb:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00082cf:	e8 1e 99 ff ff       	call   c0001bf2 <disk_write>
c00082d4:	83 c4 20             	add    esp,0x20
c00082d7:	85 c0                	test   eax,eax
c00082d9:	0f 85 09 01 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c00082df:	31 d2                	xor    edx,edx
c00082e1:	b9 00 02 00 00       	mov    ecx,0x200
c00082e6:	89 e8                	mov    eax,ebp
c00082e8:	e8 ce 99 ff ff       	call   c0001cbb <mem_set>
c00082ed:	31 d2                	xor    edx,edx
c00082ef:	01 74 24 30          	add    DWORD PTR [esp+0x30],esi
c00082f3:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c00082f7:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c00082fb:	75 b3                	jne    c00082b0 <f_mkfs+0xf79>
c00082fd:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0008300:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0008307:	40                   	inc    eax
c0008308:	39 44 24 40          	cmp    DWORD PTR [esp+0x40],eax
c000830c:	0f 87 65 ff ff ff    	ja     c0008277 <f_mkfs+0xf40>
c0008312:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008317:	74 04                	je     c000831d <f_mkfs+0xfe6>
c0008319:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c000831d:	89 fb                	mov    ebx,edi
c000831f:	3b 7c 24 20          	cmp    edi,DWORD PTR [esp+0x20]
c0008323:	76 04                	jbe    c0008329 <f_mkfs+0xff2>
c0008325:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008329:	83 ec 0c             	sub    esp,0xc
c000832c:	53                   	push   ebx
c000832d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008331:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008335:	55                   	push   ebp
c0008336:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000833a:	e8 b3 98 ff ff       	call   c0001bf2 <disk_write>
c000833f:	83 c4 20             	add    esp,0x20
c0008342:	85 c0                	test   eax,eax
c0008344:	0f 85 9e 00 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c000834a:	31 d2                	xor    edx,edx
c000834c:	01 5c 24 30          	add    DWORD PTR [esp+0x30],ebx
c0008350:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c0008354:	29 df                	sub    edi,ebx
c0008356:	75 c5                	jne    c000831d <f_mkfs+0xfe6>
c0008358:	b1 0c                	mov    cl,0xc
c000835a:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c000835f:	74 1d                	je     c000837e <f_mkfs+0x1047>
c0008361:	b8 ff ff 00 00       	mov    eax,0xffff
c0008366:	b1 06                	mov    cl,0x6
c0008368:	3b 44 24 78          	cmp    eax,DWORD PTR [esp+0x78]
c000836c:	1b 7c 24 7c          	sbb    edi,DWORD PTR [esp+0x7c]
c0008370:	72 0c                	jb     c000837e <f_mkfs+0x1047>
c0008372:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0008377:	0f 94 c1             	sete   cl
c000837a:	8d 4c 49 01          	lea    ecx,[ecx+ecx*2+0x1]
c000837e:	f6 44 24 3f 08       	test   BYTE PTR [esp+0x3f],0x8
c0008383:	75 4c                	jne    c00083d1 <f_mkfs+0x109a>
c0008385:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0008389:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c000838d:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c0008394:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c000839b:	c7 84 24 88 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x88],0x0
c00083a6:	c7 84 24 8c 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x8c],0x0
c00083b1:	0f b6 c9             	movzx  ecx,cl
c00083b4:	83 ec 0c             	sub    esp,0xc
c00083b7:	55                   	push   ebp
c00083b8:	8d 94 24 90 00 00 00 	lea    edx,[esp+0x90]
c00083bf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00083c3:	e8 2f c2 ff ff       	call   c00045f7 <create_partition>
c00083c8:	83 c4 10             	add    esp,0x10
c00083cb:	89 c3                	mov    ebx,eax
c00083cd:	85 c0                	test   eax,eax
c00083cf:	75 34                	jne    c0008405 <f_mkfs+0x10ce>
c00083d1:	31 db                	xor    ebx,ebx
c00083d3:	50                   	push   eax
c00083d4:	6a 00                	push   0x0
c00083d6:	6a 00                	push   0x0
c00083d8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00083dc:	e8 27 98 ff ff       	call   c0001c08 <disk_ioctl>
c00083e1:	83 c4 10             	add    esp,0x10
c00083e4:	85 c0                	test   eax,eax
c00083e6:	74 1d                	je     c0008405 <f_mkfs+0x10ce>
c00083e8:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c00083f0:	75 0c                	jne    c00083fe <f_mkfs+0x10c7>
c00083f2:	83 ec 0c             	sub    esp,0xc
c00083f5:	55                   	push   ebp
c00083f6:	e8 75 00 00 00       	call   c0008470 <ff_memfree>
c00083fb:	83 c4 10             	add    esp,0x10
c00083fe:	bb 01 00 00 00       	mov    ebx,0x1
c0008403:	eb 48                	jmp    c000844d <f_mkfs+0x1116>
c0008405:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c000840d:	75 3e                	jne    c000844d <f_mkfs+0x1116>
c000840f:	83 ec 0c             	sub    esp,0xc
c0008412:	55                   	push   ebp
c0008413:	e8 58 00 00 00       	call   c0008470 <ff_memfree>
c0008418:	83 c4 10             	add    esp,0x10
c000841b:	eb 30                	jmp    c000844d <f_mkfs+0x1116>
c000841d:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c0008422:	0f 85 eb fa ff ff    	jne    c0007f13 <f_mkfs+0xbdc>
c0008428:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000842c:	81 ff 80 00 00 00    	cmp    edi,0x80
c0008432:	0f 86 b8 f9 ff ff    	jbe    c0007df0 <f_mkfs+0xab9>
c0008438:	e9 bf fb ff ff       	jmp    c0007ffc <f_mkfs+0xcc5>
c000843d:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c0008442:	0f 85 c0 fa ff ff    	jne    c0007f08 <f_mkfs+0xbd1>
c0008448:	e9 af fb ff ff       	jmp    c0007ffc <f_mkfs+0xcc5>
c000844d:	81 c4 9c 00 00 00    	add    esp,0x9c
c0008453:	89 d8                	mov    eax,ebx
c0008455:	5b                   	pop    ebx
c0008456:	5e                   	pop    esi
c0008457:	5f                   	pop    edi
c0008458:	5d                   	pop    ebp
c0008459:	c3                   	ret    

c000845a <ff_memalloc>:
c000845a:	83 ec 0c             	sub    esp,0xc
c000845d:	83 ec 0c             	sub    esp,0xc
c0008460:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008464:	e8 30 71 00 00       	call   c000f599 <malloc>
c0008469:	83 c4 10             	add    esp,0x10
c000846c:	83 c4 0c             	add    esp,0xc
c000846f:	c3                   	ret    

c0008470 <ff_memfree>:
c0008470:	83 ec 0c             	sub    esp,0xc
c0008473:	83 ec 0c             	sub    esp,0xc
c0008476:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000847a:	e8 2a 71 00 00       	call   c000f5a9 <free>
c000847f:	83 c4 10             	add    esp,0x10
c0008482:	90                   	nop
c0008483:	83 c4 0c             	add    esp,0xc
c0008486:	c3                   	ret    

c0008487 <ff_uni2oem>:
c0008487:	83 ec 14             	sub    esp,0x14
c000848a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000848e:	66 89 04 24          	mov    WORD PTR [esp],ax
c0008492:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0008499:	c7 44 24 0c e0 95 02 c0 	mov    DWORD PTR [esp+0xc],0xc00295e0
c00084a1:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c00084a6:	77 0b                	ja     c00084b3 <ff_uni2oem+0x2c>
c00084a8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00084ac:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00084b1:	eb 5b                	jmp    c000850e <ff_uni2oem+0x87>
c00084b3:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c00084bb:	77 51                	ja     c000850e <ff_uni2oem+0x87>
c00084bd:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c00084c3:	75 49                	jne    c000850e <ff_uni2oem+0x87>
c00084c5:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c00084cc:	eb 0b                	jmp    c00084d9 <ff_uni2oem+0x52>
c00084ce:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c00084d3:	40                   	inc    eax
c00084d4:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00084d9:	66 83 7c 24 12 7f    	cmp    WORD PTR [esp+0x12],0x7f
c00084df:	77 1b                	ja     c00084fc <ff_uni2oem+0x75>
c00084e1:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c00084e6:	01 c0                	add    eax,eax
c00084e8:	89 c2                	mov    edx,eax
c00084ea:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00084ee:	01 d0                	add    eax,edx
c00084f0:	66 8b 00             	mov    ax,WORD PTR [eax]
c00084f3:	0f b7 c0             	movzx  eax,ax
c00084f6:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c00084fa:	75 d2                	jne    c00084ce <ff_uni2oem+0x47>
c00084fc:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008501:	83 e8 80             	sub    eax,0xffffff80
c0008504:	25 ff 00 00 00       	and    eax,0xff
c0008509:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c000850e:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008513:	83 c4 14             	add    esp,0x14
c0008516:	c3                   	ret    

c0008517 <ff_oem2uni>:
c0008517:	83 ec 18             	sub    esp,0x18
c000851a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000851e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008522:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0008527:	66 89 04 24          	mov    WORD PTR [esp],ax
c000852b:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0008532:	c7 44 24 10 e0 95 02 c0 	mov    DWORD PTR [esp+0x10],0xc00295e0
c000853a:	66 83 7c 24 04 7f    	cmp    WORD PTR [esp+0x4],0x7f
c0008540:	77 0b                	ja     c000854d <ff_oem2uni+0x36>
c0008542:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008546:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c000854b:	eb 2d                	jmp    c000857a <ff_oem2uni+0x63>
c000854d:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c0008553:	75 25                	jne    c000857a <ff_oem2uni+0x63>
c0008555:	66 81 7c 24 04 ff 00 	cmp    WORD PTR [esp+0x4],0xff
c000855c:	77 1c                	ja     c000857a <ff_oem2uni+0x63>
c000855e:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0008563:	05 80 ff ff 7f       	add    eax,0x7fffff80
c0008568:	01 c0                	add    eax,eax
c000856a:	89 c2                	mov    edx,eax
c000856c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008570:	01 d0                	add    eax,edx
c0008572:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008575:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c000857a:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c000857f:	83 c4 18             	add    esp,0x18
c0008582:	c3                   	ret    

c0008583 <ff_wtoupper>:
c0008583:	83 ec 10             	sub    esp,0x10
c0008586:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c000858e:	0f 87 3e 01 00 00    	ja     c00086d2 <ff_wtoupper+0x14f>
c0008594:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008598:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c000859d:	66 81 7c 24 0a ff 0f 	cmp    WORD PTR [esp+0xa],0xfff
c00085a4:	77 07                	ja     c00085ad <ff_wtoupper+0x2a>
c00085a6:	b8 e0 93 02 c0       	mov    eax,0xc00293e0
c00085ab:	eb 05                	jmp    c00085b2 <ff_wtoupper+0x2f>
c00085ad:	b8 20 93 02 c0       	mov    eax,0xc0029320
c00085b2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00085b6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00085ba:	8d 50 02             	lea    edx,[eax+0x2]
c00085bd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00085c1:	66 8b 00             	mov    ax,WORD PTR [eax]
c00085c4:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c00085c9:	66 83 7c 24 08 00    	cmp    WORD PTR [esp+0x8],0x0
c00085cf:	0f 84 f4 00 00 00    	je     c00086c9 <ff_wtoupper+0x146>
c00085d5:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00085da:	66 3b 44 24 08       	cmp    ax,WORD PTR [esp+0x8]
c00085df:	0f 82 e4 00 00 00    	jb     c00086c9 <ff_wtoupper+0x146>
c00085e5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00085e9:	8d 50 02             	lea    edx,[eax+0x2]
c00085ec:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00085f0:	66 8b 00             	mov    ax,WORD PTR [eax]
c00085f3:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c00085f8:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c00085fd:	66 c1 e8 08          	shr    ax,0x8
c0008601:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0008606:	66 81 64 24 06 ff 00 	and    WORD PTR [esp+0x6],0xff
c000860d:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0008612:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c0008617:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c000861c:	01 ca                	add    edx,ecx
c000861e:	39 d0                	cmp    eax,edx
c0008620:	0f 8d 86 00 00 00    	jge    c00086ac <ff_wtoupper+0x129>
c0008626:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c000862b:	83 f8 08             	cmp    eax,0x8
c000862e:	0f 87 94 00 00 00    	ja     c00086c8 <ff_wtoupper+0x145>
c0008634:	8b 04 85 e0 92 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6d20]
c000863b:	ff e0                	jmp    eax
c000863d:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0008642:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0008647:	29 c2                	sub    edx,eax
c0008649:	89 d0                	mov    eax,edx
c000864b:	01 c0                	add    eax,eax
c000864d:	89 c2                	mov    edx,eax
c000864f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008653:	01 d0                	add    eax,edx
c0008655:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008658:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c000865d:	eb 4b                	jmp    c00086aa <ff_wtoupper+0x127>
c000865f:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0008664:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0008668:	83 e0 01             	and    eax,0x1
c000866b:	66 29 44 24 0a       	sub    WORD PTR [esp+0xa],ax
c0008670:	eb 38                	jmp    c00086aa <ff_wtoupper+0x127>
c0008672:	66 83 6c 24 0a 10    	sub    WORD PTR [esp+0xa],0x10
c0008678:	eb 30                	jmp    c00086aa <ff_wtoupper+0x127>
c000867a:	66 83 6c 24 0a 20    	sub    WORD PTR [esp+0xa],0x20
c0008680:	eb 28                	jmp    c00086aa <ff_wtoupper+0x127>
c0008682:	66 83 6c 24 0a 30    	sub    WORD PTR [esp+0xa],0x30
c0008688:	eb 20                	jmp    c00086aa <ff_wtoupper+0x127>
c000868a:	66 83 6c 24 0a 1a    	sub    WORD PTR [esp+0xa],0x1a
c0008690:	eb 18                	jmp    c00086aa <ff_wtoupper+0x127>
c0008692:	66 83 44 24 0a 08    	add    WORD PTR [esp+0xa],0x8
c0008698:	eb 10                	jmp    c00086aa <ff_wtoupper+0x127>
c000869a:	66 83 6c 24 0a 50    	sub    WORD PTR [esp+0xa],0x50
c00086a0:	eb 08                	jmp    c00086aa <ff_wtoupper+0x127>
c00086a2:	66 81 6c 24 0a 60 1c 	sub    WORD PTR [esp+0xa],0x1c60
c00086a9:	90                   	nop
c00086aa:	eb 1c                	jmp    c00086c8 <ff_wtoupper+0x145>
c00086ac:	66 83 7c 24 04 00    	cmp    WORD PTR [esp+0x4],0x0
c00086b2:	0f 85 fe fe ff ff    	jne    c00085b6 <ff_wtoupper+0x33>
c00086b8:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c00086bd:	01 c0                	add    eax,eax
c00086bf:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c00086c3:	e9 ee fe ff ff       	jmp    c00085b6 <ff_wtoupper+0x33>
c00086c8:	90                   	nop
c00086c9:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c00086ce:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00086d2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00086d6:	83 c4 10             	add    esp,0x10
c00086d9:	c3                   	ret    

c00086da <psrc_set_converter>:
c00086da:	56                   	push   esi
c00086db:	89 d6                	mov    esi,edx
c00086dd:	53                   	push   ebx
c00086de:	89 c3                	mov    ebx,eax
c00086e0:	83 ec 0c             	sub    esp,0xc
c00086e3:	52                   	push   edx
c00086e4:	50                   	push   eax
c00086e5:	e8 6f 55 00 00       	call   c000dc59 <sinc_set_converter>
c00086ea:	83 c4 10             	add    esp,0x10
c00086ed:	85 c0                	test   eax,eax
c00086ef:	74 25                	je     c0008716 <psrc_set_converter+0x3c>
c00086f1:	50                   	push   eax
c00086f2:	50                   	push   eax
c00086f3:	56                   	push   esi
c00086f4:	53                   	push   ebx
c00086f5:	e8 17 5d 00 00       	call   c000e411 <zoh_set_converter>
c00086fa:	83 c4 10             	add    esp,0x10
c00086fd:	85 c0                	test   eax,eax
c00086ff:	74 15                	je     c0008716 <psrc_set_converter+0x3c>
c0008701:	51                   	push   ecx
c0008702:	51                   	push   ecx
c0008703:	56                   	push   esi
c0008704:	53                   	push   ebx
c0008705:	e8 0f 11 00 00       	call   c0009819 <linear_set_converter>
c000870a:	83 c4 10             	add    esp,0x10
c000870d:	ba 0a 00 00 00       	mov    edx,0xa
c0008712:	85 c0                	test   eax,eax
c0008714:	75 02                	jne    c0008718 <psrc_set_converter+0x3e>
c0008716:	31 d2                	xor    edx,edx
c0008718:	89 d0                	mov    eax,edx
c000871a:	5a                   	pop    edx
c000871b:	5b                   	pop    ebx
c000871c:	5e                   	pop    esi
c000871d:	c3                   	ret    

c000871e <src_delete>:
c000871e:	53                   	push   ebx
c000871f:	83 ec 08             	sub    esp,0x8
c0008722:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008726:	85 db                	test   ebx,ebx
c0008728:	74 29                	je     c0008753 <src_delete+0x35>
c000872a:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000872d:	85 c0                	test   eax,eax
c000872f:	74 0c                	je     c000873d <src_delete+0x1f>
c0008731:	83 ec 0c             	sub    esp,0xc
c0008734:	50                   	push   eax
c0008735:	e8 6f 6e 00 00       	call   c000f5a9 <free>
c000873a:	83 c4 10             	add    esp,0x10
c000873d:	50                   	push   eax
c000873e:	6a 3c                	push   0x3c
c0008740:	6a 00                	push   0x0
c0008742:	53                   	push   ebx
c0008743:	e8 08 80 ff ff       	call   c0000750 <memset>
c0008748:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000874b:	e8 59 6e 00 00       	call   c000f5a9 <free>
c0008750:	83 c4 10             	add    esp,0x10
c0008753:	31 c0                	xor    eax,eax
c0008755:	83 c4 08             	add    esp,0x8
c0008758:	5b                   	pop    ebx
c0008759:	c3                   	ret    

c000875a <src_process>:
c000875a:	55                   	push   ebp
c000875b:	57                   	push   edi
c000875c:	56                   	push   esi
c000875d:	53                   	push   ebx
c000875e:	83 ec 1c             	sub    esp,0x1c
c0008761:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0008765:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0008769:	85 ed                	test   ebp,ebp
c000876b:	0f 84 6f 01 00 00    	je     c00088e0 <src_process+0x186>
c0008771:	83 7d 20 00          	cmp    DWORD PTR [ebp+0x20],0x0
c0008775:	0f 84 6c 01 00 00    	je     c00088e7 <src_process+0x18d>
c000877b:	83 7d 24 00          	cmp    DWORD PTR [ebp+0x24],0x0
c000877f:	0f 84 62 01 00 00    	je     c00088e7 <src_process+0x18d>
c0008785:	81 7d 18 2b 02 00 00 	cmp    DWORD PTR [ebp+0x18],0x22b
c000878c:	0f 85 5c 01 00 00    	jne    c00088ee <src_process+0x194>
c0008792:	85 db                	test   ebx,ebx
c0008794:	0f 84 5b 01 00 00    	je     c00088f5 <src_process+0x19b>
c000879a:	8b 33                	mov    esi,DWORD PTR [ebx]
c000879c:	85 f6                	test   esi,esi
c000879e:	0f 84 58 01 00 00    	je     c00088fc <src_process+0x1a2>
c00087a4:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00087a7:	85 ff                	test   edi,edi
c00087a9:	0f 84 4d 01 00 00    	je     c00088fc <src_process+0x1a2>
c00087af:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00087b2:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00087b5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00087b9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00087bd:	68 00 00 70 3f       	push   0x3f700000
c00087c2:	6a 00                	push   0x0
c00087c4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00087c8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00087cc:	e8 16 fa 01 00       	call   c00281e7 <__ltdf2>
c00087d1:	83 c4 10             	add    esp,0x10
c00087d4:	85 c0                	test   eax,eax
c00087d6:	0f 88 27 01 00 00    	js     c0008903 <src_process+0x1a9>
c00087dc:	68 00 00 70 40       	push   0x40700000
c00087e1:	6a 00                	push   0x0
c00087e3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00087e7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00087eb:	e8 d9 f9 01 00       	call   c00281c9 <__gtdf2>
c00087f0:	83 c4 10             	add    esp,0x10
c00087f3:	85 c0                	test   eax,eax
c00087f5:	0f 8f 08 01 00 00    	jg     c0008903 <src_process+0x1a9>
c00087fb:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c00087ff:	79 07                	jns    c0008808 <src_process+0xae>
c0008801:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0008808:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000880b:	85 c0                	test   eax,eax
c000880d:	79 50                	jns    c000885f <src_process+0x105>
c000880f:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0008816:	39 fe                	cmp    esi,edi
c0008818:	72 37                	jb     c0008851 <src_process+0xf7>
c000881a:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008821:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008828:	68 00 00 70 3f       	push   0x3f700000
c000882d:	6a 00                	push   0x0
c000882f:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0008832:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c0008835:	e8 ad f9 01 00       	call   c00281e7 <__ltdf2>
c000883a:	83 c4 10             	add    esp,0x10
c000883d:	85 c0                	test   eax,eax
c000883f:	79 37                	jns    c0008878 <src_process+0x11e>
c0008841:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0008845:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0008849:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000884c:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000884f:	eb 27                	jmp    c0008878 <src_process+0x11e>
c0008851:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0008854:	0f af 45 14          	imul   eax,DWORD PTR [ebp+0x14]
c0008858:	8d 04 86             	lea    eax,[esi+eax*4]
c000885b:	39 c7                	cmp    edi,eax
c000885d:	eb 0d                	jmp    c000886c <src_process+0x112>
c000885f:	39 fe                	cmp    esi,edi
c0008861:	72 ee                	jb     c0008851 <src_process+0xf7>
c0008863:	0f af 45 14          	imul   eax,DWORD PTR [ebp+0x14]
c0008867:	8d 04 87             	lea    eax,[edi+eax*4]
c000886a:	39 c6                	cmp    esi,eax
c000886c:	73 ac                	jae    c000881a <src_process+0xc0>
c000886e:	b8 10 00 00 00       	mov    eax,0x10
c0008873:	e9 90 00 00 00       	jmp    c0008908 <src_process+0x1ae>
c0008878:	83 ec 10             	sub    esp,0x10
c000887b:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c000887e:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0008881:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0008884:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c0008887:	e8 60 f0 01 00       	call   c00278ec <__subdf3>
c000888c:	83 c4 18             	add    esp,0x18
c000888f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008893:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008897:	52                   	push   edx
c0008898:	50                   	push   eax
c0008899:	e8 e2 fa 01 00       	call   c0028380 <fabs>
c000889e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00088a2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00088a6:	83 c4 10             	add    esp,0x10
c00088a9:	68 af 03 d2 3c       	push   0x3cd203af
c00088ae:	68 16 56 e7 9e       	push   0x9ee75616
c00088b3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00088b7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00088bb:	e8 27 f9 01 00       	call   c00281e7 <__ltdf2>
c00088c0:	83 c4 10             	add    esp,0x10
c00088c3:	85 c0                	test   eax,eax
c00088c5:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c00088c9:	89 6c 24 30          	mov    DWORD PTR [esp+0x30],ebp
c00088cd:	79 05                	jns    c00088d4 <src_process+0x17a>
c00088cf:	8b 45 24             	mov    eax,DWORD PTR [ebp+0x24]
c00088d2:	eb 03                	jmp    c00088d7 <src_process+0x17d>
c00088d4:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c00088d7:	83 c4 1c             	add    esp,0x1c
c00088da:	5b                   	pop    ebx
c00088db:	5e                   	pop    esi
c00088dc:	5f                   	pop    edi
c00088dd:	5d                   	pop    ebp
c00088de:	ff e0                	jmp    eax
c00088e0:	b8 02 00 00 00       	mov    eax,0x2
c00088e5:	eb 21                	jmp    c0008908 <src_process+0x1ae>
c00088e7:	b8 07 00 00 00       	mov    eax,0x7
c00088ec:	eb 1a                	jmp    c0008908 <src_process+0x1ae>
c00088ee:	b8 12 00 00 00       	mov    eax,0x12
c00088f3:	eb 13                	jmp    c0008908 <src_process+0x1ae>
c00088f5:	b8 03 00 00 00       	mov    eax,0x3
c00088fa:	eb 0c                	jmp    c0008908 <src_process+0x1ae>
c00088fc:	b8 04 00 00 00       	mov    eax,0x4
c0008901:	eb 05                	jmp    c0008908 <src_process+0x1ae>
c0008903:	b8 06 00 00 00       	mov    eax,0x6
c0008908:	83 c4 1c             	add    esp,0x1c
c000890b:	5b                   	pop    ebx
c000890c:	5e                   	pop    esi
c000890d:	5f                   	pop    edi
c000890e:	5d                   	pop    ebp
c000890f:	c3                   	ret    

c0008910 <src_callback_read>:
c0008910:	55                   	push   ebp
c0008911:	57                   	push   edi
c0008912:	56                   	push   esi
c0008913:	53                   	push   ebx
c0008914:	83 ec 3c             	sub    esp,0x3c
c0008917:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c000891b:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c000891f:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0008923:	8b 7c 24 58          	mov    edi,DWORD PTR [esp+0x58]
c0008927:	85 ed                	test   ebp,ebp
c0008929:	0f 8e 52 01 00 00    	jle    c0008a81 <src_callback_read+0x171>
c000892f:	85 db                	test   ebx,ebx
c0008931:	0f 84 4a 01 00 00    	je     c0008a81 <src_callback_read+0x171>
c0008937:	81 7b 18 2c 02 00 00 	cmp    DWORD PTR [ebx+0x18],0x22c
c000893e:	74 0c                	je     c000894c <src_callback_read+0x3c>
c0008940:	c7 43 10 12 00 00 00 	mov    DWORD PTR [ebx+0x10],0x12
c0008947:	e9 35 01 00 00       	jmp    c0008a81 <src_callback_read+0x171>
c000894c:	83 7b 2c 00          	cmp    DWORD PTR [ebx+0x2c],0x0
c0008950:	75 0c                	jne    c000895e <src_callback_read+0x4e>
c0008952:	c7 43 10 13 00 00 00 	mov    DWORD PTR [ebx+0x10],0x13
c0008959:	e9 23 01 00 00       	jmp    c0008a81 <src_callback_read+0x171>
c000895e:	51                   	push   ecx
c000895f:	6a 24                	push   0x24
c0008961:	6a 00                	push   0x0
c0008963:	8d 44 24 18          	lea    eax,[esp+0x18]
c0008967:	50                   	push   eax
c0008968:	e8 e3 7d ff ff       	call   c0000750 <memset>
c000896d:	83 c4 10             	add    esp,0x10
c0008970:	68 00 00 70 3f       	push   0x3f700000
c0008975:	6a 00                	push   0x0
c0008977:	57                   	push   edi
c0008978:	56                   	push   esi
c0008979:	e8 69 f8 01 00       	call   c00281e7 <__ltdf2>
c000897e:	83 c4 10             	add    esp,0x10
c0008981:	85 c0                	test   eax,eax
c0008983:	78 3e                	js     c00089c3 <src_callback_read+0xb3>
c0008985:	68 00 00 70 40       	push   0x40700000
c000898a:	6a 00                	push   0x0
c000898c:	57                   	push   edi
c000898d:	56                   	push   esi
c000898e:	e8 36 f8 01 00       	call   c00281c9 <__gtdf2>
c0008993:	83 c4 10             	add    esp,0x10
c0008996:	85 c0                	test   eax,eax
c0008998:	7f 29                	jg     c00089c3 <src_callback_read+0xb3>
c000899a:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000899e:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c00089a2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00089a6:	89 7c 24 2c          	mov    DWORD PTR [esp+0x2c],edi
c00089aa:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00089ad:	89 6c 24 18          	mov    DWORD PTR [esp+0x18],ebp
c00089b1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00089b5:	31 f6                	xor    esi,esi
c00089b7:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c00089ba:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00089be:	e9 97 00 00 00       	jmp    c0008a5a <src_callback_read+0x14a>
c00089c3:	c7 43 10 06 00 00 00 	mov    DWORD PTR [ebx+0x10],0x6
c00089ca:	e9 b2 00 00 00       	jmp    c0008a81 <src_callback_read+0x171>
c00089cf:	8d 44 24 04          	lea    eax,[esp+0x4]
c00089d3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00089d7:	52                   	push   edx
c00089d8:	52                   	push   edx
c00089d9:	8d 44 24 10          	lea    eax,[esp+0x10]
c00089dd:	50                   	push   eax
c00089de:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00089e1:	ff 53 2c             	call   DWORD PTR [ebx+0x2c]
c00089e4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00089e8:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00089ec:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00089f0:	83 c4 10             	add    esp,0x10
c00089f3:	85 c0                	test   eax,eax
c00089f5:	75 08                	jne    c00089ff <src_callback_read+0xef>
c00089f7:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c00089ff:	c7 43 18 2b 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22b
c0008a06:	50                   	push   eax
c0008a07:	50                   	push   eax
c0008a08:	8d 44 24 14          	lea    eax,[esp+0x14]
c0008a0c:	50                   	push   eax
c0008a0d:	53                   	push   ebx
c0008a0e:	e8 47 fd ff ff       	call   c000875a <src_process>
c0008a13:	83 c4 10             	add    esp,0x10
c0008a16:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008a1d:	85 c0                	test   eax,eax
c0008a1f:	75 49                	jne    c0008a6a <src_callback_read+0x15a>
c0008a21:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0008a25:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0008a28:	89 f9                	mov    ecx,edi
c0008a2a:	29 7c 24 14          	sub    DWORD PTR [esp+0x14],edi
c0008a2e:	0f af ca             	imul   ecx,edx
c0008a31:	c1 e1 02             	shl    ecx,0x2
c0008a34:	01 4c 24 0c          	add    DWORD PTR [esp+0xc],ecx
c0008a38:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0008a3c:	0f af d1             	imul   edx,ecx
c0008a3f:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c0008a43:	c1 e2 02             	shl    edx,0x2
c0008a46:	01 54 24 10          	add    DWORD PTR [esp+0x10],edx
c0008a4a:	8d 14 31             	lea    edx,[ecx+esi*1]
c0008a4d:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c0008a52:	74 12                	je     c0008a66 <src_callback_read+0x156>
c0008a54:	39 d5                	cmp    ebp,edx
c0008a56:	7e 14                	jle    c0008a6c <src_callback_read+0x15c>
c0008a58:	89 d6                	mov    esi,edx
c0008a5a:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0008a5f:	75 9e                	jne    c00089ff <src_callback_read+0xef>
c0008a61:	e9 69 ff ff ff       	jmp    c00089cf <src_callback_read+0xbf>
c0008a66:	85 c9                	test   ecx,ecx
c0008a68:	75 ea                	jne    c0008a54 <src_callback_read+0x144>
c0008a6a:	89 f2                	mov    edx,esi
c0008a6c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0008a70:	85 c0                	test   eax,eax
c0008a72:	89 4b 38             	mov    DWORD PTR [ebx+0x38],ecx
c0008a75:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008a79:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c0008a7c:	74 05                	je     c0008a83 <src_callback_read+0x173>
c0008a7e:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0008a81:	31 d2                	xor    edx,edx
c0008a83:	83 c4 3c             	add    esp,0x3c
c0008a86:	89 d0                	mov    eax,edx
c0008a88:	5b                   	pop    ebx
c0008a89:	5e                   	pop    esi
c0008a8a:	5f                   	pop    edi
c0008a8b:	5d                   	pop    ebp
c0008a8c:	c3                   	ret    

c0008a8d <src_set_ratio>:
c0008a8d:	57                   	push   edi
c0008a8e:	ba 02 00 00 00       	mov    edx,0x2
c0008a93:	56                   	push   esi
c0008a94:	53                   	push   ebx
c0008a95:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008a99:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008a9d:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0008aa1:	85 db                	test   ebx,ebx
c0008aa3:	74 4c                	je     c0008af1 <src_set_ratio+0x64>
c0008aa5:	ba 07 00 00 00       	mov    edx,0x7
c0008aaa:	83 7b 20 00          	cmp    DWORD PTR [ebx+0x20],0x0
c0008aae:	74 41                	je     c0008af1 <src_set_ratio+0x64>
c0008ab0:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c0008ab4:	74 3b                	je     c0008af1 <src_set_ratio+0x64>
c0008ab6:	68 00 00 70 3f       	push   0x3f700000
c0008abb:	6a 00                	push   0x0
c0008abd:	57                   	push   edi
c0008abe:	56                   	push   esi
c0008abf:	e8 23 f7 01 00       	call   c00281e7 <__ltdf2>
c0008ac4:	83 c4 10             	add    esp,0x10
c0008ac7:	ba 06 00 00 00       	mov    edx,0x6
c0008acc:	85 c0                	test   eax,eax
c0008ace:	78 21                	js     c0008af1 <src_set_ratio+0x64>
c0008ad0:	68 00 00 70 40       	push   0x40700000
c0008ad5:	6a 00                	push   0x0
c0008ad7:	57                   	push   edi
c0008ad8:	56                   	push   esi
c0008ad9:	e8 eb f6 01 00       	call   c00281c9 <__gtdf2>
c0008ade:	83 c4 10             	add    esp,0x10
c0008ae1:	ba 06 00 00 00       	mov    edx,0x6
c0008ae6:	85 c0                	test   eax,eax
c0008ae8:	7f 07                	jg     c0008af1 <src_set_ratio+0x64>
c0008aea:	89 33                	mov    DWORD PTR [ebx],esi
c0008aec:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0008aef:	31 d2                	xor    edx,edx
c0008af1:	5b                   	pop    ebx
c0008af2:	89 d0                	mov    eax,edx
c0008af4:	5e                   	pop    esi
c0008af5:	5f                   	pop    edi
c0008af6:	c3                   	ret    

c0008af7 <src_get_channels>:
c0008af7:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008afb:	b8 02 00 00 00       	mov    eax,0x2
c0008b00:	85 d2                	test   edx,edx
c0008b02:	74 14                	je     c0008b18 <src_get_channels+0x21>
c0008b04:	b8 07 00 00 00       	mov    eax,0x7
c0008b09:	83 7a 20 00          	cmp    DWORD PTR [edx+0x20],0x0
c0008b0d:	74 09                	je     c0008b18 <src_get_channels+0x21>
c0008b0f:	83 7a 24 00          	cmp    DWORD PTR [edx+0x24],0x0
c0008b13:	74 03                	je     c0008b18 <src_get_channels+0x21>
c0008b15:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0008b18:	c3                   	ret    

c0008b19 <src_reset>:
c0008b19:	53                   	push   ebx
c0008b1a:	b8 02 00 00 00       	mov    eax,0x2
c0008b1f:	83 ec 08             	sub    esp,0x8
c0008b22:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008b26:	85 db                	test   ebx,ebx
c0008b28:	74 36                	je     c0008b60 <src_reset+0x47>
c0008b2a:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0008b2d:	85 c0                	test   eax,eax
c0008b2f:	74 09                	je     c0008b3a <src_reset+0x21>
c0008b31:	83 ec 0c             	sub    esp,0xc
c0008b34:	53                   	push   ebx
c0008b35:	ff d0                	call   eax
c0008b37:	83 c4 10             	add    esp,0x10
c0008b3a:	31 c0                	xor    eax,eax
c0008b3c:	31 d2                	xor    edx,edx
c0008b3e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0008b41:	89 03                	mov    DWORD PTR [ebx],eax
c0008b43:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0008b46:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0008b49:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0008b50:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0008b57:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008b5e:	31 c0                	xor    eax,eax
c0008b60:	83 c4 08             	add    esp,0x8
c0008b63:	5b                   	pop    ebx
c0008b64:	c3                   	ret    

c0008b65 <src_new>:
c0008b65:	57                   	push   edi
c0008b66:	56                   	push   esi
c0008b67:	53                   	push   ebx
c0008b68:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0008b6c:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0008b70:	85 f6                	test   esi,esi
c0008b72:	74 73                	je     c0008be7 <src_new+0x82>
c0008b74:	85 ff                	test   edi,edi
c0008b76:	7f 08                	jg     c0008b80 <src_new+0x1b>
c0008b78:	c7 06 0b 00 00 00    	mov    DWORD PTR [esi],0xb
c0008b7e:	eb 1e                	jmp    c0008b9e <src_new+0x39>
c0008b80:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0008b86:	50                   	push   eax
c0008b87:	50                   	push   eax
c0008b88:	6a 3c                	push   0x3c
c0008b8a:	6a 01                	push   0x1
c0008b8c:	e8 38 6a 00 00       	call   c000f5c9 <calloc>
c0008b91:	83 c4 10             	add    esp,0x10
c0008b94:	89 c3                	mov    ebx,eax
c0008b96:	85 c0                	test   eax,eax
c0008b98:	75 10                	jne    c0008baa <src_new+0x45>
c0008b9a:	85 f6                	test   esi,esi
c0008b9c:	75 04                	jne    c0008ba2 <src_new+0x3d>
c0008b9e:	31 db                	xor    ebx,ebx
c0008ba0:	eb 4b                	jmp    c0008bed <src_new+0x88>
c0008ba2:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c0008ba8:	eb 43                	jmp    c0008bed <src_new+0x88>
c0008baa:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c0008bad:	c7 40 18 2b 02 00 00 	mov    DWORD PTR [eax+0x18],0x22b
c0008bb4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008bb8:	e8 1d fb ff ff       	call   c00086da <psrc_set_converter>
c0008bbd:	85 c0                	test   eax,eax
c0008bbf:	74 18                	je     c0008bd9 <src_new+0x74>
c0008bc1:	85 f6                	test   esi,esi
c0008bc3:	74 06                	je     c0008bcb <src_new+0x66>
c0008bc5:	c7 06 0a 00 00 00    	mov    DWORD PTR [esi],0xa
c0008bcb:	83 ec 0c             	sub    esp,0xc
c0008bce:	53                   	push   ebx
c0008bcf:	31 db                	xor    ebx,ebx
c0008bd1:	e8 d3 69 00 00       	call   c000f5a9 <free>
c0008bd6:	83 c4 10             	add    esp,0x10
c0008bd9:	83 ec 0c             	sub    esp,0xc
c0008bdc:	53                   	push   ebx
c0008bdd:	e8 37 ff ff ff       	call   c0008b19 <src_reset>
c0008be2:	83 c4 10             	add    esp,0x10
c0008be5:	eb 06                	jmp    c0008bed <src_new+0x88>
c0008be7:	85 ff                	test   edi,edi
c0008be9:	7f 9b                	jg     c0008b86 <src_new+0x21>
c0008beb:	eb b1                	jmp    c0008b9e <src_new+0x39>
c0008bed:	89 d8                	mov    eax,ebx
c0008bef:	5b                   	pop    ebx
c0008bf0:	5e                   	pop    esi
c0008bf1:	5f                   	pop    edi
c0008bf2:	c3                   	ret    

c0008bf3 <src_callback_new>:
c0008bf3:	56                   	push   esi
c0008bf4:	53                   	push   ebx
c0008bf5:	53                   	push   ebx
c0008bf6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0008bfa:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008bfe:	85 f6                	test   esi,esi
c0008c00:	75 0e                	jne    c0008c10 <src_callback_new+0x1d>
c0008c02:	31 db                	xor    ebx,ebx
c0008c04:	85 c0                	test   eax,eax
c0008c06:	74 47                	je     c0008c4f <src_callback_new+0x5c>
c0008c08:	c7 00 11 00 00 00    	mov    DWORD PTR [eax],0x11
c0008c0e:	eb 3f                	jmp    c0008c4f <src_callback_new+0x5c>
c0008c10:	85 c0                	test   eax,eax
c0008c12:	74 06                	je     c0008c1a <src_callback_new+0x27>
c0008c14:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0008c1a:	51                   	push   ecx
c0008c1b:	50                   	push   eax
c0008c1c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008c20:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008c24:	e8 3c ff ff ff       	call   c0008b65 <src_new>
c0008c29:	83 c4 10             	add    esp,0x10
c0008c2c:	89 c3                	mov    ebx,eax
c0008c2e:	85 c0                	test   eax,eax
c0008c30:	74 1d                	je     c0008c4f <src_callback_new+0x5c>
c0008c32:	83 ec 0c             	sub    esp,0xc
c0008c35:	50                   	push   eax
c0008c36:	e8 de fe ff ff       	call   c0008b19 <src_reset>
c0008c3b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008c3f:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008c46:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0008c49:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0008c4c:	83 c4 10             	add    esp,0x10
c0008c4f:	89 d8                	mov    eax,ebx
c0008c51:	5a                   	pop    edx
c0008c52:	5b                   	pop    ebx
c0008c53:	5e                   	pop    esi
c0008c54:	c3                   	ret    

c0008c55 <src_get_name>:
c0008c55:	53                   	push   ebx
c0008c56:	83 ec 14             	sub    esp,0x14
c0008c59:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008c5d:	53                   	push   ebx
c0008c5e:	e8 d0 4f 00 00       	call   c000dc33 <sinc_get_name>
c0008c63:	83 c4 10             	add    esp,0x10
c0008c66:	85 c0                	test   eax,eax
c0008c68:	75 1d                	jne    c0008c87 <src_get_name+0x32>
c0008c6a:	83 ec 0c             	sub    esp,0xc
c0008c6d:	53                   	push   ebx
c0008c6e:	e8 80 57 00 00       	call   c000e3f3 <zoh_get_name>
c0008c73:	83 c4 10             	add    esp,0x10
c0008c76:	85 c0                	test   eax,eax
c0008c78:	75 0d                	jne    c0008c87 <src_get_name+0x32>
c0008c7a:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008c7e:	83 c4 08             	add    esp,0x8
c0008c81:	5b                   	pop    ebx
c0008c82:	e9 74 0b 00 00       	jmp    c00097fb <linear_get_name>
c0008c87:	83 c4 08             	add    esp,0x8
c0008c8a:	5b                   	pop    ebx
c0008c8b:	c3                   	ret    

c0008c8c <src_get_description>:
c0008c8c:	53                   	push   ebx
c0008c8d:	83 ec 14             	sub    esp,0x14
c0008c90:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008c94:	53                   	push   ebx
c0008c95:	e8 ac 4f 00 00       	call   c000dc46 <sinc_get_description>
c0008c9a:	83 c4 10             	add    esp,0x10
c0008c9d:	85 c0                	test   eax,eax
c0008c9f:	75 1d                	jne    c0008cbe <src_get_description+0x32>
c0008ca1:	83 ec 0c             	sub    esp,0xc
c0008ca4:	53                   	push   ebx
c0008ca5:	e8 58 57 00 00       	call   c000e402 <zoh_get_description>
c0008caa:	83 c4 10             	add    esp,0x10
c0008cad:	85 c0                	test   eax,eax
c0008caf:	75 0d                	jne    c0008cbe <src_get_description+0x32>
c0008cb1:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008cb5:	83 c4 08             	add    esp,0x8
c0008cb8:	5b                   	pop    ebx
c0008cb9:	e9 4c 0b 00 00       	jmp    c000980a <linear_get_description>
c0008cbe:	83 c4 08             	add    esp,0x8
c0008cc1:	5b                   	pop    ebx
c0008cc2:	c3                   	ret    

c0008cc3 <src_get_version>:
c0008cc3:	b8 e0 96 02 c0       	mov    eax,0xc00296e0
c0008cc8:	c3                   	ret    

c0008cc9 <src_is_valid_ratio>:
c0008cc9:	83 ec 1c             	sub    esp,0x1c
c0008ccc:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008cd0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008cd4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008cd8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008cdc:	68 00 00 70 3f       	push   0x3f700000
c0008ce1:	6a 00                	push   0x0
c0008ce3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ce7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ceb:	e8 f7 f4 01 00       	call   c00281e7 <__ltdf2>
c0008cf0:	83 c4 10             	add    esp,0x10
c0008cf3:	31 d2                	xor    edx,edx
c0008cf5:	85 c0                	test   eax,eax
c0008cf7:	78 1e                	js     c0008d17 <src_is_valid_ratio+0x4e>
c0008cf9:	68 00 00 70 40       	push   0x40700000
c0008cfe:	6a 00                	push   0x0
c0008d00:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d04:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d08:	e8 bc f4 01 00       	call   c00281c9 <__gtdf2>
c0008d0d:	31 d2                	xor    edx,edx
c0008d0f:	83 c4 10             	add    esp,0x10
c0008d12:	85 c0                	test   eax,eax
c0008d14:	0f 9e c2             	setle  dl
c0008d17:	89 d0                	mov    eax,edx
c0008d19:	83 c4 1c             	add    esp,0x1c
c0008d1c:	c3                   	ret    

c0008d1d <src_error>:
c0008d1d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008d21:	31 c0                	xor    eax,eax
c0008d23:	85 d2                	test   edx,edx
c0008d25:	74 03                	je     c0008d2a <src_error+0xd>
c0008d27:	8b 42 10             	mov    eax,DWORD PTR [edx+0x10]
c0008d2a:	c3                   	ret    

c0008d2b <src_strerror>:
c0008d2b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008d2f:	31 c0                	xor    eax,eax
c0008d31:	83 fa 17             	cmp    edx,0x17
c0008d34:	77 07                	ja     c0008d3d <src_strerror+0x12>
c0008d36:	8b 04 95 40 9b 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd64c0]
c0008d3d:	c3                   	ret    

c0008d3e <src_simple>:
c0008d3e:	56                   	push   esi
c0008d3f:	53                   	push   ebx
c0008d40:	83 ec 18             	sub    esp,0x18
c0008d43:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008d47:	8d 44 24 10          	lea    eax,[esp+0x10]
c0008d4b:	50                   	push   eax
c0008d4c:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008d50:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008d54:	e8 0c fe ff ff       	call   c0008b65 <src_new>
c0008d59:	83 c4 10             	add    esp,0x10
c0008d5c:	85 c0                	test   eax,eax
c0008d5e:	75 06                	jne    c0008d66 <src_simple+0x28>
c0008d60:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008d64:	eb 25                	jmp    c0008d8b <src_simple+0x4d>
c0008d66:	c7 46 18 01 00 00 00 	mov    DWORD PTR [esi+0x18],0x1
c0008d6d:	89 c3                	mov    ebx,eax
c0008d6f:	50                   	push   eax
c0008d70:	50                   	push   eax
c0008d71:	56                   	push   esi
c0008d72:	53                   	push   ebx
c0008d73:	e8 e2 f9 ff ff       	call   c000875a <src_process>
c0008d78:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008d7b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008d7f:	e8 9a f9 ff ff       	call   c000871e <src_delete>
c0008d84:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008d88:	83 c4 10             	add    esp,0x10
c0008d8b:	83 c4 14             	add    esp,0x14
c0008d8e:	5b                   	pop    ebx
c0008d8f:	5e                   	pop    esi
c0008d90:	c3                   	ret    

c0008d91 <src_short_to_float_array>:
c0008d91:	53                   	push   ebx
c0008d92:	83 ec 18             	sub    esp,0x18
c0008d95:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008d99:	85 db                	test   ebx,ebx
c0008d9b:	74 54                	je     c0008df1 <src_short_to_float_array+0x60>
c0008d9d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008da1:	4b                   	dec    ebx
c0008da2:	83 ec 0c             	sub    esp,0xc
c0008da5:	0f bf 04 58          	movsx  eax,WORD PTR [eax+ebx*2]
c0008da9:	50                   	push   eax
c0008daa:	e8 cc f1 01 00       	call   c0027f7b <__floatsidf>
c0008daf:	83 c4 10             	add    esp,0x10
c0008db2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008db6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008dba:	68 00 00 00 3f       	push   0x3f000000
c0008dbf:	6a 00                	push   0x0
c0008dc1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008dc5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008dc9:	e8 4a eb 01 00       	call   c0027918 <__muldf3>
c0008dce:	59                   	pop    ecx
c0008dcf:	59                   	pop    ecx
c0008dd0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008dd4:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008dd8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ddc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008de0:	e8 06 f4 01 00       	call   c00281eb <__truncdfsf2>
c0008de5:	83 c4 10             	add    esp,0x10
c0008de8:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008dec:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0008def:	eb a8                	jmp    c0008d99 <src_short_to_float_array+0x8>
c0008df1:	83 c4 18             	add    esp,0x18
c0008df4:	5b                   	pop    ebx
c0008df5:	c3                   	ret    

c0008df6 <src_float_to_short_array>:
c0008df6:	56                   	push   esi
c0008df7:	53                   	push   ebx
c0008df8:	83 ec 14             	sub    esp,0x14
c0008dfb:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008dff:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008e03:	85 db                	test   ebx,ebx
c0008e05:	0f 84 a4 00 00 00    	je     c0008eaf <src_float_to_short_array+0xb9>
c0008e0b:	83 ec 0c             	sub    esp,0xc
c0008e0e:	4b                   	dec    ebx
c0008e0f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008e13:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008e16:	e8 f4 f4 01 00       	call   c002830f <__extendsfdf2>
c0008e1b:	83 c4 10             	add    esp,0x10
c0008e1e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008e22:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008e26:	68 00 00 e0 41       	push   0x41e00000
c0008e2b:	6a 00                	push   0x0
c0008e2d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e31:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e35:	e8 de ea 01 00       	call   c0027918 <__muldf3>
c0008e3a:	83 c4 10             	add    esp,0x10
c0008e3d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008e41:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008e45:	68 ff ff df 41       	push   0x41dfffff
c0008e4a:	68 00 00 c0 ff       	push   0xffc00000
c0008e4f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e53:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e57:	e8 89 f3 01 00       	call   c00281e5 <__gedf2>
c0008e5c:	83 c4 10             	add    esp,0x10
c0008e5f:	85 c0                	test   eax,eax
c0008e61:	78 08                	js     c0008e6b <src_float_to_short_array+0x75>
c0008e63:	66 c7 04 5e ff 7f    	mov    WORD PTR [esi+ebx*2],0x7fff
c0008e69:	eb 98                	jmp    c0008e03 <src_float_to_short_array+0xd>
c0008e6b:	68 00 00 e0 c1       	push   0xc1e00000
c0008e70:	6a 00                	push   0x0
c0008e72:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e76:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e7a:	e8 6a f3 01 00       	call   c00281e9 <__ledf2>
c0008e7f:	83 c4 10             	add    esp,0x10
c0008e82:	85 c0                	test   eax,eax
c0008e84:	7f 0b                	jg     c0008e91 <src_float_to_short_array+0x9b>
c0008e86:	66 c7 04 5e 00 80    	mov    WORD PTR [esi+ebx*2],0x8000
c0008e8c:	e9 72 ff ff ff       	jmp    c0008e03 <src_float_to_short_array+0xd>
c0008e91:	50                   	push   eax
c0008e92:	50                   	push   eax
c0008e93:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e97:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e9b:	e8 00 f5 01 00       	call   c00283a0 <lrint>
c0008ea0:	83 c4 10             	add    esp,0x10
c0008ea3:	c1 f8 10             	sar    eax,0x10
c0008ea6:	66 89 04 5e          	mov    WORD PTR [esi+ebx*2],ax
c0008eaa:	e9 54 ff ff ff       	jmp    c0008e03 <src_float_to_short_array+0xd>
c0008eaf:	83 c4 14             	add    esp,0x14
c0008eb2:	5b                   	pop    ebx
c0008eb3:	5e                   	pop    esi
c0008eb4:	c3                   	ret    

c0008eb5 <src_int_to_float_array>:
c0008eb5:	53                   	push   ebx
c0008eb6:	83 ec 18             	sub    esp,0x18
c0008eb9:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008ebd:	85 db                	test   ebx,ebx
c0008ebf:	74 52                	je     c0008f13 <src_int_to_float_array+0x5e>
c0008ec1:	83 ec 0c             	sub    esp,0xc
c0008ec4:	4b                   	dec    ebx
c0008ec5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008ec9:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008ecc:	e8 aa f0 01 00       	call   c0027f7b <__floatsidf>
c0008ed1:	83 c4 10             	add    esp,0x10
c0008ed4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008ed8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008edc:	68 00 00 00 3e       	push   0x3e000000
c0008ee1:	6a 00                	push   0x0
c0008ee3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ee7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008eeb:	e8 28 ea 01 00       	call   c0027918 <__muldf3>
c0008ef0:	59                   	pop    ecx
c0008ef1:	59                   	pop    ecx
c0008ef2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008ef6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008efa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008efe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f02:	e8 e4 f2 01 00       	call   c00281eb <__truncdfsf2>
c0008f07:	83 c4 10             	add    esp,0x10
c0008f0a:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008f0e:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0008f11:	eb aa                	jmp    c0008ebd <src_int_to_float_array+0x8>
c0008f13:	83 c4 18             	add    esp,0x18
c0008f16:	5b                   	pop    ebx
c0008f17:	c3                   	ret    

c0008f18 <src_float_to_int_array>:
c0008f18:	56                   	push   esi
c0008f19:	53                   	push   ebx
c0008f1a:	83 ec 14             	sub    esp,0x14
c0008f1d:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008f21:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008f25:	85 db                	test   ebx,ebx
c0008f27:	0f 84 a2 00 00 00    	je     c0008fcf <src_float_to_int_array+0xb7>
c0008f2d:	83 ec 0c             	sub    esp,0xc
c0008f30:	4b                   	dec    ebx
c0008f31:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008f35:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008f38:	e8 d2 f3 01 00       	call   c002830f <__extendsfdf2>
c0008f3d:	83 c4 10             	add    esp,0x10
c0008f40:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008f44:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008f48:	68 00 00 e0 41       	push   0x41e00000
c0008f4d:	6a 00                	push   0x0
c0008f4f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f53:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f57:	e8 bc e9 01 00       	call   c0027918 <__muldf3>
c0008f5c:	83 c4 10             	add    esp,0x10
c0008f5f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008f63:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008f67:	68 ff ff df 41       	push   0x41dfffff
c0008f6c:	68 00 00 c0 ff       	push   0xffc00000
c0008f71:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f75:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f79:	e8 67 f2 01 00       	call   c00281e5 <__gedf2>
c0008f7e:	83 c4 10             	add    esp,0x10
c0008f81:	85 c0                	test   eax,eax
c0008f83:	78 09                	js     c0008f8e <src_float_to_int_array+0x76>
c0008f85:	c7 04 9e ff ff ff 7f 	mov    DWORD PTR [esi+ebx*4],0x7fffffff
c0008f8c:	eb 97                	jmp    c0008f25 <src_float_to_int_array+0xd>
c0008f8e:	68 00 00 e0 c1       	push   0xc1e00000
c0008f93:	6a 00                	push   0x0
c0008f95:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f99:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f9d:	e8 47 f2 01 00       	call   c00281e9 <__ledf2>
c0008fa2:	83 c4 10             	add    esp,0x10
c0008fa5:	85 c0                	test   eax,eax
c0008fa7:	7f 0c                	jg     c0008fb5 <src_float_to_int_array+0x9d>
c0008fa9:	c7 04 9e 00 00 00 80 	mov    DWORD PTR [esi+ebx*4],0x80000000
c0008fb0:	e9 70 ff ff ff       	jmp    c0008f25 <src_float_to_int_array+0xd>
c0008fb5:	50                   	push   eax
c0008fb6:	50                   	push   eax
c0008fb7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fbb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fbf:	e8 dc f3 01 00       	call   c00283a0 <lrint>
c0008fc4:	83 c4 10             	add    esp,0x10
c0008fc7:	89 04 9e             	mov    DWORD PTR [esi+ebx*4],eax
c0008fca:	e9 56 ff ff ff       	jmp    c0008f25 <src_float_to_int_array+0xd>
c0008fcf:	83 c4 14             	add    esp,0x14
c0008fd2:	5b                   	pop    ebx
c0008fd3:	5e                   	pop    esi
c0008fd4:	c3                   	ret    

c0008fd5 <linear_vari_process>:
c0008fd5:	55                   	push   ebp
c0008fd6:	31 d2                	xor    edx,edx
c0008fd8:	57                   	push   edi
c0008fd9:	56                   	push   esi
c0008fda:	53                   	push   ebx
c0008fdb:	83 ec 3c             	sub    esp,0x3c
c0008fde:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0008fe2:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c0008fe6:	0f 8e d3 07 00 00    	jle    c00097bf <linear_vari_process+0x7ea>
c0008fec:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0008ff0:	ba 05 00 00 00       	mov    edx,0x5
c0008ff5:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c0008ff8:	85 db                	test   ebx,ebx
c0008ffa:	0f 84 bf 07 00 00    	je     c00097bf <linear_vari_process+0x7ea>
c0009000:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0009003:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0009007:	74 19                	je     c0009022 <linear_vari_process+0x4d>
c0009009:	31 d2                	xor    edx,edx
c000900b:	39 c2                	cmp    edx,eax
c000900d:	7d 0c                	jge    c000901b <linear_vari_process+0x46>
c000900f:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0009011:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c0009014:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c0009018:	42                   	inc    edx
c0009019:	eb f0                	jmp    c000900b <linear_vari_process+0x36>
c000901b:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0009022:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c0009025:	0f af d0             	imul   edx,eax
c0009028:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000902b:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c000902f:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0009036:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0009039:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0009040:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0009044:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0009047:	8b 00                	mov    eax,DWORD PTR [eax]
c0009049:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000904d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009051:	68 00 00 70 3f       	push   0x3f700000
c0009056:	6a 00                	push   0x0
c0009058:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000905c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009060:	e8 82 f1 01 00       	call   c00281e7 <__ltdf2>
c0009065:	83 c4 10             	add    esp,0x10
c0009068:	ba 16 00 00 00       	mov    edx,0x16
c000906d:	85 c0                	test   eax,eax
c000906f:	0f 88 4a 07 00 00    	js     c00097bf <linear_vari_process+0x7ea>
c0009075:	68 00 00 70 40       	push   0x40700000
c000907a:	6a 00                	push   0x0
c000907c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009080:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009084:	e8 40 f1 01 00       	call   c00281c9 <__gtdf2>
c0009089:	83 c4 10             	add    esp,0x10
c000908c:	ba 16 00 00 00       	mov    edx,0x16
c0009091:	85 c0                	test   eax,eax
c0009093:	0f 8f 26 07 00 00    	jg     c00097bf <linear_vari_process+0x7ea>
c0009099:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000909d:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00090a0:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00090a3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00090a7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00090ab:	68 00 00 f0 3f       	push   0x3ff00000
c00090b0:	6a 00                	push   0x0
c00090b2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090b6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090ba:	e8 28 f1 01 00       	call   c00281e7 <__ltdf2>
c00090bf:	83 c4 10             	add    esp,0x10
c00090c2:	85 c0                	test   eax,eax
c00090c4:	0f 89 89 02 00 00    	jns    c0009353 <linear_vari_process+0x37e>
c00090ca:	8b 7b 14             	mov    edi,DWORD PTR [ebx+0x14]
c00090cd:	39 7b 18             	cmp    DWORD PTR [ebx+0x18],edi
c00090d0:	0f 8d 7d 02 00 00    	jge    c0009353 <linear_vari_process+0x37e>
c00090d6:	83 ec 0c             	sub    esp,0xc
c00090d9:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00090dc:	e8 9a ee 01 00       	call   c0027f7b <__floatsidf>
c00090e1:	83 c4 10             	add    esp,0x10
c00090e4:	89 04 24             	mov    DWORD PTR [esp],eax
c00090e7:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00090eb:	68 00 00 f0 3f       	push   0x3ff00000
c00090f0:	6a 00                	push   0x0
c00090f2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090f6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090fa:	e8 9c e1 01 00       	call   c002729b <__adddf3>
c00090ff:	83 c4 10             	add    esp,0x10
c0009102:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009106:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000910a:	52                   	push   edx
c000910b:	50                   	push   eax
c000910c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009110:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009114:	e8 ff e7 01 00       	call   c0027918 <__muldf3>
c0009119:	5d                   	pop    ebp
c000911a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000911e:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0009122:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c0009125:	e8 51 ee 01 00       	call   c0027f7b <__floatsidf>
c000912a:	83 c4 10             	add    esp,0x10
c000912d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009131:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009135:	52                   	push   edx
c0009136:	50                   	push   eax
c0009137:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000913b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000913f:	e8 57 e1 01 00       	call   c002729b <__adddf3>
c0009144:	59                   	pop    ecx
c0009145:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009149:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000914d:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c0009150:	e8 26 ee 01 00       	call   c0027f7b <__floatsidf>
c0009155:	83 c4 10             	add    esp,0x10
c0009158:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000915c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009160:	52                   	push   edx
c0009161:	50                   	push   eax
c0009162:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009166:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000916a:	e8 76 f0 01 00       	call   c00281e5 <__gedf2>
c000916f:	83 c4 10             	add    esp,0x10
c0009172:	85 c0                	test   eax,eax
c0009174:	0f 89 d9 01 00 00    	jns    c0009353 <linear_vari_process+0x37e>
c000917a:	85 ff                	test   edi,edi
c000917c:	0f 8e f4 00 00 00    	jle    c0009276 <linear_vari_process+0x2a1>
c0009182:	83 ec 10             	sub    esp,0x10
c0009185:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0009188:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000918b:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c000918f:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0009192:	ff 30                	push   DWORD PTR [eax]
c0009194:	e8 53 e7 01 00       	call   c00278ec <__subdf3>
c0009199:	83 c4 18             	add    esp,0x18
c000919c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00091a0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00091a4:	52                   	push   edx
c00091a5:	50                   	push   eax
c00091a6:	e8 d5 f1 01 00       	call   c0028380 <fabs>
c00091ab:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00091af:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00091b3:	83 c4 10             	add    esp,0x10
c00091b6:	68 a1 9c c7 3b       	push   0x3bc79ca1
c00091bb:	68 23 42 92 0c       	push   0xc924223
c00091c0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00091c4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00091c8:	e8 fc ef 01 00       	call   c00281c9 <__gtdf2>
c00091cd:	83 c4 10             	add    esp,0x10
c00091d0:	85 c0                	test   eax,eax
c00091d2:	0f 8e 9e 00 00 00    	jle    c0009276 <linear_vari_process+0x2a1>
c00091d8:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00091dc:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00091df:	8b 00                	mov    eax,DWORD PTR [eax]
c00091e1:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00091e5:	89 04 24             	mov    DWORD PTR [esp],eax
c00091e8:	52                   	push   edx
c00091e9:	50                   	push   eax
c00091ea:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00091ed:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c00091f0:	e8 f7 e6 01 00       	call   c00278ec <__subdf3>
c00091f5:	59                   	pop    ecx
c00091f6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00091fa:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c00091fe:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0009201:	e8 75 ed 01 00       	call   c0027f7b <__floatsidf>
c0009206:	83 c4 10             	add    esp,0x10
c0009209:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000920d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009211:	52                   	push   edx
c0009212:	50                   	push   eax
c0009213:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009217:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000921b:	e8 f8 e6 01 00       	call   c0027918 <__muldf3>
c0009220:	5f                   	pop    edi
c0009221:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009225:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009229:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000922c:	e8 4a ed 01 00       	call   c0027f7b <__floatsidf>
c0009231:	83 c4 10             	add    esp,0x10
c0009234:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009238:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000923c:	52                   	push   edx
c000923d:	50                   	push   eax
c000923e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009242:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009246:	e8 b1 e9 01 00       	call   c0027bfc <__divdf3>
c000924b:	83 c4 10             	add    esp,0x10
c000924e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009252:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009256:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000925a:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000925e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009262:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009266:	e8 30 e0 01 00       	call   c002729b <__adddf3>
c000926b:	83 c4 10             	add    esp,0x10
c000926e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009272:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009276:	31 ff                	xor    edi,edi
c0009278:	39 7b 04             	cmp    DWORD PTR [ebx+0x4],edi
c000927b:	0f 8e 9d 00 00 00    	jle    c000931e <linear_vari_process+0x349>
c0009281:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0009284:	8b 6c bb 1c          	mov    ebp,DWORD PTR [ebx+edi*4+0x1c]
c0009288:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000928b:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c000928f:	89 04 24             	mov    DWORD PTR [esp],eax
c0009292:	8b 06                	mov    eax,DWORD PTR [esi]
c0009294:	52                   	push   edx
c0009295:	52                   	push   edx
c0009296:	55                   	push   ebp
c0009297:	ff 34 b8             	push   DWORD PTR [eax+edi*4]
c000929a:	47                   	inc    edi
c000929b:	e8 90 d9 01 00       	call   c0026c30 <__subsf3>
c00092a0:	89 04 24             	mov    DWORD PTR [esp],eax
c00092a3:	e8 67 f0 01 00       	call   c002830f <__extendsfdf2>
c00092a8:	83 c4 10             	add    esp,0x10
c00092ab:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00092af:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00092b3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00092b7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00092bb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092bf:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092c3:	e8 50 e6 01 00       	call   c0027918 <__muldf3>
c00092c8:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00092cb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00092cf:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00092d3:	e8 37 f0 01 00       	call   c002830f <__extendsfdf2>
c00092d8:	83 c4 10             	add    esp,0x10
c00092db:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00092df:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00092e3:	52                   	push   edx
c00092e4:	50                   	push   eax
c00092e5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092e9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092ed:	e8 a9 df 01 00       	call   c002729b <__adddf3>
c00092f2:	59                   	pop    ecx
c00092f3:	5d                   	pop    ebp
c00092f4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00092f8:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00092fc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009300:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009304:	e8 e2 ee 01 00       	call   c00281eb <__truncdfsf2>
c0009309:	83 c4 10             	add    esp,0x10
c000930c:	8b 14 24             	mov    edx,DWORD PTR [esp]
c000930f:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0009313:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c0009316:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c0009319:	e9 5a ff ff ff       	jmp    c0009278 <linear_vari_process+0x2a3>
c000931e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009322:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009326:	68 00 00 f0 3f       	push   0x3ff00000
c000932b:	6a 00                	push   0x0
c000932d:	e8 ca e8 01 00       	call   c0027bfc <__divdf3>
c0009332:	83 c4 10             	add    esp,0x10
c0009335:	89 04 24             	mov    DWORD PTR [esp],eax
c0009338:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000933c:	52                   	push   edx
c000933d:	50                   	push   eax
c000933e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009342:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009346:	e8 50 df 01 00       	call   c002729b <__adddf3>
c000934b:	83 c4 10             	add    esp,0x10
c000934e:	e9 50 fd ff ff       	jmp    c00090a3 <linear_vari_process+0xce>
c0009353:	50                   	push   eax
c0009354:	50                   	push   eax
c0009355:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009359:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000935d:	e8 3e f0 01 00       	call   c00283a0 <lrint>
c0009362:	83 ec 0c             	sub    esp,0xc
c0009365:	50                   	push   eax
c0009366:	e8 10 ec 01 00       	call   c0027f7b <__floatsidf>
c000936b:	83 c4 10             	add    esp,0x10
c000936e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009372:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009376:	52                   	push   edx
c0009377:	50                   	push   eax
c0009378:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000937c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009380:	e8 67 e5 01 00       	call   c00278ec <__subdf3>
c0009385:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009389:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000938d:	83 c4 20             	add    esp,0x20
c0009390:	6a 00                	push   0x0
c0009392:	6a 00                	push   0x0
c0009394:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009398:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000939c:	e8 46 ee 01 00       	call   c00281e7 <__ltdf2>
c00093a1:	83 c4 10             	add    esp,0x10
c00093a4:	85 c0                	test   eax,eax
c00093a6:	79 1e                	jns    c00093c6 <linear_vari_process+0x3f1>
c00093a8:	68 00 00 f0 3f       	push   0x3ff00000
c00093ad:	6a 00                	push   0x0
c00093af:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093b3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093b7:	e8 df de 01 00       	call   c002729b <__adddf3>
c00093bc:	83 c4 10             	add    esp,0x10
c00093bf:	89 04 24             	mov    DWORD PTR [esp],eax
c00093c2:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00093c6:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00093c9:	83 ec 10             	sub    esp,0x10
c00093cc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00093d0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00093d4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00093d8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00093dc:	e8 0b e5 01 00       	call   c00278ec <__subdf3>
c00093e1:	83 c4 18             	add    esp,0x18
c00093e4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00093e8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00093ec:	52                   	push   edx
c00093ed:	50                   	push   eax
c00093ee:	e8 ad ef 01 00       	call   c00283a0 <lrint>
c00093f3:	83 c4 10             	add    esp,0x10
c00093f6:	0f af f8             	imul   edi,eax
c00093f9:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c00093fc:	01 7b 10             	add    DWORD PTR [ebx+0x10],edi
c00093ff:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0009402:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0009405:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c0009408:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c000940c:	0f 8d 13 03 00 00    	jge    c0009725 <linear_vari_process+0x750>
c0009412:	83 ec 0c             	sub    esp,0xc
c0009415:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009418:	e8 5e eb 01 00       	call   c0027f7b <__floatsidf>
c000941d:	83 c4 10             	add    esp,0x10
c0009420:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009424:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009428:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000942c:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009430:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009434:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009438:	e8 db e4 01 00       	call   c0027918 <__muldf3>
c000943d:	89 3c 24             	mov    DWORD PTR [esp],edi
c0009440:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009444:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009448:	e8 2e eb 01 00       	call   c0027f7b <__floatsidf>
c000944d:	83 c4 10             	add    esp,0x10
c0009450:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009454:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009458:	52                   	push   edx
c0009459:	50                   	push   eax
c000945a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000945e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009462:	e8 34 de 01 00       	call   c002729b <__adddf3>
c0009467:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000946a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000946e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009472:	e8 04 eb 01 00       	call   c0027f7b <__floatsidf>
c0009477:	83 c4 10             	add    esp,0x10
c000947a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000947e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009482:	52                   	push   edx
c0009483:	50                   	push   eax
c0009484:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009488:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000948c:	e8 56 ed 01 00       	call   c00281e7 <__ltdf2>
c0009491:	83 c4 10             	add    esp,0x10
c0009494:	85 c0                	test   eax,eax
c0009496:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000949a:	0f 89 85 02 00 00    	jns    c0009725 <linear_vari_process+0x750>
c00094a0:	85 c9                	test   ecx,ecx
c00094a2:	0f 8e f5 00 00 00    	jle    c000959d <linear_vari_process+0x5c8>
c00094a8:	83 ec 10             	sub    esp,0x10
c00094ab:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00094ae:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c00094b1:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00094b5:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00094b8:	ff 30                	push   DWORD PTR [eax]
c00094ba:	e8 2d e4 01 00       	call   c00278ec <__subdf3>
c00094bf:	83 c4 18             	add    esp,0x18
c00094c2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00094c6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00094ca:	52                   	push   edx
c00094cb:	50                   	push   eax
c00094cc:	e8 af ee 01 00       	call   c0028380 <fabs>
c00094d1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00094d5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00094d9:	83 c4 10             	add    esp,0x10
c00094dc:	68 a1 9c c7 3b       	push   0x3bc79ca1
c00094e1:	68 23 42 92 0c       	push   0xc924223
c00094e6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094ea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094ee:	e8 d6 ec 01 00       	call   c00281c9 <__gtdf2>
c00094f3:	83 c4 10             	add    esp,0x10
c00094f6:	85 c0                	test   eax,eax
c00094f8:	0f 8e 9f 00 00 00    	jle    c000959d <linear_vari_process+0x5c8>
c00094fe:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0009502:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0009505:	8b 00                	mov    eax,DWORD PTR [eax]
c0009507:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000950b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000950f:	52                   	push   edx
c0009510:	50                   	push   eax
c0009511:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0009514:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c0009517:	e8 d0 e3 01 00       	call   c00278ec <__subdf3>
c000951c:	5f                   	pop    edi
c000951d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009521:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009525:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0009528:	e8 4e ea 01 00       	call   c0027f7b <__floatsidf>
c000952d:	83 c4 10             	add    esp,0x10
c0009530:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009534:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009538:	52                   	push   edx
c0009539:	50                   	push   eax
c000953a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000953e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009542:	e8 d1 e3 01 00       	call   c0027918 <__muldf3>
c0009547:	5d                   	pop    ebp
c0009548:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000954c:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009550:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0009553:	e8 23 ea 01 00       	call   c0027f7b <__floatsidf>
c0009558:	83 c4 10             	add    esp,0x10
c000955b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000955f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009563:	52                   	push   edx
c0009564:	50                   	push   eax
c0009565:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009569:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000956d:	e8 8a e6 01 00       	call   c0027bfc <__divdf3>
c0009572:	83 c4 10             	add    esp,0x10
c0009575:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009579:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000957d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009581:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009585:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009589:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000958d:	e8 09 dd 01 00       	call   c002729b <__adddf3>
c0009592:	83 c4 10             	add    esp,0x10
c0009595:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009599:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000959d:	31 ff                	xor    edi,edi
c000959f:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c00095a2:	39 f8                	cmp    eax,edi
c00095a4:	0f 8e ac 00 00 00    	jle    c0009656 <linear_vari_process+0x681>
c00095aa:	8b 16                	mov    edx,DWORD PTR [esi]
c00095ac:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00095af:	29 c1                	sub    ecx,eax
c00095b1:	89 c8                	mov    eax,ecx
c00095b3:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c00095b6:	01 f8                	add    eax,edi
c00095b8:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c00095bc:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c00095bf:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00095c2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00095c6:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00095c9:	51                   	push   ecx
c00095ca:	01 f8                	add    eax,edi
c00095cc:	51                   	push   ecx
c00095cd:	47                   	inc    edi
c00095ce:	55                   	push   ebp
c00095cf:	ff 34 82             	push   DWORD PTR [edx+eax*4]
c00095d2:	e8 59 d6 01 00       	call   c0026c30 <__subsf3>
c00095d7:	89 04 24             	mov    DWORD PTR [esp],eax
c00095da:	e8 30 ed 01 00       	call   c002830f <__extendsfdf2>
c00095df:	83 c4 10             	add    esp,0x10
c00095e2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00095e6:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00095ea:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00095ee:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00095f2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00095f6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00095fa:	e8 19 e3 01 00       	call   c0027918 <__muldf3>
c00095ff:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009602:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009606:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000960a:	e8 00 ed 01 00       	call   c002830f <__extendsfdf2>
c000960f:	83 c4 10             	add    esp,0x10
c0009612:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009616:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000961a:	52                   	push   edx
c000961b:	50                   	push   eax
c000961c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009620:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009624:	e8 72 dc 01 00       	call   c002729b <__adddf3>
c0009629:	5d                   	pop    ebp
c000962a:	59                   	pop    ecx
c000962b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000962f:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009633:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009637:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000963b:	e8 ab eb 01 00       	call   c00281eb <__truncdfsf2>
c0009640:	83 c4 10             	add    esp,0x10
c0009643:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009647:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000964b:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c000964e:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c0009651:	e9 49 ff ff ff       	jmp    c000959f <linear_vari_process+0x5ca>
c0009656:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000965a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000965e:	68 00 00 f0 3f       	push   0x3ff00000
c0009663:	6a 00                	push   0x0
c0009665:	e8 92 e5 01 00       	call   c0027bfc <__divdf3>
c000966a:	83 c4 10             	add    esp,0x10
c000966d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009671:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009675:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009679:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000967d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009681:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009685:	e8 11 dc 01 00       	call   c002729b <__adddf3>
c000968a:	59                   	pop    ecx
c000968b:	5f                   	pop    edi
c000968c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009690:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009694:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009698:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000969c:	e8 ff ec 01 00       	call   c00283a0 <lrint>
c00096a1:	83 ec 0c             	sub    esp,0xc
c00096a4:	50                   	push   eax
c00096a5:	e8 d1 e8 01 00       	call   c0027f7b <__floatsidf>
c00096aa:	83 c4 10             	add    esp,0x10
c00096ad:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00096b1:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00096b5:	52                   	push   edx
c00096b6:	50                   	push   eax
c00096b7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00096bb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00096bf:	e8 28 e2 01 00       	call   c00278ec <__subdf3>
c00096c4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00096c8:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00096cc:	83 c4 20             	add    esp,0x20
c00096cf:	6a 00                	push   0x0
c00096d1:	6a 00                	push   0x0
c00096d3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00096d7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00096db:	e8 07 eb 01 00       	call   c00281e7 <__ltdf2>
c00096e0:	83 c4 10             	add    esp,0x10
c00096e3:	85 c0                	test   eax,eax
c00096e5:	79 1e                	jns    c0009705 <linear_vari_process+0x730>
c00096e7:	68 00 00 f0 3f       	push   0x3ff00000
c00096ec:	6a 00                	push   0x0
c00096ee:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00096f2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00096f6:	e8 a0 db 01 00       	call   c002729b <__adddf3>
c00096fb:	83 c4 10             	add    esp,0x10
c00096fe:	89 04 24             	mov    DWORD PTR [esp],eax
c0009701:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009705:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0009708:	83 ec 10             	sub    esp,0x10
c000970b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000970f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009713:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009717:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000971b:	e8 cc e1 01 00       	call   c00278ec <__subdf3>
c0009720:	e9 bc fc ff ff       	jmp    c00093e1 <linear_vari_process+0x40c>
c0009725:	39 fd                	cmp    ebp,edi
c0009727:	7d 38                	jge    c0009761 <linear_vari_process+0x78c>
c0009729:	83 ec 0c             	sub    esp,0xc
c000972c:	89 f8                	mov    eax,edi
c000972e:	29 e8                	sub    eax,ebp
c0009730:	99                   	cdq    
c0009731:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0009734:	50                   	push   eax
c0009735:	e8 41 e8 01 00       	call   c0027f7b <__floatsidf>
c000973a:	83 c4 10             	add    esp,0x10
c000973d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009741:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009745:	52                   	push   edx
c0009746:	50                   	push   eax
c0009747:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000974b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000974f:	e8 47 db 01 00       	call   c002729b <__adddf3>
c0009754:	83 c4 10             	add    esp,0x10
c0009757:	89 6b 10             	mov    DWORD PTR [ebx+0x10],ebp
c000975a:	89 04 24             	mov    DWORD PTR [esp],eax
c000975d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009761:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0009765:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0009768:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000976c:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c000976f:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0009772:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0009775:	85 c0                	test   eax,eax
c0009777:	7f 29                	jg     c00097a2 <linear_vari_process+0x7cd>
c0009779:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c000977d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009781:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0009785:	89 01                	mov    DWORD PTR [ecx],eax
c0009787:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000978a:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000978d:	99                   	cdq    
c000978e:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0009791:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c0009794:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0009797:	99                   	cdq    
c0009798:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000979b:	31 d2                	xor    edx,edx
c000979d:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c00097a0:	eb 1d                	jmp    c00097bf <linear_vari_process+0x7ea>
c00097a2:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c00097a5:	31 d2                	xor    edx,edx
c00097a7:	29 c8                	sub    eax,ecx
c00097a9:	c1 e0 02             	shl    eax,0x2
c00097ac:	39 d1                	cmp    ecx,edx
c00097ae:	7e c9                	jle    c0009779 <linear_vari_process+0x7a4>
c00097b0:	8b 3e                	mov    edi,DWORD PTR [esi]
c00097b2:	8b 3c 07             	mov    edi,DWORD PTR [edi+eax*1]
c00097b5:	83 c0 04             	add    eax,0x4
c00097b8:	89 7c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],edi
c00097bc:	42                   	inc    edx
c00097bd:	eb ed                	jmp    c00097ac <linear_vari_process+0x7d7>
c00097bf:	83 c4 3c             	add    esp,0x3c
c00097c2:	89 d0                	mov    eax,edx
c00097c4:	5b                   	pop    ebx
c00097c5:	5e                   	pop    esi
c00097c6:	5f                   	pop    edi
c00097c7:	5d                   	pop    ebp
c00097c8:	c3                   	ret    

c00097c9 <linear_reset>:
c00097c9:	83 ec 0c             	sub    esp,0xc
c00097cc:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00097d0:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c00097d3:	85 c0                	test   eax,eax
c00097d5:	74 20                	je     c00097f7 <linear_reset+0x2e>
c00097d7:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c00097da:	83 c0 1c             	add    eax,0x1c
c00097dd:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c00097e0:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c00097e7:	c1 e2 02             	shl    edx,0x2
c00097ea:	51                   	push   ecx
c00097eb:	52                   	push   edx
c00097ec:	6a 00                	push   0x0
c00097ee:	50                   	push   eax
c00097ef:	e8 5c 6f ff ff       	call   c0000750 <memset>
c00097f4:	83 c4 10             	add    esp,0x10
c00097f7:	83 c4 0c             	add    esp,0xc
c00097fa:	c3                   	ret    

c00097fb <linear_get_name>:
c00097fb:	31 c0                	xor    eax,eax
c00097fd:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c0009802:	75 05                	jne    c0009809 <linear_get_name+0xe>
c0009804:	b8 a0 9b 02 c0       	mov    eax,0xc0029ba0
c0009809:	c3                   	ret    

c000980a <linear_get_description>:
c000980a:	31 c0                	xor    eax,eax
c000980c:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c0009811:	75 05                	jne    c0009818 <linear_get_description+0xe>
c0009813:	b8 b4 9b 02 c0       	mov    eax,0xc0029bb4
c0009818:	c3                   	ret    

c0009819 <linear_set_converter>:
c0009819:	53                   	push   ebx
c000981a:	b8 0a 00 00 00       	mov    eax,0xa
c000981f:	83 ec 08             	sub    esp,0x8
c0009822:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009826:	83 7c 24 14 04       	cmp    DWORD PTR [esp+0x14],0x4
c000982b:	75 6e                	jne    c000989b <linear_set_converter+0x82>
c000982d:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0009830:	85 c0                	test   eax,eax
c0009832:	74 13                	je     c0009847 <linear_set_converter+0x2e>
c0009834:	83 ec 0c             	sub    esp,0xc
c0009837:	50                   	push   eax
c0009838:	e8 6c 5d 00 00       	call   c000f5a9 <free>
c000983d:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0009844:	83 c4 10             	add    esp,0x10
c0009847:	50                   	push   eax
c0009848:	50                   	push   eax
c0009849:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000984c:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c0009853:	50                   	push   eax
c0009854:	6a 01                	push   0x1
c0009856:	e8 6e 5d 00 00       	call   c000f5c9 <calloc>
c000985b:	83 c4 10             	add    esp,0x10
c000985e:	89 c2                	mov    edx,eax
c0009860:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0009863:	85 d2                	test   edx,edx
c0009865:	b8 01 00 00 00       	mov    eax,0x1
c000986a:	74 2f                	je     c000989b <linear_set_converter+0x82>
c000986c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000986f:	83 ec 0c             	sub    esp,0xc
c0009872:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0009875:	c7 02 fc c4 87 07    	mov    DWORD PTR [edx],0x787c4fc
c000987b:	c7 43 24 d5 8f 00 c0 	mov    DWORD PTR [ebx+0x24],0xc0008fd5
c0009882:	c7 43 20 d5 8f 00 c0 	mov    DWORD PTR [ebx+0x20],0xc0008fd5
c0009889:	c7 43 28 c9 97 00 c0 	mov    DWORD PTR [ebx+0x28],0xc00097c9
c0009890:	53                   	push   ebx
c0009891:	e8 33 ff ff ff       	call   c00097c9 <linear_reset>
c0009896:	83 c4 10             	add    esp,0x10
c0009899:	31 c0                	xor    eax,eax
c000989b:	83 c4 08             	add    esp,0x8
c000989e:	5b                   	pop    ebx
c000989f:	c3                   	ret    

c00098a0 <int_to_fp>:
c00098a0:	c1 e0 0c             	shl    eax,0xc
c00098a3:	c3                   	ret    

c00098a4 <fp_to_int>:
c00098a4:	c1 f8 0c             	sar    eax,0xc
c00098a7:	c3                   	ret    

c00098a8 <fp_fraction_part>:
c00098a8:	25 ff 0f 00 00       	and    eax,0xfff
c00098ad:	c3                   	ret    

c00098ae <fp_to_double>:
c00098ae:	83 ec 1c             	sub    esp,0x1c
c00098b1:	e8 f2 ff ff ff       	call   c00098a8 <fp_fraction_part>
c00098b6:	83 ec 0c             	sub    esp,0xc
c00098b9:	50                   	push   eax
c00098ba:	e8 bc e6 01 00       	call   c0027f7b <__floatsidf>
c00098bf:	83 c4 10             	add    esp,0x10
c00098c2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00098c6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00098ca:	68 00 00 30 3f       	push   0x3f300000
c00098cf:	6a 00                	push   0x0
c00098d1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00098d5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00098d9:	e8 3a e0 01 00       	call   c0027918 <__muldf3>
c00098de:	83 c4 2c             	add    esp,0x2c
c00098e1:	c3                   	ret    

c00098e2 <calc_output_single>:
c00098e2:	55                   	push   ebp
c00098e3:	57                   	push   edi
c00098e4:	56                   	push   esi
c00098e5:	89 c6                	mov    esi,eax
c00098e7:	53                   	push   ebx
c00098e8:	89 d3                	mov    ebx,edx
c00098ea:	83 ec 4c             	sub    esp,0x4c
c00098ed:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00098f1:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00098f4:	e8 a7 ff ff ff       	call   c00098a0 <int_to_fp>
c00098f9:	8b 7e 34             	mov    edi,DWORD PTR [esi+0x34]
c00098fc:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009900:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c0009904:	2b 44 24 18          	sub    eax,DWORD PTR [esp+0x18]
c0009908:	8b 7e 30             	mov    edi,DWORD PTR [esi+0x30]
c000990b:	99                   	cdq    
c000990c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0009914:	f7 fb                	idiv   ebx
c0009916:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000991e:	89 da                	mov    edx,ebx
c0009920:	0f af d0             	imul   edx,eax
c0009923:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0009927:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000992b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000992f:	29 c2                	sub    edx,eax
c0009931:	8d 2c 96             	lea    ebp,[esi+edx*4]
c0009934:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009938:	83 c5 04             	add    ebp,0x4
c000993b:	e8 6e ff ff ff       	call   c00098ae <fp_to_double>
c0009940:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009944:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009948:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000994c:	e8 53 ff ff ff       	call   c00098a4 <fp_to_int>
c0009951:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c0009954:	52                   	push   edx
c0009955:	52                   	push   edx
c0009956:	51                   	push   ecx
c0009957:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c000995b:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c000995f:	e8 cc d2 01 00       	call   c0026c30 <__subsf3>
c0009964:	89 04 24             	mov    DWORD PTR [esp],eax
c0009967:	e8 a3 e9 01 00       	call   c002830f <__extendsfdf2>
c000996c:	83 c4 10             	add    esp,0x10
c000996f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009973:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009977:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000997b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000997f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009983:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009987:	e8 8c df 01 00       	call   c0027918 <__muldf3>
c000998c:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c0009990:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009994:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009997:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000999b:	e8 6f e9 01 00       	call   c002830f <__extendsfdf2>
c00099a0:	83 c4 10             	add    esp,0x10
c00099a3:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00099a7:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00099ab:	52                   	push   edx
c00099ac:	50                   	push   eax
c00099ad:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00099b1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00099b5:	e8 e1 d8 01 00       	call   c002729b <__adddf3>
c00099ba:	59                   	pop    ecx
c00099bb:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00099bf:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c00099c3:	ff b5 40 08 00 00    	push   DWORD PTR [ebp+0x840]
c00099c9:	e8 41 e9 01 00       	call   c002830f <__extendsfdf2>
c00099ce:	83 c4 10             	add    esp,0x10
c00099d1:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00099d5:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00099d9:	52                   	push   edx
c00099da:	50                   	push   eax
c00099db:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00099df:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00099e3:	e8 30 df 01 00       	call   c0027918 <__muldf3>
c00099e8:	83 c4 10             	add    esp,0x10
c00099eb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00099ef:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00099f3:	52                   	push   edx
c00099f4:	50                   	push   eax
c00099f5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00099f9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00099fd:	e8 99 d8 01 00       	call   c002729b <__adddf3>
c0009a02:	83 c4 10             	add    esp,0x10
c0009a05:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009a09:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009a0d:	29 5c 24 10          	sub    DWORD PTR [esp+0x10],ebx
c0009a11:	0f 89 1d ff ff ff    	jns    c0009934 <calc_output_single+0x52>
c0009a17:	89 d9                	mov    ecx,ebx
c0009a19:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009a1d:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c0009a21:	89 dd                	mov    ebp,ebx
c0009a23:	29 c8                	sub    eax,ecx
c0009a25:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0009a2d:	99                   	cdq    
c0009a2e:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0009a36:	f7 fb                	idiv   ebx
c0009a38:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009a3c:	0f af e8             	imul   ebp,eax
c0009a3f:	8d 44 02 01          	lea    eax,[edx+eax*1+0x1]
c0009a43:	01 cd                	add    ebp,ecx
c0009a45:	8d 34 86             	lea    esi,[esi+eax*4]
c0009a48:	89 e8                	mov    eax,ebp
c0009a4a:	83 ee 04             	sub    esi,0x4
c0009a4d:	e8 5c fe ff ff       	call   c00098ae <fp_to_double>
c0009a52:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009a56:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009a5a:	89 e8                	mov    eax,ebp
c0009a5c:	29 dd                	sub    ebp,ebx
c0009a5e:	e8 41 fe ff ff       	call   c00098a4 <fp_to_int>
c0009a63:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c0009a66:	52                   	push   edx
c0009a67:	52                   	push   edx
c0009a68:	51                   	push   ecx
c0009a69:	89 4c 24 44          	mov    DWORD PTR [esp+0x44],ecx
c0009a6d:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c0009a71:	e8 ba d1 01 00       	call   c0026c30 <__subsf3>
c0009a76:	89 04 24             	mov    DWORD PTR [esp],eax
c0009a79:	e8 91 e8 01 00       	call   c002830f <__extendsfdf2>
c0009a7e:	83 c4 10             	add    esp,0x10
c0009a81:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009a85:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009a89:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009a8d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009a91:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009a95:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009a99:	e8 7a de 01 00       	call   c0027918 <__muldf3>
c0009a9e:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0009aa2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009aa6:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009aa9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009aad:	e8 5d e8 01 00       	call   c002830f <__extendsfdf2>
c0009ab2:	83 c4 10             	add    esp,0x10
c0009ab5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009ab9:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009abd:	52                   	push   edx
c0009abe:	50                   	push   eax
c0009abf:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009ac3:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009ac7:	e8 cf d7 01 00       	call   c002729b <__adddf3>
c0009acc:	59                   	pop    ecx
c0009acd:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009ad1:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009ad5:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c0009adb:	e8 2f e8 01 00       	call   c002830f <__extendsfdf2>
c0009ae0:	83 c4 10             	add    esp,0x10
c0009ae3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009ae7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009aeb:	52                   	push   edx
c0009aec:	50                   	push   eax
c0009aed:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009af1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009af5:	e8 1e de 01 00       	call   c0027918 <__muldf3>
c0009afa:	83 c4 10             	add    esp,0x10
c0009afd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009b01:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009b05:	52                   	push   edx
c0009b06:	50                   	push   eax
c0009b07:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009b0b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009b0f:	e8 87 d7 01 00       	call   c002729b <__adddf3>
c0009b14:	83 c4 10             	add    esp,0x10
c0009b17:	85 ed                	test   ebp,ebp
c0009b19:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009b1d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009b21:	0f 8f 21 ff ff ff    	jg     c0009a48 <calc_output_single+0x166>
c0009b27:	52                   	push   edx
c0009b28:	50                   	push   eax
c0009b29:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b2d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b31:	e8 65 d7 01 00       	call   c002729b <__adddf3>
c0009b36:	83 c4 5c             	add    esp,0x5c
c0009b39:	5b                   	pop    ebx
c0009b3a:	5e                   	pop    esi
c0009b3b:	5f                   	pop    edi
c0009b3c:	5d                   	pop    ebp
c0009b3d:	c3                   	ret    

c0009b3e <calc_output_stereo>:
c0009b3e:	55                   	push   ebp
c0009b3f:	89 cd                	mov    ebp,ecx
c0009b41:	57                   	push   edi
c0009b42:	56                   	push   esi
c0009b43:	53                   	push   ebx
c0009b44:	89 c3                	mov    ebx,eax
c0009b46:	83 ec 6c             	sub    esp,0x6c
c0009b49:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009b4d:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0009b54:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0009b5b:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009b5f:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009b63:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0009b66:	e8 35 fd ff ff       	call   c00098a0 <int_to_fp>
c0009b6b:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0009b73:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009b77:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0009b7f:	29 c8                	sub    eax,ecx
c0009b81:	99                   	cdq    
c0009b82:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009b86:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009b8a:	0f af d0             	imul   edx,eax
c0009b8d:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0009b90:	31 d2                	xor    edx,edx
c0009b92:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c0009b96:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009b9a:	8b 73 34             	mov    esi,DWORD PTR [ebx+0x34]
c0009b9d:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c0009ba1:	8b 73 04             	mov    esi,DWORD PTR [ebx+0x4]
c0009ba4:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0009ba8:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0009bac:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c0009baf:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0009bb4:	29 c1                	sub    ecx,eax
c0009bb6:	31 c0                	xor    eax,eax
c0009bb8:	8d 3c 8b             	lea    edi,[ebx+ecx*4]
c0009bbb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009bbf:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009bc3:	83 c7 08             	add    edi,0x8
c0009bc6:	e8 e3 fc ff ff       	call   c00098ae <fp_to_double>
c0009bcb:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0009bcf:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0009bd3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009bd7:	e8 c8 fc ff ff       	call   c00098a4 <fp_to_int>
c0009bdc:	8b 0c 86             	mov    ecx,DWORD PTR [esi+eax*4]
c0009bdf:	52                   	push   edx
c0009be0:	52                   	push   edx
c0009be1:	51                   	push   ecx
c0009be2:	89 4c 24 68          	mov    DWORD PTR [esp+0x68],ecx
c0009be6:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c0009bea:	e8 41 d0 01 00       	call   c0026c30 <__subsf3>
c0009bef:	89 04 24             	mov    DWORD PTR [esp],eax
c0009bf2:	e8 18 e7 01 00       	call   c002830f <__extendsfdf2>
c0009bf7:	83 c4 10             	add    esp,0x10
c0009bfa:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009bfe:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c02:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c06:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c0a:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c0e:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c12:	e8 01 dd 01 00       	call   c0027918 <__muldf3>
c0009c17:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c0009c1b:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009c1f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009c22:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0009c26:	e8 e4 e6 01 00       	call   c002830f <__extendsfdf2>
c0009c2b:	83 c4 10             	add    esp,0x10
c0009c2e:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c32:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c36:	52                   	push   edx
c0009c37:	50                   	push   eax
c0009c38:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009c3c:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009c40:	e8 56 d6 01 00       	call   c002729b <__adddf3>
c0009c45:	59                   	pop    ecx
c0009c46:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0009c4a:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c0009c4e:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c0009c54:	e8 b6 e6 01 00       	call   c002830f <__extendsfdf2>
c0009c59:	83 c4 10             	add    esp,0x10
c0009c5c:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c60:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c64:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c68:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c6c:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c70:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c74:	e8 9f dc 01 00       	call   c0027918 <__muldf3>
c0009c79:	83 c4 10             	add    esp,0x10
c0009c7c:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c80:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c84:	52                   	push   edx
c0009c85:	50                   	push   eax
c0009c86:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009c8a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009c8e:	e8 08 d6 01 00       	call   c002729b <__adddf3>
c0009c93:	59                   	pop    ecx
c0009c94:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009c98:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009c9c:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c0009ca2:	e8 68 e6 01 00       	call   c002830f <__extendsfdf2>
c0009ca7:	83 c4 10             	add    esp,0x10
c0009caa:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009cae:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009cb2:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009cb6:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009cba:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009cbe:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009cc2:	e8 51 dc 01 00       	call   c0027918 <__muldf3>
c0009cc7:	83 c4 10             	add    esp,0x10
c0009cca:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0009cce:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0009cd2:	52                   	push   edx
c0009cd3:	50                   	push   eax
c0009cd4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009cd8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009cdc:	e8 ba d5 01 00       	call   c002729b <__adddf3>
c0009ce1:	83 c4 10             	add    esp,0x10
c0009ce4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009ce8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009cec:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009cf0:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c0009cf4:	0f 89 c5 fe ff ff    	jns    c0009bbf <calc_output_stereo+0x81>
c0009cfa:	29 e9                	sub    ecx,ebp
c0009cfc:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009d00:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0009d04:	29 c8                	sub    eax,ecx
c0009d06:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0009d0e:	99                   	cdq    
c0009d0f:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009d13:	31 d2                	xor    edx,edx
c0009d15:	0f af f8             	imul   edi,eax
c0009d18:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009d1c:	40                   	inc    eax
c0009d1d:	01 cf                	add    edi,ecx
c0009d1f:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0009d24:	03 44 24 28          	add    eax,DWORD PTR [esp+0x28]
c0009d28:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0009d30:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c0009d33:	31 c0                	xor    eax,eax
c0009d35:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009d39:	89 f8                	mov    eax,edi
c0009d3b:	83 eb 08             	sub    ebx,0x8
c0009d3e:	e8 6b fb ff ff       	call   c00098ae <fp_to_double>
c0009d43:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009d47:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009d4b:	89 f8                	mov    eax,edi
c0009d4d:	e8 52 fb ff ff       	call   c00098a4 <fp_to_int>
c0009d52:	8b 2c 86             	mov    ebp,DWORD PTR [esi+eax*4]
c0009d55:	52                   	push   edx
c0009d56:	52                   	push   edx
c0009d57:	55                   	push   ebp
c0009d58:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c0009d5c:	e8 cf ce 01 00       	call   c0026c30 <__subsf3>
c0009d61:	89 04 24             	mov    DWORD PTR [esp],eax
c0009d64:	e8 a6 e5 01 00       	call   c002830f <__extendsfdf2>
c0009d69:	83 c4 10             	add    esp,0x10
c0009d6c:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009d70:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009d74:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009d78:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009d7c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009d80:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009d84:	e8 8f db 01 00       	call   c0027918 <__muldf3>
c0009d89:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009d8c:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009d90:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009d94:	e8 76 e5 01 00       	call   c002830f <__extendsfdf2>
c0009d99:	83 c4 10             	add    esp,0x10
c0009d9c:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009da0:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009da4:	52                   	push   edx
c0009da5:	50                   	push   eax
c0009da6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009daa:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009dae:	e8 e8 d4 01 00       	call   c002729b <__adddf3>
c0009db3:	59                   	pop    ecx
c0009db4:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0009db8:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0009dbc:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c0009dc2:	e8 48 e5 01 00       	call   c002830f <__extendsfdf2>
c0009dc7:	83 c4 10             	add    esp,0x10
c0009dca:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009dce:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009dd2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009dd6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009dda:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009dde:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009de2:	e8 31 db 01 00       	call   c0027918 <__muldf3>
c0009de7:	83 c4 10             	add    esp,0x10
c0009dea:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009dee:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009df2:	52                   	push   edx
c0009df3:	50                   	push   eax
c0009df4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009df8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009dfc:	e8 9a d4 01 00       	call   c002729b <__adddf3>
c0009e01:	5d                   	pop    ebp
c0009e02:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009e06:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009e0a:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c0009e10:	e8 fa e4 01 00       	call   c002830f <__extendsfdf2>
c0009e15:	83 c4 10             	add    esp,0x10
c0009e18:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009e1c:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009e20:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e24:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e28:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e2c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e30:	e8 e3 da 01 00       	call   c0027918 <__muldf3>
c0009e35:	83 c4 10             	add    esp,0x10
c0009e38:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009e3c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009e40:	52                   	push   edx
c0009e41:	50                   	push   eax
c0009e42:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e46:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e4a:	e8 4c d4 01 00       	call   c002729b <__adddf3>
c0009e4f:	83 c4 10             	add    esp,0x10
c0009e52:	2b 7c 24 08          	sub    edi,DWORD PTR [esp+0x8]
c0009e56:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009e5a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009e5e:	85 ff                	test   edi,edi
c0009e60:	0f 8f d3 fe ff ff    	jg     c0009d39 <calc_output_stereo+0x1fb>
c0009e66:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e6a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e6e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e76:	e8 20 d4 01 00       	call   c002729b <__adddf3>
c0009e7b:	83 c4 10             	add    esp,0x10
c0009e7e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009e82:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009e86:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e8a:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e8e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009e92:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009e96:	e8 7d da 01 00       	call   c0027918 <__muldf3>
c0009e9b:	59                   	pop    ecx
c0009e9c:	5b                   	pop    ebx
c0009e9d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009ea1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009ea5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ea9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ead:	e8 39 e3 01 00       	call   c00281eb <__truncdfsf2>
c0009eb2:	83 c4 10             	add    esp,0x10
c0009eb5:	8b 9c 24 88 00 00 00 	mov    ebx,DWORD PTR [esp+0x88]
c0009ebc:	89 03                	mov    DWORD PTR [ebx],eax
c0009ebe:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ec2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ec6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009eca:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ece:	e8 c8 d3 01 00       	call   c002729b <__adddf3>
c0009ed3:	83 c4 10             	add    esp,0x10
c0009ed6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009eda:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009ede:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009ee2:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009ee6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009eea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009eee:	e8 25 da 01 00       	call   c0027918 <__muldf3>
c0009ef3:	5e                   	pop    esi
c0009ef4:	5f                   	pop    edi
c0009ef5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009ef9:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009efd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f01:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f05:	e8 e1 e2 01 00       	call   c00281eb <__truncdfsf2>
c0009f0a:	8b 9c 24 98 00 00 00 	mov    ebx,DWORD PTR [esp+0x98]
c0009f11:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0009f14:	83 c4 7c             	add    esp,0x7c
c0009f17:	5b                   	pop    ebx
c0009f18:	5e                   	pop    esi
c0009f19:	5f                   	pop    edi
c0009f1a:	5d                   	pop    ebp
c0009f1b:	c3                   	ret    

c0009f1c <calc_output_quad>:
c0009f1c:	55                   	push   ebp
c0009f1d:	57                   	push   edi
c0009f1e:	56                   	push   esi
c0009f1f:	89 c6                	mov    esi,eax
c0009f21:	53                   	push   ebx
c0009f22:	83 ec 7c             	sub    esp,0x7c
c0009f25:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009f29:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c0009f2d:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0009f34:	8b 84 24 90 00 00 00 	mov    eax,DWORD PTR [esp+0x90]
c0009f3b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009f3f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009f43:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0009f46:	e8 55 f9 ff ff       	call   c00098a0 <int_to_fp>
c0009f4b:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0009f4e:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0009f51:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009f55:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0009f59:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0009f5d:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c0009f61:	99                   	cdq    
c0009f62:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c0009f66:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009f6a:	8b 6e 30             	mov    ebp,DWORD PTR [esi+0x30]
c0009f6d:	31 d2                	xor    edx,edx
c0009f6f:	0f af d8             	imul   ebx,eax
c0009f72:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c0009f7a:	0f af c7             	imul   eax,edi
c0009f7d:	03 5c 24 28          	add    ebx,DWORD PTR [esp+0x28]
c0009f81:	29 c1                	sub    ecx,eax
c0009f83:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c0009f8b:	31 c0                	xor    eax,eax
c0009f8d:	8d 3c 8e             	lea    edi,[esi+ecx*4]
c0009f90:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009f94:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009f98:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009f9c:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009fa0:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009fa4:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009fa8:	89 d8                	mov    eax,ebx
c0009faa:	83 c7 10             	add    edi,0x10
c0009fad:	e8 fc f8 ff ff       	call   c00098ae <fp_to_double>
c0009fb2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009fb6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009fba:	89 d8                	mov    eax,ebx
c0009fbc:	e8 e3 f8 ff ff       	call   c00098a4 <fp_to_int>
c0009fc1:	8b 4c 85 00          	mov    ecx,DWORD PTR [ebp+eax*4+0x0]
c0009fc5:	52                   	push   edx
c0009fc6:	52                   	push   edx
c0009fc7:	51                   	push   ecx
c0009fc8:	89 4c 24 78          	mov    DWORD PTR [esp+0x78],ecx
c0009fcc:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c0009fd0:	e8 5b cc 01 00       	call   c0026c30 <__subsf3>
c0009fd5:	89 04 24             	mov    DWORD PTR [esp],eax
c0009fd8:	e8 32 e3 01 00       	call   c002830f <__extendsfdf2>
c0009fdd:	83 c4 10             	add    esp,0x10
c0009fe0:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009fe4:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009fe8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009fec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ff0:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009ff4:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009ff8:	e8 1b d9 01 00       	call   c0027918 <__muldf3>
c0009ffd:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c000a001:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a005:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a008:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a00c:	e8 fe e2 01 00       	call   c002830f <__extendsfdf2>
c000a011:	83 c4 10             	add    esp,0x10
c000a014:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a018:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a01c:	52                   	push   edx
c000a01d:	50                   	push   eax
c000a01e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a022:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a026:	e8 70 d2 01 00       	call   c002729b <__adddf3>
c000a02b:	59                   	pop    ecx
c000a02c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a030:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a034:	ff b7 34 08 00 00    	push   DWORD PTR [edi+0x834]
c000a03a:	e8 d0 e2 01 00       	call   c002830f <__extendsfdf2>
c000a03f:	83 c4 10             	add    esp,0x10
c000a042:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a046:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a04a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a04e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a052:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a056:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a05a:	e8 b9 d8 01 00       	call   c0027918 <__muldf3>
c000a05f:	83 c4 10             	add    esp,0x10
c000a062:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a066:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a06a:	52                   	push   edx
c000a06b:	50                   	push   eax
c000a06c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a070:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a074:	e8 22 d2 01 00       	call   c002729b <__adddf3>
c000a079:	59                   	pop    ecx
c000a07a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000a07e:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000a082:	ff b7 38 08 00 00    	push   DWORD PTR [edi+0x838]
c000a088:	e8 82 e2 01 00       	call   c002830f <__extendsfdf2>
c000a08d:	83 c4 10             	add    esp,0x10
c000a090:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a094:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a098:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a09c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0a0:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0a4:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0a8:	e8 6b d8 01 00       	call   c0027918 <__muldf3>
c000a0ad:	83 c4 10             	add    esp,0x10
c000a0b0:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0b4:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0b8:	52                   	push   edx
c000a0b9:	50                   	push   eax
c000a0ba:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a0be:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a0c2:	e8 d4 d1 01 00       	call   c002729b <__adddf3>
c000a0c7:	59                   	pop    ecx
c000a0c8:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a0cc:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a0d0:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c000a0d6:	e8 34 e2 01 00       	call   c002830f <__extendsfdf2>
c000a0db:	83 c4 10             	add    esp,0x10
c000a0de:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0e2:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0ea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0ee:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0f2:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0f6:	e8 1d d8 01 00       	call   c0027918 <__muldf3>
c000a0fb:	83 c4 10             	add    esp,0x10
c000a0fe:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a102:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a106:	52                   	push   edx
c000a107:	50                   	push   eax
c000a108:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a10c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a110:	e8 86 d1 01 00       	call   c002729b <__adddf3>
c000a115:	59                   	pop    ecx
c000a116:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000a11a:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000a11e:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c000a124:	e8 e6 e1 01 00       	call   c002830f <__extendsfdf2>
c000a129:	83 c4 10             	add    esp,0x10
c000a12c:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a130:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a134:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a138:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a13c:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a140:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a144:	e8 cf d7 01 00       	call   c0027918 <__muldf3>
c000a149:	83 c4 10             	add    esp,0x10
c000a14c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a150:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a154:	52                   	push   edx
c000a155:	50                   	push   eax
c000a156:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a15a:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a15e:	e8 38 d1 01 00       	call   c002729b <__adddf3>
c000a163:	83 c4 10             	add    esp,0x10
c000a166:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000a16a:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000a16e:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c000a172:	0f 89 30 fe ff ff    	jns    c0009fa8 <calc_output_quad+0x8c>
c000a178:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000a17c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000a180:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000a184:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c000a188:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000a190:	29 c8                	sub    eax,ecx
c000a192:	99                   	cdq    
c000a193:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c000a197:	31 d2                	xor    edx,edx
c000a199:	0f af d8             	imul   ebx,eax
c000a19c:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000a1a0:	40                   	inc    eax
c000a1a1:	01 cb                	add    ebx,ecx
c000a1a3:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c000a1a8:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c000a1ac:	03 44 24 48          	add    eax,DWORD PTR [esp+0x48]
c000a1b0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a1b4:	8d 34 86             	lea    esi,[esi+eax*4]
c000a1b7:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c000a1bf:	31 c0                	xor    eax,eax
c000a1c1:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000a1c5:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000a1c9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a1cd:	89 d8                	mov    eax,ebx
c000a1cf:	83 ee 10             	sub    esi,0x10
c000a1d2:	e8 d7 f6 ff ff       	call   c00098ae <fp_to_double>
c000a1d7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a1db:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a1df:	89 d8                	mov    eax,ebx
c000a1e1:	e8 be f6 ff ff       	call   c00098a4 <fp_to_int>
c000a1e6:	8b 7c 85 00          	mov    edi,DWORD PTR [ebp+eax*4+0x0]
c000a1ea:	52                   	push   edx
c000a1eb:	52                   	push   edx
c000a1ec:	57                   	push   edi
c000a1ed:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c000a1f1:	e8 3a ca 01 00       	call   c0026c30 <__subsf3>
c000a1f6:	89 04 24             	mov    DWORD PTR [esp],eax
c000a1f9:	e8 11 e1 01 00       	call   c002830f <__extendsfdf2>
c000a1fe:	83 c4 10             	add    esp,0x10
c000a201:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a205:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a209:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a20d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a211:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a215:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a219:	e8 fa d6 01 00       	call   c0027918 <__muldf3>
c000a21e:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a221:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a225:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a229:	e8 e1 e0 01 00       	call   c002830f <__extendsfdf2>
c000a22e:	83 c4 10             	add    esp,0x10
c000a231:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a235:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a239:	52                   	push   edx
c000a23a:	50                   	push   eax
c000a23b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a23f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a243:	e8 53 d0 01 00       	call   c002729b <__adddf3>
c000a248:	59                   	pop    ecx
c000a249:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a24d:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a251:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a257:	e8 b3 e0 01 00       	call   c002830f <__extendsfdf2>
c000a25c:	83 c4 10             	add    esp,0x10
c000a25f:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a263:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a267:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a26b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a26f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a273:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a277:	e8 9c d6 01 00       	call   c0027918 <__muldf3>
c000a27c:	83 c4 10             	add    esp,0x10
c000a27f:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a283:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a287:	52                   	push   edx
c000a288:	50                   	push   eax
c000a289:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a28d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a291:	e8 05 d0 01 00       	call   c002729b <__adddf3>
c000a296:	5f                   	pop    edi
c000a297:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a29b:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a29f:	ff b6 58 08 00 00    	push   DWORD PTR [esi+0x858]
c000a2a5:	e8 65 e0 01 00       	call   c002830f <__extendsfdf2>
c000a2aa:	83 c4 10             	add    esp,0x10
c000a2ad:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a2b1:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a2b5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2b9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2bd:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2c1:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2c5:	e8 4e d6 01 00       	call   c0027918 <__muldf3>
c000a2ca:	83 c4 10             	add    esp,0x10
c000a2cd:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a2d1:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a2d5:	52                   	push   edx
c000a2d6:	50                   	push   eax
c000a2d7:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a2db:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a2df:	e8 b7 cf 01 00       	call   c002729b <__adddf3>
c000a2e4:	59                   	pop    ecx
c000a2e5:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000a2e9:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000a2ed:	ff b6 5c 08 00 00    	push   DWORD PTR [esi+0x85c]
c000a2f3:	e8 17 e0 01 00       	call   c002830f <__extendsfdf2>
c000a2f8:	83 c4 10             	add    esp,0x10
c000a2fb:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a2ff:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a303:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a307:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a30b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a30f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a313:	e8 00 d6 01 00       	call   c0027918 <__muldf3>
c000a318:	83 c4 10             	add    esp,0x10
c000a31b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a31f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a323:	52                   	push   edx
c000a324:	50                   	push   eax
c000a325:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a329:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a32d:	e8 69 cf 01 00       	call   c002729b <__adddf3>
c000a332:	5f                   	pop    edi
c000a333:	89 44 24 5c          	mov    DWORD PTR [esp+0x5c],eax
c000a337:	89 54 24 60          	mov    DWORD PTR [esp+0x60],edx
c000a33b:	ff b6 60 08 00 00    	push   DWORD PTR [esi+0x860]
c000a341:	e8 c9 df 01 00       	call   c002830f <__extendsfdf2>
c000a346:	83 c4 10             	add    esp,0x10
c000a349:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a34d:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a351:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a355:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a359:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a35d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a361:	e8 b2 d5 01 00       	call   c0027918 <__muldf3>
c000a366:	83 c4 10             	add    esp,0x10
c000a369:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a36d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a371:	52                   	push   edx
c000a372:	50                   	push   eax
c000a373:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a377:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a37b:	e8 1b cf 01 00       	call   c002729b <__adddf3>
c000a380:	83 c4 10             	add    esp,0x10
c000a383:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c000a387:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000a38b:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000a38f:	85 db                	test   ebx,ebx
c000a391:	0f 8f 36 fe ff ff    	jg     c000a1cd <calc_output_quad+0x2b1>
c000a397:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a39b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a39f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3a3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3a7:	e8 ef ce 01 00       	call   c002729b <__adddf3>
c000a3ac:	83 c4 10             	add    esp,0x10
c000a3af:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a3b3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a3b7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3bb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3bf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3c3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3c7:	e8 4c d5 01 00       	call   c0027918 <__muldf3>
c000a3cc:	59                   	pop    ecx
c000a3cd:	5b                   	pop    ebx
c000a3ce:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a3d2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a3d6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3da:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3de:	e8 08 de 01 00       	call   c00281eb <__truncdfsf2>
c000a3e3:	83 c4 10             	add    esp,0x10
c000a3e6:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a3ed:	89 06                	mov    DWORD PTR [esi],eax
c000a3ef:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a3f3:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a3f7:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a3fb:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a3ff:	e8 97 ce 01 00       	call   c002729b <__adddf3>
c000a404:	83 c4 10             	add    esp,0x10
c000a407:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a40b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a40f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a413:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a417:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a41b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a41f:	e8 f4 d4 01 00       	call   c0027918 <__muldf3>
c000a424:	5e                   	pop    esi
c000a425:	5f                   	pop    edi
c000a426:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a42a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a42e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a432:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a436:	e8 b0 dd 01 00       	call   c00281eb <__truncdfsf2>
c000a43b:	83 c4 10             	add    esp,0x10
c000a43e:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a445:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
c000a448:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a44c:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a450:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a454:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a458:	e8 3e ce 01 00       	call   c002729b <__adddf3>
c000a45d:	83 c4 10             	add    esp,0x10
c000a460:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a464:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a468:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a46c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a470:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a474:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a478:	e8 9b d4 01 00       	call   c0027918 <__muldf3>
c000a47d:	5d                   	pop    ebp
c000a47e:	59                   	pop    ecx
c000a47f:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a483:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a487:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a48b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a48f:	e8 57 dd 01 00       	call   c00281eb <__truncdfsf2>
c000a494:	83 c4 10             	add    esp,0x10
c000a497:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a49e:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000a4a1:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4a5:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4a9:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4ad:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4b1:	e8 e5 cd 01 00       	call   c002729b <__adddf3>
c000a4b6:	83 c4 10             	add    esp,0x10
c000a4b9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a4bd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a4c1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4c5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4c9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4cd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4d1:	e8 42 d4 01 00       	call   c0027918 <__muldf3>
c000a4d6:	5b                   	pop    ebx
c000a4d7:	5e                   	pop    esi
c000a4d8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a4dc:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a4e0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4e4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4e8:	e8 fe dc 01 00       	call   c00281eb <__truncdfsf2>
c000a4ed:	8b 8c 24 a8 00 00 00 	mov    ecx,DWORD PTR [esp+0xa8]
c000a4f4:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c000a4f7:	81 c4 8c 00 00 00    	add    esp,0x8c
c000a4fd:	5b                   	pop    ebx
c000a4fe:	5e                   	pop    esi
c000a4ff:	5f                   	pop    edi
c000a500:	5d                   	pop    ebp
c000a501:	c3                   	ret    

c000a502 <calc_output_hex>:
c000a502:	55                   	push   ebp
c000a503:	89 cd                	mov    ebp,ecx
c000a505:	57                   	push   edi
c000a506:	56                   	push   esi
c000a507:	53                   	push   ebx
c000a508:	89 c3                	mov    ebx,eax
c000a50a:	81 ec 8c 00 00 00    	sub    esp,0x8c
c000a510:	89 14 24             	mov    DWORD PTR [esp],edx
c000a513:	8b 84 24 a0 00 00 00 	mov    eax,DWORD PTR [esp+0xa0]
c000a51a:	8b 94 24 a4 00 00 00 	mov    edx,DWORD PTR [esp+0xa4]
c000a521:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a525:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a529:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000a52c:	e8 6f f3 ff ff       	call   c00098a0 <int_to_fp>
c000a531:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c000a534:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000a538:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000a53b:	29 c8                	sub    eax,ecx
c000a53d:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c000a541:	99                   	cdq    
c000a542:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c000a54a:	f7 3c 24             	idiv   DWORD PTR [esp]
c000a54d:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000a555:	0f af f8             	imul   edi,eax
c000a558:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000a55b:	01 cf                	add    edi,ecx
c000a55d:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a561:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000a564:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000a568:	0f af c2             	imul   eax,edx
c000a56b:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a56f:	29 c1                	sub    ecx,eax
c000a571:	31 d2                	xor    edx,edx
c000a573:	31 c0                	xor    eax,eax
c000a575:	8d 34 8b             	lea    esi,[ebx+ecx*4]
c000a578:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a57c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a580:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000a584:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000a588:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000a58c:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000a590:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000a594:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000a598:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a59c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a5a0:	89 f8                	mov    eax,edi
c000a5a2:	e8 07 f3 ff ff       	call   c00098ae <fp_to_double>
c000a5a7:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a5ab:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a5af:	89 f8                	mov    eax,edi
c000a5b1:	e8 ee f2 ff ff       	call   c00098a4 <fp_to_int>
c000a5b6:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a5ba:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000a5bd:	52                   	push   edx
c000a5be:	52                   	push   edx
c000a5bf:	51                   	push   ecx
c000a5c0:	89 4c 24 74          	mov    DWORD PTR [esp+0x74],ecx
c000a5c4:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000a5cb:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000a5cf:	e8 5c c6 01 00       	call   c0026c30 <__subsf3>
c000a5d4:	89 04 24             	mov    DWORD PTR [esp],eax
c000a5d7:	e8 33 dd 01 00       	call   c002830f <__extendsfdf2>
c000a5dc:	83 c4 10             	add    esp,0x10
c000a5df:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a5e3:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a5e7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a5eb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a5ef:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a5f3:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a5f7:	e8 1c d3 01 00       	call   c0027918 <__muldf3>
c000a5fc:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a600:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a604:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a607:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a60b:	e8 ff dc 01 00       	call   c002830f <__extendsfdf2>
c000a610:	83 c4 10             	add    esp,0x10
c000a613:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a617:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a61b:	52                   	push   edx
c000a61c:	50                   	push   eax
c000a61d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a621:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a625:	e8 71 cc 01 00       	call   c002729b <__adddf3>
c000a62a:	59                   	pop    ecx
c000a62b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a62f:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a633:	ff b6 44 08 00 00    	push   DWORD PTR [esi+0x844]
c000a639:	e8 d1 dc 01 00       	call   c002830f <__extendsfdf2>
c000a63e:	83 c4 10             	add    esp,0x10
c000a641:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a645:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a649:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a64d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a651:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a655:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a659:	e8 ba d2 01 00       	call   c0027918 <__muldf3>
c000a65e:	83 c4 10             	add    esp,0x10
c000a661:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a665:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a669:	52                   	push   edx
c000a66a:	50                   	push   eax
c000a66b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a66f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a673:	e8 23 cc 01 00       	call   c002729b <__adddf3>
c000a678:	59                   	pop    ecx
c000a679:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a67d:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a681:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c000a687:	e8 83 dc 01 00       	call   c002830f <__extendsfdf2>
c000a68c:	83 c4 10             	add    esp,0x10
c000a68f:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a693:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a697:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a69b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a69f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a6a3:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a6a7:	e8 6c d2 01 00       	call   c0027918 <__muldf3>
c000a6ac:	83 c4 10             	add    esp,0x10
c000a6af:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a6b3:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a6b7:	52                   	push   edx
c000a6b8:	50                   	push   eax
c000a6b9:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a6bd:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a6c1:	e8 d5 cb 01 00       	call   c002729b <__adddf3>
c000a6c6:	59                   	pop    ecx
c000a6c7:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000a6cb:	89 54 24 50          	mov    DWORD PTR [esp+0x50],edx
c000a6cf:	ff b6 4c 08 00 00    	push   DWORD PTR [esi+0x84c]
c000a6d5:	e8 35 dc 01 00       	call   c002830f <__extendsfdf2>
c000a6da:	83 c4 10             	add    esp,0x10
c000a6dd:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a6e1:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a6e5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6e9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6ed:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a6f1:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a6f5:	e8 1e d2 01 00       	call   c0027918 <__muldf3>
c000a6fa:	83 c4 10             	add    esp,0x10
c000a6fd:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a701:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a705:	52                   	push   edx
c000a706:	50                   	push   eax
c000a707:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a70b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a70f:	e8 87 cb 01 00       	call   c002729b <__adddf3>
c000a714:	59                   	pop    ecx
c000a715:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a719:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a71d:	ff b6 50 08 00 00    	push   DWORD PTR [esi+0x850]
c000a723:	e8 e7 db 01 00       	call   c002830f <__extendsfdf2>
c000a728:	83 c4 10             	add    esp,0x10
c000a72b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a72f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a733:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a737:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a73b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a73f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a743:	e8 d0 d1 01 00       	call   c0027918 <__muldf3>
c000a748:	83 c4 10             	add    esp,0x10
c000a74b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a74f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a753:	52                   	push   edx
c000a754:	50                   	push   eax
c000a755:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a759:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a75d:	e8 39 cb 01 00       	call   c002729b <__adddf3>
c000a762:	59                   	pop    ecx
c000a763:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000a767:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000a76b:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a771:	e8 99 db 01 00       	call   c002830f <__extendsfdf2>
c000a776:	83 c4 10             	add    esp,0x10
c000a779:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a77d:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a781:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a785:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a789:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a78d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a791:	e8 82 d1 01 00       	call   c0027918 <__muldf3>
c000a796:	83 c4 10             	add    esp,0x10
c000a799:	83 c6 18             	add    esi,0x18
c000a79c:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a7a0:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a7a4:	52                   	push   edx
c000a7a5:	50                   	push   eax
c000a7a6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a7aa:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a7ae:	e8 e8 ca 01 00       	call   c002729b <__adddf3>
c000a7b3:	59                   	pop    ecx
c000a7b4:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a7b8:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a7bc:	ff b6 40 08 00 00    	push   DWORD PTR [esi+0x840]
c000a7c2:	e8 48 db 01 00       	call   c002830f <__extendsfdf2>
c000a7c7:	83 c4 10             	add    esp,0x10
c000a7ca:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a7ce:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a7d2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7d6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7da:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a7de:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a7e2:	e8 31 d1 01 00       	call   c0027918 <__muldf3>
c000a7e7:	83 c4 10             	add    esp,0x10
c000a7ea:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a7ee:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a7f2:	52                   	push   edx
c000a7f3:	50                   	push   eax
c000a7f4:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a7f8:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a7fc:	e8 9a ca 01 00       	call   c002729b <__adddf3>
c000a801:	83 c4 10             	add    esp,0x10
c000a804:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000a808:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000a80c:	2b 3c 24             	sub    edi,DWORD PTR [esp]
c000a80f:	0f 89 8b fd ff ff    	jns    c000a5a0 <calc_output_hex+0x9e>
c000a815:	31 f6                	xor    esi,esi
c000a817:	31 ff                	xor    edi,edi
c000a819:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000a81d:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000a820:	89 7c 24 4c          	mov    DWORD PTR [esp+0x4c],edi
c000a824:	29 e9                	sub    ecx,ebp
c000a826:	89 74 24 58          	mov    DWORD PTR [esp+0x58],esi
c000a82a:	29 c8                	sub    eax,ecx
c000a82c:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c000a82f:	99                   	cdq    
c000a830:	89 7c 24 5c          	mov    DWORD PTR [esp+0x5c],edi
c000a834:	f7 3c 24             	idiv   DWORD PTR [esp]
c000a837:	89 74 24 60          	mov    DWORD PTR [esp+0x60],esi
c000a83b:	0f af e8             	imul   ebp,eax
c000a83e:	89 7c 24 64          	mov    DWORD PTR [esp+0x64],edi
c000a842:	40                   	inc    eax
c000a843:	01 cd                	add    ebp,ecx
c000a845:	0f af 44 24 48       	imul   eax,DWORD PTR [esp+0x48]
c000a84a:	89 74 24 68          	mov    DWORD PTR [esp+0x68],esi
c000a84e:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000a852:	89 74 24 48          	mov    DWORD PTR [esp+0x48],esi
c000a856:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c000a859:	89 7c 24 6c          	mov    DWORD PTR [esp+0x6c],edi
c000a85d:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c000a861:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c000a865:	89 e8                	mov    eax,ebp
c000a867:	e8 42 f0 ff ff       	call   c00098ae <fp_to_double>
c000a86c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a870:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a874:	89 e8                	mov    eax,ebp
c000a876:	e8 29 f0 ff ff       	call   c00098a4 <fp_to_int>
c000a87b:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a87f:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000a882:	52                   	push   edx
c000a883:	52                   	push   edx
c000a884:	51                   	push   ecx
c000a885:	89 8c 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],ecx
c000a88c:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000a893:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000a897:	e8 94 c3 01 00       	call   c0026c30 <__subsf3>
c000a89c:	89 04 24             	mov    DWORD PTR [esp],eax
c000a89f:	e8 6b da 01 00       	call   c002830f <__extendsfdf2>
c000a8a4:	83 c4 10             	add    esp,0x10
c000a8a7:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a8ab:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a8af:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a8b3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a8b7:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a8bb:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a8bf:	e8 54 d0 01 00       	call   c0027918 <__muldf3>
c000a8c4:	8b 8c 24 8c 00 00 00 	mov    ecx,DWORD PTR [esp+0x8c]
c000a8cb:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a8cf:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a8d2:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a8d6:	e8 34 da 01 00       	call   c002830f <__extendsfdf2>
c000a8db:	83 c4 10             	add    esp,0x10
c000a8de:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a8e2:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a8e6:	52                   	push   edx
c000a8e7:	50                   	push   eax
c000a8e8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a8ec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a8f0:	e8 a6 c9 01 00       	call   c002729b <__adddf3>
c000a8f5:	59                   	pop    ecx
c000a8f6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a8fa:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a8fe:	ff b3 44 08 00 00    	push   DWORD PTR [ebx+0x844]
c000a904:	e8 06 da 01 00       	call   c002830f <__extendsfdf2>
c000a909:	83 c4 10             	add    esp,0x10
c000a90c:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a910:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a914:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a918:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a91c:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a920:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a924:	e8 ef cf 01 00       	call   c0027918 <__muldf3>
c000a929:	83 c4 10             	add    esp,0x10
c000a92c:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a930:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a934:	52                   	push   edx
c000a935:	50                   	push   eax
c000a936:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a93a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a93e:	e8 58 c9 01 00       	call   c002729b <__adddf3>
c000a943:	59                   	pop    ecx
c000a944:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000a948:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000a94c:	ff b3 48 08 00 00    	push   DWORD PTR [ebx+0x848]
c000a952:	e8 b8 d9 01 00       	call   c002830f <__extendsfdf2>
c000a957:	83 c4 10             	add    esp,0x10
c000a95a:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a95e:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a962:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a966:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a96a:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a96e:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a972:	e8 a1 cf 01 00       	call   c0027918 <__muldf3>
c000a977:	83 c4 10             	add    esp,0x10
c000a97a:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a97e:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a982:	52                   	push   edx
c000a983:	50                   	push   eax
c000a984:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000a988:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000a98c:	e8 0a c9 01 00       	call   c002729b <__adddf3>
c000a991:	59                   	pop    ecx
c000a992:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c000a996:	89 54 24 78          	mov    DWORD PTR [esp+0x78],edx
c000a99a:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c000a9a0:	e8 6a d9 01 00       	call   c002830f <__extendsfdf2>
c000a9a5:	83 c4 10             	add    esp,0x10
c000a9a8:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a9ac:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a9b0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9b4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9b8:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9bc:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9c0:	e8 53 cf 01 00       	call   c0027918 <__muldf3>
c000a9c5:	83 c4 10             	add    esp,0x10
c000a9c8:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a9cc:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a9d0:	52                   	push   edx
c000a9d1:	50                   	push   eax
c000a9d2:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a9d6:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a9da:	e8 bc c8 01 00       	call   c002729b <__adddf3>
c000a9df:	59                   	pop    ecx
c000a9e0:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c000a9e4:	89 54 24 70          	mov    DWORD PTR [esp+0x70],edx
c000a9e8:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c000a9ee:	e8 1c d9 01 00       	call   c002830f <__extendsfdf2>
c000a9f3:	83 c4 10             	add    esp,0x10
c000a9f6:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a9fa:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a9fe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa02:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa06:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa0a:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa0e:	e8 05 cf 01 00       	call   c0027918 <__muldf3>
c000aa13:	83 c4 10             	add    esp,0x10
c000aa16:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa1a:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa1e:	52                   	push   edx
c000aa1f:	50                   	push   eax
c000aa20:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000aa24:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000aa28:	e8 6e c8 01 00       	call   c002729b <__adddf3>
c000aa2d:	59                   	pop    ecx
c000aa2e:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000aa32:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000aa36:	ff b3 54 08 00 00    	push   DWORD PTR [ebx+0x854]
c000aa3c:	e8 ce d8 01 00       	call   c002830f <__extendsfdf2>
c000aa41:	83 c4 10             	add    esp,0x10
c000aa44:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa48:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa4c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa50:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa54:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa58:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa5c:	e8 b7 ce 01 00       	call   c0027918 <__muldf3>
c000aa61:	83 c4 10             	add    esp,0x10
c000aa64:	83 eb 18             	sub    ebx,0x18
c000aa67:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa6b:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa6f:	52                   	push   edx
c000aa70:	50                   	push   eax
c000aa71:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000aa75:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000aa79:	e8 1d c8 01 00       	call   c002729b <__adddf3>
c000aa7e:	59                   	pop    ecx
c000aa7f:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000aa83:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c000aa87:	ff b3 70 08 00 00    	push   DWORD PTR [ebx+0x870]
c000aa8d:	e8 7d d8 01 00       	call   c002830f <__extendsfdf2>
c000aa92:	83 c4 10             	add    esp,0x10
c000aa95:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa99:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa9d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aaa1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aaa5:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aaa9:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aaad:	e8 66 ce 01 00       	call   c0027918 <__muldf3>
c000aab2:	83 c4 10             	add    esp,0x10
c000aab5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000aab9:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000aabd:	52                   	push   edx
c000aabe:	50                   	push   eax
c000aabf:	57                   	push   edi
c000aac0:	56                   	push   esi
c000aac1:	e8 d5 c7 01 00       	call   c002729b <__adddf3>
c000aac6:	83 c4 10             	add    esp,0x10
c000aac9:	89 c6                	mov    esi,eax
c000aacb:	2b 2c 24             	sub    ebp,DWORD PTR [esp]
c000aace:	89 d7                	mov    edi,edx
c000aad0:	85 ed                	test   ebp,ebp
c000aad2:	0f 8f 8d fd ff ff    	jg     c000a865 <calc_output_hex+0x363>
c000aad8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000aadc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000aae0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000aae4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000aae8:	e8 ae c7 01 00       	call   c002729b <__adddf3>
c000aaed:	83 c4 10             	add    esp,0x10
c000aaf0:	89 04 24             	mov    DWORD PTR [esp],eax
c000aaf3:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aaf7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aafb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aaff:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab03:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab07:	e8 0c ce 01 00       	call   c0027918 <__muldf3>
c000ab0c:	59                   	pop    ecx
c000ab0d:	5b                   	pop    ebx
c000ab0e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ab12:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ab16:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab1a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab1e:	e8 c8 d6 01 00       	call   c00281eb <__truncdfsf2>
c000ab23:	83 c4 10             	add    esp,0x10
c000ab26:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ab2d:	89 03                	mov    DWORD PTR [ebx],eax
c000ab2f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000ab33:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000ab37:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ab3b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ab3f:	e8 57 c7 01 00       	call   c002729b <__adddf3>
c000ab44:	83 c4 10             	add    esp,0x10
c000ab47:	89 04 24             	mov    DWORD PTR [esp],eax
c000ab4a:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ab4e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab52:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab56:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab5a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab5e:	e8 b5 cd 01 00       	call   c0027918 <__muldf3>
c000ab63:	5d                   	pop    ebp
c000ab64:	59                   	pop    ecx
c000ab65:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ab69:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ab6d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab71:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab75:	e8 71 d6 01 00       	call   c00281eb <__truncdfsf2>
c000ab7a:	83 c4 10             	add    esp,0x10
c000ab7d:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ab84:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000ab87:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000ab8b:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000ab8f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ab93:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ab97:	e8 ff c6 01 00       	call   c002729b <__adddf3>
c000ab9c:	83 c4 10             	add    esp,0x10
c000ab9f:	89 04 24             	mov    DWORD PTR [esp],eax
c000aba2:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aba6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abaa:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abae:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abb2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abb6:	e8 5d cd 01 00       	call   c0027918 <__muldf3>
c000abbb:	5b                   	pop    ebx
c000abbc:	5d                   	pop    ebp
c000abbd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000abc1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000abc5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abc9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abcd:	e8 19 d6 01 00       	call   c00281eb <__truncdfsf2>
c000abd2:	83 c4 10             	add    esp,0x10
c000abd5:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000abdc:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000abdf:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000abe3:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000abe7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000abeb:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000abef:	e8 a7 c6 01 00       	call   c002729b <__adddf3>
c000abf4:	83 c4 10             	add    esp,0x10
c000abf7:	89 04 24             	mov    DWORD PTR [esp],eax
c000abfa:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000abfe:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac02:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac06:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac0a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac0e:	e8 05 cd 01 00       	call   c0027918 <__muldf3>
c000ac13:	59                   	pop    ecx
c000ac14:	5b                   	pop    ebx
c000ac15:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ac19:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ac1d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac21:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac25:	e8 c1 d5 01 00       	call   c00281eb <__truncdfsf2>
c000ac2a:	83 c4 10             	add    esp,0x10
c000ac2d:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ac34:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000ac37:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ac3b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ac3f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ac43:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ac47:	e8 4f c6 01 00       	call   c002729b <__adddf3>
c000ac4c:	83 c4 10             	add    esp,0x10
c000ac4f:	89 04 24             	mov    DWORD PTR [esp],eax
c000ac52:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ac56:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac5a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac5e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac62:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac66:	e8 ad cc 01 00       	call   c0027918 <__muldf3>
c000ac6b:	5d                   	pop    ebp
c000ac6c:	59                   	pop    ecx
c000ac6d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ac71:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ac75:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac79:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac7d:	e8 69 d5 01 00       	call   c00281eb <__truncdfsf2>
c000ac82:	83 c4 10             	add    esp,0x10
c000ac85:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ac8c:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000ac8f:	57                   	push   edi
c000ac90:	56                   	push   esi
c000ac91:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000ac95:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000ac99:	e8 fd c5 01 00       	call   c002729b <__adddf3>
c000ac9e:	83 c4 10             	add    esp,0x10
c000aca1:	89 04 24             	mov    DWORD PTR [esp],eax
c000aca4:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aca8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acac:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acb0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acb4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acb8:	e8 5b cc 01 00       	call   c0027918 <__muldf3>
c000acbd:	5b                   	pop    ebx
c000acbe:	5e                   	pop    esi
c000acbf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000acc3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000acc7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000accb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000accf:	e8 17 d5 01 00       	call   c00281eb <__truncdfsf2>
c000acd4:	8b bc 24 b8 00 00 00 	mov    edi,DWORD PTR [esp+0xb8]
c000acdb:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000acde:	81 c4 9c 00 00 00    	add    esp,0x9c
c000ace4:	5b                   	pop    ebx
c000ace5:	5e                   	pop    esi
c000ace6:	5f                   	pop    edi
c000ace7:	5d                   	pop    ebp
c000ace8:	c3                   	ret    

c000ace9 <sinc_reset>:
c000ace9:	56                   	push   esi
c000acea:	53                   	push   ebx
c000aceb:	51                   	push   ecx
c000acec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000acf0:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000acf3:	85 db                	test   ebx,ebx
c000acf5:	74 59                	je     c000ad50 <sinc_reset+0x67>
c000acf7:	31 d2                	xor    edx,edx
c000acf9:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c000ad00:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c000ad03:	89 53 24             	mov    DWORD PTR [ebx+0x24],edx
c000ad06:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000ad0d:	c7 43 3c ff ff ff ff 	mov    DWORD PTR [ebx+0x3c],0xffffffff
c000ad14:	31 c0                	xor    eax,eax
c000ad16:	8d b3 44 08 00 00    	lea    esi,[ebx+0x844]
c000ad1c:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c000ad1f:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c000ad22:	52                   	push   edx
c000ad23:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ad26:	c1 e0 02             	shl    eax,0x2
c000ad29:	50                   	push   eax
c000ad2a:	6a 00                	push   0x0
c000ad2c:	56                   	push   esi
c000ad2d:	e8 1e 5a ff ff       	call   c0000750 <memset>
c000ad32:	83 c4 0c             	add    esp,0xc
c000ad35:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000ad38:	c1 e0 02             	shl    eax,0x2
c000ad3b:	50                   	push   eax
c000ad3c:	68 aa 00 00 00       	push   0xaa
c000ad41:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ad44:	8d 04 86             	lea    eax,[esi+eax*4]
c000ad47:	50                   	push   eax
c000ad48:	e8 03 5a ff ff       	call   c0000750 <memset>
c000ad4d:	83 c4 10             	add    esp,0x10
c000ad50:	58                   	pop    eax
c000ad51:	5b                   	pop    ebx
c000ad52:	5e                   	pop    esi
c000ad53:	c3                   	ret    

c000ad54 <calc_output_multi>:
c000ad54:	55                   	push   ebp
c000ad55:	57                   	push   edi
c000ad56:	56                   	push   esi
c000ad57:	89 c6                	mov    esi,eax
c000ad59:	53                   	push   ebx
c000ad5a:	83 ec 4c             	sub    esp,0x4c
c000ad5d:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000ad61:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000ad65:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000ad69:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c000ad6d:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c000ad71:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ad75:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ad79:	8d 46 44             	lea    eax,[esi+0x44]
c000ad7c:	89 04 24             	mov    DWORD PTR [esp],eax
c000ad7f:	8d 86 44 04 00 00    	lea    eax,[esi+0x444]
c000ad85:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000ad89:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c000ad8c:	e8 0f eb ff ff       	call   c00098a0 <int_to_fp>
c000ad91:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000ad94:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000ad98:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000ad9c:	99                   	cdq    
c000ad9d:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000ada1:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000ada5:	0f af d0             	imul   edx,eax
c000ada8:	0f af c3             	imul   eax,ebx
c000adab:	03 54 24 28          	add    edx,DWORD PTR [esp+0x28]
c000adaf:	29 c1                	sub    ecx,eax
c000adb1:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000adb5:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000adb9:	8d 04 dd 00 00 00 00 	lea    eax,[ebx*8+0x0]
c000adc0:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000adc4:	57                   	push   edi
c000adc5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000adc9:	6a 00                	push   0x0
c000adcb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000adcf:	e8 7c 59 ff ff       	call   c0000750 <memset>
c000add4:	83 c4 10             	add    esp,0x10
c000add7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000addb:	89 df                	mov    edi,ebx
c000addd:	e8 cc ea ff ff       	call   c00098ae <fp_to_double>
c000ade2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ade6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000adea:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000adee:	e8 b1 ea ff ff       	call   c00098a4 <fp_to_int>
c000adf3:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000adf6:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000adf9:	51                   	push   ecx
c000adfa:	51                   	push   ecx
c000adfb:	55                   	push   ebp
c000adfc:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000ae00:	e8 2b be 01 00       	call   c0026c30 <__subsf3>
c000ae05:	89 04 24             	mov    DWORD PTR [esp],eax
c000ae08:	e8 02 d5 01 00       	call   c002830f <__extendsfdf2>
c000ae0d:	83 c4 10             	add    esp,0x10
c000ae10:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae14:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae18:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae1c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae20:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae24:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae28:	e8 eb ca 01 00       	call   c0027918 <__muldf3>
c000ae2d:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000ae30:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ae34:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ae38:	e8 d2 d4 01 00       	call   c002830f <__extendsfdf2>
c000ae3d:	83 c4 10             	add    esp,0x10
c000ae40:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae44:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae48:	52                   	push   edx
c000ae49:	50                   	push   eax
c000ae4a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ae4e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ae52:	e8 44 c4 01 00       	call   c002729b <__adddf3>
c000ae57:	83 c4 10             	add    esp,0x10
c000ae5a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ae5e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ae62:	89 f8                	mov    eax,edi
c000ae64:	b9 08 00 00 00       	mov    ecx,0x8
c000ae69:	99                   	cdq    
c000ae6a:	f7 f9                	idiv   ecx
c000ae6c:	4a                   	dec    edx
c000ae6d:	83 fa 06             	cmp    edx,0x6
c000ae70:	77 07                	ja     c000ae79 <calc_output_multi+0x125>
c000ae72:	ff 24 95 e4 9b 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd641c]
c000ae79:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000ae7c:	4f                   	dec    edi
c000ae7d:	83 ec 0c             	sub    esp,0xc
c000ae80:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000ae83:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ae87:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000ae8e:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000ae92:	e8 78 d4 01 00       	call   c002830f <__extendsfdf2>
c000ae97:	83 c4 10             	add    esp,0x10
c000ae9a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae9e:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aea2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aea6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aeaa:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aeae:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aeb2:	e8 61 ca 01 00       	call   c0027918 <__muldf3>
c000aeb7:	83 c4 10             	add    esp,0x10
c000aeba:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aebe:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aec2:	52                   	push   edx
c000aec3:	50                   	push   eax
c000aec4:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000aec7:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000aeca:	e8 cc c3 01 00       	call   c002729b <__adddf3>
c000aecf:	83 c4 10             	add    esp,0x10
c000aed2:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000aed5:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000aed8:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000aedb:	4f                   	dec    edi
c000aedc:	83 ec 0c             	sub    esp,0xc
c000aedf:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000aee2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000aee6:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000aeed:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000aef1:	e8 19 d4 01 00       	call   c002830f <__extendsfdf2>
c000aef6:	83 c4 10             	add    esp,0x10
c000aef9:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aefd:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af01:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af05:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af09:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af0d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af11:	e8 02 ca 01 00       	call   c0027918 <__muldf3>
c000af16:	83 c4 10             	add    esp,0x10
c000af19:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af1d:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af21:	52                   	push   edx
c000af22:	50                   	push   eax
c000af23:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000af26:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000af29:	e8 6d c3 01 00       	call   c002729b <__adddf3>
c000af2e:	83 c4 10             	add    esp,0x10
c000af31:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000af34:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000af37:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000af3a:	4f                   	dec    edi
c000af3b:	83 ec 0c             	sub    esp,0xc
c000af3e:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000af41:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000af45:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000af4c:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000af50:	e8 ba d3 01 00       	call   c002830f <__extendsfdf2>
c000af55:	83 c4 10             	add    esp,0x10
c000af58:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af5c:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af60:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af64:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af68:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af6c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af70:	e8 a3 c9 01 00       	call   c0027918 <__muldf3>
c000af75:	83 c4 10             	add    esp,0x10
c000af78:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af7c:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af80:	52                   	push   edx
c000af81:	50                   	push   eax
c000af82:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000af85:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000af88:	e8 0e c3 01 00       	call   c002729b <__adddf3>
c000af8d:	83 c4 10             	add    esp,0x10
c000af90:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000af93:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000af96:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000af99:	4f                   	dec    edi
c000af9a:	83 ec 0c             	sub    esp,0xc
c000af9d:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000afa0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000afa4:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000afab:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000afaf:	e8 5b d3 01 00       	call   c002830f <__extendsfdf2>
c000afb4:	83 c4 10             	add    esp,0x10
c000afb7:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000afbb:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000afbf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000afc3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000afc7:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000afcb:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000afcf:	e8 44 c9 01 00       	call   c0027918 <__muldf3>
c000afd4:	83 c4 10             	add    esp,0x10
c000afd7:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000afdb:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000afdf:	52                   	push   edx
c000afe0:	50                   	push   eax
c000afe1:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000afe4:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000afe7:	e8 af c2 01 00       	call   c002729b <__adddf3>
c000afec:	83 c4 10             	add    esp,0x10
c000afef:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000aff2:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000aff5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000aff8:	4f                   	dec    edi
c000aff9:	83 ec 0c             	sub    esp,0xc
c000affc:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000afff:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b003:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b00a:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b00e:	e8 fc d2 01 00       	call   c002830f <__extendsfdf2>
c000b013:	83 c4 10             	add    esp,0x10
c000b016:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b01a:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b01e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b022:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b026:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b02a:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b02e:	e8 e5 c8 01 00       	call   c0027918 <__muldf3>
c000b033:	83 c4 10             	add    esp,0x10
c000b036:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b03a:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b03e:	52                   	push   edx
c000b03f:	50                   	push   eax
c000b040:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b043:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b046:	e8 50 c2 01 00       	call   c002729b <__adddf3>
c000b04b:	83 c4 10             	add    esp,0x10
c000b04e:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b051:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b054:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b057:	4f                   	dec    edi
c000b058:	83 ec 0c             	sub    esp,0xc
c000b05b:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b05e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b062:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b069:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b06d:	e8 9d d2 01 00       	call   c002830f <__extendsfdf2>
c000b072:	83 c4 10             	add    esp,0x10
c000b075:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b079:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b07d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b081:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b085:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b089:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b08d:	e8 86 c8 01 00       	call   c0027918 <__muldf3>
c000b092:	83 c4 10             	add    esp,0x10
c000b095:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b099:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b09d:	52                   	push   edx
c000b09e:	50                   	push   eax
c000b09f:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b0a2:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b0a5:	e8 f1 c1 01 00       	call   c002729b <__adddf3>
c000b0aa:	83 c4 10             	add    esp,0x10
c000b0ad:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b0b0:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b0b3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b0b6:	4f                   	dec    edi
c000b0b7:	83 ec 0c             	sub    esp,0xc
c000b0ba:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b0bd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b0c1:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b0c8:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b0cc:	e8 3e d2 01 00       	call   c002830f <__extendsfdf2>
c000b0d1:	83 c4 10             	add    esp,0x10
c000b0d4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b0d8:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b0dc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0e0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0e4:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b0e8:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b0ec:	e8 27 c8 01 00       	call   c0027918 <__muldf3>
c000b0f1:	83 c4 10             	add    esp,0x10
c000b0f4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b0f8:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b0fc:	52                   	push   edx
c000b0fd:	50                   	push   eax
c000b0fe:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b101:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b104:	e8 92 c1 01 00       	call   c002729b <__adddf3>
c000b109:	83 c4 10             	add    esp,0x10
c000b10c:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b10f:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b112:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b115:	4f                   	dec    edi
c000b116:	83 ec 0c             	sub    esp,0xc
c000b119:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b11c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b120:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b127:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b12b:	e8 df d1 01 00       	call   c002830f <__extendsfdf2>
c000b130:	83 c4 10             	add    esp,0x10
c000b133:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b137:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b13b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b13f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b143:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b147:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b14b:	e8 c8 c7 01 00       	call   c0027918 <__muldf3>
c000b150:	83 c4 10             	add    esp,0x10
c000b153:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b157:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b15b:	52                   	push   edx
c000b15c:	50                   	push   eax
c000b15d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b160:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b163:	e8 33 c1 01 00       	call   c002729b <__adddf3>
c000b168:	83 c4 10             	add    esp,0x10
c000b16b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b16e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b171:	85 ff                	test   edi,edi
c000b173:	0f 8f e9 fc ff ff    	jg     c000ae62 <calc_output_multi+0x10e>
c000b179:	01 5c 24 08          	add    DWORD PTR [esp+0x8],ebx
c000b17d:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b181:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000b185:	0f 89 4c fc ff ff    	jns    c000add7 <calc_output_multi+0x83>
c000b18b:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c000b18f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000b193:	29 c8                	sub    eax,ecx
c000b195:	99                   	cdq    
c000b196:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000b19a:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000b19e:	0f af d0             	imul   edx,eax
c000b1a1:	40                   	inc    eax
c000b1a2:	01 d1                	add    ecx,edx
c000b1a4:	0f af c3             	imul   eax,ebx
c000b1a7:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000b1ab:	03 46 34             	add    eax,DWORD PTR [esi+0x34]
c000b1ae:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b1b2:	55                   	push   ebp
c000b1b3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b1b7:	6a 00                	push   0x0
c000b1b9:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b1bd:	e8 8e 55 ff ff       	call   c0000750 <memset>
c000b1c2:	83 c4 10             	add    esp,0x10
c000b1c5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b1c9:	e8 e0 e6 ff ff       	call   c00098ae <fp_to_double>
c000b1ce:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b1d2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b1d6:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b1da:	e8 c5 e6 ff ff       	call   c00098a4 <fp_to_int>
c000b1df:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000b1e2:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000b1e5:	57                   	push   edi
c000b1e6:	57                   	push   edi
c000b1e7:	89 df                	mov    edi,ebx
c000b1e9:	55                   	push   ebp
c000b1ea:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000b1ee:	e8 3d ba 01 00       	call   c0026c30 <__subsf3>
c000b1f3:	89 04 24             	mov    DWORD PTR [esp],eax
c000b1f6:	e8 14 d1 01 00       	call   c002830f <__extendsfdf2>
c000b1fb:	83 c4 10             	add    esp,0x10
c000b1fe:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b202:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b206:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b20a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b20e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b212:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b216:	e8 fd c6 01 00       	call   c0027918 <__muldf3>
c000b21b:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000b21e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b222:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b226:	e8 e4 d0 01 00       	call   c002830f <__extendsfdf2>
c000b22b:	83 c4 10             	add    esp,0x10
c000b22e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b232:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b236:	52                   	push   edx
c000b237:	50                   	push   eax
c000b238:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b23c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b240:	e8 56 c0 01 00       	call   c002729b <__adddf3>
c000b245:	83 c4 10             	add    esp,0x10
c000b248:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b24c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b250:	89 f8                	mov    eax,edi
c000b252:	b9 08 00 00 00       	mov    ecx,0x8
c000b257:	99                   	cdq    
c000b258:	f7 f9                	idiv   ecx
c000b25a:	4a                   	dec    edx
c000b25b:	83 fa 06             	cmp    edx,0x6
c000b25e:	77 07                	ja     c000b267 <calc_output_multi+0x513>
c000b260:	ff 24 95 00 9c 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd6400]
c000b267:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b26b:	4f                   	dec    edi
c000b26c:	83 ec 0c             	sub    esp,0xc
c000b26f:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b272:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b276:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b27d:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b281:	e8 89 d0 01 00       	call   c002830f <__extendsfdf2>
c000b286:	83 c4 10             	add    esp,0x10
c000b289:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b28d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b291:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b295:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b299:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b29d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b2a1:	e8 72 c6 01 00       	call   c0027918 <__muldf3>
c000b2a6:	83 c4 10             	add    esp,0x10
c000b2a9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b2ad:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b2b1:	52                   	push   edx
c000b2b2:	50                   	push   eax
c000b2b3:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b2b6:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b2b9:	e8 dd bf 01 00       	call   c002729b <__adddf3>
c000b2be:	83 c4 10             	add    esp,0x10
c000b2c1:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b2c4:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b2c7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b2cb:	4f                   	dec    edi
c000b2cc:	83 ec 0c             	sub    esp,0xc
c000b2cf:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b2d2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b2d6:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b2dd:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b2e1:	e8 29 d0 01 00       	call   c002830f <__extendsfdf2>
c000b2e6:	83 c4 10             	add    esp,0x10
c000b2e9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b2ed:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b2f1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2f5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2f9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b2fd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b301:	e8 12 c6 01 00       	call   c0027918 <__muldf3>
c000b306:	83 c4 10             	add    esp,0x10
c000b309:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b30d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b311:	52                   	push   edx
c000b312:	50                   	push   eax
c000b313:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b316:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b319:	e8 7d bf 01 00       	call   c002729b <__adddf3>
c000b31e:	83 c4 10             	add    esp,0x10
c000b321:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b324:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b327:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b32b:	4f                   	dec    edi
c000b32c:	83 ec 0c             	sub    esp,0xc
c000b32f:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b332:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b336:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b33d:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b341:	e8 c9 cf 01 00       	call   c002830f <__extendsfdf2>
c000b346:	83 c4 10             	add    esp,0x10
c000b349:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b34d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b351:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b355:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b359:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b35d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b361:	e8 b2 c5 01 00       	call   c0027918 <__muldf3>
c000b366:	83 c4 10             	add    esp,0x10
c000b369:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b36d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b371:	52                   	push   edx
c000b372:	50                   	push   eax
c000b373:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b376:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b379:	e8 1d bf 01 00       	call   c002729b <__adddf3>
c000b37e:	83 c4 10             	add    esp,0x10
c000b381:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b384:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b387:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b38b:	4f                   	dec    edi
c000b38c:	83 ec 0c             	sub    esp,0xc
c000b38f:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b392:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b396:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b39d:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b3a1:	e8 69 cf 01 00       	call   c002830f <__extendsfdf2>
c000b3a6:	83 c4 10             	add    esp,0x10
c000b3a9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b3ad:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b3b1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3b5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3b9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b3bd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b3c1:	e8 52 c5 01 00       	call   c0027918 <__muldf3>
c000b3c6:	83 c4 10             	add    esp,0x10
c000b3c9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b3cd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b3d1:	52                   	push   edx
c000b3d2:	50                   	push   eax
c000b3d3:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b3d6:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b3d9:	e8 bd be 01 00       	call   c002729b <__adddf3>
c000b3de:	83 c4 10             	add    esp,0x10
c000b3e1:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b3e4:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b3e7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b3eb:	4f                   	dec    edi
c000b3ec:	83 ec 0c             	sub    esp,0xc
c000b3ef:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b3f2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b3f6:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b3fd:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b401:	e8 09 cf 01 00       	call   c002830f <__extendsfdf2>
c000b406:	83 c4 10             	add    esp,0x10
c000b409:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b40d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b411:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b415:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b419:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b41d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b421:	e8 f2 c4 01 00       	call   c0027918 <__muldf3>
c000b426:	83 c4 10             	add    esp,0x10
c000b429:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b42d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b431:	52                   	push   edx
c000b432:	50                   	push   eax
c000b433:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b436:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b439:	e8 5d be 01 00       	call   c002729b <__adddf3>
c000b43e:	83 c4 10             	add    esp,0x10
c000b441:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b444:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b447:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b44b:	4f                   	dec    edi
c000b44c:	83 ec 0c             	sub    esp,0xc
c000b44f:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b452:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b456:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b45d:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b461:	e8 a9 ce 01 00       	call   c002830f <__extendsfdf2>
c000b466:	83 c4 10             	add    esp,0x10
c000b469:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b46d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b471:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b475:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b479:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b47d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b481:	e8 92 c4 01 00       	call   c0027918 <__muldf3>
c000b486:	83 c4 10             	add    esp,0x10
c000b489:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b48d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b491:	52                   	push   edx
c000b492:	50                   	push   eax
c000b493:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b496:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b499:	e8 fd bd 01 00       	call   c002729b <__adddf3>
c000b49e:	83 c4 10             	add    esp,0x10
c000b4a1:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b4a4:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b4a7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b4ab:	4f                   	dec    edi
c000b4ac:	83 ec 0c             	sub    esp,0xc
c000b4af:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b4b2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b4b6:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b4bd:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b4c1:	e8 49 ce 01 00       	call   c002830f <__extendsfdf2>
c000b4c6:	83 c4 10             	add    esp,0x10
c000b4c9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b4cd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b4d1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4d5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4d9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b4dd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b4e1:	e8 32 c4 01 00       	call   c0027918 <__muldf3>
c000b4e6:	83 c4 10             	add    esp,0x10
c000b4e9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b4ed:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b4f1:	52                   	push   edx
c000b4f2:	50                   	push   eax
c000b4f3:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b4f6:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b4f9:	e8 9d bd 01 00       	call   c002729b <__adddf3>
c000b4fe:	83 c4 10             	add    esp,0x10
c000b501:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b504:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b507:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b50b:	4f                   	dec    edi
c000b50c:	83 ec 0c             	sub    esp,0xc
c000b50f:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b512:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b516:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b51d:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b521:	e8 e9 cd 01 00       	call   c002830f <__extendsfdf2>
c000b526:	83 c4 10             	add    esp,0x10
c000b529:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b52d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b531:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b535:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b539:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b53d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b541:	e8 d2 c3 01 00       	call   c0027918 <__muldf3>
c000b546:	83 c4 10             	add    esp,0x10
c000b549:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b54d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b551:	52                   	push   edx
c000b552:	50                   	push   eax
c000b553:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b556:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b559:	e8 3d bd 01 00       	call   c002729b <__adddf3>
c000b55e:	83 c4 10             	add    esp,0x10
c000b561:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b564:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b567:	85 ff                	test   edi,edi
c000b569:	0f 8f e1 fc ff ff    	jg     c000b250 <calc_output_multi+0x4fc>
c000b56f:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b573:	29 5c 24 08          	sub    DWORD PTR [esp+0x8],ebx
c000b577:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000b57b:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000b580:	0f 8f 3f fc ff ff    	jg     c000b1c5 <calc_output_multi+0x471>
c000b586:	be 08 00 00 00       	mov    esi,0x8
c000b58b:	89 d8                	mov    eax,ebx
c000b58d:	99                   	cdq    
c000b58e:	f7 fe                	idiv   esi
c000b590:	4a                   	dec    edx
c000b591:	83 fa 06             	cmp    edx,0x6
c000b594:	77 07                	ja     c000b59d <calc_output_multi+0x849>
c000b596:	ff 24 95 1c 9c 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd63e4]
c000b59d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b5a1:	4b                   	dec    ebx
c000b5a2:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b5a6:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b5a9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b5ad:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b5b1:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b5b4:	e8 e2 bc 01 00       	call   c002729b <__adddf3>
c000b5b9:	83 c4 10             	add    esp,0x10
c000b5bc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b5c0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b5c4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b5c8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b5cc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5d0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5d4:	e8 3f c3 01 00       	call   c0027918 <__muldf3>
c000b5d9:	5d                   	pop    ebp
c000b5da:	59                   	pop    ecx
c000b5db:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b5df:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b5e3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5e7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5eb:	e8 fb cb 01 00       	call   c00281eb <__truncdfsf2>
c000b5f0:	83 c4 10             	add    esp,0x10
c000b5f3:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b5f7:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b5fa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b5fe:	4b                   	dec    ebx
c000b5ff:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b603:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b606:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b60a:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b60e:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b611:	e8 85 bc 01 00       	call   c002729b <__adddf3>
c000b616:	83 c4 10             	add    esp,0x10
c000b619:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b61d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b621:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b625:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b629:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b62d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b631:	e8 e2 c2 01 00       	call   c0027918 <__muldf3>
c000b636:	59                   	pop    ecx
c000b637:	5f                   	pop    edi
c000b638:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b63c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b640:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b644:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b648:	e8 9e cb 01 00       	call   c00281eb <__truncdfsf2>
c000b64d:	83 c4 10             	add    esp,0x10
c000b650:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b654:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b657:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b65b:	4b                   	dec    ebx
c000b65c:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b660:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b663:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b667:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b66b:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b66e:	e8 28 bc 01 00       	call   c002729b <__adddf3>
c000b673:	83 c4 10             	add    esp,0x10
c000b676:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b67a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b67e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b682:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b686:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b68a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b68e:	e8 85 c2 01 00       	call   c0027918 <__muldf3>
c000b693:	5f                   	pop    edi
c000b694:	5d                   	pop    ebp
c000b695:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b699:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b69d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6a1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6a5:	e8 41 cb 01 00       	call   c00281eb <__truncdfsf2>
c000b6aa:	83 c4 10             	add    esp,0x10
c000b6ad:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b6b1:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b6b4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b6b8:	4b                   	dec    ebx
c000b6b9:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b6bd:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b6c0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b6c4:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b6c8:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b6cb:	e8 cb bb 01 00       	call   c002729b <__adddf3>
c000b6d0:	83 c4 10             	add    esp,0x10
c000b6d3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b6d7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b6db:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b6df:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b6e3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6e7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6eb:	e8 28 c2 01 00       	call   c0027918 <__muldf3>
c000b6f0:	5d                   	pop    ebp
c000b6f1:	59                   	pop    ecx
c000b6f2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b6f6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b6fa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6fe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b702:	e8 e4 ca 01 00       	call   c00281eb <__truncdfsf2>
c000b707:	83 c4 10             	add    esp,0x10
c000b70a:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b70e:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b711:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b715:	4b                   	dec    ebx
c000b716:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b71a:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b71d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b721:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b725:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b728:	e8 6e bb 01 00       	call   c002729b <__adddf3>
c000b72d:	83 c4 10             	add    esp,0x10
c000b730:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b734:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b738:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b73c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b740:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b744:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b748:	e8 cb c1 01 00       	call   c0027918 <__muldf3>
c000b74d:	59                   	pop    ecx
c000b74e:	5f                   	pop    edi
c000b74f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b753:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b757:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b75b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b75f:	e8 87 ca 01 00       	call   c00281eb <__truncdfsf2>
c000b764:	83 c4 10             	add    esp,0x10
c000b767:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b76b:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b76e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b772:	4b                   	dec    ebx
c000b773:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b777:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b77a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b77e:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b782:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b785:	e8 11 bb 01 00       	call   c002729b <__adddf3>
c000b78a:	83 c4 10             	add    esp,0x10
c000b78d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b791:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b795:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b799:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b79d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7a1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7a5:	e8 6e c1 01 00       	call   c0027918 <__muldf3>
c000b7aa:	5f                   	pop    edi
c000b7ab:	5d                   	pop    ebp
c000b7ac:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b7b0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b7b4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7b8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7bc:	e8 2a ca 01 00       	call   c00281eb <__truncdfsf2>
c000b7c1:	83 c4 10             	add    esp,0x10
c000b7c4:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b7c8:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b7cb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b7cf:	4b                   	dec    ebx
c000b7d0:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b7d4:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b7d7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b7db:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b7df:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b7e2:	e8 b4 ba 01 00       	call   c002729b <__adddf3>
c000b7e7:	83 c4 10             	add    esp,0x10
c000b7ea:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b7ee:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b7f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b7f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b7fa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7fe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b802:	e8 11 c1 01 00       	call   c0027918 <__muldf3>
c000b807:	5d                   	pop    ebp
c000b808:	59                   	pop    ecx
c000b809:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b80d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b811:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b815:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b819:	e8 cd c9 01 00       	call   c00281eb <__truncdfsf2>
c000b81e:	83 c4 10             	add    esp,0x10
c000b821:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b825:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b828:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b82c:	4b                   	dec    ebx
c000b82d:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b831:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b834:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b838:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b83c:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b83f:	e8 57 ba 01 00       	call   c002729b <__adddf3>
c000b844:	83 c4 10             	add    esp,0x10
c000b847:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b84b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b84f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b853:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b857:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b85b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b85f:	e8 b4 c0 01 00       	call   c0027918 <__muldf3>
c000b864:	59                   	pop    ecx
c000b865:	5f                   	pop    edi
c000b866:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b86a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b86e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b872:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b876:	e8 70 c9 01 00       	call   c00281eb <__truncdfsf2>
c000b87b:	83 c4 10             	add    esp,0x10
c000b87e:	85 db                	test   ebx,ebx
c000b880:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c000b884:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c000b887:	0f 8f fe fc ff ff    	jg     c000b58b <calc_output_multi+0x837>
c000b88d:	83 c4 4c             	add    esp,0x4c
c000b890:	5b                   	pop    ebx
c000b891:	5e                   	pop    esi
c000b892:	5f                   	pop    edi
c000b893:	5d                   	pop    ebp
c000b894:	c3                   	ret    

c000b895 <double_to_fp>:
c000b895:	83 ec 0c             	sub    esp,0xc
c000b898:	68 00 00 b0 40       	push   0x40b00000
c000b89d:	6a 00                	push   0x0
c000b89f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8a3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8a7:	e8 6c c0 01 00       	call   c0027918 <__muldf3>
c000b8ac:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b8b0:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b8b4:	83 c4 1c             	add    esp,0x1c
c000b8b7:	e9 e4 ca 01 00       	jmp    c00283a0 <lrint>

c000b8bc <prepare_data>:
c000b8bc:	55                   	push   ebp
c000b8bd:	57                   	push   edi
c000b8be:	56                   	push   esi
c000b8bf:	53                   	push   ebx
c000b8c0:	83 ec 1c             	sub    esp,0x1c
c000b8c3:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000b8c7:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000b8cb:	83 7b 3c 00          	cmp    DWORD PTR [ebx+0x3c],0x0
c000b8cf:	0f 89 57 01 00 00    	jns    c000ba2c <prepare_data+0x170>
c000b8d5:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000b8d8:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b8db:	85 d2                	test   edx,edx
c000b8dd:	75 0d                	jne    c000b8ec <prepare_data+0x30>
c000b8df:	8d 14 36             	lea    edx,[esi+esi*1]
c000b8e2:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000b8e5:	29 d0                	sub    eax,edx
c000b8e7:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b8ea:	eb 44                	jmp    c000b930 <prepare_data+0x74>
c000b8ec:	8b 7b 38             	mov    edi,DWORD PTR [ebx+0x38]
c000b8ef:	8d 0c 37             	lea    ecx,[edi+esi*1]
c000b8f2:	03 4b 04             	add    ecx,DWORD PTR [ebx+0x4]
c000b8f5:	39 c1                	cmp    ecx,eax
c000b8f7:	7d 04                	jge    c000b8fd <prepare_data+0x41>
c000b8f9:	29 d0                	sub    eax,edx
c000b8fb:	eb 2d                	jmp    c000b92a <prepare_data+0x6e>
c000b8fd:	8d 83 44 08 00 00    	lea    eax,[ebx+0x844]
c000b903:	29 d7                	sub    edi,edx
c000b905:	01 f7                	add    edi,esi
c000b907:	51                   	push   ecx
c000b908:	29 f2                	sub    edx,esi
c000b90a:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c000b911:	8d 14 90             	lea    edx,[eax+edx*4]
c000b914:	51                   	push   ecx
c000b915:	52                   	push   edx
c000b916:	50                   	push   eax
c000b917:	e8 6c 4d ff ff       	call   c0000688 <memmove>
c000b91c:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b91f:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b922:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000b925:	29 f0                	sub    eax,esi
c000b927:	83 c4 10             	add    esp,0x10
c000b92a:	29 f0                	sub    eax,esi
c000b92c:	79 02                	jns    c000b930 <prepare_data+0x74>
c000b92e:	31 c0                	xor    eax,eax
c000b930:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000b933:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c000b936:	29 ef                	sub    edi,ebp
c000b938:	39 c7                	cmp    edi,eax
c000b93a:	7e 02                	jle    c000b93e <prepare_data+0x82>
c000b93c:	89 c7                	mov    edi,eax
c000b93e:	89 f8                	mov    eax,edi
c000b940:	99                   	cdq    
c000b941:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000b944:	b8 15 00 00 00       	mov    eax,0x15
c000b949:	29 d7                	sub    edi,edx
c000b94b:	0f 88 dd 00 00 00    	js     c000ba2e <prepare_data+0x172>
c000b951:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c000b954:	8d 14 39             	lea    edx,[ecx+edi*1]
c000b957:	3b 53 40             	cmp    edx,DWORD PTR [ebx+0x40]
c000b95a:	0f 8f ce 00 00 00    	jg     c000ba2e <prepare_data+0x172>
c000b960:	8d 93 44 08 00 00    	lea    edx,[ebx+0x844]
c000b966:	50                   	push   eax
c000b967:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000b96e:	50                   	push   eax
c000b96f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000b973:	8b 00                	mov    eax,DWORD PTR [eax]
c000b975:	8d 04 a8             	lea    eax,[eax+ebp*4]
c000b978:	50                   	push   eax
c000b979:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000b97c:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b980:	50                   	push   eax
c000b981:	e8 c0 4c ff ff       	call   c0000646 <memcpy>
c000b986:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c000b989:	8b 4b 0c             	mov    ecx,DWORD PTR [ebx+0xc]
c000b98c:	01 fd                	add    ebp,edi
c000b98e:	01 f9                	add    ecx,edi
c000b990:	83 c4 10             	add    esp,0x10
c000b993:	89 6b 38             	mov    DWORD PTR [ebx+0x38],ebp
c000b996:	89 4b 0c             	mov    DWORD PTR [ebx+0xc],ecx
c000b999:	3b 4b 08             	cmp    ecx,DWORD PTR [ebx+0x8]
c000b99c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b9a0:	0f 85 86 00 00 00    	jne    c000ba2c <prepare_data+0x170>
c000b9a6:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000b9a9:	89 e8                	mov    eax,ebp
c000b9ab:	8d 3c 36             	lea    edi,[esi+esi*1]
c000b9ae:	29 c8                	sub    eax,ecx
c000b9b0:	39 f8                	cmp    eax,edi
c000b9b2:	7d 78                	jge    c000ba2c <prepare_data+0x170>
c000b9b4:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000b9b8:	83 7f 18 00          	cmp    DWORD PTR [edi+0x18],0x0
c000b9bc:	74 6e                	je     c000ba2c <prepare_data+0x170>
c000b9be:	8d 7e 04             	lea    edi,[esi+0x4]
c000b9c1:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000b9c5:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c000b9c8:	29 ef                	sub    edi,ebp
c000b9ca:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c000b9ce:	7c 29                	jl     c000b9f9 <prepare_data+0x13d>
c000b9d0:	8d 3c 30             	lea    edi,[eax+esi*1]
c000b9d3:	29 f1                	sub    ecx,esi
c000b9d5:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000b9dc:	55                   	push   ebp
c000b9dd:	50                   	push   eax
c000b9de:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000b9e1:	50                   	push   eax
c000b9e2:	52                   	push   edx
c000b9e3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000b9e7:	e8 9c 4c ff ff       	call   c0000688 <memmove>
c000b9ec:	83 c4 10             	add    esp,0x10
c000b9ef:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b9f2:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000b9f5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b9f9:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000b9fc:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000b9ff:	89 43 3c             	mov    DWORD PTR [ebx+0x3c],eax
c000ba02:	83 c6 05             	add    esi,0x5
c000ba05:	78 07                	js     c000ba0e <prepare_data+0x152>
c000ba07:	8d 3c 30             	lea    edi,[eax+esi*1]
c000ba0a:	39 cf                	cmp    edi,ecx
c000ba0c:	7e 04                	jle    c000ba12 <prepare_data+0x156>
c000ba0e:	89 ce                	mov    esi,ecx
c000ba10:	29 c6                	sub    esi,eax
c000ba12:	8d 04 82             	lea    eax,[edx+eax*4]
c000ba15:	51                   	push   ecx
c000ba16:	8d 0c b5 00 00 00 00 	lea    ecx,[esi*4+0x0]
c000ba1d:	51                   	push   ecx
c000ba1e:	6a 00                	push   0x0
c000ba20:	50                   	push   eax
c000ba21:	e8 2a 4d ff ff       	call   c0000750 <memset>
c000ba26:	01 73 38             	add    DWORD PTR [ebx+0x38],esi
c000ba29:	83 c4 10             	add    esp,0x10
c000ba2c:	31 c0                	xor    eax,eax
c000ba2e:	83 c4 1c             	add    esp,0x1c
c000ba31:	5b                   	pop    ebx
c000ba32:	5e                   	pop    esi
c000ba33:	5f                   	pop    edi
c000ba34:	5d                   	pop    ebp
c000ba35:	c3                   	ret    

c000ba36 <sinc_multichan_vari_process>:
c000ba36:	55                   	push   ebp
c000ba37:	ba 05 00 00 00       	mov    edx,0x5
c000ba3c:	57                   	push   edi
c000ba3d:	56                   	push   esi
c000ba3e:	53                   	push   ebx
c000ba3f:	83 ec 4c             	sub    esp,0x4c
c000ba42:	8b 74 24 60          	mov    esi,DWORD PTR [esp+0x60]
c000ba46:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c000ba4a:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c000ba4d:	85 db                	test   ebx,ebx
c000ba4f:	0f 84 9b 06 00 00    	je     c000c0f0 <sinc_multichan_vari_process+0x6ba>
c000ba55:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000ba58:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000ba5b:	0f af c5             	imul   eax,ebp
c000ba5e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000ba61:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000ba64:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000ba6b:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000ba72:	0f af c5             	imul   eax,ebp
c000ba75:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000ba78:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000ba7b:	8b 06                	mov    eax,DWORD PTR [esi]
c000ba7d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ba81:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ba85:	68 00 00 70 3f       	push   0x3f700000
c000ba8a:	6a 00                	push   0x0
c000ba8c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ba90:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ba94:	e8 4e c7 01 00       	call   c00281e7 <__ltdf2>
c000ba99:	83 c4 10             	add    esp,0x10
c000ba9c:	ba 16 00 00 00       	mov    edx,0x16
c000baa1:	85 c0                	test   eax,eax
c000baa3:	0f 88 47 06 00 00    	js     c000c0f0 <sinc_multichan_vari_process+0x6ba>
c000baa9:	68 00 00 70 40       	push   0x40700000
c000baae:	6a 00                	push   0x0
c000bab0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bab4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bab8:	e8 0c c7 01 00       	call   c00281c9 <__gtdf2>
c000babd:	83 c4 10             	add    esp,0x10
c000bac0:	ba 16 00 00 00       	mov    edx,0x16
c000bac5:	85 c0                	test   eax,eax
c000bac7:	0f 8f 23 06 00 00    	jg     c000c0f0 <sinc_multichan_vari_process+0x6ba>
c000bacd:	83 ec 0c             	sub    esp,0xc
c000bad0:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000bad3:	e8 a3 c4 01 00       	call   c0027f7b <__floatsidf>
c000bad8:	83 c4 10             	add    esp,0x10
c000badb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000badf:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bae3:	68 00 00 00 40       	push   0x40000000
c000bae8:	6a 00                	push   0x0
c000baea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000baee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000baf2:	e8 a4 b7 01 00       	call   c002729b <__adddf3>
c000baf7:	59                   	pop    ecx
c000baf8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000bafc:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000bb00:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bb03:	e8 73 c4 01 00       	call   c0027f7b <__floatsidf>
c000bb08:	83 c4 10             	add    esp,0x10
c000bb0b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bb0f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bb13:	52                   	push   edx
c000bb14:	50                   	push   eax
c000bb15:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb19:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb1d:	e8 da c0 01 00       	call   c0027bfc <__divdf3>
c000bb22:	83 c4 10             	add    esp,0x10
c000bb25:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bb29:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bb2d:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c000bb30:	8b 57 20             	mov    edx,DWORD PTR [edi+0x20]
c000bb33:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bb37:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bb3b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb3f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb43:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb47:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb4b:	e8 79 c6 01 00       	call   c00281c9 <__gtdf2>
c000bb50:	83 c4 10             	add    esp,0x10
c000bb53:	85 c0                	test   eax,eax
c000bb55:	7e 2d                	jle    c000bb84 <sinc_multichan_vari_process+0x14e>
c000bb57:	68 00 00 f0 3f       	push   0x3ff00000
c000bb5c:	6a 00                	push   0x0
c000bb5e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bb62:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bb66:	e8 7c c6 01 00       	call   c00281e7 <__ltdf2>
c000bb6b:	83 c4 10             	add    esp,0x10
c000bb6e:	85 c0                	test   eax,eax
c000bb70:	79 4d                	jns    c000bbbf <sinc_multichan_vari_process+0x189>
c000bb72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bb76:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000bb7a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bb7e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bb82:	eb 1b                	jmp    c000bb9f <sinc_multichan_vari_process+0x169>
c000bb84:	68 00 00 f0 3f       	push   0x3ff00000
c000bb89:	6a 00                	push   0x0
c000bb8b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb8f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb93:	e8 4f c6 01 00       	call   c00281e7 <__ltdf2>
c000bb98:	83 c4 10             	add    esp,0x10
c000bb9b:	85 c0                	test   eax,eax
c000bb9d:	79 20                	jns    c000bbbf <sinc_multichan_vari_process+0x189>
c000bb9f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bba3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bba7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbab:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbaf:	e8 48 c0 01 00       	call   c0027bfc <__divdf3>
c000bbb4:	83 c4 10             	add    esp,0x10
c000bbb7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bbbb:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bbbf:	50                   	push   eax
c000bbc0:	50                   	push   eax
c000bbc1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbc5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbc9:	e8 d2 c7 01 00       	call   c00283a0 <lrint>
c000bbce:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c000bbd1:	40                   	inc    eax
c000bbd2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bbd6:	0f af c5             	imul   eax,ebp
c000bbd9:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000bbdd:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000bbe0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bbe4:	58                   	pop    eax
c000bbe5:	5a                   	pop    edx
c000bbe6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbea:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbee:	e8 ad c7 01 00       	call   c00283a0 <lrint>
c000bbf3:	83 ec 0c             	sub    esp,0xc
c000bbf6:	50                   	push   eax
c000bbf7:	e8 7f c3 01 00       	call   c0027f7b <__floatsidf>
c000bbfc:	83 c4 10             	add    esp,0x10
c000bbff:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bc03:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bc07:	52                   	push   edx
c000bc08:	50                   	push   eax
c000bc09:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc0d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc11:	e8 d6 bc 01 00       	call   c00278ec <__subdf3>
c000bc16:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bc1a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bc1e:	83 c4 20             	add    esp,0x20
c000bc21:	6a 00                	push   0x0
c000bc23:	6a 00                	push   0x0
c000bc25:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc29:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc2d:	e8 b5 c5 01 00       	call   c00281e7 <__ltdf2>
c000bc32:	83 c4 10             	add    esp,0x10
c000bc35:	85 c0                	test   eax,eax
c000bc37:	79 1f                	jns    c000bc58 <sinc_multichan_vari_process+0x222>
c000bc39:	68 00 00 f0 3f       	push   0x3ff00000
c000bc3e:	6a 00                	push   0x0
c000bc40:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc44:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc48:	e8 4e b6 01 00       	call   c002729b <__adddf3>
c000bc4d:	83 c4 10             	add    esp,0x10
c000bc50:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bc54:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bc58:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000bc5b:	83 ec 10             	sub    esp,0x10
c000bc5e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bc62:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000bc65:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bc69:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bc6d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc71:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc75:	e8 72 bc 01 00       	call   c00278ec <__subdf3>
c000bc7a:	83 c4 18             	add    esp,0x18
c000bc7d:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bc81:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bc85:	52                   	push   edx
c000bc86:	50                   	push   eax
c000bc87:	e8 14 c7 01 00       	call   c00283a0 <lrint>
c000bc8c:	0f af e8             	imul   ebp,eax
c000bc8f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000bc93:	01 e8                	add    eax,ebp
c000bc95:	99                   	cdq    
c000bc96:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000bc99:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000bc9c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bca0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bca4:	68 00 00 f0 3f       	push   0x3ff00000
c000bca9:	6a 00                	push   0x0
c000bcab:	e8 4c bf 01 00       	call   c0027bfc <__divdf3>
c000bcb0:	83 c4 10             	add    esp,0x10
c000bcb3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bcb7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bcbb:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000bcc0:	68 23 42 92 0c       	push   0xc924223
c000bcc5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bcc9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bccd:	e8 c9 b5 01 00       	call   c002729b <__adddf3>
c000bcd2:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000bcd6:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000bcda:	83 c4 20             	add    esp,0x20
c000bcdd:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000bce5:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000bced:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000bcf0:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000bcf3:	7d 50                	jge    c000bd45 <sinc_multichan_vari_process+0x30f>
c000bcf5:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bcf8:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bcfb:	01 c8                	add    eax,ecx
c000bcfd:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000bd00:	99                   	cdq    
c000bd01:	f7 f9                	idiv   ecx
c000bd03:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000bd07:	7d 0c                	jge    c000bd15 <sinc_multichan_vari_process+0x2df>
c000bd09:	8b 6b 3c             	mov    ebp,DWORD PTR [ebx+0x3c]
c000bd0c:	85 ed                	test   ebp,ebp
c000bd0e:	79 6b                	jns    c000bd7b <sinc_multichan_vari_process+0x345>
c000bd10:	e9 e6 00 00 00       	jmp    c000bdfb <sinc_multichan_vari_process+0x3c5>
c000bd15:	50                   	push   eax
c000bd16:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000bd1a:	57                   	push   edi
c000bd1b:	53                   	push   ebx
c000bd1c:	e8 9b fb ff ff       	call   c000b8bc <prepare_data>
c000bd21:	83 c4 10             	add    esp,0x10
c000bd24:	89 c2                	mov    edx,eax
c000bd26:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000bd29:	85 c0                	test   eax,eax
c000bd2b:	0f 85 bf 03 00 00    	jne    c000c0f0 <sinc_multichan_vari_process+0x6ba>
c000bd31:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bd34:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bd37:	01 c8                	add    eax,ecx
c000bd39:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000bd3c:	99                   	cdq    
c000bd3d:	f7 f9                	idiv   ecx
c000bd3f:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000bd43:	7c c4                	jl     c000bd09 <sinc_multichan_vari_process+0x2d3>
c000bd45:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000bd49:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000bd4d:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000bd50:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c000bd53:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd57:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000bd5b:	89 06                	mov    DWORD PTR [esi],eax
c000bd5d:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c000bd60:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000bd63:	99                   	cdq    
c000bd64:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bd67:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000bd6a:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000bd6d:	99                   	cdq    
c000bd6e:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bd71:	31 d2                	xor    edx,edx
c000bd73:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000bd76:	e9 75 03 00 00       	jmp    c000c0f0 <sinc_multichan_vari_process+0x6ba>
c000bd7b:	83 ec 0c             	sub    esp,0xc
c000bd7e:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000bd81:	e8 f5 c1 01 00       	call   c0027f7b <__floatsidf>
c000bd86:	83 c4 10             	add    esp,0x10
c000bd89:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bd8d:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bd91:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bd95:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bd99:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bd9d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bda1:	e8 f5 b4 01 00       	call   c002729b <__adddf3>
c000bda6:	83 c4 10             	add    esp,0x10
c000bda9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bdad:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bdb1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bdb5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bdb9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdbd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdc1:	e8 d5 b4 01 00       	call   c002729b <__adddf3>
c000bdc6:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000bdc9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bdcd:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000bdd1:	e8 a5 c1 01 00       	call   c0027f7b <__floatsidf>
c000bdd6:	83 c4 10             	add    esp,0x10
c000bdd9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bddd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bde1:	52                   	push   edx
c000bde2:	50                   	push   eax
c000bde3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bde7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdeb:	e8 f5 c3 01 00       	call   c00281e5 <__gedf2>
c000bdf0:	83 c4 10             	add    esp,0x10
c000bdf3:	85 c0                	test   eax,eax
c000bdf5:	0f 89 4a ff ff ff    	jns    c000bd45 <sinc_multichan_vari_process+0x30f>
c000bdfb:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000bdff:	0f 8e ed 00 00 00    	jle    c000bef2 <sinc_multichan_vari_process+0x4bc>
c000be05:	83 ec 10             	sub    esp,0x10
c000be08:	ff 77 20             	push   DWORD PTR [edi+0x20]
c000be0b:	ff 77 1c             	push   DWORD PTR [edi+0x1c]
c000be0e:	ff 76 04             	push   DWORD PTR [esi+0x4]
c000be11:	ff 36                	push   DWORD PTR [esi]
c000be13:	e8 d4 ba 01 00       	call   c00278ec <__subdf3>
c000be18:	83 c4 18             	add    esp,0x18
c000be1b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000be1f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000be23:	52                   	push   edx
c000be24:	50                   	push   eax
c000be25:	e8 56 c5 01 00       	call   c0028380 <fabs>
c000be2a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000be2e:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000be32:	83 c4 10             	add    esp,0x10
c000be35:	68 df 7c db 3d       	push   0x3ddb7cdf
c000be3a:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000be3f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be43:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be47:	e8 7d c3 01 00       	call   c00281c9 <__gtdf2>
c000be4c:	83 c4 10             	add    esp,0x10
c000be4f:	85 c0                	test   eax,eax
c000be51:	0f 8e 9b 00 00 00    	jle    c000bef2 <sinc_multichan_vari_process+0x4bc>
c000be57:	8b 06                	mov    eax,DWORD PTR [esi]
c000be59:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000be5c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000be60:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000be64:	52                   	push   edx
c000be65:	50                   	push   eax
c000be66:	ff 77 20             	push   DWORD PTR [edi+0x20]
c000be69:	ff 77 1c             	push   DWORD PTR [edi+0x1c]
c000be6c:	e8 7b ba 01 00       	call   c00278ec <__subdf3>
c000be71:	59                   	pop    ecx
c000be72:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000be76:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000be7a:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000be7d:	e8 f9 c0 01 00       	call   c0027f7b <__floatsidf>
c000be82:	83 c4 10             	add    esp,0x10
c000be85:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000be89:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000be8d:	52                   	push   edx
c000be8e:	50                   	push   eax
c000be8f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be93:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be97:	e8 7c ba 01 00       	call   c0027918 <__muldf3>
c000be9c:	5d                   	pop    ebp
c000be9d:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000bea1:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000bea5:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000bea8:	e8 ce c0 01 00       	call   c0027f7b <__floatsidf>
c000bead:	83 c4 10             	add    esp,0x10
c000beb0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000beb4:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000beb8:	52                   	push   edx
c000beb9:	50                   	push   eax
c000beba:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bebe:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bec2:	e8 35 bd 01 00       	call   c0027bfc <__divdf3>
c000bec7:	83 c4 10             	add    esp,0x10
c000beca:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bece:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bed2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bed6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000beda:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bede:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bee2:	e8 b4 b3 01 00       	call   c002729b <__adddf3>
c000bee7:	83 c4 10             	add    esp,0x10
c000beea:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000beee:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000bef2:	83 ec 0c             	sub    esp,0xc
c000bef5:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bef8:	e8 7e c0 01 00       	call   c0027f7b <__floatsidf>
c000befd:	83 c4 10             	add    esp,0x10
c000bf00:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bf04:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bf08:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf0c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf10:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf14:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf18:	e8 ca c2 01 00       	call   c00281e7 <__ltdf2>
c000bf1d:	83 c4 10             	add    esp,0x10
c000bf20:	85 c0                	test   eax,eax
c000bf22:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bf26:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000bf2a:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000bf2e:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000bf32:	78 10                	js     c000bf44 <sinc_multichan_vari_process+0x50e>
c000bf34:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000bf38:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000bf3c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bf40:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bf44:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bf48:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bf4c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf50:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf54:	e8 bf b9 01 00       	call   c0027918 <__muldf3>
c000bf59:	59                   	pop    ecx
c000bf5a:	5d                   	pop    ebp
c000bf5b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bf5f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bf63:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bf67:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bf6b:	e8 25 f9 ff ff       	call   c000b895 <double_to_fp>
c000bf70:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf74:	89 c5                	mov    ebp,eax
c000bf76:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf7a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bf7e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bf82:	e8 91 b9 01 00       	call   c0027918 <__muldf3>
c000bf87:	83 c4 18             	add    esp,0x18
c000bf8a:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000bf8e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bf92:	52                   	push   edx
c000bf93:	50                   	push   eax
c000bf94:	e8 fc f8 ff ff       	call   c000b895 <double_to_fp>
c000bf99:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000bf9c:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000bfa0:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000bfa3:	8d 04 90             	lea    eax,[eax+edx*4]
c000bfa6:	50                   	push   eax
c000bfa7:	50                   	push   eax
c000bfa8:	50                   	push   eax
c000bfa9:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bfac:	e8 ca bf 01 00       	call   c0027f7b <__floatsidf>
c000bfb1:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000bfb5:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000bfb9:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bfbd:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bfc1:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bfc5:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bfc9:	e8 2e bc 01 00       	call   c0027bfc <__divdf3>
c000bfce:	83 c4 1c             	add    esp,0x1c
c000bfd1:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000bfd5:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000bfd9:	52                   	push   edx
c000bfda:	89 ea                	mov    edx,ebp
c000bfdc:	50                   	push   eax
c000bfdd:	89 d8                	mov    eax,ebx
c000bfdf:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000bfe2:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c000bfe6:	e8 69 ed ff ff       	call   c000ad54 <calc_output_multi>
c000bfeb:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000bfee:	01 43 14             	add    DWORD PTR [ebx+0x14],eax
c000bff1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bff5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bff9:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000bffd:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000c001:	e8 f6 bb 01 00       	call   c0027bfc <__divdf3>
c000c006:	83 c4 10             	add    esp,0x10
c000c009:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c00d:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000c011:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c015:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c019:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c01d:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c021:	e8 75 b2 01 00       	call   c002729b <__adddf3>
c000c026:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c02a:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c02e:	83 c4 28             	add    esp,0x28
c000c031:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c035:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c039:	e8 62 c3 01 00       	call   c00283a0 <lrint>
c000c03e:	83 ec 0c             	sub    esp,0xc
c000c041:	50                   	push   eax
c000c042:	e8 34 bf 01 00       	call   c0027f7b <__floatsidf>
c000c047:	83 c4 10             	add    esp,0x10
c000c04a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c04e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c052:	52                   	push   edx
c000c053:	50                   	push   eax
c000c054:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c058:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c05c:	e8 8b b8 01 00       	call   c00278ec <__subdf3>
c000c061:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c065:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c069:	83 c4 20             	add    esp,0x20
c000c06c:	6a 00                	push   0x0
c000c06e:	6a 00                	push   0x0
c000c070:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c074:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c078:	e8 6a c1 01 00       	call   c00281e7 <__ltdf2>
c000c07d:	83 c4 10             	add    esp,0x10
c000c080:	85 c0                	test   eax,eax
c000c082:	79 20                	jns    c000c0a4 <sinc_multichan_vari_process+0x66e>
c000c084:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c088:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c08c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c090:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c094:	e8 02 b2 01 00       	call   c002729b <__adddf3>
c000c099:	83 c4 10             	add    esp,0x10
c000c09c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c0a0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c0a4:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c0a7:	83 ec 10             	sub    esp,0x10
c000c0aa:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c0ae:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000c0b1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0b5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0b9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c0bd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c0c1:	e8 26 b8 01 00       	call   c00278ec <__subdf3>
c000c0c6:	83 c4 18             	add    esp,0x18
c000c0c9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c0cd:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c0d1:	52                   	push   edx
c000c0d2:	50                   	push   eax
c000c0d3:	e8 c8 c2 01 00       	call   c00283a0 <lrint>
c000c0d8:	0f af e8             	imul   ebp,eax
c000c0db:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c0df:	83 c4 10             	add    esp,0x10
c000c0e2:	01 e8                	add    eax,ebp
c000c0e4:	99                   	cdq    
c000c0e5:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c0e8:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c0eb:	e9 fd fb ff ff       	jmp    c000bced <sinc_multichan_vari_process+0x2b7>
c000c0f0:	83 c4 4c             	add    esp,0x4c
c000c0f3:	89 d0                	mov    eax,edx
c000c0f5:	5b                   	pop    ebx
c000c0f6:	5e                   	pop    esi
c000c0f7:	5f                   	pop    edi
c000c0f8:	5d                   	pop    ebp
c000c0f9:	c3                   	ret    

c000c0fa <sinc_hex_vari_process>:
c000c0fa:	55                   	push   ebp
c000c0fb:	ba 05 00 00 00       	mov    edx,0x5
c000c100:	57                   	push   edi
c000c101:	56                   	push   esi
c000c102:	53                   	push   ebx
c000c103:	83 ec 4c             	sub    esp,0x4c
c000c106:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000c10a:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000c10e:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000c111:	85 db                	test   ebx,ebx
c000c113:	0f 84 9c 06 00 00    	je     c000c7b5 <sinc_hex_vari_process+0x6bb>
c000c119:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000c11c:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c11f:	0f af c7             	imul   eax,edi
c000c122:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000c125:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000c128:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000c12f:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000c136:	0f af c7             	imul   eax,edi
c000c139:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000c13c:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c13f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c142:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c146:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c14a:	68 00 00 70 3f       	push   0x3f700000
c000c14f:	6a 00                	push   0x0
c000c151:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c155:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c159:	e8 89 c0 01 00       	call   c00281e7 <__ltdf2>
c000c15e:	83 c4 10             	add    esp,0x10
c000c161:	ba 16 00 00 00       	mov    edx,0x16
c000c166:	85 c0                	test   eax,eax
c000c168:	0f 88 47 06 00 00    	js     c000c7b5 <sinc_hex_vari_process+0x6bb>
c000c16e:	68 00 00 70 40       	push   0x40700000
c000c173:	6a 00                	push   0x0
c000c175:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c179:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c17d:	e8 47 c0 01 00       	call   c00281c9 <__gtdf2>
c000c182:	83 c4 10             	add    esp,0x10
c000c185:	ba 16 00 00 00       	mov    edx,0x16
c000c18a:	85 c0                	test   eax,eax
c000c18c:	0f 8f 23 06 00 00    	jg     c000c7b5 <sinc_hex_vari_process+0x6bb>
c000c192:	83 ec 0c             	sub    esp,0xc
c000c195:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000c198:	e8 de bd 01 00       	call   c0027f7b <__floatsidf>
c000c19d:	83 c4 10             	add    esp,0x10
c000c1a0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c1a4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c1a8:	68 00 00 00 40       	push   0x40000000
c000c1ad:	6a 00                	push   0x0
c000c1af:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c1b3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c1b7:	e8 df b0 01 00       	call   c002729b <__adddf3>
c000c1bc:	59                   	pop    ecx
c000c1bd:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c1c1:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c1c5:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c1c8:	e8 ae bd 01 00       	call   c0027f7b <__floatsidf>
c000c1cd:	83 c4 10             	add    esp,0x10
c000c1d0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c1d4:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c1d8:	52                   	push   edx
c000c1d9:	50                   	push   eax
c000c1da:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c1de:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c1e2:	e8 15 ba 01 00       	call   c0027bfc <__divdf3>
c000c1e7:	83 c4 10             	add    esp,0x10
c000c1ea:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c1ee:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c1f2:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000c1f5:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000c1f8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c1fc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c200:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c204:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c208:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c20c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c210:	e8 b4 bf 01 00       	call   c00281c9 <__gtdf2>
c000c215:	83 c4 10             	add    esp,0x10
c000c218:	85 c0                	test   eax,eax
c000c21a:	7e 2d                	jle    c000c249 <sinc_hex_vari_process+0x14f>
c000c21c:	68 00 00 f0 3f       	push   0x3ff00000
c000c221:	6a 00                	push   0x0
c000c223:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c227:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c22b:	e8 b7 bf 01 00       	call   c00281e7 <__ltdf2>
c000c230:	83 c4 10             	add    esp,0x10
c000c233:	85 c0                	test   eax,eax
c000c235:	79 4d                	jns    c000c284 <sinc_hex_vari_process+0x18a>
c000c237:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c23b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c23f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c243:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c247:	eb 1b                	jmp    c000c264 <sinc_hex_vari_process+0x16a>
c000c249:	68 00 00 f0 3f       	push   0x3ff00000
c000c24e:	6a 00                	push   0x0
c000c250:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c254:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c258:	e8 8a bf 01 00       	call   c00281e7 <__ltdf2>
c000c25d:	83 c4 10             	add    esp,0x10
c000c260:	85 c0                	test   eax,eax
c000c262:	79 20                	jns    c000c284 <sinc_hex_vari_process+0x18a>
c000c264:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c268:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c26c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c270:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c274:	e8 83 b9 01 00       	call   c0027bfc <__divdf3>
c000c279:	83 c4 10             	add    esp,0x10
c000c27c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c280:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c284:	50                   	push   eax
c000c285:	50                   	push   eax
c000c286:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c28a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c28e:	e8 0d c1 01 00       	call   c00283a0 <lrint>
c000c293:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000c296:	40                   	inc    eax
c000c297:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c29b:	0f af c7             	imul   eax,edi
c000c29e:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000c2a2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c2a5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c2a9:	58                   	pop    eax
c000c2aa:	5a                   	pop    edx
c000c2ab:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2af:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2b3:	e8 e8 c0 01 00       	call   c00283a0 <lrint>
c000c2b8:	83 ec 0c             	sub    esp,0xc
c000c2bb:	50                   	push   eax
c000c2bc:	e8 ba bc 01 00       	call   c0027f7b <__floatsidf>
c000c2c1:	83 c4 10             	add    esp,0x10
c000c2c4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c2c8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c2cc:	52                   	push   edx
c000c2cd:	50                   	push   eax
c000c2ce:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c2d2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c2d6:	e8 11 b6 01 00       	call   c00278ec <__subdf3>
c000c2db:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c2df:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c2e3:	83 c4 20             	add    esp,0x20
c000c2e6:	6a 00                	push   0x0
c000c2e8:	6a 00                	push   0x0
c000c2ea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c2ee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c2f2:	e8 f0 be 01 00       	call   c00281e7 <__ltdf2>
c000c2f7:	83 c4 10             	add    esp,0x10
c000c2fa:	85 c0                	test   eax,eax
c000c2fc:	79 1f                	jns    c000c31d <sinc_hex_vari_process+0x223>
c000c2fe:	68 00 00 f0 3f       	push   0x3ff00000
c000c303:	6a 00                	push   0x0
c000c305:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c309:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c30d:	e8 89 af 01 00       	call   c002729b <__adddf3>
c000c312:	83 c4 10             	add    esp,0x10
c000c315:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c319:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c31d:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c320:	83 ec 10             	sub    esp,0x10
c000c323:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c327:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c32a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c32e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c332:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c336:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c33a:	e8 ad b5 01 00       	call   c00278ec <__subdf3>
c000c33f:	83 c4 18             	add    esp,0x18
c000c342:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c346:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c34a:	52                   	push   edx
c000c34b:	50                   	push   eax
c000c34c:	e8 4f c0 01 00       	call   c00283a0 <lrint>
c000c351:	0f af f8             	imul   edi,eax
c000c354:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c358:	01 f8                	add    eax,edi
c000c35a:	99                   	cdq    
c000c35b:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c35e:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c361:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c365:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c369:	68 00 00 f0 3f       	push   0x3ff00000
c000c36e:	6a 00                	push   0x0
c000c370:	e8 87 b8 01 00       	call   c0027bfc <__divdf3>
c000c375:	83 c4 10             	add    esp,0x10
c000c378:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c37c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c380:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000c385:	68 23 42 92 0c       	push   0xc924223
c000c38a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c38e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c392:	e8 04 af 01 00       	call   c002729b <__adddf3>
c000c397:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c39b:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c39f:	83 c4 20             	add    esp,0x20
c000c3a2:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000c3aa:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000c3b2:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000c3b5:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000c3b8:	7d 50                	jge    c000c40a <sinc_hex_vari_process+0x310>
c000c3ba:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c3bd:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c3c0:	01 c8                	add    eax,ecx
c000c3c2:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c3c5:	99                   	cdq    
c000c3c6:	f7 f9                	idiv   ecx
c000c3c8:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c3cc:	7d 0c                	jge    c000c3da <sinc_hex_vari_process+0x2e0>
c000c3ce:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000c3d1:	85 ff                	test   edi,edi
c000c3d3:	79 6c                	jns    c000c441 <sinc_hex_vari_process+0x347>
c000c3d5:	e9 e7 00 00 00       	jmp    c000c4c1 <sinc_hex_vari_process+0x3c7>
c000c3da:	50                   	push   eax
c000c3db:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c3df:	56                   	push   esi
c000c3e0:	53                   	push   ebx
c000c3e1:	e8 d6 f4 ff ff       	call   c000b8bc <prepare_data>
c000c3e6:	83 c4 10             	add    esp,0x10
c000c3e9:	89 c2                	mov    edx,eax
c000c3eb:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000c3ee:	85 c0                	test   eax,eax
c000c3f0:	0f 85 bf 03 00 00    	jne    c000c7b5 <sinc_hex_vari_process+0x6bb>
c000c3f6:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c3f9:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c3fc:	01 c8                	add    eax,ecx
c000c3fe:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c401:	99                   	cdq    
c000c402:	f7 f9                	idiv   ecx
c000c404:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c408:	7c c4                	jl     c000c3ce <sinc_hex_vari_process+0x2d4>
c000c40a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c40e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c412:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000c415:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000c418:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c41c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c420:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000c423:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000c426:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000c429:	99                   	cdq    
c000c42a:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c42d:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000c430:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000c433:	99                   	cdq    
c000c434:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c437:	31 d2                	xor    edx,edx
c000c439:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000c43c:	e9 74 03 00 00       	jmp    c000c7b5 <sinc_hex_vari_process+0x6bb>
c000c441:	83 ec 0c             	sub    esp,0xc
c000c444:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000c447:	e8 2f bb 01 00       	call   c0027f7b <__floatsidf>
c000c44c:	83 c4 10             	add    esp,0x10
c000c44f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c453:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c457:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c45b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c45f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c463:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c467:	e8 2f ae 01 00       	call   c002729b <__adddf3>
c000c46c:	83 c4 10             	add    esp,0x10
c000c46f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c473:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c477:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c47b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c47f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c483:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c487:	e8 0f ae 01 00       	call   c002729b <__adddf3>
c000c48c:	89 3c 24             	mov    DWORD PTR [esp],edi
c000c48f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c493:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c497:	e8 df ba 01 00       	call   c0027f7b <__floatsidf>
c000c49c:	83 c4 10             	add    esp,0x10
c000c49f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c4a3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c4a7:	52                   	push   edx
c000c4a8:	50                   	push   eax
c000c4a9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4ad:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4b1:	e8 2f bd 01 00       	call   c00281e5 <__gedf2>
c000c4b6:	83 c4 10             	add    esp,0x10
c000c4b9:	85 c0                	test   eax,eax
c000c4bb:	0f 89 49 ff ff ff    	jns    c000c40a <sinc_hex_vari_process+0x310>
c000c4c1:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000c4c5:	0f 8e ef 00 00 00    	jle    c000c5ba <sinc_hex_vari_process+0x4c0>
c000c4cb:	83 ec 10             	sub    esp,0x10
c000c4ce:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c4d1:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c4d4:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000c4d7:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000c4da:	e8 0d b4 01 00       	call   c00278ec <__subdf3>
c000c4df:	83 c4 18             	add    esp,0x18
c000c4e2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c4e6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c4ea:	52                   	push   edx
c000c4eb:	50                   	push   eax
c000c4ec:	e8 8f be 01 00       	call   c0028380 <fabs>
c000c4f1:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c4f5:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c4f9:	83 c4 10             	add    esp,0x10
c000c4fc:	68 df 7c db 3d       	push   0x3ddb7cdf
c000c501:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000c506:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c50a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c50e:	e8 b6 bc 01 00       	call   c00281c9 <__gtdf2>
c000c513:	83 c4 10             	add    esp,0x10
c000c516:	85 c0                	test   eax,eax
c000c518:	0f 8e 9c 00 00 00    	jle    c000c5ba <sinc_hex_vari_process+0x4c0>
c000c51e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c521:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c524:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c528:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c52c:	52                   	push   edx
c000c52d:	50                   	push   eax
c000c52e:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c531:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c534:	e8 b3 b3 01 00       	call   c00278ec <__subdf3>
c000c539:	59                   	pop    ecx
c000c53a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c53e:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c542:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000c545:	e8 31 ba 01 00       	call   c0027f7b <__floatsidf>
c000c54a:	83 c4 10             	add    esp,0x10
c000c54d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c551:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c555:	52                   	push   edx
c000c556:	50                   	push   eax
c000c557:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c55b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c55f:	e8 b4 b3 01 00       	call   c0027918 <__muldf3>
c000c564:	5f                   	pop    edi
c000c565:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c569:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c56d:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000c570:	e8 06 ba 01 00       	call   c0027f7b <__floatsidf>
c000c575:	83 c4 10             	add    esp,0x10
c000c578:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c57c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c580:	52                   	push   edx
c000c581:	50                   	push   eax
c000c582:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c586:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c58a:	e8 6d b6 01 00       	call   c0027bfc <__divdf3>
c000c58f:	83 c4 10             	add    esp,0x10
c000c592:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c596:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c59a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c59e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c5a2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5a6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5aa:	e8 ec ac 01 00       	call   c002729b <__adddf3>
c000c5af:	83 c4 10             	add    esp,0x10
c000c5b2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c5b6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c5ba:	83 ec 0c             	sub    esp,0xc
c000c5bd:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c5c0:	e8 b6 b9 01 00       	call   c0027f7b <__floatsidf>
c000c5c5:	83 c4 10             	add    esp,0x10
c000c5c8:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c5cc:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c5d0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c5d4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c5d8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c5dc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c5e0:	e8 02 bc 01 00       	call   c00281e7 <__ltdf2>
c000c5e5:	83 c4 10             	add    esp,0x10
c000c5e8:	85 c0                	test   eax,eax
c000c5ea:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c5ee:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000c5f2:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000c5f6:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000c5fa:	78 10                	js     c000c60c <sinc_hex_vari_process+0x512>
c000c5fc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c600:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c604:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c608:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c60c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c610:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c614:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c618:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c61c:	e8 f7 b2 01 00       	call   c0027918 <__muldf3>
c000c621:	59                   	pop    ecx
c000c622:	5f                   	pop    edi
c000c623:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c627:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c62b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c62f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c633:	e8 5d f2 ff ff       	call   c000b895 <double_to_fp>
c000c638:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c63c:	89 c7                	mov    edi,eax
c000c63e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c642:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c646:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c64a:	e8 c9 b2 01 00       	call   c0027918 <__muldf3>
c000c64f:	83 c4 18             	add    esp,0x18
c000c652:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c656:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c65a:	52                   	push   edx
c000c65b:	50                   	push   eax
c000c65c:	e8 34 f2 ff ff       	call   c000b895 <double_to_fp>
c000c661:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000c664:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000c668:	83 c4 0c             	add    esp,0xc
c000c66b:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000c66e:	8d 04 90             	lea    eax,[eax+edx*4]
c000c671:	50                   	push   eax
c000c672:	50                   	push   eax
c000c673:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c676:	e8 00 b9 01 00       	call   c0027f7b <__floatsidf>
c000c67b:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c67f:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000c683:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c687:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c68b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c68f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c693:	e8 64 b5 01 00       	call   c0027bfc <__divdf3>
c000c698:	83 c4 18             	add    esp,0x18
c000c69b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c69f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c6a3:	52                   	push   edx
c000c6a4:	89 fa                	mov    edx,edi
c000c6a6:	50                   	push   eax
c000c6a7:	89 d8                	mov    eax,ebx
c000c6a9:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000c6ad:	e8 50 de ff ff       	call   c000a502 <calc_output_hex>
c000c6b2:	83 43 14 06          	add    DWORD PTR [ebx+0x14],0x6
c000c6b6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c6ba:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c6be:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c6c2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c6c6:	e8 31 b5 01 00       	call   c0027bfc <__divdf3>
c000c6cb:	83 c4 10             	add    esp,0x10
c000c6ce:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c6d2:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c6d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c6da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c6de:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6e2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6e6:	e8 b0 ab 01 00       	call   c002729b <__adddf3>
c000c6eb:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000c6ef:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c6f3:	83 c4 18             	add    esp,0x18
c000c6f6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c6fa:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c6fe:	e8 9d bc 01 00       	call   c00283a0 <lrint>
c000c703:	83 ec 0c             	sub    esp,0xc
c000c706:	50                   	push   eax
c000c707:	e8 6f b8 01 00       	call   c0027f7b <__floatsidf>
c000c70c:	83 c4 10             	add    esp,0x10
c000c70f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c713:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c717:	52                   	push   edx
c000c718:	50                   	push   eax
c000c719:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c71d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c721:	e8 c6 b1 01 00       	call   c00278ec <__subdf3>
c000c726:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c72a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c72e:	83 c4 20             	add    esp,0x20
c000c731:	6a 00                	push   0x0
c000c733:	6a 00                	push   0x0
c000c735:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c739:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c73d:	e8 a5 ba 01 00       	call   c00281e7 <__ltdf2>
c000c742:	83 c4 10             	add    esp,0x10
c000c745:	85 c0                	test   eax,eax
c000c747:	79 20                	jns    c000c769 <sinc_hex_vari_process+0x66f>
c000c749:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c74d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c751:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c755:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c759:	e8 3d ab 01 00       	call   c002729b <__adddf3>
c000c75e:	83 c4 10             	add    esp,0x10
c000c761:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c765:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c769:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c76c:	83 ec 10             	sub    esp,0x10
c000c76f:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c773:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c776:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c77a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c77e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c782:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c786:	e8 61 b1 01 00       	call   c00278ec <__subdf3>
c000c78b:	83 c4 18             	add    esp,0x18
c000c78e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c792:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c796:	52                   	push   edx
c000c797:	50                   	push   eax
c000c798:	e8 03 bc 01 00       	call   c00283a0 <lrint>
c000c79d:	0f af f8             	imul   edi,eax
c000c7a0:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c7a4:	83 c4 10             	add    esp,0x10
c000c7a7:	01 f8                	add    eax,edi
c000c7a9:	99                   	cdq    
c000c7aa:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c7ad:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c7b0:	e9 fd fb ff ff       	jmp    c000c3b2 <sinc_hex_vari_process+0x2b8>
c000c7b5:	83 c4 4c             	add    esp,0x4c
c000c7b8:	89 d0                	mov    eax,edx
c000c7ba:	5b                   	pop    ebx
c000c7bb:	5e                   	pop    esi
c000c7bc:	5f                   	pop    edi
c000c7bd:	5d                   	pop    ebp
c000c7be:	c3                   	ret    

c000c7bf <sinc_quad_vari_process>:
c000c7bf:	55                   	push   ebp
c000c7c0:	ba 05 00 00 00       	mov    edx,0x5
c000c7c5:	57                   	push   edi
c000c7c6:	56                   	push   esi
c000c7c7:	53                   	push   ebx
c000c7c8:	83 ec 4c             	sub    esp,0x4c
c000c7cb:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000c7cf:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000c7d3:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000c7d6:	85 db                	test   ebx,ebx
c000c7d8:	0f 84 9c 06 00 00    	je     c000ce7a <sinc_quad_vari_process+0x6bb>
c000c7de:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000c7e1:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c7e4:	0f af c7             	imul   eax,edi
c000c7e7:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000c7ea:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000c7ed:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000c7f4:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000c7fb:	0f af c7             	imul   eax,edi
c000c7fe:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000c801:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c804:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c807:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c80b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c80f:	68 00 00 70 3f       	push   0x3f700000
c000c814:	6a 00                	push   0x0
c000c816:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c81a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c81e:	e8 c4 b9 01 00       	call   c00281e7 <__ltdf2>
c000c823:	83 c4 10             	add    esp,0x10
c000c826:	ba 16 00 00 00       	mov    edx,0x16
c000c82b:	85 c0                	test   eax,eax
c000c82d:	0f 88 47 06 00 00    	js     c000ce7a <sinc_quad_vari_process+0x6bb>
c000c833:	68 00 00 70 40       	push   0x40700000
c000c838:	6a 00                	push   0x0
c000c83a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c83e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c842:	e8 82 b9 01 00       	call   c00281c9 <__gtdf2>
c000c847:	83 c4 10             	add    esp,0x10
c000c84a:	ba 16 00 00 00       	mov    edx,0x16
c000c84f:	85 c0                	test   eax,eax
c000c851:	0f 8f 23 06 00 00    	jg     c000ce7a <sinc_quad_vari_process+0x6bb>
c000c857:	83 ec 0c             	sub    esp,0xc
c000c85a:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000c85d:	e8 19 b7 01 00       	call   c0027f7b <__floatsidf>
c000c862:	83 c4 10             	add    esp,0x10
c000c865:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c869:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c86d:	68 00 00 00 40       	push   0x40000000
c000c872:	6a 00                	push   0x0
c000c874:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c878:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c87c:	e8 1a aa 01 00       	call   c002729b <__adddf3>
c000c881:	59                   	pop    ecx
c000c882:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c886:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c88a:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c88d:	e8 e9 b6 01 00       	call   c0027f7b <__floatsidf>
c000c892:	83 c4 10             	add    esp,0x10
c000c895:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c899:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c89d:	52                   	push   edx
c000c89e:	50                   	push   eax
c000c89f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8a3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8a7:	e8 50 b3 01 00       	call   c0027bfc <__divdf3>
c000c8ac:	83 c4 10             	add    esp,0x10
c000c8af:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c8b3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c8b7:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000c8ba:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000c8bd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c8c1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c8c5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8c9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8cd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8d1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8d5:	e8 ef b8 01 00       	call   c00281c9 <__gtdf2>
c000c8da:	83 c4 10             	add    esp,0x10
c000c8dd:	85 c0                	test   eax,eax
c000c8df:	7e 2d                	jle    c000c90e <sinc_quad_vari_process+0x14f>
c000c8e1:	68 00 00 f0 3f       	push   0x3ff00000
c000c8e6:	6a 00                	push   0x0
c000c8e8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c8ec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c8f0:	e8 f2 b8 01 00       	call   c00281e7 <__ltdf2>
c000c8f5:	83 c4 10             	add    esp,0x10
c000c8f8:	85 c0                	test   eax,eax
c000c8fa:	79 4d                	jns    c000c949 <sinc_quad_vari_process+0x18a>
c000c8fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c900:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c904:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c908:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c90c:	eb 1b                	jmp    c000c929 <sinc_quad_vari_process+0x16a>
c000c90e:	68 00 00 f0 3f       	push   0x3ff00000
c000c913:	6a 00                	push   0x0
c000c915:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c919:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c91d:	e8 c5 b8 01 00       	call   c00281e7 <__ltdf2>
c000c922:	83 c4 10             	add    esp,0x10
c000c925:	85 c0                	test   eax,eax
c000c927:	79 20                	jns    c000c949 <sinc_quad_vari_process+0x18a>
c000c929:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c92d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c931:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c935:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c939:	e8 be b2 01 00       	call   c0027bfc <__divdf3>
c000c93e:	83 c4 10             	add    esp,0x10
c000c941:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c945:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c949:	50                   	push   eax
c000c94a:	50                   	push   eax
c000c94b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c94f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c953:	e8 48 ba 01 00       	call   c00283a0 <lrint>
c000c958:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000c95b:	40                   	inc    eax
c000c95c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c960:	0f af c7             	imul   eax,edi
c000c963:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000c967:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c96a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c96e:	58                   	pop    eax
c000c96f:	5a                   	pop    edx
c000c970:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c974:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c978:	e8 23 ba 01 00       	call   c00283a0 <lrint>
c000c97d:	83 ec 0c             	sub    esp,0xc
c000c980:	50                   	push   eax
c000c981:	e8 f5 b5 01 00       	call   c0027f7b <__floatsidf>
c000c986:	83 c4 10             	add    esp,0x10
c000c989:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c98d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c991:	52                   	push   edx
c000c992:	50                   	push   eax
c000c993:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c997:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c99b:	e8 4c af 01 00       	call   c00278ec <__subdf3>
c000c9a0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c9a4:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c9a8:	83 c4 20             	add    esp,0x20
c000c9ab:	6a 00                	push   0x0
c000c9ad:	6a 00                	push   0x0
c000c9af:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c9b3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c9b7:	e8 2b b8 01 00       	call   c00281e7 <__ltdf2>
c000c9bc:	83 c4 10             	add    esp,0x10
c000c9bf:	85 c0                	test   eax,eax
c000c9c1:	79 1f                	jns    c000c9e2 <sinc_quad_vari_process+0x223>
c000c9c3:	68 00 00 f0 3f       	push   0x3ff00000
c000c9c8:	6a 00                	push   0x0
c000c9ca:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c9ce:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c9d2:	e8 c4 a8 01 00       	call   c002729b <__adddf3>
c000c9d7:	83 c4 10             	add    esp,0x10
c000c9da:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c9de:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c9e2:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c9e5:	83 ec 10             	sub    esp,0x10
c000c9e8:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c9ec:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c9ef:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c9f3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c9f7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c9fb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c9ff:	e8 e8 ae 01 00       	call   c00278ec <__subdf3>
c000ca04:	83 c4 18             	add    esp,0x18
c000ca07:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ca0b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ca0f:	52                   	push   edx
c000ca10:	50                   	push   eax
c000ca11:	e8 8a b9 01 00       	call   c00283a0 <lrint>
c000ca16:	0f af f8             	imul   edi,eax
c000ca19:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ca1d:	01 f8                	add    eax,edi
c000ca1f:	99                   	cdq    
c000ca20:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000ca23:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000ca26:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ca2a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ca2e:	68 00 00 f0 3f       	push   0x3ff00000
c000ca33:	6a 00                	push   0x0
c000ca35:	e8 c2 b1 01 00       	call   c0027bfc <__divdf3>
c000ca3a:	83 c4 10             	add    esp,0x10
c000ca3d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ca41:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ca45:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000ca4a:	68 23 42 92 0c       	push   0xc924223
c000ca4f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca53:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca57:	e8 3f a8 01 00       	call   c002729b <__adddf3>
c000ca5c:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000ca60:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000ca64:	83 c4 20             	add    esp,0x20
c000ca67:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000ca6f:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000ca77:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000ca7a:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000ca7d:	7d 50                	jge    c000cacf <sinc_quad_vari_process+0x310>
c000ca7f:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000ca82:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000ca85:	01 c8                	add    eax,ecx
c000ca87:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000ca8a:	99                   	cdq    
c000ca8b:	f7 f9                	idiv   ecx
c000ca8d:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000ca91:	7d 0c                	jge    c000ca9f <sinc_quad_vari_process+0x2e0>
c000ca93:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000ca96:	85 ff                	test   edi,edi
c000ca98:	79 6c                	jns    c000cb06 <sinc_quad_vari_process+0x347>
c000ca9a:	e9 e7 00 00 00       	jmp    c000cb86 <sinc_quad_vari_process+0x3c7>
c000ca9f:	50                   	push   eax
c000caa0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000caa4:	56                   	push   esi
c000caa5:	53                   	push   ebx
c000caa6:	e8 11 ee ff ff       	call   c000b8bc <prepare_data>
c000caab:	83 c4 10             	add    esp,0x10
c000caae:	89 c2                	mov    edx,eax
c000cab0:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000cab3:	85 c0                	test   eax,eax
c000cab5:	0f 85 bf 03 00 00    	jne    c000ce7a <sinc_quad_vari_process+0x6bb>
c000cabb:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000cabe:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000cac1:	01 c8                	add    eax,ecx
c000cac3:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000cac6:	99                   	cdq    
c000cac7:	f7 f9                	idiv   ecx
c000cac9:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000cacd:	7c c4                	jl     c000ca93 <sinc_quad_vari_process+0x2d4>
c000cacf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cad3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000cad7:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000cada:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000cadd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cae1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000cae5:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000cae8:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000caeb:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000caee:	99                   	cdq    
c000caef:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000caf2:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000caf5:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000caf8:	99                   	cdq    
c000caf9:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000cafc:	31 d2                	xor    edx,edx
c000cafe:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000cb01:	e9 74 03 00 00       	jmp    c000ce7a <sinc_quad_vari_process+0x6bb>
c000cb06:	83 ec 0c             	sub    esp,0xc
c000cb09:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000cb0c:	e8 6a b4 01 00       	call   c0027f7b <__floatsidf>
c000cb11:	83 c4 10             	add    esp,0x10
c000cb14:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cb18:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cb1c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cb20:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cb24:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb28:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb2c:	e8 6a a7 01 00       	call   c002729b <__adddf3>
c000cb31:	83 c4 10             	add    esp,0x10
c000cb34:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cb38:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cb3c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cb40:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cb44:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb48:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb4c:	e8 4a a7 01 00       	call   c002729b <__adddf3>
c000cb51:	89 3c 24             	mov    DWORD PTR [esp],edi
c000cb54:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cb58:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cb5c:	e8 1a b4 01 00       	call   c0027f7b <__floatsidf>
c000cb61:	83 c4 10             	add    esp,0x10
c000cb64:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cb68:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cb6c:	52                   	push   edx
c000cb6d:	50                   	push   eax
c000cb6e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb72:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb76:	e8 6a b6 01 00       	call   c00281e5 <__gedf2>
c000cb7b:	83 c4 10             	add    esp,0x10
c000cb7e:	85 c0                	test   eax,eax
c000cb80:	0f 89 49 ff ff ff    	jns    c000cacf <sinc_quad_vari_process+0x310>
c000cb86:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000cb8a:	0f 8e ef 00 00 00    	jle    c000cc7f <sinc_quad_vari_process+0x4c0>
c000cb90:	83 ec 10             	sub    esp,0x10
c000cb93:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000cb96:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000cb99:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000cb9c:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000cb9f:	e8 48 ad 01 00       	call   c00278ec <__subdf3>
c000cba4:	83 c4 18             	add    esp,0x18
c000cba7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cbab:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cbaf:	52                   	push   edx
c000cbb0:	50                   	push   eax
c000cbb1:	e8 ca b7 01 00       	call   c0028380 <fabs>
c000cbb6:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cbba:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cbbe:	83 c4 10             	add    esp,0x10
c000cbc1:	68 df 7c db 3d       	push   0x3ddb7cdf
c000cbc6:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000cbcb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cbcf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cbd3:	e8 f1 b5 01 00       	call   c00281c9 <__gtdf2>
c000cbd8:	83 c4 10             	add    esp,0x10
c000cbdb:	85 c0                	test   eax,eax
c000cbdd:	0f 8e 9c 00 00 00    	jle    c000cc7f <sinc_quad_vari_process+0x4c0>
c000cbe3:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cbe6:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000cbe9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cbed:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000cbf1:	52                   	push   edx
c000cbf2:	50                   	push   eax
c000cbf3:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000cbf6:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000cbf9:	e8 ee ac 01 00       	call   c00278ec <__subdf3>
c000cbfe:	59                   	pop    ecx
c000cbff:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000cc03:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000cc07:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000cc0a:	e8 6c b3 01 00       	call   c0027f7b <__floatsidf>
c000cc0f:	83 c4 10             	add    esp,0x10
c000cc12:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc16:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc1a:	52                   	push   edx
c000cc1b:	50                   	push   eax
c000cc1c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc20:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc24:	e8 ef ac 01 00       	call   c0027918 <__muldf3>
c000cc29:	5f                   	pop    edi
c000cc2a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000cc2e:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000cc32:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000cc35:	e8 41 b3 01 00       	call   c0027f7b <__floatsidf>
c000cc3a:	83 c4 10             	add    esp,0x10
c000cc3d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc41:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc45:	52                   	push   edx
c000cc46:	50                   	push   eax
c000cc47:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc4b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc4f:	e8 a8 af 01 00       	call   c0027bfc <__divdf3>
c000cc54:	83 c4 10             	add    esp,0x10
c000cc57:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cc5b:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cc5f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cc63:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cc67:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc6b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc6f:	e8 27 a6 01 00       	call   c002729b <__adddf3>
c000cc74:	83 c4 10             	add    esp,0x10
c000cc77:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cc7b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000cc7f:	83 ec 0c             	sub    esp,0xc
c000cc82:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cc85:	e8 f1 b2 01 00       	call   c0027f7b <__floatsidf>
c000cc8a:	83 c4 10             	add    esp,0x10
c000cc8d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc91:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc95:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cc99:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cc9d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cca1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cca5:	e8 3d b5 01 00       	call   c00281e7 <__ltdf2>
c000ccaa:	83 c4 10             	add    esp,0x10
c000ccad:	85 c0                	test   eax,eax
c000ccaf:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ccb3:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ccb7:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000ccbb:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000ccbf:	78 10                	js     c000ccd1 <sinc_quad_vari_process+0x512>
c000ccc1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ccc5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000ccc9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cccd:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ccd1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ccd5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ccd9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ccdd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cce1:	e8 32 ac 01 00       	call   c0027918 <__muldf3>
c000cce6:	59                   	pop    ecx
c000cce7:	5f                   	pop    edi
c000cce8:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ccec:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ccf0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ccf4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ccf8:	e8 98 eb ff ff       	call   c000b895 <double_to_fp>
c000ccfd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd01:	89 c7                	mov    edi,eax
c000cd03:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd07:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd0b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd0f:	e8 04 ac 01 00       	call   c0027918 <__muldf3>
c000cd14:	83 c4 18             	add    esp,0x18
c000cd17:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cd1b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cd1f:	52                   	push   edx
c000cd20:	50                   	push   eax
c000cd21:	e8 6f eb ff ff       	call   c000b895 <double_to_fp>
c000cd26:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000cd29:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000cd2d:	83 c4 0c             	add    esp,0xc
c000cd30:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000cd33:	8d 04 90             	lea    eax,[eax+edx*4]
c000cd36:	50                   	push   eax
c000cd37:	50                   	push   eax
c000cd38:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cd3b:	e8 3b b2 01 00       	call   c0027f7b <__floatsidf>
c000cd40:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000cd44:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000cd48:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd4c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd50:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd54:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd58:	e8 9f ae 01 00       	call   c0027bfc <__divdf3>
c000cd5d:	83 c4 18             	add    esp,0x18
c000cd60:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cd64:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cd68:	52                   	push   edx
c000cd69:	89 fa                	mov    edx,edi
c000cd6b:	50                   	push   eax
c000cd6c:	89 d8                	mov    eax,ebx
c000cd6e:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000cd72:	e8 a5 d1 ff ff       	call   c0009f1c <calc_output_quad>
c000cd77:	83 43 14 04          	add    DWORD PTR [ebx+0x14],0x4
c000cd7b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd7f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd83:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd87:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd8b:	e8 6c ae 01 00       	call   c0027bfc <__divdf3>
c000cd90:	83 c4 10             	add    esp,0x10
c000cd93:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cd97:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cd9b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cd9f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cda3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cda7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cdab:	e8 eb a4 01 00       	call   c002729b <__adddf3>
c000cdb0:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000cdb4:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000cdb8:	83 c4 18             	add    esp,0x18
c000cdbb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cdbf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cdc3:	e8 d8 b5 01 00       	call   c00283a0 <lrint>
c000cdc8:	83 ec 0c             	sub    esp,0xc
c000cdcb:	50                   	push   eax
c000cdcc:	e8 aa b1 01 00       	call   c0027f7b <__floatsidf>
c000cdd1:	83 c4 10             	add    esp,0x10
c000cdd4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cdd8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cddc:	52                   	push   edx
c000cddd:	50                   	push   eax
c000cdde:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cde2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cde6:	e8 01 ab 01 00       	call   c00278ec <__subdf3>
c000cdeb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cdef:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cdf3:	83 c4 20             	add    esp,0x20
c000cdf6:	6a 00                	push   0x0
c000cdf8:	6a 00                	push   0x0
c000cdfa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cdfe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce02:	e8 e0 b3 01 00       	call   c00281e7 <__ltdf2>
c000ce07:	83 c4 10             	add    esp,0x10
c000ce0a:	85 c0                	test   eax,eax
c000ce0c:	79 20                	jns    c000ce2e <sinc_quad_vari_process+0x66f>
c000ce0e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce12:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce16:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce1a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce1e:	e8 78 a4 01 00       	call   c002729b <__adddf3>
c000ce23:	83 c4 10             	add    esp,0x10
c000ce26:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ce2a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ce2e:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000ce31:	83 ec 10             	sub    esp,0x10
c000ce34:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ce38:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000ce3b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce3f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce43:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce47:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce4b:	e8 9c aa 01 00       	call   c00278ec <__subdf3>
c000ce50:	83 c4 18             	add    esp,0x18
c000ce53:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ce57:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ce5b:	52                   	push   edx
c000ce5c:	50                   	push   eax
c000ce5d:	e8 3e b5 01 00       	call   c00283a0 <lrint>
c000ce62:	0f af f8             	imul   edi,eax
c000ce65:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000ce69:	83 c4 10             	add    esp,0x10
c000ce6c:	01 f8                	add    eax,edi
c000ce6e:	99                   	cdq    
c000ce6f:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000ce72:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000ce75:	e9 fd fb ff ff       	jmp    c000ca77 <sinc_quad_vari_process+0x2b8>
c000ce7a:	83 c4 4c             	add    esp,0x4c
c000ce7d:	89 d0                	mov    eax,edx
c000ce7f:	5b                   	pop    ebx
c000ce80:	5e                   	pop    esi
c000ce81:	5f                   	pop    edi
c000ce82:	5d                   	pop    ebp
c000ce83:	c3                   	ret    

c000ce84 <sinc_stereo_vari_process>:
c000ce84:	55                   	push   ebp
c000ce85:	ba 05 00 00 00       	mov    edx,0x5
c000ce8a:	57                   	push   edi
c000ce8b:	56                   	push   esi
c000ce8c:	53                   	push   ebx
c000ce8d:	83 ec 4c             	sub    esp,0x4c
c000ce90:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000ce94:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000ce98:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000ce9b:	85 db                	test   ebx,ebx
c000ce9d:	0f 84 9c 06 00 00    	je     c000d53f <sinc_stereo_vari_process+0x6bb>
c000cea3:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000cea6:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000cea9:	0f af c7             	imul   eax,edi
c000ceac:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000ceaf:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000ceb2:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000ceb9:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000cec0:	0f af c7             	imul   eax,edi
c000cec3:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000cec6:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000cec9:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cecc:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ced0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ced4:	68 00 00 70 3f       	push   0x3f700000
c000ced9:	6a 00                	push   0x0
c000cedb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cedf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cee3:	e8 ff b2 01 00       	call   c00281e7 <__ltdf2>
c000cee8:	83 c4 10             	add    esp,0x10
c000ceeb:	ba 16 00 00 00       	mov    edx,0x16
c000cef0:	85 c0                	test   eax,eax
c000cef2:	0f 88 47 06 00 00    	js     c000d53f <sinc_stereo_vari_process+0x6bb>
c000cef8:	68 00 00 70 40       	push   0x40700000
c000cefd:	6a 00                	push   0x0
c000ceff:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf03:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf07:	e8 bd b2 01 00       	call   c00281c9 <__gtdf2>
c000cf0c:	83 c4 10             	add    esp,0x10
c000cf0f:	ba 16 00 00 00       	mov    edx,0x16
c000cf14:	85 c0                	test   eax,eax
c000cf16:	0f 8f 23 06 00 00    	jg     c000d53f <sinc_stereo_vari_process+0x6bb>
c000cf1c:	83 ec 0c             	sub    esp,0xc
c000cf1f:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000cf22:	e8 54 b0 01 00       	call   c0027f7b <__floatsidf>
c000cf27:	83 c4 10             	add    esp,0x10
c000cf2a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cf2e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cf32:	68 00 00 00 40       	push   0x40000000
c000cf37:	6a 00                	push   0x0
c000cf39:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf3d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf41:	e8 55 a3 01 00       	call   c002729b <__adddf3>
c000cf46:	59                   	pop    ecx
c000cf47:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000cf4b:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000cf4f:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cf52:	e8 24 b0 01 00       	call   c0027f7b <__floatsidf>
c000cf57:	83 c4 10             	add    esp,0x10
c000cf5a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cf5e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cf62:	52                   	push   edx
c000cf63:	50                   	push   eax
c000cf64:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf68:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf6c:	e8 8b ac 01 00       	call   c0027bfc <__divdf3>
c000cf71:	83 c4 10             	add    esp,0x10
c000cf74:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cf78:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cf7c:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000cf7f:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000cf82:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cf86:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cf8a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf8e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf92:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf96:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf9a:	e8 2a b2 01 00       	call   c00281c9 <__gtdf2>
c000cf9f:	83 c4 10             	add    esp,0x10
c000cfa2:	85 c0                	test   eax,eax
c000cfa4:	7e 2d                	jle    c000cfd3 <sinc_stereo_vari_process+0x14f>
c000cfa6:	68 00 00 f0 3f       	push   0x3ff00000
c000cfab:	6a 00                	push   0x0
c000cfad:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cfb1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cfb5:	e8 2d b2 01 00       	call   c00281e7 <__ltdf2>
c000cfba:	83 c4 10             	add    esp,0x10
c000cfbd:	85 c0                	test   eax,eax
c000cfbf:	79 4d                	jns    c000d00e <sinc_stereo_vari_process+0x18a>
c000cfc1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cfc5:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000cfc9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cfcd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cfd1:	eb 1b                	jmp    c000cfee <sinc_stereo_vari_process+0x16a>
c000cfd3:	68 00 00 f0 3f       	push   0x3ff00000
c000cfd8:	6a 00                	push   0x0
c000cfda:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfde:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfe2:	e8 00 b2 01 00       	call   c00281e7 <__ltdf2>
c000cfe7:	83 c4 10             	add    esp,0x10
c000cfea:	85 c0                	test   eax,eax
c000cfec:	79 20                	jns    c000d00e <sinc_stereo_vari_process+0x18a>
c000cfee:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cff2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cff6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cffa:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cffe:	e8 f9 ab 01 00       	call   c0027bfc <__divdf3>
c000d003:	83 c4 10             	add    esp,0x10
c000d006:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d00a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d00e:	50                   	push   eax
c000d00f:	50                   	push   eax
c000d010:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d014:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d018:	e8 83 b3 01 00       	call   c00283a0 <lrint>
c000d01d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000d020:	40                   	inc    eax
c000d021:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d025:	0f af c7             	imul   eax,edi
c000d028:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000d02c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d02f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d033:	58                   	pop    eax
c000d034:	5a                   	pop    edx
c000d035:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d039:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d03d:	e8 5e b3 01 00       	call   c00283a0 <lrint>
c000d042:	83 ec 0c             	sub    esp,0xc
c000d045:	50                   	push   eax
c000d046:	e8 30 af 01 00       	call   c0027f7b <__floatsidf>
c000d04b:	83 c4 10             	add    esp,0x10
c000d04e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d052:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d056:	52                   	push   edx
c000d057:	50                   	push   eax
c000d058:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d05c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d060:	e8 87 a8 01 00       	call   c00278ec <__subdf3>
c000d065:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d069:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d06d:	83 c4 20             	add    esp,0x20
c000d070:	6a 00                	push   0x0
c000d072:	6a 00                	push   0x0
c000d074:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d078:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d07c:	e8 66 b1 01 00       	call   c00281e7 <__ltdf2>
c000d081:	83 c4 10             	add    esp,0x10
c000d084:	85 c0                	test   eax,eax
c000d086:	79 1f                	jns    c000d0a7 <sinc_stereo_vari_process+0x223>
c000d088:	68 00 00 f0 3f       	push   0x3ff00000
c000d08d:	6a 00                	push   0x0
c000d08f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d093:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d097:	e8 ff a1 01 00       	call   c002729b <__adddf3>
c000d09c:	83 c4 10             	add    esp,0x10
c000d09f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d0a3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d0a7:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000d0aa:	83 ec 10             	sub    esp,0x10
c000d0ad:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d0b1:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d0b4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d0b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d0bc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d0c0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d0c4:	e8 23 a8 01 00       	call   c00278ec <__subdf3>
c000d0c9:	83 c4 18             	add    esp,0x18
c000d0cc:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d0d0:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d0d4:	52                   	push   edx
c000d0d5:	50                   	push   eax
c000d0d6:	e8 c5 b2 01 00       	call   c00283a0 <lrint>
c000d0db:	0f af f8             	imul   edi,eax
c000d0de:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d0e2:	01 f8                	add    eax,edi
c000d0e4:	99                   	cdq    
c000d0e5:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d0e8:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d0eb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d0ef:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d0f3:	68 00 00 f0 3f       	push   0x3ff00000
c000d0f8:	6a 00                	push   0x0
c000d0fa:	e8 fd aa 01 00       	call   c0027bfc <__divdf3>
c000d0ff:	83 c4 10             	add    esp,0x10
c000d102:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d106:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d10a:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000d10f:	68 23 42 92 0c       	push   0xc924223
c000d114:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d118:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d11c:	e8 7a a1 01 00       	call   c002729b <__adddf3>
c000d121:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000d125:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000d129:	83 c4 20             	add    esp,0x20
c000d12c:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000d134:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000d13c:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000d13f:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000d142:	7d 50                	jge    c000d194 <sinc_stereo_vari_process+0x310>
c000d144:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d147:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d14a:	01 c8                	add    eax,ecx
c000d14c:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d14f:	99                   	cdq    
c000d150:	f7 f9                	idiv   ecx
c000d152:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000d156:	7d 0c                	jge    c000d164 <sinc_stereo_vari_process+0x2e0>
c000d158:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000d15b:	85 ff                	test   edi,edi
c000d15d:	79 6c                	jns    c000d1cb <sinc_stereo_vari_process+0x347>
c000d15f:	e9 e7 00 00 00       	jmp    c000d24b <sinc_stereo_vari_process+0x3c7>
c000d164:	50                   	push   eax
c000d165:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d169:	56                   	push   esi
c000d16a:	53                   	push   ebx
c000d16b:	e8 4c e7 ff ff       	call   c000b8bc <prepare_data>
c000d170:	83 c4 10             	add    esp,0x10
c000d173:	89 c2                	mov    edx,eax
c000d175:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000d178:	85 c0                	test   eax,eax
c000d17a:	0f 85 bf 03 00 00    	jne    c000d53f <sinc_stereo_vari_process+0x6bb>
c000d180:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d183:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d186:	01 c8                	add    eax,ecx
c000d188:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d18b:	99                   	cdq    
c000d18c:	f7 f9                	idiv   ecx
c000d18e:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000d192:	7c c4                	jl     c000d158 <sinc_stereo_vari_process+0x2d4>
c000d194:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d198:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d19c:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000d19f:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000d1a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d1a6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d1aa:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000d1ad:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000d1b0:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000d1b3:	99                   	cdq    
c000d1b4:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d1b7:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000d1ba:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000d1bd:	99                   	cdq    
c000d1be:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d1c1:	31 d2                	xor    edx,edx
c000d1c3:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000d1c6:	e9 74 03 00 00       	jmp    c000d53f <sinc_stereo_vari_process+0x6bb>
c000d1cb:	83 ec 0c             	sub    esp,0xc
c000d1ce:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000d1d1:	e8 a5 ad 01 00       	call   c0027f7b <__floatsidf>
c000d1d6:	83 c4 10             	add    esp,0x10
c000d1d9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d1dd:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d1e1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d1e5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d1e9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d1ed:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d1f1:	e8 a5 a0 01 00       	call   c002729b <__adddf3>
c000d1f6:	83 c4 10             	add    esp,0x10
c000d1f9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d1fd:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d201:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d205:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d209:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d20d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d211:	e8 85 a0 01 00       	call   c002729b <__adddf3>
c000d216:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d219:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d21d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d221:	e8 55 ad 01 00       	call   c0027f7b <__floatsidf>
c000d226:	83 c4 10             	add    esp,0x10
c000d229:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d22d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d231:	52                   	push   edx
c000d232:	50                   	push   eax
c000d233:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d237:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d23b:	e8 a5 af 01 00       	call   c00281e5 <__gedf2>
c000d240:	83 c4 10             	add    esp,0x10
c000d243:	85 c0                	test   eax,eax
c000d245:	0f 89 49 ff ff ff    	jns    c000d194 <sinc_stereo_vari_process+0x310>
c000d24b:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000d24f:	0f 8e ef 00 00 00    	jle    c000d344 <sinc_stereo_vari_process+0x4c0>
c000d255:	83 ec 10             	sub    esp,0x10
c000d258:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d25b:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d25e:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000d261:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000d264:	e8 83 a6 01 00       	call   c00278ec <__subdf3>
c000d269:	83 c4 18             	add    esp,0x18
c000d26c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d270:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d274:	52                   	push   edx
c000d275:	50                   	push   eax
c000d276:	e8 05 b1 01 00       	call   c0028380 <fabs>
c000d27b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d27f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d283:	83 c4 10             	add    esp,0x10
c000d286:	68 df 7c db 3d       	push   0x3ddb7cdf
c000d28b:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000d290:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d294:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d298:	e8 2c af 01 00       	call   c00281c9 <__gtdf2>
c000d29d:	83 c4 10             	add    esp,0x10
c000d2a0:	85 c0                	test   eax,eax
c000d2a2:	0f 8e 9c 00 00 00    	jle    c000d344 <sinc_stereo_vari_process+0x4c0>
c000d2a8:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d2ab:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000d2ae:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d2b2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d2b6:	52                   	push   edx
c000d2b7:	50                   	push   eax
c000d2b8:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d2bb:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d2be:	e8 29 a6 01 00       	call   c00278ec <__subdf3>
c000d2c3:	59                   	pop    ecx
c000d2c4:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d2c8:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000d2cc:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000d2cf:	e8 a7 ac 01 00       	call   c0027f7b <__floatsidf>
c000d2d4:	83 c4 10             	add    esp,0x10
c000d2d7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d2db:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d2df:	52                   	push   edx
c000d2e0:	50                   	push   eax
c000d2e1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d2e5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d2e9:	e8 2a a6 01 00       	call   c0027918 <__muldf3>
c000d2ee:	5f                   	pop    edi
c000d2ef:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d2f3:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000d2f7:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000d2fa:	e8 7c ac 01 00       	call   c0027f7b <__floatsidf>
c000d2ff:	83 c4 10             	add    esp,0x10
c000d302:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d306:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d30a:	52                   	push   edx
c000d30b:	50                   	push   eax
c000d30c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d310:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d314:	e8 e3 a8 01 00       	call   c0027bfc <__divdf3>
c000d319:	83 c4 10             	add    esp,0x10
c000d31c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d320:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d324:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d328:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d32c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d330:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d334:	e8 62 9f 01 00       	call   c002729b <__adddf3>
c000d339:	83 c4 10             	add    esp,0x10
c000d33c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d340:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d344:	83 ec 0c             	sub    esp,0xc
c000d347:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d34a:	e8 2c ac 01 00       	call   c0027f7b <__floatsidf>
c000d34f:	83 c4 10             	add    esp,0x10
c000d352:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d356:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d35a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d35e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d362:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d366:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d36a:	e8 78 ae 01 00       	call   c00281e7 <__ltdf2>
c000d36f:	83 c4 10             	add    esp,0x10
c000d372:	85 c0                	test   eax,eax
c000d374:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d378:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000d37c:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000d380:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000d384:	78 10                	js     c000d396 <sinc_stereo_vari_process+0x512>
c000d386:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000d38a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000d38e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d392:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d396:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d39a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d39e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3a2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3a6:	e8 6d a5 01 00       	call   c0027918 <__muldf3>
c000d3ab:	59                   	pop    ecx
c000d3ac:	5f                   	pop    edi
c000d3ad:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d3b1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d3b5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d3b9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d3bd:	e8 d3 e4 ff ff       	call   c000b895 <double_to_fp>
c000d3c2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3c6:	89 c7                	mov    edi,eax
c000d3c8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3cc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d3d0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d3d4:	e8 3f a5 01 00       	call   c0027918 <__muldf3>
c000d3d9:	83 c4 18             	add    esp,0x18
c000d3dc:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d3e0:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d3e4:	52                   	push   edx
c000d3e5:	50                   	push   eax
c000d3e6:	e8 aa e4 ff ff       	call   c000b895 <double_to_fp>
c000d3eb:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000d3ee:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000d3f2:	83 c4 0c             	add    esp,0xc
c000d3f5:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000d3f8:	8d 04 90             	lea    eax,[eax+edx*4]
c000d3fb:	50                   	push   eax
c000d3fc:	50                   	push   eax
c000d3fd:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d400:	e8 76 ab 01 00       	call   c0027f7b <__floatsidf>
c000d405:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d409:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d40d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d411:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d415:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d419:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d41d:	e8 da a7 01 00       	call   c0027bfc <__divdf3>
c000d422:	83 c4 18             	add    esp,0x18
c000d425:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d429:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d42d:	52                   	push   edx
c000d42e:	89 fa                	mov    edx,edi
c000d430:	50                   	push   eax
c000d431:	89 d8                	mov    eax,ebx
c000d433:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000d437:	e8 02 c7 ff ff       	call   c0009b3e <calc_output_stereo>
c000d43c:	83 43 14 02          	add    DWORD PTR [ebx+0x14],0x2
c000d440:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d444:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d448:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d44c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d450:	e8 a7 a7 01 00       	call   c0027bfc <__divdf3>
c000d455:	83 c4 10             	add    esp,0x10
c000d458:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d45c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d460:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d464:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d468:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d46c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d470:	e8 26 9e 01 00       	call   c002729b <__adddf3>
c000d475:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000d479:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000d47d:	83 c4 18             	add    esp,0x18
c000d480:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d484:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d488:	e8 13 af 01 00       	call   c00283a0 <lrint>
c000d48d:	83 ec 0c             	sub    esp,0xc
c000d490:	50                   	push   eax
c000d491:	e8 e5 aa 01 00       	call   c0027f7b <__floatsidf>
c000d496:	83 c4 10             	add    esp,0x10
c000d499:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d49d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d4a1:	52                   	push   edx
c000d4a2:	50                   	push   eax
c000d4a3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4a7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4ab:	e8 3c a4 01 00       	call   c00278ec <__subdf3>
c000d4b0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d4b4:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d4b8:	83 c4 20             	add    esp,0x20
c000d4bb:	6a 00                	push   0x0
c000d4bd:	6a 00                	push   0x0
c000d4bf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d4c3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d4c7:	e8 1b ad 01 00       	call   c00281e7 <__ltdf2>
c000d4cc:	83 c4 10             	add    esp,0x10
c000d4cf:	85 c0                	test   eax,eax
c000d4d1:	79 20                	jns    c000d4f3 <sinc_stereo_vari_process+0x66f>
c000d4d3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d4d7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d4db:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d4df:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d4e3:	e8 b3 9d 01 00       	call   c002729b <__adddf3>
c000d4e8:	83 c4 10             	add    esp,0x10
c000d4eb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d4ef:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d4f3:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000d4f6:	83 ec 10             	sub    esp,0x10
c000d4f9:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d4fd:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d500:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d504:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d508:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d50c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d510:	e8 d7 a3 01 00       	call   c00278ec <__subdf3>
c000d515:	83 c4 18             	add    esp,0x18
c000d518:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d51c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d520:	52                   	push   edx
c000d521:	50                   	push   eax
c000d522:	e8 79 ae 01 00       	call   c00283a0 <lrint>
c000d527:	0f af f8             	imul   edi,eax
c000d52a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000d52e:	83 c4 10             	add    esp,0x10
c000d531:	01 f8                	add    eax,edi
c000d533:	99                   	cdq    
c000d534:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d537:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d53a:	e9 fd fb ff ff       	jmp    c000d13c <sinc_stereo_vari_process+0x2b8>
c000d53f:	83 c4 4c             	add    esp,0x4c
c000d542:	89 d0                	mov    eax,edx
c000d544:	5b                   	pop    ebx
c000d545:	5e                   	pop    esi
c000d546:	5f                   	pop    edi
c000d547:	5d                   	pop    ebp
c000d548:	c3                   	ret    

c000d549 <sinc_mono_vari_process>:
c000d549:	55                   	push   ebp
c000d54a:	ba 05 00 00 00       	mov    edx,0x5
c000d54f:	57                   	push   edi
c000d550:	56                   	push   esi
c000d551:	53                   	push   ebx
c000d552:	83 ec 4c             	sub    esp,0x4c
c000d555:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d559:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000d55d:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000d560:	85 db                	test   ebx,ebx
c000d562:	0f 84 c1 06 00 00    	je     c000dc29 <sinc_mono_vari_process+0x6e0>
c000d568:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000d56b:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d56e:	0f af c7             	imul   eax,edi
c000d571:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000d574:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000d577:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000d57e:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000d585:	0f af c7             	imul   eax,edi
c000d588:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000d58b:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d58f:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000d592:	8b 00                	mov    eax,DWORD PTR [eax]
c000d594:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d598:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d59c:	68 00 00 70 3f       	push   0x3f700000
c000d5a1:	6a 00                	push   0x0
c000d5a3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5a7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5ab:	e8 37 ac 01 00       	call   c00281e7 <__ltdf2>
c000d5b0:	83 c4 10             	add    esp,0x10
c000d5b3:	ba 16 00 00 00       	mov    edx,0x16
c000d5b8:	85 c0                	test   eax,eax
c000d5ba:	0f 88 69 06 00 00    	js     c000dc29 <sinc_mono_vari_process+0x6e0>
c000d5c0:	68 00 00 70 40       	push   0x40700000
c000d5c5:	6a 00                	push   0x0
c000d5c7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5cb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5cf:	e8 f5 ab 01 00       	call   c00281c9 <__gtdf2>
c000d5d4:	83 c4 10             	add    esp,0x10
c000d5d7:	ba 16 00 00 00       	mov    edx,0x16
c000d5dc:	85 c0                	test   eax,eax
c000d5de:	0f 8f 45 06 00 00    	jg     c000dc29 <sinc_mono_vari_process+0x6e0>
c000d5e4:	83 ec 0c             	sub    esp,0xc
c000d5e7:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000d5ea:	e8 8c a9 01 00       	call   c0027f7b <__floatsidf>
c000d5ef:	83 c4 10             	add    esp,0x10
c000d5f2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d5f6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d5fa:	68 00 00 00 40       	push   0x40000000
c000d5ff:	6a 00                	push   0x0
c000d601:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d605:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d609:	e8 8d 9c 01 00       	call   c002729b <__adddf3>
c000d60e:	59                   	pop    ecx
c000d60f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000d613:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000d617:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d61a:	e8 5c a9 01 00       	call   c0027f7b <__floatsidf>
c000d61f:	83 c4 10             	add    esp,0x10
c000d622:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d626:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d62a:	52                   	push   edx
c000d62b:	50                   	push   eax
c000d62c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d630:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d634:	e8 c3 a5 01 00       	call   c0027bfc <__divdf3>
c000d639:	83 c4 10             	add    esp,0x10
c000d63c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d640:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d644:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000d647:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000d64a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d64e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d652:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d656:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d65a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d65e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d662:	e8 62 ab 01 00       	call   c00281c9 <__gtdf2>
c000d667:	83 c4 10             	add    esp,0x10
c000d66a:	85 c0                	test   eax,eax
c000d66c:	7e 2d                	jle    c000d69b <sinc_mono_vari_process+0x152>
c000d66e:	68 00 00 f0 3f       	push   0x3ff00000
c000d673:	6a 00                	push   0x0
c000d675:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d679:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d67d:	e8 65 ab 01 00       	call   c00281e7 <__ltdf2>
c000d682:	83 c4 10             	add    esp,0x10
c000d685:	85 c0                	test   eax,eax
c000d687:	79 4d                	jns    c000d6d6 <sinc_mono_vari_process+0x18d>
c000d689:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d68d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d691:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d695:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d699:	eb 1b                	jmp    c000d6b6 <sinc_mono_vari_process+0x16d>
c000d69b:	68 00 00 f0 3f       	push   0x3ff00000
c000d6a0:	6a 00                	push   0x0
c000d6a2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d6a6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d6aa:	e8 38 ab 01 00       	call   c00281e7 <__ltdf2>
c000d6af:	83 c4 10             	add    esp,0x10
c000d6b2:	85 c0                	test   eax,eax
c000d6b4:	79 20                	jns    c000d6d6 <sinc_mono_vari_process+0x18d>
c000d6b6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d6ba:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d6be:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d6c2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d6c6:	e8 31 a5 01 00       	call   c0027bfc <__divdf3>
c000d6cb:	83 c4 10             	add    esp,0x10
c000d6ce:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d6d2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d6d6:	50                   	push   eax
c000d6d7:	50                   	push   eax
c000d6d8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d6dc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d6e0:	e8 bb ac 01 00       	call   c00283a0 <lrint>
c000d6e5:	40                   	inc    eax
c000d6e6:	0f af c7             	imul   eax,edi
c000d6e9:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d6ed:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d6f1:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000d6f4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000d6f7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d6fb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d6ff:	58                   	pop    eax
c000d700:	5a                   	pop    edx
c000d701:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d705:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d709:	e8 92 ac 01 00       	call   c00283a0 <lrint>
c000d70e:	83 ec 0c             	sub    esp,0xc
c000d711:	50                   	push   eax
c000d712:	e8 64 a8 01 00       	call   c0027f7b <__floatsidf>
c000d717:	83 c4 10             	add    esp,0x10
c000d71a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d71e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d722:	52                   	push   edx
c000d723:	50                   	push   eax
c000d724:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d728:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d72c:	e8 bb a1 01 00       	call   c00278ec <__subdf3>
c000d731:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d735:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d739:	83 c4 20             	add    esp,0x20
c000d73c:	6a 00                	push   0x0
c000d73e:	6a 00                	push   0x0
c000d740:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d744:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d748:	e8 9a aa 01 00       	call   c00281e7 <__ltdf2>
c000d74d:	83 c4 10             	add    esp,0x10
c000d750:	85 c0                	test   eax,eax
c000d752:	79 1f                	jns    c000d773 <sinc_mono_vari_process+0x22a>
c000d754:	68 00 00 f0 3f       	push   0x3ff00000
c000d759:	6a 00                	push   0x0
c000d75b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d75f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d763:	e8 33 9b 01 00       	call   c002729b <__adddf3>
c000d768:	83 c4 10             	add    esp,0x10
c000d76b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d76f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d773:	8b 6b 34             	mov    ebp,DWORD PTR [ebx+0x34]
c000d776:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d779:	83 ec 10             	sub    esp,0x10
c000d77c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d780:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d784:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d788:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d78c:	e8 5b a1 01 00       	call   c00278ec <__subdf3>
c000d791:	83 c4 18             	add    esp,0x18
c000d794:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d798:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d79c:	52                   	push   edx
c000d79d:	50                   	push   eax
c000d79e:	e8 fd ab 01 00       	call   c00283a0 <lrint>
c000d7a3:	0f af f8             	imul   edi,eax
c000d7a6:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000d7a9:	31 ff                	xor    edi,edi
c000d7ab:	bd 00 00 f0 3f       	mov    ebp,0x3ff00000
c000d7b0:	99                   	cdq    
c000d7b1:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d7b4:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d7b7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d7bb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d7bf:	55                   	push   ebp
c000d7c0:	57                   	push   edi
c000d7c1:	e8 36 a4 01 00       	call   c0027bfc <__divdf3>
c000d7c6:	83 c4 10             	add    esp,0x10
c000d7c9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d7cd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d7d1:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000d7d6:	68 23 42 92 0c       	push   0xc924223
c000d7db:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7df:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7e3:	e8 b3 9a 01 00       	call   c002729b <__adddf3>
c000d7e8:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000d7ec:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c000d7f0:	83 c4 20             	add    esp,0x20
c000d7f3:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000d7f7:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c000d7fb:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000d7fe:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000d801:	7d 54                	jge    c000d857 <sinc_mono_vari_process+0x30e>
c000d803:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d806:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d809:	01 c8                	add    eax,ecx
c000d80b:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d80e:	99                   	cdq    
c000d80f:	f7 f9                	idiv   ecx
c000d811:	39 54 24 24          	cmp    DWORD PTR [esp+0x24],edx
c000d815:	7d 0c                	jge    c000d823 <sinc_mono_vari_process+0x2da>
c000d817:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000d81a:	85 ff                	test   edi,edi
c000d81c:	79 73                	jns    c000d891 <sinc_mono_vari_process+0x348>
c000d81e:	e9 ee 00 00 00       	jmp    c000d911 <sinc_mono_vari_process+0x3c8>
c000d823:	50                   	push   eax
c000d824:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000d828:	56                   	push   esi
c000d829:	53                   	push   ebx
c000d82a:	e8 8d e0 ff ff       	call   c000b8bc <prepare_data>
c000d82f:	89 c2                	mov    edx,eax
c000d831:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d835:	83 c4 10             	add    esp,0x10
c000d838:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000d83b:	85 d2                	test   edx,edx
c000d83d:	0f 85 e6 03 00 00    	jne    c000dc29 <sinc_mono_vari_process+0x6e0>
c000d843:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d846:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d849:	01 c8                	add    eax,ecx
c000d84b:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d84e:	99                   	cdq    
c000d84f:	f7 f9                	idiv   ecx
c000d851:	39 54 24 24          	cmp    DWORD PTR [esp+0x24],edx
c000d855:	7c c0                	jl     c000d817 <sinc_mono_vari_process+0x2ce>
c000d857:	8b 4c 24 60          	mov    ecx,DWORD PTR [esp+0x60]
c000d85b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d85f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d863:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c000d866:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c000d869:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d86d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d871:	89 01                	mov    DWORD PTR [ecx],eax
c000d873:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000d876:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000d879:	99                   	cdq    
c000d87a:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d87d:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000d880:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000d883:	99                   	cdq    
c000d884:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d887:	31 d2                	xor    edx,edx
c000d889:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000d88c:	e9 98 03 00 00       	jmp    c000dc29 <sinc_mono_vari_process+0x6e0>
c000d891:	83 ec 0c             	sub    esp,0xc
c000d894:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000d897:	e8 df a6 01 00       	call   c0027f7b <__floatsidf>
c000d89c:	83 c4 10             	add    esp,0x10
c000d89f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d8a3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d8a7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d8ab:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d8af:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8b3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8b7:	e8 df 99 01 00       	call   c002729b <__adddf3>
c000d8bc:	83 c4 10             	add    esp,0x10
c000d8bf:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d8c3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d8c7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d8cb:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d8cf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8d3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8d7:	e8 bf 99 01 00       	call   c002729b <__adddf3>
c000d8dc:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d8df:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d8e3:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d8e7:	e8 8f a6 01 00       	call   c0027f7b <__floatsidf>
c000d8ec:	83 c4 10             	add    esp,0x10
c000d8ef:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d8f3:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d8f7:	52                   	push   edx
c000d8f8:	50                   	push   eax
c000d8f9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8fd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d901:	e8 c3 a8 01 00       	call   c00281c9 <__gtdf2>
c000d906:	83 c4 10             	add    esp,0x10
c000d909:	85 c0                	test   eax,eax
c000d90b:	0f 8f 46 ff ff ff    	jg     c000d857 <sinc_mono_vari_process+0x30e>
c000d911:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000d915:	0f 8e f5 00 00 00    	jle    c000da10 <sinc_mono_vari_process+0x4c7>
c000d91b:	83 ec 10             	sub    esp,0x10
c000d91e:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d921:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d924:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c000d928:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000d92b:	ff 30                	push   DWORD PTR [eax]
c000d92d:	e8 ba 9f 01 00       	call   c00278ec <__subdf3>
c000d932:	83 c4 18             	add    esp,0x18
c000d935:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d939:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d93d:	52                   	push   edx
c000d93e:	50                   	push   eax
c000d93f:	e8 3c aa 01 00       	call   c0028380 <fabs>
c000d944:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d948:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d94c:	83 c4 10             	add    esp,0x10
c000d94f:	68 df 7c db 3d       	push   0x3ddb7cdf
c000d954:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000d959:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d95d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d961:	e8 63 a8 01 00       	call   c00281c9 <__gtdf2>
c000d966:	83 c4 10             	add    esp,0x10
c000d969:	85 c0                	test   eax,eax
c000d96b:	0f 8e 9f 00 00 00    	jle    c000da10 <sinc_mono_vari_process+0x4c7>
c000d971:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d975:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000d978:	8b 00                	mov    eax,DWORD PTR [eax]
c000d97a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d97e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d982:	52                   	push   edx
c000d983:	50                   	push   eax
c000d984:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d987:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d98a:	e8 5d 9f 01 00       	call   c00278ec <__subdf3>
c000d98f:	5f                   	pop    edi
c000d990:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d994:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000d998:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000d99b:	e8 db a5 01 00       	call   c0027f7b <__floatsidf>
c000d9a0:	83 c4 10             	add    esp,0x10
c000d9a3:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d9a7:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d9ab:	52                   	push   edx
c000d9ac:	50                   	push   eax
c000d9ad:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9b1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9b5:	e8 5e 9f 01 00       	call   c0027918 <__muldf3>
c000d9ba:	5d                   	pop    ebp
c000d9bb:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d9bf:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000d9c3:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000d9c6:	e8 b0 a5 01 00       	call   c0027f7b <__floatsidf>
c000d9cb:	83 c4 10             	add    esp,0x10
c000d9ce:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d9d2:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d9d6:	52                   	push   edx
c000d9d7:	50                   	push   eax
c000d9d8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9dc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9e0:	e8 17 a2 01 00       	call   c0027bfc <__divdf3>
c000d9e5:	83 c4 10             	add    esp,0x10
c000d9e8:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d9ec:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d9f0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d9f4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d9f8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9fc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da00:	e8 96 98 01 00       	call   c002729b <__adddf3>
c000da05:	83 c4 10             	add    esp,0x10
c000da08:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000da0c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000da10:	83 ec 0c             	sub    esp,0xc
c000da13:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000da16:	e8 60 a5 01 00       	call   c0027f7b <__floatsidf>
c000da1b:	83 c4 10             	add    esp,0x10
c000da1e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000da22:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000da26:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da2a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da2e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da32:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da36:	e8 ac a7 01 00       	call   c00281e7 <__ltdf2>
c000da3b:	83 c4 10             	add    esp,0x10
c000da3e:	85 c0                	test   eax,eax
c000da40:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000da44:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c000da48:	89 7c 24 28          	mov    DWORD PTR [esp+0x28],edi
c000da4c:	89 6c 24 2c          	mov    DWORD PTR [esp+0x2c],ebp
c000da50:	78 10                	js     c000da62 <sinc_mono_vari_process+0x519>
c000da52:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000da56:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000da5a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000da5e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000da62:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000da66:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000da6a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000da6e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000da72:	e8 a1 9e 01 00       	call   c0027918 <__muldf3>
c000da77:	59                   	pop    ecx
c000da78:	5f                   	pop    edi
c000da79:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000da7d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000da81:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da85:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da89:	e8 07 de ff ff       	call   c000b895 <double_to_fp>
c000da8e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000da92:	89 c7                	mov    edi,eax
c000da94:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000da98:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000da9c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000daa0:	e8 73 9e 01 00       	call   c0027918 <__muldf3>
c000daa5:	83 c4 18             	add    esp,0x18
c000daa8:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000daac:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000dab0:	52                   	push   edx
c000dab1:	50                   	push   eax
c000dab2:	e8 de dd ff ff       	call   c000b895 <double_to_fp>
c000dab7:	83 ec 0c             	sub    esp,0xc
c000daba:	89 c5                	mov    ebp,eax
c000dabc:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000dabf:	e8 b7 a4 01 00       	call   c0027f7b <__floatsidf>
c000dac4:	83 c4 10             	add    esp,0x10
c000dac7:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000dacb:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000dacf:	52                   	push   edx
c000dad0:	50                   	push   eax
c000dad1:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dad5:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dad9:	e8 1e a1 01 00       	call   c0027bfc <__divdf3>
c000dade:	83 c4 10             	add    esp,0x10
c000dae1:	89 e9                	mov    ecx,ebp
c000dae3:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000dae7:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000daeb:	89 d8                	mov    eax,ebx
c000daed:	89 fa                	mov    edx,edi
c000daef:	e8 ee bd ff ff       	call   c00098e2 <calc_output_single>
c000daf4:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c000daf7:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c000dafa:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000dafe:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000db02:	52                   	push   edx
c000db03:	50                   	push   eax
c000db04:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000db08:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000db0c:	e8 07 9e 01 00       	call   c0027918 <__muldf3>
c000db11:	59                   	pop    ecx
c000db12:	59                   	pop    ecx
c000db13:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000db17:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000db1b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db1f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db23:	e8 c3 a6 01 00       	call   c00281eb <__truncdfsf2>
c000db28:	83 c4 10             	add    esp,0x10
c000db2b:	89 04 af             	mov    DWORD PTR [edi+ebp*4],eax
c000db2e:	ff 43 14             	inc    DWORD PTR [ebx+0x14]
c000db31:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000db35:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000db39:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db3d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db41:	e8 b6 a0 01 00       	call   c0027bfc <__divdf3>
c000db46:	83 c4 10             	add    esp,0x10
c000db49:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000db4d:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000db51:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db55:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db59:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db5d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db61:	e8 35 97 01 00       	call   c002729b <__adddf3>
c000db66:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000db6a:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000db6e:	83 c4 18             	add    esp,0x18
c000db71:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db75:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db79:	e8 22 a8 01 00       	call   c00283a0 <lrint>
c000db7e:	83 ec 0c             	sub    esp,0xc
c000db81:	50                   	push   eax
c000db82:	e8 f4 a3 01 00       	call   c0027f7b <__floatsidf>
c000db87:	83 c4 10             	add    esp,0x10
c000db8a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000db8e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000db92:	52                   	push   edx
c000db93:	50                   	push   eax
c000db94:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db98:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db9c:	e8 4b 9d 01 00       	call   c00278ec <__subdf3>
c000dba1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000dba5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000dba9:	83 c4 20             	add    esp,0x20
c000dbac:	6a 00                	push   0x0
c000dbae:	6a 00                	push   0x0
c000dbb0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbb4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbb8:	e8 2a a6 01 00       	call   c00281e7 <__ltdf2>
c000dbbd:	83 c4 10             	add    esp,0x10
c000dbc0:	85 c0                	test   eax,eax
c000dbc2:	79 20                	jns    c000dbe4 <sinc_mono_vari_process+0x69b>
c000dbc4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbc8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbcc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbd0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbd4:	e8 c2 96 01 00       	call   c002729b <__adddf3>
c000dbd9:	83 c4 10             	add    esp,0x10
c000dbdc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dbe0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dbe4:	8b 6b 34             	mov    ebp,DWORD PTR [ebx+0x34]
c000dbe7:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000dbea:	83 ec 10             	sub    esp,0x10
c000dbed:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbf1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbf5:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dbf9:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dbfd:	e8 ea 9c 01 00       	call   c00278ec <__subdf3>
c000dc02:	83 c4 18             	add    esp,0x18
c000dc05:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000dc09:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000dc0d:	52                   	push   edx
c000dc0e:	50                   	push   eax
c000dc0f:	e8 8c a7 01 00       	call   c00283a0 <lrint>
c000dc14:	83 c4 10             	add    esp,0x10
c000dc17:	0f af f8             	imul   edi,eax
c000dc1a:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000dc1d:	99                   	cdq    
c000dc1e:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000dc21:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000dc24:	e9 d2 fb ff ff       	jmp    c000d7fb <sinc_mono_vari_process+0x2b2>
c000dc29:	83 c4 4c             	add    esp,0x4c
c000dc2c:	89 d0                	mov    eax,edx
c000dc2e:	5b                   	pop    ebx
c000dc2f:	5e                   	pop    esi
c000dc30:	5f                   	pop    edi
c000dc31:	5d                   	pop    ebp
c000dc32:	c3                   	ret    

c000dc33 <sinc_get_name>:
c000dc33:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000dc37:	31 c0                	xor    eax,eax
c000dc39:	83 fa 02             	cmp    edx,0x2
c000dc3c:	77 07                	ja     c000dc45 <sinc_get_name+0x12>
c000dc3e:	8b 04 95 44 9c 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd63bc]
c000dc45:	c3                   	ret    

c000dc46 <sinc_get_description>:
c000dc46:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000dc4a:	31 c0                	xor    eax,eax
c000dc4c:	83 fa 02             	cmp    edx,0x2
c000dc4f:	77 07                	ja     c000dc58 <sinc_get_description+0x12>
c000dc51:	8b 04 95 38 9c 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd63c8]
c000dc58:	c3                   	ret    

c000dc59 <sinc_set_converter>:
c000dc59:	53                   	push   ebx
c000dc5a:	81 ec 58 08 00 00    	sub    esp,0x858
c000dc60:	8b 9c 24 60 08 00 00 	mov    ebx,DWORD PTR [esp+0x860]
c000dc67:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000dc6a:	85 c0                	test   eax,eax
c000dc6c:	74 13                	je     c000dc81 <sinc_set_converter+0x28>
c000dc6e:	83 ec 0c             	sub    esp,0xc
c000dc71:	50                   	push   eax
c000dc72:	e8 32 19 00 00       	call   c000f5a9 <free>
c000dc77:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000dc7e:	83 c4 10             	add    esp,0x10
c000dc81:	50                   	push   eax
c000dc82:	68 44 08 00 00       	push   0x844
c000dc87:	6a 00                	push   0x0
c000dc89:	8d 44 24 18          	lea    eax,[esp+0x18]
c000dc8d:	50                   	push   eax
c000dc8e:	e8 bd 2a ff ff       	call   c0000750 <memset>
c000dc93:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000dc96:	83 c4 10             	add    esp,0x10
c000dc99:	b8 0b 00 00 00       	mov    eax,0xb
c000dc9e:	81 fa 80 00 00 00    	cmp    edx,0x80
c000dca4:	7f 6e                	jg     c000dd14 <sinc_set_converter+0xbb>
c000dca6:	83 fa 01             	cmp    edx,0x1
c000dca9:	75 10                	jne    c000dcbb <sinc_set_converter+0x62>
c000dcab:	c7 43 24 49 d5 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000d549
c000dcb2:	c7 43 20 49 d5 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000d549
c000dcb9:	eb 4d                	jmp    c000dd08 <sinc_set_converter+0xaf>
c000dcbb:	83 fa 02             	cmp    edx,0x2
c000dcbe:	75 10                	jne    c000dcd0 <sinc_set_converter+0x77>
c000dcc0:	c7 43 24 84 ce 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000ce84
c000dcc7:	c7 43 20 84 ce 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000ce84
c000dcce:	eb 38                	jmp    c000dd08 <sinc_set_converter+0xaf>
c000dcd0:	83 fa 04             	cmp    edx,0x4
c000dcd3:	75 10                	jne    c000dce5 <sinc_set_converter+0x8c>
c000dcd5:	c7 43 24 bf c7 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000c7bf
c000dcdc:	c7 43 20 bf c7 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000c7bf
c000dce3:	eb 23                	jmp    c000dd08 <sinc_set_converter+0xaf>
c000dce5:	83 fa 06             	cmp    edx,0x6
c000dce8:	75 10                	jne    c000dcfa <sinc_set_converter+0xa1>
c000dcea:	c7 43 24 fa c0 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000c0fa
c000dcf1:	c7 43 20 fa c0 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000c0fa
c000dcf8:	eb 0e                	jmp    c000dd08 <sinc_set_converter+0xaf>
c000dcfa:	c7 43 24 36 ba 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000ba36
c000dd01:	c7 43 20 36 ba 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000ba36
c000dd08:	c7 43 28 e9 ac 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000ace9
c000dd0f:	b8 0a 00 00 00       	mov    eax,0xa
c000dd14:	81 c4 58 08 00 00    	add    esp,0x858
c000dd1a:	5b                   	pop    ebx
c000dd1b:	c3                   	ret    

c000dd1c <zoh_vari_process>:
c000dd1c:	55                   	push   ebp
c000dd1d:	31 d2                	xor    edx,edx
c000dd1f:	57                   	push   edi
c000dd20:	56                   	push   esi
c000dd21:	53                   	push   ebx
c000dd22:	83 ec 3c             	sub    esp,0x3c
c000dd25:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000dd29:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c000dd2d:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c000dd31:	0f 8e 80 06 00 00    	jle    c000e3b7 <zoh_vari_process+0x69b>
c000dd37:	8b 5f 1c             	mov    ebx,DWORD PTR [edi+0x1c]
c000dd3a:	ba 05 00 00 00       	mov    edx,0x5
c000dd3f:	85 db                	test   ebx,ebx
c000dd41:	0f 84 70 06 00 00    	je     c000e3b7 <zoh_vari_process+0x69b>
c000dd47:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000dd4a:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000dd4e:	74 19                	je     c000dd69 <zoh_vari_process+0x4d>
c000dd50:	31 d2                	xor    edx,edx
c000dd52:	39 c2                	cmp    edx,eax
c000dd54:	7d 0c                	jge    c000dd62 <zoh_vari_process+0x46>
c000dd56:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000dd58:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c000dd5b:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c000dd5f:	42                   	inc    edx
c000dd60:	eb f0                	jmp    c000dd52 <zoh_vari_process+0x36>
c000dd62:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000dd69:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000dd6c:	0f af d0             	imul   edx,eax
c000dd6f:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000dd72:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c000dd76:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000dd7d:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000dd80:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000dd87:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000dd8a:	8b 07                	mov    eax,DWORD PTR [edi]
c000dd8c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dd90:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dd94:	68 00 00 70 3f       	push   0x3f700000
c000dd99:	6a 00                	push   0x0
c000dd9b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dd9f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dda3:	e8 3f a4 01 00       	call   c00281e7 <__ltdf2>
c000dda8:	83 c4 10             	add    esp,0x10
c000ddab:	ba 16 00 00 00       	mov    edx,0x16
c000ddb0:	85 c0                	test   eax,eax
c000ddb2:	0f 88 ff 05 00 00    	js     c000e3b7 <zoh_vari_process+0x69b>
c000ddb8:	68 00 00 70 40       	push   0x40700000
c000ddbd:	6a 00                	push   0x0
c000ddbf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ddc3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ddc7:	e8 fd a3 01 00       	call   c00281c9 <__gtdf2>
c000ddcc:	83 c4 10             	add    esp,0x10
c000ddcf:	ba 16 00 00 00       	mov    edx,0x16
c000ddd4:	85 c0                	test   eax,eax
c000ddd6:	0f 8f db 05 00 00    	jg     c000e3b7 <zoh_vari_process+0x69b>
c000dddc:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000dddf:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c000dde2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000dde6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ddea:	68 00 00 f0 3f       	push   0x3ff00000
c000ddef:	6a 00                	push   0x0
c000ddf1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ddf5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ddf9:	e8 e9 a3 01 00       	call   c00281e7 <__ltdf2>
c000ddfe:	83 c4 10             	add    esp,0x10
c000de01:	85 c0                	test   eax,eax
c000de03:	0f 89 da 01 00 00    	jns    c000dfe3 <zoh_vari_process+0x2c7>
c000de09:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c000de0c:	39 6b 18             	cmp    DWORD PTR [ebx+0x18],ebp
c000de0f:	0f 8d ce 01 00 00    	jge    c000dfe3 <zoh_vari_process+0x2c7>
c000de15:	83 ec 0c             	sub    esp,0xc
c000de18:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000de1b:	e8 5b a1 01 00       	call   c0027f7b <__floatsidf>
c000de20:	83 c4 10             	add    esp,0x10
c000de23:	89 04 24             	mov    DWORD PTR [esp],eax
c000de26:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000de2a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de2e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de32:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de36:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de3a:	e8 d9 9a 01 00       	call   c0027918 <__muldf3>
c000de3f:	59                   	pop    ecx
c000de40:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000de44:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000de48:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000de4b:	e8 2b a1 01 00       	call   c0027f7b <__floatsidf>
c000de50:	83 c4 10             	add    esp,0x10
c000de53:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000de57:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000de5b:	52                   	push   edx
c000de5c:	50                   	push   eax
c000de5d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de61:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de65:	e8 31 94 01 00       	call   c002729b <__adddf3>
c000de6a:	59                   	pop    ecx
c000de6b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000de6f:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000de73:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c000de76:	e8 00 a1 01 00       	call   c0027f7b <__floatsidf>
c000de7b:	83 c4 10             	add    esp,0x10
c000de7e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000de82:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000de86:	52                   	push   edx
c000de87:	50                   	push   eax
c000de88:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de8c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de90:	e8 50 a3 01 00       	call   c00281e5 <__gedf2>
c000de95:	83 c4 10             	add    esp,0x10
c000de98:	85 c0                	test   eax,eax
c000de9a:	0f 89 43 01 00 00    	jns    c000dfe3 <zoh_vari_process+0x2c7>
c000dea0:	85 ed                	test   ebp,ebp
c000dea2:	0f 8e ec 00 00 00    	jle    c000df94 <zoh_vari_process+0x278>
c000dea8:	83 ec 10             	sub    esp,0x10
c000deab:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000deae:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000deb1:	ff 77 04             	push   DWORD PTR [edi+0x4]
c000deb4:	ff 37                	push   DWORD PTR [edi]
c000deb6:	e8 31 9a 01 00       	call   c00278ec <__subdf3>
c000debb:	83 c4 18             	add    esp,0x18
c000debe:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dec2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dec6:	52                   	push   edx
c000dec7:	50                   	push   eax
c000dec8:	e8 b3 a4 01 00       	call   c0028380 <fabs>
c000decd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ded1:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ded5:	83 c4 10             	add    esp,0x10
c000ded8:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000dedd:	68 23 42 92 0c       	push   0xc924223
c000dee2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dee6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000deea:	e8 da a2 01 00       	call   c00281c9 <__gtdf2>
c000deef:	83 c4 10             	add    esp,0x10
c000def2:	85 c0                	test   eax,eax
c000def4:	0f 8e 9a 00 00 00    	jle    c000df94 <zoh_vari_process+0x278>
c000defa:	8b 07                	mov    eax,DWORD PTR [edi]
c000defc:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000deff:	89 04 24             	mov    DWORD PTR [esp],eax
c000df02:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000df06:	52                   	push   edx
c000df07:	50                   	push   eax
c000df08:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000df0b:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000df0e:	e8 d9 99 01 00       	call   c00278ec <__subdf3>
c000df13:	59                   	pop    ecx
c000df14:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000df18:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000df1c:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000df1f:	e8 57 a0 01 00       	call   c0027f7b <__floatsidf>
c000df24:	83 c4 10             	add    esp,0x10
c000df27:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000df2b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000df2f:	52                   	push   edx
c000df30:	50                   	push   eax
c000df31:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df35:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df39:	e8 da 99 01 00       	call   c0027918 <__muldf3>
c000df3e:	5d                   	pop    ebp
c000df3f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000df43:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000df47:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000df4a:	e8 2c a0 01 00       	call   c0027f7b <__floatsidf>
c000df4f:	83 c4 10             	add    esp,0x10
c000df52:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000df56:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000df5a:	52                   	push   edx
c000df5b:	50                   	push   eax
c000df5c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df60:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df64:	e8 93 9c 01 00       	call   c0027bfc <__divdf3>
c000df69:	83 c4 10             	add    esp,0x10
c000df6c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000df70:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000df74:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000df78:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000df7c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df80:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df84:	e8 12 93 01 00       	call   c002729b <__adddf3>
c000df89:	83 c4 10             	add    esp,0x10
c000df8c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000df90:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000df94:	31 c0                	xor    eax,eax
c000df96:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c000df99:	7e 13                	jle    c000dfae <zoh_vari_process+0x292>
c000df9b:	8b 6c 83 1c          	mov    ebp,DWORD PTR [ebx+eax*4+0x1c]
c000df9f:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000dfa2:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000dfa5:	40                   	inc    eax
c000dfa6:	89 2c 8a             	mov    DWORD PTR [edx+ecx*4],ebp
c000dfa9:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000dfac:	eb e8                	jmp    c000df96 <zoh_vari_process+0x27a>
c000dfae:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dfb2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dfb6:	68 00 00 f0 3f       	push   0x3ff00000
c000dfbb:	6a 00                	push   0x0
c000dfbd:	e8 3a 9c 01 00       	call   c0027bfc <__divdf3>
c000dfc2:	83 c4 10             	add    esp,0x10
c000dfc5:	89 04 24             	mov    DWORD PTR [esp],eax
c000dfc8:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000dfcc:	52                   	push   edx
c000dfcd:	50                   	push   eax
c000dfce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfd2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfd6:	e8 c0 92 01 00       	call   c002729b <__adddf3>
c000dfdb:	83 c4 10             	add    esp,0x10
c000dfde:	e9 ff fd ff ff       	jmp    c000dde2 <zoh_vari_process+0xc6>
c000dfe3:	55                   	push   ebp
c000dfe4:	55                   	push   ebp
c000dfe5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfe9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfed:	e8 ae a3 01 00       	call   c00283a0 <lrint>
c000dff2:	83 ec 0c             	sub    esp,0xc
c000dff5:	50                   	push   eax
c000dff6:	e8 80 9f 01 00       	call   c0027f7b <__floatsidf>
c000dffb:	83 c4 10             	add    esp,0x10
c000dffe:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e002:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e006:	52                   	push   edx
c000e007:	50                   	push   eax
c000e008:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e00c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e010:	e8 d7 98 01 00       	call   c00278ec <__subdf3>
c000e015:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e019:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e01d:	83 c4 20             	add    esp,0x20
c000e020:	6a 00                	push   0x0
c000e022:	6a 00                	push   0x0
c000e024:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e028:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e02c:	e8 b6 a1 01 00       	call   c00281e7 <__ltdf2>
c000e031:	83 c4 10             	add    esp,0x10
c000e034:	85 c0                	test   eax,eax
c000e036:	79 1e                	jns    c000e056 <zoh_vari_process+0x33a>
c000e038:	68 00 00 f0 3f       	push   0x3ff00000
c000e03d:	6a 00                	push   0x0
c000e03f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e043:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e047:	e8 4f 92 01 00       	call   c002729b <__adddf3>
c000e04c:	83 c4 10             	add    esp,0x10
c000e04f:	89 04 24             	mov    DWORD PTR [esp],eax
c000e052:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e056:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000e059:	83 ec 10             	sub    esp,0x10
c000e05c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e060:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e064:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e068:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e06c:	e8 7b 98 01 00       	call   c00278ec <__subdf3>
c000e071:	83 c4 18             	add    esp,0x18
c000e074:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e078:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e07c:	52                   	push   edx
c000e07d:	50                   	push   eax
c000e07e:	e8 1d a3 01 00       	call   c00283a0 <lrint>
c000e083:	83 c4 10             	add    esp,0x10
c000e086:	0f af e8             	imul   ebp,eax
c000e089:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000e08c:	01 6b 10             	add    DWORD PTR [ebx+0x10],ebp
c000e08f:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c000e093:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e096:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000e099:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e09d:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c000e0a0:	0f 8d 7a 02 00 00    	jge    c000e320 <zoh_vari_process+0x604>
c000e0a6:	83 ec 0c             	sub    esp,0xc
c000e0a9:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e0ac:	e8 ca 9e 01 00       	call   c0027f7b <__floatsidf>
c000e0b1:	83 c4 10             	add    esp,0x10
c000e0b4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e0b8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e0bc:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e0c0:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e0c4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e0c8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e0cc:	e8 47 98 01 00       	call   c0027918 <__muldf3>
c000e0d1:	59                   	pop    ecx
c000e0d2:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000e0d6:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000e0da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e0de:	e8 98 9e 01 00       	call   c0027f7b <__floatsidf>
c000e0e3:	83 c4 10             	add    esp,0x10
c000e0e6:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e0ea:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e0ee:	52                   	push   edx
c000e0ef:	50                   	push   eax
c000e0f0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e0f4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e0f8:	e8 9e 91 01 00       	call   c002729b <__adddf3>
c000e0fd:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000e100:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000e104:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e108:	e8 6e 9e 01 00       	call   c0027f7b <__floatsidf>
c000e10d:	83 c4 10             	add    esp,0x10
c000e110:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e114:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e118:	52                   	push   edx
c000e119:	50                   	push   eax
c000e11a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e11e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e122:	e8 c2 a0 01 00       	call   c00281e9 <__ledf2>
c000e127:	83 c4 10             	add    esp,0x10
c000e12a:	85 c0                	test   eax,eax
c000e12c:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000e130:	0f 8f ea 01 00 00    	jg     c000e320 <zoh_vari_process+0x604>
c000e136:	85 c9                	test   ecx,ecx
c000e138:	0f 8e ed 00 00 00    	jle    c000e22b <zoh_vari_process+0x50f>
c000e13e:	83 ec 10             	sub    esp,0x10
c000e141:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000e144:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000e147:	ff 77 04             	push   DWORD PTR [edi+0x4]
c000e14a:	ff 37                	push   DWORD PTR [edi]
c000e14c:	e8 9b 97 01 00       	call   c00278ec <__subdf3>
c000e151:	83 c4 18             	add    esp,0x18
c000e154:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e158:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e15c:	52                   	push   edx
c000e15d:	50                   	push   eax
c000e15e:	e8 1d a2 01 00       	call   c0028380 <fabs>
c000e163:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e167:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e16b:	83 c4 10             	add    esp,0x10
c000e16e:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000e173:	68 23 42 92 0c       	push   0xc924223
c000e178:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e17c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e180:	e8 44 a0 01 00       	call   c00281c9 <__gtdf2>
c000e185:	83 c4 10             	add    esp,0x10
c000e188:	85 c0                	test   eax,eax
c000e18a:	0f 8e 9b 00 00 00    	jle    c000e22b <zoh_vari_process+0x50f>
c000e190:	8b 07                	mov    eax,DWORD PTR [edi]
c000e192:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000e195:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e199:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e19d:	52                   	push   edx
c000e19e:	50                   	push   eax
c000e19f:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000e1a2:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000e1a5:	e8 42 97 01 00       	call   c00278ec <__subdf3>
c000e1aa:	5d                   	pop    ebp
c000e1ab:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e1af:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000e1b3:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000e1b6:	e8 c0 9d 01 00       	call   c0027f7b <__floatsidf>
c000e1bb:	83 c4 10             	add    esp,0x10
c000e1be:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e1c2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e1c6:	52                   	push   edx
c000e1c7:	50                   	push   eax
c000e1c8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1cc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1d0:	e8 43 97 01 00       	call   c0027918 <__muldf3>
c000e1d5:	59                   	pop    ecx
c000e1d6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e1da:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000e1de:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000e1e1:	e8 95 9d 01 00       	call   c0027f7b <__floatsidf>
c000e1e6:	83 c4 10             	add    esp,0x10
c000e1e9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e1ed:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e1f1:	52                   	push   edx
c000e1f2:	50                   	push   eax
c000e1f3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1f7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1fb:	e8 fc 99 01 00       	call   c0027bfc <__divdf3>
c000e200:	83 c4 10             	add    esp,0x10
c000e203:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e207:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e20b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e20f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e213:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e217:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e21b:	e8 7b 90 01 00       	call   c002729b <__adddf3>
c000e220:	83 c4 10             	add    esp,0x10
c000e223:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e227:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e22b:	31 d2                	xor    edx,edx
c000e22d:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000e230:	39 d0                	cmp    eax,edx
c000e232:	7e 1d                	jle    c000e251 <zoh_vari_process+0x535>
c000e234:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c000e237:	29 c1                	sub    ecx,eax
c000e239:	89 c8                	mov    eax,ecx
c000e23b:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000e23d:	01 d0                	add    eax,edx
c000e23f:	42                   	inc    edx
c000e240:	8b 2c 81             	mov    ebp,DWORD PTR [ecx+eax*4]
c000e243:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000e246:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000e249:	89 2c 88             	mov    DWORD PTR [eax+ecx*4],ebp
c000e24c:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000e24f:	eb dc                	jmp    c000e22d <zoh_vari_process+0x511>
c000e251:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e255:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e259:	68 00 00 f0 3f       	push   0x3ff00000
c000e25e:	6a 00                	push   0x0
c000e260:	e8 97 99 01 00       	call   c0027bfc <__divdf3>
c000e265:	83 c4 10             	add    esp,0x10
c000e268:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e26c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e270:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e274:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e278:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e27c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e280:	e8 16 90 01 00       	call   c002729b <__adddf3>
c000e285:	5d                   	pop    ebp
c000e286:	59                   	pop    ecx
c000e287:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e28b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e28f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e293:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e297:	e8 04 a1 01 00       	call   c00283a0 <lrint>
c000e29c:	83 ec 0c             	sub    esp,0xc
c000e29f:	50                   	push   eax
c000e2a0:	e8 d6 9c 01 00       	call   c0027f7b <__floatsidf>
c000e2a5:	83 c4 10             	add    esp,0x10
c000e2a8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e2ac:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e2b0:	52                   	push   edx
c000e2b1:	50                   	push   eax
c000e2b2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e2b6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e2ba:	e8 2d 96 01 00       	call   c00278ec <__subdf3>
c000e2bf:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e2c3:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e2c7:	83 c4 20             	add    esp,0x20
c000e2ca:	6a 00                	push   0x0
c000e2cc:	6a 00                	push   0x0
c000e2ce:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e2d2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e2d6:	e8 0c 9f 01 00       	call   c00281e7 <__ltdf2>
c000e2db:	83 c4 10             	add    esp,0x10
c000e2de:	85 c0                	test   eax,eax
c000e2e0:	79 1e                	jns    c000e300 <zoh_vari_process+0x5e4>
c000e2e2:	68 00 00 f0 3f       	push   0x3ff00000
c000e2e7:	6a 00                	push   0x0
c000e2e9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e2ed:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e2f1:	e8 a5 8f 01 00       	call   c002729b <__adddf3>
c000e2f6:	83 c4 10             	add    esp,0x10
c000e2f9:	89 04 24             	mov    DWORD PTR [esp],eax
c000e2fc:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e300:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000e303:	83 ec 10             	sub    esp,0x10
c000e306:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e30a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e30e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e312:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e316:	e8 d1 95 01 00       	call   c00278ec <__subdf3>
c000e31b:	e9 51 fd ff ff       	jmp    c000e071 <zoh_vari_process+0x355>
c000e320:	3b 6c 24 10          	cmp    ebp,DWORD PTR [esp+0x10]
c000e324:	7d 3a                	jge    c000e360 <zoh_vari_process+0x644>
c000e326:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e32a:	83 ec 0c             	sub    esp,0xc
c000e32d:	29 e8                	sub    eax,ebp
c000e32f:	99                   	cdq    
c000e330:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e333:	50                   	push   eax
c000e334:	e8 42 9c 01 00       	call   c0027f7b <__floatsidf>
c000e339:	83 c4 10             	add    esp,0x10
c000e33c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e340:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e344:	52                   	push   edx
c000e345:	50                   	push   eax
c000e346:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e34a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e34e:	e8 48 8f 01 00       	call   c002729b <__adddf3>
c000e353:	83 c4 10             	add    esp,0x10
c000e356:	89 6b 10             	mov    DWORD PTR [ebx+0x10],ebp
c000e359:	89 04 24             	mov    DWORD PTR [esp],eax
c000e35c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e360:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000e363:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000e367:	89 47 08             	mov    DWORD PTR [edi+0x8],eax
c000e36a:	89 57 0c             	mov    DWORD PTR [edi+0xc],edx
c000e36d:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e370:	85 c0                	test   eax,eax
c000e372:	7f 25                	jg     c000e399 <zoh_vari_process+0x67d>
c000e374:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e378:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e37c:	89 07                	mov    DWORD PTR [edi],eax
c000e37e:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c000e381:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e384:	99                   	cdq    
c000e385:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e388:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000e38b:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000e38e:	99                   	cdq    
c000e38f:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e392:	31 d2                	xor    edx,edx
c000e394:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000e397:	eb 1e                	jmp    c000e3b7 <zoh_vari_process+0x69b>
c000e399:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c000e39c:	31 d2                	xor    edx,edx
c000e39e:	29 c8                	sub    eax,ecx
c000e3a0:	c1 e0 02             	shl    eax,0x2
c000e3a3:	39 d1                	cmp    ecx,edx
c000e3a5:	7e cd                	jle    c000e374 <zoh_vari_process+0x658>
c000e3a7:	8b 2e                	mov    ebp,DWORD PTR [esi]
c000e3a9:	8b 6c 05 00          	mov    ebp,DWORD PTR [ebp+eax*1+0x0]
c000e3ad:	83 c0 04             	add    eax,0x4
c000e3b0:	89 6c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ebp
c000e3b4:	42                   	inc    edx
c000e3b5:	eb ec                	jmp    c000e3a3 <zoh_vari_process+0x687>
c000e3b7:	83 c4 3c             	add    esp,0x3c
c000e3ba:	89 d0                	mov    eax,edx
c000e3bc:	5b                   	pop    ebx
c000e3bd:	5e                   	pop    esi
c000e3be:	5f                   	pop    edi
c000e3bf:	5d                   	pop    ebp
c000e3c0:	c3                   	ret    

c000e3c1 <zoh_reset>:
c000e3c1:	83 ec 0c             	sub    esp,0xc
c000e3c4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000e3c8:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000e3cb:	85 c0                	test   eax,eax
c000e3cd:	74 20                	je     c000e3ef <zoh_reset+0x2e>
c000e3cf:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c000e3d2:	83 c0 1c             	add    eax,0x1c
c000e3d5:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c000e3d8:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c000e3df:	c1 e2 02             	shl    edx,0x2
c000e3e2:	51                   	push   ecx
c000e3e3:	52                   	push   edx
c000e3e4:	6a 00                	push   0x0
c000e3e6:	50                   	push   eax
c000e3e7:	e8 64 23 ff ff       	call   c0000750 <memset>
c000e3ec:	83 c4 10             	add    esp,0x10
c000e3ef:	83 c4 0c             	add    esp,0xc
c000e3f2:	c3                   	ret    

c000e3f3 <zoh_get_name>:
c000e3f3:	31 c0                	xor    eax,eax
c000e3f5:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000e3fa:	75 05                	jne    c000e401 <zoh_get_name+0xe>
c000e3fc:	b8 5e 9d 02 c0       	mov    eax,0xc0029d5e
c000e401:	c3                   	ret    

c000e402 <zoh_get_description>:
c000e402:	31 c0                	xor    eax,eax
c000e404:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000e409:	75 05                	jne    c000e410 <zoh_get_description+0xe>
c000e40b:	b8 6f 9d 02 c0       	mov    eax,0xc0029d6f
c000e410:	c3                   	ret    

c000e411 <zoh_set_converter>:
c000e411:	53                   	push   ebx
c000e412:	b8 0a 00 00 00       	mov    eax,0xa
c000e417:	83 ec 08             	sub    esp,0x8
c000e41a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e41e:	83 7c 24 14 03       	cmp    DWORD PTR [esp+0x14],0x3
c000e423:	75 6e                	jne    c000e493 <zoh_set_converter+0x82>
c000e425:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000e428:	85 c0                	test   eax,eax
c000e42a:	74 13                	je     c000e43f <zoh_set_converter+0x2e>
c000e42c:	83 ec 0c             	sub    esp,0xc
c000e42f:	50                   	push   eax
c000e430:	e8 74 11 00 00       	call   c000f5a9 <free>
c000e435:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000e43c:	83 c4 10             	add    esp,0x10
c000e43f:	50                   	push   eax
c000e440:	50                   	push   eax
c000e441:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000e444:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c000e44b:	50                   	push   eax
c000e44c:	6a 01                	push   0x1
c000e44e:	e8 76 11 00 00       	call   c000f5c9 <calloc>
c000e453:	83 c4 10             	add    esp,0x10
c000e456:	89 c2                	mov    edx,eax
c000e458:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000e45b:	85 d2                	test   edx,edx
c000e45d:	b8 01 00 00 00       	mov    eax,0x1
c000e462:	74 2f                	je     c000e493 <zoh_set_converter+0x82>
c000e464:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000e467:	83 ec 0c             	sub    esp,0xc
c000e46a:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000e46d:	c7 02 93 0a f7 06    	mov    DWORD PTR [edx],0x6f70a93
c000e473:	c7 43 24 1c dd 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000dd1c
c000e47a:	c7 43 20 1c dd 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000dd1c
c000e481:	c7 43 28 c1 e3 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000e3c1
c000e488:	53                   	push   ebx
c000e489:	e8 33 ff ff ff       	call   c000e3c1 <zoh_reset>
c000e48e:	83 c4 10             	add    esp,0x10
c000e491:	31 c0                	xor    eax,eax
c000e493:	83 c4 08             	add    esp,0x8
c000e496:	5b                   	pop    ebx
c000e497:	c3                   	ret    

c000e498 <CPU::current()>:
c000e498:	a1 a8 d9 02 c0       	mov    eax,ds:0xc002d9a8
c000e49d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000e4a3:	c3                   	ret    

c000e4a4 <operator new(unsigned long)>:
c000e4a4:	e9 f0 10 00 00       	jmp    c000f599 <malloc>

c000e4a9 <operator delete(void*)>:
c000e4a9:	e9 0b 11 00 00       	jmp    c000f5b9 <rfree>

c000e4ae <disableIRQs()>:
c000e4ae:	fa                   	cli    
c000e4af:	ff 05 c8 0e 03 c0    	inc    DWORD PTR ds:0xc0030ec8
c000e4b5:	c3                   	ret    

c000e4b6 <enableIRQs()>:
c000e4b6:	a1 c8 0e 03 c0       	mov    eax,ds:0xc0030ec8
c000e4bb:	48                   	dec    eax
c000e4bc:	a3 c8 0e 03 c0       	mov    ds:0xc0030ec8,eax
c000e4c1:	75 01                	jne    c000e4c4 <enableIRQs()+0xe>
c000e4c3:	fb                   	sti    
c000e4c4:	c3                   	ret    

c000e4c5 <lockScheduler()>:
c000e4c5:	fa                   	cli    
c000e4c6:	ff 05 c8 0e 03 c0    	inc    DWORD PTR ds:0xc0030ec8
c000e4cc:	c3                   	ret    

c000e4cd <unlockScheduler()>:
c000e4cd:	a1 c8 0e 03 c0       	mov    eax,ds:0xc0030ec8
c000e4d2:	48                   	dec    eax
c000e4d3:	a3 c8 0e 03 c0       	mov    ds:0xc0030ec8,eax
c000e4d8:	75 01                	jne    c000e4db <unlockScheduler()+0xe>
c000e4da:	fb                   	sti    
c000e4db:	c3                   	ret    

c000e4dc <lockStuff()>:
c000e4dc:	fa                   	cli    
c000e4dd:	ff 05 c8 0e 03 c0    	inc    DWORD PTR ds:0xc0030ec8
c000e4e3:	ff 05 c4 0e 03 c0    	inc    DWORD PTR ds:0xc0030ec4
c000e4e9:	c3                   	ret    

c000e4ea <unlockStuff()>:
c000e4ea:	83 ec 0c             	sub    esp,0xc
c000e4ed:	a1 c4 0e 03 c0       	mov    eax,ds:0xc0030ec4
c000e4f2:	48                   	dec    eax
c000e4f3:	a3 c4 0e 03 c0       	mov    ds:0xc0030ec4,eax
c000e4f8:	75 18                	jne    c000e512 <unlockStuff()+0x28>
c000e4fa:	83 3d c0 0e 03 c0 00 	cmp    DWORD PTR ds:0xc0030ec0,0x0
c000e501:	74 0f                	je     c000e512 <unlockStuff()+0x28>
c000e503:	c7 05 c0 0e 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030ec0,0x0
c000e50d:	e8 b3 f4 00 00       	call   c001d9c5 <schedule()>
c000e512:	a1 c8 0e 03 c0       	mov    eax,ds:0xc0030ec8
c000e517:	48                   	dec    eax
c000e518:	a3 c8 0e 03 c0       	mov    ds:0xc0030ec8,eax
c000e51d:	75 01                	jne    c000e520 <unlockStuff()+0x36>
c000e51f:	fb                   	sti    
c000e520:	83 c4 0c             	add    esp,0xc
c000e523:	c3                   	ret    

c000e524 <Virt::getAKernelVAS()>:
c000e524:	a1 10 db 02 c0       	mov    eax,ds:0xc002db10
c000e529:	c3                   	ret    

c000e52a <__not_memcpy>:
c000e52a:	57                   	push   edi
c000e52b:	56                   	push   esi
c000e52c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e530:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000e534:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000e538:	89 c7                	mov    edi,eax
c000e53a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e53c:	5e                   	pop    esi
c000e53d:	5f                   	pop    edi
c000e53e:	c3                   	ret    

c000e53f <Krnl::resolveCompatibilitySymbol(char*)>:
c000e53f:	83 ec 0c             	sub    esp,0xc
c000e542:	83 ec 08             	sub    esp,0x8
c000e545:	68 a6 9d 02 c0       	push   0xc0029da6
c000e54a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e54e:	e8 45 23 ff ff       	call   c0000898 <strcmp>
c000e553:	83 c4 10             	add    esp,0x10
c000e556:	85 c0                	test   eax,eax
c000e558:	0f 94 c0             	sete   al
c000e55b:	84 c0                	test   al,al
c000e55d:	74 0a                	je     c000e569 <Krnl::resolveCompatibilitySymbol(char*)+0x2a>
c000e55f:	b8 a8 d9 02 c0       	mov    eax,0xc002d9a8
c000e564:	e9 e3 00 00 00       	jmp    c000e64c <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e569:	83 ec 08             	sub    esp,0x8
c000e56c:	68 af 9d 02 c0       	push   0xc0029daf
c000e571:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e575:	e8 1e 23 ff ff       	call   c0000898 <strcmp>
c000e57a:	83 c4 10             	add    esp,0x10
c000e57d:	85 c0                	test   eax,eax
c000e57f:	0f 94 c0             	sete   al
c000e582:	84 c0                	test   al,al
c000e584:	74 0a                	je     c000e590 <Krnl::resolveCompatibilitySymbol(char*)+0x51>
c000e586:	b8 14 67 02 c0       	mov    eax,0xc0026714
c000e58b:	e9 bc 00 00 00       	jmp    c000e64c <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e590:	83 ec 08             	sub    esp,0x8
c000e593:	68 b9 9d 02 c0       	push   0xc0029db9
c000e598:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e59c:	e8 f7 22 ff ff       	call   c0000898 <strcmp>
c000e5a1:	83 c4 10             	add    esp,0x10
c000e5a4:	85 c0                	test   eax,eax
c000e5a6:	0f 94 c0             	sete   al
c000e5a9:	84 c0                	test   al,al
c000e5ab:	74 0a                	je     c000e5b7 <Krnl::resolveCompatibilitySymbol(char*)+0x78>
c000e5ad:	b8 48 64 02 c0       	mov    eax,0xc0026448
c000e5b2:	e9 95 00 00 00       	jmp    c000e64c <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e5b7:	83 ec 08             	sub    esp,0x8
c000e5ba:	68 c2 9d 02 c0       	push   0xc0029dc2
c000e5bf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e5c3:	e8 d0 22 ff ff       	call   c0000898 <strcmp>
c000e5c8:	83 c4 10             	add    esp,0x10
c000e5cb:	85 c0                	test   eax,eax
c000e5cd:	0f 94 c0             	sete   al
c000e5d0:	84 c0                	test   al,al
c000e5d2:	74 07                	je     c000e5db <Krnl::resolveCompatibilitySymbol(char*)+0x9c>
c000e5d4:	b8 14 68 02 c0       	mov    eax,0xc0026814
c000e5d9:	eb 71                	jmp    c000e64c <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e5db:	83 ec 08             	sub    esp,0x8
c000e5de:	68 cc 9d 02 c0       	push   0xc0029dcc
c000e5e3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e5e7:	e8 ac 22 ff ff       	call   c0000898 <strcmp>
c000e5ec:	83 c4 10             	add    esp,0x10
c000e5ef:	85 c0                	test   eax,eax
c000e5f1:	0f 94 c0             	sete   al
c000e5f4:	84 c0                	test   al,al
c000e5f6:	74 07                	je     c000e5ff <Krnl::resolveCompatibilitySymbol(char*)+0xc0>
c000e5f8:	b8 94 65 02 c0       	mov    eax,0xc0026594
c000e5fd:	eb 4d                	jmp    c000e64c <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e5ff:	83 ec 08             	sub    esp,0x8
c000e602:	68 d5 9d 02 c0       	push   0xc0029dd5
c000e607:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e60b:	e8 88 22 ff ff       	call   c0000898 <strcmp>
c000e610:	83 c4 10             	add    esp,0x10
c000e613:	85 c0                	test   eax,eax
c000e615:	0f 94 c0             	sete   al
c000e618:	84 c0                	test   al,al
c000e61a:	74 07                	je     c000e623 <Krnl::resolveCompatibilitySymbol(char*)+0xe4>
c000e61c:	b8 ac d9 02 c0       	mov    eax,0xc002d9ac
c000e621:	eb 29                	jmp    c000e64c <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e623:	83 ec 08             	sub    esp,0x8
c000e626:	68 e2 9d 02 c0       	push   0xc0029de2
c000e62b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e62f:	e8 64 22 ff ff       	call   c0000898 <strcmp>
c000e634:	83 c4 10             	add    esp,0x10
c000e637:	85 c0                	test   eax,eax
c000e639:	0f 94 c0             	sete   al
c000e63c:	84 c0                	test   al,al
c000e63e:	74 07                	je     c000e647 <Krnl::resolveCompatibilitySymbol(char*)+0x108>
c000e640:	b8 ad d9 02 c0       	mov    eax,0xc002d9ad
c000e645:	eb 05                	jmp    c000e64c <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e647:	b8 00 00 00 00       	mov    eax,0x0
c000e64c:	83 c4 0c             	add    esp,0xc
c000e64f:	c3                   	ret    

c000e650 <Computer::close(int, int, void*)>:
c000e650:	57                   	push   edi
c000e651:	56                   	push   esi
c000e652:	53                   	push   ebx
c000e653:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e657:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000e65b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000e65f:	83 ec 0c             	sub    esp,0xc
c000e662:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
c000e668:	e8 1f 56 00 00       	call   c0013c8c <Device::closeAll()>
c000e66d:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c000e673:	83 c4 10             	add    esp,0x10
c000e676:	8b 10                	mov    edx,DWORD PTR [eax]
c000e678:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c000e67c:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c000e684:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c000e688:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e68c:	5b                   	pop    ebx
c000e68d:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000e690:	5e                   	pop    esi
c000e691:	5f                   	pop    edi
c000e692:	ff e0                	jmp    eax

c000e694 <Krnl::firstTask()>:
c000e694:	53                   	push   ebx
c000e695:	83 ec 14             	sub    esp,0x14
c000e698:	fb                   	sti    
c000e699:	68 ef 9d 02 c0       	push   0xc0029def
c000e69e:	e8 50 0f 00 00       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c000e6a3:	c7 04 24 3f 07 00 00 	mov    DWORD PTR [esp],0x73f
c000e6aa:	e8 ea 0e 00 00       	call   c000f599 <malloc>
c000e6af:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000e6b6:	89 c3                	mov    ebx,eax
c000e6b8:	ff 35 f0 0e 03 c0    	push   DWORD PTR ds:0xc0030ef0
c000e6be:	68 08 9e 02 c0       	push   0xc0029e08
c000e6c3:	6a 01                	push   0x1
c000e6c5:	50                   	push   eax
c000e6c6:	e8 dd ee 00 00       	call   c001d5a8 <Process::Process(bool, char const*, Process*, char**)>
c000e6cb:	83 c4 20             	add    esp,0x20
c000e6ce:	68 ff 00 00 00       	push   0xff
c000e6d3:	6a 00                	push   0x0
c000e6d5:	68 2f ef 00 c0       	push   0xc000ef2f
c000e6da:	53                   	push   ebx
c000e6db:	e8 c0 f0 00 00       	call   c001d7a0 <Process::createThread(void (*)(void*), void*, int)>
c000e6e0:	6a 7a                	push   0x7a
c000e6e2:	6a 00                	push   0x0
c000e6e4:	68 84 e1 01 c0       	push   0xc001e184
c000e6e9:	ff 35 f0 0e 03 c0    	push   DWORD PTR ds:0xc0030ef0
c000e6ef:	e8 ac f0 00 00       	call   c001d7a0 <Process::createThread(void (*)(void*), void*, int)>
c000e6f4:	83 c4 14             	add    esp,0x14
c000e6f7:	a3 a8 0e 03 c0       	mov    ds:0xc0030ea8,eax
c000e6fc:	68 ec 9e 02 c0       	push   0xc0029eec
c000e701:	c6 05 ad d9 02 c0 01 	mov    BYTE PTR ds:0xc002d9ad,0x1
c000e708:	e8 e6 0e 00 00       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c000e70d:	e8 1d fe 00 00       	call   c001e52f <Vm::initialise8086()>
c000e712:	e8 3d 43 00 00       	call   c0012a54 <Fs::initVFS()>
c000e717:	c7 04 24 15 9e 02 c0 	mov    DWORD PTR [esp],0xc0029e15
c000e71e:	e8 d0 0e 00 00       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c000e723:	a1 a8 d9 02 c0       	mov    eax,ds:0xc002d9a8
c000e728:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c000e72e:	8b 10                	mov    edx,DWORD PTR [eax]
c000e730:	6a 00                	push   0x0
c000e732:	6a 00                	push   0x0
c000e734:	6a 00                	push   0x0
c000e736:	50                   	push   eax
c000e737:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000e73a:	83 c4 14             	add    esp,0x14
c000e73d:	68 ec 9e 02 c0       	push   0xc0029eec
c000e742:	e8 ac 0e 00 00       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c000e747:	e8 e3 d6 00 00       	call   c001be2f <Sys::loadSyscalls()>
c000e74c:	e8 db b5 00 00       	call   c0019d2c <Krnl::loadSystemEnv()>
c000e751:	83 c4 0c             	add    esp,0xc
c000e754:	6a 3a                	push   0x3a
c000e756:	68 2f 9e 02 c0       	push   0xc0029e2f
c000e75b:	68 38 9e 02 c0       	push   0xc0029e38
c000e760:	e8 8c c4 00 00       	call   c001abf1 <Reg::readIntWithDefault(char*, char*, int)>
c000e765:	89 04 24             	mov    DWORD PTR [esp],eax
c000e768:	e8 d7 4d 00 00       	call   c0013544 <User::loadClockSettings(int)>
c000e76d:	c7 04 24 10 9f 02 c0 	mov    DWORD PTR [esp],0xc0029f10
c000e774:	e8 7a 0e 00 00       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c000e779:	58                   	pop    eax
c000e77a:	a1 a8 d9 02 c0       	mov    eax,ds:0xc002d9a8
c000e77f:	ff b0 e4 01 00 00    	push   DWORD PTR [eax+0x1e4]
c000e785:	e8 c2 54 00 00       	call   c0013c4c <Device::loadDriversForAll()>
c000e78a:	c7 04 24 40 9e 02 c0 	mov    DWORD PTR [esp],0xc0029e40
c000e791:	e8 5d 0e 00 00       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c000e796:	e8 f9 b0 00 00       	call   c0019894 <Krnl::startCPUs()>
c000e79b:	c7 04 24 5a 9e 02 c0 	mov    DWORD PTR [esp],0xc0029e5a
c000e7a2:	e8 4c 0e 00 00       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c000e7a7:	5a                   	pop    edx
c000e7a8:	8b 1d a8 d9 02 c0    	mov    ebx,DWORD PTR ds:0xc002d9a8
c000e7ae:	59                   	pop    ecx
c000e7af:	6a 01                	push   0x1
c000e7b1:	68 6b 9e 02 c0       	push   0xc0029e6b
c000e7b6:	e8 44 e8 00 00       	call   c001cfff <Thr::loadDLL(char const*, bool)>
c000e7bb:	5a                   	pop    edx
c000e7bc:	59                   	pop    ecx
c000e7bd:	53                   	push   ebx
c000e7be:	50                   	push   eax
c000e7bf:	e8 6c ea 00 00       	call   c001d230 <Thr::executeDLL(unsigned long, void*)>
c000e7c4:	83 c4 10             	add    esp,0x10
c000e7c7:	83 ec 0c             	sub    esp,0xc
c000e7ca:	6a 02                	push   0x2
c000e7cc:	e8 ca f3 00 00       	call   c001db9b <blockTask(TaskState)>
c000e7d1:	83 c4 10             	add    esp,0x10
c000e7d4:	eb f1                	jmp    c000e7c7 <Krnl::firstTask()+0x133>

c000e7d6 <Computer::Computer()>:
c000e7d6:	83 ec 0c             	sub    esp,0xc
c000e7d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7dd:	83 ec 08             	sub    esp,0x8
c000e7e0:	68 87 9e 02 c0       	push   0xc0029e87
c000e7e5:	50                   	push   eax
c000e7e6:	e8 1b 55 00 00       	call   c0013d06 <Device::Device(char const*)>
c000e7eb:	83 c4 10             	add    esp,0x10
c000e7ee:	ba 5c 9f 02 c0       	mov    edx,0xc0029f5c
c000e7f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7f7:	89 10                	mov    DWORD PTR [eax],edx
c000e7f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7fd:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000e807:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e80b:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c000e815:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e819:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c000e81f:	83 ca 04             	or     edx,0x4
c000e822:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c000e828:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e82c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e832:	0f b6 d0             	movzx  edx,al
c000e835:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e839:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c000e840:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e844:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e84a:	0f b6 d0             	movzx  edx,al
c000e84d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e851:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c000e856:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e85a:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e860:	8d 50 01             	lea    edx,[eax+0x1]
c000e863:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e867:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e86d:	0f b6 d0             	movzx  edx,al
c000e870:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e874:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e878:	83 e1 3f             	and    ecx,0x3f
c000e87b:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e87f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e883:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e889:	0f b6 d0             	movzx  edx,al
c000e88c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e890:	66 c7 44 90 04 92 00 	mov    WORD PTR [eax+edx*4+0x4],0x92
c000e897:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e89b:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e8a1:	0f b6 d0             	movzx  edx,al
c000e8a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8a8:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000e8ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8b1:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e8b7:	8d 50 01             	lea    edx,[eax+0x1]
c000e8ba:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e8be:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e8c4:	0f b6 d0             	movzx  edx,al
c000e8c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8cb:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e8cf:	83 e1 3f             	and    ecx,0x3f
c000e8d2:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e8d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8da:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e8e0:	0f b6 d0             	movzx  edx,al
c000e8e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8e7:	66 c7 44 90 04 61 00 	mov    WORD PTR [eax+edx*4+0x4],0x61
c000e8ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8f2:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e8f8:	0f b6 d0             	movzx  edx,al
c000e8fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8ff:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000e904:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e908:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e90e:	8d 50 01             	lea    edx,[eax+0x1]
c000e911:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e915:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e91b:	0f b6 d0             	movzx  edx,al
c000e91e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e922:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e926:	83 e1 3f             	and    ecx,0x3f
c000e929:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e92d:	90                   	nop
c000e92e:	83 c4 0c             	add    esp,0xc
c000e931:	c3                   	ret    

c000e932 <Computer::setBootMessage(char const*)>:
c000e932:	c3                   	ret    
c000e933:	90                   	nop

c000e934 <Computer::detectFeatures()>:
c000e934:	55                   	push   ebp
c000e935:	57                   	push   edi
c000e936:	56                   	push   esi
c000e937:	53                   	push   ebx
c000e938:	83 ec 1c             	sub    esp,0x1c
c000e93b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000e93f:	81 a3 e8 01 00 00 04 00 fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffc0004
c000e949:	e8 96 19 ff ff       	call   c00002e4 <detectCPUID>
c000e94e:	85 c0                	test   eax,eax
c000e950:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e956:	0f 95 c2             	setne  dl
c000e959:	83 e0 fd             	and    eax,0xfffffffd
c000e95c:	d1 e2                	shl    edx,1
c000e95e:	09 d0                	or     eax,edx
c000e960:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e966:	a8 02                	test   al,0x2
c000e968:	75 46                	jne    c000e9b0 <Computer::detectFeatures()+0x7c>
c000e96a:	f6 05 c1 d9 02 c0 04 	test   BYTE PTR ds:0xc002d9c1,0x4
c000e971:	74 07                	je     c000e97a <Computer::detectFeatures()+0x46>
c000e973:	80 a3 e8 01 00 00 fb 	and    BYTE PTR [ebx+0x1e8],0xfb
c000e97a:	e8 57 7a 01 00       	call   c00263d6 <x87Detect>
c000e97f:	83 e0 01             	and    eax,0x1
c000e982:	c1 e0 04             	shl    eax,0x4
c000e985:	88 c2                	mov    dl,al
c000e987:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e98d:	83 e0 ef             	and    eax,0xffffffef
c000e990:	09 d0                	or     eax,edx
c000e992:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e998:	a8 10                	test   al,0x10
c000e99a:	0f 85 2a 01 00 00    	jne    c000eaca <Computer::detectFeatures()+0x196>
c000e9a0:	84 c0                	test   al,al
c000e9a2:	0f 88 45 01 00 00    	js     c000eaed <Computer::detectFeatures()+0x1b9>
c000e9a8:	83 c4 1c             	add    esp,0x1c
c000e9ab:	5b                   	pop    ebx
c000e9ac:	5e                   	pop    esi
c000e9ad:	5f                   	pop    edi
c000e9ae:	5d                   	pop    ebp
c000e9af:	c3                   	ret    
c000e9b0:	83 ec 0c             	sub    esp,0xc
c000e9b3:	6a 20                	push   0x20
c000e9b5:	e8 6c 9e 00 00       	call   c0018826 <CPU::cpuidCheckEDX(unsigned int)>
c000e9ba:	83 e0 01             	and    eax,0x1
c000e9bd:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000e9c4:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e9ca:	83 e0 f7             	and    eax,0xfffffff7
c000e9cd:	09 d0                	or     eax,edx
c000e9cf:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e9d5:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c000e9dc:	e8 45 9e 00 00       	call   c0018826 <CPU::cpuidCheckEDX(unsigned int)>
c000e9e1:	83 e0 01             	and    eax,0x1
c000e9e4:	88 c2                	mov    dl,al
c000e9e6:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000e9ec:	83 e0 fe             	and    eax,0xfffffffe
c000e9ef:	09 d0                	or     eax,edx
c000e9f1:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000e9f7:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c000e9fe:	e8 23 9e 00 00       	call   c0018826 <CPU::cpuidCheckEDX(unsigned int)>
c000ea03:	c1 e0 07             	shl    eax,0x7
c000ea06:	88 c2                	mov    dl,al
c000ea08:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000ea0e:	83 e0 7f             	and    eax,0x7f
c000ea11:	09 d0                	or     eax,edx
c000ea13:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000ea19:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c000ea20:	e8 01 9e 00 00       	call   c0018826 <CPU::cpuidCheckEDX(unsigned int)>
c000ea25:	83 c4 10             	add    esp,0x10
c000ea28:	83 e0 01             	and    eax,0x1
c000ea2b:	c1 e0 05             	shl    eax,0x5
c000ea2e:	88 c2                	mov    dl,al
c000ea30:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000ea36:	83 e0 df             	and    eax,0xffffffdf
c000ea39:	09 d0                	or     eax,edx
c000ea3b:	f7 05 c0 d9 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc002d9c0,0x401
c000ea45:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ea4b:	0f 84 c2 00 00 00    	je     c000eb13 <Computer::detectFeatures()+0x1df>
c000ea51:	83 e0 fe             	and    eax,0xfffffffe
c000ea54:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ea5a:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000ea60:	88 c2                	mov    dl,al
c000ea62:	83 e2 09             	and    edx,0x9
c000ea65:	fe ca                	dec    dl
c000ea67:	75 09                	jne    c000ea72 <Computer::detectFeatures()+0x13e>
c000ea69:	83 e0 fe             	and    eax,0xfffffffe
c000ea6c:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ea72:	83 ec 0c             	sub    esp,0xc
c000ea75:	8d 44 24 18          	lea    eax,[esp+0x18]
c000ea79:	50                   	push   eax
c000ea7a:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c000ea7e:	55                   	push   ebp
c000ea7f:	8d 7c 24 18          	lea    edi,[esp+0x18]
c000ea83:	57                   	push   edi
c000ea84:	8d 74 24 18          	lea    esi,[esp+0x18]
c000ea88:	56                   	push   esi
c000ea89:	68 00 00 00 80       	push   0x80000000
c000ea8e:	e8 0f 9d 00 00       	call   c00187a2 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000ea93:	83 c4 20             	add    esp,0x20
c000ea96:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c000ea9d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000eaa1:	0f 86 c3 fe ff ff    	jbe    c000e96a <Computer::detectFeatures()+0x36>
c000eaa7:	83 ec 0c             	sub    esp,0xc
c000eaaa:	50                   	push   eax
c000eaab:	55                   	push   ebp
c000eaac:	57                   	push   edi
c000eaad:	56                   	push   esi
c000eaae:	68 01 00 00 80       	push   0x80000001
c000eab3:	e8 ea 9c 00 00       	call   c00187a2 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000eab8:	81 a3 e8 01 00 00 bf ff fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffcffbf
c000eac2:	83 c4 20             	add    esp,0x20
c000eac5:	e9 a0 fe ff ff       	jmp    c000e96a <Computer::detectFeatures()+0x36>
c000eaca:	e8 c1 78 01 00       	call   c0026390 <absolutelyNoChanceInHell>
c000eacf:	88 c2                	mov    dl,al
c000ead1:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000ead7:	c1 e2 07             	shl    edx,0x7
c000eada:	83 e0 7f             	and    eax,0x7f
c000eadd:	09 d0                	or     eax,edx
c000eadf:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000eae5:	84 c0                	test   al,al
c000eae7:	0f 89 bb fe ff ff    	jns    c000e9a8 <Computer::detectFeatures()+0x74>
c000eaed:	e8 7e 78 01 00       	call   c0026370 <avxDetect>
c000eaf2:	83 e0 01             	and    eax,0x1
c000eaf5:	c1 e0 05             	shl    eax,0x5
c000eaf8:	88 c2                	mov    dl,al
c000eafa:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000eb00:	83 e0 df             	and    eax,0xffffffdf
c000eb03:	09 d0                	or     eax,edx
c000eb05:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000eb0b:	83 c4 1c             	add    esp,0x1c
c000eb0e:	5b                   	pop    ebx
c000eb0f:	5e                   	pop    esi
c000eb10:	5f                   	pop    edi
c000eb11:	5d                   	pop    ebp
c000eb12:	c3                   	ret    
c000eb13:	83 ec 0c             	sub    esp,0xc
c000eb16:	68 00 02 00 00       	push   0x200
c000eb1b:	e8 06 9d 00 00       	call   c0018826 <CPU::cpuidCheckEDX(unsigned int)>
c000eb20:	83 c4 10             	add    esp,0x10
c000eb23:	83 e0 01             	and    eax,0x1
c000eb26:	88 c2                	mov    dl,al
c000eb28:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000eb2e:	83 e0 fe             	and    eax,0xfffffffe
c000eb31:	09 d0                	or     eax,edx
c000eb33:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000eb39:	e9 1c ff ff ff       	jmp    c000ea5a <Computer::detectFeatures()+0x126>

c000eb3e <Computer::displayFeatures()>:
c000eb3e:	c3                   	ret    
c000eb3f:	90                   	nop

c000eb40 <Computer::rdmsr(unsigned int)>:
c000eb40:	83 ec 0c             	sub    esp,0xc
c000eb43:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eb47:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000eb4e:	74 0a                	je     c000eb5a <Computer::rdmsr(unsigned int)+0x1a>
c000eb50:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000eb54:	0f 32                	rdmsr  
c000eb56:	83 c4 0c             	add    esp,0xc
c000eb59:	c3                   	ret    
c000eb5a:	83 ec 0c             	sub    esp,0xc
c000eb5d:	68 90 9e 02 c0       	push   0xc0029e90
c000eb62:	e8 ce b2 00 00       	call   c0019e35 <Krnl::panic(char const*)>
c000eb67:	83 c4 10             	add    esp,0x10
c000eb6a:	eb e4                	jmp    c000eb50 <Computer::rdmsr(unsigned int)+0x10>

c000eb6c <Computer::wrmsr(unsigned int, unsigned long long)>:
c000eb6c:	57                   	push   edi
c000eb6d:	56                   	push   esi
c000eb6e:	52                   	push   edx
c000eb6f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eb73:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000eb77:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000eb7b:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000eb82:	74 0e                	je     c000eb92 <Computer::wrmsr(unsigned int, unsigned long long)+0x26>
c000eb84:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000eb88:	89 f0                	mov    eax,esi
c000eb8a:	89 fa                	mov    edx,edi
c000eb8c:	0f 30                	wrmsr  
c000eb8e:	58                   	pop    eax
c000eb8f:	5e                   	pop    esi
c000eb90:	5f                   	pop    edi
c000eb91:	c3                   	ret    
c000eb92:	83 ec 0c             	sub    esp,0xc
c000eb95:	68 96 9e 02 c0       	push   0xc0029e96
c000eb9a:	e8 96 b2 00 00       	call   c0019e35 <Krnl::panic(char const*)>
c000eb9f:	83 c4 10             	add    esp,0x10
c000eba2:	eb e0                	jmp    c000eb84 <Computer::wrmsr(unsigned int, unsigned long long)+0x18>

c000eba4 <Computer::nmiEnabled()>:
c000eba4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000eba8:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c000ebae:	c3                   	ret    
c000ebaf:	90                   	nop

c000ebb0 <Computer::readCMOS(unsigned char)>:
c000ebb0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ebb4:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000ebbb:	19 c0                	sbb    eax,eax
c000ebbd:	83 e0 80             	and    eax,0xffffff80
c000ebc0:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000ebc4:	e6 70                	out    0x70,al
c000ebc6:	e4 71                	in     al,0x71
c000ebc8:	c3                   	ret    
c000ebc9:	90                   	nop

c000ebca <Computer::enableNMI(bool)>:
c000ebca:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ebce:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ebd2:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c000ebd8:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c000ebe0:	eb ce                	jmp    c000ebb0 <Computer::readCMOS(unsigned char)>

c000ebe2 <Computer::open(int, int, void*)>:
c000ebe2:	56                   	push   esi
c000ebe3:	53                   	push   ebx
c000ebe4:	83 ec 10             	sub    esp,0x10
c000ebe7:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000ebeb:	68 30 9f 02 c0       	push   0xc0029f30
c000ebf0:	e8 fe 09 00 00       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c000ebf5:	c7 04 24 64 12 00 00 	mov    DWORD PTR [esp],0x1264
c000ebfc:	f6 05 c0 d9 02 c0 04 	test   BYTE PTR ds:0xc002d9c0,0x4
c000ec03:	0f 94 05 e0 c8 02 c0 	sete   BYTE PTR ds:0xc002c8e0
c000ec0a:	e8 8a 09 00 00       	call   c000f599 <malloc>
c000ec0f:	89 04 24             	mov    DWORD PTR [esp],eax
c000ec12:	89 c6                	mov    esi,eax
c000ec14:	e8 81 8e 00 00       	call   c0017a9a <ACPI::ACPI()>
c000ec19:	89 b3 e4 01 00 00    	mov    DWORD PTR [ebx+0x1e4],esi
c000ec1f:	58                   	pop    eax
c000ec20:	5a                   	pop    edx
c000ec21:	56                   	push   esi
c000ec22:	53                   	push   ebx
c000ec23:	e8 da 4e 00 00       	call   c0013b02 <Device::addChild(Device*)>
c000ec28:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ec2b:	e8 04 fd ff ff       	call   c000e934 <Computer::detectFeatures()>
c000ec30:	59                   	pop    ecx
c000ec31:	5e                   	pop    esi
c000ec32:	6a 01                	push   0x1
c000ec34:	53                   	push   ebx
c000ec35:	e8 90 ff ff ff       	call   c000ebca <Computer::enableNMI(bool)>
c000ec3a:	c7 04 24 40 9e 02 c0 	mov    DWORD PTR [esp],0xc0029e40
c000ec41:	e8 ad 09 00 00       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c000ec46:	c7 04 24 98 11 00 00 	mov    DWORD PTR [esp],0x1198
c000ec4d:	e8 47 09 00 00       	call   c000f599 <malloc>
c000ec52:	89 04 24             	mov    DWORD PTR [esp],eax
c000ec55:	89 c6                	mov    esi,eax
c000ec57:	e8 82 9c 00 00       	call   c00188de <CPU::CPU()>
c000ec5c:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c000ec62:	58                   	pop    eax
c000ec63:	5a                   	pop    edx
c000ec64:	56                   	push   esi
c000ec65:	53                   	push   ebx
c000ec66:	e8 97 4e 00 00       	call   c0013b02 <Device::addChild(Device*)>
c000ec6b:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000ec71:	8b 10                	mov    edx,DWORD PTR [eax]
c000ec73:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ec77:	6a 00                	push   0x0
c000ec79:	6a 00                	push   0x0
c000ec7b:	50                   	push   eax
c000ec7c:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000ec7f:	83 c4 20             	add    esp,0x20
c000ec82:	e8 13 54 00 00       	call   c001409a <setupFPU()>
c000ec87:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c000ec8d:	85 c0                	test   eax,eax
c000ec8f:	74 1f                	je     c000ecb0 <Computer::open(int, int, void*)+0xce>
c000ec91:	83 ec 08             	sub    esp,0x8
c000ec94:	50                   	push   eax
c000ec95:	53                   	push   ebx
c000ec96:	e8 67 4e 00 00       	call   c0013b02 <Device::addChild(Device*)>
c000ec9b:	8b 83 e0 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e0]
c000eca1:	8b 10                	mov    edx,DWORD PTR [eax]
c000eca3:	6a 00                	push   0x0
c000eca5:	6a 00                	push   0x0
c000eca7:	6a 00                	push   0x0
c000eca9:	50                   	push   eax
c000ecaa:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000ecad:	83 c4 20             	add    esp,0x20
c000ecb0:	83 ec 0c             	sub    esp,0xc
c000ecb3:	68 9c 9e 02 c0       	push   0xc0029e9c
c000ecb8:	e8 36 09 00 00       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c000ecbd:	c7 04 24 94 e6 00 c0 	mov    DWORD PTR [esp],0xc000e694
c000ecc4:	e8 f9 eb 00 00       	call   c001d8c2 <setupMultitasking(void (*)())>
c000ecc9:	83 c4 14             	add    esp,0x14
c000eccc:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000ecd1:	5b                   	pop    ebx
c000ecd2:	5e                   	pop    esi
c000ecd3:	c3                   	ret    

c000ecd4 <Computer::disableNMI()>:
c000ecd4:	6a 00                	push   0x0
c000ecd6:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000ecda:	e8 eb fe ff ff       	call   c000ebca <Computer::enableNMI(bool)>
c000ecdf:	58                   	pop    eax
c000ece0:	5a                   	pop    edx
c000ece1:	c3                   	ret    

c000ece2 <Computer::writeCMOS(unsigned char, unsigned char)>:
c000ece2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ece6:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000eced:	19 c0                	sbb    eax,eax
c000ecef:	83 e0 80             	and    eax,0xffffff80
c000ecf2:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000ecf6:	e6 70                	out    0x70,al
c000ecf8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ecfc:	e6 71                	out    0x71,al
c000ecfe:	c3                   	ret    
c000ecff:	90                   	nop

c000ed00 <Computer::handleNMI()>:
c000ed00:	56                   	push   esi
c000ed01:	53                   	push   ebx
c000ed02:	83 ec 10             	sub    esp,0x10
c000ed05:	e4 92                	in     al,0x92
c000ed07:	89 c6                	mov    esi,eax
c000ed09:	e4 61                	in     al,0x61
c000ed0b:	68 b7 9e 02 c0       	push   0xc0029eb7
c000ed10:	88 c3                	mov    bl,al
c000ed12:	e8 b2 39 00 00       	call   c00126c9 <Dbg::kprintf(char const*, ...)>
c000ed17:	83 c4 10             	add    esp,0x10
c000ed1a:	83 e6 10             	and    esi,0x10
c000ed1d:	75 0d                	jne    c000ed2c <Computer::handleNMI()+0x2c>
c000ed1f:	f6 c3 40             	test   bl,0x40
c000ed22:	75 1d                	jne    c000ed41 <Computer::handleNMI()+0x41>
c000ed24:	84 db                	test   bl,bl
c000ed26:	78 2d                	js     c000ed55 <Computer::handleNMI()+0x55>
c000ed28:	58                   	pop    eax
c000ed29:	5b                   	pop    ebx
c000ed2a:	5e                   	pop    esi
c000ed2b:	c3                   	ret    
c000ed2c:	83 ec 0c             	sub    esp,0xc
c000ed2f:	68 c8 9e 02 c0       	push   0xc0029ec8
c000ed34:	e8 fc b0 00 00       	call   c0019e35 <Krnl::panic(char const*)>
c000ed39:	83 c4 10             	add    esp,0x10
c000ed3c:	f6 c3 40             	test   bl,0x40
c000ed3f:	74 e3                	je     c000ed24 <Computer::handleNMI()+0x24>
c000ed41:	83 ec 0c             	sub    esp,0xc
c000ed44:	68 d5 9e 02 c0       	push   0xc0029ed5
c000ed49:	e8 e7 b0 00 00       	call   c0019e35 <Krnl::panic(char const*)>
c000ed4e:	83 c4 10             	add    esp,0x10
c000ed51:	84 db                	test   bl,bl
c000ed53:	79 d3                	jns    c000ed28 <Computer::handleNMI()+0x28>
c000ed55:	c7 44 24 10 df 9e 02 c0 	mov    DWORD PTR [esp+0x10],0xc0029edf
c000ed5d:	5a                   	pop    edx
c000ed5e:	5b                   	pop    ebx
c000ed5f:	5e                   	pop    esi
c000ed60:	e9 d0 b0 00 00       	jmp    c0019e35 <Krnl::panic(char const*)>
c000ed65:	90                   	nop

c000ed66 <Computer::setDiskActivityLight(int, bool)>:
c000ed66:	56                   	push   esi
c000ed67:	53                   	push   ebx
c000ed68:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000ed6c:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000ed71:	77 1b                	ja     c000ed8e <Computer::setDiskActivityLight(int, bool)+0x28>
c000ed73:	e4 92                	in     al,0x92
c000ed75:	bb 40 00 00 00       	mov    ebx,0x40
c000ed7a:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c000ed7e:	89 da                	mov    edx,ebx
c000ed80:	d3 e2                	shl    edx,cl
c000ed82:	89 f1                	mov    ecx,esi
c000ed84:	f7 d2                	not    edx
c000ed86:	d3 e3                	shl    ebx,cl
c000ed88:	21 d0                	and    eax,edx
c000ed8a:	09 d8                	or     eax,ebx
c000ed8c:	e6 92                	out    0x92,al
c000ed8e:	5b                   	pop    ebx
c000ed8f:	5e                   	pop    esi
c000ed90:	c3                   	ret    
c000ed91:	90                   	nop

c000ed92 <GDTEntry::setBase(unsigned int)>:
c000ed92:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ed96:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000ed9a:	89 c1                	mov    ecx,eax
c000ed9c:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000eda0:	c1 e9 10             	shr    ecx,0x10
c000eda3:	c1 e8 18             	shr    eax,0x18
c000eda6:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c000eda9:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000edac:	c3                   	ret    
c000edad:	90                   	nop

c000edae <GDTEntry::setLimit(unsigned int)>:
c000edae:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000edb2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000edb6:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c000edb9:	66 89 01             	mov    WORD PTR [ecx],ax
c000edbc:	83 e2 f0             	and    edx,0xfffffff0
c000edbf:	c1 e8 10             	shr    eax,0x10
c000edc2:	83 e0 0f             	and    eax,0xf
c000edc5:	09 d0                	or     eax,edx
c000edc7:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c000edca:	c3                   	ret    
c000edcb:	90                   	nop

c000edcc <GDT::GDT()>:
c000edcc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000edd0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000edd6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000edda:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000ede0:	90                   	nop
c000ede1:	c3                   	ret    

c000ede2 <GDT::addEntry(GDTEntry)>:
c000ede2:	53                   	push   ebx
c000ede3:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ede7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000edeb:	8b 02                	mov    eax,DWORD PTR [edx]
c000eded:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000edf1:	89 4c c2 04          	mov    DWORD PTR [edx+eax*8+0x4],ecx
c000edf5:	89 5c c2 08          	mov    DWORD PTR [edx+eax*8+0x8],ebx
c000edf9:	8d 48 01             	lea    ecx,[eax+0x1]
c000edfc:	c1 e0 03             	shl    eax,0x3
c000edff:	89 0a                	mov    DWORD PTR [edx],ecx
c000ee01:	5b                   	pop    ebx
c000ee02:	c3                   	ret    
c000ee03:	90                   	nop

c000ee04 <GDT::getNumberOfEntries()>:
c000ee04:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ee08:	8b 00                	mov    eax,DWORD PTR [eax]
c000ee0a:	c3                   	ret    
c000ee0b:	90                   	nop

c000ee0c <GDT::flush()>:
c000ee0c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ee10:	8b 10                	mov    edx,DWORD PTR [eax]
c000ee12:	83 c0 04             	add    eax,0x4
c000ee15:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c000ee1c:	a3 b2 d9 02 c0       	mov    ds:0xc002d9b2,eax
c000ee21:	66 89 15 b0 d9 02 c0 	mov    WORD PTR ds:0xc002d9b0,dx
c000ee28:	e9 23 16 ff ff       	jmp    c0000450 <loadGDT>
c000ee2d:	90                   	nop

c000ee2e <GDT::setup()>:
c000ee2e:	55                   	push   ebp
c000ee2f:	57                   	push   edi
c000ee30:	56                   	push   esi
c000ee31:	53                   	push   ebx
c000ee32:	83 ec 3c             	sub    esp,0x3c
c000ee35:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c000ee39:	6a 00                	push   0x0
c000ee3b:	8d 5c 24 1c          	lea    ebx,[esp+0x1c]
c000ee3f:	53                   	push   ebx
c000ee40:	e8 4d ff ff ff       	call   c000ed92 <GDTEntry::setBase(unsigned int)>
c000ee45:	6a 00                	push   0x0
c000ee47:	53                   	push   ebx
c000ee48:	e8 61 ff ff ff       	call   c000edae <GDTEntry::setLimit(unsigned int)>
c000ee4d:	81 64 24 2c ff 00 0f ff 	and    DWORD PTR [esp+0x2c],0xff0f00ff
c000ee55:	6a 00                	push   0x0
c000ee57:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c000ee5b:	53                   	push   ebx
c000ee5c:	e8 31 ff ff ff       	call   c000ed92 <GDTEntry::setBase(unsigned int)>
c000ee61:	68 ff ff ff 00       	push   0xffffff
c000ee66:	53                   	push   ebx
c000ee67:	e8 42 ff ff ff       	call   c000edae <GDTEntry::setLimit(unsigned int)>
c000ee6c:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000ee70:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000ee75:	0d 00 9a c0 00       	or     eax,0xc09a00
c000ee7a:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000ee7e:	83 c4 20             	add    esp,0x20
c000ee81:	6a 00                	push   0x0
c000ee83:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c000ee87:	53                   	push   ebx
c000ee88:	e8 05 ff ff ff       	call   c000ed92 <GDTEntry::setBase(unsigned int)>
c000ee8d:	68 ff ff ff 00       	push   0xffffff
c000ee92:	53                   	push   ebx
c000ee93:	e8 16 ff ff ff       	call   c000edae <GDTEntry::setLimit(unsigned int)>
c000ee98:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000ee9c:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000eea0:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000eea4:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000eea8:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000eeac:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000eeb1:	0d 00 92 c0 00       	or     eax,0xc09200
c000eeb6:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000eeba:	89 d8                	mov    eax,ebx
c000eebc:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000eec0:	80 cc 60             	or     ah,0x60
c000eec3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000eec7:	83 c4 0c             	add    esp,0xc
c000eeca:	89 f8                	mov    eax,edi
c000eecc:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000eed0:	80 cc 60             	or     ah,0x60
c000eed3:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000eed7:	89 c7                	mov    edi,eax
c000eed9:	55                   	push   ebp
c000eeda:	e8 03 ff ff ff       	call   c000ede2 <GDT::addEntry(GDTEntry)>
c000eedf:	83 c4 0c             	add    esp,0xc
c000eee2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000eee6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000eeea:	55                   	push   ebp
c000eeeb:	e8 f2 fe ff ff       	call   c000ede2 <GDT::addEntry(GDTEntry)>
c000eef0:	83 c4 0c             	add    esp,0xc
c000eef3:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000eef7:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000eefb:	55                   	push   ebp
c000eefc:	e8 e1 fe ff ff       	call   c000ede2 <GDT::addEntry(GDTEntry)>
c000ef01:	83 c4 0c             	add    esp,0xc
c000ef04:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ef08:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ef0c:	53                   	push   ebx
c000ef0d:	51                   	push   ecx
c000ef0e:	55                   	push   ebp
c000ef0f:	e8 ce fe ff ff       	call   c000ede2 <GDT::addEntry(GDTEntry)>
c000ef14:	83 c4 0c             	add    esp,0xc
c000ef17:	57                   	push   edi
c000ef18:	56                   	push   esi
c000ef19:	55                   	push   ebp
c000ef1a:	e8 c3 fe ff ff       	call   c000ede2 <GDT::addEntry(GDTEntry)>
c000ef1f:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000ef22:	e8 e5 fe ff ff       	call   c000ee0c <GDT::flush()>
c000ef27:	83 c4 4c             	add    esp,0x4c
c000ef2a:	5b                   	pop    ebx
c000ef2b:	5e                   	pop    esi
c000ef2c:	5f                   	pop    edi
c000ef2d:	5d                   	pop    ebp
c000ef2e:	c3                   	ret    

c000ef2f <idleFunction(void*)>:
c000ef2f:	53                   	push   ebx
c000ef30:	83 ec 08             	sub    esp,0x8
c000ef33:	a1 c8 0e 03 c0       	mov    eax,ds:0xc0030ec8
c000ef38:	48                   	dec    eax
c000ef39:	a3 c8 0e 03 c0       	mov    ds:0xc0030ec8,eax
c000ef3e:	75 01                	jne    c000ef41 <idleFunction(void*)+0x12>
c000ef40:	fb                   	sti    
c000ef41:	a1 a8 d9 02 c0       	mov    eax,ds:0xc002d9a8
c000ef46:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c000ef4c:	f6 82 92 11 00 00 04 	test   BYTE PTR [edx+0x1192],0x4
c000ef53:	74 3c                	je     c000ef91 <idleFunction(void*)+0x62>
c000ef55:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000ef5c:	74 33                	je     c000ef91 <idleFunction(void*)+0x62>
c000ef5e:	31 db                	xor    ebx,ebx
c000ef60:	52                   	push   edx
c000ef61:	52                   	push   edx
c000ef62:	68 e1 00 00 00       	push   0xe1
c000ef67:	50                   	push   eax
c000ef68:	e8 d3 fb ff ff       	call   c000eb40 <Computer::rdmsr(unsigned int)>
c000ef6d:	53                   	push   ebx
c000ef6e:	83 e0 02             	and    eax,0x2
c000ef71:	50                   	push   eax
c000ef72:	68 e1 00 00 00       	push   0xe1
c000ef77:	ff 35 a8 d9 02 c0    	push   DWORD PTR ds:0xc002d9a8
c000ef7d:	e8 ea fb ff ff       	call   c000eb6c <Computer::wrmsr(unsigned int, unsigned long long)>
c000ef82:	83 c4 20             	add    esp,0x20
c000ef85:	e8 f5 12 ff ff       	call   c000027f <doTPAUSE>
c000ef8a:	e8 91 94 01 00       	call   c0028420 <idleCommon()>
c000ef8f:	eb f4                	jmp    c000ef85 <idleFunction(void*)+0x56>
c000ef91:	fb                   	sti    
c000ef92:	f4                   	hlt    
c000ef93:	e8 88 94 01 00       	call   c0028420 <idleCommon()>
c000ef98:	eb f7                	jmp    c000ef91 <idleFunction(void*)+0x62>

c000ef9a <IDTEntry::IDTEntry(bool)>:
c000ef9a:	83 ec 04             	sub    esp,0x4
c000ef9d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000efa1:	88 04 24             	mov    BYTE PTR [esp],al
c000efa4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000efa8:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c000efae:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000efb2:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c000efb6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000efba:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000efbd:	83 e2 f0             	and    edx,0xfffffff0
c000efc0:	83 ca 0e             	or     edx,0xe
c000efc3:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000efc6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000efca:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000efcd:	83 e2 ef             	and    edx,0xffffffef
c000efd0:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000efd3:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c000efd7:	74 04                	je     c000efdd <IDTEntry::IDTEntry(bool)+0x43>
c000efd9:	b2 03                	mov    dl,0x3
c000efdb:	eb 02                	jmp    c000efdf <IDTEntry::IDTEntry(bool)+0x45>
c000efdd:	b2 00                	mov    dl,0x0
c000efdf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000efe3:	83 e2 03             	and    edx,0x3
c000efe6:	88 d1                	mov    cl,dl
c000efe8:	c1 e1 05             	shl    ecx,0x5
c000efeb:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000efee:	83 e2 9f             	and    edx,0xffffff9f
c000eff1:	09 ca                	or     edx,ecx
c000eff3:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000eff6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000effa:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000effd:	83 ca 80             	or     edx,0xffffff80
c000f000:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f003:	90                   	nop
c000f004:	83 c4 04             	add    esp,0x4
c000f007:	c3                   	ret    

c000f008 <IDTEntry::setOffset(unsigned int)>:
c000f008:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f00c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f010:	66 89 02             	mov    WORD PTR [edx],ax
c000f013:	c1 e8 10             	shr    eax,0x10
c000f016:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c000f01a:	c3                   	ret    
c000f01b:	90                   	nop

c000f01c <IDT::IDT()>:
c000f01c:	90                   	nop
c000f01d:	c3                   	ret    

c000f01e <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c000f01e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f022:	83 c0 30             	add    eax,0x30
c000f025:	c3                   	ret    

c000f026 <IDT::addEntry(IDTEntry, int)>:
c000f026:	53                   	push   ebx
c000f027:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f02b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000f02f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f033:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f037:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c000f03a:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c000f03e:	5b                   	pop    ebx
c000f03f:	c3                   	ret    

c000f040 <IDT::addEntry(int, void (*)(), bool)>:
c000f040:	53                   	push   ebx
c000f041:	83 ec 10             	sub    esp,0x10
c000f044:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000f049:	50                   	push   eax
c000f04a:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000f04e:	53                   	push   ebx
c000f04f:	e8 46 ff ff ff       	call   c000ef9a <IDTEntry::IDTEntry(bool)>
c000f054:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f058:	53                   	push   ebx
c000f059:	e8 aa ff ff ff       	call   c000f008 <IDTEntry::setOffset(unsigned int)>
c000f05e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f062:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f066:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f06a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000f06e:	e8 b3 ff ff ff       	call   c000f026 <IDT::addEntry(IDTEntry, int)>
c000f073:	83 c4 30             	add    esp,0x30
c000f076:	5b                   	pop    ebx
c000f077:	c3                   	ret    

c000f078 <IDT::flush()>:
c000f078:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f07c:	66 c7 05 b8 d9 02 c0 ff 07 	mov    WORD PTR ds:0xc002d9b8,0x7ff
c000f085:	a3 ba d9 02 c0       	mov    ds:0xc002d9ba,eax
c000f08a:	0f 01 1d b8 d9 02 c0 	lidtd  ds:0xc002d9b8
c000f091:	c3                   	ret    

c000f092 <IDT::setup()>:
c000f092:	57                   	push   edi
c000f093:	56                   	push   esi
c000f094:	53                   	push   ebx
c000f095:	83 ec 10             	sub    esp,0x10
c000f098:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f09c:	6a 00                	push   0x0
c000f09e:	68 70 04 00 c0       	push   0xc0000470
c000f0a3:	6a 00                	push   0x0
c000f0a5:	53                   	push   ebx
c000f0a6:	e8 95 ff ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f0ab:	6a 00                	push   0x0
c000f0ad:	68 80 04 00 c0       	push   0xc0000480
c000f0b2:	6a 01                	push   0x1
c000f0b4:	53                   	push   ebx
c000f0b5:	e8 86 ff ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f0ba:	83 c4 20             	add    esp,0x20
c000f0bd:	6a 00                	push   0x0
c000f0bf:	68 8a 04 00 c0       	push   0xc000048a
c000f0c4:	6a 02                	push   0x2
c000f0c6:	53                   	push   ebx
c000f0c7:	e8 74 ff ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f0cc:	6a 00                	push   0x0
c000f0ce:	68 94 04 00 c0       	push   0xc0000494
c000f0d3:	6a 03                	push   0x3
c000f0d5:	53                   	push   ebx
c000f0d6:	e8 65 ff ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f0db:	83 c4 20             	add    esp,0x20
c000f0de:	6a 00                	push   0x0
c000f0e0:	68 9e 04 00 c0       	push   0xc000049e
c000f0e5:	6a 04                	push   0x4
c000f0e7:	53                   	push   ebx
c000f0e8:	e8 53 ff ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f0ed:	6a 00                	push   0x0
c000f0ef:	68 a8 04 00 c0       	push   0xc00004a8
c000f0f4:	6a 05                	push   0x5
c000f0f6:	53                   	push   ebx
c000f0f7:	e8 44 ff ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f0fc:	83 c4 20             	add    esp,0x20
c000f0ff:	6a 00                	push   0x0
c000f101:	68 b2 04 00 c0       	push   0xc00004b2
c000f106:	6a 06                	push   0x6
c000f108:	53                   	push   ebx
c000f109:	e8 32 ff ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f10e:	6a 00                	push   0x0
c000f110:	68 bc 04 00 c0       	push   0xc00004bc
c000f115:	6a 07                	push   0x7
c000f117:	53                   	push   ebx
c000f118:	e8 23 ff ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f11d:	83 c4 20             	add    esp,0x20
c000f120:	6a 00                	push   0x0
c000f122:	68 c6 04 00 c0       	push   0xc00004c6
c000f127:	6a 08                	push   0x8
c000f129:	53                   	push   ebx
c000f12a:	e8 11 ff ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f12f:	6a 00                	push   0x0
c000f131:	68 ce 04 00 c0       	push   0xc00004ce
c000f136:	6a 09                	push   0x9
c000f138:	53                   	push   ebx
c000f139:	e8 02 ff ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f13e:	83 c4 20             	add    esp,0x20
c000f141:	6a 00                	push   0x0
c000f143:	68 d8 04 00 c0       	push   0xc00004d8
c000f148:	6a 0a                	push   0xa
c000f14a:	53                   	push   ebx
c000f14b:	e8 f0 fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f150:	6a 00                	push   0x0
c000f152:	68 e0 04 00 c0       	push   0xc00004e0
c000f157:	6a 0b                	push   0xb
c000f159:	53                   	push   ebx
c000f15a:	e8 e1 fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f15f:	83 c4 20             	add    esp,0x20
c000f162:	6a 00                	push   0x0
c000f164:	68 e8 04 00 c0       	push   0xc00004e8
c000f169:	6a 0c                	push   0xc
c000f16b:	53                   	push   ebx
c000f16c:	e8 cf fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f171:	6a 00                	push   0x0
c000f173:	68 f0 04 00 c0       	push   0xc00004f0
c000f178:	6a 0d                	push   0xd
c000f17a:	53                   	push   ebx
c000f17b:	e8 c0 fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f180:	83 c4 20             	add    esp,0x20
c000f183:	6a 00                	push   0x0
c000f185:	68 f8 04 00 c0       	push   0xc00004f8
c000f18a:	6a 0e                	push   0xe
c000f18c:	53                   	push   ebx
c000f18d:	e8 ae fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f192:	6a 00                	push   0x0
c000f194:	68 00 05 00 c0       	push   0xc0000500
c000f199:	6a 0f                	push   0xf
c000f19b:	53                   	push   ebx
c000f19c:	e8 9f fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f1a1:	83 c4 20             	add    esp,0x20
c000f1a4:	6a 00                	push   0x0
c000f1a6:	68 0a 05 00 c0       	push   0xc000050a
c000f1ab:	6a 10                	push   0x10
c000f1ad:	53                   	push   ebx
c000f1ae:	e8 8d fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f1b3:	6a 00                	push   0x0
c000f1b5:	68 14 05 00 c0       	push   0xc0000514
c000f1ba:	6a 11                	push   0x11
c000f1bc:	53                   	push   ebx
c000f1bd:	e8 7e fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f1c2:	83 c4 20             	add    esp,0x20
c000f1c5:	6a 00                	push   0x0
c000f1c7:	68 1e 05 00 c0       	push   0xc000051e
c000f1cc:	6a 12                	push   0x12
c000f1ce:	53                   	push   ebx
c000f1cf:	e8 6c fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f1d4:	6a 01                	push   0x1
c000f1d6:	68 b8 05 00 c0       	push   0xc00005b8
c000f1db:	6a 60                	push   0x60
c000f1dd:	53                   	push   ebx
c000f1de:	e8 5d fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f1e3:	83 c4 20             	add    esp,0x20
c000f1e6:	6a 00                	push   0x0
c000f1e8:	68 bf 05 00 c0       	push   0xc00005bf
c000f1ed:	6a 20                	push   0x20
c000f1ef:	53                   	push   ebx
c000f1f0:	e8 4b fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f1f5:	6a 00                	push   0x0
c000f1f7:	68 aa 05 00 c0       	push   0xc00005aa
c000f1fc:	6a 21                	push   0x21
c000f1fe:	53                   	push   ebx
c000f1ff:	e8 3c fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f204:	83 c4 20             	add    esp,0x20
c000f207:	6a 00                	push   0x0
c000f209:	68 b1 05 00 c0       	push   0xc00005b1
c000f20e:	6a 22                	push   0x22
c000f210:	53                   	push   ebx
c000f211:	e8 2a fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f216:	6a 00                	push   0x0
c000f218:	68 28 05 00 c0       	push   0xc0000528
c000f21d:	6a 23                	push   0x23
c000f21f:	53                   	push   ebx
c000f220:	e8 1b fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f225:	83 c4 20             	add    esp,0x20
c000f228:	6a 00                	push   0x0
c000f22a:	68 32 05 00 c0       	push   0xc0000532
c000f22f:	6a 24                	push   0x24
c000f231:	53                   	push   ebx
c000f232:	e8 09 fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f237:	6a 00                	push   0x0
c000f239:	68 3c 05 00 c0       	push   0xc000053c
c000f23e:	6a 25                	push   0x25
c000f240:	53                   	push   ebx
c000f241:	e8 fa fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f246:	83 c4 20             	add    esp,0x20
c000f249:	6a 00                	push   0x0
c000f24b:	68 46 05 00 c0       	push   0xc0000546
c000f250:	6a 26                	push   0x26
c000f252:	53                   	push   ebx
c000f253:	e8 e8 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f258:	6a 00                	push   0x0
c000f25a:	68 50 05 00 c0       	push   0xc0000550
c000f25f:	6a 27                	push   0x27
c000f261:	53                   	push   ebx
c000f262:	e8 d9 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f267:	83 c4 20             	add    esp,0x20
c000f26a:	6a 00                	push   0x0
c000f26c:	68 5a 05 00 c0       	push   0xc000055a
c000f271:	6a 28                	push   0x28
c000f273:	53                   	push   ebx
c000f274:	e8 c7 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f279:	6a 00                	push   0x0
c000f27b:	68 64 05 00 c0       	push   0xc0000564
c000f280:	6a 29                	push   0x29
c000f282:	53                   	push   ebx
c000f283:	e8 b8 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f288:	83 c4 20             	add    esp,0x20
c000f28b:	6a 00                	push   0x0
c000f28d:	68 6e 05 00 c0       	push   0xc000056e
c000f292:	6a 2a                	push   0x2a
c000f294:	53                   	push   ebx
c000f295:	e8 a6 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f29a:	6a 00                	push   0x0
c000f29c:	68 78 05 00 c0       	push   0xc0000578
c000f2a1:	6a 2b                	push   0x2b
c000f2a3:	53                   	push   ebx
c000f2a4:	e8 97 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f2a9:	83 c4 20             	add    esp,0x20
c000f2ac:	6a 00                	push   0x0
c000f2ae:	68 82 05 00 c0       	push   0xc0000582
c000f2b3:	6a 2c                	push   0x2c
c000f2b5:	53                   	push   ebx
c000f2b6:	e8 85 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f2bb:	6a 00                	push   0x0
c000f2bd:	68 8c 05 00 c0       	push   0xc000058c
c000f2c2:	6a 2d                	push   0x2d
c000f2c4:	53                   	push   ebx
c000f2c5:	e8 76 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f2ca:	83 c4 20             	add    esp,0x20
c000f2cd:	6a 00                	push   0x0
c000f2cf:	68 96 05 00 c0       	push   0xc0000596
c000f2d4:	6a 2e                	push   0x2e
c000f2d6:	53                   	push   ebx
c000f2d7:	e8 64 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f2dc:	6a 00                	push   0x0
c000f2de:	68 a0 05 00 c0       	push   0xc00005a0
c000f2e3:	6a 2f                	push   0x2f
c000f2e5:	53                   	push   ebx
c000f2e6:	e8 55 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f2eb:	83 c4 20             	add    esp,0x20
c000f2ee:	6a 00                	push   0x0
c000f2f0:	68 f6 05 00 c0       	push   0xc00005f6
c000f2f5:	6a 30                	push   0x30
c000f2f7:	53                   	push   ebx
c000f2f8:	e8 43 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f2fd:	6a 00                	push   0x0
c000f2ff:	68 00 06 00 c0       	push   0xc0000600
c000f304:	6a 31                	push   0x31
c000f306:	53                   	push   ebx
c000f307:	e8 34 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f30c:	83 c4 20             	add    esp,0x20
c000f30f:	6a 00                	push   0x0
c000f311:	68 0a 06 00 c0       	push   0xc000060a
c000f316:	6a 32                	push   0x32
c000f318:	53                   	push   ebx
c000f319:	e8 22 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f31e:	6a 00                	push   0x0
c000f320:	68 14 06 00 c0       	push   0xc0000614
c000f325:	6a 33                	push   0x33
c000f327:	53                   	push   ebx
c000f328:	e8 13 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f32d:	83 c4 20             	add    esp,0x20
c000f330:	6a 00                	push   0x0
c000f332:	68 1e 06 00 c0       	push   0xc000061e
c000f337:	6a 34                	push   0x34
c000f339:	53                   	push   ebx
c000f33a:	e8 01 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f33f:	6a 00                	push   0x0
c000f341:	68 28 06 00 c0       	push   0xc0000628
c000f346:	6a 35                	push   0x35
c000f348:	53                   	push   ebx
c000f349:	e8 f2 fc ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f34e:	83 c4 20             	add    esp,0x20
c000f351:	6a 00                	push   0x0
c000f353:	68 32 06 00 c0       	push   0xc0000632
c000f358:	6a 36                	push   0x36
c000f35a:	53                   	push   ebx
c000f35b:	e8 e0 fc ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f360:	6a 00                	push   0x0
c000f362:	68 3c 06 00 c0       	push   0xc000063c
c000f367:	6a 37                	push   0x37
c000f369:	53                   	push   ebx
c000f36a:	e8 d1 fc ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f36f:	83 c4 1c             	add    esp,0x1c
c000f372:	6a 03                	push   0x3
c000f374:	6a 02                	push   0x2
c000f376:	ff 35 10 db 02 c0    	push   DWORD PTR ds:0xc002db10
c000f37c:	e8 5b 27 00 00       	call   c0011adc <VAS::allocatePages(int, int)>
c000f381:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000f388:	89 c6                	mov    esi,eax
c000f38a:	e8 0a 02 00 00       	call   c000f599 <malloc>
c000f38f:	81 c6 00 20 00 00    	add    esi,0x2000
c000f395:	89 04 24             	mov    DWORD PTR [esp],eax
c000f398:	89 c7                	mov    edi,eax
c000f39a:	e8 c5 17 00 00       	call   c0010b64 <TSS::TSS()>
c000f39f:	83 c4 0c             	add    esp,0xc
c000f3a2:	68 c6 04 00 c0       	push   0xc00004c6
c000f3a7:	56                   	push   esi
c000f3a8:	57                   	push   edi
c000f3a9:	e8 f6 17 00 00       	call   c0010ba4 <TSS::setup(unsigned long, unsigned long)>
c000f3ae:	89 c6                	mov    esi,eax
c000f3b0:	58                   	pop    eax
c000f3b1:	5a                   	pop    edx
c000f3b2:	6a 00                	push   0x0
c000f3b4:	8d 44 24 14          	lea    eax,[esp+0x14]
c000f3b8:	50                   	push   eax
c000f3b9:	e8 dc fb ff ff       	call   c000ef9a <IDTEntry::IDTEntry(bool)>
c000f3be:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f3c2:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000f3c7:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c000f3ce:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c000f3d4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f3d8:	80 ce 05             	or     dh,0x5
c000f3db:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c000f3de:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000f3e2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f3e6:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c000f3e9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f3ec:	e8 87 fc ff ff       	call   c000f078 <IDT::flush()>
c000f3f1:	83 c4 20             	add    esp,0x20
c000f3f4:	5b                   	pop    ebx
c000f3f5:	5e                   	pop    esi
c000f3f6:	5f                   	pop    edi
c000f3f7:	c3                   	ret    

c000f3f8 <sbrk>:
c000f3f8:	55                   	push   ebp
c000f3f9:	57                   	push   edi
c000f3fa:	56                   	push   esi
c000f3fb:	53                   	push   ebx
c000f3fc:	83 ec 1c             	sub    esp,0x1c
c000f3ff:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f403:	85 c0                	test   eax,eax
c000f405:	74 3e                	je     c000f445 <sbrk+0x4d>
c000f407:	78 43                	js     c000f44c <sbrk+0x54>
c000f409:	8b 15 a8 d9 02 c0    	mov    edx,DWORD PTR ds:0xc002d9a8
c000f40f:	8b 92 60 01 00 00    	mov    edx,DWORD PTR [edx+0x160]
c000f415:	8a 92 91 11 00 00    	mov    dl,BYTE PTR [edx+0x1191]
c000f41b:	83 e2 01             	and    edx,0x1
c000f41e:	88 54 24 07          	mov    BYTE PTR [esp+0x7],dl
c000f422:	8b 0d 7c c7 02 c0    	mov    ecx,DWORD PTR ds:0xc002c77c
c000f428:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000f42c:	05 ff 0f 00 00       	add    eax,0xfff
c000f431:	89 c2                	mov    edx,eax
c000f433:	78 2f                	js     c000f464 <sbrk+0x6c>
c000f435:	c1 fa 0c             	sar    edx,0xc
c000f438:	89 d7                	mov    edi,edx
c000f43a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000f43e:	be 00 00 00 00       	mov    esi,0x0
c000f443:	eb 36                	jmp    c000f47b <sbrk+0x83>
c000f445:	a1 7c c7 02 c0       	mov    eax,ds:0xc002c77c
c000f44a:	eb 73                	jmp    c000f4bf <sbrk+0xc7>
c000f44c:	83 ec 08             	sub    esp,0x8
c000f44f:	50                   	push   eax
c000f450:	68 80 9f 02 c0       	push   0xc0029f80
c000f455:	e8 6f 32 00 00       	call   c00126c9 <Dbg::kprintf(char const*, ...)>
c000f45a:	83 c4 10             	add    esp,0x10
c000f45d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f462:	eb 5b                	jmp    c000f4bf <sbrk+0xc7>
c000f464:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c000f46a:	eb c9                	jmp    c000f435 <sbrk+0x3d>
c000f46c:	81 05 7c c7 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc002c77c,0x1000
c000f476:	46                   	inc    esi
c000f477:	39 f7                	cmp    edi,esi
c000f479:	74 33                	je     c000f4ae <sbrk+0xb6>
c000f47b:	8b 1d 10 db 02 c0    	mov    ebx,DWORD PTR ds:0xc002db10
c000f481:	8b 2d 7c c7 02 c0    	mov    ebp,DWORD PTR ds:0xc002c77c
c000f487:	e8 09 05 00 00       	call   c000f995 <Phys::allocatePage()>
c000f48c:	68 01 04 00 00       	push   0x401
c000f491:	55                   	push   ebp
c000f492:	50                   	push   eax
c000f493:	53                   	push   ebx
c000f494:	e8 41 25 00 00       	call   c00119da <VAS::mapPage(unsigned long, unsigned long, int)>
c000f499:	83 c4 10             	add    esp,0x10
c000f49c:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f4a1:	74 c9                	je     c000f46c <sbrk+0x74>
c000f4a3:	8b 1d 7c c7 02 c0    	mov    ebx,DWORD PTR ds:0xc002c77c
c000f4a9:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000f4ac:	eb be                	jmp    c000f46c <sbrk+0x74>
c000f4ae:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f4b3:	75 12                	jne    c000f4c7 <sbrk+0xcf>
c000f4b5:	0f 20 d8             	mov    eax,cr3
c000f4b8:	0f 22 d8             	mov    cr3,eax
c000f4bb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f4bf:	83 c4 1c             	add    esp,0x1c
c000f4c2:	5b                   	pop    ebx
c000f4c3:	5e                   	pop    esi
c000f4c4:	5f                   	pop    edi
c000f4c5:	5d                   	pop    ebp
c000f4c6:	c3                   	ret    
c000f4c7:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000f4cb:	89 cb                	mov    ebx,ecx
c000f4cd:	c1 eb 0a             	shr    ebx,0xa
c000f4d0:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000f4d6:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000f4dc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f4e0:	c1 e0 0c             	shl    eax,0xc
c000f4e3:	01 c8                	add    eax,ecx
c000f4e5:	c1 e8 0a             	shr    eax,0xa
c000f4e8:	25 00 f0 ff ff       	and    eax,0xfffff000
c000f4ed:	2d 00 00 40 00       	sub    eax,0x400000
c000f4f2:	39 c3                	cmp    ebx,eax
c000f4f4:	77 c5                	ja     c000f4bb <sbrk+0xc3>
c000f4f6:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000f4f9:	81 c3 00 10 00 00    	add    ebx,0x1000
c000f4ff:	39 d8                	cmp    eax,ebx
c000f501:	73 f3                	jae    c000f4f6 <sbrk+0xfe>
c000f503:	eb b6                	jmp    c000f4bb <sbrk+0xc3>

c000f505 <mmap>:
c000f505:	83 ec 18             	sub    esp,0x18
c000f508:	68 b0 9f 02 c0       	push   0xc0029fb0
c000f50d:	e8 23 a9 00 00       	call   c0019e35 <Krnl::panic(char const*)>
c000f512:	b8 00 00 00 00       	mov    eax,0x0
c000f517:	83 c4 1c             	add    esp,0x1c
c000f51a:	c3                   	ret    

c000f51b <munmap>:
c000f51b:	83 ec 18             	sub    esp,0x18
c000f51e:	68 b5 9f 02 c0       	push   0xc0029fb5
c000f523:	e8 0d a9 00 00       	call   c0019e35 <Krnl::panic(char const*)>
c000f528:	b8 00 00 00 00       	mov    eax,0x0
c000f52d:	83 c4 1c             	add    esp,0x1c
c000f530:	c3                   	ret    

c000f531 <liballoc_lock()>:
c000f531:	fa                   	cli    
c000f532:	ff 05 c8 0e 03 c0    	inc    DWORD PTR ds:0xc0030ec8
c000f538:	b8 00 00 00 00       	mov    eax,0x0
c000f53d:	c3                   	ret    

c000f53e <liballoc_unlock()>:
c000f53e:	a1 c8 0e 03 c0       	mov    eax,ds:0xc0030ec8
c000f543:	48                   	dec    eax
c000f544:	a3 c8 0e 03 c0       	mov    ds:0xc0030ec8,eax
c000f549:	75 01                	jne    c000f54c <liballoc_unlock()+0xe>
c000f54b:	fb                   	sti    
c000f54c:	b8 00 00 00 00       	mov    eax,0x0
c000f551:	c3                   	ret    

c000f552 <liballoc_alloc(int)>:
c000f552:	83 ec 10             	sub    esp,0x10
c000f555:	6a 01                	push   0x1
c000f557:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f55b:	ff 35 10 db 02 c0    	push   DWORD PTR ds:0xc002db10
c000f561:	e8 76 25 00 00       	call   c0011adc <VAS::allocatePages(int, int)>
c000f566:	83 c4 1c             	add    esp,0x1c
c000f569:	c3                   	ret    

c000f56a <liballoc_free(void*, int)>:
c000f56a:	83 ec 14             	sub    esp,0x14
c000f56d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f571:	ff 35 10 db 02 c0    	push   DWORD PTR ds:0xc002db10
c000f577:	e8 0a 22 00 00       	call   c0011786 <VAS::freeAllocatedPages(unsigned long)>
c000f57c:	b8 00 00 00 00       	mov    eax,0x0
c000f581:	83 c4 1c             	add    esp,0x1c
c000f584:	c3                   	ret    

c000f585 <realloc>:
c000f585:	83 ec 14             	sub    esp,0x14
c000f588:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f58c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f590:	e8 97 20 ff ff       	call   c000162c <dlrealloc>
c000f595:	83 c4 1c             	add    esp,0x1c
c000f598:	c3                   	ret    

c000f599 <malloc>:
c000f599:	83 ec 18             	sub    esp,0x18
c000f59c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f5a0:	e8 4a 1b ff ff       	call   c00010ef <dlmalloc>
c000f5a5:	83 c4 1c             	add    esp,0x1c
c000f5a8:	c3                   	ret    

c000f5a9 <free>:
c000f5a9:	83 ec 18             	sub    esp,0x18
c000f5ac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f5b0:	e8 df 17 ff ff       	call   c0000d94 <dlfree>
c000f5b5:	83 c4 1c             	add    esp,0x1c
c000f5b8:	c3                   	ret    

c000f5b9 <rfree>:
c000f5b9:	83 ec 18             	sub    esp,0x18
c000f5bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f5c0:	e8 cf 17 ff ff       	call   c0000d94 <dlfree>
c000f5c5:	83 c4 1c             	add    esp,0x1c
c000f5c8:	c3                   	ret    

c000f5c9 <calloc>:
c000f5c9:	56                   	push   esi
c000f5ca:	53                   	push   ebx
c000f5cb:	83 ec 10             	sub    esp,0x10
c000f5ce:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f5d2:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c000f5d7:	53                   	push   ebx
c000f5d8:	e8 bc ff ff ff       	call   c000f599 <malloc>
c000f5dd:	89 c6                	mov    esi,eax
c000f5df:	83 c4 0c             	add    esp,0xc
c000f5e2:	53                   	push   ebx
c000f5e3:	6a 00                	push   0x0
c000f5e5:	50                   	push   eax
c000f5e6:	e8 65 11 ff ff       	call   c0000750 <memset>
c000f5eb:	89 f0                	mov    eax,esi
c000f5ed:	83 c4 14             	add    esp,0x14
c000f5f0:	5b                   	pop    ebx
c000f5f1:	5e                   	pop    esi
c000f5f2:	c3                   	ret    

c000f5f3 <Krnl::setBootMessage(char const*)>:
c000f5f3:	57                   	push   edi
c000f5f4:	56                   	push   esi
c000f5f5:	53                   	push   ebx
c000f5f6:	81 ec a4 00 00 00    	sub    esp,0xa4
c000f5fc:	8b 9c 24 b4 00 00 00 	mov    ebx,DWORD PTR [esp+0xb4]
c000f603:	68 9e 00 00 00       	push   0x9e
c000f608:	6a 00                	push   0x0
c000f60a:	8d 74 24 0e          	lea    esi,[esp+0xe]
c000f60e:	56                   	push   esi
c000f60f:	e8 3c 11 ff ff       	call   c0000750 <memset>
c000f614:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f617:	e8 50 11 ff ff       	call   c000076c <strlen>
c000f61c:	ba 50 00 00 00       	mov    edx,0x50
c000f621:	83 c4 10             	add    esp,0x10
c000f624:	29 c2                	sub    edx,eax
c000f626:	66 0f be 03          	movsx  ax,BYTE PTR [ebx]
c000f62a:	d1 ea                	shr    edx,1
c000f62c:	84 c0                	test   al,al
c000f62e:	74 19                	je     c000f649 <Krnl::setBootMessage(char const*)+0x56>
c000f630:	01 d2                	add    edx,edx
c000f632:	43                   	inc    ebx
c000f633:	01 f2                	add    edx,esi
c000f635:	80 cc 0f             	or     ah,0xf
c000f638:	83 c2 02             	add    edx,0x2
c000f63b:	66 89 42 fe          	mov    WORD PTR [edx-0x2],ax
c000f63f:	43                   	inc    ebx
c000f640:	66 0f be 43 ff       	movsx  ax,BYTE PTR [ebx-0x1]
c000f645:	84 c0                	test   al,al
c000f647:	75 ec                	jne    c000f635 <Krnl::setBootMessage(char const*)+0x42>
c000f649:	bf 80 8c 0b c2       	mov    edi,0xc20b8c80
c000f64e:	b9 9e 00 00 00       	mov    ecx,0x9e
c000f653:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f655:	81 c4 a0 00 00 00    	add    esp,0xa0
c000f65b:	5b                   	pop    ebx
c000f65c:	5e                   	pop    esi
c000f65d:	5f                   	pop    edi
c000f65e:	c3                   	ret    

c000f65f <kernel_main>:
c000f65f:	57                   	push   edi
c000f660:	bf f9 03 00 00       	mov    edi,0x3f9
c000f665:	56                   	push   esi
c000f666:	89 fa                	mov    edx,edi
c000f668:	53                   	push   ebx
c000f669:	31 f6                	xor    esi,esi
c000f66b:	83 ec 2c             	sub    esp,0x2c
c000f66e:	89 f0                	mov    eax,esi
c000f670:	ee                   	out    dx,al
c000f671:	bb fb 03 00 00       	mov    ebx,0x3fb
c000f676:	b0 80                	mov    al,0x80
c000f678:	89 da                	mov    edx,ebx
c000f67a:	ee                   	out    dx,al
c000f67b:	b1 03                	mov    cl,0x3
c000f67d:	ba f8 03 00 00       	mov    edx,0x3f8
c000f682:	88 c8                	mov    al,cl
c000f684:	ee                   	out    dx,al
c000f685:	89 f0                	mov    eax,esi
c000f687:	89 fa                	mov    edx,edi
c000f689:	ee                   	out    dx,al
c000f68a:	88 c8                	mov    al,cl
c000f68c:	89 da                	mov    edx,ebx
c000f68e:	ee                   	out    dx,al
c000f68f:	b0 c7                	mov    al,0xc7
c000f691:	ba fa 03 00 00       	mov    edx,0x3fa
c000f696:	ee                   	out    dx,al
c000f697:	b0 0b                	mov    al,0xb
c000f699:	ba fc 03 00 00       	mov    edx,0x3fc
c000f69e:	ee                   	out    dx,al
c000f69f:	68 bc 9f 02 c0       	push   0xc0029fbc
c000f6a4:	e8 20 30 00 00       	call   c00126c9 <Dbg::kprintf(char const*, ...)>
c000f6a9:	e8 b8 09 00 00       	call   c0010066 <installVgaTextImplementation()>
c000f6ae:	0f b6 05 80 c7 02 c0 	movzx  eax,BYTE PTR ds:0xc002c780
c000f6b5:	83 c4 10             	add    esp,0x10
c000f6b8:	84 c0                	test   al,al
c000f6ba:	74 6c                	je     c000f728 <kernel_main+0xc9>
c000f6bc:	31 db                	xor    ebx,ebx
c000f6be:	bf 0a 00 00 00       	mov    edi,0xa
c000f6c3:	be 05 00 00 00       	mov    esi,0x5
c000f6c8:	31 c9                	xor    ecx,ecx
c000f6ca:	eb 2a                	jmp    c000f6f6 <kernel_main+0x97>
c000f6cc:	3c 0d                	cmp    al,0xd
c000f6ce:	74 1a                	je     c000f6ea <kernel_main+0x8b>
c000f6d0:	3c 0a                	cmp    al,0xa
c000f6d2:	74 40                	je     c000f714 <kernel_main+0xb5>
c000f6d4:	8d 14 b6             	lea    edx,[esi+esi*4]
c000f6d7:	80 cc 0e             	or     ah,0xe
c000f6da:	c1 e2 04             	shl    edx,0x4
c000f6dd:	01 ca                	add    edx,ecx
c000f6df:	41                   	inc    ecx
c000f6e0:	01 fa                	add    edx,edi
c000f6e2:	66 89 84 12 00 80 0b c2 	mov    WORD PTR [edx+edx*1-0x3df48000],ax
c000f6ea:	43                   	inc    ebx
c000f6eb:	0f b6 83 80 c7 02 c0 	movzx  eax,BYTE PTR [ebx-0x3ffd3880]
c000f6f2:	84 c0                	test   al,al
c000f6f4:	74 32                	je     c000f728 <kernel_main+0xc9>
c000f6f6:	80 b9 b6 c7 02 c0 db 	cmp    BYTE PTR [ecx-0x3ffd384a],0xdb
c000f6fd:	75 cd                	jne    c000f6cc <kernel_main+0x6d>
c000f6ff:	0f b6 91 b5 c7 02 c0 	movzx  edx,BYTE PTR [ecx-0x3ffd384b]
c000f706:	83 e2 fe             	and    edx,0xfffffffe
c000f709:	81 fa ba 00 00 00    	cmp    edx,0xba
c000f70f:	75 bb                	jne    c000f6cc <kernel_main+0x6d>
c000f711:	47                   	inc    edi
c000f712:	eb b8                	jmp    c000f6cc <kernel_main+0x6d>
c000f714:	43                   	inc    ebx
c000f715:	46                   	inc    esi
c000f716:	31 c9                	xor    ecx,ecx
c000f718:	0f b6 83 80 c7 02 c0 	movzx  eax,BYTE PTR [ebx-0x3ffd3880]
c000f71f:	bf 0a 00 00 00       	mov    edi,0xa
c000f724:	84 c0                	test   al,al
c000f726:	75 ce                	jne    c000f6f6 <kernel_main+0x97>
c000f728:	83 ec 0c             	sub    esp,0xc
c000f72b:	68 d4 9f 02 c0       	push   0xc0029fd4
c000f730:	e8 be fe ff ff       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c000f735:	a1 00 05 00 00       	mov    eax,ds:0x500
c000f73a:	a3 c0 d9 02 c0       	mov    ds:0xc002d9c0,eax
c000f73f:	a1 24 05 00 00       	mov    eax,ds:0x524
c000f744:	05 ff 0f 00 00       	add    eax,0xfff
c000f749:	25 00 f0 ff ff       	and    eax,0xfffff000
c000f74e:	89 04 24             	mov    DWORD PTR [esp],eax
c000f751:	e8 cb 03 00 00       	call   c000fb21 <Phys::physicalMemorySetup(unsigned int)>
c000f756:	e8 81 1c 00 00       	call   c00113dc <Virt::virtualMemorySetup()>
c000f75b:	58                   	pop    eax
c000f75c:	8d 5c 24 18          	lea    ebx,[esp+0x18]
c000f760:	53                   	push   ebx
c000f761:	e8 48 1e 00 00       	call   c00115ae <VAS::VAS()>
c000f766:	89 1d 10 db 02 c0    	mov    DWORD PTR ds:0xc002db10,ebx
c000f76c:	e8 af 08 ff ff       	call   c0000020 <callGlobalConstructors>
c000f771:	c7 04 24 ec 01 00 00 	mov    DWORD PTR [esp],0x1ec
c000f778:	e8 1c fe ff ff       	call   c000f599 <malloc>
c000f77d:	89 04 24             	mov    DWORD PTR [esp],eax
c000f780:	89 c6                	mov    esi,eax
c000f782:	e8 4f f0 ff ff       	call   c000e7d6 <Computer::Computer()>
c000f787:	6a 00                	push   0x0
c000f789:	89 35 a8 d9 02 c0    	mov    DWORD PTR ds:0xc002d9a8,esi
c000f78f:	6a 00                	push   0x0
c000f791:	6a 00                	push   0x0
c000f793:	56                   	push   esi
c000f794:	e8 49 f4 ff ff       	call   c000ebe2 <Computer::open(int, int, void*)>
c000f799:	83 c4 14             	add    esp,0x14
c000f79c:	53                   	push   ebx
c000f79d:	e8 bc 20 00 00       	call   c001185e <VAS::~VAS()>
c000f7a2:	83 c4 30             	add    esp,0x30
c000f7a5:	5b                   	pop    ebx
c000f7a6:	5e                   	pop    esi
c000f7a7:	5f                   	pop    edi
c000f7a8:	c3                   	ret    

c000f7a9 <Phys::allocateDMA(unsigned long)>:
c000f7a9:	55                   	push   ebp
c000f7aa:	31 ed                	xor    ebp,ebp
c000f7ac:	57                   	push   edi
c000f7ad:	56                   	push   esi
c000f7ae:	53                   	push   ebx
c000f7af:	31 db                	xor    ebx,ebx
c000f7b1:	83 ec 18             	sub    esp,0x18
c000f7b4:	68 f3 9f 02 c0       	push   0xc0029ff3
c000f7b9:	e8 0b 2f 00 00       	call   c00126c9 <Dbg::kprintf(char const*, ...)>
c000f7be:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f7c2:	31 d2                	xor    edx,edx
c000f7c4:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c000f7ca:	83 c4 10             	add    esp,0x10
c000f7cd:	c1 ee 0c             	shr    esi,0xc
c000f7d0:	31 c9                	xor    ecx,ecx
c000f7d2:	eb 17                	jmp    c000f7eb <Phys::allocateDMA(unsigned long)+0x42>
c000f7d4:	85 c9                	test   ecx,ecx
c000f7d6:	75 04                	jne    c000f7dc <Phys::allocateDMA(unsigned long)+0x33>
c000f7d8:	89 d5                	mov    ebp,edx
c000f7da:	89 d3                	mov    ebx,edx
c000f7dc:	8d 41 01             	lea    eax,[ecx+0x1]
c000f7df:	39 c6                	cmp    esi,eax
c000f7e1:	74 23                	je     c000f806 <Phys::allocateDMA(unsigned long)+0x5d>
c000f7e3:	42                   	inc    edx
c000f7e4:	89 c1                	mov    ecx,eax
c000f7e6:	83 fa 2f             	cmp    edx,0x2f
c000f7e9:	7f 11                	jg     c000f7fc <Phys::allocateDMA(unsigned long)+0x53>
c000f7eb:	80 ba 00 da 02 c0 00 	cmp    BYTE PTR [edx-0x3ffd2600],0x0
c000f7f2:	74 e0                	je     c000f7d4 <Phys::allocateDMA(unsigned long)+0x2b>
c000f7f4:	31 c9                	xor    ecx,ecx
c000f7f6:	42                   	inc    edx
c000f7f7:	83 fa 2f             	cmp    edx,0x2f
c000f7fa:	7e ef                	jle    c000f7eb <Phys::allocateDMA(unsigned long)+0x42>
c000f7fc:	83 c4 0c             	add    esp,0xc
c000f7ff:	31 c0                	xor    eax,eax
c000f801:	5b                   	pop    ebx
c000f802:	5e                   	pop    esi
c000f803:	5f                   	pop    edi
c000f804:	5d                   	pop    ebp
c000f805:	c3                   	ret    
c000f806:	8d 14 33             	lea    edx,[ebx+esi*1]
c000f809:	89 d7                	mov    edi,edx
c000f80b:	4f                   	dec    edi
c000f80c:	79 03                	jns    c000f811 <Phys::allocateDMA(unsigned long)+0x68>
c000f80e:	8d 7a 0e             	lea    edi,[edx+0xe]
c000f811:	c1 ff 04             	sar    edi,0x4
c000f814:	89 da                	mov    edx,ebx
c000f816:	c1 fa 04             	sar    edx,0x4
c000f819:	39 fa                	cmp    edx,edi
c000f81b:	75 43                	jne    c000f860 <Phys::allocateDMA(unsigned long)+0xb7>
c000f81d:	85 c0                	test   eax,eax
c000f81f:	74 1a                	je     c000f83b <Phys::allocateDMA(unsigned long)+0x92>
c000f821:	be 00 da 02 c0       	mov    esi,0xc002da00
c000f826:	8d 93 00 da 02 c0    	lea    edx,[ebx-0x3ffd2600]
c000f82c:	f7 d6                	not    esi
c000f82e:	29 de                	sub    esi,ebx
c000f830:	c6 02 01             	mov    BYTE PTR [edx],0x1
c000f833:	42                   	inc    edx
c000f834:	8d 04 16             	lea    eax,[esi+edx*1]
c000f837:	39 c1                	cmp    ecx,eax
c000f839:	7f f5                	jg     c000f830 <Phys::allocateDMA(unsigned long)+0x87>
c000f83b:	83 ec 0c             	sub    esp,0xc
c000f83e:	68 0c a0 02 c0       	push   0xc002a00c
c000f843:	e8 81 2e 00 00       	call   c00126c9 <Dbg::kprintf(char const*, ...)>
c000f848:	83 c4 10             	add    esp,0x10
c000f84b:	85 ff                	test   edi,edi
c000f84d:	74 17                	je     c000f866 <Phys::allocateDMA(unsigned long)+0xbd>
c000f84f:	83 c4 0c             	add    esp,0xc
c000f852:	8d 83 50 20 0c 00    	lea    eax,[ebx+0xc2050]
c000f858:	5b                   	pop    ebx
c000f859:	c1 e0 0c             	shl    eax,0xc
c000f85c:	5e                   	pop    esi
c000f85d:	5f                   	pop    edi
c000f85e:	5d                   	pop    ebp
c000f85f:	c3                   	ret    
c000f860:	89 ea                	mov    edx,ebp
c000f862:	31 c9                	xor    ecx,ecx
c000f864:	eb 90                	jmp    c000f7f6 <Phys::allocateDMA(unsigned long)+0x4d>
c000f866:	83 c4 0c             	add    esp,0xc
c000f869:	c1 e3 0c             	shl    ebx,0xc
c000f86c:	8d 83 00 00 01 c2    	lea    eax,[ebx-0x3dff0000]
c000f872:	5b                   	pop    ebx
c000f873:	5e                   	pop    esi
c000f874:	5f                   	pop    edi
c000f875:	5d                   	pop    ebp
c000f876:	c3                   	ret    

c000f877 <Phys::freeDMA(unsigned long, unsigned long)>:
c000f877:	83 ec 18             	sub    esp,0x18
c000f87a:	68 23 a0 02 c0       	push   0xc002a023
c000f87f:	e8 45 2e 00 00       	call   c00126c9 <Dbg::kprintf(char const*, ...)>
c000f884:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f888:	83 c4 10             	add    esp,0x10
c000f88b:	8d 88 ff 0f 00 00    	lea    ecx,[eax+0xfff]
c000f891:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f895:	c1 e9 0c             	shr    ecx,0xc
c000f898:	81 7c 24 10 ff ff 05 c2 	cmp    DWORD PTR [esp+0x10],0xc205ffff
c000f8a0:	76 29                	jbe    c000f8cb <Phys::freeDMA(unsigned long, unsigned long)+0x54>
c000f8a2:	8d 90 00 00 fa 3d    	lea    edx,[eax+0x3dfa0000]
c000f8a8:	c1 ea 0c             	shr    edx,0xc
c000f8ab:	83 c2 10             	add    edx,0x10
c000f8ae:	85 c9                	test   ecx,ecx
c000f8b0:	74 15                	je     c000f8c7 <Phys::freeDMA(unsigned long, unsigned long)+0x50>
c000f8b2:	8d 82 00 da 02 c0    	lea    eax,[edx-0x3ffd2600]
c000f8b8:	8d 94 11 00 da 02 c0 	lea    edx,[ecx+edx*1-0x3ffd2600]
c000f8bf:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000f8c2:	40                   	inc    eax
c000f8c3:	39 d0                	cmp    eax,edx
c000f8c5:	75 f8                	jne    c000f8bf <Phys::freeDMA(unsigned long, unsigned long)+0x48>
c000f8c7:	83 c4 0c             	add    esp,0xc
c000f8ca:	c3                   	ret    
c000f8cb:	8d 90 00 00 ff 3d    	lea    edx,[eax+0x3dff0000]
c000f8d1:	c1 ea 0c             	shr    edx,0xc
c000f8d4:	eb d8                	jmp    c000f8ae <Phys::freeDMA(unsigned long, unsigned long)+0x37>

c000f8d6 <Phys::setPageState(unsigned long, bool)>:
c000f8d6:	56                   	push   esi
c000f8d7:	ba 01 00 00 00       	mov    edx,0x1
c000f8dc:	53                   	push   ebx
c000f8dd:	8b 35 c4 c8 02 c0    	mov    esi,DWORD PTR ds:0xc002c8c4
c000f8e3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f8e7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f8eb:	89 c8                	mov    eax,ecx
c000f8ed:	83 e1 07             	and    ecx,0x7
c000f8f0:	c1 e8 03             	shr    eax,0x3
c000f8f3:	d3 e3                	shl    ebx,cl
c000f8f5:	01 c6                	add    esi,eax
c000f8f7:	d3 e2                	shl    edx,cl
c000f8f9:	f7 d2                	not    edx
c000f8fb:	20 16                	and    BYTE PTR [esi],dl
c000f8fd:	03 05 c4 c8 02 c0    	add    eax,DWORD PTR ds:0xc002c8c4
c000f903:	08 18                	or     BYTE PTR [eax],bl
c000f905:	5b                   	pop    ebx
c000f906:	5e                   	pop    esi
c000f907:	c3                   	ret    

c000f908 <Phys::getPageState(unsigned long)>:
c000f908:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f90c:	8b 15 c4 c8 02 c0    	mov    edx,DWORD PTR ds:0xc002c8c4
c000f912:	89 c8                	mov    eax,ecx
c000f914:	83 e1 07             	and    ecx,0x7
c000f917:	c1 e8 03             	shr    eax,0x3
c000f91a:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c000f91e:	d3 f8                	sar    eax,cl
c000f920:	83 e0 01             	and    eax,0x1
c000f923:	c3                   	ret    

c000f924 <Phys::freePage(unsigned long)>:
c000f924:	53                   	push   ebx
c000f925:	83 ec 10             	sub    esp,0x10
c000f928:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000f92c:	53                   	push   ebx
c000f92d:	68 39 a0 02 c0       	push   0xc002a039
c000f932:	e8 92 2d 00 00       	call   c00126c9 <Dbg::kprintf(char const*, ...)>
c000f937:	83 c4 10             	add    esp,0x10
c000f93a:	81 fb ff ff 07 00    	cmp    ebx,0x7ffff
c000f940:	76 3d                	jbe    c000f97f <Phys::freePage(unsigned long)+0x5b>
c000f942:	83 ec 0c             	sub    esp,0xc
c000f945:	c1 eb 0c             	shr    ebx,0xc
c000f948:	53                   	push   ebx
c000f949:	e8 ba ff ff ff       	call   c000f908 <Phys::getPageState(unsigned long)>
c000f94e:	83 c4 10             	add    esp,0x10
c000f951:	84 c0                	test   al,al
c000f953:	74 19                	je     c000f96e <Phys::freePage(unsigned long)+0x4a>
c000f955:	83 ec 08             	sub    esp,0x8
c000f958:	ff 0d f0 d9 02 c0    	dec    DWORD PTR ds:0xc002d9f0
c000f95e:	6a 00                	push   0x0
c000f960:	53                   	push   ebx
c000f961:	e8 70 ff ff ff       	call   c000f8d6 <Phys::setPageState(unsigned long, bool)>
c000f966:	83 c4 10             	add    esp,0x10
c000f969:	83 c4 08             	add    esp,0x8
c000f96c:	5b                   	pop    ebx
c000f96d:	c3                   	ret    
c000f96e:	c7 44 24 10 4c a0 02 c0 	mov    DWORD PTR [esp+0x10],0xc002a04c
c000f976:	83 c4 08             	add    esp,0x8
c000f979:	5b                   	pop    ebx
c000f97a:	e9 b6 a4 00 00       	jmp    c0019e35 <Krnl::panic(char const*)>
c000f97f:	83 ec 08             	sub    esp,0x8
c000f982:	68 00 10 00 00       	push   0x1000
c000f987:	53                   	push   ebx
c000f988:	e8 ea fe ff ff       	call   c000f877 <Phys::freeDMA(unsigned long, unsigned long)>
c000f98d:	83 c4 10             	add    esp,0x10
c000f990:	83 c4 08             	add    esp,0x8
c000f993:	5b                   	pop    ebx
c000f994:	c3                   	ret    

c000f995 <Phys::allocatePage()>:
c000f995:	56                   	push   esi
c000f996:	53                   	push   ebx
c000f997:	83 ec 14             	sub    esp,0x14
c000f99a:	8b 35 e4 d9 02 c0    	mov    esi,DWORD PTR ds:0xc002d9e4
c000f9a0:	89 f3                	mov    ebx,esi
c000f9a2:	eb 0a                	jmp    c000f9ae <Phys::allocatePage()+0x19>
c000f9a4:	89 1d e4 d9 02 c0    	mov    DWORD PTR ds:0xc002d9e4,ebx
c000f9aa:	39 de                	cmp    esi,ebx
c000f9ac:	74 24                	je     c000f9d2 <Phys::allocatePage()+0x3d>
c000f9ae:	53                   	push   ebx
c000f9af:	e8 54 ff ff ff       	call   c000f908 <Phys::getPageState(unsigned long)>
c000f9b4:	5a                   	pop    edx
c000f9b5:	84 c0                	test   al,al
c000f9b7:	74 76                	je     c000fa2f <Phys::allocatePage()+0x9a>
c000f9b9:	43                   	inc    ebx
c000f9ba:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000f9c0:	75 e2                	jne    c000f9a4 <Phys::allocatePage()+0xf>
c000f9c2:	31 db                	xor    ebx,ebx
c000f9c4:	c7 05 e4 d9 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002d9e4,0x0
c000f9ce:	39 de                	cmp    esi,ebx
c000f9d0:	75 dc                	jne    c000f9ae <Phys::allocatePage()+0x19>
c000f9d2:	83 ec 0c             	sub    esp,0xc
c000f9d5:	68 80 a0 02 c0       	push   0xc002a080
c000f9da:	e8 ea 2c 00 00       	call   c00126c9 <Dbg::kprintf(char const*, ...)>
c000f9df:	58                   	pop    eax
c000f9e0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f9e5:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000f9e8:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c000f9ee:	e8 9b 29 00 00       	call   c001238e <VAS::scanForEviction()>
c000f9f3:	83 c4 10             	add    esp,0x10
c000f9f6:	85 c0                	test   eax,eax
c000f9f8:	75 76                	jne    c000fa70 <Phys::allocatePage()+0xdb>
c000f9fa:	83 ec 0c             	sub    esp,0xc
c000f9fd:	68 00 10 00 00       	push   0x1000
c000fa02:	e8 a2 fd ff ff       	call   c000f7a9 <Phys::allocateDMA(unsigned long)>
c000fa07:	83 c4 10             	add    esp,0x10
c000fa0a:	85 c0                	test   eax,eax
c000fa0c:	75 5c                	jne    c000fa6a <Phys::allocatePage()+0xd5>
c000fa0e:	83 ec 0c             	sub    esp,0xc
c000fa11:	68 98 a0 02 c0       	push   0xc002a098
c000fa16:	e8 1a a4 00 00       	call   c0019e35 <Krnl::panic(char const*)>
c000fa1b:	83 c4 10             	add    esp,0x10
c000fa1e:	8b 1d e4 d9 02 c0    	mov    ebx,DWORD PTR ds:0xc002d9e4
c000fa24:	53                   	push   ebx
c000fa25:	e8 de fe ff ff       	call   c000f908 <Phys::getPageState(unsigned long)>
c000fa2a:	5a                   	pop    edx
c000fa2b:	84 c0                	test   al,al
c000fa2d:	75 8a                	jne    c000f9b9 <Phys::allocatePage()+0x24>
c000fa2f:	6a 01                	push   0x1
c000fa31:	53                   	push   ebx
c000fa32:	e8 9f fe ff ff       	call   c000f8d6 <Phys::setPageState(unsigned long, bool)>
c000fa37:	5a                   	pop    edx
c000fa38:	a1 f0 d9 02 c0       	mov    eax,ds:0xc002d9f0
c000fa3d:	59                   	pop    ecx
c000fa3e:	40                   	inc    eax
c000fa3f:	8b 15 e4 d9 02 c0    	mov    edx,DWORD PTR ds:0xc002d9e4
c000fa45:	a3 f0 d9 02 c0       	mov    ds:0xc002d9f0,eax
c000fa4a:	c1 e2 0c             	shl    edx,0xc
c000fa4d:	52                   	push   edx
c000fa4e:	ff 35 f4 d9 02 c0    	push   DWORD PTR ds:0xc002d9f4
c000fa54:	50                   	push   eax
c000fa55:	68 62 a0 02 c0       	push   0xc002a062
c000fa5a:	e8 6a 2c 00 00       	call   c00126c9 <Dbg::kprintf(char const*, ...)>
c000fa5f:	a1 e4 d9 02 c0       	mov    eax,ds:0xc002d9e4
c000fa64:	83 c4 10             	add    esp,0x10
c000fa67:	c1 e0 0c             	shl    eax,0xc
c000fa6a:	83 c4 14             	add    esp,0x14
c000fa6d:	5b                   	pop    ebx
c000fa6e:	5e                   	pop    esi
c000fa6f:	c3                   	ret    
c000fa70:	83 ec 08             	sub    esp,0x8
c000fa73:	89 c2                	mov    edx,eax
c000fa75:	6a 01                	push   0x1
c000fa77:	c1 ea 0c             	shr    edx,0xc
c000fa7a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000fa7e:	52                   	push   edx
c000fa7f:	e8 52 fe ff ff       	call   c000f8d6 <Phys::setPageState(unsigned long, bool)>
c000fa84:	83 c4 10             	add    esp,0x10
c000fa87:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fa8b:	eb dd                	jmp    c000fa6a <Phys::allocatePage()+0xd5>

c000fa8d <Phys::allocateContiguousPages(int)>:
c000fa8d:	57                   	push   edi
c000fa8e:	56                   	push   esi
c000fa8f:	53                   	push   ebx
c000fa90:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000fa94:	fa                   	cli    
c000fa95:	ff 05 c8 0e 03 c0    	inc    DWORD PTR ds:0xc0030ec8
c000fa9b:	31 db                	xor    ebx,ebx
c000fa9d:	85 db                	test   ebx,ebx
c000fa9f:	75 11                	jne    c000fab2 <Phys::allocateContiguousPages(int)+0x25>
c000faa1:	e8 ef fe ff ff       	call   c000f995 <Phys::allocatePage()>
c000faa6:	83 fe 01             	cmp    esi,0x1
c000faa9:	89 c7                	mov    edi,eax
c000faab:	74 21                	je     c000face <Phys::allocateContiguousPages(int)+0x41>
c000faad:	bb 01 00 00 00       	mov    ebx,0x1
c000fab2:	e8 de fe ff ff       	call   c000f995 <Phys::allocatePage()>
c000fab7:	89 da                	mov    edx,ebx
c000fab9:	c1 e2 0c             	shl    edx,0xc
c000fabc:	01 fa                	add    edx,edi
c000fabe:	39 c2                	cmp    edx,eax
c000fac0:	74 20                	je     c000fae2 <Phys::allocateContiguousPages(int)+0x55>
c000fac2:	bb 01 00 00 00       	mov    ebx,0x1
c000fac7:	89 c7                	mov    edi,eax
c000fac9:	83 fe 01             	cmp    esi,0x1
c000facc:	75 e4                	jne    c000fab2 <Phys::allocateContiguousPages(int)+0x25>
c000face:	a1 c8 0e 03 c0       	mov    eax,ds:0xc0030ec8
c000fad3:	48                   	dec    eax
c000fad4:	a3 c8 0e 03 c0       	mov    ds:0xc0030ec8,eax
c000fad9:	75 01                	jne    c000fadc <Phys::allocateContiguousPages(int)+0x4f>
c000fadb:	fb                   	sti    
c000fadc:	89 f8                	mov    eax,edi
c000fade:	5b                   	pop    ebx
c000fadf:	5e                   	pop    esi
c000fae0:	5f                   	pop    edi
c000fae1:	c3                   	ret    
c000fae2:	43                   	inc    ebx
c000fae3:	39 f3                	cmp    ebx,esi
c000fae5:	75 b6                	jne    c000fa9d <Phys::allocateContiguousPages(int)+0x10>
c000fae7:	eb e5                	jmp    c000face <Phys::allocateContiguousPages(int)+0x41>

c000fae9 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c000fae9:	56                   	push   esi
c000faea:	53                   	push   ebx
c000faeb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000faef:	39 1d e8 d9 02 c0    	cmp    DWORD PTR ds:0xc002d9e8,ebx
c000faf5:	73 06                	jae    c000fafd <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c000faf7:	89 1d e8 d9 02 c0    	mov    DWORD PTR ds:0xc002d9e8,ebx
c000fafd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fb01:	c1 eb 0c             	shr    ebx,0xc
c000fb04:	c1 e8 0c             	shr    eax,0xc
c000fb07:	39 d8                	cmp    eax,ebx
c000fb09:	73 13                	jae    c000fb1e <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c000fb0b:	6a 00                	push   0x0
c000fb0d:	8d 70 01             	lea    esi,[eax+0x1]
c000fb10:	50                   	push   eax
c000fb11:	e8 c0 fd ff ff       	call   c000f8d6 <Phys::setPageState(unsigned long, bool)>
c000fb16:	5a                   	pop    edx
c000fb17:	89 f0                	mov    eax,esi
c000fb19:	59                   	pop    ecx
c000fb1a:	39 f3                	cmp    ebx,esi
c000fb1c:	75 ed                	jne    c000fb0b <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c000fb1e:	5b                   	pop    ebx
c000fb1f:	5e                   	pop    esi
c000fb20:	c3                   	ret    

c000fb21 <Phys::physicalMemorySetup(unsigned int)>:
c000fb21:	55                   	push   ebp
c000fb22:	57                   	push   edi
c000fb23:	56                   	push   esi
c000fb24:	53                   	push   ebx
c000fb25:	83 ec 40             	sub    esp,0x40
c000fb28:	6a 30                	push   0x30
c000fb2a:	6a 00                	push   0x0
c000fb2c:	68 00 da 02 c0       	push   0xc002da00
c000fb31:	e8 1a 0c ff ff       	call   c0000750 <memset>
c000fb36:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000fb3a:	25 00 f0 ff ff       	and    eax,0xfffff000
c000fb3f:	05 00 10 00 00       	add    eax,0x1000
c000fb44:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000fb48:	5b                   	pop    ebx
c000fb49:	31 db                	xor    ebx,ebx
c000fb4b:	5e                   	pop    esi
c000fb4c:	50                   	push   eax
c000fb4d:	68 a6 a0 02 c0       	push   0xc002a0a6
c000fb52:	e8 72 2b 00 00       	call   c00126c9 <Dbg::kprintf(char const*, ...)>
c000fb57:	83 c4 10             	add    esp,0x10
c000fb5a:	83 ec 08             	sub    esp,0x8
c000fb5d:	6a 01                	push   0x1
c000fb5f:	53                   	push   ebx
c000fb60:	43                   	inc    ebx
c000fb61:	e8 70 fd ff ff       	call   c000f8d6 <Phys::setPageState(unsigned long, bool)>
c000fb66:	83 c4 10             	add    esp,0x10
c000fb69:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000fb6f:	75 e9                	jne    c000fb5a <Phys::physicalMemorySetup(unsigned int)+0x39>
c000fb71:	0f b7 05 13 05 00 c2 	movzx  eax,WORD PTR ds:0xc2000513
c000fb78:	66 85 c0             	test   ax,ax
c000fb7b:	0f 84 8e 01 00 00    	je     c000fd0f <Phys::physicalMemorySetup(unsigned int)+0x1ee>
c000fb81:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000fb85:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000fb8d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fb91:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c000fb96:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000fb9a:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000fba2:	eb 15                	jmp    c000fbb9 <Phys::physicalMemorySetup(unsigned int)+0x98>
c000fba4:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c000fba8:	83 c3 18             	add    ebx,0x18
c000fbab:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fbaf:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c000fbb3:	0f 84 66 01 00 00    	je     c000fd1f <Phys::physicalMemorySetup(unsigned int)+0x1fe>
c000fbb9:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000fbbc:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000fbbf:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000fbc2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000fbc6:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000fbca:	8b 33                	mov    esi,DWORD PTR [ebx]
c000fbcc:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c000fbcf:	01 f0                	add    eax,esi
c000fbd1:	55                   	push   ebp
c000fbd2:	11 fa                	adc    edx,edi
c000fbd4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fbd8:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000fbdc:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000fbe0:	56                   	push   esi
c000fbe1:	68 e8 a0 02 c0       	push   0xc002a0e8
c000fbe6:	e8 de 2a 00 00       	call   c00126c9 <Dbg::kprintf(char const*, ...)>
c000fbeb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000fbef:	83 c4 10             	add    esp,0x10
c000fbf2:	09 f8                	or     eax,edi
c000fbf4:	0f 85 25 01 00 00    	jne    c000fd1f <Phys::physicalMemorySetup(unsigned int)+0x1fe>
c000fbfa:	4d                   	dec    ebp
c000fbfb:	75 a7                	jne    c000fba4 <Phys::physicalMemorySetup(unsigned int)+0x83>
c000fbfd:	ba 00 00 08 00       	mov    edx,0x80000
c000fc02:	89 c1                	mov    ecx,eax
c000fc04:	39 f2                	cmp    edx,esi
c000fc06:	19 f9                	sbb    ecx,edi
c000fc08:	0f 82 a7 00 00 00    	jb     c000fcb5 <Phys::physicalMemorySetup(unsigned int)+0x194>
c000fc0e:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c000fc12:	89 c1                	mov    ecx,eax
c000fc14:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c000fc18:	0f 83 97 00 00 00    	jae    c000fcb5 <Phys::physicalMemorySetup(unsigned int)+0x194>
c000fc1e:	ba 00 00 0a 00       	mov    edx,0xa0000
c000fc23:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000fc27:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000fc2b:	39 fa                	cmp    edx,edi
c000fc2d:	19 e8                	sbb    eax,ebp
c000fc2f:	0f 82 14 01 00 00    	jb     c000fd49 <Phys::physicalMemorySetup(unsigned int)+0x228>
c000fc35:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000fc39:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000fc3d:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c000fc43:	ba ff 1f 00 00       	mov    edx,0x1fff
c000fc48:	83 d5 ff             	adc    ebp,0xffffffff
c000fc4b:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000fc4f:	31 c0                	xor    eax,eax
c000fc51:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c000fc55:	39 fa                	cmp    edx,edi
c000fc57:	89 c1                	mov    ecx,eax
c000fc59:	19 e9                	sbb    ecx,ebp
c000fc5b:	0f 83 43 ff ff ff    	jae    c000fba4 <Phys::physicalMemorySetup(unsigned int)+0x83>
c000fc61:	be 00 00 08 00       	mov    esi,0x80000
c000fc66:	50                   	push   eax
c000fc67:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000fc6b:	57                   	push   edi
c000fc6c:	56                   	push   esi
c000fc6d:	68 0c a1 02 c0       	push   0xc002a10c
c000fc72:	e8 52 2a 00 00       	call   c00126c9 <Dbg::kprintf(char const*, ...)>
c000fc77:	5a                   	pop    edx
c000fc78:	59                   	pop    ecx
c000fc79:	57                   	push   edi
c000fc7a:	56                   	push   esi
c000fc7b:	e8 69 fe ff ff       	call   c000fae9 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c000fc80:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000fc84:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000fc88:	83 c4 0c             	add    esp,0xc
c000fc8b:	0f ac d0 0c          	shrd   eax,edx,0xc
c000fc8f:	03 05 f4 d9 02 c0    	add    eax,DWORD PTR ds:0xc002d9f4
c000fc95:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000fc9c:	a3 f4 d9 02 c0       	mov    ds:0xc002d9f4,eax
c000fca1:	52                   	push   edx
c000fca2:	50                   	push   eax
c000fca3:	68 cc a0 02 c0       	push   0xc002a0cc
c000fca8:	e8 1c 2a 00 00       	call   c00126c9 <Dbg::kprintf(char const*, ...)>
c000fcad:	83 c4 10             	add    esp,0x10
c000fcb0:	e9 ef fe ff ff       	jmp    c000fba4 <Phys::physicalMemorySetup(unsigned int)+0x83>
c000fcb5:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c000fcb9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000fcbd:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000fcc1:	39 ea                	cmp    edx,ebp
c000fcc3:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c000fcc7:	0f 82 d7 fe ff ff    	jb     c000fba4 <Phys::physicalMemorySetup(unsigned int)+0x83>
c000fccd:	ba ff 1f 00 00       	mov    edx,0x1fff
c000fcd2:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c000fcd6:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c000fcda:	0f 83 c4 fe ff ff    	jae    c000fba4 <Phys::physicalMemorySetup(unsigned int)+0x83>
c000fce0:	39 ee                	cmp    esi,ebp
c000fce2:	89 f8                	mov    eax,edi
c000fce4:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c000fce8:	0f 83 78 ff ff ff    	jae    c000fc66 <Phys::physicalMemorySetup(unsigned int)+0x145>
c000fcee:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fcf2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000fcf6:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000fcfa:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000fcfe:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c000fd02:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000fd06:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000fd0a:	e9 57 ff ff ff       	jmp    c000fc66 <Phys::physicalMemorySetup(unsigned int)+0x145>
c000fd0f:	83 ec 0c             	sub    esp,0xc
c000fd12:	68 be a0 02 c0       	push   0xc002a0be
c000fd17:	e8 19 a1 00 00       	call   c0019e35 <Krnl::panic(char const*)>
c000fd1c:	83 c4 10             	add    esp,0x10
c000fd1f:	bb 40 01 00 00       	mov    ebx,0x140
c000fd24:	83 ec 08             	sub    esp,0x8
c000fd27:	6a 00                	push   0x0
c000fd29:	53                   	push   ebx
c000fd2a:	43                   	inc    ebx
c000fd2b:	e8 a6 fb ff ff       	call   c000f8d6 <Phys::setPageState(unsigned long, bool)>
c000fd30:	ff 05 f4 d9 02 c0    	inc    DWORD PTR ds:0xc002d9f4
c000fd36:	83 c4 10             	add    esp,0x10
c000fd39:	81 fb 80 01 00 00    	cmp    ebx,0x180
c000fd3f:	75 e3                	jne    c000fd24 <Phys::physicalMemorySetup(unsigned int)+0x203>
c000fd41:	83 c4 3c             	add    esp,0x3c
c000fd44:	5b                   	pop    ebx
c000fd45:	5e                   	pop    esi
c000fd46:	5f                   	pop    edi
c000fd47:	5d                   	pop    ebp
c000fd48:	c3                   	ret    
c000fd49:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c000fd51:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000fd59:	e9 d7 fe ff ff       	jmp    c000fc35 <Phys::physicalMemorySetup(unsigned int)+0x114>

c000fd5e <Pipe::isAtty()>:
c000fd5e:	31 c0                	xor    eax,eax
c000fd60:	c3                   	ret    
c000fd61:	90                   	nop

c000fd62 <Pipe::~Pipe()>:
c000fd62:	83 ec 0c             	sub    esp,0xc
c000fd65:	ba 78 a1 02 c0       	mov    edx,0xc002a178
c000fd6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fd6e:	89 10                	mov    DWORD PTR [eax],edx
c000fd70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fd74:	83 ec 0c             	sub    esp,0xc
c000fd77:	50                   	push   eax
c000fd78:	e8 3f 12 00 00       	call   c0010fbc <UnixFile::~UnixFile()>
c000fd7d:	83 c4 10             	add    esp,0x10
c000fd80:	90                   	nop
c000fd81:	83 c4 0c             	add    esp,0xc
c000fd84:	c3                   	ret    
c000fd85:	90                   	nop

c000fd86 <Pipe::~Pipe()>:
c000fd86:	83 ec 0c             	sub    esp,0xc
c000fd89:	83 ec 0c             	sub    esp,0xc
c000fd8c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fd90:	e8 cd ff ff ff       	call   c000fd62 <Pipe::~Pipe()>
c000fd95:	83 c4 10             	add    esp,0x10
c000fd98:	83 ec 08             	sub    esp,0x8
c000fd9b:	6a 20                	push   0x20
c000fd9d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fda1:	e8 4b 28 00 00       	call   c00125f1 <operator delete(void*, unsigned long)>
c000fda6:	83 c4 10             	add    esp,0x10
c000fda9:	83 c4 0c             	add    esp,0xc
c000fdac:	c3                   	ret    
c000fdad:	90                   	nop

c000fdae <Pipe::read(unsigned long long, void*, int*)>:
c000fdae:	55                   	push   ebp
c000fdaf:	57                   	push   edi
c000fdb0:	56                   	push   esi
c000fdb1:	53                   	push   ebx
c000fdb2:	83 ec 1c             	sub    esp,0x1c
c000fdb5:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000fdb9:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000fdbd:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000fdc1:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000fdc4:	89 c8                	mov    eax,ecx
c000fdc6:	99                   	cdq    
c000fdc7:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c000fdcb:	74 24                	je     c000fdf1 <Pipe::read(unsigned long long, void*, int*)+0x43>
c000fdcd:	39 f9                	cmp    ecx,edi
c000fdcf:	89 d1                	mov    ecx,edx
c000fdd1:	19 f1                	sbb    ecx,esi
c000fdd3:	73 1c                	jae    c000fdf1 <Pipe::read(unsigned long long, void*, int*)+0x43>
c000fdd5:	fa                   	cli    
c000fdd6:	ff 05 c8 0e 03 c0    	inc    DWORD PTR ds:0xc0030ec8
c000fddc:	e8 e4 db 00 00       	call   c001d9c5 <schedule()>
c000fde1:	a1 c8 0e 03 c0       	mov    eax,ds:0xc0030ec8
c000fde6:	48                   	dec    eax
c000fde7:	a3 c8 0e 03 c0       	mov    ds:0xc0030ec8,eax
c000fdec:	75 d3                	jne    c000fdc1 <Pipe::read(unsigned long long, void*, int*)+0x13>
c000fdee:	fb                   	sti    
c000fdef:	eb d0                	jmp    c000fdc1 <Pipe::read(unsigned long long, void*, int*)+0x13>
c000fdf1:	39 f8                	cmp    eax,edi
c000fdf3:	89 d1                	mov    ecx,edx
c000fdf5:	89 3c 24             	mov    DWORD PTR [esp],edi
c000fdf8:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c000fdfc:	19 f1                	sbb    ecx,esi
c000fdfe:	73 07                	jae    c000fe07 <Pipe::read(unsigned long long, void*, int*)+0x59>
c000fe00:	89 04 24             	mov    DWORD PTR [esp],eax
c000fe03:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000fe07:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c000fe0a:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c000fe0d:	29 f7                	sub    edi,esi
c000fe0f:	89 f8                	mov    eax,edi
c000fe11:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000fe15:	99                   	cdq    
c000fe16:	39 3c 24             	cmp    DWORD PTR [esp],edi
c000fe19:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fe1d:	19 d0                	sbb    eax,edx
c000fe1f:	73 07                	jae    c000fe28 <Pipe::read(unsigned long long, void*, int*)+0x7a>
c000fe21:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000fe24:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fe28:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c000fe2b:	89 ea                	mov    edx,ebp
c000fe2d:	2b 54 24 0c          	sub    edx,DWORD PTR [esp+0xc]
c000fe31:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000fe36:	74 0d                	je     c000fe45 <Pipe::read(unsigned long long, void*, int*)+0x97>
c000fe38:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000fe3b:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000fe3f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000fe43:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fe45:	85 d2                	test   edx,edx
c000fe47:	74 11                	je     c000fe5a <Pipe::read(unsigned long long, void*, int*)+0xac>
c000fe49:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fe4d:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c000fe50:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c000fe54:	89 d1                	mov    ecx,edx
c000fe56:	89 c7                	mov    edi,eax
c000fe58:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fe5a:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000fe5d:	29 6b 14             	sub    DWORD PTR [ebx+0x14],ebp
c000fe60:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c000fe63:	99                   	cdq    
c000fe64:	89 f7                	mov    edi,esi
c000fe66:	03 04 24             	add    eax,DWORD PTR [esp]
c000fe69:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c000fe6d:	c1 ff 1f             	sar    edi,0x1f
c000fe70:	57                   	push   edi
c000fe71:	56                   	push   esi
c000fe72:	52                   	push   edx
c000fe73:	50                   	push   eax
c000fe74:	e8 9b 69 01 00       	call   c0026814 <__umoddi3>
c000fe79:	83 c4 10             	add    esp,0x10
c000fe7c:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000fe7f:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000fe84:	75 10                	jne    c000fe96 <Pipe::read(unsigned long long, void*, int*)+0xe8>
c000fe86:	83 ec 0c             	sub    esp,0xc
c000fe89:	68 35 a1 02 c0       	push   0xc002a135
c000fe8e:	e8 a2 9f 00 00       	call   c0019e35 <Krnl::panic(char const*)>
c000fe93:	83 c4 10             	add    esp,0x10
c000fe96:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fe9a:	8b 14 24             	mov    edx,DWORD PTR [esp]
c000fe9d:	89 10                	mov    DWORD PTR [eax],edx
c000fe9f:	83 c4 1c             	add    esp,0x1c
c000fea2:	31 c0                	xor    eax,eax
c000fea4:	5b                   	pop    ebx
c000fea5:	5e                   	pop    esi
c000fea6:	5f                   	pop    edi
c000fea7:	5d                   	pop    ebp
c000fea8:	c3                   	ret    
c000fea9:	90                   	nop

c000feaa <Pipe::write(unsigned long long, void*, int*)>:
c000feaa:	55                   	push   ebp
c000feab:	57                   	push   edi
c000feac:	56                   	push   esi
c000fead:	53                   	push   ebx
c000feae:	83 ec 1c             	sub    esp,0x1c
c000feb1:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000feb5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000feb9:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c000febc:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000fec0:	89 04 24             	mov    DWORD PTR [esp],eax
c000fec3:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000fec7:	89 d8                	mov    eax,ebx
c000fec9:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000fecc:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000fed0:	89 d6                	mov    esi,edx
c000fed2:	89 d7                	mov    edi,edx
c000fed4:	c1 ff 1f             	sar    edi,0x1f
c000fed7:	03 34 24             	add    esi,DWORD PTR [esp]
c000feda:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c000fede:	c1 f8 1f             	sar    eax,0x1f
c000fee1:	39 f3                	cmp    ebx,esi
c000fee3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fee7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000feeb:	19 f8                	sbb    eax,edi
c000feed:	b8 01 00 00 00       	mov    eax,0x1
c000fef2:	72 6e                	jb     c000ff62 <Pipe::write(unsigned long long, void*, int*)+0xb8>
c000fef4:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c000fef7:	01 d0                	add    eax,edx
c000fef9:	99                   	cdq    
c000fefa:	f7 fb                	idiv   ebx
c000fefc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ff00:	29 d3                	sub    ebx,edx
c000ff02:	89 d7                	mov    edi,edx
c000ff04:	89 de                	mov    esi,ebx
c000ff06:	8b 14 24             	mov    edx,DWORD PTR [esp]
c000ff09:	c1 fb 1f             	sar    ebx,0x1f
c000ff0c:	39 f2                	cmp    edx,esi
c000ff0e:	19 d8                	sbb    eax,ebx
c000ff10:	b8 00 00 00 00       	mov    eax,0x0
c000ff15:	72 04                	jb     c000ff1b <Pipe::write(unsigned long long, void*, int*)+0x71>
c000ff17:	89 d0                	mov    eax,edx
c000ff19:	29 f0                	sub    eax,esi
c000ff1b:	89 d3                	mov    ebx,edx
c000ff1d:	29 c3                	sub    ebx,eax
c000ff1f:	74 0b                	je     c000ff2c <Pipe::write(unsigned long long, void*, int*)+0x82>
c000ff21:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c000ff24:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c000ff28:	89 d9                	mov    ecx,ebx
c000ff2a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000ff2c:	85 c0                	test   eax,eax
c000ff2e:	74 0d                	je     c000ff3d <Pipe::write(unsigned long long, void*, int*)+0x93>
c000ff30:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c000ff34:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c000ff37:	89 de                	mov    esi,ebx
c000ff39:	89 c1                	mov    ecx,eax
c000ff3b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000ff3d:	01 55 14             	add    DWORD PTR [ebp+0x14],edx
c000ff40:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000ff45:	75 10                	jne    c000ff57 <Pipe::write(unsigned long long, void*, int*)+0xad>
c000ff47:	83 ec 0c             	sub    esp,0xc
c000ff4a:	68 51 a1 02 c0       	push   0xc002a151
c000ff4f:	e8 e1 9e 00 00       	call   c0019e35 <Krnl::panic(char const*)>
c000ff54:	83 c4 10             	add    esp,0x10
c000ff57:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ff5b:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000ff5e:	89 08                	mov    DWORD PTR [eax],ecx
c000ff60:	31 c0                	xor    eax,eax
c000ff62:	83 c4 1c             	add    esp,0x1c
c000ff65:	5b                   	pop    ebx
c000ff66:	5e                   	pop    esi
c000ff67:	5f                   	pop    edi
c000ff68:	5d                   	pop    ebp
c000ff69:	c3                   	ret    

c000ff6a <Pipe::Pipe(int)>:
c000ff6a:	83 ec 0c             	sub    esp,0xc
c000ff6d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ff71:	83 ec 08             	sub    esp,0x8
c000ff74:	6a 00                	push   0x0
c000ff76:	50                   	push   eax
c000ff77:	e8 5e 0e 00 00       	call   c0010dda <UnixFile::UnixFile(int)>
c000ff7c:	83 c4 10             	add    esp,0x10
c000ff7f:	ba 78 a1 02 c0       	mov    edx,0xc002a178
c000ff84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ff88:	89 10                	mov    DWORD PTR [eax],edx
c000ff8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ff8e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000ff92:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000ff95:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ff99:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c000ffa0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ffa4:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c000ffab:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ffaf:	83 ec 0c             	sub    esp,0xc
c000ffb2:	50                   	push   eax
c000ffb3:	e8 e1 f5 ff ff       	call   c000f599 <malloc>
c000ffb8:	83 c4 10             	add    esp,0x10
c000ffbb:	89 c2                	mov    edx,eax
c000ffbd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ffc1:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000ffc4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ffc8:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c000ffcc:	90                   	nop
c000ffcd:	83 c4 0c             	add    esp,0xc
c000ffd0:	c3                   	ret    
c000ffd1:	90                   	nop

c000ffd2 <VgaText::isAtty()>:
c000ffd2:	b0 01                	mov    al,0x1
c000ffd4:	c3                   	ret    
c000ffd5:	90                   	nop

c000ffd6 <VgaText::~VgaText()>:
c000ffd6:	83 ec 0c             	sub    esp,0xc
c000ffd9:	ba 00 a2 02 c0       	mov    edx,0xc002a200
c000ffde:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ffe2:	89 10                	mov    DWORD PTR [eax],edx
c000ffe4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ffe8:	83 ec 0c             	sub    esp,0xc
c000ffeb:	50                   	push   eax
c000ffec:	e8 cb 0f 00 00       	call   c0010fbc <UnixFile::~UnixFile()>
c000fff1:	83 c4 10             	add    esp,0x10
c000fff4:	90                   	nop
c000fff5:	83 c4 0c             	add    esp,0xc
c000fff8:	c3                   	ret    
c000fff9:	90                   	nop

c000fffa <VgaText::~VgaText()>:
c000fffa:	83 ec 0c             	sub    esp,0xc
c000fffd:	83 ec 0c             	sub    esp,0xc
c0010000:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010004:	e8 cd ff ff ff       	call   c000ffd6 <VgaText::~VgaText()>
c0010009:	83 c4 10             	add    esp,0x10
c001000c:	83 ec 08             	sub    esp,0x8
c001000f:	68 c4 02 00 00       	push   0x2c4
c0010014:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010018:	e8 d4 25 00 00       	call   c00125f1 <operator delete(void*, unsigned long)>
c001001d:	83 c4 10             	add    esp,0x10
c0010020:	83 c4 0c             	add    esp,0xc
c0010023:	c3                   	ret    

c0010024 <VgaText::read(unsigned long long, void*, int*)>:
c0010024:	83 ec 10             	sub    esp,0x10
c0010027:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001002b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001002f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010033:	e8 58 5b 00 00       	call   c0015b90 <readKeyboard(VgaText*, char*, unsigned long)>
c0010038:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001003c:	89 02                	mov    DWORD PTR [edx],eax
c001003e:	31 c0                	xor    eax,eax
c0010040:	83 c4 1c             	add    esp,0x1c
c0010043:	c3                   	ret    

c0010044 <setTerminalScrollLock(bool)>:
c0010044:	c3                   	ret    

c0010045 <addToTerminalCycle(VgaText*)>:
c0010045:	8b 15 60 da 02 c0    	mov    edx,DWORD PTR ds:0xc002da60
c001004b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001004f:	85 d2                	test   edx,edx
c0010051:	75 09                	jne    c001005c <addToTerminalCycle(VgaText*)+0x17>
c0010053:	89 40 24             	mov    DWORD PTR [eax+0x24],eax
c0010056:	a3 60 da 02 c0       	mov    ds:0xc002da60,eax
c001005b:	c3                   	ret    
c001005c:	8b 4a 24             	mov    ecx,DWORD PTR [edx+0x24]
c001005f:	89 42 24             	mov    DWORD PTR [edx+0x24],eax
c0010062:	89 48 24             	mov    DWORD PTR [eax+0x24],ecx
c0010065:	c3                   	ret    

c0010066 <installVgaTextImplementation()>:
c0010066:	83 ec 10             	sub    esp,0x10
c0010069:	6a 20                	push   0x20
c001006b:	6a 00                	push   0x0
c001006d:	68 40 da 02 c0       	push   0xc002da40
c0010072:	e8 d9 06 ff ff       	call   c0000750 <memset>
c0010077:	83 c4 1c             	add    esp,0x1c
c001007a:	c3                   	ret    

c001007b <scrollTerminalScrollLock(int)>:
c001007b:	c3                   	ret    

c001007c <VgaText::updateTitle()>:
c001007c:	53                   	push   ebx
c001007d:	31 c0                	xor    eax,eax
c001007f:	83 ec 58             	sub    esp,0x58
c0010082:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0010086:	89 e1                	mov    ecx,esp
c0010088:	c6 04 08 20          	mov    BYTE PTR [eax+ecx*1],0x20
c001008c:	40                   	inc    eax
c001008d:	83 f8 50             	cmp    eax,0x50
c0010090:	75 f6                	jne    c0010088 <VgaText::updateTitle()+0xc>
c0010092:	31 c0                	xor    eax,eax
c0010094:	8a 9c 02 82 00 00 00 	mov    bl,BYTE PTR [edx+eax*1+0x82]
c001009b:	84 db                	test   bl,bl
c001009d:	74 06                	je     c00100a5 <VgaText::updateTitle()+0x29>
c001009f:	88 1c 01             	mov    BYTE PTR [ecx+eax*1],bl
c00100a2:	40                   	inc    eax
c00100a3:	eb ef                	jmp    c0010094 <VgaText::updateTitle()+0x18>
c00100a5:	8b 42 60             	mov    eax,DWORD PTR [edx+0x60]
c00100a8:	85 c0                	test   eax,eax
c00100aa:	74 09                	je     c00100b5 <VgaText::updateTitle()+0x39>
c00100ac:	53                   	push   ebx
c00100ad:	53                   	push   ebx
c00100ae:	51                   	push   ecx
c00100af:	52                   	push   edx
c00100b0:	ff d0                	call   eax
c00100b2:	83 c4 10             	add    esp,0x10
c00100b5:	83 c4 58             	add    esp,0x58
c00100b8:	5b                   	pop    ebx
c00100b9:	c3                   	ret    

c00100ba <VgaText::load()>:
c00100ba:	53                   	push   ebx
c00100bb:	31 c0                	xor    eax,eax
c00100bd:	83 ec 58             	sub    esp,0x58
c00100c0:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c00100c4:	89 e2                	mov    edx,esp
c00100c6:	c6 04 10 20          	mov    BYTE PTR [eax+edx*1],0x20
c00100ca:	40                   	inc    eax
c00100cb:	83 f8 50             	cmp    eax,0x50
c00100ce:	75 f6                	jne    c00100c6 <VgaText::load()+0xc>
c00100d0:	31 c0                	xor    eax,eax
c00100d2:	8a 8c 03 82 00 00 00 	mov    cl,BYTE PTR [ebx+eax*1+0x82]
c00100d9:	84 c9                	test   cl,cl
c00100db:	74 06                	je     c00100e3 <VgaText::load()+0x29>
c00100dd:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c00100e0:	40                   	inc    eax
c00100e1:	eb ef                	jmp    c00100d2 <VgaText::load()+0x18>
c00100e3:	8b 43 60             	mov    eax,DWORD PTR [ebx+0x60]
c00100e6:	85 c0                	test   eax,eax
c00100e8:	74 09                	je     c00100f3 <VgaText::load()+0x39>
c00100ea:	51                   	push   ecx
c00100eb:	51                   	push   ecx
c00100ec:	52                   	push   edx
c00100ed:	53                   	push   ebx
c00100ee:	ff d0                	call   eax
c00100f0:	83 c4 10             	add    esp,0x10
c00100f3:	8b 43 64             	mov    eax,DWORD PTR [ebx+0x64]
c00100f6:	85 c0                	test   eax,eax
c00100f8:	74 09                	je     c0010103 <VgaText::load()+0x49>
c00100fa:	83 ec 0c             	sub    esp,0xc
c00100fd:	53                   	push   ebx
c00100fe:	ff d0                	call   eax
c0010100:	83 c4 10             	add    esp,0x10
c0010103:	83 c4 58             	add    esp,0x58
c0010106:	5b                   	pop    ebx
c0010107:	c3                   	ret    

c0010108 <VgaText::updateCursor()>:
c0010108:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001010c:	39 05 64 da 02 c0    	cmp    DWORD PTR ds:0xc002da64,eax
c0010112:	75 09                	jne    c001011d <VgaText::updateCursor()+0x15>
c0010114:	8b 40 70             	mov    eax,DWORD PTR [eax+0x70]
c0010117:	85 c0                	test   eax,eax
c0010119:	74 02                	je     c001011d <VgaText::updateCursor()+0x15>
c001011b:	ff e0                	jmp    eax
c001011d:	c3                   	ret    

c001011e <VgaText::doANSI_SGR(int)>:
c001011e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010122:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010126:	85 d2                	test   edx,edx
c0010128:	75 0b                	jne    c0010135 <VgaText::doANSI_SGR(int)+0x17>
c001012a:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c001012d:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0010130:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0010133:	eb 59                	jmp    c001018e <VgaText::doANSI_SGR(int)+0x70>
c0010135:	83 fa 07             	cmp    edx,0x7
c0010138:	75 0b                	jne    c0010145 <VgaText::doANSI_SGR(int)+0x27>
c001013a:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c001013d:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c0010140:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c0010143:	eb 49                	jmp    c001018e <VgaText::doANSI_SGR(int)+0x70>
c0010145:	83 fa 1b             	cmp    edx,0x1b
c0010148:	74 e0                	je     c001012a <VgaText::doANSI_SGR(int)+0xc>
c001014a:	8d 4a e2             	lea    ecx,[edx-0x1e]
c001014d:	83 f9 07             	cmp    ecx,0x7
c0010150:	77 09                	ja     c001015b <VgaText::doANSI_SGR(int)+0x3d>
c0010152:	8b 14 8d 00 c9 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd3700]
c0010159:	eb 20                	jmp    c001017b <VgaText::doANSI_SGR(int)+0x5d>
c001015b:	8d 4a d8             	lea    ecx,[edx-0x28]
c001015e:	83 f9 07             	cmp    ecx,0x7
c0010161:	77 09                	ja     c001016c <VgaText::doANSI_SGR(int)+0x4e>
c0010163:	8b 14 8d 00 c9 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd3700]
c001016a:	eb 22                	jmp    c001018e <VgaText::doANSI_SGR(int)+0x70>
c001016c:	8d 4a a6             	lea    ecx,[edx-0x5a]
c001016f:	83 f9 07             	cmp    ecx,0x7
c0010172:	77 0b                	ja     c001017f <VgaText::doANSI_SGR(int)+0x61>
c0010174:	8b 14 95 b8 c7 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd3848]
c001017b:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c001017e:	c3                   	ret    
c001017f:	8d 4a 9c             	lea    ecx,[edx-0x64]
c0010182:	83 f9 07             	cmp    ecx,0x7
c0010185:	77 0a                	ja     c0010191 <VgaText::doANSI_SGR(int)+0x73>
c0010187:	8b 14 95 90 c7 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd3870]
c001018e:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c0010191:	c3                   	ret    

c0010192 <VgaText::setDefaultBgColour(VgaColour)>:
c0010192:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010196:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001019a:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c001019d:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c00101a0:	c3                   	ret    
c00101a1:	90                   	nop

c00101a2 <VgaText::setDefaultFgColour(VgaColour)>:
c00101a2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00101a6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00101aa:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c00101ad:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c00101b0:	c3                   	ret    
c00101b1:	90                   	nop

c00101b2 <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c00101b2:	53                   	push   ebx
c00101b3:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00101b7:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00101bb:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00101bf:	51                   	push   ecx
c00101c0:	e8 cd ff ff ff       	call   c0010192 <VgaText::setDefaultBgColour(VgaColour)>
c00101c5:	58                   	pop    eax
c00101c6:	5a                   	pop    edx
c00101c7:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c00101cb:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00101cf:	5b                   	pop    ebx
c00101d0:	eb d0                	jmp    c00101a2 <VgaText::setDefaultFgColour(VgaColour)>

c00101d2 <VgaText::setTitleTextColour(VgaColour)>:
c00101d2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00101d6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00101da:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c00101dd:	e9 9a fe ff ff       	jmp    c001007c <VgaText::updateTitle()>

c00101e2 <VgaText::setTitleColour(VgaColour)>:
c00101e2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00101e6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00101ea:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00101ed:	e9 8a fe ff ff       	jmp    c001007c <VgaText::updateTitle()>

c00101f2 <VgaText::setTitle(char*)>:
c00101f2:	53                   	push   ebx
c00101f3:	83 ec 10             	sub    esp,0x10
c00101f6:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00101fa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00101fe:	8d 83 82 00 00 00    	lea    eax,[ebx+0x82]
c0010204:	50                   	push   eax
c0010205:	e8 02 06 ff ff       	call   c000080c <strcpy>
c001020a:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c001020e:	83 c4 18             	add    esp,0x18
c0010211:	5b                   	pop    ebx
c0010212:	e9 65 fe ff ff       	jmp    c001007c <VgaText::updateTitle()>
c0010217:	90                   	nop

c0010218 <VgaText::combineColours(unsigned char, unsigned char)>:
c0010218:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001021c:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0010221:	83 e0 0f             	and    eax,0xf
c0010224:	c1 e2 04             	shl    edx,0x4
c0010227:	09 d0                	or     eax,edx
c0010229:	c3                   	ret    

c001022a <VgaText::scrollScreen()>:
c001022a:	55                   	push   ebp
c001022b:	b9 01 00 00 00       	mov    ecx,0x1
c0010230:	57                   	push   edi
c0010231:	56                   	push   esi
c0010232:	53                   	push   ebx
c0010233:	83 ec 0c             	sub    esp,0xc
c0010236:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001023a:	69 f1 a0 00 00 00    	imul   esi,ecx,0xa0
c0010240:	31 ff                	xor    edi,edi
c0010242:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0010245:	83 f9 17             	cmp    ecx,0x17
c0010248:	8a 14 30             	mov    dl,BYTE PTR [eax+esi*1]
c001024b:	88 94 30 60 ff ff ff 	mov    BYTE PTR [eax+esi*1-0xa0],dl
c0010252:	75 27                	jne    c001027b <VgaText::scrollScreen()+0x51>
c0010254:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0010257:	01 f5                	add    ebp,esi
c0010259:	f7 c7 01 00 00 00    	test   edi,0x1
c001025f:	74 16                	je     c0010277 <VgaText::scrollScreen()+0x4d>
c0010261:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c0010265:	50                   	push   eax
c0010266:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c001026a:	50                   	push   eax
c001026b:	e8 a8 ff ff ff       	call   c0010218 <VgaText::combineColours(unsigned char, unsigned char)>
c0010270:	5a                   	pop    edx
c0010271:	5a                   	pop    edx
c0010272:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c0010275:	eb 04                	jmp    c001027b <VgaText::scrollScreen()+0x51>
c0010277:	c6 45 00 20          	mov    BYTE PTR [ebp+0x0],0x20
c001027b:	47                   	inc    edi
c001027c:	46                   	inc    esi
c001027d:	81 ff a0 00 00 00    	cmp    edi,0xa0
c0010283:	75 bd                	jne    c0010242 <VgaText::scrollScreen()+0x18>
c0010285:	41                   	inc    ecx
c0010286:	83 f9 18             	cmp    ecx,0x18
c0010289:	75 af                	jne    c001023a <VgaText::scrollScreen()+0x10>
c001028b:	39 1d 64 da 02 c0    	cmp    DWORD PTR ds:0xc002da64,ebx
c0010291:	75 1b                	jne    c00102ae <VgaText::scrollScreen()+0x84>
c0010293:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c0010297:	74 05                	je     c001029e <VgaText::scrollScreen()+0x74>
c0010299:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c001029c:	eb 10                	jmp    c00102ae <VgaText::scrollScreen()+0x84>
c001029e:	8b 43 6c             	mov    eax,DWORD PTR [ebx+0x6c]
c00102a1:	85 c0                	test   eax,eax
c00102a3:	74 09                	je     c00102ae <VgaText::scrollScreen()+0x84>
c00102a5:	83 ec 0c             	sub    esp,0xc
c00102a8:	53                   	push   ebx
c00102a9:	ff d0                	call   eax
c00102ab:	83 c4 10             	add    esp,0x10
c00102ae:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c00102b2:	83 c4 0c             	add    esp,0xc
c00102b5:	5b                   	pop    ebx
c00102b6:	5e                   	pop    esi
c00102b7:	5f                   	pop    edi
c00102b8:	5d                   	pop    ebp
c00102b9:	e9 4a fe ff ff       	jmp    c0010108 <VgaText::updateCursor()>

c00102be <VgaText::combineCharAndColour(char, unsigned char)>:
c00102be:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00102c3:	c1 e0 08             	shl    eax,0x8
c00102c6:	89 c2                	mov    edx,eax
c00102c8:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c00102cd:	09 d0                	or     eax,edx
c00102cf:	c3                   	ret    

c00102d0 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c00102d0:	56                   	push   esi
c00102d1:	53                   	push   ebx
c00102d2:	51                   	push   ecx
c00102d3:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00102d7:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c00102dc:	50                   	push   eax
c00102dd:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c00102e2:	50                   	push   eax
c00102e3:	e8 30 ff ff ff       	call   c0010218 <VgaText::combineColours(unsigned char, unsigned char)>
c00102e8:	5b                   	pop    ebx
c00102e9:	0f b6 c0             	movzx  eax,al
c00102ec:	5e                   	pop    esi
c00102ed:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c00102f2:	50                   	push   eax
c00102f3:	53                   	push   ebx
c00102f4:	e8 c5 ff ff ff       	call   c00102be <VgaText::combineCharAndColour(char, unsigned char)>
c00102f9:	5a                   	pop    edx
c00102fa:	5e                   	pop    esi
c00102fb:	8b 71 0c             	mov    esi,DWORD PTR [ecx+0xc]
c00102fe:	66 6b 54 24 24 50    	imul   dx,WORD PTR [esp+0x24],0x50
c0010304:	03 54 24 20          	add    edx,DWORD PTR [esp+0x20]
c0010308:	0f b7 d2             	movzx  edx,dx
c001030b:	66 89 04 56          	mov    WORD PTR [esi+edx*2],ax
c001030f:	39 0d 64 da 02 c0    	cmp    DWORD PTR ds:0xc002da64,ecx
c0010315:	75 10                	jne    c0010327 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x57>
c0010317:	8b 41 7c             	mov    eax,DWORD PTR [ecx+0x7c]
c001031a:	85 c0                	test   eax,eax
c001031c:	74 09                	je     c0010327 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x57>
c001031e:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c0010322:	5a                   	pop    edx
c0010323:	5b                   	pop    ebx
c0010324:	5e                   	pop    esi
c0010325:	ff e0                	jmp    eax
c0010327:	58                   	pop    eax
c0010328:	5b                   	pop    ebx
c0010329:	5e                   	pop    esi
c001032a:	c3                   	ret    
c001032b:	90                   	nop

c001032c <VgaText::getCursorX()>:
c001032c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010330:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0010333:	c3                   	ret    

c0010334 <VgaText::getCursorY()>:
c0010334:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010338:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c001033b:	c3                   	ret    

c001033c <VgaText::setCursor(int, int)>:
c001033c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010340:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010344:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0010347:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001034b:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001034e:	e9 b5 fd ff ff       	jmp    c0010108 <VgaText::updateCursor()>

c0010353 <setActiveTerminal(VgaText*)>:
c0010353:	53                   	push   ebx
c0010354:	83 ec 08             	sub    esp,0x8
c0010357:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001035b:	85 db                	test   ebx,ebx
c001035d:	75 11                	jne    c0010370 <setActiveTerminal(VgaText*)+0x1d>
c001035f:	c7 44 24 10 8c a1 02 c0 	mov    DWORD PTR [esp+0x10],0xc002a18c
c0010367:	83 c4 08             	add    esp,0x8
c001036a:	5b                   	pop    ebx
c001036b:	e9 c5 9a 00 00       	jmp    c0019e35 <Krnl::panic(char const*)>
c0010370:	a1 64 da 02 c0       	mov    eax,ds:0xc002da64
c0010375:	85 c0                	test   eax,eax
c0010377:	74 0c                	je     c0010385 <setActiveTerminal(VgaText*)+0x32>
c0010379:	83 ec 0c             	sub    esp,0xc
c001037c:	50                   	push   eax
c001037d:	e8 86 fd ff ff       	call   c0010108 <VgaText::updateCursor()>
c0010382:	83 c4 10             	add    esp,0x10
c0010385:	89 1d 64 da 02 c0    	mov    DWORD PTR ds:0xc002da64,ebx
c001038b:	51                   	push   ecx
c001038c:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c001038f:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0010392:	53                   	push   ebx
c0010393:	e8 a4 ff ff ff       	call   c001033c <VgaText::setCursor(int, int)>
c0010398:	83 c4 10             	add    esp,0x10
c001039b:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c001039f:	75 07                	jne    c00103a8 <setActiveTerminal(VgaText*)+0x55>
c00103a1:	c7 43 5c 00 00 00 00 	mov    DWORD PTR [ebx+0x5c],0x0
c00103a8:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00103ac:	83 c4 08             	add    esp,0x8
c00103af:	5b                   	pop    ebx
c00103b0:	e9 05 fd ff ff       	jmp    c00100ba <VgaText::load()>

c00103b5 <doTerminalCycle()>:
c00103b5:	83 ec 18             	sub    esp,0x18
c00103b8:	a1 60 da 02 c0       	mov    eax,ds:0xc002da60
c00103bd:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c00103c0:	50                   	push   eax
c00103c1:	a3 60 da 02 c0       	mov    ds:0xc002da60,eax
c00103c6:	e8 88 ff ff ff       	call   c0010353 <setActiveTerminal(VgaText*)>
c00103cb:	83 c4 1c             	add    esp,0x1c
c00103ce:	c3                   	ret    
c00103cf:	90                   	nop

c00103d0 <VgaText::setCursorX(int)>:
c00103d0:	83 ec 10             	sub    esp,0x10
c00103d3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00103d7:	ff 70 18             	push   DWORD PTR [eax+0x18]
c00103da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00103de:	50                   	push   eax
c00103df:	e8 58 ff ff ff       	call   c001033c <VgaText::setCursor(int, int)>
c00103e4:	83 c4 1c             	add    esp,0x1c
c00103e7:	c3                   	ret    

c00103e8 <VgaText::setCursorY(int)>:
c00103e8:	83 ec 10             	sub    esp,0x10
c00103eb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00103ef:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00103f3:	ff 70 14             	push   DWORD PTR [eax+0x14]
c00103f6:	50                   	push   eax
c00103f7:	e8 40 ff ff ff       	call   c001033c <VgaText::setCursor(int, int)>
c00103fc:	83 c4 1c             	add    esp,0x1c
c00103ff:	c3                   	ret    

c0010400 <VgaText::incrementCursor(bool)>:
c0010400:	56                   	push   esi
c0010401:	53                   	push   ebx
c0010402:	51                   	push   ecx
c0010403:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010407:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001040b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001040e:	40                   	inc    eax
c001040f:	83 f8 50             	cmp    eax,0x50
c0010412:	74 05                	je     c0010419 <VgaText::incrementCursor(bool)+0x19>
c0010414:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0010417:	eb 24                	jmp    c001043d <VgaText::incrementCursor(bool)+0x3d>
c0010419:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001041c:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0010423:	8d 50 01             	lea    edx,[eax+0x1]
c0010426:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0010429:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c001042c:	75 0f                	jne    c001043d <VgaText::incrementCursor(bool)+0x3d>
c001042e:	83 ec 0c             	sub    esp,0xc
c0010431:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0010434:	53                   	push   ebx
c0010435:	e8 f0 fd ff ff       	call   c001022a <VgaText::scrollScreen()>
c001043a:	83 c4 10             	add    esp,0x10
c001043d:	89 f0                	mov    eax,esi
c001043f:	84 c0                	test   al,al
c0010441:	74 0c                	je     c001044f <VgaText::incrementCursor(bool)+0x4f>
c0010443:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010447:	5a                   	pop    edx
c0010448:	5b                   	pop    ebx
c0010449:	5e                   	pop    esi
c001044a:	e9 b9 fc ff ff       	jmp    c0010108 <VgaText::updateCursor()>
c001044f:	58                   	pop    eax
c0010450:	5b                   	pop    ebx
c0010451:	5e                   	pop    esi
c0010452:	c3                   	ret    
c0010453:	90                   	nop

c0010454 <VgaText::decrementCursor(bool)>:
c0010454:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0010458:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001045c:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c001045f:	85 c0                	test   eax,eax
c0010461:	74 04                	je     c0010467 <VgaText::decrementCursor(bool)+0x13>
c0010463:	48                   	dec    eax
c0010464:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0010467:	84 c9                	test   cl,cl
c0010469:	74 09                	je     c0010474 <VgaText::decrementCursor(bool)+0x20>
c001046b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001046f:	e9 94 fc ff ff       	jmp    c0010108 <VgaText::updateCursor()>
c0010474:	c3                   	ret    
c0010475:	90                   	nop

c0010476 <VgaText::putchar(char, VgaColour, VgaColour)>:
c0010476:	53                   	push   ebx
c0010477:	83 ec 08             	sub    esp,0x8
c001047a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001047e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010482:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0010486:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001048a:	3c 07                	cmp    al,0x7
c001048c:	75 2a                	jne    c00104b8 <VgaText::putchar(char, VgaColour, VgaColour)+0x42>
c001048e:	a1 18 db 02 c0       	mov    eax,ds:0xc002db18
c0010493:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001049b:	c7 44 24 18 f4 01 00 00 	mov    DWORD PTR [esp+0x18],0x1f4
c00104a3:	c7 44 24 14 b8 01 00 00 	mov    DWORD PTR [esp+0x14],0x1b8
c00104ab:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00104af:	83 c4 08             	add    esp,0x8
c00104b2:	5b                   	pop    ebx
c00104b3:	e9 1e 30 00 00       	jmp    c00134d6 <Buzzer::beep(int, int, bool)>
c00104b8:	3c 0d                	cmp    al,0xd
c00104ba:	75 09                	jne    c00104c5 <VgaText::putchar(char, VgaColour, VgaColour)+0x4f>
c00104bc:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00104c3:	eb 2c                	jmp    c00104f1 <VgaText::putchar(char, VgaColour, VgaColour)+0x7b>
c00104c5:	3c 0a                	cmp    al,0xa
c00104c7:	75 31                	jne    c00104fa <VgaText::putchar(char, VgaColour, VgaColour)+0x84>
c00104c9:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00104cc:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00104d3:	8d 50 01             	lea    edx,[eax+0x1]
c00104d6:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c00104d9:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c00104dc:	75 0f                	jne    c00104ed <VgaText::putchar(char, VgaColour, VgaColour)+0x77>
c00104de:	83 ec 0c             	sub    esp,0xc
c00104e1:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00104e4:	53                   	push   ebx
c00104e5:	e8 40 fd ff ff       	call   c001022a <VgaText::scrollScreen()>
c00104ea:	83 c4 10             	add    esp,0x10
c00104ed:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00104f1:	83 c4 08             	add    esp,0x8
c00104f4:	5b                   	pop    ebx
c00104f5:	e9 0e fc ff ff       	jmp    c0010108 <VgaText::updateCursor()>
c00104fa:	3c 08                	cmp    al,0x8
c00104fc:	75 25                	jne    c0010523 <VgaText::putchar(char, VgaColour, VgaColour)+0xad>
c00104fe:	50                   	push   eax
c00104ff:	50                   	push   eax
c0010500:	6a 01                	push   0x1
c0010502:	53                   	push   ebx
c0010503:	e8 4c ff ff ff       	call   c0010454 <VgaText::decrementCursor(bool)>
c0010508:	5a                   	pop    edx
c0010509:	59                   	pop    ecx
c001050a:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c001050d:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0010510:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0010513:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0010516:	6a 20                	push   0x20
c0010518:	53                   	push   ebx
c0010519:	e8 b2 fd ff ff       	call   c00102d0 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c001051e:	83 c4 28             	add    esp,0x28
c0010521:	5b                   	pop    ebx
c0010522:	c3                   	ret    
c0010523:	83 ec 08             	sub    esp,0x8
c0010526:	0f be c0             	movsx  eax,al
c0010529:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c001052c:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c001052f:	51                   	push   ecx
c0010530:	52                   	push   edx
c0010531:	50                   	push   eax
c0010532:	53                   	push   ebx
c0010533:	e8 98 fd ff ff       	call   c00102d0 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010538:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c001053c:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c0010544:	83 c4 28             	add    esp,0x28
c0010547:	5b                   	pop    ebx
c0010548:	e9 b3 fe ff ff       	jmp    c0010400 <VgaText::incrementCursor(bool)>
c001054d:	90                   	nop

c001054e <VgaText::doUpdate()>:
c001054e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010552:	8b 40 68             	mov    eax,DWORD PTR [eax+0x68]
c0010555:	85 c0                	test   eax,eax
c0010557:	74 02                	je     c001055b <VgaText::doUpdate()+0xd>
c0010559:	ff e0                	jmp    eax
c001055b:	c3                   	ret    

c001055c <VgaText::puts(char const*, VgaColour, VgaColour)>:
c001055c:	55                   	push   ebp
c001055d:	31 ed                	xor    ebp,ebp
c001055f:	57                   	push   edi
c0010560:	56                   	push   esi
c0010561:	53                   	push   ebx
c0010562:	83 ec 1c             	sub    esp,0x1c
c0010565:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0010569:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c001056e:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c0010575:	50                   	push   eax
c0010576:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c001057b:	50                   	push   eax
c001057c:	e8 97 fc ff ff       	call   c0010218 <VgaText::combineColours(unsigned char, unsigned char)>
c0010581:	59                   	pop    ecx
c0010582:	0f b6 c0             	movzx  eax,al
c0010585:	5e                   	pop    esi
c0010586:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c001058b:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001058f:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0010592:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010596:	0f b7 f6             	movzx  esi,si
c0010599:	01 f6                	add    esi,esi
c001059b:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c001059e:	0f be 07             	movsx  eax,BYTE PTR [edi]
c00105a1:	84 c0                	test   al,al
c00105a3:	0f 84 fd 00 00 00    	je     c00106a6 <VgaText::puts(char const*, VgaColour, VgaColour)+0x14a>
c00105a9:	3c 0d                	cmp    al,0xd
c00105ab:	75 0c                	jne    c00105b9 <VgaText::puts(char const*, VgaColour, VgaColour)+0x5d>
c00105ad:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00105b4:	e9 e7 00 00 00       	jmp    c00106a0 <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c00105b9:	3c 0a                	cmp    al,0xa
c00105bb:	75 47                	jne    c0010604 <VgaText::puts(char const*, VgaColour, VgaColour)+0xa8>
c00105bd:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00105c0:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00105c7:	8d 48 01             	lea    ecx,[eax+0x1]
c00105ca:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c00105cd:	3b 4b 10             	cmp    ecx,DWORD PTR [ebx+0x10]
c00105d0:	75 0f                	jne    c00105e1 <VgaText::puts(char const*, VgaColour, VgaColour)+0x85>
c00105d2:	83 ec 0c             	sub    esp,0xc
c00105d5:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00105d8:	53                   	push   ebx
c00105d9:	e8 4c fc ff ff       	call   c001022a <VgaText::scrollScreen()>
c00105de:	83 c4 10             	add    esp,0x10
c00105e1:	83 ec 0c             	sub    esp,0xc
c00105e4:	31 ed                	xor    ebp,ebp
c00105e6:	53                   	push   ebx
c00105e7:	e8 1c fb ff ff       	call   c0010108 <VgaText::updateCursor()>
c00105ec:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c00105f1:	83 c4 10             	add    esp,0x10
c00105f4:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c00105f7:	0f b7 f6             	movzx  esi,si
c00105fa:	01 f6                	add    esi,esi
c00105fc:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c00105ff:	e9 9c 00 00 00       	jmp    c00106a0 <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c0010604:	3c 08                	cmp    al,0x8
c0010606:	75 35                	jne    c001063d <VgaText::puts(char const*, VgaColour, VgaColour)+0xe1>
c0010608:	56                   	push   esi
c0010609:	56                   	push   esi
c001060a:	6a 01                	push   0x1
c001060c:	53                   	push   ebx
c001060d:	e8 42 fe ff ff       	call   c0010454 <VgaText::decrementCursor(bool)>
c0010612:	58                   	pop    eax
c0010613:	5a                   	pop    edx
c0010614:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0010617:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c001061a:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c001061d:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0010620:	6a 20                	push   0x20
c0010622:	53                   	push   ebx
c0010623:	e8 a8 fc ff ff       	call   c00102d0 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010628:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c001062d:	83 c4 20             	add    esp,0x20
c0010630:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0010633:	0f b7 f6             	movzx  esi,si
c0010636:	01 f6                	add    esi,esi
c0010638:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c001063b:	eb 63                	jmp    c00106a0 <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c001063d:	51                   	push   ecx
c001063e:	51                   	push   ecx
c001063f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0010643:	50                   	push   eax
c0010644:	e8 75 fc ff ff       	call   c00102be <VgaText::combineCharAndColour(char, unsigned char)>
c0010649:	83 c4 10             	add    esp,0x10
c001064c:	66 89 06             	mov    WORD PTR [esi],ax
c001064f:	39 1d 64 da 02 c0    	cmp    DWORD PTR ds:0xc002da64,ebx
c0010655:	75 21                	jne    c0010678 <VgaText::puts(char const*, VgaColour, VgaColour)+0x11c>
c0010657:	8b 43 7c             	mov    eax,DWORD PTR [ebx+0x7c]
c001065a:	85 c0                	test   eax,eax
c001065c:	74 1a                	je     c0010678 <VgaText::puts(char const*, VgaColour, VgaColour)+0x11c>
c001065e:	52                   	push   edx
c001065f:	52                   	push   edx
c0010660:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0010663:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0010666:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001066a:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001066e:	0f be 0f             	movsx  ecx,BYTE PTR [edi]
c0010671:	51                   	push   ecx
c0010672:	53                   	push   ebx
c0010673:	ff d0                	call   eax
c0010675:	83 c4 20             	add    esp,0x20
c0010678:	83 c6 02             	add    esi,0x2
c001067b:	50                   	push   eax
c001067c:	50                   	push   eax
c001067d:	6a 00                	push   0x0
c001067f:	53                   	push   ebx
c0010680:	e8 7b fd ff ff       	call   c0010400 <VgaText::incrementCursor(bool)>
c0010685:	83 c4 10             	add    esp,0x10
c0010688:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
c001068c:	75 0d                	jne    c001069b <VgaText::puts(char const*, VgaColour, VgaColour)+0x13f>
c001068e:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0010693:	0f b7 f6             	movzx  esi,si
c0010696:	01 f6                	add    esi,esi
c0010698:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c001069b:	bd 01 00 00 00       	mov    ebp,0x1
c00106a0:	47                   	inc    edi
c00106a1:	e9 f8 fe ff ff       	jmp    c001059e <VgaText::puts(char const*, VgaColour, VgaColour)+0x42>
c00106a6:	83 ec 0c             	sub    esp,0xc
c00106a9:	53                   	push   ebx
c00106aa:	e8 59 fa ff ff       	call   c0010108 <VgaText::updateCursor()>
c00106af:	83 c4 10             	add    esp,0x10
c00106b2:	89 e8                	mov    eax,ebp
c00106b4:	84 c0                	test   al,al
c00106b6:	74 0c                	je     c00106c4 <VgaText::puts(char const*, VgaColour, VgaColour)+0x168>
c00106b8:	83 ec 0c             	sub    esp,0xc
c00106bb:	53                   	push   ebx
c00106bc:	e8 8d fe ff ff       	call   c001054e <VgaText::doUpdate()>
c00106c1:	83 c4 10             	add    esp,0x10
c00106c4:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c00106cb:	83 c4 1c             	add    esp,0x1c
c00106ce:	5b                   	pop    ebx
c00106cf:	5e                   	pop    esi
c00106d0:	5f                   	pop    edi
c00106d1:	5d                   	pop    ebp
c00106d2:	c3                   	ret    
c00106d3:	90                   	nop

c00106d4 <VgaText::clearScreen()>:
c00106d4:	57                   	push   edi
c00106d5:	56                   	push   esi
c00106d6:	31 f6                	xor    esi,esi
c00106d8:	53                   	push   ebx
c00106d9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00106dd:	52                   	push   edx
c00106de:	6a 00                	push   0x0
c00106e0:	6a 00                	push   0x0
c00106e2:	53                   	push   ebx
c00106e3:	e8 54 fc ff ff       	call   c001033c <VgaText::setCursor(int, int)>
c00106e8:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c00106ef:	83 c4 10             	add    esp,0x10
c00106f2:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c00106f5:	7e 20                	jle    c0010717 <VgaText::clearScreen()+0x43>
c00106f7:	31 ff                	xor    edi,edi
c00106f9:	50                   	push   eax
c00106fa:	50                   	push   eax
c00106fb:	56                   	push   esi
c00106fc:	57                   	push   edi
c00106fd:	47                   	inc    edi
c00106fe:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0010701:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0010704:	6a 20                	push   0x20
c0010706:	53                   	push   ebx
c0010707:	e8 c4 fb ff ff       	call   c00102d0 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c001070c:	83 c4 20             	add    esp,0x20
c001070f:	83 ff 50             	cmp    edi,0x50
c0010712:	75 e5                	jne    c00106f9 <VgaText::clearScreen()+0x25>
c0010714:	46                   	inc    esi
c0010715:	eb db                	jmp    c00106f2 <VgaText::clearScreen()+0x1e>
c0010717:	83 ec 0c             	sub    esp,0xc
c001071a:	53                   	push   ebx
c001071b:	e8 2e fe ff ff       	call   c001054e <VgaText::doUpdate()>
c0010720:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c0010727:	83 c4 10             	add    esp,0x10
c001072a:	5b                   	pop    ebx
c001072b:	5e                   	pop    esi
c001072c:	5f                   	pop    edi
c001072d:	c3                   	ret    

c001072e <VgaText::putchar(char)>:
c001072e:	56                   	push   esi
c001072f:	53                   	push   ebx
c0010730:	83 ec 14             	sub    esp,0x14
c0010733:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0010737:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001073b:	3c 5b                	cmp    al,0x5b
c001073d:	75 18                	jne    c0010757 <VgaText::putchar(char)+0x29>
c001073f:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c0010743:	74 1f                	je     c0010764 <VgaText::putchar(char)+0x36>
c0010745:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c001074b:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c0010752:	e9 bd 00 00 00       	jmp    c0010814 <VgaText::putchar(char)+0xe6>
c0010757:	3c 1b                	cmp    al,0x1b
c0010759:	75 09                	jne    c0010764 <VgaText::putchar(char)+0x36>
c001075b:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c001075f:	e9 b0 00 00 00       	jmp    c0010814 <VgaText::putchar(char)+0xe6>
c0010764:	8a 4b 41             	mov    cl,BYTE PTR [ebx+0x41]
c0010767:	84 c9                	test   cl,cl
c0010769:	0f 84 92 00 00 00    	je     c0010801 <VgaText::putchar(char)+0xd3>
c001076f:	8d 50 c0             	lea    edx,[eax-0x40]
c0010772:	80 fa 3e             	cmp    dl,0x3e
c0010775:	77 76                	ja     c00107ed <VgaText::putchar(char)+0xbf>
c0010777:	3c 6d                	cmp    al,0x6d
c0010779:	75 47                	jne    c00107c2 <VgaText::putchar(char)+0x94>
c001077b:	31 f6                	xor    esi,esi
c001077d:	31 d2                	xor    edx,edx
c001077f:	31 c0                	xor    eax,eax
c0010781:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c0010784:	7e 2d                	jle    c00107b3 <VgaText::putchar(char)+0x85>
c0010786:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c001078b:	80 fa 3b             	cmp    dl,0x3b
c001078e:	75 17                	jne    c00107a7 <VgaText::putchar(char)+0x79>
c0010790:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0010794:	50                   	push   eax
c0010795:	53                   	push   ebx
c0010796:	e8 83 f9 ff ff       	call   c001011e <VgaText::doANSI_SGR(int)>
c001079b:	59                   	pop    ecx
c001079c:	31 d2                	xor    edx,edx
c001079e:	58                   	pop    eax
c001079f:	31 c0                	xor    eax,eax
c00107a1:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c00107a5:	eb 09                	jmp    c00107b0 <VgaText::putchar(char)+0x82>
c00107a7:	6b c0 0a             	imul   eax,eax,0xa
c00107aa:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c00107ae:	88 ca                	mov    dl,cl
c00107b0:	46                   	inc    esi
c00107b1:	eb ce                	jmp    c0010781 <VgaText::putchar(char)+0x53>
c00107b3:	84 d2                	test   dl,dl
c00107b5:	74 2e                	je     c00107e5 <VgaText::putchar(char)+0xb7>
c00107b7:	50                   	push   eax
c00107b8:	53                   	push   ebx
c00107b9:	e8 60 f9 ff ff       	call   c001011e <VgaText::doANSI_SGR(int)>
c00107be:	58                   	pop    eax
c00107bf:	5a                   	pop    edx
c00107c0:	eb 23                	jmp    c00107e5 <VgaText::putchar(char)+0xb7>
c00107c2:	3c 4a                	cmp    al,0x4a
c00107c4:	75 1f                	jne    c00107e5 <VgaText::putchar(char)+0xb7>
c00107c6:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c00107ca:	75 19                	jne    c00107e5 <VgaText::putchar(char)+0xb7>
c00107cc:	83 ec 0c             	sub    esp,0xc
c00107cf:	53                   	push   ebx
c00107d0:	e8 ff fe ff ff       	call   c00106d4 <VgaText::clearScreen()>
c00107d5:	83 c4 0c             	add    esp,0xc
c00107d8:	6a 00                	push   0x0
c00107da:	6a 00                	push   0x0
c00107dc:	53                   	push   ebx
c00107dd:	e8 5a fb ff ff       	call   c001033c <VgaText::setCursor(int, int)>
c00107e2:	83 c4 10             	add    esp,0x10
c00107e5:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c00107eb:	eb 27                	jmp    c0010814 <VgaText::putchar(char)+0xe6>
c00107ed:	8b 53 54             	mov    edx,DWORD PTR [ebx+0x54]
c00107f0:	83 fa 0e             	cmp    edx,0xe
c00107f3:	7f 1f                	jg     c0010814 <VgaText::putchar(char)+0xe6>
c00107f5:	8d 4a 01             	lea    ecx,[edx+0x1]
c00107f8:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c00107fb:	88 44 13 42          	mov    BYTE PTR [ebx+edx*1+0x42],al
c00107ff:	eb 13                	jmp    c0010814 <VgaText::putchar(char)+0xe6>
c0010801:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0010804:	0f be c0             	movsx  eax,al
c0010807:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c001080a:	50                   	push   eax
c001080b:	53                   	push   ebx
c001080c:	e8 65 fc ff ff       	call   c0010476 <VgaText::putchar(char, VgaColour, VgaColour)>
c0010811:	83 c4 10             	add    esp,0x10
c0010814:	83 c4 14             	add    esp,0x14
c0010817:	5b                   	pop    ebx
c0010818:	5e                   	pop    esi
c0010819:	c3                   	ret    

c001081a <VgaText::putx(unsigned int)>:
c001081a:	57                   	push   edi
c001081b:	b9 11 00 00 00       	mov    ecx,0x11
c0010820:	56                   	push   esi
c0010821:	be 9a a1 02 c0       	mov    esi,0xc002a19a
c0010826:	53                   	push   ebx
c0010827:	83 ec 20             	sub    esp,0x20
c001082a:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001082e:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c0010832:	fc                   	cld    
c0010833:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010835:	be 08 00 00 00       	mov    esi,0x8
c001083a:	50                   	push   eax
c001083b:	50                   	push   eax
c001083c:	89 d8                	mov    eax,ebx
c001083e:	c1 e3 04             	shl    ebx,0x4
c0010841:	c1 e8 1c             	shr    eax,0x1c
c0010844:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c0010849:	50                   	push   eax
c001084a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001084e:	e8 db fe ff ff       	call   c001072e <VgaText::putchar(char)>
c0010853:	83 c4 10             	add    esp,0x10
c0010856:	4e                   	dec    esi
c0010857:	75 e1                	jne    c001083a <VgaText::putx(unsigned int)+0x20>
c0010859:	83 c4 20             	add    esp,0x20
c001085c:	5b                   	pop    ebx
c001085d:	5e                   	pop    esi
c001085e:	5f                   	pop    edi
c001085f:	c3                   	ret    

c0010860 <VgaText::puts(char const*)>:
c0010860:	53                   	push   ebx
c0010861:	83 ec 08             	sub    esp,0x8
c0010864:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0010868:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001086b:	84 c0                	test   al,al
c001086d:	74 12                	je     c0010881 <VgaText::puts(char const*)+0x21>
c001086f:	43                   	inc    ebx
c0010870:	51                   	push   ecx
c0010871:	51                   	push   ecx
c0010872:	50                   	push   eax
c0010873:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010877:	e8 b2 fe ff ff       	call   c001072e <VgaText::putchar(char)>
c001087c:	83 c4 10             	add    esp,0x10
c001087f:	eb e7                	jmp    c0010868 <VgaText::puts(char const*)+0x8>
c0010881:	83 c4 08             	add    esp,0x8
c0010884:	5b                   	pop    ebx
c0010885:	c3                   	ret    

c0010886 <VgaText::VgaText(char const*)>:
c0010886:	57                   	push   edi
c0010887:	56                   	push   esi
c0010888:	53                   	push   ebx
c0010889:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001088d:	83 ec 08             	sub    esp,0x8
c0010890:	6a 00                	push   0x0
c0010892:	50                   	push   eax
c0010893:	e8 42 05 00 00       	call   c0010dda <UnixFile::UnixFile(int)>
c0010898:	83 c4 10             	add    esp,0x10
c001089b:	ba 00 a2 02 c0       	mov    edx,0xc002a200
c00108a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108a4:	89 10                	mov    DWORD PTR [eax],edx
c00108a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108aa:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c00108b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108b5:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c00108bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108c0:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c00108c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108c8:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c00108cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108d0:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c00108d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108db:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c00108e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108e6:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c00108ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108f1:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c00108f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108fc:	8d 50 60             	lea    edx,[eax+0x60]
c00108ff:	bb 40 da 02 c0       	mov    ebx,0xc002da40
c0010904:	b8 08 00 00 00       	mov    eax,0x8
c0010909:	fc                   	cld    
c001090a:	89 d7                	mov    edi,edx
c001090c:	89 de                	mov    esi,ebx
c001090e:	89 c1                	mov    ecx,eax
c0010910:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0010912:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010916:	05 82 00 00 00       	add    eax,0x82
c001091b:	83 ec 08             	sub    esp,0x8
c001091e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010922:	50                   	push   eax
c0010923:	e8 e4 fe fe ff       	call   c000080c <strcpy>
c0010928:	83 c4 10             	add    esp,0x10
c001092b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001092f:	c7 40 10 18 00 00 00 	mov    DWORD PTR [eax+0x10],0x18
c0010936:	83 ec 0c             	sub    esp,0xc
c0010939:	6a 01                	push   0x1
c001093b:	e8 dd 08 00 00       	call   c001121d <Virt::allocateKernelVirtualPages(int)>
c0010940:	83 c4 10             	add    esp,0x10
c0010943:	89 c2                	mov    edx,eax
c0010945:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010949:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001094c:	8b 1d 10 db 02 c0    	mov    ebx,DWORD PTR ds:0xc002db10
c0010952:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010956:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0010959:	89 c6                	mov    esi,eax
c001095b:	e8 35 f0 ff ff       	call   c000f995 <Phys::allocatePage()>
c0010960:	6a 05                	push   0x5
c0010962:	56                   	push   esi
c0010963:	50                   	push   eax
c0010964:	53                   	push   ebx
c0010965:	e8 70 10 00 00       	call   c00119da <VAS::mapPage(unsigned long, unsigned long, int)>
c001096a:	83 c4 10             	add    esp,0x10
c001096d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010971:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0010974:	83 ec 04             	sub    esp,0x4
c0010977:	68 00 0f 00 00       	push   0xf00
c001097c:	6a 00                	push   0x0
c001097e:	50                   	push   eax
c001097f:	e8 cc fd fe ff       	call   c0000750 <memset>
c0010984:	83 c4 10             	add    esp,0x10
c0010987:	83 ec 04             	sub    esp,0x4
c001098a:	6a 00                	push   0x0
c001098c:	6a 07                	push   0x7
c001098e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010992:	e8 1b f8 ff ff       	call   c00101b2 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0010997:	83 c4 10             	add    esp,0x10
c001099a:	83 ec 04             	sub    esp,0x4
c001099d:	6a 00                	push   0x0
c001099f:	6a 00                	push   0x0
c00109a1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00109a5:	e8 92 f9 ff ff       	call   c001033c <VgaText::setCursor(int, int)>
c00109aa:	83 c4 10             	add    esp,0x10
c00109ad:	83 ec 0c             	sub    esp,0xc
c00109b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00109b4:	e8 1b fd ff ff       	call   c00106d4 <VgaText::clearScreen()>
c00109b9:	83 c4 10             	add    esp,0x10
c00109bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00109c0:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c00109c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00109c8:	05 02 01 00 00       	add    eax,0x102
c00109cd:	83 ec 04             	sub    esp,0x4
c00109d0:	68 96 00 00 00       	push   0x96
c00109d5:	6a 00                	push   0x0
c00109d7:	50                   	push   eax
c00109d8:	e8 73 fd fe ff       	call   c0000750 <memset>
c00109dd:	83 c4 10             	add    esp,0x10
c00109e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00109e4:	05 98 01 00 00       	add    eax,0x198
c00109e9:	83 ec 04             	sub    esp,0x4
c00109ec:	68 2c 01 00 00       	push   0x12c
c00109f1:	6a 00                	push   0x0
c00109f3:	50                   	push   eax
c00109f4:	e8 57 fd fe ff       	call   c0000750 <memset>
c00109f9:	83 c4 10             	add    esp,0x10
c00109fc:	90                   	nop
c00109fd:	5b                   	pop    ebx
c00109fe:	5e                   	pop    esi
c00109ff:	5f                   	pop    edi
c0010a00:	c3                   	ret    
c0010a01:	90                   	nop

c0010a02 <VgaText::receiveKey(unsigned char)>:
c0010a02:	55                   	push   ebp
c0010a03:	57                   	push   edi
c0010a04:	56                   	push   esi
c0010a05:	53                   	push   ebx
c0010a06:	83 ec 1c             	sub    esp,0x1c
c0010a09:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0010a0d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0010a11:	84 db                	test   bl,bl
c0010a13:	0f 84 c9 00 00 00    	je     c0010ae2 <VgaText::receiveKey(unsigned char)+0xe0>
c0010a19:	8d be 02 01 00 00    	lea    edi,[esi+0x102]
c0010a1f:	80 fb 08             	cmp    bl,0x8
c0010a22:	75 2c                	jne    c0010a50 <VgaText::receiveKey(unsigned char)+0x4e>
c0010a24:	83 ec 0c             	sub    esp,0xc
c0010a27:	57                   	push   edi
c0010a28:	e8 3f fd fe ff       	call   c000076c <strlen>
c0010a2d:	83 c4 10             	add    esp,0x10
c0010a30:	85 c0                	test   eax,eax
c0010a32:	74 41                	je     c0010a75 <VgaText::receiveKey(unsigned char)+0x73>
c0010a34:	50                   	push   eax
c0010a35:	50                   	push   eax
c0010a36:	6a 08                	push   0x8
c0010a38:	56                   	push   esi
c0010a39:	e8 f0 fc ff ff       	call   c001072e <VgaText::putchar(char)>
c0010a3e:	89 3c 24             	mov    DWORD PTR [esp],edi
c0010a41:	e8 26 fd fe ff       	call   c000076c <strlen>
c0010a46:	c6 84 06 01 01 00 00 00 	mov    BYTE PTR [esi+eax*1+0x101],0x0
c0010a4e:	eb 22                	jmp    c0010a72 <VgaText::receiveKey(unsigned char)+0x70>
c0010a50:	0f be c3             	movsx  eax,bl
c0010a53:	52                   	push   edx
c0010a54:	52                   	push   edx
c0010a55:	50                   	push   eax
c0010a56:	56                   	push   esi
c0010a57:	e8 d2 fc ff ff       	call   c001072e <VgaText::putchar(char)>
c0010a5c:	88 5c 24 1e          	mov    BYTE PTR [esp+0x1e],bl
c0010a60:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0010a65:	59                   	pop    ecx
c0010a66:	5d                   	pop    ebp
c0010a67:	8d 44 24 16          	lea    eax,[esp+0x16]
c0010a6b:	50                   	push   eax
c0010a6c:	57                   	push   edi
c0010a6d:	e8 da fe fe ff       	call   c000094c <strcat>
c0010a72:	83 c4 10             	add    esp,0x10
c0010a75:	80 be 80 00 00 00 00 	cmp    BYTE PTR [esi+0x80],0x0
c0010a7c:	75 05                	jne    c0010a83 <VgaText::receiveKey(unsigned char)+0x81>
c0010a7e:	80 fb 0a             	cmp    bl,0xa
c0010a81:	75 53                	jne    c0010ad6 <VgaText::receiveKey(unsigned char)+0xd4>
c0010a83:	83 ec 0c             	sub    esp,0xc
c0010a86:	8d 9e 98 01 00 00    	lea    ebx,[esi+0x198]
c0010a8c:	53                   	push   ebx
c0010a8d:	e8 da fc fe ff       	call   c000076c <strlen>
c0010a92:	89 3c 24             	mov    DWORD PTR [esp],edi
c0010a95:	89 c5                	mov    ebp,eax
c0010a97:	e8 d0 fc fe ff       	call   c000076c <strlen>
c0010a9c:	83 c4 10             	add    esp,0x10
c0010a9f:	8d 44 05 04          	lea    eax,[ebp+eax*1+0x4]
c0010aa3:	3d 2c 01 00 00       	cmp    eax,0x12c
c0010aa8:	76 10                	jbe    c0010aba <VgaText::receiveKey(unsigned char)+0xb8>
c0010aaa:	83 ec 0c             	sub    esp,0xc
c0010aad:	68 ab a1 02 c0       	push   0xc002a1ab
c0010ab2:	e8 7e 93 00 00       	call   c0019e35 <Krnl::panic(char const*)>
c0010ab7:	83 c4 10             	add    esp,0x10
c0010aba:	50                   	push   eax
c0010abb:	50                   	push   eax
c0010abc:	57                   	push   edi
c0010abd:	53                   	push   ebx
c0010abe:	e8 89 fe fe ff       	call   c000094c <strcat>
c0010ac3:	83 c4 0c             	add    esp,0xc
c0010ac6:	68 96 00 00 00       	push   0x96
c0010acb:	6a 00                	push   0x0
c0010acd:	57                   	push   edi
c0010ace:	e8 7d fc fe ff       	call   c0000750 <memset>
c0010ad3:	83 c4 10             	add    esp,0x10
c0010ad6:	83 ec 0c             	sub    esp,0xc
c0010ad9:	56                   	push   esi
c0010ada:	e8 6f fa ff ff       	call   c001054e <VgaText::doUpdate()>
c0010adf:	83 c4 10             	add    esp,0x10
c0010ae2:	83 c4 1c             	add    esp,0x1c
c0010ae5:	5b                   	pop    ebx
c0010ae6:	5e                   	pop    esi
c0010ae7:	5f                   	pop    edi
c0010ae8:	5d                   	pop    ebp
c0010ae9:	c3                   	ret    

c0010aea <VgaText::write(unsigned long long, void*, int*)>:
c0010aea:	55                   	push   ebp
c0010aeb:	57                   	push   edi
c0010aec:	56                   	push   esi
c0010aed:	53                   	push   ebx
c0010aee:	83 ec 0c             	sub    esp,0xc
c0010af1:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0010af5:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0010af9:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0010afd:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c0010b04:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c0010b07:	39 eb                	cmp    ebx,ebp
c0010b09:	74 13                	je     c0010b1e <VgaText::write(unsigned long long, void*, int*)+0x34>
c0010b0b:	43                   	inc    ebx
c0010b0c:	50                   	push   eax
c0010b0d:	50                   	push   eax
c0010b0e:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c0010b12:	50                   	push   eax
c0010b13:	56                   	push   esi
c0010b14:	e8 15 fc ff ff       	call   c001072e <VgaText::putchar(char)>
c0010b19:	83 c4 10             	add    esp,0x10
c0010b1c:	eb e9                	jmp    c0010b07 <VgaText::write(unsigned long long, void*, int*)+0x1d>
c0010b1e:	83 ec 0c             	sub    esp,0xc
c0010b21:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c0010b28:	56                   	push   esi
c0010b29:	e8 20 fa ff ff       	call   c001054e <VgaText::doUpdate()>
c0010b2e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0010b32:	89 38                	mov    DWORD PTR [eax],edi
c0010b34:	83 c4 1c             	add    esp,0x1c
c0010b37:	31 c0                	xor    eax,eax
c0010b39:	5b                   	pop    ebx
c0010b3a:	5e                   	pop    esi
c0010b3b:	5f                   	pop    edi
c0010b3c:	5d                   	pop    ebp
c0010b3d:	c3                   	ret    

c0010b3e <newTerminal(char*)>:
c0010b3e:	83 ec 28             	sub    esp,0x28
c0010b41:	68 c4 02 00 00       	push   0x2c4
c0010b46:	e8 4e ea ff ff       	call   c000f599 <malloc>
c0010b4b:	5a                   	pop    edx
c0010b4c:	59                   	pop    ecx
c0010b4d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0010b51:	50                   	push   eax
c0010b52:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0010b56:	e8 2b fd ff ff       	call   c0010886 <VgaText::VgaText(char const*)>
c0010b5b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010b5f:	83 c4 2c             	add    esp,0x2c
c0010b62:	c3                   	ret    
c0010b63:	90                   	nop

c0010b64 <TSS::TSS()>:
c0010b64:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010b68:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010b6f:	90                   	nop
c0010b70:	c3                   	ret    
c0010b71:	90                   	nop

c0010b72 <TSS::setESP(unsigned long)>:
c0010b72:	55                   	push   ebp
c0010b73:	89 e5                	mov    ebp,esp
c0010b75:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010b78:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010b7b:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0010b7e:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010b81:	90                   	nop
c0010b82:	5d                   	pop    ebp
c0010b83:	c3                   	ret    

c0010b84 <TSS::flush()>:
c0010b84:	55                   	push   ebp
c0010b85:	89 e5                	mov    ebp,esp
c0010b87:	83 ec 10             	sub    esp,0x10
c0010b8a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010b8d:	8b 00                	mov    eax,DWORD PTR [eax]
c0010b8f:	83 c8 03             	or     eax,0x3
c0010b92:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0010b96:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0010b9a:	66 89 d0             	mov    ax,dx
c0010b9d:	0f 00 d8             	ltr    ax
c0010ba0:	90                   	nop
c0010ba1:	c9                   	leave  
c0010ba2:	c3                   	ret    
c0010ba3:	90                   	nop

c0010ba4 <TSS::setup(unsigned long, unsigned long)>:
c0010ba4:	55                   	push   ebp
c0010ba5:	89 e5                	mov    ebp,esp
c0010ba7:	83 ec 18             	sub    esp,0x18
c0010baa:	83 ec 0c             	sub    esp,0xc
c0010bad:	6a 68                	push   0x68
c0010baf:	e8 e5 e9 ff ff       	call   c000f599 <malloc>
c0010bb4:	83 c4 10             	add    esp,0x10
c0010bb7:	89 c2                	mov    edx,eax
c0010bb9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010bbc:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010bbf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010bc2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010bc5:	83 ec 04             	sub    esp,0x4
c0010bc8:	6a 68                	push   0x68
c0010bca:	6a 00                	push   0x0
c0010bcc:	50                   	push   eax
c0010bcd:	e8 7e fb fe ff       	call   c0000750 <memset>
c0010bd2:	83 c4 10             	add    esp,0x10
c0010bd5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010bd8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010bdb:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c0010be1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010be4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010be7:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c0010bed:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010bf0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010bf3:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0010bf6:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010bf9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010bfc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010bff:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c0010c05:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010c08:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010c0b:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c0010c11:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010c14:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010c17:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c0010c1d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010c20:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010c23:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c0010c29:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010c2c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010c2f:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c0010c35:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010c38:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010c3b:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c0010c41:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010c44:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010c47:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0010c4a:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0010c4d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010c50:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010c53:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0010c56:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0010c59:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010c5c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010c5f:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c0010c66:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010c69:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010c6c:	0f 20 da             	mov    edx,cr3
c0010c6f:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0010c72:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0010c75:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0010c78:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010c7b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010c7e:	83 ec 08             	sub    esp,0x8
c0010c81:	50                   	push   eax
c0010c82:	8d 45 ec             	lea    eax,[ebp-0x14]
c0010c85:	50                   	push   eax
c0010c86:	e8 07 e1 ff ff       	call   c000ed92 <GDTEntry::setBase(unsigned int)>
c0010c8b:	83 c4 10             	add    esp,0x10
c0010c8e:	83 ec 08             	sub    esp,0x8
c0010c91:	6a 68                	push   0x68
c0010c93:	8d 45 ec             	lea    eax,[ebp-0x14]
c0010c96:	50                   	push   eax
c0010c97:	e8 12 e1 ff ff       	call   c000edae <GDTEntry::setLimit(unsigned int)>
c0010c9c:	83 c4 10             	add    esp,0x10
c0010c9f:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c0010ca3:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0010ca6:	83 e0 0f             	and    eax,0xf
c0010ca9:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0010cac:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0010caf:	83 c8 40             	or     eax,0x40
c0010cb2:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0010cb5:	a1 a8 d9 02 c0       	mov    eax,ds:0xc002d9a8
c0010cba:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0010cc0:	05 78 01 00 00       	add    eax,0x178
c0010cc5:	83 ec 04             	sub    esp,0x4
c0010cc8:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0010ccb:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c0010cce:	50                   	push   eax
c0010ccf:	e8 0e e1 ff ff       	call   c000ede2 <GDT::addEntry(GDTEntry)>
c0010cd4:	83 c4 10             	add    esp,0x10
c0010cd7:	89 c2                	mov    edx,eax
c0010cd9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010cdc:	89 10                	mov    DWORD PTR [eax],edx
c0010cde:	a1 a8 d9 02 c0       	mov    eax,ds:0xc002d9a8
c0010ce3:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0010ce9:	05 78 01 00 00       	add    eax,0x178
c0010cee:	83 ec 0c             	sub    esp,0xc
c0010cf1:	50                   	push   eax
c0010cf2:	e8 15 e1 ff ff       	call   c000ee0c <GDT::flush()>
c0010cf7:	83 c4 10             	add    esp,0x10
c0010cfa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010cfd:	8b 00                	mov    eax,DWORD PTR [eax]
c0010cff:	c9                   	leave  
c0010d00:	c3                   	ret    
c0010d01:	90                   	nop

c0010d02 <ReservedFilename::read(unsigned long long, void*, int*)>:
c0010d02:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010d06:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0010d0a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010d0d:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0010d12:	75 08                	jne    c0010d1c <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c0010d14:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0010d1a:	eb 38                	jmp    c0010d54 <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c0010d1c:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0010d21:	75 17                	jne    c0010d3a <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c0010d23:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010d28:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0010d2b:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0010d31:	8b 10                	mov    edx,DWORD PTR [eax]
c0010d33:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0010d37:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c0010d3a:	89 c1                	mov    ecx,eax
c0010d3c:	83 e1 fd             	and    ecx,0xfffffffd
c0010d3f:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c0010d45:	74 cd                	je     c0010d14 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0010d47:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0010d4c:	83 e0 ef             	and    eax,0xffffffef
c0010d4f:	83 f8 08             	cmp    eax,0x8
c0010d52:	76 c0                	jbe    c0010d14 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0010d54:	31 c0                	xor    eax,eax
c0010d56:	c3                   	ret    
c0010d57:	90                   	nop

c0010d58 <ReservedFilename::isAtty()>:
c0010d58:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010d5c:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0010d5f:	31 c0                	xor    eax,eax
c0010d61:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c0010d67:	74 09                	je     c0010d72 <ReservedFilename::isAtty()+0x1a>
c0010d69:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c0010d6f:	0f 94 c0             	sete   al
c0010d72:	c3                   	ret    
c0010d73:	90                   	nop

c0010d74 <ReservedFilename::write(unsigned long long, void*, int*)>:
c0010d74:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010d78:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0010d7c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010d7f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0010d83:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0010d88:	75 08                	jne    c0010d92 <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c0010d8a:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0010d90:	eb 3d                	jmp    c0010dcf <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0010d92:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0010d97:	75 17                	jne    c0010db0 <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c0010d99:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010d9e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0010da1:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0010da7:	8b 10                	mov    edx,DWORD PTR [eax]
c0010da9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0010dad:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c0010db0:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0010db5:	75 04                	jne    c0010dbb <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c0010db7:	89 0a                	mov    DWORD PTR [edx],ecx
c0010db9:	eb 14                	jmp    c0010dcf <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0010dbb:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c0010dc0:	74 c8                	je     c0010d8a <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0010dc2:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0010dc7:	83 e0 ef             	and    eax,0xffffffef
c0010dca:	83 f8 08             	cmp    eax,0x8
c0010dcd:	76 bb                	jbe    c0010d8a <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0010dcf:	31 c0                	xor    eax,eax
c0010dd1:	c3                   	ret    

c0010dd2 <UnixFile::getFileDescriptor()>:
c0010dd2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010dd6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010dd9:	c3                   	ret    

c0010dda <UnixFile::UnixFile(int)>:
c0010dda:	53                   	push   ebx
c0010ddb:	83 ec 28             	sub    esp,0x28
c0010dde:	ba c8 a2 02 c0       	mov    edx,0xc002a2c8
c0010de3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010de7:	89 10                	mov    DWORD PTR [eax],edx
c0010de9:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c0010df1:	0f 8f 8c 01 00 00    	jg     c0010f83 <UnixFile::UnixFile(int)+0x1a9>
c0010df7:	a1 40 c9 02 c0       	mov    eax,ds:0xc002c940
c0010dfc:	8d 50 01             	lea    edx,[eax+0x1]
c0010dff:	89 15 40 c9 02 c0    	mov    DWORD PTR ds:0xc002c940,edx
c0010e05:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0010e09:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0010e0c:	83 ec 08             	sub    esp,0x8
c0010e0f:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0010e13:	68 f8 da 02 c0       	push   0xc002daf8
c0010e18:	e8 69 76 01 00       	call   c0028486 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0010e1d:	83 c4 10             	add    esp,0x10
c0010e20:	a0 f4 da 02 c0       	mov    al,ds:0xc002daf4
c0010e25:	83 f0 01             	xor    eax,0x1
c0010e28:	84 c0                	test   al,al
c0010e2a:	0f 84 54 01 00 00    	je     c0010f84 <UnixFile::UnixFile(int)+0x1aa>
c0010e30:	c6 05 f4 da 02 c0 01 	mov    BYTE PTR ds:0xc002daf4,0x1
c0010e37:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c0010e3f:	83 ec 0c             	sub    esp,0xc
c0010e42:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010e46:	e8 4e e7 ff ff       	call   c000f599 <malloc>
c0010e4b:	83 c4 10             	add    esp,0x10
c0010e4e:	89 c3                	mov    ebx,eax
c0010e50:	83 ec 08             	sub    esp,0x8
c0010e53:	68 03 ff ff 0f       	push   0xfffff03
c0010e58:	53                   	push   ebx
c0010e59:	e8 2c 01 00 00       	call   c0010f8a <ReservedFilename::ReservedFilename(int)>
c0010e5e:	83 c4 10             	add    esp,0x10
c0010e61:	89 1d ec da 02 c0    	mov    DWORD PTR ds:0xc002daec,ebx
c0010e67:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c0010e6f:	83 ec 0c             	sub    esp,0xc
c0010e72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010e76:	e8 1e e7 ff ff       	call   c000f599 <malloc>
c0010e7b:	83 c4 10             	add    esp,0x10
c0010e7e:	89 c3                	mov    ebx,eax
c0010e80:	83 ec 08             	sub    esp,0x8
c0010e83:	68 01 ff ff 0f       	push   0xfffff01
c0010e88:	53                   	push   ebx
c0010e89:	e8 fc 00 00 00       	call   c0010f8a <ReservedFilename::ReservedFilename(int)>
c0010e8e:	83 c4 10             	add    esp,0x10
c0010e91:	89 1d f0 da 02 c0    	mov    DWORD PTR ds:0xc002daf0,ebx
c0010e97:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c0010e9f:	83 ec 0c             	sub    esp,0xc
c0010ea2:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0010ea6:	e8 ee e6 ff ff       	call   c000f599 <malloc>
c0010eab:	83 c4 10             	add    esp,0x10
c0010eae:	89 c3                	mov    ebx,eax
c0010eb0:	83 ec 08             	sub    esp,0x8
c0010eb3:	68 00 ff ff 0f       	push   0xfffff00
c0010eb8:	53                   	push   ebx
c0010eb9:	e8 cc 00 00 00       	call   c0010f8a <ReservedFilename::ReservedFilename(int)>
c0010ebe:	83 c4 10             	add    esp,0x10
c0010ec1:	89 1d e4 da 02 c0    	mov    DWORD PTR ds:0xc002dae4,ebx
c0010ec7:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c0010ecf:	83 ec 0c             	sub    esp,0xc
c0010ed2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0010ed6:	e8 be e6 ff ff       	call   c000f599 <malloc>
c0010edb:	83 c4 10             	add    esp,0x10
c0010ede:	89 c3                	mov    ebx,eax
c0010ee0:	83 ec 08             	sub    esp,0x8
c0010ee3:	68 02 ff ff 0f       	push   0xfffff02
c0010ee8:	53                   	push   ebx
c0010ee9:	e8 9c 00 00 00       	call   c0010f8a <ReservedFilename::ReservedFilename(int)>
c0010eee:	83 c4 10             	add    esp,0x10
c0010ef1:	89 1d e8 da 02 c0    	mov    DWORD PTR ds:0xc002dae8,ebx
c0010ef7:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0010eff:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c0010f04:	7f 7e                	jg     c0010f84 <UnixFile::UnixFile(int)+0x1aa>
c0010f06:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c0010f0e:	83 ec 0c             	sub    esp,0xc
c0010f11:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0010f15:	e8 7f e6 ff ff       	call   c000f599 <malloc>
c0010f1a:	83 c4 10             	add    esp,0x10
c0010f1d:	89 c3                	mov    ebx,eax
c0010f1f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010f23:	05 10 ff ff 0f       	add    eax,0xfffff10
c0010f28:	83 ec 08             	sub    esp,0x8
c0010f2b:	50                   	push   eax
c0010f2c:	53                   	push   ebx
c0010f2d:	e8 58 00 00 00       	call   c0010f8a <ReservedFilename::ReservedFilename(int)>
c0010f32:	83 c4 10             	add    esp,0x10
c0010f35:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010f39:	89 1c 85 c0 da 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2540],ebx
c0010f40:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c0010f48:	83 ec 0c             	sub    esp,0xc
c0010f4b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0010f4f:	e8 45 e6 ff ff       	call   c000f599 <malloc>
c0010f54:	83 c4 10             	add    esp,0x10
c0010f57:	89 c3                	mov    ebx,eax
c0010f59:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010f5d:	05 20 ff ff 0f       	add    eax,0xfffff20
c0010f62:	83 ec 08             	sub    esp,0x8
c0010f65:	50                   	push   eax
c0010f66:	53                   	push   ebx
c0010f67:	e8 1e 00 00 00       	call   c0010f8a <ReservedFilename::ReservedFilename(int)>
c0010f6c:	83 c4 10             	add    esp,0x10
c0010f6f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010f73:	89 1c 85 80 da 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2580],ebx
c0010f7a:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0010f7e:	e9 7c ff ff ff       	jmp    c0010eff <UnixFile::UnixFile(int)+0x125>
c0010f83:	90                   	nop
c0010f84:	83 c4 28             	add    esp,0x28
c0010f87:	5b                   	pop    ebx
c0010f88:	c3                   	ret    
c0010f89:	90                   	nop

c0010f8a <ReservedFilename::ReservedFilename(int)>:
c0010f8a:	83 ec 0c             	sub    esp,0xc
c0010f8d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010f91:	83 ec 08             	sub    esp,0x8
c0010f94:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010f98:	50                   	push   eax
c0010f99:	e8 3c fe ff ff       	call   c0010dda <UnixFile::UnixFile(int)>
c0010f9e:	83 c4 10             	add    esp,0x10
c0010fa1:	ba e4 a2 02 c0       	mov    edx,0xc002a2e4
c0010fa6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010faa:	89 10                	mov    DWORD PTR [eax],edx
c0010fac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010fb0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0010fb4:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010fb7:	90                   	nop
c0010fb8:	83 c4 0c             	add    esp,0xc
c0010fbb:	c3                   	ret    

c0010fbc <UnixFile::~UnixFile()>:
c0010fbc:	83 ec 1c             	sub    esp,0x1c
c0010fbf:	ba c8 a2 02 c0       	mov    edx,0xc002a2c8
c0010fc4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010fc8:	89 10                	mov    DWORD PTR [eax],edx
c0010fca:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010fce:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010fd1:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c0010fd6:	7f 73                	jg     c001104b <UnixFile::~UnixFile()+0x8f>
c0010fd8:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0010fe0:	83 ec 0c             	sub    esp,0xc
c0010fe3:	68 f8 da 02 c0       	push   0xc002daf8
c0010fe8:	e8 6d 75 01 00       	call   c002855a <LinkedList<UnixFile>::getFirstElement()>
c0010fed:	83 c4 10             	add    esp,0x10
c0010ff0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010ff4:	83 ec 0c             	sub    esp,0xc
c0010ff7:	68 f8 da 02 c0       	push   0xc002daf8
c0010ffc:	e8 61 75 01 00       	call   c0028562 <LinkedList<UnixFile>::removeFirst()>
c0011001:	83 c4 10             	add    esp,0x10
c0011004:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011008:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c001100c:	74 40                	je     c001104e <UnixFile::~UnixFile()+0x92>
c001100e:	83 ec 08             	sub    esp,0x8
c0011011:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0011015:	68 f8 da 02 c0       	push   0xc002daf8
c001101a:	e8 67 74 01 00       	call   c0028486 <LinkedList<UnixFile>::addElement(UnixFile*)>
c001101f:	83 c4 10             	add    esp,0x10
c0011022:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011026:	8d 50 01             	lea    edx,[eax+0x1]
c0011029:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001102d:	3d 88 13 00 00       	cmp    eax,0x1388
c0011032:	0f 94 c0             	sete   al
c0011035:	84 c0                	test   al,al
c0011037:	74 a7                	je     c0010fe0 <UnixFile::~UnixFile()+0x24>
c0011039:	83 ec 0c             	sub    esp,0xc
c001103c:	68 a0 a2 02 c0       	push   0xc002a2a0
c0011041:	e8 ef 8d 00 00       	call   c0019e35 <Krnl::panic(char const*)>
c0011046:	83 c4 10             	add    esp,0x10
c0011049:	eb 95                	jmp    c0010fe0 <UnixFile::~UnixFile()+0x24>
c001104b:	90                   	nop
c001104c:	eb 01                	jmp    c001104f <UnixFile::~UnixFile()+0x93>
c001104e:	90                   	nop
c001104f:	90                   	nop
c0011050:	83 c4 1c             	add    esp,0x1c
c0011053:	c3                   	ret    

c0011054 <UnixFile::~UnixFile()>:
c0011054:	83 ec 0c             	sub    esp,0xc
c0011057:	83 ec 0c             	sub    esp,0xc
c001105a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001105e:	e8 59 ff ff ff       	call   c0010fbc <UnixFile::~UnixFile()>
c0011063:	83 c4 10             	add    esp,0x10
c0011066:	83 ec 08             	sub    esp,0x8
c0011069:	6a 0c                	push   0xc
c001106b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001106f:	e8 7d 15 00 00       	call   c00125f1 <operator delete(void*, unsigned long)>
c0011074:	83 c4 10             	add    esp,0x10
c0011077:	83 c4 0c             	add    esp,0xc
c001107a:	c3                   	ret    
c001107b:	90                   	nop

c001107c <ReservedFilename::~ReservedFilename()>:
c001107c:	83 ec 0c             	sub    esp,0xc
c001107f:	ba e4 a2 02 c0       	mov    edx,0xc002a2e4
c0011084:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011088:	89 10                	mov    DWORD PTR [eax],edx
c001108a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001108e:	83 ec 0c             	sub    esp,0xc
c0011091:	50                   	push   eax
c0011092:	e8 25 ff ff ff       	call   c0010fbc <UnixFile::~UnixFile()>
c0011097:	83 c4 10             	add    esp,0x10
c001109a:	90                   	nop
c001109b:	83 c4 0c             	add    esp,0xc
c001109e:	c3                   	ret    
c001109f:	90                   	nop

c00110a0 <ReservedFilename::~ReservedFilename()>:
c00110a0:	83 ec 0c             	sub    esp,0xc
c00110a3:	83 ec 0c             	sub    esp,0xc
c00110a6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00110aa:	e8 cd ff ff ff       	call   c001107c <ReservedFilename::~ReservedFilename()>
c00110af:	83 c4 10             	add    esp,0x10
c00110b2:	83 ec 08             	sub    esp,0x8
c00110b5:	6a 0c                	push   0xc
c00110b7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00110bb:	e8 31 15 00 00       	call   c00125f1 <operator delete(void*, unsigned long)>
c00110c0:	83 c4 10             	add    esp,0x10
c00110c3:	83 c4 0c             	add    esp,0xc
c00110c6:	c3                   	ret    

c00110c7 <getFromFileDescriptor(int)>:
c00110c7:	53                   	push   ebx
c00110c8:	83 ec 08             	sub    esp,0x8
c00110cb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00110cf:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c00110d5:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c00110db:	7f 2c                	jg     c0011109 <getFromFileDescriptor(int)+0x42>
c00110dd:	83 ec 0c             	sub    esp,0xc
c00110e0:	68 f8 da 02 c0       	push   0xc002daf8
c00110e5:	e8 70 74 01 00       	call   c002855a <LinkedList<UnixFile>::getFirstElement()>
c00110ea:	83 c4 10             	add    esp,0x10
c00110ed:	85 c0                	test   eax,eax
c00110ef:	75 04                	jne    c00110f5 <getFromFileDescriptor(int)+0x2e>
c00110f1:	31 c0                	xor    eax,eax
c00110f3:	eb 6e                	jmp    c0011163 <getFromFileDescriptor(int)+0x9c>
c00110f5:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c00110f8:	74 69                	je     c0011163 <getFromFileDescriptor(int)+0x9c>
c00110fa:	52                   	push   edx
c00110fb:	52                   	push   edx
c00110fc:	50                   	push   eax
c00110fd:	68 f8 da 02 c0       	push   0xc002daf8
c0011102:	e8 fd 74 01 00       	call   c0028604 <LinkedList<UnixFile>::getNext(UnixFile*)>
c0011107:	eb e1                	jmp    c00110ea <getFromFileDescriptor(int)+0x23>
c0011109:	a1 ec da 02 c0       	mov    eax,ds:0xc002daec
c001110e:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c0011114:	74 4d                	je     c0011163 <getFromFileDescriptor(int)+0x9c>
c0011116:	a1 f0 da 02 c0       	mov    eax,ds:0xc002daf0
c001111b:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c0011121:	74 40                	je     c0011163 <getFromFileDescriptor(int)+0x9c>
c0011123:	a1 e8 da 02 c0       	mov    eax,ds:0xc002dae8
c0011128:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c001112e:	74 33                	je     c0011163 <getFromFileDescriptor(int)+0x9c>
c0011130:	a1 e4 da 02 c0       	mov    eax,ds:0xc002dae4
c0011135:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c001113b:	74 26                	je     c0011163 <getFromFileDescriptor(int)+0x9c>
c001113d:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c0011143:	83 f8 08             	cmp    eax,0x8
c0011146:	77 09                	ja     c0011151 <getFromFileDescriptor(int)+0x8a>
c0011148:	8b 04 85 c0 da 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2540]
c001114f:	eb 12                	jmp    c0011163 <getFromFileDescriptor(int)+0x9c>
c0011151:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c0011157:	83 fb 08             	cmp    ebx,0x8
c001115a:	77 95                	ja     c00110f1 <getFromFileDescriptor(int)+0x2a>
c001115c:	8b 04 9d 80 da 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd2580]
c0011163:	83 c4 08             	add    esp,0x8
c0011166:	5b                   	pop    ebx
c0011167:	c3                   	ret    

c0011168 <__static_initialization_and_destruction_0(int, int)>:
c0011168:	83 ec 0c             	sub    esp,0xc
c001116b:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0011170:	75 34                	jne    c00111a6 <__static_initialization_and_destruction_0(int, int)+0x3e>
c0011172:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001117a:	75 2a                	jne    c00111a6 <__static_initialization_and_destruction_0(int, int)+0x3e>
c001117c:	83 ec 0c             	sub    esp,0xc
c001117f:	68 f8 da 02 c0       	push   0xc002daf8
c0011184:	e8 bb 72 01 00       	call   c0028444 <LinkedList<UnixFile>::LinkedList()>
c0011189:	83 c4 10             	add    esp,0x10
c001118c:	83 ec 04             	sub    esp,0x4
c001118f:	68 78 c7 02 c0       	push   0xc002c778
c0011194:	68 f8 da 02 c0       	push   0xc002daf8
c0011199:	68 42 84 02 c0       	push   0xc0028442
c001119e:	e8 c8 13 00 00       	call   c001256b <__cxa_atexit>
c00111a3:	83 c4 10             	add    esp,0x10
c00111a6:	90                   	nop
c00111a7:	83 c4 0c             	add    esp,0xc
c00111aa:	c3                   	ret    

c00111ab <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c00111ab:	83 ec 0c             	sub    esp,0xc
c00111ae:	83 ec 08             	sub    esp,0x8
c00111b1:	68 ff ff 00 00       	push   0xffff
c00111b6:	6a 01                	push   0x1
c00111b8:	e8 ab ff ff ff       	call   c0011168 <__static_initialization_and_destruction_0(int, int)>
c00111bd:	83 c4 10             	add    esp,0x10
c00111c0:	83 c4 0c             	add    esp,0xc
c00111c3:	c3                   	ret    

c00111c4 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c00111c4:	53                   	push   ebx
c00111c5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00111c9:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00111cd:	8d 88 00 80 f3 ff    	lea    ecx,[eax-0xc8000]
c00111d3:	89 c8                	mov    eax,ecx
c00111d5:	d1 e8                	shr    eax,1
c00111d7:	03 05 48 c9 02 c0    	add    eax,DWORD PTR ds:0xc002c948
c00111dd:	83 e1 01             	and    ecx,0x1
c00111e0:	8a 10                	mov    dl,BYTE PTR [eax]
c00111e2:	75 09                	jne    c00111ed <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x29>
c00111e4:	83 e2 f0             	and    edx,0xfffffff0
c00111e7:	09 da                	or     edx,ebx
c00111e9:	88 10                	mov    BYTE PTR [eax],dl
c00111eb:	5b                   	pop    ebx
c00111ec:	c3                   	ret    
c00111ed:	c1 e3 04             	shl    ebx,0x4
c00111f0:	83 e2 0f             	and    edx,0xf
c00111f3:	09 da                	or     edx,ebx
c00111f5:	88 10                	mov    BYTE PTR [eax],dl
c00111f7:	5b                   	pop    ebx
c00111f8:	c3                   	ret    

c00111f9 <Virt::getPageState(unsigned long)>:
c00111f9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00111fd:	8b 0d 48 c9 02 c0    	mov    ecx,DWORD PTR ds:0xc002c948
c0011203:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c0011209:	89 d0                	mov    eax,edx
c001120b:	d1 e8                	shr    eax,1
c001120d:	83 e2 01             	and    edx,0x1
c0011210:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c0011213:	75 04                	jne    c0011219 <Virt::getPageState(unsigned long)+0x20>
c0011215:	83 e0 0f             	and    eax,0xf
c0011218:	c3                   	ret    
c0011219:	c0 e8 04             	shr    al,0x4
c001121c:	c3                   	ret    

c001121d <Virt::allocateKernelVirtualPages(int)>:
c001121d:	55                   	push   ebp
c001121e:	31 ed                	xor    ebp,ebp
c0011220:	57                   	push   edi
c0011221:	56                   	push   esi
c0011222:	53                   	push   ebx
c0011223:	31 db                	xor    ebx,ebx
c0011225:	83 ec 1c             	sub    esp,0x1c
c0011228:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001122c:	8b 3d 44 c9 02 c0    	mov    edi,DWORD PTR ds:0xc002c944
c0011232:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0011237:	57                   	push   edi
c0011238:	e8 bc ff ff ff       	call   c00111f9 <Virt::getPageState(unsigned long)>
c001123d:	5a                   	pop    edx
c001123e:	84 c0                	test   al,al
c0011240:	75 3a                	jne    c001127c <Virt::allocateKernelVirtualPages(int)+0x5f>
c0011242:	85 db                	test   ebx,ebx
c0011244:	75 02                	jne    c0011248 <Virt::allocateKernelVirtualPages(int)+0x2b>
c0011246:	89 fd                	mov    ebp,edi
c0011248:	43                   	inc    ebx
c0011249:	39 f3                	cmp    ebx,esi
c001124b:	74 5a                	je     c00112a7 <Virt::allocateKernelVirtualPages(int)+0x8a>
c001124d:	47                   	inc    edi
c001124e:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c0011254:	76 31                	jbe    c0011287 <Virt::allocateKernelVirtualPages(int)+0x6a>
c0011256:	c7 05 44 c9 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc002c944,0xc8000
c0011260:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0011265:	75 28                	jne    c001128f <Virt::allocateKernelVirtualPages(int)+0x72>
c0011267:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c001126c:	bf 00 80 0c 00       	mov    edi,0xc8000
c0011271:	57                   	push   edi
c0011272:	e8 82 ff ff ff       	call   c00111f9 <Virt::getPageState(unsigned long)>
c0011277:	5a                   	pop    edx
c0011278:	84 c0                	test   al,al
c001127a:	74 c6                	je     c0011242 <Virt::allocateKernelVirtualPages(int)+0x25>
c001127c:	31 db                	xor    ebx,ebx
c001127e:	47                   	inc    edi
c001127f:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c0011285:	77 cf                	ja     c0011256 <Virt::allocateKernelVirtualPages(int)+0x39>
c0011287:	89 3d 44 c9 02 c0    	mov    DWORD PTR ds:0xc002c944,edi
c001128d:	eb a8                	jmp    c0011237 <Virt::allocateKernelVirtualPages(int)+0x1a>
c001128f:	83 ec 0c             	sub    esp,0xc
c0011292:	68 f8 a2 02 c0       	push   0xc002a2f8
c0011297:	e8 99 8b 00 00       	call   c0019e35 <Krnl::panic(char const*)>
c001129c:	8b 3d 44 c9 02 c0    	mov    edi,DWORD PTR ds:0xc002c944
c00112a2:	83 c4 10             	add    esp,0x10
c00112a5:	eb 90                	jmp    c0011237 <Virt::allocateKernelVirtualPages(int)+0x1a>
c00112a7:	89 2d 44 c9 02 c0    	mov    DWORD PTR ds:0xc002c944,ebp
c00112ad:	4b                   	dec    ebx
c00112ae:	74 5f                	je     c001130f <Virt::allocateKernelVirtualPages(int)+0xf2>
c00112b0:	85 f6                	test   esi,esi
c00112b2:	74 3d                	je     c00112f1 <Virt::allocateKernelVirtualPages(int)+0xd4>
c00112b4:	89 e8                	mov    eax,ebp
c00112b6:	31 db                	xor    ebx,ebx
c00112b8:	8d 7e ff             	lea    edi,[esi-0x1]
c00112bb:	eb 14                	jmp    c00112d1 <Virt::allocateKernelVirtualPages(int)+0xb4>
c00112bd:	6a 01                	push   0x1
c00112bf:	43                   	inc    ebx
c00112c0:	50                   	push   eax
c00112c1:	e8 fe fe ff ff       	call   c00111c4 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00112c6:	58                   	pop    eax
c00112c7:	39 f3                	cmp    ebx,esi
c00112c9:	5a                   	pop    edx
c00112ca:	74 25                	je     c00112f1 <Virt::allocateKernelVirtualPages(int)+0xd4>
c00112cc:	a1 44 c9 02 c0       	mov    eax,ds:0xc002c944
c00112d1:	8d 50 01             	lea    edx,[eax+0x1]
c00112d4:	85 db                	test   ebx,ebx
c00112d6:	89 15 44 c9 02 c0    	mov    DWORD PTR ds:0xc002c944,edx
c00112dc:	74 20                	je     c00112fe <Virt::allocateKernelVirtualPages(int)+0xe1>
c00112de:	39 df                	cmp    edi,ebx
c00112e0:	75 db                	jne    c00112bd <Virt::allocateKernelVirtualPages(int)+0xa0>
c00112e2:	6a 03                	push   0x3
c00112e4:	43                   	inc    ebx
c00112e5:	50                   	push   eax
c00112e6:	e8 d9 fe ff ff       	call   c00111c4 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00112eb:	59                   	pop    ecx
c00112ec:	39 f3                	cmp    ebx,esi
c00112ee:	58                   	pop    eax
c00112ef:	75 db                	jne    c00112cc <Virt::allocateKernelVirtualPages(int)+0xaf>
c00112f1:	83 c4 1c             	add    esp,0x1c
c00112f4:	89 e8                	mov    eax,ebp
c00112f6:	5b                   	pop    ebx
c00112f7:	c1 e0 0c             	shl    eax,0xc
c00112fa:	5e                   	pop    esi
c00112fb:	5f                   	pop    edi
c00112fc:	5d                   	pop    ebp
c00112fd:	c3                   	ret    
c00112fe:	6a 02                	push   0x2
c0011300:	bb 01 00 00 00       	mov    ebx,0x1
c0011305:	50                   	push   eax
c0011306:	e8 b9 fe ff ff       	call   c00111c4 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001130b:	58                   	pop    eax
c001130c:	5a                   	pop    edx
c001130d:	eb bd                	jmp    c00112cc <Virt::allocateKernelVirtualPages(int)+0xaf>
c001130f:	6a 04                	push   0x4
c0011311:	8d 45 01             	lea    eax,[ebp+0x1]
c0011314:	55                   	push   ebp
c0011315:	a3 44 c9 02 c0       	mov    ds:0xc002c944,eax
c001131a:	e8 a5 fe ff ff       	call   c00111c4 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001131f:	59                   	pop    ecx
c0011320:	89 e8                	mov    eax,ebp
c0011322:	5b                   	pop    ebx
c0011323:	c1 e0 0c             	shl    eax,0xc
c0011326:	83 c4 1c             	add    esp,0x1c
c0011329:	5b                   	pop    ebx
c001132a:	5e                   	pop    esi
c001132b:	5f                   	pop    edi
c001132c:	5d                   	pop    ebp
c001132d:	c3                   	ret    

c001132e <Virt::freeSwapfilePage(unsigned long)>:
c001132e:	53                   	push   ebx
c001132f:	8b 15 0c db 02 c0    	mov    edx,DWORD PTR ds:0xc002db0c
c0011335:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0011339:	b8 01 00 00 00       	mov    eax,0x1
c001133e:	89 cb                	mov    ebx,ecx
c0011340:	d3 e0                	shl    eax,cl
c0011342:	c1 eb 05             	shr    ebx,0x5
c0011345:	f7 d0                	not    eax
c0011347:	21 04 9a             	and    DWORD PTR [edx+ebx*4],eax
c001134a:	5b                   	pop    ebx
c001134b:	c3                   	ret    

c001134c <Virt::swapIDToSector(unsigned long)>:
c001134c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011350:	0f af 05 4c c9 02 c0 	imul   eax,DWORD PTR ds:0xc002c94c
c0011357:	03 05 54 c9 02 c0    	add    eax,DWORD PTR ds:0xc002c954
c001135d:	c3                   	ret    

c001135e <Virt::allocateSwapfilePage()>:
c001135e:	55                   	push   ebp
c001135f:	31 d2                	xor    edx,edx
c0011361:	57                   	push   edi
c0011362:	56                   	push   esi
c0011363:	53                   	push   ebx
c0011364:	83 ec 0c             	sub    esp,0xc
c0011367:	8b 0d 4c c9 02 c0    	mov    ecx,DWORD PTR ds:0xc002c94c
c001136d:	a1 50 c9 02 c0       	mov    eax,ds:0xc002c950
c0011372:	f7 f1                	div    ecx
c0011374:	39 0d 50 c9 02 c0    	cmp    DWORD PTR ds:0xc002c950,ecx
c001137a:	72 2d                	jb     c00113a9 <Virt::allocateSwapfilePage()+0x4b>
c001137c:	8b 35 0c db 02 c0    	mov    esi,DWORD PTR ds:0xc002db0c
c0011382:	8b 16                	mov    edx,DWORD PTR [esi]
c0011384:	f6 c2 01             	test   dl,0x1
c0011387:	74 3c                	je     c00113c5 <Virt::allocateSwapfilePage()+0x67>
c0011389:	31 c9                	xor    ecx,ecx
c001138b:	bf 01 00 00 00       	mov    edi,0x1
c0011390:	eb 12                	jmp    c00113a4 <Virt::allocateSwapfilePage()+0x46>
c0011392:	89 fd                	mov    ebp,edi
c0011394:	89 ca                	mov    edx,ecx
c0011396:	d3 e5                	shl    ebp,cl
c0011398:	c1 ea 05             	shr    edx,0x5
c001139b:	8d 1c 96             	lea    ebx,[esi+edx*4]
c001139e:	8b 13                	mov    edx,DWORD PTR [ebx]
c00113a0:	85 ea                	test   edx,ebp
c00113a2:	74 2a                	je     c00113ce <Virt::allocateSwapfilePage()+0x70>
c00113a4:	41                   	inc    ecx
c00113a5:	39 c8                	cmp    eax,ecx
c00113a7:	77 e9                	ja     c0011392 <Virt::allocateSwapfilePage()+0x34>
c00113a9:	83 ec 0c             	sub    esp,0xc
c00113ac:	68 b0 a4 02 c0       	push   0xc002a4b0
c00113b1:	e8 7f 8a 00 00       	call   c0019e35 <Krnl::panic(char const*)>
c00113b6:	83 c4 10             	add    esp,0x10
c00113b9:	31 c9                	xor    ecx,ecx
c00113bb:	83 c4 0c             	add    esp,0xc
c00113be:	89 c8                	mov    eax,ecx
c00113c0:	5b                   	pop    ebx
c00113c1:	5e                   	pop    esi
c00113c2:	5f                   	pop    edi
c00113c3:	5d                   	pop    ebp
c00113c4:	c3                   	ret    
c00113c5:	89 f3                	mov    ebx,esi
c00113c7:	bd 01 00 00 00       	mov    ebp,0x1
c00113cc:	31 c9                	xor    ecx,ecx
c00113ce:	09 ea                	or     edx,ebp
c00113d0:	89 c8                	mov    eax,ecx
c00113d2:	89 13                	mov    DWORD PTR [ebx],edx
c00113d4:	83 c4 0c             	add    esp,0xc
c00113d7:	5b                   	pop    ebx
c00113d8:	5e                   	pop    esi
c00113d9:	5f                   	pop    edi
c00113da:	5d                   	pop    ebp
c00113db:	c3                   	ret    

c00113dc <Virt::virtualMemorySetup()>:
c00113dc:	53                   	push   ebx
c00113dd:	bb 00 80 0c 00       	mov    ebx,0xc8000
c00113e2:	6a 0f                	push   0xf
c00113e4:	53                   	push   ebx
c00113e5:	43                   	inc    ebx
c00113e6:	e8 d9 fd ff ff       	call   c00111c4 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00113eb:	58                   	pop    eax
c00113ec:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c00113f2:	5a                   	pop    edx
c00113f3:	75 ed                	jne    c00113e2 <Virt::virtualMemorySetup()+0x6>
c00113f5:	bb 00 80 0c 00       	mov    ebx,0xc8000
c00113fa:	6a 00                	push   0x0
c00113fc:	53                   	push   ebx
c00113fd:	43                   	inc    ebx
c00113fe:	e8 c1 fd ff ff       	call   c00111c4 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011403:	59                   	pop    ecx
c0011404:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c001140a:	58                   	pop    eax
c001140b:	75 ed                	jne    c00113fa <Virt::virtualMemorySetup()+0x1e>
c001140d:	bb 00 00 0d 00       	mov    ebx,0xd0000
c0011412:	6a 0f                	push   0xf
c0011414:	53                   	push   ebx
c0011415:	43                   	inc    ebx
c0011416:	e8 a9 fd ff ff       	call   c00111c4 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001141b:	58                   	pop    eax
c001141c:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c0011422:	5a                   	pop    edx
c0011423:	75 ed                	jne    c0011412 <Virt::virtualMemorySetup()+0x36>
c0011425:	5b                   	pop    ebx
c0011426:	c3                   	ret    

c0011427 <Virt::setupPageSwapping(int)>:
c0011427:	57                   	push   edi
c0011428:	56                   	push   esi
c0011429:	53                   	push   ebx
c001142a:	83 ec 1c             	sub    esp,0x1c
c001142d:	68 14 01 00 00       	push   0x114
c0011432:	e8 62 e1 ff ff       	call   c000f599 <malloc>
c0011437:	83 c4 0c             	add    esp,0xc
c001143a:	89 c6                	mov    esi,eax
c001143c:	ff 35 f0 0e 03 c0    	push   DWORD PTR ds:0xc0030ef0
c0011442:	68 c7 a4 02 c0       	push   0xc002a4c7
c0011447:	50                   	push   eax
c0011448:	e8 db 17 00 00       	call   c0012c28 <File::File(char const*, Process*)>
c001144d:	89 34 24             	mov    DWORD PTR [esp],esi
c0011450:	e8 af 19 00 00       	call   c0012e04 <File::unlink()>
c0011455:	58                   	pop    eax
c0011456:	5a                   	pop    edx
c0011457:	6a 12                	push   0x12
c0011459:	56                   	push   esi
c001145a:	e8 2d 18 00 00       	call   c0012c8c <File::open(FileOpenMode)>
c001145f:	83 c4 10             	add    esp,0x10
c0011462:	85 c0                	test   eax,eax
c0011464:	0f 85 2f 01 00 00    	jne    c0011599 <Virt::setupPageSwapping(int)+0x172>
c001146a:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001146e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011476:	c1 e3 08             	shl    ebx,0x8
c0011479:	83 ec 0c             	sub    esp,0xc
c001147c:	68 00 00 01 00       	push   0x10000
c0011481:	e8 13 e1 ff ff       	call   c000f599 <malloc>
c0011486:	83 c4 0c             	add    esp,0xc
c0011489:	89 c7                	mov    edi,eax
c001148b:	68 00 00 01 00       	push   0x10000
c0011490:	68 ee 00 00 00       	push   0xee
c0011495:	50                   	push   eax
c0011496:	e8 b5 f2 fe ff       	call   c0000750 <memset>
c001149b:	83 c4 10             	add    esp,0x10
c001149e:	85 db                	test   ebx,ebx
c00114a0:	79 03                	jns    c00114a5 <Virt::setupPageSwapping(int)+0x7e>
c00114a2:	83 c3 0f             	add    ebx,0xf
c00114a5:	c1 fb 04             	sar    ebx,0x4
c00114a8:	4b                   	dec    ebx
c00114a9:	83 fb ff             	cmp    ebx,0xffffffff
c00114ac:	74 41                	je     c00114ef <Virt::setupPageSwapping(int)+0xc8>
c00114ae:	83 ec 0c             	sub    esp,0xc
c00114b1:	8b 06                	mov    eax,DWORD PTR [esi]
c00114b3:	8d 54 24 18          	lea    edx,[esp+0x18]
c00114b7:	52                   	push   edx
c00114b8:	57                   	push   edi
c00114b9:	6a 00                	push   0x0
c00114bb:	68 00 00 01 00       	push   0x10000
c00114c0:	56                   	push   esi
c00114c1:	ff 50 10             	call   DWORD PTR [eax+0x10]
c00114c4:	83 c4 20             	add    esp,0x20
c00114c7:	85 c0                	test   eax,eax
c00114c9:	0f 85 b5 00 00 00    	jne    c0011584 <Virt::setupPageSwapping(int)+0x15d>
c00114cf:	81 7c 24 0c 00 00 01 00 	cmp    DWORD PTR [esp+0xc],0x10000
c00114d7:	74 cf                	je     c00114a8 <Virt::setupPageSwapping(int)+0x81>
c00114d9:	83 ec 0c             	sub    esp,0xc
c00114dc:	4b                   	dec    ebx
c00114dd:	68 f9 a4 02 c0       	push   0xc002a4f9
c00114e2:	e8 4e 89 00 00       	call   c0019e35 <Krnl::panic(char const*)>
c00114e7:	83 c4 10             	add    esp,0x10
c00114ea:	83 fb ff             	cmp    ebx,0xffffffff
c00114ed:	75 bf                	jne    c00114ae <Virt::setupPageSwapping(int)+0x87>
c00114ef:	83 ec 0c             	sub    esp,0xc
c00114f2:	56                   	push   esi
c00114f3:	e8 f2 17 00 00       	call   c0012cea <File::close()>
c00114f8:	89 3c 24             	mov    DWORD PTR [esp],edi
c00114fb:	e8 b9 e0 ff ff       	call   c000f5b9 <rfree>
c0011500:	83 c4 10             	add    esp,0x10
c0011503:	85 f6                	test   esi,esi
c0011505:	74 0c                	je     c0011513 <Virt::setupPageSwapping(int)+0xec>
c0011507:	83 ec 0c             	sub    esp,0xc
c001150a:	8b 06                	mov    eax,DWORD PTR [esi]
c001150c:	56                   	push   esi
c001150d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011510:	83 c4 10             	add    esp,0x10
c0011513:	83 ec 08             	sub    esp,0x8
c0011516:	a1 a8 df 02 c0       	mov    eax,ds:0xc002dfa8
c001151b:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0011521:	8b 10                	mov    edx,DWORD PTR [eax]
c0011523:	68 c7 a4 02 c0       	push   0xc002a4c7
c0011528:	50                   	push   eax
c0011529:	ff 52 5c             	call   DWORD PTR [edx+0x5c]
c001152c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0011530:	c6 05 58 c9 02 c0 43 	mov    BYTE PTR ds:0xc002c958,0x43
c0011537:	c1 e2 0b             	shl    edx,0xb
c001153a:	a3 54 c9 02 c0       	mov    ds:0xc002c954,eax
c001153f:	89 15 50 c9 02 c0    	mov    DWORD PTR ds:0xc002c950,edx
c0011545:	c7 05 4c c9 02 c0 08 00 00 00 	mov    DWORD PTR ds:0xc002c94c,0x8
c001154f:	c1 ea 08             	shr    edx,0x8
c0011552:	89 14 24             	mov    DWORD PTR [esp],edx
c0011555:	e8 3f e0 ff ff       	call   c000f599 <malloc>
c001155a:	83 c4 0c             	add    esp,0xc
c001155d:	89 c1                	mov    ecx,eax
c001155f:	a3 0c db 02 c0       	mov    ds:0xc002db0c,eax
c0011564:	31 d2                	xor    edx,edx
c0011566:	a1 50 c9 02 c0       	mov    eax,ds:0xc002c950
c001156b:	f7 35 4c c9 02 c0    	div    DWORD PTR ds:0xc002c94c
c0011571:	c1 e8 05             	shr    eax,0x5
c0011574:	50                   	push   eax
c0011575:	6a 00                	push   0x0
c0011577:	51                   	push   ecx
c0011578:	e8 d3 f1 fe ff       	call   c0000750 <memset>
c001157d:	83 c4 20             	add    esp,0x20
c0011580:	5b                   	pop    ebx
c0011581:	5e                   	pop    esi
c0011582:	5f                   	pop    edi
c0011583:	c3                   	ret    
c0011584:	83 ec 0c             	sub    esp,0xc
c0011587:	68 f9 a4 02 c0       	push   0xc002a4f9
c001158c:	e8 a4 88 00 00       	call   c0019e35 <Krnl::panic(char const*)>
c0011591:	83 c4 10             	add    esp,0x10
c0011594:	e9 36 ff ff ff       	jmp    c00114cf <Virt::setupPageSwapping(int)+0xa8>
c0011599:	83 ec 0c             	sub    esp,0xc
c001159c:	68 de a4 02 c0       	push   0xc002a4de
c00115a1:	e8 8f 88 00 00       	call   c0019e35 <Krnl::panic(char const*)>
c00115a6:	83 c4 10             	add    esp,0x10
c00115a9:	e9 bc fe ff ff       	jmp    c001146a <Virt::setupPageSwapping(int)+0x43>

c00115ae <VAS::VAS()>:
c00115ae:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00115b2:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00115b9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00115bd:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00115c4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00115c8:	a3 10 db 02 c0       	mov    ds:0xc002db10,eax
c00115cd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00115d1:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c00115d5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00115d9:	c6 00 01             	mov    BYTE PTR [eax],0x1
c00115dc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00115e0:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c00115e7:	90                   	nop
c00115e8:	c3                   	ret    
c00115e9:	90                   	nop

c00115ea <VAS::VAS(VAS*)>:
c00115ea:	83 ec 0c             	sub    esp,0xc
c00115ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00115f1:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00115f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00115fc:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0011603:	83 ec 0c             	sub    esp,0xc
c0011606:	68 18 a3 02 c0       	push   0xc002a318
c001160b:	e8 25 88 00 00       	call   c0019e35 <Krnl::panic(char const*)>
c0011610:	83 c4 10             	add    esp,0x10
c0011613:	90                   	nop
c0011614:	83 c4 0c             	add    esp,0xc
c0011617:	c3                   	ret    

c0011618 <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c0011618:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001161c:	89 c2                	mov    edx,eax
c001161e:	c1 e8 0a             	shr    eax,0xa
c0011621:	c1 ea 16             	shr    edx,0x16
c0011624:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0011629:	19 c9                	sbb    ecx,ecx
c001162b:	c1 e2 0c             	shl    edx,0xc
c001162e:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c0011634:	25 fc 0f 00 00       	and    eax,0xffc
c0011639:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c0011640:	01 d0                	add    eax,edx
c0011642:	c3                   	ret    
c0011643:	90                   	nop

c0011644 <VAS::getPageTableEntry(unsigned long)>:
c0011644:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0011648:	89 ca                	mov    edx,ecx
c001164a:	c1 e9 0a             	shr    ecx,0xa
c001164d:	c1 ea 16             	shr    edx,0x16
c0011650:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c0011656:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c001165c:	c1 e0 0c             	shl    eax,0xc
c001165f:	8d 04 08             	lea    eax,[eax+ecx*1]
c0011662:	c3                   	ret    

c0011663 <Virt::freeKernelVirtualPages(unsigned long)>:
c0011663:	57                   	push   edi
c0011664:	56                   	push   esi
c0011665:	be 01 00 00 00       	mov    esi,0x1
c001166a:	53                   	push   ebx
c001166b:	83 ec 10             	sub    esp,0x10
c001166e:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011672:	c1 eb 0c             	shr    ebx,0xc
c0011675:	eb 3f                	jmp    c00116b6 <Virt::freeKernelVirtualPages(unsigned long)+0x53>
c0011677:	83 ec 08             	sub    esp,0x8
c001167a:	57                   	push   edi
c001167b:	ff 35 10 db 02 c0    	push   DWORD PTR ds:0xc002db10
c0011681:	e8 be ff ff ff       	call   c0011644 <VAS::getPageTableEntry(unsigned long)>
c0011686:	83 c4 10             	add    esp,0x10
c0011689:	8b 00                	mov    eax,DWORD PTR [eax]
c001168b:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c001168f:	f6 c4 04             	test   ah,0x4
c0011692:	75 5f                	jne    c00116f3 <Virt::freeKernelVirtualPages(unsigned long)+0x90>
c0011694:	80 fa 04             	cmp    dl,0x4
c0011697:	74 78                	je     c0011711 <Virt::freeKernelVirtualPages(unsigned long)+0xae>
c0011699:	80 fa 02             	cmp    dl,0x2
c001169c:	0f 84 88 00 00 00    	je     c001172a <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c00116a2:	80 fa 03             	cmp    dl,0x3
c00116a5:	0f 84 ad 00 00 00    	je     c0011758 <Virt::freeKernelVirtualPages(unsigned long)+0xf5>
c00116ab:	fe ca                	dec    dl
c00116ad:	0f 84 92 00 00 00    	je     c0011745 <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c00116b3:	43                   	inc    ebx
c00116b4:	31 f6                	xor    esi,esi
c00116b6:	53                   	push   ebx
c00116b7:	89 df                	mov    edi,ebx
c00116b9:	e8 3b fb ff ff       	call   c00111f9 <Virt::getPageState(unsigned long)>
c00116be:	c1 e7 0c             	shl    edi,0xc
c00116c1:	59                   	pop    ecx
c00116c2:	84 c0                	test   al,al
c00116c4:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00116c8:	75 ad                	jne    c0011677 <Virt::freeKernelVirtualPages(unsigned long)+0x14>
c00116ca:	83 ec 0c             	sub    esp,0xc
c00116cd:	68 ff a4 02 c0       	push   0xc002a4ff
c00116d2:	e8 5e 87 00 00       	call   c0019e35 <Krnl::panic(char const*)>
c00116d7:	58                   	pop    eax
c00116d8:	5a                   	pop    edx
c00116d9:	57                   	push   edi
c00116da:	ff 35 10 db 02 c0    	push   DWORD PTR ds:0xc002db10
c00116e0:	e8 5f ff ff ff       	call   c0011644 <VAS::getPageTableEntry(unsigned long)>
c00116e5:	83 c4 10             	add    esp,0x10
c00116e8:	8b 00                	mov    eax,DWORD PTR [eax]
c00116ea:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00116ee:	f6 c4 04             	test   ah,0x4
c00116f1:	74 c0                	je     c00116b3 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c00116f3:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c00116f7:	25 00 f0 ff ff       	and    eax,0xfffff000
c00116fc:	83 ec 0c             	sub    esp,0xc
c00116ff:	50                   	push   eax
c0011700:	e8 1f e2 ff ff       	call   c000f924 <Phys::freePage(unsigned long)>
c0011705:	83 c4 10             	add    esp,0x10
c0011708:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c001170c:	80 fa 04             	cmp    dl,0x4
c001170f:	75 88                	jne    c0011699 <Virt::freeKernelVirtualPages(unsigned long)+0x36>
c0011711:	89 f0                	mov    eax,esi
c0011713:	84 c0                	test   al,al
c0011715:	75 47                	jne    c001175e <Virt::freeKernelVirtualPages(unsigned long)+0xfb>
c0011717:	c7 44 24 20 3c a3 02 c0 	mov    DWORD PTR [esp+0x20],0xc002a33c
c001171f:	83 c4 10             	add    esp,0x10
c0011722:	5b                   	pop    ebx
c0011723:	5e                   	pop    esi
c0011724:	5f                   	pop    edi
c0011725:	e9 0b 87 00 00       	jmp    c0019e35 <Krnl::panic(char const*)>
c001172a:	89 f0                	mov    eax,esi
c001172c:	84 c0                	test   al,al
c001172e:	75 15                	jne    c0011745 <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c0011730:	83 ec 0c             	sub    esp,0xc
c0011733:	68 1b a5 02 c0       	push   0xc002a51b
c0011738:	e8 f8 86 00 00       	call   c0019e35 <Krnl::panic(char const*)>
c001173d:	83 c4 10             	add    esp,0x10
c0011740:	e9 6e ff ff ff       	jmp    c00116b3 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0011745:	83 ec 08             	sub    esp,0x8
c0011748:	6a 00                	push   0x0
c001174a:	53                   	push   ebx
c001174b:	e8 74 fa ff ff       	call   c00111c4 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011750:	83 c4 10             	add    esp,0x10
c0011753:	e9 5b ff ff ff       	jmp    c00116b3 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0011758:	89 f0                	mov    eax,esi
c001175a:	84 c0                	test   al,al
c001175c:	75 15                	jne    c0011773 <Virt::freeKernelVirtualPages(unsigned long)+0x110>
c001175e:	83 ec 08             	sub    esp,0x8
c0011761:	6a 00                	push   0x0
c0011763:	53                   	push   ebx
c0011764:	e8 5b fa ff ff       	call   c00111c4 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011769:	83 c4 10             	add    esp,0x10
c001176c:	83 c4 10             	add    esp,0x10
c001176f:	5b                   	pop    ebx
c0011770:	5e                   	pop    esi
c0011771:	5f                   	pop    edi
c0011772:	c3                   	ret    
c0011773:	c7 44 24 20 37 a5 02 c0 	mov    DWORD PTR [esp+0x20],0xc002a537
c001177b:	83 c4 10             	add    esp,0x10
c001177e:	5b                   	pop    ebx
c001177f:	5e                   	pop    esi
c0011780:	5f                   	pop    edi
c0011781:	e9 af 86 00 00       	jmp    c0019e35 <Krnl::panic(char const*)>

c0011786 <VAS::freeAllocatedPages(unsigned long)>:
c0011786:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001178a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001178e:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c0011792:	74 09                	je     c001179d <VAS::freeAllocatedPages(unsigned long)+0x17>
c0011794:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0011798:	e9 c6 fe ff ff       	jmp    c0011663 <Virt::freeKernelVirtualPages(unsigned long)>
c001179d:	c7 44 24 04 60 a3 02 c0 	mov    DWORD PTR [esp+0x4],0xc002a360
c00117a5:	e9 1f 0f 00 00       	jmp    c00126c9 <Dbg::kprintf(char const*, ...)>

c00117aa <VAS::virtualToPhysical(unsigned long)>:
c00117aa:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c00117ae:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c00117b2:	e8 8d fe ff ff       	call   c0011644 <VAS::getPageTableEntry(unsigned long)>
c00117b7:	5a                   	pop    edx
c00117b8:	8b 00                	mov    eax,DWORD PTR [eax]
c00117ba:	59                   	pop    ecx
c00117bb:	25 00 f0 ff ff       	and    eax,0xfffff000
c00117c0:	c3                   	ret    
c00117c1:	90                   	nop

c00117c2 <VAS::reflagRange(unsigned long, int, int, int)>:
c00117c2:	55                   	push   ebp
c00117c3:	57                   	push   edi
c00117c4:	56                   	push   esi
c00117c5:	53                   	push   ebx
c00117c6:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00117ca:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00117ce:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00117d2:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00117d6:	85 db                	test   ebx,ebx
c00117d8:	7e 22                	jle    c00117fc <VAS::reflagRange(unsigned long, int, int, int)+0x3a>
c00117da:	c1 e3 0c             	shl    ebx,0xc
c00117dd:	01 f3                	add    ebx,esi
c00117df:	56                   	push   esi
c00117e0:	81 c6 00 10 00 00    	add    esi,0x1000
c00117e6:	55                   	push   ebp
c00117e7:	e8 58 fe ff ff       	call   c0011644 <VAS::getPageTableEntry(unsigned long)>
c00117ec:	5a                   	pop    edx
c00117ed:	59                   	pop    ecx
c00117ee:	8b 08                	mov    ecx,DWORD PTR [eax]
c00117f0:	21 f9                	and    ecx,edi
c00117f2:	0b 4c 24 24          	or     ecx,DWORD PTR [esp+0x24]
c00117f6:	39 f3                	cmp    ebx,esi
c00117f8:	89 08                	mov    DWORD PTR [eax],ecx
c00117fa:	75 e3                	jne    c00117df <VAS::reflagRange(unsigned long, int, int, int)+0x1d>
c00117fc:	5b                   	pop    ebx
c00117fd:	5e                   	pop    esi
c00117fe:	5f                   	pop    edi
c00117ff:	5d                   	pop    ebp
c0011800:	c3                   	ret    
c0011801:	90                   	nop

c0011802 <VAS::setToWriteCombining(unsigned long, int)>:
c0011802:	a1 a8 d9 02 c0       	mov    eax,ds:0xc002d9a8
c0011807:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001180d:	f6 80 90 11 00 00 20 	test   BYTE PTR [eax+0x1190],0x20
c0011814:	75 01                	jne    c0011817 <VAS::setToWriteCombining(unsigned long, int)+0x15>
c0011816:	c3                   	ret    
c0011817:	68 80 00 00 00       	push   0x80
c001181c:	6a ff                	push   0xffffffff
c001181e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011822:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011826:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001182a:	e8 93 ff ff ff       	call   c00117c2 <VAS::reflagRange(unsigned long, int, int, int)>
c001182f:	83 c4 14             	add    esp,0x14
c0011832:	c3                   	ret    
c0011833:	90                   	nop

c0011834 <VAS::mapOtherVASIn(bool, VAS*)>:
c0011834:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0011839:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001183d:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0011840:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011844:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0011847:	19 c0                	sbb    eax,eax
c0011849:	83 ca 03             	or     edx,0x3
c001184c:	83 e0 fc             	and    eax,0xfffffffc
c001184f:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c0011856:	0f 20 d8             	mov    eax,cr3
c0011859:	0f 22 d8             	mov    cr3,eax
c001185c:	c3                   	ret    
c001185d:	90                   	nop

c001185e <VAS::~VAS()>:
c001185e:	83 ec 2c             	sub    esp,0x2c
c0011861:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0011869:	fa                   	cli    
c001186a:	a1 c8 0e 03 c0       	mov    eax,ds:0xc0030ec8
c001186f:	40                   	inc    eax
c0011870:	a3 c8 0e 03 c0       	mov    ds:0xc0030ec8,eax
c0011875:	b8 00 20 00 c2       	mov    eax,0xc2002000
c001187a:	8b 00                	mov    eax,DWORD PTR [eax]
c001187c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001187f:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c0011885:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0011889:	6a 01                	push   0x1
c001188b:	50                   	push   eax
c001188c:	e8 a3 ff ff ff       	call   c0011834 <VAS::mapOtherVASIn(bool, VAS*)>
c0011891:	83 c4 0c             	add    esp,0xc
c0011894:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001189c:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c00118a4:	0f 8f d4 00 00 00    	jg     c001197e <VAS::~VAS()+0x120>
c00118aa:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00118ae:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00118b1:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00118b5:	c1 e2 02             	shl    edx,0x2
c00118b8:	01 d0                	add    eax,edx
c00118ba:	8b 00                	mov    eax,DWORD PTR [eax]
c00118bc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00118c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00118c4:	83 e0 01             	and    eax,0x1
c00118c7:	0f 84 a8 00 00 00    	je     c0011975 <VAS::~VAS()+0x117>
c00118cd:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00118d5:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c00118dd:	7f 72                	jg     c0011951 <VAS::~VAS()+0xf3>
c00118df:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00118e3:	c1 e0 0a             	shl    eax,0xa
c00118e6:	89 c2                	mov    edx,eax
c00118e8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00118ec:	01 d0                	add    eax,edx
c00118ee:	c1 e0 0c             	shl    eax,0xc
c00118f1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00118f5:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00118fa:	8b 00                	mov    eax,DWORD PTR [eax]
c00118fc:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00118ff:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c0011905:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0011909:	6a 01                	push   0x1
c001190b:	50                   	push   eax
c001190c:	e8 07 fd ff ff       	call   c0011618 <VAS::getForeignPageTableEntry(bool, unsigned long)>
c0011911:	83 c4 0c             	add    esp,0xc
c0011914:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0011918:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001191c:	8b 00                	mov    eax,DWORD PTR [eax]
c001191e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011922:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011926:	25 01 04 00 00       	and    eax,0x401
c001192b:	3d 01 04 00 00       	cmp    eax,0x401
c0011930:	75 19                	jne    c001194b <VAS::~VAS()+0xed>
c0011932:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011936:	25 00 f0 ff ff       	and    eax,0xfffff000
c001193b:	83 ec 0c             	sub    esp,0xc
c001193e:	50                   	push   eax
c001193f:	e8 e0 df ff ff       	call   c000f924 <Phys::freePage(unsigned long)>
c0011944:	83 c4 10             	add    esp,0x10
c0011947:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c001194b:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c001194f:	eb 84                	jmp    c00118d5 <VAS::~VAS()+0x77>
c0011951:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011955:	25 00 04 00 00       	and    eax,0x400
c001195a:	74 19                	je     c0011975 <VAS::~VAS()+0x117>
c001195c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011960:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011965:	83 ec 0c             	sub    esp,0xc
c0011968:	50                   	push   eax
c0011969:	e8 b6 df ff ff       	call   c000f924 <Phys::freePage(unsigned long)>
c001196e:	83 c4 10             	add    esp,0x10
c0011971:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0011975:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0011979:	e9 1e ff ff ff       	jmp    c001189c <VAS::~VAS()+0x3e>
c001197e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011982:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011985:	83 ec 0c             	sub    esp,0xc
c0011988:	50                   	push   eax
c0011989:	e8 d5 fc ff ff       	call   c0011663 <Virt::freeKernelVirtualPages(unsigned long)>
c001198e:	83 c4 10             	add    esp,0x10
c0011991:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011995:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0011998:	83 ec 0c             	sub    esp,0xc
c001199b:	50                   	push   eax
c001199c:	e8 83 df ff ff       	call   c000f924 <Phys::freePage(unsigned long)>
c00119a1:	83 c4 10             	add    esp,0x10
c00119a4:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00119a8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00119ac:	c1 e0 02             	shl    eax,0x2
c00119af:	83 ec 08             	sub    esp,0x8
c00119b2:	50                   	push   eax
c00119b3:	68 84 a3 02 c0       	push   0xc002a384
c00119b8:	e8 0c 0d 00 00       	call   c00126c9 <Dbg::kprintf(char const*, ...)>
c00119bd:	83 c4 10             	add    esp,0x10
c00119c0:	a1 c8 0e 03 c0       	mov    eax,ds:0xc0030ec8
c00119c5:	48                   	dec    eax
c00119c6:	a3 c8 0e 03 c0       	mov    ds:0xc0030ec8,eax
c00119cb:	a1 c8 0e 03 c0       	mov    eax,ds:0xc0030ec8
c00119d0:	85 c0                	test   eax,eax
c00119d2:	75 01                	jne    c00119d5 <VAS::~VAS()+0x177>
c00119d4:	fb                   	sti    
c00119d5:	90                   	nop
c00119d6:	83 c4 2c             	add    esp,0x2c
c00119d9:	c3                   	ret    

c00119da <VAS::mapPage(unsigned long, unsigned long, int)>:
c00119da:	55                   	push   ebp
c00119db:	57                   	push   edi
c00119dc:	56                   	push   esi
c00119dd:	53                   	push   ebx
c00119de:	83 ec 1c             	sub    esp,0x1c
c00119e1:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00119e5:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00119e9:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c00119ef:	77 08                	ja     c00119f9 <VAS::mapPage(unsigned long, unsigned long, int)+0x1f>
c00119f1:	0f 20 d8             	mov    eax,cr3
c00119f4:	39 47 10             	cmp    DWORD PTR [edi+0x10],eax
c00119f7:	75 47                	jne    c0011a40 <VAS::mapPage(unsigned long, unsigned long, int)+0x66>
c00119f9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00119fd:	09 d8                	or     eax,ebx
c00119ff:	a9 ff 0f 00 00       	test   eax,0xfff
c0011a04:	75 57                	jne    c0011a5d <VAS::mapPage(unsigned long, unsigned long, int)+0x83>
c0011a06:	89 de                	mov    esi,ebx
c0011a08:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0011a0b:	c1 ee 16             	shr    esi,0x16
c0011a0e:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c0011a15:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c0011a19:	74 54                	je     c0011a6f <VAS::mapPage(unsigned long, unsigned long, int)+0x95>
c0011a1b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011a1f:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c0011a25:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c0011a29:	c1 e6 0c             	shl    esi,0xc
c0011a2c:	c1 eb 0a             	shr    ebx,0xa
c0011a2f:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c0011a35:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c0011a38:	83 c4 1c             	add    esp,0x1c
c0011a3b:	5b                   	pop    ebx
c0011a3c:	5e                   	pop    esi
c0011a3d:	5f                   	pop    edi
c0011a3e:	5d                   	pop    ebp
c0011a3f:	c3                   	ret    
c0011a40:	83 ec 0c             	sub    esp,0xc
c0011a43:	68 a4 a3 02 c0       	push   0xc002a3a4
c0011a48:	e8 7c 0c 00 00       	call   c00126c9 <Dbg::kprintf(char const*, ...)>
c0011a4d:	83 c4 10             	add    esp,0x10
c0011a50:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011a54:	09 d8                	or     eax,ebx
c0011a56:	a9 ff 0f 00 00       	test   eax,0xfff
c0011a5b:	74 a9                	je     c0011a06 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c0011a5d:	83 ec 0c             	sub    esp,0xc
c0011a60:	68 0c a4 02 c0       	push   0xc002a40c
c0011a65:	e8 cb 83 00 00       	call   c0019e35 <Krnl::panic(char const*)>
c0011a6a:	83 c4 10             	add    esp,0x10
c0011a6d:	eb 97                	jmp    c0011a06 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c0011a6f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0011a73:	e8 1d df ff ff       	call   c000f995 <Phys::allocatePage()>
c0011a78:	83 ec 0c             	sub    esp,0xc
c0011a7b:	89 c5                	mov    ebp,eax
c0011a7d:	8b 0d 10 db 02 c0    	mov    ecx,DWORD PTR ds:0xc002db10
c0011a83:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0011a87:	6a 01                	push   0x1
c0011a89:	e8 8f f7 ff ff       	call   c001121d <Virt::allocateKernelVirtualPages(int)>
c0011a8e:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0011a95:	6a 01                	push   0x1
c0011a97:	50                   	push   eax
c0011a98:	55                   	push   ebp
c0011a99:	81 cd 07 04 00 00    	or     ebp,0x407
c0011a9f:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0011aa3:	51                   	push   ecx
c0011aa4:	e8 27 02 00 00       	call   c0011cd0 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0011aa9:	83 c4 1c             	add    esp,0x1c
c0011aac:	68 00 10 00 00       	push   0x1000
c0011ab1:	6a 00                	push   0x0
c0011ab3:	50                   	push   eax
c0011ab4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0011ab8:	e8 93 ec fe ff       	call   c0000750 <memset>
c0011abd:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0011ac1:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0011ac4:	e8 9a fb ff ff       	call   c0011663 <Virt::freeKernelVirtualPages(unsigned long)>
c0011ac9:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0011acd:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0011ad0:	83 c4 10             	add    esp,0x10
c0011ad3:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c0011ad6:	e9 40 ff ff ff       	jmp    c0011a1b <VAS::mapPage(unsigned long, unsigned long, int)+0x41>
c0011adb:	90                   	nop

c0011adc <VAS::allocatePages(int, int)>:
c0011adc:	55                   	push   ebp
c0011add:	57                   	push   edi
c0011ade:	56                   	push   esi
c0011adf:	53                   	push   ebx
c0011ae0:	83 ec 1c             	sub    esp,0x1c
c0011ae3:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0011ae7:	a1 a8 d9 02 c0       	mov    eax,ds:0xc002d9a8
c0011aec:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011af2:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c0011af8:	83 e0 01             	and    eax,0x1
c0011afb:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c0011aff:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0011b03:	0f 85 cc 00 00 00    	jne    c0011bd5 <VAS::allocatePages(int, int)+0xf9>
c0011b09:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0011b0c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011b10:	85 c0                	test   eax,eax
c0011b12:	0f 84 a1 00 00 00    	je     c0011bb9 <VAS::allocatePages(int, int)+0xdd>
c0011b18:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0011b1c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011b20:	c1 e6 0c             	shl    esi,0xc
c0011b23:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c0011b27:	85 c0                	test   eax,eax
c0011b29:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0011b2c:	7e 33                	jle    c0011b61 <VAS::allocatePages(int, int)+0x85>
c0011b2e:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0011b32:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011b36:	81 cd 00 04 00 00    	or     ebp,0x400
c0011b3c:	e8 54 de ff ff       	call   c000f995 <Phys::allocatePage()>
c0011b41:	55                   	push   ebp
c0011b42:	53                   	push   ebx
c0011b43:	50                   	push   eax
c0011b44:	57                   	push   edi
c0011b45:	e8 90 fe ff ff       	call   c00119da <VAS::mapPage(unsigned long, unsigned long, int)>
c0011b4a:	83 c4 10             	add    esp,0x10
c0011b4d:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011b52:	74 03                	je     c0011b57 <VAS::allocatePages(int, int)+0x7b>
c0011b54:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011b57:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011b5d:	39 de                	cmp    esi,ebx
c0011b5f:	75 db                	jne    c0011b3c <VAS::allocatePages(int, int)+0x60>
c0011b61:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011b66:	75 12                	jne    c0011b7a <VAS::allocatePages(int, int)+0x9e>
c0011b68:	0f 20 d8             	mov    eax,cr3
c0011b6b:	0f 22 d8             	mov    cr3,eax
c0011b6e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011b72:	83 c4 1c             	add    esp,0x1c
c0011b75:	5b                   	pop    ebx
c0011b76:	5e                   	pop    esi
c0011b77:	5f                   	pop    edi
c0011b78:	5d                   	pop    ebp
c0011b79:	c3                   	ret    
c0011b7a:	c1 ee 0a             	shr    esi,0xa
c0011b7d:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011b81:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c0011b87:	c1 eb 0a             	shr    ebx,0xa
c0011b8a:	8d 86 00 00 c0 ff    	lea    eax,[esi-0x400000]
c0011b90:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0011b96:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0011b9c:	39 c3                	cmp    ebx,eax
c0011b9e:	77 ce                	ja     c0011b6e <VAS::allocatePages(int, int)+0x92>
c0011ba0:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011ba3:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011ba9:	39 d8                	cmp    eax,ebx
c0011bab:	73 f3                	jae    c0011ba0 <VAS::allocatePages(int, int)+0xc4>
c0011bad:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011bb1:	83 c4 1c             	add    esp,0x1c
c0011bb4:	5b                   	pop    ebx
c0011bb5:	5e                   	pop    esi
c0011bb6:	5f                   	pop    edi
c0011bb7:	5d                   	pop    ebp
c0011bb8:	c3                   	ret    
c0011bb9:	83 ec 0c             	sub    esp,0xc
c0011bbc:	68 30 a4 02 c0       	push   0xc002a430
c0011bc1:	e8 6f 82 00 00       	call   c0019e35 <Krnl::panic(char const*)>
c0011bc6:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0011bc9:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011bcd:	83 c4 10             	add    esp,0x10
c0011bd0:	e9 43 ff ff ff       	jmp    c0011b18 <VAS::allocatePages(int, int)+0x3c>
c0011bd5:	83 ec 0c             	sub    esp,0xc
c0011bd8:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0011bdc:	e8 3c f6 ff ff       	call   c001121d <Virt::allocateKernelVirtualPages(int)>
c0011be1:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011be5:	83 c4 10             	add    esp,0x10
c0011be8:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c0011bed:	0f 87 9b 00 00 00    	ja     c0011c8e <VAS::allocatePages(int, int)+0x1b2>
c0011bf3:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0011bf7:	85 d2                	test   edx,edx
c0011bf9:	7e 3c                	jle    c0011c37 <VAS::allocatePages(int, int)+0x15b>
c0011bfb:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0011bff:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0011c03:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011c07:	c1 e5 0c             	shl    ebp,0xc
c0011c0a:	81 ce 00 04 00 00    	or     esi,0x400
c0011c10:	01 dd                	add    ebp,ebx
c0011c12:	e8 7e dd ff ff       	call   c000f995 <Phys::allocatePage()>
c0011c17:	56                   	push   esi
c0011c18:	53                   	push   ebx
c0011c19:	50                   	push   eax
c0011c1a:	57                   	push   edi
c0011c1b:	e8 ba fd ff ff       	call   c00119da <VAS::mapPage(unsigned long, unsigned long, int)>
c0011c20:	83 c4 10             	add    esp,0x10
c0011c23:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011c28:	74 03                	je     c0011c2d <VAS::allocatePages(int, int)+0x151>
c0011c2a:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011c2d:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011c33:	39 dd                	cmp    ebp,ebx
c0011c35:	75 db                	jne    c0011c12 <VAS::allocatePages(int, int)+0x136>
c0011c37:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011c3c:	0f 84 26 ff ff ff    	je     c0011b68 <VAS::allocatePages(int, int)+0x8c>
c0011c42:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0011c46:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011c4a:	89 d3                	mov    ebx,edx
c0011c4c:	c1 e0 0c             	shl    eax,0xc
c0011c4f:	c1 eb 0a             	shr    ebx,0xa
c0011c52:	01 d0                	add    eax,edx
c0011c54:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0011c5a:	c1 e8 0a             	shr    eax,0xa
c0011c5d:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0011c63:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011c68:	2d 00 00 40 00       	sub    eax,0x400000
c0011c6d:	39 c3                	cmp    ebx,eax
c0011c6f:	0f 87 f9 fe ff ff    	ja     c0011b6e <VAS::allocatePages(int, int)+0x92>
c0011c75:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011c78:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011c7e:	39 d8                	cmp    eax,ebx
c0011c80:	73 f3                	jae    c0011c75 <VAS::allocatePages(int, int)+0x199>
c0011c82:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011c86:	83 c4 1c             	add    esp,0x1c
c0011c89:	5b                   	pop    ebx
c0011c8a:	5e                   	pop    esi
c0011c8b:	5f                   	pop    edi
c0011c8c:	5d                   	pop    ebp
c0011c8d:	c3                   	ret    
c0011c8e:	a1 a8 d9 02 c0       	mov    eax,ds:0xc002d9a8
c0011c93:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011c99:	f6 80 90 11 00 00 10 	test   BYTE PTR [eax+0x1190],0x10
c0011ca0:	0f 84 4d ff ff ff    	je     c0011bf3 <VAS::allocatePages(int, int)+0x117>
c0011ca6:	81 4c 24 38 00 01 00 00 	or     DWORD PTR [esp+0x38],0x100
c0011cae:	e9 40 ff ff ff       	jmp    c0011bf3 <VAS::allocatePages(int, int)+0x117>
c0011cb3:	90                   	nop

c0011cb4 <VAS::setCPUSpecific(unsigned long)>:
c0011cb4:	83 ec 0c             	sub    esp,0xc
c0011cb7:	6a 05                	push   0x5
c0011cb9:	68 00 00 40 c2       	push   0xc2400000
c0011cbe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011cc2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011cc6:	e8 0f fd ff ff       	call   c00119da <VAS::mapPage(unsigned long, unsigned long, int)>
c0011ccb:	83 c4 1c             	add    esp,0x1c
c0011cce:	c3                   	ret    
c0011ccf:	90                   	nop

c0011cd0 <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c0011cd0:	55                   	push   ebp
c0011cd1:	57                   	push   edi
c0011cd2:	56                   	push   esi
c0011cd3:	53                   	push   ebx
c0011cd4:	83 ec 1c             	sub    esp,0x1c
c0011cd7:	a1 a8 d9 02 c0       	mov    eax,ds:0xc002d9a8
c0011cdc:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0011ce0:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011ce6:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0011cea:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c0011cf0:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0011cf4:	83 e0 01             	and    eax,0x1
c0011cf7:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0011cfb:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011cff:	85 c0                	test   eax,eax
c0011d01:	7e 39                	jle    c0011d3c <VAS::mapRange(unsigned long, unsigned long, int, int)+0x6c>
c0011d03:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011d07:	89 f3                	mov    ebx,esi
c0011d09:	c1 e0 0c             	shl    eax,0xc
c0011d0c:	01 f0                	add    eax,esi
c0011d0e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011d12:	55                   	push   ebp
c0011d13:	53                   	push   ebx
c0011d14:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011d18:	29 f0                	sub    eax,esi
c0011d1a:	01 d8                	add    eax,ebx
c0011d1c:	50                   	push   eax
c0011d1d:	57                   	push   edi
c0011d1e:	e8 b7 fc ff ff       	call   c00119da <VAS::mapPage(unsigned long, unsigned long, int)>
c0011d23:	83 c4 10             	add    esp,0x10
c0011d26:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011d2b:	74 03                	je     c0011d30 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x60>
c0011d2d:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011d30:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011d36:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c0011d3a:	75 d6                	jne    c0011d12 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x42>
c0011d3c:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011d41:	75 10                	jne    c0011d53 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x83>
c0011d43:	0f 20 d8             	mov    eax,cr3
c0011d46:	0f 22 d8             	mov    cr3,eax
c0011d49:	83 c4 1c             	add    esp,0x1c
c0011d4c:	89 f0                	mov    eax,esi
c0011d4e:	5b                   	pop    ebx
c0011d4f:	5e                   	pop    esi
c0011d50:	5f                   	pop    edi
c0011d51:	5d                   	pop    ebp
c0011d52:	c3                   	ret    
c0011d53:	89 f3                	mov    ebx,esi
c0011d55:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011d59:	c1 eb 0a             	shr    ebx,0xa
c0011d5c:	c1 e0 0c             	shl    eax,0xc
c0011d5f:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0011d65:	01 f0                	add    eax,esi
c0011d67:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0011d6d:	c1 e8 0a             	shr    eax,0xa
c0011d70:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011d75:	2d 00 00 40 00       	sub    eax,0x400000
c0011d7a:	39 c3                	cmp    ebx,eax
c0011d7c:	77 cb                	ja     c0011d49 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x79>
c0011d7e:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011d81:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011d87:	39 d8                	cmp    eax,ebx
c0011d89:	73 f3                	jae    c0011d7e <VAS::mapRange(unsigned long, unsigned long, int, int)+0xae>
c0011d8b:	83 c4 1c             	add    esp,0x1c
c0011d8e:	89 f0                	mov    eax,esi
c0011d90:	5b                   	pop    ebx
c0011d91:	5e                   	pop    esi
c0011d92:	5f                   	pop    edi
c0011d93:	5d                   	pop    ebp
c0011d94:	c3                   	ret    
c0011d95:	90                   	nop

c0011d96 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c0011d96:	55                   	push   ebp
c0011d97:	57                   	push   edi
c0011d98:	56                   	push   esi
c0011d99:	53                   	push   ebx
c0011d9a:	83 ec 1c             	sub    esp,0x1c
c0011d9d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011da1:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0011da5:	0b 44 24 3c          	or     eax,DWORD PTR [esp+0x3c]
c0011da9:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0011dad:	a9 ff 0f 00 00       	test   eax,0xfff
c0011db2:	75 4a                	jne    c0011dfe <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x68>
c0011db4:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0011db8:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0011dbb:	c1 eb 16             	shr    ebx,0x16
c0011dbe:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
c0011dc5:	f6 04 30 01          	test   BYTE PTR [eax+esi*1],0x1
c0011dc9:	74 4d                	je     c0011e18 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x82>
c0011dcb:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011dcf:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0011dd3:	c1 e8 0a             	shr    eax,0xa
c0011dd6:	80 fa 01             	cmp    dl,0x1
c0011dd9:	19 d2                	sbb    edx,edx
c0011ddb:	c1 e3 0c             	shl    ebx,0xc
c0011dde:	0b 4c 24 3c          	or     ecx,DWORD PTR [esp+0x3c]
c0011de2:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c0011de8:	25 fc 0f 00 00       	and    eax,0xffc
c0011ded:	01 d8                	add    eax,ebx
c0011def:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c0011df6:	83 c4 1c             	add    esp,0x1c
c0011df9:	5b                   	pop    ebx
c0011dfa:	5e                   	pop    esi
c0011dfb:	5f                   	pop    edi
c0011dfc:	5d                   	pop    ebp
c0011dfd:	c3                   	ret    
c0011dfe:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0011e02:	83 ec 0c             	sub    esp,0xc
c0011e05:	68 5c a4 02 c0       	push   0xc002a45c
c0011e0a:	e8 26 80 00 00       	call   c0019e35 <Krnl::panic(char const*)>
c0011e0f:	83 c4 10             	add    esp,0x10
c0011e12:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011e16:	eb 9c                	jmp    c0011db4 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x1e>
c0011e18:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0011e1c:	e8 74 db ff ff       	call   c000f995 <Phys::allocatePage()>
c0011e21:	83 ec 0c             	sub    esp,0xc
c0011e24:	89 c5                	mov    ebp,eax
c0011e26:	8b 0d 10 db 02 c0    	mov    ecx,DWORD PTR ds:0xc002db10
c0011e2c:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0011e30:	6a 01                	push   0x1
c0011e32:	e8 e6 f3 ff ff       	call   c001121d <Virt::allocateKernelVirtualPages(int)>
c0011e37:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0011e3e:	6a 01                	push   0x1
c0011e40:	50                   	push   eax
c0011e41:	55                   	push   ebp
c0011e42:	81 cd 07 04 00 00    	or     ebp,0x407
c0011e48:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0011e4c:	51                   	push   ecx
c0011e4d:	e8 7e fe ff ff       	call   c0011cd0 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0011e52:	83 c4 1c             	add    esp,0x1c
c0011e55:	68 00 10 00 00       	push   0x1000
c0011e5a:	6a 00                	push   0x0
c0011e5c:	50                   	push   eax
c0011e5d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0011e61:	e8 ea e8 fe ff       	call   c0000750 <memset>
c0011e66:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0011e6a:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0011e6d:	e8 f1 f7 ff ff       	call   c0011663 <Virt::freeKernelVirtualPages(unsigned long)>
c0011e72:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0011e75:	83 c4 10             	add    esp,0x10
c0011e78:	89 2c 30             	mov    DWORD PTR [eax+esi*1],ebp
c0011e7b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0011e7f:	e9 47 ff ff ff       	jmp    c0011dcb <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x35>

c0011e84 <VAS::VAS(bool)>:
c0011e84:	53                   	push   ebx
c0011e85:	83 ec 28             	sub    esp,0x28
c0011e88:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011e8c:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0011e90:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011e94:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011e9b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011e9f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0011ea6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011eaa:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0011eae:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c0011eb1:	e8 df da ff ff       	call   c000f995 <Phys::allocatePage()>
c0011eb6:	89 c2                	mov    edx,eax
c0011eb8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011ebc:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0011ebf:	8b 1d 10 db 02 c0    	mov    ebx,DWORD PTR ds:0xc002db10
c0011ec5:	83 ec 0c             	sub    esp,0xc
c0011ec8:	6a 01                	push   0x1
c0011eca:	e8 4e f3 ff ff       	call   c001121d <Virt::allocateKernelVirtualPages(int)>
c0011ecf:	83 c4 10             	add    esp,0x10
c0011ed2:	89 c2                	mov    edx,eax
c0011ed4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011ed8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0011edb:	83 ec 0c             	sub    esp,0xc
c0011ede:	6a 03                	push   0x3
c0011ee0:	6a 01                	push   0x1
c0011ee2:	52                   	push   edx
c0011ee3:	50                   	push   eax
c0011ee4:	53                   	push   ebx
c0011ee5:	e8 e6 fd ff ff       	call   c0011cd0 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0011eea:	83 c4 20             	add    esp,0x20
c0011eed:	89 c2                	mov    edx,eax
c0011eef:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011ef3:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0011ef6:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0011efe:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c0011f06:	7f 1c                	jg     c0011f24 <VAS::VAS(bool)+0xa0>
c0011f08:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011f0c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011f0f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0011f13:	c1 e2 02             	shl    edx,0x2
c0011f16:	01 d0                	add    eax,edx
c0011f18:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0011f1e:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0011f22:	eb da                	jmp    c0011efe <VAS::VAS(bool)+0x7a>
c0011f24:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c0011f2c:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c0011f34:	7f 7a                	jg     c0011fb0 <VAS::VAS(bool)+0x12c>
c0011f36:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011f3a:	2d 00 02 00 00       	sub    eax,0x200
c0011f3f:	c1 e0 0c             	shl    eax,0xc
c0011f42:	83 c8 03             	or     eax,0x3
c0011f45:	89 c2                	mov    edx,eax
c0011f47:	a1 a8 d9 02 c0       	mov    eax,ds:0xc002d9a8
c0011f4c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011f52:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0011f58:	83 e0 10             	and    eax,0x10
c0011f5b:	84 c0                	test   al,al
c0011f5d:	74 07                	je     c0011f66 <VAS::VAS(bool)+0xe2>
c0011f5f:	b8 00 01 00 00       	mov    eax,0x100
c0011f64:	eb 05                	jmp    c0011f6b <VAS::VAS(bool)+0xe7>
c0011f66:	b8 00 00 00 00       	mov    eax,0x0
c0011f6b:	09 d0                	or     eax,edx
c0011f6d:	89 c1                	mov    ecx,eax
c0011f6f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011f73:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011f76:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0011f7a:	c1 e2 02             	shl    edx,0x2
c0011f7d:	01 d0                	add    eax,edx
c0011f7f:	89 ca                	mov    edx,ecx
c0011f81:	89 10                	mov    DWORD PTR [eax],edx
c0011f83:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011f87:	2d 40 03 00 00       	sub    eax,0x340
c0011f8c:	83 f8 7f             	cmp    eax,0x7f
c0011f8f:	77 16                	ja     c0011fa7 <VAS::VAS(bool)+0x123>
c0011f91:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011f95:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011f98:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0011f9c:	c1 e2 02             	shl    edx,0x2
c0011f9f:	01 d0                	add    eax,edx
c0011fa1:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0011fa7:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0011fab:	e9 7c ff ff ff       	jmp    c0011f2c <VAS::VAS(bool)+0xa8>
c0011fb0:	a1 a8 d9 02 c0       	mov    eax,ds:0xc002d9a8
c0011fb5:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011fbb:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0011fc1:	83 e0 10             	and    eax,0x10
c0011fc4:	84 c0                	test   al,al
c0011fc6:	74 07                	je     c0011fcf <VAS::VAS(bool)+0x14b>
c0011fc8:	b8 03 41 00 00       	mov    eax,0x4103
c0011fcd:	eb 05                	jmp    c0011fd4 <VAS::VAS(bool)+0x150>
c0011fcf:	b8 03 40 00 00       	mov    eax,0x4003
c0011fd4:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0011fd8:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c0011fdb:	81 c2 20 0c 00 00    	add    edx,0xc20
c0011fe1:	89 02                	mov    DWORD PTR [edx],eax
c0011fe3:	a1 a8 d9 02 c0       	mov    eax,ds:0xc002d9a8
c0011fe8:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011fee:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0011ff4:	83 ec 08             	sub    esp,0x8
c0011ff7:	50                   	push   eax
c0011ff8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0011ffc:	e8 b3 fc ff ff       	call   c0011cb4 <VAS::setCPUSpecific(unsigned long)>
c0012001:	83 c4 10             	add    esp,0x10
c0012004:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012008:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c001200b:	a1 a8 d9 02 c0       	mov    eax,ds:0xc002d9a8
c0012010:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012016:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c001201c:	83 e0 10             	and    eax,0x10
c001201f:	84 c0                	test   al,al
c0012021:	74 07                	je     c001202a <VAS::VAS(bool)+0x1a6>
c0012023:	b8 00 01 00 00       	mov    eax,0x100
c0012028:	eb 05                	jmp    c001202f <VAS::VAS(bool)+0x1ab>
c001202a:	b8 00 00 00 00       	mov    eax,0x0
c001202f:	09 c2                	or     edx,eax
c0012031:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012035:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012038:	05 fc 0f 00 00       	add    eax,0xffc
c001203d:	83 ca 03             	or     edx,0x3
c0012040:	89 10                	mov    DWORD PTR [eax],edx
c0012042:	a1 a8 d9 02 c0       	mov    eax,ds:0xc002d9a8
c0012047:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001204d:	83 ec 0c             	sub    esp,0xc
c0012050:	50                   	push   eax
c0012051:	e8 ac 1d 00 00       	call   c0013e02 <Device::getName()>
c0012056:	83 c4 10             	add    esp,0x10
c0012059:	83 ec 08             	sub    esp,0x8
c001205c:	68 51 a5 02 c0       	push   0xc002a551
c0012061:	50                   	push   eax
c0012062:	e8 31 e8 fe ff       	call   c0000898 <strcmp>
c0012067:	83 c4 10             	add    esp,0x10
c001206a:	85 c0                	test   eax,eax
c001206c:	0f 94 c0             	sete   al
c001206f:	84 c0                	test   al,al
c0012071:	0f 84 87 00 00 00    	je     c00120fe <VAS::VAS(bool)+0x27a>
c0012077:	fa                   	cli    
c0012078:	a1 c8 0e 03 c0       	mov    eax,ds:0xc0030ec8
c001207d:	40                   	inc    eax
c001207e:	a3 c8 0e 03 c0       	mov    ds:0xc0030ec8,eax
c0012083:	a1 a8 d9 02 c0       	mov    eax,ds:0xc002d9a8
c0012088:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001208e:	05 7c 09 00 00       	add    eax,0x97c
c0012093:	83 ec 0c             	sub    esp,0xc
c0012096:	50                   	push   eax
c0012097:	e8 82 cf ff ff       	call   c000f01e <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c001209c:	83 c4 10             	add    esp,0x10
c001209f:	25 00 f0 ff ff       	and    eax,0xfffff000
c00120a4:	89 c3                	mov    ebx,eax
c00120a6:	a1 a8 d9 02 c0       	mov    eax,ds:0xc002d9a8
c00120ab:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00120b1:	05 7c 09 00 00       	add    eax,0x97c
c00120b6:	83 ec 0c             	sub    esp,0xc
c00120b9:	50                   	push   eax
c00120ba:	e8 5f cf ff ff       	call   c000f01e <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c00120bf:	83 c4 10             	add    esp,0x10
c00120c2:	83 ec 08             	sub    esp,0x8
c00120c5:	50                   	push   eax
c00120c6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00120ca:	e8 75 f5 ff ff       	call   c0011644 <VAS::getPageTableEntry(unsigned long)>
c00120cf:	83 c4 10             	add    esp,0x10
c00120d2:	8b 00                	mov    eax,DWORD PTR [eax]
c00120d4:	25 00 f0 ff ff       	and    eax,0xfffff000
c00120d9:	6a 11                	push   0x11
c00120db:	53                   	push   ebx
c00120dc:	50                   	push   eax
c00120dd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00120e1:	e8 f4 f8 ff ff       	call   c00119da <VAS::mapPage(unsigned long, unsigned long, int)>
c00120e6:	83 c4 10             	add    esp,0x10
c00120e9:	a1 c8 0e 03 c0       	mov    eax,ds:0xc0030ec8
c00120ee:	48                   	dec    eax
c00120ef:	a3 c8 0e 03 c0       	mov    ds:0xc0030ec8,eax
c00120f4:	a1 c8 0e 03 c0       	mov    eax,ds:0xc0030ec8
c00120f9:	85 c0                	test   eax,eax
c00120fb:	75 01                	jne    c00120fe <VAS::VAS(bool)+0x27a>
c00120fd:	fb                   	sti    
c00120fe:	90                   	nop
c00120ff:	83 c4 28             	add    esp,0x28
c0012102:	5b                   	pop    ebx
c0012103:	c3                   	ret    

c0012104 <VAS::evict(unsigned long)>:
c0012104:	55                   	push   ebp
c0012105:	57                   	push   edi
c0012106:	56                   	push   esi
c0012107:	53                   	push   ebx
c0012108:	83 ec 1c             	sub    esp,0x1c
c001210b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001210f:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0012113:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012117:	e8 42 f2 ff ff       	call   c001135e <Virt::allocateSwapfilePage()>
c001211c:	89 c7                	mov    edi,eax
c001211e:	a1 4c c9 02 c0       	mov    eax,ds:0xc002c94c
c0012123:	85 c0                	test   eax,eax
c0012125:	7e 3d                	jle    c0012164 <VAS::evict(unsigned long)+0x60>
c0012127:	89 ee                	mov    esi,ebp
c0012129:	31 db                	xor    ebx,ebx
c001212b:	83 ec 0c             	sub    esp,0xc
c001212e:	57                   	push   edi
c001212f:	e8 18 f2 ff ff       	call   c001134c <Virt::swapIDToSector(unsigned long)>
c0012134:	89 34 24             	mov    DWORD PTR [esp],esi
c0012137:	01 d8                	add    eax,ebx
c0012139:	6a 01                	push   0x1
c001213b:	31 d2                	xor    edx,edx
c001213d:	43                   	inc    ebx
c001213e:	52                   	push   edx
c001213f:	81 c6 00 02 00 00    	add    esi,0x200
c0012145:	50                   	push   eax
c0012146:	0f be 05 58 c9 02 c0 	movsx  eax,BYTE PTR ds:0xc002c958
c001214d:	ff 34 85 9c de 02 c0 	push   DWORD PTR [eax*4-0x3ffd2164]
c0012154:	e8 31 3f 00 00       	call   c001608a <LogicalDisk::write(unsigned long long, int, void*)>
c0012159:	83 c4 20             	add    esp,0x20
c001215c:	39 1d 4c c9 02 c0    	cmp    DWORD PTR ds:0xc002c94c,ebx
c0012162:	7f c7                	jg     c001212b <VAS::evict(unsigned long)+0x27>
c0012164:	83 ec 08             	sub    esp,0x8
c0012167:	c1 e7 0b             	shl    edi,0xb
c001216a:	55                   	push   ebp
c001216b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001216f:	e8 d0 f4 ff ff       	call   c0011644 <VAS::getPageTableEntry(unsigned long)>
c0012174:	5a                   	pop    edx
c0012175:	89 c6                	mov    esi,eax
c0012177:	59                   	pop    ecx
c0012178:	ff 30                	push   DWORD PTR [eax]
c001217a:	68 5f a5 02 c0       	push   0xc002a55f
c001217f:	e8 45 05 00 00       	call   c00126c9 <Dbg::kprintf(char const*, ...)>
c0012184:	8b 16                	mov    edx,DWORD PTR [esi]
c0012186:	89 d3                	mov    ebx,edx
c0012188:	81 e2 fe 07 00 00    	and    edx,0x7fe
c001218e:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0012194:	09 d7                	or     edi,edx
c0012196:	89 3e                	mov    DWORD PTR [esi],edi
c0012198:	5e                   	pop    esi
c0012199:	58                   	pop    eax
c001219a:	57                   	push   edi
c001219b:	68 78 a5 02 c0       	push   0xc002a578
c00121a0:	e8 24 05 00 00       	call   c00126c9 <Dbg::kprintf(char const*, ...)>
c00121a5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00121a8:	ff 05 08 db 02 c0    	inc    DWORD PTR ds:0xc002db08
c00121ae:	e8 71 d7 ff ff       	call   c000f924 <Phys::freePage(unsigned long)>
c00121b3:	0f 20 d8             	mov    eax,cr3
c00121b6:	0f 22 d8             	mov    cr3,eax
c00121b9:	ff 35 08 db 02 c0    	push   DWORD PTR ds:0xc002db08
c00121bf:	55                   	push   ebp
c00121c0:	53                   	push   ebx
c00121c1:	68 80 a4 02 c0       	push   0xc002a480
c00121c6:	e8 fe 04 00 00       	call   c00126c9 <Dbg::kprintf(char const*, ...)>
c00121cb:	a1 04 db 02 c0       	mov    eax,ds:0xc002db04
c00121d0:	c7 44 24 50 91 a5 02 c0 	mov    DWORD PTR [esp+0x50],0xc002a591
c00121d8:	8d 50 01             	lea    edx,[eax+0x1]
c00121db:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c00121df:	89 15 04 db 02 c0    	mov    DWORD PTR ds:0xc002db04,edx
c00121e5:	83 c4 3c             	add    esp,0x3c
c00121e8:	5b                   	pop    ebx
c00121e9:	5e                   	pop    esi
c00121ea:	5f                   	pop    edi
c00121eb:	5d                   	pop    ebp
c00121ec:	e9 d8 04 00 00       	jmp    c00126c9 <Dbg::kprintf(char const*, ...)>
c00121f1:	90                   	nop

c00121f2 <VAS::tryLoadBackOffDisk(unsigned long)>:
c00121f2:	55                   	push   ebp
c00121f3:	57                   	push   edi
c00121f4:	56                   	push   esi
c00121f5:	53                   	push   ebx
c00121f6:	83 ec 24             	sub    esp,0x24
c00121f9:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c00121fd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012201:	68 a2 a5 02 c0       	push   0xc002a5a2
c0012206:	e8 be 04 00 00       	call   c00126c9 <Dbg::kprintf(char const*, ...)>
c001220b:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c001220f:	58                   	pop    eax
c0012210:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0012216:	5a                   	pop    edx
c0012217:	53                   	push   ebx
c0012218:	56                   	push   esi
c0012219:	e8 26 f4 ff ff       	call   c0011644 <VAS::getPageTableEntry(unsigned long)>
c001221e:	59                   	pop    ecx
c001221f:	89 c5                	mov    ebp,eax
c0012221:	5f                   	pop    edi
c0012222:	ff 30                	push   DWORD PTR [eax]
c0012224:	68 b5 a5 02 c0       	push   0xc002a5b5
c0012229:	e8 9b 04 00 00       	call   c00126c9 <Dbg::kprintf(char const*, ...)>
c001222e:	83 c4 10             	add    esp,0x10
c0012231:	85 db                	test   ebx,ebx
c0012233:	74 1d                	je     c0012252 <VAS::tryLoadBackOffDisk(unsigned long)+0x60>
c0012235:	8b 7d 00             	mov    edi,DWORD PTR [ebp+0x0]
c0012238:	31 c0                	xor    eax,eax
c001223a:	89 fa                	mov    edx,edi
c001223c:	81 e2 01 04 00 00    	and    edx,0x401
c0012242:	81 fa 00 04 00 00    	cmp    edx,0x400
c0012248:	74 12                	je     c001225c <VAS::tryLoadBackOffDisk(unsigned long)+0x6a>
c001224a:	83 c4 1c             	add    esp,0x1c
c001224d:	5b                   	pop    ebx
c001224e:	5e                   	pop    esi
c001224f:	5f                   	pop    edi
c0012250:	5d                   	pop    ebp
c0012251:	c3                   	ret    
c0012252:	83 c4 1c             	add    esp,0x1c
c0012255:	31 c0                	xor    eax,eax
c0012257:	5b                   	pop    ebx
c0012258:	5e                   	pop    esi
c0012259:	5f                   	pop    edi
c001225a:	5d                   	pop    ebp
c001225b:	c3                   	ret    
c001225c:	83 ec 08             	sub    esp,0x8
c001225f:	c1 ef 0b             	shr    edi,0xb
c0012262:	57                   	push   edi
c0012263:	68 c3 a5 02 c0       	push   0xc002a5c3
c0012268:	e8 5c 04 00 00       	call   c00126c9 <Dbg::kprintf(char const*, ...)>
c001226d:	e8 23 d7 ff ff       	call   c000f995 <Phys::allocatePage()>
c0012272:	59                   	pop    ecx
c0012273:	5a                   	pop    edx
c0012274:	50                   	push   eax
c0012275:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0012279:	68 ce a5 02 c0       	push   0xc002a5ce
c001227e:	e8 46 04 00 00       	call   c00126c9 <Dbg::kprintf(char const*, ...)>
c0012283:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012287:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001228a:	81 e2 ff 0f 00 00    	and    edx,0xfff
c0012290:	09 d0                	or     eax,edx
c0012292:	0d 01 08 00 00       	or     eax,0x801
c0012297:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c001229a:	59                   	pop    ecx
c001229b:	5d                   	pop    ebp
c001229c:	50                   	push   eax
c001229d:	68 e3 a5 02 c0       	push   0xc002a5e3
c00122a2:	e8 22 04 00 00       	call   c00126c9 <Dbg::kprintf(char const*, ...)>
c00122a7:	0f 20 d8             	mov    eax,cr3
c00122aa:	83 c4 0c             	add    esp,0xc
c00122ad:	56                   	push   esi
c00122ae:	50                   	push   eax
c00122af:	68 fb a5 02 c0       	push   0xc002a5fb
c00122b4:	e8 10 04 00 00       	call   c00126c9 <Dbg::kprintf(char const*, ...)>
c00122b9:	c7 04 24 13 a6 02 c0 	mov    DWORD PTR [esp],0xc002a613
c00122c0:	e8 04 04 00 00       	call   c00126c9 <Dbg::kprintf(char const*, ...)>
c00122c5:	83 c4 10             	add    esp,0x10
c00122c8:	a1 4c c9 02 c0       	mov    eax,ds:0xc002c94c
c00122cd:	85 c0                	test   eax,eax
c00122cf:	7e 3d                	jle    c001230e <VAS::tryLoadBackOffDisk(unsigned long)+0x11c>
c00122d1:	89 dd                	mov    ebp,ebx
c00122d3:	31 f6                	xor    esi,esi
c00122d5:	83 ec 0c             	sub    esp,0xc
c00122d8:	57                   	push   edi
c00122d9:	e8 6e f0 ff ff       	call   c001134c <Virt::swapIDToSector(unsigned long)>
c00122de:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00122e1:	01 f0                	add    eax,esi
c00122e3:	6a 01                	push   0x1
c00122e5:	31 d2                	xor    edx,edx
c00122e7:	46                   	inc    esi
c00122e8:	52                   	push   edx
c00122e9:	81 c5 00 02 00 00    	add    ebp,0x200
c00122ef:	50                   	push   eax
c00122f0:	0f be 05 58 c9 02 c0 	movsx  eax,BYTE PTR ds:0xc002c958
c00122f7:	ff 34 85 9c de 02 c0 	push   DWORD PTR [eax*4-0x3ffd2164]
c00122fe:	e8 1b 3d 00 00       	call   c001601e <LogicalDisk::read(unsigned long long, int, void*)>
c0012303:	83 c4 20             	add    esp,0x20
c0012306:	39 35 4c c9 02 c0    	cmp    DWORD PTR ds:0xc002c94c,esi
c001230c:	7f c7                	jg     c00122d5 <VAS::tryLoadBackOffDisk(unsigned long)+0xe3>
c001230e:	a1 08 db 02 c0       	mov    eax,ds:0xc002db08
c0012313:	48                   	dec    eax
c0012314:	52                   	push   edx
c0012315:	a3 08 db 02 c0       	mov    ds:0xc002db08,eax
c001231a:	50                   	push   eax
c001231b:	53                   	push   ebx
c001231c:	68 23 a6 02 c0       	push   0xc002a623
c0012321:	e8 a3 03 00 00       	call   c00126c9 <Dbg::kprintf(char const*, ...)>
c0012326:	89 3c 24             	mov    DWORD PTR [esp],edi
c0012329:	e8 00 f0 ff ff       	call   c001132e <Virt::freeSwapfilePage(unsigned long)>
c001232e:	c7 04 24 38 a6 02 c0 	mov    DWORD PTR [esp],0xc002a638
c0012335:	e8 8f 03 00 00       	call   c00126c9 <Dbg::kprintf(char const*, ...)>
c001233a:	a1 c8 0e 03 c0       	mov    eax,ds:0xc0030ec8
c001233f:	83 c4 10             	add    esp,0x10
c0012342:	48                   	dec    eax
c0012343:	a3 c8 0e 03 c0       	mov    ds:0xc0030ec8,eax
c0012348:	85 c0                	test   eax,eax
c001234a:	74 2d                	je     c0012379 <VAS::tryLoadBackOffDisk(unsigned long)+0x187>
c001234c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012350:	25 ff 0f 00 00       	and    eax,0xfff
c0012355:	3d e0 0f 00 00       	cmp    eax,0xfe0
c001235a:	77 20                	ja     c001237c <VAS::tryLoadBackOffDisk(unsigned long)+0x18a>
c001235c:	0f 20 d8             	mov    eax,cr3
c001235f:	0f 22 d8             	mov    cr3,eax
c0012362:	83 ec 0c             	sub    esp,0xc
c0012365:	68 5e a6 02 c0       	push   0xc002a65e
c001236a:	e8 5a 03 00 00       	call   c00126c9 <Dbg::kprintf(char const*, ...)>
c001236f:	83 c4 10             	add    esp,0x10
c0012372:	b0 01                	mov    al,0x1
c0012374:	e9 d1 fe ff ff       	jmp    c001224a <VAS::tryLoadBackOffDisk(unsigned long)+0x58>
c0012379:	fb                   	sti    
c001237a:	eb d0                	jmp    c001234c <VAS::tryLoadBackOffDisk(unsigned long)+0x15a>
c001237c:	83 ec 0c             	sub    esp,0xc
c001237f:	68 4e a6 02 c0       	push   0xc002a64e
c0012384:	e8 40 03 00 00       	call   c00126c9 <Dbg::kprintf(char const*, ...)>
c0012389:	83 c4 10             	add    esp,0x10
c001238c:	eb ce                	jmp    c001235c <VAS::tryLoadBackOffDisk(unsigned long)+0x16a>

c001238e <VAS::scanForEviction()>:
c001238e:	57                   	push   edi
c001238f:	56                   	push   esi
c0012390:	53                   	push   ebx
c0012391:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0012395:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0012398:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c001239e:	75 0e                	jne    c00123ae <VAS::scanForEviction()+0x20>
c00123a0:	89 da                	mov    edx,ebx
c00123a2:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c00123a5:	c1 ea 16             	shr    edx,0x16
c00123a8:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c00123ac:	74 48                	je     c00123f6 <VAS::scanForEviction()+0x68>
c00123ae:	53                   	push   ebx
c00123af:	56                   	push   esi
c00123b0:	e8 8f f2 ff ff       	call   c0011644 <VAS::getPageTableEntry(unsigned long)>
c00123b5:	5a                   	pop    edx
c00123b6:	8b 38                	mov    edi,DWORD PTR [eax]
c00123b8:	59                   	pop    ecx
c00123b9:	89 fa                	mov    edx,edi
c00123bb:	81 e2 00 0c 00 00    	and    edx,0xc00
c00123c1:	81 fa 00 0c 00 00    	cmp    edx,0xc00
c00123c7:	74 3d                	je     c0012406 <VAS::scanForEviction()+0x78>
c00123c9:	81 c3 00 10 00 00    	add    ebx,0x1000
c00123cf:	81 fb ff ff bf ff    	cmp    ebx,0xffbfffff
c00123d5:	76 2a                	jbe    c0012401 <VAS::scanForEviction()+0x73>
c00123d7:	31 db                	xor    ebx,ebx
c00123d9:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c00123e0:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c00123e6:	75 c6                	jne    c00123ae <VAS::scanForEviction()+0x20>
c00123e8:	89 da                	mov    edx,ebx
c00123ea:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c00123ed:	c1 ea 16             	shr    edx,0x16
c00123f0:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c00123f4:	75 b8                	jne    c00123ae <VAS::scanForEviction()+0x20>
c00123f6:	81 c3 00 00 40 00    	add    ebx,0x400000
c00123fc:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c00123ff:	eb 97                	jmp    c0012398 <VAS::scanForEviction()+0xa>
c0012401:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0012404:	eb 92                	jmp    c0012398 <VAS::scanForEviction()+0xa>
c0012406:	f7 c7 01 00 00 00    	test   edi,0x1
c001240c:	74 bb                	je     c00123c9 <VAS::scanForEviction()+0x3b>
c001240e:	f7 c7 20 00 00 00    	test   edi,0x20
c0012414:	74 0a                	je     c0012420 <VAS::scanForEviction()+0x92>
c0012416:	83 e7 df             	and    edi,0xffffffdf
c0012419:	89 38                	mov    DWORD PTR [eax],edi
c001241b:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c001241e:	eb a9                	jmp    c00123c9 <VAS::scanForEviction()+0x3b>
c0012420:	83 ec 08             	sub    esp,0x8
c0012423:	53                   	push   ebx
c0012424:	56                   	push   esi
c0012425:	e8 da fc ff ff       	call   c0012104 <VAS::evict(unsigned long)>
c001242a:	81 46 08 00 10 00 00 	add    DWORD PTR [esi+0x8],0x1000
c0012431:	83 c4 10             	add    esp,0x10
c0012434:	89 f8                	mov    eax,edi
c0012436:	5b                   	pop    ebx
c0012437:	25 00 f0 ff ff       	and    eax,0xfffff000
c001243c:	5e                   	pop    esi
c001243d:	5f                   	pop    edi
c001243e:	c3                   	ret    

c001243f <mapVASFirstTime>:
c001243f:	55                   	push   ebp
c0012440:	57                   	push   edi
c0012441:	56                   	push   esi
c0012442:	53                   	push   ebx
c0012443:	83 ec 0c             	sub    esp,0xc
c0012446:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001244b:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001244e:	4a                   	dec    edx
c001244f:	0f 84 fe 00 00 00    	je     c0012553 <mapVASFirstTime+0x114>
c0012455:	8b 50 40             	mov    edx,DWORD PTR [eax+0x40]
c0012458:	8b 68 3c             	mov    ebp,DWORD PTR [eax+0x3c]
c001245b:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c0012460:	c1 e5 15             	shl    ebp,0x15
c0012463:	bf 00 90 e7 01       	mov    edi,0x1e79000
c0012468:	8b b2 32 05 00 00    	mov    esi,DWORD PTR [edx+0x532]
c001246e:	29 eb                	sub    ebx,ebp
c0012470:	29 ef                	sub    edi,ebp
c0012472:	83 ec 08             	sub    esp,0x8
c0012475:	53                   	push   ebx
c0012476:	68 85 a6 02 c0       	push   0xc002a685
c001247b:	e8 49 02 00 00       	call   c00126c9 <Dbg::kprintf(char const*, ...)>
c0012480:	e8 10 d5 ff ff       	call   c000f995 <Phys::allocatePage()>
c0012485:	c7 04 24 03 04 00 00 	mov    DWORD PTR [esp],0x403
c001248c:	6a 01                	push   0x1
c001248e:	53                   	push   ebx
c001248f:	81 eb 00 10 00 00    	sub    ebx,0x1000
c0012495:	50                   	push   eax
c0012496:	56                   	push   esi
c0012497:	e8 34 f8 ff ff       	call   c0011cd0 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001249c:	83 c4 20             	add    esp,0x20
c001249f:	39 fb                	cmp    ebx,edi
c00124a1:	75 cf                	jne    c0012472 <mapVASFirstTime+0x33>
c00124a3:	bb 00 f0 ff 01       	mov    ebx,0x1fff000
c00124a8:	bf 00 f0 fd 01       	mov    edi,0x1fdf000
c00124ad:	29 eb                	sub    ebx,ebp
c00124af:	29 ef                	sub    edi,ebp
c00124b1:	83 ec 08             	sub    esp,0x8
c00124b4:	53                   	push   ebx
c00124b5:	68 a1 a6 02 c0       	push   0xc002a6a1
c00124ba:	e8 0a 02 00 00       	call   c00126c9 <Dbg::kprintf(char const*, ...)>
c00124bf:	58                   	pop    eax
c00124c0:	80 7e 01 01          	cmp    BYTE PTR [esi+0x1],0x1
c00124c4:	5a                   	pop    edx
c00124c5:	19 c0                	sbb    eax,eax
c00124c7:	83 e0 04             	and    eax,0x4
c00124ca:	05 03 04 00 00       	add    eax,0x403
c00124cf:	50                   	push   eax
c00124d0:	68 ed a5 02 c0       	push   0xc002a5ed
c00124d5:	e8 ef 01 00 00       	call   c00126c9 <Dbg::kprintf(char const*, ...)>
c00124da:	e8 b6 d4 ff ff       	call   c000f995 <Phys::allocatePage()>
c00124df:	59                   	pop    ecx
c00124e0:	89 c5                	mov    ebp,eax
c00124e2:	58                   	pop    eax
c00124e3:	55                   	push   ebp
c00124e4:	68 b5 a6 02 c0       	push   0xc002a6b5
c00124e9:	e8 db 01 00 00       	call   c00126c9 <Dbg::kprintf(char const*, ...)>
c00124ee:	80 7e 01 01          	cmp    BYTE PTR [esi+0x1],0x1
c00124f2:	19 d2                	sbb    edx,edx
c00124f4:	83 e2 04             	and    edx,0x4
c00124f7:	81 c2 03 0c 00 00    	add    edx,0xc03
c00124fd:	89 14 24             	mov    DWORD PTR [esp],edx
c0012500:	6a 01                	push   0x1
c0012502:	53                   	push   ebx
c0012503:	55                   	push   ebp
c0012504:	56                   	push   esi
c0012505:	e8 c6 f7 ff ff       	call   c0011cd0 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001250a:	83 c4 18             	add    esp,0x18
c001250d:	53                   	push   ebx
c001250e:	56                   	push   esi
c001250f:	e8 30 f1 ff ff       	call   c0011644 <VAS::getPageTableEntry(unsigned long)>
c0012514:	5a                   	pop    edx
c0012515:	59                   	pop    ecx
c0012516:	ff 30                	push   DWORD PTR [eax]
c0012518:	68 d1 a6 02 c0       	push   0xc002a6d1
c001251d:	e8 a7 01 00 00       	call   c00126c9 <Dbg::kprintf(char const*, ...)>
c0012522:	0f 20 d8             	mov    eax,cr3
c0012525:	83 c4 0c             	add    esp,0xc
c0012528:	81 eb 00 10 00 00    	sub    ebx,0x1000
c001252e:	56                   	push   esi
c001252f:	50                   	push   eax
c0012530:	68 fb a5 02 c0       	push   0xc002a5fb
c0012535:	e8 8f 01 00 00       	call   c00126c9 <Dbg::kprintf(char const*, ...)>
c001253a:	83 c4 10             	add    esp,0x10
c001253d:	39 df                	cmp    edi,ebx
c001253f:	0f 85 6c ff ff ff    	jne    c00124b1 <mapVASFirstTime+0x72>
c0012545:	0f 20 d8             	mov    eax,cr3
c0012548:	0f 22 d8             	mov    cr3,eax
c001254b:	83 c4 0c             	add    esp,0xc
c001254e:	5b                   	pop    ebx
c001254f:	5e                   	pop    esi
c0012550:	5f                   	pop    edi
c0012551:	5d                   	pop    ebp
c0012552:	c3                   	ret    
c0012553:	83 ec 0c             	sub    esp,0xc
c0012556:	68 6c a6 02 c0       	push   0xc002a66c
c001255b:	e8 69 01 00 00       	call   c00126c9 <Dbg::kprintf(char const*, ...)>
c0012560:	83 c4 10             	add    esp,0x10
c0012563:	83 c4 0c             	add    esp,0xc
c0012566:	5b                   	pop    ebx
c0012567:	5e                   	pop    esi
c0012568:	5f                   	pop    edi
c0012569:	5d                   	pop    ebp
c001256a:	c3                   	ret    

c001256b <__cxa_atexit>:
c001256b:	31 c0                	xor    eax,eax
c001256d:	c3                   	ret    

c001256e <__cxa_finalize>:
c001256e:	c3                   	ret    

c001256f <__stack_chk_fail>:
c001256f:	55                   	push   ebp
c0012570:	89 e5                	mov    ebp,esp
c0012572:	83 ec 14             	sub    esp,0x14
c0012575:	68 dc a6 02 c0       	push   0xc002a6dc
c001257a:	e8 4a 01 00 00       	call   c00126c9 <Dbg::kprintf(char const*, ...)>
c001257f:	58                   	pop    eax
c0012580:	5a                   	pop    edx
c0012581:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0012584:	68 2c a7 02 c0       	push   0xc002a72c
c0012589:	e8 3b 01 00 00       	call   c00126c9 <Dbg::kprintf(char const*, ...)>
c001258e:	59                   	pop    ecx
c001258f:	58                   	pop    eax
c0012590:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012593:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012596:	68 2c a7 02 c0       	push   0xc002a72c
c001259b:	e8 29 01 00 00       	call   c00126c9 <Dbg::kprintf(char const*, ...)>
c00125a0:	5a                   	pop    edx
c00125a1:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00125a4:	59                   	pop    ecx
c00125a5:	8b 00                	mov    eax,DWORD PTR [eax]
c00125a7:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00125aa:	68 2c a7 02 c0       	push   0xc002a72c
c00125af:	e8 15 01 00 00       	call   c00126c9 <Dbg::kprintf(char const*, ...)>
c00125b4:	5a                   	pop    edx
c00125b5:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00125b8:	59                   	pop    ecx
c00125b9:	8b 00                	mov    eax,DWORD PTR [eax]
c00125bb:	8b 00                	mov    eax,DWORD PTR [eax]
c00125bd:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00125c0:	68 2c a7 02 c0       	push   0xc002a72c
c00125c5:	e8 ff 00 00 00       	call   c00126c9 <Dbg::kprintf(char const*, ...)>
c00125ca:	c7 04 24 34 a7 02 c0 	mov    DWORD PTR [esp],0xc002a734
c00125d1:	e8 5f 78 00 00       	call   c0019e35 <Krnl::panic(char const*)>
c00125d6:	83 c4 10             	add    esp,0x10
c00125d9:	c9                   	leave  
c00125da:	c3                   	ret    

c00125db <__cxa_pure_virtual>:
c00125db:	83 ec 18             	sub    esp,0x18
c00125de:	68 4c a7 02 c0       	push   0xc002a74c
c00125e3:	e8 4d 78 00 00       	call   c0019e35 <Krnl::panic(char const*)>
c00125e8:	83 c4 1c             	add    esp,0x1c
c00125eb:	c3                   	ret    

c00125ec <operator new[](unsigned long)>:
c00125ec:	e9 a8 cf ff ff       	jmp    c000f599 <malloc>

c00125f1 <operator delete(void*, unsigned long)>:
c00125f1:	e9 c3 cf ff ff       	jmp    c000f5b9 <rfree>

c00125f6 <operator delete[](void*)>:
c00125f6:	e9 be cf ff ff       	jmp    c000f5b9 <rfree>

c00125fb <operator delete[](void*, unsigned long)>:
c00125fb:	e9 b9 cf ff ff       	jmp    c000f5b9 <rfree>

c0012600 <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c0012600:	55                   	push   ebp
c0012601:	b9 11 00 00 00       	mov    ecx,0x11
c0012606:	57                   	push   edi
c0012607:	56                   	push   esi
c0012608:	be 9a a1 02 c0       	mov    esi,0xc002a19a
c001260d:	53                   	push   ebx
c001260e:	83 ec 20             	sub    esp,0x20
c0012611:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0012615:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0012619:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c001261d:	fc                   	cld    
c001261e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012620:	89 ee                	mov    esi,ebp
c0012622:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0012626:	eb 02                	jmp    c001262a <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x2a>
c0012628:	89 c6                	mov    esi,eax
c001262a:	31 d2                	xor    edx,edx
c001262c:	41                   	inc    ecx
c001262d:	89 f0                	mov    eax,esi
c001262f:	f7 f3                	div    ebx
c0012631:	39 de                	cmp    esi,ebx
c0012633:	73 f3                	jae    c0012628 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x28>
c0012635:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c0012638:	eb 02                	jmp    c001263c <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3c>
c001263a:	89 c5                	mov    ebp,eax
c001263c:	31 d2                	xor    edx,edx
c001263e:	49                   	dec    ecx
c001263f:	89 e8                	mov    eax,ebp
c0012641:	f7 f3                	div    ebx
c0012643:	39 dd                	cmp    ebp,ebx
c0012645:	8a 54 14 0f          	mov    dl,BYTE PTR [esp+edx*1+0xf]
c0012649:	88 11                	mov    BYTE PTR [ecx],dl
c001264b:	73 ed                	jae    c001263a <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3a>
c001264d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0012651:	83 c4 20             	add    esp,0x20
c0012654:	5b                   	pop    ebx
c0012655:	5e                   	pop    esi
c0012656:	5f                   	pop    edi
c0012657:	5d                   	pop    ebp
c0012658:	c3                   	ret    

c0012659 <Dbg::logc(char)>:
c0012659:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001265d:	ba fd 03 00 00       	mov    edx,0x3fd
c0012662:	ec                   	in     al,dx
c0012663:	a8 20                	test   al,0x20
c0012665:	74 fb                	je     c0012662 <Dbg::logc(char)+0x9>
c0012667:	ba f8 03 00 00       	mov    edx,0x3f8
c001266c:	88 c8                	mov    al,cl
c001266e:	ee                   	out    dx,al
c001266f:	c3                   	ret    

c0012670 <Dbg::logs(char*)>:
c0012670:	53                   	push   ebx
c0012671:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0012675:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0012678:	84 c0                	test   al,al
c001267a:	74 0f                	je     c001268b <Dbg::logs(char*)+0x1b>
c001267c:	50                   	push   eax
c001267d:	43                   	inc    ebx
c001267e:	e8 d6 ff ff ff       	call   c0012659 <Dbg::logc(char)>
c0012683:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0012686:	5a                   	pop    edx
c0012687:	84 c0                	test   al,al
c0012689:	75 f1                	jne    c001267c <Dbg::logs(char*)+0xc>
c001268b:	5b                   	pop    ebx
c001268c:	c3                   	ret    

c001268d <Dbg::logWriteInt(unsigned int)>:
c001268d:	83 ec 10             	sub    esp,0x10
c0012690:	6a 0a                	push   0xa
c0012692:	8d 44 24 08          	lea    eax,[esp+0x8]
c0012696:	50                   	push   eax
c0012697:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001269b:	e8 60 ff ff ff       	call   c0012600 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c00126a0:	50                   	push   eax
c00126a1:	e8 ca ff ff ff       	call   c0012670 <Dbg::logs(char*)>
c00126a6:	83 c4 20             	add    esp,0x20
c00126a9:	c3                   	ret    

c00126aa <Dbg::logWriteIntBase(unsigned int, int)>:
c00126aa:	83 ec 10             	sub    esp,0x10
c00126ad:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00126b1:	8d 44 24 08          	lea    eax,[esp+0x8]
c00126b5:	50                   	push   eax
c00126b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00126ba:	e8 41 ff ff ff       	call   c0012600 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c00126bf:	50                   	push   eax
c00126c0:	e8 ab ff ff ff       	call   c0012670 <Dbg::logs(char*)>
c00126c5:	83 c4 20             	add    esp,0x20
c00126c8:	c3                   	ret    

c00126c9 <Dbg::kprintf(char const*, ...)>:
c00126c9:	55                   	push   ebp
c00126ca:	57                   	push   edi
c00126cb:	56                   	push   esi
c00126cc:	53                   	push   ebx
c00126cd:	83 ec 0c             	sub    esp,0xc
c00126d0:	8d 44 24 24          	lea    eax,[esp+0x24]
c00126d4:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00126d8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00126dc:	0f be 06             	movsx  eax,BYTE PTR [esi]
c00126df:	84 c0                	test   al,al
c00126e1:	74 4a                	je     c001272d <Dbg::kprintf(char const*, ...)+0x64>
c00126e3:	31 db                	xor    ebx,ebx
c00126e5:	8d 6b 01             	lea    ebp,[ebx+0x1]
c00126e8:	3c 25                	cmp    al,0x25
c00126ea:	8d 3c 2e             	lea    edi,[esi+ebp*1]
c00126ed:	0f 85 e4 00 00 00    	jne    c00127d7 <Dbg::kprintf(char const*, ...)+0x10e>
c00126f3:	83 c3 02             	add    ebx,0x2
c00126f6:	8a 07                	mov    al,BYTE PTR [edi]
c00126f8:	8d 2c 1e             	lea    ebp,[esi+ebx*1]
c00126fb:	83 e8 25             	sub    eax,0x25
c00126fe:	3c 53                	cmp    al,0x53
c0012700:	0f 87 ba 00 00 00    	ja     c00127c0 <Dbg::kprintf(char const*, ...)+0xf7>
c0012706:	0f b6 c0             	movzx  eax,al
c0012709:	ff 24 85 60 a7 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd58a0]
c0012710:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012714:	89 c8                	mov    eax,ecx
c0012716:	83 c1 04             	add    ecx,0x4
c0012719:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c001271d:	ff 30                	push   DWORD PTR [eax]
c001271f:	e8 69 ff ff ff       	call   c001268d <Dbg::logWriteInt(unsigned int)>
c0012724:	5f                   	pop    edi
c0012725:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c0012729:	84 c0                	test   al,al
c001272b:	75 b8                	jne    c00126e5 <Dbg::kprintf(char const*, ...)+0x1c>
c001272d:	83 c4 0c             	add    esp,0xc
c0012730:	5b                   	pop    ebx
c0012731:	5e                   	pop    esi
c0012732:	5f                   	pop    edi
c0012733:	5d                   	pop    ebp
c0012734:	c3                   	ret    
c0012735:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012739:	89 c8                	mov    eax,ecx
c001273b:	83 c1 04             	add    ecx,0x4
c001273e:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0012742:	ff 30                	push   DWORD PTR [eax]
c0012744:	e8 27 ff ff ff       	call   c0012670 <Dbg::logs(char*)>
c0012749:	58                   	pop    eax
c001274a:	eb d9                	jmp    c0012725 <Dbg::kprintf(char const*, ...)+0x5c>
c001274c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012750:	89 d0                	mov    eax,edx
c0012752:	83 c2 04             	add    edx,0x4
c0012755:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012759:	ff 30                	push   DWORD PTR [eax]
c001275b:	e8 2d ff ff ff       	call   c001268d <Dbg::logWriteInt(unsigned int)>
c0012760:	58                   	pop    eax
c0012761:	eb c2                	jmp    c0012725 <Dbg::kprintf(char const*, ...)+0x5c>
c0012763:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012767:	89 d0                	mov    eax,edx
c0012769:	83 c2 04             	add    edx,0x4
c001276c:	0f be 00             	movsx  eax,BYTE PTR [eax]
c001276f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012773:	50                   	push   eax
c0012774:	e8 e0 fe ff ff       	call   c0012659 <Dbg::logc(char)>
c0012779:	58                   	pop    eax
c001277a:	eb a9                	jmp    c0012725 <Dbg::kprintf(char const*, ...)+0x5c>
c001277c:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012780:	89 c8                	mov    eax,ecx
c0012782:	83 c1 04             	add    ecx,0x4
c0012785:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0012789:	6a 10                	push   0x10
c001278b:	ff 30                	push   DWORD PTR [eax]
c001278d:	e8 18 ff ff ff       	call   c00126aa <Dbg::logWriteIntBase(unsigned int, int)>
c0012792:	59                   	pop    ecx
c0012793:	5f                   	pop    edi
c0012794:	eb 8f                	jmp    c0012725 <Dbg::kprintf(char const*, ...)+0x5c>
c0012796:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001279a:	89 d0                	mov    eax,edx
c001279c:	83 c2 08             	add    edx,0x8
c001279f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00127a3:	6a 10                	push   0x10
c00127a5:	ff 30                	push   DWORD PTR [eax]
c00127a7:	e8 fe fe ff ff       	call   c00126aa <Dbg::logWriteIntBase(unsigned int, int)>
c00127ac:	58                   	pop    eax
c00127ad:	5a                   	pop    edx
c00127ae:	e9 72 ff ff ff       	jmp    c0012725 <Dbg::kprintf(char const*, ...)+0x5c>
c00127b3:	6a 25                	push   0x25
c00127b5:	e8 9f fe ff ff       	call   c0012659 <Dbg::logc(char)>
c00127ba:	58                   	pop    eax
c00127bb:	e9 65 ff ff ff       	jmp    c0012725 <Dbg::kprintf(char const*, ...)+0x5c>
c00127c0:	6a 25                	push   0x25
c00127c2:	e8 92 fe ff ff       	call   c0012659 <Dbg::logc(char)>
c00127c7:	0f be 07             	movsx  eax,BYTE PTR [edi]
c00127ca:	50                   	push   eax
c00127cb:	e8 89 fe ff ff       	call   c0012659 <Dbg::logc(char)>
c00127d0:	5a                   	pop    edx
c00127d1:	59                   	pop    ecx
c00127d2:	e9 4e ff ff ff       	jmp    c0012725 <Dbg::kprintf(char const*, ...)+0x5c>
c00127d7:	50                   	push   eax
c00127d8:	89 eb                	mov    ebx,ebp
c00127da:	e8 7a fe ff ff       	call   c0012659 <Dbg::logc(char)>
c00127df:	89 fd                	mov    ebp,edi
c00127e1:	58                   	pop    eax
c00127e2:	e9 3e ff ff ff       	jmp    c0012725 <Dbg::kprintf(char const*, ...)+0x5c>
c00127e7:	90                   	nop

c00127e8 <File::read(unsigned long long, void*, int*)>:
c00127e8:	53                   	push   ebx
c00127e9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00127ed:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00127f1:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c00127f8:	3c 19                	cmp    al,0x19
c00127fa:	77 35                	ja     c0012831 <File::read(unsigned long long, void*, int*)+0x49>
c00127fc:	8b 04 85 a0 df 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2060]
c0012803:	85 c0                	test   eax,eax
c0012805:	74 2a                	je     c0012831 <File::read(unsigned long long, void*, int*)+0x49>
c0012807:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c001280d:	85 c0                	test   eax,eax
c001280f:	74 20                	je     c0012831 <File::read(unsigned long long, void*, int*)+0x49>
c0012811:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012815:	74 21                	je     c0012838 <File::read(unsigned long long, void*, int*)+0x50>
c0012817:	8b 08                	mov    ecx,DWORD PTR [eax]
c0012819:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001281d:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0012823:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012827:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001282b:	5b                   	pop    ebx
c001282c:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c001282f:	ff e0                	jmp    eax
c0012831:	b8 0b 00 00 00       	mov    eax,0xb
c0012836:	eb 05                	jmp    c001283d <File::read(unsigned long long, void*, int*)+0x55>
c0012838:	b8 05 00 00 00       	mov    eax,0x5
c001283d:	5b                   	pop    ebx
c001283e:	c3                   	ret    
c001283f:	90                   	nop

c0012840 <File::write(unsigned long long, void*, int*)>:
c0012840:	53                   	push   ebx
c0012841:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012845:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012849:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0012850:	3c 19                	cmp    al,0x19
c0012852:	77 35                	ja     c0012889 <File::write(unsigned long long, void*, int*)+0x49>
c0012854:	8b 04 85 a0 df 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2060]
c001285b:	85 c0                	test   eax,eax
c001285d:	74 2a                	je     c0012889 <File::write(unsigned long long, void*, int*)+0x49>
c001285f:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012865:	85 c0                	test   eax,eax
c0012867:	74 20                	je     c0012889 <File::write(unsigned long long, void*, int*)+0x49>
c0012869:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001286d:	74 21                	je     c0012890 <File::write(unsigned long long, void*, int*)+0x50>
c001286f:	8b 08                	mov    ecx,DWORD PTR [eax]
c0012871:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0012875:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c001287b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001287f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012883:	5b                   	pop    ebx
c0012884:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c0012887:	ff e0                	jmp    eax
c0012889:	b8 0b 00 00 00       	mov    eax,0xb
c001288e:	eb 05                	jmp    c0012895 <File::write(unsigned long long, void*, int*)+0x55>
c0012890:	b8 05 00 00 00       	mov    eax,0x5
c0012895:	5b                   	pop    ebx
c0012896:	c3                   	ret    
c0012897:	90                   	nop

c0012898 <Directory::read(unsigned long long, void*, int*)>:
c0012898:	53                   	push   ebx
c0012899:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001289d:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00128a1:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c00128a8:	3c 19                	cmp    al,0x19
c00128aa:	77 35                	ja     c00128e1 <Directory::read(unsigned long long, void*, int*)+0x49>
c00128ac:	8b 04 85 a0 df 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2060]
c00128b3:	85 c0                	test   eax,eax
c00128b5:	74 2a                	je     c00128e1 <Directory::read(unsigned long long, void*, int*)+0x49>
c00128b7:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c00128bd:	85 c0                	test   eax,eax
c00128bf:	74 20                	je     c00128e1 <Directory::read(unsigned long long, void*, int*)+0x49>
c00128c1:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00128c5:	74 21                	je     c00128e8 <Directory::read(unsigned long long, void*, int*)+0x50>
c00128c7:	8b 08                	mov    ecx,DWORD PTR [eax]
c00128c9:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00128cd:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c00128d3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00128d7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00128db:	5b                   	pop    ebx
c00128dc:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c00128df:	ff e0                	jmp    eax
c00128e1:	b8 0b 00 00 00       	mov    eax,0xb
c00128e6:	eb 05                	jmp    c00128ed <Directory::read(unsigned long long, void*, int*)+0x55>
c00128e8:	b8 05 00 00 00       	mov    eax,0x5
c00128ed:	5b                   	pop    ebx
c00128ee:	c3                   	ret    
c00128ef:	90                   	nop

c00128f0 <Directory::write(unsigned long long, void*, int*)>:
c00128f0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00128f4:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c00128fb:	b8 0b 00 00 00       	mov    eax,0xb
c0012900:	80 fa 19             	cmp    dl,0x19
c0012903:	77 18                	ja     c001291d <Directory::write(unsigned long long, void*, int*)+0x2d>
c0012905:	8b 14 95 a0 df 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2060]
c001290c:	85 d2                	test   edx,edx
c001290e:	74 0d                	je     c001291d <Directory::write(unsigned long long, void*, int*)+0x2d>
c0012910:	83 ba 70 01 00 00 01 	cmp    DWORD PTR [edx+0x170],0x1
c0012917:	19 c0                	sbb    eax,eax
c0012919:	83 e0 0a             	and    eax,0xa
c001291c:	40                   	inc    eax
c001291d:	c3                   	ret    

c001291e <File::isAtty()>:
c001291e:	31 c0                	xor    eax,eax
c0012920:	c3                   	ret    
c0012921:	90                   	nop

c0012922 <Directory::isAtty()>:
c0012922:	31 c0                	xor    eax,eax
c0012924:	c3                   	ret    
c0012925:	90                   	nop

c0012926 <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0012926:	b8 0a 00 00 00       	mov    eax,0xa
c001292b:	c3                   	ret    

c001292c <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c001292c:	b8 0a 00 00 00       	mov    eax,0xa
c0012931:	c3                   	ret    

c0012932 <Filesystem::getFileFirstSector(char const*)>:
c0012932:	31 c0                	xor    eax,eax
c0012934:	31 d2                	xor    edx,edx
c0012936:	c3                   	ret    
c0012937:	90                   	nop

c0012938 <File::~File()>:
c0012938:	83 ec 0c             	sub    esp,0xc
c001293b:	ba 20 a9 02 c0       	mov    edx,0xc002a920
c0012940:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012944:	89 10                	mov    DWORD PTR [eax],edx
c0012946:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001294a:	83 ec 0c             	sub    esp,0xc
c001294d:	50                   	push   eax
c001294e:	e8 69 e6 ff ff       	call   c0010fbc <UnixFile::~UnixFile()>
c0012953:	83 c4 10             	add    esp,0x10
c0012956:	90                   	nop
c0012957:	83 c4 0c             	add    esp,0xc
c001295a:	c3                   	ret    
c001295b:	90                   	nop

c001295c <File::~File()>:
c001295c:	83 ec 0c             	sub    esp,0xc
c001295f:	83 ec 0c             	sub    esp,0xc
c0012962:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012966:	e8 cd ff ff ff       	call   c0012938 <File::~File()>
c001296b:	83 c4 10             	add    esp,0x10
c001296e:	83 ec 08             	sub    esp,0x8
c0012971:	68 14 01 00 00       	push   0x114
c0012976:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001297a:	e8 72 fc ff ff       	call   c00125f1 <operator delete(void*, unsigned long)>
c001297f:	83 c4 10             	add    esp,0x10
c0012982:	83 c4 0c             	add    esp,0xc
c0012985:	c3                   	ret    

c0012986 <Directory::~Directory()>:
c0012986:	83 ec 0c             	sub    esp,0xc
c0012989:	ba 3c a9 02 c0       	mov    edx,0xc002a93c
c001298e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012992:	89 10                	mov    DWORD PTR [eax],edx
c0012994:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012998:	83 ec 0c             	sub    esp,0xc
c001299b:	50                   	push   eax
c001299c:	e8 1b e6 ff ff       	call   c0010fbc <UnixFile::~UnixFile()>
c00129a1:	83 c4 10             	add    esp,0x10
c00129a4:	90                   	nop
c00129a5:	83 c4 0c             	add    esp,0xc
c00129a8:	c3                   	ret    
c00129a9:	90                   	nop

c00129aa <Directory::~Directory()>:
c00129aa:	83 ec 0c             	sub    esp,0xc
c00129ad:	83 ec 0c             	sub    esp,0xc
c00129b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00129b4:	e8 cd ff ff ff       	call   c0012986 <Directory::~Directory()>
c00129b9:	83 c4 10             	add    esp,0x10
c00129bc:	83 ec 08             	sub    esp,0x8
c00129bf:	68 14 01 00 00       	push   0x114
c00129c4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00129c8:	e8 24 fc ff ff       	call   c00125f1 <operator delete(void*, unsigned long)>
c00129cd:	83 c4 10             	add    esp,0x10
c00129d0:	83 c4 0c             	add    esp,0xc
c00129d3:	c3                   	ret    

c00129d4 <Filesystem::Filesystem()>:
c00129d4:	ba b8 a8 02 c0       	mov    edx,0xc002a8b8
c00129d9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00129dd:	89 10                	mov    DWORD PTR [eax],edx
c00129df:	8b 15 14 db 02 c0    	mov    edx,DWORD PTR ds:0xc002db14
c00129e5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00129e9:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00129ec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00129f0:	a3 14 db 02 c0       	mov    ds:0xc002db14,eax
c00129f5:	90                   	nop
c00129f6:	c3                   	ret    
c00129f7:	90                   	nop

c00129f8 <Filesystem::~Filesystem()>:
c00129f8:	ba b8 a8 02 c0       	mov    edx,0xc002a8b8
c00129fd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012a01:	89 10                	mov    DWORD PTR [eax],edx
c0012a03:	90                   	nop
c0012a04:	c3                   	ret    
c0012a05:	90                   	nop

c0012a06 <Filesystem::~Filesystem()>:
c0012a06:	83 ec 0c             	sub    esp,0xc
c0012a09:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0012a0d:	e8 e6 ff ff ff       	call   c00129f8 <Filesystem::~Filesystem()>
c0012a12:	83 c4 04             	add    esp,0x4
c0012a15:	83 ec 08             	sub    esp,0x8
c0012a18:	6a 08                	push   0x8
c0012a1a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012a1e:	e8 ce fb ff ff       	call   c00125f1 <operator delete(void*, unsigned long)>
c0012a23:	83 c4 10             	add    esp,0x10
c0012a26:	83 c4 0c             	add    esp,0xc
c0012a29:	c3                   	ret    

c0012a2a <Fs::getcwd(Process*, char*, int)>:
c0012a2a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012a2e:	31 c0                	xor    eax,eax
c0012a30:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0012a33:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0012a37:	7d 15                	jge    c0012a4e <Fs::getcwd(Process*, char*, int)+0x24>
c0012a39:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012a3d:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c0012a44:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c0012a47:	84 c9                	test   cl,cl
c0012a49:	74 06                	je     c0012a51 <Fs::getcwd(Process*, char*, int)+0x27>
c0012a4b:	40                   	inc    eax
c0012a4c:	eb e2                	jmp    c0012a30 <Fs::getcwd(Process*, char*, int)+0x6>
c0012a4e:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c0012a51:	31 c0                	xor    eax,eax
c0012a53:	c3                   	ret    

c0012a54 <Fs::initVFS()>:
c0012a54:	83 ec 18             	sub    esp,0x18
c0012a57:	6a 08                	push   0x8
c0012a59:	e8 3b cb ff ff       	call   c000f599 <malloc>
c0012a5e:	89 04 24             	mov    DWORD PTR [esp],eax
c0012a61:	e8 d2 de 00 00       	call   c0020938 <FAT::FAT()>
c0012a66:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0012a6d:	e8 27 cb ff ff       	call   c000f599 <malloc>
c0012a72:	89 04 24             	mov    DWORD PTR [esp],eax
c0012a75:	e8 ca f0 00 00       	call   c0021b44 <ISO9660::ISO9660()>
c0012a7a:	83 c4 1c             	add    esp,0x1c
c0012a7d:	c3                   	ret    

c0012a7e <Fs::standardiseFiles(char*, char const*, char const*)>:
c0012a7e:	55                   	push   ebp
c0012a7f:	57                   	push   edi
c0012a80:	56                   	push   esi
c0012a81:	53                   	push   ebx
c0012a82:	81 ec 10 04 00 00    	sub    esp,0x410
c0012a88:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c0012a8f:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c0012a96:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c0012a9d:	68 00 04 00 00       	push   0x400
c0012aa2:	6a 00                	push   0x0
c0012aa4:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0012aa8:	56                   	push   esi
c0012aa9:	e8 a2 dc fe ff       	call   c0000750 <memset>
c0012aae:	83 c4 10             	add    esp,0x10
c0012ab1:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c0012ab5:	75 0b                	jne    c0012ac2 <Fs::standardiseFiles(char*, char const*, char const*)+0x44>
c0012ab7:	50                   	push   eax
c0012ab8:	50                   	push   eax
c0012ab9:	57                   	push   edi
c0012aba:	56                   	push   esi
c0012abb:	e8 4c dd fe ff       	call   c000080c <strcpy>
c0012ac0:	eb 41                	jmp    c0012b03 <Fs::standardiseFiles(char*, char const*, char const*)+0x85>
c0012ac2:	8a 07                	mov    al,BYTE PTR [edi]
c0012ac4:	3c 5c                	cmp    al,0x5c
c0012ac6:	74 04                	je     c0012acc <Fs::standardiseFiles(char*, char const*, char const*)+0x4e>
c0012ac8:	3c 2f                	cmp    al,0x2f
c0012aca:	75 18                	jne    c0012ae4 <Fs::standardiseFiles(char*, char const*, char const*)+0x66>
c0012acc:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0012acf:	3c 60                	cmp    al,0x60
c0012ad1:	7e 03                	jle    c0012ad6 <Fs::standardiseFiles(char*, char const*, char const*)+0x58>
c0012ad3:	83 e8 20             	sub    eax,0x20
c0012ad6:	88 04 24             	mov    BYTE PTR [esp],al
c0012ad9:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c0012ae0:	50                   	push   eax
c0012ae1:	50                   	push   eax
c0012ae2:	eb 18                	jmp    c0012afc <Fs::standardiseFiles(char*, char const*, char const*)+0x7e>
c0012ae4:	50                   	push   eax
c0012ae5:	50                   	push   eax
c0012ae6:	55                   	push   ebp
c0012ae7:	56                   	push   esi
c0012ae8:	e8 1f dd fe ff       	call   c000080c <strcpy>
c0012aed:	5a                   	pop    edx
c0012aee:	59                   	pop    ecx
c0012aef:	68 aa bb 02 c0       	push   0xc002bbaa
c0012af4:	56                   	push   esi
c0012af5:	e8 52 de fe ff       	call   c000094c <strcat>
c0012afa:	5d                   	pop    ebp
c0012afb:	58                   	pop    eax
c0012afc:	57                   	push   edi
c0012afd:	56                   	push   esi
c0012afe:	e8 49 de fe ff       	call   c000094c <strcat>
c0012b03:	83 c4 10             	add    esp,0x10
c0012b06:	8a 04 24             	mov    al,BYTE PTR [esp]
c0012b09:	3c 60                	cmp    al,0x60
c0012b0b:	7e 03                	jle    c0012b10 <Fs::standardiseFiles(char*, char const*, char const*)+0x92>
c0012b0d:	83 e8 20             	sub    eax,0x20
c0012b10:	88 04 24             	mov    BYTE PTR [esp],al
c0012b13:	88 03                	mov    BYTE PTR [ebx],al
c0012b15:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c0012b1c:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c0012b22:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c0012b26:	bf 03 00 00 00       	mov    edi,0x3
c0012b2b:	b8 03 00 00 00       	mov    eax,0x3
c0012b30:	8a 14 3c             	mov    dl,BYTE PTR [esp+edi*1]
c0012b33:	84 d2                	test   dl,dl
c0012b35:	0f 84 91 00 00 00    	je     c0012bcc <Fs::standardiseFiles(char*, char const*, char const*)+0x14e>
c0012b3b:	8d 4f 01             	lea    ecx,[edi+0x1]
c0012b3e:	80 fa 5c             	cmp    dl,0x5c
c0012b41:	74 05                	je     c0012b48 <Fs::standardiseFiles(char*, char const*, char const*)+0xca>
c0012b43:	80 fa 2f             	cmp    dl,0x2f
c0012b46:	75 12                	jne    c0012b5a <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c0012b48:	89 c5                	mov    ebp,eax
c0012b4a:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c0012b4f:	74 09                	je     c0012b5a <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c0012b51:	40                   	inc    eax
c0012b52:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c0012b56:	89 cf                	mov    edi,ecx
c0012b58:	eb d6                	jmp    c0012b30 <Fs::standardiseFiles(char*, char const*, char const*)+0xb2>
c0012b5a:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c0012b5f:	75 5b                	jne    c0012bbc <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c0012b61:	80 fa 2e             	cmp    dl,0x2e
c0012b64:	75 56                	jne    c0012bbc <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c0012b66:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c0012b6a:	74 19                	je     c0012b85 <Fs::standardiseFiles(char*, char const*, char const*)+0x107>
c0012b6c:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c0012b71:	74 53                	je     c0012bc6 <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c0012b73:	89 f9                	mov    ecx,edi
c0012b75:	41                   	inc    ecx
c0012b76:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c0012b79:	80 fa 2f             	cmp    dl,0x2f
c0012b7c:	74 f7                	je     c0012b75 <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c0012b7e:	80 fa 5c             	cmp    dl,0x5c
c0012b81:	74 f2                	je     c0012b75 <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c0012b83:	eb d1                	jmp    c0012b56 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012b85:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c0012b8a:	74 3a                	je     c0012bc6 <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c0012b8c:	83 f8 03             	cmp    eax,0x3
c0012b8f:	74 c5                	je     c0012b56 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012b91:	41                   	inc    ecx
c0012b92:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c0012b95:	80 fa 2f             	cmp    dl,0x2f
c0012b98:	74 f7                	je     c0012b91 <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c0012b9a:	80 fa 5c             	cmp    dl,0x5c
c0012b9d:	74 f2                	je     c0012b91 <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c0012b9f:	48                   	dec    eax
c0012ba0:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0012ba4:	75 06                	jne    c0012bac <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c0012ba6:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0012baa:	eb f3                	jmp    c0012b9f <Fs::standardiseFiles(char*, char const*, char const*)+0x121>
c0012bac:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0012bb0:	74 07                	je     c0012bb9 <Fs::standardiseFiles(char*, char const*, char const*)+0x13b>
c0012bb2:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0012bb6:	48                   	dec    eax
c0012bb7:	eb f3                	jmp    c0012bac <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c0012bb9:	40                   	inc    eax
c0012bba:	eb 9a                	jmp    c0012b56 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012bbc:	80 fa 2f             	cmp    dl,0x2f
c0012bbf:	74 95                	je     c0012b56 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012bc1:	80 fa 5c             	cmp    dl,0x5c
c0012bc4:	74 90                	je     c0012b56 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012bc6:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c0012bc9:	40                   	inc    eax
c0012bca:	eb 8a                	jmp    c0012b56 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012bcc:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0012bd0:	83 ec 0c             	sub    esp,0xc
c0012bd3:	53                   	push   ebx
c0012bd4:	e8 93 db fe ff       	call   c000076c <strlen>
c0012bd9:	83 c4 10             	add    esp,0x10
c0012bdc:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c0012be1:	75 26                	jne    c0012c09 <Fs::standardiseFiles(char*, char const*, char const*)+0x18b>
c0012be3:	83 ec 0c             	sub    esp,0xc
c0012be6:	53                   	push   ebx
c0012be7:	e8 80 db fe ff       	call   c000076c <strlen>
c0012bec:	83 c4 10             	add    esp,0x10
c0012bef:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c0012bf4:	74 26                	je     c0012c1c <Fs::standardiseFiles(char*, char const*, char const*)+0x19e>
c0012bf6:	83 ec 0c             	sub    esp,0xc
c0012bf9:	53                   	push   ebx
c0012bfa:	e8 6d db fe ff       	call   c000076c <strlen>
c0012bff:	83 c4 10             	add    esp,0x10
c0012c02:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c0012c07:	eb c7                	jmp    c0012bd0 <Fs::standardiseFiles(char*, char const*, char const*)+0x152>
c0012c09:	83 ec 0c             	sub    esp,0xc
c0012c0c:	53                   	push   ebx
c0012c0d:	e8 5a db fe ff       	call   c000076c <strlen>
c0012c12:	83 c4 10             	add    esp,0x10
c0012c15:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c0012c1a:	74 c7                	je     c0012be3 <Fs::standardiseFiles(char*, char const*, char const*)+0x165>
c0012c1c:	81 c4 0c 04 00 00    	add    esp,0x40c
c0012c22:	5b                   	pop    ebx
c0012c23:	5e                   	pop    esi
c0012c24:	5f                   	pop    edi
c0012c25:	5d                   	pop    ebp
c0012c26:	c3                   	ret    
c0012c27:	90                   	nop

c0012c28 <File::File(char const*, Process*)>:
c0012c28:	83 ec 0c             	sub    esp,0xc
c0012c2b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012c2f:	83 ec 08             	sub    esp,0x8
c0012c32:	6a 00                	push   0x0
c0012c34:	50                   	push   eax
c0012c35:	e8 a0 e1 ff ff       	call   c0010dda <UnixFile::UnixFile(int)>
c0012c3a:	83 c4 10             	add    esp,0x10
c0012c3d:	ba 20 a9 02 c0       	mov    edx,0xc002a920
c0012c42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012c46:	89 10                	mov    DWORD PTR [eax],edx
c0012c48:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012c4c:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0012c52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012c56:	83 c0 0d             	add    eax,0xd
c0012c59:	83 ec 04             	sub    esp,0x4
c0012c5c:	52                   	push   edx
c0012c5d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012c61:	50                   	push   eax
c0012c62:	e8 17 fe ff ff       	call   c0012a7e <Fs::standardiseFiles(char*, char const*, char const*)>
c0012c67:	83 c4 10             	add    esp,0x10
c0012c6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012c6e:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c0012c71:	8d 50 bf             	lea    edx,[eax-0x41]
c0012c74:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012c78:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c0012c7e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012c82:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c0012c86:	90                   	nop
c0012c87:	83 c4 0c             	add    esp,0xc
c0012c8a:	c3                   	ret    
c0012c8b:	90                   	nop

c0012c8c <File::open(FileOpenMode)>:
c0012c8c:	53                   	push   ebx
c0012c8d:	b8 0b 00 00 00       	mov    eax,0xb
c0012c92:	83 ec 08             	sub    esp,0x8
c0012c95:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012c99:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c0012ca0:	80 fa 19             	cmp    dl,0x19
c0012ca3:	77 40                	ja     c0012ce5 <File::open(FileOpenMode)+0x59>
c0012ca5:	8b 14 95 a0 df 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2060]
c0012cac:	85 d2                	test   edx,edx
c0012cae:	74 35                	je     c0012ce5 <File::open(FileOpenMode)+0x59>
c0012cb0:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0012cb6:	85 d2                	test   edx,edx
c0012cb8:	74 2b                	je     c0012ce5 <File::open(FileOpenMode)+0x59>
c0012cba:	b8 06 00 00 00       	mov    eax,0x6
c0012cbf:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c0012cc3:	75 20                	jne    c0012ce5 <File::open(FileOpenMode)+0x59>
c0012cc5:	8b 02                	mov    eax,DWORD PTR [edx]
c0012cc7:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c0012ccd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012cd1:	51                   	push   ecx
c0012cd2:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c0012cd5:	51                   	push   ecx
c0012cd6:	52                   	push   edx
c0012cd7:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0012cda:	83 c4 10             	add    esp,0x10
c0012cdd:	85 c0                	test   eax,eax
c0012cdf:	75 04                	jne    c0012ce5 <File::open(FileOpenMode)+0x59>
c0012ce1:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c0012ce5:	83 c4 08             	add    esp,0x8
c0012ce8:	5b                   	pop    ebx
c0012ce9:	c3                   	ret    

c0012cea <File::close()>:
c0012cea:	53                   	push   ebx
c0012ceb:	b8 0b 00 00 00       	mov    eax,0xb
c0012cf0:	83 ec 08             	sub    esp,0x8
c0012cf3:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0012cf7:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0012cfe:	80 fa 19             	cmp    dl,0x19
c0012d01:	77 41                	ja     c0012d44 <File::close()+0x5a>
c0012d03:	8b 1c 95 a0 df 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd2060]
c0012d0a:	85 db                	test   ebx,ebx
c0012d0c:	74 36                	je     c0012d44 <File::close()+0x5a>
c0012d0e:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c0012d15:	74 2d                	je     c0012d44 <File::close()+0x5a>
c0012d17:	b8 05 00 00 00       	mov    eax,0x5
c0012d1c:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0012d20:	74 22                	je     c0012d44 <File::close()+0x5a>
c0012d22:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c0012d26:	8b 04 95 a0 df 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd2060]
c0012d2d:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012d33:	53                   	push   ebx
c0012d34:	53                   	push   ebx
c0012d35:	8b 10                	mov    edx,DWORD PTR [eax]
c0012d37:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0012d3d:	50                   	push   eax
c0012d3e:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c0012d41:	83 c4 10             	add    esp,0x10
c0012d44:	83 c4 08             	add    esp,0x8
c0012d47:	5b                   	pop    ebx
c0012d48:	c3                   	ret    
c0012d49:	90                   	nop

c0012d4a <File::seek(unsigned long long)>:
c0012d4a:	56                   	push   esi
c0012d4b:	53                   	push   ebx
c0012d4c:	b8 0b 00 00 00       	mov    eax,0xb
c0012d51:	51                   	push   ecx
c0012d52:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0012d56:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0012d5a:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c0012d61:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0012d65:	80 fa 19             	cmp    dl,0x19
c0012d68:	77 31                	ja     c0012d9b <File::seek(unsigned long long)+0x51>
c0012d6a:	8b 14 95 a0 df 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2060]
c0012d71:	85 d2                	test   edx,edx
c0012d73:	74 26                	je     c0012d9b <File::seek(unsigned long long)+0x51>
c0012d75:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0012d7b:	85 d2                	test   edx,edx
c0012d7d:	74 1c                	je     c0012d9b <File::seek(unsigned long long)+0x51>
c0012d7f:	b8 05 00 00 00       	mov    eax,0x5
c0012d84:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c0012d88:	74 11                	je     c0012d9b <File::seek(unsigned long long)+0x51>
c0012d8a:	8b 02                	mov    eax,DWORD PTR [edx]
c0012d8c:	53                   	push   ebx
c0012d8d:	51                   	push   ecx
c0012d8e:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c0012d94:	52                   	push   edx
c0012d95:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0012d98:	83 c4 10             	add    esp,0x10
c0012d9b:	5a                   	pop    edx
c0012d9c:	5b                   	pop    ebx
c0012d9d:	5e                   	pop    esi
c0012d9e:	c3                   	ret    
c0012d9f:	90                   	nop

c0012da0 <File::tell(unsigned long long*)>:
c0012da0:	83 ec 0c             	sub    esp,0xc
c0012da3:	b8 0b 00 00 00       	mov    eax,0xb
c0012da8:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0012dac:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0012db3:	80 fa 19             	cmp    dl,0x19
c0012db6:	77 34                	ja     c0012dec <File::tell(unsigned long long*)+0x4c>
c0012db8:	8b 14 95 a0 df 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2060]
c0012dbf:	85 d2                	test   edx,edx
c0012dc1:	74 29                	je     c0012dec <File::tell(unsigned long long*)+0x4c>
c0012dc3:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0012dc9:	85 d2                	test   edx,edx
c0012dcb:	74 1f                	je     c0012dec <File::tell(unsigned long long*)+0x4c>
c0012dcd:	b8 05 00 00 00       	mov    eax,0x5
c0012dd2:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0012dd6:	74 14                	je     c0012dec <File::tell(unsigned long long*)+0x4c>
c0012dd8:	50                   	push   eax
c0012dd9:	8b 02                	mov    eax,DWORD PTR [edx]
c0012ddb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012ddf:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0012de5:	52                   	push   edx
c0012de6:	ff 50 28             	call   DWORD PTR [eax+0x28]
c0012de9:	83 c4 10             	add    esp,0x10
c0012dec:	83 c4 0c             	add    esp,0xc
c0012def:	c3                   	ret    

c0012df0 <File::rewind()>:
c0012df0:	83 ec 10             	sub    esp,0x10
c0012df3:	6a 00                	push   0x0
c0012df5:	6a 00                	push   0x0
c0012df7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012dfb:	e8 4a ff ff ff       	call   c0012d4a <File::seek(unsigned long long)>
c0012e00:	83 c4 1c             	add    esp,0x1c
c0012e03:	c3                   	ret    

c0012e04 <File::unlink()>:
c0012e04:	83 ec 0c             	sub    esp,0xc
c0012e07:	b8 0b 00 00 00       	mov    eax,0xb
c0012e0c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012e10:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012e17:	80 f9 19             	cmp    cl,0x19
c0012e1a:	77 2f                	ja     c0012e4b <File::unlink()+0x47>
c0012e1c:	8b 0c 8d a0 df 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd2060]
c0012e23:	85 c9                	test   ecx,ecx
c0012e25:	74 24                	je     c0012e4b <File::unlink()+0x47>
c0012e27:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012e2d:	85 c9                	test   ecx,ecx
c0012e2f:	74 1a                	je     c0012e4b <File::unlink()+0x47>
c0012e31:	b8 06 00 00 00       	mov    eax,0x6
c0012e36:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012e3a:	75 0f                	jne    c0012e4b <File::unlink()+0x47>
c0012e3c:	83 c2 0d             	add    edx,0xd
c0012e3f:	50                   	push   eax
c0012e40:	50                   	push   eax
c0012e41:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012e43:	52                   	push   edx
c0012e44:	51                   	push   ecx
c0012e45:	ff 50 38             	call   DWORD PTR [eax+0x38]
c0012e48:	83 c4 10             	add    esp,0x10
c0012e4b:	83 c4 0c             	add    esp,0xc
c0012e4e:	c3                   	ret    
c0012e4f:	90                   	nop

c0012e50 <File::rename(char const*)>:
c0012e50:	83 ec 0c             	sub    esp,0xc
c0012e53:	b8 0b 00 00 00       	mov    eax,0xb
c0012e58:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012e5c:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012e63:	80 f9 19             	cmp    cl,0x19
c0012e66:	77 32                	ja     c0012e9a <File::rename(char const*)+0x4a>
c0012e68:	8b 0c 8d a0 df 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd2060]
c0012e6f:	85 c9                	test   ecx,ecx
c0012e71:	74 27                	je     c0012e9a <File::rename(char const*)+0x4a>
c0012e73:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012e79:	85 c9                	test   ecx,ecx
c0012e7b:	74 1d                	je     c0012e9a <File::rename(char const*)+0x4a>
c0012e7d:	b8 06 00 00 00       	mov    eax,0x6
c0012e82:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012e86:	75 12                	jne    c0012e9a <File::rename(char const*)+0x4a>
c0012e88:	83 c2 0d             	add    edx,0xd
c0012e8b:	50                   	push   eax
c0012e8c:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012e8e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012e92:	52                   	push   edx
c0012e93:	51                   	push   ecx
c0012e94:	ff 50 40             	call   DWORD PTR [eax+0x40]
c0012e97:	83 c4 10             	add    esp,0x10
c0012e9a:	83 c4 0c             	add    esp,0xc
c0012e9d:	c3                   	ret    

c0012e9e <File::chfatattr(unsigned char, unsigned char)>:
c0012e9e:	57                   	push   edi
c0012e9f:	b8 0b 00 00 00       	mov    eax,0xb
c0012ea4:	56                   	push   esi
c0012ea5:	53                   	push   ebx
c0012ea6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012eaa:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0012eae:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012eb5:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0012eb9:	80 f9 19             	cmp    cl,0x19
c0012ebc:	77 37                	ja     c0012ef5 <File::chfatattr(unsigned char, unsigned char)+0x57>
c0012ebe:	8b 0c 8d a0 df 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd2060]
c0012ec5:	85 c9                	test   ecx,ecx
c0012ec7:	74 2c                	je     c0012ef5 <File::chfatattr(unsigned char, unsigned char)+0x57>
c0012ec9:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012ecf:	85 c9                	test   ecx,ecx
c0012ed1:	74 22                	je     c0012ef5 <File::chfatattr(unsigned char, unsigned char)+0x57>
c0012ed3:	b8 06 00 00 00       	mov    eax,0x6
c0012ed8:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012edc:	75 17                	jne    c0012ef5 <File::chfatattr(unsigned char, unsigned char)+0x57>
c0012ede:	8b 39                	mov    edi,DWORD PTR [ecx]
c0012ee0:	89 f0                	mov    eax,esi
c0012ee2:	83 c2 0d             	add    edx,0xd
c0012ee5:	0f b6 f0             	movzx  esi,al
c0012ee8:	0f b6 db             	movzx  ebx,bl
c0012eeb:	56                   	push   esi
c0012eec:	53                   	push   ebx
c0012eed:	52                   	push   edx
c0012eee:	51                   	push   ecx
c0012eef:	ff 57 34             	call   DWORD PTR [edi+0x34]
c0012ef2:	83 c4 10             	add    esp,0x10
c0012ef5:	5b                   	pop    ebx
c0012ef6:	5e                   	pop    esi
c0012ef7:	5f                   	pop    edi
c0012ef8:	c3                   	ret    
c0012ef9:	90                   	nop

c0012efa <File::exists()>:
c0012efa:	83 ec 0c             	sub    esp,0xc
c0012efd:	31 c0                	xor    eax,eax
c0012eff:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012f03:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012f0a:	80 f9 19             	cmp    cl,0x19
c0012f0d:	77 24                	ja     c0012f33 <File::exists()+0x39>
c0012f0f:	8b 0c 8d a0 df 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd2060]
c0012f16:	85 c9                	test   ecx,ecx
c0012f18:	74 19                	je     c0012f33 <File::exists()+0x39>
c0012f1a:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012f20:	85 c9                	test   ecx,ecx
c0012f22:	74 0f                	je     c0012f33 <File::exists()+0x39>
c0012f24:	83 c2 0d             	add    edx,0xd
c0012f27:	50                   	push   eax
c0012f28:	50                   	push   eax
c0012f29:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012f2b:	52                   	push   edx
c0012f2c:	51                   	push   ecx
c0012f2d:	ff 50 44             	call   DWORD PTR [eax+0x44]
c0012f30:	83 c4 10             	add    esp,0x10
c0012f33:	83 c4 0c             	add    esp,0xc
c0012f36:	c3                   	ret    
c0012f37:	90                   	nop

c0012f38 <File::stat(unsigned long long*, bool*)>:
c0012f38:	56                   	push   esi
c0012f39:	53                   	push   ebx
c0012f3a:	50                   	push   eax
c0012f3b:	b8 0b 00 00 00       	mov    eax,0xb
c0012f40:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012f44:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0012f48:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012f4f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0012f53:	80 f9 19             	cmp    cl,0x19
c0012f56:	77 3d                	ja     c0012f95 <File::stat(unsigned long long*, bool*)+0x5d>
c0012f58:	8b 0c 8d a0 df 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd2060]
c0012f5f:	85 c9                	test   ecx,ecx
c0012f61:	74 32                	je     c0012f95 <File::stat(unsigned long long*, bool*)+0x5d>
c0012f63:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012f69:	85 c9                	test   ecx,ecx
c0012f6b:	74 28                	je     c0012f95 <File::stat(unsigned long long*, bool*)+0x5d>
c0012f6d:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012f6f:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012f73:	74 13                	je     c0012f88 <File::stat(unsigned long long*, bool*)+0x50>
c0012f75:	83 ec 04             	sub    esp,0x4
c0012f78:	56                   	push   esi
c0012f79:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c0012f7f:	51                   	push   ecx
c0012f80:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c0012f83:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0012f86:	eb 0a                	jmp    c0012f92 <File::stat(unsigned long long*, bool*)+0x5a>
c0012f88:	53                   	push   ebx
c0012f89:	83 c2 0d             	add    edx,0xd
c0012f8c:	56                   	push   esi
c0012f8d:	52                   	push   edx
c0012f8e:	51                   	push   ecx
c0012f8f:	ff 50 30             	call   DWORD PTR [eax+0x30]
c0012f92:	83 c4 10             	add    esp,0x10
c0012f95:	5a                   	pop    edx
c0012f96:	5b                   	pop    ebx
c0012f97:	5e                   	pop    esi
c0012f98:	c3                   	ret    

c0012f99 <Fs::setcwd(Process*, char*)>:
c0012f99:	55                   	push   ebp
c0012f9a:	57                   	push   edi
c0012f9b:	56                   	push   esi
c0012f9c:	53                   	push   ebx
c0012f9d:	81 ec 20 02 00 00    	sub    esp,0x220
c0012fa3:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c0012faa:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c0012fb0:	57                   	push   edi
c0012fb1:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0012fb8:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c0012fbc:	56                   	push   esi
c0012fbd:	e8 bc fa ff ff       	call   c0012a7e <Fs::standardiseFiles(char*, char const*, char const*)>
c0012fc2:	89 34 24             	mov    DWORD PTR [esp],esi
c0012fc5:	e8 a2 d7 fe ff       	call   c000076c <strlen>
c0012fca:	83 c4 10             	add    esp,0x10
c0012fcd:	83 f8 02             	cmp    eax,0x2
c0012fd0:	77 17                	ja     c0012fe9 <Fs::setcwd(Process*, char*)+0x50>
c0012fd2:	0f be 44 24 10       	movsx  eax,BYTE PTR [esp+0x10]
c0012fd7:	83 e8 41             	sub    eax,0x41
c0012fda:	83 f8 19             	cmp    eax,0x19
c0012fdd:	76 24                	jbe    c0013003 <Fs::setcwd(Process*, char*)+0x6a>
c0012fdf:	b8 03 00 00 00       	mov    eax,0x3
c0012fe4:	e9 e0 00 00 00       	jmp    c00130c9 <Fs::setcwd(Process*, char*)+0x130>
c0012fe9:	83 ec 0c             	sub    esp,0xc
c0012fec:	56                   	push   esi
c0012fed:	e8 7a d7 fe ff       	call   c000076c <strlen>
c0012ff2:	83 c4 10             	add    esp,0x10
c0012ff5:	83 f8 03             	cmp    eax,0x3
c0012ff8:	75 34                	jne    c001302e <Fs::setcwd(Process*, char*)+0x95>
c0012ffa:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c0012fff:	75 2d                	jne    c001302e <Fs::setcwd(Process*, char*)+0x95>
c0013001:	eb cf                	jmp    c0012fd2 <Fs::setcwd(Process*, char*)+0x39>
c0013003:	8b 14 85 a0 df 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd2060]
c001300a:	b8 05 00 00 00       	mov    eax,0x5
c001300f:	85 d2                	test   edx,edx
c0013011:	0f 84 b2 00 00 00    	je     c00130c9 <Fs::setcwd(Process*, char*)+0x130>
c0013017:	b8 06 00 00 00       	mov    eax,0x6
c001301c:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c0013023:	0f 85 92 00 00 00    	jne    c00130bb <Fs::setcwd(Process*, char*)+0x122>
c0013029:	e9 9b 00 00 00       	jmp    c00130c9 <Fs::setcwd(Process*, char*)+0x130>
c001302e:	83 ec 0c             	sub    esp,0xc
c0013031:	68 14 01 00 00       	push   0x114
c0013036:	e8 5e c5 ff ff       	call   c000f599 <malloc>
c001303b:	83 c4 0c             	add    esp,0xc
c001303e:	89 c3                	mov    ebx,eax
c0013040:	55                   	push   ebp
c0013041:	56                   	push   esi
c0013042:	50                   	push   eax
c0013043:	e8 e0 fb ff ff       	call   c0012c28 <File::File(char const*, Process*)>
c0013048:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c001304d:	83 c4 0c             	add    esp,0xc
c0013050:	8d 44 24 0b          	lea    eax,[esp+0xb]
c0013054:	50                   	push   eax
c0013055:	8d 44 24 10          	lea    eax,[esp+0x10]
c0013059:	50                   	push   eax
c001305a:	53                   	push   ebx
c001305b:	e8 d8 fe ff ff       	call   c0012f38 <File::stat(unsigned long long*, bool*)>
c0013060:	83 c4 10             	add    esp,0x10
c0013063:	83 f8 02             	cmp    eax,0x2
c0013066:	74 04                	je     c001306c <Fs::setcwd(Process*, char*)+0xd3>
c0013068:	85 c0                	test   eax,eax
c001306a:	74 1c                	je     c0013088 <Fs::setcwd(Process*, char*)+0xef>
c001306c:	b8 01 00 00 00       	mov    eax,0x1
c0013071:	85 db                	test   ebx,ebx
c0013073:	74 54                	je     c00130c9 <Fs::setcwd(Process*, char*)+0x130>
c0013075:	83 ec 0c             	sub    esp,0xc
c0013078:	8b 03                	mov    eax,DWORD PTR [ebx]
c001307a:	53                   	push   ebx
c001307b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001307e:	83 c4 10             	add    esp,0x10
c0013081:	b8 01 00 00 00       	mov    eax,0x1
c0013086:	eb 41                	jmp    c00130c9 <Fs::setcwd(Process*, char*)+0x130>
c0013088:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c001308d:	75 1c                	jne    c00130ab <Fs::setcwd(Process*, char*)+0x112>
c001308f:	b8 02 00 00 00       	mov    eax,0x2
c0013094:	85 db                	test   ebx,ebx
c0013096:	74 31                	je     c00130c9 <Fs::setcwd(Process*, char*)+0x130>
c0013098:	83 ec 0c             	sub    esp,0xc
c001309b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001309d:	53                   	push   ebx
c001309e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00130a1:	83 c4 10             	add    esp,0x10
c00130a4:	b8 02 00 00 00       	mov    eax,0x2
c00130a9:	eb 1e                	jmp    c00130c9 <Fs::setcwd(Process*, char*)+0x130>
c00130ab:	85 db                	test   ebx,ebx
c00130ad:	74 0c                	je     c00130bb <Fs::setcwd(Process*, char*)+0x122>
c00130af:	83 ec 0c             	sub    esp,0xc
c00130b2:	8b 03                	mov    eax,DWORD PTR [ebx]
c00130b4:	53                   	push   ebx
c00130b5:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00130b8:	83 c4 10             	add    esp,0x10
c00130bb:	50                   	push   eax
c00130bc:	50                   	push   eax
c00130bd:	56                   	push   esi
c00130be:	57                   	push   edi
c00130bf:	e8 48 d7 fe ff       	call   c000080c <strcpy>
c00130c4:	83 c4 10             	add    esp,0x10
c00130c7:	31 c0                	xor    eax,eax
c00130c9:	81 c4 1c 02 00 00    	add    esp,0x21c
c00130cf:	5b                   	pop    ebx
c00130d0:	5e                   	pop    esi
c00130d1:	5f                   	pop    edi
c00130d2:	5d                   	pop    ebp
c00130d3:	c3                   	ret    

c00130d4 <Directory::Directory(char const*, Process*)>:
c00130d4:	83 ec 0c             	sub    esp,0xc
c00130d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00130db:	83 ec 08             	sub    esp,0x8
c00130de:	6a 00                	push   0x0
c00130e0:	50                   	push   eax
c00130e1:	e8 f4 dc ff ff       	call   c0010dda <UnixFile::UnixFile(int)>
c00130e6:	83 c4 10             	add    esp,0x10
c00130e9:	ba 3c a9 02 c0       	mov    edx,0xc002a93c
c00130ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00130f2:	89 10                	mov    DWORD PTR [eax],edx
c00130f4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00130f8:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c00130fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013102:	83 c0 0d             	add    eax,0xd
c0013105:	83 ec 04             	sub    esp,0x4
c0013108:	52                   	push   edx
c0013109:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001310d:	50                   	push   eax
c001310e:	e8 6b f9 ff ff       	call   c0012a7e <Fs::standardiseFiles(char*, char const*, char const*)>
c0013113:	83 c4 10             	add    esp,0x10
c0013116:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001311a:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c001311d:	8d 50 bf             	lea    edx,[eax-0x41]
c0013120:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013124:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c001312a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001312e:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c0013132:	90                   	nop
c0013133:	83 c4 0c             	add    esp,0xc
c0013136:	c3                   	ret    
c0013137:	90                   	nop

c0013138 <Directory::open()>:
c0013138:	53                   	push   ebx
c0013139:	b8 0b 00 00 00       	mov    eax,0xb
c001313e:	83 ec 08             	sub    esp,0x8
c0013141:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013145:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c001314c:	80 fa 19             	cmp    dl,0x19
c001314f:	77 3d                	ja     c001318e <Directory::open()+0x56>
c0013151:	8b 14 95 a0 df 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2060]
c0013158:	85 d2                	test   edx,edx
c001315a:	74 32                	je     c001318e <Directory::open()+0x56>
c001315c:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0013162:	85 d2                	test   edx,edx
c0013164:	74 28                	je     c001318e <Directory::open()+0x56>
c0013166:	b8 06 00 00 00       	mov    eax,0x6
c001316b:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c001316f:	75 1d                	jne    c001318e <Directory::open()+0x56>
c0013171:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c0013177:	50                   	push   eax
c0013178:	8b 02                	mov    eax,DWORD PTR [edx]
c001317a:	51                   	push   ecx
c001317b:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c001317e:	51                   	push   ecx
c001317f:	52                   	push   edx
c0013180:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c0013183:	83 c4 10             	add    esp,0x10
c0013186:	85 c0                	test   eax,eax
c0013188:	75 04                	jne    c001318e <Directory::open()+0x56>
c001318a:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c001318e:	83 c4 08             	add    esp,0x8
c0013191:	5b                   	pop    ebx
c0013192:	c3                   	ret    
c0013193:	90                   	nop

c0013194 <Directory::close()>:
c0013194:	53                   	push   ebx
c0013195:	b8 0b 00 00 00       	mov    eax,0xb
c001319a:	83 ec 08             	sub    esp,0x8
c001319d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00131a1:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c00131a8:	80 fa 19             	cmp    dl,0x19
c00131ab:	77 41                	ja     c00131ee <Directory::close()+0x5a>
c00131ad:	8b 1c 95 a0 df 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd2060]
c00131b4:	85 db                	test   ebx,ebx
c00131b6:	74 36                	je     c00131ee <Directory::close()+0x5a>
c00131b8:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c00131bf:	74 2d                	je     c00131ee <Directory::close()+0x5a>
c00131c1:	b8 05 00 00 00       	mov    eax,0x5
c00131c6:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c00131ca:	74 22                	je     c00131ee <Directory::close()+0x5a>
c00131cc:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c00131d0:	8b 04 95 a0 df 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd2060]
c00131d7:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c00131dd:	53                   	push   ebx
c00131de:	53                   	push   ebx
c00131df:	8b 10                	mov    edx,DWORD PTR [eax]
c00131e1:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c00131e7:	50                   	push   eax
c00131e8:	ff 52 20             	call   DWORD PTR [edx+0x20]
c00131eb:	83 c4 10             	add    esp,0x10
c00131ee:	83 c4 08             	add    esp,0x8
c00131f1:	5b                   	pop    ebx
c00131f2:	c3                   	ret    
c00131f3:	90                   	nop

c00131f4 <Directory::unlink()>:
c00131f4:	83 ec 0c             	sub    esp,0xc
c00131f7:	b8 0b 00 00 00       	mov    eax,0xb
c00131fc:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013200:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013207:	80 f9 19             	cmp    cl,0x19
c001320a:	77 2f                	ja     c001323b <Directory::unlink()+0x47>
c001320c:	8b 0c 8d a0 df 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd2060]
c0013213:	85 c9                	test   ecx,ecx
c0013215:	74 24                	je     c001323b <Directory::unlink()+0x47>
c0013217:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c001321d:	85 c9                	test   ecx,ecx
c001321f:	74 1a                	je     c001323b <Directory::unlink()+0x47>
c0013221:	b8 06 00 00 00       	mov    eax,0x6
c0013226:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001322a:	75 0f                	jne    c001323b <Directory::unlink()+0x47>
c001322c:	83 c2 0d             	add    edx,0xd
c001322f:	50                   	push   eax
c0013230:	50                   	push   eax
c0013231:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013233:	52                   	push   edx
c0013234:	51                   	push   ecx
c0013235:	ff 50 38             	call   DWORD PTR [eax+0x38]
c0013238:	83 c4 10             	add    esp,0x10
c001323b:	83 c4 0c             	add    esp,0xc
c001323e:	c3                   	ret    
c001323f:	90                   	nop

c0013240 <Directory::rename(char const*)>:
c0013240:	83 ec 0c             	sub    esp,0xc
c0013243:	b8 0b 00 00 00       	mov    eax,0xb
c0013248:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001324c:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013253:	80 f9 19             	cmp    cl,0x19
c0013256:	77 32                	ja     c001328a <Directory::rename(char const*)+0x4a>
c0013258:	8b 0c 8d a0 df 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd2060]
c001325f:	85 c9                	test   ecx,ecx
c0013261:	74 27                	je     c001328a <Directory::rename(char const*)+0x4a>
c0013263:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013269:	85 c9                	test   ecx,ecx
c001326b:	74 1d                	je     c001328a <Directory::rename(char const*)+0x4a>
c001326d:	b8 06 00 00 00       	mov    eax,0x6
c0013272:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013276:	75 12                	jne    c001328a <Directory::rename(char const*)+0x4a>
c0013278:	83 c2 0d             	add    edx,0xd
c001327b:	50                   	push   eax
c001327c:	8b 01                	mov    eax,DWORD PTR [ecx]
c001327e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013282:	52                   	push   edx
c0013283:	51                   	push   ecx
c0013284:	ff 50 40             	call   DWORD PTR [eax+0x40]
c0013287:	83 c4 10             	add    esp,0x10
c001328a:	83 c4 0c             	add    esp,0xc
c001328d:	c3                   	ret    

c001328e <Directory::exists()>:
c001328e:	83 ec 0c             	sub    esp,0xc
c0013291:	31 c0                	xor    eax,eax
c0013293:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013297:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001329e:	80 f9 19             	cmp    cl,0x19
c00132a1:	77 24                	ja     c00132c7 <Directory::exists()+0x39>
c00132a3:	8b 0c 8d a0 df 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd2060]
c00132aa:	85 c9                	test   ecx,ecx
c00132ac:	74 19                	je     c00132c7 <Directory::exists()+0x39>
c00132ae:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00132b4:	85 c9                	test   ecx,ecx
c00132b6:	74 0f                	je     c00132c7 <Directory::exists()+0x39>
c00132b8:	83 c2 0d             	add    edx,0xd
c00132bb:	50                   	push   eax
c00132bc:	50                   	push   eax
c00132bd:	8b 01                	mov    eax,DWORD PTR [ecx]
c00132bf:	52                   	push   edx
c00132c0:	51                   	push   ecx
c00132c1:	ff 50 44             	call   DWORD PTR [eax+0x44]
c00132c4:	83 c4 10             	add    esp,0x10
c00132c7:	83 c4 0c             	add    esp,0xc
c00132ca:	c3                   	ret    
c00132cb:	90                   	nop

c00132cc <Directory::read(dirent*)>:
c00132cc:	83 ec 1c             	sub    esp,0x1c
c00132cf:	b8 0b 00 00 00       	mov    eax,0xb
c00132d4:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00132d8:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c00132df:	80 fa 19             	cmp    dl,0x19
c00132e2:	77 30                	ja     c0013314 <Directory::read(dirent*)+0x48>
c00132e4:	8b 14 95 a0 df 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2060]
c00132eb:	85 d2                	test   edx,edx
c00132ed:	74 25                	je     c0013314 <Directory::read(dirent*)+0x48>
c00132ef:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c00132f6:	74 1c                	je     c0013314 <Directory::read(dirent*)+0x48>
c00132f8:	83 ec 0c             	sub    esp,0xc
c00132fb:	8b 01                	mov    eax,DWORD PTR [ecx]
c00132fd:	8d 54 24 18          	lea    edx,[esp+0x18]
c0013301:	52                   	push   edx
c0013302:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0013306:	6a 00                	push   0x0
c0013308:	68 10 01 00 00       	push   0x110
c001330d:	51                   	push   ecx
c001330e:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013311:	83 c4 20             	add    esp,0x20
c0013314:	83 c4 1c             	add    esp,0x1c
c0013317:	c3                   	ret    

c0013318 <Directory::create()>:
c0013318:	83 ec 0c             	sub    esp,0xc
c001331b:	b8 0b 00 00 00       	mov    eax,0xb
c0013320:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013324:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001332b:	80 f9 19             	cmp    cl,0x19
c001332e:	77 2f                	ja     c001335f <Directory::create()+0x47>
c0013330:	8b 0c 8d a0 df 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd2060]
c0013337:	85 c9                	test   ecx,ecx
c0013339:	74 24                	je     c001335f <Directory::create()+0x47>
c001333b:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013341:	85 c9                	test   ecx,ecx
c0013343:	74 1a                	je     c001335f <Directory::create()+0x47>
c0013345:	b8 06 00 00 00       	mov    eax,0x6
c001334a:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001334e:	75 0f                	jne    c001335f <Directory::create()+0x47>
c0013350:	83 c2 0d             	add    edx,0xd
c0013353:	50                   	push   eax
c0013354:	50                   	push   eax
c0013355:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013357:	52                   	push   edx
c0013358:	51                   	push   ecx
c0013359:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c001335c:	83 c4 10             	add    esp,0x10
c001335f:	83 c4 0c             	add    esp,0xc
c0013362:	c3                   	ret    
c0013363:	90                   	nop

c0013364 <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c0013364:	b8 0a 00 00 00       	mov    eax,0xa
c0013369:	c3                   	ret    

c001336a <Bus::Bus(char const*)>:
c001336a:	83 ec 0c             	sub    esp,0xc
c001336d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013371:	83 ec 08             	sub    esp,0x8
c0013374:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013378:	50                   	push   eax
c0013379:	e8 88 09 00 00       	call   c0013d06 <Device::Device(char const*)>
c001337e:	83 c4 10             	add    esp,0x10
c0013381:	ba 58 a9 02 c0       	mov    edx,0xc002a958
c0013386:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001338a:	89 10                	mov    DWORD PTR [eax],edx
c001338c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013390:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c001339a:	90                   	nop
c001339b:	83 c4 0c             	add    esp,0xc
c001339e:	c3                   	ret    
c001339f:	90                   	nop

c00133a0 <Bus::~Bus()>:
c00133a0:	83 ec 0c             	sub    esp,0xc
c00133a3:	ba 58 a9 02 c0       	mov    edx,0xc002a958
c00133a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00133ac:	89 10                	mov    DWORD PTR [eax],edx
c00133ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00133b2:	83 ec 0c             	sub    esp,0xc
c00133b5:	50                   	push   eax
c00133b6:	e8 15 06 00 00       	call   c00139d0 <Device::~Device()>
c00133bb:	83 c4 10             	add    esp,0x10
c00133be:	90                   	nop
c00133bf:	83 c4 0c             	add    esp,0xc
c00133c2:	c3                   	ret    
c00133c3:	90                   	nop

c00133c4 <Bus::~Bus()>:
c00133c4:	83 ec 0c             	sub    esp,0xc
c00133c7:	83 ec 0c             	sub    esp,0xc
c00133ca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00133ce:	e8 cd ff ff ff       	call   c00133a0 <Bus::~Bus()>
c00133d3:	83 c4 10             	add    esp,0x10
c00133d6:	83 ec 08             	sub    esp,0x8
c00133d9:	68 58 01 00 00       	push   0x158
c00133de:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00133e2:	e8 0a f2 ff ff       	call   c00125f1 <operator delete(void*, unsigned long)>
c00133e7:	83 c4 10             	add    esp,0x10
c00133ea:	83 c4 0c             	add    esp,0xc
c00133ed:	c3                   	ret    

c00133ee <Buzzer::Buzzer(char const*)>:
c00133ee:	83 ec 0c             	sub    esp,0xc
c00133f1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00133f5:	83 ec 08             	sub    esp,0x8
c00133f8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00133fc:	50                   	push   eax
c00133fd:	e8 04 09 00 00       	call   c0013d06 <Device::Device(char const*)>
c0013402:	83 c4 10             	add    esp,0x10
c0013405:	ba 84 a9 02 c0       	mov    edx,0xc002a984
c001340a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001340e:	89 10                	mov    DWORD PTR [eax],edx
c0013410:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013414:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c001341e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013422:	c7 80 10 01 00 00 0c 00 00 00 	mov    DWORD PTR [eax+0x110],0xc
c001342c:	90                   	nop
c001342d:	83 c4 0c             	add    esp,0xc
c0013430:	c3                   	ret    
c0013431:	90                   	nop

c0013432 <Buzzer::~Buzzer()>:
c0013432:	83 ec 0c             	sub    esp,0xc
c0013435:	ba 84 a9 02 c0       	mov    edx,0xc002a984
c001343a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001343e:	89 10                	mov    DWORD PTR [eax],edx
c0013440:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013444:	83 ec 0c             	sub    esp,0xc
c0013447:	50                   	push   eax
c0013448:	e8 83 05 00 00       	call   c00139d0 <Device::~Device()>
c001344d:	83 c4 10             	add    esp,0x10
c0013450:	90                   	nop
c0013451:	83 c4 0c             	add    esp,0xc
c0013454:	c3                   	ret    
c0013455:	90                   	nop

c0013456 <Buzzer::~Buzzer()>:
c0013456:	83 ec 0c             	sub    esp,0xc
c0013459:	83 ec 0c             	sub    esp,0xc
c001345c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013460:	e8 cd ff ff ff       	call   c0013432 <Buzzer::~Buzzer()>
c0013465:	83 c4 10             	add    esp,0x10
c0013468:	83 ec 08             	sub    esp,0x8
c001346b:	68 5c 01 00 00       	push   0x15c
c0013470:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013474:	e8 78 f1 ff ff       	call   c00125f1 <operator delete(void*, unsigned long)>
c0013479:	83 c4 10             	add    esp,0x10
c001347c:	83 c4 0c             	add    esp,0xc
c001347f:	c3                   	ret    

c0013480 <Buzzer::stop()>:
c0013480:	83 ec 14             	sub    esp,0x14
c0013483:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013487:	8b 10                	mov    edx,DWORD PTR [eax]
c0013489:	6a 00                	push   0x0
c001348b:	50                   	push   eax
c001348c:	ff 52 24             	call   DWORD PTR [edx+0x24]
c001348f:	83 c4 1c             	add    esp,0x1c
c0013492:	c3                   	ret    

c0013493 <beepThread(void*)>:
c0013493:	53                   	push   ebx
c0013494:	83 ec 08             	sub    esp,0x8
c0013497:	a1 c8 0e 03 c0       	mov    eax,ds:0xc0030ec8
c001349c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00134a0:	48                   	dec    eax
c00134a1:	a3 c8 0e 03 c0       	mov    ds:0xc0030ec8,eax
c00134a6:	75 01                	jne    c00134a9 <beepThread(void*)+0x16>
c00134a8:	fb                   	sti    
c00134a9:	50                   	push   eax
c00134aa:	50                   	push   eax
c00134ab:	b8 40 42 0f 00       	mov    eax,0xf4240
c00134b0:	f7 ab 58 01 00 00    	imul   DWORD PTR [ebx+0x158]
c00134b6:	52                   	push   edx
c00134b7:	50                   	push   eax
c00134b8:	e8 e2 a7 00 00       	call   c001dc9f <nanoSleep(unsigned long long)>
c00134bd:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00134c0:	e8 bb ff ff ff       	call   c0013480 <Buzzer::stop()>
c00134c5:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c00134cd:	83 c4 18             	add    esp,0x18
c00134d0:	5b                   	pop    ebx
c00134d1:	e9 c5 a6 00 00       	jmp    c001db9b <blockTask(TaskState)>

c00134d6 <Buzzer::beep(int, int, bool)>:
c00134d6:	57                   	push   edi
c00134d7:	56                   	push   esi
c00134d8:	53                   	push   ebx
c00134d9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00134dd:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00134e1:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00134e5:	52                   	push   edx
c00134e6:	52                   	push   edx
c00134e7:	8b 06                	mov    eax,DWORD PTR [esi]
c00134e9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00134ed:	56                   	push   esi
c00134ee:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00134f1:	83 c4 10             	add    esp,0x10
c00134f4:	89 f8                	mov    eax,edi
c00134f6:	84 c0                	test   al,al
c00134f8:	74 1f                	je     c0013519 <Buzzer::beep(int, int, bool)+0x43>
c00134fa:	50                   	push   eax
c00134fb:	50                   	push   eax
c00134fc:	69 c3 40 42 0f 00    	imul   eax,ebx,0xf4240
c0013502:	99                   	cdq    
c0013503:	52                   	push   edx
c0013504:	50                   	push   eax
c0013505:	e8 95 a7 00 00       	call   c001dc9f <nanoSleep(unsigned long long)>
c001350a:	83 c4 10             	add    esp,0x10
c001350d:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0013511:	5b                   	pop    ebx
c0013512:	5e                   	pop    esi
c0013513:	5f                   	pop    edi
c0013514:	e9 67 ff ff ff       	jmp    c0013480 <Buzzer::stop()>
c0013519:	89 9e 58 01 00 00    	mov    DWORD PTR [esi+0x158],ebx
c001351f:	a1 f0 0e 03 c0       	mov    eax,ds:0xc0030ef0
c0013524:	c7 44 24 1c e6 00 00 00 	mov    DWORD PTR [esp+0x1c],0xe6
c001352c:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c0013530:	c7 44 24 14 93 34 01 c0 	mov    DWORD PTR [esp+0x14],0xc0013493
c0013538:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001353c:	5b                   	pop    ebx
c001353d:	5e                   	pop    esi
c001353e:	5f                   	pop    edi
c001353f:	e9 5c a2 00 00       	jmp    c001d7a0 <Process::createThread(void (*)(void*), void*, int)>

c0013544 <User::loadClockSettings(int)>:
c0013544:	53                   	push   ebx
c0013545:	83 ec 14             	sub    esp,0x14
c0013548:	68 14 01 00 00       	push   0x114
c001354d:	e8 47 c0 ff ff       	call   c000f599 <malloc>
c0013552:	83 c4 0c             	add    esp,0xc
c0013555:	89 c3                	mov    ebx,eax
c0013557:	ff 35 f0 0e 03 c0    	push   DWORD PTR ds:0xc0030ef0
c001355d:	68 ac a9 02 c0       	push   0xc002a9ac
c0013562:	50                   	push   eax
c0013563:	e8 c0 f6 ff ff       	call   c0012c28 <File::File(char const*, Process*)>
c0013568:	58                   	pop    eax
c0013569:	5a                   	pop    edx
c001356a:	6a 01                	push   0x1
c001356c:	53                   	push   ebx
c001356d:	e8 1a f7 ff ff       	call   c0012c8c <File::open(FileOpenMode)>
c0013572:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013575:	e8 70 f7 ff ff       	call   c0012cea <File::close()>
c001357a:	83 c4 10             	add    esp,0x10
c001357d:	85 db                	test   ebx,ebx
c001357f:	74 0f                	je     c0013590 <User::loadClockSettings(int)+0x4c>
c0013581:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013583:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0013587:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001358a:	83 c4 08             	add    esp,0x8
c001358d:	5b                   	pop    ebx
c001358e:	ff e0                	jmp    eax
c0013590:	83 c4 08             	add    esp,0x8
c0013593:	5b                   	pop    ebx
c0013594:	c3                   	ret    
c0013595:	90                   	nop

c0013596 <Clock::Clock(char const*)>:
c0013596:	83 ec 0c             	sub    esp,0xc
c0013599:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001359d:	83 ec 08             	sub    esp,0x8
c00135a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00135a4:	50                   	push   eax
c00135a5:	e8 5c 07 00 00       	call   c0013d06 <Device::Device(char const*)>
c00135aa:	83 c4 10             	add    esp,0x10
c00135ad:	ba d4 a9 02 c0       	mov    edx,0xc002a9d4
c00135b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00135b6:	89 10                	mov    DWORD PTR [eax],edx
c00135b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00135bc:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c00135c6:	90                   	nop
c00135c7:	83 c4 0c             	add    esp,0xc
c00135ca:	c3                   	ret    
c00135cb:	90                   	nop

c00135cc <Clock::~Clock()>:
c00135cc:	83 ec 0c             	sub    esp,0xc
c00135cf:	ba d4 a9 02 c0       	mov    edx,0xc002a9d4
c00135d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00135d8:	89 10                	mov    DWORD PTR [eax],edx
c00135da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00135de:	83 ec 0c             	sub    esp,0xc
c00135e1:	50                   	push   eax
c00135e2:	e8 e9 03 00 00       	call   c00139d0 <Device::~Device()>
c00135e7:	83 c4 10             	add    esp,0x10
c00135ea:	90                   	nop
c00135eb:	83 c4 0c             	add    esp,0xc
c00135ee:	c3                   	ret    
c00135ef:	90                   	nop

c00135f0 <Clock::~Clock()>:
c00135f0:	83 ec 0c             	sub    esp,0xc
c00135f3:	83 ec 0c             	sub    esp,0xc
c00135f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00135fa:	e8 cd ff ff ff       	call   c00135cc <Clock::~Clock()>
c00135ff:	83 c4 10             	add    esp,0x10
c0013602:	83 ec 08             	sub    esp,0x8
c0013605:	68 58 01 00 00       	push   0x158
c001360a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001360e:	e8 de ef ff ff       	call   c00125f1 <operator delete(void*, unsigned long)>
c0013613:	83 c4 10             	add    esp,0x10
c0013616:	83 c4 0c             	add    esp,0xc
c0013619:	c3                   	ret    

c001361a <Clock::timeInSecondsLocal()>:
c001361a:	53                   	push   ebx
c001361b:	83 ec 14             	sub    esp,0x14
c001361e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013622:	8b 10                	mov    edx,DWORD PTR [eax]
c0013624:	50                   	push   eax
c0013625:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0013628:	0f b6 0d 1c db 02 c0 	movzx  ecx,BYTE PTR ds:0xc002db1c
c001362f:	03 0d 20 db 02 c0    	add    ecx,DWORD PTR ds:0xc002db20
c0013635:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c001363b:	89 cb                	mov    ebx,ecx
c001363d:	c1 fb 1f             	sar    ebx,0x1f
c0013640:	01 c8                	add    eax,ecx
c0013642:	11 da                	adc    edx,ebx
c0013644:	83 c4 10             	add    esp,0x10
c0013647:	31 c9                	xor    ecx,ecx
c0013649:	80 3d 1d db 02 c0 00 	cmp    BYTE PTR ds:0xc002db1d,0x0
c0013650:	74 05                	je     c0013657 <Clock::timeInSecondsLocal()+0x3d>
c0013652:	b9 08 07 00 00       	mov    ecx,0x708
c0013657:	31 db                	xor    ebx,ebx
c0013659:	01 c8                	add    eax,ecx
c001365b:	11 da                	adc    edx,ebx
c001365d:	83 c4 08             	add    esp,0x8
c0013660:	5b                   	pop    ebx
c0013661:	c3                   	ret    

c0013662 <Clock::setTimeInSecondsLocal(unsigned long long)>:
c0013662:	57                   	push   edi
c0013663:	56                   	push   esi
c0013664:	53                   	push   ebx
c0013665:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0013669:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001366d:	8b 01                	mov    eax,DWORD PTR [ecx]
c001366f:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0013673:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c0013676:	0f b6 05 1c db 02 c0 	movzx  eax,BYTE PTR ds:0xc002db1c
c001367d:	03 05 20 db 02 c0    	add    eax,DWORD PTR ds:0xc002db20
c0013683:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c0013689:	99                   	cdq    
c001368a:	29 c6                	sub    esi,eax
c001368c:	19 d7                	sbb    edi,edx
c001368e:	89 f0                	mov    eax,esi
c0013690:	89 fa                	mov    edx,edi
c0013692:	31 f6                	xor    esi,esi
c0013694:	80 3d 1d db 02 c0 00 	cmp    BYTE PTR ds:0xc002db1d,0x0
c001369b:	74 05                	je     c00136a2 <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c001369d:	be 08 07 00 00       	mov    esi,0x708
c00136a2:	31 ff                	xor    edi,edi
c00136a4:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c00136a8:	29 f0                	sub    eax,esi
c00136aa:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00136ae:	19 fa                	sbb    edx,edi
c00136b0:	89 d8                	mov    eax,ebx
c00136b2:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00136b6:	5b                   	pop    ebx
c00136b7:	5e                   	pop    esi
c00136b8:	5f                   	pop    edi
c00136b9:	ff e0                	jmp    eax

c00136bb <datetimeToSeconds(datetime_t)>:
c00136bb:	55                   	push   ebp
c00136bc:	57                   	push   edi
c00136bd:	56                   	push   esi
c00136be:	53                   	push   ebx
c00136bf:	83 ec 14             	sub    esp,0x14
c00136c2:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00136c6:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c00136ca:	89 d3                	mov    ebx,edx
c00136cc:	0f b6 c6             	movzx  eax,dh
c00136cf:	c1 eb 10             	shr    ebx,0x10
c00136d2:	48                   	dec    eax
c00136d3:	66 81 eb 6c 07       	sub    bx,0x76c
c00136d8:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c00136dc:	0f b6 f5             	movzx  esi,ch
c00136df:	89 cf                	mov    edi,ecx
c00136e1:	6b f6 3c             	imul   esi,esi,0x3c
c00136e4:	c1 ef 10             	shr    edi,0x10
c00136e7:	0f b6 c9             	movzx  ecx,cl
c00136ea:	89 f8                	mov    eax,edi
c00136ec:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c00136f2:	0f b6 f8             	movzx  edi,al
c00136f5:	0f b6 d2             	movzx  edx,dl
c00136f8:	01 fe                	add    esi,edi
c00136fa:	01 f1                	add    ecx,esi
c00136fc:	0f b7 f3             	movzx  esi,bx
c00136ff:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0013703:	c1 f9 1f             	sar    ecx,0x1f
c0013706:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c001370b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001370f:	0f b6 4c 24 07       	movzx  ecx,BYTE PTR [esp+0x7]
c0013714:	8b 0c 8d 20 aa 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd55e0]
c001371b:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c001371f:	76 29                	jbe    c001374a <datetimeToSeconds(datetime_t)+0x8f>
c0013721:	f6 c3 03             	test   bl,0x3
c0013724:	75 24                	jne    c001374a <datetimeToSeconds(datetime_t)+0x8f>
c0013726:	31 d2                	xor    edx,edx
c0013728:	bf 64 00 00 00       	mov    edi,0x64
c001372d:	89 d8                	mov    eax,ebx
c001372f:	66 f7 f7             	div    di
c0013732:	66 85 d2             	test   dx,dx
c0013735:	75 12                	jne    c0013749 <datetimeToSeconds(datetime_t)+0x8e>
c0013737:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c001373d:	bf 90 01 00 00       	mov    edi,0x190
c0013742:	99                   	cdq    
c0013743:	f7 ff                	idiv   edi
c0013745:	85 d2                	test   edx,edx
c0013747:	75 01                	jne    c001374a <datetimeToSeconds(datetime_t)+0x8f>
c0013749:	41                   	inc    ecx
c001374a:	66 83 fb 46          	cmp    bx,0x46
c001374e:	76 45                	jbe    c0013795 <datetimeToSeconds(datetime_t)+0xda>
c0013750:	bb 46 00 00 00       	mov    ebx,0x46
c0013755:	bf 64 00 00 00       	mov    edi,0x64
c001375a:	bd 90 01 00 00       	mov    ebp,0x190
c001375f:	b8 6d 01 00 00       	mov    eax,0x16d
c0013764:	f6 c3 03             	test   bl,0x3
c0013767:	75 23                	jne    c001378c <datetimeToSeconds(datetime_t)+0xd1>
c0013769:	89 d8                	mov    eax,ebx
c001376b:	99                   	cdq    
c001376c:	f7 ff                	idiv   edi
c001376e:	b8 6e 01 00 00       	mov    eax,0x16e
c0013773:	85 d2                	test   edx,edx
c0013775:	75 15                	jne    c001378c <datetimeToSeconds(datetime_t)+0xd1>
c0013777:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c001377d:	99                   	cdq    
c001377e:	f7 fd                	idiv   ebp
c0013780:	83 fa 01             	cmp    edx,0x1
c0013783:	19 c0                	sbb    eax,eax
c0013785:	f7 d0                	not    eax
c0013787:	05 6e 01 00 00       	add    eax,0x16e
c001378c:	01 c1                	add    ecx,eax
c001378e:	43                   	inc    ebx
c001378f:	39 f3                	cmp    ebx,esi
c0013791:	7c cc                	jl     c001375f <datetimeToSeconds(datetime_t)+0xa4>
c0013793:	eb 35                	jmp    c00137ca <datetimeToSeconds(datetime_t)+0x10f>
c0013795:	74 33                	je     c00137ca <datetimeToSeconds(datetime_t)+0x10f>
c0013797:	b8 45 00 00 00       	mov    eax,0x45
c001379c:	89 c2                	mov    edx,eax
c001379e:	83 e2 03             	and    edx,0x3
c00137a1:	39 f0                	cmp    eax,esi
c00137a3:	7e 0f                	jle    c00137b4 <datetimeToSeconds(datetime_t)+0xf9>
c00137a5:	83 fa 01             	cmp    edx,0x1
c00137a8:	19 d2                	sbb    edx,edx
c00137aa:	48                   	dec    eax
c00137ab:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c00137b2:	eb e8                	jmp    c001379c <datetimeToSeconds(datetime_t)+0xe1>
c00137b4:	b8 6d 01 00 00       	mov    eax,0x16d
c00137b9:	85 d2                	test   edx,edx
c00137bb:	75 0b                	jne    c00137c8 <datetimeToSeconds(datetime_t)+0x10d>
c00137bd:	66 83 fb 01          	cmp    bx,0x1
c00137c1:	19 c0                	sbb    eax,eax
c00137c3:	05 6e 01 00 00       	add    eax,0x16e
c00137c8:	29 c1                	sub    ecx,eax
c00137ca:	b8 80 51 01 00       	mov    eax,0x15180
c00137cf:	f7 e9                	imul   ecx
c00137d1:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00137d5:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00137d9:	83 c4 14             	add    esp,0x14
c00137dc:	5b                   	pop    ebx
c00137dd:	5e                   	pop    esi
c00137de:	5f                   	pop    edi
c00137df:	5d                   	pop    ebp
c00137e0:	c3                   	ret    
c00137e1:	90                   	nop

c00137e2 <Clock::setTimeInDatetimeLocal(datetime_t)>:
c00137e2:	57                   	push   edi
c00137e3:	56                   	push   esi
c00137e4:	53                   	push   ebx
c00137e5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00137e9:	8b 06                	mov    eax,DWORD PTR [esi]
c00137eb:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c00137ee:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00137f2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00137f6:	e8 c0 fe ff ff       	call   c00136bb <datetimeToSeconds(datetime_t)>
c00137fb:	59                   	pop    ecx
c00137fc:	0f b6 0d 1c db 02 c0 	movzx  ecx,BYTE PTR ds:0xc002db1c
c0013803:	5b                   	pop    ebx
c0013804:	03 0d 20 db 02 c0    	add    ecx,DWORD PTR ds:0xc002db20
c001380a:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0013810:	89 cb                	mov    ebx,ecx
c0013812:	c1 fb 1f             	sar    ebx,0x1f
c0013815:	29 c8                	sub    eax,ecx
c0013817:	19 da                	sbb    edx,ebx
c0013819:	31 c9                	xor    ecx,ecx
c001381b:	80 3d 1d db 02 c0 00 	cmp    BYTE PTR ds:0xc002db1d,0x0
c0013822:	74 05                	je     c0013829 <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c0013824:	b9 08 07 00 00       	mov    ecx,0x708
c0013829:	31 db                	xor    ebx,ebx
c001382b:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c001382f:	29 c8                	sub    eax,ecx
c0013831:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013835:	19 da                	sbb    edx,ebx
c0013837:	89 f8                	mov    eax,edi
c0013839:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001383d:	5b                   	pop    ebx
c001383e:	5e                   	pop    esi
c001383f:	5f                   	pop    edi
c0013840:	ff e0                	jmp    eax

c0013842 <secondsToDatetime(unsigned long long)>:
c0013842:	55                   	push   ebp
c0013843:	57                   	push   edi
c0013844:	56                   	push   esi
c0013845:	53                   	push   ebx
c0013846:	83 ec 1c             	sub    esp,0x1c
c0013849:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001384d:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0013851:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0013855:	6a 00                	push   0x0
c0013857:	68 80 51 01 00       	push   0x15180
c001385c:	55                   	push   ebp
c001385d:	57                   	push   edi
c001385e:	e8 b1 2e 01 00       	call   c0026714 <__udivdi3>
c0013863:	83 c4 10             	add    esp,0x10
c0013866:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c001386c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013870:	6a 00                	push   0x0
c0013872:	68 80 51 01 00       	push   0x15180
c0013877:	55                   	push   ebp
c0013878:	57                   	push   edi
c0013879:	bf 10 0e 00 00       	mov    edi,0xe10
c001387e:	e8 91 2f 01 00       	call   c0026814 <__umoddi3>
c0013883:	83 c4 10             	add    esp,0x10
c0013886:	99                   	cdq    
c0013887:	f7 ff                	idiv   edi
c0013889:	bf 3c 00 00 00       	mov    edi,0x3c
c001388e:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c0013891:	89 d0                	mov    eax,edx
c0013893:	99                   	cdq    
c0013894:	f7 ff                	idiv   edi
c0013896:	85 db                	test   ebx,ebx
c0013898:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c001389b:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c001389e:	79 11                	jns    c00138b1 <secondsToDatetime(unsigned long long)+0x6f>
c00138a0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00138a4:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c00138aa:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c00138af:	eb 07                	jmp    c00138b8 <secondsToDatetime(unsigned long long)+0x76>
c00138b1:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c00138b6:	89 d8                	mov    eax,ebx
c00138b8:	bf b4 05 00 00       	mov    edi,0x5b4
c00138bd:	99                   	cdq    
c00138be:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c00138c3:	f7 f9                	idiv   ecx
c00138c5:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c00138ca:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00138ce:	31 d2                	xor    edx,edx
c00138d0:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c00138d8:	01 c3                	add    ebx,eax
c00138da:	89 d8                	mov    eax,ebx
c00138dc:	f7 f1                	div    ecx
c00138de:	31 d2                	xor    edx,edx
c00138e0:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c00138e3:	89 d8                	mov    eax,ebx
c00138e5:	f7 f7                	div    edi
c00138e7:	31 d2                	xor    edx,edx
c00138e9:	29 c1                	sub    ecx,eax
c00138eb:	89 d8                	mov    eax,ebx
c00138ed:	f7 f5                	div    ebp
c00138ef:	bd 6d 01 00 00       	mov    ebp,0x16d
c00138f4:	29 c1                	sub    ecx,eax
c00138f6:	31 d2                	xor    edx,edx
c00138f8:	89 c8                	mov    eax,ecx
c00138fa:	f7 f5                	div    ebp
c00138fc:	bd 94 8e 00 00       	mov    ebp,0x8e94
c0013901:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013905:	31 d2                	xor    edx,edx
c0013907:	89 c8                	mov    eax,ecx
c0013909:	f7 f5                	div    ebp
c001390b:	31 d2                	xor    edx,edx
c001390d:	01 c3                	add    ebx,eax
c001390f:	89 c8                	mov    eax,ecx
c0013911:	f7 f7                	div    edi
c0013913:	bf 99 00 00 00       	mov    edi,0x99
c0013918:	29 c3                	sub    ebx,eax
c001391a:	31 d2                	xor    edx,edx
c001391c:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c0013924:	29 c3                	sub    ebx,eax
c0013926:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0013929:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c001392c:	bb 05 00 00 00       	mov    ebx,0x5
c0013931:	83 c1 02             	add    ecx,0x2
c0013934:	89 c8                	mov    eax,ecx
c0013936:	f7 f7                	div    edi
c0013938:	31 d2                	xor    edx,edx
c001393a:	89 c7                	mov    edi,eax
c001393c:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c0013942:	83 c0 02             	add    eax,0x2
c0013945:	f7 f3                	div    ebx
c0013947:	89 eb                	mov    ebx,ebp
c0013949:	29 c3                	sub    ebx,eax
c001394b:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c0013951:	88 1e                	mov    BYTE PTR [esi],bl
c0013953:	19 c0                	sbb    eax,eax
c0013955:	31 d2                	xor    edx,edx
c0013957:	83 e0 0c             	and    eax,0xc
c001395a:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c001395e:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c0013966:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c001396a:	83 f9 01             	cmp    ecx,0x1
c001396d:	0f 96 c2             	setbe  dl
c0013970:	41                   	inc    ecx
c0013971:	01 d0                	add    eax,edx
c0013973:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c0013976:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c001397a:	83 c4 1c             	add    esp,0x1c
c001397d:	89 f0                	mov    eax,esi
c001397f:	5b                   	pop    ebx
c0013980:	5e                   	pop    esi
c0013981:	5f                   	pop    edi
c0013982:	5d                   	pop    ebp
c0013983:	c2 04 00             	ret    0x4

c0013986 <Clock::timeInDatetimeLocal()>:
c0013986:	53                   	push   ebx
c0013987:	83 ec 14             	sub    esp,0x14
c001398a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001398e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0013992:	e8 83 fc ff ff       	call   c001361a <Clock::timeInSecondsLocal()>
c0013997:	83 c4 0c             	add    esp,0xc
c001399a:	52                   	push   edx
c001399b:	50                   	push   eax
c001399c:	53                   	push   ebx
c001399d:	e8 a0 fe ff ff       	call   c0013842 <secondsToDatetime(unsigned long long)>
c00139a2:	89 d8                	mov    eax,ebx
c00139a4:	83 c4 14             	add    esp,0x14
c00139a7:	5b                   	pop    ebx
c00139a8:	c2 04 00             	ret    0x4
c00139ab:	90                   	nop

c00139ac <Device::hibernate()>:
c00139ac:	c3                   	ret    
c00139ad:	90                   	nop

c00139ae <Device::wake()>:
c00139ae:	c3                   	ret    
c00139af:	90                   	nop

c00139b0 <Device::detect()>:
c00139b0:	c3                   	ret    
c00139b1:	90                   	nop

c00139b2 <Device::disableLegacy()>:
c00139b2:	c3                   	ret    
c00139b3:	90                   	nop

c00139b4 <Device::powerSaving(PowerSavingLevel)>:
c00139b4:	c3                   	ret    
c00139b5:	90                   	nop

c00139b6 <DriverlessDevice::close(int, int, void*)>:
c00139b6:	31 c0                	xor    eax,eax
c00139b8:	c3                   	ret    
c00139b9:	90                   	nop

c00139ba <DriverlessDevice::detect()>:
c00139ba:	c3                   	ret    
c00139bb:	90                   	nop

c00139bc <DriverlessDevice::open(int, int, void*)>:
c00139bc:	83 ec 18             	sub    esp,0x18
c00139bf:	68 50 aa 02 c0       	push   0xc002aa50
c00139c4:	e8 6c 64 00 00       	call   c0019e35 <Krnl::panic(char const*)>
c00139c9:	83 c8 ff             	or     eax,0xffffffff
c00139cc:	83 c4 1c             	add    esp,0x1c
c00139cf:	c3                   	ret    

c00139d0 <Device::~Device()>:
c00139d0:	ba b0 aa 02 c0       	mov    edx,0xc002aab0
c00139d5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00139d9:	89 10                	mov    DWORD PTR [eax],edx
c00139db:	90                   	nop
c00139dc:	c3                   	ret    
c00139dd:	90                   	nop

c00139de <Device::~Device()>:
c00139de:	83 ec 0c             	sub    esp,0xc
c00139e1:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00139e5:	e8 e6 ff ff ff       	call   c00139d0 <Device::~Device()>
c00139ea:	83 c4 04             	add    esp,0x4
c00139ed:	83 ec 08             	sub    esp,0x8
c00139f0:	68 58 01 00 00       	push   0x158
c00139f5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00139f9:	e8 f3 eb ff ff       	call   c00125f1 <operator delete(void*, unsigned long)>
c00139fe:	83 c4 10             	add    esp,0x10
c0013a01:	83 c4 0c             	add    esp,0xc
c0013a04:	c3                   	ret    
c0013a05:	90                   	nop

c0013a06 <Device::findAndLoadDriver()>:
c0013a06:	c7 44 24 04 6e aa 02 c0 	mov    DWORD PTR [esp+0x4],0xc002aa6e
c0013a0e:	e9 b6 ec ff ff       	jmp    c00126c9 <Dbg::kprintf(char const*, ...)>
c0013a13:	90                   	nop

c0013a14 <Device::preOpenPCI(PCIDeviceInfo)>:
c0013a14:	57                   	push   edi
c0013a15:	b9 09 00 00 00       	mov    ecx,0x9
c0013a1a:	56                   	push   esi
c0013a1b:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0013a1f:	8d 74 24 10          	lea    esi,[esp+0x10]
c0013a23:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c0013a2d:	81 c7 18 01 00 00    	add    edi,0x118
c0013a33:	fc                   	cld    
c0013a34:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0013a36:	5e                   	pop    esi
c0013a37:	5f                   	pop    edi
c0013a38:	c3                   	ret    
c0013a39:	90                   	nop

c0013a3a <Device::preOpenACPI(void*, char*, char*)>:
c0013a3a:	57                   	push   edi
c0013a3b:	b9 1e 00 00 00       	mov    ecx,0x1e
c0013a40:	56                   	push   esi
c0013a41:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013a45:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013a49:	c7 80 14 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x114],0x3
c0013a53:	89 90 18 01 00 00    	mov    DWORD PTR [eax+0x118],edx
c0013a59:	8d b8 1c 01 00 00    	lea    edi,[eax+0x11c]
c0013a5f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013a63:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013a65:	b9 0e 00 00 00       	mov    ecx,0xe
c0013a6a:	8d b8 3a 01 00 00    	lea    edi,[eax+0x13a]
c0013a70:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0013a74:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013a76:	5e                   	pop    esi
c0013a77:	5f                   	pop    edi
c0013a78:	c3                   	ret    
c0013a79:	90                   	nop

c0013a7a <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0013a7a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013a7e:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0013a83:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c0013a8a:	75 0b                	jne    c0013a97 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1d>
c0013a8c:	8b 00                	mov    eax,DWORD PTR [eax]
c0013a8e:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0013a92:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0013a95:	eb 1e                	jmp    c0013ab5 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3b>
c0013a97:	a1 a8 d9 02 c0       	mov    eax,ds:0xc002d9a8
c0013a9c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0013aa2:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0013aa8:	8b 08                	mov    ecx,DWORD PTR [eax]
c0013aaa:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0013aae:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013ab2:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c0013ab5:	ff e0                	jmp    eax
c0013ab7:	90                   	nop

c0013ab8 <Device::getParent()>:
c0013ab8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013abc:	8b 80 c8 00 00 00    	mov    eax,DWORD PTR [eax+0xc8]
c0013ac2:	c3                   	ret    
c0013ac3:	90                   	nop

c0013ac4 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c0013ac4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013ac8:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0013acd:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c0013ad4:	75 0b                	jne    c0013ae1 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c0013ad6:	8b 00                	mov    eax,DWORD PTR [eax]
c0013ad8:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0013adc:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0013adf:	eb 1e                	jmp    c0013aff <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x3b>
c0013ae1:	a1 a8 d9 02 c0       	mov    eax,ds:0xc002d9a8
c0013ae6:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0013aec:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0013af2:	8b 08                	mov    ecx,DWORD PTR [eax]
c0013af4:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0013af8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013afc:	8b 41 30             	mov    eax,DWORD PTR [ecx+0x30]
c0013aff:	ff e0                	jmp    eax
c0013b01:	90                   	nop

c0013b02 <Device::addChild(Device*)>:
c0013b02:	53                   	push   ebx
c0013b03:	83 ec 08             	sub    esp,0x8
c0013b06:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013b0a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013b0e:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c0013b14:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c0013b1a:	8b 13                	mov    edx,DWORD PTR [ebx]
c0013b1c:	85 d2                	test   edx,edx
c0013b1e:	74 04                	je     c0013b24 <Device::addChild(Device*)+0x22>
c0013b20:	89 d3                	mov    ebx,edx
c0013b22:	eb f6                	jmp    c0013b1a <Device::addChild(Device*)+0x18>
c0013b24:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0013b27:	83 ec 0c             	sub    esp,0xc
c0013b2a:	6a 08                	push   0x8
c0013b2c:	e8 68 ba ff ff       	call   c000f599 <malloc>
c0013b31:	89 03                	mov    DWORD PTR [ebx],eax
c0013b33:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013b39:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013b40:	83 c4 18             	add    esp,0x18
c0013b43:	5b                   	pop    ebx
c0013b44:	c3                   	ret    
c0013b45:	90                   	nop

c0013b46 <Device::removeAllChildren()>:
c0013b46:	56                   	push   esi
c0013b47:	53                   	push   ebx
c0013b48:	52                   	push   edx
c0013b49:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013b4d:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c0013b53:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013b56:	74 17                	je     c0013b6f <Device::removeAllChildren()+0x29>
c0013b58:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0013b5b:	85 c0                	test   eax,eax
c0013b5d:	74 0c                	je     c0013b6b <Device::removeAllChildren()+0x25>
c0013b5f:	83 ec 0c             	sub    esp,0xc
c0013b62:	8b 10                	mov    edx,DWORD PTR [eax]
c0013b64:	50                   	push   eax
c0013b65:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0013b68:	83 c4 10             	add    esp,0x10
c0013b6b:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013b6d:	eb e4                	jmp    c0013b53 <Device::removeAllChildren()+0xd>
c0013b6f:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0013b75:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013b7b:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0013b81:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013b88:	58                   	pop    eax
c0013b89:	5b                   	pop    ebx
c0013b8a:	5e                   	pop    esi
c0013b8b:	c3                   	ret    

c0013b8c <Device::hibernateAll()>:
c0013b8c:	53                   	push   ebx
c0013b8d:	83 ec 14             	sub    esp,0x14
c0013b90:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013b94:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013b96:	53                   	push   ebx
c0013b97:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0013b9a:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013ba0:	83 c4 10             	add    esp,0x10
c0013ba3:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013ba6:	74 0f                	je     c0013bb7 <Device::hibernateAll()+0x2b>
c0013ba8:	83 ec 0c             	sub    esp,0xc
c0013bab:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013bae:	e8 d9 ff ff ff       	call   c0013b8c <Device::hibernateAll()>
c0013bb3:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013bb5:	eb e9                	jmp    c0013ba0 <Device::hibernateAll()+0x14>
c0013bb7:	83 c4 08             	add    esp,0x8
c0013bba:	5b                   	pop    ebx
c0013bbb:	c3                   	ret    

c0013bbc <Device::wakeAll()>:
c0013bbc:	53                   	push   ebx
c0013bbd:	83 ec 14             	sub    esp,0x14
c0013bc0:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013bc4:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013bc6:	53                   	push   ebx
c0013bc7:	ff 50 14             	call   DWORD PTR [eax+0x14]
c0013bca:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013bd0:	83 c4 10             	add    esp,0x10
c0013bd3:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013bd6:	74 0f                	je     c0013be7 <Device::wakeAll()+0x2b>
c0013bd8:	83 ec 0c             	sub    esp,0xc
c0013bdb:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013bde:	e8 d9 ff ff ff       	call   c0013bbc <Device::wakeAll()>
c0013be3:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013be5:	eb e9                	jmp    c0013bd0 <Device::wakeAll()+0x14>
c0013be7:	83 c4 08             	add    esp,0x8
c0013bea:	5b                   	pop    ebx
c0013beb:	c3                   	ret    

c0013bec <Device::detectAll()>:
c0013bec:	53                   	push   ebx
c0013bed:	83 ec 14             	sub    esp,0x14
c0013bf0:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013bf4:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013bf6:	53                   	push   ebx
c0013bf7:	ff 50 18             	call   DWORD PTR [eax+0x18]
c0013bfa:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013c00:	83 c4 10             	add    esp,0x10
c0013c03:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013c06:	74 0f                	je     c0013c17 <Device::detectAll()+0x2b>
c0013c08:	83 ec 0c             	sub    esp,0xc
c0013c0b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013c0e:	e8 d9 ff ff ff       	call   c0013bec <Device::detectAll()>
c0013c13:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013c15:	eb e9                	jmp    c0013c00 <Device::detectAll()+0x14>
c0013c17:	83 c4 08             	add    esp,0x8
c0013c1a:	5b                   	pop    ebx
c0013c1b:	c3                   	ret    

c0013c1c <Device::disableLegacyAll()>:
c0013c1c:	53                   	push   ebx
c0013c1d:	83 ec 14             	sub    esp,0x14
c0013c20:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013c24:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013c26:	53                   	push   ebx
c0013c27:	ff 50 1c             	call   DWORD PTR [eax+0x1c]
c0013c2a:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013c30:	83 c4 10             	add    esp,0x10
c0013c33:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013c36:	74 0f                	je     c0013c47 <Device::disableLegacyAll()+0x2b>
c0013c38:	83 ec 0c             	sub    esp,0xc
c0013c3b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013c3e:	e8 d9 ff ff ff       	call   c0013c1c <Device::disableLegacyAll()>
c0013c43:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013c45:	eb e9                	jmp    c0013c30 <Device::disableLegacyAll()+0x14>
c0013c47:	83 c4 08             	add    esp,0x8
c0013c4a:	5b                   	pop    ebx
c0013c4b:	c3                   	ret    

c0013c4c <Device::loadDriversForAll()>:
c0013c4c:	53                   	push   ebx
c0013c4d:	83 ec 08             	sub    esp,0x8
c0013c50:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013c54:	83 bb 10 01 00 00 13 	cmp    DWORD PTR [ebx+0x110],0x13
c0013c5b:	75 0c                	jne    c0013c69 <Device::loadDriversForAll()+0x1d>
c0013c5d:	83 ec 0c             	sub    esp,0xc
c0013c60:	53                   	push   ebx
c0013c61:	e8 a0 fd ff ff       	call   c0013a06 <Device::findAndLoadDriver()>
c0013c66:	83 c4 10             	add    esp,0x10
c0013c69:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013c6f:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013c72:	74 12                	je     c0013c86 <Device::loadDriversForAll()+0x3a>
c0013c74:	83 ec 0c             	sub    esp,0xc
c0013c77:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013c7a:	e8 cd ff ff ff       	call   c0013c4c <Device::loadDriversForAll()>
c0013c7f:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013c81:	83 c4 10             	add    esp,0x10
c0013c84:	eb e9                	jmp    c0013c6f <Device::loadDriversForAll()+0x23>
c0013c86:	83 c4 08             	add    esp,0x8
c0013c89:	5b                   	pop    ebx
c0013c8a:	c3                   	ret    
c0013c8b:	90                   	nop

c0013c8c <Device::closeAll()>:
c0013c8c:	53                   	push   ebx
c0013c8d:	83 ec 08             	sub    esp,0x8
c0013c90:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013c94:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013c96:	6a 00                	push   0x0
c0013c98:	6a 00                	push   0x0
c0013c9a:	6a 00                	push   0x0
c0013c9c:	53                   	push   ebx
c0013c9d:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013ca0:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013ca6:	83 c4 10             	add    esp,0x10
c0013ca9:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013cac:	74 0f                	je     c0013cbd <Device::closeAll()+0x31>
c0013cae:	83 ec 0c             	sub    esp,0xc
c0013cb1:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013cb4:	e8 d3 ff ff ff       	call   c0013c8c <Device::closeAll()>
c0013cb9:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013cbb:	eb e9                	jmp    c0013ca6 <Device::closeAll()+0x1a>
c0013cbd:	83 c4 08             	add    esp,0x8
c0013cc0:	5b                   	pop    ebx
c0013cc1:	c3                   	ret    

c0013cc2 <Device::powerSavingAll(PowerSavingLevel)>:
c0013cc2:	56                   	push   esi
c0013cc3:	53                   	push   ebx
c0013cc4:	83 ec 0c             	sub    esp,0xc
c0013cc7:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013ccb:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0013ccf:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013cd1:	56                   	push   esi
c0013cd2:	53                   	push   ebx
c0013cd3:	ff 50 20             	call   DWORD PTR [eax+0x20]
c0013cd6:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013cdc:	83 c4 10             	add    esp,0x10
c0013cdf:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013ce2:	74 0f                	je     c0013cf3 <Device::powerSavingAll(PowerSavingLevel)+0x31>
c0013ce4:	52                   	push   edx
c0013ce5:	52                   	push   edx
c0013ce6:	56                   	push   esi
c0013ce7:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013cea:	e8 d3 ff ff ff       	call   c0013cc2 <Device::powerSavingAll(PowerSavingLevel)>
c0013cef:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013cf1:	eb e9                	jmp    c0013cdc <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c0013cf3:	58                   	pop    eax
c0013cf4:	5b                   	pop    ebx
c0013cf5:	5e                   	pop    esi
c0013cf6:	c3                   	ret    
c0013cf7:	90                   	nop

c0013cf8 <Device::setName(char const*)>:
c0013cf8:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c0013d00:	e9 07 cb fe ff       	jmp    c000080c <strcpy>
c0013d05:	90                   	nop

c0013d06 <Device::Device(char const*)>:
c0013d06:	83 ec 1c             	sub    esp,0x1c
c0013d09:	ba b0 aa 02 c0       	mov    edx,0xc002aab0
c0013d0e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013d12:	89 10                	mov    DWORD PTR [eax],edx
c0013d14:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013d18:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c0013d22:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013d26:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c0013d30:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013d34:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0013d3e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013d42:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c0013d4c:	83 ec 08             	sub    esp,0x8
c0013d4f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013d53:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013d57:	e8 9c ff ff ff       	call   c0013cf8 <Device::setName(char const*)>
c0013d5c:	83 c4 10             	add    esp,0x10
c0013d5f:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c0013d67:	83 ec 0c             	sub    esp,0xc
c0013d6a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013d6e:	e8 26 b8 ff ff       	call   c000f599 <malloc>
c0013d73:	83 c4 10             	add    esp,0x10
c0013d76:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013d7c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013d83:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0013d87:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c0013d8d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013d91:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0013d97:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013d9d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013da1:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0013da7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013dae:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013db2:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c0013db9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013dbd:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c0013dc4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013dc8:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0013dd2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013dd6:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c0013de0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013de4:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c0013dee:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013df2:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c0013dfc:	90                   	nop
c0013dfd:	83 c4 1c             	add    esp,0x1c
c0013e00:	c3                   	ret    
c0013e01:	90                   	nop

c0013e02 <Device::getName()>:
c0013e02:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013e06:	05 d0 00 00 00       	add    eax,0xd0
c0013e0b:	c3                   	ret    

c0013e0c <DriverlessDevice::DriverlessDevice(char const*)>:
c0013e0c:	83 ec 0c             	sub    esp,0xc
c0013e0f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e13:	83 ec 08             	sub    esp,0x8
c0013e16:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013e1a:	50                   	push   eax
c0013e1b:	e8 e6 fe ff ff       	call   c0013d06 <Device::Device(char const*)>
c0013e20:	83 c4 10             	add    esp,0x10
c0013e23:	ba dc aa 02 c0       	mov    edx,0xc002aadc
c0013e28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e2c:	89 10                	mov    DWORD PTR [eax],edx
c0013e2e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e32:	c7 80 10 01 00 00 12 00 00 00 	mov    DWORD PTR [eax+0x110],0x12
c0013e3c:	90                   	nop
c0013e3d:	83 c4 0c             	add    esp,0xc
c0013e40:	c3                   	ret    
c0013e41:	90                   	nop

c0013e42 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c0013e42:	57                   	push   edi
c0013e43:	56                   	push   esi
c0013e44:	53                   	push   ebx
c0013e45:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013e49:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0013e4d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013e51:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c0013e57:	75 0c                	jne    c0013e65 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c0013e59:	52                   	push   edx
c0013e5a:	52                   	push   edx
c0013e5b:	53                   	push   ebx
c0013e5c:	56                   	push   esi
c0013e5d:	e8 ee 47 01 00       	call   c0028650 <LinkedList<Device>::addElement(Device*)>
c0013e62:	83 c4 10             	add    esp,0x10
c0013e65:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013e6b:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013e6e:	74 12                	je     c0013e82 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c0013e70:	50                   	push   eax
c0013e71:	57                   	push   edi
c0013e72:	56                   	push   esi
c0013e73:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013e76:	e8 c7 ff ff ff       	call   c0013e42 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c0013e7b:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013e7d:	83 c4 10             	add    esp,0x10
c0013e80:	eb e9                	jmp    c0013e6b <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c0013e82:	5b                   	pop    ebx
c0013e83:	5e                   	pop    esi
c0013e84:	5f                   	pop    edi
c0013e85:	c3                   	ret    

c0013e86 <getDevicesOfType(DeviceType)>:
c0013e86:	53                   	push   ebx
c0013e87:	83 ec 14             	sub    esp,0x14
c0013e8a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013e8e:	53                   	push   ebx
c0013e8f:	e8 98 48 01 00       	call   c002872c <LinkedList<Device>::LinkedList()>
c0013e94:	83 c4 0c             	add    esp,0xc
c0013e97:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013e9b:	53                   	push   ebx
c0013e9c:	ff 35 a8 d9 02 c0    	push   DWORD PTR ds:0xc002d9a8
c0013ea2:	e8 9b ff ff ff       	call   c0013e42 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c0013ea7:	89 d8                	mov    eax,ebx
c0013ea9:	83 c4 18             	add    esp,0x18
c0013eac:	5b                   	pop    ebx
c0013ead:	c2 04 00             	ret    0x4

c0013eb0 <HardDiskController::HardDiskController(char const*)>:
c0013eb0:	83 ec 0c             	sub    esp,0xc
c0013eb3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013eb7:	83 ec 08             	sub    esp,0x8
c0013eba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013ebe:	50                   	push   eax
c0013ebf:	e8 42 fe ff ff       	call   c0013d06 <Device::Device(char const*)>
c0013ec4:	83 c4 10             	add    esp,0x10
c0013ec7:	ba 08 ab 02 c0       	mov    edx,0xc002ab08
c0013ecc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013ed0:	89 10                	mov    DWORD PTR [eax],edx
c0013ed2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013ed6:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c0013ee0:	90                   	nop
c0013ee1:	83 c4 0c             	add    esp,0xc
c0013ee4:	c3                   	ret    
c0013ee5:	90                   	nop

c0013ee6 <HardDiskController::~HardDiskController()>:
c0013ee6:	83 ec 0c             	sub    esp,0xc
c0013ee9:	ba 08 ab 02 c0       	mov    edx,0xc002ab08
c0013eee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013ef2:	89 10                	mov    DWORD PTR [eax],edx
c0013ef4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013ef8:	83 ec 0c             	sub    esp,0xc
c0013efb:	50                   	push   eax
c0013efc:	e8 cf fa ff ff       	call   c00139d0 <Device::~Device()>
c0013f01:	83 c4 10             	add    esp,0x10
c0013f04:	90                   	nop
c0013f05:	83 c4 0c             	add    esp,0xc
c0013f08:	c3                   	ret    
c0013f09:	90                   	nop

c0013f0a <HardDiskController::~HardDiskController()>:
c0013f0a:	83 ec 0c             	sub    esp,0xc
c0013f0d:	83 ec 0c             	sub    esp,0xc
c0013f10:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013f14:	e8 cd ff ff ff       	call   c0013ee6 <HardDiskController::~HardDiskController()>
c0013f19:	83 c4 10             	add    esp,0x10
c0013f1c:	83 ec 08             	sub    esp,0x8
c0013f1f:	68 58 01 00 00       	push   0x158
c0013f24:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013f28:	e8 c4 e6 ff ff       	call   c00125f1 <operator delete(void*, unsigned long)>
c0013f2d:	83 c4 10             	add    esp,0x10
c0013f30:	83 c4 0c             	add    esp,0xc
c0013f33:	c3                   	ret    

c0013f34 <PhysicalDisk::eject()>:
c0013f34:	83 c8 ff             	or     eax,0xffffffff
c0013f37:	c3                   	ret    

c0013f38 <PhysicalDisk::PhysicalDisk(char const*, int)>:
c0013f38:	83 ec 0c             	sub    esp,0xc
c0013f3b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013f3f:	83 ec 08             	sub    esp,0x8
c0013f42:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013f46:	50                   	push   eax
c0013f47:	e8 ba fd ff ff       	call   c0013d06 <Device::Device(char const*)>
c0013f4c:	83 c4 10             	add    esp,0x10
c0013f4f:	ba 34 ab 02 c0       	mov    edx,0xc002ab34
c0013f54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013f58:	89 10                	mov    DWORD PTR [eax],edx
c0013f5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013f5e:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0013f65:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013f69:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c0013f70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013f74:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c0013f7e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013f82:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013f86:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0013f8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013f90:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0013f9a:	90                   	nop
c0013f9b:	83 c4 0c             	add    esp,0xc
c0013f9e:	c3                   	ret    
c0013f9f:	90                   	nop

c0013fa0 <PhysicalDisk::startCache()>:
c0013fa0:	56                   	push   esi
c0013fa1:	53                   	push   ebx
c0013fa2:	83 ec 10             	sub    esp,0x10
c0013fa5:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013fa9:	6a 44                	push   0x44
c0013fab:	e8 e9 b5 ff ff       	call   c000f599 <malloc>
c0013fb0:	89 c6                	mov    esi,eax
c0013fb2:	58                   	pop    eax
c0013fb3:	5a                   	pop    edx
c0013fb4:	53                   	push   ebx
c0013fb5:	56                   	push   esi
c0013fb6:	e8 71 28 00 00       	call   c001682c <VCache::VCache(PhysicalDisk*)>
c0013fbb:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c0013fc1:	83 c4 14             	add    esp,0x14
c0013fc4:	5b                   	pop    ebx
c0013fc5:	5e                   	pop    esi
c0013fc6:	c3                   	ret    
c0013fc7:	90                   	nop

c0013fc8 <PhysicalDisk::~PhysicalDisk()>:
c0013fc8:	83 ec 0c             	sub    esp,0xc
c0013fcb:	ba 34 ab 02 c0       	mov    edx,0xc002ab34
c0013fd0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013fd4:	89 10                	mov    DWORD PTR [eax],edx
c0013fd6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013fda:	83 ec 0c             	sub    esp,0xc
c0013fdd:	50                   	push   eax
c0013fde:	e8 ed f9 ff ff       	call   c00139d0 <Device::~Device()>
c0013fe3:	83 c4 10             	add    esp,0x10
c0013fe6:	90                   	nop
c0013fe7:	83 c4 0c             	add    esp,0xc
c0013fea:	c3                   	ret    
c0013feb:	90                   	nop

c0013fec <PhysicalDisk::~PhysicalDisk()>:
c0013fec:	83 ec 0c             	sub    esp,0xc
c0013fef:	83 ec 0c             	sub    esp,0xc
c0013ff2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013ff6:	e8 cd ff ff ff       	call   c0013fc8 <PhysicalDisk::~PhysicalDisk()>
c0013ffb:	83 c4 10             	add    esp,0x10
c0013ffe:	83 ec 08             	sub    esp,0x8
c0014001:	68 6c 01 00 00       	push   0x16c
c0014006:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001400a:	e8 e2 e5 ff ff       	call   c00125f1 <operator delete(void*, unsigned long)>
c001400f:	83 c4 10             	add    esp,0x10
c0014012:	83 c4 0c             	add    esp,0xc
c0014015:	c3                   	ret    

c0014016 <FPU::FPU(char const*)>:
c0014016:	83 ec 0c             	sub    esp,0xc
c0014019:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001401d:	83 ec 08             	sub    esp,0x8
c0014020:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014024:	50                   	push   eax
c0014025:	e8 dc fc ff ff       	call   c0013d06 <Device::Device(char const*)>
c001402a:	83 c4 10             	add    esp,0x10
c001402d:	ba 78 ab 02 c0       	mov    edx,0xc002ab78
c0014032:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014036:	89 10                	mov    DWORD PTR [eax],edx
c0014038:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001403c:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c0014046:	90                   	nop
c0014047:	83 c4 0c             	add    esp,0xc
c001404a:	c3                   	ret    
c001404b:	90                   	nop

c001404c <FPU::~FPU()>:
c001404c:	83 ec 0c             	sub    esp,0xc
c001404f:	ba 78 ab 02 c0       	mov    edx,0xc002ab78
c0014054:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014058:	89 10                	mov    DWORD PTR [eax],edx
c001405a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001405e:	83 ec 0c             	sub    esp,0xc
c0014061:	50                   	push   eax
c0014062:	e8 69 f9 ff ff       	call   c00139d0 <Device::~Device()>
c0014067:	83 c4 10             	add    esp,0x10
c001406a:	90                   	nop
c001406b:	83 c4 0c             	add    esp,0xc
c001406e:	c3                   	ret    
c001406f:	90                   	nop

c0014070 <FPU::~FPU()>:
c0014070:	83 ec 0c             	sub    esp,0xc
c0014073:	83 ec 0c             	sub    esp,0xc
c0014076:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001407a:	e8 cd ff ff ff       	call   c001404c <FPU::~FPU()>
c001407f:	83 c4 10             	add    esp,0x10
c0014082:	83 ec 08             	sub    esp,0x8
c0014085:	68 58 01 00 00       	push   0x158
c001408a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001408e:	e8 5e e5 ff ff       	call   c00125f1 <operator delete(void*, unsigned long)>
c0014093:	83 c4 10             	add    esp,0x10
c0014096:	83 c4 0c             	add    esp,0xc
c0014099:	c3                   	ret    

c001409a <setupFPU()>:
c001409a:	53                   	push   ebx
c001409b:	83 ec 08             	sub    esp,0x8
c001409e:	8b 15 a8 d9 02 c0    	mov    edx,DWORD PTR ds:0xc002d9a8
c00140a4:	f6 82 e9 01 00 00 20 	test   BYTE PTR [edx+0x1e9],0x20
c00140ab:	74 19                	je     c00140c6 <setupFPU()+0x2c>
c00140ad:	83 ec 0c             	sub    esp,0xc
c00140b0:	68 58 01 00 00       	push   0x158
c00140b5:	e8 df b4 ff ff       	call   c000f599 <malloc>
c00140ba:	89 c3                	mov    ebx,eax
c00140bc:	89 04 24             	mov    DWORD PTR [esp],eax
c00140bf:	e8 cc 11 01 00       	call   c0025290 <AVX::AVX()>
c00140c4:	eb 5b                	jmp    c0014121 <setupFPU()+0x87>
c00140c6:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c00140cc:	84 c0                	test   al,al
c00140ce:	79 19                	jns    c00140e9 <setupFPU()+0x4f>
c00140d0:	83 ec 0c             	sub    esp,0xc
c00140d3:	68 58 01 00 00       	push   0x158
c00140d8:	e8 bc b4 ff ff       	call   c000f599 <malloc>
c00140dd:	89 c3                	mov    ebx,eax
c00140df:	89 04 24             	mov    DWORD PTR [esp],eax
c00140e2:	e8 cf 12 01 00       	call   c00253b6 <SSE::SSE()>
c00140e7:	eb 38                	jmp    c0014121 <setupFPU()+0x87>
c00140e9:	a8 20                	test   al,0x20
c00140eb:	74 19                	je     c0014106 <setupFPU()+0x6c>
c00140ed:	83 ec 0c             	sub    esp,0xc
c00140f0:	68 58 01 00 00       	push   0x158
c00140f5:	e8 9f b4 ff ff       	call   c000f599 <malloc>
c00140fa:	89 c3                	mov    ebx,eax
c00140fc:	89 04 24             	mov    DWORD PTR [esp],eax
c00140ff:	e8 1c 12 01 00       	call   c0025320 <MMX::MMX()>
c0014104:	eb 1b                	jmp    c0014121 <setupFPU()+0x87>
c0014106:	a8 10                	test   al,0x10
c0014108:	74 1c                	je     c0014126 <setupFPU()+0x8c>
c001410a:	83 ec 0c             	sub    esp,0xc
c001410d:	68 58 01 00 00       	push   0x158
c0014112:	e8 82 b4 ff ff       	call   c000f599 <malloc>
c0014117:	89 c3                	mov    ebx,eax
c0014119:	89 04 24             	mov    DWORD PTR [esp],eax
c001411c:	e8 23 13 01 00       	call   c0025444 <x87::x87()>
c0014121:	83 c4 10             	add    esp,0x10
c0014124:	eb 24                	jmp    c001414a <setupFPU()+0xb0>
c0014126:	83 e0 ef             	and    eax,0xffffffef
c0014129:	83 ec 0c             	sub    esp,0xc
c001412c:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c0014132:	68 64 ab 02 c0       	push   0xc002ab64
c0014137:	e8 8d e5 ff ff       	call   c00126c9 <Dbg::kprintf(char const*, ...)>
c001413c:	0f 20 c0             	mov    eax,cr0
c001413f:	83 c8 04             	or     eax,0x4
c0014142:	0f 22 c0             	mov    cr0,eax
c0014145:	31 db                	xor    ebx,ebx
c0014147:	83 c4 10             	add    esp,0x10
c001414a:	89 d8                	mov    eax,ebx
c001414c:	83 c4 08             	add    esp,0x8
c001414f:	5b                   	pop    ebx
c0014150:	c3                   	ret    
c0014151:	90                   	nop

c0014152 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))>:
c0014152:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0014156:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001415a:	c1 e0 04             	shl    eax,0x4
c001415d:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0014161:	8d 50 10             	lea    edx,[eax+0x10]
c0014164:	39 88 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ecx
c001416a:	74 08                	je     c0014174 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x22>
c001416c:	83 c0 04             	add    eax,0x4
c001416f:	39 d0                	cmp    eax,edx
c0014171:	75 f1                	jne    c0014164 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x12>
c0014173:	c3                   	ret    
c0014174:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c001417e:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c0014188:	eb e2                	jmp    c001416c <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x1a>

c001418a <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)>:
c001418a:	57                   	push   edi
c001418b:	31 c0                	xor    eax,eax
c001418d:	56                   	push   esi
c001418e:	53                   	push   ebx
c001418f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0014193:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014197:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001419b:	89 da                	mov    edx,ebx
c001419d:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00141a1:	c1 e2 04             	shl    edx,0x4
c00141a4:	01 ca                	add    edx,ecx
c00141a6:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c00141ae:	74 16                	je     c00141c6 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x3c>
c00141b0:	40                   	inc    eax
c00141b1:	83 f8 04             	cmp    eax,0x4
c00141b4:	75 f0                	jne    c00141a6 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x1c>
c00141b6:	c7 44 24 10 a8 ab 02 c0 	mov    DWORD PTR [esp+0x10],0xc002aba8
c00141be:	5b                   	pop    ebx
c00141bf:	5e                   	pop    esi
c00141c0:	5f                   	pop    edi
c00141c1:	e9 6f 5c 00 00       	jmp    c0019e35 <Krnl::panic(char const*)>
c00141c6:	8d 04 98             	lea    eax,[eax+ebx*4]
c00141c9:	8d 04 81             	lea    eax,[ecx+eax*4]
c00141cc:	89 b0 58 01 00 00    	mov    DWORD PTR [eax+0x158],esi
c00141d2:	89 b8 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edi
c00141d8:	5b                   	pop    ebx
c00141d9:	5e                   	pop    esi
c00141da:	5f                   	pop    edi
c00141db:	c3                   	ret    

c00141dc <doubleFault(regs*, void*)>:
c00141dc:	55                   	push   ebp
c00141dd:	89 e5                	mov    ebp,esp
c00141df:	83 ec 08             	sub    esp,0x8
c00141e2:	83 ec 0c             	sub    esp,0xc
c00141e5:	68 b5 ab 02 c0       	push   0xc002abb5
c00141ea:	e8 46 5c 00 00       	call   c0019e35 <Krnl::panic(char const*)>
c00141ef:	83 c4 10             	add    esp,0x10
c00141f2:	90                   	nop
c00141f3:	c9                   	leave  
c00141f4:	c3                   	ret    
c00141f5:	90                   	nop

c00141f6 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c00141f6:	56                   	push   esi
c00141f7:	53                   	push   ebx
c00141f8:	50                   	push   eax
c00141f9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00141fd:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014201:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0014206:	75 35                	jne    c001423d <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x47>
c0014208:	8d 43 20             	lea    eax,[ebx+0x20]
c001420b:	31 d2                	xor    edx,edx
c001420d:	89 c1                	mov    ecx,eax
c001420f:	c1 e1 04             	shl    ecx,0x4
c0014212:	01 f1                	add    ecx,esi
c0014214:	83 bc 91 58 01 00 00 00 	cmp    DWORD PTR [ecx+edx*4+0x158],0x0
c001421c:	74 3e                	je     c001425c <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x66>
c001421e:	42                   	inc    edx
c001421f:	83 fa 04             	cmp    edx,0x4
c0014222:	75 f0                	jne    c0014214 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1e>
c0014224:	83 ec 0c             	sub    esp,0xc
c0014227:	68 cf ab 02 c0       	push   0xc002abcf
c001422c:	e8 04 5c 00 00       	call   c0019e35 <Krnl::panic(char const*)>
c0014231:	83 c4 10             	add    esp,0x10
c0014234:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0014239:	5a                   	pop    edx
c001423a:	5b                   	pop    ebx
c001423b:	5e                   	pop    esi
c001423c:	c3                   	ret    
c001423d:	83 ec 0c             	sub    esp,0xc
c0014240:	56                   	push   esi
c0014241:	e8 bc fb ff ff       	call   c0013e02 <Device::getName()>
c0014246:	83 c4 10             	add    esp,0x10
c0014249:	80 38 41             	cmp    BYTE PTR [eax],0x41
c001424c:	75 ba                	jne    c0014208 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c001424e:	83 fb 0f             	cmp    ebx,0xf
c0014251:	7f 29                	jg     c001427c <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x86>
c0014253:	0f b6 9b 00 cc 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffd3400]
c001425a:	eb ac                	jmp    c0014208 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c001425c:	8d 04 82             	lea    eax,[edx+eax*4]
c001425f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0014263:	8d 04 86             	lea    eax,[esi+eax*4]
c0014266:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001426c:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0014270:	89 90 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edx
c0014276:	89 d8                	mov    eax,ebx
c0014278:	5a                   	pop    edx
c0014279:	5b                   	pop    ebx
c001427a:	5e                   	pop    esi
c001427b:	c3                   	ret    
c001427c:	83 ec 0c             	sub    esp,0xc
c001427f:	68 c2 ab 02 c0       	push   0xc002abc2
c0014284:	e8 ac 5b 00 00       	call   c0019e35 <Krnl::panic(char const*)>
c0014289:	83 c4 10             	add    esp,0x10
c001428c:	e9 77 ff ff ff       	jmp    c0014208 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0014291:	90                   	nop

c0014292 <InterruptController::clearAllHandlers(int, bool)>:
c0014292:	56                   	push   esi
c0014293:	53                   	push   ebx
c0014294:	52                   	push   edx
c0014295:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014299:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001429d:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c00142a2:	75 61                	jne    c0014305 <InterruptController::clearAllHandlers(int, bool)+0x73>
c00142a4:	8d 46 20             	lea    eax,[esi+0x20]
c00142a7:	c1 e6 04             	shl    esi,0x4
c00142aa:	c1 e0 04             	shl    eax,0x4
c00142ad:	01 de                	add    esi,ebx
c00142af:	01 d8                	add    eax,ebx
c00142b1:	c7 86 58 03 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x358],0x0
c00142bb:	c7 86 58 13 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x1358],0x0
c00142c5:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c00142cf:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c00142d9:	c7 80 60 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x160],0x0
c00142e3:	c7 80 60 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1160],0x0
c00142ed:	c7 80 64 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x164],0x0
c00142f7:	c7 80 64 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1164],0x0
c0014301:	58                   	pop    eax
c0014302:	5b                   	pop    ebx
c0014303:	5e                   	pop    esi
c0014304:	c3                   	ret    
c0014305:	83 ec 0c             	sub    esp,0xc
c0014308:	53                   	push   ebx
c0014309:	e8 f4 fa ff ff       	call   c0013e02 <Device::getName()>
c001430e:	83 c4 10             	add    esp,0x10
c0014311:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0014314:	75 8e                	jne    c00142a4 <InterruptController::clearAllHandlers(int, bool)+0x12>
c0014316:	83 fe 0f             	cmp    esi,0xf
c0014319:	7f 09                	jg     c0014324 <InterruptController::clearAllHandlers(int, bool)+0x92>
c001431b:	0f b6 b6 00 cc 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffd3400]
c0014322:	eb 80                	jmp    c00142a4 <InterruptController::clearAllHandlers(int, bool)+0x12>
c0014324:	83 ec 0c             	sub    esp,0xc
c0014327:	68 dc ab 02 c0       	push   0xc002abdc
c001432c:	e8 04 5b 00 00       	call   c0019e35 <Krnl::panic(char const*)>
c0014331:	83 c4 10             	add    esp,0x10
c0014334:	e9 6b ff ff ff       	jmp    c00142a4 <InterruptController::clearAllHandlers(int, bool)+0x12>
c0014339:	90                   	nop

c001433a <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c001433a:	56                   	push   esi
c001433b:	53                   	push   ebx
c001433c:	52                   	push   edx
c001433d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014341:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0014345:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c001434a:	75 3a                	jne    c0014386 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x4c>
c001434c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014350:	8d 50 20             	lea    edx,[eax+0x20]
c0014353:	c1 e2 04             	shl    edx,0x4
c0014356:	8d 04 16             	lea    eax,[esi+edx*1]
c0014359:	8d 54 16 10          	lea    edx,[esi+edx*1+0x10]
c001435d:	39 98 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ebx
c0014363:	74 0b                	je     c0014370 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x36>
c0014365:	83 c0 04             	add    eax,0x4
c0014368:	39 d0                	cmp    eax,edx
c001436a:	75 f1                	jne    c001435d <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x23>
c001436c:	58                   	pop    eax
c001436d:	5b                   	pop    ebx
c001436e:	5e                   	pop    esi
c001436f:	c3                   	ret    
c0014370:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c001437a:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c0014384:	eb df                	jmp    c0014365 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2b>
c0014386:	83 ec 0c             	sub    esp,0xc
c0014389:	56                   	push   esi
c001438a:	e8 73 fa ff ff       	call   c0013e02 <Device::getName()>
c001438f:	83 c4 10             	add    esp,0x10
c0014392:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0014395:	75 b5                	jne    c001434c <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c0014397:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c001439c:	7f 11                	jg     c00143af <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x75>
c001439e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00143a2:	0f b6 80 00 cc 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd3400]
c00143a9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00143ad:	eb 9d                	jmp    c001434c <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c00143af:	83 ec 0c             	sub    esp,0xc
c00143b2:	68 e9 ab 02 c0       	push   0xc002abe9
c00143b7:	e8 79 5a 00 00       	call   c0019e35 <Krnl::panic(char const*)>
c00143bc:	83 c4 10             	add    esp,0x10
c00143bf:	eb 8b                	jmp    c001434c <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>

c00143c1 <nmiHandler(regs*, void*)>:
c00143c1:	a1 a8 d9 02 c0       	mov    eax,ds:0xc002d9a8
c00143c6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00143ca:	e9 31 a9 ff ff       	jmp    c000ed00 <Computer::handleNMI()>

c00143cf <int_handler>:
c00143cf:	55                   	push   ebp
c00143d0:	57                   	push   edi
c00143d1:	56                   	push   esi
c00143d2:	53                   	push   ebx
c00143d3:	83 ec 0c             	sub    esp,0xc
c00143d6:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00143da:	80 3d e4 04 03 c0 00 	cmp    BYTE PTR ds:0xc00304e4,0x0
c00143e1:	74 0b                	je     c00143ee <int_handler+0x1f>
c00143e3:	fa                   	cli    
c00143e4:	f4                   	hlt    
c00143e5:	80 3d e4 04 03 c0 00 	cmp    BYTE PTR ds:0xc00304e4,0x0
c00143ec:	75 f5                	jne    c00143e3 <int_handler+0x14>
c00143ee:	a1 a8 d9 02 c0       	mov    eax,ds:0xc002d9a8
c00143f3:	8b 5e 30             	mov    ebx,DWORD PTR [esi+0x30]
c00143f6:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00143fc:	8b b8 88 11 00 00    	mov    edi,DWORD PTR [eax+0x1188]
c0014402:	8d 43 e0             	lea    eax,[ebx-0x20]
c0014405:	83 f8 17             	cmp    eax,0x17
c0014408:	77 13                	ja     c001441d <int_handler+0x4e>
c001440a:	83 ec 08             	sub    esp,0x8
c001440d:	8b 17                	mov    edx,DWORD PTR [edi]
c001440f:	8d 43 e0             	lea    eax,[ebx-0x20]
c0014412:	0f b6 c0             	movzx  eax,al
c0014415:	50                   	push   eax
c0014416:	57                   	push   edi
c0014417:	ff 52 38             	call   DWORD PTR [edx+0x38]
c001441a:	83 c4 10             	add    esp,0x10
c001441d:	83 c3 15             	add    ebx,0x15
c0014420:	c1 e3 04             	shl    ebx,0x4
c0014423:	8d 6c 1f 08          	lea    ebp,[edi+ebx*1+0x8]
c0014427:	8d bc 1f 08 10 00 00 	lea    edi,[edi+ebx*1+0x1008]
c001442e:	31 db                	xor    ebx,ebx
c0014430:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c0014434:	85 c0                	test   eax,eax
c0014436:	74 13                	je     c001444b <int_handler+0x7c>
c0014438:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c001443b:	83 7e 30 60          	cmp    DWORD PTR [esi+0x30],0x60
c001443f:	74 1c                	je     c001445d <int_handler+0x8e>
c0014441:	83 ec 08             	sub    esp,0x8
c0014444:	52                   	push   edx
c0014445:	56                   	push   esi
c0014446:	ff d0                	call   eax
c0014448:	83 c4 10             	add    esp,0x10
c001444b:	43                   	inc    ebx
c001444c:	83 fb 04             	cmp    ebx,0x4
c001444f:	75 df                	jne    c0014430 <int_handler+0x61>
c0014451:	83 c4 0c             	add    esp,0xc
c0014454:	31 c0                	xor    eax,eax
c0014456:	5b                   	pop    ebx
c0014457:	31 d2                	xor    edx,edx
c0014459:	5e                   	pop    esi
c001445a:	5f                   	pop    edi
c001445b:	5d                   	pop    ebp
c001445c:	c3                   	ret    
c001445d:	83 ec 08             	sub    esp,0x8
c0014460:	52                   	push   edx
c0014461:	56                   	push   esi
c0014462:	ff d0                	call   eax
c0014464:	83 c4 10             	add    esp,0x10
c0014467:	83 c4 0c             	add    esp,0xc
c001446a:	5b                   	pop    ebx
c001446b:	5e                   	pop    esi
c001446c:	5f                   	pop    edi
c001446d:	5d                   	pop    ebp
c001446e:	c3                   	ret    
c001446f:	90                   	nop

c0014470 <InterruptController::InterruptController(char const*)>:
c0014470:	83 ec 1c             	sub    esp,0x1c
c0014473:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014477:	83 ec 08             	sub    esp,0x8
c001447a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001447e:	50                   	push   eax
c001447f:	e8 82 f8 ff ff       	call   c0013d06 <Device::Device(char const*)>
c0014484:	83 c4 10             	add    esp,0x10
c0014487:	ba a4 ae 02 c0       	mov    edx,0xc002aea4
c001448c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014490:	89 10                	mov    DWORD PTR [eax],edx
c0014492:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014496:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c00144a0:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00144a8:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c00144b0:	7f 5e                	jg     c0014510 <InterruptController::InterruptController(char const*)+0xa0>
c00144b2:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00144ba:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c00144bf:	7f 49                	jg     c001450a <InterruptController::InterruptController(char const*)+0x9a>
c00144c1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00144c5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00144c9:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c00144d0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00144d4:	01 ca                	add    edx,ecx
c00144d6:	83 c2 54             	add    edx,0x54
c00144d9:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c00144e1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00144e5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00144e9:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c00144f0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00144f4:	01 ca                	add    edx,ecx
c00144f6:	81 c2 54 04 00 00    	add    edx,0x454
c00144fc:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0014504:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0014508:	eb b0                	jmp    c00144ba <InterruptController::InterruptController(char const*)+0x4a>
c001450a:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001450e:	eb 98                	jmp    c00144a8 <InterruptController::InterruptController(char const*)+0x38>
c0014510:	90                   	nop
c0014511:	83 c4 1c             	add    esp,0x1c
c0014514:	c3                   	ret    
c0014515:	90                   	nop

c0014516 <InterruptController::~InterruptController()>:
c0014516:	83 ec 0c             	sub    esp,0xc
c0014519:	ba a4 ae 02 c0       	mov    edx,0xc002aea4
c001451e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014522:	89 10                	mov    DWORD PTR [eax],edx
c0014524:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014528:	83 ec 0c             	sub    esp,0xc
c001452b:	50                   	push   eax
c001452c:	e8 9f f4 ff ff       	call   c00139d0 <Device::~Device()>
c0014531:	83 c4 10             	add    esp,0x10
c0014534:	90                   	nop
c0014535:	83 c4 0c             	add    esp,0xc
c0014538:	c3                   	ret    
c0014539:	90                   	nop

c001453a <InterruptController::~InterruptController()>:
c001453a:	83 ec 0c             	sub    esp,0xc
c001453d:	83 ec 0c             	sub    esp,0xc
c0014540:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014544:	e8 cd ff ff ff       	call   c0014516 <InterruptController::~InterruptController()>
c0014549:	83 c4 10             	add    esp,0x10
c001454c:	83 ec 08             	sub    esp,0x8
c001454f:	68 58 21 00 00       	push   0x2158
c0014554:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014558:	e8 94 e0 ff ff       	call   c00125f1 <operator delete(void*, unsigned long)>
c001455d:	83 c4 10             	add    esp,0x10
c0014560:	83 c4 0c             	add    esp,0xc
c0014563:	c3                   	ret    

c0014564 <displayDebugInfo(regs*)>:
c0014564:	55                   	push   ebp
c0014565:	57                   	push   edi
c0014566:	56                   	push   esi
c0014567:	53                   	push   ebx
c0014568:	83 ec 24             	sub    esp,0x24
c001456b:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001456f:	0f 20 c2             	mov    edx,cr0
c0014572:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0014576:	0f 20 d7             	mov    edi,cr2
c0014579:	0f 20 de             	mov    esi,cr3
c001457c:	0f 20 e5             	mov    ebp,cr4
c001457f:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c0014582:	68 f6 ab 02 c0       	push   0xc002abf6
c0014587:	e8 3d e1 ff ff       	call   c00126c9 <Dbg::kprintf(char const*, ...)>
c001458c:	59                   	pop    ecx
c001458d:	58                   	pop    eax
c001458e:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0014591:	68 01 ac 02 c0       	push   0xc002ac01
c0014596:	e8 2e e1 ff ff       	call   c00126c9 <Dbg::kprintf(char const*, ...)>
c001459b:	58                   	pop    eax
c001459c:	5a                   	pop    edx
c001459d:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00145a0:	68 0c ac 02 c0       	push   0xc002ac0c
c00145a5:	e8 1f e1 ff ff       	call   c00126c9 <Dbg::kprintf(char const*, ...)>
c00145aa:	59                   	pop    ecx
c00145ab:	58                   	pop    eax
c00145ac:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00145af:	68 17 ac 02 c0       	push   0xc002ac17
c00145b4:	e8 10 e1 ff ff       	call   c00126c9 <Dbg::kprintf(char const*, ...)>
c00145b9:	58                   	pop    eax
c00145ba:	5a                   	pop    edx
c00145bb:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00145be:	68 22 ac 02 c0       	push   0xc002ac22
c00145c3:	e8 01 e1 ff ff       	call   c00126c9 <Dbg::kprintf(char const*, ...)>
c00145c8:	59                   	pop    ecx
c00145c9:	58                   	pop    eax
c00145ca:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c00145cd:	68 2d ac 02 c0       	push   0xc002ac2d
c00145d2:	e8 f2 e0 ff ff       	call   c00126c9 <Dbg::kprintf(char const*, ...)>
c00145d7:	58                   	pop    eax
c00145d8:	5a                   	pop    edx
c00145d9:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00145dc:	68 38 ac 02 c0       	push   0xc002ac38
c00145e1:	e8 e3 e0 ff ff       	call   c00126c9 <Dbg::kprintf(char const*, ...)>
c00145e6:	59                   	pop    ecx
c00145e7:	58                   	pop    eax
c00145e8:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00145eb:	68 43 ac 02 c0       	push   0xc002ac43
c00145f0:	e8 d4 e0 ff ff       	call   c00126c9 <Dbg::kprintf(char const*, ...)>
c00145f5:	58                   	pop    eax
c00145f6:	5a                   	pop    edx
c00145f7:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c00145fa:	68 4e ac 02 c0       	push   0xc002ac4e
c00145ff:	e8 c5 e0 ff ff       	call   c00126c9 <Dbg::kprintf(char const*, ...)>
c0014604:	59                   	pop    ecx
c0014605:	58                   	pop    eax
c0014606:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014609:	68 5d ac 02 c0       	push   0xc002ac5d
c001460e:	e8 b6 e0 ff ff       	call   c00126c9 <Dbg::kprintf(char const*, ...)>
c0014613:	58                   	pop    eax
c0014614:	5a                   	pop    edx
c0014615:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0014618:	68 68 ac 02 c0       	push   0xc002ac68
c001461d:	e8 a7 e0 ff ff       	call   c00126c9 <Dbg::kprintf(char const*, ...)>
c0014622:	59                   	pop    ecx
c0014623:	58                   	pop    eax
c0014624:	57                   	push   edi
c0014625:	68 73 ac 02 c0       	push   0xc002ac73
c001462a:	e8 9a e0 ff ff       	call   c00126c9 <Dbg::kprintf(char const*, ...)>
c001462f:	58                   	pop    eax
c0014630:	5a                   	pop    edx
c0014631:	56                   	push   esi
c0014632:	68 7e ac 02 c0       	push   0xc002ac7e
c0014637:	e8 8d e0 ff ff       	call   c00126c9 <Dbg::kprintf(char const*, ...)>
c001463c:	59                   	pop    ecx
c001463d:	a1 f0 0e 03 c0       	mov    eax,ds:0xc0030ef0
c0014642:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014648:	e8 06 bd ff ff       	call   c0010353 <setActiveTerminal(VgaText*)>
c001464d:	58                   	pop    eax
c001464e:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0014651:	5a                   	pop    edx
c0014652:	c1 e0 05             	shl    eax,0x5
c0014655:	05 60 c9 02 c0       	add    eax,0xc002c960
c001465a:	50                   	push   eax
c001465b:	a1 f0 0e 03 c0       	mov    eax,ds:0xc0030ef0
c0014660:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014666:	e8 f5 c1 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c001466b:	59                   	pop    ecx
c001466c:	58                   	pop    eax
c001466d:	a1 f0 0e 03 c0       	mov    eax,ds:0xc0030ef0
c0014672:	68 89 ac 02 c0       	push   0xc002ac89
c0014677:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001467d:	e8 de c1 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c0014682:	58                   	pop    eax
c0014683:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014688:	5a                   	pop    edx
c0014689:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001468c:	83 c0 0c             	add    eax,0xc
c001468f:	50                   	push   eax
c0014690:	a1 f0 0e 03 c0       	mov    eax,ds:0xc0030ef0
c0014695:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001469b:	e8 c0 c1 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c00146a0:	59                   	pop    ecx
c00146a1:	58                   	pop    eax
c00146a2:	a1 f0 0e 03 c0       	mov    eax,ds:0xc0030ef0
c00146a7:	68 92 ac 02 c0       	push   0xc002ac92
c00146ac:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00146b2:	e8 a9 c1 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c00146b7:	58                   	pop    eax
c00146b8:	a1 f0 0e 03 c0       	mov    eax,ds:0xc0030ef0
c00146bd:	5a                   	pop    edx
c00146be:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00146c1:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00146c7:	e8 4e c1 ff ff       	call   c001081a <VgaText::putx(unsigned int)>
c00146cc:	59                   	pop    ecx
c00146cd:	58                   	pop    eax
c00146ce:	a1 f0 0e 03 c0       	mov    eax,ds:0xc0030ef0
c00146d3:	68 9a ac 02 c0       	push   0xc002ac9a
c00146d8:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00146de:	e8 7d c1 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c00146e3:	58                   	pop    eax
c00146e4:	a1 f0 0e 03 c0       	mov    eax,ds:0xc0030ef0
c00146e9:	5a                   	pop    edx
c00146ea:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00146ed:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00146f3:	e8 22 c1 ff ff       	call   c001081a <VgaText::putx(unsigned int)>
c00146f8:	59                   	pop    ecx
c00146f9:	58                   	pop    eax
c00146fa:	a1 f0 0e 03 c0       	mov    eax,ds:0xc0030ef0
c00146ff:	68 a2 ac 02 c0       	push   0xc002aca2
c0014704:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001470a:	e8 51 c1 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c001470f:	58                   	pop    eax
c0014710:	a1 f0 0e 03 c0       	mov    eax,ds:0xc0030ef0
c0014715:	5a                   	pop    edx
c0014716:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c0014719:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001471f:	e8 f6 c0 ff ff       	call   c001081a <VgaText::putx(unsigned int)>
c0014724:	59                   	pop    ecx
c0014725:	58                   	pop    eax
c0014726:	a1 f0 0e 03 c0       	mov    eax,ds:0xc0030ef0
c001472b:	68 aa ac 02 c0       	push   0xc002acaa
c0014730:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014736:	e8 25 c1 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c001473b:	58                   	pop    eax
c001473c:	a1 f0 0e 03 c0       	mov    eax,ds:0xc0030ef0
c0014741:	5a                   	pop    edx
c0014742:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0014745:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001474b:	e8 ca c0 ff ff       	call   c001081a <VgaText::putx(unsigned int)>
c0014750:	59                   	pop    ecx
c0014751:	58                   	pop    eax
c0014752:	a1 f0 0e 03 c0       	mov    eax,ds:0xc0030ef0
c0014757:	68 b2 ac 02 c0       	push   0xc002acb2
c001475c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014762:	e8 f9 c0 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c0014767:	58                   	pop    eax
c0014768:	a1 f0 0e 03 c0       	mov    eax,ds:0xc0030ef0
c001476d:	5a                   	pop    edx
c001476e:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0014771:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014777:	e8 9e c0 ff ff       	call   c001081a <VgaText::putx(unsigned int)>
c001477c:	59                   	pop    ecx
c001477d:	58                   	pop    eax
c001477e:	a1 f0 0e 03 c0       	mov    eax,ds:0xc0030ef0
c0014783:	68 ba ac 02 c0       	push   0xc002acba
c0014788:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001478e:	e8 cd c0 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c0014793:	58                   	pop    eax
c0014794:	a1 f0 0e 03 c0       	mov    eax,ds:0xc0030ef0
c0014799:	5a                   	pop    edx
c001479a:	ff 73 40             	push   DWORD PTR [ebx+0x40]
c001479d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00147a3:	e8 72 c0 ff ff       	call   c001081a <VgaText::putx(unsigned int)>
c00147a8:	59                   	pop    ecx
c00147a9:	58                   	pop    eax
c00147aa:	a1 f0 0e 03 c0       	mov    eax,ds:0xc0030ef0
c00147af:	68 c2 ac 02 c0       	push   0xc002acc2
c00147b4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00147ba:	e8 a1 c0 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c00147bf:	58                   	pop    eax
c00147c0:	a1 f0 0e 03 c0       	mov    eax,ds:0xc0030ef0
c00147c5:	5a                   	pop    edx
c00147c6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00147ca:	52                   	push   edx
c00147cb:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00147d1:	e8 44 c0 ff ff       	call   c001081a <VgaText::putx(unsigned int)>
c00147d6:	59                   	pop    ecx
c00147d7:	58                   	pop    eax
c00147d8:	a1 f0 0e 03 c0       	mov    eax,ds:0xc0030ef0
c00147dd:	68 cb ac 02 c0       	push   0xc002accb
c00147e2:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00147e8:	e8 73 c0 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c00147ed:	58                   	pop    eax
c00147ee:	a1 f0 0e 03 c0       	mov    eax,ds:0xc0030ef0
c00147f3:	5a                   	pop    edx
c00147f4:	57                   	push   edi
c00147f5:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00147fb:	e8 1a c0 ff ff       	call   c001081a <VgaText::putx(unsigned int)>
c0014800:	59                   	pop    ecx
c0014801:	a1 f0 0e 03 c0       	mov    eax,ds:0xc0030ef0
c0014806:	5f                   	pop    edi
c0014807:	68 d3 ac 02 c0       	push   0xc002acd3
c001480c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014812:	e8 49 c0 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c0014817:	58                   	pop    eax
c0014818:	a1 f0 0e 03 c0       	mov    eax,ds:0xc0030ef0
c001481d:	5a                   	pop    edx
c001481e:	56                   	push   esi
c001481f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014825:	e8 f0 bf ff ff       	call   c001081a <VgaText::putx(unsigned int)>
c001482a:	59                   	pop    ecx
c001482b:	a1 f0 0e 03 c0       	mov    eax,ds:0xc0030ef0
c0014830:	5e                   	pop    esi
c0014831:	68 db ac 02 c0       	push   0xc002acdb
c0014836:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001483c:	e8 1f c0 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c0014841:	5f                   	pop    edi
c0014842:	58                   	pop    eax
c0014843:	a1 f0 0e 03 c0       	mov    eax,ds:0xc0030ef0
c0014848:	55                   	push   ebp
c0014849:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001484f:	e8 c6 bf ff ff       	call   c001081a <VgaText::putx(unsigned int)>
c0014854:	58                   	pop    eax
c0014855:	a1 f0 0e 03 c0       	mov    eax,ds:0xc0030ef0
c001485a:	5a                   	pop    edx
c001485b:	68 e3 ac 02 c0       	push   0xc002ace3
c0014860:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014866:	e8 f5 bf ff ff       	call   c0010860 <VgaText::puts(char const*)>
c001486b:	0f 21 c0             	mov    eax,db0
c001486e:	59                   	pop    ecx
c001486f:	5e                   	pop    esi
c0014870:	50                   	push   eax
c0014871:	a1 f0 0e 03 c0       	mov    eax,ds:0xc0030ef0
c0014876:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001487c:	e8 99 bf ff ff       	call   c001081a <VgaText::putx(unsigned int)>
c0014881:	5f                   	pop    edi
c0014882:	a1 f0 0e 03 c0       	mov    eax,ds:0xc0030ef0
c0014887:	5d                   	pop    ebp
c0014888:	68 ec ac 02 c0       	push   0xc002acec
c001488d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014893:	e8 c8 bf ff ff       	call   c0010860 <VgaText::puts(char const*)>
c0014898:	0f 21 c8             	mov    eax,db1
c001489b:	5a                   	pop    edx
c001489c:	59                   	pop    ecx
c001489d:	50                   	push   eax
c001489e:	a1 f0 0e 03 c0       	mov    eax,ds:0xc0030ef0
c00148a3:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00148a9:	e8 6c bf ff ff       	call   c001081a <VgaText::putx(unsigned int)>
c00148ae:	5e                   	pop    esi
c00148af:	a1 f0 0e 03 c0       	mov    eax,ds:0xc0030ef0
c00148b4:	5f                   	pop    edi
c00148b5:	68 f4 ac 02 c0       	push   0xc002acf4
c00148ba:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00148c0:	e8 9b bf ff ff       	call   c0010860 <VgaText::puts(char const*)>
c00148c5:	0f 21 d0             	mov    eax,db2
c00148c8:	5d                   	pop    ebp
c00148c9:	5a                   	pop    edx
c00148ca:	50                   	push   eax
c00148cb:	a1 f0 0e 03 c0       	mov    eax,ds:0xc0030ef0
c00148d0:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00148d6:	e8 3f bf ff ff       	call   c001081a <VgaText::putx(unsigned int)>
c00148db:	59                   	pop    ecx
c00148dc:	a1 f0 0e 03 c0       	mov    eax,ds:0xc0030ef0
c00148e1:	5e                   	pop    esi
c00148e2:	68 fc ac 02 c0       	push   0xc002acfc
c00148e7:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00148ed:	e8 6e bf ff ff       	call   c0010860 <VgaText::puts(char const*)>
c00148f2:	0f 21 d8             	mov    eax,db3
c00148f5:	5f                   	pop    edi
c00148f6:	5d                   	pop    ebp
c00148f7:	50                   	push   eax
c00148f8:	a1 f0 0e 03 c0       	mov    eax,ds:0xc0030ef0
c00148fd:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014903:	e8 12 bf ff ff       	call   c001081a <VgaText::putx(unsigned int)>
c0014908:	58                   	pop    eax
c0014909:	a1 f0 0e 03 c0       	mov    eax,ds:0xc0030ef0
c001490e:	5a                   	pop    edx
c001490f:	68 04 ad 02 c0       	push   0xc002ad04
c0014914:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001491a:	e8 41 bf ff ff       	call   c0010860 <VgaText::puts(char const*)>
c001491f:	0f 21 f0             	mov    eax,db6
c0014922:	59                   	pop    ecx
c0014923:	5e                   	pop    esi
c0014924:	50                   	push   eax
c0014925:	a1 f0 0e 03 c0       	mov    eax,ds:0xc0030ef0
c001492a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014930:	e8 e5 be ff ff       	call   c001081a <VgaText::putx(unsigned int)>
c0014935:	5f                   	pop    edi
c0014936:	a1 f0 0e 03 c0       	mov    eax,ds:0xc0030ef0
c001493b:	5d                   	pop    ebp
c001493c:	68 0c ad 02 c0       	push   0xc002ad0c
c0014941:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014947:	e8 14 bf ff ff       	call   c0010860 <VgaText::puts(char const*)>
c001494c:	0f 21 f8             	mov    eax,db7
c001494f:	5a                   	pop    edx
c0014950:	59                   	pop    ecx
c0014951:	50                   	push   eax
c0014952:	a1 f0 0e 03 c0       	mov    eax,ds:0xc0030ef0
c0014957:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001495d:	e8 b8 be ff ff       	call   c001081a <VgaText::putx(unsigned int)>
c0014962:	5e                   	pop    esi
c0014963:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014966:	e8 43 86 00 00       	call   c001cfae <Thr::getDriverNameFromAddress(unsigned long)>
c001496b:	83 c4 10             	add    esp,0x10
c001496e:	85 c0                	test   eax,eax
c0014970:	74 7d                	je     c00149ef <displayDebugInfo(regs*)+0x48b>
c0014972:	89 c6                	mov    esi,eax
c0014974:	50                   	push   eax
c0014975:	50                   	push   eax
c0014976:	56                   	push   esi
c0014977:	68 14 ad 02 c0       	push   0xc002ad14
c001497c:	e8 48 dd ff ff       	call   c00126c9 <Dbg::kprintf(char const*, ...)>
c0014981:	5a                   	pop    edx
c0014982:	a1 f0 0e 03 c0       	mov    eax,ds:0xc0030ef0
c0014987:	59                   	pop    ecx
c0014988:	68 22 ad 02 c0       	push   0xc002ad22
c001498d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014993:	e8 c8 be ff ff       	call   c0010860 <VgaText::puts(char const*)>
c0014998:	5f                   	pop    edi
c0014999:	a1 f0 0e 03 c0       	mov    eax,ds:0xc0030ef0
c001499e:	5d                   	pop    ebp
c001499f:	56                   	push   esi
c00149a0:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00149a6:	e8 b5 be ff ff       	call   c0010860 <VgaText::puts(char const*)>
c00149ab:	58                   	pop    eax
c00149ac:	a1 f0 0e 03 c0       	mov    eax,ds:0xc0030ef0
c00149b1:	5a                   	pop    edx
c00149b2:	68 2e ad 02 c0       	push   0xc002ad2e
c00149b7:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00149bd:	e8 9e be ff ff       	call   c0010860 <VgaText::puts(char const*)>
c00149c2:	59                   	pop    ecx
c00149c3:	a1 f0 0e 03 c0       	mov    eax,ds:0xc0030ef0
c00149c8:	8b b8 26 05 00 00    	mov    edi,DWORD PTR [eax+0x526]
c00149ce:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00149d1:	e8 0f 86 00 00       	call   c001cfe5 <Thr::getDriverOffsetFromAddress(unsigned long)>
c00149d6:	5b                   	pop    ebx
c00149d7:	5d                   	pop    ebp
c00149d8:	50                   	push   eax
c00149d9:	57                   	push   edi
c00149da:	e8 3b be ff ff       	call   c001081a <VgaText::putx(unsigned int)>
c00149df:	58                   	pop    eax
c00149e0:	5a                   	pop    edx
c00149e1:	56                   	push   esi
c00149e2:	68 3a ad 02 c0       	push   0xc002ad3a
c00149e7:	e8 dd dc ff ff       	call   c00126c9 <Dbg::kprintf(char const*, ...)>
c00149ec:	83 c4 10             	add    esp,0x10
c00149ef:	fa                   	cli    
c00149f0:	f4                   	hlt    
c00149f1:	eb fe                	jmp    c00149f1 <displayDebugInfo(regs*)+0x48d>

c00149f3 <x87EmulHandler(regs*, void*)>:
c00149f3:	83 ec 0c             	sub    esp,0xc
c00149f6:	0f 20 c2             	mov    edx,cr0
c00149f9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00149fe:	80 78 62 00          	cmp    BYTE PTR [eax+0x62],0x0
c0014a02:	75 4b                	jne    c0014a4f <x87EmulHandler(regs*, void*)+0x5c>
c0014a04:	a1 a8 d9 02 c0       	mov    eax,ds:0xc002d9a8
c0014a09:	8b 80 e0 01 00 00    	mov    eax,DWORD PTR [eax+0x1e0]
c0014a0f:	85 c0                	test   eax,eax
c0014a11:	74 05                	je     c0014a18 <x87EmulHandler(regs*, void*)+0x25>
c0014a13:	83 e2 08             	and    edx,0x8
c0014a16:	75 17                	jne    c0014a2f <x87EmulHandler(regs*, void*)+0x3c>
c0014a18:	83 ec 0c             	sub    esp,0xc
c0014a1b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014a1f:	e8 61 a9 00 00       	call   c001f385 <Vm::x87Handler(regs*)>
c0014a24:	83 c4 10             	add    esp,0x10
c0014a27:	84 c0                	test   al,al
c0014a29:	74 24                	je     c0014a4f <x87EmulHandler(regs*, void*)+0x5c>
c0014a2b:	83 c4 0c             	add    esp,0xc
c0014a2e:	c3                   	ret    
c0014a2f:	83 ec 0c             	sub    esp,0xc
c0014a32:	68 60 ad 02 c0       	push   0xc002ad60
c0014a37:	e8 8d dc ff ff       	call   c00126c9 <Dbg::kprintf(char const*, ...)>
c0014a3c:	0f 06                	clts   
c0014a3e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014a43:	83 c4 10             	add    esp,0x10
c0014a46:	a3 28 db 02 c0       	mov    ds:0xc002db28,eax
c0014a4b:	83 c4 0c             	add    esp,0xc
c0014a4e:	c3                   	ret    
c0014a4f:	83 ec 0c             	sub    esp,0xc
c0014a52:	68 4a ad 02 c0       	push   0xc002ad4a
c0014a57:	e8 6d dc ff ff       	call   c00126c9 <Dbg::kprintf(char const*, ...)>
c0014a5c:	5a                   	pop    edx
c0014a5d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014a61:	e8 fe fa ff ff       	call   c0014564 <displayDebugInfo(regs*)>

c0014a66 <gpFault(regs*, void*)>:
c0014a66:	53                   	push   ebx
c0014a67:	83 ec 14             	sub    esp,0x14
c0014a6a:	c7 05 24 db 02 c0 5e e8 01 c0 	mov    DWORD PTR ds:0xc002db24,0xc001e85e
c0014a74:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014a78:	53                   	push   ebx
c0014a79:	e8 e0 9d 00 00       	call   c001e85e <Vm::faultHandler(regs*)>
c0014a7e:	83 c4 10             	add    esp,0x10
c0014a81:	84 c0                	test   al,al
c0014a83:	74 05                	je     c0014a8a <gpFault(regs*, void*)+0x24>
c0014a85:	83 c4 08             	add    esp,0x8
c0014a88:	5b                   	pop    ebx
c0014a89:	c3                   	ret    
c0014a8a:	83 ec 0c             	sub    esp,0xc
c0014a8d:	68 6d ad 02 c0       	push   0xc002ad6d
c0014a92:	e8 32 dc ff ff       	call   c00126c9 <Dbg::kprintf(char const*, ...)>
c0014a97:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014a9a:	e8 c5 fa ff ff       	call   c0014564 <displayDebugInfo(regs*)>

c0014a9f <pgFault(regs*, void*)>:
c0014a9f:	83 ec 18             	sub    esp,0x18
c0014aa2:	68 88 ad 02 c0       	push   0xc002ad88
c0014aa7:	e8 1d dc ff ff       	call   c00126c9 <Dbg::kprintf(char const*, ...)>
c0014aac:	0f 20 d0             	mov    eax,cr2
c0014aaf:	5a                   	pop    edx
c0014ab0:	59                   	pop    ecx
c0014ab1:	50                   	push   eax
c0014ab2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014ab7:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014aba:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c0014ac0:	e8 2d d7 ff ff       	call   c00121f2 <VAS::tryLoadBackOffDisk(unsigned long)>
c0014ac5:	83 c4 10             	add    esp,0x10
c0014ac8:	84 c0                	test   al,al
c0014aca:	74 04                	je     c0014ad0 <pgFault(regs*, void*)+0x31>
c0014acc:	83 c4 0c             	add    esp,0xc
c0014acf:	c3                   	ret    
c0014ad0:	83 ec 0c             	sub    esp,0xc
c0014ad3:	68 92 ad 02 c0       	push   0xc002ad92
c0014ad8:	e8 ec db ff ff       	call   c00126c9 <Dbg::kprintf(char const*, ...)>
c0014add:	58                   	pop    eax
c0014ade:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014ae2:	e8 7d fa ff ff       	call   c0014564 <displayDebugInfo(regs*)>

c0014ae7 <otherISRHandler(regs*, void*)>:
c0014ae7:	53                   	push   ebx
c0014ae8:	83 ec 0c             	sub    esp,0xc
c0014aeb:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014aef:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0014af2:	50                   	push   eax
c0014af3:	50                   	push   eax
c0014af4:	68 9f ad 02 c0       	push   0xc002ad9f
c0014af9:	e8 cb db ff ff       	call   c00126c9 <Dbg::kprintf(char const*, ...)>
c0014afe:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014b01:	e8 5e fa ff ff       	call   c0014564 <displayDebugInfo(regs*)>

c0014b06 <opcodeFault(regs*, void*)>:
c0014b06:	55                   	push   ebp
c0014b07:	89 e5                	mov    ebp,esp
c0014b09:	56                   	push   esi
c0014b0a:	53                   	push   ebx
c0014b0b:	83 ec 40             	sub    esp,0x40
c0014b0e:	a1 a8 d9 02 c0       	mov    eax,ds:0xc002d9a8
c0014b13:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0014b19:	8a 80 94 11 00 00    	mov    al,BYTE PTR [eax+0x1194]
c0014b1f:	84 c0                	test   al,al
c0014b21:	74 24                	je     c0014b47 <opcodeFault(regs*, void*)+0x41>
c0014b23:	83 ec 0c             	sub    esp,0xc
c0014b26:	68 bc ad 02 c0       	push   0xc002adbc
c0014b2b:	e8 99 db ff ff       	call   c00126c9 <Dbg::kprintf(char const*, ...)>
c0014b30:	83 c4 10             	add    esp,0x10
c0014b33:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014b36:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014b39:	8d 50 19             	lea    edx,[eax+0x19]
c0014b3c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014b3f:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014b42:	e9 d5 05 00 00       	jmp    c001511c <opcodeFault(regs*, void*)+0x616>
c0014b47:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014b4a:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014b4d:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0014b50:	c6 45 f3 00          	mov    BYTE PTR [ebp-0xd],0x0
c0014b54:	c6 45 f2 00          	mov    BYTE PTR [ebp-0xe],0x0
c0014b58:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014b5b:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014b5e:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0014b61:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014b64:	8a 00                	mov    al,BYTE PTR [eax]
c0014b66:	3c f0                	cmp    al,0xf0
c0014b68:	75 17                	jne    c0014b81 <opcodeFault(regs*, void*)+0x7b>
c0014b6a:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014b6d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014b70:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014b73:	8d 50 01             	lea    edx,[eax+0x1]
c0014b76:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014b79:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014b7c:	e9 da 00 00 00       	jmp    c0014c5b <opcodeFault(regs*, void*)+0x155>
c0014b81:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014b84:	8a 00                	mov    al,BYTE PTR [eax]
c0014b86:	3c f2                	cmp    al,0xf2
c0014b88:	74 09                	je     c0014b93 <opcodeFault(regs*, void*)+0x8d>
c0014b8a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014b8d:	8a 00                	mov    al,BYTE PTR [eax]
c0014b8f:	3c f3                	cmp    al,0xf3
c0014b91:	75 1b                	jne    c0014bae <opcodeFault(regs*, void*)+0xa8>
c0014b93:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014b97:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014b9a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014b9d:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014ba0:	8d 50 01             	lea    edx,[eax+0x1]
c0014ba3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ba6:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014ba9:	e9 ad 00 00 00       	jmp    c0014c5b <opcodeFault(regs*, void*)+0x155>
c0014bae:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014bb1:	8a 00                	mov    al,BYTE PTR [eax]
c0014bb3:	3c 66                	cmp    al,0x66
c0014bb5:	75 1f                	jne    c0014bd6 <opcodeFault(regs*, void*)+0xd0>
c0014bb7:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014bbb:	c6 45 f2 01          	mov    BYTE PTR [ebp-0xe],0x1
c0014bbf:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014bc2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014bc5:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014bc8:	8d 50 01             	lea    edx,[eax+0x1]
c0014bcb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014bce:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014bd1:	e9 85 00 00 00       	jmp    c0014c5b <opcodeFault(regs*, void*)+0x155>
c0014bd6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014bd9:	8a 00                	mov    al,BYTE PTR [eax]
c0014bdb:	3c 67                	cmp    al,0x67
c0014bdd:	75 18                	jne    c0014bf7 <opcodeFault(regs*, void*)+0xf1>
c0014bdf:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014be3:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014be6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014be9:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014bec:	8d 50 01             	lea    edx,[eax+0x1]
c0014bef:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014bf2:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014bf5:	eb 64                	jmp    c0014c5b <opcodeFault(regs*, void*)+0x155>
c0014bf7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014bfa:	8a 00                	mov    al,BYTE PTR [eax]
c0014bfc:	3c 2e                	cmp    al,0x2e
c0014bfe:	74 09                	je     c0014c09 <opcodeFault(regs*, void*)+0x103>
c0014c00:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014c03:	8a 00                	mov    al,BYTE PTR [eax]
c0014c05:	3c 3e                	cmp    al,0x3e
c0014c07:	75 18                	jne    c0014c21 <opcodeFault(regs*, void*)+0x11b>
c0014c09:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014c0d:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014c10:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c13:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014c16:	8d 50 01             	lea    edx,[eax+0x1]
c0014c19:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c1c:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014c1f:	eb 3a                	jmp    c0014c5b <opcodeFault(regs*, void*)+0x155>
c0014c21:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014c24:	8a 00                	mov    al,BYTE PTR [eax]
c0014c26:	3c 36                	cmp    al,0x36
c0014c28:	74 1b                	je     c0014c45 <opcodeFault(regs*, void*)+0x13f>
c0014c2a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014c2d:	8a 00                	mov    al,BYTE PTR [eax]
c0014c2f:	3c 26                	cmp    al,0x26
c0014c31:	74 12                	je     c0014c45 <opcodeFault(regs*, void*)+0x13f>
c0014c33:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014c36:	8a 00                	mov    al,BYTE PTR [eax]
c0014c38:	3c 64                	cmp    al,0x64
c0014c3a:	74 09                	je     c0014c45 <opcodeFault(regs*, void*)+0x13f>
c0014c3c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014c3f:	8a 00                	mov    al,BYTE PTR [eax]
c0014c41:	3c 65                	cmp    al,0x65
c0014c43:	75 16                	jne    c0014c5b <opcodeFault(regs*, void*)+0x155>
c0014c45:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014c49:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014c4c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c4f:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014c52:	8d 50 01             	lea    edx,[eax+0x1]
c0014c55:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c58:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014c5b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014c5e:	8a 00                	mov    al,BYTE PTR [eax]
c0014c60:	3c 0f                	cmp    al,0xf
c0014c62:	0f 85 ad 00 00 00    	jne    c0014d15 <opcodeFault(regs*, void*)+0x20f>
c0014c68:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014c6b:	40                   	inc    eax
c0014c6c:	8a 00                	mov    al,BYTE PTR [eax]
c0014c6e:	3c c2                	cmp    al,0xc2
c0014c70:	74 0e                	je     c0014c80 <opcodeFault(regs*, void*)+0x17a>
c0014c72:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014c75:	40                   	inc    eax
c0014c76:	8a 00                	mov    al,BYTE PTR [eax]
c0014c78:	3c c3                	cmp    al,0xc3
c0014c7a:	0f 85 95 00 00 00    	jne    c0014d15 <opcodeFault(regs*, void*)+0x20f>
c0014c80:	83 ec 0c             	sub    esp,0xc
c0014c83:	68 df ad 02 c0       	push   0xc002addf
c0014c88:	e8 3c da ff ff       	call   c00126c9 <Dbg::kprintf(char const*, ...)>
c0014c8d:	83 c4 10             	add    esp,0x10
c0014c90:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c93:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014c96:	8d 50 01             	lea    edx,[eax+0x1]
c0014c99:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c9c:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014c9f:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014ca2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014ca5:	8a 00                	mov    al,BYTE PTR [eax]
c0014ca7:	8d 50 fe             	lea    edx,[eax-0x2]
c0014caa:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014cad:	88 10                	mov    BYTE PTR [eax],dl
c0014caf:	8d 45 c2             	lea    eax,[ebp-0x3e]
c0014cb2:	50                   	push   eax
c0014cb3:	8d 45 c3             	lea    eax,[ebp-0x3d]
c0014cb6:	50                   	push   eax
c0014cb7:	8d 45 c4             	lea    eax,[ebp-0x3c]
c0014cba:	50                   	push   eax
c0014cbb:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0014cbe:	e8 8b 48 00 00       	call   c001954e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c0014cc3:	83 c4 10             	add    esp,0x10
c0014cc6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014cc9:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014ccc:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c0014ccf:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
c0014cd2:	01 d0                	add    eax,edx
c0014cd4:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0014cd7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014cda:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014cdd:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c0014ce0:	48                   	dec    eax
c0014ce1:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0014ce4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ce7:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0014cea:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014ced:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014cf0:	83 ec 04             	sub    esp,0x4
c0014cf3:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c0014cf6:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0014cf9:	50                   	push   eax
c0014cfa:	e8 b5 b4 fe ff       	call   c00001b4 <voodooXADD>
c0014cff:	83 c4 10             	add    esp,0x10
c0014d02:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0014d05:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0014d08:	01 c2                	add    edx,eax
c0014d0a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d0d:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014d10:	e9 07 04 00 00       	jmp    c001511c <opcodeFault(regs*, void*)+0x616>
c0014d15:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014d18:	8a 00                	mov    al,BYTE PTR [eax]
c0014d1a:	3c 0f                	cmp    al,0xf
c0014d1c:	0f 85 8b 01 00 00    	jne    c0014ead <opcodeFault(regs*, void*)+0x3a7>
c0014d22:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014d25:	40                   	inc    eax
c0014d26:	8a 00                	mov    al,BYTE PTR [eax]
c0014d28:	3c c7                	cmp    al,0xc7
c0014d2a:	0f 86 7d 01 00 00    	jbe    c0014ead <opcodeFault(regs*, void*)+0x3a7>
c0014d30:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014d33:	40                   	inc    eax
c0014d34:	8a 00                	mov    al,BYTE PTR [eax]
c0014d36:	3c cf                	cmp    al,0xcf
c0014d38:	0f 87 6f 01 00 00    	ja     c0014ead <opcodeFault(regs*, void*)+0x3a7>
c0014d3e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014d41:	40                   	inc    eax
c0014d42:	8a 00                	mov    al,BYTE PTR [eax]
c0014d44:	83 c0 38             	add    eax,0x38
c0014d47:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c0014d4a:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c0014d4e:	75 0b                	jne    c0014d5b <opcodeFault(regs*, void*)+0x255>
c0014d50:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d53:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0014d56:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014d59:	eb 75                	jmp    c0014dd0 <opcodeFault(regs*, void*)+0x2ca>
c0014d5b:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c0014d5f:	75 0b                	jne    c0014d6c <opcodeFault(regs*, void*)+0x266>
c0014d61:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d64:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0014d67:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014d6a:	eb 64                	jmp    c0014dd0 <opcodeFault(regs*, void*)+0x2ca>
c0014d6c:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c0014d70:	75 0b                	jne    c0014d7d <opcodeFault(regs*, void*)+0x277>
c0014d72:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d75:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0014d78:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014d7b:	eb 53                	jmp    c0014dd0 <opcodeFault(regs*, void*)+0x2ca>
c0014d7d:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c0014d81:	75 0b                	jne    c0014d8e <opcodeFault(regs*, void*)+0x288>
c0014d83:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d86:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0014d89:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014d8c:	eb 42                	jmp    c0014dd0 <opcodeFault(regs*, void*)+0x2ca>
c0014d8e:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c0014d92:	75 0b                	jne    c0014d9f <opcodeFault(regs*, void*)+0x299>
c0014d94:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d97:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0014d9a:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014d9d:	eb 31                	jmp    c0014dd0 <opcodeFault(regs*, void*)+0x2ca>
c0014d9f:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c0014da3:	75 0b                	jne    c0014db0 <opcodeFault(regs*, void*)+0x2aa>
c0014da5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014da8:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0014dab:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014dae:	eb 20                	jmp    c0014dd0 <opcodeFault(regs*, void*)+0x2ca>
c0014db0:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c0014db4:	75 0b                	jne    c0014dc1 <opcodeFault(regs*, void*)+0x2bb>
c0014db6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014db9:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0014dbc:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014dbf:	eb 0f                	jmp    c0014dd0 <opcodeFault(regs*, void*)+0x2ca>
c0014dc1:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c0014dc5:	75 09                	jne    c0014dd0 <opcodeFault(regs*, void*)+0x2ca>
c0014dc7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014dca:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0014dcd:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014dd0:	80 7d f2 00          	cmp    BYTE PTR [ebp-0xe],0x0
c0014dd4:	74 10                	je     c0014de6 <opcodeFault(regs*, void*)+0x2e0>
c0014dd6:	81 65 ec 00 00 ff ff 	and    DWORD PTR [ebp-0x14],0xffff0000
c0014ddd:	81 4d ec ad de 00 00 	or     DWORD PTR [ebp-0x14],0xdead
c0014de4:	eb 2d                	jmp    c0014e13 <opcodeFault(regs*, void*)+0x30d>
c0014de6:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0014de9:	c1 e0 18             	shl    eax,0x18
c0014dec:	89 c2                	mov    edx,eax
c0014dee:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0014df1:	c1 e0 08             	shl    eax,0x8
c0014df4:	25 00 00 ff 00       	and    eax,0xff0000
c0014df9:	09 c2                	or     edx,eax
c0014dfb:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0014dfe:	c1 e8 08             	shr    eax,0x8
c0014e01:	25 00 ff 00 00       	and    eax,0xff00
c0014e06:	09 c2                	or     edx,eax
c0014e08:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0014e0b:	c1 e8 18             	shr    eax,0x18
c0014e0e:	09 d0                	or     eax,edx
c0014e10:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014e13:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c0014e17:	75 0b                	jne    c0014e24 <opcodeFault(regs*, void*)+0x31e>
c0014e19:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e1c:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014e1f:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0014e22:	eb 75                	jmp    c0014e99 <opcodeFault(regs*, void*)+0x393>
c0014e24:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c0014e28:	75 0b                	jne    c0014e35 <opcodeFault(regs*, void*)+0x32f>
c0014e2a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e2d:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014e30:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0014e33:	eb 64                	jmp    c0014e99 <opcodeFault(regs*, void*)+0x393>
c0014e35:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c0014e39:	75 0b                	jne    c0014e46 <opcodeFault(regs*, void*)+0x340>
c0014e3b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e3e:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014e41:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c0014e44:	eb 53                	jmp    c0014e99 <opcodeFault(regs*, void*)+0x393>
c0014e46:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c0014e4a:	75 0b                	jne    c0014e57 <opcodeFault(regs*, void*)+0x351>
c0014e4c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e4f:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014e52:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0014e55:	eb 42                	jmp    c0014e99 <opcodeFault(regs*, void*)+0x393>
c0014e57:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c0014e5b:	75 0b                	jne    c0014e68 <opcodeFault(regs*, void*)+0x362>
c0014e5d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e60:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014e63:	89 50 44             	mov    DWORD PTR [eax+0x44],edx
c0014e66:	eb 31                	jmp    c0014e99 <opcodeFault(regs*, void*)+0x393>
c0014e68:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c0014e6c:	75 0b                	jne    c0014e79 <opcodeFault(regs*, void*)+0x373>
c0014e6e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e71:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014e74:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0014e77:	eb 20                	jmp    c0014e99 <opcodeFault(regs*, void*)+0x393>
c0014e79:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c0014e7d:	75 0b                	jne    c0014e8a <opcodeFault(regs*, void*)+0x384>
c0014e7f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e82:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014e85:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0014e88:	eb 0f                	jmp    c0014e99 <opcodeFault(regs*, void*)+0x393>
c0014e8a:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c0014e8e:	75 09                	jne    c0014e99 <opcodeFault(regs*, void*)+0x393>
c0014e90:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e93:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014e96:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0014e99:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e9c:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014e9f:	8d 50 02             	lea    edx,[eax+0x2]
c0014ea2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ea5:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014ea8:	e9 6f 02 00 00       	jmp    c001511c <opcodeFault(regs*, void*)+0x616>
c0014ead:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014eb0:	8a 00                	mov    al,BYTE PTR [eax]
c0014eb2:	3c 0f                	cmp    al,0xf
c0014eb4:	0f 85 8d 01 00 00    	jne    c0015047 <opcodeFault(regs*, void*)+0x541>
c0014eba:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014ebd:	40                   	inc    eax
c0014ebe:	8a 00                	mov    al,BYTE PTR [eax]
c0014ec0:	3c c7                	cmp    al,0xc7
c0014ec2:	0f 85 7f 01 00 00    	jne    c0015047 <opcodeFault(regs*, void*)+0x541>
c0014ec8:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014ecb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ece:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014ed1:	8d 50 01             	lea    edx,[eax+0x1]
c0014ed4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ed7:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014eda:	8d 45 ba             	lea    eax,[ebp-0x46]
c0014edd:	50                   	push   eax
c0014ede:	8d 45 bb             	lea    eax,[ebp-0x45]
c0014ee1:	50                   	push   eax
c0014ee2:	8d 45 bc             	lea    eax,[ebp-0x44]
c0014ee5:	50                   	push   eax
c0014ee6:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0014ee9:	e8 60 46 00 00       	call   c001954e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c0014eee:	83 c4 10             	add    esp,0x10
c0014ef1:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0014ef4:	8a 45 bb             	mov    al,BYTE PTR [ebp-0x45]
c0014ef7:	83 f0 01             	xor    eax,0x1
c0014efa:	84 c0                	test   al,al
c0014efc:	0f 84 45 01 00 00    	je     c0015047 <opcodeFault(regs*, void*)+0x541>
c0014f02:	8a 45 ba             	mov    al,BYTE PTR [ebp-0x46]
c0014f05:	3c 01                	cmp    al,0x1
c0014f07:	0f 85 3a 01 00 00    	jne    c0015047 <opcodeFault(regs*, void*)+0x541>
c0014f0d:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
c0014f10:	83 f0 01             	xor    eax,0x1
c0014f13:	84 c0                	test   al,al
c0014f15:	0f 84 2c 01 00 00    	je     c0015047 <opcodeFault(regs*, void*)+0x541>
c0014f1b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f1e:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0014f21:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0014f24:	c7 45 d4 00 00 00 00 	mov    DWORD PTR [ebp-0x2c],0x0
c0014f2b:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0014f2e:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0014f31:	89 c2                	mov    edx,eax
c0014f33:	b8 00 00 00 00       	mov    eax,0x0
c0014f38:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0014f3b:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c0014f3e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f41:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0014f44:	ba 00 00 00 00       	mov    edx,0x0
c0014f49:	09 45 d0             	or     DWORD PTR [ebp-0x30],eax
c0014f4c:	09 55 d4             	or     DWORD PTR [ebp-0x2c],edx
c0014f4f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f52:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0014f55:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c0014f58:	c7 45 cc 00 00 00 00 	mov    DWORD PTR [ebp-0x34],0x0
c0014f5f:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c0014f62:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0014f65:	89 c2                	mov    edx,eax
c0014f67:	b8 00 00 00 00       	mov    eax,0x0
c0014f6c:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c0014f6f:	89 55 cc             	mov    DWORD PTR [ebp-0x34],edx
c0014f72:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f75:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0014f78:	ba 00 00 00 00       	mov    edx,0x0
c0014f7d:	09 45 c8             	or     DWORD PTR [ebp-0x38],eax
c0014f80:	09 55 cc             	or     DWORD PTR [ebp-0x34],edx
c0014f83:	fa                   	cli    
c0014f84:	a1 c8 0e 03 c0       	mov    eax,ds:0xc0030ec8
c0014f89:	40                   	inc    eax
c0014f8a:	a3 c8 0e 03 c0       	mov    ds:0xc0030ec8,eax
c0014f8f:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0014f92:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0014f95:	8b 00                	mov    eax,DWORD PTR [eax]
c0014f97:	89 c1                	mov    ecx,eax
c0014f99:	33 4d d0             	xor    ecx,DWORD PTR [ebp-0x30]
c0014f9c:	89 cb                	mov    ebx,ecx
c0014f9e:	89 d0                	mov    eax,edx
c0014fa0:	33 45 d4             	xor    eax,DWORD PTR [ebp-0x2c]
c0014fa3:	89 c6                	mov    esi,eax
c0014fa5:	89 f0                	mov    eax,esi
c0014fa7:	09 d8                	or     eax,ebx
c0014fa9:	85 c0                	test   eax,eax
c0014fab:	75 21                	jne    c0014fce <opcodeFault(regs*, void*)+0x4c8>
c0014fad:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0014fb0:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c0014fb3:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0014fb6:	89 01                	mov    DWORD PTR [ecx],eax
c0014fb8:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0014fbb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014fbe:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014fc1:	83 c8 40             	or     eax,0x40
c0014fc4:	89 c2                	mov    edx,eax
c0014fc6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014fc9:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c0014fcc:	eb 3e                	jmp    c001500c <opcodeFault(regs*, void*)+0x506>
c0014fce:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0014fd1:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0014fd4:	8b 00                	mov    eax,DWORD PTR [eax]
c0014fd6:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0014fd9:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c0014fdc:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c0014fdf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014fe2:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0014fe5:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0014fe8:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0014feb:	89 d0                	mov    eax,edx
c0014fed:	31 d2                	xor    edx,edx
c0014fef:	89 c3                	mov    ebx,eax
c0014ff1:	89 d6                	mov    esi,edx
c0014ff3:	89 da                	mov    edx,ebx
c0014ff5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ff8:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c0014ffb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ffe:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015001:	83 e0 bf             	and    eax,0xffffffbf
c0015004:	89 c2                	mov    edx,eax
c0015006:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015009:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c001500c:	a1 c8 0e 03 c0       	mov    eax,ds:0xc0030ec8
c0015011:	48                   	dec    eax
c0015012:	a3 c8 0e 03 c0       	mov    ds:0xc0030ec8,eax
c0015017:	a1 c8 0e 03 c0       	mov    eax,ds:0xc0030ec8
c001501c:	85 c0                	test   eax,eax
c001501e:	75 01                	jne    c0015021 <opcodeFault(regs*, void*)+0x51b>
c0015020:	fb                   	sti    
c0015021:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015024:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015027:	8b 55 bc             	mov    edx,DWORD PTR [ebp-0x44]
c001502a:	01 c2                	add    edx,eax
c001502c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001502f:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015032:	83 ec 0c             	sub    esp,0xc
c0015035:	68 ee ad 02 c0       	push   0xc002adee
c001503a:	e8 8a d6 ff ff       	call   c00126c9 <Dbg::kprintf(char const*, ...)>
c001503f:	83 c4 10             	add    esp,0x10
c0015042:	e9 d5 00 00 00       	jmp    c001511c <opcodeFault(regs*, void*)+0x616>
c0015047:	83 ec 0c             	sub    esp,0xc
c001504a:	68 01 ae 02 c0       	push   0xc002ae01
c001504f:	e8 75 d6 ff ff       	call   c00126c9 <Dbg::kprintf(char const*, ...)>
c0015054:	83 c4 10             	add    esp,0x10
c0015057:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001505a:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c001505d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015060:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015063:	c1 e0 04             	shl    eax,0x4
c0015066:	01 d0                	add    eax,edx
c0015068:	83 c0 03             	add    eax,0x3
c001506b:	8a 00                	mov    al,BYTE PTR [eax]
c001506d:	0f b6 d8             	movzx  ebx,al
c0015070:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015073:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0015076:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015079:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001507c:	c1 e0 04             	shl    eax,0x4
c001507f:	01 d0                	add    eax,edx
c0015081:	83 c0 02             	add    eax,0x2
c0015084:	8a 00                	mov    al,BYTE PTR [eax]
c0015086:	0f b6 c8             	movzx  ecx,al
c0015089:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001508c:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c001508f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015092:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015095:	c1 e0 04             	shl    eax,0x4
c0015098:	01 d0                	add    eax,edx
c001509a:	40                   	inc    eax
c001509b:	8a 00                	mov    al,BYTE PTR [eax]
c001509d:	0f b6 d0             	movzx  edx,al
c00150a0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00150a3:	8b 70 38             	mov    esi,DWORD PTR [eax+0x38]
c00150a6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00150a9:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00150ac:	c1 e0 04             	shl    eax,0x4
c00150af:	01 f0                	add    eax,esi
c00150b1:	8a 00                	mov    al,BYTE PTR [eax]
c00150b3:	0f b6 c0             	movzx  eax,al
c00150b6:	83 ec 0c             	sub    esp,0xc
c00150b9:	53                   	push   ebx
c00150ba:	51                   	push   ecx
c00150bb:	52                   	push   edx
c00150bc:	50                   	push   eax
c00150bd:	68 14 ae 02 c0       	push   0xc002ae14
c00150c2:	e8 02 d6 ff ff       	call   c00126c9 <Dbg::kprintf(char const*, ...)>
c00150c7:	83 c4 20             	add    esp,0x20
c00150ca:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00150cd:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00150d0:	83 c0 03             	add    eax,0x3
c00150d3:	8a 00                	mov    al,BYTE PTR [eax]
c00150d5:	0f b6 d8             	movzx  ebx,al
c00150d8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00150db:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00150de:	83 c0 02             	add    eax,0x2
c00150e1:	8a 00                	mov    al,BYTE PTR [eax]
c00150e3:	0f b6 c8             	movzx  ecx,al
c00150e6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00150e9:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00150ec:	40                   	inc    eax
c00150ed:	8a 00                	mov    al,BYTE PTR [eax]
c00150ef:	0f b6 d0             	movzx  edx,al
c00150f2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00150f5:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00150f8:	8a 00                	mov    al,BYTE PTR [eax]
c00150fa:	0f b6 c0             	movzx  eax,al
c00150fd:	83 ec 0c             	sub    esp,0xc
c0015100:	53                   	push   ebx
c0015101:	51                   	push   ecx
c0015102:	52                   	push   edx
c0015103:	50                   	push   eax
c0015104:	68 3c ae 02 c0       	push   0xc002ae3c
c0015109:	e8 bb d5 ff ff       	call   c00126c9 <Dbg::kprintf(char const*, ...)>
c001510e:	83 c4 20             	add    esp,0x20
c0015111:	83 ec 0c             	sub    esp,0xc
c0015114:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0015117:	e8 48 f4 ff ff       	call   c0014564 <displayDebugInfo(regs*)>
c001511c:	8d 65 f8             	lea    esp,[ebp-0x8]
c001511f:	5b                   	pop    ebx
c0015120:	5e                   	pop    esi
c0015121:	5d                   	pop    ebp
c0015122:	c3                   	ret    

c0015123 <displayProgramFault(char const*)>:
c0015123:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015128:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001512b:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0015131:	85 c0                	test   eax,eax
c0015133:	74 15                	je     c001514a <displayProgramFault(char const*)+0x27>
c0015135:	83 ec 0c             	sub    esp,0xc
c0015138:	6a 04                	push   0x4
c001513a:	6a 0f                	push   0xf
c001513c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015140:	50                   	push   eax
c0015141:	e8 16 b4 ff ff       	call   c001055c <VgaText::puts(char const*, VgaColour, VgaColour)>
c0015146:	83 c4 1c             	add    esp,0x1c
c0015149:	c3                   	ret    
c001514a:	c3                   	ret    

c001514b <setupInterruptController()>:
c001514b:	55                   	push   ebp
c001514c:	89 e5                	mov    ebp,esp
c001514e:	53                   	push   ebx
c001514f:	83 ec 24             	sub    esp,0x24
c0015152:	b8 00 00 00 00       	mov    eax,0x0
c0015157:	85 c0                	test   eax,eax
c0015159:	0f 95 c0             	setne  al
c001515c:	84 c0                	test   al,al
c001515e:	74 5b                	je     c00151bb <setupInterruptController()+0x70>
c0015160:	c7 45 e8 58 21 00 00 	mov    DWORD PTR [ebp-0x18],0x2158
c0015167:	83 ec 0c             	sub    esp,0xc
c001516a:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
c001516d:	e8 27 a4 ff ff       	call   c000f599 <malloc>
c0015172:	83 c4 10             	add    esp,0x10
c0015175:	89 c3                	mov    ebx,eax
c0015177:	83 ec 0c             	sub    esp,0xc
c001517a:	53                   	push   ebx
c001517b:	e8 02 05 01 00       	call   c0025682 <APIC::APIC()>
c0015180:	83 c4 10             	add    esp,0x10
c0015183:	89 5d f0             	mov    DWORD PTR [ebp-0x10],ebx
c0015186:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
c0015189:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001518c:	8b 00                	mov    eax,DWORD PTR [eax]
c001518e:	83 c0 08             	add    eax,0x8
c0015191:	8b 00                	mov    eax,DWORD PTR [eax]
c0015193:	6a 00                	push   0x0
c0015195:	6a 00                	push   0x0
c0015197:	6a 00                	push   0x0
c0015199:	52                   	push   edx
c001519a:	ff d0                	call   eax
c001519c:	83 c4 10             	add    esp,0x10
c001519f:	a1 a8 d9 02 c0       	mov    eax,ds:0xc002d9a8
c00151a4:	83 ec 08             	sub    esp,0x8
c00151a7:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c00151aa:	50                   	push   eax
c00151ab:	e8 52 e9 ff ff       	call   c0013b02 <Device::addChild(Device*)>
c00151b0:	83 c4 10             	add    esp,0x10
c00151b3:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00151b6:	e9 79 03 00 00       	jmp    c0015534 <setupInterruptController()+0x3e9>
c00151bb:	a0 20 03 03 c0       	mov    al,ds:0xc0030320
c00151c0:	84 c0                	test   al,al
c00151c2:	75 14                	jne    c00151d8 <setupInterruptController()+0x8d>
c00151c4:	a1 a8 d9 02 c0       	mov    eax,ds:0xc002d9a8
c00151c9:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c00151cf:	83 e2 fe             	and    edx,0xfffffffe
c00151d2:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c00151d8:	a1 a8 d9 02 c0       	mov    eax,ds:0xc002d9a8
c00151dd:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00151e3:	83 e0 01             	and    eax,0x1
c00151e6:	84 c0                	test   al,al
c00151e8:	0f 95 c0             	setne  al
c00151eb:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c00151ee:	c7 45 e4 58 21 00 00 	mov    DWORD PTR [ebp-0x1c],0x2158
c00151f5:	83 ec 0c             	sub    esp,0xc
c00151f8:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c00151fb:	e8 99 a3 ff ff       	call   c000f599 <malloc>
c0015200:	83 c4 10             	add    esp,0x10
c0015203:	89 c3                	mov    ebx,eax
c0015205:	83 ec 0c             	sub    esp,0xc
c0015208:	53                   	push   ebx
c0015209:	e8 cc 09 01 00       	call   c0025bda <PIC::PIC()>
c001520e:	83 c4 10             	add    esp,0x10
c0015211:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c0015214:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0015217:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001521a:	8b 00                	mov    eax,DWORD PTR [eax]
c001521c:	83 c0 08             	add    eax,0x8
c001521f:	8b 00                	mov    eax,DWORD PTR [eax]
c0015221:	6a 00                	push   0x0
c0015223:	6a 00                	push   0x0
c0015225:	6a 00                	push   0x0
c0015227:	52                   	push   edx
c0015228:	ff d0                	call   eax
c001522a:	83 c4 10             	add    esp,0x10
c001522d:	80 7d ef 00          	cmp    BYTE PTR [ebp-0x11],0x0
c0015231:	74 73                	je     c00152a6 <setupInterruptController()+0x15b>
c0015233:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0015236:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015239:	8b 00                	mov    eax,DWORD PTR [eax]
c001523b:	83 c0 0c             	add    eax,0xc
c001523e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015240:	6a 00                	push   0x0
c0015242:	6a 00                	push   0x0
c0015244:	6a 00                	push   0x0
c0015246:	52                   	push   edx
c0015247:	ff d0                	call   eax
c0015249:	83 c4 10             	add    esp,0x10
c001524c:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c0015250:	74 15                	je     c0015267 <setupInterruptController()+0x11c>
c0015252:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015255:	8b 00                	mov    eax,DWORD PTR [eax]
c0015257:	83 c0 04             	add    eax,0x4
c001525a:	8b 00                	mov    eax,DWORD PTR [eax]
c001525c:	83 ec 0c             	sub    esp,0xc
c001525f:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015262:	ff d0                	call   eax
c0015264:	83 c4 10             	add    esp,0x10
c0015267:	c7 45 e0 58 21 00 00 	mov    DWORD PTR [ebp-0x20],0x2158
c001526e:	83 ec 0c             	sub    esp,0xc
c0015271:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c0015274:	e8 20 a3 ff ff       	call   c000f599 <malloc>
c0015279:	83 c4 10             	add    esp,0x10
c001527c:	89 c3                	mov    ebx,eax
c001527e:	83 ec 0c             	sub    esp,0xc
c0015281:	53                   	push   ebx
c0015282:	e8 fb 03 01 00       	call   c0025682 <APIC::APIC()>
c0015287:	83 c4 10             	add    esp,0x10
c001528a:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c001528d:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0015290:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015293:	8b 00                	mov    eax,DWORD PTR [eax]
c0015295:	83 c0 08             	add    eax,0x8
c0015298:	8b 00                	mov    eax,DWORD PTR [eax]
c001529a:	6a 00                	push   0x0
c001529c:	6a 00                	push   0x0
c001529e:	6a 00                	push   0x0
c00152a0:	52                   	push   edx
c00152a1:	ff d0                	call   eax
c00152a3:	83 c4 10             	add    esp,0x10
c00152a6:	a1 a8 d9 02 c0       	mov    eax,ds:0xc002d9a8
c00152ab:	83 ec 08             	sub    esp,0x8
c00152ae:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00152b1:	50                   	push   eax
c00152b2:	e8 4b e8 ff ff       	call   c0013b02 <Device::addChild(Device*)>
c00152b7:	83 c4 10             	add    esp,0x10
c00152ba:	c7 05 28 db 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002db28,0x0
c00152c4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00152c7:	8b 00                	mov    eax,DWORD PTR [eax]
c00152c9:	83 c0 24             	add    eax,0x24
c00152cc:	8b 00                	mov    eax,DWORD PTR [eax]
c00152ce:	6a 00                	push   0x0
c00152d0:	68 e7 4a 01 c0       	push   0xc0014ae7
c00152d5:	6a 00                	push   0x0
c00152d7:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00152da:	ff d0                	call   eax
c00152dc:	83 c4 10             	add    esp,0x10
c00152df:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00152e2:	8b 00                	mov    eax,DWORD PTR [eax]
c00152e4:	83 c0 24             	add    eax,0x24
c00152e7:	8b 00                	mov    eax,DWORD PTR [eax]
c00152e9:	6a 00                	push   0x0
c00152eb:	68 e7 4a 01 c0       	push   0xc0014ae7
c00152f0:	6a 01                	push   0x1
c00152f2:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00152f5:	ff d0                	call   eax
c00152f7:	83 c4 10             	add    esp,0x10
c00152fa:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00152fd:	8b 00                	mov    eax,DWORD PTR [eax]
c00152ff:	83 c0 24             	add    eax,0x24
c0015302:	8b 00                	mov    eax,DWORD PTR [eax]
c0015304:	6a 00                	push   0x0
c0015306:	68 c1 43 01 c0       	push   0xc00143c1
c001530b:	6a 02                	push   0x2
c001530d:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015310:	ff d0                	call   eax
c0015312:	83 c4 10             	add    esp,0x10
c0015315:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015318:	8b 00                	mov    eax,DWORD PTR [eax]
c001531a:	83 c0 24             	add    eax,0x24
c001531d:	8b 00                	mov    eax,DWORD PTR [eax]
c001531f:	6a 00                	push   0x0
c0015321:	68 e7 4a 01 c0       	push   0xc0014ae7
c0015326:	6a 03                	push   0x3
c0015328:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001532b:	ff d0                	call   eax
c001532d:	83 c4 10             	add    esp,0x10
c0015330:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015333:	8b 00                	mov    eax,DWORD PTR [eax]
c0015335:	83 c0 24             	add    eax,0x24
c0015338:	8b 00                	mov    eax,DWORD PTR [eax]
c001533a:	6a 00                	push   0x0
c001533c:	68 e7 4a 01 c0       	push   0xc0014ae7
c0015341:	6a 04                	push   0x4
c0015343:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015346:	ff d0                	call   eax
c0015348:	83 c4 10             	add    esp,0x10
c001534b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001534e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015350:	83 c0 24             	add    eax,0x24
c0015353:	8b 00                	mov    eax,DWORD PTR [eax]
c0015355:	6a 00                	push   0x0
c0015357:	68 e7 4a 01 c0       	push   0xc0014ae7
c001535c:	6a 05                	push   0x5
c001535e:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015361:	ff d0                	call   eax
c0015363:	83 c4 10             	add    esp,0x10
c0015366:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015369:	8b 00                	mov    eax,DWORD PTR [eax]
c001536b:	83 c0 24             	add    eax,0x24
c001536e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015370:	6a 00                	push   0x0
c0015372:	68 06 4b 01 c0       	push   0xc0014b06
c0015377:	6a 06                	push   0x6
c0015379:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001537c:	ff d0                	call   eax
c001537e:	83 c4 10             	add    esp,0x10
c0015381:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015384:	8b 00                	mov    eax,DWORD PTR [eax]
c0015386:	83 c0 24             	add    eax,0x24
c0015389:	8b 00                	mov    eax,DWORD PTR [eax]
c001538b:	6a 00                	push   0x0
c001538d:	68 f3 49 01 c0       	push   0xc00149f3
c0015392:	6a 07                	push   0x7
c0015394:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015397:	ff d0                	call   eax
c0015399:	83 c4 10             	add    esp,0x10
c001539c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001539f:	8b 00                	mov    eax,DWORD PTR [eax]
c00153a1:	83 c0 24             	add    eax,0x24
c00153a4:	8b 00                	mov    eax,DWORD PTR [eax]
c00153a6:	6a 00                	push   0x0
c00153a8:	68 dc 41 01 c0       	push   0xc00141dc
c00153ad:	6a 08                	push   0x8
c00153af:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00153b2:	ff d0                	call   eax
c00153b4:	83 c4 10             	add    esp,0x10
c00153b7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153ba:	8b 00                	mov    eax,DWORD PTR [eax]
c00153bc:	83 c0 24             	add    eax,0x24
c00153bf:	8b 00                	mov    eax,DWORD PTR [eax]
c00153c1:	6a 00                	push   0x0
c00153c3:	68 e7 4a 01 c0       	push   0xc0014ae7
c00153c8:	6a 09                	push   0x9
c00153ca:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00153cd:	ff d0                	call   eax
c00153cf:	83 c4 10             	add    esp,0x10
c00153d2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153d5:	8b 00                	mov    eax,DWORD PTR [eax]
c00153d7:	83 c0 24             	add    eax,0x24
c00153da:	8b 00                	mov    eax,DWORD PTR [eax]
c00153dc:	6a 00                	push   0x0
c00153de:	68 e7 4a 01 c0       	push   0xc0014ae7
c00153e3:	6a 0a                	push   0xa
c00153e5:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00153e8:	ff d0                	call   eax
c00153ea:	83 c4 10             	add    esp,0x10
c00153ed:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153f0:	8b 00                	mov    eax,DWORD PTR [eax]
c00153f2:	83 c0 24             	add    eax,0x24
c00153f5:	8b 00                	mov    eax,DWORD PTR [eax]
c00153f7:	6a 00                	push   0x0
c00153f9:	68 e7 4a 01 c0       	push   0xc0014ae7
c00153fe:	6a 0b                	push   0xb
c0015400:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015403:	ff d0                	call   eax
c0015405:	83 c4 10             	add    esp,0x10
c0015408:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001540b:	8b 00                	mov    eax,DWORD PTR [eax]
c001540d:	83 c0 24             	add    eax,0x24
c0015410:	8b 00                	mov    eax,DWORD PTR [eax]
c0015412:	6a 00                	push   0x0
c0015414:	68 e7 4a 01 c0       	push   0xc0014ae7
c0015419:	6a 0c                	push   0xc
c001541b:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001541e:	ff d0                	call   eax
c0015420:	83 c4 10             	add    esp,0x10
c0015423:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015426:	8b 00                	mov    eax,DWORD PTR [eax]
c0015428:	83 c0 24             	add    eax,0x24
c001542b:	8b 00                	mov    eax,DWORD PTR [eax]
c001542d:	6a 00                	push   0x0
c001542f:	68 66 4a 01 c0       	push   0xc0014a66
c0015434:	6a 0d                	push   0xd
c0015436:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015439:	ff d0                	call   eax
c001543b:	83 c4 10             	add    esp,0x10
c001543e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015441:	8b 00                	mov    eax,DWORD PTR [eax]
c0015443:	83 c0 24             	add    eax,0x24
c0015446:	8b 00                	mov    eax,DWORD PTR [eax]
c0015448:	6a 00                	push   0x0
c001544a:	68 9f 4a 01 c0       	push   0xc0014a9f
c001544f:	6a 0e                	push   0xe
c0015451:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015454:	ff d0                	call   eax
c0015456:	83 c4 10             	add    esp,0x10
c0015459:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001545c:	8b 00                	mov    eax,DWORD PTR [eax]
c001545e:	83 c0 24             	add    eax,0x24
c0015461:	8b 00                	mov    eax,DWORD PTR [eax]
c0015463:	6a 00                	push   0x0
c0015465:	68 e7 4a 01 c0       	push   0xc0014ae7
c001546a:	6a 0f                	push   0xf
c001546c:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001546f:	ff d0                	call   eax
c0015471:	83 c4 10             	add    esp,0x10
c0015474:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015477:	8b 00                	mov    eax,DWORD PTR [eax]
c0015479:	83 c0 24             	add    eax,0x24
c001547c:	8b 00                	mov    eax,DWORD PTR [eax]
c001547e:	6a 00                	push   0x0
c0015480:	68 e7 4a 01 c0       	push   0xc0014ae7
c0015485:	6a 10                	push   0x10
c0015487:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001548a:	ff d0                	call   eax
c001548c:	83 c4 10             	add    esp,0x10
c001548f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015492:	8b 00                	mov    eax,DWORD PTR [eax]
c0015494:	83 c0 24             	add    eax,0x24
c0015497:	8b 00                	mov    eax,DWORD PTR [eax]
c0015499:	6a 00                	push   0x0
c001549b:	68 e7 4a 01 c0       	push   0xc0014ae7
c00154a0:	6a 11                	push   0x11
c00154a2:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00154a5:	ff d0                	call   eax
c00154a7:	83 c4 10             	add    esp,0x10
c00154aa:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00154ad:	8b 00                	mov    eax,DWORD PTR [eax]
c00154af:	83 c0 24             	add    eax,0x24
c00154b2:	8b 00                	mov    eax,DWORD PTR [eax]
c00154b4:	6a 00                	push   0x0
c00154b6:	68 e7 4a 01 c0       	push   0xc0014ae7
c00154bb:	6a 12                	push   0x12
c00154bd:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00154c0:	ff d0                	call   eax
c00154c2:	83 c4 10             	add    esp,0x10
c00154c5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00154c8:	8b 00                	mov    eax,DWORD PTR [eax]
c00154ca:	83 c0 24             	add    eax,0x24
c00154cd:	8b 00                	mov    eax,DWORD PTR [eax]
c00154cf:	6a 00                	push   0x0
c00154d1:	68 e7 4a 01 c0       	push   0xc0014ae7
c00154d6:	6a 13                	push   0x13
c00154d8:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00154db:	ff d0                	call   eax
c00154dd:	83 c4 10             	add    esp,0x10
c00154e0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00154e3:	8b 00                	mov    eax,DWORD PTR [eax]
c00154e5:	83 c0 24             	add    eax,0x24
c00154e8:	8b 00                	mov    eax,DWORD PTR [eax]
c00154ea:	6a 00                	push   0x0
c00154ec:	68 e7 4a 01 c0       	push   0xc0014ae7
c00154f1:	6a 14                	push   0x14
c00154f3:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00154f6:	ff d0                	call   eax
c00154f8:	83 c4 10             	add    esp,0x10
c00154fb:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00154fe:	8b 00                	mov    eax,DWORD PTR [eax]
c0015500:	83 c0 24             	add    eax,0x24
c0015503:	8b 00                	mov    eax,DWORD PTR [eax]
c0015505:	6a 00                	push   0x0
c0015507:	68 e7 4a 01 c0       	push   0xc0014ae7
c001550c:	6a 1e                	push   0x1e
c001550e:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015511:	ff d0                	call   eax
c0015513:	83 c4 10             	add    esp,0x10
c0015516:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015519:	8b 00                	mov    eax,DWORD PTR [eax]
c001551b:	83 c0 24             	add    eax,0x24
c001551e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015520:	6a 00                	push   0x0
c0015522:	68 24 c0 01 c0       	push   0xc001c024
c0015527:	6a 60                	push   0x60
c0015529:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001552c:	ff d0                	call   eax
c001552e:	83 c4 10             	add    esp,0x10
c0015531:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015534:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0015537:	c9                   	leave  
c0015538:	c3                   	ret    
c0015539:	90                   	nop

c001553a <InterruptController::convertLegacyIRQNumber(int)>:
c001553a:	55                   	push   ebp
c001553b:	89 e5                	mov    ebp,esp
c001553d:	83 ec 08             	sub    esp,0x8
c0015540:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015543:	83 ec 0c             	sub    esp,0xc
c0015546:	50                   	push   eax
c0015547:	e8 b6 e8 ff ff       	call   c0013e02 <Device::getName()>
c001554c:	83 c4 10             	add    esp,0x10
c001554f:	8a 00                	mov    al,BYTE PTR [eax]
c0015551:	3c 41                	cmp    al,0x41
c0015553:	0f 94 c0             	sete   al
c0015556:	84 c0                	test   al,al
c0015558:	74 28                	je     c0015582 <InterruptController::convertLegacyIRQNumber(int)+0x48>
c001555a:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c001555e:	7f 12                	jg     c0015572 <InterruptController::convertLegacyIRQNumber(int)+0x38>
c0015560:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015563:	05 00 cc 02 c0       	add    eax,0xc002cc00
c0015568:	8a 00                	mov    al,BYTE PTR [eax]
c001556a:	0f b6 c0             	movzx  eax,al
c001556d:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0015570:	eb 10                	jmp    c0015582 <InterruptController::convertLegacyIRQNumber(int)+0x48>
c0015572:	83 ec 0c             	sub    esp,0xc
c0015575:	68 64 ae 02 c0       	push   0xc002ae64
c001557a:	e8 b6 48 00 00       	call   c0019e35 <Krnl::panic(char const*)>
c001557f:	83 c4 10             	add    esp,0x10
c0015582:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015585:	c9                   	leave  
c0015586:	c3                   	ret    
c0015587:	90                   	nop

c0015588 <startGUI(void*)>:
c0015588:	55                   	push   ebp
c0015589:	89 e5                	mov    ebp,esp
c001558b:	53                   	push   ebx
c001558c:	83 ec 04             	sub    esp,0x4
c001558f:	a1 c8 0e 03 c0       	mov    eax,ds:0xc0030ec8
c0015594:	48                   	dec    eax
c0015595:	a3 c8 0e 03 c0       	mov    ds:0xc0030ec8,eax
c001559a:	a1 c8 0e 03 c0       	mov    eax,ds:0xc0030ec8
c001559f:	85 c0                	test   eax,eax
c00155a1:	75 01                	jne    c00155a4 <startGUI(void*)+0x1c>
c00155a3:	fb                   	sti    
c00155a4:	8b 1d a8 d9 02 c0    	mov    ebx,DWORD PTR ds:0xc002d9a8
c00155aa:	83 ec 08             	sub    esp,0x8
c00155ad:	6a 01                	push   0x1
c00155af:	68 e4 ae 02 c0       	push   0xc002aee4
c00155b4:	e8 46 7a 00 00       	call   c001cfff <Thr::loadDLL(char const*, bool)>
c00155b9:	83 c4 10             	add    esp,0x10
c00155bc:	83 ec 08             	sub    esp,0x8
c00155bf:	53                   	push   ebx
c00155c0:	50                   	push   eax
c00155c1:	e8 6a 7c 00 00       	call   c001d230 <Thr::executeDLL(unsigned long, void*)>
c00155c6:	83 c4 10             	add    esp,0x10
c00155c9:	8b 1d a8 d9 02 c0    	mov    ebx,DWORD PTR ds:0xc002d9a8
c00155cf:	83 ec 08             	sub    esp,0x8
c00155d2:	6a 01                	push   0x1
c00155d4:	68 fe ae 02 c0       	push   0xc002aefe
c00155d9:	e8 21 7a 00 00       	call   c001cfff <Thr::loadDLL(char const*, bool)>
c00155de:	83 c4 10             	add    esp,0x10
c00155e1:	83 ec 08             	sub    esp,0x8
c00155e4:	53                   	push   ebx
c00155e5:	50                   	push   eax
c00155e6:	e8 45 7c 00 00       	call   c001d230 <Thr::executeDLL(unsigned long, void*)>
c00155eb:	83 c4 10             	add    esp,0x10
c00155ee:	90                   	nop
c00155ef:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c00155f2:	c9                   	leave  
c00155f3:	c3                   	ret    

c00155f4 <startGUIVESA(void*)>:
c00155f4:	55                   	push   ebp
c00155f5:	89 e5                	mov    ebp,esp
c00155f7:	53                   	push   ebx
c00155f8:	83 ec 04             	sub    esp,0x4
c00155fb:	a1 c8 0e 03 c0       	mov    eax,ds:0xc0030ec8
c0015600:	48                   	dec    eax
c0015601:	a3 c8 0e 03 c0       	mov    ds:0xc0030ec8,eax
c0015606:	a1 c8 0e 03 c0       	mov    eax,ds:0xc0030ec8
c001560b:	85 c0                	test   eax,eax
c001560d:	75 01                	jne    c0015610 <startGUIVESA(void*)+0x1c>
c001560f:	fb                   	sti    
c0015610:	8b 1d a8 d9 02 c0    	mov    ebx,DWORD PTR ds:0xc002d9a8
c0015616:	83 ec 08             	sub    esp,0x8
c0015619:	6a 01                	push   0x1
c001561b:	68 18 af 02 c0       	push   0xc002af18
c0015620:	e8 da 79 00 00       	call   c001cfff <Thr::loadDLL(char const*, bool)>
c0015625:	83 c4 10             	add    esp,0x10
c0015628:	83 ec 08             	sub    esp,0x8
c001562b:	53                   	push   ebx
c001562c:	50                   	push   eax
c001562d:	e8 fe 7b 00 00       	call   c001d230 <Thr::executeDLL(unsigned long, void*)>
c0015632:	83 c4 10             	add    esp,0x10
c0015635:	8b 1d a8 d9 02 c0    	mov    ebx,DWORD PTR ds:0xc002d9a8
c001563b:	83 ec 08             	sub    esp,0x8
c001563e:	6a 01                	push   0x1
c0015640:	68 fe ae 02 c0       	push   0xc002aefe
c0015645:	e8 b5 79 00 00       	call   c001cfff <Thr::loadDLL(char const*, bool)>
c001564a:	83 c4 10             	add    esp,0x10
c001564d:	83 ec 08             	sub    esp,0x8
c0015650:	53                   	push   ebx
c0015651:	50                   	push   eax
c0015652:	e8 d9 7b 00 00       	call   c001d230 <Thr::executeDLL(unsigned long, void*)>
c0015657:	83 c4 10             	add    esp,0x10
c001565a:	90                   	nop
c001565b:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001565e:	c9                   	leave  
c001565f:	c3                   	ret    

c0015660 <sendKeyToTerminal(unsigned char)>:
c0015660:	55                   	push   ebp
c0015661:	89 e5                	mov    ebp,esp
c0015663:	83 ec 28             	sub    esp,0x28
c0015666:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015669:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c001566c:	a1 64 da 02 c0       	mov    eax,ds:0xc002da64
c0015671:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c0015675:	83 ec 08             	sub    esp,0x8
c0015678:	52                   	push   edx
c0015679:	50                   	push   eax
c001567a:	e8 83 b3 ff ff       	call   c0010a02 <VgaText::receiveKey(unsigned char)>
c001567f:	83 c4 10             	add    esp,0x10
c0015682:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c0015686:	0f 85 8f 00 00 00    	jne    c001571b <sendKeyToTerminal(unsigned char)+0xbb>
c001568c:	fa                   	cli    
c001568d:	a1 c8 0e 03 c0       	mov    eax,ds:0xc0030ec8
c0015692:	40                   	inc    eax
c0015693:	a3 c8 0e 03 c0       	mov    ds:0xc0030ec8,eax
c0015698:	a1 c4 0e 03 c0       	mov    eax,ds:0xc0030ec4
c001569d:	40                   	inc    eax
c001569e:	a3 c4 0e 03 c0       	mov    ds:0xc0030ec4,eax
c00156a3:	a1 40 db 02 c0       	mov    eax,ds:0xc002db40
c00156a8:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c00156ab:	c7 05 40 db 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002db40,0x0
c00156b5:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c00156b9:	74 1f                	je     c00156da <sendKeyToTerminal(unsigned char)+0x7a>
c00156bb:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00156be:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00156c1:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00156c4:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00156c7:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c00156ca:	83 ec 0c             	sub    esp,0xc
c00156cd:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c00156d0:	e8 73 87 00 00       	call   c001de48 <unblockTask(ThreadControlBlock*)>
c00156d5:	83 c4 10             	add    esp,0x10
c00156d8:	eb db                	jmp    c00156b5 <sendKeyToTerminal(unsigned char)+0x55>
c00156da:	a1 c4 0e 03 c0       	mov    eax,ds:0xc0030ec4
c00156df:	48                   	dec    eax
c00156e0:	a3 c4 0e 03 c0       	mov    ds:0xc0030ec4,eax
c00156e5:	a1 c4 0e 03 c0       	mov    eax,ds:0xc0030ec4
c00156ea:	85 c0                	test   eax,eax
c00156ec:	75 18                	jne    c0015706 <sendKeyToTerminal(unsigned char)+0xa6>
c00156ee:	a1 c0 0e 03 c0       	mov    eax,ds:0xc0030ec0
c00156f3:	85 c0                	test   eax,eax
c00156f5:	74 0f                	je     c0015706 <sendKeyToTerminal(unsigned char)+0xa6>
c00156f7:	c7 05 c0 0e 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030ec0,0x0
c0015701:	e8 bf 82 00 00       	call   c001d9c5 <schedule()>
c0015706:	a1 c8 0e 03 c0       	mov    eax,ds:0xc0030ec8
c001570b:	48                   	dec    eax
c001570c:	a3 c8 0e 03 c0       	mov    ds:0xc0030ec8,eax
c0015711:	a1 c8 0e 03 c0       	mov    eax,ds:0xc0030ec8
c0015716:	85 c0                	test   eax,eax
c0015718:	75 01                	jne    c001571b <sendKeyToTerminal(unsigned char)+0xbb>
c001571a:	fb                   	sti    
c001571b:	90                   	nop
c001571c:	c9                   	leave  
c001571d:	c3                   	ret    

c001571e <sendKeyboardToken(KeyboardToken)>:
c001571e:	55                   	push   ebp
c001571f:	89 e5                	mov    ebp,esp
c0015721:	83 ec 18             	sub    esp,0x18
c0015724:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c0015727:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001572a:	0f b7 c0             	movzx  eax,ax
c001572d:	83 f2 01             	xor    edx,0x1
c0015730:	88 90 60 db 02 c0    	mov    BYTE PTR [eax-0x3ffd24a0],dl
c0015736:	a1 48 db 02 c0       	mov    eax,ds:0xc002db48
c001573b:	85 c0                	test   eax,eax
c001573d:	74 24                	je     c0015763 <sendKeyboardToken(KeyboardToken)+0x45>
c001573f:	8b 0d 48 db 02 c0    	mov    ecx,DWORD PTR ds:0xc002db48
c0015745:	83 ec 04             	sub    esp,0x4
c0015748:	68 60 db 02 c0       	push   0xc002db60
c001574d:	83 ec 08             	sub    esp,0x8
c0015750:	89 e2                	mov    edx,esp
c0015752:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015755:	89 02                	mov    DWORD PTR [edx],eax
c0015757:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001575a:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c001575e:	ff d1                	call   ecx
c0015760:	83 c4 10             	add    esp,0x10
c0015763:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015766:	66 3d 03 02          	cmp    ax,0x203
c001576a:	75 07                	jne    c0015773 <sendKeyboardToken(KeyboardToken)+0x55>
c001576c:	a0 60 dc 02 c0       	mov    al,ds:0xc002dc60
c0015771:	84 c0                	test   al,al
c0015773:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c0015777:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c001577a:	a0 68 df 02 c0       	mov    al,ds:0xc002df68
c001577f:	38 c2                	cmp    dl,al
c0015781:	74 1c                	je     c001579f <sendKeyboardToken(KeyboardToken)+0x81>
c0015783:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c0015786:	a2 68 df 02 c0       	mov    ds:0xc002df68,al
c001578b:	a0 68 df 02 c0       	mov    al,ds:0xc002df68
c0015790:	0f b6 c0             	movzx  eax,al
c0015793:	83 ec 0c             	sub    esp,0xc
c0015796:	50                   	push   eax
c0015797:	e8 a8 a8 ff ff       	call   c0010044 <setTerminalScrollLock(bool)>
c001579c:	83 c4 10             	add    esp,0x10
c001579f:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c00157a2:	84 c0                	test   al,al
c00157a4:	0f 84 ae 00 00 00    	je     c0015858 <sendKeyboardToken(KeyboardToken)+0x13a>
c00157aa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157ad:	66 3d 10 03          	cmp    ax,0x310
c00157b1:	75 06                	jne    c00157b9 <sendKeyboardToken(KeyboardToken)+0x9b>
c00157b3:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c00157b9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157bc:	66 3d 11 03          	cmp    ax,0x311
c00157c0:	75 06                	jne    c00157c8 <sendKeyboardToken(KeyboardToken)+0xaa>
c00157c2:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c00157c8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157cb:	66 3d 12 03          	cmp    ax,0x312
c00157cf:	75 06                	jne    c00157d7 <sendKeyboardToken(KeyboardToken)+0xb9>
c00157d1:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c00157d7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157da:	66 3d 13 03          	cmp    ax,0x313
c00157de:	75 06                	jne    c00157e6 <sendKeyboardToken(KeyboardToken)+0xc8>
c00157e0:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c00157e6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157e9:	66 3d 14 03          	cmp    ax,0x314
c00157ed:	75 06                	jne    c00157f5 <sendKeyboardToken(KeyboardToken)+0xd7>
c00157ef:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c00157f5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157f8:	66 3d 15 03          	cmp    ax,0x315
c00157fc:	75 06                	jne    c0015804 <sendKeyboardToken(KeyboardToken)+0xe6>
c00157fe:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c0015804:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015807:	66 3d 16 03          	cmp    ax,0x316
c001580b:	75 06                	jne    c0015813 <sendKeyboardToken(KeyboardToken)+0xf5>
c001580d:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c0015813:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015816:	66 3d 17 03          	cmp    ax,0x317
c001581a:	75 06                	jne    c0015822 <sendKeyboardToken(KeyboardToken)+0x104>
c001581c:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c0015822:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015825:	66 3d 18 03          	cmp    ax,0x318
c0015829:	75 06                	jne    c0015831 <sendKeyboardToken(KeyboardToken)+0x113>
c001582b:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c0015831:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015834:	66 3d 19 03          	cmp    ax,0x319
c0015838:	75 06                	jne    c0015840 <sendKeyboardToken(KeyboardToken)+0x122>
c001583a:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c0015840:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015843:	66 3d 1a 03          	cmp    ax,0x31a
c0015847:	0f 85 c9 00 00 00    	jne    c0015916 <sendKeyboardToken(KeyboardToken)+0x1f8>
c001584d:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c0015853:	e9 be 00 00 00       	jmp    c0015916 <sendKeyboardToken(KeyboardToken)+0x1f8>
c0015858:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001585b:	66 3d 10 03          	cmp    ax,0x310
c001585f:	75 0a                	jne    c001586b <sendKeyboardToken(KeyboardToken)+0x14d>
c0015861:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c0015867:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001586b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001586e:	66 3d 11 03          	cmp    ax,0x311
c0015872:	75 0a                	jne    c001587e <sendKeyboardToken(KeyboardToken)+0x160>
c0015874:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c001587a:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001587e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015881:	66 3d 12 03          	cmp    ax,0x312
c0015885:	75 0a                	jne    c0015891 <sendKeyboardToken(KeyboardToken)+0x173>
c0015887:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c001588d:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015891:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015894:	66 3d 13 03          	cmp    ax,0x313
c0015898:	75 0a                	jne    c00158a4 <sendKeyboardToken(KeyboardToken)+0x186>
c001589a:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c00158a0:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00158a4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158a7:	66 3d 14 03          	cmp    ax,0x314
c00158ab:	75 0a                	jne    c00158b7 <sendKeyboardToken(KeyboardToken)+0x199>
c00158ad:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c00158b3:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00158b7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158ba:	66 3d 15 03          	cmp    ax,0x315
c00158be:	75 0a                	jne    c00158ca <sendKeyboardToken(KeyboardToken)+0x1ac>
c00158c0:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c00158c6:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00158ca:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158cd:	66 3d 16 03          	cmp    ax,0x316
c00158d1:	75 0a                	jne    c00158dd <sendKeyboardToken(KeyboardToken)+0x1bf>
c00158d3:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c00158d9:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00158dd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158e0:	66 3d 17 03          	cmp    ax,0x317
c00158e4:	75 0a                	jne    c00158f0 <sendKeyboardToken(KeyboardToken)+0x1d2>
c00158e6:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c00158ec:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00158f0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158f3:	66 3d 18 03          	cmp    ax,0x318
c00158f7:	75 0a                	jne    c0015903 <sendKeyboardToken(KeyboardToken)+0x1e5>
c00158f9:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c00158ff:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015903:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015906:	66 3d 19 03          	cmp    ax,0x319
c001590a:	75 0a                	jne    c0015916 <sendKeyboardToken(KeyboardToken)+0x1f8>
c001590c:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c0015912:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015916:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015919:	66 3d 00 02          	cmp    ax,0x200
c001591d:	75 2c                	jne    c001594b <sendKeyboardToken(KeyboardToken)+0x22d>
c001591f:	a0 60 df 02 c0       	mov    al,ds:0xc002df60
c0015924:	83 f0 01             	xor    eax,0x1
c0015927:	84 c0                	test   al,al
c0015929:	74 20                	je     c001594b <sendKeyboardToken(KeyboardToken)+0x22d>
c001592b:	a1 f0 0e 03 c0       	mov    eax,ds:0xc0030ef0
c0015930:	6a 01                	push   0x1
c0015932:	6a 00                	push   0x0
c0015934:	68 88 55 01 c0       	push   0xc0015588
c0015939:	50                   	push   eax
c001593a:	e8 61 7e 00 00       	call   c001d7a0 <Process::createThread(void (*)(void*), void*, int)>
c001593f:	83 c4 10             	add    esp,0x10
c0015942:	c6 05 60 df 02 c0 01 	mov    BYTE PTR ds:0xc002df60,0x1
c0015949:	eb 33                	jmp    c001597e <sendKeyboardToken(KeyboardToken)+0x260>
c001594b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001594e:	66 3d 01 02          	cmp    ax,0x201
c0015952:	75 2a                	jne    c001597e <sendKeyboardToken(KeyboardToken)+0x260>
c0015954:	a0 60 df 02 c0       	mov    al,ds:0xc002df60
c0015959:	83 f0 01             	xor    eax,0x1
c001595c:	84 c0                	test   al,al
c001595e:	74 1e                	je     c001597e <sendKeyboardToken(KeyboardToken)+0x260>
c0015960:	a1 f0 0e 03 c0       	mov    eax,ds:0xc0030ef0
c0015965:	6a 01                	push   0x1
c0015967:	6a 00                	push   0x0
c0015969:	68 f4 55 01 c0       	push   0xc00155f4
c001596e:	50                   	push   eax
c001596f:	e8 2c 7e 00 00       	call   c001d7a0 <Process::createThread(void (*)(void*), void*, int)>
c0015974:	83 c4 10             	add    esp,0x10
c0015977:	c6 05 60 df 02 c0 01 	mov    BYTE PTR ds:0xc002df60,0x1
c001597e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015981:	66 3d 1d 03          	cmp    ax,0x31d
c0015985:	75 06                	jne    c001598d <sendKeyboardToken(KeyboardToken)+0x26f>
c0015987:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c001598d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015990:	66 3d 1c 03          	cmp    ax,0x31c
c0015994:	75 06                	jne    c001599c <sendKeyboardToken(KeyboardToken)+0x27e>
c0015996:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c001599c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001599f:	66 3d 1b 03          	cmp    ax,0x31b
c00159a3:	75 06                	jne    c00159ab <sendKeyboardToken(KeyboardToken)+0x28d>
c00159a5:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c00159ab:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00159ae:	66 3d 1e 03          	cmp    ax,0x31e
c00159b2:	75 06                	jne    c00159ba <sendKeyboardToken(KeyboardToken)+0x29c>
c00159b4:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c00159ba:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00159bd:	66 3d 1f 03          	cmp    ax,0x31f
c00159c1:	75 06                	jne    c00159c9 <sendKeyboardToken(KeyboardToken)+0x2ab>
c00159c3:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c00159c9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00159cc:	66 3d 1a 03          	cmp    ax,0x31a
c00159d0:	75 06                	jne    c00159d8 <sendKeyboardToken(KeyboardToken)+0x2ba>
c00159d2:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c00159d8:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c00159dc:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c00159df:	83 f0 01             	xor    eax,0x1
c00159e2:	84 c0                	test   al,al
c00159e4:	74 77                	je     c0015a5d <sendKeyboardToken(KeyboardToken)+0x33f>
c00159e6:	a0 61 dc 02 c0       	mov    al,ds:0xc002dc61
c00159eb:	84 c0                	test   al,al
c00159ed:	74 41                	je     c0015a30 <sendKeyboardToken(KeyboardToken)+0x312>
c00159ef:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c00159f3:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c00159f7:	74 2b                	je     c0015a24 <sendKeyboardToken(KeyboardToken)+0x306>
c00159f9:	8b 15 64 df 02 c0    	mov    edx,DWORD PTR ds:0xc002df64
c00159ff:	89 d0                	mov    eax,edx
c0015a01:	c1 e0 02             	shl    eax,0x2
c0015a04:	01 d0                	add    eax,edx
c0015a06:	01 c0                	add    eax,eax
c0015a08:	a3 64 df 02 c0       	mov    ds:0xc002df64,eax
c0015a0d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a10:	0f b7 c0             	movzx  eax,ax
c0015a13:	8d 50 d0             	lea    edx,[eax-0x30]
c0015a16:	a1 64 df 02 c0       	mov    eax,ds:0xc002df64
c0015a1b:	01 d0                	add    eax,edx
c0015a1d:	a3 64 df 02 c0       	mov    ds:0xc002df64,eax
c0015a22:	eb 6d                	jmp    c0015a91 <sendKeyboardToken(KeyboardToken)+0x373>
c0015a24:	c7 05 64 df 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002df64,0x0
c0015a2e:	eb 61                	jmp    c0015a91 <sendKeyboardToken(KeyboardToken)+0x373>
c0015a30:	a1 64 df 02 c0       	mov    eax,ds:0xc002df64
c0015a35:	85 c0                	test   eax,eax
c0015a37:	74 18                	je     c0015a51 <sendKeyboardToken(KeyboardToken)+0x333>
c0015a39:	a1 64 df 02 c0       	mov    eax,ds:0xc002df64
c0015a3e:	0f b6 c0             	movzx  eax,al
c0015a41:	83 ec 0c             	sub    esp,0xc
c0015a44:	50                   	push   eax
c0015a45:	e8 16 fc ff ff       	call   c0015660 <sendKeyToTerminal(unsigned char)>
c0015a4a:	83 c4 10             	add    esp,0x10
c0015a4d:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0015a51:	c7 05 64 df 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002df64,0x0
c0015a5b:	eb 34                	jmp    c0015a91 <sendKeyboardToken(KeyboardToken)+0x373>
c0015a5d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a60:	66 3d 01 01          	cmp    ax,0x101
c0015a64:	75 2b                	jne    c0015a91 <sendKeyboardToken(KeyboardToken)+0x373>
c0015a66:	a1 64 df 02 c0       	mov    eax,ds:0xc002df64
c0015a6b:	85 c0                	test   eax,eax
c0015a6d:	74 18                	je     c0015a87 <sendKeyboardToken(KeyboardToken)+0x369>
c0015a6f:	a1 64 df 02 c0       	mov    eax,ds:0xc002df64
c0015a74:	0f b6 c0             	movzx  eax,al
c0015a77:	83 ec 0c             	sub    esp,0xc
c0015a7a:	50                   	push   eax
c0015a7b:	e8 e0 fb ff ff       	call   c0015660 <sendKeyToTerminal(unsigned char)>
c0015a80:	83 c4 10             	add    esp,0x10
c0015a83:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0015a87:	c7 05 64 df 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002df64,0x0
c0015a91:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0015a94:	83 f0 01             	xor    eax,0x1
c0015a97:	84 c0                	test   al,al
c0015a99:	74 4c                	je     c0015ae7 <sendKeyboardToken(KeyboardToken)+0x3c9>
c0015a9b:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0015a9e:	83 f0 01             	xor    eax,0x1
c0015aa1:	84 c0                	test   al,al
c0015aa3:	74 42                	je     c0015ae7 <sendKeyboardToken(KeyboardToken)+0x3c9>
c0015aa5:	a0 60 dc 02 c0       	mov    al,ds:0xc002dc60
c0015aaa:	83 f0 01             	xor    eax,0x1
c0015aad:	84 c0                	test   al,al
c0015aaf:	74 36                	je     c0015ae7 <sendKeyboardToken(KeyboardToken)+0x3c9>
c0015ab1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ab4:	66 83 f8 1f          	cmp    ax,0x1f
c0015ab8:	76 09                	jbe    c0015ac3 <sendKeyboardToken(KeyboardToken)+0x3a5>
c0015aba:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015abd:	66 83 f8 7e          	cmp    ax,0x7e
c0015ac1:	76 12                	jbe    c0015ad5 <sendKeyboardToken(KeyboardToken)+0x3b7>
c0015ac3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ac6:	66 83 f8 0a          	cmp    ax,0xa
c0015aca:	74 09                	je     c0015ad5 <sendKeyboardToken(KeyboardToken)+0x3b7>
c0015acc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015acf:	66 83 f8 08          	cmp    ax,0x8
c0015ad3:	75 12                	jne    c0015ae7 <sendKeyboardToken(KeyboardToken)+0x3c9>
c0015ad5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ad8:	0f b6 c0             	movzx  eax,al
c0015adb:	83 ec 0c             	sub    esp,0xc
c0015ade:	50                   	push   eax
c0015adf:	e8 7c fb ff ff       	call   c0015660 <sendKeyToTerminal(unsigned char)>
c0015ae4:	83 c4 10             	add    esp,0x10
c0015ae7:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0015aea:	83 f0 01             	xor    eax,0x1
c0015aed:	84 c0                	test   al,al
c0015aef:	74 4f                	je     c0015b40 <sendKeyboardToken(KeyboardToken)+0x422>
c0015af1:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0015af4:	83 f0 01             	xor    eax,0x1
c0015af7:	84 c0                	test   al,al
c0015af9:	74 45                	je     c0015b40 <sendKeyboardToken(KeyboardToken)+0x422>
c0015afb:	a0 60 dc 02 c0       	mov    al,ds:0xc002dc60
c0015b00:	84 c0                	test   al,al
c0015b02:	74 3c                	je     c0015b40 <sendKeyboardToken(KeyboardToken)+0x422>
c0015b04:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b07:	66 83 f8 3f          	cmp    ax,0x3f
c0015b0b:	76 33                	jbe    c0015b40 <sendKeyboardToken(KeyboardToken)+0x422>
c0015b0d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b10:	66 83 f8 7f          	cmp    ax,0x7f
c0015b14:	77 2a                	ja     c0015b40 <sendKeyboardToken(KeyboardToken)+0x422>
c0015b16:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b19:	88 c2                	mov    dl,al
c0015b1b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b1e:	66 83 f8 5f          	cmp    ax,0x5f
c0015b22:	76 04                	jbe    c0015b28 <sendKeyboardToken(KeyboardToken)+0x40a>
c0015b24:	b0 20                	mov    al,0x20
c0015b26:	eb 02                	jmp    c0015b2a <sendKeyboardToken(KeyboardToken)+0x40c>
c0015b28:	b0 00                	mov    al,0x0
c0015b2a:	29 c2                	sub    edx,eax
c0015b2c:	88 d0                	mov    al,dl
c0015b2e:	83 e8 40             	sub    eax,0x40
c0015b31:	0f b6 c0             	movzx  eax,al
c0015b34:	83 ec 0c             	sub    esp,0xc
c0015b37:	50                   	push   eax
c0015b38:	e8 23 fb ff ff       	call   c0015660 <sendKeyToTerminal(unsigned char)>
c0015b3d:	83 c4 10             	add    esp,0x10
c0015b40:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b43:	66 3d 00 03          	cmp    ax,0x300
c0015b47:	75 0f                	jne    c0015b58 <sendKeyboardToken(KeyboardToken)+0x43a>
c0015b49:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0015b4c:	83 f0 01             	xor    eax,0x1
c0015b4f:	84 c0                	test   al,al
c0015b51:	74 05                	je     c0015b58 <sendKeyboardToken(KeyboardToken)+0x43a>
c0015b53:	e8 5d a8 ff ff       	call   c00103b5 <doTerminalCycle()>
c0015b58:	90                   	nop
c0015b59:	c9                   	leave  
c0015b5a:	c3                   	ret    

c0015b5b <clearInternalKeybuffer(VgaText*)>:
c0015b5b:	55                   	push   ebp
c0015b5c:	89 e5                	mov    ebp,esp
c0015b5e:	83 ec 08             	sub    esp,0x8
c0015b61:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b64:	05 98 01 00 00       	add    eax,0x198
c0015b69:	83 ec 0c             	sub    esp,0xc
c0015b6c:	50                   	push   eax
c0015b6d:	e8 fa ab fe ff       	call   c000076c <strlen>
c0015b72:	83 c4 10             	add    esp,0x10
c0015b75:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0015b78:	81 c2 98 01 00 00    	add    edx,0x198
c0015b7e:	83 ec 04             	sub    esp,0x4
c0015b81:	50                   	push   eax
c0015b82:	6a 00                	push   0x0
c0015b84:	52                   	push   edx
c0015b85:	e8 c6 ab fe ff       	call   c0000750 <memset>
c0015b8a:	83 c4 10             	add    esp,0x10
c0015b8d:	90                   	nop
c0015b8e:	c9                   	leave  
c0015b8f:	c3                   	ret    

c0015b90 <readKeyboard(VgaText*, char*, unsigned long)>:
c0015b90:	55                   	push   ebp
c0015b91:	89 e5                	mov    ebp,esp
c0015b93:	83 ec 18             	sub    esp,0x18
c0015b96:	a1 48 db 02 c0       	mov    eax,ds:0xc002db48
c0015b9b:	85 c0                	test   eax,eax
c0015b9d:	74 2a                	je     c0015bc9 <readKeyboard(VgaText*, char*, unsigned long)+0x39>
c0015b9f:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c0015ba5:	8b 0d 48 db 02 c0    	mov    ecx,DWORD PTR ds:0xc002db48
c0015bab:	83 ec 04             	sub    esp,0x4
c0015bae:	68 60 db 02 c0       	push   0xc002db60
c0015bb3:	83 ec 08             	sub    esp,0x8
c0015bb6:	89 e2                	mov    edx,esp
c0015bb8:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0015bbb:	89 02                	mov    DWORD PTR [edx],eax
c0015bbd:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0015bc0:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c0015bc4:	ff d1                	call   ecx
c0015bc6:	83 c4 10             	add    esp,0x10
c0015bc9:	fb                   	sti    
c0015bca:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c0015bd1:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c0015bd5:	0f 84 a1 00 00 00    	je     c0015c7c <readKeyboard(VgaText*, char*, unsigned long)+0xec>
c0015bdb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015bde:	8a 80 98 01 00 00    	mov    al,BYTE PTR [eax+0x198]
c0015be4:	84 c0                	test   al,al
c0015be6:	75 28                	jne    c0015c10 <readKeyboard(VgaText*, char*, unsigned long)+0x80>
c0015be8:	fa                   	cli    
c0015be9:	a1 c8 0e 03 c0       	mov    eax,ds:0xc0030ec8
c0015bee:	40                   	inc    eax
c0015bef:	a3 c8 0e 03 c0       	mov    ds:0xc0030ec8,eax
c0015bf4:	e8 cc 7d 00 00       	call   c001d9c5 <schedule()>
c0015bf9:	a1 c8 0e 03 c0       	mov    eax,ds:0xc0030ec8
c0015bfe:	48                   	dec    eax
c0015bff:	a3 c8 0e 03 c0       	mov    ds:0xc0030ec8,eax
c0015c04:	a1 c8 0e 03 c0       	mov    eax,ds:0xc0030ec8
c0015c09:	85 c0                	test   eax,eax
c0015c0b:	75 ce                	jne    c0015bdb <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c0015c0d:	fb                   	sti    
c0015c0e:	eb cb                	jmp    c0015bdb <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c0015c10:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015c13:	8d 50 01             	lea    edx,[eax+0x1]
c0015c16:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c0015c19:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0015c1c:	8a 92 98 01 00 00    	mov    dl,BYTE PTR [edx+0x198]
c0015c22:	88 10                	mov    BYTE PTR [eax],dl
c0015c24:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015c27:	8a 80 98 01 00 00    	mov    al,BYTE PTR [eax+0x198]
c0015c2d:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c0015c30:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015c33:	05 98 01 00 00       	add    eax,0x198
c0015c38:	83 ec 0c             	sub    esp,0xc
c0015c3b:	50                   	push   eax
c0015c3c:	e8 2b ab fe ff       	call   c000076c <strlen>
c0015c41:	83 c4 10             	add    esp,0x10
c0015c44:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0015c47:	81 c2 98 01 00 00    	add    edx,0x198
c0015c4d:	8d 4a 01             	lea    ecx,[edx+0x1]
c0015c50:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0015c53:	81 c2 98 01 00 00    	add    edx,0x198
c0015c59:	83 ec 04             	sub    esp,0x4
c0015c5c:	50                   	push   eax
c0015c5d:	51                   	push   ecx
c0015c5e:	52                   	push   edx
c0015c5f:	e8 24 aa fe ff       	call   c0000688 <memmove>
c0015c64:	83 c4 10             	add    esp,0x10
c0015c67:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c0015c6a:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0015c6d:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c0015c71:	0f 85 5a ff ff ff    	jne    c0015bd1 <readKeyboard(VgaText*, char*, unsigned long)+0x41>
c0015c77:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c7a:	eb 03                	jmp    c0015c7f <readKeyboard(VgaText*, char*, unsigned long)+0xef>
c0015c7c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c7f:	c9                   	leave  
c0015c80:	c3                   	ret    
c0015c81:	90                   	nop

c0015c82 <Keyboard::Keyboard(char const*)>:
c0015c82:	83 ec 0c             	sub    esp,0xc
c0015c85:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015c89:	83 ec 08             	sub    esp,0x8
c0015c8c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015c90:	50                   	push   eax
c0015c91:	e8 70 e0 ff ff       	call   c0013d06 <Device::Device(char const*)>
c0015c96:	83 c4 10             	add    esp,0x10
c0015c99:	ba 3c af 02 c0       	mov    edx,0xc002af3c
c0015c9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015ca2:	89 10                	mov    DWORD PTR [eax],edx
c0015ca4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015ca8:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c0015cb2:	c6 05 44 db 02 c0 01 	mov    BYTE PTR ds:0xc002db44,0x1
c0015cb9:	90                   	nop
c0015cba:	83 c4 0c             	add    esp,0xc
c0015cbd:	c3                   	ret    

c0015cbe <Keyboard::~Keyboard()>:
c0015cbe:	83 ec 0c             	sub    esp,0xc
c0015cc1:	ba 3c af 02 c0       	mov    edx,0xc002af3c
c0015cc6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015cca:	89 10                	mov    DWORD PTR [eax],edx
c0015ccc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015cd0:	83 ec 0c             	sub    esp,0xc
c0015cd3:	50                   	push   eax
c0015cd4:	e8 f7 dc ff ff       	call   c00139d0 <Device::~Device()>
c0015cd9:	83 c4 10             	add    esp,0x10
c0015cdc:	90                   	nop
c0015cdd:	83 c4 0c             	add    esp,0xc
c0015ce0:	c3                   	ret    
c0015ce1:	90                   	nop

c0015ce2 <Keyboard::~Keyboard()>:
c0015ce2:	83 ec 0c             	sub    esp,0xc
c0015ce5:	83 ec 0c             	sub    esp,0xc
c0015ce8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015cec:	e8 cd ff ff ff       	call   c0015cbe <Keyboard::~Keyboard()>
c0015cf1:	83 c4 10             	add    esp,0x10
c0015cf4:	83 ec 08             	sub    esp,0x8
c0015cf7:	68 5c 01 00 00       	push   0x15c
c0015cfc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015d00:	e8 ec c8 ff ff       	call   c00125f1 <operator delete(void*, unsigned long)>
c0015d05:	83 c4 10             	add    esp,0x10
c0015d08:	83 c4 0c             	add    esp,0xc
c0015d0b:	c3                   	ret    

c0015d0c <LogicalDisk::close(int, int, void*)>:
c0015d0c:	83 c8 ff             	or     eax,0xffffffff
c0015d0f:	c3                   	ret    

c0015d10 <LogicalDisk::~LogicalDisk()>:
c0015d10:	83 ec 0c             	sub    esp,0xc
c0015d13:	ba b4 af 02 c0       	mov    edx,0xc002afb4
c0015d18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015d1c:	89 10                	mov    DWORD PTR [eax],edx
c0015d1e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015d22:	83 ec 0c             	sub    esp,0xc
c0015d25:	50                   	push   eax
c0015d26:	e8 a5 dc ff ff       	call   c00139d0 <Device::~Device()>
c0015d2b:	83 c4 10             	add    esp,0x10
c0015d2e:	90                   	nop
c0015d2f:	83 c4 0c             	add    esp,0xc
c0015d32:	c3                   	ret    
c0015d33:	90                   	nop

c0015d34 <LogicalDisk::~LogicalDisk()>:
c0015d34:	83 ec 0c             	sub    esp,0xc
c0015d37:	83 ec 0c             	sub    esp,0xc
c0015d3a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015d3e:	e8 cd ff ff ff       	call   c0015d10 <LogicalDisk::~LogicalDisk()>
c0015d43:	83 c4 10             	add    esp,0x10
c0015d46:	83 ec 08             	sub    esp,0x8
c0015d49:	68 74 01 00 00       	push   0x174
c0015d4e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015d52:	e8 9a c8 ff ff       	call   c00125f1 <operator delete(void*, unsigned long)>
c0015d57:	83 c4 10             	add    esp,0x10
c0015d5a:	83 c4 0c             	add    esp,0xc
c0015d5d:	c3                   	ret    

c0015d5e <LogicalDisk::open(int, int, void*)>:
c0015d5e:	83 ec 18             	sub    esp,0x18
c0015d61:	68 68 af 02 c0       	push   0xc002af68
c0015d66:	e8 ca 40 00 00       	call   c0019e35 <Krnl::panic(char const*)>
c0015d6b:	83 c8 ff             	or     eax,0xffffffff
c0015d6e:	83 c4 1c             	add    esp,0x1c
c0015d71:	c3                   	ret    

c0015d72 <LogicalDisk::absoluteToRelative(unsigned long long)>:
c0015d72:	53                   	push   ebx
c0015d73:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0015d77:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015d7b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015d7f:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c0015d85:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c0015d8b:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c0015d91:	77 10                	ja     c0015da3 <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c0015d93:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c0015d99:	89 d3                	mov    ebx,edx
c0015d9b:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c0015da1:	72 05                	jb     c0015da8 <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c0015da3:	83 c8 ff             	or     eax,0xffffffff
c0015da6:	89 c2                	mov    edx,eax
c0015da8:	5b                   	pop    ebx
c0015da9:	c3                   	ret    

c0015daa <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c0015daa:	56                   	push   esi
c0015dab:	83 c8 ff             	or     eax,0xffffffff
c0015dae:	53                   	push   ebx
c0015daf:	89 c2                	mov    edx,eax
c0015db1:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0015db5:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0015db9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0015dbd:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0015dc3:	77 27                	ja     c0015dec <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c0015dc5:	89 d8                	mov    eax,ebx
c0015dc7:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c0015dcd:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c0015dd3:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015dd8:	89 c2                	mov    edx,eax
c0015dda:	73 10                	jae    c0015dec <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c0015ddc:	89 c8                	mov    eax,ecx
c0015dde:	89 da                	mov    edx,ebx
c0015de0:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0015de6:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c0015dec:	5b                   	pop    ebx
c0015ded:	5e                   	pop    esi
c0015dee:	c3                   	ret    
c0015def:	90                   	nop

c0015df0 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c0015df0:	83 ec 1c             	sub    esp,0x1c
c0015df3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0015df7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0015dfb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015dff:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015e03:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0015e07:	89 04 24             	mov    DWORD PTR [esp],eax
c0015e0a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0015e0e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015e12:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015e16:	83 ec 08             	sub    esp,0x8
c0015e19:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015e1d:	50                   	push   eax
c0015e1e:	e8 e3 de ff ff       	call   c0013d06 <Device::Device(char const*)>
c0015e23:	83 c4 10             	add    esp,0x10
c0015e26:	ba b4 af 02 c0       	mov    edx,0xc002afb4
c0015e2b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015e2f:	89 10                	mov    DWORD PTR [eax],edx
c0015e31:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015e35:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0015e3c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015e40:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0015e47:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015e4b:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c0015e55:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0015e59:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015e5d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015e61:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c0015e67:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c0015e6d:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0015e71:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0015e74:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0015e78:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c0015e7e:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c0015e84:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015e88:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0015e8c:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c0015e92:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015e96:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c0015ea0:	90                   	nop
c0015ea1:	83 c4 1c             	add    esp,0x1c
c0015ea4:	c3                   	ret    
c0015ea5:	90                   	nop

c0015ea6 <LogicalDisk::assignDriveLetter()>:
c0015ea6:	55                   	push   ebp
c0015ea7:	57                   	push   edi
c0015ea8:	56                   	push   esi
c0015ea9:	53                   	push   ebx
c0015eaa:	83 ec 14             	sub    esp,0x14
c0015ead:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0015eb1:	8b 3d 80 df 02 c0    	mov    edi,DWORD PTR ds:0xc002df80
c0015eb7:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c0015ebd:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0015ec1:	8a 83 69 01 00 00    	mov    al,BYTE PTR [ebx+0x169]
c0015ec7:	8b 3d 84 df 02 c0    	mov    edi,DWORD PTR ds:0xc002df84
c0015ecd:	3c 01                	cmp    al,0x1
c0015ecf:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c0015ed3:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0015ed7:	19 c0                	sbb    eax,eax
c0015ed9:	83 e0 02             	and    eax,0x2
c0015edc:	83 c0 41             	add    eax,0x41
c0015edf:	0f be e8             	movsx  ebp,al
c0015ee2:	3c 43                	cmp    al,0x43
c0015ee4:	75 10                	jne    c0015ef6 <LogicalDisk::assignDriveLetter()+0x50>
c0015ee6:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c0015eed:	75 5d                	jne    c0015f4c <LogicalDisk::assignDriveLetter()+0xa6>
c0015eef:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0015ef4:	75 56                	jne    c0015f4c <LogicalDisk::assignDriveLetter()+0xa6>
c0015ef6:	8d 75 bf             	lea    esi,[ebp-0x41]
c0015ef9:	ba 01 00 00 00       	mov    edx,0x1
c0015efe:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0015f02:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0015f06:	d3 e2                	shl    edx,cl
c0015f08:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0015f0c:	89 d7                	mov    edi,edx
c0015f0e:	89 d6                	mov    esi,edx
c0015f10:	c1 ff 1f             	sar    edi,0x1f
c0015f13:	23 54 24 08          	and    edx,DWORD PTR [esp+0x8]
c0015f17:	21 f9                	and    ecx,edi
c0015f19:	09 d1                	or     ecx,edx
c0015f1b:	75 2f                	jne    c0015f4c <LogicalDisk::assignDriveLetter()+0xa6>
c0015f1d:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0015f21:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0015f25:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c0015f2b:	09 f2                	or     edx,esi
c0015f2d:	89 15 80 df 02 c0    	mov    DWORD PTR ds:0xc002df80,edx
c0015f33:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015f37:	09 fa                	or     edx,edi
c0015f39:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0015f3d:	89 15 84 df 02 c0    	mov    DWORD PTR ds:0xc002df84,edx
c0015f43:	89 1c bd a0 df 02 c0 	mov    DWORD PTR [edi*4-0x3ffd2060],ebx
c0015f4a:	eb 08                	jmp    c0015f54 <LogicalDisk::assignDriveLetter()+0xae>
c0015f4c:	45                   	inc    ebp
c0015f4d:	40                   	inc    eax
c0015f4e:	3c 5b                	cmp    al,0x5b
c0015f50:	75 90                	jne    c0015ee2 <LogicalDisk::assignDriveLetter()+0x3c>
c0015f52:	31 c0                	xor    eax,eax
c0015f54:	83 c4 14             	add    esp,0x14
c0015f57:	5b                   	pop    ebx
c0015f58:	5e                   	pop    esi
c0015f59:	5f                   	pop    edi
c0015f5a:	5d                   	pop    ebp
c0015f5b:	c3                   	ret    

c0015f5c <LogicalDisk::mount()>:
c0015f5c:	56                   	push   esi
c0015f5d:	53                   	push   ebx
c0015f5e:	53                   	push   ebx
c0015f5f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015f63:	8b 1d 14 db 02 c0    	mov    ebx,DWORD PTR ds:0xc002db14
c0015f69:	c7 86 70 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x170],0x0
c0015f73:	85 db                	test   ebx,ebx
c0015f75:	74 27                	je     c0015f9e <LogicalDisk::mount()+0x42>
c0015f77:	51                   	push   ecx
c0015f78:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c0015f7f:	8b 13                	mov    edx,DWORD PTR [ebx]
c0015f81:	83 e8 41             	sub    eax,0x41
c0015f84:	50                   	push   eax
c0015f85:	56                   	push   esi
c0015f86:	53                   	push   ebx
c0015f87:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0015f8a:	83 c4 10             	add    esp,0x10
c0015f8d:	84 c0                	test   al,al
c0015f8f:	74 08                	je     c0015f99 <LogicalDisk::mount()+0x3d>
c0015f91:	89 9e 70 01 00 00    	mov    DWORD PTR [esi+0x170],ebx
c0015f97:	eb 07                	jmp    c0015fa0 <LogicalDisk::mount()+0x44>
c0015f99:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c0015f9c:	eb d5                	jmp    c0015f73 <LogicalDisk::mount()+0x17>
c0015f9e:	31 c0                	xor    eax,eax
c0015fa0:	5a                   	pop    edx
c0015fa1:	5b                   	pop    ebx
c0015fa2:	5e                   	pop    esi
c0015fa3:	c3                   	ret    

c0015fa4 <LogicalDisk::unmount()>:
c0015fa4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015fa8:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c0015fb2:	c3                   	ret    
c0015fb3:	90                   	nop

c0015fb4 <LogicalDisk::eject()>:
c0015fb4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015fb8:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0015fbe:	8b 10                	mov    edx,DWORD PTR [eax]
c0015fc0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015fc4:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c0015fc7:	90                   	nop

c0015fc8 <LogicalDisk::unassignDriveLetter()>:
c0015fc8:	57                   	push   edi
c0015fc9:	56                   	push   esi
c0015fca:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015fce:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c0015fd5:	84 c9                	test   cl,cl
c0015fd7:	75 0f                	jne    c0015fe8 <LogicalDisk::unassignDriveLetter()+0x20>
c0015fd9:	c7 44 24 0c 8c af 02 c0 	mov    DWORD PTR [esp+0xc],0xc002af8c
c0015fe1:	5e                   	pop    esi
c0015fe2:	5f                   	pop    edi
c0015fe3:	e9 4d 3e 00 00       	jmp    c0019e35 <Krnl::panic(char const*)>
c0015fe8:	83 e9 41             	sub    ecx,0x41
c0015feb:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c0015ff2:	b8 01 00 00 00       	mov    eax,0x1
c0015ff7:	c7 04 8d a0 df 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd2060],0x0
c0016002:	d3 e0                	shl    eax,cl
c0016004:	89 c7                	mov    edi,eax
c0016006:	f7 d0                	not    eax
c0016008:	c1 ff 1f             	sar    edi,0x1f
c001600b:	21 05 80 df 02 c0    	and    DWORD PTR ds:0xc002df80,eax
c0016011:	89 fe                	mov    esi,edi
c0016013:	f7 d6                	not    esi
c0016015:	21 35 84 df 02 c0    	and    DWORD PTR ds:0xc002df84,esi
c001601b:	5e                   	pop    esi
c001601c:	5f                   	pop    edi
c001601d:	c3                   	ret    

c001601e <LogicalDisk::read(unsigned long long, int, void*)>:
c001601e:	57                   	push   edi
c001601f:	56                   	push   esi
c0016020:	53                   	push   ebx
c0016021:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0016025:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016029:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001602d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016031:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0016037:	77 41                	ja     c001607a <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c0016039:	99                   	cdq    
c001603a:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c0016040:	01 c8                	add    eax,ecx
c0016042:	11 da                	adc    edx,ebx
c0016044:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c001604a:	19 d7                	sbb    edi,edx
c001604c:	72 33                	jb     c0016081 <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c001604e:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c0016054:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c001605a:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001605e:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0016062:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c0016068:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001606e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016072:	5b                   	pop    ebx
c0016073:	5e                   	pop    esi
c0016074:	5f                   	pop    edi
c0016075:	e9 cc 0a 00 00       	jmp    c0016b46 <VCache::read(unsigned long long, int, void*)>
c001607a:	b8 05 00 00 00       	mov    eax,0x5
c001607f:	eb 05                	jmp    c0016086 <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c0016081:	b8 07 00 00 00       	mov    eax,0x7
c0016086:	5b                   	pop    ebx
c0016087:	5e                   	pop    esi
c0016088:	5f                   	pop    edi
c0016089:	c3                   	ret    

c001608a <LogicalDisk::write(unsigned long long, int, void*)>:
c001608a:	57                   	push   edi
c001608b:	56                   	push   esi
c001608c:	53                   	push   ebx
c001608d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0016091:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016095:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0016099:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001609d:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c00160a3:	77 41                	ja     c00160e6 <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c00160a5:	99                   	cdq    
c00160a6:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c00160ac:	01 c8                	add    eax,ecx
c00160ae:	11 da                	adc    edx,ebx
c00160b0:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c00160b6:	19 d7                	sbb    edi,edx
c00160b8:	72 33                	jb     c00160ed <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c00160ba:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c00160c0:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c00160c6:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00160ca:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c00160ce:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c00160d4:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00160da:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00160de:	5b                   	pop    ebx
c00160df:	5e                   	pop    esi
c00160e0:	5f                   	pop    edi
c00160e1:	e9 76 09 00 00       	jmp    c0016a5c <VCache::write(unsigned long long, int, void*)>
c00160e6:	b8 05 00 00 00       	mov    eax,0x5
c00160eb:	eb 05                	jmp    c00160f2 <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c00160ed:	b8 07 00 00 00       	mov    eax,0x7
c00160f2:	5b                   	pop    ebx
c00160f3:	5e                   	pop    esi
c00160f4:	5f                   	pop    edi
c00160f5:	c3                   	ret    

c00160f6 <Mouse::Mouse(char const*)>:
c00160f6:	83 ec 0c             	sub    esp,0xc
c00160f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00160fd:	83 ec 08             	sub    esp,0x8
c0016100:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016104:	50                   	push   eax
c0016105:	e8 fc db ff ff       	call   c0013d06 <Device::Device(char const*)>
c001610a:	83 c4 10             	add    esp,0x10
c001610d:	ba e0 af 02 c0       	mov    edx,0xc002afe0
c0016112:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016116:	89 10                	mov    DWORD PTR [eax],edx
c0016118:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001611c:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c0016126:	90                   	nop
c0016127:	83 c4 0c             	add    esp,0xc
c001612a:	c3                   	ret    
c001612b:	90                   	nop

c001612c <Mouse::~Mouse()>:
c001612c:	83 ec 0c             	sub    esp,0xc
c001612f:	ba e0 af 02 c0       	mov    edx,0xc002afe0
c0016134:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016138:	89 10                	mov    DWORD PTR [eax],edx
c001613a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001613e:	83 ec 0c             	sub    esp,0xc
c0016141:	50                   	push   eax
c0016142:	e8 89 d8 ff ff       	call   c00139d0 <Device::~Device()>
c0016147:	83 c4 10             	add    esp,0x10
c001614a:	90                   	nop
c001614b:	83 c4 0c             	add    esp,0xc
c001614e:	c3                   	ret    
c001614f:	90                   	nop

c0016150 <Mouse::~Mouse()>:
c0016150:	83 ec 0c             	sub    esp,0xc
c0016153:	83 ec 0c             	sub    esp,0xc
c0016156:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001615a:	e8 cd ff ff ff       	call   c001612c <Mouse::~Mouse()>
c001615f:	83 c4 10             	add    esp,0x10
c0016162:	83 ec 08             	sub    esp,0x8
c0016165:	68 58 01 00 00       	push   0x158
c001616a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001616e:	e8 7e c4 ff ff       	call   c00125f1 <operator delete(void*, unsigned long)>
c0016173:	83 c4 10             	add    esp,0x10
c0016176:	83 c4 0c             	add    esp,0xc
c0016179:	c3                   	ret    

c001617a <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c001617a:	55                   	push   ebp
c001617b:	57                   	push   edi
c001617c:	56                   	push   esi
c001617d:	53                   	push   ebx
c001617e:	81 ec 28 01 00 00    	sub    esp,0x128
c0016184:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c001618b:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c0016192:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c0016199:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c00161a0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00161a4:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00161a8:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c00161af:	e8 4e dc ff ff       	call   c0013e02 <Device::getName()>
c00161b4:	5a                   	pop    edx
c00161b5:	59                   	pop    ecx
c00161b6:	50                   	push   eax
c00161b7:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c00161bb:	55                   	push   ebp
c00161bc:	e8 4b a6 fe ff       	call   c000080c <strcpy>
c00161c1:	5b                   	pop    ebx
c00161c2:	58                   	pop    eax
c00161c3:	68 04 b0 02 c0       	push   0xc002b004
c00161c8:	55                   	push   ebp
c00161c9:	e8 7e a7 fe ff       	call   c000094c <strcat>
c00161ce:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c00161d5:	e8 bf 93 ff ff       	call   c000f599 <malloc>
c00161da:	83 c4 0c             	add    esp,0xc
c00161dd:	89 c3                	mov    ebx,eax
c00161df:	57                   	push   edi
c00161e0:	56                   	push   esi
c00161e1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00161e5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00161e9:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c00161f0:	55                   	push   ebp
c00161f1:	50                   	push   eax
c00161f2:	e8 f9 fb ff ff       	call   c0015df0 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c00161f7:	83 c4 14             	add    esp,0x14
c00161fa:	53                   	push   ebx
c00161fb:	e8 a6 fc ff ff       	call   c0015ea6 <LogicalDisk::assignDriveLetter()>
c0016200:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016203:	e8 54 fd ff ff       	call   c0015f5c <LogicalDisk::mount()>
c0016208:	58                   	pop    eax
c0016209:	5a                   	pop    edx
c001620a:	53                   	push   ebx
c001620b:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0016212:	e8 eb d8 ff ff       	call   c0013b02 <Device::addChild(Device*)>
c0016217:	81 c4 2c 01 00 00    	add    esp,0x12c
c001621d:	5b                   	pop    ebx
c001621e:	5e                   	pop    esi
c001621f:	5f                   	pop    edi
c0016220:	5d                   	pop    ebp
c0016221:	c3                   	ret    

c0016222 <createPartitionsForDisk(PhysicalDisk*)>:
c0016222:	55                   	push   ebp
c0016223:	57                   	push   edi
c0016224:	56                   	push   esi
c0016225:	53                   	push   ebx
c0016226:	81 ec 5c 02 00 00    	sub    esp,0x25c
c001622c:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c0016233:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0016239:	3d 00 02 00 00       	cmp    eax,0x200
c001623e:	74 27                	je     c0016267 <createPartitionsForDisk(PhysicalDisk*)+0x45>
c0016240:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c0016246:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c001624c:	83 ec 10             	sub    esp,0x10
c001624f:	0f a4 f7 0a          	shld   edi,esi,0xa
c0016253:	99                   	cdq    
c0016254:	c1 e6 0a             	shl    esi,0xa
c0016257:	52                   	push   edx
c0016258:	89 fd                	mov    ebp,edi
c001625a:	50                   	push   eax
c001625b:	55                   	push   ebp
c001625c:	56                   	push   esi
c001625d:	e8 b2 04 01 00       	call   c0026714 <__udivdi3>
c0016262:	e9 b1 00 00 00       	jmp    c0016318 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c0016267:	83 ec 0c             	sub    esp,0xc
c001626a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001626c:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c0016270:	56                   	push   esi
c0016271:	6a 01                	push   0x1
c0016273:	6a 00                	push   0x0
c0016275:	6a 00                	push   0x0
c0016277:	53                   	push   ebx
c0016278:	ff 50 28             	call   DWORD PTR [eax+0x28]
c001627b:	83 c4 20             	add    esp,0x20
c001627e:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c0016286:	75 0a                	jne    c0016292 <createPartitionsForDisk(PhysicalDisk*)+0x70>
c0016288:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c0016290:	74 2c                	je     c00162be <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c0016292:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0016298:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c001629e:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c00162a4:	83 ec 10             	sub    esp,0x10
c00162a7:	0f a4 c2 0a          	shld   edx,eax,0xa
c00162ab:	89 f7                	mov    edi,esi
c00162ad:	c1 e0 0a             	shl    eax,0xa
c00162b0:	c1 ff 1f             	sar    edi,0x1f
c00162b3:	57                   	push   edi
c00162b4:	56                   	push   esi
c00162b5:	52                   	push   edx
c00162b6:	50                   	push   eax
c00162b7:	e8 58 04 01 00       	call   c0026714 <__udivdi3>
c00162bc:	eb 5a                	jmp    c0016318 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c00162be:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c00162c5:	8a 84 24 1e 02 00 00 	mov    al,BYTE PTR [esp+0x21e]
c00162cc:	83 e1 7f             	and    ecx,0x7f
c00162cf:	83 e0 7f             	and    eax,0x7f
c00162d2:	01 c1                	add    ecx,eax
c00162d4:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c00162db:	83 e0 7f             	and    eax,0x7f
c00162de:	01 c1                	add    ecx,eax
c00162e0:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c00162e7:	83 e0 7f             	and    eax,0x7f
c00162ea:	00 c1                	add    cl,al
c00162ec:	74 41                	je     c001632f <createPartitionsForDisk(PhysicalDisk*)+0x10d>
c00162ee:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c00162f4:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c00162fa:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0016300:	83 ec 10             	sub    esp,0x10
c0016303:	0f a4 c2 0a          	shld   edx,eax,0xa
c0016307:	89 f7                	mov    edi,esi
c0016309:	c1 e0 0a             	shl    eax,0xa
c001630c:	c1 ff 1f             	sar    edi,0x1f
c001630f:	57                   	push   edi
c0016310:	56                   	push   esi
c0016311:	52                   	push   edx
c0016312:	50                   	push   eax
c0016313:	e8 fc 03 01 00       	call   c0026714 <__udivdi3>
c0016318:	83 c4 14             	add    esp,0x14
c001631b:	52                   	push   edx
c001631c:	50                   	push   eax
c001631d:	6a 00                	push   0x0
c001631f:	6a 00                	push   0x0
c0016321:	53                   	push   ebx
c0016322:	e8 53 fe ff ff       	call   c001617a <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c0016327:	83 c4 20             	add    esp,0x20
c001632a:	e9 79 01 00 00       	jmp    c00164a8 <createPartitionsForDisk(PhysicalDisk*)+0x286>
c001632f:	89 f0                	mov    eax,esi
c0016331:	31 f6                	xor    esi,esi
c0016333:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c001633a:	75 02                	jne    c001633e <createPartitionsForDisk(PhysicalDisk*)+0x11c>
c001633c:	89 f1                	mov    ecx,esi
c001633e:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c0016345:	0f b6 b8 c8 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c8]
c001634c:	c1 e2 08             	shl    edx,0x8
c001634f:	c1 e7 10             	shl    edi,0x10
c0016352:	c7 44 f4 14 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x14],0x0
c001635a:	09 fa                	or     edx,edi
c001635c:	c7 44 f4 34 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x34],0x0
c0016364:	0f b6 b8 c6 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c6]
c001636b:	83 c0 10             	add    eax,0x10
c001636e:	09 fa                	or     edx,edi
c0016370:	0f b6 b8 b9 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b9]
c0016377:	c1 e7 18             	shl    edi,0x18
c001637a:	09 fa                	or     edx,edi
c001637c:	0f b6 b8 bc 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bc]
c0016383:	89 54 f4 10          	mov    DWORD PTR [esp+esi*8+0x10],edx
c0016387:	c1 e7 10             	shl    edi,0x10
c001638a:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c0016391:	c1 e2 08             	shl    edx,0x8
c0016394:	09 fa                	or     edx,edi
c0016396:	0f b6 b8 ba 01 00 00 	movzx  edi,BYTE PTR [eax+0x1ba]
c001639d:	09 fa                	or     edx,edi
c001639f:	0f b6 b8 bd 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bd]
c00163a6:	c1 e7 18             	shl    edi,0x18
c00163a9:	09 fa                	or     edx,edi
c00163ab:	89 54 f4 30          	mov    DWORD PTR [esp+esi*8+0x30],edx
c00163af:	46                   	inc    esi
c00163b0:	83 fe 04             	cmp    esi,0x4
c00163b3:	0f 85 7a ff ff ff    	jne    c0016333 <createPartitionsForDisk(PhysicalDisk*)+0x111>
c00163b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00163bd:	83 f0 01             	xor    eax,0x1
c00163c0:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c00163c4:	75 57                	jne    c001641d <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c00163c6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00163ca:	83 f0 01             	xor    eax,0x1
c00163cd:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c00163d1:	75 4a                	jne    c001641d <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c00163d3:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00163d7:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00163df:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00163e7:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c00163ed:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c00163f3:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c00163f9:	0f a4 c2 0a          	shld   edx,eax,0xa
c00163fd:	89 f7                	mov    edi,esi
c00163ff:	c1 e0 0a             	shl    eax,0xa
c0016402:	c1 ff 1f             	sar    edi,0x1f
c0016405:	57                   	push   edi
c0016406:	56                   	push   esi
c0016407:	52                   	push   edx
c0016408:	50                   	push   eax
c0016409:	e8 06 03 01 00       	call   c0026714 <__udivdi3>
c001640e:	83 c4 10             	add    esp,0x10
c0016411:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0016415:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0016419:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c001641d:	84 c9                	test   cl,cl
c001641f:	74 53                	je     c0016474 <createPartitionsForDisk(PhysicalDisk*)+0x252>
c0016421:	0f b6 c9             	movzx  ecx,cl
c0016424:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016428:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001642c:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016430:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0016434:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016438:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001643c:	8b 44 cc 10          	mov    eax,DWORD PTR [esp+ecx*8+0x10]
c0016440:	8b 54 cc 14          	mov    edx,DWORD PTR [esp+ecx*8+0x14]
c0016444:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016448:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c001644c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016450:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016454:	89 44 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],eax
c0016458:	89 54 cc 14          	mov    DWORD PTR [esp+ecx*8+0x14],edx
c001645c:	8b 44 cc 30          	mov    eax,DWORD PTR [esp+ecx*8+0x30]
c0016460:	8b 54 cc 34          	mov    edx,DWORD PTR [esp+ecx*8+0x34]
c0016464:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0016468:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001646c:	89 74 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],esi
c0016470:	89 7c cc 34          	mov    DWORD PTR [esp+ecx*8+0x34],edi
c0016474:	31 ed                	xor    ebp,ebp
c0016476:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c001647a:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c001647e:	89 f8                	mov    eax,edi
c0016480:	09 f0                	or     eax,esi
c0016482:	74 1e                	je     c00164a2 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c0016484:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c0016488:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c001648c:	89 d1                	mov    ecx,edx
c001648e:	09 c1                	or     ecx,eax
c0016490:	74 10                	je     c00164a2 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c0016492:	83 ec 0c             	sub    esp,0xc
c0016495:	57                   	push   edi
c0016496:	56                   	push   esi
c0016497:	52                   	push   edx
c0016498:	50                   	push   eax
c0016499:	53                   	push   ebx
c001649a:	e8 db fc ff ff       	call   c001617a <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c001649f:	83 c4 20             	add    esp,0x20
c00164a2:	45                   	inc    ebp
c00164a3:	83 fd 04             	cmp    ebp,0x4
c00164a6:	75 ce                	jne    c0016476 <createPartitionsForDisk(PhysicalDisk*)+0x254>
c00164a8:	81 c4 5c 02 00 00    	add    esp,0x25c
c00164ae:	5b                   	pop    ebx
c00164af:	5e                   	pop    esi
c00164b0:	5f                   	pop    edi
c00164b1:	5d                   	pop    ebp
c00164b2:	c3                   	ret    
c00164b3:	90                   	nop

c00164b4 <Serial::Serial(char const*)>:
c00164b4:	83 ec 0c             	sub    esp,0xc
c00164b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00164bb:	83 ec 08             	sub    esp,0x8
c00164be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00164c2:	50                   	push   eax
c00164c3:	e8 3e d8 ff ff       	call   c0013d06 <Device::Device(char const*)>
c00164c8:	83 c4 10             	add    esp,0x10
c00164cb:	ba 18 b0 02 c0       	mov    edx,0xc002b018
c00164d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00164d4:	89 10                	mov    DWORD PTR [eax],edx
c00164d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00164da:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c00164e4:	90                   	nop
c00164e5:	83 c4 0c             	add    esp,0xc
c00164e8:	c3                   	ret    
c00164e9:	90                   	nop

c00164ea <Serial::~Serial()>:
c00164ea:	83 ec 0c             	sub    esp,0xc
c00164ed:	ba 18 b0 02 c0       	mov    edx,0xc002b018
c00164f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00164f6:	89 10                	mov    DWORD PTR [eax],edx
c00164f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00164fc:	83 ec 0c             	sub    esp,0xc
c00164ff:	50                   	push   eax
c0016500:	e8 cb d4 ff ff       	call   c00139d0 <Device::~Device()>
c0016505:	83 c4 10             	add    esp,0x10
c0016508:	90                   	nop
c0016509:	83 c4 0c             	add    esp,0xc
c001650c:	c3                   	ret    
c001650d:	90                   	nop

c001650e <Serial::~Serial()>:
c001650e:	83 ec 0c             	sub    esp,0xc
c0016511:	83 ec 0c             	sub    esp,0xc
c0016514:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016518:	e8 cd ff ff ff       	call   c00164ea <Serial::~Serial()>
c001651d:	83 c4 10             	add    esp,0x10
c0016520:	83 ec 08             	sub    esp,0x8
c0016523:	68 58 01 00 00       	push   0x158
c0016528:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001652c:	e8 c0 c0 ff ff       	call   c00125f1 <operator delete(void*, unsigned long)>
c0016531:	83 c4 10             	add    esp,0x10
c0016534:	83 c4 0c             	add    esp,0xc
c0016537:	c3                   	ret    

c0016538 <Timer::Timer(char const*)>:
c0016538:	83 ec 0c             	sub    esp,0xc
c001653b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001653f:	83 ec 08             	sub    esp,0x8
c0016542:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016546:	50                   	push   eax
c0016547:	e8 ba d7 ff ff       	call   c0013d06 <Device::Device(char const*)>
c001654c:	83 c4 10             	add    esp,0x10
c001654f:	ba 5c b0 02 c0       	mov    edx,0xc002b05c
c0016554:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016558:	89 10                	mov    DWORD PTR [eax],edx
c001655a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001655e:	c7 80 10 01 00 00 0e 00 00 00 	mov    DWORD PTR [eax+0x110],0xe
c0016568:	90                   	nop
c0016569:	83 c4 0c             	add    esp,0xc
c001656c:	c3                   	ret    
c001656d:	90                   	nop

c001656e <Timer::~Timer()>:
c001656e:	83 ec 0c             	sub    esp,0xc
c0016571:	ba 5c b0 02 c0       	mov    edx,0xc002b05c
c0016576:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001657a:	89 10                	mov    DWORD PTR [eax],edx
c001657c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016580:	83 ec 0c             	sub    esp,0xc
c0016583:	50                   	push   eax
c0016584:	e8 47 d4 ff ff       	call   c00139d0 <Device::~Device()>
c0016589:	83 c4 10             	add    esp,0x10
c001658c:	90                   	nop
c001658d:	83 c4 0c             	add    esp,0xc
c0016590:	c3                   	ret    
c0016591:	90                   	nop

c0016592 <Timer::~Timer()>:
c0016592:	83 ec 0c             	sub    esp,0xc
c0016595:	83 ec 0c             	sub    esp,0xc
c0016598:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001659c:	e8 cd ff ff ff       	call   c001656e <Timer::~Timer()>
c00165a1:	83 c4 10             	add    esp,0x10
c00165a4:	83 ec 08             	sub    esp,0x8
c00165a7:	68 5c 01 00 00       	push   0x15c
c00165ac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00165b0:	e8 3c c0 ff ff       	call   c00125f1 <operator delete(void*, unsigned long)>
c00165b5:	83 c4 10             	add    esp,0x10
c00165b8:	83 c4 0c             	add    esp,0xc
c00165bb:	c3                   	ret    

c00165bc <Timer::read()>:
c00165bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00165c0:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00165c6:	c3                   	ret    

c00165c7 <timerHandler(unsigned long long)>:
c00165c7:	55                   	push   ebp
c00165c8:	57                   	push   edi
c00165c9:	56                   	push   esi
c00165ca:	53                   	push   ebx
c00165cb:	83 ec 0c             	sub    esp,0xc
c00165ce:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00165d2:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c00165d6:	01 35 10 e0 02 c0    	add    DWORD PTR ds:0xc002e010,esi
c00165dc:	11 3d 14 e0 02 c0    	adc    DWORD PTR ds:0xc002e014,edi
c00165e2:	80 3d ad d9 02 c0 00 	cmp    BYTE PTR ds:0xc002d9ad,0x0
c00165e9:	0f 84 42 01 00 00    	je     c0016731 <timerHandler(unsigned long long)+0x16a>
c00165ef:	fa                   	cli    
c00165f0:	ff 05 c8 0e 03 c0    	inc    DWORD PTR ds:0xc0030ec8
c00165f6:	83 ec 0c             	sub    esp,0xc
c00165f9:	ff 05 c4 0e 03 c0    	inc    DWORD PTR ds:0xc0030ec4
c00165ff:	68 d8 0e 03 c0       	push   0xc0030ed8
c0016604:	e8 65 21 01 00       	call   c002876e <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016609:	83 c4 10             	add    esp,0x10
c001660c:	84 c0                	test   al,al
c001660e:	0f 85 a2 00 00 00    	jne    c00166b6 <timerHandler(unsigned long long)+0xef>
c0016614:	83 ec 0c             	sub    esp,0xc
c0016617:	68 d8 0e 03 c0       	push   0xc0030ed8
c001661c:	e8 69 21 01 00       	call   c002878a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016621:	83 c4 10             	add    esp,0x10
c0016624:	89 c3                	mov    ebx,eax
c0016626:	83 ec 0c             	sub    esp,0xc
c0016629:	68 d8 0e 03 c0       	push   0xc0030ed8
c001662e:	e8 57 21 01 00       	call   c002878a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016633:	c7 04 24 d8 0e 03 c0 	mov    DWORD PTR [esp],0xc0030ed8
c001663a:	89 c5                	mov    ebp,eax
c001663c:	e8 51 21 01 00       	call   c0028792 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0016641:	8b 55 2c             	mov    edx,DWORD PTR [ebp+0x2c]
c0016644:	83 c4 10             	add    esp,0x10
c0016647:	8b 4d 30             	mov    ecx,DWORD PTR [ebp+0x30]
c001664a:	39 15 10 e0 02 c0    	cmp    DWORD PTR ds:0xc002e010,edx
c0016650:	a1 14 e0 02 c0       	mov    eax,ds:0xc002e014
c0016655:	19 c8                	sbb    eax,ecx
c0016657:	72 21                	jb     c001667a <timerHandler(unsigned long long)+0xb3>
c0016659:	83 ec 0c             	sub    esp,0xc
c001665c:	55                   	push   ebp
c001665d:	e8 e6 77 00 00       	call   c001de48 <unblockTask(ThreadControlBlock*)>
c0016662:	83 c4 10             	add    esp,0x10
c0016665:	39 eb                	cmp    ebx,ebp
c0016667:	75 21                	jne    c001668a <timerHandler(unsigned long long)+0xc3>
c0016669:	83 ec 0c             	sub    esp,0xc
c001666c:	68 d8 0e 03 c0       	push   0xc0030ed8
c0016671:	e8 14 21 01 00       	call   c002878a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016676:	89 c3                	mov    ebx,eax
c0016678:	eb 0d                	jmp    c0016687 <timerHandler(unsigned long long)+0xc0>
c001667a:	50                   	push   eax
c001667b:	50                   	push   eax
c001667c:	55                   	push   ebp
c001667d:	68 d8 0e 03 c0       	push   0xc0030ed8
c0016682:	e8 b9 21 01 00       	call   c0028840 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0016687:	83 c4 10             	add    esp,0x10
c001668a:	83 ec 0c             	sub    esp,0xc
c001668d:	68 d8 0e 03 c0       	push   0xc0030ed8
c0016692:	e8 d7 20 01 00       	call   c002876e <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016697:	83 c4 10             	add    esp,0x10
c001669a:	84 c0                	test   al,al
c001669c:	75 18                	jne    c00166b6 <timerHandler(unsigned long long)+0xef>
c001669e:	83 ec 0c             	sub    esp,0xc
c00166a1:	68 d8 0e 03 c0       	push   0xc0030ed8
c00166a6:	e8 df 20 01 00       	call   c002878a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00166ab:	83 c4 10             	add    esp,0x10
c00166ae:	39 d8                	cmp    eax,ebx
c00166b0:	0f 85 70 ff ff ff    	jne    c0016626 <timerHandler(unsigned long long)+0x5f>
c00166b6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00166bb:	83 78 38 00          	cmp    DWORD PTR [eax+0x38],0x0
c00166bf:	74 3d                	je     c00166fe <timerHandler(unsigned long long)+0x137>
c00166c1:	80 3d ac d9 02 c0 00 	cmp    BYTE PTR ds:0xc002d9ac,0x0
c00166c8:	74 34                	je     c00166fe <timerHandler(unsigned long long)+0x137>
c00166ca:	fa                   	cli    
c00166cb:	ff 05 c8 0e 03 c0    	inc    DWORD PTR ds:0xc0030ec8
c00166d1:	31 d2                	xor    edx,edx
c00166d3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00166d8:	89 f9                	mov    ecx,edi
c00166da:	29 70 38             	sub    DWORD PTR [eax+0x38],esi
c00166dd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00166e2:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00166e5:	39 c6                	cmp    esi,eax
c00166e7:	19 d1                	sbb    ecx,edx
c00166e9:	72 05                	jb     c00166f0 <timerHandler(unsigned long long)+0x129>
c00166eb:	e8 d5 72 00 00       	call   c001d9c5 <schedule()>
c00166f0:	a1 c8 0e 03 c0       	mov    eax,ds:0xc0030ec8
c00166f5:	48                   	dec    eax
c00166f6:	a3 c8 0e 03 c0       	mov    ds:0xc0030ec8,eax
c00166fb:	75 01                	jne    c00166fe <timerHandler(unsigned long long)+0x137>
c00166fd:	fb                   	sti    
c00166fe:	a1 c4 0e 03 c0       	mov    eax,ds:0xc0030ec4
c0016703:	48                   	dec    eax
c0016704:	a3 c4 0e 03 c0       	mov    ds:0xc0030ec4,eax
c0016709:	75 18                	jne    c0016723 <timerHandler(unsigned long long)+0x15c>
c001670b:	83 3d c0 0e 03 c0 00 	cmp    DWORD PTR ds:0xc0030ec0,0x0
c0016712:	74 0f                	je     c0016723 <timerHandler(unsigned long long)+0x15c>
c0016714:	c7 05 c0 0e 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030ec0,0x0
c001671e:	e8 a2 72 00 00       	call   c001d9c5 <schedule()>
c0016723:	a1 c8 0e 03 c0       	mov    eax,ds:0xc0030ec8
c0016728:	48                   	dec    eax
c0016729:	a3 c8 0e 03 c0       	mov    ds:0xc0030ec8,eax
c001672e:	75 01                	jne    c0016731 <timerHandler(unsigned long long)+0x16a>
c0016730:	fb                   	sti    
c0016731:	83 c4 0c             	add    esp,0xc
c0016734:	5b                   	pop    ebx
c0016735:	5e                   	pop    esi
c0016736:	5f                   	pop    edi
c0016737:	5d                   	pop    ebp
c0016738:	c3                   	ret    

c0016739 <setupTimer(int)>:
c0016739:	57                   	push   edi
c001673a:	a1 a8 d9 02 c0       	mov    eax,ds:0xc002d9a8
c001673f:	56                   	push   esi
c0016740:	53                   	push   ebx
c0016741:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016745:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001674b:	83 ec 0c             	sub    esp,0xc
c001674e:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0016754:	e8 a9 d6 ff ff       	call   c0013e02 <Device::getName()>
c0016759:	83 c4 10             	add    esp,0x10
c001675c:	80 38 41             	cmp    BYTE PTR [eax],0x41
c001675f:	0f 85 8d 00 00 00    	jne    c00167f2 <setupTimer(int)+0xb9>
c0016765:	a1 a8 d9 02 c0       	mov    eax,ds:0xc002d9a8
c001676a:	f6 80 e8 01 00 00 01 	test   BYTE PTR [eax+0x1e8],0x1
c0016771:	74 7f                	je     c00167f2 <setupTimer(int)+0xb9>
c0016773:	83 ec 0c             	sub    esp,0xc
c0016776:	68 5c 01 00 00       	push   0x15c
c001677b:	e8 19 8e ff ff       	call   c000f599 <malloc>
c0016780:	89 04 24             	mov    DWORD PTR [esp],eax
c0016783:	89 c3                	mov    ebx,eax
c0016785:	e8 5a fb 00 00       	call   c00262e4 <PIT::PIT()>
c001678a:	59                   	pop    ecx
c001678b:	5f                   	pop    edi
c001678c:	53                   	push   ebx
c001678d:	ff 35 a8 d9 02 c0    	push   DWORD PTR ds:0xc002d9a8
c0016793:	e8 6a d3 ff ff       	call   c0013b02 <Device::addChild(Device*)>
c0016798:	8b 03                	mov    eax,DWORD PTR [ebx]
c001679a:	6a 00                	push   0x0
c001679c:	6a 00                	push   0x0
c001679e:	56                   	push   esi
c001679f:	53                   	push   ebx
c00167a0:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00167a3:	83 c4 14             	add    esp,0x14
c00167a6:	68 60 01 00 00       	push   0x160
c00167ab:	e8 e9 8d ff ff       	call   c000f599 <malloc>
c00167b0:	89 04 24             	mov    DWORD PTR [esp],eax
c00167b3:	89 c7                	mov    edi,eax
c00167b5:	e8 da f9 00 00       	call   c0026194 <APICTimer::APICTimer()>
c00167ba:	6a 00                	push   0x0
c00167bc:	6a 00                	push   0x0
c00167be:	56                   	push   esi
c00167bf:	57                   	push   edi
c00167c0:	e8 d1 f8 00 00       	call   c0026096 <APICTimer::open(int, int, void*)>
c00167c5:	83 c4 20             	add    esp,0x20
c00167c8:	8b 03                	mov    eax,DWORD PTR [ebx]
c00167ca:	6a 00                	push   0x0
c00167cc:	6a 00                	push   0x0
c00167ce:	6a 00                	push   0x0
c00167d0:	53                   	push   ebx
c00167d1:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00167d4:	58                   	pop    eax
c00167d5:	a1 a8 d9 02 c0       	mov    eax,ds:0xc002d9a8
c00167da:	5a                   	pop    edx
c00167db:	57                   	push   edi
c00167dc:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00167e2:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c00167e8:	e8 15 d3 ff ff       	call   c0013b02 <Device::addChild(Device*)>
c00167ed:	83 c4 10             	add    esp,0x10
c00167f0:	eb 33                	jmp    c0016825 <setupTimer(int)+0xec>
c00167f2:	83 ec 0c             	sub    esp,0xc
c00167f5:	68 5c 01 00 00       	push   0x15c
c00167fa:	e8 9a 8d ff ff       	call   c000f599 <malloc>
c00167ff:	89 04 24             	mov    DWORD PTR [esp],eax
c0016802:	89 c3                	mov    ebx,eax
c0016804:	e8 db fa 00 00       	call   c00262e4 <PIT::PIT()>
c0016809:	58                   	pop    eax
c001680a:	5a                   	pop    edx
c001680b:	53                   	push   ebx
c001680c:	ff 35 a8 d9 02 c0    	push   DWORD PTR ds:0xc002d9a8
c0016812:	e8 eb d2 ff ff       	call   c0013b02 <Device::addChild(Device*)>
c0016817:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016819:	6a 00                	push   0x0
c001681b:	6a 00                	push   0x0
c001681d:	56                   	push   esi
c001681e:	53                   	push   ebx
c001681f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016822:	83 c4 20             	add    esp,0x20
c0016825:	89 d8                	mov    eax,ebx
c0016827:	5b                   	pop    ebx
c0016828:	5e                   	pop    esi
c0016829:	5f                   	pop    edi
c001682a:	c3                   	ret    
c001682b:	90                   	nop

c001682c <VCache::VCache(PhysicalDisk*)>:
c001682c:	53                   	push   ebx
c001682d:	83 ec 18             	sub    esp,0x18
c0016830:	ba 8c b0 02 c0       	mov    edx,0xc002b08c
c0016835:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016839:	89 10                	mov    DWORD PTR [eax],edx
c001683b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001683f:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c0016846:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001684a:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c0016851:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016855:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c001685c:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0016863:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016867:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c001686e:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0016875:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016879:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0016880:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016884:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c0016888:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001688c:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c0016893:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c001689a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001689e:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c00168a2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00168a6:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c00168aa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00168ae:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c00168b2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00168b6:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c00168bd:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c00168c5:	83 ec 0c             	sub    esp,0xc
c00168c8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00168cc:	e8 c8 8c ff ff       	call   c000f599 <malloc>
c00168d1:	83 c4 10             	add    esp,0x10
c00168d4:	89 c3                	mov    ebx,eax
c00168d6:	83 ec 0c             	sub    esp,0xc
c00168d9:	53                   	push   ebx
c00168da:	e8 af 6e 00 00       	call   c001d78e <Mutex::Mutex()>
c00168df:	83 c4 10             	add    esp,0x10
c00168e2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00168e6:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00168e9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00168ed:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00168f1:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00168f4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00168f8:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c00168ff:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016903:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0016909:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001690d:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0016910:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016914:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c001691a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016920:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0016924:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c0016927:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c001692a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001692e:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c0016932:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016936:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001693c:	05 00 01 00 00       	add    eax,0x100
c0016941:	c1 e0 04             	shl    eax,0x4
c0016944:	83 ec 0c             	sub    esp,0xc
c0016947:	50                   	push   eax
c0016948:	e8 4c 8c ff ff       	call   c000f599 <malloc>
c001694d:	83 c4 10             	add    esp,0x10
c0016950:	89 c2                	mov    edx,eax
c0016952:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016956:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0016959:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001695d:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c0016964:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016968:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c001696c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016970:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0016976:	c1 e0 07             	shl    eax,0x7
c0016979:	83 ec 0c             	sub    esp,0xc
c001697c:	50                   	push   eax
c001697d:	e8 17 8c ff ff       	call   c000f599 <malloc>
c0016982:	83 c4 10             	add    esp,0x10
c0016985:	89 c2                	mov    edx,eax
c0016987:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001698b:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c001698e:	90                   	nop
c001698f:	83 c4 18             	add    esp,0x18
c0016992:	5b                   	pop    ebx
c0016993:	c3                   	ret    

c0016994 <VCache::invalidateReadBuffer()>:
c0016994:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016998:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c001699e:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c00169a2:	c3                   	ret    
c00169a3:	90                   	nop

c00169a4 <VCache::writeWriteBuffer()>:
c00169a4:	53                   	push   ebx
c00169a5:	83 ec 14             	sub    esp,0x14
c00169a8:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00169ac:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00169af:	8b 10                	mov    edx,DWORD PTR [eax]
c00169b1:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00169b4:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00169b7:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00169ba:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00169bd:	50                   	push   eax
c00169be:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c00169c1:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c00169c8:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c00169cf:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c00169d3:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c00169da:	83 c4 28             	add    esp,0x28
c00169dd:	5b                   	pop    ebx
c00169de:	c3                   	ret    
c00169df:	90                   	nop

c00169e0 <VCache::~VCache()>:
c00169e0:	83 ec 0c             	sub    esp,0xc
c00169e3:	ba 8c b0 02 c0       	mov    edx,0xc002b08c
c00169e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00169ec:	89 10                	mov    DWORD PTR [eax],edx
c00169ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00169f2:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c00169f5:	84 c0                	test   al,al
c00169f7:	74 0f                	je     c0016a08 <VCache::~VCache()+0x28>
c00169f9:	83 ec 0c             	sub    esp,0xc
c00169fc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016a00:	e8 9f ff ff ff       	call   c00169a4 <VCache::writeWriteBuffer()>
c0016a05:	83 c4 10             	add    esp,0x10
c0016a08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016a0c:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0016a0f:	83 ec 0c             	sub    esp,0xc
c0016a12:	50                   	push   eax
c0016a13:	e8 91 8b ff ff       	call   c000f5a9 <free>
c0016a18:	83 c4 10             	add    esp,0x10
c0016a1b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016a1f:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0016a22:	83 ec 0c             	sub    esp,0xc
c0016a25:	50                   	push   eax
c0016a26:	e8 7e 8b ff ff       	call   c000f5a9 <free>
c0016a2b:	83 c4 10             	add    esp,0x10
c0016a2e:	90                   	nop
c0016a2f:	83 c4 0c             	add    esp,0xc
c0016a32:	c3                   	ret    
c0016a33:	90                   	nop

c0016a34 <VCache::~VCache()>:
c0016a34:	83 ec 0c             	sub    esp,0xc
c0016a37:	83 ec 0c             	sub    esp,0xc
c0016a3a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016a3e:	e8 9d ff ff ff       	call   c00169e0 <VCache::~VCache()>
c0016a43:	83 c4 10             	add    esp,0x10
c0016a46:	83 ec 08             	sub    esp,0x8
c0016a49:	6a 44                	push   0x44
c0016a4b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016a4f:	e8 9d bb ff ff       	call   c00125f1 <operator delete(void*, unsigned long)>
c0016a54:	83 c4 10             	add    esp,0x10
c0016a57:	83 c4 0c             	add    esp,0xc
c0016a5a:	c3                   	ret    
c0016a5b:	90                   	nop

c0016a5c <VCache::write(unsigned long long, int, void*)>:
c0016a5c:	55                   	push   ebp
c0016a5d:	57                   	push   edi
c0016a5e:	56                   	push   esi
c0016a5f:	53                   	push   ebx
c0016a60:	83 ec 18             	sub    esp,0x18
c0016a63:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0016a67:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016a6b:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0016a6f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0016a72:	e8 5d 72 00 00       	call   c001dcd4 <Semaphore::acquire()>
c0016a77:	83 c4 10             	add    esp,0x10
c0016a7a:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c0016a7e:	74 0c                	je     c0016a8c <VCache::write(unsigned long long, int, void*)+0x30>
c0016a80:	83 ec 0c             	sub    esp,0xc
c0016a83:	53                   	push   ebx
c0016a84:	e8 0b ff ff ff       	call   c0016994 <VCache::invalidateReadBuffer()>
c0016a89:	83 c4 10             	add    esp,0x10
c0016a8c:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0016a90:	74 5c                	je     c0016aee <VCache::write(unsigned long long, int, void*)+0x92>
c0016a92:	8b 6b 24             	mov    ebp,DWORD PTR [ebx+0x24]
c0016a95:	89 e8                	mov    eax,ebp
c0016a97:	99                   	cdq    
c0016a98:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c0016a9b:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c0016a9e:	89 c1                	mov    ecx,eax
c0016aa0:	89 d0                	mov    eax,edx
c0016aa2:	31 f1                	xor    ecx,esi
c0016aa4:	31 f8                	xor    eax,edi
c0016aa6:	09 c1                	or     ecx,eax
c0016aa8:	75 38                	jne    c0016ae2 <VCache::write(unsigned long long, int, void*)+0x86>
c0016aaa:	83 7c 24 2c 01       	cmp    DWORD PTR [esp+0x2c],0x1
c0016aaf:	75 31                	jne    c0016ae2 <VCache::write(unsigned long long, int, void*)+0x86>
c0016ab1:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016ab4:	89 ef                	mov    edi,ebp
c0016ab6:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c0016abc:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016ac0:	0f af f9             	imul   edi,ecx
c0016ac3:	03 7b 28             	add    edi,DWORD PTR [ebx+0x28]
c0016ac6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016ac8:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0016acb:	40                   	inc    eax
c0016acc:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0016acf:	83 c0 80             	add    eax,0xffffff80
c0016ad2:	75 5c                	jne    c0016b30 <VCache::write(unsigned long long, int, void*)+0xd4>
c0016ad4:	83 ec 0c             	sub    esp,0xc
c0016ad7:	53                   	push   ebx
c0016ad8:	e8 c7 fe ff ff       	call   c00169a4 <VCache::writeWriteBuffer()>
c0016add:	83 c4 10             	add    esp,0x10
c0016ae0:	eb 4e                	jmp    c0016b30 <VCache::write(unsigned long long, int, void*)+0xd4>
c0016ae2:	83 ec 0c             	sub    esp,0xc
c0016ae5:	53                   	push   ebx
c0016ae6:	e8 b9 fe ff ff       	call   c00169a4 <VCache::writeWriteBuffer()>
c0016aeb:	83 c4 10             	add    esp,0x10
c0016aee:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016af1:	83 7c 24 2c 7f       	cmp    DWORD PTR [esp+0x2c],0x7f
c0016af6:	7f 22                	jg     c0016b1a <VCache::write(unsigned long long, int, void*)+0xbe>
c0016af8:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c0016afb:	89 7b 20             	mov    DWORD PTR [ebx+0x20],edi
c0016afe:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0016b02:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c0016b06:	89 53 24             	mov    DWORD PTR [ebx+0x24],edx
c0016b09:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c0016b0c:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c0016b12:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016b16:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016b18:	eb 16                	jmp    c0016b30 <VCache::write(unsigned long long, int, void*)+0xd4>
c0016b1a:	83 ec 0c             	sub    esp,0xc
c0016b1d:	8b 10                	mov    edx,DWORD PTR [eax]
c0016b1f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0016b23:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0016b27:	57                   	push   edi
c0016b28:	56                   	push   esi
c0016b29:	50                   	push   eax
c0016b2a:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c0016b2d:	83 c4 20             	add    esp,0x20
c0016b30:	83 ec 0c             	sub    esp,0xc
c0016b33:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0016b36:	e8 f5 77 00 00       	call   c001e330 <Semaphore::release()>
c0016b3b:	83 c4 1c             	add    esp,0x1c
c0016b3e:	31 c0                	xor    eax,eax
c0016b40:	5b                   	pop    ebx
c0016b41:	5e                   	pop    esi
c0016b42:	5f                   	pop    edi
c0016b43:	5d                   	pop    ebp
c0016b44:	c3                   	ret    
c0016b45:	90                   	nop

c0016b46 <VCache::read(unsigned long long, int, void*)>:
c0016b46:	55                   	push   ebp
c0016b47:	57                   	push   edi
c0016b48:	56                   	push   esi
c0016b49:	53                   	push   ebx
c0016b4a:	83 ec 28             	sub    esp,0x28
c0016b4d:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0016b51:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0016b55:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0016b59:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c0016b5d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0016b60:	e8 6f 71 00 00       	call   c001dcd4 <Semaphore::acquire()>
c0016b65:	83 c4 10             	add    esp,0x10
c0016b68:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0016b6c:	74 0c                	je     c0016b7a <VCache::read(unsigned long long, int, void*)+0x34>
c0016b6e:	83 ec 0c             	sub    esp,0xc
c0016b71:	53                   	push   ebx
c0016b72:	e8 2d fe ff ff       	call   c00169a4 <VCache::writeWriteBuffer()>
c0016b77:	83 c4 10             	add    esp,0x10
c0016b7a:	83 fd 01             	cmp    ebp,0x1
c0016b7d:	0f 85 80 00 00 00    	jne    c0016c03 <VCache::read(unsigned long long, int, void*)+0xbd>
c0016b83:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016b86:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016b8a:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c0016b91:	75 70                	jne    c0016c03 <VCache::read(unsigned long long, int, void*)+0xbd>
c0016b93:	8b 6b 40             	mov    ebp,DWORD PTR [ebx+0x40]
c0016b96:	89 e9                	mov    ecx,ebp
c0016b98:	f7 d9                	neg    ecx
c0016b9a:	89 c8                	mov    eax,ecx
c0016b9c:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0016ba0:	c1 f8 1f             	sar    eax,0x1f
c0016ba3:	21 f1                	and    ecx,esi
c0016ba5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016ba9:	89 c8                	mov    eax,ecx
c0016bab:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016baf:	21 f9                	and    ecx,edi
c0016bb1:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c0016bb5:	89 ca                	mov    edx,ecx
c0016bb7:	74 0a                	je     c0016bc3 <VCache::read(unsigned long long, int, void*)+0x7d>
c0016bb9:	39 4b 34             	cmp    DWORD PTR [ebx+0x34],ecx
c0016bbc:	75 05                	jne    c0016bc3 <VCache::read(unsigned long long, int, void*)+0x7d>
c0016bbe:	39 43 30             	cmp    DWORD PTR [ebx+0x30],eax
c0016bc1:	74 23                	je     c0016be6 <VCache::read(unsigned long long, int, void*)+0xa0>
c0016bc3:	83 ec 0c             	sub    esp,0xc
c0016bc6:	c6 43 3c 01          	mov    BYTE PTR [ebx+0x3c],0x1
c0016bca:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0016bce:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0016bd1:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0016bd4:	8b 09                	mov    ecx,DWORD PTR [ecx]
c0016bd6:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0016bd9:	55                   	push   ebp
c0016bda:	52                   	push   edx
c0016bdb:	50                   	push   eax
c0016bdc:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0016be0:	ff 51 28             	call   DWORD PTR [ecx+0x28]
c0016be3:	83 c4 20             	add    esp,0x20
c0016be6:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016be9:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0016bed:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c0016bf3:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0016bf6:	48                   	dec    eax
c0016bf7:	21 c6                	and    esi,eax
c0016bf9:	0f af f1             	imul   esi,ecx
c0016bfc:	03 73 38             	add    esi,DWORD PTR [ebx+0x38]
c0016bff:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016c01:	eb 1d                	jmp    c0016c20 <VCache::read(unsigned long long, int, void*)+0xda>
c0016c03:	83 ec 0c             	sub    esp,0xc
c0016c06:	53                   	push   ebx
c0016c07:	e8 88 fd ff ff       	call   c0016994 <VCache::invalidateReadBuffer()>
c0016c0c:	5a                   	pop    edx
c0016c0d:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016c10:	8b 10                	mov    edx,DWORD PTR [eax]
c0016c12:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0016c16:	55                   	push   ebp
c0016c17:	57                   	push   edi
c0016c18:	56                   	push   esi
c0016c19:	50                   	push   eax
c0016c1a:	ff 52 28             	call   DWORD PTR [edx+0x28]
c0016c1d:	83 c4 20             	add    esp,0x20
c0016c20:	83 ec 0c             	sub    esp,0xc
c0016c23:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0016c26:	e8 05 77 00 00       	call   c001e330 <Semaphore::release()>
c0016c2b:	83 c4 2c             	add    esp,0x2c
c0016c2e:	31 c0                	xor    eax,eax
c0016c30:	5b                   	pop    ebx
c0016c31:	5e                   	pop    esi
c0016c32:	5f                   	pop    edi
c0016c33:	5d                   	pop    ebp
c0016c34:	c3                   	ret    
c0016c35:	90                   	nop

c0016c36 <Video::putrect(int, int, int, int, unsigned int)>:
c0016c36:	55                   	push   ebp
c0016c37:	57                   	push   edi
c0016c38:	56                   	push   esi
c0016c39:	53                   	push   ebx
c0016c3a:	83 ec 1c             	sub    esp,0x1c
c0016c3d:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0016c41:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016c45:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0016c49:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c0016c4d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016c51:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016c55:	01 df                	add    edi,ebx
c0016c57:	39 fb                	cmp    ebx,edi
c0016c59:	7d 1f                	jge    c0016c7a <Video::putrect(int, int, int, int, unsigned int)+0x44>
c0016c5b:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0016c5f:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0016c63:	7d 12                	jge    c0016c77 <Video::putrect(int, int, int, int, unsigned int)+0x41>
c0016c65:	8b 16                	mov    edx,DWORD PTR [esi]
c0016c67:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0016c6b:	53                   	push   ebx
c0016c6c:	55                   	push   ebp
c0016c6d:	45                   	inc    ebp
c0016c6e:	56                   	push   esi
c0016c6f:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0016c72:	83 c4 10             	add    esp,0x10
c0016c75:	eb e8                	jmp    c0016c5f <Video::putrect(int, int, int, int, unsigned int)+0x29>
c0016c77:	43                   	inc    ebx
c0016c78:	eb dd                	jmp    c0016c57 <Video::putrect(int, int, int, int, unsigned int)+0x21>
c0016c7a:	83 c4 1c             	add    esp,0x1c
c0016c7d:	5b                   	pop    ebx
c0016c7e:	5e                   	pop    esi
c0016c7f:	5f                   	pop    edi
c0016c80:	5d                   	pop    ebp
c0016c81:	c3                   	ret    

c0016c82 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c0016c82:	55                   	push   ebp
c0016c83:	57                   	push   edi
c0016c84:	31 ff                	xor    edi,edi
c0016c86:	56                   	push   esi
c0016c87:	53                   	push   ebx
c0016c88:	83 ec 1c             	sub    esp,0x1c
c0016c8b:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c0016c8f:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0016c93:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c0016c9a:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c0016c9f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016ca3:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c0016ca7:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0016cab:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c0016cae:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0016cb2:	01 f9                	add    ecx,edi
c0016cb4:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c0016cb8:	7d 2f                	jge    c0016ce9 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c0016cba:	31 f6                	xor    esi,esi
c0016cbc:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0016cc0:	01 f2                	add    edx,esi
c0016cc2:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c0016cc6:	7d 1a                	jge    c0016ce2 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c0016cc8:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0016ccb:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c0016cce:	46                   	inc    esi
c0016ccf:	51                   	push   ecx
c0016cd0:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0016cd4:	52                   	push   edx
c0016cd5:	55                   	push   ebp
c0016cd6:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0016cd9:	83 c4 10             	add    esp,0x10
c0016cdc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016ce0:	eb da                	jmp    c0016cbc <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c0016ce2:	47                   	inc    edi
c0016ce3:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c0016ce7:	eb c5                	jmp    c0016cae <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c0016ce9:	83 c4 1c             	add    esp,0x1c
c0016cec:	5b                   	pop    ebx
c0016ced:	5e                   	pop    esi
c0016cee:	5f                   	pop    edi
c0016cef:	5d                   	pop    ebp
c0016cf0:	c3                   	ret    
c0016cf1:	90                   	nop

c0016cf2 <Video::blit(unsigned int*, int, int, int, int)>:
c0016cf2:	55                   	push   ebp
c0016cf3:	57                   	push   edi
c0016cf4:	56                   	push   esi
c0016cf5:	53                   	push   ebx
c0016cf6:	83 ec 1c             	sub    esp,0x1c
c0016cf9:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0016cfd:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016d01:	85 c0                	test   eax,eax
c0016d03:	79 02                	jns    c0016d07 <Video::blit(unsigned int*, int, int, int, int)+0x15>
c0016d05:	31 c0                	xor    eax,eax
c0016d07:	c1 e0 02             	shl    eax,0x2
c0016d0a:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0016d0e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016d12:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0016d16:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c0016d1a:	39 d8                	cmp    eax,ebx
c0016d1c:	7e 49                	jle    c0016d67 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c0016d1e:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c0016d24:	7c 41                	jl     c0016d67 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c0016d26:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0016d2a:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0016d2e:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0016d32:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c0016d36:	39 f9                	cmp    ecx,edi
c0016d38:	7e 22                	jle    c0016d5c <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c0016d3a:	83 c5 04             	add    ebp,0x4
c0016d3d:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c0016d43:	7c 14                	jl     c0016d59 <Video::blit(unsigned int*, int, int, int, int)+0x67>
c0016d45:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0016d47:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c0016d4a:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0016d4e:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0016d52:	56                   	push   esi
c0016d53:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c0016d56:	83 c4 10             	add    esp,0x10
c0016d59:	47                   	inc    edi
c0016d5a:	eb d2                	jmp    c0016d2e <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c0016d5c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016d60:	43                   	inc    ebx
c0016d61:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c0016d65:	eb ab                	jmp    c0016d12 <Video::blit(unsigned int*, int, int, int, int)+0x20>
c0016d67:	83 c4 1c             	add    esp,0x1c
c0016d6a:	5b                   	pop    ebx
c0016d6b:	5e                   	pop    esi
c0016d6c:	5f                   	pop    edi
c0016d6d:	5d                   	pop    ebp
c0016d6e:	c3                   	ret    
c0016d6f:	90                   	nop

c0016d70 <Video::clearScreen(unsigned int)>:
c0016d70:	57                   	push   edi
c0016d71:	56                   	push   esi
c0016d72:	53                   	push   ebx
c0016d73:	31 db                	xor    ebx,ebx
c0016d75:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016d79:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c0016d7f:	7e 1f                	jle    c0016da0 <Video::clearScreen(unsigned int)+0x30>
c0016d81:	31 ff                	xor    edi,edi
c0016d83:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c0016d89:	7e 12                	jle    c0016d9d <Video::clearScreen(unsigned int)+0x2d>
c0016d8b:	8b 06                	mov    eax,DWORD PTR [esi]
c0016d8d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0016d91:	53                   	push   ebx
c0016d92:	57                   	push   edi
c0016d93:	47                   	inc    edi
c0016d94:	56                   	push   esi
c0016d95:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0016d98:	83 c4 10             	add    esp,0x10
c0016d9b:	eb e6                	jmp    c0016d83 <Video::clearScreen(unsigned int)+0x13>
c0016d9d:	43                   	inc    ebx
c0016d9e:	eb d9                	jmp    c0016d79 <Video::clearScreen(unsigned int)+0x9>
c0016da0:	5b                   	pop    ebx
c0016da1:	5e                   	pop    esi
c0016da2:	5f                   	pop    edi
c0016da3:	c3                   	ret    

c0016da4 <Video::putpixel(int, int, unsigned int)>:
c0016da4:	c7 44 24 04 94 b0 02 c0 	mov    DWORD PTR [esp+0x4],0xc002b094
c0016dac:	e9 84 30 00 00       	jmp    c0019e35 <Krnl::panic(char const*)>
c0016db1:	90                   	nop

c0016db2 <Video::Video(char const*)>:
c0016db2:	83 ec 0c             	sub    esp,0xc
c0016db5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016db9:	83 ec 08             	sub    esp,0x8
c0016dbc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016dc0:	50                   	push   eax
c0016dc1:	e8 40 cf ff ff       	call   c0013d06 <Device::Device(char const*)>
c0016dc6:	83 c4 10             	add    esp,0x10
c0016dc9:	ba 04 b1 02 c0       	mov    edx,0xc002b104
c0016dce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016dd2:	89 10                	mov    DWORD PTR [eax],edx
c0016dd4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016dd8:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c0016de2:	90                   	nop
c0016de3:	83 c4 0c             	add    esp,0xc
c0016de6:	c3                   	ret    
c0016de7:	90                   	nop

c0016de8 <Video::~Video()>:
c0016de8:	83 ec 0c             	sub    esp,0xc
c0016deb:	ba 04 b1 02 c0       	mov    edx,0xc002b104
c0016df0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016df4:	89 10                	mov    DWORD PTR [eax],edx
c0016df6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016dfa:	83 ec 0c             	sub    esp,0xc
c0016dfd:	50                   	push   eax
c0016dfe:	e8 cd cb ff ff       	call   c00139d0 <Device::~Device()>
c0016e03:	83 c4 10             	add    esp,0x10
c0016e06:	90                   	nop
c0016e07:	83 c4 0c             	add    esp,0xc
c0016e0a:	c3                   	ret    
c0016e0b:	90                   	nop

c0016e0c <Video::~Video()>:
c0016e0c:	83 ec 0c             	sub    esp,0xc
c0016e0f:	83 ec 0c             	sub    esp,0xc
c0016e12:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016e16:	e8 cd ff ff ff       	call   c0016de8 <Video::~Video()>
c0016e1b:	83 c4 10             	add    esp,0x10
c0016e1e:	83 ec 08             	sub    esp,0x8
c0016e21:	68 64 01 00 00       	push   0x164
c0016e26:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016e2a:	e8 c2 b7 ff ff       	call   c00125f1 <operator delete(void*, unsigned long)>
c0016e2f:	83 c4 10             	add    esp,0x10
c0016e32:	83 c4 0c             	add    esp,0xc
c0016e35:	c3                   	ret    

c0016e36 <Video::isMonochrome()>:
c0016e36:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016e3a:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c0016e40:	c3                   	ret    
c0016e41:	90                   	nop

c0016e42 <Video::getWidth()>:
c0016e42:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016e46:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0016e4c:	c3                   	ret    
c0016e4d:	90                   	nop

c0016e4e <Video::getHeight()>:
c0016e4e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016e52:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0016e58:	c3                   	ret    
c0016e59:	90                   	nop

c0016e5a <Video::drawCursor(int, int, unsigned char*, int)>:
c0016e5a:	55                   	push   ebp
c0016e5b:	57                   	push   edi
c0016e5c:	56                   	push   esi
c0016e5d:	53                   	push   ebx
c0016e5e:	83 ec 2c             	sub    esp,0x2c
c0016e61:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0016e65:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0016e69:	83 f8 01             	cmp    eax,0x1
c0016e6c:	19 c9                	sbb    ecx,ecx
c0016e6e:	31 db                	xor    ebx,ebx
c0016e70:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0016e74:	89 cd                	mov    ebp,ecx
c0016e76:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c0016e7e:	f7 d5                	not    ebp
c0016e80:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c0016e86:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0016e8a:	01 d8                	add    eax,ebx
c0016e8c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016e90:	56                   	push   esi
c0016e91:	e8 b8 ff ff ff       	call   c0016e4e <Video::getHeight()>
c0016e96:	59                   	pop    ecx
c0016e97:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0016e9b:	7e 70                	jle    c0016f0d <Video::drawCursor(int, int, unsigned char*, int)+0xb3>
c0016e9d:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0016ea1:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0016ea5:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c0016ea8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016eac:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0016eb0:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c0016eb7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016ebb:	89 f8                	mov    eax,edi
c0016ebd:	83 c0 20             	add    eax,0x20
c0016ec0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0016ec4:	56                   	push   esi
c0016ec5:	e8 78 ff ff ff       	call   c0016e42 <Video::getWidth()>
c0016eca:	5a                   	pop    edx
c0016ecb:	39 c7                	cmp    edi,eax
c0016ecd:	7d 34                	jge    c0016f03 <Video::drawCursor(int, int, unsigned char*, int)+0xa9>
c0016ecf:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c0016ed4:	74 05                	je     c0016edb <Video::drawCursor(int, int, unsigned char*, int)+0x81>
c0016ed6:	8b 06                	mov    eax,DWORD PTR [esi]
c0016ed8:	55                   	push   ebp
c0016ed9:	eb 0d                	jmp    c0016ee8 <Video::drawCursor(int, int, unsigned char*, int)+0x8e>
c0016edb:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c0016ee0:	74 12                	je     c0016ef4 <Video::drawCursor(int, int, unsigned char*, int)+0x9a>
c0016ee2:	8b 06                	mov    eax,DWORD PTR [esi]
c0016ee4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016ee8:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0016eec:	57                   	push   edi
c0016eed:	56                   	push   esi
c0016eee:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0016ef1:	83 c4 10             	add    esp,0x10
c0016ef4:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c0016ef8:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c0016efc:	47                   	inc    edi
c0016efd:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0016f01:	75 c1                	jne    c0016ec4 <Video::drawCursor(int, int, unsigned char*, int)+0x6a>
c0016f03:	43                   	inc    ebx
c0016f04:	83 fb 20             	cmp    ebx,0x20
c0016f07:	0f 85 79 ff ff ff    	jne    c0016e86 <Video::drawCursor(int, int, unsigned char*, int)+0x2c>
c0016f0d:	83 c4 2c             	add    esp,0x2c
c0016f10:	5b                   	pop    ebx
c0016f11:	5e                   	pop    esi
c0016f12:	5f                   	pop    edi
c0016f13:	5d                   	pop    ebp
c0016f14:	c3                   	ret    
c0016f15:	90                   	nop

c0016f16 <Video::tgaParse(unsigned char*, int, int*, int*)>:
c0016f16:	55                   	push   ebp
c0016f17:	57                   	push   edi
c0016f18:	56                   	push   esi
c0016f19:	53                   	push   ebx
c0016f1a:	83 ec 28             	sub    esp,0x28
c0016f1d:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0016f21:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c0016f25:	0f b6 73 0d          	movzx  esi,BYTE PTR [ebx+0xd]
c0016f29:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c0016f2d:	c1 e6 08             	shl    esi,0x8
c0016f30:	01 c6                	add    esi,eax
c0016f32:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c0016f36:	c1 e0 08             	shl    eax,0x8
c0016f39:	01 d0                	add    eax,edx
c0016f3b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016f3f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016f43:	0f af c6             	imul   eax,esi
c0016f46:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c0016f4d:	50                   	push   eax
c0016f4e:	e8 46 86 ff ff       	call   c000f599 <malloc>
c0016f53:	83 c4 10             	add    esp,0x10
c0016f56:	89 c7                	mov    edi,eax
c0016f58:	85 c0                	test   eax,eax
c0016f5a:	75 10                	jne    c0016f6c <Video::tgaParse(unsigned char*, int, int*, int*)+0x56>
c0016f5c:	83 ec 0c             	sub    esp,0xc
c0016f5f:	68 b5 b0 02 c0       	push   0xc002b0b5
c0016f64:	e8 cc 2e 00 00       	call   c0019e35 <Krnl::panic(char const*)>
c0016f69:	83 c4 10             	add    esp,0x10
c0016f6c:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c0016f6f:	ba 12 00 00 00       	mov    edx,0x12
c0016f74:	84 c0                	test   al,al
c0016f76:	74 11                	je     c0016f89 <Video::tgaParse(unsigned char*, int, int*, int*)+0x73>
c0016f78:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c0016f7c:	0f b7 4b 05          	movzx  ecx,WORD PTR [ebx+0x5]
c0016f80:	c1 fa 03             	sar    edx,0x3
c0016f83:	0f af d1             	imul   edx,ecx
c0016f86:	83 c2 12             	add    edx,0x12
c0016f89:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c0016f8d:	74 04                	je     c0016f93 <Video::tgaParse(unsigned char*, int, int*, int*)+0x7d>
c0016f8f:	85 f6                	test   esi,esi
c0016f91:	75 12                	jne    c0016fa5 <Video::tgaParse(unsigned char*, int, int*, int*)+0x8f>
c0016f93:	83 ec 0c             	sub    esp,0xc
c0016f96:	68 c5 b0 02 c0       	push   0xc002b0c5
c0016f9b:	e8 29 b7 ff ff       	call   c00126c9 <Dbg::kprintf(char const*, ...)>
c0016fa0:	e9 b8 00 00 00       	jmp    c001705d <Video::tgaParse(unsigned char*, int, int*, int*)+0x147>
c0016fa5:	0f b6 4b 02          	movzx  ecx,BYTE PTR [ebx+0x2]
c0016fa9:	80 f9 02             	cmp    cl,0x2
c0016fac:	0f 85 96 00 00 00    	jne    c0017048 <Video::tgaParse(unsigned char*, int, int*, int*)+0x132>
c0016fb2:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c0016fb7:	75 0e                	jne    c0016fc7 <Video::tgaParse(unsigned char*, int, int*, int*)+0xb1>
c0016fb9:	84 c0                	test   al,al
c0016fbb:	75 0a                	jne    c0016fc7 <Video::tgaParse(unsigned char*, int, int*, int*)+0xb1>
c0016fbd:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0016fc0:	83 e8 18             	sub    eax,0x18
c0016fc3:	a8 f7                	test   al,0xf7
c0016fc5:	74 0a                	je     c0016fd1 <Video::tgaParse(unsigned char*, int, int*, int*)+0xbb>
c0016fc7:	83 ec 0c             	sub    esp,0xc
c0016fca:	68 da b0 02 c0       	push   0xc002b0da
c0016fcf:	eb 7f                	jmp    c0017050 <Video::tgaParse(unsigned char*, int, int*, int*)+0x13a>
c0016fd1:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0016fd9:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0016fe1:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0016fe5:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0016fed:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c0016ff1:	75 0c                	jne    c0016fff <Video::tgaParse(unsigned char*, int, int*, int*)+0xe9>
c0016ff3:	0f b6 44 13 03       	movzx  eax,BYTE PTR [ebx+edx*1+0x3]
c0016ff8:	c1 e0 18             	shl    eax,0x18
c0016ffb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016fff:	45                   	inc    ebp
c0017000:	0f b6 4c 13 02       	movzx  ecx,BYTE PTR [ebx+edx*1+0x2]
c0017005:	c1 e1 10             	shl    ecx,0x10
c0017008:	89 c8                	mov    eax,ecx
c001700a:	0f b6 4c 13 01       	movzx  ecx,BYTE PTR [ebx+edx*1+0x1]
c001700f:	c1 e1 08             	shl    ecx,0x8
c0017012:	09 c1                	or     ecx,eax
c0017014:	0f b6 04 13          	movzx  eax,BYTE PTR [ebx+edx*1]
c0017018:	09 c1                	or     ecx,eax
c001701a:	0b 4c 24 08          	or     ecx,DWORD PTR [esp+0x8]
c001701e:	89 4c af fc          	mov    DWORD PTR [edi+ebp*4-0x4],ecx
c0017022:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c0017026:	c1 f8 03             	sar    eax,0x3
c0017029:	01 c2                	add    edx,eax
c001702b:	89 e8                	mov    eax,ebp
c001702d:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c0017031:	39 c6                	cmp    esi,eax
c0017033:	7f b0                	jg     c0016fe5 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcf>
c0017035:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0017039:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001703d:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0017040:	7e 22                	jle    c0017064 <Video::tgaParse(unsigned char*, int, int*, int*)+0x14e>
c0017042:	89 6c 24 04          	mov    DWORD PTR [esp+0x4],ebp
c0017046:	eb 99                	jmp    c0016fe1 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c0017048:	50                   	push   eax
c0017049:	50                   	push   eax
c001704a:	51                   	push   ecx
c001704b:	68 e8 b0 02 c0       	push   0xc002b0e8
c0017050:	e8 74 b6 ff ff       	call   c00126c9 <Dbg::kprintf(char const*, ...)>
c0017055:	89 3c 24             	mov    DWORD PTR [esp],edi
c0017058:	e8 4c 85 ff ff       	call   c000f5a9 <free>
c001705d:	83 c4 10             	add    esp,0x10
c0017060:	31 ff                	xor    edi,edi
c0017062:	eb 0f                	jmp    c0017073 <Video::tgaParse(unsigned char*, int, int*, int*)+0x15d>
c0017064:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017068:	89 30                	mov    DWORD PTR [eax],esi
c001706a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001706e:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0017071:	89 30                	mov    DWORD PTR [eax],esi
c0017073:	83 c4 1c             	add    esp,0x1c
c0017076:	89 f8                	mov    eax,edi
c0017078:	5b                   	pop    ebx
c0017079:	5e                   	pop    esi
c001707a:	5f                   	pop    edi
c001707b:	5d                   	pop    ebp
c001707c:	c3                   	ret    
c001707d:	90                   	nop

c001707e <Video::putTGA(int, int, unsigned char*, int)>:
c001707e:	55                   	push   ebp
c001707f:	57                   	push   edi
c0017080:	56                   	push   esi
c0017081:	53                   	push   ebx
c0017082:	83 ec 28             	sub    esp,0x28
c0017085:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0017089:	8d 44 24 18          	lea    eax,[esp+0x18]
c001708d:	50                   	push   eax
c001708e:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017092:	50                   	push   eax
c0017093:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0017097:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001709b:	56                   	push   esi
c001709c:	e8 75 fe ff ff       	call   c0016f16 <Video::tgaParse(unsigned char*, int, int*, int*)>
c00170a1:	83 c4 20             	add    esp,0x20
c00170a4:	85 c0                	test   eax,eax
c00170a6:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00170aa:	74 35                	je     c00170e1 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c00170ac:	89 c7                	mov    edi,eax
c00170ae:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00170b2:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c00170b6:	39 d8                	cmp    eax,ebx
c00170b8:	7e 27                	jle    c00170e1 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c00170ba:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c00170be:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00170c2:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00170c6:	39 e8                	cmp    eax,ebp
c00170c8:	7e 14                	jle    c00170de <Video::putTGA(int, int, unsigned char*, int)+0x60>
c00170ca:	8b 06                	mov    eax,DWORD PTR [esi]
c00170cc:	83 c7 04             	add    edi,0x4
c00170cf:	ff 77 fc             	push   DWORD PTR [edi-0x4]
c00170d2:	53                   	push   ebx
c00170d3:	55                   	push   ebp
c00170d4:	45                   	inc    ebp
c00170d5:	56                   	push   esi
c00170d6:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00170d9:	83 c4 10             	add    esp,0x10
c00170dc:	eb e0                	jmp    c00170be <Video::putTGA(int, int, unsigned char*, int)+0x40>
c00170de:	43                   	inc    ebx
c00170df:	eb cd                	jmp    c00170ae <Video::putTGA(int, int, unsigned char*, int)+0x30>
c00170e1:	83 c4 1c             	add    esp,0x1c
c00170e4:	5b                   	pop    ebx
c00170e5:	5e                   	pop    esi
c00170e6:	5f                   	pop    edi
c00170e7:	5d                   	pop    ebp
c00170e8:	c3                   	ret    
c00170e9:	90                   	nop

c00170ea <ACPI::close(int, int, void*)>:
c00170ea:	83 ec 1c             	sub    esp,0x1c
c00170ed:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c00170f5:	74 0a                	je     c0017101 <ACPI::close(int, int, void*)+0x17>
c00170f7:	b8 00 00 00 00       	mov    eax,0x0
c00170fc:	e9 8a 00 00 00       	jmp    c001718b <ACPI::close(int, int, void*)+0xa1>
c0017101:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0017106:	75 27                	jne    c001712f <ACPI::close(int, int, void*)+0x45>
c0017108:	a1 48 00 03 c0       	mov    eax,ds:0xc0030048
c001710d:	85 c0                	test   eax,eax
c001710f:	74 07                	je     c0017118 <ACPI::close(int, int, void*)+0x2e>
c0017111:	a1 48 00 03 c0       	mov    eax,ds:0xc0030048
c0017116:	ff d0                	call   eax
c0017118:	83 ec 0c             	sub    esp,0xc
c001711b:	68 44 b1 02 c0       	push   0xc002b144
c0017120:	e8 10 2d 00 00       	call   c0019e35 <Krnl::panic(char const*)>
c0017125:	83 c4 10             	add    esp,0x10
c0017128:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001712d:	eb 5c                	jmp    c001718b <ACPI::close(int, int, void*)+0xa1>
c001712f:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c0017134:	75 50                	jne    c0017186 <ACPI::close(int, int, void*)+0x9c>
c0017136:	a1 44 00 03 c0       	mov    eax,ds:0xc0030044
c001713b:	85 c0                	test   eax,eax
c001713d:	74 07                	je     c0017146 <ACPI::close(int, int, void*)+0x5c>
c001713f:	a1 44 00 03 c0       	mov    eax,ds:0xc0030044
c0017144:	ff d0                	call   eax
c0017146:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c001714b:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0017150:	83 e0 02             	and    eax,0x2
c0017153:	74 1c                	je     c0017171 <ACPI::close(int, int, void*)+0x87>
c0017155:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c001715c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017160:	89 c2                	mov    edx,eax
c0017162:	ec                   	in     al,dx
c0017163:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0017167:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c001716b:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001716f:	eb da                	jmp    c001714b <ACPI::close(int, int, void*)+0x61>
c0017171:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c0017178:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c001717d:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0017181:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0017185:	ee                   	out    dx,al
c0017186:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001718b:	83 c4 1c             	add    esp,0x1c
c001718e:	c3                   	ret    

c001718f <findRSDP()>:
c001718f:	83 ec 1c             	sub    esp,0x1c
c0017192:	a1 a8 d9 02 c0       	mov    eax,ds:0xc002d9a8
c0017197:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001719d:	83 e0 04             	and    eax,0x4
c00171a0:	84 c0                	test   al,al
c00171a2:	75 07                	jne    c00171ab <findRSDP()+0x1c>
c00171a4:	b8 00 00 00 00       	mov    eax,0x0
c00171a9:	eb 6a                	jmp    c0017215 <findRSDP()+0x86>
c00171ab:	a1 f4 d9 02 c0       	mov    eax,ds:0xc002d9f4
c00171b0:	3d ff 07 00 00       	cmp    eax,0x7ff
c00171b5:	7f 1b                	jg     c00171d2 <findRSDP()+0x43>
c00171b7:	a1 a8 d9 02 c0       	mov    eax,ds:0xc002d9a8
c00171bc:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c00171c2:	83 e2 fb             	and    edx,0xfffffffb
c00171c5:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c00171cb:	b8 00 00 00 00       	mov    eax,0x0
c00171d0:	eb 43                	jmp    c0017215 <findRSDP()+0x86>
c00171d2:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c00171da:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c00171e2:	77 2c                	ja     c0017210 <findRSDP()+0x81>
c00171e4:	83 ec 04             	sub    esp,0x4
c00171e7:	6a 08                	push   0x8
c00171e9:	68 df b1 02 c0       	push   0xc002b1df
c00171ee:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00171f2:	e8 55 94 fe ff       	call   c000064c <memcmp>
c00171f7:	83 c4 10             	add    esp,0x10
c00171fa:	85 c0                	test   eax,eax
c00171fc:	0f 94 c0             	sete   al
c00171ff:	84 c0                	test   al,al
c0017201:	74 06                	je     c0017209 <findRSDP()+0x7a>
c0017203:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017207:	eb 0c                	jmp    c0017215 <findRSDP()+0x86>
c0017209:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c001720e:	eb ca                	jmp    c00171da <findRSDP()+0x4b>
c0017210:	b8 00 00 00 00       	mov    eax,0x0
c0017215:	83 c4 1c             	add    esp,0x1c
c0017218:	c3                   	ret    

c0017219 <loadACPITables(unsigned char*)>:
c0017219:	57                   	push   edi
c001721a:	56                   	push   esi
c001721b:	53                   	push   ebx
c001721c:	83 ec 60             	sub    esp,0x60
c001721f:	a1 a8 d9 02 c0       	mov    eax,ds:0xc002d9a8
c0017224:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001722a:	83 e0 04             	and    eax,0x4
c001722d:	84 c0                	test   al,al
c001722f:	0f 84 33 02 00 00    	je     c0017468 <loadACPITables(unsigned char*)+0x24f>
c0017235:	a0 60 02 03 c0       	mov    al,ds:0xc0030260
c001723a:	84 c0                	test   al,al
c001723c:	74 75                	je     c00172b3 <loadACPITables(unsigned char*)+0x9a>
c001723e:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0017242:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0017246:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001724a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001724d:	83 e8 24             	sub    eax,0x24
c0017250:	c1 e8 03             	shr    eax,0x3
c0017253:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0017257:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c001725f:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0017263:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
c0017267:	0f 8d b2 00 00 00    	jge    c001731f <loadACPITables(unsigned char*)+0x106>
c001726d:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0017271:	83 c0 24             	add    eax,0x24
c0017274:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0017278:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001727c:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0017280:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0017284:	c1 e0 03             	shl    eax,0x3
c0017287:	01 44 24 44          	add    DWORD PTR [esp+0x44],eax
c001728b:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001728f:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0017292:	8b 00                	mov    eax,DWORD PTR [eax]
c0017294:	89 c1                	mov    ecx,eax
c0017296:	a1 4c 00 03 c0       	mov    eax,ds:0xc003004c
c001729b:	8d 50 01             	lea    edx,[eax+0x1]
c001729e:	89 15 4c 00 03 c0    	mov    DWORD PTR ds:0xc003004c,edx
c00172a4:	89 ca                	mov    edx,ecx
c00172a6:	89 14 c5 64 00 03 c0 	mov    DWORD PTR [eax*8-0x3ffcff9c],edx
c00172ad:	ff 44 24 5c          	inc    DWORD PTR [esp+0x5c]
c00172b1:	eb ac                	jmp    c001725f <loadACPITables(unsigned char*)+0x46>
c00172b3:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c00172b7:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00172bb:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00172bf:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00172c2:	83 e8 24             	sub    eax,0x24
c00172c5:	c1 e8 02             	shr    eax,0x2
c00172c8:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c00172cc:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c00172d4:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c00172d8:	3b 44 24 3c          	cmp    eax,DWORD PTR [esp+0x3c]
c00172dc:	7d 41                	jge    c001731f <loadACPITables(unsigned char*)+0x106>
c00172de:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c00172e2:	83 c0 24             	add    eax,0x24
c00172e5:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00172e9:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00172ed:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00172f1:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c00172f5:	c1 e0 02             	shl    eax,0x2
c00172f8:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c00172fc:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017300:	8b 08                	mov    ecx,DWORD PTR [eax]
c0017302:	a1 4c 00 03 c0       	mov    eax,ds:0xc003004c
c0017307:	8d 50 01             	lea    edx,[eax+0x1]
c001730a:	89 15 4c 00 03 c0    	mov    DWORD PTR ds:0xc003004c,edx
c0017310:	89 ca                	mov    edx,ecx
c0017312:	89 14 c5 64 00 03 c0 	mov    DWORD PTR [eax*8-0x3ffcff9c],edx
c0017319:	ff 44 24 58          	inc    DWORD PTR [esp+0x58]
c001731d:	eb b5                	jmp    c00172d4 <loadACPITables(unsigned char*)+0xbb>
c001731f:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c0017327:	a1 4c 00 03 c0       	mov    eax,ds:0xc003004c
c001732c:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c0017330:	0f 8d 33 01 00 00    	jge    c0017469 <loadACPITables(unsigned char*)+0x250>
c0017336:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001733a:	8b 04 c5 64 00 03 c0 	mov    eax,DWORD PTR [eax*8-0x3ffcff9c]
c0017341:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017345:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017349:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001734d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017351:	25 ff 0f 00 00       	and    eax,0xfff
c0017356:	89 c6                	mov    esi,eax
c0017358:	8b 1d 10 db 02 c0    	mov    ebx,DWORD PTR ds:0xc002db10
c001735e:	83 ec 0c             	sub    esp,0xc
c0017361:	6a 01                	push   0x1
c0017363:	e8 b5 9e ff ff       	call   c001121d <Virt::allocateKernelVirtualPages(int)>
c0017368:	83 c4 10             	add    esp,0x10
c001736b:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001736f:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017375:	83 ec 0c             	sub    esp,0xc
c0017378:	6a 01                	push   0x1
c001737a:	6a 01                	push   0x1
c001737c:	50                   	push   eax
c001737d:	52                   	push   edx
c001737e:	53                   	push   ebx
c001737f:	e8 4c a9 ff ff       	call   c0011cd0 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017384:	83 c4 20             	add    esp,0x20
c0017387:	09 f0                	or     eax,esi
c0017389:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001738d:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0017391:	c1 e0 03             	shl    eax,0x3
c0017394:	05 60 00 03 c0       	add    eax,0xc0030060
c0017399:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001739d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00173a1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00173a5:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c00173ad:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00173b1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00173b5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00173b9:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00173bd:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00173c1:	89 c6                	mov    esi,eax
c00173c3:	89 d7                	mov    edi,edx
c00173c5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00173c7:	89 c8                	mov    eax,ecx
c00173c9:	89 fa                	mov    edx,edi
c00173cb:	89 f3                	mov    ebx,esi
c00173cd:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c00173d1:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00173d5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00173d9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00173dd:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00173e0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00173e4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00173e8:	05 00 10 00 00       	add    eax,0x1000
c00173ed:	c1 e8 0c             	shr    eax,0xc
c00173f0:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00173f4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00173f8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00173fc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017400:	25 ff 0f 00 00       	and    eax,0xfff
c0017405:	89 c6                	mov    esi,eax
c0017407:	8b 1d 10 db 02 c0    	mov    ebx,DWORD PTR ds:0xc002db10
c001740d:	83 ec 0c             	sub    esp,0xc
c0017410:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0017414:	e8 04 9e ff ff       	call   c001121d <Virt::allocateKernelVirtualPages(int)>
c0017419:	83 c4 10             	add    esp,0x10
c001741c:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0017420:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017426:	83 ec 0c             	sub    esp,0xc
c0017429:	6a 01                	push   0x1
c001742b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001742f:	50                   	push   eax
c0017430:	52                   	push   edx
c0017431:	53                   	push   ebx
c0017432:	e8 99 a8 ff ff       	call   c0011cd0 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017437:	83 c4 20             	add    esp,0x20
c001743a:	09 f0                	or     eax,esi
c001743c:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017440:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017444:	83 ec 0c             	sub    esp,0xc
c0017447:	50                   	push   eax
c0017448:	e8 16 a2 ff ff       	call   c0011663 <Virt::freeKernelVirtualPages(unsigned long)>
c001744d:	83 c4 10             	add    esp,0x10
c0017450:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0017454:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0017458:	89 14 c5 64 00 03 c0 	mov    DWORD PTR [eax*8-0x3ffcff9c],edx
c001745f:	ff 44 24 54          	inc    DWORD PTR [esp+0x54]
c0017463:	e9 bf fe ff ff       	jmp    c0017327 <loadACPITables(unsigned char*)+0x10e>
c0017468:	90                   	nop
c0017469:	83 c4 60             	add    esp,0x60
c001746c:	5b                   	pop    ebx
c001746d:	5e                   	pop    esi
c001746e:	5f                   	pop    edi
c001746f:	c3                   	ret    

c0017470 <findRSDT(unsigned char*)>:
c0017470:	57                   	push   edi
c0017471:	56                   	push   esi
c0017472:	53                   	push   ebx
c0017473:	83 ec 50             	sub    esp,0x50
c0017476:	a1 a8 d9 02 c0       	mov    eax,ds:0xc002d9a8
c001747b:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017481:	83 e0 04             	and    eax,0x4
c0017484:	84 c0                	test   al,al
c0017486:	75 0a                	jne    c0017492 <findRSDT(unsigned char*)+0x22>
c0017488:	b8 00 00 00 00       	mov    eax,0x0
c001748d:	e9 21 01 00 00       	jmp    c00175b3 <findRSDT(unsigned char*)+0x143>
c0017492:	89 e0                	mov    eax,esp
c0017494:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0017498:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c001749c:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00174a0:	c7 44 24 34 24 00 00 00 	mov    DWORD PTR [esp+0x34],0x24
c00174a8:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00174ac:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00174b0:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00174b4:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00174b8:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c00174bc:	89 c6                	mov    esi,eax
c00174be:	89 d7                	mov    edi,edx
c00174c0:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00174c2:	89 c8                	mov    eax,ecx
c00174c4:	89 fa                	mov    edx,edi
c00174c6:	89 f3                	mov    ebx,esi
c00174c8:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c00174cc:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c00174d0:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00174d4:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00174d8:	88 44 24 4b          	mov    BYTE PTR [esp+0x4b],al
c00174dc:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c00174e4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00174e8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00174ec:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c00174f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00174f4:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00174f8:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00174fc:	25 ff 0f 00 00       	and    eax,0xfff
c0017501:	89 c6                	mov    esi,eax
c0017503:	8b 1d 10 db 02 c0    	mov    ebx,DWORD PTR ds:0xc002db10
c0017509:	83 ec 0c             	sub    esp,0xc
c001750c:	6a 02                	push   0x2
c001750e:	e8 0a 9d ff ff       	call   c001121d <Virt::allocateKernelVirtualPages(int)>
c0017513:	83 c4 10             	add    esp,0x10
c0017516:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c001751a:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017520:	83 ec 0c             	sub    esp,0xc
c0017523:	6a 01                	push   0x1
c0017525:	6a 02                	push   0x2
c0017527:	50                   	push   eax
c0017528:	52                   	push   edx
c0017529:	53                   	push   ebx
c001752a:	e8 a1 a7 ff ff       	call   c0011cd0 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001752f:	83 c4 20             	add    esp,0x20
c0017532:	09 f0                	or     eax,esi
c0017534:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0017538:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001753c:	25 ff 0f 00 00       	and    eax,0xfff
c0017541:	89 c6                	mov    esi,eax
c0017543:	8b 1d 10 db 02 c0    	mov    ebx,DWORD PTR ds:0xc002db10
c0017549:	83 ec 0c             	sub    esp,0xc
c001754c:	6a 02                	push   0x2
c001754e:	e8 ca 9c ff ff       	call   c001121d <Virt::allocateKernelVirtualPages(int)>
c0017553:	83 c4 10             	add    esp,0x10
c0017556:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c001755a:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017560:	83 ec 0c             	sub    esp,0xc
c0017563:	6a 01                	push   0x1
c0017565:	6a 02                	push   0x2
c0017567:	50                   	push   eax
c0017568:	52                   	push   edx
c0017569:	53                   	push   ebx
c001756a:	e8 61 a7 ff ff       	call   c0011cd0 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001756f:	83 c4 20             	add    esp,0x20
c0017572:	09 f0                	or     eax,esi
c0017574:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0017578:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c001757d:	75 11                	jne    c0017590 <findRSDT(unsigned char*)+0x120>
c001757f:	c6 05 60 02 03 c0 00 	mov    BYTE PTR ds:0xc0030260,0x0
c0017586:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001758a:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001758e:	eb 1f                	jmp    c00175af <findRSDT(unsigned char*)+0x13f>
c0017590:	80 7c 24 4b 02       	cmp    BYTE PTR [esp+0x4b],0x2
c0017595:	75 11                	jne    c00175a8 <findRSDT(unsigned char*)+0x138>
c0017597:	c6 05 60 02 03 c0 01 	mov    BYTE PTR ds:0xc0030260,0x1
c001759e:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00175a2:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c00175a6:	eb 07                	jmp    c00175af <findRSDT(unsigned char*)+0x13f>
c00175a8:	b8 00 00 00 00       	mov    eax,0x0
c00175ad:	eb 04                	jmp    c00175b3 <findRSDT(unsigned char*)+0x143>
c00175af:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00175b3:	83 c4 50             	add    esp,0x50
c00175b6:	5b                   	pop    ebx
c00175b7:	5e                   	pop    esi
c00175b8:	5f                   	pop    edi
c00175b9:	c3                   	ret    

c00175ba <findDataTable(unsigned char*, char*)>:
c00175ba:	83 ec 1c             	sub    esp,0x1c
c00175bd:	a1 a8 d9 02 c0       	mov    eax,ds:0xc002d9a8
c00175c2:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00175c8:	83 e0 04             	and    eax,0x4
c00175cb:	84 c0                	test   al,al
c00175cd:	75 07                	jne    c00175d6 <findDataTable(unsigned char*, char*)+0x1c>
c00175cf:	b8 00 00 00 00       	mov    eax,0x0
c00175d4:	eb 52                	jmp    c0017628 <findDataTable(unsigned char*, char*)+0x6e>
c00175d6:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00175de:	a1 4c 00 03 c0       	mov    eax,ds:0xc003004c
c00175e3:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c00175e7:	7d 3a                	jge    c0017623 <findDataTable(unsigned char*, char*)+0x69>
c00175e9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00175ed:	c1 e0 03             	shl    eax,0x3
c00175f0:	05 60 00 03 c0       	add    eax,0xc0030060
c00175f5:	83 ec 04             	sub    esp,0x4
c00175f8:	6a 04                	push   0x4
c00175fa:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00175fe:	50                   	push   eax
c00175ff:	e8 48 90 fe ff       	call   c000064c <memcmp>
c0017604:	83 c4 10             	add    esp,0x10
c0017607:	85 c0                	test   eax,eax
c0017609:	0f 94 c0             	sete   al
c001760c:	84 c0                	test   al,al
c001760e:	74 0d                	je     c001761d <findDataTable(unsigned char*, char*)+0x63>
c0017610:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017614:	8b 04 c5 64 00 03 c0 	mov    eax,DWORD PTR [eax*8-0x3ffcff9c]
c001761b:	eb 0b                	jmp    c0017628 <findDataTable(unsigned char*, char*)+0x6e>
c001761d:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0017621:	eb bb                	jmp    c00175de <findDataTable(unsigned char*, char*)+0x24>
c0017623:	b8 00 00 00 00       	mov    eax,0x0
c0017628:	83 c4 1c             	add    esp,0x1c
c001762b:	c3                   	ret    

c001762c <scanMADT()>:
c001762c:	53                   	push   ebx
c001762d:	83 ec 38             	sub    esp,0x38
c0017630:	a1 a8 d9 02 c0       	mov    eax,ds:0xc002d9a8
c0017635:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001763b:	83 e0 04             	and    eax,0x4
c001763e:	84 c0                	test   al,al
c0017640:	0f 84 4a 04 00 00    	je     c0017a90 <scanMADT()+0x464>
c0017646:	e8 44 fb ff ff       	call   c001718f <findRSDP()>
c001764b:	a3 6c 02 03 c0       	mov    ds:0xc003026c,eax
c0017650:	a1 6c 02 03 c0       	mov    eax,ds:0xc003026c
c0017655:	85 c0                	test   eax,eax
c0017657:	75 19                	jne    c0017672 <scanMADT()+0x46>
c0017659:	a1 a8 d9 02 c0       	mov    eax,ds:0xc002d9a8
c001765e:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017664:	83 e2 fb             	and    edx,0xfffffffb
c0017667:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c001766d:	e9 22 04 00 00       	jmp    c0017a94 <scanMADT()+0x468>
c0017672:	a1 6c 02 03 c0       	mov    eax,ds:0xc003026c
c0017677:	83 ec 0c             	sub    esp,0xc
c001767a:	50                   	push   eax
c001767b:	e8 f0 fd ff ff       	call   c0017470 <findRSDT(unsigned char*)>
c0017680:	83 c4 10             	add    esp,0x10
c0017683:	a3 68 02 03 c0       	mov    ds:0xc0030268,eax
c0017688:	a1 68 02 03 c0       	mov    eax,ds:0xc0030268
c001768d:	85 c0                	test   eax,eax
c001768f:	75 19                	jne    c00176aa <scanMADT()+0x7e>
c0017691:	a1 a8 d9 02 c0       	mov    eax,ds:0xc002d9a8
c0017696:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c001769c:	83 e2 fb             	and    edx,0xfffffffb
c001769f:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c00176a5:	e9 ea 03 00 00       	jmp    c0017a94 <scanMADT()+0x468>
c00176aa:	a1 68 02 03 c0       	mov    eax,ds:0xc0030268
c00176af:	83 ec 0c             	sub    esp,0xc
c00176b2:	50                   	push   eax
c00176b3:	e8 61 fb ff ff       	call   c0017219 <loadACPITables(unsigned char*)>
c00176b8:	83 c4 10             	add    esp,0x10
c00176bb:	a1 68 02 03 c0       	mov    eax,ds:0xc0030268
c00176c0:	83 ec 08             	sub    esp,0x8
c00176c3:	68 e8 b1 02 c0       	push   0xc002b1e8
c00176c8:	50                   	push   eax
c00176c9:	e8 ec fe ff ff       	call   c00175ba <findDataTable(unsigned char*, char*)>
c00176ce:	83 c4 10             	add    esp,0x10
c00176d1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00176d5:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c00176da:	75 19                	jne    c00176f5 <scanMADT()+0xc9>
c00176dc:	a1 a8 d9 02 c0       	mov    eax,ds:0xc002d9a8
c00176e1:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c00176e7:	83 e2 fe             	and    edx,0xfffffffe
c00176ea:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c00176f0:	e9 9f 03 00 00       	jmp    c0017a94 <scanMADT()+0x468>
c00176f5:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c00176fd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017701:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017704:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c0017708:	0f 87 86 03 00 00    	ja     c0017a94 <scanMADT()+0x468>
c001770e:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c0017716:	0f 87 78 03 00 00    	ja     c0017a94 <scanMADT()+0x468>
c001771c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017720:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0017724:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017728:	8d 50 01             	lea    edx,[eax+0x1]
c001772b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001772f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017733:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017737:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c001773b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001773f:	8d 50 01             	lea    edx,[eax+0x1]
c0017742:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017746:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001774a:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c001774e:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c0017752:	80 7c 24 22 02       	cmp    BYTE PTR [esp+0x22],0x2
c0017757:	0f 86 36 03 00 00    	jbe    c0017a93 <scanMADT()+0x467>
c001775d:	80 7c 24 23 00       	cmp    BYTE PTR [esp+0x23],0x0
c0017762:	75 57                	jne    c00177bb <scanMADT()+0x18f>
c0017764:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017768:	8d 50 01             	lea    edx,[eax+0x1]
c001776b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001776f:	8a 15 60 04 03 c0    	mov    dl,BYTE PTR ds:0xc0030460
c0017775:	0f b6 d2             	movzx  edx,dl
c0017778:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001777c:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0017780:	88 82 a0 04 03 c0    	mov    BYTE PTR [edx-0x3ffcfb60],al
c0017786:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001778a:	8d 50 01             	lea    edx,[eax+0x1]
c001778d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017791:	8a 15 60 04 03 c0    	mov    dl,BYTE PTR ds:0xc0030460
c0017797:	8d 4a 01             	lea    ecx,[edx+0x1]
c001779a:	88 0d 60 04 03 c0    	mov    BYTE PTR ds:0xc0030460,cl
c00177a0:	0f b6 d2             	movzx  edx,dl
c00177a3:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c00177a7:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c00177ab:	88 82 80 04 03 c0    	mov    BYTE PTR [edx-0x3ffcfb80],al
c00177b1:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c00177b6:	e9 c1 02 00 00       	jmp    c0017a7c <scanMADT()+0x450>
c00177bb:	80 7c 24 23 01       	cmp    BYTE PTR [esp+0x23],0x1
c00177c0:	0f 85 14 01 00 00    	jne    c00178da <scanMADT()+0x2ae>
c00177c6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00177ca:	8d 50 01             	lea    edx,[eax+0x1]
c00177cd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00177d1:	8a 15 20 03 03 c0    	mov    dl,BYTE PTR ds:0xc0030320
c00177d7:	0f b6 d2             	movzx  edx,dl
c00177da:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c00177de:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c00177e2:	88 82 40 03 03 c0    	mov    BYTE PTR [edx-0x3ffcfcc0],al
c00177e8:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
c00177ec:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00177f0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00177f4:	01 d0                	add    eax,edx
c00177f6:	83 c0 2c             	add    eax,0x2c
c00177f9:	8a 00                	mov    al,BYTE PTR [eax]
c00177fb:	0f b6 d0             	movzx  edx,al
c00177fe:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017802:	8d 48 01             	lea    ecx,[eax+0x1]
c0017805:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017809:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c001780d:	0f b6 c0             	movzx  eax,al
c0017810:	c1 e0 08             	shl    eax,0x8
c0017813:	89 d1                	mov    ecx,edx
c0017815:	09 c1                	or     ecx,eax
c0017817:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001781b:	8d 50 02             	lea    edx,[eax+0x2]
c001781e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017822:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017826:	0f b6 c0             	movzx  eax,al
c0017829:	c1 e0 10             	shl    eax,0x10
c001782c:	09 c1                	or     ecx,eax
c001782e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017832:	8d 50 03             	lea    edx,[eax+0x3]
c0017835:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017839:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001783d:	0f b6 c0             	movzx  eax,al
c0017840:	c1 e0 18             	shl    eax,0x18
c0017843:	09 c1                	or     ecx,eax
c0017845:	89 ca                	mov    edx,ecx
c0017847:	a0 20 03 03 c0       	mov    al,ds:0xc0030320
c001784c:	0f b6 c0             	movzx  eax,al
c001784f:	89 14 85 60 03 03 c0 	mov    DWORD PTR [eax*4-0x3ffcfca0],edx
c0017856:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c001785b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001785f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017863:	01 d0                	add    eax,edx
c0017865:	83 c0 2c             	add    eax,0x2c
c0017868:	8a 00                	mov    al,BYTE PTR [eax]
c001786a:	0f b6 d0             	movzx  edx,al
c001786d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017871:	8d 48 01             	lea    ecx,[eax+0x1]
c0017874:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017878:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c001787c:	0f b6 c0             	movzx  eax,al
c001787f:	c1 e0 08             	shl    eax,0x8
c0017882:	89 d1                	mov    ecx,edx
c0017884:	09 c1                	or     ecx,eax
c0017886:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001788a:	8d 50 02             	lea    edx,[eax+0x2]
c001788d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017891:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017895:	0f b6 c0             	movzx  eax,al
c0017898:	c1 e0 10             	shl    eax,0x10
c001789b:	09 c1                	or     ecx,eax
c001789d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00178a1:	8d 50 03             	lea    edx,[eax+0x3]
c00178a4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00178a8:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c00178ac:	0f b6 c0             	movzx  eax,al
c00178af:	c1 e0 18             	shl    eax,0x18
c00178b2:	09 c1                	or     ecx,eax
c00178b4:	89 ca                	mov    edx,ecx
c00178b6:	a0 20 03 03 c0       	mov    al,ds:0xc0030320
c00178bb:	0f b6 c0             	movzx  eax,al
c00178be:	89 14 85 e0 03 03 c0 	mov    DWORD PTR [eax*4-0x3ffcfc20],edx
c00178c5:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c00178ca:	a0 20 03 03 c0       	mov    al,ds:0xc0030320
c00178cf:	40                   	inc    eax
c00178d0:	a2 20 03 03 c0       	mov    ds:0xc0030320,al
c00178d5:	e9 a2 01 00 00       	jmp    c0017a7c <scanMADT()+0x450>
c00178da:	80 7c 24 23 02       	cmp    BYTE PTR [esp+0x23],0x2
c00178df:	0f 85 e9 00 00 00    	jne    c00179ce <scanMADT()+0x3a2>
c00178e5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00178e9:	8d 50 01             	lea    edx,[eax+0x1]
c00178ec:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00178f0:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00178f4:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c00178f8:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c00178fc:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017900:	8d 50 01             	lea    edx,[eax+0x1]
c0017903:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017907:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001790b:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c001790f:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c0017913:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017917:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001791b:	01 d0                	add    eax,edx
c001791d:	83 c0 2c             	add    eax,0x2c
c0017920:	8a 00                	mov    al,BYTE PTR [eax]
c0017922:	0f b6 d0             	movzx  edx,al
c0017925:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017929:	8d 48 01             	lea    ecx,[eax+0x1]
c001792c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017930:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0017934:	0f b6 c0             	movzx  eax,al
c0017937:	c1 e0 08             	shl    eax,0x8
c001793a:	89 d1                	mov    ecx,edx
c001793c:	09 c1                	or     ecx,eax
c001793e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017942:	8d 50 02             	lea    edx,[eax+0x2]
c0017945:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017949:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001794d:	0f b6 c0             	movzx  eax,al
c0017950:	c1 e0 10             	shl    eax,0x10
c0017953:	09 c1                	or     ecx,eax
c0017955:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017959:	8d 50 03             	lea    edx,[eax+0x3]
c001795c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017960:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017964:	0f b6 c0             	movzx  eax,al
c0017967:	c1 e0 18             	shl    eax,0x18
c001796a:	09 c8                	or     eax,ecx
c001796c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017970:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017975:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017979:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001797d:	01 d0                	add    eax,edx
c001797f:	83 c0 2c             	add    eax,0x2c
c0017982:	8a 00                	mov    al,BYTE PTR [eax]
c0017984:	0f b6 c0             	movzx  eax,al
c0017987:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001798b:	8d 4a 01             	lea    ecx,[edx+0x1]
c001798e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017992:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c0017996:	0f b6 d2             	movzx  edx,dl
c0017999:	c1 e2 08             	shl    edx,0x8
c001799c:	09 d0                	or     eax,edx
c001799e:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c00179a3:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c00179a8:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c00179ad:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00179b1:	88 90 00 cc 02 c0    	mov    BYTE PTR [eax-0x3ffd3400],dl
c00179b7:	0f b6 54 24 20       	movzx  edx,BYTE PTR [esp+0x20]
c00179bc:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c00179c1:	66 89 84 12 00 03 03 c0 	mov    WORD PTR [edx+edx*1-0x3ffcfd00],ax
c00179c9:	e9 ae 00 00 00       	jmp    c0017a7c <scanMADT()+0x450>
c00179ce:	80 7c 24 23 04       	cmp    BYTE PTR [esp+0x23],0x4
c00179d3:	0f 85 97 00 00 00    	jne    c0017a70 <scanMADT()+0x444>
c00179d9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00179dd:	8d 50 01             	lea    edx,[eax+0x1]
c00179e0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00179e4:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00179e8:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c00179ec:	0f b6 c0             	movzx  eax,al
c00179ef:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00179f3:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00179f7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00179fb:	01 d0                	add    eax,edx
c00179fd:	83 c0 2c             	add    eax,0x2c
c0017a00:	8a 00                	mov    al,BYTE PTR [eax]
c0017a02:	0f b6 d0             	movzx  edx,al
c0017a05:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017a09:	8d 48 01             	lea    ecx,[eax+0x1]
c0017a0c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017a10:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0017a14:	0f b6 c0             	movzx  eax,al
c0017a17:	c1 e0 08             	shl    eax,0x8
c0017a1a:	09 d0                	or     eax,edx
c0017a1c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017a20:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c0017a25:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017a29:	8d 50 01             	lea    edx,[eax+0x1]
c0017a2c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017a30:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017a34:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017a38:	0f b6 c0             	movzx  eax,al
c0017a3b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017a3f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017a43:	c1 e0 08             	shl    eax,0x8
c0017a46:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0017a4a:	89 c1                	mov    ecx,eax
c0017a4c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017a50:	c1 e0 18             	shl    eax,0x18
c0017a53:	89 c3                	mov    ebx,eax
c0017a55:	a1 70 02 03 c0       	mov    eax,ds:0xc0030270
c0017a5a:	8d 50 01             	lea    edx,[eax+0x1]
c0017a5d:	89 15 70 02 03 c0    	mov    DWORD PTR ds:0xc0030270,edx
c0017a63:	09 d9                	or     ecx,ebx
c0017a65:	89 ca                	mov    edx,ecx
c0017a67:	89 14 85 80 02 03 c0 	mov    DWORD PTR [eax*4-0x3ffcfd80],edx
c0017a6e:	eb 0c                	jmp    c0017a7c <scanMADT()+0x450>
c0017a70:	80 7c 24 23 05       	cmp    BYTE PTR [esp+0x23],0x5
c0017a75:	75 05                	jne    c0017a7c <scanMADT()+0x450>
c0017a77:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c0017a7c:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c0017a81:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017a85:	01 d0                	add    eax,edx
c0017a87:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0017a8b:	e9 6d fc ff ff       	jmp    c00176fd <scanMADT()+0xd1>
c0017a90:	90                   	nop
c0017a91:	eb 01                	jmp    c0017a94 <scanMADT()+0x468>
c0017a93:	90                   	nop
c0017a94:	83 c4 38             	add    esp,0x38
c0017a97:	5b                   	pop    ebx
c0017a98:	c3                   	ret    
c0017a99:	90                   	nop

c0017a9a <ACPI::ACPI()>:
c0017a9a:	83 ec 0c             	sub    esp,0xc
c0017a9d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017aa1:	83 ec 08             	sub    esp,0x8
c0017aa4:	68 ed b1 02 c0       	push   0xc002b1ed
c0017aa9:	50                   	push   eax
c0017aaa:	e8 57 c2 ff ff       	call   c0013d06 <Device::Device(char const*)>
c0017aaf:	83 c4 10             	add    esp,0x10
c0017ab2:	ba 48 b3 02 c0       	mov    edx,0xc002b348
c0017ab7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017abb:	89 10                	mov    DWORD PTR [eax],edx
c0017abd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017ac1:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c0017ac8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017acc:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c0017ad6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017ada:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c0017ae4:	e8 43 fb ff ff       	call   c001762c <scanMADT()>
c0017ae9:	90                   	nop
c0017aea:	83 c4 0c             	add    esp,0xc
c0017aed:	c3                   	ret    

c0017aee <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c0017aee:	83 ec 2c             	sub    esp,0x2c
c0017af1:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0017af5:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017af9:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0017afd:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0017b01:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0017b06:	88 d0                	mov    al,dl
c0017b08:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0017b0c:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0017b11:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0017b19:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017b1d:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0017b23:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0017b27:	0f 8d 97 00 00 00    	jge    c0017bc4 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd6>
c0017b2d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017b31:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017b35:	83 c2 2a             	add    edx,0x2a
c0017b38:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c0017b3c:	66 39 44 24 08       	cmp    WORD PTR [esp+0x8],ax
c0017b41:	75 78                	jne    c0017bbb <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c0017b43:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017b47:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017b4b:	83 c2 2a             	add    edx,0x2a
c0017b4e:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c0017b52:	38 44 24 04          	cmp    BYTE PTR [esp+0x4],al
c0017b56:	75 63                	jne    c0017bbb <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c0017b58:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0017b5d:	74 3a                	je     c0017b99 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xab>
c0017b5f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017b63:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017b67:	83 c2 2a             	add    edx,0x2a
c0017b6a:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c0017b6e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017b72:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017b75:	39 c2                	cmp    edx,eax
c0017b77:	74 10                	je     c0017b89 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x9b>
c0017b79:	83 ec 0c             	sub    esp,0xc
c0017b7c:	68 68 b1 02 c0       	push   0xc002b168
c0017b81:	e8 af 22 00 00       	call   c0019e35 <Krnl::panic(char const*)>
c0017b86:	83 c4 10             	add    esp,0x10
c0017b89:	83 ec 0c             	sub    esp,0xc
c0017b8c:	68 f2 b1 02 c0       	push   0xc002b1f2
c0017b91:	e8 9f 22 00 00       	call   c0019e35 <Krnl::panic(char const*)>
c0017b96:	83 c4 10             	add    esp,0x10
c0017b99:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0017b9d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017ba1:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017ba5:	83 c2 2a             	add    edx,0x2a
c0017ba8:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c0017bac:	8b 02                	mov    eax,DWORD PTR [edx]
c0017bae:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c0017bb1:	89 01                	mov    DWORD PTR [ecx],eax
c0017bb3:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0017bb6:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0017bbb:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0017bbf:	e9 55 ff ff ff       	jmp    c0017b19 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2b>
c0017bc4:	90                   	nop
c0017bc5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017bc9:	83 c4 2c             	add    esp,0x2c
c0017bcc:	c2 04 00             	ret    0x4
c0017bcf:	90                   	nop

c0017bd0 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c0017bd0:	83 ec 1c             	sub    esp,0x1c
c0017bd3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017bd7:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0017bdb:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0017bdf:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0017be4:	88 c8                	mov    al,cl
c0017be6:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0017bea:	88 d0                	mov    al,dl
c0017bec:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0017bf0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017bf4:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0017bfa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017bfe:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0017c01:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c0017c05:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c0017c09:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017c0d:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0017c13:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017c17:	8d 48 2a             	lea    ecx,[eax+0x2a]
c0017c1a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017c1e:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c0017c23:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017c27:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0017c2d:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0017c31:	8d 48 01             	lea    ecx,[eax+0x1]
c0017c34:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017c38:	83 c2 2a             	add    edx,0x2a
c0017c3b:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c0017c3f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017c43:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0017c49:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017c4d:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0017c50:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0017c54:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c0017c58:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017c5c:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0017c62:	8d 50 01             	lea    edx,[eax+0x1]
c0017c65:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017c69:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c0017c6f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017c73:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0017c79:	3d 00 02 00 00       	cmp    eax,0x200
c0017c7e:	75 10                	jne    c0017c90 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc0>
c0017c80:	83 ec 0c             	sub    esp,0xc
c0017c83:	68 01 b2 02 c0       	push   0xc002b201
c0017c88:	e8 a8 21 00 00       	call   c0019e35 <Krnl::panic(char const*)>
c0017c8d:	83 c4 10             	add    esp,0x10
c0017c90:	90                   	nop
c0017c91:	83 c4 1c             	add    esp,0x1c
c0017c94:	c3                   	ret    
c0017c95:	90                   	nop

c0017c96 <ACPI::setScreenBrightnessLevel(void*, int)>:
c0017c96:	b8 00 00 00 00       	mov    eax,0x0
c0017c9b:	c3                   	ret    

c0017c9c <ACPI::detectPCI()>:
c0017c9c:	53                   	push   ebx
c0017c9d:	83 ec 28             	sub    esp,0x28
c0017ca0:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0017ca5:	c6 44 24 1e 00       	mov    BYTE PTR [esp+0x1e],0x0
c0017caa:	a1 a8 d9 02 c0       	mov    eax,ds:0xc002d9a8
c0017caf:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017cb5:	83 e0 04             	and    eax,0x4
c0017cb8:	84 c0                	test   al,al
c0017cba:	74 2b                	je     c0017ce7 <ACPI::detectPCI()+0x4b>
c0017cbc:	a1 68 02 03 c0       	mov    eax,ds:0xc0030268
c0017cc1:	83 ec 08             	sub    esp,0x8
c0017cc4:	68 1e b2 02 c0       	push   0xc002b21e
c0017cc9:	50                   	push   eax
c0017cca:	e8 eb f8 ff ff       	call   c00175ba <findDataTable(unsigned char*, char*)>
c0017ccf:	83 c4 10             	add    esp,0x10
c0017cd2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017cd6:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0017cdb:	74 0a                	je     c0017ce7 <ACPI::detectPCI()+0x4b>
c0017cdd:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0017ce2:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c0017ce7:	c7 44 24 14 5f 0c 00 00 	mov    DWORD PTR [esp+0x14],0xc5f
c0017cef:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017cf3:	8a 00                	mov    al,BYTE PTR [eax]
c0017cf5:	3c 01                	cmp    al,0x1
c0017cf7:	75 0c                	jne    c0017d05 <ACPI::detectPCI()+0x69>
c0017cf9:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0017cfe:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c0017d03:	eb 26                	jmp    c0017d2b <ACPI::detectPCI()+0x8f>
c0017d05:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017d09:	8a 00                	mov    al,BYTE PTR [eax]
c0017d0b:	3c 02                	cmp    al,0x2
c0017d0d:	75 1c                	jne    c0017d2b <ACPI::detectPCI()+0x8f>
c0017d0f:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0017d14:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c0017d19:	74 10                	je     c0017d2b <ACPI::detectPCI()+0x8f>
c0017d1b:	83 ec 0c             	sub    esp,0xc
c0017d1e:	68 98 b1 02 c0       	push   0xc002b198
c0017d23:	e8 0d 21 00 00       	call   c0019e35 <Krnl::panic(char const*)>
c0017d28:	83 c4 10             	add    esp,0x10
c0017d2b:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0017d2f:	83 f0 01             	xor    eax,0x1
c0017d32:	84 c0                	test   al,al
c0017d34:	74 3f                	je     c0017d75 <ACPI::detectPCI()+0xd9>
c0017d36:	e8 15 84 fe ff       	call   c0000150 <manualPCIProbe>
c0017d3b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017d3f:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0017d44:	75 0c                	jne    c0017d52 <ACPI::detectPCI()+0xb6>
c0017d46:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0017d4b:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c0017d50:	eb 23                	jmp    c0017d75 <ACPI::detectPCI()+0xd9>
c0017d52:	83 7c 24 10 02       	cmp    DWORD PTR [esp+0x10],0x2
c0017d57:	75 1c                	jne    c0017d75 <ACPI::detectPCI()+0xd9>
c0017d59:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0017d5e:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c0017d63:	74 10                	je     c0017d75 <ACPI::detectPCI()+0xd9>
c0017d65:	83 ec 0c             	sub    esp,0xc
c0017d68:	68 98 b1 02 c0       	push   0xc002b198
c0017d6d:	e8 c3 20 00 00       	call   c0019e35 <Krnl::panic(char const*)>
c0017d72:	83 c4 10             	add    esp,0x10
c0017d75:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0017d7a:	74 7e                	je     c0017dfa <ACPI::detectPCI()+0x15e>
c0017d7c:	83 ec 0c             	sub    esp,0xc
c0017d7f:	68 23 b2 02 c0       	push   0xc002b223
c0017d84:	e8 6a 78 ff ff       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c0017d89:	83 c4 10             	add    esp,0x10
c0017d8c:	c7 44 24 04 5c 01 00 00 	mov    DWORD PTR [esp+0x4],0x15c
c0017d94:	83 ec 0c             	sub    esp,0xc
c0017d97:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017d9b:	e8 f9 77 ff ff       	call   c000f599 <malloc>
c0017da0:	83 c4 10             	add    esp,0x10
c0017da3:	89 c3                	mov    ebx,eax
c0017da5:	83 ec 0c             	sub    esp,0xc
c0017da8:	53                   	push   ebx
c0017da9:	e8 b0 a5 00 00       	call   c002235e <PCI::PCI()>
c0017dae:	83 c4 10             	add    esp,0x10
c0017db1:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0017db5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017db9:	83 ec 08             	sub    esp,0x8
c0017dbc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017dc0:	50                   	push   eax
c0017dc1:	e8 3c bd ff ff       	call   c0013b02 <Device::addChild(Device*)>
c0017dc6:	83 c4 10             	add    esp,0x10
c0017dc9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017dcd:	8b 00                	mov    eax,DWORD PTR [eax]
c0017dcf:	83 c0 08             	add    eax,0x8
c0017dd2:	8b 00                	mov    eax,DWORD PTR [eax]
c0017dd4:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c0017dd9:	74 07                	je     c0017de2 <ACPI::detectPCI()+0x146>
c0017ddb:	ba 01 00 00 00       	mov    edx,0x1
c0017de0:	eb 05                	jmp    c0017de7 <ACPI::detectPCI()+0x14b>
c0017de2:	ba 02 00 00 00       	mov    edx,0x2
c0017de7:	6a 00                	push   0x0
c0017de9:	6a 00                	push   0x0
c0017deb:	52                   	push   edx
c0017dec:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017df0:	ff d0                	call   eax
c0017df2:	83 c4 10             	add    esp,0x10
c0017df5:	e9 9e 00 00 00       	jmp    c0017e98 <ACPI::detectPCI()+0x1fc>
c0017dfa:	83 ec 0c             	sub    esp,0xc
c0017dfd:	68 3b b2 02 c0       	push   0xc002b23b
c0017e02:	e8 c2 a8 ff ff       	call   c00126c9 <Dbg::kprintf(char const*, ...)>
c0017e07:	83 c4 10             	add    esp,0x10
c0017e0a:	83 ec 0c             	sub    esp,0xc
c0017e0d:	68 46 b2 02 c0       	push   0xc002b246
c0017e12:	e8 dc 77 ff ff       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c0017e17:	83 c4 10             	add    esp,0x10
c0017e1a:	c7 04 24 70 02 00 00 	mov    DWORD PTR [esp],0x270
c0017e21:	83 ec 0c             	sub    esp,0xc
c0017e24:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0017e28:	e8 6c 77 ff ff       	call   c000f599 <malloc>
c0017e2d:	83 c4 10             	add    esp,0x10
c0017e30:	89 c3                	mov    ebx,eax
c0017e32:	83 ec 0c             	sub    esp,0xc
c0017e35:	53                   	push   ebx
c0017e36:	e8 8d b0 00 00       	call   c0022ec8 <IDE::IDE()>
c0017e3b:	83 c4 10             	add    esp,0x10
c0017e3e:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0017e42:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017e46:	83 ec 08             	sub    esp,0x8
c0017e49:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017e4d:	50                   	push   eax
c0017e4e:	e8 af bc ff ff       	call   c0013b02 <Device::addChild(Device*)>
c0017e53:	83 c4 10             	add    esp,0x10
c0017e56:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017e5a:	c7 80 14 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x114],0x1
c0017e64:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017e68:	66 c7 80 18 01 00 00 f0 01 	mov    WORD PTR [eax+0x118],0x1f0
c0017e71:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017e75:	66 c7 80 1a 01 00 00 70 01 	mov    WORD PTR [eax+0x11a],0x170
c0017e7e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017e82:	8b 00                	mov    eax,DWORD PTR [eax]
c0017e84:	83 c0 08             	add    eax,0x8
c0017e87:	8b 00                	mov    eax,DWORD PTR [eax]
c0017e89:	6a 00                	push   0x0
c0017e8b:	6a 00                	push   0x0
c0017e8d:	6a 00                	push   0x0
c0017e8f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017e93:	ff d0                	call   eax
c0017e95:	83 c4 10             	add    esp,0x10
c0017e98:	90                   	nop
c0017e99:	83 c4 28             	add    esp,0x28
c0017e9c:	5b                   	pop    ebx
c0017e9d:	c3                   	ret    

c0017e9e <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c0017e9e:	83 ec 1c             	sub    esp,0x1c
c0017ea1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017ea5:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c0017ea8:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0017eac:	a1 a8 d9 02 c0       	mov    eax,ds:0xc002d9a8
c0017eb1:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0017eb6:	83 ec 08             	sub    esp,0x8
c0017eb9:	52                   	push   edx
c0017eba:	50                   	push   eax
c0017ebb:	e8 f0 6c ff ff       	call   c000ebb0 <Computer::readCMOS(unsigned char)>
c0017ec0:	83 c4 10             	add    esp,0x10
c0017ec3:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c0017ec7:	a1 a8 d9 02 c0       	mov    eax,ds:0xc002d9a8
c0017ecc:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0017ed1:	83 ec 04             	sub    esp,0x4
c0017ed4:	6a 01                	push   0x1
c0017ed6:	52                   	push   edx
c0017ed7:	50                   	push   eax
c0017ed8:	e8 05 6e ff ff       	call   c000ece2 <Computer::writeCMOS(unsigned char, unsigned char)>
c0017edd:	83 c4 10             	add    esp,0x10
c0017ee0:	90                   	nop
c0017ee1:	83 c4 1c             	add    esp,0x1c
c0017ee4:	c3                   	ret    
c0017ee5:	90                   	nop

c0017ee6 <ACPI::sleep()>:
c0017ee6:	83 ec 0c             	sub    esp,0xc
c0017ee9:	a1 40 00 03 c0       	mov    eax,ds:0xc0030040
c0017eee:	85 c0                	test   eax,eax
c0017ef0:	74 07                	je     c0017ef9 <ACPI::sleep()+0x13>
c0017ef2:	a1 40 00 03 c0       	mov    eax,ds:0xc0030040
c0017ef7:	ff d0                	call   eax
c0017ef9:	90                   	nop
c0017efa:	83 c4 0c             	add    esp,0xc
c0017efd:	c3                   	ret    

c0017efe <ACPI::open(int, int, void*)>:
c0017efe:	57                   	push   edi
c0017eff:	56                   	push   esi
c0017f00:	53                   	push   ebx
c0017f01:	81 ec 60 01 00 00    	sub    esp,0x160
c0017f07:	83 ec 0c             	sub    esp,0xc
c0017f0a:	ff b4 24 7c 01 00 00 	push   DWORD PTR [esp+0x17c]
c0017f11:	e8 86 fd ff ff       	call   c0017c9c <ACPI::detectPCI()>
c0017f16:	83 c4 10             	add    esp,0x10
c0017f19:	83 ec 0c             	sub    esp,0xc
c0017f1c:	68 c0 b1 02 c0       	push   0xc002b1c0
c0017f21:	e8 cd 76 ff ff       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c0017f26:	83 c4 10             	add    esp,0x10
c0017f29:	83 ec 0c             	sub    esp,0xc
c0017f2c:	68 5b b2 02 c0       	push   0xc002b25b
c0017f31:	e8 52 46 00 00       	call   c001c588 <Thr::loadKernelSymbolTable(char const*)>
c0017f36:	83 c4 10             	add    esp,0x10
c0017f39:	83 ec 0c             	sub    esp,0xc
c0017f3c:	68 79 b2 02 c0       	push   0xc002b279
c0017f41:	e8 ad 76 ff ff       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c0017f46:	83 c4 10             	add    esp,0x10
c0017f49:	83 ec 04             	sub    esp,0x4
c0017f4c:	6a 0c                	push   0xc
c0017f4e:	68 94 b2 02 c0       	push   0xc002b294
c0017f53:	68 a5 b2 02 c0       	push   0xc002b2a5
c0017f58:	e8 94 2c 00 00       	call   c001abf1 <Reg::readIntWithDefault(char*, char*, int)>
c0017f5d:	83 c4 10             	add    esp,0x10
c0017f60:	89 84 24 5c 01 00 00 	mov    DWORD PTR [esp+0x15c],eax
c0017f67:	83 ec 0c             	sub    esp,0xc
c0017f6a:	ff b4 24 68 01 00 00 	push   DWORD PTR [esp+0x168]
c0017f71:	e8 b1 94 ff ff       	call   c0011427 <Virt::setupPageSwapping(int)>
c0017f76:	83 c4 10             	add    esp,0x10
c0017f79:	83 ec 0c             	sub    esp,0xc
c0017f7c:	68 15 9e 02 c0       	push   0xc0029e15
c0017f81:	e8 6d 76 ff ff       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c0017f86:	83 c4 10             	add    esp,0x10
c0017f89:	8b 1d a8 d9 02 c0    	mov    ebx,DWORD PTR ds:0xc002d9a8
c0017f8f:	83 ec 08             	sub    esp,0x8
c0017f92:	6a 01                	push   0x1
c0017f94:	68 ac b2 02 c0       	push   0xc002b2ac
c0017f99:	e8 61 50 00 00       	call   c001cfff <Thr::loadDLL(char const*, bool)>
c0017f9e:	83 c4 10             	add    esp,0x10
c0017fa1:	83 ec 08             	sub    esp,0x8
c0017fa4:	53                   	push   ebx
c0017fa5:	50                   	push   eax
c0017fa6:	e8 85 52 00 00       	call   c001d230 <Thr::executeDLL(unsigned long, void*)>
c0017fab:	83 c4 10             	add    esp,0x10
c0017fae:	8d 84 24 30 01 00 00 	lea    eax,[esp+0x130]
c0017fb5:	83 ec 08             	sub    esp,0x8
c0017fb8:	6a 12                	push   0x12
c0017fba:	50                   	push   eax
c0017fbb:	e8 c6 be ff ff       	call   c0013e86 <getDevicesOfType(DeviceType)>
c0017fc0:	83 c4 0c             	add    esp,0xc
c0017fc3:	83 ec 0c             	sub    esp,0xc
c0017fc6:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c0017fcd:	50                   	push   eax
c0017fce:	e8 91 09 01 00       	call   c0028964 <LinkedList<Device>::isEmpty()>
c0017fd3:	83 c4 10             	add    esp,0x10
c0017fd6:	83 f0 01             	xor    eax,0x1
c0017fd9:	84 c0                	test   al,al
c0017fdb:	0f 84 43 01 00 00    	je     c0018124 <ACPI::open(int, int, void*)+0x226>
c0017fe1:	83 ec 0c             	sub    esp,0xc
c0017fe4:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c0017feb:	50                   	push   eax
c0017fec:	e8 8f 09 01 00       	call   c0028980 <LinkedList<Device>::getFirstElement()>
c0017ff1:	83 c4 10             	add    esp,0x10
c0017ff4:	89 84 24 58 01 00 00 	mov    DWORD PTR [esp+0x158],eax
c0017ffb:	83 ec 0c             	sub    esp,0xc
c0017ffe:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c0018005:	50                   	push   eax
c0018006:	e8 7d 09 01 00       	call   c0028988 <LinkedList<Device>::removeFirst()>
c001800b:	83 c4 10             	add    esp,0x10
c001800e:	8b 84 24 58 01 00 00 	mov    eax,DWORD PTR [esp+0x158]
c0018015:	89 84 24 54 01 00 00 	mov    DWORD PTR [esp+0x154],eax
c001801c:	8b 94 24 54 01 00 00 	mov    edx,DWORD PTR [esp+0x154]
c0018023:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018027:	8d 9a 18 01 00 00    	lea    ebx,[edx+0x118]
c001802d:	ba 09 00 00 00       	mov    edx,0x9
c0018032:	fc                   	cld    
c0018033:	89 c7                	mov    edi,eax
c0018035:	89 de                	mov    esi,ebx
c0018037:	89 d1                	mov    ecx,edx
c0018039:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001803b:	83 ec 08             	sub    esp,0x8
c001803e:	8d 44 24 38          	lea    eax,[esp+0x38]
c0018042:	50                   	push   eax
c0018043:	83 ec 24             	sub    esp,0x24
c0018046:	89 e0                	mov    eax,esp
c0018048:	89 c3                	mov    ebx,eax
c001804a:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001804e:	ba 09 00 00 00       	mov    edx,0x9
c0018053:	89 df                	mov    edi,ebx
c0018055:	89 c6                	mov    esi,eax
c0018057:	89 d1                	mov    ecx,edx
c0018059:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001805b:	e8 dc a7 00 00       	call   c002283c <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>
c0018060:	83 c4 30             	add    esp,0x30
c0018063:	89 84 24 50 01 00 00 	mov    DWORD PTR [esp+0x150],eax
c001806a:	83 bc 24 50 01 00 00 00 	cmp    DWORD PTR [esp+0x150],0x0
c0018072:	0f 84 4b ff ff ff    	je     c0017fc3 <ACPI::open(int, int, void*)+0xc5>
c0018078:	c7 84 24 40 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x140],0x114
c0018083:	83 ec 0c             	sub    esp,0xc
c0018086:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001808d:	e8 07 75 ff ff       	call   c000f599 <malloc>
c0018092:	83 c4 10             	add    esp,0x10
c0018095:	89 c3                	mov    ebx,eax
c0018097:	a1 f0 0e 03 c0       	mov    eax,ds:0xc0030ef0
c001809c:	83 ec 04             	sub    esp,0x4
c001809f:	50                   	push   eax
c00180a0:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c00180a7:	53                   	push   ebx
c00180a8:	e8 7b ab ff ff       	call   c0012c28 <File::File(char const*, Process*)>
c00180ad:	83 c4 10             	add    esp,0x10
c00180b0:	89 9c 24 4c 01 00 00 	mov    DWORD PTR [esp+0x14c],ebx
c00180b7:	83 ec 0c             	sub    esp,0xc
c00180ba:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c00180c1:	e8 34 ae ff ff       	call   c0012efa <File::exists()>
c00180c6:	83 c4 10             	add    esp,0x10
c00180c9:	84 c0                	test   al,al
c00180cb:	74 27                	je     c00180f4 <ACPI::open(int, int, void*)+0x1f6>
c00180cd:	83 ec 08             	sub    esp,0x8
c00180d0:	6a 01                	push   0x1
c00180d2:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c00180d9:	e8 21 4f 00 00       	call   c001cfff <Thr::loadDLL(char const*, bool)>
c00180de:	83 c4 10             	add    esp,0x10
c00180e1:	83 ec 08             	sub    esp,0x8
c00180e4:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c00180eb:	50                   	push   eax
c00180ec:	e8 3f 51 00 00       	call   c001d230 <Thr::executeDLL(unsigned long, void*)>
c00180f1:	83 c4 10             	add    esp,0x10
c00180f4:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c00180fc:	0f 84 c1 fe ff ff    	je     c0017fc3 <ACPI::open(int, int, void*)+0xc5>
c0018102:	8b 84 24 4c 01 00 00 	mov    eax,DWORD PTR [esp+0x14c]
c0018109:	8b 00                	mov    eax,DWORD PTR [eax]
c001810b:	83 c0 08             	add    eax,0x8
c001810e:	8b 00                	mov    eax,DWORD PTR [eax]
c0018110:	83 ec 0c             	sub    esp,0xc
c0018113:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c001811a:	ff d0                	call   eax
c001811c:	83 c4 10             	add    esp,0x10
c001811f:	e9 9f fe ff ff       	jmp    c0017fc3 <ACPI::open(int, int, void*)+0xc5>
c0018124:	83 ec 0c             	sub    esp,0xc
c0018127:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c001812e:	50                   	push   eax
c001812f:	e8 2e 08 01 00       	call   c0028962 <LinkedList<Device>::~LinkedList()>
c0018134:	83 c4 10             	add    esp,0x10
c0018137:	8b 1d a8 d9 02 c0    	mov    ebx,DWORD PTR ds:0xc002d9a8
c001813d:	83 ec 08             	sub    esp,0x8
c0018140:	6a 01                	push   0x1
c0018142:	68 c7 b2 02 c0       	push   0xc002b2c7
c0018147:	e8 b3 4e 00 00       	call   c001cfff <Thr::loadDLL(char const*, bool)>
c001814c:	83 c4 10             	add    esp,0x10
c001814f:	83 ec 08             	sub    esp,0x8
c0018152:	53                   	push   ebx
c0018153:	50                   	push   eax
c0018154:	e8 d7 50 00 00       	call   c001d230 <Thr::executeDLL(unsigned long, void*)>
c0018159:	83 c4 10             	add    esp,0x10
c001815c:	8b 1d a8 d9 02 c0    	mov    ebx,DWORD PTR ds:0xc002d9a8
c0018162:	83 ec 08             	sub    esp,0x8
c0018165:	6a 01                	push   0x1
c0018167:	68 e4 b2 02 c0       	push   0xc002b2e4
c001816c:	e8 8e 4e 00 00       	call   c001cfff <Thr::loadDLL(char const*, bool)>
c0018171:	83 c4 10             	add    esp,0x10
c0018174:	83 ec 08             	sub    esp,0x8
c0018177:	53                   	push   ebx
c0018178:	50                   	push   eax
c0018179:	e8 b2 50 00 00       	call   c001d230 <Thr::executeDLL(unsigned long, void*)>
c001817e:	83 c4 10             	add    esp,0x10
c0018181:	a1 a8 d9 02 c0       	mov    eax,ds:0xc002d9a8
c0018186:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001818c:	83 e0 04             	and    eax,0x4
c001818f:	84 c0                	test   al,al
c0018191:	0f 84 0d 01 00 00    	je     c00182a4 <ACPI::open(int, int, void*)+0x3a6>
c0018197:	83 ec 0c             	sub    esp,0xc
c001819a:	68 01 b3 02 c0       	push   0xc002b301
c001819f:	e8 4f 74 ff ff       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c00181a4:	83 c4 10             	add    esp,0x10
c00181a7:	c7 84 24 3c 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x13c],0x114
c00181b2:	83 ec 0c             	sub    esp,0xc
c00181b5:	ff b4 24 48 01 00 00 	push   DWORD PTR [esp+0x148]
c00181bc:	e8 d8 73 ff ff       	call   c000f599 <malloc>
c00181c1:	83 c4 10             	add    esp,0x10
c00181c4:	89 c3                	mov    ebx,eax
c00181c6:	a1 f0 0e 03 c0       	mov    eax,ds:0xc0030ef0
c00181cb:	83 ec 04             	sub    esp,0x4
c00181ce:	50                   	push   eax
c00181cf:	68 1e b3 02 c0       	push   0xc002b31e
c00181d4:	53                   	push   ebx
c00181d5:	e8 4e aa ff ff       	call   c0012c28 <File::File(char const*, Process*)>
c00181da:	83 c4 10             	add    esp,0x10
c00181dd:	89 9c 24 48 01 00 00 	mov    DWORD PTR [esp+0x148],ebx
c00181e4:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c00181ec:	74 1a                	je     c0018208 <ACPI::open(int, int, void*)+0x30a>
c00181ee:	83 ec 0c             	sub    esp,0xc
c00181f1:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c00181f8:	e8 fd ac ff ff       	call   c0012efa <File::exists()>
c00181fd:	83 c4 10             	add    esp,0x10
c0018200:	84 c0                	test   al,al
c0018202:	74 04                	je     c0018208 <ACPI::open(int, int, void*)+0x30a>
c0018204:	b0 01                	mov    al,0x1
c0018206:	eb 02                	jmp    c001820a <ACPI::open(int, int, void*)+0x30c>
c0018208:	b0 00                	mov    al,0x0
c001820a:	84 c0                	test   al,al
c001820c:	74 25                	je     c0018233 <ACPI::open(int, int, void*)+0x335>
c001820e:	83 ec 08             	sub    esp,0x8
c0018211:	6a 01                	push   0x1
c0018213:	68 1e b3 02 c0       	push   0xc002b31e
c0018218:	e8 e2 4d 00 00       	call   c001cfff <Thr::loadDLL(char const*, bool)>
c001821d:	83 c4 10             	add    esp,0x10
c0018220:	83 ec 08             	sub    esp,0x8
c0018223:	ff b4 24 78 01 00 00 	push   DWORD PTR [esp+0x178]
c001822a:	50                   	push   eax
c001822b:	e8 00 50 00 00       	call   c001d230 <Thr::executeDLL(unsigned long, void*)>
c0018230:	83 c4 10             	add    esp,0x10
c0018233:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c001823b:	74 27                	je     c0018264 <ACPI::open(int, int, void*)+0x366>
c001823d:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c0018245:	74 1d                	je     c0018264 <ACPI::open(int, int, void*)+0x366>
c0018247:	8b 84 24 48 01 00 00 	mov    eax,DWORD PTR [esp+0x148]
c001824e:	8b 00                	mov    eax,DWORD PTR [eax]
c0018250:	83 c0 08             	add    eax,0x8
c0018253:	8b 00                	mov    eax,DWORD PTR [eax]
c0018255:	83 ec 0c             	sub    esp,0xc
c0018258:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c001825f:	ff d0                	call   eax
c0018261:	83 c4 10             	add    esp,0x10
c0018264:	a1 68 02 03 c0       	mov    eax,ds:0xc0030268
c0018269:	83 ec 08             	sub    esp,0x8
c001826c:	68 3b b3 02 c0       	push   0xc002b33b
c0018271:	50                   	push   eax
c0018272:	e8 43 f3 ff ff       	call   c00175ba <findDataTable(unsigned char*, char*)>
c0018277:	83 c4 10             	add    esp,0x10
c001827a:	89 84 24 44 01 00 00 	mov    DWORD PTR [esp+0x144],eax
c0018281:	83 bc 24 44 01 00 00 00 	cmp    DWORD PTR [esp+0x144],0x0
c0018289:	74 19                	je     c00182a4 <ACPI::open(int, int, void*)+0x3a6>
c001828b:	83 ec 08             	sub    esp,0x8
c001828e:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0018295:	ff b4 24 7c 01 00 00 	push   DWORD PTR [esp+0x17c]
c001829c:	e8 fd fb ff ff       	call   c0017e9e <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c00182a1:	83 c4 10             	add    esp,0x10
c00182a4:	b8 00 00 00 00       	mov    eax,0x0
c00182a9:	81 c4 60 01 00 00    	add    esp,0x160
c00182af:	5b                   	pop    ebx
c00182b0:	5e                   	pop    esi
c00182b1:	5f                   	pop    edi
c00182b2:	c3                   	ret    
c00182b3:	90                   	nop

c00182b4 <CPU::close(int, int, void*)>:
c00182b4:	31 c0                	xor    eax,eax
c00182b6:	c3                   	ret    
c00182b7:	90                   	nop

c00182b8 <CPU::lookupAMDName(unsigned char, unsigned char)>:
c00182b8:	55                   	push   ebp
c00182b9:	57                   	push   edi
c00182ba:	56                   	push   esi
c00182bb:	53                   	push   ebx
c00182bc:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00182c0:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00182c4:	89 ce                	mov    esi,ecx
c00182c6:	89 d5                	mov    ebp,edx
c00182c8:	80 f9 04             	cmp    cl,0x4
c00182cb:	75 28                	jne    c00182f5 <CPU::lookupAMDName(unsigned char, unsigned char)+0x3d>
c00182cd:	8d 42 f9             	lea    eax,[edx-0x7]
c00182d0:	3c 03                	cmp    al,0x3
c00182d2:	0f 86 63 01 00 00    	jbe    c001843b <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c00182d8:	80 fa 03             	cmp    dl,0x3
c00182db:	0f 84 5a 01 00 00    	je     c001843b <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c00182e1:	8d 7a f2             	lea    edi,[edx-0xe]
c00182e4:	b8 d0 cd 02 c0       	mov    eax,0xc002cdd0
c00182e9:	89 fb                	mov    ebx,edi
c00182eb:	80 fb 01             	cmp    bl,0x1
c00182ee:	77 4e                	ja     c001833e <CPU::lookupAMDName(unsigned char, unsigned char)+0x86>
c00182f0:	e9 52 01 00 00       	jmp    c0018447 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00182f5:	80 f9 05             	cmp    cl,0x5
c00182f8:	75 4d                	jne    c0018347 <CPU::lookupAMDName(unsigned char, unsigned char)+0x8f>
c00182fa:	b8 e0 cd 02 c0       	mov    eax,0xc002cde0
c00182ff:	80 fa 03             	cmp    dl,0x3
c0018302:	0f 86 3f 01 00 00    	jbe    c0018447 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018308:	8d 7a fa             	lea    edi,[edx-0x6]
c001830b:	b8 f0 cd 02 c0       	mov    eax,0xc002cdf0
c0018310:	89 fb                	mov    ebx,edi
c0018312:	80 fb 01             	cmp    bl,0x1
c0018315:	0f 86 2c 01 00 00    	jbe    c0018447 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001831b:	b8 00 ce 02 c0       	mov    eax,0xc002ce00
c0018320:	80 fa 08             	cmp    dl,0x8
c0018323:	0f 84 1e 01 00 00    	je     c0018447 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018329:	89 d7                	mov    edi,edx
c001832b:	b8 10 ce 02 c0       	mov    eax,0xc002ce10
c0018330:	83 e7 fb             	and    edi,0xfffffffb
c0018333:	89 fb                	mov    ebx,edi
c0018335:	80 fb 09             	cmp    bl,0x9
c0018338:	0f 84 09 01 00 00    	je     c0018447 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001833e:	31 c0                	xor    eax,eax
c0018340:	89 eb                	mov    ebx,ebp
c0018342:	0f b6 fb             	movzx  edi,bl
c0018345:	eb 30                	jmp    c0018377 <CPU::lookupAMDName(unsigned char, unsigned char)+0xbf>
c0018347:	31 c0                	xor    eax,eax
c0018349:	80 f9 06             	cmp    cl,0x6
c001834c:	75 f2                	jne    c0018340 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c001834e:	80 fa 0a             	cmp    dl,0xa
c0018351:	77 ed                	ja     c0018340 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0018353:	bf de 05 00 00       	mov    edi,0x5de
c0018358:	0f a3 d7             	bt     edi,edx
c001835b:	73 e3                	jae    c0018340 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c001835d:	b8 20 ce 02 c0       	mov    eax,0xc002ce20
c0018362:	e9 e0 00 00 00       	jmp    c0018447 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018367:	39 c7                	cmp    edi,eax
c0018369:	0f 84 d3 00 00 00    	je     c0018442 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c001836f:	40                   	inc    eax
c0018370:	3d d0 00 00 00       	cmp    eax,0xd0
c0018375:	74 09                	je     c0018380 <CPU::lookupAMDName(unsigned char, unsigned char)+0xc8>
c0018377:	89 f3                	mov    ebx,esi
c0018379:	80 fb 0f             	cmp    bl,0xf
c001837c:	75 f1                	jne    c001836f <CPU::lookupAMDName(unsigned char, unsigned char)+0xb7>
c001837e:	eb e7                	jmp    c0018367 <CPU::lookupAMDName(unsigned char, unsigned char)+0xaf>
c0018380:	80 f9 10             	cmp    cl,0x10
c0018383:	75 14                	jne    c0018399 <CPU::lookupAMDName(unsigned char, unsigned char)+0xe1>
c0018385:	8d 42 fc             	lea    eax,[edx-0x4]
c0018388:	83 e0 fb             	and    eax,0xfffffffb
c001838b:	3c 02                	cmp    al,0x2
c001838d:	76 34                	jbe    c00183c3 <CPU::lookupAMDName(unsigned char, unsigned char)+0x10b>
c001838f:	b8 c1 b4 02 c0       	mov    eax,0xc002b4c1
c0018394:	80 fa 02             	cmp    dl,0x2
c0018397:	eb 24                	jmp    c00183bd <CPU::lookupAMDName(unsigned char, unsigned char)+0x105>
c0018399:	80 f9 11             	cmp    cl,0x11
c001839c:	75 13                	jne    c00183b1 <CPU::lookupAMDName(unsigned char, unsigned char)+0xf9>
c001839e:	b8 c1 b4 02 c0       	mov    eax,0xc002b4c1
c00183a3:	80 fa 03             	cmp    dl,0x3
c00183a6:	0f 85 9b 00 00 00    	jne    c0018447 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00183ac:	e9 91 00 00 00       	jmp    c0018442 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c00183b1:	80 f9 12             	cmp    cl,0x12
c00183b4:	75 14                	jne    c00183ca <CPU::lookupAMDName(unsigned char, unsigned char)+0x112>
c00183b6:	b8 c1 b4 02 c0       	mov    eax,0xc002b4c1
c00183bb:	fe ca                	dec    dl
c00183bd:	0f 85 84 00 00 00    	jne    c0018447 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00183c3:	b8 40 ce 02 c0       	mov    eax,0xc002ce40
c00183c8:	eb 7d                	jmp    c0018447 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00183ca:	80 f9 14             	cmp    cl,0x14
c00183cd:	75 12                	jne    c00183e1 <CPU::lookupAMDName(unsigned char, unsigned char)+0x129>
c00183cf:	4a                   	dec    edx
c00183d0:	b8 c1 b4 02 c0       	mov    eax,0xc002b4c1
c00183d5:	80 fa 01             	cmp    dl,0x1
c00183d8:	77 6d                	ja     c0018447 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00183da:	b8 50 ce 02 c0       	mov    eax,0xc002ce50
c00183df:	eb 66                	jmp    c0018447 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00183e1:	80 f9 15             	cmp    cl,0x15
c00183e4:	75 31                	jne    c0018417 <CPU::lookupAMDName(unsigned char, unsigned char)+0x15f>
c00183e6:	b8 60 ce 02 c0       	mov    eax,0xc002ce60
c00183eb:	80 fa 01             	cmp    dl,0x1
c00183ee:	74 57                	je     c0018447 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00183f0:	b8 c1 b4 02 c0       	mov    eax,0xc002b4c1
c00183f5:	80 fa 13             	cmp    dl,0x13
c00183f8:	76 0c                	jbe    c0018406 <CPU::lookupAMDName(unsigned char, unsigned char)+0x14e>
c00183fa:	80 fa 30             	cmp    dl,0x30
c00183fd:	75 48                	jne    c0018447 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00183ff:	b8 80 ce 02 c0       	mov    eax,0xc002ce80
c0018404:	eb 41                	jmp    c0018447 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018406:	b9 04 00 09 00       	mov    ecx,0x90004
c001840b:	0f a3 d1             	bt     ecx,edx
c001840e:	73 37                	jae    c0018447 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018410:	b8 70 ce 02 c0       	mov    eax,0xc002ce70
c0018415:	eb 30                	jmp    c0018447 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018417:	b8 c1 b4 02 c0       	mov    eax,0xc002b4c1
c001841c:	80 f9 16             	cmp    cl,0x16
c001841f:	75 26                	jne    c0018447 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018421:	b8 90 ce 02 c0       	mov    eax,0xc002ce90
c0018426:	84 d2                	test   dl,dl
c0018428:	74 1d                	je     c0018447 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001842a:	b8 c1 b4 02 c0       	mov    eax,0xc002b4c1
c001842f:	80 fa 30             	cmp    dl,0x30
c0018432:	75 13                	jne    c0018447 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018434:	b8 a0 ce 02 c0       	mov    eax,0xc002cea0
c0018439:	eb 0c                	jmp    c0018447 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001843b:	b8 c0 cd 02 c0       	mov    eax,0xc002cdc0
c0018440:	eb 05                	jmp    c0018447 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018442:	b8 30 ce 02 c0       	mov    eax,0xc002ce30
c0018447:	5b                   	pop    ebx
c0018448:	5e                   	pop    esi
c0018449:	5f                   	pop    edi
c001844a:	5d                   	pop    ebp
c001844b:	c3                   	ret    

c001844c <CPU::lookupIntelName(unsigned char, unsigned char)>:
c001844c:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0018450:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018454:	80 f9 04             	cmp    cl,0x4
c0018457:	75 6b                	jne    c00184c4 <CPU::lookupIntelName(unsigned char, unsigned char)+0x78>
c0018459:	b8 20 cc 02 c0       	mov    eax,0xc002cc20
c001845e:	80 fa 01             	cmp    dl,0x1
c0018461:	0f 86 92 02 00 00    	jbe    c00186f9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018467:	b8 30 cc 02 c0       	mov    eax,0xc002cc30
c001846c:	80 fa 02             	cmp    dl,0x2
c001846f:	0f 84 84 02 00 00    	je     c00186f9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018475:	b8 40 cc 02 c0       	mov    eax,0xc002cc40
c001847a:	80 fa 03             	cmp    dl,0x3
c001847d:	0f 84 76 02 00 00    	je     c00186f9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018483:	b8 50 cc 02 c0       	mov    eax,0xc002cc50
c0018488:	80 fa 04             	cmp    dl,0x4
c001848b:	0f 84 68 02 00 00    	je     c00186f9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018491:	b8 60 cc 02 c0       	mov    eax,0xc002cc60
c0018496:	80 fa 05             	cmp    dl,0x5
c0018499:	0f 84 5a 02 00 00    	je     c00186f9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001849f:	b8 40 cc 02 c0       	mov    eax,0xc002cc40
c00184a4:	80 fa 07             	cmp    dl,0x7
c00184a7:	0f 84 4c 02 00 00    	je     c00186f9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00184ad:	83 ea 08             	sub    edx,0x8
c00184b0:	b8 c1 b4 02 c0       	mov    eax,0xc002b4c1
c00184b5:	80 fa 01             	cmp    dl,0x1
c00184b8:	0f 87 3b 02 00 00    	ja     c00186f9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00184be:	b8 70 cc 02 c0       	mov    eax,0xc002cc70
c00184c3:	c3                   	ret    
c00184c4:	80 f9 05             	cmp    cl,0x5
c00184c7:	75 45                	jne    c001850e <CPU::lookupIntelName(unsigned char, unsigned char)+0xc2>
c00184c9:	8d 4a ff             	lea    ecx,[edx-0x1]
c00184cc:	b8 80 cc 02 c0       	mov    eax,0xc002cc80
c00184d1:	80 f9 02             	cmp    cl,0x2
c00184d4:	0f 86 1f 02 00 00    	jbe    c00186f9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00184da:	80 fa 04             	cmp    dl,0x4
c00184dd:	0f 84 f3 01 00 00    	je     c00186d6 <CPU::lookupIntelName(unsigned char, unsigned char)+0x28a>
c00184e3:	80 fa 07             	cmp    dl,0x7
c00184e6:	0f 84 0d 02 00 00    	je     c00186f9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00184ec:	b8 90 cc 02 c0       	mov    eax,0xc002cc90
c00184f1:	80 fa 08             	cmp    dl,0x8
c00184f4:	0f 84 ff 01 00 00    	je     c00186f9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00184fa:	b8 c1 b4 02 c0       	mov    eax,0xc002b4c1
c00184ff:	80 fa 09             	cmp    dl,0x9
c0018502:	0f 85 f1 01 00 00    	jne    c00186f9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018508:	b8 a0 cc 02 c0       	mov    eax,0xc002cca0
c001850d:	c3                   	ret    
c001850e:	80 f9 06             	cmp    cl,0x6
c0018511:	0f 85 85 01 00 00    	jne    c001869c <CPU::lookupIntelName(unsigned char, unsigned char)+0x250>
c0018517:	b8 b0 cc 02 c0       	mov    eax,0xc002ccb0
c001851c:	80 fa 01             	cmp    dl,0x1
c001851f:	0f 84 d4 01 00 00    	je     c00186f9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018525:	8d 42 fb             	lea    eax,[edx-0x5]
c0018528:	3c 01                	cmp    al,0x1
c001852a:	0f 86 ac 01 00 00    	jbe    c00186dc <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c0018530:	80 fa 03             	cmp    dl,0x3
c0018533:	0f 84 a3 01 00 00    	je     c00186dc <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c0018539:	8d 4a f9             	lea    ecx,[edx-0x7]
c001853c:	b8 d0 cc 02 c0       	mov    eax,0xc002ccd0
c0018541:	80 f9 01             	cmp    cl,0x1
c0018544:	0f 86 af 01 00 00    	jbe    c00186f9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001854a:	80 fa 09             	cmp    dl,0x9
c001854d:	0f 84 8f 01 00 00    	je     c00186e2 <CPU::lookupIntelName(unsigned char, unsigned char)+0x296>
c0018553:	8d 4a f6             	lea    ecx,[edx-0xa]
c0018556:	80 f9 01             	cmp    cl,0x1
c0018559:	0f 86 9a 01 00 00    	jbe    c00186f9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001855f:	b8 e0 cc 02 c0       	mov    eax,0xc002cce0
c0018564:	80 fa 0d             	cmp    dl,0xd
c0018567:	0f 84 8c 01 00 00    	je     c00186f9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001856d:	b8 f0 cc 02 c0       	mov    eax,0xc002ccf0
c0018572:	80 fa 0e             	cmp    dl,0xe
c0018575:	0f 84 7e 01 00 00    	je     c00186f9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001857b:	b8 00 cd 02 c0       	mov    eax,0xc002cd00
c0018580:	80 fa 0f             	cmp    dl,0xf
c0018583:	0f 84 70 01 00 00    	je     c00186f9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018589:	b8 e0 cc 02 c0       	mov    eax,0xc002cce0
c001858e:	80 fa 15             	cmp    dl,0x15
c0018591:	0f 84 62 01 00 00    	je     c00186f9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018597:	8d 4a ea             	lea    ecx,[edx-0x16]
c001859a:	b8 00 cd 02 c0       	mov    eax,0xc002cd00
c001859f:	80 f9 01             	cmp    cl,0x1
c00185a2:	0f 86 51 01 00 00    	jbe    c00186f9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00185a8:	80 fa 1a             	cmp    dl,0x1a
c00185ab:	0f 84 37 01 00 00    	je     c00186e8 <CPU::lookupIntelName(unsigned char, unsigned char)+0x29c>
c00185b1:	80 fa 1c             	cmp    dl,0x1c
c00185b4:	0f 84 34 01 00 00    	je     c00186ee <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a2>
c00185ba:	80 fa 1d             	cmp    dl,0x1d
c00185bd:	0f 84 36 01 00 00    	je     c00186f9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00185c3:	b8 30 cd 02 c0       	mov    eax,0xc002cd30
c00185c8:	80 fa 25             	cmp    dl,0x25
c00185cb:	0f 84 28 01 00 00    	je     c00186f9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00185d1:	8d 4a da             	lea    ecx,[edx-0x26]
c00185d4:	b8 20 cd 02 c0       	mov    eax,0xc002cd20
c00185d9:	80 f9 01             	cmp    cl,0x1
c00185dc:	0f 86 17 01 00 00    	jbe    c00186f9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00185e2:	b8 40 cd 02 c0       	mov    eax,0xc002cd40
c00185e7:	80 fa 2a             	cmp    dl,0x2a
c00185ea:	0f 84 09 01 00 00    	je     c00186f9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00185f0:	b8 30 cd 02 c0       	mov    eax,0xc002cd30
c00185f5:	80 fa 2c             	cmp    dl,0x2c
c00185f8:	0f 84 fb 00 00 00    	je     c00186f9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00185fe:	b8 40 cd 02 c0       	mov    eax,0xc002cd40
c0018603:	80 fa 2d             	cmp    dl,0x2d
c0018606:	0f 84 ed 00 00 00    	je     c00186f9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001860c:	b8 10 cd 02 c0       	mov    eax,0xc002cd10
c0018611:	80 fa 2e             	cmp    dl,0x2e
c0018614:	0f 84 df 00 00 00    	je     c00186f9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001861a:	b8 30 cd 02 c0       	mov    eax,0xc002cd30
c001861f:	80 fa 2f             	cmp    dl,0x2f
c0018622:	0f 84 d1 00 00 00    	je     c00186f9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018628:	8d 4a cb             	lea    ecx,[edx-0x35]
c001862b:	b8 20 cd 02 c0       	mov    eax,0xc002cd20
c0018630:	80 f9 01             	cmp    cl,0x1
c0018633:	0f 86 c0 00 00 00    	jbe    c00186f9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018639:	b8 50 cd 02 c0       	mov    eax,0xc002cd50
c001863e:	80 fa 37             	cmp    dl,0x37
c0018641:	0f 84 b2 00 00 00    	je     c00186f9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018647:	b8 60 cd 02 c0       	mov    eax,0xc002cd60
c001864c:	80 fa 3a             	cmp    dl,0x3a
c001864f:	0f 84 a4 00 00 00    	je     c00186f9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018655:	b8 70 cd 02 c0       	mov    eax,0xc002cd70
c001865a:	80 fa 3c             	cmp    dl,0x3c
c001865d:	0f 84 96 00 00 00    	je     c00186f9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018663:	b8 80 cd 02 c0       	mov    eax,0xc002cd80
c0018668:	80 fa 3d             	cmp    dl,0x3d
c001866b:	0f 84 88 00 00 00    	je     c00186f9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018671:	b8 60 cd 02 c0       	mov    eax,0xc002cd60
c0018676:	80 fa 3e             	cmp    dl,0x3e
c0018679:	74 7e                	je     c00186f9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001867b:	8d 42 bb             	lea    eax,[edx-0x45]
c001867e:	3c 01                	cmp    al,0x1
c0018680:	76 72                	jbe    c00186f4 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c0018682:	80 fa 3f             	cmp    dl,0x3f
c0018685:	74 6d                	je     c00186f4 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c0018687:	80 fa 4a             	cmp    dl,0x4a
c001868a:	74 0a                	je     c0018696 <CPU::lookupIntelName(unsigned char, unsigned char)+0x24a>
c001868c:	b8 c1 b4 02 c0       	mov    eax,0xc002b4c1
c0018691:	80 fa 4d             	cmp    dl,0x4d
c0018694:	75 63                	jne    c00186f9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018696:	b8 50 cd 02 c0       	mov    eax,0xc002cd50
c001869b:	c3                   	ret    
c001869c:	b8 c1 b4 02 c0       	mov    eax,0xc002b4c1
c00186a1:	80 f9 0b             	cmp    cl,0xb
c00186a4:	75 0a                	jne    c00186b0 <CPU::lookupIntelName(unsigned char, unsigned char)+0x264>
c00186a6:	fe ca                	dec    dl
c00186a8:	75 4f                	jne    c00186f9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00186aa:	b8 90 cd 02 c0       	mov    eax,0xc002cd90
c00186af:	c3                   	ret    
c00186b0:	80 f9 0f             	cmp    cl,0xf
c00186b3:	75 44                	jne    c00186f9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00186b5:	b8 a0 cd 02 c0       	mov    eax,0xc002cda0
c00186ba:	80 fa 02             	cmp    dl,0x2
c00186bd:	76 3a                	jbe    c00186f9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00186bf:	8d 42 fd             	lea    eax,[edx-0x3]
c00186c2:	3c 01                	cmp    al,0x1
c00186c4:	76 0a                	jbe    c00186d0 <CPU::lookupIntelName(unsigned char, unsigned char)+0x284>
c00186c6:	b8 c1 b4 02 c0       	mov    eax,0xc002b4c1
c00186cb:	80 fa 06             	cmp    dl,0x6
c00186ce:	75 29                	jne    c00186f9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00186d0:	b8 b0 cd 02 c0       	mov    eax,0xc002cdb0
c00186d5:	c3                   	ret    
c00186d6:	b8 90 cc 02 c0       	mov    eax,0xc002cc90
c00186db:	c3                   	ret    
c00186dc:	b8 c0 cc 02 c0       	mov    eax,0xc002ccc0
c00186e1:	c3                   	ret    
c00186e2:	b8 e0 cc 02 c0       	mov    eax,0xc002cce0
c00186e7:	c3                   	ret    
c00186e8:	b8 10 cd 02 c0       	mov    eax,0xc002cd10
c00186ed:	c3                   	ret    
c00186ee:	b8 20 cd 02 c0       	mov    eax,0xc002cd20
c00186f3:	c3                   	ret    
c00186f4:	b8 70 cd 02 c0       	mov    eax,0xc002cd70
c00186f9:	c3                   	ret    

c00186fa <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c00186fa:	60                   	pusha  
c00186fb:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00186ff:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018703:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018707:	9c                   	pushf  
c0018708:	fa                   	cli    
c0018709:	0f 09                	wbinvd 
c001870b:	0f 30                	wrmsr  
c001870d:	9d                   	popf   
c001870e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018712:	89 02                	mov    DWORD PTR [edx],eax
c0018714:	61                   	popa   
c0018715:	c3                   	ret    

c0018716 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c0018716:	60                   	pusha  
c0018717:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001871b:	9c                   	pushf  
c001871c:	fa                   	cli    
c001871d:	0f 09                	wbinvd 
c001871f:	31 c0                	xor    eax,eax
c0018721:	31 d2                	xor    edx,edx
c0018723:	0f 32                	rdmsr  
c0018725:	9d                   	popf   
c0018726:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001872a:	89 02                	mov    DWORD PTR [edx],eax
c001872c:	61                   	popa   
c001872d:	c3                   	ret    

c001872e <CPU::AMD_K6_writeback(int, int, int)>:
c001872e:	56                   	push   esi
c001872f:	53                   	push   ebx
c0018730:	83 ec 10             	sub    esp,0x10
c0018733:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018737:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c001873c:	75 5d                	jne    c001879b <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c001873e:	83 f8 08             	cmp    eax,0x8
c0018741:	75 09                	jne    c001874c <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c0018743:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c0018748:	7e 13                	jle    c001875d <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c001874a:	eb 30                	jmp    c001877c <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c001874c:	83 f8 06             	cmp    eax,0x6
c001874f:	7c 4a                	jl     c001879b <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0018751:	83 f8 07             	cmp    eax,0x7
c0018754:	7e 07                	jle    c001875d <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0018756:	83 f8 09             	cmp    eax,0x9
c0018759:	74 21                	je     c001877c <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c001875b:	eb 3e                	jmp    c001879b <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c001875d:	89 e6                	mov    esi,esp
c001875f:	8b 1d e8 d9 02 c0    	mov    ebx,DWORD PTR ds:0xc002d9e8
c0018765:	56                   	push   esi
c0018766:	c1 eb 15             	shr    ebx,0x15
c0018769:	68 82 00 00 c0       	push   0xc0000082
c001876e:	83 e3 7e             	and    ebx,0x7e
c0018771:	e8 a0 ff ff ff       	call   c0018716 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0018776:	56                   	push   esi
c0018777:	6a 00                	push   0x0
c0018779:	53                   	push   ebx
c001877a:	eb 12                	jmp    c001878e <CPU::AMD_K6_writeback(int, int, int)+0x60>
c001877c:	89 e3                	mov    ebx,esp
c001877e:	53                   	push   ebx
c001877f:	68 82 00 00 c0       	push   0xc0000082
c0018784:	e8 8d ff ff ff       	call   c0018716 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0018789:	53                   	push   ebx
c001878a:	6a 00                	push   0x0
c001878c:	6a 00                	push   0x0
c001878e:	68 82 00 00 c0       	push   0xc0000082
c0018793:	e8 62 ff ff ff       	call   c00186fa <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c0018798:	83 c4 18             	add    esp,0x18
c001879b:	83 c4 10             	add    esp,0x10
c001879e:	5b                   	pop    ebx
c001879f:	5e                   	pop    esi
c00187a0:	c3                   	ret    
c00187a1:	90                   	nop

c00187a2 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c00187a2:	55                   	push   ebp
c00187a3:	57                   	push   edi
c00187a4:	56                   	push   esi
c00187a5:	53                   	push   ebx
c00187a6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00187aa:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00187ae:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00187b2:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00187b6:	39 05 c0 ce 02 c0    	cmp    DWORD PTR ds:0xc002cec0,eax
c00187bc:	75 23                	jne    c00187e1 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c00187be:	a1 cc 04 03 c0       	mov    eax,ds:0xc00304cc
c00187c3:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00187c7:	89 06                	mov    DWORD PTR [esi],eax
c00187c9:	a1 c8 04 03 c0       	mov    eax,ds:0xc00304c8
c00187ce:	89 07                	mov    DWORD PTR [edi],eax
c00187d0:	a1 c4 04 03 c0       	mov    eax,ds:0xc00304c4
c00187d5:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c00187d8:	a1 c0 04 03 c0       	mov    eax,ds:0xc00304c0
c00187dd:	89 02                	mov    DWORD PTR [edx],eax
c00187df:	eb 3f                	jmp    c0018820 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c00187e1:	31 c9                	xor    ecx,ecx
c00187e3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00187e7:	0f a2                	cpuid  
c00187e9:	89 06                	mov    DWORD PTR [esi],eax
c00187eb:	89 1f                	mov    DWORD PTR [edi],ebx
c00187ed:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00187f1:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c00187f4:	89 10                	mov    DWORD PTR [eax],edx
c00187f6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00187fa:	a3 c0 ce 02 c0       	mov    ds:0xc002cec0,eax
c00187ff:	8b 06                	mov    eax,DWORD PTR [esi]
c0018801:	a3 cc 04 03 c0       	mov    ds:0xc00304cc,eax
c0018806:	8b 07                	mov    eax,DWORD PTR [edi]
c0018808:	a3 c8 04 03 c0       	mov    ds:0xc00304c8,eax
c001880d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0018810:	a3 c4 04 03 c0       	mov    ds:0xc00304c4,eax
c0018815:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018819:	8b 00                	mov    eax,DWORD PTR [eax]
c001881b:	a3 c0 04 03 c0       	mov    ds:0xc00304c0,eax
c0018820:	5b                   	pop    ebx
c0018821:	5e                   	pop    esi
c0018822:	5f                   	pop    edi
c0018823:	5d                   	pop    ebp
c0018824:	c3                   	ret    
c0018825:	90                   	nop

c0018826 <CPU::cpuidCheckEDX(unsigned int)>:
c0018826:	83 ec 10             	sub    esp,0x10
c0018829:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001882d:	50                   	push   eax
c001882e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018832:	50                   	push   eax
c0018833:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018837:	50                   	push   eax
c0018838:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001883c:	50                   	push   eax
c001883d:	6a 01                	push   0x1
c001883f:	e8 5e ff ff ff       	call   c00187a2 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018844:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018848:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c001884c:	0f 95 c0             	setne  al
c001884f:	83 c4 24             	add    esp,0x24
c0018852:	c3                   	ret    
c0018853:	90                   	nop

c0018854 <CPU::cpuidCheckECX(unsigned int)>:
c0018854:	83 ec 10             	sub    esp,0x10
c0018857:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001885b:	50                   	push   eax
c001885c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018860:	50                   	push   eax
c0018861:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018865:	50                   	push   eax
c0018866:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001886a:	50                   	push   eax
c001886b:	6a 01                	push   0x1
c001886d:	e8 30 ff ff ff       	call   c00187a2 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018872:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018876:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c001887a:	0f 95 c0             	setne  al
c001887d:	83 c4 24             	add    esp,0x24
c0018880:	c3                   	ret    
c0018881:	90                   	nop

c0018882 <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c0018882:	83 ec 10             	sub    esp,0x10
c0018885:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018889:	50                   	push   eax
c001888a:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001888e:	50                   	push   eax
c001888f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018893:	50                   	push   eax
c0018894:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018898:	50                   	push   eax
c0018899:	6a 07                	push   0x7
c001889b:	e8 02 ff ff ff       	call   c00187a2 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00188a0:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00188a4:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c00188a8:	0f 95 c0             	setne  al
c00188ab:	83 c4 24             	add    esp,0x24
c00188ae:	c3                   	ret    
c00188af:	90                   	nop

c00188b0 <CPU::cpuidCheckExtendedECX(unsigned int)>:
c00188b0:	83 ec 10             	sub    esp,0x10
c00188b3:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00188b7:	50                   	push   eax
c00188b8:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00188bc:	50                   	push   eax
c00188bd:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00188c1:	50                   	push   eax
c00188c2:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00188c6:	50                   	push   eax
c00188c7:	6a 07                	push   0x7
c00188c9:	e8 d4 fe ff ff       	call   c00187a2 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00188ce:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00188d2:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c00188d6:	0f 95 c0             	setne  al
c00188d9:	83 c4 24             	add    esp,0x24
c00188dc:	c3                   	ret    
c00188dd:	90                   	nop

c00188de <CPU::CPU()>:
c00188de:	83 ec 0c             	sub    esp,0xc
c00188e1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00188e5:	83 ec 08             	sub    esp,0x8
c00188e8:	68 c1 b4 02 c0       	push   0xc002b4c1
c00188ed:	50                   	push   eax
c00188ee:	e8 13 b4 ff ff       	call   c0013d06 <Device::Device(char const*)>
c00188f3:	83 c4 10             	add    esp,0x10
c00188f6:	ba 98 b5 02 c0       	mov    edx,0xc002b598
c00188fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00188ff:	89 10                	mov    DWORD PTR [eax],edx
c0018901:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018905:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c001890f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018913:	05 78 01 00 00       	add    eax,0x178
c0018918:	83 ec 0c             	sub    esp,0xc
c001891b:	50                   	push   eax
c001891c:	e8 ab 64 ff ff       	call   c000edcc <GDT::GDT()>
c0018921:	83 c4 10             	add    esp,0x10
c0018924:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018928:	05 7c 09 00 00       	add    eax,0x97c
c001892d:	83 ec 0c             	sub    esp,0xc
c0018930:	50                   	push   eax
c0018931:	e8 e6 66 ff ff       	call   c000f01c <IDT::IDT()>
c0018936:	83 c4 10             	add    esp,0x10
c0018939:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001893d:	05 7c 11 00 00       	add    eax,0x117c
c0018942:	83 ec 0c             	sub    esp,0xc
c0018945:	50                   	push   eax
c0018946:	e8 19 82 ff ff       	call   c0010b64 <TSS::TSS()>
c001894b:	83 c4 10             	add    esp,0x10
c001894e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018952:	c6 80 94 11 00 00 00 	mov    BYTE PTR [eax+0x1194],0x0
c0018959:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001895d:	c7 80 10 01 00 00 10 00 00 00 	mov    DWORD PTR [eax+0x110],0x10
c0018967:	90                   	nop
c0018968:	83 c4 0c             	add    esp,0xc
c001896b:	c3                   	ret    

c001896c <CPU::displayFeatures()>:
c001896c:	c3                   	ret    
c001896d:	90                   	nop

c001896e <CPU::detectFeatures()>:
c001896e:	55                   	push   ebp
c001896f:	57                   	push   edi
c0018970:	56                   	push   esi
c0018971:	53                   	push   ebx
c0018972:	83 ec 50             	sub    esp,0x50
c0018975:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c0018979:	81 a3 90 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x1190],0xfff80700
c0018983:	c6 83 94 11 00 00 01 	mov    BYTE PTR [ebx+0x1194],0x1
c001898a:	8d ab 5f 01 00 00    	lea    ebp,[ebx+0x15f]
c0018990:	6a 0d                	push   0xd
c0018992:	6a 00                	push   0x0
c0018994:	55                   	push   ebp
c0018995:	e8 b6 7d fe ff       	call   c0000750 <memset>
c001899a:	83 c4 10             	add    esp,0x10
c001899d:	a1 a8 d9 02 c0       	mov    eax,ds:0xc002d9a8
c00189a2:	f6 80 e8 01 00 00 02 	test   BYTE PTR [eax+0x1e8],0x2
c00189a9:	0f 84 22 09 00 00    	je     c00192d1 <CPU::detectFeatures()+0x963>
c00189af:	83 ec 0c             	sub    esp,0xc
c00189b2:	89 ef                	mov    edi,ebp
c00189b4:	6a 10                	push   0x10
c00189b6:	e8 6b fe ff ff       	call   c0018826 <CPU::cpuidCheckEDX(unsigned int)>
c00189bb:	83 e0 01             	and    eax,0x1
c00189be:	8d 14 00             	lea    edx,[eax+eax*1]
c00189c1:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00189c7:	83 e0 fd             	and    eax,0xfffffffd
c00189ca:	09 d0                	or     eax,edx
c00189cc:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00189d2:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c00189d9:	e8 48 fe ff ff       	call   c0018826 <CPU::cpuidCheckEDX(unsigned int)>
c00189de:	83 e0 01             	and    eax,0x1
c00189e1:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00189e8:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00189ee:	83 e0 fb             	and    eax,0xfffffffb
c00189f1:	09 d0                	or     eax,edx
c00189f3:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00189f9:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0018a00:	e8 21 fe ff ff       	call   c0018826 <CPU::cpuidCheckEDX(unsigned int)>
c0018a05:	83 e0 01             	and    eax,0x1
c0018a08:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0018a0f:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018a15:	83 e0 f7             	and    eax,0xfffffff7
c0018a18:	09 d0                	or     eax,edx
c0018a1a:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018a20:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c0018a27:	e8 fa fd ff ff       	call   c0018826 <CPU::cpuidCheckEDX(unsigned int)>
c0018a2c:	83 e0 01             	and    eax,0x1
c0018a2f:	c1 e0 04             	shl    eax,0x4
c0018a32:	88 c2                	mov    dl,al
c0018a34:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018a3a:	83 e0 ef             	and    eax,0xffffffef
c0018a3d:	09 d0                	or     eax,edx
c0018a3f:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018a45:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c0018a4c:	e8 d5 fd ff ff       	call   c0018826 <CPU::cpuidCheckEDX(unsigned int)>
c0018a51:	83 e0 01             	and    eax,0x1
c0018a54:	c1 e0 05             	shl    eax,0x5
c0018a57:	88 c2                	mov    dl,al
c0018a59:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018a5f:	83 e0 df             	and    eax,0xffffffdf
c0018a62:	09 d0                	or     eax,edx
c0018a64:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018a6a:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0018a71:	e8 b0 fd ff ff       	call   c0018826 <CPU::cpuidCheckEDX(unsigned int)>
c0018a76:	83 e0 01             	and    eax,0x1
c0018a79:	8d 14 00             	lea    edx,[eax+eax*1]
c0018a7c:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0018a82:	83 e0 fd             	and    eax,0xfffffffd
c0018a85:	09 d0                	or     eax,edx
c0018a87:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0018a8d:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c0018a94:	e8 8d fd ff ff       	call   c0018826 <CPU::cpuidCheckEDX(unsigned int)>
c0018a99:	83 e0 01             	and    eax,0x1
c0018a9c:	c1 e0 06             	shl    eax,0x6
c0018a9f:	88 c2                	mov    dl,al
c0018aa1:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0018aa7:	83 e0 bf             	and    eax,0xffffffbf
c0018aaa:	09 d0                	or     eax,edx
c0018aac:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0018ab2:	58                   	pop    eax
c0018ab3:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018ab7:	50                   	push   eax
c0018ab8:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018abc:	50                   	push   eax
c0018abd:	8d 74 24 28          	lea    esi,[esp+0x28]
c0018ac1:	56                   	push   esi
c0018ac2:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018ac6:	50                   	push   eax
c0018ac7:	6a 00                	push   0x0
c0018ac9:	e8 d4 fc ff ff       	call   c00187a2 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018ace:	b8 04 00 00 00       	mov    eax,0x4
c0018ad3:	89 c1                	mov    ecx,eax
c0018ad5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0018ad7:	8d bb 63 01 00 00    	lea    edi,[ebx+0x163]
c0018add:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c0018ae1:	89 c1                	mov    ecx,eax
c0018ae3:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0018ae5:	8d bb 67 01 00 00    	lea    edi,[ebx+0x167]
c0018aeb:	8d 74 24 38          	lea    esi,[esp+0x38]
c0018aef:	89 c1                	mov    ecx,eax
c0018af1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0018af3:	83 c4 18             	add    esp,0x18
c0018af6:	68 6c b3 02 c0       	push   0xc002b36c
c0018afb:	55                   	push   ebp
c0018afc:	e8 97 7d fe ff       	call   c0000898 <strcmp>
c0018b01:	83 c4 10             	add    esp,0x10
c0018b04:	85 c0                	test   eax,eax
c0018b06:	75 0f                	jne    c0018b17 <CPU::detectFeatures()+0x1a9>
c0018b08:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c0018b12:	e9 22 02 00 00       	jmp    c0018d39 <CPU::detectFeatures()+0x3cb>
c0018b17:	50                   	push   eax
c0018b18:	50                   	push   eax
c0018b19:	68 79 b3 02 c0       	push   0xc002b379
c0018b1e:	55                   	push   ebp
c0018b1f:	e8 74 7d fe ff       	call   c0000898 <strcmp>
c0018b24:	83 c4 10             	add    esp,0x10
c0018b27:	85 c0                	test   eax,eax
c0018b29:	74 dd                	je     c0018b08 <CPU::detectFeatures()+0x19a>
c0018b2b:	50                   	push   eax
c0018b2c:	50                   	push   eax
c0018b2d:	68 86 b3 02 c0       	push   0xc002b386
c0018b32:	55                   	push   ebp
c0018b33:	e8 60 7d fe ff       	call   c0000898 <strcmp>
c0018b38:	83 c4 10             	add    esp,0x10
c0018b3b:	85 c0                	test   eax,eax
c0018b3d:	74 2a                	je     c0018b69 <CPU::detectFeatures()+0x1fb>
c0018b3f:	50                   	push   eax
c0018b40:	50                   	push   eax
c0018b41:	68 93 b3 02 c0       	push   0xc002b393
c0018b46:	55                   	push   ebp
c0018b47:	e8 4c 7d fe ff       	call   c0000898 <strcmp>
c0018b4c:	83 c4 10             	add    esp,0x10
c0018b4f:	85 c0                	test   eax,eax
c0018b51:	74 16                	je     c0018b69 <CPU::detectFeatures()+0x1fb>
c0018b53:	50                   	push   eax
c0018b54:	50                   	push   eax
c0018b55:	68 a0 b3 02 c0       	push   0xc002b3a0
c0018b5a:	55                   	push   ebp
c0018b5b:	e8 38 7d fe ff       	call   c0000898 <strcmp>
c0018b60:	83 c4 10             	add    esp,0x10
c0018b63:	85 c0                	test   eax,eax
c0018b65:	74 48                	je     c0018baf <CPU::detectFeatures()+0x241>
c0018b67:	eb 0f                	jmp    c0018b78 <CPU::detectFeatures()+0x20a>
c0018b69:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c0018b73:	e9 c1 01 00 00       	jmp    c0018d39 <CPU::detectFeatures()+0x3cb>
c0018b78:	50                   	push   eax
c0018b79:	50                   	push   eax
c0018b7a:	68 ad b3 02 c0       	push   0xc002b3ad
c0018b7f:	55                   	push   ebp
c0018b80:	e8 13 7d fe ff       	call   c0000898 <strcmp>
c0018b85:	83 c4 10             	add    esp,0x10
c0018b88:	85 c0                	test   eax,eax
c0018b8a:	74 23                	je     c0018baf <CPU::detectFeatures()+0x241>
c0018b8c:	57                   	push   edi
c0018b8d:	57                   	push   edi
c0018b8e:	68 ba b3 02 c0       	push   0xc002b3ba
c0018b93:	55                   	push   ebp
c0018b94:	e8 ff 7c fe ff       	call   c0000898 <strcmp>
c0018b99:	83 c4 10             	add    esp,0x10
c0018b9c:	85 c0                	test   eax,eax
c0018b9e:	75 1e                	jne    c0018bbe <CPU::detectFeatures()+0x250>
c0018ba0:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0018baa:	e9 8a 01 00 00       	jmp    c0018d39 <CPU::detectFeatures()+0x3cb>
c0018baf:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c0018bb9:	e9 7b 01 00 00       	jmp    c0018d39 <CPU::detectFeatures()+0x3cb>
c0018bbe:	56                   	push   esi
c0018bbf:	56                   	push   esi
c0018bc0:	68 c7 b3 02 c0       	push   0xc002b3c7
c0018bc5:	55                   	push   ebp
c0018bc6:	e8 cd 7c fe ff       	call   c0000898 <strcmp>
c0018bcb:	83 c4 10             	add    esp,0x10
c0018bce:	85 c0                	test   eax,eax
c0018bd0:	75 0f                	jne    c0018be1 <CPU::detectFeatures()+0x273>
c0018bd2:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c0018bdc:	e9 58 01 00 00       	jmp    c0018d39 <CPU::detectFeatures()+0x3cb>
c0018be1:	51                   	push   ecx
c0018be2:	51                   	push   ecx
c0018be3:	68 86 b3 02 c0       	push   0xc002b386
c0018be8:	55                   	push   ebp
c0018be9:	e8 aa 7c fe ff       	call   c0000898 <strcmp>
c0018bee:	83 c4 10             	add    esp,0x10
c0018bf1:	85 c0                	test   eax,eax
c0018bf3:	75 0f                	jne    c0018c04 <CPU::detectFeatures()+0x296>
c0018bf5:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c0018bff:	e9 35 01 00 00       	jmp    c0018d39 <CPU::detectFeatures()+0x3cb>
c0018c04:	52                   	push   edx
c0018c05:	52                   	push   edx
c0018c06:	68 d4 b3 02 c0       	push   0xc002b3d4
c0018c0b:	55                   	push   ebp
c0018c0c:	e8 87 7c fe ff       	call   c0000898 <strcmp>
c0018c11:	83 c4 10             	add    esp,0x10
c0018c14:	85 c0                	test   eax,eax
c0018c16:	75 0f                	jne    c0018c27 <CPU::detectFeatures()+0x2b9>
c0018c18:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c0018c22:	e9 12 01 00 00       	jmp    c0018d39 <CPU::detectFeatures()+0x3cb>
c0018c27:	50                   	push   eax
c0018c28:	50                   	push   eax
c0018c29:	68 e1 b3 02 c0       	push   0xc002b3e1
c0018c2e:	55                   	push   ebp
c0018c2f:	e8 64 7c fe ff       	call   c0000898 <strcmp>
c0018c34:	83 c4 10             	add    esp,0x10
c0018c37:	85 c0                	test   eax,eax
c0018c39:	75 0f                	jne    c0018c4a <CPU::detectFeatures()+0x2dc>
c0018c3b:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c0018c45:	e9 ef 00 00 00       	jmp    c0018d39 <CPU::detectFeatures()+0x3cb>
c0018c4a:	50                   	push   eax
c0018c4b:	50                   	push   eax
c0018c4c:	68 ee b3 02 c0       	push   0xc002b3ee
c0018c51:	55                   	push   ebp
c0018c52:	e8 41 7c fe ff       	call   c0000898 <strcmp>
c0018c57:	83 c4 10             	add    esp,0x10
c0018c5a:	85 c0                	test   eax,eax
c0018c5c:	75 0f                	jne    c0018c6d <CPU::detectFeatures()+0x2ff>
c0018c5e:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c0018c68:	e9 cc 00 00 00       	jmp    c0018d39 <CPU::detectFeatures()+0x3cb>
c0018c6d:	50                   	push   eax
c0018c6e:	50                   	push   eax
c0018c6f:	68 fb b3 02 c0       	push   0xc002b3fb
c0018c74:	55                   	push   ebp
c0018c75:	e8 1e 7c fe ff       	call   c0000898 <strcmp>
c0018c7a:	83 c4 10             	add    esp,0x10
c0018c7d:	85 c0                	test   eax,eax
c0018c7f:	75 0f                	jne    c0018c90 <CPU::detectFeatures()+0x322>
c0018c81:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c0018c8b:	e9 a9 00 00 00       	jmp    c0018d39 <CPU::detectFeatures()+0x3cb>
c0018c90:	50                   	push   eax
c0018c91:	50                   	push   eax
c0018c92:	68 08 b4 02 c0       	push   0xc002b408
c0018c97:	55                   	push   ebp
c0018c98:	e8 fb 7b fe ff       	call   c0000898 <strcmp>
c0018c9d:	83 c4 10             	add    esp,0x10
c0018ca0:	85 c0                	test   eax,eax
c0018ca2:	75 0f                	jne    c0018cb3 <CPU::detectFeatures()+0x345>
c0018ca4:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c0018cae:	e9 86 00 00 00       	jmp    c0018d39 <CPU::detectFeatures()+0x3cb>
c0018cb3:	50                   	push   eax
c0018cb4:	50                   	push   eax
c0018cb5:	68 15 b4 02 c0       	push   0xc002b415
c0018cba:	55                   	push   ebp
c0018cbb:	e8 d8 7b fe ff       	call   c0000898 <strcmp>
c0018cc0:	83 c4 10             	add    esp,0x10
c0018cc3:	85 c0                	test   eax,eax
c0018cc5:	75 0c                	jne    c0018cd3 <CPU::detectFeatures()+0x365>
c0018cc7:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c0018cd1:	eb 66                	jmp    c0018d39 <CPU::detectFeatures()+0x3cb>
c0018cd3:	50                   	push   eax
c0018cd4:	50                   	push   eax
c0018cd5:	68 22 b4 02 c0       	push   0xc002b422
c0018cda:	55                   	push   ebp
c0018cdb:	e8 b8 7b fe ff       	call   c0000898 <strcmp>
c0018ce0:	83 c4 10             	add    esp,0x10
c0018ce3:	85 c0                	test   eax,eax
c0018ce5:	75 0c                	jne    c0018cf3 <CPU::detectFeatures()+0x385>
c0018ce7:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c0018cf1:	eb 46                	jmp    c0018d39 <CPU::detectFeatures()+0x3cb>
c0018cf3:	57                   	push   edi
c0018cf4:	57                   	push   edi
c0018cf5:	68 2f b4 02 c0       	push   0xc002b42f
c0018cfa:	55                   	push   ebp
c0018cfb:	e8 98 7b fe ff       	call   c0000898 <strcmp>
c0018d00:	83 c4 10             	add    esp,0x10
c0018d03:	85 c0                	test   eax,eax
c0018d05:	74 e0                	je     c0018ce7 <CPU::detectFeatures()+0x379>
c0018d07:	56                   	push   esi
c0018d08:	56                   	push   esi
c0018d09:	68 3c b4 02 c0       	push   0xc002b43c
c0018d0e:	55                   	push   ebp
c0018d0f:	e8 84 7b fe ff       	call   c0000898 <strcmp>
c0018d14:	83 c4 10             	add    esp,0x10
c0018d17:	85 c0                	test   eax,eax
c0018d19:	74 cc                	je     c0018ce7 <CPU::detectFeatures()+0x379>
c0018d1b:	51                   	push   ecx
c0018d1c:	51                   	push   ecx
c0018d1d:	68 49 b4 02 c0       	push   0xc002b449
c0018d22:	55                   	push   ebp
c0018d23:	e8 70 7b fe ff       	call   c0000898 <strcmp>
c0018d28:	83 c4 10             	add    esp,0x10
c0018d2b:	85 c0                	test   eax,eax
c0018d2d:	74 b8                	je     c0018ce7 <CPU::detectFeatures()+0x379>
c0018d2f:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c0018d39:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c0018d3e:	0f 86 be 00 00 00    	jbe    c0018e02 <CPU::detectFeatures()+0x494>
c0018d44:	83 ec 0c             	sub    esp,0xc
c0018d47:	68 80 00 00 00       	push   0x80
c0018d4c:	e8 31 fb ff ff       	call   c0018882 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0018d51:	83 e0 01             	and    eax,0x1
c0018d54:	c1 e0 06             	shl    eax,0x6
c0018d57:	88 c2                	mov    dl,al
c0018d59:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018d5f:	83 e0 bf             	and    eax,0xffffffbf
c0018d62:	09 d0                	or     eax,edx
c0018d64:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018d6a:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c0018d71:	e8 0c fb ff ff       	call   c0018882 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0018d76:	83 e0 01             	and    eax,0x1
c0018d79:	c1 e0 04             	shl    eax,0x4
c0018d7c:	88 c2                	mov    dl,al
c0018d7e:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0018d84:	83 e0 ef             	and    eax,0xffffffef
c0018d87:	09 d0                	or     eax,edx
c0018d89:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0018d8f:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c0018d96:	e8 e7 fa ff ff       	call   c0018882 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0018d9b:	c1 e0 07             	shl    eax,0x7
c0018d9e:	88 c2                	mov    dl,al
c0018da0:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018da6:	83 e0 7f             	and    eax,0x7f
c0018da9:	09 d0                	or     eax,edx
c0018dab:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018db1:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0018db8:	e8 f3 fa ff ff       	call   c00188b0 <CPU::cpuidCheckExtendedECX(unsigned int)>
c0018dbd:	83 e0 01             	and    eax,0x1
c0018dc0:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0018dc7:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0018dcd:	83 e0 f7             	and    eax,0xfffffff7
c0018dd0:	09 d0                	or     eax,edx
c0018dd2:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0018dd8:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c0018ddf:	e8 cc fa ff ff       	call   c00188b0 <CPU::cpuidCheckExtendedECX(unsigned int)>
c0018de4:	83 c4 10             	add    esp,0x10
c0018de7:	83 e0 01             	and    eax,0x1
c0018dea:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0018df1:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0018df7:	83 e0 fb             	and    eax,0xfffffffb
c0018dfa:	09 d0                	or     eax,edx
c0018dfc:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0018e02:	83 ec 0c             	sub    esp,0xc
c0018e05:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018e09:	50                   	push   eax
c0018e0a:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018e0e:	50                   	push   eax
c0018e0f:	8d 74 24 28          	lea    esi,[esp+0x28]
c0018e13:	56                   	push   esi
c0018e14:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018e18:	50                   	push   eax
c0018e19:	6a 01                	push   0x1
c0018e1b:	e8 82 f9 ff ff       	call   c00187a2 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018e20:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0018e24:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c0018e2a:	88 ca                	mov    dl,cl
c0018e2c:	83 e0 f0             	and    eax,0xfffffff0
c0018e2f:	83 e2 0f             	and    edx,0xf
c0018e32:	09 d0                	or     eax,edx
c0018e34:	88 ca                	mov    dl,cl
c0018e36:	88 83 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],al
c0018e3c:	c0 ea 04             	shr    dl,0x4
c0018e3f:	88 54 24 2f          	mov    BYTE PTR [esp+0x2f],dl
c0018e43:	0f b6 c2             	movzx  eax,dl
c0018e46:	83 c4 20             	add    esp,0x20
c0018e49:	c1 e0 06             	shl    eax,0x6
c0018e4c:	89 c7                	mov    edi,eax
c0018e4e:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018e54:	66 25 3f c0          	and    ax,0xc03f
c0018e58:	09 f8                	or     eax,edi
c0018e5a:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0018e61:	89 c8                	mov    eax,ecx
c0018e63:	0f b6 ab 5d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15d]
c0018e6a:	c1 e8 08             	shr    eax,0x8
c0018e6d:	83 e5 3f             	and    ebp,0x3f
c0018e70:	83 e0 0f             	and    eax,0xf
c0018e73:	89 c7                	mov    edi,eax
c0018e75:	c1 e7 06             	shl    edi,0x6
c0018e78:	09 ef                	or     edi,ebp
c0018e7a:	0f b6 ab 5e 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15e]
c0018e81:	89 fa                	mov    edx,edi
c0018e83:	83 e5 c0             	and    ebp,0xffffffc0
c0018e86:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c0018e8c:	88 c2                	mov    dl,al
c0018e8e:	c0 ea 02             	shr    dl,0x2
c0018e91:	89 d7                	mov    edi,edx
c0018e93:	09 ef                	or     edi,ebp
c0018e95:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c0018e9b:	89 fa                	mov    edx,edi
c0018e9d:	83 e5 cf             	and    ebp,0xffffffcf
c0018ea0:	88 93 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],dl
c0018ea6:	89 cf                	mov    edi,ecx
c0018ea8:	c1 ef 0c             	shr    edi,0xc
c0018eab:	83 e7 03             	and    edi,0x3
c0018eae:	c1 e7 04             	shl    edi,0x4
c0018eb1:	09 ef                	or     edi,ebp
c0018eb3:	3c 06                	cmp    al,0x6
c0018eb5:	89 fa                	mov    edx,edi
c0018eb7:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c0018ebd:	74 04                	je     c0018ec3 <CPU::detectFeatures()+0x555>
c0018ebf:	3c 0f                	cmp    al,0xf
c0018ec1:	75 5c                	jne    c0018f1f <CPU::detectFeatures()+0x5b1>
c0018ec3:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0018ec7:	89 cf                	mov    edi,ecx
c0018ec9:	c1 ef 10             	shr    edi,0x10
c0018ecc:	c1 e7 04             	shl    edi,0x4
c0018ecf:	09 fa                	or     edx,edi
c0018ed1:	8b bb 5c 01 00 00    	mov    edi,DWORD PTR [ebx+0x15c]
c0018ed7:	0f b6 d2             	movzx  edx,dl
c0018eda:	66 81 e7 3f c0       	and    di,0xc03f
c0018edf:	c1 e2 06             	shl    edx,0x6
c0018ee2:	09 fa                	or     edx,edi
c0018ee4:	3c 0f                	cmp    al,0xf
c0018ee6:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c0018eed:	75 30                	jne    c0018f1f <CPU::detectFeatures()+0x5b1>
c0018eef:	8a 83 5d 01 00 00    	mov    al,BYTE PTR [ebx+0x15d]
c0018ef5:	c1 e9 14             	shr    ecx,0x14
c0018ef8:	83 e0 3f             	and    eax,0x3f
c0018efb:	83 c1 0f             	add    ecx,0xf
c0018efe:	88 ca                	mov    dl,cl
c0018f00:	c0 e9 02             	shr    cl,0x2
c0018f03:	c1 e2 06             	shl    edx,0x6
c0018f06:	09 d0                	or     eax,edx
c0018f08:	88 83 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],al
c0018f0e:	8a 83 5e 01 00 00    	mov    al,BYTE PTR [ebx+0x15e]
c0018f14:	83 e0 c0             	and    eax,0xffffffc0
c0018f17:	09 c1                	or     ecx,eax
c0018f19:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c0018f1f:	83 ec 0c             	sub    esp,0xc
c0018f22:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c0018f29:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018f2d:	50                   	push   eax
c0018f2e:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c0018f32:	55                   	push   ebp
c0018f33:	56                   	push   esi
c0018f34:	8d 7c 24 28          	lea    edi,[esp+0x28]
c0018f38:	57                   	push   edi
c0018f39:	68 00 00 00 80       	push   0x80000000
c0018f3e:	e8 5f f8 ff ff       	call   c00187a2 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018f43:	83 c4 20             	add    esp,0x20
c0018f46:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c0018f4e:	76 22                	jbe    c0018f72 <CPU::detectFeatures()+0x604>
c0018f50:	83 ec 0c             	sub    esp,0xc
c0018f53:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018f57:	50                   	push   eax
c0018f58:	55                   	push   ebp
c0018f59:	56                   	push   esi
c0018f5a:	57                   	push   edi
c0018f5b:	68 01 00 00 80       	push   0x80000001
c0018f60:	e8 3d f8 ff ff       	call   c00187a2 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018f65:	81 a3 90 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x1190],0xfffe5fff
c0018f6f:	83 c4 20             	add    esp,0x20
c0018f72:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c0018f78:	83 f8 01             	cmp    eax,0x1
c0018f7b:	75 6f                	jne    c0018fec <CPU::detectFeatures()+0x67e>
c0018f7d:	51                   	push   ecx
c0018f7e:	51                   	push   ecx
c0018f7f:	68 55 b4 02 c0       	push   0xc002b455
c0018f84:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0018f88:	56                   	push   esi
c0018f89:	e8 7e 78 fe ff       	call   c000080c <strcpy>
c0018f8e:	5f                   	pop    edi
c0018f8f:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018f95:	5d                   	pop    ebp
c0018f96:	66 c1 e8 06          	shr    ax,0x6
c0018f9a:	0f b6 c0             	movzx  eax,al
c0018f9d:	50                   	push   eax
c0018f9e:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018fa4:	c1 e8 0e             	shr    eax,0xe
c0018fa7:	0f b6 c0             	movzx  eax,al
c0018faa:	50                   	push   eax
c0018fab:	e8 9c f4 ff ff       	call   c001844c <CPU::lookupIntelName(unsigned char, unsigned char)>
c0018fb0:	5a                   	pop    edx
c0018fb1:	59                   	pop    ecx
c0018fb2:	50                   	push   eax
c0018fb3:	56                   	push   esi
c0018fb4:	e8 93 79 fe ff       	call   c000094c <strcat>
c0018fb9:	5f                   	pop    edi
c0018fba:	5d                   	pop    ebp
c0018fbb:	56                   	push   esi
c0018fbc:	53                   	push   ebx
c0018fbd:	e8 36 ad ff ff       	call   c0013cf8 <Device::setName(char const*)>
c0018fc2:	58                   	pop    eax
c0018fc3:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c0018fc9:	5a                   	pop    edx
c0018fca:	68 5c b4 02 c0       	push   0xc002b45c
c0018fcf:	50                   	push   eax
c0018fd0:	e8 c3 78 fe ff       	call   c0000898 <strcmp>
c0018fd5:	83 c4 10             	add    esp,0x10
c0018fd8:	85 c0                	test   eax,eax
c0018fda:	0f 85 71 03 00 00    	jne    c0019351 <CPU::detectFeatures()+0x9e3>
c0018fe0:	80 a3 91 11 00 00 3f 	and    BYTE PTR [ebx+0x1191],0x3f
c0018fe7:	e9 65 03 00 00       	jmp    c0019351 <CPU::detectFeatures()+0x9e3>
c0018fec:	83 f8 02             	cmp    eax,0x2
c0018fef:	0f 85 b5 00 00 00    	jne    c00190aa <CPU::detectFeatures()+0x73c>
c0018ff5:	57                   	push   edi
c0018ff6:	57                   	push   edi
c0018ff7:	68 6e b4 02 c0       	push   0xc002b46e
c0018ffc:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0019000:	56                   	push   esi
c0019001:	e8 06 78 fe ff       	call   c000080c <strcpy>
c0019006:	5d                   	pop    ebp
c0019007:	58                   	pop    eax
c0019008:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001900e:	66 c1 e8 06          	shr    ax,0x6
c0019012:	0f b6 c0             	movzx  eax,al
c0019015:	50                   	push   eax
c0019016:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001901c:	c1 e8 0e             	shr    eax,0xe
c001901f:	0f b6 c0             	movzx  eax,al
c0019022:	50                   	push   eax
c0019023:	e8 90 f2 ff ff       	call   c00182b8 <CPU::lookupAMDName(unsigned char, unsigned char)>
c0019028:	5a                   	pop    edx
c0019029:	59                   	pop    ecx
c001902a:	50                   	push   eax
c001902b:	56                   	push   esi
c001902c:	e8 1b 79 fe ff       	call   c000094c <strcat>
c0019031:	5f                   	pop    edi
c0019032:	5d                   	pop    ebp
c0019033:	56                   	push   esi
c0019034:	53                   	push   ebx
c0019035:	e8 be ac ff ff       	call   c0013cf8 <Device::setName(char const*)>
c001903a:	58                   	pop    eax
c001903b:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c0019041:	5a                   	pop    edx
c0019042:	68 73 b4 02 c0       	push   0xc002b473
c0019047:	50                   	push   eax
c0019048:	e8 4b 78 fe ff       	call   c0000898 <strcmp>
c001904d:	83 c4 10             	add    esp,0x10
c0019050:	85 c0                	test   eax,eax
c0019052:	75 20                	jne    c0019074 <CPU::detectFeatures()+0x706>
c0019054:	8b 15 a8 d9 02 c0    	mov    edx,DWORD PTR ds:0xc002d9a8
c001905a:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c0019060:	a8 01                	test   al,0x1
c0019062:	74 10                	je     c0019074 <CPU::detectFeatures()+0x706>
c0019064:	83 e0 fe             	and    eax,0xfffffffe
c0019067:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c001906d:	80 8b 90 11 00 00 10 	or     BYTE PTR [ebx+0x1190],0x10
c0019074:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001907a:	c1 e8 0e             	shr    eax,0xe
c001907d:	3c 05                	cmp    al,0x5
c001907f:	0f 85 cc 02 00 00    	jne    c0019351 <CPU::detectFeatures()+0x9e3>
c0019085:	56                   	push   esi
c0019086:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c001908c:	83 e0 0f             	and    eax,0xf
c001908f:	50                   	push   eax
c0019090:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019096:	66 c1 e8 06          	shr    ax,0x6
c001909a:	0f b6 c0             	movzx  eax,al
c001909d:	50                   	push   eax
c001909e:	6a 05                	push   0x5
c00190a0:	e8 89 f6 ff ff       	call   c001872e <CPU::AMD_K6_writeback(int, int, int)>
c00190a5:	e9 1f 02 00 00       	jmp    c00192c9 <CPU::detectFeatures()+0x95b>
c00190aa:	8d 50 fd             	lea    edx,[eax-0x3]
c00190ad:	83 fa 01             	cmp    edx,0x1
c00190b0:	76 09                	jbe    c00190bb <CPU::detectFeatures()+0x74d>
c00190b2:	83 f8 06             	cmp    eax,0x6
c00190b5:	0f 85 91 01 00 00    	jne    c001924c <CPU::detectFeatures()+0x8de>
c00190bb:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c00190c1:	c1 ea 0e             	shr    edx,0xe
c00190c4:	80 fa 05             	cmp    dl,0x5
c00190c7:	75 7b                	jne    c0019144 <CPU::detectFeatures()+0x7d6>
c00190c9:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c00190cf:	66 81 e2 c0 3f       	and    dx,0x3fc0
c00190d4:	66 81 fa 00 01       	cmp    dx,0x100
c00190d9:	75 0c                	jne    c00190e7 <CPU::detectFeatures()+0x779>
c00190db:	51                   	push   ecx
c00190dc:	51                   	push   ecx
c00190dd:	68 7a b4 02 c0       	push   0xc002b47a
c00190e2:	e9 dc 01 00 00       	jmp    c00192c3 <CPU::detectFeatures()+0x955>
c00190e7:	66 81 fa 00 02       	cmp    dx,0x200
c00190ec:	75 0c                	jne    c00190fa <CPU::detectFeatures()+0x78c>
c00190ee:	52                   	push   edx
c00190ef:	52                   	push   edx
c00190f0:	68 8d b4 02 c0       	push   0xc002b48d
c00190f5:	e9 c9 01 00 00       	jmp    c00192c3 <CPU::detectFeatures()+0x955>
c00190fa:	66 81 fa 40 02       	cmp    dx,0x240
c00190ff:	75 0c                	jne    c001910d <CPU::detectFeatures()+0x79f>
c0019101:	50                   	push   eax
c0019102:	50                   	push   eax
c0019103:	68 9f b4 02 c0       	push   0xc002b49f
c0019108:	e9 b6 01 00 00       	jmp    c00192c3 <CPU::detectFeatures()+0x955>
c001910d:	83 f8 06             	cmp    eax,0x6
c0019110:	75 0c                	jne    c001911e <CPU::detectFeatures()+0x7b0>
c0019112:	50                   	push   eax
c0019113:	50                   	push   eax
c0019114:	68 b1 b4 02 c0       	push   0xc002b4b1
c0019119:	e9 a5 01 00 00       	jmp    c00192c3 <CPU::detectFeatures()+0x955>
c001911e:	83 f8 04             	cmp    eax,0x4
c0019121:	75 0c                	jne    c001912f <CPU::detectFeatures()+0x7c1>
c0019123:	50                   	push   eax
c0019124:	50                   	push   eax
c0019125:	68 bd b4 02 c0       	push   0xc002b4bd
c001912a:	e9 94 01 00 00       	jmp    c00192c3 <CPU::detectFeatures()+0x955>
c001912f:	83 f8 03             	cmp    eax,0x3
c0019132:	0f 85 19 02 00 00    	jne    c0019351 <CPU::detectFeatures()+0x9e3>
c0019138:	50                   	push   eax
c0019139:	50                   	push   eax
c001913a:	68 c5 b4 02 c0       	push   0xc002b4c5
c001913f:	e9 7f 01 00 00       	jmp    c00192c3 <CPU::detectFeatures()+0x955>
c0019144:	80 fa 06             	cmp    dl,0x6
c0019147:	0f 85 db 00 00 00    	jne    c0019228 <CPU::detectFeatures()+0x8ba>
c001914d:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0019153:	66 81 e2 c0 3f       	and    dx,0x3fc0
c0019158:	66 81 fa 80 01       	cmp    dx,0x180
c001915d:	75 0c                	jne    c001916b <CPU::detectFeatures()+0x7fd>
c001915f:	50                   	push   eax
c0019160:	50                   	push   eax
c0019161:	68 d0 b4 02 c0       	push   0xc002b4d0
c0019166:	e9 58 01 00 00       	jmp    c00192c3 <CPU::detectFeatures()+0x955>
c001916b:	8d 8a 40 fe ff ff    	lea    ecx,[edx-0x1c0]
c0019171:	66 f7 c1 80 ff       	test   cx,0xff80
c0019176:	75 0c                	jne    c0019184 <CPU::detectFeatures()+0x816>
c0019178:	50                   	push   eax
c0019179:	50                   	push   eax
c001917a:	68 e0 b4 02 c0       	push   0xc002b4e0
c001917f:	e9 3f 01 00 00       	jmp    c00192c3 <CPU::detectFeatures()+0x955>
c0019184:	66 81 fa 40 02       	cmp    dx,0x240
c0019189:	75 0c                	jne    c0019197 <CPU::detectFeatures()+0x829>
c001918b:	55                   	push   ebp
c001918c:	55                   	push   ebp
c001918d:	68 e7 b4 02 c0       	push   0xc002b4e7
c0019192:	e9 2c 01 00 00       	jmp    c00192c3 <CPU::detectFeatures()+0x955>
c0019197:	66 81 fa 80 02       	cmp    dx,0x280
c001919c:	75 0c                	jne    c00191aa <CPU::detectFeatures()+0x83c>
c001919e:	57                   	push   edi
c001919f:	57                   	push   edi
c00191a0:	68 f0 b4 02 c0       	push   0xc002b4f0
c00191a5:	e9 19 01 00 00       	jmp    c00192c3 <CPU::detectFeatures()+0x955>
c00191aa:	66 81 fa 40 03       	cmp    dx,0x340
c00191af:	74 ed                	je     c001919e <CPU::detectFeatures()+0x830>
c00191b1:	66 81 fa c0 03       	cmp    dx,0x3c0
c00191b6:	75 0c                	jne    c00191c4 <CPU::detectFeatures()+0x856>
c00191b8:	56                   	push   esi
c00191b9:	56                   	push   esi
c00191ba:	68 f7 b4 02 c0       	push   0xc002b4f7
c00191bf:	e9 ff 00 00 00       	jmp    c00192c3 <CPU::detectFeatures()+0x955>
c00191c4:	83 f8 06             	cmp    eax,0x6
c00191c7:	0f 84 45 ff ff ff    	je     c0019112 <CPU::detectFeatures()+0x7a4>
c00191cd:	83 f8 04             	cmp    eax,0x4
c00191d0:	0f 84 4d ff ff ff    	je     c0019123 <CPU::detectFeatures()+0x7b5>
c00191d6:	83 f8 03             	cmp    eax,0x3
c00191d9:	0f 85 72 01 00 00    	jne    c0019351 <CPU::detectFeatures()+0x9e3>
c00191df:	51                   	push   ecx
c00191e0:	51                   	push   ecx
c00191e1:	68 00 b5 02 c0       	push   0xc002b500
c00191e6:	53                   	push   ebx
c00191e7:	e8 0c ab ff ff       	call   c0013cf8 <Device::setName(char const*)>
c00191ec:	b1 c1                	mov    cl,0xc1
c00191ee:	88 c8                	mov    al,cl
c00191f0:	e6 22                	out    0x22,al
c00191f2:	e4 23                	in     al,0x23
c00191f4:	88 c2                	mov    dl,al
c00191f6:	88 c8                	mov    al,cl
c00191f8:	e6 22                	out    0x22,al
c00191fa:	88 d0                	mov    al,dl
c00191fc:	83 c8 10             	or     eax,0x10
c00191ff:	e6 23                	out    0x23,al
c0019201:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c0019208:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001920b:	89 d0                	mov    eax,edx
c001920d:	66 c7 41 04 22 00    	mov    WORD PTR [ecx+0x4],0x22
c0019213:	c6 41 06 02          	mov    BYTE PTR [ecx+0x6],0x2
c0019217:	40                   	inc    eax
c0019218:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c001921e:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0019223:	e9 a1 00 00 00       	jmp    c00192c9 <CPU::detectFeatures()+0x95b>
c0019228:	83 f8 06             	cmp    eax,0x6
c001922b:	0f 84 e1 fe ff ff    	je     c0019112 <CPU::detectFeatures()+0x7a4>
c0019231:	83 f8 04             	cmp    eax,0x4
c0019234:	0f 84 e9 fe ff ff    	je     c0019123 <CPU::detectFeatures()+0x7b5>
c001923a:	83 f8 03             	cmp    eax,0x3
c001923d:	0f 85 0e 01 00 00    	jne    c0019351 <CPU::detectFeatures()+0x9e3>
c0019243:	52                   	push   edx
c0019244:	52                   	push   edx
c0019245:	68 0b b5 02 c0       	push   0xc002b50b
c001924a:	eb 77                	jmp    c00192c3 <CPU::detectFeatures()+0x955>
c001924c:	83 f8 07             	cmp    eax,0x7
c001924f:	75 09                	jne    c001925a <CPU::detectFeatures()+0x8ec>
c0019251:	50                   	push   eax
c0019252:	50                   	push   eax
c0019253:	68 15 b5 02 c0       	push   0xc002b515
c0019258:	eb 69                	jmp    c00192c3 <CPU::detectFeatures()+0x955>
c001925a:	83 f8 0a             	cmp    eax,0xa
c001925d:	75 09                	jne    c0019268 <CPU::detectFeatures()+0x8fa>
c001925f:	50                   	push   eax
c0019260:	50                   	push   eax
c0019261:	68 20 b5 02 c0       	push   0xc002b520
c0019266:	eb 5b                	jmp    c00192c3 <CPU::detectFeatures()+0x955>
c0019268:	83 f8 0b             	cmp    eax,0xb
c001926b:	75 09                	jne    c0019276 <CPU::detectFeatures()+0x908>
c001926d:	50                   	push   eax
c001926e:	50                   	push   eax
c001926f:	68 28 b5 02 c0       	push   0xc002b528
c0019274:	eb 4d                	jmp    c00192c3 <CPU::detectFeatures()+0x955>
c0019276:	83 f8 08             	cmp    eax,0x8
c0019279:	75 09                	jne    c0019284 <CPU::detectFeatures()+0x916>
c001927b:	50                   	push   eax
c001927c:	50                   	push   eax
c001927d:	68 31 b5 02 c0       	push   0xc002b531
c0019282:	eb 3f                	jmp    c00192c3 <CPU::detectFeatures()+0x955>
c0019284:	83 f8 09             	cmp    eax,0x9
c0019287:	75 09                	jne    c0019292 <CPU::detectFeatures()+0x924>
c0019289:	50                   	push   eax
c001928a:	50                   	push   eax
c001928b:	68 39 b5 02 c0       	push   0xc002b539
c0019290:	eb 31                	jmp    c00192c3 <CPU::detectFeatures()+0x955>
c0019292:	83 f8 05             	cmp    eax,0x5
c0019295:	75 09                	jne    c00192a0 <CPU::detectFeatures()+0x932>
c0019297:	50                   	push   eax
c0019298:	50                   	push   eax
c0019299:	68 41 b5 02 c0       	push   0xc002b541
c001929e:	eb 23                	jmp    c00192c3 <CPU::detectFeatures()+0x955>
c00192a0:	83 f8 0c             	cmp    eax,0xc
c00192a3:	75 09                	jne    c00192ae <CPU::detectFeatures()+0x940>
c00192a5:	55                   	push   ebp
c00192a6:	55                   	push   ebp
c00192a7:	68 4f b5 02 c0       	push   0xc002b54f
c00192ac:	eb 15                	jmp    c00192c3 <CPU::detectFeatures()+0x955>
c00192ae:	83 f8 0d             	cmp    eax,0xd
c00192b1:	75 09                	jne    c00192bc <CPU::detectFeatures()+0x94e>
c00192b3:	57                   	push   edi
c00192b4:	57                   	push   edi
c00192b5:	68 5a b5 02 c0       	push   0xc002b55a
c00192ba:	eb 07                	jmp    c00192c3 <CPU::detectFeatures()+0x955>
c00192bc:	56                   	push   esi
c00192bd:	56                   	push   esi
c00192be:	68 6e b5 02 c0       	push   0xc002b56e
c00192c3:	53                   	push   ebx
c00192c4:	e8 2f aa ff ff       	call   c0013cf8 <Device::setName(char const*)>
c00192c9:	83 c4 10             	add    esp,0x10
c00192cc:	e9 80 00 00 00       	jmp    c0019351 <CPU::detectFeatures()+0x9e3>
c00192d1:	51                   	push   ecx
c00192d2:	51                   	push   ecx
c00192d3:	68 ba b3 02 c0       	push   0xc002b3ba
c00192d8:	55                   	push   ebp
c00192d9:	e8 2e 75 fe ff       	call   c000080c <strcpy>
c00192de:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c00192e8:	e8 c1 6f fe ff       	call   c00002ae <is486>
c00192ed:	83 c4 10             	add    esp,0x10
c00192f0:	85 c0                	test   eax,eax
c00192f2:	74 2b                	je     c001931f <CPU::detectFeatures()+0x9b1>
c00192f4:	52                   	push   edx
c00192f5:	52                   	push   edx
c00192f6:	68 7a b5 02 c0       	push   0xc002b57a
c00192fb:	53                   	push   ebx
c00192fc:	e8 f7 a9 ff ff       	call   c0013cf8 <Device::setName(char const*)>
c0019301:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c0019308:	0f 20 c0             	mov    eax,cr0
c001930b:	83 e0 14             	and    eax,0x14
c001930e:	83 c4 10             	add    esp,0x10
c0019311:	83 f8 04             	cmp    eax,0x4
c0019314:	75 1f                	jne    c0019335 <CPU::detectFeatures()+0x9c7>
c0019316:	80 a3 92 11 00 00 fd 	and    BYTE PTR [ebx+0x1192],0xfd
c001931d:	eb 32                	jmp    c0019351 <CPU::detectFeatures()+0x9e3>
c001931f:	50                   	push   eax
c0019320:	50                   	push   eax
c0019321:	68 85 b5 02 c0       	push   0xc002b585
c0019326:	53                   	push   ebx
c0019327:	e8 cc a9 ff ff       	call   c0013cf8 <Device::setName(char const*)>
c001932c:	80 a3 91 11 00 00 f8 	and    BYTE PTR [ebx+0x1191],0xf8
c0019333:	eb d3                	jmp    c0019308 <CPU::detectFeatures()+0x99a>
c0019335:	e8 4f 6f fe ff       	call   c0000289 <hasLegacyFPU>
c001933a:	83 e0 01             	and    eax,0x1
c001933d:	8d 14 00             	lea    edx,[eax+eax*1]
c0019340:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0019346:	83 e0 fd             	and    eax,0xfffffffd
c0019349:	09 d0                	or     eax,edx
c001934b:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0019351:	c6 83 94 11 00 00 00 	mov    BYTE PTR [ebx+0x1194],0x0
c0019358:	83 c4 4c             	add    esp,0x4c
c001935b:	5b                   	pop    ebx
c001935c:	5e                   	pop    esi
c001935d:	5f                   	pop    edi
c001935e:	5d                   	pop    ebp
c001935f:	c3                   	ret    

c0019360 <CPU::setupSMEP()>:
c0019360:	0f 20 e0             	mov    eax,cr4
c0019363:	0d 00 00 10 00       	or     eax,0x100000
c0019368:	0f 22 e0             	mov    cr4,eax
c001936b:	c3                   	ret    

c001936c <CPU::setupUMIP()>:
c001936c:	0f 20 e0             	mov    eax,cr4
c001936f:	80 cc 08             	or     ah,0x8
c0019372:	0f 22 e0             	mov    cr4,eax
c0019375:	c3                   	ret    

c0019376 <CPU::setupTSC()>:
c0019376:	0f 20 e0             	mov    eax,cr4
c0019379:	83 c8 04             	or     eax,0x4
c001937c:	0f 22 e0             	mov    cr4,eax
c001937f:	c3                   	ret    

c0019380 <CPU::setupLargePages()>:
c0019380:	0f 20 e0             	mov    eax,cr4
c0019383:	83 c8 10             	or     eax,0x10
c0019386:	0f 22 e0             	mov    cr4,eax
c0019389:	c3                   	ret    

c001938a <CPU::setupPAT()>:
c001938a:	a1 a8 d9 02 c0       	mov    eax,ds:0xc002d9a8
c001938f:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0019396:	74 2c                	je     c00193c4 <CPU::setupPAT()+0x3a>
c0019398:	53                   	push   ebx
c0019399:	83 ec 10             	sub    esp,0x10
c001939c:	68 77 02 00 00       	push   0x277
c00193a1:	50                   	push   eax
c00193a2:	e8 99 57 ff ff       	call   c000eb40 <Computer::rdmsr(unsigned int)>
c00193a7:	83 e2 f8             	and    edx,0xfffffff8
c00193aa:	83 ca 01             	or     edx,0x1
c00193ad:	52                   	push   edx
c00193ae:	50                   	push   eax
c00193af:	68 77 02 00 00       	push   0x277
c00193b4:	ff 35 a8 d9 02 c0    	push   DWORD PTR ds:0xc002d9a8
c00193ba:	e8 ad 57 ff ff       	call   c000eb6c <Computer::wrmsr(unsigned int, unsigned long long)>
c00193bf:	83 c4 28             	add    esp,0x28
c00193c2:	5b                   	pop    ebx
c00193c3:	c3                   	ret    
c00193c4:	c3                   	ret    
c00193c5:	90                   	nop

c00193c6 <CPU::setupMTRR()>:
c00193c6:	c3                   	ret    
c00193c7:	90                   	nop

c00193c8 <CPU::setupGlobalPages()>:
c00193c8:	0f 20 e0             	mov    eax,cr4
c00193cb:	0c 80                	or     al,0x80
c00193cd:	0f 22 e0             	mov    cr4,eax
c00193d0:	c3                   	ret    
c00193d1:	90                   	nop

c00193d2 <CPU::allowUsermodeDataAccess()>:
c00193d2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00193d6:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c00193dd:	74 03                	je     c00193e2 <CPU::allowUsermodeDataAccess()+0x10>
c00193df:	0f 01 cb             	stac   
c00193e2:	c3                   	ret    
c00193e3:	90                   	nop

c00193e4 <CPU::prohibitUsermodeDataAccess()>:
c00193e4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00193e8:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c00193ef:	74 03                	je     c00193f4 <CPU::prohibitUsermodeDataAccess()+0x10>
c00193f1:	0f 01 ca             	clac   
c00193f4:	c3                   	ret    
c00193f5:	90                   	nop

c00193f6 <CPU::setupSMAP()>:
c00193f6:	0f 20 e0             	mov    eax,cr4
c00193f9:	0d 00 00 20 00       	or     eax,0x200000
c00193fe:	0f 22 e0             	mov    cr4,eax
c0019401:	eb e1                	jmp    c00193e4 <CPU::prohibitUsermodeDataAccess()>
c0019403:	90                   	nop

c0019404 <CPU::setupFeatures()>:
c0019404:	83 ec 0c             	sub    esp,0xc
c0019407:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001940b:	f6 82 90 11 00 00 40 	test   BYTE PTR [edx+0x1190],0x40
c0019412:	74 07                	je     c001941b <CPU::setupFeatures()+0x17>
c0019414:	52                   	push   edx
c0019415:	e8 46 ff ff ff       	call   c0019360 <CPU::setupSMEP()>
c001941a:	58                   	pop    eax
c001941b:	f6 82 91 11 00 00 10 	test   BYTE PTR [edx+0x1191],0x10
c0019422:	74 07                	je     c001942b <CPU::setupFeatures()+0x27>
c0019424:	52                   	push   edx
c0019425:	e8 cc ff ff ff       	call   c00193f6 <CPU::setupSMAP()>
c001942a:	58                   	pop    eax
c001942b:	f6 82 91 11 00 00 08 	test   BYTE PTR [edx+0x1191],0x8
c0019432:	74 07                	je     c001943b <CPU::setupFeatures()+0x37>
c0019434:	52                   	push   edx
c0019435:	e8 32 ff ff ff       	call   c001936c <CPU::setupUMIP()>
c001943a:	58                   	pop    eax
c001943b:	f6 82 90 11 00 00 02 	test   BYTE PTR [edx+0x1190],0x2
c0019442:	74 07                	je     c001944b <CPU::setupFeatures()+0x47>
c0019444:	52                   	push   edx
c0019445:	e8 2c ff ff ff       	call   c0019376 <CPU::setupTSC()>
c001944a:	58                   	pop    eax
c001944b:	f6 82 90 11 00 00 08 	test   BYTE PTR [edx+0x1190],0x8
c0019452:	74 07                	je     c001945b <CPU::setupFeatures()+0x57>
c0019454:	52                   	push   edx
c0019455:	e8 26 ff ff ff       	call   c0019380 <CPU::setupLargePages()>
c001945a:	59                   	pop    ecx
c001945b:	f6 82 90 11 00 00 10 	test   BYTE PTR [edx+0x1190],0x10
c0019462:	74 07                	je     c001946b <CPU::setupFeatures()+0x67>
c0019464:	52                   	push   edx
c0019465:	e8 5e ff ff ff       	call   c00193c8 <CPU::setupGlobalPages()>
c001946a:	58                   	pop    eax
c001946b:	f6 82 90 11 00 00 20 	test   BYTE PTR [edx+0x1190],0x20
c0019472:	74 0c                	je     c0019480 <CPU::setupFeatures()+0x7c>
c0019474:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0019478:	83 c4 0c             	add    esp,0xc
c001947b:	e9 0a ff ff ff       	jmp    c001938a <CPU::setupPAT()>
c0019480:	83 c4 0c             	add    esp,0xc
c0019483:	c3                   	ret    

c0019484 <CPU::open(int, int, void*)>:
c0019484:	57                   	push   edi
c0019485:	56                   	push   esi
c0019486:	53                   	push   ebx
c0019487:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001948b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001948f:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c0019495:	83 ec 0c             	sub    esp,0xc
c0019498:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c001949e:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c00194a4:	50                   	push   eax
c00194a5:	e8 84 59 ff ff       	call   c000ee2e <GDT::setup()>
c00194aa:	83 c4 0c             	add    esp,0xc
c00194ad:	6a 00                	push   0x0
c00194af:	68 ef be ad de       	push   0xdeadbeef
c00194b4:	57                   	push   edi
c00194b5:	e8 ea 76 ff ff       	call   c0010ba4 <TSS::setup(unsigned long, unsigned long)>
c00194ba:	89 3c 24             	mov    DWORD PTR [esp],edi
c00194bd:	e8 c2 76 ff ff       	call   c0010b84 <TSS::flush()>
c00194c2:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c00194c8:	89 04 24             	mov    DWORD PTR [esp],eax
c00194cb:	e8 c2 5b ff ff       	call   c000f092 <IDT::setup()>
c00194d0:	b8 00 04 00 00       	mov    eax,0x400
c00194d5:	0f 23 f8             	mov    db7,eax
c00194d8:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c00194e2:	e8 ae 64 ff ff       	call   c000f995 <Phys::allocatePage()>
c00194e7:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c00194ed:	89 30                	mov    DWORD PTR [eax],esi
c00194ef:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c00194f5:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00194f8:	58                   	pop    eax
c00194f9:	5a                   	pop    edx
c00194fa:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019500:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0019504:	e8 ab 87 ff ff       	call   c0011cb4 <VAS::setCPUSpecific(unsigned long)>
c0019509:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001950c:	e8 5d f4 ff ff       	call   c001896e <CPU::detectFeatures()>
c0019511:	e8 35 bc ff ff       	call   c001514b <setupInterruptController()>
c0019516:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c001951c:	a1 c0 d9 02 c0       	mov    eax,ds:0xc002d9c0
c0019521:	83 e0 10             	and    eax,0x10
c0019524:	83 f8 01             	cmp    eax,0x1
c0019527:	19 c0                	sbb    eax,eax
c0019529:	83 e0 46             	and    eax,0x46
c001952c:	83 c0 1e             	add    eax,0x1e
c001952f:	89 04 24             	mov    DWORD PTR [esp],eax
c0019532:	e8 02 d2 ff ff       	call   c0016739 <setupTimer(int)>
c0019537:	89 83 8c 11 00 00    	mov    DWORD PTR [ebx+0x118c],eax
c001953d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019540:	e8 bf fe ff ff       	call   c0019404 <CPU::setupFeatures()>
c0019545:	83 c4 10             	add    esp,0x10
c0019548:	31 c0                	xor    eax,eax
c001954a:	5b                   	pop    ebx
c001954b:	5e                   	pop    esi
c001954c:	5f                   	pop    edi
c001954d:	c3                   	ret    

c001954e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>:
c001954e:	57                   	push   edi
c001954f:	56                   	push   esi
c0019550:	53                   	push   ebx
c0019551:	51                   	push   ecx
c0019552:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0019556:	8b 46 3c             	mov    eax,DWORD PTR [esi+0x3c]
c0019559:	0f 02 c0             	lar    eax,ax
c001955c:	8b 5e 38             	mov    ebx,DWORD PTR [esi+0x38]
c001955f:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0019563:	8a 4b 01             	mov    cl,BYTE PTR [ebx+0x1]
c0019566:	88 ca                	mov    dl,cl
c0019568:	c0 ea 06             	shr    dl,0x6
c001956b:	88 54 24 01          	mov    BYTE PTR [esp+0x1],dl
c001956f:	89 ca                	mov    edx,ecx
c0019571:	66 c1 ea 03          	shr    dx,0x3
c0019575:	83 e2 07             	and    edx,0x7
c0019578:	80 7c 24 01 03       	cmp    BYTE PTR [esp+0x1],0x3
c001957d:	88 17                	mov    BYTE PTR [edi],dl
c001957f:	0f 84 a6 01 00 00    	je     c001972b <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1dd>
c0019585:	83 e1 07             	and    ecx,0x7
c0019588:	80 f9 04             	cmp    cl,0x4
c001958b:	0f 84 98 00 00 00    	je     c0019629 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xdb>
c0019591:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0019596:	0f 95 c0             	setne  al
c0019599:	80 f9 05             	cmp    cl,0x5
c001959c:	0f 95 c2             	setne  dl
c001959f:	08 c2                	or     dl,al
c00195a1:	74 79                	je     c001961c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xce>
c00195a3:	84 c9                	test   cl,cl
c00195a5:	75 05                	jne    c00195ac <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x5e>
c00195a7:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c00195aa:	eb 3c                	jmp    c00195e8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c00195ac:	80 f9 01             	cmp    cl,0x1
c00195af:	75 05                	jne    c00195b6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x68>
c00195b1:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c00195b4:	eb 32                	jmp    c00195e8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c00195b6:	80 f9 02             	cmp    cl,0x2
c00195b9:	75 05                	jne    c00195c0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x72>
c00195bb:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c00195be:	eb 28                	jmp    c00195e8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c00195c0:	31 c0                	xor    eax,eax
c00195c2:	80 f9 03             	cmp    cl,0x3
c00195c5:	75 05                	jne    c00195cc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x7e>
c00195c7:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c00195ca:	eb 1c                	jmp    c00195e8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c00195cc:	80 f9 05             	cmp    cl,0x5
c00195cf:	75 05                	jne    c00195d6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x88>
c00195d1:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c00195d4:	eb 12                	jmp    c00195e8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c00195d6:	80 f9 06             	cmp    cl,0x6
c00195d9:	75 05                	jne    c00195e0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x92>
c00195db:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00195de:	eb 08                	jmp    c00195e8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c00195e0:	80 f9 07             	cmp    cl,0x7
c00195e3:	75 03                	jne    c00195e8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c00195e5:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c00195e8:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c00195ed:	75 10                	jne    c00195ff <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xb1>
c00195ef:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c00195f3:	b9 03 00 00 00       	mov    ecx,0x3
c00195f8:	01 d0                	add    eax,edx
c00195fa:	e9 37 01 00 00       	jmp    c0019736 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c00195ff:	b9 02 00 00 00       	mov    ecx,0x2
c0019604:	80 7c 24 01 02       	cmp    BYTE PTR [esp+0x1],0x2
c0019609:	0f 85 27 01 00 00    	jne    c0019736 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c001960f:	03 43 02             	add    eax,DWORD PTR [ebx+0x2]
c0019612:	b9 06 00 00 00       	mov    ecx,0x6
c0019617:	e9 1a 01 00 00       	jmp    c0019736 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c001961c:	8b 43 02             	mov    eax,DWORD PTR [ebx+0x2]
c001961f:	b9 06 00 00 00       	mov    ecx,0x6
c0019624:	e9 0f 01 00 00       	jmp    c0019738 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019629:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c001962c:	88 ca                	mov    dl,cl
c001962e:	c0 ea 06             	shr    dl,0x6
c0019631:	88 54 24 02          	mov    BYTE PTR [esp+0x2],dl
c0019635:	89 ca                	mov    edx,ecx
c0019637:	66 c1 ea 03          	shr    dx,0x3
c001963b:	83 e2 07             	and    edx,0x7
c001963e:	80 e1 07             	and    cl,0x7
c0019641:	75 05                	jne    c0019648 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xfa>
c0019643:	8b 7e 2c             	mov    edi,DWORD PTR [esi+0x2c]
c0019646:	eb 4c                	jmp    c0019694 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019648:	80 f9 01             	cmp    cl,0x1
c001964b:	75 05                	jne    c0019652 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x104>
c001964d:	8b 7e 28             	mov    edi,DWORD PTR [esi+0x28]
c0019650:	eb 42                	jmp    c0019694 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019652:	80 f9 02             	cmp    cl,0x2
c0019655:	75 05                	jne    c001965c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x10e>
c0019657:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c001965a:	eb 38                	jmp    c0019694 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c001965c:	80 f9 03             	cmp    cl,0x3
c001965f:	75 05                	jne    c0019666 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x118>
c0019661:	8b 7e 20             	mov    edi,DWORD PTR [esi+0x20]
c0019664:	eb 2e                	jmp    c0019694 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019666:	80 f9 04             	cmp    cl,0x4
c0019669:	75 12                	jne    c001967d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12f>
c001966b:	f6 c4 60             	test   ah,0x60
c001966e:	75 08                	jne    c0019678 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12a>
c0019670:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0019673:	8d 78 14             	lea    edi,[eax+0x14]
c0019676:	eb 1c                	jmp    c0019694 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019678:	8b 7e 44             	mov    edi,DWORD PTR [esi+0x44]
c001967b:	eb 17                	jmp    c0019694 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c001967d:	80 f9 05             	cmp    cl,0x5
c0019680:	75 05                	jne    c0019687 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x139>
c0019682:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c0019685:	eb 0d                	jmp    c0019694 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019687:	80 f9 06             	cmp    cl,0x6
c001968a:	75 05                	jne    c0019691 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x143>
c001968c:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c001968f:	eb 03                	jmp    c0019694 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019691:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c0019694:	84 d2                	test   dl,dl
c0019696:	75 05                	jne    c001969d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x14f>
c0019698:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c001969b:	eb 3c                	jmp    c00196d9 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c001969d:	80 fa 01             	cmp    dl,0x1
c00196a0:	75 05                	jne    c00196a7 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x159>
c00196a2:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c00196a5:	eb 32                	jmp    c00196d9 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c00196a7:	80 fa 02             	cmp    dl,0x2
c00196aa:	75 05                	jne    c00196b1 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x163>
c00196ac:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c00196af:	eb 28                	jmp    c00196d9 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c00196b1:	80 fa 03             	cmp    dl,0x3
c00196b4:	75 05                	jne    c00196bb <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x16d>
c00196b6:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c00196b9:	eb 1e                	jmp    c00196d9 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c00196bb:	31 c0                	xor    eax,eax
c00196bd:	80 fa 04             	cmp    dl,0x4
c00196c0:	74 17                	je     c00196d9 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c00196c2:	80 fa 05             	cmp    dl,0x5
c00196c5:	75 05                	jne    c00196cc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x17e>
c00196c7:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c00196ca:	eb 0d                	jmp    c00196d9 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c00196cc:	80 fa 06             	cmp    dl,0x6
c00196cf:	75 05                	jne    c00196d6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x188>
c00196d1:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00196d4:	eb 03                	jmp    c00196d9 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c00196d6:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c00196d9:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c00196de:	0f 94 c2             	sete   dl
c00196e1:	80 f9 05             	cmp    cl,0x5
c00196e4:	8a 4c 24 02          	mov    cl,BYTE PTR [esp+0x2]
c00196e8:	0f 94 44 24 03       	sete   BYTE PTR [esp+0x3]
c00196ed:	d3 e0                	shl    eax,cl
c00196ef:	22 54 24 03          	and    dl,BYTE PTR [esp+0x3]
c00196f3:	74 0a                	je     c00196ff <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1b1>
c00196f5:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c00196f8:	b9 07 00 00 00       	mov    ecx,0x7
c00196fd:	eb 37                	jmp    c0019736 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c00196ff:	01 f8                	add    eax,edi
c0019701:	b9 03 00 00 00       	mov    ecx,0x3
c0019706:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c001970b:	74 2b                	je     c0019738 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c001970d:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c0019712:	75 0d                	jne    c0019721 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1d3>
c0019714:	0f be 4b 03          	movsx  ecx,BYTE PTR [ebx+0x3]
c0019718:	01 c8                	add    eax,ecx
c001971a:	b9 04 00 00 00       	mov    ecx,0x4
c001971f:	eb 17                	jmp    c0019738 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019721:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c0019724:	b9 07 00 00 00       	mov    ecx,0x7
c0019729:	eb 0d                	jmp    c0019738 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c001972b:	b9 02 00 00 00       	mov    ecx,0x2
c0019730:	b2 01                	mov    dl,0x1
c0019732:	31 c0                	xor    eax,eax
c0019734:	eb 02                	jmp    c0019738 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019736:	31 d2                	xor    edx,edx
c0019738:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001973c:	89 0b                	mov    DWORD PTR [ebx],ecx
c001973e:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0019742:	88 11                	mov    BYTE PTR [ecx],dl
c0019744:	5a                   	pop    edx
c0019745:	5b                   	pop    ebx
c0019746:	5e                   	pop    esi
c0019747:	5f                   	pop    edi
c0019748:	c3                   	ret    

c0019749 <Krnl::smpEntry()>:
c0019749:	eb fe                	jmp    c0019749 <Krnl::smpEntry()>

c001974b <Krnl::startCPU(int)>:
c001974b:	a1 a8 d9 02 c0       	mov    eax,ds:0xc002d9a8
c0019750:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0019757:	0f 84 36 01 00 00    	je     c0019893 <Krnl::startCPU(int)+0x148>
c001975d:	53                   	push   ebx
c001975e:	83 ec 10             	sub    esp,0x10
c0019761:	fa                   	cli    
c0019762:	ff 05 c8 0e 03 c0    	inc    DWORD PTR ds:0xc0030ec8
c0019768:	6a 1b                	push   0x1b
c001976a:	ff 35 a8 d9 02 c0    	push   DWORD PTR ds:0xc002d9a8
c0019770:	e8 cb 53 ff ff       	call   c000eb40 <Computer::rdmsr(unsigned int)>
c0019775:	25 00 f0 ff ff       	and    eax,0xfffff000
c001977a:	89 c3                	mov    ebx,eax
c001977c:	58                   	pop    eax
c001977d:	5a                   	pop    edx
c001977e:	53                   	push   ebx
c001977f:	68 bc b5 02 c0       	push   0xc002b5bc
c0019784:	e8 40 8f ff ff       	call   c00126c9 <Dbg::kprintf(char const*, ...)>
c0019789:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0019793:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019797:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c00197a1:	c1 e0 18             	shl    eax,0x18
c00197a4:	8b 93 10 03 00 00    	mov    edx,DWORD PTR [ebx+0x310]
c00197aa:	83 c4 10             	add    esp,0x10
c00197ad:	81 e2 ff ff ff 00    	and    edx,0xffffff
c00197b3:	09 c2                	or     edx,eax
c00197b5:	89 93 10 03 00 00    	mov    DWORD PTR [ebx+0x310],edx
c00197bb:	8d 93 00 03 00 00    	lea    edx,[ebx+0x300]
c00197c1:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c00197c7:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c00197cd:	80 cd c5             	or     ch,0xc5
c00197d0:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c00197d6:	f3 90                	pause  
c00197d8:	8b 0a                	mov    ecx,DWORD PTR [edx]
c00197da:	0f ba e1 0c          	bt     ecx,0xc
c00197de:	72 f6                	jb     c00197d6 <Krnl::startCPU(int)+0x8b>
c00197e0:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c00197e6:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c00197ec:	09 c1                	or     ecx,eax
c00197ee:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c00197f4:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c00197fa:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c0019800:	80 cd 85             	or     ch,0x85
c0019803:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c0019809:	f3 90                	pause  
c001980b:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001980d:	0f ba e1 0c          	bt     ecx,0xc
c0019811:	72 f6                	jb     c0019809 <Krnl::startCPU(int)+0xbe>
c0019813:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c001981d:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c0019823:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c0019829:	09 c1                	or     ecx,eax
c001982b:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c0019831:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c0019837:	81 e1 00 f8 f0 ff    	and    ecx,0xfff0f800
c001983d:	81 c9 02 06 00 00    	or     ecx,0x602
c0019843:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c0019849:	f3 90                	pause  
c001984b:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001984d:	0f ba e1 0c          	bt     ecx,0xc
c0019851:	72 f6                	jb     c0019849 <Krnl::startCPU(int)+0xfe>
c0019853:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c001985d:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c0019863:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c0019869:	09 c8                	or     eax,ecx
c001986b:	89 83 10 03 00 00    	mov    DWORD PTR [ebx+0x310],eax
c0019871:	8b 83 00 03 00 00    	mov    eax,DWORD PTR [ebx+0x300]
c0019877:	25 00 f8 f0 ff       	and    eax,0xfff0f800
c001987c:	0d 02 06 00 00       	or     eax,0x602
c0019881:	89 83 00 03 00 00    	mov    DWORD PTR [ebx+0x300],eax
c0019887:	f3 90                	pause  
c0019889:	8b 02                	mov    eax,DWORD PTR [edx]
c001988b:	0f ba e0 0c          	bt     eax,0xc
c001988f:	72 f6                	jb     c0019887 <Krnl::startCPU(int)+0x13c>
c0019891:	eb fe                	jmp    c0019891 <Krnl::startCPU(int)+0x146>
c0019893:	c3                   	ret    

c0019894 <Krnl::startCPUs()>:
c0019894:	a1 a8 d9 02 c0       	mov    eax,ds:0xc002d9a8
c0019899:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001989f:	88 c2                	mov    dl,al
c00198a1:	83 e2 0a             	and    edx,0xa
c00198a4:	80 fa 0a             	cmp    dl,0xa
c00198a7:	75 09                	jne    c00198b2 <Krnl::startCPUs()+0x1e>
c00198a9:	a8 01                	test   al,0x1
c00198ab:	74 05                	je     c00198b2 <Krnl::startCPUs()+0x1e>
c00198ad:	e9 e9 68 fe ff       	jmp    c000019b <prepareTramp>
c00198b2:	c3                   	ret    
c00198b3:	90                   	nop

c00198b4 <EnvVarContainer::getEnv(char const*)>:
c00198b4:	57                   	push   edi
c00198b5:	56                   	push   esi
c00198b6:	53                   	push   ebx
c00198b7:	31 db                	xor    ebx,ebx
c00198b9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00198bd:	39 1e                	cmp    DWORD PTR [esi],ebx
c00198bf:	7e 2b                	jle    c00198ec <EnvVarContainer::getEnv(char const*)+0x38>
c00198c1:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c00198c8:	50                   	push   eax
c00198c9:	50                   	push   eax
c00198ca:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00198cd:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c00198d0:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00198d4:	e8 bf 6f fe ff       	call   c0000898 <strcmp>
c00198d9:	83 c4 10             	add    esp,0x10
c00198dc:	85 c0                	test   eax,eax
c00198de:	75 09                	jne    c00198e9 <EnvVarContainer::getEnv(char const*)+0x35>
c00198e0:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00198e3:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c00198e7:	eb 05                	jmp    c00198ee <EnvVarContainer::getEnv(char const*)+0x3a>
c00198e9:	43                   	inc    ebx
c00198ea:	eb d1                	jmp    c00198bd <EnvVarContainer::getEnv(char const*)+0x9>
c00198ec:	31 c0                	xor    eax,eax
c00198ee:	5b                   	pop    ebx
c00198ef:	5e                   	pop    esi
c00198f0:	5f                   	pop    edi
c00198f1:	c3                   	ret    

c00198f2 <EnvVarContainer::setEnv(char const*, char const*)>:
c00198f2:	55                   	push   ebp
c00198f3:	57                   	push   edi
c00198f4:	56                   	push   esi
c00198f5:	53                   	push   ebx
c00198f6:	83 ec 28             	sub    esp,0x28
c00198f9:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c00198fd:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c0019901:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0019905:	56                   	push   esi
c0019906:	e8 61 6e fe ff       	call   c000076c <strlen>
c001990b:	40                   	inc    eax
c001990c:	89 04 24             	mov    DWORD PTR [esp],eax
c001990f:	e8 85 5c ff ff       	call   c000f599 <malloc>
c0019914:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019917:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001991b:	e8 4c 6e fe ff       	call   c000076c <strlen>
c0019920:	40                   	inc    eax
c0019921:	89 04 24             	mov    DWORD PTR [esp],eax
c0019924:	e8 70 5c ff ff       	call   c000f599 <malloc>
c0019929:	89 34 24             	mov    DWORD PTR [esp],esi
c001992c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019930:	e8 37 6e fe ff       	call   c000076c <strlen>
c0019935:	83 c4 0c             	add    esp,0xc
c0019938:	40                   	inc    eax
c0019939:	50                   	push   eax
c001993a:	6a 00                	push   0x0
c001993c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0019940:	e8 0b 6e fe ff       	call   c0000750 <memset>
c0019945:	89 34 24             	mov    DWORD PTR [esp],esi
c0019948:	e8 1f 6e fe ff       	call   c000076c <strlen>
c001994d:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0019951:	8d 48 01             	lea    ecx,[eax+0x1]
c0019954:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019956:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019959:	89 de                	mov    esi,ebx
c001995b:	e8 0c 6e fe ff       	call   c000076c <strlen>
c0019960:	83 c4 0c             	add    esp,0xc
c0019963:	40                   	inc    eax
c0019964:	50                   	push   eax
c0019965:	6a 00                	push   0x0
c0019967:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001996b:	e8 e0 6d fe ff       	call   c0000750 <memset>
c0019970:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019973:	e8 f4 6d fe ff       	call   c000076c <strlen>
c0019978:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001997c:	8d 48 01             	lea    ecx,[eax+0x1]
c001997f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019981:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0019984:	40                   	inc    eax
c0019985:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0019988:	c1 e0 03             	shl    eax,0x3
c001998b:	5a                   	pop    edx
c001998c:	59                   	pop    ecx
c001998d:	50                   	push   eax
c001998e:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0019991:	e8 ef 5b ff ff       	call   c000f585 <realloc>
c0019996:	8d 74 24 18          	lea    esi,[esp+0x18]
c001999a:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001999d:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c00199a0:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c00199a4:	b9 08 00 00 00       	mov    ecx,0x8
c00199a9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00199ab:	83 c4 2c             	add    esp,0x2c
c00199ae:	5b                   	pop    ebx
c00199af:	5e                   	pop    esi
c00199b0:	5f                   	pop    edi
c00199b1:	5d                   	pop    ebp
c00199b2:	c3                   	ret    
c00199b3:	90                   	nop

c00199b4 <EnvVarContainer::deleteEnv(char const*)>:
c00199b4:	c3                   	ret    
c00199b5:	90                   	nop

c00199b6 <EnvVarContainer::loadFrom(char const*, char const*)>:
c00199b6:	55                   	push   ebp
c00199b7:	57                   	push   edi
c00199b8:	56                   	push   esi
c00199b9:	53                   	push   ebx
c00199ba:	81 ec 38 01 00 00    	sub    esp,0x138
c00199c0:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c00199c7:	8b b4 24 54 01 00 00 	mov    esi,DWORD PTR [esp+0x154]
c00199ce:	68 14 01 00 00       	push   0x114
c00199d3:	e8 c1 5b ff ff       	call   c000f599 <malloc>
c00199d8:	83 c4 0c             	add    esp,0xc
c00199db:	89 c3                	mov    ebx,eax
c00199dd:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00199e0:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c00199e7:	50                   	push   eax
c00199e8:	e8 3b 92 ff ff       	call   c0012c28 <File::File(char const*, Process*)>
c00199ed:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00199f0:	e8 05 95 ff ff       	call   c0012efa <File::exists()>
c00199f5:	83 c4 10             	add    esp,0x10
c00199f8:	84 c0                	test   al,al
c00199fa:	75 31                	jne    c0019a2d <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c00199fc:	50                   	push   eax
c00199fd:	50                   	push   eax
c00199fe:	6a 12                	push   0x12
c0019a00:	53                   	push   ebx
c0019a01:	e8 86 92 ff ff       	call   c0012c8c <File::open(FileOpenMode)>
c0019a06:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019a08:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0019a0b:	89 34 24             	mov    DWORD PTR [esp],esi
c0019a0e:	e8 59 6d fe ff       	call   c000076c <strlen>
c0019a13:	5a                   	pop    edx
c0019a14:	31 d2                	xor    edx,edx
c0019a16:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0019a1a:	51                   	push   ecx
c0019a1b:	56                   	push   esi
c0019a1c:	52                   	push   edx
c0019a1d:	50                   	push   eax
c0019a1e:	53                   	push   ebx
c0019a1f:	ff d7                	call   edi
c0019a21:	83 c4 14             	add    esp,0x14
c0019a24:	53                   	push   ebx
c0019a25:	e8 c0 92 ff ff       	call   c0012cea <File::close()>
c0019a2a:	83 c4 10             	add    esp,0x10
c0019a2d:	56                   	push   esi
c0019a2e:	31 f6                	xor    esi,esi
c0019a30:	68 00 01 00 00       	push   0x100
c0019a35:	6a 00                	push   0x0
c0019a37:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0019a3b:	50                   	push   eax
c0019a3c:	e8 0f 6d fe ff       	call   c0000750 <memset>
c0019a41:	5f                   	pop    edi
c0019a42:	58                   	pop    eax
c0019a43:	6a 01                	push   0x1
c0019a45:	53                   	push   ebx
c0019a46:	e8 41 92 ff ff       	call   c0012c8c <File::open(FileOpenMode)>
c0019a4b:	83 c4 10             	add    esp,0x10
c0019a4e:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0019a56:	83 ec 0c             	sub    esp,0xc
c0019a59:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019a5b:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0019a5f:	51                   	push   ecx
c0019a60:	8d 54 24 23          	lea    edx,[esp+0x23]
c0019a64:	52                   	push   edx
c0019a65:	6a 00                	push   0x0
c0019a67:	6a 01                	push   0x1
c0019a69:	53                   	push   ebx
c0019a6a:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0019a6d:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c0019a71:	83 c4 20             	add    esp,0x20
c0019a74:	3c 0d                	cmp    al,0xd
c0019a76:	0f 84 09 01 00 00    	je     c0019b85 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c0019a7c:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0019a81:	0f 84 ef 00 00 00    	je     c0019b76 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c0>
c0019a87:	3c 0a                	cmp    al,0xa
c0019a89:	74 13                	je     c0019a9e <EnvVarContainer::loadFrom(char const*, char const*)+0xe8>
c0019a8b:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0019a90:	74 0c                	je     c0019a9e <EnvVarContainer::loadFrom(char const*, char const*)+0xe8>
c0019a92:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0019a98:	0f 8e d8 00 00 00    	jle    c0019b76 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c0>
c0019a9e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019aa2:	83 ec 0c             	sub    esp,0xc
c0019aa5:	8d 78 01             	lea    edi,[eax+0x1]
c0019aa8:	57                   	push   edi
c0019aa9:	e8 eb 5a ff ff       	call   c000f599 <malloc>
c0019aae:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c0019ab2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0019ab6:	8d 56 04             	lea    edx,[esi+0x4]
c0019ab9:	89 14 24             	mov    DWORD PTR [esp],edx
c0019abc:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0019ac0:	e8 d4 5a ff ff       	call   c000f599 <malloc>
c0019ac5:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0019ac9:	83 c4 0c             	add    esp,0xc
c0019acc:	57                   	push   edi
c0019acd:	6a 00                	push   0x0
c0019acf:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0019ad3:	e8 78 6c fe ff       	call   c0000750 <memset>
c0019ad8:	8d 74 24 30          	lea    esi,[esp+0x30]
c0019adc:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0019ae0:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0019ae4:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019ae6:	83 c4 0c             	add    esp,0xc
c0019ae9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019aed:	52                   	push   edx
c0019aee:	6a 00                	push   0x0
c0019af0:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0019af4:	e8 57 6c fe ff       	call   c0000750 <memset>
c0019af9:	8d 74 24 30          	lea    esi,[esp+0x30]
c0019afd:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0019b01:	89 34 24             	mov    DWORD PTR [esp],esi
c0019b04:	e8 63 6c fe ff       	call   c000076c <strlen>
c0019b09:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c0019b0d:	89 c1                	mov    ecx,eax
c0019b0f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019b11:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0019b14:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0019b17:	40                   	inc    eax
c0019b18:	83 c4 10             	add    esp,0x10
c0019b1b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0019b1e:	85 d2                	test   edx,edx
c0019b20:	75 0c                	jne    c0019b2e <EnvVarContainer::loadFrom(char const*, char const*)+0x178>
c0019b22:	83 ec 0c             	sub    esp,0xc
c0019b25:	6a 08                	push   0x8
c0019b27:	e8 6d 5a ff ff       	call   c000f599 <malloc>
c0019b2c:	eb 0c                	jmp    c0019b3a <EnvVarContainer::loadFrom(char const*, char const*)+0x184>
c0019b2e:	c1 e0 03             	shl    eax,0x3
c0019b31:	51                   	push   ecx
c0019b32:	51                   	push   ecx
c0019b33:	50                   	push   eax
c0019b34:	52                   	push   edx
c0019b35:	e8 4b 5a ff ff       	call   c000f585 <realloc>
c0019b3a:	83 c4 10             	add    esp,0x10
c0019b3d:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0019b40:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0019b43:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c0019b46:	8d 74 24 18          	lea    esi,[esp+0x18]
c0019b4a:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c0019b4e:	b9 08 00 00 00       	mov    ecx,0x8
c0019b53:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019b55:	31 f6                	xor    esi,esi
c0019b57:	50                   	push   eax
c0019b58:	68 00 01 00 00       	push   0x100
c0019b5d:	6a 00                	push   0x0
c0019b5f:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0019b63:	50                   	push   eax
c0019b64:	e8 e7 6b fe ff       	call   c0000750 <memset>
c0019b69:	83 c4 10             	add    esp,0x10
c0019b6c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0019b74:	eb 0f                	jmp    c0019b85 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c0019b76:	3c 3d                	cmp    al,0x3d
c0019b78:	74 07                	je     c0019b81 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cb>
c0019b7a:	88 44 34 20          	mov    BYTE PTR [esp+esi*1+0x20],al
c0019b7e:	46                   	inc    esi
c0019b7f:	eb 04                	jmp    c0019b85 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c0019b81:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0019b85:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0019b8a:	0f 85 c6 fe ff ff    	jne    c0019a56 <EnvVarContainer::loadFrom(char const*, char const*)+0xa0>
c0019b90:	81 c4 2c 01 00 00    	add    esp,0x12c
c0019b96:	5b                   	pop    ebx
c0019b97:	5e                   	pop    esi
c0019b98:	5f                   	pop    edi
c0019b99:	5d                   	pop    ebp
c0019b9a:	c3                   	ret    
c0019b9b:	90                   	nop

c0019b9c <EnvVarContainer::__loadSystem()>:
c0019b9c:	83 ec 10             	sub    esp,0x10
c0019b9f:	68 e0 ce 02 c0       	push   0xc002cee0
c0019ba4:	68 cd b5 02 c0       	push   0xc002b5cd
c0019ba9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019bad:	e8 04 fe ff ff       	call   c00199b6 <EnvVarContainer::loadFrom(char const*, char const*)>
c0019bb2:	83 c4 1c             	add    esp,0x1c
c0019bb5:	c3                   	ret    

c0019bb6 <EnvVarContainer::__loadUser()>:
c0019bb6:	c3                   	ret    
c0019bb7:	90                   	nop

c0019bb8 <EnvVarContainer::EnvVarContainer(Process*)>:
c0019bb8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019bbc:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0019bc2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019bc6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0019bca:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0019bcd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019bd1:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0019bd8:	90                   	nop
c0019bd9:	c3                   	ret    

c0019bda <EnvVarContainer::~EnvVarContainer()>:
c0019bda:	83 ec 0c             	sub    esp,0xc
c0019bdd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019be1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0019be4:	85 c0                	test   eax,eax
c0019be6:	74 1d                	je     c0019c05 <EnvVarContainer::~EnvVarContainer()+0x2b>
c0019be8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019bec:	8b 00                	mov    eax,DWORD PTR [eax]
c0019bee:	85 c0                	test   eax,eax
c0019bf0:	74 13                	je     c0019c05 <EnvVarContainer::~EnvVarContainer()+0x2b>
c0019bf2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019bf6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0019bf9:	83 ec 0c             	sub    esp,0xc
c0019bfc:	50                   	push   eax
c0019bfd:	e8 a7 59 ff ff       	call   c000f5a9 <free>
c0019c02:	83 c4 10             	add    esp,0x10
c0019c05:	90                   	nop
c0019c06:	83 c4 0c             	add    esp,0xc
c0019c09:	c3                   	ret    

c0019c0a <Krnl::getEnv(Process*, char const*)>:
c0019c0a:	53                   	push   ebx
c0019c0b:	83 ec 08             	sub    esp,0x8
c0019c0e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019c12:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0019c16:	39 05 f0 0e 03 c0    	cmp    DWORD PTR ds:0xc0030ef0,eax
c0019c1c:	74 04                	je     c0019c22 <Krnl::getEnv(Process*, char const*)+0x18>
c0019c1e:	85 c0                	test   eax,eax
c0019c20:	75 0b                	jne    c0019c2d <Krnl::getEnv(Process*, char const*)+0x23>
c0019c22:	a1 d4 04 03 c0       	mov    eax,ds:0xc00304d4
c0019c27:	85 c0                	test   eax,eax
c0019c29:	75 19                	jne    c0019c44 <Krnl::getEnv(Process*, char const*)+0x3a>
c0019c2b:	eb 27                	jmp    c0019c54 <Krnl::getEnv(Process*, char const*)+0x4a>
c0019c2d:	52                   	push   edx
c0019c2e:	52                   	push   edx
c0019c2f:	53                   	push   ebx
c0019c30:	ff b0 3a 07 00 00    	push   DWORD PTR [eax+0x73a]
c0019c36:	e8 79 fc ff ff       	call   c00198b4 <EnvVarContainer::getEnv(char const*)>
c0019c3b:	83 c4 10             	add    esp,0x10
c0019c3e:	85 c0                	test   eax,eax
c0019c40:	75 28                	jne    c0019c6a <Krnl::getEnv(Process*, char const*)+0x60>
c0019c42:	eb de                	jmp    c0019c22 <Krnl::getEnv(Process*, char const*)+0x18>
c0019c44:	52                   	push   edx
c0019c45:	52                   	push   edx
c0019c46:	53                   	push   ebx
c0019c47:	50                   	push   eax
c0019c48:	e8 67 fc ff ff       	call   c00198b4 <EnvVarContainer::getEnv(char const*)>
c0019c4d:	83 c4 10             	add    esp,0x10
c0019c50:	85 c0                	test   eax,eax
c0019c52:	75 16                	jne    c0019c6a <Krnl::getEnv(Process*, char const*)+0x60>
c0019c54:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c0019c58:	a1 d8 04 03 c0       	mov    eax,ds:0xc00304d8
c0019c5d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0019c61:	83 c4 08             	add    esp,0x8
c0019c64:	5b                   	pop    ebx
c0019c65:	e9 4a fc ff ff       	jmp    c00198b4 <EnvVarContainer::getEnv(char const*)>
c0019c6a:	83 c4 08             	add    esp,0x8
c0019c6d:	5b                   	pop    ebx
c0019c6e:	c3                   	ret    

c0019c6f <Krnl::setEnvSystem(char const*, char const*)>:
c0019c6f:	83 ec 10             	sub    esp,0x10
c0019c72:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019c76:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019c7a:	ff 35 d8 04 03 c0    	push   DWORD PTR ds:0xc00304d8
c0019c80:	e8 6d fc ff ff       	call   c00198f2 <EnvVarContainer::setEnv(char const*, char const*)>
c0019c85:	83 c4 1c             	add    esp,0x1c
c0019c88:	c3                   	ret    

c0019c89 <Krnl::setEnvUser(char const*, char const*)>:
c0019c89:	a1 d4 04 03 c0       	mov    eax,ds:0xc00304d4
c0019c8e:	85 c0                	test   eax,eax
c0019c90:	74 15                	je     c0019ca7 <Krnl::setEnvUser(char const*, char const*)+0x1e>
c0019c92:	83 ec 10             	sub    esp,0x10
c0019c95:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019c99:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019c9d:	50                   	push   eax
c0019c9e:	e8 4f fc ff ff       	call   c00198f2 <EnvVarContainer::setEnv(char const*, char const*)>
c0019ca3:	83 c4 1c             	add    esp,0x1c
c0019ca6:	c3                   	ret    
c0019ca7:	c3                   	ret    

c0019ca8 <Krnl::setEnvProcess(Process*, char const*, char const*)>:
c0019ca8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019cac:	8b 80 3a 07 00 00    	mov    eax,DWORD PTR [eax+0x73a]
c0019cb2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0019cb6:	e9 37 fc ff ff       	jmp    c00198f2 <EnvVarContainer::setEnv(char const*, char const*)>

c0019cbb <Krnl::deleteEnvSystem(char const*)>:
c0019cbb:	c3                   	ret    

c0019cbc <Krnl::deleteEnvUser(char const*)>:
c0019cbc:	c3                   	ret    

c0019cbd <Krnl::deleteEnvProcess(Process*, char const*)>:
c0019cbd:	c3                   	ret    

c0019cbe <Krnl::newProcessEnv(Process*)>:
c0019cbe:	83 ec 28             	sub    esp,0x28
c0019cc1:	6a 0c                	push   0xc
c0019cc3:	e8 d1 58 ff ff       	call   c000f599 <malloc>
c0019cc8:	5a                   	pop    edx
c0019cc9:	59                   	pop    ecx
c0019cca:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0019cce:	50                   	push   eax
c0019ccf:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019cd3:	e8 e0 fe ff ff       	call   c0019bb8 <EnvVarContainer::EnvVarContainer(Process*)>
c0019cd8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019cdc:	83 c4 2c             	add    esp,0x2c
c0019cdf:	c3                   	ret    

c0019ce0 <Krnl::copyProcessEnv(Process*, Process*)>:
c0019ce0:	57                   	push   edi
c0019ce1:	56                   	push   esi
c0019ce2:	53                   	push   ebx
c0019ce3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019ce7:	83 ec 0c             	sub    esp,0xc
c0019cea:	8b b8 3a 07 00 00    	mov    edi,DWORD PTR [eax+0x73a]
c0019cf0:	6a 0c                	push   0xc
c0019cf2:	e8 a2 58 ff ff       	call   c000f599 <malloc>
c0019cf7:	89 c3                	mov    ebx,eax
c0019cf9:	58                   	pop    eax
c0019cfa:	5a                   	pop    edx
c0019cfb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019cff:	53                   	push   ebx
c0019d00:	e8 b3 fe ff ff       	call   c0019bb8 <EnvVarContainer::EnvVarContainer(Process*)>
c0019d05:	8b 07                	mov    eax,DWORD PTR [edi]
c0019d07:	89 03                	mov    DWORD PTR [ebx],eax
c0019d09:	c1 e0 03             	shl    eax,0x3
c0019d0c:	89 04 24             	mov    DWORD PTR [esp],eax
c0019d0f:	e8 85 58 ff ff       	call   c000f599 <malloc>
c0019d14:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0019d17:	8b 0f                	mov    ecx,DWORD PTR [edi]
c0019d19:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
c0019d1c:	c1 e1 03             	shl    ecx,0x3
c0019d1f:	89 c7                	mov    edi,eax
c0019d21:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019d23:	83 c4 10             	add    esp,0x10
c0019d26:	89 d8                	mov    eax,ebx
c0019d28:	5b                   	pop    ebx
c0019d29:	5e                   	pop    esi
c0019d2a:	5f                   	pop    edi
c0019d2b:	c3                   	ret    

c0019d2c <Krnl::loadSystemEnv()>:
c0019d2c:	53                   	push   ebx
c0019d2d:	83 ec 14             	sub    esp,0x14
c0019d30:	6a 0c                	push   0xc
c0019d32:	e8 62 58 ff ff       	call   c000f599 <malloc>
c0019d37:	89 c3                	mov    ebx,eax
c0019d39:	58                   	pop    eax
c0019d3a:	5a                   	pop    edx
c0019d3b:	ff 35 f0 0e 03 c0    	push   DWORD PTR ds:0xc0030ef0
c0019d41:	53                   	push   ebx
c0019d42:	e8 71 fe ff ff       	call   c0019bb8 <EnvVarContainer::EnvVarContainer(Process*)>
c0019d47:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019d4a:	89 1d d8 04 03 c0    	mov    DWORD PTR ds:0xc00304d8,ebx
c0019d50:	e8 47 fe ff ff       	call   c0019b9c <EnvVarContainer::__loadSystem()>
c0019d55:	83 c4 18             	add    esp,0x18
c0019d58:	5b                   	pop    ebx
c0019d59:	c3                   	ret    

c0019d5a <Krnl::loadUserEnv()>:
c0019d5a:	53                   	push   ebx
c0019d5b:	83 ec 14             	sub    esp,0x14
c0019d5e:	6a 0c                	push   0xc
c0019d60:	e8 34 58 ff ff       	call   c000f599 <malloc>
c0019d65:	89 c3                	mov    ebx,eax
c0019d67:	58                   	pop    eax
c0019d68:	5a                   	pop    edx
c0019d69:	ff 35 f0 0e 03 c0    	push   DWORD PTR ds:0xc0030ef0
c0019d6f:	53                   	push   ebx
c0019d70:	e8 43 fe ff ff       	call   c0019bb8 <EnvVarContainer::EnvVarContainer(Process*)>
c0019d75:	89 1d d4 04 03 c0    	mov    DWORD PTR ds:0xc00304d4,ebx
c0019d7b:	83 c4 18             	add    esp,0x18
c0019d7e:	5b                   	pop    ebx
c0019d7f:	c3                   	ret    

c0019d80 <Krnl::flushEnv()>:
c0019d80:	c3                   	ret    

c0019d81 <Krnl::getProcessTotalEnvCount(Process*)>:
c0019d81:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019d85:	8b 15 d4 04 03 c0    	mov    edx,DWORD PTR ds:0xc00304d4
c0019d8b:	8b 88 3a 07 00 00    	mov    ecx,DWORD PTR [eax+0x73a]
c0019d91:	a1 d8 04 03 c0       	mov    eax,ds:0xc00304d8
c0019d96:	8b 00                	mov    eax,DWORD PTR [eax]
c0019d98:	03 01                	add    eax,DWORD PTR [ecx]
c0019d9a:	85 d2                	test   edx,edx
c0019d9c:	74 02                	je     c0019da0 <Krnl::getProcessTotalEnvCount(Process*)+0x1f>
c0019d9e:	03 02                	add    eax,DWORD PTR [edx]
c0019da0:	c3                   	ret    

c0019da1 <Krnl::getProcessEnvPair(Process*, int)>:
c0019da1:	57                   	push   edi
c0019da2:	56                   	push   esi
c0019da3:	8b 35 d4 04 03 c0    	mov    esi,DWORD PTR ds:0xc00304d4
c0019da9:	53                   	push   ebx
c0019daa:	85 f6                	test   esi,esi
c0019dac:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019db0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019db4:	8b 88 3a 07 00 00    	mov    ecx,DWORD PTR [eax+0x73a]
c0019dba:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0019dbe:	8b 01                	mov    eax,DWORD PTR [ecx]
c0019dc0:	75 16                	jne    c0019dd8 <Krnl::getProcessEnvPair(Process*, int)+0x37>
c0019dc2:	39 c2                	cmp    edx,eax
c0019dc4:	7c 16                	jl     c0019ddc <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c0019dc6:	8b 0d d8 04 03 c0    	mov    ecx,DWORD PTR ds:0xc00304d8
c0019dcc:	8b 31                	mov    esi,DWORD PTR [ecx]
c0019dce:	01 c6                	add    esi,eax
c0019dd0:	39 d6                	cmp    esi,edx
c0019dd2:	7e 3c                	jle    c0019e10 <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c0019dd4:	29 c2                	sub    edx,eax
c0019dd6:	eb 04                	jmp    c0019ddc <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c0019dd8:	39 c2                	cmp    edx,eax
c0019dda:	7d 05                	jge    c0019de1 <Krnl::getProcessEnvPair(Process*, int)+0x40>
c0019ddc:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c0019ddf:	eb 20                	jmp    c0019e01 <Krnl::getProcessEnvPair(Process*, int)+0x60>
c0019de1:	8b 3e                	mov    edi,DWORD PTR [esi]
c0019de3:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0019de6:	39 d1                	cmp    ecx,edx
c0019de8:	7e 04                	jle    c0019dee <Krnl::getProcessEnvPair(Process*, int)+0x4d>
c0019dea:	29 c2                	sub    edx,eax
c0019dec:	eb 10                	jmp    c0019dfe <Krnl::getProcessEnvPair(Process*, int)+0x5d>
c0019dee:	8b 35 d8 04 03 c0    	mov    esi,DWORD PTR ds:0xc00304d8
c0019df4:	03 0e                	add    ecx,DWORD PTR [esi]
c0019df6:	39 d1                	cmp    ecx,edx
c0019df8:	7e 16                	jle    c0019e10 <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c0019dfa:	29 c2                	sub    edx,eax
c0019dfc:	29 fa                	sub    edx,edi
c0019dfe:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0019e01:	8d 14 d0             	lea    edx,[eax+edx*8]
c0019e04:	8b 02                	mov    eax,DWORD PTR [edx]
c0019e06:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c0019e09:	89 03                	mov    DWORD PTR [ebx],eax
c0019e0b:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0019e0e:	eb 1d                	jmp    c0019e2d <Krnl::getProcessEnvPair(Process*, int)+0x8c>
c0019e10:	83 ec 0c             	sub    esp,0xc
c0019e13:	68 ef b5 02 c0       	push   0xc002b5ef
c0019e18:	e8 18 00 00 00       	call   c0019e35 <Krnl::panic(char const*)>
c0019e1d:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0019e23:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0019e2a:	83 c4 10             	add    esp,0x10
c0019e2d:	89 d8                	mov    eax,ebx
c0019e2f:	5b                   	pop    ebx
c0019e30:	5e                   	pop    esi
c0019e31:	5f                   	pop    edi
c0019e32:	c2 04 00             	ret    0x4

c0019e35 <Krnl::panic(char const*)>:
c0019e35:	55                   	push   ebp
c0019e36:	89 e5                	mov    ebp,esp
c0019e38:	53                   	push   ebx
c0019e39:	83 ec 10             	sub    esp,0x10
c0019e3c:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0019e3f:	fa                   	cli    
c0019e40:	c6 05 e4 04 03 c0 01 	mov    BYTE PTR ds:0xc00304e4,0x1
c0019e47:	53                   	push   ebx
c0019e48:	e8 a6 57 ff ff       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c0019e4d:	58                   	pop    eax
c0019e4e:	c6 05 e0 c8 02 c0 00 	mov    BYTE PTR ds:0xc002c8e0,0x0
c0019e55:	5a                   	pop    edx
c0019e56:	53                   	push   ebx
c0019e57:	68 09 b6 02 c0       	push   0xc002b609
c0019e5c:	e8 68 88 ff ff       	call   c00126c9 <Dbg::kprintf(char const*, ...)>
c0019e61:	59                   	pop    ecx
c0019e62:	a1 f0 0e 03 c0       	mov    eax,ds:0xc0030ef0
c0019e67:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019e6d:	e8 e1 64 ff ff       	call   c0010353 <setActiveTerminal(VgaText*)>
c0019e72:	83 c4 0c             	add    esp,0xc
c0019e75:	a1 f0 0e 03 c0       	mov    eax,ds:0xc0030ef0
c0019e7a:	6a 01                	push   0x1
c0019e7c:	6a 0f                	push   0xf
c0019e7e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019e84:	e8 29 63 ff ff       	call   c00101b2 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0019e89:	58                   	pop    eax
c0019e8a:	a1 f0 0e 03 c0       	mov    eax,ds:0xc0030ef0
c0019e8f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019e95:	e8 3a 68 ff ff       	call   c00106d4 <VgaText::clearScreen()>
c0019e9a:	58                   	pop    eax
c0019e9b:	a1 f0 0e 03 c0       	mov    eax,ds:0xc0030ef0
c0019ea0:	5a                   	pop    edx
c0019ea1:	68 22 b6 02 c0       	push   0xc002b622
c0019ea6:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019eac:	e8 af 69 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c0019eb1:	59                   	pop    ecx
c0019eb2:	58                   	pop    eax
c0019eb3:	a1 f0 0e 03 c0       	mov    eax,ds:0xc0030ef0
c0019eb8:	68 c8 b6 02 c0       	push   0xc002b6c8
c0019ebd:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019ec3:	e8 98 69 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c0019ec8:	58                   	pop    eax
c0019ec9:	a1 f0 0e 03 c0       	mov    eax,ds:0xc0030ef0
c0019ece:	5a                   	pop    edx
c0019ecf:	68 3e b6 02 c0       	push   0xc002b63e
c0019ed4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019eda:	e8 81 69 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c0019edf:	59                   	pop    ecx
c0019ee0:	58                   	pop    eax
c0019ee1:	a1 f0 0e 03 c0       	mov    eax,ds:0xc0030ef0
c0019ee6:	53                   	push   ebx
c0019ee7:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019eed:	e8 6e 69 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c0019ef2:	58                   	pop    eax
c0019ef3:	a1 f0 0e 03 c0       	mov    eax,ds:0xc0030ef0
c0019ef8:	5a                   	pop    edx
c0019ef9:	68 5e b6 02 c0       	push   0xc002b65e
c0019efe:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019f04:	e8 57 69 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c0019f09:	a1 e0 04 03 c0       	mov    eax,ds:0xc00304e0
c0019f0e:	83 c4 10             	add    esp,0x10
c0019f11:	85 c0                	test   eax,eax
c0019f13:	74 02                	je     c0019f17 <Krnl::panic(char const*)+0xe2>
c0019f15:	ff d0                	call   eax
c0019f17:	83 ec 0c             	sub    esp,0xc
c0019f1a:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0019f1d:	e8 8c 30 00 00       	call   c001cfae <Thr::getDriverNameFromAddress(unsigned long)>
c0019f22:	83 c4 10             	add    esp,0x10
c0019f25:	89 c3                	mov    ebx,eax
c0019f27:	85 c0                	test   eax,eax
c0019f29:	0f 84 4e 02 00 00    	je     c001a17d <Krnl::panic(char const*)+0x348>
c0019f2f:	83 ec 08             	sub    esp,0x8
c0019f32:	a1 f0 0e 03 c0       	mov    eax,ds:0xc0030ef0
c0019f37:	68 04 b7 02 c0       	push   0xc002b704
c0019f3c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019f42:	e8 19 69 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c0019f47:	58                   	pop    eax
c0019f48:	a1 f0 0e 03 c0       	mov    eax,ds:0xc0030ef0
c0019f4d:	5a                   	pop    edx
c0019f4e:	68 3e b6 02 c0       	push   0xc002b63e
c0019f53:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019f59:	e8 02 69 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c0019f5e:	59                   	pop    ecx
c0019f5f:	58                   	pop    eax
c0019f60:	a1 f0 0e 03 c0       	mov    eax,ds:0xc0030ef0
c0019f65:	53                   	push   ebx
c0019f66:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019f6c:	e8 ef 68 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c0019f71:	83 c4 10             	add    esp,0x10
c0019f74:	83 ec 08             	sub    esp,0x8
c0019f77:	a1 f0 0e 03 c0       	mov    eax,ds:0xc0030ef0
c0019f7c:	68 5d b6 02 c0       	push   0xc002b65d
c0019f81:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019f87:	e8 d4 68 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c0019f8c:	58                   	pop    eax
c0019f8d:	a1 f0 0e 03 c0       	mov    eax,ds:0xc0030ef0
c0019f92:	5a                   	pop    edx
c0019f93:	68 5c b7 02 c0       	push   0xc002b75c
c0019f98:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019f9e:	e8 bd 68 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c0019fa3:	59                   	pop    ecx
c0019fa4:	a1 f0 0e 03 c0       	mov    eax,ds:0xc0030ef0
c0019fa9:	5b                   	pop    ebx
c0019faa:	68 9c b7 02 c0       	push   0xc002b79c
c0019faf:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019fb5:	e8 a6 68 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c0019fba:	58                   	pop    eax
c0019fbb:	a1 f0 0e 03 c0       	mov    eax,ds:0xc0030ef0
c0019fc0:	5a                   	pop    edx
c0019fc1:	68 49 b6 02 c0       	push   0xc002b649
c0019fc6:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019fcc:	e8 8f 68 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c0019fd1:	59                   	pop    ecx
c0019fd2:	5b                   	pop    ebx
c0019fd3:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0019fd6:	68 61 b6 02 c0       	push   0xc002b661
c0019fdb:	e8 e9 86 ff ff       	call   c00126c9 <Dbg::kprintf(char const*, ...)>
c0019fe0:	58                   	pop    eax
c0019fe1:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0019fe4:	5a                   	pop    edx
c0019fe5:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0019fe8:	68 6a b6 02 c0       	push   0xc002b66a
c0019fed:	e8 d7 86 ff ff       	call   c00126c9 <Dbg::kprintf(char const*, ...)>
c0019ff2:	59                   	pop    ecx
c0019ff3:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0019ff6:	5b                   	pop    ebx
c0019ff7:	8b 00                	mov    eax,DWORD PTR [eax]
c0019ff9:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0019ffc:	68 73 b6 02 c0       	push   0xc002b673
c001a001:	e8 c3 86 ff ff       	call   c00126c9 <Dbg::kprintf(char const*, ...)>
c001a006:	58                   	pop    eax
c001a007:	a1 f0 0e 03 c0       	mov    eax,ds:0xc0030ef0
c001a00c:	5a                   	pop    edx
c001a00d:	68 e0 b7 02 c0       	push   0xc002b7e0
c001a012:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a018:	e8 43 68 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c001a01d:	59                   	pop    ecx
c001a01e:	a1 f0 0e 03 c0       	mov    eax,ds:0xc0030ef0
c001a023:	5b                   	pop    ebx
c001a024:	68 7c b6 02 c0       	push   0xc002b67c
c001a029:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a02f:	e8 2c 68 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c001a034:	0f 20 c0             	mov    eax,cr0
c001a037:	5a                   	pop    edx
c001a038:	59                   	pop    ecx
c001a039:	50                   	push   eax
c001a03a:	a1 f0 0e 03 c0       	mov    eax,ds:0xc0030ef0
c001a03f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a045:	e8 d0 67 ff ff       	call   c001081a <VgaText::putx(unsigned int)>
c001a04a:	5b                   	pop    ebx
c001a04b:	58                   	pop    eax
c001a04c:	a1 f0 0e 03 c0       	mov    eax,ds:0xc0030ef0
c001a051:	68 86 b6 02 c0       	push   0xc002b686
c001a056:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a05c:	e8 ff 67 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c001a061:	0f 20 d0             	mov    eax,cr2
c001a064:	5a                   	pop    edx
c001a065:	59                   	pop    ecx
c001a066:	50                   	push   eax
c001a067:	a1 f0 0e 03 c0       	mov    eax,ds:0xc0030ef0
c001a06c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a072:	e8 a3 67 ff ff       	call   c001081a <VgaText::putx(unsigned int)>
c001a077:	5b                   	pop    ebx
c001a078:	58                   	pop    eax
c001a079:	a1 f0 0e 03 c0       	mov    eax,ds:0xc0030ef0
c001a07e:	68 90 b6 02 c0       	push   0xc002b690
c001a083:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a089:	e8 d2 67 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c001a08e:	0f 20 d8             	mov    eax,cr3
c001a091:	5a                   	pop    edx
c001a092:	59                   	pop    ecx
c001a093:	50                   	push   eax
c001a094:	a1 f0 0e 03 c0       	mov    eax,ds:0xc0030ef0
c001a099:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a09f:	e8 76 67 ff ff       	call   c001081a <VgaText::putx(unsigned int)>
c001a0a4:	5b                   	pop    ebx
c001a0a5:	58                   	pop    eax
c001a0a6:	a1 f0 0e 03 c0       	mov    eax,ds:0xc0030ef0
c001a0ab:	68 a3 b6 02 c0       	push   0xc002b6a3
c001a0b0:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a0b6:	e8 a5 67 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c001a0bb:	0f 20 e0             	mov    eax,cr4
c001a0be:	5a                   	pop    edx
c001a0bf:	59                   	pop    ecx
c001a0c0:	50                   	push   eax
c001a0c1:	a1 f0 0e 03 c0       	mov    eax,ds:0xc0030ef0
c001a0c6:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a0cc:	e8 49 67 ff ff       	call   c001081a <VgaText::putx(unsigned int)>
c001a0d1:	5b                   	pop    ebx
c001a0d2:	58                   	pop    eax
c001a0d3:	a1 f0 0e 03 c0       	mov    eax,ds:0xc0030ef0
c001a0d8:	68 ad b6 02 c0       	push   0xc002b6ad
c001a0dd:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a0e3:	e8 78 67 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c001a0e8:	5a                   	pop    edx
c001a0e9:	a1 f0 0e 03 c0       	mov    eax,ds:0xc0030ef0
c001a0ee:	59                   	pop    ecx
c001a0ef:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001a0f5:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001a0f8:	50                   	push   eax
c001a0f9:	e8 1c 67 ff ff       	call   c001081a <VgaText::putx(unsigned int)>
c001a0fe:	5b                   	pop    ebx
c001a0ff:	58                   	pop    eax
c001a100:	a1 f0 0e 03 c0       	mov    eax,ds:0xc0030ef0
c001a105:	68 c4 b6 02 c0       	push   0xc002b6c4
c001a10a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a110:	e8 4b 67 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c001a115:	5a                   	pop    edx
c001a116:	a1 f0 0e 03 c0       	mov    eax,ds:0xc0030ef0
c001a11b:	59                   	pop    ecx
c001a11c:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001a122:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001a125:	ff 72 04             	push   DWORD PTR [edx+0x4]
c001a128:	50                   	push   eax
c001a129:	e8 ec 66 ff ff       	call   c001081a <VgaText::putx(unsigned int)>
c001a12e:	5b                   	pop    ebx
c001a12f:	58                   	pop    eax
c001a130:	a1 f0 0e 03 c0       	mov    eax,ds:0xc0030ef0
c001a135:	68 c4 b6 02 c0       	push   0xc002b6c4
c001a13a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a140:	e8 1b 67 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c001a145:	a1 f0 0e 03 c0       	mov    eax,ds:0xc0030ef0
c001a14a:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001a14d:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001a153:	8b 12                	mov    edx,DWORD PTR [edx]
c001a155:	59                   	pop    ecx
c001a156:	5b                   	pop    ebx
c001a157:	ff 72 04             	push   DWORD PTR [edx+0x4]
c001a15a:	50                   	push   eax
c001a15b:	e8 ba 66 ff ff       	call   c001081a <VgaText::putx(unsigned int)>
c001a160:	83 c4 10             	add    esp,0x10
c001a163:	b2 fe                	mov    dl,0xfe
c001a165:	e4 60                	in     al,0x60
c001a167:	3c 1c                	cmp    al,0x1c
c001a169:	74 04                	je     c001a16f <Krnl::panic(char const*)+0x33a>
c001a16b:	3c 5a                	cmp    al,0x5a
c001a16d:	75 f6                	jne    c001a165 <Krnl::panic(char const*)+0x330>
c001a16f:	e4 64                	in     al,0x64
c001a171:	a8 02                	test   al,0x2
c001a173:	75 fa                	jne    c001a16f <Krnl::panic(char const*)+0x33a>
c001a175:	88 d0                	mov    al,dl
c001a177:	e6 64                	out    0x64,al
c001a179:	fa                   	cli    
c001a17a:	f4                   	hlt    
c001a17b:	eb e8                	jmp    c001a165 <Krnl::panic(char const*)+0x330>
c001a17d:	50                   	push   eax
c001a17e:	50                   	push   eax
c001a17f:	a1 f0 0e 03 c0       	mov    eax,ds:0xc0030ef0
c001a184:	68 30 b7 02 c0       	push   0xc002b730
c001a189:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a18f:	e8 cc 66 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c001a194:	58                   	pop    eax
c001a195:	a1 f0 0e 03 c0       	mov    eax,ds:0xc0030ef0
c001a19a:	5a                   	pop    edx
c001a19b:	68 3e b6 02 c0       	push   0xc002b63e
c001a1a0:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a1a6:	e8 b5 66 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c001a1ab:	59                   	pop    ecx
c001a1ac:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a1b1:	5b                   	pop    ebx
c001a1b2:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001a1b5:	83 c0 0c             	add    eax,0xc
c001a1b8:	50                   	push   eax
c001a1b9:	a1 f0 0e 03 c0       	mov    eax,ds:0xc0030ef0
c001a1be:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a1c4:	e8 97 66 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c001a1c9:	83 c4 10             	add    esp,0x10
c001a1cc:	e9 a3 fd ff ff       	jmp    c0019f74 <Krnl::panic(char const*)+0x13f>

c001a1d1 <Net::switchEndian16(unsigned short)>:
c001a1d1:	83 ec 04             	sub    esp,0x4
c001a1d4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a1d8:	66 89 04 24          	mov    WORD PTR [esp],ax
c001a1dc:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c001a1e0:	c1 f8 08             	sar    eax,0x8
c001a1e3:	89 c2                	mov    edx,eax
c001a1e5:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c001a1e9:	c1 e0 08             	shl    eax,0x8
c001a1ec:	09 d0                	or     eax,edx
c001a1ee:	83 c4 04             	add    esp,0x4
c001a1f1:	c3                   	ret    

c001a1f2 <Net::switchEndian32(unsigned int)>:
c001a1f2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a1f6:	c1 e8 18             	shr    eax,0x18
c001a1f9:	89 c2                	mov    edx,eax
c001a1fb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a1ff:	c1 e0 08             	shl    eax,0x8
c001a202:	25 00 00 ff 00       	and    eax,0xff0000
c001a207:	09 c2                	or     edx,eax
c001a209:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a20d:	c1 e8 08             	shr    eax,0x8
c001a210:	25 00 ff 00 00       	and    eax,0xff00
c001a215:	09 c2                	or     edx,eax
c001a217:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a21b:	c1 e0 18             	shl    eax,0x18
c001a21e:	09 d0                	or     eax,edx
c001a220:	c3                   	ret    

c001a221 <Net::crc32Calc(unsigned char*, int)>:
c001a221:	83 ec 10             	sub    esp,0x10
c001a224:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001a229:	75 07                	jne    c001a232 <Net::crc32Calc(unsigned char*, int)+0x11>
c001a22b:	b8 00 00 00 00       	mov    eax,0x0
c001a230:	eb 7c                	jmp    c001a2ae <Net::crc32Calc(unsigned char*, int)+0x8d>
c001a232:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c001a237:	7f 07                	jg     c001a240 <Net::crc32Calc(unsigned char*, int)+0x1f>
c001a239:	b8 00 00 00 00       	mov    eax,0x0
c001a23e:	eb 6e                	jmp    c001a2ae <Net::crc32Calc(unsigned char*, int)+0x8d>
c001a240:	c7 44 24 04 ff ff ff ff 	mov    DWORD PTR [esp+0x4],0xffffffff
c001a248:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001a250:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a254:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c001a258:	7d 4e                	jge    c001a2a8 <Net::crc32Calc(unsigned char*, int)+0x87>
c001a25a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a25e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a262:	01 d0                	add    eax,edx
c001a264:	8a 00                	mov    al,BYTE PTR [eax]
c001a266:	0f b6 c0             	movzx  eax,al
c001a269:	31 44 24 04          	xor    DWORD PTR [esp+0x4],eax
c001a26d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001a275:	83 7c 24 0c 07       	cmp    DWORD PTR [esp+0xc],0x7
c001a27a:	7f 26                	jg     c001a2a2 <Net::crc32Calc(unsigned char*, int)+0x81>
c001a27c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a280:	83 e0 01             	and    eax,0x1
c001a283:	74 0d                	je     c001a292 <Net::crc32Calc(unsigned char*, int)+0x71>
c001a285:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a289:	d1 e8                	shr    eax,1
c001a28b:	35 20 83 b8 ed       	xor    eax,0xedb88320
c001a290:	eb 06                	jmp    c001a298 <Net::crc32Calc(unsigned char*, int)+0x77>
c001a292:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a296:	d1 e8                	shr    eax,1
c001a298:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a29c:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001a2a0:	eb d3                	jmp    c001a275 <Net::crc32Calc(unsigned char*, int)+0x54>
c001a2a2:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c001a2a6:	eb a8                	jmp    c001a250 <Net::crc32Calc(unsigned char*, int)+0x2f>
c001a2a8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a2ac:	f7 d0                	not    eax
c001a2ae:	83 c4 10             	add    esp,0x10
c001a2b1:	c3                   	ret    

c001a2b2 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)>:
c001a2b2:	57                   	push   edi
c001a2b3:	56                   	push   esi
c001a2b4:	53                   	push   ebx
c001a2b5:	83 ec 60             	sub    esp,0x60
c001a2b8:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a2bf:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c001a2c3:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c001a2cb:	83 7c 24 5c 06       	cmp    DWORD PTR [esp+0x5c],0x6
c001a2d0:	7f 1a                	jg     c001a2ec <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x3a>
c001a2d2:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a2d9:	8d 50 01             	lea    edx,[eax+0x1]
c001a2dc:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001a2e3:	c6 00 aa             	mov    BYTE PTR [eax],0xaa
c001a2e6:	ff 44 24 5c          	inc    DWORD PTR [esp+0x5c]
c001a2ea:	eb df                	jmp    c001a2cb <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x19>
c001a2ec:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a2f3:	8d 50 01             	lea    edx,[eax+0x1]
c001a2f6:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001a2fd:	c6 00 ab             	mov    BYTE PTR [eax],0xab
c001a300:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a307:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001a30b:	8d 44 24 7e          	lea    eax,[esp+0x7e]
c001a30f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001a313:	c7 44 24 10 06 00 00 00 	mov    DWORD PTR [esp+0x10],0x6
c001a31b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001a31f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a323:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a327:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001a32b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001a32f:	89 c6                	mov    esi,eax
c001a331:	89 d7                	mov    edi,edx
c001a333:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a335:	89 c8                	mov    eax,ecx
c001a337:	89 fa                	mov    edx,edi
c001a339:	89 f3                	mov    ebx,esi
c001a33b:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c001a33f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001a343:	89 04 24             	mov    DWORD PTR [esp],eax
c001a346:	83 84 24 88 00 00 00 06 	add    DWORD PTR [esp+0x88],0x6
c001a34e:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a355:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001a359:	8d 44 24 78          	lea    eax,[esp+0x78]
c001a35d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001a361:	c7 44 24 2c 06 00 00 00 	mov    DWORD PTR [esp+0x2c],0x6
c001a369:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a36d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001a371:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001a375:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001a379:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c001a37d:	89 c6                	mov    esi,eax
c001a37f:	89 d7                	mov    edi,edx
c001a381:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a383:	89 c8                	mov    eax,ecx
c001a385:	89 fa                	mov    edx,edi
c001a387:	89 f3                	mov    ebx,esi
c001a389:	89 5c 24 24          	mov    DWORD PTR [esp+0x24],ebx
c001a38d:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c001a391:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a395:	83 84 24 88 00 00 00 06 	add    DWORD PTR [esp+0x88],0x6
c001a39d:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a3a4:	0f b7 c0             	movzx  eax,ax
c001a3a7:	c1 f8 08             	sar    eax,0x8
c001a3aa:	89 c1                	mov    ecx,eax
c001a3ac:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a3b3:	8d 50 01             	lea    edx,[eax+0x1]
c001a3b6:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001a3bd:	88 ca                	mov    dl,cl
c001a3bf:	88 10                	mov    BYTE PTR [eax],dl
c001a3c1:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c001a3c8:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a3cf:	8d 48 01             	lea    ecx,[eax+0x1]
c001a3d2:	89 8c 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],ecx
c001a3d9:	88 10                	mov    BYTE PTR [eax],dl
c001a3db:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c001a3df:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c001a3e3:	8b 8c 24 88 00 00 00 	mov    ecx,DWORD PTR [esp+0x88]
c001a3ea:	89 4c 24 50          	mov    DWORD PTR [esp+0x50],ecx
c001a3ee:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c001a3f2:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c001a3f6:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001a3fa:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001a3fe:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001a402:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c001a406:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c001a40a:	89 c6                	mov    esi,eax
c001a40c:	89 d7                	mov    edi,edx
c001a40e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a410:	89 c8                	mov    eax,ecx
c001a412:	89 fa                	mov    edx,edi
c001a414:	89 f3                	mov    ebx,esi
c001a416:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c001a41a:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c001a41e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001a422:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c001a426:	01 84 24 88 00 00 00 	add    DWORD PTR [esp+0x88],eax
c001a42d:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a434:	2b 44 24 58          	sub    eax,DWORD PTR [esp+0x58]
c001a438:	50                   	push   eax
c001a439:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001a43d:	e8 df fd ff ff       	call   c001a221 <Net::crc32Calc(unsigned char*, int)>
c001a442:	83 c4 08             	add    esp,0x8
c001a445:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001a449:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001a44d:	c1 e8 18             	shr    eax,0x18
c001a450:	89 c1                	mov    ecx,eax
c001a452:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a459:	8d 50 01             	lea    edx,[eax+0x1]
c001a45c:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001a463:	88 ca                	mov    dl,cl
c001a465:	88 10                	mov    BYTE PTR [eax],dl
c001a467:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001a46b:	c1 e8 10             	shr    eax,0x10
c001a46e:	89 c1                	mov    ecx,eax
c001a470:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a477:	8d 50 01             	lea    edx,[eax+0x1]
c001a47a:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001a481:	88 ca                	mov    dl,cl
c001a483:	88 10                	mov    BYTE PTR [eax],dl
c001a485:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001a489:	c1 e8 08             	shr    eax,0x8
c001a48c:	89 c1                	mov    ecx,eax
c001a48e:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a495:	8d 50 01             	lea    edx,[eax+0x1]
c001a498:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001a49f:	88 ca                	mov    dl,cl
c001a4a1:	88 10                	mov    BYTE PTR [eax],dl
c001a4a3:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a4aa:	8d 50 01             	lea    edx,[eax+0x1]
c001a4ad:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001a4b4:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c001a4b8:	88 10                	mov    BYTE PTR [eax],dl
c001a4ba:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c001a4be:	83 c4 60             	add    esp,0x60
c001a4c1:	5b                   	pop    ebx
c001a4c2:	5e                   	pop    esi
c001a4c3:	5f                   	pop    edi
c001a4c4:	c3                   	ret    

c001a4c5 <Net::unwrapEthernetFrame(unsigned char*, int)>:
c001a4c5:	57                   	push   edi
c001a4c6:	56                   	push   esi
c001a4c7:	53                   	push   ebx
c001a4c8:	83 ec 70             	sub    esp,0x70
c001a4cb:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a4d2:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c001a4d6:	83 84 24 84 00 00 00 08 	add    DWORD PTR [esp+0x84],0x8
c001a4de:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001a4e5:	83 c0 0e             	add    eax,0xe
c001a4e8:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001a4ec:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a4f3:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001a4f7:	c7 44 24 2c 06 00 00 00 	mov    DWORD PTR [esp+0x2c],0x6
c001a4ff:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a503:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001a507:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001a50b:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001a50f:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c001a513:	89 c6                	mov    esi,eax
c001a515:	89 d7                	mov    edi,edx
c001a517:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a519:	89 c8                	mov    eax,ecx
c001a51b:	89 fa                	mov    edx,edi
c001a51d:	89 f3                	mov    ebx,esi
c001a51f:	89 5c 24 24          	mov    DWORD PTR [esp+0x24],ebx
c001a523:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c001a527:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a52b:	83 84 24 84 00 00 00 06 	add    DWORD PTR [esp+0x84],0x6
c001a533:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001a53a:	83 c0 08             	add    eax,0x8
c001a53d:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c001a541:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a548:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001a54c:	c7 44 24 48 06 00 00 00 	mov    DWORD PTR [esp+0x48],0x6
c001a554:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001a558:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001a55c:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001a560:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c001a564:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c001a568:	89 c6                	mov    esi,eax
c001a56a:	89 d7                	mov    edi,edx
c001a56c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a56e:	89 c8                	mov    eax,ecx
c001a570:	89 fa                	mov    edx,edi
c001a572:	89 f3                	mov    ebx,esi
c001a574:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c001a578:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c001a57c:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001a580:	83 84 24 84 00 00 00 06 	add    DWORD PTR [esp+0x84],0x6
c001a588:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a58f:	8d 50 01             	lea    edx,[eax+0x1]
c001a592:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001a599:	8a 00                	mov    al,BYTE PTR [eax]
c001a59b:	0f b6 c0             	movzx  eax,al
c001a59e:	66 89 44 24 6a       	mov    WORD PTR [esp+0x6a],ax
c001a5a3:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a5aa:	8d 50 01             	lea    edx,[eax+0x1]
c001a5ad:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001a5b4:	8a 00                	mov    al,BYTE PTR [eax]
c001a5b6:	0f b6 c0             	movzx  eax,al
c001a5b9:	66 89 44 24 68       	mov    WORD PTR [esp+0x68],ax
c001a5be:	0f b7 44 24 6a       	movzx  eax,WORD PTR [esp+0x6a]
c001a5c3:	c1 e0 08             	shl    eax,0x8
c001a5c6:	89 c2                	mov    edx,eax
c001a5c8:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001a5cc:	09 d0                	or     eax,edx
c001a5ce:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c001a5d5:	66 89 42 14          	mov    WORD PTR [edx+0x14],ax
c001a5d9:	83 bc 24 88 00 00 00 ff 	cmp    DWORD PTR [esp+0x88],0xffffffff
c001a5e1:	75 46                	jne    c001a629 <Net::unwrapEthernetFrame(unsigned char*, int)+0x164>
c001a5e3:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001a5ea:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001a5ed:	66 3d dc 05          	cmp    ax,0x5dc
c001a5f1:	77 16                	ja     c001a609 <Net::unwrapEthernetFrame(unsigned char*, int)+0x144>
c001a5f3:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001a5fa:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001a5fd:	0f b7 c0             	movzx  eax,ax
c001a600:	89 84 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],eax
c001a607:	eb 20                	jmp    c001a629 <Net::unwrapEthernetFrame(unsigned char*, int)+0x164>
c001a609:	83 ec 0c             	sub    esp,0xc
c001a60c:	68 08 b8 02 c0       	push   0xc002b808
c001a611:	e8 b3 80 ff ff       	call   c00126c9 <Dbg::kprintf(char const*, ...)>
c001a616:	83 c4 10             	add    esp,0x10
c001a619:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001a620:	c6 40 16 00          	mov    BYTE PTR [eax+0x16],0x0
c001a624:	e9 17 01 00 00       	jmp    c001a740 <Net::unwrapEthernetFrame(unsigned char*, int)+0x27b>
c001a629:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a630:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c001a637:	8b 12                	mov    edx,DWORD PTR [edx]
c001a639:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001a63d:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c001a644:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c001a648:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001a64c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001a650:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a654:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a658:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001a65c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001a660:	89 c6                	mov    esi,eax
c001a662:	89 d7                	mov    edi,edx
c001a664:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a666:	89 c8                	mov    eax,ecx
c001a668:	89 fa                	mov    edx,edi
c001a66a:	89 f3                	mov    ebx,esi
c001a66c:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c001a670:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001a674:	89 04 24             	mov    DWORD PTR [esp],eax
c001a677:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a67e:	01 84 24 84 00 00 00 	add    DWORD PTR [esp+0x84],eax
c001a685:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a68c:	8d 50 01             	lea    edx,[eax+0x1]
c001a68f:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001a696:	8a 00                	mov    al,BYTE PTR [eax]
c001a698:	0f b6 c0             	movzx  eax,al
c001a69b:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c001a69f:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a6a6:	8d 50 01             	lea    edx,[eax+0x1]
c001a6a9:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001a6b0:	8a 00                	mov    al,BYTE PTR [eax]
c001a6b2:	0f b6 c0             	movzx  eax,al
c001a6b5:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c001a6b9:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a6c0:	8d 50 01             	lea    edx,[eax+0x1]
c001a6c3:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001a6ca:	8a 00                	mov    al,BYTE PTR [eax]
c001a6cc:	0f b6 c0             	movzx  eax,al
c001a6cf:	89 44 24 5c          	mov    DWORD PTR [esp+0x5c],eax
c001a6d3:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a6da:	8d 50 01             	lea    edx,[eax+0x1]
c001a6dd:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001a6e4:	8a 00                	mov    al,BYTE PTR [eax]
c001a6e6:	0f b6 c0             	movzx  eax,al
c001a6e9:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c001a6ed:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c001a6f1:	c1 e0 18             	shl    eax,0x18
c001a6f4:	89 c2                	mov    edx,eax
c001a6f6:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c001a6fa:	c1 e0 10             	shl    eax,0x10
c001a6fd:	09 c2                	or     edx,eax
c001a6ff:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c001a703:	c1 e0 08             	shl    eax,0x8
c001a706:	09 d0                	or     eax,edx
c001a708:	0b 44 24 58          	or     eax,DWORD PTR [esp+0x58]
c001a70c:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001a710:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a717:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c001a71b:	83 e8 04             	sub    eax,0x4
c001a71e:	83 ec 08             	sub    esp,0x8
c001a721:	50                   	push   eax
c001a722:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c001a726:	e8 f6 fa ff ff       	call   c001a221 <Net::crc32Calc(unsigned char*, int)>
c001a72b:	83 c4 10             	add    esp,0x10
c001a72e:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c001a732:	0f 94 c2             	sete   dl
c001a735:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001a73c:	88 50 16             	mov    BYTE PTR [eax+0x16],dl
c001a73f:	90                   	nop
c001a740:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001a747:	83 c4 70             	add    esp,0x70
c001a74a:	5b                   	pop    ebx
c001a74b:	5e                   	pop    esi
c001a74c:	5f                   	pop    edi
c001a74d:	c2 04 00             	ret    0x4

c001a750 <Reg::findLineFromLoadedData(char*, char*, char*)>:
c001a750:	55                   	push   ebp
c001a751:	57                   	push   edi
c001a752:	56                   	push   esi
c001a753:	53                   	push   ebx
c001a754:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001a75a:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c001a761:	8a 1e                	mov    bl,BYTE PTR [esi]
c001a763:	8d 6e 01             	lea    ebp,[esi+0x1]
c001a766:	80 fb 40             	cmp    bl,0x40
c001a769:	75 1b                	jne    c001a786 <Reg::findLineFromLoadedData(char*, char*, char*)+0x36>
c001a76b:	8a 16                	mov    dl,BYTE PTR [esi]
c001a76d:	84 d2                	test   dl,dl
c001a76f:	0f 84 f1 00 00 00    	je     c001a866 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001a775:	8d 46 01             	lea    eax,[esi+0x1]
c001a778:	80 fa 3a             	cmp    dl,0x3a
c001a77b:	74 04                	je     c001a781 <Reg::findLineFromLoadedData(char*, char*, char*)+0x31>
c001a77d:	89 c6                	mov    esi,eax
c001a77f:	eb ea                	jmp    c001a76b <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c001a781:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001a784:	89 c6                	mov    esi,eax
c001a786:	50                   	push   eax
c001a787:	6a 40                	push   0x40
c001a789:	6a 00                	push   0x0
c001a78b:	8d 44 24 24          	lea    eax,[esp+0x24]
c001a78f:	50                   	push   eax
c001a790:	e8 bb 5f fe ff       	call   c0000750 <memset>
c001a795:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c001a79c:	31 c0                	xor    eax,eax
c001a79e:	83 c4 10             	add    esp,0x10
c001a7a1:	8a 0f                	mov    cl,BYTE PTR [edi]
c001a7a3:	84 c9                	test   cl,cl
c001a7a5:	0f 84 bb 00 00 00    	je     c001a866 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001a7ab:	3d c7 00 00 00       	cmp    eax,0xc7
c001a7b0:	0f 8f b0 00 00 00    	jg     c001a866 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001a7b6:	80 f9 0a             	cmp    cl,0xa
c001a7b9:	0f 85 98 00 00 00    	jne    c001a857 <Reg::findLineFromLoadedData(char*, char*, char*)+0x107>
c001a7bf:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c001a7c4:	8a 44 24 58          	mov    al,BYTE PTR [esp+0x58]
c001a7c8:	a8 df                	test   al,0xdf
c001a7ca:	0f 94 c1             	sete   cl
c001a7cd:	3c 23                	cmp    al,0x23
c001a7cf:	0f 94 c2             	sete   dl
c001a7d2:	08 d1                	or     cl,dl
c001a7d4:	75 4a                	jne    c001a820 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001a7d6:	8d 50 f7             	lea    edx,[eax-0x9]
c001a7d9:	80 fa 01             	cmp    dl,0x1
c001a7dc:	76 42                	jbe    c001a820 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001a7de:	3c 5b                	cmp    al,0x5b
c001a7e0:	75 42                	jne    c001a824 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c001a7e2:	80 fb 40             	cmp    bl,0x40
c001a7e5:	75 39                	jne    c001a820 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001a7e7:	83 ec 0c             	sub    esp,0xc
c001a7ea:	8d 54 24 65          	lea    edx,[esp+0x65]
c001a7ee:	52                   	push   edx
c001a7ef:	e8 78 5f fe ff       	call   c000076c <strlen>
c001a7f4:	83 c4 10             	add    esp,0x10
c001a7f7:	83 f8 3f             	cmp    eax,0x3f
c001a7fa:	77 6a                	ja     c001a866 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001a7fc:	50                   	push   eax
c001a7fd:	50                   	push   eax
c001a7fe:	8d 54 24 61          	lea    edx,[esp+0x61]
c001a802:	52                   	push   edx
c001a803:	8d 54 24 24          	lea    edx,[esp+0x24]
c001a807:	52                   	push   edx
c001a808:	e8 ff 5f fe ff       	call   c000080c <strcpy>
c001a80d:	58                   	pop    eax
c001a80e:	8d 54 24 24          	lea    edx,[esp+0x24]
c001a812:	52                   	push   edx
c001a813:	e8 54 5f fe ff       	call   c000076c <strlen>
c001a818:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c001a81d:	83 c4 10             	add    esp,0x10
c001a820:	31 d2                	xor    edx,edx
c001a822:	eb 3a                	jmp    c001a85e <Reg::findLineFromLoadedData(char*, char*, char*)+0x10e>
c001a824:	80 fb 40             	cmp    bl,0x40
c001a827:	74 06                	je     c001a82f <Reg::findLineFromLoadedData(char*, char*, char*)+0xdf>
c001a829:	8d 44 24 58          	lea    eax,[esp+0x58]
c001a82d:	eb 20                	jmp    c001a84f <Reg::findLineFromLoadedData(char*, char*, char*)+0xff>
c001a82f:	50                   	push   eax
c001a830:	50                   	push   eax
c001a831:	55                   	push   ebp
c001a832:	8d 44 24 24          	lea    eax,[esp+0x24]
c001a836:	50                   	push   eax
c001a837:	e8 5c 60 fe ff       	call   c0000898 <strcmp>
c001a83c:	83 c4 10             	add    esp,0x10
c001a83f:	85 c0                	test   eax,eax
c001a841:	75 dd                	jne    c001a820 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001a843:	eb e4                	jmp    c001a829 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd9>
c001a845:	8d 50 01             	lea    edx,[eax+0x1]
c001a848:	80 f9 3d             	cmp    cl,0x3d
c001a84b:	74 1d                	je     c001a86a <Reg::findLineFromLoadedData(char*, char*, char*)+0x11a>
c001a84d:	89 d0                	mov    eax,edx
c001a84f:	8a 08                	mov    cl,BYTE PTR [eax]
c001a851:	84 c9                	test   cl,cl
c001a853:	75 f0                	jne    c001a845 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf5>
c001a855:	eb 0f                	jmp    c001a866 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001a857:	8d 50 01             	lea    edx,[eax+0x1]
c001a85a:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c001a85e:	47                   	inc    edi
c001a85f:	89 d0                	mov    eax,edx
c001a861:	e9 3b ff ff ff       	jmp    c001a7a1 <Reg::findLineFromLoadedData(char*, char*, char*)+0x51>
c001a866:	31 c0                	xor    eax,eax
c001a868:	eb 33                	jmp    c001a89d <Reg::findLineFromLoadedData(char*, char*, char*)+0x14d>
c001a86a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001a86e:	c6 00 00             	mov    BYTE PTR [eax],0x0
c001a871:	50                   	push   eax
c001a872:	50                   	push   eax
c001a873:	8d 44 24 60          	lea    eax,[esp+0x60]
c001a877:	50                   	push   eax
c001a878:	56                   	push   esi
c001a879:	e8 1a 60 fe ff       	call   c0000898 <strcmp>
c001a87e:	83 c4 10             	add    esp,0x10
c001a881:	85 c0                	test   eax,eax
c001a883:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001a887:	75 97                	jne    c001a820 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001a889:	51                   	push   ecx
c001a88a:	51                   	push   ecx
c001a88b:	52                   	push   edx
c001a88c:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c001a893:	e8 74 5f fe ff       	call   c000080c <strcpy>
c001a898:	83 c4 10             	add    esp,0x10
c001a89b:	b0 01                	mov    al,0x1
c001a89d:	81 c4 2c 01 00 00    	add    esp,0x12c
c001a8a3:	5b                   	pop    ebx
c001a8a4:	5e                   	pop    esi
c001a8a5:	5f                   	pop    edi
c001a8a6:	5d                   	pop    ebp
c001a8a7:	c3                   	ret    

c001a8a8 <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c001a8a8:	57                   	push   edi
c001a8a9:	56                   	push   esi
c001a8aa:	53                   	push   ebx
c001a8ab:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001a8b1:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c001a8b8:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c001a8bf:	53                   	push   ebx
c001a8c0:	e8 a7 5e fe ff       	call   c000076c <strlen>
c001a8c5:	89 34 24             	mov    DWORD PTR [esp],esi
c001a8c8:	89 c7                	mov    edi,eax
c001a8ca:	e8 9d 5e fe ff       	call   c000076c <strlen>
c001a8cf:	83 c4 10             	add    esp,0x10
c001a8d2:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c001a8d6:	3d ff 00 00 00       	cmp    eax,0xff
c001a8db:	0f 87 d3 00 00 00    	ja     c001a9b4 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001a8e1:	57                   	push   edi
c001a8e2:	57                   	push   edi
c001a8e3:	56                   	push   esi
c001a8e4:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c001a8e8:	56                   	push   esi
c001a8e9:	e8 1e 5f fe ff       	call   c000080c <strcpy>
c001a8ee:	58                   	pop    eax
c001a8ef:	5a                   	pop    edx
c001a8f0:	68 aa bb 02 c0       	push   0xc002bbaa
c001a8f5:	56                   	push   esi
c001a8f6:	e8 51 60 fe ff       	call   c000094c <strcat>
c001a8fb:	59                   	pop    ecx
c001a8fc:	5f                   	pop    edi
c001a8fd:	53                   	push   ebx
c001a8fe:	56                   	push   esi
c001a8ff:	e8 48 60 fe ff       	call   c000094c <strcat>
c001a904:	58                   	pop    eax
c001a905:	5a                   	pop    edx
c001a906:	68 54 b8 02 c0       	push   0xc002b854
c001a90b:	56                   	push   esi
c001a90c:	e8 3b 60 fe ff       	call   c000094c <strcat>
c001a911:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001a918:	e8 7c 4c ff ff       	call   c000f599 <malloc>
c001a91d:	83 c4 0c             	add    esp,0xc
c001a920:	89 c3                	mov    ebx,eax
c001a922:	ff 35 f0 0e 03 c0    	push   DWORD PTR ds:0xc0030ef0
c001a928:	56                   	push   esi
c001a929:	50                   	push   eax
c001a92a:	e8 f9 82 ff ff       	call   c0012c28 <File::File(char const*, Process*)>
c001a92f:	83 c4 10             	add    esp,0x10
c001a932:	85 db                	test   ebx,ebx
c001a934:	74 7e                	je     c001a9b4 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001a936:	51                   	push   ecx
c001a937:	51                   	push   ecx
c001a938:	6a 01                	push   0x1
c001a93a:	53                   	push   ebx
c001a93b:	e8 4c 83 ff ff       	call   c0012c8c <File::open(FileOpenMode)>
c001a940:	83 c4 10             	add    esp,0x10
c001a943:	85 c0                	test   eax,eax
c001a945:	74 08                	je     c001a94f <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c001a947:	83 ec 0c             	sub    esp,0xc
c001a94a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a94c:	53                   	push   ebx
c001a94d:	eb 5f                	jmp    c001a9ae <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c001a94f:	52                   	push   edx
c001a950:	8d 44 24 17          	lea    eax,[esp+0x17]
c001a954:	50                   	push   eax
c001a955:	8d 44 24 20          	lea    eax,[esp+0x20]
c001a959:	50                   	push   eax
c001a95a:	53                   	push   ebx
c001a95b:	e8 d8 85 ff ff       	call   c0012f38 <File::stat(unsigned long long*, bool*)>
c001a960:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001a964:	83 c4 10             	add    esp,0x10
c001a967:	89 c1                	mov    ecx,eax
c001a969:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c001a96d:	74 31                	je     c001a9a0 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001a96f:	83 ec 0c             	sub    esp,0xc
c001a972:	50                   	push   eax
c001a973:	e8 21 4c ff ff       	call   c000f599 <malloc>
c001a978:	89 c6                	mov    esi,eax
c001a97a:	58                   	pop    eax
c001a97b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a97d:	8d 54 24 20          	lea    edx,[esp+0x20]
c001a981:	52                   	push   edx
c001a982:	56                   	push   esi
c001a983:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a987:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a98b:	53                   	push   ebx
c001a98c:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001a98f:	83 c4 20             	add    esp,0x20
c001a992:	85 c0                	test   eax,eax
c001a994:	75 0a                	jne    c001a9a0 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001a996:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a99a:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c001a99e:	74 18                	je     c001a9b8 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c001a9a0:	83 ec 0c             	sub    esp,0xc
c001a9a3:	53                   	push   ebx
c001a9a4:	e8 41 83 ff ff       	call   c0012cea <File::close()>
c001a9a9:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a9ab:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a9ae:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001a9b1:	83 c4 10             	add    esp,0x10
c001a9b4:	31 c0                	xor    eax,eax
c001a9b6:	eb 3b                	jmp    c001a9f3 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c001a9b8:	83 ec 0c             	sub    esp,0xc
c001a9bb:	53                   	push   ebx
c001a9bc:	e8 29 83 ff ff       	call   c0012cea <File::close()>
c001a9c1:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a9c3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a9c6:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001a9c9:	83 c4 0c             	add    esp,0xc
c001a9cc:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001a9d3:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001a9da:	56                   	push   esi
c001a9db:	e8 70 fd ff ff       	call   c001a750 <Reg::findLineFromLoadedData(char*, char*, char*)>
c001a9e0:	89 34 24             	mov    DWORD PTR [esp],esi
c001a9e3:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001a9e7:	e8 bd 4b ff ff       	call   c000f5a9 <free>
c001a9ec:	83 c4 10             	add    esp,0x10
c001a9ef:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001a9f3:	81 c4 20 01 00 00    	add    esp,0x120
c001a9f9:	5b                   	pop    ebx
c001a9fa:	5e                   	pop    esi
c001a9fb:	5f                   	pop    edi
c001a9fc:	c3                   	ret    

c001a9fd <Reg::getLine(char*, char*, char*)>:
c001a9fd:	57                   	push   edi
c001a9fe:	56                   	push   esi
c001a9ff:	53                   	push   ebx
c001aa00:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001aa04:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001aa08:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001aa0c:	57                   	push   edi
c001aa0d:	56                   	push   esi
c001aa0e:	53                   	push   ebx
c001aa0f:	68 59 b8 02 c0       	push   0xc002b859
c001aa14:	e8 8f fe ff ff       	call   c001a8a8 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001aa19:	83 c4 10             	add    esp,0x10
c001aa1c:	84 c0                	test   al,al
c001aa1e:	75 10                	jne    c001aa30 <Reg::getLine(char*, char*, char*)+0x33>
c001aa20:	57                   	push   edi
c001aa21:	56                   	push   esi
c001aa22:	53                   	push   ebx
c001aa23:	68 7e b8 02 c0       	push   0xc002b87e
c001aa28:	e8 7b fe ff ff       	call   c001a8a8 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001aa2d:	83 c4 10             	add    esp,0x10
c001aa30:	5b                   	pop    ebx
c001aa31:	5e                   	pop    esi
c001aa32:	5f                   	pop    edi
c001aa33:	c3                   	ret    

c001aa34 <Reg::readInt(char*, char*, int*)>:
c001aa34:	55                   	push   ebp
c001aa35:	57                   	push   edi
c001aa36:	56                   	push   esi
c001aa37:	53                   	push   ebx
c001aa38:	81 ec f0 00 00 00    	sub    esp,0xf0
c001aa3e:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001aa42:	57                   	push   edi
c001aa43:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001aa4a:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001aa51:	e8 a7 ff ff ff       	call   c001a9fd <Reg::getLine(char*, char*, char*)>
c001aa56:	83 c4 10             	add    esp,0x10
c001aa59:	84 c0                	test   al,al
c001aa5b:	0f 84 b3 00 00 00    	je     c001ab14 <Reg::readInt(char*, char*, int*)+0xe0>
c001aa61:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c001aa65:	80 fa 2b             	cmp    dl,0x2b
c001aa68:	74 0c                	je     c001aa76 <Reg::readInt(char*, char*, int*)+0x42>
c001aa6a:	80 fa 2d             	cmp    dl,0x2d
c001aa6d:	75 0e                	jne    c001aa7d <Reg::readInt(char*, char*, int*)+0x49>
c001aa6f:	ba 01 00 00 00       	mov    edx,0x1
c001aa74:	eb 0b                	jmp    c001aa81 <Reg::readInt(char*, char*, int*)+0x4d>
c001aa76:	ba 01 00 00 00       	mov    edx,0x1
c001aa7b:	eb 02                	jmp    c001aa7f <Reg::readInt(char*, char*, int*)+0x4b>
c001aa7d:	31 d2                	xor    edx,edx
c001aa7f:	31 c0                	xor    eax,eax
c001aa81:	be 0a 00 00 00       	mov    esi,0xa
c001aa86:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c001aa8b:	75 20                	jne    c001aaad <Reg::readInt(char*, char*, int*)+0x79>
c001aa8d:	8a 4c 14 19          	mov    cl,BYTE PTR [esp+edx*1+0x19]
c001aa91:	80 f9 78             	cmp    cl,0x78
c001aa94:	75 0a                	jne    c001aaa0 <Reg::readInt(char*, char*, int*)+0x6c>
c001aa96:	83 c2 02             	add    edx,0x2
c001aa99:	be 10 00 00 00       	mov    esi,0x10
c001aa9e:	eb 0d                	jmp    c001aaad <Reg::readInt(char*, char*, int*)+0x79>
c001aaa0:	80 f9 62             	cmp    cl,0x62
c001aaa3:	75 08                	jne    c001aaad <Reg::readInt(char*, char*, int*)+0x79>
c001aaa5:	83 c2 02             	add    edx,0x2
c001aaa8:	be 02 00 00 00       	mov    esi,0x2
c001aaad:	01 d7                	add    edi,edx
c001aaaf:	31 d2                	xor    edx,edx
c001aab1:	8a 1f                	mov    bl,BYTE PTR [edi]
c001aab3:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
c001aab7:	80 fb 0d             	cmp    bl,0xd
c001aaba:	0f 94 c3             	sete   bl
c001aabd:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001aac2:	0f 94 c1             	sete   cl
c001aac5:	08 cb                	or     bl,cl
c001aac7:	75 3a                	jne    c001ab03 <Reg::readInt(char*, char*, int*)+0xcf>
c001aac9:	0f af d6             	imul   edx,esi
c001aacc:	0f be 5c 24 0f       	movsx  ebx,BYTE PTR [esp+0xf]
c001aad1:	83 fe 10             	cmp    esi,0x10
c001aad4:	75 26                	jne    c001aafc <Reg::readInt(char*, char*, int*)+0xc8>
c001aad6:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001aada:	8d 69 bf             	lea    ebp,[ecx-0x41]
c001aadd:	89 e9                	mov    ecx,ebp
c001aadf:	80 f9 05             	cmp    cl,0x5
c001aae2:	77 06                	ja     c001aaea <Reg::readInt(char*, char*, int*)+0xb6>
c001aae4:	8d 54 1a c9          	lea    edx,[edx+ebx*1-0x37]
c001aae8:	eb 16                	jmp    c001ab00 <Reg::readInt(char*, char*, int*)+0xcc>
c001aaea:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001aaee:	83 e9 61             	sub    ecx,0x61
c001aaf1:	80 f9 05             	cmp    cl,0x5
c001aaf4:	77 06                	ja     c001aafc <Reg::readInt(char*, char*, int*)+0xc8>
c001aaf6:	8d 54 1a a9          	lea    edx,[edx+ebx*1-0x57]
c001aafa:	eb 04                	jmp    c001ab00 <Reg::readInt(char*, char*, int*)+0xcc>
c001aafc:	8d 54 1a d0          	lea    edx,[edx+ebx*1-0x30]
c001ab00:	47                   	inc    edi
c001ab01:	eb ae                	jmp    c001aab1 <Reg::readInt(char*, char*, int*)+0x7d>
c001ab03:	84 c0                	test   al,al
c001ab05:	74 02                	je     c001ab09 <Reg::readInt(char*, char*, int*)+0xd5>
c001ab07:	f7 da                	neg    edx
c001ab09:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c001ab10:	89 10                	mov    DWORD PTR [eax],edx
c001ab12:	88 d8                	mov    al,bl
c001ab14:	81 c4 ec 00 00 00    	add    esp,0xec
c001ab1a:	5b                   	pop    ebx
c001ab1b:	5e                   	pop    esi
c001ab1c:	5f                   	pop    edi
c001ab1d:	5d                   	pop    ebp
c001ab1e:	c3                   	ret    

c001ab1f <Reg::readString(char*, char*, char*, int)>:
c001ab1f:	57                   	push   edi
c001ab20:	56                   	push   esi
c001ab21:	53                   	push   ebx
c001ab22:	81 ec d4 00 00 00    	sub    esp,0xd4
c001ab28:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c001ab2f:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c001ab33:	57                   	push   edi
c001ab34:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001ab3b:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001ab42:	e8 b6 fe ff ff       	call   c001a9fd <Reg::getLine(char*, char*, char*)>
c001ab47:	83 c4 10             	add    esp,0x10
c001ab4a:	89 c6                	mov    esi,eax
c001ab4c:	84 c0                	test   al,al
c001ab4e:	74 44                	je     c001ab94 <Reg::readString(char*, char*, char*, int)+0x75>
c001ab50:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c001ab57:	31 c0                	xor    eax,eax
c001ab59:	4a                   	dec    edx
c001ab5a:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c001ab5d:	84 c9                	test   cl,cl
c001ab5f:	74 0f                	je     c001ab70 <Reg::readString(char*, char*, char*, int)+0x51>
c001ab61:	39 c2                	cmp    edx,eax
c001ab63:	7e 0b                	jle    c001ab70 <Reg::readString(char*, char*, char*, int)+0x51>
c001ab65:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c001ab68:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c001ab6d:	40                   	inc    eax
c001ab6e:	eb ea                	jmp    c001ab5a <Reg::readString(char*, char*, char*, int)+0x3b>
c001ab70:	83 ec 0c             	sub    esp,0xc
c001ab73:	53                   	push   ebx
c001ab74:	e8 f3 5b fe ff       	call   c000076c <strlen>
c001ab79:	83 c4 10             	add    esp,0x10
c001ab7c:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c001ab81:	75 11                	jne    c001ab94 <Reg::readString(char*, char*, char*, int)+0x75>
c001ab83:	83 ec 0c             	sub    esp,0xc
c001ab86:	53                   	push   ebx
c001ab87:	e8 e0 5b fe ff       	call   c000076c <strlen>
c001ab8c:	83 c4 10             	add    esp,0x10
c001ab8f:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c001ab94:	81 c4 d0 00 00 00    	add    esp,0xd0
c001ab9a:	89 f0                	mov    eax,esi
c001ab9c:	5b                   	pop    ebx
c001ab9d:	5e                   	pop    esi
c001ab9e:	5f                   	pop    edi
c001ab9f:	c3                   	ret    

c001aba0 <Reg::readBool(char*, char*, bool*)>:
c001aba0:	83 ec 20             	sub    esp,0x20
c001aba3:	8d 44 24 10          	lea    eax,[esp+0x10]
c001aba7:	50                   	push   eax
c001aba8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001abac:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001abb0:	e8 7f fe ff ff       	call   c001aa34 <Reg::readInt(char*, char*, int*)>
c001abb5:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001abba:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001abbe:	0f 95 02             	setne  BYTE PTR [edx]
c001abc1:	83 c4 2c             	add    esp,0x2c
c001abc4:	c3                   	ret    

c001abc5 <Reg::readBoolWithDefault(char*, char*, bool)>:
c001abc5:	53                   	push   ebx
c001abc6:	83 ec 1c             	sub    esp,0x1c
c001abc9:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c001abcd:	8d 44 24 13          	lea    eax,[esp+0x13]
c001abd1:	50                   	push   eax
c001abd2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001abd6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001abda:	e8 c1 ff ff ff       	call   c001aba0 <Reg::readBool(char*, char*, bool*)>
c001abdf:	83 c4 10             	add    esp,0x10
c001abe2:	84 c0                	test   al,al
c001abe4:	74 04                	je     c001abea <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c001abe6:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c001abea:	88 d8                	mov    al,bl
c001abec:	83 c4 18             	add    esp,0x18
c001abef:	5b                   	pop    ebx
c001abf0:	c3                   	ret    

c001abf1 <Reg::readIntWithDefault(char*, char*, int)>:
c001abf1:	53                   	push   ebx
c001abf2:	83 ec 1c             	sub    esp,0x1c
c001abf5:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001abf9:	8d 44 24 10          	lea    eax,[esp+0x10]
c001abfd:	50                   	push   eax
c001abfe:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ac02:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ac06:	e8 29 fe ff ff       	call   c001aa34 <Reg::readInt(char*, char*, int*)>
c001ac0b:	83 c4 10             	add    esp,0x10
c001ac0e:	84 c0                	test   al,al
c001ac10:	74 04                	je     c001ac16 <Reg::readIntWithDefault(char*, char*, int)+0x25>
c001ac12:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001ac16:	89 d8                	mov    eax,ebx
c001ac18:	83 c4 18             	add    esp,0x18
c001ac1b:	5b                   	pop    ebx
c001ac1c:	c3                   	ret    

c001ac1d <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c001ac1d:	57                   	push   edi
c001ac1e:	56                   	push   esi
c001ac1f:	56                   	push   esi
c001ac20:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001ac24:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001ac28:	56                   	push   esi
c001ac29:	57                   	push   edi
c001ac2a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ac2e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ac32:	e8 e8 fe ff ff       	call   c001ab1f <Reg::readString(char*, char*, char*, int)>
c001ac37:	83 c4 10             	add    esp,0x10
c001ac3a:	84 c0                	test   al,al
c001ac3c:	75 1a                	jne    c001ac58 <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x3b>
c001ac3e:	51                   	push   ecx
c001ac3f:	56                   	push   esi
c001ac40:	6a 00                	push   0x0
c001ac42:	57                   	push   edi
c001ac43:	e8 08 5b fe ff       	call   c0000750 <memset>
c001ac48:	8d 4e ff             	lea    ecx,[esi-0x1]
c001ac4b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001ac4f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001ac51:	83 c4 10             	add    esp,0x10
c001ac54:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001ac58:	89 f8                	mov    eax,edi
c001ac5a:	5a                   	pop    edx
c001ac5b:	5e                   	pop    esi
c001ac5c:	5f                   	pop    edi
c001ac5d:	c3                   	ret    

c001ac5e <Sys::eject(regs*)>:
c001ac5e:	83 ec 0c             	sub    esp,0xc
c001ac61:	83 ca ff             	or     edx,0xffffffff
c001ac64:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ac68:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c001ac6b:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001ac70:	83 e9 41             	sub    ecx,0x41
c001ac73:	83 f9 19             	cmp    ecx,0x19
c001ac76:	77 18                	ja     c001ac90 <Sys::eject(regs*)+0x32>
c001ac78:	8b 0c 8d a0 df 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd2060]
c001ac7f:	85 c9                	test   ecx,ecx
c001ac81:	74 0d                	je     c001ac90 <Sys::eject(regs*)+0x32>
c001ac83:	83 ec 0c             	sub    esp,0xc
c001ac86:	51                   	push   ecx
c001ac87:	e8 28 b3 ff ff       	call   c0015fb4 <LogicalDisk::eject()>
c001ac8c:	83 c4 10             	add    esp,0x10
c001ac8f:	99                   	cdq    
c001ac90:	83 c4 0c             	add    esp,0xc
c001ac93:	c3                   	ret    

c001ac94 <Sys::exit(regs*)>:
c001ac94:	83 ec 18             	sub    esp,0x18
c001ac97:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ac9b:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001ac9e:	e8 c2 35 00 00       	call   c001e265 <terminateTask(int)>
c001aca3:	83 c8 ff             	or     eax,0xffffffff
c001aca6:	83 c4 1c             	add    esp,0x1c
c001aca9:	89 c2                	mov    edx,eax
c001acab:	c3                   	ret    

c001acac <Sys::getCwd(regs*)>:
c001acac:	83 ec 10             	sub    esp,0x10
c001acaf:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001acb3:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001acb6:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001acb9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001acbe:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001acc1:	e8 64 7d ff ff       	call   c0012a2a <Fs::getcwd(Process*, char*, int)>
c001acc6:	83 c4 1c             	add    esp,0x1c
c001acc9:	99                   	cdq    
c001acca:	c3                   	ret    

c001accb <Sys::getPID(regs*)>:
c001accb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001acd0:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001acd3:	8b 00                	mov    eax,DWORD PTR [eax]
c001acd5:	99                   	cdq    
c001acd6:	c3                   	ret    

c001acd7 <Sys::getRAMData(regs*)>:
c001acd7:	8b 0d f4 d9 02 c0    	mov    ecx,DWORD PTR ds:0xc002d9f4
c001acdd:	6b 05 f0 d9 02 c0 64 	imul   eax,DWORD PTR ds:0xc002d9f0,0x64
c001ace4:	99                   	cdq    
c001ace5:	f7 f9                	idiv   ecx
c001ace7:	c1 e0 18             	shl    eax,0x18
c001acea:	09 c8                	or     eax,ecx
c001acec:	99                   	cdq    
c001aced:	c3                   	ret    

c001acee <Sys::getVGAPtr(regs*)>:
c001acee:	55                   	push   ebp
c001acef:	57                   	push   edi
c001acf0:	56                   	push   esi
c001acf1:	53                   	push   ebx
c001acf2:	83 ec 18             	sub    esp,0x18
c001acf5:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001acf9:	ff 75 28             	push   DWORD PTR [ebp+0x28]
c001acfc:	e8 b0 30 00 00       	call   c001ddb1 <Thr::processFromPID(int)>
c001ad01:	83 c4 10             	add    esp,0x10
c001ad04:	89 c1                	mov    ecx,eax
c001ad06:	b8 01 00 00 00       	mov    eax,0x1
c001ad0b:	85 c9                	test   ecx,ecx
c001ad0d:	74 59                	je     c001ad68 <Sys::getVGAPtr(regs*)+0x7a>
c001ad0f:	8b 99 26 05 00 00    	mov    ebx,DWORD PTR [ecx+0x526]
c001ad15:	83 7d 24 00          	cmp    DWORD PTR [ebp+0x24],0x0
c001ad19:	74 0c                	je     c001ad27 <Sys::getVGAPtr(regs*)+0x39>
c001ad1b:	83 ec 0c             	sub    esp,0xc
c001ad1e:	53                   	push   ebx
c001ad1f:	e8 2f 56 ff ff       	call   c0010353 <setActiveTerminal(VgaText*)>
c001ad24:	83 c4 10             	add    esp,0x10
c001ad27:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c001ad2a:	8b 7d 20             	mov    edi,DWORD PTR [ebp+0x20]
c001ad2d:	b9 a0 0f 00 00       	mov    ecx,0xfa0
c001ad32:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001ad34:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c001ad37:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c001ad3a:	81 c3 82 00 00 00    	add    ebx,0x82
c001ad40:	89 90 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],edx
c001ad46:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c001ad49:	8b 53 96             	mov    edx,DWORD PTR [ebx-0x6a]
c001ad4c:	89 90 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],edx
c001ad52:	50                   	push   eax
c001ad53:	50                   	push   eax
c001ad54:	53                   	push   ebx
c001ad55:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c001ad58:	05 a8 0f 00 00       	add    eax,0xfa8
c001ad5d:	50                   	push   eax
c001ad5e:	e8 a9 5a fe ff       	call   c000080c <strcpy>
c001ad63:	83 c4 10             	add    esp,0x10
c001ad66:	31 c0                	xor    eax,eax
c001ad68:	83 c4 0c             	add    esp,0xc
c001ad6b:	31 d2                	xor    edx,edx
c001ad6d:	5b                   	pop    ebx
c001ad6e:	5e                   	pop    esi
c001ad6f:	5f                   	pop    edi
c001ad70:	5d                   	pop    ebp
c001ad71:	c3                   	ret    

c001ad72 <Sys::loadDLL(regs*)>:
c001ad72:	56                   	push   esi
c001ad73:	53                   	push   ebx
c001ad74:	31 d2                	xor    edx,edx
c001ad76:	51                   	push   ecx
c001ad77:	b8 01 00 00 00       	mov    eax,0x1
c001ad7c:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001ad80:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c001ad84:	0f 84 8c 00 00 00    	je     c001ae16 <Sys::loadDLL(regs*)+0xa4>
c001ad8a:	83 ec 0c             	sub    esp,0xc
c001ad8d:	68 14 01 00 00       	push   0x114
c001ad92:	e8 02 48 ff ff       	call   c000f599 <malloc>
c001ad97:	83 c4 0c             	add    esp,0xc
c001ad9a:	89 c3                	mov    ebx,eax
c001ad9c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ada1:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001ada4:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001ada7:	53                   	push   ebx
c001ada8:	e8 7b 7e ff ff       	call   c0012c28 <File::File(char const*, Process*)>
c001adad:	83 c4 10             	add    esp,0x10
c001adb0:	31 d2                	xor    edx,edx
c001adb2:	b8 02 00 00 00       	mov    eax,0x2
c001adb7:	85 db                	test   ebx,ebx
c001adb9:	74 5b                	je     c001ae16 <Sys::loadDLL(regs*)+0xa4>
c001adbb:	83 ec 0c             	sub    esp,0xc
c001adbe:	53                   	push   ebx
c001adbf:	e8 36 81 ff ff       	call   c0012efa <File::exists()>
c001adc4:	83 c4 10             	add    esp,0x10
c001adc7:	84 c0                	test   al,al
c001adc9:	8b 03                	mov    eax,DWORD PTR [ebx]
c001adcb:	75 11                	jne    c001adde <Sys::loadDLL(regs*)+0x6c>
c001adcd:	83 ec 0c             	sub    esp,0xc
c001add0:	53                   	push   ebx
c001add1:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001add4:	83 c4 10             	add    esp,0x10
c001add7:	b8 03 00 00 00       	mov    eax,0x3
c001addc:	eb 36                	jmp    c001ae14 <Sys::loadDLL(regs*)+0xa2>
c001adde:	83 ec 0c             	sub    esp,0xc
c001ade1:	53                   	push   ebx
c001ade2:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001ade5:	58                   	pop    eax
c001ade6:	5a                   	pop    edx
c001ade7:	6a 00                	push   0x0
c001ade9:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001adec:	e8 0e 22 00 00       	call   c001cfff <Thr::loadDLL(char const*, bool)>
c001adf1:	83 c4 10             	add    esp,0x10
c001adf4:	89 c1                	mov    ecx,eax
c001adf6:	31 d2                	xor    edx,edx
c001adf8:	b8 04 00 00 00       	mov    eax,0x4
c001adfd:	85 c9                	test   ecx,ecx
c001adff:	74 15                	je     c001ae16 <Sys::loadDLL(regs*)+0xa4>
c001ae01:	53                   	push   ebx
c001ae02:	53                   	push   ebx
c001ae03:	ff 35 a8 d9 02 c0    	push   DWORD PTR ds:0xc002d9a8
c001ae09:	51                   	push   ecx
c001ae0a:	e8 21 24 00 00       	call   c001d230 <Thr::executeDLL(unsigned long, void*)>
c001ae0f:	83 c4 10             	add    esp,0x10
c001ae12:	31 c0                	xor    eax,eax
c001ae14:	31 d2                	xor    edx,edx
c001ae16:	59                   	pop    ecx
c001ae17:	5b                   	pop    ebx
c001ae18:	5e                   	pop    esi
c001ae19:	c3                   	ret    

c001ae1a <Sys::read(regs*)>:
c001ae1a:	57                   	push   edi
c001ae1b:	56                   	push   esi
c001ae1c:	53                   	push   ebx
c001ae1d:	83 ec 10             	sub    esp,0x10
c001ae20:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001ae24:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001ae27:	83 f8 02             	cmp    eax,0x2
c001ae2a:	77 10                	ja     c001ae3c <Sys::read(regs*)+0x22>
c001ae2c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ae31:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001ae34:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c001ae3a:	eb 0e                	jmp    c001ae4a <Sys::read(regs*)+0x30>
c001ae3c:	83 ec 0c             	sub    esp,0xc
c001ae3f:	50                   	push   eax
c001ae40:	e8 82 62 ff ff       	call   c00110c7 <getFromFileDescriptor(int)>
c001ae45:	83 c4 10             	add    esp,0x10
c001ae48:	89 c1                	mov    ecx,eax
c001ae4a:	83 c8 ff             	or     eax,0xffffffff
c001ae4d:	85 c9                	test   ecx,ecx
c001ae4f:	89 c2                	mov    edx,eax
c001ae51:	74 28                	je     c001ae7b <Sys::read(regs*)+0x61>
c001ae53:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001ae5b:	31 ff                	xor    edi,edi
c001ae5d:	83 ec 0c             	sub    esp,0xc
c001ae60:	8b 01                	mov    eax,DWORD PTR [ecx]
c001ae62:	8d 54 24 18          	lea    edx,[esp+0x18]
c001ae66:	52                   	push   edx
c001ae67:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001ae6a:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001ae6d:	57                   	push   edi
c001ae6e:	56                   	push   esi
c001ae6f:	51                   	push   ecx
c001ae70:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001ae73:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001ae77:	83 c4 20             	add    esp,0x20
c001ae7a:	99                   	cdq    
c001ae7b:	83 c4 10             	add    esp,0x10
c001ae7e:	5b                   	pop    ebx
c001ae7f:	5e                   	pop    esi
c001ae80:	5f                   	pop    edi
c001ae81:	c3                   	ret    

c001ae82 <Sys::sbrk(regs*)>:
c001ae82:	56                   	push   esi
c001ae83:	53                   	push   ebx
c001ae84:	50                   	push   eax
c001ae85:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ae8a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ae8e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001ae91:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c001ae94:	8b 88 32 05 00 00    	mov    ecx,DWORD PTR [eax+0x532]
c001ae9a:	85 db                	test   ebx,ebx
c001ae9c:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c001ae9f:	74 02                	je     c001aea3 <Sys::sbrk(regs*)+0x21>
c001aea1:	79 06                	jns    c001aea9 <Sys::sbrk(regs*)+0x27>
c001aea3:	89 f0                	mov    eax,esi
c001aea5:	31 d2                	xor    edx,edx
c001aea7:	eb 2a                	jmp    c001aed3 <Sys::sbrk(regs*)+0x51>
c001aea9:	83 c8 ff             	or     eax,0xffffffff
c001aeac:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c001aeb2:	89 c2                	mov    edx,eax
c001aeb4:	77 1d                	ja     c001aed3 <Sys::sbrk(regs*)+0x51>
c001aeb6:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c001aebc:	50                   	push   eax
c001aebd:	c1 ea 0c             	shr    edx,0xc
c001aec0:	68 07 0c 00 00       	push   0xc07
c001aec5:	52                   	push   edx
c001aec6:	51                   	push   ecx
c001aec7:	e8 10 6c ff ff       	call   c0011adc <VAS::allocatePages(int, int)>
c001aecc:	89 f0                	mov    eax,esi
c001aece:	31 d2                	xor    edx,edx
c001aed0:	83 c4 10             	add    esp,0x10
c001aed3:	59                   	pop    ecx
c001aed4:	5b                   	pop    ebx
c001aed5:	5e                   	pop    esi
c001aed6:	c3                   	ret    

c001aed7 <Sys::setCwd(regs*)>:
c001aed7:	83 ec 14             	sub    esp,0x14
c001aeda:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001aede:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001aee1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001aee6:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001aee9:	e8 ab 80 ff ff       	call   c0012f99 <Fs::setcwd(Process*, char*)>
c001aeee:	83 c4 1c             	add    esp,0x1c
c001aef1:	99                   	cdq    
c001aef2:	c3                   	ret    

c001aef3 <Sys::setTime(regs*)>:
c001aef3:	55                   	push   ebp
c001aef4:	31 c9                	xor    ecx,ecx
c001aef6:	57                   	push   edi
c001aef7:	bd 0c 00 00 00       	mov    ebp,0xc
c001aefc:	56                   	push   esi
c001aefd:	53                   	push   ebx
c001aefe:	31 db                	xor    ebx,ebx
c001af00:	83 ec 10             	sub    esp,0x10
c001af03:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001af07:	8b 72 20             	mov    esi,DWORD PTR [edx+0x20]
c001af0a:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c001af0d:	8b 7a 24             	mov    edi,DWORD PTR [edx+0x24]
c001af10:	89 c2                	mov    edx,eax
c001af12:	66 81 ef 6c 07       	sub    di,0x76c
c001af17:	83 e2 1f             	and    edx,0x1f
c001af1a:	c1 e7 10             	shl    edi,0x10
c001af1d:	42                   	inc    edx
c001af1e:	c1 e8 05             	shr    eax,0x5
c001af21:	88 d1                	mov    cl,dl
c001af23:	31 d2                	xor    edx,edx
c001af25:	f7 f5                	div    ebp
c001af27:	89 dd                	mov    ebp,ebx
c001af29:	88 d5                	mov    ch,dl
c001af2b:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c001af31:	0f b7 c1             	movzx  eax,cx
c001af34:	31 d2                	xor    edx,edx
c001af36:	09 f8                	or     eax,edi
c001af38:	bf 3c 00 00 00       	mov    edi,0x3c
c001af3d:	89 c1                	mov    ecx,eax
c001af3f:	89 f0                	mov    eax,esi
c001af41:	f7 f7                	div    edi
c001af43:	c1 e2 10             	shl    edx,0x10
c001af46:	09 d5                	or     ebp,edx
c001af48:	31 d2                	xor    edx,edx
c001af4a:	89 eb                	mov    ebx,ebp
c001af4c:	f7 f7                	div    edi
c001af4e:	bf 10 0e 00 00       	mov    edi,0xe10
c001af53:	88 d7                	mov    bh,dl
c001af55:	89 f0                	mov    eax,esi
c001af57:	31 d2                	xor    edx,edx
c001af59:	f7 f7                	div    edi
c001af5b:	bf 18 00 00 00       	mov    edi,0x18
c001af60:	31 d2                	xor    edx,edx
c001af62:	f7 f7                	div    edi
c001af64:	a1 a8 d9 02 c0       	mov    eax,ds:0xc002d9a8
c001af69:	88 d3                	mov    bl,dl
c001af6b:	53                   	push   ebx
c001af6c:	51                   	push   ecx
c001af6d:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c001af73:	e8 6a 88 ff ff       	call   c00137e2 <Clock::setTimeInDatetimeLocal(datetime_t)>
c001af78:	83 c4 1c             	add    esp,0x1c
c001af7b:	83 f0 01             	xor    eax,0x1
c001af7e:	5b                   	pop    ebx
c001af7f:	0f b6 c0             	movzx  eax,al
c001af82:	5e                   	pop    esi
c001af83:	31 d2                	xor    edx,edx
c001af85:	5f                   	pop    edi
c001af86:	5d                   	pop    ebp
c001af87:	c3                   	ret    

c001af88 <Sys::timezone(regs*)>:
c001af88:	53                   	push   ebx
c001af89:	83 ec 08             	sub    esp,0x8
c001af8c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001af90:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c001af94:	75 17                	jne    c001afad <Sys::timezone(regs*)+0x25>
c001af96:	83 ec 0c             	sub    esp,0xc
c001af99:	68 99 b8 02 c0       	push   0xc002b899
c001af9e:	e8 26 77 ff ff       	call   c00126c9 <Dbg::kprintf(char const*, ...)>
c001afa3:	83 c8 ff             	or     eax,0xffffffff
c001afa6:	83 c4 10             	add    esp,0x10
c001afa9:	89 c2                	mov    edx,eax
c001afab:	eb 20                	jmp    c001afcd <Sys::timezone(regs*)+0x45>
c001afad:	83 ec 0c             	sub    esp,0xc
c001afb0:	68 ae b8 02 c0       	push   0xc002b8ae
c001afb5:	e8 0f 77 ff ff       	call   c00126c9 <Dbg::kprintf(char const*, ...)>
c001afba:	58                   	pop    eax
c001afbb:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001afbe:	e8 81 85 ff ff       	call   c0013544 <User::loadClockSettings(int)>
c001afc3:	83 c4 10             	add    esp,0x10
c001afc6:	b8 01 00 00 00       	mov    eax,0x1
c001afcb:	31 d2                	xor    edx,edx
c001afcd:	83 c4 08             	add    esp,0x8
c001afd0:	5b                   	pop    ebx
c001afd1:	c3                   	ret    

c001afd2 <Sys::write(regs*)>:
c001afd2:	57                   	push   edi
c001afd3:	56                   	push   esi
c001afd4:	53                   	push   ebx
c001afd5:	83 ec 10             	sub    esp,0x10
c001afd8:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001afdc:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001afdf:	83 f8 02             	cmp    eax,0x2
c001afe2:	77 10                	ja     c001aff4 <Sys::write(regs*)+0x22>
c001afe4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001afe9:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001afec:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c001aff2:	eb 0e                	jmp    c001b002 <Sys::write(regs*)+0x30>
c001aff4:	83 ec 0c             	sub    esp,0xc
c001aff7:	50                   	push   eax
c001aff8:	e8 ca 60 ff ff       	call   c00110c7 <getFromFileDescriptor(int)>
c001affd:	83 c4 10             	add    esp,0x10
c001b000:	89 c1                	mov    ecx,eax
c001b002:	83 c8 ff             	or     eax,0xffffffff
c001b005:	85 c9                	test   ecx,ecx
c001b007:	89 c2                	mov    edx,eax
c001b009:	74 28                	je     c001b033 <Sys::write(regs*)+0x61>
c001b00b:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b013:	31 ff                	xor    edi,edi
c001b015:	83 ec 0c             	sub    esp,0xc
c001b018:	8b 01                	mov    eax,DWORD PTR [ecx]
c001b01a:	8d 54 24 18          	lea    edx,[esp+0x18]
c001b01e:	52                   	push   edx
c001b01f:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b022:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001b025:	57                   	push   edi
c001b026:	56                   	push   esi
c001b027:	51                   	push   ecx
c001b028:	ff 50 10             	call   DWORD PTR [eax+0x10]
c001b02b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b02f:	83 c4 20             	add    esp,0x20
c001b032:	99                   	cdq    
c001b033:	83 c4 10             	add    esp,0x10
c001b036:	5b                   	pop    ebx
c001b037:	5e                   	pop    esi
c001b038:	5f                   	pop    edi
c001b039:	c3                   	ret    

c001b03a <Sys::wsbe(regs*)>:
c001b03a:	57                   	push   edi
c001b03b:	b9 0b 00 00 00       	mov    ecx,0xb
c001b040:	56                   	push   esi
c001b041:	be ed b8 02 c0       	mov    esi,0xc002b8ed
c001b046:	53                   	push   ebx
c001b047:	83 ec 30             	sub    esp,0x30
c001b04a:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001b04e:	fc                   	cld    
c001b04f:	83 ec 0c             	sub    esp,0xc
c001b052:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001b054:	8d 7c 24 10          	lea    edi,[esp+0x10]
c001b058:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b05d:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b060:	8b b0 26 05 00 00    	mov    esi,DWORD PTR [eax+0x526]
c001b066:	8b 06                	mov    eax,DWORD PTR [esi]
c001b068:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c001b06b:	57                   	push   edi
c001b06c:	e8 fb 56 fe ff       	call   c000076c <strlen>
c001b071:	5a                   	pop    edx
c001b072:	8d 54 24 0c          	lea    edx,[esp+0xc]
c001b076:	52                   	push   edx
c001b077:	31 d2                	xor    edx,edx
c001b079:	57                   	push   edi
c001b07a:	52                   	push   edx
c001b07b:	50                   	push   eax
c001b07c:	56                   	push   esi
c001b07d:	ff d3                	call   ebx
c001b07f:	83 c4 14             	add    esp,0x14
c001b082:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001b086:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001b089:	e8 d7 31 00 00       	call   c001e265 <terminateTask(int)>
c001b08e:	83 c4 40             	add    esp,0x40
c001b091:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001b096:	5b                   	pop    ebx
c001b097:	31 d2                	xor    edx,edx
c001b099:	5e                   	pop    esi
c001b09a:	5f                   	pop    edi
c001b09b:	c3                   	ret    

c001b09c <Sys::yield(regs*)>:
c001b09c:	57                   	push   edi
c001b09d:	56                   	push   esi
c001b09e:	53                   	push   ebx
c001b09f:	fa                   	cli    
c001b0a0:	ff 05 c8 0e 03 c0    	inc    DWORD PTR ds:0xc0030ec8
c001b0a6:	e8 1a 29 00 00       	call   c001d9c5 <schedule()>
c001b0ab:	a1 c8 0e 03 c0       	mov    eax,ds:0xc0030ec8
c001b0b0:	48                   	dec    eax
c001b0b1:	a3 c8 0e 03 c0       	mov    ds:0xc0030ec8,eax
c001b0b6:	75 01                	jne    c001b0b9 <Sys::yield(regs*)+0x1d>
c001b0b8:	fb                   	sti    
c001b0b9:	8b 35 10 e0 02 c0    	mov    esi,DWORD PTR ds:0xc002e010
c001b0bf:	8b 3d 14 e0 02 c0    	mov    edi,DWORD PTR ds:0xc002e014
c001b0c5:	89 f0                	mov    eax,esi
c001b0c7:	89 fb                	mov    ebx,edi
c001b0c9:	89 f1                	mov    ecx,esi
c001b0cb:	c1 e0 07             	shl    eax,0x7
c001b0ce:	0f ac d9 17          	shrd   ecx,ebx,0x17
c001b0d2:	25 80 30 0f 00       	and    eax,0xf3080
c001b0d7:	c1 eb 17             	shr    ebx,0x17
c001b0da:	31 c8                	xor    eax,ecx
c001b0dc:	89 da                	mov    edx,ebx
c001b0de:	5b                   	pop    ebx
c001b0df:	5e                   	pop    esi
c001b0e0:	5f                   	pop    edi
c001b0e1:	c3                   	ret    

c001b0e2 <sysCallSeekDir(regs*)>:
c001b0e2:	31 c0                	xor    eax,eax
c001b0e4:	31 d2                	xor    edx,edx
c001b0e6:	c3                   	ret    

c001b0e7 <sysCallTellDir(regs*)>:
c001b0e7:	31 c0                	xor    eax,eax
c001b0e9:	31 d2                	xor    edx,edx
c001b0eb:	c3                   	ret    

c001b0ec <sysCallVerify(regs*)>:
c001b0ec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b0f0:	31 d2                	xor    edx,edx
c001b0f2:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b0f5:	c3                   	ret    

c001b0f6 <sysCallGetArgc(regs*)>:
c001b0f6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b0fb:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b0fe:	8b 80 36 05 00 00    	mov    eax,DWORD PTR [eax+0x536]
c001b104:	99                   	cdq    
c001b105:	c3                   	ret    

c001b106 <sysFormatDisk(regs*)>:
c001b106:	56                   	push   esi
c001b107:	53                   	push   ebx
c001b108:	53                   	push   ebx
c001b109:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b10d:	8b 1d 14 db 02 c0    	mov    ebx,DWORD PTR ds:0xc002db14
c001b113:	eb 25                	jmp    c001b13a <sysFormatDisk(regs*)+0x34>
c001b115:	83 ec 0c             	sub    esp,0xc
c001b118:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001b11b:	8b 13                	mov    edx,DWORD PTR [ebx]
c001b11d:	ff 76 28             	push   DWORD PTR [esi+0x28]
c001b120:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001b123:	50                   	push   eax
c001b124:	ff 34 85 a0 df 02 c0 	push   DWORD PTR [eax*4-0x3ffd2060]
c001b12b:	53                   	push   ebx
c001b12c:	ff 52 48             	call   DWORD PTR [edx+0x48]
c001b12f:	83 c4 20             	add    esp,0x20
c001b132:	83 f8 08             	cmp    eax,0x8
c001b135:	75 12                	jne    c001b149 <sysFormatDisk(regs*)+0x43>
c001b137:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c001b13a:	85 db                	test   ebx,ebx
c001b13c:	75 d7                	jne    c001b115 <sysFormatDisk(regs*)+0xf>
c001b13e:	59                   	pop    ecx
c001b13f:	b8 03 00 00 00       	mov    eax,0x3
c001b144:	31 d2                	xor    edx,edx
c001b146:	5b                   	pop    ebx
c001b147:	5e                   	pop    esi
c001b148:	c3                   	ret    
c001b149:	85 c0                	test   eax,eax
c001b14b:	74 1b                	je     c001b168 <sysFormatDisk(regs*)+0x62>
c001b14d:	83 f8 09             	cmp    eax,0x9
c001b150:	74 0b                	je     c001b15d <sysFormatDisk(regs*)+0x57>
c001b152:	59                   	pop    ecx
c001b153:	b8 02 00 00 00       	mov    eax,0x2
c001b158:	31 d2                	xor    edx,edx
c001b15a:	5b                   	pop    ebx
c001b15b:	5e                   	pop    esi
c001b15c:	c3                   	ret    
c001b15d:	59                   	pop    ecx
c001b15e:	b8 01 00 00 00       	mov    eax,0x1
c001b163:	31 d2                	xor    edx,edx
c001b165:	5b                   	pop    ebx
c001b166:	5e                   	pop    esi
c001b167:	c3                   	ret    
c001b168:	59                   	pop    ecx
c001b169:	31 c0                	xor    eax,eax
c001b16b:	31 d2                	xor    edx,edx
c001b16d:	5b                   	pop    ebx
c001b16e:	5e                   	pop    esi
c001b16f:	c3                   	ret    

c001b170 <sysSetDiskVolumeLabel(regs*)>:
c001b170:	56                   	push   esi
c001b171:	53                   	push   ebx
c001b172:	53                   	push   ebx
c001b173:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b177:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001b17a:	83 f8 19             	cmp    eax,0x19
c001b17d:	77 29                	ja     c001b1a8 <sysSetDiskVolumeLabel(regs*)+0x38>
c001b17f:	8b 0c 85 a0 df 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd2060]
c001b186:	85 c9                	test   ecx,ecx
c001b188:	74 1e                	je     c001b1a8 <sysSetDiskVolumeLabel(regs*)+0x38>
c001b18a:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c001b18d:	85 d2                	test   edx,edx
c001b18f:	74 17                	je     c001b1a8 <sysSetDiskVolumeLabel(regs*)+0x38>
c001b191:	8b 99 70 01 00 00    	mov    ebx,DWORD PTR [ecx+0x170]
c001b197:	8b 33                	mov    esi,DWORD PTR [ebx]
c001b199:	52                   	push   edx
c001b19a:	50                   	push   eax
c001b19b:	51                   	push   ecx
c001b19c:	53                   	push   ebx
c001b19d:	ff 56 58             	call   DWORD PTR [esi+0x58]
c001b1a0:	83 c4 10             	add    esp,0x10
c001b1a3:	99                   	cdq    
c001b1a4:	59                   	pop    ecx
c001b1a5:	5b                   	pop    ebx
c001b1a6:	5e                   	pop    esi
c001b1a7:	c3                   	ret    
c001b1a8:	59                   	pop    ecx
c001b1a9:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001b1ae:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b1b3:	5b                   	pop    ebx
c001b1b4:	5e                   	pop    esi
c001b1b5:	c3                   	ret    

c001b1b6 <sysGetDiskVolumeLabel(regs*)>:
c001b1b6:	57                   	push   edi
c001b1b7:	56                   	push   esi
c001b1b8:	53                   	push   ebx
c001b1b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b1bd:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001b1c0:	83 fa 19             	cmp    edx,0x19
c001b1c3:	77 34                	ja     c001b1f9 <sysGetDiskVolumeLabel(regs*)+0x43>
c001b1c5:	8b 0c 95 a0 df 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd2060]
c001b1cc:	85 c9                	test   ecx,ecx
c001b1ce:	74 29                	je     c001b1f9 <sysGetDiskVolumeLabel(regs*)+0x43>
c001b1d0:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c001b1d3:	85 db                	test   ebx,ebx
c001b1d5:	74 22                	je     c001b1f9 <sysGetDiskVolumeLabel(regs*)+0x43>
c001b1d7:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001b1da:	85 c0                	test   eax,eax
c001b1dc:	74 1b                	je     c001b1f9 <sysGetDiskVolumeLabel(regs*)+0x43>
c001b1de:	8b b1 70 01 00 00    	mov    esi,DWORD PTR [ecx+0x170]
c001b1e4:	83 ec 0c             	sub    esp,0xc
c001b1e7:	8b 3e                	mov    edi,DWORD PTR [esi]
c001b1e9:	50                   	push   eax
c001b1ea:	53                   	push   ebx
c001b1eb:	52                   	push   edx
c001b1ec:	51                   	push   ecx
c001b1ed:	56                   	push   esi
c001b1ee:	ff 57 54             	call   DWORD PTR [edi+0x54]
c001b1f1:	83 c4 20             	add    esp,0x20
c001b1f4:	99                   	cdq    
c001b1f5:	5b                   	pop    ebx
c001b1f6:	5e                   	pop    esi
c001b1f7:	5f                   	pop    edi
c001b1f8:	c3                   	ret    
c001b1f9:	5b                   	pop    ebx
c001b1fa:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001b1ff:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b204:	5e                   	pop    esi
c001b205:	5f                   	pop    edi
c001b206:	c3                   	ret    

c001b207 <sysShutdown(regs*)>:
c001b207:	83 ec 0c             	sub    esp,0xc
c001b20a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b20e:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b211:	85 c0                	test   eax,eax
c001b213:	74 18                	je     c001b22d <sysShutdown(regs*)+0x26>
c001b215:	83 f8 01             	cmp    eax,0x1
c001b218:	74 38                	je     c001b252 <sysShutdown(regs*)+0x4b>
c001b21a:	83 f8 02             	cmp    eax,0x2
c001b21d:	74 24                	je     c001b243 <sysShutdown(regs*)+0x3c>
c001b21f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b224:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b229:	83 c4 0c             	add    esp,0xc
c001b22c:	c3                   	ret    
c001b22d:	a1 a8 d9 02 c0       	mov    eax,ds:0xc002d9a8
c001b232:	8b 10                	mov    edx,DWORD PTR [eax]
c001b234:	6a 00                	push   0x0
c001b236:	6a 00                	push   0x0
c001b238:	6a 00                	push   0x0
c001b23a:	50                   	push   eax
c001b23b:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001b23e:	83 c4 10             	add    esp,0x10
c001b241:	eb dc                	jmp    c001b21f <sysShutdown(regs*)+0x18>
c001b243:	a1 a8 d9 02 c0       	mov    eax,ds:0xc002d9a8
c001b248:	8b 10                	mov    edx,DWORD PTR [eax]
c001b24a:	6a 00                	push   0x0
c001b24c:	6a 00                	push   0x0
c001b24e:	6a 01                	push   0x1
c001b250:	eb e8                	jmp    c001b23a <sysShutdown(regs*)+0x33>
c001b252:	a1 40 00 03 c0       	mov    eax,ds:0xc0030040
c001b257:	85 c0                	test   eax,eax
c001b259:	74 02                	je     c001b25d <sysShutdown(regs*)+0x56>
c001b25b:	ff d0                	call   eax
c001b25d:	31 c0                	xor    eax,eax
c001b25f:	31 d2                	xor    edx,edx
c001b261:	83 c4 0c             	add    esp,0xc
c001b264:	c3                   	ret    

c001b265 <sysCallRealpath(regs*)>:
c001b265:	83 ec 0c             	sub    esp,0xc
c001b268:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b26c:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c001b26f:	85 d2                	test   edx,edx
c001b271:	74 07                	je     c001b27a <sysCallRealpath(regs*)+0x15>
c001b273:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001b276:	85 c0                	test   eax,eax
c001b278:	75 0b                	jne    c001b285 <sysCallRealpath(regs*)+0x20>
c001b27a:	b8 01 00 00 00       	mov    eax,0x1
c001b27f:	31 d2                	xor    edx,edx
c001b281:	83 c4 0c             	add    esp,0xc
c001b284:	c3                   	ret    
c001b285:	51                   	push   ecx
c001b286:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001b28c:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001b28f:	81 c1 0c 01 00 00    	add    ecx,0x10c
c001b295:	51                   	push   ecx
c001b296:	52                   	push   edx
c001b297:	50                   	push   eax
c001b298:	e8 e1 77 ff ff       	call   c0012a7e <Fs::standardiseFiles(char*, char const*, char const*)>
c001b29d:	83 c4 10             	add    esp,0x10
c001b2a0:	31 c0                	xor    eax,eax
c001b2a2:	31 d2                	xor    edx,edx
c001b2a4:	83 c4 0c             	add    esp,0xc
c001b2a7:	c3                   	ret    

c001b2a8 <sysCallReadDir(regs*)>:
c001b2a8:	53                   	push   ebx
c001b2a9:	83 ec 18             	sub    esp,0x18
c001b2ac:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b2b0:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001b2b3:	83 f8 02             	cmp    eax,0x2
c001b2b6:	76 60                	jbe    c001b318 <sysCallReadDir(regs*)+0x70>
c001b2b8:	81 7b 20 00 ff ff 0f 	cmp    DWORD PTR [ebx+0x20],0xfffff00
c001b2bf:	77 48                	ja     c001b309 <sysCallReadDir(regs*)+0x61>
c001b2c1:	83 ec 0c             	sub    esp,0xc
c001b2c4:	50                   	push   eax
c001b2c5:	e8 fd 5d ff ff       	call   c00110c7 <getFromFileDescriptor(int)>
c001b2ca:	83 c4 10             	add    esp,0x10
c001b2cd:	85 c0                	test   eax,eax
c001b2cf:	74 38                	je     c001b309 <sysCallReadDir(regs*)+0x61>
c001b2d1:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b2d9:	83 ec 0c             	sub    esp,0xc
c001b2dc:	8b 10                	mov    edx,DWORD PTR [eax]
c001b2de:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c001b2e2:	51                   	push   ecx
c001b2e3:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b2e6:	6a 00                	push   0x0
c001b2e8:	68 10 01 00 00       	push   0x110
c001b2ed:	50                   	push   eax
c001b2ee:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001b2f1:	83 c4 20             	add    esp,0x20
c001b2f4:	85 c0                	test   eax,eax
c001b2f6:	74 29                	je     c001b321 <sysCallReadDir(regs*)+0x79>
c001b2f8:	83 f8 07             	cmp    eax,0x7
c001b2fb:	74 1b                	je     c001b318 <sysCallReadDir(regs*)+0x70>
c001b2fd:	b8 02 00 00 00       	mov    eax,0x2
c001b302:	31 d2                	xor    edx,edx
c001b304:	83 c4 18             	add    esp,0x18
c001b307:	5b                   	pop    ebx
c001b308:	c3                   	ret    
c001b309:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b30e:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b313:	83 c4 18             	add    esp,0x18
c001b316:	5b                   	pop    ebx
c001b317:	c3                   	ret    
c001b318:	b8 01 00 00 00       	mov    eax,0x1
c001b31d:	31 d2                	xor    edx,edx
c001b31f:	eb e3                	jmp    c001b304 <sysCallReadDir(regs*)+0x5c>
c001b321:	31 c0                	xor    eax,eax
c001b323:	31 d2                	xor    edx,edx
c001b325:	eb dd                	jmp    c001b304 <sysCallReadDir(regs*)+0x5c>

c001b327 <sysCallIsATTY(regs*)>:
c001b327:	83 ec 0c             	sub    esp,0xc
c001b32a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b32e:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b331:	83 f8 02             	cmp    eax,0x2
c001b334:	76 07                	jbe    c001b33d <sysCallIsATTY(regs*)+0x16>
c001b336:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001b33b:	75 26                	jne    c001b363 <sysCallIsATTY(regs*)+0x3c>
c001b33d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b342:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b345:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001b34b:	85 c0                	test   eax,eax
c001b34d:	74 24                	je     c001b373 <sysCallIsATTY(regs*)+0x4c>
c001b34f:	83 ec 0c             	sub    esp,0xc
c001b352:	8b 10                	mov    edx,DWORD PTR [eax]
c001b354:	50                   	push   eax
c001b355:	ff 12                	call   DWORD PTR [edx]
c001b357:	31 d2                	xor    edx,edx
c001b359:	0f b6 c0             	movzx  eax,al
c001b35c:	83 c4 10             	add    esp,0x10
c001b35f:	83 c4 0c             	add    esp,0xc
c001b362:	c3                   	ret    
c001b363:	83 ec 0c             	sub    esp,0xc
c001b366:	50                   	push   eax
c001b367:	e8 5b 5d ff ff       	call   c00110c7 <getFromFileDescriptor(int)>
c001b36c:	83 c4 10             	add    esp,0x10
c001b36f:	85 c0                	test   eax,eax
c001b371:	75 dc                	jne    c001b34f <sysCallIsATTY(regs*)+0x28>
c001b373:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b378:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b37d:	83 c4 0c             	add    esp,0xc
c001b380:	c3                   	ret    

c001b381 <sysCallSeek(regs*)>:
c001b381:	53                   	push   ebx
c001b382:	83 ec 08             	sub    esp,0x8
c001b385:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b389:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b38c:	8d 50 fd             	lea    edx,[eax-0x3]
c001b38f:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c001b395:	77 32                	ja     c001b3c9 <sysCallSeek(regs*)+0x48>
c001b397:	83 ec 0c             	sub    esp,0xc
c001b39a:	50                   	push   eax
c001b39b:	e8 27 5d ff ff       	call   c00110c7 <getFromFileDescriptor(int)>
c001b3a0:	83 c4 0c             	add    esp,0xc
c001b3a3:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c001b3a6:	31 db                	xor    ebx,ebx
c001b3a8:	53                   	push   ebx
c001b3a9:	51                   	push   ecx
c001b3aa:	50                   	push   eax
c001b3ab:	e8 9a 79 ff ff       	call   c0012d4a <File::seek(unsigned long long)>
c001b3b0:	83 c4 10             	add    esp,0x10
c001b3b3:	85 c0                	test   eax,eax
c001b3b5:	0f 95 c0             	setne  al
c001b3b8:	31 d2                	xor    edx,edx
c001b3ba:	0f b6 c0             	movzx  eax,al
c001b3bd:	f7 d8                	neg    eax
c001b3bf:	83 d2 00             	adc    edx,0x0
c001b3c2:	83 c4 08             	add    esp,0x8
c001b3c5:	f7 da                	neg    edx
c001b3c7:	5b                   	pop    ebx
c001b3c8:	c3                   	ret    
c001b3c9:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b3ce:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b3d3:	83 c4 08             	add    esp,0x8
c001b3d6:	5b                   	pop    ebx
c001b3d7:	c3                   	ret    

c001b3d8 <sysCallTell(regs*)>:
c001b3d8:	53                   	push   ebx
c001b3d9:	83 ec 08             	sub    esp,0x8
c001b3dc:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b3e0:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b3e3:	83 f8 02             	cmp    eax,0x2
c001b3e6:	76 4d                	jbe    c001b435 <sysCallTell(regs*)+0x5d>
c001b3e8:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001b3ed:	76 19                	jbe    c001b408 <sysCallTell(regs*)+0x30>
c001b3ef:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001b3f2:	31 d2                	xor    edx,edx
c001b3f4:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001b3fa:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001b401:	31 c0                	xor    eax,eax
c001b403:	83 c4 08             	add    esp,0x8
c001b406:	5b                   	pop    ebx
c001b407:	c3                   	ret    
c001b408:	83 ec 0c             	sub    esp,0xc
c001b40b:	50                   	push   eax
c001b40c:	e8 b6 5c ff ff       	call   c00110c7 <getFromFileDescriptor(int)>
c001b411:	5a                   	pop    edx
c001b412:	59                   	pop    ecx
c001b413:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001b416:	50                   	push   eax
c001b417:	e8 84 79 ff ff       	call   c0012da0 <File::tell(unsigned long long*)>
c001b41c:	83 c4 10             	add    esp,0x10
c001b41f:	85 c0                	test   eax,eax
c001b421:	0f 95 c0             	setne  al
c001b424:	31 d2                	xor    edx,edx
c001b426:	0f b6 c0             	movzx  eax,al
c001b429:	f7 d8                	neg    eax
c001b42b:	83 d2 00             	adc    edx,0x0
c001b42e:	83 c4 08             	add    esp,0x8
c001b431:	f7 da                	neg    edx
c001b433:	5b                   	pop    ebx
c001b434:	c3                   	ret    
c001b435:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b43a:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b43f:	83 c4 08             	add    esp,0x8
c001b442:	5b                   	pop    ebx
c001b443:	c3                   	ret    

c001b444 <sysCallSize(regs*)>:
c001b444:	53                   	push   ebx
c001b445:	83 ec 18             	sub    esp,0x18
c001b448:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b44c:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b44f:	83 f8 02             	cmp    eax,0x2
c001b452:	76 53                	jbe    c001b4a7 <sysCallSize(regs*)+0x63>
c001b454:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001b459:	76 19                	jbe    c001b474 <sysCallSize(regs*)+0x30>
c001b45b:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001b45e:	31 d2                	xor    edx,edx
c001b460:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001b466:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001b46d:	31 c0                	xor    eax,eax
c001b46f:	83 c4 18             	add    esp,0x18
c001b472:	5b                   	pop    ebx
c001b473:	c3                   	ret    
c001b474:	83 ec 0c             	sub    esp,0xc
c001b477:	50                   	push   eax
c001b478:	e8 4a 5c ff ff       	call   c00110c7 <getFromFileDescriptor(int)>
c001b47d:	83 c4 0c             	add    esp,0xc
c001b480:	8d 54 24 13          	lea    edx,[esp+0x13]
c001b484:	52                   	push   edx
c001b485:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001b488:	50                   	push   eax
c001b489:	e8 aa 7a ff ff       	call   c0012f38 <File::stat(unsigned long long*, bool*)>
c001b48e:	83 c4 10             	add    esp,0x10
c001b491:	85 c0                	test   eax,eax
c001b493:	0f 95 c0             	setne  al
c001b496:	31 d2                	xor    edx,edx
c001b498:	0f b6 c0             	movzx  eax,al
c001b49b:	f7 d8                	neg    eax
c001b49d:	83 d2 00             	adc    edx,0x0
c001b4a0:	83 c4 18             	add    esp,0x18
c001b4a3:	f7 da                	neg    edx
c001b4a5:	5b                   	pop    ebx
c001b4a6:	c3                   	ret    
c001b4a7:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b4ac:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b4b1:	83 c4 18             	add    esp,0x18
c001b4b4:	5b                   	pop    ebx
c001b4b5:	c3                   	ret    

c001b4b6 <sysCallSizeFromFilename(regs*)>:
c001b4b6:	57                   	push   edi
c001b4b7:	56                   	push   esi
c001b4b8:	53                   	push   ebx
c001b4b9:	83 ec 20             	sub    esp,0x20
c001b4bc:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001b4c0:	8b 5e 20             	mov    ebx,DWORD PTR [esi+0x20]
c001b4c3:	83 fb 02             	cmp    ebx,0x2
c001b4c6:	0f 86 88 00 00 00    	jbe    c001b554 <sysCallSizeFromFilename(regs*)+0x9e>
c001b4cc:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c001b4d2:	76 1b                	jbe    c001b4ef <sysCallSizeFromFilename(regs*)+0x39>
c001b4d4:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001b4d7:	31 d2                	xor    edx,edx
c001b4d9:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001b4df:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001b4e6:	83 c4 20             	add    esp,0x20
c001b4e9:	31 c0                	xor    eax,eax
c001b4eb:	5b                   	pop    ebx
c001b4ec:	5e                   	pop    esi
c001b4ed:	5f                   	pop    edi
c001b4ee:	c3                   	ret    
c001b4ef:	83 ec 0c             	sub    esp,0xc
c001b4f2:	68 14 01 00 00       	push   0x114
c001b4f7:	e8 9d 40 ff ff       	call   c000f599 <malloc>
c001b4fc:	83 c4 0c             	add    esp,0xc
c001b4ff:	89 c7                	mov    edi,eax
c001b501:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b506:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b509:	53                   	push   ebx
c001b50a:	57                   	push   edi
c001b50b:	e8 18 77 ff ff       	call   c0012c28 <File::File(char const*, Process*)>
c001b510:	83 c4 0c             	add    esp,0xc
c001b513:	8d 44 24 23          	lea    eax,[esp+0x23]
c001b517:	50                   	push   eax
c001b518:	ff 76 28             	push   DWORD PTR [esi+0x28]
c001b51b:	57                   	push   edi
c001b51c:	e8 17 7a ff ff       	call   c0012f38 <File::stat(unsigned long long*, bool*)>
c001b521:	83 c4 10             	add    esp,0x10
c001b524:	85 ff                	test   edi,edi
c001b526:	74 14                	je     c001b53c <sysCallSizeFromFilename(regs*)+0x86>
c001b528:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b52c:	8b 17                	mov    edx,DWORD PTR [edi]
c001b52e:	83 ec 0c             	sub    esp,0xc
c001b531:	57                   	push   edi
c001b532:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001b535:	83 c4 10             	add    esp,0x10
c001b538:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b53c:	85 c0                	test   eax,eax
c001b53e:	0f 95 c0             	setne  al
c001b541:	31 d2                	xor    edx,edx
c001b543:	0f b6 c0             	movzx  eax,al
c001b546:	f7 d8                	neg    eax
c001b548:	83 d2 00             	adc    edx,0x0
c001b54b:	83 c4 20             	add    esp,0x20
c001b54e:	f7 da                	neg    edx
c001b550:	5b                   	pop    ebx
c001b551:	5e                   	pop    esi
c001b552:	5f                   	pop    edi
c001b553:	c3                   	ret    
c001b554:	83 c4 20             	add    esp,0x20
c001b557:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b55c:	5b                   	pop    ebx
c001b55d:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b562:	5e                   	pop    esi
c001b563:	5f                   	pop    edi
c001b564:	c3                   	ret    

c001b565 <sysCallClose(regs*)>:
c001b565:	53                   	push   ebx
c001b566:	83 ec 08             	sub    esp,0x8
c001b569:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b56d:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b570:	83 f8 02             	cmp    eax,0x2
c001b573:	76 41                	jbe    c001b5b6 <sysCallClose(regs*)+0x51>
c001b575:	8d 90 00 01 00 f0    	lea    edx,[eax-0xfffff00]
c001b57b:	83 fa 01             	cmp    edx,0x1
c001b57e:	76 2d                	jbe    c001b5ad <sysCallClose(regs*)+0x48>
c001b580:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001b585:	77 2f                	ja     c001b5b6 <sysCallClose(regs*)+0x51>
c001b587:	83 ec 0c             	sub    esp,0xc
c001b58a:	50                   	push   eax
c001b58b:	e8 37 5b ff ff       	call   c00110c7 <getFromFileDescriptor(int)>
c001b590:	89 c3                	mov    ebx,eax
c001b592:	89 04 24             	mov    DWORD PTR [esp],eax
c001b595:	e8 50 77 ff ff       	call   c0012cea <File::close()>
c001b59a:	83 c4 10             	add    esp,0x10
c001b59d:	85 db                	test   ebx,ebx
c001b59f:	74 0c                	je     c001b5ad <sysCallClose(regs*)+0x48>
c001b5a1:	83 ec 0c             	sub    esp,0xc
c001b5a4:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b5a6:	53                   	push   ebx
c001b5a7:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b5aa:	83 c4 10             	add    esp,0x10
c001b5ad:	31 c0                	xor    eax,eax
c001b5af:	31 d2                	xor    edx,edx
c001b5b1:	83 c4 08             	add    esp,0x8
c001b5b4:	5b                   	pop    ebx
c001b5b5:	c3                   	ret    
c001b5b6:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b5bb:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b5c0:	83 c4 08             	add    esp,0x8
c001b5c3:	5b                   	pop    ebx
c001b5c4:	c3                   	ret    

c001b5c5 <sysCallOpenDir(regs*)>:
c001b5c5:	56                   	push   esi
c001b5c6:	53                   	push   ebx
c001b5c7:	53                   	push   ebx
c001b5c8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b5cc:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c001b5cf:	85 f6                	test   esi,esi
c001b5d1:	74 59                	je     c001b62c <sysCallOpenDir(regs*)+0x67>
c001b5d3:	83 ec 0c             	sub    esp,0xc
c001b5d6:	68 14 01 00 00       	push   0x114
c001b5db:	e8 b9 3f ff ff       	call   c000f599 <malloc>
c001b5e0:	83 c4 0c             	add    esp,0xc
c001b5e3:	89 c6                	mov    esi,eax
c001b5e5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b5ea:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b5ed:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b5f0:	56                   	push   esi
c001b5f1:	e8 de 7a ff ff       	call   c00130d4 <Directory::Directory(char const*, Process*)>
c001b5f6:	83 c4 10             	add    esp,0x10
c001b5f9:	85 f6                	test   esi,esi
c001b5fb:	74 2f                	je     c001b62c <sysCallOpenDir(regs*)+0x67>
c001b5fd:	83 ec 0c             	sub    esp,0xc
c001b600:	56                   	push   esi
c001b601:	e8 32 7b ff ff       	call   c0013138 <Directory::open()>
c001b606:	83 c4 10             	add    esp,0x10
c001b609:	85 c0                	test   eax,eax
c001b60b:	75 1f                	jne    c001b62c <sysCallOpenDir(regs*)+0x67>
c001b60d:	83 ec 0c             	sub    esp,0xc
c001b610:	56                   	push   esi
c001b611:	e8 bc 57 ff ff       	call   c0010dd2 <UnixFile::getFileDescriptor()>
c001b616:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001b619:	83 c4 10             	add    esp,0x10
c001b61c:	89 02                	mov    DWORD PTR [edx],eax
c001b61e:	c1 f8 1f             	sar    eax,0x1f
c001b621:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001b624:	31 c0                	xor    eax,eax
c001b626:	59                   	pop    ecx
c001b627:	31 d2                	xor    edx,edx
c001b629:	5b                   	pop    ebx
c001b62a:	5e                   	pop    esi
c001b62b:	c3                   	ret    
c001b62c:	59                   	pop    ecx
c001b62d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b632:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b637:	5b                   	pop    ebx
c001b638:	5e                   	pop    esi
c001b639:	c3                   	ret    

c001b63a <sysCallCloseDir(regs*)>:
c001b63a:	53                   	push   ebx
c001b63b:	83 ec 08             	sub    esp,0x8
c001b63e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b642:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b645:	8d 50 fd             	lea    edx,[eax-0x3]
c001b648:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c001b64e:	77 2f                	ja     c001b67f <sysCallCloseDir(regs*)+0x45>
c001b650:	83 ec 0c             	sub    esp,0xc
c001b653:	50                   	push   eax
c001b654:	e8 6e 5a ff ff       	call   c00110c7 <getFromFileDescriptor(int)>
c001b659:	89 c3                	mov    ebx,eax
c001b65b:	89 04 24             	mov    DWORD PTR [esp],eax
c001b65e:	e8 31 7b ff ff       	call   c0013194 <Directory::close()>
c001b663:	83 c4 10             	add    esp,0x10
c001b666:	85 db                	test   ebx,ebx
c001b668:	74 0c                	je     c001b676 <sysCallCloseDir(regs*)+0x3c>
c001b66a:	83 ec 0c             	sub    esp,0xc
c001b66d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b66f:	53                   	push   ebx
c001b670:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b673:	83 c4 10             	add    esp,0x10
c001b676:	31 c0                	xor    eax,eax
c001b678:	31 d2                	xor    edx,edx
c001b67a:	83 c4 08             	add    esp,0x8
c001b67d:	5b                   	pop    ebx
c001b67e:	c3                   	ret    
c001b67f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b684:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b689:	83 c4 08             	add    esp,0x8
c001b68c:	5b                   	pop    ebx
c001b68d:	c3                   	ret    

c001b68e <sysCallMakeDir(regs*)>:
c001b68e:	56                   	push   esi
c001b68f:	53                   	push   ebx
c001b690:	83 ec 10             	sub    esp,0x10
c001b693:	68 14 01 00 00       	push   0x114
c001b698:	e8 fc 3e ff ff       	call   c000f599 <malloc>
c001b69d:	83 c4 0c             	add    esp,0xc
c001b6a0:	89 c3                	mov    ebx,eax
c001b6a2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b6a7:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b6aa:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b6ae:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001b6b1:	53                   	push   ebx
c001b6b2:	e8 1d 7a ff ff       	call   c00130d4 <Directory::Directory(char const*, Process*)>
c001b6b7:	83 c4 10             	add    esp,0x10
c001b6ba:	85 db                	test   ebx,ebx
c001b6bc:	74 32                	je     c001b6f0 <sysCallMakeDir(regs*)+0x62>
c001b6be:	83 ec 0c             	sub    esp,0xc
c001b6c1:	53                   	push   ebx
c001b6c2:	e8 51 7c ff ff       	call   c0013318 <Directory::create()>
c001b6c7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b6ca:	89 c6                	mov    esi,eax
c001b6cc:	e8 c3 7a ff ff       	call   c0013194 <Directory::close()>
c001b6d1:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b6d3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b6d6:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b6d9:	83 c4 10             	add    esp,0x10
c001b6dc:	31 c0                	xor    eax,eax
c001b6de:	59                   	pop    ecx
c001b6df:	85 f6                	test   esi,esi
c001b6e1:	5b                   	pop    ebx
c001b6e2:	0f 95 c0             	setne  al
c001b6e5:	5e                   	pop    esi
c001b6e6:	31 d2                	xor    edx,edx
c001b6e8:	f7 d8                	neg    eax
c001b6ea:	83 d2 00             	adc    edx,0x0
c001b6ed:	f7 da                	neg    edx
c001b6ef:	c3                   	ret    
c001b6f0:	59                   	pop    ecx
c001b6f1:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b6f6:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b6fb:	5b                   	pop    ebx
c001b6fc:	5e                   	pop    esi
c001b6fd:	c3                   	ret    

c001b6fe <sysCallWait(regs*)>:
c001b6fe:	83 ec 10             	sub    esp,0x10
c001b701:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b705:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001b708:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001b70b:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001b70e:	e8 b5 24 00 00       	call   c001dbc8 <waitTask(int, int*, int)>
c001b713:	83 c4 1c             	add    esp,0x1c
c001b716:	99                   	cdq    
c001b717:	c3                   	ret    

c001b718 <sysCallNotImpl(regs*)>:
c001b718:	83 ec 18             	sub    esp,0x18
c001b71b:	68 19 b9 02 c0       	push   0xc002b919
c001b720:	e8 10 e7 ff ff       	call   c0019e35 <Krnl::panic(char const*)>
c001b725:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b72a:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b72f:	83 c4 1c             	add    esp,0x1c
c001b732:	c3                   	ret    

c001b733 <sysPanic(regs*)>:
c001b733:	83 ec 18             	sub    esp,0x18
c001b736:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b73a:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001b73d:	e8 f3 e6 ff ff       	call   c0019e35 <Krnl::panic(char const*)>
c001b742:	b8 01 00 00 00       	mov    eax,0x1
c001b747:	31 d2                	xor    edx,edx
c001b749:	83 c4 1c             	add    esp,0x1c
c001b74c:	c3                   	ret    

c001b74d <sysCallRmdir(regs*)>:
c001b74d:	56                   	push   esi
c001b74e:	53                   	push   ebx
c001b74f:	83 ec 20             	sub    esp,0x20
c001b752:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b756:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001b759:	68 14 01 00 00       	push   0x114
c001b75e:	e8 36 3e ff ff       	call   c000f599 <malloc>
c001b763:	83 c4 0c             	add    esp,0xc
c001b766:	89 c3                	mov    ebx,eax
c001b768:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b76d:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b770:	56                   	push   esi
c001b771:	53                   	push   ebx
c001b772:	e8 b1 74 ff ff       	call   c0012c28 <File::File(char const*, Process*)>
c001b777:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b77a:	e8 85 76 ff ff       	call   c0012e04 <File::unlink()>
c001b77f:	83 c4 10             	add    esp,0x10
c001b782:	85 db                	test   ebx,ebx
c001b784:	74 14                	je     c001b79a <sysCallRmdir(regs*)+0x4d>
c001b786:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b78a:	8b 13                	mov    edx,DWORD PTR [ebx]
c001b78c:	83 ec 0c             	sub    esp,0xc
c001b78f:	53                   	push   ebx
c001b790:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001b793:	83 c4 10             	add    esp,0x10
c001b796:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b79a:	85 c0                	test   eax,eax
c001b79c:	0f 95 c0             	setne  al
c001b79f:	31 d2                	xor    edx,edx
c001b7a1:	0f b6 c0             	movzx  eax,al
c001b7a4:	f7 d8                	neg    eax
c001b7a6:	83 d2 00             	adc    edx,0x0
c001b7a9:	83 c4 14             	add    esp,0x14
c001b7ac:	f7 da                	neg    edx
c001b7ae:	5b                   	pop    ebx
c001b7af:	5e                   	pop    esi
c001b7b0:	c3                   	ret    

c001b7b1 <sysCallUnlink(regs*)>:
c001b7b1:	56                   	push   esi
c001b7b2:	53                   	push   ebx
c001b7b3:	83 ec 20             	sub    esp,0x20
c001b7b6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b7ba:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001b7bd:	68 14 01 00 00       	push   0x114
c001b7c2:	e8 d2 3d ff ff       	call   c000f599 <malloc>
c001b7c7:	83 c4 0c             	add    esp,0xc
c001b7ca:	89 c3                	mov    ebx,eax
c001b7cc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b7d1:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b7d4:	56                   	push   esi
c001b7d5:	53                   	push   ebx
c001b7d6:	e8 4d 74 ff ff       	call   c0012c28 <File::File(char const*, Process*)>
c001b7db:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b7de:	e8 21 76 ff ff       	call   c0012e04 <File::unlink()>
c001b7e3:	83 c4 10             	add    esp,0x10
c001b7e6:	85 db                	test   ebx,ebx
c001b7e8:	74 14                	je     c001b7fe <sysCallUnlink(regs*)+0x4d>
c001b7ea:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b7ee:	8b 13                	mov    edx,DWORD PTR [ebx]
c001b7f0:	83 ec 0c             	sub    esp,0xc
c001b7f3:	53                   	push   ebx
c001b7f4:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001b7f7:	83 c4 10             	add    esp,0x10
c001b7fa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b7fe:	85 c0                	test   eax,eax
c001b800:	0f 95 c0             	setne  al
c001b803:	31 d2                	xor    edx,edx
c001b805:	0f b6 c0             	movzx  eax,al
c001b808:	f7 d8                	neg    eax
c001b80a:	83 d2 00             	adc    edx,0x0
c001b80d:	83 c4 14             	add    esp,0x14
c001b810:	f7 da                	neg    edx
c001b812:	5b                   	pop    ebx
c001b813:	5e                   	pop    esi
c001b814:	c3                   	ret    

c001b815 <sysCallGetArgv(regs*)>:
c001b815:	83 ec 0c             	sub    esp,0xc
c001b818:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b81c:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001b81f:	85 c0                	test   eax,eax
c001b821:	78 2b                	js     c001b84e <sysCallGetArgv(regs*)+0x39>
c001b823:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001b829:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001b82c:	3b 81 36 05 00 00    	cmp    eax,DWORD PTR [ecx+0x536]
c001b832:	7d 1a                	jge    c001b84e <sysCallGetArgv(regs*)+0x39>
c001b834:	8b 84 81 3a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x53a]
c001b83b:	85 c0                	test   eax,eax
c001b83d:	74 17                	je     c001b856 <sysCallGetArgv(regs*)+0x41>
c001b83f:	83 ec 08             	sub    esp,0x8
c001b842:	50                   	push   eax
c001b843:	ff 72 24             	push   DWORD PTR [edx+0x24]
c001b846:	e8 c1 4f fe ff       	call   c000080c <strcpy>
c001b84b:	83 c4 10             	add    esp,0x10
c001b84e:	31 c0                	xor    eax,eax
c001b850:	31 d2                	xor    edx,edx
c001b852:	83 c4 0c             	add    esp,0xc
c001b855:	c3                   	ret    
c001b856:	b8 01 00 00 00       	mov    eax,0x1
c001b85b:	31 d2                	xor    edx,edx
c001b85d:	83 c4 0c             	add    esp,0xc
c001b860:	c3                   	ret    

c001b861 <sysCallTTYName(regs*)>:
c001b861:	56                   	push   esi
c001b862:	53                   	push   ebx
c001b863:	53                   	push   ebx
c001b864:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b868:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c001b86b:	85 c0                	test   eax,eax
c001b86d:	74 5f                	je     c001b8ce <sysCallTTYName(regs*)+0x6d>
c001b86f:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001b872:	83 f8 02             	cmp    eax,0x2
c001b875:	77 3e                	ja     c001b8b5 <sysCallTTYName(regs*)+0x54>
c001b877:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b87c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b87f:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c001b885:	85 db                	test   ebx,ebx
c001b887:	74 45                	je     c001b8ce <sysCallTTYName(regs*)+0x6d>
c001b889:	83 ec 0c             	sub    esp,0xc
c001b88c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b88e:	53                   	push   ebx
c001b88f:	ff 10                	call   DWORD PTR [eax]
c001b891:	83 c4 10             	add    esp,0x10
c001b894:	84 c0                	test   al,al
c001b896:	74 41                	je     c001b8d9 <sysCallTTYName(regs*)+0x78>
c001b898:	83 ec 08             	sub    esp,0x8
c001b89b:	81 c3 82 00 00 00    	add    ebx,0x82
c001b8a1:	53                   	push   ebx
c001b8a2:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001b8a5:	e8 62 4f fe ff       	call   c000080c <strcpy>
c001b8aa:	83 c4 10             	add    esp,0x10
c001b8ad:	31 c0                	xor    eax,eax
c001b8af:	59                   	pop    ecx
c001b8b0:	31 d2                	xor    edx,edx
c001b8b2:	5b                   	pop    ebx
c001b8b3:	5e                   	pop    esi
c001b8b4:	c3                   	ret    
c001b8b5:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001b8ba:	74 bb                	je     c001b877 <sysCallTTYName(regs*)+0x16>
c001b8bc:	83 ec 0c             	sub    esp,0xc
c001b8bf:	50                   	push   eax
c001b8c0:	e8 02 58 ff ff       	call   c00110c7 <getFromFileDescriptor(int)>
c001b8c5:	83 c4 10             	add    esp,0x10
c001b8c8:	89 c3                	mov    ebx,eax
c001b8ca:	85 db                	test   ebx,ebx
c001b8cc:	75 bb                	jne    c001b889 <sysCallTTYName(regs*)+0x28>
c001b8ce:	59                   	pop    ecx
c001b8cf:	b8 01 00 00 00       	mov    eax,0x1
c001b8d4:	31 d2                	xor    edx,edx
c001b8d6:	5b                   	pop    ebx
c001b8d7:	5e                   	pop    esi
c001b8d8:	c3                   	ret    
c001b8d9:	59                   	pop    ecx
c001b8da:	b8 02 00 00 00       	mov    eax,0x2
c001b8df:	31 d2                	xor    edx,edx
c001b8e1:	5b                   	pop    ebx
c001b8e2:	5e                   	pop    esi
c001b8e3:	c3                   	ret    

c001b8e4 <sysCallUSleep(regs*)>:
c001b8e4:	83 ec 14             	sub    esp,0x14
c001b8e7:	b8 e8 03 00 00       	mov    eax,0x3e8
c001b8ec:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001b8f0:	69 4a 28 e8 03 00 00 	imul   ecx,DWORD PTR [edx+0x28],0x3e8
c001b8f7:	f7 62 20             	mul    DWORD PTR [edx+0x20]
c001b8fa:	01 ca                	add    edx,ecx
c001b8fc:	52                   	push   edx
c001b8fd:	50                   	push   eax
c001b8fe:	e8 9c 23 00 00       	call   c001dc9f <nanoSleep(unsigned long long)>
c001b903:	31 c0                	xor    eax,eax
c001b905:	31 d2                	xor    edx,edx
c001b907:	83 c4 1c             	add    esp,0x1c
c001b90a:	c3                   	ret    

c001b90b <sysCallSpawn(regs*)>:
c001b90b:	56                   	push   esi
c001b90c:	53                   	push   ebx
c001b90d:	50                   	push   eax
c001b90e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b912:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001b915:	85 c0                	test   eax,eax
c001b917:	75 08                	jne    c001b921 <sysCallSpawn(regs*)+0x16>
c001b919:	59                   	pop    ecx
c001b91a:	31 c0                	xor    eax,eax
c001b91c:	31 d2                	xor    edx,edx
c001b91e:	5b                   	pop    ebx
c001b91f:	5e                   	pop    esi
c001b920:	c3                   	ret    
c001b921:	83 ec 0c             	sub    esp,0xc
c001b924:	68 3f 07 00 00       	push   0x73f
c001b929:	e8 6b 3c ff ff       	call   c000f599 <malloc>
c001b92e:	83 c4 10             	add    esp,0x10
c001b931:	89 c6                	mov    esi,eax
c001b933:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001b936:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b939:	85 c0                	test   eax,eax
c001b93b:	75 32                	jne    c001b96f <sysCallSpawn(regs*)+0x64>
c001b93d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b942:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b945:	52                   	push   edx
c001b946:	50                   	push   eax
c001b947:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b94a:	56                   	push   esi
c001b94b:	e8 74 1a 00 00       	call   c001d3c4 <Process::Process(char const*, Process*, char**)>
c001b950:	83 c4 10             	add    esp,0x10
c001b953:	80 be 3e 07 00 00 00 	cmp    BYTE PTR [esi+0x73e],0x0
c001b95a:	75 bd                	jne    c001b919 <sysCallSpawn(regs*)+0xe>
c001b95c:	83 ec 0c             	sub    esp,0xc
c001b95f:	56                   	push   esi
c001b960:	e8 41 1f 00 00       	call   c001d8a6 <Process::createUserThread()>
c001b965:	8b 06                	mov    eax,DWORD PTR [esi]
c001b967:	83 c4 10             	add    esp,0x10
c001b96a:	99                   	cdq    
c001b96b:	59                   	pop    ecx
c001b96c:	5b                   	pop    ebx
c001b96d:	5e                   	pop    esi
c001b96e:	c3                   	ret    
c001b96f:	31 c0                	xor    eax,eax
c001b971:	eb d2                	jmp    c001b945 <sysCallSpawn(regs*)+0x3a>

c001b973 <sysCallGetEnv(regs*)>:
c001b973:	57                   	push   edi
c001b974:	56                   	push   esi
c001b975:	53                   	push   ebx
c001b976:	83 ec 1c             	sub    esp,0x1c
c001b979:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001b97d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b982:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c001b985:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c001b988:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b98b:	e8 f1 e3 ff ff       	call   c0019d81 <Krnl::getProcessTotalEnvCount(Process*)>
c001b990:	83 c4 10             	add    esp,0x10
c001b993:	39 c7                	cmp    edi,eax
c001b995:	7c 14                	jl     c001b9ab <sysCallGetEnv(regs*)+0x38>
c001b997:	85 f6                	test   esi,esi
c001b999:	75 0b                	jne    c001b9a6 <sysCallGetEnv(regs*)+0x33>
c001b99b:	83 c4 10             	add    esp,0x10
c001b99e:	31 c0                	xor    eax,eax
c001b9a0:	5b                   	pop    ebx
c001b9a1:	31 d2                	xor    edx,edx
c001b9a3:	5e                   	pop    esi
c001b9a4:	5f                   	pop    edi
c001b9a5:	c3                   	ret    
c001b9a6:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001b9a9:	eb f0                	jmp    c001b99b <sysCallGetEnv(regs*)+0x28>
c001b9ab:	8d 44 24 08          	lea    eax,[esp+0x8]
c001b9af:	52                   	push   edx
c001b9b0:	57                   	push   edi
c001b9b1:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001b9b7:	ff 72 40             	push   DWORD PTR [edx+0x40]
c001b9ba:	50                   	push   eax
c001b9bb:	e8 e1 e3 ff ff       	call   c0019da1 <Krnl::getProcessEnvPair(Process*, int)>
c001b9c0:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c001b9c3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b9c7:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001b9cb:	83 c4 0c             	add    esp,0xc
c001b9ce:	85 c9                	test   ecx,ecx
c001b9d0:	75 23                	jne    c001b9f5 <sysCallGetEnv(regs*)+0x82>
c001b9d2:	83 ec 0c             	sub    esp,0xc
c001b9d5:	50                   	push   eax
c001b9d6:	e8 91 4d fe ff       	call   c000076c <strlen>
c001b9db:	89 3c 24             	mov    DWORD PTR [esp],edi
c001b9de:	89 c3                	mov    ebx,eax
c001b9e0:	e8 87 4d fe ff       	call   c000076c <strlen>
c001b9e5:	83 c4 10             	add    esp,0x10
c001b9e8:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c001b9ec:	83 c4 10             	add    esp,0x10
c001b9ef:	31 d2                	xor    edx,edx
c001b9f1:	5b                   	pop    ebx
c001b9f2:	5e                   	pop    esi
c001b9f3:	5f                   	pop    edi
c001b9f4:	c3                   	ret    
c001b9f5:	83 ec 08             	sub    esp,0x8
c001b9f8:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001b9fb:	50                   	push   eax
c001b9fc:	56                   	push   esi
c001b9fd:	e8 0a 4e fe ff       	call   c000080c <strcpy>
c001ba02:	58                   	pop    eax
c001ba03:	5a                   	pop    edx
c001ba04:	68 33 b9 02 c0       	push   0xc002b933
c001ba09:	56                   	push   esi
c001ba0a:	e8 3d 4f fe ff       	call   c000094c <strcat>
c001ba0f:	59                   	pop    ecx
c001ba10:	5b                   	pop    ebx
c001ba11:	57                   	push   edi
c001ba12:	56                   	push   esi
c001ba13:	e8 34 4f fe ff       	call   c000094c <strcat>
c001ba18:	83 c4 10             	add    esp,0x10
c001ba1b:	e9 7b ff ff ff       	jmp    c001b99b <sysCallGetEnv(regs*)+0x28>

c001ba20 <sysAppSettings(regs*)>:
c001ba20:	57                   	push   edi
c001ba21:	56                   	push   esi
c001ba22:	56                   	push   esi
c001ba23:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba27:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001ba2a:	8b 86 00 01 00 00    	mov    eax,DWORD PTR [esi+0x100]
c001ba30:	25 e0 1f 00 00       	and    eax,0x1fe0
c001ba35:	66 3d c0 09          	cmp    ax,0x9c0
c001ba39:	75 2e                	jne    c001ba69 <sysAppSettings(regs*)+0x49>
c001ba3b:	8a 86 00 01 00 00    	mov    al,BYTE PTR [esi+0x100]
c001ba41:	83 e0 1f             	and    eax,0x1f
c001ba44:	3c 01                	cmp    al,0x1
c001ba46:	74 2c                	je     c001ba74 <sysAppSettings(regs*)+0x54>
c001ba48:	3c 07                	cmp    al,0x7
c001ba4a:	0f 84 b3 00 00 00    	je     c001bb03 <sysAppSettings(regs*)+0xe3>
c001ba50:	84 c0                	test   al,al
c001ba52:	0f 84 d2 00 00 00    	je     c001bb2a <sysAppSettings(regs*)+0x10a>
c001ba58:	3c 08                	cmp    al,0x8
c001ba5a:	74 63                	je     c001babf <sysAppSettings(regs*)+0x9f>
c001ba5c:	59                   	pop    ecx
c001ba5d:	0f b6 c0             	movzx  eax,al
c001ba60:	5e                   	pop    esi
c001ba61:	05 e8 03 00 00       	add    eax,0x3e8
c001ba66:	5f                   	pop    edi
c001ba67:	99                   	cdq    
c001ba68:	c3                   	ret    
c001ba69:	b8 01 00 00 00       	mov    eax,0x1
c001ba6e:	59                   	pop    ecx
c001ba6f:	31 d2                	xor    edx,edx
c001ba71:	5e                   	pop    esi
c001ba72:	5f                   	pop    edi
c001ba73:	c3                   	ret    
c001ba74:	50                   	push   eax
c001ba75:	68 00 01 00 00       	push   0x100
c001ba7a:	6a 00                	push   0x0
c001ba7c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ba81:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001ba84:	83 c0 0c             	add    eax,0xc
c001ba87:	50                   	push   eax
c001ba88:	e8 c3 4c fe ff       	call   c0000750 <memset>
c001ba8d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ba92:	b9 ff 00 00 00       	mov    ecx,0xff
c001ba97:	8b 78 40             	mov    edi,DWORD PTR [eax+0x40]
c001ba9a:	83 c7 0c             	add    edi,0xc
c001ba9d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001ba9f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001baa4:	5a                   	pop    edx
c001baa5:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001baa8:	59                   	pop    ecx
c001baa9:	8d 50 0c             	lea    edx,[eax+0xc]
c001baac:	52                   	push   edx
c001baad:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001bab3:	e8 3a 47 ff ff       	call   c00101f2 <VgaText::setTitle(char*)>
c001bab8:	83 c4 10             	add    esp,0x10
c001babb:	31 c0                	xor    eax,eax
c001babd:	eb af                	jmp    c001ba6e <sysAppSettings(regs*)+0x4e>
c001babf:	83 ec 08             	sub    esp,0x8
c001bac2:	8b 86 04 01 00 00    	mov    eax,DWORD PTR [esi+0x104]
c001bac8:	83 e0 0f             	and    eax,0xf
c001bacb:	50                   	push   eax
c001bacc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bad1:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001bad4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001bada:	e8 03 47 ff ff       	call   c00101e2 <VgaText::setTitleColour(VgaColour)>
c001badf:	5f                   	pop    edi
c001bae0:	58                   	pop    eax
c001bae1:	8b 86 04 01 00 00    	mov    eax,DWORD PTR [esi+0x104]
c001bae7:	c1 e8 04             	shr    eax,0x4
c001baea:	83 e0 0f             	and    eax,0xf
c001baed:	50                   	push   eax
c001baee:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001baf3:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001baf6:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001bafc:	e8 d1 46 ff ff       	call   c00101d2 <VgaText::setTitleTextColour(VgaColour)>
c001bb01:	eb b5                	jmp    c001bab8 <sysAppSettings(regs*)+0x98>
c001bb03:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bb08:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001bb0b:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001bb11:	8a 86 01 01 00 00    	mov    al,BYTE PTR [esi+0x101]
c001bb17:	c0 e8 06             	shr    al,0x6
c001bb1a:	83 e0 01             	and    eax,0x1
c001bb1d:	88 82 80 00 00 00    	mov    BYTE PTR [edx+0x80],al
c001bb23:	31 c0                	xor    eax,eax
c001bb25:	e9 44 ff ff ff       	jmp    c001ba6e <sysAppSettings(regs*)+0x4e>
c001bb2a:	b8 02 00 00 00       	mov    eax,0x2
c001bb2f:	e9 3a ff ff ff       	jmp    c001ba6e <sysAppSettings(regs*)+0x4e>

c001bb34 <sysSetFatAttrib(regs*)>:
c001bb34:	57                   	push   edi
c001bb35:	56                   	push   esi
c001bb36:	53                   	push   ebx
c001bb37:	83 ec 1c             	sub    esp,0x1c
c001bb3a:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001bb3e:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c001bb41:	68 14 01 00 00       	push   0x114
c001bb46:	e8 4e 3a ff ff       	call   c000f599 <malloc>
c001bb4b:	83 c4 0c             	add    esp,0xc
c001bb4e:	89 c3                	mov    ebx,eax
c001bb50:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bb55:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bb58:	57                   	push   edi
c001bb59:	53                   	push   ebx
c001bb5a:	e8 c9 70 ff ff       	call   c0012c28 <File::File(char const*, Process*)>
c001bb5f:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001bb62:	83 c4 0c             	add    esp,0xc
c001bb65:	0f b6 d4             	movzx  edx,ah
c001bb68:	0f b6 c0             	movzx  eax,al
c001bb6b:	52                   	push   edx
c001bb6c:	50                   	push   eax
c001bb6d:	53                   	push   ebx
c001bb6e:	e8 2b 73 ff ff       	call   c0012e9e <File::chfatattr(unsigned char, unsigned char)>
c001bb73:	83 c4 10             	add    esp,0x10
c001bb76:	85 db                	test   ebx,ebx
c001bb78:	74 14                	je     c001bb8e <sysSetFatAttrib(regs*)+0x5a>
c001bb7a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bb7e:	8b 13                	mov    edx,DWORD PTR [ebx]
c001bb80:	83 ec 0c             	sub    esp,0xc
c001bb83:	53                   	push   ebx
c001bb84:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001bb87:	83 c4 10             	add    esp,0x10
c001bb8a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bb8e:	85 c0                	test   eax,eax
c001bb90:	0f 95 c0             	setne  al
c001bb93:	31 d2                	xor    edx,edx
c001bb95:	0f b6 c0             	movzx  eax,al
c001bb98:	f7 d8                	neg    eax
c001bb9a:	83 d2 00             	adc    edx,0x0
c001bb9d:	83 c4 10             	add    esp,0x10
c001bba0:	f7 da                	neg    edx
c001bba2:	5b                   	pop    ebx
c001bba3:	5e                   	pop    esi
c001bba4:	5f                   	pop    edi
c001bba5:	c3                   	ret    

c001bba6 <sysPipe(regs*)>:
c001bba6:	57                   	push   edi
c001bba7:	56                   	push   esi
c001bba8:	53                   	push   ebx
c001bba9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bbad:	83 ec 0c             	sub    esp,0xc
c001bbb0:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c001bbb3:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c001bbb6:	6a 20                	push   0x20
c001bbb8:	e8 dc 39 ff ff       	call   c000f599 <malloc>
c001bbbd:	89 c3                	mov    ebx,eax
c001bbbf:	58                   	pop    eax
c001bbc0:	5a                   	pop    edx
c001bbc1:	68 00 50 00 00       	push   0x5000
c001bbc6:	53                   	push   ebx
c001bbc7:	e8 9e 43 ff ff       	call   c000ff6a <Pipe::Pipe(int)>
c001bbcc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bbcf:	e8 fe 51 ff ff       	call   c0010dd2 <UnixFile::getFileDescriptor()>
c001bbd4:	89 07                	mov    DWORD PTR [edi],eax
c001bbd6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bbd9:	e8 f4 51 ff ff       	call   c0010dd2 <UnixFile::getFileDescriptor()>
c001bbde:	83 c4 10             	add    esp,0x10
c001bbe1:	89 06                	mov    DWORD PTR [esi],eax
c001bbe3:	31 d2                	xor    edx,edx
c001bbe5:	5b                   	pop    ebx
c001bbe6:	31 c0                	xor    eax,eax
c001bbe8:	5e                   	pop    esi
c001bbe9:	5f                   	pop    edi
c001bbea:	c3                   	ret    

c001bbeb <sysGetUnixTime(regs*)>:
c001bbeb:	a1 a8 d9 02 c0       	mov    eax,ds:0xc002d9a8
c001bbf0:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001bbf6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001bbfa:	e9 1b 7a ff ff       	jmp    c001361a <Clock::timeInSecondsLocal()>

c001bbff <string_ends_with(char const*, char const*)>:
c001bbff:	57                   	push   edi
c001bc00:	56                   	push   esi
c001bc01:	53                   	push   ebx
c001bc02:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001bc06:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001bc0a:	83 ec 0c             	sub    esp,0xc
c001bc0d:	53                   	push   ebx
c001bc0e:	e8 59 4b fe ff       	call   c000076c <strlen>
c001bc13:	89 3c 24             	mov    DWORD PTR [esp],edi
c001bc16:	89 c6                	mov    esi,eax
c001bc18:	e8 4f 4b fe ff       	call   c000076c <strlen>
c001bc1d:	83 c4 10             	add    esp,0x10
c001bc20:	39 c6                	cmp    esi,eax
c001bc22:	7d 06                	jge    c001bc2a <string_ends_with(char const*, char const*)+0x2b>
c001bc24:	5b                   	pop    ebx
c001bc25:	31 c0                	xor    eax,eax
c001bc27:	5e                   	pop    esi
c001bc28:	5f                   	pop    edi
c001bc29:	c3                   	ret    
c001bc2a:	83 ec 08             	sub    esp,0x8
c001bc2d:	29 c6                	sub    esi,eax
c001bc2f:	57                   	push   edi
c001bc30:	01 f3                	add    ebx,esi
c001bc32:	53                   	push   ebx
c001bc33:	e8 60 4c fe ff       	call   c0000898 <strcmp>
c001bc38:	83 c4 10             	add    esp,0x10
c001bc3b:	85 c0                	test   eax,eax
c001bc3d:	5b                   	pop    ebx
c001bc3e:	0f 94 c0             	sete   al
c001bc41:	5e                   	pop    esi
c001bc42:	0f b6 c0             	movzx  eax,al
c001bc45:	5f                   	pop    edi
c001bc46:	c3                   	ret    

c001bc47 <sysCallOpen(regs*)>:
c001bc47:	56                   	push   esi
c001bc48:	53                   	push   ebx
c001bc49:	81 ec 04 01 00 00    	sub    esp,0x104
c001bc4f:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c001bc56:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c001bc59:	85 c9                	test   ecx,ecx
c001bc5b:	0f 84 ad 01 00 00    	je     c001be0e <sysCallOpen(regs*)+0x1c7>
c001bc61:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001bc64:	85 c0                	test   eax,eax
c001bc66:	0f 84 a2 01 00 00    	je     c001be0e <sysCallOpen(regs*)+0x1c7>
c001bc6c:	52                   	push   edx
c001bc6d:	68 35 b9 02 c0       	push   0xc002b935
c001bc72:	50                   	push   eax
c001bc73:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001bc77:	56                   	push   esi
c001bc78:	e8 01 6e ff ff       	call   c0012a7e <Fs::standardiseFiles(char*, char const*, char const*)>
c001bc7d:	89 34 24             	mov    DWORD PTR [esp],esi
c001bc80:	e8 e7 4a fe ff       	call   c000076c <strlen>
c001bc85:	83 c4 10             	add    esp,0x10
c001bc88:	48                   	dec    eax
c001bc89:	74 1d                	je     c001bca8 <sysCallOpen(regs*)+0x61>
c001bc8b:	8a 14 04             	mov    dl,BYTE PTR [esp+eax*1]
c001bc8e:	eb 0f                	jmp    c001bc9f <sysCallOpen(regs*)+0x58>
c001bc90:	80 fa 3a             	cmp    dl,0x3a
c001bc93:	74 0f                	je     c001bca4 <sysCallOpen(regs*)+0x5d>
c001bc95:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c001bc99:	48                   	dec    eax
c001bc9a:	74 0c                	je     c001bca8 <sysCallOpen(regs*)+0x61>
c001bc9c:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c001bc9f:	80 fa 2e             	cmp    dl,0x2e
c001bca2:	75 ec                	jne    c001bc90 <sysCallOpen(regs*)+0x49>
c001bca4:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c001bca8:	83 ec 08             	sub    esp,0x8
c001bcab:	68 39 b9 02 c0       	push   0xc002b939
c001bcb0:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bcb3:	e8 47 ff ff ff       	call   c001bbff <string_ends_with(char const*, char const*)>
c001bcb8:	83 c4 10             	add    esp,0x10
c001bcbb:	85 c0                	test   eax,eax
c001bcbd:	74 1d                	je     c001bcdc <sysCallOpen(regs*)+0x95>
c001bcbf:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001bcc2:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c001bcc8:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001bccf:	81 c4 04 01 00 00    	add    esp,0x104
c001bcd5:	31 c0                	xor    eax,eax
c001bcd7:	31 d2                	xor    edx,edx
c001bcd9:	5b                   	pop    ebx
c001bcda:	5e                   	pop    esi
c001bcdb:	c3                   	ret    
c001bcdc:	83 ec 08             	sub    esp,0x8
c001bcdf:	68 3e b9 02 c0       	push   0xc002b93e
c001bce4:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bce7:	e8 13 ff ff ff       	call   c001bbff <string_ends_with(char const*, char const*)>
c001bcec:	83 c4 10             	add    esp,0x10
c001bcef:	85 c0                	test   eax,eax
c001bcf1:	75 cc                	jne    c001bcbf <sysCallOpen(regs*)+0x78>
c001bcf3:	83 ec 08             	sub    esp,0x8
c001bcf6:	68 3a b9 02 c0       	push   0xc002b93a
c001bcfb:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bcfe:	e8 95 4b fe ff       	call   c0000898 <strcmp>
c001bd03:	83 c4 10             	add    esp,0x10
c001bd06:	85 c0                	test   eax,eax
c001bd08:	74 b5                	je     c001bcbf <sysCallOpen(regs*)+0x78>
c001bd0a:	83 ec 08             	sub    esp,0x8
c001bd0d:	68 39 b9 02 c0       	push   0xc002b939
c001bd12:	56                   	push   esi
c001bd13:	e8 e7 fe ff ff       	call   c001bbff <string_ends_with(char const*, char const*)>
c001bd18:	83 c4 10             	add    esp,0x10
c001bd1b:	85 c0                	test   eax,eax
c001bd1d:	75 a0                	jne    c001bcbf <sysCallOpen(regs*)+0x78>
c001bd1f:	83 ec 08             	sub    esp,0x8
c001bd22:	68 43 b9 02 c0       	push   0xc002b943
c001bd27:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bd2a:	e8 d0 fe ff ff       	call   c001bbff <string_ends_with(char const*, char const*)>
c001bd2f:	83 c4 10             	add    esp,0x10
c001bd32:	85 c0                	test   eax,eax
c001bd34:	0f 85 e7 00 00 00    	jne    c001be21 <sysCallOpen(regs*)+0x1da>
c001bd3a:	83 ec 08             	sub    esp,0x8
c001bd3d:	68 48 b9 02 c0       	push   0xc002b948
c001bd42:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bd45:	e8 b5 fe ff ff       	call   c001bbff <string_ends_with(char const*, char const*)>
c001bd4a:	83 c4 10             	add    esp,0x10
c001bd4d:	85 c0                	test   eax,eax
c001bd4f:	0f 85 cc 00 00 00    	jne    c001be21 <sysCallOpen(regs*)+0x1da>
c001bd55:	83 ec 08             	sub    esp,0x8
c001bd58:	68 44 b9 02 c0       	push   0xc002b944
c001bd5d:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bd60:	e8 33 4b fe ff       	call   c0000898 <strcmp>
c001bd65:	83 c4 10             	add    esp,0x10
c001bd68:	85 c0                	test   eax,eax
c001bd6a:	0f 84 b1 00 00 00    	je     c001be21 <sysCallOpen(regs*)+0x1da>
c001bd70:	83 ec 08             	sub    esp,0x8
c001bd73:	68 43 b9 02 c0       	push   0xc002b943
c001bd78:	56                   	push   esi
c001bd79:	e8 81 fe ff ff       	call   c001bbff <string_ends_with(char const*, char const*)>
c001bd7e:	83 c4 10             	add    esp,0x10
c001bd81:	85 c0                	test   eax,eax
c001bd83:	0f 85 98 00 00 00    	jne    c001be21 <sysCallOpen(regs*)+0x1da>
c001bd89:	83 ec 0c             	sub    esp,0xc
c001bd8c:	68 14 01 00 00       	push   0x114
c001bd91:	e8 03 38 ff ff       	call   c000f599 <malloc>
c001bd96:	83 c4 0c             	add    esp,0xc
c001bd99:	89 c6                	mov    esi,eax
c001bd9b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bda0:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bda3:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bda6:	56                   	push   esi
c001bda7:	e8 7c 6e ff ff       	call   c0012c28 <File::File(char const*, Process*)>
c001bdac:	83 c4 10             	add    esp,0x10
c001bdaf:	85 f6                	test   esi,esi
c001bdb1:	74 5b                	je     c001be0e <sysCallOpen(regs*)+0x1c7>
c001bdb3:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001bdb6:	0f b6 c2             	movzx  eax,dl
c001bdb9:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c001bdbc:	89 d0                	mov    eax,edx
c001bdbe:	83 e0 01             	and    eax,0x1
c001bdc1:	f6 c2 02             	test   dl,0x2
c001bdc4:	74 03                	je     c001bdc9 <sysCallOpen(regs*)+0x182>
c001bdc6:	83 c8 02             	or     eax,0x2
c001bdc9:	f6 c2 04             	test   dl,0x4
c001bdcc:	74 03                	je     c001bdd1 <sysCallOpen(regs*)+0x18a>
c001bdce:	83 c8 04             	or     eax,0x4
c001bdd1:	f6 c2 08             	test   dl,0x8
c001bdd4:	74 03                	je     c001bdd9 <sysCallOpen(regs*)+0x192>
c001bdd6:	83 c8 0a             	or     eax,0xa
c001bdd9:	83 e2 10             	and    edx,0x10
c001bddc:	74 03                	je     c001bde1 <sysCallOpen(regs*)+0x19a>
c001bdde:	83 c8 12             	or     eax,0x12
c001bde1:	83 ec 08             	sub    esp,0x8
c001bde4:	50                   	push   eax
c001bde5:	56                   	push   esi
c001bde6:	e8 a1 6e ff ff       	call   c0012c8c <File::open(FileOpenMode)>
c001bdeb:	83 c4 10             	add    esp,0x10
c001bdee:	85 c0                	test   eax,eax
c001bdf0:	75 1c                	jne    c001be0e <sysCallOpen(regs*)+0x1c7>
c001bdf2:	83 ec 0c             	sub    esp,0xc
c001bdf5:	56                   	push   esi
c001bdf6:	e8 d7 4f ff ff       	call   c0010dd2 <UnixFile::getFileDescriptor()>
c001bdfb:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001bdfe:	83 c4 10             	add    esp,0x10
c001be01:	89 02                	mov    DWORD PTR [edx],eax
c001be03:	c1 f8 1f             	sar    eax,0x1f
c001be06:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001be09:	e9 c1 fe ff ff       	jmp    c001bccf <sysCallOpen(regs*)+0x88>
c001be0e:	81 c4 04 01 00 00    	add    esp,0x104
c001be14:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001be19:	ba ff ff ff ff       	mov    edx,0xffffffff
c001be1e:	5b                   	pop    ebx
c001be1f:	5e                   	pop    esi
c001be20:	c3                   	ret    
c001be21:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001be24:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c001be2a:	e9 99 fe ff ff       	jmp    c001bcc8 <sysCallOpen(regs*)+0x81>

c001be2f <Sys::loadSyscalls()>:
c001be2f:	c7 05 00 05 03 c0 9c b0 01 c0 	mov    DWORD PTR ds:0xc0030500,0xc001b09c
c001be39:	c7 05 04 05 03 c0 94 ac 01 c0 	mov    DWORD PTR ds:0xc0030504,0xc001ac94
c001be43:	c7 05 08 05 03 c0 82 ae 01 c0 	mov    DWORD PTR ds:0xc0030508,0xc001ae82
c001be4d:	c7 05 0c 05 03 c0 d2 af 01 c0 	mov    DWORD PTR ds:0xc003050c,0xc001afd2
c001be57:	c7 05 10 05 03 c0 1a ae 01 c0 	mov    DWORD PTR ds:0xc0030510,0xc001ae1a
c001be61:	c7 05 14 05 03 c0 cb ac 01 c0 	mov    DWORD PTR ds:0xc0030514,0xc001accb
c001be6b:	c7 05 18 05 03 c0 ac ac 01 c0 	mov    DWORD PTR ds:0xc0030518,0xc001acac
c001be75:	c7 05 1c 05 03 c0 d7 ae 01 c0 	mov    DWORD PTR ds:0xc003051c,0xc001aed7
c001be7f:	c7 05 24 05 03 c0 65 b5 01 c0 	mov    DWORD PTR ds:0xc0030524,0xc001b565
c001be89:	c7 05 20 05 03 c0 47 bc 01 c0 	mov    DWORD PTR ds:0xc0030520,0xc001bc47
c001be93:	c7 05 28 05 03 c0 c5 b5 01 c0 	mov    DWORD PTR ds:0xc0030528,0xc001b5c5
c001be9d:	c7 05 2c 05 03 c0 a8 b2 01 c0 	mov    DWORD PTR ds:0xc003052c,0xc001b2a8
c001bea7:	c7 05 30 05 03 c0 e2 b0 01 c0 	mov    DWORD PTR ds:0xc0030530,0xc001b0e2
c001beb1:	c7 05 34 05 03 c0 e7 b0 01 c0 	mov    DWORD PTR ds:0xc0030534,0xc001b0e7
c001bebb:	c7 05 38 05 03 c0 8e b6 01 c0 	mov    DWORD PTR ds:0xc0030538,0xc001b68e
c001bec5:	c7 05 3c 05 03 c0 3a b6 01 c0 	mov    DWORD PTR ds:0xc003053c,0xc001b63a
c001becf:	c7 05 40 05 03 c0 81 b3 01 c0 	mov    DWORD PTR ds:0xc0030540,0xc001b381
c001bed9:	c7 05 44 05 03 c0 d8 b3 01 c0 	mov    DWORD PTR ds:0xc0030544,0xc001b3d8
c001bee3:	c7 05 48 05 03 c0 44 b4 01 c0 	mov    DWORD PTR ds:0xc0030548,0xc001b444
c001beed:	c7 05 4c 05 03 c0 ec b0 01 c0 	mov    DWORD PTR ds:0xc003054c,0xc001b0ec
c001bef7:	c7 05 50 05 03 c0 fe b6 01 c0 	mov    DWORD PTR ds:0xc0030550,0xc001b6fe
c001bf01:	c7 05 54 05 03 c0 18 b7 01 c0 	mov    DWORD PTR ds:0xc0030554,0xc001b718
c001bf0b:	c7 05 58 05 03 c0 18 b7 01 c0 	mov    DWORD PTR ds:0xc0030558,0xc001b718
c001bf15:	c7 05 5c 05 03 c0 4d b7 01 c0 	mov    DWORD PTR ds:0xc003055c,0xc001b74d
c001bf1f:	c7 05 60 05 03 c0 b1 b7 01 c0 	mov    DWORD PTR ds:0xc0030560,0xc001b7b1
c001bf29:	c7 05 64 05 03 c0 f6 b0 01 c0 	mov    DWORD PTR ds:0xc0030564,0xc001b0f6
c001bf33:	c7 05 68 05 03 c0 15 b8 01 c0 	mov    DWORD PTR ds:0xc0030568,0xc001b815
c001bf3d:	c7 05 6c 05 03 c0 65 b2 01 c0 	mov    DWORD PTR ds:0xc003056c,0xc001b265
c001bf47:	c7 05 70 05 03 c0 61 b8 01 c0 	mov    DWORD PTR ds:0xc0030570,0xc001b861
c001bf51:	c7 05 74 05 03 c0 27 b3 01 c0 	mov    DWORD PTR ds:0xc0030574,0xc001b327
c001bf5b:	c7 05 78 05 03 c0 e4 b8 01 c0 	mov    DWORD PTR ds:0xc0030578,0xc001b8e4
c001bf65:	c7 05 7c 05 03 c0 b6 b4 01 c0 	mov    DWORD PTR ds:0xc003057c,0xc001b4b6
c001bf6f:	c7 05 80 05 03 c0 0b b9 01 c0 	mov    DWORD PTR ds:0xc0030580,0xc001b90b
c001bf79:	c7 05 84 05 03 c0 73 b9 01 c0 	mov    DWORD PTR ds:0xc0030584,0xc001b973
c001bf83:	c7 05 88 05 03 c0 20 ba 01 c0 	mov    DWORD PTR ds:0xc0030588,0xc001ba20
c001bf8d:	c7 05 8c 05 03 c0 06 b1 01 c0 	mov    DWORD PTR ds:0xc003058c,0xc001b106
c001bf97:	c7 05 90 05 03 c0 70 b1 01 c0 	mov    DWORD PTR ds:0xc0030590,0xc001b170
c001bfa1:	c7 05 94 05 03 c0 b6 b1 01 c0 	mov    DWORD PTR ds:0xc0030594,0xc001b1b6
c001bfab:	c7 05 98 05 03 c0 34 bb 01 c0 	mov    DWORD PTR ds:0xc0030598,0xc001bb34
c001bfb5:	c7 05 9c 05 03 c0 33 b7 01 c0 	mov    DWORD PTR ds:0xc003059c,0xc001b733
c001bfbf:	c7 05 a0 05 03 c0 07 b2 01 c0 	mov    DWORD PTR ds:0xc00305a0,0xc001b207
c001bfc9:	c7 05 a4 05 03 c0 a6 bb 01 c0 	mov    DWORD PTR ds:0xc00305a4,0xc001bba6
c001bfd3:	c7 05 a8 05 03 c0 eb bb 01 c0 	mov    DWORD PTR ds:0xc00305a8,0xc001bbeb
c001bfdd:	c7 05 ac 05 03 c0 72 ad 01 c0 	mov    DWORD PTR ds:0xc00305ac,0xc001ad72
c001bfe7:	c7 05 b0 05 03 c0 f3 ae 01 c0 	mov    DWORD PTR ds:0xc00305b0,0xc001aef3
c001bff1:	c7 05 b4 05 03 c0 88 af 01 c0 	mov    DWORD PTR ds:0xc00305b4,0xc001af88
c001bffb:	c7 05 b8 05 03 c0 5e ac 01 c0 	mov    DWORD PTR ds:0xc00305b8,0xc001ac5e
c001c005:	c7 05 bc 05 03 c0 3a b0 01 c0 	mov    DWORD PTR ds:0xc00305bc,0xc001b03a
c001c00f:	c7 05 c0 05 03 c0 d7 ac 01 c0 	mov    DWORD PTR ds:0xc00305c0,0xc001acd7
c001c019:	c7 05 c4 05 03 c0 ee ac 01 c0 	mov    DWORD PTR ds:0xc00305c4,0xc001acee
c001c023:	c3                   	ret    

c001c024 <Sys::systemCall(regs*, void*)>:
c001c024:	53                   	push   ebx
c001c025:	83 ec 08             	sub    esp,0x8
c001c028:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c02c:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001c02f:	83 f8 7f             	cmp    eax,0x7f
c001c032:	77 16                	ja     c001c04a <Sys::systemCall(regs*, void*)+0x26>
c001c034:	8b 14 85 00 05 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcfb00]
c001c03b:	85 d2                	test   edx,edx
c001c03d:	74 0b                	je     c001c04a <Sys::systemCall(regs*, void*)+0x26>
c001c03f:	83 ec 0c             	sub    esp,0xc
c001c042:	53                   	push   ebx
c001c043:	ff d2                	call   edx
c001c045:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001c048:	eb 0d                	jmp    c001c057 <Sys::systemCall(regs*, void*)+0x33>
c001c04a:	52                   	push   edx
c001c04b:	52                   	push   edx
c001c04c:	50                   	push   eax
c001c04d:	68 4d b9 02 c0       	push   0xc002b94d
c001c052:	e8 72 66 ff ff       	call   c00126c9 <Dbg::kprintf(char const*, ...)>
c001c057:	83 c4 10             	add    esp,0x10
c001c05a:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001c05f:	31 d2                	xor    edx,edx
c001c061:	83 c4 08             	add    esp,0x8
c001c064:	5b                   	pop    ebx
c001c065:	c3                   	ret    

c001c066 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c001c066:	55                   	push   ebp
c001c067:	57                   	push   edi
c001c068:	56                   	push   esi
c001c069:	53                   	push   ebx
c001c06a:	81 ec 2c 10 00 00    	sub    esp,0x102c
c001c070:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c001c077:	8b 9c 24 4c 10 00 00 	mov    ebx,DWORD PTR [esp+0x104c]
c001c07e:	85 c0                	test   eax,eax
c001c080:	0f 95 c1             	setne  cl
c001c083:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c001c08b:	0f 94 c2             	sete   dl
c001c08e:	84 d1                	test   cl,dl
c001c090:	74 23                	je     c001c0b5 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c001c092:	f7 c3 ff 0f 00 00    	test   ebx,0xfff
c001c098:	74 1b                	je     c001c0b5 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c001c09a:	81 c3 00 10 00 00    	add    ebx,0x1000
c001c0a0:	89 da                	mov    edx,ebx
c001c0a2:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c001c0a8:	81 ca 00 f0 ff ff    	or     edx,0xfffff000
c001c0ae:	89 94 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],edx
c001c0b5:	8b 94 24 48 10 00 00 	mov    edx,DWORD PTR [esp+0x1048]
c001c0bc:	05 ff 0f 00 00       	add    eax,0xfff
c001c0c1:	83 ec 0c             	sub    esp,0xc
c001c0c4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001c0c8:	8d ba ff 0f 00 00    	lea    edi,[edx+0xfff]
c001c0ce:	c1 e8 0c             	shr    eax,0xc
c001c0d1:	89 fe                	mov    esi,edi
c001c0d3:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c0d7:	c1 ee 0c             	shr    esi,0xc
c001c0da:	6a 01                	push   0x1
c001c0dc:	e8 3c 51 ff ff       	call   c001121d <Virt::allocateKernelVirtualPages(int)>
c001c0e1:	89 c5                	mov    ebp,eax
c001c0e3:	58                   	pop    eax
c001c0e4:	5a                   	pop    edx
c001c0e5:	56                   	push   esi
c001c0e6:	68 61 b9 02 c0       	push   0xc002b961
c001c0eb:	e8 d9 65 ff ff       	call   c00126c9 <Dbg::kprintf(char const*, ...)>
c001c0f0:	59                   	pop    ecx
c001c0f1:	58                   	pop    eax
c001c0f2:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001c0f6:	68 73 b9 02 c0       	push   0xc002b973
c001c0fb:	e8 c9 65 ff ff       	call   c00126c9 <Dbg::kprintf(char const*, ...)>
c001c100:	83 c4 10             	add    esp,0x10
c001c103:	81 ff ff 0f 00 00    	cmp    edi,0xfff
c001c109:	0f 86 31 01 00 00    	jbe    c001c240 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1da>
c001c10f:	c1 e6 0c             	shl    esi,0xc
c001c112:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c115:	8d 04 1e             	lea    eax,[esi+ebx*1]
c001c118:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c11c:	8b bc 24 48 10 00 00 	mov    edi,DWORD PTR [esp+0x1048]
c001c123:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001c126:	01 df                	add    edi,ebx
c001c128:	2b 3c 24             	sub    edi,DWORD PTR [esp]
c001c12b:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c001c12f:	0f 84 08 01 00 00    	je     c001c23d <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1d7>
c001c135:	81 ff 00 10 00 00    	cmp    edi,0x1000
c001c13b:	76 05                	jbe    c001c142 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xdc>
c001c13d:	bf 00 10 00 00       	mov    edi,0x1000
c001c142:	83 ec 0c             	sub    esp,0xc
c001c145:	31 d2                	xor    edx,edx
c001c147:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c001c14e:	8b 08                	mov    ecx,DWORD PTR [eax]
c001c150:	8d 44 24 28          	lea    eax,[esp+0x28]
c001c154:	50                   	push   eax
c001c155:	8d 74 24 30          	lea    esi,[esp+0x30]
c001c159:	56                   	push   esi
c001c15a:	52                   	push   edx
c001c15b:	57                   	push   edi
c001c15c:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c001c163:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c166:	83 c4 20             	add    esp,0x20
c001c169:	85 c0                	test   eax,eax
c001c16b:	74 0a                	je     c001c177 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x111>
c001c16d:	53                   	push   ebx
c001c16e:	53                   	push   ebx
c001c16f:	50                   	push   eax
c001c170:	68 85 b9 02 c0       	push   0xc002b985
c001c175:	eb 0f                	jmp    c001c186 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x120>
c001c177:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c001c17b:	74 20                	je     c001c19d <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x137>
c001c17d:	51                   	push   ecx
c001c17e:	51                   	push   ecx
c001c17f:	6a 00                	push   0x0
c001c181:	68 b0 b9 02 c0       	push   0xc002b9b0
c001c186:	e8 3e 65 ff ff       	call   c00126c9 <Dbg::kprintf(char const*, ...)>
c001c18b:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001c18e:	e8 d0 54 ff ff       	call   c0011663 <Virt::freeKernelVirtualPages(unsigned long)>
c001c193:	83 c4 10             	add    esp,0x10
c001c196:	31 c0                	xor    eax,eax
c001c198:	e9 68 01 00 00       	jmp    c001c305 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x29f>
c001c19d:	fa                   	cli    
c001c19e:	ff 05 c8 0e 03 c0    	inc    DWORD PTR ds:0xc0030ec8
c001c1a4:	e8 ec 37 ff ff       	call   c000f995 <Phys::allocatePage()>
c001c1a9:	6a 07                	push   0x7
c001c1ab:	89 c7                	mov    edi,eax
c001c1ad:	55                   	push   ebp
c001c1ae:	50                   	push   eax
c001c1af:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c1b4:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c1b7:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c1bd:	e8 18 58 ff ff       	call   c00119da <VAS::mapPage(unsigned long, unsigned long, int)>
c001c1c2:	83 c4 0c             	add    esp,0xc
c001c1c5:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c001c1cc:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c1d2:	6a 00                	push   0x0
c001c1d4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c1d9:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c1dc:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c1e2:	e8 4d 56 ff ff       	call   c0011834 <VAS::mapOtherVASIn(bool, VAS*)>
c001c1e7:	58                   	pop    eax
c001c1e8:	5a                   	pop    edx
c001c1e9:	68 07 0c 00 00       	push   0xc07
c001c1ee:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001c1f2:	57                   	push   edi
c001c1f3:	89 ef                	mov    edi,ebp
c001c1f5:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c001c1fc:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c202:	6a 00                	push   0x0
c001c204:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c209:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c20c:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c212:	e8 7f 5b ff ff       	call   c0011d96 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001c217:	b9 00 10 00 00       	mov    ecx,0x1000
c001c21c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001c21e:	a1 c8 0e 03 c0       	mov    eax,ds:0xc0030ec8
c001c223:	83 c4 20             	add    esp,0x20
c001c226:	48                   	dec    eax
c001c227:	a3 c8 0e 03 c0       	mov    ds:0xc0030ec8,eax
c001c22c:	85 c0                	test   eax,eax
c001c22e:	75 01                	jne    c001c231 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1cb>
c001c230:	fb                   	sti    
c001c231:	81 04 24 00 10 00 00 	add    DWORD PTR [esp],0x1000
c001c238:	e9 df fe ff ff       	jmp    c001c11c <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xb6>
c001c23d:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c001c240:	81 7c 24 04 ff 0f 00 00 	cmp    DWORD PTR [esp+0x4],0xfff
c001c248:	0f 86 a9 00 00 00    	jbe    c001c2f7 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x291>
c001c24e:	fa                   	cli    
c001c24f:	ff 05 c8 0e 03 c0    	inc    DWORD PTR ds:0xc0030ec8
c001c255:	51                   	push   ecx
c001c256:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c001c25d:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c263:	6a 00                	push   0x0
c001c265:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c26a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c26d:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c273:	e8 bc 55 ff ff       	call   c0011834 <VAS::mapOtherVASIn(bool, VAS*)>
c001c278:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001c27c:	c1 e6 0c             	shl    esi,0xc
c001c27f:	01 de                	add    esi,ebx
c001c281:	83 c4 10             	add    esp,0x10
c001c284:	39 de                	cmp    esi,ebx
c001c286:	74 61                	je     c001c2e9 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x283>
c001c288:	e8 08 37 ff ff       	call   c000f995 <Phys::allocatePage()>
c001c28d:	6a 07                	push   0x7
c001c28f:	89 c7                	mov    edi,eax
c001c291:	55                   	push   ebp
c001c292:	50                   	push   eax
c001c293:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c298:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c29b:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c2a1:	e8 34 57 ff ff       	call   c00119da <VAS::mapPage(unsigned long, unsigned long, int)>
c001c2a6:	58                   	pop    eax
c001c2a7:	5a                   	pop    edx
c001c2a8:	68 07 0c 00 00       	push   0xc07
c001c2ad:	53                   	push   ebx
c001c2ae:	81 c3 00 10 00 00    	add    ebx,0x1000
c001c2b4:	57                   	push   edi
c001c2b5:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c001c2bc:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c2c2:	6a 00                	push   0x0
c001c2c4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c2c9:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c2cc:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c2d2:	e8 bf 5a ff ff       	call   c0011d96 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001c2d7:	83 c4 1c             	add    esp,0x1c
c001c2da:	68 00 10 00 00       	push   0x1000
c001c2df:	6a 00                	push   0x0
c001c2e1:	55                   	push   ebp
c001c2e2:	e8 69 44 fe ff       	call   c0000750 <memset>
c001c2e7:	eb 98                	jmp    c001c281 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x21b>
c001c2e9:	a1 c8 0e 03 c0       	mov    eax,ds:0xc0030ec8
c001c2ee:	48                   	dec    eax
c001c2ef:	a3 c8 0e 03 c0       	mov    ds:0xc0030ec8,eax
c001c2f4:	75 01                	jne    c001c2f7 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x291>
c001c2f6:	fb                   	sti    
c001c2f7:	83 ec 0c             	sub    esp,0xc
c001c2fa:	55                   	push   ebp
c001c2fb:	e8 63 53 ff ff       	call   c0011663 <Virt::freeKernelVirtualPages(unsigned long)>
c001c300:	83 c4 10             	add    esp,0x10
c001c303:	b0 01                	mov    al,0x1
c001c305:	81 c4 2c 10 00 00    	add    esp,0x102c
c001c30b:	5b                   	pop    ebx
c001c30c:	5e                   	pop    esi
c001c30d:	5f                   	pop    edi
c001c30e:	5d                   	pop    ebp
c001c30f:	c3                   	ret    

c001c310 <Thr::loadProgramIntoMemory(Process*, char const*)>:
c001c310:	55                   	push   ebp
c001c311:	57                   	push   edi
c001c312:	56                   	push   esi
c001c313:	53                   	push   ebx
c001c314:	83 ec 48             	sub    esp,0x48
c001c317:	68 14 01 00 00       	push   0x114
c001c31c:	e8 78 32 ff ff       	call   c000f599 <malloc>
c001c321:	83 c4 0c             	add    esp,0xc
c001c324:	89 c6                	mov    esi,eax
c001c326:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001c32a:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001c32e:	50                   	push   eax
c001c32f:	e8 f4 68 ff ff       	call   c0012c28 <File::File(char const*, Process*)>
c001c334:	58                   	pop    eax
c001c335:	5a                   	pop    edx
c001c336:	6a 01                	push   0x1
c001c338:	56                   	push   esi
c001c339:	e8 4e 69 ff ff       	call   c0012c8c <File::open(FileOpenMode)>
c001c33e:	83 c4 10             	add    esp,0x10
c001c341:	85 c0                	test   eax,eax
c001c343:	0f 85 47 01 00 00    	jne    c001c490 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c349:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001c351:	83 ec 0c             	sub    esp,0xc
c001c354:	6a 34                	push   0x34
c001c356:	e8 3e 32 ff ff       	call   c000f599 <malloc>
c001c35b:	89 c3                	mov    ebx,eax
c001c35d:	58                   	pop    eax
c001c35e:	8b 06                	mov    eax,DWORD PTR [esi]
c001c360:	8d 7c 24 38          	lea    edi,[esp+0x38]
c001c364:	57                   	push   edi
c001c365:	53                   	push   ebx
c001c366:	6a 00                	push   0x0
c001c368:	6a 34                	push   0x34
c001c36a:	56                   	push   esi
c001c36b:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001c36e:	83 c4 20             	add    esp,0x20
c001c371:	85 c0                	test   eax,eax
c001c373:	0f 85 17 01 00 00    	jne    c001c490 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c379:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c001c37f:	0f 85 0b 01 00 00    	jne    c001c490 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c385:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c388:	85 c0                	test   eax,eax
c001c38a:	0f 84 00 01 00 00    	je     c001c490 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c390:	31 d2                	xor    edx,edx
c001c392:	55                   	push   ebp
c001c393:	52                   	push   edx
c001c394:	50                   	push   eax
c001c395:	56                   	push   esi
c001c396:	e8 af 69 ff ff       	call   c0012d4a <File::seek(unsigned long long)>
c001c39b:	83 c4 10             	add    esp,0x10
c001c39e:	85 c0                	test   eax,eax
c001c3a0:	0f 85 ea 00 00 00    	jne    c001c490 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c3a6:	83 ec 0c             	sub    esp,0xc
c001c3a9:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001c3ac:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001c3b0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001c3b4:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001c3b8:	0f af c2             	imul   eax,edx
c001c3bb:	50                   	push   eax
c001c3bc:	e8 d8 31 ff ff       	call   c000f599 <malloc>
c001c3c1:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001c3c3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001c3c7:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c3ca:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001c3ce:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001c3d2:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001c3d6:	0f af c2             	imul   eax,edx
c001c3d9:	99                   	cdq    
c001c3da:	52                   	push   edx
c001c3db:	50                   	push   eax
c001c3dc:	56                   	push   esi
c001c3dd:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c3e0:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c001c3e3:	83 c4 20             	add    esp,0x20
c001c3e6:	85 c0                	test   eax,eax
c001c3e8:	0f 84 a2 00 00 00    	je     c001c490 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c3ee:	31 d2                	xor    edx,edx
c001c3f0:	51                   	push   ecx
c001c3f1:	52                   	push   edx
c001c3f2:	50                   	push   eax
c001c3f3:	56                   	push   esi
c001c3f4:	e8 51 69 ff ff       	call   c0012d4a <File::seek(unsigned long long)>
c001c3f9:	83 c4 10             	add    esp,0x10
c001c3fc:	85 c0                	test   eax,eax
c001c3fe:	0f 85 8c 00 00 00    	jne    c001c490 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c404:	83 ec 0c             	sub    esp,0xc
c001c407:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001c40b:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001c40f:	31 ed                	xor    ebp,ebp
c001c411:	0f af c2             	imul   eax,edx
c001c414:	50                   	push   eax
c001c415:	e8 7f 31 ff ff       	call   c000f599 <malloc>
c001c41a:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001c41c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001c420:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c423:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c427:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001c42b:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001c42f:	0f af c2             	imul   eax,edx
c001c432:	99                   	cdq    
c001c433:	52                   	push   edx
c001c434:	50                   	push   eax
c001c435:	56                   	push   esi
c001c436:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c439:	83 c4 20             	add    esp,0x20
c001c43c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001c444:	66 39 6b 2c          	cmp    WORD PTR [ebx+0x2c],bp
c001c448:	0f 86 80 00 00 00    	jbe    c001c4ce <Thr::loadProgramIntoMemory(Process*, char const*)+0x1be>
c001c44e:	0f b7 fd             	movzx  edi,bp
c001c451:	c1 e7 05             	shl    edi,0x5
c001c454:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c001c458:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c001c45b:	75 6b                	jne    c001c4c8 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001c45d:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c001c460:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c464:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001c467:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c46b:	52                   	push   edx
c001c46c:	31 d2                	xor    edx,edx
c001c46e:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c001c471:	52                   	push   edx
c001c472:	50                   	push   eax
c001c473:	56                   	push   esi
c001c474:	e8 d1 68 ff ff       	call   c0012d4a <File::seek(unsigned long long)>
c001c479:	83 c4 10             	add    esp,0x10
c001c47c:	85 c0                	test   eax,eax
c001c47e:	74 17                	je     c001c497 <Thr::loadProgramIntoMemory(Process*, char const*)+0x187>
c001c480:	83 ec 0c             	sub    esp,0xc
c001c483:	68 dc b9 02 c0       	push   0xc002b9dc
c001c488:	e8 3c 62 ff ff       	call   c00126c9 <Dbg::kprintf(char const*, ...)>
c001c48d:	83 c4 10             	add    esp,0x10
c001c490:	31 c0                	xor    eax,eax
c001c492:	e9 87 00 00 00       	jmp    c001c51e <Thr::loadProgramIntoMemory(Process*, char const*)+0x20e>
c001c497:	83 ec 0c             	sub    esp,0xc
c001c49a:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001c49d:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c001c4a0:	50                   	push   eax
c001c4a1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001c4a5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001c4a9:	56                   	push   esi
c001c4aa:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c001c4ae:	e8 b3 fb ff ff       	call   c001c066 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c001c4b3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001c4b7:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c001c4bb:	83 c4 20             	add    esp,0x20
c001c4be:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c001c4c2:	73 04                	jae    c001c4c8 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001c4c4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c4c8:	45                   	inc    ebp
c001c4c9:	e9 76 ff ff ff       	jmp    c001c444 <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c001c4ce:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c001c4d2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001c4d6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c4da:	89 91 2e 05 00 00    	mov    DWORD PTR [ecx+0x52e],edx
c001c4e0:	83 ec 0c             	sub    esp,0xc
c001c4e3:	8b 91 32 05 00 00    	mov    edx,DWORD PTR [ecx+0x532]
c001c4e9:	25 00 f0 ff ff       	and    eax,0xfffff000
c001c4ee:	05 00 10 00 00       	add    eax,0x1000
c001c4f3:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001c4f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c4fa:	e8 aa 30 ff ff       	call   c000f5a9 <free>
c001c4ff:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c502:	e8 a2 30 ff ff       	call   c000f5a9 <free>
c001c507:	58                   	pop    eax
c001c508:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001c50c:	e8 98 30 ff ff       	call   c000f5a9 <free>
c001c511:	89 34 24             	mov    DWORD PTR [esp],esi
c001c514:	e8 d1 67 ff ff       	call   c0012cea <File::close()>
c001c519:	83 c4 10             	add    esp,0x10
c001c51c:	b0 01                	mov    al,0x1
c001c51e:	83 c4 3c             	add    esp,0x3c
c001c521:	5b                   	pop    ebx
c001c522:	5e                   	pop    esi
c001c523:	5f                   	pop    edi
c001c524:	5d                   	pop    ebp
c001c525:	c3                   	ret    

c001c526 <Thr::runtimeReferenceHelper()>:
c001c526:	83 ec 18             	sub    esp,0x18
c001c529:	68 e4 b9 02 c0       	push   0xc002b9e4
c001c52e:	e8 96 61 ff ff       	call   c00126c9 <Dbg::kprintf(char const*, ...)>
c001c533:	fa                   	cli    
c001c534:	83 c4 10             	add    esp,0x10
c001c537:	eb fe                	jmp    c001c537 <Thr::runtimeReferenceHelper()+0x11>

c001c539 <Thr::getAddressOfKernelSymbol(char const*)>:
c001c539:	57                   	push   edi
c001c53a:	56                   	push   esi
c001c53b:	53                   	push   ebx
c001c53c:	31 db                	xor    ebx,ebx
c001c53e:	39 1d a0 0e 03 c0    	cmp    DWORD PTR ds:0xc0030ea0,ebx
c001c544:	7e 3c                	jle    c001c582 <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c001c546:	8b 34 9d 20 0e 03 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffcf1e0]
c001c54d:	31 ff                	xor    edi,edi
c001c54f:	39 3c 9d 20 0d 03 c0 	cmp    DWORD PTR [ebx*4-0x3ffcf2e0],edi
c001c556:	7e 27                	jle    c001c57f <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c001c558:	50                   	push   eax
c001c559:	50                   	push   eax
c001c55a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001c55e:	8b 06                	mov    eax,DWORD PTR [esi]
c001c560:	03 04 9d a0 0d 03 c0 	add    eax,DWORD PTR [ebx*4-0x3ffcf260]
c001c567:	50                   	push   eax
c001c568:	e8 2b 43 fe ff       	call   c0000898 <strcmp>
c001c56d:	83 c4 10             	add    esp,0x10
c001c570:	85 c0                	test   eax,eax
c001c572:	75 05                	jne    c001c579 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c001c574:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001c577:	eb 0b                	jmp    c001c584 <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c001c579:	83 c6 10             	add    esi,0x10
c001c57c:	47                   	inc    edi
c001c57d:	eb d0                	jmp    c001c54f <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c001c57f:	43                   	inc    ebx
c001c580:	eb bc                	jmp    c001c53e <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c001c582:	31 c0                	xor    eax,eax
c001c584:	5b                   	pop    ebx
c001c585:	5e                   	pop    esi
c001c586:	5f                   	pop    edi
c001c587:	c3                   	ret    

c001c588 <Thr::loadKernelSymbolTable(char const*)>:
c001c588:	55                   	push   ebp
c001c589:	57                   	push   edi
c001c58a:	56                   	push   esi
c001c58b:	53                   	push   ebx
c001c58c:	83 ec 68             	sub    esp,0x68
c001c58f:	8b 35 f0 0e 03 c0    	mov    esi,DWORD PTR ds:0xc0030ef0
c001c595:	68 14 01 00 00       	push   0x114
c001c59a:	e8 fa 2f ff ff       	call   c000f599 <malloc>
c001c59f:	83 c4 0c             	add    esp,0xc
c001c5a2:	89 c3                	mov    ebx,eax
c001c5a4:	56                   	push   esi
c001c5a5:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c001c5a9:	50                   	push   eax
c001c5aa:	e8 79 66 ff ff       	call   c0012c28 <File::File(char const*, Process*)>
c001c5af:	5e                   	pop    esi
c001c5b0:	5f                   	pop    edi
c001c5b1:	6a 01                	push   0x1
c001c5b3:	53                   	push   ebx
c001c5b4:	e8 d3 66 ff ff       	call   c0012c8c <File::open(FileOpenMode)>
c001c5b9:	83 c4 10             	add    esp,0x10
c001c5bc:	85 c0                	test   eax,eax
c001c5be:	74 0a                	je     c001c5ca <Thr::loadKernelSymbolTable(char const*)+0x42>
c001c5c0:	83 ec 0c             	sub    esp,0xc
c001c5c3:	68 06 ba 02 c0       	push   0xc002ba06
c001c5c8:	eb 34                	jmp    c001c5fe <Thr::loadKernelSymbolTable(char const*)+0x76>
c001c5ca:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c001c5d2:	83 ec 0c             	sub    esp,0xc
c001c5d5:	6a 34                	push   0x34
c001c5d7:	e8 bd 2f ff ff       	call   c000f599 <malloc>
c001c5dc:	59                   	pop    ecx
c001c5dd:	89 c7                	mov    edi,eax
c001c5df:	8d 74 24 34          	lea    esi,[esp+0x34]
c001c5e3:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c5e5:	56                   	push   esi
c001c5e6:	57                   	push   edi
c001c5e7:	6a 00                	push   0x0
c001c5e9:	6a 34                	push   0x34
c001c5eb:	53                   	push   ebx
c001c5ec:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001c5ef:	83 c4 20             	add    esp,0x20
c001c5f2:	85 c0                	test   eax,eax
c001c5f4:	74 17                	je     c001c60d <Thr::loadKernelSymbolTable(char const*)+0x85>
c001c5f6:	83 ec 0c             	sub    esp,0xc
c001c5f9:	68 1d ba 02 c0       	push   0xc002ba1d
c001c5fe:	e8 32 d8 ff ff       	call   c0019e35 <Krnl::panic(char const*)>
c001c603:	83 c4 10             	add    esp,0x10
c001c606:	31 c0                	xor    eax,eax
c001c608:	e9 31 02 00 00       	jmp    c001c83e <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c001c60d:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001c613:	75 e1                	jne    c001c5f6 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001c615:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001c618:	85 c0                	test   eax,eax
c001c61a:	74 da                	je     c001c5f6 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001c61c:	52                   	push   edx
c001c61d:	31 d2                	xor    edx,edx
c001c61f:	52                   	push   edx
c001c620:	50                   	push   eax
c001c621:	53                   	push   ebx
c001c622:	e8 23 67 ff ff       	call   c0012d4a <File::seek(unsigned long long)>
c001c627:	83 c4 10             	add    esp,0x10
c001c62a:	85 c0                	test   eax,eax
c001c62c:	75 c8                	jne    c001c5f6 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001c62e:	83 ec 0c             	sub    esp,0xc
c001c631:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001c635:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001c639:	31 ed                	xor    ebp,ebp
c001c63b:	0f af c2             	imul   eax,edx
c001c63e:	50                   	push   eax
c001c63f:	e8 55 2f ff ff       	call   c000f599 <malloc>
c001c644:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001c646:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c64a:	89 34 24             	mov    DWORD PTR [esp],esi
c001c64d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001c651:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001c655:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001c659:	0f af c2             	imul   eax,edx
c001c65c:	99                   	cdq    
c001c65d:	52                   	push   edx
c001c65e:	50                   	push   eax
c001c65f:	53                   	push   ebx
c001c660:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c663:	83 c4 20             	add    esp,0x20
c001c666:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001c66e:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001c676:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001c67e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001c686:	66 39 6f 30          	cmp    WORD PTR [edi+0x30],bp
c001c68a:	0f 86 aa 00 00 00    	jbe    c001c73a <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c001c690:	0f b7 f5             	movzx  esi,bp
c001c693:	6b f6 28             	imul   esi,esi,0x28
c001c696:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001c69a:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001c69d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c6a1:	50                   	push   eax
c001c6a2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001c6a6:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c001c6aa:	8b 16                	mov    edx,DWORD PTR [esi]
c001c6ac:	6b c0 28             	imul   eax,eax,0x28
c001c6af:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c001c6b3:	89 d0                	mov    eax,edx
c001c6b5:	31 d2                	xor    edx,edx
c001c6b7:	52                   	push   edx
c001c6b8:	50                   	push   eax
c001c6b9:	53                   	push   ebx
c001c6ba:	e8 8b 66 ff ff       	call   c0012d4a <File::seek(unsigned long long)>
c001c6bf:	83 c4 0c             	add    esp,0xc
c001c6c2:	6a 20                	push   0x20
c001c6c4:	6a 00                	push   0x0
c001c6c6:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001c6ca:	52                   	push   edx
c001c6cb:	e8 80 40 fe ff       	call   c0000750 <memset>
c001c6d0:	58                   	pop    eax
c001c6d1:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c6d3:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c001c6d7:	51                   	push   ecx
c001c6d8:	8d 54 24 40          	lea    edx,[esp+0x40]
c001c6dc:	52                   	push   edx
c001c6dd:	6a 00                	push   0x0
c001c6df:	6a 1f                	push   0x1f
c001c6e1:	53                   	push   ebx
c001c6e2:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001c6e5:	83 c4 18             	add    esp,0x18
c001c6e8:	68 34 ba 02 c0       	push   0xc002ba34
c001c6ed:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001c6f1:	52                   	push   edx
c001c6f2:	e8 a1 41 fe ff       	call   c0000898 <strcmp>
c001c6f7:	83 c4 10             	add    esp,0x10
c001c6fa:	85 c0                	test   eax,eax
c001c6fc:	75 0f                	jne    c001c70d <Thr::loadKernelSymbolTable(char const*)+0x185>
c001c6fe:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001c701:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c705:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c709:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c70d:	50                   	push   eax
c001c70e:	50                   	push   eax
c001c70f:	68 3c ba 02 c0       	push   0xc002ba3c
c001c714:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001c718:	50                   	push   eax
c001c719:	e8 7a 41 fe ff       	call   c0000898 <strcmp>
c001c71e:	83 c4 10             	add    esp,0x10
c001c721:	85 c0                	test   eax,eax
c001c723:	75 0f                	jne    c001c734 <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c001c725:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001c728:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c72c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c730:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001c734:	45                   	inc    ebp
c001c735:	e9 4c ff ff ff       	jmp    c001c686 <Thr::loadKernelSymbolTable(char const*)+0xfe>
c001c73a:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001c73f:	75 10                	jne    c001c751 <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c001c741:	83 ec 0c             	sub    esp,0xc
c001c744:	68 44 ba 02 c0       	push   0xc002ba44
c001c749:	e8 e7 d6 ff ff       	call   c0019e35 <Krnl::panic(char const*)>
c001c74e:	83 c4 10             	add    esp,0x10
c001c751:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c001c756:	75 10                	jne    c001c768 <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c001c758:	83 ec 0c             	sub    esp,0xc
c001c75b:	68 44 ba 02 c0       	push   0xc002ba44
c001c760:	e8 d0 d6 ff ff       	call   c0019e35 <Krnl::panic(char const*)>
c001c765:	83 c4 10             	add    esp,0x10
c001c768:	31 d2                	xor    edx,edx
c001c76a:	50                   	push   eax
c001c76b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c76f:	52                   	push   edx
c001c770:	50                   	push   eax
c001c771:	53                   	push   ebx
c001c772:	e8 d3 65 ff ff       	call   c0012d4a <File::seek(unsigned long long)>
c001c777:	5a                   	pop    edx
c001c778:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001c77c:	e8 18 2e ff ff       	call   c000f599 <malloc>
c001c781:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c785:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001c789:	31 c9                	xor    ecx,ecx
c001c78b:	5e                   	pop    esi
c001c78c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c78e:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c001c792:	55                   	push   ebp
c001c793:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c797:	51                   	push   ecx
c001c798:	52                   	push   edx
c001c799:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001c79d:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c001c7a1:	53                   	push   ebx
c001c7a2:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001c7a5:	83 c4 14             	add    esp,0x14
c001c7a8:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001c7ac:	e8 e8 2d ff ff       	call   c000f599 <malloc>
c001c7b1:	89 c6                	mov    esi,eax
c001c7b3:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c7b5:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001c7b8:	56                   	push   esi
c001c7b9:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001c7bd:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001c7c1:	51                   	push   ecx
c001c7c2:	52                   	push   edx
c001c7c3:	53                   	push   ebx
c001c7c4:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001c7c7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001c7cb:	8b 15 a0 0e 03 c0    	mov    edx,DWORD PTR ds:0xc0030ea0
c001c7d1:	83 c4 1c             	add    esp,0x1c
c001c7d4:	c1 e8 04             	shr    eax,0x4
c001c7d7:	89 04 95 20 0d 03 c0 	mov    DWORD PTR [edx*4-0x3ffcf2e0],eax
c001c7de:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001c7e2:	31 d2                	xor    edx,edx
c001c7e4:	52                   	push   edx
c001c7e5:	50                   	push   eax
c001c7e6:	53                   	push   ebx
c001c7e7:	e8 5e 65 ff ff       	call   c0012d4a <File::seek(unsigned long long)>
c001c7ec:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001c7ee:	31 d2                	xor    edx,edx
c001c7f0:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001c7f3:	56                   	push   esi
c001c7f4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001c7f8:	52                   	push   edx
c001c7f9:	50                   	push   eax
c001c7fa:	53                   	push   ebx
c001c7fb:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c7fe:	83 c4 14             	add    esp,0x14
c001c801:	53                   	push   ebx
c001c802:	e8 e3 64 ff ff       	call   c0012cea <File::close()>
c001c807:	5d                   	pop    ebp
c001c808:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001c80c:	e8 98 2d ff ff       	call   c000f5a9 <free>
c001c811:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c814:	e8 90 2d ff ff       	call   c000f5a9 <free>
c001c819:	a1 a0 0e 03 c0       	mov    eax,ds:0xc0030ea0
c001c81e:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001c822:	8d 50 01             	lea    edx,[eax+0x1]
c001c825:	89 0c 85 20 0e 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf1e0],ecx
c001c82c:	89 34 85 a0 0d 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf260],esi
c001c833:	89 15 a0 0e 03 c0    	mov    DWORD PTR ds:0xc0030ea0,edx
c001c839:	83 c4 10             	add    esp,0x10
c001c83c:	b0 01                	mov    al,0x1
c001c83e:	83 c4 5c             	add    esp,0x5c
c001c841:	5b                   	pop    ebx
c001c842:	5e                   	pop    esi
c001c843:	5f                   	pop    edi
c001c844:	5d                   	pop    ebp
c001c845:	c3                   	ret    

c001c846 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c001c846:	55                   	push   ebp
c001c847:	57                   	push   edi
c001c848:	56                   	push   esi
c001c849:	53                   	push   ebx
c001c84a:	81 ec 68 03 00 00    	sub    esp,0x368
c001c850:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c001c857:	8b 1d f0 0e 03 c0    	mov    ebx,DWORD PTR ds:0xc0030ef0
c001c85d:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001c861:	68 14 01 00 00       	push   0x114
c001c866:	e8 2e 2d ff ff       	call   c000f599 <malloc>
c001c86b:	83 c4 0c             	add    esp,0xc
c001c86e:	89 c5                	mov    ebp,eax
c001c870:	53                   	push   ebx
c001c871:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c001c878:	50                   	push   eax
c001c879:	e8 aa 63 ff ff       	call   c0012c28 <File::File(char const*, Process*)>
c001c87e:	5e                   	pop    esi
c001c87f:	5f                   	pop    edi
c001c880:	6a 01                	push   0x1
c001c882:	55                   	push   ebp
c001c883:	e8 04 64 ff ff       	call   c0012c8c <File::open(FileOpenMode)>
c001c888:	83 c4 10             	add    esp,0x10
c001c88b:	85 c0                	test   eax,eax
c001c88d:	0f 85 a7 06 00 00    	jne    c001cf3a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001c893:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001c89b:	83 ec 0c             	sub    esp,0xc
c001c89e:	6a 34                	push   0x34
c001c8a0:	e8 f4 2c ff ff       	call   c000f599 <malloc>
c001c8a5:	5b                   	pop    ebx
c001c8a6:	89 c7                	mov    edi,eax
c001c8a8:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001c8ac:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001c8af:	53                   	push   ebx
c001c8b0:	57                   	push   edi
c001c8b1:	6a 00                	push   0x0
c001c8b3:	6a 34                	push   0x34
c001c8b5:	55                   	push   ebp
c001c8b6:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001c8b9:	83 c4 20             	add    esp,0x20
c001c8bc:	85 c0                	test   eax,eax
c001c8be:	0f 85 76 06 00 00    	jne    c001cf3a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001c8c4:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001c8ca:	0f 85 6a 06 00 00    	jne    c001cf3a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001c8d0:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001c8d3:	85 c0                	test   eax,eax
c001c8d5:	0f 84 5f 06 00 00    	je     c001cf3a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001c8db:	31 d2                	xor    edx,edx
c001c8dd:	51                   	push   ecx
c001c8de:	52                   	push   edx
c001c8df:	50                   	push   eax
c001c8e0:	55                   	push   ebp
c001c8e1:	e8 64 64 ff ff       	call   c0012d4a <File::seek(unsigned long long)>
c001c8e6:	83 c4 10             	add    esp,0x10
c001c8e9:	85 c0                	test   eax,eax
c001c8eb:	0f 85 49 06 00 00    	jne    c001cf3a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001c8f1:	83 ec 0c             	sub    esp,0xc
c001c8f4:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c001c8f7:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001c8fb:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001c8ff:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001c903:	0f af c2             	imul   eax,edx
c001c906:	50                   	push   eax
c001c907:	e8 8d 2c ff ff       	call   c000f599 <malloc>
c001c90c:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001c90f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c913:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c916:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001c91a:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001c91e:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001c922:	0f af c2             	imul   eax,edx
c001c925:	99                   	cdq    
c001c926:	52                   	push   edx
c001c927:	50                   	push   eax
c001c928:	55                   	push   ebp
c001c929:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c92c:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c001c92f:	83 c4 20             	add    esp,0x20
c001c932:	85 c0                	test   eax,eax
c001c934:	0f 84 00 06 00 00    	je     c001cf3a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001c93a:	52                   	push   edx
c001c93b:	31 d2                	xor    edx,edx
c001c93d:	52                   	push   edx
c001c93e:	50                   	push   eax
c001c93f:	55                   	push   ebp
c001c940:	e8 05 64 ff ff       	call   c0012d4a <File::seek(unsigned long long)>
c001c945:	83 c4 10             	add    esp,0x10
c001c948:	85 c0                	test   eax,eax
c001c94a:	0f 85 ea 05 00 00    	jne    c001cf3a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001c950:	83 ec 0c             	sub    esp,0xc
c001c953:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001c957:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001c95b:	31 f6                	xor    esi,esi
c001c95d:	0f af c2             	imul   eax,edx
c001c960:	50                   	push   eax
c001c961:	e8 33 2c ff ff       	call   c000f599 <malloc>
c001c966:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001c969:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001c96d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c970:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001c974:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001c978:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001c97c:	0f af c2             	imul   eax,edx
c001c97f:	99                   	cdq    
c001c980:	52                   	push   edx
c001c981:	50                   	push   eax
c001c982:	55                   	push   ebp
c001c983:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c986:	83 c4 20             	add    esp,0x20
c001c989:	66 39 77 2c          	cmp    WORD PTR [edi+0x2c],si
c001c98d:	0f 86 8a 00 00 00    	jbe    c001ca1d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c001c993:	0f b7 de             	movzx  ebx,si
c001c996:	c1 e3 05             	shl    ebx,0x5
c001c999:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c001c99d:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c001c9a0:	75 75                	jne    c001ca17 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c001c9a2:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001c9a5:	31 d2                	xor    edx,edx
c001c9a7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c9ab:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001c9ae:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c9b2:	50                   	push   eax
c001c9b3:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c001c9b6:	52                   	push   edx
c001c9b7:	50                   	push   eax
c001c9b8:	55                   	push   ebp
c001c9b9:	e8 8c 63 ff ff       	call   c0012d4a <File::seek(unsigned long long)>
c001c9be:	83 c4 10             	add    esp,0x10
c001c9c1:	85 c0                	test   eax,eax
c001c9c3:	0f 85 71 05 00 00    	jne    c001cf3a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001c9c9:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c001c9d0:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001c9d3:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c001c9d7:	31 d2                	xor    edx,edx
c001c9d9:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001c9dd:	83 ec 0c             	sub    esp,0xc
c001c9e0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001c9e4:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001c9eb:	50                   	push   eax
c001c9ec:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001c9f0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c9f4:	52                   	push   edx
c001c9f5:	50                   	push   eax
c001c9f6:	55                   	push   ebp
c001c9f7:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c9fa:	83 c4 1c             	add    esp,0x1c
c001c9fd:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001ca00:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c001ca03:	50                   	push   eax
c001ca04:	6a 00                	push   0x0
c001ca06:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ca0a:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c001ca0e:	50                   	push   eax
c001ca0f:	e8 3c 3d fe ff       	call   c0000750 <memset>
c001ca14:	83 c4 10             	add    esp,0x10
c001ca17:	46                   	inc    esi
c001ca18:	e9 6c ff ff ff       	jmp    c001c989 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c001ca1d:	53                   	push   ebx
c001ca1e:	31 db                	xor    ebx,ebx
c001ca20:	68 00 01 00 00       	push   0x100
c001ca25:	6a 00                	push   0x0
c001ca27:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c001ca2b:	50                   	push   eax
c001ca2c:	e8 1f 3d fe ff       	call   c0000750 <memset>
c001ca31:	83 c4 0c             	add    esp,0xc
c001ca34:	68 00 01 00 00       	push   0x100
c001ca39:	6a 00                	push   0x0
c001ca3b:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c001ca42:	50                   	push   eax
c001ca43:	e8 08 3d fe ff       	call   c0000750 <memset>
c001ca48:	83 c4 10             	add    esp,0x10
c001ca4b:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001ca53:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001ca5b:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c001ca63:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001ca6b:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001ca73:	66 39 5f 30          	cmp    WORD PTR [edi+0x30],bx
c001ca77:	0f 86 30 01 00 00    	jbe    c001cbad <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c001ca7d:	0f b7 f3             	movzx  esi,bx
c001ca80:	6b f6 28             	imul   esi,esi,0x28
c001ca83:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001ca87:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001ca8a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ca8e:	52                   	push   edx
c001ca8f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001ca93:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c001ca97:	8b 06                	mov    eax,DWORD PTR [esi]
c001ca99:	6b d2 28             	imul   edx,edx,0x28
c001ca9c:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c001caa0:	31 d2                	xor    edx,edx
c001caa2:	52                   	push   edx
c001caa3:	50                   	push   eax
c001caa4:	55                   	push   ebp
c001caa5:	e8 a0 62 ff ff       	call   c0012d4a <File::seek(unsigned long long)>
c001caaa:	83 c4 0c             	add    esp,0xc
c001caad:	6a 20                	push   0x20
c001caaf:	6a 00                	push   0x0
c001cab1:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001cab8:	51                   	push   ecx
c001cab9:	e8 92 3c fe ff       	call   c0000750 <memset>
c001cabe:	59                   	pop    ecx
c001cabf:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001cac2:	8d 54 24 58          	lea    edx,[esp+0x58]
c001cac6:	52                   	push   edx
c001cac7:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c001cace:	51                   	push   ecx
c001cacf:	6a 00                	push   0x0
c001cad1:	6a 1f                	push   0x1f
c001cad3:	55                   	push   ebp
c001cad4:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001cad7:	83 c4 1c             	add    esp,0x1c
c001cada:	6a 09                	push   0x9
c001cadc:	68 5e ba 02 c0       	push   0xc002ba5e
c001cae1:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001cae8:	51                   	push   ecx
c001cae9:	e8 5e 3b fe ff       	call   c000064c <memcmp>
c001caee:	83 c4 10             	add    esp,0x10
c001caf1:	85 c0                	test   eax,eax
c001caf3:	75 21                	jne    c001cb16 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c001caf5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001caf9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001cafd:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001cb01:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001cb05:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001cb08:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001cb0f:	89 d0                	mov    eax,edx
c001cb11:	40                   	inc    eax
c001cb12:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001cb16:	50                   	push   eax
c001cb17:	6a 09                	push   0x9
c001cb19:	68 68 ba 02 c0       	push   0xc002ba68
c001cb1e:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001cb25:	50                   	push   eax
c001cb26:	e8 21 3b fe ff       	call   c000064c <memcmp>
c001cb2b:	83 c4 10             	add    esp,0x10
c001cb2e:	85 c0                	test   eax,eax
c001cb30:	75 21                	jne    c001cb53 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c001cb32:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cb36:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001cb3a:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001cb3e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001cb42:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001cb45:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001cb4c:	89 d0                	mov    eax,edx
c001cb4e:	40                   	inc    eax
c001cb4f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001cb53:	50                   	push   eax
c001cb54:	50                   	push   eax
c001cb55:	68 34 ba 02 c0       	push   0xc002ba34
c001cb5a:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001cb61:	50                   	push   eax
c001cb62:	e8 31 3d fe ff       	call   c0000898 <strcmp>
c001cb67:	83 c4 10             	add    esp,0x10
c001cb6a:	85 c0                	test   eax,eax
c001cb6c:	75 0f                	jne    c001cb7d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c001cb6e:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001cb71:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001cb75:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001cb79:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001cb7d:	50                   	push   eax
c001cb7e:	50                   	push   eax
c001cb7f:	68 3c ba 02 c0       	push   0xc002ba3c
c001cb84:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001cb8b:	50                   	push   eax
c001cb8c:	e8 07 3d fe ff       	call   c0000898 <strcmp>
c001cb91:	83 c4 10             	add    esp,0x10
c001cb94:	85 c0                	test   eax,eax
c001cb96:	75 0f                	jne    c001cba7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c001cb98:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001cb9b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001cb9f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001cba3:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001cba7:	43                   	inc    ebx
c001cba8:	e9 c6 fe ff ff       	jmp    c001ca73 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c001cbad:	31 d2                	xor    edx,edx
c001cbaf:	50                   	push   eax
c001cbb0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001cbb4:	52                   	push   edx
c001cbb5:	50                   	push   eax
c001cbb6:	55                   	push   ebp
c001cbb7:	e8 8e 61 ff ff       	call   c0012d4a <File::seek(unsigned long long)>
c001cbbc:	58                   	pop    eax
c001cbbd:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001cbc1:	e8 d3 29 ff ff       	call   c000f599 <malloc>
c001cbc6:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001cbc9:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001cbcd:	31 d2                	xor    edx,edx
c001cbcf:	58                   	pop    eax
c001cbd0:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001cbd4:	53                   	push   ebx
c001cbd5:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001cbd9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001cbdd:	52                   	push   edx
c001cbde:	50                   	push   eax
c001cbdf:	55                   	push   ebp
c001cbe0:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cbe3:	83 c4 14             	add    esp,0x14
c001cbe6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001cbea:	e8 aa 29 ff ff       	call   c000f599 <malloc>
c001cbef:	31 d2                	xor    edx,edx
c001cbf1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001cbf5:	83 c4 0c             	add    esp,0xc
c001cbf8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001cbfc:	52                   	push   edx
c001cbfd:	50                   	push   eax
c001cbfe:	55                   	push   ebp
c001cbff:	e8 46 61 ff ff       	call   c0012d4a <File::seek(unsigned long long)>
c001cc04:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001cc07:	31 d2                	xor    edx,edx
c001cc09:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001cc0c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001cc10:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001cc14:	52                   	push   edx
c001cc15:	50                   	push   eax
c001cc16:	55                   	push   ebp
c001cc17:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cc1a:	83 c4 20             	add    esp,0x20
c001cc1d:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001cc25:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001cc29:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
c001cc2d:	0f 84 0b 03 00 00    	je     c001cf3e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f8>
c001cc33:	8b 84 9c 50 01 00 00 	mov    eax,DWORD PTR [esp+ebx*4+0x150]
c001cc3a:	31 d2                	xor    edx,edx
c001cc3c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001cc40:	c1 e8 03             	shr    eax,0x3
c001cc43:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001cc47:	51                   	push   ecx
c001cc48:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001cc4c:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c001cc50:	52                   	push   edx
c001cc51:	50                   	push   eax
c001cc52:	55                   	push   ebp
c001cc53:	e8 f2 60 ff ff       	call   c0012d4a <File::seek(unsigned long long)>
c001cc58:	5b                   	pop    ebx
c001cc59:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cc5d:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c001cc64:	e8 30 29 ff ff       	call   c000f599 <malloc>
c001cc69:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001cc6c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001cc70:	31 d2                	xor    edx,edx
c001cc72:	5e                   	pop    esi
c001cc73:	8d 44 24 58          	lea    eax,[esp+0x58]
c001cc77:	50                   	push   eax
c001cc78:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cc7c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001cc80:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c001cc87:	52                   	push   edx
c001cc88:	50                   	push   eax
c001cc89:	55                   	push   ebp
c001cc8a:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cc8d:	83 c4 20             	add    esp,0x20
c001cc90:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001cc98:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001cc9c:	39 74 24 20          	cmp    DWORD PTR [esp+0x20],esi
c001cca0:	0f 8d 7c 02 00 00    	jge    c001cf22 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6dc>
c001cca6:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001ccaa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ccae:	c6 44 24 24 00       	mov    BYTE PTR [esp+0x24],0x0
c001ccb3:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c001ccb6:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001ccba:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ccbe:	8b 5c d8 04          	mov    ebx,DWORD PTR [eax+ebx*8+0x4]
c001ccc2:	89 d8                	mov    eax,ebx
c001ccc4:	c1 e8 08             	shr    eax,0x8
c001ccc7:	89 c6                	mov    esi,eax
c001ccc9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001cccd:	c1 e6 04             	shl    esi,0x4
c001ccd0:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c001ccd4:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c001ccd7:	85 d2                	test   edx,edx
c001ccd9:	0f 85 bf 00 00 00    	jne    c001cd9e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001ccdf:	83 ec 0c             	sub    esp,0xc
c001cce2:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001cce6:	03 06                	add    eax,DWORD PTR [esi]
c001cce8:	50                   	push   eax
c001cce9:	e8 4b f8 ff ff       	call   c001c539 <Thr::getAddressOfKernelSymbol(char const*)>
c001ccee:	83 c4 10             	add    esp,0x10
c001ccf1:	89 c2                	mov    edx,eax
c001ccf3:	c6 44 24 24 01       	mov    BYTE PTR [esp+0x24],0x1
c001ccf8:	85 c0                	test   eax,eax
c001ccfa:	0f 85 9e 00 00 00    	jne    c001cd9e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001cd00:	83 ec 0c             	sub    esp,0xc
c001cd03:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001cd07:	03 06                	add    eax,DWORD PTR [esi]
c001cd09:	50                   	push   eax
c001cd0a:	e8 30 18 ff ff       	call   c000e53f <Krnl::resolveCompatibilitySymbol(char*)>
c001cd0f:	83 c4 10             	add    esp,0x10
c001cd12:	89 c2                	mov    edx,eax
c001cd14:	85 c0                	test   eax,eax
c001cd16:	0f 85 82 00 00 00    	jne    c001cd9e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001cd1c:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001cd20:	50                   	push   eax
c001cd21:	50                   	push   eax
c001cd22:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cd26:	03 06                	add    eax,DWORD PTR [esi]
c001cd28:	50                   	push   eax
c001cd29:	68 72 ba 02 c0       	push   0xc002ba72
c001cd2e:	e8 96 59 ff ff       	call   c00126c9 <Dbg::kprintf(char const*, ...)>
c001cd33:	58                   	pop    eax
c001cd34:	5a                   	pop    edx
c001cd35:	68 8c ba 02 c0       	push   0xc002ba8c
c001cd3a:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001cd41:	50                   	push   eax
c001cd42:	e8 c5 3a fe ff       	call   c000080c <strcpy>
c001cd47:	59                   	pop    ecx
c001cd48:	58                   	pop    eax
c001cd49:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cd4d:	03 06                	add    eax,DWORD PTR [esi]
c001cd4f:	50                   	push   eax
c001cd50:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001cd57:	50                   	push   eax
c001cd58:	e8 ef 3b fe ff       	call   c000094c <strcat>
c001cd5d:	58                   	pop    eax
c001cd5e:	5a                   	pop    edx
c001cd5f:	68 22 bb 02 c0       	push   0xc002bb22
c001cd64:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001cd6b:	50                   	push   eax
c001cd6c:	e8 db 3b fe ff       	call   c000094c <strcat>
c001cd71:	83 c4 10             	add    esp,0x10
c001cd74:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001cd79:	0f 84 5d 01 00 00    	je     c001cedc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c001cd7f:	83 ec 0c             	sub    esp,0xc
c001cd82:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001cd89:	50                   	push   eax
c001cd8a:	e8 a6 d0 ff ff       	call   c0019e35 <Krnl::panic(char const*)>
c001cd8f:	83 c4 10             	add    esp,0x10
c001cd92:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c001cd96:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001cd9a:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001cd9e:	80 fb 01             	cmp    bl,0x1
c001cda1:	0f 85 88 00 00 00    	jne    c001ce2f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e9>
c001cda7:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c001cdae:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001cdb2:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c001cdb6:	01 ce                	add    esi,ecx
c001cdb8:	81 fb 01 04 00 00    	cmp    ebx,0x401
c001cdbe:	0f 94 c0             	sete   al
c001cdc1:	81 fb 01 01 00 00    	cmp    ebx,0x101
c001cdc7:	0f 94 c3             	sete   bl
c001cdca:	09 c3                	or     ebx,eax
c001cdcc:	8b 06                	mov    eax,DWORD PTR [esi]
c001cdce:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c001cdd3:	74 41                	je     c001ce16 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d0>
c001cdd5:	8d 0c 02             	lea    ecx,[edx+eax*1]
c001cdd8:	84 db                	test   bl,bl
c001cdda:	75 15                	jne    c001cdf1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ab>
c001cddc:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001cde0:	66 83 f8 0c          	cmp    ax,0xc
c001cde4:	76 05                	jbe    c001cdeb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5a5>
c001cde6:	b8 0c 00 00 00       	mov    eax,0xc
c001cdeb:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001cdef:	76 37                	jbe    c001ce28 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c001cdf1:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c001cdf5:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001cdfa:	0f 84 dc 00 00 00    	je     c001cedc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c001ce00:	83 ec 0c             	sub    esp,0xc
c001ce03:	68 a3 ba 02 c0       	push   0xc002baa3
c001ce08:	e8 28 d0 ff ff       	call   c0019e35 <Krnl::panic(char const*)>
c001ce0d:	83 c4 10             	add    esp,0x10
c001ce10:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001ce14:	eb 12                	jmp    c001ce28 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c001ce16:	01 c1                	add    ecx,eax
c001ce18:	84 db                	test   bl,bl
c001ce1a:	75 0c                	jne    c001ce28 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c001ce1c:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001ce20:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001ce24:	77 02                	ja     c001ce28 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c001ce26:	01 d1                	add    ecx,edx
c001ce28:	89 0e                	mov    DWORD PTR [esi],ecx
c001ce2a:	e9 ea 00 00 00       	jmp    c001cf19 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c001ce2f:	80 fb 02             	cmp    bl,0x2
c001ce32:	75 7c                	jne    c001ceb0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x66a>
c001ce34:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c001ce3b:	2b 74 24 28          	sub    esi,DWORD PTR [esp+0x28]
c001ce3f:	03 74 24 2c          	add    esi,DWORD PTR [esp+0x2c]
c001ce43:	81 fb 01 04 00 00    	cmp    ebx,0x401
c001ce49:	74 20                	je     c001ce6b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c001ce4b:	81 fb 01 01 00 00    	cmp    ebx,0x101
c001ce51:	74 18                	je     c001ce6b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c001ce53:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001ce57:	b9 0a 00 00 00       	mov    ecx,0xa
c001ce5c:	66 83 f8 0e          	cmp    ax,0xe
c001ce60:	77 03                	ja     c001ce65 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x61f>
c001ce62:	8d 48 fc             	lea    ecx,[eax-0x4]
c001ce65:	3b 4c 24 30          	cmp    ecx,DWORD PTR [esp+0x30]
c001ce69:	76 1f                	jbe    c001ce8a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x644>
c001ce6b:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c001ce6f:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001ce74:	74 66                	je     c001cedc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c001ce76:	83 ec 0c             	sub    esp,0xc
c001ce79:	68 bf ba 02 c0       	push   0xc002babf
c001ce7e:	e8 b2 cf ff ff       	call   c0019e35 <Krnl::panic(char const*)>
c001ce83:	83 c4 10             	add    esp,0x10
c001ce86:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001ce8a:	8b 06                	mov    eax,DWORD PTR [esi]
c001ce8c:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c001ce91:	74 13                	je     c001cea6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x660>
c001ce93:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001ce97:	2b 8c 24 74 03 00 00 	sub    ecx,DWORD PTR [esp+0x374]
c001ce9e:	2b 4c 24 2c          	sub    ecx,DWORD PTR [esp+0x2c]
c001cea2:	01 c8                	add    eax,ecx
c001cea4:	eb 04                	jmp    c001ceaa <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x664>
c001cea6:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c001ceaa:	01 c2                	add    edx,eax
c001ceac:	89 16                	mov    DWORD PTR [esi],edx
c001ceae:	eb 69                	jmp    c001cf19 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c001ceb0:	0f b6 db             	movzx  ebx,bl
c001ceb3:	50                   	push   eax
c001ceb4:	50                   	push   eax
c001ceb5:	53                   	push   ebx
c001ceb6:	68 db ba 02 c0       	push   0xc002badb
c001cebb:	e8 09 58 ff ff       	call   c00126c9 <Dbg::kprintf(char const*, ...)>
c001cec0:	83 c4 10             	add    esp,0x10
c001cec3:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001cec8:	74 12                	je     c001cedc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c001ceca:	83 ec 0c             	sub    esp,0xc
c001cecd:	68 e6 ba 02 c0       	push   0xc002bae6
c001ced2:	e8 5e cf ff ff       	call   c0019e35 <Krnl::panic(char const*)>
c001ced7:	83 c4 10             	add    esp,0x10
c001ceda:	eb 3d                	jmp    c001cf19 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c001cedc:	83 ec 0c             	sub    esp,0xc
c001cedf:	55                   	push   ebp
c001cee0:	e8 05 5e ff ff       	call   c0012cea <File::close()>
c001cee5:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001cee8:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001ceeb:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001ceee:	59                   	pop    ecx
c001ceef:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001cef3:	e8 b1 26 ff ff       	call   c000f5a9 <free>
c001cef8:	5b                   	pop    ebx
c001cef9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001cefd:	e8 a7 26 ff ff       	call   c000f5a9 <free>
c001cf02:	89 3c 24             	mov    DWORD PTR [esp],edi
c001cf05:	e8 9f 26 ff ff       	call   c000f5a9 <free>
c001cf0a:	5e                   	pop    esi
c001cf0b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cf0f:	e8 95 26 ff ff       	call   c000f5a9 <free>
c001cf14:	83 c4 10             	add    esp,0x10
c001cf17:	eb 21                	jmp    c001cf3a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001cf19:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c001cf1d:	e9 76 fd ff ff       	jmp    c001cc98 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x452>
c001cf22:	83 ec 0c             	sub    esp,0xc
c001cf25:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001cf29:	e8 7b 26 ff ff       	call   c000f5a9 <free>
c001cf2e:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c001cf32:	83 c4 10             	add    esp,0x10
c001cf35:	e9 eb fc ff ff       	jmp    c001cc25 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3df>
c001cf3a:	31 c0                	xor    eax,eax
c001cf3c:	eb 33                	jmp    c001cf71 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x72b>
c001cf3e:	83 ec 0c             	sub    esp,0xc
c001cf41:	55                   	push   ebp
c001cf42:	e8 a3 5d ff ff       	call   c0012cea <File::close()>
c001cf47:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001cf4a:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001cf4d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001cf50:	58                   	pop    eax
c001cf51:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001cf55:	e8 4f 26 ff ff       	call   c000f5a9 <free>
c001cf5a:	89 3c 24             	mov    DWORD PTR [esp],edi
c001cf5d:	e8 47 26 ff ff       	call   c000f5a9 <free>
c001cf62:	5a                   	pop    edx
c001cf63:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cf67:	e8 3d 26 ff ff       	call   c000f5a9 <free>
c001cf6c:	83 c4 10             	add    esp,0x10
c001cf6f:	b0 01                	mov    al,0x1
c001cf71:	81 c4 5c 03 00 00    	add    esp,0x35c
c001cf77:	5b                   	pop    ebx
c001cf78:	5e                   	pop    esi
c001cf79:	5f                   	pop    edi
c001cf7a:	5d                   	pop    ebp
c001cf7b:	c3                   	ret    

c001cf7c <Thr::getDriverBaseFromAddress(unsigned long)>:
c001cf7c:	56                   	push   esi
c001cf7d:	31 d2                	xor    edx,edx
c001cf7f:	53                   	push   ebx
c001cf80:	8b 1d 00 07 03 c0    	mov    ebx,DWORD PTR ds:0xc0030700
c001cf86:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001cf8a:	39 d3                	cmp    ebx,edx
c001cf8c:	7e 1b                	jle    c001cfa9 <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c001cf8e:	8b 04 95 20 09 03 c0 	mov    eax,DWORD PTR [edx*4-0x3ffcf6e0]
c001cf95:	39 c8                	cmp    eax,ecx
c001cf97:	77 0d                	ja     c001cfa6 <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c001cf99:	8b 34 95 20 07 03 c0 	mov    esi,DWORD PTR [edx*4-0x3ffcf8e0]
c001cfa0:	01 c6                	add    esi,eax
c001cfa2:	39 ce                	cmp    esi,ecx
c001cfa4:	77 05                	ja     c001cfab <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c001cfa6:	42                   	inc    edx
c001cfa7:	eb e1                	jmp    c001cf8a <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c001cfa9:	31 c0                	xor    eax,eax
c001cfab:	5b                   	pop    ebx
c001cfac:	5e                   	pop    esi
c001cfad:	c3                   	ret    

c001cfae <Thr::getDriverNameFromAddress(unsigned long)>:
c001cfae:	53                   	push   ebx
c001cfaf:	31 c0                	xor    eax,eax
c001cfb1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001cfb5:	8b 1d 00 07 03 c0    	mov    ebx,DWORD PTR ds:0xc0030700
c001cfbb:	39 c3                	cmp    ebx,eax
c001cfbd:	7e 22                	jle    c001cfe1 <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c001cfbf:	8b 14 85 20 09 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcf6e0]
c001cfc6:	39 ca                	cmp    edx,ecx
c001cfc8:	77 14                	ja     c001cfde <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001cfca:	03 14 85 20 07 03 c0 	add    edx,DWORD PTR [eax*4-0x3ffcf8e0]
c001cfd1:	39 ca                	cmp    edx,ecx
c001cfd3:	76 09                	jbe    c001cfde <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001cfd5:	8b 04 85 20 0b 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf4e0]
c001cfdc:	eb 05                	jmp    c001cfe3 <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c001cfde:	40                   	inc    eax
c001cfdf:	eb da                	jmp    c001cfbb <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c001cfe1:	31 c0                	xor    eax,eax
c001cfe3:	5b                   	pop    ebx
c001cfe4:	c3                   	ret    

c001cfe5 <Thr::getDriverOffsetFromAddress(unsigned long)>:
c001cfe5:	53                   	push   ebx
c001cfe6:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001cfea:	53                   	push   ebx
c001cfeb:	e8 8c ff ff ff       	call   c001cf7c <Thr::getDriverBaseFromAddress(unsigned long)>
c001cff0:	5a                   	pop    edx
c001cff1:	31 d2                	xor    edx,edx
c001cff3:	85 c0                	test   eax,eax
c001cff5:	74 04                	je     c001cffb <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c001cff7:	89 da                	mov    edx,ebx
c001cff9:	29 c2                	sub    edx,eax
c001cffb:	89 d0                	mov    eax,edx
c001cffd:	5b                   	pop    ebx
c001cffe:	c3                   	ret    

c001cfff <Thr::loadDLL(char const*, bool)>:
c001cfff:	55                   	push   ebp
c001d000:	57                   	push   edi
c001d001:	56                   	push   esi
c001d002:	53                   	push   ebx
c001d003:	81 ec 34 01 00 00    	sub    esp,0x134
c001d009:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c001d010:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c001d017:	56                   	push   esi
c001d018:	68 fe ba 02 c0       	push   0xc002bafe
c001d01d:	e8 a7 56 ff ff       	call   c00126c9 <Dbg::kprintf(char const*, ...)>
c001d022:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001d029:	e8 6b 25 ff ff       	call   c000f599 <malloc>
c001d02e:	83 c4 0c             	add    esp,0xc
c001d031:	89 c3                	mov    ebx,eax
c001d033:	ff 35 f0 0e 03 c0    	push   DWORD PTR ds:0xc0030ef0
c001d039:	56                   	push   esi
c001d03a:	50                   	push   eax
c001d03b:	e8 e8 5b ff ff       	call   c0012c28 <File::File(char const*, Process*)>
c001d040:	83 c4 10             	add    esp,0x10
c001d043:	85 db                	test   ebx,ebx
c001d045:	75 3c                	jne    c001d083 <Thr::loadDLL(char const*, bool)+0x84>
c001d047:	89 f8                	mov    eax,edi
c001d049:	84 c0                	test   al,al
c001d04b:	0f 84 d2 01 00 00    	je     c001d223 <Thr::loadDLL(char const*, bool)+0x224>
c001d051:	55                   	push   ebp
c001d052:	55                   	push   ebp
c001d053:	68 0f bb 02 c0       	push   0xc002bb0f
c001d058:	8d 6c 24 2c          	lea    ebp,[esp+0x2c]
c001d05c:	55                   	push   ebp
c001d05d:	e8 aa 37 fe ff       	call   c000080c <strcpy>
c001d062:	58                   	pop    eax
c001d063:	5a                   	pop    edx
c001d064:	56                   	push   esi
c001d065:	55                   	push   ebp
c001d066:	e8 e1 38 fe ff       	call   c000094c <strcat>
c001d06b:	59                   	pop    ecx
c001d06c:	58                   	pop    eax
c001d06d:	68 22 bb 02 c0       	push   0xc002bb22
c001d072:	55                   	push   ebp
c001d073:	e8 d4 38 fe ff       	call   c000094c <strcat>
c001d078:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001d07b:	e8 b5 cd ff ff       	call   c0019e35 <Krnl::panic(char const*)>
c001d080:	83 c4 10             	add    esp,0x10
c001d083:	51                   	push   ecx
c001d084:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c001d088:	50                   	push   eax
c001d089:	8d 44 24 20          	lea    eax,[esp+0x20]
c001d08d:	50                   	push   eax
c001d08e:	53                   	push   ebx
c001d08f:	e8 a4 5e ff ff       	call   c0012f38 <File::stat(unsigned long long*, bool*)>
c001d094:	83 c4 10             	add    esp,0x10
c001d097:	85 db                	test   ebx,ebx
c001d099:	74 0c                	je     c001d0a7 <Thr::loadDLL(char const*, bool)+0xa8>
c001d09b:	83 ec 0c             	sub    esp,0xc
c001d09e:	8b 03                	mov    eax,DWORD PTR [ebx]
c001d0a0:	53                   	push   ebx
c001d0a1:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d0a4:	83 c4 10             	add    esp,0x10
c001d0a7:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c001d0ac:	75 0a                	jne    c001d0b8 <Thr::loadDLL(char const*, bool)+0xb9>
c001d0ae:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d0b2:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c001d0b6:	75 3c                	jne    c001d0f4 <Thr::loadDLL(char const*, bool)+0xf5>
c001d0b8:	89 f8                	mov    eax,edi
c001d0ba:	84 c0                	test   al,al
c001d0bc:	0f 84 49 01 00 00    	je     c001d20b <Thr::loadDLL(char const*, bool)+0x20c>
c001d0c2:	51                   	push   ecx
c001d0c3:	51                   	push   ecx
c001d0c4:	68 0f bb 02 c0       	push   0xc002bb0f
c001d0c9:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c001d0cd:	53                   	push   ebx
c001d0ce:	e8 39 37 fe ff       	call   c000080c <strcpy>
c001d0d3:	5d                   	pop    ebp
c001d0d4:	58                   	pop    eax
c001d0d5:	56                   	push   esi
c001d0d6:	53                   	push   ebx
c001d0d7:	e8 70 38 fe ff       	call   c000094c <strcat>
c001d0dc:	58                   	pop    eax
c001d0dd:	5a                   	pop    edx
c001d0de:	68 22 bb 02 c0       	push   0xc002bb22
c001d0e3:	53                   	push   ebx
c001d0e4:	e8 63 38 fe ff       	call   c000094c <strcat>
c001d0e9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d0ec:	e8 44 cd ff ff       	call   c0019e35 <Krnl::panic(char const*)>
c001d0f1:	83 c4 10             	add    esp,0x10
c001d0f4:	52                   	push   edx
c001d0f5:	6a 03                	push   0x3
c001d0f7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d0fb:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001d0ff:	05 ff 0f 00 00       	add    eax,0xfff
c001d104:	83 d2 00             	adc    edx,0x0
c001d107:	0f ac d0 0c          	shrd   eax,edx,0xc
c001d10b:	50                   	push   eax
c001d10c:	ff 35 10 db 02 c0    	push   DWORD PTR ds:0xc002db10
c001d112:	e8 c5 49 ff ff       	call   c0011adc <VAS::allocatePages(int, int)>
c001d117:	59                   	pop    ecx
c001d118:	89 c3                	mov    ebx,eax
c001d11a:	5d                   	pop    ebp
c001d11b:	50                   	push   eax
c001d11c:	68 b1 a0 02 c0       	push   0xc002a0b1
c001d121:	e8 a3 55 ff ff       	call   c00126c9 <Dbg::kprintf(char const*, ...)>
c001d126:	89 34 24             	mov    DWORD PTR [esp],esi
c001d129:	e8 3e 36 fe ff       	call   c000076c <strlen>
c001d12e:	8b 2d 00 07 03 c0    	mov    ebp,DWORD PTR ds:0xc0030700
c001d134:	40                   	inc    eax
c001d135:	89 04 24             	mov    DWORD PTR [esp],eax
c001d138:	e8 5c 24 ff ff       	call   c000f599 <malloc>
c001d13d:	89 04 ad 20 0b 03 c0 	mov    DWORD PTR [ebp*4-0x3ffcf4e0],eax
c001d144:	58                   	pop    eax
c001d145:	a1 00 07 03 c0       	mov    eax,ds:0xc0030700
c001d14a:	5a                   	pop    edx
c001d14b:	56                   	push   esi
c001d14c:	ff 34 85 20 0b 03 c0 	push   DWORD PTR [eax*4-0x3ffcf4e0]
c001d153:	e8 b4 36 fe ff       	call   c000080c <strcpy>
c001d158:	a1 00 07 03 c0       	mov    eax,ds:0xc0030700
c001d15d:	8d 50 01             	lea    edx,[eax+0x1]
c001d160:	89 1c 85 20 09 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf6e0],ebx
c001d167:	89 15 00 07 03 c0    	mov    DWORD PTR ds:0xc0030700,edx
c001d16d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001d171:	83 c4 0c             	add    esp,0xc
c001d174:	89 14 85 20 07 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf8e0],edx
c001d17b:	6a 01                	push   0x1
c001d17d:	53                   	push   ebx
c001d17e:	56                   	push   esi
c001d17f:	e8 c2 f6 ff ff       	call   c001c846 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c001d184:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001d188:	83 c4 10             	add    esp,0x10
c001d18b:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001d190:	0f 85 89 00 00 00    	jne    c001d21f <Thr::loadDLL(char const*, bool)+0x220>
c001d196:	89 f8                	mov    eax,edi
c001d198:	84 c0                	test   al,al
c001d19a:	74 73                	je     c001d20f <Thr::loadDLL(char const*, bool)+0x210>
c001d19c:	83 ec 0c             	sub    esp,0xc
c001d19f:	68 24 bb 02 c0       	push   0xc002bb24
c001d1a4:	e8 8c cc ff ff       	call   c0019e35 <Krnl::panic(char const*)>
c001d1a9:	83 c4 10             	add    esp,0x10
c001d1ac:	eb 61                	jmp    c001d20f <Thr::loadDLL(char const*, bool)+0x210>
c001d1ae:	50                   	push   eax
c001d1af:	50                   	push   eax
c001d1b0:	89 e8                	mov    eax,ebp
c001d1b2:	c1 e0 0c             	shl    eax,0xc
c001d1b5:	01 d8                	add    eax,ebx
c001d1b7:	50                   	push   eax
c001d1b8:	ff 35 10 db 02 c0    	push   DWORD PTR ds:0xc002db10
c001d1be:	e8 81 44 ff ff       	call   c0011644 <VAS::getPageTableEntry(unsigned long)>
c001d1c3:	83 c4 10             	add    esp,0x10
c001d1c6:	8b 00                	mov    eax,DWORD PTR [eax]
c001d1c8:	a8 60                	test   al,0x60
c001d1ca:	75 11                	jne    c001d1dd <Thr::loadDLL(char const*, bool)+0x1de>
c001d1cc:	83 ec 0c             	sub    esp,0xc
c001d1cf:	25 00 f0 ff ff       	and    eax,0xfffff000
c001d1d4:	50                   	push   eax
c001d1d5:	e8 4a 27 ff ff       	call   c000f924 <Phys::freePage(unsigned long)>
c001d1da:	83 c4 10             	add    esp,0x10
c001d1dd:	45                   	inc    ebp
c001d1de:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d1e2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d1e6:	05 ff 0f 00 00       	add    eax,0xfff
c001d1eb:	bf 00 00 00 00       	mov    edi,0x0
c001d1f0:	83 d2 00             	adc    edx,0x0
c001d1f3:	0f ac d0 0c          	shrd   eax,edx,0xc
c001d1f7:	c1 ea 0c             	shr    edx,0xc
c001d1fa:	39 c5                	cmp    ebp,eax
c001d1fc:	89 d1                	mov    ecx,edx
c001d1fe:	89 f8                	mov    eax,edi
c001d200:	19 c8                	sbb    eax,ecx
c001d202:	72 aa                	jb     c001d1ae <Thr::loadDLL(char const*, bool)+0x1af>
c001d204:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001d209:	75 18                	jne    c001d223 <Thr::loadDLL(char const*, bool)+0x224>
c001d20b:	31 db                	xor    ebx,ebx
c001d20d:	eb 14                	jmp    c001d223 <Thr::loadDLL(char const*, bool)+0x224>
c001d20f:	83 ec 0c             	sub    esp,0xc
c001d212:	68 43 bb 02 c0       	push   0xc002bb43
c001d217:	e8 19 cc ff ff       	call   c0019e35 <Krnl::panic(char const*)>
c001d21c:	83 c4 10             	add    esp,0x10
c001d21f:	31 ed                	xor    ebp,ebp
c001d221:	eb bb                	jmp    c001d1de <Thr::loadDLL(char const*, bool)+0x1df>
c001d223:	81 c4 2c 01 00 00    	add    esp,0x12c
c001d229:	89 d8                	mov    eax,ebx
c001d22b:	5b                   	pop    ebx
c001d22c:	5e                   	pop    esi
c001d22d:	5f                   	pop    edi
c001d22e:	5d                   	pop    ebp
c001d22f:	c3                   	ret    

c001d230 <Thr::executeDLL(unsigned long, void*)>:
c001d230:	56                   	push   esi
c001d231:	53                   	push   ebx
c001d232:	52                   	push   edx
c001d233:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d237:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001d23b:	85 db                	test   ebx,ebx
c001d23d:	75 10                	jne    c001d24f <Thr::executeDLL(unsigned long, void*)+0x1f>
c001d23f:	83 ec 0c             	sub    esp,0xc
c001d242:	68 5f bb 02 c0       	push   0xc002bb5f
c001d247:	e8 e9 cb ff ff       	call   c0019e35 <Krnl::panic(char const*)>
c001d24c:	83 c4 10             	add    esp,0x10
c001d24f:	50                   	push   eax
c001d250:	50                   	push   eax
c001d251:	53                   	push   ebx
c001d252:	68 89 bb 02 c0       	push   0xc002bb89
c001d257:	e8 6d 54 ff ff       	call   c00126c9 <Dbg::kprintf(char const*, ...)>
c001d25c:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001d260:	89 d8                	mov    eax,ebx
c001d262:	83 c4 14             	add    esp,0x14
c001d265:	5b                   	pop    ebx
c001d266:	5e                   	pop    esi
c001d267:	ff e0                	jmp    eax
c001d269:	90                   	nop

c001d26a <userModeEntryPoint(void*)>:
c001d26a:	a1 c8 0e 03 c0       	mov    eax,ds:0xc0030ec8
c001d26f:	48                   	dec    eax
c001d270:	a3 c8 0e 03 c0       	mov    ds:0xc0030ec8,eax
c001d275:	75 01                	jne    c001d278 <userModeEntryPoint(void*)+0xe>
c001d277:	fb                   	sti    
c001d278:	fb                   	sti    
c001d279:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d27e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001d281:	8b 80 2e 05 00 00    	mov    eax,DWORD PTR [eax+0x52e]
c001d287:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d28b:	e9 9a 30 fe ff       	jmp    c000032a <goToUsermode>

c001d290 <changeTSS>:
c001d290:	83 ec 14             	sub    esp,0x14
c001d293:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d298:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c001d29b:	b8 00 00 e8 01       	mov    eax,0x1e80000
c001d2a0:	c1 e2 15             	shl    edx,0x15
c001d2a3:	29 d0                	sub    eax,edx
c001d2a5:	50                   	push   eax
c001d2a6:	a1 a8 d9 02 c0       	mov    eax,ds:0xc002d9a8
c001d2ab:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001d2b1:	05 7c 11 00 00       	add    eax,0x117c
c001d2b6:	50                   	push   eax
c001d2b7:	e8 b6 38 ff ff       	call   c0010b72 <TSS::setESP(unsigned long)>
c001d2bc:	83 c4 1c             	add    esp,0x1c
c001d2bf:	c3                   	ret    

c001d2c0 <switchToThread(ThreadControlBlock*)>:
c001d2c0:	57                   	push   edi
c001d2c1:	a1 c4 0e 03 c0       	mov    eax,ds:0xc0030ec4
c001d2c6:	56                   	push   esi
c001d2c7:	85 c0                	test   eax,eax
c001d2c9:	53                   	push   ebx
c001d2ca:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001d2ce:	0f 85 88 00 00 00    	jne    c001d35c <switchToThread(ThreadControlBlock*)+0x9c>
c001d2d4:	8a 41 44             	mov    al,BYTE PTR [ecx+0x44]
c001d2d7:	3c ff                	cmp    al,0xff
c001d2d9:	74 7d                	je     c001d358 <switchToThread(ThreadControlBlock*)+0x98>
c001d2db:	0f b6 d0             	movzx  edx,al
c001d2de:	b8 84 03 00 00       	mov    eax,0x384
c001d2e3:	29 d0                	sub    eax,edx
c001d2e5:	c1 e0 10             	shl    eax,0x10
c001d2e8:	03 41 38             	add    eax,DWORD PTR [ecx+0x38]
c001d2eb:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c001d2ee:	a1 a8 d9 02 c0       	mov    eax,ds:0xc002d9a8
c001d2f3:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001d2f9:	f6 80 90 11 00 00 02 	test   BYTE PTR [eax+0x1190],0x2
c001d300:	74 4a                	je     c001d34c <switchToThread(ThreadControlBlock*)+0x8c>
c001d302:	0f 31                	rdtsc  
c001d304:	a3 08 0f 03 c0       	mov    ds:0xc0030f08,eax
c001d309:	89 c6                	mov    esi,eax
c001d30b:	89 d7                	mov    edi,edx
c001d30d:	2b 35 f8 0e 03 c0    	sub    esi,DWORD PTR ds:0xc0030ef8
c001d313:	89 15 0c 0f 03 c0    	mov    DWORD PTR ds:0xc0030f0c,edx
c001d319:	1b 3d fc 0e 03 c0    	sbb    edi,DWORD PTR ds:0xc0030efc
c001d31f:	89 35 00 0f 03 c0    	mov    DWORD PTR ds:0xc0030f00,esi
c001d325:	a3 f8 0e 03 c0       	mov    ds:0xc0030ef8,eax
c001d32a:	89 3d 04 0f 03 c0    	mov    DWORD PTR ds:0xc0030f04,edi
c001d330:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c001d336:	89 15 fc 0e 03 c0    	mov    DWORD PTR ds:0xc0030efc,edx
c001d33c:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001d33f:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c001d342:	01 c6                	add    esi,eax
c001d344:	11 d7                	adc    edi,edx
c001d346:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c001d349:	89 7b 14             	mov    DWORD PTR [ebx+0x14],edi
c001d34c:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c001d350:	5b                   	pop    ebx
c001d351:	5e                   	pop    esi
c001d352:	5f                   	pop    edi
c001d353:	e9 0a 30 fe ff       	jmp    c0000362 <switchToThreadASM>
c001d358:	31 c0                	xor    eax,eax
c001d35a:	eb 8f                	jmp    c001d2eb <switchToThread(ThreadControlBlock*)+0x2b>
c001d35c:	5b                   	pop    ebx
c001d35d:	c7 05 c0 0e 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0030ec0,0x1
c001d367:	5e                   	pop    esi
c001d368:	5f                   	pop    edi
c001d369:	c3                   	ret    

c001d36a <Process::addArgs(char**)>:
c001d36a:	57                   	push   edi
c001d36b:	56                   	push   esi
c001d36c:	53                   	push   ebx
c001d36d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d371:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001d375:	c7 86 36 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x536],0x0
c001d37f:	85 ff                	test   edi,edi
c001d381:	74 3d                	je     c001d3c0 <Process::addArgs(char**)+0x56>
c001d383:	8b 07                	mov    eax,DWORD PTR [edi]
c001d385:	85 c0                	test   eax,eax
c001d387:	74 37                	je     c001d3c0 <Process::addArgs(char**)+0x56>
c001d389:	31 db                	xor    ebx,ebx
c001d38b:	83 ec 0c             	sub    esp,0xc
c001d38e:	50                   	push   eax
c001d38f:	e8 d8 33 fe ff       	call   c000076c <strlen>
c001d394:	40                   	inc    eax
c001d395:	89 04 24             	mov    DWORD PTR [esp],eax
c001d398:	e8 fc 21 ff ff       	call   c000f599 <malloc>
c001d39d:	89 84 9e 3a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x53a],eax
c001d3a4:	5a                   	pop    edx
c001d3a5:	59                   	pop    ecx
c001d3a6:	ff 34 9f             	push   DWORD PTR [edi+ebx*4]
c001d3a9:	43                   	inc    ebx
c001d3aa:	50                   	push   eax
c001d3ab:	e8 5c 34 fe ff       	call   c000080c <strcpy>
c001d3b0:	ff 86 36 05 00 00    	inc    DWORD PTR [esi+0x536]
c001d3b6:	83 c4 10             	add    esp,0x10
c001d3b9:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001d3bc:	85 c0                	test   eax,eax
c001d3be:	75 cb                	jne    c001d38b <Process::addArgs(char**)+0x21>
c001d3c0:	5b                   	pop    ebx
c001d3c1:	5e                   	pop    esi
c001d3c2:	5f                   	pop    edi
c001d3c3:	c3                   	ret    

c001d3c4 <Process::Process(char const*, Process*, char**)>:
c001d3c4:	56                   	push   esi
c001d3c5:	53                   	push   ebx
c001d3c6:	83 ec 14             	sub    esp,0x14
c001d3c9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d3cd:	05 0c 02 00 00       	add    eax,0x20c
c001d3d2:	bb 07 00 00 00       	mov    ebx,0x7
c001d3d7:	89 c6                	mov    esi,eax
c001d3d9:	85 db                	test   ebx,ebx
c001d3db:	78 12                	js     c001d3ef <Process::Process(char const*, Process*, char**)+0x2b>
c001d3dd:	83 ec 0c             	sub    esp,0xc
c001d3e0:	56                   	push   esi
c001d3e1:	e8 a0 b6 00 00       	call   c0028a86 <ThreadControlBlock::ThreadControlBlock()>
c001d3e6:	83 c4 10             	add    esp,0x10
c001d3e9:	83 c6 63             	add    esi,0x63
c001d3ec:	4b                   	dec    ebx
c001d3ed:	eb ea                	jmp    c001d3d9 <Process::Process(char const*, Process*, char**)+0x15>
c001d3ef:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d3f3:	c6 80 3e 07 00 00 00 	mov    BYTE PTR [eax+0x73e],0x0
c001d3fa:	83 ec 0c             	sub    esp,0xc
c001d3fd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d401:	e8 b8 c8 ff ff       	call   c0019cbe <Krnl::newProcessEnv(Process*)>
c001d406:	83 c4 10             	add    esp,0x10
c001d409:	89 c2                	mov    edx,eax
c001d40b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d40f:	89 90 3a 07 00 00    	mov    DWORD PTR [eax+0x73a],edx
c001d415:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d419:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c001d422:	a1 30 cf 02 c0       	mov    eax,ds:0xc002cf30
c001d427:	8d 50 01             	lea    edx,[eax+0x1]
c001d42a:	89 15 30 cf 02 c0    	mov    DWORD PTR ds:0xc002cf30,edx
c001d430:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001d434:	89 02                	mov    DWORD PTR [edx],eax
c001d436:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c001d43e:	83 ec 0c             	sub    esp,0xc
c001d441:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d445:	e8 4f 21 ff ff       	call   c000f599 <malloc>
c001d44a:	83 c4 10             	add    esp,0x10
c001d44d:	89 c3                	mov    ebx,eax
c001d44f:	83 ec 08             	sub    esp,0x8
c001d452:	6a 00                	push   0x0
c001d454:	53                   	push   ebx
c001d455:	e8 2a 4a ff ff       	call   c0011e84 <VAS::VAS(bool)>
c001d45a:	83 c4 10             	add    esp,0x10
c001d45d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d461:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001d467:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d46b:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001d475:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d479:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001d47d:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001d483:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d487:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001d48d:	85 c0                	test   eax,eax
c001d48f:	74 42                	je     c001d4d3 <Process::Process(char const*, Process*, char**)+0x10f>
c001d491:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d495:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001d49b:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001d4a1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d4a5:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001d4ab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d4af:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001d4b5:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001d4bb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d4bf:	05 0c 01 00 00       	add    eax,0x10c
c001d4c4:	83 ec 08             	sub    esp,0x8
c001d4c7:	52                   	push   edx
c001d4c8:	50                   	push   eax
c001d4c9:	e8 3e 33 fe ff       	call   c000080c <strcpy>
c001d4ce:	83 c4 10             	add    esp,0x10
c001d4d1:	eb 63                	jmp    c001d536 <Process::Process(char const*, Process*, char**)+0x172>
c001d4d3:	c7 44 24 04 c4 02 00 00 	mov    DWORD PTR [esp+0x4],0x2c4
c001d4db:	83 ec 0c             	sub    esp,0xc
c001d4de:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001d4e2:	e8 b2 20 ff ff       	call   c000f599 <malloc>
c001d4e7:	83 c4 10             	add    esp,0x10
c001d4ea:	89 c3                	mov    ebx,eax
c001d4ec:	83 ec 08             	sub    esp,0x8
c001d4ef:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d4f3:	53                   	push   ebx
c001d4f4:	e8 8d 33 ff ff       	call   c0010886 <VgaText::VgaText(char const*)>
c001d4f9:	83 c4 10             	add    esp,0x10
c001d4fc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d500:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c001d506:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d50a:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001d510:	83 ec 0c             	sub    esp,0xc
c001d513:	50                   	push   eax
c001d514:	e8 2c 2b ff ff       	call   c0010045 <addToTerminalCycle(VgaText*)>
c001d519:	83 c4 10             	add    esp,0x10
c001d51c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d520:	05 0c 01 00 00       	add    eax,0x10c
c001d525:	83 ec 08             	sub    esp,0x8
c001d528:	68 a8 bb 02 c0       	push   0xc002bba8
c001d52d:	50                   	push   eax
c001d52e:	e8 d9 32 fe ff       	call   c000080c <strcpy>
c001d533:	83 c4 10             	add    esp,0x10
c001d536:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d53a:	83 c0 0c             	add    eax,0xc
c001d53d:	83 ec 08             	sub    esp,0x8
c001d540:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d544:	50                   	push   eax
c001d545:	e8 c2 32 fe ff       	call   c000080c <strcpy>
c001d54a:	83 c4 10             	add    esp,0x10
c001d54d:	83 ec 08             	sub    esp,0x8
c001d550:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001d554:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d558:	e8 0d fe ff ff       	call   c001d36a <Process::addArgs(char**)>
c001d55d:	83 c4 10             	add    esp,0x10
c001d560:	83 ec 08             	sub    esp,0x8
c001d563:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d567:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d56b:	e8 a0 ed ff ff       	call   c001c310 <Thr::loadProgramIntoMemory(Process*, char const*)>
c001d570:	83 c4 10             	add    esp,0x10
c001d573:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001d577:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001d57b:	83 f0 01             	xor    eax,0x1
c001d57e:	88 c2                	mov    dl,al
c001d580:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d584:	88 90 3e 07 00 00    	mov    BYTE PTR [eax+0x73e],dl
c001d58a:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001d58f:	83 ec 08             	sub    esp,0x8
c001d592:	50                   	push   eax
c001d593:	68 00 bc 02 c0       	push   0xc002bc00
c001d598:	e8 2c 51 ff ff       	call   c00126c9 <Dbg::kprintf(char const*, ...)>
c001d59d:	83 c4 10             	add    esp,0x10
c001d5a0:	90                   	nop
c001d5a1:	83 c4 14             	add    esp,0x14
c001d5a4:	5b                   	pop    ebx
c001d5a5:	5e                   	pop    esi
c001d5a6:	c3                   	ret    
c001d5a7:	90                   	nop

c001d5a8 <Process::Process(bool, char const*, Process*, char**)>:
c001d5a8:	56                   	push   esi
c001d5a9:	53                   	push   ebx
c001d5aa:	83 ec 24             	sub    esp,0x24
c001d5ad:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001d5b1:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001d5b5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d5b9:	05 0c 02 00 00       	add    eax,0x20c
c001d5be:	bb 07 00 00 00       	mov    ebx,0x7
c001d5c3:	89 c6                	mov    esi,eax
c001d5c5:	85 db                	test   ebx,ebx
c001d5c7:	78 12                	js     c001d5db <Process::Process(bool, char const*, Process*, char**)+0x33>
c001d5c9:	83 ec 0c             	sub    esp,0xc
c001d5cc:	56                   	push   esi
c001d5cd:	e8 b4 b4 00 00       	call   c0028a86 <ThreadControlBlock::ThreadControlBlock()>
c001d5d2:	83 c4 10             	add    esp,0x10
c001d5d5:	83 c6 63             	add    esi,0x63
c001d5d8:	4b                   	dec    ebx
c001d5d9:	eb ea                	jmp    c001d5c5 <Process::Process(bool, char const*, Process*, char**)+0x1d>
c001d5db:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d5df:	c6 80 3e 07 00 00 00 	mov    BYTE PTR [eax+0x73e],0x0
c001d5e6:	83 ec 0c             	sub    esp,0xc
c001d5e9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001d5ed:	e8 cc c6 ff ff       	call   c0019cbe <Krnl::newProcessEnv(Process*)>
c001d5f2:	83 c4 10             	add    esp,0x10
c001d5f5:	89 c2                	mov    edx,eax
c001d5f7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d5fb:	89 90 3a 07 00 00    	mov    DWORD PTR [eax+0x73a],edx
c001d601:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d605:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c001d60e:	a1 30 cf 02 c0       	mov    eax,ds:0xc002cf30
c001d613:	8d 50 01             	lea    edx,[eax+0x1]
c001d616:	89 15 30 cf 02 c0    	mov    DWORD PTR ds:0xc002cf30,edx
c001d61c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001d620:	89 02                	mov    DWORD PTR [edx],eax
c001d622:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c001d62a:	83 ec 0c             	sub    esp,0xc
c001d62d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001d631:	e8 63 1f ff ff       	call   c000f599 <malloc>
c001d636:	83 c4 10             	add    esp,0x10
c001d639:	89 c3                	mov    ebx,eax
c001d63b:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001d640:	83 ec 08             	sub    esp,0x8
c001d643:	50                   	push   eax
c001d644:	53                   	push   ebx
c001d645:	e8 3a 48 ff ff       	call   c0011e84 <VAS::VAS(bool)>
c001d64a:	83 c4 10             	add    esp,0x10
c001d64d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d651:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001d657:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d65b:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001d665:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d669:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001d66d:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001d673:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d677:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001d67d:	85 c0                	test   eax,eax
c001d67f:	74 42                	je     c001d6c3 <Process::Process(bool, char const*, Process*, char**)+0x11b>
c001d681:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d685:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001d68b:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001d691:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d695:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001d69b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d69f:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001d6a5:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001d6ab:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d6af:	05 0c 01 00 00       	add    eax,0x10c
c001d6b4:	83 ec 08             	sub    esp,0x8
c001d6b7:	52                   	push   edx
c001d6b8:	50                   	push   eax
c001d6b9:	e8 4e 31 fe ff       	call   c000080c <strcpy>
c001d6be:	83 c4 10             	add    esp,0x10
c001d6c1:	eb 63                	jmp    c001d726 <Process::Process(bool, char const*, Process*, char**)+0x17e>
c001d6c3:	c7 44 24 18 c4 02 00 00 	mov    DWORD PTR [esp+0x18],0x2c4
c001d6cb:	83 ec 0c             	sub    esp,0xc
c001d6ce:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001d6d2:	e8 c2 1e ff ff       	call   c000f599 <malloc>
c001d6d7:	83 c4 10             	add    esp,0x10
c001d6da:	89 c3                	mov    ebx,eax
c001d6dc:	83 ec 08             	sub    esp,0x8
c001d6df:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001d6e3:	53                   	push   ebx
c001d6e4:	e8 9d 31 ff ff       	call   c0010886 <VgaText::VgaText(char const*)>
c001d6e9:	83 c4 10             	add    esp,0x10
c001d6ec:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d6f0:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c001d6f6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d6fa:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001d700:	83 ec 0c             	sub    esp,0xc
c001d703:	50                   	push   eax
c001d704:	e8 3c 29 ff ff       	call   c0010045 <addToTerminalCycle(VgaText*)>
c001d709:	83 c4 10             	add    esp,0x10
c001d70c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d710:	05 0c 01 00 00       	add    eax,0x10c
c001d715:	83 ec 08             	sub    esp,0x8
c001d718:	68 a8 bb 02 c0       	push   0xc002bba8
c001d71d:	50                   	push   eax
c001d71e:	e8 e9 30 fe ff       	call   c000080c <strcpy>
c001d723:	83 c4 10             	add    esp,0x10
c001d726:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d72a:	83 c0 0c             	add    eax,0xc
c001d72d:	83 ec 08             	sub    esp,0x8
c001d730:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001d734:	50                   	push   eax
c001d735:	e8 d2 30 fe ff       	call   c000080c <strcpy>
c001d73a:	83 c4 10             	add    esp,0x10
c001d73d:	83 ec 08             	sub    esp,0x8
c001d740:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001d744:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001d748:	e8 1d fc ff ff       	call   c001d36a <Process::addArgs(char**)>
c001d74d:	83 c4 10             	add    esp,0x10
c001d750:	90                   	nop
c001d751:	83 c4 24             	add    esp,0x24
c001d754:	5b                   	pop    ebx
c001d755:	5e                   	pop    esi
c001d756:	c3                   	ret    

c001d757 <taskStartupFunction>:
c001d757:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d75c:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c001d75f:	c3                   	ret    

c001d760 <Semaphore::Semaphore(int)>:
c001d760:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d764:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001d768:	89 10                	mov    DWORD PTR [eax],edx
c001d76a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d76e:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001d775:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d779:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001d780:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d784:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001d78b:	90                   	nop
c001d78c:	c3                   	ret    
c001d78d:	90                   	nop

c001d78e <Mutex::Mutex()>:
c001d78e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d792:	6a 01                	push   0x1
c001d794:	50                   	push   eax
c001d795:	e8 c6 ff ff ff       	call   c001d760 <Semaphore::Semaphore(int)>
c001d79a:	83 c4 08             	add    esp,0x8
c001d79d:	90                   	nop
c001d79e:	c3                   	ret    
c001d79f:	90                   	nop

c001d7a0 <Process::createThread(void (*)(void*), void*, int)>:
c001d7a0:	55                   	push   ebp
c001d7a1:	31 c9                	xor    ecx,ecx
c001d7a3:	57                   	push   edi
c001d7a4:	56                   	push   esi
c001d7a5:	53                   	push   ebx
c001d7a6:	83 ec 1c             	sub    esp,0x1c
c001d7a9:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001d7ad:	66 8b b3 24 05 00 00 	mov    si,WORD PTR [ebx+0x524]
c001d7b4:	89 f2                	mov    edx,esi
c001d7b6:	0f b7 c2             	movzx  eax,dx
c001d7b9:	83 e2 01             	and    edx,0x1
c001d7bc:	74 16                	je     c001d7d4 <Process::createThread(void (*)(void*), void*, int)+0x34>
c001d7be:	d1 f8                	sar    eax,1
c001d7c0:	41                   	inc    ecx
c001d7c1:	89 c2                	mov    edx,eax
c001d7c3:	83 f9 10             	cmp    ecx,0x10
c001d7c6:	75 ee                	jne    c001d7b6 <Process::createThread(void (*)(void*), void*, int)+0x16>
c001d7c8:	83 c4 1c             	add    esp,0x1c
c001d7cb:	31 db                	xor    ebx,ebx
c001d7cd:	89 d8                	mov    eax,ebx
c001d7cf:	5b                   	pop    ebx
c001d7d0:	5e                   	pop    esi
c001d7d1:	5f                   	pop    edi
c001d7d2:	5d                   	pop    ebp
c001d7d3:	c3                   	ret    
c001d7d4:	b8 01 00 00 00       	mov    eax,0x1
c001d7d9:	8d 14 09             	lea    edx,[ecx+ecx*1]
c001d7dc:	d3 e0                	shl    eax,cl
c001d7de:	09 c6                	or     esi,eax
c001d7e0:	8d 04 0a             	lea    eax,[edx+ecx*1]
c001d7e3:	66 89 b3 24 05 00 00 	mov    WORD PTR [ebx+0x524],si
c001d7ea:	89 c6                	mov    esi,eax
c001d7ec:	c1 e6 05             	shl    esi,0x5
c001d7ef:	01 f0                	add    eax,esi
c001d7f1:	01 d8                	add    eax,ebx
c001d7f3:	80 b8 6e 02 00 00 00 	cmp    BYTE PTR [eax+0x26e],0x0
c001d7fa:	75 0a                	jne    c001d806 <Process::createThread(void (*)(void*), void*, int)+0x66>
c001d7fc:	c7 80 65 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x265],0x0
c001d806:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c001d80c:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c001d810:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c001d813:	01 ca                	add    edx,ecx
c001d815:	83 ec 08             	sub    esp,0x8
c001d818:	89 d0                	mov    eax,edx
c001d81a:	c1 e0 05             	shl    eax,0x5
c001d81d:	01 d0                	add    eax,edx
c001d81f:	8a 54 24 44          	mov    dl,BYTE PTR [esp+0x44]
c001d823:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001d827:	01 d8                	add    eax,ebx
c001d829:	89 b8 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edi
c001d82f:	89 a8 51 02 00 00    	mov    DWORD PTR [eax+0x251],ebp
c001d835:	89 88 48 02 00 00    	mov    DWORD PTR [eax+0x248],ecx
c001d83b:	89 98 4c 02 00 00    	mov    DWORD PTR [eax+0x24c],ebx
c001d841:	88 90 50 02 00 00    	mov    BYTE PTR [eax+0x250],dl
c001d847:	89 cd                	mov    ebp,ecx
c001d849:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c001d84d:	f7 dd                	neg    ebp
c001d84f:	c1 e5 15             	shl    ebp,0x15
c001d852:	81 c5 e0 ff ff 01    	add    ebp,0x1ffffe0
c001d858:	89 a8 10 02 00 00    	mov    DWORD PTR [eax+0x210],ebp
c001d85e:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c001d868:	89 88 18 02 00 00    	mov    DWORD PTR [eax+0x218],ecx
c001d86e:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c001d878:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c001d882:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d886:	8d 9c 03 0c 02 00 00 	lea    ebx,[ebx+eax*1+0x20c]
c001d88d:	53                   	push   ebx
c001d88e:	68 e4 0e 03 c0       	push   0xc0030ee4
c001d893:	e8 a8 af 00 00       	call   c0028840 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001d898:	89 d8                	mov    eax,ebx
c001d89a:	83 c4 10             	add    esp,0x10
c001d89d:	83 c4 1c             	add    esp,0x1c
c001d8a0:	5b                   	pop    ebx
c001d8a1:	5e                   	pop    esi
c001d8a2:	5f                   	pop    edi
c001d8a3:	5d                   	pop    ebp
c001d8a4:	c3                   	ret    
c001d8a5:	90                   	nop

c001d8a6 <Process::createUserThread()>:
c001d8a6:	83 ec 0c             	sub    esp,0xc
c001d8a9:	68 80 00 00 00       	push   0x80
c001d8ae:	6a 00                	push   0x0
c001d8b0:	68 6a d2 01 c0       	push   0xc001d26a
c001d8b5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d8b9:	e8 e2 fe ff ff       	call   c001d7a0 <Process::createThread(void (*)(void*), void*, int)>
c001d8be:	83 c4 1c             	add    esp,0x1c
c001d8c1:	c3                   	ret    

c001d8c2 <setupMultitasking(void (*)())>:
c001d8c2:	56                   	push   esi
c001d8c3:	53                   	push   ebx
c001d8c4:	51                   	push   ecx
c001d8c5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d8c9:	eb 10                	jmp    c001d8db <setupMultitasking(void (*)())+0x19>
c001d8cb:	83 ec 0c             	sub    esp,0xc
c001d8ce:	68 e4 0e 03 c0       	push   0xc0030ee4
c001d8d3:	e8 ba ae 00 00       	call   c0028792 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001d8d8:	83 c4 10             	add    esp,0x10
c001d8db:	83 ec 0c             	sub    esp,0xc
c001d8de:	68 e4 0e 03 c0       	push   0xc0030ee4
c001d8e3:	e8 86 ae 00 00       	call   c002876e <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001d8e8:	83 c4 10             	add    esp,0x10
c001d8eb:	84 c0                	test   al,al
c001d8ed:	74 dc                	je     c001d8cb <setupMultitasking(void (*)())+0x9>
c001d8ef:	83 ec 0c             	sub    esp,0xc
c001d8f2:	68 3f 07 00 00       	push   0x73f
c001d8f7:	e8 9d 1c ff ff       	call   c000f599 <malloc>
c001d8fc:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001d903:	89 c3                	mov    ebx,eax
c001d905:	6a 00                	push   0x0
c001d907:	68 ac bb 02 c0       	push   0xc002bbac
c001d90c:	6a 01                	push   0x1
c001d90e:	50                   	push   eax
c001d90f:	e8 94 fc ff ff       	call   c001d5a8 <Process::Process(bool, char const*, Process*, char**)>
c001d914:	83 c4 14             	add    esp,0x14
c001d917:	89 1d f0 0e 03 c0    	mov    DWORD PTR ds:0xc0030ef0,ebx
c001d91d:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c001d923:	e8 2b 2a ff ff       	call   c0010353 <setActiveTerminal(VgaText*)>
c001d928:	66 83 8b 24 05 00 00 01 	or     WORD PTR [ebx+0x524],0x1
c001d930:	c7 83 65 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x265],0x0
c001d93a:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c001d940:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001d943:	c7 83 48 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x248],0x0
c001d94d:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c001d953:	89 9b 4c 02 00 00    	mov    DWORD PTR [ebx+0x24c],ebx
c001d959:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c001d963:	c7 83 44 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x244],0x2faf080
c001d96d:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c001d977:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c001d97d:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c001d987:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c001d98d:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c001d997:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c001d99d:	58                   	pop    eax
c001d99e:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c001d9a4:	5a                   	pop    edx
c001d9a5:	68 a8 bb 02 c0       	push   0xc002bba8
c001d9aa:	50                   	push   eax
c001d9ab:	e8 5c 2e fe ff       	call   c000080c <strcpy>
c001d9b0:	c6 83 50 02 00 00 80 	mov    BYTE PTR [ebx+0x250],0x80
c001d9b7:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001d9bb:	83 c4 14             	add    esp,0x14
c001d9be:	5b                   	pop    ebx
c001d9bf:	5e                   	pop    esi
c001d9c0:	e9 8f 29 fe ff       	jmp    c0000354 <switchToThreadASMFirstTime>

c001d9c5 <schedule()>:
c001d9c5:	a1 c4 0e 03 c0       	mov    eax,ds:0xc0030ec4
c001d9ca:	85 c0                	test   eax,eax
c001d9cc:	74 0b                	je     c001d9d9 <schedule()+0x14>
c001d9ce:	c7 05 c0 0e 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0030ec0,0x1
c001d9d8:	c3                   	ret    
c001d9d9:	53                   	push   ebx
c001d9da:	83 ec 14             	sub    esp,0x14
c001d9dd:	68 e4 0e 03 c0       	push   0xc0030ee4
c001d9e2:	e8 87 ad 00 00       	call   c002876e <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001d9e7:	83 c4 10             	add    esp,0x10
c001d9ea:	84 c0                	test   al,al
c001d9ec:	75 38                	jne    c001da26 <schedule()+0x61>
c001d9ee:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d9f3:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001d9f6:	4a                   	dec    edx
c001d9f7:	74 32                	je     c001da2b <schedule()+0x66>
c001d9f9:	83 ec 0c             	sub    esp,0xc
c001d9fc:	68 e4 0e 03 c0       	push   0xc0030ee4
c001da01:	e8 84 ad 00 00       	call   c002878a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001da06:	c7 04 24 e4 0e 03 c0 	mov    DWORD PTR [esp],0xc0030ee4
c001da0d:	89 c3                	mov    ebx,eax
c001da0f:	e8 7e ad 00 00       	call   c0028792 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001da14:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c001da1b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001da1e:	e8 9d f8 ff ff       	call   c001d2c0 <switchToThread(ThreadControlBlock*)>
c001da23:	83 c4 10             	add    esp,0x10
c001da26:	83 c4 08             	add    esp,0x8
c001da29:	5b                   	pop    ebx
c001da2a:	c3                   	ret    
c001da2b:	83 ec 08             	sub    esp,0x8
c001da2e:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001da35:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001da3b:	68 e4 0e 03 c0       	push   0xc0030ee4
c001da40:	e8 fb ad 00 00       	call   c0028840 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001da45:	83 c4 10             	add    esp,0x10
c001da48:	eb af                	jmp    c001d9f9 <schedule()+0x34>

c001da4a <Semaphore::tryAcquire()>:
c001da4a:	53                   	push   ebx
c001da4b:	83 ec 08             	sub    esp,0x8
c001da4e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001da52:	fa                   	cli    
c001da53:	a1 c8 0e 03 c0       	mov    eax,ds:0xc0030ec8
c001da58:	8d 50 01             	lea    edx,[eax+0x1]
c001da5b:	89 15 c8 0e 03 c0    	mov    DWORD PTR ds:0xc0030ec8,edx
c001da61:	8b 15 c4 0e 03 c0    	mov    edx,DWORD PTR ds:0xc0030ec4
c001da67:	8d 5a 01             	lea    ebx,[edx+0x1]
c001da6a:	89 1d c4 0e 03 c0    	mov    DWORD PTR ds:0xc0030ec4,ebx
c001da70:	8b 59 0c             	mov    ebx,DWORD PTR [ecx+0xc]
c001da73:	3b 19                	cmp    ebx,DWORD PTR [ecx]
c001da75:	7c 2a                	jl     c001daa1 <Semaphore::tryAcquire()+0x57>
c001da77:	89 15 c4 0e 03 c0    	mov    DWORD PTR ds:0xc0030ec4,edx
c001da7d:	85 d2                	test   edx,edx
c001da7f:	75 0a                	jne    c001da8b <Semaphore::tryAcquire()+0x41>
c001da81:	8b 15 c0 0e 03 c0    	mov    edx,DWORD PTR ds:0xc0030ec0
c001da87:	85 d2                	test   edx,edx
c001da89:	75 5b                	jne    c001dae6 <Semaphore::tryAcquire()+0x9c>
c001da8b:	a3 c8 0e 03 c0       	mov    ds:0xc0030ec8,eax
c001da90:	85 c0                	test   eax,eax
c001da92:	74 07                	je     c001da9b <Semaphore::tryAcquire()+0x51>
c001da94:	31 c0                	xor    eax,eax
c001da96:	83 c4 08             	add    esp,0x8
c001da99:	5b                   	pop    ebx
c001da9a:	c3                   	ret    
c001da9b:	fb                   	sti    
c001da9c:	83 c4 08             	add    esp,0x8
c001da9f:	5b                   	pop    ebx
c001daa0:	c3                   	ret    
c001daa1:	43                   	inc    ebx
c001daa2:	89 15 c4 0e 03 c0    	mov    DWORD PTR ds:0xc0030ec4,edx
c001daa8:	89 59 0c             	mov    DWORD PTR [ecx+0xc],ebx
c001daab:	85 d2                	test   edx,edx
c001daad:	75 1f                	jne    c001dace <Semaphore::tryAcquire()+0x84>
c001daaf:	8b 0d c0 0e 03 c0    	mov    ecx,DWORD PTR ds:0xc0030ec0
c001dab5:	85 c9                	test   ecx,ecx
c001dab7:	74 15                	je     c001dace <Semaphore::tryAcquire()+0x84>
c001dab9:	c7 05 c0 0e 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030ec0,0x0
c001dac3:	e8 fd fe ff ff       	call   c001d9c5 <schedule()>
c001dac8:	a1 c8 0e 03 c0       	mov    eax,ds:0xc0030ec8
c001dacd:	48                   	dec    eax
c001dace:	a3 c8 0e 03 c0       	mov    ds:0xc0030ec8,eax
c001dad3:	85 c0                	test   eax,eax
c001dad5:	75 08                	jne    c001dadf <Semaphore::tryAcquire()+0x95>
c001dad7:	fb                   	sti    
c001dad8:	b0 01                	mov    al,0x1
c001dada:	83 c4 08             	add    esp,0x8
c001dadd:	5b                   	pop    ebx
c001dade:	c3                   	ret    
c001dadf:	b0 01                	mov    al,0x1
c001dae1:	83 c4 08             	add    esp,0x8
c001dae4:	5b                   	pop    ebx
c001dae5:	c3                   	ret    
c001dae6:	c7 05 c0 0e 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030ec0,0x0
c001daf0:	e8 d0 fe ff ff       	call   c001d9c5 <schedule()>
c001daf5:	a1 c8 0e 03 c0       	mov    eax,ds:0xc0030ec8
c001dafa:	48                   	dec    eax
c001dafb:	a3 c8 0e 03 c0       	mov    ds:0xc0030ec8,eax
c001db00:	85 c0                	test   eax,eax
c001db02:	75 90                	jne    c001da94 <Semaphore::tryAcquire()+0x4a>
c001db04:	eb 95                	jmp    c001da9b <Semaphore::tryAcquire()+0x51>

c001db06 <Semaphore::assertLocked(char const*)>:
c001db06:	83 ec 0c             	sub    esp,0xc
c001db09:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001db0d:	fa                   	cli    
c001db0e:	ff 05 c8 0e 03 c0    	inc    DWORD PTR ds:0xc0030ec8
c001db14:	a1 c4 0e 03 c0       	mov    eax,ds:0xc0030ec4
c001db19:	8d 48 01             	lea    ecx,[eax+0x1]
c001db1c:	89 0d c4 0e 03 c0    	mov    DWORD PTR ds:0xc0030ec4,ecx
c001db22:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001db24:	39 4a 0c             	cmp    DWORD PTR [edx+0xc],ecx
c001db27:	7c 24                	jl     c001db4d <Semaphore::assertLocked(char const*)+0x47>
c001db29:	a3 c4 0e 03 c0       	mov    ds:0xc0030ec4,eax
c001db2e:	85 c0                	test   eax,eax
c001db30:	75 09                	jne    c001db3b <Semaphore::assertLocked(char const*)+0x35>
c001db32:	a1 c0 0e 03 c0       	mov    eax,ds:0xc0030ec0
c001db37:	85 c0                	test   eax,eax
c001db39:	75 29                	jne    c001db64 <Semaphore::assertLocked(char const*)+0x5e>
c001db3b:	a1 c8 0e 03 c0       	mov    eax,ds:0xc0030ec8
c001db40:	48                   	dec    eax
c001db41:	a3 c8 0e 03 c0       	mov    ds:0xc0030ec8,eax
c001db46:	75 01                	jne    c001db49 <Semaphore::assertLocked(char const*)+0x43>
c001db48:	fb                   	sti    
c001db49:	83 c4 0c             	add    esp,0xc
c001db4c:	c3                   	ret    
c001db4d:	83 ec 0c             	sub    esp,0xc
c001db50:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001db54:	e8 dc c2 ff ff       	call   c0019e35 <Krnl::panic(char const*)>
c001db59:	a1 c4 0e 03 c0       	mov    eax,ds:0xc0030ec4
c001db5e:	83 c4 10             	add    esp,0x10
c001db61:	48                   	dec    eax
c001db62:	eb c5                	jmp    c001db29 <Semaphore::assertLocked(char const*)+0x23>
c001db64:	c7 05 c0 0e 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030ec0,0x0
c001db6e:	e8 52 fe ff ff       	call   c001d9c5 <schedule()>
c001db73:	eb c6                	jmp    c001db3b <Semaphore::assertLocked(char const*)+0x35>

c001db75 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c001db75:	83 ec 0c             	sub    esp,0xc
c001db78:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001db7d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001db81:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001db84:	e8 3c fe ff ff       	call   c001d9c5 <schedule()>
c001db89:	a1 c8 0e 03 c0       	mov    eax,ds:0xc0030ec8
c001db8e:	48                   	dec    eax
c001db8f:	a3 c8 0e 03 c0       	mov    ds:0xc0030ec8,eax
c001db94:	75 01                	jne    c001db97 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x22>
c001db96:	fb                   	sti    
c001db97:	83 c4 0c             	add    esp,0xc
c001db9a:	c3                   	ret    

c001db9b <blockTask(TaskState)>:
c001db9b:	83 ec 0c             	sub    esp,0xc
c001db9e:	fa                   	cli    
c001db9f:	ff 05 c8 0e 03 c0    	inc    DWORD PTR ds:0xc0030ec8
c001dba5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001dba9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001dbae:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001dbb1:	e8 0f fe ff ff       	call   c001d9c5 <schedule()>
c001dbb6:	a1 c8 0e 03 c0       	mov    eax,ds:0xc0030ec8
c001dbbb:	48                   	dec    eax
c001dbbc:	a3 c8 0e 03 c0       	mov    ds:0xc0030ec8,eax
c001dbc1:	75 01                	jne    c001dbc4 <blockTask(TaskState)+0x29>
c001dbc3:	fb                   	sti    
c001dbc4:	83 c4 0c             	add    esp,0xc
c001dbc7:	c3                   	ret    

c001dbc8 <waitTask(int, int*, int)>:
c001dbc8:	83 ec 18             	sub    esp,0x18
c001dbcb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001dbd0:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001dbd4:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c001dbd7:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001dbdb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001dbe0:	89 50 4d             	mov    DWORD PTR [eax+0x4d],edx
c001dbe3:	6a 07                	push   0x7
c001dbe5:	e8 b1 ff ff ff       	call   c001db9b <blockTask(TaskState)>
c001dbea:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001dbef:	83 c4 10             	add    esp,0x10
c001dbf2:	8b 50 4d             	mov    edx,DWORD PTR [eax+0x4d]
c001dbf5:	85 d2                	test   edx,edx
c001dbf7:	74 0a                	je     c001dc03 <waitTask(int, int*, int)+0x3b>
c001dbf9:	8b 40 51             	mov    eax,DWORD PTR [eax+0x51]
c001dbfc:	89 02                	mov    DWORD PTR [edx],eax
c001dbfe:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001dc03:	8b 40 49             	mov    eax,DWORD PTR [eax+0x49]
c001dc06:	83 c4 0c             	add    esp,0xc
c001dc09:	c3                   	ret    

c001dc0a <nanoSleepUntil(unsigned long long)>:
c001dc0a:	83 ec 0c             	sub    esp,0xc
c001dc0d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dc11:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001dc15:	3b 05 10 e0 02 c0    	cmp    eax,DWORD PTR ds:0xc002e010
c001dc1b:	89 d1                	mov    ecx,edx
c001dc1d:	1b 0d 14 e0 02 c0    	sbb    ecx,DWORD PTR ds:0xc002e014
c001dc23:	73 04                	jae    c001dc29 <nanoSleepUntil(unsigned long long)+0x1f>
c001dc25:	83 c4 0c             	add    esp,0xc
c001dc28:	c3                   	ret    
c001dc29:	fa                   	cli    
c001dc2a:	ff 05 c8 0e 03 c0    	inc    DWORD PTR ds:0xc0030ec8
c001dc30:	83 ec 08             	sub    esp,0x8
c001dc33:	ff 05 c4 0e 03 c0    	inc    DWORD PTR ds:0xc0030ec4
c001dc39:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001dc3f:	89 41 2c             	mov    DWORD PTR [ecx+0x2c],eax
c001dc42:	89 51 30             	mov    DWORD PTR [ecx+0x30],edx
c001dc45:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001dc4b:	68 d8 0e 03 c0       	push   0xc0030ed8
c001dc50:	e8 eb ab 00 00       	call   c0028840 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001dc55:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c001dc5c:	e8 3a ff ff ff       	call   c001db9b <blockTask(TaskState)>
c001dc61:	a1 c4 0e 03 c0       	mov    eax,ds:0xc0030ec4
c001dc66:	83 c4 10             	add    esp,0x10
c001dc69:	48                   	dec    eax
c001dc6a:	a3 c4 0e 03 c0       	mov    ds:0xc0030ec4,eax
c001dc6f:	85 c0                	test   eax,eax
c001dc71:	75 09                	jne    c001dc7c <nanoSleepUntil(unsigned long long)+0x72>
c001dc73:	a1 c0 0e 03 c0       	mov    eax,ds:0xc0030ec0
c001dc78:	85 c0                	test   eax,eax
c001dc7a:	75 12                	jne    c001dc8e <nanoSleepUntil(unsigned long long)+0x84>
c001dc7c:	a1 c8 0e 03 c0       	mov    eax,ds:0xc0030ec8
c001dc81:	48                   	dec    eax
c001dc82:	a3 c8 0e 03 c0       	mov    ds:0xc0030ec8,eax
c001dc87:	75 9c                	jne    c001dc25 <nanoSleepUntil(unsigned long long)+0x1b>
c001dc89:	fb                   	sti    
c001dc8a:	83 c4 0c             	add    esp,0xc
c001dc8d:	c3                   	ret    
c001dc8e:	c7 05 c0 0e 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030ec0,0x0
c001dc98:	e8 28 fd ff ff       	call   c001d9c5 <schedule()>
c001dc9d:	eb dd                	jmp    c001dc7c <nanoSleepUntil(unsigned long long)+0x72>

c001dc9f <nanoSleep(unsigned long long)>:
c001dc9f:	a1 10 e0 02 c0       	mov    eax,ds:0xc002e010
c001dca4:	8b 15 14 e0 02 c0    	mov    edx,DWORD PTR ds:0xc002e014
c001dcaa:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c001dcae:	11 54 24 08          	adc    DWORD PTR [esp+0x8],edx
c001dcb2:	e9 53 ff ff ff       	jmp    c001dc0a <nanoSleepUntil(unsigned long long)>

c001dcb7 <sleep(unsigned long long)>:
c001dcb7:	69 4c 24 08 00 ca 9a 3b 	imul   ecx,DWORD PTR [esp+0x8],0x3b9aca00
c001dcbf:	b8 00 ca 9a 3b       	mov    eax,0x3b9aca00
c001dcc4:	f7 64 24 04          	mul    DWORD PTR [esp+0x4]
c001dcc8:	01 ca                	add    edx,ecx
c001dcca:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001dcce:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001dcd2:	eb cb                	jmp    c001dc9f <nanoSleep(unsigned long long)>

c001dcd4 <Semaphore::acquire()>:
c001dcd4:	83 ec 0c             	sub    esp,0xc
c001dcd7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001dcdb:	fa                   	cli    
c001dcdc:	a1 c4 0e 03 c0       	mov    eax,ds:0xc0030ec4
c001dce1:	ff 05 c8 0e 03 c0    	inc    DWORD PTR ds:0xc0030ec8
c001dce7:	8d 48 01             	lea    ecx,[eax+0x1]
c001dcea:	89 0d c4 0e 03 c0    	mov    DWORD PTR ds:0xc0030ec4,ecx
c001dcf0:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c001dcf3:	3b 0a                	cmp    ecx,DWORD PTR [edx]
c001dcf5:	7d 28                	jge    c001dd1f <Semaphore::acquire()+0x4b>
c001dcf7:	41                   	inc    ecx
c001dcf8:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c001dcfb:	a3 c4 0e 03 c0       	mov    ds:0xc0030ec4,eax
c001dd00:	85 c0                	test   eax,eax
c001dd02:	75 09                	jne    c001dd0d <Semaphore::acquire()+0x39>
c001dd04:	a1 c0 0e 03 c0       	mov    eax,ds:0xc0030ec0
c001dd09:	85 c0                	test   eax,eax
c001dd0b:	75 4e                	jne    c001dd5b <Semaphore::acquire()+0x87>
c001dd0d:	a1 c8 0e 03 c0       	mov    eax,ds:0xc0030ec8
c001dd12:	48                   	dec    eax
c001dd13:	a3 c8 0e 03 c0       	mov    ds:0xc0030ec8,eax
c001dd18:	75 01                	jne    c001dd1b <Semaphore::acquire()+0x47>
c001dd1a:	fb                   	sti    
c001dd1b:	83 c4 0c             	add    esp,0xc
c001dd1e:	c3                   	ret    
c001dd1f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001dd24:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001dd2b:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c001dd2e:	85 c9                	test   ecx,ecx
c001dd30:	74 3a                	je     c001dd6c <Semaphore::acquire()+0x98>
c001dd32:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c001dd35:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001dd3b:	89 48 20             	mov    DWORD PTR [eax+0x20],ecx
c001dd3e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001dd43:	83 ec 0c             	sub    esp,0xc
c001dd46:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c001dd49:	6a 05                	push   0x5
c001dd4b:	e8 4b fe ff ff       	call   c001db9b <blockTask(TaskState)>
c001dd50:	a1 c4 0e 03 c0       	mov    eax,ds:0xc0030ec4
c001dd55:	83 c4 10             	add    esp,0x10
c001dd58:	48                   	dec    eax
c001dd59:	eb a0                	jmp    c001dcfb <Semaphore::acquire()+0x27>
c001dd5b:	c7 05 c0 0e 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030ec0,0x0
c001dd65:	e8 5b fc ff ff       	call   c001d9c5 <schedule()>
c001dd6a:	eb a1                	jmp    c001dd0d <Semaphore::acquire()+0x39>
c001dd6c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001dd71:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001dd74:	eb c8                	jmp    c001dd3e <Semaphore::acquire()+0x6a>

c001dd76 <taskReturned>:
c001dd76:	83 ec 18             	sub    esp,0x18
c001dd79:	68 28 bc 02 c0       	push   0xc002bc28
c001dd7e:	e8 b2 c0 ff ff       	call   c0019e35 <Krnl::panic(char const*)>
c001dd83:	83 c4 10             	add    esp,0x10
c001dd86:	83 ec 0c             	sub    esp,0xc
c001dd89:	6a 02                	push   0x2
c001dd8b:	e8 0b fe ff ff       	call   c001db9b <blockTask(TaskState)>
c001dd90:	fa                   	cli    
c001dd91:	ff 05 c8 0e 03 c0    	inc    DWORD PTR ds:0xc0030ec8
c001dd97:	e8 29 fc ff ff       	call   c001d9c5 <schedule()>
c001dd9c:	a1 c8 0e 03 c0       	mov    eax,ds:0xc0030ec8
c001dda1:	83 c4 10             	add    esp,0x10
c001dda4:	48                   	dec    eax
c001dda5:	a3 c8 0e 03 c0       	mov    ds:0xc0030ec8,eax
c001ddaa:	85 c0                	test   eax,eax
c001ddac:	75 d8                	jne    c001dd86 <taskReturned+0x10>
c001ddae:	fb                   	sti    
c001ddaf:	eb d5                	jmp    c001dd86 <taskReturned+0x10>

c001ddb1 <Thr::processFromPID(int)>:
c001ddb1:	57                   	push   edi
c001ddb2:	56                   	push   esi
c001ddb3:	53                   	push   ebx
c001ddb4:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001ddb8:	fa                   	cli    
c001ddb9:	ff 05 c8 0e 03 c0    	inc    DWORD PTR ds:0xc0030ec8
c001ddbf:	83 ec 0c             	sub    esp,0xc
c001ddc2:	68 e4 0e 03 c0       	push   0xc0030ee4
c001ddc7:	e8 be a9 00 00       	call   c002878a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001ddcc:	83 c4 10             	add    esp,0x10
c001ddcf:	89 c7                	mov    edi,eax
c001ddd1:	eb 14                	jmp    c001dde7 <Thr::processFromPID(int)+0x36>
c001ddd3:	83 ec 0c             	sub    esp,0xc
c001ddd6:	68 e4 0e 03 c0       	push   0xc0030ee4
c001dddb:	e8 aa a9 00 00       	call   c002878a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001dde0:	83 c4 10             	add    esp,0x10
c001dde3:	39 f8                	cmp    eax,edi
c001dde5:	74 49                	je     c001de30 <Thr::processFromPID(int)+0x7f>
c001dde7:	83 ec 0c             	sub    esp,0xc
c001ddea:	68 e4 0e 03 c0       	push   0xc0030ee4
c001ddef:	e8 96 a9 00 00       	call   c002878a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001ddf4:	c7 04 24 e4 0e 03 c0 	mov    DWORD PTR [esp],0xc0030ee4
c001ddfb:	89 c3                	mov    ebx,eax
c001ddfd:	e8 90 a9 00 00       	call   c0028792 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001de02:	58                   	pop    eax
c001de03:	5a                   	pop    edx
c001de04:	53                   	push   ebx
c001de05:	68 e4 0e 03 c0       	push   0xc0030ee4
c001de0a:	e8 31 aa 00 00       	call   c0028840 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001de0f:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001de12:	83 c4 10             	add    esp,0x10
c001de15:	39 30                	cmp    DWORD PTR [eax],esi
c001de17:	75 ba                	jne    c001ddd3 <Thr::processFromPID(int)+0x22>
c001de19:	a1 c8 0e 03 c0       	mov    eax,ds:0xc0030ec8
c001de1e:	48                   	dec    eax
c001de1f:	a3 c8 0e 03 c0       	mov    ds:0xc0030ec8,eax
c001de24:	74 07                	je     c001de2d <Thr::processFromPID(int)+0x7c>
c001de26:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001de29:	5b                   	pop    ebx
c001de2a:	5e                   	pop    esi
c001de2b:	5f                   	pop    edi
c001de2c:	c3                   	ret    
c001de2d:	fb                   	sti    
c001de2e:	eb f6                	jmp    c001de26 <Thr::processFromPID(int)+0x75>
c001de30:	a1 c8 0e 03 c0       	mov    eax,ds:0xc0030ec8
c001de35:	48                   	dec    eax
c001de36:	a3 c8 0e 03 c0       	mov    ds:0xc0030ec8,eax
c001de3b:	75 05                	jne    c001de42 <Thr::processFromPID(int)+0x91>
c001de3d:	fb                   	sti    
c001de3e:	5b                   	pop    ebx
c001de3f:	5e                   	pop    esi
c001de40:	5f                   	pop    edi
c001de41:	c3                   	ret    
c001de42:	5b                   	pop    ebx
c001de43:	31 c0                	xor    eax,eax
c001de45:	5e                   	pop    esi
c001de46:	5f                   	pop    edi
c001de47:	c3                   	ret    

c001de48 <unblockTask(ThreadControlBlock*)>:
c001de48:	53                   	push   ebx
c001de49:	83 ec 08             	sub    esp,0x8
c001de4c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001de50:	fa                   	cli    
c001de51:	ff 05 c8 0e 03 c0    	inc    DWORD PTR ds:0xc0030ec8
c001de57:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001de5a:	85 c0                	test   eax,eax
c001de5c:	74 5a                	je     c001deb8 <unblockTask(ThreadControlBlock*)+0x70>
c001de5e:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001de61:	48                   	dec    eax
c001de62:	74 31                	je     c001de95 <unblockTask(ThreadControlBlock*)+0x4d>
c001de64:	83 ec 0c             	sub    esp,0xc
c001de67:	68 e4 0e 03 c0       	push   0xc0030ee4
c001de6c:	e8 19 a9 00 00       	call   c002878a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001de71:	83 c4 10             	add    esp,0x10
c001de74:	85 c0                	test   eax,eax
c001de76:	75 17                	jne    c001de8f <unblockTask(ThreadControlBlock*)+0x47>
c001de78:	eb 50                	jmp    c001deca <unblockTask(ThreadControlBlock*)+0x82>
c001de7a:	83 ec 08             	sub    esp,0x8
c001de7d:	50                   	push   eax
c001de7e:	68 e4 0e 03 c0       	push   0xc0030ee4
c001de83:	e8 8a ac 00 00       	call   c0028b12 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c001de88:	83 c4 10             	add    esp,0x10
c001de8b:	85 c0                	test   eax,eax
c001de8d:	74 3b                	je     c001deca <unblockTask(ThreadControlBlock*)+0x82>
c001de8f:	39 c3                	cmp    ebx,eax
c001de91:	75 e7                	jne    c001de7a <unblockTask(ThreadControlBlock*)+0x32>
c001de93:	eb 10                	jmp    c001dea5 <unblockTask(ThreadControlBlock*)+0x5d>
c001de95:	83 ec 0c             	sub    esp,0xc
c001de98:	68 ca bb 02 c0       	push   0xc002bbca
c001de9d:	e8 27 48 ff ff       	call   c00126c9 <Dbg::kprintf(char const*, ...)>
c001dea2:	83 c4 10             	add    esp,0x10
c001dea5:	a1 c8 0e 03 c0       	mov    eax,ds:0xc0030ec8
c001deaa:	48                   	dec    eax
c001deab:	a3 c8 0e 03 c0       	mov    ds:0xc0030ec8,eax
c001deb0:	75 01                	jne    c001deb3 <unblockTask(ThreadControlBlock*)+0x6b>
c001deb2:	fb                   	sti    
c001deb3:	83 c4 08             	add    esp,0x8
c001deb6:	5b                   	pop    ebx
c001deb7:	c3                   	ret    
c001deb8:	83 ec 0c             	sub    esp,0xc
c001debb:	68 b3 bb 02 c0       	push   0xc002bbb3
c001dec0:	e8 04 48 ff ff       	call   c00126c9 <Dbg::kprintf(char const*, ...)>
c001dec5:	83 c4 10             	add    esp,0x10
c001dec8:	eb db                	jmp    c001dea5 <unblockTask(ThreadControlBlock*)+0x5d>
c001deca:	83 ec 08             	sub    esp,0x8
c001decd:	53                   	push   ebx
c001dece:	68 e4 0e 03 c0       	push   0xc0030ee4
c001ded3:	e8 68 a9 00 00       	call   c0028840 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001ded8:	83 c4 10             	add    esp,0x10
c001dedb:	eb c8                	jmp    c001dea5 <unblockTask(ThreadControlBlock*)+0x5d>

c001dedd <cleanupTerminatedTask(ThreadControlBlock*)>:
c001dedd:	55                   	push   ebp
c001dede:	57                   	push   edi
c001dedf:	56                   	push   esi
c001dee0:	53                   	push   ebx
c001dee1:	83 ec 1c             	sub    esp,0x1c
c001dee4:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001dee8:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001deeb:	8b b8 36 05 00 00    	mov    edi,DWORD PTR [eax+0x536]
c001def1:	85 ff                	test   edi,edi
c001def3:	7e 20                	jle    c001df15 <cleanupTerminatedTask(ThreadControlBlock*)+0x38>
c001def5:	31 f6                	xor    esi,esi
c001def7:	83 ec 0c             	sub    esp,0xc
c001defa:	ff b4 b0 3a 05 00 00 	push   DWORD PTR [eax+esi*4+0x53a]
c001df01:	46                   	inc    esi
c001df02:	e8 a2 16 ff ff       	call   c000f5a9 <free>
c001df07:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001df0a:	83 c4 10             	add    esp,0x10
c001df0d:	39 b0 36 05 00 00    	cmp    DWORD PTR [eax+0x536],esi
c001df13:	7f e2                	jg     c001def7 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a>
c001df15:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001df1f:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001df24:	8b 4b 3c             	mov    ecx,DWORD PTR [ebx+0x3c]
c001df27:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c001df2a:	d3 c0                	rol    eax,cl
c001df2c:	66 21 82 24 05 00 00 	and    WORD PTR [edx+0x524],ax
c001df33:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001df36:	89 f7                	mov    edi,esi
c001df38:	66 83 be 24 05 00 00 00 	cmp    WORD PTR [esi+0x524],0x0
c001df40:	0f 85 64 01 00 00    	jne    c001e0aa <cleanupTerminatedTask(ThreadControlBlock*)+0x1cd>
c001df46:	8b ae 3a 07 00 00    	mov    ebp,DWORD PTR [esi+0x73a]
c001df4c:	85 ed                	test   ebp,ebp
c001df4e:	74 1b                	je     c001df6b <cleanupTerminatedTask(ThreadControlBlock*)+0x8e>
c001df50:	83 ec 0c             	sub    esp,0xc
c001df53:	55                   	push   ebp
c001df54:	e8 81 bc ff ff       	call   c0019bda <EnvVarContainer::~EnvVarContainer()>
c001df59:	59                   	pop    ecx
c001df5a:	5e                   	pop    esi
c001df5b:	6a 0c                	push   0xc
c001df5d:	55                   	push   ebp
c001df5e:	e8 8e 46 ff ff       	call   c00125f1 <operator delete(void*, unsigned long)>
c001df63:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001df66:	83 c4 10             	add    esp,0x10
c001df69:	89 f7                	mov    edi,esi
c001df6b:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001df71:	85 c0                	test   eax,eax
c001df73:	0f 84 aa 00 00 00    	je     c001e023 <cleanupTerminatedTask(ThreadControlBlock*)+0x146>
c001df79:	8b 4b 55             	mov    ecx,DWORD PTR [ebx+0x55]
c001df7c:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001df80:	31 c9                	xor    ecx,ecx
c001df82:	eb 10                	jmp    c001df94 <cleanupTerminatedTask(ThreadControlBlock*)+0xb7>
c001df84:	41                   	inc    ecx
c001df85:	83 f9 10             	cmp    ecx,0x10
c001df88:	0f 84 95 00 00 00    	je     c001e023 <cleanupTerminatedTask(ThreadControlBlock*)+0x146>
c001df8e:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001df94:	0f b7 90 24 05 00 00 	movzx  edx,WORD PTR [eax+0x524]
c001df9b:	d3 fa                	sar    edx,cl
c001df9d:	83 e2 01             	and    edx,0x1
c001dfa0:	74 e2                	je     c001df84 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001dfa2:	8d 14 09             	lea    edx,[ecx+ecx*1]
c001dfa5:	01 ca                	add    edx,ecx
c001dfa7:	89 d5                	mov    ebp,edx
c001dfa9:	c1 e5 05             	shl    ebp,0x5
c001dfac:	01 ea                	add    edx,ebp
c001dfae:	01 d0                	add    eax,edx
c001dfb0:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c001dfb6:	83 fd 07             	cmp    ebp,0x7
c001dfb9:	75 c9                	jne    c001df84 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001dfbb:	05 40 02 00 00       	add    eax,0x240
c001dfc0:	8b 68 15             	mov    ebp,DWORD PTR [eax+0x15]
c001dfc3:	83 fd ff             	cmp    ebp,0xffffffff
c001dfc6:	0f 8c e6 00 00 00    	jl     c001e0b2 <cleanupTerminatedTask(ThreadControlBlock*)+0x1d5>
c001dfcc:	0f 84 97 01 00 00    	je     c001e169 <cleanupTerminatedTask(ThreadControlBlock*)+0x28c>
c001dfd2:	85 ed                	test   ebp,ebp
c001dfd4:	0f 84 7e 01 00 00    	je     c001e158 <cleanupTerminatedTask(ThreadControlBlock*)+0x27b>
c001dfda:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c001dfdc:	75 a6                	jne    c001df84 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001dfde:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001dfe4:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001dfe8:	01 d0                	add    eax,edx
c001dfea:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c001dfee:	83 ec 0c             	sub    esp,0xc
c001dff1:	89 b8 5d 02 00 00    	mov    DWORD PTR [eax+0x25d],edi
c001dff7:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001dffa:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001e000:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c001e007:	50                   	push   eax
c001e008:	e8 3b fe ff ff       	call   c001de48 <unblockTask(ThreadControlBlock*)>
c001e00d:	83 c4 10             	add    esp,0x10
c001e010:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e013:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e017:	89 f7                	mov    edi,esi
c001e019:	41                   	inc    ecx
c001e01a:	83 f9 10             	cmp    ecx,0x10
c001e01d:	0f 85 6b ff ff ff    	jne    c001df8e <cleanupTerminatedTask(ThreadControlBlock*)+0xb1>
c001e023:	8b 86 26 05 00 00    	mov    eax,DWORD PTR [esi+0x526]
c001e029:	85 c0                	test   eax,eax
c001e02b:	74 5d                	je     c001e08a <cleanupTerminatedTask(ThreadControlBlock*)+0x1ad>
c001e02d:	8b 96 2a 05 00 00    	mov    edx,DWORD PTR [esi+0x52a]
c001e033:	3b 82 26 05 00 00    	cmp    eax,DWORD PTR [edx+0x526]
c001e039:	74 4f                	je     c001e08a <cleanupTerminatedTask(ThreadControlBlock*)+0x1ad>
c001e03b:	83 ec 0c             	sub    esp,0xc
c001e03e:	68 e4 0e 03 c0       	push   0xc0030ee4
c001e043:	e8 42 a7 00 00       	call   c002878a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e048:	c7 04 24 e4 0e 03 c0 	mov    DWORD PTR [esp],0xc0030ee4
c001e04f:	89 c7                	mov    edi,eax
c001e051:	e8 18 a7 00 00       	call   c002876e <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001e056:	83 c4 10             	add    esp,0x10
c001e059:	84 c0                	test   al,al
c001e05b:	0f 84 c2 00 00 00    	je     c001e123 <cleanupTerminatedTask(ThreadControlBlock*)+0x246>
c001e061:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e064:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001e06a:	85 d2                	test   edx,edx
c001e06c:	74 0f                	je     c001e07d <cleanupTerminatedTask(ThreadControlBlock*)+0x1a0>
c001e06e:	83 ec 0c             	sub    esp,0xc
c001e071:	8b 02                	mov    eax,DWORD PTR [edx]
c001e073:	52                   	push   edx
c001e074:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001e077:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e07a:	83 c4 10             	add    esp,0x10
c001e07d:	c7 80 26 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x526],0x0
c001e087:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c001e08a:	8b 9f 32 05 00 00    	mov    ebx,DWORD PTR [edi+0x532]
c001e090:	85 db                	test   ebx,ebx
c001e092:	74 16                	je     c001e0aa <cleanupTerminatedTask(ThreadControlBlock*)+0x1cd>
c001e094:	83 ec 0c             	sub    esp,0xc
c001e097:	53                   	push   ebx
c001e098:	e8 c1 37 ff ff       	call   c001185e <VAS::~VAS()>
c001e09d:	58                   	pop    eax
c001e09e:	5a                   	pop    edx
c001e09f:	6a 14                	push   0x14
c001e0a1:	53                   	push   ebx
c001e0a2:	e8 4a 45 ff ff       	call   c00125f1 <operator delete(void*, unsigned long)>
c001e0a7:	83 c4 10             	add    esp,0x10
c001e0aa:	83 c4 1c             	add    esp,0x1c
c001e0ad:	5b                   	pop    ebx
c001e0ae:	5e                   	pop    esi
c001e0af:	5f                   	pop    edi
c001e0b0:	5d                   	pop    ebp
c001e0b1:	c3                   	ret    
c001e0b2:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e0b6:	83 ec 0c             	sub    esp,0xc
c001e0b9:	68 5c bc 02 c0       	push   0xc002bc5c
c001e0be:	e8 72 bd ff ff       	call   c0019e35 <Krnl::panic(char const*)>
c001e0c3:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e0c6:	83 c4 10             	add    esp,0x10
c001e0c9:	89 f7                	mov    edi,esi
c001e0cb:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e0cf:	e9 b0 fe ff ff       	jmp    c001df84 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e0d4:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001e0da:	39 82 26 05 00 00    	cmp    DWORD PTR [edx+0x526],eax
c001e0e0:	75 1c                	jne    c001e0fe <cleanupTerminatedTask(ThreadControlBlock*)+0x221>
c001e0e2:	83 ec 0c             	sub    esp,0xc
c001e0e5:	68 c4 bc 02 c0       	push   0xc002bcc4
c001e0ea:	e8 da 45 ff ff       	call   c00126c9 <Dbg::kprintf(char const*, ...)>
c001e0ef:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001e0f6:	e8 a0 fa ff ff       	call   c001db9b <blockTask(TaskState)>
c001e0fb:	83 c4 10             	add    esp,0x10
c001e0fe:	83 ec 08             	sub    esp,0x8
c001e101:	56                   	push   esi
c001e102:	68 e4 0e 03 c0       	push   0xc0030ee4
c001e107:	e8 34 a7 00 00       	call   c0028840 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e10c:	c7 04 24 e4 0e 03 c0 	mov    DWORD PTR [esp],0xc0030ee4
c001e113:	e8 72 a6 00 00       	call   c002878a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e118:	83 c4 10             	add    esp,0x10
c001e11b:	39 f8                	cmp    eax,edi
c001e11d:	0f 84 3e ff ff ff    	je     c001e061 <cleanupTerminatedTask(ThreadControlBlock*)+0x184>
c001e123:	83 ec 0c             	sub    esp,0xc
c001e126:	68 e4 0e 03 c0       	push   0xc0030ee4
c001e12b:	e8 5a a6 00 00       	call   c002878a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e130:	c7 04 24 e4 0e 03 c0 	mov    DWORD PTR [esp],0xc0030ee4
c001e137:	89 c6                	mov    esi,eax
c001e139:	e8 54 a6 00 00       	call   c0028792 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e13e:	83 c4 10             	add    esp,0x10
c001e141:	39 f3                	cmp    ebx,esi
c001e143:	74 b9                	je     c001e0fe <cleanupTerminatedTask(ThreadControlBlock*)+0x221>
c001e145:	8b 56 40             	mov    edx,DWORD PTR [esi+0x40]
c001e148:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e14b:	39 82 2a 05 00 00    	cmp    DWORD PTR [edx+0x52a],eax
c001e151:	75 ab                	jne    c001e0fe <cleanupTerminatedTask(ThreadControlBlock*)+0x221>
c001e153:	e9 7c ff ff ff       	jmp    c001e0d4 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f7>
c001e158:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e15c:	83 ec 0c             	sub    esp,0xc
c001e15f:	68 90 bc 02 c0       	push   0xc002bc90
c001e164:	e9 55 ff ff ff       	jmp    c001e0be <cleanupTerminatedTask(ThreadControlBlock*)+0x1e1>
c001e169:	8b 36                	mov    esi,DWORD PTR [esi]
c001e16b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e16f:	89 70 15             	mov    DWORD PTR [eax+0x15],esi
c001e172:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e175:	8b b8 2a 05 00 00    	mov    edi,DWORD PTR [eax+0x52a]
c001e17b:	01 d7                	add    edi,edx
c001e17d:	89 f8                	mov    eax,edi
c001e17f:	e9 66 fe ff ff       	jmp    c001dfea <cleanupTerminatedTask(ThreadControlBlock*)+0x10d>

c001e184 <cleanerTaskFunction(void*)>:
c001e184:	53                   	push   ebx
c001e185:	83 ec 08             	sub    esp,0x8
c001e188:	a1 c8 0e 03 c0       	mov    eax,ds:0xc0030ec8
c001e18d:	48                   	dec    eax
c001e18e:	a3 c8 0e 03 c0       	mov    ds:0xc0030ec8,eax
c001e193:	75 01                	jne    c001e196 <cleanerTaskFunction(void*)+0x12>
c001e195:	fb                   	sti    
c001e196:	fa                   	cli    
c001e197:	a1 c8 0e 03 c0       	mov    eax,ds:0xc0030ec8
c001e19c:	80 3d ac 0e 03 c0 00 	cmp    BYTE PTR ds:0xc0030eac,0x0
c001e1a3:	8d 50 01             	lea    edx,[eax+0x1]
c001e1a6:	89 15 c8 0e 03 c0    	mov    DWORD PTR ds:0xc0030ec8,edx
c001e1ac:	0f 84 a1 00 00 00    	je     c001e253 <cleanerTaskFunction(void*)+0xcf>
c001e1b2:	a3 c8 0e 03 c0       	mov    ds:0xc0030ec8,eax
c001e1b7:	85 c0                	test   eax,eax
c001e1b9:	75 01                	jne    c001e1bc <cleanerTaskFunction(void*)+0x38>
c001e1bb:	fb                   	sti    
c001e1bc:	c6 05 ac 0e 03 c0 00 	mov    BYTE PTR ds:0xc0030eac,0x0
c001e1c3:	fa                   	cli    
c001e1c4:	ff 05 c8 0e 03 c0    	inc    DWORD PTR ds:0xc0030ec8
c001e1ca:	ff 05 c4 0e 03 c0    	inc    DWORD PTR ds:0xc0030ec4
c001e1d0:	fa                   	cli    
c001e1d1:	ff 05 c8 0e 03 c0    	inc    DWORD PTR ds:0xc0030ec8
c001e1d7:	eb 26                	jmp    c001e1ff <cleanerTaskFunction(void*)+0x7b>
c001e1d9:	83 ec 0c             	sub    esp,0xc
c001e1dc:	68 cc 0e 03 c0       	push   0xc0030ecc
c001e1e1:	e8 a4 a5 00 00       	call   c002878a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e1e6:	c7 04 24 cc 0e 03 c0 	mov    DWORD PTR [esp],0xc0030ecc
c001e1ed:	89 c3                	mov    ebx,eax
c001e1ef:	e8 9e a5 00 00       	call   c0028792 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e1f4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e1f7:	e8 e1 fc ff ff       	call   c001dedd <cleanupTerminatedTask(ThreadControlBlock*)>
c001e1fc:	83 c4 10             	add    esp,0x10
c001e1ff:	83 ec 0c             	sub    esp,0xc
c001e202:	68 cc 0e 03 c0       	push   0xc0030ecc
c001e207:	e8 62 a5 00 00       	call   c002876e <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001e20c:	83 c4 10             	add    esp,0x10
c001e20f:	84 c0                	test   al,al
c001e211:	74 c6                	je     c001e1d9 <cleanerTaskFunction(void*)+0x55>
c001e213:	a1 c8 0e 03 c0       	mov    eax,ds:0xc0030ec8
c001e218:	48                   	dec    eax
c001e219:	a3 c8 0e 03 c0       	mov    ds:0xc0030ec8,eax
c001e21e:	75 01                	jne    c001e221 <cleanerTaskFunction(void*)+0x9d>
c001e220:	fb                   	sti    
c001e221:	a1 c4 0e 03 c0       	mov    eax,ds:0xc0030ec4
c001e226:	48                   	dec    eax
c001e227:	a3 c4 0e 03 c0       	mov    ds:0xc0030ec4,eax
c001e22c:	0f 85 56 ff ff ff    	jne    c001e188 <cleanerTaskFunction(void*)+0x4>
c001e232:	a1 c0 0e 03 c0       	mov    eax,ds:0xc0030ec0
c001e237:	85 c0                	test   eax,eax
c001e239:	0f 84 49 ff ff ff    	je     c001e188 <cleanerTaskFunction(void*)+0x4>
c001e23f:	c7 05 c0 0e 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030ec0,0x0
c001e249:	e8 77 f7 ff ff       	call   c001d9c5 <schedule()>
c001e24e:	e9 35 ff ff ff       	jmp    c001e188 <cleanerTaskFunction(void*)+0x4>
c001e253:	83 ec 0c             	sub    esp,0xc
c001e256:	6a 02                	push   0x2
c001e258:	e8 18 f9 ff ff       	call   c001db75 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001e25d:	83 c4 10             	add    esp,0x10
c001e260:	e9 57 ff ff ff       	jmp    c001e1bc <cleanerTaskFunction(void*)+0x38>

c001e265 <terminateTask(int)>:
c001e265:	83 ec 14             	sub    esp,0x14
c001e268:	fa                   	cli    
c001e269:	ff 05 c8 0e 03 c0    	inc    DWORD PTR ds:0xc0030ec8
c001e26f:	ff 05 c4 0e 03 c0    	inc    DWORD PTR ds:0xc0030ec4
c001e275:	fa                   	cli    
c001e276:	ff 05 c8 0e 03 c0    	inc    DWORD PTR ds:0xc0030ec8
c001e27c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001e280:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e285:	89 50 55             	mov    DWORD PTR [eax+0x55],edx
c001e288:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e28d:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001e290:	50                   	push   eax
c001e291:	68 cc 0e 03 c0       	push   0xc0030ecc
c001e296:	e8 a5 a5 00 00       	call   c0028840 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e29b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e2a0:	83 c4 10             	add    esp,0x10
c001e2a3:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c001e2aa:	a1 a8 0e 03 c0       	mov    eax,ds:0xc0030ea8
c001e2af:	85 c0                	test   eax,eax
c001e2b1:	74 53                	je     c001e306 <terminateTask(int)+0xa1>
c001e2b3:	83 ec 0c             	sub    esp,0xc
c001e2b6:	c6 05 ac 0e 03 c0 01 	mov    BYTE PTR ds:0xc0030eac,0x1
c001e2bd:	50                   	push   eax
c001e2be:	e8 85 fb ff ff       	call   c001de48 <unblockTask(ThreadControlBlock*)>
c001e2c3:	83 c4 10             	add    esp,0x10
c001e2c6:	a1 c8 0e 03 c0       	mov    eax,ds:0xc0030ec8
c001e2cb:	48                   	dec    eax
c001e2cc:	a3 c8 0e 03 c0       	mov    ds:0xc0030ec8,eax
c001e2d1:	75 01                	jne    c001e2d4 <terminateTask(int)+0x6f>
c001e2d3:	fb                   	sti    
c001e2d4:	a1 c4 0e 03 c0       	mov    eax,ds:0xc0030ec4
c001e2d9:	48                   	dec    eax
c001e2da:	a3 c4 0e 03 c0       	mov    ds:0xc0030ec4,eax
c001e2df:	75 09                	jne    c001e2ea <terminateTask(int)+0x85>
c001e2e1:	83 3d c0 0e 03 c0 00 	cmp    DWORD PTR ds:0xc0030ec0,0x0
c001e2e8:	75 2e                	jne    c001e318 <terminateTask(int)+0xb3>
c001e2ea:	a1 c8 0e 03 c0       	mov    eax,ds:0xc0030ec8
c001e2ef:	48                   	dec    eax
c001e2f0:	a3 c8 0e 03 c0       	mov    ds:0xc0030ec8,eax
c001e2f5:	75 01                	jne    c001e2f8 <terminateTask(int)+0x93>
c001e2f7:	fb                   	sti    
c001e2f8:	fa                   	cli    
c001e2f9:	ff 05 c8 0e 03 c0    	inc    DWORD PTR ds:0xc0030ec8
c001e2ff:	e8 c1 f6 ff ff       	call   c001d9c5 <schedule()>
c001e304:	eb e4                	jmp    c001e2ea <terminateTask(int)+0x85>
c001e306:	83 ec 0c             	sub    esp,0xc
c001e309:	68 e1 bb 02 c0       	push   0xc002bbe1
c001e30e:	e8 b6 43 ff ff       	call   c00126c9 <Dbg::kprintf(char const*, ...)>
c001e313:	83 c4 10             	add    esp,0x10
c001e316:	eb ae                	jmp    c001e2c6 <terminateTask(int)+0x61>
c001e318:	c7 05 c0 0e 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030ec0,0x0
c001e322:	eb db                	jmp    c001e2ff <terminateTask(int)+0x9a>

c001e324 <Thr::terminateFromIRQ(int)>:
c001e324:	83 ec 18             	sub    esp,0x18
c001e327:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e32b:	e8 35 ff ff ff       	call   c001e265 <terminateTask(int)>

c001e330 <Semaphore::release()>:
c001e330:	83 ec 0c             	sub    esp,0xc
c001e333:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e337:	fa                   	cli    
c001e338:	a1 c4 0e 03 c0       	mov    eax,ds:0xc0030ec4
c001e33d:	ff 05 c8 0e 03 c0    	inc    DWORD PTR ds:0xc0030ec8
c001e343:	8d 48 01             	lea    ecx,[eax+0x1]
c001e346:	89 0d c4 0e 03 c0    	mov    DWORD PTR ds:0xc0030ec4,ecx
c001e34c:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c001e34f:	85 c9                	test   ecx,ecx
c001e351:	74 3c                	je     c001e38f <Semaphore::release()+0x5f>
c001e353:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001e356:	83 ec 0c             	sub    esp,0xc
c001e359:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001e35c:	51                   	push   ecx
c001e35d:	e8 e6 fa ff ff       	call   c001de48 <unblockTask(ThreadControlBlock*)>
c001e362:	a1 c4 0e 03 c0       	mov    eax,ds:0xc0030ec4
c001e367:	83 c4 10             	add    esp,0x10
c001e36a:	48                   	dec    eax
c001e36b:	a3 c4 0e 03 c0       	mov    ds:0xc0030ec4,eax
c001e370:	85 c0                	test   eax,eax
c001e372:	75 09                	jne    c001e37d <Semaphore::release()+0x4d>
c001e374:	a1 c0 0e 03 c0       	mov    eax,ds:0xc0030ec0
c001e379:	85 c0                	test   eax,eax
c001e37b:	75 17                	jne    c001e394 <Semaphore::release()+0x64>
c001e37d:	a1 c8 0e 03 c0       	mov    eax,ds:0xc0030ec8
c001e382:	48                   	dec    eax
c001e383:	a3 c8 0e 03 c0       	mov    ds:0xc0030ec8,eax
c001e388:	75 01                	jne    c001e38b <Semaphore::release()+0x5b>
c001e38a:	fb                   	sti    
c001e38b:	83 c4 0c             	add    esp,0xc
c001e38e:	c3                   	ret    
c001e38f:	ff 4a 0c             	dec    DWORD PTR [edx+0xc]
c001e392:	eb d7                	jmp    c001e36b <Semaphore::release()+0x3b>
c001e394:	c7 05 c0 0e 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030ec0,0x0
c001e39e:	e8 22 f6 ff ff       	call   c001d9c5 <schedule()>
c001e3a3:	eb d8                	jmp    c001e37d <Semaphore::release()+0x4d>

c001e3a5 <__static_initialization_and_destruction_0(int, int)>:
c001e3a5:	83 ec 0c             	sub    esp,0xc
c001e3a8:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001e3ad:	0f 85 88 00 00 00    	jne    c001e43b <__static_initialization_and_destruction_0(int, int)+0x96>
c001e3b3:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001e3bb:	75 7e                	jne    c001e43b <__static_initialization_and_destruction_0(int, int)+0x96>
c001e3bd:	83 ec 0c             	sub    esp,0xc
c001e3c0:	68 e4 0e 03 c0       	push   0xc0030ee4
c001e3c5:	e8 06 a7 00 00       	call   c0028ad0 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001e3ca:	83 c4 10             	add    esp,0x10
c001e3cd:	83 ec 04             	sub    esp,0x4
c001e3d0:	68 78 c7 02 c0       	push   0xc002c778
c001e3d5:	68 e4 0e 03 c0       	push   0xc0030ee4
c001e3da:	68 84 8a 02 c0       	push   0xc0028a84
c001e3df:	e8 87 41 ff ff       	call   c001256b <__cxa_atexit>
c001e3e4:	83 c4 10             	add    esp,0x10
c001e3e7:	83 ec 0c             	sub    esp,0xc
c001e3ea:	68 d8 0e 03 c0       	push   0xc0030ed8
c001e3ef:	e8 dc a6 00 00       	call   c0028ad0 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001e3f4:	83 c4 10             	add    esp,0x10
c001e3f7:	83 ec 04             	sub    esp,0x4
c001e3fa:	68 78 c7 02 c0       	push   0xc002c778
c001e3ff:	68 d8 0e 03 c0       	push   0xc0030ed8
c001e404:	68 84 8a 02 c0       	push   0xc0028a84
c001e409:	e8 5d 41 ff ff       	call   c001256b <__cxa_atexit>
c001e40e:	83 c4 10             	add    esp,0x10
c001e411:	83 ec 0c             	sub    esp,0xc
c001e414:	68 cc 0e 03 c0       	push   0xc0030ecc
c001e419:	e8 b2 a6 00 00       	call   c0028ad0 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001e41e:	83 c4 10             	add    esp,0x10
c001e421:	83 ec 04             	sub    esp,0x4
c001e424:	68 78 c7 02 c0       	push   0xc002c778
c001e429:	68 cc 0e 03 c0       	push   0xc0030ecc
c001e42e:	68 84 8a 02 c0       	push   0xc0028a84
c001e433:	e8 33 41 ff ff       	call   c001256b <__cxa_atexit>
c001e438:	83 c4 10             	add    esp,0x10
c001e43b:	90                   	nop
c001e43c:	83 c4 0c             	add    esp,0xc
c001e43f:	c3                   	ret    

c001e440 <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c001e440:	83 ec 0c             	sub    esp,0xc
c001e443:	83 ec 08             	sub    esp,0x8
c001e446:	68 ff ff 00 00       	push   0xffff
c001e44b:	6a 01                	push   0x1
c001e44d:	e8 53 ff ff ff       	call   c001e3a5 <__static_initialization_and_destruction_0(int, int)>
c001e452:	83 c4 10             	add    esp,0x10
c001e455:	83 c4 0c             	add    esp,0xc
c001e458:	c3                   	ret    

c001e459 <Vm::inbv(unsigned short)>:
c001e459:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001e45d:	66 81 fa fe fe       	cmp    dx,0xfefe
c001e462:	75 06                	jne    c001e46a <Vm::inbv(unsigned short)+0x11>
c001e464:	a0 2c 0f 03 c0       	mov    al,ds:0xc0030f2c
c001e469:	c3                   	ret    
c001e46a:	ec                   	in     al,dx
c001e46b:	c3                   	ret    

c001e46c <Vm::outbv(unsigned short, unsigned char)>:
c001e46c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001e470:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e474:	66 81 fa fe fe       	cmp    dx,0xfefe
c001e479:	75 25                	jne    c001e4a0 <Vm::outbv(unsigned short, unsigned char)+0x34>
c001e47b:	8b 0d 2c 0f 03 c0    	mov    ecx,DWORD PTR ds:0xc0030f2c
c001e481:	8d 51 01             	lea    edx,[ecx+0x1]
c001e484:	88 81 40 0f 03 c0    	mov    BYTE PTR [ecx-0x3ffcf0c0],al
c001e48a:	89 15 2c 0f 03 c0    	mov    DWORD PTR ds:0xc0030f2c,edx
c001e490:	83 fa 20             	cmp    edx,0x20
c001e493:	75 0c                	jne    c001e4a1 <Vm::outbv(unsigned short, unsigned char)+0x35>
c001e495:	c7 05 2c 0f 03 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc0030f2c,0x1f
c001e49f:	c3                   	ret    
c001e4a0:	ee                   	out    dx,al
c001e4a1:	c3                   	ret    

c001e4a2 <Vm::realToLinear(unsigned short, unsigned short)>:
c001e4a2:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e4a7:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001e4ac:	c1 e0 04             	shl    eax,0x4
c001e4af:	01 d0                	add    eax,edx
c001e4b1:	c3                   	ret    

c001e4b2 <Vm::getSegment(unsigned int)>:
c001e4b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e4b6:	c1 e8 10             	shr    eax,0x10
c001e4b9:	c3                   	ret    

c001e4ba <Vm::getOffset(unsigned int)>:
c001e4ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e4be:	c3                   	ret    

c001e4bf <Vm::mainloop2()>:
c001e4bf:	83 ec 18             	sub    esp,0x18
c001e4c2:	fa                   	cli    
c001e4c3:	ff 05 c8 0e 03 c0    	inc    DWORD PTR ds:0xc0030ec8
c001e4c9:	6a 02                	push   0x2
c001e4cb:	c6 05 25 0f 03 c0 01 	mov    BYTE PTR ds:0xc0030f25,0x1
c001e4d2:	e8 9e f6 ff ff       	call   c001db75 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001e4d7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e4dc:	0f b7 50 5f          	movzx  edx,WORD PTR [eax+0x5f]
c001e4e0:	52                   	push   edx
c001e4e1:	0f b7 50 5d          	movzx  edx,WORD PTR [eax+0x5d]
c001e4e5:	52                   	push   edx
c001e4e6:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c001e4ea:	52                   	push   edx
c001e4eb:	0f b7 40 59          	movzx  eax,WORD PTR [eax+0x59]
c001e4ef:	50                   	push   eax
c001e4f0:	e8 05 1e fe ff       	call   c00002fa <goToVM86>
c001e4f5:	83 c4 2c             	add    esp,0x2c
c001e4f8:	c3                   	ret    

c001e4f9 <Vm::mainVm8086Loop(void*)>:
c001e4f9:	a1 c8 0e 03 c0       	mov    eax,ds:0xc0030ec8
c001e4fe:	48                   	dec    eax
c001e4ff:	a3 c8 0e 03 c0       	mov    ds:0xc0030ec8,eax
c001e504:	75 01                	jne    c001e507 <Vm::mainVm8086Loop(void*)+0xe>
c001e506:	fb                   	sti    
c001e507:	eb b6                	jmp    c001e4bf <Vm::mainloop2()>

c001e509 <Vm::mainloop3(unsigned long)>:
c001e509:	83 ec 18             	sub    esp,0x18
c001e50c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001e510:	fa                   	cli    
c001e511:	ff 05 c8 0e 03 c0    	inc    DWORD PTR ds:0xc0030ec8
c001e517:	6a 02                	push   0x2
c001e519:	c6 05 24 0f 03 c0 01 	mov    BYTE PTR ds:0xc0030f24,0x1
c001e520:	a3 20 0f 03 c0       	mov    ds:0xc0030f20,eax
c001e525:	e8 4b f6 ff ff       	call   c001db75 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001e52a:	83 c4 1c             	add    esp,0x1c
c001e52d:	eb 90                	jmp    c001e4bf <Vm::mainloop2()>

c001e52f <Vm::initialise8086()>:
c001e52f:	83 ec 0c             	sub    esp,0xc
c001e532:	68 80 00 00 00       	push   0x80
c001e537:	6a 00                	push   0x0
c001e539:	68 f9 e4 01 c0       	push   0xc001e4f9
c001e53e:	ff 35 f0 0e 03 c0    	push   DWORD PTR ds:0xc0030ef0
c001e544:	e8 57 f2 ff ff       	call   c001d7a0 <Process::createThread(void (*)(void*), void*, int)>
c001e549:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c001e550:	a3 28 0f 03 c0       	mov    ds:0xc0030f28,eax
c001e555:	68 00 01 00 00       	push   0x100
c001e55a:	a1 f0 0e 03 c0       	mov    eax,ds:0xc0030ef0
c001e55f:	6a 00                	push   0x0
c001e561:	6a 00                	push   0x0
c001e563:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001e569:	e8 62 37 ff ff       	call   c0011cd0 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001e56e:	83 c4 2c             	add    esp,0x2c
c001e571:	c3                   	ret    

c001e572 <Vm::finish8086()>:
c001e572:	53                   	push   ebx
c001e573:	83 ec 08             	sub    esp,0x8
c001e576:	fa                   	cli    
c001e577:	ff 05 c8 0e 03 c0    	inc    DWORD PTR ds:0xc0030ec8
c001e57d:	80 3d 24 0f 03 c0 00 	cmp    BYTE PTR ds:0xc0030f24,0x0
c001e584:	75 15                	jne    c001e59b <Vm::finish8086()+0x29>
c001e586:	e8 3a f4 ff ff       	call   c001d9c5 <schedule()>
c001e58b:	a1 c8 0e 03 c0       	mov    eax,ds:0xc0030ec8
c001e590:	48                   	dec    eax
c001e591:	a3 c8 0e 03 c0       	mov    ds:0xc0030ec8,eax
c001e596:	75 de                	jne    c001e576 <Vm::finish8086()+0x4>
c001e598:	fb                   	sti    
c001e599:	eb db                	jmp    c001e576 <Vm::finish8086()+0x4>
c001e59b:	83 ec 0c             	sub    esp,0xc
c001e59e:	8b 1d 20 0f 03 c0    	mov    ebx,DWORD PTR ds:0xc0030f20
c001e5a4:	ff 35 28 0f 03 c0    	push   DWORD PTR ds:0xc0030f28
c001e5aa:	c6 05 24 0f 03 c0 00 	mov    BYTE PTR ds:0xc0030f24,0x0
c001e5b1:	e8 92 f8 ff ff       	call   c001de48 <unblockTask(ThreadControlBlock*)>
c001e5b6:	a1 c8 0e 03 c0       	mov    eax,ds:0xc0030ec8
c001e5bb:	83 c4 10             	add    esp,0x10
c001e5be:	8d 50 ff             	lea    edx,[eax-0x1]
c001e5c1:	89 15 c8 0e 03 c0    	mov    DWORD PTR ds:0xc0030ec8,edx
c001e5c7:	85 d2                	test   edx,edx
c001e5c9:	75 01                	jne    c001e5cc <Vm::finish8086()+0x5a>
c001e5cb:	fb                   	sti    
c001e5cc:	89 d8                	mov    eax,ebx
c001e5ce:	83 c4 08             	add    esp,0x8
c001e5d1:	5b                   	pop    ebx
c001e5d2:	c3                   	ret    

c001e5d3 <Vm::getOutput8086(unsigned char*)>:
c001e5d3:	57                   	push   edi
c001e5d4:	8b 0d 2c 0f 03 c0    	mov    ecx,DWORD PTR ds:0xc0030f2c
c001e5da:	56                   	push   esi
c001e5db:	be 40 0f 03 c0       	mov    esi,0xc0030f40
c001e5e0:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001e5e4:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001e5e6:	a1 2c 0f 03 c0       	mov    eax,ds:0xc0030f2c
c001e5eb:	5e                   	pop    esi
c001e5ec:	c7 05 2c 0f 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030f2c,0x0
c001e5f6:	5f                   	pop    edi
c001e5f7:	c3                   	ret    

c001e5f8 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c001e5f8:	55                   	push   ebp
c001e5f9:	57                   	push   edi
c001e5fa:	56                   	push   esi
c001e5fb:	53                   	push   ebx
c001e5fc:	83 ec 2c             	sub    esp,0x2c
c001e5ff:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001e603:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001e607:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c001e60b:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c001e60f:	fa                   	cli    
c001e610:	ff 05 c8 0e 03 c0    	inc    DWORD PTR ds:0xc0030ec8
c001e616:	0f b6 35 25 0f 03 c0 	movzx  esi,BYTE PTR ds:0xc0030f25
c001e61d:	89 f0                	mov    eax,esi
c001e61f:	84 c0                	test   al,al
c001e621:	75 1d                	jne    c001e640 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x48>
c001e623:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001e627:	e8 99 f3 ff ff       	call   c001d9c5 <schedule()>
c001e62c:	a1 c8 0e 03 c0       	mov    eax,ds:0xc0030ec8
c001e631:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001e635:	48                   	dec    eax
c001e636:	a3 c8 0e 03 c0       	mov    ds:0xc0030ec8,eax
c001e63b:	75 d2                	jne    c001e60f <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c001e63d:	fb                   	sti    
c001e63e:	eb cf                	jmp    c001e60f <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c001e640:	a1 28 0f 03 c0       	mov    eax,ds:0xc0030f28
c001e645:	c7 05 2c 0f 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030f2c,0x0
c001e64f:	66 89 50 5d          	mov    WORD PTR [eax+0x5d],dx
c001e653:	66 89 58 5f          	mov    WORD PTR [eax+0x5f],bx
c001e657:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c001e65b:	66 89 78 5b          	mov    WORD PTR [eax+0x5b],di
c001e65f:	c6 40 62 01          	mov    BYTE PTR [eax+0x62],0x1
c001e663:	50                   	push   eax
c001e664:	6a 20                	push   0x20
c001e666:	6a 00                	push   0x0
c001e668:	68 40 0f 03 c0       	push   0xc0030f40
c001e66d:	e8 de 20 fe ff       	call   c0000750 <memset>
c001e672:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001e679:	e8 1b 0f ff ff       	call   c000f599 <malloc>
c001e67e:	83 c4 0c             	add    esp,0xc
c001e681:	89 c3                	mov    ebx,eax
c001e683:	ff 35 f0 0e 03 c0    	push   DWORD PTR ds:0xc0030ef0
c001e689:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001e68d:	50                   	push   eax
c001e68e:	e8 95 45 ff ff       	call   c0012c28 <File::File(char const*, Process*)>
c001e693:	83 c4 10             	add    esp,0x10
c001e696:	85 db                	test   ebx,ebx
c001e698:	75 0a                	jne    c001e6a4 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xac>
c001e69a:	83 ec 0c             	sub    esp,0xc
c001e69d:	68 ec bc 02 c0       	push   0xc002bcec
c001e6a2:	eb 3e                	jmp    c001e6e2 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c001e6a4:	50                   	push   eax
c001e6a5:	8d 44 24 17          	lea    eax,[esp+0x17]
c001e6a9:	50                   	push   eax
c001e6aa:	8d 44 24 20          	lea    eax,[esp+0x20]
c001e6ae:	50                   	push   eax
c001e6af:	53                   	push   ebx
c001e6b0:	e8 83 48 ff ff       	call   c0012f38 <File::stat(unsigned long long*, bool*)>
c001e6b5:	83 c4 10             	add    esp,0x10
c001e6b8:	80 7c 24 13 00       	cmp    BYTE PTR [esp+0x13],0x0
c001e6bd:	74 0a                	je     c001e6c9 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd1>
c001e6bf:	83 ec 0c             	sub    esp,0xc
c001e6c2:	68 00 bd 02 c0       	push   0xc002bd00
c001e6c7:	eb 19                	jmp    c001e6e2 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c001e6c9:	51                   	push   ecx
c001e6ca:	51                   	push   ecx
c001e6cb:	6a 01                	push   0x1
c001e6cd:	53                   	push   ebx
c001e6ce:	e8 b9 45 ff ff       	call   c0012c8c <File::open(FileOpenMode)>
c001e6d3:	83 c4 10             	add    esp,0x10
c001e6d6:	85 c0                	test   eax,eax
c001e6d8:	74 24                	je     c001e6fe <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x106>
c001e6da:	83 ec 0c             	sub    esp,0xc
c001e6dd:	68 19 bd 02 c0       	push   0xc002bd19
c001e6e2:	e8 4e b7 ff ff       	call   c0019e35 <Krnl::panic(char const*)>
c001e6e7:	a1 c8 0e 03 c0       	mov    eax,ds:0xc0030ec8
c001e6ec:	83 c4 10             	add    esp,0x10
c001e6ef:	48                   	dec    eax
c001e6f0:	a3 c8 0e 03 c0       	mov    ds:0xc0030ec8,eax
c001e6f5:	85 c0                	test   eax,eax
c001e6f7:	75 01                	jne    c001e6fa <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x102>
c001e6f9:	fb                   	sti    
c001e6fa:	31 f6                	xor    esi,esi
c001e6fc:	eb 58                	jmp    c001e756 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x15e>
c001e6fe:	0f b7 ed             	movzx  ebp,bp
c001e701:	50                   	push   eax
c001e702:	0f b7 ff             	movzx  edi,di
c001e705:	50                   	push   eax
c001e706:	55                   	push   ebp
c001e707:	57                   	push   edi
c001e708:	e8 95 fd ff ff       	call   c001e4a2 <Vm::realToLinear(unsigned short, unsigned short)>
c001e70d:	5a                   	pop    edx
c001e70e:	8b 13                	mov    edx,DWORD PTR [ebx]
c001e710:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001e714:	51                   	push   ecx
c001e715:	50                   	push   eax
c001e716:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001e71a:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001e71e:	53                   	push   ebx
c001e71f:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001e722:	83 c4 14             	add    esp,0x14
c001e725:	53                   	push   ebx
c001e726:	e8 bf 45 ff ff       	call   c0012cea <File::close()>
c001e72b:	a1 c8 0e 03 c0       	mov    eax,ds:0xc0030ec8
c001e730:	83 c4 10             	add    esp,0x10
c001e733:	48                   	dec    eax
c001e734:	c6 05 25 0f 03 c0 00 	mov    BYTE PTR ds:0xc0030f25,0x0
c001e73b:	a3 c8 0e 03 c0       	mov    ds:0xc0030ec8,eax
c001e740:	85 c0                	test   eax,eax
c001e742:	75 01                	jne    c001e745 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x14d>
c001e744:	fb                   	sti    
c001e745:	83 ec 0c             	sub    esp,0xc
c001e748:	ff 35 28 0f 03 c0    	push   DWORD PTR ds:0xc0030f28
c001e74e:	e8 f5 f6 ff ff       	call   c001de48 <unblockTask(ThreadControlBlock*)>
c001e753:	83 c4 10             	add    esp,0x10
c001e756:	83 c4 2c             	add    esp,0x2c
c001e759:	89 f0                	mov    eax,esi
c001e75b:	5b                   	pop    ebx
c001e75c:	5e                   	pop    esi
c001e75d:	5f                   	pop    edi
c001e75e:	5d                   	pop    ebp
c001e75f:	c3                   	ret    

c001e760 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c001e760:	57                   	push   edi
c001e761:	56                   	push   esi
c001e762:	53                   	push   ebx
c001e763:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001e767:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e76b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001e76f:	83 e8 06             	sub    eax,0x6
c001e772:	0f b7 c0             	movzx  eax,ax
c001e775:	50                   	push   eax
c001e776:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c001e77b:	50                   	push   eax
c001e77c:	e8 21 fd ff ff       	call   c001e4a2 <Vm::realToLinear(unsigned short, unsigned short)>
c001e781:	5a                   	pop    edx
c001e782:	5e                   	pop    esi
c001e783:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c001e786:	8d 56 fa             	lea    edx,[esi-0x6]
c001e789:	81 e2 ff ff 00 00    	and    edx,0xffff
c001e78f:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c001e792:	8b 51 38             	mov    edx,DWORD PTR [ecx+0x38]
c001e795:	83 c2 02             	add    edx,0x2
c001e798:	66 89 10             	mov    WORD PTR [eax],dx
c001e79b:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c001e79e:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c001e7a2:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c001e7a5:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c001e7a9:	89 d6                	mov    esi,edx
c001e7ab:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c001e7b1:	66 81 e6 ff fd       	and    si,0xfdff
c001e7b6:	80 7f 61 00          	cmp    BYTE PTR [edi+0x61],0x0
c001e7ba:	74 07                	je     c001e7c3 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x63>
c001e7bc:	89 d6                	mov    esi,edx
c001e7be:	66 81 ce 00 02       	or     si,0x200
c001e7c3:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c001e7c7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e7cc:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001e7d0:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c001e7d8:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c001e7db:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c001e7e3:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c001e7e6:	5b                   	pop    ebx
c001e7e7:	5e                   	pop    esi
c001e7e8:	5f                   	pop    edi
c001e7e9:	c3                   	ret    

c001e7ea <Vm::readByteFromReal(unsigned short, unsigned short)>:
c001e7ea:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e7ef:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001e7f4:	c1 e0 04             	shl    eax,0x4
c001e7f7:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c001e7fa:	c3                   	ret    

c001e7fb <Vm::readWordFromReal(unsigned short, unsigned short)>:
c001e7fb:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e800:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001e805:	c1 e0 04             	shl    eax,0x4
c001e808:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c001e80c:	c3                   	ret    

c001e80d <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c001e80d:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e812:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001e817:	c1 e0 04             	shl    eax,0x4
c001e81a:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c001e81d:	c3                   	ret    

c001e81e <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c001e81e:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e823:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001e828:	c1 e0 04             	shl    eax,0x4
c001e82b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e82f:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c001e832:	c3                   	ret    

c001e833 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c001e833:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e838:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001e83d:	c1 e0 04             	shl    eax,0x4
c001e840:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e844:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c001e848:	c3                   	ret    

c001e849 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c001e849:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e84e:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001e853:	c1 e0 04             	shl    eax,0x4
c001e856:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e85a:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c001e85d:	c3                   	ret    

c001e85e <Vm::faultHandler(regs*)>:
c001e85e:	55                   	push   ebp
c001e85f:	57                   	push   edi
c001e860:	56                   	push   esi
c001e861:	53                   	push   ebx
c001e862:	83 ec 1c             	sub    esp,0x1c
c001e865:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001e869:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001e86c:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c001e870:	0f b7 f8             	movzx  edi,ax
c001e873:	52                   	push   edx
c001e874:	0f b7 c0             	movzx  eax,ax
c001e877:	50                   	push   eax
c001e878:	e8 25 fc ff ff       	call   c001e4a2 <Vm::realToLinear(unsigned short, unsigned short)>
c001e87d:	5a                   	pop    edx
c001e87e:	8b 6b 48             	mov    ebp,DWORD PTR [ebx+0x48]
c001e881:	59                   	pop    ecx
c001e882:	89 c1                	mov    ecx,eax
c001e884:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001e887:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001e88b:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e890:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001e894:	0f b7 c5             	movzx  eax,bp
c001e897:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e89b:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c001e89f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001e8a3:	e8 fa fb ff ff       	call   c001e4a2 <Vm::realToLinear(unsigned short, unsigned short)>
c001e8a8:	5e                   	pop    esi
c001e8a9:	be 06 00 00 00       	mov    esi,0x6
c001e8ae:	5a                   	pop    edx
c001e8af:	c6 44 24 03 00       	mov    BYTE PTR [esp+0x3],0x0
c001e8b4:	c6 44 24 02 00       	mov    BYTE PTR [esp+0x2],0x0
c001e8b9:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c001e8bc:	80 fa 9d             	cmp    dl,0x9d
c001e8bf:	0f 84 2c 02 00 00    	je     c001eaf1 <Vm::faultHandler(regs*)+0x293>
c001e8c5:	0f 87 91 00 00 00    	ja     c001e95c <Vm::faultHandler(regs*)+0xfe>
c001e8cb:	80 fa 66             	cmp    dl,0x66
c001e8ce:	0f 84 98 01 00 00    	je     c001ea6c <Vm::faultHandler(regs*)+0x20e>
c001e8d4:	77 47                	ja     c001e91d <Vm::faultHandler(regs*)+0xbf>
c001e8d6:	80 fa 36             	cmp    dl,0x36
c001e8d9:	0f 84 80 01 00 00    	je     c001ea5f <Vm::faultHandler(regs*)+0x201>
c001e8df:	77 1a                	ja     c001e8fb <Vm::faultHandler(regs*)+0x9d>
c001e8e1:	80 fa 26             	cmp    dl,0x26
c001e8e4:	0f 84 4e 01 00 00    	je     c001ea38 <Vm::faultHandler(regs*)+0x1da>
c001e8ea:	80 fa 2e             	cmp    dl,0x2e
c001e8ed:	0f 85 e2 05 00 00    	jne    c001eed5 <Vm::faultHandler(regs*)+0x677>
c001e8f3:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001e8f6:	31 f6                	xor    esi,esi
c001e8f8:	41                   	inc    ecx
c001e8f9:	eb be                	jmp    c001e8b9 <Vm::faultHandler(regs*)+0x5b>
c001e8fb:	80 fa 64             	cmp    dl,0x64
c001e8fe:	0f 84 41 01 00 00    	je     c001ea45 <Vm::faultHandler(regs*)+0x1e7>
c001e904:	0f 87 48 01 00 00    	ja     c001ea52 <Vm::faultHandler(regs*)+0x1f4>
c001e90a:	80 fa 3e             	cmp    dl,0x3e
c001e90d:	0f 85 c2 05 00 00    	jne    c001eed5 <Vm::faultHandler(regs*)+0x677>
c001e913:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001e916:	be 01 00 00 00       	mov    esi,0x1
c001e91b:	eb db                	jmp    c001e8f8 <Vm::faultHandler(regs*)+0x9a>
c001e91d:	80 fa 6d             	cmp    dl,0x6d
c001e920:	0f 84 ec 02 00 00    	je     c001ec12 <Vm::faultHandler(regs*)+0x3b4>
c001e926:	77 17                	ja     c001e93f <Vm::faultHandler(regs*)+0xe1>
c001e928:	80 fa 67             	cmp    dl,0x67
c001e92b:	0f 84 48 01 00 00    	je     c001ea79 <Vm::faultHandler(regs*)+0x21b>
c001e931:	80 fa 6c             	cmp    dl,0x6c
c001e934:	0f 84 69 02 00 00    	je     c001eba3 <Vm::faultHandler(regs*)+0x345>
c001e93a:	e9 96 05 00 00       	jmp    c001eed5 <Vm::faultHandler(regs*)+0x677>
c001e93f:	80 fa 6f             	cmp    dl,0x6f
c001e942:	0f 84 f4 03 00 00    	je     c001ed3c <Vm::faultHandler(regs*)+0x4de>
c001e948:	0f 82 59 03 00 00    	jb     c001eca7 <Vm::faultHandler(regs*)+0x449>
c001e94e:	80 fa 9c             	cmp    dl,0x9c
c001e951:	0f 84 2f 01 00 00    	je     c001ea86 <Vm::faultHandler(regs*)+0x228>
c001e957:	e9 79 05 00 00       	jmp    c001eed5 <Vm::faultHandler(regs*)+0x677>
c001e95c:	80 fa ec             	cmp    dl,0xec
c001e95f:	0f 84 14 05 00 00    	je     c001ee79 <Vm::faultHandler(regs*)+0x61b>
c001e965:	77 7b                	ja     c001e9e2 <Vm::faultHandler(regs*)+0x184>
c001e967:	80 fa e4             	cmp    dl,0xe4
c001e96a:	0f 84 93 04 00 00    	je     c001ee03 <Vm::faultHandler(regs*)+0x5a5>
c001e970:	77 53                	ja     c001e9c5 <Vm::faultHandler(regs*)+0x167>
c001e972:	80 fa cd             	cmp    dl,0xcd
c001e975:	0f 84 d9 01 00 00    	je     c001eb54 <Vm::faultHandler(regs*)+0x2f6>
c001e97b:	80 fa cf             	cmp    dl,0xcf
c001e97e:	0f 85 51 05 00 00    	jne    c001eed5 <Vm::faultHandler(regs*)+0x677>
c001e984:	0f b7 10             	movzx  edx,WORD PTR [eax]
c001e987:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c001e98a:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c001e98e:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c001e991:	0f b7 50 04          	movzx  edx,WORD PTR [eax+0x4]
c001e995:	81 ca 00 02 02 00    	or     edx,0x20200
c001e99b:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001e99e:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c001e9a2:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001e9a8:	66 c1 e8 09          	shr    ax,0x9
c001e9ac:	83 e0 01             	and    eax,0x1
c001e9af:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001e9b2:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001e9b5:	83 c0 06             	add    eax,0x6
c001e9b8:	25 ff ff 00 00       	and    eax,0xffff
c001e9bd:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c001e9c0:	e9 0c 05 00 00       	jmp    c001eed1 <Vm::faultHandler(regs*)+0x673>
c001e9c5:	80 fa e6             	cmp    dl,0xe6
c001e9c8:	0f 84 7f 04 00 00    	je     c001ee4d <Vm::faultHandler(regs*)+0x5ef>
c001e9ce:	0f 82 4b 04 00 00    	jb     c001ee1f <Vm::faultHandler(regs*)+0x5c1>
c001e9d4:	80 fa e7             	cmp    dl,0xe7
c001e9d7:	0f 84 87 04 00 00    	je     c001ee64 <Vm::faultHandler(regs*)+0x606>
c001e9dd:	e9 f3 04 00 00       	jmp    c001eed5 <Vm::faultHandler(regs*)+0x677>
c001e9e2:	80 fa ef             	cmp    dl,0xef
c001e9e5:	0f 84 d1 04 00 00    	je     c001eebc <Vm::faultHandler(regs*)+0x65e>
c001e9eb:	77 28                	ja     c001ea15 <Vm::faultHandler(regs*)+0x1b7>
c001e9ed:	80 fa ed             	cmp    dl,0xed
c001e9f0:	0f 84 9f 04 00 00    	je     c001ee95 <Vm::faultHandler(regs*)+0x637>
c001e9f6:	80 fa ee             	cmp    dl,0xee
c001e9f9:	0f 85 d6 04 00 00    	jne    c001eed5 <Vm::faultHandler(regs*)+0x677>
c001e9ff:	50                   	push   eax
c001ea00:	50                   	push   eax
c001ea01:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c001ea05:	50                   	push   eax
c001ea06:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001ea0a:	50                   	push   eax
c001ea0b:	e8 5c fa ff ff       	call   c001e46c <Vm::outbv(unsigned short, unsigned char)>
c001ea10:	e9 9f 04 00 00       	jmp    c001eeb4 <Vm::faultHandler(regs*)+0x656>
c001ea15:	80 fa fa             	cmp    dl,0xfa
c001ea18:	0f 84 69 01 00 00    	je     c001eb87 <Vm::faultHandler(regs*)+0x329>
c001ea1e:	80 fa fb             	cmp    dl,0xfb
c001ea21:	0f 84 6e 01 00 00    	je     c001eb95 <Vm::faultHandler(regs*)+0x337>
c001ea27:	80 fa f3             	cmp    dl,0xf3
c001ea2a:	0f 85 a5 04 00 00    	jne    c001eed5 <Vm::faultHandler(regs*)+0x677>
c001ea30:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001ea33:	e9 c0 fe ff ff       	jmp    c001e8f8 <Vm::faultHandler(regs*)+0x9a>
c001ea38:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001ea3b:	be 02 00 00 00       	mov    esi,0x2
c001ea40:	e9 b3 fe ff ff       	jmp    c001e8f8 <Vm::faultHandler(regs*)+0x9a>
c001ea45:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001ea48:	be 03 00 00 00       	mov    esi,0x3
c001ea4d:	e9 a6 fe ff ff       	jmp    c001e8f8 <Vm::faultHandler(regs*)+0x9a>
c001ea52:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001ea55:	be 04 00 00 00       	mov    esi,0x4
c001ea5a:	e9 99 fe ff ff       	jmp    c001e8f8 <Vm::faultHandler(regs*)+0x9a>
c001ea5f:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001ea62:	be 05 00 00 00       	mov    esi,0x5
c001ea67:	e9 8c fe ff ff       	jmp    c001e8f8 <Vm::faultHandler(regs*)+0x9a>
c001ea6c:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001ea6f:	c6 44 24 02 01       	mov    BYTE PTR [esp+0x2],0x1
c001ea74:	e9 7f fe ff ff       	jmp    c001e8f8 <Vm::faultHandler(regs*)+0x9a>
c001ea79:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001ea7c:	c6 44 24 03 01       	mov    BYTE PTR [esp+0x3],0x1
c001ea81:	e9 72 fe ff ff       	jmp    c001e8f8 <Vm::faultHandler(regs*)+0x9a>
c001ea86:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c001ea89:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001ea8d:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001ea92:	74 30                	je     c001eac4 <Vm::faultHandler(regs*)+0x266>
c001ea94:	83 e9 04             	sub    ecx,0x4
c001ea97:	81 e2 ff 0d 00 00    	and    edx,0xdff
c001ea9d:	81 e1 ff ff 00 00    	and    ecx,0xffff
c001eaa3:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c001eaa6:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c001eaa9:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001eaaf:	80 79 61 00          	cmp    BYTE PTR [ecx+0x61],0x0
c001eab3:	0f 84 15 04 00 00    	je     c001eece <Vm::faultHandler(regs*)+0x670>
c001eab9:	80 ce 02             	or     dh,0x2
c001eabc:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c001eabf:	e9 0a 04 00 00       	jmp    c001eece <Vm::faultHandler(regs*)+0x670>
c001eac4:	83 e9 02             	sub    ecx,0x2
c001eac7:	81 e1 ff ff 00 00    	and    ecx,0xffff
c001eacd:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c001ead0:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c001ead4:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001eada:	80 79 61 00          	cmp    BYTE PTR [ecx+0x61],0x0
c001eade:	74 05                	je     c001eae5 <Vm::faultHandler(regs*)+0x287>
c001eae0:	80 ce 02             	or     dh,0x2
c001eae3:	eb 03                	jmp    c001eae8 <Vm::faultHandler(regs*)+0x28a>
c001eae5:	80 e6 fd             	and    dh,0xfd
c001eae8:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c001eaec:	e9 dd 03 00 00       	jmp    c001eece <Vm::faultHandler(regs*)+0x670>
c001eaf1:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001eaf6:	74 2a                	je     c001eb22 <Vm::faultHandler(regs*)+0x2c4>
c001eaf8:	8b 10                	mov    edx,DWORD PTR [eax]
c001eafa:	81 e2 ff 0d 00 00    	and    edx,0xdff
c001eb00:	81 ca 00 02 02 00    	or     edx,0x20200
c001eb06:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001eb09:	8b 00                	mov    eax,DWORD PTR [eax]
c001eb0b:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001eb11:	c1 e8 09             	shr    eax,0x9
c001eb14:	83 e0 01             	and    eax,0x1
c001eb17:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001eb1a:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001eb1d:	83 c0 04             	add    eax,0x4
c001eb20:	eb 25                	jmp    c001eb47 <Vm::faultHandler(regs*)+0x2e9>
c001eb22:	0f b7 10             	movzx  edx,WORD PTR [eax]
c001eb25:	81 ca 00 02 02 00    	or     edx,0x20200
c001eb2b:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001eb2e:	66 8b 00             	mov    ax,WORD PTR [eax]
c001eb31:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001eb37:	66 c1 e8 09          	shr    ax,0x9
c001eb3b:	83 e0 01             	and    eax,0x1
c001eb3e:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001eb41:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001eb44:	83 c0 02             	add    eax,0x2
c001eb47:	25 ff ff 00 00       	and    eax,0xffff
c001eb4c:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c001eb4f:	e9 7a 03 00 00       	jmp    c001eece <Vm::faultHandler(regs*)+0x670>
c001eb54:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001eb58:	3c ee                	cmp    al,0xee
c001eb5a:	75 10                	jne    c001eb6c <Vm::faultHandler(regs*)+0x30e>
c001eb5c:	83 ec 0c             	sub    esp,0xc
c001eb5f:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c001eb62:	e8 a2 f9 ff ff       	call   c001e509 <Vm::mainloop3(unsigned long)>
c001eb67:	e9 4b 03 00 00       	jmp    c001eeb7 <Vm::faultHandler(regs*)+0x659>
c001eb6c:	83 ec 0c             	sub    esp,0xc
c001eb6f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001eb73:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001eb77:	51                   	push   ecx
c001eb78:	50                   	push   eax
c001eb79:	53                   	push   ebx
c001eb7a:	e8 e1 fb ff ff       	call   c001e760 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c001eb7f:	83 c4 20             	add    esp,0x20
c001eb82:	e9 4a 03 00 00       	jmp    c001eed1 <Vm::faultHandler(regs*)+0x673>
c001eb87:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001eb8c:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001eb90:	e9 39 03 00 00       	jmp    c001eece <Vm::faultHandler(regs*)+0x670>
c001eb95:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001eb9a:	c6 40 61 01          	mov    BYTE PTR [eax+0x61],0x1
c001eb9e:	e9 2b 03 00 00       	jmp    c001eece <Vm::faultHandler(regs*)+0x670>
c001eba3:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c001eba6:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001ebab:	74 2b                	je     c001ebd8 <Vm::faultHandler(regs*)+0x37a>
c001ebad:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c001ebb4:	76 22                	jbe    c001ebd8 <Vm::faultHandler(regs*)+0x37a>
c001ebb6:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001ebba:	50                   	push   eax
c001ebbb:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001ebbf:	50                   	push   eax
c001ebc0:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001ebc4:	50                   	push   eax
c001ebc5:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001ebc9:	50                   	push   eax
c001ebca:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001ebce:	50                   	push   eax
c001ebcf:	6a 6c                	push   0x6c
c001ebd1:	6a 6c                	push   0x6c
c001ebd3:	e9 b9 01 00 00       	jmp    c001ed91 <Vm::faultHandler(regs*)+0x533>
c001ebd8:	83 ec 0c             	sub    esp,0xc
c001ebdb:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001ebdf:	0f b7 f6             	movzx  esi,si
c001ebe2:	50                   	push   eax
c001ebe3:	e8 71 f8 ff ff       	call   c001e459 <Vm::inbv(unsigned short)>
c001ebe8:	83 c4 0c             	add    esp,0xc
c001ebeb:	0f b6 c0             	movzx  eax,al
c001ebee:	50                   	push   eax
c001ebef:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c001ebf3:	50                   	push   eax
c001ebf4:	56                   	push   esi
c001ebf5:	e8 24 fc ff ff       	call   c001e81e <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c001ebfa:	83 c4 10             	add    esp,0x10
c001ebfd:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001ec00:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001ec04:	74 03                	je     c001ec09 <Vm::faultHandler(regs*)+0x3ab>
c001ec06:	48                   	dec    eax
c001ec07:	eb 01                	jmp    c001ec0a <Vm::faultHandler(regs*)+0x3ac>
c001ec09:	40                   	inc    eax
c001ec0a:	0f b7 c0             	movzx  eax,ax
c001ec0d:	e9 8d 00 00 00       	jmp    c001ec9f <Vm::faultHandler(regs*)+0x441>
c001ec12:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c001ec15:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001ec18:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001ec1d:	74 29                	je     c001ec48 <Vm::faultHandler(regs*)+0x3ea>
c001ec1f:	3d ff ff 00 00       	cmp    eax,0xffff
c001ec24:	76 22                	jbe    c001ec48 <Vm::faultHandler(regs*)+0x3ea>
c001ec26:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001ec2a:	50                   	push   eax
c001ec2b:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001ec2f:	50                   	push   eax
c001ec30:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001ec34:	50                   	push   eax
c001ec35:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001ec39:	50                   	push   eax
c001ec3a:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001ec3e:	50                   	push   eax
c001ec3f:	6a 6d                	push   0x6d
c001ec41:	6a 6d                	push   0x6d
c001ec43:	e9 49 01 00 00       	jmp    c001ed91 <Vm::faultHandler(regs*)+0x533>
c001ec48:	0f b7 c8             	movzx  ecx,ax
c001ec4b:	0f b7 f6             	movzx  esi,si
c001ec4e:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001ec51:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001ec56:	74 20                	je     c001ec78 <Vm::faultHandler(regs*)+0x41a>
c001ec58:	ed                   	in     eax,dx
c001ec59:	55                   	push   ebp
c001ec5a:	50                   	push   eax
c001ec5b:	51                   	push   ecx
c001ec5c:	56                   	push   esi
c001ec5d:	e8 e7 fb ff ff       	call   c001e849 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c001ec62:	83 c4 10             	add    esp,0x10
c001ec65:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001ec68:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001ec6c:	74 05                	je     c001ec73 <Vm::faultHandler(regs*)+0x415>
c001ec6e:	83 e8 04             	sub    eax,0x4
c001ec71:	eb 27                	jmp    c001ec9a <Vm::faultHandler(regs*)+0x43c>
c001ec73:	83 c0 04             	add    eax,0x4
c001ec76:	eb 22                	jmp    c001ec9a <Vm::faultHandler(regs*)+0x43c>
c001ec78:	66 ed                	in     ax,dx
c001ec7a:	0f b7 c0             	movzx  eax,ax
c001ec7d:	57                   	push   edi
c001ec7e:	50                   	push   eax
c001ec7f:	51                   	push   ecx
c001ec80:	56                   	push   esi
c001ec81:	e8 ad fb ff ff       	call   c001e833 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c001ec86:	83 c4 10             	add    esp,0x10
c001ec89:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001ec8c:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001ec90:	74 05                	je     c001ec97 <Vm::faultHandler(regs*)+0x439>
c001ec92:	83 e8 02             	sub    eax,0x2
c001ec95:	eb 03                	jmp    c001ec9a <Vm::faultHandler(regs*)+0x43c>
c001ec97:	83 c0 02             	add    eax,0x2
c001ec9a:	25 ff ff 00 00       	and    eax,0xffff
c001ec9f:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c001eca2:	e9 27 02 00 00       	jmp    c001eece <Vm::faultHandler(regs*)+0x670>
c001eca7:	8d 46 ff             	lea    eax,[esi-0x1]
c001ecaa:	3c 05                	cmp    al,0x5
c001ecac:	77 24                	ja     c001ecd2 <Vm::faultHandler(regs*)+0x474>
c001ecae:	0f b6 c0             	movzx  eax,al
c001ecb1:	ff 24 85 8c bd 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd4274]
c001ecb8:	0f b7 fd             	movzx  edi,bp
c001ecbb:	eb 15                	jmp    c001ecd2 <Vm::faultHandler(regs*)+0x474>
c001ecbd:	0f b7 7b 0c          	movzx  edi,WORD PTR [ebx+0xc]
c001ecc1:	eb 0f                	jmp    c001ecd2 <Vm::faultHandler(regs*)+0x474>
c001ecc3:	0f b7 7b 08          	movzx  edi,WORD PTR [ebx+0x8]
c001ecc7:	eb 09                	jmp    c001ecd2 <Vm::faultHandler(regs*)+0x474>
c001ecc9:	0f b7 7b 04          	movzx  edi,WORD PTR [ebx+0x4]
c001eccd:	eb 03                	jmp    c001ecd2 <Vm::faultHandler(regs*)+0x474>
c001eccf:	0f b7 3b             	movzx  edi,WORD PTR [ebx]
c001ecd2:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001ecd5:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001ecda:	74 29                	je     c001ed05 <Vm::faultHandler(regs*)+0x4a7>
c001ecdc:	3d ff ff 00 00       	cmp    eax,0xffff
c001ece1:	76 22                	jbe    c001ed05 <Vm::faultHandler(regs*)+0x4a7>
c001ece3:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001ece7:	50                   	push   eax
c001ece8:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001ecec:	50                   	push   eax
c001eced:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001ecf1:	50                   	push   eax
c001ecf2:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001ecf6:	50                   	push   eax
c001ecf7:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001ecfb:	50                   	push   eax
c001ecfc:	6a 6e                	push   0x6e
c001ecfe:	6a 6e                	push   0x6e
c001ed00:	e9 8c 00 00 00       	jmp    c001ed91 <Vm::faultHandler(regs*)+0x533>
c001ed05:	0f b7 c0             	movzx  eax,ax
c001ed08:	52                   	push   edx
c001ed09:	52                   	push   edx
c001ed0a:	50                   	push   eax
c001ed0b:	57                   	push   edi
c001ed0c:	e8 d9 fa ff ff       	call   c001e7ea <Vm::readByteFromReal(unsigned short, unsigned short)>
c001ed11:	59                   	pop    ecx
c001ed12:	0f b6 c0             	movzx  eax,al
c001ed15:	5e                   	pop    esi
c001ed16:	50                   	push   eax
c001ed17:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001ed1b:	50                   	push   eax
c001ed1c:	e8 4b f7 ff ff       	call   c001e46c <Vm::outbv(unsigned short, unsigned char)>
c001ed21:	83 c4 10             	add    esp,0x10
c001ed24:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001ed27:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001ed2b:	74 03                	je     c001ed30 <Vm::faultHandler(regs*)+0x4d2>
c001ed2d:	48                   	dec    eax
c001ed2e:	eb 01                	jmp    c001ed31 <Vm::faultHandler(regs*)+0x4d3>
c001ed30:	40                   	inc    eax
c001ed31:	0f b7 c0             	movzx  eax,ax
c001ed34:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c001ed37:	e9 92 01 00 00       	jmp    c001eece <Vm::faultHandler(regs*)+0x670>
c001ed3c:	8d 46 ff             	lea    eax,[esi-0x1]
c001ed3f:	3c 05                	cmp    al,0x5
c001ed41:	77 1f                	ja     c001ed62 <Vm::faultHandler(regs*)+0x504>
c001ed43:	0f b6 c0             	movzx  eax,al
c001ed46:	ff 24 85 a4 bd 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd425c]
c001ed4d:	89 ef                	mov    edi,ebp
c001ed4f:	eb 11                	jmp    c001ed62 <Vm::faultHandler(regs*)+0x504>
c001ed51:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c001ed54:	eb 0c                	jmp    c001ed62 <Vm::faultHandler(regs*)+0x504>
c001ed56:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c001ed59:	eb 07                	jmp    c001ed62 <Vm::faultHandler(regs*)+0x504>
c001ed5b:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c001ed5e:	eb 02                	jmp    c001ed62 <Vm::faultHandler(regs*)+0x504>
c001ed60:	8b 3b                	mov    edi,DWORD PTR [ebx]
c001ed62:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c001ed65:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001ed6a:	74 37                	je     c001eda3 <Vm::faultHandler(regs*)+0x545>
c001ed6c:	81 fe ff ff 00 00    	cmp    esi,0xffff
c001ed72:	76 2f                	jbe    c001eda3 <Vm::faultHandler(regs*)+0x545>
c001ed74:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001ed78:	50                   	push   eax
c001ed79:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001ed7d:	50                   	push   eax
c001ed7e:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001ed82:	50                   	push   eax
c001ed83:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001ed87:	50                   	push   eax
c001ed88:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001ed8c:	50                   	push   eax
c001ed8d:	6a 6f                	push   0x6f
c001ed8f:	6a 6f                	push   0x6f
c001ed91:	68 32 bd 02 c0       	push   0xc002bd32
c001ed96:	e8 2e 39 ff ff       	call   c00126c9 <Dbg::kprintf(char const*, ...)>
c001ed9b:	83 c4 20             	add    esp,0x20
c001ed9e:	e9 86 01 00 00       	jmp    c001ef29 <Vm::faultHandler(regs*)+0x6cb>
c001eda3:	0f b7 d7             	movzx  edx,di
c001eda6:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c001eda9:	0f b7 c6             	movzx  eax,si
c001edac:	81 e1 00 04 00 00    	and    ecx,0x400
c001edb2:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c001edb5:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001edba:	74 1d                	je     c001edd9 <Vm::faultHandler(regs*)+0x57b>
c001edbc:	55                   	push   ebp
c001edbd:	55                   	push   ebp
c001edbe:	50                   	push   eax
c001edbf:	52                   	push   edx
c001edc0:	e8 48 fa ff ff       	call   c001e80d <Vm::readDwordFromReal(unsigned short, unsigned short)>
c001edc5:	83 c4 10             	add    esp,0x10
c001edc8:	89 fa                	mov    edx,edi
c001edca:	ef                   	out    dx,eax
c001edcb:	85 c9                	test   ecx,ecx
c001edcd:	74 05                	je     c001edd4 <Vm::faultHandler(regs*)+0x576>
c001edcf:	83 ee 04             	sub    esi,0x4
c001edd2:	eb 21                	jmp    c001edf5 <Vm::faultHandler(regs*)+0x597>
c001edd4:	83 c6 04             	add    esi,0x4
c001edd7:	eb 1c                	jmp    c001edf5 <Vm::faultHandler(regs*)+0x597>
c001edd9:	55                   	push   ebp
c001edda:	55                   	push   ebp
c001eddb:	50                   	push   eax
c001eddc:	52                   	push   edx
c001eddd:	e8 19 fa ff ff       	call   c001e7fb <Vm::readWordFromReal(unsigned short, unsigned short)>
c001ede2:	83 c4 10             	add    esp,0x10
c001ede5:	89 fa                	mov    edx,edi
c001ede7:	66 ef                	out    dx,ax
c001ede9:	85 c9                	test   ecx,ecx
c001edeb:	74 05                	je     c001edf2 <Vm::faultHandler(regs*)+0x594>
c001eded:	83 ee 02             	sub    esi,0x2
c001edf0:	eb 03                	jmp    c001edf5 <Vm::faultHandler(regs*)+0x597>
c001edf2:	83 c6 02             	add    esi,0x2
c001edf5:	81 e6 ff ff 00 00    	and    esi,0xffff
c001edfb:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c001edfe:	e9 cb 00 00 00       	jmp    c001eece <Vm::faultHandler(regs*)+0x670>
c001ee03:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c001ee0a:	83 ec 0c             	sub    esp,0xc
c001ee0d:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001ee11:	50                   	push   eax
c001ee12:	e8 42 f6 ff ff       	call   c001e459 <Vm::inbv(unsigned short)>
c001ee17:	0f b6 c0             	movzx  eax,al
c001ee1a:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c001ee1d:	eb 3f                	jmp    c001ee5e <Vm::faultHandler(regs*)+0x600>
c001ee1f:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001ee24:	74 07                	je     c001ee2d <Vm::faultHandler(regs*)+0x5cf>
c001ee26:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c001ee2a:	ed                   	in     eax,dx
c001ee2b:	eb 14                	jmp    c001ee41 <Vm::faultHandler(regs*)+0x5e3>
c001ee2d:	8b 73 2c             	mov    esi,DWORD PTR [ebx+0x2c]
c001ee30:	66 31 f6             	xor    si,si
c001ee33:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c001ee36:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c001ee3a:	66 ed                	in     ax,dx
c001ee3c:	0f b7 c0             	movzx  eax,ax
c001ee3f:	09 f0                	or     eax,esi
c001ee41:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001ee44:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001ee48:	e9 84 00 00 00       	jmp    c001eed1 <Vm::faultHandler(regs*)+0x673>
c001ee4d:	52                   	push   edx
c001ee4e:	52                   	push   edx
c001ee4f:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c001ee53:	50                   	push   eax
c001ee54:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001ee58:	50                   	push   eax
c001ee59:	e8 0e f6 ff ff       	call   c001e46c <Vm::outbv(unsigned short, unsigned char)>
c001ee5e:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001ee62:	eb 53                	jmp    c001eeb7 <Vm::faultHandler(regs*)+0x659>
c001ee64:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001ee67:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c001ee6b:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001ee70:	74 03                	je     c001ee75 <Vm::faultHandler(regs*)+0x617>
c001ee72:	ef                   	out    dx,eax
c001ee73:	eb cf                	jmp    c001ee44 <Vm::faultHandler(regs*)+0x5e6>
c001ee75:	66 ef                	out    dx,ax
c001ee77:	eb cb                	jmp    c001ee44 <Vm::faultHandler(regs*)+0x5e6>
c001ee79:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c001ee80:	83 ec 0c             	sub    esp,0xc
c001ee83:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001ee87:	50                   	push   eax
c001ee88:	e8 cc f5 ff ff       	call   c001e459 <Vm::inbv(unsigned short)>
c001ee8d:	0f b6 c0             	movzx  eax,al
c001ee90:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c001ee93:	eb 1f                	jmp    c001eeb4 <Vm::faultHandler(regs*)+0x656>
c001ee95:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001ee98:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001ee9d:	74 03                	je     c001eea2 <Vm::faultHandler(regs*)+0x644>
c001ee9f:	ed                   	in     eax,dx
c001eea0:	eb 0d                	jmp    c001eeaf <Vm::faultHandler(regs*)+0x651>
c001eea2:	66 ed                	in     ax,dx
c001eea4:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c001eea7:	0f b7 c0             	movzx  eax,ax
c001eeaa:	66 31 d2             	xor    dx,dx
c001eead:	09 d0                	or     eax,edx
c001eeaf:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001eeb2:	eb 1a                	jmp    c001eece <Vm::faultHandler(regs*)+0x670>
c001eeb4:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001eeb7:	83 c4 10             	add    esp,0x10
c001eeba:	eb 15                	jmp    c001eed1 <Vm::faultHandler(regs*)+0x673>
c001eebc:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001eebf:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001eec2:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001eec7:	74 03                	je     c001eecc <Vm::faultHandler(regs*)+0x66e>
c001eec9:	ef                   	out    dx,eax
c001eeca:	eb 02                	jmp    c001eece <Vm::faultHandler(regs*)+0x670>
c001eecc:	66 ef                	out    dx,ax
c001eece:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001eed1:	b0 01                	mov    al,0x1
c001eed3:	eb 56                	jmp    c001ef2b <Vm::faultHandler(regs*)+0x6cd>
c001eed5:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001eed9:	50                   	push   eax
c001eeda:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001eede:	50                   	push   eax
c001eedf:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001eee3:	50                   	push   eax
c001eee4:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001eee8:	50                   	push   eax
c001eee9:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001eeed:	50                   	push   eax
c001eeee:	52                   	push   edx
c001eeef:	52                   	push   edx
c001eef0:	68 5f bd 02 c0       	push   0xc002bd5f
c001eef5:	e8 cf 37 ff ff       	call   c00126c9 <Dbg::kprintf(char const*, ...)>
c001eefa:	83 c4 20             	add    esp,0x20
c001eefd:	83 ec 0c             	sub    esp,0xc
c001ef00:	6a 60                	push   0x60
c001ef02:	e8 52 f5 ff ff       	call   c001e459 <Vm::inbv(unsigned short)>
c001ef07:	83 c4 10             	add    esp,0x10
c001ef0a:	3c 1c                	cmp    al,0x1c
c001ef0c:	74 04                	je     c001ef12 <Vm::faultHandler(regs*)+0x6b4>
c001ef0e:	3c 5a                	cmp    al,0x5a
c001ef10:	75 eb                	jne    c001eefd <Vm::faultHandler(regs*)+0x69f>
c001ef12:	3c 5a                	cmp    al,0x5a
c001ef14:	74 04                	je     c001ef1a <Vm::faultHandler(regs*)+0x6bc>
c001ef16:	3c 1c                	cmp    al,0x1c
c001ef18:	75 0f                	jne    c001ef29 <Vm::faultHandler(regs*)+0x6cb>
c001ef1a:	83 ec 0c             	sub    esp,0xc
c001ef1d:	6a 60                	push   0x60
c001ef1f:	e8 35 f5 ff ff       	call   c001e459 <Vm::inbv(unsigned short)>
c001ef24:	83 c4 10             	add    esp,0x10
c001ef27:	eb e9                	jmp    c001ef12 <Vm::faultHandler(regs*)+0x6b4>
c001ef29:	31 c0                	xor    eax,eax
c001ef2b:	83 c4 1c             	add    esp,0x1c
c001ef2e:	5b                   	pop    ebx
c001ef2f:	5e                   	pop    esi
c001ef30:	5f                   	pop    edi
c001ef31:	5d                   	pop    ebp
c001ef32:	c3                   	ret    

c001ef33 <Vm::fpuInternalTo32(unsigned long long)>:
c001ef33:	57                   	push   edi
c001ef34:	56                   	push   esi
c001ef35:	53                   	push   ebx
c001ef36:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ef3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef3e:	89 d6                	mov    esi,edx
c001ef40:	89 d7                	mov    edi,edx
c001ef42:	89 c1                	mov    ecx,eax
c001ef44:	c1 ef 14             	shr    edi,0x14
c001ef47:	89 d3                	mov    ebx,edx
c001ef49:	81 e7 ff 07 00 00    	and    edi,0x7ff
c001ef4f:	31 d2                	xor    edx,edx
c001ef51:	89 f8                	mov    eax,edi
c001ef53:	81 e6 00 00 00 80    	and    esi,0x80000000
c001ef59:	bf ff 00 00 00       	mov    edi,0xff
c001ef5e:	05 80 fc ff ff       	add    eax,0xfffffc80
c001ef63:	83 d2 ff             	adc    edx,0xffffffff
c001ef66:	39 c7                	cmp    edi,eax
c001ef68:	bf 00 00 00 00       	mov    edi,0x0
c001ef6d:	19 d7                	sbb    edi,edx
c001ef6f:	72 15                	jb     c001ef86 <Vm::fpuInternalTo32(unsigned long long)+0x53>
c001ef71:	0f ac d9 1d          	shrd   ecx,ebx,0x1d
c001ef75:	c1 e0 17             	shl    eax,0x17
c001ef78:	81 e1 ff ff 7f 00    	and    ecx,0x7fffff
c001ef7e:	09 f1                	or     ecx,esi
c001ef80:	09 c1                	or     ecx,eax
c001ef82:	89 cf                	mov    edi,ecx
c001ef84:	eb 02                	jmp    c001ef88 <Vm::fpuInternalTo32(unsigned long long)+0x55>
c001ef86:	31 ff                	xor    edi,edi
c001ef88:	89 f8                	mov    eax,edi
c001ef8a:	5b                   	pop    ebx
c001ef8b:	5e                   	pop    esi
c001ef8c:	5f                   	pop    edi
c001ef8d:	c3                   	ret    

c001ef8e <Vm::fpuInternalTo64(unsigned long long)>:
c001ef8e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ef92:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ef96:	c3                   	ret    

c001ef97 <Vm::fpu32ToInternal(unsigned int)>:
c001ef97:	57                   	push   edi
c001ef98:	31 ff                	xor    edi,edi
c001ef9a:	56                   	push   esi
c001ef9b:	53                   	push   ebx
c001ef9c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001efa0:	89 cb                	mov    ebx,ecx
c001efa2:	89 ce                	mov    esi,ecx
c001efa4:	81 e3 00 00 00 80    	and    ebx,0x80000000
c001efaa:	81 e6 ff ff 7f 00    	and    esi,0x7fffff
c001efb0:	c1 e9 17             	shr    ecx,0x17
c001efb3:	89 f0                	mov    eax,esi
c001efb5:	0f b6 d1             	movzx  edx,cl
c001efb8:	81 c2 80 03 00 00    	add    edx,0x380
c001efbe:	89 d1                	mov    ecx,edx
c001efc0:	89 fa                	mov    edx,edi
c001efc2:	c1 e1 14             	shl    ecx,0x14
c001efc5:	0f a4 c2 1d          	shld   edx,eax,0x1d
c001efc9:	c1 e0 1d             	shl    eax,0x1d
c001efcc:	89 d7                	mov    edi,edx
c001efce:	89 c6                	mov    esi,eax
c001efd0:	89 ca                	mov    edx,ecx
c001efd2:	89 f0                	mov    eax,esi
c001efd4:	09 fa                	or     edx,edi
c001efd6:	09 da                	or     edx,ebx
c001efd8:	5b                   	pop    ebx
c001efd9:	5e                   	pop    esi
c001efda:	5f                   	pop    edi
c001efdb:	c3                   	ret    

c001efdc <Vm::fpu64ToInternal(unsigned long long)>:
c001efdc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001efe0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001efe4:	c3                   	ret    

c001efe5 <Vm::fpuFloatToLong(unsigned long long)>:
c001efe5:	57                   	push   edi
c001efe6:	31 c0                	xor    eax,eax
c001efe8:	56                   	push   esi
c001efe9:	31 d2                	xor    edx,edx
c001efeb:	53                   	push   ebx
c001efec:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001eff0:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001eff4:	89 d9                	mov    ecx,ebx
c001eff6:	c1 e9 14             	shr    ecx,0x14
c001eff9:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c001efff:	89 cf                	mov    edi,ecx
c001f001:	81 ef ff 03 00 00    	sub    edi,0x3ff
c001f007:	78 33                	js     c001f03c <Vm::fpuFloatToLong(unsigned long long)+0x57>
c001f009:	89 d9                	mov    ecx,ebx
c001f00b:	89 f0                	mov    eax,esi
c001f00d:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001f013:	81 c9 00 00 10 00    	or     ecx,0x100000
c001f019:	89 ca                	mov    edx,ecx
c001f01b:	b9 34 00 00 00       	mov    ecx,0x34
c001f020:	29 f9                	sub    ecx,edi
c001f022:	0f ad d0             	shrd   eax,edx,cl
c001f025:	d3 fa                	sar    edx,cl
c001f027:	f6 c1 20             	test   cl,0x20
c001f02a:	74 05                	je     c001f031 <Vm::fpuFloatToLong(unsigned long long)+0x4c>
c001f02c:	89 d0                	mov    eax,edx
c001f02e:	c1 fa 1f             	sar    edx,0x1f
c001f031:	85 db                	test   ebx,ebx
c001f033:	79 07                	jns    c001f03c <Vm::fpuFloatToLong(unsigned long long)+0x57>
c001f035:	f7 d8                	neg    eax
c001f037:	83 d2 00             	adc    edx,0x0
c001f03a:	f7 da                	neg    edx
c001f03c:	5b                   	pop    ebx
c001f03d:	5e                   	pop    esi
c001f03e:	5f                   	pop    edi
c001f03f:	c3                   	ret    

c001f040 <Vm::fpuULongToFloat(unsigned long long)>:
c001f040:	57                   	push   edi
c001f041:	31 c9                	xor    ecx,ecx
c001f043:	56                   	push   esi
c001f044:	53                   	push   ebx
c001f045:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001f049:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001f04d:	0f ba e7 14          	bt     edi,0x14
c001f051:	72 07                	jb     c001f05a <Vm::fpuULongToFloat(unsigned long long)+0x1a>
c001f053:	01 f6                	add    esi,esi
c001f055:	11 ff                	adc    edi,edi
c001f057:	41                   	inc    ecx
c001f058:	eb f3                	jmp    c001f04d <Vm::fpuULongToFloat(unsigned long long)+0xd>
c001f05a:	89 fa                	mov    edx,edi
c001f05c:	89 f0                	mov    eax,esi
c001f05e:	bb 33 04 00 00       	mov    ebx,0x433
c001f063:	81 e2 ff ff 0f 00    	and    edx,0xfffff
c001f069:	29 cb                	sub    ebx,ecx
c001f06b:	89 d9                	mov    ecx,ebx
c001f06d:	5b                   	pop    ebx
c001f06e:	c1 e1 14             	shl    ecx,0x14
c001f071:	5e                   	pop    esi
c001f072:	09 ca                	or     edx,ecx
c001f074:	5f                   	pop    edi
c001f075:	c3                   	ret    

c001f076 <Vm::fpuLongToFloat(long long)>:
c001f076:	56                   	push   esi
c001f077:	31 c0                	xor    eax,eax
c001f079:	53                   	push   ebx
c001f07a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001f07e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001f082:	39 c8                	cmp    eax,ecx
c001f084:	19 d8                	sbb    eax,ebx
c001f086:	7d 04                	jge    c001f08c <Vm::fpuLongToFloat(long long)+0x16>
c001f088:	31 f6                	xor    esi,esi
c001f08a:	eb 0c                	jmp    c001f098 <Vm::fpuLongToFloat(long long)+0x22>
c001f08c:	f7 d9                	neg    ecx
c001f08e:	be 01 00 00 00       	mov    esi,0x1
c001f093:	83 d3 00             	adc    ebx,0x0
c001f096:	f7 db                	neg    ebx
c001f098:	31 c0                	xor    eax,eax
c001f09a:	0f ba e3 14          	bt     ebx,0x14
c001f09e:	72 07                	jb     c001f0a7 <Vm::fpuLongToFloat(long long)+0x31>
c001f0a0:	01 c9                	add    ecx,ecx
c001f0a2:	11 db                	adc    ebx,ebx
c001f0a4:	40                   	inc    eax
c001f0a5:	eb f3                	jmp    c001f09a <Vm::fpuLongToFloat(long long)+0x24>
c001f0a7:	ba 33 04 00 00       	mov    edx,0x433
c001f0ac:	29 c2                	sub    edx,eax
c001f0ae:	89 c8                	mov    eax,ecx
c001f0b0:	c1 e2 14             	shl    edx,0x14
c001f0b3:	89 d9                	mov    ecx,ebx
c001f0b5:	89 f3                	mov    ebx,esi
c001f0b7:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001f0bd:	09 ca                	or     edx,ecx
c001f0bf:	84 db                	test   bl,bl
c001f0c1:	74 06                	je     c001f0c9 <Vm::fpuLongToFloat(long long)+0x53>
c001f0c3:	81 ca 00 00 00 80    	or     edx,0x80000000
c001f0c9:	5b                   	pop    ebx
c001f0ca:	5e                   	pop    esi
c001f0cb:	c3                   	ret    

c001f0cc <Vm::fpuGet0()>:
c001f0cc:	31 c0                	xor    eax,eax
c001f0ce:	31 d2                	xor    edx,edx
c001f0d0:	c3                   	ret    

c001f0d1 <Vm::fpuGet1()>:
c001f0d1:	b8 01 00 00 00       	mov    eax,0x1
c001f0d6:	31 d2                	xor    edx,edx
c001f0d8:	c3                   	ret    

c001f0d9 <Vm::fpuGetPi()>:
c001f0d9:	b8 03 00 00 00       	mov    eax,0x3
c001f0de:	31 d2                	xor    edx,edx
c001f0e0:	c3                   	ret    

c001f0e1 <Vm::fpuGetLog2E()>:
c001f0e1:	83 ec 18             	sub    esp,0x18
c001f0e4:	68 bc bd 02 c0       	push   0xc002bdbc
c001f0e9:	e8 47 ad ff ff       	call   c0019e35 <Krnl::panic(char const*)>
c001f0ee:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f0f3:	31 d2                	xor    edx,edx
c001f0f5:	83 c4 1c             	add    esp,0x1c
c001f0f8:	c3                   	ret    

c001f0f9 <Vm::fpuGetLogE2()>:
c001f0f9:	83 ec 18             	sub    esp,0x18
c001f0fc:	68 c8 bd 02 c0       	push   0xc002bdc8
c001f101:	e8 2f ad ff ff       	call   c0019e35 <Krnl::panic(char const*)>
c001f106:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f10b:	31 d2                	xor    edx,edx
c001f10d:	83 c4 1c             	add    esp,0x1c
c001f110:	c3                   	ret    

c001f111 <Vm::fpuGetLog210()>:
c001f111:	83 ec 18             	sub    esp,0x18
c001f114:	68 d4 bd 02 c0       	push   0xc002bdd4
c001f119:	e8 17 ad ff ff       	call   c0019e35 <Krnl::panic(char const*)>
c001f11e:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f123:	31 d2                	xor    edx,edx
c001f125:	83 c4 1c             	add    esp,0x1c
c001f128:	c3                   	ret    

c001f129 <Vm::fpuGetLog102()>:
c001f129:	83 ec 18             	sub    esp,0x18
c001f12c:	68 e1 bd 02 c0       	push   0xc002bde1
c001f131:	e8 ff ac ff ff       	call   c0019e35 <Krnl::panic(char const*)>
c001f136:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f13b:	31 d2                	xor    edx,edx
c001f13d:	83 c4 1c             	add    esp,0x1c
c001f140:	c3                   	ret    

c001f141 <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>:
c001f141:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f145:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001f149:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f14d:	1b 44 24 10          	sbb    eax,DWORD PTR [esp+0x10]
c001f151:	0f 92 c0             	setb   al
c001f154:	c3                   	ret    

c001f155 <Vm::fpuAreEqual(unsigned long long, unsigned long long)>:
c001f155:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001f159:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f15d:	33 54 24 04          	xor    edx,DWORD PTR [esp+0x4]
c001f161:	33 44 24 08          	xor    eax,DWORD PTR [esp+0x8]
c001f165:	09 c2                	or     edx,eax
c001f167:	0f 94 c0             	sete   al
c001f16a:	c3                   	ret    

c001f16b <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>:
c001f16b:	57                   	push   edi
c001f16c:	56                   	push   esi
c001f16d:	53                   	push   ebx
c001f16e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f172:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f176:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001f17a:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001f17e:	57                   	push   edi
c001f17f:	56                   	push   esi
c001f180:	53                   	push   ebx
c001f181:	51                   	push   ecx
c001f182:	e8 ce ff ff ff       	call   c001f155 <Vm::fpuAreEqual(unsigned long long, unsigned long long)>
c001f187:	83 c4 10             	add    esp,0x10
c001f18a:	88 c2                	mov    dl,al
c001f18c:	31 c0                	xor    eax,eax
c001f18e:	84 d2                	test   dl,dl
c001f190:	75 0c                	jne    c001f19e <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)+0x33>
c001f192:	57                   	push   edi
c001f193:	56                   	push   esi
c001f194:	53                   	push   ebx
c001f195:	51                   	push   ecx
c001f196:	e8 a6 ff ff ff       	call   c001f141 <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>
c001f19b:	83 c4 10             	add    esp,0x10
c001f19e:	83 e0 01             	and    eax,0x1
c001f1a1:	5b                   	pop    ebx
c001f1a2:	88 c1                	mov    cl,al
c001f1a4:	83 e2 01             	and    edx,0x1
c001f1a7:	a0 61 0f 03 c0       	mov    al,ds:0xc0030f61
c001f1ac:	c1 e2 06             	shl    edx,0x6
c001f1af:	83 e0 ba             	and    eax,0xffffffba
c001f1b2:	5e                   	pop    esi
c001f1b3:	09 c8                	or     eax,ecx
c001f1b5:	5f                   	pop    edi
c001f1b6:	09 d0                	or     eax,edx
c001f1b8:	a2 61 0f 03 c0       	mov    ds:0xc0030f61,al
c001f1bd:	c3                   	ret    

c001f1be <Vm::fpuAdd(unsigned long long, unsigned long long)>:
c001f1be:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f1c2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f1c6:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001f1ca:	13 54 24 08          	adc    edx,DWORD PTR [esp+0x8]
c001f1ce:	c3                   	ret    

c001f1cf <Vm::fpuAbs(unsigned long long)>:
c001f1cf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f1d3:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f1d7:	c3                   	ret    

c001f1d8 <Vm::fpuChs(unsigned long long)>:
c001f1d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f1dc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f1e0:	f7 d8                	neg    eax
c001f1e2:	83 d2 00             	adc    edx,0x0
c001f1e5:	f7 da                	neg    edx
c001f1e7:	c3                   	ret    

c001f1e8 <Vm::fpuSub(unsigned long long, unsigned long long)>:
c001f1e8:	f7 5c 24 0c          	neg    DWORD PTR [esp+0xc]
c001f1ec:	83 54 24 10 00       	adc    DWORD PTR [esp+0x10],0x0
c001f1f1:	f7 5c 24 10          	neg    DWORD PTR [esp+0x10]
c001f1f5:	eb c7                	jmp    c001f1be <Vm::fpuAdd(unsigned long long, unsigned long long)>

c001f1f7 <Vm::fpuMultiply(unsigned long long, unsigned long long)>:
c001f1f7:	53                   	push   ebx
c001f1f8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f1fc:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f200:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001f204:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f208:	0f af ca             	imul   ecx,edx
c001f20b:	0f af d8             	imul   ebx,eax
c001f20e:	f7 e2                	mul    edx
c001f210:	01 d9                	add    ecx,ebx
c001f212:	5b                   	pop    ebx
c001f213:	01 ca                	add    edx,ecx
c001f215:	c3                   	ret    

c001f216 <Vm::fpuDivide(unsigned long long, unsigned long long)>:
c001f216:	83 ec 0c             	sub    esp,0xc
c001f219:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f21d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f221:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f225:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f229:	e8 e6 74 00 00       	call   c0026714 <__udivdi3>
c001f22e:	83 c4 1c             	add    esp,0x1c
c001f231:	c3                   	ret    

c001f232 <Vm::fpuSquare(unsigned long long)>:
c001f232:	50                   	push   eax
c001f233:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f237:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001f23b:	52                   	push   edx
c001f23c:	50                   	push   eax
c001f23d:	52                   	push   edx
c001f23e:	50                   	push   eax
c001f23f:	e8 b3 ff ff ff       	call   c001f1f7 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001f244:	83 c4 14             	add    esp,0x14
c001f247:	c3                   	ret    

c001f248 <Vm::fpuGetReg(int)>:
c001f248:	83 ec 0c             	sub    esp,0xc
c001f24b:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001f250:	76 10                	jbe    c001f262 <Vm::fpuGetReg(int)+0x1a>
c001f252:	83 ec 0c             	sub    esp,0xc
c001f255:	68 ee bd 02 c0       	push   0xc002bdee
c001f25a:	e8 d6 ab ff ff       	call   c0019e35 <Krnl::panic(char const*)>
c001f25f:	83 c4 10             	add    esp,0x10
c001f262:	a0 61 0f 03 c0       	mov    al,ds:0xc0030f61
c001f267:	b9 08 00 00 00       	mov    ecx,0x8
c001f26c:	c0 e8 03             	shr    al,0x3
c001f26f:	83 e0 07             	and    eax,0x7
c001f272:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001f276:	99                   	cdq    
c001f277:	f7 f9                	idiv   ecx
c001f279:	8b 04 d5 64 0f 03 c0 	mov    eax,DWORD PTR [edx*8-0x3ffcf09c]
c001f280:	8b 14 d5 68 0f 03 c0 	mov    edx,DWORD PTR [edx*8-0x3ffcf098]
c001f287:	83 c4 0c             	add    esp,0xc
c001f28a:	c3                   	ret    

c001f28b <Vm::fpuSetReg(int, unsigned long long)>:
c001f28b:	57                   	push   edi
c001f28c:	56                   	push   esi
c001f28d:	52                   	push   edx
c001f28e:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001f292:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001f296:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001f29b:	76 10                	jbe    c001f2ad <Vm::fpuSetReg(int, unsigned long long)+0x22>
c001f29d:	83 ec 0c             	sub    esp,0xc
c001f2a0:	68 01 be 02 c0       	push   0xc002be01
c001f2a5:	e8 8b ab ff ff       	call   c0019e35 <Krnl::panic(char const*)>
c001f2aa:	83 c4 10             	add    esp,0x10
c001f2ad:	a0 61 0f 03 c0       	mov    al,ds:0xc0030f61
c001f2b2:	b9 08 00 00 00       	mov    ecx,0x8
c001f2b7:	c0 e8 03             	shr    al,0x3
c001f2ba:	83 e0 07             	and    eax,0x7
c001f2bd:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001f2c1:	99                   	cdq    
c001f2c2:	f7 f9                	idiv   ecx
c001f2c4:	89 34 d5 64 0f 03 c0 	mov    DWORD PTR [edx*8-0x3ffcf09c],esi
c001f2cb:	89 3c d5 68 0f 03 c0 	mov    DWORD PTR [edx*8-0x3ffcf098],edi
c001f2d2:	58                   	pop    eax
c001f2d3:	5e                   	pop    esi
c001f2d4:	5f                   	pop    edi
c001f2d5:	c3                   	ret    

c001f2d6 <Vm::fpuPush(unsigned long long)>:
c001f2d6:	a0 61 0f 03 c0       	mov    al,ds:0xc0030f61
c001f2db:	c0 e8 03             	shr    al,0x3
c001f2de:	83 e0 07             	and    eax,0x7
c001f2e1:	83 c0 07             	add    eax,0x7
c001f2e4:	88 c2                	mov    dl,al
c001f2e6:	83 e0 07             	and    eax,0x7
c001f2e9:	83 e2 07             	and    edx,0x7
c001f2ec:	8d 0c d5 00 00 00 00 	lea    ecx,[edx*8+0x0]
c001f2f3:	8a 15 61 0f 03 c0    	mov    dl,BYTE PTR ds:0xc0030f61
c001f2f9:	83 e2 c7             	and    edx,0xffffffc7
c001f2fc:	09 ca                	or     edx,ecx
c001f2fe:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f302:	88 15 61 0f 03 c0    	mov    BYTE PTR ds:0xc0030f61,dl
c001f308:	89 0c c5 68 0f 03 c0 	mov    DWORD PTR [eax*8-0x3ffcf098],ecx
c001f30f:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001f313:	89 14 c5 64 0f 03 c0 	mov    DWORD PTR [eax*8-0x3ffcf09c],edx
c001f31a:	a1 a4 0f 03 c0       	mov    eax,ds:0xc0030fa4
c001f31f:	83 f8 08             	cmp    eax,0x8
c001f322:	75 08                	jne    c001f32c <Vm::fpuPush(unsigned long long)+0x56>
c001f324:	80 0d 60 0f 03 c0 40 	or     BYTE PTR ds:0xc0030f60,0x40
c001f32b:	c3                   	ret    
c001f32c:	40                   	inc    eax
c001f32d:	a3 a4 0f 03 c0       	mov    ds:0xc0030fa4,eax
c001f332:	c3                   	ret    

c001f333 <Vm::fpuPop()>:
c001f333:	8a 0d 61 0f 03 c0    	mov    cl,BYTE PTR ds:0xc0030f61
c001f339:	53                   	push   ebx
c001f33a:	c0 e9 03             	shr    cl,0x3
c001f33d:	8a 1d 61 0f 03 c0    	mov    bl,BYTE PTR ds:0xc0030f61
c001f343:	83 e1 07             	and    ecx,0x7
c001f346:	83 e3 c7             	and    ebx,0xffffffc7
c001f349:	8b 04 cd 64 0f 03 c0 	mov    eax,DWORD PTR [ecx*8-0x3ffcf09c]
c001f350:	8b 14 cd 68 0f 03 c0 	mov    edx,DWORD PTR [ecx*8-0x3ffcf098]
c001f357:	8d 0c cd 08 00 00 00 	lea    ecx,[ecx*8+0x8]
c001f35e:	83 e1 38             	and    ecx,0x38
c001f361:	09 d9                	or     ecx,ebx
c001f363:	88 0d 61 0f 03 c0    	mov    BYTE PTR ds:0xc0030f61,cl
c001f369:	8b 0d a4 0f 03 c0    	mov    ecx,DWORD PTR ds:0xc0030fa4
c001f36f:	85 c9                	test   ecx,ecx
c001f371:	74 09                	je     c001f37c <Vm::fpuPop()+0x49>
c001f373:	49                   	dec    ecx
c001f374:	89 0d a4 0f 03 c0    	mov    DWORD PTR ds:0xc0030fa4,ecx
c001f37a:	eb 07                	jmp    c001f383 <Vm::fpuPop()+0x50>
c001f37c:	80 0d 60 0f 03 c0 40 	or     BYTE PTR ds:0xc0030f60,0x40
c001f383:	5b                   	pop    ebx
c001f384:	c3                   	ret    

c001f385 <Vm::x87Handler(regs*)>:
c001f385:	55                   	push   ebp
c001f386:	57                   	push   edi
c001f387:	56                   	push   esi
c001f388:	53                   	push   ebx
c001f389:	83 ec 1c             	sub    esp,0x1c
c001f38c:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001f390:	c6 44 24 0a 00       	mov    BYTE PTR [esp+0xa],0x0
c001f395:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c001f398:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c001f3a0:	8d 44 24 0b          	lea    eax,[esp+0xb]
c001f3a4:	50                   	push   eax
c001f3a5:	8d 44 24 0e          	lea    eax,[esp+0xe]
c001f3a9:	50                   	push   eax
c001f3aa:	8d 44 24 14          	lea    eax,[esp+0x14]
c001f3ae:	50                   	push   eax
c001f3af:	53                   	push   ebx
c001f3b0:	e8 99 a1 ff ff       	call   c001954e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c001f3b5:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c001f3b8:	83 c4 10             	add    esp,0x10
c001f3bb:	89 c6                	mov    esi,eax
c001f3bd:	80 fa d9             	cmp    dl,0xd9
c001f3c0:	0f 85 52 01 00 00    	jne    c001f518 <Vm::x87Handler(regs*)+0x193>
c001f3c6:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f3ca:	8d 50 20             	lea    edx,[eax+0x20]
c001f3cd:	80 fa 0e             	cmp    dl,0xe
c001f3d0:	0f 87 86 00 00 00    	ja     c001f45c <Vm::x87Handler(regs*)+0xd7>
c001f3d6:	0f b6 d2             	movzx  edx,dl
c001f3d9:	ff 24 95 14 be 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd41ec]
c001f3e0:	e8 e7 fc ff ff       	call   c001f0cc <Vm::fpuGet0()>
c001f3e5:	eb 05                	jmp    c001f3ec <Vm::x87Handler(regs*)+0x67>
c001f3e7:	e8 e5 fc ff ff       	call   c001f0d1 <Vm::fpuGet1()>
c001f3ec:	57                   	push   edi
c001f3ed:	57                   	push   edi
c001f3ee:	52                   	push   edx
c001f3ef:	50                   	push   eax
c001f3f0:	e8 e1 fe ff ff       	call   c001f2d6 <Vm::fpuPush(unsigned long long)>
c001f3f5:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001f3f9:	83 c4 10             	add    esp,0x10
c001f3fc:	b0 01                	mov    al,0x1
c001f3fe:	e9 e3 09 00 00       	jmp    c001fde6 <Vm::x87Handler(regs*)+0xa61>
c001f403:	83 ec 0c             	sub    esp,0xc
c001f406:	6a 00                	push   0x0
c001f408:	e8 3b fe ff ff       	call   c001f248 <Vm::fpuGetReg(int)>
c001f40d:	59                   	pop    ecx
c001f40e:	5e                   	pop    esi
c001f40f:	52                   	push   edx
c001f410:	50                   	push   eax
c001f411:	e8 c2 fd ff ff       	call   c001f1d8 <Vm::fpuChs(unsigned long long)>
c001f416:	eb 13                	jmp    c001f42b <Vm::x87Handler(regs*)+0xa6>
c001f418:	83 ec 0c             	sub    esp,0xc
c001f41b:	6a 00                	push   0x0
c001f41d:	e8 26 fe ff ff       	call   c001f248 <Vm::fpuGetReg(int)>
c001f422:	5f                   	pop    edi
c001f423:	5d                   	pop    ebp
c001f424:	52                   	push   edx
c001f425:	50                   	push   eax
c001f426:	e8 a4 fd ff ff       	call   c001f1cf <Vm::fpuAbs(unsigned long long)>
c001f42b:	83 c4 0c             	add    esp,0xc
c001f42e:	52                   	push   edx
c001f42f:	50                   	push   eax
c001f430:	6a 00                	push   0x0
c001f432:	e8 54 fe ff ff       	call   c001f28b <Vm::fpuSetReg(int, unsigned long long)>
c001f437:	eb bc                	jmp    c001f3f5 <Vm::x87Handler(regs*)+0x70>
c001f439:	e8 d3 fc ff ff       	call   c001f111 <Vm::fpuGetLog210()>
c001f43e:	eb ac                	jmp    c001f3ec <Vm::x87Handler(regs*)+0x67>
c001f440:	e8 9c fc ff ff       	call   c001f0e1 <Vm::fpuGetLog2E()>
c001f445:	eb a5                	jmp    c001f3ec <Vm::x87Handler(regs*)+0x67>
c001f447:	e8 8d fc ff ff       	call   c001f0d9 <Vm::fpuGetPi()>
c001f44c:	eb 9e                	jmp    c001f3ec <Vm::x87Handler(regs*)+0x67>
c001f44e:	e8 d6 fc ff ff       	call   c001f129 <Vm::fpuGetLog102()>
c001f453:	eb 97                	jmp    c001f3ec <Vm::x87Handler(regs*)+0x67>
c001f455:	e8 9f fc ff ff       	call   c001f0f9 <Vm::fpuGetLogE2()>
c001f45a:	eb 90                	jmp    c001f3ec <Vm::x87Handler(regs*)+0x67>
c001f45c:	8d 50 40             	lea    edx,[eax+0x40]
c001f45f:	80 fa 07             	cmp    dl,0x7
c001f462:	77 15                	ja     c001f479 <Vm::x87Handler(regs*)+0xf4>
c001f464:	83 ec 0c             	sub    esp,0xc
c001f467:	2d c0 00 00 00       	sub    eax,0xc0
c001f46c:	50                   	push   eax
c001f46d:	e8 d6 fd ff ff       	call   c001f248 <Vm::fpuGetReg(int)>
c001f472:	59                   	pop    ecx
c001f473:	5e                   	pop    esi
c001f474:	e9 75 ff ff ff       	jmp    c001f3ee <Vm::x87Handler(regs*)+0x69>
c001f479:	8d 50 38             	lea    edx,[eax+0x38]
c001f47c:	80 fa 07             	cmp    dl,0x7
c001f47f:	77 3c                	ja     c001f4bd <Vm::x87Handler(regs*)+0x138>
c001f481:	83 ec 0c             	sub    esp,0xc
c001f484:	2d c8 00 00 00       	sub    eax,0xc8
c001f489:	50                   	push   eax
c001f48a:	e8 b9 fd ff ff       	call   c001f248 <Vm::fpuGetReg(int)>
c001f48f:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f496:	89 c6                	mov    esi,eax
c001f498:	89 d7                	mov    edi,edx
c001f49a:	e8 a9 fd ff ff       	call   c001f248 <Vm::fpuGetReg(int)>
c001f49f:	83 c4 0c             	add    esp,0xc
c001f4a2:	52                   	push   edx
c001f4a3:	50                   	push   eax
c001f4a4:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f4a8:	2d c8 00 00 00       	sub    eax,0xc8
c001f4ad:	50                   	push   eax
c001f4ae:	e8 d8 fd ff ff       	call   c001f28b <Vm::fpuSetReg(int, unsigned long long)>
c001f4b3:	83 c4 0c             	add    esp,0xc
c001f4b6:	57                   	push   edi
c001f4b7:	56                   	push   esi
c001f4b8:	e9 73 ff ff ff       	jmp    c001f430 <Vm::x87Handler(regs*)+0xab>
c001f4bd:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001f4c1:	84 d2                	test   dl,dl
c001f4c3:	75 0f                	jne    c001f4d4 <Vm::x87Handler(regs*)+0x14f>
c001f4c5:	83 ec 0c             	sub    esp,0xc
c001f4c8:	ff 36                	push   DWORD PTR [esi]
c001f4ca:	e8 c8 fa ff ff       	call   c001ef97 <Vm::fpu32ToInternal(unsigned int)>
c001f4cf:	e9 bf 00 00 00       	jmp    c001f593 <Vm::x87Handler(regs*)+0x20e>
c001f4d4:	80 fa 03             	cmp    dl,0x3
c001f4d7:	75 13                	jne    c001f4ec <Vm::x87Handler(regs*)+0x167>
c001f4d9:	e8 55 fe ff ff       	call   c001f333 <Vm::fpuPop()>
c001f4de:	55                   	push   ebp
c001f4df:	55                   	push   ebp
c001f4e0:	52                   	push   edx
c001f4e1:	50                   	push   eax
c001f4e2:	e8 4c fa ff ff       	call   c001ef33 <Vm::fpuInternalTo32(unsigned long long)>
c001f4e7:	e9 88 00 00 00       	jmp    c001f574 <Vm::x87Handler(regs*)+0x1ef>
c001f4ec:	80 fa 05             	cmp    dl,0x5
c001f4ef:	75 0e                	jne    c001f4ff <Vm::x87Handler(regs*)+0x17a>
c001f4f1:	66 8b 06             	mov    ax,WORD PTR [esi]
c001f4f4:	66 a3 62 0f 03 c0    	mov    ds:0xc0030f62,ax
c001f4fa:	e9 df 00 00 00       	jmp    c001f5de <Vm::x87Handler(regs*)+0x259>
c001f4ff:	31 c0                	xor    eax,eax
c001f501:	80 fa 07             	cmp    dl,0x7
c001f504:	0f 85 dc 08 00 00    	jne    c001fde6 <Vm::x87Handler(regs*)+0xa61>
c001f50a:	66 a1 62 0f 03 c0    	mov    ax,ds:0xc0030f62
c001f510:	66 89 06             	mov    WORD PTR [esi],ax
c001f513:	e9 c6 00 00 00       	jmp    c001f5de <Vm::x87Handler(regs*)+0x259>
c001f518:	80 fa d8             	cmp    dl,0xd8
c001f51b:	0f 84 c9 00 00 00    	je     c001f5ea <Vm::x87Handler(regs*)+0x265>
c001f521:	80 fa dc             	cmp    dl,0xdc
c001f524:	0f 84 0d 02 00 00    	je     c001f737 <Vm::x87Handler(regs*)+0x3b2>
c001f52a:	80 fa de             	cmp    dl,0xde
c001f52d:	0f 84 cd 02 00 00    	je     c001f800 <Vm::x87Handler(regs*)+0x47b>
c001f533:	80 fa dd             	cmp    dl,0xdd
c001f536:	0f 84 5f 04 00 00    	je     c001f99b <Vm::x87Handler(regs*)+0x616>
c001f53c:	80 fa da             	cmp    dl,0xda
c001f53f:	0f 84 24 05 00 00    	je     c001fa69 <Vm::x87Handler(regs*)+0x6e4>
c001f545:	80 fa df             	cmp    dl,0xdf
c001f548:	0f 84 68 05 00 00    	je     c001fab6 <Vm::x87Handler(regs*)+0x731>
c001f54e:	31 c0                	xor    eax,eax
c001f550:	80 fa db             	cmp    dl,0xdb
c001f553:	0f 85 8d 08 00 00    	jne    c001fde6 <Vm::x87Handler(regs*)+0xa61>
c001f559:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001f55d:	80 fa 03             	cmp    dl,0x3
c001f560:	0f 85 70 06 00 00    	jne    c001fbd6 <Vm::x87Handler(regs*)+0x851>
c001f566:	e8 c8 fd ff ff       	call   c001f333 <Vm::fpuPop()>
c001f56b:	55                   	push   ebp
c001f56c:	55                   	push   ebp
c001f56d:	52                   	push   edx
c001f56e:	50                   	push   eax
c001f56f:	e8 71 fa ff ff       	call   c001efe5 <Vm::fpuFloatToLong(unsigned long long)>
c001f574:	83 c4 10             	add    esp,0x10
c001f577:	89 06                	mov    DWORD PTR [esi],eax
c001f579:	eb 63                	jmp    c001f5de <Vm::x87Handler(regs*)+0x259>
c001f57b:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001f57f:	84 d2                	test   dl,dl
c001f581:	0f 85 e6 05 00 00    	jne    c001fb6d <Vm::x87Handler(regs*)+0x7e8>
c001f587:	57                   	push   edi
c001f588:	57                   	push   edi
c001f589:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001f58c:	ff 36                	push   DWORD PTR [esi]
c001f58e:	e8 49 fa ff ff       	call   c001efdc <Vm::fpu64ToInternal(unsigned long long)>
c001f593:	5e                   	pop    esi
c001f594:	5f                   	pop    edi
c001f595:	52                   	push   edx
c001f596:	50                   	push   eax
c001f597:	e8 3a fd ff ff       	call   c001f2d6 <Vm::fpuPush(unsigned long long)>
c001f59c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001f5a0:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001f5a3:	e9 51 fe ff ff       	jmp    c001f3f9 <Vm::x87Handler(regs*)+0x74>
c001f5a8:	80 fa 03             	cmp    dl,0x3
c001f5ab:	0f 85 d7 06 00 00    	jne    c001fc88 <Vm::x87Handler(regs*)+0x903>
c001f5b1:	57                   	push   edi
c001f5b2:	57                   	push   edi
c001f5b3:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001f5b6:	ff 36                	push   DWORD PTR [esi]
c001f5b8:	e8 1f fa ff ff       	call   c001efdc <Vm::fpu64ToInternal(unsigned long long)>
c001f5bd:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f5c4:	89 c6                	mov    esi,eax
c001f5c6:	89 d7                	mov    edi,edx
c001f5c8:	e8 7b fc ff ff       	call   c001f248 <Vm::fpuGetReg(int)>
c001f5cd:	57                   	push   edi
c001f5ce:	56                   	push   esi
c001f5cf:	52                   	push   edx
c001f5d0:	50                   	push   eax
c001f5d1:	e8 95 fb ff ff       	call   c001f16b <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001f5d6:	83 c4 20             	add    esp,0x20
c001f5d9:	e8 55 fd ff ff       	call   c001f333 <Vm::fpuPop()>
c001f5de:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f5e2:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001f5e5:	e9 12 fe ff ff       	jmp    c001f3fc <Vm::x87Handler(regs*)+0x77>
c001f5ea:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f5ee:	8d 50 40             	lea    edx,[eax+0x40]
c001f5f1:	80 fa 07             	cmp    dl,0x7
c001f5f4:	77 29                	ja     c001f61f <Vm::x87Handler(regs*)+0x29a>
c001f5f6:	83 ec 0c             	sub    esp,0xc
c001f5f9:	2d c0 00 00 00       	sub    eax,0xc0
c001f5fe:	50                   	push   eax
c001f5ff:	e8 44 fc ff ff       	call   c001f248 <Vm::fpuGetReg(int)>
c001f604:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f60b:	89 c6                	mov    esi,eax
c001f60d:	89 d7                	mov    edi,edx
c001f60f:	e8 34 fc ff ff       	call   c001f248 <Vm::fpuGetReg(int)>
c001f614:	57                   	push   edi
c001f615:	56                   	push   esi
c001f616:	52                   	push   edx
c001f617:	50                   	push   eax
c001f618:	e8 a1 fb ff ff       	call   c001f1be <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001f61d:	eb 2f                	jmp    c001f64e <Vm::x87Handler(regs*)+0x2c9>
c001f61f:	8d 50 38             	lea    edx,[eax+0x38]
c001f622:	80 fa 07             	cmp    dl,0x7
c001f625:	77 2f                	ja     c001f656 <Vm::x87Handler(regs*)+0x2d1>
c001f627:	83 ec 0c             	sub    esp,0xc
c001f62a:	2d c8 00 00 00       	sub    eax,0xc8
c001f62f:	50                   	push   eax
c001f630:	e8 13 fc ff ff       	call   c001f248 <Vm::fpuGetReg(int)>
c001f635:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f63c:	89 c6                	mov    esi,eax
c001f63e:	89 d7                	mov    edi,edx
c001f640:	e8 03 fc ff ff       	call   c001f248 <Vm::fpuGetReg(int)>
c001f645:	57                   	push   edi
c001f646:	56                   	push   esi
c001f647:	52                   	push   edx
c001f648:	50                   	push   eax
c001f649:	e8 a9 fb ff ff       	call   c001f1f7 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001f64e:	83 c4 1c             	add    esp,0x1c
c001f651:	e9 d8 fd ff ff       	jmp    c001f42e <Vm::x87Handler(regs*)+0xa9>
c001f656:	8d 50 30             	lea    edx,[eax+0x30]
c001f659:	80 fa 07             	cmp    dl,0x7
c001f65c:	77 0d                	ja     c001f66b <Vm::x87Handler(regs*)+0x2e6>
c001f65e:	83 ec 0c             	sub    esp,0xc
c001f661:	2d d0 00 00 00       	sub    eax,0xd0
c001f666:	e9 99 03 00 00       	jmp    c001fa04 <Vm::x87Handler(regs*)+0x67f>
c001f66b:	8d 50 28             	lea    edx,[eax+0x28]
c001f66e:	80 fa 07             	cmp    dl,0x7
c001f671:	77 0d                	ja     c001f680 <Vm::x87Handler(regs*)+0x2fb>
c001f673:	83 ec 0c             	sub    esp,0xc
c001f676:	2d d8 00 00 00       	sub    eax,0xd8
c001f67b:	e9 c0 03 00 00       	jmp    c001fa40 <Vm::x87Handler(regs*)+0x6bb>
c001f680:	8d 50 20             	lea    edx,[eax+0x20]
c001f683:	80 fa 07             	cmp    dl,0x7
c001f686:	77 1b                	ja     c001f6a3 <Vm::x87Handler(regs*)+0x31e>
c001f688:	83 ec 0c             	sub    esp,0xc
c001f68b:	2d e0 00 00 00       	sub    eax,0xe0
c001f690:	50                   	push   eax
c001f691:	e8 b2 fb ff ff       	call   c001f248 <Vm::fpuGetReg(int)>
c001f696:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f69d:	89 c6                	mov    esi,eax
c001f69f:	89 d7                	mov    edi,edx
c001f6a1:	eb 22                	jmp    c001f6c5 <Vm::x87Handler(regs*)+0x340>
c001f6a3:	8d 50 18             	lea    edx,[eax+0x18]
c001f6a6:	80 fa 07             	cmp    dl,0x7
c001f6a9:	77 2d                	ja     c001f6d8 <Vm::x87Handler(regs*)+0x353>
c001f6ab:	83 ec 0c             	sub    esp,0xc
c001f6ae:	6a 00                	push   0x0
c001f6b0:	e8 93 fb ff ff       	call   c001f248 <Vm::fpuGetReg(int)>
c001f6b5:	89 c6                	mov    esi,eax
c001f6b7:	89 d7                	mov    edi,edx
c001f6b9:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f6bd:	2d e8 00 00 00       	sub    eax,0xe8
c001f6c2:	89 04 24             	mov    DWORD PTR [esp],eax
c001f6c5:	e8 7e fb ff ff       	call   c001f248 <Vm::fpuGetReg(int)>
c001f6ca:	57                   	push   edi
c001f6cb:	56                   	push   esi
c001f6cc:	52                   	push   edx
c001f6cd:	50                   	push   eax
c001f6ce:	e8 15 fb ff ff       	call   c001f1e8 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001f6d3:	e9 76 ff ff ff       	jmp    c001f64e <Vm::x87Handler(regs*)+0x2c9>
c001f6d8:	8d 50 10             	lea    edx,[eax+0x10]
c001f6db:	80 fa 07             	cmp    dl,0x7
c001f6de:	77 1b                	ja     c001f6fb <Vm::x87Handler(regs*)+0x376>
c001f6e0:	83 ec 0c             	sub    esp,0xc
c001f6e3:	2d f0 00 00 00       	sub    eax,0xf0
c001f6e8:	50                   	push   eax
c001f6e9:	e8 5a fb ff ff       	call   c001f248 <Vm::fpuGetReg(int)>
c001f6ee:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f6f5:	89 c6                	mov    esi,eax
c001f6f7:	89 d7                	mov    edi,edx
c001f6f9:	eb 22                	jmp    c001f71d <Vm::x87Handler(regs*)+0x398>
c001f6fb:	3c f7                	cmp    al,0xf7
c001f6fd:	0f 86 d1 03 00 00    	jbe    c001fad4 <Vm::x87Handler(regs*)+0x74f>
c001f703:	83 ec 0c             	sub    esp,0xc
c001f706:	6a 00                	push   0x0
c001f708:	e8 3b fb ff ff       	call   c001f248 <Vm::fpuGetReg(int)>
c001f70d:	89 c6                	mov    esi,eax
c001f70f:	89 d7                	mov    edi,edx
c001f711:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f715:	2d f8 00 00 00       	sub    eax,0xf8
c001f71a:	89 04 24             	mov    DWORD PTR [esp],eax
c001f71d:	e8 26 fb ff ff       	call   c001f248 <Vm::fpuGetReg(int)>
c001f722:	57                   	push   edi
c001f723:	56                   	push   esi
c001f724:	52                   	push   edx
c001f725:	50                   	push   eax
c001f726:	e8 eb fa ff ff       	call   c001f216 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001f72b:	83 c4 1c             	add    esp,0x1c
c001f72e:	52                   	push   edx
c001f72f:	50                   	push   eax
c001f730:	6a 00                	push   0x0
c001f732:	e9 51 02 00 00       	jmp    c001f988 <Vm::x87Handler(regs*)+0x603>
c001f737:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f73b:	8d 50 40             	lea    edx,[eax+0x40]
c001f73e:	80 fa 07             	cmp    dl,0x7
c001f741:	77 37                	ja     c001f77a <Vm::x87Handler(regs*)+0x3f5>
c001f743:	83 ec 0c             	sub    esp,0xc
c001f746:	2d c0 00 00 00       	sub    eax,0xc0
c001f74b:	50                   	push   eax
c001f74c:	e8 f7 fa ff ff       	call   c001f248 <Vm::fpuGetReg(int)>
c001f751:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f758:	89 c6                	mov    esi,eax
c001f75a:	89 d7                	mov    edi,edx
c001f75c:	e8 e7 fa ff ff       	call   c001f248 <Vm::fpuGetReg(int)>
c001f761:	57                   	push   edi
c001f762:	56                   	push   esi
c001f763:	52                   	push   edx
c001f764:	50                   	push   eax
c001f765:	e8 54 fa ff ff       	call   c001f1be <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001f76a:	83 c4 1c             	add    esp,0x1c
c001f76d:	52                   	push   edx
c001f76e:	50                   	push   eax
c001f76f:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f773:	2d c0 00 00 00       	sub    eax,0xc0
c001f778:	eb 3d                	jmp    c001f7b7 <Vm::x87Handler(regs*)+0x432>
c001f77a:	8d 50 38             	lea    edx,[eax+0x38]
c001f77d:	80 fa 07             	cmp    dl,0x7
c001f780:	77 3b                	ja     c001f7bd <Vm::x87Handler(regs*)+0x438>
c001f782:	83 ec 0c             	sub    esp,0xc
c001f785:	2d c8 00 00 00       	sub    eax,0xc8
c001f78a:	50                   	push   eax
c001f78b:	e8 b8 fa ff ff       	call   c001f248 <Vm::fpuGetReg(int)>
c001f790:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f797:	89 c6                	mov    esi,eax
c001f799:	89 d7                	mov    edi,edx
c001f79b:	e8 a8 fa ff ff       	call   c001f248 <Vm::fpuGetReg(int)>
c001f7a0:	57                   	push   edi
c001f7a1:	56                   	push   esi
c001f7a2:	52                   	push   edx
c001f7a3:	50                   	push   eax
c001f7a4:	e8 4e fa ff ff       	call   c001f1f7 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001f7a9:	83 c4 1c             	add    esp,0x1c
c001f7ac:	52                   	push   edx
c001f7ad:	50                   	push   eax
c001f7ae:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f7b2:	2d c8 00 00 00       	sub    eax,0xc8
c001f7b7:	50                   	push   eax
c001f7b8:	e9 75 fc ff ff       	jmp    c001f432 <Vm::x87Handler(regs*)+0xad>
c001f7bd:	83 c0 18             	add    eax,0x18
c001f7c0:	3c 07                	cmp    al,0x7
c001f7c2:	0f 87 3b 04 00 00    	ja     c001fc03 <Vm::x87Handler(regs*)+0x87e>
c001f7c8:	83 ec 0c             	sub    esp,0xc
c001f7cb:	6a 00                	push   0x0
c001f7cd:	e8 76 fa ff ff       	call   c001f248 <Vm::fpuGetReg(int)>
c001f7d2:	89 c6                	mov    esi,eax
c001f7d4:	89 d7                	mov    edi,edx
c001f7d6:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f7da:	2d e8 00 00 00       	sub    eax,0xe8
c001f7df:	89 04 24             	mov    DWORD PTR [esp],eax
c001f7e2:	e8 61 fa ff ff       	call   c001f248 <Vm::fpuGetReg(int)>
c001f7e7:	57                   	push   edi
c001f7e8:	56                   	push   esi
c001f7e9:	52                   	push   edx
c001f7ea:	50                   	push   eax
c001f7eb:	e8 f8 f9 ff ff       	call   c001f1e8 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001f7f0:	83 c4 1c             	add    esp,0x1c
c001f7f3:	52                   	push   edx
c001f7f4:	50                   	push   eax
c001f7f5:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f7f9:	2d e8 00 00 00       	sub    eax,0xe8
c001f7fe:	eb b7                	jmp    c001f7b7 <Vm::x87Handler(regs*)+0x432>
c001f800:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f804:	8d 50 40             	lea    edx,[eax+0x40]
c001f807:	80 fa 07             	cmp    dl,0x7
c001f80a:	77 3a                	ja     c001f846 <Vm::x87Handler(regs*)+0x4c1>
c001f80c:	83 ec 0c             	sub    esp,0xc
c001f80f:	2d c0 00 00 00       	sub    eax,0xc0
c001f814:	50                   	push   eax
c001f815:	e8 2e fa ff ff       	call   c001f248 <Vm::fpuGetReg(int)>
c001f81a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f821:	89 c6                	mov    esi,eax
c001f823:	89 d7                	mov    edi,edx
c001f825:	e8 1e fa ff ff       	call   c001f248 <Vm::fpuGetReg(int)>
c001f82a:	57                   	push   edi
c001f82b:	56                   	push   esi
c001f82c:	52                   	push   edx
c001f82d:	50                   	push   eax
c001f82e:	e8 8b f9 ff ff       	call   c001f1be <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001f833:	83 c4 1c             	add    esp,0x1c
c001f836:	52                   	push   edx
c001f837:	50                   	push   eax
c001f838:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f83c:	2d c0 00 00 00       	sub    eax,0xc0
c001f841:	e9 9e 01 00 00       	jmp    c001f9e4 <Vm::x87Handler(regs*)+0x65f>
c001f846:	8d 50 20             	lea    edx,[eax+0x20]
c001f849:	80 fa 07             	cmp    dl,0x7
c001f84c:	77 3a                	ja     c001f888 <Vm::x87Handler(regs*)+0x503>
c001f84e:	83 ec 0c             	sub    esp,0xc
c001f851:	2d e0 00 00 00       	sub    eax,0xe0
c001f856:	50                   	push   eax
c001f857:	e8 ec f9 ff ff       	call   c001f248 <Vm::fpuGetReg(int)>
c001f85c:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f863:	89 c6                	mov    esi,eax
c001f865:	89 d7                	mov    edi,edx
c001f867:	e8 dc f9 ff ff       	call   c001f248 <Vm::fpuGetReg(int)>
c001f86c:	57                   	push   edi
c001f86d:	56                   	push   esi
c001f86e:	52                   	push   edx
c001f86f:	50                   	push   eax
c001f870:	e8 73 f9 ff ff       	call   c001f1e8 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001f875:	83 c4 1c             	add    esp,0x1c
c001f878:	52                   	push   edx
c001f879:	50                   	push   eax
c001f87a:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f87e:	2d e0 00 00 00       	sub    eax,0xe0
c001f883:	e9 5c 01 00 00       	jmp    c001f9e4 <Vm::x87Handler(regs*)+0x65f>
c001f888:	8d 50 18             	lea    edx,[eax+0x18]
c001f88b:	80 fa 07             	cmp    dl,0x7
c001f88e:	77 3b                	ja     c001f8cb <Vm::x87Handler(regs*)+0x546>
c001f890:	83 ec 0c             	sub    esp,0xc
c001f893:	6a 00                	push   0x0
c001f895:	e8 ae f9 ff ff       	call   c001f248 <Vm::fpuGetReg(int)>
c001f89a:	89 c6                	mov    esi,eax
c001f89c:	89 d7                	mov    edi,edx
c001f89e:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f8a2:	2d e8 00 00 00       	sub    eax,0xe8
c001f8a7:	89 04 24             	mov    DWORD PTR [esp],eax
c001f8aa:	e8 99 f9 ff ff       	call   c001f248 <Vm::fpuGetReg(int)>
c001f8af:	57                   	push   edi
c001f8b0:	56                   	push   esi
c001f8b1:	52                   	push   edx
c001f8b2:	50                   	push   eax
c001f8b3:	e8 30 f9 ff ff       	call   c001f1e8 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001f8b8:	83 c4 1c             	add    esp,0x1c
c001f8bb:	52                   	push   edx
c001f8bc:	50                   	push   eax
c001f8bd:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f8c1:	2d e8 00 00 00       	sub    eax,0xe8
c001f8c6:	e9 19 01 00 00       	jmp    c001f9e4 <Vm::x87Handler(regs*)+0x65f>
c001f8cb:	8d 50 38             	lea    edx,[eax+0x38]
c001f8ce:	80 fa 07             	cmp    dl,0x7
c001f8d1:	77 37                	ja     c001f90a <Vm::x87Handler(regs*)+0x585>
c001f8d3:	83 ec 0c             	sub    esp,0xc
c001f8d6:	2d c8 00 00 00       	sub    eax,0xc8
c001f8db:	50                   	push   eax
c001f8dc:	e8 67 f9 ff ff       	call   c001f248 <Vm::fpuGetReg(int)>
c001f8e1:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f8e8:	89 c6                	mov    esi,eax
c001f8ea:	89 d7                	mov    edi,edx
c001f8ec:	e8 57 f9 ff ff       	call   c001f248 <Vm::fpuGetReg(int)>
c001f8f1:	57                   	push   edi
c001f8f2:	56                   	push   esi
c001f8f3:	52                   	push   edx
c001f8f4:	50                   	push   eax
c001f8f5:	e8 fd f8 ff ff       	call   c001f1f7 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001f8fa:	83 c4 1c             	add    esp,0x1c
c001f8fd:	52                   	push   edx
c001f8fe:	50                   	push   eax
c001f8ff:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f903:	2d c8 00 00 00       	sub    eax,0xc8
c001f908:	eb 7d                	jmp    c001f987 <Vm::x87Handler(regs*)+0x602>
c001f90a:	3c f7                	cmp    al,0xf7
c001f90c:	76 38                	jbe    c001f946 <Vm::x87Handler(regs*)+0x5c1>
c001f90e:	83 ec 0c             	sub    esp,0xc
c001f911:	6a 00                	push   0x0
c001f913:	e8 30 f9 ff ff       	call   c001f248 <Vm::fpuGetReg(int)>
c001f918:	89 c6                	mov    esi,eax
c001f91a:	89 d7                	mov    edi,edx
c001f91c:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f920:	2d f8 00 00 00       	sub    eax,0xf8
c001f925:	89 04 24             	mov    DWORD PTR [esp],eax
c001f928:	e8 1b f9 ff ff       	call   c001f248 <Vm::fpuGetReg(int)>
c001f92d:	57                   	push   edi
c001f92e:	56                   	push   esi
c001f92f:	52                   	push   edx
c001f930:	50                   	push   eax
c001f931:	e8 e0 f8 ff ff       	call   c001f216 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001f936:	83 c4 1c             	add    esp,0x1c
c001f939:	52                   	push   edx
c001f93a:	50                   	push   eax
c001f93b:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f93f:	2d f8 00 00 00       	sub    eax,0xf8
c001f944:	eb 41                	jmp    c001f987 <Vm::x87Handler(regs*)+0x602>
c001f946:	8d 50 10             	lea    edx,[eax+0x10]
c001f949:	80 fa 07             	cmp    dl,0x7
c001f94c:	0f 87 5a 01 00 00    	ja     c001faac <Vm::x87Handler(regs*)+0x727>
c001f952:	83 ec 0c             	sub    esp,0xc
c001f955:	2d f0 00 00 00       	sub    eax,0xf0
c001f95a:	50                   	push   eax
c001f95b:	e8 e8 f8 ff ff       	call   c001f248 <Vm::fpuGetReg(int)>
c001f960:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f967:	89 c6                	mov    esi,eax
c001f969:	89 d7                	mov    edi,edx
c001f96b:	e8 d8 f8 ff ff       	call   c001f248 <Vm::fpuGetReg(int)>
c001f970:	57                   	push   edi
c001f971:	56                   	push   esi
c001f972:	52                   	push   edx
c001f973:	50                   	push   eax
c001f974:	e8 9d f8 ff ff       	call   c001f216 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001f979:	83 c4 1c             	add    esp,0x1c
c001f97c:	52                   	push   edx
c001f97d:	50                   	push   eax
c001f97e:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f982:	2d f0 00 00 00       	sub    eax,0xf0
c001f987:	50                   	push   eax
c001f988:	e8 fe f8 ff ff       	call   c001f28b <Vm::fpuSetReg(int, unsigned long long)>
c001f98d:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001f991:	e8 9d f9 ff ff       	call   c001f333 <Vm::fpuPop()>
c001f996:	e9 5e fa ff ff       	jmp    c001f3f9 <Vm::x87Handler(regs*)+0x74>
c001f99b:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f99f:	8d 50 30             	lea    edx,[eax+0x30]
c001f9a2:	80 fa 07             	cmp    dl,0x7
c001f9a5:	77 1d                	ja     c001f9c4 <Vm::x87Handler(regs*)+0x63f>
c001f9a7:	83 ec 0c             	sub    esp,0xc
c001f9aa:	6a 00                	push   0x0
c001f9ac:	e8 97 f8 ff ff       	call   c001f248 <Vm::fpuGetReg(int)>
c001f9b1:	83 c4 0c             	add    esp,0xc
c001f9b4:	52                   	push   edx
c001f9b5:	50                   	push   eax
c001f9b6:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f9ba:	2d d0 00 00 00       	sub    eax,0xd0
c001f9bf:	e9 f3 fd ff ff       	jmp    c001f7b7 <Vm::x87Handler(regs*)+0x432>
c001f9c4:	8d 50 28             	lea    edx,[eax+0x28]
c001f9c7:	80 fa 07             	cmp    dl,0x7
c001f9ca:	77 28                	ja     c001f9f4 <Vm::x87Handler(regs*)+0x66f>
c001f9cc:	83 ec 0c             	sub    esp,0xc
c001f9cf:	6a 00                	push   0x0
c001f9d1:	e8 72 f8 ff ff       	call   c001f248 <Vm::fpuGetReg(int)>
c001f9d6:	83 c4 0c             	add    esp,0xc
c001f9d9:	52                   	push   edx
c001f9da:	50                   	push   eax
c001f9db:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f9df:	2d d8 00 00 00       	sub    eax,0xd8
c001f9e4:	50                   	push   eax
c001f9e5:	e8 a1 f8 ff ff       	call   c001f28b <Vm::fpuSetReg(int, unsigned long long)>
c001f9ea:	e8 44 f9 ff ff       	call   c001f333 <Vm::fpuPop()>
c001f9ef:	e9 01 fa ff ff       	jmp    c001f3f5 <Vm::x87Handler(regs*)+0x70>
c001f9f4:	8d 50 20             	lea    edx,[eax+0x20]
c001f9f7:	80 fa 07             	cmp    dl,0x7
c001f9fa:	77 30                	ja     c001fa2c <Vm::x87Handler(regs*)+0x6a7>
c001f9fc:	83 ec 0c             	sub    esp,0xc
c001f9ff:	2d e0 00 00 00       	sub    eax,0xe0
c001fa04:	50                   	push   eax
c001fa05:	e8 3e f8 ff ff       	call   c001f248 <Vm::fpuGetReg(int)>
c001fa0a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fa11:	89 c6                	mov    esi,eax
c001fa13:	89 d7                	mov    edi,edx
c001fa15:	e8 2e f8 ff ff       	call   c001f248 <Vm::fpuGetReg(int)>
c001fa1a:	57                   	push   edi
c001fa1b:	56                   	push   esi
c001fa1c:	52                   	push   edx
c001fa1d:	50                   	push   eax
c001fa1e:	e8 48 f7 ff ff       	call   c001f16b <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001fa23:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001fa27:	e9 54 02 00 00       	jmp    c001fc80 <Vm::x87Handler(regs*)+0x8fb>
c001fa2c:	8d 50 18             	lea    edx,[eax+0x18]
c001fa2f:	80 fa 07             	cmp    dl,0x7
c001fa32:	0f 87 43 fb ff ff    	ja     c001f57b <Vm::x87Handler(regs*)+0x1f6>
c001fa38:	83 ec 0c             	sub    esp,0xc
c001fa3b:	2d e8 00 00 00       	sub    eax,0xe8
c001fa40:	50                   	push   eax
c001fa41:	e8 02 f8 ff ff       	call   c001f248 <Vm::fpuGetReg(int)>
c001fa46:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fa4d:	89 c6                	mov    esi,eax
c001fa4f:	89 d7                	mov    edi,edx
c001fa51:	e8 f2 f7 ff ff       	call   c001f248 <Vm::fpuGetReg(int)>
c001fa56:	57                   	push   edi
c001fa57:	56                   	push   esi
c001fa58:	52                   	push   edx
c001fa59:	50                   	push   eax
c001fa5a:	e8 0c f7 ff ff       	call   c001f16b <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001fa5f:	83 c4 20             	add    esp,0x20
c001fa62:	e8 cc f8 ff ff       	call   c001f333 <Vm::fpuPop()>
c001fa67:	eb 62                	jmp    c001facb <Vm::x87Handler(regs*)+0x746>
c001fa69:	80 7d 01 e9          	cmp    BYTE PTR [ebp+0x1],0xe9
c001fa6d:	0f 85 0f 01 00 00    	jne    c001fb82 <Vm::x87Handler(regs*)+0x7fd>
c001fa73:	83 ec 0c             	sub    esp,0xc
c001fa76:	6a 01                	push   0x1
c001fa78:	e8 cb f7 ff ff       	call   c001f248 <Vm::fpuGetReg(int)>
c001fa7d:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fa84:	89 c6                	mov    esi,eax
c001fa86:	89 d7                	mov    edi,edx
c001fa88:	e8 bb f7 ff ff       	call   c001f248 <Vm::fpuGetReg(int)>
c001fa8d:	57                   	push   edi
c001fa8e:	56                   	push   esi
c001fa8f:	52                   	push   edx
c001fa90:	50                   	push   eax
c001fa91:	e8 d5 f6 ff ff       	call   c001f16b <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001fa96:	83 c4 20             	add    esp,0x20
c001fa99:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001fa9d:	e8 91 f8 ff ff       	call   c001f333 <Vm::fpuPop()>
c001faa2:	e8 8c f8 ff ff       	call   c001f333 <Vm::fpuPop()>
c001faa7:	e9 50 f9 ff ff       	jmp    c001f3fc <Vm::x87Handler(regs*)+0x77>
c001faac:	3c d9                	cmp    al,0xd9
c001faae:	0f 85 b5 02 00 00    	jne    c001fd69 <Vm::x87Handler(regs*)+0x9e4>
c001fab4:	eb bd                	jmp    c001fa73 <Vm::x87Handler(regs*)+0x6ee>
c001fab6:	80 7d 01 e0          	cmp    BYTE PTR [ebp+0x1],0xe0
c001faba:	0f 85 ea 02 00 00    	jne    c001fdaa <Vm::x87Handler(regs*)+0xa25>
c001fac0:	0f b7 05 60 0f 03 c0 	movzx  eax,WORD PTR ds:0xc0030f60
c001fac7:	66 89 43 2c          	mov    WORD PTR [ebx+0x2c],ax
c001facb:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001facf:	e9 28 f9 ff ff       	jmp    c001f3fc <Vm::x87Handler(regs*)+0x77>
c001fad4:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001fad8:	84 d2                	test   dl,dl
c001fada:	75 0f                	jne    c001faeb <Vm::x87Handler(regs*)+0x766>
c001fadc:	83 ec 0c             	sub    esp,0xc
c001fadf:	ff 36                	push   DWORD PTR [esi]
c001fae1:	e8 b1 f4 ff ff       	call   c001ef97 <Vm::fpu32ToInternal(unsigned int)>
c001fae6:	e9 2c 01 00 00       	jmp    c001fc17 <Vm::x87Handler(regs*)+0x892>
c001faeb:	80 fa 01             	cmp    dl,0x1
c001faee:	75 0f                	jne    c001faff <Vm::x87Handler(regs*)+0x77a>
c001faf0:	83 ec 0c             	sub    esp,0xc
c001faf3:	ff 36                	push   DWORD PTR [esi]
c001faf5:	e8 9d f4 ff ff       	call   c001ef97 <Vm::fpu32ToInternal(unsigned int)>
c001fafa:	e9 81 02 00 00       	jmp    c001fd80 <Vm::x87Handler(regs*)+0x9fb>
c001faff:	80 fa 04             	cmp    dl,0x4
c001fb02:	75 0f                	jne    c001fb13 <Vm::x87Handler(regs*)+0x78e>
c001fb04:	83 ec 0c             	sub    esp,0xc
c001fb07:	ff 36                	push   DWORD PTR [esi]
c001fb09:	e8 89 f4 ff ff       	call   c001ef97 <Vm::fpu32ToInternal(unsigned int)>
c001fb0e:	e9 86 01 00 00       	jmp    c001fc99 <Vm::x87Handler(regs*)+0x914>
c001fb13:	80 fa 05             	cmp    dl,0x5
c001fb16:	75 1b                	jne    c001fb33 <Vm::x87Handler(regs*)+0x7ae>
c001fb18:	83 ec 0c             	sub    esp,0xc
c001fb1b:	6a 00                	push   0x0
c001fb1d:	e8 26 f7 ff ff       	call   c001f248 <Vm::fpuGetReg(int)>
c001fb22:	89 c7                	mov    edi,eax
c001fb24:	89 d5                	mov    ebp,edx
c001fb26:	58                   	pop    eax
c001fb27:	ff 36                	push   DWORD PTR [esi]
c001fb29:	e8 69 f4 ff ff       	call   c001ef97 <Vm::fpu32ToInternal(unsigned int)>
c001fb2e:	e9 a3 01 00 00       	jmp    c001fcd6 <Vm::x87Handler(regs*)+0x951>
c001fb33:	80 fa 06             	cmp    dl,0x6
c001fb36:	75 0f                	jne    c001fb47 <Vm::x87Handler(regs*)+0x7c2>
c001fb38:	83 ec 0c             	sub    esp,0xc
c001fb3b:	ff 36                	push   DWORD PTR [esi]
c001fb3d:	e8 55 f4 ff ff       	call   c001ef97 <Vm::fpu32ToInternal(unsigned int)>
c001fb42:	e9 ae 01 00 00       	jmp    c001fcf5 <Vm::x87Handler(regs*)+0x970>
c001fb47:	31 c0                	xor    eax,eax
c001fb49:	80 fa 07             	cmp    dl,0x7
c001fb4c:	0f 85 94 02 00 00    	jne    c001fde6 <Vm::x87Handler(regs*)+0xa61>
c001fb52:	83 ec 0c             	sub    esp,0xc
c001fb55:	6a 00                	push   0x0
c001fb57:	e8 ec f6 ff ff       	call   c001f248 <Vm::fpuGetReg(int)>
c001fb5c:	89 c7                	mov    edi,eax
c001fb5e:	89 d5                	mov    ebp,edx
c001fb60:	58                   	pop    eax
c001fb61:	ff 36                	push   DWORD PTR [esi]
c001fb63:	e8 2f f4 ff ff       	call   c001ef97 <Vm::fpu32ToInternal(unsigned int)>
c001fb68:	e9 cb 01 00 00       	jmp    c001fd38 <Vm::x87Handler(regs*)+0x9b3>
c001fb6d:	80 fa 03             	cmp    dl,0x3
c001fb70:	0f 85 d3 01 00 00    	jne    c001fd49 <Vm::x87Handler(regs*)+0x9c4>
c001fb76:	e8 b8 f7 ff ff       	call   c001f333 <Vm::fpuPop()>
c001fb7b:	51                   	push   ecx
c001fb7c:	51                   	push   ecx
c001fb7d:	e9 de 01 00 00       	jmp    c001fd60 <Vm::x87Handler(regs*)+0x9db>
c001fb82:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001fb86:	80 fa 01             	cmp    dl,0x1
c001fb89:	75 09                	jne    c001fb94 <Vm::x87Handler(regs*)+0x80f>
c001fb8b:	57                   	push   edi
c001fb8c:	57                   	push   edi
c001fb8d:	8b 06                	mov    eax,DWORD PTR [esi]
c001fb8f:	e9 e3 01 00 00       	jmp    c001fd77 <Vm::x87Handler(regs*)+0x9f2>
c001fb94:	80 fa 04             	cmp    dl,0x4
c001fb97:	75 12                	jne    c001fbab <Vm::x87Handler(regs*)+0x826>
c001fb99:	31 d2                	xor    edx,edx
c001fb9b:	51                   	push   ecx
c001fb9c:	51                   	push   ecx
c001fb9d:	8b 06                	mov    eax,DWORD PTR [esi]
c001fb9f:	52                   	push   edx
c001fba0:	50                   	push   eax
c001fba1:	e8 d0 f4 ff ff       	call   c001f076 <Vm::fpuLongToFloat(long long)>
c001fba6:	e9 ee 00 00 00       	jmp    c001fc99 <Vm::x87Handler(regs*)+0x914>
c001fbab:	31 c0                	xor    eax,eax
c001fbad:	80 fa 07             	cmp    dl,0x7
c001fbb0:	0f 85 30 02 00 00    	jne    c001fde6 <Vm::x87Handler(regs*)+0xa61>
c001fbb6:	83 ec 0c             	sub    esp,0xc
c001fbb9:	6a 00                	push   0x0
c001fbbb:	e8 88 f6 ff ff       	call   c001f248 <Vm::fpuGetReg(int)>
c001fbc0:	89 c7                	mov    edi,eax
c001fbc2:	89 d5                	mov    ebp,edx
c001fbc4:	58                   	pop    eax
c001fbc5:	8b 06                	mov    eax,DWORD PTR [esi]
c001fbc7:	5a                   	pop    edx
c001fbc8:	31 d2                	xor    edx,edx
c001fbca:	52                   	push   edx
c001fbcb:	50                   	push   eax
c001fbcc:	e8 a5 f4 ff ff       	call   c001f076 <Vm::fpuLongToFloat(long long)>
c001fbd1:	e9 62 01 00 00       	jmp    c001fd38 <Vm::x87Handler(regs*)+0x9b3>
c001fbd6:	84 d2                	test   dl,dl
c001fbd8:	75 0d                	jne    c001fbe7 <Vm::x87Handler(regs*)+0x862>
c001fbda:	31 d2                	xor    edx,edx
c001fbdc:	55                   	push   ebp
c001fbdd:	55                   	push   ebp
c001fbde:	8b 06                	mov    eax,DWORD PTR [esi]
c001fbe0:	52                   	push   edx
c001fbe1:	50                   	push   eax
c001fbe2:	e9 d3 01 00 00       	jmp    c001fdba <Vm::x87Handler(regs*)+0xa35>
c001fbe7:	31 c0                	xor    eax,eax
c001fbe9:	80 fa 02             	cmp    dl,0x2
c001fbec:	0f 85 f4 01 00 00    	jne    c001fde6 <Vm::x87Handler(regs*)+0xa61>
c001fbf2:	83 ec 0c             	sub    esp,0xc
c001fbf5:	6a 00                	push   0x0
c001fbf7:	e8 4c f6 ff ff       	call   c001f248 <Vm::fpuGetReg(int)>
c001fbfc:	59                   	pop    ecx
c001fbfd:	5f                   	pop    edi
c001fbfe:	e9 6a f9 ff ff       	jmp    c001f56d <Vm::x87Handler(regs*)+0x1e8>
c001fc03:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001fc07:	84 d2                	test   dl,dl
c001fc09:	75 2a                	jne    c001fc35 <Vm::x87Handler(regs*)+0x8b0>
c001fc0b:	50                   	push   eax
c001fc0c:	50                   	push   eax
c001fc0d:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fc10:	ff 36                	push   DWORD PTR [esi]
c001fc12:	e8 c5 f3 ff ff       	call   c001efdc <Vm::fpu64ToInternal(unsigned long long)>
c001fc17:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fc1e:	89 c6                	mov    esi,eax
c001fc20:	89 d7                	mov    edi,edx
c001fc22:	e8 21 f6 ff ff       	call   c001f248 <Vm::fpuGetReg(int)>
c001fc27:	57                   	push   edi
c001fc28:	56                   	push   esi
c001fc29:	52                   	push   edx
c001fc2a:	50                   	push   eax
c001fc2b:	e8 8e f5 ff ff       	call   c001f1be <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001fc30:	e9 64 01 00 00       	jmp    c001fd99 <Vm::x87Handler(regs*)+0xa14>
c001fc35:	80 fa 01             	cmp    dl,0x1
c001fc38:	75 11                	jne    c001fc4b <Vm::x87Handler(regs*)+0x8c6>
c001fc3a:	50                   	push   eax
c001fc3b:	50                   	push   eax
c001fc3c:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fc3f:	ff 36                	push   DWORD PTR [esi]
c001fc41:	e8 96 f3 ff ff       	call   c001efdc <Vm::fpu64ToInternal(unsigned long long)>
c001fc46:	e9 35 01 00 00       	jmp    c001fd80 <Vm::x87Handler(regs*)+0x9fb>
c001fc4b:	80 fa 02             	cmp    dl,0x2
c001fc4e:	0f 85 54 f9 ff ff    	jne    c001f5a8 <Vm::x87Handler(regs*)+0x223>
c001fc54:	55                   	push   ebp
c001fc55:	55                   	push   ebp
c001fc56:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fc59:	ff 36                	push   DWORD PTR [esi]
c001fc5b:	e8 7c f3 ff ff       	call   c001efdc <Vm::fpu64ToInternal(unsigned long long)>
c001fc60:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fc67:	89 c6                	mov    esi,eax
c001fc69:	89 d7                	mov    edi,edx
c001fc6b:	e8 d8 f5 ff ff       	call   c001f248 <Vm::fpuGetReg(int)>
c001fc70:	57                   	push   edi
c001fc71:	56                   	push   esi
c001fc72:	52                   	push   edx
c001fc73:	50                   	push   eax
c001fc74:	e8 f2 f4 ff ff       	call   c001f16b <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001fc79:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001fc7d:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001fc80:	83 c4 20             	add    esp,0x20
c001fc83:	e9 74 f7 ff ff       	jmp    c001f3fc <Vm::x87Handler(regs*)+0x77>
c001fc88:	80 fa 04             	cmp    dl,0x4
c001fc8b:	75 2a                	jne    c001fcb7 <Vm::x87Handler(regs*)+0x932>
c001fc8d:	51                   	push   ecx
c001fc8e:	51                   	push   ecx
c001fc8f:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fc92:	ff 36                	push   DWORD PTR [esi]
c001fc94:	e8 43 f3 ff ff       	call   c001efdc <Vm::fpu64ToInternal(unsigned long long)>
c001fc99:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fca0:	89 c6                	mov    esi,eax
c001fca2:	89 d7                	mov    edi,edx
c001fca4:	e8 9f f5 ff ff       	call   c001f248 <Vm::fpuGetReg(int)>
c001fca9:	57                   	push   edi
c001fcaa:	56                   	push   esi
c001fcab:	52                   	push   edx
c001fcac:	50                   	push   eax
c001fcad:	e8 36 f5 ff ff       	call   c001f1e8 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001fcb2:	e9 e2 00 00 00       	jmp    c001fd99 <Vm::x87Handler(regs*)+0xa14>
c001fcb7:	80 fa 05             	cmp    dl,0x5
c001fcba:	75 28                	jne    c001fce4 <Vm::x87Handler(regs*)+0x95f>
c001fcbc:	83 ec 0c             	sub    esp,0xc
c001fcbf:	6a 00                	push   0x0
c001fcc1:	e8 82 f5 ff ff       	call   c001f248 <Vm::fpuGetReg(int)>
c001fcc6:	89 c7                	mov    edi,eax
c001fcc8:	89 d5                	mov    ebp,edx
c001fcca:	58                   	pop    eax
c001fccb:	5a                   	pop    edx
c001fccc:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fccf:	ff 36                	push   DWORD PTR [esi]
c001fcd1:	e8 06 f3 ff ff       	call   c001efdc <Vm::fpu64ToInternal(unsigned long long)>
c001fcd6:	83 c4 10             	add    esp,0x10
c001fcd9:	55                   	push   ebp
c001fcda:	57                   	push   edi
c001fcdb:	52                   	push   edx
c001fcdc:	50                   	push   eax
c001fcdd:	e8 06 f5 ff ff       	call   c001f1e8 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001fce2:	eb 60                	jmp    c001fd44 <Vm::x87Handler(regs*)+0x9bf>
c001fce4:	80 fa 06             	cmp    dl,0x6
c001fce7:	75 2a                	jne    c001fd13 <Vm::x87Handler(regs*)+0x98e>
c001fce9:	51                   	push   ecx
c001fcea:	51                   	push   ecx
c001fceb:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fcee:	ff 36                	push   DWORD PTR [esi]
c001fcf0:	e8 e7 f2 ff ff       	call   c001efdc <Vm::fpu64ToInternal(unsigned long long)>
c001fcf5:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fcfc:	89 c6                	mov    esi,eax
c001fcfe:	89 d7                	mov    edi,edx
c001fd00:	e8 43 f5 ff ff       	call   c001f248 <Vm::fpuGetReg(int)>
c001fd05:	57                   	push   edi
c001fd06:	56                   	push   esi
c001fd07:	52                   	push   edx
c001fd08:	50                   	push   eax
c001fd09:	e8 08 f5 ff ff       	call   c001f216 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001fd0e:	e9 86 00 00 00       	jmp    c001fd99 <Vm::x87Handler(regs*)+0xa14>
c001fd13:	31 c0                	xor    eax,eax
c001fd15:	80 fa 07             	cmp    dl,0x7
c001fd18:	0f 85 c8 00 00 00    	jne    c001fde6 <Vm::x87Handler(regs*)+0xa61>
c001fd1e:	83 ec 0c             	sub    esp,0xc
c001fd21:	6a 00                	push   0x0
c001fd23:	e8 20 f5 ff ff       	call   c001f248 <Vm::fpuGetReg(int)>
c001fd28:	89 c7                	mov    edi,eax
c001fd2a:	89 d5                	mov    ebp,edx
c001fd2c:	58                   	pop    eax
c001fd2d:	5a                   	pop    edx
c001fd2e:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fd31:	ff 36                	push   DWORD PTR [esi]
c001fd33:	e8 a4 f2 ff ff       	call   c001efdc <Vm::fpu64ToInternal(unsigned long long)>
c001fd38:	83 c4 10             	add    esp,0x10
c001fd3b:	55                   	push   ebp
c001fd3c:	57                   	push   edi
c001fd3d:	52                   	push   edx
c001fd3e:	50                   	push   eax
c001fd3f:	e8 d2 f4 ff ff       	call   c001f216 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001fd44:	83 c4 0c             	add    esp,0xc
c001fd47:	eb 53                	jmp    c001fd9c <Vm::x87Handler(regs*)+0xa17>
c001fd49:	31 c0                	xor    eax,eax
c001fd4b:	80 fa 02             	cmp    dl,0x2
c001fd4e:	0f 85 92 00 00 00    	jne    c001fde6 <Vm::x87Handler(regs*)+0xa61>
c001fd54:	83 ec 0c             	sub    esp,0xc
c001fd57:	6a 00                	push   0x0
c001fd59:	e8 ea f4 ff ff       	call   c001f248 <Vm::fpuGetReg(int)>
c001fd5e:	59                   	pop    ecx
c001fd5f:	5f                   	pop    edi
c001fd60:	52                   	push   edx
c001fd61:	50                   	push   eax
c001fd62:	e8 27 f2 ff ff       	call   c001ef8e <Vm::fpuInternalTo64(unsigned long long)>
c001fd67:	eb 70                	jmp    c001fdd9 <Vm::x87Handler(regs*)+0xa54>
c001fd69:	31 c0                	xor    eax,eax
c001fd6b:	80 7c 24 0b 01       	cmp    BYTE PTR [esp+0xb],0x1
c001fd70:	75 74                	jne    c001fde6 <Vm::x87Handler(regs*)+0xa61>
c001fd72:	50                   	push   eax
c001fd73:	50                   	push   eax
c001fd74:	0f b7 06             	movzx  eax,WORD PTR [esi]
c001fd77:	31 d2                	xor    edx,edx
c001fd79:	52                   	push   edx
c001fd7a:	50                   	push   eax
c001fd7b:	e8 f6 f2 ff ff       	call   c001f076 <Vm::fpuLongToFloat(long long)>
c001fd80:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fd87:	89 c6                	mov    esi,eax
c001fd89:	89 d7                	mov    edi,edx
c001fd8b:	e8 b8 f4 ff ff       	call   c001f248 <Vm::fpuGetReg(int)>
c001fd90:	57                   	push   edi
c001fd91:	56                   	push   esi
c001fd92:	52                   	push   edx
c001fd93:	50                   	push   eax
c001fd94:	e8 5e f4 ff ff       	call   c001f1f7 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001fd99:	83 c4 1c             	add    esp,0x1c
c001fd9c:	52                   	push   edx
c001fd9d:	50                   	push   eax
c001fd9e:	6a 00                	push   0x0
c001fda0:	e8 e6 f4 ff ff       	call   c001f28b <Vm::fpuSetReg(int, unsigned long long)>
c001fda5:	e9 f2 f7 ff ff       	jmp    c001f59c <Vm::x87Handler(regs*)+0x217>
c001fdaa:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001fdae:	80 fa 05             	cmp    dl,0x5
c001fdb1:	75 11                	jne    c001fdc4 <Vm::x87Handler(regs*)+0xa3f>
c001fdb3:	55                   	push   ebp
c001fdb4:	55                   	push   ebp
c001fdb5:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fdb8:	ff 36                	push   DWORD PTR [esi]
c001fdba:	e8 81 f2 ff ff       	call   c001f040 <Vm::fpuULongToFloat(unsigned long long)>
c001fdbf:	e9 cf f7 ff ff       	jmp    c001f593 <Vm::x87Handler(regs*)+0x20e>
c001fdc4:	31 c0                	xor    eax,eax
c001fdc6:	80 fa 07             	cmp    dl,0x7
c001fdc9:	75 1b                	jne    c001fde6 <Vm::x87Handler(regs*)+0xa61>
c001fdcb:	e8 63 f5 ff ff       	call   c001f333 <Vm::fpuPop()>
c001fdd0:	51                   	push   ecx
c001fdd1:	51                   	push   ecx
c001fdd2:	52                   	push   edx
c001fdd3:	50                   	push   eax
c001fdd4:	e8 0c f2 ff ff       	call   c001efe5 <Vm::fpuFloatToLong(unsigned long long)>
c001fdd9:	83 c4 10             	add    esp,0x10
c001fddc:	89 06                	mov    DWORD PTR [esi],eax
c001fdde:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c001fde1:	e9 f8 f7 ff ff       	jmp    c001f5de <Vm::x87Handler(regs*)+0x259>
c001fde6:	83 c4 1c             	add    esp,0x1c
c001fde9:	5b                   	pop    ebx
c001fdea:	5e                   	pop    esi
c001fdeb:	5f                   	pop    edi
c001fdec:	5d                   	pop    ebp
c001fded:	c3                   	ret    

c001fdee <__static_initialization_and_destruction_0(int, int)>:
c001fdee:	83 ec 0c             	sub    esp,0xc
c001fdf1:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001fdf6:	75 1a                	jne    c001fe12 <__static_initialization_and_destruction_0(int, int)+0x24>
c001fdf8:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001fe00:	75 10                	jne    c001fe12 <__static_initialization_and_destruction_0(int, int)+0x24>
c001fe02:	83 ec 0c             	sub    esp,0xc
c001fe05:	68 60 0f 03 c0       	push   0xc0030f60
c001fe0a:	e8 0b 8d 00 00       	call   c0028b1a <Vm::_FPUState::_FPUState()>
c001fe0f:	83 c4 10             	add    esp,0x10
c001fe12:	90                   	nop
c001fe13:	83 c4 0c             	add    esp,0xc
c001fe16:	c3                   	ret    

c001fe17 <_GLOBAL__sub_I__ZN2Vm8fpuStateE>:
c001fe17:	83 ec 0c             	sub    esp,0xc
c001fe1a:	83 ec 08             	sub    esp,0x8
c001fe1d:	68 ff ff 00 00       	push   0xffff
c001fe22:	6a 01                	push   0x1
c001fe24:	e8 c5 ff ff ff       	call   c001fdee <__static_initialization_and_destruction_0(int, int)>
c001fe29:	83 c4 10             	add    esp,0x10
c001fe2c:	83 c4 0c             	add    esp,0xc
c001fe2f:	c3                   	ret    

c001fe30 <FAT::getName()>:
c001fe30:	b8 50 be 02 c0       	mov    eax,0xc002be50
c001fe35:	c3                   	ret    

c001fe36 <FAT::tell(void*, unsigned long long*)>:
c001fe36:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001fe3b:	75 06                	jne    c001fe43 <FAT::tell(void*, unsigned long long*)+0xd>
c001fe3d:	b8 04 00 00 00       	mov    eax,0x4
c001fe42:	c3                   	ret    
c001fe43:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001fe48:	75 06                	jne    c001fe50 <FAT::tell(void*, unsigned long long*)+0x1a>
c001fe4a:	b8 04 00 00 00       	mov    eax,0x4
c001fe4f:	c3                   	ret    
c001fe50:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001fe54:	8b 50 30             	mov    edx,DWORD PTR [eax+0x30]
c001fe57:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c001fe5a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001fe5e:	89 01                	mov    DWORD PTR [ecx],eax
c001fe60:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001fe63:	b8 00 00 00 00       	mov    eax,0x0
c001fe68:	c3                   	ret    
c001fe69:	90                   	nop

c001fe6a <FAT::stat(void*, unsigned long long*)>:
c001fe6a:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001fe6f:	75 06                	jne    c001fe77 <FAT::stat(void*, unsigned long long*)+0xd>
c001fe71:	b8 04 00 00 00       	mov    eax,0x4
c001fe76:	c3                   	ret    
c001fe77:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001fe7c:	75 06                	jne    c001fe84 <FAT::stat(void*, unsigned long long*)+0x1a>
c001fe7e:	b8 04 00 00 00       	mov    eax,0x4
c001fe83:	c3                   	ret    
c001fe84:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001fe88:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c001fe8b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001fe8e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001fe92:	89 01                	mov    DWORD PTR [ecx],eax
c001fe94:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001fe97:	b8 00 00 00 00       	mov    eax,0x0
c001fe9c:	c3                   	ret    
c001fe9d:	90                   	nop

c001fe9e <FAT::~FAT()>:
c001fe9e:	83 ec 0c             	sub    esp,0xc
c001fea1:	ba 9c be 02 c0       	mov    edx,0xc002be9c
c001fea6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001feaa:	89 10                	mov    DWORD PTR [eax],edx
c001feac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001feb0:	83 ec 0c             	sub    esp,0xc
c001feb3:	50                   	push   eax
c001feb4:	e8 3f 2b ff ff       	call   c00129f8 <Filesystem::~Filesystem()>
c001feb9:	83 c4 10             	add    esp,0x10
c001febc:	90                   	nop
c001febd:	83 c4 0c             	add    esp,0xc
c001fec0:	c3                   	ret    
c001fec1:	90                   	nop

c001fec2 <FAT::~FAT()>:
c001fec2:	83 ec 0c             	sub    esp,0xc
c001fec5:	83 ec 0c             	sub    esp,0xc
c001fec8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fecc:	e8 cd ff ff ff       	call   c001fe9e <FAT::~FAT()>
c001fed1:	83 c4 10             	add    esp,0x10
c001fed4:	83 ec 08             	sub    esp,0x8
c001fed7:	6a 08                	push   0x8
c001fed9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fedd:	e8 0f 27 ff ff       	call   c00125f1 <operator delete(void*, unsigned long)>
c001fee2:	83 c4 10             	add    esp,0x10
c001fee5:	83 c4 0c             	add    esp,0xc
c001fee8:	c3                   	ret    
c001fee9:	90                   	nop

c001feea <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c001feea:	83 ec 1c             	sub    esp,0x1c
c001feed:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c001fef4:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c001fef9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001fefd:	8b 04 85 e0 0f 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf020]
c001ff04:	83 f8 ff             	cmp    eax,0xffffffff
c001ff07:	75 34                	jne    c001ff3d <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x53>
c001ff09:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001ff0d:	88 c2                	mov    dl,al
c001ff0f:	a1 c0 0f 03 c0       	mov    eax,ds:0xc0030fc0
c001ff14:	01 d0                	add    eax,edx
c001ff16:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001ff1a:	8b 15 c0 0f 03 c0    	mov    edx,DWORD PTR ds:0xc0030fc0
c001ff20:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001ff24:	89 14 85 e0 0f 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf020],edx
c001ff2b:	a1 c0 0f 03 c0       	mov    eax,ds:0xc0030fc0
c001ff30:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001ff34:	89 14 85 60 10 03 c0 	mov    DWORD PTR [eax*4-0x3ffcefa0],edx
c001ff3b:	eb 17                	jmp    c001ff54 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6a>
c001ff3d:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001ff41:	88 c2                	mov    dl,al
c001ff43:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001ff47:	8b 04 85 e0 0f 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf020]
c001ff4e:	01 d0                	add    eax,edx
c001ff50:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001ff54:	83 ec 04             	sub    esp,0x4
c001ff57:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001ff5b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001ff5f:	8d 44 24 15          	lea    eax,[esp+0x15]
c001ff63:	50                   	push   eax
c001ff64:	e8 95 6d fe ff       	call   c0006cfe <f_getlabel>
c001ff69:	83 c4 10             	add    esp,0x10
c001ff6c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ff70:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001ff75:	75 07                	jne    c001ff7e <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x94>
c001ff77:	b8 00 00 00 00       	mov    eax,0x0
c001ff7c:	eb 05                	jmp    c001ff83 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x99>
c001ff7e:	b8 01 00 00 00       	mov    eax,0x1
c001ff83:	83 c4 1c             	add    esp,0x1c
c001ff86:	c3                   	ret    
c001ff87:	90                   	nop

c001ff88 <FAT::setlabel(LogicalDisk*, int, char*)>:
c001ff88:	57                   	push   edi
c001ff89:	83 ec 58             	sub    esp,0x58
c001ff8c:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c001ff94:	8d 54 24 10          	lea    edx,[esp+0x10]
c001ff98:	b9 0f 00 00 00       	mov    ecx,0xf
c001ff9d:	b8 00 00 00 00       	mov    eax,0x0
c001ffa2:	fc                   	cld    
c001ffa3:	89 d7                	mov    edi,edx
c001ffa5:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001ffa7:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001ffab:	8b 04 85 e0 0f 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf020]
c001ffb2:	83 f8 ff             	cmp    eax,0xffffffff
c001ffb5:	75 34                	jne    c001ffeb <FAT::setlabel(LogicalDisk*, int, char*)+0x63>
c001ffb7:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001ffbb:	88 c2                	mov    dl,al
c001ffbd:	a1 c0 0f 03 c0       	mov    eax,ds:0xc0030fc0
c001ffc2:	01 d0                	add    eax,edx
c001ffc4:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001ffc8:	8b 15 c0 0f 03 c0    	mov    edx,DWORD PTR ds:0xc0030fc0
c001ffce:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001ffd2:	89 14 85 e0 0f 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf020],edx
c001ffd9:	a1 c0 0f 03 c0       	mov    eax,ds:0xc0030fc0
c001ffde:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c001ffe2:	89 14 85 60 10 03 c0 	mov    DWORD PTR [eax*4-0x3ffcefa0],edx
c001ffe9:	eb 17                	jmp    c0020002 <FAT::setlabel(LogicalDisk*, int, char*)+0x7a>
c001ffeb:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001ffef:	88 c2                	mov    dl,al
c001fff1:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001fff5:	8b 04 85 e0 0f 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf020]
c001fffc:	01 d0                	add    eax,edx
c001fffe:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0020002:	83 ec 08             	sub    esp,0x8
c0020005:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c0020009:	8d 44 24 18          	lea    eax,[esp+0x18]
c002000d:	50                   	push   eax
c002000e:	e8 39 09 fe ff       	call   c000094c <strcat>
c0020013:	83 c4 10             	add    esp,0x10
c0020016:	83 ec 0c             	sub    esp,0xc
c0020019:	8d 44 24 18          	lea    eax,[esp+0x18]
c002001d:	50                   	push   eax
c002001e:	e8 c9 6e fe ff       	call   c0006eec <f_setlabel>
c0020023:	83 c4 10             	add    esp,0x10
c0020026:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c002002a:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c002002f:	75 07                	jne    c0020038 <FAT::setlabel(LogicalDisk*, int, char*)+0xb0>
c0020031:	b8 00 00 00 00       	mov    eax,0x0
c0020036:	eb 05                	jmp    c002003d <FAT::setlabel(LogicalDisk*, int, char*)+0xb5>
c0020038:	b8 01 00 00 00       	mov    eax,0x1
c002003d:	83 c4 58             	add    esp,0x58
c0020040:	5f                   	pop    edi
c0020041:	c3                   	ret    

c0020042 <FAT::format(LogicalDisk*, int, char const*, int)>:
c0020042:	83 ec 2c             	sub    esp,0x2c
c0020045:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c002004d:	83 ec 08             	sub    esp,0x8
c0020050:	68 74 be 02 c0       	push   0xc002be74
c0020055:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0020059:	e8 3a 08 fe ff       	call   c0000898 <strcmp>
c002005e:	83 c4 10             	add    esp,0x10
c0020061:	85 c0                	test   eax,eax
c0020063:	0f 94 c0             	sete   al
c0020066:	84 c0                	test   al,al
c0020068:	74 0d                	je     c0020077 <FAT::format(LogicalDisk*, int, char const*, int)+0x35>
c002006a:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0020072:	e9 a6 00 00 00       	jmp    c002011d <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0020077:	83 ec 08             	sub    esp,0x8
c002007a:	68 66 be 02 c0       	push   0xc002be66
c002007f:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0020083:	e8 10 08 fe ff       	call   c0000898 <strcmp>
c0020088:	83 c4 10             	add    esp,0x10
c002008b:	85 c0                	test   eax,eax
c002008d:	0f 94 c0             	sete   al
c0020090:	84 c0                	test   al,al
c0020092:	74 0a                	je     c002009e <FAT::format(LogicalDisk*, int, char const*, int)+0x5c>
c0020094:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c002009c:	eb 7f                	jmp    c002011d <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c002009e:	83 ec 08             	sub    esp,0x8
c00200a1:	68 6c be 02 c0       	push   0xc002be6c
c00200a6:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00200aa:	e8 e9 07 fe ff       	call   c0000898 <strcmp>
c00200af:	83 c4 10             	add    esp,0x10
c00200b2:	85 c0                	test   eax,eax
c00200b4:	0f 94 c0             	sete   al
c00200b7:	84 c0                	test   al,al
c00200b9:	74 0a                	je     c00200c5 <FAT::format(LogicalDisk*, int, char const*, int)+0x83>
c00200bb:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c00200c3:	eb 58                	jmp    c002011d <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c00200c5:	83 ec 08             	sub    esp,0x8
c00200c8:	68 8c 92 02 c0       	push   0xc002928c
c00200cd:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00200d1:	e8 c2 07 fe ff       	call   c0000898 <strcmp>
c00200d6:	83 c4 10             	add    esp,0x10
c00200d9:	85 c0                	test   eax,eax
c00200db:	0f 94 c0             	sete   al
c00200de:	84 c0                	test   al,al
c00200e0:	74 0a                	je     c00200ec <FAT::format(LogicalDisk*, int, char const*, int)+0xaa>
c00200e2:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c00200ea:	eb 31                	jmp    c002011d <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c00200ec:	83 ec 08             	sub    esp,0x8
c00200ef:	68 72 be 02 c0       	push   0xc002be72
c00200f4:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00200f8:	e8 9b 07 fe ff       	call   c0000898 <strcmp>
c00200fd:	83 c4 10             	add    esp,0x10
c0020100:	85 c0                	test   eax,eax
c0020102:	0f 94 c0             	sete   al
c0020105:	84 c0                	test   al,al
c0020107:	74 0a                	je     c0020113 <FAT::format(LogicalDisk*, int, char const*, int)+0xd1>
c0020109:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c0020111:	eb 0a                	jmp    c002011d <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0020113:	b8 08 00 00 00       	mov    eax,0x8
c0020118:	e9 df 00 00 00       	jmp    c00201fc <FAT::format(LogicalDisk*, int, char const*, int)+0x1ba>
c002011d:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c0020124:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0020129:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c002012d:	8b 04 85 e0 0f 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf020]
c0020134:	83 f8 ff             	cmp    eax,0xffffffff
c0020137:	75 34                	jne    c002016d <FAT::format(LogicalDisk*, int, char const*, int)+0x12b>
c0020139:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c002013d:	88 c2                	mov    dl,al
c002013f:	a1 c0 0f 03 c0       	mov    eax,ds:0xc0030fc0
c0020144:	01 d0                	add    eax,edx
c0020146:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c002014a:	8b 15 c0 0f 03 c0    	mov    edx,DWORD PTR ds:0xc0030fc0
c0020150:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020154:	89 14 85 e0 0f 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf020],edx
c002015b:	a1 c0 0f 03 c0       	mov    eax,ds:0xc0030fc0
c0020160:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0020164:	89 14 85 60 10 03 c0 	mov    DWORD PTR [eax*4-0x3ffcefa0],edx
c002016b:	eb 17                	jmp    c0020184 <FAT::format(LogicalDisk*, int, char const*, int)+0x142>
c002016d:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0020171:	88 c2                	mov    dl,al
c0020173:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020177:	8b 04 85 e0 0f 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf020]
c002017e:	01 d0                	add    eax,edx
c0020180:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0020184:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0020188:	88 04 24             	mov    BYTE PTR [esp],al
c002018b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c002018f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020193:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c002019b:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c00201a0:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00201a8:	83 ec 0c             	sub    esp,0xc
c00201ab:	68 00 20 00 00       	push   0x2000
c00201b0:	e8 e4 f3 fe ff       	call   c000f599 <malloc>
c00201b5:	83 c4 10             	add    esp,0x10
c00201b8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00201bc:	68 00 20 00 00       	push   0x2000
c00201c1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00201c5:	8d 44 24 08          	lea    eax,[esp+0x8]
c00201c9:	50                   	push   eax
c00201ca:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c00201ce:	50                   	push   eax
c00201cf:	e8 63 71 fe ff       	call   c0007337 <f_mkfs>
c00201d4:	83 c4 10             	add    esp,0x10
c00201d7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00201db:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00201e0:	75 07                	jne    c00201e9 <FAT::format(LogicalDisk*, int, char const*, int)+0x1a7>
c00201e2:	b8 00 00 00 00       	mov    eax,0x0
c00201e7:	eb 13                	jmp    c00201fc <FAT::format(LogicalDisk*, int, char const*, int)+0x1ba>
c00201e9:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c00201ee:	75 07                	jne    c00201f7 <FAT::format(LogicalDisk*, int, char const*, int)+0x1b5>
c00201f0:	b8 09 00 00 00       	mov    eax,0x9
c00201f5:	eb 05                	jmp    c00201fc <FAT::format(LogicalDisk*, int, char const*, int)+0x1ba>
c00201f7:	b8 01 00 00 00       	mov    eax,0x1
c00201fc:	83 c4 2c             	add    esp,0x2c
c00201ff:	c3                   	ret    

c0020200 <FAT::tryMount(LogicalDisk*, int)>:
c0020200:	81 ec 6c 03 00 00    	sub    esp,0x36c
c0020206:	a1 c0 0f 03 c0       	mov    eax,ds:0xc0030fc0
c002020b:	83 f8 14             	cmp    eax,0x14
c002020e:	75 17                	jne    c0020227 <FAT::tryMount(LogicalDisk*, int)+0x27>
c0020210:	83 ec 0c             	sub    esp,0xc
c0020213:	68 78 be 02 c0       	push   0xc002be78
c0020218:	e8 18 9c ff ff       	call   c0019e35 <Krnl::panic(char const*)>
c002021d:	83 c4 10             	add    esp,0x10
c0020220:	b0 00                	mov    al,0x0
c0020222:	e9 d7 01 00 00       	jmp    c00203fe <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020227:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c002022e:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0020234:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c002023a:	3d 00 02 00 00       	cmp    eax,0x200
c002023f:	74 07                	je     c0020248 <FAT::tryMount(LogicalDisk*, int)+0x48>
c0020241:	b0 00                	mov    al,0x0
c0020243:	e9 b6 01 00 00       	jmp    c00203fe <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020248:	c6 84 24 5f 03 00 00 00 	mov    BYTE PTR [esp+0x35f],0x0
c0020250:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c0020257:	8b 04 85 e0 0f 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf020]
c002025e:	83 f8 ff             	cmp    eax,0xffffffff
c0020261:	74 07                	je     c002026a <FAT::tryMount(LogicalDisk*, int)+0x6a>
c0020263:	b0 01                	mov    al,0x1
c0020265:	e9 94 01 00 00       	jmp    c00203fe <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c002026a:	66 c7 84 24 51 03 00 00 30 3a 	mov    WORD PTR [esp+0x351],0x3a30
c0020274:	c6 84 24 53 03 00 00 00 	mov    BYTE PTR [esp+0x353],0x0
c002027c:	8a 84 24 51 03 00 00 	mov    al,BYTE PTR [esp+0x351]
c0020283:	88 c2                	mov    dl,al
c0020285:	a1 c0 0f 03 c0       	mov    eax,ds:0xc0030fc0
c002028a:	01 d0                	add    eax,edx
c002028c:	88 84 24 51 03 00 00 	mov    BYTE PTR [esp+0x351],al
c0020293:	8b 15 c0 0f 03 c0    	mov    edx,DWORD PTR ds:0xc0030fc0
c0020299:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c00202a0:	89 14 85 e0 0f 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf020],edx
c00202a7:	a1 c0 0f 03 c0       	mov    eax,ds:0xc0030fc0
c00202ac:	8b 94 24 78 03 00 00 	mov    edx,DWORD PTR [esp+0x378]
c00202b3:	89 14 85 60 10 03 c0 	mov    DWORD PTR [eax*4-0x3ffcefa0],edx
c00202ba:	83 ec 0c             	sub    esp,0xc
c00202bd:	68 54 02 00 00       	push   0x254
c00202c2:	e8 d2 f2 fe ff       	call   c000f599 <malloc>
c00202c7:	83 c4 10             	add    esp,0x10
c00202ca:	89 84 24 58 03 00 00 	mov    DWORD PTR [esp+0x358],eax
c00202d1:	83 ec 04             	sub    esp,0x4
c00202d4:	6a 00                	push   0x0
c00202d6:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c00202dd:	50                   	push   eax
c00202de:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c00202e5:	e8 0b 4c fe ff       	call   c0004ef5 <f_mount>
c00202ea:	83 c4 10             	add    esp,0x10
c00202ed:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c00202f4:	83 bc 24 54 03 00 00 00 	cmp    DWORD PTR [esp+0x354],0x0
c00202fc:	74 19                	je     c0020317 <FAT::tryMount(LogicalDisk*, int)+0x117>
c00202fe:	83 ec 0c             	sub    esp,0xc
c0020301:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c0020308:	e8 ac f2 fe ff       	call   c000f5b9 <rfree>
c002030d:	83 c4 10             	add    esp,0x10
c0020310:	b0 00                	mov    al,0x0
c0020312:	e9 e7 00 00 00       	jmp    c00203fe <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020317:	83 ec 04             	sub    esp,0x4
c002031a:	68 00 01 00 00       	push   0x100
c002031f:	6a 00                	push   0x0
c0020321:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c0020328:	50                   	push   eax
c0020329:	e8 22 04 fe ff       	call   c0000750 <memset>
c002032e:	83 c4 10             	add    esp,0x10
c0020331:	83 ec 08             	sub    esp,0x8
c0020334:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c002033b:	50                   	push   eax
c002033c:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c0020343:	50                   	push   eax
c0020344:	e8 03 06 fe ff       	call   c000094c <strcat>
c0020349:	83 c4 10             	add    esp,0x10
c002034c:	83 ec 08             	sub    esp,0x8
c002034f:	68 86 be 02 c0       	push   0xc002be86
c0020354:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c002035b:	50                   	push   eax
c002035c:	e8 eb 05 fe ff       	call   c000094c <strcat>
c0020361:	83 c4 10             	add    esp,0x10
c0020364:	83 ec 04             	sub    esp,0x4
c0020367:	6a 01                	push   0x1
c0020369:	8d 84 24 59 02 00 00 	lea    eax,[esp+0x259]
c0020370:	50                   	push   eax
c0020371:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0020375:	50                   	push   eax
c0020376:	e8 dc 4b fe ff       	call   c0004f57 <f_open>
c002037b:	83 c4 10             	add    esp,0x10
c002037e:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c0020385:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c002038c:	85 c0                	test   eax,eax
c002038e:	74 0a                	je     c002039a <FAT::tryMount(LogicalDisk*, int)+0x19a>
c0020390:	78 2d                	js     c00203bf <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c0020392:	83 e8 04             	sub    eax,0x4
c0020395:	83 f8 01             	cmp    eax,0x1
c0020398:	77 25                	ja     c00203bf <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c002039a:	c6 84 24 5f 03 00 00 01 	mov    BYTE PTR [esp+0x35f],0x1
c00203a2:	83 ec 0c             	sub    esp,0xc
c00203a5:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00203a9:	50                   	push   eax
c00203aa:	e8 fa 56 fe ff       	call   c0005aa9 <f_close>
c00203af:	83 c4 10             	add    esp,0x10
c00203b2:	90                   	nop
c00203b3:	80 bc 24 5f 03 00 00 00 	cmp    BYTE PTR [esp+0x35f],0x0
c00203bb:	74 3a                	je     c00203f7 <FAT::tryMount(LogicalDisk*, int)+0x1f7>
c00203bd:	eb 2d                	jmp    c00203ec <FAT::tryMount(LogicalDisk*, int)+0x1ec>
c00203bf:	83 ec 0c             	sub    esp,0xc
c00203c2:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c00203c9:	e8 eb f1 fe ff       	call   c000f5b9 <rfree>
c00203ce:	83 c4 10             	add    esp,0x10
c00203d1:	83 ec 04             	sub    esp,0x4
c00203d4:	6a 00                	push   0x0
c00203d6:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c00203dd:	50                   	push   eax
c00203de:	6a 00                	push   0x0
c00203e0:	e8 10 4b fe ff       	call   c0004ef5 <f_mount>
c00203e5:	83 c4 10             	add    esp,0x10
c00203e8:	b0 00                	mov    al,0x0
c00203ea:	eb 12                	jmp    c00203fe <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c00203ec:	a1 c0 0f 03 c0       	mov    eax,ds:0xc0030fc0
c00203f1:	40                   	inc    eax
c00203f2:	a3 c0 0f 03 c0       	mov    ds:0xc0030fc0,eax
c00203f7:	8a 84 24 5f 03 00 00 	mov    al,BYTE PTR [esp+0x35f]
c00203fe:	81 c4 6c 03 00 00    	add    esp,0x36c
c0020404:	c3                   	ret    
c0020405:	90                   	nop

c0020406 <FAT::getFileFirstSector(char const*)>:
c0020406:	53                   	push   ebx
c0020407:	83 ec 28             	sub    esp,0x28
c002040a:	c7 44 24 10 14 01 00 00 	mov    DWORD PTR [esp+0x10],0x114
c0020412:	83 ec 0c             	sub    esp,0xc
c0020415:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020419:	e8 7b f1 fe ff       	call   c000f599 <malloc>
c002041e:	83 c4 10             	add    esp,0x10
c0020421:	89 c3                	mov    ebx,eax
c0020423:	a1 f0 0e 03 c0       	mov    eax,ds:0xc0030ef0
c0020428:	83 ec 04             	sub    esp,0x4
c002042b:	50                   	push   eax
c002042c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0020430:	53                   	push   ebx
c0020431:	e8 f2 27 ff ff       	call   c0012c28 <File::File(char const*, Process*)>
c0020436:	83 c4 10             	add    esp,0x10
c0020439:	89 5c 24 1c          	mov    DWORD PTR [esp+0x1c],ebx
c002043d:	83 ec 08             	sub    esp,0x8
c0020440:	6a 01                	push   0x1
c0020442:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0020446:	e8 41 28 ff ff       	call   c0012c8c <File::open(FileOpenMode)>
c002044b:	83 c4 10             	add    esp,0x10
c002044e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0020452:	8b 00                	mov    eax,DWORD PTR [eax]
c0020454:	83 c0 0c             	add    eax,0xc
c0020457:	8b 00                	mov    eax,DWORD PTR [eax]
c0020459:	83 ec 0c             	sub    esp,0xc
c002045c:	8d 54 24 14          	lea    edx,[esp+0x14]
c0020460:	52                   	push   edx
c0020461:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0020465:	52                   	push   edx
c0020466:	6a 00                	push   0x0
c0020468:	6a 04                	push   0x4
c002046a:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c002046e:	ff d0                	call   eax
c0020470:	83 c4 20             	add    esp,0x20
c0020473:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0020477:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c002047d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0020481:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0020485:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c0020488:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c002048b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c002048f:	83 ec 0c             	sub    esp,0xc
c0020492:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0020496:	e8 4f 28 ff ff       	call   c0012cea <File::close()>
c002049b:	83 c4 10             	add    esp,0x10
c002049e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00204a2:	ba 00 00 00 00       	mov    edx,0x0
c00204a7:	83 c4 28             	add    esp,0x28
c00204aa:	5b                   	pop    ebx
c00204ab:	c3                   	ret    

c00204ac <FAT::readDir(void*, unsigned long, void*, int*)>:
c00204ac:	57                   	push   edi
c00204ad:	56                   	push   esi
c00204ae:	53                   	push   ebx
c00204af:	81 ec 50 02 00 00    	sub    esp,0x250
c00204b5:	83 bc 24 64 02 00 00 00 	cmp    DWORD PTR [esp+0x264],0x0
c00204bd:	74 0a                	je     c00204c9 <FAT::readDir(void*, unsigned long, void*, int*)+0x1d>
c00204bf:	83 bc 24 70 02 00 00 00 	cmp    DWORD PTR [esp+0x270],0x0
c00204c7:	75 0a                	jne    c00204d3 <FAT::readDir(void*, unsigned long, void*, int*)+0x27>
c00204c9:	b8 04 00 00 00       	mov    eax,0x4
c00204ce:	e9 29 01 00 00       	jmp    c00205fc <FAT::readDir(void*, unsigned long, void*, int*)+0x150>
c00204d3:	83 ec 08             	sub    esp,0x8
c00204d6:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c00204dd:	50                   	push   eax
c00204de:	ff b4 24 70 02 00 00 	push   DWORD PTR [esp+0x270]
c00204e5:	e8 c9 5b fe ff       	call   c00060b3 <f_readdir>
c00204ea:	83 c4 10             	add    esp,0x10
c00204ed:	89 84 24 4c 02 00 00 	mov    DWORD PTR [esp+0x24c],eax
c00204f4:	66 c7 44 24 04 00 00 	mov    WORD PTR [esp+0x4],0x0
c00204fb:	83 ec 0c             	sub    esp,0xc
c00204fe:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c0020505:	83 c0 1a             	add    eax,0x1a
c0020508:	50                   	push   eax
c0020509:	e8 5e 02 fe ff       	call   c000076c <strlen>
c002050e:	83 c4 10             	add    esp,0x10
c0020511:	ba 00 00 00 00       	mov    edx,0x0
c0020516:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002051a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002051e:	8a 84 24 20 01 00 00 	mov    al,BYTE PTR [esp+0x120]
c0020525:	0f b6 c0             	movzx  eax,al
c0020528:	83 e0 10             	and    eax,0x10
c002052b:	74 07                	je     c0020534 <FAT::readDir(void*, unsigned long, void*, int*)+0x88>
c002052d:	b8 02 00 00 00       	mov    eax,0x2
c0020532:	eb 05                	jmp    c0020539 <FAT::readDir(void*, unsigned long, void*, int*)+0x8d>
c0020534:	b8 01 00 00 00       	mov    eax,0x1
c0020539:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c002053d:	83 ec 08             	sub    esp,0x8
c0020540:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c0020547:	83 c0 1a             	add    eax,0x1a
c002054a:	50                   	push   eax
c002054b:	8d 44 24 10          	lea    eax,[esp+0x10]
c002054f:	83 c0 10             	add    eax,0x10
c0020552:	50                   	push   eax
c0020553:	e8 b4 02 fe ff       	call   c000080c <strcpy>
c0020558:	83 c4 10             	add    esp,0x10
c002055b:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
c0020562:	89 84 24 48 02 00 00 	mov    DWORD PTR [esp+0x248],eax
c0020569:	8d 44 24 04          	lea    eax,[esp+0x4]
c002056d:	89 84 24 44 02 00 00 	mov    DWORD PTR [esp+0x244],eax
c0020574:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
c002057b:	89 84 24 40 02 00 00 	mov    DWORD PTR [esp+0x240],eax
c0020582:	8b 84 24 48 02 00 00 	mov    eax,DWORD PTR [esp+0x248]
c0020589:	89 84 24 3c 02 00 00 	mov    DWORD PTR [esp+0x23c],eax
c0020590:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c0020597:	8b 94 24 48 02 00 00 	mov    edx,DWORD PTR [esp+0x248]
c002059e:	8b 8c 24 40 02 00 00 	mov    ecx,DWORD PTR [esp+0x240]
c00205a5:	89 c6                	mov    esi,eax
c00205a7:	89 d7                	mov    edi,edx
c00205a9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00205ab:	89 c8                	mov    eax,ecx
c00205ad:	89 fa                	mov    edx,edi
c00205af:	89 f3                	mov    ebx,esi
c00205b1:	89 9c 24 38 02 00 00 	mov    DWORD PTR [esp+0x238],ebx
c00205b8:	89 94 24 34 02 00 00 	mov    DWORD PTR [esp+0x234],edx
c00205bf:	89 84 24 30 02 00 00 	mov    DWORD PTR [esp+0x230],eax
c00205c6:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
c00205cd:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c00205d3:	8a 84 24 2e 01 00 00 	mov    al,BYTE PTR [esp+0x12e]
c00205da:	84 c0                	test   al,al
c00205dc:	75 07                	jne    c00205e5 <FAT::readDir(void*, unsigned long, void*, int*)+0x139>
c00205de:	b8 07 00 00 00       	mov    eax,0x7
c00205e3:	eb 17                	jmp    c00205fc <FAT::readDir(void*, unsigned long, void*, int*)+0x150>
c00205e5:	8b 84 24 4c 02 00 00 	mov    eax,DWORD PTR [esp+0x24c]
c00205ec:	85 c0                	test   eax,eax
c00205ee:	75 07                	jne    c00205f7 <FAT::readDir(void*, unsigned long, void*, int*)+0x14b>
c00205f0:	b8 00 00 00 00       	mov    eax,0x0
c00205f5:	eb 05                	jmp    c00205fc <FAT::readDir(void*, unsigned long, void*, int*)+0x150>
c00205f7:	b8 01 00 00 00       	mov    eax,0x1
c00205fc:	81 c4 50 02 00 00    	add    esp,0x250
c0020602:	5b                   	pop    ebx
c0020603:	5e                   	pop    esi
c0020604:	5f                   	pop    edi
c0020605:	c3                   	ret    

c0020606 <FAT::read(void*, unsigned long, void*, int*)>:
c0020606:	83 ec 1c             	sub    esp,0x1c
c0020609:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c002060e:	74 07                	je     c0020617 <FAT::read(void*, unsigned long, void*, int*)+0x11>
c0020610:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0020615:	75 07                	jne    c002061e <FAT::read(void*, unsigned long, void*, int*)+0x18>
c0020617:	b8 04 00 00 00       	mov    eax,0x4
c002061c:	eb 3d                	jmp    c002065b <FAT::read(void*, unsigned long, void*, int*)+0x55>
c002061e:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020622:	50                   	push   eax
c0020623:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0020627:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c002062b:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c002062f:	e8 5f 4d fe ff       	call   c0005393 <f_read>
c0020634:	83 c4 10             	add    esp,0x10
c0020637:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002063b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002063f:	89 c2                	mov    edx,eax
c0020641:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0020645:	89 10                	mov    DWORD PTR [eax],edx
c0020647:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002064b:	85 c0                	test   eax,eax
c002064d:	75 07                	jne    c0020656 <FAT::read(void*, unsigned long, void*, int*)+0x50>
c002064f:	b8 00 00 00 00       	mov    eax,0x0
c0020654:	eb 05                	jmp    c002065b <FAT::read(void*, unsigned long, void*, int*)+0x55>
c0020656:	b8 01 00 00 00       	mov    eax,0x1
c002065b:	83 c4 1c             	add    esp,0x1c
c002065e:	c3                   	ret    
c002065f:	90                   	nop

c0020660 <FAT::write(void*, unsigned long, void*, int*)>:
c0020660:	83 ec 1c             	sub    esp,0x1c
c0020663:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020668:	74 07                	je     c0020671 <FAT::write(void*, unsigned long, void*, int*)+0x11>
c002066a:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c002066f:	75 07                	jne    c0020678 <FAT::write(void*, unsigned long, void*, int*)+0x18>
c0020671:	b8 04 00 00 00       	mov    eax,0x4
c0020676:	eb 3d                	jmp    c00206b5 <FAT::write(void*, unsigned long, void*, int*)+0x55>
c0020678:	8d 44 24 08          	lea    eax,[esp+0x8]
c002067c:	50                   	push   eax
c002067d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0020681:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0020685:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020689:	e8 85 4f fe ff       	call   c0005613 <f_write>
c002068e:	83 c4 10             	add    esp,0x10
c0020691:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020695:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020699:	89 c2                	mov    edx,eax
c002069b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c002069f:	89 10                	mov    DWORD PTR [eax],edx
c00206a1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00206a5:	85 c0                	test   eax,eax
c00206a7:	75 07                	jne    c00206b0 <FAT::write(void*, unsigned long, void*, int*)+0x50>
c00206a9:	b8 00 00 00 00       	mov    eax,0x0
c00206ae:	eb 05                	jmp    c00206b5 <FAT::write(void*, unsigned long, void*, int*)+0x55>
c00206b0:	b8 01 00 00 00       	mov    eax,0x1
c00206b5:	83 c4 1c             	add    esp,0x1c
c00206b8:	c3                   	ret    
c00206b9:	90                   	nop

c00206ba <FAT::close(void*)>:
c00206ba:	83 ec 1c             	sub    esp,0x1c
c00206bd:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00206c2:	75 07                	jne    c00206cb <FAT::close(void*)+0x11>
c00206c4:	b8 04 00 00 00       	mov    eax,0x4
c00206c9:	eb 36                	jmp    c0020701 <FAT::close(void*)+0x47>
c00206cb:	83 ec 0c             	sub    esp,0xc
c00206ce:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00206d2:	e8 d2 53 fe ff       	call   c0005aa9 <f_close>
c00206d7:	83 c4 10             	add    esp,0x10
c00206da:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00206de:	83 ec 0c             	sub    esp,0xc
c00206e1:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00206e5:	e8 bf ee fe ff       	call   c000f5a9 <free>
c00206ea:	83 c4 10             	add    esp,0x10
c00206ed:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00206f1:	85 c0                	test   eax,eax
c00206f3:	75 07                	jne    c00206fc <FAT::close(void*)+0x42>
c00206f5:	b8 00 00 00 00       	mov    eax,0x0
c00206fa:	eb 05                	jmp    c0020701 <FAT::close(void*)+0x47>
c00206fc:	b8 01 00 00 00       	mov    eax,0x1
c0020701:	83 c4 1c             	add    esp,0x1c
c0020704:	c3                   	ret    
c0020705:	90                   	nop

c0020706 <FAT::closeDir(void*)>:
c0020706:	83 ec 1c             	sub    esp,0x1c
c0020709:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c002070e:	75 07                	jne    c0020717 <FAT::closeDir(void*)+0x11>
c0020710:	b8 04 00 00 00       	mov    eax,0x4
c0020715:	eb 36                	jmp    c002074d <FAT::closeDir(void*)+0x47>
c0020717:	83 ec 0c             	sub    esp,0xc
c002071a:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c002071e:	e8 6e 59 fe ff       	call   c0006091 <f_closedir>
c0020723:	83 c4 10             	add    esp,0x10
c0020726:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002072a:	83 ec 0c             	sub    esp,0xc
c002072d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020731:	e8 73 ee fe ff       	call   c000f5a9 <free>
c0020736:	83 c4 10             	add    esp,0x10
c0020739:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002073d:	85 c0                	test   eax,eax
c002073f:	75 07                	jne    c0020748 <FAT::closeDir(void*)+0x42>
c0020741:	b8 00 00 00 00       	mov    eax,0x0
c0020746:	eb 05                	jmp    c002074d <FAT::closeDir(void*)+0x47>
c0020748:	b8 01 00 00 00       	mov    eax,0x1
c002074d:	83 c4 1c             	add    esp,0x1c
c0020750:	c3                   	ret    
c0020751:	90                   	nop

c0020752 <FAT::seek(void*, unsigned long long)>:
c0020752:	83 ec 2c             	sub    esp,0x2c
c0020755:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020759:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002075d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0020761:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020765:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c002076a:	75 07                	jne    c0020773 <FAT::seek(void*, unsigned long long)+0x21>
c002076c:	b8 04 00 00 00       	mov    eax,0x4
c0020771:	eb 2f                	jmp    c00207a2 <FAT::seek(void*, unsigned long long)+0x50>
c0020773:	83 ec 04             	sub    esp,0x4
c0020776:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c002077a:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c002077e:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0020782:	e8 51 53 fe ff       	call   c0005ad8 <f_lseek>
c0020787:	83 c4 10             	add    esp,0x10
c002078a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c002078e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0020792:	85 c0                	test   eax,eax
c0020794:	75 07                	jne    c002079d <FAT::seek(void*, unsigned long long)+0x4b>
c0020796:	b8 00 00 00 00       	mov    eax,0x0
c002079b:	eb 05                	jmp    c00207a2 <FAT::seek(void*, unsigned long long)+0x50>
c002079d:	b8 01 00 00 00       	mov    eax,0x1
c00207a2:	83 c4 2c             	add    esp,0x2c
c00207a5:	c3                   	ret    

c00207a6 <fatWrapperReadDisk>:
c00207a6:	83 ec 1c             	sub    esp,0x1c
c00207a9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00207ad:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00207b1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00207b5:	89 04 24             	mov    DWORD PTR [esp],eax
c00207b8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00207bc:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00207c0:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00207c5:	8b 04 85 a0 df 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2060]
c00207cc:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00207d0:	83 ec 0c             	sub    esp,0xc
c00207d3:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00207d7:	52                   	push   edx
c00207d8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00207dc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00207e0:	50                   	push   eax
c00207e1:	e8 38 58 ff ff       	call   c001601e <LogicalDisk::read(unsigned long long, int, void*)>
c00207e6:	83 c4 20             	add    esp,0x20
c00207e9:	83 c4 1c             	add    esp,0x1c
c00207ec:	c3                   	ret    

c00207ed <fatWrapperWriteDisk>:
c00207ed:	83 ec 1c             	sub    esp,0x1c
c00207f0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00207f4:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00207f8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00207fc:	89 04 24             	mov    DWORD PTR [esp],eax
c00207ff:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0020803:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0020807:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c002080c:	8b 04 85 a0 df 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2060]
c0020813:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0020817:	83 ec 0c             	sub    esp,0xc
c002081a:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c002081e:	52                   	push   edx
c002081f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020823:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020827:	50                   	push   eax
c0020828:	e8 5d 58 ff ff       	call   c001608a <LogicalDisk::write(unsigned long long, int, void*)>
c002082d:	83 c4 20             	add    esp,0x20
c0020830:	83 c4 1c             	add    esp,0x1c
c0020833:	c3                   	ret    

c0020834 <fatWrapperIoctl>:
c0020834:	53                   	push   ebx
c0020835:	83 ec 28             	sub    esp,0x28
c0020838:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c002083c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0020840:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0020844:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0020848:	80 7c 24 08 02       	cmp    BYTE PTR [esp+0x8],0x2
c002084d:	75 31                	jne    c0020880 <fatWrapperIoctl+0x4c>
c002084f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020853:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0020857:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c002085c:	8b 04 85 a0 df 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2060]
c0020863:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0020869:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c002086f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0020873:	66 89 02             	mov    WORD PTR [edx],ax
c0020876:	b8 00 00 00 00       	mov    eax,0x0
c002087b:	e9 b2 00 00 00       	jmp    c0020932 <fatWrapperIoctl+0xfe>
c0020880:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0020885:	75 6a                	jne    c00208f1 <fatWrapperIoctl+0xbd>
c0020887:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c002088b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c002088f:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020894:	8b 04 85 a0 df 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2060]
c002089b:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c00208a1:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c00208a7:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c00208ad:	89 c8                	mov    eax,ecx
c00208af:	89 da                	mov    edx,ebx
c00208b1:	0f a4 c2 0a          	shld   edx,eax,0xa
c00208b5:	c1 e0 0a             	shl    eax,0xa
c00208b8:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c00208bd:	8b 0c 8d a0 df 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd2060]
c00208c4:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c00208ca:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c00208d0:	89 cb                	mov    ebx,ecx
c00208d2:	c1 fb 1f             	sar    ebx,0x1f
c00208d5:	53                   	push   ebx
c00208d6:	51                   	push   ecx
c00208d7:	52                   	push   edx
c00208d8:	50                   	push   eax
c00208d9:	e8 36 5e 00 00       	call   c0026714 <__udivdi3>
c00208de:	83 c4 10             	add    esp,0x10
c00208e1:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00208e5:	89 01                	mov    DWORD PTR [ecx],eax
c00208e7:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00208ea:	b8 00 00 00 00       	mov    eax,0x0
c00208ef:	eb 41                	jmp    c0020932 <fatWrapperIoctl+0xfe>
c00208f1:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c00208f6:	75 07                	jne    c00208ff <fatWrapperIoctl+0xcb>
c00208f8:	b8 00 00 00 00       	mov    eax,0x0
c00208fd:	eb 33                	jmp    c0020932 <fatWrapperIoctl+0xfe>
c00208ff:	80 7c 24 08 03       	cmp    BYTE PTR [esp+0x8],0x3
c0020904:	75 19                	jne    c002091f <fatWrapperIoctl+0xeb>
c0020906:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c002090a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c002090e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020912:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0020918:	b8 00 00 00 00       	mov    eax,0x0
c002091d:	eb 13                	jmp    c0020932 <fatWrapperIoctl+0xfe>
c002091f:	80 7c 24 08 04       	cmp    BYTE PTR [esp+0x8],0x4
c0020924:	75 07                	jne    c002092d <fatWrapperIoctl+0xf9>
c0020926:	b8 00 00 00 00       	mov    eax,0x0
c002092b:	eb 05                	jmp    c0020932 <fatWrapperIoctl+0xfe>
c002092d:	b8 04 00 00 00       	mov    eax,0x4
c0020932:	83 c4 28             	add    esp,0x28
c0020935:	5b                   	pop    ebx
c0020936:	c3                   	ret    
c0020937:	90                   	nop

c0020938 <FAT::FAT()>:
c0020938:	83 ec 1c             	sub    esp,0x1c
c002093b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002093f:	83 ec 0c             	sub    esp,0xc
c0020942:	50                   	push   eax
c0020943:	e8 8c 20 ff ff       	call   c00129d4 <Filesystem::Filesystem()>
c0020948:	83 c4 10             	add    esp,0x10
c002094b:	ba 9c be 02 c0       	mov    edx,0xc002be9c
c0020950:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020954:	89 10                	mov    DWORD PTR [eax],edx
c0020956:	c7 05 c0 0f 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030fc0,0x0
c0020960:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0020968:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c002096d:	7f 15                	jg     c0020984 <FAT::FAT()+0x4c>
c002096f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020973:	c7 04 85 e0 0f 03 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffcf020],0xffffffff
c002097e:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0020982:	eb e4                	jmp    c0020968 <FAT::FAT()+0x30>
c0020984:	90                   	nop
c0020985:	83 c4 1c             	add    esp,0x1c
c0020988:	c3                   	ret    
c0020989:	90                   	nop

c002098a <FAT::fixFilepath(char*)>:
c002098a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002098e:	8a 00                	mov    al,BYTE PTR [eax]
c0020990:	3c 40                	cmp    al,0x40
c0020992:	7e 2c                	jle    c00209c0 <FAT::fixFilepath(char*)+0x36>
c0020994:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020998:	8a 00                	mov    al,BYTE PTR [eax]
c002099a:	83 e8 41             	sub    eax,0x41
c002099d:	88 c2                	mov    dl,al
c002099f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00209a3:	88 10                	mov    BYTE PTR [eax],dl
c00209a5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00209a9:	8a 00                	mov    al,BYTE PTR [eax]
c00209ab:	0f be c0             	movsx  eax,al
c00209ae:	8b 04 85 e0 0f 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf020]
c00209b5:	83 c0 30             	add    eax,0x30
c00209b8:	88 c2                	mov    dl,al
c00209ba:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00209be:	88 10                	mov    BYTE PTR [eax],dl
c00209c0:	90                   	nop
c00209c1:	c3                   	ret    

c00209c2 <FAT::open(char const*, void**, FileOpenMode)>:
c00209c2:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00209c8:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c00209d0:	74 0a                	je     c00209dc <FAT::open(char const*, void**, FileOpenMode)+0x1a>
c00209d2:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c00209da:	75 0a                	jne    c00209e6 <FAT::open(char const*, void**, FileOpenMode)+0x24>
c00209dc:	b8 04 00 00 00       	mov    eax,0x4
c00209e1:	e9 fd 00 00 00       	jmp    c0020ae3 <FAT::open(char const*, void**, FileOpenMode)+0x121>
c00209e6:	83 ec 08             	sub    esp,0x8
c00209e9:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00209f0:	8d 44 24 14          	lea    eax,[esp+0x14]
c00209f4:	50                   	push   eax
c00209f5:	e8 12 fe fd ff       	call   c000080c <strcpy>
c00209fa:	83 c4 10             	add    esp,0x10
c00209fd:	83 ec 08             	sub    esp,0x8
c0020a00:	8d 44 24 10          	lea    eax,[esp+0x10]
c0020a04:	50                   	push   eax
c0020a05:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020a0c:	e8 79 ff ff ff       	call   c002098a <FAT::fixFilepath(char*)>
c0020a11:	83 c4 10             	add    esp,0x10
c0020a14:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c0020a1c:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0020a23:	83 e0 01             	and    eax,0x1
c0020a26:	74 08                	je     c0020a30 <FAT::open(char const*, void**, FileOpenMode)+0x6e>
c0020a28:	80 8c 24 0f 01 00 00 01 	or     BYTE PTR [esp+0x10f],0x1
c0020a30:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0020a37:	83 e0 04             	and    eax,0x4
c0020a3a:	74 10                	je     c0020a4c <FAT::open(char const*, void**, FileOpenMode)+0x8a>
c0020a3c:	80 8c 24 0f 01 00 00 30 	or     BYTE PTR [esp+0x10f],0x30
c0020a44:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c0020a4c:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0020a53:	83 e0 02             	and    eax,0x2
c0020a56:	74 08                	je     c0020a60 <FAT::open(char const*, void**, FileOpenMode)+0x9e>
c0020a58:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c0020a60:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0020a67:	83 e0 08             	and    eax,0x8
c0020a6a:	74 08                	je     c0020a74 <FAT::open(char const*, void**, FileOpenMode)+0xb2>
c0020a6c:	80 8c 24 0f 01 00 00 04 	or     BYTE PTR [esp+0x10f],0x4
c0020a74:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0020a7b:	83 e0 10             	and    eax,0x10
c0020a7e:	74 08                	je     c0020a88 <FAT::open(char const*, void**, FileOpenMode)+0xc6>
c0020a80:	80 8c 24 0f 01 00 00 08 	or     BYTE PTR [esp+0x10f],0x8
c0020a88:	83 ec 0c             	sub    esp,0xc
c0020a8b:	68 50 02 00 00       	push   0x250
c0020a90:	e8 04 eb fe ff       	call   c000f599 <malloc>
c0020a95:	83 c4 10             	add    esp,0x10
c0020a98:	89 c2                	mov    edx,eax
c0020a9a:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0020aa1:	89 10                	mov    DWORD PTR [eax],edx
c0020aa3:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c0020aab:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0020ab2:	8b 00                	mov    eax,DWORD PTR [eax]
c0020ab4:	83 ec 04             	sub    esp,0x4
c0020ab7:	52                   	push   edx
c0020ab8:	8d 54 24 10          	lea    edx,[esp+0x10]
c0020abc:	52                   	push   edx
c0020abd:	50                   	push   eax
c0020abe:	e8 94 44 fe ff       	call   c0004f57 <f_open>
c0020ac3:	83 c4 10             	add    esp,0x10
c0020ac6:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c0020acd:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c0020ad5:	74 07                	je     c0020ade <FAT::open(char const*, void**, FileOpenMode)+0x11c>
c0020ad7:	b8 01 00 00 00       	mov    eax,0x1
c0020adc:	eb 05                	jmp    c0020ae3 <FAT::open(char const*, void**, FileOpenMode)+0x121>
c0020ade:	b8 00 00 00 00       	mov    eax,0x0
c0020ae3:	81 c4 1c 01 00 00    	add    esp,0x11c
c0020ae9:	c3                   	ret    

c0020aea <FAT::openDir(char const*, void**)>:
c0020aea:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0020af0:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0020af8:	74 0a                	je     c0020b04 <FAT::openDir(char const*, void**)+0x1a>
c0020afa:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0020b02:	75 07                	jne    c0020b0b <FAT::openDir(char const*, void**)+0x21>
c0020b04:	b8 04 00 00 00       	mov    eax,0x4
c0020b09:	eb 7d                	jmp    c0020b88 <FAT::openDir(char const*, void**)+0x9e>
c0020b0b:	83 ec 08             	sub    esp,0x8
c0020b0e:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020b15:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020b19:	50                   	push   eax
c0020b1a:	e8 ed fc fd ff       	call   c000080c <strcpy>
c0020b1f:	83 c4 10             	add    esp,0x10
c0020b22:	83 ec 08             	sub    esp,0x8
c0020b25:	8d 44 24 14          	lea    eax,[esp+0x14]
c0020b29:	50                   	push   eax
c0020b2a:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020b31:	e8 54 fe ff ff       	call   c002098a <FAT::fixFilepath(char*)>
c0020b36:	83 c4 10             	add    esp,0x10
c0020b39:	83 ec 0c             	sub    esp,0xc
c0020b3c:	6a 4c                	push   0x4c
c0020b3e:	e8 56 ea fe ff       	call   c000f599 <malloc>
c0020b43:	83 c4 10             	add    esp,0x10
c0020b46:	89 c2                	mov    edx,eax
c0020b48:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0020b4f:	89 10                	mov    DWORD PTR [eax],edx
c0020b51:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0020b58:	8b 00                	mov    eax,DWORD PTR [eax]
c0020b5a:	83 ec 08             	sub    esp,0x8
c0020b5d:	8d 54 24 14          	lea    edx,[esp+0x14]
c0020b61:	52                   	push   edx
c0020b62:	50                   	push   eax
c0020b63:	e8 27 54 fe ff       	call   c0005f8f <f_opendir>
c0020b68:	83 c4 10             	add    esp,0x10
c0020b6b:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0020b72:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c0020b7a:	74 07                	je     c0020b83 <FAT::openDir(char const*, void**)+0x99>
c0020b7c:	b8 01 00 00 00       	mov    eax,0x1
c0020b81:	eb 05                	jmp    c0020b88 <FAT::openDir(char const*, void**)+0x9e>
c0020b83:	b8 00 00 00 00       	mov    eax,0x0
c0020b88:	81 c4 1c 01 00 00    	add    esp,0x11c
c0020b8e:	c3                   	ret    
c0020b8f:	90                   	nop

c0020b90 <FAT::stat(char const*, unsigned long long*, bool*)>:
c0020b90:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0020b96:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c0020b9e:	75 0a                	jne    c0020baa <FAT::stat(char const*, unsigned long long*, bool*)+0x1a>
c0020ba0:	b8 04 00 00 00       	mov    eax,0x4
c0020ba5:	e9 c9 00 00 00       	jmp    c0020c73 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0020baa:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c0020bb2:	75 0a                	jne    c0020bbe <FAT::stat(char const*, unsigned long long*, bool*)+0x2e>
c0020bb4:	b8 04 00 00 00       	mov    eax,0x4
c0020bb9:	e9 b5 00 00 00       	jmp    c0020c73 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0020bbe:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c0020bc6:	75 0a                	jne    c0020bd2 <FAT::stat(char const*, unsigned long long*, bool*)+0x42>
c0020bc8:	b8 04 00 00 00       	mov    eax,0x4
c0020bcd:	e9 a1 00 00 00       	jmp    c0020c73 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0020bd2:	83 ec 08             	sub    esp,0x8
c0020bd5:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0020bdc:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0020be3:	50                   	push   eax
c0020be4:	e8 23 fc fd ff       	call   c000080c <strcpy>
c0020be9:	83 c4 10             	add    esp,0x10
c0020bec:	83 ec 08             	sub    esp,0x8
c0020bef:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c0020bf6:	50                   	push   eax
c0020bf7:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0020bfe:	e8 87 fd ff ff       	call   c002098a <FAT::fixFilepath(char*)>
c0020c03:	83 c4 10             	add    esp,0x10
c0020c06:	83 ec 08             	sub    esp,0x8
c0020c09:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020c0d:	50                   	push   eax
c0020c0e:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0020c15:	50                   	push   eax
c0020c16:	e8 33 55 fe ff       	call   c000614e <f_stat>
c0020c1b:	83 c4 10             	add    esp,0x10
c0020c1e:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0020c25:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0020c2c:	85 c0                	test   eax,eax
c0020c2e:	74 07                	je     c0020c37 <FAT::stat(char const*, unsigned long long*, bool*)+0xa7>
c0020c30:	83 f8 04             	cmp    eax,0x4
c0020c33:	74 32                	je     c0020c67 <FAT::stat(char const*, unsigned long long*, bool*)+0xd7>
c0020c35:	eb 37                	jmp    c0020c6e <FAT::stat(char const*, unsigned long long*, bool*)+0xde>
c0020c37:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0020c3b:	0f b6 c0             	movzx  eax,al
c0020c3e:	83 e0 10             	and    eax,0x10
c0020c41:	0f 95 c2             	setne  dl
c0020c44:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c0020c4b:	88 10                	mov    BYTE PTR [eax],dl
c0020c4d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0020c50:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0020c54:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c0020c5b:	89 01                	mov    DWORD PTR [ecx],eax
c0020c5d:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0020c60:	b8 00 00 00 00       	mov    eax,0x0
c0020c65:	eb 0c                	jmp    c0020c73 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0020c67:	b8 02 00 00 00       	mov    eax,0x2
c0020c6c:	eb 05                	jmp    c0020c73 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0020c6e:	b8 01 00 00 00       	mov    eax,0x1
c0020c73:	81 c4 2c 02 00 00    	add    esp,0x22c
c0020c79:	c3                   	ret    

c0020c7a <FAT::unlink(char const*)>:
c0020c7a:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0020c80:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0020c88:	75 07                	jne    c0020c91 <FAT::unlink(char const*)+0x17>
c0020c8a:	b8 04 00 00 00       	mov    eax,0x4
c0020c8f:	eb 5c                	jmp    c0020ced <FAT::unlink(char const*)+0x73>
c0020c91:	83 ec 08             	sub    esp,0x8
c0020c94:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020c9b:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020c9f:	50                   	push   eax
c0020ca0:	e8 67 fb fd ff       	call   c000080c <strcpy>
c0020ca5:	83 c4 10             	add    esp,0x10
c0020ca8:	83 ec 08             	sub    esp,0x8
c0020cab:	8d 44 24 14          	lea    eax,[esp+0x14]
c0020caf:	50                   	push   eax
c0020cb0:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020cb7:	e8 ce fc ff ff       	call   c002098a <FAT::fixFilepath(char*)>
c0020cbc:	83 c4 10             	add    esp,0x10
c0020cbf:	83 ec 0c             	sub    esp,0xc
c0020cc2:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020cc6:	50                   	push   eax
c0020cc7:	e8 d4 57 fe ff       	call   c00064a0 <f_unlink>
c0020ccc:	83 c4 10             	add    esp,0x10
c0020ccf:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0020cd6:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0020cdd:	85 c0                	test   eax,eax
c0020cdf:	75 07                	jne    c0020ce8 <FAT::unlink(char const*)+0x6e>
c0020ce1:	b8 00 00 00 00       	mov    eax,0x0
c0020ce6:	eb 05                	jmp    c0020ced <FAT::unlink(char const*)+0x73>
c0020ce8:	b8 01 00 00 00       	mov    eax,0x1
c0020ced:	81 c4 1c 01 00 00    	add    esp,0x11c
c0020cf3:	c3                   	ret    

c0020cf4 <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c0020cf4:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0020cfa:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c0020d01:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c0020d08:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0020d0c:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0020d10:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c0020d18:	75 0a                	jne    c0020d24 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c0020d1a:	b8 04 00 00 00       	mov    eax,0x4
c0020d1f:	e9 1c 01 00 00       	jmp    c0020e40 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c0020d24:	83 ec 08             	sub    esp,0x8
c0020d27:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0020d2e:	8d 44 24 24          	lea    eax,[esp+0x24]
c0020d32:	50                   	push   eax
c0020d33:	e8 d4 fa fd ff       	call   c000080c <strcpy>
c0020d38:	83 c4 10             	add    esp,0x10
c0020d3b:	83 ec 08             	sub    esp,0x8
c0020d3e:	8d 44 24 20          	lea    eax,[esp+0x20]
c0020d42:	50                   	push   eax
c0020d43:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0020d4a:	e8 3b fc ff ff       	call   c002098a <FAT::fixFilepath(char*)>
c0020d4f:	83 c4 10             	add    esp,0x10
c0020d52:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c0020d5a:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c0020d62:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0020d67:	83 e0 01             	and    eax,0x1
c0020d6a:	74 08                	je     c0020d74 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x80>
c0020d6c:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c0020d74:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0020d79:	83 e0 02             	and    eax,0x2
c0020d7c:	74 08                	je     c0020d86 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x92>
c0020d7e:	80 8c 24 1f 01 00 00 20 	or     BYTE PTR [esp+0x11f],0x20
c0020d86:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0020d8b:	83 e0 04             	and    eax,0x4
c0020d8e:	74 08                	je     c0020d98 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xa4>
c0020d90:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c0020d98:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0020d9d:	83 e0 08             	and    eax,0x8
c0020da0:	74 08                	je     c0020daa <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xb6>
c0020da2:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c0020daa:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020daf:	83 e0 01             	and    eax,0x1
c0020db2:	74 08                	je     c0020dbc <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc8>
c0020db4:	80 8c 24 1e 01 00 00 01 	or     BYTE PTR [esp+0x11e],0x1
c0020dbc:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020dc1:	83 e0 02             	and    eax,0x2
c0020dc4:	74 08                	je     c0020dce <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xda>
c0020dc6:	80 8c 24 1e 01 00 00 20 	or     BYTE PTR [esp+0x11e],0x20
c0020dce:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020dd3:	83 e0 04             	and    eax,0x4
c0020dd6:	74 08                	je     c0020de0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xec>
c0020dd8:	80 8c 24 1e 01 00 00 04 	or     BYTE PTR [esp+0x11e],0x4
c0020de0:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020de5:	83 e0 08             	and    eax,0x8
c0020de8:	74 08                	je     c0020df2 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfe>
c0020dea:	80 8c 24 1e 01 00 00 02 	or     BYTE PTR [esp+0x11e],0x2
c0020df2:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0020df9:	08 84 24 1e 01 00 00 	or     BYTE PTR [esp+0x11e],al
c0020e00:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c0020e08:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c0020e10:	83 ec 04             	sub    esp,0x4
c0020e13:	52                   	push   edx
c0020e14:	50                   	push   eax
c0020e15:	8d 44 24 24          	lea    eax,[esp+0x24]
c0020e19:	50                   	push   eax
c0020e1a:	e8 23 5d fe ff       	call   c0006b42 <f_chmod>
c0020e1f:	83 c4 10             	add    esp,0x10
c0020e22:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c0020e29:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c0020e30:	85 c0                	test   eax,eax
c0020e32:	75 07                	jne    c0020e3b <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x147>
c0020e34:	b8 00 00 00 00       	mov    eax,0x0
c0020e39:	eb 05                	jmp    c0020e40 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c0020e3b:	b8 01 00 00 00       	mov    eax,0x1
c0020e40:	81 c4 2c 01 00 00    	add    esp,0x12c
c0020e46:	c3                   	ret    
c0020e47:	90                   	nop

c0020e48 <FAT::rename(char const*, char const*)>:
c0020e48:	81 ec 1c 02 00 00    	sub    esp,0x21c
c0020e4e:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c0020e56:	74 0a                	je     c0020e62 <FAT::rename(char const*, char const*)+0x1a>
c0020e58:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c0020e60:	75 0a                	jne    c0020e6c <FAT::rename(char const*, char const*)+0x24>
c0020e62:	b8 04 00 00 00       	mov    eax,0x4
c0020e67:	e9 98 00 00 00       	jmp    c0020f04 <FAT::rename(char const*, char const*)+0xbc>
c0020e6c:	83 ec 08             	sub    esp,0x8
c0020e6f:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0020e76:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0020e7d:	50                   	push   eax
c0020e7e:	e8 89 f9 fd ff       	call   c000080c <strcpy>
c0020e83:	83 c4 10             	add    esp,0x10
c0020e86:	83 ec 08             	sub    esp,0x8
c0020e89:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c0020e90:	50                   	push   eax
c0020e91:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0020e98:	e8 ed fa ff ff       	call   c002098a <FAT::fixFilepath(char*)>
c0020e9d:	83 c4 10             	add    esp,0x10
c0020ea0:	83 ec 08             	sub    esp,0x8
c0020ea3:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c0020eaa:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020eae:	50                   	push   eax
c0020eaf:	e8 58 f9 fd ff       	call   c000080c <strcpy>
c0020eb4:	83 c4 10             	add    esp,0x10
c0020eb7:	83 ec 08             	sub    esp,0x8
c0020eba:	8d 44 24 14          	lea    eax,[esp+0x14]
c0020ebe:	50                   	push   eax
c0020ebf:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0020ec6:	e8 bf fa ff ff       	call   c002098a <FAT::fixFilepath(char*)>
c0020ecb:	83 c4 10             	add    esp,0x10
c0020ece:	83 ec 08             	sub    esp,0x8
c0020ed1:	8d 44 24 14          	lea    eax,[esp+0x14]
c0020ed5:	50                   	push   eax
c0020ed6:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0020edd:	50                   	push   eax
c0020ede:	e8 6c 59 fe ff       	call   c000684f <f_rename>
c0020ee3:	83 c4 10             	add    esp,0x10
c0020ee6:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c0020eed:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c0020ef4:	85 c0                	test   eax,eax
c0020ef6:	75 07                	jne    c0020eff <FAT::rename(char const*, char const*)+0xb7>
c0020ef8:	b8 00 00 00 00       	mov    eax,0x0
c0020efd:	eb 05                	jmp    c0020f04 <FAT::rename(char const*, char const*)+0xbc>
c0020eff:	b8 01 00 00 00       	mov    eax,0x1
c0020f04:	81 c4 1c 02 00 00    	add    esp,0x21c
c0020f0a:	c3                   	ret    
c0020f0b:	90                   	nop

c0020f0c <FAT::mkdir(char const*)>:
c0020f0c:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0020f12:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0020f1a:	75 07                	jne    c0020f23 <FAT::mkdir(char const*)+0x17>
c0020f1c:	b8 04 00 00 00       	mov    eax,0x4
c0020f21:	eb 5c                	jmp    c0020f7f <FAT::mkdir(char const*)+0x73>
c0020f23:	83 ec 08             	sub    esp,0x8
c0020f26:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020f2d:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020f31:	50                   	push   eax
c0020f32:	e8 d5 f8 fd ff       	call   c000080c <strcpy>
c0020f37:	83 c4 10             	add    esp,0x10
c0020f3a:	83 ec 08             	sub    esp,0x8
c0020f3d:	8d 44 24 14          	lea    eax,[esp+0x14]
c0020f41:	50                   	push   eax
c0020f42:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020f49:	e8 3c fa ff ff       	call   c002098a <FAT::fixFilepath(char*)>
c0020f4e:	83 c4 10             	add    esp,0x10
c0020f51:	83 ec 0c             	sub    esp,0xc
c0020f54:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020f58:	50                   	push   eax
c0020f59:	e8 c5 56 fe ff       	call   c0006623 <f_mkdir>
c0020f5e:	83 c4 10             	add    esp,0x10
c0020f61:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0020f68:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0020f6f:	85 c0                	test   eax,eax
c0020f71:	75 07                	jne    c0020f7a <FAT::mkdir(char const*)+0x6e>
c0020f73:	b8 00 00 00 00       	mov    eax,0x0
c0020f78:	eb 05                	jmp    c0020f7f <FAT::mkdir(char const*)+0x73>
c0020f7a:	b8 01 00 00 00       	mov    eax,0x1
c0020f7f:	81 c4 1c 01 00 00    	add    esp,0x11c
c0020f85:	c3                   	ret    

c0020f86 <FAT::exists(char const*)>:
c0020f86:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0020f8c:	83 ec 08             	sub    esp,0x8
c0020f8f:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0020f96:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0020f9a:	50                   	push   eax
c0020f9b:	e8 6c f8 fd ff       	call   c000080c <strcpy>
c0020fa0:	83 c4 10             	add    esp,0x10
c0020fa3:	83 ec 08             	sub    esp,0x8
c0020fa6:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020faa:	50                   	push   eax
c0020fab:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0020fb2:	e8 d3 f9 ff ff       	call   c002098a <FAT::fixFilepath(char*)>
c0020fb7:	83 c4 10             	add    esp,0x10
c0020fba:	83 ec 08             	sub    esp,0x8
c0020fbd:	8d 84 24 08 01 00 00 	lea    eax,[esp+0x108]
c0020fc4:	50                   	push   eax
c0020fc5:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0020fc9:	50                   	push   eax
c0020fca:	e8 7f 51 fe ff       	call   c000614e <f_stat>
c0020fcf:	83 c4 10             	add    esp,0x10
c0020fd2:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0020fd9:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0020fe0:	85 c0                	test   eax,eax
c0020fe2:	75 04                	jne    c0020fe8 <FAT::exists(char const*)+0x62>
c0020fe4:	b0 01                	mov    al,0x1
c0020fe6:	eb 02                	jmp    c0020fea <FAT::exists(char const*)+0x64>
c0020fe8:	b0 00                	mov    al,0x0
c0020fea:	81 c4 2c 02 00 00    	add    esp,0x22c
c0020ff0:	c3                   	ret    
c0020ff1:	90                   	nop

c0020ff2 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c0020ff2:	b8 08 00 00 00       	mov    eax,0x8
c0020ff7:	c3                   	ret    

c0020ff8 <ISO9660::seek(void*, unsigned long long)>:
c0020ff8:	53                   	push   ebx
c0020ff9:	b8 04 00 00 00       	mov    eax,0x4
c0020ffe:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0021002:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0021006:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c002100a:	85 d2                	test   edx,edx
c002100c:	74 17                	je     c0021025 <ISO9660::seek(void*, unsigned long long)+0x2d>
c002100e:	89 c8                	mov    eax,ecx
c0021010:	3b 5a 08             	cmp    ebx,DWORD PTR [edx+0x8]
c0021013:	1b 42 0c             	sbb    eax,DWORD PTR [edx+0xc]
c0021016:	b8 01 00 00 00       	mov    eax,0x1
c002101b:	73 08                	jae    c0021025 <ISO9660::seek(void*, unsigned long long)+0x2d>
c002101d:	89 5a 10             	mov    DWORD PTR [edx+0x10],ebx
c0021020:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c0021023:	31 c0                	xor    eax,eax
c0021025:	5b                   	pop    ebx
c0021026:	c3                   	ret    
c0021027:	90                   	nop

c0021028 <ISO9660::tell(void*, unsigned long long*)>:
c0021028:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002102c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021030:	85 d2                	test   edx,edx
c0021032:	74 12                	je     c0021046 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c0021034:	85 c0                	test   eax,eax
c0021036:	74 0e                	je     c0021046 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c0021038:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c002103b:	8b 52 10             	mov    edx,DWORD PTR [edx+0x10]
c002103e:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0021041:	89 10                	mov    DWORD PTR [eax],edx
c0021043:	31 c0                	xor    eax,eax
c0021045:	c3                   	ret    
c0021046:	b8 04 00 00 00       	mov    eax,0x4
c002104b:	c3                   	ret    

c002104c <ISO9660::getName()>:
c002104c:	b8 fc be 02 c0       	mov    eax,0xc002befc
c0021051:	c3                   	ret    

c0021052 <ISO9660::stat(void*, unsigned long long*)>:
c0021052:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0021056:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002105a:	85 d2                	test   edx,edx
c002105c:	74 12                	je     c0021070 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c002105e:	85 c0                	test   eax,eax
c0021060:	74 0e                	je     c0021070 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c0021062:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0021065:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0021068:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c002106b:	89 10                	mov    DWORD PTR [eax],edx
c002106d:	31 c0                	xor    eax,eax
c002106f:	c3                   	ret    
c0021070:	b8 04 00 00 00       	mov    eax,0x4
c0021075:	c3                   	ret    

c0021076 <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c0021076:	b8 01 00 00 00       	mov    eax,0x1
c002107b:	c3                   	ret    

c002107c <ISO9660::unlink(char const*)>:
c002107c:	b8 01 00 00 00       	mov    eax,0x1
c0021081:	c3                   	ret    

c0021082 <ISO9660::write(void*, unsigned long, void*, int*)>:
c0021082:	b8 01 00 00 00       	mov    eax,0x1
c0021087:	c3                   	ret    

c0021088 <ISO9660::rename(char const*, char const*)>:
c0021088:	b8 01 00 00 00       	mov    eax,0x1
c002108d:	c3                   	ret    

c002108e <ISO9660::mkdir(char const*)>:
c002108e:	b8 01 00 00 00       	mov    eax,0x1
c0021093:	c3                   	ret    

c0021094 <ISO9660::close(void*)>:
c0021094:	83 ec 0c             	sub    esp,0xc
c0021097:	b8 04 00 00 00       	mov    eax,0x4
c002109c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00210a0:	85 d2                	test   edx,edx
c00210a2:	74 0e                	je     c00210b2 <ISO9660::close(void*)+0x1e>
c00210a4:	83 ec 0c             	sub    esp,0xc
c00210a7:	52                   	push   edx
c00210a8:	e8 fc e4 fe ff       	call   c000f5a9 <free>
c00210ad:	83 c4 10             	add    esp,0x10
c00210b0:	31 c0                	xor    eax,eax
c00210b2:	83 c4 0c             	add    esp,0xc
c00210b5:	c3                   	ret    

c00210b6 <ISO9660::closeDir(void*)>:
c00210b6:	83 ec 0c             	sub    esp,0xc
c00210b9:	b8 04 00 00 00       	mov    eax,0x4
c00210be:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00210c2:	85 d2                	test   edx,edx
c00210c4:	74 0e                	je     c00210d4 <ISO9660::closeDir(void*)+0x1e>
c00210c6:	83 ec 0c             	sub    esp,0xc
c00210c9:	52                   	push   edx
c00210ca:	e8 da e4 fe ff       	call   c000f5a9 <free>
c00210cf:	83 c4 10             	add    esp,0x10
c00210d2:	31 c0                	xor    eax,eax
c00210d4:	83 c4 0c             	add    esp,0xc
c00210d7:	c3                   	ret    

c00210d8 <ISO9660::~ISO9660()>:
c00210d8:	83 ec 0c             	sub    esp,0xc
c00210db:	ba 20 bf 02 c0       	mov    edx,0xc002bf20
c00210e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00210e4:	89 10                	mov    DWORD PTR [eax],edx
c00210e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00210ea:	83 ec 0c             	sub    esp,0xc
c00210ed:	50                   	push   eax
c00210ee:	e8 05 19 ff ff       	call   c00129f8 <Filesystem::~Filesystem()>
c00210f3:	83 c4 10             	add    esp,0x10
c00210f6:	90                   	nop
c00210f7:	83 c4 0c             	add    esp,0xc
c00210fa:	c3                   	ret    
c00210fb:	90                   	nop

c00210fc <ISO9660::~ISO9660()>:
c00210fc:	83 ec 0c             	sub    esp,0xc
c00210ff:	83 ec 0c             	sub    esp,0xc
c0021102:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021106:	e8 cd ff ff ff       	call   c00210d8 <ISO9660::~ISO9660()>
c002110b:	83 c4 10             	add    esp,0x10
c002110e:	83 ec 08             	sub    esp,0x8
c0021111:	6a 08                	push   0x8
c0021113:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021117:	e8 d5 14 ff ff       	call   c00125f1 <operator delete(void*, unsigned long)>
c002111c:	83 c4 10             	add    esp,0x10
c002111f:	83 c4 0c             	add    esp,0xc
c0021122:	c3                   	ret    

c0021123 <__memmem(unsigned char*, int, unsigned char*, int)>:
c0021123:	55                   	push   ebp
c0021124:	31 c9                	xor    ecx,ecx
c0021126:	57                   	push   edi
c0021127:	56                   	push   esi
c0021128:	53                   	push   ebx
c0021129:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c002112d:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0021131:	89 eb                	mov    ebx,ebp
c0021133:	2b 74 24 20          	sub    esi,DWORD PTR [esp+0x20]
c0021137:	39 ce                	cmp    esi,ecx
c0021139:	7e 17                	jle    c0021152 <__memmem(unsigned char*, int, unsigned char*, int)+0x2f>
c002113b:	31 d2                	xor    edx,edx
c002113d:	3b 54 24 20          	cmp    edx,DWORD PTR [esp+0x20]
c0021141:	7d 13                	jge    c0021156 <__memmem(unsigned char*, int, unsigned char*, int)+0x33>
c0021143:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0021147:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c002114a:	38 04 17             	cmp    BYTE PTR [edi+edx*1],al
c002114d:	75 0d                	jne    c002115c <__memmem(unsigned char*, int, unsigned char*, int)+0x39>
c002114f:	42                   	inc    edx
c0021150:	eb eb                	jmp    c002113d <__memmem(unsigned char*, int, unsigned char*, int)+0x1a>
c0021152:	31 c0                	xor    eax,eax
c0021154:	eb 0a                	jmp    c0021160 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c0021156:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c002115a:	eb 04                	jmp    c0021160 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c002115c:	41                   	inc    ecx
c002115d:	43                   	inc    ebx
c002115e:	eb d7                	jmp    c0021137 <__memmem(unsigned char*, int, unsigned char*, int)+0x14>
c0021160:	5b                   	pop    ebx
c0021161:	5e                   	pop    esi
c0021162:	5f                   	pop    edi
c0021163:	5d                   	pop    ebp
c0021164:	c3                   	ret    

c0021165 <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c0021165:	57                   	push   edi
c0021166:	56                   	push   esi
c0021167:	53                   	push   ebx
c0021168:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002116c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0021170:	39 0d c0 10 03 c0    	cmp    DWORD PTR ds:0xc00310c0,ecx
c0021176:	75 08                	jne    c0021180 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1b>
c0021178:	38 05 34 cf 02 c0    	cmp    BYTE PTR ds:0xc002cf34,al
c002117e:	74 2b                	je     c00211ab <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x46>
c0021180:	83 ec 0c             	sub    esp,0xc
c0021183:	a2 34 cf 02 c0       	mov    ds:0xc002cf34,al
c0021188:	68 e0 10 03 c0       	push   0xc00310e0
c002118d:	0f be c0             	movsx  eax,al
c0021190:	6a 01                	push   0x1
c0021192:	89 0d c0 10 03 c0    	mov    DWORD PTR ds:0xc00310c0,ecx
c0021198:	31 db                	xor    ebx,ebx
c002119a:	53                   	push   ebx
c002119b:	51                   	push   ecx
c002119c:	ff 34 85 9c de 02 c0 	push   DWORD PTR [eax*4-0x3ffd2164]
c00211a3:	e8 76 4e ff ff       	call   c001601e <LogicalDisk::read(unsigned long long, int, void*)>
c00211a8:	83 c4 20             	add    esp,0x20
c00211ab:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00211af:	be e0 10 03 c0       	mov    esi,0xc00310e0
c00211b4:	b9 00 08 00 00       	mov    ecx,0x800
c00211b9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00211bb:	5b                   	pop    ebx
c00211bc:	5e                   	pop    esi
c00211bd:	5f                   	pop    edi
c00211be:	c3                   	ret    
c00211bf:	90                   	nop

c00211c0 <ISO9660::tryMount(LogicalDisk*, int)>:
c00211c0:	81 ec 10 08 00 00    	sub    esp,0x810
c00211c6:	8a 84 24 1c 08 00 00 	mov    al,BYTE PTR [esp+0x81c]
c00211cd:	83 c0 41             	add    eax,0x41
c00211d0:	0f be c0             	movsx  eax,al
c00211d3:	50                   	push   eax
c00211d4:	8d 44 24 08          	lea    eax,[esp+0x8]
c00211d8:	50                   	push   eax
c00211d9:	6a 10                	push   0x10
c00211db:	e8 85 ff ff ff       	call   c0021165 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c00211e0:	83 c4 10             	add    esp,0x10
c00211e3:	31 c0                	xor    eax,eax
c00211e5:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c00211ea:	75 1d                	jne    c0021209 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c00211ec:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c00211f1:	75 16                	jne    c0021209 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c00211f3:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c00211f8:	75 0f                	jne    c0021209 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c00211fa:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c00211ff:	75 08                	jne    c0021209 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0021201:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c0021206:	0f 94 c0             	sete   al
c0021209:	81 c4 0c 08 00 00    	add    esp,0x80c
c002120f:	c3                   	ret    

c0021210 <ISO9660::read(void*, unsigned long, void*, int*)>:
c0021210:	55                   	push   ebp
c0021211:	57                   	push   edi
c0021212:	56                   	push   esi
c0021213:	53                   	push   ebx
c0021214:	81 ec 2c 08 00 00    	sub    esp,0x82c
c002121a:	8b ac 24 44 08 00 00 	mov    ebp,DWORD PTR [esp+0x844]
c0021221:	85 ed                	test   ebp,ebp
c0021223:	0f 84 da 01 00 00    	je     c0021403 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f3>
c0021229:	83 bc 24 50 08 00 00 00 	cmp    DWORD PTR [esp+0x850],0x0
c0021231:	0f 84 cc 01 00 00    	je     c0021403 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f3>
c0021237:	b8 01 00 00 00       	mov    eax,0x1
c002123c:	80 7d 18 00          	cmp    BYTE PTR [ebp+0x18],0x0
c0021240:	0f 85 c2 01 00 00    	jne    c0021408 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f8>
c0021246:	31 d2                	xor    edx,edx
c0021248:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c002124f:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0021252:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c0021255:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c0021258:	89 04 24             	mov    DWORD PTR [esp],eax
c002125b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c002125f:	01 c8                	add    eax,ecx
c0021261:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c0021264:	11 da                	adc    edx,ebx
c0021266:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c002126a:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c002126e:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c0021272:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0021276:	19 d7                	sbb    edi,edx
c0021278:	72 11                	jb     c002128b <ISO9660::read(void*, unsigned long, void*, int*)+0x7b>
c002127a:	8b 34 24             	mov    esi,DWORD PTR [esp]
c002127d:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0021281:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0021285:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0021289:	eb 0c                	jmp    c0021297 <ISO9660::read(void*, unsigned long, void*, int*)+0x87>
c002128b:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c002128f:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0021293:	29 ce                	sub    esi,ecx
c0021295:	19 df                	sbb    edi,ebx
c0021297:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c002129a:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c002129d:	0f a4 c2 0b          	shld   edx,eax,0xb
c00212a1:	c1 e0 0b             	shl    eax,0xb
c00212a4:	01 c8                	add    eax,ecx
c00212a6:	11 da                	adc    edx,ebx
c00212a8:	89 04 24             	mov    DWORD PTR [esp],eax
c00212ab:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00212af:	51                   	push   ecx
c00212b0:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c00212b4:	50                   	push   eax
c00212b5:	8d 5c 24 28          	lea    ebx,[esp+0x28]
c00212b9:	53                   	push   ebx
c00212ba:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00212be:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00212c2:	0f ac d0 0b          	shrd   eax,edx,0xb
c00212c6:	50                   	push   eax
c00212c7:	e8 99 fe ff ff       	call   c0021165 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c00212cc:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c00212cf:	b8 00 08 00 00       	mov    eax,0x800
c00212d4:	81 e2 ff 07 00 00    	and    edx,0x7ff
c00212da:	89 74 24 2c          	mov    DWORD PTR [esp+0x2c],esi
c00212de:	29 d0                	sub    eax,edx
c00212e0:	83 c4 10             	add    esp,0x10
c00212e3:	89 f9                	mov    ecx,edi
c00212e5:	39 c6                	cmp    esi,eax
c00212e7:	83 d9 00             	sbb    ecx,0x0
c00212ea:	7d 1b                	jge    c0021307 <ISO9660::read(void*, unsigned long, void*, int*)+0xf7>
c00212ec:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00212f1:	75 12                	jne    c0021305 <ISO9660::read(void*, unsigned long, void*, int*)+0xf5>
c00212f3:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c00212fa:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0021300:	e9 fa 00 00 00       	jmp    c00213ff <ISO9660::read(void*, unsigned long, void*, int*)+0x1ef>
c0021305:	89 f0                	mov    eax,esi
c0021307:	01 d3                	add    ebx,edx
c0021309:	31 d2                	xor    edx,edx
c002130b:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c002130f:	39 c2                	cmp    edx,eax
c0021311:	7d 14                	jge    c0021327 <ISO9660::read(void*, unsigned long, void*, int*)+0x117>
c0021313:	8b 9c 24 4c 08 00 00 	mov    ebx,DWORD PTR [esp+0x84c]
c002131a:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c002131e:	8a 0c 11             	mov    cl,BYTE PTR [ecx+edx*1]
c0021321:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c0021324:	42                   	inc    edx
c0021325:	eb e8                	jmp    c002130f <ISO9660::read(void*, unsigned long, void*, int*)+0xff>
c0021327:	89 c2                	mov    edx,eax
c0021329:	85 c0                	test   eax,eax
c002132b:	79 02                	jns    c002132f <ISO9660::read(void*, unsigned long, void*, int*)+0x11f>
c002132d:	31 d2                	xor    edx,edx
c002132f:	01 c2                	add    edx,eax
c0021331:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0021334:	03 94 24 4c 08 00 00 	add    edx,DWORD PTR [esp+0x84c]
c002133b:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c002133f:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0021343:	99                   	cdq    
c0021344:	01 c1                	add    ecx,eax
c0021346:	11 d3                	adc    ebx,edx
c0021348:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c002134c:	29 c6                	sub    esi,eax
c002134e:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c0021352:	19 d7                	sbb    edi,edx
c0021354:	89 34 24             	mov    DWORD PTR [esp],esi
c0021357:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c002135b:	b8 ff 07 00 00       	mov    eax,0x7ff
c0021360:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0021363:	b8 00 00 00 00       	mov    eax,0x0
c0021368:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c002136c:	7d 43                	jge    c00213b1 <ISO9660::read(void*, unsigned long, void*, int*)+0x1a1>
c002136e:	52                   	push   edx
c002136f:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0021373:	50                   	push   eax
c0021374:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0021378:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002137c:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0021380:	0f ac d0 0b          	shrd   eax,edx,0xb
c0021384:	50                   	push   eax
c0021385:	e8 db fd ff ff       	call   c0021165 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c002138a:	81 44 24 20 00 08 00 00 	add    DWORD PTR [esp+0x20],0x800
c0021392:	83 54 24 24 00       	adc    DWORD PTR [esp+0x24],0x0
c0021397:	81 44 24 28 00 08 00 00 	add    DWORD PTR [esp+0x28],0x800
c002139f:	81 44 24 10 00 f8 ff ff 	add    DWORD PTR [esp+0x10],0xfffff800
c00213a7:	83 54 24 14 ff       	adc    DWORD PTR [esp+0x14],0xffffffff
c00213ac:	83 c4 10             	add    esp,0x10
c00213af:	eb aa                	jmp    c002135b <ISO9660::read(void*, unsigned long, void*, int*)+0x14b>
c00213b1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00213b5:	0b 04 24             	or     eax,DWORD PTR [esp]
c00213b8:	74 2a                	je     c00213e4 <ISO9660::read(void*, unsigned long, void*, int*)+0x1d4>
c00213ba:	50                   	push   eax
c00213bb:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c00213bf:	50                   	push   eax
c00213c0:	8d 74 24 28          	lea    esi,[esp+0x28]
c00213c4:	56                   	push   esi
c00213c5:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00213c9:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00213cd:	0f ac d9 0b          	shrd   ecx,ebx,0xb
c00213d1:	51                   	push   ecx
c00213d2:	e8 8e fd ff ff       	call   c0021165 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c00213d7:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00213db:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00213df:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00213e1:	83 c4 10             	add    esp,0x10
c00213e4:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c00213eb:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00213ef:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00213f3:	89 18                	mov    DWORD PTR [eax],ebx
c00213f5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00213f9:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c00213fc:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c00213ff:	31 c0                	xor    eax,eax
c0021401:	eb 05                	jmp    c0021408 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f8>
c0021403:	b8 04 00 00 00       	mov    eax,0x4
c0021408:	81 c4 2c 08 00 00    	add    esp,0x82c
c002140e:	5b                   	pop    ebx
c002140f:	5e                   	pop    esi
c0021410:	5f                   	pop    edi
c0021411:	5d                   	pop    ebp
c0021412:	c3                   	ret    
c0021413:	90                   	nop

c0021414 <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c0021414:	55                   	push   ebp
c0021415:	57                   	push   edi
c0021416:	56                   	push   esi
c0021417:	53                   	push   ebx
c0021418:	81 ec 5c 09 00 00    	sub    esp,0x95c
c002141e:	8b ac 24 74 09 00 00 	mov    ebp,DWORD PTR [esp+0x974]
c0021425:	85 ed                	test   ebp,ebp
c0021427:	0f 84 51 02 00 00    	je     c002167e <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26a>
c002142d:	83 bc 24 80 09 00 00 00 	cmp    DWORD PTR [esp+0x980],0x0
c0021435:	0f 84 43 02 00 00    	je     c002167e <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26a>
c002143b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002143e:	0b 45 08             	or     eax,DWORD PTR [ebp+0x8]
c0021441:	75 0a                	jne    c002144d <ISO9660::readDir(void*, unsigned long, void*, int*)+0x39>
c0021443:	b8 07 00 00 00       	mov    eax,0x7
c0021448:	e9 36 02 00 00       	jmp    c0021683 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c002144d:	50                   	push   eax
c002144e:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0021452:	50                   	push   eax
c0021453:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c002145a:	53                   	push   ebx
c002145b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c002145e:	c1 e0 0b             	shl    eax,0xb
c0021461:	03 45 10             	add    eax,DWORD PTR [ebp+0x10]
c0021464:	c1 e8 0b             	shr    eax,0xb
c0021467:	50                   	push   eax
c0021468:	e8 f8 fc ff ff       	call   c0021165 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c002146d:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0021470:	83 c4 10             	add    esp,0x10
c0021473:	89 c1                	mov    ecx,eax
c0021475:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0021478:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c002147e:	8a 1c 0b             	mov    bl,BYTE PTR [ebx+ecx*1]
c0021481:	84 db                	test   bl,bl
c0021483:	0f 85 8b 00 00 00    	jne    c0021514 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x100>
c0021489:	8d b0 ff 07 00 00    	lea    esi,[eax+0x7ff]
c002148f:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0021492:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0021498:	29 c6                	sub    esi,eax
c002149a:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c002149e:	89 f3                	mov    ebx,esi
c00214a0:	89 f1                	mov    ecx,esi
c00214a2:	c1 fb 1f             	sar    ebx,0x1f
c00214a5:	01 f0                	add    eax,esi
c00214a7:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c00214aa:	11 da                	adc    edx,ebx
c00214ac:	89 04 24             	mov    DWORD PTR [esp],eax
c00214af:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00214b3:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c00214b6:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c00214b9:	89 d8                	mov    eax,ebx
c00214bb:	39 74 24 0c          	cmp    DWORD PTR [esp+0xc],esi
c00214bf:	ba 00 00 00 00       	mov    edx,0x0
c00214c4:	19 f8                	sbb    eax,edi
c00214c6:	b8 00 00 00 00       	mov    eax,0x0
c00214cb:	73 08                	jae    c00214d5 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc1>
c00214cd:	89 f0                	mov    eax,esi
c00214cf:	89 fa                	mov    edx,edi
c00214d1:	29 c8                	sub    eax,ecx
c00214d3:	19 da                	sbb    edx,ebx
c00214d5:	89 d7                	mov    edi,edx
c00214d7:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c00214da:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c00214dd:	09 c7                	or     edi,eax
c00214df:	0f 84 5e ff ff ff    	je     c0021443 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x2f>
c00214e5:	57                   	push   edi
c00214e6:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c00214ea:	50                   	push   eax
c00214eb:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c00214f2:	53                   	push   ebx
c00214f3:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00214f6:	c1 e0 0b             	shl    eax,0xb
c00214f9:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c00214fd:	c1 e8 0b             	shr    eax,0xb
c0021500:	50                   	push   eax
c0021501:	e8 5f fc ff ff       	call   c0021165 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021506:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0021509:	83 c4 10             	add    esp,0x10
c002150c:	25 ff 07 00 00       	and    eax,0x7ff
c0021511:	8a 1c 03             	mov    bl,BYTE PTR [ebx+eax*1]
c0021514:	31 ff                	xor    edi,edi
c0021516:	56                   	push   esi
c0021517:	6a 28                	push   0x28
c0021519:	6a 00                	push   0x0
c002151b:	8d 44 24 24          	lea    eax,[esp+0x24]
c002151f:	50                   	push   eax
c0021520:	e8 2b f2 fd ff       	call   c0000750 <memset>
c0021525:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0021528:	25 ff 07 00 00       	and    eax,0x7ff
c002152d:	89 c6                	mov    esi,eax
c002152f:	83 c6 21             	add    esi,0x21
c0021532:	83 d7 00             	adc    edi,0x0
c0021535:	83 c4 10             	add    esp,0x10
c0021538:	31 c9                	xor    ecx,ecx
c002153a:	8a 84 34 50 01 00 00 	mov    al,BYTE PTR [esp+esi*1+0x150]
c0021541:	83 f9 28             	cmp    ecx,0x28
c0021544:	88 04 24             	mov    BYTE PTR [esp],al
c0021547:	0f 94 c2             	sete   dl
c002154a:	88 d0                	mov    al,dl
c002154c:	ba ff 07 00 00       	mov    edx,0x7ff
c0021551:	39 f2                	cmp    edx,esi
c0021553:	ba 00 00 00 00       	mov    edx,0x0
c0021558:	19 fa                	sbb    edx,edi
c002155a:	0f 92 c2             	setb   dl
c002155d:	09 c2                	or     edx,eax
c002155f:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c0021563:	0f 94 c0             	sete   al
c0021566:	08 d0                	or     al,dl
c0021568:	75 16                	jne    c0021580 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x16c>
c002156a:	80 3c 24 3b          	cmp    BYTE PTR [esp],0x3b
c002156e:	74 10                	je     c0021580 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x16c>
c0021570:	8a 04 24             	mov    al,BYTE PTR [esp]
c0021573:	88 44 0c 18          	mov    BYTE PTR [esp+ecx*1+0x18],al
c0021577:	41                   	inc    ecx
c0021578:	83 c6 01             	add    esi,0x1
c002157b:	83 d7 00             	adc    edi,0x0
c002157e:	eb ba                	jmp    c002153a <ISO9660::readDir(void*, unsigned long, void*, int*)+0x126>
c0021580:	66 c7 44 24 40 00 00 	mov    WORD PTR [esp+0x40],0x0
c0021587:	83 ec 0c             	sub    esp,0xc
c002158a:	8d 74 24 24          	lea    esi,[esp+0x24]
c002158e:	56                   	push   esi
c002158f:	e8 d8 f1 fd ff       	call   c000076c <strlen>
c0021594:	8d bc 24 60 09 00 00 	lea    edi,[esp+0x960]
c002159b:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c002159f:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c00215a7:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00215aa:	5a                   	pop    edx
c00215ab:	25 ff 07 00 00       	and    eax,0x7ff
c00215b0:	59                   	pop    ecx
c00215b1:	01 f8                	add    eax,edi
c00215b3:	8a 80 19 f8 ff ff    	mov    al,BYTE PTR [eax-0x7e7]
c00215b9:	83 e0 02             	and    eax,0x2
c00215bc:	3c 01                	cmp    al,0x1
c00215be:	19 c0                	sbb    eax,eax
c00215c0:	83 c0 02             	add    eax,0x2
c00215c3:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c00215c7:	56                   	push   esi
c00215c8:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c00215cc:	50                   	push   eax
c00215cd:	e8 3a f2 fd ff       	call   c000080c <strcpy>
c00215d2:	8a 44 24 60          	mov    al,BYTE PTR [esp+0x60]
c00215d6:	83 c4 10             	add    esp,0x10
c00215d9:	84 c0                	test   al,al
c00215db:	75 21                	jne    c00215fe <ISO9660::readDir(void*, unsigned long, void*, int*)+0x1ea>
c00215dd:	c7 44 24 44 01 00 00 00 	mov    DWORD PTR [esp+0x44],0x1
c00215e5:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c00215ed:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c00215f5:	66 c7 44 24 50 2e 00 	mov    WORD PTR [esp+0x50],0x2e
c00215fc:	eb 28                	jmp    c0021626 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x212>
c00215fe:	fe c8                	dec    al
c0021600:	75 24                	jne    c0021626 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x212>
c0021602:	c7 44 24 44 02 00 00 00 	mov    DWORD PTR [esp+0x44],0x2
c002160a:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0021612:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c002161a:	66 c7 44 24 50 2e 2e 	mov    WORD PTR [esp+0x50],0x2e2e
c0021621:	c6 44 24 52 00       	mov    BYTE PTR [esp+0x52],0x0
c0021626:	8d 74 24 40          	lea    esi,[esp+0x40]
c002162a:	8b 8c 24 78 09 00 00 	mov    ecx,DWORD PTR [esp+0x978]
c0021631:	8b bc 24 7c 09 00 00 	mov    edi,DWORD PTR [esp+0x97c]
c0021638:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c002163a:	0f b6 f3             	movzx  esi,bl
c002163d:	8b 84 24 80 09 00 00 	mov    eax,DWORD PTR [esp+0x980]
c0021644:	31 db                	xor    ebx,ebx
c0021646:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c002164c:	89 df                	mov    edi,ebx
c002164e:	01 75 10             	add    DWORD PTR [ebp+0x10],esi
c0021651:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021654:	11 5d 14             	adc    DWORD PTR [ebp+0x14],ebx
c0021657:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c002165a:	39 c6                	cmp    esi,eax
c002165c:	19 d7                	sbb    edi,edx
c002165e:	72 10                	jb     c0021670 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x25c>
c0021660:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0021667:	c7 45 0c 00 00 00 00 	mov    DWORD PTR [ebp+0xc],0x0
c002166e:	eb 0a                	jmp    c002167a <ISO9660::readDir(void*, unsigned long, void*, int*)+0x266>
c0021670:	29 f0                	sub    eax,esi
c0021672:	19 da                	sbb    edx,ebx
c0021674:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c0021677:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c002167a:	31 c0                	xor    eax,eax
c002167c:	eb 05                	jmp    c0021683 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c002167e:	b8 04 00 00 00       	mov    eax,0x4
c0021683:	81 c4 5c 09 00 00    	add    esp,0x95c
c0021689:	5b                   	pop    ebx
c002168a:	5e                   	pop    esi
c002168b:	5f                   	pop    edi
c002168c:	5d                   	pop    ebp
c002168d:	c3                   	ret    

c002168e <readRoot(unsigned int*, unsigned int*, char)>:
c002168e:	57                   	push   edi
c002168f:	56                   	push   esi
c0021690:	81 ec 38 08 00 00    	sub    esp,0x838
c0021696:	0f be 84 24 4c 08 00 00 	movsx  eax,BYTE PTR [esp+0x84c]
c002169e:	50                   	push   eax
c002169f:	8d 44 24 38          	lea    eax,[esp+0x38]
c00216a3:	50                   	push   eax
c00216a4:	6a 10                	push   0x10
c00216a6:	e8 ba fa ff ff       	call   c0021165 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c00216ab:	8d b4 24 dc 00 00 00 	lea    esi,[esp+0xdc]
c00216b2:	8d 7c 24 1e          	lea    edi,[esp+0x1e]
c00216b6:	b9 22 00 00 00       	mov    ecx,0x22
c00216bb:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00216bd:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c00216c4:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00216c8:	89 10                	mov    DWORD PTR [eax],edx
c00216ca:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c00216d1:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00216d5:	89 10                	mov    DWORD PTR [eax],edx
c00216d7:	81 c4 44 08 00 00    	add    esp,0x844
c00216dd:	b0 01                	mov    al,0x1
c00216df:	5e                   	pop    esi
c00216e0:	5f                   	pop    edi
c00216e1:	c3                   	ret    

c00216e2 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>:
c00216e2:	55                   	push   ebp
c00216e3:	57                   	push   edi
c00216e4:	56                   	push   esi
c00216e5:	53                   	push   ebx
c00216e6:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00216ec:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c00216f3:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c00216fa:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00216fe:	80 7b 01 3a          	cmp    BYTE PTR [ebx+0x1],0x3a
c0021702:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0021706:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c002170a:	75 03                	jne    c002170f <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c002170c:	83 c3 02             	add    ebx,0x2
c002170f:	80 3b 2f             	cmp    BYTE PTR [ebx],0x2f
c0021712:	75 03                	jne    c0021717 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x35>
c0021714:	43                   	inc    ebx
c0021715:	eb f8                	jmp    c002170f <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c0021717:	51                   	push   ecx
c0021718:	68 00 01 00 00       	push   0x100
c002171d:	6a 00                	push   0x0
c002171f:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021723:	50                   	push   eax
c0021724:	e8 27 f0 fd ff       	call   c0000750 <memset>
c0021729:	83 c4 10             	add    esp,0x10
c002172c:	31 d2                	xor    edx,edx
c002172e:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c0021731:	84 c0                	test   al,al
c0021733:	74 21                	je     c0021756 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x74>
c0021735:	3c 2f                	cmp    al,0x2f
c0021737:	75 0b                	jne    c0021744 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x62>
c0021739:	8d 5c 13 01          	lea    ebx,[ebx+edx*1+0x1]
c002173d:	bd 01 00 00 00       	mov    ebp,0x1
c0021742:	eb 14                	jmp    c0021758 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x76>
c0021744:	8d 48 9f             	lea    ecx,[eax-0x61]
c0021747:	80 f9 19             	cmp    cl,0x19
c002174a:	77 03                	ja     c002174f <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x6d>
c002174c:	83 e8 20             	sub    eax,0x20
c002174f:	88 44 14 10          	mov    BYTE PTR [esp+edx*1+0x10],al
c0021753:	42                   	inc    edx
c0021754:	eb d8                	jmp    c002172e <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x4c>
c0021756:	31 ed                	xor    ebp,ebp
c0021758:	83 ec 0c             	sub    esp,0xc
c002175b:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c0021762:	e8 32 de fe ff       	call   c000f599 <malloc>
c0021767:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c002176e:	89 c6                	mov    esi,eax
c0021770:	8d b9 ff 07 00 00    	lea    edi,[ecx+0x7ff]
c0021776:	c1 ef 0b             	shr    edi,0xb
c0021779:	03 bc 24 44 01 00 00 	add    edi,DWORD PTR [esp+0x144]
c0021780:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c0021784:	83 c4 10             	add    esp,0x10
c0021787:	0f be 7c 24 0c       	movsx  edi,BYTE PTR [esp+0xc]
c002178c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0021790:	3b 8c 24 34 01 00 00 	cmp    ecx,DWORD PTR [esp+0x134]
c0021797:	74 28                	je     c00217c1 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xdf>
c0021799:	52                   	push   edx
c002179a:	57                   	push   edi
c002179b:	50                   	push   eax
c002179c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00217a0:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c00217a7:	e8 b9 f9 ff ff       	call   c0021165 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c00217ac:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00217b0:	ff 84 24 44 01 00 00 	inc    DWORD PTR [esp+0x144]
c00217b7:	05 00 08 00 00       	add    eax,0x800
c00217bc:	83 c4 10             	add    esp,0x10
c00217bf:	eb cb                	jmp    c002178c <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xaa>
c00217c1:	83 ec 0c             	sub    esp,0xc
c00217c4:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c00217c8:	57                   	push   edi
c00217c9:	e8 9e ef fd ff       	call   c000076c <strlen>
c00217ce:	50                   	push   eax
c00217cf:	57                   	push   edi
c00217d0:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c00217d7:	56                   	push   esi
c00217d8:	e8 46 f9 ff ff       	call   c0021123 <__memmem(unsigned char*, int, unsigned char*, int)>
c00217dd:	83 c4 20             	add    esp,0x20
c00217e0:	85 c0                	test   eax,eax
c00217e2:	75 13                	jne    c00217f7 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x115>
c00217e4:	83 ec 0c             	sub    esp,0xc
c00217e7:	56                   	push   esi
c00217e8:	e8 bc dd fe ff       	call   c000f5a9 <free>
c00217ed:	83 c4 10             	add    esp,0x10
c00217f0:	31 c0                	xor    eax,eax
c00217f2:	e9 b3 00 00 00       	jmp    c00218aa <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c00217f7:	0f b6 78 e2          	movzx  edi,BYTE PTR [eax-0x1e]
c00217fb:	0f b6 50 e3          	movzx  edx,BYTE PTR [eax-0x1d]
c00217ff:	c1 e7 08             	shl    edi,0x8
c0021802:	c1 e2 10             	shl    edx,0x10
c0021805:	09 d7                	or     edi,edx
c0021807:	0f b6 50 e1          	movzx  edx,BYTE PTR [eax-0x1f]
c002180b:	09 d7                	or     edi,edx
c002180d:	0f b6 50 e4          	movzx  edx,BYTE PTR [eax-0x1c]
c0021811:	c1 e2 18             	shl    edx,0x18
c0021814:	09 d7                	or     edi,edx
c0021816:	0f b6 50 ea          	movzx  edx,BYTE PTR [eax-0x16]
c002181a:	89 d1                	mov    ecx,edx
c002181c:	0f b6 50 eb          	movzx  edx,BYTE PTR [eax-0x15]
c0021820:	c1 e1 08             	shl    ecx,0x8
c0021823:	c1 e2 10             	shl    edx,0x10
c0021826:	09 ca                	or     edx,ecx
c0021828:	0f b6 48 e9          	movzx  ecx,BYTE PTR [eax-0x17]
c002182c:	09 ca                	or     edx,ecx
c002182e:	0f b6 48 ec          	movzx  ecx,BYTE PTR [eax-0x14]
c0021832:	c1 e1 18             	shl    ecx,0x18
c0021835:	09 ca                	or     edx,ecx
c0021837:	89 e9                	mov    ecx,ebp
c0021839:	84 c9                	test   cl,cl
c002183b:	74 3c                	je     c0021879 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x197>
c002183d:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0021841:	83 ec 0c             	sub    esp,0xc
c0021844:	56                   	push   esi
c0021845:	e8 5f dd fe ff       	call   c000f5a9 <free>
c002184a:	83 c4 0c             	add    esp,0xc
c002184d:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0021854:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c0021859:	50                   	push   eax
c002185a:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0021861:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0021868:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c002186c:	52                   	push   edx
c002186d:	57                   	push   edi
c002186e:	53                   	push   ebx
c002186f:	e8 6e fe ff ff       	call   c00216e2 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c0021874:	83 c4 20             	add    esp,0x20
c0021877:	eb 31                	jmp    c00218aa <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c0021879:	8a 40 f8             	mov    al,BYTE PTR [eax-0x8]
c002187c:	8b 9c 24 3c 01 00 00 	mov    ebx,DWORD PTR [esp+0x13c]
c0021883:	d0 e8                	shr    al,1
c0021885:	89 3b                	mov    DWORD PTR [ebx],edi
c0021887:	83 e0 01             	and    eax,0x1
c002188a:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c0021891:	83 ec 0c             	sub    esp,0xc
c0021894:	89 13                	mov    DWORD PTR [ebx],edx
c0021896:	8b 9c 24 54 01 00 00 	mov    ebx,DWORD PTR [esp+0x154]
c002189d:	89 03                	mov    DWORD PTR [ebx],eax
c002189f:	56                   	push   esi
c00218a0:	e8 04 dd fe ff       	call   c000f5a9 <free>
c00218a5:	83 c4 10             	add    esp,0x10
c00218a8:	b0 01                	mov    al,0x1
c00218aa:	81 c4 1c 01 00 00    	add    esp,0x11c
c00218b0:	5b                   	pop    ebx
c00218b1:	5e                   	pop    esi
c00218b2:	5f                   	pop    edi
c00218b3:	5d                   	pop    ebp
c00218b4:	c3                   	ret    

c00218b5 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>:
c00218b5:	55                   	push   ebp
c00218b6:	57                   	push   edi
c00218b7:	56                   	push   esi
c00218b8:	53                   	push   ebx
c00218b9:	83 ec 20             	sub    esp,0x20
c00218bc:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00218c0:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c00218c4:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c00218c8:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00218d0:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00218d8:	0f be 7c 24 40       	movsx  edi,BYTE PTR [esp+0x40]
c00218dd:	c7 03 ff ff ff ff    	mov    DWORD PTR [ebx],0xffffffff
c00218e3:	c7 06 ff ff ff ff    	mov    DWORD PTR [esi],0xffffffff
c00218e9:	57                   	push   edi
c00218ea:	8d 44 24 14          	lea    eax,[esp+0x14]
c00218ee:	50                   	push   eax
c00218ef:	8d 44 24 14          	lea    eax,[esp+0x14]
c00218f3:	50                   	push   eax
c00218f4:	e8 95 fd ff ff       	call   c002168e <readRoot(unsigned int*, unsigned int*, char)>
c00218f9:	5a                   	pop    edx
c00218fa:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00218fe:	e8 69 ee fd ff       	call   c000076c <strlen>
c0021903:	83 c4 10             	add    esp,0x10
c0021906:	83 f8 03             	cmp    eax,0x3
c0021909:	77 17                	ja     c0021922 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x6d>
c002190b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002190f:	89 03                	mov    DWORD PTR [ebx],eax
c0021911:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021915:	89 06                	mov    DWORD PTR [esi],eax
c0021917:	c7 45 00 01 00 00 00 	mov    DWORD PTR [ebp+0x0],0x1
c002191e:	b0 01                	mov    al,0x1
c0021920:	eb 19                	jmp    c002193b <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x86>
c0021922:	50                   	push   eax
c0021923:	55                   	push   ebp
c0021924:	57                   	push   edi
c0021925:	56                   	push   esi
c0021926:	53                   	push   ebx
c0021927:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c002192b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c002192f:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0021933:	e8 aa fd ff ff       	call   c00216e2 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c0021938:	83 c4 20             	add    esp,0x20
c002193b:	83 c4 1c             	add    esp,0x1c
c002193e:	5b                   	pop    ebx
c002193f:	5e                   	pop    esi
c0021940:	5f                   	pop    edi
c0021941:	5d                   	pop    ebp
c0021942:	c3                   	ret    
c0021943:	90                   	nop

c0021944 <ISO9660::open(char const*, void**, FileOpenMode)>:
c0021944:	57                   	push   edi
c0021945:	56                   	push   esi
c0021946:	53                   	push   ebx
c0021947:	83 ec 10             	sub    esp,0x10
c002194a:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c002194e:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0021952:	85 ff                	test   edi,edi
c0021954:	0f 84 8b 00 00 00    	je     c00219e5 <ISO9660::open(char const*, void**, FileOpenMode)+0xa1>
c002195a:	85 f6                	test   esi,esi
c002195c:	0f 84 83 00 00 00    	je     c00219e5 <ISO9660::open(char const*, void**, FileOpenMode)+0xa1>
c0021962:	b8 03 00 00 00       	mov    eax,0x3
c0021967:	83 7c 24 2c 01       	cmp    DWORD PTR [esp+0x2c],0x1
c002196c:	75 7c                	jne    c00219ea <ISO9660::open(char const*, void**, FileOpenMode)+0xa6>
c002196e:	83 ec 0c             	sub    esp,0xc
c0021971:	6a 1c                	push   0x1c
c0021973:	e8 21 dc fe ff       	call   c000f599 <malloc>
c0021978:	89 07                	mov    DWORD PTR [edi],eax
c002197a:	89 c3                	mov    ebx,eax
c002197c:	58                   	pop    eax
c002197d:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021981:	50                   	push   eax
c0021982:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0021985:	50                   	push   eax
c0021986:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002198a:	50                   	push   eax
c002198b:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002198f:	50                   	push   eax
c0021990:	56                   	push   esi
c0021991:	e8 1f ff ff ff       	call   c00218b5 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0021996:	83 c4 20             	add    esp,0x20
c0021999:	84 c0                	test   al,al
c002199b:	74 07                	je     c00219a4 <ISO9660::open(char const*, void**, FileOpenMode)+0x60>
c002199d:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00219a2:	74 0b                	je     c00219af <ISO9660::open(char const*, void**, FileOpenMode)+0x6b>
c00219a4:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c00219a8:	b8 01 00 00 00       	mov    eax,0x1
c00219ad:	eb 3b                	jmp    c00219ea <ISO9660::open(char const*, void**, FileOpenMode)+0xa6>
c00219af:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00219b3:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c00219b7:	89 03                	mov    DWORD PTR [ebx],eax
c00219b9:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c00219c0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00219c4:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00219cb:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00219d2:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00219d5:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c00219dc:	8a 06                	mov    al,BYTE PTR [esi]
c00219de:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c00219e1:	31 c0                	xor    eax,eax
c00219e3:	eb 05                	jmp    c00219ea <ISO9660::open(char const*, void**, FileOpenMode)+0xa6>
c00219e5:	b8 04 00 00 00       	mov    eax,0x4
c00219ea:	83 c4 10             	add    esp,0x10
c00219ed:	5b                   	pop    ebx
c00219ee:	5e                   	pop    esi
c00219ef:	5f                   	pop    edi
c00219f0:	c3                   	ret    
c00219f1:	90                   	nop

c00219f2 <ISO9660::exists(char const*)>:
c00219f2:	83 ec 28             	sub    esp,0x28
c00219f5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00219f9:	8d 54 24 18          	lea    edx,[esp+0x18]
c00219fd:	52                   	push   edx
c00219fe:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0021a01:	52                   	push   edx
c0021a02:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0021a06:	52                   	push   edx
c0021a07:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0021a0b:	52                   	push   edx
c0021a0c:	50                   	push   eax
c0021a0d:	e8 a3 fe ff ff       	call   c00218b5 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0021a12:	83 c4 3c             	add    esp,0x3c
c0021a15:	c3                   	ret    

c0021a16 <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c0021a16:	56                   	push   esi
c0021a17:	53                   	push   ebx
c0021a18:	83 ec 14             	sub    esp,0x14
c0021a1b:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0021a1f:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0021a23:	85 db                	test   ebx,ebx
c0021a25:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0021a29:	0f 94 c2             	sete   dl
c0021a2c:	85 f6                	test   esi,esi
c0021a2e:	0f 94 c0             	sete   al
c0021a31:	08 c2                	or     dl,al
c0021a33:	75 68                	jne    c0021a9d <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c0021a35:	85 c9                	test   ecx,ecx
c0021a37:	74 64                	je     c0021a9d <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c0021a39:	83 ec 0c             	sub    esp,0xc
c0021a3c:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0021a3f:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021a43:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0021a49:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0021a50:	50                   	push   eax
c0021a51:	0f be 01             	movsx  eax,BYTE PTR [ecx]
c0021a54:	50                   	push   eax
c0021a55:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021a59:	50                   	push   eax
c0021a5a:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021a5e:	50                   	push   eax
c0021a5f:	51                   	push   ecx
c0021a60:	e8 50 fe ff ff       	call   c00218b5 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0021a65:	83 c4 20             	add    esp,0x20
c0021a68:	ba 01 00 00 00       	mov    edx,0x1
c0021a6d:	84 c0                	test   al,al
c0021a6f:	74 31                	je     c0021aa2 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c0021a71:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021a75:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0021a7c:	89 03                	mov    DWORD PTR [ebx],eax
c0021a7e:	ba 00 00 00 00       	mov    edx,0x0
c0021a83:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021a87:	85 c0                	test   eax,eax
c0021a89:	0f 95 06             	setne  BYTE PTR [esi]
c0021a8c:	74 14                	je     c0021aa2 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c0021a8e:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0021a94:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0021a9b:	eb 05                	jmp    c0021aa2 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c0021a9d:	ba 04 00 00 00       	mov    edx,0x4
c0021aa2:	83 c4 14             	add    esp,0x14
c0021aa5:	89 d0                	mov    eax,edx
c0021aa7:	5b                   	pop    ebx
c0021aa8:	5e                   	pop    esi
c0021aa9:	c3                   	ret    

c0021aaa <ISO9660::openDir(char const*, void**)>:
c0021aaa:	57                   	push   edi
c0021aab:	56                   	push   esi
c0021aac:	53                   	push   ebx
c0021aad:	83 ec 10             	sub    esp,0x10
c0021ab0:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0021ab4:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0021ab8:	85 ff                	test   edi,edi
c0021aba:	74 7b                	je     c0021b37 <ISO9660::openDir(char const*, void**)+0x8d>
c0021abc:	85 f6                	test   esi,esi
c0021abe:	74 77                	je     c0021b37 <ISO9660::openDir(char const*, void**)+0x8d>
c0021ac0:	83 ec 0c             	sub    esp,0xc
c0021ac3:	6a 1c                	push   0x1c
c0021ac5:	e8 cf da fe ff       	call   c000f599 <malloc>
c0021aca:	89 07                	mov    DWORD PTR [edi],eax
c0021acc:	89 c3                	mov    ebx,eax
c0021ace:	58                   	pop    eax
c0021acf:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021ad3:	50                   	push   eax
c0021ad4:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0021ad7:	50                   	push   eax
c0021ad8:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021adc:	50                   	push   eax
c0021add:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021ae1:	50                   	push   eax
c0021ae2:	56                   	push   esi
c0021ae3:	e8 cd fd ff ff       	call   c00218b5 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0021ae8:	83 c4 20             	add    esp,0x20
c0021aeb:	84 c0                	test   al,al
c0021aed:	74 07                	je     c0021af6 <ISO9660::openDir(char const*, void**)+0x4c>
c0021aef:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0021af4:	75 0b                	jne    c0021b01 <ISO9660::openDir(char const*, void**)+0x57>
c0021af6:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c0021afa:	b8 01 00 00 00       	mov    eax,0x1
c0021aff:	eb 3b                	jmp    c0021b3c <ISO9660::openDir(char const*, void**)+0x92>
c0021b01:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021b05:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c0021b09:	89 03                	mov    DWORD PTR [ebx],eax
c0021b0b:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0021b12:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021b16:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0021b1d:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0021b24:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0021b27:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0021b2e:	8a 06                	mov    al,BYTE PTR [esi]
c0021b30:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c0021b33:	31 c0                	xor    eax,eax
c0021b35:	eb 05                	jmp    c0021b3c <ISO9660::openDir(char const*, void**)+0x92>
c0021b37:	b8 04 00 00 00       	mov    eax,0x4
c0021b3c:	83 c4 10             	add    esp,0x10
c0021b3f:	5b                   	pop    ebx
c0021b40:	5e                   	pop    esi
c0021b41:	5f                   	pop    edi
c0021b42:	c3                   	ret    
c0021b43:	90                   	nop

c0021b44 <ISO9660::ISO9660()>:
c0021b44:	83 ec 0c             	sub    esp,0xc
c0021b47:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021b4b:	83 ec 0c             	sub    esp,0xc
c0021b4e:	50                   	push   eax
c0021b4f:	e8 80 0e ff ff       	call   c00129d4 <Filesystem::Filesystem()>
c0021b54:	83 c4 10             	add    esp,0x10
c0021b57:	ba 20 bf 02 c0       	mov    edx,0xc002bf20
c0021b5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021b60:	89 10                	mov    DWORD PTR [eax],edx
c0021b62:	90                   	nop
c0021b63:	83 c4 0c             	add    esp,0xc
c0021b66:	c3                   	ret    
c0021b67:	90                   	nop

c0021b68 <SoundChannel::SoundChannel(int, int, int, int)>:
c0021b68:	83 ec 1c             	sub    esp,0x1c
c0021b6b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021b6f:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0021b73:	89 10                	mov    DWORD PTR [eax],edx
c0021b75:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021b79:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0021b7d:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0021b80:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021b84:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0021b88:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0021b8b:	83 7c 24 30 ff       	cmp    DWORD PTR [esp+0x30],0xffffffff
c0021b90:	75 23                	jne    c0021bb5 <SoundChannel::SoundChannel(int, int, int, int)+0x4d>
c0021b92:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021b96:	8b 10                	mov    edx,DWORD PTR [eax]
c0021b98:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021b9c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021b9f:	0f af c2             	imul   eax,edx
c0021ba2:	85 c0                	test   eax,eax
c0021ba4:	79 03                	jns    c0021ba9 <SoundChannel::SoundChannel(int, int, int, int)+0x41>
c0021ba6:	83 c0 03             	add    eax,0x3
c0021ba9:	c1 f8 02             	sar    eax,0x2
c0021bac:	05 a0 0f 00 00       	add    eax,0xfa0
c0021bb1:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0021bb5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021bb9:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0021bbd:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0021bc0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021bc4:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0021bcb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021bcf:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c0021bd6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021bda:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0021bdd:	c1 e0 02             	shl    eax,0x2
c0021be0:	83 ec 0c             	sub    esp,0xc
c0021be3:	50                   	push   eax
c0021be4:	e8 b0 d9 fe ff       	call   c000f599 <malloc>
c0021be9:	83 c4 10             	add    esp,0x10
c0021bec:	89 c2                	mov    edx,eax
c0021bee:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021bf2:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0021bf5:	83 ec 04             	sub    esp,0x4
c0021bf8:	8d 44 24 08          	lea    eax,[esp+0x8]
c0021bfc:	50                   	push   eax
c0021bfd:	6a 01                	push   0x1
c0021bff:	6a 04                	push   0x4
c0021c01:	e8 5f 6f fe ff       	call   c0008b65 <src_new>
c0021c06:	83 c4 10             	add    esp,0x10
c0021c09:	89 c2                	mov    edx,eax
c0021c0b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021c0f:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0021c12:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021c16:	85 c0                	test   eax,eax
c0021c18:	74 10                	je     c0021c2a <SoundChannel::SoundChannel(int, int, int, int)+0xc2>
c0021c1a:	83 ec 0c             	sub    esp,0xc
c0021c1d:	68 80 bf 02 c0       	push   0xc002bf80
c0021c22:	e8 0e 82 ff ff       	call   c0019e35 <Krnl::panic(char const*)>
c0021c27:	83 c4 10             	add    esp,0x10
c0021c2a:	a0 e0 1c 03 c0       	mov    al,ds:0xc0031ce0
c0021c2f:	83 f0 01             	xor    eax,0x1
c0021c32:	84 c0                	test   al,al
c0021c34:	74 57                	je     c0021c8d <SoundChannel::SoundChannel(int, int, int, int)+0x125>
c0021c36:	a1 9c bf 02 c0       	mov    eax,ds:0xc002bf9c
c0021c3b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0021c3f:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0021c47:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c0021c4f:	7f 35                	jg     c0021c86 <SoundChannel::SoundChannel(int, int, int, int)+0x11e>
c0021c51:	83 ec 0c             	sub    esp,0xc
c0021c54:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0021c58:	e8 e2 53 00 00       	call   c002703f <__floatsisf>
c0021c5d:	83 c4 10             	add    esp,0x10
c0021c60:	8b 15 9c bf 02 c0    	mov    edx,DWORD PTR ds:0xc002bf9c
c0021c66:	83 ec 08             	sub    esp,0x8
c0021c69:	52                   	push   edx
c0021c6a:	50                   	push   eax
c0021c6b:	e8 e1 4f 00 00       	call   c0026c51 <__mulsf3>
c0021c70:	83 c4 10             	add    esp,0x10
c0021c73:	89 c2                	mov    edx,eax
c0021c75:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021c79:	89 14 85 e0 18 03 c0 	mov    DWORD PTR [eax*4-0x3ffce720],edx
c0021c80:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0021c84:	eb c1                	jmp    c0021c47 <SoundChannel::SoundChannel(int, int, int, int)+0xdf>
c0021c86:	c6 05 e0 1c 03 c0 01 	mov    BYTE PTR ds:0xc0031ce0,0x1
c0021c8d:	90                   	nop
c0021c8e:	83 c4 1c             	add    esp,0x1c
c0021c91:	c3                   	ret    

c0021c92 <SoundChannel::~SoundChannel()>:
c0021c92:	83 ec 0c             	sub    esp,0xc
c0021c95:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021c99:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0021c9c:	83 ec 0c             	sub    esp,0xc
c0021c9f:	50                   	push   eax
c0021ca0:	e8 04 d9 fe ff       	call   c000f5a9 <free>
c0021ca5:	83 c4 10             	add    esp,0x10
c0021ca8:	90                   	nop
c0021ca9:	83 c4 0c             	add    esp,0xc
c0021cac:	c3                   	ret    
c0021cad:	90                   	nop

c0021cae <SoundChannel::getSampleRate()>:
c0021cae:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021cb2:	8b 00                	mov    eax,DWORD PTR [eax]
c0021cb4:	c3                   	ret    
c0021cb5:	90                   	nop

c0021cb6 <SoundChannel::getBits()>:
c0021cb6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021cba:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021cbd:	c3                   	ret    

c0021cbe <SoundChannel::getBufferUsed()>:
c0021cbe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021cc2:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0021cc5:	c3                   	ret    

c0021cc6 <SoundChannel::getBufferSize()>:
c0021cc6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021cca:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0021ccd:	c3                   	ret    

c0021cce <SoundChannel::unbuffer(float*, int, int)>:
c0021cce:	56                   	push   esi
c0021ccf:	53                   	push   ebx
c0021cd0:	83 ec 40             	sub    esp,0x40
c0021cd3:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c0021cd7:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0021cda:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0021cde:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0021ce1:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0021ce5:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0021ce9:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0021ced:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0021cf1:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0021cf5:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0021cf9:	e8 41 53 00 00       	call   c002703f <__floatsisf>
c0021cfe:	5a                   	pop    edx
c0021cff:	89 c6                	mov    esi,eax
c0021d01:	ff 33                	push   DWORD PTR [ebx]
c0021d03:	e8 37 53 00 00       	call   c002703f <__floatsisf>
c0021d08:	59                   	pop    ecx
c0021d09:	5a                   	pop    edx
c0021d0a:	50                   	push   eax
c0021d0b:	56                   	push   esi
c0021d0c:	e8 03 51 00 00       	call   c0026e14 <__divsf3>
c0021d11:	89 04 24             	mov    DWORD PTR [esp],eax
c0021d14:	e8 f6 65 00 00       	call   c002830f <__extendsfdf2>
c0021d19:	59                   	pop    ecx
c0021d1a:	5e                   	pop    esi
c0021d1b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0021d1f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0021d23:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0021d2b:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021d2f:	50                   	push   eax
c0021d30:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c0021d33:	e8 22 6a fe ff       	call   c000875a <src_process>
c0021d38:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0021d3c:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0021d3f:	83 c4 0c             	add    esp,0xc
c0021d42:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0021d45:	29 53 1c             	sub    DWORD PTR [ebx+0x1c],edx
c0021d48:	29 d0                	sub    eax,edx
c0021d4a:	c1 e0 02             	shl    eax,0x2
c0021d4d:	50                   	push   eax
c0021d4e:	8d 04 91             	lea    eax,[ecx+edx*4]
c0021d51:	50                   	push   eax
c0021d52:	51                   	push   ecx
c0021d53:	e8 30 e9 fd ff       	call   c0000688 <memmove>
c0021d58:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0021d5c:	83 c4 44             	add    esp,0x44
c0021d5f:	5b                   	pop    ebx
c0021d60:	5e                   	pop    esi
c0021d61:	c3                   	ret    

c0021d62 <SoundChannel::buffer16(short*, int)>:
c0021d62:	55                   	push   ebp
c0021d63:	57                   	push   edi
c0021d64:	56                   	push   esi
c0021d65:	53                   	push   ebx
c0021d66:	83 ec 1c             	sub    esp,0x1c
c0021d69:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0021d6d:	8b 73 1c             	mov    esi,DWORD PTR [ebx+0x1c]
c0021d70:	3b 73 14             	cmp    esi,DWORD PTR [ebx+0x14]
c0021d73:	0f 84 d2 00 00 00    	je     c0021e4b <SoundChannel::buffer16(short*, int)+0xe9>
c0021d79:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0021d7d:	85 ed                	test   ebp,ebp
c0021d7f:	0f 8e c6 00 00 00    	jle    c0021e4b <SoundChannel::buffer16(short*, int)+0xe9>
c0021d85:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0021d89:	bd 00 00 00 38       	mov    ebp,0x38000000
c0021d8e:	83 ec 0c             	sub    esp,0xc
c0021d91:	0f bf 00             	movsx  eax,WORD PTR [eax]
c0021d94:	50                   	push   eax
c0021d95:	e8 a5 52 00 00       	call   c002703f <__floatsisf>
c0021d9a:	59                   	pop    ecx
c0021d9b:	8d 4e 01             	lea    ecx,[esi+0x1]
c0021d9e:	5f                   	pop    edi
c0021d9f:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0021da2:	89 4b 1c             	mov    DWORD PTR [ebx+0x1c],ecx
c0021da5:	55                   	push   ebp
c0021da6:	50                   	push   eax
c0021da7:	e8 a5 4e 00 00       	call   c0026c51 <__mulsf3>
c0021dac:	83 c4 10             	add    esp,0x10
c0021daf:	89 04 b7             	mov    DWORD PTR [edi+esi*4],eax
c0021db2:	8b 73 1c             	mov    esi,DWORD PTR [ebx+0x1c]
c0021db5:	3b 73 14             	cmp    esi,DWORD PTR [ebx+0x14]
c0021db8:	0f 84 99 00 00 00    	je     c0021e57 <SoundChannel::buffer16(short*, int)+0xf5>
c0021dbe:	83 7c 24 38 01       	cmp    DWORD PTR [esp+0x38],0x1
c0021dc3:	74 78                	je     c0021e3d <SoundChannel::buffer16(short*, int)+0xdb>
c0021dc5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0021dc9:	83 ec 0c             	sub    esp,0xc
c0021dcc:	0f bf 40 02          	movsx  eax,WORD PTR [eax+0x2]
c0021dd0:	50                   	push   eax
c0021dd1:	e8 69 52 00 00       	call   c002703f <__floatsisf>
c0021dd6:	5f                   	pop    edi
c0021dd7:	8d 4e 01             	lea    ecx,[esi+0x1]
c0021dda:	5a                   	pop    edx
c0021ddb:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0021dde:	89 4b 1c             	mov    DWORD PTR [ebx+0x1c],ecx
c0021de1:	55                   	push   ebp
c0021de2:	50                   	push   eax
c0021de3:	e8 69 4e 00 00       	call   c0026c51 <__mulsf3>
c0021de8:	83 c4 10             	add    esp,0x10
c0021deb:	89 04 b7             	mov    DWORD PTR [edi+esi*4],eax
c0021dee:	be 02 00 00 00       	mov    esi,0x2
c0021df3:	8b 7b 1c             	mov    edi,DWORD PTR [ebx+0x1c]
c0021df6:	3b 7b 14             	cmp    edi,DWORD PTR [ebx+0x14]
c0021df9:	74 46                	je     c0021e41 <SoundChannel::buffer16(short*, int)+0xdf>
c0021dfb:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c0021dff:	eb 36                	jmp    c0021e37 <SoundChannel::buffer16(short*, int)+0xd5>
c0021e01:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0021e05:	83 ec 0c             	sub    esp,0xc
c0021e08:	0f bf 04 70          	movsx  eax,WORD PTR [eax+esi*2]
c0021e0c:	46                   	inc    esi
c0021e0d:	50                   	push   eax
c0021e0e:	e8 2c 52 00 00       	call   c002703f <__floatsisf>
c0021e13:	5a                   	pop    edx
c0021e14:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c0021e17:	59                   	pop    ecx
c0021e18:	8d 4f 01             	lea    ecx,[edi+0x1]
c0021e1b:	89 4b 1c             	mov    DWORD PTR [ebx+0x1c],ecx
c0021e1e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0021e22:	50                   	push   eax
c0021e23:	e8 29 4e 00 00       	call   c0026c51 <__mulsf3>
c0021e28:	83 c4 10             	add    esp,0x10
c0021e2b:	89 44 bd 00          	mov    DWORD PTR [ebp+edi*4+0x0],eax
c0021e2f:	8b 7b 1c             	mov    edi,DWORD PTR [ebx+0x1c]
c0021e32:	3b 7b 14             	cmp    edi,DWORD PTR [ebx+0x14]
c0021e35:	74 0a                	je     c0021e41 <SoundChannel::buffer16(short*, int)+0xdf>
c0021e37:	39 74 24 38          	cmp    DWORD PTR [esp+0x38],esi
c0021e3b:	75 c4                	jne    c0021e01 <SoundChannel::buffer16(short*, int)+0x9f>
c0021e3d:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0021e41:	83 c4 1c             	add    esp,0x1c
c0021e44:	89 f0                	mov    eax,esi
c0021e46:	5b                   	pop    ebx
c0021e47:	5e                   	pop    esi
c0021e48:	5f                   	pop    edi
c0021e49:	5d                   	pop    ebp
c0021e4a:	c3                   	ret    
c0021e4b:	83 c4 1c             	add    esp,0x1c
c0021e4e:	31 f6                	xor    esi,esi
c0021e50:	5b                   	pop    ebx
c0021e51:	89 f0                	mov    eax,esi
c0021e53:	5e                   	pop    esi
c0021e54:	5f                   	pop    edi
c0021e55:	5d                   	pop    ebp
c0021e56:	c3                   	ret    
c0021e57:	be 01 00 00 00       	mov    esi,0x1
c0021e5c:	eb e3                	jmp    c0021e41 <SoundChannel::buffer16(short*, int)+0xdf>

c0021e5e <SoundChannel::buffer8(unsigned char*, int)>:
c0021e5e:	55                   	push   ebp
c0021e5f:	57                   	push   edi
c0021e60:	56                   	push   esi
c0021e61:	53                   	push   ebx
c0021e62:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021e66:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c0021e6a:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0021e6d:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0021e71:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c0021e74:	74 7a                	je     c0021ef0 <SoundChannel::buffer8(unsigned char*, int)+0x92>
c0021e76:	85 ff                	test   edi,edi
c0021e78:	7e 76                	jle    c0021ef0 <SoundChannel::buffer8(unsigned char*, int)+0x92>
c0021e7a:	0f b6 5d 00          	movzx  ebx,BYTE PTR [ebp+0x0]
c0021e7e:	8d 70 01             	lea    esi,[eax+0x1]
c0021e81:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c0021e84:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c0021e87:	8b 1c 9d e0 18 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffce720]
c0021e8e:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c0021e91:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0021e94:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c0021e97:	74 5e                	je     c0021ef7 <SoundChannel::buffer8(unsigned char*, int)+0x99>
c0021e99:	83 ff 01             	cmp    edi,0x1
c0021e9c:	74 4b                	je     c0021ee9 <SoundChannel::buffer8(unsigned char*, int)+0x8b>
c0021e9e:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c0021ea2:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c0021ea5:	8d 70 01             	lea    esi,[eax+0x1]
c0021ea8:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c0021eab:	8b 1c 9d e0 18 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffce720]
c0021eb2:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c0021eb5:	b8 02 00 00 00       	mov    eax,0x2
c0021eba:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c0021ebd:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c0021ec0:	75 23                	jne    c0021ee5 <SoundChannel::buffer8(unsigned char*, int)+0x87>
c0021ec2:	eb 27                	jmp    c0021eeb <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c0021ec4:	0f b6 5c 05 00       	movzx  ebx,BYTE PTR [ebp+eax*1+0x0]
c0021ec9:	8d 71 01             	lea    esi,[ecx+0x1]
c0021ecc:	40                   	inc    eax
c0021ecd:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c0021ed0:	8b 72 10             	mov    esi,DWORD PTR [edx+0x10]
c0021ed3:	8b 1c 9d e0 18 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffce720]
c0021eda:	89 1c 8e             	mov    DWORD PTR [esi+ecx*4],ebx
c0021edd:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c0021ee0:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c0021ee3:	74 06                	je     c0021eeb <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c0021ee5:	39 c7                	cmp    edi,eax
c0021ee7:	75 db                	jne    c0021ec4 <SoundChannel::buffer8(unsigned char*, int)+0x66>
c0021ee9:	89 f8                	mov    eax,edi
c0021eeb:	5b                   	pop    ebx
c0021eec:	5e                   	pop    esi
c0021eed:	5f                   	pop    edi
c0021eee:	5d                   	pop    ebp
c0021eef:	c3                   	ret    
c0021ef0:	5b                   	pop    ebx
c0021ef1:	31 c0                	xor    eax,eax
c0021ef3:	5e                   	pop    esi
c0021ef4:	5f                   	pop    edi
c0021ef5:	5d                   	pop    ebp
c0021ef6:	c3                   	ret    
c0021ef7:	b8 01 00 00 00       	mov    eax,0x1
c0021efc:	eb ed                	jmp    c0021eeb <SoundChannel::buffer8(unsigned char*, int)+0x8d>

c0021efe <SoundDevice::SoundDevice(char const*)>:
c0021efe:	83 ec 1c             	sub    esp,0x1c
c0021f01:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021f05:	83 ec 08             	sub    esp,0x8
c0021f08:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0021f0c:	50                   	push   eax
c0021f0d:	e8 f4 1d ff ff       	call   c0013d06 <Device::Device(char const*)>
c0021f12:	83 c4 10             	add    esp,0x10
c0021f15:	ba a8 bf 02 c0       	mov    edx,0xc002bfa8
c0021f1a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021f1e:	89 10                	mov    DWORD PTR [eax],edx
c0021f20:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021f24:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c0021f2e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021f32:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0021f3c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0021f44:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c0021f49:	7f 19                	jg     c0021f64 <SoundDevice::SoundDevice(char const*)+0x66>
c0021f4b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021f4f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0021f53:	83 c2 54             	add    edx,0x54
c0021f56:	c7 44 90 0c 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0xc],0x0
c0021f5e:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0021f62:	eb e0                	jmp    c0021f44 <SoundDevice::SoundDevice(char const*)+0x46>
c0021f64:	90                   	nop
c0021f65:	83 c4 1c             	add    esp,0x1c
c0021f68:	c3                   	ret    
c0021f69:	90                   	nop

c0021f6a <SoundDevice::~SoundDevice()>:
c0021f6a:	53                   	push   ebx
c0021f6b:	83 ec 18             	sub    esp,0x18
c0021f6e:	ba a8 bf 02 c0       	mov    edx,0xc002bfa8
c0021f73:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021f77:	89 10                	mov    DWORD PTR [eax],edx
c0021f79:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0021f81:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c0021f86:	7f 46                	jg     c0021fce <SoundDevice::~SoundDevice()+0x64>
c0021f88:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021f8c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0021f90:	83 c2 54             	add    edx,0x54
c0021f93:	8b 44 90 0c          	mov    eax,DWORD PTR [eax+edx*4+0xc]
c0021f97:	85 c0                	test   eax,eax
c0021f99:	74 2d                	je     c0021fc8 <SoundDevice::~SoundDevice()+0x5e>
c0021f9b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021f9f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0021fa3:	83 c2 54             	add    edx,0x54
c0021fa6:	8b 5c 90 0c          	mov    ebx,DWORD PTR [eax+edx*4+0xc]
c0021faa:	85 db                	test   ebx,ebx
c0021fac:	74 1a                	je     c0021fc8 <SoundDevice::~SoundDevice()+0x5e>
c0021fae:	83 ec 0c             	sub    esp,0xc
c0021fb1:	53                   	push   ebx
c0021fb2:	e8 db fc ff ff       	call   c0021c92 <SoundChannel::~SoundChannel()>
c0021fb7:	83 c4 10             	add    esp,0x10
c0021fba:	83 ec 08             	sub    esp,0x8
c0021fbd:	6a 2c                	push   0x2c
c0021fbf:	53                   	push   ebx
c0021fc0:	e8 2c 06 ff ff       	call   c00125f1 <operator delete(void*, unsigned long)>
c0021fc5:	83 c4 10             	add    esp,0x10
c0021fc8:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0021fcc:	eb b3                	jmp    c0021f81 <SoundDevice::~SoundDevice()+0x17>
c0021fce:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021fd2:	83 ec 0c             	sub    esp,0xc
c0021fd5:	50                   	push   eax
c0021fd6:	e8 f5 19 ff ff       	call   c00139d0 <Device::~Device()>
c0021fdb:	83 c4 10             	add    esp,0x10
c0021fde:	90                   	nop
c0021fdf:	83 c4 18             	add    esp,0x18
c0021fe2:	5b                   	pop    ebx
c0021fe3:	c3                   	ret    

c0021fe4 <SoundDevice::~SoundDevice()>:
c0021fe4:	83 ec 0c             	sub    esp,0xc
c0021fe7:	83 ec 0c             	sub    esp,0xc
c0021fea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021fee:	e8 77 ff ff ff       	call   c0021f6a <SoundDevice::~SoundDevice()>
c0021ff3:	83 c4 10             	add    esp,0x10
c0021ff6:	83 ec 08             	sub    esp,0x8
c0021ff9:	68 e4 01 00 00       	push   0x1e4
c0021ffe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022002:	e8 ea 05 ff ff       	call   c00125f1 <operator delete(void*, unsigned long)>
c0022007:	83 c4 10             	add    esp,0x10
c002200a:	83 c4 0c             	add    esp,0xc
c002200d:	c3                   	ret    

c002200e <SoundDevice::getFreeChannelNum()>:
c002200e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0022012:	31 c0                	xor    eax,eax
c0022014:	83 bc 82 5c 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x15c],0x0
c002201c:	74 09                	je     c0022027 <SoundDevice::getFreeChannelNum()+0x19>
c002201e:	40                   	inc    eax
c002201f:	83 f8 20             	cmp    eax,0x20
c0022022:	75 f0                	jne    c0022014 <SoundDevice::getFreeChannelNum()+0x6>
c0022024:	83 c8 ff             	or     eax,0xffffffff
c0022027:	c3                   	ret    

c0022028 <SoundDevice::addChannel(SoundChannel*)>:
c0022028:	56                   	push   esi
c0022029:	53                   	push   ebx
c002202a:	51                   	push   ecx
c002202b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002202f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0022033:	53                   	push   ebx
c0022034:	e8 d5 ff ff ff       	call   c002200e <SoundDevice::getFreeChannelNum()>
c0022039:	5a                   	pop    edx
c002203a:	83 f8 ff             	cmp    eax,0xffffffff
c002203d:	74 51                	je     c0022090 <SoundDevice::addChannel(SoundChannel*)+0x68>
c002203f:	85 f6                	test   esi,esi
c0022041:	74 4d                	je     c0022090 <SoundDevice::addChannel(SoundChannel*)+0x68>
c0022043:	89 b4 83 5c 01 00 00 	mov    DWORD PTR [ebx+eax*4+0x15c],esi
c002204a:	83 bb 58 01 00 00 00 	cmp    DWORD PTR [ebx+0x158],0x0
c0022051:	75 30                	jne    c0022083 <SoundDevice::addChannel(SoundChannel*)+0x5b>
c0022053:	83 ec 0c             	sub    esp,0xc
c0022056:	56                   	push   esi
c0022057:	e8 52 fc ff ff       	call   c0021cae <SoundChannel::getSampleRate()>
c002205c:	89 83 dc 01 00 00    	mov    DWORD PTR [ebx+0x1dc],eax
c0022062:	89 34 24             	mov    DWORD PTR [esp],esi
c0022065:	e8 4c fc ff ff       	call   c0021cb6 <SoundChannel::getBits()>
c002206a:	83 c4 0c             	add    esp,0xc
c002206d:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c0022073:	8b 13                	mov    edx,DWORD PTR [ebx]
c0022075:	50                   	push   eax
c0022076:	ff b3 dc 01 00 00    	push   DWORD PTR [ebx+0x1dc]
c002207c:	53                   	push   ebx
c002207d:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0022080:	83 c4 10             	add    esp,0x10
c0022083:	ff 83 58 01 00 00    	inc    DWORD PTR [ebx+0x158]
c0022089:	b8 01 00 00 00       	mov    eax,0x1
c002208e:	eb 03                	jmp    c0022093 <SoundDevice::addChannel(SoundChannel*)+0x6b>
c0022090:	83 c8 ff             	or     eax,0xffffffff
c0022093:	5a                   	pop    edx
c0022094:	5b                   	pop    ebx
c0022095:	5e                   	pop    esi
c0022096:	c3                   	ret    
c0022097:	90                   	nop

c0022098 <SoundDevice::removeChannel(int)>:
c0022098:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002209c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00220a0:	83 fa 1f             	cmp    edx,0x1f
c00220a3:	77 23                	ja     c00220c8 <SoundDevice::removeChannel(int)+0x30>
c00220a5:	8d 14 90             	lea    edx,[eax+edx*4]
c00220a8:	83 ba 5c 01 00 00 00 	cmp    DWORD PTR [edx+0x15c],0x0
c00220af:	74 17                	je     c00220c8 <SoundDevice::removeChannel(int)+0x30>
c00220b1:	c7 82 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [edx+0x15c],0x0
c00220bb:	ff 88 58 01 00 00    	dec    DWORD PTR [eax+0x158]
c00220c1:	75 05                	jne    c00220c8 <SoundDevice::removeChannel(int)+0x30>
c00220c3:	8b 00                	mov    eax,DWORD PTR [eax]
c00220c5:	ff 60 28             	jmp    DWORD PTR [eax+0x28]
c00220c8:	c3                   	ret    
c00220c9:	90                   	nop

c00220ca <SoundDevice::floatTo16(float*, short*, int)>:
c00220ca:	57                   	push   edi
c00220cb:	56                   	push   esi
c00220cc:	53                   	push   ebx
c00220cd:	31 db                	xor    ebx,ebx
c00220cf:	83 ec 10             	sub    esp,0x10
c00220d2:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c00220d6:	3b 5c 24 2c          	cmp    ebx,DWORD PTR [esp+0x2c]
c00220da:	0f 8d d0 00 00 00    	jge    c00221b0 <SoundDevice::floatTo16(float*, short*, int)+0xe6>
c00220e0:	83 ec 0c             	sub    esp,0xc
c00220e3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00220e7:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c00220ea:	e8 20 62 00 00       	call   c002830f <__extendsfdf2>
c00220ef:	83 c4 10             	add    esp,0x10
c00220f2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00220f6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00220fa:	68 00 00 f0 3f       	push   0x3ff00000
c00220ff:	6a 00                	push   0x0
c0022101:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022105:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022109:	e8 8d 51 00 00       	call   c002729b <__adddf3>
c002210e:	83 c4 10             	add    esp,0x10
c0022111:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022115:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022119:	68 00 00 e0 3f       	push   0x3fe00000
c002211e:	6a 00                	push   0x0
c0022120:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022124:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022128:	e8 eb 57 00 00       	call   c0027918 <__muldf3>
c002212d:	83 c4 10             	add    esp,0x10
c0022130:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022134:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022138:	68 c0 ff df 40       	push   0x40dfffc0
c002213d:	6a 00                	push   0x0
c002213f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022143:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022147:	e8 cc 57 00 00       	call   c0027918 <__muldf3>
c002214c:	59                   	pop    ecx
c002214d:	5f                   	pop    edi
c002214e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0022152:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0022156:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002215a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002215e:	e8 88 60 00 00       	call   c00281eb <__truncdfsf2>
c0022163:	5a                   	pop    edx
c0022164:	89 c7                	mov    edi,eax
c0022166:	59                   	pop    ecx
c0022167:	68 00 fe ff 46       	push   0x46fffe00
c002216c:	50                   	push   eax
c002216d:	e8 23 51 00 00       	call   c0027295 <__gesf2>
c0022172:	83 c4 10             	add    esp,0x10
c0022175:	85 c0                	test   eax,eax
c0022177:	78 08                	js     c0022181 <SoundDevice::floatTo16(float*, short*, int)+0xb7>
c0022179:	66 c7 04 5e ff 7f    	mov    WORD PTR [esi+ebx*2],0x7fff
c002217f:	eb 29                	jmp    c00221aa <SoundDevice::floatTo16(float*, short*, int)+0xe0>
c0022181:	50                   	push   eax
c0022182:	50                   	push   eax
c0022183:	6a 00                	push   0x0
c0022185:	57                   	push   edi
c0022186:	e8 0e 51 00 00       	call   c0027299 <__lesf2>
c002218b:	83 c4 10             	add    esp,0x10
c002218e:	85 c0                	test   eax,eax
c0022190:	7f 08                	jg     c002219a <SoundDevice::floatTo16(float*, short*, int)+0xd0>
c0022192:	66 c7 04 5e 00 00    	mov    WORD PTR [esi+ebx*2],0x0
c0022198:	eb 10                	jmp    c00221aa <SoundDevice::floatTo16(float*, short*, int)+0xe0>
c002219a:	83 ec 0c             	sub    esp,0xc
c002219d:	57                   	push   edi
c002219e:	e8 09 62 00 00       	call   c00283ac <lrintf>
c00221a3:	83 c4 10             	add    esp,0x10
c00221a6:	66 89 04 5e          	mov    WORD PTR [esi+ebx*2],ax
c00221aa:	43                   	inc    ebx
c00221ab:	e9 26 ff ff ff       	jmp    c00220d6 <SoundDevice::floatTo16(float*, short*, int)+0xc>
c00221b0:	83 c4 10             	add    esp,0x10
c00221b3:	5b                   	pop    ebx
c00221b4:	5e                   	pop    esi
c00221b5:	5f                   	pop    edi
c00221b6:	c3                   	ret    
c00221b7:	90                   	nop

c00221b8 <SoundDevice::floatTo8(float*, unsigned char*, int)>:
c00221b8:	57                   	push   edi
c00221b9:	56                   	push   esi
c00221ba:	53                   	push   ebx
c00221bb:	31 db                	xor    ebx,ebx
c00221bd:	83 ec 10             	sub    esp,0x10
c00221c0:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c00221c4:	3b 5c 24 2c          	cmp    ebx,DWORD PTR [esp+0x2c]
c00221c8:	0f 8d cb 00 00 00    	jge    c0022299 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xe1>
c00221ce:	83 ec 0c             	sub    esp,0xc
c00221d1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00221d5:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c00221d8:	e8 32 61 00 00       	call   c002830f <__extendsfdf2>
c00221dd:	83 c4 10             	add    esp,0x10
c00221e0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00221e4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00221e8:	68 00 00 f0 3f       	push   0x3ff00000
c00221ed:	6a 00                	push   0x0
c00221ef:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00221f3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00221f7:	e8 9f 50 00 00       	call   c002729b <__adddf3>
c00221fc:	83 c4 10             	add    esp,0x10
c00221ff:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022203:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022207:	68 00 00 e0 3f       	push   0x3fe00000
c002220c:	6a 00                	push   0x0
c002220e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022212:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022216:	e8 fd 56 00 00       	call   c0027918 <__muldf3>
c002221b:	83 c4 10             	add    esp,0x10
c002221e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022222:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022226:	68 00 00 60 40       	push   0x40600000
c002222b:	6a 00                	push   0x0
c002222d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022231:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022235:	e8 de 56 00 00       	call   c0027918 <__muldf3>
c002223a:	59                   	pop    ecx
c002223b:	5f                   	pop    edi
c002223c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0022240:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0022244:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022248:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002224c:	e8 9a 5f 00 00       	call   c00281eb <__truncdfsf2>
c0022251:	5a                   	pop    edx
c0022252:	89 c7                	mov    edi,eax
c0022254:	59                   	pop    ecx
c0022255:	68 00 00 fe 42       	push   0x42fe0000
c002225a:	50                   	push   eax
c002225b:	e8 35 50 00 00       	call   c0027295 <__gesf2>
c0022260:	83 c4 10             	add    esp,0x10
c0022263:	85 c0                	test   eax,eax
c0022265:	78 06                	js     c002226d <SoundDevice::floatTo8(float*, unsigned char*, int)+0xb5>
c0022267:	c6 04 1e 7f          	mov    BYTE PTR [esi+ebx*1],0x7f
c002226b:	eb 26                	jmp    c0022293 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c002226d:	50                   	push   eax
c002226e:	50                   	push   eax
c002226f:	6a 00                	push   0x0
c0022271:	57                   	push   edi
c0022272:	e8 22 50 00 00       	call   c0027299 <__lesf2>
c0022277:	83 c4 10             	add    esp,0x10
c002227a:	85 c0                	test   eax,eax
c002227c:	7f 06                	jg     c0022284 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xcc>
c002227e:	c6 04 1e 00          	mov    BYTE PTR [esi+ebx*1],0x0
c0022282:	eb 0f                	jmp    c0022293 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c0022284:	83 ec 0c             	sub    esp,0xc
c0022287:	57                   	push   edi
c0022288:	e8 1f 61 00 00       	call   c00283ac <lrintf>
c002228d:	83 c4 10             	add    esp,0x10
c0022290:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c0022293:	43                   	inc    ebx
c0022294:	e9 2b ff ff ff       	jmp    c00221c4 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xc>
c0022299:	83 c4 10             	add    esp,0x10
c002229c:	5b                   	pop    ebx
c002229d:	5e                   	pop    esi
c002229e:	5f                   	pop    edi
c002229f:	c3                   	ret    

c00222a0 <SoundDevice::getAudio(int, float*, float*)>:
c00222a0:	55                   	push   ebp
c00222a1:	31 ed                	xor    ebp,ebp
c00222a3:	57                   	push   edi
c00222a4:	56                   	push   esi
c00222a5:	31 f6                	xor    esi,esi
c00222a7:	53                   	push   ebx
c00222a8:	83 ec 20             	sub    esp,0x20
c00222ab:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00222af:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00222b3:	c1 e0 02             	shl    eax,0x2
c00222b6:	50                   	push   eax
c00222b7:	6a 00                	push   0x0
c00222b9:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00222bd:	e8 8e e4 fd ff       	call   c0000750 <memset>
c00222c2:	83 c4 10             	add    esp,0x10
c00222c5:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00222cd:	8b 8c b3 5c 01 00 00 	mov    ecx,DWORD PTR [ebx+esi*4+0x15c]
c00222d4:	85 c9                	test   ecx,ecx
c00222d6:	74 52                	je     c002232a <SoundDevice::getAudio(int, float*, float*)+0x8a>
c00222d8:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00222dc:	99                   	cdq    
c00222dd:	f7 bb 58 01 00 00    	idiv   DWORD PTR [ebx+0x158]
c00222e3:	50                   	push   eax
c00222e4:	ff b3 dc 01 00 00    	push   DWORD PTR [ebx+0x1dc]
c00222ea:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00222ee:	51                   	push   ecx
c00222ef:	e8 da f9 ff ff       	call   c0021cce <SoundChannel::unbuffer(float*, int, int)>
c00222f4:	31 d2                	xor    edx,edx
c00222f6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00222fa:	83 c4 10             	add    esp,0x10
c00222fd:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c0022301:	7d 1e                	jge    c0022321 <SoundDevice::getAudio(int, float*, float*)+0x81>
c0022303:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0022307:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c002230b:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c002230e:	89 cf                	mov    edi,ecx
c0022310:	8b 8b 58 01 00 00    	mov    ecx,DWORD PTR [ebx+0x158]
c0022316:	0f af ca             	imul   ecx,edx
c0022319:	42                   	inc    edx
c002231a:	01 e9                	add    ecx,ebp
c002231c:	89 3c 88             	mov    DWORD PTR [eax+ecx*4],edi
c002231f:	eb dc                	jmp    c00222fd <SoundDevice::getAudio(int, float*, float*)+0x5d>
c0022321:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0022325:	45                   	inc    ebp
c0022326:	01 7c 24 0c          	add    DWORD PTR [esp+0xc],edi
c002232a:	46                   	inc    esi
c002232b:	83 fe 20             	cmp    esi,0x20
c002232e:	75 9d                	jne    c00222cd <SoundDevice::getAudio(int, float*, float*)+0x2d>
c0022330:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022334:	83 c4 1c             	add    esp,0x1c
c0022337:	5b                   	pop    ebx
c0022338:	5e                   	pop    esi
c0022339:	5f                   	pop    edi
c002233a:	5d                   	pop    ebp
c002233b:	c3                   	ret    

c002233c <PCI::open(int, int, void*)>:
c002233c:	83 ec 18             	sub    esp,0x18
c002233f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0022343:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0022347:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c002234d:	8b 10                	mov    edx,DWORD PTR [eax]
c002234f:	50                   	push   eax
c0022350:	ff 52 18             	call   DWORD PTR [edx+0x18]
c0022353:	31 c0                	xor    eax,eax
c0022355:	83 c4 1c             	add    esp,0x1c
c0022358:	c3                   	ret    
c0022359:	90                   	nop

c002235a <PCI::close(int, int, void*)>:
c002235a:	31 c0                	xor    eax,eax
c002235c:	c3                   	ret    
c002235d:	90                   	nop

c002235e <PCI::PCI()>:
c002235e:	83 ec 0c             	sub    esp,0xc
c0022361:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022365:	83 ec 08             	sub    esp,0x8
c0022368:	68 d8 bf 02 c0       	push   0xc002bfd8
c002236d:	50                   	push   eax
c002236e:	e8 f7 0f ff ff       	call   c001336a <Bus::Bus(char const*)>
c0022373:	83 c4 10             	add    esp,0x10
c0022376:	ba c4 c0 02 c0       	mov    edx,0xc002c0c4
c002237b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002237f:	89 10                	mov    DWORD PTR [eax],edx
c0022381:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022385:	c7 80 58 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x158],0x1
c002238f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022393:	a3 e4 1c 03 c0       	mov    ds:0xc0031ce4,eax
c0022398:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002239c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00223a2:	0f b6 d0             	movzx  edx,al
c00223a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00223a9:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c00223b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00223b4:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00223ba:	0f b6 d0             	movzx  edx,al
c00223bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00223c1:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c00223c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00223ca:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00223d0:	8d 50 01             	lea    edx,[eax+0x1]
c00223d3:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00223d7:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c00223dd:	0f b6 d0             	movzx  edx,al
c00223e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00223e4:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c00223e8:	83 c9 c0             	or     ecx,0xffffffc0
c00223eb:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c00223ef:	90                   	nop
c00223f0:	83 c4 0c             	add    esp,0xc
c00223f3:	c3                   	ret    

c00223f4 <PCI::readBAR8(unsigned int, int)>:
c00223f4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00223f8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00223fc:	f6 c2 01             	test   dl,0x1
c00223ff:	74 07                	je     c0022408 <PCI::readBAR8(unsigned int, int)+0x14>
c0022401:	83 e2 fc             	and    edx,0xfffffffc
c0022404:	01 c2                	add    edx,eax
c0022406:	ec                   	in     al,dx
c0022407:	c3                   	ret    
c0022408:	83 e2 f0             	and    edx,0xfffffff0
c002240b:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c002240e:	c3                   	ret    
c002240f:	90                   	nop

c0022410 <PCI::readBAR16(unsigned int, int)>:
c0022410:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0022414:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022418:	f6 c2 01             	test   dl,0x1
c002241b:	74 08                	je     c0022425 <PCI::readBAR16(unsigned int, int)+0x15>
c002241d:	83 e2 fc             	and    edx,0xfffffffc
c0022420:	01 c2                	add    edx,eax
c0022422:	66 ed                	in     ax,dx
c0022424:	c3                   	ret    
c0022425:	83 e2 f0             	and    edx,0xfffffff0
c0022428:	66 8b 04 02          	mov    ax,WORD PTR [edx+eax*1]
c002242c:	c3                   	ret    
c002242d:	90                   	nop

c002242e <PCI::readBAR32(unsigned int, int)>:
c002242e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0022432:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022436:	f6 c2 01             	test   dl,0x1
c0022439:	74 07                	je     c0022442 <PCI::readBAR32(unsigned int, int)+0x14>
c002243b:	83 e2 fc             	and    edx,0xfffffffc
c002243e:	01 c2                	add    edx,eax
c0022440:	ed                   	in     eax,dx
c0022441:	c3                   	ret    
c0022442:	83 e2 f0             	and    edx,0xfffffff0
c0022445:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c0022448:	c3                   	ret    
c0022449:	90                   	nop

c002244a <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c002244a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002244e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022452:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0022456:	f6 c2 01             	test   dl,0x1
c0022459:	74 07                	je     c0022462 <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c002245b:	83 e2 fc             	and    edx,0xfffffffc
c002245e:	01 ca                	add    edx,ecx
c0022460:	ee                   	out    dx,al
c0022461:	c3                   	ret    
c0022462:	83 e2 f0             	and    edx,0xfffffff0
c0022465:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c0022468:	c3                   	ret    
c0022469:	90                   	nop

c002246a <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c002246a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002246e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022472:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0022476:	f6 c2 01             	test   dl,0x1
c0022479:	74 08                	je     c0022483 <PCI::writeBAR16(unsigned int, unsigned short, int)+0x19>
c002247b:	83 e2 fc             	and    edx,0xfffffffc
c002247e:	01 ca                	add    edx,ecx
c0022480:	66 ef                	out    dx,ax
c0022482:	c3                   	ret    
c0022483:	83 e2 f0             	and    edx,0xfffffff0
c0022486:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c002248a:	c3                   	ret    
c002248b:	90                   	nop

c002248c <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c002248c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0022490:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022494:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0022498:	f6 c2 01             	test   dl,0x1
c002249b:	74 07                	je     c00224a4 <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c002249d:	83 e2 fc             	and    edx,0xfffffffc
c00224a0:	01 ca                	add    edx,ecx
c00224a2:	ef                   	out    dx,eax
c00224a3:	c3                   	ret    
c00224a4:	83 e2 f0             	and    edx,0xfffffff0
c00224a7:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c00224aa:	c3                   	ret    
c00224ab:	90                   	nop

c00224ac <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>:
c00224ac:	55                   	push   ebp
c00224ad:	57                   	push   edi
c00224ae:	56                   	push   esi
c00224af:	53                   	push   ebx
c00224b0:	83 ec 0c             	sub    esp,0xc
c00224b3:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c00224b7:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c00224bb:	89 f0                	mov    eax,esi
c00224bd:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c00224c1:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00224c5:	3c 07                	cmp    al,0x7
c00224c7:	76 10                	jbe    c00224d9 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x2d>
c00224c9:	83 ec 0c             	sub    esp,0xc
c00224cc:	68 e0 bf 02 c0       	push   0xc002bfe0
c00224d1:	e8 5f 79 ff ff       	call   c0019e35 <Krnl::panic(char const*)>
c00224d6:	83 c4 10             	add    esp,0x10
c00224d9:	80 fb 0f             	cmp    bl,0xf
c00224dc:	76 10                	jbe    c00224ee <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x42>
c00224de:	83 ec 0c             	sub    esp,0xc
c00224e1:	68 10 c0 02 c0       	push   0xc002c010
c00224e6:	e8 4a 79 ff ff       	call   c0019e35 <Krnl::panic(char const*)>
c00224eb:	83 c4 10             	add    esp,0x10
c00224ee:	8d 04 36             	lea    eax,[esi+esi*1]
c00224f1:	ba f8 0c 00 00       	mov    edx,0xcf8
c00224f6:	83 c8 f0             	or     eax,0xfffffff0
c00224f9:	ee                   	out    dx,al
c00224fa:	ba fa 0c 00 00       	mov    edx,0xcfa
c00224ff:	89 e8                	mov    eax,ebp
c0022501:	ee                   	out    dx,al
c0022502:	83 c4 0c             	add    esp,0xc
c0022505:	89 d8                	mov    eax,ebx
c0022507:	66 81 e7 fc 00       	and    di,0xfc
c002250c:	5b                   	pop    ebx
c002250d:	c1 e0 08             	shl    eax,0x8
c0022510:	5e                   	pop    esi
c0022511:	09 f8                	or     eax,edi
c0022513:	5f                   	pop    edi
c0022514:	66 0d 00 c0          	or     ax,0xc000
c0022518:	5d                   	pop    ebp
c0022519:	c3                   	ret    

c002251a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c002251a:	57                   	push   edi
c002251b:	56                   	push   esi
c002251c:	53                   	push   ebx
c002251d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0022521:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0022525:	8b be 58 01 00 00    	mov    edi,DWORD PTR [esi+0x158]
c002252b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c002252f:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0022533:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0022537:	83 ff 01             	cmp    edi,0x1
c002253a:	75 3e                	jne    c002257a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x60>
c002253c:	89 de                	mov    esi,ebx
c002253e:	0f b6 c0             	movzx  eax,al
c0022541:	81 e6 fc 00 00 00    	and    esi,0xfc
c0022547:	c1 e0 10             	shl    eax,0x10
c002254a:	0f b6 c9             	movzx  ecx,cl
c002254d:	09 f0                	or     eax,esi
c002254f:	c1 e1 08             	shl    ecx,0x8
c0022552:	0f b6 d2             	movzx  edx,dl
c0022555:	09 c8                	or     eax,ecx
c0022557:	c1 e2 0b             	shl    edx,0xb
c002255a:	09 d0                	or     eax,edx
c002255c:	ba f8 0c 00 00       	mov    edx,0xcf8
c0022561:	0d 00 00 00 80       	or     eax,0x80000000
c0022566:	ef                   	out    dx,eax
c0022567:	ba fc 0c 00 00       	mov    edx,0xcfc
c002256c:	ed                   	in     eax,dx
c002256d:	83 e3 02             	and    ebx,0x2
c0022570:	0f b6 cb             	movzx  ecx,bl
c0022573:	c1 e1 03             	shl    ecx,0x3
c0022576:	d3 e8                	shr    eax,cl
c0022578:	eb 43                	jmp    c00225bd <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa3>
c002257a:	83 ff 02             	cmp    edi,0x2
c002257d:	75 2c                	jne    c00225ab <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x91>
c002257f:	83 ec 0c             	sub    esp,0xc
c0022582:	0f b6 c9             	movzx  ecx,cl
c0022585:	0f b6 d2             	movzx  edx,dl
c0022588:	0f b6 fb             	movzx  edi,bl
c002258b:	0f b6 c0             	movzx  eax,al
c002258e:	57                   	push   edi
c002258f:	51                   	push   ecx
c0022590:	52                   	push   edx
c0022591:	50                   	push   eax
c0022592:	56                   	push   esi
c0022593:	e8 14 ff ff ff       	call   c00224ac <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022598:	89 c2                	mov    edx,eax
c002259a:	ed                   	in     eax,dx
c002259b:	83 e3 02             	and    ebx,0x2
c002259e:	83 c4 20             	add    esp,0x20
c00225a1:	0f b6 cb             	movzx  ecx,bl
c00225a4:	c1 e1 03             	shl    ecx,0x3
c00225a7:	d3 e8                	shr    eax,cl
c00225a9:	eb 12                	jmp    c00225bd <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa3>
c00225ab:	83 ec 0c             	sub    esp,0xc
c00225ae:	68 40 c0 02 c0       	push   0xc002c040
c00225b3:	e8 7d 78 ff ff       	call   c0019e35 <Krnl::panic(char const*)>
c00225b8:	83 c4 10             	add    esp,0x10
c00225bb:	31 c0                	xor    eax,eax
c00225bd:	5b                   	pop    ebx
c00225be:	5e                   	pop    esi
c00225bf:	5f                   	pop    edi
c00225c0:	c3                   	ret    
c00225c1:	90                   	nop

c00225c2 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c00225c2:	83 ec 18             	sub    esp,0x18
c00225c5:	6a 00                	push   0x0
c00225c7:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00225cc:	50                   	push   eax
c00225cd:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00225d2:	50                   	push   eax
c00225d3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00225d8:	50                   	push   eax
c00225d9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00225dd:	e8 38 ff ff ff       	call   c002251a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00225e2:	83 c4 2c             	add    esp,0x2c
c00225e5:	c3                   	ret    

c00225e6 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c00225e6:	83 ec 18             	sub    esp,0x18
c00225e9:	6a 0e                	push   0xe
c00225eb:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00225f0:	50                   	push   eax
c00225f1:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00225f6:	50                   	push   eax
c00225f7:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00225fc:	50                   	push   eax
c00225fd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0022601:	e8 14 ff ff ff       	call   c002251a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022606:	83 c4 2c             	add    esp,0x2c
c0022609:	0f b6 c0             	movzx  eax,al
c002260c:	c3                   	ret    
c002260d:	90                   	nop

c002260e <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c002260e:	55                   	push   ebp
c002260f:	57                   	push   edi
c0022610:	56                   	push   esi
c0022611:	53                   	push   ebx
c0022612:	83 ec 18             	sub    esp,0x18
c0022615:	0f b6 74 24 38       	movzx  esi,BYTE PTR [esp+0x38]
c002261a:	0f b6 6c 24 34       	movzx  ebp,BYTE PTR [esp+0x34]
c002261f:	0f b6 7c 24 30       	movzx  edi,BYTE PTR [esp+0x30]
c0022624:	6a 0a                	push   0xa
c0022626:	56                   	push   esi
c0022627:	55                   	push   ebp
c0022628:	57                   	push   edi
c0022629:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c002262d:	e8 e8 fe ff ff       	call   c002251a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022632:	83 c4 14             	add    esp,0x14
c0022635:	89 c3                	mov    ebx,eax
c0022637:	6a 0a                	push   0xa
c0022639:	0f b6 db             	movzx  ebx,bl
c002263c:	56                   	push   esi
c002263d:	55                   	push   ebp
c002263e:	57                   	push   edi
c002263f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0022643:	e8 d2 fe ff ff       	call   c002251a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022648:	83 c4 2c             	add    esp,0x2c
c002264b:	25 00 ff 00 00       	and    eax,0xff00
c0022650:	09 d8                	or     eax,ebx
c0022652:	5b                   	pop    ebx
c0022653:	5e                   	pop    esi
c0022654:	5f                   	pop    edi
c0022655:	5d                   	pop    ebp
c0022656:	c3                   	ret    
c0022657:	90                   	nop

c0022658 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c0022658:	83 ec 18             	sub    esp,0x18
c002265b:	6a 08                	push   0x8
c002265d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022662:	50                   	push   eax
c0022663:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022668:	50                   	push   eax
c0022669:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002266e:	50                   	push   eax
c002266f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0022673:	e8 a2 fe ff ff       	call   c002251a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022678:	83 c4 2c             	add    esp,0x2c
c002267b:	0f b6 c4             	movzx  eax,ah
c002267e:	c3                   	ret    
c002267f:	90                   	nop

c0022680 <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c0022680:	83 ec 18             	sub    esp,0x18
c0022683:	6a 08                	push   0x8
c0022685:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002268a:	50                   	push   eax
c002268b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022690:	50                   	push   eax
c0022691:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022696:	50                   	push   eax
c0022697:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c002269b:	e8 7a fe ff ff       	call   c002251a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00226a0:	83 c4 2c             	add    esp,0x2c
c00226a3:	c3                   	ret    

c00226a4 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c00226a4:	83 ec 18             	sub    esp,0x18
c00226a7:	6a 3c                	push   0x3c
c00226a9:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00226ae:	50                   	push   eax
c00226af:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00226b4:	50                   	push   eax
c00226b5:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00226ba:	50                   	push   eax
c00226bb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00226bf:	e8 56 fe ff ff       	call   c002251a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00226c4:	83 c4 2c             	add    esp,0x2c
c00226c7:	c3                   	ret    

c00226c8 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c00226c8:	83 ec 18             	sub    esp,0x18
c00226cb:	6a 18                	push   0x18
c00226cd:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00226d2:	50                   	push   eax
c00226d3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00226d8:	50                   	push   eax
c00226d9:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00226de:	50                   	push   eax
c00226df:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00226e3:	e8 32 fe ff ff       	call   c002251a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00226e8:	83 c4 2c             	add    esp,0x2c
c00226eb:	0f b6 c4             	movzx  eax,ah
c00226ee:	c3                   	ret    
c00226ef:	90                   	nop

c00226f0 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c00226f0:	55                   	push   ebp
c00226f1:	57                   	push   edi
c00226f2:	56                   	push   esi
c00226f3:	53                   	push   ebx
c00226f4:	83 ec 28             	sub    esp,0x28
c00226f7:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c00226fb:	0f b6 7c 24 48       	movzx  edi,BYTE PTR [esp+0x48]
c0022700:	0f b6 6c 24 44       	movzx  ebp,BYTE PTR [esp+0x44]
c0022705:	0f b6 4c 24 4c       	movzx  ecx,BYTE PTR [esp+0x4c]
c002270a:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c0022711:	8d 43 12             	lea    eax,[ebx+0x12]
c0022714:	83 c3 10             	add    ebx,0x10
c0022717:	0f b6 c0             	movzx  eax,al
c002271a:	0f b6 db             	movzx  ebx,bl
c002271d:	50                   	push   eax
c002271e:	51                   	push   ecx
c002271f:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c0022723:	57                   	push   edi
c0022724:	55                   	push   ebp
c0022725:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0022729:	e8 ec fd ff ff       	call   c002251a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002272e:	83 c4 14             	add    esp,0x14
c0022731:	89 c6                	mov    esi,eax
c0022733:	53                   	push   ebx
c0022734:	c1 e6 10             	shl    esi,0x10
c0022737:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c002273b:	51                   	push   ecx
c002273c:	57                   	push   edi
c002273d:	55                   	push   ebp
c002273e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0022742:	e8 d3 fd ff ff       	call   c002251a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022747:	83 c4 3c             	add    esp,0x3c
c002274a:	0f b7 c0             	movzx  eax,ax
c002274d:	5b                   	pop    ebx
c002274e:	09 f0                	or     eax,esi
c0022750:	5e                   	pop    esi
c0022751:	5f                   	pop    edi
c0022752:	5d                   	pop    ebp
c0022753:	c3                   	ret    

c0022754 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c0022754:	55                   	push   ebp
c0022755:	57                   	push   edi
c0022756:	56                   	push   esi
c0022757:	53                   	push   ebx
c0022758:	83 ec 0c             	sub    esp,0xc
c002275b:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c002275f:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0022763:	89 f5                	mov    ebp,esi
c0022765:	8b 8f 58 01 00 00    	mov    ecx,DWORD PTR [edi+0x158]
c002276b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c002276f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0022773:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0022777:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002277b:	83 f9 01             	cmp    ecx,0x1
c002277e:	75 5d                	jne    c00227dd <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x89>
c0022780:	0f b6 c8             	movzx  ecx,al
c0022783:	0f b6 d2             	movzx  edx,dl
c0022786:	c1 e1 10             	shl    ecx,0x10
c0022789:	c1 e2 0b             	shl    edx,0xb
c002278c:	89 f0                	mov    eax,esi
c002278e:	25 fc 00 00 00       	and    eax,0xfc
c0022793:	09 c1                	or     ecx,eax
c0022795:	89 e8                	mov    eax,ebp
c0022797:	0f b6 c0             	movzx  eax,al
c002279a:	c1 e0 08             	shl    eax,0x8
c002279d:	09 c1                	or     ecx,eax
c002279f:	09 d1                	or     ecx,edx
c00227a1:	ba f8 0c 00 00       	mov    edx,0xcf8
c00227a6:	81 c9 00 00 00 80    	or     ecx,0x80000000
c00227ac:	89 c8                	mov    eax,ecx
c00227ae:	ef                   	out    dx,eax
c00227af:	ba fc 0c 00 00       	mov    edx,0xcfc
c00227b4:	ed                   	in     eax,dx
c00227b5:	0f b7 db             	movzx  ebx,bx
c00227b8:	83 e6 02             	and    esi,0x2
c00227bb:	74 0a                	je     c00227c7 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x73>
c00227bd:	0f b7 d0             	movzx  edx,ax
c00227c0:	c1 e3 10             	shl    ebx,0x10
c00227c3:	09 d3                	or     ebx,edx
c00227c5:	eb 05                	jmp    c00227cc <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x78>
c00227c7:	66 31 c0             	xor    ax,ax
c00227ca:	09 c3                	or     ebx,eax
c00227cc:	ba f8 0c 00 00       	mov    edx,0xcf8
c00227d1:	89 c8                	mov    eax,ecx
c00227d3:	ef                   	out    dx,eax
c00227d4:	ba fc 0c 00 00       	mov    edx,0xcfc
c00227d9:	89 d8                	mov    eax,ebx
c00227db:	eb 41                	jmp    c002281e <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c00227dd:	83 f9 02             	cmp    ecx,0x2
c00227e0:	75 45                	jne    c0022827 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xd3>
c00227e2:	83 ec 0c             	sub    esp,0xc
c00227e5:	0f b6 d2             	movzx  edx,dl
c00227e8:	89 f1                	mov    ecx,esi
c00227ea:	0f b6 c0             	movzx  eax,al
c00227ed:	0f b6 f1             	movzx  esi,cl
c00227f0:	89 e9                	mov    ecx,ebp
c00227f2:	56                   	push   esi
c00227f3:	0f b6 c9             	movzx  ecx,cl
c00227f6:	51                   	push   ecx
c00227f7:	52                   	push   edx
c00227f8:	50                   	push   eax
c00227f9:	57                   	push   edi
c00227fa:	e8 ad fc ff ff       	call   c00224ac <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c00227ff:	89 c2                	mov    edx,eax
c0022801:	ed                   	in     eax,dx
c0022802:	83 c4 20             	add    esp,0x20
c0022805:	0f b7 db             	movzx  ebx,bx
c0022808:	f6 c2 02             	test   dl,0x2
c002280b:	74 0c                	je     c0022819 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc5>
c002280d:	0f b7 c8             	movzx  ecx,ax
c0022810:	89 d8                	mov    eax,ebx
c0022812:	c1 e0 10             	shl    eax,0x10
c0022815:	09 c8                	or     eax,ecx
c0022817:	eb 05                	jmp    c002281e <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c0022819:	66 31 c0             	xor    ax,ax
c002281c:	09 d8                	or     eax,ebx
c002281e:	ef                   	out    dx,eax
c002281f:	83 c4 0c             	add    esp,0xc
c0022822:	5b                   	pop    ebx
c0022823:	5e                   	pop    esi
c0022824:	5f                   	pop    edi
c0022825:	5d                   	pop    ebp
c0022826:	c3                   	ret    
c0022827:	c7 44 24 20 40 c0 02 c0 	mov    DWORD PTR [esp+0x20],0xc002c040
c002282f:	83 c4 0c             	add    esp,0xc
c0022832:	5b                   	pop    ebx
c0022833:	5e                   	pop    esi
c0022834:	5f                   	pop    edi
c0022835:	5d                   	pop    ebp
c0022836:	e9 fa 75 ff ff       	jmp    c0019e35 <Krnl::panic(char const*)>
c002283b:	90                   	nop

c002283c <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>:
c002283c:	55                   	push   ebp
c002283d:	57                   	push   edi
c002283e:	56                   	push   esi
c002283f:	53                   	push   ebx
c0022840:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0022846:	80 3d f0 1c 03 c0 00 	cmp    BYTE PTR ds:0xc0031cf0,0x0
c002284d:	0f 85 84 00 00 00    	jne    c00228d7 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x9b>
c0022853:	83 ec 0c             	sub    esp,0xc
c0022856:	68 14 01 00 00       	push   0x114
c002285b:	e8 39 cd fe ff       	call   c000f599 <malloc>
c0022860:	83 c4 0c             	add    esp,0xc
c0022863:	89 c3                	mov    ebx,eax
c0022865:	ff 35 f0 0e 03 c0    	push   DWORD PTR ds:0xc0030ef0
c002286b:	68 46 c0 02 c0       	push   0xc002c046
c0022870:	50                   	push   eax
c0022871:	e8 b2 03 ff ff       	call   c0012c28 <File::File(char const*, Process*)>
c0022876:	5a                   	pop    edx
c0022877:	59                   	pop    ecx
c0022878:	6a 01                	push   0x1
c002287a:	53                   	push   ebx
c002287b:	e8 0c 04 ff ff       	call   c0012c8c <File::open(FileOpenMode)>
c0022880:	83 c4 0c             	add    esp,0xc
c0022883:	8d 44 24 1f          	lea    eax,[esp+0x1f]
c0022887:	50                   	push   eax
c0022888:	8d 44 24 28          	lea    eax,[esp+0x28]
c002288c:	50                   	push   eax
c002288d:	53                   	push   ebx
c002288e:	e8 a5 06 ff ff       	call   c0012f38 <File::stat(unsigned long long*, bool*)>
c0022893:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0022897:	40                   	inc    eax
c0022898:	89 04 24             	mov    DWORD PTR [esp],eax
c002289b:	e8 f9 cc fe ff       	call   c000f599 <malloc>
c00228a0:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00228a4:	a3 ec 1c 03 c0       	mov    ds:0xc0031cec,eax
c00228a9:	c6 04 10 00          	mov    BYTE PTR [eax+edx*1],0x0
c00228ad:	5e                   	pop    esi
c00228ae:	8b 13                	mov    edx,DWORD PTR [ebx]
c00228b0:	8d 4c 24 28          	lea    ecx,[esp+0x28]
c00228b4:	51                   	push   ecx
c00228b5:	50                   	push   eax
c00228b6:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00228ba:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00228be:	53                   	push   ebx
c00228bf:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00228c2:	83 c4 14             	add    esp,0x14
c00228c5:	53                   	push   ebx
c00228c6:	e8 1f 04 ff ff       	call   c0012cea <File::close()>
c00228cb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00228cf:	83 c4 10             	add    esp,0x10
c00228d2:	a3 e8 1c 03 c0       	mov    ds:0xc0031ce8,eax
c00228d7:	a1 e8 1c 03 c0       	mov    eax,ds:0xc0031ce8
c00228dc:	8b 15 ec 1c 03 c0    	mov    edx,DWORD PTR ds:0xc0031cec
c00228e2:	89 04 24             	mov    DWORD PTR [esp],eax
c00228e5:	31 ff                	xor    edi,edi
c00228e7:	66 8b 84 24 42 01 00 00 	mov    ax,WORD PTR [esp+0x142]
c00228ef:	31 f6                	xor    esi,esi
c00228f1:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c00228f6:	31 db                	xor    ebx,ebx
c00228f8:	66 8b 84 24 62 01 00 00 	mov    ax,WORD PTR [esp+0x162]
c0022900:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0022905:	8a 84 24 40 01 00 00 	mov    al,BYTE PTR [esp+0x140]
c002290c:	88 44 24 0a          	mov    BYTE PTR [esp+0xa],al
c0022910:	8a 84 24 41 01 00 00 	mov    al,BYTE PTR [esp+0x141]
c0022917:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c002291b:	39 3c 24             	cmp    DWORD PTR [esp],edi
c002291e:	0f 8e 6b 01 00 00    	jle    c0022a8f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x253>
c0022924:	8a 04 3a             	mov    al,BYTE PTR [edx+edi*1]
c0022927:	d4 40                	aam    0x40
c0022929:	d5 39                	aad    0x39
c002292b:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c002292f:	8a 44 3a 01          	mov    al,BYTE PTR [edx+edi*1+0x1]
c0022933:	d4 40                	aam    0x40
c0022935:	d5 39                	aad    0x39
c0022937:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c002293b:	8a 44 3a 03          	mov    al,BYTE PTR [edx+edi*1+0x3]
c002293f:	d4 40                	aam    0x40
c0022941:	d5 39                	aad    0x39
c0022943:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c0022947:	8a 44 3a 04          	mov    al,BYTE PTR [edx+edi*1+0x4]
c002294b:	d4 40                	aam    0x40
c002294d:	d5 39                	aad    0x39
c002294f:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0022953:	8a 44 3a 06          	mov    al,BYTE PTR [edx+edi*1+0x6]
c0022957:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c002295b:	3c 56                	cmp    al,0x56
c002295d:	74 45                	je     c00229a4 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x168>
c002295f:	d4 40                	aam    0x40
c0022961:	d5 39                	aad    0x39
c0022963:	8d 48 d0             	lea    ecx,[eax-0x30]
c0022966:	8a 44 3a 07          	mov    al,BYTE PTR [edx+edi*1+0x7]
c002296a:	0f b6 c9             	movzx  ecx,cl
c002296d:	c1 e1 04             	shl    ecx,0x4
c0022970:	d4 40                	aam    0x40
c0022972:	d5 39                	aad    0x39
c0022974:	8d 58 d0             	lea    ebx,[eax-0x30]
c0022977:	8a 44 3a 08          	mov    al,BYTE PTR [edx+edi*1+0x8]
c002297b:	0f b6 db             	movzx  ebx,bl
c002297e:	09 cb                	or     ebx,ecx
c0022980:	c1 e3 04             	shl    ebx,0x4
c0022983:	d4 40                	aam    0x40
c0022985:	d5 39                	aad    0x39
c0022987:	8d 48 d0             	lea    ecx,[eax-0x30]
c002298a:	8a 44 3a 09          	mov    al,BYTE PTR [edx+edi*1+0x9]
c002298e:	0f b6 c9             	movzx  ecx,cl
c0022991:	09 cb                	or     ebx,ecx
c0022993:	c1 e3 04             	shl    ebx,0x4
c0022996:	89 d9                	mov    ecx,ebx
c0022998:	d4 40                	aam    0x40
c002299a:	d5 39                	aad    0x39
c002299c:	8d 58 d0             	lea    ebx,[eax-0x30]
c002299f:	0f b6 db             	movzx  ebx,bl
c00229a2:	09 cb                	or     ebx,ecx
c00229a4:	8a 4c 3a 0b          	mov    cl,BYTE PTR [edx+edi*1+0xb]
c00229a8:	80 f9 44             	cmp    cl,0x44
c00229ab:	74 47                	je     c00229f4 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1b8>
c00229ad:	88 c8                	mov    al,cl
c00229af:	d4 40                	aam    0x40
c00229b1:	d5 39                	aad    0x39
c00229b3:	83 e8 30             	sub    eax,0x30
c00229b6:	0f b6 e8             	movzx  ebp,al
c00229b9:	8a 44 3a 0c          	mov    al,BYTE PTR [edx+edi*1+0xc]
c00229bd:	c1 e5 04             	shl    ebp,0x4
c00229c0:	d4 40                	aam    0x40
c00229c2:	d5 39                	aad    0x39
c00229c4:	83 e8 30             	sub    eax,0x30
c00229c7:	0f b6 f0             	movzx  esi,al
c00229ca:	8a 44 3a 0d          	mov    al,BYTE PTR [edx+edi*1+0xd]
c00229ce:	09 ee                	or     esi,ebp
c00229d0:	c1 e6 04             	shl    esi,0x4
c00229d3:	d4 40                	aam    0x40
c00229d5:	d5 39                	aad    0x39
c00229d7:	83 e8 30             	sub    eax,0x30
c00229da:	0f b6 e8             	movzx  ebp,al
c00229dd:	8a 44 3a 0e          	mov    al,BYTE PTR [edx+edi*1+0xe]
c00229e1:	09 ee                	or     esi,ebp
c00229e3:	c1 e6 04             	shl    esi,0x4
c00229e6:	89 f5                	mov    ebp,esi
c00229e8:	d4 40                	aam    0x40
c00229ea:	d5 39                	aad    0x39
c00229ec:	83 e8 30             	sub    eax,0x30
c00229ef:	0f b6 f0             	movzx  esi,al
c00229f2:	09 ee                	or     esi,ebp
c00229f4:	83 c7 10             	add    edi,0x10
c00229f7:	8d 6c 24 20          	lea    ebp,[esp+0x20]
c00229fb:	8a 04 3a             	mov    al,BYTE PTR [edx+edi*1]
c00229fe:	3c 0a                	cmp    al,0xa
c0022a00:	74 09                	je     c0022a0b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1cf>
c0022a02:	45                   	inc    ebp
c0022a03:	39 3c 24             	cmp    DWORD PTR [esp],edi
c0022a06:	75 16                	jne    c0022a1e <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1e2>
c0022a08:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0022a0b:	3c 0a                	cmp    al,0xa
c0022a0d:	0f 94 c0             	sete   al
c0022a10:	0f b6 c0             	movzx  eax,al
c0022a13:	01 c7                	add    edi,eax
c0022a15:	80 7c 24 05 56       	cmp    BYTE PTR [esp+0x5],0x56
c0022a1a:	75 0c                	jne    c0022a28 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1ec>
c0022a1c:	eb 15                	jmp    c0022a33 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1f7>
c0022a1e:	47                   	inc    edi
c0022a1f:	88 45 ff             	mov    BYTE PTR [ebp-0x1],al
c0022a22:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c0022a26:	eb d3                	jmp    c00229fb <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1bf>
c0022a28:	66 39 5c 24 06       	cmp    WORD PTR [esp+0x6],bx
c0022a2d:	0f 85 e8 fe ff ff    	jne    c002291b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c0022a33:	80 f9 44             	cmp    cl,0x44
c0022a36:	74 0b                	je     c0022a43 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x207>
c0022a38:	66 39 74 24 08       	cmp    WORD PTR [esp+0x8],si
c0022a3d:	0f 85 d8 fe ff ff    	jne    c002291b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c0022a43:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c0022a47:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0022a4b:	c1 e1 04             	shl    ecx,0x4
c0022a4e:	83 e8 30             	sub    eax,0x30
c0022a51:	09 c8                	or     eax,ecx
c0022a53:	38 44 24 0a          	cmp    BYTE PTR [esp+0xa],al
c0022a57:	0f 85 be fe ff ff    	jne    c002291b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c0022a5d:	8a 4c 24 0e          	mov    cl,BYTE PTR [esp+0xe]
c0022a61:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0022a65:	c1 e1 04             	shl    ecx,0x4
c0022a68:	83 e8 30             	sub    eax,0x30
c0022a6b:	09 c8                	or     eax,ecx
c0022a6d:	38 44 24 0b          	cmp    BYTE PTR [esp+0xb],al
c0022a71:	0f 85 a4 fe ff ff    	jne    c002291b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c0022a77:	50                   	push   eax
c0022a78:	50                   	push   eax
c0022a79:	8d 44 24 28          	lea    eax,[esp+0x28]
c0022a7d:	50                   	push   eax
c0022a7e:	ff b4 24 70 01 00 00 	push   DWORD PTR [esp+0x170]
c0022a85:	e8 82 dd fd ff       	call   c000080c <strcpy>
c0022a8a:	83 c4 10             	add    esp,0x10
c0022a8d:	eb 15                	jmp    c0022aa4 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x268>
c0022a8f:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c0022a96:	c7 84 24 64 01 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x164],0x0
c0022aa1:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0022aa4:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c0022aab:	81 c4 2c 01 00 00    	add    esp,0x12c
c0022ab1:	5b                   	pop    ebx
c0022ab2:	5e                   	pop    esi
c0022ab3:	5f                   	pop    edi
c0022ab4:	5d                   	pop    ebp
c0022ab5:	c3                   	ret    

c0022ab6 <PCI::checkBus(unsigned char)>:
c0022ab6:	56                   	push   esi
c0022ab7:	53                   	push   ebx
c0022ab8:	31 db                	xor    ebx,ebx
c0022aba:	51                   	push   ecx
c0022abb:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c0022ac0:	52                   	push   edx
c0022ac1:	53                   	push   ebx
c0022ac2:	43                   	inc    ebx
c0022ac3:	56                   	push   esi
c0022ac4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022ac8:	e8 37 03 00 00       	call   c0022e04 <PCI::checkDevice(unsigned char, unsigned char)>
c0022acd:	83 c4 10             	add    esp,0x10
c0022ad0:	83 fb 20             	cmp    ebx,0x20
c0022ad3:	75 eb                	jne    c0022ac0 <PCI::checkBus(unsigned char)+0xa>
c0022ad5:	58                   	pop    eax
c0022ad6:	5b                   	pop    ebx
c0022ad7:	5e                   	pop    esi
c0022ad8:	c3                   	ret    
c0022ad9:	90                   	nop

c0022ada <PCI::foundDevice(PCIDeviceInfo)>:
c0022ada:	55                   	push   ebp
c0022adb:	57                   	push   edi
c0022adc:	56                   	push   esi
c0022add:	53                   	push   ebx
c0022ade:	83 ec 1c             	sub    esp,0x1c
c0022ae1:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0022ae5:	66 83 7c 24 36 ff    	cmp    WORD PTR [esp+0x36],0xffff
c0022aeb:	0f 84 52 01 00 00    	je     c0022c43 <PCI::foundDevice(PCIDeviceInfo)+0x169>
c0022af1:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0022af5:	66 81 f9 06 04       	cmp    cx,0x406
c0022afa:	75 2c                	jne    c0022b28 <PCI::foundDevice(PCIDeviceInfo)+0x4e>
c0022afc:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c0022b01:	50                   	push   eax
c0022b02:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c0022b07:	50                   	push   eax
c0022b08:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c0022b0d:	50                   	push   eax
c0022b0e:	56                   	push   esi
c0022b0f:	e8 b4 fb ff ff       	call   c00226c8 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c0022b14:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c0022b18:	0f b6 c0             	movzx  eax,al
c0022b1b:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0022b1f:	83 c4 2c             	add    esp,0x2c
c0022b22:	5b                   	pop    ebx
c0022b23:	5e                   	pop    esi
c0022b24:	5f                   	pop    edi
c0022b25:	5d                   	pop    ebp
c0022b26:	eb 8e                	jmp    c0022ab6 <PCI::checkBus(unsigned char)>
c0022b28:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0022b2c:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0022b32:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022b36:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0022b3a:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c0022b3e:	88 d3                	mov    bl,dl
c0022b40:	85 c0                	test   eax,eax
c0022b42:	74 33                	je     c0022b77 <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c0022b44:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0022b47:	85 d2                	test   edx,edx
c0022b49:	74 28                	je     c0022b73 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0022b4b:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c0022b51:	31 ef                	xor    edi,ebp
c0022b53:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c0022b59:	75 18                	jne    c0022b73 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0022b5b:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0022b5f:	39 ba 20 01 00 00    	cmp    DWORD PTR [edx+0x120],edi
c0022b65:	75 0c                	jne    c0022b73 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0022b67:	38 9a 38 01 00 00    	cmp    BYTE PTR [edx+0x138],bl
c0022b6d:	0f 84 d0 00 00 00    	je     c0022c43 <PCI::foundDevice(PCIDeviceInfo)+0x169>
c0022b73:	8b 00                	mov    eax,DWORD PTR [eax]
c0022b75:	eb c9                	jmp    c0022b40 <PCI::foundDevice(PCIDeviceInfo)+0x66>
c0022b77:	66 81 f9 01 06       	cmp    cx,0x601
c0022b7c:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c0022b80:	75 19                	jne    c0022b9b <PCI::foundDevice(PCIDeviceInfo)+0xc1>
c0022b82:	83 ec 0c             	sub    esp,0xc
c0022b85:	68 64 01 00 00       	push   0x164
c0022b8a:	e8 0a ca fe ff       	call   c000f599 <malloc>
c0022b8f:	89 c5                	mov    ebp,eax
c0022b91:	89 04 24             	mov    DWORD PTR [esp],eax
c0022b94:	e8 85 0e 00 00       	call   c0023a1e <SATABus::SATABus()>
c0022b99:	eb 1e                	jmp    c0022bb9 <PCI::foundDevice(PCIDeviceInfo)+0xdf>
c0022b9b:	66 81 f9 01 01       	cmp    cx,0x101
c0022ba0:	75 60                	jne    c0022c02 <PCI::foundDevice(PCIDeviceInfo)+0x128>
c0022ba2:	83 ec 0c             	sub    esp,0xc
c0022ba5:	68 70 02 00 00       	push   0x270
c0022baa:	e8 ea c9 fe ff       	call   c000f599 <malloc>
c0022baf:	89 c5                	mov    ebp,eax
c0022bb1:	89 04 24             	mov    DWORD PTR [esp],eax
c0022bb4:	e8 0f 03 00 00       	call   c0022ec8 <IDE::IDE()>
c0022bb9:	58                   	pop    eax
c0022bba:	5a                   	pop    edx
c0022bbb:	55                   	push   ebp
c0022bbc:	56                   	push   esi
c0022bbd:	e8 40 0f ff ff       	call   c0013b02 <Device::addChild(Device*)>
c0022bc2:	83 ec 1c             	sub    esp,0x1c
c0022bc5:	b9 09 00 00 00       	mov    ecx,0x9
c0022bca:	fc                   	cld    
c0022bcb:	89 e7                	mov    edi,esp
c0022bcd:	89 de                	mov    esi,ebx
c0022bcf:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0022bd1:	55                   	push   ebp
c0022bd2:	e8 3d 0e ff ff       	call   c0013a14 <Device::preOpenPCI(PCIDeviceInfo)>
c0022bd7:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0022bda:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c0022bde:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c0022be6:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c0022bee:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c0022bf6:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022bf9:	83 c4 4c             	add    esp,0x4c
c0022bfc:	5b                   	pop    ebx
c0022bfd:	5e                   	pop    esi
c0022bfe:	5f                   	pop    edi
c0022bff:	5d                   	pop    ebp
c0022c00:	ff e0                	jmp    eax
c0022c02:	83 ec 0c             	sub    esp,0xc
c0022c05:	68 58 01 00 00       	push   0x158
c0022c0a:	e8 8a c9 fe ff       	call   c000f599 <malloc>
c0022c0f:	89 c5                	mov    ebp,eax
c0022c11:	58                   	pop    eax
c0022c12:	5a                   	pop    edx
c0022c13:	68 5f c0 02 c0       	push   0xc002c05f
c0022c18:	55                   	push   ebp
c0022c19:	e8 ee 11 ff ff       	call   c0013e0c <DriverlessDevice::DriverlessDevice(char const*)>
c0022c1e:	59                   	pop    ecx
c0022c1f:	5f                   	pop    edi
c0022c20:	55                   	push   ebp
c0022c21:	56                   	push   esi
c0022c22:	e8 db 0e ff ff       	call   c0013b02 <Device::addChild(Device*)>
c0022c27:	b9 09 00 00 00       	mov    ecx,0x9
c0022c2c:	fc                   	cld    
c0022c2d:	89 df                	mov    edi,ebx
c0022c2f:	89 de                	mov    esi,ebx
c0022c31:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0022c33:	89 6c 24 40          	mov    DWORD PTR [esp+0x40],ebp
c0022c37:	83 c4 2c             	add    esp,0x2c
c0022c3a:	5b                   	pop    ebx
c0022c3b:	5e                   	pop    esi
c0022c3c:	5f                   	pop    edi
c0022c3d:	5d                   	pop    ebp
c0022c3e:	e9 d1 0d ff ff       	jmp    c0013a14 <Device::preOpenPCI(PCIDeviceInfo)>
c0022c43:	83 c4 1c             	add    esp,0x1c
c0022c46:	5b                   	pop    ebx
c0022c47:	5e                   	pop    esi
c0022c48:	5f                   	pop    edi
c0022c49:	5d                   	pop    ebp
c0022c4a:	c3                   	ret    
c0022c4b:	90                   	nop

c0022c4c <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c0022c4c:	55                   	push   ebp
c0022c4d:	57                   	push   edi
c0022c4e:	56                   	push   esi
c0022c4f:	53                   	push   ebx
c0022c50:	83 ec 68             	sub    esp,0x68
c0022c53:	8b 6c 24 7c          	mov    ebp,DWORD PTR [esp+0x7c]
c0022c57:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0022c5e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0022c62:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0022c69:	0f b6 74 24 18       	movzx  esi,BYTE PTR [esp+0x18]
c0022c6e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0022c72:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0022c79:	0f b6 5c 24 1c       	movzx  ebx,BYTE PTR [esp+0x1c]
c0022c7e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0022c82:	0f b6 7c 24 20       	movzx  edi,BYTE PTR [esp+0x20]
c0022c87:	6a 0c                	push   0xc
c0022c89:	57                   	push   edi
c0022c8a:	53                   	push   ebx
c0022c8b:	56                   	push   esi
c0022c8c:	55                   	push   ebp
c0022c8d:	e8 88 f8 ff ff       	call   c002251a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022c92:	83 c4 20             	add    esp,0x20
c0022c95:	57                   	push   edi
c0022c96:	53                   	push   ebx
c0022c97:	56                   	push   esi
c0022c98:	55                   	push   ebp
c0022c99:	e8 70 f9 ff ff       	call   c002260e <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c0022c9e:	66 89 44 24 2a       	mov    WORD PTR [esp+0x2a],ax
c0022ca3:	57                   	push   edi
c0022ca4:	53                   	push   ebx
c0022ca5:	56                   	push   esi
c0022ca6:	55                   	push   ebp
c0022ca7:	e8 f8 f9 ff ff       	call   c00226a4 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c0022cac:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c0022cb0:	83 c4 14             	add    esp,0x14
c0022cb3:	6a 3c                	push   0x3c
c0022cb5:	57                   	push   edi
c0022cb6:	53                   	push   ebx
c0022cb7:	56                   	push   esi
c0022cb8:	55                   	push   ebp
c0022cb9:	e8 5c f8 ff ff       	call   c002251a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022cbe:	0f b6 c4             	movzx  eax,ah
c0022cc1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0022cc5:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c0022cc9:	88 44 24 6d          	mov    BYTE PTR [esp+0x6d],al
c0022ccd:	a1 a8 d9 02 c0       	mov    eax,ds:0xc002d9a8
c0022cd2:	83 c4 20             	add    esp,0x20
c0022cd5:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c0022cdb:	83 b8 5c 11 00 00 00 	cmp    DWORD PTR [eax+0x115c],0x0
c0022ce2:	74 7c                	je     c0022d60 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x114>
c0022ce4:	31 c0                	xor    eax,eax
c0022ce6:	8b 15 a8 d9 02 c0    	mov    edx,DWORD PTR ds:0xc002d9a8
c0022cec:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c0022cf2:	39 82 5c 11 00 00    	cmp    DWORD PTR [edx+0x115c],eax
c0022cf8:	7e 66                	jle    c0022d60 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x114>
c0022cfa:	8d 14 c2             	lea    edx,[edx+eax*8]
c0022cfd:	0f b7 8a 5c 01 00 00 	movzx  ecx,WORD PTR [edx+0x15c]
c0022d04:	39 cb                	cmp    ebx,ecx
c0022d06:	75 55                	jne    c0022d5d <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x111>
c0022d08:	0f b6 92 5e 01 00 00 	movzx  edx,BYTE PTR [edx+0x15e]
c0022d0f:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c0022d13:	75 48                	jne    c0022d5d <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x111>
c0022d15:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0022d19:	83 ec 0c             	sub    esp,0xc
c0022d1c:	68 79 c0 02 c0       	push   0xc002c079
c0022d21:	e8 a3 f9 fe ff       	call   c00126c9 <Dbg::kprintf(char const*, ...)>
c0022d26:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0022d2a:	8b 15 a8 d9 02 c0    	mov    edx,DWORD PTR ds:0xc002d9a8
c0022d30:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0022d34:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c0022d3a:	0f b6 94 c2 5f 01 00 00 	movzx  edx,BYTE PTR [edx+eax*8+0x15f]
c0022d42:	88 54 24 14          	mov    BYTE PTR [esp+0x14],dl
c0022d46:	52                   	push   edx
c0022d47:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022d4b:	53                   	push   ebx
c0022d4c:	68 9e c0 02 c0       	push   0xc002c09e
c0022d51:	e8 73 f9 fe ff       	call   c00126c9 <Dbg::kprintf(char const*, ...)>
c0022d56:	83 c4 20             	add    esp,0x20
c0022d59:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0022d5d:	40                   	inc    eax
c0022d5e:	eb 86                	jmp    c0022ce6 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x9a>
c0022d60:	31 d2                	xor    edx,edx
c0022d62:	83 ec 0c             	sub    esp,0xc
c0022d65:	57                   	push   edi
c0022d66:	53                   	push   ebx
c0022d67:	56                   	push   esi
c0022d68:	52                   	push   edx
c0022d69:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0022d6d:	55                   	push   ebp
c0022d6e:	e8 7d f9 ff ff       	call   c00226f0 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022d73:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0022d77:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c0022d7b:	42                   	inc    edx
c0022d7c:	83 c4 20             	add    esp,0x20
c0022d7f:	83 fa 06             	cmp    edx,0x6
c0022d82:	75 de                	jne    c0022d62 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x116>
c0022d84:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c0022d89:	83 ec 0c             	sub    esp,0xc
c0022d8c:	86 e0                	xchg   al,ah
c0022d8e:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c0022d93:	6a 02                	push   0x2
c0022d95:	57                   	push   edi
c0022d96:	53                   	push   ebx
c0022d97:	56                   	push   esi
c0022d98:	55                   	push   ebp
c0022d99:	e8 7c f7 ff ff       	call   c002251a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022d9e:	66 89 44 24 6e       	mov    WORD PTR [esp+0x6e],ax
c0022da3:	83 c4 20             	add    esp,0x20
c0022da6:	57                   	push   edi
c0022da7:	53                   	push   ebx
c0022da8:	56                   	push   esi
c0022da9:	55                   	push   ebp
c0022daa:	e8 a9 f8 ff ff       	call   c0022658 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c0022daf:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0022db3:	57                   	push   edi
c0022db4:	53                   	push   ebx
c0022db5:	56                   	push   esi
c0022db6:	55                   	push   ebp
c0022db7:	e8 06 f8 ff ff       	call   c00225c2 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0022dbc:	b9 09 00 00 00       	mov    ecx,0x9
c0022dc1:	66 89 44 24 4e       	mov    WORD PTR [esp+0x4e],ax
c0022dc6:	8a 44 24 24          	mov    al,BYTE PTR [esp+0x24]
c0022dca:	88 44 24 6c          	mov    BYTE PTR [esp+0x6c],al
c0022dce:	8a 44 24 2c          	mov    al,BYTE PTR [esp+0x2c]
c0022dd2:	88 44 24 50          	mov    BYTE PTR [esp+0x50],al
c0022dd6:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c0022dda:	88 44 24 51          	mov    BYTE PTR [esp+0x51],al
c0022dde:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c0022de2:	88 44 24 52          	mov    BYTE PTR [esp+0x52],al
c0022de6:	83 ec 0c             	sub    esp,0xc
c0022de9:	fc                   	cld    
c0022dea:	89 e7                	mov    edi,esp
c0022dec:	8d 74 24 58          	lea    esi,[esp+0x58]
c0022df0:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0022df2:	55                   	push   ebp
c0022df3:	e8 e2 fc ff ff       	call   c0022ada <PCI::foundDevice(PCIDeviceInfo)>
c0022df8:	81 c4 8c 00 00 00    	add    esp,0x8c
c0022dfe:	5b                   	pop    ebx
c0022dff:	5e                   	pop    esi
c0022e00:	5f                   	pop    edi
c0022e01:	5d                   	pop    ebp
c0022e02:	c3                   	ret    
c0022e03:	90                   	nop

c0022e04 <PCI::checkDevice(unsigned char, unsigned char)>:
c0022e04:	55                   	push   ebp
c0022e05:	57                   	push   edi
c0022e06:	56                   	push   esi
c0022e07:	53                   	push   ebx
c0022e08:	83 ec 0c             	sub    esp,0xc
c0022e0b:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0022e0f:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c0022e14:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c0022e19:	6a 00                	push   0x0
c0022e1b:	56                   	push   esi
c0022e1c:	57                   	push   edi
c0022e1d:	55                   	push   ebp
c0022e1e:	e8 9f f7 ff ff       	call   c00225c2 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0022e23:	6a 00                	push   0x0
c0022e25:	56                   	push   esi
c0022e26:	57                   	push   edi
c0022e27:	55                   	push   ebp
c0022e28:	e8 1f fe ff ff       	call   c0022c4c <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0022e2d:	83 c4 20             	add    esp,0x20
c0022e30:	6a 00                	push   0x0
c0022e32:	56                   	push   esi
c0022e33:	57                   	push   edi
c0022e34:	55                   	push   ebp
c0022e35:	e8 ac f7 ff ff       	call   c00225e6 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0022e3a:	83 c4 10             	add    esp,0x10
c0022e3d:	84 c0                	test   al,al
c0022e3f:	79 27                	jns    c0022e68 <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c0022e41:	bb 01 00 00 00       	mov    ebx,0x1
c0022e46:	53                   	push   ebx
c0022e47:	56                   	push   esi
c0022e48:	57                   	push   edi
c0022e49:	55                   	push   ebp
c0022e4a:	e8 73 f7 ff ff       	call   c00225c2 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0022e4f:	83 c4 10             	add    esp,0x10
c0022e52:	66 40                	inc    ax
c0022e54:	74 0c                	je     c0022e62 <PCI::checkDevice(unsigned char, unsigned char)+0x5e>
c0022e56:	53                   	push   ebx
c0022e57:	56                   	push   esi
c0022e58:	57                   	push   edi
c0022e59:	55                   	push   ebp
c0022e5a:	e8 ed fd ff ff       	call   c0022c4c <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0022e5f:	83 c4 10             	add    esp,0x10
c0022e62:	43                   	inc    ebx
c0022e63:	83 fb 08             	cmp    ebx,0x8
c0022e66:	75 de                	jne    c0022e46 <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c0022e68:	83 c4 0c             	add    esp,0xc
c0022e6b:	5b                   	pop    ebx
c0022e6c:	5e                   	pop    esi
c0022e6d:	5f                   	pop    edi
c0022e6e:	5d                   	pop    ebp
c0022e6f:	c3                   	ret    

c0022e70 <PCI::detect()>:
c0022e70:	56                   	push   esi
c0022e71:	53                   	push   ebx
c0022e72:	53                   	push   ebx
c0022e73:	31 db                	xor    ebx,ebx
c0022e75:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0022e79:	6a 00                	push   0x0
c0022e7b:	6a 00                	push   0x0
c0022e7d:	6a 00                	push   0x0
c0022e7f:	56                   	push   esi
c0022e80:	e8 61 f7 ff ff       	call   c00225e6 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0022e85:	83 c4 10             	add    esp,0x10
c0022e88:	a8 80                	test   al,0x80
c0022e8a:	75 21                	jne    c0022ead <PCI::detect()+0x3d>
c0022e8c:	51                   	push   ecx
c0022e8d:	51                   	push   ecx
c0022e8e:	6a 00                	push   0x0
c0022e90:	56                   	push   esi
c0022e91:	e8 20 fc ff ff       	call   c0022ab6 <PCI::checkBus(unsigned char)>
c0022e96:	83 c4 10             	add    esp,0x10
c0022e99:	eb 24                	jmp    c0022ebf <PCI::detect()+0x4f>
c0022e9b:	52                   	push   edx
c0022e9c:	52                   	push   edx
c0022e9d:	53                   	push   ebx
c0022e9e:	43                   	inc    ebx
c0022e9f:	56                   	push   esi
c0022ea0:	e8 11 fc ff ff       	call   c0022ab6 <PCI::checkBus(unsigned char)>
c0022ea5:	83 c4 10             	add    esp,0x10
c0022ea8:	83 fb 08             	cmp    ebx,0x8
c0022eab:	74 12                	je     c0022ebf <PCI::detect()+0x4f>
c0022ead:	53                   	push   ebx
c0022eae:	6a 00                	push   0x0
c0022eb0:	6a 00                	push   0x0
c0022eb2:	56                   	push   esi
c0022eb3:	e8 0a f7 ff ff       	call   c00225c2 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0022eb8:	83 c4 10             	add    esp,0x10
c0022ebb:	66 40                	inc    ax
c0022ebd:	74 dc                	je     c0022e9b <PCI::detect()+0x2b>
c0022ebf:	58                   	pop    eax
c0022ec0:	5b                   	pop    ebx
c0022ec1:	5e                   	pop    esi
c0022ec2:	c3                   	ret    
c0022ec3:	90                   	nop

c0022ec4 <IDE::close(int, int, void*)>:
c0022ec4:	83 c8 ff             	or     eax,0xffffffff
c0022ec7:	c3                   	ret    

c0022ec8 <IDE::IDE()>:
c0022ec8:	83 ec 0c             	sub    esp,0xc
c0022ecb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022ecf:	83 ec 08             	sub    esp,0x8
c0022ed2:	68 e8 c0 02 c0       	push   0xc002c0e8
c0022ed7:	50                   	push   eax
c0022ed8:	e8 d3 0f ff ff       	call   c0013eb0 <HardDiskController::HardDiskController(char const*)>
c0022edd:	83 c4 10             	add    esp,0x10
c0022ee0:	ba 78 c1 02 c0       	mov    edx,0xc002c178
c0022ee5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022ee9:	89 10                	mov    DWORD PTR [eax],edx
c0022eeb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022eef:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c0022ef6:	90                   	nop
c0022ef7:	83 c4 0c             	add    esp,0xc
c0022efa:	c3                   	ret    
c0022efb:	90                   	nop

c0022efc <IDE::prepareInterrupt(unsigned char)>:
c0022efc:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0022f01:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0022f05:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c0022f0d:	c3                   	ret    

c0022f0e <selectDrive(unsigned char, unsigned char)>:
c0022f0e:	c3                   	ret    
c0022f0f:	90                   	nop

c0022f10 <IDE::getBase(unsigned char)>:
c0022f10:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0022f15:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022f19:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c0022f21:	c3                   	ret    

c0022f22 <IDE::write(unsigned char, unsigned char, unsigned char)>:
c0022f22:	55                   	push   ebp
c0022f23:	57                   	push   edi
c0022f24:	56                   	push   esi
c0022f25:	53                   	push   ebx
c0022f26:	83 ec 1c             	sub    esp,0x1c
c0022f29:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0022f2d:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0022f31:	8d 4b f8             	lea    ecx,[ebx-0x8]
c0022f34:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0022f38:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0022f3c:	80 f9 03             	cmp    cl,0x3
c0022f3f:	77 51                	ja     c0022f92 <IDE::write(unsigned char, unsigned char, unsigned char)+0x70>
c0022f41:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0022f45:	0f b6 f2             	movzx  esi,dl
c0022f48:	0f b6 db             	movzx  ebx,bl
c0022f4b:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c0022f4e:	8a 54 ef 10          	mov    dl,BYTE PTR [edi+ebp*8+0x10]
c0022f52:	83 ca 80             	or     edx,0xffffff80
c0022f55:	0f b6 d2             	movzx  edx,dl
c0022f58:	52                   	push   edx
c0022f59:	6a 0c                	push   0xc
c0022f5b:	56                   	push   esi
c0022f5c:	57                   	push   edi
c0022f5d:	e8 c0 ff ff ff       	call   c0022f22 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022f62:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c0022f67:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0022f6b:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c0022f6f:	ee                   	out    dx,al
c0022f70:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c0022f75:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c0022f79:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c0022f7d:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0022f81:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c0022f89:	83 c4 2c             	add    esp,0x2c
c0022f8c:	5b                   	pop    ebx
c0022f8d:	5e                   	pop    esi
c0022f8e:	5f                   	pop    edi
c0022f8f:	5d                   	pop    ebp
c0022f90:	eb 90                	jmp    c0022f22 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022f92:	80 fb 07             	cmp    bl,0x7
c0022f95:	77 12                	ja     c0022fa9 <IDE::write(unsigned char, unsigned char, unsigned char)+0x87>
c0022f97:	0f b6 d2             	movzx  edx,dl
c0022f9a:	0f b6 db             	movzx  ebx,bl
c0022f9d:	66 03 9c d7 5a 01 00 00 	add    bx,WORD PTR [edi+edx*8+0x15a]
c0022fa5:	89 da                	mov    edx,ebx
c0022fa7:	eb 2f                	jmp    c0022fd8 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c0022fa9:	80 fb 0d             	cmp    bl,0xd
c0022fac:	77 13                	ja     c0022fc1 <IDE::write(unsigned char, unsigned char, unsigned char)+0x9f>
c0022fae:	0f b6 d2             	movzx  edx,dl
c0022fb1:	0f b6 db             	movzx  ebx,bl
c0022fb4:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c0022fbb:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c0022fbf:	eb 17                	jmp    c0022fd8 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c0022fc1:	80 fb 15             	cmp    bl,0x15
c0022fc4:	77 13                	ja     c0022fd9 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c0022fc6:	0f b6 d2             	movzx  edx,dl
c0022fc9:	0f b6 db             	movzx  ebx,bl
c0022fcc:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c0022fd4:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c0022fd8:	ee                   	out    dx,al
c0022fd9:	83 c4 1c             	add    esp,0x1c
c0022fdc:	5b                   	pop    ebx
c0022fdd:	5e                   	pop    esi
c0022fde:	5f                   	pop    edi
c0022fdf:	5d                   	pop    ebp
c0022fe0:	c3                   	ret    
c0022fe1:	90                   	nop

c0022fe2 <IDE::read(unsigned char, unsigned char)>:
c0022fe2:	55                   	push   ebp
c0022fe3:	57                   	push   edi
c0022fe4:	56                   	push   esi
c0022fe5:	53                   	push   ebx
c0022fe6:	83 ec 1c             	sub    esp,0x1c
c0022fe9:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0022fed:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0022ff1:	8d 43 f8             	lea    eax,[ebx-0x8]
c0022ff4:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0022ff8:	3c 03                	cmp    al,0x3
c0022ffa:	77 43                	ja     c002303f <IDE::read(unsigned char, unsigned char)+0x5d>
c0022ffc:	0f b6 f2             	movzx  esi,dl
c0022fff:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c0023002:	8a 44 ef 10          	mov    al,BYTE PTR [edi+ebp*8+0x10]
c0023006:	83 c8 80             	or     eax,0xffffff80
c0023009:	0f b6 c0             	movzx  eax,al
c002300c:	50                   	push   eax
c002300d:	6a 0c                	push   0xc
c002300f:	56                   	push   esi
c0023010:	57                   	push   edi
c0023011:	e8 0c ff ff ff       	call   c0022f22 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023016:	66 8b 4c ef 0a       	mov    cx,WORD PTR [edi+ebp*8+0xa]
c002301b:	0f b6 c3             	movzx  eax,bl
c002301e:	8d 54 01 fa          	lea    edx,[ecx+eax*1-0x6]
c0023022:	ec                   	in     al,dx
c0023023:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0023027:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c002302c:	52                   	push   edx
c002302d:	6a 0c                	push   0xc
c002302f:	56                   	push   esi
c0023030:	57                   	push   edi
c0023031:	e8 ec fe ff ff       	call   c0022f22 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023036:	83 c4 20             	add    esp,0x20
c0023039:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c002303d:	eb 49                	jmp    c0023088 <IDE::read(unsigned char, unsigned char)+0xa6>
c002303f:	80 fb 07             	cmp    bl,0x7
c0023042:	77 12                	ja     c0023056 <IDE::read(unsigned char, unsigned char)+0x74>
c0023044:	0f b6 d2             	movzx  edx,dl
c0023047:	0f b6 c3             	movzx  eax,bl
c002304a:	66 03 84 d7 5a 01 00 00 	add    ax,WORD PTR [edi+edx*8+0x15a]
c0023052:	89 c2                	mov    edx,eax
c0023054:	eb 31                	jmp    c0023087 <IDE::read(unsigned char, unsigned char)+0xa5>
c0023056:	80 fb 0d             	cmp    bl,0xd
c0023059:	77 13                	ja     c002306e <IDE::read(unsigned char, unsigned char)+0x8c>
c002305b:	0f b6 d2             	movzx  edx,dl
c002305e:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c0023065:	0f b6 d3             	movzx  edx,bl
c0023068:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c002306c:	eb 19                	jmp    c0023087 <IDE::read(unsigned char, unsigned char)+0xa5>
c002306e:	31 c0                	xor    eax,eax
c0023070:	80 fb 15             	cmp    bl,0x15
c0023073:	77 13                	ja     c0023088 <IDE::read(unsigned char, unsigned char)+0xa6>
c0023075:	0f b6 d2             	movzx  edx,dl
c0023078:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c0023080:	0f b6 d3             	movzx  edx,bl
c0023083:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c0023087:	ec                   	in     al,dx
c0023088:	83 c4 1c             	add    esp,0x1c
c002308b:	5b                   	pop    ebx
c002308c:	5e                   	pop    esi
c002308d:	5f                   	pop    edi
c002308e:	5d                   	pop    ebp
c002308f:	c3                   	ret    

c0023090 <IDE::waitInterrupt(unsigned char)>:
c0023090:	55                   	push   ebp
c0023091:	57                   	push   edi
c0023092:	56                   	push   esi
c0023093:	53                   	push   ebx
c0023094:	31 db                	xor    ebx,ebx
c0023096:	83 ec 0c             	sub    esp,0xc
c0023099:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c002309d:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c00230a2:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c00230aa:	89 e8                	mov    eax,ebp
c00230ac:	84 c0                	test   al,al
c00230ae:	75 34                	jne    c00230e4 <IDE::waitInterrupt(unsigned char)+0x54>
c00230b0:	52                   	push   edx
c00230b1:	6a 0c                	push   0xc
c00230b3:	56                   	push   esi
c00230b4:	57                   	push   edi
c00230b5:	e8 28 ff ff ff       	call   c0022fe2 <IDE::read(unsigned char, unsigned char)>
c00230ba:	83 c4 10             	add    esp,0x10
c00230bd:	a8 01                	test   al,0x1
c00230bf:	75 2b                	jne    c00230ec <IDE::waitInterrupt(unsigned char)+0x5c>
c00230c1:	f6 c3 04             	test   bl,0x4
c00230c4:	75 16                	jne    c00230dc <IDE::waitInterrupt(unsigned char)+0x4c>
c00230c6:	83 fb 32             	cmp    ebx,0x32
c00230c9:	7e 11                	jle    c00230dc <IDE::waitInterrupt(unsigned char)+0x4c>
c00230cb:	50                   	push   eax
c00230cc:	50                   	push   eax
c00230cd:	6a 00                	push   0x0
c00230cf:	68 80 96 98 00       	push   0x989680
c00230d4:	e8 c6 ab ff ff       	call   c001dc9f <nanoSleep(unsigned long long)>
c00230d9:	83 c4 10             	add    esp,0x10
c00230dc:	83 fb 3c             	cmp    ebx,0x3c
c00230df:	74 0b                	je     c00230ec <IDE::waitInterrupt(unsigned char)+0x5c>
c00230e1:	43                   	inc    ebx
c00230e2:	eb be                	jmp    c00230a2 <IDE::waitInterrupt(unsigned char)+0x12>
c00230e4:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c00230ec:	83 c4 0c             	add    esp,0xc
c00230ef:	89 e8                	mov    eax,ebp
c00230f1:	5b                   	pop    ebx
c00230f2:	5e                   	pop    esi
c00230f3:	5f                   	pop    edi
c00230f4:	5d                   	pop    ebp
c00230f5:	c3                   	ret    

c00230f6 <ideChannel0IRQHandler(regs*, void*)>:
c00230f6:	83 ec 10             	sub    esp,0x10
c00230f9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00230fd:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c0023104:	6a 07                	push   0x7
c0023106:	6a 00                	push   0x0
c0023108:	50                   	push   eax
c0023109:	e8 d4 fe ff ff       	call   c0022fe2 <IDE::read(unsigned char, unsigned char)>
c002310e:	83 c4 1c             	add    esp,0x1c
c0023111:	c3                   	ret    

c0023112 <ideChannel1IRQHandler(regs*, void*)>:
c0023112:	83 ec 10             	sub    esp,0x10
c0023115:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023119:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c0023120:	6a 07                	push   0x7
c0023122:	6a 01                	push   0x1
c0023124:	50                   	push   eax
c0023125:	e8 b8 fe ff ff       	call   c0022fe2 <IDE::read(unsigned char, unsigned char)>
c002312a:	83 c4 1c             	add    esp,0x1c
c002312d:	c3                   	ret    

c002312e <IDE::enableIRQs(unsigned char, bool)>:
c002312e:	57                   	push   edi
c002312f:	56                   	push   esi
c0023130:	be 04 00 00 00       	mov    esi,0x4
c0023135:	53                   	push   ebx
c0023136:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c002313b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002313f:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c0023144:	0f 94 c0             	sete   al
c0023147:	d1 e0                	shl    eax,1
c0023149:	88 84 fb 60 01 00 00 	mov    BYTE PTR [ebx+edi*8+0x160],al
c0023150:	0f b6 c0             	movzx  eax,al
c0023153:	50                   	push   eax
c0023154:	6a 0c                	push   0xc
c0023156:	57                   	push   edi
c0023157:	53                   	push   ebx
c0023158:	e8 c5 fd ff ff       	call   c0022f22 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002315d:	83 c4 10             	add    esp,0x10
c0023160:	50                   	push   eax
c0023161:	6a 0c                	push   0xc
c0023163:	57                   	push   edi
c0023164:	53                   	push   ebx
c0023165:	e8 78 fe ff ff       	call   c0022fe2 <IDE::read(unsigned char, unsigned char)>
c002316a:	83 c4 10             	add    esp,0x10
c002316d:	4e                   	dec    esi
c002316e:	75 f0                	jne    c0023160 <IDE::enableIRQs(unsigned char, bool)+0x32>
c0023170:	5b                   	pop    ebx
c0023171:	5e                   	pop    esi
c0023172:	5f                   	pop    edi
c0023173:	c3                   	ret    

c0023174 <IDE::open(int, int, void*)>:
c0023174:	55                   	push   ebp
c0023175:	57                   	push   edi
c0023176:	56                   	push   esi
c0023177:	53                   	push   ebx
c0023178:	83 ec 1c             	sub    esp,0x1c
c002317b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c002317f:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c0023188:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c0023191:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c0023198:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c002319f:	0f 85 b0 02 00 00    	jne    c0023455 <IDE::open(int, int, void*)+0x2e1>
c00231a5:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c00231ab:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c00231af:	83 e0 7f             	and    eax,0x7f
c00231b2:	3c 05                	cmp    al,0x5
c00231b4:	74 04                	je     c00231ba <IDE::open(int, int, void*)+0x46>
c00231b6:	3c 0f                	cmp    al,0xf
c00231b8:	75 32                	jne    c00231ec <IDE::open(int, int, void*)+0x78>
c00231ba:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c00231c0:	83 e0 fc             	and    eax,0xfffffffc
c00231c3:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c00231ca:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c00231d0:	83 e0 fc             	and    eax,0xfffffffc
c00231d3:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c00231da:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c00231e0:	83 e0 fc             	and    eax,0xfffffffc
c00231e3:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c00231ea:	eb 14                	jmp    c0023200 <IDE::open(int, int, void*)+0x8c>
c00231ec:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c00231f6:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c0023200:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c0023207:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c002320e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0023212:	89 c6                	mov    esi,eax
c0023214:	bf f8 0c 00 00       	mov    edi,0xcf8
c0023219:	c1 e6 10             	shl    esi,0x10
c002321c:	89 e8                	mov    eax,ebp
c002321e:	89 fa                	mov    edx,edi
c0023220:	c1 e0 0b             	shl    eax,0xb
c0023223:	09 f0                	or     eax,esi
c0023225:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c002322c:	c1 e6 08             	shl    esi,0x8
c002322f:	09 c6                	or     esi,eax
c0023231:	89 f0                	mov    eax,esi
c0023233:	0d 08 00 00 80       	or     eax,0x80000008
c0023238:	ef                   	out    dx,eax
c0023239:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c002323e:	89 ca                	mov    edx,ecx
c0023240:	ed                   	in     eax,dx
c0023241:	c1 e8 10             	shr    eax,0x10
c0023244:	3d ff ff 00 00       	cmp    eax,0xffff
c0023249:	0f 84 f5 00 00 00    	je     c0023344 <IDE::open(int, int, void*)+0x1d0>
c002324f:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c0023255:	89 fa                	mov    edx,edi
c0023257:	89 f0                	mov    eax,esi
c0023259:	ef                   	out    dx,eax
c002325a:	b0 fe                	mov    al,0xfe
c002325c:	89 ca                	mov    edx,ecx
c002325e:	ee                   	out    dx,al
c002325f:	89 f0                	mov    eax,esi
c0023261:	89 fa                	mov    edx,edi
c0023263:	ef                   	out    dx,eax
c0023264:	89 ca                	mov    edx,ecx
c0023266:	ed                   	in     eax,dx
c0023267:	3c fe                	cmp    al,0xfe
c0023269:	0f 85 a9 00 00 00    	jne    c0023318 <IDE::open(int, int, void*)+0x1a4>
c002326f:	8b 15 a8 d9 02 c0    	mov    edx,DWORD PTR ds:0xc002d9a8
c0023275:	f6 82 e8 01 00 00 01 	test   BYTE PTR [edx+0x1e8],0x1
c002327c:	74 33                	je     c00232b1 <IDE::open(int, int, void*)+0x13d>
c002327e:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c0023284:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c0023288:	40                   	inc    eax
c0023289:	83 ec 0c             	sub    esp,0xc
c002328c:	0f b6 c0             	movzx  eax,al
c002328f:	50                   	push   eax
c0023290:	55                   	push   ebp
c0023291:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0023295:	ff b2 e4 01 00 00    	push   DWORD PTR [edx+0x1e4]
c002329b:	51                   	push   ecx
c002329c:	e8 4d 48 ff ff       	call   c0017aee <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c00232a1:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c00232a6:	83 c4 1c             	add    esp,0x1c
c00232a9:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c00232af:	eb 0a                	jmp    c00232bb <IDE::open(int, int, void*)+0x147>
c00232b1:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c00232bb:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c00232c2:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c00232c9:	c1 e1 10             	shl    ecx,0x10
c00232cc:	c1 e0 08             	shl    eax,0x8
c00232cf:	bf f8 0c 00 00       	mov    edi,0xcf8
c00232d4:	09 c1                	or     ecx,eax
c00232d6:	89 fa                	mov    edx,edi
c00232d8:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c00232df:	c1 e0 0b             	shl    eax,0xb
c00232e2:	09 c1                	or     ecx,eax
c00232e4:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c00232ea:	89 c8                	mov    eax,ecx
c00232ec:	ef                   	out    dx,eax
c00232ed:	be fc 0c 00 00       	mov    esi,0xcfc
c00232f2:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c00232f8:	89 f2                	mov    edx,esi
c00232fa:	ee                   	out    dx,al
c00232fb:	89 c8                	mov    eax,ecx
c00232fd:	89 fa                	mov    edx,edi
c00232ff:	ef                   	out    dx,eax
c0023300:	89 f2                	mov    edx,esi
c0023302:	ed                   	in     eax,dx
c0023303:	0f b6 c0             	movzx  eax,al
c0023306:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c002330c:	74 46                	je     c0023354 <IDE::open(int, int, void*)+0x1e0>
c002330e:	83 ec 0c             	sub    esp,0xc
c0023311:	68 00 c1 02 c0       	push   0xc002c100
c0023316:	eb 34                	jmp    c002334c <IDE::open(int, int, void*)+0x1d8>
c0023318:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c0023321:	75 17                	jne    c002333a <IDE::open(int, int, void*)+0x1c6>
c0023323:	80 7c 24 03 80       	cmp    BYTE PTR [esp+0x3],0x80
c0023328:	74 07                	je     c0023331 <IDE::open(int, int, void*)+0x1bd>
c002332a:	80 7c 24 03 8a       	cmp    BYTE PTR [esp+0x3],0x8a
c002332f:	75 09                	jne    c002333a <IDE::open(int, int, void*)+0x1c6>
c0023331:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c0023338:	eb 1a                	jmp    c0023354 <IDE::open(int, int, void*)+0x1e0>
c002333a:	83 ec 0c             	sub    esp,0xc
c002333d:	68 08 c1 02 c0       	push   0xc002c108
c0023342:	eb 08                	jmp    c002334c <IDE::open(int, int, void*)+0x1d8>
c0023344:	83 ec 0c             	sub    esp,0xc
c0023347:	68 39 c1 02 c0       	push   0xc002c139
c002334c:	e8 e4 6a ff ff       	call   c0019e35 <Krnl::panic(char const*)>
c0023351:	83 c4 10             	add    esp,0x10
c0023354:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c002335b:	79 1a                	jns    c0023377 <IDE::open(int, int, void*)+0x203>
c002335d:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c0023363:	83 e0 fc             	and    eax,0xfffffffc
c0023366:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c002336d:	83 c0 08             	add    eax,0x8
c0023370:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c0023377:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c002337d:	89 c2                	mov    edx,eax
c002337f:	83 e2 0f             	and    edx,0xf
c0023382:	66 83 fa 08          	cmp    dx,0x8
c0023386:	75 0a                	jne    c0023392 <IDE::open(int, int, void*)+0x21e>
c0023388:	83 e8 02             	sub    eax,0x2
c002338b:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0023392:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c0023398:	89 c2                	mov    edx,eax
c002339a:	83 e2 0f             	and    edx,0xf
c002339d:	66 83 fa 08          	cmp    dx,0x8
c00233a1:	75 0a                	jne    c00233ad <IDE::open(int, int, void*)+0x239>
c00233a3:	83 e8 02             	sub    eax,0x2
c00233a6:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c00233ad:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c00233b4:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c00233bb:	89 d0                	mov    eax,edx
c00233bd:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c00233c0:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c00233c4:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c00233c8:	8d 4a 01             	lea    ecx,[edx+0x1]
c00233cb:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c00233d0:	0f b6 c9             	movzx  ecx,cl
c00233d3:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c00233da:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c00233dd:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c00233e1:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c00233e5:	8d 50 02             	lea    edx,[eax+0x2]
c00233e8:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c00233ed:	0f b6 d2             	movzx  edx,dl
c00233f0:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c00233f6:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c00233f9:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c00233fd:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c0023401:	8d 48 03             	lea    ecx,[eax+0x3]
c0023404:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0023409:	0f b6 c9             	movzx  ecx,cl
c002340c:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c0023412:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c0023415:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c0023419:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c002341d:	8d 50 04             	lea    edx,[eax+0x4]
c0023420:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c0023426:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c002342b:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c0023432:	66 85 f6             	test   si,si
c0023435:	74 5b                	je     c0023492 <IDE::open(int, int, void*)+0x31e>
c0023437:	0f b6 d2             	movzx  edx,dl
c002343a:	83 c0 05             	add    eax,0x5
c002343d:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0023440:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0023444:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c0023448:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c002344e:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0023453:	eb 3d                	jmp    c0023492 <IDE::open(int, int, void*)+0x31e>
c0023455:	8b 83 18 01 00 00    	mov    eax,DWORD PTR [ebx+0x118]
c002345b:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c0023462:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c0023469:	66 05 06 02          	add    ax,0x206
c002346d:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0023474:	66 8b 83 1a 01 00 00 	mov    ax,WORD PTR [ebx+0x11a]
c002347b:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c0023482:	66 05 06 02          	add    ax,0x206
c0023486:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c002348d:	e9 e5 fe ff ff       	jmp    c0023377 <IDE::open(int, int, void*)+0x203>
c0023492:	50                   	push   eax
c0023493:	50                   	push   eax
c0023494:	6a 00                	push   0x0
c0023496:	53                   	push   ebx
c0023497:	e8 60 fa ff ff       	call   c0022efc <IDE::prepareInterrupt(unsigned char)>
c002349c:	5a                   	pop    edx
c002349d:	59                   	pop    ecx
c002349e:	6a 01                	push   0x1
c00234a0:	53                   	push   ebx
c00234a1:	e8 56 fa ff ff       	call   c0022efc <IDE::prepareInterrupt(unsigned char)>
c00234a6:	83 c4 0c             	add    esp,0xc
c00234a9:	6a 00                	push   0x0
c00234ab:	6a 00                	push   0x0
c00234ad:	53                   	push   ebx
c00234ae:	e8 7b fc ff ff       	call   c002312e <IDE::enableIRQs(unsigned char, bool)>
c00234b3:	83 c4 0c             	add    esp,0xc
c00234b6:	6a 00                	push   0x0
c00234b8:	6a 01                	push   0x1
c00234ba:	53                   	push   ebx
c00234bb:	e8 6e fc ff ff       	call   c002312e <IDE::enableIRQs(unsigned char, bool)>
c00234c0:	83 c4 10             	add    esp,0x10
c00234c3:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c00234ca:	74 34                	je     c0023500 <IDE::open(int, int, void*)+0x38c>
c00234cc:	83 ec 0c             	sub    esp,0xc
c00234cf:	53                   	push   ebx
c00234d0:	6a 01                	push   0x1
c00234d2:	68 f6 30 02 c0       	push   0xc00230f6
c00234d7:	6a 0e                	push   0xe
c00234d9:	53                   	push   ebx
c00234da:	e8 9b 05 ff ff       	call   c0013a7a <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00234df:	83 c4 14             	add    esp,0x14
c00234e2:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c00234e8:	53                   	push   ebx
c00234e9:	6a 01                	push   0x1
c00234eb:	68 12 31 02 c0       	push   0xc0023112
c00234f0:	6a 0f                	push   0xf
c00234f2:	53                   	push   ebx
c00234f3:	e8 82 05 ff ff       	call   c0013a7a <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00234f8:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c00234fe:	eb 38                	jmp    c0023538 <IDE::open(int, int, void*)+0x3c4>
c0023500:	83 ec 0c             	sub    esp,0xc
c0023503:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c002350d:	53                   	push   ebx
c002350e:	6a 00                	push   0x0
c0023510:	68 f6 30 02 c0       	push   0xc00230f6
c0023515:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c002351b:	53                   	push   ebx
c002351c:	e8 59 05 ff ff       	call   c0013a7a <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0023521:	83 c4 14             	add    esp,0x14
c0023524:	53                   	push   ebx
c0023525:	6a 00                	push   0x0
c0023527:	68 12 31 02 c0       	push   0xc0023112
c002352c:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c0023532:	53                   	push   ebx
c0023533:	e8 42 05 ff ff       	call   c0013a7a <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0023538:	8b 03                	mov    eax,DWORD PTR [ebx]
c002353a:	83 c4 20             	add    esp,0x20
c002353d:	83 ec 0c             	sub    esp,0xc
c0023540:	53                   	push   ebx
c0023541:	ff 50 18             	call   DWORD PTR [eax+0x18]
c0023544:	83 c4 0c             	add    esp,0xc
c0023547:	6a 07                	push   0x7
c0023549:	6a 00                	push   0x0
c002354b:	53                   	push   ebx
c002354c:	e8 91 fa ff ff       	call   c0022fe2 <IDE::read(unsigned char, unsigned char)>
c0023551:	83 c4 0c             	add    esp,0xc
c0023554:	6a 07                	push   0x7
c0023556:	6a 01                	push   0x1
c0023558:	53                   	push   ebx
c0023559:	e8 84 fa ff ff       	call   c0022fe2 <IDE::read(unsigned char, unsigned char)>
c002355e:	83 c4 0c             	add    esp,0xc
c0023561:	6a 01                	push   0x1
c0023563:	6a 00                	push   0x0
c0023565:	53                   	push   ebx
c0023566:	e8 c3 fb ff ff       	call   c002312e <IDE::enableIRQs(unsigned char, bool)>
c002356b:	83 c4 0c             	add    esp,0xc
c002356e:	6a 01                	push   0x1
c0023570:	6a 01                	push   0x1
c0023572:	53                   	push   ebx
c0023573:	e8 b6 fb ff ff       	call   c002312e <IDE::enableIRQs(unsigned char, bool)>
c0023578:	83 c4 2c             	add    esp,0x2c
c002357b:	31 c0                	xor    eax,eax
c002357d:	5b                   	pop    ebx
c002357e:	5e                   	pop    esi
c002357f:	5f                   	pop    edi
c0023580:	5d                   	pop    ebp
c0023581:	c3                   	ret    

c0023582 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c0023582:	55                   	push   ebp
c0023583:	57                   	push   edi
c0023584:	56                   	push   esi
c0023585:	53                   	push   ebx
c0023586:	83 ec 1c             	sub    esp,0x1c
c0023589:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c002358d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0023591:	8d 50 f8             	lea    edx,[eax-0x8]
c0023594:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0023598:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c002359c:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c00235a0:	80 fa 03             	cmp    dl,0x3
c00235a3:	77 5d                	ja     c0023602 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x80>
c00235a5:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00235a9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00235ad:	0f b6 db             	movzx  ebx,bl
c00235b0:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c00235b3:	8a 54 ee 10          	mov    dl,BYTE PTR [esi+ebp*8+0x10]
c00235b7:	83 ca 80             	or     edx,0xffffff80
c00235ba:	0f b6 d2             	movzx  edx,dl
c00235bd:	52                   	push   edx
c00235be:	6a 0c                	push   0xc
c00235c0:	53                   	push   ebx
c00235c1:	56                   	push   esi
c00235c2:	e8 5b f9 ff ff       	call   c0022f22 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00235c7:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c00235cc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00235d0:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00235d4:	0f b6 c0             	movzx  eax,al
c00235d7:	8d 54 02 fa          	lea    edx,[edx+eax*1-0x6]
c00235db:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c00235dd:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c00235e2:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c00235e6:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c00235ea:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c00235ee:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c00235f6:	83 c4 2c             	add    esp,0x2c
c00235f9:	5b                   	pop    ebx
c00235fa:	5e                   	pop    esi
c00235fb:	5f                   	pop    edi
c00235fc:	5d                   	pop    ebp
c00235fd:	e9 20 f9 ff ff       	jmp    c0022f22 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023602:	3c 07                	cmp    al,0x7
c0023604:	77 10                	ja     c0023616 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x94>
c0023606:	0f b6 db             	movzx  ebx,bl
c0023609:	0f b6 d0             	movzx  edx,al
c002360c:	66 03 94 de 5a 01 00 00 	add    dx,WORD PTR [esi+ebx*8+0x15a]
c0023614:	eb 2d                	jmp    c0023643 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c0023616:	3c 0d                	cmp    al,0xd
c0023618:	77 13                	ja     c002362d <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xab>
c002361a:	0f b6 db             	movzx  ebx,bl
c002361d:	0f b6 c0             	movzx  eax,al
c0023620:	8b 94 de 5c 01 00 00 	mov    edx,DWORD PTR [esi+ebx*8+0x15c]
c0023627:	8d 54 02 f4          	lea    edx,[edx+eax*1-0xc]
c002362b:	eb 16                	jmp    c0023643 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c002362d:	3c 15                	cmp    al,0x15
c002362f:	77 14                	ja     c0023645 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc3>
c0023631:	0f b6 db             	movzx  ebx,bl
c0023634:	0f b6 c0             	movzx  eax,al
c0023637:	66 8b 94 de 5e 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15e]
c002363f:	8d 54 02 f2          	lea    edx,[edx+eax*1-0xe]
c0023643:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c0023645:	83 c4 1c             	add    esp,0x1c
c0023648:	5b                   	pop    ebx
c0023649:	5e                   	pop    esi
c002364a:	5f                   	pop    edi
c002364b:	5d                   	pop    ebp
c002364c:	c3                   	ret    
c002364d:	90                   	nop

c002364e <IDE::detect()>:
c002364e:	55                   	push   ebp
c002364f:	57                   	push   edi
c0023650:	56                   	push   esi
c0023651:	53                   	push   ebx
c0023652:	81 ec 1c 02 00 00    	sub    esp,0x21c
c0023658:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c002365f:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c0023666:	0f 85 9d 02 00 00    	jne    c0023909 <IDE::detect()+0x2bb>
c002366c:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c0023673:	31 f6                	xor    esi,esi
c0023675:	31 ed                	xor    ebp,ebp
c0023677:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c002367f:	89 e8                	mov    eax,ebp
c0023681:	c1 e0 06             	shl    eax,0x6
c0023684:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c002368c:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0023690:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0023694:	c1 e0 04             	shl    eax,0x4
c0023697:	83 c8 a0             	or     eax,0xffffffa0
c002369a:	0f b6 c0             	movzx  eax,al
c002369d:	50                   	push   eax
c002369e:	6a 06                	push   0x6
c00236a0:	56                   	push   esi
c00236a1:	53                   	push   ebx
c00236a2:	e8 7b f8 ff ff       	call   c0022f22 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00236a7:	83 c4 0c             	add    esp,0xc
c00236aa:	6a 0c                	push   0xc
c00236ac:	56                   	push   esi
c00236ad:	53                   	push   ebx
c00236ae:	e8 2f f9 ff ff       	call   c0022fe2 <IDE::read(unsigned char, unsigned char)>
c00236b3:	83 c4 0c             	add    esp,0xc
c00236b6:	6a 0c                	push   0xc
c00236b8:	56                   	push   esi
c00236b9:	53                   	push   ebx
c00236ba:	e8 23 f9 ff ff       	call   c0022fe2 <IDE::read(unsigned char, unsigned char)>
c00236bf:	83 c4 0c             	add    esp,0xc
c00236c2:	6a 0c                	push   0xc
c00236c4:	56                   	push   esi
c00236c5:	53                   	push   ebx
c00236c6:	e8 17 f9 ff ff       	call   c0022fe2 <IDE::read(unsigned char, unsigned char)>
c00236cb:	83 c4 0c             	add    esp,0xc
c00236ce:	6a 0c                	push   0xc
c00236d0:	56                   	push   esi
c00236d1:	53                   	push   ebx
c00236d2:	e8 0b f9 ff ff       	call   c0022fe2 <IDE::read(unsigned char, unsigned char)>
c00236d7:	68 ec 00 00 00       	push   0xec
c00236dc:	6a 07                	push   0x7
c00236de:	56                   	push   esi
c00236df:	53                   	push   ebx
c00236e0:	e8 3d f8 ff ff       	call   c0022f22 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00236e5:	83 c4 1c             	add    esp,0x1c
c00236e8:	6a 0c                	push   0xc
c00236ea:	56                   	push   esi
c00236eb:	53                   	push   ebx
c00236ec:	e8 f1 f8 ff ff       	call   c0022fe2 <IDE::read(unsigned char, unsigned char)>
c00236f1:	83 c4 0c             	add    esp,0xc
c00236f4:	6a 0c                	push   0xc
c00236f6:	56                   	push   esi
c00236f7:	53                   	push   ebx
c00236f8:	e8 e5 f8 ff ff       	call   c0022fe2 <IDE::read(unsigned char, unsigned char)>
c00236fd:	83 c4 0c             	add    esp,0xc
c0023700:	6a 0c                	push   0xc
c0023702:	56                   	push   esi
c0023703:	53                   	push   ebx
c0023704:	e8 d9 f8 ff ff       	call   c0022fe2 <IDE::read(unsigned char, unsigned char)>
c0023709:	83 c4 0c             	add    esp,0xc
c002370c:	6a 0c                	push   0xc
c002370e:	56                   	push   esi
c002370f:	53                   	push   ebx
c0023710:	e8 cd f8 ff ff       	call   c0022fe2 <IDE::read(unsigned char, unsigned char)>
c0023715:	83 c4 0c             	add    esp,0xc
c0023718:	6a 0c                	push   0xc
c002371a:	56                   	push   esi
c002371b:	53                   	push   ebx
c002371c:	e8 c1 f8 ff ff       	call   c0022fe2 <IDE::read(unsigned char, unsigned char)>
c0023721:	83 c4 10             	add    esp,0x10
c0023724:	84 c0                	test   al,al
c0023726:	0f 84 63 01 00 00    	je     c002388f <IDE::detect()+0x241>
c002372c:	31 ff                	xor    edi,edi
c002372e:	50                   	push   eax
c002372f:	6a 0c                	push   0xc
c0023731:	56                   	push   esi
c0023732:	53                   	push   ebx
c0023733:	e8 aa f8 ff ff       	call   c0022fe2 <IDE::read(unsigned char, unsigned char)>
c0023738:	83 c4 10             	add    esp,0x10
c002373b:	a8 01                	test   al,0x1
c002373d:	0f 85 6d 01 00 00    	jne    c00238b0 <IDE::detect()+0x262>
c0023743:	84 c0                	test   al,al
c0023745:	78 04                	js     c002374b <IDE::detect()+0xfd>
c0023747:	a8 08                	test   al,0x8
c0023749:	75 27                	jne    c0023772 <IDE::detect()+0x124>
c002374b:	47                   	inc    edi
c002374c:	81 ff 17 01 00 00    	cmp    edi,0x117
c0023752:	7e da                	jle    c002372e <IDE::detect()+0xe0>
c0023754:	50                   	push   eax
c0023755:	50                   	push   eax
c0023756:	6a 00                	push   0x0
c0023758:	68 40 4b 4c 00       	push   0x4c4b40
c002375d:	e8 3d a5 ff ff       	call   c001dc9f <nanoSleep(unsigned long long)>
c0023762:	83 c4 10             	add    esp,0x10
c0023765:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c002376b:	75 c1                	jne    c002372e <IDE::detect()+0xe0>
c002376d:	e9 3e 01 00 00       	jmp    c00238b0 <IDE::detect()+0x262>
c0023772:	31 c9                	xor    ecx,ecx
c0023774:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0023778:	8d 7c 24 10          	lea    edi,[esp+0x10]
c002377c:	83 ec 0c             	sub    esp,0xc
c002377f:	68 80 00 00 00       	push   0x80
c0023784:	57                   	push   edi
c0023785:	6a 00                	push   0x0
c0023787:	56                   	push   esi
c0023788:	53                   	push   ebx
c0023789:	e8 f4 fd ff ff       	call   c0023582 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c002378e:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c0023793:	89 e8                	mov    eax,ebp
c0023795:	89 d1                	mov    ecx,edx
c0023797:	c1 e0 06             	shl    eax,0x6
c002379a:	01 d8                	add    eax,ebx
c002379c:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c00237a3:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c00237aa:	89 f2                	mov    edx,esi
c00237ac:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c00237b2:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c00237b6:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c00237bc:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00237c0:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c00237c7:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c00237cf:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c00237d6:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c00237de:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c00237e4:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c00237eb:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c00237f1:	8d 54 24 58          	lea    edx,[esp+0x58]
c00237f5:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c00237f9:	83 c4 20             	add    esp,0x20
c00237fc:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c00237ff:	83 c0 02             	add    eax,0x2
c0023802:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c0023808:	83 c7 02             	add    edi,0x2
c002380b:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c002380e:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c0023814:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c0023818:	75 e2                	jne    c00237fc <IDE::detect()+0x1ae>
c002381a:	89 e8                	mov    eax,ebp
c002381c:	c1 e0 06             	shl    eax,0x6
c002381f:	01 d8                	add    eax,ebx
c0023821:	8b 90 74 01 00 00    	mov    edx,DWORD PTR [eax+0x174]
c0023827:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c002382e:	66 c1 ea 09          	shr    dx,0x9
c0023832:	83 e2 01             	and    edx,0x1
c0023835:	84 c9                	test   cl,cl
c0023837:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c002383d:	75 22                	jne    c0023861 <IDE::detect()+0x213>
c002383f:	83 b8 7c 01 00 00 00 	cmp    DWORD PTR [eax+0x17c],0x0
c0023846:	74 46                	je     c002388e <IDE::detect()+0x240>
c0023848:	83 ec 0c             	sub    esp,0xc
c002384b:	68 7c 01 00 00       	push   0x17c
c0023850:	e8 44 bd fe ff       	call   c000f599 <malloc>
c0023855:	89 c7                	mov    edi,eax
c0023857:	89 04 24             	mov    DWORD PTR [esp],eax
c002385a:	e8 15 05 00 00       	call   c0023d74 <ATA::ATA()>
c002385f:	eb 17                	jmp    c0023878 <IDE::detect()+0x22a>
c0023861:	83 ec 0c             	sub    esp,0xc
c0023864:	68 80 01 00 00       	push   0x180
c0023869:	e8 2b bd fe ff       	call   c000f599 <malloc>
c002386e:	89 c7                	mov    edi,eax
c0023870:	89 04 24             	mov    DWORD PTR [esp],eax
c0023873:	e8 04 0b 00 00       	call   c002437c <ATAPI::ATAPI()>
c0023878:	5a                   	pop    edx
c0023879:	59                   	pop    ecx
c002387a:	57                   	push   edi
c002387b:	53                   	push   ebx
c002387c:	e8 81 02 ff ff       	call   c0013b02 <Device::addChild(Device*)>
c0023881:	8b 07                	mov    eax,DWORD PTR [edi]
c0023883:	53                   	push   ebx
c0023884:	55                   	push   ebp
c0023885:	6a 00                	push   0x0
c0023887:	57                   	push   edi
c0023888:	ff 50 08             	call   DWORD PTR [eax+0x8]
c002388b:	83 c4 20             	add    esp,0x20
c002388e:	45                   	inc    ebp
c002388f:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0023894:	74 0d                	je     c00238a3 <IDE::detect()+0x255>
c0023896:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c002389e:	e9 dc fd ff ff       	jmp    c002367f <IDE::detect()+0x31>
c00238a3:	4e                   	dec    esi
c00238a4:	74 63                	je     c0023909 <IDE::detect()+0x2bb>
c00238a6:	be 01 00 00 00       	mov    esi,0x1
c00238ab:	e9 c7 fd ff ff       	jmp    c0023677 <IDE::detect()+0x29>
c00238b0:	50                   	push   eax
c00238b1:	6a 04                	push   0x4
c00238b3:	56                   	push   esi
c00238b4:	53                   	push   ebx
c00238b5:	e8 28 f7 ff ff       	call   c0022fe2 <IDE::read(unsigned char, unsigned char)>
c00238ba:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c00238be:	83 c4 0c             	add    esp,0xc
c00238c1:	6a 05                	push   0x5
c00238c3:	56                   	push   esi
c00238c4:	53                   	push   ebx
c00238c5:	e8 18 f7 ff ff       	call   c0022fe2 <IDE::read(unsigned char, unsigned char)>
c00238ca:	83 c4 10             	add    esp,0x10
c00238cd:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00238d1:	80 fa 14             	cmp    dl,0x14
c00238d4:	75 04                	jne    c00238da <IDE::detect()+0x28c>
c00238d6:	3c eb                	cmp    al,0xeb
c00238d8:	eb 07                	jmp    c00238e1 <IDE::detect()+0x293>
c00238da:	3c 96                	cmp    al,0x96
c00238dc:	75 b1                	jne    c002388f <IDE::detect()+0x241>
c00238de:	80 fa 69             	cmp    dl,0x69
c00238e1:	75 ac                	jne    c002388f <IDE::detect()+0x241>
c00238e3:	68 a1 00 00 00       	push   0xa1
c00238e8:	6a 07                	push   0x7
c00238ea:	56                   	push   esi
c00238eb:	53                   	push   ebx
c00238ec:	e8 31 f6 ff ff       	call   c0022f22 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00238f1:	5f                   	pop    edi
c00238f2:	58                   	pop    eax
c00238f3:	6a 00                	push   0x0
c00238f5:	68 40 42 0f 00       	push   0xf4240
c00238fa:	e8 a0 a3 ff ff       	call   c001dc9f <nanoSleep(unsigned long long)>
c00238ff:	83 c4 10             	add    esp,0x10
c0023902:	b1 01                	mov    cl,0x1
c0023904:	e9 6b fe ff ff       	jmp    c0023774 <IDE::detect()+0x126>
c0023909:	81 c4 1c 02 00 00    	add    esp,0x21c
c002390f:	5b                   	pop    ebx
c0023910:	5e                   	pop    esi
c0023911:	5f                   	pop    edi
c0023912:	5d                   	pop    ebp
c0023913:	c3                   	ret    

c0023914 <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c0023914:	55                   	push   ebp
c0023915:	57                   	push   edi
c0023916:	56                   	push   esi
c0023917:	53                   	push   ebx
c0023918:	83 ec 1c             	sub    esp,0x1c
c002391b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c002391f:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0023923:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0023927:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c002392b:	88 c3                	mov    bl,al
c002392d:	84 c0                	test   al,al
c002392f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0023933:	0f 84 81 00 00 00    	je     c00239ba <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0023939:	83 ec 0c             	sub    esp,0xc
c002393c:	68 63 c1 02 c0       	push   0xc002c163
c0023941:	e8 83 ed fe ff       	call   c00126c9 <Dbg::kprintf(char const*, ...)>
c0023946:	83 c4 10             	add    esp,0x10
c0023949:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002394d:	3c 01                	cmp    al,0x1
c002394f:	74 63                	je     c00239b4 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa0>
c0023951:	3c 02                	cmp    al,0x2
c0023953:	75 53                	jne    c00239a8 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x94>
c0023955:	d1 e6                	shl    esi,1
c0023957:	09 ee                	or     esi,ebp
c0023959:	50                   	push   eax
c002395a:	89 f0                	mov    eax,esi
c002395c:	6a 01                	push   0x1
c002395e:	0f b6 f0             	movzx  esi,al
c0023961:	c1 e6 06             	shl    esi,0x6
c0023964:	0f b6 84 37 6d 01 00 00 	movzx  eax,BYTE PTR [edi+esi*1+0x16d]
c002396c:	50                   	push   eax
c002396d:	57                   	push   edi
c002396e:	e8 6f f6 ff ff       	call   c0022fe2 <IDE::read(unsigned char, unsigned char)>
c0023973:	83 c4 10             	add    esp,0x10
c0023976:	a8 01                	test   al,0x1
c0023978:	74 02                	je     c002397c <IDE::printError(unsigned char, unsigned char, unsigned char)+0x68>
c002397a:	b3 07                	mov    bl,0x7
c002397c:	a8 02                	test   al,0x2
c002397e:	74 02                	je     c0023982 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x6e>
c0023980:	b3 03                	mov    bl,0x3
c0023982:	a8 04                	test   al,0x4
c0023984:	74 02                	je     c0023988 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x74>
c0023986:	b3 14                	mov    bl,0x14
c0023988:	a8 08                	test   al,0x8
c002398a:	74 02                	je     c002398e <IDE::printError(unsigned char, unsigned char, unsigned char)+0x7a>
c002398c:	b3 03                	mov    bl,0x3
c002398e:	a8 10                	test   al,0x10
c0023990:	74 02                	je     c0023994 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x80>
c0023992:	b3 15                	mov    bl,0x15
c0023994:	a8 20                	test   al,0x20
c0023996:	74 02                	je     c002399a <IDE::printError(unsigned char, unsigned char, unsigned char)+0x86>
c0023998:	b3 03                	mov    bl,0x3
c002399a:	a8 40                	test   al,0x40
c002399c:	74 02                	je     c00239a0 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x8c>
c002399e:	b3 16                	mov    bl,0x16
c00239a0:	84 c0                	test   al,al
c00239a2:	79 16                	jns    c00239ba <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c00239a4:	b3 0d                	mov    bl,0xd
c00239a6:	eb 12                	jmp    c00239ba <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c00239a8:	3c 03                	cmp    al,0x3
c00239aa:	74 0c                	je     c00239b8 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa4>
c00239ac:	3c 04                	cmp    al,0x4
c00239ae:	75 0a                	jne    c00239ba <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c00239b0:	b3 08                	mov    bl,0x8
c00239b2:	eb 06                	jmp    c00239ba <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c00239b4:	b3 13                	mov    bl,0x13
c00239b6:	eb 02                	jmp    c00239ba <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c00239b8:	b3 17                	mov    bl,0x17
c00239ba:	83 c4 1c             	add    esp,0x1c
c00239bd:	88 d8                	mov    al,bl
c00239bf:	5b                   	pop    ebx
c00239c0:	5e                   	pop    esi
c00239c1:	5f                   	pop    edi
c00239c2:	5d                   	pop    ebp
c00239c3:	c3                   	ret    

c00239c4 <IDE::polling(unsigned char, unsigned int)>:
c00239c4:	57                   	push   edi
c00239c5:	56                   	push   esi
c00239c6:	53                   	push   ebx
c00239c7:	bb 04 00 00 00       	mov    ebx,0x4
c00239cc:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c00239d0:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c00239d5:	52                   	push   edx
c00239d6:	6a 0c                	push   0xc
c00239d8:	56                   	push   esi
c00239d9:	57                   	push   edi
c00239da:	e8 03 f6 ff ff       	call   c0022fe2 <IDE::read(unsigned char, unsigned char)>
c00239df:	83 c4 10             	add    esp,0x10
c00239e2:	4b                   	dec    ebx
c00239e3:	75 f0                	jne    c00239d5 <IDE::polling(unsigned char, unsigned int)+0x11>
c00239e5:	bb a0 86 01 00       	mov    ebx,0x186a0
c00239ea:	50                   	push   eax
c00239eb:	6a 0c                	push   0xc
c00239ed:	56                   	push   esi
c00239ee:	57                   	push   edi
c00239ef:	e8 ee f5 ff ff       	call   c0022fe2 <IDE::read(unsigned char, unsigned char)>
c00239f4:	83 c4 10             	add    esp,0x10
c00239f7:	a8 01                	test   al,0x1
c00239f9:	75 17                	jne    c0023a12 <IDE::polling(unsigned char, unsigned int)+0x4e>
c00239fb:	a8 20                	test   al,0x20
c00239fd:	75 0f                	jne    c0023a0e <IDE::polling(unsigned char, unsigned int)+0x4a>
c00239ff:	4b                   	dec    ebx
c0023a00:	74 10                	je     c0023a12 <IDE::polling(unsigned char, unsigned int)+0x4e>
c0023a02:	84 c0                	test   al,al
c0023a04:	78 e4                	js     c00239ea <IDE::polling(unsigned char, unsigned int)+0x26>
c0023a06:	a8 08                	test   al,0x8
c0023a08:	74 e0                	je     c00239ea <IDE::polling(unsigned char, unsigned int)+0x26>
c0023a0a:	31 c0                	xor    eax,eax
c0023a0c:	eb 06                	jmp    c0023a14 <IDE::polling(unsigned char, unsigned int)+0x50>
c0023a0e:	b0 01                	mov    al,0x1
c0023a10:	eb 02                	jmp    c0023a14 <IDE::polling(unsigned char, unsigned int)+0x50>
c0023a12:	b0 02                	mov    al,0x2
c0023a14:	5b                   	pop    ebx
c0023a15:	5e                   	pop    esi
c0023a16:	5f                   	pop    edi
c0023a17:	c3                   	ret    

c0023a18 <SATABus::close(int, int, void*)>:
c0023a18:	31 c0                	xor    eax,eax
c0023a1a:	c3                   	ret    
c0023a1b:	90                   	nop

c0023a1c <SATABus::detect()>:
c0023a1c:	c3                   	ret    
c0023a1d:	90                   	nop

c0023a1e <SATABus::SATABus()>:
c0023a1e:	83 ec 0c             	sub    esp,0xc
c0023a21:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023a25:	83 ec 08             	sub    esp,0x8
c0023a28:	68 9c c1 02 c0       	push   0xc002c19c
c0023a2d:	50                   	push   eax
c0023a2e:	e8 7d 04 ff ff       	call   c0013eb0 <HardDiskController::HardDiskController(char const*)>
c0023a33:	83 c4 10             	add    esp,0x10
c0023a36:	ba f0 c1 02 c0       	mov    edx,0xc002c1f0
c0023a3b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023a3f:	89 10                	mov    DWORD PTR [eax],edx
c0023a41:	83 ec 0c             	sub    esp,0xc
c0023a44:	6a 50                	push   0x50
c0023a46:	e8 42 c0 fe ff       	call   c000fa8d <Phys::allocateContiguousPages(int)>
c0023a4b:	83 c4 10             	add    esp,0x10
c0023a4e:	89 c2                	mov    edx,eax
c0023a50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023a54:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0023a5a:	83 ec 0c             	sub    esp,0xc
c0023a5d:	6a 50                	push   0x50
c0023a5f:	e8 b9 d7 fe ff       	call   c001121d <Virt::allocateKernelVirtualPages(int)>
c0023a64:	83 c4 10             	add    esp,0x10
c0023a67:	89 c2                	mov    edx,eax
c0023a69:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023a6d:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0023a73:	a1 10 db 02 c0       	mov    eax,ds:0xc002db10
c0023a78:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0023a7c:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c0023a82:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0023a86:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c0023a8c:	83 ec 0c             	sub    esp,0xc
c0023a8f:	6a 03                	push   0x3
c0023a91:	6a 50                	push   0x50
c0023a93:	51                   	push   ecx
c0023a94:	52                   	push   edx
c0023a95:	50                   	push   eax
c0023a96:	e8 35 e2 fe ff       	call   c0011cd0 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0023a9b:	83 c4 20             	add    esp,0x20
c0023a9e:	90                   	nop
c0023a9f:	83 c4 0c             	add    esp,0xc
c0023aa2:	c3                   	ret    
c0023aa3:	90                   	nop

c0023aa4 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c0023aa4:	83 ec 0c             	sub    esp,0xc
c0023aa7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0023aab:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c0023aae:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0023ab1:	09 c2                	or     edx,eax
c0023ab3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023ab7:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0023abd:	8b 08                	mov    ecx,DWORD PTR [eax]
c0023abf:	31 c0                	xor    eax,eax
c0023ac1:	c1 e9 08             	shr    ecx,0x8
c0023ac4:	83 e1 0f             	and    ecx,0xf
c0023ac7:	39 c8                	cmp    eax,ecx
c0023ac9:	74 0a                	je     c0023ad5 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c0023acb:	f6 c2 01             	test   dl,0x1
c0023ace:	74 18                	je     c0023ae8 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x44>
c0023ad0:	d1 ea                	shr    edx,1
c0023ad2:	40                   	inc    eax
c0023ad3:	eb f2                	jmp    c0023ac7 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x23>
c0023ad5:	83 ec 0c             	sub    esp,0xc
c0023ad8:	68 c0 c1 02 c0       	push   0xc002c1c0
c0023add:	e8 53 63 ff ff       	call   c0019e35 <Krnl::panic(char const*)>
c0023ae2:	83 c4 10             	add    esp,0x10
c0023ae5:	83 c8 ff             	or     eax,0xffffffff
c0023ae8:	83 c4 0c             	add    esp,0xc
c0023aeb:	c3                   	ret    

c0023aec <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c0023aec:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0023af0:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c0023af3:	89 c2                	mov    edx,eax
c0023af5:	c1 ea 08             	shr    edx,0x8
c0023af8:	83 e2 0f             	and    edx,0xf
c0023afb:	fe ca                	dec    dl
c0023afd:	75 31                	jne    c0023b30 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c0023aff:	83 e0 0f             	and    eax,0xf
c0023b02:	3c 03                	cmp    al,0x3
c0023b04:	75 2a                	jne    c0023b30 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c0023b06:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c0023b09:	b8 02 00 00 00       	mov    eax,0x2
c0023b0e:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c0023b14:	74 1c                	je     c0023b32 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c0023b16:	b8 04 00 00 00       	mov    eax,0x4
c0023b1b:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c0023b21:	74 0f                	je     c0023b32 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c0023b23:	31 c0                	xor    eax,eax
c0023b25:	83 fa 03             	cmp    edx,0x3
c0023b28:	0f 94 c0             	sete   al
c0023b2b:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c0023b2f:	c3                   	ret    
c0023b30:	31 c0                	xor    eax,eax
c0023b32:	c3                   	ret    
c0023b33:	90                   	nop

c0023b34 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c0023b34:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0023b38:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023b3b:	0f ba e2 0f          	bt     edx,0xf
c0023b3f:	72 f7                	jb     c0023b38 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c0023b41:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023b44:	83 ca 10             	or     edx,0x10
c0023b47:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0023b4a:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023b4d:	83 ca 01             	or     edx,0x1
c0023b50:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0023b53:	c3                   	ret    

c0023b54 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c0023b54:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0023b58:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023b5b:	83 e2 fe             	and    edx,0xfffffffe
c0023b5e:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0023b61:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023b64:	83 e2 ef             	and    edx,0xffffffef
c0023b67:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0023b6a:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023b6d:	0f ba e2 0e          	bt     edx,0xe
c0023b71:	72 f7                	jb     c0023b6a <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c0023b73:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023b76:	0f ba e2 0f          	bt     edx,0xf
c0023b7a:	72 ee                	jb     c0023b6a <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c0023b7c:	c3                   	ret    
c0023b7d:	90                   	nop

c0023b7e <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c0023b7e:	55                   	push   ebp
c0023b7f:	57                   	push   edi
c0023b80:	56                   	push   esi
c0023b81:	53                   	push   ebx
c0023b82:	83 ec 1c             	sub    esp,0x1c
c0023b85:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0023b89:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0023b8d:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0023b91:	53                   	push   ebx
c0023b92:	89 fd                	mov    ebp,edi
c0023b94:	56                   	push   esi
c0023b95:	c1 e5 0a             	shl    ebp,0xa
c0023b98:	e8 b7 ff ff ff       	call   c0023b54 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c0023b9d:	83 ec 0c             	sub    esp,0xc
c0023ba0:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c0023ba6:	01 e8                	add    eax,ebp
c0023ba8:	89 03                	mov    DWORD PTR [ebx],eax
c0023baa:	8b 03                	mov    eax,DWORD PTR [ebx]
c0023bac:	68 00 04 00 00       	push   0x400
c0023bb1:	6a 00                	push   0x0
c0023bb3:	50                   	push   eax
c0023bb4:	e8 97 cb fd ff       	call   c0000750 <memset>
c0023bb9:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c0023bbf:	89 fa                	mov    edx,edi
c0023bc1:	01 e8                	add    eax,ebp
c0023bc3:	c1 e7 0d             	shl    edi,0xd
c0023bc6:	89 03                	mov    DWORD PTR [ebx],eax
c0023bc8:	c1 e2 08             	shl    edx,0x8
c0023bcb:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0023bd2:	81 c2 00 80 00 00    	add    edx,0x8000
c0023bd8:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0023bdc:	89 d0                	mov    eax,edx
c0023bde:	83 c4 1c             	add    esp,0x1c
c0023be1:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0023be7:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0023bea:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0023bed:	68 00 01 00 00       	push   0x100
c0023bf2:	6a 00                	push   0x0
c0023bf4:	50                   	push   eax
c0023bf5:	e8 56 cb fd ff       	call   c0000750 <memset>
c0023bfa:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0023bfe:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c0023c04:	03 96 5c 01 00 00    	add    edx,DWORD PTR [esi+0x15c]
c0023c0a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0023c0e:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0023c11:	83 c4 10             	add    esp,0x10
c0023c14:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0023c1b:	31 ff                	xor    edi,edi
c0023c1d:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c0023c23:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c0023c29:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0023c2d:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0023c33:	83 c5 20             	add    ebp,0x20
c0023c36:	01 f8                	add    eax,edi
c0023c38:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0023c3b:	52                   	push   edx
c0023c3c:	68 00 01 00 00       	push   0x100
c0023c41:	6a 00                	push   0x0
c0023c43:	50                   	push   eax
c0023c44:	e8 07 cb fd ff       	call   c0000750 <memset>
c0023c49:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0023c4d:	83 c4 10             	add    esp,0x10
c0023c50:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c0023c56:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0023c5d:	01 f8                	add    eax,edi
c0023c5f:	81 c7 00 01 00 00    	add    edi,0x100
c0023c65:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0023c68:	81 ff 00 20 00 00    	cmp    edi,0x2000
c0023c6e:	75 b3                	jne    c0023c23 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa5>
c0023c70:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c0023c74:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0023c78:	83 c4 1c             	add    esp,0x1c
c0023c7b:	5b                   	pop    ebx
c0023c7c:	5e                   	pop    esi
c0023c7d:	5f                   	pop    edi
c0023c7e:	5d                   	pop    ebp
c0023c7f:	e9 b0 fe ff ff       	jmp    c0023b34 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>

c0023c84 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c0023c84:	55                   	push   ebp
c0023c85:	57                   	push   edi
c0023c86:	56                   	push   esi
c0023c87:	53                   	push   ebx
c0023c88:	31 db                	xor    ebx,ebx
c0023c8a:	83 ec 0c             	sub    esp,0xc
c0023c8d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0023c91:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0023c95:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c0023c98:	f7 c7 01 00 00 00    	test   edi,0x1
c0023c9e:	74 7a                	je     c0023d1a <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c0023ca0:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0023ca4:	89 d8                	mov    eax,ebx
c0023ca6:	c1 e0 07             	shl    eax,0x7
c0023ca9:	8d ac 01 00 01 00 00 	lea    ebp,[ecx+eax*1+0x100]
c0023cb0:	55                   	push   ebp
c0023cb1:	56                   	push   esi
c0023cb2:	e8 35 fe ff ff       	call   c0023aec <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c0023cb7:	5a                   	pop    edx
c0023cb8:	83 f8 01             	cmp    eax,0x1
c0023cbb:	59                   	pop    ecx
c0023cbc:	75 21                	jne    c0023cdf <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x5b>
c0023cbe:	50                   	push   eax
c0023cbf:	53                   	push   ebx
c0023cc0:	55                   	push   ebp
c0023cc1:	56                   	push   esi
c0023cc2:	e8 b7 fe ff ff       	call   c0023b7e <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0023cc7:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c0023cce:	e8 c6 b8 fe ff       	call   c000f599 <malloc>
c0023cd3:	89 c5                	mov    ebp,eax
c0023cd5:	89 04 24             	mov    DWORD PTR [esp],eax
c0023cd8:	e8 03 0d 00 00       	call   c00249e0 <SATA::SATA()>
c0023cdd:	eb 24                	jmp    c0023d03 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x7f>
c0023cdf:	83 f8 04             	cmp    eax,0x4
c0023ce2:	75 36                	jne    c0023d1a <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c0023ce4:	51                   	push   ecx
c0023ce5:	53                   	push   ebx
c0023ce6:	55                   	push   ebp
c0023ce7:	56                   	push   esi
c0023ce8:	e8 91 fe ff ff       	call   c0023b7e <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0023ced:	c7 04 24 80 01 00 00 	mov    DWORD PTR [esp],0x180
c0023cf4:	e8 a0 b8 fe ff       	call   c000f599 <malloc>
c0023cf9:	89 c5                	mov    ebp,eax
c0023cfb:	89 04 24             	mov    DWORD PTR [esp],eax
c0023cfe:	e8 53 10 00 00       	call   c0024d56 <SATAPI::SATAPI()>
c0023d03:	58                   	pop    eax
c0023d04:	5a                   	pop    edx
c0023d05:	55                   	push   ebp
c0023d06:	56                   	push   esi
c0023d07:	e8 f6 fd fe ff       	call   c0013b02 <Device::addChild(Device*)>
c0023d0c:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0023d0f:	56                   	push   esi
c0023d10:	6a 00                	push   0x0
c0023d12:	53                   	push   ebx
c0023d13:	55                   	push   ebp
c0023d14:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0023d17:	83 c4 20             	add    esp,0x20
c0023d1a:	d1 ef                	shr    edi,1
c0023d1c:	43                   	inc    ebx
c0023d1d:	83 fb 20             	cmp    ebx,0x20
c0023d20:	0f 85 72 ff ff ff    	jne    c0023c98 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c0023d26:	83 c4 0c             	add    esp,0xc
c0023d29:	5b                   	pop    ebx
c0023d2a:	5e                   	pop    esi
c0023d2b:	5f                   	pop    edi
c0023d2c:	5d                   	pop    ebp
c0023d2d:	c3                   	ret    

c0023d2e <SATABus::open(int, int, void*)>:
c0023d2e:	83 ec 14             	sub    esp,0x14
c0023d31:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023d35:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c0023d3b:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c0023d41:	52                   	push   edx
c0023d42:	50                   	push   eax
c0023d43:	e8 3c ff ff ff       	call   c0023c84 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c0023d48:	31 c0                	xor    eax,eax
c0023d4a:	83 c4 1c             	add    esp,0x1c
c0023d4d:	c3                   	ret    

c0023d4e <ATA::close(int, int, void*)>:
c0023d4e:	83 ec 0c             	sub    esp,0xc
c0023d51:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023d55:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0023d5b:	85 c0                	test   eax,eax
c0023d5d:	74 0c                	je     c0023d6b <ATA::close(int, int, void*)+0x1d>
c0023d5f:	83 ec 0c             	sub    esp,0xc
c0023d62:	8b 10                	mov    edx,DWORD PTR [eax]
c0023d64:	50                   	push   eax
c0023d65:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0023d68:	83 c4 10             	add    esp,0x10
c0023d6b:	31 c0                	xor    eax,eax
c0023d6d:	83 c4 0c             	add    esp,0xc
c0023d70:	c3                   	ret    
c0023d71:	90                   	nop

c0023d72 <ATA::powerSaving(PowerSavingLevel)>:
c0023d72:	c3                   	ret    
c0023d73:	90                   	nop

c0023d74 <ATA::ATA()>:
c0023d74:	83 ec 0c             	sub    esp,0xc
c0023d77:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023d7b:	83 ec 04             	sub    esp,0x4
c0023d7e:	68 00 02 00 00       	push   0x200
c0023d83:	68 b9 c2 02 c0       	push   0xc002c2b9
c0023d88:	50                   	push   eax
c0023d89:	e8 aa 01 ff ff       	call   c0013f38 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0023d8e:	83 c4 10             	add    esp,0x10
c0023d91:	ba 3c c2 02 c0       	mov    edx,0xc002c23c
c0023d96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023d9a:	89 10                	mov    DWORD PTR [eax],edx
c0023d9c:	90                   	nop
c0023d9d:	83 c4 0c             	add    esp,0xc
c0023da0:	c3                   	ret    
c0023da1:	90                   	nop

c0023da2 <ATA::flush(bool)>:
c0023da2:	53                   	push   ebx
c0023da3:	83 ec 08             	sub    esp,0x8
c0023da6:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c0023dab:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0023daf:	19 c0                	sbb    eax,eax
c0023db1:	83 e0 fd             	and    eax,0xfffffffd
c0023db4:	05 ea 00 00 00       	add    eax,0xea
c0023db9:	50                   	push   eax
c0023dba:	6a 07                	push   0x7
c0023dbc:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023dc3:	50                   	push   eax
c0023dc4:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023dca:	e8 53 f1 ff ff       	call   c0022f22 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023dcf:	83 c4 0c             	add    esp,0xc
c0023dd2:	6a 00                	push   0x0
c0023dd4:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023ddb:	50                   	push   eax
c0023ddc:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023de2:	e8 dd fb ff ff       	call   c00239c4 <IDE::polling(unsigned char, unsigned int)>
c0023de7:	83 c4 18             	add    esp,0x18
c0023dea:	5b                   	pop    ebx
c0023deb:	c3                   	ret    

c0023dec <ATA::readyForCommand()>:
c0023dec:	56                   	push   esi
c0023ded:	53                   	push   ebx
c0023dee:	31 db                	xor    ebx,ebx
c0023df0:	50                   	push   eax
c0023df1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0023df5:	50                   	push   eax
c0023df6:	6a 0c                	push   0xc
c0023df8:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c0023dff:	50                   	push   eax
c0023e00:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c0023e06:	e8 d7 f1 ff ff       	call   c0022fe2 <IDE::read(unsigned char, unsigned char)>
c0023e0b:	83 c4 10             	add    esp,0x10
c0023e0e:	a8 88                	test   al,0x88
c0023e10:	74 23                	je     c0023e35 <ATA::readyForCommand()+0x49>
c0023e12:	43                   	inc    ebx
c0023e13:	83 fb 63             	cmp    ebx,0x63
c0023e16:	7e dd                	jle    c0023df5 <ATA::readyForCommand()+0x9>
c0023e18:	51                   	push   ecx
c0023e19:	51                   	push   ecx
c0023e1a:	6a 00                	push   0x0
c0023e1c:	68 40 42 0f 00       	push   0xf4240
c0023e21:	e8 79 9e ff ff       	call   c001dc9f <nanoSleep(unsigned long long)>
c0023e26:	83 c4 10             	add    esp,0x10
c0023e29:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c0023e2f:	75 c4                	jne    c0023df5 <ATA::readyForCommand()+0x9>
c0023e31:	31 c0                	xor    eax,eax
c0023e33:	eb 02                	jmp    c0023e37 <ATA::readyForCommand()+0x4b>
c0023e35:	b0 01                	mov    al,0x1
c0023e37:	5a                   	pop    edx
c0023e38:	5b                   	pop    ebx
c0023e39:	5e                   	pop    esi
c0023e3a:	c3                   	ret    
c0023e3b:	90                   	nop

c0023e3c <ATA::access(unsigned long long, int, void*, bool)>:
c0023e3c:	55                   	push   ebp
c0023e3d:	57                   	push   edi
c0023e3e:	56                   	push   esi
c0023e3f:	53                   	push   ebx
c0023e40:	83 ec 2c             	sub    esp,0x2c
c0023e43:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0023e47:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0023e4b:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0023e4f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0023e53:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0023e57:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0023e5b:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0023e5f:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0023e65:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0023e69:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c0023e6f:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0023e73:	c1 e0 06             	shl    eax,0x6
c0023e76:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c0023e7e:	74 5d                	je     c0023edd <ATA::access(unsigned long long, int, void*, bool)+0xa1>
c0023e80:	89 fa                	mov    edx,edi
c0023e82:	89 f0                	mov    eax,esi
c0023e84:	0f ac d0 1c          	shrd   eax,edx,0x1c
c0023e88:	c1 ea 1c             	shr    edx,0x1c
c0023e8b:	89 d1                	mov    ecx,edx
c0023e8d:	09 c1                	or     ecx,eax
c0023e8f:	74 25                	je     c0023eb6 <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c0023e91:	31 ed                	xor    ebp,ebp
c0023e93:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c0023e9a:	89 fa                	mov    edx,edi
c0023e9c:	89 f0                	mov    eax,esi
c0023e9e:	0f ad d0             	shrd   eax,edx,cl
c0023ea1:	d3 ea                	shr    edx,cl
c0023ea3:	f6 c1 20             	test   cl,0x20
c0023ea6:	74 02                	je     c0023eaa <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c0023ea8:	89 d0                	mov    eax,edx
c0023eaa:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c0023eae:	45                   	inc    ebp
c0023eaf:	83 fd 06             	cmp    ebp,0x6
c0023eb2:	75 df                	jne    c0023e93 <ATA::access(unsigned long long, int, void*, bool)+0x57>
c0023eb4:	eb 76                	jmp    c0023f2c <ATA::access(unsigned long long, int, void*, bool)+0xf0>
c0023eb6:	89 f0                	mov    eax,esi
c0023eb8:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c0023ebd:	89 fa                	mov    edx,edi
c0023ebf:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c0023ec6:	0f ac d0 10          	shrd   eax,edx,0x10
c0023eca:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0023ecf:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0023ed3:	c1 ee 18             	shr    esi,0x18
c0023ed6:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c0023edb:	eb 56                	jmp    c0023f33 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c0023edd:	6a 00                	push   0x0
c0023edf:	6a 3f                	push   0x3f
c0023ee1:	57                   	push   edi
c0023ee2:	56                   	push   esi
c0023ee3:	e8 2c 29 00 00       	call   c0026814 <__umoddi3>
c0023ee8:	83 c4 10             	add    esp,0x10
c0023eeb:	40                   	inc    eax
c0023eec:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c0023ef0:	6a 00                	push   0x0
c0023ef2:	68 f0 03 00 00       	push   0x3f0
c0023ef7:	57                   	push   edi
c0023ef8:	56                   	push   esi
c0023ef9:	e8 16 28 00 00       	call   c0026714 <__udivdi3>
c0023efe:	83 c4 10             	add    esp,0x10
c0023f01:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c0023f06:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c0023f0d:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0023f12:	6a 00                	push   0x0
c0023f14:	6a 3f                	push   0x3f
c0023f16:	57                   	push   edi
c0023f17:	56                   	push   esi
c0023f18:	e8 f7 27 00 00       	call   c0026714 <__udivdi3>
c0023f1d:	83 c4 10             	add    esp,0x10
c0023f20:	89 c6                	mov    esi,eax
c0023f22:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c0023f27:	83 e6 0f             	and    esi,0xf
c0023f2a:	eb 07                	jmp    c0023f33 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c0023f2c:	31 f6                	xor    esi,esi
c0023f2e:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c0023f33:	bf 01 00 00 00       	mov    edi,0x1
c0023f38:	50                   	push   eax
c0023f39:	6a 00                	push   0x0
c0023f3b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023f42:	50                   	push   eax
c0023f43:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0023f47:	e8 e2 f1 ff ff       	call   c002312e <IDE::enableIRQs(unsigned char, bool)>
c0023f4c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0023f4f:	e8 98 fe ff ff       	call   c0023dec <ATA::readyForCommand()>
c0023f54:	83 c4 10             	add    esp,0x10
c0023f57:	84 c0                	test   al,al
c0023f59:	0f 84 5a 02 00 00    	je     c00241b9 <ATA::access(unsigned long long, int, void*, bool)+0x37d>
c0023f5f:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c0023f65:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0023f6b:	c1 e0 04             	shl    eax,0x4
c0023f6e:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c0023f75:	09 c6                	or     esi,eax
c0023f77:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c0023f7c:	75 05                	jne    c0023f83 <ATA::access(unsigned long long, int, void*, bool)+0x147>
c0023f7e:	83 ce a0             	or     esi,0xffffffa0
c0023f81:	eb 03                	jmp    c0023f86 <ATA::access(unsigned long long, int, void*, bool)+0x14a>
c0023f83:	83 ce e0             	or     esi,0xffffffe0
c0023f86:	89 f0                	mov    eax,esi
c0023f88:	0f b6 f0             	movzx  esi,al
c0023f8b:	56                   	push   esi
c0023f8c:	6a 06                	push   0x6
c0023f8e:	51                   	push   ecx
c0023f8f:	52                   	push   edx
c0023f90:	e8 8d ef ff ff       	call   c0022f22 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023f95:	83 c4 10             	add    esp,0x10
c0023f98:	6a 00                	push   0x0
c0023f9a:	6a 01                	push   0x1
c0023f9c:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023fa3:	50                   	push   eax
c0023fa4:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023faa:	e8 73 ef ff ff       	call   c0022f22 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023faf:	83 c4 10             	add    esp,0x10
c0023fb2:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c0023fb7:	75 6e                	jne    c0024027 <ATA::access(unsigned long long, int, void*, bool)+0x1eb>
c0023fb9:	6a 00                	push   0x0
c0023fbb:	6a 08                	push   0x8
c0023fbd:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023fc4:	50                   	push   eax
c0023fc5:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023fcb:	e8 52 ef ff ff       	call   c0022f22 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023fd0:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c0023fd5:	50                   	push   eax
c0023fd6:	6a 09                	push   0x9
c0023fd8:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023fdf:	50                   	push   eax
c0023fe0:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023fe6:	e8 37 ef ff ff       	call   c0022f22 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023feb:	83 c4 20             	add    esp,0x20
c0023fee:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c0023ff3:	50                   	push   eax
c0023ff4:	6a 0a                	push   0xa
c0023ff6:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023ffd:	50                   	push   eax
c0023ffe:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024004:	e8 19 ef ff ff       	call   c0022f22 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024009:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c002400e:	50                   	push   eax
c002400f:	6a 0b                	push   0xb
c0024011:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024018:	50                   	push   eax
c0024019:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002401f:	e8 fe ee ff ff       	call   c0022f22 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024024:	83 c4 20             	add    esp,0x20
c0024027:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c002402c:	50                   	push   eax
c002402d:	6a 02                	push   0x2
c002402f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024036:	50                   	push   eax
c0024037:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002403d:	e8 e0 ee ff ff       	call   c0022f22 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024042:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c0024047:	50                   	push   eax
c0024048:	6a 03                	push   0x3
c002404a:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024051:	50                   	push   eax
c0024052:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024058:	e8 c5 ee ff ff       	call   c0022f22 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002405d:	83 c4 20             	add    esp,0x20
c0024060:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c0024065:	50                   	push   eax
c0024066:	6a 04                	push   0x4
c0024068:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002406f:	50                   	push   eax
c0024070:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024076:	e8 a7 ee ff ff       	call   c0022f22 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002407b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0024080:	50                   	push   eax
c0024081:	6a 05                	push   0x5
c0024083:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002408a:	50                   	push   eax
c002408b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024091:	e8 8c ee ff ff       	call   c0022f22 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024096:	83 c4 20             	add    esp,0x20
c0024099:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c002409e:	0f 94 c0             	sete   al
c00240a1:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c00240a6:	74 09                	je     c00240b1 <ATA::access(unsigned long long, int, void*, bool)+0x275>
c00240a8:	8d 04 85 30 00 00 00 	lea    eax,[eax*4+0x30]
c00240af:	eb 07                	jmp    c00240b8 <ATA::access(unsigned long long, int, void*, bool)+0x27c>
c00240b1:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c00240b8:	0f b6 c0             	movzx  eax,al
c00240bb:	50                   	push   eax
c00240bc:	6a 07                	push   0x7
c00240be:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00240c5:	50                   	push   eax
c00240c6:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00240cc:	e8 51 ee ff ff       	call   c0022f22 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00240d1:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c00240d5:	83 c4 10             	add    esp,0x10
c00240d8:	85 f6                	test   esi,esi
c00240da:	0f 84 ba 00 00 00    	je     c002419a <ATA::access(unsigned long long, int, void*, bool)+0x35e>
c00240e0:	50                   	push   eax
c00240e1:	6a 01                	push   0x1
c00240e3:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00240ea:	50                   	push   eax
c00240eb:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00240f1:	e8 ce f8 ff ff       	call   c00239c4 <IDE::polling(unsigned char, unsigned int)>
c00240f6:	83 c4 10             	add    esp,0x10
c00240f9:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c00240ff:	84 c0                	test   al,al
c0024101:	74 2c                	je     c002412f <ATA::access(unsigned long long, int, void*, bool)+0x2f3>
c0024103:	0f b6 f8             	movzx  edi,al
c0024106:	0f b6 d2             	movzx  edx,dl
c0024109:	57                   	push   edi
c002410a:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c0024111:	50                   	push   eax
c0024112:	52                   	push   edx
c0024113:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024119:	e8 f6 f7 ff ff       	call   c0023914 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c002411e:	c7 04 24 14 c2 02 c0 	mov    DWORD PTR [esp],0xc002c214
c0024125:	e8 9f e5 fe ff       	call   c00126c9 <Dbg::kprintf(char const*, ...)>
c002412a:	e9 87 00 00 00       	jmp    c00241b6 <ATA::access(unsigned long long, int, void*, bool)+0x37a>
c002412f:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0024134:	74 33                	je     c0024169 <ATA::access(unsigned long long, int, void*, bool)+0x32d>
c0024136:	31 ed                	xor    ebp,ebp
c0024138:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c002413c:	66 8b 3c 68          	mov    di,WORD PTR [eax+ebp*2]
c0024140:	50                   	push   eax
c0024141:	50                   	push   eax
c0024142:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024149:	50                   	push   eax
c002414a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024150:	e8 bb ed ff ff       	call   c0022f10 <IDE::getBase(unsigned char)>
c0024155:	89 c2                	mov    edx,eax
c0024157:	89 f8                	mov    eax,edi
c0024159:	66 ef                	out    dx,ax
c002415b:	45                   	inc    ebp
c002415c:	83 c4 10             	add    esp,0x10
c002415f:	81 fd 00 01 00 00    	cmp    ebp,0x100
c0024165:	75 d1                	jne    c0024138 <ATA::access(unsigned long long, int, void*, bool)+0x2fc>
c0024167:	eb 23                	jmp    c002418c <ATA::access(unsigned long long, int, void*, bool)+0x350>
c0024169:	0f b6 d2             	movzx  edx,dl
c002416c:	51                   	push   ecx
c002416d:	51                   	push   ecx
c002416e:	52                   	push   edx
c002416f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024175:	e8 96 ed ff ff       	call   c0022f10 <IDE::getBase(unsigned char)>
c002417a:	b9 00 01 00 00       	mov    ecx,0x100
c002417f:	89 c2                	mov    edx,eax
c0024181:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c0024185:	fc                   	cld    
c0024186:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c0024189:	83 c4 10             	add    esp,0x10
c002418c:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c0024194:	4e                   	dec    esi
c0024195:	e9 3e ff ff ff       	jmp    c00240d8 <ATA::access(unsigned long long, int, void*, bool)+0x29c>
c002419a:	31 ff                	xor    edi,edi
c002419c:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c00241a1:	74 16                	je     c00241b9 <ATA::access(unsigned long long, int, void*, bool)+0x37d>
c00241a3:	50                   	push   eax
c00241a4:	50                   	push   eax
c00241a5:	31 c0                	xor    eax,eax
c00241a7:	80 7c 24 16 02       	cmp    BYTE PTR [esp+0x16],0x2
c00241ac:	0f 94 c0             	sete   al
c00241af:	50                   	push   eax
c00241b0:	53                   	push   ebx
c00241b1:	e8 ec fb ff ff       	call   c0023da2 <ATA::flush(bool)>
c00241b6:	83 c4 10             	add    esp,0x10
c00241b9:	83 c4 2c             	add    esp,0x2c
c00241bc:	89 f8                	mov    eax,edi
c00241be:	5b                   	pop    ebx
c00241bf:	5e                   	pop    esi
c00241c0:	5f                   	pop    edi
c00241c1:	5d                   	pop    ebp
c00241c2:	c3                   	ret    
c00241c3:	90                   	nop

c00241c4 <ATA::read(unsigned long long, int, void*)>:
c00241c4:	57                   	push   edi
c00241c5:	b8 04 00 00 00       	mov    eax,0x4
c00241ca:	56                   	push   esi
c00241cb:	53                   	push   ebx
c00241cc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00241d0:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00241d4:	8d 7a ff             	lea    edi,[edx-0x1]
c00241d7:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00241db:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00241df:	81 ff fe 00 00 00    	cmp    edi,0xfe
c00241e5:	77 25                	ja     c002420c <ATA::read(unsigned long long, int, void*)+0x48>
c00241e7:	b8 06 00 00 00       	mov    eax,0x6
c00241ec:	85 f6                	test   esi,esi
c00241ee:	74 1c                	je     c002420c <ATA::read(unsigned long long, int, void*)+0x48>
c00241f0:	50                   	push   eax
c00241f1:	50                   	push   eax
c00241f2:	6a 00                	push   0x0
c00241f4:	56                   	push   esi
c00241f5:	52                   	push   edx
c00241f6:	53                   	push   ebx
c00241f7:	51                   	push   ecx
c00241f8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00241fc:	e8 3b fc ff ff       	call   c0023e3c <ATA::access(unsigned long long, int, void*, bool)>
c0024201:	83 c4 20             	add    esp,0x20
c0024204:	85 c0                	test   eax,eax
c0024206:	0f 95 c0             	setne  al
c0024209:	0f b6 c0             	movzx  eax,al
c002420c:	5b                   	pop    ebx
c002420d:	5e                   	pop    esi
c002420e:	5f                   	pop    edi
c002420f:	c3                   	ret    

c0024210 <ATA::write(unsigned long long, int, void*)>:
c0024210:	57                   	push   edi
c0024211:	b8 04 00 00 00       	mov    eax,0x4
c0024216:	56                   	push   esi
c0024217:	53                   	push   ebx
c0024218:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c002421c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0024220:	8d 7a ff             	lea    edi,[edx-0x1]
c0024223:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0024227:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c002422b:	81 ff fe 00 00 00    	cmp    edi,0xfe
c0024231:	77 25                	ja     c0024258 <ATA::write(unsigned long long, int, void*)+0x48>
c0024233:	b8 06 00 00 00       	mov    eax,0x6
c0024238:	85 f6                	test   esi,esi
c002423a:	74 1c                	je     c0024258 <ATA::write(unsigned long long, int, void*)+0x48>
c002423c:	50                   	push   eax
c002423d:	50                   	push   eax
c002423e:	6a 01                	push   0x1
c0024240:	56                   	push   esi
c0024241:	52                   	push   edx
c0024242:	53                   	push   ebx
c0024243:	51                   	push   ecx
c0024244:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0024248:	e8 ef fb ff ff       	call   c0023e3c <ATA::access(unsigned long long, int, void*, bool)>
c002424d:	83 c4 20             	add    esp,0x20
c0024250:	85 c0                	test   eax,eax
c0024252:	0f 95 c0             	setne  al
c0024255:	0f b6 c0             	movzx  eax,al
c0024258:	5b                   	pop    ebx
c0024259:	5e                   	pop    esi
c002425a:	5f                   	pop    edi
c002425b:	c3                   	ret    

c002425c <ATA::detectCHS()>:
c002425c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0024260:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c0024266:	c1 e0 06             	shl    eax,0x6
c0024269:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c002426f:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c0024279:	c7 44 24 04 1f c2 02 c0 	mov    DWORD PTR [esp+0x4],0xc002c21f
c0024281:	e9 af 5b ff ff       	jmp    c0019e35 <Krnl::panic(char const*)>

c0024286 <ATA::open(int, int, void*)>:
c0024286:	53                   	push   ebx
c0024287:	83 ec 08             	sub    esp,0x8
c002428a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002428e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0024292:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0024296:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c002429c:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c00242a2:	c1 e0 06             	shl    eax,0x6
c00242a5:	01 d0                	add    eax,edx
c00242a7:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c00242ae:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c00242b4:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c00242bb:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c00242c5:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c00242cb:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c00242d2:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c00242d9:	75 0c                	jne    c00242e7 <ATA::open(int, int, void*)+0x61>
c00242db:	83 ec 0c             	sub    esp,0xc
c00242de:	53                   	push   ebx
c00242df:	e8 78 ff ff ff       	call   c002425c <ATA::detectCHS()>
c00242e4:	83 c4 10             	add    esp,0x10
c00242e7:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c00242ed:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c00242f3:	c1 e0 06             	shl    eax,0x6
c00242f6:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c00242fd:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0024307:	d1 e8                	shr    eax,1
c0024309:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c002430f:	6a 04                	push   0x4
c0024311:	6a 0c                	push   0xc
c0024313:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002431a:	50                   	push   eax
c002431b:	52                   	push   edx
c002431c:	e8 01 ec ff ff       	call   c0022f22 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024321:	90                   	nop
c0024322:	90                   	nop
c0024323:	6a 00                	push   0x0
c0024325:	6a 0c                	push   0xc
c0024327:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002432e:	50                   	push   eax
c002432f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024335:	e8 e8 eb ff ff       	call   c0022f22 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002433a:	83 c4 14             	add    esp,0x14
c002433d:	53                   	push   ebx
c002433e:	e8 5d fc fe ff       	call   c0013fa0 <PhysicalDisk::startCache()>
c0024343:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024346:	e8 d7 1e ff ff       	call   c0016222 <createPartitionsForDisk(PhysicalDisk*)>
c002434b:	31 c0                	xor    eax,eax
c002434d:	83 c4 18             	add    esp,0x18
c0024350:	5b                   	pop    ebx
c0024351:	c3                   	ret    

c0024352 <ATAPI::write(unsigned long long, int, void*)>:
c0024352:	b8 03 00 00 00       	mov    eax,0x3
c0024357:	c3                   	ret    

c0024358 <ATAPI::close(int, int, void*)>:
c0024358:	83 ec 0c             	sub    esp,0xc
c002435b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002435f:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0024365:	85 c0                	test   eax,eax
c0024367:	74 0c                	je     c0024375 <ATAPI::close(int, int, void*)+0x1d>
c0024369:	83 ec 0c             	sub    esp,0xc
c002436c:	8b 10                	mov    edx,DWORD PTR [eax]
c002436e:	50                   	push   eax
c002436f:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0024372:	83 c4 10             	add    esp,0x10
c0024375:	31 c0                	xor    eax,eax
c0024377:	83 c4 0c             	add    esp,0xc
c002437a:	c3                   	ret    
c002437b:	90                   	nop

c002437c <ATAPI::ATAPI()>:
c002437c:	83 ec 0c             	sub    esp,0xc
c002437f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024383:	83 ec 04             	sub    esp,0x4
c0024386:	68 00 08 00 00       	push   0x800
c002438b:	68 59 c3 02 c0       	push   0xc002c359
c0024390:	50                   	push   eax
c0024391:	e8 a2 fb fe ff       	call   c0013f38 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0024396:	83 c4 10             	add    esp,0x10
c0024399:	ba 74 c2 02 c0       	mov    edx,0xc002c274
c002439e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00243a2:	89 10                	mov    DWORD PTR [eax],edx
c00243a4:	90                   	nop
c00243a5:	83 c4 0c             	add    esp,0xc
c00243a8:	c3                   	ret    
c00243a9:	90                   	nop

c00243aa <ATAPI::readyForCommand()>:
c00243aa:	56                   	push   esi
c00243ab:	53                   	push   ebx
c00243ac:	31 db                	xor    ebx,ebx
c00243ae:	50                   	push   eax
c00243af:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00243b3:	50                   	push   eax
c00243b4:	6a 0c                	push   0xc
c00243b6:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c00243bd:	50                   	push   eax
c00243be:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c00243c4:	e8 19 ec ff ff       	call   c0022fe2 <IDE::read(unsigned char, unsigned char)>
c00243c9:	83 c4 10             	add    esp,0x10
c00243cc:	a8 88                	test   al,0x88
c00243ce:	74 23                	je     c00243f3 <ATAPI::readyForCommand()+0x49>
c00243d0:	43                   	inc    ebx
c00243d1:	83 fb 63             	cmp    ebx,0x63
c00243d4:	7e dd                	jle    c00243b3 <ATAPI::readyForCommand()+0x9>
c00243d6:	51                   	push   ecx
c00243d7:	51                   	push   ecx
c00243d8:	6a 00                	push   0x0
c00243da:	68 40 42 0f 00       	push   0xf4240
c00243df:	e8 bb 98 ff ff       	call   c001dc9f <nanoSleep(unsigned long long)>
c00243e4:	83 c4 10             	add    esp,0x10
c00243e7:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c00243ed:	75 c4                	jne    c00243b3 <ATAPI::readyForCommand()+0x9>
c00243ef:	31 c0                	xor    eax,eax
c00243f1:	eb 02                	jmp    c00243f5 <ATAPI::readyForCommand()+0x4b>
c00243f3:	b0 01                	mov    al,0x1
c00243f5:	5a                   	pop    edx
c00243f6:	5b                   	pop    ebx
c00243f7:	5e                   	pop    esi
c00243f8:	c3                   	ret    
c00243f9:	90                   	nop

c00243fa <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c00243fa:	55                   	push   ebp
c00243fb:	57                   	push   edi
c00243fc:	56                   	push   esi
c00243fd:	53                   	push   ebx
c00243fe:	83 ec 20             	sub    esp,0x20
c0024401:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0024405:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c0024409:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c002440d:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0024411:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0024415:	6a 01                	push   0x1
c0024417:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002441e:	50                   	push   eax
c002441f:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024425:	e8 04 ed ff ff       	call   c002312e <IDE::enableIRQs(unsigned char, bool)>
c002442a:	5e                   	pop    esi
c002442b:	58                   	pop    eax
c002442c:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024433:	50                   	push   eax
c0024434:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002443a:	e8 bd ea ff ff       	call   c0022efc <IDE::prepareInterrupt(unsigned char)>
c002443f:	89 3c 24             	mov    DWORD PTR [esp],edi
c0024442:	e8 63 ff ff ff       	call   c00243aa <ATAPI::readyForCommand()>
c0024447:	83 c4 10             	add    esp,0x10
c002444a:	84 c0                	test   al,al
c002444c:	75 0a                	jne    c0024458 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c002444e:	bb 01 00 00 00       	mov    ebx,0x1
c0024453:	e9 57 02 00 00       	jmp    c00246af <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0024458:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c002445e:	c1 e0 04             	shl    eax,0x4
c0024461:	0f b6 c0             	movzx  eax,al
c0024464:	50                   	push   eax
c0024465:	6a 06                	push   0x6
c0024467:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002446e:	50                   	push   eax
c002446f:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024475:	e8 a8 ea ff ff       	call   c0022f22 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002447a:	6a 00                	push   0x0
c002447c:	6a 01                	push   0x1
c002447e:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024485:	50                   	push   eax
c0024486:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002448c:	e8 91 ea ff ff       	call   c0022f22 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024491:	83 c4 20             	add    esp,0x20
c0024494:	0f b6 c3             	movzx  eax,bl
c0024497:	0f b6 df             	movzx  ebx,bh
c002449a:	50                   	push   eax
c002449b:	6a 04                	push   0x4
c002449d:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00244a4:	50                   	push   eax
c00244a5:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00244ab:	e8 72 ea ff ff       	call   c0022f22 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00244b0:	53                   	push   ebx
c00244b1:	6a 05                	push   0x5
c00244b3:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00244ba:	50                   	push   eax
c00244bb:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00244c1:	e8 5c ea ff ff       	call   c0022f22 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00244c6:	83 c4 20             	add    esp,0x20
c00244c9:	68 a0 00 00 00       	push   0xa0
c00244ce:	6a 07                	push   0x7
c00244d0:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00244d7:	50                   	push   eax
c00244d8:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00244de:	e8 3f ea ff ff       	call   c0022f22 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00244e3:	83 c4 0c             	add    esp,0xc
c00244e6:	6a 01                	push   0x1
c00244e8:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00244ef:	50                   	push   eax
c00244f0:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00244f6:	e8 c9 f4 ff ff       	call   c00239c4 <IDE::polling(unsigned char, unsigned int)>
c00244fb:	83 c4 10             	add    esp,0x10
c00244fe:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c0024504:	84 c0                	test   al,al
c0024506:	74 23                	je     c002452b <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c0024508:	0f b6 d8             	movzx  ebx,al
c002450b:	0f b6 d2             	movzx  edx,dl
c002450e:	53                   	push   ebx
c002450f:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c0024516:	50                   	push   eax
c0024517:	52                   	push   edx
c0024518:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002451e:	e8 f1 f3 ff ff       	call   c0023914 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c0024523:	83 c4 10             	add    esp,0x10
c0024526:	e9 84 01 00 00       	jmp    c00246af <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c002452b:	0f b6 d2             	movzx  edx,dl
c002452e:	53                   	push   ebx
c002452f:	53                   	push   ebx
c0024530:	52                   	push   edx
c0024531:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024537:	e8 d4 e9 ff ff       	call   c0022f10 <IDE::getBase(unsigned char)>
c002453c:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0024540:	b9 06 00 00 00       	mov    ecx,0x6
c0024545:	89 c2                	mov    edx,eax
c0024547:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c002454a:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c002454e:	83 c4 10             	add    esp,0x10
c0024551:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0024557:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c002455e:	85 db                	test   ebx,ebx
c0024560:	0f 84 ec 00 00 00    	je     c0024652 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c0024566:	51                   	push   ecx
c0024567:	51                   	push   ecx
c0024568:	52                   	push   edx
c0024569:	50                   	push   eax
c002456a:	e8 21 eb ff ff       	call   c0023090 <IDE::waitInterrupt(unsigned char)>
c002456f:	83 c4 10             	add    esp,0x10
c0024572:	84 c0                	test   al,al
c0024574:	0f 84 d4 fe ff ff    	je     c002444e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c002457a:	56                   	push   esi
c002457b:	56                   	push   esi
c002457c:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024583:	50                   	push   eax
c0024584:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002458a:	e8 6d e9 ff ff       	call   c0022efc <IDE::prepareInterrupt(unsigned char)>
c002458f:	83 c4 0c             	add    esp,0xc
c0024592:	6a 04                	push   0x4
c0024594:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002459b:	50                   	push   eax
c002459c:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00245a2:	e8 3b ea ff ff       	call   c0022fe2 <IDE::read(unsigned char, unsigned char)>
c00245a7:	83 c4 0c             	add    esp,0xc
c00245aa:	89 c6                	mov    esi,eax
c00245ac:	6a 05                	push   0x5
c00245ae:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00245b5:	50                   	push   eax
c00245b6:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00245bc:	e8 21 ea ff ff       	call   c0022fe2 <IDE::read(unsigned char, unsigned char)>
c00245c1:	89 f1                	mov    ecx,esi
c00245c3:	0f b6 c0             	movzx  eax,al
c00245c6:	0f b6 f1             	movzx  esi,cl
c00245c9:	c1 e0 08             	shl    eax,0x8
c00245cc:	09 c6                	or     esi,eax
c00245ce:	d1 fe                	sar    esi,1
c00245d0:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c00245d4:	83 c4 10             	add    esp,0x10
c00245d7:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00245dc:	74 41                	je     c002461f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x225>
c00245de:	31 c9                	xor    ecx,ecx
c00245e0:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c00245e6:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c00245ed:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c00245f1:	75 0a                	jne    c00245fd <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x203>
c00245f3:	01 c9                	add    ecx,ecx
c00245f5:	01 cd                	add    ebp,ecx
c00245f7:	4b                   	dec    ebx
c00245f8:	e9 54 ff ff ff       	jmp    c0024551 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c00245fd:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c0024602:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0024606:	51                   	push   ecx
c0024607:	51                   	push   ecx
c0024608:	52                   	push   edx
c0024609:	50                   	push   eax
c002460a:	e8 01 e9 ff ff       	call   c0022f10 <IDE::getBase(unsigned char)>
c002460f:	89 c2                	mov    edx,eax
c0024611:	89 f0                	mov    eax,esi
c0024613:	66 ef                	out    dx,ax
c0024615:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0024619:	83 c4 10             	add    esp,0x10
c002461c:	41                   	inc    ecx
c002461d:	eb c1                	jmp    c00245e0 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e6>
c002461f:	31 f6                	xor    esi,esi
c0024621:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0024627:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c002462e:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c0024632:	75 06                	jne    c002463a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x240>
c0024634:	01 f6                	add    esi,esi
c0024636:	01 f5                	add    ebp,esi
c0024638:	eb bd                	jmp    c00245f7 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fd>
c002463a:	51                   	push   ecx
c002463b:	51                   	push   ecx
c002463c:	52                   	push   edx
c002463d:	50                   	push   eax
c002463e:	e8 cd e8 ff ff       	call   c0022f10 <IDE::getBase(unsigned char)>
c0024643:	89 c2                	mov    edx,eax
c0024645:	66 ed                	in     ax,dx
c0024647:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c002464c:	83 c4 10             	add    esp,0x10
c002464f:	46                   	inc    esi
c0024650:	eb cf                	jmp    c0024621 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x227>
c0024652:	51                   	push   ecx
c0024653:	51                   	push   ecx
c0024654:	52                   	push   edx
c0024655:	50                   	push   eax
c0024656:	e8 35 ea ff ff       	call   c0023090 <IDE::waitInterrupt(unsigned char)>
c002465b:	83 c4 10             	add    esp,0x10
c002465e:	84 c0                	test   al,al
c0024660:	0f 84 e8 fd ff ff    	je     c002444e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c0024666:	bb a0 86 01 00       	mov    ebx,0x186a0
c002466b:	52                   	push   edx
c002466c:	52                   	push   edx
c002466d:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024674:	50                   	push   eax
c0024675:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002467b:	e8 7c e8 ff ff       	call   c0022efc <IDE::prepareInterrupt(unsigned char)>
c0024680:	83 c4 10             	add    esp,0x10
c0024683:	50                   	push   eax
c0024684:	50                   	push   eax
c0024685:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002468c:	50                   	push   eax
c002468d:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024693:	e8 78 e8 ff ff       	call   c0022f10 <IDE::getBase(unsigned char)>
c0024698:	8d 50 07             	lea    edx,[eax+0x7]
c002469b:	ec                   	in     al,dx
c002469c:	83 c4 10             	add    esp,0x10
c002469f:	a8 88                	test   al,0x88
c00246a1:	74 0a                	je     c00246ad <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c00246a3:	4b                   	dec    ebx
c00246a4:	75 dd                	jne    c0024683 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c00246a6:	bb 02 00 00 00       	mov    ebx,0x2
c00246ab:	eb 02                	jmp    c00246af <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c00246ad:	31 db                	xor    ebx,ebx
c00246af:	83 c4 1c             	add    esp,0x1c
c00246b2:	89 d8                	mov    eax,ebx
c00246b4:	5b                   	pop    ebx
c00246b5:	5e                   	pop    esi
c00246b6:	5f                   	pop    edi
c00246b7:	5d                   	pop    ebp
c00246b8:	c3                   	ret    
c00246b9:	90                   	nop

c00246ba <ATAPI::diskRemoved()>:
c00246ba:	83 ec 18             	sub    esp,0x18
c00246bd:	68 65 c3 02 c0       	push   0xc002c365
c00246c2:	e8 02 e0 fe ff       	call   c00126c9 <Dbg::kprintf(char const*, ...)>
c00246c7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00246cb:	c6 80 7c 01 00 00 00 	mov    BYTE PTR [eax+0x17c],0x0
c00246d2:	83 c4 1c             	add    esp,0x1c
c00246d5:	c3                   	ret    

c00246d6 <ATAPI::eject()>:
c00246d6:	57                   	push   edi
c00246d7:	b9 03 00 00 00       	mov    ecx,0x3
c00246dc:	53                   	push   ebx
c00246dd:	83 ec 14             	sub    esp,0x14
c00246e0:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00246e4:	8d 7c 24 04          	lea    edi,[esp+0x4]
c00246e8:	fc                   	cld    
c00246e9:	31 c0                	xor    eax,eax
c00246eb:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00246ed:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c00246f2:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c00246f7:	50                   	push   eax
c00246f8:	50                   	push   eax
c00246f9:	6a 00                	push   0x0
c00246fb:	6a 00                	push   0x0
c00246fd:	6a 00                	push   0x0
c00246ff:	6a 02                	push   0x2
c0024701:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0024705:	50                   	push   eax
c0024706:	53                   	push   ebx
c0024707:	e8 ee fc ff ff       	call   c00243fa <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c002470c:	83 c4 14             	add    esp,0x14
c002470f:	53                   	push   ebx
c0024710:	e8 a5 ff ff ff       	call   c00246ba <ATAPI::diskRemoved()>
c0024715:	83 c4 24             	add    esp,0x24
c0024718:	31 c0                	xor    eax,eax
c002471a:	5b                   	pop    ebx
c002471b:	5f                   	pop    edi
c002471c:	c3                   	ret    
c002471d:	90                   	nop

c002471e <ATAPI::diskInserted()>:
c002471e:	53                   	push   ebx
c002471f:	83 ec 14             	sub    esp,0x14
c0024722:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0024726:	68 7c c3 02 c0       	push   0xc002c37c
c002472b:	e8 99 df fe ff       	call   c00126c9 <Dbg::kprintf(char const*, ...)>
c0024730:	c6 83 7c 01 00 00 01 	mov    BYTE PTR [ebx+0x17c],0x1
c0024737:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002473a:	e8 61 f8 fe ff       	call   c0013fa0 <PhysicalDisk::startCache()>
c002473f:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0024743:	83 c4 18             	add    esp,0x18
c0024746:	5b                   	pop    ebx
c0024747:	e9 d6 1a ff ff       	jmp    c0016222 <createPartitionsForDisk(PhysicalDisk*)>

c002474c <ATAPI::detectMedia()>:
c002474c:	56                   	push   esi
c002474d:	53                   	push   ebx
c002474e:	83 ec 28             	sub    esp,0x28
c0024751:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0024755:	6a 0c                	push   0xc
c0024757:	6a 00                	push   0x0
c0024759:	8d 74 24 0e          	lea    esi,[esp+0xe]
c002475d:	56                   	push   esi
c002475e:	e8 ed bf fd ff       	call   c0000750 <memset>
c0024763:	58                   	pop    eax
c0024764:	5a                   	pop    edx
c0024765:	6a 00                	push   0x0
c0024767:	6a 00                	push   0x0
c0024769:	6a 00                	push   0x0
c002476b:	6a 00                	push   0x0
c002476d:	56                   	push   esi
c002476e:	53                   	push   ebx
c002476f:	e8 86 fc ff ff       	call   c00243fa <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0024774:	83 c4 1c             	add    esp,0x1c
c0024777:	6a 0c                	push   0xc
c0024779:	6a 00                	push   0x0
c002477b:	56                   	push   esi
c002477c:	e8 cf bf fd ff       	call   c0000750 <memset>
c0024781:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c0024786:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c002478b:	59                   	pop    ecx
c002478c:	58                   	pop    eax
c002478d:	6a 01                	push   0x1
c002478f:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c0024793:	50                   	push   eax
c0024794:	6a 00                	push   0x0
c0024796:	6a 12                	push   0x12
c0024798:	56                   	push   esi
c0024799:	53                   	push   ebx
c002479a:	e8 5b fc ff ff       	call   c00243fa <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c002479f:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c00247a3:	83 c4 20             	add    esp,0x20
c00247a6:	83 e0 7f             	and    eax,0x7f
c00247a9:	3c 70                	cmp    al,0x70
c00247ab:	74 15                	je     c00247c2 <ATAPI::detectMedia()+0x76>
c00247ad:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c00247b4:	75 0c                	jne    c00247c2 <ATAPI::detectMedia()+0x76>
c00247b6:	83 ec 0c             	sub    esp,0xc
c00247b9:	53                   	push   ebx
c00247ba:	e8 5f ff ff ff       	call   c002471e <ATAPI::diskInserted()>
c00247bf:	83 c4 10             	add    esp,0x10
c00247c2:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c00247c6:	83 e0 0f             	and    eax,0xf
c00247c9:	3c 02                	cmp    al,0x2
c00247cb:	75 1b                	jne    c00247e8 <ATAPI::detectMedia()+0x9c>
c00247cd:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c00247d2:	75 2d                	jne    c0024801 <ATAPI::detectMedia()+0xb5>
c00247d4:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c00247db:	74 24                	je     c0024801 <ATAPI::detectMedia()+0xb5>
c00247dd:	83 ec 0c             	sub    esp,0xc
c00247e0:	53                   	push   ebx
c00247e1:	e8 d4 fe ff ff       	call   c00246ba <ATAPI::diskRemoved()>
c00247e6:	eb 16                	jmp    c00247fe <ATAPI::detectMedia()+0xb2>
c00247e8:	84 c0                	test   al,al
c00247ea:	75 15                	jne    c0024801 <ATAPI::detectMedia()+0xb5>
c00247ec:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c00247f3:	75 0c                	jne    c0024801 <ATAPI::detectMedia()+0xb5>
c00247f5:	83 ec 0c             	sub    esp,0xc
c00247f8:	53                   	push   ebx
c00247f9:	e8 20 ff ff ff       	call   c002471e <ATAPI::diskInserted()>
c00247fe:	83 c4 10             	add    esp,0x10
c0024801:	83 c4 24             	add    esp,0x24
c0024804:	5b                   	pop    ebx
c0024805:	5e                   	pop    esi
c0024806:	c3                   	ret    
c0024807:	90                   	nop

c0024808 <ATAPI::open(int, int, void*)>:
c0024808:	53                   	push   ebx
c0024809:	83 ec 08             	sub    esp,0x8
c002480c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0024810:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0024814:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0024818:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c002481e:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0024824:	c1 e0 06             	shl    eax,0x6
c0024827:	01 d0                	add    eax,edx
c0024829:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c0024830:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c0024836:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c002483d:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c0024847:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c002484d:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c0024854:	6a 04                	push   0x4
c0024856:	6a 0c                	push   0xc
c0024858:	51                   	push   ecx
c0024859:	52                   	push   edx
c002485a:	e8 c3 e6 ff ff       	call   c0022f22 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002485f:	90                   	nop
c0024860:	90                   	nop
c0024861:	6a 00                	push   0x0
c0024863:	6a 0c                	push   0xc
c0024865:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002486c:	50                   	push   eax
c002486d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024873:	e8 aa e6 ff ff       	call   c0022f22 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024878:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c002487f:	83 c4 14             	add    esp,0x14
c0024882:	53                   	push   ebx
c0024883:	e8 c4 fe ff ff       	call   c002474c <ATAPI::detectMedia()>
c0024888:	31 c0                	xor    eax,eax
c002488a:	83 c4 18             	add    esp,0x18
c002488d:	5b                   	pop    ebx
c002488e:	c3                   	ret    
c002488f:	90                   	nop

c0024890 <ATAPI::read(unsigned long long, int, void*)>:
c0024890:	55                   	push   ebp
c0024891:	57                   	push   edi
c0024892:	56                   	push   esi
c0024893:	53                   	push   ebx
c0024894:	83 ec 1c             	sub    esp,0x1c
c0024897:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c002489b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002489f:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c00248a3:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c00248aa:	74 41                	je     c00248ed <ATAPI::read(unsigned long long, int, void*)+0x5d>
c00248ac:	8d 7c 24 04          	lea    edi,[esp+0x4]
c00248b0:	b9 03 00 00 00       	mov    ecx,0x3
c00248b5:	fc                   	cld    
c00248b6:	31 c0                	xor    eax,eax
c00248b8:	86 fb                	xchg   bl,bh
c00248ba:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00248bc:	c1 c3 10             	rol    ebx,0x10
c00248bf:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c00248c4:	89 e8                	mov    eax,ebp
c00248c6:	86 fb                	xchg   bl,bh
c00248c8:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c00248cc:	89 5c 24 06          	mov    DWORD PTR [esp+0x6],ebx
c00248d0:	50                   	push   eax
c00248d1:	50                   	push   eax
c00248d2:	55                   	push   ebp
c00248d3:	c1 e5 0b             	shl    ebp,0xb
c00248d6:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00248da:	6a 00                	push   0x0
c00248dc:	55                   	push   ebp
c00248dd:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00248e1:	50                   	push   eax
c00248e2:	56                   	push   esi
c00248e3:	e8 12 fb ff ff       	call   c00243fa <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c00248e8:	83 c4 20             	add    esp,0x20
c00248eb:	eb 1a                	jmp    c0024907 <ATAPI::read(unsigned long long, int, void*)+0x77>
c00248ed:	83 ec 0c             	sub    esp,0xc
c00248f0:	56                   	push   esi
c00248f1:	e8 56 fe ff ff       	call   c002474c <ATAPI::detectMedia()>
c00248f6:	83 c4 10             	add    esp,0x10
c00248f9:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c0024900:	75 aa                	jne    c00248ac <ATAPI::read(unsigned long long, int, void*)+0x1c>
c0024902:	b8 02 00 00 00       	mov    eax,0x2
c0024907:	83 c4 1c             	add    esp,0x1c
c002490a:	5b                   	pop    ebx
c002490b:	5e                   	pop    esi
c002490c:	5f                   	pop    edi
c002490d:	5d                   	pop    ebp
c002490e:	c3                   	ret    
c002490f:	90                   	nop

c0024910 <SATA::close(int, int, void*)>:
c0024910:	83 ec 0c             	sub    esp,0xc
c0024913:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024917:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c002491d:	85 c0                	test   eax,eax
c002491f:	74 0c                	je     c002492d <SATA::close(int, int, void*)+0x1d>
c0024921:	83 ec 0c             	sub    esp,0xc
c0024924:	8b 10                	mov    edx,DWORD PTR [eax]
c0024926:	50                   	push   eax
c0024927:	ff 52 04             	call   DWORD PTR [edx+0x4]
c002492a:	83 c4 10             	add    esp,0x10
c002492d:	31 c0                	xor    eax,eax
c002492f:	83 c4 0c             	add    esp,0xc
c0024932:	c3                   	ret    
c0024933:	90                   	nop

c0024934 <SATA::powerSaving(PowerSavingLevel)>:
c0024934:	c3                   	ret    
c0024935:	90                   	nop

c0024936 <SATA::open(int, int, void*)>:
c0024936:	56                   	push   esi
c0024937:	53                   	push   ebx
c0024938:	50                   	push   eax
c0024939:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002493d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0024941:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c002494b:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c0024951:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c002495b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002495f:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0024969:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c002496f:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c0024976:	e8 1a b0 fe ff       	call   c000f995 <Phys::allocatePage()>
c002497b:	89 c6                	mov    esi,eax
c002497d:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c0024983:	81 c6 00 10 00 00    	add    esi,0x1000
c0024989:	e8 07 b0 fe ff       	call   c000f995 <Phys::allocatePage()>
c002498e:	39 c6                	cmp    esi,eax
c0024990:	74 10                	je     c00249a2 <SATA::open(int, int, void*)+0x6c>
c0024992:	83 ec 0c             	sub    esp,0xc
c0024995:	68 a4 c2 02 c0       	push   0xc002c2a4
c002499a:	e8 96 54 ff ff       	call   c0019e35 <Krnl::panic(char const*)>
c002499f:	83 c4 10             	add    esp,0x10
c00249a2:	83 ec 0c             	sub    esp,0xc
c00249a5:	6a 02                	push   0x2
c00249a7:	e8 71 c8 fe ff       	call   c001121d <Virt::allocateKernelVirtualPages(int)>
c00249ac:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c00249b2:	6a 03                	push   0x3
c00249b4:	50                   	push   eax
c00249b5:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c00249bb:	ff 35 10 db 02 c0    	push   DWORD PTR ds:0xc002db10
c00249c1:	e8 14 d0 fe ff       	call   c00119da <VAS::mapPage(unsigned long, unsigned long, int)>
c00249c6:	83 c4 14             	add    esp,0x14
c00249c9:	53                   	push   ebx
c00249ca:	e8 d1 f5 fe ff       	call   c0013fa0 <PhysicalDisk::startCache()>
c00249cf:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00249d2:	e8 4b 18 ff ff       	call   c0016222 <createPartitionsForDisk(PhysicalDisk*)>
c00249d7:	83 c4 14             	add    esp,0x14
c00249da:	31 c0                	xor    eax,eax
c00249dc:	5b                   	pop    ebx
c00249dd:	5e                   	pop    esi
c00249de:	c3                   	ret    
c00249df:	90                   	nop

c00249e0 <SATA::SATA()>:
c00249e0:	83 ec 0c             	sub    esp,0xc
c00249e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00249e7:	83 ec 04             	sub    esp,0x4
c00249ea:	68 00 02 00 00       	push   0x200
c00249ef:	68 b8 c2 02 c0       	push   0xc002c2b8
c00249f4:	50                   	push   eax
c00249f5:	e8 3e f5 fe ff       	call   c0013f38 <PhysicalDisk::PhysicalDisk(char const*, int)>
c00249fa:	83 c4 10             	add    esp,0x10
c00249fd:	ba 28 c3 02 c0       	mov    edx,0xc002c328
c0024a02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024a06:	89 10                	mov    DWORD PTR [eax],edx
c0024a08:	90                   	nop
c0024a09:	83 c4 0c             	add    esp,0xc
c0024a0c:	c3                   	ret    
c0024a0d:	90                   	nop

c0024a0e <SATA::access(unsigned long long, int, void*, bool)>:
c0024a0e:	55                   	push   ebp
c0024a0f:	57                   	push   edi
c0024a10:	56                   	push   esi
c0024a11:	53                   	push   ebx
c0024a12:	83 ec 2c             	sub    esp,0x2c
c0024a15:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0024a19:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0024a1d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0024a21:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0024a25:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0024a29:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c0024a2e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0024a32:	7e 10                	jle    c0024a44 <SATA::access(unsigned long long, int, void*, bool)+0x36>
c0024a34:	83 ec 0c             	sub    esp,0xc
c0024a37:	68 c8 c2 02 c0       	push   0xc002c2c8
c0024a3c:	e8 f4 53 ff ff       	call   c0019e35 <Krnl::panic(char const*)>
c0024a41:	83 c4 10             	add    esp,0x10
c0024a44:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0024a4a:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c0024a50:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0024a56:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0024a5a:	89 d0                	mov    eax,edx
c0024a5c:	c1 e0 07             	shl    eax,0x7
c0024a5f:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0024a63:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c0024a6d:	51                   	push   ecx
c0024a6e:	8d 42 02             	lea    eax,[edx+0x2]
c0024a71:	51                   	push   ecx
c0024a72:	c1 e0 07             	shl    eax,0x7
c0024a75:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0024a79:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0024a7d:	50                   	push   eax
c0024a7e:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c0024a84:	e8 1b f0 ff ff       	call   c0023aa4 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c0024a89:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0024a8d:	83 c4 10             	add    esp,0x10
c0024a90:	b8 01 00 00 00       	mov    eax,0x1
c0024a95:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c0024a9a:	0f 84 cb 01 00 00    	je     c0024c6b <SATA::access(unsigned long long, int, void*, bool)+0x25d>
c0024aa0:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0024aa4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0024aa8:	c1 e0 09             	shl    eax,0x9
c0024aab:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c0024ab0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0024ab4:	74 0e                	je     c0024ac4 <SATA::access(unsigned long long, int, void*, bool)+0xb6>
c0024ab6:	8b bb 78 01 00 00    	mov    edi,DWORD PTR [ebx+0x178]
c0024abc:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0024ac0:	89 c1                	mov    ecx,eax
c0024ac2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0024ac4:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0024ac8:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c0024ace:	8d 42 02             	lea    eax,[edx+0x2]
c0024ad1:	c1 e0 07             	shl    eax,0x7
c0024ad4:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0024ad8:	8b 00                	mov    eax,DWORD PTR [eax]
c0024ada:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c0024ae0:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c0024ae6:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0024aea:	c1 e1 05             	shl    ecx,0x5
c0024aed:	01 c8                	add    eax,ecx
c0024aef:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c0024af3:	83 e1 01             	and    ecx,0x1
c0024af6:	89 ce                	mov    esi,ecx
c0024af8:	8a 08                	mov    cl,BYTE PTR [eax]
c0024afa:	c1 e6 06             	shl    esi,0x6
c0024afd:	83 e1 bf             	and    ecx,0xffffffbf
c0024b00:	09 f1                	or     ecx,esi
c0024b02:	88 08                	mov    BYTE PTR [eax],cl
c0024b04:	8b 08                	mov    ecx,DWORD PTR [eax]
c0024b06:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c0024b0c:	81 c9 05 00 01 00    	or     ecx,0x10005
c0024b12:	89 08                	mov    DWORD PTR [eax],ecx
c0024b14:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c0024b1a:	8b b1 58 01 00 00    	mov    esi,DWORD PTR [ecx+0x158]
c0024b20:	2b b1 5c 01 00 00    	sub    esi,DWORD PTR [ecx+0x15c]
c0024b26:	03 70 08             	add    esi,DWORD PTR [eax+0x8]
c0024b29:	50                   	push   eax
c0024b2a:	68 90 00 00 00       	push   0x90
c0024b2f:	6a 00                	push   0x0
c0024b31:	56                   	push   esi
c0024b32:	e8 19 bc fd ff       	call   c0000750 <memset>
c0024b37:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c0024b3d:	66 89 6e 04          	mov    WORD PTR [esi+0x4],bp
c0024b41:	89 86 80 00 00 00    	mov    DWORD PTR [esi+0x80],eax
c0024b47:	c6 46 07 40          	mov    BYTE PTR [esi+0x7],0x40
c0024b4b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0024b4f:	83 c4 10             	add    esp,0x10
c0024b52:	48                   	dec    eax
c0024b53:	25 ff ff 3f 00       	and    eax,0x3fffff
c0024b58:	89 c1                	mov    ecx,eax
c0024b5a:	8b 86 8c 00 00 00    	mov    eax,DWORD PTR [esi+0x8c]
c0024b60:	25 00 00 c0 ff       	and    eax,0xffc00000
c0024b65:	09 c8                	or     eax,ecx
c0024b67:	89 86 8c 00 00 00    	mov    DWORD PTR [esi+0x8c],eax
c0024b6d:	66 8b 06             	mov    ax,WORD PTR [esi]
c0024b70:	80 8e 8f 00 00 00 80 	or     BYTE PTR [esi+0x8f],0x80
c0024b77:	66 25 00 7f          	and    ax,0x7f00
c0024b7b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0024b7f:	66 0d 27 80          	or     ax,0x8027
c0024b83:	80 7c 24 0c 01       	cmp    BYTE PTR [esp+0xc],0x1
c0024b88:	66 89 06             	mov    WORD PTR [esi],ax
c0024b8b:	19 c0                	sbb    eax,eax
c0024b8d:	83 e0 f0             	and    eax,0xfffffff0
c0024b90:	83 c0 35             	add    eax,0x35
c0024b93:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c0024b96:	89 e8                	mov    eax,ebp
c0024b98:	c1 e8 10             	shr    eax,0x10
c0024b9b:	88 46 06             	mov    BYTE PTR [esi+0x6],al
c0024b9e:	89 e8                	mov    eax,ebp
c0024ba0:	c1 e8 18             	shr    eax,0x18
c0024ba3:	88 46 08             	mov    BYTE PTR [esi+0x8],al
c0024ba6:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0024baa:	88 46 09             	mov    BYTE PTR [esi+0x9],al
c0024bad:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0024bb1:	88 66 0a             	mov    BYTE PTR [esi+0xa],ah
c0024bb4:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0024bb8:	66 89 46 0c          	mov    WORD PTR [esi+0xc],ax
c0024bbc:	89 d6                	mov    esi,edx
c0024bbe:	31 c0                	xor    eax,eax
c0024bc0:	c1 e6 07             	shl    esi,0x7
c0024bc3:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c0024bc7:	8b 8e 20 01 00 00    	mov    ecx,DWORD PTR [esi+0x120]
c0024bcd:	80 e1 88             	and    cl,0x88
c0024bd0:	74 0a                	je     c0024bdc <SATA::access(unsigned long long, int, void*, bool)+0x1ce>
c0024bd2:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0024bd7:	74 0a                	je     c0024be3 <SATA::access(unsigned long long, int, void*, bool)+0x1d5>
c0024bd9:	40                   	inc    eax
c0024bda:	eb eb                	jmp    c0024bc7 <SATA::access(unsigned long long, int, void*, bool)+0x1b9>
c0024bdc:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0024be1:	75 0a                	jne    c0024bed <SATA::access(unsigned long long, int, void*, bool)+0x1df>
c0024be3:	83 ec 0c             	sub    esp,0xc
c0024be6:	68 01 c3 02 c0       	push   0xc002c301
c0024beb:	eb 56                	jmp    c0024c43 <SATA::access(unsigned long long, int, void*, bool)+0x235>
c0024bed:	b8 01 00 00 00       	mov    eax,0x1
c0024bf2:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c0024bf6:	c1 e2 07             	shl    edx,0x7
c0024bf9:	d3 e0                	shl    eax,cl
c0024bfb:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c0024bff:	89 86 38 01 00 00    	mov    DWORD PTR [esi+0x138],eax
c0024c05:	8b 8a 38 01 00 00    	mov    ecx,DWORD PTR [edx+0x138]
c0024c0b:	85 c8                	test   eax,ecx
c0024c0d:	74 20                	je     c0024c2f <SATA::access(unsigned long long, int, void*, bool)+0x221>
c0024c0f:	8b 8a 10 01 00 00    	mov    ecx,DWORD PTR [edx+0x110]
c0024c15:	0f ba e1 1e          	bt     ecx,0x1e
c0024c19:	73 ea                	jae    c0024c05 <SATA::access(unsigned long long, int, void*, bool)+0x1f7>
c0024c1b:	83 ec 0c             	sub    esp,0xc
c0024c1e:	68 0f c3 02 c0       	push   0xc002c30f
c0024c23:	e8 0d 52 ff ff       	call   c0019e35 <Krnl::panic(char const*)>
c0024c28:	83 c4 10             	add    esp,0x10
c0024c2b:	31 c0                	xor    eax,eax
c0024c2d:	eb 3c                	jmp    c0024c6b <SATA::access(unsigned long long, int, void*, bool)+0x25d>
c0024c2f:	8b 82 10 01 00 00    	mov    eax,DWORD PTR [edx+0x110]
c0024c35:	0f ba e0 1e          	bt     eax,0x1e
c0024c39:	73 17                	jae    c0024c52 <SATA::access(unsigned long long, int, void*, bool)+0x244>
c0024c3b:	83 ec 0c             	sub    esp,0xc
c0024c3e:	68 0f c3 02 c0       	push   0xc002c30f
c0024c43:	e8 ed 51 ff ff       	call   c0019e35 <Krnl::panic(char const*)>
c0024c48:	83 c4 10             	add    esp,0x10
c0024c4b:	b8 01 00 00 00       	mov    eax,0x1
c0024c50:	eb 19                	jmp    c0024c6b <SATA::access(unsigned long long, int, void*, bool)+0x25d>
c0024c52:	31 c0                	xor    eax,eax
c0024c54:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c0024c59:	75 10                	jne    c0024c6b <SATA::access(unsigned long long, int, void*, bool)+0x25d>
c0024c5b:	8b b3 78 01 00 00    	mov    esi,DWORD PTR [ebx+0x178]
c0024c61:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c0024c65:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0024c69:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0024c6b:	83 c4 2c             	add    esp,0x2c
c0024c6e:	5b                   	pop    ebx
c0024c6f:	5e                   	pop    esi
c0024c70:	5f                   	pop    edi
c0024c71:	5d                   	pop    ebp
c0024c72:	c3                   	ret    
c0024c73:	90                   	nop

c0024c74 <SATA::read(unsigned long long, int, void*)>:
c0024c74:	57                   	push   edi
c0024c75:	b8 04 00 00 00       	mov    eax,0x4
c0024c7a:	56                   	push   esi
c0024c7b:	53                   	push   ebx
c0024c7c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0024c80:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0024c84:	8d 7a ff             	lea    edi,[edx-0x1]
c0024c87:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0024c8b:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0024c8f:	81 ff fe 00 00 00    	cmp    edi,0xfe
c0024c95:	77 25                	ja     c0024cbc <SATA::read(unsigned long long, int, void*)+0x48>
c0024c97:	b8 06 00 00 00       	mov    eax,0x6
c0024c9c:	85 f6                	test   esi,esi
c0024c9e:	74 1c                	je     c0024cbc <SATA::read(unsigned long long, int, void*)+0x48>
c0024ca0:	50                   	push   eax
c0024ca1:	50                   	push   eax
c0024ca2:	6a 00                	push   0x0
c0024ca4:	56                   	push   esi
c0024ca5:	52                   	push   edx
c0024ca6:	53                   	push   ebx
c0024ca7:	51                   	push   ecx
c0024ca8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0024cac:	e8 5d fd ff ff       	call   c0024a0e <SATA::access(unsigned long long, int, void*, bool)>
c0024cb1:	83 c4 20             	add    esp,0x20
c0024cb4:	85 c0                	test   eax,eax
c0024cb6:	0f 95 c0             	setne  al
c0024cb9:	0f b6 c0             	movzx  eax,al
c0024cbc:	5b                   	pop    ebx
c0024cbd:	5e                   	pop    esi
c0024cbe:	5f                   	pop    edi
c0024cbf:	c3                   	ret    

c0024cc0 <SATA::write(unsigned long long, int, void*)>:
c0024cc0:	55                   	push   ebp
c0024cc1:	b8 04 00 00 00       	mov    eax,0x4
c0024cc6:	57                   	push   edi
c0024cc7:	56                   	push   esi
c0024cc8:	53                   	push   ebx
c0024cc9:	83 ec 0c             	sub    esp,0xc
c0024ccc:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0024cd0:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0024cd4:	8d 73 ff             	lea    esi,[ebx-0x1]
c0024cd7:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0024cdb:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0024cdf:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0024ce5:	77 3d                	ja     c0024d24 <SATA::write(unsigned long long, int, void*)+0x64>
c0024ce7:	b8 06 00 00 00       	mov    eax,0x6
c0024cec:	85 ed                	test   ebp,ebp
c0024cee:	74 34                	je     c0024d24 <SATA::write(unsigned long long, int, void*)+0x64>
c0024cf0:	c1 e3 09             	shl    ebx,0x9
c0024cf3:	01 eb                	add    ebx,ebp
c0024cf5:	89 d6                	mov    esi,edx
c0024cf7:	89 cf                	mov    edi,ecx
c0024cf9:	83 c6 01             	add    esi,0x1
c0024cfc:	83 d7 00             	adc    edi,0x0
c0024cff:	50                   	push   eax
c0024d00:	50                   	push   eax
c0024d01:	6a 01                	push   0x1
c0024d03:	55                   	push   ebp
c0024d04:	81 c5 00 02 00 00    	add    ebp,0x200
c0024d0a:	6a 01                	push   0x1
c0024d0c:	51                   	push   ecx
c0024d0d:	52                   	push   edx
c0024d0e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0024d12:	e8 f7 fc ff ff       	call   c0024a0e <SATA::access(unsigned long long, int, void*, bool)>
c0024d17:	83 c4 20             	add    esp,0x20
c0024d1a:	89 f2                	mov    edx,esi
c0024d1c:	89 f9                	mov    ecx,edi
c0024d1e:	39 dd                	cmp    ebp,ebx
c0024d20:	75 d3                	jne    c0024cf5 <SATA::write(unsigned long long, int, void*)+0x35>
c0024d22:	31 c0                	xor    eax,eax
c0024d24:	83 c4 0c             	add    esp,0xc
c0024d27:	5b                   	pop    ebx
c0024d28:	5e                   	pop    esi
c0024d29:	5f                   	pop    edi
c0024d2a:	5d                   	pop    ebp
c0024d2b:	c3                   	ret    

c0024d2c <SATAPI::write(unsigned long long, int, void*)>:
c0024d2c:	b8 03 00 00 00       	mov    eax,0x3
c0024d31:	c3                   	ret    

c0024d32 <SATAPI::close(int, int, void*)>:
c0024d32:	83 ec 0c             	sub    esp,0xc
c0024d35:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024d39:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0024d3f:	85 c0                	test   eax,eax
c0024d41:	74 0c                	je     c0024d4f <SATAPI::close(int, int, void*)+0x1d>
c0024d43:	83 ec 0c             	sub    esp,0xc
c0024d46:	8b 10                	mov    edx,DWORD PTR [eax]
c0024d48:	50                   	push   eax
c0024d49:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0024d4c:	83 c4 10             	add    esp,0x10
c0024d4f:	31 c0                	xor    eax,eax
c0024d51:	83 c4 0c             	add    esp,0xc
c0024d54:	c3                   	ret    
c0024d55:	90                   	nop

c0024d56 <SATAPI::SATAPI()>:
c0024d56:	83 ec 0c             	sub    esp,0xc
c0024d59:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024d5d:	83 ec 04             	sub    esp,0x4
c0024d60:	68 00 08 00 00       	push   0x800
c0024d65:	68 58 c3 02 c0       	push   0xc002c358
c0024d6a:	50                   	push   eax
c0024d6b:	e8 c8 f1 fe ff       	call   c0013f38 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0024d70:	83 c4 10             	add    esp,0x10
c0024d73:	ba 04 c4 02 c0       	mov    edx,0xc002c404
c0024d78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024d7c:	89 10                	mov    DWORD PTR [eax],edx
c0024d7e:	90                   	nop
c0024d7f:	83 c4 0c             	add    esp,0xc
c0024d82:	c3                   	ret    
c0024d83:	90                   	nop

c0024d84 <SATAPI::diskRemoved()>:
c0024d84:	83 ec 18             	sub    esp,0x18
c0024d87:	68 64 c3 02 c0       	push   0xc002c364
c0024d8c:	e8 38 d9 fe ff       	call   c00126c9 <Dbg::kprintf(char const*, ...)>
c0024d91:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024d95:	c6 80 74 01 00 00 00 	mov    BYTE PTR [eax+0x174],0x0
c0024d9c:	83 c4 1c             	add    esp,0x1c
c0024d9f:	c3                   	ret    

c0024da0 <SATAPI::diskInserted()>:
c0024da0:	53                   	push   ebx
c0024da1:	83 ec 14             	sub    esp,0x14
c0024da4:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0024da8:	68 7b c3 02 c0       	push   0xc002c37b
c0024dad:	e8 17 d9 fe ff       	call   c00126c9 <Dbg::kprintf(char const*, ...)>
c0024db2:	c6 83 74 01 00 00 01 	mov    BYTE PTR [ebx+0x174],0x1
c0024db9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024dbc:	e8 df f1 fe ff       	call   c0013fa0 <PhysicalDisk::startCache()>
c0024dc1:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0024dc5:	83 c4 18             	add    esp,0x18
c0024dc8:	5b                   	pop    ebx
c0024dc9:	e9 54 14 ff ff       	jmp    c0016222 <createPartitionsForDisk(PhysicalDisk*)>

c0024dce <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c0024dce:	55                   	push   ebp
c0024dcf:	57                   	push   edi
c0024dd0:	56                   	push   esi
c0024dd1:	53                   	push   ebx
c0024dd2:	83 ec 34             	sub    esp,0x34
c0024dd5:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c0024dd9:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0024ddd:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c0024de1:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0024de5:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0024de9:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c0024def:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0024df5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0024df9:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
c0024dff:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0024e03:	c1 e0 07             	shl    eax,0x7
c0024e06:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0024e0a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0024e0e:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c0024e18:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0024e1c:	8d 58 02             	lea    ebx,[eax+0x2]
c0024e1f:	c1 e3 07             	shl    ebx,0x7
c0024e22:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c0024e26:	53                   	push   ebx
c0024e27:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c0024e2d:	e8 72 ec ff ff       	call   c0023aa4 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c0024e32:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0024e36:	83 c4 10             	add    esp,0x10
c0024e39:	b8 01 00 00 00       	mov    eax,0x1
c0024e3e:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c0024e43:	0f 84 85 01 00 00    	je     c0024fce <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x200>
c0024e49:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c0024e4f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0024e51:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c0024e57:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c0024e5d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0024e61:	c1 e1 05             	shl    ecx,0x5
c0024e64:	01 c8                	add    eax,ecx
c0024e66:	8b 08                	mov    ecx,DWORD PTR [eax]
c0024e68:	81 e1 80 ff 00 00    	and    ecx,0xff80
c0024e6e:	81 c9 25 00 01 00    	or     ecx,0x10025
c0024e74:	89 08                	mov    DWORD PTR [eax],ecx
c0024e76:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c0024e7c:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c0024e82:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c0024e88:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c0024e8b:	8d 7b 40             	lea    edi,[ebx+0x40]
c0024e8e:	50                   	push   eax
c0024e8f:	68 90 00 00 00       	push   0x90
c0024e94:	6a 00                	push   0x0
c0024e96:	53                   	push   ebx
c0024e97:	e8 b4 b8 fd ff       	call   c0000750 <memset>
c0024e9c:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0024ea0:	b9 0c 00 00 00       	mov    ecx,0xc
c0024ea5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0024ea7:	8b 85 78 01 00 00    	mov    eax,DWORD PTR [ebp+0x178]
c0024ead:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c0024eb1:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c0024eb7:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c0024ebb:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0024ebf:	48                   	dec    eax
c0024ec0:	25 ff ff 3f 00       	and    eax,0x3fffff
c0024ec5:	89 c1                	mov    ecx,eax
c0024ec7:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c0024ecd:	25 00 00 c0 ff       	and    eax,0xffc00000
c0024ed2:	09 c8                	or     eax,ecx
c0024ed4:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c0024eda:	66 8b 03             	mov    ax,WORD PTR [ebx]
c0024edd:	80 8b 8f 00 00 00 80 	or     BYTE PTR [ebx+0x8f],0x80
c0024ee4:	66 25 00 7f          	and    ax,0x7f00
c0024ee8:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0024eec:	66 0d 27 80          	or     ax,0x8027
c0024ef0:	66 89 53 04          	mov    WORD PTR [ebx+0x4],dx
c0024ef4:	66 89 03             	mov    WORD PTR [ebx],ax
c0024ef7:	89 d0                	mov    eax,edx
c0024ef9:	c1 ea 18             	shr    edx,0x18
c0024efc:	c1 e8 10             	shr    eax,0x10
c0024eff:	88 53 08             	mov    BYTE PTR [ebx+0x8],dl
c0024f02:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0024f05:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c0024f09:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c0024f0c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0024f10:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c0024f13:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0024f17:	83 c4 10             	add    esp,0x10
c0024f1a:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c0024f1e:	31 c0                	xor    eax,eax
c0024f20:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0024f24:	8b 93 20 01 00 00    	mov    edx,DWORD PTR [ebx+0x120]
c0024f2a:	80 e2 88             	and    dl,0x88
c0024f2d:	74 0a                	je     c0024f39 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x16b>
c0024f2f:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0024f34:	74 0a                	je     c0024f40 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x172>
c0024f36:	40                   	inc    eax
c0024f37:	eb eb                	jmp    c0024f24 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x156>
c0024f39:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0024f3e:	75 0f                	jne    c0024f4f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x181>
c0024f40:	83 ec 0c             	sub    esp,0xc
c0024f43:	68 01 c3 02 c0       	push   0xc002c301
c0024f48:	e8 e8 4e ff ff       	call   c0019e35 <Krnl::panic(char const*)>
c0024f4d:	eb 3f                	jmp    c0024f8e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1c0>
c0024f4f:	ba 01 00 00 00       	mov    edx,0x1
c0024f54:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c0024f58:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0024f5c:	d3 e2                	shl    edx,cl
c0024f5e:	c1 e0 07             	shl    eax,0x7
c0024f61:	89 93 38 01 00 00    	mov    DWORD PTR [ebx+0x138],edx
c0024f67:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0024f6b:	8b 88 38 01 00 00    	mov    ecx,DWORD PTR [eax+0x138]
c0024f71:	85 ca                	test   edx,ecx
c0024f73:	74 23                	je     c0024f98 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1ca>
c0024f75:	8b 88 10 01 00 00    	mov    ecx,DWORD PTR [eax+0x110]
c0024f7b:	0f ba e1 1e          	bt     ecx,0x1e
c0024f7f:	73 ea                	jae    c0024f6b <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x19d>
c0024f81:	83 ec 0c             	sub    esp,0xc
c0024f84:	68 93 c3 02 c0       	push   0xc002c393
c0024f89:	e8 3b d7 fe ff       	call   c00126c9 <Dbg::kprintf(char const*, ...)>
c0024f8e:	83 c4 10             	add    esp,0x10
c0024f91:	b8 01 00 00 00       	mov    eax,0x1
c0024f96:	eb 36                	jmp    c0024fce <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x200>
c0024f98:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0024f9e:	0f ba e0 1e          	bt     eax,0x1e
c0024fa2:	73 0a                	jae    c0024fae <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1e0>
c0024fa4:	83 ec 0c             	sub    esp,0xc
c0024fa7:	68 a6 c3 02 c0       	push   0xc002c3a6
c0024fac:	eb db                	jmp    c0024f89 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1bb>
c0024fae:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
c0024fb3:	74 17                	je     c0024fcc <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1fe>
c0024fb5:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0024fba:	74 10                	je     c0024fcc <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1fe>
c0024fbc:	8b b5 7c 01 00 00    	mov    esi,DWORD PTR [ebp+0x17c]
c0024fc2:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c0024fc6:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0024fca:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0024fcc:	31 c0                	xor    eax,eax
c0024fce:	83 c4 2c             	add    esp,0x2c
c0024fd1:	5b                   	pop    ebx
c0024fd2:	5e                   	pop    esi
c0024fd3:	5f                   	pop    edi
c0024fd4:	5d                   	pop    ebp
c0024fd5:	c3                   	ret    

c0024fd6 <SATAPI::eject()>:
c0024fd6:	57                   	push   edi
c0024fd7:	b9 03 00 00 00       	mov    ecx,0x3
c0024fdc:	53                   	push   ebx
c0024fdd:	83 ec 14             	sub    esp,0x14
c0024fe0:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0024fe4:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0024fe8:	fc                   	cld    
c0024fe9:	31 c0                	xor    eax,eax
c0024feb:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0024fed:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c0024ff2:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c0024ff7:	50                   	push   eax
c0024ff8:	6a 00                	push   0x0
c0024ffa:	6a 00                	push   0x0
c0024ffc:	6a 00                	push   0x0
c0024ffe:	6a 00                	push   0x0
c0025000:	6a 02                	push   0x2
c0025002:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0025006:	50                   	push   eax
c0025007:	53                   	push   ebx
c0025008:	e8 c1 fd ff ff       	call   c0024dce <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c002500d:	83 c4 14             	add    esp,0x14
c0025010:	53                   	push   ebx
c0025011:	e8 6e fd ff ff       	call   c0024d84 <SATAPI::diskRemoved()>
c0025016:	83 c4 24             	add    esp,0x24
c0025019:	31 c0                	xor    eax,eax
c002501b:	5b                   	pop    ebx
c002501c:	5f                   	pop    edi
c002501d:	c3                   	ret    

c002501e <SATAPI::detectMedia()>:
c002501e:	56                   	push   esi
c002501f:	53                   	push   ebx
c0025020:	83 ec 28             	sub    esp,0x28
c0025023:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0025027:	6a 0c                	push   0xc
c0025029:	6a 00                	push   0x0
c002502b:	8d 74 24 0e          	lea    esi,[esp+0xe]
c002502f:	56                   	push   esi
c0025030:	e8 1b b7 fd ff       	call   c0000750 <memset>
c0025035:	83 c4 0c             	add    esp,0xc
c0025038:	6a 00                	push   0x0
c002503a:	6a 00                	push   0x0
c002503c:	6a 00                	push   0x0
c002503e:	6a 00                	push   0x0
c0025040:	6a 00                	push   0x0
c0025042:	56                   	push   esi
c0025043:	53                   	push   ebx
c0025044:	e8 85 fd ff ff       	call   c0024dce <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0025049:	83 c4 1c             	add    esp,0x1c
c002504c:	6a 0c                	push   0xc
c002504e:	6a 00                	push   0x0
c0025050:	56                   	push   esi
c0025051:	e8 fa b6 fd ff       	call   c0000750 <memset>
c0025056:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c002505b:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c0025060:	83 c4 0c             	add    esp,0xc
c0025063:	6a 01                	push   0x1
c0025065:	8d 44 24 16          	lea    eax,[esp+0x16]
c0025069:	50                   	push   eax
c002506a:	6a 00                	push   0x0
c002506c:	6a 00                	push   0x0
c002506e:	6a 12                	push   0x12
c0025070:	56                   	push   esi
c0025071:	53                   	push   ebx
c0025072:	e8 57 fd ff ff       	call   c0024dce <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0025077:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c002507b:	83 c4 20             	add    esp,0x20
c002507e:	83 e0 7f             	and    eax,0x7f
c0025081:	3c 70                	cmp    al,0x70
c0025083:	74 15                	je     c002509a <SATAPI::detectMedia()+0x7c>
c0025085:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c002508c:	75 0c                	jne    c002509a <SATAPI::detectMedia()+0x7c>
c002508e:	83 ec 0c             	sub    esp,0xc
c0025091:	53                   	push   ebx
c0025092:	e8 09 fd ff ff       	call   c0024da0 <SATAPI::diskInserted()>
c0025097:	83 c4 10             	add    esp,0x10
c002509a:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c002509e:	83 e0 0f             	and    eax,0xf
c00250a1:	3c 02                	cmp    al,0x2
c00250a3:	75 1b                	jne    c00250c0 <SATAPI::detectMedia()+0xa2>
c00250a5:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c00250aa:	75 2d                	jne    c00250d9 <SATAPI::detectMedia()+0xbb>
c00250ac:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c00250b3:	74 24                	je     c00250d9 <SATAPI::detectMedia()+0xbb>
c00250b5:	83 ec 0c             	sub    esp,0xc
c00250b8:	53                   	push   ebx
c00250b9:	e8 c6 fc ff ff       	call   c0024d84 <SATAPI::diskRemoved()>
c00250be:	eb 16                	jmp    c00250d6 <SATAPI::detectMedia()+0xb8>
c00250c0:	84 c0                	test   al,al
c00250c2:	75 15                	jne    c00250d9 <SATAPI::detectMedia()+0xbb>
c00250c4:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c00250cb:	75 0c                	jne    c00250d9 <SATAPI::detectMedia()+0xbb>
c00250cd:	83 ec 0c             	sub    esp,0xc
c00250d0:	53                   	push   ebx
c00250d1:	e8 ca fc ff ff       	call   c0024da0 <SATAPI::diskInserted()>
c00250d6:	83 c4 10             	add    esp,0x10
c00250d9:	83 c4 24             	add    esp,0x24
c00250dc:	5b                   	pop    ebx
c00250dd:	5e                   	pop    esi
c00250de:	c3                   	ret    
c00250df:	90                   	nop

c00250e0 <SATAPI::open(int, int, void*)>:
c00250e0:	56                   	push   esi
c00250e1:	53                   	push   ebx
c00250e2:	50                   	push   eax
c00250e3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00250e7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00250eb:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c00250f5:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c00250fb:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0025105:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025109:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c0025113:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0025119:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c0025120:	e8 70 a8 fe ff       	call   c000f995 <Phys::allocatePage()>
c0025125:	89 c6                	mov    esi,eax
c0025127:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c002512d:	81 c6 00 10 00 00    	add    esi,0x1000
c0025133:	e8 5d a8 fe ff       	call   c000f995 <Phys::allocatePage()>
c0025138:	39 c6                	cmp    esi,eax
c002513a:	74 10                	je     c002514c <SATAPI::open(int, int, void*)+0x6c>
c002513c:	83 ec 0c             	sub    esp,0xc
c002513f:	68 bb c3 02 c0       	push   0xc002c3bb
c0025144:	e8 ec 4c ff ff       	call   c0019e35 <Krnl::panic(char const*)>
c0025149:	83 c4 10             	add    esp,0x10
c002514c:	83 ec 0c             	sub    esp,0xc
c002514f:	6a 02                	push   0x2
c0025151:	e8 c7 c0 fe ff       	call   c001121d <Virt::allocateKernelVirtualPages(int)>
c0025156:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c002515c:	6a 03                	push   0x3
c002515e:	50                   	push   eax
c002515f:	ff b3 78 01 00 00    	push   DWORD PTR [ebx+0x178]
c0025165:	ff 35 10 db 02 c0    	push   DWORD PTR ds:0xc002db10
c002516b:	e8 6a c8 fe ff       	call   c00119da <VAS::mapPage(unsigned long, unsigned long, int)>
c0025170:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c0025177:	83 c4 14             	add    esp,0x14
c002517a:	53                   	push   ebx
c002517b:	e8 9e fe ff ff       	call   c002501e <SATAPI::detectMedia()>
c0025180:	83 c4 14             	add    esp,0x14
c0025183:	31 c0                	xor    eax,eax
c0025185:	5b                   	pop    ebx
c0025186:	5e                   	pop    esi
c0025187:	c3                   	ret    

c0025188 <SATAPI::read(unsigned long long, int, void*)>:
c0025188:	55                   	push   ebp
c0025189:	57                   	push   edi
c002518a:	56                   	push   esi
c002518b:	53                   	push   ebx
c002518c:	83 ec 1c             	sub    esp,0x1c
c002518f:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0025193:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0025197:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c002519b:	80 bd 74 01 00 00 00 	cmp    BYTE PTR [ebp+0x174],0x0
c00251a2:	74 19                	je     c00251bd <SATAPI::read(unsigned long long, int, void*)+0x35>
c00251a4:	83 7c 24 3c 04       	cmp    DWORD PTR [esp+0x3c],0x4
c00251a9:	7e 2e                	jle    c00251d9 <SATAPI::read(unsigned long long, int, void*)+0x51>
c00251ab:	83 ec 0c             	sub    esp,0xc
c00251ae:	68 d1 c3 02 c0       	push   0xc002c3d1
c00251b3:	e8 7d 4c ff ff       	call   c0019e35 <Krnl::panic(char const*)>
c00251b8:	83 c4 10             	add    esp,0x10
c00251bb:	eb 1c                	jmp    c00251d9 <SATAPI::read(unsigned long long, int, void*)+0x51>
c00251bd:	83 ec 0c             	sub    esp,0xc
c00251c0:	55                   	push   ebp
c00251c1:	e8 58 fe ff ff       	call   c002501e <SATAPI::detectMedia()>
c00251c6:	83 c4 10             	add    esp,0x10
c00251c9:	b8 02 00 00 00       	mov    eax,0x2
c00251ce:	80 bd 74 01 00 00 00 	cmp    BYTE PTR [ebp+0x174],0x0
c00251d5:	75 cd                	jne    c00251a4 <SATAPI::read(unsigned long long, int, void*)+0x1c>
c00251d7:	eb 49                	jmp    c0025222 <SATAPI::read(unsigned long long, int, void*)+0x9a>
c00251d9:	8d 7c 24 04          	lea    edi,[esp+0x4]
c00251dd:	b9 03 00 00 00       	mov    ecx,0x3
c00251e2:	fc                   	cld    
c00251e3:	31 c0                	xor    eax,eax
c00251e5:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00251e7:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c00251ec:	89 d8                	mov    eax,ebx
c00251ee:	86 e0                	xchg   al,ah
c00251f0:	c1 c0 10             	rol    eax,0x10
c00251f3:	86 e0                	xchg   al,ah
c00251f5:	89 44 24 06          	mov    DWORD PTR [esp+0x6],eax
c00251f9:	8a 44 24 3c          	mov    al,BYTE PTR [esp+0x3c]
c00251fd:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0025201:	50                   	push   eax
c0025202:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0025206:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c002520a:	56                   	push   esi
c002520b:	53                   	push   ebx
c002520c:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0025210:	c1 e0 0b             	shl    eax,0xb
c0025213:	50                   	push   eax
c0025214:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0025218:	50                   	push   eax
c0025219:	55                   	push   ebp
c002521a:	e8 af fb ff ff       	call   c0024dce <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c002521f:	83 c4 20             	add    esp,0x20
c0025222:	83 c4 1c             	add    esp,0x1c
c0025225:	5b                   	pop    ebx
c0025226:	5e                   	pop    esi
c0025227:	5f                   	pop    edi
c0025228:	5d                   	pop    ebp
c0025229:	c3                   	ret    

c002522a <AVX::open(int, int, void*)>:
c002522a:	83 ec 0c             	sub    esp,0xc
c002522d:	e8 46 11 00 00       	call   c0026378 <avxInit>
c0025232:	b8 00 00 00 00       	mov    eax,0x0
c0025237:	83 c4 0c             	add    esp,0xc
c002523a:	c3                   	ret    
c002523b:	90                   	nop

c002523c <AVX::close(int, int, void*)>:
c002523c:	83 ec 0c             	sub    esp,0xc
c002523f:	e8 35 11 00 00       	call   c0026379 <avxClose>
c0025244:	b8 00 00 00 00       	mov    eax,0x0
c0025249:	83 c4 0c             	add    esp,0xc
c002524c:	c3                   	ret    
c002524d:	90                   	nop

c002524e <AVX::available()>:
c002524e:	83 ec 0c             	sub    esp,0xc
c0025251:	e8 1a 11 00 00       	call   c0026370 <avxDetect>
c0025256:	85 c0                	test   eax,eax
c0025258:	0f 95 c0             	setne  al
c002525b:	83 c4 0c             	add    esp,0xc
c002525e:	c3                   	ret    
c002525f:	90                   	nop

c0025260 <AVX::save(void*)>:
c0025260:	83 ec 0c             	sub    esp,0xc
c0025263:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025267:	83 ec 0c             	sub    esp,0xc
c002526a:	50                   	push   eax
c002526b:	e8 06 11 00 00       	call   c0026376 <avxSave>
c0025270:	83 c4 10             	add    esp,0x10
c0025273:	90                   	nop
c0025274:	83 c4 0c             	add    esp,0xc
c0025277:	c3                   	ret    

c0025278 <AVX::load(void*)>:
c0025278:	83 ec 0c             	sub    esp,0xc
c002527b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002527f:	83 ec 0c             	sub    esp,0xc
c0025282:	50                   	push   eax
c0025283:	e8 ef 10 00 00       	call   c0026377 <avxLoad>
c0025288:	83 c4 10             	add    esp,0x10
c002528b:	90                   	nop
c002528c:	83 c4 0c             	add    esp,0xc
c002528f:	c3                   	ret    

c0025290 <AVX::AVX()>:
c0025290:	83 ec 0c             	sub    esp,0xc
c0025293:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025297:	83 ec 08             	sub    esp,0x8
c002529a:	68 34 c4 02 c0       	push   0xc002c434
c002529f:	50                   	push   eax
c00252a0:	e8 71 ed fe ff       	call   c0014016 <FPU::FPU(char const*)>
c00252a5:	83 c4 10             	add    esp,0x10
c00252a8:	ba 44 c4 02 c0       	mov    edx,0xc002c444
c00252ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00252b1:	89 10                	mov    DWORD PTR [eax],edx
c00252b3:	90                   	nop
c00252b4:	83 c4 0c             	add    esp,0xc
c00252b7:	c3                   	ret    

c00252b8 <MMX::available()>:
c00252b8:	a1 a8 d9 02 c0       	mov    eax,ds:0xc002d9a8
c00252bd:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00252c3:	83 e0 20             	and    eax,0x20
c00252c6:	84 c0                	test   al,al
c00252c8:	0f 95 c0             	setne  al
c00252cb:	c3                   	ret    

c00252cc <MMX::open(int, int, void*)>:
c00252cc:	83 ec 0c             	sub    esp,0xc
c00252cf:	e8 2e 11 00 00       	call   c0026402 <x87Init>
c00252d4:	b8 00 00 00 00       	mov    eax,0x0
c00252d9:	83 c4 0c             	add    esp,0xc
c00252dc:	c3                   	ret    
c00252dd:	90                   	nop

c00252de <MMX::close(int, int, void*)>:
c00252de:	83 ec 0c             	sub    esp,0xc
c00252e1:	e8 36 11 00 00       	call   c002641c <x87Close>
c00252e6:	b8 00 00 00 00       	mov    eax,0x0
c00252eb:	83 c4 0c             	add    esp,0xc
c00252ee:	c3                   	ret    
c00252ef:	90                   	nop

c00252f0 <MMX::save(void*)>:
c00252f0:	83 ec 0c             	sub    esp,0xc
c00252f3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00252f7:	83 ec 0c             	sub    esp,0xc
c00252fa:	50                   	push   eax
c00252fb:	e8 f1 10 00 00       	call   c00263f1 <x87Save>
c0025300:	83 c4 10             	add    esp,0x10
c0025303:	90                   	nop
c0025304:	83 c4 0c             	add    esp,0xc
c0025307:	c3                   	ret    

c0025308 <MMX::load(void*)>:
c0025308:	83 ec 0c             	sub    esp,0xc
c002530b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002530f:	83 ec 0c             	sub    esp,0xc
c0025312:	50                   	push   eax
c0025313:	e8 e2 10 00 00       	call   c00263fa <x87Load>
c0025318:	83 c4 10             	add    esp,0x10
c002531b:	90                   	nop
c002531c:	83 c4 0c             	add    esp,0xc
c002531f:	c3                   	ret    

c0025320 <MMX::MMX()>:
c0025320:	83 ec 0c             	sub    esp,0xc
c0025323:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025327:	83 ec 08             	sub    esp,0x8
c002532a:	68 74 c4 02 c0       	push   0xc002c474
c002532f:	50                   	push   eax
c0025330:	e8 e1 ec fe ff       	call   c0014016 <FPU::FPU(char const*)>
c0025335:	83 c4 10             	add    esp,0x10
c0025338:	ba 84 c4 02 c0       	mov    edx,0xc002c484
c002533d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025341:	89 10                	mov    DWORD PTR [eax],edx
c0025343:	90                   	nop
c0025344:	83 c4 0c             	add    esp,0xc
c0025347:	c3                   	ret    

c0025348 <SSE::open(int, int, void*)>:
c0025348:	83 ec 0c             	sub    esp,0xc
c002534b:	e8 64 10 00 00       	call   c00263b4 <sseInit>
c0025350:	b8 00 00 00 00       	mov    eax,0x0
c0025355:	83 c4 0c             	add    esp,0xc
c0025358:	c3                   	ret    
c0025359:	90                   	nop

c002535a <SSE::close(int, int, void*)>:
c002535a:	83 ec 0c             	sub    esp,0xc
c002535d:	e8 62 10 00 00       	call   c00263c4 <sseClose>
c0025362:	b8 00 00 00 00       	mov    eax,0x0
c0025367:	83 c4 0c             	add    esp,0xc
c002536a:	c3                   	ret    
c002536b:	90                   	nop

c002536c <SSE::available()>:
c002536c:	83 ec 1c             	sub    esp,0x1c
c002536f:	e8 1c 10 00 00       	call   c0026390 <absolutelyNoChanceInHell>
c0025374:	85 c0                	test   eax,eax
c0025376:	0f 95 c0             	setne  al
c0025379:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c002537d:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0025381:	83 c4 1c             	add    esp,0x1c
c0025384:	c3                   	ret    
c0025385:	90                   	nop

c0025386 <SSE::save(void*)>:
c0025386:	83 ec 0c             	sub    esp,0xc
c0025389:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002538d:	83 ec 0c             	sub    esp,0xc
c0025390:	50                   	push   eax
c0025391:	e8 12 10 00 00       	call   c00263a8 <sseSave>
c0025396:	83 c4 10             	add    esp,0x10
c0025399:	90                   	nop
c002539a:	83 c4 0c             	add    esp,0xc
c002539d:	c3                   	ret    

c002539e <SSE::load(void*)>:
c002539e:	83 ec 0c             	sub    esp,0xc
c00253a1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00253a5:	83 ec 0c             	sub    esp,0xc
c00253a8:	50                   	push   eax
c00253a9:	e8 00 10 00 00       	call   c00263ae <sseLoad>
c00253ae:	83 c4 10             	add    esp,0x10
c00253b1:	90                   	nop
c00253b2:	83 c4 0c             	add    esp,0xc
c00253b5:	c3                   	ret    

c00253b6 <SSE::SSE()>:
c00253b6:	83 ec 0c             	sub    esp,0xc
c00253b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00253bd:	83 ec 08             	sub    esp,0x8
c00253c0:	68 b4 c4 02 c0       	push   0xc002c4b4
c00253c5:	50                   	push   eax
c00253c6:	e8 4b ec fe ff       	call   c0014016 <FPU::FPU(char const*)>
c00253cb:	83 c4 10             	add    esp,0x10
c00253ce:	ba c4 c4 02 c0       	mov    edx,0xc002c4c4
c00253d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00253d7:	89 10                	mov    DWORD PTR [eax],edx
c00253d9:	90                   	nop
c00253da:	83 c4 0c             	add    esp,0xc
c00253dd:	c3                   	ret    

c00253de <x87::open(int, int, void*)>:
c00253de:	83 ec 0c             	sub    esp,0xc
c00253e1:	e8 1c 10 00 00       	call   c0026402 <x87Init>
c00253e6:	b8 00 00 00 00       	mov    eax,0x0
c00253eb:	83 c4 0c             	add    esp,0xc
c00253ee:	c3                   	ret    
c00253ef:	90                   	nop

c00253f0 <x87::close(int, int, void*)>:
c00253f0:	83 ec 0c             	sub    esp,0xc
c00253f3:	e8 24 10 00 00       	call   c002641c <x87Close>
c00253f8:	b8 00 00 00 00       	mov    eax,0x0
c00253fd:	83 c4 0c             	add    esp,0xc
c0025400:	c3                   	ret    
c0025401:	90                   	nop

c0025402 <x87::available()>:
c0025402:	83 ec 0c             	sub    esp,0xc
c0025405:	e8 cc 0f 00 00       	call   c00263d6 <x87Detect>
c002540a:	85 c0                	test   eax,eax
c002540c:	0f 95 c0             	setne  al
c002540f:	83 c4 0c             	add    esp,0xc
c0025412:	c3                   	ret    
c0025413:	90                   	nop

c0025414 <x87::save(void*)>:
c0025414:	83 ec 0c             	sub    esp,0xc
c0025417:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002541b:	83 ec 0c             	sub    esp,0xc
c002541e:	50                   	push   eax
c002541f:	e8 cd 0f 00 00       	call   c00263f1 <x87Save>
c0025424:	83 c4 10             	add    esp,0x10
c0025427:	90                   	nop
c0025428:	83 c4 0c             	add    esp,0xc
c002542b:	c3                   	ret    

c002542c <x87::load(void*)>:
c002542c:	83 ec 0c             	sub    esp,0xc
c002542f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025433:	83 ec 0c             	sub    esp,0xc
c0025436:	50                   	push   eax
c0025437:	e8 be 0f 00 00       	call   c00263fa <x87Load>
c002543c:	83 c4 10             	add    esp,0x10
c002543f:	90                   	nop
c0025440:	83 c4 0c             	add    esp,0xc
c0025443:	c3                   	ret    

c0025444 <x87::x87()>:
c0025444:	83 ec 0c             	sub    esp,0xc
c0025447:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002544b:	83 ec 08             	sub    esp,0x8
c002544e:	68 f4 c4 02 c0       	push   0xc002c4f4
c0025453:	50                   	push   eax
c0025454:	e8 bd eb fe ff       	call   c0014016 <FPU::FPU(char const*)>
c0025459:	83 c4 10             	add    esp,0x10
c002545c:	ba 04 c5 02 c0       	mov    edx,0xc002c504
c0025461:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025465:	89 10                	mov    DWORD PTR [eax],edx
c0025467:	90                   	nop
c0025468:	83 c4 0c             	add    esp,0xc
c002546b:	c3                   	ret    

c002546c <APIC::disable()>:
c002546c:	90                   	nop
c002546d:	c3                   	ret    

c002546e <APIC::close(int, int, void*)>:
c002546e:	55                   	push   ebp
c002546f:	89 e5                	mov    ebp,esp
c0025471:	83 ec 08             	sub    esp,0x8
c0025474:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025477:	8b 00                	mov    eax,DWORD PTR [eax]
c0025479:	83 c0 3c             	add    eax,0x3c
c002547c:	8b 00                	mov    eax,DWORD PTR [eax]
c002547e:	83 ec 0c             	sub    esp,0xc
c0025481:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025484:	ff d0                	call   eax
c0025486:	83 c4 10             	add    esp,0x10
c0025489:	b8 00 00 00 00       	mov    eax,0x0
c002548e:	c9                   	leave  
c002548f:	c3                   	ret    

c0025490 <IOAPIC::close(int, int, void*)>:
c0025490:	b8 00 00 00 00       	mov    eax,0x0
c0025495:	c3                   	ret    

c0025496 <APIC::io_wait()>:
c0025496:	eb 00                	jmp    c0025498 <APIC::io_wait()+0x2>
c0025498:	eb 00                	jmp    c002549a <APIC::io_wait()+0x4>
c002549a:	90                   	nop
c002549b:	c3                   	ret    

c002549c <APIC::getBase()>:
c002549c:	55                   	push   ebp
c002549d:	89 e5                	mov    ebp,esp
c002549f:	83 ec 18             	sub    esp,0x18
c00254a2:	a1 a8 d9 02 c0       	mov    eax,ds:0xc002d9a8
c00254a7:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00254ad:	83 e0 08             	and    eax,0x8
c00254b0:	84 c0                	test   al,al
c00254b2:	75 07                	jne    c00254bb <APIC::getBase()+0x1f>
c00254b4:	b8 00 00 00 00       	mov    eax,0x0
c00254b9:	eb 21                	jmp    c00254dc <APIC::getBase()+0x40>
c00254bb:	a1 a8 d9 02 c0       	mov    eax,ds:0xc002d9a8
c00254c0:	83 ec 08             	sub    esp,0x8
c00254c3:	6a 1b                	push   0x1b
c00254c5:	50                   	push   eax
c00254c6:	e8 75 96 fe ff       	call   c000eb40 <Computer::rdmsr(unsigned int)>
c00254cb:	83 c4 10             	add    esp,0x10
c00254ce:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00254d1:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c00254d4:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00254d7:	25 00 f0 ff ff       	and    eax,0xfffff000
c00254dc:	c9                   	leave  
c00254dd:	c3                   	ret    

c00254de <APIC::eoi(unsigned char)>:
c00254de:	55                   	push   ebp
c00254df:	89 e5                	mov    ebp,esp
c00254e1:	83 ec 28             	sub    esp,0x28
c00254e4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00254e7:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c00254ea:	83 ec 0c             	sub    esp,0xc
c00254ed:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00254f0:	e8 a7 ff ff ff       	call   c002549c <APIC::getBase()>
c00254f5:	83 c4 10             	add    esp,0x10
c00254f8:	05 b0 00 00 00       	add    eax,0xb0
c00254fd:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0025500:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0025503:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0025509:	90                   	nop
c002550a:	c9                   	leave  
c002550b:	c3                   	ret    

c002550c <APIC::open(int, int, void*)>:
c002550c:	55                   	push   ebp
c002550d:	89 e5                	mov    ebp,esp
c002550f:	57                   	push   edi
c0025510:	56                   	push   esi
c0025511:	53                   	push   ebx
c0025512:	83 ec 2c             	sub    esp,0x2c
c0025515:	83 ec 0c             	sub    esp,0xc
c0025518:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002551b:	e8 7c ff ff ff       	call   c002549c <APIC::getBase()>
c0025520:	83 c4 10             	add    esp,0x10
c0025523:	89 c2                	mov    edx,eax
c0025525:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025528:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c002552e:	0f b6 f8             	movzx  edi,al
c0025531:	89 d0                	mov    eax,edx
c0025533:	ba 00 00 00 00       	mov    edx,0x0
c0025538:	89 c1                	mov    ecx,eax
c002553a:	80 e5 ff             	and    ch,0xff
c002553d:	89 cb                	mov    ebx,ecx
c002553f:	0f b6 f2             	movzx  esi,dl
c0025542:	89 d8                	mov    eax,ebx
c0025544:	89 f2                	mov    edx,esi
c0025546:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0025549:	8d 5f 08             	lea    ebx,[edi+0x8]
c002554c:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0025550:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0025554:	83 e0 00             	and    eax,0x0
c0025557:	09 d0                	or     eax,edx
c0025559:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c002555d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025560:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0025566:	8d 50 01             	lea    edx,[eax+0x1]
c0025569:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c002556c:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0025572:	0f b6 d0             	movzx  edx,al
c0025575:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025578:	83 c2 08             	add    edx,0x8
c002557b:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c002557f:	0f b6 c9             	movzx  ecx,cl
c0025582:	81 c9 00 00 01 00    	or     ecx,0x10000
c0025588:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c002558c:	83 ec 0c             	sub    esp,0xc
c002558f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025592:	e8 05 ff ff ff       	call   c002549c <APIC::getBase()>
c0025597:	83 c4 10             	add    esp,0x10
c002559a:	05 f0 00 00 00       	add    eax,0xf0
c002559f:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c00255a2:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00255a5:	8b 00                	mov    eax,DWORD PTR [eax]
c00255a7:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c00255aa:	81 4d dc 00 01 00 00 	or     DWORD PTR [ebp-0x24],0x100
c00255b1:	81 4d dc ff 00 00 00 	or     DWORD PTR [ebp-0x24],0xff
c00255b8:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00255bb:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c00255be:	89 10                	mov    DWORD PTR [eax],edx
c00255c0:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
c00255c7:	a1 70 02 03 c0       	mov    eax,ds:0xc0030270
c00255cc:	39 45 e4             	cmp    DWORD PTR [ebp-0x1c],eax
c00255cf:	7d 7c                	jge    c002564d <APIC::open(int, int, void*)+0x141>
c00255d1:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00255d4:	8b 04 85 80 02 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcfd80]
c00255db:	88 45 db             	mov    BYTE PTR [ebp-0x25],al
c00255de:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00255e1:	8b 04 85 80 02 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcfd80]
c00255e8:	c1 e8 08             	shr    eax,0x8
c00255eb:	66 89 45 d8          	mov    WORD PTR [ebp-0x28],ax
c00255ef:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00255f2:	8b 04 85 80 02 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcfd80]
c00255f9:	c1 e8 18             	shr    eax,0x18
c00255fc:	88 45 d7             	mov    BYTE PTR [ebp-0x29],al
c00255ff:	80 7d db ff          	cmp    BYTE PTR [ebp-0x25],0xff
c0025603:	75 40                	jne    c0025645 <APIC::open(int, int, void*)+0x139>
c0025605:	83 ec 0c             	sub    esp,0xc
c0025608:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002560b:	e8 8c fe ff ff       	call   c002549c <APIC::getBase()>
c0025610:	83 c4 10             	add    esp,0x10
c0025613:	80 7d d7 01          	cmp    BYTE PTR [ebp-0x29],0x1
c0025617:	75 07                	jne    c0025620 <APIC::open(int, int, void*)+0x114>
c0025619:	ba 60 03 00 00       	mov    edx,0x360
c002561e:	eb 05                	jmp    c0025625 <APIC::open(int, int, void*)+0x119>
c0025620:	ba 50 03 00 00       	mov    edx,0x350
c0025625:	01 d0                	add    eax,edx
c0025627:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c002562a:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c002562d:	8b 00                	mov    eax,DWORD PTR [eax]
c002562f:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c0025632:	81 65 cc 00 ff ff ff 	and    DWORD PTR [ebp-0x34],0xffffff00
c0025639:	83 4d cc 02          	or     DWORD PTR [ebp-0x34],0x2
c002563d:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0025640:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0025643:	89 10                	mov    DWORD PTR [eax],edx
c0025645:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
c0025648:	e9 7a ff ff ff       	jmp    c00255c7 <APIC::open(int, int, void*)+0xbb>
c002564d:	b8 00 00 00 00       	mov    eax,0x0
c0025652:	8d 65 f4             	lea    esp,[ebp-0xc]
c0025655:	5b                   	pop    ebx
c0025656:	5e                   	pop    esi
c0025657:	5f                   	pop    edi
c0025658:	5d                   	pop    ebp
c0025659:	c3                   	ret    

c002565a <IOAPIC::IOAPIC()>:
c002565a:	83 ec 0c             	sub    esp,0xc
c002565d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025661:	83 ec 08             	sub    esp,0x8
c0025664:	68 34 c5 02 c0       	push   0xc002c534
c0025669:	50                   	push   eax
c002566a:	e8 97 e6 fe ff       	call   c0013d06 <Device::Device(char const*)>
c002566f:	83 c4 10             	add    esp,0x10
c0025672:	ba 5c c6 02 c0       	mov    edx,0xc002c65c
c0025677:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002567b:	89 10                	mov    DWORD PTR [eax],edx
c002567d:	90                   	nop
c002567e:	83 c4 0c             	add    esp,0xc
c0025681:	c3                   	ret    

c0025682 <APIC::APIC()>:
c0025682:	53                   	push   ebx
c0025683:	83 ec 18             	sub    esp,0x18
c0025686:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002568a:	83 ec 08             	sub    esp,0x8
c002568d:	68 3c c5 02 c0       	push   0xc002c53c
c0025692:	50                   	push   eax
c0025693:	e8 d8 ed fe ff       	call   c0014470 <InterruptController::InterruptController(char const*)>
c0025698:	83 c4 10             	add    esp,0x10
c002569b:	ba 14 c6 02 c0       	mov    edx,0xc002c614
c00256a0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00256a4:	89 10                	mov    DWORD PTR [eax],edx
c00256a6:	a0 40 1d 03 c0       	mov    al,ds:0xc0031d40
c00256ab:	83 f0 01             	xor    eax,0x1
c00256ae:	84 c0                	test   al,al
c00256b0:	0f 84 a1 00 00 00    	je     c0025757 <APIC::APIC()+0xd5>
c00256b6:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c00256bb:	a0 20 03 03 c0       	mov    al,ds:0xc0030320
c00256c0:	38 44 24 0f          	cmp    BYTE PTR [esp+0xf],al
c00256c4:	0f 83 86 00 00 00    	jae    c0025750 <APIC::APIC()+0xce>
c00256ca:	c7 44 24 04 68 01 00 00 	mov    DWORD PTR [esp+0x4],0x168
c00256d2:	83 ec 0c             	sub    esp,0xc
c00256d5:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00256d9:	e8 bb 9e fe ff       	call   c000f599 <malloc>
c00256de:	83 c4 10             	add    esp,0x10
c00256e1:	89 c3                	mov    ebx,eax
c00256e3:	83 ec 0c             	sub    esp,0xc
c00256e6:	53                   	push   ebx
c00256e7:	e8 6e ff ff ff       	call   c002565a <IOAPIC::IOAPIC()>
c00256ec:	83 c4 10             	add    esp,0x10
c00256ef:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c00256f3:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c00256f8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00256fc:	89 14 85 20 1d 03 c0 	mov    DWORD PTR [eax*4-0x3ffce2e0],edx
c0025703:	a1 00 1d 03 c0       	mov    eax,ds:0xc0031d00
c0025708:	40                   	inc    eax
c0025709:	a3 00 1d 03 c0       	mov    ds:0xc0031d00,eax
c002570e:	a1 a8 d9 02 c0       	mov    eax,ds:0xc002d9a8
c0025713:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c0025719:	83 ec 08             	sub    esp,0x8
c002571c:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0025720:	50                   	push   eax
c0025721:	e8 dc e3 fe ff       	call   c0013b02 <Device::addChild(Device*)>
c0025726:	83 c4 10             	add    esp,0x10
c0025729:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002572d:	8b 00                	mov    eax,DWORD PTR [eax]
c002572f:	83 c0 08             	add    eax,0x8
c0025732:	8b 00                	mov    eax,DWORD PTR [eax]
c0025734:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0025739:	6a 00                	push   0x0
c002573b:	6a 00                	push   0x0
c002573d:	52                   	push   edx
c002573e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0025742:	ff d0                	call   eax
c0025744:	83 c4 10             	add    esp,0x10
c0025747:	fe 44 24 0f          	inc    BYTE PTR [esp+0xf]
c002574b:	e9 6b ff ff ff       	jmp    c00256bb <APIC::APIC()+0x39>
c0025750:	c6 05 40 1d 03 c0 01 	mov    BYTE PTR ds:0xc0031d40,0x1
c0025757:	90                   	nop
c0025758:	83 c4 18             	add    esp,0x18
c002575b:	5b                   	pop    ebx
c002575c:	c3                   	ret    
c002575d:	90                   	nop

c002575e <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c002575e:	55                   	push   ebp
c002575f:	89 e5                	mov    ebp,esp
c0025761:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025764:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c002576a:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c002576d:	72 1d                	jb     c002578c <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c002576f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025772:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c0025778:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002577b:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c0025781:	01 d0                	add    eax,edx
c0025783:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c0025786:	73 04                	jae    c002578c <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c0025788:	b0 01                	mov    al,0x1
c002578a:	eb 02                	jmp    c002578e <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c002578c:	b0 00                	mov    al,0x0
c002578e:	5d                   	pop    ebp
c002578f:	c3                   	ret    

c0025790 <IOAPIC::read(int)>:
c0025790:	55                   	push   ebp
c0025791:	89 e5                	mov    ebp,esp
c0025793:	83 ec 10             	sub    esp,0x10
c0025796:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025799:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c002579f:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c00257a2:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00257a5:	0f b6 d0             	movzx  edx,al
c00257a8:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00257ab:	89 10                	mov    DWORD PTR [eax],edx
c00257ad:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00257b0:	83 c0 10             	add    eax,0x10
c00257b3:	8b 00                	mov    eax,DWORD PTR [eax]
c00257b5:	c9                   	leave  
c00257b6:	c3                   	ret    
c00257b7:	90                   	nop

c00257b8 <IOAPIC::open(int, int, void*)>:
c00257b8:	55                   	push   ebp
c00257b9:	89 e5                	mov    ebp,esp
c00257bb:	57                   	push   edi
c00257bc:	56                   	push   esi
c00257bd:	53                   	push   ebx
c00257be:	83 ec 0c             	sub    esp,0xc
c00257c1:	83 ec 0c             	sub    esp,0xc
c00257c4:	68 67 c5 02 c0       	push   0xc002c567
c00257c9:	e8 fb ce fe ff       	call   c00126c9 <Dbg::kprintf(char const*, ...)>
c00257ce:	83 c4 10             	add    esp,0x10
c00257d1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00257d4:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00257d7:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c00257dd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00257e0:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00257e6:	8b 14 85 60 03 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcfca0]
c00257ed:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00257f0:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c00257f6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00257f9:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00257ff:	8b 14 85 e0 03 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcfc20]
c0025806:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025809:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c002580f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025812:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0025818:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002581b:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0025821:	0f b6 f8             	movzx  edi,al
c0025824:	89 d0                	mov    eax,edx
c0025826:	ba 00 00 00 00       	mov    edx,0x0
c002582b:	89 c1                	mov    ecx,eax
c002582d:	80 e5 ff             	and    ch,0xff
c0025830:	89 cb                	mov    ebx,ecx
c0025832:	0f b6 f2             	movzx  esi,dl
c0025835:	89 d8                	mov    eax,ebx
c0025837:	89 f2                	mov    edx,esi
c0025839:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c002583c:	8d 5f 08             	lea    ebx,[edi+0x8]
c002583f:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0025843:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0025847:	83 e0 00             	and    eax,0x0
c002584a:	09 d0                	or     eax,edx
c002584c:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0025850:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025853:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0025859:	8d 50 01             	lea    edx,[eax+0x1]
c002585c:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c002585f:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0025865:	0f b6 d0             	movzx  edx,al
c0025868:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002586b:	83 c2 08             	add    edx,0x8
c002586e:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0025872:	0f b6 c9             	movzx  ecx,cl
c0025875:	81 c9 00 ad de 00    	or     ecx,0xdead00
c002587b:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c002587f:	83 ec 08             	sub    esp,0x8
c0025882:	6a 01                	push   0x1
c0025884:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025887:	e8 04 ff ff ff       	call   c0025790 <IOAPIC::read(int)>
c002588c:	83 c4 10             	add    esp,0x10
c002588f:	c1 f8 10             	sar    eax,0x10
c0025892:	0f b6 c0             	movzx  eax,al
c0025895:	8d 50 01             	lea    edx,[eax+0x1]
c0025898:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002589b:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c00258a1:	b8 00 00 00 00       	mov    eax,0x0
c00258a6:	8d 65 f4             	lea    esp,[ebp-0xc]
c00258a9:	5b                   	pop    ebx
c00258aa:	5e                   	pop    esi
c00258ab:	5f                   	pop    edi
c00258ac:	5d                   	pop    ebp
c00258ad:	c3                   	ret    

c00258ae <IOAPIC::write(int, int)>:
c00258ae:	55                   	push   ebp
c00258af:	89 e5                	mov    ebp,esp
c00258b1:	83 ec 10             	sub    esp,0x10
c00258b4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00258b7:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00258bd:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c00258c0:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00258c3:	0f b6 d0             	movzx  edx,al
c00258c6:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00258c9:	89 10                	mov    DWORD PTR [eax],edx
c00258cb:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00258ce:	8d 50 10             	lea    edx,[eax+0x10]
c00258d1:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00258d4:	89 02                	mov    DWORD PTR [edx],eax
c00258d6:	90                   	nop
c00258d7:	c9                   	leave  
c00258d8:	c3                   	ret    
c00258d9:	90                   	nop

c00258da <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c00258da:	55                   	push   ebp
c00258db:	89 e5                	mov    ebp,esp
c00258dd:	53                   	push   ebx
c00258de:	83 ec 2c             	sub    esp,0x2c
c00258e1:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00258e4:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c00258e7:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c00258ea:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c00258ed:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c00258f0:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00258f3:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c00258f6:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c00258f9:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c00258fc:	88 d8                	mov    al,bl
c00258fe:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c0025901:	88 c8                	mov    al,cl
c0025903:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c0025906:	88 d0                	mov    al,dl
c0025908:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c002590b:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c002590f:	83 c0 08             	add    eax,0x8
c0025912:	01 c0                	add    eax,eax
c0025914:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0025917:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c002591b:	83 c0 08             	add    eax,0x8
c002591e:	01 c0                	add    eax,eax
c0025920:	40                   	inc    eax
c0025921:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0025924:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0025927:	50                   	push   eax
c0025928:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002592b:	e8 60 fe ff ff       	call   c0025790 <IOAPIC::read(int)>
c0025930:	83 c4 08             	add    esp,0x8
c0025933:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0025936:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c002593d:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0025940:	c1 e0 18             	shl    eax,0x18
c0025943:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c0025946:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0025949:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c002594c:	52                   	push   edx
c002594d:	50                   	push   eax
c002594e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025951:	e8 58 ff ff ff       	call   c00258ae <IOAPIC::write(int, int)>
c0025956:	83 c4 0c             	add    esp,0xc
c0025959:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c002595c:	50                   	push   eax
c002595d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025960:	e8 2b fe ff ff       	call   c0025790 <IOAPIC::read(int)>
c0025965:	83 c4 08             	add    esp,0x8
c0025968:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c002596b:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c0025972:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c0025979:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c0025980:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c0025984:	74 09                	je     c002598f <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb5>
c0025986:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c002598d:	eb 07                	jmp    c0025996 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xbc>
c002598f:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c0025996:	80 7d d0 00          	cmp    BYTE PTR [ebp-0x30],0x0
c002599a:	74 09                	je     c00259a5 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xcb>
c002599c:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c00259a3:	eb 07                	jmp    c00259ac <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd2>
c00259a5:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c00259ac:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c00259b3:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c00259b7:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c00259ba:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c00259bd:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00259c0:	52                   	push   edx
c00259c1:	50                   	push   eax
c00259c2:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00259c5:	e8 e4 fe ff ff       	call   c00258ae <IOAPIC::write(int, int)>
c00259ca:	83 c4 0c             	add    esp,0xc
c00259cd:	90                   	nop
c00259ce:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c00259d1:	c9                   	leave  
c00259d2:	c3                   	ret    
c00259d3:	90                   	nop

c00259d4 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c00259d4:	55                   	push   ebp
c00259d5:	89 e5                	mov    ebp,esp
c00259d7:	57                   	push   edi
c00259d8:	56                   	push   esi
c00259d9:	53                   	push   ebx
c00259da:	83 ec 2c             	sub    esp,0x2c
c00259dd:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c00259e0:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c00259e3:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c00259e7:	c6 45 e6 00          	mov    BYTE PTR [ebp-0x1a],0x0
c00259eb:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c00259ef:	74 5a                	je     c0025a4b <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c00259f1:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c00259f5:	7f 44                	jg     c0025a3b <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x67>
c00259f7:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00259fa:	05 00 cc 02 c0       	add    eax,0xc002cc00
c00259ff:	8a 00                	mov    al,BYTE PTR [eax]
c0025a01:	0f b6 c0             	movzx  eax,al
c0025a04:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0025a07:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025a0a:	66 8b 84 00 00 03 03 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffcfd00]
c0025a12:	0f b7 c0             	movzx  eax,ax
c0025a15:	83 e0 02             	and    eax,0x2
c0025a18:	85 c0                	test   eax,eax
c0025a1a:	74 04                	je     c0025a20 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x4c>
c0025a1c:	c6 45 e6 01          	mov    BYTE PTR [ebp-0x1a],0x1
c0025a20:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025a23:	66 8b 84 00 00 03 03 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffcfd00]
c0025a2b:	0f b7 c0             	movzx  eax,ax
c0025a2e:	83 e0 08             	and    eax,0x8
c0025a31:	85 c0                	test   eax,eax
c0025a33:	74 16                	je     c0025a4b <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0025a35:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c0025a39:	eb 10                	jmp    c0025a4b <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0025a3b:	83 ec 0c             	sub    esp,0xc
c0025a3e:	68 78 c5 02 c0       	push   0xc002c578
c0025a43:	e8 ed 43 ff ff       	call   c0019e35 <Krnl::panic(char const*)>
c0025a48:	83 c4 10             	add    esp,0x10
c0025a4b:	c6 45 e5 00          	mov    BYTE PTR [ebp-0x1b],0x0
c0025a4f:	a1 00 1d 03 c0       	mov    eax,ds:0xc0031d00
c0025a54:	83 ec 08             	sub    esp,0x8
c0025a57:	50                   	push   eax
c0025a58:	68 b0 c5 02 c0       	push   0xc002c5b0
c0025a5d:	e8 67 cc fe ff       	call   c00126c9 <Dbg::kprintf(char const*, ...)>
c0025a62:	83 c4 10             	add    esp,0x10
c0025a65:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
c0025a6c:	a1 00 1d 03 c0       	mov    eax,ds:0xc0031d00
c0025a71:	39 45 e0             	cmp    DWORD PTR [ebp-0x20],eax
c0025a74:	7d 67                	jge    c0025add <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c0025a76:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0025a79:	8b 04 85 20 1d 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce2e0]
c0025a80:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025a83:	83 ec 08             	sub    esp,0x8
c0025a86:	52                   	push   edx
c0025a87:	50                   	push   eax
c0025a88:	e8 d1 fc ff ff       	call   c002575e <IOAPIC::handlesGSIWithNumber(unsigned int)>
c0025a8d:	83 c4 10             	add    esp,0x10
c0025a90:	84 c0                	test   al,al
c0025a92:	74 44                	je     c0025ad8 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x104>
c0025a94:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0025a97:	8b 1c 85 20 1d 03 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffce2e0]
c0025a9e:	0f b6 45 e6          	movzx  eax,BYTE PTR [ebp-0x1a]
c0025aa2:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0025aa5:	0f b6 7d e7          	movzx  edi,BYTE PTR [ebp-0x19]
c0025aa9:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025aac:	83 c0 20             	add    eax,0x20
c0025aaf:	0f b6 f0             	movzx  esi,al
c0025ab2:	b8 00 00 00 00       	mov    eax,0x0
c0025ab7:	99                   	cdq    
c0025ab8:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0025abb:	0f b6 c9             	movzx  ecx,cl
c0025abe:	83 ec 04             	sub    esp,0x4
c0025ac1:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c0025ac4:	57                   	push   edi
c0025ac5:	56                   	push   esi
c0025ac6:	52                   	push   edx
c0025ac7:	50                   	push   eax
c0025ac8:	51                   	push   ecx
c0025ac9:	53                   	push   ebx
c0025aca:	e8 0b fe ff ff       	call   c00258da <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c0025acf:	83 c4 20             	add    esp,0x20
c0025ad2:	c6 45 e5 01          	mov    BYTE PTR [ebp-0x1b],0x1
c0025ad6:	eb 05                	jmp    c0025add <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c0025ad8:	ff 45 e0             	inc    DWORD PTR [ebp-0x20]
c0025adb:	eb 8f                	jmp    c0025a6c <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x98>
c0025add:	8a 45 e5             	mov    al,BYTE PTR [ebp-0x1b]
c0025ae0:	83 f0 01             	xor    eax,0x1
c0025ae3:	84 c0                	test   al,al
c0025ae5:	74 10                	je     c0025af7 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x123>
c0025ae7:	83 ec 0c             	sub    esp,0xc
c0025aea:	68 c7 c5 02 c0       	push   0xc002c5c7
c0025aef:	e8 41 43 ff ff       	call   c0019e35 <Krnl::panic(char const*)>
c0025af4:	83 c4 10             	add    esp,0x10
c0025af7:	83 45 0c 20          	add    DWORD PTR [ebp+0xc],0x20
c0025afb:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
c0025b02:	83 7d dc 03          	cmp    DWORD PTR [ebp-0x24],0x3
c0025b06:	7f 65                	jg     c0025b6d <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x199>
c0025b08:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025b0b:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025b0e:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0025b15:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0025b18:	01 ca                	add    edx,ecx
c0025b1a:	83 c2 54             	add    edx,0x54
c0025b1d:	8b 44 90 08          	mov    eax,DWORD PTR [eax+edx*4+0x8]
c0025b21:	85 c0                	test   eax,eax
c0025b23:	75 43                	jne    c0025b68 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x194>
c0025b25:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025b28:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025b2b:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0025b32:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0025b35:	01 ca                	add    edx,ecx
c0025b37:	8d 4a 54             	lea    ecx,[edx+0x54]
c0025b3a:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0025b3d:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c0025b41:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025b44:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025b47:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0025b4e:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0025b51:	01 ca                	add    edx,ecx
c0025b53:	8d 8a 54 04 00 00    	lea    ecx,[edx+0x454]
c0025b59:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0025b5c:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c0025b60:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025b63:	83 e8 20             	sub    eax,0x20
c0025b66:	eb 1a                	jmp    c0025b82 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1ae>
c0025b68:	ff 45 dc             	inc    DWORD PTR [ebp-0x24]
c0025b6b:	eb 95                	jmp    c0025b02 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12e>
c0025b6d:	83 ec 0c             	sub    esp,0xc
c0025b70:	68 d4 c5 02 c0       	push   0xc002c5d4
c0025b75:	e8 bb 42 ff ff       	call   c0019e35 <Krnl::panic(char const*)>
c0025b7a:	83 c4 10             	add    esp,0x10
c0025b7d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0025b82:	8d 65 f4             	lea    esp,[ebp-0xc]
c0025b85:	5b                   	pop    ebx
c0025b86:	5e                   	pop    esi
c0025b87:	5f                   	pop    edi
c0025b88:	5d                   	pop    ebp
c0025b89:	c3                   	ret    

c0025b8a <PIC::disable()>:
c0025b8a:	55                   	push   ebp
c0025b8b:	89 e5                	mov    ebp,esp
c0025b8d:	83 ec 10             	sub    esp,0x10
c0025b90:	66 c7 45 fa a1 00    	mov    WORD PTR [ebp-0x6],0xa1
c0025b96:	c6 45 f9 ff          	mov    BYTE PTR [ebp-0x7],0xff
c0025b9a:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0025b9d:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c0025ba1:	ee                   	out    dx,al
c0025ba2:	66 c7 45 fe 21 00    	mov    WORD PTR [ebp-0x2],0x21
c0025ba8:	c6 45 fd ff          	mov    BYTE PTR [ebp-0x3],0xff
c0025bac:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c0025baf:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0025bb3:	ee                   	out    dx,al
c0025bb4:	90                   	nop
c0025bb5:	c9                   	leave  
c0025bb6:	c3                   	ret    
c0025bb7:	90                   	nop

c0025bb8 <PIC::close(int, int, void*)>:
c0025bb8:	55                   	push   ebp
c0025bb9:	89 e5                	mov    ebp,esp
c0025bbb:	83 ec 08             	sub    esp,0x8
c0025bbe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025bc1:	8b 00                	mov    eax,DWORD PTR [eax]
c0025bc3:	83 c0 3c             	add    eax,0x3c
c0025bc6:	8b 00                	mov    eax,DWORD PTR [eax]
c0025bc8:	83 ec 0c             	sub    esp,0xc
c0025bcb:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025bce:	ff d0                	call   eax
c0025bd0:	83 c4 10             	add    esp,0x10
c0025bd3:	b8 00 00 00 00       	mov    eax,0x0
c0025bd8:	c9                   	leave  
c0025bd9:	c3                   	ret    

c0025bda <PIC::PIC()>:
c0025bda:	83 ec 0c             	sub    esp,0xc
c0025bdd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025be1:	83 ec 08             	sub    esp,0x8
c0025be4:	68 80 c6 02 c0       	push   0xc002c680
c0025be9:	50                   	push   eax
c0025bea:	e8 81 e8 fe ff       	call   c0014470 <InterruptController::InterruptController(char const*)>
c0025bef:	83 c4 10             	add    esp,0x10
c0025bf2:	ba ac c6 02 c0       	mov    edx,0xc002c6ac
c0025bf7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025bfb:	89 10                	mov    DWORD PTR [eax],edx
c0025bfd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025c01:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025c07:	0f b6 d0             	movzx  edx,al
c0025c0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025c0e:	66 c7 44 90 04 20 00 	mov    WORD PTR [eax+edx*4+0x4],0x20
c0025c15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025c19:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025c1f:	0f b6 d0             	movzx  edx,al
c0025c22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025c26:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0025c2b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025c2f:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025c35:	8d 50 01             	lea    edx,[eax+0x1]
c0025c38:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0025c3c:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0025c42:	0f b6 d0             	movzx  edx,al
c0025c45:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025c49:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0025c4d:	83 e1 3f             	and    ecx,0x3f
c0025c50:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0025c54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025c58:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025c5e:	0f b6 d0             	movzx  edx,al
c0025c61:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025c65:	66 c7 44 90 04 a0 00 	mov    WORD PTR [eax+edx*4+0x4],0xa0
c0025c6c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025c70:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025c76:	0f b6 d0             	movzx  edx,al
c0025c79:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025c7d:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0025c82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025c86:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025c8c:	8d 50 01             	lea    edx,[eax+0x1]
c0025c8f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0025c93:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0025c99:	0f b6 d0             	movzx  edx,al
c0025c9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025ca0:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0025ca4:	83 e1 3f             	and    ecx,0x3f
c0025ca7:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0025cab:	90                   	nop
c0025cac:	83 c4 0c             	add    esp,0xc
c0025caf:	c3                   	ret    

c0025cb0 <PIC::ioWait()>:
c0025cb0:	eb 00                	jmp    c0025cb2 <PIC::ioWait()+0x2>
c0025cb2:	eb 00                	jmp    c0025cb4 <PIC::ioWait()+0x4>
c0025cb4:	90                   	nop
c0025cb5:	c3                   	ret    

c0025cb6 <PIC::getIRQReg(int)>:
c0025cb6:	55                   	push   ebp
c0025cb7:	89 e5                	mov    ebp,esp
c0025cb9:	83 ec 10             	sub    esp,0x10
c0025cbc:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025cbf:	0f b6 c0             	movzx  eax,al
c0025cc2:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c0025cc8:	88 45 f1             	mov    BYTE PTR [ebp-0xf],al
c0025ccb:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0025cce:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0025cd2:	ee                   	out    dx,al
c0025cd3:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025cd6:	0f b6 c0             	movzx  eax,al
c0025cd9:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c0025cdf:	88 45 f5             	mov    BYTE PTR [ebp-0xb],al
c0025ce2:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0025ce5:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0025ce9:	ee                   	out    dx,al
c0025cea:	66 c7 45 fa a0 00    	mov    WORD PTR [ebp-0x6],0xa0
c0025cf0:	66 8b 45 fa          	mov    ax,WORD PTR [ebp-0x6]
c0025cf4:	89 c2                	mov    edx,eax
c0025cf6:	ec                   	in     al,dx
c0025cf7:	88 45 f9             	mov    BYTE PTR [ebp-0x7],al
c0025cfa:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0025cfd:	0f b6 c0             	movzx  eax,al
c0025d00:	c1 e0 08             	shl    eax,0x8
c0025d03:	89 c1                	mov    ecx,eax
c0025d05:	66 c7 45 fe 20 00    	mov    WORD PTR [ebp-0x2],0x20
c0025d0b:	66 8b 45 fe          	mov    ax,WORD PTR [ebp-0x2]
c0025d0f:	89 c2                	mov    edx,eax
c0025d11:	ec                   	in     al,dx
c0025d12:	88 45 fd             	mov    BYTE PTR [ebp-0x3],al
c0025d15:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c0025d18:	0f b6 c0             	movzx  eax,al
c0025d1b:	09 c8                	or     eax,ecx
c0025d1d:	c9                   	leave  
c0025d1e:	c3                   	ret    
c0025d1f:	90                   	nop

c0025d20 <PIC::eoi(unsigned char)>:
c0025d20:	55                   	push   ebp
c0025d21:	89 e5                	mov    ebp,esp
c0025d23:	83 ec 14             	sub    esp,0x14
c0025d26:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025d29:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
c0025d2c:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c0025d30:	75 1e                	jne    c0025d50 <PIC::eoi(unsigned char)+0x30>
c0025d32:	6a 0b                	push   0xb
c0025d34:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025d37:	e8 7a ff ff ff       	call   c0025cb6 <PIC::getIRQReg(int)>
c0025d3c:	83 c4 08             	add    esp,0x8
c0025d3f:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0025d43:	0f b7 45 fe          	movzx  eax,WORD PTR [ebp-0x2]
c0025d47:	25 80 00 00 00       	and    eax,0x80
c0025d4c:	85 c0                	test   eax,eax
c0025d4e:	74 5f                	je     c0025daf <PIC::eoi(unsigned char)+0x8f>
c0025d50:	80 7d ec 0f          	cmp    BYTE PTR [ebp-0x14],0xf
c0025d54:	75 2d                	jne    c0025d83 <PIC::eoi(unsigned char)+0x63>
c0025d56:	6a 0b                	push   0xb
c0025d58:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025d5b:	e8 56 ff ff ff       	call   c0025cb6 <PIC::getIRQReg(int)>
c0025d60:	83 c4 08             	add    esp,0x8
c0025d63:	66 89 45 fc          	mov    WORD PTR [ebp-0x4],ax
c0025d67:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0025d6a:	66 85 c0             	test   ax,ax
c0025d6d:	78 14                	js     c0025d83 <PIC::eoi(unsigned char)+0x63>
c0025d6f:	66 c7 45 fa 20 00    	mov    WORD PTR [ebp-0x6],0x20
c0025d75:	c6 45 f9 20          	mov    BYTE PTR [ebp-0x7],0x20
c0025d79:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0025d7c:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c0025d80:	ee                   	out    dx,al
c0025d81:	eb 2d                	jmp    c0025db0 <PIC::eoi(unsigned char)+0x90>
c0025d83:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c0025d87:	76 12                	jbe    c0025d9b <PIC::eoi(unsigned char)+0x7b>
c0025d89:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c0025d8f:	c6 45 f5 20          	mov    BYTE PTR [ebp-0xb],0x20
c0025d93:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0025d96:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0025d9a:	ee                   	out    dx,al
c0025d9b:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c0025da1:	c6 45 f1 20          	mov    BYTE PTR [ebp-0xf],0x20
c0025da5:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0025da8:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0025dac:	ee                   	out    dx,al
c0025dad:	eb 01                	jmp    c0025db0 <PIC::eoi(unsigned char)+0x90>
c0025daf:	90                   	nop
c0025db0:	c9                   	leave  
c0025db1:	c3                   	ret    

c0025db2 <PIC::remap()>:
c0025db2:	55                   	push   ebp
c0025db3:	89 e5                	mov    ebp,esp
c0025db5:	83 ec 48             	sub    esp,0x48
c0025db8:	c7 45 f4 20 00 00 00 	mov    DWORD PTR [ebp-0xc],0x20
c0025dbf:	c7 45 f0 28 00 00 00 	mov    DWORD PTR [ebp-0x10],0x28
c0025dc6:	66 c7 45 c0 21 00    	mov    WORD PTR [ebp-0x40],0x21
c0025dcc:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c0025dcf:	89 c2                	mov    edx,eax
c0025dd1:	ec                   	in     al,dx
c0025dd2:	88 45 bf             	mov    BYTE PTR [ebp-0x41],al
c0025dd5:	8a 45 bf             	mov    al,BYTE PTR [ebp-0x41]
c0025dd8:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c0025ddb:	66 c7 45 c4 a1 00    	mov    WORD PTR [ebp-0x3c],0xa1
c0025de1:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
c0025de4:	89 c2                	mov    edx,eax
c0025de6:	ec                   	in     al,dx
c0025de7:	88 45 c3             	mov    BYTE PTR [ebp-0x3d],al
c0025dea:	8a 45 c3             	mov    al,BYTE PTR [ebp-0x3d]
c0025ded:	88 45 ee             	mov    BYTE PTR [ebp-0x12],al
c0025df0:	66 c7 45 c8 20 00    	mov    WORD PTR [ebp-0x38],0x20
c0025df6:	c6 45 c7 11          	mov    BYTE PTR [ebp-0x39],0x11
c0025dfa:	8a 45 c7             	mov    al,BYTE PTR [ebp-0x39]
c0025dfd:	8b 55 c8             	mov    edx,DWORD PTR [ebp-0x38]
c0025e00:	ee                   	out    dx,al
c0025e01:	83 ec 0c             	sub    esp,0xc
c0025e04:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025e07:	e8 a4 fe ff ff       	call   c0025cb0 <PIC::ioWait()>
c0025e0c:	83 c4 10             	add    esp,0x10
c0025e0f:	66 c7 45 cc a0 00    	mov    WORD PTR [ebp-0x34],0xa0
c0025e15:	c6 45 cb 11          	mov    BYTE PTR [ebp-0x35],0x11
c0025e19:	8a 45 cb             	mov    al,BYTE PTR [ebp-0x35]
c0025e1c:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0025e1f:	ee                   	out    dx,al
c0025e20:	83 ec 0c             	sub    esp,0xc
c0025e23:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025e26:	e8 85 fe ff ff       	call   c0025cb0 <PIC::ioWait()>
c0025e2b:	83 c4 10             	add    esp,0x10
c0025e2e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0025e31:	0f b6 c0             	movzx  eax,al
c0025e34:	66 c7 45 d0 21 00    	mov    WORD PTR [ebp-0x30],0x21
c0025e3a:	88 45 cf             	mov    BYTE PTR [ebp-0x31],al
c0025e3d:	8a 45 cf             	mov    al,BYTE PTR [ebp-0x31]
c0025e40:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c0025e43:	ee                   	out    dx,al
c0025e44:	83 ec 0c             	sub    esp,0xc
c0025e47:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025e4a:	e8 61 fe ff ff       	call   c0025cb0 <PIC::ioWait()>
c0025e4f:	83 c4 10             	add    esp,0x10
c0025e52:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0025e55:	0f b6 c0             	movzx  eax,al
c0025e58:	66 c7 45 d4 a1 00    	mov    WORD PTR [ebp-0x2c],0xa1
c0025e5e:	88 45 d3             	mov    BYTE PTR [ebp-0x2d],al
c0025e61:	8a 45 d3             	mov    al,BYTE PTR [ebp-0x2d]
c0025e64:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0025e67:	ee                   	out    dx,al
c0025e68:	83 ec 0c             	sub    esp,0xc
c0025e6b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025e6e:	e8 3d fe ff ff       	call   c0025cb0 <PIC::ioWait()>
c0025e73:	83 c4 10             	add    esp,0x10
c0025e76:	66 c7 45 d8 21 00    	mov    WORD PTR [ebp-0x28],0x21
c0025e7c:	c6 45 d7 04          	mov    BYTE PTR [ebp-0x29],0x4
c0025e80:	8a 45 d7             	mov    al,BYTE PTR [ebp-0x29]
c0025e83:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
c0025e86:	ee                   	out    dx,al
c0025e87:	83 ec 0c             	sub    esp,0xc
c0025e8a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025e8d:	e8 1e fe ff ff       	call   c0025cb0 <PIC::ioWait()>
c0025e92:	83 c4 10             	add    esp,0x10
c0025e95:	66 c7 45 dc a1 00    	mov    WORD PTR [ebp-0x24],0xa1
c0025e9b:	c6 45 db 02          	mov    BYTE PTR [ebp-0x25],0x2
c0025e9f:	8a 45 db             	mov    al,BYTE PTR [ebp-0x25]
c0025ea2:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0025ea5:	ee                   	out    dx,al
c0025ea6:	83 ec 0c             	sub    esp,0xc
c0025ea9:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025eac:	e8 ff fd ff ff       	call   c0025cb0 <PIC::ioWait()>
c0025eb1:	83 c4 10             	add    esp,0x10
c0025eb4:	66 c7 45 e0 21 00    	mov    WORD PTR [ebp-0x20],0x21
c0025eba:	c6 45 df 01          	mov    BYTE PTR [ebp-0x21],0x1
c0025ebe:	8a 45 df             	mov    al,BYTE PTR [ebp-0x21]
c0025ec1:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0025ec4:	ee                   	out    dx,al
c0025ec5:	83 ec 0c             	sub    esp,0xc
c0025ec8:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025ecb:	e8 e0 fd ff ff       	call   c0025cb0 <PIC::ioWait()>
c0025ed0:	83 c4 10             	add    esp,0x10
c0025ed3:	66 c7 45 e4 a1 00    	mov    WORD PTR [ebp-0x1c],0xa1
c0025ed9:	c6 45 e3 01          	mov    BYTE PTR [ebp-0x1d],0x1
c0025edd:	8a 45 e3             	mov    al,BYTE PTR [ebp-0x1d]
c0025ee0:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0025ee3:	ee                   	out    dx,al
c0025ee4:	83 ec 0c             	sub    esp,0xc
c0025ee7:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025eea:	e8 c1 fd ff ff       	call   c0025cb0 <PIC::ioWait()>
c0025eef:	83 c4 10             	add    esp,0x10
c0025ef2:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
c0025ef6:	66 c7 45 e8 21 00    	mov    WORD PTR [ebp-0x18],0x21
c0025efc:	88 45 e7             	mov    BYTE PTR [ebp-0x19],al
c0025eff:	8a 45 e7             	mov    al,BYTE PTR [ebp-0x19]
c0025f02:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0025f05:	ee                   	out    dx,al
c0025f06:	0f b6 45 ee          	movzx  eax,BYTE PTR [ebp-0x12]
c0025f0a:	66 c7 45 ec a1 00    	mov    WORD PTR [ebp-0x14],0xa1
c0025f10:	88 45 eb             	mov    BYTE PTR [ebp-0x15],al
c0025f13:	8a 45 eb             	mov    al,BYTE PTR [ebp-0x15]
c0025f16:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0025f19:	ee                   	out    dx,al
c0025f1a:	90                   	nop
c0025f1b:	c9                   	leave  
c0025f1c:	c3                   	ret    
c0025f1d:	90                   	nop

c0025f1e <PIC::open(int, int, void*)>:
c0025f1e:	55                   	push   ebp
c0025f1f:	89 e5                	mov    ebp,esp
c0025f21:	83 ec 18             	sub    esp,0x18
c0025f24:	66 c7 45 f2 21 00    	mov    WORD PTR [ebp-0xe],0x21
c0025f2a:	c6 45 f1 00          	mov    BYTE PTR [ebp-0xf],0x0
c0025f2e:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0025f31:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0025f35:	ee                   	out    dx,al
c0025f36:	66 c7 45 f6 a1 00    	mov    WORD PTR [ebp-0xa],0xa1
c0025f3c:	c6 45 f5 00          	mov    BYTE PTR [ebp-0xb],0x0
c0025f40:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0025f43:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0025f47:	ee                   	out    dx,al
c0025f48:	83 ec 0c             	sub    esp,0xc
c0025f4b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025f4e:	e8 5f fe ff ff       	call   c0025db2 <PIC::remap()>
c0025f53:	83 c4 10             	add    esp,0x10
c0025f56:	b8 00 00 00 00       	mov    eax,0x0
c0025f5b:	c9                   	leave  
c0025f5c:	c3                   	ret    
c0025f5d:	90                   	nop

c0025f5e <APICTimer::close(int, int, void*)>:
c0025f5e:	b8 00 00 00 00       	mov    eax,0x0
c0025f63:	c3                   	ret    

c0025f64 <apicTimerHandler(regs*, void*)>:
c0025f64:	83 ec 0c             	sub    esp,0xc
c0025f67:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025f6b:	8b 00                	mov    eax,DWORD PTR [eax]
c0025f6d:	99                   	cdq    
c0025f6e:	52                   	push   edx
c0025f6f:	50                   	push   eax
c0025f70:	6a 00                	push   0x0
c0025f72:	68 00 ca 9a 3b       	push   0x3b9aca00
c0025f77:	e8 98 07 00 00       	call   c0026714 <__udivdi3>
c0025f7c:	83 c4 10             	add    esp,0x10
c0025f7f:	83 ec 08             	sub    esp,0x8
c0025f82:	52                   	push   edx
c0025f83:	50                   	push   eax
c0025f84:	e8 3e 06 ff ff       	call   c00165c7 <timerHandler(unsigned long long)>
c0025f89:	83 c4 10             	add    esp,0x10
c0025f8c:	90                   	nop
c0025f8d:	83 c4 0c             	add    esp,0xc
c0025f90:	c3                   	ret    
c0025f91:	90                   	nop

c0025f92 <APICTimer::write(int)>:
c0025f92:	53                   	push   ebx
c0025f93:	83 ec 28             	sub    esp,0x28
c0025f96:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0025f9a:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0025f9e:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0025fa4:	a1 a8 d9 02 c0       	mov    eax,ds:0xc002d9a8
c0025fa9:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0025faf:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0025fb5:	83 ec 0c             	sub    esp,0xc
c0025fb8:	50                   	push   eax
c0025fb9:	e8 de f4 ff ff       	call   c002549c <APIC::getBase()>
c0025fbe:	83 c4 10             	add    esp,0x10
c0025fc1:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0025fc5:	a1 10 e0 02 c0       	mov    eax,ds:0xc002e010
c0025fca:	8b 15 14 e0 02 c0    	mov    edx,DWORD PTR ds:0xc002e014
c0025fd0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0025fd4:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0025fd8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025fdc:	05 e0 03 00 00       	add    eax,0x3e0
c0025fe1:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c0025fe7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025feb:	05 80 03 00 00       	add    eax,0x380
c0025ff0:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0025ff6:	fb                   	sti    
c0025ff7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025ffb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0025fff:	05 00 ca 9a 3b       	add    eax,0x3b9aca00
c0026004:	83 d2 00             	adc    edx,0x0
c0026007:	89 c1                	mov    ecx,eax
c0026009:	89 d3                	mov    ebx,edx
c002600b:	a1 10 e0 02 c0       	mov    eax,ds:0xc002e010
c0026010:	8b 15 14 e0 02 c0    	mov    edx,DWORD PTR ds:0xc002e014
c0026016:	39 c8                	cmp    eax,ecx
c0026018:	89 d0                	mov    eax,edx
c002601a:	19 d8                	sbb    eax,ebx
c002601c:	73 02                	jae    c0026020 <APICTimer::write(int)+0x8e>
c002601e:	eb d7                	jmp    c0025ff7 <APICTimer::write(int)+0x65>
c0026020:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026024:	05 20 03 00 00       	add    eax,0x320
c0026029:	c7 00 00 00 01 00    	mov    DWORD PTR [eax],0x10000
c002602f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026033:	05 90 03 00 00       	add    eax,0x390
c0026038:	8b 00                	mov    eax,DWORD PTR [eax]
c002603a:	f7 d0                	not    eax
c002603c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0026040:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0026044:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0026048:	ba 00 00 00 00       	mov    edx,0x0
c002604d:	f7 f3                	div    ebx
c002604f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0026053:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0026057:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c002605d:	0d 00 00 02 00       	or     eax,0x20000
c0026062:	89 c2                	mov    edx,eax
c0026064:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026068:	05 20 03 00 00       	add    eax,0x320
c002606d:	89 10                	mov    DWORD PTR [eax],edx
c002606f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026073:	05 e0 03 00 00       	add    eax,0x3e0
c0026078:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c002607e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026082:	05 80 03 00 00       	add    eax,0x380
c0026087:	89 c2                	mov    edx,eax
c0026089:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002608d:	89 02                	mov    DWORD PTR [edx],eax
c002608f:	90                   	nop
c0026090:	83 c4 28             	add    esp,0x28
c0026093:	5b                   	pop    ebx
c0026094:	c3                   	ret    
c0026095:	90                   	nop

c0026096 <APICTimer::open(int, int, void*)>:
c0026096:	57                   	push   edi
c0026097:	56                   	push   esi
c0026098:	53                   	push   ebx
c0026099:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002609d:	8b 00                	mov    eax,DWORD PTR [eax]
c002609f:	83 c0 24             	add    eax,0x24
c00260a2:	8b 00                	mov    eax,DWORD PTR [eax]
c00260a4:	83 ec 08             	sub    esp,0x8
c00260a7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00260ab:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00260af:	ff d0                	call   eax
c00260b1:	83 c4 10             	add    esp,0x10
c00260b4:	a1 a8 d9 02 c0       	mov    eax,ds:0xc002d9a8
c00260b9:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00260bf:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c00260c5:	83 ec 0c             	sub    esp,0xc
c00260c8:	50                   	push   eax
c00260c9:	e8 ce f3 ff ff       	call   c002549c <APIC::getBase()>
c00260ce:	83 c4 10             	add    esp,0x10
c00260d1:	8d 90 00 03 00 00    	lea    edx,[eax+0x300]
c00260d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00260db:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c00260e1:	0f b6 f8             	movzx  edi,al
c00260e4:	89 d0                	mov    eax,edx
c00260e6:	ba 00 00 00 00       	mov    edx,0x0
c00260eb:	89 c1                	mov    ecx,eax
c00260ed:	80 e5 ff             	and    ch,0xff
c00260f0:	89 cb                	mov    ebx,ecx
c00260f2:	0f b6 f2             	movzx  esi,dl
c00260f5:	89 d8                	mov    eax,ebx
c00260f7:	89 f2                	mov    edx,esi
c00260f9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00260fd:	8d 5f 08             	lea    ebx,[edi+0x8]
c0026100:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0026104:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0026108:	83 e0 00             	and    eax,0x0
c002610b:	09 d0                	or     eax,edx
c002610d:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0026111:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026115:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c002611b:	8d 50 01             	lea    edx,[eax+0x1]
c002611e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0026122:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0026128:	0f b6 d0             	movzx  edx,al
c002612b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002612f:	83 c2 08             	add    edx,0x8
c0026132:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0026136:	0f b6 c9             	movzx  ecx,cl
c0026139:	81 c9 00 00 01 00    	or     ecx,0x10000
c002613f:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0026143:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026147:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c002614b:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0026151:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026155:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0026159:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c002615f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0026163:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c0026169:	83 ec 0c             	sub    esp,0xc
c002616c:	51                   	push   ecx
c002616d:	6a 01                	push   0x1
c002616f:	68 64 5f 02 c0       	push   0xc0025f64
c0026174:	52                   	push   edx
c0026175:	50                   	push   eax
c0026176:	e8 ff d8 fe ff       	call   c0013a7a <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c002617b:	83 c4 20             	add    esp,0x20
c002617e:	89 c2                	mov    edx,eax
c0026180:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026184:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c002618a:	b8 00 00 00 00       	mov    eax,0x0
c002618f:	5b                   	pop    ebx
c0026190:	5e                   	pop    esi
c0026191:	5f                   	pop    edi
c0026192:	c3                   	ret    
c0026193:	90                   	nop

c0026194 <APICTimer::APICTimer()>:
c0026194:	83 ec 0c             	sub    esp,0xc
c0026197:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002619b:	83 ec 08             	sub    esp,0x8
c002619e:	68 ec c6 02 c0       	push   0xc002c6ec
c00261a3:	50                   	push   eax
c00261a4:	e8 8f 03 ff ff       	call   c0016538 <Timer::Timer(char const*)>
c00261a9:	83 c4 10             	add    esp,0x10
c00261ac:	ba 00 c7 02 c0       	mov    edx,0xc002c700
c00261b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00261b5:	89 10                	mov    DWORD PTR [eax],edx
c00261b7:	90                   	nop
c00261b8:	83 c4 0c             	add    esp,0xc
c00261bb:	c3                   	ret    

c00261bc <PIT::write(int)>:
c00261bc:	83 ec 10             	sub    esp,0x10
c00261bf:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00261c3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00261c7:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c00261cd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00261d1:	a3 44 1d 03 c0       	mov    ds:0xc0031d44,eax
c00261d6:	b8 dc 34 12 00       	mov    eax,0x1234dc
c00261db:	99                   	cdq    
c00261dc:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c00261e0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00261e4:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c00261eb:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c00261f0:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c00261f4:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c00261f9:	ee                   	out    dx,al
c00261fa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00261fe:	0f b6 c0             	movzx  eax,al
c0026201:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c0026208:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c002620c:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0026210:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0026215:	ee                   	out    dx,al
c0026216:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002621a:	c1 f8 08             	sar    eax,0x8
c002621d:	0f b6 c0             	movzx  eax,al
c0026220:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c0026227:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c002622b:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c002622f:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0026234:	ee                   	out    dx,al
c0026235:	90                   	nop
c0026236:	83 c4 10             	add    esp,0x10
c0026239:	c3                   	ret    

c002623a <pitHandler(regs*, void*)>:
c002623a:	83 ec 0c             	sub    esp,0xc
c002623d:	a1 44 1d 03 c0       	mov    eax,ds:0xc0031d44
c0026242:	99                   	cdq    
c0026243:	52                   	push   edx
c0026244:	50                   	push   eax
c0026245:	6a 00                	push   0x0
c0026247:	68 00 ca 9a 3b       	push   0x3b9aca00
c002624c:	e8 c3 04 00 00       	call   c0026714 <__udivdi3>
c0026251:	83 c4 10             	add    esp,0x10
c0026254:	83 ec 08             	sub    esp,0x8
c0026257:	52                   	push   edx
c0026258:	50                   	push   eax
c0026259:	e8 69 03 ff ff       	call   c00165c7 <timerHandler(unsigned long long)>
c002625e:	83 c4 10             	add    esp,0x10
c0026261:	90                   	nop
c0026262:	83 c4 0c             	add    esp,0xc
c0026265:	c3                   	ret    

c0026266 <PIT::open(int, int, void*)>:
c0026266:	83 ec 0c             	sub    esp,0xc
c0026269:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002626d:	8b 00                	mov    eax,DWORD PTR [eax]
c002626f:	83 c0 24             	add    eax,0x24
c0026272:	8b 00                	mov    eax,DWORD PTR [eax]
c0026274:	83 ec 08             	sub    esp,0x8
c0026277:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002627b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002627f:	ff d0                	call   eax
c0026281:	83 c4 10             	add    esp,0x10
c0026284:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026288:	83 ec 0c             	sub    esp,0xc
c002628b:	6a 00                	push   0x0
c002628d:	6a 01                	push   0x1
c002628f:	68 3a 62 02 c0       	push   0xc002623a
c0026294:	6a 00                	push   0x0
c0026296:	50                   	push   eax
c0026297:	e8 de d7 fe ff       	call   c0013a7a <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c002629c:	83 c4 20             	add    esp,0x20
c002629f:	89 c2                	mov    edx,eax
c00262a1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00262a5:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c00262ab:	b8 00 00 00 00       	mov    eax,0x0
c00262b0:	83 c4 0c             	add    esp,0xc
c00262b3:	c3                   	ret    

c00262b4 <PIT::close(int, int, void*)>:
c00262b4:	83 ec 0c             	sub    esp,0xc
c00262b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00262bb:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c00262c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00262c9:	6a 01                	push   0x1
c00262cb:	68 3a 62 02 c0       	push   0xc002623a
c00262d0:	6a 00                	push   0x0
c00262d2:	50                   	push   eax
c00262d3:	e8 ec d7 fe ff       	call   c0013ac4 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c00262d8:	83 c4 10             	add    esp,0x10
c00262db:	b8 00 00 00 00       	mov    eax,0x0
c00262e0:	83 c4 0c             	add    esp,0xc
c00262e3:	c3                   	ret    

c00262e4 <PIT::PIT()>:
c00262e4:	83 ec 0c             	sub    esp,0xc
c00262e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00262eb:	83 ec 08             	sub    esp,0x8
c00262ee:	68 28 c7 02 c0       	push   0xc002c728
c00262f3:	50                   	push   eax
c00262f4:	e8 3f 02 ff ff       	call   c0016538 <Timer::Timer(char const*)>
c00262f9:	83 c4 10             	add    esp,0x10
c00262fc:	ba 50 c7 02 c0       	mov    edx,0xc002c750
c0026301:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026305:	89 10                	mov    DWORD PTR [eax],edx
c0026307:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002630b:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0026311:	0f b6 d0             	movzx  edx,al
c0026314:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026318:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c002631f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026323:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0026329:	0f b6 d0             	movzx  edx,al
c002632c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026330:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c0026335:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026339:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002633f:	8d 50 01             	lea    edx,[eax+0x1]
c0026342:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0026346:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c002634c:	0f b6 d0             	movzx  edx,al
c002634f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026353:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0026357:	83 e1 3f             	and    ecx,0x3f
c002635a:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c002635e:	90                   	nop
c002635f:	83 c4 0c             	add    esp,0xc
c0026362:	c3                   	ret    
c0026363:	66 90                	xchg   ax,ax
c0026365:	66 90                	xchg   ax,ax
c0026367:	66 90                	xchg   ax,ax
c0026369:	66 90                	xchg   ax,ax
c002636b:	66 90                	xchg   ax,ax
c002636d:	66 90                	xchg   ax,ax
c002636f:	90                   	nop

c0026370 <avxDetect>:
c0026370:	b8 00 00 00 00       	mov    eax,0x0
c0026375:	c3                   	ret    

c0026376 <avxSave>:
c0026376:	c3                   	ret    

c0026377 <avxLoad>:
c0026377:	c3                   	ret    

c0026378 <avxInit>:
c0026378:	c3                   	ret    

c0026379 <avxClose>:
c0026379:	c3                   	ret    

c002637a <wouldSheSayYes>:
c002637a:	c3                   	ret    
c002637b:	49                   	dec    ecx
c002637c:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c0026380:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c0026384:	75 20                	jne    c00263a6 <sseDetect.noSSE+0x1>
c0026386:	4e                   	dec    esi
c0026387:	79 61                	jns    c00263ea <x87Detect+0x14>
c0026389:	68 2e 2e 2e 00       	push   0x2e2e2e
c002638e:	66 90                	xchg   ax,ax

c0026390 <absolutelyNoChanceInHell>:
c0026390:	b8 01 00 00 00       	mov    eax,0x1
c0026395:	0f a2                	cpuid  
c0026397:	f7 c2 00 00 00 02    	test   edx,0x2000000
c002639d:	74 06                	je     c00263a5 <sseDetect.noSSE>
c002639f:	b8 01 00 00 00       	mov    eax,0x1
c00263a4:	c3                   	ret    

c00263a5 <sseDetect.noSSE>:
c00263a5:	31 c0                	xor    eax,eax
c00263a7:	c3                   	ret    

c00263a8 <sseSave>:
c00263a8:	0f ae 44 24 04       	fxsave [esp+0x4]
c00263ad:	c3                   	ret    

c00263ae <sseLoad>:
c00263ae:	0f ae 4c 24 04       	fxrstor [esp+0x4]
c00263b3:	c3                   	ret    

c00263b4 <sseInit>:
c00263b4:	e8 49 00 00 00       	call   c0026402 <x87Init>
c00263b9:	0f 20 e0             	mov    eax,cr4
c00263bc:	66 0d 00 06          	or     ax,0x600
c00263c0:	0f 22 e0             	mov    cr4,eax
c00263c3:	c3                   	ret    

c00263c4 <sseClose>:
c00263c4:	c3                   	ret    
c00263c5:	66 90                	xchg   ax,ax
c00263c7:	66 90                	xchg   ax,ax
c00263c9:	66 90                	xchg   ax,ax
c00263cb:	66 90                	xchg   ax,ax
c00263cd:	66 90                	xchg   ax,ax
c00263cf:	90                   	nop

c00263d0 <value_37F>:
c00263d0:	7f 03                	jg     c00263d5 <value_37A+0x1>

c00263d2 <value_37E>:
c00263d2:	7e 03                	jle    c00263d7 <x87Detect+0x1>

c00263d4 <value_37A>:
c00263d4:	7a 03                	jp     c00263d9 <x87Detect+0x3>

c00263d6 <x87Detect>:
c00263d6:	b8 01 00 00 00       	mov    eax,0x1
c00263db:	0f a2                	cpuid  
c00263dd:	f7 c2 01 00 00 00    	test   edx,0x1
c00263e3:	74 06                	je     c00263eb <x87Detect.nox87>
c00263e5:	b8 01 00 00 00       	mov    eax,0x1
c00263ea:	c3                   	ret    

c00263eb <x87Detect.nox87>:
c00263eb:	b8 00 00 00 00       	mov    eax,0x0
c00263f0:	c3                   	ret    

c00263f1 <x87Save>:
c00263f1:	55                   	push   ebp
c00263f2:	89 e5                	mov    ebp,esp
c00263f4:	9b dd 75 08          	fsave  [ebp+0x8]
c00263f8:	c9                   	leave  
c00263f9:	c3                   	ret    

c00263fa <x87Load>:
c00263fa:	55                   	push   ebp
c00263fb:	89 e5                	mov    ebp,esp
c00263fd:	dd 65 08             	frstor [ebp+0x8]
c0026400:	c9                   	leave  
c0026401:	c3                   	ret    

c0026402 <x87Init>:
c0026402:	9b db e3             	finit  
c0026405:	0f 20 c0             	mov    eax,cr0
c0026408:	66 25 fb ff          	and    ax,0xfffb
c002640c:	66 0d 22 00          	or     ax,0x22
c0026410:	0f 22 c0             	mov    cr0,eax
c0026413:	0f 06                	clts   
c0026415:	d9 2d d4 63 02 c0    	fldcw  WORD PTR ds:0xc00263d4
c002641b:	c3                   	ret    

c002641c <x87Close>:
c002641c:	c3                   	ret    
c002641d:	66 90                	xchg   ax,ax
c002641f:	90                   	nop

c0026420 <__do_global_ctors_aux>:
c0026420:	a1 14 90 02 c0       	mov    eax,ds:0xc0029014
c0026425:	83 f8 ff             	cmp    eax,0xffffffff
c0026428:	74 1a                	je     c0026444 <__do_global_ctors_aux+0x24>
c002642a:	55                   	push   ebp
c002642b:	89 e5                	mov    ebp,esp
c002642d:	53                   	push   ebx
c002642e:	52                   	push   edx
c002642f:	bb 14 90 02 c0       	mov    ebx,0xc0029014
c0026434:	ff d0                	call   eax
c0026436:	83 eb 04             	sub    ebx,0x4
c0026439:	8b 03                	mov    eax,DWORD PTR [ebx]
c002643b:	83 f8 ff             	cmp    eax,0xffffffff
c002643e:	75 f4                	jne    c0026434 <__do_global_ctors_aux+0x14>
c0026440:	58                   	pop    eax
c0026441:	5b                   	pop    ebx
c0026442:	5d                   	pop    ebp
c0026443:	c3                   	ret    
c0026444:	c3                   	ret    
c0026445:	66 90                	xchg   ax,ax
c0026447:	90                   	nop

c0026448 <__divdi3>:
c0026448:	55                   	push   ebp
c0026449:	57                   	push   edi
c002644a:	56                   	push   esi
c002644b:	53                   	push   ebx
c002644c:	83 ec 1c             	sub    esp,0x1c
c002644f:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0026453:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0026457:	89 0c 24             	mov    DWORD PTR [esp],ecx
c002645a:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c002645e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0026462:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0026466:	85 db                	test   ebx,ebx
c0026468:	0f 88 8e 00 00 00    	js     c00264fc <__divdi3+0xb4>
c002646e:	89 dd                	mov    ebp,ebx
c0026470:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0026478:	89 d3                	mov    ebx,edx
c002647a:	85 d2                	test   edx,edx
c002647c:	79 0d                	jns    c002648b <__divdi3+0x43>
c002647e:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c0026482:	f7 d8                	neg    eax
c0026484:	83 d2 00             	adc    edx,0x0
c0026487:	f7 da                	neg    edx
c0026489:	89 d3                	mov    ebx,edx
c002648b:	89 c7                	mov    edi,eax
c002648d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0026490:	85 db                	test   ebx,ebx
c0026492:	75 48                	jne    c00264dc <__divdi3+0x94>
c0026494:	39 ef                	cmp    edi,ebp
c0026496:	76 24                	jbe    c00264bc <__divdi3+0x74>
c0026498:	89 ea                	mov    edx,ebp
c002649a:	f7 f7                	div    edi
c002649c:	89 c1                	mov    ecx,eax
c002649e:	31 f6                	xor    esi,esi
c00264a0:	89 c8                	mov    eax,ecx
c00264a2:	89 f2                	mov    edx,esi
c00264a4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00264a8:	85 c9                	test   ecx,ecx
c00264aa:	74 07                	je     c00264b3 <__divdi3+0x6b>
c00264ac:	f7 d8                	neg    eax
c00264ae:	83 d2 00             	adc    edx,0x0
c00264b1:	f7 da                	neg    edx
c00264b3:	83 c4 1c             	add    esp,0x1c
c00264b6:	5b                   	pop    ebx
c00264b7:	5e                   	pop    esi
c00264b8:	5f                   	pop    edi
c00264b9:	5d                   	pop    ebp
c00264ba:	c3                   	ret    
c00264bb:	90                   	nop
c00264bc:	85 ff                	test   edi,edi
c00264be:	75 0b                	jne    c00264cb <__divdi3+0x83>
c00264c0:	b8 01 00 00 00       	mov    eax,0x1
c00264c5:	31 d2                	xor    edx,edx
c00264c7:	f7 f3                	div    ebx
c00264c9:	89 c7                	mov    edi,eax
c00264cb:	31 d2                	xor    edx,edx
c00264cd:	89 e8                	mov    eax,ebp
c00264cf:	f7 f7                	div    edi
c00264d1:	89 c6                	mov    esi,eax
c00264d3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00264d6:	f7 f7                	div    edi
c00264d8:	89 c1                	mov    ecx,eax
c00264da:	eb c4                	jmp    c00264a0 <__divdi3+0x58>
c00264dc:	39 eb                	cmp    ebx,ebp
c00264de:	77 3c                	ja     c002651c <__divdi3+0xd4>
c00264e0:	0f bd f3             	bsr    esi,ebx
c00264e3:	83 f6 1f             	xor    esi,0x1f
c00264e6:	75 40                	jne    c0026528 <__divdi3+0xe0>
c00264e8:	39 eb                	cmp    ebx,ebp
c00264ea:	72 09                	jb     c00264f5 <__divdi3+0xad>
c00264ec:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c00264ef:	0f 87 97 00 00 00    	ja     c002658c <__divdi3+0x144>
c00264f5:	b9 01 00 00 00       	mov    ecx,0x1
c00264fa:	eb a4                	jmp    c00264a0 <__divdi3+0x58>
c00264fc:	f7 d9                	neg    ecx
c00264fe:	83 d3 00             	adc    ebx,0x0
c0026501:	f7 db                	neg    ebx
c0026503:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0026506:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c002650a:	89 dd                	mov    ebp,ebx
c002650c:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c0026514:	e9 5f ff ff ff       	jmp    c0026478 <__divdi3+0x30>
c0026519:	8d 76 00             	lea    esi,[esi+0x0]
c002651c:	31 f6                	xor    esi,esi
c002651e:	31 c9                	xor    ecx,ecx
c0026520:	e9 7b ff ff ff       	jmp    c00264a0 <__divdi3+0x58>
c0026525:	8d 76 00             	lea    esi,[esi+0x0]
c0026528:	b8 20 00 00 00       	mov    eax,0x20
c002652d:	29 f0                	sub    eax,esi
c002652f:	89 f1                	mov    ecx,esi
c0026531:	d3 e3                	shl    ebx,cl
c0026533:	89 fa                	mov    edx,edi
c0026535:	88 c1                	mov    cl,al
c0026537:	d3 ea                	shr    edx,cl
c0026539:	09 da                	or     edx,ebx
c002653b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002653f:	89 f1                	mov    ecx,esi
c0026541:	d3 e7                	shl    edi,cl
c0026543:	89 eb                	mov    ebx,ebp
c0026545:	88 c1                	mov    cl,al
c0026547:	d3 eb                	shr    ebx,cl
c0026549:	89 f1                	mov    ecx,esi
c002654b:	d3 e5                	shl    ebp,cl
c002654d:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0026550:	88 c1                	mov    cl,al
c0026552:	d3 ea                	shr    edx,cl
c0026554:	09 d5                	or     ebp,edx
c0026556:	89 e8                	mov    eax,ebp
c0026558:	89 da                	mov    edx,ebx
c002655a:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c002655e:	89 d3                	mov    ebx,edx
c0026560:	89 c5                	mov    ebp,eax
c0026562:	f7 e7                	mul    edi
c0026564:	39 d3                	cmp    ebx,edx
c0026566:	72 18                	jb     c0026580 <__divdi3+0x138>
c0026568:	74 0a                	je     c0026574 <__divdi3+0x12c>
c002656a:	89 e9                	mov    ecx,ebp
c002656c:	31 f6                	xor    esi,esi
c002656e:	e9 2d ff ff ff       	jmp    c00264a0 <__divdi3+0x58>
c0026573:	90                   	nop
c0026574:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0026577:	89 f1                	mov    ecx,esi
c0026579:	d3 e7                	shl    edi,cl
c002657b:	39 c7                	cmp    edi,eax
c002657d:	73 eb                	jae    c002656a <__divdi3+0x122>
c002657f:	90                   	nop
c0026580:	8d 4d ff             	lea    ecx,[ebp-0x1]
c0026583:	31 f6                	xor    esi,esi
c0026585:	e9 16 ff ff ff       	jmp    c00264a0 <__divdi3+0x58>
c002658a:	66 90                	xchg   ax,ax
c002658c:	31 c9                	xor    ecx,ecx
c002658e:	e9 0d ff ff ff       	jmp    c00264a0 <__divdi3+0x58>
c0026593:	90                   	nop

c0026594 <__moddi3>:
c0026594:	55                   	push   ebp
c0026595:	57                   	push   edi
c0026596:	56                   	push   esi
c0026597:	53                   	push   ebx
c0026598:	83 ec 2c             	sub    esp,0x2c
c002659b:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c002659f:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c00265a3:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00265a7:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c00265ab:	85 db                	test   ebx,ebx
c00265ad:	0f 88 85 00 00 00    	js     c0026638 <__moddi3+0xa4>
c00265b3:	89 de                	mov    esi,ebx
c00265b5:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00265bd:	89 d7                	mov    edi,edx
c00265bf:	85 d2                	test   edx,edx
c00265c1:	79 09                	jns    c00265cc <__moddi3+0x38>
c00265c3:	f7 d8                	neg    eax
c00265c5:	83 d2 00             	adc    edx,0x0
c00265c8:	f7 da                	neg    edx
c00265ca:	89 d7                	mov    edi,edx
c00265cc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00265d0:	89 cd                	mov    ebp,ecx
c00265d2:	85 ff                	test   edi,edi
c00265d4:	75 52                	jne    c0026628 <__moddi3+0x94>
c00265d6:	89 c3                	mov    ebx,eax
c00265d8:	39 f0                	cmp    eax,esi
c00265da:	76 24                	jbe    c0026600 <__moddi3+0x6c>
c00265dc:	89 c8                	mov    eax,ecx
c00265de:	89 f2                	mov    edx,esi
c00265e0:	f7 f3                	div    ebx
c00265e2:	89 d6                	mov    esi,edx
c00265e4:	89 f0                	mov    eax,esi
c00265e6:	31 d2                	xor    edx,edx
c00265e8:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00265ec:	85 c9                	test   ecx,ecx
c00265ee:	74 07                	je     c00265f7 <__moddi3+0x63>
c00265f0:	f7 d8                	neg    eax
c00265f2:	83 d2 00             	adc    edx,0x0
c00265f5:	f7 da                	neg    edx
c00265f7:	83 c4 2c             	add    esp,0x2c
c00265fa:	5b                   	pop    ebx
c00265fb:	5e                   	pop    esi
c00265fc:	5f                   	pop    edi
c00265fd:	5d                   	pop    ebp
c00265fe:	c3                   	ret    
c00265ff:	90                   	nop
c0026600:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0026604:	85 db                	test   ebx,ebx
c0026606:	75 0d                	jne    c0026615 <__moddi3+0x81>
c0026608:	b8 01 00 00 00       	mov    eax,0x1
c002660d:	31 d2                	xor    edx,edx
c002660f:	f7 f7                	div    edi
c0026611:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0026615:	89 f0                	mov    eax,esi
c0026617:	31 d2                	xor    edx,edx
c0026619:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c002661d:	f7 f7                	div    edi
c002661f:	89 e8                	mov    eax,ebp
c0026621:	f7 f7                	div    edi
c0026623:	89 d6                	mov    esi,edx
c0026625:	eb bd                	jmp    c00265e4 <__moddi3+0x50>
c0026627:	90                   	nop
c0026628:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c002662c:	39 f7                	cmp    edi,esi
c002662e:	76 20                	jbe    c0026650 <__moddi3+0xbc>
c0026630:	89 c8                	mov    eax,ecx
c0026632:	89 f2                	mov    edx,esi
c0026634:	eb b2                	jmp    c00265e8 <__moddi3+0x54>
c0026636:	66 90                	xchg   ax,ax
c0026638:	f7 d9                	neg    ecx
c002663a:	83 d3 00             	adc    ebx,0x0
c002663d:	f7 db                	neg    ebx
c002663f:	89 de                	mov    esi,ebx
c0026641:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c0026649:	e9 6f ff ff ff       	jmp    c00265bd <__moddi3+0x29>
c002664e:	66 90                	xchg   ax,ax
c0026650:	0f bd c7             	bsr    eax,edi
c0026653:	83 f0 1f             	xor    eax,0x1f
c0026656:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c002665a:	75 24                	jne    c0026680 <__moddi3+0xec>
c002665c:	39 f7                	cmp    edi,esi
c002665e:	72 06                	jb     c0026666 <__moddi3+0xd2>
c0026660:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c0026664:	77 0c                	ja     c0026672 <__moddi3+0xde>
c0026666:	89 e9                	mov    ecx,ebp
c0026668:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c002666c:	19 fe                	sbb    esi,edi
c002666e:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0026672:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0026676:	89 f2                	mov    edx,esi
c0026678:	e9 6b ff ff ff       	jmp    c00265e8 <__moddi3+0x54>
c002667d:	8d 76 00             	lea    esi,[esi+0x0]
c0026680:	b8 20 00 00 00       	mov    eax,0x20
c0026685:	89 c2                	mov    edx,eax
c0026687:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c002668b:	29 da                	sub    edx,ebx
c002668d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0026691:	88 d9                	mov    cl,bl
c0026693:	d3 e7                	shl    edi,cl
c0026695:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0026699:	88 d1                	mov    cl,dl
c002669b:	d3 e8                	shr    eax,cl
c002669d:	09 c7                	or     edi,eax
c002669f:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c00266a3:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00266a7:	89 d8                	mov    eax,ebx
c00266a9:	88 d9                	mov    cl,bl
c00266ab:	d3 e7                	shl    edi,cl
c00266ad:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00266b1:	89 f3                	mov    ebx,esi
c00266b3:	88 d1                	mov    cl,dl
c00266b5:	d3 eb                	shr    ebx,cl
c00266b7:	89 c7                	mov    edi,eax
c00266b9:	88 c1                	mov    cl,al
c00266bb:	d3 e6                	shl    esi,cl
c00266bd:	89 e8                	mov    eax,ebp
c00266bf:	88 d1                	mov    cl,dl
c00266c1:	d3 e8                	shr    eax,cl
c00266c3:	09 f0                	or     eax,esi
c00266c5:	89 f9                	mov    ecx,edi
c00266c7:	d3 e5                	shl    ebp,cl
c00266c9:	89 da                	mov    edx,ebx
c00266cb:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c00266cf:	89 d3                	mov    ebx,edx
c00266d1:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c00266d5:	89 c6                	mov    esi,eax
c00266d7:	89 d1                	mov    ecx,edx
c00266d9:	39 d3                	cmp    ebx,edx
c00266db:	72 27                	jb     c0026704 <__moddi3+0x170>
c00266dd:	74 21                	je     c0026700 <__moddi3+0x16c>
c00266df:	29 f5                	sub    ebp,esi
c00266e1:	19 cb                	sbb    ebx,ecx
c00266e3:	89 de                	mov    esi,ebx
c00266e5:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c00266e9:	d3 e6                	shl    esi,cl
c00266eb:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00266ef:	89 f9                	mov    ecx,edi
c00266f1:	d3 ed                	shr    ebp,cl
c00266f3:	09 ee                	or     esi,ebp
c00266f5:	89 f0                	mov    eax,esi
c00266f7:	d3 eb                	shr    ebx,cl
c00266f9:	89 da                	mov    edx,ebx
c00266fb:	e9 e8 fe ff ff       	jmp    c00265e8 <__moddi3+0x54>
c0026700:	39 c5                	cmp    ebp,eax
c0026702:	73 db                	jae    c00266df <__moddi3+0x14b>
c0026704:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0026708:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c002670c:	89 d1                	mov    ecx,edx
c002670e:	89 c6                	mov    esi,eax
c0026710:	eb cd                	jmp    c00266df <__moddi3+0x14b>
c0026712:	66 90                	xchg   ax,ax

c0026714 <__udivdi3>:
c0026714:	55                   	push   ebp
c0026715:	57                   	push   edi
c0026716:	56                   	push   esi
c0026717:	53                   	push   ebx
c0026718:	83 ec 1c             	sub    esp,0x1c
c002671b:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c002671f:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0026723:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0026727:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c002672b:	85 d2                	test   edx,edx
c002672d:	75 41                	jne    c0026770 <__udivdi3+0x5c>
c002672f:	39 f7                	cmp    edi,esi
c0026731:	76 15                	jbe    c0026748 <__udivdi3+0x34>
c0026733:	89 e8                	mov    eax,ebp
c0026735:	89 f2                	mov    edx,esi
c0026737:	f7 f7                	div    edi
c0026739:	31 db                	xor    ebx,ebx
c002673b:	89 da                	mov    edx,ebx
c002673d:	83 c4 1c             	add    esp,0x1c
c0026740:	5b                   	pop    ebx
c0026741:	5e                   	pop    esi
c0026742:	5f                   	pop    edi
c0026743:	5d                   	pop    ebp
c0026744:	c3                   	ret    
c0026745:	8d 76 00             	lea    esi,[esi+0x0]
c0026748:	89 f9                	mov    ecx,edi
c002674a:	85 ff                	test   edi,edi
c002674c:	75 0b                	jne    c0026759 <__udivdi3+0x45>
c002674e:	b8 01 00 00 00       	mov    eax,0x1
c0026753:	31 d2                	xor    edx,edx
c0026755:	f7 f7                	div    edi
c0026757:	89 c1                	mov    ecx,eax
c0026759:	31 d2                	xor    edx,edx
c002675b:	89 f0                	mov    eax,esi
c002675d:	f7 f1                	div    ecx
c002675f:	89 c3                	mov    ebx,eax
c0026761:	89 e8                	mov    eax,ebp
c0026763:	f7 f1                	div    ecx
c0026765:	89 da                	mov    edx,ebx
c0026767:	83 c4 1c             	add    esp,0x1c
c002676a:	5b                   	pop    ebx
c002676b:	5e                   	pop    esi
c002676c:	5f                   	pop    edi
c002676d:	5d                   	pop    ebp
c002676e:	c3                   	ret    
c002676f:	90                   	nop
c0026770:	39 f2                	cmp    edx,esi
c0026772:	77 1c                	ja     c0026790 <__udivdi3+0x7c>
c0026774:	0f bd da             	bsr    ebx,edx
c0026777:	83 f3 1f             	xor    ebx,0x1f
c002677a:	75 24                	jne    c00267a0 <__udivdi3+0x8c>
c002677c:	39 f2                	cmp    edx,esi
c002677e:	72 08                	jb     c0026788 <__udivdi3+0x74>
c0026780:	39 ef                	cmp    edi,ebp
c0026782:	0f 87 84 00 00 00    	ja     c002680c <__udivdi3+0xf8>
c0026788:	b8 01 00 00 00       	mov    eax,0x1
c002678d:	eb ac                	jmp    c002673b <__udivdi3+0x27>
c002678f:	90                   	nop
c0026790:	31 db                	xor    ebx,ebx
c0026792:	31 c0                	xor    eax,eax
c0026794:	89 da                	mov    edx,ebx
c0026796:	83 c4 1c             	add    esp,0x1c
c0026799:	5b                   	pop    ebx
c002679a:	5e                   	pop    esi
c002679b:	5f                   	pop    edi
c002679c:	5d                   	pop    ebp
c002679d:	c3                   	ret    
c002679e:	66 90                	xchg   ax,ax
c00267a0:	b8 20 00 00 00       	mov    eax,0x20
c00267a5:	29 d8                	sub    eax,ebx
c00267a7:	88 d9                	mov    cl,bl
c00267a9:	d3 e2                	shl    edx,cl
c00267ab:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00267af:	89 fa                	mov    edx,edi
c00267b1:	88 c1                	mov    cl,al
c00267b3:	d3 ea                	shr    edx,cl
c00267b5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00267b9:	09 d1                	or     ecx,edx
c00267bb:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00267bf:	88 d9                	mov    cl,bl
c00267c1:	d3 e7                	shl    edi,cl
c00267c3:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00267c7:	89 f7                	mov    edi,esi
c00267c9:	88 c1                	mov    cl,al
c00267cb:	d3 ef                	shr    edi,cl
c00267cd:	88 d9                	mov    cl,bl
c00267cf:	d3 e6                	shl    esi,cl
c00267d1:	89 ea                	mov    edx,ebp
c00267d3:	88 c1                	mov    cl,al
c00267d5:	d3 ea                	shr    edx,cl
c00267d7:	09 d6                	or     esi,edx
c00267d9:	89 f0                	mov    eax,esi
c00267db:	89 fa                	mov    edx,edi
c00267dd:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c00267e1:	89 d7                	mov    edi,edx
c00267e3:	89 c6                	mov    esi,eax
c00267e5:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c00267e9:	39 d7                	cmp    edi,edx
c00267eb:	72 13                	jb     c0026800 <__udivdi3+0xec>
c00267ed:	74 09                	je     c00267f8 <__udivdi3+0xe4>
c00267ef:	89 f0                	mov    eax,esi
c00267f1:	31 db                	xor    ebx,ebx
c00267f3:	e9 43 ff ff ff       	jmp    c002673b <__udivdi3+0x27>
c00267f8:	88 d9                	mov    cl,bl
c00267fa:	d3 e5                	shl    ebp,cl
c00267fc:	39 c5                	cmp    ebp,eax
c00267fe:	73 ef                	jae    c00267ef <__udivdi3+0xdb>
c0026800:	8d 46 ff             	lea    eax,[esi-0x1]
c0026803:	31 db                	xor    ebx,ebx
c0026805:	e9 31 ff ff ff       	jmp    c002673b <__udivdi3+0x27>
c002680a:	66 90                	xchg   ax,ax
c002680c:	31 c0                	xor    eax,eax
c002680e:	e9 28 ff ff ff       	jmp    c002673b <__udivdi3+0x27>
c0026813:	90                   	nop

c0026814 <__umoddi3>:
c0026814:	55                   	push   ebp
c0026815:	57                   	push   edi
c0026816:	56                   	push   esi
c0026817:	53                   	push   ebx
c0026818:	83 ec 1c             	sub    esp,0x1c
c002681b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c002681f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0026823:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0026827:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c002682b:	89 da                	mov    edx,ebx
c002682d:	85 c0                	test   eax,eax
c002682f:	75 37                	jne    c0026868 <__umoddi3+0x54>
c0026831:	39 df                	cmp    edi,ebx
c0026833:	76 13                	jbe    c0026848 <__umoddi3+0x34>
c0026835:	89 f0                	mov    eax,esi
c0026837:	f7 f7                	div    edi
c0026839:	89 d0                	mov    eax,edx
c002683b:	31 d2                	xor    edx,edx
c002683d:	83 c4 1c             	add    esp,0x1c
c0026840:	5b                   	pop    ebx
c0026841:	5e                   	pop    esi
c0026842:	5f                   	pop    edi
c0026843:	5d                   	pop    ebp
c0026844:	c3                   	ret    
c0026845:	8d 76 00             	lea    esi,[esi+0x0]
c0026848:	89 fd                	mov    ebp,edi
c002684a:	85 ff                	test   edi,edi
c002684c:	75 0b                	jne    c0026859 <__umoddi3+0x45>
c002684e:	b8 01 00 00 00       	mov    eax,0x1
c0026853:	31 d2                	xor    edx,edx
c0026855:	f7 f7                	div    edi
c0026857:	89 c5                	mov    ebp,eax
c0026859:	89 d8                	mov    eax,ebx
c002685b:	31 d2                	xor    edx,edx
c002685d:	f7 f5                	div    ebp
c002685f:	89 f0                	mov    eax,esi
c0026861:	f7 f5                	div    ebp
c0026863:	89 d0                	mov    eax,edx
c0026865:	eb d4                	jmp    c002683b <__umoddi3+0x27>
c0026867:	90                   	nop
c0026868:	89 f1                	mov    ecx,esi
c002686a:	39 d8                	cmp    eax,ebx
c002686c:	76 0a                	jbe    c0026878 <__umoddi3+0x64>
c002686e:	89 f0                	mov    eax,esi
c0026870:	83 c4 1c             	add    esp,0x1c
c0026873:	5b                   	pop    ebx
c0026874:	5e                   	pop    esi
c0026875:	5f                   	pop    edi
c0026876:	5d                   	pop    ebp
c0026877:	c3                   	ret    
c0026878:	0f bd e8             	bsr    ebp,eax
c002687b:	83 f5 1f             	xor    ebp,0x1f
c002687e:	75 1c                	jne    c002689c <__umoddi3+0x88>
c0026880:	39 d8                	cmp    eax,ebx
c0026882:	72 04                	jb     c0026888 <__umoddi3+0x74>
c0026884:	39 f7                	cmp    edi,esi
c0026886:	77 08                	ja     c0026890 <__umoddi3+0x7c>
c0026888:	89 da                	mov    edx,ebx
c002688a:	29 fe                	sub    esi,edi
c002688c:	19 c2                	sbb    edx,eax
c002688e:	89 f1                	mov    ecx,esi
c0026890:	89 c8                	mov    eax,ecx
c0026892:	83 c4 1c             	add    esp,0x1c
c0026895:	5b                   	pop    ebx
c0026896:	5e                   	pop    esi
c0026897:	5f                   	pop    edi
c0026898:	5d                   	pop    ebp
c0026899:	c3                   	ret    
c002689a:	66 90                	xchg   ax,ax
c002689c:	ba 20 00 00 00       	mov    edx,0x20
c00268a1:	29 ea                	sub    edx,ebp
c00268a3:	89 e9                	mov    ecx,ebp
c00268a5:	d3 e0                	shl    eax,cl
c00268a7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00268ab:	89 f8                	mov    eax,edi
c00268ad:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00268b1:	88 d1                	mov    cl,dl
c00268b3:	d3 e8                	shr    eax,cl
c00268b5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00268b9:	09 c1                	or     ecx,eax
c00268bb:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00268bf:	89 e9                	mov    ecx,ebp
c00268c1:	d3 e7                	shl    edi,cl
c00268c3:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00268c7:	89 d8                	mov    eax,ebx
c00268c9:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00268cd:	88 d1                	mov    cl,dl
c00268cf:	d3 e8                	shr    eax,cl
c00268d1:	89 c7                	mov    edi,eax
c00268d3:	89 e9                	mov    ecx,ebp
c00268d5:	d3 e3                	shl    ebx,cl
c00268d7:	89 f0                	mov    eax,esi
c00268d9:	88 d1                	mov    cl,dl
c00268db:	d3 e8                	shr    eax,cl
c00268dd:	09 d8                	or     eax,ebx
c00268df:	89 e9                	mov    ecx,ebp
c00268e1:	d3 e6                	shl    esi,cl
c00268e3:	89 f3                	mov    ebx,esi
c00268e5:	89 fa                	mov    edx,edi
c00268e7:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c00268eb:	89 d1                	mov    ecx,edx
c00268ed:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c00268f1:	89 c6                	mov    esi,eax
c00268f3:	89 d7                	mov    edi,edx
c00268f5:	39 d1                	cmp    ecx,edx
c00268f7:	72 27                	jb     c0026920 <__umoddi3+0x10c>
c00268f9:	74 21                	je     c002691c <__umoddi3+0x108>
c00268fb:	89 ca                	mov    edx,ecx
c00268fd:	29 f3                	sub    ebx,esi
c00268ff:	19 fa                	sbb    edx,edi
c0026901:	89 d0                	mov    eax,edx
c0026903:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0026907:	d3 e0                	shl    eax,cl
c0026909:	89 e9                	mov    ecx,ebp
c002690b:	d3 eb                	shr    ebx,cl
c002690d:	09 d8                	or     eax,ebx
c002690f:	d3 ea                	shr    edx,cl
c0026911:	83 c4 1c             	add    esp,0x1c
c0026914:	5b                   	pop    ebx
c0026915:	5e                   	pop    esi
c0026916:	5f                   	pop    edi
c0026917:	5d                   	pop    ebp
c0026918:	c3                   	ret    
c0026919:	8d 76 00             	lea    esi,[esi+0x0]
c002691c:	39 c3                	cmp    ebx,eax
c002691e:	73 db                	jae    c00268fb <__umoddi3+0xe7>
c0026920:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0026924:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c0026928:	89 d7                	mov    edi,edx
c002692a:	89 c6                	mov    esi,eax
c002692c:	eb cd                	jmp    c00268fb <__umoddi3+0xe7>

c002692e <__addsf3>:
c002692e:	55                   	push   ebp
c002692f:	89 e5                	mov    ebp,esp
c0026931:	57                   	push   edi
c0026932:	56                   	push   esi
c0026933:	53                   	push   ebx
c0026934:	83 ec 08             	sub    esp,0x8
c0026937:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c002693a:	89 fa                	mov    edx,edi
c002693c:	89 f8                	mov    eax,edi
c002693e:	c1 f8 17             	sar    eax,0x17
c0026941:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0026944:	c1 e2 08             	shl    edx,0x8
c0026947:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c002694d:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0026950:	89 de                	mov    esi,ebx
c0026952:	c1 fe 17             	sar    esi,0x17
c0026955:	c1 e3 08             	shl    ebx,0x8
c0026958:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c002695e:	31 f0                	xor    eax,esi
c0026960:	0f 88 3b 01 00 00    	js     c0026aa1 <__addsf3+0x173>
c0026966:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c0026969:	29 f1                	sub    ecx,esi
c002696b:	85 c9                	test   ecx,ecx
c002696d:	7e 54                	jle    c00269c3 <__addsf3+0x95>
c002696f:	89 f0                	mov    eax,esi
c0026971:	84 c0                	test   al,al
c0026973:	75 10                	jne    c0026985 <__addsf3+0x57>
c0026975:	85 db                	test   ebx,ebx
c0026977:	0f 84 aa 02 00 00    	je     c0026c27 <__addsf3+0x2f9>
c002697d:	49                   	dec    ecx
c002697e:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0026981:	74 38                	je     c00269bb <__addsf3+0x8d>
c0026983:	eb 13                	jmp    c0026998 <__addsf3+0x6a>
c0026985:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026988:	f7 d0                	not    eax
c002698a:	84 c0                	test   al,al
c002698c:	0f 84 95 02 00 00    	je     c0026c27 <__addsf3+0x2f9>
c0026992:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0026998:	83 f9 1f             	cmp    ecx,0x1f
c002699b:	0f 8f 86 02 00 00    	jg     c0026c27 <__addsf3+0x2f9>
c00269a1:	89 de                	mov    esi,ebx
c00269a3:	d3 ee                	shr    esi,cl
c00269a5:	b8 20 00 00 00       	mov    eax,0x20
c00269aa:	29 c8                	sub    eax,ecx
c00269ac:	89 c1                	mov    ecx,eax
c00269ae:	d3 e3                	shl    ebx,cl
c00269b0:	31 c0                	xor    eax,eax
c00269b2:	85 db                	test   ebx,ebx
c00269b4:	0f 95 c0             	setne  al
c00269b7:	09 f0                	or     eax,esi
c00269b9:	01 d0                	add    eax,edx
c00269bb:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c00269be:	e9 b6 00 00 00       	jmp    c0026a79 <__addsf3+0x14b>
c00269c3:	74 5c                	je     c0026a21 <__addsf3+0xf3>
c00269c5:	89 f1                	mov    ecx,esi
c00269c7:	2b 4d f0             	sub    ecx,DWORD PTR [ebp-0x10]
c00269ca:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c00269cd:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c00269d1:	75 14                	jne    c00269e7 <__addsf3+0xb9>
c00269d3:	85 d2                	test   edx,edx
c00269d5:	0f 84 4c 02 00 00    	je     c0026c27 <__addsf3+0x2f9>
c00269db:	49                   	dec    ecx
c00269dc:	8d 04 1a             	lea    eax,[edx+ebx*1]
c00269df:	0f 84 94 00 00 00    	je     c0026a79 <__addsf3+0x14b>
c00269e5:	eb 12                	jmp    c00269f9 <__addsf3+0xcb>
c00269e7:	89 f0                	mov    eax,esi
c00269e9:	f7 d0                	not    eax
c00269eb:	84 c0                	test   al,al
c00269ed:	0f 84 34 02 00 00    	je     c0026c27 <__addsf3+0x2f9>
c00269f3:	81 ca 00 00 00 80    	or     edx,0x80000000
c00269f9:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c00269fc:	83 f9 1f             	cmp    ecx,0x1f
c00269ff:	0f 8f 22 02 00 00    	jg     c0026c27 <__addsf3+0x2f9>
c0026a05:	89 d7                	mov    edi,edx
c0026a07:	d3 ef                	shr    edi,cl
c0026a09:	b8 20 00 00 00       	mov    eax,0x20
c0026a0e:	29 c8                	sub    eax,ecx
c0026a10:	89 c1                	mov    ecx,eax
c0026a12:	d3 e2                	shl    edx,cl
c0026a14:	31 c0                	xor    eax,eax
c0026a16:	85 d2                	test   edx,edx
c0026a18:	0f 95 c0             	setne  al
c0026a1b:	09 f8                	or     eax,edi
c0026a1d:	01 d8                	add    eax,ebx
c0026a1f:	eb 58                	jmp    c0026a79 <__addsf3+0x14b>
c0026a21:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026a24:	8d 70 01             	lea    esi,[eax+0x1]
c0026a27:	f7 c6 fe 00 00 00    	test   esi,0xfe
c0026a2d:	75 32                	jne    c0026a61 <__addsf3+0x133>
c0026a2f:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c0026a33:	75 1f                	jne    c0026a54 <__addsf3+0x126>
c0026a35:	85 d2                	test   edx,edx
c0026a37:	0f 84 e0 01 00 00    	je     c0026c1d <__addsf3+0x2ef>
c0026a3d:	85 db                	test   ebx,ebx
c0026a3f:	0f 84 e2 01 00 00    	je     c0026c27 <__addsf3+0x2f9>
c0026a45:	89 d0                	mov    eax,edx
c0026a47:	01 d8                	add    eax,ebx
c0026a49:	0f 89 a9 01 00 00    	jns    c0026bf8 <__addsf3+0x2ca>
c0026a4f:	e9 9d 01 00 00       	jmp    c0026bf1 <__addsf3+0x2c3>
c0026a54:	85 d2                	test   edx,edx
c0026a56:	0f 85 cb 01 00 00    	jne    c0026c27 <__addsf3+0x2f9>
c0026a5c:	e9 bc 01 00 00       	jmp    c0026c1d <__addsf3+0x2ef>
c0026a61:	31 c0                	xor    eax,eax
c0026a63:	89 f1                	mov    ecx,esi
c0026a65:	f7 d1                	not    ecx
c0026a67:	84 c9                	test   cl,cl
c0026a69:	0f 84 90 01 00 00    	je     c0026bff <__addsf3+0x2d1>
c0026a6f:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0026a72:	d1 e8                	shr    eax,1
c0026a74:	e9 86 01 00 00       	jmp    c0026bff <__addsf3+0x2d1>
c0026a79:	85 c0                	test   eax,eax
c0026a7b:	0f 89 7e 01 00 00    	jns    c0026bff <__addsf3+0x2d1>
c0026a81:	46                   	inc    esi
c0026a82:	89 f2                	mov    edx,esi
c0026a84:	f7 d2                	not    edx
c0026a86:	84 d2                	test   dl,dl
c0026a88:	0f 84 6f 01 00 00    	je     c0026bfd <__addsf3+0x2cf>
c0026a8e:	89 c2                	mov    edx,eax
c0026a90:	83 e2 01             	and    edx,0x1
c0026a93:	d1 e8                	shr    eax,1
c0026a95:	25 ff ff ff 3f       	and    eax,0x3fffffff
c0026a9a:	09 d0                	or     eax,edx
c0026a9c:	e9 5e 01 00 00       	jmp    c0026bff <__addsf3+0x2d1>
c0026aa1:	0f b6 45 f0          	movzx  eax,BYTE PTR [ebp-0x10]
c0026aa5:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0026aa8:	89 f0                	mov    eax,esi
c0026aaa:	0f b6 c0             	movzx  eax,al
c0026aad:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0026ab0:	29 c1                	sub    ecx,eax
c0026ab2:	85 c9                	test   ecx,ecx
c0026ab4:	7e 55                	jle    c0026b0b <__addsf3+0x1dd>
c0026ab6:	85 c0                	test   eax,eax
c0026ab8:	75 11                	jne    c0026acb <__addsf3+0x19d>
c0026aba:	85 db                	test   ebx,ebx
c0026abc:	0f 84 65 01 00 00    	je     c0026c27 <__addsf3+0x2f9>
c0026ac2:	49                   	dec    ecx
c0026ac3:	75 19                	jne    c0026ade <__addsf3+0x1b0>
c0026ac5:	89 d0                	mov    eax,edx
c0026ac7:	29 d8                	sub    eax,ebx
c0026ac9:	eb 38                	jmp    c0026b03 <__addsf3+0x1d5>
c0026acb:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026ace:	f7 d0                	not    eax
c0026ad0:	84 c0                	test   al,al
c0026ad2:	0f 84 4f 01 00 00    	je     c0026c27 <__addsf3+0x2f9>
c0026ad8:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0026ade:	83 f9 1f             	cmp    ecx,0x1f
c0026ae1:	0f 8f 40 01 00 00    	jg     c0026c27 <__addsf3+0x2f9>
c0026ae7:	89 de                	mov    esi,ebx
c0026ae9:	d3 ee                	shr    esi,cl
c0026aeb:	b8 20 00 00 00       	mov    eax,0x20
c0026af0:	29 c8                	sub    eax,ecx
c0026af2:	89 c1                	mov    ecx,eax
c0026af4:	d3 e3                	shl    ebx,cl
c0026af6:	31 c0                	xor    eax,eax
c0026af8:	85 db                	test   ebx,ebx
c0026afa:	0f 95 c0             	setne  al
c0026afd:	09 f0                	or     eax,esi
c0026aff:	29 c2                	sub    edx,eax
c0026b01:	89 d0                	mov    eax,edx
c0026b03:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026b06:	e9 af 00 00 00       	jmp    c0026bba <__addsf3+0x28c>
c0026b0b:	74 5c                	je     c0026b69 <__addsf3+0x23b>
c0026b0d:	2b 45 ec             	sub    eax,DWORD PTR [ebp-0x14]
c0026b10:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026b13:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c0026b17:	75 14                	jne    c0026b2d <__addsf3+0x1ff>
c0026b19:	85 d2                	test   edx,edx
c0026b1b:	0f 84 06 01 00 00    	je     c0026c27 <__addsf3+0x2f9>
c0026b21:	48                   	dec    eax
c0026b22:	75 1b                	jne    c0026b3f <__addsf3+0x211>
c0026b24:	89 d8                	mov    eax,ebx
c0026b26:	29 d0                	sub    eax,edx
c0026b28:	e9 8d 00 00 00       	jmp    c0026bba <__addsf3+0x28c>
c0026b2d:	89 f1                	mov    ecx,esi
c0026b2f:	f7 d1                	not    ecx
c0026b31:	84 c9                	test   cl,cl
c0026b33:	0f 84 ee 00 00 00    	je     c0026c27 <__addsf3+0x2f9>
c0026b39:	81 ca 00 00 00 80    	or     edx,0x80000000
c0026b3f:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026b42:	83 f8 1f             	cmp    eax,0x1f
c0026b45:	0f 8f dc 00 00 00    	jg     c0026c27 <__addsf3+0x2f9>
c0026b4b:	89 d7                	mov    edi,edx
c0026b4d:	88 c1                	mov    cl,al
c0026b4f:	d3 ef                	shr    edi,cl
c0026b51:	b9 20 00 00 00       	mov    ecx,0x20
c0026b56:	29 c1                	sub    ecx,eax
c0026b58:	d3 e2                	shl    edx,cl
c0026b5a:	31 c0                	xor    eax,eax
c0026b5c:	85 d2                	test   edx,edx
c0026b5e:	0f 95 c0             	setne  al
c0026b61:	09 f8                	or     eax,edi
c0026b63:	29 c3                	sub    ebx,eax
c0026b65:	89 d8                	mov    eax,ebx
c0026b67:	eb 51                	jmp    c0026bba <__addsf3+0x28c>
c0026b69:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026b6c:	40                   	inc    eax
c0026b6d:	a8 fe                	test   al,0xfe
c0026b6f:	75 3d                	jne    c0026bae <__addsf3+0x280>
c0026b71:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c0026b75:	0f 85 a7 00 00 00    	jne    c0026c22 <__addsf3+0x2f4>
c0026b7b:	85 d2                	test   edx,edx
c0026b7d:	75 12                	jne    c0026b91 <__addsf3+0x263>
c0026b7f:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026b82:	85 db                	test   ebx,ebx
c0026b84:	0f 85 9d 00 00 00    	jne    c0026c27 <__addsf3+0x2f9>
c0026b8a:	31 ff                	xor    edi,edi
c0026b8c:	e9 96 00 00 00       	jmp    c0026c27 <__addsf3+0x2f9>
c0026b91:	85 db                	test   ebx,ebx
c0026b93:	0f 84 8e 00 00 00    	je     c0026c27 <__addsf3+0x2f9>
c0026b99:	89 d0                	mov    eax,edx
c0026b9b:	29 d8                	sub    eax,ebx
c0026b9d:	79 06                	jns    c0026ba5 <__addsf3+0x277>
c0026b9f:	89 d8                	mov    eax,ebx
c0026ba1:	29 d0                	sub    eax,edx
c0026ba3:	eb 5a                	jmp    c0026bff <__addsf3+0x2d1>
c0026ba5:	bf 00 00 00 00       	mov    edi,0x0
c0026baa:	74 7b                	je     c0026c27 <__addsf3+0x2f9>
c0026bac:	eb 4a                	jmp    c0026bf8 <__addsf3+0x2ca>
c0026bae:	89 d0                	mov    eax,edx
c0026bb0:	29 d8                	sub    eax,ebx
c0026bb2:	79 12                	jns    c0026bc6 <__addsf3+0x298>
c0026bb4:	89 d8                	mov    eax,ebx
c0026bb6:	29 d0                	sub    eax,edx
c0026bb8:	eb 09                	jmp    c0026bc3 <__addsf3+0x295>
c0026bba:	85 c0                	test   eax,eax
c0026bbc:	79 41                	jns    c0026bff <__addsf3+0x2d1>
c0026bbe:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0026bc3:	89 75 f0             	mov    DWORD PTR [ebp-0x10],esi
c0026bc6:	31 f6                	xor    esi,esi
c0026bc8:	85 c0                	test   eax,eax
c0026bca:	74 33                	je     c0026bff <__addsf3+0x2d1>
c0026bcc:	0f bd c8             	bsr    ecx,eax
c0026bcf:	83 f1 1f             	xor    ecx,0x1f
c0026bd2:	d3 e0                	shl    eax,cl
c0026bd4:	0f b6 55 f0          	movzx  edx,BYTE PTR [ebp-0x10]
c0026bd8:	39 ca                	cmp    edx,ecx
c0026bda:	7f 10                	jg     c0026bec <__addsf3+0x2be>
c0026bdc:	29 d1                	sub    ecx,edx
c0026bde:	41                   	inc    ecx
c0026bdf:	d3 e8                	shr    eax,cl
c0026be1:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026be4:	81 e6 00 ff ff ff    	and    esi,0xffffff00
c0026bea:	eb 13                	jmp    c0026bff <__addsf3+0x2d1>
c0026bec:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026bef:	29 ce                	sub    esi,ecx
c0026bf1:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0026bf6:	eb 07                	jmp    c0026bff <__addsf3+0x2d1>
c0026bf8:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026bfb:	eb 02                	jmp    c0026bff <__addsf3+0x2d1>
c0026bfd:	31 c0                	xor    eax,eax
c0026bff:	89 c2                	mov    edx,eax
c0026c01:	c1 ea 08             	shr    edx,0x8
c0026c04:	a8 7f                	test   al,0x7f
c0026c06:	0f 95 c1             	setne  cl
c0026c09:	09 d1                	or     ecx,edx
c0026c0b:	83 e1 01             	and    ecx,0x1
c0026c0e:	c1 e8 07             	shr    eax,0x7
c0026c11:	21 c8                	and    eax,ecx
c0026c13:	c1 e6 17             	shl    esi,0x17
c0026c16:	09 d6                	or     esi,edx
c0026c18:	8d 3c 30             	lea    edi,[eax+esi*1]
c0026c1b:	eb 0a                	jmp    c0026c27 <__addsf3+0x2f9>
c0026c1d:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026c20:	eb 05                	jmp    c0026c27 <__addsf3+0x2f9>
c0026c22:	bf 00 00 c0 7f       	mov    edi,0x7fc00000
c0026c27:	89 f8                	mov    eax,edi
c0026c29:	5a                   	pop    edx
c0026c2a:	59                   	pop    ecx
c0026c2b:	5b                   	pop    ebx
c0026c2c:	5e                   	pop    esi
c0026c2d:	5f                   	pop    edi
c0026c2e:	5d                   	pop    ebp
c0026c2f:	c3                   	ret    

c0026c30 <__subsf3>:
c0026c30:	55                   	push   ebp
c0026c31:	89 e5                	mov    ebp,esp
c0026c33:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026c36:	05 00 00 00 80       	add    eax,0x80000000
c0026c3b:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0026c3e:	5d                   	pop    ebp
c0026c3f:	e9 ea fc ff ff       	jmp    c002692e <__addsf3>

c0026c44 <__negsf2>:
c0026c44:	55                   	push   ebp
c0026c45:	89 e5                	mov    ebp,esp
c0026c47:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026c4a:	05 00 00 00 80       	add    eax,0x80000000
c0026c4f:	5d                   	pop    ebp
c0026c50:	c3                   	ret    

c0026c51 <__mulsf3>:
c0026c51:	55                   	push   ebp
c0026c52:	89 e5                	mov    ebp,esp
c0026c54:	57                   	push   edi
c0026c55:	56                   	push   esi
c0026c56:	53                   	push   ebx
c0026c57:	83 ec 1c             	sub    esp,0x1c
c0026c5a:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c0026c5d:	89 f0                	mov    eax,esi
c0026c5f:	89 f1                	mov    ecx,esi
c0026c61:	c1 f9 17             	sar    ecx,0x17
c0026c64:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c0026c67:	c1 e0 08             	shl    eax,0x8
c0026c6a:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0026c6f:	89 c1                	mov    ecx,eax
c0026c71:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026c74:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0026c77:	89 c7                	mov    edi,eax
c0026c79:	c1 ff 17             	sar    edi,0x17
c0026c7c:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0026c80:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0026c83:	89 f8                	mov    eax,edi
c0026c85:	0f b6 c0             	movzx  eax,al
c0026c88:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0026c8b:	8d 5c 03 82          	lea    ebx,[ebx+eax*1-0x7e]
c0026c8f:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0026c92:	42                   	inc    edx
c0026c93:	80 e2 fe             	and    dl,0xfe
c0026c96:	75 7b                	jne    c0026d13 <__mulsf3+0xc2>
c0026c98:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0026c9c:	74 54                	je     c0026cf2 <__mulsf3+0xa1>
c0026c9e:	85 c9                	test   ecx,ecx
c0026ca0:	0f 85 64 01 00 00    	jne    c0026e0a <__mulsf3+0x1b9>
c0026ca6:	8d 57 01             	lea    edx,[edi+0x1]
c0026ca9:	80 e2 fe             	and    dl,0xfe
c0026cac:	75 1f                	jne    c0026ccd <__mulsf3+0x7c>
c0026cae:	85 c0                	test   eax,eax
c0026cb0:	b8 00 00 00 00       	mov    eax,0x0
c0026cb5:	74 29                	je     c0026ce0 <__mulsf3+0x8f>
c0026cb7:	53                   	push   ebx
c0026cb8:	53                   	push   ebx
c0026cb9:	50                   	push   eax
c0026cba:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026cbd:	e8 96 05 00 00       	call   c0027258 <__nesf2>
c0026cc2:	83 c4 10             	add    esp,0x10
c0026cc5:	85 c0                	test   eax,eax
c0026cc7:	0f 85 3a 01 00 00    	jne    c0026e07 <__mulsf3+0x1b6>
c0026ccd:	85 ff                	test   edi,edi
c0026ccf:	0f 89 35 01 00 00    	jns    c0026e0a <__mulsf3+0x1b9>
c0026cd5:	81 c6 00 00 00 80    	add    esi,0x80000000
c0026cdb:	e9 2a 01 00 00       	jmp    c0026e0a <__mulsf3+0x1b9>
c0026ce0:	51                   	push   ecx
c0026ce1:	51                   	push   ecx
c0026ce2:	50                   	push   eax
c0026ce3:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026ce6:	e8 6d 05 00 00       	call   c0027258 <__nesf2>
c0026ceb:	83 c4 10             	add    esp,0x10
c0026cee:	85 c0                	test   eax,eax
c0026cf0:	eb 15                	jmp    c0026d07 <__mulsf3+0xb6>
c0026cf2:	85 c9                	test   ecx,ecx
c0026cf4:	74 0b                	je     c0026d01 <__mulsf3+0xb0>
c0026cf6:	8d 53 ff             	lea    edx,[ebx-0x1]
c0026cf9:	01 c9                	add    ecx,ecx
c0026cfb:	78 16                	js     c0026d13 <__mulsf3+0xc2>
c0026cfd:	89 d3                	mov    ebx,edx
c0026cff:	eb f5                	jmp    c0026cf6 <__mulsf3+0xa5>
c0026d01:	89 f8                	mov    eax,edi
c0026d03:	f7 d0                	not    eax
c0026d05:	84 c0                	test   al,al
c0026d07:	75 c4                	jne    c0026ccd <__mulsf3+0x7c>
c0026d09:	be 00 00 c0 7f       	mov    esi,0x7fc00000
c0026d0e:	e9 f7 00 00 00       	jmp    c0026e0a <__mulsf3+0x1b9>
c0026d13:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c0026d16:	c1 e6 08             	shl    esi,0x8
c0026d19:	81 e6 00 ff ff 7f    	and    esi,0x7fffff00
c0026d1f:	8d 57 01             	lea    edx,[edi+0x1]
c0026d22:	80 e2 fe             	and    dl,0xfe
c0026d25:	75 63                	jne    c0026d8a <__mulsf3+0x139>
c0026d27:	85 c0                	test   eax,eax
c0026d29:	74 2f                	je     c0026d5a <__mulsf3+0x109>
c0026d2b:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0026d2f:	0f 89 d2 00 00 00    	jns    c0026e07 <__mulsf3+0x1b6>
c0026d35:	52                   	push   edx
c0026d36:	52                   	push   edx
c0026d37:	6a 00                	push   0x0
c0026d39:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026d3c:	e8 dc 04 00 00       	call   c002721d <__eqsf2>
c0026d41:	83 c4 10             	add    esp,0x10
c0026d44:	85 c0                	test   eax,eax
c0026d46:	0f 85 bb 00 00 00    	jne    c0026e07 <__mulsf3+0x1b6>
c0026d4c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026d4f:	8d b0 00 00 00 80    	lea    esi,[eax-0x80000000]
c0026d55:	e9 b0 00 00 00       	jmp    c0026e0a <__mulsf3+0x1b9>
c0026d5a:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c0026d5d:	50                   	push   eax
c0026d5e:	50                   	push   eax
c0026d5f:	6a 00                	push   0x0
c0026d61:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026d64:	e8 b4 04 00 00       	call   c002721d <__eqsf2>
c0026d69:	83 c4 10             	add    esp,0x10
c0026d6c:	85 c0                	test   eax,eax
c0026d6e:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0026d71:	75 0c                	jne    c0026d7f <__mulsf3+0x12e>
c0026d73:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0026d77:	0f 89 8a 00 00 00    	jns    c0026e07 <__mulsf3+0x1b6>
c0026d7d:	eb cd                	jmp    c0026d4c <__mulsf3+0xfb>
c0026d7f:	8d 43 ff             	lea    eax,[ebx-0x1]
c0026d82:	01 f6                	add    esi,esi
c0026d84:	78 04                	js     c0026d8a <__mulsf3+0x139>
c0026d86:	89 c3                	mov    ebx,eax
c0026d88:	eb f5                	jmp    c0026d7f <__mulsf3+0x12e>
c0026d8a:	89 c8                	mov    eax,ecx
c0026d8c:	0d 00 00 00 80       	or     eax,0x80000000
c0026d91:	81 ce 00 00 00 80    	or     esi,0x80000000
c0026d97:	f7 e6                	mul    esi
c0026d99:	85 c0                	test   eax,eax
c0026d9b:	0f 95 c0             	setne  al
c0026d9e:	0f b6 c0             	movzx  eax,al
c0026da1:	09 c2                	or     edx,eax
c0026da3:	78 03                	js     c0026da8 <__mulsf3+0x157>
c0026da5:	01 d2                	add    edx,edx
c0026da7:	4b                   	dec    ebx
c0026da8:	81 fb fe 00 00 00    	cmp    ebx,0xfe
c0026dae:	7f 22                	jg     c0026dd2 <__mulsf3+0x181>
c0026db0:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0026db6:	85 db                	test   ebx,ebx
c0026db8:	7f 23                	jg     c0026ddd <__mulsf3+0x18c>
c0026dba:	83 fb e9             	cmp    ebx,0xffffffe9
c0026dbd:	7c 1a                	jl     c0026dd9 <__mulsf3+0x188>
c0026dbf:	81 ca 00 00 00 80    	or     edx,0x80000000
c0026dc5:	b9 01 00 00 00       	mov    ecx,0x1
c0026dca:	29 d9                	sub    ecx,ebx
c0026dcc:	d3 ea                	shr    edx,cl
c0026dce:	31 db                	xor    ebx,ebx
c0026dd0:	eb 0b                	jmp    c0026ddd <__mulsf3+0x18c>
c0026dd2:	bb ff 00 00 00       	mov    ebx,0xff
c0026dd7:	eb 02                	jmp    c0026ddb <__mulsf3+0x18a>
c0026dd9:	31 db                	xor    ebx,ebx
c0026ddb:	31 d2                	xor    edx,edx
c0026ddd:	89 d0                	mov    eax,edx
c0026ddf:	c1 e8 08             	shr    eax,0x8
c0026de2:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c0026de5:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c0026deb:	09 fb                	or     ebx,edi
c0026ded:	c1 e3 17             	shl    ebx,0x17
c0026df0:	09 c3                	or     ebx,eax
c0026df2:	f6 c2 7f             	test   dl,0x7f
c0026df5:	0f 95 c1             	setne  cl
c0026df8:	09 c8                	or     eax,ecx
c0026dfa:	83 e0 01             	and    eax,0x1
c0026dfd:	c1 ea 07             	shr    edx,0x7
c0026e00:	21 c2                	and    edx,eax
c0026e02:	8d 34 13             	lea    esi,[ebx+edx*1]
c0026e05:	eb 03                	jmp    c0026e0a <__mulsf3+0x1b9>
c0026e07:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c0026e0a:	89 f0                	mov    eax,esi
c0026e0c:	8d 65 f4             	lea    esp,[ebp-0xc]
c0026e0f:	5b                   	pop    ebx
c0026e10:	5e                   	pop    esi
c0026e11:	5f                   	pop    edi
c0026e12:	5d                   	pop    ebp
c0026e13:	c3                   	ret    

c0026e14 <__divsf3>:
c0026e14:	55                   	push   ebp
c0026e15:	89 e5                	mov    ebp,esp
c0026e17:	57                   	push   edi
c0026e18:	56                   	push   esi
c0026e19:	53                   	push   ebx
c0026e1a:	83 ec 1c             	sub    esp,0x1c
c0026e1d:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0026e20:	89 d8                	mov    eax,ebx
c0026e22:	89 d9                	mov    ecx,ebx
c0026e24:	c1 f9 17             	sar    ecx,0x17
c0026e27:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c0026e2a:	c1 e0 08             	shl    eax,0x8
c0026e2d:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0026e32:	89 c1                	mov    ecx,eax
c0026e34:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026e37:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0026e3a:	89 c7                	mov    edi,eax
c0026e3c:	c1 ff 17             	sar    edi,0x17
c0026e3f:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0026e43:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0026e46:	89 f8                	mov    eax,edi
c0026e48:	0f b6 c0             	movzx  eax,al
c0026e4b:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0026e4e:	29 c6                	sub    esi,eax
c0026e50:	83 c6 7f             	add    esi,0x7f
c0026e53:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0026e56:	42                   	inc    edx
c0026e57:	80 e2 fe             	and    dl,0xfe
c0026e5a:	0f 85 9c 00 00 00    	jne    c0026efc <__divsf3+0xe8>
c0026e60:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0026e64:	74 33                	je     c0026e99 <__divsf3+0x85>
c0026e66:	85 c9                	test   ecx,ecx
c0026e68:	0f 85 c7 01 00 00    	jne    c0027035 <__divsf3+0x221>
c0026e6e:	8d 57 01             	lea    edx,[edi+0x1]
c0026e71:	80 e2 fe             	and    dl,0xfe
c0026e74:	75 2f                	jne    c0026ea5 <__divsf3+0x91>
c0026e76:	85 c0                	test   eax,eax
c0026e78:	74 2b                	je     c0026ea5 <__divsf3+0x91>
c0026e7a:	51                   	push   ecx
c0026e7b:	51                   	push   ecx
c0026e7c:	6a 00                	push   0x0
c0026e7e:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026e81:	e8 d2 03 00 00       	call   c0027258 <__nesf2>
c0026e86:	83 c4 10             	add    esp,0x10
c0026e89:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0026e8c:	85 c0                	test   eax,eax
c0026e8e:	0f 85 a1 01 00 00    	jne    c0027035 <__divsf3+0x221>
c0026e94:	e9 92 01 00 00       	jmp    c002702b <__divsf3+0x217>
c0026e99:	85 c9                	test   ecx,ecx
c0026e9b:	75 1b                	jne    c0026eb8 <__divsf3+0xa4>
c0026e9d:	8d 57 01             	lea    edx,[edi+0x1]
c0026ea0:	80 e2 fe             	and    dl,0xfe
c0026ea3:	74 1e                	je     c0026ec3 <__divsf3+0xaf>
c0026ea5:	85 ff                	test   edi,edi
c0026ea7:	0f 89 88 01 00 00    	jns    c0027035 <__divsf3+0x221>
c0026ead:	81 c3 00 00 00 80    	add    ebx,0x80000000
c0026eb3:	e9 7d 01 00 00       	jmp    c0027035 <__divsf3+0x221>
c0026eb8:	8d 56 ff             	lea    edx,[esi-0x1]
c0026ebb:	01 c9                	add    ecx,ecx
c0026ebd:	78 3d                	js     c0026efc <__divsf3+0xe8>
c0026ebf:	89 d6                	mov    esi,edx
c0026ec1:	eb f5                	jmp    c0026eb8 <__divsf3+0xa4>
c0026ec3:	85 c0                	test   eax,eax
c0026ec5:	b8 00 00 00 00       	mov    eax,0x0
c0026eca:	74 18                	je     c0026ee4 <__divsf3+0xd0>
c0026ecc:	52                   	push   edx
c0026ecd:	52                   	push   edx
c0026ece:	50                   	push   eax
c0026ecf:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026ed2:	e8 81 03 00 00       	call   c0027258 <__nesf2>
c0026ed7:	83 c4 10             	add    esp,0x10
c0026eda:	85 c0                	test   eax,eax
c0026edc:	0f 85 50 01 00 00    	jne    c0027032 <__divsf3+0x21e>
c0026ee2:	eb c1                	jmp    c0026ea5 <__divsf3+0x91>
c0026ee4:	56                   	push   esi
c0026ee5:	56                   	push   esi
c0026ee6:	50                   	push   eax
c0026ee7:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026eea:	e8 69 03 00 00       	call   c0027258 <__nesf2>
c0026eef:	83 c4 10             	add    esp,0x10
c0026ef2:	85 c0                	test   eax,eax
c0026ef4:	0f 84 31 01 00 00    	je     c002702b <__divsf3+0x217>
c0026efa:	eb a9                	jmp    c0026ea5 <__divsf3+0x91>
c0026efc:	8b 5d dc             	mov    ebx,DWORD PTR [ebp-0x24]
c0026eff:	c1 e3 08             	shl    ebx,0x8
c0026f02:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c0026f08:	8d 57 01             	lea    edx,[edi+0x1]
c0026f0b:	80 e2 fe             	and    dl,0xfe
c0026f0e:	75 71                	jne    c0026f81 <__divsf3+0x16d>
c0026f10:	85 c0                	test   eax,eax
c0026f12:	ba 00 00 00 00       	mov    edx,0x0
c0026f17:	74 2f                	je     c0026f48 <__divsf3+0x134>
c0026f19:	51                   	push   ecx
c0026f1a:	51                   	push   ecx
c0026f1b:	52                   	push   edx
c0026f1c:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026f1f:	e8 f9 02 00 00       	call   c002721d <__eqsf2>
c0026f24:	83 c4 10             	add    esp,0x10
c0026f27:	85 c0                	test   eax,eax
c0026f29:	0f 85 03 01 00 00    	jne    c0027032 <__divsf3+0x21e>
c0026f2f:	31 d2                	xor    edx,edx
c0026f31:	89 d3                	mov    ebx,edx
c0026f33:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0026f36:	31 f8                	xor    eax,edi
c0026f38:	0f 89 f7 00 00 00    	jns    c0027035 <__divsf3+0x221>
c0026f3e:	bb 00 00 00 80       	mov    ebx,0x80000000
c0026f43:	e9 ed 00 00 00       	jmp    c0027035 <__divsf3+0x221>
c0026f48:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c0026f4b:	50                   	push   eax
c0026f4c:	50                   	push   eax
c0026f4d:	52                   	push   edx
c0026f4e:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026f51:	e8 c7 02 00 00       	call   c002721d <__eqsf2>
c0026f56:	83 c4 10             	add    esp,0x10
c0026f59:	85 c0                	test   eax,eax
c0026f5b:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0026f5e:	75 16                	jne    c0026f76 <__divsf3+0x162>
c0026f60:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0026f63:	31 fb                	xor    ebx,edi
c0026f65:	81 e3 00 00 00 80    	and    ebx,0x80000000
c0026f6b:	81 cb 00 00 80 7f    	or     ebx,0x7f800000
c0026f71:	e9 bf 00 00 00       	jmp    c0027035 <__divsf3+0x221>
c0026f76:	8d 46 01             	lea    eax,[esi+0x1]
c0026f79:	01 db                	add    ebx,ebx
c0026f7b:	78 04                	js     c0026f81 <__divsf3+0x16d>
c0026f7d:	89 c6                	mov    esi,eax
c0026f7f:	eb f5                	jmp    c0026f76 <__divsf3+0x162>
c0026f81:	89 c8                	mov    eax,ecx
c0026f83:	0d 00 00 00 80       	or     eax,0x80000000
c0026f88:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0026f8e:	31 d2                	xor    edx,edx
c0026f90:	39 d8                	cmp    eax,ebx
c0026f92:	72 07                	jb     c0026f9b <__divsf3+0x187>
c0026f94:	29 d8                	sub    eax,ebx
c0026f96:	ba 01 00 00 00       	mov    edx,0x1
c0026f9b:	c7 45 e0 19 00 00 00 	mov    DWORD PTR [ebp-0x20],0x19
c0026fa2:	01 d2                	add    edx,edx
c0026fa4:	89 c1                	mov    ecx,eax
c0026fa6:	01 c0                	add    eax,eax
c0026fa8:	85 c9                	test   ecx,ecx
c0026faa:	78 04                	js     c0026fb0 <__divsf3+0x19c>
c0026fac:	39 c3                	cmp    ebx,eax
c0026fae:	77 05                	ja     c0026fb5 <__divsf3+0x1a1>
c0026fb0:	29 d8                	sub    eax,ebx
c0026fb2:	83 ca 01             	or     edx,0x1
c0026fb5:	ff 4d e0             	dec    DWORD PTR [ebp-0x20]
c0026fb8:	75 e8                	jne    c0026fa2 <__divsf3+0x18e>
c0026fba:	85 c0                	test   eax,eax
c0026fbc:	0f 95 c0             	setne  al
c0026fbf:	0f b6 c0             	movzx  eax,al
c0026fc2:	c1 e2 06             	shl    edx,0x6
c0026fc5:	09 c2                	or     edx,eax
c0026fc7:	78 03                	js     c0026fcc <__divsf3+0x1b8>
c0026fc9:	01 d2                	add    edx,edx
c0026fcb:	4e                   	dec    esi
c0026fcc:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0026fd2:	7f 22                	jg     c0026ff6 <__divsf3+0x1e2>
c0026fd4:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0026fda:	85 f6                	test   esi,esi
c0026fdc:	7f 23                	jg     c0027001 <__divsf3+0x1ed>
c0026fde:	83 fe e9             	cmp    esi,0xffffffe9
c0026fe1:	7c 1a                	jl     c0026ffd <__divsf3+0x1e9>
c0026fe3:	81 ca 00 00 00 80    	or     edx,0x80000000
c0026fe9:	b9 01 00 00 00       	mov    ecx,0x1
c0026fee:	29 f1                	sub    ecx,esi
c0026ff0:	d3 ea                	shr    edx,cl
c0026ff2:	31 f6                	xor    esi,esi
c0026ff4:	eb 0b                	jmp    c0027001 <__divsf3+0x1ed>
c0026ff6:	be ff 00 00 00       	mov    esi,0xff
c0026ffb:	eb 02                	jmp    c0026fff <__divsf3+0x1eb>
c0026ffd:	31 f6                	xor    esi,esi
c0026fff:	31 d2                	xor    edx,edx
c0027001:	89 d0                	mov    eax,edx
c0027003:	c1 e8 08             	shr    eax,0x8
c0027006:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c0027009:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c002700f:	09 fe                	or     esi,edi
c0027011:	c1 e6 17             	shl    esi,0x17
c0027014:	09 c6                	or     esi,eax
c0027016:	f6 c2 7f             	test   dl,0x7f
c0027019:	0f 95 c1             	setne  cl
c002701c:	09 c8                	or     eax,ecx
c002701e:	83 e0 01             	and    eax,0x1
c0027021:	c1 ea 07             	shr    edx,0x7
c0027024:	21 c2                	and    edx,eax
c0027026:	8d 1c 16             	lea    ebx,[esi+edx*1]
c0027029:	eb 0a                	jmp    c0027035 <__divsf3+0x221>
c002702b:	bb 00 00 c0 7f       	mov    ebx,0x7fc00000
c0027030:	eb 03                	jmp    c0027035 <__divsf3+0x221>
c0027032:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0027035:	89 d8                	mov    eax,ebx
c0027037:	8d 65 f4             	lea    esp,[ebp-0xc]
c002703a:	5b                   	pop    ebx
c002703b:	5e                   	pop    esi
c002703c:	5f                   	pop    edi
c002703d:	5d                   	pop    ebp
c002703e:	c3                   	ret    

c002703f <__floatsisf>:
c002703f:	55                   	push   ebp
c0027040:	89 e5                	mov    ebp,esp
c0027042:	53                   	push   ebx
c0027043:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0027046:	85 d2                	test   edx,edx
c0027048:	7e 2b                	jle    c0027075 <__floatsisf+0x36>
c002704a:	0f bd ca             	bsr    ecx,edx
c002704d:	83 f1 1f             	xor    ecx,0x1f
c0027050:	d3 e2                	shl    edx,cl
c0027052:	89 d0                	mov    eax,edx
c0027054:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027059:	89 c3                	mov    ebx,eax
c002705b:	c1 eb 08             	shr    ebx,0x8
c002705e:	80 e2 7f             	and    dl,0x7f
c0027061:	0f 95 c2             	setne  dl
c0027064:	09 da                	or     edx,ebx
c0027066:	83 e2 01             	and    edx,0x1
c0027069:	c1 e8 07             	shr    eax,0x7
c002706c:	21 c2                	and    edx,eax
c002706e:	b8 9e 00 00 00       	mov    eax,0x9e
c0027073:	eb 32                	jmp    c00270a7 <__floatsisf+0x68>
c0027075:	b8 00 00 00 00       	mov    eax,0x0
c002707a:	74 34                	je     c00270b0 <__floatsisf+0x71>
c002707c:	f7 da                	neg    edx
c002707e:	0f bd ca             	bsr    ecx,edx
c0027081:	83 f1 1f             	xor    ecx,0x1f
c0027084:	d3 e2                	shl    edx,cl
c0027086:	89 d0                	mov    eax,edx
c0027088:	25 ff ff ff 7f       	and    eax,0x7fffffff
c002708d:	89 c3                	mov    ebx,eax
c002708f:	c1 eb 08             	shr    ebx,0x8
c0027092:	80 e2 7f             	and    dl,0x7f
c0027095:	0f 95 c2             	setne  dl
c0027098:	09 da                	or     edx,ebx
c002709a:	83 e2 01             	and    edx,0x1
c002709d:	c1 e8 07             	shr    eax,0x7
c00270a0:	21 c2                	and    edx,eax
c00270a2:	b8 9e 01 00 00       	mov    eax,0x19e
c00270a7:	29 c8                	sub    eax,ecx
c00270a9:	c1 e0 17             	shl    eax,0x17
c00270ac:	09 d8                	or     eax,ebx
c00270ae:	01 d0                	add    eax,edx
c00270b0:	5b                   	pop    ebx
c00270b1:	5d                   	pop    ebp
c00270b2:	c3                   	ret    

c00270b3 <__floatunsisf>:
c00270b3:	55                   	push   ebp
c00270b4:	89 e5                	mov    ebp,esp
c00270b6:	53                   	push   ebx
c00270b7:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00270ba:	31 c0                	xor    eax,eax
c00270bc:	85 d2                	test   edx,edx
c00270be:	74 32                	je     c00270f2 <__floatunsisf+0x3f>
c00270c0:	0f bd ca             	bsr    ecx,edx
c00270c3:	83 f1 1f             	xor    ecx,0x1f
c00270c6:	d3 e2                	shl    edx,cl
c00270c8:	89 d0                	mov    eax,edx
c00270ca:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00270cf:	89 c3                	mov    ebx,eax
c00270d1:	c1 eb 08             	shr    ebx,0x8
c00270d4:	80 e2 7f             	and    dl,0x7f
c00270d7:	0f 95 c2             	setne  dl
c00270da:	09 da                	or     edx,ebx
c00270dc:	83 e2 01             	and    edx,0x1
c00270df:	c1 e8 07             	shr    eax,0x7
c00270e2:	21 c2                	and    edx,eax
c00270e4:	b8 9e 00 00 00       	mov    eax,0x9e
c00270e9:	29 c8                	sub    eax,ecx
c00270eb:	c1 e0 17             	shl    eax,0x17
c00270ee:	09 d8                	or     eax,ebx
c00270f0:	01 d0                	add    eax,edx
c00270f2:	5b                   	pop    ebx
c00270f3:	5d                   	pop    ebp
c00270f4:	c3                   	ret    

c00270f5 <__fixsfsi>:
c00270f5:	55                   	push   ebp
c00270f6:	89 e5                	mov    ebp,esp
c00270f8:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00270fb:	89 d1                	mov    ecx,edx
c00270fd:	c1 e1 08             	shl    ecx,0x8
c0027100:	81 e1 00 ff ff 7f    	and    ecx,0x7fffff00
c0027106:	c1 fa 17             	sar    edx,0x17
c0027109:	78 1c                	js     c0027127 <__fixsfsi+0x32>
c002710b:	83 ea 7f             	sub    edx,0x7f
c002710e:	31 c0                	xor    eax,eax
c0027110:	83 fa 1e             	cmp    edx,0x1e
c0027113:	77 40                	ja     c0027155 <__fixsfsi+0x60>
c0027115:	89 c8                	mov    eax,ecx
c0027117:	0d 00 00 00 80       	or     eax,0x80000000
c002711c:	b9 1f 00 00 00       	mov    ecx,0x1f
c0027121:	29 d1                	sub    ecx,edx
c0027123:	d3 e8                	shr    eax,cl
c0027125:	eb 2e                	jmp    c0027155 <__fixsfsi+0x60>
c0027127:	31 c0                	xor    eax,eax
c0027129:	81 c2 81 00 00 00    	add    edx,0x81
c002712f:	78 24                	js     c0027155 <__fixsfsi+0x60>
c0027131:	83 fa 1e             	cmp    edx,0x1e
c0027134:	7e 09                	jle    c002713f <__fixsfsi+0x4a>
c0027136:	83 fa 1f             	cmp    edx,0x1f
c0027139:	75 18                	jne    c0027153 <__fixsfsi+0x5e>
c002713b:	85 c9                	test   ecx,ecx
c002713d:	75 14                	jne    c0027153 <__fixsfsi+0x5e>
c002713f:	89 c8                	mov    eax,ecx
c0027141:	0d 00 00 00 80       	or     eax,0x80000000
c0027146:	b9 1f 00 00 00       	mov    ecx,0x1f
c002714b:	29 d1                	sub    ecx,edx
c002714d:	d3 e8                	shr    eax,cl
c002714f:	f7 d8                	neg    eax
c0027151:	eb 02                	jmp    c0027155 <__fixsfsi+0x60>
c0027153:	31 c0                	xor    eax,eax
c0027155:	5d                   	pop    ebp
c0027156:	c3                   	ret    

c0027157 <__fixunssfsi>:
c0027157:	55                   	push   ebp
c0027158:	89 e5                	mov    ebp,esp
c002715a:	53                   	push   ebx
c002715b:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c002715e:	89 d3                	mov    ebx,edx
c0027160:	c1 fb 17             	sar    ebx,0x17
c0027163:	83 eb 7f             	sub    ebx,0x7f
c0027166:	31 c0                	xor    eax,eax
c0027168:	83 fb 1f             	cmp    ebx,0x1f
c002716b:	77 18                	ja     c0027185 <__fixunssfsi+0x2e>
c002716d:	89 d0                	mov    eax,edx
c002716f:	c1 e0 08             	shl    eax,0x8
c0027172:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0027177:	0d 00 00 00 80       	or     eax,0x80000000
c002717c:	b9 1f 00 00 00       	mov    ecx,0x1f
c0027181:	29 d9                	sub    ecx,ebx
c0027183:	d3 e8                	shr    eax,cl
c0027185:	5b                   	pop    ebx
c0027186:	5d                   	pop    ebp
c0027187:	c3                   	ret    

c0027188 <__cmpsf2>:
c0027188:	55                   	push   ebp
c0027189:	89 e5                	mov    ebp,esp
c002718b:	57                   	push   edi
c002718c:	56                   	push   esi
c002718d:	53                   	push   ebx
c002718e:	83 ec 24             	sub    esp,0x24
c0027191:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027194:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0027197:	e8 4f 10 00 00       	call   c00281eb <__truncdfsf2>
c002719c:	5a                   	pop    edx
c002719d:	59                   	pop    ecx
c002719e:	89 c3                	mov    ebx,eax
c00271a0:	c1 e8 17             	shr    eax,0x17
c00271a3:	0f b6 f0             	movzx  esi,al
c00271a6:	89 d8                	mov    eax,ebx
c00271a8:	c1 e8 1f             	shr    eax,0x1f
c00271ab:	31 c6                	xor    esi,eax
c00271ad:	c1 e3 08             	shl    ebx,0x8
c00271b0:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c00271b3:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c00271b6:	e8 30 10 00 00       	call   c00281eb <__truncdfsf2>
c00271bb:	83 c4 10             	add    esp,0x10
c00271be:	89 c1                	mov    ecx,eax
c00271c0:	c1 e9 17             	shr    ecx,0x17
c00271c3:	0f b6 c9             	movzx  ecx,cl
c00271c6:	89 c7                	mov    edi,eax
c00271c8:	c1 ef 1f             	shr    edi,0x1f
c00271cb:	89 ca                	mov    edx,ecx
c00271cd:	31 fa                	xor    edx,edi
c00271cf:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c00271d2:	c1 e0 08             	shl    eax,0x8
c00271d5:	89 c2                	mov    edx,eax
c00271d7:	89 d8                	mov    eax,ebx
c00271d9:	09 d0                	or     eax,edx
c00271db:	25 00 ff ff 7f       	and    eax,0x7fffff00
c00271e0:	09 f0                	or     eax,esi
c00271e2:	75 08                	jne    c00271ec <__cmpsf2+0x64>
c00271e4:	31 c0                	xor    eax,eax
c00271e6:	39 f9                	cmp    ecx,edi
c00271e8:	75 0c                	jne    c00271f6 <__cmpsf2+0x6e>
c00271ea:	eb 29                	jmp    c0027215 <__cmpsf2+0x8d>
c00271ec:	b8 01 00 00 00       	mov    eax,0x1
c00271f1:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c00271f4:	7f 1f                	jg     c0027215 <__cmpsf2+0x8d>
c00271f6:	83 c8 ff             	or     eax,0xffffffff
c00271f9:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c00271fc:	7c 17                	jl     c0027215 <__cmpsf2+0x8d>
c00271fe:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c0027204:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c002720a:	b8 01 00 00 00       	mov    eax,0x1
c002720f:	39 d3                	cmp    ebx,edx
c0027211:	77 02                	ja     c0027215 <__cmpsf2+0x8d>
c0027213:	19 c0                	sbb    eax,eax
c0027215:	8d 65 f4             	lea    esp,[ebp-0xc]
c0027218:	5b                   	pop    ebx
c0027219:	5e                   	pop    esi
c002721a:	5f                   	pop    edi
c002721b:	5d                   	pop    ebp
c002721c:	c3                   	ret    

c002721d <__eqsf2>:
c002721d:	55                   	push   ebp
c002721e:	89 e5                	mov    ebp,esp
c0027220:	83 ec 24             	sub    esp,0x24
c0027223:	6a 01                	push   0x1
c0027225:	83 ec 0c             	sub    esp,0xc
c0027228:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c002722b:	e8 df 10 00 00       	call   c002830f <__extendsfdf2>
c0027230:	83 c4 10             	add    esp,0x10
c0027233:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0027236:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0027239:	52                   	push   edx
c002723a:	50                   	push   eax
c002723b:	50                   	push   eax
c002723c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002723f:	e8 cb 10 00 00       	call   c002830f <__extendsfdf2>
c0027244:	59                   	pop    ecx
c0027245:	59                   	pop    ecx
c0027246:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0027249:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c002724c:	52                   	push   edx
c002724d:	50                   	push   eax
c002724e:	e8 35 ff ff ff       	call   c0027188 <__cmpsf2>
c0027253:	83 c4 20             	add    esp,0x20
c0027256:	c9                   	leave  
c0027257:	c3                   	ret    

c0027258 <__nesf2>:
c0027258:	eb c3                	jmp    c002721d <__eqsf2>

c002725a <__gtsf2>:
c002725a:	55                   	push   ebp
c002725b:	89 e5                	mov    ebp,esp
c002725d:	83 ec 24             	sub    esp,0x24
c0027260:	6a ff                	push   0xffffffff
c0027262:	83 ec 0c             	sub    esp,0xc
c0027265:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027268:	e8 a2 10 00 00       	call   c002830f <__extendsfdf2>
c002726d:	83 c4 10             	add    esp,0x10
c0027270:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0027273:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0027276:	52                   	push   edx
c0027277:	50                   	push   eax
c0027278:	50                   	push   eax
c0027279:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002727c:	e8 8e 10 00 00       	call   c002830f <__extendsfdf2>
c0027281:	59                   	pop    ecx
c0027282:	59                   	pop    ecx
c0027283:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0027286:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0027289:	52                   	push   edx
c002728a:	50                   	push   eax
c002728b:	e8 f8 fe ff ff       	call   c0027188 <__cmpsf2>
c0027290:	83 c4 20             	add    esp,0x20
c0027293:	c9                   	leave  
c0027294:	c3                   	ret    

c0027295 <__gesf2>:
c0027295:	eb c3                	jmp    c002725a <__gtsf2>

c0027297 <__ltsf2>:
c0027297:	eb 84                	jmp    c002721d <__eqsf2>

c0027299 <__lesf2>:
c0027299:	eb 82                	jmp    c002721d <__eqsf2>

c002729b <__adddf3>:
c002729b:	55                   	push   ebp
c002729c:	89 e5                	mov    ebp,esp
c002729e:	57                   	push   edi
c002729f:	56                   	push   esi
c00272a0:	53                   	push   ebx
c00272a1:	83 ec 24             	sub    esp,0x24
c00272a4:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c00272a7:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00272aa:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00272ad:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c00272b0:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c00272b3:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c00272b6:	89 c8                	mov    eax,ecx
c00272b8:	89 ce                	mov    esi,ecx
c00272ba:	c1 fe 14             	sar    esi,0x14
c00272bd:	89 75 e4             	mov    DWORD PTR [ebp-0x1c],esi
c00272c0:	89 fb                	mov    ebx,edi
c00272c2:	89 fa                	mov    edx,edi
c00272c4:	c1 e2 0b             	shl    edx,0xb
c00272c7:	c1 e0 0b             	shl    eax,0xb
c00272ca:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c00272cf:	c1 eb 15             	shr    ebx,0x15
c00272d2:	09 d8                	or     eax,ebx
c00272d4:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c00272d7:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c00272da:	c1 fe 14             	sar    esi,0x14
c00272dd:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c00272e0:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c00272e3:	89 f3                	mov    ebx,esi
c00272e5:	c1 e3 0b             	shl    ebx,0xb
c00272e8:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c00272eb:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c00272ee:	c1 e3 0b             	shl    ebx,0xb
c00272f1:	81 e3 00 f8 ff 7f    	and    ebx,0x7ffff800
c00272f7:	c1 ee 15             	shr    esi,0x15
c00272fa:	09 f3                	or     ebx,esi
c00272fc:	89 5d e8             	mov    DWORD PTR [ebp-0x18],ebx
c00272ff:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0027302:	33 75 ec             	xor    esi,DWORD PTR [ebp-0x14]
c0027305:	0f 88 5f 02 00 00    	js     c002756a <__adddf3+0x2cf>
c002730b:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c002730e:	2b 5d ec             	sub    ebx,DWORD PTR [ebp-0x14]
c0027311:	85 db                	test   ebx,ebx
c0027313:	0f 8e c7 00 00 00    	jle    c00273e0 <__adddf3+0x145>
c0027319:	f7 45 ec ff 07 00 00 	test   DWORD PTR [ebp-0x14],0x7ff
c0027320:	75 1a                	jne    c002733c <__adddf3+0xa1>
c0027322:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0027325:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c0027328:	0f 84 b2 05 00 00    	je     c00278e0 <__adddf3+0x645>
c002732e:	4b                   	dec    ebx
c002732f:	75 23                	jne    c0027354 <__adddf3+0xb9>
c0027331:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c0027334:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c0027337:	e9 99 00 00 00       	jmp    c00273d5 <__adddf3+0x13a>
c002733c:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c002733f:	f7 d6                	not    esi
c0027341:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0027347:	0f 84 93 05 00 00    	je     c00278e0 <__adddf3+0x645>
c002734d:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c0027354:	83 fb 1f             	cmp    ebx,0x1f
c0027357:	7e 42                	jle    c002739b <__adddf3+0x100>
c0027359:	83 fb 3f             	cmp    ebx,0x3f
c002735c:	0f 8f 7e 05 00 00    	jg     c00278e0 <__adddf3+0x645>
c0027362:	83 e3 1f             	and    ebx,0x1f
c0027365:	89 d9                	mov    ecx,ebx
c0027367:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c002736a:	d3 ef                	shr    edi,cl
c002736c:	31 db                	xor    ebx,ebx
c002736e:	85 c9                	test   ecx,ecx
c0027370:	74 15                	je     c0027387 <__adddf3+0xec>
c0027372:	be 20 00 00 00       	mov    esi,0x20
c0027377:	29 ce                	sub    esi,ecx
c0027379:	89 f1                	mov    ecx,esi
c002737b:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c002737e:	d3 e6                	shl    esi,cl
c0027380:	31 db                	xor    ebx,ebx
c0027382:	85 f6                	test   esi,esi
c0027384:	0f 95 c3             	setne  bl
c0027387:	31 c9                	xor    ecx,ecx
c0027389:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c002738d:	0f 95 c1             	setne  cl
c0027390:	09 cf                	or     edi,ecx
c0027392:	09 fb                	or     ebx,edi
c0027394:	01 da                	add    edx,ebx
c0027396:	83 d0 00             	adc    eax,0x0
c0027399:	eb 3a                	jmp    c00273d5 <__adddf3+0x13a>
c002739b:	bf 20 00 00 00       	mov    edi,0x20
c00273a0:	29 df                	sub    edi,ebx
c00273a2:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00273a5:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00273a8:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c00273ab:	d3 e6                	shl    esi,cl
c00273ad:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c00273b0:	88 d9                	mov    cl,bl
c00273b2:	d3 ef                	shr    edi,cl
c00273b4:	09 fe                	or     esi,edi
c00273b6:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c00273b9:	88 d9                	mov    cl,bl
c00273bb:	d3 ef                	shr    edi,cl
c00273bd:	89 fb                	mov    ebx,edi
c00273bf:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c00273c2:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c00273c5:	d3 e7                	shl    edi,cl
c00273c7:	85 ff                	test   edi,edi
c00273c9:	0f 95 c1             	setne  cl
c00273cc:	0f b6 c9             	movzx  ecx,cl
c00273cf:	09 ce                	or     esi,ecx
c00273d1:	01 f2                	add    edx,esi
c00273d3:	11 d8                	adc    eax,ebx
c00273d5:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00273d8:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00273db:	e9 52 01 00 00       	jmp    c0027532 <__adddf3+0x297>
c00273e0:	0f 84 d5 00 00 00    	je     c00274bb <__adddf3+0x220>
c00273e6:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c00273e9:	2b 5d e4             	sub    ebx,DWORD PTR [ebp-0x1c]
c00273ec:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c00273ef:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00273f2:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c00273f9:	75 20                	jne    c002741b <__adddf3+0x180>
c00273fb:	89 d6                	mov    esi,edx
c00273fd:	09 c6                	or     esi,eax
c00273ff:	0f 84 db 04 00 00    	je     c00278e0 <__adddf3+0x645>
c0027405:	4b                   	dec    ebx
c0027406:	75 29                	jne    c0027431 <__adddf3+0x196>
c0027408:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c002740b:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c002740e:	01 d1                	add    ecx,edx
c0027410:	11 c6                	adc    esi,eax
c0027412:	89 f0                	mov    eax,esi
c0027414:	89 ca                	mov    edx,ecx
c0027416:	e9 17 01 00 00       	jmp    c0027532 <__adddf3+0x297>
c002741b:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c002741e:	f7 d6                	not    esi
c0027420:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0027426:	0f 84 b4 04 00 00    	je     c00278e0 <__adddf3+0x645>
c002742c:	0d 00 00 00 80       	or     eax,0x80000000
c0027431:	83 fb 1f             	cmp    ebx,0x1f
c0027434:	7e 48                	jle    c002747e <__adddf3+0x1e3>
c0027436:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027439:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c002743c:	83 fb 3f             	cmp    ebx,0x3f
c002743f:	0f 8f 9b 04 00 00    	jg     c00278e0 <__adddf3+0x645>
c0027445:	83 e3 1f             	and    ebx,0x1f
c0027448:	89 d9                	mov    ecx,ebx
c002744a:	89 c7                	mov    edi,eax
c002744c:	d3 ef                	shr    edi,cl
c002744e:	31 db                	xor    ebx,ebx
c0027450:	85 c9                	test   ecx,ecx
c0027452:	74 12                	je     c0027466 <__adddf3+0x1cb>
c0027454:	be 20 00 00 00       	mov    esi,0x20
c0027459:	29 ce                	sub    esi,ecx
c002745b:	89 f1                	mov    ecx,esi
c002745d:	d3 e0                	shl    eax,cl
c002745f:	31 db                	xor    ebx,ebx
c0027461:	85 c0                	test   eax,eax
c0027463:	0f 95 c3             	setne  bl
c0027466:	31 c0                	xor    eax,eax
c0027468:	85 d2                	test   edx,edx
c002746a:	0f 95 c0             	setne  al
c002746d:	09 c7                	or     edi,eax
c002746f:	09 fb                	or     ebx,edi
c0027471:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027474:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0027477:	01 da                	add    edx,ebx
c0027479:	83 d6 00             	adc    esi,0x0
c002747c:	eb 39                	jmp    c00274b7 <__adddf3+0x21c>
c002747e:	be 20 00 00 00       	mov    esi,0x20
c0027483:	29 de                	sub    esi,ebx
c0027485:	89 c7                	mov    edi,eax
c0027487:	89 f1                	mov    ecx,esi
c0027489:	d3 e7                	shl    edi,cl
c002748b:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c002748e:	89 d7                	mov    edi,edx
c0027490:	88 d9                	mov    cl,bl
c0027492:	d3 ef                	shr    edi,cl
c0027494:	89 f9                	mov    ecx,edi
c0027496:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027499:	09 cf                	or     edi,ecx
c002749b:	88 d9                	mov    cl,bl
c002749d:	d3 e8                	shr    eax,cl
c002749f:	89 f1                	mov    ecx,esi
c00274a1:	d3 e2                	shl    edx,cl
c00274a3:	85 d2                	test   edx,edx
c00274a5:	0f 95 c2             	setne  dl
c00274a8:	0f b6 d2             	movzx  edx,dl
c00274ab:	09 d7                	or     edi,edx
c00274ad:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00274b0:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c00274b3:	01 fa                	add    edx,edi
c00274b5:	11 c6                	adc    esi,eax
c00274b7:	89 f0                	mov    eax,esi
c00274b9:	eb 77                	jmp    c0027532 <__adddf3+0x297>
c00274bb:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c00274be:	46                   	inc    esi
c00274bf:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c00274c2:	81 e6 fe 07 00 00    	and    esi,0x7fe
c00274c8:	75 41                	jne    c002750b <__adddf3+0x270>
c00274ca:	89 d3                	mov    ebx,edx
c00274cc:	09 c3                	or     ebx,eax
c00274ce:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c00274d5:	75 27                	jne    c00274fe <__adddf3+0x263>
c00274d7:	85 db                	test   ebx,ebx
c00274d9:	0f 84 fb 03 00 00    	je     c00278da <__adddf3+0x63f>
c00274df:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c00274e2:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c00274e5:	0f 84 f5 03 00 00    	je     c00278e0 <__adddf3+0x645>
c00274eb:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c00274ee:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c00274f1:	85 c0                	test   eax,eax
c00274f3:	0f 89 91 03 00 00    	jns    c002788a <__adddf3+0x5ef>
c00274f9:	e9 85 03 00 00       	jmp    c0027883 <__adddf3+0x5e8>
c00274fe:	85 db                	test   ebx,ebx
c0027500:	0f 85 da 03 00 00    	jne    c00278e0 <__adddf3+0x645>
c0027506:	e9 cf 03 00 00       	jmp    c00278da <__adddf3+0x63f>
c002750b:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c002750e:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c0027511:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027514:	f7 d1                	not    ecx
c0027516:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c002751c:	0f 84 70 03 00 00    	je     c0027892 <__adddf3+0x5f7>
c0027522:	d1 ea                	shr    edx,1
c0027524:	89 c1                	mov    ecx,eax
c0027526:	c1 e1 1f             	shl    ecx,0x1f
c0027529:	09 ca                	or     edx,ecx
c002752b:	d1 e8                	shr    eax,1
c002752d:	e9 6f 03 00 00       	jmp    c00278a1 <__adddf3+0x606>
c0027532:	85 c0                	test   eax,eax
c0027534:	0f 89 67 03 00 00    	jns    c00278a1 <__adddf3+0x606>
c002753a:	ff 45 ec             	inc    DWORD PTR [ebp-0x14]
c002753d:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027540:	f7 d1                	not    ecx
c0027542:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0027548:	0f 84 44 03 00 00    	je     c0027892 <__adddf3+0x5f7>
c002754e:	89 d1                	mov    ecx,edx
c0027550:	d1 e9                	shr    ecx,1
c0027552:	83 e2 01             	and    edx,0x1
c0027555:	09 ca                	or     edx,ecx
c0027557:	89 c1                	mov    ecx,eax
c0027559:	c1 e1 1f             	shl    ecx,0x1f
c002755c:	09 ca                	or     edx,ecx
c002755e:	d1 e8                	shr    eax,1
c0027560:	25 ff ff ff 3f       	and    eax,0x3fffffff
c0027565:	e9 37 03 00 00       	jmp    c00278a1 <__adddf3+0x606>
c002756a:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c002756d:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0027573:	89 75 d4             	mov    DWORD PTR [ebp-0x2c],esi
c0027576:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0027579:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c002757f:	29 de                	sub    esi,ebx
c0027581:	85 f6                	test   esi,esi
c0027583:	0f 8e bd 00 00 00    	jle    c0027646 <__adddf3+0x3ab>
c0027589:	85 db                	test   ebx,ebx
c002758b:	75 17                	jne    c00275a4 <__adddf3+0x309>
c002758d:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0027590:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c0027593:	0f 84 47 03 00 00    	je     c00278e0 <__adddf3+0x645>
c0027599:	4e                   	dec    esi
c002759a:	75 20                	jne    c00275bc <__adddf3+0x321>
c002759c:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c002759f:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c00275a2:	eb 5b                	jmp    c00275ff <__adddf3+0x364>
c00275a4:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c00275a7:	f7 d3                	not    ebx
c00275a9:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c00275af:	0f 84 2b 03 00 00    	je     c00278e0 <__adddf3+0x645>
c00275b5:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c00275bc:	83 fe 1f             	cmp    esi,0x1f
c00275bf:	7e 49                	jle    c002760a <__adddf3+0x36f>
c00275c1:	83 fe 3f             	cmp    esi,0x3f
c00275c4:	0f 8f 16 03 00 00    	jg     c00278e0 <__adddf3+0x645>
c00275ca:	83 e6 1f             	and    esi,0x1f
c00275cd:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c00275d0:	89 f1                	mov    ecx,esi
c00275d2:	d3 ef                	shr    edi,cl
c00275d4:	31 db                	xor    ebx,ebx
c00275d6:	85 f6                	test   esi,esi
c00275d8:	74 13                	je     c00275ed <__adddf3+0x352>
c00275da:	b9 20 00 00 00       	mov    ecx,0x20
c00275df:	29 f1                	sub    ecx,esi
c00275e1:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00275e4:	d3 e6                	shl    esi,cl
c00275e6:	31 db                	xor    ebx,ebx
c00275e8:	85 f6                	test   esi,esi
c00275ea:	0f 95 c3             	setne  bl
c00275ed:	31 c9                	xor    ecx,ecx
c00275ef:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c00275f3:	0f 95 c1             	setne  cl
c00275f6:	09 cf                	or     edi,ecx
c00275f8:	09 fb                	or     ebx,edi
c00275fa:	29 da                	sub    edx,ebx
c00275fc:	83 d8 00             	sbb    eax,0x0
c00275ff:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027602:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027605:	e9 aa 01 00 00       	jmp    c00277b4 <__adddf3+0x519>
c002760a:	bf 20 00 00 00       	mov    edi,0x20
c002760f:	29 f7                	sub    edi,esi
c0027611:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027614:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0027617:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c002761a:	d3 e3                	shl    ebx,cl
c002761c:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c002761f:	89 f1                	mov    ecx,esi
c0027621:	d3 ef                	shr    edi,cl
c0027623:	09 fb                	or     ebx,edi
c0027625:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0027628:	89 f1                	mov    ecx,esi
c002762a:	d3 ef                	shr    edi,cl
c002762c:	89 fe                	mov    esi,edi
c002762e:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0027631:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c0027634:	d3 e7                	shl    edi,cl
c0027636:	85 ff                	test   edi,edi
c0027638:	0f 95 c1             	setne  cl
c002763b:	0f b6 c9             	movzx  ecx,cl
c002763e:	09 cb                	or     ebx,ecx
c0027640:	29 da                	sub    edx,ebx
c0027642:	19 f0                	sbb    eax,esi
c0027644:	eb b9                	jmp    c00275ff <__adddf3+0x364>
c0027646:	0f 84 cd 00 00 00    	je     c0027719 <__adddf3+0x47e>
c002764c:	2b 5d d4             	sub    ebx,DWORD PTR [ebp-0x2c]
c002764f:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027652:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0027655:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0027659:	75 1b                	jne    c0027676 <__adddf3+0x3db>
c002765b:	89 d6                	mov    esi,edx
c002765d:	09 c6                	or     esi,eax
c002765f:	0f 84 7b 02 00 00    	je     c00278e0 <__adddf3+0x645>
c0027665:	4b                   	dec    ebx
c0027666:	75 24                	jne    c002768c <__adddf3+0x3f1>
c0027668:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c002766b:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c002766e:	29 d1                	sub    ecx,edx
c0027670:	19 c6                	sbb    esi,eax
c0027672:	89 ca                	mov    edx,ecx
c0027674:	eb 61                	jmp    c00276d7 <__adddf3+0x43c>
c0027676:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c0027679:	f7 d6                	not    esi
c002767b:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0027681:	0f 84 59 02 00 00    	je     c00278e0 <__adddf3+0x645>
c0027687:	0d 00 00 00 80       	or     eax,0x80000000
c002768c:	83 fb 1f             	cmp    ebx,0x1f
c002768f:	7e 4d                	jle    c00276de <__adddf3+0x443>
c0027691:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027694:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0027697:	83 fb 3f             	cmp    ebx,0x3f
c002769a:	0f 8f 40 02 00 00    	jg     c00278e0 <__adddf3+0x645>
c00276a0:	83 e3 1f             	and    ebx,0x1f
c00276a3:	89 d9                	mov    ecx,ebx
c00276a5:	89 c7                	mov    edi,eax
c00276a7:	d3 ef                	shr    edi,cl
c00276a9:	31 db                	xor    ebx,ebx
c00276ab:	85 c9                	test   ecx,ecx
c00276ad:	74 12                	je     c00276c1 <__adddf3+0x426>
c00276af:	be 20 00 00 00       	mov    esi,0x20
c00276b4:	29 ce                	sub    esi,ecx
c00276b6:	89 f1                	mov    ecx,esi
c00276b8:	d3 e0                	shl    eax,cl
c00276ba:	31 db                	xor    ebx,ebx
c00276bc:	85 c0                	test   eax,eax
c00276be:	0f 95 c3             	setne  bl
c00276c1:	31 c0                	xor    eax,eax
c00276c3:	85 d2                	test   edx,edx
c00276c5:	0f 95 c0             	setne  al
c00276c8:	09 c7                	or     edi,eax
c00276ca:	09 fb                	or     ebx,edi
c00276cc:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00276cf:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c00276d2:	29 da                	sub    edx,ebx
c00276d4:	83 de 00             	sbb    esi,0x0
c00276d7:	89 f0                	mov    eax,esi
c00276d9:	e9 d6 00 00 00       	jmp    c00277b4 <__adddf3+0x519>
c00276de:	be 20 00 00 00       	mov    esi,0x20
c00276e3:	29 de                	sub    esi,ebx
c00276e5:	89 c7                	mov    edi,eax
c00276e7:	89 f1                	mov    ecx,esi
c00276e9:	d3 e7                	shl    edi,cl
c00276eb:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c00276ee:	89 d7                	mov    edi,edx
c00276f0:	88 d9                	mov    cl,bl
c00276f2:	d3 ef                	shr    edi,cl
c00276f4:	89 f9                	mov    ecx,edi
c00276f6:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00276f9:	09 cf                	or     edi,ecx
c00276fb:	88 d9                	mov    cl,bl
c00276fd:	d3 e8                	shr    eax,cl
c00276ff:	89 f1                	mov    ecx,esi
c0027701:	d3 e2                	shl    edx,cl
c0027703:	85 d2                	test   edx,edx
c0027705:	0f 95 c2             	setne  dl
c0027708:	0f b6 d2             	movzx  edx,dl
c002770b:	09 d7                	or     edi,edx
c002770d:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027710:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0027713:	29 fa                	sub    edx,edi
c0027715:	19 c6                	sbb    esi,eax
c0027717:	eb be                	jmp    c00276d7 <__adddf3+0x43c>
c0027719:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c002771c:	8d 5e 01             	lea    ebx,[esi+0x1]
c002771f:	81 e3 fe 07 00 00    	and    ebx,0x7fe
c0027725:	75 6a                	jne    c0027791 <__adddf3+0x4f6>
c0027727:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c002772b:	75 58                	jne    c0027785 <__adddf3+0x4ea>
c002772d:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0027730:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c0027733:	89 d6                	mov    esi,edx
c0027735:	09 c6                	or     esi,eax
c0027737:	75 17                	jne    c0027750 <__adddf3+0x4b5>
c0027739:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c002773c:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c002773f:	85 db                	test   ebx,ebx
c0027741:	0f 85 99 01 00 00    	jne    c00278e0 <__adddf3+0x645>
c0027747:	31 ff                	xor    edi,edi
c0027749:	31 c9                	xor    ecx,ecx
c002774b:	e9 90 01 00 00       	jmp    c00278e0 <__adddf3+0x645>
c0027750:	85 db                	test   ebx,ebx
c0027752:	0f 84 88 01 00 00    	je     c00278e0 <__adddf3+0x645>
c0027758:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c002775b:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c002775e:	85 c0                	test   eax,eax
c0027760:	79 10                	jns    c0027772 <__adddf3+0x4d7>
c0027762:	31 c9                	xor    ecx,ecx
c0027764:	f7 da                	neg    edx
c0027766:	0f 95 c1             	setne  cl
c0027769:	01 c8                	add    eax,ecx
c002776b:	f7 d8                	neg    eax
c002776d:	e9 2f 01 00 00       	jmp    c00278a1 <__adddf3+0x606>
c0027772:	31 ff                	xor    edi,edi
c0027774:	31 c9                	xor    ecx,ecx
c0027776:	89 c3                	mov    ebx,eax
c0027778:	09 d3                	or     ebx,edx
c002777a:	0f 84 60 01 00 00    	je     c00278e0 <__adddf3+0x645>
c0027780:	e9 05 01 00 00       	jmp    c002788a <__adddf3+0x5ef>
c0027785:	31 ff                	xor    edi,edi
c0027787:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c002778c:	e9 4f 01 00 00       	jmp    c00278e0 <__adddf3+0x645>
c0027791:	89 c1                	mov    ecx,eax
c0027793:	89 d0                	mov    eax,edx
c0027795:	2b 45 e0             	sub    eax,DWORD PTR [ebp-0x20]
c0027798:	1b 4d e8             	sbb    ecx,DWORD PTR [ebp-0x18]
c002779b:	89 ca                	mov    edx,ecx
c002779d:	85 c9                	test   ecx,ecx
c002779f:	79 2c                	jns    c00277cd <__adddf3+0x532>
c00277a1:	31 c9                	xor    ecx,ecx
c00277a3:	f7 d8                	neg    eax
c00277a5:	0f 95 c1             	setne  cl
c00277a8:	01 ca                	add    edx,ecx
c00277aa:	f7 da                	neg    edx
c00277ac:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c00277af:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c00277b2:	eb 19                	jmp    c00277cd <__adddf3+0x532>
c00277b4:	85 c0                	test   eax,eax
c00277b6:	0f 89 e5 00 00 00    	jns    c00278a1 <__adddf3+0x606>
c00277bc:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00277c1:	89 c1                	mov    ecx,eax
c00277c3:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00277c6:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c00277c9:	89 d0                	mov    eax,edx
c00277cb:	89 ca                	mov    edx,ecx
c00277cd:	85 d2                	test   edx,edx
c00277cf:	74 59                	je     c002782a <__adddf3+0x58f>
c00277d1:	0f bd da             	bsr    ebx,edx
c00277d4:	83 f3 1f             	xor    ebx,0x1f
c00277d7:	88 d9                	mov    cl,bl
c00277d9:	d3 e2                	shl    edx,cl
c00277db:	bf 20 00 00 00       	mov    edi,0x20
c00277e0:	89 f9                	mov    ecx,edi
c00277e2:	29 d9                	sub    ecx,ebx
c00277e4:	89 c6                	mov    esi,eax
c00277e6:	d3 ee                	shr    esi,cl
c00277e8:	09 d6                	or     esi,edx
c00277ea:	88 d9                	mov    cl,bl
c00277ec:	d3 e0                	shl    eax,cl
c00277ee:	89 c2                	mov    edx,eax
c00277f0:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00277f3:	25 ff 07 00 00       	and    eax,0x7ff
c00277f8:	39 d8                	cmp    eax,ebx
c00277fa:	7f 22                	jg     c002781e <__adddf3+0x583>
c00277fc:	29 c3                	sub    ebx,eax
c00277fe:	43                   	inc    ebx
c00277ff:	88 d9                	mov    cl,bl
c0027801:	d3 ea                	shr    edx,cl
c0027803:	29 df                	sub    edi,ebx
c0027805:	89 f9                	mov    ecx,edi
c0027807:	89 f0                	mov    eax,esi
c0027809:	d3 e0                	shl    eax,cl
c002780b:	09 c2                	or     edx,eax
c002780d:	89 f0                	mov    eax,esi
c002780f:	88 d9                	mov    cl,bl
c0027811:	d3 e8                	shr    eax,cl
c0027813:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027816:	81 e7 00 f8 ff ff    	and    edi,0xfffff800
c002781c:	eb 6f                	jmp    c002788d <__adddf3+0x5f2>
c002781e:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027821:	29 d8                	sub    eax,ebx
c0027823:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027826:	89 f0                	mov    eax,esi
c0027828:	eb 59                	jmp    c0027883 <__adddf3+0x5e8>
c002782a:	85 c0                	test   eax,eax
c002782c:	74 6a                	je     c0027898 <__adddf3+0x5fd>
c002782e:	0f bd c8             	bsr    ecx,eax
c0027831:	83 f1 1f             	xor    ecx,0x1f
c0027834:	d3 e0                	shl    eax,cl
c0027836:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0027839:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c002783f:	83 c1 20             	add    ecx,0x20
c0027842:	39 cb                	cmp    ebx,ecx
c0027844:	7f 35                	jg     c002787b <__adddf3+0x5e0>
c0027846:	29 d9                	sub    ecx,ebx
c0027848:	8d 71 01             	lea    esi,[ecx+0x1]
c002784b:	83 fe 1f             	cmp    esi,0x1f
c002784e:	7e 09                	jle    c0027859 <__adddf3+0x5be>
c0027850:	83 e9 1f             	sub    ecx,0x1f
c0027853:	d3 e8                	shr    eax,cl
c0027855:	89 c3                	mov    ebx,eax
c0027857:	eb 11                	jmp    c002786a <__adddf3+0x5cf>
c0027859:	b9 20 00 00 00       	mov    ecx,0x20
c002785e:	29 f1                	sub    ecx,esi
c0027860:	89 c3                	mov    ebx,eax
c0027862:	d3 e3                	shl    ebx,cl
c0027864:	89 f1                	mov    ecx,esi
c0027866:	d3 e8                	shr    eax,cl
c0027868:	89 c2                	mov    edx,eax
c002786a:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002786d:	25 00 f8 ff ff       	and    eax,0xfffff800
c0027872:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027875:	89 d0                	mov    eax,edx
c0027877:	89 da                	mov    edx,ebx
c0027879:	eb 26                	jmp    c00278a1 <__adddf3+0x606>
c002787b:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c002787e:	29 cf                	sub    edi,ecx
c0027880:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027883:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027888:	eb 17                	jmp    c00278a1 <__adddf3+0x606>
c002788a:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c002788d:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027890:	eb 0f                	jmp    c00278a1 <__adddf3+0x606>
c0027892:	31 d2                	xor    edx,edx
c0027894:	31 c0                	xor    eax,eax
c0027896:	eb 09                	jmp    c00278a1 <__adddf3+0x606>
c0027898:	89 c2                	mov    edx,eax
c002789a:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c00278a1:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00278a4:	c1 e1 14             	shl    ecx,0x14
c00278a7:	89 c3                	mov    ebx,eax
c00278a9:	c1 eb 0b             	shr    ebx,0xb
c00278ac:	09 d9                	or     ecx,ebx
c00278ae:	89 d3                	mov    ebx,edx
c00278b0:	c1 eb 0b             	shr    ebx,0xb
c00278b3:	c1 e0 15             	shl    eax,0x15
c00278b6:	09 d8                	or     eax,ebx
c00278b8:	89 c7                	mov    edi,eax
c00278ba:	f7 c2 ff 03 00 00    	test   edx,0x3ff
c00278c0:	0f 95 c0             	setne  al
c00278c3:	89 c6                	mov    esi,eax
c00278c5:	09 f3                	or     ebx,esi
c00278c7:	83 e3 01             	and    ebx,0x1
c00278ca:	c1 ea 0a             	shr    edx,0xa
c00278cd:	21 da                	and    edx,ebx
c00278cf:	89 f8                	mov    eax,edi
c00278d1:	01 d0                	add    eax,edx
c00278d3:	83 d1 00             	adc    ecx,0x0
c00278d6:	89 c7                	mov    edi,eax
c00278d8:	eb 06                	jmp    c00278e0 <__adddf3+0x645>
c00278da:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c00278dd:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00278e0:	89 f8                	mov    eax,edi
c00278e2:	89 ca                	mov    edx,ecx
c00278e4:	83 c4 24             	add    esp,0x24
c00278e7:	5b                   	pop    ebx
c00278e8:	5e                   	pop    esi
c00278e9:	5f                   	pop    edi
c00278ea:	5d                   	pop    ebp
c00278eb:	c3                   	ret    

c00278ec <__subdf3>:
c00278ec:	55                   	push   ebp
c00278ed:	89 e5                	mov    ebp,esp
c00278ef:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00278f2:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c00278f5:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c00278fb:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c00278fe:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c0027901:	5d                   	pop    ebp
c0027902:	e9 94 f9 ff ff       	jmp    c002729b <__adddf3>

c0027907 <__negdf2>:
c0027907:	55                   	push   ebp
c0027908:	89 e5                	mov    ebp,esp
c002790a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002790d:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0027910:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c0027916:	5d                   	pop    ebp
c0027917:	c3                   	ret    

c0027918 <__muldf3>:
c0027918:	55                   	push   ebp
c0027919:	89 e5                	mov    ebp,esp
c002791b:	57                   	push   edi
c002791c:	56                   	push   esi
c002791d:	53                   	push   ebx
c002791e:	83 ec 24             	sub    esp,0x24
c0027921:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0027924:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0027927:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c002792a:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c002792d:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0027930:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0027933:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027936:	89 c8                	mov    eax,ecx
c0027938:	c1 f8 14             	sar    eax,0x14
c002793b:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c002793e:	89 f8                	mov    eax,edi
c0027940:	89 fb                	mov    ebx,edi
c0027942:	c1 e3 0b             	shl    ebx,0xb
c0027945:	89 5d e4             	mov    DWORD PTR [ebp-0x1c],ebx
c0027948:	c1 e1 0b             	shl    ecx,0xb
c002794b:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0027951:	c1 e8 15             	shr    eax,0x15
c0027954:	09 c1                	or     ecx,eax
c0027956:	89 d6                	mov    esi,edx
c0027958:	89 d0                	mov    eax,edx
c002795a:	c1 f8 14             	sar    eax,0x14
c002795d:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0027960:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0027963:	89 c3                	mov    ebx,eax
c0027965:	c1 e3 0b             	shl    ebx,0xb
c0027968:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c002796b:	c1 e6 0b             	shl    esi,0xb
c002796e:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c0027974:	c1 e8 15             	shr    eax,0x15
c0027977:	09 c6                	or     esi,eax
c0027979:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c002797c:	25 ff 07 00 00       	and    eax,0x7ff
c0027981:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0027984:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027987:	25 ff 07 00 00       	and    eax,0x7ff
c002798c:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c002798f:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0027992:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c0027995:	8d 9c 18 02 fc ff ff 	lea    ebx,[eax+ebx*1-0x3fe]
c002799c:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c002799f:	40                   	inc    eax
c00279a0:	a9 fe 07 00 00       	test   eax,0x7fe
c00279a5:	0f 85 8d 00 00 00    	jne    c0027a38 <__muldf3+0x120>
c00279ab:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00279ae:	09 c8                	or     eax,ecx
c00279b0:	83 7d d0 00          	cmp    DWORD PTR [ebp-0x30],0x0
c00279b4:	74 44                	je     c00279fa <__muldf3+0xe2>
c00279b6:	85 c0                	test   eax,eax
c00279b8:	0f 85 31 02 00 00    	jne    c0027bef <__muldf3+0x2d7>
c00279be:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c00279c1:	40                   	inc    eax
c00279c2:	a9 fe 07 00 00       	test   eax,0x7fe
c00279c7:	75 13                	jne    c00279dc <__muldf3+0xc4>
c00279c9:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c00279cc:	09 f1                	or     ecx,esi
c00279ce:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c00279d2:	74 22                	je     c00279f6 <__muldf3+0xde>
c00279d4:	85 c9                	test   ecx,ecx
c00279d6:	0f 85 0d 02 00 00    	jne    c0027be9 <__muldf3+0x2d1>
c00279dc:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
c00279e0:	0f 89 09 02 00 00    	jns    c0027bef <__muldf3+0x2d7>
c00279e6:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00279e9:	05 00 00 00 80       	add    eax,0x80000000
c00279ee:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00279f1:	e9 f9 01 00 00       	jmp    c0027bef <__muldf3+0x2d7>
c00279f6:	85 c9                	test   ecx,ecx
c00279f8:	eb 2e                	jmp    c0027a28 <__muldf3+0x110>
c00279fa:	85 c0                	test   eax,eax
c00279fc:	74 20                	je     c0027a1e <__muldf3+0x106>
c00279fe:	8d 04 09             	lea    eax,[ecx+ecx*1]
c0027a01:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027a04:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027a07:	c1 ef 1f             	shr    edi,0x1f
c0027a0a:	8b 4d e4             	mov    ecx,DWORD PTR [ebp-0x1c]
c0027a0d:	01 4d e4             	add    DWORD PTR [ebp-0x1c],ecx
c0027a10:	8d 43 ff             	lea    eax,[ebx-0x1]
c0027a13:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027a16:	09 f9                	or     ecx,edi
c0027a18:	78 1e                	js     c0027a38 <__muldf3+0x120>
c0027a1a:	89 c3                	mov    ebx,eax
c0027a1c:	eb e0                	jmp    c00279fe <__muldf3+0xe6>
c0027a1e:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027a21:	f7 d0                	not    eax
c0027a23:	a9 ff 07 00 00       	test   eax,0x7ff
c0027a28:	75 b2                	jne    c00279dc <__muldf3+0xc4>
c0027a2a:	31 ff                	xor    edi,edi
c0027a2c:	c7 45 ec 00 00 f8 7f 	mov    DWORD PTR [ebp-0x14],0x7ff80000
c0027a33:	e9 b7 01 00 00       	jmp    c0027bef <__muldf3+0x2d7>
c0027a38:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027a3b:	40                   	inc    eax
c0027a3c:	a9 fe 07 00 00       	test   eax,0x7fe
c0027a41:	75 57                	jne    c0027a9a <__muldf3+0x182>
c0027a43:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0027a46:	09 f0                	or     eax,esi
c0027a48:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0027a4c:	74 23                	je     c0027a71 <__muldf3+0x159>
c0027a4e:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c0027a52:	0f 89 91 01 00 00    	jns    c0027be9 <__muldf3+0x2d1>
c0027a58:	85 c0                	test   eax,eax
c0027a5a:	0f 85 89 01 00 00    	jne    c0027be9 <__muldf3+0x2d1>
c0027a60:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c0027a63:	8d 82 00 00 00 80    	lea    eax,[edx-0x80000000]
c0027a69:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027a6c:	e9 7e 01 00 00       	jmp    c0027bef <__muldf3+0x2d7>
c0027a71:	85 c0                	test   eax,eax
c0027a73:	75 0c                	jne    c0027a81 <__muldf3+0x169>
c0027a75:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c0027a79:	0f 89 6a 01 00 00    	jns    c0027be9 <__muldf3+0x2d1>
c0027a7f:	eb df                	jmp    c0027a60 <__muldf3+0x148>
c0027a81:	01 f6                	add    esi,esi
c0027a83:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0027a86:	c1 ea 1f             	shr    edx,0x1f
c0027a89:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0027a8c:	01 7d e0             	add    DWORD PTR [ebp-0x20],edi
c0027a8f:	8d 43 ff             	lea    eax,[ebx-0x1]
c0027a92:	09 d6                	or     esi,edx
c0027a94:	78 04                	js     c0027a9a <__muldf3+0x182>
c0027a96:	89 c3                	mov    ebx,eax
c0027a98:	eb e7                	jmp    c0027a81 <__muldf3+0x169>
c0027a9a:	81 c9 00 00 00 80    	or     ecx,0x80000000
c0027aa0:	81 ce 00 00 00 80    	or     esi,0x80000000
c0027aa6:	89 c8                	mov    eax,ecx
c0027aa8:	f7 e6                	mul    esi
c0027aaa:	89 55 d8             	mov    DWORD PTR [ebp-0x28],edx
c0027aad:	89 c7                	mov    edi,eax
c0027aaf:	89 c8                	mov    eax,ecx
c0027ab1:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c0027ab4:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c0027ab7:	89 c1                	mov    ecx,eax
c0027ab9:	89 f0                	mov    eax,esi
c0027abb:	f7 65 e4             	mul    DWORD PTR [ebp-0x1c]
c0027abe:	89 55 d0             	mov    DWORD PTR [ebp-0x30],edx
c0027ac1:	89 c6                	mov    esi,eax
c0027ac3:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027ac6:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c0027ac9:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0027acc:	31 c0                	xor    eax,eax
c0027ace:	01 f1                	add    ecx,esi
c0027ad0:	0f 92 c0             	setb   al
c0027ad3:	03 7d d4             	add    edi,DWORD PTR [ebp-0x2c]
c0027ad6:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c0027ad9:	83 d6 00             	adc    esi,0x0
c0027adc:	01 c7                	add    edi,eax
c0027ade:	83 d6 00             	adc    esi,0x0
c0027ae1:	01 ca                	add    edx,ecx
c0027ae3:	0f 92 c1             	setb   cl
c0027ae6:	0f b6 c9             	movzx  ecx,cl
c0027ae9:	03 7d d0             	add    edi,DWORD PTR [ebp-0x30]
c0027aec:	83 d6 00             	adc    esi,0x0
c0027aef:	01 cf                	add    edi,ecx
c0027af1:	83 d6 00             	adc    esi,0x0
c0027af4:	31 c9                	xor    ecx,ecx
c0027af6:	0b 55 e4             	or     edx,DWORD PTR [ebp-0x1c]
c0027af9:	0f 95 c1             	setne  cl
c0027afc:	09 cf                	or     edi,ecx
c0027afe:	85 f6                	test   esi,esi
c0027b00:	78 0c                	js     c0027b0e <__muldf3+0x1f6>
c0027b02:	01 f6                	add    esi,esi
c0027b04:	89 f8                	mov    eax,edi
c0027b06:	c1 e8 1f             	shr    eax,0x1f
c0027b09:	09 c6                	or     esi,eax
c0027b0b:	01 ff                	add    edi,edi
c0027b0d:	4b                   	dec    ebx
c0027b0e:	81 fb fe 07 00 00    	cmp    ebx,0x7fe
c0027b14:	0f 8f 85 00 00 00    	jg     c0027b9f <__muldf3+0x287>
c0027b1a:	81 e6 ff ff ff 7f    	and    esi,0x7fffffff
c0027b20:	85 db                	test   ebx,ebx
c0027b22:	0f 8f 84 00 00 00    	jg     c0027bac <__muldf3+0x294>
c0027b28:	83 fb cc             	cmp    ebx,0xffffffcc
c0027b2b:	7c 79                	jl     c0027ba6 <__muldf3+0x28e>
c0027b2d:	ba 01 00 00 00       	mov    edx,0x1
c0027b32:	29 da                	sub    edx,ebx
c0027b34:	81 ce 00 00 00 80    	or     esi,0x80000000
c0027b3a:	83 fa 1f             	cmp    edx,0x1f
c0027b3d:	7e 30                	jle    c0027b6f <__muldf3+0x257>
c0027b3f:	83 fa 20             	cmp    edx,0x20
c0027b42:	75 0b                	jne    c0027b4f <__muldf3+0x237>
c0027b44:	31 c0                	xor    eax,eax
c0027b46:	85 ff                	test   edi,edi
c0027b48:	0f 95 c0             	setne  al
c0027b4b:	89 c7                	mov    edi,eax
c0027b4d:	eb 1a                	jmp    c0027b69 <__muldf3+0x251>
c0027b4f:	8d 4b 3f             	lea    ecx,[ebx+0x3f]
c0027b52:	89 f0                	mov    eax,esi
c0027b54:	d3 e0                	shl    eax,cl
c0027b56:	09 f8                	or     eax,edi
c0027b58:	0f 95 c0             	setne  al
c0027b5b:	0f b6 c0             	movzx  eax,al
c0027b5e:	89 c7                	mov    edi,eax
c0027b60:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c0027b65:	29 d9                	sub    ecx,ebx
c0027b67:	d3 ee                	shr    esi,cl
c0027b69:	09 f7                	or     edi,esi
c0027b6b:	31 db                	xor    ebx,ebx
c0027b6d:	eb 3b                	jmp    c0027baa <__muldf3+0x292>
c0027b6f:	83 c3 1f             	add    ebx,0x1f
c0027b72:	89 f0                	mov    eax,esi
c0027b74:	88 d9                	mov    cl,bl
c0027b76:	d3 e0                	shl    eax,cl
c0027b78:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027b7b:	89 f8                	mov    eax,edi
c0027b7d:	88 d1                	mov    cl,dl
c0027b7f:	d3 e8                	shr    eax,cl
c0027b81:	89 c1                	mov    ecx,eax
c0027b83:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0027b86:	09 c8                	or     eax,ecx
c0027b88:	88 d9                	mov    cl,bl
c0027b8a:	d3 e7                	shl    edi,cl
c0027b8c:	31 db                	xor    ebx,ebx
c0027b8e:	85 ff                	test   edi,edi
c0027b90:	0f 95 c3             	setne  bl
c0027b93:	89 df                	mov    edi,ebx
c0027b95:	09 c7                	or     edi,eax
c0027b97:	88 d1                	mov    cl,dl
c0027b99:	d3 ee                	shr    esi,cl
c0027b9b:	31 db                	xor    ebx,ebx
c0027b9d:	eb 0d                	jmp    c0027bac <__muldf3+0x294>
c0027b9f:	bb ff 07 00 00       	mov    ebx,0x7ff
c0027ba4:	eb 02                	jmp    c0027ba8 <__muldf3+0x290>
c0027ba6:	31 db                	xor    ebx,ebx
c0027ba8:	31 ff                	xor    edi,edi
c0027baa:	31 f6                	xor    esi,esi
c0027bac:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027baf:	33 45 e8             	xor    eax,DWORD PTR [ebp-0x18]
c0027bb2:	25 00 f8 ff ff       	and    eax,0xfffff800
c0027bb7:	09 c3                	or     ebx,eax
c0027bb9:	c1 e3 14             	shl    ebx,0x14
c0027bbc:	89 f0                	mov    eax,esi
c0027bbe:	c1 e8 0b             	shr    eax,0xb
c0027bc1:	09 c3                	or     ebx,eax
c0027bc3:	89 f8                	mov    eax,edi
c0027bc5:	c1 e8 0b             	shr    eax,0xb
c0027bc8:	c1 e6 15             	shl    esi,0x15
c0027bcb:	09 c6                	or     esi,eax
c0027bcd:	f7 c7 ff 03 00 00    	test   edi,0x3ff
c0027bd3:	0f 95 c1             	setne  cl
c0027bd6:	09 c8                	or     eax,ecx
c0027bd8:	83 e0 01             	and    eax,0x1
c0027bdb:	c1 ef 0a             	shr    edi,0xa
c0027bde:	21 c7                	and    edi,eax
c0027be0:	01 f7                	add    edi,esi
c0027be2:	83 d3 00             	adc    ebx,0x0
c0027be5:	89 da                	mov    edx,ebx
c0027be7:	eb 03                	jmp    c0027bec <__muldf3+0x2d4>
c0027be9:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c0027bec:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c0027bef:	89 f8                	mov    eax,edi
c0027bf1:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0027bf4:	83 c4 24             	add    esp,0x24
c0027bf7:	5b                   	pop    ebx
c0027bf8:	5e                   	pop    esi
c0027bf9:	5f                   	pop    edi
c0027bfa:	5d                   	pop    ebp
c0027bfb:	c3                   	ret    

c0027bfc <__divdf3>:
c0027bfc:	55                   	push   ebp
c0027bfd:	89 e5                	mov    ebp,esp
c0027bff:	57                   	push   edi
c0027c00:	56                   	push   esi
c0027c01:	53                   	push   ebx
c0027c02:	83 ec 2c             	sub    esp,0x2c
c0027c05:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0027c08:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0027c0b:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0027c0e:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c0027c11:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0027c14:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0027c17:	89 ce                	mov    esi,ecx
c0027c19:	89 c8                	mov    eax,ecx
c0027c1b:	c1 f8 14             	sar    eax,0x14
c0027c1e:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0027c21:	89 f8                	mov    eax,edi
c0027c23:	89 fb                	mov    ebx,edi
c0027c25:	c1 e3 0b             	shl    ebx,0xb
c0027c28:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c0027c2b:	c1 e6 0b             	shl    esi,0xb
c0027c2e:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c0027c34:	c1 e8 15             	shr    eax,0x15
c0027c37:	09 c6                	or     esi,eax
c0027c39:	89 75 e0             	mov    DWORD PTR [ebp-0x20],esi
c0027c3c:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0027c3f:	89 c2                	mov    edx,eax
c0027c41:	c1 fa 14             	sar    edx,0x14
c0027c44:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c0027c47:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c0027c4a:	89 de                	mov    esi,ebx
c0027c4c:	c1 e6 0b             	shl    esi,0xb
c0027c4f:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c0027c52:	c1 e0 0b             	shl    eax,0xb
c0027c55:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0027c5a:	c1 eb 15             	shr    ebx,0x15
c0027c5d:	09 d8                	or     eax,ebx
c0027c5f:	89 c2                	mov    edx,eax
c0027c61:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027c64:	25 ff 07 00 00       	and    eax,0x7ff
c0027c69:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c0027c6c:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0027c6f:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0027c75:	89 5d d8             	mov    DWORD PTR [ebp-0x28],ebx
c0027c78:	29 d8                	sub    eax,ebx
c0027c7a:	05 ff 03 00 00       	add    eax,0x3ff
c0027c7f:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c0027c82:	46                   	inc    esi
c0027c83:	81 e6 fe 07 00 00    	and    esi,0x7fe
c0027c89:	0f 85 a5 00 00 00    	jne    c0027d34 <__divdf3+0x138>
c0027c8f:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c0027c92:	0b 75 e0             	or     esi,DWORD PTR [ebp-0x20]
c0027c95:	83 7d cc 00          	cmp    DWORD PTR [ebp-0x34],0x0
c0027c99:	74 2a                	je     c0027cc5 <__divdf3+0xc9>
c0027c9b:	85 f6                	test   esi,esi
c0027c9d:	0f 85 cc 02 00 00    	jne    c0027f6f <__divdf3+0x373>
c0027ca3:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027ca6:	40                   	inc    eax
c0027ca7:	a9 fe 07 00 00       	test   eax,0x7fe
c0027cac:	75 26                	jne    c0027cd4 <__divdf3+0xd8>
c0027cae:	85 db                	test   ebx,ebx
c0027cb0:	74 22                	je     c0027cd4 <__divdf3+0xd8>
c0027cb2:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0027cb5:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0027cb8:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027cbb:	09 d0                	or     eax,edx
c0027cbd:	0f 85 ac 02 00 00    	jne    c0027f6f <__divdf3+0x373>
c0027cc3:	eb 63                	jmp    c0027d28 <__divdf3+0x12c>
c0027cc5:	85 f6                	test   esi,esi
c0027cc7:	75 22                	jne    c0027ceb <__divdf3+0xef>
c0027cc9:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027ccc:	40                   	inc    eax
c0027ccd:	a9 fe 07 00 00       	test   eax,0x7fe
c0027cd2:	74 36                	je     c0027d0a <__divdf3+0x10e>
c0027cd4:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0027cd8:	0f 89 91 02 00 00    	jns    c0027f6f <__divdf3+0x373>
c0027cde:	89 f8                	mov    eax,edi
c0027ce0:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c0027ce6:	e9 80 02 00 00       	jmp    c0027f6b <__divdf3+0x36f>
c0027ceb:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0027cee:	01 f6                	add    esi,esi
c0027cf0:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c0027cf3:	c1 ef 1f             	shr    edi,0x1f
c0027cf6:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0027cf9:	01 5d ec             	add    DWORD PTR [ebp-0x14],ebx
c0027cfc:	8d 48 ff             	lea    ecx,[eax-0x1]
c0027cff:	09 f7                	or     edi,esi
c0027d01:	89 7d e0             	mov    DWORD PTR [ebp-0x20],edi
c0027d04:	78 2e                	js     c0027d34 <__divdf3+0x138>
c0027d06:	89 c8                	mov    eax,ecx
c0027d08:	eb e1                	jmp    c0027ceb <__divdf3+0xef>
c0027d0a:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027d0d:	09 d0                	or     eax,edx
c0027d0f:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c0027d13:	74 0f                	je     c0027d24 <__divdf3+0x128>
c0027d15:	85 c0                	test   eax,eax
c0027d17:	74 bb                	je     c0027cd4 <__divdf3+0xd8>
c0027d19:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0027d1c:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0027d1f:	e9 4b 02 00 00       	jmp    c0027f6f <__divdf3+0x373>
c0027d24:	85 c0                	test   eax,eax
c0027d26:	75 ac                	jne    c0027cd4 <__divdf3+0xd8>
c0027d28:	31 ff                	xor    edi,edi
c0027d2a:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c0027d2f:	e9 3b 02 00 00       	jmp    c0027f6f <__divdf3+0x373>
c0027d34:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027d37:	8d 4f 01             	lea    ecx,[edi+0x1]
c0027d3a:	81 e1 fe 07 00 00    	and    ecx,0x7fe
c0027d40:	75 6b                	jne    c0027dad <__divdf3+0x1b1>
c0027d42:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027d45:	09 d6                	or     esi,edx
c0027d47:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c0027d4b:	74 28                	je     c0027d75 <__divdf3+0x179>
c0027d4d:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0027d50:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0027d53:	85 f6                	test   esi,esi
c0027d55:	0f 85 14 02 00 00    	jne    c0027f6f <__divdf3+0x373>
c0027d5b:	31 ff                	xor    edi,edi
c0027d5d:	31 c9                	xor    ecx,ecx
c0027d5f:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027d62:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c0027d65:	0f 89 04 02 00 00    	jns    c0027f6f <__divdf3+0x373>
c0027d6b:	b9 00 00 00 80       	mov    ecx,0x80000000
c0027d70:	e9 fa 01 00 00       	jmp    c0027f6f <__divdf3+0x373>
c0027d75:	85 f6                	test   esi,esi
c0027d77:	75 1b                	jne    c0027d94 <__divdf3+0x198>
c0027d79:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027d7c:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c0027d7f:	25 00 00 00 80       	and    eax,0x80000000
c0027d84:	31 c9                	xor    ecx,ecx
c0027d86:	0d 00 00 f0 7f       	or     eax,0x7ff00000
c0027d8b:	89 cf                	mov    edi,ecx
c0027d8d:	89 c1                	mov    ecx,eax
c0027d8f:	e9 db 01 00 00       	jmp    c0027f6f <__divdf3+0x373>
c0027d94:	01 d2                	add    edx,edx
c0027d96:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0027d99:	c1 eb 1f             	shr    ebx,0x1f
c0027d9c:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027d9f:	01 75 e8             	add    DWORD PTR [ebp-0x18],esi
c0027da2:	8d 48 01             	lea    ecx,[eax+0x1]
c0027da5:	09 da                	or     edx,ebx
c0027da7:	78 04                	js     c0027dad <__divdf3+0x1b1>
c0027da9:	89 c8                	mov    eax,ecx
c0027dab:	eb e7                	jmp    c0027d94 <__divdf3+0x198>
c0027dad:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0027db0:	81 ce 00 00 00 80    	or     esi,0x80000000
c0027db6:	81 ca 00 00 00 80    	or     edx,0x80000000
c0027dbc:	89 55 e0             	mov    DWORD PTR [ebp-0x20],edx
c0027dbf:	39 d6                	cmp    esi,edx
c0027dc1:	77 0d                	ja     c0027dd0 <__divdf3+0x1d4>
c0027dc3:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0027dc6:	39 55 ec             	cmp    DWORD PTR [ebp-0x14],edx
c0027dc9:	72 1b                	jb     c0027de6 <__divdf3+0x1ea>
c0027dcb:	3b 75 e0             	cmp    esi,DWORD PTR [ebp-0x20]
c0027dce:	75 16                	jne    c0027de6 <__divdf3+0x1ea>
c0027dd0:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c0027dd3:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0027dd6:	39 5d ec             	cmp    DWORD PTR [ebp-0x14],ebx
c0027dd9:	83 de 00             	sbb    esi,0x0
c0027ddc:	29 5d ec             	sub    DWORD PTR [ebp-0x14],ebx
c0027ddf:	ba 01 00 00 00       	mov    edx,0x1
c0027de4:	eb 02                	jmp    c0027de8 <__divdf3+0x1ec>
c0027de6:	31 d2                	xor    edx,edx
c0027de8:	c7 45 d0 36 00 00 00 	mov    DWORD PTR [ebp-0x30],0x36
c0027def:	31 ff                	xor    edi,edi
c0027df1:	01 ff                	add    edi,edi
c0027df3:	89 d1                	mov    ecx,edx
c0027df5:	c1 e9 1f             	shr    ecx,0x1f
c0027df8:	09 cf                	or     edi,ecx
c0027dfa:	8d 1c 12             	lea    ebx,[edx+edx*1]
c0027dfd:	89 5d d4             	mov    DWORD PTR [ebp-0x2c],ebx
c0027e00:	89 da                	mov    edx,ebx
c0027e02:	89 f3                	mov    ebx,esi
c0027e04:	8d 34 36             	lea    esi,[esi+esi*1]
c0027e07:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027e0a:	c1 e9 1f             	shr    ecx,0x1f
c0027e0d:	09 ce                	or     esi,ecx
c0027e0f:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027e12:	01 c9                	add    ecx,ecx
c0027e14:	89 4d d8             	mov    DWORD PTR [ebp-0x28],ecx
c0027e17:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c0027e1a:	85 db                	test   ebx,ebx
c0027e1c:	78 29                	js     c0027e47 <__divdf3+0x24b>
c0027e1e:	39 75 e0             	cmp    DWORD PTR [ebp-0x20],esi
c0027e21:	72 07                	jb     c0027e2a <__divdf3+0x22e>
c0027e23:	75 3c                	jne    c0027e61 <__divdf3+0x265>
c0027e25:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0027e28:	77 37                	ja     c0027e61 <__divdf3+0x265>
c0027e2a:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c0027e2d:	8b 5d d8             	mov    ebx,DWORD PTR [ebp-0x28]
c0027e30:	31 d2                	xor    edx,edx
c0027e32:	39 5d e8             	cmp    DWORD PTR [ebp-0x18],ebx
c0027e35:	0f 97 c2             	seta   dl
c0027e38:	29 d6                	sub    esi,edx
c0027e3a:	89 d9                	mov    ecx,ebx
c0027e3c:	2b 4d e8             	sub    ecx,DWORD PTR [ebp-0x18]
c0027e3f:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c0027e42:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0027e45:	eb 17                	jmp    c0027e5e <__divdf3+0x262>
c0027e47:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c0027e4a:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027e4d:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0027e50:	0f 97 c1             	seta   cl
c0027e53:	0f b6 c9             	movzx  ecx,cl
c0027e56:	29 ce                	sub    esi,ecx
c0027e58:	8b 4d e8             	mov    ecx,DWORD PTR [ebp-0x18]
c0027e5b:	29 4d ec             	sub    DWORD PTR [ebp-0x14],ecx
c0027e5e:	83 ca 01             	or     edx,0x1
c0027e61:	ff 4d d0             	dec    DWORD PTR [ebp-0x30]
c0027e64:	75 8b                	jne    c0027df1 <__divdf3+0x1f5>
c0027e66:	c1 e7 09             	shl    edi,0x9
c0027e69:	89 d1                	mov    ecx,edx
c0027e6b:	c1 e9 17             	shr    ecx,0x17
c0027e6e:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0027e71:	09 f3                	or     ebx,esi
c0027e73:	0f 95 c3             	setne  bl
c0027e76:	0f b6 db             	movzx  ebx,bl
c0027e79:	c1 e2 09             	shl    edx,0x9
c0027e7c:	09 d3                	or     ebx,edx
c0027e7e:	89 ca                	mov    edx,ecx
c0027e80:	09 fa                	or     edx,edi
c0027e82:	78 0c                	js     c0027e90 <__divdf3+0x294>
c0027e84:	01 d2                	add    edx,edx
c0027e86:	89 d9                	mov    ecx,ebx
c0027e88:	c1 e9 1f             	shr    ecx,0x1f
c0027e8b:	09 ca                	or     edx,ecx
c0027e8d:	01 db                	add    ebx,ebx
c0027e8f:	48                   	dec    eax
c0027e90:	3d fe 07 00 00       	cmp    eax,0x7fe
c0027e95:	0f 8f 83 00 00 00    	jg     c0027f1e <__divdf3+0x322>
c0027e9b:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0027ea1:	85 c0                	test   eax,eax
c0027ea3:	0f 8f 82 00 00 00    	jg     c0027f2b <__divdf3+0x32f>
c0027ea9:	83 f8 cc             	cmp    eax,0xffffffcc
c0027eac:	7c 77                	jl     c0027f25 <__divdf3+0x329>
c0027eae:	be 01 00 00 00       	mov    esi,0x1
c0027eb3:	29 c6                	sub    esi,eax
c0027eb5:	81 ca 00 00 00 80    	or     edx,0x80000000
c0027ebb:	83 fe 1f             	cmp    esi,0x1f
c0027ebe:	7e 2f                	jle    c0027eef <__divdf3+0x2f3>
c0027ec0:	83 fe 20             	cmp    esi,0x20
c0027ec3:	75 0a                	jne    c0027ecf <__divdf3+0x2d3>
c0027ec5:	85 db                	test   ebx,ebx
c0027ec7:	0f 95 c3             	setne  bl
c0027eca:	0f b6 db             	movzx  ebx,bl
c0027ecd:	eb 1a                	jmp    c0027ee9 <__divdf3+0x2ed>
c0027ecf:	8d 48 3f             	lea    ecx,[eax+0x3f]
c0027ed2:	89 d7                	mov    edi,edx
c0027ed4:	d3 e7                	shl    edi,cl
c0027ed6:	89 f9                	mov    ecx,edi
c0027ed8:	09 d9                	or     ecx,ebx
c0027eda:	0f 95 c3             	setne  bl
c0027edd:	0f b6 db             	movzx  ebx,bl
c0027ee0:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c0027ee5:	29 c1                	sub    ecx,eax
c0027ee7:	d3 ea                	shr    edx,cl
c0027ee9:	09 d3                	or     ebx,edx
c0027eeb:	31 c0                	xor    eax,eax
c0027eed:	eb 3a                	jmp    c0027f29 <__divdf3+0x32d>
c0027eef:	83 c0 1f             	add    eax,0x1f
c0027ef2:	89 d7                	mov    edi,edx
c0027ef4:	88 c1                	mov    cl,al
c0027ef6:	d3 e7                	shl    edi,cl
c0027ef8:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027efb:	89 df                	mov    edi,ebx
c0027efd:	89 f1                	mov    ecx,esi
c0027eff:	d3 ef                	shr    edi,cl
c0027f01:	89 f9                	mov    ecx,edi
c0027f03:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c0027f06:	09 cf                	or     edi,ecx
c0027f08:	88 c1                	mov    cl,al
c0027f0a:	d3 e3                	shl    ebx,cl
c0027f0c:	85 db                	test   ebx,ebx
c0027f0e:	0f 95 c3             	setne  bl
c0027f11:	0f b6 db             	movzx  ebx,bl
c0027f14:	09 fb                	or     ebx,edi
c0027f16:	89 f1                	mov    ecx,esi
c0027f18:	d3 ea                	shr    edx,cl
c0027f1a:	31 c0                	xor    eax,eax
c0027f1c:	eb 0d                	jmp    c0027f2b <__divdf3+0x32f>
c0027f1e:	b8 ff 07 00 00       	mov    eax,0x7ff
c0027f23:	eb 02                	jmp    c0027f27 <__divdf3+0x32b>
c0027f25:	31 c0                	xor    eax,eax
c0027f27:	31 db                	xor    ebx,ebx
c0027f29:	31 d2                	xor    edx,edx
c0027f2b:	8b 4d dc             	mov    ecx,DWORD PTR [ebp-0x24]
c0027f2e:	33 4d e4             	xor    ecx,DWORD PTR [ebp-0x1c]
c0027f31:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0027f37:	09 c8                	or     eax,ecx
c0027f39:	c1 e0 14             	shl    eax,0x14
c0027f3c:	89 d1                	mov    ecx,edx
c0027f3e:	c1 e9 0b             	shr    ecx,0xb
c0027f41:	09 c8                	or     eax,ecx
c0027f43:	89 c6                	mov    esi,eax
c0027f45:	89 d9                	mov    ecx,ebx
c0027f47:	c1 e9 0b             	shr    ecx,0xb
c0027f4a:	c1 e2 15             	shl    edx,0x15
c0027f4d:	09 ca                	or     edx,ecx
c0027f4f:	f7 c3 ff 03 00 00    	test   ebx,0x3ff
c0027f55:	0f 95 c0             	setne  al
c0027f58:	09 c1                	or     ecx,eax
c0027f5a:	83 e1 01             	and    ecx,0x1
c0027f5d:	c1 eb 0a             	shr    ebx,0xa
c0027f60:	21 cb                	and    ebx,ecx
c0027f62:	01 d3                	add    ebx,edx
c0027f64:	89 d8                	mov    eax,ebx
c0027f66:	83 d6 00             	adc    esi,0x0
c0027f69:	89 f2                	mov    edx,esi
c0027f6b:	89 c7                	mov    edi,eax
c0027f6d:	89 d1                	mov    ecx,edx
c0027f6f:	89 f8                	mov    eax,edi
c0027f71:	89 ca                	mov    edx,ecx
c0027f73:	83 c4 2c             	add    esp,0x2c
c0027f76:	5b                   	pop    ebx
c0027f77:	5e                   	pop    esi
c0027f78:	5f                   	pop    edi
c0027f79:	5d                   	pop    ebp
c0027f7a:	c3                   	ret    

c0027f7b <__floatsidf>:
c0027f7b:	55                   	push   ebp
c0027f7c:	89 e5                	mov    ebp,esp
c0027f7e:	56                   	push   esi
c0027f7f:	53                   	push   ebx
c0027f80:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0027f83:	85 db                	test   ebx,ebx
c0027f85:	7e 15                	jle    c0027f9c <__floatsidf+0x21>
c0027f87:	0f bd cb             	bsr    ecx,ebx
c0027f8a:	83 f1 1f             	xor    ecx,0x1f
c0027f8d:	d3 e3                	shl    ebx,cl
c0027f8f:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0027f95:	b8 1e 04 00 00       	mov    eax,0x41e
c0027f9a:	eb 21                	jmp    c0027fbd <__floatsidf+0x42>
c0027f9c:	b8 00 00 00 00       	mov    eax,0x0
c0027fa1:	ba 00 00 00 00       	mov    edx,0x0
c0027fa6:	74 2a                	je     c0027fd2 <__floatsidf+0x57>
c0027fa8:	f7 db                	neg    ebx
c0027faa:	0f bd cb             	bsr    ecx,ebx
c0027fad:	83 f1 1f             	xor    ecx,0x1f
c0027fb0:	d3 e3                	shl    ebx,cl
c0027fb2:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0027fb8:	b8 1e 0c 00 00       	mov    eax,0xc1e
c0027fbd:	29 c8                	sub    eax,ecx
c0027fbf:	c1 e0 14             	shl    eax,0x14
c0027fc2:	89 c1                	mov    ecx,eax
c0027fc4:	89 de                	mov    esi,ebx
c0027fc6:	c1 ee 0b             	shr    esi,0xb
c0027fc9:	09 f1                	or     ecx,esi
c0027fcb:	89 ca                	mov    edx,ecx
c0027fcd:	c1 e3 15             	shl    ebx,0x15
c0027fd0:	89 d8                	mov    eax,ebx
c0027fd2:	5b                   	pop    ebx
c0027fd3:	5e                   	pop    esi
c0027fd4:	5d                   	pop    ebp
c0027fd5:	c3                   	ret    

c0027fd6 <__floatunsidf>:
c0027fd6:	55                   	push   ebp
c0027fd7:	89 e5                	mov    ebp,esp
c0027fd9:	56                   	push   esi
c0027fda:	53                   	push   ebx
c0027fdb:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0027fde:	85 db                	test   ebx,ebx
c0027fe0:	74 2a                	je     c002800c <__floatunsidf+0x36>
c0027fe2:	0f bd cb             	bsr    ecx,ebx
c0027fe5:	83 f1 1f             	xor    ecx,0x1f
c0027fe8:	d3 e3                	shl    ebx,cl
c0027fea:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0027ff0:	b8 1e 04 00 00       	mov    eax,0x41e
c0027ff5:	29 c8                	sub    eax,ecx
c0027ff7:	c1 e0 14             	shl    eax,0x14
c0027ffa:	89 c1                	mov    ecx,eax
c0027ffc:	89 de                	mov    esi,ebx
c0027ffe:	c1 ee 0b             	shr    esi,0xb
c0028001:	09 f1                	or     ecx,esi
c0028003:	89 ca                	mov    edx,ecx
c0028005:	c1 e3 15             	shl    ebx,0x15
c0028008:	89 d8                	mov    eax,ebx
c002800a:	eb 04                	jmp    c0028010 <__floatunsidf+0x3a>
c002800c:	31 c0                	xor    eax,eax
c002800e:	31 d2                	xor    edx,edx
c0028010:	5b                   	pop    ebx
c0028011:	5e                   	pop    esi
c0028012:	5d                   	pop    ebp
c0028013:	c3                   	ret    

c0028014 <__fixdfsi>:
c0028014:	55                   	push   ebp
c0028015:	89 e5                	mov    ebp,esp
c0028017:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c002801a:	89 d1                	mov    ecx,edx
c002801c:	c1 e1 0b             	shl    ecx,0xb
c002801f:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0028025:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0028028:	c1 e8 15             	shr    eax,0x15
c002802b:	09 c1                	or     ecx,eax
c002802d:	c1 fa 14             	sar    edx,0x14
c0028030:	78 1f                	js     c0028051 <__fixdfsi+0x3d>
c0028032:	81 ea ff 03 00 00    	sub    edx,0x3ff
c0028038:	31 c0                	xor    eax,eax
c002803a:	83 fa 1e             	cmp    edx,0x1e
c002803d:	77 40                	ja     c002807f <__fixdfsi+0x6b>
c002803f:	89 c8                	mov    eax,ecx
c0028041:	0d 00 00 00 80       	or     eax,0x80000000
c0028046:	b9 1f 00 00 00       	mov    ecx,0x1f
c002804b:	29 d1                	sub    ecx,edx
c002804d:	d3 e8                	shr    eax,cl
c002804f:	eb 2e                	jmp    c002807f <__fixdfsi+0x6b>
c0028051:	31 c0                	xor    eax,eax
c0028053:	81 c2 01 04 00 00    	add    edx,0x401
c0028059:	78 24                	js     c002807f <__fixdfsi+0x6b>
c002805b:	83 fa 1e             	cmp    edx,0x1e
c002805e:	7e 09                	jle    c0028069 <__fixdfsi+0x55>
c0028060:	83 fa 1f             	cmp    edx,0x1f
c0028063:	75 18                	jne    c002807d <__fixdfsi+0x69>
c0028065:	85 c9                	test   ecx,ecx
c0028067:	75 14                	jne    c002807d <__fixdfsi+0x69>
c0028069:	89 c8                	mov    eax,ecx
c002806b:	0d 00 00 00 80       	or     eax,0x80000000
c0028070:	b9 1f 00 00 00       	mov    ecx,0x1f
c0028075:	29 d1                	sub    ecx,edx
c0028077:	d3 e8                	shr    eax,cl
c0028079:	f7 d8                	neg    eax
c002807b:	eb 02                	jmp    c002807f <__fixdfsi+0x6b>
c002807d:	31 c0                	xor    eax,eax
c002807f:	5d                   	pop    ebp
c0028080:	c3                   	ret    

c0028081 <__fixunsdfsi>:
c0028081:	55                   	push   ebp
c0028082:	89 e5                	mov    ebp,esp
c0028084:	53                   	push   ebx
c0028085:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0028088:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c002808b:	89 d3                	mov    ebx,edx
c002808d:	c1 fb 14             	sar    ebx,0x14
c0028090:	81 eb ff 03 00 00    	sub    ebx,0x3ff
c0028096:	31 c0                	xor    eax,eax
c0028098:	83 fb 1f             	cmp    ebx,0x1f
c002809b:	77 1d                	ja     c00280ba <__fixunsdfsi+0x39>
c002809d:	89 d0                	mov    eax,edx
c002809f:	c1 e0 0b             	shl    eax,0xb
c00280a2:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c00280a7:	c1 e9 15             	shr    ecx,0x15
c00280aa:	09 c8                	or     eax,ecx
c00280ac:	0d 00 00 00 80       	or     eax,0x80000000
c00280b1:	b9 1f 00 00 00       	mov    ecx,0x1f
c00280b6:	29 d9                	sub    ecx,ebx
c00280b8:	d3 e8                	shr    eax,cl
c00280ba:	5b                   	pop    ebx
c00280bb:	5d                   	pop    ebp
c00280bc:	c3                   	ret    

c00280bd <__cmpdf2>:
c00280bd:	55                   	push   ebp
c00280be:	89 e5                	mov    ebp,esp
c00280c0:	57                   	push   edi
c00280c1:	56                   	push   esi
c00280c2:	53                   	push   ebx
c00280c3:	83 ec 0c             	sub    esp,0xc
c00280c6:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c00280c9:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00280cc:	89 ca                	mov    edx,ecx
c00280ce:	c1 ea 14             	shr    edx,0x14
c00280d1:	81 e2 ff 07 00 00    	and    edx,0x7ff
c00280d7:	89 cb                	mov    ebx,ecx
c00280d9:	c1 fb 1f             	sar    ebx,0x1f
c00280dc:	31 da                	xor    edx,ebx
c00280de:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c00280e1:	89 df                	mov    edi,ebx
c00280e3:	c1 e7 0b             	shl    edi,0xb
c00280e6:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00280e9:	c1 e1 0b             	shl    ecx,0xb
c00280ec:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c00280f2:	c1 eb 15             	shr    ebx,0x15
c00280f5:	09 d9                	or     ecx,ebx
c00280f7:	89 4d e8             	mov    DWORD PTR [ebp-0x18],ecx
c00280fa:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c00280fd:	89 ce                	mov    esi,ecx
c00280ff:	c1 ee 14             	shr    esi,0x14
c0028102:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0028108:	89 cb                	mov    ebx,ecx
c002810a:	c1 fb 1f             	sar    ebx,0x1f
c002810d:	31 de                	xor    esi,ebx
c002810f:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c0028112:	89 df                	mov    edi,ebx
c0028114:	c1 e7 0b             	shl    edi,0xb
c0028117:	c1 e1 0b             	shl    ecx,0xb
c002811a:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0028120:	c1 eb 15             	shr    ebx,0x15
c0028123:	09 d9                	or     ecx,ebx
c0028125:	89 d3                	mov    ebx,edx
c0028127:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c002812d:	43                   	inc    ebx
c002812e:	83 fb 01             	cmp    ebx,0x1
c0028131:	77 08                	ja     c002813b <__cmpdf2+0x7e>
c0028133:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0028136:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c0028139:	75 68                	jne    c00281a3 <__cmpdf2+0xe6>
c002813b:	89 f3                	mov    ebx,esi
c002813d:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c0028143:	43                   	inc    ebx
c0028144:	83 fb 01             	cmp    ebx,0x1
c0028147:	77 06                	ja     c002814f <__cmpdf2+0x92>
c0028149:	89 fb                	mov    ebx,edi
c002814b:	09 cb                	or     ebx,ecx
c002814d:	75 54                	jne    c00281a3 <__cmpdf2+0xe6>
c002814f:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0028152:	09 f8                	or     eax,edi
c0028154:	09 c8                	or     eax,ecx
c0028156:	0b 45 e8             	or     eax,DWORD PTR [ebp-0x18]
c0028159:	75 12                	jne    c002816d <__cmpdf2+0xb0>
c002815b:	8d 42 01             	lea    eax,[edx+0x1]
c002815e:	83 f8 01             	cmp    eax,0x1
c0028161:	77 0a                	ja     c002816d <__cmpdf2+0xb0>
c0028163:	8d 5e 01             	lea    ebx,[esi+0x1]
c0028166:	31 c0                	xor    eax,eax
c0028168:	83 fb 01             	cmp    ebx,0x1
c002816b:	76 36                	jbe    c00281a3 <__cmpdf2+0xe6>
c002816d:	b8 01 00 00 00       	mov    eax,0x1
c0028172:	39 f2                	cmp    edx,esi
c0028174:	7f 2d                	jg     c00281a3 <__cmpdf2+0xe6>
c0028176:	b8 ff ff ff ff       	mov    eax,0xffffffff
c002817b:	7c 26                	jl     c00281a3 <__cmpdf2+0xe6>
c002817d:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0028180:	77 07                	ja     c0028189 <__cmpdf2+0xcc>
c0028182:	72 16                	jb     c002819a <__cmpdf2+0xdd>
c0028184:	39 7d ec             	cmp    DWORD PTR [ebp-0x14],edi
c0028187:	76 0a                	jbe    c0028193 <__cmpdf2+0xd6>
c0028189:	89 d0                	mov    eax,edx
c002818b:	c1 f8 1f             	sar    eax,0x1f
c002818e:	83 c8 01             	or     eax,0x1
c0028191:	eb 10                	jmp    c00281a3 <__cmpdf2+0xe6>
c0028193:	b8 00 00 00 00       	mov    eax,0x0
c0028198:	73 09                	jae    c00281a3 <__cmpdf2+0xe6>
c002819a:	89 d0                	mov    eax,edx
c002819c:	c1 f8 1f             	sar    eax,0x1f
c002819f:	83 e0 02             	and    eax,0x2
c00281a2:	48                   	dec    eax
c00281a3:	83 c4 0c             	add    esp,0xc
c00281a6:	5b                   	pop    ebx
c00281a7:	5e                   	pop    esi
c00281a8:	5f                   	pop    edi
c00281a9:	5d                   	pop    ebp
c00281aa:	c3                   	ret    

c00281ab <__eqdf2>:
c00281ab:	55                   	push   ebp
c00281ac:	89 e5                	mov    ebp,esp
c00281ae:	50                   	push   eax
c00281af:	6a 01                	push   0x1
c00281b1:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c00281b4:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c00281b7:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00281ba:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00281bd:	e8 fb fe ff ff       	call   c00280bd <__cmpdf2>
c00281c2:	83 c4 18             	add    esp,0x18
c00281c5:	c9                   	leave  
c00281c6:	c3                   	ret    

c00281c7 <__nedf2>:
c00281c7:	eb e2                	jmp    c00281ab <__eqdf2>

c00281c9 <__gtdf2>:
c00281c9:	55                   	push   ebp
c00281ca:	89 e5                	mov    ebp,esp
c00281cc:	50                   	push   eax
c00281cd:	6a ff                	push   0xffffffff
c00281cf:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c00281d2:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c00281d5:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00281d8:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00281db:	e8 dd fe ff ff       	call   c00280bd <__cmpdf2>
c00281e0:	83 c4 18             	add    esp,0x18
c00281e3:	c9                   	leave  
c00281e4:	c3                   	ret    

c00281e5 <__gedf2>:
c00281e5:	eb e2                	jmp    c00281c9 <__gtdf2>

c00281e7 <__ltdf2>:
c00281e7:	eb c2                	jmp    c00281ab <__eqdf2>

c00281e9 <__ledf2>:
c00281e9:	eb c0                	jmp    c00281ab <__eqdf2>

c00281eb <__truncdfsf2>:
c00281eb:	55                   	push   ebp
c00281ec:	89 e5                	mov    ebp,esp
c00281ee:	57                   	push   edi
c00281ef:	56                   	push   esi
c00281f0:	53                   	push   ebx
c00281f1:	83 ec 0c             	sub    esp,0xc
c00281f4:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00281f7:	89 d1                	mov    ecx,edx
c00281f9:	c1 f9 14             	sar    ecx,0x14
c00281fc:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c00281ff:	89 df                	mov    edi,ebx
c0028201:	c1 e7 0b             	shl    edi,0xb
c0028204:	89 d0                	mov    eax,edx
c0028206:	c1 e0 0b             	shl    eax,0xb
c0028209:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c002820e:	c1 eb 15             	shr    ebx,0x15
c0028211:	09 d8                	or     eax,ebx
c0028213:	89 cb                	mov    ebx,ecx
c0028215:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c002821b:	8d b3 7f fc ff ff    	lea    esi,[ebx-0x381]
c0028221:	81 fe fd 00 00 00    	cmp    esi,0xfd
c0028227:	0f 86 9e 00 00 00    	jbe    c00282cb <__truncdfsf2+0xe0>
c002822d:	85 db                	test   ebx,ebx
c002822f:	75 0a                	jne    c002823b <__truncdfsf2+0x50>
c0028231:	c1 fa 17             	sar    edx,0x17
c0028234:	30 d2                	xor    dl,dl
c0028236:	e9 84 00 00 00       	jmp    c00282bf <__truncdfsf2+0xd4>
c002823b:	8d b3 02 fc ff ff    	lea    esi,[ebx-0x3fe]
c0028241:	83 fe 83             	cmp    esi,0xffffff83
c0028244:	7d 4b                	jge    c0028291 <__truncdfsf2+0xa6>
c0028246:	b9 83 ff ff ff       	mov    ecx,0xffffff83
c002824b:	29 f1                	sub    ecx,esi
c002824d:	83 f9 1f             	cmp    ecx,0x1f
c0028250:	7f 6b                	jg     c00282bd <__truncdfsf2+0xd2>
c0028252:	0d 00 00 00 80       	or     eax,0x80000000
c0028257:	89 c3                	mov    ebx,eax
c0028259:	d3 eb                	shr    ebx,cl
c002825b:	be 01 00 00 00       	mov    esi,0x1
c0028260:	d3 e6                	shl    esi,cl
c0028262:	4e                   	dec    esi
c0028263:	21 f0                	and    eax,esi
c0028265:	09 f8                	or     eax,edi
c0028267:	0f 95 c0             	setne  al
c002826a:	0f b6 c0             	movzx  eax,al
c002826d:	09 c3                	or     ebx,eax
c002826f:	89 d9                	mov    ecx,ebx
c0028271:	c1 e9 08             	shr    ecx,0x8
c0028274:	f6 c3 7f             	test   bl,0x7f
c0028277:	0f 95 c0             	setne  al
c002827a:	09 c8                	or     eax,ecx
c002827c:	83 e0 01             	and    eax,0x1
c002827f:	c1 eb 07             	shr    ebx,0x7
c0028282:	21 c3                	and    ebx,eax
c0028284:	81 e2 00 00 00 80    	and    edx,0x80000000
c002828a:	09 d1                	or     ecx,edx
c002828c:	8d 04 0b             	lea    eax,[ebx+ecx*1]
c002828f:	eb 76                	jmp    c0028307 <__truncdfsf2+0x11c>
c0028291:	83 c6 80             	add    esi,0xffffff80
c0028294:	7e 1d                	jle    c00282b3 <__truncdfsf2+0xc8>
c0028296:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c002829c:	75 0b                	jne    c00282a9 <__truncdfsf2+0xbe>
c002829e:	09 f8                	or     eax,edi
c00282a0:	74 09                	je     c00282ab <__truncdfsf2+0xc0>
c00282a2:	b8 ff ff ff 7f       	mov    eax,0x7fffffff
c00282a7:	eb 02                	jmp    c00282ab <__truncdfsf2+0xc0>
c00282a9:	31 c0                	xor    eax,eax
c00282ab:	c1 fa 17             	sar    edx,0x17
c00282ae:	80 ca ff             	or     dl,0xff
c00282b1:	eb 0e                	jmp    c00282c1 <__truncdfsf2+0xd6>
c00282b3:	c1 fa 1f             	sar    edx,0x1f
c00282b6:	c1 e2 08             	shl    edx,0x8
c00282b9:	09 ca                	or     edx,ecx
c00282bb:	eb 04                	jmp    c00282c1 <__truncdfsf2+0xd6>
c00282bd:	31 d2                	xor    edx,edx
c00282bf:	31 c0                	xor    eax,eax
c00282c1:	c1 e2 17             	shl    edx,0x17
c00282c4:	c1 e8 08             	shr    eax,0x8
c00282c7:	09 d0                	or     eax,edx
c00282c9:	eb 3c                	jmp    c0028307 <__truncdfsf2+0x11c>
c00282cb:	81 e9 80 03 00 00    	sub    ecx,0x380
c00282d1:	89 ca                	mov    edx,ecx
c00282d3:	c1 fa 0b             	sar    edx,0xb
c00282d6:	c1 e2 08             	shl    edx,0x8
c00282d9:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c00282dc:	31 db                	xor    ebx,ebx
c00282de:	85 ff                	test   edi,edi
c00282e0:	0f 95 c3             	setne  bl
c00282e3:	09 d8                	or     eax,ebx
c00282e5:	89 c3                	mov    ebx,eax
c00282e7:	c1 eb 08             	shr    ebx,0x8
c00282ea:	a8 7f                	test   al,0x7f
c00282ec:	0f 95 c2             	setne  dl
c00282ef:	89 d6                	mov    esi,edx
c00282f1:	09 de                	or     esi,ebx
c00282f3:	83 e6 01             	and    esi,0x1
c00282f6:	c1 e8 07             	shr    eax,0x7
c00282f9:	21 f0                	and    eax,esi
c00282fb:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00282fe:	09 ca                	or     edx,ecx
c0028300:	c1 e2 17             	shl    edx,0x17
c0028303:	09 da                	or     edx,ebx
c0028305:	01 d0                	add    eax,edx
c0028307:	83 c4 0c             	add    esp,0xc
c002830a:	5b                   	pop    ebx
c002830b:	5e                   	pop    esi
c002830c:	5f                   	pop    edi
c002830d:	5d                   	pop    ebp
c002830e:	c3                   	ret    

c002830f <__extendsfdf2>:
c002830f:	55                   	push   ebp
c0028310:	89 e5                	mov    ebp,esp
c0028312:	57                   	push   edi
c0028313:	56                   	push   esi
c0028314:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0028317:	89 d1                	mov    ecx,edx
c0028319:	c1 f9 17             	sar    ecx,0x17
c002831c:	c1 e2 08             	shl    edx,0x8
c002831f:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c0028325:	89 c8                	mov    eax,ecx
c0028327:	80 e4 f8             	and    ah,0xf8
c002832a:	8d 71 01             	lea    esi,[ecx+0x1]
c002832d:	81 e6 fe 00 00 00    	and    esi,0xfe
c0028333:	75 27                	jne    c002835c <__extendsfdf2+0x4d>
c0028335:	81 e1 ff 00 00 00    	and    ecx,0xff
c002833b:	75 18                	jne    c0028355 <__extendsfdf2+0x46>
c002833d:	85 d2                	test   edx,edx
c002833f:	74 20                	je     c0028361 <__extendsfdf2+0x52>
c0028341:	41                   	inc    ecx
c0028342:	01 d2                	add    edx,edx
c0028344:	79 fb                	jns    c0028341 <__extendsfdf2+0x32>
c0028346:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c002834c:	29 c8                	sub    eax,ecx
c002834e:	05 81 03 00 00       	add    eax,0x381
c0028353:	eb 0c                	jmp    c0028361 <__extendsfdf2+0x52>
c0028355:	05 00 07 00 00       	add    eax,0x700
c002835a:	eb 05                	jmp    c0028361 <__extendsfdf2+0x52>
c002835c:	05 80 03 00 00       	add    eax,0x380
c0028361:	c1 e0 14             	shl    eax,0x14
c0028364:	89 c1                	mov    ecx,eax
c0028366:	89 d0                	mov    eax,edx
c0028368:	c1 e8 0b             	shr    eax,0xb
c002836b:	09 c1                	or     ecx,eax
c002836d:	c1 e2 15             	shl    edx,0x15
c0028370:	89 d0                	mov    eax,edx
c0028372:	89 ca                	mov    edx,ecx
c0028374:	5e                   	pop    esi
c0028375:	5f                   	pop    edi
c0028376:	5d                   	pop    ebp
c0028377:	c3                   	ret    
c0028378:	66 90                	xchg   ax,ax
c002837a:	66 90                	xchg   ax,ax
c002837c:	66 90                	xchg   ax,ax
c002837e:	66 90                	xchg   ax,ax

c0028380 <fabs>:
c0028380:	83 ec 0c             	sub    esp,0xc
c0028383:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028387:	89 04 24             	mov    DWORD PTR [esp],eax
c002838a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002838e:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0028393:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0028397:	dd 04 24             	fld    QWORD PTR [esp]
c002839a:	83 c4 0c             	add    esp,0xc
c002839d:	c3                   	ret    
c002839e:	66 90                	xchg   ax,ax

c00283a0 <lrint>:
c00283a0:	dd 44 24 04          	fld    QWORD PTR [esp+0x4]
c00283a4:	83 ec 04             	sub    esp,0x4
c00283a7:	db 1c 24             	fistp  DWORD PTR [esp]
c00283aa:	58                   	pop    eax
c00283ab:	c3                   	ret    

c00283ac <lrintf>:
c00283ac:	d9 44 24 04          	fld    DWORD PTR [esp+0x4]
c00283b0:	83 ec 04             	sub    esp,0x4
c00283b3:	db 1c 24             	fistp  DWORD PTR [esp]
c00283b6:	58                   	pop    eax
c00283b7:	c3                   	ret    

Disassembly of section .init:

c00283b8 <_init>:
c00283b8:	55                   	push   ebp
c00283b9:	89 e5                	mov    ebp,esp
c00283bb:	e8 58 7d fd ff       	call   c0000118 <frame_dummy>
c00283c0:	e8 5b e0 ff ff       	call   c0026420 <__do_global_ctors_aux>
c00283c5:	5d                   	pop    ebp
c00283c6:	c3                   	ret    

Disassembly of section .fini:

c00283c7 <_fini>:
c00283c7:	55                   	push   ebp
c00283c8:	89 e5                	mov    ebp,esp
c00283ca:	e8 d9 7c fd ff       	call   c00000a8 <__do_global_dtors_aux>
c00283cf:	5d                   	pop    ebp
c00283d0:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c00283d2 <Computer::~Computer()>:
c00283d2:	83 ec 0c             	sub    esp,0xc
c00283d5:	ba 5c 9f 02 c0       	mov    edx,0xc0029f5c
c00283da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00283de:	89 10                	mov    DWORD PTR [eax],edx
c00283e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00283e4:	83 ec 0c             	sub    esp,0xc
c00283e7:	50                   	push   eax
c00283e8:	e8 e3 b5 fe ff       	call   c00139d0 <Device::~Device()>
c00283ed:	83 c4 10             	add    esp,0x10
c00283f0:	90                   	nop
c00283f1:	83 c4 0c             	add    esp,0xc
c00283f4:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c00283f6 <Computer::~Computer()>:
c00283f6:	83 ec 0c             	sub    esp,0xc
c00283f9:	83 ec 0c             	sub    esp,0xc
c00283fc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028400:	e8 cd ff ff ff       	call   c00283d2 <Computer::~Computer()>
c0028405:	83 c4 10             	add    esp,0x10
c0028408:	83 ec 08             	sub    esp,0x8
c002840b:	68 ec 01 00 00       	push   0x1ec
c0028410:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028414:	e8 d8 a1 fe ff       	call   c00125f1 <operator delete(void*, unsigned long)>
c0028419:	83 c4 10             	add    esp,0x10
c002841c:	83 c4 0c             	add    esp,0xc
c002841f:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c0028420 <idleCommon()>:
c0028420:	83 ec 0c             	sub    esp,0xc
c0028423:	fa                   	cli    
c0028424:	ff 05 c8 0e 03 c0    	inc    DWORD PTR ds:0xc0030ec8
c002842a:	e8 96 55 ff ff       	call   c001d9c5 <schedule()>
c002842f:	a1 c8 0e 03 c0       	mov    eax,ds:0xc0030ec8
c0028434:	48                   	dec    eax
c0028435:	a3 c8 0e 03 c0       	mov    ds:0xc0030ec8,eax
c002843a:	75 01                	jne    c002843d <idleCommon()+0x1d>
c002843c:	fb                   	sti    
c002843d:	83 c4 0c             	add    esp,0xc
c0028440:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c0028442 <LinkedList<UnixFile>::~LinkedList()>:
c0028442:	90                   	nop
c0028443:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c0028444 <LinkedList<UnixFile>::LinkedList()>:
c0028444:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028448:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002844e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028452:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028459:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002845d:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028464:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028468:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002846e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028472:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028479:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002847d:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028484:	90                   	nop
c0028485:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c0028486 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c0028486:	83 ec 0c             	sub    esp,0xc
c0028489:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c002848e:	75 10                	jne    c00284a0 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c0028490:	83 ec 0c             	sub    esp,0xc
c0028493:	68 14 a2 02 c0       	push   0xc002a214
c0028498:	e8 98 19 ff ff       	call   c0019e35 <Krnl::panic(char const*)>
c002849d:	83 c4 10             	add    esp,0x10
c00284a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00284a4:	8b 00                	mov    eax,DWORD PTR [eax]
c00284a6:	85 c0                	test   eax,eax
c00284a8:	74 34                	je     c00284de <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c00284aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00284ae:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00284b1:	85 c0                	test   eax,eax
c00284b3:	74 29                	je     c00284de <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c00284b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00284b9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00284bc:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00284c0:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00284c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00284c7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00284cb:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00284ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00284d2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00284d5:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00284dc:	eb 65                	jmp    c0028543 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c00284de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00284e2:	8b 00                	mov    eax,DWORD PTR [eax]
c00284e4:	85 c0                	test   eax,eax
c00284e6:	75 4b                	jne    c0028533 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c00284e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00284ec:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00284ef:	85 c0                	test   eax,eax
c00284f1:	75 40                	jne    c0028533 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c00284f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00284f7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00284fb:	89 10                	mov    DWORD PTR [eax],edx
c00284fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028501:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028505:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028508:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002850c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002850f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028516:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002851a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002851d:	85 c0                	test   eax,eax
c002851f:	74 22                	je     c0028543 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0028521:	83 ec 0c             	sub    esp,0xc
c0028524:	68 36 a2 02 c0       	push   0xc002a236
c0028529:	e8 07 19 ff ff       	call   c0019e35 <Krnl::panic(char const*)>
c002852e:	83 c4 10             	add    esp,0x10
c0028531:	eb 10                	jmp    c0028543 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0028533:	83 ec 0c             	sub    esp,0xc
c0028536:	68 40 a2 02 c0       	push   0xc002a240
c002853b:	e8 f5 18 ff ff       	call   c0019e35 <Krnl::panic(char const*)>
c0028540:	83 c4 10             	add    esp,0x10
c0028543:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028547:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002854a:	8d 50 01             	lea    edx,[eax+0x1]
c002854d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028551:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028554:	90                   	nop
c0028555:	83 c4 0c             	add    esp,0xc
c0028558:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c002855a <LinkedList<UnixFile>::getFirstElement()>:
c002855a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002855e:	8b 00                	mov    eax,DWORD PTR [eax]
c0028560:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c0028562 <LinkedList<UnixFile>::removeFirst()>:
c0028562:	83 ec 0c             	sub    esp,0xc
c0028565:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028569:	8b 00                	mov    eax,DWORD PTR [eax]
c002856b:	85 c0                	test   eax,eax
c002856d:	75 12                	jne    c0028581 <LinkedList<UnixFile>::removeFirst()+0x1f>
c002856f:	83 ec 0c             	sub    esp,0xc
c0028572:	68 4c a2 02 c0       	push   0xc002a24c
c0028577:	e8 b9 18 ff ff       	call   c0019e35 <Krnl::panic(char const*)>
c002857c:	83 c4 10             	add    esp,0x10
c002857f:	eb 7e                	jmp    c00285ff <LinkedList<UnixFile>::removeFirst()+0x9d>
c0028581:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028585:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028588:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002858b:	85 c0                	test   eax,eax
c002858d:	74 10                	je     c002859f <LinkedList<UnixFile>::removeFirst()+0x3d>
c002858f:	83 ec 0c             	sub    esp,0xc
c0028592:	68 97 a2 02 c0       	push   0xc002a297
c0028597:	e8 99 18 ff ff       	call   c0019e35 <Krnl::panic(char const*)>
c002859c:	83 c4 10             	add    esp,0x10
c002859f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00285a3:	8b 00                	mov    eax,DWORD PTR [eax]
c00285a5:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00285a8:	85 c0                	test   eax,eax
c00285aa:	75 33                	jne    c00285df <LinkedList<UnixFile>::removeFirst()+0x7d>
c00285ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00285b0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00285b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00285ba:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00285c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00285c5:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00285c8:	83 f8 01             	cmp    eax,0x1
c00285cb:	74 21                	je     c00285ee <LinkedList<UnixFile>::removeFirst()+0x8c>
c00285cd:	83 ec 0c             	sub    esp,0xc
c00285d0:	68 70 a2 02 c0       	push   0xc002a270
c00285d5:	e8 5b 18 ff ff       	call   c0019e35 <Krnl::panic(char const*)>
c00285da:	83 c4 10             	add    esp,0x10
c00285dd:	eb 0f                	jmp    c00285ee <LinkedList<UnixFile>::removeFirst()+0x8c>
c00285df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00285e3:	8b 00                	mov    eax,DWORD PTR [eax]
c00285e5:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c00285e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00285ec:	89 10                	mov    DWORD PTR [eax],edx
c00285ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00285f2:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00285f5:	8d 50 ff             	lea    edx,[eax-0x1]
c00285f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00285fc:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00285ff:	83 c4 0c             	add    esp,0xc
c0028602:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c0028604 <LinkedList<UnixFile>::getNext(UnixFile*)>:
c0028604:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0028608:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002860b:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c002860c <DriverlessDevice::~DriverlessDevice()>:
c002860c:	ba dc aa 02 c0       	mov    edx,0xc002aadc
c0028611:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028615:	89 10                	mov    DWORD PTR [eax],edx
c0028617:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002861b:	50                   	push   eax
c002861c:	e8 af b3 fe ff       	call   c00139d0 <Device::~Device()>
c0028621:	83 c4 04             	add    esp,0x4
c0028624:	90                   	nop
c0028625:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c0028626 <DriverlessDevice::~DriverlessDevice()>:
c0028626:	83 ec 0c             	sub    esp,0xc
c0028629:	83 ec 0c             	sub    esp,0xc
c002862c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028630:	e8 d7 ff ff ff       	call   c002860c <DriverlessDevice::~DriverlessDevice()>
c0028635:	83 c4 10             	add    esp,0x10
c0028638:	83 ec 08             	sub    esp,0x8
c002863b:	68 58 01 00 00       	push   0x158
c0028640:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028644:	e8 a8 9f fe ff       	call   c00125f1 <operator delete(void*, unsigned long)>
c0028649:	83 c4 10             	add    esp,0x10
c002864c:	83 c4 0c             	add    esp,0xc
c002864f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c0028650 <LinkedList<Device>::addElement(Device*)>:
c0028650:	83 ec 0c             	sub    esp,0xc
c0028653:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0028658:	75 10                	jne    c002866a <LinkedList<Device>::addElement(Device*)+0x1a>
c002865a:	83 ec 0c             	sub    esp,0xc
c002865d:	68 14 a2 02 c0       	push   0xc002a214
c0028662:	e8 ce 17 ff ff       	call   c0019e35 <Krnl::panic(char const*)>
c0028667:	83 c4 10             	add    esp,0x10
c002866a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002866e:	8b 00                	mov    eax,DWORD PTR [eax]
c0028670:	85 c0                	test   eax,eax
c0028672:	74 3a                	je     c00286ae <LinkedList<Device>::addElement(Device*)+0x5e>
c0028674:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028678:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002867b:	85 c0                	test   eax,eax
c002867d:	74 2f                	je     c00286ae <LinkedList<Device>::addElement(Device*)+0x5e>
c002867f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028683:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028686:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002868a:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c0028690:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028694:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028698:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002869b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002869f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00286a2:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c00286ac:	eb 68                	jmp    c0028716 <LinkedList<Device>::addElement(Device*)+0xc6>
c00286ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00286b2:	8b 00                	mov    eax,DWORD PTR [eax]
c00286b4:	85 c0                	test   eax,eax
c00286b6:	75 4e                	jne    c0028706 <LinkedList<Device>::addElement(Device*)+0xb6>
c00286b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00286bc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00286bf:	85 c0                	test   eax,eax
c00286c1:	75 43                	jne    c0028706 <LinkedList<Device>::addElement(Device*)+0xb6>
c00286c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00286c7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00286cb:	89 10                	mov    DWORD PTR [eax],edx
c00286cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00286d1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00286d5:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00286d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00286dc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00286df:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c00286e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00286ed:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00286f0:	85 c0                	test   eax,eax
c00286f2:	74 22                	je     c0028716 <LinkedList<Device>::addElement(Device*)+0xc6>
c00286f4:	83 ec 0c             	sub    esp,0xc
c00286f7:	68 36 a2 02 c0       	push   0xc002a236
c00286fc:	e8 34 17 ff ff       	call   c0019e35 <Krnl::panic(char const*)>
c0028701:	83 c4 10             	add    esp,0x10
c0028704:	eb 10                	jmp    c0028716 <LinkedList<Device>::addElement(Device*)+0xc6>
c0028706:	83 ec 0c             	sub    esp,0xc
c0028709:	68 40 a2 02 c0       	push   0xc002a240
c002870e:	e8 22 17 ff ff       	call   c0019e35 <Krnl::panic(char const*)>
c0028713:	83 c4 10             	add    esp,0x10
c0028716:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002871a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002871d:	8d 50 01             	lea    edx,[eax+0x1]
c0028720:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028724:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028727:	90                   	nop
c0028728:	83 c4 0c             	add    esp,0xc
c002872b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c002872c <LinkedList<Device>::LinkedList()>:
c002872c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028730:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028736:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002873a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028741:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028745:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002874c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028750:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028756:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002875a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028761:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028765:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002876c:	90                   	nop
c002876d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c002876e <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c002876e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028772:	8b 00                	mov    eax,DWORD PTR [eax]
c0028774:	85 c0                	test   eax,eax
c0028776:	75 0e                	jne    c0028786 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c0028778:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002877c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002877f:	85 c0                	test   eax,eax
c0028781:	75 03                	jne    c0028786 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c0028783:	b0 01                	mov    al,0x1
c0028785:	c3                   	ret    
c0028786:	b0 00                	mov    al,0x0
c0028788:	90                   	nop
c0028789:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c002878a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c002878a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002878e:	8b 00                	mov    eax,DWORD PTR [eax]
c0028790:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c0028792 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c0028792:	83 ec 0c             	sub    esp,0xc
c0028795:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028799:	8b 00                	mov    eax,DWORD PTR [eax]
c002879b:	85 c0                	test   eax,eax
c002879d:	75 15                	jne    c00287b4 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x22>
c002879f:	83 ec 0c             	sub    esp,0xc
c00287a2:	68 4c a2 02 c0       	push   0xc002a24c
c00287a7:	e8 89 16 ff ff       	call   c0019e35 <Krnl::panic(char const*)>
c00287ac:	83 c4 10             	add    esp,0x10
c00287af:	e9 88 00 00 00       	jmp    c002883c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xaa>
c00287b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287b8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00287bb:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00287be:	85 c0                	test   eax,eax
c00287c0:	0f 95 c0             	setne  al
c00287c3:	84 c0                	test   al,al
c00287c5:	74 10                	je     c00287d7 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x45>
c00287c7:	83 ec 0c             	sub    esp,0xc
c00287ca:	68 97 a2 02 c0       	push   0xc002a297
c00287cf:	e8 61 16 ff ff       	call   c0019e35 <Krnl::panic(char const*)>
c00287d4:	83 c4 10             	add    esp,0x10
c00287d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287db:	8b 00                	mov    eax,DWORD PTR [eax]
c00287dd:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00287e0:	85 c0                	test   eax,eax
c00287e2:	0f 94 c0             	sete   al
c00287e5:	84 c0                	test   al,al
c00287e7:	74 33                	je     c002881c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x8a>
c00287e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287ed:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00287f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287f7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00287fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028802:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028805:	83 f8 01             	cmp    eax,0x1
c0028808:	74 21                	je     c002882b <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c002880a:	83 ec 0c             	sub    esp,0xc
c002880d:	68 70 a2 02 c0       	push   0xc002a270
c0028812:	e8 1e 16 ff ff       	call   c0019e35 <Krnl::panic(char const*)>
c0028817:	83 c4 10             	add    esp,0x10
c002881a:	eb 0f                	jmp    c002882b <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c002881c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028820:	8b 00                	mov    eax,DWORD PTR [eax]
c0028822:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0028825:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028829:	89 10                	mov    DWORD PTR [eax],edx
c002882b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002882f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028832:	8d 50 ff             	lea    edx,[eax-0x1]
c0028835:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028839:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002883c:	83 c4 0c             	add    esp,0xc
c002883f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c0028840 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c0028840:	83 ec 0c             	sub    esp,0xc
c0028843:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0028848:	75 10                	jne    c002885a <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1a>
c002884a:	83 ec 0c             	sub    esp,0xc
c002884d:	68 14 a2 02 c0       	push   0xc002a214
c0028852:	e8 de 15 ff ff       	call   c0019e35 <Krnl::panic(char const*)>
c0028857:	83 c4 10             	add    esp,0x10
c002885a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002885e:	8b 00                	mov    eax,DWORD PTR [eax]
c0028860:	85 c0                	test   eax,eax
c0028862:	74 34                	je     c0028898 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c0028864:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028868:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002886b:	85 c0                	test   eax,eax
c002886d:	74 29                	je     c0028898 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c002886f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028873:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028876:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002887a:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c002887d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028881:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028885:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028888:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002888c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002888f:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0028896:	eb 65                	jmp    c00288fd <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c0028898:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002889c:	8b 00                	mov    eax,DWORD PTR [eax]
c002889e:	85 c0                	test   eax,eax
c00288a0:	75 4b                	jne    c00288ed <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c00288a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288a6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00288a9:	85 c0                	test   eax,eax
c00288ab:	75 40                	jne    c00288ed <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c00288ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288b1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00288b5:	89 10                	mov    DWORD PTR [eax],edx
c00288b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288bb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00288bf:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00288c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288c6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00288c9:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c00288d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288d4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00288d7:	85 c0                	test   eax,eax
c00288d9:	74 22                	je     c00288fd <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c00288db:	83 ec 0c             	sub    esp,0xc
c00288de:	68 36 a2 02 c0       	push   0xc002a236
c00288e3:	e8 4d 15 ff ff       	call   c0019e35 <Krnl::panic(char const*)>
c00288e8:	83 c4 10             	add    esp,0x10
c00288eb:	eb 10                	jmp    c00288fd <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c00288ed:	83 ec 0c             	sub    esp,0xc
c00288f0:	68 40 a2 02 c0       	push   0xc002a240
c00288f5:	e8 3b 15 ff ff       	call   c0019e35 <Krnl::panic(char const*)>
c00288fa:	83 c4 10             	add    esp,0x10
c00288fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028901:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028904:	8d 50 01             	lea    edx,[eax+0x1]
c0028907:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002890b:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002890e:	90                   	nop
c002890f:	83 c4 0c             	add    esp,0xc
c0028912:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c0028914 <ACPI::~ACPI()>:
c0028914:	83 ec 0c             	sub    esp,0xc
c0028917:	ba 48 b3 02 c0       	mov    edx,0xc002b348
c002891c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028920:	89 10                	mov    DWORD PTR [eax],edx
c0028922:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028926:	83 ec 0c             	sub    esp,0xc
c0028929:	50                   	push   eax
c002892a:	e8 a1 b0 fe ff       	call   c00139d0 <Device::~Device()>
c002892f:	83 c4 10             	add    esp,0x10
c0028932:	90                   	nop
c0028933:	83 c4 0c             	add    esp,0xc
c0028936:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c0028938 <ACPI::~ACPI()>:
c0028938:	83 ec 0c             	sub    esp,0xc
c002893b:	83 ec 0c             	sub    esp,0xc
c002893e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028942:	e8 cd ff ff ff       	call   c0028914 <ACPI::~ACPI()>
c0028947:	83 c4 10             	add    esp,0x10
c002894a:	83 ec 08             	sub    esp,0x8
c002894d:	68 64 12 00 00       	push   0x1264
c0028952:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028956:	e8 96 9c fe ff       	call   c00125f1 <operator delete(void*, unsigned long)>
c002895b:	83 c4 10             	add    esp,0x10
c002895e:	83 c4 0c             	add    esp,0xc
c0028961:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c0028962 <LinkedList<Device>::~LinkedList()>:
c0028962:	90                   	nop
c0028963:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c0028964 <LinkedList<Device>::isEmpty()>:
c0028964:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028968:	8b 00                	mov    eax,DWORD PTR [eax]
c002896a:	85 c0                	test   eax,eax
c002896c:	75 0e                	jne    c002897c <LinkedList<Device>::isEmpty()+0x18>
c002896e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028972:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028975:	85 c0                	test   eax,eax
c0028977:	75 03                	jne    c002897c <LinkedList<Device>::isEmpty()+0x18>
c0028979:	b0 01                	mov    al,0x1
c002897b:	c3                   	ret    
c002897c:	b0 00                	mov    al,0x0
c002897e:	90                   	nop
c002897f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c0028980 <LinkedList<Device>::getFirstElement()>:
c0028980:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028984:	8b 00                	mov    eax,DWORD PTR [eax]
c0028986:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c0028988 <LinkedList<Device>::removeFirst()>:
c0028988:	83 ec 0c             	sub    esp,0xc
c002898b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002898f:	8b 00                	mov    eax,DWORD PTR [eax]
c0028991:	85 c0                	test   eax,eax
c0028993:	75 15                	jne    c00289aa <LinkedList<Device>::removeFirst()+0x22>
c0028995:	83 ec 0c             	sub    esp,0xc
c0028998:	68 4c a2 02 c0       	push   0xc002a24c
c002899d:	e8 93 14 ff ff       	call   c0019e35 <Krnl::panic(char const*)>
c00289a2:	83 c4 10             	add    esp,0x10
c00289a5:	e9 87 00 00 00       	jmp    c0028a31 <LinkedList<Device>::removeFirst()+0xa9>
c00289aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289ae:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00289b1:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c00289b7:	85 c0                	test   eax,eax
c00289b9:	74 10                	je     c00289cb <LinkedList<Device>::removeFirst()+0x43>
c00289bb:	83 ec 0c             	sub    esp,0xc
c00289be:	68 97 a2 02 c0       	push   0xc002a297
c00289c3:	e8 6d 14 ff ff       	call   c0019e35 <Krnl::panic(char const*)>
c00289c8:	83 c4 10             	add    esp,0x10
c00289cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289cf:	8b 00                	mov    eax,DWORD PTR [eax]
c00289d1:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c00289d7:	85 c0                	test   eax,eax
c00289d9:	75 33                	jne    c0028a0e <LinkedList<Device>::removeFirst()+0x86>
c00289db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289df:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00289e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289e9:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00289f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289f4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00289f7:	83 f8 01             	cmp    eax,0x1
c00289fa:	74 24                	je     c0028a20 <LinkedList<Device>::removeFirst()+0x98>
c00289fc:	83 ec 0c             	sub    esp,0xc
c00289ff:	68 70 a2 02 c0       	push   0xc002a270
c0028a04:	e8 2c 14 ff ff       	call   c0019e35 <Krnl::panic(char const*)>
c0028a09:	83 c4 10             	add    esp,0x10
c0028a0c:	eb 12                	jmp    c0028a20 <LinkedList<Device>::removeFirst()+0x98>
c0028a0e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a12:	8b 00                	mov    eax,DWORD PTR [eax]
c0028a14:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c0028a1a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a1e:	89 10                	mov    DWORD PTR [eax],edx
c0028a20:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a24:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028a27:	8d 50 ff             	lea    edx,[eax-0x1]
c0028a2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a2e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028a31:	83 c4 0c             	add    esp,0xc
c0028a34:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c0028a36 <CPU::~CPU()>:
c0028a36:	83 ec 0c             	sub    esp,0xc
c0028a39:	ba 98 b5 02 c0       	mov    edx,0xc002b598
c0028a3e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a42:	89 10                	mov    DWORD PTR [eax],edx
c0028a44:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a48:	83 ec 0c             	sub    esp,0xc
c0028a4b:	50                   	push   eax
c0028a4c:	e8 7f af fe ff       	call   c00139d0 <Device::~Device()>
c0028a51:	83 c4 10             	add    esp,0x10
c0028a54:	90                   	nop
c0028a55:	83 c4 0c             	add    esp,0xc
c0028a58:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c0028a5a <CPU::~CPU()>:
c0028a5a:	83 ec 0c             	sub    esp,0xc
c0028a5d:	83 ec 0c             	sub    esp,0xc
c0028a60:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028a64:	e8 cd ff ff ff       	call   c0028a36 <CPU::~CPU()>
c0028a69:	83 c4 10             	add    esp,0x10
c0028a6c:	83 ec 08             	sub    esp,0x8
c0028a6f:	68 98 11 00 00       	push   0x1198
c0028a74:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028a78:	e8 74 9b fe ff       	call   c00125f1 <operator delete(void*, unsigned long)>
c0028a7d:	83 c4 10             	add    esp,0x10
c0028a80:	83 c4 0c             	add    esp,0xc
c0028a83:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c0028a84 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c0028a84:	90                   	nop
c0028a85:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c0028a86 <ThreadControlBlock::ThreadControlBlock()>:
c0028a86:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028a8a:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0028a91:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028a95:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0028a9c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028aa0:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c0028aa7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028aab:	c7 40 40 00 00 00 00 	mov    DWORD PTR [eax+0x40],0x0
c0028ab2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028ab6:	c7 40 59 00 00 00 00 	mov    DWORD PTR [eax+0x59],0x0
c0028abd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028ac1:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c0028ac5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028ac9:	c6 40 62 00          	mov    BYTE PTR [eax+0x62],0x0
c0028acd:	90                   	nop
c0028ace:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c0028ad0 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c0028ad0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028ad4:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028ada:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028ade:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028ae5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028ae9:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028af0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028af4:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028afa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028afe:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028b05:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028b09:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028b10:	90                   	nop
c0028b11:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c0028b12 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c0028b12:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0028b16:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0028b19:	c3                   	ret    

Disassembly of section .text._ZN2Vm9_FPUStateC2Ev:

c0028b1a <Vm::_FPUState::_FPUState()>:
c0028b1a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028b1e:	c7 40 44 00 00 00 00 	mov    DWORD PTR [eax+0x44],0x0
c0028b25:	90                   	nop
c0028b26:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c0028b28 <PCI::~PCI()>:
c0028b28:	83 ec 0c             	sub    esp,0xc
c0028b2b:	ba c4 c0 02 c0       	mov    edx,0xc002c0c4
c0028b30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b34:	89 10                	mov    DWORD PTR [eax],edx
c0028b36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b3a:	83 ec 0c             	sub    esp,0xc
c0028b3d:	50                   	push   eax
c0028b3e:	e8 5d a8 fe ff       	call   c00133a0 <Bus::~Bus()>
c0028b43:	83 c4 10             	add    esp,0x10
c0028b46:	90                   	nop
c0028b47:	83 c4 0c             	add    esp,0xc
c0028b4a:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c0028b4c <PCI::~PCI()>:
c0028b4c:	83 ec 0c             	sub    esp,0xc
c0028b4f:	83 ec 0c             	sub    esp,0xc
c0028b52:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028b56:	e8 cd ff ff ff       	call   c0028b28 <PCI::~PCI()>
c0028b5b:	83 c4 10             	add    esp,0x10
c0028b5e:	83 ec 08             	sub    esp,0x8
c0028b61:	68 5c 01 00 00       	push   0x15c
c0028b66:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028b6a:	e8 82 9a fe ff       	call   c00125f1 <operator delete(void*, unsigned long)>
c0028b6f:	83 c4 10             	add    esp,0x10
c0028b72:	83 c4 0c             	add    esp,0xc
c0028b75:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c0028b76 <IDE::~IDE()>:
c0028b76:	83 ec 0c             	sub    esp,0xc
c0028b79:	ba 78 c1 02 c0       	mov    edx,0xc002c178
c0028b7e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b82:	89 10                	mov    DWORD PTR [eax],edx
c0028b84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b88:	83 ec 0c             	sub    esp,0xc
c0028b8b:	50                   	push   eax
c0028b8c:	e8 55 b3 fe ff       	call   c0013ee6 <HardDiskController::~HardDiskController()>
c0028b91:	83 c4 10             	add    esp,0x10
c0028b94:	90                   	nop
c0028b95:	83 c4 0c             	add    esp,0xc
c0028b98:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c0028b9a <IDE::~IDE()>:
c0028b9a:	83 ec 0c             	sub    esp,0xc
c0028b9d:	83 ec 0c             	sub    esp,0xc
c0028ba0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028ba4:	e8 cd ff ff ff       	call   c0028b76 <IDE::~IDE()>
c0028ba9:	83 c4 10             	add    esp,0x10
c0028bac:	83 ec 08             	sub    esp,0x8
c0028baf:	68 70 02 00 00       	push   0x270
c0028bb4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028bb8:	e8 34 9a fe ff       	call   c00125f1 <operator delete(void*, unsigned long)>
c0028bbd:	83 c4 10             	add    esp,0x10
c0028bc0:	83 c4 0c             	add    esp,0xc
c0028bc3:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c0028bc4 <SATABus::~SATABus()>:
c0028bc4:	83 ec 0c             	sub    esp,0xc
c0028bc7:	ba f0 c1 02 c0       	mov    edx,0xc002c1f0
c0028bcc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028bd0:	89 10                	mov    DWORD PTR [eax],edx
c0028bd2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028bd6:	83 ec 0c             	sub    esp,0xc
c0028bd9:	50                   	push   eax
c0028bda:	e8 07 b3 fe ff       	call   c0013ee6 <HardDiskController::~HardDiskController()>
c0028bdf:	83 c4 10             	add    esp,0x10
c0028be2:	90                   	nop
c0028be3:	83 c4 0c             	add    esp,0xc
c0028be6:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c0028be8 <SATABus::~SATABus()>:
c0028be8:	83 ec 0c             	sub    esp,0xc
c0028beb:	83 ec 0c             	sub    esp,0xc
c0028bee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028bf2:	e8 cd ff ff ff       	call   c0028bc4 <SATABus::~SATABus()>
c0028bf7:	83 c4 10             	add    esp,0x10
c0028bfa:	83 ec 08             	sub    esp,0x8
c0028bfd:	68 64 01 00 00       	push   0x164
c0028c02:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028c06:	e8 e6 99 fe ff       	call   c00125f1 <operator delete(void*, unsigned long)>
c0028c0b:	83 c4 10             	add    esp,0x10
c0028c0e:	83 c4 0c             	add    esp,0xc
c0028c11:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c0028c12 <ATA::~ATA()>:
c0028c12:	83 ec 0c             	sub    esp,0xc
c0028c15:	ba 3c c2 02 c0       	mov    edx,0xc002c23c
c0028c1a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c1e:	89 10                	mov    DWORD PTR [eax],edx
c0028c20:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c24:	83 ec 0c             	sub    esp,0xc
c0028c27:	50                   	push   eax
c0028c28:	e8 9b b3 fe ff       	call   c0013fc8 <PhysicalDisk::~PhysicalDisk()>
c0028c2d:	83 c4 10             	add    esp,0x10
c0028c30:	90                   	nop
c0028c31:	83 c4 0c             	add    esp,0xc
c0028c34:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c0028c36 <ATA::~ATA()>:
c0028c36:	83 ec 0c             	sub    esp,0xc
c0028c39:	83 ec 0c             	sub    esp,0xc
c0028c3c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028c40:	e8 cd ff ff ff       	call   c0028c12 <ATA::~ATA()>
c0028c45:	83 c4 10             	add    esp,0x10
c0028c48:	83 ec 08             	sub    esp,0x8
c0028c4b:	68 7c 01 00 00       	push   0x17c
c0028c50:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028c54:	e8 98 99 fe ff       	call   c00125f1 <operator delete(void*, unsigned long)>
c0028c59:	83 c4 10             	add    esp,0x10
c0028c5c:	83 c4 0c             	add    esp,0xc
c0028c5f:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c0028c60 <ATAPI::~ATAPI()>:
c0028c60:	83 ec 0c             	sub    esp,0xc
c0028c63:	ba 74 c2 02 c0       	mov    edx,0xc002c274
c0028c68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c6c:	89 10                	mov    DWORD PTR [eax],edx
c0028c6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c72:	83 ec 0c             	sub    esp,0xc
c0028c75:	50                   	push   eax
c0028c76:	e8 4d b3 fe ff       	call   c0013fc8 <PhysicalDisk::~PhysicalDisk()>
c0028c7b:	83 c4 10             	add    esp,0x10
c0028c7e:	90                   	nop
c0028c7f:	83 c4 0c             	add    esp,0xc
c0028c82:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c0028c84 <ATAPI::~ATAPI()>:
c0028c84:	83 ec 0c             	sub    esp,0xc
c0028c87:	83 ec 0c             	sub    esp,0xc
c0028c8a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028c8e:	e8 cd ff ff ff       	call   c0028c60 <ATAPI::~ATAPI()>
c0028c93:	83 c4 10             	add    esp,0x10
c0028c96:	83 ec 08             	sub    esp,0x8
c0028c99:	68 80 01 00 00       	push   0x180
c0028c9e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028ca2:	e8 4a 99 fe ff       	call   c00125f1 <operator delete(void*, unsigned long)>
c0028ca7:	83 c4 10             	add    esp,0x10
c0028caa:	83 c4 0c             	add    esp,0xc
c0028cad:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c0028cae <SATA::~SATA()>:
c0028cae:	83 ec 0c             	sub    esp,0xc
c0028cb1:	ba 28 c3 02 c0       	mov    edx,0xc002c328
c0028cb6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028cba:	89 10                	mov    DWORD PTR [eax],edx
c0028cbc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028cc0:	83 ec 0c             	sub    esp,0xc
c0028cc3:	50                   	push   eax
c0028cc4:	e8 ff b2 fe ff       	call   c0013fc8 <PhysicalDisk::~PhysicalDisk()>
c0028cc9:	83 c4 10             	add    esp,0x10
c0028ccc:	90                   	nop
c0028ccd:	83 c4 0c             	add    esp,0xc
c0028cd0:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c0028cd2 <SATA::~SATA()>:
c0028cd2:	83 ec 0c             	sub    esp,0xc
c0028cd5:	83 ec 0c             	sub    esp,0xc
c0028cd8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028cdc:	e8 cd ff ff ff       	call   c0028cae <SATA::~SATA()>
c0028ce1:	83 c4 10             	add    esp,0x10
c0028ce4:	83 ec 08             	sub    esp,0x8
c0028ce7:	68 7c 01 00 00       	push   0x17c
c0028cec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028cf0:	e8 fc 98 fe ff       	call   c00125f1 <operator delete(void*, unsigned long)>
c0028cf5:	83 c4 10             	add    esp,0x10
c0028cf8:	83 c4 0c             	add    esp,0xc
c0028cfb:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c0028cfc <SATAPI::~SATAPI()>:
c0028cfc:	83 ec 0c             	sub    esp,0xc
c0028cff:	ba 04 c4 02 c0       	mov    edx,0xc002c404
c0028d04:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d08:	89 10                	mov    DWORD PTR [eax],edx
c0028d0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d0e:	83 ec 0c             	sub    esp,0xc
c0028d11:	50                   	push   eax
c0028d12:	e8 b1 b2 fe ff       	call   c0013fc8 <PhysicalDisk::~PhysicalDisk()>
c0028d17:	83 c4 10             	add    esp,0x10
c0028d1a:	90                   	nop
c0028d1b:	83 c4 0c             	add    esp,0xc
c0028d1e:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c0028d20 <SATAPI::~SATAPI()>:
c0028d20:	83 ec 0c             	sub    esp,0xc
c0028d23:	83 ec 0c             	sub    esp,0xc
c0028d26:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028d2a:	e8 cd ff ff ff       	call   c0028cfc <SATAPI::~SATAPI()>
c0028d2f:	83 c4 10             	add    esp,0x10
c0028d32:	83 ec 08             	sub    esp,0x8
c0028d35:	68 80 01 00 00       	push   0x180
c0028d3a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028d3e:	e8 ae 98 fe ff       	call   c00125f1 <operator delete(void*, unsigned long)>
c0028d43:	83 c4 10             	add    esp,0x10
c0028d46:	83 c4 0c             	add    esp,0xc
c0028d49:	c3                   	ret    

Disassembly of section .text._ZN3AVXD2Ev:

c0028d4a <AVX::~AVX()>:
c0028d4a:	83 ec 0c             	sub    esp,0xc
c0028d4d:	ba 44 c4 02 c0       	mov    edx,0xc002c444
c0028d52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d56:	89 10                	mov    DWORD PTR [eax],edx
c0028d58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d5c:	83 ec 0c             	sub    esp,0xc
c0028d5f:	50                   	push   eax
c0028d60:	e8 e7 b2 fe ff       	call   c001404c <FPU::~FPU()>
c0028d65:	83 c4 10             	add    esp,0x10
c0028d68:	90                   	nop
c0028d69:	83 c4 0c             	add    esp,0xc
c0028d6c:	c3                   	ret    

Disassembly of section .text._ZN3AVXD0Ev:

c0028d6e <AVX::~AVX()>:
c0028d6e:	83 ec 0c             	sub    esp,0xc
c0028d71:	83 ec 0c             	sub    esp,0xc
c0028d74:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028d78:	e8 cd ff ff ff       	call   c0028d4a <AVX::~AVX()>
c0028d7d:	83 c4 10             	add    esp,0x10
c0028d80:	83 ec 08             	sub    esp,0x8
c0028d83:	68 58 01 00 00       	push   0x158
c0028d88:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028d8c:	e8 60 98 fe ff       	call   c00125f1 <operator delete(void*, unsigned long)>
c0028d91:	83 c4 10             	add    esp,0x10
c0028d94:	83 c4 0c             	add    esp,0xc
c0028d97:	c3                   	ret    

Disassembly of section .text._ZN3MMXD2Ev:

c0028d98 <MMX::~MMX()>:
c0028d98:	83 ec 0c             	sub    esp,0xc
c0028d9b:	ba 84 c4 02 c0       	mov    edx,0xc002c484
c0028da0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028da4:	89 10                	mov    DWORD PTR [eax],edx
c0028da6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028daa:	83 ec 0c             	sub    esp,0xc
c0028dad:	50                   	push   eax
c0028dae:	e8 99 b2 fe ff       	call   c001404c <FPU::~FPU()>
c0028db3:	83 c4 10             	add    esp,0x10
c0028db6:	90                   	nop
c0028db7:	83 c4 0c             	add    esp,0xc
c0028dba:	c3                   	ret    

Disassembly of section .text._ZN3MMXD0Ev:

c0028dbc <MMX::~MMX()>:
c0028dbc:	83 ec 0c             	sub    esp,0xc
c0028dbf:	83 ec 0c             	sub    esp,0xc
c0028dc2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028dc6:	e8 cd ff ff ff       	call   c0028d98 <MMX::~MMX()>
c0028dcb:	83 c4 10             	add    esp,0x10
c0028dce:	83 ec 08             	sub    esp,0x8
c0028dd1:	68 58 01 00 00       	push   0x158
c0028dd6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028dda:	e8 12 98 fe ff       	call   c00125f1 <operator delete(void*, unsigned long)>
c0028ddf:	83 c4 10             	add    esp,0x10
c0028de2:	83 c4 0c             	add    esp,0xc
c0028de5:	c3                   	ret    

Disassembly of section .text._ZN3SSED2Ev:

c0028de6 <SSE::~SSE()>:
c0028de6:	83 ec 0c             	sub    esp,0xc
c0028de9:	ba c4 c4 02 c0       	mov    edx,0xc002c4c4
c0028dee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028df2:	89 10                	mov    DWORD PTR [eax],edx
c0028df4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028df8:	83 ec 0c             	sub    esp,0xc
c0028dfb:	50                   	push   eax
c0028dfc:	e8 4b b2 fe ff       	call   c001404c <FPU::~FPU()>
c0028e01:	83 c4 10             	add    esp,0x10
c0028e04:	90                   	nop
c0028e05:	83 c4 0c             	add    esp,0xc
c0028e08:	c3                   	ret    

Disassembly of section .text._ZN3SSED0Ev:

c0028e0a <SSE::~SSE()>:
c0028e0a:	83 ec 0c             	sub    esp,0xc
c0028e0d:	83 ec 0c             	sub    esp,0xc
c0028e10:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028e14:	e8 cd ff ff ff       	call   c0028de6 <SSE::~SSE()>
c0028e19:	83 c4 10             	add    esp,0x10
c0028e1c:	83 ec 08             	sub    esp,0x8
c0028e1f:	68 58 01 00 00       	push   0x158
c0028e24:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028e28:	e8 c4 97 fe ff       	call   c00125f1 <operator delete(void*, unsigned long)>
c0028e2d:	83 c4 10             	add    esp,0x10
c0028e30:	83 c4 0c             	add    esp,0xc
c0028e33:	c3                   	ret    

Disassembly of section .text._ZN3x87D2Ev:

c0028e34 <x87::~x87()>:
c0028e34:	83 ec 0c             	sub    esp,0xc
c0028e37:	ba 04 c5 02 c0       	mov    edx,0xc002c504
c0028e3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e40:	89 10                	mov    DWORD PTR [eax],edx
c0028e42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e46:	83 ec 0c             	sub    esp,0xc
c0028e49:	50                   	push   eax
c0028e4a:	e8 fd b1 fe ff       	call   c001404c <FPU::~FPU()>
c0028e4f:	83 c4 10             	add    esp,0x10
c0028e52:	90                   	nop
c0028e53:	83 c4 0c             	add    esp,0xc
c0028e56:	c3                   	ret    

Disassembly of section .text._ZN3x87D0Ev:

c0028e58 <x87::~x87()>:
c0028e58:	83 ec 0c             	sub    esp,0xc
c0028e5b:	83 ec 0c             	sub    esp,0xc
c0028e5e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028e62:	e8 cd ff ff ff       	call   c0028e34 <x87::~x87()>
c0028e67:	83 c4 10             	add    esp,0x10
c0028e6a:	83 ec 08             	sub    esp,0x8
c0028e6d:	68 58 01 00 00       	push   0x158
c0028e72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028e76:	e8 76 97 fe ff       	call   c00125f1 <operator delete(void*, unsigned long)>
c0028e7b:	83 c4 10             	add    esp,0x10
c0028e7e:	83 c4 0c             	add    esp,0xc
c0028e81:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c0028e82 <IOAPIC::~IOAPIC()>:
c0028e82:	83 ec 0c             	sub    esp,0xc
c0028e85:	ba 5c c6 02 c0       	mov    edx,0xc002c65c
c0028e8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e8e:	89 10                	mov    DWORD PTR [eax],edx
c0028e90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e94:	83 ec 0c             	sub    esp,0xc
c0028e97:	50                   	push   eax
c0028e98:	e8 33 ab fe ff       	call   c00139d0 <Device::~Device()>
c0028e9d:	83 c4 10             	add    esp,0x10
c0028ea0:	90                   	nop
c0028ea1:	83 c4 0c             	add    esp,0xc
c0028ea4:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c0028ea6 <IOAPIC::~IOAPIC()>:
c0028ea6:	83 ec 0c             	sub    esp,0xc
c0028ea9:	83 ec 0c             	sub    esp,0xc
c0028eac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028eb0:	e8 cd ff ff ff       	call   c0028e82 <IOAPIC::~IOAPIC()>
c0028eb5:	83 c4 10             	add    esp,0x10
c0028eb8:	83 ec 08             	sub    esp,0x8
c0028ebb:	68 68 01 00 00       	push   0x168
c0028ec0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028ec4:	e8 28 97 fe ff       	call   c00125f1 <operator delete(void*, unsigned long)>
c0028ec9:	83 c4 10             	add    esp,0x10
c0028ecc:	83 c4 0c             	add    esp,0xc
c0028ecf:	c3                   	ret    

Disassembly of section .text._ZN4APICD2Ev:

c0028ed0 <APIC::~APIC()>:
c0028ed0:	83 ec 0c             	sub    esp,0xc
c0028ed3:	ba 14 c6 02 c0       	mov    edx,0xc002c614
c0028ed8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028edc:	89 10                	mov    DWORD PTR [eax],edx
c0028ede:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ee2:	83 ec 0c             	sub    esp,0xc
c0028ee5:	50                   	push   eax
c0028ee6:	e8 2b b6 fe ff       	call   c0014516 <InterruptController::~InterruptController()>
c0028eeb:	83 c4 10             	add    esp,0x10
c0028eee:	90                   	nop
c0028eef:	83 c4 0c             	add    esp,0xc
c0028ef2:	c3                   	ret    

Disassembly of section .text._ZN4APICD0Ev:

c0028ef4 <APIC::~APIC()>:
c0028ef4:	83 ec 0c             	sub    esp,0xc
c0028ef7:	83 ec 0c             	sub    esp,0xc
c0028efa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028efe:	e8 cd ff ff ff       	call   c0028ed0 <APIC::~APIC()>
c0028f03:	83 c4 10             	add    esp,0x10
c0028f06:	83 ec 08             	sub    esp,0x8
c0028f09:	68 58 21 00 00       	push   0x2158
c0028f0e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028f12:	e8 da 96 fe ff       	call   c00125f1 <operator delete(void*, unsigned long)>
c0028f17:	83 c4 10             	add    esp,0x10
c0028f1a:	83 c4 0c             	add    esp,0xc
c0028f1d:	c3                   	ret    

Disassembly of section .text._ZN3PICD2Ev:

c0028f1e <PIC::~PIC()>:
c0028f1e:	83 ec 0c             	sub    esp,0xc
c0028f21:	ba ac c6 02 c0       	mov    edx,0xc002c6ac
c0028f26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f2a:	89 10                	mov    DWORD PTR [eax],edx
c0028f2c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f30:	83 ec 0c             	sub    esp,0xc
c0028f33:	50                   	push   eax
c0028f34:	e8 dd b5 fe ff       	call   c0014516 <InterruptController::~InterruptController()>
c0028f39:	83 c4 10             	add    esp,0x10
c0028f3c:	90                   	nop
c0028f3d:	83 c4 0c             	add    esp,0xc
c0028f40:	c3                   	ret    

Disassembly of section .text._ZN3PICD0Ev:

c0028f42 <PIC::~PIC()>:
c0028f42:	83 ec 0c             	sub    esp,0xc
c0028f45:	83 ec 0c             	sub    esp,0xc
c0028f48:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028f4c:	e8 cd ff ff ff       	call   c0028f1e <PIC::~PIC()>
c0028f51:	83 c4 10             	add    esp,0x10
c0028f54:	83 ec 08             	sub    esp,0x8
c0028f57:	68 58 21 00 00       	push   0x2158
c0028f5c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028f60:	e8 8c 96 fe ff       	call   c00125f1 <operator delete(void*, unsigned long)>
c0028f65:	83 c4 10             	add    esp,0x10
c0028f68:	83 c4 0c             	add    esp,0xc
c0028f6b:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c0028f6c <APICTimer::~APICTimer()>:
c0028f6c:	83 ec 0c             	sub    esp,0xc
c0028f6f:	ba 00 c7 02 c0       	mov    edx,0xc002c700
c0028f74:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f78:	89 10                	mov    DWORD PTR [eax],edx
c0028f7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f7e:	83 ec 0c             	sub    esp,0xc
c0028f81:	50                   	push   eax
c0028f82:	e8 e7 d5 fe ff       	call   c001656e <Timer::~Timer()>
c0028f87:	83 c4 10             	add    esp,0x10
c0028f8a:	90                   	nop
c0028f8b:	83 c4 0c             	add    esp,0xc
c0028f8e:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c0028f90 <APICTimer::~APICTimer()>:
c0028f90:	83 ec 0c             	sub    esp,0xc
c0028f93:	83 ec 0c             	sub    esp,0xc
c0028f96:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028f9a:	e8 cd ff ff ff       	call   c0028f6c <APICTimer::~APICTimer()>
c0028f9f:	83 c4 10             	add    esp,0x10
c0028fa2:	83 ec 08             	sub    esp,0x8
c0028fa5:	68 60 01 00 00       	push   0x160
c0028faa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028fae:	e8 3e 96 fe ff       	call   c00125f1 <operator delete(void*, unsigned long)>
c0028fb3:	83 c4 10             	add    esp,0x10
c0028fb6:	83 c4 0c             	add    esp,0xc
c0028fb9:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c0028fba <PIT::~PIT()>:
c0028fba:	83 ec 0c             	sub    esp,0xc
c0028fbd:	ba 50 c7 02 c0       	mov    edx,0xc002c750
c0028fc2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028fc6:	89 10                	mov    DWORD PTR [eax],edx
c0028fc8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028fcc:	83 ec 0c             	sub    esp,0xc
c0028fcf:	50                   	push   eax
c0028fd0:	e8 99 d5 fe ff       	call   c001656e <Timer::~Timer()>
c0028fd5:	83 c4 10             	add    esp,0x10
c0028fd8:	90                   	nop
c0028fd9:	83 c4 0c             	add    esp,0xc
c0028fdc:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c0028fde <PIT::~PIT()>:
c0028fde:	83 ec 0c             	sub    esp,0xc
c0028fe1:	83 ec 0c             	sub    esp,0xc
c0028fe4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028fe8:	e8 cd ff ff ff       	call   c0028fba <PIT::~PIT()>
c0028fed:	83 c4 10             	add    esp,0x10
c0028ff0:	83 ec 08             	sub    esp,0x8
c0028ff3:	68 5c 01 00 00       	push   0x15c
c0028ff8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028ffc:	e8 f0 95 fe ff       	call   c00125f1 <operator delete(void*, unsigned long)>
c0029001:	83 c4 10             	add    esp,0x10
c0029004:	83 c4 0c             	add    esp,0xc
c0029007:	c3                   	ret    
