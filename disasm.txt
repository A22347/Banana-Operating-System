
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 7c fc 00 00       	call   c000fc9c <kernel_main>

c0000020 <callGlobalConstructors>:
c0000020:	e8 13 87 02 00       	call   c0028738 <_init>
c0000025:	c3                   	ret    
c0000026:	bb e2 92 02 c0       	mov    ebx,0xc00292e2
c000002b:	e9 08 00 00 00       	jmp    c0000038 <callGlobalConstructors.ctors_until_end>

c0000030 <callGlobalConstructors.call_constructor>:
c0000030:	ff 13                	call   DWORD PTR [ebx]
c0000032:	81 c3 04 00 00 00    	add    ebx,0x4

c0000038 <callGlobalConstructors.ctors_until_end>:
c0000038:	81 fb f0 92 02 c0    	cmp    ebx,0xc00292f0
c000003e:	72 f0                	jb     c0000030 <callGlobalConstructors.call_constructor>
c0000040:	c3                   	ret    
c0000041:	66 90                	xchg   ax,ax
c0000043:	90                   	nop

c0000044 <deregister_tm_clones>:
c0000044:	b8 78 dc 02 c0       	mov    eax,0xc002dc78
c0000049:	3d 78 dc 02 c0       	cmp    eax,0xc002dc78
c000004e:	74 1c                	je     c000006c <deregister_tm_clones+0x28>
c0000050:	b8 00 00 00 00       	mov    eax,0x0
c0000055:	85 c0                	test   eax,eax
c0000057:	74 13                	je     c000006c <deregister_tm_clones+0x28>
c0000059:	55                   	push   ebp
c000005a:	89 e5                	mov    ebp,esp
c000005c:	83 ec 14             	sub    esp,0x14
c000005f:	68 78 dc 02 c0       	push   0xc002dc78
c0000064:	ff d0                	call   eax
c0000066:	83 c4 10             	add    esp,0x10
c0000069:	c9                   	leave  
c000006a:	c3                   	ret    
c000006b:	90                   	nop
c000006c:	c3                   	ret    
c000006d:	8d 76 00             	lea    esi,[esi+0x0]

c0000070 <register_tm_clones>:
c0000070:	b8 78 dc 02 c0       	mov    eax,0xc002dc78
c0000075:	2d 78 dc 02 c0       	sub    eax,0xc002dc78
c000007a:	c1 f8 02             	sar    eax,0x2
c000007d:	89 c2                	mov    edx,eax
c000007f:	c1 ea 1f             	shr    edx,0x1f
c0000082:	01 d0                	add    eax,edx
c0000084:	d1 f8                	sar    eax,1
c0000086:	74 1c                	je     c00000a4 <register_tm_clones+0x34>
c0000088:	ba 00 00 00 00       	mov    edx,0x0
c000008d:	85 d2                	test   edx,edx
c000008f:	74 13                	je     c00000a4 <register_tm_clones+0x34>
c0000091:	55                   	push   ebp
c0000092:	89 e5                	mov    ebp,esp
c0000094:	83 ec 10             	sub    esp,0x10
c0000097:	50                   	push   eax
c0000098:	68 78 dc 02 c0       	push   0xc002dc78
c000009d:	ff d2                	call   edx
c000009f:	83 c4 10             	add    esp,0x10
c00000a2:	c9                   	leave  
c00000a3:	c3                   	ret    
c00000a4:	c3                   	ret    
c00000a5:	8d 76 00             	lea    esi,[esi+0x0]

c00000a8 <__do_global_dtors_aux>:
c00000a8:	80 3d a8 e2 02 c0 00 	cmp    BYTE PTR ds:0xc002e2a8,0x0
c00000af:	75 63                	jne    c0000114 <__do_global_dtors_aux+0x6c>
c00000b1:	55                   	push   ebp
c00000b2:	89 e5                	mov    ebp,esp
c00000b4:	56                   	push   esi
c00000b5:	53                   	push   ebx
c00000b6:	bb f8 92 02 c0       	mov    ebx,0xc00292f8
c00000bb:	81 eb f4 92 02 c0    	sub    ebx,0xc00292f4
c00000c1:	c1 fb 02             	sar    ebx,0x2
c00000c4:	4b                   	dec    ebx
c00000c5:	be f4 92 02 c0       	mov    esi,0xc00292f4
c00000ca:	a1 ac e2 02 c0       	mov    eax,ds:0xc002e2ac
c00000cf:	39 d8                	cmp    eax,ebx
c00000d1:	73 13                	jae    c00000e6 <__do_global_dtors_aux+0x3e>
c00000d3:	90                   	nop
c00000d4:	40                   	inc    eax
c00000d5:	a3 ac e2 02 c0       	mov    ds:0xc002e2ac,eax
c00000da:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000dd:	a1 ac e2 02 c0       	mov    eax,ds:0xc002e2ac
c00000e2:	39 d8                	cmp    eax,ebx
c00000e4:	72 ee                	jb     c00000d4 <__do_global_dtors_aux+0x2c>
c00000e6:	e8 59 ff ff ff       	call   c0000044 <deregister_tm_clones>
c00000eb:	b8 00 00 00 00       	mov    eax,0x0
c00000f0:	85 c0                	test   eax,eax
c00000f2:	74 10                	je     c0000104 <__do_global_dtors_aux+0x5c>
c00000f4:	83 ec 0c             	sub    esp,0xc
c00000f7:	68 78 dc 02 c0       	push   0xc002dc78
c00000fc:	e8 ff fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000101:	83 c4 10             	add    esp,0x10
c0000104:	c6 05 a8 e2 02 c0 01 	mov    BYTE PTR ds:0xc002e2a8,0x1
c000010b:	8d 65 f8             	lea    esp,[ebp-0x8]
c000010e:	5b                   	pop    ebx
c000010f:	5e                   	pop    esi
c0000110:	5d                   	pop    ebp
c0000111:	c3                   	ret    
c0000112:	66 90                	xchg   ax,ax
c0000114:	c3                   	ret    
c0000115:	8d 76 00             	lea    esi,[esi+0x0]

c0000118 <frame_dummy>:
c0000118:	b8 00 00 00 00       	mov    eax,0x0
c000011d:	85 c0                	test   eax,eax
c000011f:	74 1f                	je     c0000140 <frame_dummy+0x28>
c0000121:	55                   	push   ebp
c0000122:	89 e5                	mov    ebp,esp
c0000124:	83 ec 10             	sub    esp,0x10
c0000127:	68 b0 e2 02 c0       	push   0xc002e2b0
c000012c:	68 78 dc 02 c0       	push   0xc002dc78
c0000131:	e8 ca fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000136:	83 c4 10             	add    esp,0x10
c0000139:	c9                   	leave  
c000013a:	e9 31 ff ff ff       	jmp    c0000070 <register_tm_clones>
c000013f:	90                   	nop
c0000140:	e9 2b ff ff ff       	jmp    c0000070 <register_tm_clones>
c0000145:	66 90                	xchg   ax,ax
c0000147:	66 90                	xchg   ax,ax
c0000149:	66 90                	xchg   ax,ax
c000014b:	66 90                	xchg   ax,ax
c000014d:	66 90                	xchg   ax,ax
c000014f:	90                   	nop

c0000150 <manualPCIProbe>:
c0000150:	31 c0                	xor    eax,eax
c0000152:	66 ba f8 0c          	mov    dx,0xcf8
c0000156:	ed                   	in     eax,dx
c0000157:	89 c3                	mov    ebx,eax
c0000159:	b8 00 00 00 80       	mov    eax,0x80000000
c000015e:	ef                   	out    dx,eax
c000015f:	ed                   	in     eax,dx
c0000160:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000165:	75 0a                	jne    c0000171 <manualPCIProbe.noMech1>
c0000167:	b8 01 00 00 00       	mov    eax,0x1
c000016c:	e9 26 00 00 00       	jmp    c0000197 <manualPCIProbe.gotPCI>

c0000171 <manualPCIProbe.noMech1>:
c0000171:	89 d8                	mov    eax,ebx
c0000173:	ef                   	out    dx,eax
c0000174:	66 ba f8 0c          	mov    dx,0xcf8
c0000178:	ec                   	in     al,dx
c0000179:	88 c3                	mov    bl,al
c000017b:	30 c0                	xor    al,al
c000017d:	ee                   	out    dx,al
c000017e:	ec                   	in     al,dx
c000017f:	84 c0                	test   al,al
c0000181:	75 15                	jne    c0000198 <manualPCIProbe.noPCI>
c0000183:	66 ba fa 0c          	mov    dx,0xcfa
c0000187:	ec                   	in     al,dx
c0000188:	88 c7                	mov    bh,al
c000018a:	30 c0                	xor    al,al
c000018c:	ee                   	out    dx,al
c000018d:	ec                   	in     al,dx
c000018e:	84 c0                	test   al,al
c0000190:	75 06                	jne    c0000198 <manualPCIProbe.noPCI>
c0000192:	b8 02 00 00 00       	mov    eax,0x2

c0000197 <manualPCIProbe.gotPCI>:
c0000197:	c3                   	ret    

c0000198 <manualPCIProbe.noPCI>:
c0000198:	31 c0                	xor    eax,eax
c000019a:	c3                   	ret    

c000019b <prepareTramp>:
c000019b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c00001a2:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c00001a9:	50                   	push   eax
c00001aa:	0f 20 d8             	mov    eax,cr3
c00001ad:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c00001b2:	58                   	pop    eax
c00001b3:	c3                   	ret    

c00001b4 <voodooXADD>:
c00001b4:	55                   	push   ebp
c00001b5:	89 e5                	mov    ebp,esp
c00001b7:	60                   	pusha  
c00001b8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00001bb:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00001be:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c00001c1:	8b 70 44             	mov    esi,DWORD PTR [eax+0x44]
c00001c4:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00001c7:	8b 78 3c             	mov    edi,DWORD PTR [eax+0x3c]
c00001ca:	0f 02 ff             	lar    edi,di
c00001cd:	c1 ef 0d             	shr    edi,0xd
c00001d0:	66 81 e7 03 00       	and    di,0x3
c00001d5:	75 09                	jne    c00001e0 <voodooXADD.usermode>
c00001d7:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
c00001da:	81 c4 14 00 00 00    	add    esp,0x14

c00001e0 <voodooXADD.usermode>:
c00001e0:	89 35 7b 02 00 c0    	mov    DWORD PTR ds:0xc000027b,esi
c00001e6:	89 25 77 02 00 c0    	mov    DWORD PTR ds:0xc0000277,esp
c00001ec:	60                   	pusha  
c00001ed:	b0 90                	mov    al,0x90
c00001ef:	b9 20 00 00 00       	mov    ecx,0x20
c00001f4:	bf 4e 02 00 c0       	mov    edi,0xc000024e
c00001f9:	f3 aa                	rep stos BYTE PTR es:[edi],al
c00001fb:	61                   	popa   
c00001fc:	60                   	pusha  
c00001fd:	89 d6                	mov    esi,edx
c00001ff:	bf 4e 02 00 c0       	mov    edi,0xc000024e
c0000204:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0000206:	61                   	popa   
c0000207:	60                   	pusha  
c0000208:	89 d6                	mov    esi,edx
c000020a:	bf 5e 02 00 c0       	mov    edi,0xc000025e
c000020f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0000211:	61                   	popa   
c0000212:	b1 90                	mov    cl,0x90
c0000214:	85 db                	test   ebx,ebx
c0000216:	74 06                	je     c000021e <voodooXADD.skipChange>
c0000218:	8a 8b 4d 02 00 c0    	mov    cl,BYTE PTR [ebx-0x3ffffdb3]

c000021e <voodooXADD.skipChange>:
c000021e:	88 8b 4e 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffdb2],cl
c0000224:	80 ab 4f 02 00 c0 3a 	sub    BYTE PTR [ebx-0x3ffffdb1],0x3a
c000022b:	88 8b 5e 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffda2],cl
c0000231:	80 ab 5f 02 00 c0 be 	sub    BYTE PTR [ebx-0x3ffffda1],0xbe
c0000238:	89 c4                	mov    esp,eax
c000023a:	81 c4 10 00 00 00    	add    esp,0x10
c0000240:	5f                   	pop    edi
c0000241:	5e                   	pop    esi
c0000242:	5d                   	pop    ebp
c0000243:	5b                   	pop    ebx
c0000244:	5b                   	pop    ebx
c0000245:	5a                   	pop    edx
c0000246:	59                   	pop    ecx
c0000247:	58                   	pop    eax
c0000248:	8b 25 7b 02 00 c0    	mov    esp,DWORD PTR ds:0xc000027b

c000024e <voodooXADD.helper>:
c000024e:	90                   	nop
c000024f:	90                   	nop
c0000250:	90                   	nop
c0000251:	90                   	nop
c0000252:	90                   	nop
c0000253:	90                   	nop
c0000254:	90                   	nop
c0000255:	90                   	nop
c0000256:	90                   	nop
c0000257:	90                   	nop
c0000258:	90                   	nop
c0000259:	90                   	nop
c000025a:	90                   	nop
c000025b:	90                   	nop
c000025c:	90                   	nop
c000025d:	90                   	nop
c000025e:	90                   	nop
c000025f:	90                   	nop
c0000260:	90                   	nop
c0000261:	90                   	nop
c0000262:	90                   	nop
c0000263:	90                   	nop
c0000264:	90                   	nop
c0000265:	90                   	nop
c0000266:	90                   	nop
c0000267:	90                   	nop
c0000268:	90                   	nop
c0000269:	90                   	nop
c000026a:	90                   	nop
c000026b:	90                   	nop
c000026c:	90                   	nop
c000026d:	90                   	nop
c000026e:	8b 25 77 02 00 c0    	mov    esp,DWORD PTR ds:0xc0000277
c0000274:	61                   	popa   
c0000275:	c9                   	leave  
c0000276:	c3                   	ret    

c0000277 <voodooXADD.oldStack>:
c0000277:	00 00                	add    BYTE PTR [eax],al
	...

c000027b <voodooXADD.newStack>:
c000027b:	00 00                	add    BYTE PTR [eax],al
	...

c000027f <doTPAUSE>:
c000027f:	fb                   	sti    
c0000280:	31 c0                	xor    eax,eax
c0000282:	31 d2                	xor    edx,edx
c0000284:	66 0f ae f0          	tpause eax
c0000288:	c3                   	ret    

c0000289 <hasLegacyFPU>:
c0000289:	0f 20 c2             	mov    edx,cr0
c000028c:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c0000292:	0f 22 c2             	mov    cr0,edx
c0000295:	db e3                	fninit 
c0000297:	dd 3d ac 02 00 c0    	fnstsw WORD PTR ds:0xc00002ac
c000029d:	31 c0                	xor    eax,eax
c000029f:	66 81 3d ac 02 00 c0 00 00 	cmp    WORD PTR ds:0xc00002ac,0x0
c00002a8:	75 01                	jne    c00002ab <hasLegacyFPU.nofpu>

c00002aa <hasLegacyFPU.hasfpu>:
c00002aa:	40                   	inc    eax

c00002ab <hasLegacyFPU.nofpu>:
c00002ab:	c3                   	ret    

c00002ac <testword>:
c00002ac:	aa                   	stos   BYTE PTR es:[edi],al
c00002ad:	55                   	push   ebp

c00002ae <is486>:
c00002ae:	0f 09                	wbinvd 
c00002b0:	31 c0                	xor    eax,eax
c00002b2:	40                   	inc    eax
c00002b3:	c3                   	ret    
c00002b4:	90                   	nop
c00002b5:	90                   	nop
c00002b6:	90                   	nop
c00002b7:	90                   	nop
c00002b8:	90                   	nop
c00002b9:	90                   	nop
c00002ba:	90                   	nop
c00002bb:	90                   	nop
c00002bc:	90                   	nop
c00002bd:	90                   	nop
c00002be:	90                   	nop
c00002bf:	90                   	nop
c00002c0:	90                   	nop
c00002c1:	90                   	nop
c00002c2:	90                   	nop
c00002c3:	90                   	nop
c00002c4:	90                   	nop
c00002c5:	90                   	nop
c00002c6:	90                   	nop
c00002c7:	90                   	nop
c00002c8:	90                   	nop
c00002c9:	90                   	nop
c00002ca:	90                   	nop
c00002cb:	90                   	nop
c00002cc:	90                   	nop
c00002cd:	90                   	nop
c00002ce:	90                   	nop
c00002cf:	90                   	nop
c00002d0:	90                   	nop
c00002d1:	90                   	nop
c00002d2:	90                   	nop
c00002d3:	90                   	nop
c00002d4:	90                   	nop
c00002d5:	90                   	nop
c00002d6:	90                   	nop
c00002d7:	90                   	nop
c00002d8:	90                   	nop
c00002d9:	90                   	nop
c00002da:	90                   	nop
c00002db:	90                   	nop
c00002dc:	90                   	nop
c00002dd:	90                   	nop
c00002de:	90                   	nop
c00002df:	90                   	nop
c00002e0:	90                   	nop
c00002e1:	31 c0                	xor    eax,eax
c00002e3:	c3                   	ret    

c00002e4 <detectCPUID>:
c00002e4:	9c                   	pushf  
c00002e5:	9c                   	pushf  
c00002e6:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c00002ed:	9d                   	popf   
c00002ee:	9c                   	pushf  
c00002ef:	58                   	pop    eax
c00002f0:	33 04 24             	xor    eax,DWORD PTR [esp]
c00002f3:	9d                   	popf   
c00002f4:	25 00 00 20 00       	and    eax,0x200000
c00002f9:	c3                   	ret    

c00002fa <goToVM86>:
c00002fa:	55                   	push   ebp
c00002fb:	89 e5                	mov    ebp,esp
c00002fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000300:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000303:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c0000306:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0000309:	25 ff ff 00 00       	and    eax,0xffff
c000030e:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000314:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000031a:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000320:	52                   	push   edx
c0000321:	51                   	push   ecx
c0000322:	68 02 02 02 00       	push   0x20202
c0000327:	53                   	push   ebx
c0000328:	50                   	push   eax
c0000329:	cf                   	iret   

c000032a <goToUsermode>:
c000032a:	55                   	push   ebp
c000032b:	89 e5                	mov    ebp,esp
c000032d:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000330:	66 b8 23 00          	mov    ax,0x23
c0000334:	66 8e d8             	mov    ds,ax
c0000337:	66 8e c0             	mov    es,ax
c000033a:	66 8e e0             	mov    fs,ax
c000033d:	66 8e e8             	mov    gs,ax
c0000340:	89 e0                	mov    eax,esp
c0000342:	68 23 00 00 00       	push   0x23
c0000347:	50                   	push   eax
c0000348:	68 02 02 00 00       	push   0x202
c000034d:	68 1b 00 00 00       	push   0x1b
c0000352:	53                   	push   ebx
c0000353:	cf                   	iret   

c0000354 <switchToThreadASMFirstTime>:
c0000354:	9c                   	pushf  
c0000355:	fa                   	cli    
c0000356:	50                   	push   eax
c0000357:	53                   	push   ebx
c0000358:	51                   	push   ecx
c0000359:	52                   	push   edx
c000035a:	56                   	push   esi
c000035b:	57                   	push   edi
c000035c:	55                   	push   ebp
c000035d:	e9 11 00 00 00       	jmp    c0000373 <commonThreadSwitch>

c0000362 <switchToThreadASM>:
c0000362:	9c                   	pushf  
c0000363:	50                   	push   eax
c0000364:	53                   	push   ebx
c0000365:	51                   	push   ecx
c0000366:	52                   	push   edx
c0000367:	56                   	push   esi
c0000368:	57                   	push   edi
c0000369:	55                   	push   ebp
c000036a:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000370:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000373 <commonThreadSwitch>:
c0000373:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000377:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c000037d:	8b 06                	mov    eax,DWORD PTR [esi]
c000037f:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000382:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0000385:	0f 20 d9             	mov    ecx,cr3
c0000388:	39 c8                	cmp    eax,ecx
c000038a:	74 03                	je     c000038f <commonThreadSwitch.doneVAS>
c000038c:	0f 22 d8             	mov    cr3,eax

c000038f <commonThreadSwitch.doneVAS>:
c000038f:	85 d2                	test   edx,edx
c0000391:	75 11                	jne    c00003a4 <commonThreadSwitch.firstTime>
c0000393:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c0000396:	e8 e5 d6 01 00       	call   c001da80 <changeTSS>
c000039b:	5d                   	pop    ebp
c000039c:	5f                   	pop    edi
c000039d:	5e                   	pop    esi
c000039e:	5a                   	pop    edx
c000039f:	59                   	pop    ecx
c00003a0:	5b                   	pop    ebx
c00003a1:	58                   	pop    eax
c00003a2:	9d                   	popf   
c00003a3:	c3                   	ret    

c00003a4 <commonThreadSwitch.firstTime>:
c00003a4:	fa                   	cli    
c00003a5:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00003a8:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00003ad:	60                   	pusha  
c00003ae:	e8 0e 2a 01 00       	call   c0012dc1 <mapVASFirstTime>
c00003b3:	61                   	popa   
c00003b4:	89 c4                	mov    esp,eax
c00003b6:	56                   	push   esi
c00003b7:	52                   	push   edx
c00003b8:	e8 c3 d6 01 00       	call   c001da80 <changeTSS>
c00003bd:	5a                   	pop    edx
c00003be:	5e                   	pop    esi
c00003bf:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00003c6:	5d                   	pop    ebp
c00003c7:	5f                   	pop    edi
c00003c8:	5e                   	pop    esi
c00003c9:	59                   	pop    ecx
c00003ca:	59                   	pop    ecx
c00003cb:	5b                   	pop    ebx
c00003cc:	58                   	pop    eax
c00003cd:	81 c4 04 00 00 00    	add    esp,0x4
c00003d3:	6a 02                	push   0x2
c00003d5:	9d                   	popf   
c00003d6:	52                   	push   edx
c00003d7:	e8 11 db 01 00       	call   c001deed <taskStartupFunction>
c00003dc:	5a                   	pop    edx
c00003dd:	50                   	push   eax
c00003de:	ff d2                	call   edx
c00003e0:	e8 bf e0 01 00       	call   c001e4a4 <taskReturned>
c00003e5:	e9 fb ff ff ff       	jmp    c00003e5 <commonThreadSwitch.firstTime+0x41>

c00003ea <asmQuickAcquireLock>:
c00003ea:	55                   	push   ebp
c00003eb:	89 e5                	mov    ebp,esp
c00003ed:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c00003f0 <asmQuickAcquireLock.retry>:
c00003f0:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c00003f5:	72 02                	jb     c00003f9 <asmQuickAcquireLock.spin_with_pause>
c00003f7:	fa                   	cli    
c00003f8:	c3                   	ret    

c00003f9 <asmQuickAcquireLock.spin_with_pause>:
c00003f9:	f3 90                	pause  
c00003fb:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000401:	75 f6                	jne    c00003f9 <asmQuickAcquireLock.spin_with_pause>
c0000403:	e9 e8 ff ff ff       	jmp    c00003f0 <asmQuickAcquireLock.retry>

c0000408 <asmQuickReleaseLock>:
c0000408:	55                   	push   ebp
c0000409:	89 e5                	mov    ebp,esp
c000040b:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0000412:	5d                   	pop    ebp
c0000413:	c3                   	ret    

c0000414 <asmAcquireLock>:
c0000414:	55                   	push   ebp
c0000415:	89 e5                	mov    ebp,esp
c0000417:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000041a <asmAcquireLock.retry>:
c000041a:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c000041f:	72 05                	jb     c0000426 <asmAcquireLock.spin_with_pause>
c0000421:	9c                   	pushf  
c0000422:	58                   	pop    eax
c0000423:	fa                   	cli    
c0000424:	5d                   	pop    ebp
c0000425:	c3                   	ret    

c0000426 <asmAcquireLock.spin_with_pause>:
c0000426:	f3 90                	pause  
c0000428:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c000042e:	75 f6                	jne    c0000426 <asmAcquireLock.spin_with_pause>
c0000430:	e9 e5 ff ff ff       	jmp    c000041a <asmAcquireLock.retry>

c0000435 <asmReleaseLock>:
c0000435:	55                   	push   ebp
c0000436:	89 e5                	mov    ebp,esp
c0000438:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c000043b:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000043e:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0000444:	52                   	push   edx
c0000445:	9d                   	popf   
c0000446:	5d                   	pop    ebp
c0000447:	c3                   	ret    

c0000448 <loadGDT>:
c0000448:	0f 01 15 f0 e6 02 c0 	lgdtd  ds:0xc002e6f0
c000044f:	66 b8 10 00          	mov    ax,0x10
c0000453:	66 8e d8             	mov    ds,ax
c0000456:	66 8e c0             	mov    es,ax
c0000459:	66 8e e0             	mov    fs,ax
c000045c:	66 8e e8             	mov    gs,ax
c000045f:	66 8e d0             	mov    ss,ax
c0000462:	e9 00 00 00 00       	jmp    c0000467 <flush2>

c0000467 <flush2>:
c0000467:	c3                   	ret    

c0000468 <isr0>:
c0000468:	fa                   	cli    
c0000469:	68 00 00 00 00       	push   0x0
c000046e:	68 00 00 00 00       	push   0x0
c0000473:	e9 44 01 00 00       	jmp    c00005bc <int_common_stub>

c0000478 <isr1>:
c0000478:	fa                   	cli    
c0000479:	6a 00                	push   0x0
c000047b:	6a 01                	push   0x1
c000047d:	e9 3a 01 00 00       	jmp    c00005bc <int_common_stub>

c0000482 <isr2>:
c0000482:	fa                   	cli    
c0000483:	6a 00                	push   0x0
c0000485:	6a 02                	push   0x2
c0000487:	e9 30 01 00 00       	jmp    c00005bc <int_common_stub>

c000048c <isr3>:
c000048c:	fa                   	cli    
c000048d:	6a 00                	push   0x0
c000048f:	6a 03                	push   0x3
c0000491:	e9 26 01 00 00       	jmp    c00005bc <int_common_stub>

c0000496 <isr4>:
c0000496:	fa                   	cli    
c0000497:	6a 00                	push   0x0
c0000499:	6a 04                	push   0x4
c000049b:	e9 1c 01 00 00       	jmp    c00005bc <int_common_stub>

c00004a0 <isr5>:
c00004a0:	fa                   	cli    
c00004a1:	6a 00                	push   0x0
c00004a3:	6a 05                	push   0x5
c00004a5:	e9 12 01 00 00       	jmp    c00005bc <int_common_stub>

c00004aa <isr6>:
c00004aa:	fa                   	cli    
c00004ab:	6a 00                	push   0x0
c00004ad:	6a 06                	push   0x6
c00004af:	e9 08 01 00 00       	jmp    c00005bc <int_common_stub>

c00004b4 <isr7>:
c00004b4:	fa                   	cli    
c00004b5:	6a 00                	push   0x0
c00004b7:	6a 07                	push   0x7
c00004b9:	e9 fe 00 00 00       	jmp    c00005bc <int_common_stub>

c00004be <isr8>:
c00004be:	fa                   	cli    
c00004bf:	6a 08                	push   0x8
c00004c1:	e9 f6 00 00 00       	jmp    c00005bc <int_common_stub>

c00004c6 <isr9>:
c00004c6:	fa                   	cli    
c00004c7:	6a 00                	push   0x0
c00004c9:	6a 09                	push   0x9
c00004cb:	e9 ec 00 00 00       	jmp    c00005bc <int_common_stub>

c00004d0 <isr10>:
c00004d0:	fa                   	cli    
c00004d1:	6a 0a                	push   0xa
c00004d3:	e9 e4 00 00 00       	jmp    c00005bc <int_common_stub>

c00004d8 <isr11>:
c00004d8:	fa                   	cli    
c00004d9:	6a 0b                	push   0xb
c00004db:	e9 dc 00 00 00       	jmp    c00005bc <int_common_stub>

c00004e0 <isr12>:
c00004e0:	fa                   	cli    
c00004e1:	6a 0c                	push   0xc
c00004e3:	e9 d4 00 00 00       	jmp    c00005bc <int_common_stub>

c00004e8 <isr13>:
c00004e8:	fa                   	cli    
c00004e9:	6a 0d                	push   0xd
c00004eb:	e9 cc 00 00 00       	jmp    c00005bc <int_common_stub>

c00004f0 <isr14>:
c00004f0:	fa                   	cli    
c00004f1:	6a 0e                	push   0xe
c00004f3:	e9 c4 00 00 00       	jmp    c00005bc <int_common_stub>

c00004f8 <isr15>:
c00004f8:	fa                   	cli    
c00004f9:	6a 00                	push   0x0
c00004fb:	6a 0f                	push   0xf
c00004fd:	e9 ba 00 00 00       	jmp    c00005bc <int_common_stub>

c0000502 <isr16>:
c0000502:	fa                   	cli    
c0000503:	6a 00                	push   0x0
c0000505:	6a 10                	push   0x10
c0000507:	e9 b0 00 00 00       	jmp    c00005bc <int_common_stub>

c000050c <isr17>:
c000050c:	fa                   	cli    
c000050d:	6a 00                	push   0x0
c000050f:	6a 11                	push   0x11
c0000511:	e9 a6 00 00 00       	jmp    c00005bc <int_common_stub>

c0000516 <isr18>:
c0000516:	fa                   	cli    
c0000517:	6a 00                	push   0x0
c0000519:	6a 12                	push   0x12
c000051b:	e9 9c 00 00 00       	jmp    c00005bc <int_common_stub>

c0000520 <irq3>:
c0000520:	fa                   	cli    
c0000521:	6a 00                	push   0x0
c0000523:	6a 23                	push   0x23
c0000525:	e9 92 00 00 00       	jmp    c00005bc <int_common_stub>

c000052a <irq4>:
c000052a:	fa                   	cli    
c000052b:	6a 00                	push   0x0
c000052d:	6a 24                	push   0x24
c000052f:	e9 88 00 00 00       	jmp    c00005bc <int_common_stub>

c0000534 <irq5>:
c0000534:	fa                   	cli    
c0000535:	6a 00                	push   0x0
c0000537:	6a 25                	push   0x25
c0000539:	e9 7e 00 00 00       	jmp    c00005bc <int_common_stub>

c000053e <irq6>:
c000053e:	fa                   	cli    
c000053f:	6a 00                	push   0x0
c0000541:	6a 26                	push   0x26
c0000543:	e9 74 00 00 00       	jmp    c00005bc <int_common_stub>

c0000548 <irq7>:
c0000548:	fa                   	cli    
c0000549:	6a 00                	push   0x0
c000054b:	6a 27                	push   0x27
c000054d:	e9 6a 00 00 00       	jmp    c00005bc <int_common_stub>

c0000552 <irq8>:
c0000552:	fa                   	cli    
c0000553:	6a 00                	push   0x0
c0000555:	6a 28                	push   0x28
c0000557:	e9 60 00 00 00       	jmp    c00005bc <int_common_stub>

c000055c <irq9>:
c000055c:	fa                   	cli    
c000055d:	6a 00                	push   0x0
c000055f:	6a 29                	push   0x29
c0000561:	e9 56 00 00 00       	jmp    c00005bc <int_common_stub>

c0000566 <irq10>:
c0000566:	fa                   	cli    
c0000567:	6a 00                	push   0x0
c0000569:	6a 2a                	push   0x2a
c000056b:	e9 4c 00 00 00       	jmp    c00005bc <int_common_stub>

c0000570 <irq11>:
c0000570:	fa                   	cli    
c0000571:	6a 00                	push   0x0
c0000573:	6a 2b                	push   0x2b
c0000575:	e9 42 00 00 00       	jmp    c00005bc <int_common_stub>

c000057a <irq12>:
c000057a:	fa                   	cli    
c000057b:	6a 00                	push   0x0
c000057d:	6a 2c                	push   0x2c
c000057f:	e9 38 00 00 00       	jmp    c00005bc <int_common_stub>

c0000584 <irq13>:
c0000584:	fa                   	cli    
c0000585:	6a 00                	push   0x0
c0000587:	6a 2d                	push   0x2d
c0000589:	e9 2e 00 00 00       	jmp    c00005bc <int_common_stub>

c000058e <irq14>:
c000058e:	fa                   	cli    
c000058f:	6a 00                	push   0x0
c0000591:	6a 2e                	push   0x2e
c0000593:	e9 24 00 00 00       	jmp    c00005bc <int_common_stub>

c0000598 <irq15>:
c0000598:	fa                   	cli    
c0000599:	6a 00                	push   0x0
c000059b:	6a 2f                	push   0x2f
c000059d:	e9 1a 00 00 00       	jmp    c00005bc <int_common_stub>

c00005a2 <irq1>:
c00005a2:	fa                   	cli    
c00005a3:	6a 00                	push   0x0
c00005a5:	6a 21                	push   0x21
c00005a7:	eb 13                	jmp    c00005bc <int_common_stub>

c00005a9 <irq2>:
c00005a9:	fa                   	cli    
c00005aa:	6a 00                	push   0x0
c00005ac:	6a 22                	push   0x22
c00005ae:	eb 0c                	jmp    c00005bc <int_common_stub>

c00005b0 <isr96>:
c00005b0:	6a 00                	push   0x0
c00005b2:	6a 60                	push   0x60
c00005b4:	fb                   	sti    
c00005b5:	eb 05                	jmp    c00005bc <int_common_stub>

c00005b7 <irq0>:
c00005b7:	fa                   	cli    
c00005b8:	6a 00                	push   0x0
c00005ba:	6a 20                	push   0x20

c00005bc <int_common_stub>:
c00005bc:	60                   	pusha  
c00005bd:	1e                   	push   ds
c00005be:	06                   	push   es
c00005bf:	0f a0                	push   fs
c00005c1:	0f a8                	push   gs
c00005c3:	66 b8 10 00          	mov    ax,0x10
c00005c7:	66 8e d8             	mov    ds,ax
c00005ca:	66 8e c0             	mov    es,ax
c00005cd:	66 8e e0             	mov    fs,ax
c00005d0:	66 8e e8             	mov    gs,ax
c00005d3:	54                   	push   esp
c00005d4:	e8 ec 46 01 00       	call   c0014cc5 <int_handler>
c00005d9:	81 c4 04 00 00 00    	add    esp,0x4
c00005df:	0f a9                	pop    gs
c00005e1:	0f a1                	pop    fs
c00005e3:	07                   	pop    es
c00005e4:	1f                   	pop    ds
c00005e5:	61                   	popa   
c00005e6:	81 c4 08 00 00 00    	add    esp,0x8
c00005ec:	cf                   	iret   

c00005ed <irq16>:
c00005ed:	fa                   	cli    
c00005ee:	6a 00                	push   0x0
c00005f0:	6a 30                	push   0x30
c00005f2:	e9 c5 ff ff ff       	jmp    c00005bc <int_common_stub>

c00005f7 <irq17>:
c00005f7:	fa                   	cli    
c00005f8:	6a 00                	push   0x0
c00005fa:	6a 31                	push   0x31
c00005fc:	e9 bb ff ff ff       	jmp    c00005bc <int_common_stub>

c0000601 <irq18>:
c0000601:	fa                   	cli    
c0000602:	6a 00                	push   0x0
c0000604:	6a 32                	push   0x32
c0000606:	e9 b1 ff ff ff       	jmp    c00005bc <int_common_stub>

c000060b <irq19>:
c000060b:	fa                   	cli    
c000060c:	6a 00                	push   0x0
c000060e:	6a 33                	push   0x33
c0000610:	e9 a7 ff ff ff       	jmp    c00005bc <int_common_stub>

c0000615 <irq20>:
c0000615:	fa                   	cli    
c0000616:	6a 00                	push   0x0
c0000618:	6a 34                	push   0x34
c000061a:	e9 9d ff ff ff       	jmp    c00005bc <int_common_stub>

c000061f <irq21>:
c000061f:	fa                   	cli    
c0000620:	6a 00                	push   0x0
c0000622:	6a 35                	push   0x35
c0000624:	e9 93 ff ff ff       	jmp    c00005bc <int_common_stub>

c0000629 <irq22>:
c0000629:	fa                   	cli    
c000062a:	6a 00                	push   0x0
c000062c:	6a 36                	push   0x36
c000062e:	e9 89 ff ff ff       	jmp    c00005bc <int_common_stub>

c0000633 <irq23>:
c0000633:	fa                   	cli    
c0000634:	6a 00                	push   0x0
c0000636:	6a 37                	push   0x37
c0000638:	e9 7f ff ff ff       	jmp    c00005bc <int_common_stub>
c000063d:	66 90                	xchg   ax,ax
c000063f:	90                   	nop

c0000640 <memcmp>:
c0000640:	56                   	push   esi
c0000641:	53                   	push   ebx
c0000642:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000646:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000064a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000064e:	85 f6                	test   esi,esi
c0000650:	74 1d                	je     c000066f <memcmp+0x2f>
c0000652:	8a 08                	mov    cl,BYTE PTR [eax]
c0000654:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000657:	38 cb                	cmp    bl,cl
c0000659:	75 19                	jne    c0000674 <memcmp+0x34>
c000065b:	01 c6                	add    esi,eax
c000065d:	eb 0a                	jmp    c0000669 <memcmp+0x29>
c000065f:	90                   	nop
c0000660:	8a 08                	mov    cl,BYTE PTR [eax]
c0000662:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000665:	38 d9                	cmp    cl,bl
c0000667:	75 0b                	jne    c0000674 <memcmp+0x34>
c0000669:	40                   	inc    eax
c000066a:	42                   	inc    edx
c000066b:	39 f0                	cmp    eax,esi
c000066d:	75 f1                	jne    c0000660 <memcmp+0x20>
c000066f:	31 c0                	xor    eax,eax
c0000671:	5b                   	pop    ebx
c0000672:	5e                   	pop    esi
c0000673:	c3                   	ret    
c0000674:	0f b6 c1             	movzx  eax,cl
c0000677:	29 d8                	sub    eax,ebx
c0000679:	5b                   	pop    ebx
c000067a:	5e                   	pop    esi
c000067b:	c3                   	ret    

c000067c <memmove>:
c000067c:	55                   	push   ebp
c000067d:	57                   	push   edi
c000067e:	56                   	push   esi
c000067f:	53                   	push   ebx
c0000680:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0000684:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0000688:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000068c:	39 dd                	cmp    ebp,ebx
c000068e:	0f 83 80 00 00 00    	jae    c0000714 <memmove+0x98>
c0000694:	85 d2                	test   edx,edx
c0000696:	74 74                	je     c000070c <memmove+0x90>
c0000698:	8d 4b 04             	lea    ecx,[ebx+0x4]
c000069b:	8d 75 04             	lea    esi,[ebp+0x4]
c000069e:	39 cd                	cmp    ebp,ecx
c00006a0:	0f 93 c1             	setae  cl
c00006a3:	39 f3                	cmp    ebx,esi
c00006a5:	0f 93 c0             	setae  al
c00006a8:	89 c6                	mov    esi,eax
c00006aa:	09 ce                	or     esi,ecx
c00006ac:	8d 4a ff             	lea    ecx,[edx-0x1]
c00006af:	89 f0                	mov    eax,esi
c00006b1:	83 f9 0c             	cmp    ecx,0xc
c00006b4:	0f 97 c1             	seta   cl
c00006b7:	84 c8                	test   al,cl
c00006b9:	74 75                	je     c0000730 <memmove+0xb4>
c00006bb:	89 e9                	mov    ecx,ebp
c00006bd:	09 d9                	or     ecx,ebx
c00006bf:	83 e1 03             	and    ecx,0x3
c00006c2:	75 6c                	jne    c0000730 <memmove+0xb4>
c00006c4:	89 d7                	mov    edi,edx
c00006c6:	89 d9                	mov    ecx,ebx
c00006c8:	83 e7 fc             	and    edi,0xfffffffc
c00006cb:	89 ee                	mov    esi,ebp
c00006cd:	01 df                	add    edi,ebx
c00006cf:	90                   	nop
c00006d0:	8b 01                	mov    eax,DWORD PTR [ecx]
c00006d2:	83 c6 04             	add    esi,0x4
c00006d5:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c00006d8:	83 c1 04             	add    ecx,0x4
c00006db:	39 f9                	cmp    ecx,edi
c00006dd:	75 f1                	jne    c00006d0 <memmove+0x54>
c00006df:	89 d1                	mov    ecx,edx
c00006e1:	89 d7                	mov    edi,edx
c00006e3:	83 e1 fc             	and    ecx,0xfffffffc
c00006e6:	29 cf                	sub    edi,ecx
c00006e8:	01 cb                	add    ebx,ecx
c00006ea:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c00006ee:	39 ca                	cmp    edx,ecx
c00006f0:	74 1a                	je     c000070c <memmove+0x90>
c00006f2:	8a 03                	mov    al,BYTE PTR [ebx]
c00006f4:	83 ff 01             	cmp    edi,0x1
c00006f7:	88 06                	mov    BYTE PTR [esi],al
c00006f9:	74 11                	je     c000070c <memmove+0x90>
c00006fb:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c00006fe:	83 ff 02             	cmp    edi,0x2
c0000701:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000704:	74 06                	je     c000070c <memmove+0x90>
c0000706:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000709:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c000070c:	5b                   	pop    ebx
c000070d:	89 e8                	mov    eax,ebp
c000070f:	5e                   	pop    esi
c0000710:	5f                   	pop    edi
c0000711:	5d                   	pop    ebp
c0000712:	c3                   	ret    
c0000713:	90                   	nop
c0000714:	76 f6                	jbe    c000070c <memmove+0x90>
c0000716:	85 d2                	test   edx,edx
c0000718:	74 f2                	je     c000070c <memmove+0x90>
c000071a:	4b                   	dec    ebx
c000071b:	8d 4d ff             	lea    ecx,[ebp-0x1]
c000071e:	66 90                	xchg   ax,ax
c0000720:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c0000723:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c0000726:	4a                   	dec    edx
c0000727:	75 f7                	jne    c0000720 <memmove+0xa4>
c0000729:	5b                   	pop    ebx
c000072a:	89 e8                	mov    eax,ebp
c000072c:	5e                   	pop    esi
c000072d:	5f                   	pop    edi
c000072e:	5d                   	pop    ebp
c000072f:	c3                   	ret    
c0000730:	01 ea                	add    edx,ebp
c0000732:	89 e9                	mov    ecx,ebp
c0000734:	8a 03                	mov    al,BYTE PTR [ebx]
c0000736:	41                   	inc    ecx
c0000737:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c000073a:	43                   	inc    ebx
c000073b:	39 d1                	cmp    ecx,edx
c000073d:	75 f5                	jne    c0000734 <memmove+0xb8>
c000073f:	eb cb                	jmp    c000070c <memmove+0x90>
c0000741:	8d 76 00             	lea    esi,[esi+0x0]

c0000744 <memcpy>:
c0000744:	57                   	push   edi
c0000745:	56                   	push   esi
c0000746:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000074a:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000074e:	a8 03                	test   al,0x3
c0000750:	74 12                	je     c0000764 <memcpy+0x20>
c0000752:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000756:	89 c1                	mov    ecx,eax
c0000758:	fc                   	cld    
c0000759:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000075b:	29 c7                	sub    edi,eax
c000075d:	5e                   	pop    esi
c000075e:	89 f8                	mov    eax,edi
c0000760:	5f                   	pop    edi
c0000761:	c3                   	ret    
c0000762:	66 90                	xchg   ax,ax
c0000764:	89 c1                	mov    ecx,eax
c0000766:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000076a:	c1 e9 02             	shr    ecx,0x2
c000076d:	fc                   	cld    
c000076e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0000770:	29 c7                	sub    edi,eax
c0000772:	5e                   	pop    esi
c0000773:	89 f8                	mov    eax,edi
c0000775:	5f                   	pop    edi
c0000776:	c3                   	ret    
c0000777:	90                   	nop

c0000778 <memset>:
c0000778:	57                   	push   edi
c0000779:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000077d:	85 c9                	test   ecx,ecx
c000077f:	74 0b                	je     c000078c <memset+0x14>
c0000781:	fc                   	cld    
c0000782:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000786:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000078a:	f3 aa                	rep stos BYTE PTR es:[edi],al
c000078c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000790:	5f                   	pop    edi
c0000791:	c3                   	ret    
c0000792:	66 90                	xchg   ax,ax

c0000794 <strlen>:
c0000794:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000798:	31 c0                	xor    eax,eax
c000079a:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c000079d:	74 09                	je     c00007a8 <strlen+0x14>
c000079f:	90                   	nop
c00007a0:	40                   	inc    eax
c00007a1:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c00007a5:	75 f9                	jne    c00007a0 <strlen+0xc>
c00007a7:	c3                   	ret    
c00007a8:	c3                   	ret    
c00007a9:	8d 76 00             	lea    esi,[esi+0x0]

c00007ac <strpbrk>:
c00007ac:	57                   	push   edi
c00007ad:	56                   	push   esi
c00007ae:	53                   	push   ebx
c00007af:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00007b3:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00007b7:	8a 1e                	mov    bl,BYTE PTR [esi]
c00007b9:	84 db                	test   bl,bl
c00007bb:	74 21                	je     c00007de <strpbrk+0x32>
c00007bd:	8a 07                	mov    al,BYTE PTR [edi]
c00007bf:	84 c0                	test   al,al
c00007c1:	74 14                	je     c00007d7 <strpbrk+0x2b>
c00007c3:	38 d8                	cmp    al,bl
c00007c5:	74 19                	je     c00007e0 <strpbrk+0x34>
c00007c7:	89 fa                	mov    edx,edi
c00007c9:	eb 05                	jmp    c00007d0 <strpbrk+0x24>
c00007cb:	90                   	nop
c00007cc:	38 d9                	cmp    cl,bl
c00007ce:	74 10                	je     c00007e0 <strpbrk+0x34>
c00007d0:	42                   	inc    edx
c00007d1:	8a 0a                	mov    cl,BYTE PTR [edx]
c00007d3:	84 c9                	test   cl,cl
c00007d5:	75 f5                	jne    c00007cc <strpbrk+0x20>
c00007d7:	46                   	inc    esi
c00007d8:	8a 1e                	mov    bl,BYTE PTR [esi]
c00007da:	84 db                	test   bl,bl
c00007dc:	75 e1                	jne    c00007bf <strpbrk+0x13>
c00007de:	31 f6                	xor    esi,esi
c00007e0:	89 f0                	mov    eax,esi
c00007e2:	5b                   	pop    ebx
c00007e3:	5e                   	pop    esi
c00007e4:	5f                   	pop    edi
c00007e5:	c3                   	ret    
c00007e6:	66 90                	xchg   ax,ax

c00007e8 <strtok>:
c00007e8:	56                   	push   esi
c00007e9:	53                   	push   ebx
c00007ea:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00007ee:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00007f2:	85 db                	test   ebx,ebx
c00007f4:	75 07                	jne    c00007fd <strtok+0x15>
c00007f6:	eb 2c                	jmp    c0000824 <strtok+0x3c>
c00007f8:	43                   	inc    ebx
c00007f9:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c00007fd:	56                   	push   esi
c00007fe:	53                   	push   ebx
c00007ff:	e8 a8 ff ff ff       	call   c00007ac <strpbrk>
c0000804:	5a                   	pop    edx
c0000805:	a3 c8 e2 02 c0       	mov    ds:0xc002e2c8,eax
c000080a:	59                   	pop    ecx
c000080b:	39 d8                	cmp    eax,ebx
c000080d:	74 e9                	je     c00007f8 <strtok+0x10>
c000080f:	85 c0                	test   eax,eax
c0000811:	74 1b                	je     c000082e <strtok+0x46>
c0000813:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0000816:	8d 50 01             	lea    edx,[eax+0x1]
c0000819:	89 d8                	mov    eax,ebx
c000081b:	89 15 c8 e2 02 c0    	mov    DWORD PTR ds:0xc002e2c8,edx
c0000821:	5b                   	pop    ebx
c0000822:	5e                   	pop    esi
c0000823:	c3                   	ret    
c0000824:	8b 1d c8 e2 02 c0    	mov    ebx,DWORD PTR ds:0xc002e2c8
c000082a:	85 db                	test   ebx,ebx
c000082c:	75 cf                	jne    c00007fd <strtok+0x15>
c000082e:	31 c0                	xor    eax,eax
c0000830:	5b                   	pop    ebx
c0000831:	5e                   	pop    esi
c0000832:	c3                   	ret    
c0000833:	90                   	nop

c0000834 <strcpy>:
c0000834:	53                   	push   ebx
c0000835:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000839:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000083d:	89 c3                	mov    ebx,eax
c000083f:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000841:	84 d2                	test   dl,dl
c0000843:	74 0d                	je     c0000852 <strcpy+0x1e>
c0000845:	8d 76 00             	lea    esi,[esi+0x0]
c0000848:	88 13                	mov    BYTE PTR [ebx],dl
c000084a:	41                   	inc    ecx
c000084b:	43                   	inc    ebx
c000084c:	8a 11                	mov    dl,BYTE PTR [ecx]
c000084e:	84 d2                	test   dl,dl
c0000850:	75 f6                	jne    c0000848 <strcpy+0x14>
c0000852:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000855:	5b                   	pop    ebx
c0000856:	c3                   	ret    
c0000857:	90                   	nop

c0000858 <strncpy>:
c0000858:	55                   	push   ebp
c0000859:	57                   	push   edi
c000085a:	56                   	push   esi
c000085b:	53                   	push   ebx
c000085c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0000860:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0000864:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0000868:	85 c0                	test   eax,eax
c000086a:	74 39                	je     c00008a5 <strncpy+0x4d>
c000086c:	8a 1e                	mov    bl,BYTE PTR [esi]
c000086e:	8d 48 ff             	lea    ecx,[eax-0x1]
c0000871:	8d 55 01             	lea    edx,[ebp+0x1]
c0000874:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c0000877:	84 db                	test   bl,bl
c0000879:	74 31                	je     c00008ac <strncpy+0x54>
c000087b:	85 c9                	test   ecx,ecx
c000087d:	74 26                	je     c00008a5 <strncpy+0x4d>
c000087f:	8a 5e 01             	mov    bl,BYTE PTR [esi+0x1]
c0000882:	8d 48 fe             	lea    ecx,[eax-0x2]
c0000885:	8d 55 02             	lea    edx,[ebp+0x2]
c0000888:	8d 46 02             	lea    eax,[esi+0x2]
c000088b:	88 5d 01             	mov    BYTE PTR [ebp+0x1],bl
c000088e:	84 db                	test   bl,bl
c0000890:	75 0f                	jne    c00008a1 <strncpy+0x49>
c0000892:	eb 18                	jmp    c00008ac <strncpy+0x54>
c0000894:	40                   	inc    eax
c0000895:	42                   	inc    edx
c0000896:	8a 58 ff             	mov    bl,BYTE PTR [eax-0x1]
c0000899:	49                   	dec    ecx
c000089a:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c000089d:	84 db                	test   bl,bl
c000089f:	74 0b                	je     c00008ac <strncpy+0x54>
c00008a1:	85 c9                	test   ecx,ecx
c00008a3:	75 ef                	jne    c0000894 <strncpy+0x3c>
c00008a5:	5b                   	pop    ebx
c00008a6:	89 e8                	mov    eax,ebp
c00008a8:	5e                   	pop    esi
c00008a9:	5f                   	pop    edi
c00008aa:	5d                   	pop    ebp
c00008ab:	c3                   	ret    
c00008ac:	85 c9                	test   ecx,ecx
c00008ae:	74 f5                	je     c00008a5 <strncpy+0x4d>
c00008b0:	fc                   	cld    
c00008b1:	31 c0                	xor    eax,eax
c00008b3:	89 d7                	mov    edi,edx
c00008b5:	f3 aa                	rep stos BYTE PTR es:[edi],al
c00008b7:	89 e8                	mov    eax,ebp
c00008b9:	5b                   	pop    ebx
c00008ba:	5e                   	pop    esi
c00008bb:	5f                   	pop    edi
c00008bc:	5d                   	pop    ebp
c00008bd:	c3                   	ret    
c00008be:	66 90                	xchg   ax,ax

c00008c0 <strcmp>:
c00008c0:	56                   	push   esi
c00008c1:	53                   	push   ebx
c00008c2:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00008c6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00008ca:	8a 16                	mov    dl,BYTE PTR [esi]
c00008cc:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c00008cf:	38 d1                	cmp    cl,dl
c00008d1:	75 1d                	jne    c00008f0 <strcmp+0x30>
c00008d3:	84 c9                	test   cl,cl
c00008d5:	74 21                	je     c00008f8 <strcmp+0x38>
c00008d7:	b8 01 00 00 00       	mov    eax,0x1
c00008dc:	eb 07                	jmp    c00008e5 <strcmp+0x25>
c00008de:	66 90                	xchg   ax,ax
c00008e0:	40                   	inc    eax
c00008e1:	84 d2                	test   dl,dl
c00008e3:	74 13                	je     c00008f8 <strcmp+0x38>
c00008e5:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c00008e8:	0f b6 0c 03          	movzx  ecx,BYTE PTR [ebx+eax*1]
c00008ec:	38 ca                	cmp    dl,cl
c00008ee:	74 f0                	je     c00008e0 <strcmp+0x20>
c00008f0:	0f b6 c2             	movzx  eax,dl
c00008f3:	5b                   	pop    ebx
c00008f4:	29 c8                	sub    eax,ecx
c00008f6:	5e                   	pop    esi
c00008f7:	c3                   	ret    
c00008f8:	31 c0                	xor    eax,eax
c00008fa:	5b                   	pop    ebx
c00008fb:	5e                   	pop    esi
c00008fc:	c3                   	ret    
c00008fd:	8d 76 00             	lea    esi,[esi+0x0]

c0000900 <strchr>:
c0000900:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000904:	8a 10                	mov    dl,BYTE PTR [eax]
c0000906:	84 d2                	test   dl,dl
c0000908:	74 15                	je     c000091f <strchr+0x1f>
c000090a:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c000090e:	38 ca                	cmp    dl,cl
c0000910:	75 06                	jne    c0000918 <strchr+0x18>
c0000912:	eb 0e                	jmp    c0000922 <strchr+0x22>
c0000914:	38 ca                	cmp    dl,cl
c0000916:	74 09                	je     c0000921 <strchr+0x21>
c0000918:	40                   	inc    eax
c0000919:	8a 10                	mov    dl,BYTE PTR [eax]
c000091b:	84 d2                	test   dl,dl
c000091d:	75 f5                	jne    c0000914 <strchr+0x14>
c000091f:	31 c0                	xor    eax,eax
c0000921:	c3                   	ret    
c0000922:	c3                   	ret    
c0000923:	90                   	nop

c0000924 <strncmp>:
c0000924:	57                   	push   edi
c0000925:	56                   	push   esi
c0000926:	53                   	push   ebx
c0000927:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000092b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000092f:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0000933:	85 ff                	test   edi,edi
c0000935:	74 28                	je     c000095f <strncmp+0x3b>
c0000937:	8a 16                	mov    dl,BYTE PTR [esi]
c0000939:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c000093c:	38 d1                	cmp    cl,dl
c000093e:	75 28                	jne    c0000968 <strncmp+0x44>
c0000940:	8d 46 01             	lea    eax,[esi+0x1]
c0000943:	84 c9                	test   cl,cl
c0000945:	74 18                	je     c000095f <strncmp+0x3b>
c0000947:	01 fe                	add    esi,edi
c0000949:	eb 0f                	jmp    c000095a <strncmp+0x36>
c000094b:	90                   	nop
c000094c:	8a 10                	mov    dl,BYTE PTR [eax]
c000094e:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000951:	38 ca                	cmp    dl,cl
c0000953:	75 13                	jne    c0000968 <strncmp+0x44>
c0000955:	40                   	inc    eax
c0000956:	84 d2                	test   dl,dl
c0000958:	74 05                	je     c000095f <strncmp+0x3b>
c000095a:	43                   	inc    ebx
c000095b:	39 c6                	cmp    esi,eax
c000095d:	75 ed                	jne    c000094c <strncmp+0x28>
c000095f:	5b                   	pop    ebx
c0000960:	31 c0                	xor    eax,eax
c0000962:	5e                   	pop    esi
c0000963:	5f                   	pop    edi
c0000964:	c3                   	ret    
c0000965:	8d 76 00             	lea    esi,[esi+0x0]
c0000968:	5b                   	pop    ebx
c0000969:	0f b6 c2             	movzx  eax,dl
c000096c:	5e                   	pop    esi
c000096d:	29 c8                	sub    eax,ecx
c000096f:	5f                   	pop    edi
c0000970:	c3                   	ret    
c0000971:	8d 76 00             	lea    esi,[esi+0x0]

c0000974 <strcat>:
c0000974:	56                   	push   esi
c0000975:	53                   	push   ebx
c0000976:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000097a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000097e:	89 c3                	mov    ebx,eax
c0000980:	eb 04                	jmp    c0000986 <strcat+0x12>
c0000982:	66 90                	xchg   ax,ax
c0000984:	89 d3                	mov    ebx,edx
c0000986:	8d 53 01             	lea    edx,[ebx+0x1]
c0000989:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c000098d:	75 f5                	jne    c0000984 <strcat+0x10>
c000098f:	31 d2                	xor    edx,edx
c0000991:	8d 76 00             	lea    esi,[esi+0x0]
c0000994:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c0000997:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c000099a:	42                   	inc    edx
c000099b:	84 c9                	test   cl,cl
c000099d:	75 f5                	jne    c0000994 <strcat+0x20>
c000099f:	5b                   	pop    ebx
c00009a0:	5e                   	pop    esi
c00009a1:	c3                   	ret    
c00009a2:	66 90                	xchg   ax,ax

c00009a4 <strncat>:
c00009a4:	56                   	push   esi
c00009a5:	53                   	push   ebx
c00009a6:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00009aa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00009ae:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00009b2:	85 f6                	test   esi,esi
c00009b4:	74 1e                	je     c00009d4 <strncat+0x30>
c00009b6:	89 c2                	mov    edx,eax
c00009b8:	42                   	inc    edx
c00009b9:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c00009bd:	75 f9                	jne    c00009b8 <strncat+0x14>
c00009bf:	01 ce                	add    esi,ecx
c00009c1:	eb 06                	jmp    c00009c9 <strncat+0x25>
c00009c3:	90                   	nop
c00009c4:	39 f1                	cmp    ecx,esi
c00009c6:	74 10                	je     c00009d8 <strncat+0x34>
c00009c8:	42                   	inc    edx
c00009c9:	41                   	inc    ecx
c00009ca:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00009cd:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00009d0:	84 db                	test   bl,bl
c00009d2:	75 f0                	jne    c00009c4 <strncat+0x20>
c00009d4:	5b                   	pop    ebx
c00009d5:	5e                   	pop    esi
c00009d6:	c3                   	ret    
c00009d7:	90                   	nop
c00009d8:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00009db:	5b                   	pop    ebx
c00009dc:	5e                   	pop    esi
c00009dd:	c3                   	ret    
c00009de:	66 90                	xchg   ax,ax

c00009e0 <strstr>:
c00009e0:	57                   	push   edi
c00009e1:	56                   	push   esi
c00009e2:	53                   	push   ebx
c00009e3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00009e7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00009eb:	57                   	push   edi
c00009ec:	e8 a3 fd ff ff       	call   c0000794 <strlen>
c00009f1:	59                   	pop    ecx
c00009f2:	85 c0                	test   eax,eax
c00009f4:	74 2a                	je     c0000a20 <strstr+0x40>
c00009f6:	89 c6                	mov    esi,eax
c00009f8:	eb 12                	jmp    c0000a0c <strstr+0x2c>
c00009fa:	66 90                	xchg   ax,ax
c00009fc:	56                   	push   esi
c00009fd:	57                   	push   edi
c00009fe:	53                   	push   ebx
c00009ff:	e8 3c fc ff ff       	call   c0000640 <memcmp>
c0000a04:	83 c4 0c             	add    esp,0xc
c0000a07:	85 c0                	test   eax,eax
c0000a09:	74 15                	je     c0000a20 <strstr+0x40>
c0000a0b:	43                   	inc    ebx
c0000a0c:	53                   	push   ebx
c0000a0d:	e8 82 fd ff ff       	call   c0000794 <strlen>
c0000a12:	5a                   	pop    edx
c0000a13:	39 f0                	cmp    eax,esi
c0000a15:	73 e5                	jae    c00009fc <strstr+0x1c>
c0000a17:	5b                   	pop    ebx
c0000a18:	31 c0                	xor    eax,eax
c0000a1a:	5e                   	pop    esi
c0000a1b:	5f                   	pop    edi
c0000a1c:	c3                   	ret    
c0000a1d:	8d 76 00             	lea    esi,[esi+0x0]
c0000a20:	89 d8                	mov    eax,ebx
c0000a22:	5b                   	pop    ebx
c0000a23:	5e                   	pop    esi
c0000a24:	5f                   	pop    edi
c0000a25:	c3                   	ret    
c0000a26:	66 90                	xchg   ax,ax

c0000a28 <toupper>:
c0000a28:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000a2c:	0f b6 d0             	movzx  edx,al
c0000a2f:	f6 82 00 93 02 c0 02 	test   BYTE PTR [edx-0x3ffd6d00],0x2
c0000a36:	74 03                	je     c0000a3b <toupper+0x13>
c0000a38:	83 e8 20             	sub    eax,0x20
c0000a3b:	c3                   	ret    

c0000a3c <tolower>:
c0000a3c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000a40:	0f b6 d0             	movzx  edx,al
c0000a43:	f6 82 00 93 02 c0 01 	test   BYTE PTR [edx-0x3ffd6d00],0x1
c0000a4a:	74 03                	je     c0000a4f <tolower+0x13>
c0000a4c:	83 c0 20             	add    eax,0x20
c0000a4f:	c3                   	ret    

c0000a50 <simple_strtoul>:
c0000a50:	55                   	push   ebp
c0000a51:	57                   	push   edi
c0000a52:	56                   	push   esi
c0000a53:	53                   	push   ebx
c0000a54:	83 ec 08             	sub    esp,0x8
c0000a57:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000a5b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0000a5f:	90                   	nop
c0000a60:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0000a63:	f6 82 00 93 02 c0 08 	test   BYTE PTR [edx-0x3ffd6d00],0x8
c0000a6a:	75 05                	jne    c0000a71 <simple_strtoul+0x21>
c0000a6c:	80 fa 09             	cmp    dl,0x9
c0000a6f:	75 03                	jne    c0000a74 <simple_strtoul+0x24>
c0000a71:	41                   	inc    ecx
c0000a72:	eb ec                	jmp    c0000a60 <simple_strtoul+0x10>
c0000a74:	80 fa 2d             	cmp    dl,0x2d
c0000a77:	0f 84 1b 01 00 00    	je     c0000b98 <simple_strtoul+0x148>
c0000a7d:	80 fa 2b             	cmp    dl,0x2b
c0000a80:	0f 84 c2 00 00 00    	je     c0000b48 <simple_strtoul+0xf8>
c0000a86:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000a8e:	85 f6                	test   esi,esi
c0000a90:	0f 85 c3 00 00 00    	jne    c0000b59 <simple_strtoul+0x109>
c0000a96:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000a98:	80 fa 30             	cmp    dl,0x30
c0000a9b:	0f 84 47 01 00 00    	je     c0000be8 <simple_strtoul+0x198>
c0000aa1:	be 0a 00 00 00       	mov    esi,0xa
c0000aa6:	84 d2                	test   dl,dl
c0000aa8:	0f 84 6f 01 00 00    	je     c0000c1d <simple_strtoul+0x1cd>
c0000aae:	31 ed                	xor    ebp,ebp
c0000ab0:	31 ff                	xor    edi,edi
c0000ab2:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0000ab9:	eb 2b                	jmp    c0000ae6 <simple_strtoul+0x96>
c0000abb:	90                   	nop
c0000abc:	83 eb 30             	sub    ebx,0x30
c0000abf:	39 f3                	cmp    ebx,esi
c0000ac1:	73 4d                	jae    c0000b10 <simple_strtoul+0xc0>
c0000ac3:	31 d2                	xor    edx,edx
c0000ac5:	89 d8                	mov    eax,ebx
c0000ac7:	f7 d0                	not    eax
c0000ac9:	f7 f6                	div    esi
c0000acb:	39 f8                	cmp    eax,edi
c0000acd:	0f 82 b1 00 00 00    	jb     c0000b84 <simple_strtoul+0x134>
c0000ad3:	0f af fe             	imul   edi,esi
c0000ad6:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0000add:	01 df                	add    edi,ebx
c0000adf:	41                   	inc    ecx
c0000ae0:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000ae2:	84 d2                	test   dl,dl
c0000ae4:	74 2a                	je     c0000b10 <simple_strtoul+0xc0>
c0000ae6:	0f b6 da             	movzx  ebx,dl
c0000ae9:	f6 83 00 93 02 c0 04 	test   BYTE PTR [ebx-0x3ffd6d00],0x4
c0000af0:	75 ca                	jne    c0000abc <simple_strtoul+0x6c>
c0000af2:	0f be d2             	movsx  edx,dl
c0000af5:	52                   	push   edx
c0000af6:	e8 2d ff ff ff       	call   c0000a28 <toupper>
c0000afb:	5b                   	pop    ebx
c0000afc:	0f b6 d0             	movzx  edx,al
c0000aff:	f6 82 00 93 02 c0 01 	test   BYTE PTR [edx-0x3ffd6d00],0x1
c0000b06:	74 08                	je     c0000b10 <simple_strtoul+0xc0>
c0000b08:	8d 58 c9             	lea    ebx,[eax-0x37]
c0000b0b:	39 f3                	cmp    ebx,esi
c0000b0d:	72 b4                	jb     c0000ac3 <simple_strtoul+0x73>
c0000b0f:	90                   	nop
c0000b10:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b14:	85 c0                	test   eax,eax
c0000b16:	74 14                	je     c0000b2c <simple_strtoul+0xdc>
c0000b18:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0000b1b:	09 f8                	or     eax,edi
c0000b1d:	75 71                	jne    c0000b90 <simple_strtoul+0x140>
c0000b1f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b23:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000b27:	31 ff                	xor    edi,edi
c0000b29:	89 30                	mov    DWORD PTR [eax],esi
c0000b2b:	90                   	nop
c0000b2c:	4d                   	dec    ebp
c0000b2d:	75 05                	jne    c0000b34 <simple_strtoul+0xe4>
c0000b2f:	bf ff ff ff ff       	mov    edi,0xffffffff
c0000b34:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000b39:	75 02                	jne    c0000b3d <simple_strtoul+0xed>
c0000b3b:	f7 df                	neg    edi
c0000b3d:	83 c4 08             	add    esp,0x8
c0000b40:	89 f8                	mov    eax,edi
c0000b42:	5b                   	pop    ebx
c0000b43:	5e                   	pop    esi
c0000b44:	5f                   	pop    edi
c0000b45:	5d                   	pop    ebp
c0000b46:	c3                   	ret    
c0000b47:	90                   	nop
c0000b48:	41                   	inc    ecx
c0000b49:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000b51:	85 f6                	test   esi,esi
c0000b53:	0f 84 3d ff ff ff    	je     c0000a96 <simple_strtoul+0x46>
c0000b59:	8d 46 fe             	lea    eax,[esi-0x2]
c0000b5c:	83 f8 22             	cmp    eax,0x22
c0000b5f:	77 6a                	ja     c0000bcb <simple_strtoul+0x17b>
c0000b61:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000b63:	83 fe 08             	cmp    esi,0x8
c0000b66:	0f 84 a2 00 00 00    	je     c0000c0e <simple_strtoul+0x1be>
c0000b6c:	83 fe 10             	cmp    esi,0x10
c0000b6f:	0f 85 31 ff ff ff    	jne    c0000aa6 <simple_strtoul+0x56>
c0000b75:	80 fa 30             	cmp    dl,0x30
c0000b78:	74 2c                	je     c0000ba6 <simple_strtoul+0x156>
c0000b7a:	be 10 00 00 00       	mov    esi,0x10
c0000b7f:	e9 22 ff ff ff       	jmp    c0000aa6 <simple_strtoul+0x56>
c0000b84:	bd 01 00 00 00       	mov    ebp,0x1
c0000b89:	31 ff                	xor    edi,edi
c0000b8b:	e9 4f ff ff ff       	jmp    c0000adf <simple_strtoul+0x8f>
c0000b90:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b94:	89 08                	mov    DWORD PTR [eax],ecx
c0000b96:	eb 94                	jmp    c0000b2c <simple_strtoul+0xdc>
c0000b98:	41                   	inc    ecx
c0000b99:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000ba1:	e9 e8 fe ff ff       	jmp    c0000a8e <simple_strtoul+0x3e>
c0000ba6:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000baa:	88 04 24             	mov    BYTE PTR [esp],al
c0000bad:	50                   	push   eax
c0000bae:	e8 89 fe ff ff       	call   c0000a3c <tolower>
c0000bb3:	5e                   	pop    esi
c0000bb4:	83 f8 78             	cmp    eax,0x78
c0000bb7:	0f 84 84 00 00 00    	je     c0000c41 <simple_strtoul+0x1f1>
c0000bbd:	41                   	inc    ecx
c0000bbe:	be 10 00 00 00       	mov    esi,0x10
c0000bc3:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000bc6:	e9 db fe ff ff       	jmp    c0000aa6 <simple_strtoul+0x56>
c0000bcb:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0000bcf:	85 ff                	test   edi,edi
c0000bd1:	74 5c                	je     c0000c2f <simple_strtoul+0x1df>
c0000bd3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000bd7:	85 c9                	test   ecx,ecx
c0000bd9:	75 4e                	jne    c0000c29 <simple_strtoul+0x1d9>
c0000bdb:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000be1:	31 ff                	xor    edi,edi
c0000be3:	e9 4c ff ff ff       	jmp    c0000b34 <simple_strtoul+0xe4>
c0000be8:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000bec:	88 04 24             	mov    BYTE PTR [esp],al
c0000bef:	50                   	push   eax
c0000bf0:	e8 47 fe ff ff       	call   c0000a3c <tolower>
c0000bf5:	5d                   	pop    ebp
c0000bf6:	83 f8 78             	cmp    eax,0x78
c0000bf9:	74 3b                	je     c0000c36 <simple_strtoul+0x1e6>
c0000bfb:	41                   	inc    ecx
c0000bfc:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000bff:	80 fa 30             	cmp    dl,0x30
c0000c02:	74 13                	je     c0000c17 <simple_strtoul+0x1c7>
c0000c04:	be 08 00 00 00       	mov    esi,0x8
c0000c09:	e9 98 fe ff ff       	jmp    c0000aa6 <simple_strtoul+0x56>
c0000c0e:	80 fa 30             	cmp    dl,0x30
c0000c11:	0f 85 8f fe ff ff    	jne    c0000aa6 <simple_strtoul+0x56>
c0000c17:	8a 51 01             	mov    dl,BYTE PTR [ecx+0x1]
c0000c1a:	41                   	inc    ecx
c0000c1b:	eb e7                	jmp    c0000c04 <simple_strtoul+0x1b4>
c0000c1d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000c21:	85 d2                	test   edx,edx
c0000c23:	74 0a                	je     c0000c2f <simple_strtoul+0x1df>
c0000c25:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000c29:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000c2d:	89 30                	mov    DWORD PTR [eax],esi
c0000c2f:	31 ff                	xor    edi,edi
c0000c31:	e9 fe fe ff ff       	jmp    c0000b34 <simple_strtoul+0xe4>
c0000c36:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000c39:	83 c1 02             	add    ecx,0x2
c0000c3c:	e9 34 ff ff ff       	jmp    c0000b75 <simple_strtoul+0x125>
c0000c41:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000c44:	be 10 00 00 00       	mov    esi,0x10
c0000c49:	83 c1 02             	add    ecx,0x2
c0000c4c:	e9 55 fe ff ff       	jmp    c0000aa6 <simple_strtoul+0x56>

c0000c51 <largebin_index>:
c0000c51:	89 c2                	mov    edx,eax
c0000c53:	c1 ea 08             	shr    edx,0x8
c0000c56:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000c5c:	77 10                	ja     c0000c6e <largebin_index+0x1d>
c0000c5e:	0f bd d2             	bsr    edx,edx
c0000c61:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000c64:	d3 e8                	shr    eax,cl
c0000c66:	83 e0 03             	and    eax,0x3
c0000c69:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000c6d:	c3                   	ret    
c0000c6e:	b8 5f 00 00 00       	mov    eax,0x5f
c0000c73:	c3                   	ret    

c0000c74 <malloc_init_state>:
c0000c74:	53                   	push   ebx
c0000c75:	8d 50 34             	lea    edx,[eax+0x34]
c0000c78:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000c7e:	89 d1                	mov    ecx,edx
c0000c80:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000c83:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000c86:	83 c2 08             	add    edx,0x8
c0000c89:	39 da                	cmp    edx,ebx
c0000c8b:	75 f3                	jne    c0000c80 <malloc_init_state+0xc>
c0000c8d:	8b 10                	mov    edx,DWORD PTR [eax]
c0000c8f:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000c99:	83 e2 03             	and    edx,0x3
c0000c9c:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000ca6:	83 ca 48             	or     edx,0x48
c0000ca9:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000cb3:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000cbd:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000cc4:	89 10                	mov    DWORD PTR [eax],edx
c0000cc6:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000cc9:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000cd3:	5b                   	pop    ebx
c0000cd4:	c3                   	ret    

c0000cd5 <malloc_consolidate>:
c0000cd5:	8b 10                	mov    edx,DWORD PTR [eax]
c0000cd7:	85 d2                	test   edx,edx
c0000cd9:	0f 84 d8 00 00 00    	je     c0000db7 <malloc_consolidate+0xe2>
c0000cdf:	55                   	push   ebp
c0000ce0:	83 e2 fd             	and    edx,0xfffffffd
c0000ce3:	57                   	push   edi
c0000ce4:	89 c5                	mov    ebp,eax
c0000ce6:	56                   	push   esi
c0000ce7:	8d 78 34             	lea    edi,[eax+0x34]
c0000cea:	53                   	push   ebx
c0000ceb:	83 ec 10             	sub    esp,0x10
c0000cee:	89 10                	mov    DWORD PTR [eax],edx
c0000cf0:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000cf4:	c1 ea 03             	shr    edx,0x3
c0000cf7:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000cfb:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000cff:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000d02:	85 d2                	test   edx,edx
c0000d04:	0f 84 98 00 00 00    	je     c0000da2 <malloc_consolidate+0xcd>
c0000d0a:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000d11:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000d14:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000d17:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000d1b:	89 f9                	mov    ecx,edi
c0000d1d:	83 e1 fe             	and    ecx,0xfffffffe
c0000d20:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000d23:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000d26:	83 e3 fc             	and    ebx,0xfffffffc
c0000d29:	83 e7 01             	and    edi,0x1
c0000d2c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000d2f:	75 14                	jne    c0000d45 <malloc_consolidate+0x70>
c0000d31:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000d33:	29 fa                	sub    edx,edi
c0000d35:	01 f9                	add    ecx,edi
c0000d37:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000d3a:	89 fb                	mov    ebx,edi
c0000d3c:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000d3f:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000d42:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000d45:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000d48:	74 40                	je     c0000d8a <malloc_consolidate+0xb5>
c0000d4a:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000d4d:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000d50:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000d54:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000d57:	83 e7 01             	and    edi,0x1
c0000d5a:	75 0e                	jne    c0000d6a <malloc_consolidate+0x95>
c0000d5c:	01 d9                	add    ecx,ebx
c0000d5e:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000d61:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000d64:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000d67:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000d6a:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000d6d:	89 ce                	mov    esi,ecx
c0000d6f:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000d72:	83 ce 01             	or     esi,0x1
c0000d75:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000d78:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000d7b:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000d7e:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000d82:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000d85:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000d88:	eb 0c                	jmp    c0000d96 <malloc_consolidate+0xc1>
c0000d8a:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000d8d:	83 c9 01             	or     ecx,0x1
c0000d90:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d93:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000d96:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000d9a:	85 d2                	test   edx,edx
c0000d9c:	0f 85 6f ff ff ff    	jne    c0000d11 <malloc_consolidate+0x3c>
c0000da2:	83 c5 04             	add    ebp,0x4
c0000da5:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000da9:	0f 85 50 ff ff ff    	jne    c0000cff <malloc_consolidate+0x2a>
c0000daf:	83 c4 10             	add    esp,0x10
c0000db2:	5b                   	pop    ebx
c0000db3:	5e                   	pop    esi
c0000db4:	5f                   	pop    edi
c0000db5:	5d                   	pop    ebp
c0000db6:	c3                   	ret    
c0000db7:	e9 b8 fe ff ff       	jmp    c0000c74 <malloc_init_state>

c0000dbc <dlfree>:
c0000dbc:	57                   	push   edi
c0000dbd:	56                   	push   esi
c0000dbe:	53                   	push   ebx
c0000dbf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000dc3:	85 db                	test   ebx,ebx
c0000dc5:	0f 84 e2 00 00 00    	je     c0000ead <dlfree+0xf1>
c0000dcb:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000dce:	8b 0d e0 e2 02 c0    	mov    ecx,DWORD PTR ds:0xc002e2e0
c0000dd4:	89 f0                	mov    eax,esi
c0000dd6:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000dd9:	83 e0 fc             	and    eax,0xfffffffc
c0000ddc:	39 c1                	cmp    ecx,eax
c0000dde:	72 24                	jb     c0000e04 <dlfree+0x48>
c0000de0:	83 c9 03             	or     ecx,0x3
c0000de3:	c1 e8 03             	shr    eax,0x3
c0000de6:	89 0d e0 e2 02 c0    	mov    DWORD PTR ds:0xc002e2e0,ecx
c0000dec:	83 e8 02             	sub    eax,0x2
c0000def:	8b 0c 85 e4 e2 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd1d1c]
c0000df6:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000df8:	89 14 85 e4 e2 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1d1c],edx
c0000dff:	e9 a9 00 00 00       	jmp    c0000ead <dlfree+0xf1>
c0000e04:	83 e6 02             	and    esi,0x2
c0000e07:	0f 85 a0 00 00 00    	jne    c0000ead <dlfree+0xf1>
c0000e0d:	83 c9 01             	or     ecx,0x1
c0000e10:	8d 34 02             	lea    esi,[edx+eax*1]
c0000e13:	89 0d e0 e2 02 c0    	mov    DWORD PTR ds:0xc002e2e0,ecx
c0000e19:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000e1c:	83 e1 fc             	and    ecx,0xfffffffc
c0000e1f:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000e23:	75 13                	jne    c0000e38 <dlfree+0x7c>
c0000e25:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000e28:	29 da                	sub    edx,ebx
c0000e2a:	01 d8                	add    eax,ebx
c0000e2c:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000e2f:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000e32:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000e35:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e38:	39 35 0c e3 02 c0    	cmp    DWORD PTR ds:0xc002e30c,esi
c0000e3e:	74 40                	je     c0000e80 <dlfree+0xc4>
c0000e40:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000e44:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000e47:	80 e3 01             	and    bl,0x1
c0000e4a:	75 0e                	jne    c0000e5a <dlfree+0x9e>
c0000e4c:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000e4f:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000e52:	01 c8                	add    eax,ecx
c0000e54:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000e57:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e5a:	8b 0d 1c e3 02 c0    	mov    ecx,DWORD PTR ds:0xc002e31c
c0000e60:	c7 42 0c 14 e3 02 c0 	mov    DWORD PTR [edx+0xc],0xc002e314
c0000e67:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000e6a:	89 15 1c e3 02 c0    	mov    DWORD PTR ds:0xc002e31c,edx
c0000e70:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000e73:	89 c1                	mov    ecx,eax
c0000e75:	83 c9 01             	or     ecx,0x1
c0000e78:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e7b:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000e7e:	eb 10                	jmp    c0000e90 <dlfree+0xd4>
c0000e80:	01 c8                	add    eax,ecx
c0000e82:	89 c1                	mov    ecx,eax
c0000e84:	83 c9 01             	or     ecx,0x1
c0000e87:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e8a:	89 15 0c e3 02 c0    	mov    DWORD PTR ds:0xc002e30c,edx
c0000e90:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000e95:	76 16                	jbe    c0000ead <dlfree+0xf1>
c0000e97:	f6 05 e0 e2 02 c0 02 	test   BYTE PTR ds:0xc002e2e0,0x2
c0000e9e:	74 0d                	je     c0000ead <dlfree+0xf1>
c0000ea0:	5b                   	pop    ebx
c0000ea1:	b8 e0 e2 02 c0       	mov    eax,0xc002e2e0
c0000ea6:	5e                   	pop    esi
c0000ea7:	5f                   	pop    edi
c0000ea8:	e9 28 fe ff ff       	jmp    c0000cd5 <malloc_consolidate>
c0000ead:	5b                   	pop    ebx
c0000eae:	5e                   	pop    esi
c0000eaf:	5f                   	pop    edi
c0000eb0:	c3                   	ret    

c0000eb1 <sYSMALLOc>:
c0000eb1:	55                   	push   ebp
c0000eb2:	57                   	push   edi
c0000eb3:	56                   	push   esi
c0000eb4:	53                   	push   ebx
c0000eb5:	89 d3                	mov    ebx,edx
c0000eb7:	83 ec 2c             	sub    esp,0x2c
c0000eba:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000ebe:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000ec4:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000ec7:	8d 42 ff             	lea    eax,[edx-0x1]
c0000eca:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000ece:	74 1f                	je     c0000eef <sYSMALLOc+0x3e>
c0000ed0:	89 d8                	mov    eax,ebx
c0000ed2:	e8 fe fd ff ff       	call   c0000cd5 <malloc_consolidate>
c0000ed7:	83 ec 0c             	sub    esp,0xc
c0000eda:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000ede:	83 e8 07             	sub    eax,0x7
c0000ee1:	50                   	push   eax
c0000ee2:	e8 30 02 00 00       	call   c0001117 <dlmalloc>
c0000ee7:	83 c4 10             	add    esp,0x10
c0000eea:	e9 20 02 00 00       	jmp    c000110f <sYSMALLOc+0x25e>
c0000eef:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000ef2:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000ef8:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000efb:	83 e0 fc             	and    eax,0xfffffffc
c0000efe:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000f02:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000f06:	83 c0 10             	add    eax,0x10
c0000f09:	01 c1                	add    ecx,eax
c0000f0b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000f0f:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000f16:	74 04                	je     c0000f1c <sYSMALLOc+0x6b>
c0000f18:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000f1c:	f7 da                	neg    edx
c0000f1e:	03 4c 24 10          	add    ecx,DWORD PTR [esp+0x10]
c0000f22:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0000f26:	21 d1                	and    ecx,edx
c0000f28:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000f2c:	7f 07                	jg     c0000f35 <sYSMALLOc+0x84>
c0000f2e:	31 c0                	xor    eax,eax
c0000f30:	e9 da 01 00 00       	jmp    c000110f <sYSMALLOc+0x25e>
c0000f35:	83 ec 0c             	sub    esp,0xc
c0000f38:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000f3c:	e8 fa e7 00 00       	call   c000f73b <sbrk>
c0000f41:	83 c4 10             	add    esp,0x10
c0000f44:	89 c6                	mov    esi,eax
c0000f46:	83 f8 ff             	cmp    eax,0xffffffff
c0000f49:	74 e3                	je     c0000f2e <sYSMALLOc+0x7d>
c0000f4b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000f4f:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0000f53:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000f56:	03 ab 68 03 00 00    	add    ebp,DWORD PTR [ebx+0x368]
c0000f5c:	39 f1                	cmp    ecx,esi
c0000f5e:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0000f64:	75 13                	jne    c0000f79 <sYSMALLOc+0xc8>
c0000f66:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000f6a:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000f6e:	83 c8 01             	or     eax,0x1
c0000f71:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000f74:	e9 3e 01 00 00       	jmp    c00010b7 <sYSMALLOc+0x206>
c0000f79:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000f7f:	88 d0                	mov    al,dl
c0000f81:	83 e0 01             	and    eax,0x1
c0000f84:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000f89:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0000f8d:	0f 95 c0             	setne  al
c0000f90:	22 44 24 1f          	and    al,BYTE PTR [esp+0x1f]
c0000f94:	39 f1                	cmp    ecx,esi
c0000f96:	76 12                	jbe    c0000faa <sYSMALLOc+0xf9>
c0000f98:	84 c0                	test   al,al
c0000f9a:	74 0e                	je     c0000faa <sYSMALLOc+0xf9>
c0000f9c:	83 e2 fe             	and    edx,0xfffffffe
c0000f9f:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000fa5:	e9 83 00 00 00       	jmp    c000102d <sYSMALLOc+0x17c>
c0000faa:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0000faf:	74 7c                	je     c000102d <sYSMALLOc+0x17c>
c0000fb1:	84 c0                	test   al,al
c0000fb3:	74 0c                	je     c0000fc1 <sYSMALLOc+0x110>
c0000fb5:	89 f0                	mov    eax,esi
c0000fb7:	29 c8                	sub    eax,ecx
c0000fb9:	01 e8                	add    eax,ebp
c0000fbb:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000fc1:	89 f2                	mov    edx,esi
c0000fc3:	83 e2 07             	and    edx,0x7
c0000fc6:	74 0c                	je     c0000fd4 <sYSMALLOc+0x123>
c0000fc8:	b8 08 00 00 00       	mov    eax,0x8
c0000fcd:	29 d0                	sub    eax,edx
c0000fcf:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000fd2:	eb 04                	jmp    c0000fd8 <sYSMALLOc+0x127>
c0000fd4:	89 f5                	mov    ebp,esi
c0000fd6:	31 c0                	xor    eax,eax
c0000fd8:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000fdc:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000fe0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000fe4:	01 c1                	add    ecx,eax
c0000fe6:	83 ec 0c             	sub    esp,0xc
c0000fe9:	01 f1                	add    ecx,esi
c0000feb:	01 ca                	add    edx,ecx
c0000fed:	29 c8                	sub    eax,ecx
c0000fef:	23 54 24 20          	and    edx,DWORD PTR [esp+0x20]
c0000ff3:	01 c2                	add    edx,eax
c0000ff5:	52                   	push   edx
c0000ff6:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0000ffa:	e8 3c e7 00 00       	call   c000f73b <sbrk>
c0000fff:	83 c4 10             	add    esp,0x10
c0001002:	83 f8 ff             	cmp    eax,0xffffffff
c0001005:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0001009:	75 0f                	jne    c000101a <sYSMALLOc+0x169>
c000100b:	83 ec 0c             	sub    esp,0xc
c000100e:	6a 00                	push   0x0
c0001010:	e8 26 e7 00 00       	call   c000f73b <sbrk>
c0001015:	83 c4 10             	add    esp,0x10
c0001018:	eb 30                	jmp    c000104a <sYSMALLOc+0x199>
c000101a:	39 c6                	cmp    esi,eax
c000101c:	76 33                	jbe    c0001051 <sYSMALLOc+0x1a0>
c000101e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0001022:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0001029:	01 f0                	add    eax,esi
c000102b:	eb 1d                	jmp    c000104a <sYSMALLOc+0x199>
c000102d:	83 ec 0c             	sub    esp,0xc
c0001030:	89 f5                	mov    ebp,esi
c0001032:	6a 00                	push   0x0
c0001034:	e8 02 e7 00 00       	call   c000f73b <sbrk>
c0001039:	89 c2                	mov    edx,eax
c000103b:	29 f2                	sub    edx,esi
c000103d:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0001041:	83 c4 10             	add    esp,0x10
c0001044:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c000104a:	31 d2                	xor    edx,edx
c000104c:	83 f8 ff             	cmp    eax,0xffffffff
c000104f:	74 66                	je     c00010b7 <sYSMALLOc+0x206>
c0001051:	29 e8                	sub    eax,ebp
c0001053:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c0001056:	01 d0                	add    eax,edx
c0001058:	83 c8 01             	or     eax,0x1
c000105b:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c000105e:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0001064:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0001069:	74 4c                	je     c00010b7 <sYSMALLOc+0x206>
c000106b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000106f:	83 e8 0c             	sub    eax,0xc
c0001072:	83 e0 f8             	and    eax,0xfffffff8
c0001075:	89 c2                	mov    edx,eax
c0001077:	83 ca 01             	or     edx,0x1
c000107a:	83 f8 0f             	cmp    eax,0xf
c000107d:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0001080:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0001088:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0001090:	76 25                	jbe    c00010b7 <sYSMALLOc+0x206>
c0001092:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0001098:	83 ec 0c             	sub    esp,0xc
c000109b:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c00010a5:	83 c7 08             	add    edi,0x8
c00010a8:	57                   	push   edi
c00010a9:	e8 0e fd ff ff       	call   c0000dbc <dlfree>
c00010ae:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c00010b4:	83 c4 10             	add    esp,0x10
c00010b7:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c00010bd:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c00010c3:	73 06                	jae    c00010cb <sYSMALLOc+0x21a>
c00010c5:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c00010cb:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c00010d1:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c00010d7:	73 06                	jae    c00010df <sYSMALLOc+0x22e>
c00010d9:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c00010df:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00010e2:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00010e5:	83 e2 fc             	and    edx,0xfffffffc
c00010e8:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c00010ec:	0f 82 3c fe ff ff    	jb     c0000f2e <sYSMALLOc+0x7d>
c00010f2:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00010f6:	8d 0c 38             	lea    ecx,[eax+edi*1]
c00010f9:	29 fa                	sub    edx,edi
c00010fb:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c00010fe:	83 ca 01             	or     edx,0x1
c0001101:	89 fb                	mov    ebx,edi
c0001103:	83 c0 08             	add    eax,0x8
c0001106:	83 cb 01             	or     ebx,0x1
c0001109:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c000110c:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000110f:	83 c4 2c             	add    esp,0x2c
c0001112:	5b                   	pop    ebx
c0001113:	5e                   	pop    esi
c0001114:	5f                   	pop    edi
c0001115:	5d                   	pop    ebp
c0001116:	c3                   	ret    

c0001117 <dlmalloc>:
c0001117:	55                   	push   ebp
c0001118:	57                   	push   edi
c0001119:	56                   	push   esi
c000111a:	53                   	push   ebx
c000111b:	83 ec 1c             	sub    esp,0x1c
c000111e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001122:	83 f8 df             	cmp    eax,0xffffffdf
c0001125:	0f 87 70 03 00 00    	ja     c000149b <dlmalloc+0x384>
c000112b:	83 c0 0b             	add    eax,0xb
c000112e:	be 10 00 00 00       	mov    esi,0x10
c0001133:	83 f8 0f             	cmp    eax,0xf
c0001136:	76 05                	jbe    c000113d <dlmalloc+0x26>
c0001138:	83 e0 f8             	and    eax,0xfffffff8
c000113b:	89 c6                	mov    esi,eax
c000113d:	8b 3d e0 e2 02 c0    	mov    edi,DWORD PTR ds:0xc002e2e0
c0001143:	f7 c7 01 00 00 00    	test   edi,0x1
c0001149:	75 17                	jne    c0001162 <dlmalloc+0x4b>
c000114b:	85 ff                	test   edi,edi
c000114d:	0f 85 05 03 00 00    	jne    c0001458 <dlmalloc+0x341>
c0001153:	b8 e0 e2 02 c0       	mov    eax,0xc002e2e0
c0001158:	e8 78 fb ff ff       	call   c0000cd5 <malloc_consolidate>
c000115d:	e9 f6 02 00 00       	jmp    c0001458 <dlmalloc+0x341>
c0001162:	39 f7                	cmp    edi,esi
c0001164:	72 1f                	jb     c0001185 <dlmalloc+0x6e>
c0001166:	89 f2                	mov    edx,esi
c0001168:	c1 ea 03             	shr    edx,0x3
c000116b:	83 ea 02             	sub    edx,0x2
c000116e:	8b 04 95 e4 e2 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd1d1c]
c0001175:	85 c0                	test   eax,eax
c0001177:	74 0c                	je     c0001185 <dlmalloc+0x6e>
c0001179:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c000117c:	89 0c 95 e4 e2 02 c0 	mov    DWORD PTR [edx*4-0x3ffd1d1c],ecx
c0001183:	eb 30                	jmp    c00011b5 <dlmalloc+0x9e>
c0001185:	89 f0                	mov    eax,esi
c0001187:	81 fe ff 00 00 00    	cmp    esi,0xff
c000118d:	77 2e                	ja     c00011bd <dlmalloc+0xa6>
c000118f:	c1 e8 03             	shr    eax,0x3
c0001192:	8d 14 c5 14 e3 02 c0 	lea    edx,[eax*8-0x3ffd1cec]
c0001199:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000119d:	8d 5a f8             	lea    ebx,[edx-0x8]
c00011a0:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c00011a3:	39 c3                	cmp    ebx,eax
c00011a5:	74 2e                	je     c00011d5 <dlmalloc+0xbe>
c00011a7:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c00011aa:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c00011af:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c00011b2:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c00011b5:	83 c0 08             	add    eax,0x8
c00011b8:	e9 e0 02 00 00       	jmp    c000149d <dlmalloc+0x386>
c00011bd:	e8 8f fa ff ff       	call   c0000c51 <largebin_index>
c00011c2:	83 e7 02             	and    edi,0x2
c00011c5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00011c9:	74 0a                	je     c00011d5 <dlmalloc+0xbe>
c00011cb:	b8 e0 e2 02 c0       	mov    eax,0xc002e2e0
c00011d0:	e8 00 fb ff ff       	call   c0000cd5 <malloc_consolidate>
c00011d5:	8d 46 10             	lea    eax,[esi+0x10]
c00011d8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00011dc:	8b 1d 20 e3 02 c0    	mov    ebx,DWORD PTR ds:0xc002e320
c00011e2:	81 fb 14 e3 02 c0    	cmp    ebx,0xc002e314
c00011e8:	0f 84 13 01 00 00    	je     c0001301 <dlmalloc+0x1ea>
c00011ee:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00011f1:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00011f4:	83 e7 fc             	and    edi,0xfffffffc
c00011f7:	81 fe ff 00 00 00    	cmp    esi,0xff
c00011fd:	77 4c                	ja     c000124b <dlmalloc+0x134>
c00011ff:	3d 14 e3 02 c0       	cmp    eax,0xc002e314
c0001204:	75 45                	jne    c000124b <dlmalloc+0x134>
c0001206:	39 1d 10 e3 02 c0    	cmp    DWORD PTR ds:0xc002e310,ebx
c000120c:	75 3d                	jne    c000124b <dlmalloc+0x134>
c000120e:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c0001212:	73 37                	jae    c000124b <dlmalloc+0x134>
c0001214:	8d 04 33             	lea    eax,[ebx+esi*1]
c0001217:	89 fa                	mov    edx,edi
c0001219:	a3 1c e3 02 c0       	mov    ds:0xc002e31c,eax
c000121e:	a3 20 e3 02 c0       	mov    ds:0xc002e320,eax
c0001223:	a3 10 e3 02 c0       	mov    ds:0xc002e310,eax
c0001228:	29 f2                	sub    edx,esi
c000122a:	c7 40 08 14 e3 02 c0 	mov    DWORD PTR [eax+0x8],0xc002e314
c0001231:	c7 40 0c 14 e3 02 c0 	mov    DWORD PTR [eax+0xc],0xc002e314
c0001238:	83 ce 01             	or     esi,0x1
c000123b:	89 d1                	mov    ecx,edx
c000123d:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c0001240:	83 c9 01             	or     ecx,0x1
c0001243:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001246:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0001249:	eb 15                	jmp    c0001260 <dlmalloc+0x149>
c000124b:	a3 20 e3 02 c0       	mov    ds:0xc002e320,eax
c0001250:	39 fe                	cmp    esi,edi
c0001252:	c7 40 08 14 e3 02 c0 	mov    DWORD PTR [eax+0x8],0xc002e314
c0001259:	75 0d                	jne    c0001268 <dlmalloc+0x151>
c000125b:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c0001260:	8d 43 08             	lea    eax,[ebx+0x8]
c0001263:	e9 35 02 00 00       	jmp    c000149d <dlmalloc+0x386>
c0001268:	89 f8                	mov    eax,edi
c000126a:	81 ff ff 00 00 00    	cmp    edi,0xff
c0001270:	77 19                	ja     c000128b <dlmalloc+0x174>
c0001272:	c1 e8 03             	shr    eax,0x3
c0001275:	8d 14 00             	lea    edx,[eax+eax*1]
c0001278:	83 c2 0d             	add    edx,0xd
c000127b:	8d 2c 95 d8 e2 02 c0 	lea    ebp,[edx*4-0x3ffd1d28]
c0001282:	8b 14 95 e0 e2 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1d20]
c0001289:	eb 46                	jmp    c00012d1 <dlmalloc+0x1ba>
c000128b:	e8 c1 f9 ff ff       	call   c0000c51 <largebin_index>
c0001290:	8d 14 00             	lea    edx,[eax+eax*1]
c0001293:	83 c2 0d             	add    edx,0xd
c0001296:	8d 0c 95 e0 e2 02 c0 	lea    ecx,[edx*4-0x3ffd1d20]
c000129d:	8b 14 95 e0 e2 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1d20]
c00012a4:	8d 69 f8             	lea    ebp,[ecx-0x8]
c00012a7:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c00012ab:	89 d5                	mov    ebp,edx
c00012ad:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c00012b1:	74 1e                	je     c00012d1 <dlmalloc+0x1ba>
c00012b3:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c00012b6:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c00012b9:	77 12                	ja     c00012cd <dlmalloc+0x1b6>
c00012bb:	83 cf 01             	or     edi,0x1
c00012be:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c00012c1:	76 05                	jbe    c00012c8 <dlmalloc+0x1b1>
c00012c3:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00012c6:	eb f6                	jmp    c00012be <dlmalloc+0x1a7>
c00012c8:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00012cb:	eb 04                	jmp    c00012d1 <dlmalloc+0x1ba>
c00012cd:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00012d1:	89 c7                	mov    edi,eax
c00012d3:	88 c1                	mov    cl,al
c00012d5:	c1 ff 05             	sar    edi,0x5
c00012d8:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00012dc:	bf 01 00 00 00       	mov    edi,0x1
c00012e1:	d3 e7                	shl    edi,cl
c00012e3:	89 f8                	mov    eax,edi
c00012e5:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00012e9:	09 04 bd 14 e6 02 c0 	or     DWORD PTR [edi*4-0x3ffd19ec],eax
c00012f0:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00012f3:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00012f6:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c00012f9:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c00012fc:	e9 db fe ff ff       	jmp    c00011dc <dlmalloc+0xc5>
c0001301:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001307:	76 78                	jbe    c0001381 <dlmalloc+0x26a>
c0001309:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000130d:	8d 04 c5 14 e3 02 c0 	lea    eax,[eax*8-0x3ffd1cec]
c0001314:	8d 48 f8             	lea    ecx,[eax-0x8]
c0001317:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000131a:	39 ca                	cmp    edx,ecx
c000131c:	74 63                	je     c0001381 <dlmalloc+0x26a>
c000131e:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c0001321:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001324:	83 e3 fc             	and    ebx,0xfffffffc
c0001327:	39 de                	cmp    esi,ebx
c0001329:	77 52                	ja     c000137d <dlmalloc+0x266>
c000132b:	89 df                	mov    edi,ebx
c000132d:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0001330:	29 f7                	sub    edi,esi
c0001332:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001335:	01 d3                	add    ebx,edx
c0001337:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c000133a:	83 ff 0f             	cmp    edi,0xf
c000133d:	8d 42 08             	lea    eax,[edx+0x8]
c0001340:	77 09                	ja     c000134b <dlmalloc+0x234>
c0001342:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c0001346:	e9 52 01 00 00       	jmp    c000149d <dlmalloc+0x386>
c000134b:	8d 0c 32             	lea    ecx,[edx+esi*1]
c000134e:	83 ce 01             	or     esi,0x1
c0001351:	89 0d 1c e3 02 c0    	mov    DWORD PTR ds:0xc002e31c,ecx
c0001357:	89 0d 20 e3 02 c0    	mov    DWORD PTR ds:0xc002e320,ecx
c000135d:	c7 41 08 14 e3 02 c0 	mov    DWORD PTR [ecx+0x8],0xc002e314
c0001364:	c7 41 0c 14 e3 02 c0 	mov    DWORD PTR [ecx+0xc],0xc002e314
c000136b:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c000136e:	89 fa                	mov    edx,edi
c0001370:	83 ca 01             	or     edx,0x1
c0001373:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001376:	89 3b                	mov    DWORD PTR [ebx],edi
c0001378:	e9 20 01 00 00       	jmp    c000149d <dlmalloc+0x386>
c000137d:	89 c2                	mov    edx,eax
c000137f:	eb 99                	jmp    c000131a <dlmalloc+0x203>
c0001381:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001385:	b8 01 00 00 00       	mov    eax,0x1
c000138a:	41                   	inc    ecx
c000138b:	89 cb                	mov    ebx,ecx
c000138d:	8d 14 cd 0c e3 02 c0 	lea    edx,[ecx*8-0x3ffd1cf4]
c0001394:	c1 eb 05             	shr    ebx,0x5
c0001397:	d3 e0                	shl    eax,cl
c0001399:	8b 3c 9d 14 e6 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd19ec]
c00013a0:	39 f8                	cmp    eax,edi
c00013a2:	77 04                	ja     c00013a8 <dlmalloc+0x291>
c00013a4:	85 c0                	test   eax,eax
c00013a6:	75 26                	jne    c00013ce <dlmalloc+0x2b7>
c00013a8:	43                   	inc    ebx
c00013a9:	83 fb 02             	cmp    ebx,0x2
c00013ac:	0f 87 a6 00 00 00    	ja     c0001458 <dlmalloc+0x341>
c00013b2:	8b 3c 9d 14 e6 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd19ec]
c00013b9:	85 ff                	test   edi,edi
c00013bb:	74 eb                	je     c00013a8 <dlmalloc+0x291>
c00013bd:	89 d8                	mov    eax,ebx
c00013bf:	c1 e0 06             	shl    eax,0x6
c00013c2:	8d 14 85 0c e3 02 c0 	lea    edx,[eax*4-0x3ffd1cf4]
c00013c9:	b8 01 00 00 00       	mov    eax,0x1
c00013ce:	85 f8                	test   eax,edi
c00013d0:	75 07                	jne    c00013d9 <dlmalloc+0x2c2>
c00013d2:	83 c2 08             	add    edx,0x8
c00013d5:	01 c0                	add    eax,eax
c00013d7:	eb f5                	jmp    c00013ce <dlmalloc+0x2b7>
c00013d9:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00013dc:	39 ca                	cmp    edx,ecx
c00013de:	75 14                	jne    c00013f4 <dlmalloc+0x2dd>
c00013e0:	89 c1                	mov    ecx,eax
c00013e2:	83 c2 08             	add    edx,0x8
c00013e5:	f7 d1                	not    ecx
c00013e7:	01 c0                	add    eax,eax
c00013e9:	21 cf                	and    edi,ecx
c00013eb:	89 3c 9d 14 e6 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd19ec],edi
c00013f2:	eb ac                	jmp    c00013a0 <dlmalloc+0x289>
c00013f4:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00013f7:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c00013fa:	83 e0 fc             	and    eax,0xfffffffc
c00013fd:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c0001400:	89 c3                	mov    ebx,eax
c0001402:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c0001405:	29 f3                	sub    ebx,esi
c0001407:	8d 14 01             	lea    edx,[ecx+eax*1]
c000140a:	83 fb 0f             	cmp    ebx,0xf
c000140d:	8d 41 08             	lea    eax,[ecx+0x8]
c0001410:	77 09                	ja     c000141b <dlmalloc+0x304>
c0001412:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c0001416:	e9 82 00 00 00       	jmp    c000149d <dlmalloc+0x386>
c000141b:	8d 3c 31             	lea    edi,[ecx+esi*1]
c000141e:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001424:	89 3d 1c e3 02 c0    	mov    DWORD PTR ds:0xc002e31c,edi
c000142a:	89 3d 20 e3 02 c0    	mov    DWORD PTR ds:0xc002e320,edi
c0001430:	c7 47 08 14 e3 02 c0 	mov    DWORD PTR [edi+0x8],0xc002e314
c0001437:	c7 47 0c 14 e3 02 c0 	mov    DWORD PTR [edi+0xc],0xc002e314
c000143e:	77 06                	ja     c0001446 <dlmalloc+0x32f>
c0001440:	89 3d 10 e3 02 c0    	mov    DWORD PTR ds:0xc002e310,edi
c0001446:	83 ce 01             	or     esi,0x1
c0001449:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c000144c:	89 d9                	mov    ecx,ebx
c000144e:	83 c9 01             	or     ecx,0x1
c0001451:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c0001454:	89 1a                	mov    DWORD PTR [edx],ebx
c0001456:	eb 45                	jmp    c000149d <dlmalloc+0x386>
c0001458:	a1 0c e3 02 c0       	mov    eax,ds:0xc002e30c
c000145d:	8d 4e 10             	lea    ecx,[esi+0x10]
c0001460:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001463:	83 e2 fc             	and    edx,0xfffffffc
c0001466:	39 d1                	cmp    ecx,edx
c0001468:	77 1e                	ja     c0001488 <dlmalloc+0x371>
c000146a:	8d 0c 30             	lea    ecx,[eax+esi*1]
c000146d:	89 f3                	mov    ebx,esi
c000146f:	89 0d 0c e3 02 c0    	mov    DWORD PTR ds:0xc002e30c,ecx
c0001475:	83 cb 01             	or     ebx,0x1
c0001478:	29 f2                	sub    edx,esi
c000147a:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000147d:	83 ca 01             	or     edx,0x1
c0001480:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001483:	e9 2d fd ff ff       	jmp    c00011b5 <dlmalloc+0x9e>
c0001488:	83 c4 1c             	add    esp,0x1c
c000148b:	89 f0                	mov    eax,esi
c000148d:	5b                   	pop    ebx
c000148e:	ba e0 e2 02 c0       	mov    edx,0xc002e2e0
c0001493:	5e                   	pop    esi
c0001494:	5f                   	pop    edi
c0001495:	5d                   	pop    ebp
c0001496:	e9 16 fa ff ff       	jmp    c0000eb1 <sYSMALLOc>
c000149b:	31 c0                	xor    eax,eax
c000149d:	83 c4 1c             	add    esp,0x1c
c00014a0:	5b                   	pop    ebx
c00014a1:	5e                   	pop    esi
c00014a2:	5f                   	pop    edi
c00014a3:	5d                   	pop    ebp
c00014a4:	c3                   	ret    

c00014a5 <iALLOc>:
c00014a5:	55                   	push   ebp
c00014a6:	89 c5                	mov    ebp,eax
c00014a8:	57                   	push   edi
c00014a9:	56                   	push   esi
c00014aa:	53                   	push   ebx
c00014ab:	83 ec 2c             	sub    esp,0x2c
c00014ae:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00014b2:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00014b6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00014ba:	83 3d e0 e2 02 c0 00 	cmp    DWORD PTR ds:0xc002e2e0,0x0
c00014c1:	75 12                	jne    c00014d5 <iALLOc+0x30>
c00014c3:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00014c7:	b8 e0 e2 02 c0       	mov    eax,0xc002e2e0
c00014cc:	e8 04 f8 ff ff       	call   c0000cd5 <malloc_consolidate>
c00014d1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00014d5:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00014da:	74 12                	je     c00014ee <iALLOc+0x49>
c00014dc:	85 ed                	test   ebp,ebp
c00014de:	0f 84 64 01 00 00    	je     c0001648 <iALLOc+0x1a3>
c00014e4:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00014ec:	eb 33                	jmp    c0001521 <iALLOc+0x7c>
c00014ee:	85 ed                	test   ebp,ebp
c00014f0:	75 14                	jne    c0001506 <iALLOc+0x61>
c00014f2:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c00014fa:	83 c4 2c             	add    esp,0x2c
c00014fd:	5b                   	pop    ebx
c00014fe:	5e                   	pop    esi
c00014ff:	5f                   	pop    edi
c0001500:	5d                   	pop    ebp
c0001501:	e9 11 fc ff ff       	jmp    c0001117 <dlmalloc>
c0001506:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c000150d:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c0001515:	83 f8 0f             	cmp    eax,0xf
c0001518:	76 07                	jbe    c0001521 <iALLOc+0x7c>
c000151a:	83 e0 f8             	and    eax,0xfffffff8
c000151d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0001521:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c0001526:	75 09                	jne    c0001531 <iALLOc+0x8c>
c0001528:	89 d0                	mov    eax,edx
c000152a:	8d 3c aa             	lea    edi,[edx+ebp*4]
c000152d:	31 f6                	xor    esi,esi
c000152f:	eb 3b                	jmp    c000156c <iALLOc+0xc7>
c0001531:	8b 02                	mov    eax,DWORD PTR [edx]
c0001533:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c000153b:	83 c0 0b             	add    eax,0xb
c000153e:	83 f8 0f             	cmp    eax,0xf
c0001541:	76 07                	jbe    c000154a <iALLOc+0xa5>
c0001543:	83 e0 f8             	and    eax,0xfffffff8
c0001546:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000154a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000154e:	0f af f5             	imul   esi,ebp
c0001551:	eb 25                	jmp    c0001578 <iALLOc+0xd3>
c0001553:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001555:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001558:	bb 10 00 00 00       	mov    ebx,0x10
c000155d:	83 f9 0f             	cmp    ecx,0xf
c0001560:	76 05                	jbe    c0001567 <iALLOc+0xc2>
c0001562:	83 e1 f8             	and    ecx,0xfffffff8
c0001565:	89 cb                	mov    ebx,ecx
c0001567:	01 de                	add    esi,ebx
c0001569:	83 c0 04             	add    eax,0x4
c000156c:	39 c7                	cmp    edi,eax
c000156e:	75 e3                	jne    c0001553 <iALLOc+0xae>
c0001570:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0001578:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000157c:	8b 1d 34 e6 02 c0    	mov    ebx,DWORD PTR ds:0xc002e634
c0001582:	83 ec 0c             	sub    esp,0xc
c0001585:	c7 05 34 e6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e634,0x0
c000158f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001593:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c0001597:	50                   	push   eax
c0001598:	e8 7a fb ff ff       	call   c0001117 <dlmalloc>
c000159d:	83 c4 10             	add    esp,0x10
c00015a0:	89 1d 34 e6 02 c0    	mov    DWORD PTR ds:0xc002e634,ebx
c00015a6:	85 c0                	test   eax,eax
c00015a8:	0f 84 92 00 00 00    	je     c0001640 <iALLOc+0x19b>
c00015ae:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c00015b1:	8d 78 f8             	lea    edi,[eax-0x8]
c00015b4:	83 e3 fc             	and    ebx,0xfffffffc
c00015b7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00015bb:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c00015c0:	74 1e                	je     c00015e0 <iALLOc+0x13b>
c00015c2:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00015c6:	89 d9                	mov    ecx,ebx
c00015c8:	52                   	push   edx
c00015c9:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00015cd:	83 e9 04             	sub    ecx,0x4
c00015d0:	51                   	push   ecx
c00015d1:	6a 00                	push   0x0
c00015d3:	50                   	push   eax
c00015d4:	e8 9f f1 ff ff       	call   c0000778 <memset>
c00015d9:	83 c4 10             	add    esp,0x10
c00015dc:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00015e0:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00015e5:	75 14                	jne    c00015fb <iALLOc+0x156>
c00015e7:	8d 04 37             	lea    eax,[edi+esi*1]
c00015ea:	29 f3                	sub    ebx,esi
c00015ec:	8d 48 08             	lea    ecx,[eax+0x8]
c00015ef:	83 cb 01             	or     ebx,0x1
c00015f2:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00015f6:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00015f9:	89 f3                	mov    ebx,esi
c00015fb:	31 c0                	xor    eax,eax
c00015fd:	4d                   	dec    ebp
c00015fe:	8d 4f 08             	lea    ecx,[edi+0x8]
c0001601:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001605:	39 c5                	cmp    ebp,eax
c0001607:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c000160a:	74 2c                	je     c0001638 <iALLOc+0x193>
c000160c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0001610:	85 c9                	test   ecx,ecx
c0001612:	75 15                	jne    c0001629 <iALLOc+0x184>
c0001614:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c0001617:	8d 71 0b             	lea    esi,[ecx+0xb]
c000161a:	b9 10 00 00 00       	mov    ecx,0x10
c000161f:	83 fe 0f             	cmp    esi,0xf
c0001622:	76 05                	jbe    c0001629 <iALLOc+0x184>
c0001624:	83 e6 f8             	and    esi,0xfffffff8
c0001627:	89 f1                	mov    ecx,esi
c0001629:	89 ce                	mov    esi,ecx
c000162b:	29 cb                	sub    ebx,ecx
c000162d:	83 ce 01             	or     esi,0x1
c0001630:	40                   	inc    eax
c0001631:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0001634:	01 cf                	add    edi,ecx
c0001636:	eb c6                	jmp    c00015fe <iALLOc+0x159>
c0001638:	83 cb 01             	or     ebx,0x1
c000163b:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c000163e:	eb 08                	jmp    c0001648 <iALLOc+0x1a3>
c0001640:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001648:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000164c:	83 c4 2c             	add    esp,0x2c
c000164f:	5b                   	pop    ebx
c0001650:	5e                   	pop    esi
c0001651:	5f                   	pop    edi
c0001652:	5d                   	pop    ebp
c0001653:	c3                   	ret    

c0001654 <dlrealloc>:
c0001654:	55                   	push   ebp
c0001655:	57                   	push   edi
c0001656:	56                   	push   esi
c0001657:	53                   	push   ebx
c0001658:	83 ec 1c             	sub    esp,0x1c
c000165b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000165f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0001663:	85 db                	test   ebx,ebx
c0001665:	75 10                	jne    c0001677 <dlrealloc+0x23>
c0001667:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000166b:	83 c4 1c             	add    esp,0x1c
c000166e:	5b                   	pop    ebx
c000166f:	5e                   	pop    esi
c0001670:	5f                   	pop    edi
c0001671:	5d                   	pop    ebp
c0001672:	e9 a0 fa ff ff       	jmp    c0001117 <dlmalloc>
c0001677:	83 f8 df             	cmp    eax,0xffffffdf
c000167a:	76 07                	jbe    c0001683 <dlrealloc+0x2f>
c000167c:	31 db                	xor    ebx,ebx
c000167e:	e9 7c 01 00 00       	jmp    c00017ff <dlrealloc+0x1ab>
c0001683:	83 c0 0b             	add    eax,0xb
c0001686:	bf 10 00 00 00       	mov    edi,0x10
c000168b:	83 f8 0f             	cmp    eax,0xf
c000168e:	76 05                	jbe    c0001695 <dlrealloc+0x41>
c0001690:	83 e0 f8             	and    eax,0xfffffff8
c0001693:	89 c7                	mov    edi,eax
c0001695:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c0001698:	8d 6b f8             	lea    ebp,[ebx-0x8]
c000169b:	89 c6                	mov    esi,eax
c000169d:	83 e6 fc             	and    esi,0xfffffffc
c00016a0:	a8 02                	test   al,0x2
c00016a2:	75 d8                	jne    c000167c <dlrealloc+0x28>
c00016a4:	39 f7                	cmp    edi,esi
c00016a6:	0f 86 15 01 00 00    	jbe    c00017c1 <dlrealloc+0x16d>
c00016ac:	8d 54 35 00          	lea    edx,[ebp+esi*1+0x0]
c00016b0:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c00016b3:	39 15 0c e3 02 c0    	cmp    DWORD PTR ds:0xc002e30c,edx
c00016b9:	75 33                	jne    c00016ee <dlrealloc+0x9a>
c00016bb:	83 e1 fc             	and    ecx,0xfffffffc
c00016be:	01 f1                	add    ecx,esi
c00016c0:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00016c4:	8d 4f 10             	lea    ecx,[edi+0x10]
c00016c7:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00016cb:	77 49                	ja     c0001716 <dlrealloc+0xc2>
c00016cd:	01 fd                	add    ebp,edi
c00016cf:	83 e0 01             	and    eax,0x1
c00016d2:	09 f8                	or     eax,edi
c00016d4:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c00016d7:	89 2d 0c e3 02 c0    	mov    DWORD PTR ds:0xc002e30c,ebp
c00016dd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00016e1:	29 f8                	sub    eax,edi
c00016e3:	83 c8 01             	or     eax,0x1
c00016e6:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c00016e9:	e9 11 01 00 00       	jmp    c00017ff <dlrealloc+0x1ab>
c00016ee:	89 c8                	mov    eax,ecx
c00016f0:	83 e0 fe             	and    eax,0xfffffffe
c00016f3:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c00016f8:	75 1c                	jne    c0001716 <dlrealloc+0xc2>
c00016fa:	83 e1 fc             	and    ecx,0xfffffffc
c00016fd:	01 f1                	add    ecx,esi
c00016ff:	39 cf                	cmp    edi,ecx
c0001701:	77 13                	ja     c0001716 <dlrealloc+0xc2>
c0001703:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c0001706:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001709:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c000170c:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c000170f:	89 ce                	mov    esi,ecx
c0001711:	e9 ab 00 00 00       	jmp    c00017c1 <dlrealloc+0x16d>
c0001716:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000171a:	8d 47 f9             	lea    eax,[edi-0x7]
c000171d:	83 ec 0c             	sub    esp,0xc
c0001720:	50                   	push   eax
c0001721:	e8 f1 f9 ff ff       	call   c0001117 <dlmalloc>
c0001726:	83 c4 10             	add    esp,0x10
c0001729:	89 c1                	mov    ecx,eax
c000172b:	85 c0                	test   eax,eax
c000172d:	0f 84 49 ff ff ff    	je     c000167c <dlrealloc+0x28>
c0001733:	8d 40 f8             	lea    eax,[eax-0x8]
c0001736:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000173a:	39 c2                	cmp    edx,eax
c000173c:	75 0a                	jne    c0001748 <dlrealloc+0xf4>
c000173e:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001741:	83 e0 fc             	and    eax,0xfffffffc
c0001744:	01 c6                	add    esi,eax
c0001746:	eb 79                	jmp    c00017c1 <dlrealloc+0x16d>
c0001748:	83 ee 04             	sub    esi,0x4
c000174b:	83 fe 27             	cmp    esi,0x27
c000174e:	76 16                	jbe    c0001766 <dlrealloc+0x112>
c0001750:	50                   	push   eax
c0001751:	56                   	push   esi
c0001752:	53                   	push   ebx
c0001753:	51                   	push   ecx
c0001754:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0001758:	e8 e7 ef ff ff       	call   c0000744 <memcpy>
c000175d:	83 c4 10             	add    esp,0x10
c0001760:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0001764:	eb 43                	jmp    c00017a9 <dlrealloc+0x155>
c0001766:	8b 03                	mov    eax,DWORD PTR [ebx]
c0001768:	83 fe 13             	cmp    esi,0x13
c000176b:	89 01                	mov    DWORD PTR [ecx],eax
c000176d:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0001770:	89 41 04             	mov    DWORD PTR [ecx+0x4],eax
c0001773:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0001776:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c0001779:	76 2e                	jbe    c00017a9 <dlrealloc+0x155>
c000177b:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000177e:	83 fe 1b             	cmp    esi,0x1b
c0001781:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001784:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0001787:	89 41 10             	mov    DWORD PTR [ecx+0x10],eax
c000178a:	76 1d                	jbe    c00017a9 <dlrealloc+0x155>
c000178c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000178f:	83 fe 23             	cmp    esi,0x23
c0001792:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c0001795:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0001798:	89 41 18             	mov    DWORD PTR [ecx+0x18],eax
c000179b:	76 0c                	jbe    c00017a9 <dlrealloc+0x155>
c000179d:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00017a0:	89 41 1c             	mov    DWORD PTR [ecx+0x1c],eax
c00017a3:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00017a6:	89 41 20             	mov    DWORD PTR [ecx+0x20],eax
c00017a9:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00017ad:	83 ec 0c             	sub    esp,0xc
c00017b0:	53                   	push   ebx
c00017b1:	e8 06 f6 ff ff       	call   c0000dbc <dlfree>
c00017b6:	83 c4 10             	add    esp,0x10
c00017b9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00017bd:	89 cb                	mov    ebx,ecx
c00017bf:	eb 3e                	jmp    c00017ff <dlrealloc+0x1ab>
c00017c1:	89 f2                	mov    edx,esi
c00017c3:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c00017c6:	29 fa                	sub    edx,edi
c00017c8:	83 e1 01             	and    ecx,0x1
c00017cb:	8d 44 35 00          	lea    eax,[ebp+esi*1+0x0]
c00017cf:	83 fa 0f             	cmp    edx,0xf
c00017d2:	77 0b                	ja     c00017df <dlrealloc+0x18b>
c00017d4:	09 ce                	or     esi,ecx
c00017d6:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c00017d9:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00017dd:	eb 20                	jmp    c00017ff <dlrealloc+0x1ab>
c00017df:	01 fd                	add    ebp,edi
c00017e1:	83 ec 0c             	sub    esp,0xc
c00017e4:	09 cf                	or     edi,ecx
c00017e6:	83 ca 01             	or     edx,0x1
c00017e9:	89 7b fc             	mov    DWORD PTR [ebx-0x4],edi
c00017ec:	83 c5 08             	add    ebp,0x8
c00017ef:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
c00017f2:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00017f6:	55                   	push   ebp
c00017f7:	e8 c0 f5 ff ff       	call   c0000dbc <dlfree>
c00017fc:	83 c4 10             	add    esp,0x10
c00017ff:	83 c4 1c             	add    esp,0x1c
c0001802:	89 d8                	mov    eax,ebx
c0001804:	5b                   	pop    ebx
c0001805:	5e                   	pop    esi
c0001806:	5f                   	pop    edi
c0001807:	5d                   	pop    ebp
c0001808:	c3                   	ret    

c0001809 <dlmemalign>:
c0001809:	55                   	push   ebp
c000180a:	57                   	push   edi
c000180b:	56                   	push   esi
c000180c:	53                   	push   ebx
c000180d:	83 ec 0c             	sub    esp,0xc
c0001810:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0001814:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0001818:	83 fa 08             	cmp    edx,0x8
c000181b:	77 10                	ja     c000182d <dlmemalign+0x24>
c000181d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0001821:	83 c4 0c             	add    esp,0xc
c0001824:	5b                   	pop    ebx
c0001825:	5e                   	pop    esi
c0001826:	5f                   	pop    edi
c0001827:	5d                   	pop    ebp
c0001828:	e9 ea f8 ff ff       	jmp    c0001117 <dlmalloc>
c000182d:	bf 10 00 00 00       	mov    edi,0x10
c0001832:	83 fa 0f             	cmp    edx,0xf
c0001835:	76 13                	jbe    c000184a <dlmemalign+0x41>
c0001837:	8d 4a ff             	lea    ecx,[edx-0x1]
c000183a:	85 d1                	test   ecx,edx
c000183c:	75 04                	jne    c0001842 <dlmemalign+0x39>
c000183e:	89 d7                	mov    edi,edx
c0001840:	eb 08                	jmp    c000184a <dlmemalign+0x41>
c0001842:	39 d7                	cmp    edi,edx
c0001844:	73 04                	jae    c000184a <dlmemalign+0x41>
c0001846:	01 ff                	add    edi,edi
c0001848:	eb f8                	jmp    c0001842 <dlmemalign+0x39>
c000184a:	83 f8 df             	cmp    eax,0xffffffdf
c000184d:	76 07                	jbe    c0001856 <dlmemalign+0x4d>
c000184f:	31 c0                	xor    eax,eax
c0001851:	e9 ce 00 00 00       	jmp    c0001924 <dlmemalign+0x11b>
c0001856:	83 c0 0b             	add    eax,0xb
c0001859:	bd 10 00 00 00       	mov    ebp,0x10
c000185e:	83 f8 0f             	cmp    eax,0xf
c0001861:	76 05                	jbe    c0001868 <dlmemalign+0x5f>
c0001863:	83 e0 f8             	and    eax,0xfffffff8
c0001866:	89 c5                	mov    ebp,eax
c0001868:	83 ec 0c             	sub    esp,0xc
c000186b:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c000186f:	50                   	push   eax
c0001870:	e8 a2 f8 ff ff       	call   c0001117 <dlmalloc>
c0001875:	83 c4 10             	add    esp,0x10
c0001878:	89 c1                	mov    ecx,eax
c000187a:	85 c0                	test   eax,eax
c000187c:	74 d1                	je     c000184f <dlmemalign+0x46>
c000187e:	31 d2                	xor    edx,edx
c0001880:	8d 70 f8             	lea    esi,[eax-0x8]
c0001883:	f7 f7                	div    edi
c0001885:	85 d2                	test   edx,edx
c0001887:	74 62                	je     c00018eb <dlmemalign+0xe2>
c0001889:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c000188d:	89 f8                	mov    eax,edi
c000188f:	f7 d8                	neg    eax
c0001891:	21 c3                	and    ebx,eax
c0001893:	83 eb 08             	sub    ebx,0x8
c0001896:	89 d8                	mov    eax,ebx
c0001898:	29 f0                	sub    eax,esi
c000189a:	83 f8 0f             	cmp    eax,0xf
c000189d:	77 02                	ja     c00018a1 <dlmemalign+0x98>
c000189f:	01 fb                	add    ebx,edi
c00018a1:	89 d8                	mov    eax,ebx
c00018a3:	29 f0                	sub    eax,esi
c00018a5:	89 c6                	mov    esi,eax
c00018a7:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00018aa:	89 c2                	mov    edx,eax
c00018ac:	83 e2 fc             	and    edx,0xfffffffc
c00018af:	29 f2                	sub    edx,esi
c00018b1:	a8 02                	test   al,0x2
c00018b3:	74 10                	je     c00018c5 <dlmemalign+0xbc>
c00018b5:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c00018b8:	83 ca 02             	or     edx,0x2
c00018bb:	8d 43 08             	lea    eax,[ebx+0x8]
c00018be:	89 33                	mov    DWORD PTR [ebx],esi
c00018c0:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00018c3:	eb 5f                	jmp    c0001924 <dlmemalign+0x11b>
c00018c5:	83 ec 0c             	sub    esp,0xc
c00018c8:	89 d0                	mov    eax,edx
c00018ca:	83 c8 01             	or     eax,0x1
c00018cd:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00018d0:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c00018d5:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00018d8:	83 e0 01             	and    eax,0x1
c00018db:	09 f0                	or     eax,esi
c00018dd:	89 de                	mov    esi,ebx
c00018df:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c00018e2:	51                   	push   ecx
c00018e3:	e8 d4 f4 ff ff       	call   c0000dbc <dlfree>
c00018e8:	83 c4 10             	add    esp,0x10
c00018eb:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00018ee:	a8 02                	test   al,0x2
c00018f0:	75 2f                	jne    c0001921 <dlmemalign+0x118>
c00018f2:	83 e0 fc             	and    eax,0xfffffffc
c00018f5:	8d 55 10             	lea    edx,[ebp+0x10]
c00018f8:	39 c2                	cmp    edx,eax
c00018fa:	73 25                	jae    c0001921 <dlmemalign+0x118>
c00018fc:	8d 14 2e             	lea    edx,[esi+ebp*1]
c00018ff:	83 ec 0c             	sub    esp,0xc
c0001902:	29 e8                	sub    eax,ebp
c0001904:	83 c2 08             	add    edx,0x8
c0001907:	83 c8 01             	or     eax,0x1
c000190a:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c000190d:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0001910:	83 e0 01             	and    eax,0x1
c0001913:	09 c5                	or     ebp,eax
c0001915:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0001918:	52                   	push   edx
c0001919:	e8 9e f4 ff ff       	call   c0000dbc <dlfree>
c000191e:	83 c4 10             	add    esp,0x10
c0001921:	8d 46 08             	lea    eax,[esi+0x8]
c0001924:	83 c4 0c             	add    esp,0xc
c0001927:	5b                   	pop    ebx
c0001928:	5e                   	pop    esi
c0001929:	5f                   	pop    edi
c000192a:	5d                   	pop    ebp
c000192b:	c3                   	ret    

c000192c <dlcalloc>:
c000192c:	53                   	push   ebx
c000192d:	83 ec 14             	sub    esp,0x14
c0001930:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001934:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c0001939:	50                   	push   eax
c000193a:	e8 d8 f7 ff ff       	call   c0001117 <dlmalloc>
c000193f:	83 c4 10             	add    esp,0x10
c0001942:	89 c3                	mov    ebx,eax
c0001944:	85 c0                	test   eax,eax
c0001946:	74 77                	je     c00019bf <dlcalloc+0x93>
c0001948:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c000194b:	89 d0                	mov    eax,edx
c000194d:	83 e0 fc             	and    eax,0xfffffffc
c0001950:	80 e2 02             	and    dl,0x2
c0001953:	75 5a                	jne    c00019af <dlcalloc+0x83>
c0001955:	83 e8 04             	sub    eax,0x4
c0001958:	83 f8 27             	cmp    eax,0x27
c000195b:	76 03                	jbe    c0001960 <dlcalloc+0x34>
c000195d:	51                   	push   ecx
c000195e:	eb 53                	jmp    c00019b3 <dlcalloc+0x87>
c0001960:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001966:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c000196d:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0001974:	83 f8 13             	cmp    eax,0x13
c0001977:	76 46                	jbe    c00019bf <dlcalloc+0x93>
c0001979:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0001980:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001987:	83 f8 1b             	cmp    eax,0x1b
c000198a:	76 33                	jbe    c00019bf <dlcalloc+0x93>
c000198c:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0001993:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000199a:	83 f8 23             	cmp    eax,0x23
c000199d:	76 20                	jbe    c00019bf <dlcalloc+0x93>
c000199f:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c00019a6:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c00019ad:	eb 10                	jmp    c00019bf <dlcalloc+0x93>
c00019af:	83 e8 08             	sub    eax,0x8
c00019b2:	52                   	push   edx
c00019b3:	50                   	push   eax
c00019b4:	6a 00                	push   0x0
c00019b6:	53                   	push   ebx
c00019b7:	e8 bc ed ff ff       	call   c0000778 <memset>
c00019bc:	83 c4 10             	add    esp,0x10
c00019bf:	89 d8                	mov    eax,ebx
c00019c1:	83 c4 08             	add    esp,0x8
c00019c4:	5b                   	pop    ebx
c00019c5:	c3                   	ret    

c00019c6 <dlcfree>:
c00019c6:	e9 f1 f3 ff ff       	jmp    c0000dbc <dlfree>

c00019cb <dlindependent_calloc>:
c00019cb:	83 ec 28             	sub    esp,0x28
c00019ce:	b9 03 00 00 00       	mov    ecx,0x3
c00019d3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00019d7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00019db:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00019df:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00019e3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00019e7:	e8 b9 fa ff ff       	call   c00014a5 <iALLOc>
c00019ec:	83 c4 2c             	add    esp,0x2c
c00019ef:	c3                   	ret    

c00019f0 <dlindependent_comalloc>:
c00019f0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00019f4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00019f8:	31 c9                	xor    ecx,ecx
c00019fa:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00019fe:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0001a02:	e9 9e fa ff ff       	jmp    c00014a5 <iALLOc>

c0001a07 <dlvalloc>:
c0001a07:	83 ec 0c             	sub    esp,0xc
c0001a0a:	83 3d e0 e2 02 c0 00 	cmp    DWORD PTR ds:0xc002e2e0,0x0
c0001a11:	75 0a                	jne    c0001a1d <dlvalloc+0x16>
c0001a13:	b8 e0 e2 02 c0       	mov    eax,0xc002e2e0
c0001a18:	e8 b8 f2 ff ff       	call   c0000cd5 <malloc_consolidate>
c0001a1d:	50                   	push   eax
c0001a1e:	50                   	push   eax
c0001a1f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0001a23:	ff 35 3c e6 02 c0    	push   DWORD PTR ds:0xc002e63c
c0001a29:	e8 db fd ff ff       	call   c0001809 <dlmemalign>
c0001a2e:	83 c4 1c             	add    esp,0x1c
c0001a31:	c3                   	ret    

c0001a32 <dlpvalloc>:
c0001a32:	83 ec 0c             	sub    esp,0xc
c0001a35:	83 3d e0 e2 02 c0 00 	cmp    DWORD PTR ds:0xc002e2e0,0x0
c0001a3c:	75 0a                	jne    c0001a48 <dlpvalloc+0x16>
c0001a3e:	b8 e0 e2 02 c0       	mov    eax,0xc002e2e0
c0001a43:	e8 8d f2 ff ff       	call   c0000cd5 <malloc_consolidate>
c0001a48:	a1 3c e6 02 c0       	mov    eax,ds:0xc002e63c
c0001a4d:	89 c1                	mov    ecx,eax
c0001a4f:	52                   	push   edx
c0001a50:	f7 d9                	neg    ecx
c0001a52:	52                   	push   edx
c0001a53:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001a57:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001a5b:	21 ca                	and    edx,ecx
c0001a5d:	52                   	push   edx
c0001a5e:	50                   	push   eax
c0001a5f:	e8 a5 fd ff ff       	call   c0001809 <dlmemalign>
c0001a64:	83 c4 1c             	add    esp,0x1c
c0001a67:	c3                   	ret    

c0001a68 <dlmalloc_trim>:
c0001a68:	b8 e0 e2 02 c0       	mov    eax,0xc002e2e0
c0001a6d:	e8 63 f2 ff ff       	call   c0000cd5 <malloc_consolidate>
c0001a72:	31 c0                	xor    eax,eax
c0001a74:	c3                   	ret    

c0001a75 <dlmalloc_usable_size>:
c0001a75:	53                   	push   ebx
c0001a76:	31 c0                	xor    eax,eax
c0001a78:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001a7c:	85 c9                	test   ecx,ecx
c0001a7e:	74 24                	je     c0001aa4 <dlmalloc_usable_size+0x2f>
c0001a80:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001a83:	f6 c2 02             	test   dl,0x2
c0001a86:	74 08                	je     c0001a90 <dlmalloc_usable_size+0x1b>
c0001a88:	83 e2 fc             	and    edx,0xfffffffc
c0001a8b:	8d 42 f8             	lea    eax,[edx-0x8]
c0001a8e:	eb 14                	jmp    c0001aa4 <dlmalloc_usable_size+0x2f>
c0001a90:	89 d3                	mov    ebx,edx
c0001a92:	31 c0                	xor    eax,eax
c0001a94:	83 e3 fe             	and    ebx,0xfffffffe
c0001a97:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001a9c:	74 06                	je     c0001aa4 <dlmalloc_usable_size+0x2f>
c0001a9e:	83 e2 fc             	and    edx,0xfffffffc
c0001aa1:	8d 42 fc             	lea    eax,[edx-0x4]
c0001aa4:	5b                   	pop    ebx
c0001aa5:	c3                   	ret    

c0001aa6 <dlmallinfo>:
c0001aa6:	55                   	push   ebp
c0001aa7:	57                   	push   edi
c0001aa8:	56                   	push   esi
c0001aa9:	53                   	push   ebx
c0001aaa:	83 ec 08             	sub    esp,0x8
c0001aad:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0001ab1:	83 3d 0c e3 02 c0 00 	cmp    DWORD PTR ds:0xc002e30c,0x0
c0001ab8:	75 0a                	jne    c0001ac4 <dlmallinfo+0x1e>
c0001aba:	b8 e0 e2 02 c0       	mov    eax,0xc002e2e0
c0001abf:	e8 11 f2 ff ff       	call   c0000cd5 <malloc_consolidate>
c0001ac4:	a1 0c e3 02 c0       	mov    eax,ds:0xc002e30c
c0001ac9:	31 ed                	xor    ebp,ebp
c0001acb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001ace:	31 c9                	xor    ecx,ecx
c0001ad0:	83 e0 fc             	and    eax,0xfffffffc
c0001ad3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001ad7:	31 c0                	xor    eax,eax
c0001ad9:	8b 14 85 e4 e2 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd1d1c]
c0001ae0:	85 d2                	test   edx,edx
c0001ae2:	74 0e                	je     c0001af2 <dlmallinfo+0x4c>
c0001ae4:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001ae7:	45                   	inc    ebp
c0001ae8:	83 e6 fc             	and    esi,0xfffffffc
c0001aeb:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001aee:	01 f1                	add    ecx,esi
c0001af0:	eb ee                	jmp    c0001ae0 <dlmallinfo+0x3a>
c0001af2:	40                   	inc    eax
c0001af3:	83 f8 0a             	cmp    eax,0xa
c0001af6:	75 e1                	jne    c0001ad9 <dlmallinfo+0x33>
c0001af8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001afc:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0001b03:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001b06:	b8 14 e3 02 c0       	mov    eax,0xc002e314
c0001b0b:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001b0e:	39 f0                	cmp    eax,esi
c0001b10:	74 10                	je     c0001b22 <dlmallinfo+0x7c>
c0001b12:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001b15:	ff 04 24             	inc    DWORD PTR [esp]
c0001b18:	83 e7 fc             	and    edi,0xfffffffc
c0001b1b:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001b1e:	01 fa                	add    edx,edi
c0001b20:	eb ec                	jmp    c0001b0e <dlmallinfo+0x68>
c0001b22:	83 c0 08             	add    eax,0x8
c0001b25:	3d 0c e6 02 c0       	cmp    eax,0xc002e60c
c0001b2a:	75 df                	jne    c0001b0b <dlmallinfo+0x65>
c0001b2c:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001b2f:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001b32:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001b35:	a1 48 e6 02 c0       	mov    eax,ds:0xc002e648
c0001b3a:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001b3d:	89 03                	mov    DWORD PTR [ebx],eax
c0001b3f:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001b42:	8b 35 30 e6 02 c0    	mov    esi,DWORD PTR ds:0xc002e630
c0001b48:	29 d0                	sub    eax,edx
c0001b4a:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001b4d:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001b50:	8b 35 44 e6 02 c0    	mov    esi,DWORD PTR ds:0xc002e644
c0001b56:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001b5a:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001b5d:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001b60:	8b 35 54 e6 02 c0    	mov    esi,DWORD PTR ds:0xc002e654
c0001b66:	89 d8                	mov    eax,ebx
c0001b68:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001b6b:	83 c4 08             	add    esp,0x8
c0001b6e:	5b                   	pop    ebx
c0001b6f:	5e                   	pop    esi
c0001b70:	5f                   	pop    edi
c0001b71:	5d                   	pop    ebp
c0001b72:	c2 04 00             	ret    0x4

c0001b75 <dlmalloc_stats>:
c0001b75:	83 ec 30             	sub    esp,0x30
c0001b78:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001b7c:	50                   	push   eax
c0001b7d:	e8 24 ff ff ff       	call   c0001aa6 <dlmallinfo>
c0001b82:	83 c4 30             	add    esp,0x30
c0001b85:	c3                   	ret    

c0001b86 <dlmallopt>:
c0001b86:	56                   	push   esi
c0001b87:	b8 e0 e2 02 c0       	mov    eax,0xc002e2e0
c0001b8c:	53                   	push   ebx
c0001b8d:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001b91:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001b95:	e8 3b f1 ff ff       	call   c0000cd5 <malloc_consolidate>
c0001b9a:	8d 46 04             	lea    eax,[esi+0x4]
c0001b9d:	83 f8 05             	cmp    eax,0x5
c0001ba0:	77 67                	ja     c0001c09 <dlmallopt+0x83>
c0001ba2:	ff 24 85 04 94 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd6bfc]
c0001ba9:	83 fb 50             	cmp    ebx,0x50
c0001bac:	77 5b                	ja     c0001c09 <dlmallopt+0x83>
c0001bae:	ba 08 00 00 00       	mov    edx,0x8
c0001bb3:	85 db                	test   ebx,ebx
c0001bb5:	74 12                	je     c0001bc9 <dlmallopt+0x43>
c0001bb7:	83 c3 0b             	add    ebx,0xb
c0001bba:	ba 10 00 00 00       	mov    edx,0x10
c0001bbf:	83 fb 0f             	cmp    ebx,0xf
c0001bc2:	76 05                	jbe    c0001bc9 <dlmallopt+0x43>
c0001bc4:	89 da                	mov    edx,ebx
c0001bc6:	83 e2 f8             	and    edx,0xfffffff8
c0001bc9:	a1 e0 e2 02 c0       	mov    eax,ds:0xc002e2e0
c0001bce:	83 e0 03             	and    eax,0x3
c0001bd1:	09 d0                	or     eax,edx
c0001bd3:	a3 e0 e2 02 c0       	mov    ds:0xc002e2e0,eax
c0001bd8:	eb 31                	jmp    c0001c0b <dlmallopt+0x85>
c0001bda:	89 1d 24 e6 02 c0    	mov    DWORD PTR ds:0xc002e624,ebx
c0001be0:	eb 06                	jmp    c0001be8 <dlmallopt+0x62>
c0001be2:	89 1d 28 e6 02 c0    	mov    DWORD PTR ds:0xc002e628,ebx
c0001be8:	be 01 00 00 00       	mov    esi,0x1
c0001bed:	eb 1c                	jmp    c0001c0b <dlmallopt+0x85>
c0001bef:	89 1d 2c e6 02 c0    	mov    DWORD PTR ds:0xc002e62c,ebx
c0001bf5:	eb f1                	jmp    c0001be8 <dlmallopt+0x62>
c0001bf7:	31 f6                	xor    esi,esi
c0001bf9:	85 db                	test   ebx,ebx
c0001bfb:	75 0e                	jne    c0001c0b <dlmallopt+0x85>
c0001bfd:	c7 05 34 e6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e634,0x0
c0001c07:	eb df                	jmp    c0001be8 <dlmallopt+0x62>
c0001c09:	31 f6                	xor    esi,esi
c0001c0b:	89 f0                	mov    eax,esi
c0001c0d:	5b                   	pop    ebx
c0001c0e:	5e                   	pop    esi
c0001c0f:	c3                   	ret    

c0001c10 <disk_status>:
c0001c10:	31 c0                	xor    eax,eax
c0001c12:	c3                   	ret    

c0001c13 <disk_initialize>:
c0001c13:	31 c0                	xor    eax,eax
c0001c15:	c3                   	ret    

c0001c16 <disk_read>:
c0001c16:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001c1b:	0f b6 04 85 c0 1d 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffce240]
c0001c23:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c27:	e9 70 f2 01 00       	jmp    c0020e9c <fatWrapperReadDisk>

c0001c2c <disk_write>:
c0001c2c:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001c31:	0f b6 04 85 c0 1d 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffce240]
c0001c39:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c3d:	e9 a1 f2 01 00       	jmp    c0020ee3 <fatWrapperWriteDisk>

c0001c42 <disk_ioctl>:
c0001c42:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001c47:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001c4b:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001c50:	0f b6 04 85 c0 1d 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffce240]
c0001c58:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c5c:	e9 c9 f2 01 00       	jmp    c0020f2a <fatWrapperIoctl>

c0001c61 <ld_word>:
c0001c61:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001c65:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001c68:	c1 e2 08             	shl    edx,0x8
c0001c6b:	09 d0                	or     eax,edx
c0001c6d:	c3                   	ret    

c0001c6e <ld_dword>:
c0001c6e:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001c72:	89 d1                	mov    ecx,edx
c0001c74:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001c78:	c1 e1 08             	shl    ecx,0x8
c0001c7b:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001c7e:	09 ca                	or     edx,ecx
c0001c80:	c1 e2 08             	shl    edx,0x8
c0001c83:	09 d0                	or     eax,edx
c0001c85:	c3                   	ret    

c0001c86 <ld_qword>:
c0001c86:	57                   	push   edi
c0001c87:	56                   	push   esi
c0001c88:	53                   	push   ebx
c0001c89:	31 db                	xor    ebx,ebx
c0001c8b:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c0001c8e:	89 df                	mov    edi,ebx
c0001c90:	89 ce                	mov    esi,ecx
c0001c92:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c0001c96:	0f a4 f7 08          	shld   edi,esi,0x8
c0001c9a:	c1 e6 08             	shl    esi,0x8
c0001c9d:	09 f2                	or     edx,esi
c0001c9f:	89 d6                	mov    esi,edx
c0001ca1:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c0001ca5:	0f a4 f7 08          	shld   edi,esi,0x8
c0001ca9:	c1 e6 08             	shl    esi,0x8
c0001cac:	09 f2                	or     edx,esi
c0001cae:	89 d6                	mov    esi,edx
c0001cb0:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001cb4:	0f a4 f7 08          	shld   edi,esi,0x8
c0001cb8:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001cbb:	c1 e6 08             	shl    esi,0x8
c0001cbe:	89 fb                	mov    ebx,edi
c0001cc0:	09 f2                	or     edx,esi
c0001cc2:	89 d1                	mov    ecx,edx
c0001cc4:	0f a4 cb 08          	shld   ebx,ecx,0x8
c0001cc8:	c1 e1 08             	shl    ecx,0x8
c0001ccb:	89 da                	mov    edx,ebx
c0001ccd:	09 c8                	or     eax,ecx
c0001ccf:	5b                   	pop    ebx
c0001cd0:	5e                   	pop    esi
c0001cd1:	5f                   	pop    edi
c0001cd2:	c3                   	ret    

c0001cd3 <st_word>:
c0001cd3:	66 89 10             	mov    WORD PTR [eax],dx
c0001cd6:	c3                   	ret    

c0001cd7 <st_dword>:
c0001cd7:	89 10                	mov    DWORD PTR [eax],edx
c0001cd9:	c3                   	ret    

c0001cda <st_qword>:
c0001cda:	89 10                	mov    DWORD PTR [eax],edx
c0001cdc:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001cdf:	c3                   	ret    

c0001ce0 <mem_cpy>:
c0001ce0:	85 c9                	test   ecx,ecx
c0001ce2:	74 10                	je     c0001cf4 <mem_cpy+0x14>
c0001ce4:	57                   	push   edi
c0001ce5:	01 c1                	add    ecx,eax
c0001ce7:	56                   	push   esi
c0001ce8:	89 c7                	mov    edi,eax
c0001cea:	89 d6                	mov    esi,edx
c0001cec:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001ced:	39 f9                	cmp    ecx,edi
c0001cef:	75 fb                	jne    c0001cec <mem_cpy+0xc>
c0001cf1:	5e                   	pop    esi
c0001cf2:	5f                   	pop    edi
c0001cf3:	c3                   	ret    
c0001cf4:	c3                   	ret    

c0001cf5 <mem_set>:
c0001cf5:	01 c1                	add    ecx,eax
c0001cf7:	40                   	inc    eax
c0001cf8:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001cfb:	39 c8                	cmp    eax,ecx
c0001cfd:	75 f8                	jne    c0001cf7 <mem_set+0x2>
c0001cff:	c3                   	ret    

c0001d00 <mem_cmp>:
c0001d00:	57                   	push   edi
c0001d01:	56                   	push   esi
c0001d02:	89 c6                	mov    esi,eax
c0001d04:	53                   	push   ebx
c0001d05:	46                   	inc    esi
c0001d06:	42                   	inc    edx
c0001d07:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001d0b:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001d0f:	29 fb                	sub    ebx,edi
c0001d11:	89 cf                	mov    edi,ecx
c0001d13:	29 f7                	sub    edi,esi
c0001d15:	01 c7                	add    edi,eax
c0001d17:	74 04                	je     c0001d1d <mem_cmp+0x1d>
c0001d19:	85 db                	test   ebx,ebx
c0001d1b:	74 e8                	je     c0001d05 <mem_cmp+0x5>
c0001d1d:	89 d8                	mov    eax,ebx
c0001d1f:	5b                   	pop    ebx
c0001d20:	5e                   	pop    esi
c0001d21:	5f                   	pop    edi
c0001d22:	c3                   	ret    

c0001d23 <chk_chr>:
c0001d23:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0001d26:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001d29:	74 07                	je     c0001d32 <chk_chr+0xf>
c0001d2b:	39 d1                	cmp    ecx,edx
c0001d2d:	74 03                	je     c0001d32 <chk_chr+0xf>
c0001d2f:	40                   	inc    eax
c0001d30:	eb f1                	jmp    c0001d23 <chk_chr>
c0001d32:	89 c8                	mov    eax,ecx
c0001d34:	c3                   	ret    

c0001d35 <dbc_1st>:
c0001d35:	31 c0                	xor    eax,eax
c0001d37:	c3                   	ret    

c0001d38 <dbc_2nd>:
c0001d38:	31 c0                	xor    eax,eax
c0001d3a:	c3                   	ret    

c0001d3b <tchar2uni>:
c0001d3b:	57                   	push   edi
c0001d3c:	89 c7                	mov    edi,eax
c0001d3e:	56                   	push   esi
c0001d3f:	53                   	push   ebx
c0001d40:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001d42:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001d44:	8d 73 01             	lea    esi,[ebx+0x1]
c0001d47:	84 c9                	test   cl,cl
c0001d49:	78 0a                	js     c0001d55 <tchar2uni+0x1a>
c0001d4b:	0f b6 d1             	movzx  edx,cl
c0001d4e:	89 f3                	mov    ebx,esi
c0001d50:	e9 9f 00 00 00       	jmp    c0001df4 <tchar2uni+0xb9>
c0001d55:	88 ca                	mov    dl,cl
c0001d57:	83 e2 e0             	and    edx,0xffffffe0
c0001d5a:	80 fa c0             	cmp    dl,0xc0
c0001d5d:	75 0c                	jne    c0001d6b <tchar2uni+0x30>
c0001d5f:	89 ca                	mov    edx,ecx
c0001d61:	b9 01 00 00 00       	mov    ecx,0x1
c0001d66:	83 e2 1f             	and    edx,0x1f
c0001d69:	eb 2e                	jmp    c0001d99 <tchar2uni+0x5e>
c0001d6b:	88 ca                	mov    dl,cl
c0001d6d:	83 e2 f0             	and    edx,0xfffffff0
c0001d70:	80 fa e0             	cmp    dl,0xe0
c0001d73:	75 0c                	jne    c0001d81 <tchar2uni+0x46>
c0001d75:	89 ca                	mov    edx,ecx
c0001d77:	b9 02 00 00 00       	mov    ecx,0x2
c0001d7c:	83 e2 0f             	and    edx,0xf
c0001d7f:	eb 18                	jmp    c0001d99 <tchar2uni+0x5e>
c0001d81:	88 ca                	mov    dl,cl
c0001d83:	83 e2 f8             	and    edx,0xfffffff8
c0001d86:	88 d0                	mov    al,dl
c0001d88:	83 ca ff             	or     edx,0xffffffff
c0001d8b:	3c f0                	cmp    al,0xf0
c0001d8d:	75 6c                	jne    c0001dfb <tchar2uni+0xc0>
c0001d8f:	89 ca                	mov    edx,ecx
c0001d91:	b9 03 00 00 00       	mov    ecx,0x3
c0001d96:	83 e2 07             	and    edx,0x7
c0001d99:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001d9d:	46                   	inc    esi
c0001d9e:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001da1:	88 c8                	mov    al,cl
c0001da3:	83 e0 c0             	and    eax,0xffffffc0
c0001da6:	3c 80                	cmp    al,0x80
c0001da8:	75 4e                	jne    c0001df8 <tchar2uni+0xbd>
c0001daa:	c1 e2 06             	shl    edx,0x6
c0001dad:	83 e1 3f             	and    ecx,0x3f
c0001db0:	09 ca                	or     edx,ecx
c0001db2:	39 de                	cmp    esi,ebx
c0001db4:	75 e7                	jne    c0001d9d <tchar2uni+0x62>
c0001db6:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001db9:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001dbf:	77 37                	ja     c0001df8 <tchar2uni+0xbd>
c0001dc1:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001dc7:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001dcd:	76 29                	jbe    c0001df8 <tchar2uni+0xbd>
c0001dcf:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001dd5:	76 1d                	jbe    c0001df4 <tchar2uni+0xb9>
c0001dd7:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001ddd:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001de3:	c1 e1 06             	shl    ecx,0x6
c0001de6:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001dec:	09 ca                	or     edx,ecx
c0001dee:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001df4:	89 1f                	mov    DWORD PTR [edi],ebx
c0001df6:	eb 03                	jmp    c0001dfb <tchar2uni+0xc0>
c0001df8:	83 ca ff             	or     edx,0xffffffff
c0001dfb:	5b                   	pop    ebx
c0001dfc:	89 d0                	mov    eax,edx
c0001dfe:	5e                   	pop    esi
c0001dff:	5f                   	pop    edi
c0001e00:	c3                   	ret    

c0001e01 <put_utf>:
c0001e01:	53                   	push   ebx
c0001e02:	83 f8 7f             	cmp    eax,0x7f
c0001e05:	89 c3                	mov    ebx,eax
c0001e07:	b0 00                	mov    al,0x0
c0001e09:	77 11                	ja     c0001e1c <put_utf+0x1b>
c0001e0b:	85 c9                	test   ecx,ecx
c0001e0d:	0f 84 e5 00 00 00    	je     c0001ef8 <put_utf+0xf7>
c0001e13:	88 1a                	mov    BYTE PTR [edx],bl
c0001e15:	b0 01                	mov    al,0x1
c0001e17:	e9 dc 00 00 00       	jmp    c0001ef8 <put_utf+0xf7>
c0001e1c:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001e22:	77 23                	ja     c0001e47 <put_utf+0x46>
c0001e24:	83 f9 01             	cmp    ecx,0x1
c0001e27:	0f 86 cb 00 00 00    	jbe    c0001ef8 <put_utf+0xf7>
c0001e2d:	89 d8                	mov    eax,ebx
c0001e2f:	83 e3 3f             	and    ebx,0x3f
c0001e32:	c1 e8 06             	shr    eax,0x6
c0001e35:	83 cb 80             	or     ebx,0xffffff80
c0001e38:	83 c8 c0             	or     eax,0xffffffc0
c0001e3b:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001e3e:	88 02                	mov    BYTE PTR [edx],al
c0001e40:	b0 02                	mov    al,0x2
c0001e42:	e9 b1 00 00 00       	jmp    c0001ef8 <put_utf+0xf7>
c0001e47:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001e4d:	77 40                	ja     c0001e8f <put_utf+0x8e>
c0001e4f:	83 f9 02             	cmp    ecx,0x2
c0001e52:	0f 86 a0 00 00 00    	jbe    c0001ef8 <put_utf+0xf7>
c0001e58:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001e5e:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001e64:	0f 86 8e 00 00 00    	jbe    c0001ef8 <put_utf+0xf7>
c0001e6a:	89 d8                	mov    eax,ebx
c0001e6c:	c1 e8 0c             	shr    eax,0xc
c0001e6f:	83 c8 e0             	or     eax,0xffffffe0
c0001e72:	88 02                	mov    BYTE PTR [edx],al
c0001e74:	89 d8                	mov    eax,ebx
c0001e76:	83 e3 3f             	and    ebx,0x3f
c0001e79:	c1 e8 06             	shr    eax,0x6
c0001e7c:	83 cb 80             	or     ebx,0xffffff80
c0001e7f:	83 e0 3f             	and    eax,0x3f
c0001e82:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001e85:	83 c8 80             	or     eax,0xffffff80
c0001e88:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001e8b:	b0 03                	mov    al,0x3
c0001e8d:	eb 69                	jmp    c0001ef8 <put_utf+0xf7>
c0001e8f:	83 f9 03             	cmp    ecx,0x3
c0001e92:	76 64                	jbe    c0001ef8 <put_utf+0xf7>
c0001e94:	89 d9                	mov    ecx,ebx
c0001e96:	0f b7 c3             	movzx  eax,bx
c0001e99:	66 31 c9             	xor    cx,cx
c0001e9c:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001ea2:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001ea8:	c1 e9 06             	shr    ecx,0x6
c0001eab:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001eb1:	77 43                	ja     c0001ef6 <put_utf+0xf5>
c0001eb3:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001eb9:	77 3b                	ja     c0001ef6 <put_utf+0xf5>
c0001ebb:	09 cb                	or     ebx,ecx
c0001ebd:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001ec3:	89 d8                	mov    eax,ebx
c0001ec5:	c1 e8 12             	shr    eax,0x12
c0001ec8:	83 c8 f0             	or     eax,0xfffffff0
c0001ecb:	88 02                	mov    BYTE PTR [edx],al
c0001ecd:	89 d8                	mov    eax,ebx
c0001ecf:	c1 e8 0c             	shr    eax,0xc
c0001ed2:	83 e0 3f             	and    eax,0x3f
c0001ed5:	83 c8 80             	or     eax,0xffffff80
c0001ed8:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001edb:	89 d8                	mov    eax,ebx
c0001edd:	83 e3 3f             	and    ebx,0x3f
c0001ee0:	c1 e8 06             	shr    eax,0x6
c0001ee3:	83 cb 80             	or     ebx,0xffffff80
c0001ee6:	83 e0 3f             	and    eax,0x3f
c0001ee9:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0001eec:	83 c8 80             	or     eax,0xffffff80
c0001eef:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0001ef2:	b0 04                	mov    al,0x4
c0001ef4:	eb 02                	jmp    c0001ef8 <put_utf+0xf7>
c0001ef6:	31 c0                	xor    eax,eax
c0001ef8:	5b                   	pop    ebx
c0001ef9:	c3                   	ret    

c0001efa <clst2sect>:
c0001efa:	89 c1                	mov    ecx,eax
c0001efc:	83 ea 02             	sub    edx,0x2
c0001eff:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0001f02:	83 e8 02             	sub    eax,0x2
c0001f05:	39 d0                	cmp    eax,edx
c0001f07:	76 0d                	jbe    c0001f16 <clst2sect+0x1c>
c0001f09:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0001f0d:	f7 e2                	mul    edx
c0001f0f:	03 41 3c             	add    eax,DWORD PTR [ecx+0x3c]
c0001f12:	13 51 40             	adc    edx,DWORD PTR [ecx+0x40]
c0001f15:	c3                   	ret    
c0001f16:	31 c0                	xor    eax,eax
c0001f18:	31 d2                	xor    edx,edx
c0001f1a:	c3                   	ret    

c0001f1b <clmt_clust>:
c0001f1b:	57                   	push   edi
c0001f1c:	89 cf                	mov    edi,ecx
c0001f1e:	56                   	push   esi
c0001f1f:	89 d6                	mov    esi,edx
c0001f21:	53                   	push   ebx
c0001f22:	0f ac fe 09          	shrd   esi,edi,0x9
c0001f26:	8b 48 4c             	mov    ecx,DWORD PTR [eax+0x4c]
c0001f29:	89 f2                	mov    edx,esi
c0001f2b:	8b 00                	mov    eax,DWORD PTR [eax]
c0001f2d:	c1 ef 09             	shr    edi,0x9
c0001f30:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0001f34:	8d 59 04             	lea    ebx,[ecx+0x4]
c0001f37:	89 f9                	mov    ecx,edi
c0001f39:	31 ff                	xor    edi,edi
c0001f3b:	57                   	push   edi
c0001f3c:	56                   	push   esi
c0001f3d:	51                   	push   ecx
c0001f3e:	52                   	push   edx
c0001f3f:	e8 58 4b 02 00       	call   c0026a9c <__udivdi3>
c0001f44:	83 c4 10             	add    esp,0x10
c0001f47:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001f49:	85 d2                	test   edx,edx
c0001f4b:	74 10                	je     c0001f5d <clmt_clust+0x42>
c0001f4d:	39 d0                	cmp    eax,edx
c0001f4f:	72 07                	jb     c0001f58 <clmt_clust+0x3d>
c0001f51:	29 d0                	sub    eax,edx
c0001f53:	83 c3 08             	add    ebx,0x8
c0001f56:	eb ef                	jmp    c0001f47 <clmt_clust+0x2c>
c0001f58:	03 43 04             	add    eax,DWORD PTR [ebx+0x4]
c0001f5b:	89 c2                	mov    edx,eax
c0001f5d:	5b                   	pop    ebx
c0001f5e:	89 d0                	mov    eax,edx
c0001f60:	5e                   	pop    esi
c0001f61:	5f                   	pop    edi
c0001f62:	c3                   	ret    

c0001f63 <pick_lfn>:
c0001f63:	55                   	push   ebp
c0001f64:	57                   	push   edi
c0001f65:	56                   	push   esi
c0001f66:	89 d6                	mov    esi,edx
c0001f68:	53                   	push   ebx
c0001f69:	89 c3                	mov    ebx,eax
c0001f6b:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001f6e:	e8 ee fc ff ff       	call   c0001c61 <ld_word>
c0001f73:	66 85 c0             	test   ax,ax
c0001f76:	74 04                	je     c0001f7c <pick_lfn+0x19>
c0001f78:	31 c0                	xor    eax,eax
c0001f7a:	eb 5c                	jmp    c0001fd8 <pick_lfn+0x75>
c0001f7c:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0001f7f:	bd 01 00 00 00       	mov    ebp,0x1
c0001f84:	83 e1 bf             	and    ecx,0xffffffbf
c0001f87:	31 ff                	xor    edi,edi
c0001f89:	49                   	dec    ecx
c0001f8a:	6b c9 0d             	imul   ecx,ecx,0xd
c0001f8d:	0f b6 87 20 95 02 c0 	movzx  eax,BYTE PTR [edi-0x3ffd6ae0]
c0001f94:	01 f0                	add    eax,esi
c0001f96:	e8 c6 fc ff ff       	call   c0001c61 <ld_word>
c0001f9b:	66 85 ed             	test   bp,bp
c0001f9e:	74 11                	je     c0001fb1 <pick_lfn+0x4e>
c0001fa0:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001fa6:	77 d0                	ja     c0001f78 <pick_lfn+0x15>
c0001fa8:	66 89 04 4b          	mov    WORD PTR [ebx+ecx*2],ax
c0001fac:	89 c5                	mov    ebp,eax
c0001fae:	41                   	inc    ecx
c0001faf:	eb 04                	jmp    c0001fb5 <pick_lfn+0x52>
c0001fb1:	66 40                	inc    ax
c0001fb3:	75 c3                	jne    c0001f78 <pick_lfn+0x15>
c0001fb5:	47                   	inc    edi
c0001fb6:	83 ff 0d             	cmp    edi,0xd
c0001fb9:	75 d2                	jne    c0001f8d <pick_lfn+0x2a>
c0001fbb:	f6 06 40             	test   BYTE PTR [esi],0x40
c0001fbe:	74 13                	je     c0001fd3 <pick_lfn+0x70>
c0001fc0:	66 85 ed             	test   bp,bp
c0001fc3:	74 0e                	je     c0001fd3 <pick_lfn+0x70>
c0001fc5:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001fcb:	77 ab                	ja     c0001f78 <pick_lfn+0x15>
c0001fcd:	66 c7 04 4b 00 00    	mov    WORD PTR [ebx+ecx*2],0x0
c0001fd3:	b8 01 00 00 00       	mov    eax,0x1
c0001fd8:	5b                   	pop    ebx
c0001fd9:	5e                   	pop    esi
c0001fda:	5f                   	pop    edi
c0001fdb:	5d                   	pop    ebp
c0001fdc:	c3                   	ret    

c0001fdd <put_lfn>:
c0001fdd:	55                   	push   ebp
c0001fde:	31 ed                	xor    ebp,ebp
c0001fe0:	57                   	push   edi
c0001fe1:	89 d7                	mov    edi,edx
c0001fe3:	56                   	push   esi
c0001fe4:	31 f6                	xor    esi,esi
c0001fe6:	53                   	push   ebx
c0001fe7:	83 ec 08             	sub    esp,0x8
c0001fea:	89 04 24             	mov    DWORD PTR [esp],eax
c0001fed:	88 4c 24 07          	mov    BYTE PTR [esp+0x7],cl
c0001ff1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0001ff5:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c0001ffb:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0001ffe:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002001:	31 d2                	xor    edx,edx
c0002003:	e8 cb fc ff ff       	call   c0001cd3 <st_word>
c0002008:	0f b6 d9             	movzx  ebx,cl
c000200b:	4b                   	dec    ebx
c000200c:	6b db 0d             	imul   ebx,ebx,0xd
c000200f:	66 83 fe ff          	cmp    si,0xffff
c0002013:	74 08                	je     c000201d <put_lfn+0x40>
c0002015:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002018:	66 8b 34 58          	mov    si,WORD PTR [eax+ebx*2]
c000201c:	43                   	inc    ebx
c000201d:	0f b6 85 20 95 02 c0 	movzx  eax,BYTE PTR [ebp-0x3ffd6ae0]
c0002024:	0f b7 d6             	movzx  edx,si
c0002027:	01 f8                	add    eax,edi
c0002029:	e8 a5 fc ff ff       	call   c0001cd3 <st_word>
c000202e:	66 85 f6             	test   si,si
c0002031:	75 03                	jne    c0002036 <put_lfn+0x59>
c0002033:	83 ce ff             	or     esi,0xffffffff
c0002036:	45                   	inc    ebp
c0002037:	83 fd 0d             	cmp    ebp,0xd
c000203a:	75 d3                	jne    c000200f <put_lfn+0x32>
c000203c:	66 46                	inc    si
c000203e:	74 0a                	je     c000204a <put_lfn+0x6d>
c0002040:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002043:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002048:	75 09                	jne    c0002053 <put_lfn+0x76>
c000204a:	88 c8                	mov    al,cl
c000204c:	83 c8 40             	or     eax,0x40
c000204f:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0002053:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0002057:	88 07                	mov    BYTE PTR [edi],al
c0002059:	83 c4 08             	add    esp,0x8
c000205c:	5b                   	pop    ebx
c000205d:	5e                   	pop    esi
c000205e:	5f                   	pop    edi
c000205f:	5d                   	pop    ebp
c0002060:	c3                   	ret    

c0002061 <gen_numname>:
c0002061:	57                   	push   edi
c0002062:	89 cf                	mov    edi,ecx
c0002064:	56                   	push   esi
c0002065:	b9 0b 00 00 00       	mov    ecx,0xb
c000206a:	53                   	push   ebx
c000206b:	89 c6                	mov    esi,eax
c000206d:	83 ec 10             	sub    esp,0x10
c0002070:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0002074:	e8 67 fc ff ff       	call   c0001ce0 <mem_cpy>
c0002079:	83 fb 05             	cmp    ebx,0x5
c000207c:	76 2d                	jbe    c00020ab <gen_numname+0x4a>
c000207e:	66 8b 07             	mov    ax,WORD PTR [edi]
c0002081:	66 85 c0             	test   ax,ax
c0002084:	74 25                	je     c00020ab <gen_numname+0x4a>
c0002086:	83 c7 02             	add    edi,0x2
c0002089:	ba 10 00 00 00       	mov    edx,0x10
c000208e:	01 db                	add    ebx,ebx
c0002090:	89 c1                	mov    ecx,eax
c0002092:	66 d1 e8             	shr    ax,1
c0002095:	83 e1 01             	and    ecx,0x1
c0002098:	01 cb                	add    ebx,ecx
c000209a:	0f ba e3 10          	bt     ebx,0x10
c000209e:	73 06                	jae    c00020a6 <gen_numname+0x45>
c00020a0:	81 f3 21 10 01 00    	xor    ebx,0x11021
c00020a6:	4a                   	dec    edx
c00020a7:	75 e5                	jne    c000208e <gen_numname+0x2d>
c00020a9:	eb d3                	jmp    c000207e <gen_numname+0x1d>
c00020ab:	b8 07 00 00 00       	mov    eax,0x7
c00020b0:	88 d9                	mov    cl,bl
c00020b2:	83 e1 0f             	and    ecx,0xf
c00020b5:	8d 51 30             	lea    edx,[ecx+0x30]
c00020b8:	80 fa 39             	cmp    dl,0x39
c00020bb:	76 03                	jbe    c00020c0 <gen_numname+0x5f>
c00020bd:	8d 51 37             	lea    edx,[ecx+0x37]
c00020c0:	8d 48 ff             	lea    ecx,[eax-0x1]
c00020c3:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c00020c7:	89 da                	mov    edx,ebx
c00020c9:	c1 ea 04             	shr    edx,0x4
c00020cc:	83 fb 0f             	cmp    ebx,0xf
c00020cf:	76 06                	jbe    c00020d7 <gen_numname+0x76>
c00020d1:	89 c8                	mov    eax,ecx
c00020d3:	89 d3                	mov    ebx,edx
c00020d5:	eb d9                	jmp    c00020b0 <gen_numname+0x4f>
c00020d7:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c00020dc:	31 d2                	xor    edx,edx
c00020de:	8d 58 fe             	lea    ebx,[eax-0x2]
c00020e1:	8d 04 16             	lea    eax,[esi+edx*1]
c00020e4:	39 ca                	cmp    edx,ecx
c00020e6:	73 18                	jae    c0002100 <gen_numname+0x9f>
c00020e8:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00020eb:	3c 20                	cmp    al,0x20
c00020ed:	74 11                	je     c0002100 <gen_numname+0x9f>
c00020ef:	e8 41 fc ff ff       	call   c0001d35 <dbc_1st>
c00020f4:	85 c0                	test   eax,eax
c00020f6:	74 05                	je     c00020fd <gen_numname+0x9c>
c00020f8:	39 d3                	cmp    ebx,edx
c00020fa:	74 04                	je     c0002100 <gen_numname+0x9f>
c00020fc:	42                   	inc    edx
c00020fd:	42                   	inc    edx
c00020fe:	eb e1                	jmp    c00020e1 <gen_numname+0x80>
c0002100:	b0 20                	mov    al,0x20
c0002102:	83 f9 07             	cmp    ecx,0x7
c0002105:	77 05                	ja     c000210c <gen_numname+0xab>
c0002107:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c000210b:	41                   	inc    ecx
c000210c:	42                   	inc    edx
c000210d:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c0002111:	83 fa 07             	cmp    edx,0x7
c0002114:	76 ea                	jbe    c0002100 <gen_numname+0x9f>
c0002116:	83 c4 10             	add    esp,0x10
c0002119:	5b                   	pop    ebx
c000211a:	5e                   	pop    esi
c000211b:	5f                   	pop    edi
c000211c:	c3                   	ret    

c000211d <sum_sfn>:
c000211d:	31 c9                	xor    ecx,ecx
c000211f:	31 d2                	xor    edx,edx
c0002121:	d0 ca                	ror    dl,1
c0002123:	02 14 08             	add    dl,BYTE PTR [eax+ecx*1]
c0002126:	41                   	inc    ecx
c0002127:	83 f9 0b             	cmp    ecx,0xb
c000212a:	75 f5                	jne    c0002121 <sum_sfn+0x4>
c000212c:	88 d0                	mov    al,dl
c000212e:	c3                   	ret    

c000212f <xdir_sum>:
c000212f:	56                   	push   esi
c0002130:	31 c9                	xor    ecx,ecx
c0002132:	53                   	push   ebx
c0002133:	31 d2                	xor    edx,edx
c0002135:	0f b6 58 01          	movzx  ebx,BYTE PTR [eax+0x1]
c0002139:	43                   	inc    ebx
c000213a:	c1 e3 05             	shl    ebx,0x5
c000213d:	83 fa 02             	cmp    edx,0x2
c0002140:	74 0b                	je     c000214d <xdir_sum+0x1e>
c0002142:	0f b6 34 10          	movzx  esi,BYTE PTR [eax+edx*1]
c0002146:	66 d1 c9             	ror    cx,1
c0002149:	01 f1                	add    ecx,esi
c000214b:	eb 05                	jmp    c0002152 <xdir_sum+0x23>
c000214d:	ba 03 00 00 00       	mov    edx,0x3
c0002152:	42                   	inc    edx
c0002153:	39 d3                	cmp    ebx,edx
c0002155:	77 e6                	ja     c000213d <xdir_sum+0xe>
c0002157:	89 c8                	mov    eax,ecx
c0002159:	5b                   	pop    ebx
c000215a:	5e                   	pop    esi
c000215b:	c3                   	ret    

c000215c <xsum32>:
c000215c:	d1 ca                	ror    edx,1
c000215e:	0f b6 c0             	movzx  eax,al
c0002161:	01 d0                	add    eax,edx
c0002163:	c3                   	ret    

c0002164 <get_xfileinfo>:
c0002164:	55                   	push   ebp
c0002165:	31 c9                	xor    ecx,ecx
c0002167:	57                   	push   edi
c0002168:	bd 40 00 00 00       	mov    ebp,0x40
c000216d:	56                   	push   esi
c000216e:	31 ff                	xor    edi,edi
c0002170:	53                   	push   ebx
c0002171:	89 c6                	mov    esi,eax
c0002173:	83 ec 0c             	sub    esp,0xc
c0002176:	89 d3                	mov    ebx,edx
c0002178:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000217f:	0f b6 46 23          	movzx  eax,BYTE PTR [esi+0x23]
c0002183:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0002186:	76 6d                	jbe    c00021f5 <get_xfileinfo+0x91>
c0002188:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c000218e:	76 0b                	jbe    c000219b <get_xfileinfo+0x37>
c0002190:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0002194:	bf 01 00 00 00       	mov    edi,0x1
c0002199:	eb 63                	jmp    c00021fe <get_xfileinfo+0x9a>
c000219b:	f7 c5 1f 00 00 00    	test   ebp,0x1f
c00021a1:	75 03                	jne    c00021a6 <get_xfileinfo+0x42>
c00021a3:	83 c5 02             	add    ebp,0x2
c00021a6:	8d 04 2e             	lea    eax,[esi+ebp*1]
c00021a9:	83 c5 02             	add    ebp,0x2
c00021ac:	e8 b0 fa ff ff       	call   c0001c61 <ld_word>
c00021b1:	ff 04 24             	inc    DWORD PTR [esp]
c00021b4:	66 85 c9             	test   cx,cx
c00021b7:	75 0d                	jne    c00021c6 <get_xfileinfo+0x62>
c00021b9:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c00021bf:	66 81 fa ff 07       	cmp    dx,0x7ff
c00021c4:	76 2b                	jbe    c00021f1 <get_xfileinfo+0x8d>
c00021c6:	c1 e1 10             	shl    ecx,0x10
c00021c9:	ba ff 00 00 00       	mov    edx,0xff
c00021ce:	0f b7 c0             	movzx  eax,ax
c00021d1:	29 fa                	sub    edx,edi
c00021d3:	09 c8                	or     eax,ecx
c00021d5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00021d9:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c00021dd:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00021e1:	e8 1b fc ff ff       	call   c0001e01 <put_utf>
c00021e6:	84 c0                	test   al,al
c00021e8:	74 a6                	je     c0002190 <get_xfileinfo+0x2c>
c00021ea:	0f b6 c0             	movzx  eax,al
c00021ed:	01 c7                	add    edi,eax
c00021ef:	31 c0                	xor    eax,eax
c00021f1:	89 c1                	mov    ecx,eax
c00021f3:	eb 8a                	jmp    c000217f <get_xfileinfo+0x1b>
c00021f5:	85 ff                	test   edi,edi
c00021f7:	74 97                	je     c0002190 <get_xfileinfo+0x2c>
c00021f9:	66 85 c9             	test   cx,cx
c00021fc:	75 92                	jne    c0002190 <get_xfileinfo+0x2c>
c00021fe:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0002203:	31 c0                	xor    eax,eax
c0002205:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0002209:	31 d2                	xor    edx,edx
c000220b:	8a 4e 04             	mov    cl,BYTE PTR [esi+0x4]
c000220e:	88 4b 0c             	mov    BYTE PTR [ebx+0xc],cl
c0002211:	80 e1 10             	and    cl,0x10
c0002214:	75 08                	jne    c000221e <get_xfileinfo+0xba>
c0002216:	8d 46 38             	lea    eax,[esi+0x38]
c0002219:	e8 68 fa ff ff       	call   c0001c86 <ld_qword>
c000221e:	89 03                	mov    DWORD PTR [ebx],eax
c0002220:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0002223:	8d 46 0c             	lea    eax,[esi+0xc]
c0002226:	e8 36 fa ff ff       	call   c0001c61 <ld_word>
c000222b:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c000222f:	8d 46 0e             	lea    eax,[esi+0xe]
c0002232:	e8 2a fa ff ff       	call   c0001c61 <ld_word>
c0002237:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c000223b:	83 c4 0c             	add    esp,0xc
c000223e:	5b                   	pop    ebx
c000223f:	5e                   	pop    esi
c0002240:	5f                   	pop    edi
c0002241:	5d                   	pop    ebp
c0002242:	c3                   	ret    

c0002243 <get_ldnumber>:
c0002243:	8b 10                	mov    edx,DWORD PTR [eax]
c0002245:	85 d2                	test   edx,edx
c0002247:	74 14                	je     c000225d <get_ldnumber+0x1a>
c0002249:	56                   	push   esi
c000224a:	53                   	push   ebx
c000224b:	89 d3                	mov    ebx,edx
c000224d:	43                   	inc    ebx
c000224e:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c0002251:	80 f9 1f             	cmp    cl,0x1f
c0002254:	76 0d                	jbe    c0002263 <get_ldnumber+0x20>
c0002256:	80 f9 3a             	cmp    cl,0x3a
c0002259:	75 f2                	jne    c000224d <get_ldnumber+0xa>
c000225b:	eb 0a                	jmp    c0002267 <get_ldnumber+0x24>
c000225d:	83 c9 ff             	or     ecx,0xffffffff
c0002260:	89 c8                	mov    eax,ecx
c0002262:	c3                   	ret    
c0002263:	31 c9                	xor    ecx,ecx
c0002265:	eb 24                	jmp    c000228b <get_ldnumber+0x48>
c0002267:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c000226a:	8d 4e d0             	lea    ecx,[esi-0x30]
c000226d:	80 f9 09             	cmp    cl,0x9
c0002270:	77 16                	ja     c0002288 <get_ldnumber+0x45>
c0002272:	83 c2 02             	add    edx,0x2
c0002275:	83 c9 ff             	or     ecx,0xffffffff
c0002278:	39 d3                	cmp    ebx,edx
c000227a:	75 0f                	jne    c000228b <get_ldnumber+0x48>
c000227c:	89 f2                	mov    edx,esi
c000227e:	89 18                	mov    DWORD PTR [eax],ebx
c0002280:	0f be ca             	movsx  ecx,dl
c0002283:	83 e9 30             	sub    ecx,0x30
c0002286:	eb 03                	jmp    c000228b <get_ldnumber+0x48>
c0002288:	83 c9 ff             	or     ecx,0xffffffff
c000228b:	89 c8                	mov    eax,ecx
c000228d:	5b                   	pop    ebx
c000228e:	5e                   	pop    esi
c000228f:	c3                   	ret    

c0002290 <crc32>:
c0002290:	56                   	push   esi
c0002291:	89 d6                	mov    esi,edx
c0002293:	53                   	push   ebx
c0002294:	b2 01                	mov    dl,0x1
c0002296:	bb 08 00 00 00       	mov    ebx,0x8
c000229b:	89 f1                	mov    ecx,esi
c000229d:	84 d1                	test   cl,dl
c000229f:	0f 95 c1             	setne  cl
c00022a2:	0f b6 c9             	movzx  ecx,cl
c00022a5:	31 c1                	xor    ecx,eax
c00022a7:	89 c8                	mov    eax,ecx
c00022a9:	d1 e8                	shr    eax,1
c00022ab:	80 e1 01             	and    cl,0x1
c00022ae:	74 05                	je     c00022b5 <crc32+0x25>
c00022b0:	35 20 83 b8 ed       	xor    eax,0xedb88320
c00022b5:	d1 e2                	shl    edx,1
c00022b7:	4b                   	dec    ebx
c00022b8:	75 e1                	jne    c000229b <crc32+0xb>
c00022ba:	5b                   	pop    ebx
c00022bb:	5e                   	pop    esi
c00022bc:	c3                   	ret    

c00022bd <test_gpt_header>:
c00022bd:	55                   	push   ebp
c00022be:	b9 10 00 00 00       	mov    ecx,0x10
c00022c3:	57                   	push   edi
c00022c4:	ba 20 94 02 c0       	mov    edx,0xc0029420
c00022c9:	56                   	push   esi
c00022ca:	31 ff                	xor    edi,edi
c00022cc:	53                   	push   ebx
c00022cd:	89 c3                	mov    ebx,eax
c00022cf:	e8 2c fa ff ff       	call   c0001d00 <mem_cmp>
c00022d4:	85 c0                	test   eax,eax
c00022d6:	75 55                	jne    c000232d <test_gpt_header+0x70>
c00022d8:	89 c7                	mov    edi,eax
c00022da:	bd f0 ff ff ff       	mov    ebp,0xfffffff0
c00022df:	83 ce ff             	or     esi,0xffffffff
c00022e2:	31 d2                	xor    edx,edx
c00022e4:	83 fd 03             	cmp    ebp,0x3
c00022e7:	76 05                	jbe    c00022ee <test_gpt_header+0x31>
c00022e9:	0f b6 54 2b 10       	movzx  edx,BYTE PTR [ebx+ebp*1+0x10]
c00022ee:	89 f0                	mov    eax,esi
c00022f0:	45                   	inc    ebp
c00022f1:	e8 9a ff ff ff       	call   c0002290 <crc32>
c00022f6:	83 fd 4c             	cmp    ebp,0x4c
c00022f9:	89 c6                	mov    esi,eax
c00022fb:	75 e5                	jne    c00022e2 <test_gpt_header+0x25>
c00022fd:	8d 43 10             	lea    eax,[ebx+0x10]
c0002300:	f7 d6                	not    esi
c0002302:	e8 67 f9 ff ff       	call   c0001c6e <ld_dword>
c0002307:	39 c6                	cmp    esi,eax
c0002309:	75 22                	jne    c000232d <test_gpt_header+0x70>
c000230b:	8d 43 54             	lea    eax,[ebx+0x54]
c000230e:	e8 5b f9 ff ff       	call   c0001c6e <ld_dword>
c0002313:	83 c0 80             	add    eax,0xffffff80
c0002316:	75 15                	jne    c000232d <test_gpt_header+0x70>
c0002318:	8d 43 50             	lea    eax,[ebx+0x50]
c000231b:	e8 4e f9 ff ff       	call   c0001c6e <ld_dword>
c0002320:	3d 80 00 00 00       	cmp    eax,0x80
c0002325:	0f 96 c0             	setbe  al
c0002328:	0f b6 c0             	movzx  eax,al
c000232b:	89 c7                	mov    edi,eax
c000232d:	5b                   	pop    ebx
c000232e:	89 f8                	mov    eax,edi
c0002330:	5e                   	pop    esi
c0002331:	5f                   	pop    edi
c0002332:	5d                   	pop    ebp
c0002333:	c3                   	ret    

c0002334 <make_rand>:
c0002334:	56                   	push   esi
c0002335:	85 c0                	test   eax,eax
c0002337:	53                   	push   ebx
c0002338:	75 05                	jne    c000233f <make_rand+0xb>
c000233a:	b8 01 00 00 00       	mov    eax,0x1
c000233f:	01 d1                	add    ecx,edx
c0002341:	bb 08 00 00 00       	mov    ebx,0x8
c0002346:	89 c6                	mov    esi,eax
c0002348:	d1 e8                	shr    eax,1
c000234a:	83 e6 01             	and    esi,0x1
c000234d:	85 f6                	test   esi,esi
c000234f:	74 05                	je     c0002356 <make_rand+0x22>
c0002351:	35 00 00 00 a3       	xor    eax,0xa3000000
c0002356:	4b                   	dec    ebx
c0002357:	75 ed                	jne    c0002346 <make_rand+0x12>
c0002359:	42                   	inc    edx
c000235a:	88 42 ff             	mov    BYTE PTR [edx-0x1],al
c000235d:	39 ca                	cmp    edx,ecx
c000235f:	75 e0                	jne    c0002341 <make_rand+0xd>
c0002361:	5b                   	pop    ebx
c0002362:	5e                   	pop    esi
c0002363:	c3                   	ret    

c0002364 <validate>:
c0002364:	56                   	push   esi
c0002365:	53                   	push   ebx
c0002366:	89 d6                	mov    esi,edx
c0002368:	51                   	push   ecx
c0002369:	85 c0                	test   eax,eax
c000236b:	75 09                	jne    c0002376 <validate+0x12>
c000236d:	b8 09 00 00 00       	mov    eax,0x9
c0002372:	31 c9                	xor    ecx,ecx
c0002374:	eb 2f                	jmp    c00023a5 <validate+0x41>
c0002376:	89 c3                	mov    ebx,eax
c0002378:	8b 00                	mov    eax,DWORD PTR [eax]
c000237a:	85 c0                	test   eax,eax
c000237c:	74 ef                	je     c000236d <validate+0x9>
c000237e:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0002381:	74 ea                	je     c000236d <validate+0x9>
c0002383:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c0002387:	66 39 53 04          	cmp    WORD PTR [ebx+0x4],dx
c000238b:	75 e0                	jne    c000236d <validate+0x9>
c000238d:	83 ec 0c             	sub    esp,0xc
c0002390:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0002394:	50                   	push   eax
c0002395:	e8 76 f8 ff ff       	call   c0001c10 <disk_status>
c000239a:	83 c4 10             	add    esp,0x10
c000239d:	a8 01                	test   al,0x1
c000239f:	75 cc                	jne    c000236d <validate+0x9>
c00023a1:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00023a3:	31 c0                	xor    eax,eax
c00023a5:	89 0e                	mov    DWORD PTR [esi],ecx
c00023a7:	5a                   	pop    edx
c00023a8:	5b                   	pop    ebx
c00023a9:	5e                   	pop    esi
c00023aa:	c3                   	ret    

c00023ab <sync_window>:
c00023ab:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c00023af:	0f 84 85 00 00 00    	je     c000243a <sync_window+0x8f>
c00023b5:	55                   	push   ebp
c00023b6:	8d 68 54             	lea    ebp,[eax+0x54]
c00023b9:	57                   	push   edi
c00023ba:	56                   	push   esi
c00023bb:	53                   	push   ebx
c00023bc:	89 c3                	mov    ebx,eax
c00023be:	83 ec 28             	sub    esp,0x28
c00023c1:	6a 01                	push   0x1
c00023c3:	ff 70 50             	push   DWORD PTR [eax+0x50]
c00023c6:	ff 70 4c             	push   DWORD PTR [eax+0x4c]
c00023c9:	55                   	push   ebp
c00023ca:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00023ce:	50                   	push   eax
c00023cf:	e8 58 f8 ff ff       	call   c0001c2c <disk_write>
c00023d4:	83 c4 20             	add    esp,0x20
c00023d7:	ba 01 00 00 00       	mov    edx,0x1
c00023dc:	85 c0                	test   eax,eax
c00023de:	75 50                	jne    c0002430 <sync_window+0x85>
c00023e0:	31 ff                	xor    edi,edi
c00023e2:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c00023e5:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00023e9:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00023ed:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c00023f0:	8b 53 50             	mov    edx,DWORD PTR [ebx+0x50]
c00023f3:	89 c6                	mov    esi,eax
c00023f5:	89 d7                	mov    edi,edx
c00023f7:	2b 73 2c             	sub    esi,DWORD PTR [ebx+0x2c]
c00023fa:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c00023fe:	1b 7b 30             	sbb    edi,DWORD PTR [ebx+0x30]
c0002401:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0002405:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0002409:	73 23                	jae    c000242e <sync_window+0x83>
c000240b:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c000240f:	75 1d                	jne    c000242e <sync_window+0x83>
c0002411:	83 ec 0c             	sub    esp,0xc
c0002414:	6a 01                	push   0x1
c0002416:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c000241a:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c000241e:	52                   	push   edx
c000241f:	50                   	push   eax
c0002420:	55                   	push   ebp
c0002421:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002425:	50                   	push   eax
c0002426:	e8 01 f8 ff ff       	call   c0001c2c <disk_write>
c000242b:	83 c4 20             	add    esp,0x20
c000242e:	31 d2                	xor    edx,edx
c0002430:	83 c4 1c             	add    esp,0x1c
c0002433:	89 d0                	mov    eax,edx
c0002435:	5b                   	pop    ebx
c0002436:	5e                   	pop    esi
c0002437:	5f                   	pop    edi
c0002438:	5d                   	pop    ebp
c0002439:	c3                   	ret    
c000243a:	31 d2                	xor    edx,edx
c000243c:	89 d0                	mov    eax,edx
c000243e:	c3                   	ret    

c000243f <move_window>:
c000243f:	56                   	push   esi
c0002440:	53                   	push   ebx
c0002441:	89 c3                	mov    ebx,eax
c0002443:	83 ec 14             	sub    esp,0x14
c0002446:	39 48 50             	cmp    DWORD PTR [eax+0x50],ecx
c0002449:	75 07                	jne    c0002452 <move_window+0x13>
c000244b:	31 f6                	xor    esi,esi
c000244d:	39 50 4c             	cmp    DWORD PTR [eax+0x4c],edx
c0002450:	74 59                	je     c00024ab <move_window+0x6c>
c0002452:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0002456:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000245a:	89 d8                	mov    eax,ebx
c000245c:	e8 4a ff ff ff       	call   c00023ab <sync_window>
c0002461:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002465:	89 c6                	mov    esi,eax
c0002467:	85 c0                	test   eax,eax
c0002469:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000246d:	75 3c                	jne    c00024ab <move_window+0x6c>
c000246f:	83 ec 0c             	sub    esp,0xc
c0002472:	8d 43 54             	lea    eax,[ebx+0x54]
c0002475:	6a 01                	push   0x1
c0002477:	51                   	push   ecx
c0002478:	52                   	push   edx
c0002479:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000247d:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0002481:	50                   	push   eax
c0002482:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002486:	50                   	push   eax
c0002487:	e8 8a f7 ff ff       	call   c0001c16 <disk_read>
c000248c:	83 c4 20             	add    esp,0x20
c000248f:	85 c0                	test   eax,eax
c0002491:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002495:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002499:	74 0a                	je     c00024a5 <move_window+0x66>
c000249b:	83 ca ff             	or     edx,0xffffffff
c000249e:	be 01 00 00 00       	mov    esi,0x1
c00024a3:	89 d1                	mov    ecx,edx
c00024a5:	89 53 4c             	mov    DWORD PTR [ebx+0x4c],edx
c00024a8:	89 4b 50             	mov    DWORD PTR [ebx+0x50],ecx
c00024ab:	89 f0                	mov    eax,esi
c00024ad:	83 c4 14             	add    esp,0x14
c00024b0:	5b                   	pop    ebx
c00024b1:	5e                   	pop    esi
c00024b2:	c3                   	ret    

c00024b3 <check_fs>:
c00024b3:	53                   	push   ebx
c00024b4:	89 c3                	mov    ebx,eax
c00024b6:	83 ec 08             	sub    esp,0x8
c00024b9:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c00024bd:	c7 40 4c ff ff ff ff 	mov    DWORD PTR [eax+0x4c],0xffffffff
c00024c4:	c7 40 50 ff ff ff ff 	mov    DWORD PTR [eax+0x50],0xffffffff
c00024cb:	e8 6f ff ff ff       	call   c000243f <move_window>
c00024d0:	ba 04 00 00 00       	mov    edx,0x4
c00024d5:	85 c0                	test   eax,eax
c00024d7:	0f 85 89 00 00 00    	jne    c0002566 <check_fs+0xb3>
c00024dd:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00024e3:	e8 79 f7 ff ff       	call   c0001c61 <ld_word>
c00024e8:	ba 03 00 00 00       	mov    edx,0x3
c00024ed:	66 3d 55 aa          	cmp    ax,0xaa55
c00024f1:	75 73                	jne    c0002566 <check_fs+0xb3>
c00024f3:	ba 40 95 02 c0       	mov    edx,0xc0029540
c00024f8:	8d 43 54             	lea    eax,[ebx+0x54]
c00024fb:	b9 0b 00 00 00       	mov    ecx,0xb
c0002500:	e8 fb f7 ff ff       	call   c0001d00 <mem_cmp>
c0002505:	ba 01 00 00 00       	mov    edx,0x1
c000250a:	85 c0                	test   eax,eax
c000250c:	74 58                	je     c0002566 <check_fs+0xb3>
c000250e:	8a 43 54             	mov    al,BYTE PTR [ebx+0x54]
c0002511:	8d 50 18             	lea    edx,[eax+0x18]
c0002514:	80 fa 01             	cmp    dl,0x1
c0002517:	76 09                	jbe    c0002522 <check_fs+0x6f>
c0002519:	ba 02 00 00 00       	mov    edx,0x2
c000251e:	3c eb                	cmp    al,0xeb
c0002520:	75 44                	jne    c0002566 <check_fs+0xb3>
c0002522:	ba f8 ca 02 c0       	mov    edx,0xc002caf8
c0002527:	8d 83 8a 00 00 00    	lea    eax,[ebx+0x8a]
c000252d:	b9 03 00 00 00       	mov    ecx,0x3
c0002532:	e8 c9 f7 ff ff       	call   c0001d00 <mem_cmp>
c0002537:	31 d2                	xor    edx,edx
c0002539:	85 c0                	test   eax,eax
c000253b:	74 29                	je     c0002566 <check_fs+0xb3>
c000253d:	ba 4c 95 02 c0       	mov    edx,0xc002954c
c0002542:	8d 83 a6 00 00 00    	lea    eax,[ebx+0xa6]
c0002548:	b9 05 00 00 00       	mov    ecx,0x5
c000254d:	e8 ae f7 ff ff       	call   c0001d00 <mem_cmp>
c0002552:	31 d2                	xor    edx,edx
c0002554:	85 c0                	test   eax,eax
c0002556:	74 0e                	je     c0002566 <check_fs+0xb3>
c0002558:	31 d2                	xor    edx,edx
c000255a:	80 bb 96 00 00 00 28 	cmp    BYTE PTR [ebx+0x96],0x28
c0002561:	0f 95 c2             	setne  dl
c0002564:	01 d2                	add    edx,edx
c0002566:	89 d0                	mov    eax,edx
c0002568:	83 c4 08             	add    esp,0x8
c000256b:	5b                   	pop    ebx
c000256c:	c3                   	ret    

c000256d <find_volume>:
c000256d:	55                   	push   ebp
c000256e:	31 c9                	xor    ecx,ecx
c0002570:	57                   	push   edi
c0002571:	56                   	push   esi
c0002572:	89 d6                	mov    esi,edx
c0002574:	53                   	push   ebx
c0002575:	31 d2                	xor    edx,edx
c0002577:	83 ec 3c             	sub    esp,0x3c
c000257a:	89 c3                	mov    ebx,eax
c000257c:	e8 32 ff ff ff       	call   c00024b3 <check_fs>
c0002581:	83 f8 02             	cmp    eax,0x2
c0002584:	74 0e                	je     c0002594 <find_volume+0x27>
c0002586:	0f 87 5d 01 00 00    	ja     c00026e9 <find_volume+0x17c>
c000258c:	85 f6                	test   esi,esi
c000258e:	0f 84 55 01 00 00    	je     c00026e9 <find_volume+0x17c>
c0002594:	80 bb 16 02 00 00 ee 	cmp    BYTE PTR [ebx+0x216],0xee
c000259b:	0f 85 dd 00 00 00    	jne    c000267e <find_volume+0x111>
c00025a1:	31 c9                	xor    ecx,ecx
c00025a3:	ba 01 00 00 00       	mov    edx,0x1
c00025a8:	89 d8                	mov    eax,ebx
c00025aa:	e8 90 fe ff ff       	call   c000243f <move_window>
c00025af:	85 c0                	test   eax,eax
c00025b1:	74 0a                	je     c00025bd <find_volume+0x50>
c00025b3:	b8 04 00 00 00       	mov    eax,0x4
c00025b8:	e9 2c 01 00 00       	jmp    c00026e9 <find_volume+0x17c>
c00025bd:	8d 6b 54             	lea    ebp,[ebx+0x54]
c00025c0:	89 e8                	mov    eax,ebp
c00025c2:	e8 f6 fc ff ff       	call   c00022bd <test_gpt_header>
c00025c7:	85 c0                	test   eax,eax
c00025c9:	75 0a                	jne    c00025d5 <find_volume+0x68>
c00025cb:	b8 03 00 00 00       	mov    eax,0x3
c00025d0:	e9 14 01 00 00       	jmp    c00026e9 <find_volume+0x17c>
c00025d5:	8d 83 a4 00 00 00    	lea    eax,[ebx+0xa4]
c00025db:	e8 8e f6 ff ff       	call   c0001c6e <ld_dword>
c00025e0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00025e4:	8d 83 9c 00 00 00    	lea    eax,[ebx+0x9c]
c00025ea:	e8 97 f6 ff ff       	call   c0001c86 <ld_qword>
c00025ef:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00025f7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00025fb:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00025ff:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0002607:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000260b:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c000260f:	74 ba                	je     c00025cb <find_volume+0x5e>
c0002611:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0002615:	31 c9                	xor    ecx,ecx
c0002617:	c1 e7 07             	shl    edi,0x7
c000261a:	89 d8                	mov    eax,ebx
c000261c:	89 fa                	mov    edx,edi
c000261e:	c1 ea 09             	shr    edx,0x9
c0002621:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0002625:	13 4c 24 1c          	adc    ecx,DWORD PTR [esp+0x1c]
c0002629:	e8 11 fe ff ff       	call   c000243f <move_window>
c000262e:	85 c0                	test   eax,eax
c0002630:	75 81                	jne    c00025b3 <find_volume+0x46>
c0002632:	81 e7 80 01 00 00    	and    edi,0x180
c0002638:	b9 10 00 00 00       	mov    ecx,0x10
c000263d:	8d 44 3d 00          	lea    eax,[ebp+edi*1+0x0]
c0002641:	ba 30 95 02 c0       	mov    edx,0xc0029530
c0002646:	e8 b5 f6 ff ff       	call   c0001d00 <mem_cmp>
c000264b:	85 c0                	test   eax,eax
c000264d:	75 29                	jne    c0002678 <find_volume+0x10b>
c000264f:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0002653:	8d 44 3d 20          	lea    eax,[ebp+edi*1+0x20]
c0002657:	e8 2a f6 ff ff       	call   c0001c86 <ld_qword>
c000265c:	89 d1                	mov    ecx,edx
c000265e:	89 c2                	mov    edx,eax
c0002660:	89 d8                	mov    eax,ebx
c0002662:	e8 4c fe ff ff       	call   c00024b3 <check_fs>
c0002667:	85 f6                	test   esi,esi
c0002669:	75 07                	jne    c0002672 <find_volume+0x105>
c000266b:	83 f8 01             	cmp    eax,0x1
c000266e:	77 08                	ja     c0002678 <find_volume+0x10b>
c0002670:	eb 77                	jmp    c00026e9 <find_volume+0x17c>
c0002672:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0002676:	74 71                	je     c00026e9 <find_volume+0x17c>
c0002678:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000267c:	eb 89                	jmp    c0002607 <find_volume+0x9a>
c000267e:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0002682:	8d 83 5a 02 00 00    	lea    eax,[ebx+0x25a]
c0002688:	8d bb 1a 02 00 00    	lea    edi,[ebx+0x21a]
c000268e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002692:	89 cd                	mov    ebp,ecx
c0002694:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0002698:	89 f8                	mov    eax,edi
c000269a:	83 c7 10             	add    edi,0x10
c000269d:	e8 cc f5 ff ff       	call   c0001c6e <ld_dword>
c00026a2:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00026a6:	89 01                	mov    DWORD PTR [ecx],eax
c00026a8:	83 c1 04             	add    ecx,0x4
c00026ab:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c00026af:	75 e3                	jne    c0002694 <find_volume+0x127>
c00026b1:	31 ff                	xor    edi,edi
c00026b3:	85 f6                	test   esi,esi
c00026b5:	74 03                	je     c00026ba <find_volume+0x14d>
c00026b7:	8d 7e ff             	lea    edi,[esi-0x1]
c00026ba:	8b 54 bd 00          	mov    edx,DWORD PTR [ebp+edi*4+0x0]
c00026be:	85 d2                	test   edx,edx
c00026c0:	74 14                	je     c00026d6 <find_volume+0x169>
c00026c2:	31 c9                	xor    ecx,ecx
c00026c4:	89 d8                	mov    eax,ebx
c00026c6:	e8 e8 fd ff ff       	call   c00024b3 <check_fs>
c00026cb:	83 f8 01             	cmp    eax,0x1
c00026ce:	76 19                	jbe    c00026e9 <find_volume+0x17c>
c00026d0:	85 f6                	test   esi,esi
c00026d2:	74 0f                	je     c00026e3 <find_volume+0x176>
c00026d4:	eb 13                	jmp    c00026e9 <find_volume+0x17c>
c00026d6:	85 f6                	test   esi,esi
c00026d8:	0f 85 ed fe ff ff    	jne    c00025cb <find_volume+0x5e>
c00026de:	b8 03 00 00 00       	mov    eax,0x3
c00026e3:	47                   	inc    edi
c00026e4:	83 ff 03             	cmp    edi,0x3
c00026e7:	76 d1                	jbe    c00026ba <find_volume+0x14d>
c00026e9:	83 c4 3c             	add    esp,0x3c
c00026ec:	5b                   	pop    ebx
c00026ed:	5e                   	pop    esi
c00026ee:	5f                   	pop    edi
c00026ef:	5d                   	pop    ebp
c00026f0:	c3                   	ret    

c00026f1 <mount_volume>:
c00026f1:	55                   	push   ebp
c00026f2:	57                   	push   edi
c00026f3:	89 cf                	mov    edi,ecx
c00026f5:	56                   	push   esi
c00026f6:	53                   	push   ebx
c00026f7:	bb 0b 00 00 00       	mov    ebx,0xb
c00026fc:	83 ec 3c             	sub    esp,0x3c
c00026ff:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0002705:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0002709:	e8 35 fb ff ff       	call   c0002243 <get_ldnumber>
c000270e:	85 c0                	test   eax,eax
c0002710:	0f 88 3a 05 00 00    	js     c0002c50 <mount_volume+0x55f>
c0002716:	8b 2c 85 80 e6 02 c0 	mov    ebp,DWORD PTR [eax*4-0x3ffd1980]
c000271d:	89 c6                	mov    esi,eax
c000271f:	bb 0c 00 00 00       	mov    ebx,0xc
c0002724:	85 ed                	test   ebp,ebp
c0002726:	0f 84 24 05 00 00    	je     c0002c50 <mount_volume+0x55f>
c000272c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002730:	83 e7 fe             	and    edi,0xfffffffe
c0002733:	89 2a                	mov    DWORD PTR [edx],ebp
c0002735:	80 7d 00 00          	cmp    BYTE PTR [ebp+0x0],0x0
c0002739:	74 32                	je     c000276d <mount_volume+0x7c>
c000273b:	83 ec 0c             	sub    esp,0xc
c000273e:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0002742:	50                   	push   eax
c0002743:	e8 c8 f4 ff ff       	call   c0001c10 <disk_status>
c0002748:	83 c4 10             	add    esp,0x10
c000274b:	a8 01                	test   al,0x1
c000274d:	75 1e                	jne    c000276d <mount_volume+0x7c>
c000274f:	31 db                	xor    ebx,ebx
c0002751:	89 f9                	mov    ecx,edi
c0002753:	84 c9                	test   cl,cl
c0002755:	0f 84 f5 04 00 00    	je     c0002c50 <mount_volume+0x55f>
c000275b:	a8 04                	test   al,0x4
c000275d:	0f 84 ed 04 00 00    	je     c0002c50 <mount_volume+0x55f>
c0002763:	bb 0a 00 00 00       	mov    ebx,0xa
c0002768:	e9 e3 04 00 00       	jmp    c0002c50 <mount_volume+0x55f>
c000276d:	83 ec 0c             	sub    esp,0xc
c0002770:	89 f0                	mov    eax,esi
c0002772:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c0002776:	88 45 01             	mov    BYTE PTR [ebp+0x1],al
c0002779:	0f b6 f0             	movzx  esi,al
c000277c:	bb 03 00 00 00       	mov    ebx,0x3
c0002781:	56                   	push   esi
c0002782:	e8 8c f4 ff ff       	call   c0001c13 <disk_initialize>
c0002787:	83 c4 10             	add    esp,0x10
c000278a:	a8 01                	test   al,0x1
c000278c:	0f 85 be 04 00 00    	jne    c0002c50 <mount_volume+0x55f>
c0002792:	89 f9                	mov    ecx,edi
c0002794:	84 c9                	test   cl,cl
c0002796:	74 04                	je     c000279c <mount_volume+0xab>
c0002798:	a8 04                	test   al,0x4
c000279a:	75 c7                	jne    c0002763 <mount_volume+0x72>
c000279c:	31 d2                	xor    edx,edx
c000279e:	89 e8                	mov    eax,ebp
c00027a0:	e8 c8 fd ff ff       	call   c000256d <find_volume>
c00027a5:	83 f8 04             	cmp    eax,0x4
c00027a8:	75 0a                	jne    c00027b4 <mount_volume+0xc3>
c00027aa:	bb 01 00 00 00       	mov    ebx,0x1
c00027af:	e9 9c 04 00 00       	jmp    c0002c50 <mount_volume+0x55f>
c00027b4:	83 f8 01             	cmp    eax,0x1
c00027b7:	76 0a                	jbe    c00027c3 <mount_volume+0xd2>
c00027b9:	bb 0d 00 00 00       	mov    ebx,0xd
c00027be:	e9 8d 04 00 00       	jmp    c0002c50 <mount_volume+0x55f>
c00027c3:	8b 45 4c             	mov    eax,DWORD PTR [ebp+0x4c]
c00027c6:	8b 55 50             	mov    edx,DWORD PTR [ebp+0x50]
c00027c9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00027cd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00027d1:	75 17                	jne    c00027ea <mount_volume+0xf9>
c00027d3:	b8 0b 00 00 00       	mov    eax,0xb
c00027d8:	80 7c 05 54 00       	cmp    BYTE PTR [ebp+eax*1+0x54],0x0
c00027dd:	75 da                	jne    c00027b9 <mount_volume+0xc8>
c00027df:	40                   	inc    eax
c00027e0:	83 f8 40             	cmp    eax,0x40
c00027e3:	75 f3                	jne    c00027d8 <mount_volume+0xe7>
c00027e5:	e9 5a 02 00 00       	jmp    c0002a44 <mount_volume+0x353>
c00027ea:	8d 45 5f             	lea    eax,[ebp+0x5f]
c00027ed:	e8 6f f4 ff ff       	call   c0001c61 <ld_word>
c00027f2:	66 3d 00 02          	cmp    ax,0x200
c00027f6:	75 c1                	jne    c00027b9 <mount_volume+0xc8>
c00027f8:	8d 45 6a             	lea    eax,[ebp+0x6a]
c00027fb:	e8 61 f4 ff ff       	call   c0001c61 <ld_word>
c0002800:	0f b7 c0             	movzx  eax,ax
c0002803:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002807:	85 c0                	test   eax,eax
c0002809:	75 0c                	jne    c0002817 <mount_volume+0x126>
c000280b:	8d 45 78             	lea    eax,[ebp+0x78]
c000280e:	e8 5b f4 ff ff       	call   c0001c6e <ld_dword>
c0002813:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002817:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000281b:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c000281e:	8a 45 64             	mov    al,BYTE PTR [ebp+0x64]
c0002821:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c0002825:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002828:	48                   	dec    eax
c0002829:	3c 01                	cmp    al,0x1
c000282b:	77 8c                	ja     c00027b9 <mount_volume+0xc8>
c000282d:	0f b6 45 61          	movzx  eax,BYTE PTR [ebp+0x61]
c0002831:	89 c3                	mov    ebx,eax
c0002833:	66 89 45 0a          	mov    WORD PTR [ebp+0xa],ax
c0002837:	66 85 c0             	test   ax,ax
c000283a:	0f 84 79 ff ff ff    	je     c00027b9 <mount_volume+0xc8>
c0002840:	8d 40 ff             	lea    eax,[eax-0x1]
c0002843:	85 d8                	test   eax,ebx
c0002845:	0f 85 6e ff ff ff    	jne    c00027b9 <mount_volume+0xc8>
c000284b:	8d 45 65             	lea    eax,[ebp+0x65]
c000284e:	e8 0e f4 ff ff       	call   c0001c61 <ld_word>
c0002853:	89 c7                	mov    edi,eax
c0002855:	66 89 45 08          	mov    WORD PTR [ebp+0x8],ax
c0002859:	a8 0f                	test   al,0xf
c000285b:	0f 85 58 ff ff ff    	jne    c00027b9 <mount_volume+0xc8>
c0002861:	8d 45 67             	lea    eax,[ebp+0x67]
c0002864:	e8 f8 f3 ff ff       	call   c0001c61 <ld_word>
c0002869:	0f b7 f0             	movzx  esi,ax
c000286c:	85 f6                	test   esi,esi
c000286e:	75 0a                	jne    c000287a <mount_volume+0x189>
c0002870:	8d 45 74             	lea    eax,[ebp+0x74]
c0002873:	e8 f6 f3 ff ff       	call   c0001c6e <ld_dword>
c0002878:	89 c6                	mov    esi,eax
c000287a:	8d 45 62             	lea    eax,[ebp+0x62]
c000287d:	e8 df f3 ff ff       	call   c0001c61 <ld_word>
c0002882:	66 85 c0             	test   ax,ax
c0002885:	0f 84 2e ff ff ff    	je     c00027b9 <mount_volume+0xc8>
c000288b:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c0002890:	0f b7 c8             	movzx  ecx,ax
c0002893:	0f af 54 24 10       	imul   edx,DWORD PTR [esp+0x10]
c0002898:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000289c:	89 fa                	mov    edx,edi
c000289e:	66 c1 ea 04          	shr    dx,0x4
c00028a2:	0f b7 d2             	movzx  edx,dx
c00028a5:	03 54 24 2c          	add    edx,DWORD PTR [esp+0x2c]
c00028a9:	8d 04 0a             	lea    eax,[edx+ecx*1]
c00028ac:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00028b0:	39 c6                	cmp    esi,eax
c00028b2:	0f 82 01 ff ff ff    	jb     c00027b9 <mount_volume+0xc8>
c00028b8:	29 c6                	sub    esi,eax
c00028ba:	31 d2                	xor    edx,edx
c00028bc:	89 f0                	mov    eax,esi
c00028be:	f7 f3                	div    ebx
c00028c0:	39 de                	cmp    esi,ebx
c00028c2:	0f 82 f1 fe ff ff    	jb     c00027b9 <mount_volume+0xc8>
c00028c8:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c00028cd:	0f 87 e6 fe ff ff    	ja     c00027b9 <mount_volume+0xc8>
c00028d3:	3d f5 ff 00 00       	cmp    eax,0xfff5
c00028d8:	0f 86 63 03 00 00    	jbe    c0002c41 <mount_volume+0x550>
c00028de:	bb 03 00 00 00       	mov    ebx,0x3
c00028e3:	8d 70 02             	lea    esi,[eax+0x2]
c00028e6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00028ea:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00028ee:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c00028f1:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c00028f4:	31 d2                	xor    edx,edx
c00028f6:	89 c8                	mov    eax,ecx
c00028f8:	89 75 1c             	mov    DWORD PTR [ebp+0x1c],esi
c00028fb:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00028ff:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002903:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0002907:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000290b:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c000290e:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c0002911:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0002915:	31 d2                	xor    edx,edx
c0002917:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000291b:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000291f:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c0002922:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c0002925:	83 fb 03             	cmp    ebx,0x3
c0002928:	75 2b                	jne    c0002955 <mount_volume+0x264>
c000292a:	8d 45 7e             	lea    eax,[ebp+0x7e]
c000292d:	e8 2f f3 ff ff       	call   c0001c61 <ld_word>
c0002932:	66 09 c7             	or     di,ax
c0002935:	0f 85 7e fe ff ff    	jne    c00027b9 <mount_volume+0xc8>
c000293b:	8d 85 80 00 00 00    	lea    eax,[ebp+0x80]
c0002941:	c1 e6 02             	shl    esi,0x2
c0002944:	e8 25 f3 ff ff       	call   c0001c6e <ld_dword>
c0002949:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002950:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002953:	eb 30                	jmp    c0002985 <mount_volume+0x294>
c0002955:	66 85 ff             	test   di,di
c0002958:	0f 84 5b fe ff ff    	je     c00027b9 <mount_volume+0xc8>
c000295e:	31 d2                	xor    edx,edx
c0002960:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002964:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0002968:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c000296c:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c000296f:	89 55 38             	mov    DWORD PTR [ebp+0x38],edx
c0002972:	83 fb 02             	cmp    ebx,0x2
c0002975:	75 04                	jne    c000297b <mount_volume+0x28a>
c0002977:	01 f6                	add    esi,esi
c0002979:	eb 0a                	jmp    c0002985 <mount_volume+0x294>
c000297b:	8d 04 76             	lea    eax,[esi+esi*2]
c000297e:	83 e6 01             	and    esi,0x1
c0002981:	d1 e8                	shr    eax,1
c0002983:	01 c6                	add    esi,eax
c0002985:	81 c6 ff 01 00 00    	add    esi,0x1ff
c000298b:	c1 ee 09             	shr    esi,0x9
c000298e:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0002992:	0f 87 21 fe ff ff    	ja     c00027b9 <mount_volume+0xc8>
c0002998:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c000299f:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c00029a6:	c6 45 04 80          	mov    BYTE PTR [ebp+0x4],0x80
c00029aa:	83 fb 03             	cmp    ebx,0x3
c00029ad:	75 7a                	jne    c0002a29 <mount_volume+0x338>
c00029af:	8d 85 84 00 00 00    	lea    eax,[ebp+0x84]
c00029b5:	e8 a7 f2 ff ff       	call   c0001c61 <ld_word>
c00029ba:	66 48                	dec    ax
c00029bc:	75 6b                	jne    c0002a29 <mount_volume+0x338>
c00029be:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00029c2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00029c6:	83 c2 01             	add    edx,0x1
c00029c9:	89 e8                	mov    eax,ebp
c00029cb:	83 d1 00             	adc    ecx,0x0
c00029ce:	e8 6c fa ff ff       	call   c000243f <move_window>
c00029d3:	85 c0                	test   eax,eax
c00029d5:	75 52                	jne    c0002a29 <mount_volume+0x338>
c00029d7:	c6 45 04 00          	mov    BYTE PTR [ebp+0x4],0x0
c00029db:	8d 85 52 02 00 00    	lea    eax,[ebp+0x252]
c00029e1:	e8 7b f2 ff ff       	call   c0001c61 <ld_word>
c00029e6:	66 3d 55 aa          	cmp    ax,0xaa55
c00029ea:	75 3d                	jne    c0002a29 <mount_volume+0x338>
c00029ec:	8d 45 54             	lea    eax,[ebp+0x54]
c00029ef:	e8 7a f2 ff ff       	call   c0001c6e <ld_dword>
c00029f4:	3d 52 52 61 41       	cmp    eax,0x41615252
c00029f9:	75 2e                	jne    c0002a29 <mount_volume+0x338>
c00029fb:	8d 85 38 02 00 00    	lea    eax,[ebp+0x238]
c0002a01:	e8 68 f2 ff ff       	call   c0001c6e <ld_dword>
c0002a06:	3d 72 72 41 61       	cmp    eax,0x61417272
c0002a0b:	75 1c                	jne    c0002a29 <mount_volume+0x338>
c0002a0d:	8d 85 3c 02 00 00    	lea    eax,[ebp+0x23c]
c0002a13:	e8 56 f2 ff ff       	call   c0001c6e <ld_dword>
c0002a18:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
c0002a1b:	8d 85 40 02 00 00    	lea    eax,[ebp+0x240]
c0002a21:	e8 48 f2 ff ff       	call   c0001c6e <ld_dword>
c0002a26:	89 45 14             	mov    DWORD PTR [ebp+0x14],eax
c0002a29:	66 a1 60 e6 02 c0    	mov    ax,ds:0xc002e660
c0002a2f:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c0002a32:	40                   	inc    eax
c0002a33:	31 db                	xor    ebx,ebx
c0002a35:	66 a3 60 e6 02 c0    	mov    ds:0xc002e660,ax
c0002a3b:	66 89 45 06          	mov    WORD PTR [ebp+0x6],ax
c0002a3f:	e9 0c 02 00 00       	jmp    c0002c50 <mount_volume+0x55f>
c0002a44:	8d 85 bc 00 00 00    	lea    eax,[ebp+0xbc]
c0002a4a:	e8 12 f2 ff ff       	call   c0001c61 <ld_word>
c0002a4f:	66 3d 00 01          	cmp    ax,0x100
c0002a53:	0f 85 60 fd ff ff    	jne    c00027b9 <mount_volume+0xc8>
c0002a59:	80 bd c0 00 00 00 09 	cmp    BYTE PTR [ebp+0xc0],0x9
c0002a60:	0f 85 53 fd ff ff    	jne    c00027b9 <mount_volume+0xc8>
c0002a66:	8d 85 9c 00 00 00    	lea    eax,[ebp+0x9c]
c0002a6c:	e8 15 f2 ff ff       	call   c0001c86 <ld_qword>
c0002a71:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002a75:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002a79:	8d 85 a8 00 00 00    	lea    eax,[ebp+0xa8]
c0002a7f:	e8 ea f1 ff ff       	call   c0001c6e <ld_dword>
c0002a84:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c0002a87:	8a 85 c2 00 00 00    	mov    al,BYTE PTR [ebp+0xc2]
c0002a8d:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002a90:	fe c8                	dec    al
c0002a92:	0f 85 21 fd ff ff    	jne    c00027b9 <mount_volume+0xc8>
c0002a98:	0f b6 8d c1 00 00 00 	movzx  ecx,BYTE PTR [ebp+0xc1]
c0002a9f:	bb 01 00 00 00       	mov    ebx,0x1
c0002aa4:	d3 e3                	shl    ebx,cl
c0002aa6:	66 89 5d 0a          	mov    WORD PTR [ebp+0xa],bx
c0002aaa:	66 85 db             	test   bx,bx
c0002aad:	0f 84 06 fd ff ff    	je     c00027b9 <mount_volume+0xc8>
c0002ab3:	8d 85 b0 00 00 00    	lea    eax,[ebp+0xb0]
c0002ab9:	e8 b0 f1 ff ff       	call   c0001c6e <ld_dword>
c0002abe:	89 c6                	mov    esi,eax
c0002ac0:	3d fd ff ff 7f       	cmp    eax,0x7ffffffd
c0002ac5:	0f 87 ee fc ff ff    	ja     c00027b9 <mount_volume+0xc8>
c0002acb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002acf:	8d 40 02             	lea    eax,[eax+0x2]
c0002ad2:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c0002ad5:	89 45 1c             	mov    DWORD PTR [ebp+0x1c],eax
c0002ad8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002adc:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c0002adf:	8d 85 ac 00 00 00    	lea    eax,[ebp+0xac]
c0002ae5:	e8 84 f1 ff ff       	call   c0001c6e <ld_dword>
c0002aea:	31 d2                	xor    edx,edx
c0002aec:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002af0:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002af4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002af8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0002afc:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c0002aff:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c0002b02:	8d 85 a4 00 00 00    	lea    eax,[ebp+0xa4]
c0002b08:	e8 61 f1 ff ff       	call   c0001c6e <ld_dword>
c0002b0d:	31 d2                	xor    edx,edx
c0002b0f:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002b13:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002b17:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002b1b:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c0002b1e:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c0002b21:	0f b7 c3             	movzx  eax,bx
c0002b24:	31 d2                	xor    edx,edx
c0002b26:	0f af f0             	imul   esi,eax
c0002b29:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0002b2d:	89 f0                	mov    eax,esi
c0002b2f:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0002b33:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0002b37:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002b3b:	13 5c 24 0c          	adc    ebx,DWORD PTR [esp+0xc]
c0002b3f:	39 c1                	cmp    ecx,eax
c0002b41:	89 df                	mov    edi,ebx
c0002b43:	19 d7                	sbb    edi,edx
c0002b45:	0f 82 6e fc ff ff    	jb     c00027b9 <mount_volume+0xc8>
c0002b4b:	8d 85 b4 00 00 00    	lea    eax,[ebp+0xb4]
c0002b51:	31 db                	xor    ebx,ebx
c0002b53:	e8 16 f1 ff ff       	call   c0001c6e <ld_dword>
c0002b58:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002b5f:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002b62:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002b6a:	85 db                	test   ebx,ebx
c0002b6c:	75 39                	jne    c0002ba7 <mount_volume+0x4b6>
c0002b6e:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002b72:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0002b76:	0f 86 3d fc ff ff    	jbe    c00027b9 <mount_volume+0xc8>
c0002b7c:	8b 55 34             	mov    edx,DWORD PTR [ebp+0x34]
c0002b7f:	31 ff                	xor    edi,edi
c0002b81:	89 e8                	mov    eax,ebp
c0002b83:	e8 72 f3 ff ff       	call   c0001efa <clst2sect>
c0002b88:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0002b8c:	01 c6                	add    esi,eax
c0002b8e:	89 e8                	mov    eax,ebp
c0002b90:	11 d7                	adc    edi,edx
c0002b92:	89 f2                	mov    edx,esi
c0002b94:	89 f9                	mov    ecx,edi
c0002b96:	e8 a4 f8 ff ff       	call   c000243f <move_window>
c0002b9b:	85 c0                	test   eax,eax
c0002b9d:	0f 85 07 fc ff ff    	jne    c00027aa <mount_volume+0xb9>
c0002ba3:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0002ba7:	80 7c 1d 54 81       	cmp    BYTE PTR [ebp+ebx*1+0x54],0x81
c0002bac:	74 0b                	je     c0002bb9 <mount_volume+0x4c8>
c0002bae:	83 c3 20             	add    ebx,0x20
c0002bb1:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002bb7:	eb b1                	jmp    c0002b6a <mount_volume+0x479>
c0002bb9:	8d 75 54             	lea    esi,[ebp+0x54]
c0002bbc:	8d 44 1e 14          	lea    eax,[esi+ebx*1+0x14]
c0002bc0:	e8 a9 f0 ff ff       	call   c0001c6e <ld_dword>
c0002bc5:	89 c3                	mov    ebx,eax
c0002bc7:	83 f8 01             	cmp    eax,0x1
c0002bca:	0f 86 e9 fb ff ff    	jbe    c00027b9 <mount_volume+0xc8>
c0002bd0:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c0002bd3:	0f 86 e0 fb ff ff    	jbe    c00027b9 <mount_volume+0xc8>
c0002bd9:	8d 53 fe             	lea    edx,[ebx-0x2]
c0002bdc:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002be0:	0f af c2             	imul   eax,edx
c0002be3:	31 d2                	xor    edx,edx
c0002be5:	03 45 3c             	add    eax,DWORD PTR [ebp+0x3c]
c0002be8:	13 55 40             	adc    edx,DWORD PTR [ebp+0x40]
c0002beb:	89 45 44             	mov    DWORD PTR [ebp+0x44],eax
c0002bee:	89 55 48             	mov    DWORD PTR [ebp+0x48],edx
c0002bf1:	31 c9                	xor    ecx,ecx
c0002bf3:	89 da                	mov    edx,ebx
c0002bf5:	89 e8                	mov    eax,ebp
c0002bf7:	c1 ea 07             	shr    edx,0x7
c0002bfa:	03 55 2c             	add    edx,DWORD PTR [ebp+0x2c]
c0002bfd:	13 4d 30             	adc    ecx,DWORD PTR [ebp+0x30]
c0002c00:	e8 3a f8 ff ff       	call   c000243f <move_window>
c0002c05:	85 c0                	test   eax,eax
c0002c07:	0f 85 9d fb ff ff    	jne    c00027aa <mount_volume+0xb9>
c0002c0d:	89 d8                	mov    eax,ebx
c0002c0f:	83 e0 7f             	and    eax,0x7f
c0002c12:	8d 04 86             	lea    eax,[esi+eax*4]
c0002c15:	e8 54 f0 ff ff       	call   c0001c6e <ld_dword>
c0002c1a:	83 f8 ff             	cmp    eax,0xffffffff
c0002c1d:	74 0a                	je     c0002c29 <mount_volume+0x538>
c0002c1f:	43                   	inc    ebx
c0002c20:	39 d8                	cmp    eax,ebx
c0002c22:	74 cd                	je     c0002bf1 <mount_volume+0x500>
c0002c24:	e9 90 fb ff ff       	jmp    c00027b9 <mount_volume+0xc8>
c0002c29:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002c30:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c0002c37:	bb 04 00 00 00       	mov    ebx,0x4
c0002c3c:	e9 e8 fd ff ff       	jmp    c0002a29 <mount_volume+0x338>
c0002c41:	3d f6 0f 00 00       	cmp    eax,0xff6
c0002c46:	19 db                	sbb    ebx,ebx
c0002c48:	83 c3 02             	add    ebx,0x2
c0002c4b:	e9 93 fc ff ff       	jmp    c00028e3 <mount_volume+0x1f2>
c0002c50:	83 c4 3c             	add    esp,0x3c
c0002c53:	89 d8                	mov    eax,ebx
c0002c55:	5b                   	pop    ebx
c0002c56:	5e                   	pop    esi
c0002c57:	5f                   	pop    edi
c0002c58:	5d                   	pop    ebp
c0002c59:	c3                   	ret    

c0002c5a <find_bitmap>:
c0002c5a:	55                   	push   ebp
c0002c5b:	57                   	push   edi
c0002c5c:	89 c7                	mov    edi,eax
c0002c5e:	56                   	push   esi
c0002c5f:	8d 72 fe             	lea    esi,[edx-0x2]
c0002c62:	53                   	push   ebx
c0002c63:	83 ec 1c             	sub    esp,0x1c
c0002c66:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0002c69:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002c6d:	83 e8 02             	sub    eax,0x2
c0002c70:	39 f0                	cmp    eax,esi
c0002c72:	77 02                	ja     c0002c76 <find_bitmap+0x1c>
c0002c74:	31 f6                	xor    esi,esi
c0002c76:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0002c7a:	89 f3                	mov    ebx,esi
c0002c7c:	31 ed                	xor    ebp,ebp
c0002c7e:	31 c9                	xor    ecx,ecx
c0002c80:	89 da                	mov    edx,ebx
c0002c82:	89 f8                	mov    eax,edi
c0002c84:	c1 ea 0c             	shr    edx,0xc
c0002c87:	03 57 44             	add    edx,DWORD PTR [edi+0x44]
c0002c8a:	13 4f 48             	adc    ecx,DWORD PTR [edi+0x48]
c0002c8d:	e8 ad f7 ff ff       	call   c000243f <move_window>
c0002c92:	85 c0                	test   eax,eax
c0002c94:	75 68                	jne    c0002cfe <find_bitmap+0xa4>
c0002c96:	89 da                	mov    edx,ebx
c0002c98:	89 d9                	mov    ecx,ebx
c0002c9a:	c1 ea 03             	shr    edx,0x3
c0002c9d:	83 e1 07             	and    ecx,0x7
c0002ca0:	b8 01 00 00 00       	mov    eax,0x1
c0002ca5:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0002cab:	d3 e0                	shl    eax,cl
c0002cad:	8b 4f 1c             	mov    ecx,DWORD PTR [edi+0x1c]
c0002cb0:	83 e9 02             	sub    ecx,0x2
c0002cb3:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002cb7:	8a 4c 17 54          	mov    cl,BYTE PTR [edi+edx*1+0x54]
c0002cbb:	43                   	inc    ebx
c0002cbc:	21 c1                	and    ecx,eax
c0002cbe:	d1 e0                	shl    eax,1
c0002cc0:	39 5c 24 08          	cmp    DWORD PTR [esp+0x8],ebx
c0002cc4:	77 09                	ja     c0002ccf <find_bitmap+0x75>
c0002cc6:	31 db                	xor    ebx,ebx
c0002cc8:	ba 00 02 00 00       	mov    edx,0x200
c0002ccd:	31 c0                	xor    eax,eax
c0002ccf:	84 c9                	test   cl,cl
c0002cd1:	75 10                	jne    c0002ce3 <find_bitmap+0x89>
c0002cd3:	45                   	inc    ebp
c0002cd4:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0002cd8:	75 0f                	jne    c0002ce9 <find_bitmap+0x8f>
c0002cda:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002cde:	83 c0 02             	add    eax,0x2
c0002ce1:	eb 22                	jmp    c0002d05 <find_bitmap+0xab>
c0002ce3:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0002ce7:	31 ed                	xor    ebp,ebp
c0002ce9:	39 de                	cmp    esi,ebx
c0002ceb:	74 16                	je     c0002d03 <find_bitmap+0xa9>
c0002ced:	84 c0                	test   al,al
c0002cef:	75 c6                	jne    c0002cb7 <find_bitmap+0x5d>
c0002cf1:	42                   	inc    edx
c0002cf2:	81 fa ff 01 00 00    	cmp    edx,0x1ff
c0002cf8:	77 84                	ja     c0002c7e <find_bitmap+0x24>
c0002cfa:	b0 01                	mov    al,0x1
c0002cfc:	eb b9                	jmp    c0002cb7 <find_bitmap+0x5d>
c0002cfe:	83 c8 ff             	or     eax,0xffffffff
c0002d01:	eb 02                	jmp    c0002d05 <find_bitmap+0xab>
c0002d03:	31 c0                	xor    eax,eax
c0002d05:	83 c4 1c             	add    esp,0x1c
c0002d08:	5b                   	pop    ebx
c0002d09:	5e                   	pop    esi
c0002d0a:	5f                   	pop    edi
c0002d0b:	5d                   	pop    ebp
c0002d0c:	c3                   	ret    

c0002d0d <change_bitmap>:
c0002d0d:	55                   	push   ebp
c0002d0e:	89 cd                	mov    ebp,ecx
c0002d10:	57                   	push   edi
c0002d11:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002d14:	56                   	push   esi
c0002d15:	89 c7                	mov    edi,eax
c0002d17:	53                   	push   ebx
c0002d18:	89 c8                	mov    eax,ecx
c0002d1a:	83 ec 1c             	sub    esp,0x1c
c0002d1d:	31 d2                	xor    edx,edx
c0002d1f:	89 ce                	mov    esi,ecx
c0002d21:	c1 e8 0c             	shr    eax,0xc
c0002d24:	bb 01 00 00 00       	mov    ebx,0x1
c0002d29:	03 47 44             	add    eax,DWORD PTR [edi+0x44]
c0002d2c:	13 57 48             	adc    edx,DWORD PTR [edi+0x48]
c0002d2f:	c1 ee 03             	shr    esi,0x3
c0002d32:	83 e1 07             	and    ecx,0x7
c0002d35:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0002d3b:	d3 e3                	shl    ebx,cl
c0002d3d:	88 5c 24 07          	mov    BYTE PTR [esp+0x7],bl
c0002d41:	89 c1                	mov    ecx,eax
c0002d43:	89 d3                	mov    ebx,edx
c0002d45:	83 c1 01             	add    ecx,0x1
c0002d48:	83 d3 00             	adc    ebx,0x0
c0002d4b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002d4f:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0002d53:	89 d1                	mov    ecx,edx
c0002d55:	89 c2                	mov    edx,eax
c0002d57:	89 f8                	mov    eax,edi
c0002d59:	e8 e1 f6 ff ff       	call   c000243f <move_window>
c0002d5e:	89 c1                	mov    ecx,eax
c0002d60:	85 c0                	test   eax,eax
c0002d62:	75 48                	jne    c0002dac <change_bitmap+0x9f>
c0002d64:	31 d2                	xor    edx,edx
c0002d66:	8a 44 37 54          	mov    al,BYTE PTR [edi+esi*1+0x54]
c0002d6a:	84 44 24 07          	test   BYTE PTR [esp+0x7],al
c0002d6e:	0f 95 c2             	setne  dl
c0002d71:	3b 54 24 30          	cmp    edx,DWORD PTR [esp+0x30]
c0002d75:	74 3c                	je     c0002db3 <change_bitmap+0xa6>
c0002d77:	32 44 24 07          	xor    al,BYTE PTR [esp+0x7]
c0002d7b:	4d                   	dec    ebp
c0002d7c:	88 44 37 54          	mov    BYTE PTR [edi+esi*1+0x54],al
c0002d80:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0002d84:	74 32                	je     c0002db8 <change_bitmap+0xab>
c0002d86:	d0 64 24 07          	shl    BYTE PTR [esp+0x7],1
c0002d8a:	75 d8                	jne    c0002d64 <change_bitmap+0x57>
c0002d8c:	8d 46 01             	lea    eax,[esi+0x1]
c0002d8f:	c6 44 24 07 01       	mov    BYTE PTR [esp+0x7],0x1
c0002d94:	89 c3                	mov    ebx,eax
c0002d96:	31 f6                	xor    esi,esi
c0002d98:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002d9c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002da0:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002da6:	74 99                	je     c0002d41 <change_bitmap+0x34>
c0002da8:	89 de                	mov    esi,ebx
c0002daa:	eb b8                	jmp    c0002d64 <change_bitmap+0x57>
c0002dac:	b9 01 00 00 00       	mov    ecx,0x1
c0002db1:	eb 05                	jmp    c0002db8 <change_bitmap+0xab>
c0002db3:	b9 02 00 00 00       	mov    ecx,0x2
c0002db8:	83 c4 1c             	add    esp,0x1c
c0002dbb:	89 c8                	mov    eax,ecx
c0002dbd:	5b                   	pop    ebx
c0002dbe:	5e                   	pop    esi
c0002dbf:	5f                   	pop    edi
c0002dc0:	5d                   	pop    ebp
c0002dc1:	c3                   	ret    

c0002dc2 <put_fat>:
c0002dc2:	83 fa 01             	cmp    edx,0x1
c0002dc5:	0f 86 7b 01 00 00    	jbe    c0002f46 <put_fat+0x184>
c0002dcb:	55                   	push   ebp
c0002dcc:	57                   	push   edi
c0002dcd:	89 cf                	mov    edi,ecx
c0002dcf:	56                   	push   esi
c0002dd0:	b9 02 00 00 00       	mov    ecx,0x2
c0002dd5:	53                   	push   ebx
c0002dd6:	89 c6                	mov    esi,eax
c0002dd8:	83 ec 1c             	sub    esp,0x1c
c0002ddb:	89 d3                	mov    ebx,edx
c0002ddd:	39 50 1c             	cmp    DWORD PTR [eax+0x1c],edx
c0002de0:	0f 86 68 01 00 00    	jbe    c0002f4e <put_fat+0x18c>
c0002de6:	8a 00                	mov    al,BYTE PTR [eax]
c0002de8:	3c 02                	cmp    al,0x2
c0002dea:	0f 84 c7 00 00 00    	je     c0002eb7 <put_fat+0xf5>
c0002df0:	77 09                	ja     c0002dfb <put_fat+0x39>
c0002df2:	fe c8                	dec    al
c0002df4:	74 17                	je     c0002e0d <put_fat+0x4b>
c0002df6:	e9 53 01 00 00       	jmp    c0002f4e <put_fat+0x18c>
c0002dfb:	b9 02 00 00 00       	mov    ecx,0x2
c0002e00:	3c 04                	cmp    al,0x4
c0002e02:	0f 86 e1 00 00 00    	jbe    c0002ee9 <put_fat+0x127>
c0002e08:	e9 41 01 00 00       	jmp    c0002f4e <put_fat+0x18c>
c0002e0d:	89 d5                	mov    ebp,edx
c0002e0f:	31 c9                	xor    ecx,ecx
c0002e11:	d1 ed                	shr    ebp,1
c0002e13:	89 f0                	mov    eax,esi
c0002e15:	01 d5                	add    ebp,edx
c0002e17:	89 ea                	mov    edx,ebp
c0002e19:	c1 ea 09             	shr    edx,0x9
c0002e1c:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002e1f:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002e22:	e8 18 f6 ff ff       	call   c000243f <move_window>
c0002e27:	89 c1                	mov    ecx,eax
c0002e29:	85 c0                	test   eax,eax
c0002e2b:	0f 85 1d 01 00 00    	jne    c0002f4e <put_fat+0x18c>
c0002e31:	8d 46 54             	lea    eax,[esi+0x54]
c0002e34:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002e38:	8d 45 01             	lea    eax,[ebp+0x1]
c0002e3b:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002e41:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002e45:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002e49:	89 f8                	mov    eax,edi
c0002e4b:	83 e3 01             	and    ebx,0x1
c0002e4e:	74 0d                	je     c0002e5d <put_fat+0x9b>
c0002e50:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0002e53:	89 fa                	mov    edx,edi
c0002e55:	83 e0 0f             	and    eax,0xf
c0002e58:	c1 e2 04             	shl    edx,0x4
c0002e5b:	09 d0                	or     eax,edx
c0002e5d:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c0002e60:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002e64:	31 c9                	xor    ecx,ecx
c0002e66:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002e6a:	c1 ea 09             	shr    edx,0x9
c0002e6d:	89 f0                	mov    eax,esi
c0002e6f:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002e72:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002e75:	e8 c5 f5 ff ff       	call   c000243f <move_window>
c0002e7a:	89 c1                	mov    ecx,eax
c0002e7c:	85 c0                	test   eax,eax
c0002e7e:	0f 85 ca 00 00 00    	jne    c0002f4e <put_fat+0x18c>
c0002e84:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0002e88:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002e8e:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002e92:	85 db                	test   ebx,ebx
c0002e94:	74 07                	je     c0002e9d <put_fat+0xdb>
c0002e96:	c1 ef 04             	shr    edi,0x4
c0002e99:	89 fa                	mov    edx,edi
c0002e9b:	eb 0e                	jmp    c0002eab <put_fat+0xe9>
c0002e9d:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c0002ea0:	c1 ef 08             	shr    edi,0x8
c0002ea3:	83 e2 f0             	and    edx,0xfffffff0
c0002ea6:	83 e7 0f             	and    edi,0xf
c0002ea9:	09 fa                	or     edx,edi
c0002eab:	88 55 00             	mov    BYTE PTR [ebp+0x0],dl
c0002eae:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002eb2:	e9 97 00 00 00       	jmp    c0002f4e <put_fat+0x18c>
c0002eb7:	31 c9                	xor    ecx,ecx
c0002eb9:	c1 ea 08             	shr    edx,0x8
c0002ebc:	89 f0                	mov    eax,esi
c0002ebe:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002ec1:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002ec4:	e8 76 f5 ff ff       	call   c000243f <move_window>
c0002ec9:	89 c1                	mov    ecx,eax
c0002ecb:	85 c0                	test   eax,eax
c0002ecd:	75 7f                	jne    c0002f4e <put_fat+0x18c>
c0002ecf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002ed3:	01 db                	add    ebx,ebx
c0002ed5:	0f b7 d7             	movzx  edx,di
c0002ed8:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002ede:	8d 44 1e 54          	lea    eax,[esi+ebx*1+0x54]
c0002ee2:	e8 ec ed ff ff       	call   c0001cd3 <st_word>
c0002ee7:	eb 53                	jmp    c0002f3c <put_fat+0x17a>
c0002ee9:	31 c9                	xor    ecx,ecx
c0002eeb:	c1 ea 07             	shr    edx,0x7
c0002eee:	89 f0                	mov    eax,esi
c0002ef0:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002ef3:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002ef6:	e8 44 f5 ff ff       	call   c000243f <move_window>
c0002efb:	89 c1                	mov    ecx,eax
c0002efd:	85 c0                	test   eax,eax
c0002eff:	75 4d                	jne    c0002f4e <put_fat+0x18c>
c0002f01:	c1 e3 02             	shl    ebx,0x2
c0002f04:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0002f0a:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0002f0d:	8d 5c 1e 54          	lea    ebx,[esi+ebx*1+0x54]
c0002f11:	74 1c                	je     c0002f2f <put_fat+0x16d>
c0002f13:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002f17:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c0002f1d:	89 d8                	mov    eax,ebx
c0002f1f:	e8 4a ed ff ff       	call   c0001c6e <ld_dword>
c0002f24:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002f28:	25 00 00 00 f0       	and    eax,0xf0000000
c0002f2d:	09 c7                	or     edi,eax
c0002f2f:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002f33:	89 fa                	mov    edx,edi
c0002f35:	89 d8                	mov    eax,ebx
c0002f37:	e8 9b ed ff ff       	call   c0001cd7 <st_dword>
c0002f3c:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002f40:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002f44:	eb 08                	jmp    c0002f4e <put_fat+0x18c>
c0002f46:	b9 02 00 00 00       	mov    ecx,0x2
c0002f4b:	89 c8                	mov    eax,ecx
c0002f4d:	c3                   	ret    
c0002f4e:	83 c4 1c             	add    esp,0x1c
c0002f51:	89 c8                	mov    eax,ecx
c0002f53:	5b                   	pop    ebx
c0002f54:	5e                   	pop    esi
c0002f55:	5f                   	pop    edi
c0002f56:	5d                   	pop    ebp
c0002f57:	c3                   	ret    

c0002f58 <fill_last_frag>:
c0002f58:	57                   	push   edi
c0002f59:	89 cf                	mov    edi,ecx
c0002f5b:	56                   	push   esi
c0002f5c:	89 d6                	mov    esi,edx
c0002f5e:	53                   	push   ebx
c0002f5f:	89 c3                	mov    ebx,eax
c0002f61:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0002f64:	85 c0                	test   eax,eax
c0002f66:	74 21                	je     c0002f89 <fill_last_frag+0x31>
c0002f68:	89 f9                	mov    ecx,edi
c0002f6a:	83 f8 01             	cmp    eax,0x1
c0002f6d:	76 05                	jbe    c0002f74 <fill_last_frag+0x1c>
c0002f6f:	8d 4e 02             	lea    ecx,[esi+0x2]
c0002f72:	29 c1                	sub    ecx,eax
c0002f74:	8d 56 01             	lea    edx,[esi+0x1]
c0002f77:	29 c2                	sub    edx,eax
c0002f79:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002f7b:	e8 42 fe ff ff       	call   c0002dc2 <put_fat>
c0002f80:	85 c0                	test   eax,eax
c0002f82:	75 05                	jne    c0002f89 <fill_last_frag+0x31>
c0002f84:	ff 4b 18             	dec    DWORD PTR [ebx+0x18]
c0002f87:	eb d8                	jmp    c0002f61 <fill_last_frag+0x9>
c0002f89:	5b                   	pop    ebx
c0002f8a:	5e                   	pop    esi
c0002f8b:	5f                   	pop    edi
c0002f8c:	c3                   	ret    

c0002f8d <fill_first_frag>:
c0002f8d:	80 78 07 03          	cmp    BYTE PTR [eax+0x7],0x3
c0002f91:	75 2d                	jne    c0002fc0 <fill_first_frag+0x33>
c0002f93:	57                   	push   edi
c0002f94:	56                   	push   esi
c0002f95:	53                   	push   ebx
c0002f96:	89 c3                	mov    ebx,eax
c0002f98:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0002f9b:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c0002f9e:	01 d7                	add    edi,edx
c0002fa0:	39 fa                	cmp    edx,edi
c0002fa2:	74 14                	je     c0002fb8 <fill_first_frag+0x2b>
c0002fa4:	8d 72 01             	lea    esi,[edx+0x1]
c0002fa7:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002fa9:	89 f1                	mov    ecx,esi
c0002fab:	e8 12 fe ff ff       	call   c0002dc2 <put_fat>
c0002fb0:	89 f2                	mov    edx,esi
c0002fb2:	85 c0                	test   eax,eax
c0002fb4:	74 ea                	je     c0002fa0 <fill_first_frag+0x13>
c0002fb6:	eb 0b                	jmp    c0002fc3 <fill_first_frag+0x36>
c0002fb8:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0002fbc:	31 c0                	xor    eax,eax
c0002fbe:	eb 03                	jmp    c0002fc3 <fill_first_frag+0x36>
c0002fc0:	31 c0                	xor    eax,eax
c0002fc2:	c3                   	ret    
c0002fc3:	5b                   	pop    ebx
c0002fc4:	5e                   	pop    esi
c0002fc5:	5f                   	pop    edi
c0002fc6:	c3                   	ret    

c0002fc7 <get_fat>:
c0002fc7:	83 fa 01             	cmp    edx,0x1
c0002fca:	0f 86 db 01 00 00    	jbe    c00031ab <get_fat+0x1e4>
c0002fd0:	55                   	push   ebp
c0002fd1:	b9 01 00 00 00       	mov    ecx,0x1
c0002fd6:	57                   	push   edi
c0002fd7:	56                   	push   esi
c0002fd8:	53                   	push   ebx
c0002fd9:	83 ec 1c             	sub    esp,0x1c
c0002fdc:	8b 38                	mov    edi,DWORD PTR [eax]
c0002fde:	39 57 1c             	cmp    DWORD PTR [edi+0x1c],edx
c0002fe1:	0f 86 cc 01 00 00    	jbe    c00031b3 <get_fat+0x1ec>
c0002fe7:	89 c3                	mov    ebx,eax
c0002fe9:	89 d6                	mov    esi,edx
c0002feb:	8a 07                	mov    al,BYTE PTR [edi]
c0002fed:	3c 02                	cmp    al,0x2
c0002fef:	0f 84 99 00 00 00    	je     c000308e <get_fat+0xc7>
c0002ff5:	77 09                	ja     c0003000 <get_fat+0x39>
c0002ff7:	fe c8                	dec    al
c0002ff9:	74 1a                	je     c0003015 <get_fat+0x4e>
c0002ffb:	e9 b3 01 00 00       	jmp    c00031b3 <get_fat+0x1ec>
c0003000:	3c 03                	cmp    al,0x3
c0003002:	0f 84 b5 00 00 00    	je     c00030bd <get_fat+0xf6>
c0003008:	3c 04                	cmp    al,0x4
c000300a:	0f 84 e3 00 00 00    	je     c00030f3 <get_fat+0x12c>
c0003010:	e9 9e 01 00 00       	jmp    c00031b3 <get_fat+0x1ec>
c0003015:	89 d3                	mov    ebx,edx
c0003017:	31 c9                	xor    ecx,ecx
c0003019:	d1 eb                	shr    ebx,1
c000301b:	89 f8                	mov    eax,edi
c000301d:	01 d3                	add    ebx,edx
c000301f:	89 da                	mov    edx,ebx
c0003021:	c1 ea 09             	shr    edx,0x9
c0003024:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0003027:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c000302a:	e8 10 f4 ff ff       	call   c000243f <move_window>
c000302f:	85 c0                	test   eax,eax
c0003031:	74 08                	je     c000303b <get_fat+0x74>
c0003033:	83 c9 ff             	or     ecx,0xffffffff
c0003036:	e9 78 01 00 00       	jmp    c00031b3 <get_fat+0x1ec>
c000303b:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000303e:	31 c9                	xor    ecx,ecx
c0003040:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0003046:	89 ea                	mov    edx,ebp
c0003048:	8a 5c 1f 54          	mov    bl,BYTE PTR [edi+ebx*1+0x54]
c000304c:	c1 ea 09             	shr    edx,0x9
c000304f:	89 f8                	mov    eax,edi
c0003051:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0003054:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0003057:	e8 e3 f3 ff ff       	call   c000243f <move_window>
c000305c:	85 c0                	test   eax,eax
c000305e:	75 d3                	jne    c0003033 <get_fat+0x6c>
c0003060:	0f b6 c3             	movzx  eax,bl
c0003063:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0003069:	0f b6 5c 2f 54       	movzx  ebx,BYTE PTR [edi+ebp*1+0x54]
c000306e:	c1 e3 08             	shl    ebx,0x8
c0003071:	09 c3                	or     ebx,eax
c0003073:	89 d9                	mov    ecx,ebx
c0003075:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c000307b:	83 e6 01             	and    esi,0x1
c000307e:	0f 84 2f 01 00 00    	je     c00031b3 <get_fat+0x1ec>
c0003084:	89 d9                	mov    ecx,ebx
c0003086:	c1 e9 04             	shr    ecx,0x4
c0003089:	e9 25 01 00 00       	jmp    c00031b3 <get_fat+0x1ec>
c000308e:	31 c9                	xor    ecx,ecx
c0003090:	c1 ea 08             	shr    edx,0x8
c0003093:	89 f8                	mov    eax,edi
c0003095:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0003098:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c000309b:	e8 9f f3 ff ff       	call   c000243f <move_window>
c00030a0:	85 c0                	test   eax,eax
c00030a2:	75 8f                	jne    c0003033 <get_fat+0x6c>
c00030a4:	01 f6                	add    esi,esi
c00030a6:	81 e6 fe 01 00 00    	and    esi,0x1fe
c00030ac:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c00030b0:	e8 ac eb ff ff       	call   c0001c61 <ld_word>
c00030b5:	0f b7 c8             	movzx  ecx,ax
c00030b8:	e9 f6 00 00 00       	jmp    c00031b3 <get_fat+0x1ec>
c00030bd:	31 c9                	xor    ecx,ecx
c00030bf:	c1 ea 07             	shr    edx,0x7
c00030c2:	89 f8                	mov    eax,edi
c00030c4:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c00030c7:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c00030ca:	e8 70 f3 ff ff       	call   c000243f <move_window>
c00030cf:	85 c0                	test   eax,eax
c00030d1:	0f 85 5c ff ff ff    	jne    c0003033 <get_fat+0x6c>
c00030d7:	c1 e6 02             	shl    esi,0x2
c00030da:	81 e6 fc 01 00 00    	and    esi,0x1fc
c00030e0:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c00030e4:	e8 85 eb ff ff       	call   c0001c6e <ld_dword>
c00030e9:	25 ff ff ff 0f       	and    eax,0xfffffff
c00030ee:	e9 b4 00 00 00       	jmp    c00031a7 <get_fat+0x1e0>
c00030f3:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00030f6:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00030f9:	89 d1                	mov    ecx,edx
c00030fb:	09 c1                	or     ecx,eax
c00030fd:	74 06                	je     c0003105 <get_fat+0x13e>
c00030ff:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0003103:	75 0f                	jne    c0003114 <get_fat+0x14d>
c0003105:	b9 01 00 00 00       	mov    ecx,0x1
c000310a:	80 7b 07 00          	cmp    BYTE PTR [ebx+0x7],0x0
c000310e:	0f 85 9f 00 00 00    	jne    c00031b3 <get_fat+0x1ec>
c0003114:	66 8b 4f 0a          	mov    cx,WORD PTR [edi+0xa]
c0003118:	89 f5                	mov    ebp,esi
c000311a:	66 89 4c 24 0e       	mov    WORD PTR [esp+0xe],cx
c000311f:	2b 6b 08             	sub    ebp,DWORD PTR [ebx+0x8]
c0003122:	8a 4b 07             	mov    cl,BYTE PTR [ebx+0x7]
c0003125:	80 f9 02             	cmp    cl,0x2
c0003128:	75 35                	jne    c000315f <get_fat+0x198>
c000312a:	83 c0 ff             	add    eax,0xffffffff
c000312d:	0f b7 4c 24 0e       	movzx  ecx,WORD PTR [esp+0xe]
c0003132:	83 d2 ff             	adc    edx,0xffffffff
c0003135:	31 db                	xor    ebx,ebx
c0003137:	0f ac d0 09          	shrd   eax,edx,0x9
c000313b:	53                   	push   ebx
c000313c:	c1 ea 09             	shr    edx,0x9
c000313f:	51                   	push   ecx
c0003140:	52                   	push   edx
c0003141:	50                   	push   eax
c0003142:	e8 55 39 02 00       	call   c0026a9c <__udivdi3>
c0003147:	83 c4 10             	add    esp,0x10
c000314a:	b9 01 00 00 00       	mov    ecx,0x1
c000314f:	39 c5                	cmp    ebp,eax
c0003151:	77 60                	ja     c00031b3 <get_fat+0x1ec>
c0003153:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0003158:	74 59                	je     c00031b3 <get_fat+0x1ec>
c000315a:	8d 4e 01             	lea    ecx,[esi+0x1]
c000315d:	eb 54                	jmp    c00031b3 <get_fat+0x1ec>
c000315f:	80 f9 03             	cmp    cl,0x3
c0003162:	75 05                	jne    c0003169 <get_fat+0x1a2>
c0003164:	39 6b 14             	cmp    DWORD PTR [ebx+0x14],ebp
c0003167:	77 f1                	ja     c000315a <get_fat+0x193>
c0003169:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c000316e:	83 7b 18 00          	cmp    DWORD PTR [ebx+0x18],0x0
c0003172:	75 3f                	jne    c00031b3 <get_fat+0x1ec>
c0003174:	31 c9                	xor    ecx,ecx
c0003176:	89 f2                	mov    edx,esi
c0003178:	89 f8                	mov    eax,edi
c000317a:	c1 ea 07             	shr    edx,0x7
c000317d:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0003180:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0003183:	e8 b7 f2 ff ff       	call   c000243f <move_window>
c0003188:	85 c0                	test   eax,eax
c000318a:	0f 85 a3 fe ff ff    	jne    c0003033 <get_fat+0x6c>
c0003190:	c1 e6 02             	shl    esi,0x2
c0003193:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0003199:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c000319d:	e8 cc ea ff ff       	call   c0001c6e <ld_dword>
c00031a2:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00031a7:	89 c1                	mov    ecx,eax
c00031a9:	eb 08                	jmp    c00031b3 <get_fat+0x1ec>
c00031ab:	b9 01 00 00 00       	mov    ecx,0x1
c00031b0:	89 c8                	mov    eax,ecx
c00031b2:	c3                   	ret    
c00031b3:	83 c4 1c             	add    esp,0x1c
c00031b6:	89 c8                	mov    eax,ecx
c00031b8:	5b                   	pop    ebx
c00031b9:	5e                   	pop    esi
c00031ba:	5f                   	pop    edi
c00031bb:	5d                   	pop    ebp
c00031bc:	c3                   	ret    

c00031bd <dir_sdi>:
c00031bd:	55                   	push   ebp
c00031be:	57                   	push   edi
c00031bf:	56                   	push   esi
c00031c0:	53                   	push   ebx
c00031c1:	89 c3                	mov    ebx,eax
c00031c3:	83 ec 1c             	sub    esp,0x1c
c00031c6:	8b 38                	mov    edi,DWORD PTR [eax]
c00031c8:	31 c0                	xor    eax,eax
c00031ca:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c00031cd:	0f 94 c0             	sete   al
c00031d0:	48                   	dec    eax
c00031d1:	25 00 00 20 f0       	and    eax,0xf0200000
c00031d6:	05 00 00 00 10       	add    eax,0x10000000
c00031db:	39 d0                	cmp    eax,edx
c00031dd:	77 0a                	ja     c00031e9 <dir_sdi+0x2c>
c00031df:	b8 02 00 00 00       	mov    eax,0x2
c00031e4:	e9 c4 00 00 00       	jmp    c00032ad <dir_sdi+0xf0>
c00031e9:	89 d6                	mov    esi,edx
c00031eb:	f6 c2 1f             	test   dl,0x1f
c00031ee:	75 ef                	jne    c00031df <dir_sdi+0x22>
c00031f0:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00031f3:	89 53 28             	mov    DWORD PTR [ebx+0x28],edx
c00031f6:	85 c9                	test   ecx,ecx
c00031f8:	75 2d                	jne    c0003227 <dir_sdi+0x6a>
c00031fa:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c00031fd:	77 1b                	ja     c000321a <dir_sdi+0x5d>
c00031ff:	89 f2                	mov    edx,esi
c0003201:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c0003205:	c1 ea 05             	shr    edx,0x5
c0003208:	39 c2                	cmp    edx,eax
c000320a:	73 d3                	jae    c00031df <dir_sdi+0x22>
c000320c:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c000320f:	8b 57 38             	mov    edx,DWORD PTR [edi+0x38]
c0003212:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003215:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003218:	eb 4b                	jmp    c0003265 <dir_sdi+0xa8>
c000321a:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c000321d:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0003221:	85 c0                	test   eax,eax
c0003223:	74 da                	je     c00031ff <dir_sdi+0x42>
c0003225:	89 c1                	mov    ecx,eax
c0003227:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c000322b:	c1 e5 09             	shl    ebp,0x9
c000322e:	89 ca                	mov    edx,ecx
c0003230:	39 ee                	cmp    esi,ebp
c0003232:	72 1c                	jb     c0003250 <dir_sdi+0x93>
c0003234:	89 d8                	mov    eax,ebx
c0003236:	e8 8c fd ff ff       	call   c0002fc7 <get_fat>
c000323b:	89 c1                	mov    ecx,eax
c000323d:	83 f8 ff             	cmp    eax,0xffffffff
c0003240:	74 66                	je     c00032a8 <dir_sdi+0xeb>
c0003242:	83 f8 01             	cmp    eax,0x1
c0003245:	76 98                	jbe    c00031df <dir_sdi+0x22>
c0003247:	39 47 1c             	cmp    DWORD PTR [edi+0x1c],eax
c000324a:	76 93                	jbe    c00031df <dir_sdi+0x22>
c000324c:	29 ee                	sub    esi,ebp
c000324e:	eb de                	jmp    c000322e <dir_sdi+0x71>
c0003250:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003254:	89 f8                	mov    eax,edi
c0003256:	e8 9f ec ff ff       	call   c0001efa <clst2sect>
c000325b:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000325f:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003262:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003265:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0003268:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c000326b:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000326e:	89 d1                	mov    ecx,edx
c0003270:	09 c1                	or     ecx,eax
c0003272:	0f 84 67 ff ff ff    	je     c00031df <dir_sdi+0x22>
c0003278:	89 f1                	mov    ecx,esi
c000327a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003282:	c1 e9 09             	shr    ecx,0x9
c0003285:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003289:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000328d:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0003291:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003294:	81 e6 ff 01 00 00    	and    esi,0x1ff
c000329a:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000329d:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c00032a1:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c00032a4:	31 c0                	xor    eax,eax
c00032a6:	eb 05                	jmp    c00032ad <dir_sdi+0xf0>
c00032a8:	b8 01 00 00 00       	mov    eax,0x1
c00032ad:	83 c4 1c             	add    esp,0x1c
c00032b0:	5b                   	pop    ebx
c00032b1:	5e                   	pop    esi
c00032b2:	5f                   	pop    edi
c00032b3:	5d                   	pop    ebp
c00032b4:	c3                   	ret    

c00032b5 <create_chain>:
c00032b5:	55                   	push   ebp
c00032b6:	89 c5                	mov    ebp,eax
c00032b8:	57                   	push   edi
c00032b9:	56                   	push   esi
c00032ba:	53                   	push   ebx
c00032bb:	83 ec 1c             	sub    esp,0x1c
c00032be:	85 d2                	test   edx,edx
c00032c0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00032c4:	8b 30                	mov    esi,DWORD PTR [eax]
c00032c6:	75 0e                	jne    c00032d6 <create_chain+0x21>
c00032c8:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c00032cb:	85 ff                	test   edi,edi
c00032cd:	74 39                	je     c0003308 <create_chain+0x53>
c00032cf:	39 7e 1c             	cmp    DWORD PTR [esi+0x1c],edi
c00032d2:	77 39                	ja     c000330d <create_chain+0x58>
c00032d4:	eb 32                	jmp    c0003308 <create_chain+0x53>
c00032d6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00032da:	e8 e8 fc ff ff       	call   c0002fc7 <get_fat>
c00032df:	89 c3                	mov    ebx,eax
c00032e1:	83 f8 01             	cmp    eax,0x1
c00032e4:	77 0a                	ja     c00032f0 <create_chain+0x3b>
c00032e6:	bb 01 00 00 00       	mov    ebx,0x1
c00032eb:	e9 ba 01 00 00       	jmp    c00034aa <create_chain+0x1f5>
c00032f0:	83 f8 ff             	cmp    eax,0xffffffff
c00032f3:	0f 84 62 01 00 00    	je     c000345b <create_chain+0x1a6>
c00032f9:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00032fc:	0f 87 a8 01 00 00    	ja     c00034aa <create_chain+0x1f5>
c0003302:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0003306:	eb 05                	jmp    c000330d <create_chain+0x58>
c0003308:	bf 01 00 00 00       	mov    edi,0x1
c000330d:	83 7e 18 00          	cmp    DWORD PTR [esi+0x18],0x0
c0003311:	75 07                	jne    c000331a <create_chain+0x65>
c0003313:	31 db                	xor    ebx,ebx
c0003315:	e9 90 01 00 00       	jmp    c00034aa <create_chain+0x1f5>
c000331a:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c000331d:	75 74                	jne    c0003393 <create_chain+0xde>
c000331f:	b9 01 00 00 00       	mov    ecx,0x1
c0003324:	89 fa                	mov    edx,edi
c0003326:	89 f0                	mov    eax,esi
c0003328:	e8 2d f9 ff ff       	call   c0002c5a <find_bitmap>
c000332d:	89 c3                	mov    ebx,eax
c000332f:	8d 40 ff             	lea    eax,[eax-0x1]
c0003332:	83 f8 fd             	cmp    eax,0xfffffffd
c0003335:	0f 87 6f 01 00 00    	ja     c00034aa <create_chain+0x1f5>
c000333b:	83 ec 0c             	sub    esp,0xc
c000333e:	b9 01 00 00 00       	mov    ecx,0x1
c0003343:	6a 01                	push   0x1
c0003345:	89 da                	mov    edx,ebx
c0003347:	89 f0                	mov    eax,esi
c0003349:	e8 bf f9 ff ff       	call   c0002d0d <change_bitmap>
c000334e:	83 c4 10             	add    esp,0x10
c0003351:	83 f8 02             	cmp    eax,0x2
c0003354:	74 90                	je     c00032e6 <create_chain+0x31>
c0003356:	83 f8 01             	cmp    eax,0x1
c0003359:	0f 84 fc 00 00 00    	je     c000345b <create_chain+0x1a6>
c000335f:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003364:	75 09                	jne    c000336f <create_chain+0xba>
c0003366:	c6 45 07 02          	mov    BYTE PTR [ebp+0x7],0x2
c000336a:	e9 0c 01 00 00       	jmp    c000347b <create_chain+0x1c6>
c000336f:	80 7d 07 02          	cmp    BYTE PTR [ebp+0x7],0x2
c0003373:	0f 85 e7 00 00 00    	jne    c0003460 <create_chain+0x1ab>
c0003379:	8d 57 01             	lea    edx,[edi+0x1]
c000337c:	39 da                	cmp    edx,ebx
c000337e:	0f 84 f7 00 00 00    	je     c000347b <create_chain+0x1c6>
c0003384:	2b 7d 08             	sub    edi,DWORD PTR [ebp+0x8]
c0003387:	c6 45 07 03          	mov    BYTE PTR [ebp+0x7],0x3
c000338b:	89 7d 14             	mov    DWORD PTR [ebp+0x14],edi
c000338e:	e9 cd 00 00 00       	jmp    c0003460 <create_chain+0x1ab>
c0003393:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c0003397:	75 41                	jne    c00033da <create_chain+0x125>
c0003399:	8d 5f 01             	lea    ebx,[edi+0x1]
c000339c:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c000339f:	77 05                	ja     c00033a6 <create_chain+0xf1>
c00033a1:	bb 02 00 00 00       	mov    ebx,0x2
c00033a6:	89 da                	mov    edx,ebx
c00033a8:	89 e8                	mov    eax,ebp
c00033aa:	e8 18 fc ff ff       	call   c0002fc7 <get_fat>
c00033af:	83 f8 01             	cmp    eax,0x1
c00033b2:	0f 84 2e ff ff ff    	je     c00032e6 <create_chain+0x31>
c00033b8:	83 f8 ff             	cmp    eax,0xffffffff
c00033bb:	0f 84 9a 00 00 00    	je     c000345b <create_chain+0x1a6>
c00033c1:	85 c0                	test   eax,eax
c00033c3:	74 11                	je     c00033d6 <create_chain+0x121>
c00033c5:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00033c8:	83 f8 01             	cmp    eax,0x1
c00033cb:	76 0d                	jbe    c00033da <create_chain+0x125>
c00033cd:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00033d0:	76 08                	jbe    c00033da <create_chain+0x125>
c00033d2:	89 c7                	mov    edi,eax
c00033d4:	eb 04                	jmp    c00033da <create_chain+0x125>
c00033d6:	85 db                	test   ebx,ebx
c00033d8:	75 38                	jne    c0003412 <create_chain+0x15d>
c00033da:	89 fb                	mov    ebx,edi
c00033dc:	43                   	inc    ebx
c00033dd:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c00033e0:	77 0e                	ja     c00033f0 <create_chain+0x13b>
c00033e2:	83 ff 01             	cmp    edi,0x1
c00033e5:	0f 86 28 ff ff ff    	jbe    c0003313 <create_chain+0x5e>
c00033eb:	bb 02 00 00 00       	mov    ebx,0x2
c00033f0:	89 da                	mov    edx,ebx
c00033f2:	89 e8                	mov    eax,ebp
c00033f4:	e8 ce fb ff ff       	call   c0002fc7 <get_fat>
c00033f9:	85 c0                	test   eax,eax
c00033fb:	74 15                	je     c0003412 <create_chain+0x15d>
c00033fd:	83 f8 01             	cmp    eax,0x1
c0003400:	0f 84 e0 fe ff ff    	je     c00032e6 <create_chain+0x31>
c0003406:	40                   	inc    eax
c0003407:	74 52                	je     c000345b <create_chain+0x1a6>
c0003409:	39 fb                	cmp    ebx,edi
c000340b:	75 cf                	jne    c00033dc <create_chain+0x127>
c000340d:	e9 01 ff ff ff       	jmp    c0003313 <create_chain+0x5e>
c0003412:	83 c9 ff             	or     ecx,0xffffffff
c0003415:	89 da                	mov    edx,ebx
c0003417:	89 f0                	mov    eax,esi
c0003419:	e8 a4 f9 ff ff       	call   c0002dc2 <put_fat>
c000341e:	85 c0                	test   eax,eax
c0003420:	75 32                	jne    c0003454 <create_chain+0x19f>
c0003422:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003427:	74 11                	je     c000343a <create_chain+0x185>
c0003429:	89 d9                	mov    ecx,ebx
c000342b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000342f:	89 f0                	mov    eax,esi
c0003431:	e8 8c f9 ff ff       	call   c0002dc2 <put_fat>
c0003436:	85 c0                	test   eax,eax
c0003438:	75 1a                	jne    c0003454 <create_chain+0x19f>
c000343a:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c000343d:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c0003440:	89 5e 14             	mov    DWORD PTR [esi+0x14],ebx
c0003443:	8d 51 fe             	lea    edx,[ecx-0x2]
c0003446:	39 d0                	cmp    eax,edx
c0003448:	77 04                	ja     c000344e <create_chain+0x199>
c000344a:	48                   	dec    eax
c000344b:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c000344e:	80 4e 04 01          	or     BYTE PTR [esi+0x4],0x1
c0003452:	eb 56                	jmp    c00034aa <create_chain+0x1f5>
c0003454:	48                   	dec    eax
c0003455:	0f 85 8b fe ff ff    	jne    c00032e6 <create_chain+0x31>
c000345b:	83 cb ff             	or     ebx,0xffffffff
c000345e:	eb 4a                	jmp    c00034aa <create_chain+0x1f5>
c0003460:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003464:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0003467:	41                   	inc    ecx
c0003468:	39 d9                	cmp    ecx,ebx
c000346a:	75 19                	jne    c0003485 <create_chain+0x1d0>
c000346c:	b9 02 00 00 00       	mov    ecx,0x2
c0003471:	85 d2                	test   edx,edx
c0003473:	74 03                	je     c0003478 <create_chain+0x1c3>
c0003475:	8d 4a 01             	lea    ecx,[edx+0x1]
c0003478:	89 4d 18             	mov    DWORD PTR [ebp+0x18],ecx
c000347b:	85 c0                	test   eax,eax
c000347d:	0f 85 63 fe ff ff    	jne    c00032e6 <create_chain+0x31>
c0003483:	eb b5                	jmp    c000343a <create_chain+0x185>
c0003485:	85 d2                	test   edx,edx
c0003487:	75 07                	jne    c0003490 <create_chain+0x1db>
c0003489:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c0003490:	89 d9                	mov    ecx,ebx
c0003492:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003496:	89 e8                	mov    eax,ebp
c0003498:	e8 bb fa ff ff       	call   c0002f58 <fill_last_frag>
c000349d:	85 c0                	test   eax,eax
c000349f:	75 b3                	jne    c0003454 <create_chain+0x19f>
c00034a1:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c00034a8:	eb 90                	jmp    c000343a <create_chain+0x185>
c00034aa:	83 c4 1c             	add    esp,0x1c
c00034ad:	89 d8                	mov    eax,ebx
c00034af:	5b                   	pop    ebx
c00034b0:	5e                   	pop    esi
c00034b1:	5f                   	pop    edi
c00034b2:	5d                   	pop    ebp
c00034b3:	c3                   	ret    

c00034b4 <remove_chain>:
c00034b4:	55                   	push   ebp
c00034b5:	57                   	push   edi
c00034b6:	56                   	push   esi
c00034b7:	53                   	push   ebx
c00034b8:	83 ec 1c             	sub    esp,0x1c
c00034bb:	83 fa 01             	cmp    edx,0x1
c00034be:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00034c2:	8b 18                	mov    ebx,DWORD PTR [eax]
c00034c4:	77 0a                	ja     c00034d0 <remove_chain+0x1c>
c00034c6:	b8 02 00 00 00       	mov    eax,0x2
c00034cb:	e9 24 01 00 00       	jmp    c00035f4 <remove_chain+0x140>
c00034d0:	89 d6                	mov    esi,edx
c00034d2:	39 53 1c             	cmp    DWORD PTR [ebx+0x1c],edx
c00034d5:	76 ef                	jbe    c00034c6 <remove_chain+0x12>
c00034d7:	89 c7                	mov    edi,eax
c00034d9:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00034de:	75 06                	jne    c00034e6 <remove_chain+0x32>
c00034e0:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00034e4:	eb 54                	jmp    c000353a <remove_chain+0x86>
c00034e6:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00034e9:	75 06                	jne    c00034f1 <remove_chain+0x3d>
c00034eb:	80 78 07 02          	cmp    BYTE PTR [eax+0x7],0x2
c00034ef:	74 ef                	je     c00034e0 <remove_chain+0x2c>
c00034f1:	83 c9 ff             	or     ecx,0xffffffff
c00034f4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00034f8:	89 d8                	mov    eax,ebx
c00034fa:	e8 c3 f8 ff ff       	call   c0002dc2 <put_fat>
c00034ff:	85 c0                	test   eax,eax
c0003501:	74 dd                	je     c00034e0 <remove_chain+0x2c>
c0003503:	e9 ec 00 00 00       	jmp    c00035f4 <remove_chain+0x140>
c0003508:	83 f8 01             	cmp    eax,0x1
c000350b:	74 b9                	je     c00034c6 <remove_chain+0x12>
c000350d:	83 f8 ff             	cmp    eax,0xffffffff
c0003510:	74 6d                	je     c000357f <remove_chain+0xcb>
c0003512:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003515:	75 6f                	jne    c0003586 <remove_chain+0xd2>
c0003517:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000351a:	8b 4b 1c             	mov    ecx,DWORD PTR [ebx+0x1c]
c000351d:	8d 51 fe             	lea    edx,[ecx-0x2]
c0003520:	39 d0                	cmp    eax,edx
c0003522:	73 08                	jae    c000352c <remove_chain+0x78>
c0003524:	40                   	inc    eax
c0003525:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c0003529:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000352c:	8d 4e 01             	lea    ecx,[esi+0x1]
c000352f:	39 e9                	cmp    ecx,ebp
c0003531:	75 64                	jne    c0003597 <remove_chain+0xe3>
c0003533:	89 ee                	mov    esi,ebp
c0003535:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c0003538:	76 0f                	jbe    c0003549 <remove_chain+0x95>
c000353a:	89 f2                	mov    edx,esi
c000353c:	89 f8                	mov    eax,edi
c000353e:	e8 84 fa ff ff       	call   c0002fc7 <get_fat>
c0003543:	89 c5                	mov    ebp,eax
c0003545:	85 c0                	test   eax,eax
c0003547:	75 bf                	jne    c0003508 <remove_chain+0x54>
c0003549:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c000354c:	0f 85 a0 00 00 00    	jne    c00035f2 <remove_chain+0x13e>
c0003552:	eb 6c                	jmp    c00035c0 <remove_chain+0x10c>
c0003554:	8a 47 07             	mov    al,BYTE PTR [edi+0x7]
c0003557:	84 c0                	test   al,al
c0003559:	75 7d                	jne    c00035d8 <remove_chain+0x124>
c000355b:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c000355e:	3b 5c 24 08          	cmp    ebx,DWORD PTR [esp+0x8]
c0003562:	0f 84 86 00 00 00    	je     c00035ee <remove_chain+0x13a>
c0003568:	89 da                	mov    edx,ebx
c000356a:	89 f8                	mov    eax,edi
c000356c:	e8 56 fa ff ff       	call   c0002fc7 <get_fat>
c0003571:	83 f8 01             	cmp    eax,0x1
c0003574:	0f 86 4c ff ff ff    	jbe    c00034c6 <remove_chain+0x12>
c000357a:	83 f8 ff             	cmp    eax,0xffffffff
c000357d:	75 4e                	jne    c00035cd <remove_chain+0x119>
c000357f:	b8 01 00 00 00       	mov    eax,0x1
c0003584:	eb 6e                	jmp    c00035f4 <remove_chain+0x140>
c0003586:	31 c9                	xor    ecx,ecx
c0003588:	89 f2                	mov    edx,esi
c000358a:	89 d8                	mov    eax,ebx
c000358c:	e8 31 f8 ff ff       	call   c0002dc2 <put_fat>
c0003591:	85 c0                	test   eax,eax
c0003593:	74 82                	je     c0003517 <remove_chain+0x63>
c0003595:	eb 5d                	jmp    c00035f4 <remove_chain+0x140>
c0003597:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c000359a:	75 1b                	jne    c00035b7 <remove_chain+0x103>
c000359c:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c00035a0:	89 d8                	mov    eax,ebx
c00035a2:	83 ec 0c             	sub    esp,0xc
c00035a5:	6a 00                	push   0x0
c00035a7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00035ab:	e8 5d f7 ff ff       	call   c0002d0d <change_bitmap>
c00035b0:	83 c4 10             	add    esp,0x10
c00035b3:	85 c0                	test   eax,eax
c00035b5:	75 3d                	jne    c00035f4 <remove_chain+0x140>
c00035b7:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c00035bb:	e9 73 ff ff ff       	jmp    c0003533 <remove_chain+0x7f>
c00035c0:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00035c5:	75 8d                	jne    c0003554 <remove_chain+0xa0>
c00035c7:	c6 47 07 00          	mov    BYTE PTR [edi+0x7],0x0
c00035cb:	eb 25                	jmp    c00035f2 <remove_chain+0x13e>
c00035cd:	8d 53 01             	lea    edx,[ebx+0x1]
c00035d0:	89 c3                	mov    ebx,eax
c00035d2:	39 c2                	cmp    edx,eax
c00035d4:	74 88                	je     c000355e <remove_chain+0xaa>
c00035d6:	eb 1a                	jmp    c00035f2 <remove_chain+0x13e>
c00035d8:	3c 03                	cmp    al,0x3
c00035da:	75 16                	jne    c00035f2 <remove_chain+0x13e>
c00035dc:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00035df:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00035e3:	77 0d                	ja     c00035f2 <remove_chain+0x13e>
c00035e5:	03 47 14             	add    eax,DWORD PTR [edi+0x14]
c00035e8:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00035ec:	72 04                	jb     c00035f2 <remove_chain+0x13e>
c00035ee:	c6 47 07 02          	mov    BYTE PTR [edi+0x7],0x2
c00035f2:	31 c0                	xor    eax,eax
c00035f4:	83 c4 1c             	add    esp,0x1c
c00035f7:	5b                   	pop    ebx
c00035f8:	5e                   	pop    esi
c00035f9:	5f                   	pop    edi
c00035fa:	5d                   	pop    ebp
c00035fb:	c3                   	ret    

c00035fc <dir_clear>:
c00035fc:	55                   	push   ebp
c00035fd:	57                   	push   edi
c00035fe:	56                   	push   esi
c00035ff:	89 c6                	mov    esi,eax
c0003601:	53                   	push   ebx
c0003602:	83 ec 1c             	sub    esp,0x1c
c0003605:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003609:	e8 9d ed ff ff       	call   c00023ab <sync_window>
c000360e:	85 c0                	test   eax,eax
c0003610:	0f 85 de 00 00 00    	jne    c00036f4 <dir_clear+0xf8>
c0003616:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000361a:	89 f0                	mov    eax,esi
c000361c:	8d 6e 54             	lea    ebp,[esi+0x54]
c000361f:	e8 d6 e8 ff ff       	call   c0001efa <clst2sect>
c0003624:	b9 00 02 00 00       	mov    ecx,0x200
c0003629:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000362d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003631:	89 46 4c             	mov    DWORD PTR [esi+0x4c],eax
c0003634:	89 56 50             	mov    DWORD PTR [esi+0x50],edx
c0003637:	89 e8                	mov    eax,ebp
c0003639:	31 d2                	xor    edx,edx
c000363b:	e8 b5 e6 ff ff       	call   c0001cf5 <mem_set>
c0003640:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c0003644:	c1 e3 09             	shl    ebx,0x9
c0003647:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c000364d:	76 1f                	jbe    c000366e <dir_clear+0x72>
c000364f:	bb 00 80 00 00       	mov    ebx,0x8000
c0003654:	eb 18                	jmp    c000366e <dir_clear+0x72>
c0003656:	83 ec 0c             	sub    esp,0xc
c0003659:	53                   	push   ebx
c000365a:	e8 35 4e 00 00       	call   c0008494 <ff_memalloc>
c000365f:	83 c4 10             	add    esp,0x10
c0003662:	89 c7                	mov    edi,eax
c0003664:	85 c0                	test   eax,eax
c0003666:	0f 85 8f 00 00 00    	jne    c00036fb <dir_clear+0xff>
c000366c:	d1 eb                	shr    ebx,1
c000366e:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0003674:	77 e0                	ja     c0003656 <dir_clear+0x5a>
c0003676:	31 db                	xor    ebx,ebx
c0003678:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c000367c:	39 d8                	cmp    eax,ebx
c000367e:	76 66                	jbe    c00036e6 <dir_clear+0xea>
c0003680:	83 ec 0c             	sub    esp,0xc
c0003683:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003687:	6a 01                	push   0x1
c0003689:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000368d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0003691:	55                   	push   ebp
c0003692:	50                   	push   eax
c0003693:	e8 94 e5 ff ff       	call   c0001c2c <disk_write>
c0003698:	83 44 24 28 01       	add    DWORD PTR [esp+0x28],0x1
c000369d:	83 54 24 2c 00       	adc    DWORD PTR [esp+0x2c],0x0
c00036a2:	83 c4 20             	add    esp,0x20
c00036a5:	85 c0                	test   eax,eax
c00036a7:	75 3d                	jne    c00036e6 <dir_clear+0xea>
c00036a9:	43                   	inc    ebx
c00036aa:	eb cc                	jmp    c0003678 <dir_clear+0x7c>
c00036ac:	83 ec 0c             	sub    esp,0xc
c00036af:	31 d2                	xor    edx,edx
c00036b1:	55                   	push   ebp
c00036b2:	89 d8                	mov    eax,ebx
c00036b4:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00036b8:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c00036bc:	52                   	push   edx
c00036bd:	50                   	push   eax
c00036be:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00036c2:	57                   	push   edi
c00036c3:	50                   	push   eax
c00036c4:	e8 63 e5 ff ff       	call   c0001c2c <disk_write>
c00036c9:	83 c4 20             	add    esp,0x20
c00036cc:	85 c0                	test   eax,eax
c00036ce:	75 0a                	jne    c00036da <dir_clear+0xde>
c00036d0:	01 eb                	add    ebx,ebp
c00036d2:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00036d6:	39 d8                	cmp    eax,ebx
c00036d8:	77 d2                	ja     c00036ac <dir_clear+0xb0>
c00036da:	83 ec 0c             	sub    esp,0xc
c00036dd:	57                   	push   edi
c00036de:	e8 c7 4d 00 00       	call   c00084aa <ff_memfree>
c00036e3:	83 c4 10             	add    esp,0x10
c00036e6:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00036ea:	39 d8                	cmp    eax,ebx
c00036ec:	0f 95 c0             	setne  al
c00036ef:	0f b6 c0             	movzx  eax,al
c00036f2:	eb 19                	jmp    c000370d <dir_clear+0x111>
c00036f4:	b8 01 00 00 00       	mov    eax,0x1
c00036f9:	eb 12                	jmp    c000370d <dir_clear+0x111>
c00036fb:	89 d9                	mov    ecx,ebx
c00036fd:	31 d2                	xor    edx,edx
c00036ff:	c1 eb 09             	shr    ebx,0x9
c0003702:	e8 ee e5 ff ff       	call   c0001cf5 <mem_set>
c0003707:	89 dd                	mov    ebp,ebx
c0003709:	31 db                	xor    ebx,ebx
c000370b:	eb c5                	jmp    c00036d2 <dir_clear+0xd6>
c000370d:	83 c4 1c             	add    esp,0x1c
c0003710:	5b                   	pop    ebx
c0003711:	5e                   	pop    esi
c0003712:	5f                   	pop    edi
c0003713:	5d                   	pop    ebp
c0003714:	c3                   	ret    

c0003715 <dir_next>:
c0003715:	55                   	push   ebp
c0003716:	57                   	push   edi
c0003717:	56                   	push   esi
c0003718:	53                   	push   ebx
c0003719:	89 c3                	mov    ebx,eax
c000371b:	83 ec 1c             	sub    esp,0x1c
c000371e:	8b 28                	mov    ebp,DWORD PTR [eax]
c0003720:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003724:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0003727:	8d 78 20             	lea    edi,[eax+0x20]
c000372a:	31 c0                	xor    eax,eax
c000372c:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c0003730:	0f 94 c0             	sete   al
c0003733:	48                   	dec    eax
c0003734:	25 00 00 20 f0       	and    eax,0xf0200000
c0003739:	05 00 00 00 10       	add    eax,0x10000000
c000373e:	39 f8                	cmp    eax,edi
c0003740:	77 0e                	ja     c0003750 <dir_next+0x3b>
c0003742:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003749:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003750:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003753:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003756:	b8 04 00 00 00       	mov    eax,0x4
c000375b:	89 ce                	mov    esi,ecx
c000375d:	09 d6                	or     esi,edx
c000375f:	0f 84 da 00 00 00    	je     c000383f <dir_next+0x12a>
c0003765:	89 f8                	mov    eax,edi
c0003767:	25 ff 01 00 00       	and    eax,0x1ff
c000376c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003770:	0f 85 b9 00 00 00    	jne    c000382f <dir_next+0x11a>
c0003776:	83 c2 01             	add    edx,0x1
c0003779:	83 d1 00             	adc    ecx,0x0
c000377c:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c000377f:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c0003782:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0003785:	85 d2                	test   edx,edx
c0003787:	75 29                	jne    c00037b2 <dir_next+0x9d>
c0003789:	89 fa                	mov    edx,edi
c000378b:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000378f:	c1 ea 05             	shr    edx,0x5
c0003792:	39 c2                	cmp    edx,eax
c0003794:	0f 82 95 00 00 00    	jb     c000382f <dir_next+0x11a>
c000379a:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c00037a1:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c00037a8:	b8 04 00 00 00       	mov    eax,0x4
c00037ad:	e9 8d 00 00 00       	jmp    c000383f <dir_next+0x12a>
c00037b2:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c00037b6:	89 f9                	mov    ecx,edi
c00037b8:	48                   	dec    eax
c00037b9:	c1 e9 09             	shr    ecx,0x9
c00037bc:	85 c8                	test   eax,ecx
c00037be:	75 6f                	jne    c000382f <dir_next+0x11a>
c00037c0:	89 d8                	mov    eax,ebx
c00037c2:	e8 00 f8 ff ff       	call   c0002fc7 <get_fat>
c00037c7:	89 c6                	mov    esi,eax
c00037c9:	83 f8 01             	cmp    eax,0x1
c00037cc:	77 07                	ja     c00037d5 <dir_next+0xc0>
c00037ce:	b8 02 00 00 00       	mov    eax,0x2
c00037d3:	eb 6a                	jmp    c000383f <dir_next+0x12a>
c00037d5:	83 f8 ff             	cmp    eax,0xffffffff
c00037d8:	75 07                	jne    c00037e1 <dir_next+0xcc>
c00037da:	b8 01 00 00 00       	mov    eax,0x1
c00037df:	eb 5e                	jmp    c000383f <dir_next+0x12a>
c00037e1:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c00037e4:	77 37                	ja     c000381d <dir_next+0x108>
c00037e6:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00037eb:	74 ad                	je     c000379a <dir_next+0x85>
c00037ed:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00037f0:	89 d8                	mov    eax,ebx
c00037f2:	e8 be fa ff ff       	call   c00032b5 <create_chain>
c00037f7:	89 c6                	mov    esi,eax
c00037f9:	b8 07 00 00 00       	mov    eax,0x7
c00037fe:	85 f6                	test   esi,esi
c0003800:	74 3d                	je     c000383f <dir_next+0x12a>
c0003802:	83 fe 01             	cmp    esi,0x1
c0003805:	74 c7                	je     c00037ce <dir_next+0xb9>
c0003807:	83 fe ff             	cmp    esi,0xffffffff
c000380a:	74 ce                	je     c00037da <dir_next+0xc5>
c000380c:	89 f2                	mov    edx,esi
c000380e:	89 e8                	mov    eax,ebp
c0003810:	e8 e7 fd ff ff       	call   c00035fc <dir_clear>
c0003815:	85 c0                	test   eax,eax
c0003817:	75 c1                	jne    c00037da <dir_next+0xc5>
c0003819:	80 4b 07 04          	or     BYTE PTR [ebx+0x7],0x4
c000381d:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0003820:	89 f2                	mov    edx,esi
c0003822:	89 e8                	mov    eax,ebp
c0003824:	e8 d1 e6 ff ff       	call   c0001efa <clst2sect>
c0003829:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000382c:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000382f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003833:	89 7b 28             	mov    DWORD PTR [ebx+0x28],edi
c0003836:	8d 44 05 54          	lea    eax,[ebp+eax*1+0x54]
c000383a:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c000383d:	31 c0                	xor    eax,eax
c000383f:	83 c4 1c             	add    esp,0x1c
c0003842:	5b                   	pop    ebx
c0003843:	5e                   	pop    esi
c0003844:	5f                   	pop    edi
c0003845:	5d                   	pop    ebp
c0003846:	c3                   	ret    

c0003847 <load_xdir>:
c0003847:	55                   	push   ebp
c0003848:	57                   	push   edi
c0003849:	56                   	push   esi
c000384a:	89 c6                	mov    esi,eax
c000384c:	53                   	push   ebx
c000384d:	83 ec 1c             	sub    esp,0x1c
c0003850:	8b 00                	mov    eax,DWORD PTR [eax]
c0003852:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c0003855:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0003858:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000385b:	e8 df eb ff ff       	call   c000243f <move_window>
c0003860:	89 c3                	mov    ebx,eax
c0003862:	85 c0                	test   eax,eax
c0003864:	0f 85 0c 01 00 00    	jne    c0003976 <load_xdir+0x12f>
c000386a:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c000386d:	80 3a 85             	cmp    BYTE PTR [edx],0x85
c0003870:	0f 85 fb 00 00 00    	jne    c0003971 <load_xdir+0x12a>
c0003876:	89 f8                	mov    eax,edi
c0003878:	b9 20 00 00 00       	mov    ecx,0x20
c000387d:	e8 5e e4 ff ff       	call   c0001ce0 <mem_cpy>
c0003882:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c0003886:	40                   	inc    eax
c0003887:	c1 e0 05             	shl    eax,0x5
c000388a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000388e:	83 e8 60             	sub    eax,0x60
c0003891:	3d 00 02 00 00       	cmp    eax,0x200
c0003896:	0f 87 d5 00 00 00    	ja     c0003971 <load_xdir+0x12a>
c000389c:	31 d2                	xor    edx,edx
c000389e:	89 f0                	mov    eax,esi
c00038a0:	e8 70 fe ff ff       	call   c0003715 <dir_next>
c00038a5:	89 c3                	mov    ebx,eax
c00038a7:	83 f8 04             	cmp    eax,0x4
c00038aa:	0f 84 c1 00 00 00    	je     c0003971 <load_xdir+0x12a>
c00038b0:	85 c0                	test   eax,eax
c00038b2:	0f 85 be 00 00 00    	jne    c0003976 <load_xdir+0x12f>
c00038b8:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c00038bb:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c00038be:	8b 06                	mov    eax,DWORD PTR [esi]
c00038c0:	e8 7a eb ff ff       	call   c000243f <move_window>
c00038c5:	89 c3                	mov    ebx,eax
c00038c7:	85 c0                	test   eax,eax
c00038c9:	0f 85 a7 00 00 00    	jne    c0003976 <load_xdir+0x12f>
c00038cf:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c00038d2:	80 3a c0             	cmp    BYTE PTR [edx],0xc0
c00038d5:	0f 85 96 00 00 00    	jne    c0003971 <load_xdir+0x12a>
c00038db:	8d 47 20             	lea    eax,[edi+0x20]
c00038de:	b9 20 00 00 00       	mov    ecx,0x20
c00038e3:	e8 f8 e3 ff ff       	call   c0001ce0 <mem_cpy>
c00038e8:	31 d2                	xor    edx,edx
c00038ea:	0f b6 47 23          	movzx  eax,BYTE PTR [edi+0x23]
c00038ee:	b9 0f 00 00 00       	mov    ecx,0xf
c00038f3:	83 c0 2c             	add    eax,0x2c
c00038f6:	f7 f1                	div    ecx
c00038f8:	c1 e0 05             	shl    eax,0x5
c00038fb:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00038ff:	77 70                	ja     c0003971 <load_xdir+0x12a>
c0003901:	bd 40 00 00 00       	mov    ebp,0x40
c0003906:	31 d2                	xor    edx,edx
c0003908:	89 f0                	mov    eax,esi
c000390a:	e8 06 fe ff ff       	call   c0003715 <dir_next>
c000390f:	89 c3                	mov    ebx,eax
c0003911:	83 f8 04             	cmp    eax,0x4
c0003914:	74 5b                	je     c0003971 <load_xdir+0x12a>
c0003916:	85 c0                	test   eax,eax
c0003918:	75 5c                	jne    c0003976 <load_xdir+0x12f>
c000391a:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000391d:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0003920:	8b 06                	mov    eax,DWORD PTR [esi]
c0003922:	e8 18 eb ff ff       	call   c000243f <move_window>
c0003927:	89 c3                	mov    ebx,eax
c0003929:	85 c0                	test   eax,eax
c000392b:	75 49                	jne    c0003976 <load_xdir+0x12f>
c000392d:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c0003930:	80 3a c1             	cmp    BYTE PTR [edx],0xc1
c0003933:	75 3c                	jne    c0003971 <load_xdir+0x12a>
c0003935:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c000393b:	77 0d                	ja     c000394a <load_xdir+0x103>
c000393d:	8d 04 2f             	lea    eax,[edi+ebp*1]
c0003940:	b9 20 00 00 00       	mov    ecx,0x20
c0003945:	e8 96 e3 ff ff       	call   c0001ce0 <mem_cpy>
c000394a:	83 c5 20             	add    ebp,0x20
c000394d:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
c0003951:	77 b3                	ja     c0003906 <load_xdir+0xbf>
c0003953:	81 fd 60 02 00 00    	cmp    ebp,0x260
c0003959:	77 1b                	ja     c0003976 <load_xdir+0x12f>
c000395b:	89 f8                	mov    eax,edi
c000395d:	e8 cd e7 ff ff       	call   c000212f <xdir_sum>
c0003962:	89 c1                	mov    ecx,eax
c0003964:	8d 47 02             	lea    eax,[edi+0x2]
c0003967:	e8 f5 e2 ff ff       	call   c0001c61 <ld_word>
c000396c:	66 39 c1             	cmp    cx,ax
c000396f:	74 05                	je     c0003976 <load_xdir+0x12f>
c0003971:	bb 02 00 00 00       	mov    ebx,0x2
c0003976:	83 c4 1c             	add    esp,0x1c
c0003979:	89 d8                	mov    eax,ebx
c000397b:	5b                   	pop    ebx
c000397c:	5e                   	pop    esi
c000397d:	5f                   	pop    edi
c000397e:	5d                   	pop    ebp
c000397f:	c3                   	ret    

c0003980 <load_obj_xdir>:
c0003980:	53                   	push   ebx
c0003981:	89 c3                	mov    ebx,eax
c0003983:	83 ec 08             	sub    esp,0x8
c0003986:	8b 02                	mov    eax,DWORD PTR [edx]
c0003988:	89 03                	mov    DWORD PTR [ebx],eax
c000398a:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000398d:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003990:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0003993:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0003996:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0003999:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c00039a0:	30 c0                	xor    al,al
c00039a2:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c00039a9:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00039ac:	89 d8                	mov    eax,ebx
c00039ae:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c00039b1:	89 53 48             	mov    DWORD PTR [ebx+0x48],edx
c00039b4:	e8 04 f8 ff ff       	call   c00031bd <dir_sdi>
c00039b9:	85 c0                	test   eax,eax
c00039bb:	75 0b                	jne    c00039c8 <load_obj_xdir+0x48>
c00039bd:	89 d8                	mov    eax,ebx
c00039bf:	83 c4 08             	add    esp,0x8
c00039c2:	5b                   	pop    ebx
c00039c3:	e9 7f fe ff ff       	jmp    c0003847 <load_xdir>
c00039c8:	83 c4 08             	add    esp,0x8
c00039cb:	5b                   	pop    ebx
c00039cc:	c3                   	ret    

c00039cd <dir_read>:
c00039cd:	55                   	push   ebp
c00039ce:	bd 04 00 00 00       	mov    ebp,0x4
c00039d3:	57                   	push   edi
c00039d4:	56                   	push   esi
c00039d5:	be ff ff ff ff       	mov    esi,0xffffffff
c00039da:	53                   	push   ebx
c00039db:	89 c3                	mov    ebx,eax
c00039dd:	83 ec 1c             	sub    esp,0x1c
c00039e0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00039e4:	8b 38                	mov    edi,DWORD PTR [eax]
c00039e6:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c00039eb:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00039ee:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00039f1:	89 c8                	mov    eax,ecx
c00039f3:	09 d0                	or     eax,edx
c00039f5:	0f 84 25 01 00 00    	je     c0003b20 <dir_read+0x153>
c00039fb:	89 f8                	mov    eax,edi
c00039fd:	e8 3d ea ff ff       	call   c000243f <move_window>
c0003a02:	89 c5                	mov    ebp,eax
c0003a04:	85 c0                	test   eax,eax
c0003a06:	0f 85 23 01 00 00    	jne    c0003b2f <dir_read+0x162>
c0003a0c:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003a0f:	8a 0a                	mov    cl,BYTE PTR [edx]
c0003a11:	84 c9                	test   cl,cl
c0003a13:	0f 84 11 01 00 00    	je     c0003b2a <dir_read+0x15d>
c0003a19:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003a1c:	75 48                	jne    c0003a66 <dir_read+0x99>
c0003a1e:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003a23:	74 10                	je     c0003a35 <dir_read+0x68>
c0003a25:	80 f9 83             	cmp    cl,0x83
c0003a28:	0f 85 dd 00 00 00    	jne    c0003b0b <dir_read+0x13e>
c0003a2e:	31 ed                	xor    ebp,ebp
c0003a30:	e9 08 01 00 00       	jmp    c0003b3d <dir_read+0x170>
c0003a35:	80 f9 85             	cmp    cl,0x85
c0003a38:	0f 85 cd 00 00 00    	jne    c0003b0b <dir_read+0x13e>
c0003a3e:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003a41:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003a44:	89 d8                	mov    eax,ebx
c0003a46:	e8 fc fd ff ff       	call   c0003847 <load_xdir>
c0003a4b:	89 c5                	mov    ebp,eax
c0003a4d:	85 c0                	test   eax,eax
c0003a4f:	0f 85 da 00 00 00    	jne    c0003b2f <dir_read+0x162>
c0003a55:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0003a58:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c0003a5b:	83 e0 3f             	and    eax,0x3f
c0003a5e:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003a61:	e9 d7 00 00 00       	jmp    c0003b3d <dir_read+0x170>
c0003a66:	8a 42 0b             	mov    al,BYTE PTR [edx+0xb]
c0003a69:	83 e0 3f             	and    eax,0x3f
c0003a6c:	80 f9 2e             	cmp    cl,0x2e
c0003a6f:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0003a73:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003a76:	0f 84 8a 00 00 00    	je     c0003b06 <dir_read+0x139>
c0003a7c:	80 f9 e5             	cmp    cl,0xe5
c0003a7f:	0f 84 81 00 00 00    	je     c0003b06 <dir_read+0x139>
c0003a85:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003a89:	83 e0 1f             	and    eax,0x1f
c0003a8c:	83 f8 08             	cmp    eax,0x8
c0003a8f:	0f 94 c0             	sete   al
c0003a92:	0f b6 c0             	movzx  eax,al
c0003a95:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0003a99:	75 6b                	jne    c0003b06 <dir_read+0x139>
c0003a9b:	80 7c 24 08 0f       	cmp    BYTE PTR [esp+0x8],0xf
c0003aa0:	75 44                	jne    c0003ae6 <dir_read+0x119>
c0003aa2:	f6 c1 40             	test   cl,0x40
c0003aa5:	74 12                	je     c0003ab9 <dir_read+0xec>
c0003aa7:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c0003aaa:	83 e1 bf             	and    ecx,0xffffffbf
c0003aad:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0003ab1:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003ab4:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003ab7:	eb 06                	jmp    c0003abf <dir_read+0xf2>
c0003ab9:	89 f0                	mov    eax,esi
c0003abb:	38 c8                	cmp    al,cl
c0003abd:	75 47                	jne    c0003b06 <dir_read+0x139>
c0003abf:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0003ac3:	be ff ff ff ff       	mov    esi,0xffffffff
c0003ac8:	38 42 0d             	cmp    BYTE PTR [edx+0xd],al
c0003acb:	75 3e                	jne    c0003b0b <dir_read+0x13e>
c0003acd:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0003ad1:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003ad4:	e8 8a e4 ff ff       	call   c0001f63 <pick_lfn>
c0003ad9:	85 c0                	test   eax,eax
c0003adb:	74 2e                	je     c0003b0b <dir_read+0x13e>
c0003add:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0003ae1:	8d 71 ff             	lea    esi,[ecx-0x1]
c0003ae4:	eb 25                	jmp    c0003b0b <dir_read+0x13e>
c0003ae6:	89 f0                	mov    eax,esi
c0003ae8:	84 c0                	test   al,al
c0003aea:	75 11                	jne    c0003afd <dir_read+0x130>
c0003aec:	89 d0                	mov    eax,edx
c0003aee:	e8 2a e6 ff ff       	call   c000211d <sum_sfn>
c0003af3:	3a 44 24 07          	cmp    al,BYTE PTR [esp+0x7]
c0003af7:	0f 84 31 ff ff ff    	je     c0003a2e <dir_read+0x61>
c0003afd:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0003b04:	eb 37                	jmp    c0003b3d <dir_read+0x170>
c0003b06:	be ff ff ff ff       	mov    esi,0xffffffff
c0003b0b:	31 d2                	xor    edx,edx
c0003b0d:	89 d8                	mov    eax,ebx
c0003b0f:	e8 01 fc ff ff       	call   c0003715 <dir_next>
c0003b14:	89 c5                	mov    ebp,eax
c0003b16:	85 c0                	test   eax,eax
c0003b18:	0f 84 cd fe ff ff    	je     c00039eb <dir_read+0x1e>
c0003b1e:	eb 0f                	jmp    c0003b2f <dir_read+0x162>
c0003b20:	85 ed                	test   ebp,ebp
c0003b22:	0f 84 06 ff ff ff    	je     c0003a2e <dir_read+0x61>
c0003b28:	eb 05                	jmp    c0003b2f <dir_read+0x162>
c0003b2a:	bd 04 00 00 00       	mov    ebp,0x4
c0003b2f:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003b36:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003b3d:	83 c4 1c             	add    esp,0x1c
c0003b40:	89 e8                	mov    eax,ebp
c0003b42:	5b                   	pop    ebx
c0003b43:	5e                   	pop    esi
c0003b44:	5f                   	pop    edi
c0003b45:	5d                   	pop    ebp
c0003b46:	c3                   	ret    

c0003b47 <dir_alloc>:
c0003b47:	55                   	push   ebp
c0003b48:	89 d5                	mov    ebp,edx
c0003b4a:	57                   	push   edi
c0003b4b:	31 d2                	xor    edx,edx
c0003b4d:	56                   	push   esi
c0003b4e:	53                   	push   ebx
c0003b4f:	89 c3                	mov    ebx,eax
c0003b51:	83 ec 0c             	sub    esp,0xc
c0003b54:	8b 38                	mov    edi,DWORD PTR [eax]
c0003b56:	e8 62 f6 ff ff       	call   c00031bd <dir_sdi>
c0003b5b:	85 c0                	test   eax,eax
c0003b5d:	75 4e                	jne    c0003bad <dir_alloc+0x66>
c0003b5f:	31 f6                	xor    esi,esi
c0003b61:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003b64:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003b67:	89 f8                	mov    eax,edi
c0003b69:	e8 d1 e8 ff ff       	call   c000243f <move_window>
c0003b6e:	85 c0                	test   eax,eax
c0003b70:	75 3b                	jne    c0003bad <dir_alloc+0x66>
c0003b72:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003b75:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003b78:	8a 12                	mov    dl,BYTE PTR [edx]
c0003b7a:	75 07                	jne    c0003b83 <dir_alloc+0x3c>
c0003b7c:	f7 d2                	not    edx
c0003b7e:	c0 ea 07             	shr    dl,0x7
c0003b81:	eb 0d                	jmp    c0003b90 <dir_alloc+0x49>
c0003b83:	84 d2                	test   dl,dl
c0003b85:	0f 94 c1             	sete   cl
c0003b88:	80 fa e5             	cmp    dl,0xe5
c0003b8b:	0f 94 c2             	sete   dl
c0003b8e:	09 ca                	or     edx,ecx
c0003b90:	84 d2                	test   dl,dl
c0003b92:	74 07                	je     c0003b9b <dir_alloc+0x54>
c0003b94:	46                   	inc    esi
c0003b95:	39 ee                	cmp    esi,ebp
c0003b97:	75 04                	jne    c0003b9d <dir_alloc+0x56>
c0003b99:	eb 1c                	jmp    c0003bb7 <dir_alloc+0x70>
c0003b9b:	31 f6                	xor    esi,esi
c0003b9d:	ba 01 00 00 00       	mov    edx,0x1
c0003ba2:	89 d8                	mov    eax,ebx
c0003ba4:	e8 6c fb ff ff       	call   c0003715 <dir_next>
c0003ba9:	85 c0                	test   eax,eax
c0003bab:	74 b4                	je     c0003b61 <dir_alloc+0x1a>
c0003bad:	83 f8 04             	cmp    eax,0x4
c0003bb0:	75 05                	jne    c0003bb7 <dir_alloc+0x70>
c0003bb2:	b8 07 00 00 00       	mov    eax,0x7
c0003bb7:	83 c4 0c             	add    esp,0xc
c0003bba:	5b                   	pop    ebx
c0003bbb:	5e                   	pop    esi
c0003bbc:	5f                   	pop    edi
c0003bbd:	5d                   	pop    ebp
c0003bbe:	c3                   	ret    

c0003bbf <store_xdir>:
c0003bbf:	55                   	push   ebp
c0003bc0:	57                   	push   edi
c0003bc1:	89 c7                	mov    edi,eax
c0003bc3:	56                   	push   esi
c0003bc4:	53                   	push   ebx
c0003bc5:	83 ec 0c             	sub    esp,0xc
c0003bc8:	8b 00                	mov    eax,DWORD PTR [eax]
c0003bca:	8b 68 10             	mov    ebp,DWORD PTR [eax+0x10]
c0003bcd:	89 e8                	mov    eax,ebp
c0003bcf:	e8 5b e5 ff ff       	call   c000212f <xdir_sum>
c0003bd4:	0f b7 d0             	movzx  edx,ax
c0003bd7:	8d 45 02             	lea    eax,[ebp+0x2]
c0003bda:	e8 f4 e0 ff ff       	call   c0001cd3 <st_word>
c0003bdf:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c0003be3:	8b 57 48             	mov    edx,DWORD PTR [edi+0x48]
c0003be6:	89 f8                	mov    eax,edi
c0003be8:	e8 d0 f5 ff ff       	call   c00031bd <dir_sdi>
c0003bed:	89 c6                	mov    esi,eax
c0003bef:	85 f6                	test   esi,esi
c0003bf1:	75 3d                	jne    c0003c30 <store_xdir+0x71>
c0003bf3:	8b 57 30             	mov    edx,DWORD PTR [edi+0x30]
c0003bf6:	8b 4f 34             	mov    ecx,DWORD PTR [edi+0x34]
c0003bf9:	8b 07                	mov    eax,DWORD PTR [edi]
c0003bfb:	e8 3f e8 ff ff       	call   c000243f <move_window>
c0003c00:	89 c6                	mov    esi,eax
c0003c02:	85 c0                	test   eax,eax
c0003c04:	75 2a                	jne    c0003c30 <store_xdir+0x71>
c0003c06:	8b 47 38             	mov    eax,DWORD PTR [edi+0x38]
c0003c09:	b9 20 00 00 00       	mov    ecx,0x20
c0003c0e:	89 ea                	mov    edx,ebp
c0003c10:	e8 cb e0 ff ff       	call   c0001ce0 <mem_cpy>
c0003c15:	8b 07                	mov    eax,DWORD PTR [edi]
c0003c17:	85 db                	test   ebx,ebx
c0003c19:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003c1d:	74 11                	je     c0003c30 <store_xdir+0x71>
c0003c1f:	31 d2                	xor    edx,edx
c0003c21:	89 f8                	mov    eax,edi
c0003c23:	83 c5 20             	add    ebp,0x20
c0003c26:	e8 ea fa ff ff       	call   c0003715 <dir_next>
c0003c2b:	4b                   	dec    ebx
c0003c2c:	89 c6                	mov    esi,eax
c0003c2e:	eb bf                	jmp    c0003bef <store_xdir+0x30>
c0003c30:	89 f0                	mov    eax,esi
c0003c32:	83 fe 02             	cmp    esi,0x2
c0003c35:	76 05                	jbe    c0003c3c <store_xdir+0x7d>
c0003c37:	b8 02 00 00 00       	mov    eax,0x2
c0003c3c:	83 c4 0c             	add    esp,0xc
c0003c3f:	5b                   	pop    ebx
c0003c40:	5e                   	pop    esi
c0003c41:	5f                   	pop    edi
c0003c42:	5d                   	pop    ebp
c0003c43:	c3                   	ret    

c0003c44 <dir_remove>:
c0003c44:	57                   	push   edi
c0003c45:	56                   	push   esi
c0003c46:	53                   	push   ebx
c0003c47:	89 c3                	mov    ebx,eax
c0003c49:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c0003c4c:	8b 30                	mov    esi,DWORD PTR [eax]
c0003c4e:	8b 78 28             	mov    edi,DWORD PTR [eax+0x28]
c0003c51:	83 fa ff             	cmp    edx,0xffffffff
c0003c54:	74 09                	je     c0003c5f <dir_remove+0x1b>
c0003c56:	e8 62 f5 ff ff       	call   c00031bd <dir_sdi>
c0003c5b:	85 c0                	test   eax,eax
c0003c5d:	75 41                	jne    c0003ca0 <dir_remove+0x5c>
c0003c5f:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003c62:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003c65:	89 f0                	mov    eax,esi
c0003c67:	e8 d3 e7 ff ff       	call   c000243f <move_window>
c0003c6c:	85 c0                	test   eax,eax
c0003c6e:	75 26                	jne    c0003c96 <dir_remove+0x52>
c0003c70:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003c73:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003c76:	75 05                	jne    c0003c7d <dir_remove+0x39>
c0003c78:	80 22 7f             	and    BYTE PTR [edx],0x7f
c0003c7b:	eb 03                	jmp    c0003c80 <dir_remove+0x3c>
c0003c7d:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003c80:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003c84:	39 7b 28             	cmp    DWORD PTR [ebx+0x28],edi
c0003c87:	73 17                	jae    c0003ca0 <dir_remove+0x5c>
c0003c89:	31 d2                	xor    edx,edx
c0003c8b:	89 d8                	mov    eax,ebx
c0003c8d:	e8 83 fa ff ff       	call   c0003715 <dir_next>
c0003c92:	85 c0                	test   eax,eax
c0003c94:	74 c9                	je     c0003c5f <dir_remove+0x1b>
c0003c96:	83 f8 04             	cmp    eax,0x4
c0003c99:	75 05                	jne    c0003ca0 <dir_remove+0x5c>
c0003c9b:	b8 02 00 00 00       	mov    eax,0x2
c0003ca0:	5b                   	pop    ebx
c0003ca1:	5e                   	pop    esi
c0003ca2:	5f                   	pop    edi
c0003ca3:	c3                   	ret    

c0003ca4 <create_name>:
c0003ca4:	55                   	push   ebp
c0003ca5:	89 d5                	mov    ebp,edx
c0003ca7:	57                   	push   edi
c0003ca8:	89 c7                	mov    edi,eax
c0003caa:	56                   	push   esi
c0003cab:	31 f6                	xor    esi,esi
c0003cad:	53                   	push   ebx
c0003cae:	83 ec 3c             	sub    esp,0x3c
c0003cb1:	8b 02                	mov    eax,DWORD PTR [edx]
c0003cb3:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003cb7:	8b 07                	mov    eax,DWORD PTR [edi]
c0003cb9:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003cbc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0003cc0:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0003cc4:	e8 72 e0 ff ff       	call   c0001d3b <tchar2uni>
c0003cc9:	89 c3                	mov    ebx,eax
c0003ccb:	83 f8 ff             	cmp    eax,0xffffffff
c0003cce:	75 0a                	jne    c0003cda <create_name+0x36>
c0003cd0:	b8 06 00 00 00       	mov    eax,0x6
c0003cd5:	e9 9e 02 00 00       	jmp    c0003f78 <create_name+0x2d4>
c0003cda:	3d ff ff 00 00       	cmp    eax,0xffff
c0003cdf:	76 0c                	jbe    c0003ced <create_name+0x49>
c0003ce1:	c1 e8 10             	shr    eax,0x10
c0003ce4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0003ce8:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0003cec:	46                   	inc    esi
c0003ced:	66 83 fb 1f          	cmp    bx,0x1f
c0003cf1:	76 4f                	jbe    c0003d42 <create_name+0x9e>
c0003cf3:	66 83 fb 5c          	cmp    bx,0x5c
c0003cf7:	74 35                	je     c0003d2e <create_name+0x8a>
c0003cf9:	66 83 fb 2f          	cmp    bx,0x2f
c0003cfd:	74 2f                	je     c0003d2e <create_name+0x8a>
c0003cff:	66 83 fb 7f          	cmp    bx,0x7f
c0003d03:	77 11                	ja     c0003d16 <create_name+0x72>
c0003d05:	0f b7 d3             	movzx  edx,bx
c0003d08:	b8 52 95 02 c0       	mov    eax,0xc0029552
c0003d0d:	e8 11 e0 ff ff       	call   c0001d23 <chk_chr>
c0003d12:	85 c0                	test   eax,eax
c0003d14:	75 ba                	jne    c0003cd0 <create_name+0x2c>
c0003d16:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0003d1c:	77 b2                	ja     c0003cd0 <create_name+0x2c>
c0003d1e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d22:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0003d26:	46                   	inc    esi
c0003d27:	eb 97                	jmp    c0003cc0 <create_name+0x1c>
c0003d29:	40                   	inc    eax
c0003d2a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003d2e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003d32:	8a 10                	mov    dl,BYTE PTR [eax]
c0003d34:	80 fa 2f             	cmp    dl,0x2f
c0003d37:	74 f0                	je     c0003d29 <create_name+0x85>
c0003d39:	80 fa 5c             	cmp    dl,0x5c
c0003d3c:	74 eb                	je     c0003d29 <create_name+0x85>
c0003d3e:	31 db                	xor    ebx,ebx
c0003d40:	eb 02                	jmp    c0003d44 <create_name+0xa0>
c0003d42:	b3 04                	mov    bl,0x4
c0003d44:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003d48:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0003d4b:	85 f6                	test   esi,esi
c0003d4d:	74 18                	je     c0003d67 <create_name+0xc3>
c0003d4f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d53:	66 8b 44 70 fe       	mov    ax,WORD PTR [eax+esi*2-0x2]
c0003d58:	66 83 f8 20          	cmp    ax,0x20
c0003d5c:	74 06                	je     c0003d64 <create_name+0xc0>
c0003d5e:	66 83 f8 2e          	cmp    ax,0x2e
c0003d62:	75 03                	jne    c0003d67 <create_name+0xc3>
c0003d64:	4e                   	dec    esi
c0003d65:	eb e4                	jmp    c0003d4b <create_name+0xa7>
c0003d67:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d6b:	31 ed                	xor    ebp,ebp
c0003d6d:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0003d73:	85 f6                	test   esi,esi
c0003d75:	0f 84 55 ff ff ff    	je     c0003cd0 <create_name+0x2c>
c0003d7b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d7f:	8d 55 01             	lea    edx,[ebp+0x1]
c0003d82:	66 8b 04 68          	mov    ax,WORD PTR [eax+ebp*2]
c0003d86:	66 83 f8 20          	cmp    ax,0x20
c0003d8a:	75 04                	jne    c0003d90 <create_name+0xec>
c0003d8c:	89 d5                	mov    ebp,edx
c0003d8e:	eb eb                	jmp    c0003d7b <create_name+0xd7>
c0003d90:	85 ed                	test   ebp,ebp
c0003d92:	75 06                	jne    c0003d9a <create_name+0xf6>
c0003d94:	66 83 f8 2e          	cmp    ax,0x2e
c0003d98:	75 08                	jne    c0003da2 <create_name+0xfe>
c0003d9a:	83 cb 03             	or     ebx,0x3
c0003d9d:	eb 03                	jmp    c0003da2 <create_name+0xfe>
c0003d9f:	4e                   	dec    esi
c0003da0:	74 0c                	je     c0003dae <create_name+0x10a>
c0003da2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003da6:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0003dac:	75 f1                	jne    c0003d9f <create_name+0xfb>
c0003dae:	b9 0b 00 00 00       	mov    ecx,0xb
c0003db3:	8d 47 3c             	lea    eax,[edi+0x3c]
c0003db6:	ba 20 00 00 00       	mov    edx,0x20
c0003dbb:	e8 35 df ff ff       	call   c0001cf5 <mem_set>
c0003dc0:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0003dc8:	31 c9                	xor    ecx,ecx
c0003dca:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0003dcf:	8d 45 01             	lea    eax,[ebp+0x1]
c0003dd2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0003dd6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003dda:	0f b7 2c 68          	movzx  ebp,WORD PTR [eax+ebp*2]
c0003dde:	66 85 ed             	test   bp,bp
c0003de1:	0f 84 30 01 00 00    	je     c0003f17 <create_name+0x273>
c0003de7:	66 83 fd 20          	cmp    bp,0x20
c0003deb:	74 10                	je     c0003dfd <create_name+0x159>
c0003ded:	66 83 fd 2e          	cmp    bp,0x2e
c0003df1:	75 13                	jne    c0003e06 <create_name+0x162>
c0003df3:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003df7:	0f 84 6b 01 00 00    	je     c0003f68 <create_name+0x2c4>
c0003dfd:	83 cb 03             	or     ebx,0x3
c0003e00:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0003e04:	eb c9                	jmp    c0003dcf <create_name+0x12b>
c0003e06:	3b 4c 24 08          	cmp    ecx,DWORD PTR [esp+0x8]
c0003e0a:	73 0b                	jae    c0003e17 <create_name+0x173>
c0003e0c:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003e10:	75 47                	jne    c0003e59 <create_name+0x1b5>
c0003e12:	e9 51 01 00 00       	jmp    c0003f68 <create_name+0x2c4>
c0003e17:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003e1c:	75 10                	jne    c0003e2e <create_name+0x18a>
c0003e1e:	83 cb 03             	or     ebx,0x3
c0003e21:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003e29:	e9 e9 00 00 00       	jmp    c0003f17 <create_name+0x273>
c0003e2e:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003e32:	74 0d                	je     c0003e41 <create_name+0x19d>
c0003e34:	83 cb 03             	or     ebx,0x3
c0003e37:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003e3b:	0f 87 d6 00 00 00    	ja     c0003f17 <create_name+0x273>
c0003e41:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003e46:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0003e4a:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003e52:	b9 08 00 00 00       	mov    ecx,0x8
c0003e57:	eb a7                	jmp    c0003e00 <create_name+0x15c>
c0003e59:	66 83 fd 7f          	cmp    bp,0x7f
c0003e5d:	76 68                	jbe    c0003ec7 <create_name+0x223>
c0003e5f:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0003e63:	88 da                	mov    dl,bl
c0003e65:	83 ca 02             	or     edx,0x2
c0003e68:	88 54 24 18          	mov    BYTE PTR [esp+0x18],dl
c0003e6c:	50                   	push   eax
c0003e6d:	50                   	push   eax
c0003e6e:	68 b5 01 00 00       	push   0x1b5
c0003e73:	55                   	push   ebp
c0003e74:	e8 48 46 00 00       	call   c00084c1 <ff_uni2oem>
c0003e79:	83 c4 10             	add    esp,0x10
c0003e7c:	89 c5                	mov    ebp,eax
c0003e7e:	a8 80                	test   al,0x80
c0003e80:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0003e84:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003e88:	74 0c                	je     c0003e96 <create_name+0x1f2>
c0003e8a:	83 e5 7f             	and    ebp,0x7f
c0003e8d:	0f b6 ad a0 94 02 c0 	movzx  ebp,BYTE PTR [ebp-0x3ffd6b60]
c0003e94:	eb 2a                	jmp    c0003ec0 <create_name+0x21c>
c0003e96:	66 3d ff 00          	cmp    ax,0xff
c0003e9a:	76 24                	jbe    c0003ec0 <create_name+0x21c>
c0003e9c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003ea0:	48                   	dec    eax
c0003ea1:	39 c8                	cmp    eax,ecx
c0003ea3:	77 0c                	ja     c0003eb1 <create_name+0x20d>
c0003ea5:	83 cb 03             	or     ebx,0x3
c0003ea8:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003eac:	e9 4f ff ff ff       	jmp    c0003e00 <create_name+0x15c>
c0003eb1:	89 e8                	mov    eax,ebp
c0003eb3:	88 d3                	mov    bl,dl
c0003eb5:	66 c1 e8 08          	shr    ax,0x8
c0003eb9:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003ebd:	41                   	inc    ecx
c0003ebe:	eb 4b                	jmp    c0003f0b <create_name+0x267>
c0003ec0:	88 d3                	mov    bl,dl
c0003ec2:	66 85 ed             	test   bp,bp
c0003ec5:	74 19                	je     c0003ee0 <create_name+0x23c>
c0003ec7:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0003ecb:	0f b7 d5             	movzx  edx,bp
c0003ece:	b8 5b 95 02 c0       	mov    eax,0xc002955b
c0003ed3:	e8 4b de ff ff       	call   c0001d23 <chk_chr>
c0003ed8:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0003edc:	85 c0                	test   eax,eax
c0003ede:	74 0a                	je     c0003eea <create_name+0x246>
c0003ee0:	83 cb 03             	or     ebx,0x3
c0003ee3:	bd 5f 00 00 00       	mov    ebp,0x5f
c0003ee8:	eb 21                	jmp    c0003f0b <create_name+0x267>
c0003eea:	8d 45 bf             	lea    eax,[ebp-0x41]
c0003eed:	66 83 f8 19          	cmp    ax,0x19
c0003ef1:	77 07                	ja     c0003efa <create_name+0x256>
c0003ef3:	80 4c 24 0f 02       	or     BYTE PTR [esp+0xf],0x2
c0003ef8:	eb 11                	jmp    c0003f0b <create_name+0x267>
c0003efa:	8d 45 9f             	lea    eax,[ebp-0x61]
c0003efd:	66 83 f8 19          	cmp    ax,0x19
c0003f01:	77 08                	ja     c0003f0b <create_name+0x267>
c0003f03:	80 4c 24 0f 01       	or     BYTE PTR [esp+0xf],0x1
c0003f08:	83 ed 20             	sub    ebp,0x20
c0003f0b:	89 e8                	mov    eax,ebp
c0003f0d:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003f11:	41                   	inc    ecx
c0003f12:	e9 e9 fe ff ff       	jmp    c0003e00 <create_name+0x15c>
c0003f17:	80 7f 3c e5          	cmp    BYTE PTR [edi+0x3c],0xe5
c0003f1b:	75 04                	jne    c0003f21 <create_name+0x27d>
c0003f1d:	c6 47 3c 05          	mov    BYTE PTR [edi+0x3c],0x5
c0003f21:	83 7c 24 08 08       	cmp    DWORD PTR [esp+0x8],0x8
c0003f26:	75 05                	jne    c0003f2d <create_name+0x289>
c0003f28:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003f2d:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003f31:	83 e0 0c             	and    eax,0xc
c0003f34:	3c 0c                	cmp    al,0xc
c0003f36:	74 0b                	je     c0003f43 <create_name+0x29f>
c0003f38:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003f3c:	83 e0 03             	and    eax,0x3
c0003f3f:	3c 03                	cmp    al,0x3
c0003f41:	75 05                	jne    c0003f48 <create_name+0x2a4>
c0003f43:	83 cb 02             	or     ebx,0x2
c0003f46:	eb 19                	jmp    c0003f61 <create_name+0x2bd>
c0003f48:	f6 c3 02             	test   bl,0x2
c0003f4b:	75 14                	jne    c0003f61 <create_name+0x2bd>
c0003f4d:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0003f52:	74 03                	je     c0003f57 <create_name+0x2b3>
c0003f54:	83 cb 10             	or     ebx,0x10
c0003f57:	f6 44 24 0f 04       	test   BYTE PTR [esp+0xf],0x4
c0003f5c:	74 03                	je     c0003f61 <create_name+0x2bd>
c0003f5e:	83 cb 08             	or     ebx,0x8
c0003f61:	88 5f 47             	mov    BYTE PTR [edi+0x47],bl
c0003f64:	31 c0                	xor    eax,eax
c0003f66:	eb 10                	jmp    c0003f78 <create_name+0x2d4>
c0003f68:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003f6d:	0f 85 ce fe ff ff    	jne    c0003e41 <create_name+0x19d>
c0003f73:	e9 a6 fe ff ff       	jmp    c0003e1e <create_name+0x17a>
c0003f78:	83 c4 3c             	add    esp,0x3c
c0003f7b:	5b                   	pop    ebx
c0003f7c:	5e                   	pop    esi
c0003f7d:	5f                   	pop    edi
c0003f7e:	5d                   	pop    ebp
c0003f7f:	c3                   	ret    

c0003f80 <xname_sum>:
c0003f80:	56                   	push   esi
c0003f81:	53                   	push   ebx
c0003f82:	89 c6                	mov    esi,eax
c0003f84:	51                   	push   ecx
c0003f85:	31 db                	xor    ebx,ebx
c0003f87:	83 c6 02             	add    esi,0x2
c0003f8a:	0f b7 46 fe          	movzx  eax,WORD PTR [esi-0x2]
c0003f8e:	66 85 c0             	test   ax,ax
c0003f91:	74 1f                	je     c0003fb2 <xname_sum+0x32>
c0003f93:	83 ec 0c             	sub    esp,0xc
c0003f96:	66 d1 cb             	ror    bx,1
c0003f99:	50                   	push   eax
c0003f9a:	e8 1e 46 00 00       	call   c00085bd <ff_wtoupper>
c0003f9f:	83 c4 10             	add    esp,0x10
c0003fa2:	0f b6 d0             	movzx  edx,al
c0003fa5:	66 c1 e8 08          	shr    ax,0x8
c0003fa9:	01 d3                	add    ebx,edx
c0003fab:	66 d1 cb             	ror    bx,1
c0003fae:	01 c3                	add    ebx,eax
c0003fb0:	eb d5                	jmp    c0003f87 <xname_sum+0x7>
c0003fb2:	89 d8                	mov    eax,ebx
c0003fb4:	5a                   	pop    edx
c0003fb5:	5b                   	pop    ebx
c0003fb6:	5e                   	pop    esi
c0003fb7:	c3                   	ret    

c0003fb8 <create_xdir>:
c0003fb8:	55                   	push   ebp
c0003fb9:	b9 40 00 00 00       	mov    ecx,0x40
c0003fbe:	57                   	push   edi
c0003fbf:	bd 01 00 00 00       	mov    ebp,0x1
c0003fc4:	56                   	push   esi
c0003fc5:	31 ff                	xor    edi,edi
c0003fc7:	53                   	push   ebx
c0003fc8:	be 40 00 00 00       	mov    esi,0x40
c0003fcd:	89 c3                	mov    ebx,eax
c0003fcf:	83 ec 1c             	sub    esp,0x1c
c0003fd2:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003fd6:	31 d2                	xor    edx,edx
c0003fd8:	e8 18 dd ff ff       	call   c0001cf5 <mem_set>
c0003fdd:	c6 03 85             	mov    BYTE PTR [ebx],0x85
c0003fe0:	c6 43 20 c0          	mov    BYTE PTR [ebx+0x20],0xc0
c0003fe4:	31 c9                	xor    ecx,ecx
c0003fe6:	8d 46 01             	lea    eax,[esi+0x1]
c0003fe9:	c6 04 33 c1          	mov    BYTE PTR [ebx+esi*1],0xc1
c0003fed:	83 c6 02             	add    esi,0x2
c0003ff0:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0003ff4:	66 85 ed             	test   bp,bp
c0003ff7:	74 12                	je     c000400b <create_xdir+0x53>
c0003ff9:	0f b6 c1             	movzx  eax,cl
c0003ffc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004000:	66 8b 2c 42          	mov    bp,WORD PTR [edx+eax*2]
c0004004:	66 83 fd 01          	cmp    bp,0x1
c0004008:	80 d9 ff             	sbb    cl,0xff
c000400b:	8d 04 33             	lea    eax,[ebx+esi*1]
c000400e:	0f b7 d5             	movzx  edx,bp
c0004011:	83 c6 02             	add    esi,0x2
c0004014:	e8 ba dc ff ff       	call   c0001cd3 <st_word>
c0004019:	f7 c6 1f 00 00 00    	test   esi,0x1f
c000401f:	75 d3                	jne    c0003ff4 <create_xdir+0x3c>
c0004021:	8d 47 01             	lea    eax,[edi+0x1]
c0004024:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004028:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000402c:	0f b6 c1             	movzx  eax,cl
c000402f:	66 83 3c 42 00       	cmp    WORD PTR [edx+eax*2],0x0
c0004034:	74 07                	je     c000403d <create_xdir+0x85>
c0004036:	0f b6 7c 24 0f       	movzx  edi,BYTE PTR [esp+0xf]
c000403b:	eb a9                	jmp    c0003fe6 <create_xdir+0x2e>
c000403d:	8d 47 02             	lea    eax,[edi+0x2]
c0004040:	88 4b 23             	mov    BYTE PTR [ebx+0x23],cl
c0004043:	88 43 01             	mov    BYTE PTR [ebx+0x1],al
c0004046:	89 d0                	mov    eax,edx
c0004048:	e8 33 ff ff ff       	call   c0003f80 <xname_sum>
c000404d:	83 c4 1c             	add    esp,0x1c
c0004050:	0f b7 d0             	movzx  edx,ax
c0004053:	8d 43 24             	lea    eax,[ebx+0x24]
c0004056:	5b                   	pop    ebx
c0004057:	5e                   	pop    esi
c0004058:	5f                   	pop    edi
c0004059:	5d                   	pop    ebp
c000405a:	e9 74 dc ff ff       	jmp    c0001cd3 <st_word>

c000405f <cmp_lfn>:
c000405f:	55                   	push   ebp
c0004060:	57                   	push   edi
c0004061:	89 d7                	mov    edi,edx
c0004063:	56                   	push   esi
c0004064:	53                   	push   ebx
c0004065:	83 ec 1c             	sub    esp,0x1c
c0004068:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000406c:	8d 42 1a             	lea    eax,[edx+0x1a]
c000406f:	e8 ed db ff ff       	call   c0001c61 <ld_word>
c0004074:	66 85 c0             	test   ax,ax
c0004077:	74 07                	je     c0004080 <cmp_lfn+0x21>
c0004079:	31 c0                	xor    eax,eax
c000407b:	e9 9a 00 00 00       	jmp    c000411a <cmp_lfn+0xbb>
c0004080:	8a 1f                	mov    bl,BYTE PTR [edi]
c0004082:	bd 01 00 00 00       	mov    ebp,0x1
c0004087:	83 e3 3f             	and    ebx,0x3f
c000408a:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0004092:	4b                   	dec    ebx
c0004093:	6b db 0d             	imul   ebx,ebx,0xd
c0004096:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000409a:	0f b6 80 20 95 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd6ae0]
c00040a1:	01 f8                	add    eax,edi
c00040a3:	e8 b9 db ff ff       	call   c0001c61 <ld_word>
c00040a8:	66 85 ed             	test   bp,bp
c00040ab:	89 c6                	mov    esi,eax
c00040ad:	74 3c                	je     c00040eb <cmp_lfn+0x8c>
c00040af:	81 fb ff 00 00 00    	cmp    ebx,0xff
c00040b5:	77 c2                	ja     c0004079 <cmp_lfn+0x1a>
c00040b7:	83 ec 0c             	sub    esp,0xc
c00040ba:	0f b7 c0             	movzx  eax,ax
c00040bd:	50                   	push   eax
c00040be:	e8 fa 44 00 00       	call   c00085bd <ff_wtoupper>
c00040c3:	89 c5                	mov    ebp,eax
c00040c5:	8d 43 01             	lea    eax,[ebx+0x1]
c00040c8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00040cc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00040d0:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c00040d4:	89 04 24             	mov    DWORD PTR [esp],eax
c00040d7:	e8 e1 44 00 00       	call   c00085bd <ff_wtoupper>
c00040dc:	83 c4 10             	add    esp,0x10
c00040df:	39 c5                	cmp    ebp,eax
c00040e1:	75 96                	jne    c0004079 <cmp_lfn+0x1a>
c00040e3:	89 f5                	mov    ebp,esi
c00040e5:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00040e9:	eb 04                	jmp    c00040ef <cmp_lfn+0x90>
c00040eb:	66 46                	inc    si
c00040ed:	75 8a                	jne    c0004079 <cmp_lfn+0x1a>
c00040ef:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c00040f3:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c00040f8:	75 9c                	jne    c0004096 <cmp_lfn+0x37>
c00040fa:	f6 07 40             	test   BYTE PTR [edi],0x40
c00040fd:	74 16                	je     c0004115 <cmp_lfn+0xb6>
c00040ff:	66 85 ed             	test   bp,bp
c0004102:	74 11                	je     c0004115 <cmp_lfn+0xb6>
c0004104:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004108:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c000410d:	0f 94 c0             	sete   al
c0004110:	0f b6 c0             	movzx  eax,al
c0004113:	eb 05                	jmp    c000411a <cmp_lfn+0xbb>
c0004115:	b8 01 00 00 00       	mov    eax,0x1
c000411a:	83 c4 1c             	add    esp,0x1c
c000411d:	5b                   	pop    ebx
c000411e:	5e                   	pop    esi
c000411f:	5f                   	pop    edi
c0004120:	5d                   	pop    ebp
c0004121:	c3                   	ret    

c0004122 <dir_find>:
c0004122:	55                   	push   ebp
c0004123:	31 d2                	xor    edx,edx
c0004125:	57                   	push   edi
c0004126:	56                   	push   esi
c0004127:	53                   	push   ebx
c0004128:	89 c3                	mov    ebx,eax
c000412a:	83 ec 1c             	sub    esp,0x1c
c000412d:	8b 30                	mov    esi,DWORD PTR [eax]
c000412f:	e8 89 f0 ff ff       	call   c00031bd <dir_sdi>
c0004134:	89 04 24             	mov    DWORD PTR [esp],eax
c0004137:	85 c0                	test   eax,eax
c0004139:	0f 85 9e 01 00 00    	jne    c00042dd <dir_find+0x1bb>
c000413f:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0004142:	0f 85 8d 00 00 00    	jne    c00041d5 <dir_find+0xb3>
c0004148:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000414b:	e8 30 fe ff ff       	call   c0003f80 <xname_sum>
c0004150:	89 c7                	mov    edi,eax
c0004152:	31 d2                	xor    edx,edx
c0004154:	89 d8                	mov    eax,ebx
c0004156:	e8 72 f8 ff ff       	call   c00039cd <dir_read>
c000415b:	85 c0                	test   eax,eax
c000415d:	0f 85 5e 01 00 00    	jne    c00042c1 <dir_find+0x19f>
c0004163:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c0004166:	8d 41 24             	lea    eax,[ecx+0x24]
c0004169:	e8 f3 da ff ff       	call   c0001c61 <ld_word>
c000416e:	66 39 f8             	cmp    ax,di
c0004171:	75 df                	jne    c0004152 <dir_find+0x30>
c0004173:	8a 41 23             	mov    al,BYTE PTR [ecx+0x23]
c0004176:	31 ed                	xor    ebp,ebp
c0004178:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000417c:	ba 40 00 00 00       	mov    edx,0x40
c0004181:	89 e9                	mov    ecx,ebp
c0004183:	38 4c 24 0b          	cmp    BYTE PTR [esp+0xb],cl
c0004187:	0f 84 42 01 00 00    	je     c00042cf <dir_find+0x1ad>
c000418d:	f6 c2 1f             	test   dl,0x1f
c0004190:	75 03                	jne    c0004195 <dir_find+0x73>
c0004192:	83 c2 02             	add    edx,0x2
c0004195:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004199:	89 d0                	mov    eax,edx
c000419b:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c000419e:	e8 be da ff ff       	call   c0001c61 <ld_word>
c00041a3:	83 ec 0c             	sub    esp,0xc
c00041a6:	0f b7 c0             	movzx  eax,ax
c00041a9:	50                   	push   eax
c00041aa:	e8 0e 44 00 00       	call   c00085bd <ff_wtoupper>
c00041af:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00041b3:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c00041b6:	0f b7 04 68          	movzx  eax,WORD PTR [eax+ebp*2]
c00041ba:	89 04 24             	mov    DWORD PTR [esp],eax
c00041bd:	e8 fb 43 00 00       	call   c00085bd <ff_wtoupper>
c00041c2:	83 c4 10             	add    esp,0x10
c00041c5:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c00041c9:	75 87                	jne    c0004152 <dir_find+0x30>
c00041cb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00041cf:	45                   	inc    ebp
c00041d0:	83 c2 02             	add    edx,0x2
c00041d3:	eb ac                	jmp    c0004181 <dir_find+0x5f>
c00041d5:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00041dc:	c6 44 24 04 ff       	mov    BYTE PTR [esp+0x4],0xff
c00041e1:	bf ff ff ff ff       	mov    edi,0xffffffff
c00041e6:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00041e9:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00041ec:	89 f0                	mov    eax,esi
c00041ee:	e8 4c e2 ff ff       	call   c000243f <move_window>
c00041f3:	85 c0                	test   eax,eax
c00041f5:	0f 85 c6 00 00 00    	jne    c00042c1 <dir_find+0x19f>
c00041fb:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c00041fe:	8a 4d 00             	mov    cl,BYTE PTR [ebp+0x0]
c0004201:	84 c9                	test   cl,cl
c0004203:	0f 84 bd 00 00 00    	je     c00042c6 <dir_find+0x1a4>
c0004209:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c000420c:	88 d0                	mov    al,dl
c000420e:	83 e0 3f             	and    eax,0x3f
c0004211:	80 f9 e5             	cmp    cl,0xe5
c0004214:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0004217:	0f 84 87 00 00 00    	je     c00042a4 <dir_find+0x182>
c000421d:	80 e2 08             	and    dl,0x8
c0004220:	74 06                	je     c0004228 <dir_find+0x106>
c0004222:	3c 0f                	cmp    al,0xf
c0004224:	75 7e                	jne    c00042a4 <dir_find+0x182>
c0004226:	eb 04                	jmp    c000422c <dir_find+0x10a>
c0004228:	3c 0f                	cmp    al,0xf
c000422a:	75 4c                	jne    c0004278 <dir_find+0x156>
c000422c:	f6 43 47 40          	test   BYTE PTR [ebx+0x47],0x40
c0004230:	75 7e                	jne    c00042b0 <dir_find+0x18e>
c0004232:	f6 c1 40             	test   cl,0x40
c0004235:	74 12                	je     c0004249 <dir_find+0x127>
c0004237:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c000423a:	83 e1 bf             	and    ecx,0xffffffbf
c000423d:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0004241:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0004244:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0004247:	eb 06                	jmp    c000424f <dir_find+0x12d>
c0004249:	89 f8                	mov    eax,edi
c000424b:	38 c8                	cmp    al,cl
c000424d:	75 5c                	jne    c00042ab <dir_find+0x189>
c000424f:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0004253:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004258:	38 45 0d             	cmp    BYTE PTR [ebp+0xd],al
c000425b:	75 53                	jne    c00042b0 <dir_find+0x18e>
c000425d:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c0004261:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0004264:	89 ea                	mov    edx,ebp
c0004266:	e8 f4 fd ff ff       	call   c000405f <cmp_lfn>
c000426b:	85 c0                	test   eax,eax
c000426d:	74 41                	je     c00042b0 <dir_find+0x18e>
c000426f:	8a 4c 24 0b          	mov    cl,BYTE PTR [esp+0xb]
c0004273:	8d 79 ff             	lea    edi,[ecx-0x1]
c0004276:	eb 38                	jmp    c00042b0 <dir_find+0x18e>
c0004278:	89 f8                	mov    eax,edi
c000427a:	84 c0                	test   al,al
c000427c:	75 0d                	jne    c000428b <dir_find+0x169>
c000427e:	89 e8                	mov    eax,ebp
c0004280:	e8 98 de ff ff       	call   c000211d <sum_sfn>
c0004285:	3a 44 24 04          	cmp    al,BYTE PTR [esp+0x4]
c0004289:	74 52                	je     c00042dd <dir_find+0x1bb>
c000428b:	f6 43 47 01          	test   BYTE PTR [ebx+0x47],0x1
c000428f:	75 13                	jne    c00042a4 <dir_find+0x182>
c0004291:	8d 53 3c             	lea    edx,[ebx+0x3c]
c0004294:	b9 0b 00 00 00       	mov    ecx,0xb
c0004299:	89 e8                	mov    eax,ebp
c000429b:	e8 60 da ff ff       	call   c0001d00 <mem_cmp>
c00042a0:	85 c0                	test   eax,eax
c00042a2:	74 39                	je     c00042dd <dir_find+0x1bb>
c00042a4:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00042ab:	bf ff ff ff ff       	mov    edi,0xffffffff
c00042b0:	31 d2                	xor    edx,edx
c00042b2:	89 d8                	mov    eax,ebx
c00042b4:	e8 5c f4 ff ff       	call   c0003715 <dir_next>
c00042b9:	85 c0                	test   eax,eax
c00042bb:	0f 84 25 ff ff ff    	je     c00041e6 <dir_find+0xc4>
c00042c1:	89 04 24             	mov    DWORD PTR [esp],eax
c00042c4:	eb 17                	jmp    c00042dd <dir_find+0x1bb>
c00042c6:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00042cd:	eb 0e                	jmp    c00042dd <dir_find+0x1bb>
c00042cf:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c00042d2:	66 83 3c 68 00       	cmp    WORD PTR [eax+ebp*2],0x0
c00042d7:	0f 85 75 fe ff ff    	jne    c0004152 <dir_find+0x30>
c00042dd:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00042e0:	83 c4 1c             	add    esp,0x1c
c00042e3:	5b                   	pop    ebx
c00042e4:	5e                   	pop    esi
c00042e5:	5f                   	pop    edi
c00042e6:	5d                   	pop    ebp
c00042e7:	c3                   	ret    

c00042e8 <dir_register>:
c00042e8:	55                   	push   ebp
c00042e9:	57                   	push   edi
c00042ea:	56                   	push   esi
c00042eb:	be 06 00 00 00       	mov    esi,0x6
c00042f0:	53                   	push   ebx
c00042f1:	83 ec 6c             	sub    esp,0x6c
c00042f4:	f6 40 47 a0          	test   BYTE PTR [eax+0x47],0xa0
c00042f8:	0f 85 62 02 00 00    	jne    c0004560 <dir_register+0x278>
c00042fe:	8b 28                	mov    ebp,DWORD PTR [eax]
c0004300:	31 ff                	xor    edi,edi
c0004302:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0004305:	66 83 3c 7a 00       	cmp    WORD PTR [edx+edi*2],0x0
c000430a:	74 03                	je     c000430f <dir_register+0x27>
c000430c:	47                   	inc    edi
c000430d:	eb f6                	jmp    c0004305 <dir_register+0x1d>
c000430f:	89 c3                	mov    ebx,eax
c0004311:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c0004315:	0f 85 e1 00 00 00    	jne    c00043fc <dir_register+0x114>
c000431b:	83 c7 0e             	add    edi,0xe
c000431e:	b9 0f 00 00 00       	mov    ecx,0xf
c0004323:	89 f8                	mov    eax,edi
c0004325:	31 d2                	xor    edx,edx
c0004327:	f7 f1                	div    ecx
c0004329:	8d 50 02             	lea    edx,[eax+0x2]
c000432c:	89 c7                	mov    edi,eax
c000432e:	89 d8                	mov    eax,ebx
c0004330:	e8 12 f8 ff ff       	call   c0003b47 <dir_alloc>
c0004335:	89 c6                	mov    esi,eax
c0004337:	85 c0                	test   eax,eax
c0004339:	0f 85 21 02 00 00    	jne    c0004560 <dir_register+0x278>
c000433f:	81 c7 01 00 00 08    	add    edi,0x8000001
c0004345:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0004348:	c1 e7 05             	shl    edi,0x5
c000434b:	29 f8                	sub    eax,edi
c000434d:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0004350:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c0004353:	a8 04                	test   al,0x4
c0004355:	0f 84 91 00 00 00    	je     c00043ec <dir_register+0x104>
c000435b:	83 e0 fb             	and    eax,0xfffffffb
c000435e:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004361:	89 d8                	mov    eax,ebx
c0004363:	e8 25 ec ff ff       	call   c0002f8d <fill_first_frag>
c0004368:	85 c0                	test   eax,eax
c000436a:	0f 85 ee 01 00 00    	jne    c000455e <dir_register+0x276>
c0004370:	83 c9 ff             	or     ecx,0xffffffff
c0004373:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0004376:	89 d8                	mov    eax,ebx
c0004378:	e8 db eb ff ff       	call   c0002f58 <fill_last_frag>
c000437d:	85 c0                	test   eax,eax
c000437f:	0f 85 d9 01 00 00    	jne    c000455e <dir_register+0x276>
c0004385:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0004389:	74 61                	je     c00043ec <dir_register+0x104>
c000438b:	89 da                	mov    edx,ebx
c000438d:	8d 44 24 14          	lea    eax,[esp+0x14]
c0004391:	e8 ea f5 ff ff       	call   c0003980 <load_obj_xdir>
c0004396:	85 c0                	test   eax,eax
c0004398:	0f 85 c0 01 00 00    	jne    c000455e <dir_register+0x276>
c000439e:	0f b7 55 0a          	movzx  edx,WORD PTR [ebp+0xa]
c00043a2:	31 c9                	xor    ecx,ecx
c00043a4:	c1 e2 09             	shl    edx,0x9
c00043a7:	03 53 0c             	add    edx,DWORD PTR [ebx+0xc]
c00043aa:	13 4b 10             	adc    ecx,DWORD PTR [ebx+0x10]
c00043ad:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00043b0:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c00043b3:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00043b6:	83 c0 38             	add    eax,0x38
c00043b9:	e8 1c d9 ff ff       	call   c0001cda <st_qword>
c00043be:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00043c1:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00043c4:	83 c0 28             	add    eax,0x28
c00043c7:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00043ca:	e8 0b d9 ff ff       	call   c0001cda <st_qword>
c00043cf:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c00043d2:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c00043d5:	83 c8 01             	or     eax,0x1
c00043d8:	88 42 21             	mov    BYTE PTR [edx+0x21],al
c00043db:	8d 44 24 14          	lea    eax,[esp+0x14]
c00043df:	e8 db f7 ff ff       	call   c0003bbf <store_xdir>
c00043e4:	85 c0                	test   eax,eax
c00043e6:	0f 85 72 01 00 00    	jne    c000455e <dir_register+0x276>
c00043ec:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00043ef:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00043f2:	e8 c1 fb ff ff       	call   c0003fb8 <create_xdir>
c00043f7:	e9 64 01 00 00       	jmp    c0004560 <dir_register+0x278>
c00043fc:	8d 40 3c             	lea    eax,[eax+0x3c]
c00043ff:	b9 0c 00 00 00       	mov    ecx,0xc
c0004404:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004408:	89 c2                	mov    edx,eax
c000440a:	8d 44 24 14          	lea    eax,[esp+0x14]
c000440e:	e8 cd d8 ff ff       	call   c0001ce0 <mem_cpy>
c0004413:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0004418:	74 58                	je     c0004472 <dir_register+0x18a>
c000441a:	c6 43 47 40          	mov    BYTE PTR [ebx+0x47],0x40
c000441e:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c0004426:	83 ec 0c             	sub    esp,0xc
c0004429:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c000442c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0004430:	8d 54 24 24          	lea    edx,[esp+0x24]
c0004434:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004438:	e8 24 dc ff ff       	call   c0002061 <gen_numname>
c000443d:	89 d8                	mov    eax,ebx
c000443f:	e8 de fc ff ff       	call   c0004122 <dir_find>
c0004444:	83 c4 10             	add    esp,0x10
c0004447:	89 c6                	mov    esi,eax
c0004449:	85 c0                	test   eax,eax
c000444b:	75 15                	jne    c0004462 <dir_register+0x17a>
c000444d:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0004451:	83 7c 24 0c 64       	cmp    DWORD PTR [esp+0xc],0x64
c0004456:	75 ce                	jne    c0004426 <dir_register+0x13e>
c0004458:	be 07 00 00 00       	mov    esi,0x7
c000445d:	e9 fe 00 00 00       	jmp    c0004560 <dir_register+0x278>
c0004462:	83 f8 04             	cmp    eax,0x4
c0004465:	0f 85 f5 00 00 00    	jne    c0004560 <dir_register+0x278>
c000446b:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c000446f:	88 43 47             	mov    BYTE PTR [ebx+0x47],al
c0004472:	b9 01 00 00 00       	mov    ecx,0x1
c0004477:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c000447c:	74 0f                	je     c000448d <dir_register+0x1a5>
c000447e:	b9 0d 00 00 00       	mov    ecx,0xd
c0004483:	8d 47 0c             	lea    eax,[edi+0xc]
c0004486:	31 d2                	xor    edx,edx
c0004488:	f7 f1                	div    ecx
c000448a:	8d 48 01             	lea    ecx,[eax+0x1]
c000448d:	89 ca                	mov    edx,ecx
c000448f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004493:	89 d8                	mov    eax,ebx
c0004495:	e8 ad f6 ff ff       	call   c0003b47 <dir_alloc>
c000449a:	89 c6                	mov    esi,eax
c000449c:	85 c0                	test   eax,eax
c000449e:	0f 85 bc 00 00 00    	jne    c0004560 <dir_register+0x278>
c00044a4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00044a8:	49                   	dec    ecx
c00044a9:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00044ad:	74 6a                	je     c0004519 <dir_register+0x231>
c00044af:	89 c8                	mov    eax,ecx
c00044b1:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00044b4:	c1 e0 05             	shl    eax,0x5
c00044b7:	29 c2                	sub    edx,eax
c00044b9:	89 d8                	mov    eax,ebx
c00044bb:	e8 fd ec ff ff       	call   c00031bd <dir_sdi>
c00044c0:	89 c6                	mov    esi,eax
c00044c2:	85 c0                	test   eax,eax
c00044c4:	0f 85 96 00 00 00    	jne    c0004560 <dir_register+0x278>
c00044ca:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00044ce:	e8 4a dc ff ff       	call   c000211d <sum_sfn>
c00044d3:	0f b6 f8             	movzx  edi,al
c00044d6:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00044d9:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00044dc:	89 e8                	mov    eax,ebp
c00044de:	e8 5c df ff ff       	call   c000243f <move_window>
c00044e3:	89 c6                	mov    esi,eax
c00044e5:	85 c0                	test   eax,eax
c00044e7:	75 77                	jne    c0004560 <dir_register+0x278>
c00044e9:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c00044ee:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00044f1:	83 ec 0c             	sub    esp,0xc
c00044f4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00044f7:	57                   	push   edi
c00044f8:	e8 e0 da ff ff       	call   c0001fdd <put_lfn>
c00044fd:	31 d2                	xor    edx,edx
c00044ff:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c0004503:	89 d8                	mov    eax,ebx
c0004505:	e8 0b f2 ff ff       	call   c0003715 <dir_next>
c000450a:	83 c4 10             	add    esp,0x10
c000450d:	89 c6                	mov    esi,eax
c000450f:	85 c0                	test   eax,eax
c0004511:	75 4d                	jne    c0004560 <dir_register+0x278>
c0004513:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
c0004517:	75 bd                	jne    c00044d6 <dir_register+0x1ee>
c0004519:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000451c:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000451f:	89 e8                	mov    eax,ebp
c0004521:	e8 19 df ff ff       	call   c000243f <move_window>
c0004526:	89 c6                	mov    esi,eax
c0004528:	85 c0                	test   eax,eax
c000452a:	75 34                	jne    c0004560 <dir_register+0x278>
c000452c:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000452f:	b9 20 00 00 00       	mov    ecx,0x20
c0004534:	31 d2                	xor    edx,edx
c0004536:	e8 ba d7 ff ff       	call   c0001cf5 <mem_set>
c000453b:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000453e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004542:	b9 0b 00 00 00       	mov    ecx,0xb
c0004547:	e8 94 d7 ff ff       	call   c0001ce0 <mem_cpy>
c000454c:	8a 43 47             	mov    al,BYTE PTR [ebx+0x47]
c000454f:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0004552:	83 e0 18             	and    eax,0x18
c0004555:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0004558:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c000455c:	eb 02                	jmp    c0004560 <dir_register+0x278>
c000455e:	89 c6                	mov    esi,eax
c0004560:	83 c4 6c             	add    esp,0x6c
c0004563:	89 f0                	mov    eax,esi
c0004565:	5b                   	pop    ebx
c0004566:	5e                   	pop    esi
c0004567:	5f                   	pop    edi
c0004568:	5d                   	pop    ebp
c0004569:	c3                   	ret    

c000456a <sync_fs>:
c000456a:	56                   	push   esi
c000456b:	53                   	push   ebx
c000456c:	53                   	push   ebx
c000456d:	89 c3                	mov    ebx,eax
c000456f:	e8 37 de ff ff       	call   c00023ab <sync_window>
c0004574:	85 c0                	test   eax,eax
c0004576:	0f 85 b1 00 00 00    	jne    c000462d <sync_fs+0xc3>
c000457c:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c000457f:	0f 85 8e 00 00 00    	jne    c0004613 <sync_fs+0xa9>
c0004585:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0004589:	0f 85 84 00 00 00    	jne    c0004613 <sync_fs+0xa9>
c000458f:	b9 00 02 00 00       	mov    ecx,0x200
c0004594:	8d 73 54             	lea    esi,[ebx+0x54]
c0004597:	31 d2                	xor    edx,edx
c0004599:	89 f0                	mov    eax,esi
c000459b:	e8 55 d7 ff ff       	call   c0001cf5 <mem_set>
c00045a0:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00045a6:	ba 55 aa 00 00       	mov    edx,0xaa55
c00045ab:	e8 23 d7 ff ff       	call   c0001cd3 <st_word>
c00045b0:	ba 52 52 61 41       	mov    edx,0x41615252
c00045b5:	89 f0                	mov    eax,esi
c00045b7:	e8 1b d7 ff ff       	call   c0001cd7 <st_dword>
c00045bc:	8d 83 38 02 00 00    	lea    eax,[ebx+0x238]
c00045c2:	ba 72 72 41 61       	mov    edx,0x61417272
c00045c7:	e8 0b d7 ff ff       	call   c0001cd7 <st_dword>
c00045cc:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00045cf:	8d 83 3c 02 00 00    	lea    eax,[ebx+0x23c]
c00045d5:	e8 fd d6 ff ff       	call   c0001cd7 <st_dword>
c00045da:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00045dd:	8d 83 40 02 00 00    	lea    eax,[ebx+0x240]
c00045e3:	e8 ef d6 ff ff       	call   c0001cd7 <st_dword>
c00045e8:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00045eb:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00045ee:	83 c0 01             	add    eax,0x1
c00045f1:	83 d2 00             	adc    edx,0x0
c00045f4:	89 43 4c             	mov    DWORD PTR [ebx+0x4c],eax
c00045f7:	83 ec 0c             	sub    esp,0xc
c00045fa:	89 53 50             	mov    DWORD PTR [ebx+0x50],edx
c00045fd:	6a 01                	push   0x1
c00045ff:	52                   	push   edx
c0004600:	50                   	push   eax
c0004601:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0004605:	56                   	push   esi
c0004606:	50                   	push   eax
c0004607:	e8 20 d6 ff ff       	call   c0001c2c <disk_write>
c000460c:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c0004610:	83 c4 20             	add    esp,0x20
c0004613:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0004617:	51                   	push   ecx
c0004618:	6a 00                	push   0x0
c000461a:	6a 00                	push   0x0
c000461c:	50                   	push   eax
c000461d:	e8 20 d6 ff ff       	call   c0001c42 <disk_ioctl>
c0004622:	83 c4 10             	add    esp,0x10
c0004625:	85 c0                	test   eax,eax
c0004627:	0f 95 c0             	setne  al
c000462a:	0f b6 c0             	movzx  eax,al
c000462d:	5a                   	pop    edx
c000462e:	5b                   	pop    ebx
c000462f:	5e                   	pop    esi
c0004630:	c3                   	ret    

c0004631 <create_partition>:
c0004631:	55                   	push   ebp
c0004632:	0f b6 c0             	movzx  eax,al
c0004635:	57                   	push   edi
c0004636:	56                   	push   esi
c0004637:	53                   	push   ebx
c0004638:	83 ec 60             	sub    esp,0x60
c000463b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000463f:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0004643:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0004647:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c000464b:	8d 44 24 4c          	lea    eax,[esp+0x4c]
c000464f:	50                   	push   eax
c0004650:	6a 01                	push   0x1
c0004652:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0004656:	e8 e7 d5 ff ff       	call   c0001c42 <disk_ioctl>
c000465b:	83 c4 10             	add    esp,0x10
c000465e:	85 c0                	test   eax,eax
c0004660:	74 0a                	je     c000466c <create_partition+0x3b>
c0004662:	b8 01 00 00 00       	mov    eax,0x1
c0004667:	e9 67 05 00 00       	jmp    c0004bd3 <create_partition+0x5a2>
c000466c:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0004670:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0004674:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0004678:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000467c:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0004681:	0f 86 ed 03 00 00    	jbe    c0004a74 <create_partition+0x443>
c0004687:	83 c0 df             	add    eax,0xffffffdf
c000468a:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0004692:	83 d2 ff             	adc    edx,0xffffffff
c0004695:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004699:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000469d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00046a1:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00046a5:	83 c0 bd             	add    eax,0xffffffbd
c00046a8:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00046af:	83 d2 ff             	adc    edx,0xffffffff
c00046b2:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00046b6:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00046ba:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00046c2:	be 22 00 00 00       	mov    esi,0x22
c00046c7:	31 ff                	xor    edi,edi
c00046c9:	c7 44 24 2c 00 00 21 50 	mov    DWORD PTR [esp+0x2c],0x50210000
c00046d1:	c7 44 24 28 ff ff ff ff 	mov    DWORD PTR [esp+0x28],0xffffffff
c00046d9:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c00046e1:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00046e5:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00046eb:	75 0e                	jne    c00046fb <create_partition+0xca>
c00046ed:	b9 00 02 00 00       	mov    ecx,0x200
c00046f2:	31 d2                	xor    edx,edx
c00046f4:	89 d8                	mov    eax,ebx
c00046f6:	e8 fa d5 ff ff       	call   c0001cf5 <mem_set>
c00046fb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00046ff:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0004703:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004707:	0b 04 24             	or     eax,DWORD PTR [esp]
c000470a:	0f 84 23 01 00 00    	je     c0004833 <create_partition+0x202>
c0004710:	89 f0                	mov    eax,esi
c0004712:	89 fa                	mov    edx,edi
c0004714:	05 ff 07 00 00       	add    eax,0x7ff
c0004719:	83 d2 00             	adc    edx,0x0
c000471c:	89 c1                	mov    ecx,eax
c000471e:	89 d7                	mov    edi,edx
c0004720:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0004726:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000472a:	89 ce                	mov    esi,ecx
c000472c:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c0004730:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0004734:	8b 54 c8 04          	mov    edx,DWORD PTR [eax+ecx*8+0x4]
c0004738:	8b 04 c8             	mov    eax,DWORD PTR [eax+ecx*8]
c000473b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000473f:	89 04 24             	mov    DWORD PTR [esp],eax
c0004742:	b8 64 00 00 00       	mov    eax,0x64
c0004747:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000474a:	b8 00 00 00 00       	mov    eax,0x0
c000474f:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0004753:	72 41                	jb     c0004796 <create_partition+0x165>
c0004755:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0004759:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000475d:	0f af 0c 24          	imul   ecx,DWORD PTR [esp]
c0004761:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0004766:	01 c1                	add    ecx,eax
c0004768:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000476c:	f7 24 24             	mul    DWORD PTR [esp]
c000476f:	6a 00                	push   0x0
c0004771:	01 ca                	add    edx,ecx
c0004773:	6a 64                	push   0x64
c0004775:	52                   	push   edx
c0004776:	50                   	push   eax
c0004777:	e8 20 23 02 00       	call   c0026a9c <__udivdi3>
c000477c:	83 c4 10             	add    esp,0x10
c000477f:	05 ff 07 00 00       	add    eax,0x7ff
c0004784:	83 d2 00             	adc    edx,0x0
c0004787:	89 c1                	mov    ecx,eax
c0004789:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000478d:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0004793:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0004796:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004799:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000479d:	01 f0                	add    eax,esi
c000479f:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00047a3:	11 fa                	adc    edx,edi
c00047a5:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c00047a9:	19 d1                	sbb    ecx,edx
c00047ab:	73 2e                	jae    c00047db <create_partition+0x1aa>
c00047ad:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c00047b1:	89 f8                	mov    eax,edi
c00047b3:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00047ba:	1b 44 24 14          	sbb    eax,DWORD PTR [esp+0x14]
c00047be:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00047c6:	73 6b                	jae    c0004833 <create_partition+0x202>
c00047c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00047cc:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00047d0:	29 f0                	sub    eax,esi
c00047d2:	19 fa                	sbb    edx,edi
c00047d4:	89 04 24             	mov    DWORD PTR [esp],eax
c00047d7:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00047db:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00047df:	0b 04 24             	or     eax,DWORD PTR [esp]
c00047e2:	74 4f                	je     c0004833 <create_partition+0x202>
c00047e4:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c00047e7:	b9 10 00 00 00       	mov    ecx,0x10
c00047ec:	ba 30 95 02 c0       	mov    edx,0xc0029530
c00047f1:	e8 ea d4 ff ff       	call   c0001ce0 <mem_cpy>
c00047f6:	8d 54 2b 10          	lea    edx,[ebx+ebp*1+0x10]
c00047fa:	b9 10 00 00 00       	mov    ecx,0x10
c00047ff:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0004803:	e8 2c db ff ff       	call   c0002334 <make_rand>
c0004808:	89 f2                	mov    edx,esi
c000480a:	89 f9                	mov    ecx,edi
c000480c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004810:	8d 44 2b 20          	lea    eax,[ebx+ebp*1+0x20]
c0004814:	e8 c1 d4 ff ff       	call   c0001cda <st_qword>
c0004819:	03 34 24             	add    esi,DWORD PTR [esp]
c000481c:	8d 44 2b 28          	lea    eax,[ebx+ebp*1+0x28]
c0004820:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c0004824:	89 f2                	mov    edx,esi
c0004826:	89 f9                	mov    ecx,edi
c0004828:	83 c2 ff             	add    edx,0xffffffff
c000482b:	83 d1 ff             	adc    ecx,0xffffffff
c000482e:	e8 a7 d4 ff ff       	call   c0001cda <st_qword>
c0004833:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004837:	83 e8 80             	sub    eax,0xffffff80
c000483a:	89 c5                	mov    ebp,eax
c000483c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004840:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0004846:	75 6b                	jne    c00048b3 <create_partition+0x282>
c0004848:	45                   	inc    ebp
c0004849:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000484d:	0f b6 54 2b ff       	movzx  edx,BYTE PTR [ebx+ebp*1-0x1]
c0004852:	e8 39 da ff ff       	call   c0002290 <crc32>
c0004857:	81 fd 00 02 00 00    	cmp    ebp,0x200
c000485d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0004861:	75 e5                	jne    c0004848 <create_partition+0x217>
c0004863:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0004867:	31 d2                	xor    edx,edx
c0004869:	83 ec 0c             	sub    esp,0xc
c000486c:	c1 ed 09             	shr    ebp,0x9
c000486f:	6a 01                	push   0x1
c0004871:	8d 45 02             	lea    eax,[ebp+0x2]
c0004874:	52                   	push   edx
c0004875:	50                   	push   eax
c0004876:	53                   	push   ebx
c0004877:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000487b:	e8 ac d3 ff ff       	call   c0001c2c <disk_write>
c0004880:	83 c4 20             	add    esp,0x20
c0004883:	85 c0                	test   eax,eax
c0004885:	0f 85 d7 fd ff ff    	jne    c0004662 <create_partition+0x31>
c000488b:	83 ec 0c             	sub    esp,0xc
c000488e:	31 d2                	xor    edx,edx
c0004890:	6a 01                	push   0x1
c0004892:	89 e8                	mov    eax,ebp
c0004894:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0004898:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c000489c:	52                   	push   edx
c000489d:	50                   	push   eax
c000489e:	53                   	push   ebx
c000489f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00048a3:	e8 84 d3 ff ff       	call   c0001c2c <disk_write>
c00048a8:	83 c4 20             	add    esp,0x20
c00048ab:	85 c0                	test   eax,eax
c00048ad:	0f 85 af fd ff ff    	jne    c0004662 <create_partition+0x31>
c00048b3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00048b7:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00048bb:	3d 00 40 00 00       	cmp    eax,0x4000
c00048c0:	74 0d                	je     c00048cf <create_partition+0x29e>
c00048c2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00048c6:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00048ca:	e9 12 fe ff ff       	jmp    c00046e1 <create_partition+0xb0>
c00048cf:	31 d2                	xor    edx,edx
c00048d1:	b9 00 02 00 00       	mov    ecx,0x200
c00048d6:	89 d8                	mov    eax,ebx
c00048d8:	8d 6b 20             	lea    ebp,[ebx+0x20]
c00048db:	e8 15 d4 ff ff       	call   c0001cf5 <mem_set>
c00048e0:	8d 7b 48             	lea    edi,[ebx+0x48]
c00048e3:	b9 10 00 00 00       	mov    ecx,0x10
c00048e8:	ba 20 94 02 c0       	mov    edx,0xc0029420
c00048ed:	89 d8                	mov    eax,ebx
c00048ef:	e8 ec d3 ff ff       	call   c0001ce0 <mem_cpy>
c00048f4:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00048f8:	8d 43 58             	lea    eax,[ebx+0x58]
c00048fb:	f7 d2                	not    edx
c00048fd:	e8 d5 d3 ff ff       	call   c0001cd7 <st_dword>
c0004902:	8d 43 18             	lea    eax,[ebx+0x18]
c0004905:	31 c9                	xor    ecx,ecx
c0004907:	89 04 24             	mov    DWORD PTR [esp],eax
c000490a:	ba 01 00 00 00       	mov    edx,0x1
c000490f:	e8 c6 d3 ff ff       	call   c0001cda <st_qword>
c0004914:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c0004918:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000491c:	83 c2 ff             	add    edx,0xffffffff
c000491f:	89 e8                	mov    eax,ebp
c0004921:	83 d1 ff             	adc    ecx,0xffffffff
c0004924:	e8 b1 d3 ff ff       	call   c0001cda <st_qword>
c0004929:	31 c9                	xor    ecx,ecx
c000492b:	8d 43 28             	lea    eax,[ebx+0x28]
c000492e:	ba 22 00 00 00       	mov    edx,0x22
c0004933:	e8 a2 d3 ff ff       	call   c0001cda <st_qword>
c0004938:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000493c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004940:	83 c2 de             	add    edx,0xffffffde
c0004943:	8d 43 30             	lea    eax,[ebx+0x30]
c0004946:	83 d1 ff             	adc    ecx,0xffffffff
c0004949:	31 f6                	xor    esi,esi
c000494b:	e8 8a d3 ff ff       	call   c0001cda <st_qword>
c0004950:	8d 43 54             	lea    eax,[ebx+0x54]
c0004953:	ba 80 00 00 00       	mov    edx,0x80
c0004958:	e8 7a d3 ff ff       	call   c0001cd7 <st_dword>
c000495d:	8d 43 50             	lea    eax,[ebx+0x50]
c0004960:	ba 80 00 00 00       	mov    edx,0x80
c0004965:	e8 6d d3 ff ff       	call   c0001cd7 <st_dword>
c000496a:	ba 02 00 00 00       	mov    edx,0x2
c000496f:	89 f8                	mov    eax,edi
c0004971:	e8 61 d3 ff ff       	call   c0001cd7 <st_dword>
c0004976:	8d 53 38             	lea    edx,[ebx+0x38]
c0004979:	b9 10 00 00 00       	mov    ecx,0x10
c000497e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0004982:	e8 ad d9 ff ff       	call   c0002334 <make_rand>
c0004987:	83 c8 ff             	or     eax,0xffffffff
c000498a:	46                   	inc    esi
c000498b:	0f b6 54 33 ff       	movzx  edx,BYTE PTR [ebx+esi*1-0x1]
c0004990:	e8 fb d8 ff ff       	call   c0002290 <crc32>
c0004995:	83 fe 5c             	cmp    esi,0x5c
c0004998:	75 f0                	jne    c000498a <create_partition+0x359>
c000499a:	f7 d0                	not    eax
c000499c:	8d 73 10             	lea    esi,[ebx+0x10]
c000499f:	89 c2                	mov    edx,eax
c00049a1:	89 f0                	mov    eax,esi
c00049a3:	e8 2f d3 ff ff       	call   c0001cd7 <st_dword>
c00049a8:	83 ec 0c             	sub    esp,0xc
c00049ab:	6a 01                	push   0x1
c00049ad:	6a 00                	push   0x0
c00049af:	6a 01                	push   0x1
c00049b1:	53                   	push   ebx
c00049b2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00049b6:	e8 71 d2 ff ff       	call   c0001c2c <disk_write>
c00049bb:	83 c4 20             	add    esp,0x20
c00049be:	85 c0                	test   eax,eax
c00049c0:	0f 85 9c fc ff ff    	jne    c0004662 <create_partition+0x31>
c00049c6:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c00049ca:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00049ce:	83 c2 ff             	add    edx,0xffffffff
c00049d1:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00049d4:	83 d1 ff             	adc    ecx,0xffffffff
c00049d7:	e8 fe d2 ff ff       	call   c0001cda <st_qword>
c00049dc:	ba 01 00 00 00       	mov    edx,0x1
c00049e1:	31 c9                	xor    ecx,ecx
c00049e3:	89 e8                	mov    eax,ebp
c00049e5:	e8 f0 d2 ff ff       	call   c0001cda <st_qword>
c00049ea:	89 f8                	mov    eax,edi
c00049ec:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00049f0:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00049f4:	31 ff                	xor    edi,edi
c00049f6:	e8 df d2 ff ff       	call   c0001cda <st_qword>
c00049fb:	89 f0                	mov    eax,esi
c00049fd:	31 d2                	xor    edx,edx
c00049ff:	e8 d3 d2 ff ff       	call   c0001cd7 <st_dword>
c0004a04:	83 c8 ff             	or     eax,0xffffffff
c0004a07:	47                   	inc    edi
c0004a08:	0f b6 54 3b ff       	movzx  edx,BYTE PTR [ebx+edi*1-0x1]
c0004a0d:	e8 7e d8 ff ff       	call   c0002290 <crc32>
c0004a12:	83 ff 5c             	cmp    edi,0x5c
c0004a15:	75 f0                	jne    c0004a07 <create_partition+0x3d6>
c0004a17:	f7 d0                	not    eax
c0004a19:	89 c2                	mov    edx,eax
c0004a1b:	89 f0                	mov    eax,esi
c0004a1d:	e8 b5 d2 ff ff       	call   c0001cd7 <st_dword>
c0004a22:	83 ec 0c             	sub    esp,0xc
c0004a25:	6a 01                	push   0x1
c0004a27:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0004a2b:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004a2f:	83 c0 ff             	add    eax,0xffffffff
c0004a32:	83 d2 ff             	adc    edx,0xffffffff
c0004a35:	52                   	push   edx
c0004a36:	50                   	push   eax
c0004a37:	53                   	push   ebx
c0004a38:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004a3c:	e8 eb d1 ff ff       	call   c0001c2c <disk_write>
c0004a41:	83 c4 20             	add    esp,0x20
c0004a44:	85 c0                	test   eax,eax
c0004a46:	0f 85 16 fc ff ff    	jne    c0004662 <create_partition+0x31>
c0004a4c:	31 d2                	xor    edx,edx
c0004a4e:	89 d8                	mov    eax,ebx
c0004a50:	b9 00 02 00 00       	mov    ecx,0x200
c0004a55:	e8 9b d2 ff ff       	call   c0001cf5 <mem_set>
c0004a5a:	8d 83 be 01 00 00    	lea    eax,[ebx+0x1be]
c0004a60:	b9 10 00 00 00       	mov    ecx,0x10
c0004a65:	ba 30 94 02 c0       	mov    edx,0xc0029430
c0004a6a:	e8 71 d2 ff ff       	call   c0001ce0 <mem_cpy>
c0004a6f:	e9 21 01 00 00       	jmp    c0004b95 <create_partition+0x564>
c0004a74:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004a78:	b9 05 00 00 00       	mov    ecx,0x5
c0004a7d:	89 04 24             	mov    DWORD PTR [esp],eax
c0004a80:	bf 08 00 00 00       	mov    edi,0x8
c0004a85:	89 f8                	mov    eax,edi
c0004a87:	31 d2                	xor    edx,edx
c0004a89:	0f b6 f0             	movzx  esi,al
c0004a8c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004a8f:	f7 f6                	div    esi
c0004a91:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0004a96:	76 0a                	jbe    c0004aa2 <create_partition+0x471>
c0004a98:	d1 e7                	shl    edi,1
c0004a9a:	49                   	dec    ecx
c0004a9b:	75 e8                	jne    c0004a85 <create_partition+0x454>
c0004a9d:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004aa2:	b9 00 02 00 00       	mov    ecx,0x200
c0004aa7:	31 d2                	xor    edx,edx
c0004aa9:	89 d8                	mov    eax,ebx
c0004aab:	8d b3 c6 01 00 00    	lea    esi,[ebx+0x1c6]
c0004ab1:	e8 3f d2 ff ff       	call   c0001cf5 <mem_set>
c0004ab6:	b9 64 00 00 00       	mov    ecx,0x64
c0004abb:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004abe:	31 d2                	xor    edx,edx
c0004ac0:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0004ac8:	f7 f1                	div    ecx
c0004aca:	b9 3f 00 00 00       	mov    ecx,0x3f
c0004acf:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004ad3:	89 f8                	mov    eax,edi
c0004ad5:	0f b6 c0             	movzx  eax,al
c0004ad8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0004adc:	e9 80 00 00 00       	jmp    c0004b61 <create_partition+0x530>
c0004ae1:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004ae4:	29 cf                	sub    edi,ecx
c0004ae6:	89 ca                	mov    edx,ecx
c0004ae8:	89 f0                	mov    eax,esi
c0004aea:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004aef:	e8 e3 d1 ff ff       	call   c0001cd7 <st_dword>
c0004af4:	8d 46 04             	lea    eax,[esi+0x4]
c0004af7:	89 fa                	mov    edx,edi
c0004af9:	83 c6 10             	add    esi,0x10
c0004afc:	e8 d6 d1 ff ff       	call   c0001cd7 <st_dword>
c0004b01:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c0004b05:	31 d2                	xor    edx,edx
c0004b07:	88 46 ec             	mov    BYTE PTR [esi-0x14],al
c0004b0a:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0004b0e:	89 c8                	mov    eax,ecx
c0004b10:	01 f9                	add    ecx,edi
c0004b12:	f7 f5                	div    ebp
c0004b14:	89 d5                	mov    ebp,edx
c0004b16:	31 d2                	xor    edx,edx
c0004b18:	45                   	inc    ebp
c0004b19:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004b1d:	88 56 e9             	mov    BYTE PTR [esi-0x17],dl
c0004b20:	88 46 eb             	mov    BYTE PTR [esi-0x15],al
c0004b23:	89 c2                	mov    edx,eax
c0004b25:	8d 41 ff             	lea    eax,[ecx-0x1]
c0004b28:	c1 ea 02             	shr    edx,0x2
c0004b2b:	83 e2 c0             	and    edx,0xffffffc0
c0004b2e:	09 ea                	or     edx,ebp
c0004b30:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004b35:	88 56 ea             	mov    BYTE PTR [esi-0x16],dl
c0004b38:	31 d2                	xor    edx,edx
c0004b3a:	f7 f5                	div    ebp
c0004b3c:	89 d7                	mov    edi,edx
c0004b3e:	31 d2                	xor    edx,edx
c0004b40:	47                   	inc    edi
c0004b41:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004b45:	88 56 ed             	mov    BYTE PTR [esi-0x13],dl
c0004b48:	88 46 ef             	mov    BYTE PTR [esi-0x11],al
c0004b4b:	89 c5                	mov    ebp,eax
c0004b4d:	c1 ed 02             	shr    ebp,0x2
c0004b50:	83 e5 c0             	and    ebp,0xffffffc0
c0004b53:	09 ef                	or     edi,ebp
c0004b55:	89 fa                	mov    edx,edi
c0004b57:	88 56 ee             	mov    BYTE PTR [esi-0x12],dl
c0004b5a:	83 7c 24 10 04       	cmp    DWORD PTR [esp+0x10],0x4
c0004b5f:	74 34                	je     c0004b95 <create_partition+0x564>
c0004b61:	85 c9                	test   ecx,ecx
c0004b63:	74 30                	je     c0004b95 <create_partition+0x564>
c0004b65:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0004b68:	76 2b                	jbe    c0004b95 <create_partition+0x564>
c0004b6a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004b6e:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0004b72:	8b 3c f8             	mov    edi,DWORD PTR [eax+edi*8]
c0004b75:	83 ff 64             	cmp    edi,0x64
c0004b78:	76 4b                	jbe    c0004bc5 <create_partition+0x594>
c0004b7a:	89 f8                	mov    eax,edi
c0004b7c:	01 c8                	add    eax,ecx
c0004b7e:	0f 82 5d ff ff ff    	jb     c0004ae1 <create_partition+0x4b0>
c0004b84:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004b87:	0f 87 54 ff ff ff    	ja     c0004ae1 <create_partition+0x4b0>
c0004b8d:	85 ff                	test   edi,edi
c0004b8f:	0f 85 51 ff ff ff    	jne    c0004ae6 <create_partition+0x4b5>
c0004b95:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0004b9b:	ba 55 aa 00 00       	mov    edx,0xaa55
c0004ba0:	e8 2e d1 ff ff       	call   c0001cd3 <st_word>
c0004ba5:	83 ec 0c             	sub    esp,0xc
c0004ba8:	6a 01                	push   0x1
c0004baa:	6a 00                	push   0x0
c0004bac:	6a 00                	push   0x0
c0004bae:	53                   	push   ebx
c0004baf:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004bb3:	e8 74 d0 ff ff       	call   c0001c2c <disk_write>
c0004bb8:	83 c4 20             	add    esp,0x20
c0004bbb:	85 c0                	test   eax,eax
c0004bbd:	0f 95 c0             	setne  al
c0004bc0:	0f b6 c0             	movzx  eax,al
c0004bc3:	eb 0e                	jmp    c0004bd3 <create_partition+0x5a2>
c0004bc5:	74 07                	je     c0004bce <create_partition+0x59d>
c0004bc7:	0f af 7c 24 24       	imul   edi,DWORD PTR [esp+0x24]
c0004bcc:	eb ac                	jmp    c0004b7a <create_partition+0x549>
c0004bce:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004bd1:	eb a7                	jmp    c0004b7a <create_partition+0x549>
c0004bd3:	83 c4 5c             	add    esp,0x5c
c0004bd6:	5b                   	pop    ebx
c0004bd7:	5e                   	pop    esi
c0004bd8:	5f                   	pop    edi
c0004bd9:	5d                   	pop    ebp
c0004bda:	c3                   	ret    

c0004bdb <get_fileinfo>:
c0004bdb:	55                   	push   ebp
c0004bdc:	57                   	push   edi
c0004bdd:	56                   	push   esi
c0004bde:	53                   	push   ebx
c0004bdf:	83 ec 1c             	sub    esp,0x1c
c0004be2:	8b 30                	mov    esi,DWORD PTR [eax]
c0004be4:	c6 42 1a 00          	mov    BYTE PTR [edx+0x1a],0x0
c0004be8:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0004bec:	8b 48 34             	mov    ecx,DWORD PTR [eax+0x34]
c0004bef:	0b 48 30             	or     ecx,DWORD PTR [eax+0x30]
c0004bf2:	0f 84 dc 01 00 00    	je     c0004dd4 <get_fileinfo+0x1f9>
c0004bf8:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0004bfb:	75 0f                	jne    c0004c0c <get_fileinfo+0x31>
c0004bfd:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0004c00:	83 c4 1c             	add    esp,0x1c
c0004c03:	5b                   	pop    ebx
c0004c04:	5e                   	pop    esi
c0004c05:	5f                   	pop    edi
c0004c06:	5d                   	pop    ebp
c0004c07:	e9 58 d5 ff ff       	jmp    c0002164 <get_xfileinfo>
c0004c0c:	89 d3                	mov    ebx,edx
c0004c0e:	89 c6                	mov    esi,eax
c0004c10:	83 78 48 ff          	cmp    DWORD PTR [eax+0x48],0xffffffff
c0004c14:	74 6a                	je     c0004c80 <get_fileinfo+0xa5>
c0004c16:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0004c1e:	31 ed                	xor    ebp,ebp
c0004c20:	31 ff                	xor    edi,edi
c0004c22:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004c26:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004c2a:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0004c2d:	0f b7 14 08          	movzx  edx,WORD PTR [eax+ecx*1]
c0004c31:	66 85 d2             	test   dx,dx
c0004c34:	74 3e                	je     c0004c74 <get_fileinfo+0x99>
c0004c36:	66 85 ed             	test   bp,bp
c0004c39:	75 0c                	jne    c0004c47 <get_fileinfo+0x6c>
c0004c3b:	8d 82 00 28 00 00    	lea    eax,[edx+0x2800]
c0004c41:	66 3d ff 07          	cmp    ax,0x7ff
c0004c45:	76 22                	jbe    c0004c69 <get_fileinfo+0x8e>
c0004c47:	b9 ff 00 00 00       	mov    ecx,0xff
c0004c4c:	89 e8                	mov    eax,ebp
c0004c4e:	29 f9                	sub    ecx,edi
c0004c50:	c1 e0 10             	shl    eax,0x10
c0004c53:	09 d0                	or     eax,edx
c0004c55:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0004c59:	e8 a3 d1 ff ff       	call   c0001e01 <put_utf>
c0004c5e:	84 c0                	test   al,al
c0004c60:	74 10                	je     c0004c72 <get_fileinfo+0x97>
c0004c62:	0f b6 c0             	movzx  eax,al
c0004c65:	31 d2                	xor    edx,edx
c0004c67:	01 c7                	add    edi,eax
c0004c69:	83 44 24 0c 02       	add    DWORD PTR [esp+0xc],0x2
c0004c6e:	89 d5                	mov    ebp,edx
c0004c70:	eb b0                	jmp    c0004c22 <get_fileinfo+0x47>
c0004c72:	31 ff                	xor    edi,edi
c0004c74:	66 85 ed             	test   bp,bp
c0004c77:	74 02                	je     c0004c7b <get_fileinfo+0xa0>
c0004c79:	31 ff                	xor    edi,edi
c0004c7b:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0004c80:	31 ff                	xor    edi,edi
c0004c82:	31 c9                	xor    ecx,ecx
c0004c84:	83 f9 0a             	cmp    ecx,0xa
c0004c87:	0f 87 ad 00 00 00    	ja     c0004d3a <get_fileinfo+0x15f>
c0004c8d:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004c90:	8d 69 01             	lea    ebp,[ecx+0x1]
c0004c93:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
c0004c97:	66 83 fa 20          	cmp    dx,0x20
c0004c9b:	0f 84 92 00 00 00    	je     c0004d33 <get_fileinfo+0x158>
c0004ca1:	66 83 fa 05          	cmp    dx,0x5
c0004ca5:	75 05                	jne    c0004cac <get_fileinfo+0xd1>
c0004ca7:	ba e5 00 00 00       	mov    edx,0xe5
c0004cac:	83 ff 0b             	cmp    edi,0xb
c0004caf:	77 0b                	ja     c0004cbc <get_fileinfo+0xe1>
c0004cb1:	83 fd 09             	cmp    ebp,0x9
c0004cb4:	75 06                	jne    c0004cbc <get_fileinfo+0xe1>
c0004cb6:	c6 44 3b 0d 2e       	mov    BYTE PTR [ebx+edi*1+0xd],0x2e
c0004cbb:	47                   	inc    edi
c0004cbc:	0f b7 c2             	movzx  eax,dx
c0004cbf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004cc3:	e8 6d d0 ff ff       	call   c0001d35 <dbc_1st>
c0004cc8:	85 c0                	test   eax,eax
c0004cca:	74 2f                	je     c0004cfb <get_fileinfo+0x120>
c0004ccc:	83 fd 08             	cmp    ebp,0x8
c0004ccf:	74 2a                	je     c0004cfb <get_fileinfo+0x120>
c0004cd1:	83 fd 0b             	cmp    ebp,0xb
c0004cd4:	74 25                	je     c0004cfb <get_fileinfo+0x120>
c0004cd6:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004cd9:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0004cdd:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0004ce1:	e8 52 d0 ff ff       	call   c0001d38 <dbc_2nd>
c0004ce6:	85 c0                	test   eax,eax
c0004ce8:	74 11                	je     c0004cfb <get_fileinfo+0x120>
c0004cea:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004cee:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0004cf3:	c1 e2 08             	shl    edx,0x8
c0004cf6:	8d 69 02             	lea    ebp,[ecx+0x2]
c0004cf9:	09 c2                	or     edx,eax
c0004cfb:	0f b7 d2             	movzx  edx,dx
c0004cfe:	50                   	push   eax
c0004cff:	50                   	push   eax
c0004d00:	68 b5 01 00 00       	push   0x1b5
c0004d05:	52                   	push   edx
c0004d06:	e8 46 38 00 00       	call   c0008551 <ff_oem2uni>
c0004d0b:	83 c4 10             	add    esp,0x10
c0004d0e:	66 85 c0             	test   ax,ax
c0004d11:	75 04                	jne    c0004d17 <get_fileinfo+0x13c>
c0004d13:	31 ff                	xor    edi,edi
c0004d15:	eb 23                	jmp    c0004d3a <get_fileinfo+0x15f>
c0004d17:	b9 0c 00 00 00       	mov    ecx,0xc
c0004d1c:	8d 54 3b 0d          	lea    edx,[ebx+edi*1+0xd]
c0004d20:	29 f9                	sub    ecx,edi
c0004d22:	0f b7 c0             	movzx  eax,ax
c0004d25:	e8 d7 d0 ff ff       	call   c0001e01 <put_utf>
c0004d2a:	84 c0                	test   al,al
c0004d2c:	74 e5                	je     c0004d13 <get_fileinfo+0x138>
c0004d2e:	0f b6 c0             	movzx  eax,al
c0004d31:	01 c7                	add    edi,eax
c0004d33:	89 e9                	mov    ecx,ebp
c0004d35:	e9 4a ff ff ff       	jmp    c0004c84 <get_fileinfo+0xa9>
c0004d3a:	c6 44 3b 0d 00       	mov    BYTE PTR [ebx+edi*1+0xd],0x0
c0004d3f:	80 7b 1a 00          	cmp    BYTE PTR [ebx+0x1a],0x0
c0004d43:	75 54                	jne    c0004d99 <get_fileinfo+0x1be>
c0004d45:	85 ff                	test   edi,edi
c0004d47:	75 0b                	jne    c0004d54 <get_fileinfo+0x179>
c0004d49:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0004d4d:	ba 01 00 00 00       	mov    edx,0x1
c0004d52:	eb 33                	jmp    c0004d87 <get_fileinfo+0x1ac>
c0004d54:	b1 08                	mov    cl,0x8
c0004d56:	31 d2                	xor    edx,edx
c0004d58:	66 0f be 44 13 0d    	movsx  ax,BYTE PTR [ebx+edx*1+0xd]
c0004d5e:	84 c0                	test   al,al
c0004d60:	74 25                	je     c0004d87 <get_fileinfo+0x1ac>
c0004d62:	66 83 f8 2e          	cmp    ax,0x2e
c0004d66:	74 16                	je     c0004d7e <get_fileinfo+0x1a3>
c0004d68:	8d 78 bf             	lea    edi,[eax-0x41]
c0004d6b:	66 83 ff 19          	cmp    di,0x19
c0004d6f:	77 0f                	ja     c0004d80 <get_fileinfo+0x1a5>
c0004d71:	8b 7e 38             	mov    edi,DWORD PTR [esi+0x38]
c0004d74:	84 4f 0c             	test   BYTE PTR [edi+0xc],cl
c0004d77:	74 07                	je     c0004d80 <get_fileinfo+0x1a5>
c0004d79:	83 c0 20             	add    eax,0x20
c0004d7c:	eb 02                	jmp    c0004d80 <get_fileinfo+0x1a5>
c0004d7e:	b1 10                	mov    cl,0x10
c0004d80:	88 44 13 1a          	mov    BYTE PTR [ebx+edx*1+0x1a],al
c0004d84:	42                   	inc    edx
c0004d85:	eb d1                	jmp    c0004d58 <get_fileinfo+0x17d>
c0004d87:	c6 44 13 1a 00       	mov    BYTE PTR [ebx+edx*1+0x1a],0x0
c0004d8c:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d8f:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c0004d93:	75 04                	jne    c0004d99 <get_fileinfo+0x1be>
c0004d95:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0004d99:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d9c:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c0004d9f:	88 43 0c             	mov    BYTE PTR [ebx+0xc],al
c0004da2:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004da5:	83 c0 1c             	add    eax,0x1c
c0004da8:	e8 c1 ce ff ff       	call   c0001c6e <ld_dword>
c0004dad:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0004db4:	89 03                	mov    DWORD PTR [ebx],eax
c0004db6:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004db9:	83 c0 16             	add    eax,0x16
c0004dbc:	e8 a0 ce ff ff       	call   c0001c61 <ld_word>
c0004dc1:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0004dc5:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004dc8:	83 c0 18             	add    eax,0x18
c0004dcb:	e8 91 ce ff ff       	call   c0001c61 <ld_word>
c0004dd0:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0004dd4:	83 c4 1c             	add    esp,0x1c
c0004dd7:	5b                   	pop    ebx
c0004dd8:	5e                   	pop    esi
c0004dd9:	5f                   	pop    edi
c0004dda:	5d                   	pop    ebp
c0004ddb:	c3                   	ret    

c0004ddc <ld_clust.isra.0>:
c0004ddc:	56                   	push   esi
c0004ddd:	89 c6                	mov    esi,eax
c0004ddf:	53                   	push   ebx
c0004de0:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004de3:	89 d3                	mov    ebx,edx
c0004de5:	e8 77 ce ff ff       	call   c0001c61 <ld_word>
c0004dea:	0f b7 c8             	movzx  ecx,ax
c0004ded:	89 f0                	mov    eax,esi
c0004def:	3c 03                	cmp    al,0x3
c0004df1:	75 0d                	jne    c0004e00 <ld_clust.isra.0+0x24>
c0004df3:	8d 43 14             	lea    eax,[ebx+0x14]
c0004df6:	e8 66 ce ff ff       	call   c0001c61 <ld_word>
c0004dfb:	c1 e0 10             	shl    eax,0x10
c0004dfe:	09 c1                	or     ecx,eax
c0004e00:	89 c8                	mov    eax,ecx
c0004e02:	5b                   	pop    ebx
c0004e03:	5e                   	pop    esi
c0004e04:	c3                   	ret    

c0004e05 <st_clust.isra.1>:
c0004e05:	56                   	push   esi
c0004e06:	89 c6                	mov    esi,eax
c0004e08:	53                   	push   ebx
c0004e09:	89 d3                	mov    ebx,edx
c0004e0b:	0f b7 d1             	movzx  edx,cx
c0004e0e:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0004e11:	e8 bd ce ff ff       	call   c0001cd3 <st_word>
c0004e16:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c0004e19:	75 0f                	jne    c0004e2a <st_clust.isra.1+0x25>
c0004e1b:	c1 e9 10             	shr    ecx,0x10
c0004e1e:	8d 43 14             	lea    eax,[ebx+0x14]
c0004e21:	89 ca                	mov    edx,ecx
c0004e23:	5b                   	pop    ebx
c0004e24:	5e                   	pop    esi
c0004e25:	e9 a9 ce ff ff       	jmp    c0001cd3 <st_word>
c0004e2a:	5b                   	pop    ebx
c0004e2b:	5e                   	pop    esi
c0004e2c:	c3                   	ret    

c0004e2d <init_alloc_info.isra.2>:
c0004e2d:	56                   	push   esi
c0004e2e:	53                   	push   ebx
c0004e2f:	89 c6                	mov    esi,eax
c0004e31:	89 d3                	mov    ebx,edx
c0004e33:	51                   	push   ecx
c0004e34:	8b 00                	mov    eax,DWORD PTR [eax]
c0004e36:	83 c0 34             	add    eax,0x34
c0004e39:	e8 30 ce ff ff       	call   c0001c6e <ld_dword>
c0004e3e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004e41:	8b 06                	mov    eax,DWORD PTR [esi]
c0004e43:	83 c0 38             	add    eax,0x38
c0004e46:	e8 3b ce ff ff       	call   c0001c86 <ld_qword>
c0004e4b:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004e4e:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0004e51:	8b 06                	mov    eax,DWORD PTR [esi]
c0004e53:	8a 40 21             	mov    al,BYTE PTR [eax+0x21]
c0004e56:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004e5d:	83 e0 02             	and    eax,0x2
c0004e60:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004e63:	5b                   	pop    ebx
c0004e64:	5b                   	pop    ebx
c0004e65:	5e                   	pop    esi
c0004e66:	c3                   	ret    

c0004e67 <follow_path>:
c0004e67:	56                   	push   esi
c0004e68:	53                   	push   ebx
c0004e69:	89 c3                	mov    ebx,eax
c0004e6b:	83 ec 14             	sub    esp,0x14
c0004e6e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004e72:	8b 30                	mov    esi,DWORD PTR [eax]
c0004e74:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e78:	8a 10                	mov    dl,BYTE PTR [eax]
c0004e7a:	80 fa 5c             	cmp    dl,0x5c
c0004e7d:	75 07                	jne    c0004e86 <follow_path+0x1f>
c0004e7f:	40                   	inc    eax
c0004e80:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004e84:	eb ee                	jmp    c0004e74 <follow_path+0xd>
c0004e86:	80 fa 2f             	cmp    dl,0x2f
c0004e89:	74 f4                	je     c0004e7f <follow_path+0x18>
c0004e8b:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004e92:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004e99:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0004e9c:	77 52                	ja     c0004ef0 <follow_path+0x89>
c0004e9e:	c6 43 47 80          	mov    BYTE PTR [ebx+0x47],0x80
c0004ea2:	31 d2                	xor    edx,edx
c0004ea4:	89 d8                	mov    eax,ebx
c0004ea6:	e8 12 e3 ff ff       	call   c00031bd <dir_sdi>
c0004eab:	eb 7c                	jmp    c0004f29 <follow_path+0xc2>
c0004ead:	89 d8                	mov    eax,ebx
c0004eaf:	e8 6e f2 ff ff       	call   c0004122 <dir_find>
c0004eb4:	8a 53 47             	mov    dl,BYTE PTR [ebx+0x47]
c0004eb7:	85 c0                	test   eax,eax
c0004eb9:	75 46                	jne    c0004f01 <follow_path+0x9a>
c0004ebb:	80 e2 04             	and    dl,0x4
c0004ebe:	75 69                	jne    c0004f29 <follow_path+0xc2>
c0004ec0:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004ec4:	74 5e                	je     c0004f24 <follow_path+0xbd>
c0004ec6:	8a 06                	mov    al,BYTE PTR [esi]
c0004ec8:	3c 04                	cmp    al,0x4
c0004eca:	75 41                	jne    c0004f0d <follow_path+0xa6>
c0004ecc:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004ecf:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c0004ed3:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004ed6:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004ed9:	30 c0                	xor    al,al
c0004edb:	09 d0                	or     eax,edx
c0004edd:	89 da                	mov    edx,ebx
c0004edf:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004ee2:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0004ee5:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0004ee8:	8d 46 10             	lea    eax,[esi+0x10]
c0004eeb:	e8 3d ff ff ff       	call   c0004e2d <init_alloc_info.isra.2>
c0004ef0:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004ef4:	89 d8                	mov    eax,ebx
c0004ef6:	e8 a9 ed ff ff       	call   c0003ca4 <create_name>
c0004efb:	85 c0                	test   eax,eax
c0004efd:	74 ae                	je     c0004ead <follow_path+0x46>
c0004eff:	eb 28                	jmp    c0004f29 <follow_path+0xc2>
c0004f01:	83 f8 04             	cmp    eax,0x4
c0004f04:	75 23                	jne    c0004f29 <follow_path+0xc2>
c0004f06:	80 e2 04             	and    dl,0x4
c0004f09:	74 19                	je     c0004f24 <follow_path+0xbd>
c0004f0b:	eb 1c                	jmp    c0004f29 <follow_path+0xc2>
c0004f0d:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0004f10:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0004f16:	8d 54 16 54          	lea    edx,[esi+edx*1+0x54]
c0004f1a:	e8 bd fe ff ff       	call   c0004ddc <ld_clust.isra.0>
c0004f1f:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004f22:	eb cc                	jmp    c0004ef0 <follow_path+0x89>
c0004f24:	b8 05 00 00 00       	mov    eax,0x5
c0004f29:	83 c4 14             	add    esp,0x14
c0004f2c:	5b                   	pop    ebx
c0004f2d:	5e                   	pop    esi
c0004f2e:	c3                   	ret    

c0004f2f <f_mount>:
c0004f2f:	53                   	push   ebx
c0004f30:	83 ec 18             	sub    esp,0x18
c0004f33:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004f37:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0004f3b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004f3f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0004f43:	e8 fb d2 ff ff       	call   c0002243 <get_ldnumber>
c0004f48:	89 c2                	mov    edx,eax
c0004f4a:	b8 0b 00 00 00       	mov    eax,0xb
c0004f4f:	85 d2                	test   edx,edx
c0004f51:	78 39                	js     c0004f8c <f_mount+0x5d>
c0004f53:	8b 04 95 80 e6 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd1980]
c0004f5a:	85 c0                	test   eax,eax
c0004f5c:	74 03                	je     c0004f61 <f_mount+0x32>
c0004f5e:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004f61:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f65:	85 c0                	test   eax,eax
c0004f67:	74 03                	je     c0004f6c <f_mount+0x3d>
c0004f69:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004f6c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f70:	89 04 95 80 e6 02 c0 	mov    DWORD PTR [edx*4-0x3ffd1980],eax
c0004f77:	31 c0                	xor    eax,eax
c0004f79:	84 db                	test   bl,bl
c0004f7b:	74 0f                	je     c0004f8c <f_mount+0x5d>
c0004f7d:	31 c9                	xor    ecx,ecx
c0004f7f:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004f83:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004f87:	e8 65 d7 ff ff       	call   c00026f1 <mount_volume>
c0004f8c:	83 c4 18             	add    esp,0x18
c0004f8f:	5b                   	pop    ebx
c0004f90:	c3                   	ret    

c0004f91 <f_open>:
c0004f91:	55                   	push   ebp
c0004f92:	bd 09 00 00 00       	mov    ebp,0x9
c0004f97:	57                   	push   edi
c0004f98:	56                   	push   esi
c0004f99:	53                   	push   ebx
c0004f9a:	83 ec 7c             	sub    esp,0x7c
c0004f9d:	8b 9c 24 90 00 00 00 	mov    ebx,DWORD PTR [esp+0x90]
c0004fa4:	8b bc 24 98 00 00 00 	mov    edi,DWORD PTR [esp+0x98]
c0004fab:	85 db                	test   ebx,ebx
c0004fad:	0f 84 10 04 00 00    	je     c00053c3 <f_open+0x432>
c0004fb3:	89 fe                	mov    esi,edi
c0004fb5:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004fb9:	83 e6 3f             	and    esi,0x3f
c0004fbc:	89 f0                	mov    eax,esi
c0004fbe:	0f b6 c8             	movzx  ecx,al
c0004fc1:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0004fc8:	e8 24 d7 ff ff       	call   c00026f1 <mount_volume>
c0004fcd:	89 c5                	mov    ebp,eax
c0004fcf:	85 c0                	test   eax,eax
c0004fd1:	0f 85 e6 03 00 00    	jne    c00053bd <f_open+0x42c>
c0004fd7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fdb:	bd 11 00 00 00       	mov    ebp,0x11
c0004fe0:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004fe4:	83 ec 0c             	sub    esp,0xc
c0004fe7:	68 60 04 00 00       	push   0x460
c0004fec:	e8 a3 34 00 00       	call   c0008494 <ff_memalloc>
c0004ff1:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004ff5:	83 c4 10             	add    esp,0x10
c0004ff8:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0004ffd:	0f 84 c0 03 00 00    	je     c00053c3 <f_open+0x432>
c0005003:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005007:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000500b:	8d 91 00 02 00 00    	lea    edx,[ecx+0x200]
c0005011:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0005014:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005017:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c000501e:	8d 44 24 24          	lea    eax,[esp+0x24]
c0005022:	e8 40 fe ff ff       	call   c0004e67 <follow_path>
c0005027:	89 c5                	mov    ebp,eax
c0005029:	85 c0                	test   eax,eax
c000502b:	75 0c                	jne    c0005039 <f_open+0xa8>
c000502d:	80 7c 24 6b 00       	cmp    BYTE PTR [esp+0x6b],0x0
c0005032:	79 05                	jns    c0005039 <f_open+0xa8>
c0005034:	bd 06 00 00 00       	mov    ebp,0x6
c0005039:	f7 c7 1c 00 00 00    	test   edi,0x1c
c000503f:	0f 84 84 01 00 00    	je     c00051c9 <f_open+0x238>
c0005045:	85 ed                	test   ebp,ebp
c0005047:	74 20                	je     c0005069 <f_open+0xd8>
c0005049:	83 fd 04             	cmp    ebp,0x4
c000504c:	0f 85 58 03 00 00    	jne    c00053aa <f_open+0x419>
c0005052:	8d 44 24 24          	lea    eax,[esp+0x24]
c0005056:	83 ce 08             	or     esi,0x8
c0005059:	e8 8a f2 ff ff       	call   c00042e8 <dir_register>
c000505e:	89 c5                	mov    ebp,eax
c0005060:	85 c0                	test   eax,eax
c0005062:	74 2f                	je     c0005093 <f_open+0x102>
c0005064:	e9 41 03 00 00       	jmp    c00053aa <f_open+0x419>
c0005069:	bd 07 00 00 00       	mov    ebp,0x7
c000506e:	f6 44 24 2a 11       	test   BYTE PTR [esp+0x2a],0x11
c0005073:	0f 85 31 03 00 00    	jne    c00053aa <f_open+0x419>
c0005079:	bd 08 00 00 00       	mov    ebp,0x8
c000507e:	f7 c7 04 00 00 00    	test   edi,0x4
c0005084:	0f 85 20 03 00 00    	jne    c00053aa <f_open+0x419>
c000508a:	83 e7 08             	and    edi,0x8
c000508d:	0f 84 65 01 00 00    	je     c00051f8 <f_open+0x267>
c0005093:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0005097:	8a 02                	mov    al,BYTE PTR [edx]
c0005099:	3c 04                	cmp    al,0x4
c000509b:	0f 85 97 00 00 00    	jne    c0005138 <f_open+0x1a7>
c00050a1:	8d 42 10             	lea    eax,[edx+0x10]
c00050a4:	89 13                	mov    DWORD PTR [ebx],edx
c00050a6:	89 da                	mov    edx,ebx
c00050a8:	e8 80 fd ff ff       	call   c0004e2d <init_alloc_info.isra.2>
c00050ad:	31 d2                	xor    edx,edx
c00050af:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050b3:	b9 1e 00 00 00       	mov    ecx,0x1e
c00050b8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050bb:	83 c0 02             	add    eax,0x2
c00050be:	e8 32 cc ff ff       	call   c0001cf5 <mem_set>
c00050c3:	b9 1a 00 00 00       	mov    ecx,0x1a
c00050c8:	31 d2                	xor    edx,edx
c00050ca:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050ce:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050d1:	83 c0 26             	add    eax,0x26
c00050d4:	e8 1c cc ff ff       	call   c0001cf5 <mem_set>
c00050d9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050dd:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00050e0:	c6 42 04 20          	mov    BYTE PTR [edx+0x4],0x20
c00050e4:	ba 00 00 21 50       	mov    edx,0x50210000
c00050e9:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050ec:	83 c0 08             	add    eax,0x8
c00050ef:	e8 e3 cb ff ff       	call   c0001cd7 <st_dword>
c00050f4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050f8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050fb:	c6 40 21 01          	mov    BYTE PTR [eax+0x21],0x1
c00050ff:	8d 44 24 24          	lea    eax,[esp+0x24]
c0005103:	e8 b7 ea ff ff       	call   c0003bbf <store_xdir>
c0005108:	89 c5                	mov    ebp,eax
c000510a:	85 c0                	test   eax,eax
c000510c:	0f 85 98 02 00 00    	jne    c00053aa <f_open+0x419>
c0005112:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0005115:	85 d2                	test   edx,edx
c0005117:	0f 84 db 00 00 00    	je     c00051f8 <f_open+0x267>
c000511d:	31 c9                	xor    ecx,ecx
c000511f:	89 d8                	mov    eax,ebx
c0005121:	e8 8e e3 ff ff       	call   c00034b4 <remove_chain>
c0005126:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000512a:	89 c5                	mov    ebp,eax
c000512c:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000512f:	48                   	dec    eax
c0005130:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0005133:	e9 b8 00 00 00       	jmp    c00051f0 <f_open+0x25f>
c0005138:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c000513c:	89 ea                	mov    edx,ebp
c000513e:	e8 99 fc ff ff       	call   c0004ddc <ld_clust.isra.0>
c0005143:	ba 00 00 21 50       	mov    edx,0x50210000
c0005148:	89 c7                	mov    edi,eax
c000514a:	8d 45 0e             	lea    eax,[ebp+0xe]
c000514d:	e8 85 cb ff ff       	call   c0001cd7 <st_dword>
c0005152:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0005156:	31 c9                	xor    ecx,ecx
c0005158:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c000515c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005160:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0005164:	e8 9c fc ff ff       	call   c0004e05 <st_clust.isra.1>
c0005169:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000516d:	31 d2                	xor    edx,edx
c000516f:	83 c0 1c             	add    eax,0x1c
c0005172:	e8 60 cb ff ff       	call   c0001cd7 <st_dword>
c0005177:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000517b:	85 ff                	test   edi,edi
c000517d:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005181:	74 75                	je     c00051f8 <f_open+0x267>
c0005183:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005187:	31 c9                	xor    ecx,ecx
c0005189:	8b 50 50             	mov    edx,DWORD PTR [eax+0x50]
c000518c:	8b 40 4c             	mov    eax,DWORD PTR [eax+0x4c]
c000518f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005193:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005197:	89 fa                	mov    edx,edi
c0005199:	8d 44 24 24          	lea    eax,[esp+0x24]
c000519d:	e8 12 e3 ff ff       	call   c00034b4 <remove_chain>
c00051a2:	89 c5                	mov    ebp,eax
c00051a4:	85 c0                	test   eax,eax
c00051a6:	0f 85 fe 01 00 00    	jne    c00053aa <f_open+0x419>
c00051ac:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00051b0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00051b4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00051b8:	4f                   	dec    edi
c00051b9:	e8 81 d2 ff ff       	call   c000243f <move_window>
c00051be:	89 c5                	mov    ebp,eax
c00051c0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00051c4:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c00051c7:	eb 27                	jmp    c00051f0 <f_open+0x25f>
c00051c9:	85 ed                	test   ebp,ebp
c00051cb:	0f 85 d9 01 00 00    	jne    c00053aa <f_open+0x419>
c00051d1:	8a 44 24 2a          	mov    al,BYTE PTR [esp+0x2a]
c00051d5:	bd 04 00 00 00       	mov    ebp,0x4
c00051da:	a8 10                	test   al,0x10
c00051dc:	0f 85 c8 01 00 00    	jne    c00053aa <f_open+0x419>
c00051e2:	83 e7 02             	and    edi,0x2
c00051e5:	74 11                	je     c00051f8 <f_open+0x267>
c00051e7:	bd 07 00 00 00       	mov    ebp,0x7
c00051ec:	a8 01                	test   al,0x1
c00051ee:	eb 02                	jmp    c00051f2 <f_open+0x261>
c00051f0:	85 ed                	test   ebp,ebp
c00051f2:	0f 85 b2 01 00 00    	jne    c00053aa <f_open+0x419>
c00051f8:	f7 c6 08 00 00 00    	test   esi,0x8
c00051fe:	74 03                	je     c0005203 <f_open+0x272>
c0005200:	83 ce 40             	or     esi,0x40
c0005203:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0005207:	8b 7a 4c             	mov    edi,DWORD PTR [edx+0x4c]
c000520a:	8b 6a 50             	mov    ebp,DWORD PTR [edx+0x50]
c000520d:	89 7b 40             	mov    DWORD PTR [ebx+0x40],edi
c0005210:	89 6b 44             	mov    DWORD PTR [ebx+0x44],ebp
c0005213:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c0005217:	89 7b 48             	mov    DWORD PTR [ebx+0x48],edi
c000521a:	8a 02                	mov    al,BYTE PTR [edx]
c000521c:	3c 04                	cmp    al,0x4
c000521e:	75 2a                	jne    c000524a <f_open+0x2b9>
c0005220:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005224:	0f b6 4c 24 2b       	movzx  ecx,BYTE PTR [esp+0x2b]
c0005229:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000522c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0005230:	30 c0                	xor    al,al
c0005232:	09 c8                	or     eax,ecx
c0005234:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0005237:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000523b:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000523e:	8d 42 10             	lea    eax,[edx+0x10]
c0005241:	89 da                	mov    edx,ebx
c0005243:	e8 e5 fb ff ff       	call   c0004e2d <init_alloc_info.isra.2>
c0005248:	eb 1c                	jmp    c0005266 <f_open+0x2d5>
c000524a:	89 fa                	mov    edx,edi
c000524c:	e8 8b fb ff ff       	call   c0004ddc <ld_clust.isra.0>
c0005251:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005254:	8d 47 1c             	lea    eax,[edi+0x1c]
c0005257:	e8 12 ca ff ff       	call   c0001c6e <ld_dword>
c000525c:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0005263:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005266:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000526a:	c7 43 4c 00 00 00 00 	mov    DWORD PTR [ebx+0x4c],0x0
c0005271:	89 03                	mov    DWORD PTR [ebx],eax
c0005273:	31 d2                	xor    edx,edx
c0005275:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0005279:	b9 00 02 00 00       	mov    ecx,0x200
c000527e:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0005282:	c6 43 29 00          	mov    BYTE PTR [ebx+0x29],0x0
c0005286:	89 f0                	mov    eax,esi
c0005288:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c000528f:	88 43 28             	mov    BYTE PTR [ebx+0x28],al
c0005292:	c7 43 3c 00 00 00 00 	mov    DWORD PTR [ebx+0x3c],0x0
c0005299:	8d 43 50             	lea    eax,[ebx+0x50]
c000529c:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c00052a3:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c00052aa:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00052ae:	e8 42 ca ff ff       	call   c0001cf5 <mem_set>
c00052b3:	83 e6 20             	and    esi,0x20
c00052b6:	75 07                	jne    c00052bf <f_open+0x32e>
c00052b8:	31 ed                	xor    ebp,ebp
c00052ba:	e9 eb 00 00 00       	jmp    c00053aa <f_open+0x419>
c00052bf:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00052c2:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00052c5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00052c9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00052cd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00052d1:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c00052d5:	74 e1                	je     c00052b8 <f_open+0x327>
c00052d7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00052db:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00052df:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00052e2:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c00052e5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00052e9:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00052ec:	0f b7 68 0a          	movzx  ebp,WORD PTR [eax+0xa]
c00052f0:	31 ff                	xor    edi,edi
c00052f2:	c1 e5 09             	shl    ebp,0x9
c00052f5:	89 ee                	mov    esi,ebp
c00052f7:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c00052fb:	89 f8                	mov    eax,edi
c00052fd:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0005301:	73 22                	jae    c0005325 <f_open+0x394>
c0005303:	89 d8                	mov    eax,ebx
c0005305:	e8 bd dc ff ff       	call   c0002fc7 <get_fat>
c000530a:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c000530e:	89 c2                	mov    edx,eax
c0005310:	19 7c 24 0c          	sbb    DWORD PTR [esp+0xc],edi
c0005314:	83 f8 01             	cmp    eax,0x1
c0005317:	76 10                	jbe    c0005329 <f_open+0x398>
c0005319:	83 f8 ff             	cmp    eax,0xffffffff
c000531c:	75 d9                	jne    c00052f7 <f_open+0x366>
c000531e:	bd 01 00 00 00       	mov    ebp,0x1
c0005323:	eb 09                	jmp    c000532e <f_open+0x39d>
c0005325:	31 ed                	xor    ebp,ebp
c0005327:	eb 05                	jmp    c000532e <f_open+0x39d>
c0005329:	bd 02 00 00 00       	mov    ebp,0x2
c000532e:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0005331:	85 ed                	test   ebp,ebp
c0005333:	75 75                	jne    c00053aa <f_open+0x419>
c0005335:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005339:	25 ff 01 00 00       	and    eax,0x1ff
c000533e:	0f 84 74 ff ff ff    	je     c00052b8 <f_open+0x327>
c0005344:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0005348:	bd 02 00 00 00       	mov    ebp,0x2
c000534d:	89 c8                	mov    eax,ecx
c000534f:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0005353:	e8 a2 cb ff ff       	call   c0001efa <clst2sect>
c0005358:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000535c:	89 d7                	mov    edi,edx
c000535e:	09 c7                	or     edi,eax
c0005360:	74 48                	je     c00053aa <f_open+0x419>
c0005362:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005366:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000536a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0005372:	0f ac fe 09          	shrd   esi,edi,0x9
c0005376:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c000537a:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000537e:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0005381:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0005385:	83 ec 0c             	sub    esp,0xc
c0005388:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c000538b:	6a 01                	push   0x1
c000538d:	52                   	push   edx
c000538e:	50                   	push   eax
c000538f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0005393:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005397:	50                   	push   eax
c0005398:	e8 79 c8 ff ff       	call   c0001c16 <disk_read>
c000539d:	83 c4 20             	add    esp,0x20
c00053a0:	85 c0                	test   eax,eax
c00053a2:	0f 95 c0             	setne  al
c00053a5:	0f b6 c0             	movzx  eax,al
c00053a8:	89 c5                	mov    ebp,eax
c00053aa:	83 ec 0c             	sub    esp,0xc
c00053ad:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00053b1:	e8 f4 30 00 00       	call   c00084aa <ff_memfree>
c00053b6:	83 c4 10             	add    esp,0x10
c00053b9:	85 ed                	test   ebp,ebp
c00053bb:	74 06                	je     c00053c3 <f_open+0x432>
c00053bd:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00053c3:	83 c4 7c             	add    esp,0x7c
c00053c6:	89 e8                	mov    eax,ebp
c00053c8:	5b                   	pop    ebx
c00053c9:	5e                   	pop    esi
c00053ca:	5f                   	pop    edi
c00053cb:	5d                   	pop    ebp
c00053cc:	c3                   	ret    

c00053cd <f_read>:
c00053cd:	55                   	push   ebp
c00053ce:	57                   	push   edi
c00053cf:	56                   	push   esi
c00053d0:	53                   	push   ebx
c00053d1:	83 ec 2c             	sub    esp,0x2c
c00053d4:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00053d8:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00053dc:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00053e2:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00053e6:	89 d8                	mov    eax,ebx
c00053e8:	e8 77 cf ff ff       	call   c0002364 <validate>
c00053ed:	89 c5                	mov    ebp,eax
c00053ef:	85 c0                	test   eax,eax
c00053f1:	0f 85 4c 02 00 00    	jne    c0005643 <f_read+0x276>
c00053f7:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00053fb:	85 ed                	test   ebp,ebp
c00053fd:	0f 85 40 02 00 00    	jne    c0005643 <f_read+0x276>
c0005403:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c0005407:	0f 84 31 02 00 00    	je     c000563e <f_read+0x271>
c000540d:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005410:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0005413:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c0005416:	bf 00 00 00 00       	mov    edi,0x0
c000541b:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c000541e:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c0005422:	89 d1                	mov    ecx,edx
c0005424:	19 f9                	sbb    ecx,edi
c0005426:	0f 83 cf 00 00 00    	jae    c00054fb <f_read+0x12e>
c000542c:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0005430:	e9 c6 00 00 00       	jmp    c00054fb <f_read+0x12e>
c0005435:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005438:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c000543b:	89 d0                	mov    eax,edx
c000543d:	25 ff 01 00 00       	and    eax,0x1ff
c0005442:	0f 85 c9 01 00 00    	jne    c0005611 <f_read+0x244>
c0005448:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000544c:	89 d6                	mov    esi,edx
c000544e:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0005452:	89 cf                	mov    edi,ecx
c0005454:	48                   	dec    eax
c0005455:	0f ac fe 09          	shrd   esi,edi,0x9
c0005459:	21 f0                	and    eax,esi
c000545b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000545f:	0f 84 a6 00 00 00    	je     c000550b <f_read+0x13e>
c0005465:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005469:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000546c:	89 c8                	mov    eax,ecx
c000546e:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0005471:	e8 84 ca ff ff       	call   c0001efa <clst2sect>
c0005476:	89 d7                	mov    edi,edx
c0005478:	09 c7                	or     edi,eax
c000547a:	0f 84 b4 00 00 00    	je     c0005534 <f_read+0x167>
c0005480:	31 ff                	xor    edi,edi
c0005482:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0005486:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005489:	01 c6                	add    esi,eax
c000548b:	11 d7                	adc    edi,edx
c000548d:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c0005495:	0f 86 fd 00 00 00    	jbe    c0005598 <f_read+0x1cb>
c000549b:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000549f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00054a3:	c1 e8 09             	shr    eax,0x9
c00054a6:	89 04 24             	mov    DWORD PTR [esp],eax
c00054a9:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00054ad:	03 14 24             	add    edx,DWORD PTR [esp]
c00054b0:	39 c2                	cmp    edx,eax
c00054b2:	76 07                	jbe    c00054bb <f_read+0xee>
c00054b4:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c00054b8:	89 04 24             	mov    DWORD PTR [esp],eax
c00054bb:	83 ec 0c             	sub    esp,0xc
c00054be:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00054c2:	57                   	push   edi
c00054c3:	56                   	push   esi
c00054c4:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00054c8:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00054cc:	50                   	push   eax
c00054cd:	e8 44 c7 ff ff       	call   c0001c16 <disk_read>
c00054d2:	83 c4 20             	add    esp,0x20
c00054d5:	85 c0                	test   eax,eax
c00054d7:	75 6e                	jne    c0005547 <f_read+0x17a>
c00054d9:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00054dd:	78 7e                	js     c000555d <f_read+0x190>
c00054df:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00054e2:	c1 e6 09             	shl    esi,0x9
c00054e5:	31 ff                	xor    edi,edi
c00054e7:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00054eb:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00054ef:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00054f3:	01 30                	add    DWORD PTR [eax],esi
c00054f5:	01 73 2c             	add    DWORD PTR [ebx+0x2c],esi
c00054f8:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c00054fb:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0005500:	0f 85 2f ff ff ff    	jne    c0005435 <f_read+0x68>
c0005506:	e9 38 01 00 00       	jmp    c0005643 <f_read+0x276>
c000550b:	89 c8                	mov    eax,ecx
c000550d:	09 d0                	or     eax,edx
c000550f:	75 05                	jne    c0005516 <f_read+0x149>
c0005511:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005514:	eb 19                	jmp    c000552f <f_read+0x162>
c0005516:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c000551a:	74 09                	je     c0005525 <f_read+0x158>
c000551c:	89 d8                	mov    eax,ebx
c000551e:	e8 f8 c9 ff ff       	call   c0001f1b <clmt_clust>
c0005523:	eb 0a                	jmp    c000552f <f_read+0x162>
c0005525:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005528:	89 d8                	mov    eax,ebx
c000552a:	e8 98 da ff ff       	call   c0002fc7 <get_fat>
c000552f:	83 f8 01             	cmp    eax,0x1
c0005532:	77 0e                	ja     c0005542 <f_read+0x175>
c0005534:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005538:	bd 02 00 00 00       	mov    ebp,0x2
c000553d:	e9 01 01 00 00       	jmp    c0005643 <f_read+0x276>
c0005542:	83 f8 ff             	cmp    eax,0xffffffff
c0005545:	75 0e                	jne    c0005555 <f_read+0x188>
c0005547:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c000554b:	bd 01 00 00 00       	mov    ebp,0x1
c0005550:	e9 ee 00 00 00       	jmp    c0005643 <f_read+0x276>
c0005555:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005558:	e9 08 ff ff ff       	jmp    c0005465 <f_read+0x98>
c000555d:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005560:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005563:	29 f0                	sub    eax,esi
c0005565:	19 fa                	sbb    edx,edi
c0005567:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000556a:	89 d7                	mov    edi,edx
c000556c:	ba 00 00 00 00       	mov    edx,0x0
c0005571:	89 f9                	mov    ecx,edi
c0005573:	19 d1                	sbb    ecx,edx
c0005575:	0f 83 64 ff ff ff    	jae    c00054df <f_read+0x112>
c000557b:	89 c7                	mov    edi,eax
c000557d:	8d 53 50             	lea    edx,[ebx+0x50]
c0005580:	c1 e7 09             	shl    edi,0x9
c0005583:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005587:	b9 00 02 00 00       	mov    ecx,0x200
c000558c:	01 f8                	add    eax,edi
c000558e:	e8 4d c7 ff ff       	call   c0001ce0 <mem_cpy>
c0005593:	e9 47 ff ff ff       	jmp    c00054df <f_read+0x112>
c0005598:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000559b:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c000559e:	89 04 24             	mov    DWORD PTR [esp],eax
c00055a1:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00055a5:	39 7c 24 04          	cmp    DWORD PTR [esp+0x4],edi
c00055a9:	75 05                	jne    c00055b0 <f_read+0x1e3>
c00055ab:	39 34 24             	cmp    DWORD PTR [esp],esi
c00055ae:	74 5b                	je     c000560b <f_read+0x23e>
c00055b0:	8d 43 50             	lea    eax,[ebx+0x50]
c00055b3:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00055b7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00055bb:	79 2a                	jns    c00055e7 <f_read+0x21a>
c00055bd:	83 ec 0c             	sub    esp,0xc
c00055c0:	6a 01                	push   0x1
c00055c2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00055c6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00055ca:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00055ce:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00055d2:	50                   	push   eax
c00055d3:	e8 54 c6 ff ff       	call   c0001c2c <disk_write>
c00055d8:	83 c4 20             	add    esp,0x20
c00055db:	85 c0                	test   eax,eax
c00055dd:	0f 85 64 ff ff ff    	jne    c0005547 <f_read+0x17a>
c00055e3:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00055e7:	83 ec 0c             	sub    esp,0xc
c00055ea:	6a 01                	push   0x1
c00055ec:	57                   	push   edi
c00055ed:	56                   	push   esi
c00055ee:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00055f2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00055f6:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00055fa:	50                   	push   eax
c00055fb:	e8 16 c6 ff ff       	call   c0001c16 <disk_read>
c0005600:	83 c4 20             	add    esp,0x20
c0005603:	85 c0                	test   eax,eax
c0005605:	0f 85 3c ff ff ff    	jne    c0005547 <f_read+0x17a>
c000560b:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000560e:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005611:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005614:	ba 00 02 00 00       	mov    edx,0x200
c0005619:	25 ff 01 00 00       	and    eax,0x1ff
c000561e:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0005622:	29 c2                	sub    edx,eax
c0005624:	39 d6                	cmp    esi,edx
c0005626:	76 02                	jbe    c000562a <f_read+0x25d>
c0005628:	89 d6                	mov    esi,edx
c000562a:	8d 54 03 50          	lea    edx,[ebx+eax*1+0x50]
c000562e:	89 f1                	mov    ecx,esi
c0005630:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005634:	e8 a7 c6 ff ff       	call   c0001ce0 <mem_cpy>
c0005639:	e9 a7 fe ff ff       	jmp    c00054e5 <f_read+0x118>
c000563e:	bd 07 00 00 00       	mov    ebp,0x7
c0005643:	83 c4 2c             	add    esp,0x2c
c0005646:	89 e8                	mov    eax,ebp
c0005648:	5b                   	pop    ebx
c0005649:	5e                   	pop    esi
c000564a:	5f                   	pop    edi
c000564b:	5d                   	pop    ebp
c000564c:	c3                   	ret    

c000564d <f_write>:
c000564d:	55                   	push   ebp
c000564e:	57                   	push   edi
c000564f:	56                   	push   esi
c0005650:	53                   	push   ebx
c0005651:	83 ec 2c             	sub    esp,0x2c
c0005654:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0005658:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000565c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0005662:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005666:	89 d8                	mov    eax,ebx
c0005668:	e8 f7 cc ff ff       	call   c0002364 <validate>
c000566d:	89 c5                	mov    ebp,eax
c000566f:	85 c0                	test   eax,eax
c0005671:	0f 85 86 02 00 00    	jne    c00058fd <f_write+0x2b0>
c0005677:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c000567b:	85 ed                	test   ebp,ebp
c000567d:	0f 85 7a 02 00 00    	jne    c00058fd <f_write+0x2b0>
c0005683:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005687:	0f 84 6b 02 00 00    	je     c00058f8 <f_write+0x2ab>
c000568d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005691:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005694:	0f 84 43 01 00 00    	je     c00057dd <f_write+0x190>
c000569a:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000569d:	89 c1                	mov    ecx,eax
c000569f:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c00056a3:	0f 83 34 01 00 00    	jae    c00057dd <f_write+0x190>
c00056a9:	f7 d0                	not    eax
c00056ab:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00056af:	e9 29 01 00 00       	jmp    c00057dd <f_write+0x190>
c00056b4:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00056b7:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c00056ba:	89 d0                	mov    eax,edx
c00056bc:	25 ff 01 00 00       	and    eax,0x1ff
c00056c1:	0f 85 00 02 00 00    	jne    c00058c7 <f_write+0x27a>
c00056c7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00056cb:	89 d6                	mov    esi,edx
c00056cd:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c00056d1:	89 cf                	mov    edi,ecx
c00056d3:	48                   	dec    eax
c00056d4:	0f ac fe 09          	shrd   esi,edi,0x9
c00056d8:	21 f0                	and    eax,esi
c00056da:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00056de:	0f 84 06 01 00 00    	je     c00057ea <f_write+0x19d>
c00056e4:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00056e8:	0f 88 6e 01 00 00    	js     c000585c <f_write+0x20f>
c00056ee:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00056f2:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00056f5:	89 c8                	mov    eax,ecx
c00056f7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00056fb:	e8 fa c7 ff ff       	call   c0001efa <clst2sect>
c0005700:	89 d1                	mov    ecx,edx
c0005702:	09 c1                	or     ecx,eax
c0005704:	0f 84 1c 01 00 00    	je     c0005826 <f_write+0x1d9>
c000570a:	31 ff                	xor    edi,edi
c000570c:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0005710:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0005714:	01 c6                	add    esi,eax
c0005716:	11 d7                	adc    edi,edx
c0005718:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c0005720:	0f 86 63 01 00 00    	jbe    c0005889 <f_write+0x23c>
c0005726:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000572a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000572e:	c1 e8 09             	shr    eax,0x9
c0005731:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005735:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0005739:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c000573d:	39 c2                	cmp    edx,eax
c000573f:	76 08                	jbe    c0005749 <f_write+0xfc>
c0005741:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0005745:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005749:	83 ec 0c             	sub    esp,0xc
c000574c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005750:	57                   	push   edi
c0005751:	56                   	push   esi
c0005752:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0005756:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000575a:	50                   	push   eax
c000575b:	e8 cc c4 ff ff       	call   c0001c2c <disk_write>
c0005760:	83 c4 20             	add    esp,0x20
c0005763:	85 c0                	test   eax,eax
c0005765:	0f 85 ce 00 00 00    	jne    c0005839 <f_write+0x1ec>
c000576b:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000576e:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005771:	29 f0                	sub    eax,esi
c0005773:	19 fa                	sbb    edx,edi
c0005775:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0005779:	89 d7                	mov    edi,edx
c000577b:	ba 00 00 00 00       	mov    edx,0x0
c0005780:	89 f9                	mov    ecx,edi
c0005782:	19 d1                	sbb    ecx,edx
c0005784:	73 1c                	jae    c00057a2 <f_write+0x155>
c0005786:	89 c7                	mov    edi,eax
c0005788:	b9 00 02 00 00       	mov    ecx,0x200
c000578d:	c1 e7 09             	shl    edi,0x9
c0005790:	8d 43 50             	lea    eax,[ebx+0x50]
c0005793:	03 7c 24 44          	add    edi,DWORD PTR [esp+0x44]
c0005797:	89 fa                	mov    edx,edi
c0005799:	e8 42 c5 ff ff       	call   c0001ce0 <mem_cpy>
c000579e:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00057a2:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00057a6:	c1 e6 09             	shl    esi,0x9
c00057a9:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00057ad:	31 ff                	xor    edi,edi
c00057af:	01 30                	add    DWORD PTR [eax],esi
c00057b1:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00057b5:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00057b9:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00057bc:	03 73 2c             	add    esi,DWORD PTR [ebx+0x2c]
c00057bf:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00057c2:	13 7b 30             	adc    edi,DWORD PTR [ebx+0x30]
c00057c5:	89 c1                	mov    ecx,eax
c00057c7:	39 f2                	cmp    edx,esi
c00057c9:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c00057cc:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c00057cf:	19 f9                	sbb    ecx,edi
c00057d1:	73 04                	jae    c00057d7 <f_write+0x18a>
c00057d3:	89 f2                	mov    edx,esi
c00057d5:	89 f8                	mov    eax,edi
c00057d7:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00057da:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00057dd:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00057e2:	0f 85 cc fe ff ff    	jne    c00056b4 <f_write+0x67>
c00057e8:	eb 2e                	jmp    c0005818 <f_write+0x1cb>
c00057ea:	89 c8                	mov    eax,ecx
c00057ec:	09 d0                	or     eax,edx
c00057ee:	75 0b                	jne    c00057fb <f_write+0x1ae>
c00057f0:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00057f3:	31 d2                	xor    edx,edx
c00057f5:	85 c0                	test   eax,eax
c00057f7:	75 28                	jne    c0005821 <f_write+0x1d4>
c00057f9:	eb 12                	jmp    c000580d <f_write+0x1c0>
c00057fb:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c00057ff:	74 09                	je     c000580a <f_write+0x1bd>
c0005801:	89 d8                	mov    eax,ebx
c0005803:	e8 13 c7 ff ff       	call   c0001f1b <clmt_clust>
c0005808:	eb 0a                	jmp    c0005814 <f_write+0x1c7>
c000580a:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000580d:	89 d8                	mov    eax,ebx
c000580f:	e8 a1 da ff ff       	call   c00032b5 <create_chain>
c0005814:	85 c0                	test   eax,eax
c0005816:	75 09                	jne    c0005821 <f_write+0x1d4>
c0005818:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c000581c:	e9 dc 00 00 00       	jmp    c00058fd <f_write+0x2b0>
c0005821:	83 f8 01             	cmp    eax,0x1
c0005824:	75 0e                	jne    c0005834 <f_write+0x1e7>
c0005826:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c000582a:	bd 02 00 00 00       	mov    ebp,0x2
c000582f:	e9 c9 00 00 00       	jmp    c00058fd <f_write+0x2b0>
c0005834:	83 f8 ff             	cmp    eax,0xffffffff
c0005837:	75 0e                	jne    c0005847 <f_write+0x1fa>
c0005839:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c000583d:	bd 01 00 00 00       	mov    ebp,0x1
c0005842:	e9 b6 00 00 00       	jmp    c00058fd <f_write+0x2b0>
c0005847:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c000584a:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000584e:	0f 85 90 fe ff ff    	jne    c00056e4 <f_write+0x97>
c0005854:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005857:	e9 88 fe ff ff       	jmp    c00056e4 <f_write+0x97>
c000585c:	83 ec 0c             	sub    esp,0xc
c000585f:	8d 43 50             	lea    eax,[ebx+0x50]
c0005862:	6a 01                	push   0x1
c0005864:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0005867:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000586a:	50                   	push   eax
c000586b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000586f:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005873:	50                   	push   eax
c0005874:	e8 b3 c3 ff ff       	call   c0001c2c <disk_write>
c0005879:	83 c4 20             	add    esp,0x20
c000587c:	85 c0                	test   eax,eax
c000587e:	75 b9                	jne    c0005839 <f_write+0x1ec>
c0005880:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005884:	e9 65 fe ff ff       	jmp    c00056ee <f_write+0xa1>
c0005889:	39 7b 3c             	cmp    DWORD PTR [ebx+0x3c],edi
c000588c:	75 05                	jne    c0005893 <f_write+0x246>
c000588e:	39 73 38             	cmp    DWORD PTR [ebx+0x38],esi
c0005891:	74 2e                	je     c00058c1 <f_write+0x274>
c0005893:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0005896:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005899:	39 53 2c             	cmp    DWORD PTR [ebx+0x2c],edx
c000589c:	1b 43 10             	sbb    eax,DWORD PTR [ebx+0x10]
c000589f:	73 20                	jae    c00058c1 <f_write+0x274>
c00058a1:	83 ec 0c             	sub    esp,0xc
c00058a4:	8d 43 50             	lea    eax,[ebx+0x50]
c00058a7:	6a 01                	push   0x1
c00058a9:	57                   	push   edi
c00058aa:	56                   	push   esi
c00058ab:	50                   	push   eax
c00058ac:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00058b0:	50                   	push   eax
c00058b1:	e8 60 c3 ff ff       	call   c0001c16 <disk_read>
c00058b6:	83 c4 20             	add    esp,0x20
c00058b9:	85 c0                	test   eax,eax
c00058bb:	0f 85 78 ff ff ff    	jne    c0005839 <f_write+0x1ec>
c00058c1:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00058c4:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00058c7:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00058ca:	ba 00 02 00 00       	mov    edx,0x200
c00058cf:	25 ff 01 00 00       	and    eax,0x1ff
c00058d4:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00058d8:	29 c2                	sub    edx,eax
c00058da:	39 d6                	cmp    esi,edx
c00058dc:	76 02                	jbe    c00058e0 <f_write+0x293>
c00058de:	89 d6                	mov    esi,edx
c00058e0:	8d 44 03 50          	lea    eax,[ebx+eax*1+0x50]
c00058e4:	89 f1                	mov    ecx,esi
c00058e6:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00058ea:	e8 f1 c3 ff ff       	call   c0001ce0 <mem_cpy>
c00058ef:	80 4b 28 80          	or     BYTE PTR [ebx+0x28],0x80
c00058f3:	e9 b1 fe ff ff       	jmp    c00057a9 <f_write+0x15c>
c00058f8:	bd 07 00 00 00       	mov    ebp,0x7
c00058fd:	83 c4 2c             	add    esp,0x2c
c0005900:	89 e8                	mov    eax,ebp
c0005902:	5b                   	pop    ebx
c0005903:	5e                   	pop    esi
c0005904:	5f                   	pop    edi
c0005905:	5d                   	pop    ebp
c0005906:	c3                   	ret    

c0005907 <f_sync>:
c0005907:	56                   	push   esi
c0005908:	53                   	push   ebx
c0005909:	83 ec 64             	sub    esp,0x64
c000590c:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c0005910:	8d 54 24 10          	lea    edx,[esp+0x10]
c0005914:	89 d8                	mov    eax,ebx
c0005916:	e8 49 ca ff ff       	call   c0002364 <validate>
c000591b:	85 c0                	test   eax,eax
c000591d:	0f 85 ba 01 00 00    	jne    c0005add <f_sync+0x1d6>
c0005923:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c0005926:	f6 c2 40             	test   dl,0x40
c0005929:	0f 84 ae 01 00 00    	je     c0005add <f_sync+0x1d6>
c000592f:	84 d2                	test   dl,dl
c0005931:	79 33                	jns    c0005966 <f_sync+0x5f>
c0005933:	83 ec 0c             	sub    esp,0xc
c0005936:	8d 43 50             	lea    eax,[ebx+0x50]
c0005939:	6a 01                	push   0x1
c000593b:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c000593e:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0005941:	50                   	push   eax
c0005942:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005946:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000594a:	50                   	push   eax
c000594b:	e8 dc c2 ff ff       	call   c0001c2c <disk_write>
c0005950:	83 c4 20             	add    esp,0x20
c0005953:	89 c2                	mov    edx,eax
c0005955:	b8 01 00 00 00       	mov    eax,0x1
c000595a:	85 d2                	test   edx,edx
c000595c:	0f 85 7b 01 00 00    	jne    c0005add <f_sync+0x1d6>
c0005962:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005966:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000596a:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000596d:	0f 85 11 01 00 00    	jne    c0005a84 <f_sync+0x17d>
c0005973:	89 d8                	mov    eax,ebx
c0005975:	e8 13 d6 ff ff       	call   c0002f8d <fill_first_frag>
c000597a:	85 c0                	test   eax,eax
c000597c:	0f 85 5b 01 00 00    	jne    c0005add <f_sync+0x1d6>
c0005982:	83 c9 ff             	or     ecx,0xffffffff
c0005985:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005988:	89 d8                	mov    eax,ebx
c000598a:	e8 c9 d5 ff ff       	call   c0002f58 <fill_last_frag>
c000598f:	85 c0                	test   eax,eax
c0005991:	0f 85 46 01 00 00    	jne    c0005add <f_sync+0x1d6>
c0005997:	83 ec 0c             	sub    esp,0xc
c000599a:	68 60 04 00 00       	push   0x460
c000599f:	e8 f0 2a 00 00       	call   c0008494 <ff_memalloc>
c00059a4:	83 c4 10             	add    esp,0x10
c00059a7:	89 c6                	mov    esi,eax
c00059a9:	b8 11 00 00 00       	mov    eax,0x11
c00059ae:	85 f6                	test   esi,esi
c00059b0:	0f 84 27 01 00 00    	je     c0005add <f_sync+0x1d6>
c00059b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059ba:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c00059c0:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00059c3:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00059c6:	89 da                	mov    edx,ebx
c00059c8:	8d 44 24 14          	lea    eax,[esp+0x14]
c00059cc:	e8 af df ff ff       	call   c0003980 <load_obj_xdir>
c00059d1:	85 c0                	test   eax,eax
c00059d3:	0f 85 95 00 00 00    	jne    c0005a6e <f_sync+0x167>
c00059d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059dd:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00059e0:	80 4a 04 20          	or     BYTE PTR [edx+0x4],0x20
c00059e4:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
c00059e7:	8a 53 07             	mov    dl,BYTE PTR [ebx+0x7]
c00059ea:	83 ca 01             	or     edx,0x1
c00059ed:	88 51 21             	mov    BYTE PTR [ecx+0x21],dl
c00059f0:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00059f3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00059f6:	83 c0 34             	add    eax,0x34
c00059f9:	e8 d9 c2 ff ff       	call   c0001cd7 <st_dword>
c00059fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a02:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005a05:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a08:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005a0b:	83 c0 38             	add    eax,0x38
c0005a0e:	e8 c7 c2 ff ff       	call   c0001cda <st_qword>
c0005a13:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005a16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a1a:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005a1d:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a20:	83 c0 28             	add    eax,0x28
c0005a23:	e8 b2 c2 ff ff       	call   c0001cda <st_qword>
c0005a28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a2c:	ba 00 00 21 50       	mov    edx,0x50210000
c0005a31:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a34:	83 c0 0c             	add    eax,0xc
c0005a37:	e8 9b c2 ff ff       	call   c0001cd7 <st_dword>
c0005a3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a40:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0005a43:	c6 42 15 00          	mov    BYTE PTR [edx+0x15],0x0
c0005a47:	31 d2                	xor    edx,edx
c0005a49:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a4c:	83 c0 10             	add    eax,0x10
c0005a4f:	e8 83 c2 ff ff       	call   c0001cd7 <st_dword>
c0005a54:	8d 44 24 14          	lea    eax,[esp+0x14]
c0005a58:	e8 62 e1 ff ff       	call   c0003bbf <store_xdir>
c0005a5d:	85 c0                	test   eax,eax
c0005a5f:	75 0d                	jne    c0005a6e <f_sync+0x167>
c0005a61:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a65:	e8 00 eb ff ff       	call   c000456a <sync_fs>
c0005a6a:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005a6e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005a72:	83 ec 0c             	sub    esp,0xc
c0005a75:	56                   	push   esi
c0005a76:	e8 2f 2a 00 00       	call   c00084aa <ff_memfree>
c0005a7b:	83 c4 10             	add    esp,0x10
c0005a7e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005a82:	eb 59                	jmp    c0005add <f_sync+0x1d6>
c0005a84:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0005a87:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c0005a8a:	e8 b0 c9 ff ff       	call   c000243f <move_window>
c0005a8f:	85 c0                	test   eax,eax
c0005a91:	75 4a                	jne    c0005add <f_sync+0x1d6>
c0005a93:	8b 73 48             	mov    esi,DWORD PTR [ebx+0x48]
c0005a96:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c0005a9a:	89 f2                	mov    edx,esi
c0005a9c:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0005a9f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0005aa1:	e8 5f f3 ff ff       	call   c0004e05 <st_clust.isra.1>
c0005aa6:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005aa9:	8d 46 1c             	lea    eax,[esi+0x1c]
c0005aac:	e8 26 c2 ff ff       	call   c0001cd7 <st_dword>
c0005ab1:	8d 46 16             	lea    eax,[esi+0x16]
c0005ab4:	ba 00 00 21 50       	mov    edx,0x50210000
c0005ab9:	e8 19 c2 ff ff       	call   c0001cd7 <st_dword>
c0005abe:	8d 46 12             	lea    eax,[esi+0x12]
c0005ac1:	31 d2                	xor    edx,edx
c0005ac3:	e8 0b c2 ff ff       	call   c0001cd3 <st_word>
c0005ac8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005acc:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005ad0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005ad4:	e8 91 ea ff ff       	call   c000456a <sync_fs>
c0005ad9:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005add:	83 c4 64             	add    esp,0x64
c0005ae0:	5b                   	pop    ebx
c0005ae1:	5e                   	pop    esi
c0005ae2:	c3                   	ret    

c0005ae3 <f_close>:
c0005ae3:	53                   	push   ebx
c0005ae4:	83 ec 24             	sub    esp,0x24
c0005ae7:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0005aeb:	53                   	push   ebx
c0005aec:	e8 16 fe ff ff       	call   c0005907 <f_sync>
c0005af1:	83 c4 10             	add    esp,0x10
c0005af4:	85 c0                	test   eax,eax
c0005af6:	75 15                	jne    c0005b0d <f_close+0x2a>
c0005af8:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0005afc:	89 d8                	mov    eax,ebx
c0005afe:	e8 61 c8 ff ff       	call   c0002364 <validate>
c0005b03:	85 c0                	test   eax,eax
c0005b05:	75 06                	jne    c0005b0d <f_close+0x2a>
c0005b07:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005b0d:	83 c4 18             	add    esp,0x18
c0005b10:	5b                   	pop    ebx
c0005b11:	c3                   	ret    

c0005b12 <f_lseek>:
c0005b12:	55                   	push   ebp
c0005b13:	57                   	push   edi
c0005b14:	56                   	push   esi
c0005b15:	53                   	push   ebx
c0005b16:	83 ec 3c             	sub    esp,0x3c
c0005b19:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0005b1d:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0005b21:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0005b25:	89 04 24             	mov    DWORD PTR [esp],eax
c0005b28:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0005b2c:	89 d8                	mov    eax,ebx
c0005b2e:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c0005b32:	e8 2d c8 ff ff       	call   c0002364 <validate>
c0005b37:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b3b:	85 c0                	test   eax,eax
c0005b3d:	0f 85 7a 04 00 00    	jne    c0005fbd <f_lseek+0x4ab>
c0005b43:	0f b6 43 29          	movzx  eax,BYTE PTR [ebx+0x29]
c0005b47:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b4b:	85 c0                	test   eax,eax
c0005b4d:	0f 85 6a 04 00 00    	jne    c0005fbd <f_lseek+0x4ab>
c0005b53:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005b57:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005b5a:	74 0c                	je     c0005b68 <f_lseek+0x56>
c0005b5c:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005b5f:	85 c0                	test   eax,eax
c0005b61:	75 1f                	jne    c0005b82 <f_lseek+0x70>
c0005b63:	e9 b5 01 00 00       	jmp    c0005d1d <f_lseek+0x20b>
c0005b68:	83 c9 ff             	or     ecx,0xffffffff
c0005b6b:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005b6e:	89 d8                	mov    eax,ebx
c0005b70:	e8 e3 d3 ff ff       	call   c0002f58 <fill_last_frag>
c0005b75:	85 c0                	test   eax,eax
c0005b77:	74 e3                	je     c0005b5c <f_lseek+0x4a>
c0005b79:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b7d:	e9 3b 04 00 00       	jmp    c0005fbd <f_lseek+0x4ab>
c0005b82:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c0005b87:	0f 85 ac 00 00 00    	jne    c0005c39 <f_lseek+0x127>
c0005b8d:	83 3c 24 ff          	cmp    DWORD PTR [esp],0xffffffff
c0005b91:	0f 85 a2 00 00 00    	jne    c0005c39 <f_lseek+0x127>
c0005b97:	8d 78 04             	lea    edi,[eax+0x4]
c0005b9a:	8b 6b 08             	mov    ebp,DWORD PTR [ebx+0x8]
c0005b9d:	8b 00                	mov    eax,DWORD PTR [eax]
c0005b9f:	be 02 00 00 00       	mov    esi,0x2
c0005ba4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005ba8:	85 ed                	test   ebp,ebp
c0005baa:	74 73                	je     c0005c1f <f_lseek+0x10d>
c0005bac:	89 e9                	mov    ecx,ebp
c0005bae:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005bb5:	ff 04 24             	inc    DWORD PTR [esp]
c0005bb8:	89 ca                	mov    edx,ecx
c0005bba:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005bbe:	89 d8                	mov    eax,ebx
c0005bc0:	e8 02 d4 ff ff       	call   c0002fc7 <get_fat>
c0005bc5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005bc9:	83 f8 01             	cmp    eax,0x1
c0005bcc:	77 11                	ja     c0005bdf <f_lseek+0xcd>
c0005bce:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005bd2:	c7 44 24 18 02 00 00 00 	mov    DWORD PTR [esp+0x18],0x2
c0005bda:	e9 de 03 00 00       	jmp    c0005fbd <f_lseek+0x4ab>
c0005bdf:	83 f8 ff             	cmp    eax,0xffffffff
c0005be2:	75 11                	jne    c0005bf5 <f_lseek+0xe3>
c0005be4:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005be8:	c7 44 24 18 01 00 00 00 	mov    DWORD PTR [esp+0x18],0x1
c0005bf0:	e9 c8 03 00 00       	jmp    c0005fbd <f_lseek+0x4ab>
c0005bf5:	8d 51 01             	lea    edx,[ecx+0x1]
c0005bf8:	89 c1                	mov    ecx,eax
c0005bfa:	39 c2                	cmp    edx,eax
c0005bfc:	74 b7                	je     c0005bb5 <f_lseek+0xa3>
c0005bfe:	83 c6 02             	add    esi,0x2
c0005c01:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c0005c05:	72 0b                	jb     c0005c12 <f_lseek+0x100>
c0005c07:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005c0a:	89 6f 04             	mov    DWORD PTR [edi+0x4],ebp
c0005c0d:	89 0f                	mov    DWORD PTR [edi],ecx
c0005c0f:	83 c7 08             	add    edi,0x8
c0005c12:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005c16:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005c19:	76 04                	jbe    c0005c1f <f_lseek+0x10d>
c0005c1b:	89 c5                	mov    ebp,eax
c0005c1d:	eb 8d                	jmp    c0005bac <f_lseek+0x9a>
c0005c1f:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005c22:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0005c26:	89 30                	mov    DWORD PTR [eax],esi
c0005c28:	0f 87 87 03 00 00    	ja     c0005fb5 <f_lseek+0x4a3>
c0005c2e:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0005c34:	e9 84 03 00 00       	jmp    c0005fbd <f_lseek+0x4ab>
c0005c39:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005c3c:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0005c3f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005c43:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c47:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c4b:	39 04 24             	cmp    DWORD PTR [esp],eax
c0005c4e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005c52:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0005c56:	73 0f                	jae    c0005c67 <f_lseek+0x155>
c0005c58:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005c5b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005c5f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005c63:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c67:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c6b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005c6f:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0005c72:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005c75:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005c79:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0005c7d:	0f 84 3a 03 00 00    	je     c0005fbd <f_lseek+0x4ab>
c0005c83:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005c87:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005c8b:	83 c6 ff             	add    esi,0xffffffff
c0005c8e:	89 d8                	mov    eax,ebx
c0005c90:	83 d7 ff             	adc    edi,0xffffffff
c0005c93:	89 f2                	mov    edx,esi
c0005c95:	89 f9                	mov    ecx,edi
c0005c97:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0005c9b:	89 34 24             	mov    DWORD PTR [esp],esi
c0005c9e:	e8 78 c2 ff ff       	call   c0001f1b <clmt_clust>
c0005ca3:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005ca7:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005caa:	89 c2                	mov    edx,eax
c0005cac:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005cb0:	89 c8                	mov    eax,ecx
c0005cb2:	e8 43 c2 ff ff       	call   c0001efa <clst2sect>
c0005cb7:	89 d7                	mov    edi,edx
c0005cb9:	09 c7                	or     edi,eax
c0005cbb:	0f 84 0d ff ff ff    	je     c0005bce <f_lseek+0xbc>
c0005cc1:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0005cc5:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0005ccb:	0f 84 ec 02 00 00    	je     c0005fbd <f_lseek+0x4ab>
c0005cd1:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005cd5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005cd9:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005cdc:	0f b7 69 0a          	movzx  ebp,WORD PTR [ecx+0xa]
c0005ce0:	0f ac fe 09          	shrd   esi,edi,0x9
c0005ce4:	4d                   	dec    ebp
c0005ce5:	31 ff                	xor    edi,edi
c0005ce7:	21 ee                	and    esi,ebp
c0005ce9:	01 c6                	add    esi,eax
c0005ceb:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005cee:	11 d7                	adc    edi,edx
c0005cf0:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005cf3:	39 fa                	cmp    edx,edi
c0005cf5:	75 08                	jne    c0005cff <f_lseek+0x1ed>
c0005cf7:	39 f0                	cmp    eax,esi
c0005cf9:	0f 84 be 02 00 00    	je     c0005fbd <f_lseek+0x4ab>
c0005cff:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005d02:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005d06:	0f 89 80 02 00 00    	jns    c0005f8c <f_lseek+0x47a>
c0005d0c:	83 ec 0c             	sub    esp,0xc
c0005d0f:	6a 01                	push   0x1
c0005d11:	52                   	push   edx
c0005d12:	50                   	push   eax
c0005d13:	55                   	push   ebp
c0005d14:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005d18:	e9 5a 02 00 00       	jmp    c0005f77 <f_lseek+0x465>
c0005d1d:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005d21:	80 39 04             	cmp    BYTE PTR [ecx],0x4
c0005d24:	74 16                	je     c0005d3c <f_lseek+0x22a>
c0005d26:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0005d2b:	76 0f                	jbe    c0005d3c <f_lseek+0x22a>
c0005d2d:	c7 04 24 ff ff ff ff 	mov    DWORD PTR [esp],0xffffffff
c0005d34:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005d3c:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005d3f:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005d42:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0005d45:	89 c7                	mov    edi,eax
c0005d47:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005d4b:	73 0d                	jae    c0005d5a <f_lseek+0x248>
c0005d4d:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005d51:	75 07                	jne    c0005d5a <f_lseek+0x248>
c0005d53:	89 14 24             	mov    DWORD PTR [esp],edx
c0005d56:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005d5a:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005d5d:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005d60:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005d64:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005d6b:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005d72:	0b 3c 24             	or     edi,DWORD PTR [esp]
c0005d75:	75 09                	jne    c0005d80 <f_lseek+0x26e>
c0005d77:	31 f6                	xor    esi,esi
c0005d79:	31 ff                	xor    edi,edi
c0005d7b:	e9 af 01 00 00       	jmp    c0005f2f <f_lseek+0x41d>
c0005d80:	0f b7 49 0a          	movzx  ecx,WORD PTR [ecx+0xa]
c0005d84:	89 d7                	mov    edi,edx
c0005d86:	c1 e1 09             	shl    ecx,0x9
c0005d89:	09 c7                	or     edi,eax
c0005d8b:	89 cd                	mov    ebp,ecx
c0005d8d:	74 6d                	je     c0005dfc <f_lseek+0x2ea>
c0005d8f:	83 c0 ff             	add    eax,0xffffffff
c0005d92:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005d96:	83 d2 ff             	adc    edx,0xffffffff
c0005d99:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005d9c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005da0:	83 c0 ff             	add    eax,0xffffffff
c0005da3:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005da7:	83 d2 ff             	adc    edx,0xffffffff
c0005daa:	31 ff                	xor    edi,edi
c0005dac:	57                   	push   edi
c0005dad:	51                   	push   ecx
c0005dae:	52                   	push   edx
c0005daf:	50                   	push   eax
c0005db0:	e8 e7 0c 02 00       	call   c0026a9c <__udivdi3>
c0005db5:	83 c4 10             	add    esp,0x10
c0005db8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005dbc:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0005dc0:	57                   	push   edi
c0005dc1:	55                   	push   ebp
c0005dc2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005dc6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005dca:	e8 cd 0c 02 00       	call   c0026a9c <__udivdi3>
c0005dcf:	83 c4 10             	add    esp,0x10
c0005dd2:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0005dd6:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005dda:	19 d1                	sbb    ecx,edx
c0005ddc:	72 1e                	jb     c0005dfc <f_lseek+0x2ea>
c0005dde:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005de2:	89 e9                	mov    ecx,ebp
c0005de4:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005de7:	f7 d9                	neg    ecx
c0005de9:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0005dec:	23 4c 24 08          	and    ecx,DWORD PTR [esp+0x8]
c0005df0:	29 0c 24             	sub    DWORD PTR [esp],ecx
c0005df3:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0005df6:	19 54 24 04          	sbb    DWORD PTR [esp+0x4],edx
c0005dfa:	eb 28                	jmp    c0005e24 <f_lseek+0x312>
c0005dfc:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005dff:	85 c0                	test   eax,eax
c0005e01:	75 1e                	jne    c0005e21 <f_lseek+0x30f>
c0005e03:	31 d2                	xor    edx,edx
c0005e05:	89 d8                	mov    eax,ebx
c0005e07:	e8 a9 d4 ff ff       	call   c00032b5 <create_chain>
c0005e0c:	83 f8 01             	cmp    eax,0x1
c0005e0f:	0f 84 b9 fd ff ff    	je     c0005bce <f_lseek+0xbc>
c0005e15:	83 f8 ff             	cmp    eax,0xffffffff
c0005e18:	0f 84 c6 fd ff ff    	je     c0005be4 <f_lseek+0xd2>
c0005e1e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005e21:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005e24:	85 c0                	test   eax,eax
c0005e26:	0f 84 4b ff ff ff    	je     c0005d77 <f_lseek+0x265>
c0005e2c:	89 6c 24 10          	mov    DWORD PTR [esp+0x10],ebp
c0005e30:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005e38:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c0005e3b:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005e3f:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005e42:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005e45:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005e49:	0f 83 9d 00 00 00    	jae    c0005eec <f_lseek+0x3da>
c0005e4f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005e53:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005e57:	29 34 24             	sub    DWORD PTR [esp],esi
c0005e5a:	19 7c 24 04          	sbb    DWORD PTR [esp+0x4],edi
c0005e5e:	01 f2                	add    edx,esi
c0005e60:	11 f9                	adc    ecx,edi
c0005e62:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0005e66:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005e6a:	89 4b 30             	mov    DWORD PTR [ebx+0x30],ecx
c0005e6d:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c0005e70:	8a 4b 28             	mov    cl,BYTE PTR [ebx+0x28]
c0005e73:	f6 c1 02             	test   cl,0x2
c0005e76:	74 35                	je     c0005ead <f_lseek+0x39b>
c0005e78:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0005e7c:	39 7b 0c             	cmp    DWORD PTR [ebx+0xc],edi
c0005e7f:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0005e82:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0005e86:	73 16                	jae    c0005e9e <f_lseek+0x38c>
c0005e88:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005e8c:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005e90:	88 ca                	mov    dl,cl
c0005e92:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0005e95:	83 ca 40             	or     edx,0x40
c0005e98:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0005e9b:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0005e9e:	89 c2                	mov    edx,eax
c0005ea0:	89 d8                	mov    eax,ebx
c0005ea2:	e8 0e d4 ff ff       	call   c00032b5 <create_chain>
c0005ea7:	85 c0                	test   eax,eax
c0005ea9:	75 0b                	jne    c0005eb6 <f_lseek+0x3a4>
c0005eab:	eb 30                	jmp    c0005edd <f_lseek+0x3cb>
c0005ead:	89 c2                	mov    edx,eax
c0005eaf:	89 d8                	mov    eax,ebx
c0005eb1:	e8 11 d1 ff ff       	call   c0002fc7 <get_fat>
c0005eb6:	83 f8 ff             	cmp    eax,0xffffffff
c0005eb9:	0f 84 25 fd ff ff    	je     c0005be4 <f_lseek+0xd2>
c0005ebf:	83 f8 01             	cmp    eax,0x1
c0005ec2:	0f 86 06 fd ff ff    	jbe    c0005bce <f_lseek+0xbc>
c0005ec8:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005ecc:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005ecf:	0f 86 f9 fc ff ff    	jbe    c0005bce <f_lseek+0xbc>
c0005ed5:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005ed8:	e9 5b ff ff ff       	jmp    c0005e38 <f_lseek+0x326>
c0005edd:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005ee4:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005eec:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0005eef:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0005ef3:	01 7b 2c             	add    DWORD PTR [ebx+0x2c],edi
c0005ef6:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0005ef9:	11 6b 30             	adc    DWORD PTR [ebx+0x30],ebp
c0005efc:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0005f02:	0f 84 6f fe ff ff    	je     c0005d77 <f_lseek+0x265>
c0005f08:	89 c2                	mov    edx,eax
c0005f0a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005f0e:	e8 e7 bf ff ff       	call   c0001efa <clst2sect>
c0005f13:	89 d7                	mov    edi,edx
c0005f15:	09 c7                	or     edi,eax
c0005f17:	0f 84 b1 fc ff ff    	je     c0005bce <f_lseek+0xbc>
c0005f1d:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005f21:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005f24:	0f ac fe 09          	shrd   esi,edi,0x9
c0005f28:	c1 ef 09             	shr    edi,0x9
c0005f2b:	01 c6                	add    esi,eax
c0005f2d:	11 d7                	adc    edi,edx
c0005f2f:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005f32:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005f35:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005f38:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c0005f3b:	19 d1                	sbb    ecx,edx
c0005f3d:	73 0a                	jae    c0005f49 <f_lseek+0x437>
c0005f3f:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005f42:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0005f45:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005f49:	a9 ff 01 00 00       	test   eax,0x1ff
c0005f4e:	74 6d                	je     c0005fbd <f_lseek+0x4ab>
c0005f50:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005f53:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005f56:	39 fa                	cmp    edx,edi
c0005f58:	75 04                	jne    c0005f5e <f_lseek+0x44c>
c0005f5a:	39 f0                	cmp    eax,esi
c0005f5c:	74 5f                	je     c0005fbd <f_lseek+0x4ab>
c0005f5e:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005f61:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005f65:	79 25                	jns    c0005f8c <f_lseek+0x47a>
c0005f67:	83 ec 0c             	sub    esp,0xc
c0005f6a:	6a 01                	push   0x1
c0005f6c:	52                   	push   edx
c0005f6d:	50                   	push   eax
c0005f6e:	55                   	push   ebp
c0005f6f:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005f73:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005f77:	50                   	push   eax
c0005f78:	e8 af bc ff ff       	call   c0001c2c <disk_write>
c0005f7d:	83 c4 20             	add    esp,0x20
c0005f80:	85 c0                	test   eax,eax
c0005f82:	0f 85 5c fc ff ff    	jne    c0005be4 <f_lseek+0xd2>
c0005f88:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005f8c:	83 ec 0c             	sub    esp,0xc
c0005f8f:	6a 01                	push   0x1
c0005f91:	57                   	push   edi
c0005f92:	56                   	push   esi
c0005f93:	55                   	push   ebp
c0005f94:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005f98:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005f9c:	50                   	push   eax
c0005f9d:	e8 74 bc ff ff       	call   c0001c16 <disk_read>
c0005fa2:	83 c4 20             	add    esp,0x20
c0005fa5:	85 c0                	test   eax,eax
c0005fa7:	0f 85 37 fc ff ff    	jne    c0005be4 <f_lseek+0xd2>
c0005fad:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005fb0:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005fb3:	eb 08                	jmp    c0005fbd <f_lseek+0x4ab>
c0005fb5:	c7 44 24 18 11 00 00 00 	mov    DWORD PTR [esp+0x18],0x11
c0005fbd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005fc1:	83 c4 3c             	add    esp,0x3c
c0005fc4:	5b                   	pop    ebx
c0005fc5:	5e                   	pop    esi
c0005fc6:	5f                   	pop    edi
c0005fc7:	5d                   	pop    ebp
c0005fc8:	c3                   	ret    

c0005fc9 <f_opendir>:
c0005fc9:	56                   	push   esi
c0005fca:	b8 09 00 00 00       	mov    eax,0x9
c0005fcf:	53                   	push   ebx
c0005fd0:	83 ec 24             	sub    esp,0x24
c0005fd3:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005fd7:	85 db                	test   ebx,ebx
c0005fd9:	0f 84 e6 00 00 00    	je     c00060c5 <f_opendir+0xfc>
c0005fdf:	31 c9                	xor    ecx,ecx
c0005fe1:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005fe5:	8d 44 24 34          	lea    eax,[esp+0x34]
c0005fe9:	e8 03 c7 ff ff       	call   c00026f1 <mount_volume>
c0005fee:	85 c0                	test   eax,eax
c0005ff0:	0f 85 c9 00 00 00    	jne    c00060bf <f_opendir+0xf6>
c0005ff6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005ffa:	83 ec 0c             	sub    esp,0xc
c0005ffd:	89 03                	mov    DWORD PTR [ebx],eax
c0005fff:	68 60 04 00 00       	push   0x460
c0006004:	e8 8b 24 00 00       	call   c0008494 <ff_memalloc>
c0006009:	83 c4 10             	add    esp,0x10
c000600c:	89 c6                	mov    esi,eax
c000600e:	b8 11 00 00 00       	mov    eax,0x11
c0006013:	85 f6                	test   esi,esi
c0006015:	0f 84 aa 00 00 00    	je     c00060c5 <f_opendir+0xfc>
c000601b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000601f:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006025:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006028:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000602b:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000602f:	89 d8                	mov    eax,ebx
c0006031:	e8 31 ee ff ff       	call   c0004e67 <follow_path>
c0006036:	85 c0                	test   eax,eax
c0006038:	75 61                	jne    c000609b <f_opendir+0xd2>
c000603a:	80 7b 47 00          	cmp    BYTE PTR [ebx+0x47],0x0
c000603e:	78 46                	js     c0006086 <f_opendir+0xbd>
c0006040:	b8 05 00 00 00       	mov    eax,0x5
c0006045:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0006049:	74 50                	je     c000609b <f_opendir+0xd2>
c000604b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000604f:	8a 01                	mov    al,BYTE PTR [ecx]
c0006051:	3c 04                	cmp    al,0x4
c0006053:	75 26                	jne    c000607b <f_opendir+0xb2>
c0006055:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0006058:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000605b:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000605e:	30 d2                	xor    dl,dl
c0006060:	0f b6 43 07          	movzx  eax,BYTE PTR [ebx+0x7]
c0006064:	09 c2                	or     edx,eax
c0006066:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0006069:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c000606c:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000606f:	89 da                	mov    edx,ebx
c0006071:	8d 41 10             	lea    eax,[ecx+0x10]
c0006074:	e8 b4 ed ff ff       	call   c0004e2d <init_alloc_info.isra.2>
c0006079:	eb 0b                	jmp    c0006086 <f_opendir+0xbd>
c000607b:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c000607e:	e8 59 ed ff ff       	call   c0004ddc <ld_clust.isra.0>
c0006083:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0006086:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000608a:	31 d2                	xor    edx,edx
c000608c:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0006090:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0006094:	89 d8                	mov    eax,ebx
c0006096:	e8 22 d1 ff ff       	call   c00031bd <dir_sdi>
c000609b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000609f:	83 ec 0c             	sub    esp,0xc
c00060a2:	56                   	push   esi
c00060a3:	e8 02 24 00 00       	call   c00084aa <ff_memfree>
c00060a8:	83 c4 10             	add    esp,0x10
c00060ab:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00060af:	83 f8 04             	cmp    eax,0x4
c00060b2:	74 06                	je     c00060ba <f_opendir+0xf1>
c00060b4:	85 c0                	test   eax,eax
c00060b6:	74 0d                	je     c00060c5 <f_opendir+0xfc>
c00060b8:	eb 05                	jmp    c00060bf <f_opendir+0xf6>
c00060ba:	b8 05 00 00 00       	mov    eax,0x5
c00060bf:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00060c5:	83 c4 24             	add    esp,0x24
c00060c8:	5b                   	pop    ebx
c00060c9:	5e                   	pop    esi
c00060ca:	c3                   	ret    

c00060cb <f_closedir>:
c00060cb:	53                   	push   ebx
c00060cc:	83 ec 18             	sub    esp,0x18
c00060cf:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00060d3:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00060d7:	89 d8                	mov    eax,ebx
c00060d9:	e8 86 c2 ff ff       	call   c0002364 <validate>
c00060de:	85 c0                	test   eax,eax
c00060e0:	75 06                	jne    c00060e8 <f_closedir+0x1d>
c00060e2:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00060e8:	83 c4 18             	add    esp,0x18
c00060eb:	5b                   	pop    ebx
c00060ec:	c3                   	ret    

c00060ed <f_readdir>:
c00060ed:	57                   	push   edi
c00060ee:	56                   	push   esi
c00060ef:	53                   	push   ebx
c00060f0:	83 ec 20             	sub    esp,0x20
c00060f3:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00060f7:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00060fb:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00060ff:	89 d8                	mov    eax,ebx
c0006101:	e8 5e c2 ff ff       	call   c0002364 <validate>
c0006106:	85 c0                	test   eax,eax
c0006108:	75 77                	jne    c0006181 <f_readdir+0x94>
c000610a:	85 ff                	test   edi,edi
c000610c:	75 0b                	jne    c0006119 <f_readdir+0x2c>
c000610e:	31 d2                	xor    edx,edx
c0006110:	89 d8                	mov    eax,ebx
c0006112:	e8 a6 d0 ff ff       	call   c00031bd <dir_sdi>
c0006117:	eb 68                	jmp    c0006181 <f_readdir+0x94>
c0006119:	83 ec 0c             	sub    esp,0xc
c000611c:	68 60 04 00 00       	push   0x460
c0006121:	e8 6e 23 00 00       	call   c0008494 <ff_memalloc>
c0006126:	83 c4 10             	add    esp,0x10
c0006129:	89 c6                	mov    esi,eax
c000612b:	b8 11 00 00 00       	mov    eax,0x11
c0006130:	85 f6                	test   esi,esi
c0006132:	74 4d                	je     c0006181 <f_readdir+0x94>
c0006134:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006138:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c000613e:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006141:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006144:	31 d2                	xor    edx,edx
c0006146:	89 d8                	mov    eax,ebx
c0006148:	e8 80 d8 ff ff       	call   c00039cd <dir_read>
c000614d:	a9 fb ff ff ff       	test   eax,0xfffffffb
c0006152:	75 19                	jne    c000616d <f_readdir+0x80>
c0006154:	89 fa                	mov    edx,edi
c0006156:	89 d8                	mov    eax,ebx
c0006158:	e8 7e ea ff ff       	call   c0004bdb <get_fileinfo>
c000615d:	31 d2                	xor    edx,edx
c000615f:	89 d8                	mov    eax,ebx
c0006161:	e8 af d5 ff ff       	call   c0003715 <dir_next>
c0006166:	83 f8 04             	cmp    eax,0x4
c0006169:	75 02                	jne    c000616d <f_readdir+0x80>
c000616b:	31 c0                	xor    eax,eax
c000616d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006171:	83 ec 0c             	sub    esp,0xc
c0006174:	56                   	push   esi
c0006175:	e8 30 23 00 00       	call   c00084aa <ff_memfree>
c000617a:	83 c4 10             	add    esp,0x10
c000617d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006181:	83 c4 20             	add    esp,0x20
c0006184:	5b                   	pop    ebx
c0006185:	5e                   	pop    esi
c0006186:	5f                   	pop    edi
c0006187:	c3                   	ret    

c0006188 <f_stat>:
c0006188:	57                   	push   edi
c0006189:	31 c9                	xor    ecx,ecx
c000618b:	56                   	push   esi
c000618c:	53                   	push   ebx
c000618d:	83 ec 50             	sub    esp,0x50
c0006190:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c0006194:	8d 54 24 04          	lea    edx,[esp+0x4]
c0006198:	8d 44 24 60          	lea    eax,[esp+0x60]
c000619c:	e8 50 c5 ff ff       	call   c00026f1 <mount_volume>
c00061a1:	89 c3                	mov    ebx,eax
c00061a3:	85 c0                	test   eax,eax
c00061a5:	75 67                	jne    c000620e <f_stat+0x86>
c00061a7:	83 ec 0c             	sub    esp,0xc
c00061aa:	bb 11 00 00 00       	mov    ebx,0x11
c00061af:	68 60 04 00 00       	push   0x460
c00061b4:	e8 db 22 00 00       	call   c0008494 <ff_memalloc>
c00061b9:	83 c4 10             	add    esp,0x10
c00061bc:	89 c6                	mov    esi,eax
c00061be:	85 c0                	test   eax,eax
c00061c0:	74 4c                	je     c000620e <f_stat+0x86>
c00061c2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00061c6:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c00061cc:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00061cf:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00061d2:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c00061d6:	8d 44 24 04          	lea    eax,[esp+0x4]
c00061da:	e8 88 ec ff ff       	call   c0004e67 <follow_path>
c00061df:	89 c3                	mov    ebx,eax
c00061e1:	85 c0                	test   eax,eax
c00061e3:	75 1d                	jne    c0006202 <f_stat+0x7a>
c00061e5:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c00061ea:	78 11                	js     c00061fd <f_stat+0x75>
c00061ec:	85 ff                	test   edi,edi
c00061ee:	74 12                	je     c0006202 <f_stat+0x7a>
c00061f0:	89 fa                	mov    edx,edi
c00061f2:	8d 44 24 04          	lea    eax,[esp+0x4]
c00061f6:	e8 e0 e9 ff ff       	call   c0004bdb <get_fileinfo>
c00061fb:	eb 05                	jmp    c0006202 <f_stat+0x7a>
c00061fd:	bb 06 00 00 00       	mov    ebx,0x6
c0006202:	83 ec 0c             	sub    esp,0xc
c0006205:	56                   	push   esi
c0006206:	e8 9f 22 00 00       	call   c00084aa <ff_memfree>
c000620b:	83 c4 10             	add    esp,0x10
c000620e:	83 c4 50             	add    esp,0x50
c0006211:	89 d8                	mov    eax,ebx
c0006213:	5b                   	pop    ebx
c0006214:	5e                   	pop    esi
c0006215:	5f                   	pop    edi
c0006216:	c3                   	ret    

c0006217 <f_getfree>:
c0006217:	55                   	push   ebp
c0006218:	31 c9                	xor    ecx,ecx
c000621a:	57                   	push   edi
c000621b:	56                   	push   esi
c000621c:	53                   	push   ebx
c000621d:	83 ec 5c             	sub    esp,0x5c
c0006220:	8d 54 24 24          	lea    edx,[esp+0x24]
c0006224:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006228:	e8 c4 c4 ff ff       	call   c00026f1 <mount_volume>
c000622d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006231:	85 c0                	test   eax,eax
c0006233:	0f 85 9d 01 00 00    	jne    c00063d6 <f_getfree+0x1bf>
c0006239:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000623d:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0006241:	89 02                	mov    DWORD PTR [edx],eax
c0006243:	8b 48 1c             	mov    ecx,DWORD PTR [eax+0x1c]
c0006246:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0006249:	8d 71 fe             	lea    esi,[ecx-0x2]
c000624c:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0006250:	39 f2                	cmp    edx,esi
c0006252:	77 0b                	ja     c000625f <f_getfree+0x48>
c0006254:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0006258:	89 10                	mov    DWORD PTR [eax],edx
c000625a:	e9 77 01 00 00       	jmp    c00063d6 <f_getfree+0x1bf>
c000625f:	8a 10                	mov    dl,BYTE PTR [eax]
c0006261:	80 fa 01             	cmp    dl,0x1
c0006264:	75 3a                	jne    c00062a0 <f_getfree+0x89>
c0006266:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000626a:	be 02 00 00 00       	mov    esi,0x2
c000626f:	31 db                	xor    ebx,ebx
c0006271:	89 f2                	mov    edx,esi
c0006273:	8d 44 24 28          	lea    eax,[esp+0x28]
c0006277:	e8 4b cd ff ff       	call   c0002fc7 <get_fat>
c000627c:	83 f8 ff             	cmp    eax,0xffffffff
c000627f:	0f 84 28 01 00 00    	je     c00063ad <f_getfree+0x196>
c0006285:	83 f8 01             	cmp    eax,0x1
c0006288:	0f 84 29 01 00 00    	je     c00063b7 <f_getfree+0x1a0>
c000628e:	83 d3 00             	adc    ebx,0x0
c0006291:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006295:	46                   	inc    esi
c0006296:	39 70 1c             	cmp    DWORD PTR [eax+0x1c],esi
c0006299:	77 d6                	ja     c0006271 <f_getfree+0x5a>
c000629b:	e9 25 01 00 00       	jmp    c00063c5 <f_getfree+0x1ae>
c00062a0:	80 fa 04             	cmp    dl,0x4
c00062a3:	0f 85 88 00 00 00    	jne    c0006331 <f_getfree+0x11a>
c00062a9:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c00062ac:	31 ed                	xor    ebp,ebp
c00062ae:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c00062b1:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00062b5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00062b9:	31 db                	xor    ebx,ebx
c00062bb:	85 ed                	test   ebp,ebp
c00062bd:	75 3f                	jne    c00062fe <f_getfree+0xe7>
c00062bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00062c3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00062c7:	83 c0 01             	add    eax,0x1
c00062ca:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00062ce:	83 d2 00             	adc    edx,0x0
c00062d1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00062d5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00062d9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00062dd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00062e1:	e8 59 c1 ff ff       	call   c000243f <move_window>
c00062e6:	85 c0                	test   eax,eax
c00062e8:	0f 85 d3 00 00 00    	jne    c00063c1 <f_getfree+0x1aa>
c00062ee:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00062f2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00062f6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00062fa:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00062fe:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006302:	8d 4e f8             	lea    ecx,[esi-0x8]
c0006305:	8a 44 28 54          	mov    al,BYTE PTR [eax+ebp*1+0x54]
c0006309:	89 cf                	mov    edi,ecx
c000630b:	85 f6                	test   esi,esi
c000630d:	74 12                	je     c0006321 <f_getfree+0x10a>
c000630f:	88 c1                	mov    cl,al
c0006311:	83 e1 01             	and    ecx,0x1
c0006314:	80 f9 01             	cmp    cl,0x1
c0006317:	83 d3 00             	adc    ebx,0x0
c000631a:	d0 e8                	shr    al,1
c000631c:	4e                   	dec    esi
c000631d:	39 fe                	cmp    esi,edi
c000631f:	75 ea                	jne    c000630b <f_getfree+0xf4>
c0006321:	45                   	inc    ebp
c0006322:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0006328:	85 f6                	test   esi,esi
c000632a:	75 8f                	jne    c00062bb <f_getfree+0xa4>
c000632c:	e9 94 00 00 00       	jmp    c00063c5 <f_getfree+0x1ae>
c0006331:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0006334:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c0006337:	31 f6                	xor    esi,esi
c0006339:	31 db                	xor    ebx,ebx
c000633b:	85 f6                	test   esi,esi
c000633d:	75 1b                	jne    c000635a <f_getfree+0x143>
c000633f:	89 d7                	mov    edi,edx
c0006341:	89 cd                	mov    ebp,ecx
c0006343:	83 c7 01             	add    edi,0x1
c0006346:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000634a:	83 d5 00             	adc    ebp,0x0
c000634d:	e8 ed c0 ff ff       	call   c000243f <move_window>
c0006352:	85 c0                	test   eax,eax
c0006354:	75 6b                	jne    c00063c1 <f_getfree+0x1aa>
c0006356:	89 fa                	mov    edx,edi
c0006358:	89 e9                	mov    ecx,ebp
c000635a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000635e:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0006362:	8d 44 30 54          	lea    eax,[eax+esi*1+0x54]
c0006366:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0006369:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000636d:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0006371:	75 11                	jne    c0006384 <f_getfree+0x16d>
c0006373:	e8 e9 b8 ff ff       	call   c0001c61 <ld_word>
c0006378:	66 83 f8 01          	cmp    ax,0x1
c000637c:	83 d3 00             	adc    ebx,0x0
c000637f:	83 c6 02             	add    esi,0x2
c0006382:	eb 13                	jmp    c0006397 <f_getfree+0x180>
c0006384:	e8 e5 b8 ff ff       	call   c0001c6e <ld_dword>
c0006389:	25 ff ff ff 0f       	and    eax,0xfffffff
c000638e:	83 f8 01             	cmp    eax,0x1
c0006391:	83 d3 00             	adc    ebx,0x0
c0006394:	83 c6 04             	add    esi,0x4
c0006397:	81 e6 ff 01 00 00    	and    esi,0x1ff
c000639d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00063a1:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00063a5:	ff 4c 24 10          	dec    DWORD PTR [esp+0x10]
c00063a9:	75 90                	jne    c000633b <f_getfree+0x124>
c00063ab:	eb 18                	jmp    c00063c5 <f_getfree+0x1ae>
c00063ad:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c00063b5:	eb 0e                	jmp    c00063c5 <f_getfree+0x1ae>
c00063b7:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c00063bf:	eb 04                	jmp    c00063c5 <f_getfree+0x1ae>
c00063c1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00063c5:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c00063c9:	89 18                	mov    DWORD PTR [eax],ebx
c00063cb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00063cf:	89 58 18             	mov    DWORD PTR [eax+0x18],ebx
c00063d2:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c00063d6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00063da:	83 c4 5c             	add    esp,0x5c
c00063dd:	5b                   	pop    ebx
c00063de:	5e                   	pop    esi
c00063df:	5f                   	pop    edi
c00063e0:	5d                   	pop    ebp
c00063e1:	c3                   	ret    

c00063e2 <f_truncate>:
c00063e2:	56                   	push   esi
c00063e3:	53                   	push   ebx
c00063e4:	83 ec 14             	sub    esp,0x14
c00063e7:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00063eb:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00063ef:	89 d8                	mov    eax,ebx
c00063f1:	e8 6e bf ff ff       	call   c0002364 <validate>
c00063f6:	89 c6                	mov    esi,eax
c00063f8:	85 c0                	test   eax,eax
c00063fa:	0f 85 d2 00 00 00    	jne    c00064d2 <f_truncate+0xf0>
c0006400:	0f b6 73 29          	movzx  esi,BYTE PTR [ebx+0x29]
c0006404:	85 f6                	test   esi,esi
c0006406:	0f 85 c6 00 00 00    	jne    c00064d2 <f_truncate+0xf0>
c000640c:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0006410:	0f 84 b7 00 00 00    	je     c00064cd <f_truncate+0xeb>
c0006416:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0006419:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000641c:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c000641f:	89 d1                	mov    ecx,edx
c0006421:	1b 4b 10             	sbb    ecx,DWORD PTR [ebx+0x10]
c0006424:	0f 83 a8 00 00 00    	jae    c00064d2 <f_truncate+0xf0>
c000642a:	09 c2                	or     edx,eax
c000642c:	75 15                	jne    c0006443 <f_truncate+0x61>
c000642e:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0006431:	31 c9                	xor    ecx,ecx
c0006433:	89 d8                	mov    eax,ebx
c0006435:	e8 7a d0 ff ff       	call   c00034b4 <remove_chain>
c000643a:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0006441:	eb 35                	jmp    c0006478 <f_truncate+0x96>
c0006443:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0006446:	89 d8                	mov    eax,ebx
c0006448:	e8 7a cb ff ff       	call   c0002fc7 <get_fat>
c000644d:	89 c2                	mov    edx,eax
c000644f:	b8 01 00 00 00       	mov    eax,0x1
c0006454:	83 fa ff             	cmp    edx,0xffffffff
c0006457:	74 1f                	je     c0006478 <f_truncate+0x96>
c0006459:	b8 02 00 00 00       	mov    eax,0x2
c000645e:	83 fa 01             	cmp    edx,0x1
c0006461:	74 15                	je     c0006478 <f_truncate+0x96>
c0006463:	31 c0                	xor    eax,eax
c0006465:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006469:	39 51 1c             	cmp    DWORD PTR [ecx+0x1c],edx
c000646c:	76 0a                	jbe    c0006478 <f_truncate+0x96>
c000646e:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0006471:	89 d8                	mov    eax,ebx
c0006473:	e8 3c d0 ff ff       	call   c00034b4 <remove_chain>
c0006478:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000647b:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c000647e:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0006481:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c0006484:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c0006487:	83 ca 40             	or     edx,0x40
c000648a:	85 c0                	test   eax,eax
c000648c:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c000648f:	75 35                	jne    c00064c6 <f_truncate+0xe4>
c0006491:	84 d2                	test   dl,dl
c0006493:	79 3d                	jns    c00064d2 <f_truncate+0xf0>
c0006495:	83 ec 0c             	sub    esp,0xc
c0006498:	8d 43 50             	lea    eax,[ebx+0x50]
c000649b:	6a 01                	push   0x1
c000649d:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c00064a0:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00064a3:	50                   	push   eax
c00064a4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00064a8:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00064ac:	50                   	push   eax
c00064ad:	e8 7a b7 ff ff       	call   c0001c2c <disk_write>
c00064b2:	83 c4 20             	add    esp,0x20
c00064b5:	85 c0                	test   eax,eax
c00064b7:	75 08                	jne    c00064c1 <f_truncate+0xdf>
c00064b9:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00064bd:	31 f6                	xor    esi,esi
c00064bf:	eb 11                	jmp    c00064d2 <f_truncate+0xf0>
c00064c1:	b8 01 00 00 00       	mov    eax,0x1
c00064c6:	88 43 29             	mov    BYTE PTR [ebx+0x29],al
c00064c9:	89 c6                	mov    esi,eax
c00064cb:	eb 05                	jmp    c00064d2 <f_truncate+0xf0>
c00064cd:	be 07 00 00 00       	mov    esi,0x7
c00064d2:	89 f0                	mov    eax,esi
c00064d4:	83 c4 14             	add    esp,0x14
c00064d7:	5b                   	pop    ebx
c00064d8:	5e                   	pop    esi
c00064d9:	c3                   	ret    

c00064da <f_unlink>:
c00064da:	56                   	push   esi
c00064db:	b9 02 00 00 00       	mov    ecx,0x2
c00064e0:	53                   	push   ebx
c00064e1:	81 ec e4 00 00 00    	sub    esp,0xe4
c00064e7:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00064eb:	8d 84 24 f0 00 00 00 	lea    eax,[esp+0xf0]
c00064f2:	e8 fa c1 ff ff       	call   c00026f1 <mount_volume>
c00064f7:	85 c0                	test   eax,eax
c00064f9:	0f 85 55 01 00 00    	jne    c0006654 <f_unlink+0x17a>
c00064ff:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006503:	83 ec 0c             	sub    esp,0xc
c0006506:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000650a:	68 60 04 00 00       	push   0x460
c000650f:	e8 80 1f 00 00       	call   c0008494 <ff_memalloc>
c0006514:	83 c4 10             	add    esp,0x10
c0006517:	89 c3                	mov    ebx,eax
c0006519:	b8 11 00 00 00       	mov    eax,0x11
c000651e:	85 db                	test   ebx,ebx
c0006520:	0f 84 2e 01 00 00    	je     c0006654 <f_unlink+0x17a>
c0006526:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000652a:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006530:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006533:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006536:	8b 94 24 f0 00 00 00 	mov    edx,DWORD PTR [esp+0xf0]
c000653d:	8d 44 24 48          	lea    eax,[esp+0x48]
c0006541:	e8 21 e9 ff ff       	call   c0004e67 <follow_path>
c0006546:	85 c0                	test   eax,eax
c0006548:	0f 85 f2 00 00 00    	jne    c0006640 <f_unlink+0x166>
c000654e:	b8 06 00 00 00       	mov    eax,0x6
c0006553:	80 bc 24 8f 00 00 00 00 	cmp    BYTE PTR [esp+0x8f],0x0
c000655b:	0f 88 df 00 00 00    	js     c0006640 <f_unlink+0x166>
c0006561:	f6 44 24 4e 01       	test   BYTE PTR [esp+0x4e],0x1
c0006566:	74 0a                	je     c0006572 <f_unlink+0x98>
c0006568:	b8 07 00 00 00       	mov    eax,0x7
c000656d:	e9 ce 00 00 00       	jmp    c0006640 <f_unlink+0x166>
c0006572:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006576:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000657a:	8a 02                	mov    al,BYTE PTR [edx]
c000657c:	3c 04                	cmp    al,0x4
c000657e:	75 12                	jne    c0006592 <f_unlink+0xb8>
c0006580:	8d 42 10             	lea    eax,[edx+0x10]
c0006583:	8d 54 24 20          	lea    edx,[esp+0x20]
c0006587:	e8 a1 e8 ff ff       	call   c0004e2d <init_alloc_info.isra.2>
c000658c:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0006590:	eb 0e                	jmp    c00065a0 <f_unlink+0xc6>
c0006592:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c0006599:	e8 3e e8 ff ff       	call   c0004ddc <ld_clust.isra.0>
c000659e:	89 c6                	mov    esi,eax
c00065a0:	f6 44 24 4e 10       	test   BYTE PTR [esp+0x4e],0x10
c00065a5:	75 12                	jne    c00065b9 <f_unlink+0xdf>
c00065a7:	8d 44 24 48          	lea    eax,[esp+0x48]
c00065ab:	e8 94 d6 ff ff       	call   c0003c44 <dir_remove>
c00065b0:	85 c0                	test   eax,eax
c00065b2:	74 6c                	je     c0006620 <f_unlink+0x146>
c00065b4:	e9 87 00 00 00       	jmp    c0006640 <f_unlink+0x166>
c00065b9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00065bd:	89 b4 24 9c 00 00 00 	mov    DWORD PTR [esp+0x9c],esi
c00065c4:	89 84 24 94 00 00 00 	mov    DWORD PTR [esp+0x94],eax
c00065cb:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00065ce:	75 21                	jne    c00065f1 <f_unlink+0x117>
c00065d0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00065d4:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00065d8:	89 84 24 a0 00 00 00 	mov    DWORD PTR [esp+0xa0],eax
c00065df:	89 94 24 a4 00 00 00 	mov    DWORD PTR [esp+0xa4],edx
c00065e6:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c00065ea:	88 84 24 9b 00 00 00 	mov    BYTE PTR [esp+0x9b],al
c00065f1:	31 d2                	xor    edx,edx
c00065f3:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c00065fa:	e8 be cb ff ff       	call   c00031bd <dir_sdi>
c00065ff:	85 c0                	test   eax,eax
c0006601:	75 3d                	jne    c0006640 <f_unlink+0x166>
c0006603:	31 d2                	xor    edx,edx
c0006605:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c000660c:	e8 bc d3 ff ff       	call   c00039cd <dir_read>
c0006611:	85 c0                	test   eax,eax
c0006613:	0f 84 4f ff ff ff    	je     c0006568 <f_unlink+0x8e>
c0006619:	83 f8 04             	cmp    eax,0x4
c000661c:	75 22                	jne    c0006640 <f_unlink+0x166>
c000661e:	eb 87                	jmp    c00065a7 <f_unlink+0xcd>
c0006620:	85 f6                	test   esi,esi
c0006622:	75 0b                	jne    c000662f <f_unlink+0x155>
c0006624:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006628:	e8 3d df ff ff       	call   c000456a <sync_fs>
c000662d:	eb 11                	jmp    c0006640 <f_unlink+0x166>
c000662f:	31 c9                	xor    ecx,ecx
c0006631:	89 f2                	mov    edx,esi
c0006633:	8d 44 24 20          	lea    eax,[esp+0x20]
c0006637:	e8 78 ce ff ff       	call   c00034b4 <remove_chain>
c000663c:	85 c0                	test   eax,eax
c000663e:	74 e4                	je     c0006624 <f_unlink+0x14a>
c0006640:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006644:	83 ec 0c             	sub    esp,0xc
c0006647:	53                   	push   ebx
c0006648:	e8 5d 1e 00 00       	call   c00084aa <ff_memfree>
c000664d:	83 c4 10             	add    esp,0x10
c0006650:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006654:	81 c4 e4 00 00 00    	add    esp,0xe4
c000665a:	5b                   	pop    ebx
c000665b:	5e                   	pop    esi
c000665c:	c3                   	ret    

c000665d <f_mkdir>:
c000665d:	57                   	push   edi
c000665e:	b9 02 00 00 00       	mov    ecx,0x2
c0006663:	56                   	push   esi
c0006664:	53                   	push   ebx
c0006665:	83 c4 80             	add    esp,0xffffff80
c0006668:	8d 54 24 08          	lea    edx,[esp+0x8]
c000666c:	8d 84 24 90 00 00 00 	lea    eax,[esp+0x90]
c0006673:	e8 79 c0 ff ff       	call   c00026f1 <mount_volume>
c0006678:	89 c3                	mov    ebx,eax
c000667a:	85 c0                	test   eax,eax
c000667c:	0f 85 fe 01 00 00    	jne    c0006880 <f_mkdir+0x223>
c0006682:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006686:	bb 11 00 00 00       	mov    ebx,0x11
c000668b:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000668f:	83 ec 0c             	sub    esp,0xc
c0006692:	68 60 04 00 00       	push   0x460
c0006697:	e8 f8 1d 00 00       	call   c0008494 <ff_memalloc>
c000669c:	83 c4 10             	add    esp,0x10
c000669f:	89 c7                	mov    edi,eax
c00066a1:	85 c0                	test   eax,eax
c00066a3:	0f 84 d7 01 00 00    	je     c0006880 <f_mkdir+0x223>
c00066a9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066ad:	8d 97 00 02 00 00    	lea    edx,[edi+0x200]
c00066b3:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c00066b6:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00066b9:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c00066c0:	8d 44 24 34          	lea    eax,[esp+0x34]
c00066c4:	e8 9e e7 ff ff       	call   c0004e67 <follow_path>
c00066c9:	89 c3                	mov    ebx,eax
c00066cb:	85 c0                	test   eax,eax
c00066cd:	74 3e                	je     c000670d <f_mkdir+0xb0>
c00066cf:	83 f8 04             	cmp    eax,0x4
c00066d2:	75 3e                	jne    c0006712 <f_mkdir+0xb5>
c00066d4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066d8:	31 d2                	xor    edx,edx
c00066da:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00066de:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00066e2:	e8 ce cb ff ff       	call   c00032b5 <create_chain>
c00066e7:	89 c6                	mov    esi,eax
c00066e9:	85 c0                	test   eax,eax
c00066eb:	74 0c                	je     c00066f9 <f_mkdir+0x9c>
c00066ed:	bb 02 00 00 00       	mov    ebx,0x2
c00066f2:	83 f8 01             	cmp    eax,0x1
c00066f5:	74 07                	je     c00066fe <f_mkdir+0xa1>
c00066f7:	eb 2a                	jmp    c0006723 <f_mkdir+0xc6>
c00066f9:	bb 07 00 00 00       	mov    ebx,0x7
c00066fe:	31 c9                	xor    ecx,ecx
c0006700:	89 f2                	mov    edx,esi
c0006702:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0006706:	e8 a9 cd ff ff       	call   c00034b4 <remove_chain>
c000670b:	eb 05                	jmp    c0006712 <f_mkdir+0xb5>
c000670d:	bb 08 00 00 00       	mov    ebx,0x8
c0006712:	83 ec 0c             	sub    esp,0xc
c0006715:	57                   	push   edi
c0006716:	e8 8f 1d 00 00       	call   c00084aa <ff_memfree>
c000671b:	83 c4 10             	add    esp,0x10
c000671e:	e9 5d 01 00 00       	jmp    c0006880 <f_mkdir+0x223>
c0006723:	bb 01 00 00 00       	mov    ebx,0x1
c0006728:	83 f8 ff             	cmp    eax,0xffffffff
c000672b:	74 d1                	je     c00066fe <f_mkdir+0xa1>
c000672d:	89 f2                	mov    edx,esi
c000672f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006733:	e8 c4 ce ff ff       	call   c00035fc <dir_clear>
c0006738:	89 c3                	mov    ebx,eax
c000673a:	85 c0                	test   eax,eax
c000673c:	75 c0                	jne    c00066fe <f_mkdir+0xa1>
c000673e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006742:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006745:	74 69                	je     c00067b0 <f_mkdir+0x153>
c0006747:	b9 0b 00 00 00       	mov    ecx,0xb
c000674c:	83 c0 54             	add    eax,0x54
c000674f:	ba 20 00 00 00       	mov    edx,0x20
c0006754:	e8 9c b5 ff ff       	call   c0001cf5 <mem_set>
c0006759:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000675d:	ba 00 00 21 50       	mov    edx,0x50210000
c0006762:	c6 40 54 2e          	mov    BYTE PTR [eax+0x54],0x2e
c0006766:	c6 40 5f 10          	mov    BYTE PTR [eax+0x5f],0x10
c000676a:	83 c0 6a             	add    eax,0x6a
c000676d:	e8 65 b5 ff ff       	call   c0001cd7 <st_dword>
c0006772:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006776:	89 f1                	mov    ecx,esi
c0006778:	8d 50 54             	lea    edx,[eax+0x54]
c000677b:	e8 85 e6 ff ff       	call   c0004e05 <st_clust.isra.1>
c0006780:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006784:	b9 20 00 00 00       	mov    ecx,0x20
c0006789:	8d 50 54             	lea    edx,[eax+0x54]
c000678c:	83 c0 74             	add    eax,0x74
c000678f:	e8 4c b5 ff ff       	call   c0001ce0 <mem_cpy>
c0006794:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006798:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c000679c:	c6 40 75 2e          	mov    BYTE PTR [eax+0x75],0x2e
c00067a0:	8d 50 74             	lea    edx,[eax+0x74]
c00067a3:	e8 5d e6 ff ff       	call   c0004e05 <st_clust.isra.1>
c00067a8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067ac:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00067b0:	8d 44 24 34          	lea    eax,[esp+0x34]
c00067b4:	e8 2f db ff ff       	call   c00042e8 <dir_register>
c00067b9:	89 c3                	mov    ebx,eax
c00067bb:	85 c0                	test   eax,eax
c00067bd:	0f 85 3b ff ff ff    	jne    c00066fe <f_mkdir+0xa1>
c00067c3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067c7:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00067ca:	75 74                	jne    c0006840 <f_mkdir+0x1e3>
c00067cc:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067cf:	ba 00 00 21 50       	mov    edx,0x50210000
c00067d4:	83 c0 0c             	add    eax,0xc
c00067d7:	e8 fb b4 ff ff       	call   c0001cd7 <st_dword>
c00067dc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067e0:	89 f2                	mov    edx,esi
c00067e2:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067e5:	83 c0 34             	add    eax,0x34
c00067e8:	e8 ea b4 ff ff       	call   c0001cd7 <st_dword>
c00067ed:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067f1:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00067f5:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067f8:	c1 e2 09             	shl    edx,0x9
c00067fb:	83 c0 38             	add    eax,0x38
c00067fe:	e8 d4 b4 ff ff       	call   c0001cd7 <st_dword>
c0006803:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006807:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c000680b:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000680e:	c1 e2 09             	shl    edx,0x9
c0006811:	83 c0 28             	add    eax,0x28
c0006814:	e8 be b4 ff ff       	call   c0001cd7 <st_dword>
c0006819:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000681d:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006820:	c6 42 21 03          	mov    BYTE PTR [edx+0x21],0x3
c0006824:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006827:	c6 40 04 10          	mov    BYTE PTR [eax+0x4],0x10
c000682b:	8d 44 24 34          	lea    eax,[esp+0x34]
c000682f:	e8 8b d3 ff ff       	call   c0003bbf <store_xdir>
c0006834:	89 c3                	mov    ebx,eax
c0006836:	85 c0                	test   eax,eax
c0006838:	0f 85 d4 fe ff ff    	jne    c0006712 <f_mkdir+0xb5>
c000683e:	eb 30                	jmp    c0006870 <f_mkdir+0x213>
c0006840:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0006844:	ba 00 00 21 50       	mov    edx,0x50210000
c0006849:	83 c0 16             	add    eax,0x16
c000684c:	e8 86 b4 ff ff       	call   c0001cd7 <st_dword>
c0006851:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006855:	89 f1                	mov    ecx,esi
c0006857:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c000685b:	e8 a5 e5 ff ff       	call   c0004e05 <st_clust.isra.1>
c0006860:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0006864:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0006868:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000686c:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006870:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006874:	e8 f1 dc ff ff       	call   c000456a <sync_fs>
c0006879:	89 c3                	mov    ebx,eax
c000687b:	e9 92 fe ff ff       	jmp    c0006712 <f_mkdir+0xb5>
c0006880:	83 ec 80             	sub    esp,0xffffff80
c0006883:	89 d8                	mov    eax,ebx
c0006885:	5b                   	pop    ebx
c0006886:	5e                   	pop    esi
c0006887:	5f                   	pop    edi
c0006888:	c3                   	ret    

c0006889 <f_rename>:
c0006889:	55                   	push   ebp
c000688a:	57                   	push   edi
c000688b:	56                   	push   esi
c000688c:	53                   	push   ebx
c000688d:	81 ec fc 00 00 00    	sub    esp,0xfc
c0006893:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c000689a:	e8 a4 b9 ff ff       	call   c0002243 <get_ldnumber>
c000689f:	b9 02 00 00 00       	mov    ecx,0x2
c00068a4:	8d 54 24 14          	lea    edx,[esp+0x14]
c00068a8:	8d 84 24 10 01 00 00 	lea    eax,[esp+0x110]
c00068af:	e8 3d be ff ff       	call   c00026f1 <mount_volume>
c00068b4:	85 c0                	test   eax,eax
c00068b6:	0f 85 b5 02 00 00    	jne    c0006b71 <f_rename+0x2e8>
c00068bc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068c0:	83 ec 0c             	sub    esp,0xc
c00068c3:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c00068c7:	68 60 04 00 00       	push   0x460
c00068cc:	e8 c3 1b 00 00       	call   c0008494 <ff_memalloc>
c00068d1:	83 c4 10             	add    esp,0x10
c00068d4:	89 c3                	mov    ebx,eax
c00068d6:	b8 11 00 00 00       	mov    eax,0x11
c00068db:	85 db                	test   ebx,ebx
c00068dd:	0f 84 8e 02 00 00    	je     c0006b71 <f_rename+0x2e8>
c00068e3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068e7:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c00068ed:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00068f0:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00068f3:	8b 94 24 10 01 00 00 	mov    edx,DWORD PTR [esp+0x110]
c00068fa:	8d 44 24 58          	lea    eax,[esp+0x58]
c00068fe:	e8 64 e5 ff ff       	call   c0004e67 <follow_path>
c0006903:	85 c0                	test   eax,eax
c0006905:	0f 85 52 02 00 00    	jne    c0006b5d <f_rename+0x2d4>
c000690b:	b8 06 00 00 00       	mov    eax,0x6
c0006910:	f6 84 24 9f 00 00 00 a0 	test   BYTE PTR [esp+0x9f],0xa0
c0006918:	0f 85 3f 02 00 00    	jne    c0006b5d <f_rename+0x2d4>
c000691e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006922:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006925:	0f 85 05 01 00 00    	jne    c0006a30 <f_rename+0x1a7>
c000692b:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000692e:	b9 40 00 00 00       	mov    ecx,0x40
c0006933:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006937:	e8 a4 b3 ff ff       	call   c0001ce0 <mem_cpy>
c000693c:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006941:	8d 54 24 58          	lea    edx,[esp+0x58]
c0006945:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000694c:	e8 8f b3 ff ff       	call   c0001ce0 <mem_cpy>
c0006951:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006958:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000695f:	e8 03 e5 ff ff       	call   c0004e67 <follow_path>
c0006964:	85 c0                	test   eax,eax
c0006966:	75 29                	jne    c0006991 <f_rename+0x108>
c0006968:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000696c:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006973:	74 0a                	je     c000697f <f_rename+0xf6>
c0006975:	b8 08 00 00 00       	mov    eax,0x8
c000697a:	e9 de 01 00 00       	jmp    c0006b5d <f_rename+0x2d4>
c000697f:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006986:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c000698d:	75 e6                	jne    c0006975 <f_rename+0xec>
c000698f:	eb 09                	jmp    c000699a <f_rename+0x111>
c0006991:	83 f8 04             	cmp    eax,0x4
c0006994:	0f 85 c3 01 00 00    	jne    c0006b5d <f_rename+0x2d4>
c000699a:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00069a1:	e8 42 d9 ff ff       	call   c00042e8 <dir_register>
c00069a6:	85 c0                	test   eax,eax
c00069a8:	0f 85 af 01 00 00    	jne    c0006b5d <f_rename+0x2d4>
c00069ae:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069b2:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c00069b5:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c00069b8:	89 c5                	mov    ebp,eax
c00069ba:	8a 46 23             	mov    al,BYTE PTR [esi+0x23]
c00069bd:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00069c1:	8d 46 24             	lea    eax,[esi+0x24]
c00069c4:	e8 98 b2 ff ff       	call   c0001c61 <ld_word>
c00069c9:	b9 40 00 00 00       	mov    ecx,0x40
c00069ce:	89 c7                	mov    edi,eax
c00069d0:	8d 54 24 18          	lea    edx,[esp+0x18]
c00069d4:	89 f0                	mov    eax,esi
c00069d6:	e8 05 b3 ff ff       	call   c0001ce0 <mem_cpy>
c00069db:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069df:	89 e9                	mov    ecx,ebp
c00069e1:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00069e4:	88 48 01             	mov    BYTE PTR [eax+0x1],cl
c00069e7:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c00069eb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069ef:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00069f2:	88 4a 23             	mov    BYTE PTR [edx+0x23],cl
c00069f5:	0f b7 d7             	movzx  edx,di
c00069f8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00069fb:	83 c0 24             	add    eax,0x24
c00069fe:	e8 d0 b2 ff ff       	call   c0001cd3 <st_word>
c0006a03:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006a07:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006a0a:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c0006a0d:	a8 10                	test   al,0x10
c0006a0f:	75 06                	jne    c0006a17 <f_rename+0x18e>
c0006a11:	83 c8 20             	or     eax,0x20
c0006a14:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c0006a17:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a1e:	e8 9c d1 ff ff       	call   c0003bbf <store_xdir>
c0006a23:	85 c0                	test   eax,eax
c0006a25:	0f 84 1c 01 00 00    	je     c0006b47 <f_rename+0x2be>
c0006a2b:	e9 2d 01 00 00       	jmp    c0006b5d <f_rename+0x2d4>
c0006a30:	b9 20 00 00 00       	mov    ecx,0x20
c0006a35:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c0006a3c:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006a40:	e8 9b b2 ff ff       	call   c0001ce0 <mem_cpy>
c0006a45:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006a4a:	8d 54 24 58          	lea    edx,[esp+0x58]
c0006a4e:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a55:	e8 86 b2 ff ff       	call   c0001ce0 <mem_cpy>
c0006a5a:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006a61:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a68:	e8 fa e3 ff ff       	call   c0004e67 <follow_path>
c0006a6d:	85 c0                	test   eax,eax
c0006a6f:	75 27                	jne    c0006a98 <f_rename+0x20f>
c0006a71:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006a75:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006a7c:	0f 85 f3 fe ff ff    	jne    c0006975 <f_rename+0xec>
c0006a82:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006a89:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c0006a90:	0f 85 df fe ff ff    	jne    c0006975 <f_rename+0xec>
c0006a96:	eb 09                	jmp    c0006aa1 <f_rename+0x218>
c0006a98:	83 f8 04             	cmp    eax,0x4
c0006a9b:	0f 85 bc 00 00 00    	jne    c0006b5d <f_rename+0x2d4>
c0006aa1:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006aa8:	e8 3b d8 ff ff       	call   c00042e8 <dir_register>
c0006aad:	85 c0                	test   eax,eax
c0006aaf:	0f 85 a8 00 00 00    	jne    c0006b5d <f_rename+0x2d4>
c0006ab5:	8b b4 24 dc 00 00 00 	mov    esi,DWORD PTR [esp+0xdc]
c0006abc:	b9 13 00 00 00       	mov    ecx,0x13
c0006ac1:	8d 46 0d             	lea    eax,[esi+0xd]
c0006ac4:	8d 54 24 25          	lea    edx,[esp+0x25]
c0006ac8:	e8 13 b2 ff ff       	call   c0001ce0 <mem_cpy>
c0006acd:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0006ad1:	a8 10                	test   al,0x10
c0006ad3:	75 03                	jne    c0006ad8 <f_rename+0x24f>
c0006ad5:	83 c8 20             	or     eax,0x20
c0006ad8:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c0006adb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006adf:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006ae3:	f6 46 0b 10          	test   BYTE PTR [esi+0xb],0x10
c0006ae7:	74 5e                	je     c0006b47 <f_rename+0x2be>
c0006ae9:	8b 84 24 ac 00 00 00 	mov    eax,DWORD PTR [esp+0xac]
c0006af0:	39 44 24 60          	cmp    DWORD PTR [esp+0x60],eax
c0006af4:	74 51                	je     c0006b47 <f_rename+0x2be>
c0006af6:	89 f2                	mov    edx,esi
c0006af8:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0006afc:	8a 07                	mov    al,BYTE PTR [edi]
c0006afe:	e8 d9 e2 ff ff       	call   c0004ddc <ld_clust.isra.0>
c0006b03:	89 c2                	mov    edx,eax
c0006b05:	89 f8                	mov    eax,edi
c0006b07:	e8 ee b3 ff ff       	call   c0001efa <clst2sect>
c0006b0c:	89 c6                	mov    esi,eax
c0006b0e:	89 d1                	mov    ecx,edx
c0006b10:	b8 02 00 00 00       	mov    eax,0x2
c0006b15:	09 f2                	or     edx,esi
c0006b17:	74 44                	je     c0006b5d <f_rename+0x2d4>
c0006b19:	89 f2                	mov    edx,esi
c0006b1b:	89 f8                	mov    eax,edi
c0006b1d:	e8 1d b9 ff ff       	call   c000243f <move_window>
c0006b22:	85 c0                	test   eax,eax
c0006b24:	75 37                	jne    c0006b5d <f_rename+0x2d4>
c0006b26:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b2a:	80 78 75 2e          	cmp    BYTE PTR [eax+0x75],0x2e
c0006b2e:	75 17                	jne    c0006b47 <f_rename+0x2be>
c0006b30:	8d 50 74             	lea    edx,[eax+0x74]
c0006b33:	8b 8c 24 ac 00 00 00 	mov    ecx,DWORD PTR [esp+0xac]
c0006b3a:	e8 c6 e2 ff ff       	call   c0004e05 <st_clust.isra.1>
c0006b3f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b43:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006b47:	8d 44 24 58          	lea    eax,[esp+0x58]
c0006b4b:	e8 f4 d0 ff ff       	call   c0003c44 <dir_remove>
c0006b50:	85 c0                	test   eax,eax
c0006b52:	75 09                	jne    c0006b5d <f_rename+0x2d4>
c0006b54:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b58:	e8 0d da ff ff       	call   c000456a <sync_fs>
c0006b5d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006b61:	83 ec 0c             	sub    esp,0xc
c0006b64:	53                   	push   ebx
c0006b65:	e8 40 19 00 00       	call   c00084aa <ff_memfree>
c0006b6a:	83 c4 10             	add    esp,0x10
c0006b6d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006b71:	81 c4 fc 00 00 00    	add    esp,0xfc
c0006b77:	5b                   	pop    ebx
c0006b78:	5e                   	pop    esi
c0006b79:	5f                   	pop    edi
c0006b7a:	5d                   	pop    ebp
c0006b7b:	c3                   	ret    

c0006b7c <f_chmod>:
c0006b7c:	57                   	push   edi
c0006b7d:	b9 02 00 00 00       	mov    ecx,0x2
c0006b82:	56                   	push   esi
c0006b83:	53                   	push   ebx
c0006b84:	83 ec 60             	sub    esp,0x60
c0006b87:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0006b8b:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0006b8f:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006b93:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006b97:	e8 55 bb ff ff       	call   c00026f1 <mount_volume>
c0006b9c:	85 c0                	test   eax,eax
c0006b9e:	0f 85 af 00 00 00    	jne    c0006c53 <f_chmod+0xd7>
c0006ba4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ba8:	83 ec 0c             	sub    esp,0xc
c0006bab:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006baf:	68 60 04 00 00       	push   0x460
c0006bb4:	e8 db 18 00 00       	call   c0008494 <ff_memalloc>
c0006bb9:	83 c4 10             	add    esp,0x10
c0006bbc:	89 c6                	mov    esi,eax
c0006bbe:	b8 11 00 00 00       	mov    eax,0x11
c0006bc3:	85 f6                	test   esi,esi
c0006bc5:	0f 84 88 00 00 00    	je     c0006c53 <f_chmod+0xd7>
c0006bcb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bcf:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006bd5:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006bd8:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006bdb:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006bdf:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006be3:	e8 7f e2 ff ff       	call   c0004e67 <follow_path>
c0006be8:	85 c0                	test   eax,eax
c0006bea:	75 53                	jne    c0006c3f <f_chmod+0xc3>
c0006bec:	b8 06 00 00 00       	mov    eax,0x6
c0006bf1:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006bf6:	75 47                	jne    c0006c3f <f_chmod+0xc3>
c0006bf8:	89 f9                	mov    ecx,edi
c0006bfa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bfe:	83 e1 27             	and    ecx,0x27
c0006c01:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006c04:	75 1d                	jne    c0006c23 <f_chmod+0xa7>
c0006c06:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006c09:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006c0c:	21 cb                	and    ebx,ecx
c0006c0e:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006c11:	88 58 04             	mov    BYTE PTR [eax+0x4],bl
c0006c14:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006c18:	e8 a2 cf ff ff       	call   c0003bbf <store_xdir>
c0006c1d:	85 c0                	test   eax,eax
c0006c1f:	75 1e                	jne    c0006c3f <f_chmod+0xc3>
c0006c21:	eb 13                	jmp    c0006c36 <f_chmod+0xba>
c0006c23:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0006c27:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006c2a:	21 cb                	and    ebx,ecx
c0006c2c:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006c2f:	88 5a 0b             	mov    BYTE PTR [edx+0xb],bl
c0006c32:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006c36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c3a:	e8 2b d9 ff ff       	call   c000456a <sync_fs>
c0006c3f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006c43:	83 ec 0c             	sub    esp,0xc
c0006c46:	56                   	push   esi
c0006c47:	e8 5e 18 00 00       	call   c00084aa <ff_memfree>
c0006c4c:	83 c4 10             	add    esp,0x10
c0006c4f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006c53:	83 c4 60             	add    esp,0x60
c0006c56:	5b                   	pop    ebx
c0006c57:	5e                   	pop    esi
c0006c58:	5f                   	pop    edi
c0006c59:	c3                   	ret    

c0006c5a <f_utime>:
c0006c5a:	56                   	push   esi
c0006c5b:	b9 02 00 00 00       	mov    ecx,0x2
c0006c60:	53                   	push   ebx
c0006c61:	83 ec 64             	sub    esp,0x64
c0006c64:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0006c68:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006c6c:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006c70:	e8 7c ba ff ff       	call   c00026f1 <mount_volume>
c0006c75:	85 c0                	test   eax,eax
c0006c77:	0f 85 b5 00 00 00    	jne    c0006d32 <f_utime+0xd8>
c0006c7d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c81:	83 ec 0c             	sub    esp,0xc
c0006c84:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006c88:	68 60 04 00 00       	push   0x460
c0006c8d:	e8 02 18 00 00       	call   c0008494 <ff_memalloc>
c0006c92:	83 c4 10             	add    esp,0x10
c0006c95:	89 c3                	mov    ebx,eax
c0006c97:	b8 11 00 00 00       	mov    eax,0x11
c0006c9c:	85 db                	test   ebx,ebx
c0006c9e:	0f 84 8e 00 00 00    	je     c0006d32 <f_utime+0xd8>
c0006ca4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ca8:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006cae:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006cb1:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006cb4:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006cb8:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006cbc:	e8 a6 e1 ff ff       	call   c0004e67 <follow_path>
c0006cc1:	85 c0                	test   eax,eax
c0006cc3:	75 59                	jne    c0006d1e <f_utime+0xc4>
c0006cc5:	b8 06 00 00 00       	mov    eax,0x6
c0006cca:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006ccf:	75 4d                	jne    c0006d1e <f_utime+0xc4>
c0006cd1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006cd5:	0f b7 56 08          	movzx  edx,WORD PTR [esi+0x8]
c0006cd9:	0f b7 4e 0a          	movzx  ecx,WORD PTR [esi+0xa]
c0006cdd:	c1 e2 10             	shl    edx,0x10
c0006ce0:	09 ca                	or     edx,ecx
c0006ce2:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006ce5:	75 1a                	jne    c0006d01 <f_utime+0xa7>
c0006ce7:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006cea:	83 c0 0c             	add    eax,0xc
c0006ced:	e8 e5 af ff ff       	call   c0001cd7 <st_dword>
c0006cf2:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006cf6:	e8 c4 ce ff ff       	call   c0003bbf <store_xdir>
c0006cfb:	85 c0                	test   eax,eax
c0006cfd:	75 1f                	jne    c0006d1e <f_utime+0xc4>
c0006cff:	eb 14                	jmp    c0006d15 <f_utime+0xbb>
c0006d01:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006d05:	83 c0 16             	add    eax,0x16
c0006d08:	e8 ca af ff ff       	call   c0001cd7 <st_dword>
c0006d0d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d11:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006d15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d19:	e8 4c d8 ff ff       	call   c000456a <sync_fs>
c0006d1e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006d22:	83 ec 0c             	sub    esp,0xc
c0006d25:	53                   	push   ebx
c0006d26:	e8 7f 17 00 00       	call   c00084aa <ff_memfree>
c0006d2b:	83 c4 10             	add    esp,0x10
c0006d2e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006d32:	83 c4 64             	add    esp,0x64
c0006d35:	5b                   	pop    ebx
c0006d36:	5e                   	pop    esi
c0006d37:	c3                   	ret    

c0006d38 <f_getlabel>:
c0006d38:	55                   	push   ebp
c0006d39:	31 c9                	xor    ecx,ecx
c0006d3b:	57                   	push   edi
c0006d3c:	56                   	push   esi
c0006d3d:	53                   	push   ebx
c0006d3e:	83 ec 6c             	sub    esp,0x6c
c0006d41:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006d45:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006d4c:	e8 a0 b9 ff ff       	call   c00026f1 <mount_volume>
c0006d51:	89 c6                	mov    esi,eax
c0006d53:	85 c0                	test   eax,eax
c0006d55:	0f 85 c1 01 00 00    	jne    c0006f1c <f_getlabel+0x1e4>
c0006d5b:	83 bc 24 84 00 00 00 00 	cmp    DWORD PTR [esp+0x84],0x0
c0006d63:	0f 84 5f 01 00 00    	je     c0006ec8 <f_getlabel+0x190>
c0006d69:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d6d:	31 d2                	xor    edx,edx
c0006d6f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0006d73:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0006d7b:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006d7f:	e8 39 c4 ff ff       	call   c00031bd <dir_sdi>
c0006d84:	85 c0                	test   eax,eax
c0006d86:	0f 85 2d 01 00 00    	jne    c0006eb9 <f_getlabel+0x181>
c0006d8c:	ba 01 00 00 00       	mov    edx,0x1
c0006d91:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006d95:	e8 33 cc ff ff       	call   c00039cd <dir_read>
c0006d9a:	85 c0                	test   eax,eax
c0006d9c:	0f 85 17 01 00 00    	jne    c0006eb9 <f_getlabel+0x181>
c0006da2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006da6:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006da9:	74 09                	je     c0006db4 <f_getlabel+0x7c>
c0006dab:	31 db                	xor    ebx,ebx
c0006dad:	31 c9                	xor    ecx,ecx
c0006daf:	e9 c8 00 00 00       	jmp    c0006e7c <f_getlabel+0x144>
c0006db4:	31 ed                	xor    ebp,ebp
c0006db6:	31 db                	xor    ebx,ebx
c0006db8:	31 ff                	xor    edi,edi
c0006dba:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006dbe:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0006dc2:	39 fa                	cmp    edx,edi
c0006dc4:	76 4b                	jbe    c0006e11 <f_getlabel+0xd9>
c0006dc6:	47                   	inc    edi
c0006dc7:	8d 14 3f             	lea    edx,[edi+edi*1]
c0006dca:	01 d0                	add    eax,edx
c0006dcc:	e8 90 ae ff ff       	call   c0001c61 <ld_word>
c0006dd1:	66 85 ed             	test   bp,bp
c0006dd4:	75 0d                	jne    c0006de3 <f_getlabel+0xab>
c0006dd6:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0006ddc:	66 81 fa ff 07       	cmp    dx,0x7ff
c0006de1:	76 28                	jbe    c0006e0b <f_getlabel+0xd3>
c0006de3:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006dea:	89 e9                	mov    ecx,ebp
c0006dec:	01 da                	add    edx,ebx
c0006dee:	c1 e1 10             	shl    ecx,0x10
c0006df1:	0f b7 c0             	movzx  eax,ax
c0006df4:	09 c8                	or     eax,ecx
c0006df6:	b9 04 00 00 00       	mov    ecx,0x4
c0006dfb:	e8 01 b0 ff ff       	call   c0001e01 <put_utf>
c0006e00:	84 c0                	test   al,al
c0006e02:	74 0b                	je     c0006e0f <f_getlabel+0xd7>
c0006e04:	0f b6 c0             	movzx  eax,al
c0006e07:	01 c3                	add    ebx,eax
c0006e09:	31 c0                	xor    eax,eax
c0006e0b:	89 c5                	mov    ebp,eax
c0006e0d:	eb ab                	jmp    c0006dba <f_getlabel+0x82>
c0006e0f:	31 db                	xor    ebx,ebx
c0006e11:	66 85 ed             	test   bp,bp
c0006e14:	74 02                	je     c0006e18 <f_getlabel+0xe0>
c0006e16:	31 db                	xor    ebx,ebx
c0006e18:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006e1f:	c6 04 18 00          	mov    BYTE PTR [eax+ebx*1],0x0
c0006e23:	e9 a0 00 00 00       	jmp    c0006ec8 <f_getlabel+0x190>
c0006e28:	83 ff 0b             	cmp    edi,0xb
c0006e2b:	74 11                	je     c0006e3e <f_getlabel+0x106>
c0006e2d:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0006e32:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006e36:	8d 79 02             	lea    edi,[ecx+0x2]
c0006e39:	c1 e0 08             	shl    eax,0x8
c0006e3c:	09 c2                	or     edx,eax
c0006e3e:	0f b7 d2             	movzx  edx,dx
c0006e41:	50                   	push   eax
c0006e42:	50                   	push   eax
c0006e43:	68 b5 01 00 00       	push   0x1b5
c0006e48:	52                   	push   edx
c0006e49:	e8 03 17 00 00       	call   c0008551 <ff_oem2uni>
c0006e4e:	83 c4 10             	add    esp,0x10
c0006e51:	66 85 c0             	test   ax,ax
c0006e54:	74 46                	je     c0006e9c <f_getlabel+0x164>
c0006e56:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006e5d:	0f b7 c0             	movzx  eax,ax
c0006e60:	01 da                	add    edx,ebx
c0006e62:	b9 04 00 00 00       	mov    ecx,0x4
c0006e67:	e8 95 af ff ff       	call   c0001e01 <put_utf>
c0006e6c:	84 c0                	test   al,al
c0006e6e:	74 2c                	je     c0006e9c <f_getlabel+0x164>
c0006e70:	0f b6 c0             	movzx  eax,al
c0006e73:	01 c3                	add    ebx,eax
c0006e75:	83 ff 0b             	cmp    edi,0xb
c0006e78:	74 24                	je     c0006e9e <f_getlabel+0x166>
c0006e7a:	89 f9                	mov    ecx,edi
c0006e7c:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0006e80:	8d 79 01             	lea    edi,[ecx+0x1]
c0006e83:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0006e88:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0006e8d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006e91:	e8 9f ae ff ff       	call   c0001d35 <dbc_1st>
c0006e96:	85 c0                	test   eax,eax
c0006e98:	74 a4                	je     c0006e3e <f_getlabel+0x106>
c0006e9a:	eb 8c                	jmp    c0006e28 <f_getlabel+0xf0>
c0006e9c:	31 db                	xor    ebx,ebx
c0006e9e:	03 9c 24 84 00 00 00 	add    ebx,DWORD PTR [esp+0x84]
c0006ea5:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0006ea8:	39 9c 24 84 00 00 00 	cmp    DWORD PTR [esp+0x84],ebx
c0006eaf:	74 17                	je     c0006ec8 <f_getlabel+0x190>
c0006eb1:	4b                   	dec    ebx
c0006eb2:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c0006eb5:	74 ee                	je     c0006ea5 <f_getlabel+0x16d>
c0006eb7:	eb 0f                	jmp    c0006ec8 <f_getlabel+0x190>
c0006eb9:	83 f8 04             	cmp    eax,0x4
c0006ebc:	75 5c                	jne    c0006f1a <f_getlabel+0x1e2>
c0006ebe:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006ec5:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006ec8:	83 bc 24 88 00 00 00 00 	cmp    DWORD PTR [esp+0x88],0x0
c0006ed0:	74 4a                	je     c0006f1c <f_getlabel+0x1e4>
c0006ed2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ed6:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0006ed9:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0006edc:	e8 5e b5 ff ff       	call   c000243f <move_window>
c0006ee1:	89 c6                	mov    esi,eax
c0006ee3:	85 c0                	test   eax,eax
c0006ee5:	75 35                	jne    c0006f1c <f_getlabel+0x1e4>
c0006ee7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006eeb:	b8 43 00 00 00       	mov    eax,0x43
c0006ef0:	8a 0a                	mov    cl,BYTE PTR [edx]
c0006ef2:	80 f9 03             	cmp    cl,0x3
c0006ef5:	74 0f                	je     c0006f06 <f_getlabel+0x1ce>
c0006ef7:	31 c0                	xor    eax,eax
c0006ef9:	80 f9 04             	cmp    cl,0x4
c0006efc:	0f 94 c0             	sete   al
c0006eff:	48                   	dec    eax
c0006f00:	83 e0 c3             	and    eax,0xffffffc3
c0006f03:	83 c0 64             	add    eax,0x64
c0006f06:	8d 44 02 54          	lea    eax,[edx+eax*1+0x54]
c0006f0a:	e8 5f ad ff ff       	call   c0001c6e <ld_dword>
c0006f0f:	8b bc 24 88 00 00 00 	mov    edi,DWORD PTR [esp+0x88]
c0006f16:	89 07                	mov    DWORD PTR [edi],eax
c0006f18:	eb 02                	jmp    c0006f1c <f_getlabel+0x1e4>
c0006f1a:	89 c6                	mov    esi,eax
c0006f1c:	83 c4 6c             	add    esp,0x6c
c0006f1f:	89 f0                	mov    eax,esi
c0006f21:	5b                   	pop    ebx
c0006f22:	5e                   	pop    esi
c0006f23:	5f                   	pop    edi
c0006f24:	5d                   	pop    ebp
c0006f25:	c3                   	ret    

c0006f26 <f_setlabel>:
c0006f26:	56                   	push   esi
c0006f27:	b9 02 00 00 00       	mov    ecx,0x2
c0006f2c:	53                   	push   ebx
c0006f2d:	83 ec 74             	sub    esp,0x74
c0006f30:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006f34:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006f3b:	e8 b1 b7 ff ff       	call   c00026f1 <mount_volume>
c0006f40:	89 c6                	mov    esi,eax
c0006f42:	85 c0                	test   eax,eax
c0006f44:	0f 85 41 02 00 00    	jne    c000718b <f_setlabel+0x265>
c0006f4a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006f4e:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006f51:	0f 85 8e 00 00 00    	jne    c0006fe5 <f_setlabel+0xbf>
c0006f57:	b9 16 00 00 00       	mov    ecx,0x16
c0006f5c:	31 d2                	xor    edx,edx
c0006f5e:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006f62:	31 db                	xor    ebx,ebx
c0006f64:	e8 8c ad ff ff       	call   c0001cf5 <mem_set>
c0006f69:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006f70:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006f73:	0f 86 0a 01 00 00    	jbe    c0007083 <f_setlabel+0x15d>
c0006f79:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006f80:	e8 b6 ad ff ff       	call   c0001d3b <tchar2uni>
c0006f85:	89 c6                	mov    esi,eax
c0006f87:	3d ff ff 00 00       	cmp    eax,0xffff
c0006f8c:	76 2a                	jbe    c0006fb8 <f_setlabel+0x92>
c0006f8e:	83 f8 ff             	cmp    eax,0xffffffff
c0006f91:	74 05                	je     c0006f98 <f_setlabel+0x72>
c0006f93:	83 fb 09             	cmp    ebx,0x9
c0006f96:	76 0a                	jbe    c0006fa2 <f_setlabel+0x7c>
c0006f98:	be 06 00 00 00       	mov    esi,0x6
c0006f9d:	e9 e9 01 00 00       	jmp    c000718b <f_setlabel+0x265>
c0006fa2:	89 c2                	mov    edx,eax
c0006fa4:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006fa8:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006fab:	c1 ea 10             	shr    edx,0x10
c0006fae:	01 c8                	add    eax,ecx
c0006fb0:	43                   	inc    ebx
c0006fb1:	e8 1d ad ff ff       	call   c0001cd3 <st_word>
c0006fb6:	eb 04                	jmp    c0006fbc <f_setlabel+0x96>
c0006fb8:	85 c0                	test   eax,eax
c0006fba:	74 dc                	je     c0006f98 <f_setlabel+0x72>
c0006fbc:	89 f2                	mov    edx,esi
c0006fbe:	b8 77 94 02 c0       	mov    eax,0xc0029477
c0006fc3:	e8 5b ad ff ff       	call   c0001d23 <chk_chr>
c0006fc8:	85 c0                	test   eax,eax
c0006fca:	75 cc                	jne    c0006f98 <f_setlabel+0x72>
c0006fcc:	83 fb 0a             	cmp    ebx,0xa
c0006fcf:	77 c7                	ja     c0006f98 <f_setlabel+0x72>
c0006fd1:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006fd4:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006fd8:	0f b7 d6             	movzx  edx,si
c0006fdb:	01 c8                	add    eax,ecx
c0006fdd:	43                   	inc    ebx
c0006fde:	e8 f0 ac ff ff       	call   c0001cd3 <st_word>
c0006fe3:	eb 84                	jmp    c0006f69 <f_setlabel+0x43>
c0006fe5:	b9 0b 00 00 00       	mov    ecx,0xb
c0006fea:	ba 20 00 00 00       	mov    edx,0x20
c0006fef:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006ff3:	31 db                	xor    ebx,ebx
c0006ff5:	e8 fb ac ff ff       	call   c0001cf5 <mem_set>
c0006ffa:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0007001:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0007004:	76 60                	jbe    c0007066 <f_setlabel+0x140>
c0007006:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c000700d:	e8 29 ad ff ff       	call   c0001d3b <tchar2uni>
c0007012:	3d ff ff 00 00       	cmp    eax,0xffff
c0007017:	0f 87 7b ff ff ff    	ja     c0006f98 <f_setlabel+0x72>
c000701d:	83 ec 0c             	sub    esp,0xc
c0007020:	50                   	push   eax
c0007021:	e8 97 15 00 00       	call   c00085bd <ff_wtoupper>
c0007026:	5a                   	pop    edx
c0007027:	59                   	pop    ecx
c0007028:	68 b5 01 00 00       	push   0x1b5
c000702d:	50                   	push   eax
c000702e:	e8 8e 14 00 00       	call   c00084c1 <ff_uni2oem>
c0007033:	83 c4 10             	add    esp,0x10
c0007036:	89 c6                	mov    esi,eax
c0007038:	66 85 c0             	test   ax,ax
c000703b:	0f 84 57 ff ff ff    	je     c0006f98 <f_setlabel+0x72>
c0007041:	0f b7 d0             	movzx  edx,ax
c0007044:	b8 70 94 02 c0       	mov    eax,0xc0029470
c0007049:	e8 d5 ac ff ff       	call   c0001d23 <chk_chr>
c000704e:	85 c0                	test   eax,eax
c0007050:	0f 85 42 ff ff ff    	jne    c0006f98 <f_setlabel+0x72>
c0007056:	66 81 fe ff 00       	cmp    si,0xff
c000705b:	0f 87 14 01 00 00    	ja     c0007175 <f_setlabel+0x24f>
c0007061:	e9 fa 00 00 00       	jmp    c0007160 <f_setlabel+0x23a>
c0007066:	80 7c 24 0e e5       	cmp    BYTE PTR [esp+0xe],0xe5
c000706b:	0f 84 27 ff ff ff    	je     c0006f98 <f_setlabel+0x72>
c0007071:	85 db                	test   ebx,ebx
c0007073:	74 0e                	je     c0007083 <f_setlabel+0x15d>
c0007075:	8d 43 ff             	lea    eax,[ebx-0x1]
c0007078:	80 7c 1c 0d 20       	cmp    BYTE PTR [esp+ebx*1+0xd],0x20
c000707d:	75 04                	jne    c0007083 <f_setlabel+0x15d>
c000707f:	89 c3                	mov    ebx,eax
c0007081:	eb ee                	jmp    c0007071 <f_setlabel+0x14b>
c0007083:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007087:	31 d2                	xor    edx,edx
c0007089:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000708d:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0007095:	8d 44 24 24          	lea    eax,[esp+0x24]
c0007099:	e8 1f c1 ff ff       	call   c00031bd <dir_sdi>
c000709e:	89 c6                	mov    esi,eax
c00070a0:	85 c0                	test   eax,eax
c00070a2:	0f 85 e3 00 00 00    	jne    c000718b <f_setlabel+0x265>
c00070a8:	ba 01 00 00 00       	mov    edx,0x1
c00070ad:	8d 44 24 24          	lea    eax,[esp+0x24]
c00070b1:	e8 17 c9 ff ff       	call   c00039cd <dir_read>
c00070b6:	85 c0                	test   eax,eax
c00070b8:	75 21                	jne    c00070db <f_setlabel+0x1b5>
c00070ba:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00070be:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070c2:	80 3a 04             	cmp    BYTE PTR [edx],0x4
c00070c5:	74 5d                	je     c0007124 <f_setlabel+0x1fe>
c00070c7:	85 db                	test   ebx,ebx
c00070c9:	74 0b                	je     c00070d6 <f_setlabel+0x1b0>
c00070cb:	b9 0b 00 00 00       	mov    ecx,0xb
c00070d0:	8d 54 24 0e          	lea    edx,[esp+0xe]
c00070d4:	eb 70                	jmp    c0007146 <f_setlabel+0x220>
c00070d6:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c00070d9:	eb 70                	jmp    c000714b <f_setlabel+0x225>
c00070db:	83 f8 04             	cmp    eax,0x4
c00070de:	75 7c                	jne    c000715c <f_setlabel+0x236>
c00070e0:	85 db                	test   ebx,ebx
c00070e2:	0f 84 a3 00 00 00    	je     c000718b <f_setlabel+0x265>
c00070e8:	ba 01 00 00 00       	mov    edx,0x1
c00070ed:	8d 44 24 24          	lea    eax,[esp+0x24]
c00070f1:	e8 51 ca ff ff       	call   c0003b47 <dir_alloc>
c00070f6:	89 c6                	mov    esi,eax
c00070f8:	85 c0                	test   eax,eax
c00070fa:	0f 85 8b 00 00 00    	jne    c000718b <f_setlabel+0x265>
c0007100:	31 d2                	xor    edx,edx
c0007102:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007106:	b9 20 00 00 00       	mov    ecx,0x20
c000710b:	e8 e5 ab ff ff       	call   c0001cf5 <mem_set>
c0007110:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007114:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0007117:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000711b:	75 18                	jne    c0007135 <f_setlabel+0x20f>
c000711d:	c6 00 83             	mov    BYTE PTR [eax],0x83
c0007120:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007124:	88 58 01             	mov    BYTE PTR [eax+0x1],bl
c0007127:	b9 16 00 00 00       	mov    ecx,0x16
c000712c:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007130:	83 c0 02             	add    eax,0x2
c0007133:	eb 9b                	jmp    c00070d0 <f_setlabel+0x1aa>
c0007135:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c0007139:	b9 0b 00 00 00       	mov    ecx,0xb
c000713e:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0007142:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007146:	e8 95 ab ff ff       	call   c0001ce0 <mem_cpy>
c000714b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000714f:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0007153:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007157:	e8 0e d4 ff ff       	call   c000456a <sync_fs>
c000715c:	89 c6                	mov    esi,eax
c000715e:	eb 2b                	jmp    c000718b <f_setlabel+0x265>
c0007160:	83 fb 0a             	cmp    ebx,0xa
c0007163:	0f 87 2f fe ff ff    	ja     c0006f98 <f_setlabel+0x72>
c0007169:	89 f0                	mov    eax,esi
c000716b:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c000716f:	43                   	inc    ebx
c0007170:	e9 85 fe ff ff       	jmp    c0006ffa <f_setlabel+0xd4>
c0007175:	83 fb 09             	cmp    ebx,0x9
c0007178:	0f 87 1a fe ff ff    	ja     c0006f98 <f_setlabel+0x72>
c000717e:	89 f0                	mov    eax,esi
c0007180:	66 c1 e8 08          	shr    ax,0x8
c0007184:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0007188:	43                   	inc    ebx
c0007189:	eb de                	jmp    c0007169 <f_setlabel+0x243>
c000718b:	89 f0                	mov    eax,esi
c000718d:	83 c4 74             	add    esp,0x74
c0007190:	5b                   	pop    ebx
c0007191:	5e                   	pop    esi
c0007192:	c3                   	ret    

c0007193 <f_forward>:
c0007193:	55                   	push   ebp
c0007194:	57                   	push   edi
c0007195:	56                   	push   esi
c0007196:	53                   	push   ebx
c0007197:	83 ec 2c             	sub    esp,0x2c
c000719a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000719e:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00071a2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00071a8:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00071ac:	89 d8                	mov    eax,ebx
c00071ae:	e8 b1 b1 ff ff       	call   c0002364 <validate>
c00071b3:	89 c5                	mov    ebp,eax
c00071b5:	85 c0                	test   eax,eax
c00071b7:	0f 85 aa 01 00 00    	jne    c0007367 <f_forward+0x1d4>
c00071bd:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00071c1:	85 ed                	test   ebp,ebp
c00071c3:	0f 85 9e 01 00 00    	jne    c0007367 <f_forward+0x1d4>
c00071c9:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c00071cd:	0f 84 8f 01 00 00    	je     c0007362 <f_forward+0x1cf>
c00071d3:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00071d6:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00071d9:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c00071dc:	bf 00 00 00 00       	mov    edi,0x0
c00071e1:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c00071e4:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c00071e8:	89 d1                	mov    ecx,edx
c00071ea:	19 f9                	sbb    ecx,edi
c00071ec:	0f 83 cf 00 00 00    	jae    c00072c1 <f_forward+0x12e>
c00071f2:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00071f6:	e9 c6 00 00 00       	jmp    c00072c1 <f_forward+0x12e>
c00071fb:	50                   	push   eax
c00071fc:	50                   	push   eax
c00071fd:	6a 00                	push   0x0
c00071ff:	6a 00                	push   0x0
c0007201:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c0007205:	83 c4 10             	add    esp,0x10
c0007208:	85 c0                	test   eax,eax
c000720a:	0f 84 57 01 00 00    	je     c0007367 <f_forward+0x1d4>
c0007210:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0007213:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0007217:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000721a:	0f b7 71 0a          	movzx  esi,WORD PTR [ecx+0xa]
c000721e:	89 d7                	mov    edi,edx
c0007220:	8d 4e ff             	lea    ecx,[esi-0x1]
c0007223:	89 c6                	mov    esi,eax
c0007225:	0f ac fe 09          	shrd   esi,edi,0x9
c0007229:	21 ce                	and    esi,ecx
c000722b:	89 c1                	mov    ecx,eax
c000722d:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c0007233:	0f 84 98 00 00 00    	je     c00072d1 <f_forward+0x13e>
c0007239:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000723d:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0007240:	89 c8                	mov    eax,ecx
c0007242:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0007246:	e8 af ac ff ff       	call   c0001efa <clst2sect>
c000724b:	89 d7                	mov    edi,edx
c000724d:	09 c7                	or     edi,eax
c000724f:	0f 84 9e 00 00 00    	je     c00072f3 <f_forward+0x160>
c0007255:	31 ff                	xor    edi,edi
c0007257:	8d 4b 50             	lea    ecx,[ebx+0x50]
c000725a:	01 c6                	add    esi,eax
c000725c:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0007260:	11 d7                	adc    edi,edx
c0007262:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0007265:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0007268:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000726c:	39 fa                	cmp    edx,edi
c000726e:	0f 85 a2 00 00 00    	jne    c0007316 <f_forward+0x183>
c0007274:	39 f0                	cmp    eax,esi
c0007276:	0f 85 9a 00 00 00    	jne    c0007316 <f_forward+0x183>
c000727c:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000727f:	ba 00 02 00 00       	mov    edx,0x200
c0007284:	25 ff 01 00 00       	and    eax,0x1ff
c0007289:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c000728d:	29 c2                	sub    edx,eax
c000728f:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0007292:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0007295:	39 d1                	cmp    ecx,edx
c0007297:	76 02                	jbe    c000729b <f_forward+0x108>
c0007299:	89 d1                	mov    ecx,edx
c000729b:	8d 73 50             	lea    esi,[ebx+0x50]
c000729e:	52                   	push   edx
c000729f:	01 c6                	add    esi,eax
c00072a1:	52                   	push   edx
c00072a2:	51                   	push   ecx
c00072a3:	56                   	push   esi
c00072a4:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c00072a8:	83 c4 10             	add    esp,0x10
c00072ab:	85 c0                	test   eax,eax
c00072ad:	74 44                	je     c00072f3 <f_forward+0x160>
c00072af:	31 ff                	xor    edi,edi
c00072b1:	01 43 2c             	add    DWORD PTR [ebx+0x2c],eax
c00072b4:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c00072b7:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c00072bb:	29 44 24 48          	sub    DWORD PTR [esp+0x48],eax
c00072bf:	01 07                	add    DWORD PTR [edi],eax
c00072c1:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00072c6:	0f 85 2f ff ff ff    	jne    c00071fb <f_forward+0x68>
c00072cc:	e9 96 00 00 00       	jmp    c0007367 <f_forward+0x1d4>
c00072d1:	85 f6                	test   esi,esi
c00072d3:	0f 85 60 ff ff ff    	jne    c0007239 <f_forward+0xa6>
c00072d9:	89 d7                	mov    edi,edx
c00072db:	09 c7                	or     edi,eax
c00072dd:	75 05                	jne    c00072e4 <f_forward+0x151>
c00072df:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00072e2:	eb 0a                	jmp    c00072ee <f_forward+0x15b>
c00072e4:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00072e7:	89 d8                	mov    eax,ebx
c00072e9:	e8 d9 bc ff ff       	call   c0002fc7 <get_fat>
c00072ee:	83 f8 01             	cmp    eax,0x1
c00072f1:	77 0b                	ja     c00072fe <f_forward+0x16b>
c00072f3:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00072f7:	bd 02 00 00 00       	mov    ebp,0x2
c00072fc:	eb 69                	jmp    c0007367 <f_forward+0x1d4>
c00072fe:	83 f8 ff             	cmp    eax,0xffffffff
c0007301:	75 0b                	jne    c000730e <f_forward+0x17b>
c0007303:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0007307:	bd 01 00 00 00       	mov    ebp,0x1
c000730c:	eb 59                	jmp    c0007367 <f_forward+0x1d4>
c000730e:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0007311:	e9 23 ff ff ff       	jmp    c0007239 <f_forward+0xa6>
c0007316:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c000731a:	79 20                	jns    c000733c <f_forward+0x1a9>
c000731c:	83 ec 0c             	sub    esp,0xc
c000731f:	6a 01                	push   0x1
c0007321:	52                   	push   edx
c0007322:	50                   	push   eax
c0007323:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007327:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000732b:	50                   	push   eax
c000732c:	e8 fb a8 ff ff       	call   c0001c2c <disk_write>
c0007331:	83 c4 20             	add    esp,0x20
c0007334:	85 c0                	test   eax,eax
c0007336:	75 cb                	jne    c0007303 <f_forward+0x170>
c0007338:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000733c:	83 ec 0c             	sub    esp,0xc
c000733f:	6a 01                	push   0x1
c0007341:	57                   	push   edi
c0007342:	56                   	push   esi
c0007343:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007347:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000734b:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000734f:	50                   	push   eax
c0007350:	e8 c1 a8 ff ff       	call   c0001c16 <disk_read>
c0007355:	83 c4 20             	add    esp,0x20
c0007358:	85 c0                	test   eax,eax
c000735a:	0f 84 1c ff ff ff    	je     c000727c <f_forward+0xe9>
c0007360:	eb a1                	jmp    c0007303 <f_forward+0x170>
c0007362:	bd 07 00 00 00       	mov    ebp,0x7
c0007367:	83 c4 2c             	add    esp,0x2c
c000736a:	89 e8                	mov    eax,ebp
c000736c:	5b                   	pop    ebx
c000736d:	5e                   	pop    esi
c000736e:	5f                   	pop    edi
c000736f:	5d                   	pop    ebp
c0007370:	c3                   	ret    

c0007371 <f_mkfs>:
c0007371:	55                   	push   ebp
c0007372:	57                   	push   edi
c0007373:	56                   	push   esi
c0007374:	53                   	push   ebx
c0007375:	bb 0b 00 00 00       	mov    ebx,0xb
c000737a:	81 ec 9c 00 00 00    	sub    esp,0x9c
c0007380:	8b b4 24 b4 00 00 00 	mov    esi,DWORD PTR [esp+0xb4]
c0007387:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c000738e:	e8 b0 ae ff ff       	call   c0002243 <get_ldnumber>
c0007393:	85 c0                	test   eax,eax
c0007395:	0f 88 ec 10 00 00    	js     c0008487 <f_mkfs+0x1116>
c000739b:	8b 14 85 80 e6 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd1980]
c00073a2:	85 d2                	test   edx,edx
c00073a4:	74 03                	je     c00073a9 <f_mkfs+0x38>
c00073a6:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00073a9:	85 f6                	test   esi,esi
c00073ab:	75 05                	jne    c00073b2 <f_mkfs+0x41>
c00073ad:	be 60 94 02 c0       	mov    esi,0xc0029460
c00073b2:	83 ec 0c             	sub    esp,0xc
c00073b5:	0f b6 c0             	movzx  eax,al
c00073b8:	bb 03 00 00 00       	mov    ebx,0x3
c00073bd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00073c1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00073c5:	e8 49 a8 ff ff       	call   c0001c13 <disk_initialize>
c00073ca:	83 c4 10             	add    esp,0x10
c00073cd:	a8 01                	test   al,0x1
c00073cf:	0f 85 b2 10 00 00    	jne    c0008487 <f_mkfs+0x1116>
c00073d5:	bb 0a 00 00 00       	mov    ebx,0xa
c00073da:	a8 04                	test   al,0x4
c00073dc:	0f 85 a5 10 00 00    	jne    c0008487 <f_mkfs+0x1116>
c00073e2:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00073e5:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c00073e9:	85 c0                	test   eax,eax
c00073eb:	75 20                	jne    c000740d <f_mkfs+0x9c>
c00073ed:	51                   	push   ecx
c00073ee:	8d 44 24 78          	lea    eax,[esp+0x78]
c00073f2:	50                   	push   eax
c00073f3:	6a 03                	push   0x3
c00073f5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00073f9:	e8 44 a8 ff ff       	call   c0001c42 <disk_ioctl>
c00073fe:	83 c4 10             	add    esp,0x10
c0007401:	85 c0                	test   eax,eax
c0007403:	74 08                	je     c000740d <f_mkfs+0x9c>
c0007405:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c000740d:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007411:	8d 42 ff             	lea    eax,[edx-0x1]
c0007414:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0007419:	77 04                	ja     c000741f <f_mkfs+0xae>
c000741b:	85 c2                	test   edx,eax
c000741d:	74 08                	je     c0007427 <f_mkfs+0xb6>
c000741f:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c0007427:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c000742a:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c000742e:	48                   	dec    eax
c000742f:	3c 01                	cmp    al,0x1
c0007431:	76 05                	jbe    c0007438 <f_mkfs+0xc7>
c0007433:	c6 44 24 48 01       	mov    BYTE PTR [esp+0x48],0x1
c0007438:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000743b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000743f:	48                   	dec    eax
c0007440:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0007445:	77 07                	ja     c000744e <f_mkfs+0xdd>
c0007447:	f6 44 24 28 0f       	test   BYTE PTR [esp+0x28],0xf
c000744c:	74 08                	je     c0007456 <f_mkfs+0xe5>
c000744e:	c7 44 24 28 00 02 00 00 	mov    DWORD PTR [esp+0x28],0x200
c0007456:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0007459:	81 fb 00 00 00 01    	cmp    ebx,0x1000000
c000745f:	77 07                	ja     c0007468 <f_mkfs+0xf7>
c0007461:	8d 43 ff             	lea    eax,[ebx-0x1]
c0007464:	85 d8                	test   eax,ebx
c0007466:	74 02                	je     c000746a <f_mkfs+0xf9>
c0007468:	31 db                	xor    ebx,ebx
c000746a:	81 bc 24 bc 00 00 00 ff 01 00 00 	cmp    DWORD PTR [esp+0xbc],0x1ff
c0007475:	77 0a                	ja     c0007481 <f_mkfs+0x110>
c0007477:	bb 11 00 00 00       	mov    ebx,0x11
c000747c:	e9 06 10 00 00       	jmp    c0008487 <f_mkfs+0x1116>
c0007481:	8b ac 24 b8 00 00 00 	mov    ebp,DWORD PTR [esp+0xb8]
c0007488:	8b 36                	mov    esi,DWORD PTR [esi]
c000748a:	85 ed                	test   ebp,ebp
c000748c:	75 1e                	jne    c00074ac <f_mkfs+0x13b>
c000748e:	83 ec 0c             	sub    esp,0xc
c0007491:	8b 84 24 c8 00 00 00 	mov    eax,DWORD PTR [esp+0xc8]
c0007498:	25 00 fe ff ff       	and    eax,0xfffffe00
c000749d:	50                   	push   eax
c000749e:	e8 f1 0f 00 00       	call   c0008494 <ff_memalloc>
c00074a3:	83 c4 10             	add    esp,0x10
c00074a6:	89 c5                	mov    ebp,eax
c00074a8:	85 c0                	test   eax,eax
c00074aa:	74 cb                	je     c0007477 <f_mkfs+0x106>
c00074ac:	c7 44 24 78 00 00 00 00 	mov    DWORD PTR [esp+0x78],0x0
c00074b4:	c7 44 24 7c 00 00 00 00 	mov    DWORD PTR [esp+0x7c],0x0
c00074bc:	52                   	push   edx
c00074bd:	8d 44 24 7c          	lea    eax,[esp+0x7c]
c00074c1:	50                   	push   eax
c00074c2:	6a 01                	push   0x1
c00074c4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00074c8:	e8 75 a7 ff ff       	call   c0001c42 <disk_ioctl>
c00074cd:	83 c4 10             	add    esp,0x10
c00074d0:	85 c0                	test   eax,eax
c00074d2:	0f 85 4a 0f 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c00074d8:	89 f1                	mov    ecx,esi
c00074da:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00074e2:	83 e1 0f             	and    ecx,0xf
c00074e5:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00074ed:	88 4c 24 3f          	mov    BYTE PTR [esp+0x3f],cl
c00074f1:	83 e6 08             	and    esi,0x8
c00074f4:	75 56                	jne    c000754c <f_mkfs+0x1db>
c00074f6:	8b 7c 24 7c          	mov    edi,DWORD PTR [esp+0x7c]
c00074fa:	8b 74 24 78          	mov    esi,DWORD PTR [esp+0x78]
c00074fe:	83 ff 00             	cmp    edi,0x0
c0007501:	76 20                	jbe    c0007523 <f_mkfs+0x1b2>
c0007503:	80 4c 24 3f 80       	or     BYTE PTR [esp+0x3f],0x80
c0007508:	c7 44 24 10 00 08 00 00 	mov    DWORD PTR [esp+0x10],0x800
c0007510:	81 c6 df f7 ff ff    	add    esi,0xfffff7df
c0007516:	83 d7 ff             	adc    edi,0xffffffff
c0007519:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c000751d:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c0007521:	eb 21                	jmp    c0007544 <f_mkfs+0x1d3>
c0007523:	ba 3f 00 00 00       	mov    edx,0x3f
c0007528:	39 f2                	cmp    edx,esi
c000752a:	19 f8                	sbb    eax,edi
c000752c:	73 1e                	jae    c000754c <f_mkfs+0x1db>
c000752e:	83 c6 c1             	add    esi,0xffffffc1
c0007531:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c0007539:	83 d7 ff             	adc    edi,0xffffffff
c000753c:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c0007540:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c0007544:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000754c:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0007550:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c0007554:	89 04 24             	mov    DWORD PTR [esp],eax
c0007557:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000755b:	31 c0                	xor    eax,eax
c000755d:	ba 7f 00 00 00       	mov    edx,0x7f
c0007562:	89 c7                	mov    edi,eax
c0007564:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007567:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c000756b:	0f 83 c5 0a 00 00    	jae    c0008036 <f_mkfs+0xcc5>
c0007571:	89 df                	mov    edi,ebx
c0007573:	c1 ef 09             	shr    edi,0x9
c0007576:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000757a:	8b bc 24 bc 00 00 00 	mov    edi,DWORD PTR [esp+0xbc]
c0007581:	c1 ef 09             	shr    edi,0x9
c0007584:	f6 44 24 3f 04       	test   BYTE PTR [esp+0x3f],0x4
c0007589:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c000758d:	74 29                	je     c00075b8 <f_mkfs+0x247>
c000758f:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c0007595:	b9 ff ff ff 03       	mov    ecx,0x3ffffff
c000759a:	0f 97 c2             	seta   dl
c000759d:	3b 0c 24             	cmp    ecx,DWORD PTR [esp]
c00075a0:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c00075a4:	0f 92 c0             	setb   al
c00075a7:	08 c2                	or     dl,al
c00075a9:	75 5b                	jne    c0007606 <f_mkfs+0x295>
c00075ab:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c00075af:	83 e0 07             	and    eax,0x7
c00075b2:	3c 04                	cmp    al,0x4
c00075b4:	74 50                	je     c0007606 <f_mkfs+0x295>
c00075b6:	eb 1b                	jmp    c00075d3 <f_mkfs+0x262>
c00075b8:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c00075bd:	0f 87 73 0a 00 00    	ja     c0008036 <f_mkfs+0xcc5>
c00075c3:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c00075c9:	76 08                	jbe    c00075d3 <f_mkfs+0x262>
c00075cb:	c7 44 24 08 80 00 00 00 	mov    DWORD PTR [esp+0x8],0x80
c00075d3:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c00075d7:	8a 4c 24 3f          	mov    cl,BYTE PTR [esp+0x3f]
c00075db:	83 e0 01             	and    eax,0x1
c00075de:	80 e1 02             	and    cl,0x2
c00075e1:	88 4c 24 54          	mov    BYTE PTR [esp+0x54],cl
c00075e5:	74 0d                	je     c00075f4 <f_mkfs+0x283>
c00075e7:	84 c0                	test   al,al
c00075e9:	0f 84 53 09 00 00    	je     c0007f42 <f_mkfs+0xbd1>
c00075ef:	e9 12 08 00 00       	jmp    c0007e06 <f_mkfs+0xa95>
c00075f4:	bb 13 00 00 00       	mov    ebx,0x13
c00075f9:	84 c0                	test   al,al
c00075fb:	0f 85 05 08 00 00    	jne    c0007e06 <f_mkfs+0xa95>
c0007601:	e9 39 0e 00 00       	jmp    c000843f <f_mkfs+0x10ce>
c0007606:	31 c0                	xor    eax,eax
c0007608:	ba ff 0f 00 00       	mov    edx,0xfff
c000760d:	89 c7                	mov    edi,eax
c000760f:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007612:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0007616:	0f 83 1a 0a 00 00    	jae    c0008036 <f_mkfs+0xcc5>
c000761c:	81 fb ff 01 00 00    	cmp    ebx,0x1ff
c0007622:	77 39                	ja     c000765d <f_mkfs+0x2ec>
c0007624:	ba ff ff 07 00       	mov    edx,0x7ffff
c0007629:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0007631:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007634:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007638:	73 08                	jae    c0007642 <f_mkfs+0x2d1>
c000763a:	c7 44 24 08 40 00 00 00 	mov    DWORD PTR [esp+0x8],0x40
c0007642:	b8 ff ff ff 03       	mov    eax,0x3ffffff
c0007647:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000764a:	b8 00 00 00 00       	mov    eax,0x0
c000764f:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007653:	73 08                	jae    c000765d <f_mkfs+0x2ec>
c0007655:	c7 44 24 08 00 01 00 00 	mov    DWORD PTR [esp+0x8],0x100
c000765d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007661:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0007665:	83 c0 20             	add    eax,0x20
c0007668:	83 d2 00             	adc    edx,0x0
c000766b:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000766f:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0007673:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007677:	31 d2                	xor    edx,edx
c0007679:	31 ff                	xor    edi,edi
c000767b:	52                   	push   edx
c000767c:	89 fb                	mov    ebx,edi
c000767e:	50                   	push   eax
c000767f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0007683:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0007687:	e8 10 f4 01 00       	call   c0026a9c <__udivdi3>
c000768c:	83 c4 10             	add    esp,0x10
c000768f:	c1 e0 02             	shl    eax,0x2
c0007692:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0007696:	05 07 02 00 00       	add    eax,0x207
c000769b:	89 f1                	mov    ecx,esi
c000769d:	c1 e8 09             	shr    eax,0x9
c00076a0:	83 c1 ff             	add    ecx,0xffffffff
c00076a3:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c00076a7:	83 d3 ff             	adc    ebx,0xffffffff
c00076aa:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c00076ae:	13 5c 24 4c          	adc    ebx,DWORD PTR [esp+0x4c]
c00076b2:	31 d2                	xor    edx,edx
c00076b4:	01 c8                	add    eax,ecx
c00076b6:	11 da                	adc    edx,ebx
c00076b8:	89 c1                	mov    ecx,eax
c00076ba:	f7 de                	neg    esi
c00076bc:	89 d0                	mov    eax,edx
c00076be:	83 d7 00             	adc    edi,0x0
c00076c1:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00076c5:	f7 df                	neg    edi
c00076c7:	21 f1                	and    ecx,esi
c00076c9:	21 f8                	and    eax,edi
c00076cb:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00076cf:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00076d3:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00076d7:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00076db:	2b 4c 24 10          	sub    ecx,DWORD PTR [esp+0x10]
c00076df:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00076e2:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c00076e6:	0f ac d0 01          	shrd   eax,edx,0x1
c00076ea:	89 df                	mov    edi,ebx
c00076ec:	d1 ea                	shr    edx,1
c00076ee:	39 c1                	cmp    ecx,eax
c00076f0:	19 d7                	sbb    edi,edx
c00076f2:	0f 83 3e 09 00 00    	jae    c0008036 <f_mkfs+0xcc5>
c00076f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00076fc:	31 d2                	xor    edx,edx
c00076fe:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
c0007702:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007706:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c000770a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000770d:	03 44 24 68          	add    eax,DWORD PTR [esp+0x68]
c0007711:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c0007715:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007719:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000771d:	83 f8 0f             	cmp    eax,0xf
c0007720:	0f 86 10 09 00 00    	jbe    c0008036 <f_mkfs+0xcc5>
c0007726:	81 7c 24 38 fd ff ff 7f 	cmp    DWORD PTR [esp+0x38],0x7ffffffd
c000772e:	0f 87 02 09 00 00    	ja     c0008036 <f_mkfs+0xcc5>
c0007734:	31 d2                	xor    edx,edx
c0007736:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000773a:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c0007742:	83 c0 07             	add    eax,0x7
c0007745:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000774d:	c1 e8 03             	shr    eax,0x3
c0007750:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0007757:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000775b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000775f:	c1 e0 09             	shl    eax,0x9
c0007762:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007766:	48                   	dec    eax
c0007767:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000776b:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000776f:	03 44 24 50          	add    eax,DWORD PTR [esp+0x50]
c0007773:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c0007777:	31 d2                	xor    edx,edx
c0007779:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000777d:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c0007784:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007788:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c000778d:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0007791:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c0007795:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007799:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000779d:	31 ff                	xor    edi,edi
c000779f:	31 f6                	xor    esi,esi
c00077a1:	31 db                	xor    ebx,ebx
c00077a3:	85 ff                	test   edi,edi
c00077a5:	74 05                	je     c00077ac <f_mkfs+0x43b>
c00077a7:	4f                   	dec    edi
c00077a8:	74 44                	je     c00077ee <f_mkfs+0x47d>
c00077aa:	eb 4f                	jmp    c00077fb <f_mkfs+0x48a>
c00077ac:	83 ec 0c             	sub    esp,0xc
c00077af:	0f b7 c3             	movzx  eax,bx
c00077b2:	50                   	push   eax
c00077b3:	e8 05 0e 00 00       	call   c00085bd <ff_wtoupper>
c00077b8:	83 c4 10             	add    esp,0x10
c00077bb:	89 c1                	mov    ecx,eax
c00077bd:	8d 53 01             	lea    edx,[ebx+0x1]
c00077c0:	66 39 c3             	cmp    bx,ax
c00077c3:	75 3e                	jne    c0007803 <f_mkfs+0x492>
c00077c5:	be 01 00 00 00       	mov    esi,0x1
c00077ca:	89 df                	mov    edi,ebx
c00077cc:	66 01 f7             	add    di,si
c00077cf:	75 07                	jne    c00077d8 <f_mkfs+0x467>
c00077d1:	83 fe 7f             	cmp    esi,0x7f
c00077d4:	77 31                	ja     c0007807 <f_mkfs+0x496>
c00077d6:	eb 16                	jmp    c00077ee <f_mkfs+0x47d>
c00077d8:	83 ec 0c             	sub    esp,0xc
c00077db:	0f b7 ff             	movzx  edi,di
c00077de:	57                   	push   edi
c00077df:	e8 d9 0d 00 00       	call   c00085bd <ff_wtoupper>
c00077e4:	83 c4 10             	add    esp,0x10
c00077e7:	39 c7                	cmp    edi,eax
c00077e9:	75 e6                	jne    c00077d1 <f_mkfs+0x460>
c00077eb:	46                   	inc    esi
c00077ec:	eb dc                	jmp    c00077ca <f_mkfs+0x459>
c00077ee:	31 c0                	xor    eax,eax
c00077f0:	89 d9                	mov    ecx,ebx
c00077f2:	4e                   	dec    esi
c00077f3:	0f 95 c0             	setne  al
c00077f6:	43                   	inc    ebx
c00077f7:	89 c7                	mov    edi,eax
c00077f9:	eb 14                	jmp    c000780f <f_mkfs+0x49e>
c00077fb:	89 f1                	mov    ecx,esi
c00077fd:	01 f3                	add    ebx,esi
c00077ff:	31 ff                	xor    edi,edi
c0007801:	eb 0c                	jmp    c000780f <f_mkfs+0x49e>
c0007803:	89 d3                	mov    ebx,edx
c0007805:	eb 08                	jmp    c000780f <f_mkfs+0x49e>
c0007807:	bf 02 00 00 00       	mov    edi,0x2
c000780c:	83 c9 ff             	or     ecx,0xffffffff
c000780f:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007813:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007816:	88 4c 05 00          	mov    BYTE PTR [ebp+eax*1+0x0],cl
c000781a:	0f b6 c1             	movzx  eax,cl
c000781d:	e8 3a a9 ff ff       	call   c000215c <xsum32>
c0007822:	66 c1 e9 08          	shr    cx,0x8
c0007826:	89 c2                	mov    edx,eax
c0007828:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000782b:	88 4c 05 01          	mov    BYTE PTR [ebp+eax*1+0x1],cl
c000782f:	0f b7 c1             	movzx  eax,cx
c0007832:	e8 25 a9 ff ff       	call   c000215c <xsum32>
c0007837:	83 44 24 54 02       	add    DWORD PTR [esp+0x54],0x2
c000783c:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007840:	66 85 db             	test   bx,bx
c0007843:	74 1f                	je     c0007864 <f_mkfs+0x4f3>
c0007845:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007848:	8b 94 24 bc 00 00 00 	mov    edx,DWORD PTR [esp+0xbc]
c000784f:	83 c0 02             	add    eax,0x2
c0007852:	81 e2 00 fe ff ff    	and    edx,0xfffffe00
c0007858:	39 c2                	cmp    edx,eax
c000785a:	74 08                	je     c0007864 <f_mkfs+0x4f3>
c000785c:	89 04 24             	mov    DWORD PTR [esp],eax
c000785f:	e9 3f ff ff ff       	jmp    c00077a3 <f_mkfs+0x432>
c0007864:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007867:	83 ec 0c             	sub    esp,0xc
c000786a:	05 01 02 00 00       	add    eax,0x201
c000786f:	c1 e8 09             	shr    eax,0x9
c0007872:	50                   	push   eax
c0007873:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0007877:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000787b:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000787f:	55                   	push   ebp
c0007880:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007884:	e8 a3 a3 ff ff       	call   c0001c2c <disk_write>
c0007889:	83 c4 20             	add    esp,0x20
c000788c:	85 c0                	test   eax,eax
c000788e:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0007891:	0f 85 8b 0b 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007897:	89 d0                	mov    eax,edx
c0007899:	31 d2                	xor    edx,edx
c000789b:	01 44 24 40          	add    DWORD PTR [esp+0x40],eax
c000789f:	11 54 24 44          	adc    DWORD PTR [esp+0x44],edx
c00078a3:	66 85 db             	test   bx,bx
c00078a6:	74 04                	je     c00078ac <f_mkfs+0x53b>
c00078a8:	31 c0                	xor    eax,eax
c00078aa:	eb b0                	jmp    c000785c <f_mkfs+0x4eb>
c00078ac:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00078b0:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c00078b4:	03 44 24 54          	add    eax,DWORD PTR [esp+0x54]
c00078b8:	8d 9e ff 01 00 00    	lea    ebx,[esi+0x1ff]
c00078be:	31 d2                	xor    edx,edx
c00078c0:	c7 84 24 88 00 00 00 01 00 00 00 	mov    DWORD PTR [esp+0x88],0x1
c00078cb:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00078cf:	c1 eb 09             	shr    ebx,0x9
c00078d2:	89 84 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],eax
c00078d9:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00078dd:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c00078e1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00078e5:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c00078e9:	8d 70 01             	lea    esi,[eax+0x1]
c00078ec:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00078f0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00078f4:	8b 84 24 bc 00 00 00 	mov    eax,DWORD PTR [esp+0xbc]
c00078fb:	31 d2                	xor    edx,edx
c00078fd:	25 00 fe ff ff       	and    eax,0xfffffe00
c0007902:	89 04 24             	mov    DWORD PTR [esp],eax
c0007905:	89 c1                	mov    ecx,eax
c0007907:	89 e8                	mov    eax,ebp
c0007909:	e8 e7 a3 ff ff       	call   c0001cf5 <mem_set>
c000790e:	31 c0                	xor    eax,eax
c0007910:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007913:	76 10                	jbe    c0007925 <f_mkfs+0x5b4>
c0007915:	83 fe 07             	cmp    esi,0x7
c0007918:	76 0b                	jbe    c0007925 <f_mkfs+0x5b4>
c000791a:	40                   	inc    eax
c000791b:	83 ee 08             	sub    esi,0x8
c000791e:	c6 44 05 ff ff       	mov    BYTE PTR [ebp+eax*1-0x1],0xff
c0007923:	eb eb                	jmp    c0007910 <f_mkfs+0x59f>
c0007925:	b2 01                	mov    dl,0x1
c0007927:	8d 4c 05 00          	lea    ecx,[ebp+eax*1+0x0]
c000792b:	85 f6                	test   esi,esi
c000792d:	74 0c                	je     c000793b <f_mkfs+0x5ca>
c000792f:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007932:	76 07                	jbe    c000793b <f_mkfs+0x5ca>
c0007934:	08 11                	or     BYTE PTR [ecx],dl
c0007936:	4e                   	dec    esi
c0007937:	d1 e2                	shl    edx,1
c0007939:	eb f0                	jmp    c000792b <f_mkfs+0x5ba>
c000793b:	89 df                	mov    edi,ebx
c000793d:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c0007941:	76 04                	jbe    c0007947 <f_mkfs+0x5d6>
c0007943:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0007947:	83 ec 0c             	sub    esp,0xc
c000794a:	57                   	push   edi
c000794b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000794f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007953:	55                   	push   ebp
c0007954:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007958:	e8 cf a2 ff ff       	call   c0001c2c <disk_write>
c000795d:	83 c4 20             	add    esp,0x20
c0007960:	85 c0                	test   eax,eax
c0007962:	0f 85 ba 0a 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007968:	31 d2                	xor    edx,edx
c000796a:	01 7c 24 28          	add    DWORD PTR [esp+0x28],edi
c000796e:	11 54 24 2c          	adc    DWORD PTR [esp+0x2c],edx
c0007972:	29 fb                	sub    ebx,edi
c0007974:	0f 85 7a ff ff ff    	jne    c00078f4 <f_mkfs+0x583>
c000797a:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000797e:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0007986:	31 f6                	xor    esi,esi
c0007988:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000798c:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000798f:	31 d2                	xor    edx,edx
c0007991:	89 e8                	mov    eax,ebp
c0007993:	e8 5d a3 ff ff       	call   c0001cf5 <mem_set>
c0007998:	31 c9                	xor    ecx,ecx
c000799a:	85 db                	test   ebx,ebx
c000799c:	75 40                	jne    c00079de <f_mkfs+0x66d>
c000799e:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c00079a3:	89 e8                	mov    eax,ebp
c00079a5:	bb 02 00 00 00       	mov    ebx,0x2
c00079aa:	e8 28 a3 ff ff       	call   c0001cd7 <st_dword>
c00079af:	8d 45 04             	lea    eax,[ebp+0x4]
c00079b2:	83 ca ff             	or     edx,0xffffffff
c00079b5:	e8 1d a3 ff ff       	call   c0001cd7 <st_dword>
c00079ba:	b9 08 00 00 00       	mov    ecx,0x8
c00079bf:	eb 1d                	jmp    c00079de <f_mkfs+0x66d>
c00079c1:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c00079c4:	76 3b                	jbe    c0007a01 <f_mkfs+0x690>
c00079c6:	43                   	inc    ebx
c00079c7:	83 fe 01             	cmp    esi,0x1
c00079ca:	89 da                	mov    edx,ebx
c00079cc:	77 03                	ja     c00079d1 <f_mkfs+0x660>
c00079ce:	83 ca ff             	or     edx,0xffffffff
c00079d1:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c00079d5:	4e                   	dec    esi
c00079d6:	e8 fc a2 ff ff       	call   c0001cd7 <st_dword>
c00079db:	83 c1 04             	add    ecx,0x4
c00079de:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00079e2:	85 f6                	test   esi,esi
c00079e4:	75 db                	jne    c00079c1 <f_mkfs+0x650>
c00079e6:	83 7c 24 28 02       	cmp    DWORD PTR [esp+0x28],0x2
c00079eb:	77 14                	ja     c0007a01 <f_mkfs+0x690>
c00079ed:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c00079f1:	8b b4 84 80 00 00 00 	mov    esi,DWORD PTR [esp+eax*4+0x80]
c00079f8:	85 f6                	test   esi,esi
c00079fa:	74 05                	je     c0007a01 <f_mkfs+0x690>
c00079fc:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c00079ff:	77 dd                	ja     c00079de <f_mkfs+0x66d>
c0007a01:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0007a05:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007a09:	39 cf                	cmp    edi,ecx
c0007a0b:	76 02                	jbe    c0007a0f <f_mkfs+0x69e>
c0007a0d:	89 cf                	mov    edi,ecx
c0007a0f:	83 ec 0c             	sub    esp,0xc
c0007a12:	57                   	push   edi
c0007a13:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007a17:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007a1b:	55                   	push   ebp
c0007a1c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007a20:	e8 07 a2 ff ff       	call   c0001c2c <disk_write>
c0007a25:	83 c4 20             	add    esp,0x20
c0007a28:	85 c0                	test   eax,eax
c0007a2a:	0f 85 f2 09 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007a30:	31 d2                	xor    edx,edx
c0007a32:	01 7c 24 48          	add    DWORD PTR [esp+0x48],edi
c0007a36:	11 54 24 4c          	adc    DWORD PTR [esp+0x4c],edx
c0007a3a:	29 7c 24 40          	sub    DWORD PTR [esp+0x40],edi
c0007a3e:	0f 85 48 ff ff ff    	jne    c000798c <f_mkfs+0x61b>
c0007a44:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007a47:	31 d2                	xor    edx,edx
c0007a49:	89 e8                	mov    eax,ebp
c0007a4b:	31 ff                	xor    edi,edi
c0007a4d:	e8 a3 a2 ff ff       	call   c0001cf5 <mem_set>
c0007a52:	8d 45 34             	lea    eax,[ebp+0x34]
c0007a55:	ba 02 00 00 00       	mov    edx,0x2
c0007a5a:	c6 45 00 83          	mov    BYTE PTR [ebp+0x0],0x83
c0007a5e:	c6 45 20 81          	mov    BYTE PTR [ebp+0x20],0x81
c0007a62:	e8 70 a2 ff ff       	call   c0001cd7 <st_dword>
c0007a67:	8d 45 38             	lea    eax,[ebp+0x38]
c0007a6a:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c0007a6e:	e8 64 a2 ff ff       	call   c0001cd7 <st_dword>
c0007a73:	8d 45 44             	lea    eax,[ebp+0x44]
c0007a76:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007a7a:	c6 45 40 82          	mov    BYTE PTR [ebp+0x40],0x82
c0007a7e:	e8 54 a2 ff ff       	call   c0001cd7 <st_dword>
c0007a83:	8d 45 54             	lea    eax,[ebp+0x54]
c0007a86:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0007a8a:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007a8e:	83 c2 02             	add    edx,0x2
c0007a91:	e8 41 a2 ff ff       	call   c0001cd7 <st_dword>
c0007a96:	8d 45 58             	lea    eax,[ebp+0x58]
c0007a99:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c0007a9d:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007aa1:	e8 31 a2 ff ff       	call   c0001cd7 <st_dword>
c0007aa6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007aaa:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c0007aaf:	89 c6                	mov    esi,eax
c0007ab1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007ab5:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0007ab9:	89 04 24             	mov    DWORD PTR [esp],eax
c0007abc:	13 7c 24 1c          	adc    edi,DWORD PTR [esp+0x1c]
c0007ac0:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0007ac3:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007ac7:	39 cb                	cmp    ebx,ecx
c0007ac9:	76 02                	jbe    c0007acd <f_mkfs+0x75c>
c0007acb:	89 cb                	mov    ebx,ecx
c0007acd:	83 ec 0c             	sub    esp,0xc
c0007ad0:	53                   	push   ebx
c0007ad1:	57                   	push   edi
c0007ad2:	56                   	push   esi
c0007ad3:	55                   	push   ebp
c0007ad4:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007ad8:	e8 4f a1 ff ff       	call   c0001c2c <disk_write>
c0007add:	83 c4 20             	add    esp,0x20
c0007ae0:	85 c0                	test   eax,eax
c0007ae2:	0f 85 3a 09 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007ae8:	31 d2                	xor    edx,edx
c0007aea:	b9 00 02 00 00       	mov    ecx,0x200
c0007aef:	89 e8                	mov    eax,ebp
c0007af1:	e8 ff a1 ff ff       	call   c0001cf5 <mem_set>
c0007af6:	31 d2                	xor    edx,edx
c0007af8:	01 de                	add    esi,ebx
c0007afa:	11 d7                	adc    edi,edx
c0007afc:	29 1c 24             	sub    DWORD PTR [esp],ebx
c0007aff:	75 bf                	jne    c0007ac0 <f_mkfs+0x74f>
c0007b01:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007b05:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0007b09:	c7 44 24 30 02 00 00 00 	mov    DWORD PTR [esp+0x30],0x2
c0007b11:	b9 00 02 00 00       	mov    ecx,0x200
c0007b16:	31 d2                	xor    edx,edx
c0007b18:	89 e8                	mov    eax,ebp
c0007b1a:	e8 d6 a1 ff ff       	call   c0001cf5 <mem_set>
c0007b1f:	b9 0b 00 00 00       	mov    ecx,0xb
c0007b24:	ba 40 95 02 c0       	mov    edx,0xc0029540
c0007b29:	89 e8                	mov    eax,ebp
c0007b2b:	e8 b0 a1 ff ff       	call   c0001ce0 <mem_cpy>
c0007b30:	8d 45 40             	lea    eax,[ebp+0x40]
c0007b33:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0007b37:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0007b3b:	e8 9a a1 ff ff       	call   c0001cda <st_qword>
c0007b40:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0007b44:	8d 45 48             	lea    eax,[ebp+0x48]
c0007b47:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0007b4b:	e8 8a a1 ff ff       	call   c0001cda <st_qword>
c0007b50:	8d 45 50             	lea    eax,[ebp+0x50]
c0007b53:	ba 20 00 00 00       	mov    edx,0x20
c0007b58:	e8 7a a1 ff ff       	call   c0001cd7 <st_dword>
c0007b5d:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0007b61:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0007b65:	e8 6d a1 ff ff       	call   c0001cd7 <st_dword>
c0007b6a:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0007b6e:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0007b72:	2b 54 24 68          	sub    edx,DWORD PTR [esp+0x68]
c0007b76:	e8 5c a1 ff ff       	call   c0001cd7 <st_dword>
c0007b7b:	8d 45 5c             	lea    eax,[ebp+0x5c]
c0007b7e:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007b82:	e8 50 a1 ff ff       	call   c0001cd7 <st_dword>
c0007b87:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0007b8b:	8d 50 02             	lea    edx,[eax+0x2]
c0007b8e:	8d 45 60             	lea    eax,[ebp+0x60]
c0007b91:	e8 41 a1 ff ff       	call   c0001cd7 <st_dword>
c0007b96:	8d 45 64             	lea    eax,[ebp+0x64]
c0007b99:	ba 00 00 21 50       	mov    edx,0x50210000
c0007b9e:	e8 34 a1 ff ff       	call   c0001cd7 <st_dword>
c0007ba3:	8d 45 68             	lea    eax,[ebp+0x68]
c0007ba6:	ba 00 01 00 00       	mov    edx,0x100
c0007bab:	e8 23 a1 ff ff       	call   c0001cd3 <st_word>
c0007bb0:	c6 45 6c 00          	mov    BYTE PTR [ebp+0x6c],0x0
c0007bb4:	b8 0a 00 00 00       	mov    eax,0xa
c0007bb9:	48                   	dec    eax
c0007bba:	74 05                	je     c0007bc1 <f_mkfs+0x850>
c0007bbc:	fe 45 6c             	inc    BYTE PTR [ebp+0x6c]
c0007bbf:	eb f8                	jmp    c0007bb9 <f_mkfs+0x848>
c0007bc1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007bc5:	c6 45 6d 00          	mov    BYTE PTR [ebp+0x6d],0x0
c0007bc9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007bcd:	d1 6c 24 18          	shr    DWORD PTR [esp+0x18],1
c0007bd1:	74 05                	je     c0007bd8 <f_mkfs+0x867>
c0007bd3:	fe 45 6d             	inc    BYTE PTR [ebp+0x6d]
c0007bd6:	eb f5                	jmp    c0007bcd <f_mkfs+0x85c>
c0007bd8:	8d 45 78             	lea    eax,[ebp+0x78]
c0007bdb:	ba eb fe 00 00       	mov    edx,0xfeeb
c0007be0:	66 c7 45 6e 01 80    	mov    WORD PTR [ebp+0x6e],0x8001
c0007be6:	31 db                	xor    ebx,ebx
c0007be8:	e8 e6 a0 ff ff       	call   c0001cd3 <st_word>
c0007bed:	8d 85 fe 01 00 00    	lea    eax,[ebp+0x1fe]
c0007bf3:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007bf8:	89 04 24             	mov    DWORD PTR [esp],eax
c0007bfb:	e8 d3 a0 ff ff       	call   c0001cd3 <st_word>
c0007c00:	31 c9                	xor    ecx,ecx
c0007c02:	8d 41 96             	lea    eax,[ecx-0x6a]
c0007c05:	83 f8 01             	cmp    eax,0x1
c0007c08:	76 13                	jbe    c0007c1d <f_mkfs+0x8ac>
c0007c0a:	83 f9 70             	cmp    ecx,0x70
c0007c0d:	74 0e                	je     c0007c1d <f_mkfs+0x8ac>
c0007c0f:	89 da                	mov    edx,ebx
c0007c11:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0007c16:	e8 41 a5 ff ff       	call   c000215c <xsum32>
c0007c1b:	89 c3                	mov    ebx,eax
c0007c1d:	41                   	inc    ecx
c0007c1e:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007c24:	75 dc                	jne    c0007c02 <f_mkfs+0x891>
c0007c26:	89 f0                	mov    eax,esi
c0007c28:	89 fa                	mov    edx,edi
c0007c2a:	83 c0 01             	add    eax,0x1
c0007c2d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007c31:	83 d2 00             	adc    edx,0x0
c0007c34:	83 ec 0c             	sub    esp,0xc
c0007c37:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007c3b:	6a 01                	push   0x1
c0007c3d:	57                   	push   edi
c0007c3e:	56                   	push   esi
c0007c3f:	55                   	push   ebp
c0007c40:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007c44:	e8 e3 9f ff ff       	call   c0001c2c <disk_write>
c0007c49:	83 c4 20             	add    esp,0x20
c0007c4c:	85 c0                	test   eax,eax
c0007c4e:	0f 85 ce 07 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007c54:	31 d2                	xor    edx,edx
c0007c56:	b9 00 02 00 00       	mov    ecx,0x200
c0007c5b:	89 e8                	mov    eax,ebp
c0007c5d:	e8 93 a0 ff ff       	call   c0001cf5 <mem_set>
c0007c62:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007c67:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007c6a:	e8 64 a0 ff ff       	call   c0001cd3 <st_word>
c0007c6f:	89 f0                	mov    eax,esi
c0007c71:	89 fa                	mov    edx,edi
c0007c73:	83 c0 09             	add    eax,0x9
c0007c76:	83 d2 00             	adc    edx,0x0
c0007c79:	89 04 24             	mov    DWORD PTR [esp],eax
c0007c7c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007c80:	31 c9                	xor    ecx,ecx
c0007c82:	41                   	inc    ecx
c0007c83:	89 da                	mov    edx,ebx
c0007c85:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007c8a:	e8 cd a4 ff ff       	call   c000215c <xsum32>
c0007c8f:	89 c3                	mov    ebx,eax
c0007c91:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007c97:	75 e9                	jne    c0007c82 <f_mkfs+0x911>
c0007c99:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007c9d:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0007ca1:	83 c0 01             	add    eax,0x1
c0007ca4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0007ca8:	83 d2 00             	adc    edx,0x0
c0007cab:	83 ec 0c             	sub    esp,0xc
c0007cae:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0007cb2:	6a 01                	push   0x1
c0007cb4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007cb8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007cbc:	55                   	push   ebp
c0007cbd:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007cc1:	e8 66 9f ff ff       	call   c0001c2c <disk_write>
c0007cc6:	83 c4 20             	add    esp,0x20
c0007cc9:	85 c0                	test   eax,eax
c0007ccb:	0f 85 51 07 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007cd1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007cd5:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c0007cd9:	75 09                	jne    c0007ce4 <f_mkfs+0x973>
c0007cdb:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007cde:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0007ce2:	74 12                	je     c0007cf6 <f_mkfs+0x985>
c0007ce4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007ce8:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007cec:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007cf0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007cf4:	eb 8a                	jmp    c0007c80 <f_mkfs+0x90f>
c0007cf6:	31 d2                	xor    edx,edx
c0007cf8:	b9 00 02 00 00       	mov    ecx,0x200
c0007cfd:	89 e8                	mov    eax,ebp
c0007cff:	e8 f1 9f ff ff       	call   c0001cf5 <mem_set>
c0007d04:	83 c6 0b             	add    esi,0xb
c0007d07:	83 d7 00             	adc    edi,0x0
c0007d0a:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0007d0e:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c0007d12:	31 c9                	xor    ecx,ecx
c0007d14:	41                   	inc    ecx
c0007d15:	89 da                	mov    edx,ebx
c0007d17:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007d1c:	e8 3b a4 ff ff       	call   c000215c <xsum32>
c0007d21:	89 c3                	mov    ebx,eax
c0007d23:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007d29:	75 e9                	jne    c0007d14 <f_mkfs+0x9a3>
c0007d2b:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007d2e:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007d32:	83 c6 01             	add    esi,0x1
c0007d35:	83 d7 00             	adc    edi,0x0
c0007d38:	83 ec 0c             	sub    esp,0xc
c0007d3b:	6a 01                	push   0x1
c0007d3d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007d41:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007d45:	55                   	push   ebp
c0007d46:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007d4a:	e8 dd 9e ff ff       	call   c0001c2c <disk_write>
c0007d4f:	83 c4 20             	add    esp,0x20
c0007d52:	85 c0                	test   eax,eax
c0007d54:	0f 85 c8 06 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007d5a:	3b 7c 24 24          	cmp    edi,DWORD PTR [esp+0x24]
c0007d5e:	75 06                	jne    c0007d66 <f_mkfs+0x9f5>
c0007d60:	3b 74 24 20          	cmp    esi,DWORD PTR [esp+0x20]
c0007d64:	74 09                	je     c0007d6f <f_mkfs+0x9fe>
c0007d66:	89 34 24             	mov    DWORD PTR [esp],esi
c0007d69:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0007d6d:	eb a3                	jmp    c0007d12 <f_mkfs+0x9a1>
c0007d6f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007d73:	89 da                	mov    edx,ebx
c0007d75:	01 e8                	add    eax,ebp
c0007d77:	e8 5b 9f ff ff       	call   c0001cd7 <st_dword>
c0007d7c:	83 44 24 18 04       	add    DWORD PTR [esp+0x18],0x4
c0007d81:	81 7c 24 18 00 02 00 00 	cmp    DWORD PTR [esp+0x18],0x200
c0007d89:	75 e4                	jne    c0007d6f <f_mkfs+0x9fe>
c0007d8b:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007d8e:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007d92:	83 c6 02             	add    esi,0x2
c0007d95:	83 d7 00             	adc    edi,0x0
c0007d98:	83 ec 0c             	sub    esp,0xc
c0007d9b:	6a 01                	push   0x1
c0007d9d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007da1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007da5:	55                   	push   ebp
c0007da6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007daa:	e8 7d 9e ff ff       	call   c0001c2c <disk_write>
c0007daf:	83 c4 20             	add    esp,0x20
c0007db2:	85 c0                	test   eax,eax
c0007db4:	0f 85 68 06 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007dba:	83 7c 24 30 01       	cmp    DWORD PTR [esp+0x30],0x1
c0007dbf:	74 0d                	je     c0007dce <f_mkfs+0xa5d>
c0007dc1:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0007dc9:	e9 43 fd ff ff       	jmp    c0007b11 <f_mkfs+0x7a0>
c0007dce:	b1 07                	mov    cl,0x7
c0007dd0:	e9 e3 05 00 00       	jmp    c00083b8 <f_mkfs+0x1047>
c0007dd5:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0007dda:	0f 85 4f 02 00 00    	jne    c000802f <f_mkfs+0xcbe>
c0007de0:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007de5:	0f 86 22 02 00 00    	jbe    c000800d <f_mkfs+0xc9c>
c0007deb:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007df0:	0f 85 81 06 00 00    	jne    c0008477 <f_mkfs+0x1106>
c0007df6:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007df9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007dfd:	83 f8 40             	cmp    eax,0x40
c0007e00:	0f 87 51 06 00 00    	ja     c0008457 <f_mkfs+0x10e6>
c0007e06:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007e0a:	85 ff                	test   edi,edi
c0007e0c:	75 1c                	jne    c0007e2a <f_mkfs+0xab9>
c0007e0e:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007e11:	ba 40 94 02 c0       	mov    edx,0xc0029440
c0007e16:	c1 e9 0c             	shr    ecx,0xc
c0007e19:	bf 01 00 00 00       	mov    edi,0x1
c0007e1e:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007e21:	66 85 c0             	test   ax,ax
c0007e24:	0f 85 95 01 00 00    	jne    c0007fbf <f_mkfs+0xc4e>
c0007e2a:	31 d2                	xor    edx,edx
c0007e2c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007e2f:	f7 f7                	div    edi
c0007e31:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007e36:	0f 86 95 01 00 00    	jbe    c0007fd1 <f_mkfs+0xc60>
c0007e3c:	83 c0 02             	add    eax,0x2
c0007e3f:	c6 44 24 18 02       	mov    BYTE PTR [esp+0x18],0x2
c0007e44:	01 c0                	add    eax,eax
c0007e46:	05 ff 01 00 00       	add    eax,0x1ff
c0007e4b:	be 01 00 00 00       	mov    esi,0x1
c0007e50:	c1 e8 09             	shr    eax,0x9
c0007e53:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0007e57:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007e5b:	c1 e0 05             	shl    eax,0x5
c0007e5e:	c1 e8 09             	shr    eax,0x9
c0007e61:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007e65:	0f b6 44 24 48       	movzx  eax,BYTE PTR [esp+0x48]
c0007e6a:	31 d2                	xor    edx,edx
c0007e6c:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007e70:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0007e74:	89 f0                	mov    eax,esi
c0007e76:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0007e7a:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0007e7e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007e82:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0007e86:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007e8a:	31 d2                	xor    edx,edx
c0007e8c:	0f af 44 24 40       	imul   eax,DWORD PTR [esp+0x40]
c0007e91:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007e95:	13 54 24 34          	adc    edx,DWORD PTR [esp+0x34]
c0007e99:	31 db                	xor    ebx,ebx
c0007e9b:	01 c8                	add    eax,ecx
c0007e9d:	11 da                	adc    edx,ebx
c0007e9f:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007ea3:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0007ea7:	8b 5c 24 58          	mov    ebx,DWORD PTR [esp+0x58]
c0007eab:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007eaf:	8d 4c 13 ff          	lea    ecx,[ebx+edx*1-0x1]
c0007eb3:	f7 da                	neg    edx
c0007eb5:	21 d1                	and    ecx,edx
c0007eb7:	29 d9                	sub    ecx,ebx
c0007eb9:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007ebe:	0f 85 20 01 00 00    	jne    c0007fe4 <f_mkfs+0xc73>
c0007ec4:	31 db                	xor    ebx,ebx
c0007ec6:	01 ce                	add    esi,ecx
c0007ec8:	01 4c 24 30          	add    DWORD PTR [esp+0x30],ecx
c0007ecc:	11 5c 24 34          	adc    DWORD PTR [esp+0x34],ebx
c0007ed0:	31 d2                	xor    edx,edx
c0007ed2:	89 f8                	mov    eax,edi
c0007ed4:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0007ed8:	c1 e0 04             	shl    eax,0x4
c0007edb:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c0007edf:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0007ee3:	03 44 24 58          	add    eax,DWORD PTR [esp+0x58]
c0007ee7:	13 54 24 5c          	adc    edx,DWORD PTR [esp+0x5c]
c0007eeb:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007eee:	19 d3                	sbb    ebx,edx
c0007ef0:	0f 82 40 01 00 00    	jb     c0008036 <f_mkfs+0xcc5>
c0007ef6:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007ef9:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007efd:	89 c8                	mov    eax,ecx
c0007eff:	0f af 54 24 40       	imul   edx,DWORD PTR [esp+0x40]
c0007f04:	2b 44 24 50          	sub    eax,DWORD PTR [esp+0x50]
c0007f08:	29 f0                	sub    eax,esi
c0007f0a:	29 d0                	sub    eax,edx
c0007f0c:	31 d2                	xor    edx,edx
c0007f0e:	f7 f7                	div    edi
c0007f10:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007f15:	89 c3                	mov    ebx,eax
c0007f17:	0f 85 b8 fe ff ff    	jne    c0007dd5 <f_mkfs+0xa64>
c0007f1d:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007f22:	0f 87 1d 01 00 00    	ja     c0008045 <f_mkfs+0xcd4>
c0007f28:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007f2d:	0f 85 03 01 00 00    	jne    c0008036 <f_mkfs+0xcc5>
c0007f33:	83 ff 01             	cmp    edi,0x1
c0007f36:	0f 86 fa 00 00 00    	jbe    c0008036 <f_mkfs+0xcc5>
c0007f3c:	d1 ef                	shr    edi,1
c0007f3e:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0007f42:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0007f46:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007f49:	85 db                	test   ebx,ebx
c0007f4b:	75 2d                	jne    c0007f7a <f_mkfs+0xc09>
c0007f4d:	89 cb                	mov    ebx,ecx
c0007f4f:	ba 50 94 02 c0       	mov    edx,0xc0029450
c0007f54:	c1 eb 11             	shr    ebx,0x11
c0007f57:	c7 44 24 08 01 00 00 00 	mov    DWORD PTR [esp+0x8],0x1
c0007f5f:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007f62:	66 85 c0             	test   ax,ax
c0007f65:	74 11                	je     c0007f78 <f_mkfs+0xc07>
c0007f67:	83 c2 02             	add    edx,0x2
c0007f6a:	39 d8                	cmp    eax,ebx
c0007f6c:	77 0a                	ja     c0007f78 <f_mkfs+0xc07>
c0007f6e:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0007f72:	01 74 24 08          	add    DWORD PTR [esp+0x8],esi
c0007f76:	eb e7                	jmp    c0007f5f <f_mkfs+0xbee>
c0007f78:	31 db                	xor    ebx,ebx
c0007f7a:	31 d2                	xor    edx,edx
c0007f7c:	89 c8                	mov    eax,ecx
c0007f7e:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007f82:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c0007f89:	2d f6 ff 00 00       	sub    eax,0xfff6
c0007f8e:	c1 ea 09             	shr    edx,0x9
c0007f91:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c0007f96:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007f9a:	0f 87 96 00 00 00    	ja     c0008036 <f_mkfs+0xcc5>
c0007fa0:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007fa4:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c0007fac:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0007fb0:	be 20 00 00 00       	mov    esi,0x20
c0007fb5:	c6 44 24 18 03       	mov    BYTE PTR [esp+0x18],0x3
c0007fba:	e9 a6 fe ff ff       	jmp    c0007e65 <f_mkfs+0xaf4>
c0007fbf:	83 c2 02             	add    edx,0x2
c0007fc2:	39 c8                	cmp    eax,ecx
c0007fc4:	0f 87 60 fe ff ff    	ja     c0007e2a <f_mkfs+0xab9>
c0007fca:	01 ff                	add    edi,edi
c0007fcc:	e9 4d fe ff ff       	jmp    c0007e1e <f_mkfs+0xaad>
c0007fd1:	8d 04 40             	lea    eax,[eax+eax*2]
c0007fd4:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0007fd9:	40                   	inc    eax
c0007fda:	d1 e8                	shr    eax,1
c0007fdc:	83 c0 03             	add    eax,0x3
c0007fdf:	e9 62 fe ff ff       	jmp    c0007e46 <f_mkfs+0xad5>
c0007fe4:	31 d2                	xor    edx,edx
c0007fe6:	89 c8                	mov    eax,ecx
c0007fe8:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0007fec:	85 d2                	test   edx,edx
c0007fee:	74 0c                	je     c0007ffc <f_mkfs+0xc8b>
c0007ff0:	49                   	dec    ecx
c0007ff1:	46                   	inc    esi
c0007ff2:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c0007ff7:	83 54 24 34 00       	adc    DWORD PTR [esp+0x34],0x0
c0007ffc:	89 c8                	mov    eax,ecx
c0007ffe:	31 d2                	xor    edx,edx
c0008000:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0008004:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c0008008:	e9 c3 fe ff ff       	jmp    c0007ed0 <f_mkfs+0xb5f>
c000800d:	3d f5 0f 00 00       	cmp    eax,0xff5
c0008012:	77 31                	ja     c0008045 <f_mkfs+0xcd4>
c0008014:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0008019:	75 1b                	jne    c0008036 <f_mkfs+0xcc5>
c000801b:	8d 04 3f             	lea    eax,[edi+edi*1]
c000801e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008022:	3d 80 00 00 00       	cmp    eax,0x80
c0008027:	0f 86 d9 fd ff ff    	jbe    c0007e06 <f_mkfs+0xa95>
c000802d:	eb 07                	jmp    c0008036 <f_mkfs+0xcc5>
c000802f:	3d f5 0f 00 00       	cmp    eax,0xff5
c0008034:	76 0a                	jbe    c0008040 <f_mkfs+0xccf>
c0008036:	bb 0e 00 00 00       	mov    ebx,0xe
c000803b:	e9 ff 03 00 00       	jmp    c000843f <f_mkfs+0x10ce>
c0008040:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0008045:	31 d2                	xor    edx,edx
c0008047:	b9 00 02 00 00       	mov    ecx,0x200
c000804c:	89 e8                	mov    eax,ebp
c000804e:	e8 a2 9c ff ff       	call   c0001cf5 <mem_set>
c0008053:	b9 0b 00 00 00       	mov    ecx,0xb
c0008058:	ba 62 95 02 c0       	mov    edx,0xc0029562
c000805d:	89 e8                	mov    eax,ebp
c000805f:	e8 7c 9c ff ff       	call   c0001ce0 <mem_cpy>
c0008064:	8d 45 0b             	lea    eax,[ebp+0xb]
c0008067:	ba 00 02 00 00       	mov    edx,0x200
c000806c:	e8 62 9c ff ff       	call   c0001cd3 <st_word>
c0008071:	89 f8                	mov    eax,edi
c0008073:	0f b7 d6             	movzx  edx,si
c0008076:	88 45 0d             	mov    BYTE PTR [ebp+0xd],al
c0008079:	8d 45 0e             	lea    eax,[ebp+0xe]
c000807c:	e8 52 9c ff ff       	call   c0001cd3 <st_word>
c0008081:	8a 44 24 48          	mov    al,BYTE PTR [esp+0x48]
c0008085:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c000808a:	88 45 10             	mov    BYTE PTR [ebp+0x10],al
c000808d:	75 08                	jne    c0008097 <f_mkfs+0xd26>
c000808f:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0008097:	8d 45 11             	lea    eax,[ebp+0x11]
c000809a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000809e:	e8 30 9c ff ff       	call   c0001cd3 <st_word>
c00080a3:	b8 ff ff 00 00       	mov    eax,0xffff
c00080a8:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c00080ac:	39 d0                	cmp    eax,edx
c00080ae:	b8 00 00 00 00       	mov    eax,0x0
c00080b3:	1b 44 24 7c          	sbb    eax,DWORD PTR [esp+0x7c]
c00080b7:	72 0a                	jb     c00080c3 <f_mkfs+0xd52>
c00080b9:	8d 45 13             	lea    eax,[ebp+0x13]
c00080bc:	e8 12 9c ff ff       	call   c0001cd3 <st_word>
c00080c1:	eb 08                	jmp    c00080cb <f_mkfs+0xd5a>
c00080c3:	8d 45 20             	lea    eax,[ebp+0x20]
c00080c6:	e8 0c 9c ff ff       	call   c0001cd7 <st_dword>
c00080cb:	8d 45 18             	lea    eax,[ebp+0x18]
c00080ce:	ba 3f 00 00 00       	mov    edx,0x3f
c00080d3:	c6 45 15 f8          	mov    BYTE PTR [ebp+0x15],0xf8
c00080d7:	e8 f7 9b ff ff       	call   c0001cd3 <st_word>
c00080dc:	8d 45 1a             	lea    eax,[ebp+0x1a]
c00080df:	ba ff 00 00 00       	mov    edx,0xff
c00080e4:	e8 ea 9b ff ff       	call   c0001cd3 <st_word>
c00080e9:	8d 45 1c             	lea    eax,[ebp+0x1c]
c00080ec:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00080f0:	e8 e2 9b ff ff       	call   c0001cd7 <st_dword>
c00080f5:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00080fa:	75 57                	jne    c0008153 <f_mkfs+0xde2>
c00080fc:	8d 45 43             	lea    eax,[ebp+0x43]
c00080ff:	ba 00 00 21 50       	mov    edx,0x50210000
c0008104:	e8 ce 9b ff ff       	call   c0001cd7 <st_dword>
c0008109:	8d 45 24             	lea    eax,[ebp+0x24]
c000810c:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0008110:	e8 c2 9b ff ff       	call   c0001cd7 <st_dword>
c0008115:	8d 45 2c             	lea    eax,[ebp+0x2c]
c0008118:	ba 02 00 00 00       	mov    edx,0x2
c000811d:	e8 b5 9b ff ff       	call   c0001cd7 <st_dword>
c0008122:	8d 45 30             	lea    eax,[ebp+0x30]
c0008125:	ba 01 00 00 00       	mov    edx,0x1
c000812a:	e8 a4 9b ff ff       	call   c0001cd3 <st_word>
c000812f:	8d 45 32             	lea    eax,[ebp+0x32]
c0008132:	ba 06 00 00 00       	mov    edx,0x6
c0008137:	e8 97 9b ff ff       	call   c0001cd3 <st_word>
c000813c:	c6 45 40 80          	mov    BYTE PTR [ebp+0x40],0x80
c0008140:	c6 45 42 29          	mov    BYTE PTR [ebp+0x42],0x29
c0008144:	8d 45 47             	lea    eax,[ebp+0x47]
c0008147:	b9 13 00 00 00       	mov    ecx,0x13
c000814c:	ba 6e 95 02 c0       	mov    edx,0xc002956e
c0008151:	eb 2f                	jmp    c0008182 <f_mkfs+0xe11>
c0008153:	8d 45 27             	lea    eax,[ebp+0x27]
c0008156:	ba 00 00 21 50       	mov    edx,0x50210000
c000815b:	e8 77 9b ff ff       	call   c0001cd7 <st_dword>
c0008160:	0f b7 54 24 38       	movzx  edx,WORD PTR [esp+0x38]
c0008165:	8d 45 16             	lea    eax,[ebp+0x16]
c0008168:	e8 66 9b ff ff       	call   c0001cd3 <st_word>
c000816d:	c6 45 24 80          	mov    BYTE PTR [ebp+0x24],0x80
c0008171:	c6 45 26 29          	mov    BYTE PTR [ebp+0x26],0x29
c0008175:	8d 45 2b             	lea    eax,[ebp+0x2b]
c0008178:	b9 13 00 00 00       	mov    ecx,0x13
c000817d:	ba 82 95 02 c0       	mov    edx,0xc0029582
c0008182:	e8 59 9b ff ff       	call   c0001ce0 <mem_cpy>
c0008187:	8d b5 fe 01 00 00    	lea    esi,[ebp+0x1fe]
c000818d:	ba 55 aa 00 00       	mov    edx,0xaa55
c0008192:	89 f0                	mov    eax,esi
c0008194:	e8 3a 9b ff ff       	call   c0001cd3 <st_word>
c0008199:	83 ec 0c             	sub    esp,0xc
c000819c:	6a 01                	push   0x1
c000819e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00081a2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00081a6:	55                   	push   ebp
c00081a7:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00081ab:	e8 7c 9a ff ff       	call   c0001c2c <disk_write>
c00081b0:	83 c4 20             	add    esp,0x20
c00081b3:	85 c0                	test   eax,eax
c00081b5:	0f 85 67 02 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c00081bb:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00081c0:	0f 85 b7 00 00 00    	jne    c000827d <f_mkfs+0xf0c>
c00081c6:	83 ec 0c             	sub    esp,0xc
c00081c9:	6a 01                	push   0x1
c00081cb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00081cf:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00081d3:	83 c0 06             	add    eax,0x6
c00081d6:	83 d2 00             	adc    edx,0x0
c00081d9:	52                   	push   edx
c00081da:	50                   	push   eax
c00081db:	55                   	push   ebp
c00081dc:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00081e0:	e8 47 9a ff ff       	call   c0001c2c <disk_write>
c00081e5:	83 c4 20             	add    esp,0x20
c00081e8:	b9 00 02 00 00       	mov    ecx,0x200
c00081ed:	31 d2                	xor    edx,edx
c00081ef:	89 e8                	mov    eax,ebp
c00081f1:	e8 ff 9a ff ff       	call   c0001cf5 <mem_set>
c00081f6:	ba 52 52 61 41       	mov    edx,0x41615252
c00081fb:	89 e8                	mov    eax,ebp
c00081fd:	e8 d5 9a ff ff       	call   c0001cd7 <st_dword>
c0008202:	8d 85 e4 01 00 00    	lea    eax,[ebp+0x1e4]
c0008208:	ba 72 72 41 61       	mov    edx,0x61417272
c000820d:	e8 c5 9a ff ff       	call   c0001cd7 <st_dword>
c0008212:	8d 53 ff             	lea    edx,[ebx-0x1]
c0008215:	8d 85 e8 01 00 00    	lea    eax,[ebp+0x1e8]
c000821b:	e8 b7 9a ff ff       	call   c0001cd7 <st_dword>
c0008220:	8d 85 ec 01 00 00    	lea    eax,[ebp+0x1ec]
c0008226:	ba 02 00 00 00       	mov    edx,0x2
c000822b:	e8 a7 9a ff ff       	call   c0001cd7 <st_dword>
c0008230:	ba 55 aa 00 00       	mov    edx,0xaa55
c0008235:	89 f0                	mov    eax,esi
c0008237:	e8 97 9a ff ff       	call   c0001cd3 <st_word>
c000823c:	83 ec 0c             	sub    esp,0xc
c000823f:	6a 01                	push   0x1
c0008241:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008245:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008249:	83 c0 07             	add    eax,0x7
c000824c:	83 d2 00             	adc    edx,0x0
c000824f:	52                   	push   edx
c0008250:	50                   	push   eax
c0008251:	55                   	push   ebp
c0008252:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008256:	e8 d1 99 ff ff       	call   c0001c2c <disk_write>
c000825b:	83 c4 14             	add    esp,0x14
c000825e:	6a 01                	push   0x1
c0008260:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008264:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008268:	83 c0 01             	add    eax,0x1
c000826b:	83 d2 00             	adc    edx,0x0
c000826e:	52                   	push   edx
c000826f:	50                   	push   eax
c0008270:	55                   	push   ebp
c0008271:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008275:	e8 b2 99 ff ff       	call   c0001c2c <disk_write>
c000827a:	83 c4 20             	add    esp,0x20
c000827d:	8b 8c 24 bc 00 00 00 	mov    ecx,DWORD PTR [esp+0xbc]
c0008284:	31 d2                	xor    edx,edx
c0008286:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c000828c:	31 db                	xor    ebx,ebx
c000828e:	89 e8                	mov    eax,ebp
c0008290:	e8 60 9a ff ff       	call   c0001cf5 <mem_set>
c0008295:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c000829a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00082a1:	0f 94 c3             	sete   bl
c00082a4:	4b                   	dec    ebx
c00082a5:	81 e3 00 00 00 ff    	and    ebx,0xff000000
c00082ab:	81 c3 f8 ff ff 00    	add    ebx,0xfffff8
c00082b1:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00082b6:	75 21                	jne    c00082d9 <f_mkfs+0xf68>
c00082b8:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c00082bd:	89 e8                	mov    eax,ebp
c00082bf:	e8 13 9a ff ff       	call   c0001cd7 <st_dword>
c00082c4:	8d 45 04             	lea    eax,[ebp+0x4]
c00082c7:	83 ca ff             	or     edx,0xffffffff
c00082ca:	e8 08 9a ff ff       	call   c0001cd7 <st_dword>
c00082cf:	8d 45 08             	lea    eax,[ebp+0x8]
c00082d2:	ba ff ff ff 0f       	mov    edx,0xfffffff
c00082d7:	eb 04                	jmp    c00082dd <f_mkfs+0xf6c>
c00082d9:	89 da                	mov    edx,ebx
c00082db:	89 e8                	mov    eax,ebp
c00082dd:	e8 f5 99 ff ff       	call   c0001cd7 <st_dword>
c00082e2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00082e6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00082ea:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00082ee:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00082f2:	39 ce                	cmp    esi,ecx
c00082f4:	76 02                	jbe    c00082f8 <f_mkfs+0xf87>
c00082f6:	89 ce                	mov    esi,ecx
c00082f8:	83 ec 0c             	sub    esp,0xc
c00082fb:	56                   	push   esi
c00082fc:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008300:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008304:	55                   	push   ebp
c0008305:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008309:	e8 1e 99 ff ff       	call   c0001c2c <disk_write>
c000830e:	83 c4 20             	add    esp,0x20
c0008311:	85 c0                	test   eax,eax
c0008313:	0f 85 09 01 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0008319:	31 d2                	xor    edx,edx
c000831b:	b9 00 02 00 00       	mov    ecx,0x200
c0008320:	89 e8                	mov    eax,ebp
c0008322:	e8 ce 99 ff ff       	call   c0001cf5 <mem_set>
c0008327:	31 d2                	xor    edx,edx
c0008329:	01 74 24 30          	add    DWORD PTR [esp+0x30],esi
c000832d:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c0008331:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c0008335:	75 b3                	jne    c00082ea <f_mkfs+0xf79>
c0008337:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000833a:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0008341:	40                   	inc    eax
c0008342:	39 44 24 40          	cmp    DWORD PTR [esp+0x40],eax
c0008346:	0f 87 65 ff ff ff    	ja     c00082b1 <f_mkfs+0xf40>
c000834c:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008351:	74 04                	je     c0008357 <f_mkfs+0xfe6>
c0008353:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c0008357:	89 fb                	mov    ebx,edi
c0008359:	3b 7c 24 20          	cmp    edi,DWORD PTR [esp+0x20]
c000835d:	76 04                	jbe    c0008363 <f_mkfs+0xff2>
c000835f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008363:	83 ec 0c             	sub    esp,0xc
c0008366:	53                   	push   ebx
c0008367:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000836b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000836f:	55                   	push   ebp
c0008370:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008374:	e8 b3 98 ff ff       	call   c0001c2c <disk_write>
c0008379:	83 c4 20             	add    esp,0x20
c000837c:	85 c0                	test   eax,eax
c000837e:	0f 85 9e 00 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0008384:	31 d2                	xor    edx,edx
c0008386:	01 5c 24 30          	add    DWORD PTR [esp+0x30],ebx
c000838a:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c000838e:	29 df                	sub    edi,ebx
c0008390:	75 c5                	jne    c0008357 <f_mkfs+0xfe6>
c0008392:	b1 0c                	mov    cl,0xc
c0008394:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008399:	74 1d                	je     c00083b8 <f_mkfs+0x1047>
c000839b:	b8 ff ff 00 00       	mov    eax,0xffff
c00083a0:	b1 06                	mov    cl,0x6
c00083a2:	3b 44 24 78          	cmp    eax,DWORD PTR [esp+0x78]
c00083a6:	1b 7c 24 7c          	sbb    edi,DWORD PTR [esp+0x7c]
c00083aa:	72 0c                	jb     c00083b8 <f_mkfs+0x1047>
c00083ac:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c00083b1:	0f 94 c1             	sete   cl
c00083b4:	8d 4c 49 01          	lea    ecx,[ecx+ecx*2+0x1]
c00083b8:	f6 44 24 3f 08       	test   BYTE PTR [esp+0x3f],0x8
c00083bd:	75 4c                	jne    c000840b <f_mkfs+0x109a>
c00083bf:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c00083c3:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c00083c7:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c00083ce:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c00083d5:	c7 84 24 88 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x88],0x0
c00083e0:	c7 84 24 8c 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x8c],0x0
c00083eb:	0f b6 c9             	movzx  ecx,cl
c00083ee:	83 ec 0c             	sub    esp,0xc
c00083f1:	55                   	push   ebp
c00083f2:	8d 94 24 90 00 00 00 	lea    edx,[esp+0x90]
c00083f9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00083fd:	e8 2f c2 ff ff       	call   c0004631 <create_partition>
c0008402:	83 c4 10             	add    esp,0x10
c0008405:	89 c3                	mov    ebx,eax
c0008407:	85 c0                	test   eax,eax
c0008409:	75 34                	jne    c000843f <f_mkfs+0x10ce>
c000840b:	31 db                	xor    ebx,ebx
c000840d:	50                   	push   eax
c000840e:	6a 00                	push   0x0
c0008410:	6a 00                	push   0x0
c0008412:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008416:	e8 27 98 ff ff       	call   c0001c42 <disk_ioctl>
c000841b:	83 c4 10             	add    esp,0x10
c000841e:	85 c0                	test   eax,eax
c0008420:	74 1d                	je     c000843f <f_mkfs+0x10ce>
c0008422:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c000842a:	75 0c                	jne    c0008438 <f_mkfs+0x10c7>
c000842c:	83 ec 0c             	sub    esp,0xc
c000842f:	55                   	push   ebp
c0008430:	e8 75 00 00 00       	call   c00084aa <ff_memfree>
c0008435:	83 c4 10             	add    esp,0x10
c0008438:	bb 01 00 00 00       	mov    ebx,0x1
c000843d:	eb 48                	jmp    c0008487 <f_mkfs+0x1116>
c000843f:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c0008447:	75 3e                	jne    c0008487 <f_mkfs+0x1116>
c0008449:	83 ec 0c             	sub    esp,0xc
c000844c:	55                   	push   ebp
c000844d:	e8 58 00 00 00       	call   c00084aa <ff_memfree>
c0008452:	83 c4 10             	add    esp,0x10
c0008455:	eb 30                	jmp    c0008487 <f_mkfs+0x1116>
c0008457:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c000845c:	0f 85 eb fa ff ff    	jne    c0007f4d <f_mkfs+0xbdc>
c0008462:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0008466:	81 ff 80 00 00 00    	cmp    edi,0x80
c000846c:	0f 86 b8 f9 ff ff    	jbe    c0007e2a <f_mkfs+0xab9>
c0008472:	e9 bf fb ff ff       	jmp    c0008036 <f_mkfs+0xcc5>
c0008477:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c000847c:	0f 85 c0 fa ff ff    	jne    c0007f42 <f_mkfs+0xbd1>
c0008482:	e9 af fb ff ff       	jmp    c0008036 <f_mkfs+0xcc5>
c0008487:	81 c4 9c 00 00 00    	add    esp,0x9c
c000848d:	89 d8                	mov    eax,ebx
c000848f:	5b                   	pop    ebx
c0008490:	5e                   	pop    esi
c0008491:	5f                   	pop    edi
c0008492:	5d                   	pop    ebp
c0008493:	c3                   	ret    

c0008494 <ff_memalloc>:
c0008494:	83 ec 0c             	sub    esp,0xc
c0008497:	83 ec 0c             	sub    esp,0xc
c000849a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000849e:	e8 41 74 00 00       	call   c000f8e4 <malloc>
c00084a3:	83 c4 10             	add    esp,0x10
c00084a6:	83 c4 0c             	add    esp,0xc
c00084a9:	c3                   	ret    

c00084aa <ff_memfree>:
c00084aa:	83 ec 0c             	sub    esp,0xc
c00084ad:	83 ec 0c             	sub    esp,0xc
c00084b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00084b4:	e8 3b 74 00 00       	call   c000f8f4 <free>
c00084b9:	83 c4 10             	add    esp,0x10
c00084bc:	90                   	nop
c00084bd:	83 c4 0c             	add    esp,0xc
c00084c0:	c3                   	ret    

c00084c1 <ff_uni2oem>:
c00084c1:	83 ec 14             	sub    esp,0x14
c00084c4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00084c8:	66 89 04 24          	mov    WORD PTR [esp],ax
c00084cc:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c00084d3:	c7 44 24 0c a0 98 02 c0 	mov    DWORD PTR [esp+0xc],0xc00298a0
c00084db:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c00084e0:	77 0b                	ja     c00084ed <ff_uni2oem+0x2c>
c00084e2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00084e6:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00084eb:	eb 5b                	jmp    c0008548 <ff_uni2oem+0x87>
c00084ed:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c00084f5:	77 51                	ja     c0008548 <ff_uni2oem+0x87>
c00084f7:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c00084fd:	75 49                	jne    c0008548 <ff_uni2oem+0x87>
c00084ff:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0008506:	eb 0b                	jmp    c0008513 <ff_uni2oem+0x52>
c0008508:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c000850d:	40                   	inc    eax
c000850e:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0008513:	66 83 7c 24 12 7f    	cmp    WORD PTR [esp+0x12],0x7f
c0008519:	77 1b                	ja     c0008536 <ff_uni2oem+0x75>
c000851b:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0008520:	01 c0                	add    eax,eax
c0008522:	89 c2                	mov    edx,eax
c0008524:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008528:	01 d0                	add    eax,edx
c000852a:	66 8b 00             	mov    ax,WORD PTR [eax]
c000852d:	0f b7 c0             	movzx  eax,ax
c0008530:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0008534:	75 d2                	jne    c0008508 <ff_uni2oem+0x47>
c0008536:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c000853b:	83 e8 80             	sub    eax,0xffffff80
c000853e:	25 ff 00 00 00       	and    eax,0xff
c0008543:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0008548:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c000854d:	83 c4 14             	add    esp,0x14
c0008550:	c3                   	ret    

c0008551 <ff_oem2uni>:
c0008551:	83 ec 18             	sub    esp,0x18
c0008554:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0008558:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000855c:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0008561:	66 89 04 24          	mov    WORD PTR [esp],ax
c0008565:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c000856c:	c7 44 24 10 a0 98 02 c0 	mov    DWORD PTR [esp+0x10],0xc00298a0
c0008574:	66 83 7c 24 04 7f    	cmp    WORD PTR [esp+0x4],0x7f
c000857a:	77 0b                	ja     c0008587 <ff_oem2uni+0x36>
c000857c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008580:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0008585:	eb 2d                	jmp    c00085b4 <ff_oem2uni+0x63>
c0008587:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c000858d:	75 25                	jne    c00085b4 <ff_oem2uni+0x63>
c000858f:	66 81 7c 24 04 ff 00 	cmp    WORD PTR [esp+0x4],0xff
c0008596:	77 1c                	ja     c00085b4 <ff_oem2uni+0x63>
c0008598:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c000859d:	05 80 ff ff 7f       	add    eax,0x7fffff80
c00085a2:	01 c0                	add    eax,eax
c00085a4:	89 c2                	mov    edx,eax
c00085a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00085aa:	01 d0                	add    eax,edx
c00085ac:	66 8b 00             	mov    ax,WORD PTR [eax]
c00085af:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c00085b4:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c00085b9:	83 c4 18             	add    esp,0x18
c00085bc:	c3                   	ret    

c00085bd <ff_wtoupper>:
c00085bd:	83 ec 10             	sub    esp,0x10
c00085c0:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00085c8:	0f 87 3e 01 00 00    	ja     c000870c <ff_wtoupper+0x14f>
c00085ce:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00085d2:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00085d7:	66 81 7c 24 0a ff 0f 	cmp    WORD PTR [esp+0xa],0xfff
c00085de:	77 07                	ja     c00085e7 <ff_wtoupper+0x2a>
c00085e0:	b8 a0 96 02 c0       	mov    eax,0xc00296a0
c00085e5:	eb 05                	jmp    c00085ec <ff_wtoupper+0x2f>
c00085e7:	b8 e0 95 02 c0       	mov    eax,0xc00295e0
c00085ec:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00085f0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00085f4:	8d 50 02             	lea    edx,[eax+0x2]
c00085f7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00085fb:	66 8b 00             	mov    ax,WORD PTR [eax]
c00085fe:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0008603:	66 83 7c 24 08 00    	cmp    WORD PTR [esp+0x8],0x0
c0008609:	0f 84 f4 00 00 00    	je     c0008703 <ff_wtoupper+0x146>
c000860f:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0008614:	66 3b 44 24 08       	cmp    ax,WORD PTR [esp+0x8]
c0008619:	0f 82 e4 00 00 00    	jb     c0008703 <ff_wtoupper+0x146>
c000861f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008623:	8d 50 02             	lea    edx,[eax+0x2]
c0008626:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000862a:	66 8b 00             	mov    ax,WORD PTR [eax]
c000862d:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0008632:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0008637:	66 c1 e8 08          	shr    ax,0x8
c000863b:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0008640:	66 81 64 24 06 ff 00 	and    WORD PTR [esp+0x6],0xff
c0008647:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c000864c:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c0008651:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c0008656:	01 ca                	add    edx,ecx
c0008658:	39 d0                	cmp    eax,edx
c000865a:	0f 8d 86 00 00 00    	jge    c00086e6 <ff_wtoupper+0x129>
c0008660:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0008665:	83 f8 08             	cmp    eax,0x8
c0008668:	0f 87 94 00 00 00    	ja     c0008702 <ff_wtoupper+0x145>
c000866e:	8b 04 85 a0 95 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6a60]
c0008675:	ff e0                	jmp    eax
c0008677:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c000867c:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0008681:	29 c2                	sub    edx,eax
c0008683:	89 d0                	mov    eax,edx
c0008685:	01 c0                	add    eax,eax
c0008687:	89 c2                	mov    edx,eax
c0008689:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000868d:	01 d0                	add    eax,edx
c000868f:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008692:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0008697:	eb 4b                	jmp    c00086e4 <ff_wtoupper+0x127>
c0008699:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c000869e:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c00086a2:	83 e0 01             	and    eax,0x1
c00086a5:	66 29 44 24 0a       	sub    WORD PTR [esp+0xa],ax
c00086aa:	eb 38                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086ac:	66 83 6c 24 0a 10    	sub    WORD PTR [esp+0xa],0x10
c00086b2:	eb 30                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086b4:	66 83 6c 24 0a 20    	sub    WORD PTR [esp+0xa],0x20
c00086ba:	eb 28                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086bc:	66 83 6c 24 0a 30    	sub    WORD PTR [esp+0xa],0x30
c00086c2:	eb 20                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086c4:	66 83 6c 24 0a 1a    	sub    WORD PTR [esp+0xa],0x1a
c00086ca:	eb 18                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086cc:	66 83 44 24 0a 08    	add    WORD PTR [esp+0xa],0x8
c00086d2:	eb 10                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086d4:	66 83 6c 24 0a 50    	sub    WORD PTR [esp+0xa],0x50
c00086da:	eb 08                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086dc:	66 81 6c 24 0a 60 1c 	sub    WORD PTR [esp+0xa],0x1c60
c00086e3:	90                   	nop
c00086e4:	eb 1c                	jmp    c0008702 <ff_wtoupper+0x145>
c00086e6:	66 83 7c 24 04 00    	cmp    WORD PTR [esp+0x4],0x0
c00086ec:	0f 85 fe fe ff ff    	jne    c00085f0 <ff_wtoupper+0x33>
c00086f2:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c00086f7:	01 c0                	add    eax,eax
c00086f9:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c00086fd:	e9 ee fe ff ff       	jmp    c00085f0 <ff_wtoupper+0x33>
c0008702:	90                   	nop
c0008703:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0008708:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000870c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008710:	83 c4 10             	add    esp,0x10
c0008713:	c3                   	ret    

c0008714 <psrc_set_converter>:
c0008714:	56                   	push   esi
c0008715:	89 d6                	mov    esi,edx
c0008717:	53                   	push   ebx
c0008718:	89 c3                	mov    ebx,eax
c000871a:	83 ec 0c             	sub    esp,0xc
c000871d:	52                   	push   edx
c000871e:	50                   	push   eax
c000871f:	e8 6f 55 00 00       	call   c000dc93 <sinc_set_converter>
c0008724:	83 c4 10             	add    esp,0x10
c0008727:	85 c0                	test   eax,eax
c0008729:	74 25                	je     c0008750 <psrc_set_converter+0x3c>
c000872b:	50                   	push   eax
c000872c:	50                   	push   eax
c000872d:	56                   	push   esi
c000872e:	53                   	push   ebx
c000872f:	e8 17 5d 00 00       	call   c000e44b <zoh_set_converter>
c0008734:	83 c4 10             	add    esp,0x10
c0008737:	85 c0                	test   eax,eax
c0008739:	74 15                	je     c0008750 <psrc_set_converter+0x3c>
c000873b:	51                   	push   ecx
c000873c:	51                   	push   ecx
c000873d:	56                   	push   esi
c000873e:	53                   	push   ebx
c000873f:	e8 0f 11 00 00       	call   c0009853 <linear_set_converter>
c0008744:	83 c4 10             	add    esp,0x10
c0008747:	ba 0a 00 00 00       	mov    edx,0xa
c000874c:	85 c0                	test   eax,eax
c000874e:	75 02                	jne    c0008752 <psrc_set_converter+0x3e>
c0008750:	31 d2                	xor    edx,edx
c0008752:	89 d0                	mov    eax,edx
c0008754:	5a                   	pop    edx
c0008755:	5b                   	pop    ebx
c0008756:	5e                   	pop    esi
c0008757:	c3                   	ret    

c0008758 <src_delete>:
c0008758:	53                   	push   ebx
c0008759:	83 ec 08             	sub    esp,0x8
c000875c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008760:	85 db                	test   ebx,ebx
c0008762:	74 29                	je     c000878d <src_delete+0x35>
c0008764:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0008767:	85 c0                	test   eax,eax
c0008769:	74 0c                	je     c0008777 <src_delete+0x1f>
c000876b:	83 ec 0c             	sub    esp,0xc
c000876e:	50                   	push   eax
c000876f:	e8 80 71 00 00       	call   c000f8f4 <free>
c0008774:	83 c4 10             	add    esp,0x10
c0008777:	50                   	push   eax
c0008778:	6a 3c                	push   0x3c
c000877a:	6a 00                	push   0x0
c000877c:	53                   	push   ebx
c000877d:	e8 f6 7f ff ff       	call   c0000778 <memset>
c0008782:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008785:	e8 6a 71 00 00       	call   c000f8f4 <free>
c000878a:	83 c4 10             	add    esp,0x10
c000878d:	31 c0                	xor    eax,eax
c000878f:	83 c4 08             	add    esp,0x8
c0008792:	5b                   	pop    ebx
c0008793:	c3                   	ret    

c0008794 <src_process>:
c0008794:	55                   	push   ebp
c0008795:	57                   	push   edi
c0008796:	56                   	push   esi
c0008797:	53                   	push   ebx
c0008798:	83 ec 1c             	sub    esp,0x1c
c000879b:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000879f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00087a3:	85 ed                	test   ebp,ebp
c00087a5:	0f 84 6f 01 00 00    	je     c000891a <src_process+0x186>
c00087ab:	83 7d 20 00          	cmp    DWORD PTR [ebp+0x20],0x0
c00087af:	0f 84 6c 01 00 00    	je     c0008921 <src_process+0x18d>
c00087b5:	83 7d 24 00          	cmp    DWORD PTR [ebp+0x24],0x0
c00087b9:	0f 84 62 01 00 00    	je     c0008921 <src_process+0x18d>
c00087bf:	81 7d 18 2b 02 00 00 	cmp    DWORD PTR [ebp+0x18],0x22b
c00087c6:	0f 85 5c 01 00 00    	jne    c0008928 <src_process+0x194>
c00087cc:	85 db                	test   ebx,ebx
c00087ce:	0f 84 5b 01 00 00    	je     c000892f <src_process+0x19b>
c00087d4:	8b 33                	mov    esi,DWORD PTR [ebx]
c00087d6:	85 f6                	test   esi,esi
c00087d8:	0f 84 58 01 00 00    	je     c0008936 <src_process+0x1a2>
c00087de:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00087e1:	85 ff                	test   edi,edi
c00087e3:	0f 84 4d 01 00 00    	je     c0008936 <src_process+0x1a2>
c00087e9:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00087ec:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00087ef:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00087f3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00087f7:	68 00 00 70 3f       	push   0x3f700000
c00087fc:	6a 00                	push   0x0
c00087fe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008802:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008806:	e8 64 fd 01 00       	call   c002856f <__ltdf2>
c000880b:	83 c4 10             	add    esp,0x10
c000880e:	85 c0                	test   eax,eax
c0008810:	0f 88 27 01 00 00    	js     c000893d <src_process+0x1a9>
c0008816:	68 00 00 70 40       	push   0x40700000
c000881b:	6a 00                	push   0x0
c000881d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008821:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008825:	e8 27 fd 01 00       	call   c0028551 <__gtdf2>
c000882a:	83 c4 10             	add    esp,0x10
c000882d:	85 c0                	test   eax,eax
c000882f:	0f 8f 08 01 00 00    	jg     c000893d <src_process+0x1a9>
c0008835:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0008839:	79 07                	jns    c0008842 <src_process+0xae>
c000883b:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0008842:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0008845:	85 c0                	test   eax,eax
c0008847:	79 50                	jns    c0008899 <src_process+0x105>
c0008849:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0008850:	39 fe                	cmp    esi,edi
c0008852:	72 37                	jb     c000888b <src_process+0xf7>
c0008854:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000885b:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008862:	68 00 00 70 3f       	push   0x3f700000
c0008867:	6a 00                	push   0x0
c0008869:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000886c:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000886f:	e8 fb fc 01 00       	call   c002856f <__ltdf2>
c0008874:	83 c4 10             	add    esp,0x10
c0008877:	85 c0                	test   eax,eax
c0008879:	79 37                	jns    c00088b2 <src_process+0x11e>
c000887b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000887f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0008883:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0008886:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c0008889:	eb 27                	jmp    c00088b2 <src_process+0x11e>
c000888b:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000888e:	0f af 45 14          	imul   eax,DWORD PTR [ebp+0x14]
c0008892:	8d 04 86             	lea    eax,[esi+eax*4]
c0008895:	39 c7                	cmp    edi,eax
c0008897:	eb 0d                	jmp    c00088a6 <src_process+0x112>
c0008899:	39 fe                	cmp    esi,edi
c000889b:	72 ee                	jb     c000888b <src_process+0xf7>
c000889d:	0f af 45 14          	imul   eax,DWORD PTR [ebp+0x14]
c00088a1:	8d 04 87             	lea    eax,[edi+eax*4]
c00088a4:	39 c6                	cmp    esi,eax
c00088a6:	73 ac                	jae    c0008854 <src_process+0xc0>
c00088a8:	b8 10 00 00 00       	mov    eax,0x10
c00088ad:	e9 90 00 00 00       	jmp    c0008942 <src_process+0x1ae>
c00088b2:	83 ec 10             	sub    esp,0x10
c00088b5:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00088b8:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00088bb:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c00088be:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c00088c1:	e8 ae f3 01 00       	call   c0027c74 <__subdf3>
c00088c6:	83 c4 18             	add    esp,0x18
c00088c9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00088cd:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00088d1:	52                   	push   edx
c00088d2:	50                   	push   eax
c00088d3:	e8 28 fe 01 00       	call   c0028700 <fabs>
c00088d8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00088dc:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00088e0:	83 c4 10             	add    esp,0x10
c00088e3:	68 af 03 d2 3c       	push   0x3cd203af
c00088e8:	68 16 56 e7 9e       	push   0x9ee75616
c00088ed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00088f1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00088f5:	e8 75 fc 01 00       	call   c002856f <__ltdf2>
c00088fa:	83 c4 10             	add    esp,0x10
c00088fd:	85 c0                	test   eax,eax
c00088ff:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c0008903:	89 6c 24 30          	mov    DWORD PTR [esp+0x30],ebp
c0008907:	79 05                	jns    c000890e <src_process+0x17a>
c0008909:	8b 45 24             	mov    eax,DWORD PTR [ebp+0x24]
c000890c:	eb 03                	jmp    c0008911 <src_process+0x17d>
c000890e:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c0008911:	83 c4 1c             	add    esp,0x1c
c0008914:	5b                   	pop    ebx
c0008915:	5e                   	pop    esi
c0008916:	5f                   	pop    edi
c0008917:	5d                   	pop    ebp
c0008918:	ff e0                	jmp    eax
c000891a:	b8 02 00 00 00       	mov    eax,0x2
c000891f:	eb 21                	jmp    c0008942 <src_process+0x1ae>
c0008921:	b8 07 00 00 00       	mov    eax,0x7
c0008926:	eb 1a                	jmp    c0008942 <src_process+0x1ae>
c0008928:	b8 12 00 00 00       	mov    eax,0x12
c000892d:	eb 13                	jmp    c0008942 <src_process+0x1ae>
c000892f:	b8 03 00 00 00       	mov    eax,0x3
c0008934:	eb 0c                	jmp    c0008942 <src_process+0x1ae>
c0008936:	b8 04 00 00 00       	mov    eax,0x4
c000893b:	eb 05                	jmp    c0008942 <src_process+0x1ae>
c000893d:	b8 06 00 00 00       	mov    eax,0x6
c0008942:	83 c4 1c             	add    esp,0x1c
c0008945:	5b                   	pop    ebx
c0008946:	5e                   	pop    esi
c0008947:	5f                   	pop    edi
c0008948:	5d                   	pop    ebp
c0008949:	c3                   	ret    

c000894a <src_callback_read>:
c000894a:	55                   	push   ebp
c000894b:	57                   	push   edi
c000894c:	56                   	push   esi
c000894d:	53                   	push   ebx
c000894e:	83 ec 3c             	sub    esp,0x3c
c0008951:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c0008955:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0008959:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000895d:	8b 7c 24 58          	mov    edi,DWORD PTR [esp+0x58]
c0008961:	85 ed                	test   ebp,ebp
c0008963:	0f 8e 52 01 00 00    	jle    c0008abb <src_callback_read+0x171>
c0008969:	85 db                	test   ebx,ebx
c000896b:	0f 84 4a 01 00 00    	je     c0008abb <src_callback_read+0x171>
c0008971:	81 7b 18 2c 02 00 00 	cmp    DWORD PTR [ebx+0x18],0x22c
c0008978:	74 0c                	je     c0008986 <src_callback_read+0x3c>
c000897a:	c7 43 10 12 00 00 00 	mov    DWORD PTR [ebx+0x10],0x12
c0008981:	e9 35 01 00 00       	jmp    c0008abb <src_callback_read+0x171>
c0008986:	83 7b 2c 00          	cmp    DWORD PTR [ebx+0x2c],0x0
c000898a:	75 0c                	jne    c0008998 <src_callback_read+0x4e>
c000898c:	c7 43 10 13 00 00 00 	mov    DWORD PTR [ebx+0x10],0x13
c0008993:	e9 23 01 00 00       	jmp    c0008abb <src_callback_read+0x171>
c0008998:	51                   	push   ecx
c0008999:	6a 24                	push   0x24
c000899b:	6a 00                	push   0x0
c000899d:	8d 44 24 18          	lea    eax,[esp+0x18]
c00089a1:	50                   	push   eax
c00089a2:	e8 d1 7d ff ff       	call   c0000778 <memset>
c00089a7:	83 c4 10             	add    esp,0x10
c00089aa:	68 00 00 70 3f       	push   0x3f700000
c00089af:	6a 00                	push   0x0
c00089b1:	57                   	push   edi
c00089b2:	56                   	push   esi
c00089b3:	e8 b7 fb 01 00       	call   c002856f <__ltdf2>
c00089b8:	83 c4 10             	add    esp,0x10
c00089bb:	85 c0                	test   eax,eax
c00089bd:	78 3e                	js     c00089fd <src_callback_read+0xb3>
c00089bf:	68 00 00 70 40       	push   0x40700000
c00089c4:	6a 00                	push   0x0
c00089c6:	57                   	push   edi
c00089c7:	56                   	push   esi
c00089c8:	e8 84 fb 01 00       	call   c0028551 <__gtdf2>
c00089cd:	83 c4 10             	add    esp,0x10
c00089d0:	85 c0                	test   eax,eax
c00089d2:	7f 29                	jg     c00089fd <src_callback_read+0xb3>
c00089d4:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c00089d8:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c00089dc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00089e0:	89 7c 24 2c          	mov    DWORD PTR [esp+0x2c],edi
c00089e4:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00089e7:	89 6c 24 18          	mov    DWORD PTR [esp+0x18],ebp
c00089eb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00089ef:	31 f6                	xor    esi,esi
c00089f1:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c00089f4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00089f8:	e9 97 00 00 00       	jmp    c0008a94 <src_callback_read+0x14a>
c00089fd:	c7 43 10 06 00 00 00 	mov    DWORD PTR [ebx+0x10],0x6
c0008a04:	e9 b2 00 00 00       	jmp    c0008abb <src_callback_read+0x171>
c0008a09:	8d 44 24 04          	lea    eax,[esp+0x4]
c0008a0d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008a11:	52                   	push   edx
c0008a12:	52                   	push   edx
c0008a13:	8d 44 24 10          	lea    eax,[esp+0x10]
c0008a17:	50                   	push   eax
c0008a18:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008a1b:	ff 53 2c             	call   DWORD PTR [ebx+0x2c]
c0008a1e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0008a22:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0008a26:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0008a2a:	83 c4 10             	add    esp,0x10
c0008a2d:	85 c0                	test   eax,eax
c0008a2f:	75 08                	jne    c0008a39 <src_callback_read+0xef>
c0008a31:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c0008a39:	c7 43 18 2b 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22b
c0008a40:	50                   	push   eax
c0008a41:	50                   	push   eax
c0008a42:	8d 44 24 14          	lea    eax,[esp+0x14]
c0008a46:	50                   	push   eax
c0008a47:	53                   	push   ebx
c0008a48:	e8 47 fd ff ff       	call   c0008794 <src_process>
c0008a4d:	83 c4 10             	add    esp,0x10
c0008a50:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008a57:	85 c0                	test   eax,eax
c0008a59:	75 49                	jne    c0008aa4 <src_callback_read+0x15a>
c0008a5b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0008a5f:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0008a62:	89 f9                	mov    ecx,edi
c0008a64:	29 7c 24 14          	sub    DWORD PTR [esp+0x14],edi
c0008a68:	0f af ca             	imul   ecx,edx
c0008a6b:	c1 e1 02             	shl    ecx,0x2
c0008a6e:	01 4c 24 0c          	add    DWORD PTR [esp+0xc],ecx
c0008a72:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0008a76:	0f af d1             	imul   edx,ecx
c0008a79:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c0008a7d:	c1 e2 02             	shl    edx,0x2
c0008a80:	01 54 24 10          	add    DWORD PTR [esp+0x10],edx
c0008a84:	8d 14 31             	lea    edx,[ecx+esi*1]
c0008a87:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c0008a8c:	74 12                	je     c0008aa0 <src_callback_read+0x156>
c0008a8e:	39 d5                	cmp    ebp,edx
c0008a90:	7e 14                	jle    c0008aa6 <src_callback_read+0x15c>
c0008a92:	89 d6                	mov    esi,edx
c0008a94:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0008a99:	75 9e                	jne    c0008a39 <src_callback_read+0xef>
c0008a9b:	e9 69 ff ff ff       	jmp    c0008a09 <src_callback_read+0xbf>
c0008aa0:	85 c9                	test   ecx,ecx
c0008aa2:	75 ea                	jne    c0008a8e <src_callback_read+0x144>
c0008aa4:	89 f2                	mov    edx,esi
c0008aa6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0008aaa:	85 c0                	test   eax,eax
c0008aac:	89 4b 38             	mov    DWORD PTR [ebx+0x38],ecx
c0008aaf:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008ab3:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c0008ab6:	74 05                	je     c0008abd <src_callback_read+0x173>
c0008ab8:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0008abb:	31 d2                	xor    edx,edx
c0008abd:	83 c4 3c             	add    esp,0x3c
c0008ac0:	89 d0                	mov    eax,edx
c0008ac2:	5b                   	pop    ebx
c0008ac3:	5e                   	pop    esi
c0008ac4:	5f                   	pop    edi
c0008ac5:	5d                   	pop    ebp
c0008ac6:	c3                   	ret    

c0008ac7 <src_set_ratio>:
c0008ac7:	57                   	push   edi
c0008ac8:	ba 02 00 00 00       	mov    edx,0x2
c0008acd:	56                   	push   esi
c0008ace:	53                   	push   ebx
c0008acf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008ad3:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008ad7:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0008adb:	85 db                	test   ebx,ebx
c0008add:	74 4c                	je     c0008b2b <src_set_ratio+0x64>
c0008adf:	ba 07 00 00 00       	mov    edx,0x7
c0008ae4:	83 7b 20 00          	cmp    DWORD PTR [ebx+0x20],0x0
c0008ae8:	74 41                	je     c0008b2b <src_set_ratio+0x64>
c0008aea:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c0008aee:	74 3b                	je     c0008b2b <src_set_ratio+0x64>
c0008af0:	68 00 00 70 3f       	push   0x3f700000
c0008af5:	6a 00                	push   0x0
c0008af7:	57                   	push   edi
c0008af8:	56                   	push   esi
c0008af9:	e8 71 fa 01 00       	call   c002856f <__ltdf2>
c0008afe:	83 c4 10             	add    esp,0x10
c0008b01:	ba 06 00 00 00       	mov    edx,0x6
c0008b06:	85 c0                	test   eax,eax
c0008b08:	78 21                	js     c0008b2b <src_set_ratio+0x64>
c0008b0a:	68 00 00 70 40       	push   0x40700000
c0008b0f:	6a 00                	push   0x0
c0008b11:	57                   	push   edi
c0008b12:	56                   	push   esi
c0008b13:	e8 39 fa 01 00       	call   c0028551 <__gtdf2>
c0008b18:	83 c4 10             	add    esp,0x10
c0008b1b:	ba 06 00 00 00       	mov    edx,0x6
c0008b20:	85 c0                	test   eax,eax
c0008b22:	7f 07                	jg     c0008b2b <src_set_ratio+0x64>
c0008b24:	89 33                	mov    DWORD PTR [ebx],esi
c0008b26:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0008b29:	31 d2                	xor    edx,edx
c0008b2b:	5b                   	pop    ebx
c0008b2c:	89 d0                	mov    eax,edx
c0008b2e:	5e                   	pop    esi
c0008b2f:	5f                   	pop    edi
c0008b30:	c3                   	ret    

c0008b31 <src_get_channels>:
c0008b31:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008b35:	b8 02 00 00 00       	mov    eax,0x2
c0008b3a:	85 d2                	test   edx,edx
c0008b3c:	74 14                	je     c0008b52 <src_get_channels+0x21>
c0008b3e:	b8 07 00 00 00       	mov    eax,0x7
c0008b43:	83 7a 20 00          	cmp    DWORD PTR [edx+0x20],0x0
c0008b47:	74 09                	je     c0008b52 <src_get_channels+0x21>
c0008b49:	83 7a 24 00          	cmp    DWORD PTR [edx+0x24],0x0
c0008b4d:	74 03                	je     c0008b52 <src_get_channels+0x21>
c0008b4f:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0008b52:	c3                   	ret    

c0008b53 <src_reset>:
c0008b53:	53                   	push   ebx
c0008b54:	b8 02 00 00 00       	mov    eax,0x2
c0008b59:	83 ec 08             	sub    esp,0x8
c0008b5c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008b60:	85 db                	test   ebx,ebx
c0008b62:	74 36                	je     c0008b9a <src_reset+0x47>
c0008b64:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0008b67:	85 c0                	test   eax,eax
c0008b69:	74 09                	je     c0008b74 <src_reset+0x21>
c0008b6b:	83 ec 0c             	sub    esp,0xc
c0008b6e:	53                   	push   ebx
c0008b6f:	ff d0                	call   eax
c0008b71:	83 c4 10             	add    esp,0x10
c0008b74:	31 c0                	xor    eax,eax
c0008b76:	31 d2                	xor    edx,edx
c0008b78:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0008b7b:	89 03                	mov    DWORD PTR [ebx],eax
c0008b7d:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0008b80:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0008b83:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0008b8a:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0008b91:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008b98:	31 c0                	xor    eax,eax
c0008b9a:	83 c4 08             	add    esp,0x8
c0008b9d:	5b                   	pop    ebx
c0008b9e:	c3                   	ret    

c0008b9f <src_new>:
c0008b9f:	57                   	push   edi
c0008ba0:	56                   	push   esi
c0008ba1:	53                   	push   ebx
c0008ba2:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0008ba6:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0008baa:	85 f6                	test   esi,esi
c0008bac:	74 73                	je     c0008c21 <src_new+0x82>
c0008bae:	85 ff                	test   edi,edi
c0008bb0:	7f 08                	jg     c0008bba <src_new+0x1b>
c0008bb2:	c7 06 0b 00 00 00    	mov    DWORD PTR [esi],0xb
c0008bb8:	eb 1e                	jmp    c0008bd8 <src_new+0x39>
c0008bba:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0008bc0:	50                   	push   eax
c0008bc1:	50                   	push   eax
c0008bc2:	6a 3c                	push   0x3c
c0008bc4:	6a 01                	push   0x1
c0008bc6:	e8 49 6d 00 00       	call   c000f914 <calloc>
c0008bcb:	83 c4 10             	add    esp,0x10
c0008bce:	89 c3                	mov    ebx,eax
c0008bd0:	85 c0                	test   eax,eax
c0008bd2:	75 10                	jne    c0008be4 <src_new+0x45>
c0008bd4:	85 f6                	test   esi,esi
c0008bd6:	75 04                	jne    c0008bdc <src_new+0x3d>
c0008bd8:	31 db                	xor    ebx,ebx
c0008bda:	eb 4b                	jmp    c0008c27 <src_new+0x88>
c0008bdc:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c0008be2:	eb 43                	jmp    c0008c27 <src_new+0x88>
c0008be4:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c0008be7:	c7 40 18 2b 02 00 00 	mov    DWORD PTR [eax+0x18],0x22b
c0008bee:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008bf2:	e8 1d fb ff ff       	call   c0008714 <psrc_set_converter>
c0008bf7:	85 c0                	test   eax,eax
c0008bf9:	74 18                	je     c0008c13 <src_new+0x74>
c0008bfb:	85 f6                	test   esi,esi
c0008bfd:	74 06                	je     c0008c05 <src_new+0x66>
c0008bff:	c7 06 0a 00 00 00    	mov    DWORD PTR [esi],0xa
c0008c05:	83 ec 0c             	sub    esp,0xc
c0008c08:	53                   	push   ebx
c0008c09:	31 db                	xor    ebx,ebx
c0008c0b:	e8 e4 6c 00 00       	call   c000f8f4 <free>
c0008c10:	83 c4 10             	add    esp,0x10
c0008c13:	83 ec 0c             	sub    esp,0xc
c0008c16:	53                   	push   ebx
c0008c17:	e8 37 ff ff ff       	call   c0008b53 <src_reset>
c0008c1c:	83 c4 10             	add    esp,0x10
c0008c1f:	eb 06                	jmp    c0008c27 <src_new+0x88>
c0008c21:	85 ff                	test   edi,edi
c0008c23:	7f 9b                	jg     c0008bc0 <src_new+0x21>
c0008c25:	eb b1                	jmp    c0008bd8 <src_new+0x39>
c0008c27:	89 d8                	mov    eax,ebx
c0008c29:	5b                   	pop    ebx
c0008c2a:	5e                   	pop    esi
c0008c2b:	5f                   	pop    edi
c0008c2c:	c3                   	ret    

c0008c2d <src_callback_new>:
c0008c2d:	56                   	push   esi
c0008c2e:	53                   	push   ebx
c0008c2f:	53                   	push   ebx
c0008c30:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0008c34:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008c38:	85 f6                	test   esi,esi
c0008c3a:	75 0e                	jne    c0008c4a <src_callback_new+0x1d>
c0008c3c:	31 db                	xor    ebx,ebx
c0008c3e:	85 c0                	test   eax,eax
c0008c40:	74 47                	je     c0008c89 <src_callback_new+0x5c>
c0008c42:	c7 00 11 00 00 00    	mov    DWORD PTR [eax],0x11
c0008c48:	eb 3f                	jmp    c0008c89 <src_callback_new+0x5c>
c0008c4a:	85 c0                	test   eax,eax
c0008c4c:	74 06                	je     c0008c54 <src_callback_new+0x27>
c0008c4e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0008c54:	51                   	push   ecx
c0008c55:	50                   	push   eax
c0008c56:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008c5a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008c5e:	e8 3c ff ff ff       	call   c0008b9f <src_new>
c0008c63:	83 c4 10             	add    esp,0x10
c0008c66:	89 c3                	mov    ebx,eax
c0008c68:	85 c0                	test   eax,eax
c0008c6a:	74 1d                	je     c0008c89 <src_callback_new+0x5c>
c0008c6c:	83 ec 0c             	sub    esp,0xc
c0008c6f:	50                   	push   eax
c0008c70:	e8 de fe ff ff       	call   c0008b53 <src_reset>
c0008c75:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008c79:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008c80:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0008c83:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0008c86:	83 c4 10             	add    esp,0x10
c0008c89:	89 d8                	mov    eax,ebx
c0008c8b:	5a                   	pop    edx
c0008c8c:	5b                   	pop    ebx
c0008c8d:	5e                   	pop    esi
c0008c8e:	c3                   	ret    

c0008c8f <src_get_name>:
c0008c8f:	53                   	push   ebx
c0008c90:	83 ec 14             	sub    esp,0x14
c0008c93:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008c97:	53                   	push   ebx
c0008c98:	e8 d0 4f 00 00       	call   c000dc6d <sinc_get_name>
c0008c9d:	83 c4 10             	add    esp,0x10
c0008ca0:	85 c0                	test   eax,eax
c0008ca2:	75 1d                	jne    c0008cc1 <src_get_name+0x32>
c0008ca4:	83 ec 0c             	sub    esp,0xc
c0008ca7:	53                   	push   ebx
c0008ca8:	e8 80 57 00 00       	call   c000e42d <zoh_get_name>
c0008cad:	83 c4 10             	add    esp,0x10
c0008cb0:	85 c0                	test   eax,eax
c0008cb2:	75 0d                	jne    c0008cc1 <src_get_name+0x32>
c0008cb4:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008cb8:	83 c4 08             	add    esp,0x8
c0008cbb:	5b                   	pop    ebx
c0008cbc:	e9 74 0b 00 00       	jmp    c0009835 <linear_get_name>
c0008cc1:	83 c4 08             	add    esp,0x8
c0008cc4:	5b                   	pop    ebx
c0008cc5:	c3                   	ret    

c0008cc6 <src_get_description>:
c0008cc6:	53                   	push   ebx
c0008cc7:	83 ec 14             	sub    esp,0x14
c0008cca:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008cce:	53                   	push   ebx
c0008ccf:	e8 ac 4f 00 00       	call   c000dc80 <sinc_get_description>
c0008cd4:	83 c4 10             	add    esp,0x10
c0008cd7:	85 c0                	test   eax,eax
c0008cd9:	75 1d                	jne    c0008cf8 <src_get_description+0x32>
c0008cdb:	83 ec 0c             	sub    esp,0xc
c0008cde:	53                   	push   ebx
c0008cdf:	e8 58 57 00 00       	call   c000e43c <zoh_get_description>
c0008ce4:	83 c4 10             	add    esp,0x10
c0008ce7:	85 c0                	test   eax,eax
c0008ce9:	75 0d                	jne    c0008cf8 <src_get_description+0x32>
c0008ceb:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008cef:	83 c4 08             	add    esp,0x8
c0008cf2:	5b                   	pop    ebx
c0008cf3:	e9 4c 0b 00 00       	jmp    c0009844 <linear_get_description>
c0008cf8:	83 c4 08             	add    esp,0x8
c0008cfb:	5b                   	pop    ebx
c0008cfc:	c3                   	ret    

c0008cfd <src_get_version>:
c0008cfd:	b8 a0 99 02 c0       	mov    eax,0xc00299a0
c0008d02:	c3                   	ret    

c0008d03 <src_is_valid_ratio>:
c0008d03:	83 ec 1c             	sub    esp,0x1c
c0008d06:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008d0a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008d0e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008d12:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008d16:	68 00 00 70 3f       	push   0x3f700000
c0008d1b:	6a 00                	push   0x0
c0008d1d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d21:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d25:	e8 45 f8 01 00       	call   c002856f <__ltdf2>
c0008d2a:	83 c4 10             	add    esp,0x10
c0008d2d:	31 d2                	xor    edx,edx
c0008d2f:	85 c0                	test   eax,eax
c0008d31:	78 1e                	js     c0008d51 <src_is_valid_ratio+0x4e>
c0008d33:	68 00 00 70 40       	push   0x40700000
c0008d38:	6a 00                	push   0x0
c0008d3a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d3e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d42:	e8 0a f8 01 00       	call   c0028551 <__gtdf2>
c0008d47:	31 d2                	xor    edx,edx
c0008d49:	83 c4 10             	add    esp,0x10
c0008d4c:	85 c0                	test   eax,eax
c0008d4e:	0f 9e c2             	setle  dl
c0008d51:	89 d0                	mov    eax,edx
c0008d53:	83 c4 1c             	add    esp,0x1c
c0008d56:	c3                   	ret    

c0008d57 <src_error>:
c0008d57:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008d5b:	31 c0                	xor    eax,eax
c0008d5d:	85 d2                	test   edx,edx
c0008d5f:	74 03                	je     c0008d64 <src_error+0xd>
c0008d61:	8b 42 10             	mov    eax,DWORD PTR [edx+0x10]
c0008d64:	c3                   	ret    

c0008d65 <src_strerror>:
c0008d65:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008d69:	31 c0                	xor    eax,eax
c0008d6b:	83 fa 17             	cmp    edx,0x17
c0008d6e:	77 07                	ja     c0008d77 <src_strerror+0x12>
c0008d70:	8b 04 95 00 9e 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd6200]
c0008d77:	c3                   	ret    

c0008d78 <src_simple>:
c0008d78:	56                   	push   esi
c0008d79:	53                   	push   ebx
c0008d7a:	83 ec 18             	sub    esp,0x18
c0008d7d:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008d81:	8d 44 24 10          	lea    eax,[esp+0x10]
c0008d85:	50                   	push   eax
c0008d86:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008d8a:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008d8e:	e8 0c fe ff ff       	call   c0008b9f <src_new>
c0008d93:	83 c4 10             	add    esp,0x10
c0008d96:	85 c0                	test   eax,eax
c0008d98:	75 06                	jne    c0008da0 <src_simple+0x28>
c0008d9a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008d9e:	eb 25                	jmp    c0008dc5 <src_simple+0x4d>
c0008da0:	c7 46 18 01 00 00 00 	mov    DWORD PTR [esi+0x18],0x1
c0008da7:	89 c3                	mov    ebx,eax
c0008da9:	50                   	push   eax
c0008daa:	50                   	push   eax
c0008dab:	56                   	push   esi
c0008dac:	53                   	push   ebx
c0008dad:	e8 e2 f9 ff ff       	call   c0008794 <src_process>
c0008db2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008db5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008db9:	e8 9a f9 ff ff       	call   c0008758 <src_delete>
c0008dbe:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008dc2:	83 c4 10             	add    esp,0x10
c0008dc5:	83 c4 14             	add    esp,0x14
c0008dc8:	5b                   	pop    ebx
c0008dc9:	5e                   	pop    esi
c0008dca:	c3                   	ret    

c0008dcb <src_short_to_float_array>:
c0008dcb:	53                   	push   ebx
c0008dcc:	83 ec 18             	sub    esp,0x18
c0008dcf:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008dd3:	85 db                	test   ebx,ebx
c0008dd5:	74 54                	je     c0008e2b <src_short_to_float_array+0x60>
c0008dd7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008ddb:	4b                   	dec    ebx
c0008ddc:	83 ec 0c             	sub    esp,0xc
c0008ddf:	0f bf 04 58          	movsx  eax,WORD PTR [eax+ebx*2]
c0008de3:	50                   	push   eax
c0008de4:	e8 1a f5 01 00       	call   c0028303 <__floatsidf>
c0008de9:	83 c4 10             	add    esp,0x10
c0008dec:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008df0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008df4:	68 00 00 00 3f       	push   0x3f000000
c0008df9:	6a 00                	push   0x0
c0008dfb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008dff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e03:	e8 98 ee 01 00       	call   c0027ca0 <__muldf3>
c0008e08:	59                   	pop    ecx
c0008e09:	59                   	pop    ecx
c0008e0a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008e0e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008e12:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e16:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e1a:	e8 54 f7 01 00       	call   c0028573 <__truncdfsf2>
c0008e1f:	83 c4 10             	add    esp,0x10
c0008e22:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008e26:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0008e29:	eb a8                	jmp    c0008dd3 <src_short_to_float_array+0x8>
c0008e2b:	83 c4 18             	add    esp,0x18
c0008e2e:	5b                   	pop    ebx
c0008e2f:	c3                   	ret    

c0008e30 <src_float_to_short_array>:
c0008e30:	56                   	push   esi
c0008e31:	53                   	push   ebx
c0008e32:	83 ec 14             	sub    esp,0x14
c0008e35:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008e39:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008e3d:	85 db                	test   ebx,ebx
c0008e3f:	0f 84 a4 00 00 00    	je     c0008ee9 <src_float_to_short_array+0xb9>
c0008e45:	83 ec 0c             	sub    esp,0xc
c0008e48:	4b                   	dec    ebx
c0008e49:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008e4d:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008e50:	e8 42 f8 01 00       	call   c0028697 <__extendsfdf2>
c0008e55:	83 c4 10             	add    esp,0x10
c0008e58:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008e5c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008e60:	68 00 00 e0 41       	push   0x41e00000
c0008e65:	6a 00                	push   0x0
c0008e67:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e6b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e6f:	e8 2c ee 01 00       	call   c0027ca0 <__muldf3>
c0008e74:	83 c4 10             	add    esp,0x10
c0008e77:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008e7b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008e7f:	68 ff ff df 41       	push   0x41dfffff
c0008e84:	68 00 00 c0 ff       	push   0xffc00000
c0008e89:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e8d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e91:	e8 d7 f6 01 00       	call   c002856d <__gedf2>
c0008e96:	83 c4 10             	add    esp,0x10
c0008e99:	85 c0                	test   eax,eax
c0008e9b:	78 08                	js     c0008ea5 <src_float_to_short_array+0x75>
c0008e9d:	66 c7 04 5e ff 7f    	mov    WORD PTR [esi+ebx*2],0x7fff
c0008ea3:	eb 98                	jmp    c0008e3d <src_float_to_short_array+0xd>
c0008ea5:	68 00 00 e0 c1       	push   0xc1e00000
c0008eaa:	6a 00                	push   0x0
c0008eac:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008eb0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008eb4:	e8 b8 f6 01 00       	call   c0028571 <__ledf2>
c0008eb9:	83 c4 10             	add    esp,0x10
c0008ebc:	85 c0                	test   eax,eax
c0008ebe:	7f 0b                	jg     c0008ecb <src_float_to_short_array+0x9b>
c0008ec0:	66 c7 04 5e 00 80    	mov    WORD PTR [esi+ebx*2],0x8000
c0008ec6:	e9 72 ff ff ff       	jmp    c0008e3d <src_float_to_short_array+0xd>
c0008ecb:	50                   	push   eax
c0008ecc:	50                   	push   eax
c0008ecd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ed1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ed5:	e8 46 f8 01 00       	call   c0028720 <lrint>
c0008eda:	83 c4 10             	add    esp,0x10
c0008edd:	c1 f8 10             	sar    eax,0x10
c0008ee0:	66 89 04 5e          	mov    WORD PTR [esi+ebx*2],ax
c0008ee4:	e9 54 ff ff ff       	jmp    c0008e3d <src_float_to_short_array+0xd>
c0008ee9:	83 c4 14             	add    esp,0x14
c0008eec:	5b                   	pop    ebx
c0008eed:	5e                   	pop    esi
c0008eee:	c3                   	ret    

c0008eef <src_int_to_float_array>:
c0008eef:	53                   	push   ebx
c0008ef0:	83 ec 18             	sub    esp,0x18
c0008ef3:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008ef7:	85 db                	test   ebx,ebx
c0008ef9:	74 52                	je     c0008f4d <src_int_to_float_array+0x5e>
c0008efb:	83 ec 0c             	sub    esp,0xc
c0008efe:	4b                   	dec    ebx
c0008eff:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008f03:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008f06:	e8 f8 f3 01 00       	call   c0028303 <__floatsidf>
c0008f0b:	83 c4 10             	add    esp,0x10
c0008f0e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008f12:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008f16:	68 00 00 00 3e       	push   0x3e000000
c0008f1b:	6a 00                	push   0x0
c0008f1d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f21:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f25:	e8 76 ed 01 00       	call   c0027ca0 <__muldf3>
c0008f2a:	59                   	pop    ecx
c0008f2b:	59                   	pop    ecx
c0008f2c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008f30:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008f34:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f38:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f3c:	e8 32 f6 01 00       	call   c0028573 <__truncdfsf2>
c0008f41:	83 c4 10             	add    esp,0x10
c0008f44:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008f48:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0008f4b:	eb aa                	jmp    c0008ef7 <src_int_to_float_array+0x8>
c0008f4d:	83 c4 18             	add    esp,0x18
c0008f50:	5b                   	pop    ebx
c0008f51:	c3                   	ret    

c0008f52 <src_float_to_int_array>:
c0008f52:	56                   	push   esi
c0008f53:	53                   	push   ebx
c0008f54:	83 ec 14             	sub    esp,0x14
c0008f57:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008f5b:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008f5f:	85 db                	test   ebx,ebx
c0008f61:	0f 84 a2 00 00 00    	je     c0009009 <src_float_to_int_array+0xb7>
c0008f67:	83 ec 0c             	sub    esp,0xc
c0008f6a:	4b                   	dec    ebx
c0008f6b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008f6f:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008f72:	e8 20 f7 01 00       	call   c0028697 <__extendsfdf2>
c0008f77:	83 c4 10             	add    esp,0x10
c0008f7a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008f7e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008f82:	68 00 00 e0 41       	push   0x41e00000
c0008f87:	6a 00                	push   0x0
c0008f89:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f8d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f91:	e8 0a ed 01 00       	call   c0027ca0 <__muldf3>
c0008f96:	83 c4 10             	add    esp,0x10
c0008f99:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008f9d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008fa1:	68 ff ff df 41       	push   0x41dfffff
c0008fa6:	68 00 00 c0 ff       	push   0xffc00000
c0008fab:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008faf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fb3:	e8 b5 f5 01 00       	call   c002856d <__gedf2>
c0008fb8:	83 c4 10             	add    esp,0x10
c0008fbb:	85 c0                	test   eax,eax
c0008fbd:	78 09                	js     c0008fc8 <src_float_to_int_array+0x76>
c0008fbf:	c7 04 9e ff ff ff 7f 	mov    DWORD PTR [esi+ebx*4],0x7fffffff
c0008fc6:	eb 97                	jmp    c0008f5f <src_float_to_int_array+0xd>
c0008fc8:	68 00 00 e0 c1       	push   0xc1e00000
c0008fcd:	6a 00                	push   0x0
c0008fcf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fd3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fd7:	e8 95 f5 01 00       	call   c0028571 <__ledf2>
c0008fdc:	83 c4 10             	add    esp,0x10
c0008fdf:	85 c0                	test   eax,eax
c0008fe1:	7f 0c                	jg     c0008fef <src_float_to_int_array+0x9d>
c0008fe3:	c7 04 9e 00 00 00 80 	mov    DWORD PTR [esi+ebx*4],0x80000000
c0008fea:	e9 70 ff ff ff       	jmp    c0008f5f <src_float_to_int_array+0xd>
c0008fef:	50                   	push   eax
c0008ff0:	50                   	push   eax
c0008ff1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ff5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ff9:	e8 22 f7 01 00       	call   c0028720 <lrint>
c0008ffe:	83 c4 10             	add    esp,0x10
c0009001:	89 04 9e             	mov    DWORD PTR [esi+ebx*4],eax
c0009004:	e9 56 ff ff ff       	jmp    c0008f5f <src_float_to_int_array+0xd>
c0009009:	83 c4 14             	add    esp,0x14
c000900c:	5b                   	pop    ebx
c000900d:	5e                   	pop    esi
c000900e:	c3                   	ret    

c000900f <linear_vari_process>:
c000900f:	55                   	push   ebp
c0009010:	31 d2                	xor    edx,edx
c0009012:	57                   	push   edi
c0009013:	56                   	push   esi
c0009014:	53                   	push   ebx
c0009015:	83 ec 3c             	sub    esp,0x3c
c0009018:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000901c:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c0009020:	0f 8e d3 07 00 00    	jle    c00097f9 <linear_vari_process+0x7ea>
c0009026:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000902a:	ba 05 00 00 00       	mov    edx,0x5
c000902f:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c0009032:	85 db                	test   ebx,ebx
c0009034:	0f 84 bf 07 00 00    	je     c00097f9 <linear_vari_process+0x7ea>
c000903a:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000903d:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0009041:	74 19                	je     c000905c <linear_vari_process+0x4d>
c0009043:	31 d2                	xor    edx,edx
c0009045:	39 c2                	cmp    edx,eax
c0009047:	7d 0c                	jge    c0009055 <linear_vari_process+0x46>
c0009049:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000904b:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c000904e:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c0009052:	42                   	inc    edx
c0009053:	eb f0                	jmp    c0009045 <linear_vari_process+0x36>
c0009055:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000905c:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000905f:	0f af d0             	imul   edx,eax
c0009062:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0009065:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c0009069:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0009070:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0009073:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000907a:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000907e:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0009081:	8b 00                	mov    eax,DWORD PTR [eax]
c0009083:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009087:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000908b:	68 00 00 70 3f       	push   0x3f700000
c0009090:	6a 00                	push   0x0
c0009092:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009096:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000909a:	e8 d0 f4 01 00       	call   c002856f <__ltdf2>
c000909f:	83 c4 10             	add    esp,0x10
c00090a2:	ba 16 00 00 00       	mov    edx,0x16
c00090a7:	85 c0                	test   eax,eax
c00090a9:	0f 88 4a 07 00 00    	js     c00097f9 <linear_vari_process+0x7ea>
c00090af:	68 00 00 70 40       	push   0x40700000
c00090b4:	6a 00                	push   0x0
c00090b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00090ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00090be:	e8 8e f4 01 00       	call   c0028551 <__gtdf2>
c00090c3:	83 c4 10             	add    esp,0x10
c00090c6:	ba 16 00 00 00       	mov    edx,0x16
c00090cb:	85 c0                	test   eax,eax
c00090cd:	0f 8f 26 07 00 00    	jg     c00097f9 <linear_vari_process+0x7ea>
c00090d3:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00090d7:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00090da:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00090dd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00090e1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00090e5:	68 00 00 f0 3f       	push   0x3ff00000
c00090ea:	6a 00                	push   0x0
c00090ec:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090f0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090f4:	e8 76 f4 01 00       	call   c002856f <__ltdf2>
c00090f9:	83 c4 10             	add    esp,0x10
c00090fc:	85 c0                	test   eax,eax
c00090fe:	0f 89 89 02 00 00    	jns    c000938d <linear_vari_process+0x37e>
c0009104:	8b 7b 14             	mov    edi,DWORD PTR [ebx+0x14]
c0009107:	39 7b 18             	cmp    DWORD PTR [ebx+0x18],edi
c000910a:	0f 8d 7d 02 00 00    	jge    c000938d <linear_vari_process+0x37e>
c0009110:	83 ec 0c             	sub    esp,0xc
c0009113:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009116:	e8 e8 f1 01 00       	call   c0028303 <__floatsidf>
c000911b:	83 c4 10             	add    esp,0x10
c000911e:	89 04 24             	mov    DWORD PTR [esp],eax
c0009121:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009125:	68 00 00 f0 3f       	push   0x3ff00000
c000912a:	6a 00                	push   0x0
c000912c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009130:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009134:	e8 ea e4 01 00       	call   c0027623 <__adddf3>
c0009139:	83 c4 10             	add    esp,0x10
c000913c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009140:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009144:	52                   	push   edx
c0009145:	50                   	push   eax
c0009146:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000914a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000914e:	e8 4d eb 01 00       	call   c0027ca0 <__muldf3>
c0009153:	5d                   	pop    ebp
c0009154:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009158:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000915c:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000915f:	e8 9f f1 01 00       	call   c0028303 <__floatsidf>
c0009164:	83 c4 10             	add    esp,0x10
c0009167:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000916b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000916f:	52                   	push   edx
c0009170:	50                   	push   eax
c0009171:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009175:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009179:	e8 a5 e4 01 00       	call   c0027623 <__adddf3>
c000917e:	59                   	pop    ecx
c000917f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009183:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0009187:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c000918a:	e8 74 f1 01 00       	call   c0028303 <__floatsidf>
c000918f:	83 c4 10             	add    esp,0x10
c0009192:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009196:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000919a:	52                   	push   edx
c000919b:	50                   	push   eax
c000919c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00091a0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00091a4:	e8 c4 f3 01 00       	call   c002856d <__gedf2>
c00091a9:	83 c4 10             	add    esp,0x10
c00091ac:	85 c0                	test   eax,eax
c00091ae:	0f 89 d9 01 00 00    	jns    c000938d <linear_vari_process+0x37e>
c00091b4:	85 ff                	test   edi,edi
c00091b6:	0f 8e f4 00 00 00    	jle    c00092b0 <linear_vari_process+0x2a1>
c00091bc:	83 ec 10             	sub    esp,0x10
c00091bf:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00091c2:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c00091c5:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00091c9:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00091cc:	ff 30                	push   DWORD PTR [eax]
c00091ce:	e8 a1 ea 01 00       	call   c0027c74 <__subdf3>
c00091d3:	83 c4 18             	add    esp,0x18
c00091d6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00091da:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00091de:	52                   	push   edx
c00091df:	50                   	push   eax
c00091e0:	e8 1b f5 01 00       	call   c0028700 <fabs>
c00091e5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00091e9:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00091ed:	83 c4 10             	add    esp,0x10
c00091f0:	68 a1 9c c7 3b       	push   0x3bc79ca1
c00091f5:	68 23 42 92 0c       	push   0xc924223
c00091fa:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00091fe:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009202:	e8 4a f3 01 00       	call   c0028551 <__gtdf2>
c0009207:	83 c4 10             	add    esp,0x10
c000920a:	85 c0                	test   eax,eax
c000920c:	0f 8e 9e 00 00 00    	jle    c00092b0 <linear_vari_process+0x2a1>
c0009212:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0009216:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0009219:	8b 00                	mov    eax,DWORD PTR [eax]
c000921b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000921f:	89 04 24             	mov    DWORD PTR [esp],eax
c0009222:	52                   	push   edx
c0009223:	50                   	push   eax
c0009224:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0009227:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000922a:	e8 45 ea 01 00       	call   c0027c74 <__subdf3>
c000922f:	59                   	pop    ecx
c0009230:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009234:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009238:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000923b:	e8 c3 f0 01 00       	call   c0028303 <__floatsidf>
c0009240:	83 c4 10             	add    esp,0x10
c0009243:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009247:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000924b:	52                   	push   edx
c000924c:	50                   	push   eax
c000924d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009251:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009255:	e8 46 ea 01 00       	call   c0027ca0 <__muldf3>
c000925a:	5f                   	pop    edi
c000925b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000925f:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009263:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0009266:	e8 98 f0 01 00       	call   c0028303 <__floatsidf>
c000926b:	83 c4 10             	add    esp,0x10
c000926e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009272:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009276:	52                   	push   edx
c0009277:	50                   	push   eax
c0009278:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000927c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009280:	e8 ff ec 01 00       	call   c0027f84 <__divdf3>
c0009285:	83 c4 10             	add    esp,0x10
c0009288:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000928c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009290:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009294:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009298:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000929c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00092a0:	e8 7e e3 01 00       	call   c0027623 <__adddf3>
c00092a5:	83 c4 10             	add    esp,0x10
c00092a8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00092ac:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00092b0:	31 ff                	xor    edi,edi
c00092b2:	39 7b 04             	cmp    DWORD PTR [ebx+0x4],edi
c00092b5:	0f 8e 9d 00 00 00    	jle    c0009358 <linear_vari_process+0x349>
c00092bb:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c00092be:	8b 6c bb 1c          	mov    ebp,DWORD PTR [ebx+edi*4+0x1c]
c00092c2:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00092c5:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c00092c9:	89 04 24             	mov    DWORD PTR [esp],eax
c00092cc:	8b 06                	mov    eax,DWORD PTR [esi]
c00092ce:	52                   	push   edx
c00092cf:	52                   	push   edx
c00092d0:	55                   	push   ebp
c00092d1:	ff 34 b8             	push   DWORD PTR [eax+edi*4]
c00092d4:	47                   	inc    edi
c00092d5:	e8 de dc 01 00       	call   c0026fb8 <__subsf3>
c00092da:	89 04 24             	mov    DWORD PTR [esp],eax
c00092dd:	e8 b5 f3 01 00       	call   c0028697 <__extendsfdf2>
c00092e2:	83 c4 10             	add    esp,0x10
c00092e5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00092e9:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00092ed:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00092f1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00092f5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092f9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092fd:	e8 9e e9 01 00       	call   c0027ca0 <__muldf3>
c0009302:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009305:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009309:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000930d:	e8 85 f3 01 00       	call   c0028697 <__extendsfdf2>
c0009312:	83 c4 10             	add    esp,0x10
c0009315:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009319:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000931d:	52                   	push   edx
c000931e:	50                   	push   eax
c000931f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009323:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009327:	e8 f7 e2 01 00       	call   c0027623 <__adddf3>
c000932c:	59                   	pop    ecx
c000932d:	5d                   	pop    ebp
c000932e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009332:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009336:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000933a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000933e:	e8 30 f2 01 00       	call   c0028573 <__truncdfsf2>
c0009343:	83 c4 10             	add    esp,0x10
c0009346:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0009349:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000934d:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c0009350:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c0009353:	e9 5a ff ff ff       	jmp    c00092b2 <linear_vari_process+0x2a3>
c0009358:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000935c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009360:	68 00 00 f0 3f       	push   0x3ff00000
c0009365:	6a 00                	push   0x0
c0009367:	e8 18 ec 01 00       	call   c0027f84 <__divdf3>
c000936c:	83 c4 10             	add    esp,0x10
c000936f:	89 04 24             	mov    DWORD PTR [esp],eax
c0009372:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009376:	52                   	push   edx
c0009377:	50                   	push   eax
c0009378:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000937c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009380:	e8 9e e2 01 00       	call   c0027623 <__adddf3>
c0009385:	83 c4 10             	add    esp,0x10
c0009388:	e9 50 fd ff ff       	jmp    c00090dd <linear_vari_process+0xce>
c000938d:	50                   	push   eax
c000938e:	50                   	push   eax
c000938f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009393:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009397:	e8 84 f3 01 00       	call   c0028720 <lrint>
c000939c:	83 ec 0c             	sub    esp,0xc
c000939f:	50                   	push   eax
c00093a0:	e8 5e ef 01 00       	call   c0028303 <__floatsidf>
c00093a5:	83 c4 10             	add    esp,0x10
c00093a8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00093ac:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00093b0:	52                   	push   edx
c00093b1:	50                   	push   eax
c00093b2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00093b6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00093ba:	e8 b5 e8 01 00       	call   c0027c74 <__subdf3>
c00093bf:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00093c3:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00093c7:	83 c4 20             	add    esp,0x20
c00093ca:	6a 00                	push   0x0
c00093cc:	6a 00                	push   0x0
c00093ce:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093d2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093d6:	e8 94 f1 01 00       	call   c002856f <__ltdf2>
c00093db:	83 c4 10             	add    esp,0x10
c00093de:	85 c0                	test   eax,eax
c00093e0:	79 1e                	jns    c0009400 <linear_vari_process+0x3f1>
c00093e2:	68 00 00 f0 3f       	push   0x3ff00000
c00093e7:	6a 00                	push   0x0
c00093e9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093ed:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093f1:	e8 2d e2 01 00       	call   c0027623 <__adddf3>
c00093f6:	83 c4 10             	add    esp,0x10
c00093f9:	89 04 24             	mov    DWORD PTR [esp],eax
c00093fc:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009400:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0009403:	83 ec 10             	sub    esp,0x10
c0009406:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000940a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000940e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009412:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009416:	e8 59 e8 01 00       	call   c0027c74 <__subdf3>
c000941b:	83 c4 18             	add    esp,0x18
c000941e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009422:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009426:	52                   	push   edx
c0009427:	50                   	push   eax
c0009428:	e8 f3 f2 01 00       	call   c0028720 <lrint>
c000942d:	83 c4 10             	add    esp,0x10
c0009430:	0f af f8             	imul   edi,eax
c0009433:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0009436:	01 7b 10             	add    DWORD PTR [ebx+0x10],edi
c0009439:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000943c:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c000943f:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c0009442:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c0009446:	0f 8d 13 03 00 00    	jge    c000975f <linear_vari_process+0x750>
c000944c:	83 ec 0c             	sub    esp,0xc
c000944f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009452:	e8 ac ee 01 00       	call   c0028303 <__floatsidf>
c0009457:	83 c4 10             	add    esp,0x10
c000945a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000945e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009462:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009466:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000946a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000946e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009472:	e8 29 e8 01 00       	call   c0027ca0 <__muldf3>
c0009477:	89 3c 24             	mov    DWORD PTR [esp],edi
c000947a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000947e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009482:	e8 7c ee 01 00       	call   c0028303 <__floatsidf>
c0009487:	83 c4 10             	add    esp,0x10
c000948a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000948e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009492:	52                   	push   edx
c0009493:	50                   	push   eax
c0009494:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009498:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000949c:	e8 82 e1 01 00       	call   c0027623 <__adddf3>
c00094a1:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00094a4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00094a8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00094ac:	e8 52 ee 01 00       	call   c0028303 <__floatsidf>
c00094b1:	83 c4 10             	add    esp,0x10
c00094b4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00094b8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00094bc:	52                   	push   edx
c00094bd:	50                   	push   eax
c00094be:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094c2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094c6:	e8 a4 f0 01 00       	call   c002856f <__ltdf2>
c00094cb:	83 c4 10             	add    esp,0x10
c00094ce:	85 c0                	test   eax,eax
c00094d0:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00094d4:	0f 89 85 02 00 00    	jns    c000975f <linear_vari_process+0x750>
c00094da:	85 c9                	test   ecx,ecx
c00094dc:	0f 8e f5 00 00 00    	jle    c00095d7 <linear_vari_process+0x5c8>
c00094e2:	83 ec 10             	sub    esp,0x10
c00094e5:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00094e8:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c00094eb:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00094ef:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00094f2:	ff 30                	push   DWORD PTR [eax]
c00094f4:	e8 7b e7 01 00       	call   c0027c74 <__subdf3>
c00094f9:	83 c4 18             	add    esp,0x18
c00094fc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009500:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009504:	52                   	push   edx
c0009505:	50                   	push   eax
c0009506:	e8 f5 f1 01 00       	call   c0028700 <fabs>
c000950b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000950f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009513:	83 c4 10             	add    esp,0x10
c0009516:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000951b:	68 23 42 92 0c       	push   0xc924223
c0009520:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009524:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009528:	e8 24 f0 01 00       	call   c0028551 <__gtdf2>
c000952d:	83 c4 10             	add    esp,0x10
c0009530:	85 c0                	test   eax,eax
c0009532:	0f 8e 9f 00 00 00    	jle    c00095d7 <linear_vari_process+0x5c8>
c0009538:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000953c:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000953f:	8b 00                	mov    eax,DWORD PTR [eax]
c0009541:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009545:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009549:	52                   	push   edx
c000954a:	50                   	push   eax
c000954b:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000954e:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c0009551:	e8 1e e7 01 00       	call   c0027c74 <__subdf3>
c0009556:	5f                   	pop    edi
c0009557:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000955b:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000955f:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0009562:	e8 9c ed 01 00       	call   c0028303 <__floatsidf>
c0009567:	83 c4 10             	add    esp,0x10
c000956a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000956e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009572:	52                   	push   edx
c0009573:	50                   	push   eax
c0009574:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009578:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000957c:	e8 1f e7 01 00       	call   c0027ca0 <__muldf3>
c0009581:	5d                   	pop    ebp
c0009582:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009586:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000958a:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000958d:	e8 71 ed 01 00       	call   c0028303 <__floatsidf>
c0009592:	83 c4 10             	add    esp,0x10
c0009595:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009599:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000959d:	52                   	push   edx
c000959e:	50                   	push   eax
c000959f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00095a3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00095a7:	e8 d8 e9 01 00       	call   c0027f84 <__divdf3>
c00095ac:	83 c4 10             	add    esp,0x10
c00095af:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00095b3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00095b7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00095bb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00095bf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00095c3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00095c7:	e8 57 e0 01 00       	call   c0027623 <__adddf3>
c00095cc:	83 c4 10             	add    esp,0x10
c00095cf:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00095d3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00095d7:	31 ff                	xor    edi,edi
c00095d9:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c00095dc:	39 f8                	cmp    eax,edi
c00095de:	0f 8e ac 00 00 00    	jle    c0009690 <linear_vari_process+0x681>
c00095e4:	8b 16                	mov    edx,DWORD PTR [esi]
c00095e6:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00095e9:	29 c1                	sub    ecx,eax
c00095eb:	89 c8                	mov    eax,ecx
c00095ed:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c00095f0:	01 f8                	add    eax,edi
c00095f2:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c00095f6:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c00095f9:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00095fc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009600:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0009603:	51                   	push   ecx
c0009604:	01 f8                	add    eax,edi
c0009606:	51                   	push   ecx
c0009607:	47                   	inc    edi
c0009608:	55                   	push   ebp
c0009609:	ff 34 82             	push   DWORD PTR [edx+eax*4]
c000960c:	e8 a7 d9 01 00       	call   c0026fb8 <__subsf3>
c0009611:	89 04 24             	mov    DWORD PTR [esp],eax
c0009614:	e8 7e f0 01 00       	call   c0028697 <__extendsfdf2>
c0009619:	83 c4 10             	add    esp,0x10
c000961c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009620:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009624:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009628:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000962c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009630:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009634:	e8 67 e6 01 00       	call   c0027ca0 <__muldf3>
c0009639:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000963c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009640:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009644:	e8 4e f0 01 00       	call   c0028697 <__extendsfdf2>
c0009649:	83 c4 10             	add    esp,0x10
c000964c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009650:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009654:	52                   	push   edx
c0009655:	50                   	push   eax
c0009656:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000965a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000965e:	e8 c0 df 01 00       	call   c0027623 <__adddf3>
c0009663:	5d                   	pop    ebp
c0009664:	59                   	pop    ecx
c0009665:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009669:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000966d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009671:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009675:	e8 f9 ee 01 00       	call   c0028573 <__truncdfsf2>
c000967a:	83 c4 10             	add    esp,0x10
c000967d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009681:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0009685:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c0009688:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000968b:	e9 49 ff ff ff       	jmp    c00095d9 <linear_vari_process+0x5ca>
c0009690:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009694:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009698:	68 00 00 f0 3f       	push   0x3ff00000
c000969d:	6a 00                	push   0x0
c000969f:	e8 e0 e8 01 00       	call   c0027f84 <__divdf3>
c00096a4:	83 c4 10             	add    esp,0x10
c00096a7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00096ab:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00096af:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00096b3:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00096b7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096bb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096bf:	e8 5f df 01 00       	call   c0027623 <__adddf3>
c00096c4:	59                   	pop    ecx
c00096c5:	5f                   	pop    edi
c00096c6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00096ca:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00096ce:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096d2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096d6:	e8 45 f0 01 00       	call   c0028720 <lrint>
c00096db:	83 ec 0c             	sub    esp,0xc
c00096de:	50                   	push   eax
c00096df:	e8 1f ec 01 00       	call   c0028303 <__floatsidf>
c00096e4:	83 c4 10             	add    esp,0x10
c00096e7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00096eb:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00096ef:	52                   	push   edx
c00096f0:	50                   	push   eax
c00096f1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00096f5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00096f9:	e8 76 e5 01 00       	call   c0027c74 <__subdf3>
c00096fe:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009702:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009706:	83 c4 20             	add    esp,0x20
c0009709:	6a 00                	push   0x0
c000970b:	6a 00                	push   0x0
c000970d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009711:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009715:	e8 55 ee 01 00       	call   c002856f <__ltdf2>
c000971a:	83 c4 10             	add    esp,0x10
c000971d:	85 c0                	test   eax,eax
c000971f:	79 1e                	jns    c000973f <linear_vari_process+0x730>
c0009721:	68 00 00 f0 3f       	push   0x3ff00000
c0009726:	6a 00                	push   0x0
c0009728:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000972c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009730:	e8 ee de 01 00       	call   c0027623 <__adddf3>
c0009735:	83 c4 10             	add    esp,0x10
c0009738:	89 04 24             	mov    DWORD PTR [esp],eax
c000973b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000973f:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0009742:	83 ec 10             	sub    esp,0x10
c0009745:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009749:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000974d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009751:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009755:	e8 1a e5 01 00       	call   c0027c74 <__subdf3>
c000975a:	e9 bc fc ff ff       	jmp    c000941b <linear_vari_process+0x40c>
c000975f:	39 fd                	cmp    ebp,edi
c0009761:	7d 38                	jge    c000979b <linear_vari_process+0x78c>
c0009763:	83 ec 0c             	sub    esp,0xc
c0009766:	89 f8                	mov    eax,edi
c0009768:	29 e8                	sub    eax,ebp
c000976a:	99                   	cdq    
c000976b:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000976e:	50                   	push   eax
c000976f:	e8 8f eb 01 00       	call   c0028303 <__floatsidf>
c0009774:	83 c4 10             	add    esp,0x10
c0009777:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000977b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000977f:	52                   	push   edx
c0009780:	50                   	push   eax
c0009781:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009785:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009789:	e8 95 de 01 00       	call   c0027623 <__adddf3>
c000978e:	83 c4 10             	add    esp,0x10
c0009791:	89 6b 10             	mov    DWORD PTR [ebx+0x10],ebp
c0009794:	89 04 24             	mov    DWORD PTR [esp],eax
c0009797:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000979b:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c000979f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00097a2:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00097a6:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c00097a9:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c00097ac:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00097af:	85 c0                	test   eax,eax
c00097b1:	7f 29                	jg     c00097dc <linear_vari_process+0x7cd>
c00097b3:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c00097b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00097bb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00097bf:	89 01                	mov    DWORD PTR [ecx],eax
c00097c1:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00097c4:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00097c7:	99                   	cdq    
c00097c8:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c00097cb:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c00097ce:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00097d1:	99                   	cdq    
c00097d2:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c00097d5:	31 d2                	xor    edx,edx
c00097d7:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c00097da:	eb 1d                	jmp    c00097f9 <linear_vari_process+0x7ea>
c00097dc:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c00097df:	31 d2                	xor    edx,edx
c00097e1:	29 c8                	sub    eax,ecx
c00097e3:	c1 e0 02             	shl    eax,0x2
c00097e6:	39 d1                	cmp    ecx,edx
c00097e8:	7e c9                	jle    c00097b3 <linear_vari_process+0x7a4>
c00097ea:	8b 3e                	mov    edi,DWORD PTR [esi]
c00097ec:	8b 3c 07             	mov    edi,DWORD PTR [edi+eax*1]
c00097ef:	83 c0 04             	add    eax,0x4
c00097f2:	89 7c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],edi
c00097f6:	42                   	inc    edx
c00097f7:	eb ed                	jmp    c00097e6 <linear_vari_process+0x7d7>
c00097f9:	83 c4 3c             	add    esp,0x3c
c00097fc:	89 d0                	mov    eax,edx
c00097fe:	5b                   	pop    ebx
c00097ff:	5e                   	pop    esi
c0009800:	5f                   	pop    edi
c0009801:	5d                   	pop    ebp
c0009802:	c3                   	ret    

c0009803 <linear_reset>:
c0009803:	83 ec 0c             	sub    esp,0xc
c0009806:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000980a:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000980d:	85 c0                	test   eax,eax
c000980f:	74 20                	je     c0009831 <linear_reset+0x2e>
c0009811:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c0009814:	83 c0 1c             	add    eax,0x1c
c0009817:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c000981a:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c0009821:	c1 e2 02             	shl    edx,0x2
c0009824:	51                   	push   ecx
c0009825:	52                   	push   edx
c0009826:	6a 00                	push   0x0
c0009828:	50                   	push   eax
c0009829:	e8 4a 6f ff ff       	call   c0000778 <memset>
c000982e:	83 c4 10             	add    esp,0x10
c0009831:	83 c4 0c             	add    esp,0xc
c0009834:	c3                   	ret    

c0009835 <linear_get_name>:
c0009835:	31 c0                	xor    eax,eax
c0009837:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c000983c:	75 05                	jne    c0009843 <linear_get_name+0xe>
c000983e:	b8 60 9e 02 c0       	mov    eax,0xc0029e60
c0009843:	c3                   	ret    

c0009844 <linear_get_description>:
c0009844:	31 c0                	xor    eax,eax
c0009846:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c000984b:	75 05                	jne    c0009852 <linear_get_description+0xe>
c000984d:	b8 74 9e 02 c0       	mov    eax,0xc0029e74
c0009852:	c3                   	ret    

c0009853 <linear_set_converter>:
c0009853:	53                   	push   ebx
c0009854:	b8 0a 00 00 00       	mov    eax,0xa
c0009859:	83 ec 08             	sub    esp,0x8
c000985c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009860:	83 7c 24 14 04       	cmp    DWORD PTR [esp+0x14],0x4
c0009865:	75 6e                	jne    c00098d5 <linear_set_converter+0x82>
c0009867:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000986a:	85 c0                	test   eax,eax
c000986c:	74 13                	je     c0009881 <linear_set_converter+0x2e>
c000986e:	83 ec 0c             	sub    esp,0xc
c0009871:	50                   	push   eax
c0009872:	e8 7d 60 00 00       	call   c000f8f4 <free>
c0009877:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000987e:	83 c4 10             	add    esp,0x10
c0009881:	50                   	push   eax
c0009882:	50                   	push   eax
c0009883:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0009886:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c000988d:	50                   	push   eax
c000988e:	6a 01                	push   0x1
c0009890:	e8 7f 60 00 00       	call   c000f914 <calloc>
c0009895:	83 c4 10             	add    esp,0x10
c0009898:	89 c2                	mov    edx,eax
c000989a:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000989d:	85 d2                	test   edx,edx
c000989f:	b8 01 00 00 00       	mov    eax,0x1
c00098a4:	74 2f                	je     c00098d5 <linear_set_converter+0x82>
c00098a6:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00098a9:	83 ec 0c             	sub    esp,0xc
c00098ac:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00098af:	c7 02 fc c4 87 07    	mov    DWORD PTR [edx],0x787c4fc
c00098b5:	c7 43 24 0f 90 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000900f
c00098bc:	c7 43 20 0f 90 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000900f
c00098c3:	c7 43 28 03 98 00 c0 	mov    DWORD PTR [ebx+0x28],0xc0009803
c00098ca:	53                   	push   ebx
c00098cb:	e8 33 ff ff ff       	call   c0009803 <linear_reset>
c00098d0:	83 c4 10             	add    esp,0x10
c00098d3:	31 c0                	xor    eax,eax
c00098d5:	83 c4 08             	add    esp,0x8
c00098d8:	5b                   	pop    ebx
c00098d9:	c3                   	ret    

c00098da <int_to_fp>:
c00098da:	c1 e0 0c             	shl    eax,0xc
c00098dd:	c3                   	ret    

c00098de <fp_to_int>:
c00098de:	c1 f8 0c             	sar    eax,0xc
c00098e1:	c3                   	ret    

c00098e2 <fp_fraction_part>:
c00098e2:	25 ff 0f 00 00       	and    eax,0xfff
c00098e7:	c3                   	ret    

c00098e8 <fp_to_double>:
c00098e8:	83 ec 1c             	sub    esp,0x1c
c00098eb:	e8 f2 ff ff ff       	call   c00098e2 <fp_fraction_part>
c00098f0:	83 ec 0c             	sub    esp,0xc
c00098f3:	50                   	push   eax
c00098f4:	e8 0a ea 01 00       	call   c0028303 <__floatsidf>
c00098f9:	83 c4 10             	add    esp,0x10
c00098fc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009900:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009904:	68 00 00 30 3f       	push   0x3f300000
c0009909:	6a 00                	push   0x0
c000990b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000990f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009913:	e8 88 e3 01 00       	call   c0027ca0 <__muldf3>
c0009918:	83 c4 2c             	add    esp,0x2c
c000991b:	c3                   	ret    

c000991c <calc_output_single>:
c000991c:	55                   	push   ebp
c000991d:	57                   	push   edi
c000991e:	56                   	push   esi
c000991f:	89 c6                	mov    esi,eax
c0009921:	53                   	push   ebx
c0009922:	89 d3                	mov    ebx,edx
c0009924:	83 ec 4c             	sub    esp,0x4c
c0009927:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000992b:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c000992e:	e8 a7 ff ff ff       	call   c00098da <int_to_fp>
c0009933:	8b 7e 34             	mov    edi,DWORD PTR [esi+0x34]
c0009936:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000993a:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c000993e:	2b 44 24 18          	sub    eax,DWORD PTR [esp+0x18]
c0009942:	8b 7e 30             	mov    edi,DWORD PTR [esi+0x30]
c0009945:	99                   	cdq    
c0009946:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000994e:	f7 fb                	idiv   ebx
c0009950:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0009958:	89 da                	mov    edx,ebx
c000995a:	0f af d0             	imul   edx,eax
c000995d:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0009961:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0009965:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009969:	29 c2                	sub    edx,eax
c000996b:	8d 2c 96             	lea    ebp,[esi+edx*4]
c000996e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009972:	83 c5 04             	add    ebp,0x4
c0009975:	e8 6e ff ff ff       	call   c00098e8 <fp_to_double>
c000997a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000997e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009982:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009986:	e8 53 ff ff ff       	call   c00098de <fp_to_int>
c000998b:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c000998e:	52                   	push   edx
c000998f:	52                   	push   edx
c0009990:	51                   	push   ecx
c0009991:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c0009995:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c0009999:	e8 1a d6 01 00       	call   c0026fb8 <__subsf3>
c000999e:	89 04 24             	mov    DWORD PTR [esp],eax
c00099a1:	e8 f1 ec 01 00       	call   c0028697 <__extendsfdf2>
c00099a6:	83 c4 10             	add    esp,0x10
c00099a9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00099ad:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00099b1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00099b5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00099b9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00099bd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00099c1:	e8 da e2 01 00       	call   c0027ca0 <__muldf3>
c00099c6:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00099ca:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00099ce:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00099d1:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c00099d5:	e8 bd ec 01 00       	call   c0028697 <__extendsfdf2>
c00099da:	83 c4 10             	add    esp,0x10
c00099dd:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00099e1:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00099e5:	52                   	push   edx
c00099e6:	50                   	push   eax
c00099e7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00099eb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00099ef:	e8 2f dc 01 00       	call   c0027623 <__adddf3>
c00099f4:	59                   	pop    ecx
c00099f5:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00099f9:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c00099fd:	ff b5 40 08 00 00    	push   DWORD PTR [ebp+0x840]
c0009a03:	e8 8f ec 01 00       	call   c0028697 <__extendsfdf2>
c0009a08:	83 c4 10             	add    esp,0x10
c0009a0b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009a0f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009a13:	52                   	push   edx
c0009a14:	50                   	push   eax
c0009a15:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009a19:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009a1d:	e8 7e e2 01 00       	call   c0027ca0 <__muldf3>
c0009a22:	83 c4 10             	add    esp,0x10
c0009a25:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009a29:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009a2d:	52                   	push   edx
c0009a2e:	50                   	push   eax
c0009a2f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009a33:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009a37:	e8 e7 db 01 00       	call   c0027623 <__adddf3>
c0009a3c:	83 c4 10             	add    esp,0x10
c0009a3f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009a43:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009a47:	29 5c 24 10          	sub    DWORD PTR [esp+0x10],ebx
c0009a4b:	0f 89 1d ff ff ff    	jns    c000996e <calc_output_single+0x52>
c0009a51:	89 d9                	mov    ecx,ebx
c0009a53:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009a57:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c0009a5b:	89 dd                	mov    ebp,ebx
c0009a5d:	29 c8                	sub    eax,ecx
c0009a5f:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0009a67:	99                   	cdq    
c0009a68:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0009a70:	f7 fb                	idiv   ebx
c0009a72:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009a76:	0f af e8             	imul   ebp,eax
c0009a79:	8d 44 02 01          	lea    eax,[edx+eax*1+0x1]
c0009a7d:	01 cd                	add    ebp,ecx
c0009a7f:	8d 34 86             	lea    esi,[esi+eax*4]
c0009a82:	89 e8                	mov    eax,ebp
c0009a84:	83 ee 04             	sub    esi,0x4
c0009a87:	e8 5c fe ff ff       	call   c00098e8 <fp_to_double>
c0009a8c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009a90:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009a94:	89 e8                	mov    eax,ebp
c0009a96:	29 dd                	sub    ebp,ebx
c0009a98:	e8 41 fe ff ff       	call   c00098de <fp_to_int>
c0009a9d:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c0009aa0:	52                   	push   edx
c0009aa1:	52                   	push   edx
c0009aa2:	51                   	push   ecx
c0009aa3:	89 4c 24 44          	mov    DWORD PTR [esp+0x44],ecx
c0009aa7:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c0009aab:	e8 08 d5 01 00       	call   c0026fb8 <__subsf3>
c0009ab0:	89 04 24             	mov    DWORD PTR [esp],eax
c0009ab3:	e8 df eb 01 00       	call   c0028697 <__extendsfdf2>
c0009ab8:	83 c4 10             	add    esp,0x10
c0009abb:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009abf:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009ac3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ac7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009acb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009acf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ad3:	e8 c8 e1 01 00       	call   c0027ca0 <__muldf3>
c0009ad8:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0009adc:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009ae0:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009ae3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009ae7:	e8 ab eb 01 00       	call   c0028697 <__extendsfdf2>
c0009aec:	83 c4 10             	add    esp,0x10
c0009aef:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009af3:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009af7:	52                   	push   edx
c0009af8:	50                   	push   eax
c0009af9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009afd:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009b01:	e8 1d db 01 00       	call   c0027623 <__adddf3>
c0009b06:	59                   	pop    ecx
c0009b07:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009b0b:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009b0f:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c0009b15:	e8 7d eb 01 00       	call   c0028697 <__extendsfdf2>
c0009b1a:	83 c4 10             	add    esp,0x10
c0009b1d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009b21:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009b25:	52                   	push   edx
c0009b26:	50                   	push   eax
c0009b27:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009b2b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009b2f:	e8 6c e1 01 00       	call   c0027ca0 <__muldf3>
c0009b34:	83 c4 10             	add    esp,0x10
c0009b37:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009b3b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009b3f:	52                   	push   edx
c0009b40:	50                   	push   eax
c0009b41:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009b45:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009b49:	e8 d5 da 01 00       	call   c0027623 <__adddf3>
c0009b4e:	83 c4 10             	add    esp,0x10
c0009b51:	85 ed                	test   ebp,ebp
c0009b53:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009b57:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009b5b:	0f 8f 21 ff ff ff    	jg     c0009a82 <calc_output_single+0x166>
c0009b61:	52                   	push   edx
c0009b62:	50                   	push   eax
c0009b63:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b67:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b6b:	e8 b3 da 01 00       	call   c0027623 <__adddf3>
c0009b70:	83 c4 5c             	add    esp,0x5c
c0009b73:	5b                   	pop    ebx
c0009b74:	5e                   	pop    esi
c0009b75:	5f                   	pop    edi
c0009b76:	5d                   	pop    ebp
c0009b77:	c3                   	ret    

c0009b78 <calc_output_stereo>:
c0009b78:	55                   	push   ebp
c0009b79:	89 cd                	mov    ebp,ecx
c0009b7b:	57                   	push   edi
c0009b7c:	56                   	push   esi
c0009b7d:	53                   	push   ebx
c0009b7e:	89 c3                	mov    ebx,eax
c0009b80:	83 ec 6c             	sub    esp,0x6c
c0009b83:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009b87:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0009b8e:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0009b95:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009b99:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009b9d:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0009ba0:	e8 35 fd ff ff       	call   c00098da <int_to_fp>
c0009ba5:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0009bad:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009bb1:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0009bb9:	29 c8                	sub    eax,ecx
c0009bbb:	99                   	cdq    
c0009bbc:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009bc0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009bc4:	0f af d0             	imul   edx,eax
c0009bc7:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0009bca:	31 d2                	xor    edx,edx
c0009bcc:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c0009bd0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009bd4:	8b 73 34             	mov    esi,DWORD PTR [ebx+0x34]
c0009bd7:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c0009bdb:	8b 73 04             	mov    esi,DWORD PTR [ebx+0x4]
c0009bde:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0009be2:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0009be6:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c0009be9:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0009bee:	29 c1                	sub    ecx,eax
c0009bf0:	31 c0                	xor    eax,eax
c0009bf2:	8d 3c 8b             	lea    edi,[ebx+ecx*4]
c0009bf5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009bf9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009bfd:	83 c7 08             	add    edi,0x8
c0009c00:	e8 e3 fc ff ff       	call   c00098e8 <fp_to_double>
c0009c05:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0009c09:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0009c0d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009c11:	e8 c8 fc ff ff       	call   c00098de <fp_to_int>
c0009c16:	8b 0c 86             	mov    ecx,DWORD PTR [esi+eax*4]
c0009c19:	52                   	push   edx
c0009c1a:	52                   	push   edx
c0009c1b:	51                   	push   ecx
c0009c1c:	89 4c 24 68          	mov    DWORD PTR [esp+0x68],ecx
c0009c20:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c0009c24:	e8 8f d3 01 00       	call   c0026fb8 <__subsf3>
c0009c29:	89 04 24             	mov    DWORD PTR [esp],eax
c0009c2c:	e8 66 ea 01 00       	call   c0028697 <__extendsfdf2>
c0009c31:	83 c4 10             	add    esp,0x10
c0009c34:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c38:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c3c:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c40:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c44:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c48:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c4c:	e8 4f e0 01 00       	call   c0027ca0 <__muldf3>
c0009c51:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c0009c55:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009c59:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009c5c:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0009c60:	e8 32 ea 01 00       	call   c0028697 <__extendsfdf2>
c0009c65:	83 c4 10             	add    esp,0x10
c0009c68:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c6c:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c70:	52                   	push   edx
c0009c71:	50                   	push   eax
c0009c72:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009c76:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009c7a:	e8 a4 d9 01 00       	call   c0027623 <__adddf3>
c0009c7f:	59                   	pop    ecx
c0009c80:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0009c84:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c0009c88:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c0009c8e:	e8 04 ea 01 00       	call   c0028697 <__extendsfdf2>
c0009c93:	83 c4 10             	add    esp,0x10
c0009c96:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c9a:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c9e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009ca2:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009ca6:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009caa:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009cae:	e8 ed df 01 00       	call   c0027ca0 <__muldf3>
c0009cb3:	83 c4 10             	add    esp,0x10
c0009cb6:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009cba:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009cbe:	52                   	push   edx
c0009cbf:	50                   	push   eax
c0009cc0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009cc4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009cc8:	e8 56 d9 01 00       	call   c0027623 <__adddf3>
c0009ccd:	59                   	pop    ecx
c0009cce:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009cd2:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009cd6:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c0009cdc:	e8 b6 e9 01 00       	call   c0028697 <__extendsfdf2>
c0009ce1:	83 c4 10             	add    esp,0x10
c0009ce4:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009ce8:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009cec:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009cf0:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009cf4:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009cf8:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009cfc:	e8 9f df 01 00       	call   c0027ca0 <__muldf3>
c0009d01:	83 c4 10             	add    esp,0x10
c0009d04:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0009d08:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0009d0c:	52                   	push   edx
c0009d0d:	50                   	push   eax
c0009d0e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009d12:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009d16:	e8 08 d9 01 00       	call   c0027623 <__adddf3>
c0009d1b:	83 c4 10             	add    esp,0x10
c0009d1e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009d22:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009d26:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009d2a:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c0009d2e:	0f 89 c5 fe ff ff    	jns    c0009bf9 <calc_output_stereo+0x81>
c0009d34:	29 e9                	sub    ecx,ebp
c0009d36:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009d3a:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0009d3e:	29 c8                	sub    eax,ecx
c0009d40:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0009d48:	99                   	cdq    
c0009d49:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009d4d:	31 d2                	xor    edx,edx
c0009d4f:	0f af f8             	imul   edi,eax
c0009d52:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009d56:	40                   	inc    eax
c0009d57:	01 cf                	add    edi,ecx
c0009d59:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0009d5e:	03 44 24 28          	add    eax,DWORD PTR [esp+0x28]
c0009d62:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0009d6a:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c0009d6d:	31 c0                	xor    eax,eax
c0009d6f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009d73:	89 f8                	mov    eax,edi
c0009d75:	83 eb 08             	sub    ebx,0x8
c0009d78:	e8 6b fb ff ff       	call   c00098e8 <fp_to_double>
c0009d7d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009d81:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009d85:	89 f8                	mov    eax,edi
c0009d87:	e8 52 fb ff ff       	call   c00098de <fp_to_int>
c0009d8c:	8b 2c 86             	mov    ebp,DWORD PTR [esi+eax*4]
c0009d8f:	52                   	push   edx
c0009d90:	52                   	push   edx
c0009d91:	55                   	push   ebp
c0009d92:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c0009d96:	e8 1d d2 01 00       	call   c0026fb8 <__subsf3>
c0009d9b:	89 04 24             	mov    DWORD PTR [esp],eax
c0009d9e:	e8 f4 e8 01 00       	call   c0028697 <__extendsfdf2>
c0009da3:	83 c4 10             	add    esp,0x10
c0009da6:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009daa:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009dae:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009db2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009db6:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009dba:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009dbe:	e8 dd de 01 00       	call   c0027ca0 <__muldf3>
c0009dc3:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009dc6:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009dca:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009dce:	e8 c4 e8 01 00       	call   c0028697 <__extendsfdf2>
c0009dd3:	83 c4 10             	add    esp,0x10
c0009dd6:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009dda:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009dde:	52                   	push   edx
c0009ddf:	50                   	push   eax
c0009de0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009de4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009de8:	e8 36 d8 01 00       	call   c0027623 <__adddf3>
c0009ded:	59                   	pop    ecx
c0009dee:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0009df2:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0009df6:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c0009dfc:	e8 96 e8 01 00       	call   c0028697 <__extendsfdf2>
c0009e01:	83 c4 10             	add    esp,0x10
c0009e04:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009e08:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009e0c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e10:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e14:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e18:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e1c:	e8 7f de 01 00       	call   c0027ca0 <__muldf3>
c0009e21:	83 c4 10             	add    esp,0x10
c0009e24:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009e28:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009e2c:	52                   	push   edx
c0009e2d:	50                   	push   eax
c0009e2e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009e32:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009e36:	e8 e8 d7 01 00       	call   c0027623 <__adddf3>
c0009e3b:	5d                   	pop    ebp
c0009e3c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009e40:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009e44:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c0009e4a:	e8 48 e8 01 00       	call   c0028697 <__extendsfdf2>
c0009e4f:	83 c4 10             	add    esp,0x10
c0009e52:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009e56:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009e5a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e5e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e62:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e66:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e6a:	e8 31 de 01 00       	call   c0027ca0 <__muldf3>
c0009e6f:	83 c4 10             	add    esp,0x10
c0009e72:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009e76:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009e7a:	52                   	push   edx
c0009e7b:	50                   	push   eax
c0009e7c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e80:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e84:	e8 9a d7 01 00       	call   c0027623 <__adddf3>
c0009e89:	83 c4 10             	add    esp,0x10
c0009e8c:	2b 7c 24 08          	sub    edi,DWORD PTR [esp+0x8]
c0009e90:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009e94:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009e98:	85 ff                	test   edi,edi
c0009e9a:	0f 8f d3 fe ff ff    	jg     c0009d73 <calc_output_stereo+0x1fb>
c0009ea0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ea4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ea8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009eac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009eb0:	e8 6e d7 01 00       	call   c0027623 <__adddf3>
c0009eb5:	83 c4 10             	add    esp,0x10
c0009eb8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009ebc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009ec0:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009ec4:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009ec8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ecc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ed0:	e8 cb dd 01 00       	call   c0027ca0 <__muldf3>
c0009ed5:	59                   	pop    ecx
c0009ed6:	5b                   	pop    ebx
c0009ed7:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009edb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009edf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ee3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ee7:	e8 87 e6 01 00       	call   c0028573 <__truncdfsf2>
c0009eec:	83 c4 10             	add    esp,0x10
c0009eef:	8b 9c 24 88 00 00 00 	mov    ebx,DWORD PTR [esp+0x88]
c0009ef6:	89 03                	mov    DWORD PTR [ebx],eax
c0009ef8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009efc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009f00:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009f04:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009f08:	e8 16 d7 01 00       	call   c0027623 <__adddf3>
c0009f0d:	83 c4 10             	add    esp,0x10
c0009f10:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009f14:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009f18:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009f1c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009f20:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f24:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f28:	e8 73 dd 01 00       	call   c0027ca0 <__muldf3>
c0009f2d:	5e                   	pop    esi
c0009f2e:	5f                   	pop    edi
c0009f2f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009f33:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009f37:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f3b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f3f:	e8 2f e6 01 00       	call   c0028573 <__truncdfsf2>
c0009f44:	8b 9c 24 98 00 00 00 	mov    ebx,DWORD PTR [esp+0x98]
c0009f4b:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0009f4e:	83 c4 7c             	add    esp,0x7c
c0009f51:	5b                   	pop    ebx
c0009f52:	5e                   	pop    esi
c0009f53:	5f                   	pop    edi
c0009f54:	5d                   	pop    ebp
c0009f55:	c3                   	ret    

c0009f56 <calc_output_quad>:
c0009f56:	55                   	push   ebp
c0009f57:	57                   	push   edi
c0009f58:	56                   	push   esi
c0009f59:	89 c6                	mov    esi,eax
c0009f5b:	53                   	push   ebx
c0009f5c:	83 ec 7c             	sub    esp,0x7c
c0009f5f:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009f63:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c0009f67:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0009f6e:	8b 84 24 90 00 00 00 	mov    eax,DWORD PTR [esp+0x90]
c0009f75:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009f79:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009f7d:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0009f80:	e8 55 f9 ff ff       	call   c00098da <int_to_fp>
c0009f85:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0009f88:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0009f8b:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009f8f:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0009f93:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0009f97:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c0009f9b:	99                   	cdq    
c0009f9c:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c0009fa0:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009fa4:	8b 6e 30             	mov    ebp,DWORD PTR [esi+0x30]
c0009fa7:	31 d2                	xor    edx,edx
c0009fa9:	0f af d8             	imul   ebx,eax
c0009fac:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c0009fb4:	0f af c7             	imul   eax,edi
c0009fb7:	03 5c 24 28          	add    ebx,DWORD PTR [esp+0x28]
c0009fbb:	29 c1                	sub    ecx,eax
c0009fbd:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c0009fc5:	31 c0                	xor    eax,eax
c0009fc7:	8d 3c 8e             	lea    edi,[esi+ecx*4]
c0009fca:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009fce:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009fd2:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009fd6:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009fda:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009fde:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009fe2:	89 d8                	mov    eax,ebx
c0009fe4:	83 c7 10             	add    edi,0x10
c0009fe7:	e8 fc f8 ff ff       	call   c00098e8 <fp_to_double>
c0009fec:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009ff0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009ff4:	89 d8                	mov    eax,ebx
c0009ff6:	e8 e3 f8 ff ff       	call   c00098de <fp_to_int>
c0009ffb:	8b 4c 85 00          	mov    ecx,DWORD PTR [ebp+eax*4+0x0]
c0009fff:	52                   	push   edx
c000a000:	52                   	push   edx
c000a001:	51                   	push   ecx
c000a002:	89 4c 24 78          	mov    DWORD PTR [esp+0x78],ecx
c000a006:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c000a00a:	e8 a9 cf 01 00       	call   c0026fb8 <__subsf3>
c000a00f:	89 04 24             	mov    DWORD PTR [esp],eax
c000a012:	e8 80 e6 01 00       	call   c0028697 <__extendsfdf2>
c000a017:	83 c4 10             	add    esp,0x10
c000a01a:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a01e:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a022:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a026:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a02a:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a02e:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a032:	e8 69 dc 01 00       	call   c0027ca0 <__muldf3>
c000a037:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c000a03b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a03f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a042:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a046:	e8 4c e6 01 00       	call   c0028697 <__extendsfdf2>
c000a04b:	83 c4 10             	add    esp,0x10
c000a04e:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a052:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a056:	52                   	push   edx
c000a057:	50                   	push   eax
c000a058:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a05c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a060:	e8 be d5 01 00       	call   c0027623 <__adddf3>
c000a065:	59                   	pop    ecx
c000a066:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a06a:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a06e:	ff b7 34 08 00 00    	push   DWORD PTR [edi+0x834]
c000a074:	e8 1e e6 01 00       	call   c0028697 <__extendsfdf2>
c000a079:	83 c4 10             	add    esp,0x10
c000a07c:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a080:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a084:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a088:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a08c:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a090:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a094:	e8 07 dc 01 00       	call   c0027ca0 <__muldf3>
c000a099:	83 c4 10             	add    esp,0x10
c000a09c:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0a0:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0a4:	52                   	push   edx
c000a0a5:	50                   	push   eax
c000a0a6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a0aa:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a0ae:	e8 70 d5 01 00       	call   c0027623 <__adddf3>
c000a0b3:	59                   	pop    ecx
c000a0b4:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000a0b8:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000a0bc:	ff b7 38 08 00 00    	push   DWORD PTR [edi+0x838]
c000a0c2:	e8 d0 e5 01 00       	call   c0028697 <__extendsfdf2>
c000a0c7:	83 c4 10             	add    esp,0x10
c000a0ca:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0ce:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0da:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0de:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0e2:	e8 b9 db 01 00       	call   c0027ca0 <__muldf3>
c000a0e7:	83 c4 10             	add    esp,0x10
c000a0ea:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0ee:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0f2:	52                   	push   edx
c000a0f3:	50                   	push   eax
c000a0f4:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a0f8:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a0fc:	e8 22 d5 01 00       	call   c0027623 <__adddf3>
c000a101:	59                   	pop    ecx
c000a102:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a106:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a10a:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c000a110:	e8 82 e5 01 00       	call   c0028697 <__extendsfdf2>
c000a115:	83 c4 10             	add    esp,0x10
c000a118:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a11c:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a120:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a124:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a128:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a12c:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a130:	e8 6b db 01 00       	call   c0027ca0 <__muldf3>
c000a135:	83 c4 10             	add    esp,0x10
c000a138:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a13c:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a140:	52                   	push   edx
c000a141:	50                   	push   eax
c000a142:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a146:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a14a:	e8 d4 d4 01 00       	call   c0027623 <__adddf3>
c000a14f:	59                   	pop    ecx
c000a150:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000a154:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000a158:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c000a15e:	e8 34 e5 01 00       	call   c0028697 <__extendsfdf2>
c000a163:	83 c4 10             	add    esp,0x10
c000a166:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a16a:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a16e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a172:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a176:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a17a:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a17e:	e8 1d db 01 00       	call   c0027ca0 <__muldf3>
c000a183:	83 c4 10             	add    esp,0x10
c000a186:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a18a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a18e:	52                   	push   edx
c000a18f:	50                   	push   eax
c000a190:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a194:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a198:	e8 86 d4 01 00       	call   c0027623 <__adddf3>
c000a19d:	83 c4 10             	add    esp,0x10
c000a1a0:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000a1a4:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000a1a8:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c000a1ac:	0f 89 30 fe ff ff    	jns    c0009fe2 <calc_output_quad+0x8c>
c000a1b2:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000a1b6:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000a1ba:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000a1be:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c000a1c2:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000a1ca:	29 c8                	sub    eax,ecx
c000a1cc:	99                   	cdq    
c000a1cd:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c000a1d1:	31 d2                	xor    edx,edx
c000a1d3:	0f af d8             	imul   ebx,eax
c000a1d6:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000a1da:	40                   	inc    eax
c000a1db:	01 cb                	add    ebx,ecx
c000a1dd:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c000a1e2:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c000a1e6:	03 44 24 48          	add    eax,DWORD PTR [esp+0x48]
c000a1ea:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a1ee:	8d 34 86             	lea    esi,[esi+eax*4]
c000a1f1:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c000a1f9:	31 c0                	xor    eax,eax
c000a1fb:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000a1ff:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000a203:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a207:	89 d8                	mov    eax,ebx
c000a209:	83 ee 10             	sub    esi,0x10
c000a20c:	e8 d7 f6 ff ff       	call   c00098e8 <fp_to_double>
c000a211:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a215:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a219:	89 d8                	mov    eax,ebx
c000a21b:	e8 be f6 ff ff       	call   c00098de <fp_to_int>
c000a220:	8b 7c 85 00          	mov    edi,DWORD PTR [ebp+eax*4+0x0]
c000a224:	52                   	push   edx
c000a225:	52                   	push   edx
c000a226:	57                   	push   edi
c000a227:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c000a22b:	e8 88 cd 01 00       	call   c0026fb8 <__subsf3>
c000a230:	89 04 24             	mov    DWORD PTR [esp],eax
c000a233:	e8 5f e4 01 00       	call   c0028697 <__extendsfdf2>
c000a238:	83 c4 10             	add    esp,0x10
c000a23b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a23f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a243:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a247:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a24b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a24f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a253:	e8 48 da 01 00       	call   c0027ca0 <__muldf3>
c000a258:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a25b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a25f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a263:	e8 2f e4 01 00       	call   c0028697 <__extendsfdf2>
c000a268:	83 c4 10             	add    esp,0x10
c000a26b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a26f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a273:	52                   	push   edx
c000a274:	50                   	push   eax
c000a275:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a279:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a27d:	e8 a1 d3 01 00       	call   c0027623 <__adddf3>
c000a282:	59                   	pop    ecx
c000a283:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a287:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a28b:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a291:	e8 01 e4 01 00       	call   c0028697 <__extendsfdf2>
c000a296:	83 c4 10             	add    esp,0x10
c000a299:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a29d:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a2a1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2a5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2a9:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2ad:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2b1:	e8 ea d9 01 00       	call   c0027ca0 <__muldf3>
c000a2b6:	83 c4 10             	add    esp,0x10
c000a2b9:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a2bd:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a2c1:	52                   	push   edx
c000a2c2:	50                   	push   eax
c000a2c3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a2c7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a2cb:	e8 53 d3 01 00       	call   c0027623 <__adddf3>
c000a2d0:	5f                   	pop    edi
c000a2d1:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a2d5:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a2d9:	ff b6 58 08 00 00    	push   DWORD PTR [esi+0x858]
c000a2df:	e8 b3 e3 01 00       	call   c0028697 <__extendsfdf2>
c000a2e4:	83 c4 10             	add    esp,0x10
c000a2e7:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a2eb:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a2ef:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2f3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2f7:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2fb:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2ff:	e8 9c d9 01 00       	call   c0027ca0 <__muldf3>
c000a304:	83 c4 10             	add    esp,0x10
c000a307:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a30b:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a30f:	52                   	push   edx
c000a310:	50                   	push   eax
c000a311:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a315:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a319:	e8 05 d3 01 00       	call   c0027623 <__adddf3>
c000a31e:	59                   	pop    ecx
c000a31f:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000a323:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000a327:	ff b6 5c 08 00 00    	push   DWORD PTR [esi+0x85c]
c000a32d:	e8 65 e3 01 00       	call   c0028697 <__extendsfdf2>
c000a332:	83 c4 10             	add    esp,0x10
c000a335:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a339:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a33d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a341:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a345:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a349:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a34d:	e8 4e d9 01 00       	call   c0027ca0 <__muldf3>
c000a352:	83 c4 10             	add    esp,0x10
c000a355:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a359:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a35d:	52                   	push   edx
c000a35e:	50                   	push   eax
c000a35f:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a363:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a367:	e8 b7 d2 01 00       	call   c0027623 <__adddf3>
c000a36c:	5f                   	pop    edi
c000a36d:	89 44 24 5c          	mov    DWORD PTR [esp+0x5c],eax
c000a371:	89 54 24 60          	mov    DWORD PTR [esp+0x60],edx
c000a375:	ff b6 60 08 00 00    	push   DWORD PTR [esi+0x860]
c000a37b:	e8 17 e3 01 00       	call   c0028697 <__extendsfdf2>
c000a380:	83 c4 10             	add    esp,0x10
c000a383:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a387:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a38b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a38f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a393:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a397:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a39b:	e8 00 d9 01 00       	call   c0027ca0 <__muldf3>
c000a3a0:	83 c4 10             	add    esp,0x10
c000a3a3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a3a7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a3ab:	52                   	push   edx
c000a3ac:	50                   	push   eax
c000a3ad:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a3b1:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a3b5:	e8 69 d2 01 00       	call   c0027623 <__adddf3>
c000a3ba:	83 c4 10             	add    esp,0x10
c000a3bd:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c000a3c1:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000a3c5:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000a3c9:	85 db                	test   ebx,ebx
c000a3cb:	0f 8f 36 fe ff ff    	jg     c000a207 <calc_output_quad+0x2b1>
c000a3d1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3d5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3d9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3dd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3e1:	e8 3d d2 01 00       	call   c0027623 <__adddf3>
c000a3e6:	83 c4 10             	add    esp,0x10
c000a3e9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a3ed:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a3f1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3f5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3f9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3fd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a401:	e8 9a d8 01 00       	call   c0027ca0 <__muldf3>
c000a406:	59                   	pop    ecx
c000a407:	5b                   	pop    ebx
c000a408:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a40c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a410:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a414:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a418:	e8 56 e1 01 00       	call   c0028573 <__truncdfsf2>
c000a41d:	83 c4 10             	add    esp,0x10
c000a420:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a427:	89 06                	mov    DWORD PTR [esi],eax
c000a429:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a42d:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a431:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a435:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a439:	e8 e5 d1 01 00       	call   c0027623 <__adddf3>
c000a43e:	83 c4 10             	add    esp,0x10
c000a441:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a445:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a449:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a44d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a451:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a455:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a459:	e8 42 d8 01 00       	call   c0027ca0 <__muldf3>
c000a45e:	5e                   	pop    esi
c000a45f:	5f                   	pop    edi
c000a460:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a464:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a468:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a46c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a470:	e8 fe e0 01 00       	call   c0028573 <__truncdfsf2>
c000a475:	83 c4 10             	add    esp,0x10
c000a478:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a47f:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
c000a482:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a486:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a48a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a48e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a492:	e8 8c d1 01 00       	call   c0027623 <__adddf3>
c000a497:	83 c4 10             	add    esp,0x10
c000a49a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a49e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a4a2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4a6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4aa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4ae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4b2:	e8 e9 d7 01 00       	call   c0027ca0 <__muldf3>
c000a4b7:	5d                   	pop    ebp
c000a4b8:	59                   	pop    ecx
c000a4b9:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a4bd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a4c1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4c5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4c9:	e8 a5 e0 01 00       	call   c0028573 <__truncdfsf2>
c000a4ce:	83 c4 10             	add    esp,0x10
c000a4d1:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a4d8:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000a4db:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4df:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4e3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4e7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4eb:	e8 33 d1 01 00       	call   c0027623 <__adddf3>
c000a4f0:	83 c4 10             	add    esp,0x10
c000a4f3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a4f7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a4fb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4ff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a503:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a507:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a50b:	e8 90 d7 01 00       	call   c0027ca0 <__muldf3>
c000a510:	5b                   	pop    ebx
c000a511:	5e                   	pop    esi
c000a512:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a516:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a51a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a51e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a522:	e8 4c e0 01 00       	call   c0028573 <__truncdfsf2>
c000a527:	8b 8c 24 a8 00 00 00 	mov    ecx,DWORD PTR [esp+0xa8]
c000a52e:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c000a531:	81 c4 8c 00 00 00    	add    esp,0x8c
c000a537:	5b                   	pop    ebx
c000a538:	5e                   	pop    esi
c000a539:	5f                   	pop    edi
c000a53a:	5d                   	pop    ebp
c000a53b:	c3                   	ret    

c000a53c <calc_output_hex>:
c000a53c:	55                   	push   ebp
c000a53d:	89 cd                	mov    ebp,ecx
c000a53f:	57                   	push   edi
c000a540:	56                   	push   esi
c000a541:	53                   	push   ebx
c000a542:	89 c3                	mov    ebx,eax
c000a544:	81 ec 8c 00 00 00    	sub    esp,0x8c
c000a54a:	89 14 24             	mov    DWORD PTR [esp],edx
c000a54d:	8b 84 24 a0 00 00 00 	mov    eax,DWORD PTR [esp+0xa0]
c000a554:	8b 94 24 a4 00 00 00 	mov    edx,DWORD PTR [esp+0xa4]
c000a55b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a55f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a563:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000a566:	e8 6f f3 ff ff       	call   c00098da <int_to_fp>
c000a56b:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c000a56e:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000a572:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000a575:	29 c8                	sub    eax,ecx
c000a577:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c000a57b:	99                   	cdq    
c000a57c:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c000a584:	f7 3c 24             	idiv   DWORD PTR [esp]
c000a587:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000a58f:	0f af f8             	imul   edi,eax
c000a592:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000a595:	01 cf                	add    edi,ecx
c000a597:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a59b:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000a59e:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000a5a2:	0f af c2             	imul   eax,edx
c000a5a5:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a5a9:	29 c1                	sub    ecx,eax
c000a5ab:	31 d2                	xor    edx,edx
c000a5ad:	31 c0                	xor    eax,eax
c000a5af:	8d 34 8b             	lea    esi,[ebx+ecx*4]
c000a5b2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a5b6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a5ba:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000a5be:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000a5c2:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000a5c6:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000a5ca:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000a5ce:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000a5d2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a5d6:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a5da:	89 f8                	mov    eax,edi
c000a5dc:	e8 07 f3 ff ff       	call   c00098e8 <fp_to_double>
c000a5e1:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a5e5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a5e9:	89 f8                	mov    eax,edi
c000a5eb:	e8 ee f2 ff ff       	call   c00098de <fp_to_int>
c000a5f0:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a5f4:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000a5f7:	52                   	push   edx
c000a5f8:	52                   	push   edx
c000a5f9:	51                   	push   ecx
c000a5fa:	89 4c 24 74          	mov    DWORD PTR [esp+0x74],ecx
c000a5fe:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000a605:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000a609:	e8 aa c9 01 00       	call   c0026fb8 <__subsf3>
c000a60e:	89 04 24             	mov    DWORD PTR [esp],eax
c000a611:	e8 81 e0 01 00       	call   c0028697 <__extendsfdf2>
c000a616:	83 c4 10             	add    esp,0x10
c000a619:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a61d:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a621:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a625:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a629:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a62d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a631:	e8 6a d6 01 00       	call   c0027ca0 <__muldf3>
c000a636:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a63a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a63e:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a641:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a645:	e8 4d e0 01 00       	call   c0028697 <__extendsfdf2>
c000a64a:	83 c4 10             	add    esp,0x10
c000a64d:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a651:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a655:	52                   	push   edx
c000a656:	50                   	push   eax
c000a657:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a65b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a65f:	e8 bf cf 01 00       	call   c0027623 <__adddf3>
c000a664:	59                   	pop    ecx
c000a665:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a669:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a66d:	ff b6 44 08 00 00    	push   DWORD PTR [esi+0x844]
c000a673:	e8 1f e0 01 00       	call   c0028697 <__extendsfdf2>
c000a678:	83 c4 10             	add    esp,0x10
c000a67b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a67f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a683:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a687:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a68b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a68f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a693:	e8 08 d6 01 00       	call   c0027ca0 <__muldf3>
c000a698:	83 c4 10             	add    esp,0x10
c000a69b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a69f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a6a3:	52                   	push   edx
c000a6a4:	50                   	push   eax
c000a6a5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a6a9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a6ad:	e8 71 cf 01 00       	call   c0027623 <__adddf3>
c000a6b2:	59                   	pop    ecx
c000a6b3:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a6b7:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a6bb:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c000a6c1:	e8 d1 df 01 00       	call   c0028697 <__extendsfdf2>
c000a6c6:	83 c4 10             	add    esp,0x10
c000a6c9:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a6cd:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a6d1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6d5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6d9:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a6dd:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a6e1:	e8 ba d5 01 00       	call   c0027ca0 <__muldf3>
c000a6e6:	83 c4 10             	add    esp,0x10
c000a6e9:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a6ed:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a6f1:	52                   	push   edx
c000a6f2:	50                   	push   eax
c000a6f3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a6f7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a6fb:	e8 23 cf 01 00       	call   c0027623 <__adddf3>
c000a700:	59                   	pop    ecx
c000a701:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000a705:	89 54 24 50          	mov    DWORD PTR [esp+0x50],edx
c000a709:	ff b6 4c 08 00 00    	push   DWORD PTR [esi+0x84c]
c000a70f:	e8 83 df 01 00       	call   c0028697 <__extendsfdf2>
c000a714:	83 c4 10             	add    esp,0x10
c000a717:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a71b:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a71f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a723:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a727:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a72b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a72f:	e8 6c d5 01 00       	call   c0027ca0 <__muldf3>
c000a734:	83 c4 10             	add    esp,0x10
c000a737:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a73b:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a73f:	52                   	push   edx
c000a740:	50                   	push   eax
c000a741:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a745:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a749:	e8 d5 ce 01 00       	call   c0027623 <__adddf3>
c000a74e:	59                   	pop    ecx
c000a74f:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a753:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a757:	ff b6 50 08 00 00    	push   DWORD PTR [esi+0x850]
c000a75d:	e8 35 df 01 00       	call   c0028697 <__extendsfdf2>
c000a762:	83 c4 10             	add    esp,0x10
c000a765:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a769:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a76d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a771:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a775:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a779:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a77d:	e8 1e d5 01 00       	call   c0027ca0 <__muldf3>
c000a782:	83 c4 10             	add    esp,0x10
c000a785:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a789:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a78d:	52                   	push   edx
c000a78e:	50                   	push   eax
c000a78f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a793:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a797:	e8 87 ce 01 00       	call   c0027623 <__adddf3>
c000a79c:	59                   	pop    ecx
c000a79d:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000a7a1:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000a7a5:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a7ab:	e8 e7 de 01 00       	call   c0028697 <__extendsfdf2>
c000a7b0:	83 c4 10             	add    esp,0x10
c000a7b3:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a7b7:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a7bb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7bf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7c3:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a7c7:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a7cb:	e8 d0 d4 01 00       	call   c0027ca0 <__muldf3>
c000a7d0:	83 c4 10             	add    esp,0x10
c000a7d3:	83 c6 18             	add    esi,0x18
c000a7d6:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a7da:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a7de:	52                   	push   edx
c000a7df:	50                   	push   eax
c000a7e0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a7e4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a7e8:	e8 36 ce 01 00       	call   c0027623 <__adddf3>
c000a7ed:	59                   	pop    ecx
c000a7ee:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a7f2:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a7f6:	ff b6 40 08 00 00    	push   DWORD PTR [esi+0x840]
c000a7fc:	e8 96 de 01 00       	call   c0028697 <__extendsfdf2>
c000a801:	83 c4 10             	add    esp,0x10
c000a804:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a808:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a80c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a810:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a814:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a818:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a81c:	e8 7f d4 01 00       	call   c0027ca0 <__muldf3>
c000a821:	83 c4 10             	add    esp,0x10
c000a824:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a828:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a82c:	52                   	push   edx
c000a82d:	50                   	push   eax
c000a82e:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a832:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a836:	e8 e8 cd 01 00       	call   c0027623 <__adddf3>
c000a83b:	83 c4 10             	add    esp,0x10
c000a83e:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000a842:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000a846:	2b 3c 24             	sub    edi,DWORD PTR [esp]
c000a849:	0f 89 8b fd ff ff    	jns    c000a5da <calc_output_hex+0x9e>
c000a84f:	31 f6                	xor    esi,esi
c000a851:	31 ff                	xor    edi,edi
c000a853:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000a857:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000a85a:	89 7c 24 4c          	mov    DWORD PTR [esp+0x4c],edi
c000a85e:	29 e9                	sub    ecx,ebp
c000a860:	89 74 24 58          	mov    DWORD PTR [esp+0x58],esi
c000a864:	29 c8                	sub    eax,ecx
c000a866:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c000a869:	99                   	cdq    
c000a86a:	89 7c 24 5c          	mov    DWORD PTR [esp+0x5c],edi
c000a86e:	f7 3c 24             	idiv   DWORD PTR [esp]
c000a871:	89 74 24 60          	mov    DWORD PTR [esp+0x60],esi
c000a875:	0f af e8             	imul   ebp,eax
c000a878:	89 7c 24 64          	mov    DWORD PTR [esp+0x64],edi
c000a87c:	40                   	inc    eax
c000a87d:	01 cd                	add    ebp,ecx
c000a87f:	0f af 44 24 48       	imul   eax,DWORD PTR [esp+0x48]
c000a884:	89 74 24 68          	mov    DWORD PTR [esp+0x68],esi
c000a888:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000a88c:	89 74 24 48          	mov    DWORD PTR [esp+0x48],esi
c000a890:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c000a893:	89 7c 24 6c          	mov    DWORD PTR [esp+0x6c],edi
c000a897:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c000a89b:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c000a89f:	89 e8                	mov    eax,ebp
c000a8a1:	e8 42 f0 ff ff       	call   c00098e8 <fp_to_double>
c000a8a6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a8aa:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a8ae:	89 e8                	mov    eax,ebp
c000a8b0:	e8 29 f0 ff ff       	call   c00098de <fp_to_int>
c000a8b5:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a8b9:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000a8bc:	52                   	push   edx
c000a8bd:	52                   	push   edx
c000a8be:	51                   	push   ecx
c000a8bf:	89 8c 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],ecx
c000a8c6:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000a8cd:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000a8d1:	e8 e2 c6 01 00       	call   c0026fb8 <__subsf3>
c000a8d6:	89 04 24             	mov    DWORD PTR [esp],eax
c000a8d9:	e8 b9 dd 01 00       	call   c0028697 <__extendsfdf2>
c000a8de:	83 c4 10             	add    esp,0x10
c000a8e1:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a8e5:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a8e9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a8ed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a8f1:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a8f5:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a8f9:	e8 a2 d3 01 00       	call   c0027ca0 <__muldf3>
c000a8fe:	8b 8c 24 8c 00 00 00 	mov    ecx,DWORD PTR [esp+0x8c]
c000a905:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a909:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a90c:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a910:	e8 82 dd 01 00       	call   c0028697 <__extendsfdf2>
c000a915:	83 c4 10             	add    esp,0x10
c000a918:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a91c:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a920:	52                   	push   edx
c000a921:	50                   	push   eax
c000a922:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a926:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a92a:	e8 f4 cc 01 00       	call   c0027623 <__adddf3>
c000a92f:	59                   	pop    ecx
c000a930:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a934:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a938:	ff b3 44 08 00 00    	push   DWORD PTR [ebx+0x844]
c000a93e:	e8 54 dd 01 00       	call   c0028697 <__extendsfdf2>
c000a943:	83 c4 10             	add    esp,0x10
c000a946:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a94a:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a94e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a952:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a956:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a95a:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a95e:	e8 3d d3 01 00       	call   c0027ca0 <__muldf3>
c000a963:	83 c4 10             	add    esp,0x10
c000a966:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a96a:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a96e:	52                   	push   edx
c000a96f:	50                   	push   eax
c000a970:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a974:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a978:	e8 a6 cc 01 00       	call   c0027623 <__adddf3>
c000a97d:	59                   	pop    ecx
c000a97e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000a982:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000a986:	ff b3 48 08 00 00    	push   DWORD PTR [ebx+0x848]
c000a98c:	e8 06 dd 01 00       	call   c0028697 <__extendsfdf2>
c000a991:	83 c4 10             	add    esp,0x10
c000a994:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a998:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a99c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9a0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9a4:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9a8:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9ac:	e8 ef d2 01 00       	call   c0027ca0 <__muldf3>
c000a9b1:	83 c4 10             	add    esp,0x10
c000a9b4:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a9b8:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a9bc:	52                   	push   edx
c000a9bd:	50                   	push   eax
c000a9be:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000a9c2:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000a9c6:	e8 58 cc 01 00       	call   c0027623 <__adddf3>
c000a9cb:	59                   	pop    ecx
c000a9cc:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c000a9d0:	89 54 24 78          	mov    DWORD PTR [esp+0x78],edx
c000a9d4:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c000a9da:	e8 b8 dc 01 00       	call   c0028697 <__extendsfdf2>
c000a9df:	83 c4 10             	add    esp,0x10
c000a9e2:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a9e6:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a9ea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9ee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9f2:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9f6:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9fa:	e8 a1 d2 01 00       	call   c0027ca0 <__muldf3>
c000a9ff:	83 c4 10             	add    esp,0x10
c000aa02:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa06:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa0a:	52                   	push   edx
c000aa0b:	50                   	push   eax
c000aa0c:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000aa10:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000aa14:	e8 0a cc 01 00       	call   c0027623 <__adddf3>
c000aa19:	59                   	pop    ecx
c000aa1a:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c000aa1e:	89 54 24 70          	mov    DWORD PTR [esp+0x70],edx
c000aa22:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c000aa28:	e8 6a dc 01 00       	call   c0028697 <__extendsfdf2>
c000aa2d:	83 c4 10             	add    esp,0x10
c000aa30:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa34:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa38:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa3c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa40:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa44:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa48:	e8 53 d2 01 00       	call   c0027ca0 <__muldf3>
c000aa4d:	83 c4 10             	add    esp,0x10
c000aa50:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa54:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa58:	52                   	push   edx
c000aa59:	50                   	push   eax
c000aa5a:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000aa5e:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000aa62:	e8 bc cb 01 00       	call   c0027623 <__adddf3>
c000aa67:	59                   	pop    ecx
c000aa68:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000aa6c:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000aa70:	ff b3 54 08 00 00    	push   DWORD PTR [ebx+0x854]
c000aa76:	e8 1c dc 01 00       	call   c0028697 <__extendsfdf2>
c000aa7b:	83 c4 10             	add    esp,0x10
c000aa7e:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa82:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa86:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa8a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa8e:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa92:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa96:	e8 05 d2 01 00       	call   c0027ca0 <__muldf3>
c000aa9b:	83 c4 10             	add    esp,0x10
c000aa9e:	83 eb 18             	sub    ebx,0x18
c000aaa1:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aaa5:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aaa9:	52                   	push   edx
c000aaaa:	50                   	push   eax
c000aaab:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000aaaf:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000aab3:	e8 6b cb 01 00       	call   c0027623 <__adddf3>
c000aab8:	59                   	pop    ecx
c000aab9:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000aabd:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c000aac1:	ff b3 70 08 00 00    	push   DWORD PTR [ebx+0x870]
c000aac7:	e8 cb db 01 00       	call   c0028697 <__extendsfdf2>
c000aacc:	83 c4 10             	add    esp,0x10
c000aacf:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aad3:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aad7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aadb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aadf:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aae3:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aae7:	e8 b4 d1 01 00       	call   c0027ca0 <__muldf3>
c000aaec:	83 c4 10             	add    esp,0x10
c000aaef:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000aaf3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000aaf7:	52                   	push   edx
c000aaf8:	50                   	push   eax
c000aaf9:	57                   	push   edi
c000aafa:	56                   	push   esi
c000aafb:	e8 23 cb 01 00       	call   c0027623 <__adddf3>
c000ab00:	83 c4 10             	add    esp,0x10
c000ab03:	89 c6                	mov    esi,eax
c000ab05:	2b 2c 24             	sub    ebp,DWORD PTR [esp]
c000ab08:	89 d7                	mov    edi,edx
c000ab0a:	85 ed                	test   ebp,ebp
c000ab0c:	0f 8f 8d fd ff ff    	jg     c000a89f <calc_output_hex+0x363>
c000ab12:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ab16:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ab1a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ab1e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ab22:	e8 fc ca 01 00       	call   c0027623 <__adddf3>
c000ab27:	83 c4 10             	add    esp,0x10
c000ab2a:	89 04 24             	mov    DWORD PTR [esp],eax
c000ab2d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ab31:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab35:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab39:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab3d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab41:	e8 5a d1 01 00       	call   c0027ca0 <__muldf3>
c000ab46:	59                   	pop    ecx
c000ab47:	5b                   	pop    ebx
c000ab48:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ab4c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ab50:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab54:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab58:	e8 16 da 01 00       	call   c0028573 <__truncdfsf2>
c000ab5d:	83 c4 10             	add    esp,0x10
c000ab60:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ab67:	89 03                	mov    DWORD PTR [ebx],eax
c000ab69:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000ab6d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000ab71:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ab75:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ab79:	e8 a5 ca 01 00       	call   c0027623 <__adddf3>
c000ab7e:	83 c4 10             	add    esp,0x10
c000ab81:	89 04 24             	mov    DWORD PTR [esp],eax
c000ab84:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ab88:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab8c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab90:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab94:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab98:	e8 03 d1 01 00       	call   c0027ca0 <__muldf3>
c000ab9d:	5d                   	pop    ebp
c000ab9e:	59                   	pop    ecx
c000ab9f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000aba3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000aba7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abab:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abaf:	e8 bf d9 01 00       	call   c0028573 <__truncdfsf2>
c000abb4:	83 c4 10             	add    esp,0x10
c000abb7:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000abbe:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000abc1:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000abc5:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000abc9:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000abcd:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000abd1:	e8 4d ca 01 00       	call   c0027623 <__adddf3>
c000abd6:	83 c4 10             	add    esp,0x10
c000abd9:	89 04 24             	mov    DWORD PTR [esp],eax
c000abdc:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000abe0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abe4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abe8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abec:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abf0:	e8 ab d0 01 00       	call   c0027ca0 <__muldf3>
c000abf5:	5b                   	pop    ebx
c000abf6:	5d                   	pop    ebp
c000abf7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000abfb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000abff:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac03:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac07:	e8 67 d9 01 00       	call   c0028573 <__truncdfsf2>
c000ac0c:	83 c4 10             	add    esp,0x10
c000ac0f:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ac16:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000ac19:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000ac1d:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000ac21:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ac25:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ac29:	e8 f5 c9 01 00       	call   c0027623 <__adddf3>
c000ac2e:	83 c4 10             	add    esp,0x10
c000ac31:	89 04 24             	mov    DWORD PTR [esp],eax
c000ac34:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ac38:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac3c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac40:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac44:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac48:	e8 53 d0 01 00       	call   c0027ca0 <__muldf3>
c000ac4d:	59                   	pop    ecx
c000ac4e:	5b                   	pop    ebx
c000ac4f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ac53:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ac57:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac5b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac5f:	e8 0f d9 01 00       	call   c0028573 <__truncdfsf2>
c000ac64:	83 c4 10             	add    esp,0x10
c000ac67:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ac6e:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000ac71:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ac75:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ac79:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ac7d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ac81:	e8 9d c9 01 00       	call   c0027623 <__adddf3>
c000ac86:	83 c4 10             	add    esp,0x10
c000ac89:	89 04 24             	mov    DWORD PTR [esp],eax
c000ac8c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ac90:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac94:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac98:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac9c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aca0:	e8 fb cf 01 00       	call   c0027ca0 <__muldf3>
c000aca5:	5d                   	pop    ebp
c000aca6:	59                   	pop    ecx
c000aca7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000acab:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000acaf:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acb3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acb7:	e8 b7 d8 01 00       	call   c0028573 <__truncdfsf2>
c000acbc:	83 c4 10             	add    esp,0x10
c000acbf:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000acc6:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000acc9:	57                   	push   edi
c000acca:	56                   	push   esi
c000accb:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000accf:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000acd3:	e8 4b c9 01 00       	call   c0027623 <__adddf3>
c000acd8:	83 c4 10             	add    esp,0x10
c000acdb:	89 04 24             	mov    DWORD PTR [esp],eax
c000acde:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ace2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ace6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acea:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acee:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acf2:	e8 a9 cf 01 00       	call   c0027ca0 <__muldf3>
c000acf7:	5b                   	pop    ebx
c000acf8:	5e                   	pop    esi
c000acf9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000acfd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ad01:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ad05:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ad09:	e8 65 d8 01 00       	call   c0028573 <__truncdfsf2>
c000ad0e:	8b bc 24 b8 00 00 00 	mov    edi,DWORD PTR [esp+0xb8]
c000ad15:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000ad18:	81 c4 9c 00 00 00    	add    esp,0x9c
c000ad1e:	5b                   	pop    ebx
c000ad1f:	5e                   	pop    esi
c000ad20:	5f                   	pop    edi
c000ad21:	5d                   	pop    ebp
c000ad22:	c3                   	ret    

c000ad23 <sinc_reset>:
c000ad23:	56                   	push   esi
c000ad24:	53                   	push   ebx
c000ad25:	51                   	push   ecx
c000ad26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ad2a:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000ad2d:	85 db                	test   ebx,ebx
c000ad2f:	74 59                	je     c000ad8a <sinc_reset+0x67>
c000ad31:	31 d2                	xor    edx,edx
c000ad33:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c000ad3a:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c000ad3d:	89 53 24             	mov    DWORD PTR [ebx+0x24],edx
c000ad40:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000ad47:	c7 43 3c ff ff ff ff 	mov    DWORD PTR [ebx+0x3c],0xffffffff
c000ad4e:	31 c0                	xor    eax,eax
c000ad50:	8d b3 44 08 00 00    	lea    esi,[ebx+0x844]
c000ad56:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c000ad59:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c000ad5c:	52                   	push   edx
c000ad5d:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ad60:	c1 e0 02             	shl    eax,0x2
c000ad63:	50                   	push   eax
c000ad64:	6a 00                	push   0x0
c000ad66:	56                   	push   esi
c000ad67:	e8 0c 5a ff ff       	call   c0000778 <memset>
c000ad6c:	83 c4 0c             	add    esp,0xc
c000ad6f:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000ad72:	c1 e0 02             	shl    eax,0x2
c000ad75:	50                   	push   eax
c000ad76:	68 aa 00 00 00       	push   0xaa
c000ad7b:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ad7e:	8d 04 86             	lea    eax,[esi+eax*4]
c000ad81:	50                   	push   eax
c000ad82:	e8 f1 59 ff ff       	call   c0000778 <memset>
c000ad87:	83 c4 10             	add    esp,0x10
c000ad8a:	58                   	pop    eax
c000ad8b:	5b                   	pop    ebx
c000ad8c:	5e                   	pop    esi
c000ad8d:	c3                   	ret    

c000ad8e <calc_output_multi>:
c000ad8e:	55                   	push   ebp
c000ad8f:	57                   	push   edi
c000ad90:	56                   	push   esi
c000ad91:	89 c6                	mov    esi,eax
c000ad93:	53                   	push   ebx
c000ad94:	83 ec 4c             	sub    esp,0x4c
c000ad97:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000ad9b:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000ad9f:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000ada3:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c000ada7:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c000adab:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000adaf:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000adb3:	8d 46 44             	lea    eax,[esi+0x44]
c000adb6:	89 04 24             	mov    DWORD PTR [esp],eax
c000adb9:	8d 86 44 04 00 00    	lea    eax,[esi+0x444]
c000adbf:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000adc3:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c000adc6:	e8 0f eb ff ff       	call   c00098da <int_to_fp>
c000adcb:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000adce:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000add2:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000add6:	99                   	cdq    
c000add7:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000addb:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000addf:	0f af d0             	imul   edx,eax
c000ade2:	0f af c3             	imul   eax,ebx
c000ade5:	03 54 24 28          	add    edx,DWORD PTR [esp+0x28]
c000ade9:	29 c1                	sub    ecx,eax
c000adeb:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000adef:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000adf3:	8d 04 dd 00 00 00 00 	lea    eax,[ebx*8+0x0]
c000adfa:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000adfe:	57                   	push   edi
c000adff:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ae03:	6a 00                	push   0x0
c000ae05:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ae09:	e8 6a 59 ff ff       	call   c0000778 <memset>
c000ae0e:	83 c4 10             	add    esp,0x10
c000ae11:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ae15:	89 df                	mov    edi,ebx
c000ae17:	e8 cc ea ff ff       	call   c00098e8 <fp_to_double>
c000ae1c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ae20:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ae24:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ae28:	e8 b1 ea ff ff       	call   c00098de <fp_to_int>
c000ae2d:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000ae30:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000ae33:	51                   	push   ecx
c000ae34:	51                   	push   ecx
c000ae35:	55                   	push   ebp
c000ae36:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000ae3a:	e8 79 c1 01 00       	call   c0026fb8 <__subsf3>
c000ae3f:	89 04 24             	mov    DWORD PTR [esp],eax
c000ae42:	e8 50 d8 01 00       	call   c0028697 <__extendsfdf2>
c000ae47:	83 c4 10             	add    esp,0x10
c000ae4a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae4e:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae52:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae56:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae5a:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae5e:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae62:	e8 39 ce 01 00       	call   c0027ca0 <__muldf3>
c000ae67:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000ae6a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ae6e:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ae72:	e8 20 d8 01 00       	call   c0028697 <__extendsfdf2>
c000ae77:	83 c4 10             	add    esp,0x10
c000ae7a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae7e:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae82:	52                   	push   edx
c000ae83:	50                   	push   eax
c000ae84:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ae88:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ae8c:	e8 92 c7 01 00       	call   c0027623 <__adddf3>
c000ae91:	83 c4 10             	add    esp,0x10
c000ae94:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ae98:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ae9c:	89 f8                	mov    eax,edi
c000ae9e:	b9 08 00 00 00       	mov    ecx,0x8
c000aea3:	99                   	cdq    
c000aea4:	f7 f9                	idiv   ecx
c000aea6:	4a                   	dec    edx
c000aea7:	83 fa 06             	cmp    edx,0x6
c000aeaa:	77 07                	ja     c000aeb3 <calc_output_multi+0x125>
c000aeac:	ff 24 95 a4 9e 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd615c]
c000aeb3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000aeb6:	4f                   	dec    edi
c000aeb7:	83 ec 0c             	sub    esp,0xc
c000aeba:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000aebd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000aec1:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000aec8:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000aecc:	e8 c6 d7 01 00       	call   c0028697 <__extendsfdf2>
c000aed1:	83 c4 10             	add    esp,0x10
c000aed4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aed8:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aedc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aee0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aee4:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aee8:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aeec:	e8 af cd 01 00       	call   c0027ca0 <__muldf3>
c000aef1:	83 c4 10             	add    esp,0x10
c000aef4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aef8:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aefc:	52                   	push   edx
c000aefd:	50                   	push   eax
c000aefe:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000af01:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000af04:	e8 1a c7 01 00       	call   c0027623 <__adddf3>
c000af09:	83 c4 10             	add    esp,0x10
c000af0c:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000af0f:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000af12:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000af15:	4f                   	dec    edi
c000af16:	83 ec 0c             	sub    esp,0xc
c000af19:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000af1c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000af20:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000af27:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000af2b:	e8 67 d7 01 00       	call   c0028697 <__extendsfdf2>
c000af30:	83 c4 10             	add    esp,0x10
c000af33:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af37:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af3b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af3f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af43:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af47:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af4b:	e8 50 cd 01 00       	call   c0027ca0 <__muldf3>
c000af50:	83 c4 10             	add    esp,0x10
c000af53:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af57:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af5b:	52                   	push   edx
c000af5c:	50                   	push   eax
c000af5d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000af60:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000af63:	e8 bb c6 01 00       	call   c0027623 <__adddf3>
c000af68:	83 c4 10             	add    esp,0x10
c000af6b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000af6e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000af71:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000af74:	4f                   	dec    edi
c000af75:	83 ec 0c             	sub    esp,0xc
c000af78:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000af7b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000af7f:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000af86:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000af8a:	e8 08 d7 01 00       	call   c0028697 <__extendsfdf2>
c000af8f:	83 c4 10             	add    esp,0x10
c000af92:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af96:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af9a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af9e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000afa2:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000afa6:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000afaa:	e8 f1 cc 01 00       	call   c0027ca0 <__muldf3>
c000afaf:	83 c4 10             	add    esp,0x10
c000afb2:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000afb6:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000afba:	52                   	push   edx
c000afbb:	50                   	push   eax
c000afbc:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000afbf:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000afc2:	e8 5c c6 01 00       	call   c0027623 <__adddf3>
c000afc7:	83 c4 10             	add    esp,0x10
c000afca:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000afcd:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000afd0:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000afd3:	4f                   	dec    edi
c000afd4:	83 ec 0c             	sub    esp,0xc
c000afd7:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000afda:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000afde:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000afe5:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000afe9:	e8 a9 d6 01 00       	call   c0028697 <__extendsfdf2>
c000afee:	83 c4 10             	add    esp,0x10
c000aff1:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aff5:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aff9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000affd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b001:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b005:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b009:	e8 92 cc 01 00       	call   c0027ca0 <__muldf3>
c000b00e:	83 c4 10             	add    esp,0x10
c000b011:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b015:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b019:	52                   	push   edx
c000b01a:	50                   	push   eax
c000b01b:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b01e:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b021:	e8 fd c5 01 00       	call   c0027623 <__adddf3>
c000b026:	83 c4 10             	add    esp,0x10
c000b029:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b02c:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b02f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b032:	4f                   	dec    edi
c000b033:	83 ec 0c             	sub    esp,0xc
c000b036:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b039:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b03d:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b044:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b048:	e8 4a d6 01 00       	call   c0028697 <__extendsfdf2>
c000b04d:	83 c4 10             	add    esp,0x10
c000b050:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b054:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b058:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b05c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b060:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b064:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b068:	e8 33 cc 01 00       	call   c0027ca0 <__muldf3>
c000b06d:	83 c4 10             	add    esp,0x10
c000b070:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b074:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b078:	52                   	push   edx
c000b079:	50                   	push   eax
c000b07a:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b07d:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b080:	e8 9e c5 01 00       	call   c0027623 <__adddf3>
c000b085:	83 c4 10             	add    esp,0x10
c000b088:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b08b:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b08e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b091:	4f                   	dec    edi
c000b092:	83 ec 0c             	sub    esp,0xc
c000b095:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b098:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b09c:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b0a3:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b0a7:	e8 eb d5 01 00       	call   c0028697 <__extendsfdf2>
c000b0ac:	83 c4 10             	add    esp,0x10
c000b0af:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b0b3:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b0b7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0bb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0bf:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b0c3:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b0c7:	e8 d4 cb 01 00       	call   c0027ca0 <__muldf3>
c000b0cc:	83 c4 10             	add    esp,0x10
c000b0cf:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b0d3:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b0d7:	52                   	push   edx
c000b0d8:	50                   	push   eax
c000b0d9:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b0dc:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b0df:	e8 3f c5 01 00       	call   c0027623 <__adddf3>
c000b0e4:	83 c4 10             	add    esp,0x10
c000b0e7:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b0ea:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b0ed:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b0f0:	4f                   	dec    edi
c000b0f1:	83 ec 0c             	sub    esp,0xc
c000b0f4:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b0f7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b0fb:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b102:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b106:	e8 8c d5 01 00       	call   c0028697 <__extendsfdf2>
c000b10b:	83 c4 10             	add    esp,0x10
c000b10e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b112:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b116:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b11a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b11e:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b122:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b126:	e8 75 cb 01 00       	call   c0027ca0 <__muldf3>
c000b12b:	83 c4 10             	add    esp,0x10
c000b12e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b132:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b136:	52                   	push   edx
c000b137:	50                   	push   eax
c000b138:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b13b:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b13e:	e8 e0 c4 01 00       	call   c0027623 <__adddf3>
c000b143:	83 c4 10             	add    esp,0x10
c000b146:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b149:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b14c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b14f:	4f                   	dec    edi
c000b150:	83 ec 0c             	sub    esp,0xc
c000b153:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b156:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b15a:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b161:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b165:	e8 2d d5 01 00       	call   c0028697 <__extendsfdf2>
c000b16a:	83 c4 10             	add    esp,0x10
c000b16d:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b171:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b175:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b179:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b17d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b181:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b185:	e8 16 cb 01 00       	call   c0027ca0 <__muldf3>
c000b18a:	83 c4 10             	add    esp,0x10
c000b18d:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b191:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b195:	52                   	push   edx
c000b196:	50                   	push   eax
c000b197:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b19a:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b19d:	e8 81 c4 01 00       	call   c0027623 <__adddf3>
c000b1a2:	83 c4 10             	add    esp,0x10
c000b1a5:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b1a8:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b1ab:	85 ff                	test   edi,edi
c000b1ad:	0f 8f e9 fc ff ff    	jg     c000ae9c <calc_output_multi+0x10e>
c000b1b3:	01 5c 24 08          	add    DWORD PTR [esp+0x8],ebx
c000b1b7:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b1bb:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000b1bf:	0f 89 4c fc ff ff    	jns    c000ae11 <calc_output_multi+0x83>
c000b1c5:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c000b1c9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000b1cd:	29 c8                	sub    eax,ecx
c000b1cf:	99                   	cdq    
c000b1d0:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000b1d4:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000b1d8:	0f af d0             	imul   edx,eax
c000b1db:	40                   	inc    eax
c000b1dc:	01 d1                	add    ecx,edx
c000b1de:	0f af c3             	imul   eax,ebx
c000b1e1:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000b1e5:	03 46 34             	add    eax,DWORD PTR [esi+0x34]
c000b1e8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b1ec:	55                   	push   ebp
c000b1ed:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b1f1:	6a 00                	push   0x0
c000b1f3:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b1f7:	e8 7c 55 ff ff       	call   c0000778 <memset>
c000b1fc:	83 c4 10             	add    esp,0x10
c000b1ff:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b203:	e8 e0 e6 ff ff       	call   c00098e8 <fp_to_double>
c000b208:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b20c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b210:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b214:	e8 c5 e6 ff ff       	call   c00098de <fp_to_int>
c000b219:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000b21c:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000b21f:	57                   	push   edi
c000b220:	57                   	push   edi
c000b221:	89 df                	mov    edi,ebx
c000b223:	55                   	push   ebp
c000b224:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000b228:	e8 8b bd 01 00       	call   c0026fb8 <__subsf3>
c000b22d:	89 04 24             	mov    DWORD PTR [esp],eax
c000b230:	e8 62 d4 01 00       	call   c0028697 <__extendsfdf2>
c000b235:	83 c4 10             	add    esp,0x10
c000b238:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b23c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b240:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b244:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b248:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b24c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b250:	e8 4b ca 01 00       	call   c0027ca0 <__muldf3>
c000b255:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000b258:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b25c:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b260:	e8 32 d4 01 00       	call   c0028697 <__extendsfdf2>
c000b265:	83 c4 10             	add    esp,0x10
c000b268:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b26c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b270:	52                   	push   edx
c000b271:	50                   	push   eax
c000b272:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b276:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b27a:	e8 a4 c3 01 00       	call   c0027623 <__adddf3>
c000b27f:	83 c4 10             	add    esp,0x10
c000b282:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b286:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b28a:	89 f8                	mov    eax,edi
c000b28c:	b9 08 00 00 00       	mov    ecx,0x8
c000b291:	99                   	cdq    
c000b292:	f7 f9                	idiv   ecx
c000b294:	4a                   	dec    edx
c000b295:	83 fa 06             	cmp    edx,0x6
c000b298:	77 07                	ja     c000b2a1 <calc_output_multi+0x513>
c000b29a:	ff 24 95 c0 9e 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd6140]
c000b2a1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b2a5:	4f                   	dec    edi
c000b2a6:	83 ec 0c             	sub    esp,0xc
c000b2a9:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b2ac:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b2b0:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b2b7:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b2bb:	e8 d7 d3 01 00       	call   c0028697 <__extendsfdf2>
c000b2c0:	83 c4 10             	add    esp,0x10
c000b2c3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b2c7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b2cb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2cf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2d3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b2d7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b2db:	e8 c0 c9 01 00       	call   c0027ca0 <__muldf3>
c000b2e0:	83 c4 10             	add    esp,0x10
c000b2e3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b2e7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b2eb:	52                   	push   edx
c000b2ec:	50                   	push   eax
c000b2ed:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b2f0:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b2f3:	e8 2b c3 01 00       	call   c0027623 <__adddf3>
c000b2f8:	83 c4 10             	add    esp,0x10
c000b2fb:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b2fe:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b301:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b305:	4f                   	dec    edi
c000b306:	83 ec 0c             	sub    esp,0xc
c000b309:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b30c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b310:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b317:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b31b:	e8 77 d3 01 00       	call   c0028697 <__extendsfdf2>
c000b320:	83 c4 10             	add    esp,0x10
c000b323:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b327:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b32b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b32f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b333:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b337:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b33b:	e8 60 c9 01 00       	call   c0027ca0 <__muldf3>
c000b340:	83 c4 10             	add    esp,0x10
c000b343:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b347:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b34b:	52                   	push   edx
c000b34c:	50                   	push   eax
c000b34d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b350:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b353:	e8 cb c2 01 00       	call   c0027623 <__adddf3>
c000b358:	83 c4 10             	add    esp,0x10
c000b35b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b35e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b361:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b365:	4f                   	dec    edi
c000b366:	83 ec 0c             	sub    esp,0xc
c000b369:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b36c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b370:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b377:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b37b:	e8 17 d3 01 00       	call   c0028697 <__extendsfdf2>
c000b380:	83 c4 10             	add    esp,0x10
c000b383:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b387:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b38b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b38f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b393:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b397:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b39b:	e8 00 c9 01 00       	call   c0027ca0 <__muldf3>
c000b3a0:	83 c4 10             	add    esp,0x10
c000b3a3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b3a7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b3ab:	52                   	push   edx
c000b3ac:	50                   	push   eax
c000b3ad:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b3b0:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b3b3:	e8 6b c2 01 00       	call   c0027623 <__adddf3>
c000b3b8:	83 c4 10             	add    esp,0x10
c000b3bb:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b3be:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b3c1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b3c5:	4f                   	dec    edi
c000b3c6:	83 ec 0c             	sub    esp,0xc
c000b3c9:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b3cc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b3d0:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b3d7:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b3db:	e8 b7 d2 01 00       	call   c0028697 <__extendsfdf2>
c000b3e0:	83 c4 10             	add    esp,0x10
c000b3e3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b3e7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b3eb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3ef:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3f3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b3f7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b3fb:	e8 a0 c8 01 00       	call   c0027ca0 <__muldf3>
c000b400:	83 c4 10             	add    esp,0x10
c000b403:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b407:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b40b:	52                   	push   edx
c000b40c:	50                   	push   eax
c000b40d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b410:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b413:	e8 0b c2 01 00       	call   c0027623 <__adddf3>
c000b418:	83 c4 10             	add    esp,0x10
c000b41b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b41e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b421:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b425:	4f                   	dec    edi
c000b426:	83 ec 0c             	sub    esp,0xc
c000b429:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b42c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b430:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b437:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b43b:	e8 57 d2 01 00       	call   c0028697 <__extendsfdf2>
c000b440:	83 c4 10             	add    esp,0x10
c000b443:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b447:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b44b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b44f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b453:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b457:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b45b:	e8 40 c8 01 00       	call   c0027ca0 <__muldf3>
c000b460:	83 c4 10             	add    esp,0x10
c000b463:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b467:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b46b:	52                   	push   edx
c000b46c:	50                   	push   eax
c000b46d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b470:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b473:	e8 ab c1 01 00       	call   c0027623 <__adddf3>
c000b478:	83 c4 10             	add    esp,0x10
c000b47b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b47e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b481:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b485:	4f                   	dec    edi
c000b486:	83 ec 0c             	sub    esp,0xc
c000b489:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b48c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b490:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b497:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b49b:	e8 f7 d1 01 00       	call   c0028697 <__extendsfdf2>
c000b4a0:	83 c4 10             	add    esp,0x10
c000b4a3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b4a7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b4ab:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4af:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4b3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b4b7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b4bb:	e8 e0 c7 01 00       	call   c0027ca0 <__muldf3>
c000b4c0:	83 c4 10             	add    esp,0x10
c000b4c3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b4c7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b4cb:	52                   	push   edx
c000b4cc:	50                   	push   eax
c000b4cd:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b4d0:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b4d3:	e8 4b c1 01 00       	call   c0027623 <__adddf3>
c000b4d8:	83 c4 10             	add    esp,0x10
c000b4db:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b4de:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b4e1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b4e5:	4f                   	dec    edi
c000b4e6:	83 ec 0c             	sub    esp,0xc
c000b4e9:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b4ec:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b4f0:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b4f7:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b4fb:	e8 97 d1 01 00       	call   c0028697 <__extendsfdf2>
c000b500:	83 c4 10             	add    esp,0x10
c000b503:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b507:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b50b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b50f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b513:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b517:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b51b:	e8 80 c7 01 00       	call   c0027ca0 <__muldf3>
c000b520:	83 c4 10             	add    esp,0x10
c000b523:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b527:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b52b:	52                   	push   edx
c000b52c:	50                   	push   eax
c000b52d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b530:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b533:	e8 eb c0 01 00       	call   c0027623 <__adddf3>
c000b538:	83 c4 10             	add    esp,0x10
c000b53b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b53e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b541:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b545:	4f                   	dec    edi
c000b546:	83 ec 0c             	sub    esp,0xc
c000b549:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b54c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b550:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b557:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b55b:	e8 37 d1 01 00       	call   c0028697 <__extendsfdf2>
c000b560:	83 c4 10             	add    esp,0x10
c000b563:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b567:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b56b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b56f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b573:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b577:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b57b:	e8 20 c7 01 00       	call   c0027ca0 <__muldf3>
c000b580:	83 c4 10             	add    esp,0x10
c000b583:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b587:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b58b:	52                   	push   edx
c000b58c:	50                   	push   eax
c000b58d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b590:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b593:	e8 8b c0 01 00       	call   c0027623 <__adddf3>
c000b598:	83 c4 10             	add    esp,0x10
c000b59b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b59e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b5a1:	85 ff                	test   edi,edi
c000b5a3:	0f 8f e1 fc ff ff    	jg     c000b28a <calc_output_multi+0x4fc>
c000b5a9:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b5ad:	29 5c 24 08          	sub    DWORD PTR [esp+0x8],ebx
c000b5b1:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000b5b5:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000b5ba:	0f 8f 3f fc ff ff    	jg     c000b1ff <calc_output_multi+0x471>
c000b5c0:	be 08 00 00 00       	mov    esi,0x8
c000b5c5:	89 d8                	mov    eax,ebx
c000b5c7:	99                   	cdq    
c000b5c8:	f7 fe                	idiv   esi
c000b5ca:	4a                   	dec    edx
c000b5cb:	83 fa 06             	cmp    edx,0x6
c000b5ce:	77 07                	ja     c000b5d7 <calc_output_multi+0x849>
c000b5d0:	ff 24 95 dc 9e 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd6124]
c000b5d7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b5db:	4b                   	dec    ebx
c000b5dc:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b5e0:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b5e3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b5e7:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b5eb:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b5ee:	e8 30 c0 01 00       	call   c0027623 <__adddf3>
c000b5f3:	83 c4 10             	add    esp,0x10
c000b5f6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b5fa:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b5fe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b602:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b606:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b60a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b60e:	e8 8d c6 01 00       	call   c0027ca0 <__muldf3>
c000b613:	5d                   	pop    ebp
c000b614:	59                   	pop    ecx
c000b615:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b619:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b61d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b621:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b625:	e8 49 cf 01 00       	call   c0028573 <__truncdfsf2>
c000b62a:	83 c4 10             	add    esp,0x10
c000b62d:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b631:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b634:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b638:	4b                   	dec    ebx
c000b639:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b63d:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b640:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b644:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b648:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b64b:	e8 d3 bf 01 00       	call   c0027623 <__adddf3>
c000b650:	83 c4 10             	add    esp,0x10
c000b653:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b657:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b65b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b65f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b663:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b667:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b66b:	e8 30 c6 01 00       	call   c0027ca0 <__muldf3>
c000b670:	59                   	pop    ecx
c000b671:	5f                   	pop    edi
c000b672:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b676:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b67a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b67e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b682:	e8 ec ce 01 00       	call   c0028573 <__truncdfsf2>
c000b687:	83 c4 10             	add    esp,0x10
c000b68a:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b68e:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b691:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b695:	4b                   	dec    ebx
c000b696:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b69a:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b69d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b6a1:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b6a5:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b6a8:	e8 76 bf 01 00       	call   c0027623 <__adddf3>
c000b6ad:	83 c4 10             	add    esp,0x10
c000b6b0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b6b4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b6b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b6bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b6c0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6c4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6c8:	e8 d3 c5 01 00       	call   c0027ca0 <__muldf3>
c000b6cd:	5f                   	pop    edi
c000b6ce:	5d                   	pop    ebp
c000b6cf:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b6d3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b6d7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6db:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6df:	e8 8f ce 01 00       	call   c0028573 <__truncdfsf2>
c000b6e4:	83 c4 10             	add    esp,0x10
c000b6e7:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b6eb:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b6ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b6f2:	4b                   	dec    ebx
c000b6f3:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b6f7:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b6fa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b6fe:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b702:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b705:	e8 19 bf 01 00       	call   c0027623 <__adddf3>
c000b70a:	83 c4 10             	add    esp,0x10
c000b70d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b711:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b715:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b719:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b71d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b721:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b725:	e8 76 c5 01 00       	call   c0027ca0 <__muldf3>
c000b72a:	5d                   	pop    ebp
c000b72b:	59                   	pop    ecx
c000b72c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b730:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b734:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b738:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b73c:	e8 32 ce 01 00       	call   c0028573 <__truncdfsf2>
c000b741:	83 c4 10             	add    esp,0x10
c000b744:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b748:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b74b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b74f:	4b                   	dec    ebx
c000b750:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b754:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b757:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b75b:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b75f:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b762:	e8 bc be 01 00       	call   c0027623 <__adddf3>
c000b767:	83 c4 10             	add    esp,0x10
c000b76a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b76e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b772:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b776:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b77a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b77e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b782:	e8 19 c5 01 00       	call   c0027ca0 <__muldf3>
c000b787:	59                   	pop    ecx
c000b788:	5f                   	pop    edi
c000b789:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b78d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b791:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b795:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b799:	e8 d5 cd 01 00       	call   c0028573 <__truncdfsf2>
c000b79e:	83 c4 10             	add    esp,0x10
c000b7a1:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b7a5:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b7a8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b7ac:	4b                   	dec    ebx
c000b7ad:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b7b1:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b7b4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b7b8:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b7bc:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b7bf:	e8 5f be 01 00       	call   c0027623 <__adddf3>
c000b7c4:	83 c4 10             	add    esp,0x10
c000b7c7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b7cb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b7cf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b7d3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b7d7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7db:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7df:	e8 bc c4 01 00       	call   c0027ca0 <__muldf3>
c000b7e4:	5f                   	pop    edi
c000b7e5:	5d                   	pop    ebp
c000b7e6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b7ea:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b7ee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7f2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7f6:	e8 78 cd 01 00       	call   c0028573 <__truncdfsf2>
c000b7fb:	83 c4 10             	add    esp,0x10
c000b7fe:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b802:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b805:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b809:	4b                   	dec    ebx
c000b80a:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b80e:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b811:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b815:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b819:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b81c:	e8 02 be 01 00       	call   c0027623 <__adddf3>
c000b821:	83 c4 10             	add    esp,0x10
c000b824:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b828:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b82c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b830:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b834:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b838:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b83c:	e8 5f c4 01 00       	call   c0027ca0 <__muldf3>
c000b841:	5d                   	pop    ebp
c000b842:	59                   	pop    ecx
c000b843:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b847:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b84b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b84f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b853:	e8 1b cd 01 00       	call   c0028573 <__truncdfsf2>
c000b858:	83 c4 10             	add    esp,0x10
c000b85b:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b85f:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b862:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b866:	4b                   	dec    ebx
c000b867:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b86b:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b86e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b872:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b876:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b879:	e8 a5 bd 01 00       	call   c0027623 <__adddf3>
c000b87e:	83 c4 10             	add    esp,0x10
c000b881:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b885:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b889:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b88d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b891:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b895:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b899:	e8 02 c4 01 00       	call   c0027ca0 <__muldf3>
c000b89e:	59                   	pop    ecx
c000b89f:	5f                   	pop    edi
c000b8a0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b8a4:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b8a8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b8ac:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b8b0:	e8 be cc 01 00       	call   c0028573 <__truncdfsf2>
c000b8b5:	83 c4 10             	add    esp,0x10
c000b8b8:	85 db                	test   ebx,ebx
c000b8ba:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c000b8be:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c000b8c1:	0f 8f fe fc ff ff    	jg     c000b5c5 <calc_output_multi+0x837>
c000b8c7:	83 c4 4c             	add    esp,0x4c
c000b8ca:	5b                   	pop    ebx
c000b8cb:	5e                   	pop    esi
c000b8cc:	5f                   	pop    edi
c000b8cd:	5d                   	pop    ebp
c000b8ce:	c3                   	ret    

c000b8cf <double_to_fp>:
c000b8cf:	83 ec 0c             	sub    esp,0xc
c000b8d2:	68 00 00 b0 40       	push   0x40b00000
c000b8d7:	6a 00                	push   0x0
c000b8d9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8dd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8e1:	e8 ba c3 01 00       	call   c0027ca0 <__muldf3>
c000b8e6:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b8ea:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b8ee:	83 c4 1c             	add    esp,0x1c
c000b8f1:	e9 2a ce 01 00       	jmp    c0028720 <lrint>

c000b8f6 <prepare_data>:
c000b8f6:	55                   	push   ebp
c000b8f7:	57                   	push   edi
c000b8f8:	56                   	push   esi
c000b8f9:	53                   	push   ebx
c000b8fa:	83 ec 1c             	sub    esp,0x1c
c000b8fd:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000b901:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000b905:	83 7b 3c 00          	cmp    DWORD PTR [ebx+0x3c],0x0
c000b909:	0f 89 57 01 00 00    	jns    c000ba66 <prepare_data+0x170>
c000b90f:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000b912:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b915:	85 d2                	test   edx,edx
c000b917:	75 0d                	jne    c000b926 <prepare_data+0x30>
c000b919:	8d 14 36             	lea    edx,[esi+esi*1]
c000b91c:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000b91f:	29 d0                	sub    eax,edx
c000b921:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b924:	eb 44                	jmp    c000b96a <prepare_data+0x74>
c000b926:	8b 7b 38             	mov    edi,DWORD PTR [ebx+0x38]
c000b929:	8d 0c 37             	lea    ecx,[edi+esi*1]
c000b92c:	03 4b 04             	add    ecx,DWORD PTR [ebx+0x4]
c000b92f:	39 c1                	cmp    ecx,eax
c000b931:	7d 04                	jge    c000b937 <prepare_data+0x41>
c000b933:	29 d0                	sub    eax,edx
c000b935:	eb 2d                	jmp    c000b964 <prepare_data+0x6e>
c000b937:	8d 83 44 08 00 00    	lea    eax,[ebx+0x844]
c000b93d:	29 d7                	sub    edi,edx
c000b93f:	01 f7                	add    edi,esi
c000b941:	51                   	push   ecx
c000b942:	29 f2                	sub    edx,esi
c000b944:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c000b94b:	8d 14 90             	lea    edx,[eax+edx*4]
c000b94e:	51                   	push   ecx
c000b94f:	52                   	push   edx
c000b950:	50                   	push   eax
c000b951:	e8 26 4d ff ff       	call   c000067c <memmove>
c000b956:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b959:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b95c:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000b95f:	29 f0                	sub    eax,esi
c000b961:	83 c4 10             	add    esp,0x10
c000b964:	29 f0                	sub    eax,esi
c000b966:	79 02                	jns    c000b96a <prepare_data+0x74>
c000b968:	31 c0                	xor    eax,eax
c000b96a:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000b96d:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c000b970:	29 ef                	sub    edi,ebp
c000b972:	39 c7                	cmp    edi,eax
c000b974:	7e 02                	jle    c000b978 <prepare_data+0x82>
c000b976:	89 c7                	mov    edi,eax
c000b978:	89 f8                	mov    eax,edi
c000b97a:	99                   	cdq    
c000b97b:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000b97e:	b8 15 00 00 00       	mov    eax,0x15
c000b983:	29 d7                	sub    edi,edx
c000b985:	0f 88 dd 00 00 00    	js     c000ba68 <prepare_data+0x172>
c000b98b:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c000b98e:	8d 14 39             	lea    edx,[ecx+edi*1]
c000b991:	3b 53 40             	cmp    edx,DWORD PTR [ebx+0x40]
c000b994:	0f 8f ce 00 00 00    	jg     c000ba68 <prepare_data+0x172>
c000b99a:	8d 93 44 08 00 00    	lea    edx,[ebx+0x844]
c000b9a0:	50                   	push   eax
c000b9a1:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000b9a8:	50                   	push   eax
c000b9a9:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000b9ad:	8b 00                	mov    eax,DWORD PTR [eax]
c000b9af:	8d 04 a8             	lea    eax,[eax+ebp*4]
c000b9b2:	50                   	push   eax
c000b9b3:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000b9b6:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b9ba:	50                   	push   eax
c000b9bb:	e8 84 4d ff ff       	call   c0000744 <memcpy>
c000b9c0:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c000b9c3:	8b 4b 0c             	mov    ecx,DWORD PTR [ebx+0xc]
c000b9c6:	01 fd                	add    ebp,edi
c000b9c8:	01 f9                	add    ecx,edi
c000b9ca:	83 c4 10             	add    esp,0x10
c000b9cd:	89 6b 38             	mov    DWORD PTR [ebx+0x38],ebp
c000b9d0:	89 4b 0c             	mov    DWORD PTR [ebx+0xc],ecx
c000b9d3:	3b 4b 08             	cmp    ecx,DWORD PTR [ebx+0x8]
c000b9d6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b9da:	0f 85 86 00 00 00    	jne    c000ba66 <prepare_data+0x170>
c000b9e0:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000b9e3:	89 e8                	mov    eax,ebp
c000b9e5:	8d 3c 36             	lea    edi,[esi+esi*1]
c000b9e8:	29 c8                	sub    eax,ecx
c000b9ea:	39 f8                	cmp    eax,edi
c000b9ec:	7d 78                	jge    c000ba66 <prepare_data+0x170>
c000b9ee:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000b9f2:	83 7f 18 00          	cmp    DWORD PTR [edi+0x18],0x0
c000b9f6:	74 6e                	je     c000ba66 <prepare_data+0x170>
c000b9f8:	8d 7e 04             	lea    edi,[esi+0x4]
c000b9fb:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000b9ff:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c000ba02:	29 ef                	sub    edi,ebp
c000ba04:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c000ba08:	7c 29                	jl     c000ba33 <prepare_data+0x13d>
c000ba0a:	8d 3c 30             	lea    edi,[eax+esi*1]
c000ba0d:	29 f1                	sub    ecx,esi
c000ba0f:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000ba16:	55                   	push   ebp
c000ba17:	50                   	push   eax
c000ba18:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000ba1b:	50                   	push   eax
c000ba1c:	52                   	push   edx
c000ba1d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ba21:	e8 56 4c ff ff       	call   c000067c <memmove>
c000ba26:	83 c4 10             	add    esp,0x10
c000ba29:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000ba2c:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000ba2f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ba33:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000ba36:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000ba39:	89 43 3c             	mov    DWORD PTR [ebx+0x3c],eax
c000ba3c:	83 c6 05             	add    esi,0x5
c000ba3f:	78 07                	js     c000ba48 <prepare_data+0x152>
c000ba41:	8d 3c 30             	lea    edi,[eax+esi*1]
c000ba44:	39 cf                	cmp    edi,ecx
c000ba46:	7e 04                	jle    c000ba4c <prepare_data+0x156>
c000ba48:	89 ce                	mov    esi,ecx
c000ba4a:	29 c6                	sub    esi,eax
c000ba4c:	8d 04 82             	lea    eax,[edx+eax*4]
c000ba4f:	51                   	push   ecx
c000ba50:	8d 0c b5 00 00 00 00 	lea    ecx,[esi*4+0x0]
c000ba57:	51                   	push   ecx
c000ba58:	6a 00                	push   0x0
c000ba5a:	50                   	push   eax
c000ba5b:	e8 18 4d ff ff       	call   c0000778 <memset>
c000ba60:	01 73 38             	add    DWORD PTR [ebx+0x38],esi
c000ba63:	83 c4 10             	add    esp,0x10
c000ba66:	31 c0                	xor    eax,eax
c000ba68:	83 c4 1c             	add    esp,0x1c
c000ba6b:	5b                   	pop    ebx
c000ba6c:	5e                   	pop    esi
c000ba6d:	5f                   	pop    edi
c000ba6e:	5d                   	pop    ebp
c000ba6f:	c3                   	ret    

c000ba70 <sinc_multichan_vari_process>:
c000ba70:	55                   	push   ebp
c000ba71:	ba 05 00 00 00       	mov    edx,0x5
c000ba76:	57                   	push   edi
c000ba77:	56                   	push   esi
c000ba78:	53                   	push   ebx
c000ba79:	83 ec 4c             	sub    esp,0x4c
c000ba7c:	8b 74 24 60          	mov    esi,DWORD PTR [esp+0x60]
c000ba80:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c000ba84:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c000ba87:	85 db                	test   ebx,ebx
c000ba89:	0f 84 9b 06 00 00    	je     c000c12a <sinc_multichan_vari_process+0x6ba>
c000ba8f:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000ba92:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000ba95:	0f af c5             	imul   eax,ebp
c000ba98:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000ba9b:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000ba9e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000baa5:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000baac:	0f af c5             	imul   eax,ebp
c000baaf:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000bab2:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000bab5:	8b 06                	mov    eax,DWORD PTR [esi]
c000bab7:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000babb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000babf:	68 00 00 70 3f       	push   0x3f700000
c000bac4:	6a 00                	push   0x0
c000bac6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000baca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bace:	e8 9c ca 01 00       	call   c002856f <__ltdf2>
c000bad3:	83 c4 10             	add    esp,0x10
c000bad6:	ba 16 00 00 00       	mov    edx,0x16
c000badb:	85 c0                	test   eax,eax
c000badd:	0f 88 47 06 00 00    	js     c000c12a <sinc_multichan_vari_process+0x6ba>
c000bae3:	68 00 00 70 40       	push   0x40700000
c000bae8:	6a 00                	push   0x0
c000baea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000baee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000baf2:	e8 5a ca 01 00       	call   c0028551 <__gtdf2>
c000baf7:	83 c4 10             	add    esp,0x10
c000bafa:	ba 16 00 00 00       	mov    edx,0x16
c000baff:	85 c0                	test   eax,eax
c000bb01:	0f 8f 23 06 00 00    	jg     c000c12a <sinc_multichan_vari_process+0x6ba>
c000bb07:	83 ec 0c             	sub    esp,0xc
c000bb0a:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000bb0d:	e8 f1 c7 01 00       	call   c0028303 <__floatsidf>
c000bb12:	83 c4 10             	add    esp,0x10
c000bb15:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bb19:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bb1d:	68 00 00 00 40       	push   0x40000000
c000bb22:	6a 00                	push   0x0
c000bb24:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb28:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb2c:	e8 f2 ba 01 00       	call   c0027623 <__adddf3>
c000bb31:	59                   	pop    ecx
c000bb32:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000bb36:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000bb3a:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bb3d:	e8 c1 c7 01 00       	call   c0028303 <__floatsidf>
c000bb42:	83 c4 10             	add    esp,0x10
c000bb45:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bb49:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bb4d:	52                   	push   edx
c000bb4e:	50                   	push   eax
c000bb4f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb53:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb57:	e8 28 c4 01 00       	call   c0027f84 <__divdf3>
c000bb5c:	83 c4 10             	add    esp,0x10
c000bb5f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bb63:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bb67:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c000bb6a:	8b 57 20             	mov    edx,DWORD PTR [edi+0x20]
c000bb6d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bb71:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bb75:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb79:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb7d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb81:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb85:	e8 c7 c9 01 00       	call   c0028551 <__gtdf2>
c000bb8a:	83 c4 10             	add    esp,0x10
c000bb8d:	85 c0                	test   eax,eax
c000bb8f:	7e 2d                	jle    c000bbbe <sinc_multichan_vari_process+0x14e>
c000bb91:	68 00 00 f0 3f       	push   0x3ff00000
c000bb96:	6a 00                	push   0x0
c000bb98:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bb9c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bba0:	e8 ca c9 01 00       	call   c002856f <__ltdf2>
c000bba5:	83 c4 10             	add    esp,0x10
c000bba8:	85 c0                	test   eax,eax
c000bbaa:	79 4d                	jns    c000bbf9 <sinc_multichan_vari_process+0x189>
c000bbac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bbb0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000bbb4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bbb8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bbbc:	eb 1b                	jmp    c000bbd9 <sinc_multichan_vari_process+0x169>
c000bbbe:	68 00 00 f0 3f       	push   0x3ff00000
c000bbc3:	6a 00                	push   0x0
c000bbc5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bbc9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bbcd:	e8 9d c9 01 00       	call   c002856f <__ltdf2>
c000bbd2:	83 c4 10             	add    esp,0x10
c000bbd5:	85 c0                	test   eax,eax
c000bbd7:	79 20                	jns    c000bbf9 <sinc_multichan_vari_process+0x189>
c000bbd9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bbdd:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bbe1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbe5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbe9:	e8 96 c3 01 00       	call   c0027f84 <__divdf3>
c000bbee:	83 c4 10             	add    esp,0x10
c000bbf1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bbf5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bbf9:	50                   	push   eax
c000bbfa:	50                   	push   eax
c000bbfb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbff:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bc03:	e8 18 cb 01 00       	call   c0028720 <lrint>
c000bc08:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c000bc0b:	40                   	inc    eax
c000bc0c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bc10:	0f af c5             	imul   eax,ebp
c000bc13:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000bc17:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000bc1a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bc1e:	58                   	pop    eax
c000bc1f:	5a                   	pop    edx
c000bc20:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bc24:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bc28:	e8 f3 ca 01 00       	call   c0028720 <lrint>
c000bc2d:	83 ec 0c             	sub    esp,0xc
c000bc30:	50                   	push   eax
c000bc31:	e8 cd c6 01 00       	call   c0028303 <__floatsidf>
c000bc36:	83 c4 10             	add    esp,0x10
c000bc39:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bc3d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bc41:	52                   	push   edx
c000bc42:	50                   	push   eax
c000bc43:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc47:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc4b:	e8 24 c0 01 00       	call   c0027c74 <__subdf3>
c000bc50:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bc54:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bc58:	83 c4 20             	add    esp,0x20
c000bc5b:	6a 00                	push   0x0
c000bc5d:	6a 00                	push   0x0
c000bc5f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc63:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc67:	e8 03 c9 01 00       	call   c002856f <__ltdf2>
c000bc6c:	83 c4 10             	add    esp,0x10
c000bc6f:	85 c0                	test   eax,eax
c000bc71:	79 1f                	jns    c000bc92 <sinc_multichan_vari_process+0x222>
c000bc73:	68 00 00 f0 3f       	push   0x3ff00000
c000bc78:	6a 00                	push   0x0
c000bc7a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc7e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc82:	e8 9c b9 01 00       	call   c0027623 <__adddf3>
c000bc87:	83 c4 10             	add    esp,0x10
c000bc8a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bc8e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bc92:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000bc95:	83 ec 10             	sub    esp,0x10
c000bc98:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bc9c:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000bc9f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bca3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bca7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bcab:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bcaf:	e8 c0 bf 01 00       	call   c0027c74 <__subdf3>
c000bcb4:	83 c4 18             	add    esp,0x18
c000bcb7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bcbb:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bcbf:	52                   	push   edx
c000bcc0:	50                   	push   eax
c000bcc1:	e8 5a ca 01 00       	call   c0028720 <lrint>
c000bcc6:	0f af e8             	imul   ebp,eax
c000bcc9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000bccd:	01 e8                	add    eax,ebp
c000bccf:	99                   	cdq    
c000bcd0:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000bcd3:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000bcd6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bcda:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bcde:	68 00 00 f0 3f       	push   0x3ff00000
c000bce3:	6a 00                	push   0x0
c000bce5:	e8 9a c2 01 00       	call   c0027f84 <__divdf3>
c000bcea:	83 c4 10             	add    esp,0x10
c000bced:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bcf1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bcf5:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000bcfa:	68 23 42 92 0c       	push   0xc924223
c000bcff:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bd03:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bd07:	e8 17 b9 01 00       	call   c0027623 <__adddf3>
c000bd0c:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000bd10:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000bd14:	83 c4 20             	add    esp,0x20
c000bd17:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000bd1f:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000bd27:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000bd2a:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000bd2d:	7d 50                	jge    c000bd7f <sinc_multichan_vari_process+0x30f>
c000bd2f:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bd32:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bd35:	01 c8                	add    eax,ecx
c000bd37:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000bd3a:	99                   	cdq    
c000bd3b:	f7 f9                	idiv   ecx
c000bd3d:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000bd41:	7d 0c                	jge    c000bd4f <sinc_multichan_vari_process+0x2df>
c000bd43:	8b 6b 3c             	mov    ebp,DWORD PTR [ebx+0x3c]
c000bd46:	85 ed                	test   ebp,ebp
c000bd48:	79 6b                	jns    c000bdb5 <sinc_multichan_vari_process+0x345>
c000bd4a:	e9 e6 00 00 00       	jmp    c000be35 <sinc_multichan_vari_process+0x3c5>
c000bd4f:	50                   	push   eax
c000bd50:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000bd54:	57                   	push   edi
c000bd55:	53                   	push   ebx
c000bd56:	e8 9b fb ff ff       	call   c000b8f6 <prepare_data>
c000bd5b:	83 c4 10             	add    esp,0x10
c000bd5e:	89 c2                	mov    edx,eax
c000bd60:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000bd63:	85 c0                	test   eax,eax
c000bd65:	0f 85 bf 03 00 00    	jne    c000c12a <sinc_multichan_vari_process+0x6ba>
c000bd6b:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bd6e:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bd71:	01 c8                	add    eax,ecx
c000bd73:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000bd76:	99                   	cdq    
c000bd77:	f7 f9                	idiv   ecx
c000bd79:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000bd7d:	7c c4                	jl     c000bd43 <sinc_multichan_vari_process+0x2d3>
c000bd7f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000bd83:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000bd87:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000bd8a:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c000bd8d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd91:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000bd95:	89 06                	mov    DWORD PTR [esi],eax
c000bd97:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c000bd9a:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000bd9d:	99                   	cdq    
c000bd9e:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bda1:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000bda4:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000bda7:	99                   	cdq    
c000bda8:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bdab:	31 d2                	xor    edx,edx
c000bdad:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000bdb0:	e9 75 03 00 00       	jmp    c000c12a <sinc_multichan_vari_process+0x6ba>
c000bdb5:	83 ec 0c             	sub    esp,0xc
c000bdb8:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000bdbb:	e8 43 c5 01 00       	call   c0028303 <__floatsidf>
c000bdc0:	83 c4 10             	add    esp,0x10
c000bdc3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bdc7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bdcb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bdcf:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bdd3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdd7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bddb:	e8 43 b8 01 00       	call   c0027623 <__adddf3>
c000bde0:	83 c4 10             	add    esp,0x10
c000bde3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bde7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bdeb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bdef:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bdf3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdf7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdfb:	e8 23 b8 01 00       	call   c0027623 <__adddf3>
c000be00:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000be03:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000be07:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000be0b:	e8 f3 c4 01 00       	call   c0028303 <__floatsidf>
c000be10:	83 c4 10             	add    esp,0x10
c000be13:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000be17:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000be1b:	52                   	push   edx
c000be1c:	50                   	push   eax
c000be1d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be21:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be25:	e8 43 c7 01 00       	call   c002856d <__gedf2>
c000be2a:	83 c4 10             	add    esp,0x10
c000be2d:	85 c0                	test   eax,eax
c000be2f:	0f 89 4a ff ff ff    	jns    c000bd7f <sinc_multichan_vari_process+0x30f>
c000be35:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000be39:	0f 8e ed 00 00 00    	jle    c000bf2c <sinc_multichan_vari_process+0x4bc>
c000be3f:	83 ec 10             	sub    esp,0x10
c000be42:	ff 77 20             	push   DWORD PTR [edi+0x20]
c000be45:	ff 77 1c             	push   DWORD PTR [edi+0x1c]
c000be48:	ff 76 04             	push   DWORD PTR [esi+0x4]
c000be4b:	ff 36                	push   DWORD PTR [esi]
c000be4d:	e8 22 be 01 00       	call   c0027c74 <__subdf3>
c000be52:	83 c4 18             	add    esp,0x18
c000be55:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000be59:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000be5d:	52                   	push   edx
c000be5e:	50                   	push   eax
c000be5f:	e8 9c c8 01 00       	call   c0028700 <fabs>
c000be64:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000be68:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000be6c:	83 c4 10             	add    esp,0x10
c000be6f:	68 df 7c db 3d       	push   0x3ddb7cdf
c000be74:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000be79:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be7d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be81:	e8 cb c6 01 00       	call   c0028551 <__gtdf2>
c000be86:	83 c4 10             	add    esp,0x10
c000be89:	85 c0                	test   eax,eax
c000be8b:	0f 8e 9b 00 00 00    	jle    c000bf2c <sinc_multichan_vari_process+0x4bc>
c000be91:	8b 06                	mov    eax,DWORD PTR [esi]
c000be93:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000be96:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000be9a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000be9e:	52                   	push   edx
c000be9f:	50                   	push   eax
c000bea0:	ff 77 20             	push   DWORD PTR [edi+0x20]
c000bea3:	ff 77 1c             	push   DWORD PTR [edi+0x1c]
c000bea6:	e8 c9 bd 01 00       	call   c0027c74 <__subdf3>
c000beab:	59                   	pop    ecx
c000beac:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000beb0:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000beb4:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000beb7:	e8 47 c4 01 00       	call   c0028303 <__floatsidf>
c000bebc:	83 c4 10             	add    esp,0x10
c000bebf:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bec3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bec7:	52                   	push   edx
c000bec8:	50                   	push   eax
c000bec9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000becd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bed1:	e8 ca bd 01 00       	call   c0027ca0 <__muldf3>
c000bed6:	5d                   	pop    ebp
c000bed7:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000bedb:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000bedf:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000bee2:	e8 1c c4 01 00       	call   c0028303 <__floatsidf>
c000bee7:	83 c4 10             	add    esp,0x10
c000beea:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000beee:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bef2:	52                   	push   edx
c000bef3:	50                   	push   eax
c000bef4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bef8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000befc:	e8 83 c0 01 00       	call   c0027f84 <__divdf3>
c000bf01:	83 c4 10             	add    esp,0x10
c000bf04:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bf08:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bf0c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bf10:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bf14:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bf18:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bf1c:	e8 02 b7 01 00       	call   c0027623 <__adddf3>
c000bf21:	83 c4 10             	add    esp,0x10
c000bf24:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bf28:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000bf2c:	83 ec 0c             	sub    esp,0xc
c000bf2f:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bf32:	e8 cc c3 01 00       	call   c0028303 <__floatsidf>
c000bf37:	83 c4 10             	add    esp,0x10
c000bf3a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bf3e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bf42:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf46:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf4a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf4e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf52:	e8 18 c6 01 00       	call   c002856f <__ltdf2>
c000bf57:	83 c4 10             	add    esp,0x10
c000bf5a:	85 c0                	test   eax,eax
c000bf5c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bf60:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000bf64:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000bf68:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000bf6c:	78 10                	js     c000bf7e <sinc_multichan_vari_process+0x50e>
c000bf6e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000bf72:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000bf76:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bf7a:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bf7e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bf82:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bf86:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf8a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf8e:	e8 0d bd 01 00       	call   c0027ca0 <__muldf3>
c000bf93:	59                   	pop    ecx
c000bf94:	5d                   	pop    ebp
c000bf95:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bf99:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bf9d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bfa1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bfa5:	e8 25 f9 ff ff       	call   c000b8cf <double_to_fp>
c000bfaa:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bfae:	89 c5                	mov    ebp,eax
c000bfb0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bfb4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bfb8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bfbc:	e8 df bc 01 00       	call   c0027ca0 <__muldf3>
c000bfc1:	83 c4 18             	add    esp,0x18
c000bfc4:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000bfc8:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bfcc:	52                   	push   edx
c000bfcd:	50                   	push   eax
c000bfce:	e8 fc f8 ff ff       	call   c000b8cf <double_to_fp>
c000bfd3:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000bfd6:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000bfda:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000bfdd:	8d 04 90             	lea    eax,[eax+edx*4]
c000bfe0:	50                   	push   eax
c000bfe1:	50                   	push   eax
c000bfe2:	50                   	push   eax
c000bfe3:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bfe6:	e8 18 c3 01 00       	call   c0028303 <__floatsidf>
c000bfeb:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000bfef:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000bff3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bff7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bffb:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bfff:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c003:	e8 7c bf 01 00       	call   c0027f84 <__divdf3>
c000c008:	83 c4 1c             	add    esp,0x1c
c000c00b:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000c00f:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000c013:	52                   	push   edx
c000c014:	89 ea                	mov    edx,ebp
c000c016:	50                   	push   eax
c000c017:	89 d8                	mov    eax,ebx
c000c019:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c01c:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c000c020:	e8 69 ed ff ff       	call   c000ad8e <calc_output_multi>
c000c025:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000c028:	01 43 14             	add    DWORD PTR [ebx+0x14],eax
c000c02b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c02f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c033:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000c037:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000c03b:	e8 44 bf 01 00       	call   c0027f84 <__divdf3>
c000c040:	83 c4 10             	add    esp,0x10
c000c043:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c047:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000c04b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c04f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c053:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c057:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c05b:	e8 c3 b5 01 00       	call   c0027623 <__adddf3>
c000c060:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c064:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c068:	83 c4 28             	add    esp,0x28
c000c06b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c06f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c073:	e8 a8 c6 01 00       	call   c0028720 <lrint>
c000c078:	83 ec 0c             	sub    esp,0xc
c000c07b:	50                   	push   eax
c000c07c:	e8 82 c2 01 00       	call   c0028303 <__floatsidf>
c000c081:	83 c4 10             	add    esp,0x10
c000c084:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c088:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c08c:	52                   	push   edx
c000c08d:	50                   	push   eax
c000c08e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c092:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c096:	e8 d9 bb 01 00       	call   c0027c74 <__subdf3>
c000c09b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c09f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c0a3:	83 c4 20             	add    esp,0x20
c000c0a6:	6a 00                	push   0x0
c000c0a8:	6a 00                	push   0x0
c000c0aa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0ae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0b2:	e8 b8 c4 01 00       	call   c002856f <__ltdf2>
c000c0b7:	83 c4 10             	add    esp,0x10
c000c0ba:	85 c0                	test   eax,eax
c000c0bc:	79 20                	jns    c000c0de <sinc_multichan_vari_process+0x66e>
c000c0be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0c6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0ca:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0ce:	e8 50 b5 01 00       	call   c0027623 <__adddf3>
c000c0d3:	83 c4 10             	add    esp,0x10
c000c0d6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c0da:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c0de:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c0e1:	83 ec 10             	sub    esp,0x10
c000c0e4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c0e8:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000c0eb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0ef:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0f3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c0f7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c0fb:	e8 74 bb 01 00       	call   c0027c74 <__subdf3>
c000c100:	83 c4 18             	add    esp,0x18
c000c103:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c107:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c10b:	52                   	push   edx
c000c10c:	50                   	push   eax
c000c10d:	e8 0e c6 01 00       	call   c0028720 <lrint>
c000c112:	0f af e8             	imul   ebp,eax
c000c115:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c119:	83 c4 10             	add    esp,0x10
c000c11c:	01 e8                	add    eax,ebp
c000c11e:	99                   	cdq    
c000c11f:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c122:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c125:	e9 fd fb ff ff       	jmp    c000bd27 <sinc_multichan_vari_process+0x2b7>
c000c12a:	83 c4 4c             	add    esp,0x4c
c000c12d:	89 d0                	mov    eax,edx
c000c12f:	5b                   	pop    ebx
c000c130:	5e                   	pop    esi
c000c131:	5f                   	pop    edi
c000c132:	5d                   	pop    ebp
c000c133:	c3                   	ret    

c000c134 <sinc_hex_vari_process>:
c000c134:	55                   	push   ebp
c000c135:	ba 05 00 00 00       	mov    edx,0x5
c000c13a:	57                   	push   edi
c000c13b:	56                   	push   esi
c000c13c:	53                   	push   ebx
c000c13d:	83 ec 4c             	sub    esp,0x4c
c000c140:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000c144:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000c148:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000c14b:	85 db                	test   ebx,ebx
c000c14d:	0f 84 9c 06 00 00    	je     c000c7ef <sinc_hex_vari_process+0x6bb>
c000c153:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000c156:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c159:	0f af c7             	imul   eax,edi
c000c15c:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000c15f:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000c162:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000c169:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000c170:	0f af c7             	imul   eax,edi
c000c173:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000c176:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c179:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c17c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c180:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c184:	68 00 00 70 3f       	push   0x3f700000
c000c189:	6a 00                	push   0x0
c000c18b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c18f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c193:	e8 d7 c3 01 00       	call   c002856f <__ltdf2>
c000c198:	83 c4 10             	add    esp,0x10
c000c19b:	ba 16 00 00 00       	mov    edx,0x16
c000c1a0:	85 c0                	test   eax,eax
c000c1a2:	0f 88 47 06 00 00    	js     c000c7ef <sinc_hex_vari_process+0x6bb>
c000c1a8:	68 00 00 70 40       	push   0x40700000
c000c1ad:	6a 00                	push   0x0
c000c1af:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c1b3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c1b7:	e8 95 c3 01 00       	call   c0028551 <__gtdf2>
c000c1bc:	83 c4 10             	add    esp,0x10
c000c1bf:	ba 16 00 00 00       	mov    edx,0x16
c000c1c4:	85 c0                	test   eax,eax
c000c1c6:	0f 8f 23 06 00 00    	jg     c000c7ef <sinc_hex_vari_process+0x6bb>
c000c1cc:	83 ec 0c             	sub    esp,0xc
c000c1cf:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000c1d2:	e8 2c c1 01 00       	call   c0028303 <__floatsidf>
c000c1d7:	83 c4 10             	add    esp,0x10
c000c1da:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c1de:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c1e2:	68 00 00 00 40       	push   0x40000000
c000c1e7:	6a 00                	push   0x0
c000c1e9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c1ed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c1f1:	e8 2d b4 01 00       	call   c0027623 <__adddf3>
c000c1f6:	59                   	pop    ecx
c000c1f7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c1fb:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c1ff:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c202:	e8 fc c0 01 00       	call   c0028303 <__floatsidf>
c000c207:	83 c4 10             	add    esp,0x10
c000c20a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c20e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c212:	52                   	push   edx
c000c213:	50                   	push   eax
c000c214:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c218:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c21c:	e8 63 bd 01 00       	call   c0027f84 <__divdf3>
c000c221:	83 c4 10             	add    esp,0x10
c000c224:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c228:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c22c:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000c22f:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000c232:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c236:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c23a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c23e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c242:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c246:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c24a:	e8 02 c3 01 00       	call   c0028551 <__gtdf2>
c000c24f:	83 c4 10             	add    esp,0x10
c000c252:	85 c0                	test   eax,eax
c000c254:	7e 2d                	jle    c000c283 <sinc_hex_vari_process+0x14f>
c000c256:	68 00 00 f0 3f       	push   0x3ff00000
c000c25b:	6a 00                	push   0x0
c000c25d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c261:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c265:	e8 05 c3 01 00       	call   c002856f <__ltdf2>
c000c26a:	83 c4 10             	add    esp,0x10
c000c26d:	85 c0                	test   eax,eax
c000c26f:	79 4d                	jns    c000c2be <sinc_hex_vari_process+0x18a>
c000c271:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c275:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c279:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c27d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c281:	eb 1b                	jmp    c000c29e <sinc_hex_vari_process+0x16a>
c000c283:	68 00 00 f0 3f       	push   0x3ff00000
c000c288:	6a 00                	push   0x0
c000c28a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c28e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c292:	e8 d8 c2 01 00       	call   c002856f <__ltdf2>
c000c297:	83 c4 10             	add    esp,0x10
c000c29a:	85 c0                	test   eax,eax
c000c29c:	79 20                	jns    c000c2be <sinc_hex_vari_process+0x18a>
c000c29e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c2a2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c2a6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2aa:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2ae:	e8 d1 bc 01 00       	call   c0027f84 <__divdf3>
c000c2b3:	83 c4 10             	add    esp,0x10
c000c2b6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c2ba:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c2be:	50                   	push   eax
c000c2bf:	50                   	push   eax
c000c2c0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2c4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2c8:	e8 53 c4 01 00       	call   c0028720 <lrint>
c000c2cd:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000c2d0:	40                   	inc    eax
c000c2d1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c2d5:	0f af c7             	imul   eax,edi
c000c2d8:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000c2dc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c2df:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c2e3:	58                   	pop    eax
c000c2e4:	5a                   	pop    edx
c000c2e5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2e9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2ed:	e8 2e c4 01 00       	call   c0028720 <lrint>
c000c2f2:	83 ec 0c             	sub    esp,0xc
c000c2f5:	50                   	push   eax
c000c2f6:	e8 08 c0 01 00       	call   c0028303 <__floatsidf>
c000c2fb:	83 c4 10             	add    esp,0x10
c000c2fe:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c302:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c306:	52                   	push   edx
c000c307:	50                   	push   eax
c000c308:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c30c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c310:	e8 5f b9 01 00       	call   c0027c74 <__subdf3>
c000c315:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c319:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c31d:	83 c4 20             	add    esp,0x20
c000c320:	6a 00                	push   0x0
c000c322:	6a 00                	push   0x0
c000c324:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c328:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c32c:	e8 3e c2 01 00       	call   c002856f <__ltdf2>
c000c331:	83 c4 10             	add    esp,0x10
c000c334:	85 c0                	test   eax,eax
c000c336:	79 1f                	jns    c000c357 <sinc_hex_vari_process+0x223>
c000c338:	68 00 00 f0 3f       	push   0x3ff00000
c000c33d:	6a 00                	push   0x0
c000c33f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c343:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c347:	e8 d7 b2 01 00       	call   c0027623 <__adddf3>
c000c34c:	83 c4 10             	add    esp,0x10
c000c34f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c353:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c357:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c35a:	83 ec 10             	sub    esp,0x10
c000c35d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c361:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c364:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c368:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c36c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c370:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c374:	e8 fb b8 01 00       	call   c0027c74 <__subdf3>
c000c379:	83 c4 18             	add    esp,0x18
c000c37c:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c380:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c384:	52                   	push   edx
c000c385:	50                   	push   eax
c000c386:	e8 95 c3 01 00       	call   c0028720 <lrint>
c000c38b:	0f af f8             	imul   edi,eax
c000c38e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c392:	01 f8                	add    eax,edi
c000c394:	99                   	cdq    
c000c395:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c398:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c39b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c39f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c3a3:	68 00 00 f0 3f       	push   0x3ff00000
c000c3a8:	6a 00                	push   0x0
c000c3aa:	e8 d5 bb 01 00       	call   c0027f84 <__divdf3>
c000c3af:	83 c4 10             	add    esp,0x10
c000c3b2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c3b6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c3ba:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000c3bf:	68 23 42 92 0c       	push   0xc924223
c000c3c4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c3c8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c3cc:	e8 52 b2 01 00       	call   c0027623 <__adddf3>
c000c3d1:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c3d5:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c3d9:	83 c4 20             	add    esp,0x20
c000c3dc:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000c3e4:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000c3ec:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000c3ef:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000c3f2:	7d 50                	jge    c000c444 <sinc_hex_vari_process+0x310>
c000c3f4:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c3f7:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c3fa:	01 c8                	add    eax,ecx
c000c3fc:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c3ff:	99                   	cdq    
c000c400:	f7 f9                	idiv   ecx
c000c402:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c406:	7d 0c                	jge    c000c414 <sinc_hex_vari_process+0x2e0>
c000c408:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000c40b:	85 ff                	test   edi,edi
c000c40d:	79 6c                	jns    c000c47b <sinc_hex_vari_process+0x347>
c000c40f:	e9 e7 00 00 00       	jmp    c000c4fb <sinc_hex_vari_process+0x3c7>
c000c414:	50                   	push   eax
c000c415:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c419:	56                   	push   esi
c000c41a:	53                   	push   ebx
c000c41b:	e8 d6 f4 ff ff       	call   c000b8f6 <prepare_data>
c000c420:	83 c4 10             	add    esp,0x10
c000c423:	89 c2                	mov    edx,eax
c000c425:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000c428:	85 c0                	test   eax,eax
c000c42a:	0f 85 bf 03 00 00    	jne    c000c7ef <sinc_hex_vari_process+0x6bb>
c000c430:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c433:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c436:	01 c8                	add    eax,ecx
c000c438:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c43b:	99                   	cdq    
c000c43c:	f7 f9                	idiv   ecx
c000c43e:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c442:	7c c4                	jl     c000c408 <sinc_hex_vari_process+0x2d4>
c000c444:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c448:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c44c:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000c44f:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000c452:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c456:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c45a:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000c45d:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000c460:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000c463:	99                   	cdq    
c000c464:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c467:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000c46a:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000c46d:	99                   	cdq    
c000c46e:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c471:	31 d2                	xor    edx,edx
c000c473:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000c476:	e9 74 03 00 00       	jmp    c000c7ef <sinc_hex_vari_process+0x6bb>
c000c47b:	83 ec 0c             	sub    esp,0xc
c000c47e:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000c481:	e8 7d be 01 00       	call   c0028303 <__floatsidf>
c000c486:	83 c4 10             	add    esp,0x10
c000c489:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c48d:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c491:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c495:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c499:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c49d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4a1:	e8 7d b1 01 00       	call   c0027623 <__adddf3>
c000c4a6:	83 c4 10             	add    esp,0x10
c000c4a9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c4ad:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c4b1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c4b5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c4b9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4bd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4c1:	e8 5d b1 01 00       	call   c0027623 <__adddf3>
c000c4c6:	89 3c 24             	mov    DWORD PTR [esp],edi
c000c4c9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c4cd:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c4d1:	e8 2d be 01 00       	call   c0028303 <__floatsidf>
c000c4d6:	83 c4 10             	add    esp,0x10
c000c4d9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c4dd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c4e1:	52                   	push   edx
c000c4e2:	50                   	push   eax
c000c4e3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4e7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4eb:	e8 7d c0 01 00       	call   c002856d <__gedf2>
c000c4f0:	83 c4 10             	add    esp,0x10
c000c4f3:	85 c0                	test   eax,eax
c000c4f5:	0f 89 49 ff ff ff    	jns    c000c444 <sinc_hex_vari_process+0x310>
c000c4fb:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000c4ff:	0f 8e ef 00 00 00    	jle    c000c5f4 <sinc_hex_vari_process+0x4c0>
c000c505:	83 ec 10             	sub    esp,0x10
c000c508:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c50b:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c50e:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000c511:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000c514:	e8 5b b7 01 00       	call   c0027c74 <__subdf3>
c000c519:	83 c4 18             	add    esp,0x18
c000c51c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c520:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c524:	52                   	push   edx
c000c525:	50                   	push   eax
c000c526:	e8 d5 c1 01 00       	call   c0028700 <fabs>
c000c52b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c52f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c533:	83 c4 10             	add    esp,0x10
c000c536:	68 df 7c db 3d       	push   0x3ddb7cdf
c000c53b:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000c540:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c544:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c548:	e8 04 c0 01 00       	call   c0028551 <__gtdf2>
c000c54d:	83 c4 10             	add    esp,0x10
c000c550:	85 c0                	test   eax,eax
c000c552:	0f 8e 9c 00 00 00    	jle    c000c5f4 <sinc_hex_vari_process+0x4c0>
c000c558:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c55b:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c55e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c562:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c566:	52                   	push   edx
c000c567:	50                   	push   eax
c000c568:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c56b:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c56e:	e8 01 b7 01 00       	call   c0027c74 <__subdf3>
c000c573:	59                   	pop    ecx
c000c574:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c578:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c57c:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000c57f:	e8 7f bd 01 00       	call   c0028303 <__floatsidf>
c000c584:	83 c4 10             	add    esp,0x10
c000c587:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c58b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c58f:	52                   	push   edx
c000c590:	50                   	push   eax
c000c591:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c595:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c599:	e8 02 b7 01 00       	call   c0027ca0 <__muldf3>
c000c59e:	5f                   	pop    edi
c000c59f:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c5a3:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c5a7:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000c5aa:	e8 54 bd 01 00       	call   c0028303 <__floatsidf>
c000c5af:	83 c4 10             	add    esp,0x10
c000c5b2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c5b6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c5ba:	52                   	push   edx
c000c5bb:	50                   	push   eax
c000c5bc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5c0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5c4:	e8 bb b9 01 00       	call   c0027f84 <__divdf3>
c000c5c9:	83 c4 10             	add    esp,0x10
c000c5cc:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c5d0:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c5d4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c5d8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c5dc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5e0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5e4:	e8 3a b0 01 00       	call   c0027623 <__adddf3>
c000c5e9:	83 c4 10             	add    esp,0x10
c000c5ec:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c5f0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c5f4:	83 ec 0c             	sub    esp,0xc
c000c5f7:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c5fa:	e8 04 bd 01 00       	call   c0028303 <__floatsidf>
c000c5ff:	83 c4 10             	add    esp,0x10
c000c602:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c606:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c60a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c60e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c612:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c616:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c61a:	e8 50 bf 01 00       	call   c002856f <__ltdf2>
c000c61f:	83 c4 10             	add    esp,0x10
c000c622:	85 c0                	test   eax,eax
c000c624:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c628:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000c62c:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000c630:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000c634:	78 10                	js     c000c646 <sinc_hex_vari_process+0x512>
c000c636:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c63a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c63e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c642:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c646:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c64a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c64e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c652:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c656:	e8 45 b6 01 00       	call   c0027ca0 <__muldf3>
c000c65b:	59                   	pop    ecx
c000c65c:	5f                   	pop    edi
c000c65d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c661:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c665:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c669:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c66d:	e8 5d f2 ff ff       	call   c000b8cf <double_to_fp>
c000c672:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c676:	89 c7                	mov    edi,eax
c000c678:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c67c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c680:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c684:	e8 17 b6 01 00       	call   c0027ca0 <__muldf3>
c000c689:	83 c4 18             	add    esp,0x18
c000c68c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c690:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c694:	52                   	push   edx
c000c695:	50                   	push   eax
c000c696:	e8 34 f2 ff ff       	call   c000b8cf <double_to_fp>
c000c69b:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000c69e:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000c6a2:	83 c4 0c             	add    esp,0xc
c000c6a5:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000c6a8:	8d 04 90             	lea    eax,[eax+edx*4]
c000c6ab:	50                   	push   eax
c000c6ac:	50                   	push   eax
c000c6ad:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c6b0:	e8 4e bc 01 00       	call   c0028303 <__floatsidf>
c000c6b5:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c6b9:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000c6bd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6c1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6c5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6c9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6cd:	e8 b2 b8 01 00       	call   c0027f84 <__divdf3>
c000c6d2:	83 c4 18             	add    esp,0x18
c000c6d5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c6d9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c6dd:	52                   	push   edx
c000c6de:	89 fa                	mov    edx,edi
c000c6e0:	50                   	push   eax
c000c6e1:	89 d8                	mov    eax,ebx
c000c6e3:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000c6e7:	e8 50 de ff ff       	call   c000a53c <calc_output_hex>
c000c6ec:	83 43 14 06          	add    DWORD PTR [ebx+0x14],0x6
c000c6f0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c6f4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c6f8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c6fc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c700:	e8 7f b8 01 00       	call   c0027f84 <__divdf3>
c000c705:	83 c4 10             	add    esp,0x10
c000c708:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c70c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c710:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c714:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c718:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c71c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c720:	e8 fe ae 01 00       	call   c0027623 <__adddf3>
c000c725:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000c729:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c72d:	83 c4 18             	add    esp,0x18
c000c730:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c734:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c738:	e8 e3 bf 01 00       	call   c0028720 <lrint>
c000c73d:	83 ec 0c             	sub    esp,0xc
c000c740:	50                   	push   eax
c000c741:	e8 bd bb 01 00       	call   c0028303 <__floatsidf>
c000c746:	83 c4 10             	add    esp,0x10
c000c749:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c74d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c751:	52                   	push   edx
c000c752:	50                   	push   eax
c000c753:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c757:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c75b:	e8 14 b5 01 00       	call   c0027c74 <__subdf3>
c000c760:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c764:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c768:	83 c4 20             	add    esp,0x20
c000c76b:	6a 00                	push   0x0
c000c76d:	6a 00                	push   0x0
c000c76f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c773:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c777:	e8 f3 bd 01 00       	call   c002856f <__ltdf2>
c000c77c:	83 c4 10             	add    esp,0x10
c000c77f:	85 c0                	test   eax,eax
c000c781:	79 20                	jns    c000c7a3 <sinc_hex_vari_process+0x66f>
c000c783:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c787:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c78b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c78f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c793:	e8 8b ae 01 00       	call   c0027623 <__adddf3>
c000c798:	83 c4 10             	add    esp,0x10
c000c79b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c79f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c7a3:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c7a6:	83 ec 10             	sub    esp,0x10
c000c7a9:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c7ad:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c7b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c7b4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c7b8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c7bc:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c7c0:	e8 af b4 01 00       	call   c0027c74 <__subdf3>
c000c7c5:	83 c4 18             	add    esp,0x18
c000c7c8:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c7cc:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c7d0:	52                   	push   edx
c000c7d1:	50                   	push   eax
c000c7d2:	e8 49 bf 01 00       	call   c0028720 <lrint>
c000c7d7:	0f af f8             	imul   edi,eax
c000c7da:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c7de:	83 c4 10             	add    esp,0x10
c000c7e1:	01 f8                	add    eax,edi
c000c7e3:	99                   	cdq    
c000c7e4:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c7e7:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c7ea:	e9 fd fb ff ff       	jmp    c000c3ec <sinc_hex_vari_process+0x2b8>
c000c7ef:	83 c4 4c             	add    esp,0x4c
c000c7f2:	89 d0                	mov    eax,edx
c000c7f4:	5b                   	pop    ebx
c000c7f5:	5e                   	pop    esi
c000c7f6:	5f                   	pop    edi
c000c7f7:	5d                   	pop    ebp
c000c7f8:	c3                   	ret    

c000c7f9 <sinc_quad_vari_process>:
c000c7f9:	55                   	push   ebp
c000c7fa:	ba 05 00 00 00       	mov    edx,0x5
c000c7ff:	57                   	push   edi
c000c800:	56                   	push   esi
c000c801:	53                   	push   ebx
c000c802:	83 ec 4c             	sub    esp,0x4c
c000c805:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000c809:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000c80d:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000c810:	85 db                	test   ebx,ebx
c000c812:	0f 84 9c 06 00 00    	je     c000ceb4 <sinc_quad_vari_process+0x6bb>
c000c818:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000c81b:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c81e:	0f af c7             	imul   eax,edi
c000c821:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000c824:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000c827:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000c82e:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000c835:	0f af c7             	imul   eax,edi
c000c838:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000c83b:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c83e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c841:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c845:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c849:	68 00 00 70 3f       	push   0x3f700000
c000c84e:	6a 00                	push   0x0
c000c850:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c854:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c858:	e8 12 bd 01 00       	call   c002856f <__ltdf2>
c000c85d:	83 c4 10             	add    esp,0x10
c000c860:	ba 16 00 00 00       	mov    edx,0x16
c000c865:	85 c0                	test   eax,eax
c000c867:	0f 88 47 06 00 00    	js     c000ceb4 <sinc_quad_vari_process+0x6bb>
c000c86d:	68 00 00 70 40       	push   0x40700000
c000c872:	6a 00                	push   0x0
c000c874:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c878:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c87c:	e8 d0 bc 01 00       	call   c0028551 <__gtdf2>
c000c881:	83 c4 10             	add    esp,0x10
c000c884:	ba 16 00 00 00       	mov    edx,0x16
c000c889:	85 c0                	test   eax,eax
c000c88b:	0f 8f 23 06 00 00    	jg     c000ceb4 <sinc_quad_vari_process+0x6bb>
c000c891:	83 ec 0c             	sub    esp,0xc
c000c894:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000c897:	e8 67 ba 01 00       	call   c0028303 <__floatsidf>
c000c89c:	83 c4 10             	add    esp,0x10
c000c89f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c8a3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c8a7:	68 00 00 00 40       	push   0x40000000
c000c8ac:	6a 00                	push   0x0
c000c8ae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8b2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8b6:	e8 68 ad 01 00       	call   c0027623 <__adddf3>
c000c8bb:	59                   	pop    ecx
c000c8bc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c8c0:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c8c4:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c8c7:	e8 37 ba 01 00       	call   c0028303 <__floatsidf>
c000c8cc:	83 c4 10             	add    esp,0x10
c000c8cf:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c8d3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c8d7:	52                   	push   edx
c000c8d8:	50                   	push   eax
c000c8d9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8dd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8e1:	e8 9e b6 01 00       	call   c0027f84 <__divdf3>
c000c8e6:	83 c4 10             	add    esp,0x10
c000c8e9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c8ed:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c8f1:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000c8f4:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000c8f7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c8fb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c8ff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c903:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c907:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c90b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c90f:	e8 3d bc 01 00       	call   c0028551 <__gtdf2>
c000c914:	83 c4 10             	add    esp,0x10
c000c917:	85 c0                	test   eax,eax
c000c919:	7e 2d                	jle    c000c948 <sinc_quad_vari_process+0x14f>
c000c91b:	68 00 00 f0 3f       	push   0x3ff00000
c000c920:	6a 00                	push   0x0
c000c922:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c926:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c92a:	e8 40 bc 01 00       	call   c002856f <__ltdf2>
c000c92f:	83 c4 10             	add    esp,0x10
c000c932:	85 c0                	test   eax,eax
c000c934:	79 4d                	jns    c000c983 <sinc_quad_vari_process+0x18a>
c000c936:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c93a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c93e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c942:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c946:	eb 1b                	jmp    c000c963 <sinc_quad_vari_process+0x16a>
c000c948:	68 00 00 f0 3f       	push   0x3ff00000
c000c94d:	6a 00                	push   0x0
c000c94f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c953:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c957:	e8 13 bc 01 00       	call   c002856f <__ltdf2>
c000c95c:	83 c4 10             	add    esp,0x10
c000c95f:	85 c0                	test   eax,eax
c000c961:	79 20                	jns    c000c983 <sinc_quad_vari_process+0x18a>
c000c963:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c967:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c96b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c96f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c973:	e8 0c b6 01 00       	call   c0027f84 <__divdf3>
c000c978:	83 c4 10             	add    esp,0x10
c000c97b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c97f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c983:	50                   	push   eax
c000c984:	50                   	push   eax
c000c985:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c989:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c98d:	e8 8e bd 01 00       	call   c0028720 <lrint>
c000c992:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000c995:	40                   	inc    eax
c000c996:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c99a:	0f af c7             	imul   eax,edi
c000c99d:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000c9a1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c9a4:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c9a8:	58                   	pop    eax
c000c9a9:	5a                   	pop    edx
c000c9aa:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c9ae:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c9b2:	e8 69 bd 01 00       	call   c0028720 <lrint>
c000c9b7:	83 ec 0c             	sub    esp,0xc
c000c9ba:	50                   	push   eax
c000c9bb:	e8 43 b9 01 00       	call   c0028303 <__floatsidf>
c000c9c0:	83 c4 10             	add    esp,0x10
c000c9c3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c9c7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c9cb:	52                   	push   edx
c000c9cc:	50                   	push   eax
c000c9cd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c9d1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c9d5:	e8 9a b2 01 00       	call   c0027c74 <__subdf3>
c000c9da:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c9de:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c9e2:	83 c4 20             	add    esp,0x20
c000c9e5:	6a 00                	push   0x0
c000c9e7:	6a 00                	push   0x0
c000c9e9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c9ed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c9f1:	e8 79 bb 01 00       	call   c002856f <__ltdf2>
c000c9f6:	83 c4 10             	add    esp,0x10
c000c9f9:	85 c0                	test   eax,eax
c000c9fb:	79 1f                	jns    c000ca1c <sinc_quad_vari_process+0x223>
c000c9fd:	68 00 00 f0 3f       	push   0x3ff00000
c000ca02:	6a 00                	push   0x0
c000ca04:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ca08:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ca0c:	e8 12 ac 01 00       	call   c0027623 <__adddf3>
c000ca11:	83 c4 10             	add    esp,0x10
c000ca14:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ca18:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ca1c:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000ca1f:	83 ec 10             	sub    esp,0x10
c000ca22:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000ca26:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000ca29:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca2d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca31:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca35:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca39:	e8 36 b2 01 00       	call   c0027c74 <__subdf3>
c000ca3e:	83 c4 18             	add    esp,0x18
c000ca41:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ca45:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ca49:	52                   	push   edx
c000ca4a:	50                   	push   eax
c000ca4b:	e8 d0 bc 01 00       	call   c0028720 <lrint>
c000ca50:	0f af f8             	imul   edi,eax
c000ca53:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ca57:	01 f8                	add    eax,edi
c000ca59:	99                   	cdq    
c000ca5a:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000ca5d:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000ca60:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ca64:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ca68:	68 00 00 f0 3f       	push   0x3ff00000
c000ca6d:	6a 00                	push   0x0
c000ca6f:	e8 10 b5 01 00       	call   c0027f84 <__divdf3>
c000ca74:	83 c4 10             	add    esp,0x10
c000ca77:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ca7b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ca7f:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000ca84:	68 23 42 92 0c       	push   0xc924223
c000ca89:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca8d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca91:	e8 8d ab 01 00       	call   c0027623 <__adddf3>
c000ca96:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000ca9a:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000ca9e:	83 c4 20             	add    esp,0x20
c000caa1:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000caa9:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000cab1:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000cab4:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000cab7:	7d 50                	jge    c000cb09 <sinc_quad_vari_process+0x310>
c000cab9:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000cabc:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000cabf:	01 c8                	add    eax,ecx
c000cac1:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000cac4:	99                   	cdq    
c000cac5:	f7 f9                	idiv   ecx
c000cac7:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000cacb:	7d 0c                	jge    c000cad9 <sinc_quad_vari_process+0x2e0>
c000cacd:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000cad0:	85 ff                	test   edi,edi
c000cad2:	79 6c                	jns    c000cb40 <sinc_quad_vari_process+0x347>
c000cad4:	e9 e7 00 00 00       	jmp    c000cbc0 <sinc_quad_vari_process+0x3c7>
c000cad9:	50                   	push   eax
c000cada:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cade:	56                   	push   esi
c000cadf:	53                   	push   ebx
c000cae0:	e8 11 ee ff ff       	call   c000b8f6 <prepare_data>
c000cae5:	83 c4 10             	add    esp,0x10
c000cae8:	89 c2                	mov    edx,eax
c000caea:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000caed:	85 c0                	test   eax,eax
c000caef:	0f 85 bf 03 00 00    	jne    c000ceb4 <sinc_quad_vari_process+0x6bb>
c000caf5:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000caf8:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000cafb:	01 c8                	add    eax,ecx
c000cafd:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000cb00:	99                   	cdq    
c000cb01:	f7 f9                	idiv   ecx
c000cb03:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000cb07:	7c c4                	jl     c000cacd <sinc_quad_vari_process+0x2d4>
c000cb09:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cb0d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000cb11:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000cb14:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000cb17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb1b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000cb1f:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000cb22:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000cb25:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000cb28:	99                   	cdq    
c000cb29:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000cb2c:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000cb2f:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000cb32:	99                   	cdq    
c000cb33:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000cb36:	31 d2                	xor    edx,edx
c000cb38:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000cb3b:	e9 74 03 00 00       	jmp    c000ceb4 <sinc_quad_vari_process+0x6bb>
c000cb40:	83 ec 0c             	sub    esp,0xc
c000cb43:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000cb46:	e8 b8 b7 01 00       	call   c0028303 <__floatsidf>
c000cb4b:	83 c4 10             	add    esp,0x10
c000cb4e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cb52:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cb56:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cb5a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cb5e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb62:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb66:	e8 b8 aa 01 00       	call   c0027623 <__adddf3>
c000cb6b:	83 c4 10             	add    esp,0x10
c000cb6e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cb72:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cb76:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cb7a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cb7e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb82:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb86:	e8 98 aa 01 00       	call   c0027623 <__adddf3>
c000cb8b:	89 3c 24             	mov    DWORD PTR [esp],edi
c000cb8e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cb92:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cb96:	e8 68 b7 01 00       	call   c0028303 <__floatsidf>
c000cb9b:	83 c4 10             	add    esp,0x10
c000cb9e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cba2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cba6:	52                   	push   edx
c000cba7:	50                   	push   eax
c000cba8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cbac:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cbb0:	e8 b8 b9 01 00       	call   c002856d <__gedf2>
c000cbb5:	83 c4 10             	add    esp,0x10
c000cbb8:	85 c0                	test   eax,eax
c000cbba:	0f 89 49 ff ff ff    	jns    c000cb09 <sinc_quad_vari_process+0x310>
c000cbc0:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000cbc4:	0f 8e ef 00 00 00    	jle    c000ccb9 <sinc_quad_vari_process+0x4c0>
c000cbca:	83 ec 10             	sub    esp,0x10
c000cbcd:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000cbd0:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000cbd3:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000cbd6:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000cbd9:	e8 96 b0 01 00       	call   c0027c74 <__subdf3>
c000cbde:	83 c4 18             	add    esp,0x18
c000cbe1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cbe5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cbe9:	52                   	push   edx
c000cbea:	50                   	push   eax
c000cbeb:	e8 10 bb 01 00       	call   c0028700 <fabs>
c000cbf0:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cbf4:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cbf8:	83 c4 10             	add    esp,0x10
c000cbfb:	68 df 7c db 3d       	push   0x3ddb7cdf
c000cc00:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000cc05:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc09:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc0d:	e8 3f b9 01 00       	call   c0028551 <__gtdf2>
c000cc12:	83 c4 10             	add    esp,0x10
c000cc15:	85 c0                	test   eax,eax
c000cc17:	0f 8e 9c 00 00 00    	jle    c000ccb9 <sinc_quad_vari_process+0x4c0>
c000cc1d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cc20:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000cc23:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cc27:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000cc2b:	52                   	push   edx
c000cc2c:	50                   	push   eax
c000cc2d:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000cc30:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000cc33:	e8 3c b0 01 00       	call   c0027c74 <__subdf3>
c000cc38:	59                   	pop    ecx
c000cc39:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000cc3d:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000cc41:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000cc44:	e8 ba b6 01 00       	call   c0028303 <__floatsidf>
c000cc49:	83 c4 10             	add    esp,0x10
c000cc4c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc50:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc54:	52                   	push   edx
c000cc55:	50                   	push   eax
c000cc56:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc5a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc5e:	e8 3d b0 01 00       	call   c0027ca0 <__muldf3>
c000cc63:	5f                   	pop    edi
c000cc64:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000cc68:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000cc6c:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000cc6f:	e8 8f b6 01 00       	call   c0028303 <__floatsidf>
c000cc74:	83 c4 10             	add    esp,0x10
c000cc77:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc7b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc7f:	52                   	push   edx
c000cc80:	50                   	push   eax
c000cc81:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc85:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc89:	e8 f6 b2 01 00       	call   c0027f84 <__divdf3>
c000cc8e:	83 c4 10             	add    esp,0x10
c000cc91:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cc95:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cc99:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cc9d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cca1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cca5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cca9:	e8 75 a9 01 00       	call   c0027623 <__adddf3>
c000ccae:	83 c4 10             	add    esp,0x10
c000ccb1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ccb5:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ccb9:	83 ec 0c             	sub    esp,0xc
c000ccbc:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000ccbf:	e8 3f b6 01 00       	call   c0028303 <__floatsidf>
c000ccc4:	83 c4 10             	add    esp,0x10
c000ccc7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cccb:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cccf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccd3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccd7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccdb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccdf:	e8 8b b8 01 00       	call   c002856f <__ltdf2>
c000cce4:	83 c4 10             	add    esp,0x10
c000cce7:	85 c0                	test   eax,eax
c000cce9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000cced:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ccf1:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000ccf5:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000ccf9:	78 10                	js     c000cd0b <sinc_quad_vari_process+0x512>
c000ccfb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ccff:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000cd03:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cd07:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cd0b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd0f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd13:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd17:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd1b:	e8 80 af 01 00       	call   c0027ca0 <__muldf3>
c000cd20:	59                   	pop    ecx
c000cd21:	5f                   	pop    edi
c000cd22:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cd26:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cd2a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cd2e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cd32:	e8 98 eb ff ff       	call   c000b8cf <double_to_fp>
c000cd37:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd3b:	89 c7                	mov    edi,eax
c000cd3d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd41:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd45:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd49:	e8 52 af 01 00       	call   c0027ca0 <__muldf3>
c000cd4e:	83 c4 18             	add    esp,0x18
c000cd51:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cd55:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cd59:	52                   	push   edx
c000cd5a:	50                   	push   eax
c000cd5b:	e8 6f eb ff ff       	call   c000b8cf <double_to_fp>
c000cd60:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000cd63:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000cd67:	83 c4 0c             	add    esp,0xc
c000cd6a:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000cd6d:	8d 04 90             	lea    eax,[eax+edx*4]
c000cd70:	50                   	push   eax
c000cd71:	50                   	push   eax
c000cd72:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cd75:	e8 89 b5 01 00       	call   c0028303 <__floatsidf>
c000cd7a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000cd7e:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000cd82:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd86:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd8a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd8e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd92:	e8 ed b1 01 00       	call   c0027f84 <__divdf3>
c000cd97:	83 c4 18             	add    esp,0x18
c000cd9a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cd9e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cda2:	52                   	push   edx
c000cda3:	89 fa                	mov    edx,edi
c000cda5:	50                   	push   eax
c000cda6:	89 d8                	mov    eax,ebx
c000cda8:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000cdac:	e8 a5 d1 ff ff       	call   c0009f56 <calc_output_quad>
c000cdb1:	83 43 14 04          	add    DWORD PTR [ebx+0x14],0x4
c000cdb5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cdb9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cdbd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cdc1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cdc5:	e8 ba b1 01 00       	call   c0027f84 <__divdf3>
c000cdca:	83 c4 10             	add    esp,0x10
c000cdcd:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cdd1:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cdd5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cdd9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cddd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cde1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cde5:	e8 39 a8 01 00       	call   c0027623 <__adddf3>
c000cdea:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000cdee:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000cdf2:	83 c4 18             	add    esp,0x18
c000cdf5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cdf9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cdfd:	e8 1e b9 01 00       	call   c0028720 <lrint>
c000ce02:	83 ec 0c             	sub    esp,0xc
c000ce05:	50                   	push   eax
c000ce06:	e8 f8 b4 01 00       	call   c0028303 <__floatsidf>
c000ce0b:	83 c4 10             	add    esp,0x10
c000ce0e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ce12:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ce16:	52                   	push   edx
c000ce17:	50                   	push   eax
c000ce18:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce1c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce20:	e8 4f ae 01 00       	call   c0027c74 <__subdf3>
c000ce25:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ce29:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ce2d:	83 c4 20             	add    esp,0x20
c000ce30:	6a 00                	push   0x0
c000ce32:	6a 00                	push   0x0
c000ce34:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce38:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce3c:	e8 2e b7 01 00       	call   c002856f <__ltdf2>
c000ce41:	83 c4 10             	add    esp,0x10
c000ce44:	85 c0                	test   eax,eax
c000ce46:	79 20                	jns    c000ce68 <sinc_quad_vari_process+0x66f>
c000ce48:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce4c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce50:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce54:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce58:	e8 c6 a7 01 00       	call   c0027623 <__adddf3>
c000ce5d:	83 c4 10             	add    esp,0x10
c000ce60:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ce64:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ce68:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000ce6b:	83 ec 10             	sub    esp,0x10
c000ce6e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ce72:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000ce75:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce79:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce7d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce81:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce85:	e8 ea ad 01 00       	call   c0027c74 <__subdf3>
c000ce8a:	83 c4 18             	add    esp,0x18
c000ce8d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ce91:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ce95:	52                   	push   edx
c000ce96:	50                   	push   eax
c000ce97:	e8 84 b8 01 00       	call   c0028720 <lrint>
c000ce9c:	0f af f8             	imul   edi,eax
c000ce9f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000cea3:	83 c4 10             	add    esp,0x10
c000cea6:	01 f8                	add    eax,edi
c000cea8:	99                   	cdq    
c000cea9:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000ceac:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000ceaf:	e9 fd fb ff ff       	jmp    c000cab1 <sinc_quad_vari_process+0x2b8>
c000ceb4:	83 c4 4c             	add    esp,0x4c
c000ceb7:	89 d0                	mov    eax,edx
c000ceb9:	5b                   	pop    ebx
c000ceba:	5e                   	pop    esi
c000cebb:	5f                   	pop    edi
c000cebc:	5d                   	pop    ebp
c000cebd:	c3                   	ret    

c000cebe <sinc_stereo_vari_process>:
c000cebe:	55                   	push   ebp
c000cebf:	ba 05 00 00 00       	mov    edx,0x5
c000cec4:	57                   	push   edi
c000cec5:	56                   	push   esi
c000cec6:	53                   	push   ebx
c000cec7:	83 ec 4c             	sub    esp,0x4c
c000ceca:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000cece:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000ced2:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000ced5:	85 db                	test   ebx,ebx
c000ced7:	0f 84 9c 06 00 00    	je     c000d579 <sinc_stereo_vari_process+0x6bb>
c000cedd:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000cee0:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000cee3:	0f af c7             	imul   eax,edi
c000cee6:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000cee9:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000ceec:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000cef3:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000cefa:	0f af c7             	imul   eax,edi
c000cefd:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000cf00:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000cf03:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cf06:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000cf0a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cf0e:	68 00 00 70 3f       	push   0x3f700000
c000cf13:	6a 00                	push   0x0
c000cf15:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf19:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf1d:	e8 4d b6 01 00       	call   c002856f <__ltdf2>
c000cf22:	83 c4 10             	add    esp,0x10
c000cf25:	ba 16 00 00 00       	mov    edx,0x16
c000cf2a:	85 c0                	test   eax,eax
c000cf2c:	0f 88 47 06 00 00    	js     c000d579 <sinc_stereo_vari_process+0x6bb>
c000cf32:	68 00 00 70 40       	push   0x40700000
c000cf37:	6a 00                	push   0x0
c000cf39:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf3d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf41:	e8 0b b6 01 00       	call   c0028551 <__gtdf2>
c000cf46:	83 c4 10             	add    esp,0x10
c000cf49:	ba 16 00 00 00       	mov    edx,0x16
c000cf4e:	85 c0                	test   eax,eax
c000cf50:	0f 8f 23 06 00 00    	jg     c000d579 <sinc_stereo_vari_process+0x6bb>
c000cf56:	83 ec 0c             	sub    esp,0xc
c000cf59:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000cf5c:	e8 a2 b3 01 00       	call   c0028303 <__floatsidf>
c000cf61:	83 c4 10             	add    esp,0x10
c000cf64:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cf68:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cf6c:	68 00 00 00 40       	push   0x40000000
c000cf71:	6a 00                	push   0x0
c000cf73:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf77:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf7b:	e8 a3 a6 01 00       	call   c0027623 <__adddf3>
c000cf80:	59                   	pop    ecx
c000cf81:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000cf85:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000cf89:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cf8c:	e8 72 b3 01 00       	call   c0028303 <__floatsidf>
c000cf91:	83 c4 10             	add    esp,0x10
c000cf94:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cf98:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cf9c:	52                   	push   edx
c000cf9d:	50                   	push   eax
c000cf9e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfa2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfa6:	e8 d9 af 01 00       	call   c0027f84 <__divdf3>
c000cfab:	83 c4 10             	add    esp,0x10
c000cfae:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cfb2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cfb6:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000cfb9:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000cfbc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cfc0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cfc4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfc8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfcc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfd0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfd4:	e8 78 b5 01 00       	call   c0028551 <__gtdf2>
c000cfd9:	83 c4 10             	add    esp,0x10
c000cfdc:	85 c0                	test   eax,eax
c000cfde:	7e 2d                	jle    c000d00d <sinc_stereo_vari_process+0x14f>
c000cfe0:	68 00 00 f0 3f       	push   0x3ff00000
c000cfe5:	6a 00                	push   0x0
c000cfe7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cfeb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cfef:	e8 7b b5 01 00       	call   c002856f <__ltdf2>
c000cff4:	83 c4 10             	add    esp,0x10
c000cff7:	85 c0                	test   eax,eax
c000cff9:	79 4d                	jns    c000d048 <sinc_stereo_vari_process+0x18a>
c000cffb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cfff:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d003:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d007:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d00b:	eb 1b                	jmp    c000d028 <sinc_stereo_vari_process+0x16a>
c000d00d:	68 00 00 f0 3f       	push   0x3ff00000
c000d012:	6a 00                	push   0x0
c000d014:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d018:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d01c:	e8 4e b5 01 00       	call   c002856f <__ltdf2>
c000d021:	83 c4 10             	add    esp,0x10
c000d024:	85 c0                	test   eax,eax
c000d026:	79 20                	jns    c000d048 <sinc_stereo_vari_process+0x18a>
c000d028:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d02c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d030:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d034:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d038:	e8 47 af 01 00       	call   c0027f84 <__divdf3>
c000d03d:	83 c4 10             	add    esp,0x10
c000d040:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d044:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d048:	50                   	push   eax
c000d049:	50                   	push   eax
c000d04a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d04e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d052:	e8 c9 b6 01 00       	call   c0028720 <lrint>
c000d057:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000d05a:	40                   	inc    eax
c000d05b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d05f:	0f af c7             	imul   eax,edi
c000d062:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000d066:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d069:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d06d:	58                   	pop    eax
c000d06e:	5a                   	pop    edx
c000d06f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d073:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d077:	e8 a4 b6 01 00       	call   c0028720 <lrint>
c000d07c:	83 ec 0c             	sub    esp,0xc
c000d07f:	50                   	push   eax
c000d080:	e8 7e b2 01 00       	call   c0028303 <__floatsidf>
c000d085:	83 c4 10             	add    esp,0x10
c000d088:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d08c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d090:	52                   	push   edx
c000d091:	50                   	push   eax
c000d092:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d096:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d09a:	e8 d5 ab 01 00       	call   c0027c74 <__subdf3>
c000d09f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d0a3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d0a7:	83 c4 20             	add    esp,0x20
c000d0aa:	6a 00                	push   0x0
c000d0ac:	6a 00                	push   0x0
c000d0ae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d0b2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d0b6:	e8 b4 b4 01 00       	call   c002856f <__ltdf2>
c000d0bb:	83 c4 10             	add    esp,0x10
c000d0be:	85 c0                	test   eax,eax
c000d0c0:	79 1f                	jns    c000d0e1 <sinc_stereo_vari_process+0x223>
c000d0c2:	68 00 00 f0 3f       	push   0x3ff00000
c000d0c7:	6a 00                	push   0x0
c000d0c9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d0cd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d0d1:	e8 4d a5 01 00       	call   c0027623 <__adddf3>
c000d0d6:	83 c4 10             	add    esp,0x10
c000d0d9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d0dd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d0e1:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000d0e4:	83 ec 10             	sub    esp,0x10
c000d0e7:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d0eb:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d0ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d0f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d0f6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d0fa:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d0fe:	e8 71 ab 01 00       	call   c0027c74 <__subdf3>
c000d103:	83 c4 18             	add    esp,0x18
c000d106:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d10a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d10e:	52                   	push   edx
c000d10f:	50                   	push   eax
c000d110:	e8 0b b6 01 00       	call   c0028720 <lrint>
c000d115:	0f af f8             	imul   edi,eax
c000d118:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d11c:	01 f8                	add    eax,edi
c000d11e:	99                   	cdq    
c000d11f:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d122:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d125:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d129:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d12d:	68 00 00 f0 3f       	push   0x3ff00000
c000d132:	6a 00                	push   0x0
c000d134:	e8 4b ae 01 00       	call   c0027f84 <__divdf3>
c000d139:	83 c4 10             	add    esp,0x10
c000d13c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d140:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d144:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000d149:	68 23 42 92 0c       	push   0xc924223
c000d14e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d152:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d156:	e8 c8 a4 01 00       	call   c0027623 <__adddf3>
c000d15b:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000d15f:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000d163:	83 c4 20             	add    esp,0x20
c000d166:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000d16e:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000d176:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000d179:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000d17c:	7d 50                	jge    c000d1ce <sinc_stereo_vari_process+0x310>
c000d17e:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d181:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d184:	01 c8                	add    eax,ecx
c000d186:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d189:	99                   	cdq    
c000d18a:	f7 f9                	idiv   ecx
c000d18c:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000d190:	7d 0c                	jge    c000d19e <sinc_stereo_vari_process+0x2e0>
c000d192:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000d195:	85 ff                	test   edi,edi
c000d197:	79 6c                	jns    c000d205 <sinc_stereo_vari_process+0x347>
c000d199:	e9 e7 00 00 00       	jmp    c000d285 <sinc_stereo_vari_process+0x3c7>
c000d19e:	50                   	push   eax
c000d19f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d1a3:	56                   	push   esi
c000d1a4:	53                   	push   ebx
c000d1a5:	e8 4c e7 ff ff       	call   c000b8f6 <prepare_data>
c000d1aa:	83 c4 10             	add    esp,0x10
c000d1ad:	89 c2                	mov    edx,eax
c000d1af:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000d1b2:	85 c0                	test   eax,eax
c000d1b4:	0f 85 bf 03 00 00    	jne    c000d579 <sinc_stereo_vari_process+0x6bb>
c000d1ba:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d1bd:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d1c0:	01 c8                	add    eax,ecx
c000d1c2:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d1c5:	99                   	cdq    
c000d1c6:	f7 f9                	idiv   ecx
c000d1c8:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000d1cc:	7c c4                	jl     c000d192 <sinc_stereo_vari_process+0x2d4>
c000d1ce:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d1d2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d1d6:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000d1d9:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000d1dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d1e0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d1e4:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000d1e7:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000d1ea:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000d1ed:	99                   	cdq    
c000d1ee:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d1f1:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000d1f4:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000d1f7:	99                   	cdq    
c000d1f8:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d1fb:	31 d2                	xor    edx,edx
c000d1fd:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000d200:	e9 74 03 00 00       	jmp    c000d579 <sinc_stereo_vari_process+0x6bb>
c000d205:	83 ec 0c             	sub    esp,0xc
c000d208:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000d20b:	e8 f3 b0 01 00       	call   c0028303 <__floatsidf>
c000d210:	83 c4 10             	add    esp,0x10
c000d213:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d217:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d21b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d21f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d223:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d227:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d22b:	e8 f3 a3 01 00       	call   c0027623 <__adddf3>
c000d230:	83 c4 10             	add    esp,0x10
c000d233:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d237:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d23b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d23f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d243:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d247:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d24b:	e8 d3 a3 01 00       	call   c0027623 <__adddf3>
c000d250:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d253:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d257:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d25b:	e8 a3 b0 01 00       	call   c0028303 <__floatsidf>
c000d260:	83 c4 10             	add    esp,0x10
c000d263:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d267:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d26b:	52                   	push   edx
c000d26c:	50                   	push   eax
c000d26d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d271:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d275:	e8 f3 b2 01 00       	call   c002856d <__gedf2>
c000d27a:	83 c4 10             	add    esp,0x10
c000d27d:	85 c0                	test   eax,eax
c000d27f:	0f 89 49 ff ff ff    	jns    c000d1ce <sinc_stereo_vari_process+0x310>
c000d285:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000d289:	0f 8e ef 00 00 00    	jle    c000d37e <sinc_stereo_vari_process+0x4c0>
c000d28f:	83 ec 10             	sub    esp,0x10
c000d292:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d295:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d298:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000d29b:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000d29e:	e8 d1 a9 01 00       	call   c0027c74 <__subdf3>
c000d2a3:	83 c4 18             	add    esp,0x18
c000d2a6:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d2aa:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d2ae:	52                   	push   edx
c000d2af:	50                   	push   eax
c000d2b0:	e8 4b b4 01 00       	call   c0028700 <fabs>
c000d2b5:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d2b9:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d2bd:	83 c4 10             	add    esp,0x10
c000d2c0:	68 df 7c db 3d       	push   0x3ddb7cdf
c000d2c5:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000d2ca:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d2ce:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d2d2:	e8 7a b2 01 00       	call   c0028551 <__gtdf2>
c000d2d7:	83 c4 10             	add    esp,0x10
c000d2da:	85 c0                	test   eax,eax
c000d2dc:	0f 8e 9c 00 00 00    	jle    c000d37e <sinc_stereo_vari_process+0x4c0>
c000d2e2:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d2e5:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000d2e8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d2ec:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d2f0:	52                   	push   edx
c000d2f1:	50                   	push   eax
c000d2f2:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d2f5:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d2f8:	e8 77 a9 01 00       	call   c0027c74 <__subdf3>
c000d2fd:	59                   	pop    ecx
c000d2fe:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d302:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000d306:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000d309:	e8 f5 af 01 00       	call   c0028303 <__floatsidf>
c000d30e:	83 c4 10             	add    esp,0x10
c000d311:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d315:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d319:	52                   	push   edx
c000d31a:	50                   	push   eax
c000d31b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d31f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d323:	e8 78 a9 01 00       	call   c0027ca0 <__muldf3>
c000d328:	5f                   	pop    edi
c000d329:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d32d:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000d331:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000d334:	e8 ca af 01 00       	call   c0028303 <__floatsidf>
c000d339:	83 c4 10             	add    esp,0x10
c000d33c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d340:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d344:	52                   	push   edx
c000d345:	50                   	push   eax
c000d346:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d34a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d34e:	e8 31 ac 01 00       	call   c0027f84 <__divdf3>
c000d353:	83 c4 10             	add    esp,0x10
c000d356:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d35a:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d35e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d362:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d366:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d36a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d36e:	e8 b0 a2 01 00       	call   c0027623 <__adddf3>
c000d373:	83 c4 10             	add    esp,0x10
c000d376:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d37a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d37e:	83 ec 0c             	sub    esp,0xc
c000d381:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d384:	e8 7a af 01 00       	call   c0028303 <__floatsidf>
c000d389:	83 c4 10             	add    esp,0x10
c000d38c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d390:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d394:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d398:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d39c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d3a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d3a4:	e8 c6 b1 01 00       	call   c002856f <__ltdf2>
c000d3a9:	83 c4 10             	add    esp,0x10
c000d3ac:	85 c0                	test   eax,eax
c000d3ae:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d3b2:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000d3b6:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000d3ba:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000d3be:	78 10                	js     c000d3d0 <sinc_stereo_vari_process+0x512>
c000d3c0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000d3c4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000d3c8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d3cc:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d3d0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d3d4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d3d8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3dc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3e0:	e8 bb a8 01 00       	call   c0027ca0 <__muldf3>
c000d3e5:	59                   	pop    ecx
c000d3e6:	5f                   	pop    edi
c000d3e7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d3eb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d3ef:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d3f3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d3f7:	e8 d3 e4 ff ff       	call   c000b8cf <double_to_fp>
c000d3fc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d400:	89 c7                	mov    edi,eax
c000d402:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d406:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d40a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d40e:	e8 8d a8 01 00       	call   c0027ca0 <__muldf3>
c000d413:	83 c4 18             	add    esp,0x18
c000d416:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d41a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d41e:	52                   	push   edx
c000d41f:	50                   	push   eax
c000d420:	e8 aa e4 ff ff       	call   c000b8cf <double_to_fp>
c000d425:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000d428:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000d42c:	83 c4 0c             	add    esp,0xc
c000d42f:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000d432:	8d 04 90             	lea    eax,[eax+edx*4]
c000d435:	50                   	push   eax
c000d436:	50                   	push   eax
c000d437:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d43a:	e8 c4 ae 01 00       	call   c0028303 <__floatsidf>
c000d43f:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d443:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d447:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d44b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d44f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d453:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d457:	e8 28 ab 01 00       	call   c0027f84 <__divdf3>
c000d45c:	83 c4 18             	add    esp,0x18
c000d45f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d463:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d467:	52                   	push   edx
c000d468:	89 fa                	mov    edx,edi
c000d46a:	50                   	push   eax
c000d46b:	89 d8                	mov    eax,ebx
c000d46d:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000d471:	e8 02 c7 ff ff       	call   c0009b78 <calc_output_stereo>
c000d476:	83 43 14 02          	add    DWORD PTR [ebx+0x14],0x2
c000d47a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d47e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d482:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d486:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d48a:	e8 f5 aa 01 00       	call   c0027f84 <__divdf3>
c000d48f:	83 c4 10             	add    esp,0x10
c000d492:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d496:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d49a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d49e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d4a2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4a6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4aa:	e8 74 a1 01 00       	call   c0027623 <__adddf3>
c000d4af:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000d4b3:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000d4b7:	83 c4 18             	add    esp,0x18
c000d4ba:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d4be:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d4c2:	e8 59 b2 01 00       	call   c0028720 <lrint>
c000d4c7:	83 ec 0c             	sub    esp,0xc
c000d4ca:	50                   	push   eax
c000d4cb:	e8 33 ae 01 00       	call   c0028303 <__floatsidf>
c000d4d0:	83 c4 10             	add    esp,0x10
c000d4d3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d4d7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d4db:	52                   	push   edx
c000d4dc:	50                   	push   eax
c000d4dd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4e1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4e5:	e8 8a a7 01 00       	call   c0027c74 <__subdf3>
c000d4ea:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d4ee:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d4f2:	83 c4 20             	add    esp,0x20
c000d4f5:	6a 00                	push   0x0
c000d4f7:	6a 00                	push   0x0
c000d4f9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d4fd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d501:	e8 69 b0 01 00       	call   c002856f <__ltdf2>
c000d506:	83 c4 10             	add    esp,0x10
c000d509:	85 c0                	test   eax,eax
c000d50b:	79 20                	jns    c000d52d <sinc_stereo_vari_process+0x66f>
c000d50d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d511:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d515:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d519:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d51d:	e8 01 a1 01 00       	call   c0027623 <__adddf3>
c000d522:	83 c4 10             	add    esp,0x10
c000d525:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d529:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d52d:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000d530:	83 ec 10             	sub    esp,0x10
c000d533:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d537:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d53a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d53e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d542:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d546:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d54a:	e8 25 a7 01 00       	call   c0027c74 <__subdf3>
c000d54f:	83 c4 18             	add    esp,0x18
c000d552:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d556:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d55a:	52                   	push   edx
c000d55b:	50                   	push   eax
c000d55c:	e8 bf b1 01 00       	call   c0028720 <lrint>
c000d561:	0f af f8             	imul   edi,eax
c000d564:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000d568:	83 c4 10             	add    esp,0x10
c000d56b:	01 f8                	add    eax,edi
c000d56d:	99                   	cdq    
c000d56e:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d571:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d574:	e9 fd fb ff ff       	jmp    c000d176 <sinc_stereo_vari_process+0x2b8>
c000d579:	83 c4 4c             	add    esp,0x4c
c000d57c:	89 d0                	mov    eax,edx
c000d57e:	5b                   	pop    ebx
c000d57f:	5e                   	pop    esi
c000d580:	5f                   	pop    edi
c000d581:	5d                   	pop    ebp
c000d582:	c3                   	ret    

c000d583 <sinc_mono_vari_process>:
c000d583:	55                   	push   ebp
c000d584:	ba 05 00 00 00       	mov    edx,0x5
c000d589:	57                   	push   edi
c000d58a:	56                   	push   esi
c000d58b:	53                   	push   ebx
c000d58c:	83 ec 4c             	sub    esp,0x4c
c000d58f:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d593:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000d597:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000d59a:	85 db                	test   ebx,ebx
c000d59c:	0f 84 c1 06 00 00    	je     c000dc63 <sinc_mono_vari_process+0x6e0>
c000d5a2:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000d5a5:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d5a8:	0f af c7             	imul   eax,edi
c000d5ab:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000d5ae:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000d5b1:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000d5b8:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000d5bf:	0f af c7             	imul   eax,edi
c000d5c2:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000d5c5:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d5c9:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000d5cc:	8b 00                	mov    eax,DWORD PTR [eax]
c000d5ce:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d5d2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d5d6:	68 00 00 70 3f       	push   0x3f700000
c000d5db:	6a 00                	push   0x0
c000d5dd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5e1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5e5:	e8 85 af 01 00       	call   c002856f <__ltdf2>
c000d5ea:	83 c4 10             	add    esp,0x10
c000d5ed:	ba 16 00 00 00       	mov    edx,0x16
c000d5f2:	85 c0                	test   eax,eax
c000d5f4:	0f 88 69 06 00 00    	js     c000dc63 <sinc_mono_vari_process+0x6e0>
c000d5fa:	68 00 00 70 40       	push   0x40700000
c000d5ff:	6a 00                	push   0x0
c000d601:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d605:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d609:	e8 43 af 01 00       	call   c0028551 <__gtdf2>
c000d60e:	83 c4 10             	add    esp,0x10
c000d611:	ba 16 00 00 00       	mov    edx,0x16
c000d616:	85 c0                	test   eax,eax
c000d618:	0f 8f 45 06 00 00    	jg     c000dc63 <sinc_mono_vari_process+0x6e0>
c000d61e:	83 ec 0c             	sub    esp,0xc
c000d621:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000d624:	e8 da ac 01 00       	call   c0028303 <__floatsidf>
c000d629:	83 c4 10             	add    esp,0x10
c000d62c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d630:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d634:	68 00 00 00 40       	push   0x40000000
c000d639:	6a 00                	push   0x0
c000d63b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d63f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d643:	e8 db 9f 01 00       	call   c0027623 <__adddf3>
c000d648:	59                   	pop    ecx
c000d649:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000d64d:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000d651:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d654:	e8 aa ac 01 00       	call   c0028303 <__floatsidf>
c000d659:	83 c4 10             	add    esp,0x10
c000d65c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d660:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d664:	52                   	push   edx
c000d665:	50                   	push   eax
c000d666:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d66a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d66e:	e8 11 a9 01 00       	call   c0027f84 <__divdf3>
c000d673:	83 c4 10             	add    esp,0x10
c000d676:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d67a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d67e:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000d681:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000d684:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d688:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d68c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d690:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d694:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d698:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d69c:	e8 b0 ae 01 00       	call   c0028551 <__gtdf2>
c000d6a1:	83 c4 10             	add    esp,0x10
c000d6a4:	85 c0                	test   eax,eax
c000d6a6:	7e 2d                	jle    c000d6d5 <sinc_mono_vari_process+0x152>
c000d6a8:	68 00 00 f0 3f       	push   0x3ff00000
c000d6ad:	6a 00                	push   0x0
c000d6af:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d6b3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d6b7:	e8 b3 ae 01 00       	call   c002856f <__ltdf2>
c000d6bc:	83 c4 10             	add    esp,0x10
c000d6bf:	85 c0                	test   eax,eax
c000d6c1:	79 4d                	jns    c000d710 <sinc_mono_vari_process+0x18d>
c000d6c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d6c7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d6cb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d6cf:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d6d3:	eb 1b                	jmp    c000d6f0 <sinc_mono_vari_process+0x16d>
c000d6d5:	68 00 00 f0 3f       	push   0x3ff00000
c000d6da:	6a 00                	push   0x0
c000d6dc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d6e0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d6e4:	e8 86 ae 01 00       	call   c002856f <__ltdf2>
c000d6e9:	83 c4 10             	add    esp,0x10
c000d6ec:	85 c0                	test   eax,eax
c000d6ee:	79 20                	jns    c000d710 <sinc_mono_vari_process+0x18d>
c000d6f0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d6f4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d6f8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d6fc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d700:	e8 7f a8 01 00       	call   c0027f84 <__divdf3>
c000d705:	83 c4 10             	add    esp,0x10
c000d708:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d70c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d710:	50                   	push   eax
c000d711:	50                   	push   eax
c000d712:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d716:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d71a:	e8 01 b0 01 00       	call   c0028720 <lrint>
c000d71f:	40                   	inc    eax
c000d720:	0f af c7             	imul   eax,edi
c000d723:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d727:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d72b:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000d72e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000d731:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d735:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d739:	58                   	pop    eax
c000d73a:	5a                   	pop    edx
c000d73b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d73f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d743:	e8 d8 af 01 00       	call   c0028720 <lrint>
c000d748:	83 ec 0c             	sub    esp,0xc
c000d74b:	50                   	push   eax
c000d74c:	e8 b2 ab 01 00       	call   c0028303 <__floatsidf>
c000d751:	83 c4 10             	add    esp,0x10
c000d754:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d758:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d75c:	52                   	push   edx
c000d75d:	50                   	push   eax
c000d75e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d762:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d766:	e8 09 a5 01 00       	call   c0027c74 <__subdf3>
c000d76b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d76f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d773:	83 c4 20             	add    esp,0x20
c000d776:	6a 00                	push   0x0
c000d778:	6a 00                	push   0x0
c000d77a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d77e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d782:	e8 e8 ad 01 00       	call   c002856f <__ltdf2>
c000d787:	83 c4 10             	add    esp,0x10
c000d78a:	85 c0                	test   eax,eax
c000d78c:	79 1f                	jns    c000d7ad <sinc_mono_vari_process+0x22a>
c000d78e:	68 00 00 f0 3f       	push   0x3ff00000
c000d793:	6a 00                	push   0x0
c000d795:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d799:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d79d:	e8 81 9e 01 00       	call   c0027623 <__adddf3>
c000d7a2:	83 c4 10             	add    esp,0x10
c000d7a5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d7a9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d7ad:	8b 6b 34             	mov    ebp,DWORD PTR [ebx+0x34]
c000d7b0:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d7b3:	83 ec 10             	sub    esp,0x10
c000d7b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d7ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d7be:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7c2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7c6:	e8 a9 a4 01 00       	call   c0027c74 <__subdf3>
c000d7cb:	83 c4 18             	add    esp,0x18
c000d7ce:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d7d2:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d7d6:	52                   	push   edx
c000d7d7:	50                   	push   eax
c000d7d8:	e8 43 af 01 00       	call   c0028720 <lrint>
c000d7dd:	0f af f8             	imul   edi,eax
c000d7e0:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000d7e3:	31 ff                	xor    edi,edi
c000d7e5:	bd 00 00 f0 3f       	mov    ebp,0x3ff00000
c000d7ea:	99                   	cdq    
c000d7eb:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d7ee:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d7f1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d7f5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d7f9:	55                   	push   ebp
c000d7fa:	57                   	push   edi
c000d7fb:	e8 84 a7 01 00       	call   c0027f84 <__divdf3>
c000d800:	83 c4 10             	add    esp,0x10
c000d803:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d807:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d80b:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000d810:	68 23 42 92 0c       	push   0xc924223
c000d815:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d819:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d81d:	e8 01 9e 01 00       	call   c0027623 <__adddf3>
c000d822:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000d826:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c000d82a:	83 c4 20             	add    esp,0x20
c000d82d:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000d831:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c000d835:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000d838:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000d83b:	7d 54                	jge    c000d891 <sinc_mono_vari_process+0x30e>
c000d83d:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d840:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d843:	01 c8                	add    eax,ecx
c000d845:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d848:	99                   	cdq    
c000d849:	f7 f9                	idiv   ecx
c000d84b:	39 54 24 24          	cmp    DWORD PTR [esp+0x24],edx
c000d84f:	7d 0c                	jge    c000d85d <sinc_mono_vari_process+0x2da>
c000d851:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000d854:	85 ff                	test   edi,edi
c000d856:	79 73                	jns    c000d8cb <sinc_mono_vari_process+0x348>
c000d858:	e9 ee 00 00 00       	jmp    c000d94b <sinc_mono_vari_process+0x3c8>
c000d85d:	50                   	push   eax
c000d85e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000d862:	56                   	push   esi
c000d863:	53                   	push   ebx
c000d864:	e8 8d e0 ff ff       	call   c000b8f6 <prepare_data>
c000d869:	89 c2                	mov    edx,eax
c000d86b:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d86f:	83 c4 10             	add    esp,0x10
c000d872:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000d875:	85 d2                	test   edx,edx
c000d877:	0f 85 e6 03 00 00    	jne    c000dc63 <sinc_mono_vari_process+0x6e0>
c000d87d:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d880:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d883:	01 c8                	add    eax,ecx
c000d885:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d888:	99                   	cdq    
c000d889:	f7 f9                	idiv   ecx
c000d88b:	39 54 24 24          	cmp    DWORD PTR [esp+0x24],edx
c000d88f:	7c c0                	jl     c000d851 <sinc_mono_vari_process+0x2ce>
c000d891:	8b 4c 24 60          	mov    ecx,DWORD PTR [esp+0x60]
c000d895:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d899:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d89d:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c000d8a0:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c000d8a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d8a7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d8ab:	89 01                	mov    DWORD PTR [ecx],eax
c000d8ad:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000d8b0:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000d8b3:	99                   	cdq    
c000d8b4:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d8b7:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000d8ba:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000d8bd:	99                   	cdq    
c000d8be:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d8c1:	31 d2                	xor    edx,edx
c000d8c3:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000d8c6:	e9 98 03 00 00       	jmp    c000dc63 <sinc_mono_vari_process+0x6e0>
c000d8cb:	83 ec 0c             	sub    esp,0xc
c000d8ce:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000d8d1:	e8 2d aa 01 00       	call   c0028303 <__floatsidf>
c000d8d6:	83 c4 10             	add    esp,0x10
c000d8d9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d8dd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d8e1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d8e5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d8e9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8ed:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8f1:	e8 2d 9d 01 00       	call   c0027623 <__adddf3>
c000d8f6:	83 c4 10             	add    esp,0x10
c000d8f9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d8fd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d901:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d905:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d909:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d90d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d911:	e8 0d 9d 01 00       	call   c0027623 <__adddf3>
c000d916:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d919:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d91d:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d921:	e8 dd a9 01 00       	call   c0028303 <__floatsidf>
c000d926:	83 c4 10             	add    esp,0x10
c000d929:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d92d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d931:	52                   	push   edx
c000d932:	50                   	push   eax
c000d933:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d937:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d93b:	e8 11 ac 01 00       	call   c0028551 <__gtdf2>
c000d940:	83 c4 10             	add    esp,0x10
c000d943:	85 c0                	test   eax,eax
c000d945:	0f 8f 46 ff ff ff    	jg     c000d891 <sinc_mono_vari_process+0x30e>
c000d94b:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000d94f:	0f 8e f5 00 00 00    	jle    c000da4a <sinc_mono_vari_process+0x4c7>
c000d955:	83 ec 10             	sub    esp,0x10
c000d958:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d95b:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d95e:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c000d962:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000d965:	ff 30                	push   DWORD PTR [eax]
c000d967:	e8 08 a3 01 00       	call   c0027c74 <__subdf3>
c000d96c:	83 c4 18             	add    esp,0x18
c000d96f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d973:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d977:	52                   	push   edx
c000d978:	50                   	push   eax
c000d979:	e8 82 ad 01 00       	call   c0028700 <fabs>
c000d97e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d982:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d986:	83 c4 10             	add    esp,0x10
c000d989:	68 df 7c db 3d       	push   0x3ddb7cdf
c000d98e:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000d993:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d997:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d99b:	e8 b1 ab 01 00       	call   c0028551 <__gtdf2>
c000d9a0:	83 c4 10             	add    esp,0x10
c000d9a3:	85 c0                	test   eax,eax
c000d9a5:	0f 8e 9f 00 00 00    	jle    c000da4a <sinc_mono_vari_process+0x4c7>
c000d9ab:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d9af:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000d9b2:	8b 00                	mov    eax,DWORD PTR [eax]
c000d9b4:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d9b8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d9bc:	52                   	push   edx
c000d9bd:	50                   	push   eax
c000d9be:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d9c1:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d9c4:	e8 ab a2 01 00       	call   c0027c74 <__subdf3>
c000d9c9:	5f                   	pop    edi
c000d9ca:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d9ce:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000d9d2:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000d9d5:	e8 29 a9 01 00       	call   c0028303 <__floatsidf>
c000d9da:	83 c4 10             	add    esp,0x10
c000d9dd:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d9e1:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d9e5:	52                   	push   edx
c000d9e6:	50                   	push   eax
c000d9e7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9eb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9ef:	e8 ac a2 01 00       	call   c0027ca0 <__muldf3>
c000d9f4:	5d                   	pop    ebp
c000d9f5:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d9f9:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000d9fd:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000da00:	e8 fe a8 01 00       	call   c0028303 <__floatsidf>
c000da05:	83 c4 10             	add    esp,0x10
c000da08:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000da0c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000da10:	52                   	push   edx
c000da11:	50                   	push   eax
c000da12:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da16:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da1a:	e8 65 a5 01 00       	call   c0027f84 <__divdf3>
c000da1f:	83 c4 10             	add    esp,0x10
c000da22:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000da26:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000da2a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000da2e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000da32:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da36:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da3a:	e8 e4 9b 01 00       	call   c0027623 <__adddf3>
c000da3f:	83 c4 10             	add    esp,0x10
c000da42:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000da46:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000da4a:	83 ec 0c             	sub    esp,0xc
c000da4d:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000da50:	e8 ae a8 01 00       	call   c0028303 <__floatsidf>
c000da55:	83 c4 10             	add    esp,0x10
c000da58:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000da5c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000da60:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da64:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da68:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da6c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da70:	e8 fa aa 01 00       	call   c002856f <__ltdf2>
c000da75:	83 c4 10             	add    esp,0x10
c000da78:	85 c0                	test   eax,eax
c000da7a:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000da7e:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c000da82:	89 7c 24 28          	mov    DWORD PTR [esp+0x28],edi
c000da86:	89 6c 24 2c          	mov    DWORD PTR [esp+0x2c],ebp
c000da8a:	78 10                	js     c000da9c <sinc_mono_vari_process+0x519>
c000da8c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000da90:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000da94:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000da98:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000da9c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000daa0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000daa4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000daa8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000daac:	e8 ef a1 01 00       	call   c0027ca0 <__muldf3>
c000dab1:	59                   	pop    ecx
c000dab2:	5f                   	pop    edi
c000dab3:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000dab7:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000dabb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dabf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dac3:	e8 07 de ff ff       	call   c000b8cf <double_to_fp>
c000dac8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000dacc:	89 c7                	mov    edi,eax
c000dace:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000dad2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000dad6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000dada:	e8 c1 a1 01 00       	call   c0027ca0 <__muldf3>
c000dadf:	83 c4 18             	add    esp,0x18
c000dae2:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000dae6:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000daea:	52                   	push   edx
c000daeb:	50                   	push   eax
c000daec:	e8 de dd ff ff       	call   c000b8cf <double_to_fp>
c000daf1:	83 ec 0c             	sub    esp,0xc
c000daf4:	89 c5                	mov    ebp,eax
c000daf6:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000daf9:	e8 05 a8 01 00       	call   c0028303 <__floatsidf>
c000dafe:	83 c4 10             	add    esp,0x10
c000db01:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000db05:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000db09:	52                   	push   edx
c000db0a:	50                   	push   eax
c000db0b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db0f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db13:	e8 6c a4 01 00       	call   c0027f84 <__divdf3>
c000db18:	83 c4 10             	add    esp,0x10
c000db1b:	89 e9                	mov    ecx,ebp
c000db1d:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000db21:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000db25:	89 d8                	mov    eax,ebx
c000db27:	89 fa                	mov    edx,edi
c000db29:	e8 ee bd ff ff       	call   c000991c <calc_output_single>
c000db2e:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c000db31:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c000db34:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000db38:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000db3c:	52                   	push   edx
c000db3d:	50                   	push   eax
c000db3e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000db42:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000db46:	e8 55 a1 01 00       	call   c0027ca0 <__muldf3>
c000db4b:	59                   	pop    ecx
c000db4c:	59                   	pop    ecx
c000db4d:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000db51:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000db55:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db59:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db5d:	e8 11 aa 01 00       	call   c0028573 <__truncdfsf2>
c000db62:	83 c4 10             	add    esp,0x10
c000db65:	89 04 af             	mov    DWORD PTR [edi+ebp*4],eax
c000db68:	ff 43 14             	inc    DWORD PTR [ebx+0x14]
c000db6b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000db6f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000db73:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db77:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db7b:	e8 04 a4 01 00       	call   c0027f84 <__divdf3>
c000db80:	83 c4 10             	add    esp,0x10
c000db83:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000db87:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000db8b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db8f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db93:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db97:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db9b:	e8 83 9a 01 00       	call   c0027623 <__adddf3>
c000dba0:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000dba4:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000dba8:	83 c4 18             	add    esp,0x18
c000dbab:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dbaf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dbb3:	e8 68 ab 01 00       	call   c0028720 <lrint>
c000dbb8:	83 ec 0c             	sub    esp,0xc
c000dbbb:	50                   	push   eax
c000dbbc:	e8 42 a7 01 00       	call   c0028303 <__floatsidf>
c000dbc1:	83 c4 10             	add    esp,0x10
c000dbc4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dbc8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dbcc:	52                   	push   edx
c000dbcd:	50                   	push   eax
c000dbce:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dbd2:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dbd6:	e8 99 a0 01 00       	call   c0027c74 <__subdf3>
c000dbdb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000dbdf:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000dbe3:	83 c4 20             	add    esp,0x20
c000dbe6:	6a 00                	push   0x0
c000dbe8:	6a 00                	push   0x0
c000dbea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbf2:	e8 78 a9 01 00       	call   c002856f <__ltdf2>
c000dbf7:	83 c4 10             	add    esp,0x10
c000dbfa:	85 c0                	test   eax,eax
c000dbfc:	79 20                	jns    c000dc1e <sinc_mono_vari_process+0x69b>
c000dbfe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc02:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc06:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dc0a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dc0e:	e8 10 9a 01 00       	call   c0027623 <__adddf3>
c000dc13:	83 c4 10             	add    esp,0x10
c000dc16:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dc1a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dc1e:	8b 6b 34             	mov    ebp,DWORD PTR [ebx+0x34]
c000dc21:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000dc24:	83 ec 10             	sub    esp,0x10
c000dc27:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc2b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc2f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dc33:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dc37:	e8 38 a0 01 00       	call   c0027c74 <__subdf3>
c000dc3c:	83 c4 18             	add    esp,0x18
c000dc3f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000dc43:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000dc47:	52                   	push   edx
c000dc48:	50                   	push   eax
c000dc49:	e8 d2 aa 01 00       	call   c0028720 <lrint>
c000dc4e:	83 c4 10             	add    esp,0x10
c000dc51:	0f af f8             	imul   edi,eax
c000dc54:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000dc57:	99                   	cdq    
c000dc58:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000dc5b:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000dc5e:	e9 d2 fb ff ff       	jmp    c000d835 <sinc_mono_vari_process+0x2b2>
c000dc63:	83 c4 4c             	add    esp,0x4c
c000dc66:	89 d0                	mov    eax,edx
c000dc68:	5b                   	pop    ebx
c000dc69:	5e                   	pop    esi
c000dc6a:	5f                   	pop    edi
c000dc6b:	5d                   	pop    ebp
c000dc6c:	c3                   	ret    

c000dc6d <sinc_get_name>:
c000dc6d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000dc71:	31 c0                	xor    eax,eax
c000dc73:	83 fa 02             	cmp    edx,0x2
c000dc76:	77 07                	ja     c000dc7f <sinc_get_name+0x12>
c000dc78:	8b 04 95 04 9f 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd60fc]
c000dc7f:	c3                   	ret    

c000dc80 <sinc_get_description>:
c000dc80:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000dc84:	31 c0                	xor    eax,eax
c000dc86:	83 fa 02             	cmp    edx,0x2
c000dc89:	77 07                	ja     c000dc92 <sinc_get_description+0x12>
c000dc8b:	8b 04 95 f8 9e 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd6108]
c000dc92:	c3                   	ret    

c000dc93 <sinc_set_converter>:
c000dc93:	53                   	push   ebx
c000dc94:	81 ec 58 08 00 00    	sub    esp,0x858
c000dc9a:	8b 9c 24 60 08 00 00 	mov    ebx,DWORD PTR [esp+0x860]
c000dca1:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000dca4:	85 c0                	test   eax,eax
c000dca6:	74 13                	je     c000dcbb <sinc_set_converter+0x28>
c000dca8:	83 ec 0c             	sub    esp,0xc
c000dcab:	50                   	push   eax
c000dcac:	e8 43 1c 00 00       	call   c000f8f4 <free>
c000dcb1:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000dcb8:	83 c4 10             	add    esp,0x10
c000dcbb:	50                   	push   eax
c000dcbc:	68 44 08 00 00       	push   0x844
c000dcc1:	6a 00                	push   0x0
c000dcc3:	8d 44 24 18          	lea    eax,[esp+0x18]
c000dcc7:	50                   	push   eax
c000dcc8:	e8 ab 2a ff ff       	call   c0000778 <memset>
c000dccd:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000dcd0:	83 c4 10             	add    esp,0x10
c000dcd3:	b8 0b 00 00 00       	mov    eax,0xb
c000dcd8:	81 fa 80 00 00 00    	cmp    edx,0x80
c000dcde:	7f 6e                	jg     c000dd4e <sinc_set_converter+0xbb>
c000dce0:	83 fa 01             	cmp    edx,0x1
c000dce3:	75 10                	jne    c000dcf5 <sinc_set_converter+0x62>
c000dce5:	c7 43 24 83 d5 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000d583
c000dcec:	c7 43 20 83 d5 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000d583
c000dcf3:	eb 4d                	jmp    c000dd42 <sinc_set_converter+0xaf>
c000dcf5:	83 fa 02             	cmp    edx,0x2
c000dcf8:	75 10                	jne    c000dd0a <sinc_set_converter+0x77>
c000dcfa:	c7 43 24 be ce 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000cebe
c000dd01:	c7 43 20 be ce 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000cebe
c000dd08:	eb 38                	jmp    c000dd42 <sinc_set_converter+0xaf>
c000dd0a:	83 fa 04             	cmp    edx,0x4
c000dd0d:	75 10                	jne    c000dd1f <sinc_set_converter+0x8c>
c000dd0f:	c7 43 24 f9 c7 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000c7f9
c000dd16:	c7 43 20 f9 c7 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000c7f9
c000dd1d:	eb 23                	jmp    c000dd42 <sinc_set_converter+0xaf>
c000dd1f:	83 fa 06             	cmp    edx,0x6
c000dd22:	75 10                	jne    c000dd34 <sinc_set_converter+0xa1>
c000dd24:	c7 43 24 34 c1 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000c134
c000dd2b:	c7 43 20 34 c1 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000c134
c000dd32:	eb 0e                	jmp    c000dd42 <sinc_set_converter+0xaf>
c000dd34:	c7 43 24 70 ba 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000ba70
c000dd3b:	c7 43 20 70 ba 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000ba70
c000dd42:	c7 43 28 23 ad 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000ad23
c000dd49:	b8 0a 00 00 00       	mov    eax,0xa
c000dd4e:	81 c4 58 08 00 00    	add    esp,0x858
c000dd54:	5b                   	pop    ebx
c000dd55:	c3                   	ret    

c000dd56 <zoh_vari_process>:
c000dd56:	55                   	push   ebp
c000dd57:	31 d2                	xor    edx,edx
c000dd59:	57                   	push   edi
c000dd5a:	56                   	push   esi
c000dd5b:	53                   	push   ebx
c000dd5c:	83 ec 3c             	sub    esp,0x3c
c000dd5f:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000dd63:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c000dd67:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c000dd6b:	0f 8e 80 06 00 00    	jle    c000e3f1 <zoh_vari_process+0x69b>
c000dd71:	8b 5f 1c             	mov    ebx,DWORD PTR [edi+0x1c]
c000dd74:	ba 05 00 00 00       	mov    edx,0x5
c000dd79:	85 db                	test   ebx,ebx
c000dd7b:	0f 84 70 06 00 00    	je     c000e3f1 <zoh_vari_process+0x69b>
c000dd81:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000dd84:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000dd88:	74 19                	je     c000dda3 <zoh_vari_process+0x4d>
c000dd8a:	31 d2                	xor    edx,edx
c000dd8c:	39 c2                	cmp    edx,eax
c000dd8e:	7d 0c                	jge    c000dd9c <zoh_vari_process+0x46>
c000dd90:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000dd92:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c000dd95:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c000dd99:	42                   	inc    edx
c000dd9a:	eb f0                	jmp    c000dd8c <zoh_vari_process+0x36>
c000dd9c:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000dda3:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000dda6:	0f af d0             	imul   edx,eax
c000dda9:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000ddac:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c000ddb0:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000ddb7:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000ddba:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000ddc1:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000ddc4:	8b 07                	mov    eax,DWORD PTR [edi]
c000ddc6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ddca:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ddce:	68 00 00 70 3f       	push   0x3f700000
c000ddd3:	6a 00                	push   0x0
c000ddd5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ddd9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dddd:	e8 8d a7 01 00       	call   c002856f <__ltdf2>
c000dde2:	83 c4 10             	add    esp,0x10
c000dde5:	ba 16 00 00 00       	mov    edx,0x16
c000ddea:	85 c0                	test   eax,eax
c000ddec:	0f 88 ff 05 00 00    	js     c000e3f1 <zoh_vari_process+0x69b>
c000ddf2:	68 00 00 70 40       	push   0x40700000
c000ddf7:	6a 00                	push   0x0
c000ddf9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ddfd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de01:	e8 4b a7 01 00       	call   c0028551 <__gtdf2>
c000de06:	83 c4 10             	add    esp,0x10
c000de09:	ba 16 00 00 00       	mov    edx,0x16
c000de0e:	85 c0                	test   eax,eax
c000de10:	0f 8f db 05 00 00    	jg     c000e3f1 <zoh_vari_process+0x69b>
c000de16:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000de19:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c000de1c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000de20:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000de24:	68 00 00 f0 3f       	push   0x3ff00000
c000de29:	6a 00                	push   0x0
c000de2b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000de2f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000de33:	e8 37 a7 01 00       	call   c002856f <__ltdf2>
c000de38:	83 c4 10             	add    esp,0x10
c000de3b:	85 c0                	test   eax,eax
c000de3d:	0f 89 da 01 00 00    	jns    c000e01d <zoh_vari_process+0x2c7>
c000de43:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c000de46:	39 6b 18             	cmp    DWORD PTR [ebx+0x18],ebp
c000de49:	0f 8d ce 01 00 00    	jge    c000e01d <zoh_vari_process+0x2c7>
c000de4f:	83 ec 0c             	sub    esp,0xc
c000de52:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000de55:	e8 a9 a4 01 00       	call   c0028303 <__floatsidf>
c000de5a:	83 c4 10             	add    esp,0x10
c000de5d:	89 04 24             	mov    DWORD PTR [esp],eax
c000de60:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000de64:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de68:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de6c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de70:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de74:	e8 27 9e 01 00       	call   c0027ca0 <__muldf3>
c000de79:	59                   	pop    ecx
c000de7a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000de7e:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000de82:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000de85:	e8 79 a4 01 00       	call   c0028303 <__floatsidf>
c000de8a:	83 c4 10             	add    esp,0x10
c000de8d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000de91:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000de95:	52                   	push   edx
c000de96:	50                   	push   eax
c000de97:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de9b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de9f:	e8 7f 97 01 00       	call   c0027623 <__adddf3>
c000dea4:	59                   	pop    ecx
c000dea5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000dea9:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000dead:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c000deb0:	e8 4e a4 01 00       	call   c0028303 <__floatsidf>
c000deb5:	83 c4 10             	add    esp,0x10
c000deb8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000debc:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dec0:	52                   	push   edx
c000dec1:	50                   	push   eax
c000dec2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dec6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000deca:	e8 9e a6 01 00       	call   c002856d <__gedf2>
c000decf:	83 c4 10             	add    esp,0x10
c000ded2:	85 c0                	test   eax,eax
c000ded4:	0f 89 43 01 00 00    	jns    c000e01d <zoh_vari_process+0x2c7>
c000deda:	85 ed                	test   ebp,ebp
c000dedc:	0f 8e ec 00 00 00    	jle    c000dfce <zoh_vari_process+0x278>
c000dee2:	83 ec 10             	sub    esp,0x10
c000dee5:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000dee8:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000deeb:	ff 77 04             	push   DWORD PTR [edi+0x4]
c000deee:	ff 37                	push   DWORD PTR [edi]
c000def0:	e8 7f 9d 01 00       	call   c0027c74 <__subdf3>
c000def5:	83 c4 18             	add    esp,0x18
c000def8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000defc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000df00:	52                   	push   edx
c000df01:	50                   	push   eax
c000df02:	e8 f9 a7 01 00       	call   c0028700 <fabs>
c000df07:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000df0b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000df0f:	83 c4 10             	add    esp,0x10
c000df12:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000df17:	68 23 42 92 0c       	push   0xc924223
c000df1c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000df20:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000df24:	e8 28 a6 01 00       	call   c0028551 <__gtdf2>
c000df29:	83 c4 10             	add    esp,0x10
c000df2c:	85 c0                	test   eax,eax
c000df2e:	0f 8e 9a 00 00 00    	jle    c000dfce <zoh_vari_process+0x278>
c000df34:	8b 07                	mov    eax,DWORD PTR [edi]
c000df36:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000df39:	89 04 24             	mov    DWORD PTR [esp],eax
c000df3c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000df40:	52                   	push   edx
c000df41:	50                   	push   eax
c000df42:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000df45:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000df48:	e8 27 9d 01 00       	call   c0027c74 <__subdf3>
c000df4d:	59                   	pop    ecx
c000df4e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000df52:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000df56:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000df59:	e8 a5 a3 01 00       	call   c0028303 <__floatsidf>
c000df5e:	83 c4 10             	add    esp,0x10
c000df61:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000df65:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000df69:	52                   	push   edx
c000df6a:	50                   	push   eax
c000df6b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df6f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df73:	e8 28 9d 01 00       	call   c0027ca0 <__muldf3>
c000df78:	5d                   	pop    ebp
c000df79:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000df7d:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000df81:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000df84:	e8 7a a3 01 00       	call   c0028303 <__floatsidf>
c000df89:	83 c4 10             	add    esp,0x10
c000df8c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000df90:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000df94:	52                   	push   edx
c000df95:	50                   	push   eax
c000df96:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df9a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df9e:	e8 e1 9f 01 00       	call   c0027f84 <__divdf3>
c000dfa3:	83 c4 10             	add    esp,0x10
c000dfa6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dfaa:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dfae:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000dfb2:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000dfb6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dfba:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dfbe:	e8 60 96 01 00       	call   c0027623 <__adddf3>
c000dfc3:	83 c4 10             	add    esp,0x10
c000dfc6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dfca:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dfce:	31 c0                	xor    eax,eax
c000dfd0:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c000dfd3:	7e 13                	jle    c000dfe8 <zoh_vari_process+0x292>
c000dfd5:	8b 6c 83 1c          	mov    ebp,DWORD PTR [ebx+eax*4+0x1c]
c000dfd9:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000dfdc:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000dfdf:	40                   	inc    eax
c000dfe0:	89 2c 8a             	mov    DWORD PTR [edx+ecx*4],ebp
c000dfe3:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000dfe6:	eb e8                	jmp    c000dfd0 <zoh_vari_process+0x27a>
c000dfe8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dfec:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dff0:	68 00 00 f0 3f       	push   0x3ff00000
c000dff5:	6a 00                	push   0x0
c000dff7:	e8 88 9f 01 00       	call   c0027f84 <__divdf3>
c000dffc:	83 c4 10             	add    esp,0x10
c000dfff:	89 04 24             	mov    DWORD PTR [esp],eax
c000e002:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e006:	52                   	push   edx
c000e007:	50                   	push   eax
c000e008:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e00c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e010:	e8 0e 96 01 00       	call   c0027623 <__adddf3>
c000e015:	83 c4 10             	add    esp,0x10
c000e018:	e9 ff fd ff ff       	jmp    c000de1c <zoh_vari_process+0xc6>
c000e01d:	55                   	push   ebp
c000e01e:	55                   	push   ebp
c000e01f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e023:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e027:	e8 f4 a6 01 00       	call   c0028720 <lrint>
c000e02c:	83 ec 0c             	sub    esp,0xc
c000e02f:	50                   	push   eax
c000e030:	e8 ce a2 01 00       	call   c0028303 <__floatsidf>
c000e035:	83 c4 10             	add    esp,0x10
c000e038:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e03c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e040:	52                   	push   edx
c000e041:	50                   	push   eax
c000e042:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e046:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e04a:	e8 25 9c 01 00       	call   c0027c74 <__subdf3>
c000e04f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e053:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e057:	83 c4 20             	add    esp,0x20
c000e05a:	6a 00                	push   0x0
c000e05c:	6a 00                	push   0x0
c000e05e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e062:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e066:	e8 04 a5 01 00       	call   c002856f <__ltdf2>
c000e06b:	83 c4 10             	add    esp,0x10
c000e06e:	85 c0                	test   eax,eax
c000e070:	79 1e                	jns    c000e090 <zoh_vari_process+0x33a>
c000e072:	68 00 00 f0 3f       	push   0x3ff00000
c000e077:	6a 00                	push   0x0
c000e079:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e07d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e081:	e8 9d 95 01 00       	call   c0027623 <__adddf3>
c000e086:	83 c4 10             	add    esp,0x10
c000e089:	89 04 24             	mov    DWORD PTR [esp],eax
c000e08c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e090:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000e093:	83 ec 10             	sub    esp,0x10
c000e096:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e09a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e09e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e0a2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e0a6:	e8 c9 9b 01 00       	call   c0027c74 <__subdf3>
c000e0ab:	83 c4 18             	add    esp,0x18
c000e0ae:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e0b2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e0b6:	52                   	push   edx
c000e0b7:	50                   	push   eax
c000e0b8:	e8 63 a6 01 00       	call   c0028720 <lrint>
c000e0bd:	83 c4 10             	add    esp,0x10
c000e0c0:	0f af e8             	imul   ebp,eax
c000e0c3:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000e0c6:	01 6b 10             	add    DWORD PTR [ebx+0x10],ebp
c000e0c9:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c000e0cd:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e0d0:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000e0d3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e0d7:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c000e0da:	0f 8d 7a 02 00 00    	jge    c000e35a <zoh_vari_process+0x604>
c000e0e0:	83 ec 0c             	sub    esp,0xc
c000e0e3:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e0e6:	e8 18 a2 01 00       	call   c0028303 <__floatsidf>
c000e0eb:	83 c4 10             	add    esp,0x10
c000e0ee:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e0f2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e0f6:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e0fa:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e0fe:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e102:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e106:	e8 95 9b 01 00       	call   c0027ca0 <__muldf3>
c000e10b:	59                   	pop    ecx
c000e10c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000e110:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000e114:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e118:	e8 e6 a1 01 00       	call   c0028303 <__floatsidf>
c000e11d:	83 c4 10             	add    esp,0x10
c000e120:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e124:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e128:	52                   	push   edx
c000e129:	50                   	push   eax
c000e12a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e12e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e132:	e8 ec 94 01 00       	call   c0027623 <__adddf3>
c000e137:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000e13a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000e13e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e142:	e8 bc a1 01 00       	call   c0028303 <__floatsidf>
c000e147:	83 c4 10             	add    esp,0x10
c000e14a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e14e:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e152:	52                   	push   edx
c000e153:	50                   	push   eax
c000e154:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e158:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e15c:	e8 10 a4 01 00       	call   c0028571 <__ledf2>
c000e161:	83 c4 10             	add    esp,0x10
c000e164:	85 c0                	test   eax,eax
c000e166:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000e16a:	0f 8f ea 01 00 00    	jg     c000e35a <zoh_vari_process+0x604>
c000e170:	85 c9                	test   ecx,ecx
c000e172:	0f 8e ed 00 00 00    	jle    c000e265 <zoh_vari_process+0x50f>
c000e178:	83 ec 10             	sub    esp,0x10
c000e17b:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000e17e:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000e181:	ff 77 04             	push   DWORD PTR [edi+0x4]
c000e184:	ff 37                	push   DWORD PTR [edi]
c000e186:	e8 e9 9a 01 00       	call   c0027c74 <__subdf3>
c000e18b:	83 c4 18             	add    esp,0x18
c000e18e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e192:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e196:	52                   	push   edx
c000e197:	50                   	push   eax
c000e198:	e8 63 a5 01 00       	call   c0028700 <fabs>
c000e19d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e1a1:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e1a5:	83 c4 10             	add    esp,0x10
c000e1a8:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000e1ad:	68 23 42 92 0c       	push   0xc924223
c000e1b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1ba:	e8 92 a3 01 00       	call   c0028551 <__gtdf2>
c000e1bf:	83 c4 10             	add    esp,0x10
c000e1c2:	85 c0                	test   eax,eax
c000e1c4:	0f 8e 9b 00 00 00    	jle    c000e265 <zoh_vari_process+0x50f>
c000e1ca:	8b 07                	mov    eax,DWORD PTR [edi]
c000e1cc:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000e1cf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e1d3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e1d7:	52                   	push   edx
c000e1d8:	50                   	push   eax
c000e1d9:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000e1dc:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000e1df:	e8 90 9a 01 00       	call   c0027c74 <__subdf3>
c000e1e4:	5d                   	pop    ebp
c000e1e5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e1e9:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000e1ed:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000e1f0:	e8 0e a1 01 00       	call   c0028303 <__floatsidf>
c000e1f5:	83 c4 10             	add    esp,0x10
c000e1f8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e1fc:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e200:	52                   	push   edx
c000e201:	50                   	push   eax
c000e202:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e206:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e20a:	e8 91 9a 01 00       	call   c0027ca0 <__muldf3>
c000e20f:	59                   	pop    ecx
c000e210:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e214:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000e218:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000e21b:	e8 e3 a0 01 00       	call   c0028303 <__floatsidf>
c000e220:	83 c4 10             	add    esp,0x10
c000e223:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e227:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e22b:	52                   	push   edx
c000e22c:	50                   	push   eax
c000e22d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e231:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e235:	e8 4a 9d 01 00       	call   c0027f84 <__divdf3>
c000e23a:	83 c4 10             	add    esp,0x10
c000e23d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e241:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e245:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e249:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e24d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e251:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e255:	e8 c9 93 01 00       	call   c0027623 <__adddf3>
c000e25a:	83 c4 10             	add    esp,0x10
c000e25d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e261:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e265:	31 d2                	xor    edx,edx
c000e267:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000e26a:	39 d0                	cmp    eax,edx
c000e26c:	7e 1d                	jle    c000e28b <zoh_vari_process+0x535>
c000e26e:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c000e271:	29 c1                	sub    ecx,eax
c000e273:	89 c8                	mov    eax,ecx
c000e275:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000e277:	01 d0                	add    eax,edx
c000e279:	42                   	inc    edx
c000e27a:	8b 2c 81             	mov    ebp,DWORD PTR [ecx+eax*4]
c000e27d:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000e280:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000e283:	89 2c 88             	mov    DWORD PTR [eax+ecx*4],ebp
c000e286:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000e289:	eb dc                	jmp    c000e267 <zoh_vari_process+0x511>
c000e28b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e28f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e293:	68 00 00 f0 3f       	push   0x3ff00000
c000e298:	6a 00                	push   0x0
c000e29a:	e8 e5 9c 01 00       	call   c0027f84 <__divdf3>
c000e29f:	83 c4 10             	add    esp,0x10
c000e2a2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e2a6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e2aa:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e2ae:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e2b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2ba:	e8 64 93 01 00       	call   c0027623 <__adddf3>
c000e2bf:	5d                   	pop    ebp
c000e2c0:	59                   	pop    ecx
c000e2c1:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e2c5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e2c9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2cd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2d1:	e8 4a a4 01 00       	call   c0028720 <lrint>
c000e2d6:	83 ec 0c             	sub    esp,0xc
c000e2d9:	50                   	push   eax
c000e2da:	e8 24 a0 01 00       	call   c0028303 <__floatsidf>
c000e2df:	83 c4 10             	add    esp,0x10
c000e2e2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e2e6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e2ea:	52                   	push   edx
c000e2eb:	50                   	push   eax
c000e2ec:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e2f0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e2f4:	e8 7b 99 01 00       	call   c0027c74 <__subdf3>
c000e2f9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e2fd:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e301:	83 c4 20             	add    esp,0x20
c000e304:	6a 00                	push   0x0
c000e306:	6a 00                	push   0x0
c000e308:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e30c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e310:	e8 5a a2 01 00       	call   c002856f <__ltdf2>
c000e315:	83 c4 10             	add    esp,0x10
c000e318:	85 c0                	test   eax,eax
c000e31a:	79 1e                	jns    c000e33a <zoh_vari_process+0x5e4>
c000e31c:	68 00 00 f0 3f       	push   0x3ff00000
c000e321:	6a 00                	push   0x0
c000e323:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e327:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e32b:	e8 f3 92 01 00       	call   c0027623 <__adddf3>
c000e330:	83 c4 10             	add    esp,0x10
c000e333:	89 04 24             	mov    DWORD PTR [esp],eax
c000e336:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e33a:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000e33d:	83 ec 10             	sub    esp,0x10
c000e340:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e344:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e348:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e34c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e350:	e8 1f 99 01 00       	call   c0027c74 <__subdf3>
c000e355:	e9 51 fd ff ff       	jmp    c000e0ab <zoh_vari_process+0x355>
c000e35a:	3b 6c 24 10          	cmp    ebp,DWORD PTR [esp+0x10]
c000e35e:	7d 3a                	jge    c000e39a <zoh_vari_process+0x644>
c000e360:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e364:	83 ec 0c             	sub    esp,0xc
c000e367:	29 e8                	sub    eax,ebp
c000e369:	99                   	cdq    
c000e36a:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e36d:	50                   	push   eax
c000e36e:	e8 90 9f 01 00       	call   c0028303 <__floatsidf>
c000e373:	83 c4 10             	add    esp,0x10
c000e376:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e37a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e37e:	52                   	push   edx
c000e37f:	50                   	push   eax
c000e380:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e384:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e388:	e8 96 92 01 00       	call   c0027623 <__adddf3>
c000e38d:	83 c4 10             	add    esp,0x10
c000e390:	89 6b 10             	mov    DWORD PTR [ebx+0x10],ebp
c000e393:	89 04 24             	mov    DWORD PTR [esp],eax
c000e396:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e39a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000e39d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000e3a1:	89 47 08             	mov    DWORD PTR [edi+0x8],eax
c000e3a4:	89 57 0c             	mov    DWORD PTR [edi+0xc],edx
c000e3a7:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e3aa:	85 c0                	test   eax,eax
c000e3ac:	7f 25                	jg     c000e3d3 <zoh_vari_process+0x67d>
c000e3ae:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e3b2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e3b6:	89 07                	mov    DWORD PTR [edi],eax
c000e3b8:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c000e3bb:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e3be:	99                   	cdq    
c000e3bf:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e3c2:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000e3c5:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000e3c8:	99                   	cdq    
c000e3c9:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e3cc:	31 d2                	xor    edx,edx
c000e3ce:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000e3d1:	eb 1e                	jmp    c000e3f1 <zoh_vari_process+0x69b>
c000e3d3:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c000e3d6:	31 d2                	xor    edx,edx
c000e3d8:	29 c8                	sub    eax,ecx
c000e3da:	c1 e0 02             	shl    eax,0x2
c000e3dd:	39 d1                	cmp    ecx,edx
c000e3df:	7e cd                	jle    c000e3ae <zoh_vari_process+0x658>
c000e3e1:	8b 2e                	mov    ebp,DWORD PTR [esi]
c000e3e3:	8b 6c 05 00          	mov    ebp,DWORD PTR [ebp+eax*1+0x0]
c000e3e7:	83 c0 04             	add    eax,0x4
c000e3ea:	89 6c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ebp
c000e3ee:	42                   	inc    edx
c000e3ef:	eb ec                	jmp    c000e3dd <zoh_vari_process+0x687>
c000e3f1:	83 c4 3c             	add    esp,0x3c
c000e3f4:	89 d0                	mov    eax,edx
c000e3f6:	5b                   	pop    ebx
c000e3f7:	5e                   	pop    esi
c000e3f8:	5f                   	pop    edi
c000e3f9:	5d                   	pop    ebp
c000e3fa:	c3                   	ret    

c000e3fb <zoh_reset>:
c000e3fb:	83 ec 0c             	sub    esp,0xc
c000e3fe:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000e402:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000e405:	85 c0                	test   eax,eax
c000e407:	74 20                	je     c000e429 <zoh_reset+0x2e>
c000e409:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c000e40c:	83 c0 1c             	add    eax,0x1c
c000e40f:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c000e412:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c000e419:	c1 e2 02             	shl    edx,0x2
c000e41c:	51                   	push   ecx
c000e41d:	52                   	push   edx
c000e41e:	6a 00                	push   0x0
c000e420:	50                   	push   eax
c000e421:	e8 52 23 ff ff       	call   c0000778 <memset>
c000e426:	83 c4 10             	add    esp,0x10
c000e429:	83 c4 0c             	add    esp,0xc
c000e42c:	c3                   	ret    

c000e42d <zoh_get_name>:
c000e42d:	31 c0                	xor    eax,eax
c000e42f:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000e434:	75 05                	jne    c000e43b <zoh_get_name+0xe>
c000e436:	b8 1e a0 02 c0       	mov    eax,0xc002a01e
c000e43b:	c3                   	ret    

c000e43c <zoh_get_description>:
c000e43c:	31 c0                	xor    eax,eax
c000e43e:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000e443:	75 05                	jne    c000e44a <zoh_get_description+0xe>
c000e445:	b8 2f a0 02 c0       	mov    eax,0xc002a02f
c000e44a:	c3                   	ret    

c000e44b <zoh_set_converter>:
c000e44b:	53                   	push   ebx
c000e44c:	b8 0a 00 00 00       	mov    eax,0xa
c000e451:	83 ec 08             	sub    esp,0x8
c000e454:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e458:	83 7c 24 14 03       	cmp    DWORD PTR [esp+0x14],0x3
c000e45d:	75 6e                	jne    c000e4cd <zoh_set_converter+0x82>
c000e45f:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000e462:	85 c0                	test   eax,eax
c000e464:	74 13                	je     c000e479 <zoh_set_converter+0x2e>
c000e466:	83 ec 0c             	sub    esp,0xc
c000e469:	50                   	push   eax
c000e46a:	e8 85 14 00 00       	call   c000f8f4 <free>
c000e46f:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000e476:	83 c4 10             	add    esp,0x10
c000e479:	50                   	push   eax
c000e47a:	50                   	push   eax
c000e47b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000e47e:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c000e485:	50                   	push   eax
c000e486:	6a 01                	push   0x1
c000e488:	e8 87 14 00 00       	call   c000f914 <calloc>
c000e48d:	83 c4 10             	add    esp,0x10
c000e490:	89 c2                	mov    edx,eax
c000e492:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000e495:	85 d2                	test   edx,edx
c000e497:	b8 01 00 00 00       	mov    eax,0x1
c000e49c:	74 2f                	je     c000e4cd <zoh_set_converter+0x82>
c000e49e:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000e4a1:	83 ec 0c             	sub    esp,0xc
c000e4a4:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000e4a7:	c7 02 93 0a f7 06    	mov    DWORD PTR [edx],0x6f70a93
c000e4ad:	c7 43 24 56 dd 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000dd56
c000e4b4:	c7 43 20 56 dd 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000dd56
c000e4bb:	c7 43 28 fb e3 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000e3fb
c000e4c2:	53                   	push   ebx
c000e4c3:	e8 33 ff ff ff       	call   c000e3fb <zoh_reset>
c000e4c8:	83 c4 10             	add    esp,0x10
c000e4cb:	31 c0                	xor    eax,eax
c000e4cd:	83 c4 08             	add    esp,0x8
c000e4d0:	5b                   	pop    ebx
c000e4d1:	c3                   	ret    

c000e4d2 <CPU::current()>:
c000e4d2:	a1 e8 e6 02 c0       	mov    eax,ds:0xc002e6e8
c000e4d7:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000e4dd:	90                   	nop
c000e4de:	c3                   	ret    

c000e4df <operator new(unsigned long)>:
c000e4df:	83 ec 0c             	sub    esp,0xc
c000e4e2:	83 ec 0c             	sub    esp,0xc
c000e4e5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e4e9:	e8 f6 13 00 00       	call   c000f8e4 <malloc>
c000e4ee:	83 c4 10             	add    esp,0x10
c000e4f1:	83 c4 0c             	add    esp,0xc
c000e4f4:	c3                   	ret    

c000e4f5 <Krnl::resolveCompatibilitySymbol(char*)>:
c000e4f5:	83 ec 0c             	sub    esp,0xc
c000e4f8:	83 ec 08             	sub    esp,0x8
c000e4fb:	68 66 a0 02 c0       	push   0xc002a066
c000e500:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e504:	e8 b7 23 ff ff       	call   c00008c0 <strcmp>
c000e509:	83 c4 10             	add    esp,0x10
c000e50c:	85 c0                	test   eax,eax
c000e50e:	0f 94 c0             	sete   al
c000e511:	84 c0                	test   al,al
c000e513:	74 0a                	je     c000e51f <Krnl::resolveCompatibilitySymbol(char*)+0x2a>
c000e515:	b8 e8 e6 02 c0       	mov    eax,0xc002e6e8
c000e51a:	e9 e3 00 00 00       	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e51f:	83 ec 08             	sub    esp,0x8
c000e522:	68 6f a0 02 c0       	push   0xc002a06f
c000e527:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e52b:	e8 90 23 ff ff       	call   c00008c0 <strcmp>
c000e530:	83 c4 10             	add    esp,0x10
c000e533:	85 c0                	test   eax,eax
c000e535:	0f 94 c0             	sete   al
c000e538:	84 c0                	test   al,al
c000e53a:	74 0a                	je     c000e546 <Krnl::resolveCompatibilitySymbol(char*)+0x51>
c000e53c:	b8 9c 6a 02 c0       	mov    eax,0xc0026a9c
c000e541:	e9 bc 00 00 00       	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e546:	83 ec 08             	sub    esp,0x8
c000e549:	68 79 a0 02 c0       	push   0xc002a079
c000e54e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e552:	e8 69 23 ff ff       	call   c00008c0 <strcmp>
c000e557:	83 c4 10             	add    esp,0x10
c000e55a:	85 c0                	test   eax,eax
c000e55c:	0f 94 c0             	sete   al
c000e55f:	84 c0                	test   al,al
c000e561:	74 0a                	je     c000e56d <Krnl::resolveCompatibilitySymbol(char*)+0x78>
c000e563:	b8 d0 67 02 c0       	mov    eax,0xc00267d0
c000e568:	e9 95 00 00 00       	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e56d:	83 ec 08             	sub    esp,0x8
c000e570:	68 82 a0 02 c0       	push   0xc002a082
c000e575:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e579:	e8 42 23 ff ff       	call   c00008c0 <strcmp>
c000e57e:	83 c4 10             	add    esp,0x10
c000e581:	85 c0                	test   eax,eax
c000e583:	0f 94 c0             	sete   al
c000e586:	84 c0                	test   al,al
c000e588:	74 07                	je     c000e591 <Krnl::resolveCompatibilitySymbol(char*)+0x9c>
c000e58a:	b8 9c 6b 02 c0       	mov    eax,0xc0026b9c
c000e58f:	eb 71                	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e591:	83 ec 08             	sub    esp,0x8
c000e594:	68 8c a0 02 c0       	push   0xc002a08c
c000e599:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e59d:	e8 1e 23 ff ff       	call   c00008c0 <strcmp>
c000e5a2:	83 c4 10             	add    esp,0x10
c000e5a5:	85 c0                	test   eax,eax
c000e5a7:	0f 94 c0             	sete   al
c000e5aa:	84 c0                	test   al,al
c000e5ac:	74 07                	je     c000e5b5 <Krnl::resolveCompatibilitySymbol(char*)+0xc0>
c000e5ae:	b8 1c 69 02 c0       	mov    eax,0xc002691c
c000e5b3:	eb 4d                	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e5b5:	83 ec 08             	sub    esp,0x8
c000e5b8:	68 95 a0 02 c0       	push   0xc002a095
c000e5bd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e5c1:	e8 fa 22 ff ff       	call   c00008c0 <strcmp>
c000e5c6:	83 c4 10             	add    esp,0x10
c000e5c9:	85 c0                	test   eax,eax
c000e5cb:	0f 94 c0             	sete   al
c000e5ce:	84 c0                	test   al,al
c000e5d0:	74 07                	je     c000e5d9 <Krnl::resolveCompatibilitySymbol(char*)+0xe4>
c000e5d2:	b8 ec e6 02 c0       	mov    eax,0xc002e6ec
c000e5d7:	eb 29                	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e5d9:	83 ec 08             	sub    esp,0x8
c000e5dc:	68 a2 a0 02 c0       	push   0xc002a0a2
c000e5e1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e5e5:	e8 d6 22 ff ff       	call   c00008c0 <strcmp>
c000e5ea:	83 c4 10             	add    esp,0x10
c000e5ed:	85 c0                	test   eax,eax
c000e5ef:	0f 94 c0             	sete   al
c000e5f2:	84 c0                	test   al,al
c000e5f4:	74 07                	je     c000e5fd <Krnl::resolveCompatibilitySymbol(char*)+0x108>
c000e5f6:	b8 ed e6 02 c0       	mov    eax,0xc002e6ed
c000e5fb:	eb 05                	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e5fd:	b8 00 00 00 00       	mov    eax,0x0
c000e602:	83 c4 0c             	add    esp,0xc
c000e605:	c3                   	ret    

c000e606 <Computer::close(int, int, void*)>:
c000e606:	57                   	push   edi
c000e607:	56                   	push   esi
c000e608:	53                   	push   ebx
c000e609:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e60d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000e611:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000e615:	83 ec 0c             	sub    esp,0xc
c000e618:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
c000e61e:	e8 5d 5f 00 00       	call   c0014580 <Device::closeAll()>
c000e623:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c000e629:	83 c4 10             	add    esp,0x10
c000e62c:	8b 10                	mov    edx,DWORD PTR [eax]
c000e62e:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c000e632:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c000e63a:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c000e63e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e642:	5b                   	pop    ebx
c000e643:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000e646:	5e                   	pop    esi
c000e647:	5f                   	pop    edi
c000e648:	ff e0                	jmp    eax

c000e64a <swapper(void*)>:
c000e64a:	55                   	push   ebp
c000e64b:	89 e5                	mov    ebp,esp
c000e64d:	83 ec 08             	sub    esp,0x8
c000e650:	e8 67 f8 00 00       	call   c001debc <unlockScheduler()>
c000e655:	83 ec 0c             	sub    esp,0xc
c000e658:	68 af a0 02 c0       	push   0xc002a0af
c000e65d:	e8 81 49 00 00       	call   c0012fe3 <Dbg::kprintf(char const*, ...)>
c000e662:	c7 04 24 02 00 00 00 	mov    DWORD PTR [esp],0x2
c000e669:	e8 e2 fc 00 00       	call   c001e350 <blockTask(TaskState)>
c000e66e:	c7 04 24 c1 a0 02 c0 	mov    DWORD PTR [esp],0xc002a0c1
c000e675:	e8 69 49 00 00       	call   c0012fe3 <Dbg::kprintf(char const*, ...)>
c000e67a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000e67f:	83 c4 10             	add    esp,0x10
c000e682:	85 c0                	test   eax,eax
c000e684:	74 cf                	je     c000e655 <swapper(void*)+0xb>
c000e686:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000e689:	85 c0                	test   eax,eax
c000e68b:	74 c8                	je     c000e655 <swapper(void*)+0xb>
c000e68d:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c000e693:	85 c0                	test   eax,eax
c000e695:	74 be                	je     c000e655 <swapper(void*)+0xb>
c000e697:	83 ec 0c             	sub    esp,0xc
c000e69a:	68 d3 a0 02 c0       	push   0xc002a0d3
c000e69f:	e8 3f 49 00 00       	call   c0012fe3 <Dbg::kprintf(char const*, ...)>
c000e6a4:	83 c4 0c             	add    esp,0xc
c000e6a7:	a1 2c e7 02 c0       	mov    eax,ds:0xc002e72c
c000e6ac:	85 c0                	test   eax,eax
c000e6ae:	79 03                	jns    c000e6b3 <swapper(void*)+0x69>
c000e6b0:	83 c0 1f             	add    eax,0x1f
c000e6b3:	c1 f8 05             	sar    eax,0x5
c000e6b6:	83 c0 02             	add    eax,0x2
c000e6b9:	50                   	push   eax
c000e6ba:	6a 04                	push   0x4
c000e6bc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000e6c1:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000e6c4:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c000e6ca:	e8 f1 45 00 00       	call   c0012cc0 <VAS::scanForEviction(int, int)>
c000e6cf:	83 c4 10             	add    esp,0x10
c000e6d2:	eb 81                	jmp    c000e655 <swapper(void*)+0xb>

c000e6d4 <Krnl::firstTask()>:
c000e6d4:	53                   	push   ebx
c000e6d5:	83 ec 14             	sub    esp,0x14
c000e6d8:	fb                   	sti    
c000e6d9:	68 3f 07 00 00       	push   0x73f
c000e6de:	e8 01 12 00 00       	call   c000f8e4 <malloc>
c000e6e3:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000e6ea:	89 c3                	mov    ebx,eax
c000e6ec:	ff 35 58 1c 03 c0    	push   DWORD PTR ds:0xc0031c58
c000e6f2:	68 e7 a0 02 c0       	push   0xc002a0e7
c000e6f7:	6a 01                	push   0x1
c000e6f9:	50                   	push   eax
c000e6fa:	e8 ef f5 00 00       	call   c001dcee <Process::Process(bool, char const*, Process*, char**)>
c000e6ff:	83 c4 20             	add    esp,0x20
c000e702:	68 ff 00 00 00       	push   0xff
c000e707:	6a 00                	push   0x0
c000e709:	68 79 f2 00 c0       	push   0xc000f279
c000e70e:	53                   	push   ebx
c000e70f:	e8 d8 f8 00 00       	call   c001dfec <Process::createThread(void (*)(void*), void*, int)>
c000e714:	6a 7a                	push   0x7a
c000e716:	6a 00                	push   0x0
c000e718:	68 4a e8 01 c0       	push   0xc001e84a
c000e71d:	ff 35 58 1c 03 c0    	push   DWORD PTR ds:0xc0031c58
c000e723:	e8 c4 f8 00 00       	call   c001dfec <Process::createThread(void (*)(void*), void*, int)>
c000e728:	83 c4 20             	add    esp,0x20
c000e72b:	a3 0c 1c 03 c0       	mov    ds:0xc0031c0c,eax
c000e730:	6a 01                	push   0x1
c000e732:	6a 00                	push   0x0
c000e734:	68 4a e6 00 c0       	push   0xc000e64a
c000e739:	ff 35 58 1c 03 c0    	push   DWORD PTR ds:0xc0031c58
c000e73f:	e8 a8 f8 00 00       	call   c001dfec <Process::createThread(void (*)(void*), void*, int)>
c000e744:	c6 05 ed e6 02 c0 01 	mov    BYTE PTR ds:0xc002e6ed,0x1
c000e74b:	a3 08 1c 03 c0       	mov    ds:0xc0031c08,eax
c000e750:	e8 76 04 01 00       	call   c001ebcb <Vm::initialise8086()>
c000e755:	e8 0e 4c 00 00       	call   c0013368 <Fs::initVFS()>
c000e75a:	a1 e8 e6 02 c0       	mov    eax,ds:0xc002e6e8
c000e75f:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c000e765:	8b 10                	mov    edx,DWORD PTR [eax]
c000e767:	6a 00                	push   0x0
c000e769:	6a 00                	push   0x0
c000e76b:	6a 00                	push   0x0
c000e76d:	50                   	push   eax
c000e76e:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000e771:	83 c4 20             	add    esp,0x20
c000e774:	e8 05 df 00 00       	call   c001c67e <Sys::loadSyscalls()>
c000e779:	e8 de bd 00 00       	call   c001a55c <Krnl::loadSystemEnv()>
c000e77e:	50                   	push   eax
c000e77f:	6a 3a                	push   0x3a
c000e781:	68 f4 a0 02 c0       	push   0xc002a0f4
c000e786:	68 fd a0 02 c0       	push   0xc002a0fd
c000e78b:	e8 f2 ca 00 00       	call   c001b282 <Reg::readIntWithDefault(char*, char*, int)>
c000e790:	89 04 24             	mov    DWORD PTR [esp],eax
c000e793:	e8 b8 56 00 00       	call   c0013e50 <User::loadClockSettings(int)>
c000e798:	5a                   	pop    edx
c000e799:	a1 e8 e6 02 c0       	mov    eax,ds:0xc002e6e8
c000e79e:	ff b0 e4 01 00 00    	push   DWORD PTR [eax+0x1e4]
c000e7a4:	e8 ab 5d 00 00       	call   c0014554 <Device::loadDriversForAll()>
c000e7a9:	e8 f4 b8 00 00       	call   c001a0a2 <Krnl::startCPUs()>
c000e7ae:	59                   	pop    ecx
c000e7af:	8b 1d e8 e6 02 c0    	mov    ebx,DWORD PTR ds:0xc002e6e8
c000e7b5:	58                   	pop    eax
c000e7b6:	6a 01                	push   0x1
c000e7b8:	68 05 a1 02 c0       	push   0xc002a105
c000e7bd:	e8 50 f0 00 00       	call   c001d812 <Thr::loadDLL(char const*, bool)>
c000e7c2:	5a                   	pop    edx
c000e7c3:	59                   	pop    ecx
c000e7c4:	53                   	push   ebx
c000e7c5:	50                   	push   eax
c000e7c6:	e8 7b f2 00 00       	call   c001da46 <Thr::executeDLL(unsigned long, void*)>
c000e7cb:	83 c4 10             	add    esp,0x10
c000e7ce:	83 ec 0c             	sub    esp,0xc
c000e7d1:	6a 02                	push   0x2
c000e7d3:	e8 78 fb 00 00       	call   c001e350 <blockTask(TaskState)>
c000e7d8:	83 c4 10             	add    esp,0x10
c000e7db:	eb f1                	jmp    c000e7ce <Krnl::firstTask()+0xfa>
c000e7dd:	90                   	nop

c000e7de <Computer::Computer()>:
c000e7de:	83 ec 0c             	sub    esp,0xc
c000e7e1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7e5:	83 ec 08             	sub    esp,0x8
c000e7e8:	68 21 a1 02 c0       	push   0xc002a121
c000e7ed:	50                   	push   eax
c000e7ee:	e8 07 5e 00 00       	call   c00145fa <Device::Device(char const*)>
c000e7f3:	83 c4 10             	add    esp,0x10
c000e7f6:	ba c0 a2 02 c0       	mov    edx,0xc002a2c0
c000e7fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7ff:	89 10                	mov    DWORD PTR [eax],edx
c000e801:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e805:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000e80f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e813:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c000e81d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e821:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c000e827:	83 ca 04             	or     edx,0x4
c000e82a:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c000e830:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e834:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e83a:	0f b6 d0             	movzx  edx,al
c000e83d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e841:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c000e848:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e84c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e852:	0f b6 d0             	movzx  edx,al
c000e855:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e859:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c000e85e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e862:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e868:	8d 50 01             	lea    edx,[eax+0x1]
c000e86b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e86f:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e875:	0f b6 d0             	movzx  edx,al
c000e878:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e87c:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e880:	83 e1 3f             	and    ecx,0x3f
c000e883:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e887:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e88b:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e891:	0f b6 d0             	movzx  edx,al
c000e894:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e898:	66 c7 44 90 04 92 00 	mov    WORD PTR [eax+edx*4+0x4],0x92
c000e89f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8a3:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e8a9:	0f b6 d0             	movzx  edx,al
c000e8ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8b0:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000e8b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8b9:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e8bf:	8d 50 01             	lea    edx,[eax+0x1]
c000e8c2:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e8c6:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e8cc:	0f b6 d0             	movzx  edx,al
c000e8cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8d3:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e8d7:	83 e1 3f             	and    ecx,0x3f
c000e8da:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e8de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8e2:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e8e8:	0f b6 d0             	movzx  edx,al
c000e8eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8ef:	66 c7 44 90 04 61 00 	mov    WORD PTR [eax+edx*4+0x4],0x61
c000e8f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8fa:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e900:	0f b6 d0             	movzx  edx,al
c000e903:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e907:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000e90c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e910:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e916:	8d 50 01             	lea    edx,[eax+0x1]
c000e919:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e91d:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e923:	0f b6 d0             	movzx  edx,al
c000e926:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e92a:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e92e:	83 e1 3f             	and    ecx,0x3f
c000e931:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e935:	90                   	nop
c000e936:	83 c4 0c             	add    esp,0xc
c000e939:	c3                   	ret    

c000e93a <Computer::setBootMessage(char const*)>:
c000e93a:	c3                   	ret    
c000e93b:	90                   	nop

c000e93c <Computer::detectFeatures()>:
c000e93c:	55                   	push   ebp
c000e93d:	57                   	push   edi
c000e93e:	56                   	push   esi
c000e93f:	53                   	push   ebx
c000e940:	83 ec 1c             	sub    esp,0x1c
c000e943:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000e947:	81 a3 e8 01 00 00 04 00 fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffc0004
c000e951:	e8 8e 19 ff ff       	call   c00002e4 <detectCPUID>
c000e956:	85 c0                	test   eax,eax
c000e958:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e95e:	0f 95 c2             	setne  dl
c000e961:	83 e0 fd             	and    eax,0xfffffffd
c000e964:	d1 e2                	shl    edx,1
c000e966:	09 d0                	or     eax,edx
c000e968:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e96e:	a8 02                	test   al,0x2
c000e970:	75 46                	jne    c000e9b8 <Computer::detectFeatures()+0x7c>
c000e972:	f6 05 01 e7 02 c0 04 	test   BYTE PTR ds:0xc002e701,0x4
c000e979:	74 07                	je     c000e982 <Computer::detectFeatures()+0x46>
c000e97b:	80 a3 e8 01 00 00 fb 	and    BYTE PTR [ebx+0x1e8],0xfb
c000e982:	e8 df 7d 01 00       	call   c0026766 <x87Detect>
c000e987:	83 e0 01             	and    eax,0x1
c000e98a:	c1 e0 04             	shl    eax,0x4
c000e98d:	88 c2                	mov    dl,al
c000e98f:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e995:	83 e0 ef             	and    eax,0xffffffef
c000e998:	09 d0                	or     eax,edx
c000e99a:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e9a0:	a8 10                	test   al,0x10
c000e9a2:	0f 85 2a 01 00 00    	jne    c000ead2 <Computer::detectFeatures()+0x196>
c000e9a8:	84 c0                	test   al,al
c000e9aa:	0f 88 45 01 00 00    	js     c000eaf5 <Computer::detectFeatures()+0x1b9>
c000e9b0:	83 c4 1c             	add    esp,0x1c
c000e9b3:	5b                   	pop    ebx
c000e9b4:	5e                   	pop    esi
c000e9b5:	5f                   	pop    edi
c000e9b6:	5d                   	pop    ebp
c000e9b7:	c3                   	ret    
c000e9b8:	83 ec 0c             	sub    esp,0xc
c000e9bb:	6a 20                	push   0x20
c000e9bd:	e8 f2 a3 00 00       	call   c0018db4 <CPU::cpuidCheckEDX(unsigned int)>
c000e9c2:	83 e0 01             	and    eax,0x1
c000e9c5:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000e9cc:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e9d2:	83 e0 f7             	and    eax,0xfffffff7
c000e9d5:	09 d0                	or     eax,edx
c000e9d7:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e9dd:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c000e9e4:	e8 cb a3 00 00       	call   c0018db4 <CPU::cpuidCheckEDX(unsigned int)>
c000e9e9:	83 e0 01             	and    eax,0x1
c000e9ec:	88 c2                	mov    dl,al
c000e9ee:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000e9f4:	83 e0 fe             	and    eax,0xfffffffe
c000e9f7:	09 d0                	or     eax,edx
c000e9f9:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000e9ff:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c000ea06:	e8 a9 a3 00 00       	call   c0018db4 <CPU::cpuidCheckEDX(unsigned int)>
c000ea0b:	c1 e0 07             	shl    eax,0x7
c000ea0e:	88 c2                	mov    dl,al
c000ea10:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000ea16:	83 e0 7f             	and    eax,0x7f
c000ea19:	09 d0                	or     eax,edx
c000ea1b:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000ea21:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c000ea28:	e8 87 a3 00 00       	call   c0018db4 <CPU::cpuidCheckEDX(unsigned int)>
c000ea2d:	83 c4 10             	add    esp,0x10
c000ea30:	83 e0 01             	and    eax,0x1
c000ea33:	c1 e0 05             	shl    eax,0x5
c000ea36:	88 c2                	mov    dl,al
c000ea38:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000ea3e:	83 e0 df             	and    eax,0xffffffdf
c000ea41:	09 d0                	or     eax,edx
c000ea43:	f7 05 00 e7 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc002e700,0x401
c000ea4d:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ea53:	0f 84 c2 00 00 00    	je     c000eb1b <Computer::detectFeatures()+0x1df>
c000ea59:	83 e0 fe             	and    eax,0xfffffffe
c000ea5c:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ea62:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000ea68:	88 c2                	mov    dl,al
c000ea6a:	83 e2 09             	and    edx,0x9
c000ea6d:	fe ca                	dec    dl
c000ea6f:	75 09                	jne    c000ea7a <Computer::detectFeatures()+0x13e>
c000ea71:	83 e0 fe             	and    eax,0xfffffffe
c000ea74:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ea7a:	83 ec 0c             	sub    esp,0xc
c000ea7d:	8d 44 24 18          	lea    eax,[esp+0x18]
c000ea81:	50                   	push   eax
c000ea82:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c000ea86:	55                   	push   ebp
c000ea87:	8d 7c 24 18          	lea    edi,[esp+0x18]
c000ea8b:	57                   	push   edi
c000ea8c:	8d 74 24 18          	lea    esi,[esp+0x18]
c000ea90:	56                   	push   esi
c000ea91:	68 00 00 00 80       	push   0x80000000
c000ea96:	e8 95 a2 00 00       	call   c0018d30 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000ea9b:	83 c4 20             	add    esp,0x20
c000ea9e:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c000eaa5:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000eaa9:	0f 86 c3 fe ff ff    	jbe    c000e972 <Computer::detectFeatures()+0x36>
c000eaaf:	83 ec 0c             	sub    esp,0xc
c000eab2:	50                   	push   eax
c000eab3:	55                   	push   ebp
c000eab4:	57                   	push   edi
c000eab5:	56                   	push   esi
c000eab6:	68 01 00 00 80       	push   0x80000001
c000eabb:	e8 70 a2 00 00       	call   c0018d30 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000eac0:	81 a3 e8 01 00 00 bf ff fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffcffbf
c000eaca:	83 c4 20             	add    esp,0x20
c000eacd:	e9 a0 fe ff ff       	jmp    c000e972 <Computer::detectFeatures()+0x36>
c000ead2:	e8 49 7c 01 00       	call   c0026720 <absolutelyNoChanceInHell>
c000ead7:	88 c2                	mov    dl,al
c000ead9:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000eadf:	c1 e2 07             	shl    edx,0x7
c000eae2:	83 e0 7f             	and    eax,0x7f
c000eae5:	09 d0                	or     eax,edx
c000eae7:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000eaed:	84 c0                	test   al,al
c000eaef:	0f 89 bb fe ff ff    	jns    c000e9b0 <Computer::detectFeatures()+0x74>
c000eaf5:	e8 06 7c 01 00       	call   c0026700 <avxDetect>
c000eafa:	83 e0 01             	and    eax,0x1
c000eafd:	c1 e0 05             	shl    eax,0x5
c000eb00:	88 c2                	mov    dl,al
c000eb02:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000eb08:	83 e0 df             	and    eax,0xffffffdf
c000eb0b:	09 d0                	or     eax,edx
c000eb0d:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000eb13:	83 c4 1c             	add    esp,0x1c
c000eb16:	5b                   	pop    ebx
c000eb17:	5e                   	pop    esi
c000eb18:	5f                   	pop    edi
c000eb19:	5d                   	pop    ebp
c000eb1a:	c3                   	ret    
c000eb1b:	83 ec 0c             	sub    esp,0xc
c000eb1e:	68 00 02 00 00       	push   0x200
c000eb23:	e8 8c a2 00 00       	call   c0018db4 <CPU::cpuidCheckEDX(unsigned int)>
c000eb28:	83 c4 10             	add    esp,0x10
c000eb2b:	83 e0 01             	and    eax,0x1
c000eb2e:	88 c2                	mov    dl,al
c000eb30:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000eb36:	83 e0 fe             	and    eax,0xfffffffe
c000eb39:	09 d0                	or     eax,edx
c000eb3b:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000eb41:	e9 1c ff ff ff       	jmp    c000ea62 <Computer::detectFeatures()+0x126>

c000eb46 <Computer::displayFeatures()>:
c000eb46:	53                   	push   ebx
c000eb47:	83 ec 14             	sub    esp,0x14
c000eb4a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000eb4e:	68 31 a1 02 c0       	push   0xc002a131
c000eb53:	e8 8b 44 00 00       	call   c0012fe3 <Dbg::kprintf(char const*, ...)>
c000eb58:	83 c4 10             	add    esp,0x10
c000eb5b:	f6 83 e8 01 00 00 01 	test   BYTE PTR [ebx+0x1e8],0x1
c000eb62:	0f 85 73 02 00 00    	jne    c000eddb <Computer::displayFeatures()+0x295>
c000eb68:	b8 2e a1 02 c0       	mov    eax,0xc002a12e
c000eb6d:	83 ec 08             	sub    esp,0x8
c000eb70:	50                   	push   eax
c000eb71:	68 44 a1 02 c0       	push   0xc002a144
c000eb76:	e8 68 44 00 00       	call   c0012fe3 <Dbg::kprintf(char const*, ...)>
c000eb7b:	83 c4 10             	add    esp,0x10
c000eb7e:	f6 83 e8 01 00 00 04 	test   BYTE PTR [ebx+0x1e8],0x4
c000eb85:	0f 85 8c 02 00 00    	jne    c000ee17 <Computer::displayFeatures()+0x2d1>
c000eb8b:	b8 2e a1 02 c0       	mov    eax,0xc002a12e
c000eb90:	83 ec 08             	sub    esp,0x8
c000eb93:	50                   	push   eax
c000eb94:	68 55 a1 02 c0       	push   0xc002a155
c000eb99:	e8 45 44 00 00       	call   c0012fe3 <Dbg::kprintf(char const*, ...)>
c000eb9e:	83 c4 10             	add    esp,0x10
c000eba1:	f6 83 e8 01 00 00 02 	test   BYTE PTR [ebx+0x1e8],0x2
c000eba8:	0f 85 5f 02 00 00    	jne    c000ee0d <Computer::displayFeatures()+0x2c7>
c000ebae:	b8 2e a1 02 c0       	mov    eax,0xc002a12e
c000ebb3:	83 ec 08             	sub    esp,0x8
c000ebb6:	50                   	push   eax
c000ebb7:	68 66 a1 02 c0       	push   0xc002a166
c000ebbc:	e8 22 44 00 00       	call   c0012fe3 <Dbg::kprintf(char const*, ...)>
c000ebc1:	83 c4 10             	add    esp,0x10
c000ebc4:	f6 83 e8 01 00 00 08 	test   BYTE PTR [ebx+0x1e8],0x8
c000ebcb:	0f 85 32 02 00 00    	jne    c000ee03 <Computer::displayFeatures()+0x2bd>
c000ebd1:	b8 2e a1 02 c0       	mov    eax,0xc002a12e
c000ebd6:	83 ec 08             	sub    esp,0x8
c000ebd9:	50                   	push   eax
c000ebda:	68 77 a1 02 c0       	push   0xc002a177
c000ebdf:	e8 ff 43 00 00       	call   c0012fe3 <Dbg::kprintf(char const*, ...)>
c000ebe4:	83 c4 10             	add    esp,0x10
c000ebe7:	f6 83 e8 01 00 00 10 	test   BYTE PTR [ebx+0x1e8],0x10
c000ebee:	0f 85 05 02 00 00    	jne    c000edf9 <Computer::displayFeatures()+0x2b3>
c000ebf4:	b8 2e a1 02 c0       	mov    eax,0xc002a12e
c000ebf9:	83 ec 08             	sub    esp,0x8
c000ebfc:	50                   	push   eax
c000ebfd:	68 88 a1 02 c0       	push   0xc002a188
c000ec02:	e8 dc 43 00 00       	call   c0012fe3 <Dbg::kprintf(char const*, ...)>
c000ec07:	83 c4 10             	add    esp,0x10
c000ec0a:	f6 83 e8 01 00 00 20 	test   BYTE PTR [ebx+0x1e8],0x20
c000ec11:	0f 85 d8 01 00 00    	jne    c000edef <Computer::displayFeatures()+0x2a9>
c000ec17:	b8 2e a1 02 c0       	mov    eax,0xc002a12e
c000ec1c:	83 ec 08             	sub    esp,0x8
c000ec1f:	50                   	push   eax
c000ec20:	68 99 a1 02 c0       	push   0xc002a199
c000ec25:	e8 b9 43 00 00       	call   c0012fe3 <Dbg::kprintf(char const*, ...)>
c000ec2a:	83 c4 10             	add    esp,0x10
c000ec2d:	f6 83 e8 01 00 00 40 	test   BYTE PTR [ebx+0x1e8],0x40
c000ec34:	0f 85 ab 01 00 00    	jne    c000ede5 <Computer::displayFeatures()+0x29f>
c000ec3a:	b8 2e a1 02 c0       	mov    eax,0xc002a12e
c000ec3f:	83 ec 08             	sub    esp,0x8
c000ec42:	50                   	push   eax
c000ec43:	68 aa a1 02 c0       	push   0xc002a1aa
c000ec48:	e8 96 43 00 00       	call   c0012fe3 <Dbg::kprintf(char const*, ...)>
c000ec4d:	83 c4 10             	add    esp,0x10
c000ec50:	80 bb e8 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e8],0x0
c000ec57:	0f 88 1b 02 00 00    	js     c000ee78 <Computer::displayFeatures()+0x332>
c000ec5d:	b8 2e a1 02 c0       	mov    eax,0xc002a12e
c000ec62:	83 ec 08             	sub    esp,0x8
c000ec65:	50                   	push   eax
c000ec66:	68 bb a1 02 c0       	push   0xc002a1bb
c000ec6b:	e8 73 43 00 00       	call   c0012fe3 <Dbg::kprintf(char const*, ...)>
c000ec70:	83 c4 10             	add    esp,0x10
c000ec73:	f6 83 e9 01 00 00 01 	test   BYTE PTR [ebx+0x1e9],0x1
c000ec7a:	0f 85 a1 01 00 00    	jne    c000ee21 <Computer::displayFeatures()+0x2db>
c000ec80:	b8 2e a1 02 c0       	mov    eax,0xc002a12e
c000ec85:	83 ec 08             	sub    esp,0x8
c000ec88:	50                   	push   eax
c000ec89:	68 cc a1 02 c0       	push   0xc002a1cc
c000ec8e:	e8 50 43 00 00       	call   c0012fe3 <Dbg::kprintf(char const*, ...)>
c000ec93:	83 c4 10             	add    esp,0x10
c000ec96:	f6 83 e9 01 00 00 02 	test   BYTE PTR [ebx+0x1e9],0x2
c000ec9d:	0f 85 cb 01 00 00    	jne    c000ee6e <Computer::displayFeatures()+0x328>
c000eca3:	b8 2e a1 02 c0       	mov    eax,0xc002a12e
c000eca8:	83 ec 08             	sub    esp,0x8
c000ecab:	50                   	push   eax
c000ecac:	68 dd a1 02 c0       	push   0xc002a1dd
c000ecb1:	e8 2d 43 00 00       	call   c0012fe3 <Dbg::kprintf(char const*, ...)>
c000ecb6:	83 c4 10             	add    esp,0x10
c000ecb9:	f6 83 e9 01 00 00 10 	test   BYTE PTR [ebx+0x1e9],0x10
c000ecc0:	0f 85 9e 01 00 00    	jne    c000ee64 <Computer::displayFeatures()+0x31e>
c000ecc6:	b8 2e a1 02 c0       	mov    eax,0xc002a12e
c000eccb:	83 ec 08             	sub    esp,0x8
c000ecce:	50                   	push   eax
c000eccf:	68 ee a1 02 c0       	push   0xc002a1ee
c000ecd4:	e8 0a 43 00 00       	call   c0012fe3 <Dbg::kprintf(char const*, ...)>
c000ecd9:	83 c4 10             	add    esp,0x10
c000ecdc:	f6 83 e9 01 00 00 04 	test   BYTE PTR [ebx+0x1e9],0x4
c000ece3:	0f 85 71 01 00 00    	jne    c000ee5a <Computer::displayFeatures()+0x314>
c000ece9:	b8 2e a1 02 c0       	mov    eax,0xc002a12e
c000ecee:	83 ec 08             	sub    esp,0x8
c000ecf1:	50                   	push   eax
c000ecf2:	68 ff a1 02 c0       	push   0xc002a1ff
c000ecf7:	e8 e7 42 00 00       	call   c0012fe3 <Dbg::kprintf(char const*, ...)>
c000ecfc:	83 c4 10             	add    esp,0x10
c000ecff:	f6 83 e9 01 00 00 08 	test   BYTE PTR [ebx+0x1e9],0x8
c000ed06:	0f 85 44 01 00 00    	jne    c000ee50 <Computer::displayFeatures()+0x30a>
c000ed0c:	b8 2e a1 02 c0       	mov    eax,0xc002a12e
c000ed11:	83 ec 08             	sub    esp,0x8
c000ed14:	50                   	push   eax
c000ed15:	68 10 a2 02 c0       	push   0xc002a210
c000ed1a:	e8 c4 42 00 00       	call   c0012fe3 <Dbg::kprintf(char const*, ...)>
c000ed1f:	83 c4 10             	add    esp,0x10
c000ed22:	f6 83 e9 01 00 00 20 	test   BYTE PTR [ebx+0x1e9],0x20
c000ed29:	0f 85 17 01 00 00    	jne    c000ee46 <Computer::displayFeatures()+0x300>
c000ed2f:	b8 2e a1 02 c0       	mov    eax,0xc002a12e
c000ed34:	83 ec 08             	sub    esp,0x8
c000ed37:	50                   	push   eax
c000ed38:	68 21 a2 02 c0       	push   0xc002a221
c000ed3d:	e8 a1 42 00 00       	call   c0012fe3 <Dbg::kprintf(char const*, ...)>
c000ed42:	83 c4 10             	add    esp,0x10
c000ed45:	f6 83 e9 01 00 00 40 	test   BYTE PTR [ebx+0x1e9],0x40
c000ed4c:	0f 85 ea 00 00 00    	jne    c000ee3c <Computer::displayFeatures()+0x2f6>
c000ed52:	b8 2e a1 02 c0       	mov    eax,0xc002a12e
c000ed57:	83 ec 08             	sub    esp,0x8
c000ed5a:	50                   	push   eax
c000ed5b:	68 32 a2 02 c0       	push   0xc002a232
c000ed60:	e8 7e 42 00 00       	call   c0012fe3 <Dbg::kprintf(char const*, ...)>
c000ed65:	83 c4 10             	add    esp,0x10
c000ed68:	80 bb e9 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e9],0x0
c000ed6f:	0f 88 0d 01 00 00    	js     c000ee82 <Computer::displayFeatures()+0x33c>
c000ed75:	b8 2e a1 02 c0       	mov    eax,0xc002a12e
c000ed7a:	83 ec 08             	sub    esp,0x8
c000ed7d:	50                   	push   eax
c000ed7e:	68 43 a2 02 c0       	push   0xc002a243
c000ed83:	e8 5b 42 00 00       	call   c0012fe3 <Dbg::kprintf(char const*, ...)>
c000ed88:	83 c4 10             	add    esp,0x10
c000ed8b:	f6 83 ea 01 00 00 02 	test   BYTE PTR [ebx+0x1ea],0x2
c000ed92:	0f 85 9a 00 00 00    	jne    c000ee32 <Computer::displayFeatures()+0x2ec>
c000ed98:	b8 2e a1 02 c0       	mov    eax,0xc002a12e
c000ed9d:	83 ec 08             	sub    esp,0x8
c000eda0:	50                   	push   eax
c000eda1:	68 54 a2 02 c0       	push   0xc002a254
c000eda6:	e8 38 42 00 00       	call   c0012fe3 <Dbg::kprintf(char const*, ...)>
c000edab:	83 c4 10             	add    esp,0x10
c000edae:	f6 83 ea 01 00 00 01 	test   BYTE PTR [ebx+0x1ea],0x1
c000edb5:	75 74                	jne    c000ee2b <Computer::displayFeatures()+0x2e5>
c000edb7:	b8 2e a1 02 c0       	mov    eax,0xc002a12e
c000edbc:	83 ec 08             	sub    esp,0x8
c000edbf:	50                   	push   eax
c000edc0:	68 65 a2 02 c0       	push   0xc002a265
c000edc5:	e8 19 42 00 00       	call   c0012fe3 <Dbg::kprintf(char const*, ...)>
c000edca:	c7 44 24 20 5c bd 02 c0 	mov    DWORD PTR [esp+0x20],0xc002bd5c
c000edd2:	83 c4 18             	add    esp,0x18
c000edd5:	5b                   	pop    ebx
c000edd6:	e9 08 42 00 00       	jmp    c0012fe3 <Dbg::kprintf(char const*, ...)>
c000eddb:	b8 2a a1 02 c0       	mov    eax,0xc002a12a
c000ede0:	e9 88 fd ff ff       	jmp    c000eb6d <Computer::displayFeatures()+0x27>
c000ede5:	b8 2a a1 02 c0       	mov    eax,0xc002a12a
c000edea:	e9 50 fe ff ff       	jmp    c000ec3f <Computer::displayFeatures()+0xf9>
c000edef:	b8 2a a1 02 c0       	mov    eax,0xc002a12a
c000edf4:	e9 23 fe ff ff       	jmp    c000ec1c <Computer::displayFeatures()+0xd6>
c000edf9:	b8 2a a1 02 c0       	mov    eax,0xc002a12a
c000edfe:	e9 f6 fd ff ff       	jmp    c000ebf9 <Computer::displayFeatures()+0xb3>
c000ee03:	b8 2a a1 02 c0       	mov    eax,0xc002a12a
c000ee08:	e9 c9 fd ff ff       	jmp    c000ebd6 <Computer::displayFeatures()+0x90>
c000ee0d:	b8 2a a1 02 c0       	mov    eax,0xc002a12a
c000ee12:	e9 9c fd ff ff       	jmp    c000ebb3 <Computer::displayFeatures()+0x6d>
c000ee17:	b8 2a a1 02 c0       	mov    eax,0xc002a12a
c000ee1c:	e9 6f fd ff ff       	jmp    c000eb90 <Computer::displayFeatures()+0x4a>
c000ee21:	b8 2a a1 02 c0       	mov    eax,0xc002a12a
c000ee26:	e9 5a fe ff ff       	jmp    c000ec85 <Computer::displayFeatures()+0x13f>
c000ee2b:	b8 2a a1 02 c0       	mov    eax,0xc002a12a
c000ee30:	eb 8a                	jmp    c000edbc <Computer::displayFeatures()+0x276>
c000ee32:	b8 2a a1 02 c0       	mov    eax,0xc002a12a
c000ee37:	e9 61 ff ff ff       	jmp    c000ed9d <Computer::displayFeatures()+0x257>
c000ee3c:	b8 2a a1 02 c0       	mov    eax,0xc002a12a
c000ee41:	e9 11 ff ff ff       	jmp    c000ed57 <Computer::displayFeatures()+0x211>
c000ee46:	b8 2a a1 02 c0       	mov    eax,0xc002a12a
c000ee4b:	e9 e4 fe ff ff       	jmp    c000ed34 <Computer::displayFeatures()+0x1ee>
c000ee50:	b8 2a a1 02 c0       	mov    eax,0xc002a12a
c000ee55:	e9 b7 fe ff ff       	jmp    c000ed11 <Computer::displayFeatures()+0x1cb>
c000ee5a:	b8 2a a1 02 c0       	mov    eax,0xc002a12a
c000ee5f:	e9 8a fe ff ff       	jmp    c000ecee <Computer::displayFeatures()+0x1a8>
c000ee64:	b8 2a a1 02 c0       	mov    eax,0xc002a12a
c000ee69:	e9 5d fe ff ff       	jmp    c000eccb <Computer::displayFeatures()+0x185>
c000ee6e:	b8 2a a1 02 c0       	mov    eax,0xc002a12a
c000ee73:	e9 30 fe ff ff       	jmp    c000eca8 <Computer::displayFeatures()+0x162>
c000ee78:	b8 2a a1 02 c0       	mov    eax,0xc002a12a
c000ee7d:	e9 e0 fd ff ff       	jmp    c000ec62 <Computer::displayFeatures()+0x11c>
c000ee82:	b8 2a a1 02 c0       	mov    eax,0xc002a12a
c000ee87:	e9 ee fe ff ff       	jmp    c000ed7a <Computer::displayFeatures()+0x234>

c000ee8c <Computer::rdmsr(unsigned int)>:
c000ee8c:	83 ec 0c             	sub    esp,0xc
c000ee8f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ee93:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000ee9a:	74 0a                	je     c000eea6 <Computer::rdmsr(unsigned int)+0x1a>
c000ee9c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000eea0:	0f 32                	rdmsr  
c000eea2:	83 c4 0c             	add    esp,0xc
c000eea5:	c3                   	ret    
c000eea6:	83 ec 0c             	sub    esp,0xc
c000eea9:	68 76 a2 02 c0       	push   0xc002a276
c000eeae:	e8 e2 b7 00 00       	call   c001a695 <Krnl::panic(char const*)>
c000eeb3:	83 c4 10             	add    esp,0x10
c000eeb6:	eb e4                	jmp    c000ee9c <Computer::rdmsr(unsigned int)+0x10>

c000eeb8 <Computer::wrmsr(unsigned int, unsigned long long)>:
c000eeb8:	57                   	push   edi
c000eeb9:	56                   	push   esi
c000eeba:	52                   	push   edx
c000eebb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eebf:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000eec3:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000eec7:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000eece:	74 0e                	je     c000eede <Computer::wrmsr(unsigned int, unsigned long long)+0x26>
c000eed0:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000eed4:	89 f0                	mov    eax,esi
c000eed6:	89 fa                	mov    edx,edi
c000eed8:	0f 30                	wrmsr  
c000eeda:	58                   	pop    eax
c000eedb:	5e                   	pop    esi
c000eedc:	5f                   	pop    edi
c000eedd:	c3                   	ret    
c000eede:	83 ec 0c             	sub    esp,0xc
c000eee1:	68 7c a2 02 c0       	push   0xc002a27c
c000eee6:	e8 aa b7 00 00       	call   c001a695 <Krnl::panic(char const*)>
c000eeeb:	83 c4 10             	add    esp,0x10
c000eeee:	eb e0                	jmp    c000eed0 <Computer::wrmsr(unsigned int, unsigned long long)+0x18>

c000eef0 <Computer::nmiEnabled()>:
c000eef0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000eef4:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c000eefa:	c3                   	ret    
c000eefb:	90                   	nop

c000eefc <Computer::readCMOS(unsigned char)>:
c000eefc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ef00:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000ef07:	19 c0                	sbb    eax,eax
c000ef09:	83 e0 80             	and    eax,0xffffff80
c000ef0c:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000ef10:	e6 70                	out    0x70,al
c000ef12:	e4 71                	in     al,0x71
c000ef14:	c3                   	ret    
c000ef15:	90                   	nop

c000ef16 <Computer::enableNMI(bool)>:
c000ef16:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ef1a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ef1e:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c000ef24:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c000ef2c:	eb ce                	jmp    c000eefc <Computer::readCMOS(unsigned char)>

c000ef2e <Computer::open(int, int, void*)>:
c000ef2e:	56                   	push   esi
c000ef2f:	53                   	push   ebx
c000ef30:	83 ec 10             	sub    esp,0x10
c000ef33:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000ef37:	f6 05 00 e7 02 c0 04 	test   BYTE PTR ds:0xc002e700,0x4
c000ef3e:	68 68 12 00 00       	push   0x1268
c000ef43:	0f 94 05 24 d6 02 c0 	sete   BYTE PTR ds:0xc002d624
c000ef4a:	e8 95 09 00 00       	call   c000f8e4 <malloc>
c000ef4f:	89 04 24             	mov    DWORD PTR [esp],eax
c000ef52:	89 c6                	mov    esi,eax
c000ef54:	e8 2b 93 00 00       	call   c0018284 <ACPI::ACPI()>
c000ef59:	89 b3 e4 01 00 00    	mov    DWORD PTR [ebx+0x1e4],esi
c000ef5f:	58                   	pop    eax
c000ef60:	5a                   	pop    edx
c000ef61:	56                   	push   esi
c000ef62:	53                   	push   ebx
c000ef63:	e8 a2 54 00 00       	call   c001440a <Device::addChild(Device*)>
c000ef68:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ef6b:	e8 cc f9 ff ff       	call   c000e93c <Computer::detectFeatures()>
c000ef70:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ef73:	e8 ce fb ff ff       	call   c000eb46 <Computer::displayFeatures()>
c000ef78:	59                   	pop    ecx
c000ef79:	5e                   	pop    esi
c000ef7a:	6a 01                	push   0x1
c000ef7c:	53                   	push   ebx
c000ef7d:	e8 94 ff ff ff       	call   c000ef16 <Computer::enableNMI(bool)>
c000ef82:	c7 04 24 98 11 00 00 	mov    DWORD PTR [esp],0x1198
c000ef89:	e8 56 09 00 00       	call   c000f8e4 <malloc>
c000ef8e:	89 04 24             	mov    DWORD PTR [esp],eax
c000ef91:	89 c6                	mov    esi,eax
c000ef93:	e8 d4 9e 00 00       	call   c0018e6c <CPU::CPU()>
c000ef98:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c000ef9e:	58                   	pop    eax
c000ef9f:	5a                   	pop    edx
c000efa0:	56                   	push   esi
c000efa1:	53                   	push   ebx
c000efa2:	e8 63 54 00 00       	call   c001440a <Device::addChild(Device*)>
c000efa7:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000efad:	8b 10                	mov    edx,DWORD PTR [eax]
c000efaf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000efb3:	6a 00                	push   0x0
c000efb5:	6a 00                	push   0x0
c000efb7:	50                   	push   eax
c000efb8:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000efbb:	83 c4 20             	add    esp,0x20
c000efbe:	e8 cd 59 00 00       	call   c0014990 <setupFPU()>
c000efc3:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c000efc9:	85 c0                	test   eax,eax
c000efcb:	74 1f                	je     c000efec <Computer::open(int, int, void*)+0xbe>
c000efcd:	83 ec 08             	sub    esp,0x8
c000efd0:	50                   	push   eax
c000efd1:	53                   	push   ebx
c000efd2:	e8 33 54 00 00       	call   c001440a <Device::addChild(Device*)>
c000efd7:	8b 83 e0 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e0]
c000efdd:	8b 10                	mov    edx,DWORD PTR [eax]
c000efdf:	6a 00                	push   0x0
c000efe1:	6a 00                	push   0x0
c000efe3:	6a 00                	push   0x0
c000efe5:	50                   	push   eax
c000efe6:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000efe9:	83 c4 20             	add    esp,0x20
c000efec:	83 ec 0c             	sub    esp,0xc
c000efef:	68 d4 e6 00 c0       	push   0xc000e6d4
c000eff4:	e8 f3 f0 00 00       	call   c001e0ec <setupMultitasking(void (*)())>
c000eff9:	83 c4 14             	add    esp,0x14
c000effc:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f001:	5b                   	pop    ebx
c000f002:	5e                   	pop    esi
c000f003:	c3                   	ret    

c000f004 <Computer::disableNMI()>:
c000f004:	6a 00                	push   0x0
c000f006:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000f00a:	e8 07 ff ff ff       	call   c000ef16 <Computer::enableNMI(bool)>
c000f00f:	58                   	pop    eax
c000f010:	5a                   	pop    edx
c000f011:	c3                   	ret    

c000f012 <Computer::writeCMOS(unsigned char, unsigned char)>:
c000f012:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f016:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000f01d:	19 c0                	sbb    eax,eax
c000f01f:	83 e0 80             	and    eax,0xffffff80
c000f022:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000f026:	e6 70                	out    0x70,al
c000f028:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f02c:	e6 71                	out    0x71,al
c000f02e:	c3                   	ret    
c000f02f:	90                   	nop

c000f030 <Computer::handleNMI()>:
c000f030:	56                   	push   esi
c000f031:	53                   	push   ebx
c000f032:	83 ec 10             	sub    esp,0x10
c000f035:	e4 92                	in     al,0x92
c000f037:	89 c6                	mov    esi,eax
c000f039:	e4 61                	in     al,0x61
c000f03b:	68 82 a2 02 c0       	push   0xc002a282
c000f040:	88 c3                	mov    bl,al
c000f042:	e8 9c 3f 00 00       	call   c0012fe3 <Dbg::kprintf(char const*, ...)>
c000f047:	83 c4 10             	add    esp,0x10
c000f04a:	83 e6 10             	and    esi,0x10
c000f04d:	75 0d                	jne    c000f05c <Computer::handleNMI()+0x2c>
c000f04f:	f6 c3 40             	test   bl,0x40
c000f052:	75 1d                	jne    c000f071 <Computer::handleNMI()+0x41>
c000f054:	84 db                	test   bl,bl
c000f056:	78 2d                	js     c000f085 <Computer::handleNMI()+0x55>
c000f058:	58                   	pop    eax
c000f059:	5b                   	pop    ebx
c000f05a:	5e                   	pop    esi
c000f05b:	c3                   	ret    
c000f05c:	83 ec 0c             	sub    esp,0xc
c000f05f:	68 93 a2 02 c0       	push   0xc002a293
c000f064:	e8 2c b6 00 00       	call   c001a695 <Krnl::panic(char const*)>
c000f069:	83 c4 10             	add    esp,0x10
c000f06c:	f6 c3 40             	test   bl,0x40
c000f06f:	74 e3                	je     c000f054 <Computer::handleNMI()+0x24>
c000f071:	83 ec 0c             	sub    esp,0xc
c000f074:	68 a0 a2 02 c0       	push   0xc002a2a0
c000f079:	e8 17 b6 00 00       	call   c001a695 <Krnl::panic(char const*)>
c000f07e:	83 c4 10             	add    esp,0x10
c000f081:	84 db                	test   bl,bl
c000f083:	79 d3                	jns    c000f058 <Computer::handleNMI()+0x28>
c000f085:	c7 44 24 10 aa a2 02 c0 	mov    DWORD PTR [esp+0x10],0xc002a2aa
c000f08d:	5a                   	pop    edx
c000f08e:	5b                   	pop    ebx
c000f08f:	5e                   	pop    esi
c000f090:	e9 00 b6 00 00       	jmp    c001a695 <Krnl::panic(char const*)>
c000f095:	90                   	nop

c000f096 <Computer::setDiskActivityLight(int, bool)>:
c000f096:	56                   	push   esi
c000f097:	53                   	push   ebx
c000f098:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000f09c:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000f0a1:	77 1b                	ja     c000f0be <Computer::setDiskActivityLight(int, bool)+0x28>
c000f0a3:	e4 92                	in     al,0x92
c000f0a5:	bb 40 00 00 00       	mov    ebx,0x40
c000f0aa:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c000f0ae:	89 da                	mov    edx,ebx
c000f0b0:	d3 e2                	shl    edx,cl
c000f0b2:	89 f1                	mov    ecx,esi
c000f0b4:	f7 d2                	not    edx
c000f0b6:	d3 e3                	shl    ebx,cl
c000f0b8:	21 d0                	and    eax,edx
c000f0ba:	09 d8                	or     eax,ebx
c000f0bc:	e6 92                	out    0x92,al
c000f0be:	5b                   	pop    ebx
c000f0bf:	5e                   	pop    esi
c000f0c0:	c3                   	ret    
c000f0c1:	90                   	nop

c000f0c2 <GDTEntry::setBase(unsigned int)>:
c000f0c2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f0c6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f0ca:	89 c1                	mov    ecx,eax
c000f0cc:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000f0d0:	c1 e9 10             	shr    ecx,0x10
c000f0d3:	c1 e8 18             	shr    eax,0x18
c000f0d6:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c000f0d9:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000f0dc:	c3                   	ret    
c000f0dd:	90                   	nop

c000f0de <GDTEntry::setLimit(unsigned int)>:
c000f0de:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f0e2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f0e6:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c000f0e9:	66 89 01             	mov    WORD PTR [ecx],ax
c000f0ec:	83 e2 f0             	and    edx,0xfffffff0
c000f0ef:	c1 e8 10             	shr    eax,0x10
c000f0f2:	83 e0 0f             	and    eax,0xf
c000f0f5:	09 d0                	or     eax,edx
c000f0f7:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c000f0fa:	c3                   	ret    
c000f0fb:	90                   	nop

c000f0fc <GDT::GDT()>:
c000f0fc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f100:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000f106:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f10a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000f110:	90                   	nop
c000f111:	c3                   	ret    

c000f112 <GDT::addEntry(GDTEntry)>:
c000f112:	53                   	push   ebx
c000f113:	83 ec 0c             	sub    esp,0xc
c000f116:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000f11a:	8b 03                	mov    eax,DWORD PTR [ebx]
c000f11c:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000f123:	52                   	push   edx
c000f124:	50                   	push   eax
c000f125:	68 e4 a2 02 c0       	push   0xc002a2e4
c000f12a:	e8 b4 3e 00 00       	call   c0012fe3 <Dbg::kprintf(char const*, ...)>
c000f12f:	8b 03                	mov    eax,DWORD PTR [ebx]
c000f131:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000f135:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000f139:	89 54 c3 04          	mov    DWORD PTR [ebx+eax*8+0x4],edx
c000f13d:	89 4c c3 08          	mov    DWORD PTR [ebx+eax*8+0x8],ecx
c000f141:	8d 50 01             	lea    edx,[eax+0x1]
c000f144:	c1 e0 03             	shl    eax,0x3
c000f147:	89 13                	mov    DWORD PTR [ebx],edx
c000f149:	83 c4 18             	add    esp,0x18
c000f14c:	5b                   	pop    ebx
c000f14d:	c3                   	ret    

c000f14e <GDT::getNumberOfEntries()>:
c000f14e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f152:	8b 00                	mov    eax,DWORD PTR [eax]
c000f154:	c3                   	ret    
c000f155:	90                   	nop

c000f156 <GDT::flush()>:
c000f156:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f15a:	8b 10                	mov    edx,DWORD PTR [eax]
c000f15c:	83 c0 04             	add    eax,0x4
c000f15f:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c000f166:	a3 f2 e6 02 c0       	mov    ds:0xc002e6f2,eax
c000f16b:	66 89 15 f0 e6 02 c0 	mov    WORD PTR ds:0xc002e6f0,dx
c000f172:	e9 d1 12 ff ff       	jmp    c0000448 <loadGDT>
c000f177:	90                   	nop

c000f178 <GDT::setup()>:
c000f178:	55                   	push   ebp
c000f179:	57                   	push   edi
c000f17a:	56                   	push   esi
c000f17b:	53                   	push   ebx
c000f17c:	83 ec 3c             	sub    esp,0x3c
c000f17f:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c000f183:	6a 00                	push   0x0
c000f185:	8d 5c 24 1c          	lea    ebx,[esp+0x1c]
c000f189:	53                   	push   ebx
c000f18a:	e8 33 ff ff ff       	call   c000f0c2 <GDTEntry::setBase(unsigned int)>
c000f18f:	6a 00                	push   0x0
c000f191:	53                   	push   ebx
c000f192:	e8 47 ff ff ff       	call   c000f0de <GDTEntry::setLimit(unsigned int)>
c000f197:	81 64 24 2c ff 00 0f ff 	and    DWORD PTR [esp+0x2c],0xff0f00ff
c000f19f:	6a 00                	push   0x0
c000f1a1:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c000f1a5:	53                   	push   ebx
c000f1a6:	e8 17 ff ff ff       	call   c000f0c2 <GDTEntry::setBase(unsigned int)>
c000f1ab:	68 ff ff ff 00       	push   0xffffff
c000f1b0:	53                   	push   ebx
c000f1b1:	e8 28 ff ff ff       	call   c000f0de <GDTEntry::setLimit(unsigned int)>
c000f1b6:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f1ba:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000f1bf:	0d 00 9a c0 00       	or     eax,0xc09a00
c000f1c4:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000f1c8:	83 c4 20             	add    esp,0x20
c000f1cb:	6a 00                	push   0x0
c000f1cd:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c000f1d1:	53                   	push   ebx
c000f1d2:	e8 eb fe ff ff       	call   c000f0c2 <GDTEntry::setBase(unsigned int)>
c000f1d7:	68 ff ff ff 00       	push   0xffffff
c000f1dc:	53                   	push   ebx
c000f1dd:	e8 fc fe ff ff       	call   c000f0de <GDTEntry::setLimit(unsigned int)>
c000f1e2:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000f1e6:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000f1ea:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000f1ee:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000f1f2:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000f1f6:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000f1fb:	0d 00 92 c0 00       	or     eax,0xc09200
c000f200:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000f204:	89 d8                	mov    eax,ebx
c000f206:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000f20a:	80 cc 60             	or     ah,0x60
c000f20d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000f211:	83 c4 0c             	add    esp,0xc
c000f214:	89 f8                	mov    eax,edi
c000f216:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f21a:	80 cc 60             	or     ah,0x60
c000f21d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f221:	89 c7                	mov    edi,eax
c000f223:	55                   	push   ebp
c000f224:	e8 e9 fe ff ff       	call   c000f112 <GDT::addEntry(GDTEntry)>
c000f229:	83 c4 0c             	add    esp,0xc
c000f22c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f230:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f234:	55                   	push   ebp
c000f235:	e8 d8 fe ff ff       	call   c000f112 <GDT::addEntry(GDTEntry)>
c000f23a:	83 c4 0c             	add    esp,0xc
c000f23d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000f241:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000f245:	55                   	push   ebp
c000f246:	e8 c7 fe ff ff       	call   c000f112 <GDT::addEntry(GDTEntry)>
c000f24b:	83 c4 0c             	add    esp,0xc
c000f24e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f252:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f256:	53                   	push   ebx
c000f257:	51                   	push   ecx
c000f258:	55                   	push   ebp
c000f259:	e8 b4 fe ff ff       	call   c000f112 <GDT::addEntry(GDTEntry)>
c000f25e:	83 c4 0c             	add    esp,0xc
c000f261:	57                   	push   edi
c000f262:	56                   	push   esi
c000f263:	55                   	push   ebp
c000f264:	e8 a9 fe ff ff       	call   c000f112 <GDT::addEntry(GDTEntry)>
c000f269:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000f26c:	e8 e5 fe ff ff       	call   c000f156 <GDT::flush()>
c000f271:	83 c4 4c             	add    esp,0x4c
c000f274:	5b                   	pop    ebx
c000f275:	5e                   	pop    esi
c000f276:	5f                   	pop    edi
c000f277:	5d                   	pop    ebp
c000f278:	c3                   	ret    

c000f279 <idleFunction(void*)>:
c000f279:	53                   	push   ebx
c000f27a:	83 ec 08             	sub    esp,0x8
c000f27d:	e8 3a ec 00 00       	call   c001debc <unlockScheduler()>
c000f282:	a1 e8 e6 02 c0       	mov    eax,ds:0xc002e6e8
c000f287:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c000f28d:	f6 82 92 11 00 00 04 	test   BYTE PTR [edx+0x1192],0x4
c000f294:	74 3c                	je     c000f2d2 <idleFunction(void*)+0x59>
c000f296:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000f29d:	74 33                	je     c000f2d2 <idleFunction(void*)+0x59>
c000f29f:	31 db                	xor    ebx,ebx
c000f2a1:	52                   	push   edx
c000f2a2:	52                   	push   edx
c000f2a3:	68 e1 00 00 00       	push   0xe1
c000f2a8:	50                   	push   eax
c000f2a9:	e8 de fb ff ff       	call   c000ee8c <Computer::rdmsr(unsigned int)>
c000f2ae:	53                   	push   ebx
c000f2af:	83 e0 02             	and    eax,0x2
c000f2b2:	50                   	push   eax
c000f2b3:	68 e1 00 00 00       	push   0xe1
c000f2b8:	ff 35 e8 e6 02 c0    	push   DWORD PTR ds:0xc002e6e8
c000f2be:	e8 f5 fb ff ff       	call   c000eeb8 <Computer::wrmsr(unsigned int, unsigned long long)>
c000f2c3:	83 c4 20             	add    esp,0x20
c000f2c6:	e8 b4 0f ff ff       	call   c000027f <doTPAUSE>
c000f2cb:	e8 d0 94 01 00       	call   c00287a0 <idleCommon()>
c000f2d0:	eb f4                	jmp    c000f2c6 <idleFunction(void*)+0x4d>
c000f2d2:	fb                   	sti    
c000f2d3:	f4                   	hlt    
c000f2d4:	e8 c7 94 01 00       	call   c00287a0 <idleCommon()>
c000f2d9:	eb f7                	jmp    c000f2d2 <idleFunction(void*)+0x59>
c000f2db:	90                   	nop

c000f2dc <IDTEntry::IDTEntry(bool)>:
c000f2dc:	83 ec 04             	sub    esp,0x4
c000f2df:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f2e3:	88 04 24             	mov    BYTE PTR [esp],al
c000f2e6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f2ea:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c000f2f0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f2f4:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c000f2f8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f2fc:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f2ff:	83 e2 f0             	and    edx,0xfffffff0
c000f302:	83 ca 0e             	or     edx,0xe
c000f305:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f308:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f30c:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f30f:	83 e2 ef             	and    edx,0xffffffef
c000f312:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f315:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c000f319:	74 04                	je     c000f31f <IDTEntry::IDTEntry(bool)+0x43>
c000f31b:	b2 03                	mov    dl,0x3
c000f31d:	eb 02                	jmp    c000f321 <IDTEntry::IDTEntry(bool)+0x45>
c000f31f:	b2 00                	mov    dl,0x0
c000f321:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f325:	83 e2 03             	and    edx,0x3
c000f328:	88 d1                	mov    cl,dl
c000f32a:	c1 e1 05             	shl    ecx,0x5
c000f32d:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f330:	83 e2 9f             	and    edx,0xffffff9f
c000f333:	09 ca                	or     edx,ecx
c000f335:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f338:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f33c:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f33f:	83 ca 80             	or     edx,0xffffff80
c000f342:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f345:	90                   	nop
c000f346:	83 c4 04             	add    esp,0x4
c000f349:	c3                   	ret    

c000f34a <IDTEntry::setOffset(unsigned int)>:
c000f34a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f34e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f352:	66 89 02             	mov    WORD PTR [edx],ax
c000f355:	c1 e8 10             	shr    eax,0x10
c000f358:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c000f35c:	c3                   	ret    
c000f35d:	90                   	nop

c000f35e <IDT::IDT()>:
c000f35e:	90                   	nop
c000f35f:	c3                   	ret    

c000f360 <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c000f360:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f364:	83 c0 30             	add    eax,0x30
c000f367:	c3                   	ret    

c000f368 <IDT::addEntry(IDTEntry, int)>:
c000f368:	53                   	push   ebx
c000f369:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f36d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000f371:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f375:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f379:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c000f37c:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c000f380:	5b                   	pop    ebx
c000f381:	c3                   	ret    

c000f382 <IDT::addEntry(int, void (*)(), bool)>:
c000f382:	53                   	push   ebx
c000f383:	83 ec 10             	sub    esp,0x10
c000f386:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000f38b:	50                   	push   eax
c000f38c:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000f390:	53                   	push   ebx
c000f391:	e8 46 ff ff ff       	call   c000f2dc <IDTEntry::IDTEntry(bool)>
c000f396:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f39a:	53                   	push   ebx
c000f39b:	e8 aa ff ff ff       	call   c000f34a <IDTEntry::setOffset(unsigned int)>
c000f3a0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f3a4:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f3a8:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f3ac:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000f3b0:	e8 b3 ff ff ff       	call   c000f368 <IDT::addEntry(IDTEntry, int)>
c000f3b5:	83 c4 30             	add    esp,0x30
c000f3b8:	5b                   	pop    ebx
c000f3b9:	c3                   	ret    

c000f3ba <IDT::flush()>:
c000f3ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f3be:	66 c7 05 f8 e6 02 c0 ff 07 	mov    WORD PTR ds:0xc002e6f8,0x7ff
c000f3c7:	a3 fa e6 02 c0       	mov    ds:0xc002e6fa,eax
c000f3cc:	0f 01 1d f8 e6 02 c0 	lidtd  ds:0xc002e6f8
c000f3d3:	c3                   	ret    

c000f3d4 <IDT::setup()>:
c000f3d4:	57                   	push   edi
c000f3d5:	56                   	push   esi
c000f3d6:	53                   	push   ebx
c000f3d7:	83 ec 10             	sub    esp,0x10
c000f3da:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f3de:	6a 00                	push   0x0
c000f3e0:	68 68 04 00 c0       	push   0xc0000468
c000f3e5:	6a 00                	push   0x0
c000f3e7:	53                   	push   ebx
c000f3e8:	e8 95 ff ff ff       	call   c000f382 <IDT::addEntry(int, void (*)(), bool)>
c000f3ed:	6a 00                	push   0x0
c000f3ef:	68 78 04 00 c0       	push   0xc0000478
c000f3f4:	6a 01                	push   0x1
c000f3f6:	53                   	push   ebx
c000f3f7:	e8 86 ff ff ff       	call   c000f382 <IDT::addEntry(int, void (*)(), bool)>
c000f3fc:	83 c4 20             	add    esp,0x20
c000f3ff:	6a 00                	push   0x0
c000f401:	68 82 04 00 c0       	push   0xc0000482
c000f406:	6a 02                	push   0x2
c000f408:	53                   	push   ebx
c000f409:	e8 74 ff ff ff       	call   c000f382 <IDT::addEntry(int, void (*)(), bool)>
c000f40e:	6a 00                	push   0x0
c000f410:	68 8c 04 00 c0       	push   0xc000048c
c000f415:	6a 03                	push   0x3
c000f417:	53                   	push   ebx
c000f418:	e8 65 ff ff ff       	call   c000f382 <IDT::addEntry(int, void (*)(), bool)>
c000f41d:	83 c4 20             	add    esp,0x20
c000f420:	6a 00                	push   0x0
c000f422:	68 96 04 00 c0       	push   0xc0000496
c000f427:	6a 04                	push   0x4
c000f429:	53                   	push   ebx
c000f42a:	e8 53 ff ff ff       	call   c000f382 <IDT::addEntry(int, void (*)(), bool)>
c000f42f:	6a 00                	push   0x0
c000f431:	68 a0 04 00 c0       	push   0xc00004a0
c000f436:	6a 05                	push   0x5
c000f438:	53                   	push   ebx
c000f439:	e8 44 ff ff ff       	call   c000f382 <IDT::addEntry(int, void (*)(), bool)>
c000f43e:	83 c4 20             	add    esp,0x20
c000f441:	6a 00                	push   0x0
c000f443:	68 aa 04 00 c0       	push   0xc00004aa
c000f448:	6a 06                	push   0x6
c000f44a:	53                   	push   ebx
c000f44b:	e8 32 ff ff ff       	call   c000f382 <IDT::addEntry(int, void (*)(), bool)>
c000f450:	6a 00                	push   0x0
c000f452:	68 b4 04 00 c0       	push   0xc00004b4
c000f457:	6a 07                	push   0x7
c000f459:	53                   	push   ebx
c000f45a:	e8 23 ff ff ff       	call   c000f382 <IDT::addEntry(int, void (*)(), bool)>
c000f45f:	83 c4 20             	add    esp,0x20
c000f462:	6a 00                	push   0x0
c000f464:	68 be 04 00 c0       	push   0xc00004be
c000f469:	6a 08                	push   0x8
c000f46b:	53                   	push   ebx
c000f46c:	e8 11 ff ff ff       	call   c000f382 <IDT::addEntry(int, void (*)(), bool)>
c000f471:	6a 00                	push   0x0
c000f473:	68 c6 04 00 c0       	push   0xc00004c6
c000f478:	6a 09                	push   0x9
c000f47a:	53                   	push   ebx
c000f47b:	e8 02 ff ff ff       	call   c000f382 <IDT::addEntry(int, void (*)(), bool)>
c000f480:	83 c4 20             	add    esp,0x20
c000f483:	6a 00                	push   0x0
c000f485:	68 d0 04 00 c0       	push   0xc00004d0
c000f48a:	6a 0a                	push   0xa
c000f48c:	53                   	push   ebx
c000f48d:	e8 f0 fe ff ff       	call   c000f382 <IDT::addEntry(int, void (*)(), bool)>
c000f492:	6a 00                	push   0x0
c000f494:	68 d8 04 00 c0       	push   0xc00004d8
c000f499:	6a 0b                	push   0xb
c000f49b:	53                   	push   ebx
c000f49c:	e8 e1 fe ff ff       	call   c000f382 <IDT::addEntry(int, void (*)(), bool)>
c000f4a1:	83 c4 20             	add    esp,0x20
c000f4a4:	6a 00                	push   0x0
c000f4a6:	68 e0 04 00 c0       	push   0xc00004e0
c000f4ab:	6a 0c                	push   0xc
c000f4ad:	53                   	push   ebx
c000f4ae:	e8 cf fe ff ff       	call   c000f382 <IDT::addEntry(int, void (*)(), bool)>
c000f4b3:	6a 00                	push   0x0
c000f4b5:	68 e8 04 00 c0       	push   0xc00004e8
c000f4ba:	6a 0d                	push   0xd
c000f4bc:	53                   	push   ebx
c000f4bd:	e8 c0 fe ff ff       	call   c000f382 <IDT::addEntry(int, void (*)(), bool)>
c000f4c2:	83 c4 20             	add    esp,0x20
c000f4c5:	6a 00                	push   0x0
c000f4c7:	68 f0 04 00 c0       	push   0xc00004f0
c000f4cc:	6a 0e                	push   0xe
c000f4ce:	53                   	push   ebx
c000f4cf:	e8 ae fe ff ff       	call   c000f382 <IDT::addEntry(int, void (*)(), bool)>
c000f4d4:	6a 00                	push   0x0
c000f4d6:	68 f8 04 00 c0       	push   0xc00004f8
c000f4db:	6a 0f                	push   0xf
c000f4dd:	53                   	push   ebx
c000f4de:	e8 9f fe ff ff       	call   c000f382 <IDT::addEntry(int, void (*)(), bool)>
c000f4e3:	83 c4 20             	add    esp,0x20
c000f4e6:	6a 00                	push   0x0
c000f4e8:	68 02 05 00 c0       	push   0xc0000502
c000f4ed:	6a 10                	push   0x10
c000f4ef:	53                   	push   ebx
c000f4f0:	e8 8d fe ff ff       	call   c000f382 <IDT::addEntry(int, void (*)(), bool)>
c000f4f5:	6a 00                	push   0x0
c000f4f7:	68 0c 05 00 c0       	push   0xc000050c
c000f4fc:	6a 11                	push   0x11
c000f4fe:	53                   	push   ebx
c000f4ff:	e8 7e fe ff ff       	call   c000f382 <IDT::addEntry(int, void (*)(), bool)>
c000f504:	83 c4 20             	add    esp,0x20
c000f507:	6a 00                	push   0x0
c000f509:	68 16 05 00 c0       	push   0xc0000516
c000f50e:	6a 12                	push   0x12
c000f510:	53                   	push   ebx
c000f511:	e8 6c fe ff ff       	call   c000f382 <IDT::addEntry(int, void (*)(), bool)>
c000f516:	6a 01                	push   0x1
c000f518:	68 b0 05 00 c0       	push   0xc00005b0
c000f51d:	6a 60                	push   0x60
c000f51f:	53                   	push   ebx
c000f520:	e8 5d fe ff ff       	call   c000f382 <IDT::addEntry(int, void (*)(), bool)>
c000f525:	83 c4 20             	add    esp,0x20
c000f528:	6a 00                	push   0x0
c000f52a:	68 b7 05 00 c0       	push   0xc00005b7
c000f52f:	6a 20                	push   0x20
c000f531:	53                   	push   ebx
c000f532:	e8 4b fe ff ff       	call   c000f382 <IDT::addEntry(int, void (*)(), bool)>
c000f537:	6a 00                	push   0x0
c000f539:	68 a2 05 00 c0       	push   0xc00005a2
c000f53e:	6a 21                	push   0x21
c000f540:	53                   	push   ebx
c000f541:	e8 3c fe ff ff       	call   c000f382 <IDT::addEntry(int, void (*)(), bool)>
c000f546:	83 c4 20             	add    esp,0x20
c000f549:	6a 00                	push   0x0
c000f54b:	68 a9 05 00 c0       	push   0xc00005a9
c000f550:	6a 22                	push   0x22
c000f552:	53                   	push   ebx
c000f553:	e8 2a fe ff ff       	call   c000f382 <IDT::addEntry(int, void (*)(), bool)>
c000f558:	6a 00                	push   0x0
c000f55a:	68 20 05 00 c0       	push   0xc0000520
c000f55f:	6a 23                	push   0x23
c000f561:	53                   	push   ebx
c000f562:	e8 1b fe ff ff       	call   c000f382 <IDT::addEntry(int, void (*)(), bool)>
c000f567:	83 c4 20             	add    esp,0x20
c000f56a:	6a 00                	push   0x0
c000f56c:	68 2a 05 00 c0       	push   0xc000052a
c000f571:	6a 24                	push   0x24
c000f573:	53                   	push   ebx
c000f574:	e8 09 fe ff ff       	call   c000f382 <IDT::addEntry(int, void (*)(), bool)>
c000f579:	6a 00                	push   0x0
c000f57b:	68 34 05 00 c0       	push   0xc0000534
c000f580:	6a 25                	push   0x25
c000f582:	53                   	push   ebx
c000f583:	e8 fa fd ff ff       	call   c000f382 <IDT::addEntry(int, void (*)(), bool)>
c000f588:	83 c4 20             	add    esp,0x20
c000f58b:	6a 00                	push   0x0
c000f58d:	68 3e 05 00 c0       	push   0xc000053e
c000f592:	6a 26                	push   0x26
c000f594:	53                   	push   ebx
c000f595:	e8 e8 fd ff ff       	call   c000f382 <IDT::addEntry(int, void (*)(), bool)>
c000f59a:	6a 00                	push   0x0
c000f59c:	68 48 05 00 c0       	push   0xc0000548
c000f5a1:	6a 27                	push   0x27
c000f5a3:	53                   	push   ebx
c000f5a4:	e8 d9 fd ff ff       	call   c000f382 <IDT::addEntry(int, void (*)(), bool)>
c000f5a9:	83 c4 20             	add    esp,0x20
c000f5ac:	6a 00                	push   0x0
c000f5ae:	68 52 05 00 c0       	push   0xc0000552
c000f5b3:	6a 28                	push   0x28
c000f5b5:	53                   	push   ebx
c000f5b6:	e8 c7 fd ff ff       	call   c000f382 <IDT::addEntry(int, void (*)(), bool)>
c000f5bb:	6a 00                	push   0x0
c000f5bd:	68 5c 05 00 c0       	push   0xc000055c
c000f5c2:	6a 29                	push   0x29
c000f5c4:	53                   	push   ebx
c000f5c5:	e8 b8 fd ff ff       	call   c000f382 <IDT::addEntry(int, void (*)(), bool)>
c000f5ca:	83 c4 20             	add    esp,0x20
c000f5cd:	6a 00                	push   0x0
c000f5cf:	68 66 05 00 c0       	push   0xc0000566
c000f5d4:	6a 2a                	push   0x2a
c000f5d6:	53                   	push   ebx
c000f5d7:	e8 a6 fd ff ff       	call   c000f382 <IDT::addEntry(int, void (*)(), bool)>
c000f5dc:	6a 00                	push   0x0
c000f5de:	68 70 05 00 c0       	push   0xc0000570
c000f5e3:	6a 2b                	push   0x2b
c000f5e5:	53                   	push   ebx
c000f5e6:	e8 97 fd ff ff       	call   c000f382 <IDT::addEntry(int, void (*)(), bool)>
c000f5eb:	83 c4 20             	add    esp,0x20
c000f5ee:	6a 00                	push   0x0
c000f5f0:	68 7a 05 00 c0       	push   0xc000057a
c000f5f5:	6a 2c                	push   0x2c
c000f5f7:	53                   	push   ebx
c000f5f8:	e8 85 fd ff ff       	call   c000f382 <IDT::addEntry(int, void (*)(), bool)>
c000f5fd:	6a 00                	push   0x0
c000f5ff:	68 84 05 00 c0       	push   0xc0000584
c000f604:	6a 2d                	push   0x2d
c000f606:	53                   	push   ebx
c000f607:	e8 76 fd ff ff       	call   c000f382 <IDT::addEntry(int, void (*)(), bool)>
c000f60c:	83 c4 20             	add    esp,0x20
c000f60f:	6a 00                	push   0x0
c000f611:	68 8e 05 00 c0       	push   0xc000058e
c000f616:	6a 2e                	push   0x2e
c000f618:	53                   	push   ebx
c000f619:	e8 64 fd ff ff       	call   c000f382 <IDT::addEntry(int, void (*)(), bool)>
c000f61e:	6a 00                	push   0x0
c000f620:	68 98 05 00 c0       	push   0xc0000598
c000f625:	6a 2f                	push   0x2f
c000f627:	53                   	push   ebx
c000f628:	e8 55 fd ff ff       	call   c000f382 <IDT::addEntry(int, void (*)(), bool)>
c000f62d:	83 c4 20             	add    esp,0x20
c000f630:	6a 00                	push   0x0
c000f632:	68 ed 05 00 c0       	push   0xc00005ed
c000f637:	6a 30                	push   0x30
c000f639:	53                   	push   ebx
c000f63a:	e8 43 fd ff ff       	call   c000f382 <IDT::addEntry(int, void (*)(), bool)>
c000f63f:	6a 00                	push   0x0
c000f641:	68 f7 05 00 c0       	push   0xc00005f7
c000f646:	6a 31                	push   0x31
c000f648:	53                   	push   ebx
c000f649:	e8 34 fd ff ff       	call   c000f382 <IDT::addEntry(int, void (*)(), bool)>
c000f64e:	83 c4 20             	add    esp,0x20
c000f651:	6a 00                	push   0x0
c000f653:	68 01 06 00 c0       	push   0xc0000601
c000f658:	6a 32                	push   0x32
c000f65a:	53                   	push   ebx
c000f65b:	e8 22 fd ff ff       	call   c000f382 <IDT::addEntry(int, void (*)(), bool)>
c000f660:	6a 00                	push   0x0
c000f662:	68 0b 06 00 c0       	push   0xc000060b
c000f667:	6a 33                	push   0x33
c000f669:	53                   	push   ebx
c000f66a:	e8 13 fd ff ff       	call   c000f382 <IDT::addEntry(int, void (*)(), bool)>
c000f66f:	83 c4 20             	add    esp,0x20
c000f672:	6a 00                	push   0x0
c000f674:	68 15 06 00 c0       	push   0xc0000615
c000f679:	6a 34                	push   0x34
c000f67b:	53                   	push   ebx
c000f67c:	e8 01 fd ff ff       	call   c000f382 <IDT::addEntry(int, void (*)(), bool)>
c000f681:	6a 00                	push   0x0
c000f683:	68 1f 06 00 c0       	push   0xc000061f
c000f688:	6a 35                	push   0x35
c000f68a:	53                   	push   ebx
c000f68b:	e8 f2 fc ff ff       	call   c000f382 <IDT::addEntry(int, void (*)(), bool)>
c000f690:	83 c4 20             	add    esp,0x20
c000f693:	6a 00                	push   0x0
c000f695:	68 29 06 00 c0       	push   0xc0000629
c000f69a:	6a 36                	push   0x36
c000f69c:	53                   	push   ebx
c000f69d:	e8 e0 fc ff ff       	call   c000f382 <IDT::addEntry(int, void (*)(), bool)>
c000f6a2:	6a 00                	push   0x0
c000f6a4:	68 33 06 00 c0       	push   0xc0000633
c000f6a9:	6a 37                	push   0x37
c000f6ab:	53                   	push   ebx
c000f6ac:	e8 d1 fc ff ff       	call   c000f382 <IDT::addEntry(int, void (*)(), bool)>
c000f6b1:	83 c4 20             	add    esp,0x20
c000f6b4:	e8 05 28 00 00       	call   c0011ebe <Virt::getAKernelVAS()>
c000f6b9:	52                   	push   edx
c000f6ba:	6a 03                	push   0x3
c000f6bc:	6a 02                	push   0x2
c000f6be:	50                   	push   eax
c000f6bf:	e8 36 2e 00 00       	call   c00124fa <VAS::allocatePages(int, int)>
c000f6c4:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000f6cb:	89 c6                	mov    esi,eax
c000f6cd:	e8 12 02 00 00       	call   c000f8e4 <malloc>
c000f6d2:	81 c6 00 20 00 00    	add    esi,0x2000
c000f6d8:	89 04 24             	mov    DWORD PTR [esp],eax
c000f6db:	89 c7                	mov    edi,eax
c000f6dd:	e8 72 1e 00 00       	call   c0011554 <TSS::TSS()>
c000f6e2:	83 c4 0c             	add    esp,0xc
c000f6e5:	68 be 04 00 c0       	push   0xc00004be
c000f6ea:	56                   	push   esi
c000f6eb:	57                   	push   edi
c000f6ec:	e8 a3 1e 00 00       	call   c0011594 <TSS::setup(unsigned long, unsigned long)>
c000f6f1:	59                   	pop    ecx
c000f6f2:	89 c6                	mov    esi,eax
c000f6f4:	5f                   	pop    edi
c000f6f5:	6a 00                	push   0x0
c000f6f7:	8d 44 24 14          	lea    eax,[esp+0x14]
c000f6fb:	50                   	push   eax
c000f6fc:	e8 db fb ff ff       	call   c000f2dc <IDTEntry::IDTEntry(bool)>
c000f701:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f705:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000f70a:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c000f711:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c000f717:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f71b:	80 ce 05             	or     dh,0x5
c000f71e:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c000f721:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000f725:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f729:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c000f72c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f72f:	e8 86 fc ff ff       	call   c000f3ba <IDT::flush()>
c000f734:	83 c4 20             	add    esp,0x20
c000f737:	5b                   	pop    ebx
c000f738:	5e                   	pop    esi
c000f739:	5f                   	pop    edi
c000f73a:	c3                   	ret    

c000f73b <sbrk>:
c000f73b:	55                   	push   ebp
c000f73c:	57                   	push   edi
c000f73d:	56                   	push   esi
c000f73e:	53                   	push   ebx
c000f73f:	83 ec 1c             	sub    esp,0x1c
c000f742:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f746:	85 c0                	test   eax,eax
c000f748:	74 3e                	je     c000f788 <sbrk+0x4d>
c000f74a:	78 43                	js     c000f78f <sbrk+0x54>
c000f74c:	8b 15 e8 e6 02 c0    	mov    edx,DWORD PTR ds:0xc002e6e8
c000f752:	8b 92 60 01 00 00    	mov    edx,DWORD PTR [edx+0x160]
c000f758:	8a 92 91 11 00 00    	mov    dl,BYTE PTR [edx+0x1191]
c000f75e:	83 e2 01             	and    edx,0x1
c000f761:	88 54 24 07          	mov    BYTE PTR [esp+0x7],dl
c000f765:	8b 0d 0c d6 02 c0    	mov    ecx,DWORD PTR ds:0xc002d60c
c000f76b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000f76f:	05 ff 0f 00 00       	add    eax,0xfff
c000f774:	89 c2                	mov    edx,eax
c000f776:	78 2f                	js     c000f7a7 <sbrk+0x6c>
c000f778:	c1 fa 0c             	sar    edx,0xc
c000f77b:	89 d7                	mov    edi,edx
c000f77d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000f781:	be 00 00 00 00       	mov    esi,0x0
c000f786:	eb 36                	jmp    c000f7be <sbrk+0x83>
c000f788:	a1 0c d6 02 c0       	mov    eax,ds:0xc002d60c
c000f78d:	eb 74                	jmp    c000f803 <sbrk+0xc8>
c000f78f:	83 ec 08             	sub    esp,0x8
c000f792:	50                   	push   eax
c000f793:	68 00 a3 02 c0       	push   0xc002a300
c000f798:	e8 46 38 00 00       	call   c0012fe3 <Dbg::kprintf(char const*, ...)>
c000f79d:	83 c4 10             	add    esp,0x10
c000f7a0:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f7a5:	eb 5c                	jmp    c000f803 <sbrk+0xc8>
c000f7a7:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c000f7ad:	eb c9                	jmp    c000f778 <sbrk+0x3d>
c000f7af:	81 05 0c d6 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc002d60c,0x1000
c000f7b9:	46                   	inc    esi
c000f7ba:	39 f7                	cmp    edi,esi
c000f7bc:	74 34                	je     c000f7f2 <sbrk+0xb7>
c000f7be:	e8 fb 26 00 00       	call   c0011ebe <Virt::getAKernelVAS()>
c000f7c3:	89 c3                	mov    ebx,eax
c000f7c5:	8b 2d 0c d6 02 c0    	mov    ebp,DWORD PTR ds:0xc002d60c
c000f7cb:	e8 b6 07 00 00       	call   c000ff86 <Phys::allocatePage()>
c000f7d0:	68 01 04 00 00       	push   0x401
c000f7d5:	55                   	push   ebp
c000f7d6:	50                   	push   eax
c000f7d7:	53                   	push   ebx
c000f7d8:	e8 1d 2c 00 00       	call   c00123fa <VAS::mapPage(unsigned long, unsigned long, int)>
c000f7dd:	83 c4 10             	add    esp,0x10
c000f7e0:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f7e5:	74 c8                	je     c000f7af <sbrk+0x74>
c000f7e7:	8b 1d 0c d6 02 c0    	mov    ebx,DWORD PTR ds:0xc002d60c
c000f7ed:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000f7f0:	eb bd                	jmp    c000f7af <sbrk+0x74>
c000f7f2:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f7f7:	75 12                	jne    c000f80b <sbrk+0xd0>
c000f7f9:	0f 20 d8             	mov    eax,cr3
c000f7fc:	0f 22 d8             	mov    cr3,eax
c000f7ff:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f803:	83 c4 1c             	add    esp,0x1c
c000f806:	5b                   	pop    ebx
c000f807:	5e                   	pop    esi
c000f808:	5f                   	pop    edi
c000f809:	5d                   	pop    ebp
c000f80a:	c3                   	ret    
c000f80b:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000f80f:	89 cb                	mov    ebx,ecx
c000f811:	c1 eb 0a             	shr    ebx,0xa
c000f814:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000f81a:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000f820:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f824:	c1 e0 0c             	shl    eax,0xc
c000f827:	01 c8                	add    eax,ecx
c000f829:	c1 e8 0a             	shr    eax,0xa
c000f82c:	25 00 f0 ff ff       	and    eax,0xfffff000
c000f831:	2d 00 00 40 00       	sub    eax,0x400000
c000f836:	39 c3                	cmp    ebx,eax
c000f838:	77 c5                	ja     c000f7ff <sbrk+0xc4>
c000f83a:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000f83d:	81 c3 00 10 00 00    	add    ebx,0x1000
c000f843:	39 d8                	cmp    eax,ebx
c000f845:	73 f3                	jae    c000f83a <sbrk+0xff>
c000f847:	eb b6                	jmp    c000f7ff <sbrk+0xc4>

c000f849 <mmap>:
c000f849:	83 ec 18             	sub    esp,0x18
c000f84c:	68 30 a3 02 c0       	push   0xc002a330
c000f851:	e8 3f ae 00 00       	call   c001a695 <Krnl::panic(char const*)>
c000f856:	b8 00 00 00 00       	mov    eax,0x0
c000f85b:	83 c4 1c             	add    esp,0x1c
c000f85e:	c3                   	ret    

c000f85f <munmap>:
c000f85f:	83 ec 18             	sub    esp,0x18
c000f862:	68 35 a3 02 c0       	push   0xc002a335
c000f867:	e8 29 ae 00 00       	call   c001a695 <Krnl::panic(char const*)>
c000f86c:	b8 00 00 00 00       	mov    eax,0x0
c000f871:	83 c4 1c             	add    esp,0x1c
c000f874:	c3                   	ret    

c000f875 <liballoc_lock()>:
c000f875:	83 ec 0c             	sub    esp,0xc
c000f878:	e8 3d e6 00 00       	call   c001deba <lockScheduler()>
c000f87d:	b8 00 00 00 00       	mov    eax,0x0
c000f882:	83 c4 0c             	add    esp,0xc
c000f885:	c3                   	ret    

c000f886 <liballoc_unlock()>:
c000f886:	83 ec 0c             	sub    esp,0xc
c000f889:	e8 2e e6 00 00       	call   c001debc <unlockScheduler()>
c000f88e:	b8 00 00 00 00       	mov    eax,0x0
c000f893:	83 c4 0c             	add    esp,0xc
c000f896:	c3                   	ret    

c000f897 <liballoc_alloc(int)>:
c000f897:	83 ec 0c             	sub    esp,0xc
c000f89a:	e8 1f 26 00 00       	call   c0011ebe <Virt::getAKernelVAS()>
c000f89f:	83 ec 04             	sub    esp,0x4
c000f8a2:	6a 01                	push   0x1
c000f8a4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f8a8:	50                   	push   eax
c000f8a9:	e8 4c 2c 00 00       	call   c00124fa <VAS::allocatePages(int, int)>
c000f8ae:	83 c4 1c             	add    esp,0x1c
c000f8b1:	c3                   	ret    

c000f8b2 <liballoc_free(void*, int)>:
c000f8b2:	83 ec 0c             	sub    esp,0xc
c000f8b5:	e8 04 26 00 00       	call   c0011ebe <Virt::getAKernelVAS()>
c000f8ba:	83 ec 08             	sub    esp,0x8
c000f8bd:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f8c1:	50                   	push   eax
c000f8c2:	e8 ef 28 00 00       	call   c00121b6 <VAS::freeAllocatedPages(unsigned long)>
c000f8c7:	b8 00 00 00 00       	mov    eax,0x0
c000f8cc:	83 c4 1c             	add    esp,0x1c
c000f8cf:	c3                   	ret    

c000f8d0 <realloc>:
c000f8d0:	83 ec 14             	sub    esp,0x14
c000f8d3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f8d7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f8db:	e8 74 1d ff ff       	call   c0001654 <dlrealloc>
c000f8e0:	83 c4 1c             	add    esp,0x1c
c000f8e3:	c3                   	ret    

c000f8e4 <malloc>:
c000f8e4:	83 ec 18             	sub    esp,0x18
c000f8e7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f8eb:	e8 27 18 ff ff       	call   c0001117 <dlmalloc>
c000f8f0:	83 c4 1c             	add    esp,0x1c
c000f8f3:	c3                   	ret    

c000f8f4 <free>:
c000f8f4:	83 ec 18             	sub    esp,0x18
c000f8f7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f8fb:	e8 bc 14 ff ff       	call   c0000dbc <dlfree>
c000f900:	83 c4 1c             	add    esp,0x1c
c000f903:	c3                   	ret    

c000f904 <rfree>:
c000f904:	83 ec 18             	sub    esp,0x18
c000f907:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f90b:	e8 ac 14 ff ff       	call   c0000dbc <dlfree>
c000f910:	83 c4 1c             	add    esp,0x1c
c000f913:	c3                   	ret    

c000f914 <calloc>:
c000f914:	56                   	push   esi
c000f915:	53                   	push   ebx
c000f916:	83 ec 10             	sub    esp,0x10
c000f919:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f91d:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c000f922:	53                   	push   ebx
c000f923:	e8 bc ff ff ff       	call   c000f8e4 <malloc>
c000f928:	89 c6                	mov    esi,eax
c000f92a:	83 c4 0c             	add    esp,0xc
c000f92d:	53                   	push   ebx
c000f92e:	6a 00                	push   0x0
c000f930:	50                   	push   eax
c000f931:	e8 42 0e ff ff       	call   c0000778 <memset>
c000f936:	89 f0                	mov    eax,esi
c000f938:	83 c4 14             	add    esp,0x14
c000f93b:	5b                   	pop    ebx
c000f93c:	5e                   	pop    esi
c000f93d:	c3                   	ret    

c000f93e <hwTextMode_loadInData(VgaText*)>:
c000f93e:	55                   	push   ebp
c000f93f:	a1 20 d6 02 c0       	mov    eax,ds:0xc002d620
c000f944:	57                   	push   edi
c000f945:	56                   	push   esi
c000f946:	53                   	push   ebx
c000f947:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000f94b:	8b 97 ac 0f 00 00    	mov    edx,DWORD PTR [edi+0xfac]
c000f951:	85 d2                	test   edx,edx
c000f953:	7e 2f                	jle    c000f984 <hwTextMode_loadInData(VgaText*)+0x46>
c000f955:	8d a8 94 00 00 00    	lea    ebp,[eax+0x94]
c000f95b:	8d 4f 0c             	lea    ecx,[edi+0xc]
c000f95e:	31 f6                	xor    esi,esi
c000f960:	29 fd                	sub    ebp,edi
c000f962:	8d 1c 29             	lea    ebx,[ecx+ebp*1]
c000f965:	31 c0                	xor    eax,eax
c000f967:	66 8b 14 41          	mov    dx,WORD PTR [ecx+eax*2]
c000f96b:	66 89 14 43          	mov    WORD PTR [ebx+eax*2],dx
c000f96f:	40                   	inc    eax
c000f970:	83 f8 50             	cmp    eax,0x50
c000f973:	75 f2                	jne    c000f967 <hwTextMode_loadInData(VgaText*)+0x29>
c000f975:	81 c1 a0 00 00 00    	add    ecx,0xa0
c000f97b:	46                   	inc    esi
c000f97c:	39 b7 ac 0f 00 00    	cmp    DWORD PTR [edi+0xfac],esi
c000f982:	7f de                	jg     c000f962 <hwTextMode_loadInData(VgaText*)+0x24>
c000f984:	5b                   	pop    ebx
c000f985:	5e                   	pop    esi
c000f986:	5f                   	pop    edi
c000f987:	5d                   	pop    ebp
c000f988:	c3                   	ret    

c000f989 <hwTextMode_loadInTitle(VgaText*, char*)>:
c000f989:	55                   	push   ebp
c000f98a:	80 3d 80 e7 02 c0 00 	cmp    BYTE PTR ds:0xc002e780,0x0
c000f991:	57                   	push   edi
c000f992:	56                   	push   esi
c000f993:	53                   	push   ebx
c000f994:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000f998:	75 50                	jne    c000f9ea <hwTextMode_loadInTitle(VgaText*, char*)+0x61>
c000f99a:	8b ae d8 0f 00 00    	mov    ebp,DWORD PTR [esi+0xfd8]
c000f9a0:	8b 86 d4 0f 00 00    	mov    eax,DWORD PTR [esi+0xfd4]
c000f9a6:	8b 15 20 d6 02 c0    	mov    edx,DWORD PTR ds:0xc002d620
c000f9ac:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000f9b0:	8d ba a0 00 00 00    	lea    edi,[edx+0xa0]
c000f9b6:	eb 0e                	jmp    c000f9c6 <hwTextMode_loadInTitle(VgaText*, char*)+0x3d>
c000f9b8:	8b ae d8 0f 00 00    	mov    ebp,DWORD PTR [esi+0xfd8]
c000f9be:	8b 86 d4 0f 00 00    	mov    eax,DWORD PTR [esi+0xfd4]
c000f9c4:	89 da                	mov    edx,ebx
c000f9c6:	83 e5 0f             	and    ebp,0xf
c000f9c9:	c1 e0 04             	shl    eax,0x4
c000f9cc:	8d 5a 02             	lea    ebx,[edx+0x2]
c000f9cf:	0f b6 c0             	movzx  eax,al
c000f9d2:	41                   	inc    ecx
c000f9d3:	09 e8                	or     eax,ebp
c000f9d5:	0f b6 69 ff          	movzx  ebp,BYTE PTR [ecx-0x1]
c000f9d9:	c1 e0 08             	shl    eax,0x8
c000f9dc:	09 e8                	or     eax,ebp
c000f9de:	39 fb                	cmp    ebx,edi
c000f9e0:	66 89 02             	mov    WORD PTR [edx],ax
c000f9e3:	75 d3                	jne    c000f9b8 <hwTextMode_loadInTitle(VgaText*, char*)+0x2f>
c000f9e5:	5b                   	pop    ebx
c000f9e6:	5e                   	pop    esi
c000f9e7:	5f                   	pop    edi
c000f9e8:	5d                   	pop    ebp
c000f9e9:	c3                   	ret    
c000f9ea:	c7 86 d8 0f 00 00 02 00 00 00 	mov    DWORD PTR [esi+0xfd8],0x2
c000f9f4:	c7 86 d4 0f 00 00 00 00 00 00 	mov    DWORD PTR [esi+0xfd4],0x0
c000f9fe:	31 c0                	xor    eax,eax
c000fa00:	bd 02 00 00 00       	mov    ebp,0x2
c000fa05:	eb 9f                	jmp    c000f9a6 <hwTextMode_loadInTitle(VgaText*, char*)+0x1d>

c000fa07 <hwTextMode_showCursor(VgaText*, bool)>:
c000fa07:	56                   	push   esi
c000fa08:	80 3d 80 e7 02 c0 00 	cmp    BYTE PTR ds:0xc002e780,0x0
c000fa0f:	53                   	push   ebx
c000fa10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fa14:	75 39                	jne    c000fa4f <hwTextMode_showCursor(VgaText*, bool)+0x48>
c000fa16:	84 c0                	test   al,al
c000fa18:	74 38                	je     c000fa52 <hwTextMode_showCursor(VgaText*, bool)+0x4b>
c000fa1a:	bb d4 03 00 00       	mov    ebx,0x3d4
c000fa1f:	b0 0a                	mov    al,0xa
c000fa21:	89 da                	mov    edx,ebx
c000fa23:	ee                   	out    dx,al
c000fa24:	b9 d5 03 00 00       	mov    ecx,0x3d5
c000fa29:	89 ca                	mov    edx,ecx
c000fa2b:	ec                   	in     al,dx
c000fa2c:	b2 0f                	mov    dl,0xf
c000fa2e:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000fa32:	83 e0 c0             	and    eax,0xffffffc0
c000fa35:	2b 96 b8 0f 00 00    	sub    edx,DWORD PTR [esi+0xfb8]
c000fa3b:	09 d0                	or     eax,edx
c000fa3d:	89 ca                	mov    edx,ecx
c000fa3f:	ee                   	out    dx,al
c000fa40:	b0 0b                	mov    al,0xb
c000fa42:	89 da                	mov    edx,ebx
c000fa44:	ee                   	out    dx,al
c000fa45:	89 ca                	mov    edx,ecx
c000fa47:	ec                   	in     al,dx
c000fa48:	83 e0 e0             	and    eax,0xffffffe0
c000fa4b:	83 c8 0f             	or     eax,0xf
c000fa4e:	ee                   	out    dx,al
c000fa4f:	5b                   	pop    ebx
c000fa50:	5e                   	pop    esi
c000fa51:	c3                   	ret    
c000fa52:	b0 0a                	mov    al,0xa
c000fa54:	ba d4 03 00 00       	mov    edx,0x3d4
c000fa59:	ee                   	out    dx,al
c000fa5a:	b0 20                	mov    al,0x20
c000fa5c:	ba d5 03 00 00       	mov    edx,0x3d5
c000fa61:	ee                   	out    dx,al
c000fa62:	5b                   	pop    ebx
c000fa63:	5e                   	pop    esi
c000fa64:	c3                   	ret    

c000fa65 <hwTextMode_update(VgaText*)>:
c000fa65:	c3                   	ret    

c000fa66 <hwTextMode_updateCursor(VgaText*)>:
c000fa66:	56                   	push   esi
c000fa67:	80 3d 80 e7 02 c0 00 	cmp    BYTE PTR ds:0xc002e780,0x0
c000fa6e:	53                   	push   ebx
c000fa6f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fa73:	75 3f                	jne    c000fab4 <hwTextMode_updateCursor(VgaText*)+0x4e>
c000fa75:	be d4 03 00 00       	mov    esi,0x3d4
c000fa7a:	b9 19 00 00 00       	mov    ecx,0x19
c000fa7f:	89 f2                	mov    edx,esi
c000fa81:	2b 88 ac 0f 00 00    	sub    ecx,DWORD PTR [eax+0xfac]
c000fa87:	03 88 b4 0f 00 00    	add    ecx,DWORD PTR [eax+0xfb4]
c000fa8d:	8d 0c 89             	lea    ecx,[ecx+ecx*4]
c000fa90:	c1 e1 04             	shl    ecx,0x4
c000fa93:	03 88 b0 0f 00 00    	add    ecx,DWORD PTR [eax+0xfb0]
c000fa99:	b0 0f                	mov    al,0xf
c000fa9b:	ee                   	out    dx,al
c000fa9c:	bb d5 03 00 00       	mov    ebx,0x3d5
c000faa1:	88 c8                	mov    al,cl
c000faa3:	89 da                	mov    edx,ebx
c000faa5:	ee                   	out    dx,al
c000faa6:	b0 0e                	mov    al,0xe
c000faa8:	89 f2                	mov    edx,esi
c000faaa:	ee                   	out    dx,al
c000faab:	89 c8                	mov    eax,ecx
c000faad:	89 da                	mov    edx,ebx
c000faaf:	66 c1 e8 08          	shr    ax,0x8
c000fab3:	ee                   	out    dx,al
c000fab4:	5b                   	pop    ebx
c000fab5:	5e                   	pop    esi
c000fab6:	c3                   	ret    

c000fab7 <hwTextMode_disableBlink(VgaText*, bool)>:
c000fab7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fabb:	80 3d 80 e7 02 c0 00 	cmp    BYTE PTR ds:0xc002e780,0x0
c000fac2:	75 38                	jne    c000fafc <hwTextMode_disableBlink(VgaText*, bool)+0x45>
c000fac4:	ba da 03 00 00       	mov    edx,0x3da
c000fac9:	84 c0                	test   al,al
c000facb:	75 18                	jne    c000fae5 <hwTextMode_disableBlink(VgaText*, bool)+0x2e>
c000facd:	ec                   	in     al,dx
c000face:	b9 c0 03 00 00       	mov    ecx,0x3c0
c000fad3:	b0 30                	mov    al,0x30
c000fad5:	89 ca                	mov    edx,ecx
c000fad7:	ee                   	out    dx,al
c000fad8:	ba c1 03 00 00       	mov    edx,0x3c1
c000fadd:	ec                   	in     al,dx
c000fade:	83 c8 08             	or     eax,0x8
c000fae1:	89 ca                	mov    edx,ecx
c000fae3:	ee                   	out    dx,al
c000fae4:	c3                   	ret    
c000fae5:	ec                   	in     al,dx
c000fae6:	b9 c0 03 00 00       	mov    ecx,0x3c0
c000faeb:	b0 30                	mov    al,0x30
c000faed:	89 ca                	mov    edx,ecx
c000faef:	ee                   	out    dx,al
c000faf0:	ba c1 03 00 00       	mov    edx,0x3c1
c000faf5:	ec                   	in     al,dx
c000faf6:	83 e0 f7             	and    eax,0xfffffff7
c000faf9:	89 ca                	mov    edx,ecx
c000fafb:	ee                   	out    dx,al
c000fafc:	c3                   	ret    

c000fafd <hwTextMode_scrollScreen(VgaText*)>:
c000fafd:	55                   	push   ebp
c000fafe:	57                   	push   edi
c000faff:	56                   	push   esi
c000fb00:	53                   	push   ebx
c000fb01:	83 ec 1c             	sub    esp,0x1c
c000fb04:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000fb08:	80 3d 80 e7 02 c0 00 	cmp    BYTE PTR ds:0xc002e780,0x0
c000fb0f:	74 14                	je     c000fb25 <hwTextMode_scrollScreen(VgaText*)+0x28>
c000fb11:	c7 81 d0 0f 00 00 02 00 00 00 	mov    DWORD PTR [ecx+0xfd0],0x2
c000fb1b:	c7 81 cc 0f 00 00 00 00 00 00 	mov    DWORD PTR [ecx+0xfcc],0x0
c000fb25:	a1 20 d6 02 c0       	mov    eax,ds:0xc002d620
c000fb2a:	bd 02 00 00 00       	mov    ebp,0x2
c000fb2f:	05 a0 00 00 00       	add    eax,0xa0
c000fb34:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fb38:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000fb3c:	31 c0                	xor    eax,eax
c000fb3e:	eb 0b                	jmp    c000fb4b <hwTextMode_scrollScreen(VgaText*)+0x4e>
c000fb40:	81 fe a0 00 00 00    	cmp    esi,0xa0
c000fb46:	74 57                	je     c000fb9f <hwTextMode_scrollScreen(VgaText*)+0xa2>
c000fb48:	43                   	inc    ebx
c000fb49:	89 f0                	mov    eax,esi
c000fb4b:	8a 93 a0 00 00 00    	mov    dl,BYTE PTR [ebx+0xa0]
c000fb51:	8d bb a0 00 00 00    	lea    edi,[ebx+0xa0]
c000fb57:	88 13                	mov    BYTE PTR [ebx],dl
c000fb59:	8d 70 01             	lea    esi,[eax+0x1]
c000fb5c:	83 fd 18             	cmp    ebp,0x18
c000fb5f:	75 df                	jne    c000fb40 <hwTextMode_scrollScreen(VgaText*)+0x43>
c000fb61:	a8 01                	test   al,0x1
c000fb63:	75 13                	jne    c000fb78 <hwTextMode_scrollScreen(VgaText*)+0x7b>
c000fb65:	c6 07 20             	mov    BYTE PTR [edi],0x20
c000fb68:	81 fe a0 00 00 00    	cmp    esi,0xa0
c000fb6e:	75 d8                	jne    c000fb48 <hwTextMode_scrollScreen(VgaText*)+0x4b>
c000fb70:	83 c4 1c             	add    esp,0x1c
c000fb73:	5b                   	pop    ebx
c000fb74:	5e                   	pop    esi
c000fb75:	5f                   	pop    edi
c000fb76:	5d                   	pop    ebp
c000fb77:	c3                   	ret    
c000fb78:	83 ec 08             	sub    esp,0x8
c000fb7b:	0f b6 81 cc 0f 00 00 	movzx  eax,BYTE PTR [ecx+0xfcc]
c000fb82:	50                   	push   eax
c000fb83:	89 4c 24 3c          	mov    DWORD PTR [esp+0x3c],ecx
c000fb87:	0f b6 81 d0 0f 00 00 	movzx  eax,BYTE PTR [ecx+0xfd0]
c000fb8e:	50                   	push   eax
c000fb8f:	e8 92 0c 00 00       	call   c0010826 <VgaText::combineColours(unsigned char, unsigned char)>
c000fb94:	83 c4 10             	add    esp,0x10
c000fb97:	88 07                	mov    BYTE PTR [edi],al
c000fb99:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000fb9d:	eb c9                	jmp    c000fb68 <hwTextMode_scrollScreen(VgaText*)+0x6b>
c000fb9f:	45                   	inc    ebp
c000fba0:	81 44 24 0c a0 00 00 00 	add    DWORD PTR [esp+0xc],0xa0
c000fba8:	eb 8e                	jmp    c000fb38 <hwTextMode_scrollScreen(VgaText*)+0x3b>

c000fbaa <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)>:
c000fbaa:	57                   	push   edi
c000fbab:	80 3d 80 e7 02 c0 00 	cmp    BYTE PTR ds:0xc002e780,0x0
c000fbb2:	56                   	push   esi
c000fbb3:	53                   	push   ebx
c000fbb4:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000fbb8:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c000fbbc:	75 65                	jne    c000fc23 <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)+0x79>
c000fbbe:	0f b6 54 24 1c       	movzx  edx,BYTE PTR [esp+0x1c]
c000fbc3:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c000fbc8:	83 ec 08             	sub    esp,0x8
c000fbcb:	52                   	push   edx
c000fbcc:	50                   	push   eax
c000fbcd:	e8 54 0c 00 00       	call   c0010826 <VgaText::combineColours(unsigned char, unsigned char)>
c000fbd2:	5a                   	pop    edx
c000fbd3:	0f b6 c0             	movzx  eax,al
c000fbd6:	59                   	pop    ecx
c000fbd7:	50                   	push   eax
c000fbd8:	0f be c3             	movsx  eax,bl
c000fbdb:	50                   	push   eax
c000fbdc:	e8 eb 0c 00 00       	call   c00108cc <VgaText::combineCharAndColour(char, unsigned char)>
c000fbe1:	83 c4 10             	add    esp,0x10
c000fbe4:	8b 35 20 d6 02 c0    	mov    esi,DWORD PTR ds:0xc002d620
c000fbea:	80 3d 80 e7 02 c0 00 	cmp    BYTE PTR ds:0xc002e780,0x0
c000fbf1:	74 07                	je     c000fbfa <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)+0x50>
c000fbf3:	66 0f be c3          	movsx  ax,bl
c000fbf7:	80 cc 02             	or     ah,0x2
c000fbfa:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000fbfe:	ba 19 00 00 00       	mov    edx,0x19
c000fc03:	2b 91 ac 0f 00 00    	sub    edx,DWORD PTR [ecx+0xfac]
c000fc09:	8d 0c bf             	lea    ecx,[edi+edi*4]
c000fc0c:	8d 14 92             	lea    edx,[edx+edx*4]
c000fc0f:	c1 e1 04             	shl    ecx,0x4
c000fc12:	c1 e2 04             	shl    edx,0x4
c000fc15:	03 4c 24 20          	add    ecx,DWORD PTR [esp+0x20]
c000fc19:	01 ca                	add    edx,ecx
c000fc1b:	66 89 04 56          	mov    WORD PTR [esi+edx*2],ax
c000fc1f:	5b                   	pop    ebx
c000fc20:	5e                   	pop    esi
c000fc21:	5f                   	pop    edi
c000fc22:	c3                   	ret    
c000fc23:	b8 02 00 00 00       	mov    eax,0x2
c000fc28:	31 d2                	xor    edx,edx
c000fc2a:	eb 9c                	jmp    c000fbc8 <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)+0x1e>

c000fc2c <setupTextMode()>:
c000fc2c:	a1 10 04 00 00       	mov    eax,ds:0x410
c000fc31:	83 e0 30             	and    eax,0x30
c000fc34:	66 83 f8 30          	cmp    ax,0x30
c000fc38:	75 11                	jne    c000fc4b <setupTextMode()+0x1f>
c000fc3a:	81 2d 20 d6 02 c0 00 80 00 00 	sub    DWORD PTR ds:0xc002d620,0x8000
c000fc44:	c6 05 80 e7 02 c0 01 	mov    BYTE PTR ds:0xc002e780,0x1
c000fc4b:	c7 05 b8 e7 02 c0 b7 fa 00 c0 	mov    DWORD PTR ds:0xc002e7b8,0xc000fab7
c000fc55:	c7 05 a4 e7 02 c0 3e f9 00 c0 	mov    DWORD PTR ds:0xc002e7a4,0xc000f93e
c000fc5f:	c7 05 a0 e7 02 c0 89 f9 00 c0 	mov    DWORD PTR ds:0xc002e7a0,0xc000f989
c000fc69:	c7 05 ac e7 02 c0 fd fa 00 c0 	mov    DWORD PTR ds:0xc002e7ac,0xc000fafd
c000fc73:	c7 05 b4 e7 02 c0 07 fa 00 c0 	mov    DWORD PTR ds:0xc002e7b4,0xc000fa07
c000fc7d:	c7 05 a8 e7 02 c0 65 fa 00 c0 	mov    DWORD PTR ds:0xc002e7a8,0xc000fa65
c000fc87:	c7 05 b0 e7 02 c0 66 fa 00 c0 	mov    DWORD PTR ds:0xc002e7b0,0xc000fa66
c000fc91:	c7 05 bc e7 02 c0 aa fb 00 c0 	mov    DWORD PTR ds:0xc002e7bc,0xc000fbaa
c000fc9b:	c3                   	ret    

c000fc9c <kernel_main>:
c000fc9c:	57                   	push   edi
c000fc9d:	bf f9 03 00 00       	mov    edi,0x3f9
c000fca2:	56                   	push   esi
c000fca3:	31 f6                	xor    esi,esi
c000fca5:	53                   	push   ebx
c000fca6:	83 ec 10             	sub    esp,0x10
c000fca9:	e8 d2 09 00 00       	call   c0010680 <installVgaTextImplementation()>
c000fcae:	e8 79 ff ff ff       	call   c000fc2c <setupTextMode()>
c000fcb3:	89 f0                	mov    eax,esi
c000fcb5:	89 fa                	mov    edx,edi
c000fcb7:	ee                   	out    dx,al
c000fcb8:	bb fb 03 00 00       	mov    ebx,0x3fb
c000fcbd:	b0 80                	mov    al,0x80
c000fcbf:	89 da                	mov    edx,ebx
c000fcc1:	ee                   	out    dx,al
c000fcc2:	b1 03                	mov    cl,0x3
c000fcc4:	ba f8 03 00 00       	mov    edx,0x3f8
c000fcc9:	88 c8                	mov    al,cl
c000fccb:	ee                   	out    dx,al
c000fccc:	89 f0                	mov    eax,esi
c000fcce:	89 fa                	mov    edx,edi
c000fcd0:	ee                   	out    dx,al
c000fcd1:	88 c8                	mov    al,cl
c000fcd3:	89 da                	mov    edx,ebx
c000fcd5:	ee                   	out    dx,al
c000fcd6:	b0 c7                	mov    al,0xc7
c000fcd8:	ba fa 03 00 00       	mov    edx,0x3fa
c000fcdd:	ee                   	out    dx,al
c000fcde:	b0 0b                	mov    al,0xb
c000fce0:	ba fc 03 00 00       	mov    edx,0x3fc
c000fce5:	ee                   	out    dx,al
c000fce6:	83 ec 0c             	sub    esp,0xc
c000fce9:	68 3c a3 02 c0       	push   0xc002a33c
c000fcee:	e8 f0 32 00 00       	call   c0012fe3 <Dbg::kprintf(char const*, ...)>
c000fcf3:	a1 24 05 00 00       	mov    eax,ds:0x524
c000fcf8:	05 ff 0f 00 00       	add    eax,0xfff
c000fcfd:	25 00 f0 ff ff       	and    eax,0xfffff000
c000fd02:	89 04 24             	mov    DWORD PTR [esp],eax
c000fd05:	e8 31 04 00 00       	call   c001013b <Phys::physicalMemorySetup(unsigned int)>
c000fd0a:	e8 d3 20 00 00       	call   c0011de2 <Virt::virtualMemorySetup()>
c000fd0f:	8b 1d 00 05 00 00    	mov    ebx,DWORD PTR ds:0x500
c000fd15:	83 c4 10             	add    esp,0x10
c000fd18:	3b 1d 04 05 00 00    	cmp    ebx,DWORD PTR ds:0x504
c000fd1e:	75 0e                	jne    c000fd2e <kernel_main+0x92>
c000fd20:	89 d8                	mov    eax,ebx
c000fd22:	25 48 03 00 00       	and    eax,0x348
c000fd27:	3d 00 03 00 00       	cmp    eax,0x300
c000fd2c:	74 10                	je     c000fd3e <kernel_main+0xa2>
c000fd2e:	83 ec 0c             	sub    esp,0xc
c000fd31:	68 5d bd 02 c0       	push   0xc002bd5d
c000fd36:	e8 5a a9 00 00       	call   c001a695 <Krnl::panic(char const*)>
c000fd3b:	83 c4 10             	add    esp,0x10
c000fd3e:	83 ec 0c             	sub    esp,0xc
c000fd41:	89 1d 00 e7 02 c0    	mov    DWORD PTR ds:0xc002e700,ebx
c000fd47:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000fd4b:	53                   	push   ebx
c000fd4c:	e8 a3 22 00 00       	call   c0011ff4 <VAS::VAS()>
c000fd51:	89 1d 68 e8 02 c0    	mov    DWORD PTR ds:0xc002e868,ebx
c000fd57:	e8 c4 02 ff ff       	call   c0000020 <callGlobalConstructors>
c000fd5c:	c7 04 24 53 a3 02 c0 	mov    DWORD PTR [esp],0xc002a353
c000fd63:	e8 7b 32 00 00       	call   c0012fe3 <Dbg::kprintf(char const*, ...)>
c000fd68:	e8 f4 20 00 00       	call   c0011e61 <Virt::swappingSetup()>
c000fd6d:	c7 04 24 ec 01 00 00 	mov    DWORD PTR [esp],0x1ec
c000fd74:	e8 6b fb ff ff       	call   c000f8e4 <malloc>
c000fd79:	89 04 24             	mov    DWORD PTR [esp],eax
c000fd7c:	89 c6                	mov    esi,eax
c000fd7e:	e8 5b ea ff ff       	call   c000e7de <Computer::Computer()>
c000fd83:	58                   	pop    eax
c000fd84:	89 35 e8 e6 02 c0    	mov    DWORD PTR ds:0xc002e6e8,esi
c000fd8a:	5a                   	pop    edx
c000fd8b:	56                   	push   esi
c000fd8c:	68 70 a3 02 c0       	push   0xc002a370
c000fd91:	e8 4d 32 00 00       	call   c0012fe3 <Dbg::kprintf(char const*, ...)>
c000fd96:	a1 e8 e6 02 c0       	mov    eax,ds:0xc002e6e8
c000fd9b:	8b 10                	mov    edx,DWORD PTR [eax]
c000fd9d:	6a 00                	push   0x0
c000fd9f:	6a 00                	push   0x0
c000fda1:	6a 00                	push   0x0
c000fda3:	50                   	push   eax
c000fda4:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000fda7:	83 c4 14             	add    esp,0x14
c000fdaa:	53                   	push   ebx
c000fdab:	e8 de 24 00 00       	call   c001228e <VAS::~VAS()>
c000fdb0:	c7 04 24 83 a3 02 c0 	mov    DWORD PTR [esp],0xc002a383
c000fdb7:	e8 d9 a8 00 00       	call   c001a695 <Krnl::panic(char const*)>
c000fdbc:	83 c4 20             	add    esp,0x20
c000fdbf:	5b                   	pop    ebx
c000fdc0:	5e                   	pop    esi
c000fdc1:	5f                   	pop    edi
c000fdc2:	c3                   	ret    

c000fdc3 <Phys::allocateDMA(unsigned long)>:
c000fdc3:	55                   	push   ebp
c000fdc4:	31 d2                	xor    edx,edx
c000fdc6:	57                   	push   edi
c000fdc7:	31 ed                	xor    ebp,ebp
c000fdc9:	56                   	push   esi
c000fdca:	31 c9                	xor    ecx,ecx
c000fdcc:	53                   	push   ebx
c000fdcd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fdd1:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c000fdd7:	31 c0                	xor    eax,eax
c000fdd9:	c1 ee 0c             	shr    esi,0xc
c000fddc:	eb 17                	jmp    c000fdf5 <Phys::allocateDMA(unsigned long)+0x32>
c000fdde:	85 c9                	test   ecx,ecx
c000fde0:	75 04                	jne    c000fde6 <Phys::allocateDMA(unsigned long)+0x23>
c000fde2:	89 d5                	mov    ebp,edx
c000fde4:	89 d0                	mov    eax,edx
c000fde6:	8d 59 01             	lea    ebx,[ecx+0x1]
c000fde9:	39 de                	cmp    esi,ebx
c000fdeb:	74 20                	je     c000fe0d <Phys::allocateDMA(unsigned long)+0x4a>
c000fded:	42                   	inc    edx
c000fdee:	89 d9                	mov    ecx,ebx
c000fdf0:	83 fa 2f             	cmp    edx,0x2f
c000fdf3:	7f 11                	jg     c000fe06 <Phys::allocateDMA(unsigned long)+0x43>
c000fdf5:	80 ba 40 e7 02 c0 00 	cmp    BYTE PTR [edx-0x3ffd18c0],0x0
c000fdfc:	74 e0                	je     c000fdde <Phys::allocateDMA(unsigned long)+0x1b>
c000fdfe:	31 c9                	xor    ecx,ecx
c000fe00:	42                   	inc    edx
c000fe01:	83 fa 2f             	cmp    edx,0x2f
c000fe04:	7e ef                	jle    c000fdf5 <Phys::allocateDMA(unsigned long)+0x32>
c000fe06:	5b                   	pop    ebx
c000fe07:	31 c0                	xor    eax,eax
c000fe09:	5e                   	pop    esi
c000fe0a:	5f                   	pop    edi
c000fe0b:	5d                   	pop    ebp
c000fe0c:	c3                   	ret    
c000fe0d:	8d 14 30             	lea    edx,[eax+esi*1]
c000fe10:	89 d7                	mov    edi,edx
c000fe12:	4f                   	dec    edi
c000fe13:	79 03                	jns    c000fe18 <Phys::allocateDMA(unsigned long)+0x55>
c000fe15:	8d 7a 0e             	lea    edi,[edx+0xe]
c000fe18:	c1 ff 04             	sar    edi,0x4
c000fe1b:	89 c2                	mov    edx,eax
c000fe1d:	c1 fa 04             	sar    edx,0x4
c000fe20:	39 fa                	cmp    edx,edi
c000fe22:	75 2f                	jne    c000fe53 <Phys::allocateDMA(unsigned long)+0x90>
c000fe24:	85 db                	test   ebx,ebx
c000fe26:	74 1a                	je     c000fe42 <Phys::allocateDMA(unsigned long)+0x7f>
c000fe28:	be 40 e7 02 c0       	mov    esi,0xc002e740
c000fe2d:	8d 90 40 e7 02 c0    	lea    edx,[eax-0x3ffd18c0]
c000fe33:	f7 d6                	not    esi
c000fe35:	29 c6                	sub    esi,eax
c000fe37:	c6 02 01             	mov    BYTE PTR [edx],0x1
c000fe3a:	42                   	inc    edx
c000fe3b:	8d 1c 16             	lea    ebx,[esi+edx*1]
c000fe3e:	39 d9                	cmp    ecx,ebx
c000fe40:	7f f5                	jg     c000fe37 <Phys::allocateDMA(unsigned long)+0x74>
c000fe42:	85 ff                	test   edi,edi
c000fe44:	74 13                	je     c000fe59 <Phys::allocateDMA(unsigned long)+0x96>
c000fe46:	5b                   	pop    ebx
c000fe47:	05 50 20 0c 00       	add    eax,0xc2050
c000fe4c:	5e                   	pop    esi
c000fe4d:	c1 e0 0c             	shl    eax,0xc
c000fe50:	5f                   	pop    edi
c000fe51:	5d                   	pop    ebp
c000fe52:	c3                   	ret    
c000fe53:	89 ea                	mov    edx,ebp
c000fe55:	31 c9                	xor    ecx,ecx
c000fe57:	eb a7                	jmp    c000fe00 <Phys::allocateDMA(unsigned long)+0x3d>
c000fe59:	5b                   	pop    ebx
c000fe5a:	c1 e0 0c             	shl    eax,0xc
c000fe5d:	5e                   	pop    esi
c000fe5e:	2d 00 00 ff 3d       	sub    eax,0x3dff0000
c000fe63:	5f                   	pop    edi
c000fe64:	5d                   	pop    ebp
c000fe65:	c3                   	ret    

c000fe66 <Phys::freeDMA(unsigned long, unsigned long)>:
c000fe66:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fe6a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000fe6e:	81 c1 ff 0f 00 00    	add    ecx,0xfff
c000fe74:	c1 e9 0c             	shr    ecx,0xc
c000fe77:	3d ff ff 05 c2       	cmp    eax,0xc205ffff
c000fe7c:	76 25                	jbe    c000fea3 <Phys::freeDMA(unsigned long, unsigned long)+0x3d>
c000fe7e:	05 00 00 fa 3d       	add    eax,0x3dfa0000
c000fe83:	c1 e8 0c             	shr    eax,0xc
c000fe86:	8d 50 10             	lea    edx,[eax+0x10]
c000fe89:	85 c9                	test   ecx,ecx
c000fe8b:	74 15                	je     c000fea2 <Phys::freeDMA(unsigned long, unsigned long)+0x3c>
c000fe8d:	8d 82 40 e7 02 c0    	lea    eax,[edx-0x3ffd18c0]
c000fe93:	8d 94 11 40 e7 02 c0 	lea    edx,[ecx+edx*1-0x3ffd18c0]
c000fe9a:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000fe9d:	40                   	inc    eax
c000fe9e:	39 d0                	cmp    eax,edx
c000fea0:	75 f8                	jne    c000fe9a <Phys::freeDMA(unsigned long, unsigned long)+0x34>
c000fea2:	c3                   	ret    
c000fea3:	8d 90 00 00 ff 3d    	lea    edx,[eax+0x3dff0000]
c000fea9:	c1 ea 0c             	shr    edx,0xc
c000feac:	eb db                	jmp    c000fe89 <Phys::freeDMA(unsigned long, unsigned long)+0x23>

c000feae <Phys::setPageState(unsigned long, bool)>:
c000feae:	56                   	push   esi
c000feaf:	ba 01 00 00 00       	mov    edx,0x1
c000feb4:	53                   	push   ebx
c000feb5:	8b 35 10 d6 02 c0    	mov    esi,DWORD PTR ds:0xc002d610
c000febb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000febf:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000fec3:	89 c8                	mov    eax,ecx
c000fec5:	83 e1 07             	and    ecx,0x7
c000fec8:	c1 e8 03             	shr    eax,0x3
c000fecb:	d3 e3                	shl    ebx,cl
c000fecd:	01 c6                	add    esi,eax
c000fecf:	d3 e2                	shl    edx,cl
c000fed1:	f7 d2                	not    edx
c000fed3:	20 16                	and    BYTE PTR [esi],dl
c000fed5:	03 05 10 d6 02 c0    	add    eax,DWORD PTR ds:0xc002d610
c000fedb:	08 18                	or     BYTE PTR [eax],bl
c000fedd:	5b                   	pop    ebx
c000fede:	5e                   	pop    esi
c000fedf:	c3                   	ret    

c000fee0 <Phys::getPageState(unsigned long)>:
c000fee0:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000fee4:	8b 15 10 d6 02 c0    	mov    edx,DWORD PTR ds:0xc002d610
c000feea:	89 c8                	mov    eax,ecx
c000feec:	83 e1 07             	and    ecx,0x7
c000feef:	c1 e8 03             	shr    eax,0x3
c000fef2:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c000fef6:	d3 f8                	sar    eax,cl
c000fef8:	83 e0 01             	and    eax,0x1
c000fefb:	c3                   	ret    

c000fefc <Phys::freePage(unsigned long)>:
c000fefc:	53                   	push   ebx
c000fefd:	83 ec 08             	sub    esp,0x8
c000ff00:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ff04:	81 fb ff ff 07 00    	cmp    ebx,0x7ffff
c000ff0a:	76 57                	jbe    c000ff63 <Phys::freePage(unsigned long)+0x67>
c000ff0c:	c1 eb 0c             	shr    ebx,0xc
c000ff0f:	53                   	push   ebx
c000ff10:	e8 cb ff ff ff       	call   c000fee0 <Phys::getPageState(unsigned long)>
c000ff15:	5a                   	pop    edx
c000ff16:	84 c0                	test   al,al
c000ff18:	74 5b                	je     c000ff75 <Phys::freePage(unsigned long)+0x79>
c000ff1a:	a1 2c e7 02 c0       	mov    eax,ds:0xc002e72c
c000ff1f:	48                   	dec    eax
c000ff20:	a3 2c e7 02 c0       	mov    ds:0xc002e72c,eax
c000ff25:	8d 04 80             	lea    eax,[eax+eax*4]
c000ff28:	8d 04 80             	lea    eax,[eax+eax*4]
c000ff2b:	c1 e0 02             	shl    eax,0x2
c000ff2e:	99                   	cdq    
c000ff2f:	f7 3d 30 e7 02 c0    	idiv   DWORD PTR ds:0xc002e730
c000ff35:	39 05 28 e7 02 c0    	cmp    DWORD PTR ds:0xc002e728,eax
c000ff3b:	75 13                	jne    c000ff50 <Phys::freePage(unsigned long)+0x54>
c000ff3d:	83 ec 08             	sub    esp,0x8
c000ff40:	6a 00                	push   0x0
c000ff42:	53                   	push   ebx
c000ff43:	e8 66 ff ff ff       	call   c000feae <Phys::setPageState(unsigned long, bool)>
c000ff48:	83 c4 10             	add    esp,0x10
c000ff4b:	83 c4 08             	add    esp,0x8
c000ff4e:	5b                   	pop    ebx
c000ff4f:	c3                   	ret    
c000ff50:	83 ec 0c             	sub    esp,0xc
c000ff53:	a3 28 e7 02 c0       	mov    ds:0xc002e728,eax
c000ff58:	50                   	push   eax
c000ff59:	e8 b6 0a 00 00       	call   c0010a14 <VgaText::updateRAMUsageDisplay(int)>
c000ff5e:	83 c4 10             	add    esp,0x10
c000ff61:	eb da                	jmp    c000ff3d <Phys::freePage(unsigned long)+0x41>
c000ff63:	68 00 10 00 00       	push   0x1000
c000ff68:	53                   	push   ebx
c000ff69:	e8 f8 fe ff ff       	call   c000fe66 <Phys::freeDMA(unsigned long, unsigned long)>
c000ff6e:	59                   	pop    ecx
c000ff6f:	5b                   	pop    ebx
c000ff70:	83 c4 08             	add    esp,0x8
c000ff73:	5b                   	pop    ebx
c000ff74:	c3                   	ret    
c000ff75:	c7 44 24 10 9e a3 02 c0 	mov    DWORD PTR [esp+0x10],0xc002a39e
c000ff7d:	83 c4 08             	add    esp,0x8
c000ff80:	5b                   	pop    ebx
c000ff81:	e9 0f a7 00 00       	jmp    c001a695 <Krnl::panic(char const*)>

c000ff86 <Phys::allocatePage()>:
c000ff86:	56                   	push   esi
c000ff87:	53                   	push   ebx
c000ff88:	83 ec 14             	sub    esp,0x14
c000ff8b:	8b 35 20 e7 02 c0    	mov    esi,DWORD PTR ds:0xc002e720
c000ff91:	89 f3                	mov    ebx,esi
c000ff93:	eb 0a                	jmp    c000ff9f <Phys::allocatePage()+0x19>
c000ff95:	89 1d 20 e7 02 c0    	mov    DWORD PTR ds:0xc002e720,ebx
c000ff9b:	39 de                	cmp    esi,ebx
c000ff9d:	74 24                	je     c000ffc3 <Phys::allocatePage()+0x3d>
c000ff9f:	53                   	push   ebx
c000ffa0:	e8 3b ff ff ff       	call   c000fee0 <Phys::getPageState(unsigned long)>
c000ffa5:	5a                   	pop    edx
c000ffa6:	84 c0                	test   al,al
c000ffa8:	74 5a                	je     c0010004 <Phys::allocatePage()+0x7e>
c000ffaa:	43                   	inc    ebx
c000ffab:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000ffb1:	75 e2                	jne    c000ff95 <Phys::allocatePage()+0xf>
c000ffb3:	31 db                	xor    ebx,ebx
c000ffb5:	c7 05 20 e7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e720,0x0
c000ffbf:	39 de                	cmp    esi,ebx
c000ffc1:	75 dc                	jne    c000ff9f <Phys::allocatePage()+0x19>
c000ffc3:	83 ec 0c             	sub    esp,0xc
c000ffc6:	68 db a3 02 c0       	push   0xc002a3db
c000ffcb:	e8 13 30 00 00       	call   c0012fe3 <Dbg::kprintf(char const*, ...)>
c000ffd0:	c7 04 24 00 10 00 00 	mov    DWORD PTR [esp],0x1000
c000ffd7:	e8 e7 fd ff ff       	call   c000fdc3 <Phys::allocateDMA(unsigned long)>
c000ffdc:	83 c4 10             	add    esp,0x10
c000ffdf:	85 c0                	test   eax,eax
c000ffe1:	75 5b                	jne    c001003e <Phys::allocatePage()+0xb8>
c000ffe3:	83 ec 0c             	sub    esp,0xc
c000ffe6:	68 ec a3 02 c0       	push   0xc002a3ec
c000ffeb:	e8 a5 a6 00 00       	call   c001a695 <Krnl::panic(char const*)>
c000fff0:	83 c4 10             	add    esp,0x10
c000fff3:	8b 1d 20 e7 02 c0    	mov    ebx,DWORD PTR ds:0xc002e720
c000fff9:	53                   	push   ebx
c000fffa:	e8 e1 fe ff ff       	call   c000fee0 <Phys::getPageState(unsigned long)>
c000ffff:	5a                   	pop    edx
c0010000:	84 c0                	test   al,al
c0010002:	75 a6                	jne    c000ffaa <Phys::allocatePage()+0x24>
c0010004:	6a 01                	push   0x1
c0010006:	53                   	push   ebx
c0010007:	e8 a2 fe ff ff       	call   c000feae <Phys::setPageState(unsigned long, bool)>
c001000c:	a1 2c e7 02 c0       	mov    eax,ds:0xc002e72c
c0010011:	40                   	inc    eax
c0010012:	a3 2c e7 02 c0       	mov    ds:0xc002e72c,eax
c0010017:	8d 04 80             	lea    eax,[eax+eax*4]
c001001a:	8d 04 80             	lea    eax,[eax+eax*4]
c001001d:	c1 e0 02             	shl    eax,0x2
c0010020:	99                   	cdq    
c0010021:	f7 3d 30 e7 02 c0    	idiv   DWORD PTR ds:0xc002e730
c0010027:	5a                   	pop    edx
c0010028:	39 05 28 e7 02 c0    	cmp    DWORD PTR ds:0xc002e728,eax
c001002e:	59                   	pop    ecx
c001002f:	75 13                	jne    c0010044 <Phys::allocatePage()+0xbe>
c0010031:	83 f8 46             	cmp    eax,0x46
c0010034:	7f 2c                	jg     c0010062 <Phys::allocatePage()+0xdc>
c0010036:	a1 20 e7 02 c0       	mov    eax,ds:0xc002e720
c001003b:	c1 e0 0c             	shl    eax,0xc
c001003e:	83 c4 14             	add    esp,0x14
c0010041:	5b                   	pop    ebx
c0010042:	5e                   	pop    esi
c0010043:	c3                   	ret    
c0010044:	83 ec 0c             	sub    esp,0xc
c0010047:	a3 28 e7 02 c0       	mov    ds:0xc002e728,eax
c001004c:	50                   	push   eax
c001004d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0010051:	e8 be 09 00 00       	call   c0010a14 <VgaText::updateRAMUsageDisplay(int)>
c0010056:	83 c4 10             	add    esp,0x10
c0010059:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001005d:	83 f8 46             	cmp    eax,0x46
c0010060:	7e d4                	jle    c0010036 <Phys::allocatePage()+0xb0>
c0010062:	e8 53 de 00 00       	call   c001deba <lockScheduler()>
c0010067:	83 ec 0c             	sub    esp,0xc
c001006a:	68 b4 a3 02 c0       	push   0xc002a3b4
c001006f:	e8 6f 2f 00 00       	call   c0012fe3 <Dbg::kprintf(char const*, ...)>
c0010074:	a1 08 1c 03 c0       	mov    eax,ds:0xc0031c08
c0010079:	83 c4 10             	add    esp,0x10
c001007c:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c001007f:	83 f8 02             	cmp    eax,0x2
c0010082:	74 07                	je     c001008b <Phys::allocatePage()+0x105>
c0010084:	e8 33 de 00 00       	call   c001debc <unlockScheduler()>
c0010089:	eb ab                	jmp    c0010036 <Phys::allocatePage()+0xb0>
c001008b:	83 ec 0c             	sub    esp,0xc
c001008e:	68 c2 a3 02 c0       	push   0xc002a3c2
c0010093:	e8 4b 2f 00 00       	call   c0012fe3 <Dbg::kprintf(char const*, ...)>
c0010098:	58                   	pop    eax
c0010099:	ff 35 08 1c 03 c0    	push   DWORD PTR ds:0xc0031c08
c001009f:	e8 2e e4 00 00       	call   c001e4d2 <unblockTask(ThreadControlBlock*)>
c00100a4:	83 c4 10             	add    esp,0x10
c00100a7:	eb db                	jmp    c0010084 <Phys::allocatePage()+0xfe>

c00100a9 <Phys::allocateContiguousPages(int)>:
c00100a9:	57                   	push   edi
c00100aa:	56                   	push   esi
c00100ab:	53                   	push   ebx
c00100ac:	31 db                	xor    ebx,ebx
c00100ae:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c00100b2:	e8 03 de 00 00       	call   c001deba <lockScheduler()>
c00100b7:	85 db                	test   ebx,ebx
c00100b9:	75 11                	jne    c00100cc <Phys::allocateContiguousPages(int)+0x23>
c00100bb:	e8 c6 fe ff ff       	call   c000ff86 <Phys::allocatePage()>
c00100c0:	83 ff 01             	cmp    edi,0x1
c00100c3:	89 c6                	mov    esi,eax
c00100c5:	74 21                	je     c00100e8 <Phys::allocateContiguousPages(int)+0x3f>
c00100c7:	bb 01 00 00 00       	mov    ebx,0x1
c00100cc:	e8 b5 fe ff ff       	call   c000ff86 <Phys::allocatePage()>
c00100d1:	89 da                	mov    edx,ebx
c00100d3:	c1 e2 0c             	shl    edx,0xc
c00100d6:	01 f2                	add    edx,esi
c00100d8:	39 c2                	cmp    edx,eax
c00100da:	74 17                	je     c00100f3 <Phys::allocateContiguousPages(int)+0x4a>
c00100dc:	bb 01 00 00 00       	mov    ebx,0x1
c00100e1:	89 c6                	mov    esi,eax
c00100e3:	83 ff 01             	cmp    edi,0x1
c00100e6:	75 e4                	jne    c00100cc <Phys::allocateContiguousPages(int)+0x23>
c00100e8:	e8 cf dd 00 00       	call   c001debc <unlockScheduler()>
c00100ed:	89 f0                	mov    eax,esi
c00100ef:	5b                   	pop    ebx
c00100f0:	5e                   	pop    esi
c00100f1:	5f                   	pop    edi
c00100f2:	c3                   	ret    
c00100f3:	43                   	inc    ebx
c00100f4:	39 fb                	cmp    ebx,edi
c00100f6:	75 bf                	jne    c00100b7 <Phys::allocateContiguousPages(int)+0xe>
c00100f8:	e8 bf dd 00 00       	call   c001debc <unlockScheduler()>
c00100fd:	89 f0                	mov    eax,esi
c00100ff:	5b                   	pop    ebx
c0010100:	5e                   	pop    esi
c0010101:	5f                   	pop    edi
c0010102:	c3                   	ret    

c0010103 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c0010103:	56                   	push   esi
c0010104:	53                   	push   ebx
c0010105:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010109:	39 1d 24 e7 02 c0    	cmp    DWORD PTR ds:0xc002e724,ebx
c001010f:	73 06                	jae    c0010117 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c0010111:	89 1d 24 e7 02 c0    	mov    DWORD PTR ds:0xc002e724,ebx
c0010117:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001011b:	c1 eb 0c             	shr    ebx,0xc
c001011e:	c1 e8 0c             	shr    eax,0xc
c0010121:	39 d8                	cmp    eax,ebx
c0010123:	73 13                	jae    c0010138 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c0010125:	6a 00                	push   0x0
c0010127:	8d 70 01             	lea    esi,[eax+0x1]
c001012a:	50                   	push   eax
c001012b:	e8 7e fd ff ff       	call   c000feae <Phys::setPageState(unsigned long, bool)>
c0010130:	5a                   	pop    edx
c0010131:	89 f0                	mov    eax,esi
c0010133:	59                   	pop    ecx
c0010134:	39 f3                	cmp    ebx,esi
c0010136:	75 ed                	jne    c0010125 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c0010138:	5b                   	pop    ebx
c0010139:	5e                   	pop    esi
c001013a:	c3                   	ret    

c001013b <Phys::physicalMemorySetup(unsigned int)>:
c001013b:	55                   	push   ebp
c001013c:	57                   	push   edi
c001013d:	56                   	push   esi
c001013e:	53                   	push   ebx
c001013f:	31 db                	xor    ebx,ebx
c0010141:	83 ec 40             	sub    esp,0x40
c0010144:	6a 30                	push   0x30
c0010146:	6a 00                	push   0x0
c0010148:	68 40 e7 02 c0       	push   0xc002e740
c001014d:	e8 26 06 ff ff       	call   c0000778 <memset>
c0010152:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0010156:	25 00 f0 ff ff       	and    eax,0xfffff000
c001015b:	05 00 10 00 00       	add    eax,0x1000
c0010160:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0010164:	83 c4 10             	add    esp,0x10
c0010167:	83 ec 08             	sub    esp,0x8
c001016a:	6a 01                	push   0x1
c001016c:	53                   	push   ebx
c001016d:	43                   	inc    ebx
c001016e:	e8 3b fd ff ff       	call   c000feae <Phys::setPageState(unsigned long, bool)>
c0010173:	83 c4 10             	add    esp,0x10
c0010176:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c001017c:	75 e9                	jne    c0010167 <Phys::physicalMemorySetup(unsigned int)+0x2c>
c001017e:	0f b7 05 13 05 00 c2 	movzx  eax,WORD PTR ds:0xc2000513
c0010185:	66 85 c0             	test   ax,ax
c0010188:	0f 84 8e 01 00 00    	je     c001031c <Phys::physicalMemorySetup(unsigned int)+0x1e1>
c001018e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0010192:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001019a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001019e:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c00101a3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00101a7:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c00101af:	eb 15                	jmp    c00101c6 <Phys::physicalMemorySetup(unsigned int)+0x8b>
c00101b1:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c00101b5:	83 c3 18             	add    ebx,0x18
c00101b8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00101bc:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c00101c0:	0f 84 66 01 00 00    	je     c001032c <Phys::physicalMemorySetup(unsigned int)+0x1f1>
c00101c6:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00101c9:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00101cc:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00101cf:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00101d3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00101d7:	8b 33                	mov    esi,DWORD PTR [ebx]
c00101d9:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c00101dc:	01 f0                	add    eax,esi
c00101de:	55                   	push   ebp
c00101df:	11 fa                	adc    edx,edi
c00101e1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00101e5:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00101e9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00101ed:	56                   	push   esi
c00101ee:	68 24 a4 02 c0       	push   0xc002a424
c00101f3:	e8 eb 2d 00 00       	call   c0012fe3 <Dbg::kprintf(char const*, ...)>
c00101f8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00101fc:	83 c4 10             	add    esp,0x10
c00101ff:	09 f8                	or     eax,edi
c0010201:	0f 85 25 01 00 00    	jne    c001032c <Phys::physicalMemorySetup(unsigned int)+0x1f1>
c0010207:	4d                   	dec    ebp
c0010208:	75 a7                	jne    c00101b1 <Phys::physicalMemorySetup(unsigned int)+0x76>
c001020a:	ba 00 00 08 00       	mov    edx,0x80000
c001020f:	89 c1                	mov    ecx,eax
c0010211:	39 f2                	cmp    edx,esi
c0010213:	19 f9                	sbb    ecx,edi
c0010215:	0f 82 a7 00 00 00    	jb     c00102c2 <Phys::physicalMemorySetup(unsigned int)+0x187>
c001021b:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c001021f:	89 c1                	mov    ecx,eax
c0010221:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c0010225:	0f 83 97 00 00 00    	jae    c00102c2 <Phys::physicalMemorySetup(unsigned int)+0x187>
c001022b:	ba 00 00 0a 00       	mov    edx,0xa0000
c0010230:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0010234:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0010238:	39 fa                	cmp    edx,edi
c001023a:	19 e8                	sbb    eax,ebp
c001023c:	0f 82 14 01 00 00    	jb     c0010356 <Phys::physicalMemorySetup(unsigned int)+0x21b>
c0010242:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0010246:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c001024a:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c0010250:	ba ff 1f 00 00       	mov    edx,0x1fff
c0010255:	83 d5 ff             	adc    ebp,0xffffffff
c0010258:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c001025c:	31 c0                	xor    eax,eax
c001025e:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c0010262:	39 fa                	cmp    edx,edi
c0010264:	89 c1                	mov    ecx,eax
c0010266:	19 e9                	sbb    ecx,ebp
c0010268:	0f 83 43 ff ff ff    	jae    c00101b1 <Phys::physicalMemorySetup(unsigned int)+0x76>
c001026e:	be 00 00 08 00       	mov    esi,0x80000
c0010273:	50                   	push   eax
c0010274:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0010278:	57                   	push   edi
c0010279:	56                   	push   esi
c001027a:	68 48 a4 02 c0       	push   0xc002a448
c001027f:	e8 5f 2d 00 00       	call   c0012fe3 <Dbg::kprintf(char const*, ...)>
c0010284:	5a                   	pop    edx
c0010285:	59                   	pop    ecx
c0010286:	57                   	push   edi
c0010287:	56                   	push   esi
c0010288:	e8 76 fe ff ff       	call   c0010103 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c001028d:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0010291:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0010295:	83 c4 0c             	add    esp,0xc
c0010298:	0f ac d0 0c          	shrd   eax,edx,0xc
c001029c:	03 05 30 e7 02 c0    	add    eax,DWORD PTR ds:0xc002e730
c00102a2:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00102a9:	a3 30 e7 02 c0       	mov    ds:0xc002e730,eax
c00102ae:	52                   	push   edx
c00102af:	50                   	push   eax
c00102b0:	68 08 a4 02 c0       	push   0xc002a408
c00102b5:	e8 29 2d 00 00       	call   c0012fe3 <Dbg::kprintf(char const*, ...)>
c00102ba:	83 c4 10             	add    esp,0x10
c00102bd:	e9 ef fe ff ff       	jmp    c00101b1 <Phys::physicalMemorySetup(unsigned int)+0x76>
c00102c2:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c00102c6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00102ca:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00102ce:	39 ea                	cmp    edx,ebp
c00102d0:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c00102d4:	0f 82 d7 fe ff ff    	jb     c00101b1 <Phys::physicalMemorySetup(unsigned int)+0x76>
c00102da:	ba ff 1f 00 00       	mov    edx,0x1fff
c00102df:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c00102e3:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c00102e7:	0f 83 c4 fe ff ff    	jae    c00101b1 <Phys::physicalMemorySetup(unsigned int)+0x76>
c00102ed:	39 ee                	cmp    esi,ebp
c00102ef:	89 f8                	mov    eax,edi
c00102f1:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c00102f5:	0f 83 78 ff ff ff    	jae    c0010273 <Phys::physicalMemorySetup(unsigned int)+0x138>
c00102fb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00102ff:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010303:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0010307:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001030b:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c001030f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0010313:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0010317:	e9 57 ff ff ff       	jmp    c0010273 <Phys::physicalMemorySetup(unsigned int)+0x138>
c001031c:	83 ec 0c             	sub    esp,0xc
c001031f:	68 fa a3 02 c0       	push   0xc002a3fa
c0010324:	e8 6c a3 00 00       	call   c001a695 <Krnl::panic(char const*)>
c0010329:	83 c4 10             	add    esp,0x10
c001032c:	bb 40 01 00 00       	mov    ebx,0x140
c0010331:	83 ec 08             	sub    esp,0x8
c0010334:	6a 00                	push   0x0
c0010336:	53                   	push   ebx
c0010337:	43                   	inc    ebx
c0010338:	e8 71 fb ff ff       	call   c000feae <Phys::setPageState(unsigned long, bool)>
c001033d:	ff 05 30 e7 02 c0    	inc    DWORD PTR ds:0xc002e730
c0010343:	83 c4 10             	add    esp,0x10
c0010346:	81 fb 80 01 00 00    	cmp    ebx,0x180
c001034c:	75 e3                	jne    c0010331 <Phys::physicalMemorySetup(unsigned int)+0x1f6>
c001034e:	83 c4 3c             	add    esp,0x3c
c0010351:	5b                   	pop    ebx
c0010352:	5e                   	pop    esi
c0010353:	5f                   	pop    edi
c0010354:	5d                   	pop    ebp
c0010355:	c3                   	ret    
c0010356:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c001035e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0010366:	e9 d7 fe ff ff       	jmp    c0010242 <Phys::physicalMemorySetup(unsigned int)+0x107>
c001036b:	90                   	nop

c001036c <Pipe::isAtty()>:
c001036c:	31 c0                	xor    eax,eax
c001036e:	c3                   	ret    
c001036f:	90                   	nop

c0010370 <Pipe::~Pipe()>:
c0010370:	83 ec 0c             	sub    esp,0xc
c0010373:	ba b4 a4 02 c0       	mov    edx,0xc002a4b4
c0010378:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001037c:	89 10                	mov    DWORD PTR [eax],edx
c001037e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010382:	83 ec 0c             	sub    esp,0xc
c0010385:	50                   	push   eax
c0010386:	e8 37 16 00 00       	call   c00119c2 <UnixFile::~UnixFile()>
c001038b:	83 c4 10             	add    esp,0x10
c001038e:	90                   	nop
c001038f:	83 c4 0c             	add    esp,0xc
c0010392:	c3                   	ret    
c0010393:	90                   	nop

c0010394 <Pipe::~Pipe()>:
c0010394:	83 ec 0c             	sub    esp,0xc
c0010397:	83 ec 0c             	sub    esp,0xc
c001039a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001039e:	e8 cd ff ff ff       	call   c0010370 <Pipe::~Pipe()>
c00103a3:	83 c4 10             	add    esp,0x10
c00103a6:	83 ec 08             	sub    esp,0x8
c00103a9:	6a 20                	push   0x20
c00103ab:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00103af:	e8 4f 2b 00 00       	call   c0012f03 <operator delete(void*, unsigned long)>
c00103b4:	83 c4 10             	add    esp,0x10
c00103b7:	83 c4 0c             	add    esp,0xc
c00103ba:	c3                   	ret    
c00103bb:	90                   	nop

c00103bc <Pipe::read(unsigned long long, void*, int*)>:
c00103bc:	55                   	push   ebp
c00103bd:	57                   	push   edi
c00103be:	56                   	push   esi
c00103bf:	53                   	push   ebx
c00103c0:	83 ec 1c             	sub    esp,0x1c
c00103c3:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00103c7:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00103cb:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c00103cf:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c00103d2:	89 c8                	mov    eax,ecx
c00103d4:	99                   	cdq    
c00103d5:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c00103d9:	74 19                	je     c00103f4 <Pipe::read(unsigned long long, void*, int*)+0x38>
c00103db:	39 f9                	cmp    ecx,edi
c00103dd:	89 d1                	mov    ecx,edx
c00103df:	19 f1                	sbb    ecx,esi
c00103e1:	73 11                	jae    c00103f4 <Pipe::read(unsigned long long, void*, int*)+0x38>
c00103e3:	e8 d2 da 00 00       	call   c001deba <lockScheduler()>
c00103e8:	e8 09 de 00 00       	call   c001e1f6 <schedule()>
c00103ed:	e8 ca da 00 00       	call   c001debc <unlockScheduler()>
c00103f2:	eb db                	jmp    c00103cf <Pipe::read(unsigned long long, void*, int*)+0x13>
c00103f4:	39 f8                	cmp    eax,edi
c00103f6:	89 d1                	mov    ecx,edx
c00103f8:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00103fc:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0010400:	19 f1                	sbb    ecx,esi
c0010402:	73 08                	jae    c001040c <Pipe::read(unsigned long long, void*, int*)+0x50>
c0010404:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010408:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001040c:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001040f:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c0010412:	29 c6                	sub    esi,eax
c0010414:	89 f1                	mov    ecx,esi
c0010416:	c1 f9 1f             	sar    ecx,0x1f
c0010419:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c001041d:	89 ca                	mov    edx,ecx
c001041f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0010423:	19 d1                	sbb    ecx,edx
c0010425:	73 04                	jae    c001042b <Pipe::read(unsigned long long, void*, int*)+0x6f>
c0010427:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c001042b:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c001042f:	89 fd                	mov    ebp,edi
c0010431:	29 f5                	sub    ebp,esi
c0010433:	85 f6                	test   esi,esi
c0010435:	74 12                	je     c0010449 <Pipe::read(unsigned long long, void*, int*)+0x8d>
c0010437:	52                   	push   edx
c0010438:	56                   	push   esi
c0010439:	03 43 0c             	add    eax,DWORD PTR [ebx+0xc]
c001043c:	50                   	push   eax
c001043d:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0010441:	e8 fe 02 ff ff       	call   c0000744 <memcpy>
c0010446:	83 c4 10             	add    esp,0x10
c0010449:	85 ed                	test   ebp,ebp
c001044b:	74 12                	je     c001045f <Pipe::read(unsigned long long, void*, int*)+0xa3>
c001044d:	50                   	push   eax
c001044e:	55                   	push   ebp
c001044f:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c0010452:	03 74 24 48          	add    esi,DWORD PTR [esp+0x48]
c0010456:	56                   	push   esi
c0010457:	e8 e8 02 ff ff       	call   c0000744 <memcpy>
c001045c:	83 c4 10             	add    esp,0x10
c001045f:	29 7b 14             	sub    DWORD PTR [ebx+0x14],edi
c0010462:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0010465:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c0010468:	99                   	cdq    
c0010469:	89 f7                	mov    edi,esi
c001046b:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001046f:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0010473:	c1 ff 1f             	sar    edi,0x1f
c0010476:	57                   	push   edi
c0010477:	56                   	push   esi
c0010478:	52                   	push   edx
c0010479:	50                   	push   eax
c001047a:	e8 1d 67 01 00       	call   c0026b9c <__umoddi3>
c001047f:	83 c4 10             	add    esp,0x10
c0010482:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0010485:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c001048a:	75 10                	jne    c001049c <Pipe::read(unsigned long long, void*, int*)+0xe0>
c001048c:	83 ec 0c             	sub    esp,0xc
c001048f:	68 71 a4 02 c0       	push   0xc002a471
c0010494:	e8 fc a1 00 00       	call   c001a695 <Krnl::panic(char const*)>
c0010499:	83 c4 10             	add    esp,0x10
c001049c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00104a0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00104a4:	89 10                	mov    DWORD PTR [eax],edx
c00104a6:	83 c4 1c             	add    esp,0x1c
c00104a9:	31 c0                	xor    eax,eax
c00104ab:	5b                   	pop    ebx
c00104ac:	5e                   	pop    esi
c00104ad:	5f                   	pop    edi
c00104ae:	5d                   	pop    ebp
c00104af:	c3                   	ret    

c00104b0 <Pipe::write(unsigned long long, void*, int*)>:
c00104b0:	55                   	push   ebp
c00104b1:	57                   	push   edi
c00104b2:	56                   	push   esi
c00104b3:	53                   	push   ebx
c00104b4:	83 ec 1c             	sub    esp,0x1c
c00104b7:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00104bb:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00104bf:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00104c3:	89 04 24             	mov    DWORD PTR [esp],eax
c00104c6:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c00104c9:	8b 4d 18             	mov    ecx,DWORD PTR [ebp+0x18]
c00104cc:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00104d0:	89 de                	mov    esi,ebx
c00104d2:	89 df                	mov    edi,ebx
c00104d4:	c1 ff 1f             	sar    edi,0x1f
c00104d7:	01 c6                	add    esi,eax
c00104d9:	89 c8                	mov    eax,ecx
c00104db:	11 d7                	adc    edi,edx
c00104dd:	99                   	cdq    
c00104de:	39 f1                	cmp    ecx,esi
c00104e0:	89 d0                	mov    eax,edx
c00104e2:	19 f8                	sbb    eax,edi
c00104e4:	b8 01 00 00 00       	mov    eax,0x1
c00104e9:	0f 82 80 00 00 00    	jb     c001056f <Pipe::write(unsigned long long, void*, int*)+0xbf>
c00104ef:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00104f2:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00104f5:	01 d8                	add    eax,ebx
c00104f7:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c00104fb:	99                   	cdq    
c00104fc:	f7 f9                	idiv   ecx
c00104fe:	29 d1                	sub    ecx,edx
c0010500:	89 d7                	mov    edi,edx
c0010502:	89 c8                	mov    eax,ecx
c0010504:	99                   	cdq    
c0010505:	39 ce                	cmp    esi,ecx
c0010507:	19 d3                	sbb    ebx,edx
c0010509:	bb 00 00 00 00       	mov    ebx,0x0
c001050e:	72 04                	jb     c0010514 <Pipe::write(unsigned long long, void*, int*)+0x64>
c0010510:	89 f3                	mov    ebx,esi
c0010512:	29 cb                	sub    ebx,ecx
c0010514:	89 f1                	mov    ecx,esi
c0010516:	29 d9                	sub    ecx,ebx
c0010518:	74 1a                	je     c0010534 <Pipe::write(unsigned long long, void*, int*)+0x84>
c001051a:	52                   	push   edx
c001051b:	51                   	push   ecx
c001051c:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0010520:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0010524:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c0010527:	57                   	push   edi
c0010528:	e8 17 02 ff ff       	call   c0000744 <memcpy>
c001052d:	83 c4 10             	add    esp,0x10
c0010530:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0010534:	85 db                	test   ebx,ebx
c0010536:	74 12                	je     c001054a <Pipe::write(unsigned long long, void*, int*)+0x9a>
c0010538:	50                   	push   eax
c0010539:	53                   	push   ebx
c001053a:	03 4c 24 44          	add    ecx,DWORD PTR [esp+0x44]
c001053e:	51                   	push   ecx
c001053f:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0010542:	e8 fd 01 ff ff       	call   c0000744 <memcpy>
c0010547:	83 c4 10             	add    esp,0x10
c001054a:	01 75 14             	add    DWORD PTR [ebp+0x14],esi
c001054d:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0010552:	75 10                	jne    c0010564 <Pipe::write(unsigned long long, void*, int*)+0xb4>
c0010554:	83 ec 0c             	sub    esp,0xc
c0010557:	68 8d a4 02 c0       	push   0xc002a48d
c001055c:	e8 34 a1 00 00       	call   c001a695 <Krnl::panic(char const*)>
c0010561:	83 c4 10             	add    esp,0x10
c0010564:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0010568:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c001056b:	89 38                	mov    DWORD PTR [eax],edi
c001056d:	31 c0                	xor    eax,eax
c001056f:	83 c4 1c             	add    esp,0x1c
c0010572:	5b                   	pop    ebx
c0010573:	5e                   	pop    esi
c0010574:	5f                   	pop    edi
c0010575:	5d                   	pop    ebp
c0010576:	c3                   	ret    
c0010577:	90                   	nop

c0010578 <Pipe::Pipe(int)>:
c0010578:	83 ec 0c             	sub    esp,0xc
c001057b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001057f:	83 ec 08             	sub    esp,0x8
c0010582:	6a 00                	push   0x0
c0010584:	50                   	push   eax
c0010585:	e8 56 12 00 00       	call   c00117e0 <UnixFile::UnixFile(int)>
c001058a:	83 c4 10             	add    esp,0x10
c001058d:	ba b4 a4 02 c0       	mov    edx,0xc002a4b4
c0010592:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010596:	89 10                	mov    DWORD PTR [eax],edx
c0010598:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001059c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00105a0:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00105a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00105a7:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c00105ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00105b2:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c00105b9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00105bd:	83 ec 0c             	sub    esp,0xc
c00105c0:	50                   	push   eax
c00105c1:	e8 1e f3 ff ff       	call   c000f8e4 <malloc>
c00105c6:	83 c4 10             	add    esp,0x10
c00105c9:	89 c2                	mov    edx,eax
c00105cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00105cf:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00105d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00105d6:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c00105da:	90                   	nop
c00105db:	83 c4 0c             	add    esp,0xc
c00105de:	c3                   	ret    
c00105df:	90                   	nop

c00105e0 <VgaText::isAtty()>:
c00105e0:	b0 01                	mov    al,0x1
c00105e2:	c3                   	ret    
c00105e3:	90                   	nop

c00105e4 <VgaText::~VgaText()>:
c00105e4:	83 ec 0c             	sub    esp,0xc
c00105e7:	ba 70 a5 02 c0       	mov    edx,0xc002a570
c00105ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00105f0:	89 10                	mov    DWORD PTR [eax],edx
c00105f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00105f6:	83 ec 0c             	sub    esp,0xc
c00105f9:	50                   	push   eax
c00105fa:	e8 c3 13 00 00       	call   c00119c2 <UnixFile::~UnixFile()>
c00105ff:	83 c4 10             	add    esp,0x10
c0010602:	90                   	nop
c0010603:	83 c4 0c             	add    esp,0xc
c0010606:	c3                   	ret    
c0010607:	90                   	nop

c0010608 <VgaText::~VgaText()>:
c0010608:	83 ec 0c             	sub    esp,0xc
c001060b:	83 ec 0c             	sub    esp,0xc
c001060e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010612:	e8 cd ff ff ff       	call   c00105e4 <VgaText::~VgaText()>
c0010617:	83 c4 10             	add    esp,0x10
c001061a:	83 ec 08             	sub    esp,0x8
c001061d:	68 60 12 00 00       	push   0x1260
c0010622:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010626:	e8 d8 28 00 00       	call   c0012f03 <operator delete(void*, unsigned long)>
c001062b:	83 c4 10             	add    esp,0x10
c001062e:	83 c4 0c             	add    esp,0xc
c0010631:	c3                   	ret    

c0010632 <VgaText::read(unsigned long long, void*, int*)>:
c0010632:	83 ec 10             	sub    esp,0x10
c0010635:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010639:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001063d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010641:	e8 50 5d 00 00       	call   c0016396 <readKeyboard(VgaText*, char*, unsigned long)>
c0010646:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001064a:	89 02                	mov    DWORD PTR [edx],eax
c001064c:	31 c0                	xor    eax,eax
c001064e:	83 c4 1c             	add    esp,0x1c
c0010651:	c3                   	ret    

c0010652 <setTerminalScrollLock(bool)>:
c0010652:	c3                   	ret    

c0010653 <addToTerminalCycle(VgaText*)>:
c0010653:	8b 15 c0 e7 02 c0    	mov    edx,DWORD PTR ds:0xc002e7c0
c0010659:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001065d:	85 d2                	test   edx,edx
c001065f:	75 0c                	jne    c001066d <addToTerminalCycle(VgaText*)+0x1a>
c0010661:	89 80 c0 0f 00 00    	mov    DWORD PTR [eax+0xfc0],eax
c0010667:	a3 c0 e7 02 c0       	mov    ds:0xc002e7c0,eax
c001066c:	c3                   	ret    
c001066d:	8b 8a c0 0f 00 00    	mov    ecx,DWORD PTR [edx+0xfc0]
c0010673:	89 82 c0 0f 00 00    	mov    DWORD PTR [edx+0xfc0],eax
c0010679:	89 88 c0 0f 00 00    	mov    DWORD PTR [eax+0xfc0],ecx
c001067f:	c3                   	ret    

c0010680 <installVgaTextImplementation()>:
c0010680:	83 ec 10             	sub    esp,0x10
c0010683:	6a 20                	push   0x20
c0010685:	6a 00                	push   0x0
c0010687:	68 a0 e7 02 c0       	push   0xc002e7a0
c001068c:	e8 e7 00 ff ff       	call   c0000778 <memset>
c0010691:	83 c4 1c             	add    esp,0x1c
c0010694:	c3                   	ret    

c0010695 <scrollTerminalScrollLock(int)>:
c0010695:	c3                   	ret    

c0010696 <VgaText::load()>:
c0010696:	53                   	push   ebx
c0010697:	31 c0                	xor    eax,eax
c0010699:	83 ec 58             	sub    esp,0x58
c001069c:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c00106a0:	89 e2                	mov    edx,esp
c00106a2:	c6 04 10 20          	mov    BYTE PTR [eax+edx*1],0x20
c00106a6:	40                   	inc    eax
c00106a7:	83 f8 50             	cmp    eax,0x50
c00106aa:	75 f6                	jne    c00106a2 <VgaText::load()+0xc>
c00106ac:	31 c0                	xor    eax,eax
c00106ae:	8a 8c 03 1e 10 00 00 	mov    cl,BYTE PTR [ebx+eax*1+0x101e]
c00106b5:	84 c9                	test   cl,cl
c00106b7:	74 06                	je     c00106bf <VgaText::load()+0x29>
c00106b9:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c00106bc:	40                   	inc    eax
c00106bd:	eb ef                	jmp    c00106ae <VgaText::load()+0x18>
c00106bf:	8b 83 fc 0f 00 00    	mov    eax,DWORD PTR [ebx+0xffc]
c00106c5:	85 c0                	test   eax,eax
c00106c7:	74 09                	je     c00106d2 <VgaText::load()+0x3c>
c00106c9:	51                   	push   ecx
c00106ca:	51                   	push   ecx
c00106cb:	52                   	push   edx
c00106cc:	53                   	push   ebx
c00106cd:	ff d0                	call   eax
c00106cf:	83 c4 10             	add    esp,0x10
c00106d2:	8b 83 00 10 00 00    	mov    eax,DWORD PTR [ebx+0x1000]
c00106d8:	85 c0                	test   eax,eax
c00106da:	74 09                	je     c00106e5 <VgaText::load()+0x4f>
c00106dc:	83 ec 0c             	sub    esp,0xc
c00106df:	53                   	push   ebx
c00106e0:	ff d0                	call   eax
c00106e2:	83 c4 10             	add    esp,0x10
c00106e5:	83 c4 58             	add    esp,0x58
c00106e8:	5b                   	pop    ebx
c00106e9:	c3                   	ret    

c00106ea <VgaText::updateCursor()>:
c00106ea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00106ee:	39 05 c4 e7 02 c0    	cmp    DWORD PTR ds:0xc002e7c4,eax
c00106f4:	75 0c                	jne    c0010702 <VgaText::updateCursor()+0x18>
c00106f6:	8b 80 0c 10 00 00    	mov    eax,DWORD PTR [eax+0x100c]
c00106fc:	85 c0                	test   eax,eax
c00106fe:	74 02                	je     c0010702 <VgaText::updateCursor()+0x18>
c0010700:	ff e0                	jmp    eax
c0010702:	c3                   	ret    
c0010703:	90                   	nop

c0010704 <VgaText::showCursor(bool)>:
c0010704:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010708:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001070c:	88 90 bc 0f 00 00    	mov    BYTE PTR [eax+0xfbc],dl
c0010712:	c3                   	ret    
c0010713:	90                   	nop

c0010714 <VgaText::disableBlink(bool)>:
c0010714:	56                   	push   esi
c0010715:	53                   	push   ebx
c0010716:	51                   	push   ecx
c0010717:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001071b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001071f:	39 1d c4 e7 02 c0    	cmp    DWORD PTR ds:0xc002e7c4,ebx
c0010725:	75 18                	jne    c001073f <VgaText::disableBlink(bool)+0x2b>
c0010727:	8b 83 14 10 00 00    	mov    eax,DWORD PTR [ebx+0x1014]
c001072d:	85 c0                	test   eax,eax
c001072f:	74 0e                	je     c001073f <VgaText::disableBlink(bool)+0x2b>
c0010731:	89 f1                	mov    ecx,esi
c0010733:	52                   	push   edx
c0010734:	52                   	push   edx
c0010735:	0f b6 d1             	movzx  edx,cl
c0010738:	52                   	push   edx
c0010739:	53                   	push   ebx
c001073a:	ff d0                	call   eax
c001073c:	83 c4 10             	add    esp,0x10
c001073f:	89 f0                	mov    eax,esi
c0010741:	83 f0 01             	xor    eax,0x1
c0010744:	88 83 bd 0f 00 00    	mov    BYTE PTR [ebx+0xfbd],al
c001074a:	58                   	pop    eax
c001074b:	5b                   	pop    ebx
c001074c:	5e                   	pop    esi
c001074d:	c3                   	ret    

c001074e <VgaText::doANSI_SGR(int)>:
c001074e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010752:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010756:	85 d2                	test   edx,edx
c0010758:	75 14                	jne    c001076e <VgaText::doANSI_SGR(int)+0x20>
c001075a:	8b 90 c8 0f 00 00    	mov    edx,DWORD PTR [eax+0xfc8]
c0010760:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c0010766:	8b 90 c4 0f 00 00    	mov    edx,DWORD PTR [eax+0xfc4]
c001076c:	eb 65                	jmp    c00107d3 <VgaText::doANSI_SGR(int)+0x85>
c001076e:	83 fa 07             	cmp    edx,0x7
c0010771:	75 14                	jne    c0010787 <VgaText::doANSI_SGR(int)+0x39>
c0010773:	8b 90 d0 0f 00 00    	mov    edx,DWORD PTR [eax+0xfd0]
c0010779:	8b 88 cc 0f 00 00    	mov    ecx,DWORD PTR [eax+0xfcc]
c001077f:	89 88 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],ecx
c0010785:	eb 4c                	jmp    c00107d3 <VgaText::doANSI_SGR(int)+0x85>
c0010787:	83 fa 1b             	cmp    edx,0x1b
c001078a:	74 ce                	je     c001075a <VgaText::doANSI_SGR(int)+0xc>
c001078c:	8d 4a e2             	lea    ecx,[edx-0x1e]
c001078f:	83 f9 07             	cmp    ecx,0x7
c0010792:	77 09                	ja     c001079d <VgaText::doANSI_SGR(int)+0x4f>
c0010794:	8b 14 8d 40 d6 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd29c0]
c001079b:	eb 20                	jmp    c00107bd <VgaText::doANSI_SGR(int)+0x6f>
c001079d:	8d 4a d8             	lea    ecx,[edx-0x28]
c00107a0:	83 f9 07             	cmp    ecx,0x7
c00107a3:	77 09                	ja     c00107ae <VgaText::doANSI_SGR(int)+0x60>
c00107a5:	8b 14 8d 40 d6 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd29c0]
c00107ac:	eb 25                	jmp    c00107d3 <VgaText::doANSI_SGR(int)+0x85>
c00107ae:	8d 4a a6             	lea    ecx,[edx-0x5a]
c00107b1:	83 f9 07             	cmp    ecx,0x7
c00107b4:	77 0e                	ja     c00107c4 <VgaText::doANSI_SGR(int)+0x76>
c00107b6:	8b 14 95 f8 d4 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2b08]
c00107bd:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c00107c3:	c3                   	ret    
c00107c4:	8d 4a 9c             	lea    ecx,[edx-0x64]
c00107c7:	83 f9 07             	cmp    ecx,0x7
c00107ca:	77 0d                	ja     c00107d9 <VgaText::doANSI_SGR(int)+0x8b>
c00107cc:	8b 14 95 d0 d4 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2b30]
c00107d3:	89 90 cc 0f 00 00    	mov    DWORD PTR [eax+0xfcc],edx
c00107d9:	c3                   	ret    

c00107da <VgaText::setDefaultBgColour(VgaColour)>:
c00107da:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00107de:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00107e2:	89 90 c4 0f 00 00    	mov    DWORD PTR [eax+0xfc4],edx
c00107e8:	89 90 cc 0f 00 00    	mov    DWORD PTR [eax+0xfcc],edx
c00107ee:	c3                   	ret    
c00107ef:	90                   	nop

c00107f0 <VgaText::setDefaultFgColour(VgaColour)>:
c00107f0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00107f4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00107f8:	89 90 c8 0f 00 00    	mov    DWORD PTR [eax+0xfc8],edx
c00107fe:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c0010804:	c3                   	ret    
c0010805:	90                   	nop

c0010806 <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c0010806:	53                   	push   ebx
c0010807:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001080b:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001080f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0010813:	51                   	push   ecx
c0010814:	e8 c1 ff ff ff       	call   c00107da <VgaText::setDefaultBgColour(VgaColour)>
c0010819:	58                   	pop    eax
c001081a:	5a                   	pop    edx
c001081b:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c001081f:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0010823:	5b                   	pop    ebx
c0010824:	eb ca                	jmp    c00107f0 <VgaText::setDefaultFgColour(VgaColour)>

c0010826 <VgaText::combineColours(unsigned char, unsigned char)>:
c0010826:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001082a:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001082f:	83 e0 0f             	and    eax,0xf
c0010832:	c1 e2 04             	shl    edx,0x4
c0010835:	09 d0                	or     eax,edx
c0010837:	c3                   	ret    

c0010838 <VgaText::scrollScreen()>:
c0010838:	57                   	push   edi
c0010839:	56                   	push   esi
c001083a:	be 01 00 00 00       	mov    esi,0x1
c001083f:	53                   	push   ebx
c0010840:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010844:	69 ce a0 00 00 00    	imul   ecx,esi,0xa0
c001084a:	31 ff                	xor    edi,edi
c001084c:	01 d9                	add    ecx,ebx
c001084e:	8a 41 0c             	mov    al,BYTE PTR [ecx+0xc]
c0010851:	83 fe 17             	cmp    esi,0x17
c0010854:	88 81 6c ff ff ff    	mov    BYTE PTR [ecx-0x94],al
c001085a:	75 28                	jne    c0010884 <VgaText::scrollScreen()+0x4c>
c001085c:	f7 c7 01 00 00 00    	test   edi,0x1
c0010862:	74 1c                	je     c0010880 <VgaText::scrollScreen()+0x48>
c0010864:	0f b6 83 cc 0f 00 00 	movzx  eax,BYTE PTR [ebx+0xfcc]
c001086b:	50                   	push   eax
c001086c:	0f b6 83 d0 0f 00 00 	movzx  eax,BYTE PTR [ebx+0xfd0]
c0010873:	50                   	push   eax
c0010874:	e8 ad ff ff ff       	call   c0010826 <VgaText::combineColours(unsigned char, unsigned char)>
c0010879:	5a                   	pop    edx
c001087a:	5a                   	pop    edx
c001087b:	88 41 0c             	mov    BYTE PTR [ecx+0xc],al
c001087e:	eb 04                	jmp    c0010884 <VgaText::scrollScreen()+0x4c>
c0010880:	c6 41 0c 20          	mov    BYTE PTR [ecx+0xc],0x20
c0010884:	47                   	inc    edi
c0010885:	41                   	inc    ecx
c0010886:	81 ff a0 00 00 00    	cmp    edi,0xa0
c001088c:	75 c0                	jne    c001084e <VgaText::scrollScreen()+0x16>
c001088e:	46                   	inc    esi
c001088f:	83 fe 18             	cmp    esi,0x18
c0010892:	75 b0                	jne    c0010844 <VgaText::scrollScreen()+0xc>
c0010894:	39 1d c4 e7 02 c0    	cmp    DWORD PTR ds:0xc002e7c4,ebx
c001089a:	75 24                	jne    c00108c0 <VgaText::scrollScreen()+0x88>
c001089c:	80 bb f4 0f 00 00 00 	cmp    BYTE PTR [ebx+0xff4],0x0
c00108a3:	74 08                	je     c00108ad <VgaText::scrollScreen()+0x75>
c00108a5:	ff 8b f8 0f 00 00    	dec    DWORD PTR [ebx+0xff8]
c00108ab:	eb 13                	jmp    c00108c0 <VgaText::scrollScreen()+0x88>
c00108ad:	8b 83 08 10 00 00    	mov    eax,DWORD PTR [ebx+0x1008]
c00108b3:	85 c0                	test   eax,eax
c00108b5:	74 09                	je     c00108c0 <VgaText::scrollScreen()+0x88>
c00108b7:	83 ec 0c             	sub    esp,0xc
c00108ba:	53                   	push   ebx
c00108bb:	ff d0                	call   eax
c00108bd:	83 c4 10             	add    esp,0x10
c00108c0:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00108c4:	5b                   	pop    ebx
c00108c5:	5e                   	pop    esi
c00108c6:	5f                   	pop    edi
c00108c7:	e9 1e fe ff ff       	jmp    c00106ea <VgaText::updateCursor()>

c00108cc <VgaText::combineCharAndColour(char, unsigned char)>:
c00108cc:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00108d1:	c1 e0 08             	shl    eax,0x8
c00108d4:	89 c2                	mov    edx,eax
c00108d6:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c00108db:	09 d0                	or     eax,edx
c00108dd:	c3                   	ret    

c00108de <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c00108de:	53                   	push   ebx
c00108df:	83 ec 08             	sub    esp,0x8
c00108e2:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00108e6:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c00108eb:	50                   	push   eax
c00108ec:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c00108f1:	50                   	push   eax
c00108f2:	e8 2f ff ff ff       	call   c0010826 <VgaText::combineColours(unsigned char, unsigned char)>
c00108f7:	5a                   	pop    edx
c00108f8:	0f b6 c0             	movzx  eax,al
c00108fb:	5b                   	pop    ebx
c00108fc:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c0010901:	50                   	push   eax
c0010902:	53                   	push   ebx
c0010903:	e8 c4 ff ff ff       	call   c00108cc <VgaText::combineCharAndColour(char, unsigned char)>
c0010908:	5a                   	pop    edx
c0010909:	5a                   	pop    edx
c001090a:	66 6b 54 24 24 50    	imul   dx,WORD PTR [esp+0x24],0x50
c0010910:	03 54 24 20          	add    edx,DWORD PTR [esp+0x20]
c0010914:	0f b7 d2             	movzx  edx,dx
c0010917:	66 89 44 51 0c       	mov    WORD PTR [ecx+edx*2+0xc],ax
c001091c:	39 0d c4 e7 02 c0    	cmp    DWORD PTR ds:0xc002e7c4,ecx
c0010922:	75 14                	jne    c0010938 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x5a>
c0010924:	8b 81 18 10 00 00    	mov    eax,DWORD PTR [ecx+0x1018]
c001092a:	85 c0                	test   eax,eax
c001092c:	74 0a                	je     c0010938 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x5a>
c001092e:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c0010932:	83 c4 08             	add    esp,0x8
c0010935:	5b                   	pop    ebx
c0010936:	ff e0                	jmp    eax
c0010938:	83 c4 08             	add    esp,0x8
c001093b:	5b                   	pop    ebx
c001093c:	c3                   	ret    
c001093d:	90                   	nop

c001093e <VgaText::getCursorX()>:
c001093e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010942:	8b 80 b0 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb0]
c0010948:	c3                   	ret    
c0010949:	90                   	nop

c001094a <VgaText::getCursorY()>:
c001094a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001094e:	8b 80 b4 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb4]
c0010954:	c3                   	ret    
c0010955:	90                   	nop

c0010956 <VgaText::setCursor(int, int)>:
c0010956:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001095a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001095e:	89 90 b0 0f 00 00    	mov    DWORD PTR [eax+0xfb0],edx
c0010964:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010968:	89 90 b4 0f 00 00    	mov    DWORD PTR [eax+0xfb4],edx
c001096e:	e9 77 fd ff ff       	jmp    c00106ea <VgaText::updateCursor()>
c0010973:	90                   	nop

c0010974 <VgaText::setCursorX(int)>:
c0010974:	83 ec 10             	sub    esp,0x10
c0010977:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001097b:	ff b0 b4 0f 00 00    	push   DWORD PTR [eax+0xfb4]
c0010981:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010985:	50                   	push   eax
c0010986:	e8 cb ff ff ff       	call   c0010956 <VgaText::setCursor(int, int)>
c001098b:	83 c4 1c             	add    esp,0x1c
c001098e:	c3                   	ret    
c001098f:	90                   	nop

c0010990 <VgaText::setCursorY(int)>:
c0010990:	83 ec 10             	sub    esp,0x10
c0010993:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010997:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001099b:	ff b0 b0 0f 00 00    	push   DWORD PTR [eax+0xfb0]
c00109a1:	50                   	push   eax
c00109a2:	e8 af ff ff ff       	call   c0010956 <VgaText::setCursor(int, int)>
c00109a7:	83 c4 1c             	add    esp,0x1c
c00109aa:	c3                   	ret    
c00109ab:	90                   	nop

c00109ac <VgaText::incrementCursor(bool)>:
c00109ac:	56                   	push   esi
c00109ad:	53                   	push   ebx
c00109ae:	51                   	push   ecx
c00109af:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00109b3:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00109b7:	8b 83 b0 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb0]
c00109bd:	40                   	inc    eax
c00109be:	83 f8 50             	cmp    eax,0x50
c00109c1:	74 08                	je     c00109cb <VgaText::incrementCursor(bool)+0x1f>
c00109c3:	89 83 b0 0f 00 00    	mov    DWORD PTR [ebx+0xfb0],eax
c00109c9:	eb 33                	jmp    c00109fe <VgaText::incrementCursor(bool)+0x52>
c00109cb:	8b 83 b4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb4]
c00109d1:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c00109db:	8d 50 01             	lea    edx,[eax+0x1]
c00109de:	89 93 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],edx
c00109e4:	3b 93 ac 0f 00 00    	cmp    edx,DWORD PTR [ebx+0xfac]
c00109ea:	75 12                	jne    c00109fe <VgaText::incrementCursor(bool)+0x52>
c00109ec:	83 ec 0c             	sub    esp,0xc
c00109ef:	89 83 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],eax
c00109f5:	53                   	push   ebx
c00109f6:	e8 3d fe ff ff       	call   c0010838 <VgaText::scrollScreen()>
c00109fb:	83 c4 10             	add    esp,0x10
c00109fe:	89 f0                	mov    eax,esi
c0010a00:	84 c0                	test   al,al
c0010a02:	74 0c                	je     c0010a10 <VgaText::incrementCursor(bool)+0x64>
c0010a04:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010a08:	5a                   	pop    edx
c0010a09:	5b                   	pop    ebx
c0010a0a:	5e                   	pop    esi
c0010a0b:	e9 da fc ff ff       	jmp    c00106ea <VgaText::updateCursor()>
c0010a10:	58                   	pop    eax
c0010a11:	5b                   	pop    ebx
c0010a12:	5e                   	pop    esi
c0010a13:	c3                   	ret    

c0010a14 <VgaText::updateRAMUsageDisplay(int)>:
c0010a14:	56                   	push   esi
c0010a15:	8b 35 20 d6 02 c0    	mov    esi,DWORD PTR ds:0xc002d620
c0010a1b:	53                   	push   ebx
c0010a1c:	bb 0a 00 00 00       	mov    ebx,0xa
c0010a21:	6a 0f                	push   0xf
c0010a23:	6a 00                	push   0x0
c0010a25:	e8 fc fd ff ff       	call   c0010826 <VgaText::combineColours(unsigned char, unsigned char)>
c0010a2a:	5a                   	pop    edx
c0010a2b:	59                   	pop    ecx
c0010a2c:	0f b6 c8             	movzx  ecx,al
c0010a2f:	51                   	push   ecx
c0010a30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010a34:	99                   	cdq    
c0010a35:	f7 fb                	idiv   ebx
c0010a37:	89 d3                	mov    ebx,edx
c0010a39:	83 c0 30             	add    eax,0x30
c0010a3c:	83 c3 30             	add    ebx,0x30
c0010a3f:	0f be c0             	movsx  eax,al
c0010a42:	0f b6 db             	movzx  ebx,bl
c0010a45:	50                   	push   eax
c0010a46:	e8 81 fe ff ff       	call   c00108cc <VgaText::combineCharAndColour(char, unsigned char)>
c0010a4b:	5a                   	pop    edx
c0010a4c:	5a                   	pop    edx
c0010a4d:	66 89 86 96 00 00 00 	mov    WORD PTR [esi+0x96],ax
c0010a54:	51                   	push   ecx
c0010a55:	53                   	push   ebx
c0010a56:	e8 71 fe ff ff       	call   c00108cc <VgaText::combineCharAndColour(char, unsigned char)>
c0010a5b:	5b                   	pop    ebx
c0010a5c:	5a                   	pop    edx
c0010a5d:	66 89 86 98 00 00 00 	mov    WORD PTR [esi+0x98],ax
c0010a64:	51                   	push   ecx
c0010a65:	6a 25                	push   0x25
c0010a67:	e8 60 fe ff ff       	call   c00108cc <VgaText::combineCharAndColour(char, unsigned char)>
c0010a6c:	59                   	pop    ecx
c0010a6d:	5b                   	pop    ebx
c0010a6e:	66 89 86 9a 00 00 00 	mov    WORD PTR [esi+0x9a],ax
c0010a75:	5b                   	pop    ebx
c0010a76:	5e                   	pop    esi
c0010a77:	c3                   	ret    

c0010a78 <VgaText::updateDiskUsage()>:
c0010a78:	55                   	push   ebp
c0010a79:	bd 10 27 00 00       	mov    ebp,0x2710
c0010a7e:	57                   	push   edi
c0010a7f:	8b 3d 20 d6 02 c0    	mov    edi,DWORD PTR ds:0xc002d620
c0010a85:	56                   	push   esi
c0010a86:	53                   	push   ebx
c0010a87:	6a 0f                	push   0xf
c0010a89:	6a 00                	push   0x0
c0010a8b:	e8 96 fd ff ff       	call   c0010826 <VgaText::combineColours(unsigned char, unsigned char)>
c0010a90:	5a                   	pop    edx
c0010a91:	0f b6 d8             	movzx  ebx,al
c0010a94:	59                   	pop    ecx
c0010a95:	8b 35 48 2a 03 c0    	mov    esi,DWORD PTR ds:0xc0032a48
c0010a9b:	53                   	push   ebx
c0010a9c:	b9 0a 00 00 00       	mov    ecx,0xa
c0010aa1:	89 f0                	mov    eax,esi
c0010aa3:	99                   	cdq    
c0010aa4:	f7 fd                	idiv   ebp
c0010aa6:	99                   	cdq    
c0010aa7:	f7 f9                	idiv   ecx
c0010aa9:	8d 42 30             	lea    eax,[edx+0x30]
c0010aac:	0f b6 c0             	movzx  eax,al
c0010aaf:	50                   	push   eax
c0010ab0:	e8 17 fe ff ff       	call   c00108cc <VgaText::combineCharAndColour(char, unsigned char)>
c0010ab5:	5d                   	pop    ebp
c0010ab6:	bd e8 03 00 00       	mov    ebp,0x3e8
c0010abb:	5a                   	pop    edx
c0010abc:	66 89 47 7e          	mov    WORD PTR [edi+0x7e],ax
c0010ac0:	53                   	push   ebx
c0010ac1:	89 f0                	mov    eax,esi
c0010ac3:	99                   	cdq    
c0010ac4:	f7 fd                	idiv   ebp
c0010ac6:	99                   	cdq    
c0010ac7:	f7 f9                	idiv   ecx
c0010ac9:	8d 42 30             	lea    eax,[edx+0x30]
c0010acc:	0f b6 c0             	movzx  eax,al
c0010acf:	50                   	push   eax
c0010ad0:	e8 f7 fd ff ff       	call   c00108cc <VgaText::combineCharAndColour(char, unsigned char)>
c0010ad5:	5d                   	pop    ebp
c0010ad6:	bd 64 00 00 00       	mov    ebp,0x64
c0010adb:	5a                   	pop    edx
c0010adc:	66 89 87 80 00 00 00 	mov    WORD PTR [edi+0x80],ax
c0010ae3:	53                   	push   ebx
c0010ae4:	89 f0                	mov    eax,esi
c0010ae6:	99                   	cdq    
c0010ae7:	f7 fd                	idiv   ebp
c0010ae9:	99                   	cdq    
c0010aea:	f7 f9                	idiv   ecx
c0010aec:	8d 42 30             	lea    eax,[edx+0x30]
c0010aef:	0f b6 c0             	movzx  eax,al
c0010af2:	50                   	push   eax
c0010af3:	e8 d4 fd ff ff       	call   c00108cc <VgaText::combineCharAndColour(char, unsigned char)>
c0010af8:	5d                   	pop    ebp
c0010af9:	5a                   	pop    edx
c0010afa:	66 89 87 82 00 00 00 	mov    WORD PTR [edi+0x82],ax
c0010b01:	53                   	push   ebx
c0010b02:	89 f0                	mov    eax,esi
c0010b04:	99                   	cdq    
c0010b05:	f7 f9                	idiv   ecx
c0010b07:	89 d6                	mov    esi,edx
c0010b09:	99                   	cdq    
c0010b0a:	f7 f9                	idiv   ecx
c0010b0c:	8d 42 30             	lea    eax,[edx+0x30]
c0010b0f:	0f b6 c0             	movzx  eax,al
c0010b12:	50                   	push   eax
c0010b13:	e8 b4 fd ff ff       	call   c00108cc <VgaText::combineCharAndColour(char, unsigned char)>
c0010b18:	5d                   	pop    ebp
c0010b19:	5a                   	pop    edx
c0010b1a:	66 89 87 84 00 00 00 	mov    WORD PTR [edi+0x84],ax
c0010b21:	53                   	push   ebx
c0010b22:	8d 46 30             	lea    eax,[esi+0x30]
c0010b25:	0f b6 f0             	movzx  esi,al
c0010b28:	56                   	push   esi
c0010b29:	e8 9e fd ff ff       	call   c00108cc <VgaText::combineCharAndColour(char, unsigned char)>
c0010b2e:	5e                   	pop    esi
c0010b2f:	8b 35 44 2a 03 c0    	mov    esi,DWORD PTR ds:0xc0032a44
c0010b35:	5d                   	pop    ebp
c0010b36:	66 89 87 86 00 00 00 	mov    WORD PTR [edi+0x86],ax
c0010b3d:	bd 10 27 00 00       	mov    ebp,0x2710
c0010b42:	53                   	push   ebx
c0010b43:	89 f0                	mov    eax,esi
c0010b45:	99                   	cdq    
c0010b46:	f7 fd                	idiv   ebp
c0010b48:	99                   	cdq    
c0010b49:	f7 f9                	idiv   ecx
c0010b4b:	8d 42 30             	lea    eax,[edx+0x30]
c0010b4e:	0f b6 c0             	movzx  eax,al
c0010b51:	50                   	push   eax
c0010b52:	e8 75 fd ff ff       	call   c00108cc <VgaText::combineCharAndColour(char, unsigned char)>
c0010b57:	5a                   	pop    edx
c0010b58:	5d                   	pop    ebp
c0010b59:	66 89 87 8a 00 00 00 	mov    WORD PTR [edi+0x8a],ax
c0010b60:	bd e8 03 00 00       	mov    ebp,0x3e8
c0010b65:	53                   	push   ebx
c0010b66:	89 f0                	mov    eax,esi
c0010b68:	99                   	cdq    
c0010b69:	f7 fd                	idiv   ebp
c0010b6b:	99                   	cdq    
c0010b6c:	f7 f9                	idiv   ecx
c0010b6e:	8d 42 30             	lea    eax,[edx+0x30]
c0010b71:	0f b6 c0             	movzx  eax,al
c0010b74:	50                   	push   eax
c0010b75:	e8 52 fd ff ff       	call   c00108cc <VgaText::combineCharAndColour(char, unsigned char)>
c0010b7a:	5a                   	pop    edx
c0010b7b:	5d                   	pop    ebp
c0010b7c:	66 89 87 8c 00 00 00 	mov    WORD PTR [edi+0x8c],ax
c0010b83:	bd 64 00 00 00       	mov    ebp,0x64
c0010b88:	53                   	push   ebx
c0010b89:	89 f0                	mov    eax,esi
c0010b8b:	99                   	cdq    
c0010b8c:	f7 fd                	idiv   ebp
c0010b8e:	99                   	cdq    
c0010b8f:	f7 f9                	idiv   ecx
c0010b91:	83 c2 30             	add    edx,0x30
c0010b94:	0f b6 d2             	movzx  edx,dl
c0010b97:	52                   	push   edx
c0010b98:	e8 2f fd ff ff       	call   c00108cc <VgaText::combineCharAndColour(char, unsigned char)>
c0010b9d:	5a                   	pop    edx
c0010b9e:	5d                   	pop    ebp
c0010b9f:	66 89 87 8e 00 00 00 	mov    WORD PTR [edi+0x8e],ax
c0010ba6:	53                   	push   ebx
c0010ba7:	89 f0                	mov    eax,esi
c0010ba9:	99                   	cdq    
c0010baa:	f7 f9                	idiv   ecx
c0010bac:	89 d6                	mov    esi,edx
c0010bae:	99                   	cdq    
c0010baf:	f7 f9                	idiv   ecx
c0010bb1:	8d 42 30             	lea    eax,[edx+0x30]
c0010bb4:	0f b6 c0             	movzx  eax,al
c0010bb7:	50                   	push   eax
c0010bb8:	e8 0f fd ff ff       	call   c00108cc <VgaText::combineCharAndColour(char, unsigned char)>
c0010bbd:	5a                   	pop    edx
c0010bbe:	59                   	pop    ecx
c0010bbf:	66 89 87 90 00 00 00 	mov    WORD PTR [edi+0x90],ax
c0010bc6:	53                   	push   ebx
c0010bc7:	8d 46 30             	lea    eax,[esi+0x30]
c0010bca:	0f b6 f0             	movzx  esi,al
c0010bcd:	56                   	push   esi
c0010bce:	e8 f9 fc ff ff       	call   c00108cc <VgaText::combineCharAndColour(char, unsigned char)>
c0010bd3:	5b                   	pop    ebx
c0010bd4:	5e                   	pop    esi
c0010bd5:	66 89 87 92 00 00 00 	mov    WORD PTR [edi+0x92],ax
c0010bdc:	5b                   	pop    ebx
c0010bdd:	5e                   	pop    esi
c0010bde:	5f                   	pop    edi
c0010bdf:	5d                   	pop    ebp
c0010be0:	c3                   	ret    
c0010be1:	90                   	nop

c0010be2 <VgaText::updateTitle()>:
c0010be2:	53                   	push   ebx
c0010be3:	31 c0                	xor    eax,eax
c0010be5:	83 ec 58             	sub    esp,0x58
c0010be8:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0010bec:	89 e1                	mov    ecx,esp
c0010bee:	c6 04 08 20          	mov    BYTE PTR [eax+ecx*1],0x20
c0010bf2:	40                   	inc    eax
c0010bf3:	83 f8 50             	cmp    eax,0x50
c0010bf6:	75 f6                	jne    c0010bee <VgaText::updateTitle()+0xc>
c0010bf8:	31 c0                	xor    eax,eax
c0010bfa:	8a 9c 02 1e 10 00 00 	mov    bl,BYTE PTR [edx+eax*1+0x101e]
c0010c01:	84 db                	test   bl,bl
c0010c03:	74 06                	je     c0010c0b <VgaText::updateTitle()+0x29>
c0010c05:	88 1c 01             	mov    BYTE PTR [ecx+eax*1],bl
c0010c08:	40                   	inc    eax
c0010c09:	eb ef                	jmp    c0010bfa <VgaText::updateTitle()+0x18>
c0010c0b:	8b 82 fc 0f 00 00    	mov    eax,DWORD PTR [edx+0xffc]
c0010c11:	85 c0                	test   eax,eax
c0010c13:	74 09                	je     c0010c1e <VgaText::updateTitle()+0x3c>
c0010c15:	53                   	push   ebx
c0010c16:	53                   	push   ebx
c0010c17:	51                   	push   ecx
c0010c18:	52                   	push   edx
c0010c19:	ff d0                	call   eax
c0010c1b:	83 c4 10             	add    esp,0x10
c0010c1e:	e8 55 fe ff ff       	call   c0010a78 <VgaText::updateDiskUsage()>
c0010c23:	83 c4 58             	add    esp,0x58
c0010c26:	5b                   	pop    ebx
c0010c27:	c3                   	ret    

c0010c28 <VgaText::setTitleTextColour(VgaColour)>:
c0010c28:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010c2c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010c30:	89 90 d8 0f 00 00    	mov    DWORD PTR [eax+0xfd8],edx
c0010c36:	eb aa                	jmp    c0010be2 <VgaText::updateTitle()>

c0010c38 <VgaText::setTitleColour(VgaColour)>:
c0010c38:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010c3c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010c40:	89 90 d4 0f 00 00    	mov    DWORD PTR [eax+0xfd4],edx
c0010c46:	eb 9a                	jmp    c0010be2 <VgaText::updateTitle()>

c0010c48 <VgaText::setTitle(char*)>:
c0010c48:	53                   	push   ebx
c0010c49:	83 ec 10             	sub    esp,0x10
c0010c4c:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0010c50:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010c54:	8d 83 1e 10 00 00    	lea    eax,[ebx+0x101e]
c0010c5a:	50                   	push   eax
c0010c5b:	e8 d4 fb fe ff       	call   c0000834 <strcpy>
c0010c60:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0010c64:	83 c4 18             	add    esp,0x18
c0010c67:	5b                   	pop    ebx
c0010c68:	e9 75 ff ff ff       	jmp    c0010be2 <VgaText::updateTitle()>
c0010c6d:	90                   	nop

c0010c6e <VgaText::decrementCursor(bool)>:
c0010c6e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0010c72:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0010c76:	8b 82 b0 0f 00 00    	mov    eax,DWORD PTR [edx+0xfb0]
c0010c7c:	85 c0                	test   eax,eax
c0010c7e:	74 07                	je     c0010c87 <VgaText::decrementCursor(bool)+0x19>
c0010c80:	48                   	dec    eax
c0010c81:	89 82 b0 0f 00 00    	mov    DWORD PTR [edx+0xfb0],eax
c0010c87:	84 c9                	test   cl,cl
c0010c89:	74 09                	je     c0010c94 <VgaText::decrementCursor(bool)+0x26>
c0010c8b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0010c8f:	e9 56 fa ff ff       	jmp    c00106ea <VgaText::updateCursor()>
c0010c94:	c3                   	ret    
c0010c95:	90                   	nop

c0010c96 <VgaText::putchar(char, VgaColour, VgaColour)>:
c0010c96:	53                   	push   ebx
c0010c97:	83 ec 08             	sub    esp,0x8
c0010c9a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010c9e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010ca2:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0010ca6:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0010caa:	3c 07                	cmp    al,0x7
c0010cac:	75 2a                	jne    c0010cd8 <VgaText::putchar(char, VgaColour, VgaColour)+0x42>
c0010cae:	a1 70 e8 02 c0       	mov    eax,ds:0xc002e870
c0010cb3:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0010cbb:	c7 44 24 18 f4 01 00 00 	mov    DWORD PTR [esp+0x18],0x1f4
c0010cc3:	c7 44 24 14 b8 01 00 00 	mov    DWORD PTR [esp+0x14],0x1b8
c0010ccb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0010ccf:	83 c4 08             	add    esp,0x8
c0010cd2:	5b                   	pop    ebx
c0010cd3:	e9 0a 31 00 00       	jmp    c0013de2 <Buzzer::beep(int, int, bool)>
c0010cd8:	3c 0d                	cmp    al,0xd
c0010cda:	75 0c                	jne    c0010ce8 <VgaText::putchar(char, VgaColour, VgaColour)+0x52>
c0010cdc:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c0010ce6:	eb 3b                	jmp    c0010d23 <VgaText::putchar(char, VgaColour, VgaColour)+0x8d>
c0010ce8:	3c 0a                	cmp    al,0xa
c0010cea:	75 40                	jne    c0010d2c <VgaText::putchar(char, VgaColour, VgaColour)+0x96>
c0010cec:	8b 83 b4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb4]
c0010cf2:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c0010cfc:	8d 50 01             	lea    edx,[eax+0x1]
c0010cff:	89 93 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],edx
c0010d05:	3b 93 ac 0f 00 00    	cmp    edx,DWORD PTR [ebx+0xfac]
c0010d0b:	75 12                	jne    c0010d1f <VgaText::putchar(char, VgaColour, VgaColour)+0x89>
c0010d0d:	83 ec 0c             	sub    esp,0xc
c0010d10:	89 83 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],eax
c0010d16:	53                   	push   ebx
c0010d17:	e8 1c fb ff ff       	call   c0010838 <VgaText::scrollScreen()>
c0010d1c:	83 c4 10             	add    esp,0x10
c0010d1f:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010d23:	83 c4 08             	add    esp,0x8
c0010d26:	5b                   	pop    ebx
c0010d27:	e9 be f9 ff ff       	jmp    c00106ea <VgaText::updateCursor()>
c0010d2c:	3c 08                	cmp    al,0x8
c0010d2e:	75 31                	jne    c0010d61 <VgaText::putchar(char, VgaColour, VgaColour)+0xcb>
c0010d30:	50                   	push   eax
c0010d31:	50                   	push   eax
c0010d32:	6a 01                	push   0x1
c0010d34:	53                   	push   ebx
c0010d35:	e8 34 ff ff ff       	call   c0010c6e <VgaText::decrementCursor(bool)>
c0010d3a:	5a                   	pop    edx
c0010d3b:	59                   	pop    ecx
c0010d3c:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c0010d42:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c0010d48:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c0010d4e:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c0010d54:	6a 20                	push   0x20
c0010d56:	53                   	push   ebx
c0010d57:	e8 82 fb ff ff       	call   c00108de <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010d5c:	83 c4 28             	add    esp,0x28
c0010d5f:	5b                   	pop    ebx
c0010d60:	c3                   	ret    
c0010d61:	83 ec 08             	sub    esp,0x8
c0010d64:	0f be c0             	movsx  eax,al
c0010d67:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c0010d6d:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c0010d73:	51                   	push   ecx
c0010d74:	52                   	push   edx
c0010d75:	50                   	push   eax
c0010d76:	53                   	push   ebx
c0010d77:	e8 62 fb ff ff       	call   c00108de <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010d7c:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c0010d80:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c0010d88:	83 c4 28             	add    esp,0x28
c0010d8b:	5b                   	pop    ebx
c0010d8c:	e9 1b fc ff ff       	jmp    c00109ac <VgaText::incrementCursor(bool)>
c0010d91:	90                   	nop

c0010d92 <VgaText::isShowingCursor()>:
c0010d92:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010d96:	8a 80 bc 0f 00 00    	mov    al,BYTE PTR [eax+0xfbc]
c0010d9c:	c3                   	ret    
c0010d9d:	90                   	nop

c0010d9e <VgaText::isBlinkDisabled()>:
c0010d9e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010da2:	8a 80 bd 0f 00 00    	mov    al,BYTE PTR [eax+0xfbd]
c0010da8:	83 f0 01             	xor    eax,0x1
c0010dab:	c3                   	ret    

c0010dac <VgaText::setCursorHeight(int)>:
c0010dac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010db0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010db4:	89 90 b8 0f 00 00    	mov    DWORD PTR [eax+0xfb8],edx
c0010dba:	0f b6 80 bc 0f 00 00 	movzx  eax,BYTE PTR [eax+0xfbc]
c0010dc1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010dc5:	e9 3a f9 ff ff       	jmp    c0010704 <VgaText::showCursor(bool)>

c0010dca <VgaText::getCursorHeight()>:
c0010dca:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010dce:	8b 80 b8 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb8]
c0010dd4:	c3                   	ret    

c0010dd5 <setActiveTerminal(VgaText*)>:
c0010dd5:	53                   	push   ebx
c0010dd6:	83 ec 08             	sub    esp,0x8
c0010dd9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010ddd:	85 db                	test   ebx,ebx
c0010ddf:	75 11                	jne    c0010df2 <setActiveTerminal(VgaText*)+0x1d>
c0010de1:	c7 44 24 10 c8 a4 02 c0 	mov    DWORD PTR [esp+0x10],0xc002a4c8
c0010de9:	83 c4 08             	add    esp,0x8
c0010dec:	5b                   	pop    ebx
c0010ded:	e9 a3 98 00 00       	jmp    c001a695 <Krnl::panic(char const*)>
c0010df2:	50                   	push   eax
c0010df3:	50                   	push   eax
c0010df4:	53                   	push   ebx
c0010df5:	68 d6 a4 02 c0       	push   0xc002a4d6
c0010dfa:	e8 e4 21 00 00       	call   c0012fe3 <Dbg::kprintf(char const*, ...)>
c0010dff:	a1 c4 e7 02 c0       	mov    eax,ds:0xc002e7c4
c0010e04:	83 c4 10             	add    esp,0x10
c0010e07:	85 c0                	test   eax,eax
c0010e09:	74 0c                	je     c0010e17 <setActiveTerminal(VgaText*)+0x42>
c0010e0b:	83 ec 0c             	sub    esp,0xc
c0010e0e:	50                   	push   eax
c0010e0f:	e8 d6 f8 ff ff       	call   c00106ea <VgaText::updateCursor()>
c0010e14:	83 c4 10             	add    esp,0x10
c0010e17:	89 1d c4 e7 02 c0    	mov    DWORD PTR ds:0xc002e7c4,ebx
c0010e1d:	51                   	push   ecx
c0010e1e:	51                   	push   ecx
c0010e1f:	53                   	push   ebx
c0010e20:	68 ee a4 02 c0       	push   0xc002a4ee
c0010e25:	e8 b9 21 00 00       	call   c0012fe3 <Dbg::kprintf(char const*, ...)>
c0010e2a:	83 c4 0c             	add    esp,0xc
c0010e2d:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c0010e33:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c0010e39:	53                   	push   ebx
c0010e3a:	e8 17 fb ff ff       	call   c0010956 <VgaText::setCursor(int, int)>
c0010e3f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010e42:	e8 57 ff ff ff       	call   c0010d9e <VgaText::isBlinkDisabled()>
c0010e47:	5a                   	pop    edx
c0010e48:	0f b6 c0             	movzx  eax,al
c0010e4b:	59                   	pop    ecx
c0010e4c:	50                   	push   eax
c0010e4d:	53                   	push   ebx
c0010e4e:	e8 c1 f8 ff ff       	call   c0010714 <VgaText::disableBlink(bool)>
c0010e53:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010e56:	e8 6f ff ff ff       	call   c0010dca <VgaText::getCursorHeight()>
c0010e5b:	5a                   	pop    edx
c0010e5c:	59                   	pop    ecx
c0010e5d:	50                   	push   eax
c0010e5e:	53                   	push   ebx
c0010e5f:	e8 48 ff ff ff       	call   c0010dac <VgaText::setCursorHeight(int)>
c0010e64:	83 c4 10             	add    esp,0x10
c0010e67:	80 bb f4 0f 00 00 00 	cmp    BYTE PTR [ebx+0xff4],0x0
c0010e6e:	75 0a                	jne    c0010e7a <setActiveTerminal(VgaText*)+0xa5>
c0010e70:	c7 83 f8 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xff8],0x0
c0010e7a:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010e7e:	83 c4 08             	add    esp,0x8
c0010e81:	5b                   	pop    ebx
c0010e82:	e9 0f f8 ff ff       	jmp    c0010696 <VgaText::load()>

c0010e87 <doTerminalCycle()>:
c0010e87:	83 ec 18             	sub    esp,0x18
c0010e8a:	a1 c0 e7 02 c0       	mov    eax,ds:0xc002e7c0
c0010e8f:	8b 80 c0 0f 00 00    	mov    eax,DWORD PTR [eax+0xfc0]
c0010e95:	50                   	push   eax
c0010e96:	a3 c0 e7 02 c0       	mov    ds:0xc002e7c0,eax
c0010e9b:	e8 35 ff ff ff       	call   c0010dd5 <setActiveTerminal(VgaText*)>
c0010ea0:	83 c4 1c             	add    esp,0x1c
c0010ea3:	c3                   	ret    

c0010ea4 <VgaText::doUpdate()>:
c0010ea4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010ea8:	8b 80 04 10 00 00    	mov    eax,DWORD PTR [eax+0x1004]
c0010eae:	85 c0                	test   eax,eax
c0010eb0:	74 02                	je     c0010eb4 <VgaText::doUpdate()+0x10>
c0010eb2:	ff e0                	jmp    eax
c0010eb4:	c3                   	ret    
c0010eb5:	90                   	nop

c0010eb6 <VgaText::puts(char const*, VgaColour, VgaColour)>:
c0010eb6:	55                   	push   ebp
c0010eb7:	57                   	push   edi
c0010eb8:	56                   	push   esi
c0010eb9:	53                   	push   ebx
c0010eba:	83 ec 1c             	sub    esp,0x1c
c0010ebd:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0010ec1:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c0010ec6:	c6 85 1d 10 00 00 01 	mov    BYTE PTR [ebp+0x101d],0x1
c0010ecd:	8d 7d 0c             	lea    edi,[ebp+0xc]
c0010ed0:	50                   	push   eax
c0010ed1:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c0010ed6:	50                   	push   eax
c0010ed7:	e8 4a f9 ff ff       	call   c0010826 <VgaText::combineColours(unsigned char, unsigned char)>
c0010edc:	59                   	pop    ecx
c0010edd:	0f b6 c0             	movzx  eax,al
c0010ee0:	5b                   	pop    ebx
c0010ee1:	31 c9                	xor    ecx,ecx
c0010ee3:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010eeb:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0010eef:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c0010ef5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010ef9:	0f b7 db             	movzx  ebx,bx
c0010efc:	01 db                	add    ebx,ebx
c0010efe:	01 fb                	add    ebx,edi
c0010f00:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0010f03:	84 c0                	test   al,al
c0010f05:	0f 84 38 01 00 00    	je     c0011043 <VgaText::puts(char const*, VgaColour, VgaColour)+0x18d>
c0010f0b:	3c 0d                	cmp    al,0xd
c0010f0d:	75 0f                	jne    c0010f1e <VgaText::puts(char const*, VgaColour, VgaColour)+0x68>
c0010f0f:	c7 85 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0xfb0],0x0
c0010f19:	e9 1f 01 00 00       	jmp    c001103d <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c0010f1e:	3c 0a                	cmp    al,0xa
c0010f20:	75 5b                	jne    c0010f7d <VgaText::puts(char const*, VgaColour, VgaColour)+0xc7>
c0010f22:	8b 85 b4 0f 00 00    	mov    eax,DWORD PTR [ebp+0xfb4]
c0010f28:	c7 85 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0xfb0],0x0
c0010f32:	8d 48 01             	lea    ecx,[eax+0x1]
c0010f35:	89 8d b4 0f 00 00    	mov    DWORD PTR [ebp+0xfb4],ecx
c0010f3b:	3b 8d ac 0f 00 00    	cmp    ecx,DWORD PTR [ebp+0xfac]
c0010f41:	75 12                	jne    c0010f55 <VgaText::puts(char const*, VgaColour, VgaColour)+0x9f>
c0010f43:	83 ec 0c             	sub    esp,0xc
c0010f46:	89 85 b4 0f 00 00    	mov    DWORD PTR [ebp+0xfb4],eax
c0010f4c:	55                   	push   ebp
c0010f4d:	e8 e6 f8 ff ff       	call   c0010838 <VgaText::scrollScreen()>
c0010f52:	83 c4 10             	add    esp,0x10
c0010f55:	83 ec 0c             	sub    esp,0xc
c0010f58:	55                   	push   ebp
c0010f59:	e8 8c f7 ff ff       	call   c00106ea <VgaText::updateCursor()>
c0010f5e:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010f66:	83 c4 10             	add    esp,0x10
c0010f69:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c0010f6f:	31 c9                	xor    ecx,ecx
c0010f71:	0f b7 db             	movzx  ebx,bx
c0010f74:	01 db                	add    ebx,ebx
c0010f76:	01 fb                	add    ebx,edi
c0010f78:	e9 c0 00 00 00       	jmp    c001103d <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c0010f7d:	3c 08                	cmp    al,0x8
c0010f7f:	75 4e                	jne    c0010fcf <VgaText::puts(char const*, VgaColour, VgaColour)+0x119>
c0010f81:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0010f85:	53                   	push   ebx
c0010f86:	53                   	push   ebx
c0010f87:	6a 01                	push   0x1
c0010f89:	55                   	push   ebp
c0010f8a:	e8 df fc ff ff       	call   c0010c6e <VgaText::decrementCursor(bool)>
c0010f8f:	58                   	pop    eax
c0010f90:	5a                   	pop    edx
c0010f91:	ff b5 b4 0f 00 00    	push   DWORD PTR [ebp+0xfb4]
c0010f97:	ff b5 b0 0f 00 00    	push   DWORD PTR [ebp+0xfb0]
c0010f9d:	ff b5 cc 0f 00 00    	push   DWORD PTR [ebp+0xfcc]
c0010fa3:	ff b5 d0 0f 00 00    	push   DWORD PTR [ebp+0xfd0]
c0010fa9:	6a 20                	push   0x20
c0010fab:	55                   	push   ebp
c0010fac:	e8 2d f9 ff ff       	call   c00108de <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010fb1:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010fb9:	83 c4 20             	add    esp,0x20
c0010fbc:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c0010fc2:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0010fc6:	0f b7 db             	movzx  ebx,bx
c0010fc9:	01 db                	add    ebx,ebx
c0010fcb:	01 fb                	add    ebx,edi
c0010fcd:	eb 6e                	jmp    c001103d <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c0010fcf:	51                   	push   ecx
c0010fd0:	51                   	push   ecx
c0010fd1:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0010fd5:	50                   	push   eax
c0010fd6:	e8 f1 f8 ff ff       	call   c00108cc <VgaText::combineCharAndColour(char, unsigned char)>
c0010fdb:	83 c4 10             	add    esp,0x10
c0010fde:	66 89 03             	mov    WORD PTR [ebx],ax
c0010fe1:	39 2d c4 e7 02 c0    	cmp    DWORD PTR ds:0xc002e7c4,ebp
c0010fe7:	75 2a                	jne    c0011013 <VgaText::puts(char const*, VgaColour, VgaColour)+0x15d>
c0010fe9:	8b 85 18 10 00 00    	mov    eax,DWORD PTR [ebp+0x1018]
c0010fef:	85 c0                	test   eax,eax
c0010ff1:	74 20                	je     c0011013 <VgaText::puts(char const*, VgaColour, VgaColour)+0x15d>
c0010ff3:	52                   	push   edx
c0010ff4:	52                   	push   edx
c0010ff5:	ff b5 b4 0f 00 00    	push   DWORD PTR [ebp+0xfb4]
c0010ffb:	ff b5 b0 0f 00 00    	push   DWORD PTR [ebp+0xfb0]
c0011001:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0011005:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0011009:	0f be 0e             	movsx  ecx,BYTE PTR [esi]
c001100c:	51                   	push   ecx
c001100d:	55                   	push   ebp
c001100e:	ff d0                	call   eax
c0011010:	83 c4 20             	add    esp,0x20
c0011013:	83 c3 02             	add    ebx,0x2
c0011016:	50                   	push   eax
c0011017:	50                   	push   eax
c0011018:	6a 00                	push   0x0
c001101a:	55                   	push   ebp
c001101b:	e8 8c f9 ff ff       	call   c00109ac <VgaText::incrementCursor(bool)>
c0011020:	83 c4 10             	add    esp,0x10
c0011023:	83 bd b0 0f 00 00 00 	cmp    DWORD PTR [ebp+0xfb0],0x0
c001102a:	75 0f                	jne    c001103b <VgaText::puts(char const*, VgaColour, VgaColour)+0x185>
c001102c:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0011034:	0f b7 db             	movzx  ebx,bx
c0011037:	01 db                	add    ebx,ebx
c0011039:	01 fb                	add    ebx,edi
c001103b:	b1 01                	mov    cl,0x1
c001103d:	46                   	inc    esi
c001103e:	e9 bd fe ff ff       	jmp    c0010f00 <VgaText::puts(char const*, VgaColour, VgaColour)+0x4a>
c0011043:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0011047:	83 ec 0c             	sub    esp,0xc
c001104a:	55                   	push   ebp
c001104b:	e8 9a f6 ff ff       	call   c00106ea <VgaText::updateCursor()>
c0011050:	83 c4 10             	add    esp,0x10
c0011053:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0011057:	84 c9                	test   cl,cl
c0011059:	74 0c                	je     c0011067 <VgaText::puts(char const*, VgaColour, VgaColour)+0x1b1>
c001105b:	83 ec 0c             	sub    esp,0xc
c001105e:	55                   	push   ebp
c001105f:	e8 40 fe ff ff       	call   c0010ea4 <VgaText::doUpdate()>
c0011064:	83 c4 10             	add    esp,0x10
c0011067:	c6 85 1d 10 00 00 00 	mov    BYTE PTR [ebp+0x101d],0x0
c001106e:	83 c4 1c             	add    esp,0x1c
c0011071:	5b                   	pop    ebx
c0011072:	5e                   	pop    esi
c0011073:	5f                   	pop    edi
c0011074:	5d                   	pop    ebp
c0011075:	c3                   	ret    

c0011076 <VgaText::clearScreen()>:
c0011076:	57                   	push   edi
c0011077:	56                   	push   esi
c0011078:	31 f6                	xor    esi,esi
c001107a:	53                   	push   ebx
c001107b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001107f:	52                   	push   edx
c0011080:	6a 00                	push   0x0
c0011082:	6a 00                	push   0x0
c0011084:	53                   	push   ebx
c0011085:	e8 cc f8 ff ff       	call   c0010956 <VgaText::setCursor(int, int)>
c001108a:	c6 83 1d 10 00 00 01 	mov    BYTE PTR [ebx+0x101d],0x1
c0011091:	83 c4 10             	add    esp,0x10
c0011094:	39 b3 ac 0f 00 00    	cmp    DWORD PTR [ebx+0xfac],esi
c001109a:	7e 26                	jle    c00110c2 <VgaText::clearScreen()+0x4c>
c001109c:	31 ff                	xor    edi,edi
c001109e:	50                   	push   eax
c001109f:	50                   	push   eax
c00110a0:	56                   	push   esi
c00110a1:	57                   	push   edi
c00110a2:	47                   	inc    edi
c00110a3:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c00110a9:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c00110af:	6a 20                	push   0x20
c00110b1:	53                   	push   ebx
c00110b2:	e8 27 f8 ff ff       	call   c00108de <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00110b7:	83 c4 20             	add    esp,0x20
c00110ba:	83 ff 50             	cmp    edi,0x50
c00110bd:	75 df                	jne    c001109e <VgaText::clearScreen()+0x28>
c00110bf:	46                   	inc    esi
c00110c0:	eb d2                	jmp    c0011094 <VgaText::clearScreen()+0x1e>
c00110c2:	83 ec 0c             	sub    esp,0xc
c00110c5:	53                   	push   ebx
c00110c6:	e8 d9 fd ff ff       	call   c0010ea4 <VgaText::doUpdate()>
c00110cb:	c6 83 1d 10 00 00 00 	mov    BYTE PTR [ebx+0x101d],0x0
c00110d2:	83 c4 10             	add    esp,0x10
c00110d5:	5b                   	pop    ebx
c00110d6:	5e                   	pop    esi
c00110d7:	5f                   	pop    edi
c00110d8:	c3                   	ret    
c00110d9:	90                   	nop

c00110da <VgaText::putchar(char)>:
c00110da:	56                   	push   esi
c00110db:	53                   	push   ebx
c00110dc:	83 ec 14             	sub    esp,0x14
c00110df:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00110e3:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00110e7:	3c 5b                	cmp    al,0x5b
c00110e9:	75 21                	jne    c001110c <VgaText::putchar(char)+0x32>
c00110eb:	80 bb dc 0f 00 00 00 	cmp    BYTE PTR [ebx+0xfdc],0x0
c00110f2:	74 28                	je     c001111c <VgaText::putchar(char)+0x42>
c00110f4:	66 c7 83 dc 0f 00 00 00 01 	mov    WORD PTR [ebx+0xfdc],0x100
c00110fd:	c7 83 f0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xff0],0x0
c0011107:	e9 e2 00 00 00       	jmp    c00111ee <VgaText::putchar(char)+0x114>
c001110c:	3c 1b                	cmp    al,0x1b
c001110e:	75 0c                	jne    c001111c <VgaText::putchar(char)+0x42>
c0011110:	c6 83 dc 0f 00 00 01 	mov    BYTE PTR [ebx+0xfdc],0x1
c0011117:	e9 d2 00 00 00       	jmp    c00111ee <VgaText::putchar(char)+0x114>
c001111c:	8a 8b dd 0f 00 00    	mov    cl,BYTE PTR [ebx+0xfdd]
c0011122:	84 c9                	test   cl,cl
c0011124:	0f 84 ab 00 00 00    	je     c00111d5 <VgaText::putchar(char)+0xfb>
c001112a:	8d 50 c0             	lea    edx,[eax-0x40]
c001112d:	80 fa 3e             	cmp    dl,0x3e
c0011130:	0f 87 82 00 00 00    	ja     c00111b8 <VgaText::putchar(char)+0xde>
c0011136:	3c 6d                	cmp    al,0x6d
c0011138:	75 4d                	jne    c0011187 <VgaText::putchar(char)+0xad>
c001113a:	31 f6                	xor    esi,esi
c001113c:	31 d2                	xor    edx,edx
c001113e:	31 c0                	xor    eax,eax
c0011140:	39 b3 f0 0f 00 00    	cmp    DWORD PTR [ebx+0xff0],esi
c0011146:	7e 30                	jle    c0011178 <VgaText::putchar(char)+0x9e>
c0011148:	0f be 94 33 de 0f 00 00 	movsx  edx,BYTE PTR [ebx+esi*1+0xfde]
c0011150:	80 fa 3b             	cmp    dl,0x3b
c0011153:	75 17                	jne    c001116c <VgaText::putchar(char)+0x92>
c0011155:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0011159:	50                   	push   eax
c001115a:	53                   	push   ebx
c001115b:	e8 ee f5 ff ff       	call   c001074e <VgaText::doANSI_SGR(int)>
c0011160:	59                   	pop    ecx
c0011161:	31 d2                	xor    edx,edx
c0011163:	58                   	pop    eax
c0011164:	31 c0                	xor    eax,eax
c0011166:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001116a:	eb 09                	jmp    c0011175 <VgaText::putchar(char)+0x9b>
c001116c:	6b c0 0a             	imul   eax,eax,0xa
c001116f:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c0011173:	88 ca                	mov    dl,cl
c0011175:	46                   	inc    esi
c0011176:	eb c8                	jmp    c0011140 <VgaText::putchar(char)+0x66>
c0011178:	84 d2                	test   dl,dl
c001117a:	74 31                	je     c00111ad <VgaText::putchar(char)+0xd3>
c001117c:	50                   	push   eax
c001117d:	53                   	push   ebx
c001117e:	e8 cb f5 ff ff       	call   c001074e <VgaText::doANSI_SGR(int)>
c0011183:	58                   	pop    eax
c0011184:	5a                   	pop    edx
c0011185:	eb 26                	jmp    c00111ad <VgaText::putchar(char)+0xd3>
c0011187:	3c 4a                	cmp    al,0x4a
c0011189:	75 22                	jne    c00111ad <VgaText::putchar(char)+0xd3>
c001118b:	80 bb de 0f 00 00 32 	cmp    BYTE PTR [ebx+0xfde],0x32
c0011192:	75 19                	jne    c00111ad <VgaText::putchar(char)+0xd3>
c0011194:	83 ec 0c             	sub    esp,0xc
c0011197:	53                   	push   ebx
c0011198:	e8 d9 fe ff ff       	call   c0011076 <VgaText::clearScreen()>
c001119d:	83 c4 0c             	add    esp,0xc
c00111a0:	6a 00                	push   0x0
c00111a2:	6a 00                	push   0x0
c00111a4:	53                   	push   ebx
c00111a5:	e8 ac f7 ff ff       	call   c0010956 <VgaText::setCursor(int, int)>
c00111aa:	83 c4 10             	add    esp,0x10
c00111ad:	66 c7 83 dc 0f 00 00 00 00 	mov    WORD PTR [ebx+0xfdc],0x0
c00111b6:	eb 36                	jmp    c00111ee <VgaText::putchar(char)+0x114>
c00111b8:	8b 93 f0 0f 00 00    	mov    edx,DWORD PTR [ebx+0xff0]
c00111be:	83 fa 0e             	cmp    edx,0xe
c00111c1:	7f 2b                	jg     c00111ee <VgaText::putchar(char)+0x114>
c00111c3:	8d 4a 01             	lea    ecx,[edx+0x1]
c00111c6:	89 8b f0 0f 00 00    	mov    DWORD PTR [ebx+0xff0],ecx
c00111cc:	88 84 13 de 0f 00 00 	mov    BYTE PTR [ebx+edx*1+0xfde],al
c00111d3:	eb 19                	jmp    c00111ee <VgaText::putchar(char)+0x114>
c00111d5:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c00111db:	0f be c0             	movsx  eax,al
c00111de:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c00111e4:	50                   	push   eax
c00111e5:	53                   	push   ebx
c00111e6:	e8 ab fa ff ff       	call   c0010c96 <VgaText::putchar(char, VgaColour, VgaColour)>
c00111eb:	83 c4 10             	add    esp,0x10
c00111ee:	83 c4 14             	add    esp,0x14
c00111f1:	5b                   	pop    ebx
c00111f2:	5e                   	pop    esi
c00111f3:	c3                   	ret    

c00111f4 <VgaText::puts(char const*)>:
c00111f4:	53                   	push   ebx
c00111f5:	83 ec 08             	sub    esp,0x8
c00111f8:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00111fc:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c00111ff:	84 c0                	test   al,al
c0011201:	74 12                	je     c0011215 <VgaText::puts(char const*)+0x21>
c0011203:	43                   	inc    ebx
c0011204:	51                   	push   ecx
c0011205:	51                   	push   ecx
c0011206:	50                   	push   eax
c0011207:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001120b:	e8 ca fe ff ff       	call   c00110da <VgaText::putchar(char)>
c0011210:	83 c4 10             	add    esp,0x10
c0011213:	eb e7                	jmp    c00111fc <VgaText::puts(char const*)+0x8>
c0011215:	83 c4 08             	add    esp,0x8
c0011218:	5b                   	pop    ebx
c0011219:	c3                   	ret    

c001121a <VgaText::putx(unsigned int)>:
c001121a:	57                   	push   edi
c001121b:	b9 11 00 00 00       	mov    ecx,0x11
c0011220:	56                   	push   esi
c0011221:	be 0a a5 02 c0       	mov    esi,0xc002a50a
c0011226:	53                   	push   ebx
c0011227:	83 ec 20             	sub    esp,0x20
c001122a:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001122e:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c0011232:	fc                   	cld    
c0011233:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011235:	be 08 00 00 00       	mov    esi,0x8
c001123a:	50                   	push   eax
c001123b:	50                   	push   eax
c001123c:	89 d8                	mov    eax,ebx
c001123e:	c1 e3 04             	shl    ebx,0x4
c0011241:	c1 e8 1c             	shr    eax,0x1c
c0011244:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c0011249:	50                   	push   eax
c001124a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001124e:	e8 87 fe ff ff       	call   c00110da <VgaText::putchar(char)>
c0011253:	83 c4 10             	add    esp,0x10
c0011256:	4e                   	dec    esi
c0011257:	75 e1                	jne    c001123a <VgaText::putx(unsigned int)+0x20>
c0011259:	83 c4 20             	add    esp,0x20
c001125c:	5b                   	pop    ebx
c001125d:	5e                   	pop    esi
c001125e:	5f                   	pop    edi
c001125f:	c3                   	ret    

c0011260 <VgaText::VgaText(char const*)>:
c0011260:	57                   	push   edi
c0011261:	56                   	push   esi
c0011262:	53                   	push   ebx
c0011263:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011267:	83 ec 08             	sub    esp,0x8
c001126a:	6a 00                	push   0x0
c001126c:	50                   	push   eax
c001126d:	e8 6e 05 00 00       	call   c00117e0 <UnixFile::UnixFile(int)>
c0011272:	83 c4 10             	add    esp,0x10
c0011275:	ba 70 a5 02 c0       	mov    edx,0xc002a570
c001127a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001127e:	89 10                	mov    DWORD PTR [eax],edx
c0011280:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011284:	c7 80 d4 0f 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xfd4],0x1
c001128e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011292:	c7 80 d8 0f 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0xfd8],0xf
c001129c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00112a0:	c6 80 dc 0f 00 00 00 	mov    BYTE PTR [eax+0xfdc],0x0
c00112a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00112ab:	c6 80 dd 0f 00 00 00 	mov    BYTE PTR [eax+0xfdd],0x0
c00112b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00112b6:	c7 80 f0 0f 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xff0],0x0
c00112c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00112c4:	c7 80 f8 0f 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xff8],0x0
c00112ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00112d2:	c6 80 1c 10 00 00 00 	mov    BYTE PTR [eax+0x101c],0x0
c00112d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00112dd:	c6 80 1d 10 00 00 00 	mov    BYTE PTR [eax+0x101d],0x0
c00112e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00112e8:	8d 90 fc 0f 00 00    	lea    edx,[eax+0xffc]
c00112ee:	bb a0 e7 02 c0       	mov    ebx,0xc002e7a0
c00112f3:	b8 08 00 00 00       	mov    eax,0x8
c00112f8:	fc                   	cld    
c00112f9:	89 d7                	mov    edi,edx
c00112fb:	89 de                	mov    esi,ebx
c00112fd:	89 c1                	mov    ecx,eax
c00112ff:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0011301:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011305:	05 1e 10 00 00       	add    eax,0x101e
c001130a:	83 ec 08             	sub    esp,0x8
c001130d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011311:	50                   	push   eax
c0011312:	e8 1d f5 fe ff       	call   c0000834 <strcpy>
c0011317:	83 c4 10             	add    esp,0x10
c001131a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001131e:	c7 80 ac 0f 00 00 18 00 00 00 	mov    DWORD PTR [eax+0xfac],0x18
c0011328:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001132c:	83 c0 0c             	add    eax,0xc
c001132f:	83 ec 04             	sub    esp,0x4
c0011332:	68 00 0f 00 00       	push   0xf00
c0011337:	6a 00                	push   0x0
c0011339:	50                   	push   eax
c001133a:	e8 39 f4 fe ff       	call   c0000778 <memset>
c001133f:	83 c4 10             	add    esp,0x10
c0011342:	83 ec 04             	sub    esp,0x4
c0011345:	6a 00                	push   0x0
c0011347:	6a 07                	push   0x7
c0011349:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001134d:	e8 b4 f4 ff ff       	call   c0010806 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0011352:	83 c4 10             	add    esp,0x10
c0011355:	83 ec 08             	sub    esp,0x8
c0011358:	6a 02                	push   0x2
c001135a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001135e:	e8 49 fa ff ff       	call   c0010dac <VgaText::setCursorHeight(int)>
c0011363:	83 c4 10             	add    esp,0x10
c0011366:	83 ec 04             	sub    esp,0x4
c0011369:	6a 00                	push   0x0
c001136b:	6a 00                	push   0x0
c001136d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011371:	e8 e0 f5 ff ff       	call   c0010956 <VgaText::setCursor(int, int)>
c0011376:	83 c4 10             	add    esp,0x10
c0011379:	83 ec 08             	sub    esp,0x8
c001137c:	6a 01                	push   0x1
c001137e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011382:	e8 7d f3 ff ff       	call   c0010704 <VgaText::showCursor(bool)>
c0011387:	83 c4 10             	add    esp,0x10
c001138a:	83 ec 08             	sub    esp,0x8
c001138d:	6a 01                	push   0x1
c001138f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011393:	e8 7c f3 ff ff       	call   c0010714 <VgaText::disableBlink(bool)>
c0011398:	83 c4 10             	add    esp,0x10
c001139b:	83 ec 0c             	sub    esp,0xc
c001139e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00113a2:	e8 cf fc ff ff       	call   c0011076 <VgaText::clearScreen()>
c00113a7:	83 c4 10             	add    esp,0x10
c00113aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00113ae:	c6 80 f4 0f 00 00 00 	mov    BYTE PTR [eax+0xff4],0x0
c00113b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00113b9:	05 9e 10 00 00       	add    eax,0x109e
c00113be:	83 ec 04             	sub    esp,0x4
c00113c1:	68 96 00 00 00       	push   0x96
c00113c6:	6a 00                	push   0x0
c00113c8:	50                   	push   eax
c00113c9:	e8 aa f3 fe ff       	call   c0000778 <memset>
c00113ce:	83 c4 10             	add    esp,0x10
c00113d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00113d5:	05 34 11 00 00       	add    eax,0x1134
c00113da:	83 ec 04             	sub    esp,0x4
c00113dd:	68 2c 01 00 00       	push   0x12c
c00113e2:	6a 00                	push   0x0
c00113e4:	50                   	push   eax
c00113e5:	e8 8e f3 fe ff       	call   c0000778 <memset>
c00113ea:	83 c4 10             	add    esp,0x10
c00113ed:	90                   	nop
c00113ee:	5b                   	pop    ebx
c00113ef:	5e                   	pop    esi
c00113f0:	5f                   	pop    edi
c00113f1:	c3                   	ret    

c00113f2 <VgaText::receiveKey(unsigned char)>:
c00113f2:	55                   	push   ebp
c00113f3:	57                   	push   edi
c00113f4:	56                   	push   esi
c00113f5:	53                   	push   ebx
c00113f6:	83 ec 1c             	sub    esp,0x1c
c00113f9:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00113fd:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0011401:	84 db                	test   bl,bl
c0011403:	0f 84 c9 00 00 00    	je     c00114d2 <VgaText::receiveKey(unsigned char)+0xe0>
c0011409:	8d be 9e 10 00 00    	lea    edi,[esi+0x109e]
c001140f:	80 fb 08             	cmp    bl,0x8
c0011412:	75 2c                	jne    c0011440 <VgaText::receiveKey(unsigned char)+0x4e>
c0011414:	83 ec 0c             	sub    esp,0xc
c0011417:	57                   	push   edi
c0011418:	e8 77 f3 fe ff       	call   c0000794 <strlen>
c001141d:	83 c4 10             	add    esp,0x10
c0011420:	85 c0                	test   eax,eax
c0011422:	74 41                	je     c0011465 <VgaText::receiveKey(unsigned char)+0x73>
c0011424:	50                   	push   eax
c0011425:	50                   	push   eax
c0011426:	6a 08                	push   0x8
c0011428:	56                   	push   esi
c0011429:	e8 ac fc ff ff       	call   c00110da <VgaText::putchar(char)>
c001142e:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011431:	e8 5e f3 fe ff       	call   c0000794 <strlen>
c0011436:	c6 84 06 9d 10 00 00 00 	mov    BYTE PTR [esi+eax*1+0x109d],0x0
c001143e:	eb 22                	jmp    c0011462 <VgaText::receiveKey(unsigned char)+0x70>
c0011440:	0f be c3             	movsx  eax,bl
c0011443:	52                   	push   edx
c0011444:	52                   	push   edx
c0011445:	50                   	push   eax
c0011446:	56                   	push   esi
c0011447:	e8 8e fc ff ff       	call   c00110da <VgaText::putchar(char)>
c001144c:	88 5c 24 1e          	mov    BYTE PTR [esp+0x1e],bl
c0011450:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0011455:	59                   	pop    ecx
c0011456:	5d                   	pop    ebp
c0011457:	8d 44 24 16          	lea    eax,[esp+0x16]
c001145b:	50                   	push   eax
c001145c:	57                   	push   edi
c001145d:	e8 12 f5 fe ff       	call   c0000974 <strcat>
c0011462:	83 c4 10             	add    esp,0x10
c0011465:	80 be 1c 10 00 00 00 	cmp    BYTE PTR [esi+0x101c],0x0
c001146c:	75 05                	jne    c0011473 <VgaText::receiveKey(unsigned char)+0x81>
c001146e:	80 fb 0a             	cmp    bl,0xa
c0011471:	75 53                	jne    c00114c6 <VgaText::receiveKey(unsigned char)+0xd4>
c0011473:	83 ec 0c             	sub    esp,0xc
c0011476:	8d 9e 34 11 00 00    	lea    ebx,[esi+0x1134]
c001147c:	53                   	push   ebx
c001147d:	e8 12 f3 fe ff       	call   c0000794 <strlen>
c0011482:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011485:	89 c5                	mov    ebp,eax
c0011487:	e8 08 f3 fe ff       	call   c0000794 <strlen>
c001148c:	83 c4 10             	add    esp,0x10
c001148f:	8d 44 05 04          	lea    eax,[ebp+eax*1+0x4]
c0011493:	3d 2c 01 00 00       	cmp    eax,0x12c
c0011498:	76 10                	jbe    c00114aa <VgaText::receiveKey(unsigned char)+0xb8>
c001149a:	83 ec 0c             	sub    esp,0xc
c001149d:	68 1b a5 02 c0       	push   0xc002a51b
c00114a2:	e8 ee 91 00 00       	call   c001a695 <Krnl::panic(char const*)>
c00114a7:	83 c4 10             	add    esp,0x10
c00114aa:	50                   	push   eax
c00114ab:	50                   	push   eax
c00114ac:	57                   	push   edi
c00114ad:	53                   	push   ebx
c00114ae:	e8 c1 f4 fe ff       	call   c0000974 <strcat>
c00114b3:	83 c4 0c             	add    esp,0xc
c00114b6:	68 96 00 00 00       	push   0x96
c00114bb:	6a 00                	push   0x0
c00114bd:	57                   	push   edi
c00114be:	e8 b5 f2 fe ff       	call   c0000778 <memset>
c00114c3:	83 c4 10             	add    esp,0x10
c00114c6:	83 ec 0c             	sub    esp,0xc
c00114c9:	56                   	push   esi
c00114ca:	e8 d5 f9 ff ff       	call   c0010ea4 <VgaText::doUpdate()>
c00114cf:	83 c4 10             	add    esp,0x10
c00114d2:	83 c4 1c             	add    esp,0x1c
c00114d5:	5b                   	pop    ebx
c00114d6:	5e                   	pop    esi
c00114d7:	5f                   	pop    edi
c00114d8:	5d                   	pop    ebp
c00114d9:	c3                   	ret    

c00114da <VgaText::write(unsigned long long, void*, int*)>:
c00114da:	55                   	push   ebp
c00114db:	57                   	push   edi
c00114dc:	56                   	push   esi
c00114dd:	53                   	push   ebx
c00114de:	83 ec 0c             	sub    esp,0xc
c00114e1:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00114e5:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c00114e9:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00114ed:	c6 86 1d 10 00 00 01 	mov    BYTE PTR [esi+0x101d],0x1
c00114f4:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c00114f7:	39 eb                	cmp    ebx,ebp
c00114f9:	74 13                	je     c001150e <VgaText::write(unsigned long long, void*, int*)+0x34>
c00114fb:	43                   	inc    ebx
c00114fc:	50                   	push   eax
c00114fd:	50                   	push   eax
c00114fe:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c0011502:	50                   	push   eax
c0011503:	56                   	push   esi
c0011504:	e8 d1 fb ff ff       	call   c00110da <VgaText::putchar(char)>
c0011509:	83 c4 10             	add    esp,0x10
c001150c:	eb e9                	jmp    c00114f7 <VgaText::write(unsigned long long, void*, int*)+0x1d>
c001150e:	83 ec 0c             	sub    esp,0xc
c0011511:	c6 86 1d 10 00 00 00 	mov    BYTE PTR [esi+0x101d],0x0
c0011518:	56                   	push   esi
c0011519:	e8 86 f9 ff ff       	call   c0010ea4 <VgaText::doUpdate()>
c001151e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011522:	89 38                	mov    DWORD PTR [eax],edi
c0011524:	83 c4 1c             	add    esp,0x1c
c0011527:	31 c0                	xor    eax,eax
c0011529:	5b                   	pop    ebx
c001152a:	5e                   	pop    esi
c001152b:	5f                   	pop    edi
c001152c:	5d                   	pop    ebp
c001152d:	c3                   	ret    

c001152e <newTerminal(char*)>:
c001152e:	83 ec 28             	sub    esp,0x28
c0011531:	68 60 12 00 00       	push   0x1260
c0011536:	e8 a9 e3 ff ff       	call   c000f8e4 <malloc>
c001153b:	5a                   	pop    edx
c001153c:	59                   	pop    ecx
c001153d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0011541:	50                   	push   eax
c0011542:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011546:	e8 15 fd ff ff       	call   c0011260 <VgaText::VgaText(char const*)>
c001154b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001154f:	83 c4 2c             	add    esp,0x2c
c0011552:	c3                   	ret    
c0011553:	90                   	nop

c0011554 <TSS::TSS()>:
c0011554:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011558:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001155f:	90                   	nop
c0011560:	c3                   	ret    
c0011561:	90                   	nop

c0011562 <TSS::setESP(unsigned long)>:
c0011562:	55                   	push   ebp
c0011563:	89 e5                	mov    ebp,esp
c0011565:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011568:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001156b:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001156e:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0011571:	90                   	nop
c0011572:	5d                   	pop    ebp
c0011573:	c3                   	ret    

c0011574 <TSS::flush()>:
c0011574:	55                   	push   ebp
c0011575:	89 e5                	mov    ebp,esp
c0011577:	83 ec 10             	sub    esp,0x10
c001157a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001157d:	8b 00                	mov    eax,DWORD PTR [eax]
c001157f:	83 c8 03             	or     eax,0x3
c0011582:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0011586:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c001158a:	66 89 d0             	mov    ax,dx
c001158d:	0f 00 d8             	ltr    ax
c0011590:	90                   	nop
c0011591:	c9                   	leave  
c0011592:	c3                   	ret    
c0011593:	90                   	nop

c0011594 <TSS::setup(unsigned long, unsigned long)>:
c0011594:	55                   	push   ebp
c0011595:	89 e5                	mov    ebp,esp
c0011597:	83 ec 18             	sub    esp,0x18
c001159a:	83 ec 0c             	sub    esp,0xc
c001159d:	6a 68                	push   0x68
c001159f:	e8 40 e3 ff ff       	call   c000f8e4 <malloc>
c00115a4:	83 c4 10             	add    esp,0x10
c00115a7:	89 c2                	mov    edx,eax
c00115a9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00115ac:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00115af:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00115b2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00115b5:	83 ec 04             	sub    esp,0x4
c00115b8:	6a 68                	push   0x68
c00115ba:	6a 00                	push   0x0
c00115bc:	50                   	push   eax
c00115bd:	e8 b6 f1 fe ff       	call   c0000778 <memset>
c00115c2:	83 c4 10             	add    esp,0x10
c00115c5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00115c8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00115cb:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c00115d1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00115d4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00115d7:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c00115dd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00115e0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00115e3:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00115e6:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00115e9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00115ec:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00115ef:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c00115f5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00115f8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00115fb:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c0011601:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011604:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011607:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c001160d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011610:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011613:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c0011619:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001161c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001161f:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c0011625:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011628:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001162b:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c0011631:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011634:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011637:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c001163a:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c001163d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011640:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011643:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0011646:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0011649:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001164c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001164f:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c0011656:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011659:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001165c:	0f 20 da             	mov    edx,cr3
c001165f:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0011662:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0011665:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0011668:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001166b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001166e:	83 ec 08             	sub    esp,0x8
c0011671:	50                   	push   eax
c0011672:	8d 45 ec             	lea    eax,[ebp-0x14]
c0011675:	50                   	push   eax
c0011676:	e8 47 da ff ff       	call   c000f0c2 <GDTEntry::setBase(unsigned int)>
c001167b:	83 c4 10             	add    esp,0x10
c001167e:	83 ec 08             	sub    esp,0x8
c0011681:	6a 68                	push   0x68
c0011683:	8d 45 ec             	lea    eax,[ebp-0x14]
c0011686:	50                   	push   eax
c0011687:	e8 52 da ff ff       	call   c000f0de <GDTEntry::setLimit(unsigned int)>
c001168c:	83 c4 10             	add    esp,0x10
c001168f:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c0011693:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0011696:	83 e0 0f             	and    eax,0xf
c0011699:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c001169c:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c001169f:	83 c8 40             	or     eax,0x40
c00116a2:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c00116a5:	a1 e8 e6 02 c0       	mov    eax,ds:0xc002e6e8
c00116aa:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00116b0:	05 78 01 00 00       	add    eax,0x178
c00116b5:	83 ec 04             	sub    esp,0x4
c00116b8:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c00116bb:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c00116be:	50                   	push   eax
c00116bf:	e8 4e da ff ff       	call   c000f112 <GDT::addEntry(GDTEntry)>
c00116c4:	83 c4 10             	add    esp,0x10
c00116c7:	89 c2                	mov    edx,eax
c00116c9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00116cc:	89 10                	mov    DWORD PTR [eax],edx
c00116ce:	a1 e8 e6 02 c0       	mov    eax,ds:0xc002e6e8
c00116d3:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00116d9:	05 78 01 00 00       	add    eax,0x178
c00116de:	83 ec 0c             	sub    esp,0xc
c00116e1:	50                   	push   eax
c00116e2:	e8 6f da ff ff       	call   c000f156 <GDT::flush()>
c00116e7:	83 c4 10             	add    esp,0x10
c00116ea:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00116ed:	8b 00                	mov    eax,DWORD PTR [eax]
c00116ef:	83 ec 08             	sub    esp,0x8
c00116f2:	50                   	push   eax
c00116f3:	68 84 a5 02 c0       	push   0xc002a584
c00116f8:	e8 e6 18 00 00       	call   c0012fe3 <Dbg::kprintf(char const*, ...)>
c00116fd:	83 c4 10             	add    esp,0x10
c0011700:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011703:	8b 00                	mov    eax,DWORD PTR [eax]
c0011705:	c9                   	leave  
c0011706:	c3                   	ret    
c0011707:	90                   	nop

c0011708 <ReservedFilename::read(unsigned long long, void*, int*)>:
c0011708:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001170c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0011710:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011713:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0011718:	75 08                	jne    c0011722 <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c001171a:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0011720:	eb 38                	jmp    c001175a <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c0011722:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0011727:	75 17                	jne    c0011740 <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c0011729:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001172e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011731:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0011737:	8b 10                	mov    edx,DWORD PTR [eax]
c0011739:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001173d:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c0011740:	89 c1                	mov    ecx,eax
c0011742:	83 e1 fd             	and    ecx,0xfffffffd
c0011745:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c001174b:	74 cd                	je     c001171a <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c001174d:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0011752:	83 e0 ef             	and    eax,0xffffffef
c0011755:	83 f8 08             	cmp    eax,0x8
c0011758:	76 c0                	jbe    c001171a <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c001175a:	31 c0                	xor    eax,eax
c001175c:	c3                   	ret    
c001175d:	90                   	nop

c001175e <ReservedFilename::isAtty()>:
c001175e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011762:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0011765:	31 c0                	xor    eax,eax
c0011767:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c001176d:	74 09                	je     c0011778 <ReservedFilename::isAtty()+0x1a>
c001176f:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c0011775:	0f 94 c0             	sete   al
c0011778:	c3                   	ret    
c0011779:	90                   	nop

c001177a <ReservedFilename::write(unsigned long long, void*, int*)>:
c001177a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001177e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0011782:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011785:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0011789:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c001178e:	75 08                	jne    c0011798 <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c0011790:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0011796:	eb 3d                	jmp    c00117d5 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0011798:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001179d:	75 17                	jne    c00117b6 <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c001179f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00117a4:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00117a7:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c00117ad:	8b 10                	mov    edx,DWORD PTR [eax]
c00117af:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00117b3:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c00117b6:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00117bb:	75 04                	jne    c00117c1 <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c00117bd:	89 0a                	mov    DWORD PTR [edx],ecx
c00117bf:	eb 14                	jmp    c00117d5 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c00117c1:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c00117c6:	74 c8                	je     c0011790 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c00117c8:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c00117cd:	83 e0 ef             	and    eax,0xffffffef
c00117d0:	83 f8 08             	cmp    eax,0x8
c00117d3:	76 bb                	jbe    c0011790 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c00117d5:	31 c0                	xor    eax,eax
c00117d7:	c3                   	ret    

c00117d8 <UnixFile::getFileDescriptor()>:
c00117d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00117dc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00117df:	c3                   	ret    

c00117e0 <UnixFile::UnixFile(int)>:
c00117e0:	53                   	push   ebx
c00117e1:	83 ec 28             	sub    esp,0x28
c00117e4:	ba 70 a6 02 c0       	mov    edx,0xc002a670
c00117e9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00117ed:	89 10                	mov    DWORD PTR [eax],edx
c00117ef:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c00117f7:	0f 8f 8c 01 00 00    	jg     c0011989 <UnixFile::UnixFile(int)+0x1a9>
c00117fd:	a1 80 d6 02 c0       	mov    eax,ds:0xc002d680
c0011802:	8d 50 01             	lea    edx,[eax+0x1]
c0011805:	89 15 80 d6 02 c0    	mov    DWORD PTR ds:0xc002d680,edx
c001180b:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001180f:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0011812:	83 ec 08             	sub    esp,0x8
c0011815:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0011819:	68 58 e8 02 c0       	push   0xc002e858
c001181e:	e8 ed 6f 01 00       	call   c0028810 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0011823:	83 c4 10             	add    esp,0x10
c0011826:	a0 54 e8 02 c0       	mov    al,ds:0xc002e854
c001182b:	83 f0 01             	xor    eax,0x1
c001182e:	84 c0                	test   al,al
c0011830:	0f 84 54 01 00 00    	je     c001198a <UnixFile::UnixFile(int)+0x1aa>
c0011836:	c6 05 54 e8 02 c0 01 	mov    BYTE PTR ds:0xc002e854,0x1
c001183d:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c0011845:	83 ec 0c             	sub    esp,0xc
c0011848:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001184c:	e8 93 e0 ff ff       	call   c000f8e4 <malloc>
c0011851:	83 c4 10             	add    esp,0x10
c0011854:	89 c3                	mov    ebx,eax
c0011856:	83 ec 08             	sub    esp,0x8
c0011859:	68 03 ff ff 0f       	push   0xfffff03
c001185e:	53                   	push   ebx
c001185f:	e8 2c 01 00 00       	call   c0011990 <ReservedFilename::ReservedFilename(int)>
c0011864:	83 c4 10             	add    esp,0x10
c0011867:	89 1d 4c e8 02 c0    	mov    DWORD PTR ds:0xc002e84c,ebx
c001186d:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c0011875:	83 ec 0c             	sub    esp,0xc
c0011878:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001187c:	e8 63 e0 ff ff       	call   c000f8e4 <malloc>
c0011881:	83 c4 10             	add    esp,0x10
c0011884:	89 c3                	mov    ebx,eax
c0011886:	83 ec 08             	sub    esp,0x8
c0011889:	68 01 ff ff 0f       	push   0xfffff01
c001188e:	53                   	push   ebx
c001188f:	e8 fc 00 00 00       	call   c0011990 <ReservedFilename::ReservedFilename(int)>
c0011894:	83 c4 10             	add    esp,0x10
c0011897:	89 1d 50 e8 02 c0    	mov    DWORD PTR ds:0xc002e850,ebx
c001189d:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c00118a5:	83 ec 0c             	sub    esp,0xc
c00118a8:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00118ac:	e8 33 e0 ff ff       	call   c000f8e4 <malloc>
c00118b1:	83 c4 10             	add    esp,0x10
c00118b4:	89 c3                	mov    ebx,eax
c00118b6:	83 ec 08             	sub    esp,0x8
c00118b9:	68 00 ff ff 0f       	push   0xfffff00
c00118be:	53                   	push   ebx
c00118bf:	e8 cc 00 00 00       	call   c0011990 <ReservedFilename::ReservedFilename(int)>
c00118c4:	83 c4 10             	add    esp,0x10
c00118c7:	89 1d 44 e8 02 c0    	mov    DWORD PTR ds:0xc002e844,ebx
c00118cd:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c00118d5:	83 ec 0c             	sub    esp,0xc
c00118d8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00118dc:	e8 03 e0 ff ff       	call   c000f8e4 <malloc>
c00118e1:	83 c4 10             	add    esp,0x10
c00118e4:	89 c3                	mov    ebx,eax
c00118e6:	83 ec 08             	sub    esp,0x8
c00118e9:	68 02 ff ff 0f       	push   0xfffff02
c00118ee:	53                   	push   ebx
c00118ef:	e8 9c 00 00 00       	call   c0011990 <ReservedFilename::ReservedFilename(int)>
c00118f4:	83 c4 10             	add    esp,0x10
c00118f7:	89 1d 48 e8 02 c0    	mov    DWORD PTR ds:0xc002e848,ebx
c00118fd:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0011905:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c001190a:	7f 7e                	jg     c001198a <UnixFile::UnixFile(int)+0x1aa>
c001190c:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c0011914:	83 ec 0c             	sub    esp,0xc
c0011917:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001191b:	e8 c4 df ff ff       	call   c000f8e4 <malloc>
c0011920:	83 c4 10             	add    esp,0x10
c0011923:	89 c3                	mov    ebx,eax
c0011925:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011929:	05 10 ff ff 0f       	add    eax,0xfffff10
c001192e:	83 ec 08             	sub    esp,0x8
c0011931:	50                   	push   eax
c0011932:	53                   	push   ebx
c0011933:	e8 58 00 00 00       	call   c0011990 <ReservedFilename::ReservedFilename(int)>
c0011938:	83 c4 10             	add    esp,0x10
c001193b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001193f:	89 1c 85 20 e8 02 c0 	mov    DWORD PTR [eax*4-0x3ffd17e0],ebx
c0011946:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c001194e:	83 ec 0c             	sub    esp,0xc
c0011951:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011955:	e8 8a df ff ff       	call   c000f8e4 <malloc>
c001195a:	83 c4 10             	add    esp,0x10
c001195d:	89 c3                	mov    ebx,eax
c001195f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011963:	05 20 ff ff 0f       	add    eax,0xfffff20
c0011968:	83 ec 08             	sub    esp,0x8
c001196b:	50                   	push   eax
c001196c:	53                   	push   ebx
c001196d:	e8 1e 00 00 00       	call   c0011990 <ReservedFilename::ReservedFilename(int)>
c0011972:	83 c4 10             	add    esp,0x10
c0011975:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011979:	89 1c 85 e0 e7 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1820],ebx
c0011980:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0011984:	e9 7c ff ff ff       	jmp    c0011905 <UnixFile::UnixFile(int)+0x125>
c0011989:	90                   	nop
c001198a:	83 c4 28             	add    esp,0x28
c001198d:	5b                   	pop    ebx
c001198e:	c3                   	ret    
c001198f:	90                   	nop

c0011990 <ReservedFilename::ReservedFilename(int)>:
c0011990:	83 ec 0c             	sub    esp,0xc
c0011993:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011997:	83 ec 08             	sub    esp,0x8
c001199a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001199e:	50                   	push   eax
c001199f:	e8 3c fe ff ff       	call   c00117e0 <UnixFile::UnixFile(int)>
c00119a4:	83 c4 10             	add    esp,0x10
c00119a7:	ba 8c a6 02 c0       	mov    edx,0xc002a68c
c00119ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00119b0:	89 10                	mov    DWORD PTR [eax],edx
c00119b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00119b6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00119ba:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00119bd:	90                   	nop
c00119be:	83 c4 0c             	add    esp,0xc
c00119c1:	c3                   	ret    

c00119c2 <UnixFile::~UnixFile()>:
c00119c2:	83 ec 1c             	sub    esp,0x1c
c00119c5:	ba 70 a6 02 c0       	mov    edx,0xc002a670
c00119ca:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00119ce:	89 10                	mov    DWORD PTR [eax],edx
c00119d0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00119d4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00119d7:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c00119dc:	7f 73                	jg     c0011a51 <UnixFile::~UnixFile()+0x8f>
c00119de:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00119e6:	83 ec 0c             	sub    esp,0xc
c00119e9:	68 58 e8 02 c0       	push   0xc002e858
c00119ee:	e8 f1 6e 01 00       	call   c00288e4 <LinkedList<UnixFile>::getFirstElement()>
c00119f3:	83 c4 10             	add    esp,0x10
c00119f6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00119fa:	83 ec 0c             	sub    esp,0xc
c00119fd:	68 58 e8 02 c0       	push   0xc002e858
c0011a02:	e8 e5 6e 01 00       	call   c00288ec <LinkedList<UnixFile>::removeFirst()>
c0011a07:	83 c4 10             	add    esp,0x10
c0011a0a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011a0e:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0011a12:	74 40                	je     c0011a54 <UnixFile::~UnixFile()+0x92>
c0011a14:	83 ec 08             	sub    esp,0x8
c0011a17:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0011a1b:	68 58 e8 02 c0       	push   0xc002e858
c0011a20:	e8 eb 6d 01 00       	call   c0028810 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0011a25:	83 c4 10             	add    esp,0x10
c0011a28:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011a2c:	8d 50 01             	lea    edx,[eax+0x1]
c0011a2f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0011a33:	3d 88 13 00 00       	cmp    eax,0x1388
c0011a38:	0f 94 c0             	sete   al
c0011a3b:	84 c0                	test   al,al
c0011a3d:	74 a7                	je     c00119e6 <UnixFile::~UnixFile()+0x24>
c0011a3f:	83 ec 0c             	sub    esp,0xc
c0011a42:	68 48 a6 02 c0       	push   0xc002a648
c0011a47:	e8 49 8c 00 00       	call   c001a695 <Krnl::panic(char const*)>
c0011a4c:	83 c4 10             	add    esp,0x10
c0011a4f:	eb 95                	jmp    c00119e6 <UnixFile::~UnixFile()+0x24>
c0011a51:	90                   	nop
c0011a52:	eb 01                	jmp    c0011a55 <UnixFile::~UnixFile()+0x93>
c0011a54:	90                   	nop
c0011a55:	90                   	nop
c0011a56:	83 c4 1c             	add    esp,0x1c
c0011a59:	c3                   	ret    

c0011a5a <UnixFile::~UnixFile()>:
c0011a5a:	83 ec 0c             	sub    esp,0xc
c0011a5d:	83 ec 0c             	sub    esp,0xc
c0011a60:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011a64:	e8 59 ff ff ff       	call   c00119c2 <UnixFile::~UnixFile()>
c0011a69:	83 c4 10             	add    esp,0x10
c0011a6c:	83 ec 08             	sub    esp,0x8
c0011a6f:	6a 0c                	push   0xc
c0011a71:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011a75:	e8 89 14 00 00       	call   c0012f03 <operator delete(void*, unsigned long)>
c0011a7a:	83 c4 10             	add    esp,0x10
c0011a7d:	83 c4 0c             	add    esp,0xc
c0011a80:	c3                   	ret    
c0011a81:	90                   	nop

c0011a82 <ReservedFilename::~ReservedFilename()>:
c0011a82:	83 ec 0c             	sub    esp,0xc
c0011a85:	ba 8c a6 02 c0       	mov    edx,0xc002a68c
c0011a8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011a8e:	89 10                	mov    DWORD PTR [eax],edx
c0011a90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011a94:	83 ec 0c             	sub    esp,0xc
c0011a97:	50                   	push   eax
c0011a98:	e8 25 ff ff ff       	call   c00119c2 <UnixFile::~UnixFile()>
c0011a9d:	83 c4 10             	add    esp,0x10
c0011aa0:	90                   	nop
c0011aa1:	83 c4 0c             	add    esp,0xc
c0011aa4:	c3                   	ret    
c0011aa5:	90                   	nop

c0011aa6 <ReservedFilename::~ReservedFilename()>:
c0011aa6:	83 ec 0c             	sub    esp,0xc
c0011aa9:	83 ec 0c             	sub    esp,0xc
c0011aac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011ab0:	e8 cd ff ff ff       	call   c0011a82 <ReservedFilename::~ReservedFilename()>
c0011ab5:	83 c4 10             	add    esp,0x10
c0011ab8:	83 ec 08             	sub    esp,0x8
c0011abb:	6a 0c                	push   0xc
c0011abd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011ac1:	e8 3d 14 00 00       	call   c0012f03 <operator delete(void*, unsigned long)>
c0011ac6:	83 c4 10             	add    esp,0x10
c0011ac9:	83 c4 0c             	add    esp,0xc
c0011acc:	c3                   	ret    

c0011acd <getFromFileDescriptor(int)>:
c0011acd:	53                   	push   ebx
c0011ace:	83 ec 08             	sub    esp,0x8
c0011ad1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011ad5:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c0011adb:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c0011ae1:	7f 2c                	jg     c0011b0f <getFromFileDescriptor(int)+0x42>
c0011ae3:	83 ec 0c             	sub    esp,0xc
c0011ae6:	68 58 e8 02 c0       	push   0xc002e858
c0011aeb:	e8 f4 6d 01 00       	call   c00288e4 <LinkedList<UnixFile>::getFirstElement()>
c0011af0:	83 c4 10             	add    esp,0x10
c0011af3:	85 c0                	test   eax,eax
c0011af5:	75 04                	jne    c0011afb <getFromFileDescriptor(int)+0x2e>
c0011af7:	31 c0                	xor    eax,eax
c0011af9:	eb 6e                	jmp    c0011b69 <getFromFileDescriptor(int)+0x9c>
c0011afb:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c0011afe:	74 69                	je     c0011b69 <getFromFileDescriptor(int)+0x9c>
c0011b00:	52                   	push   edx
c0011b01:	52                   	push   edx
c0011b02:	50                   	push   eax
c0011b03:	68 58 e8 02 c0       	push   0xc002e858
c0011b08:	e8 81 6e 01 00       	call   c002898e <LinkedList<UnixFile>::getNext(UnixFile*)>
c0011b0d:	eb e1                	jmp    c0011af0 <getFromFileDescriptor(int)+0x23>
c0011b0f:	a1 4c e8 02 c0       	mov    eax,ds:0xc002e84c
c0011b14:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c0011b1a:	74 4d                	je     c0011b69 <getFromFileDescriptor(int)+0x9c>
c0011b1c:	a1 50 e8 02 c0       	mov    eax,ds:0xc002e850
c0011b21:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c0011b27:	74 40                	je     c0011b69 <getFromFileDescriptor(int)+0x9c>
c0011b29:	a1 48 e8 02 c0       	mov    eax,ds:0xc002e848
c0011b2e:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c0011b34:	74 33                	je     c0011b69 <getFromFileDescriptor(int)+0x9c>
c0011b36:	a1 44 e8 02 c0       	mov    eax,ds:0xc002e844
c0011b3b:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c0011b41:	74 26                	je     c0011b69 <getFromFileDescriptor(int)+0x9c>
c0011b43:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c0011b49:	83 f8 08             	cmp    eax,0x8
c0011b4c:	77 09                	ja     c0011b57 <getFromFileDescriptor(int)+0x8a>
c0011b4e:	8b 04 85 20 e8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd17e0]
c0011b55:	eb 12                	jmp    c0011b69 <getFromFileDescriptor(int)+0x9c>
c0011b57:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c0011b5d:	83 fb 08             	cmp    ebx,0x8
c0011b60:	77 95                	ja     c0011af7 <getFromFileDescriptor(int)+0x2a>
c0011b62:	8b 04 9d e0 e7 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd1820]
c0011b69:	83 c4 08             	add    esp,0x8
c0011b6c:	5b                   	pop    ebx
c0011b6d:	c3                   	ret    

c0011b6e <__static_initialization_and_destruction_0(int, int)>:
c0011b6e:	83 ec 0c             	sub    esp,0xc
c0011b71:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0011b76:	75 34                	jne    c0011bac <__static_initialization_and_destruction_0(int, int)+0x3e>
c0011b78:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0011b80:	75 2a                	jne    c0011bac <__static_initialization_and_destruction_0(int, int)+0x3e>
c0011b82:	83 ec 0c             	sub    esp,0xc
c0011b85:	68 58 e8 02 c0       	push   0xc002e858
c0011b8a:	e8 29 6c 01 00       	call   c00287b8 <LinkedList<UnixFile>::LinkedList()>
c0011b8f:	83 c4 10             	add    esp,0x10
c0011b92:	83 ec 04             	sub    esp,0x4
c0011b95:	68 08 d6 02 c0       	push   0xc002d608
c0011b9a:	68 58 e8 02 c0       	push   0xc002e858
c0011b9f:	68 b6 87 02 c0       	push   0xc00287b6
c0011ba4:	e8 d4 12 00 00       	call   c0012e7d <__cxa_atexit>
c0011ba9:	83 c4 10             	add    esp,0x10
c0011bac:	90                   	nop
c0011bad:	83 c4 0c             	add    esp,0xc
c0011bb0:	c3                   	ret    

c0011bb1 <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c0011bb1:	83 ec 0c             	sub    esp,0xc
c0011bb4:	83 ec 08             	sub    esp,0x8
c0011bb7:	68 ff ff 00 00       	push   0xffff
c0011bbc:	6a 01                	push   0x1
c0011bbe:	e8 ab ff ff ff       	call   c0011b6e <__static_initialization_and_destruction_0(int, int)>
c0011bc3:	83 c4 10             	add    esp,0x10
c0011bc6:	83 c4 0c             	add    esp,0xc
c0011bc9:	c3                   	ret    

c0011bca <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c0011bca:	53                   	push   ebx
c0011bcb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011bcf:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011bd3:	8d 88 00 80 f3 ff    	lea    ecx,[eax-0xc8000]
c0011bd9:	89 c8                	mov    eax,ecx
c0011bdb:	d1 e8                	shr    eax,1
c0011bdd:	03 05 88 d6 02 c0    	add    eax,DWORD PTR ds:0xc002d688
c0011be3:	83 e1 01             	and    ecx,0x1
c0011be6:	8a 10                	mov    dl,BYTE PTR [eax]
c0011be8:	75 09                	jne    c0011bf3 <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x29>
c0011bea:	83 e2 f0             	and    edx,0xfffffff0
c0011bed:	09 da                	or     edx,ebx
c0011bef:	88 10                	mov    BYTE PTR [eax],dl
c0011bf1:	5b                   	pop    ebx
c0011bf2:	c3                   	ret    
c0011bf3:	c1 e3 04             	shl    ebx,0x4
c0011bf6:	83 e2 0f             	and    edx,0xf
c0011bf9:	09 da                	or     edx,ebx
c0011bfb:	88 10                	mov    BYTE PTR [eax],dl
c0011bfd:	5b                   	pop    ebx
c0011bfe:	c3                   	ret    

c0011bff <Virt::getPageState(unsigned long)>:
c0011bff:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011c03:	8b 0d 88 d6 02 c0    	mov    ecx,DWORD PTR ds:0xc002d688
c0011c09:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c0011c0f:	89 d0                	mov    eax,edx
c0011c11:	d1 e8                	shr    eax,1
c0011c13:	83 e2 01             	and    edx,0x1
c0011c16:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c0011c19:	75 04                	jne    c0011c1f <Virt::getPageState(unsigned long)+0x20>
c0011c1b:	83 e0 0f             	and    eax,0xf
c0011c1e:	c3                   	ret    
c0011c1f:	c0 e8 04             	shr    al,0x4
c0011c22:	c3                   	ret    

c0011c23 <Virt::allocateKernelVirtualPages(int)>:
c0011c23:	55                   	push   ebp
c0011c24:	31 ed                	xor    ebp,ebp
c0011c26:	57                   	push   edi
c0011c27:	56                   	push   esi
c0011c28:	53                   	push   ebx
c0011c29:	31 db                	xor    ebx,ebx
c0011c2b:	83 ec 1c             	sub    esp,0x1c
c0011c2e:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0011c32:	8b 3d 84 d6 02 c0    	mov    edi,DWORD PTR ds:0xc002d684
c0011c38:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0011c3d:	57                   	push   edi
c0011c3e:	e8 bc ff ff ff       	call   c0011bff <Virt::getPageState(unsigned long)>
c0011c43:	5a                   	pop    edx
c0011c44:	84 c0                	test   al,al
c0011c46:	75 3a                	jne    c0011c82 <Virt::allocateKernelVirtualPages(int)+0x5f>
c0011c48:	85 db                	test   ebx,ebx
c0011c4a:	75 02                	jne    c0011c4e <Virt::allocateKernelVirtualPages(int)+0x2b>
c0011c4c:	89 fd                	mov    ebp,edi
c0011c4e:	43                   	inc    ebx
c0011c4f:	39 f3                	cmp    ebx,esi
c0011c51:	74 5a                	je     c0011cad <Virt::allocateKernelVirtualPages(int)+0x8a>
c0011c53:	47                   	inc    edi
c0011c54:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c0011c5a:	76 31                	jbe    c0011c8d <Virt::allocateKernelVirtualPages(int)+0x6a>
c0011c5c:	c7 05 84 d6 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc002d684,0xc8000
c0011c66:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0011c6b:	75 28                	jne    c0011c95 <Virt::allocateKernelVirtualPages(int)+0x72>
c0011c6d:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c0011c72:	bf 00 80 0c 00       	mov    edi,0xc8000
c0011c77:	57                   	push   edi
c0011c78:	e8 82 ff ff ff       	call   c0011bff <Virt::getPageState(unsigned long)>
c0011c7d:	5a                   	pop    edx
c0011c7e:	84 c0                	test   al,al
c0011c80:	74 c6                	je     c0011c48 <Virt::allocateKernelVirtualPages(int)+0x25>
c0011c82:	31 db                	xor    ebx,ebx
c0011c84:	47                   	inc    edi
c0011c85:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c0011c8b:	77 cf                	ja     c0011c5c <Virt::allocateKernelVirtualPages(int)+0x39>
c0011c8d:	89 3d 84 d6 02 c0    	mov    DWORD PTR ds:0xc002d684,edi
c0011c93:	eb a8                	jmp    c0011c3d <Virt::allocateKernelVirtualPages(int)+0x1a>
c0011c95:	83 ec 0c             	sub    esp,0xc
c0011c98:	68 a0 a6 02 c0       	push   0xc002a6a0
c0011c9d:	e8 f3 89 00 00       	call   c001a695 <Krnl::panic(char const*)>
c0011ca2:	8b 3d 84 d6 02 c0    	mov    edi,DWORD PTR ds:0xc002d684
c0011ca8:	83 c4 10             	add    esp,0x10
c0011cab:	eb 90                	jmp    c0011c3d <Virt::allocateKernelVirtualPages(int)+0x1a>
c0011cad:	89 2d 84 d6 02 c0    	mov    DWORD PTR ds:0xc002d684,ebp
c0011cb3:	4b                   	dec    ebx
c0011cb4:	74 5f                	je     c0011d15 <Virt::allocateKernelVirtualPages(int)+0xf2>
c0011cb6:	85 f6                	test   esi,esi
c0011cb8:	74 3d                	je     c0011cf7 <Virt::allocateKernelVirtualPages(int)+0xd4>
c0011cba:	89 e8                	mov    eax,ebp
c0011cbc:	31 db                	xor    ebx,ebx
c0011cbe:	8d 7e ff             	lea    edi,[esi-0x1]
c0011cc1:	eb 14                	jmp    c0011cd7 <Virt::allocateKernelVirtualPages(int)+0xb4>
c0011cc3:	6a 01                	push   0x1
c0011cc5:	43                   	inc    ebx
c0011cc6:	50                   	push   eax
c0011cc7:	e8 fe fe ff ff       	call   c0011bca <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011ccc:	58                   	pop    eax
c0011ccd:	39 f3                	cmp    ebx,esi
c0011ccf:	5a                   	pop    edx
c0011cd0:	74 25                	je     c0011cf7 <Virt::allocateKernelVirtualPages(int)+0xd4>
c0011cd2:	a1 84 d6 02 c0       	mov    eax,ds:0xc002d684
c0011cd7:	8d 50 01             	lea    edx,[eax+0x1]
c0011cda:	85 db                	test   ebx,ebx
c0011cdc:	89 15 84 d6 02 c0    	mov    DWORD PTR ds:0xc002d684,edx
c0011ce2:	74 20                	je     c0011d04 <Virt::allocateKernelVirtualPages(int)+0xe1>
c0011ce4:	39 df                	cmp    edi,ebx
c0011ce6:	75 db                	jne    c0011cc3 <Virt::allocateKernelVirtualPages(int)+0xa0>
c0011ce8:	6a 03                	push   0x3
c0011cea:	43                   	inc    ebx
c0011ceb:	50                   	push   eax
c0011cec:	e8 d9 fe ff ff       	call   c0011bca <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011cf1:	59                   	pop    ecx
c0011cf2:	39 f3                	cmp    ebx,esi
c0011cf4:	58                   	pop    eax
c0011cf5:	75 db                	jne    c0011cd2 <Virt::allocateKernelVirtualPages(int)+0xaf>
c0011cf7:	83 c4 1c             	add    esp,0x1c
c0011cfa:	89 e8                	mov    eax,ebp
c0011cfc:	5b                   	pop    ebx
c0011cfd:	c1 e0 0c             	shl    eax,0xc
c0011d00:	5e                   	pop    esi
c0011d01:	5f                   	pop    edi
c0011d02:	5d                   	pop    ebp
c0011d03:	c3                   	ret    
c0011d04:	6a 02                	push   0x2
c0011d06:	bb 01 00 00 00       	mov    ebx,0x1
c0011d0b:	50                   	push   eax
c0011d0c:	e8 b9 fe ff ff       	call   c0011bca <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011d11:	58                   	pop    eax
c0011d12:	5a                   	pop    edx
c0011d13:	eb bd                	jmp    c0011cd2 <Virt::allocateKernelVirtualPages(int)+0xaf>
c0011d15:	6a 04                	push   0x4
c0011d17:	8d 45 01             	lea    eax,[ebp+0x1]
c0011d1a:	55                   	push   ebp
c0011d1b:	a3 84 d6 02 c0       	mov    ds:0xc002d684,eax
c0011d20:	e8 a5 fe ff ff       	call   c0011bca <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011d25:	59                   	pop    ecx
c0011d26:	89 e8                	mov    eax,ebp
c0011d28:	5b                   	pop    ebx
c0011d29:	c1 e0 0c             	shl    eax,0xc
c0011d2c:	83 c4 1c             	add    esp,0x1c
c0011d2f:	5b                   	pop    ebx
c0011d30:	5e                   	pop    esi
c0011d31:	5f                   	pop    edi
c0011d32:	5d                   	pop    ebp
c0011d33:	c3                   	ret    

c0011d34 <Virt::freeSwapfilePage(unsigned long)>:
c0011d34:	53                   	push   ebx
c0011d35:	8b 15 64 e8 02 c0    	mov    edx,DWORD PTR ds:0xc002e864
c0011d3b:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0011d3f:	b8 01 00 00 00       	mov    eax,0x1
c0011d44:	89 cb                	mov    ebx,ecx
c0011d46:	d3 e0                	shl    eax,cl
c0011d48:	c1 eb 05             	shr    ebx,0x5
c0011d4b:	f7 d0                	not    eax
c0011d4d:	21 04 9a             	and    DWORD PTR [edx+ebx*4],eax
c0011d50:	5b                   	pop    ebx
c0011d51:	c3                   	ret    

c0011d52 <Virt::swapIDToSector(unsigned long)>:
c0011d52:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011d56:	0f af 05 8c d6 02 c0 	imul   eax,DWORD PTR ds:0xc002d68c
c0011d5d:	03 05 94 d6 02 c0    	add    eax,DWORD PTR ds:0xc002d694
c0011d63:	c3                   	ret    

c0011d64 <Virt::allocateSwapfilePage()>:
c0011d64:	55                   	push   ebp
c0011d65:	31 d2                	xor    edx,edx
c0011d67:	57                   	push   edi
c0011d68:	56                   	push   esi
c0011d69:	53                   	push   ebx
c0011d6a:	83 ec 0c             	sub    esp,0xc
c0011d6d:	8b 0d 8c d6 02 c0    	mov    ecx,DWORD PTR ds:0xc002d68c
c0011d73:	a1 90 d6 02 c0       	mov    eax,ds:0xc002d690
c0011d78:	f7 f1                	div    ecx
c0011d7a:	39 0d 90 d6 02 c0    	cmp    DWORD PTR ds:0xc002d690,ecx
c0011d80:	72 2d                	jb     c0011daf <Virt::allocateSwapfilePage()+0x4b>
c0011d82:	8b 35 64 e8 02 c0    	mov    esi,DWORD PTR ds:0xc002e864
c0011d88:	8b 16                	mov    edx,DWORD PTR [esi]
c0011d8a:	f6 c2 01             	test   dl,0x1
c0011d8d:	74 3c                	je     c0011dcb <Virt::allocateSwapfilePage()+0x67>
c0011d8f:	31 c9                	xor    ecx,ecx
c0011d91:	bf 01 00 00 00       	mov    edi,0x1
c0011d96:	eb 12                	jmp    c0011daa <Virt::allocateSwapfilePage()+0x46>
c0011d98:	89 fd                	mov    ebp,edi
c0011d9a:	89 ca                	mov    edx,ecx
c0011d9c:	d3 e5                	shl    ebp,cl
c0011d9e:	c1 ea 05             	shr    edx,0x5
c0011da1:	8d 1c 96             	lea    ebx,[esi+edx*4]
c0011da4:	8b 13                	mov    edx,DWORD PTR [ebx]
c0011da6:	85 ea                	test   edx,ebp
c0011da8:	74 2a                	je     c0011dd4 <Virt::allocateSwapfilePage()+0x70>
c0011daa:	41                   	inc    ecx
c0011dab:	39 c8                	cmp    eax,ecx
c0011dad:	77 e9                	ja     c0011d98 <Virt::allocateSwapfilePage()+0x34>
c0011daf:	83 ec 0c             	sub    esp,0xc
c0011db2:	68 12 a9 02 c0       	push   0xc002a912
c0011db7:	e8 d9 88 00 00       	call   c001a695 <Krnl::panic(char const*)>
c0011dbc:	83 c4 10             	add    esp,0x10
c0011dbf:	31 c9                	xor    ecx,ecx
c0011dc1:	83 c4 0c             	add    esp,0xc
c0011dc4:	89 c8                	mov    eax,ecx
c0011dc6:	5b                   	pop    ebx
c0011dc7:	5e                   	pop    esi
c0011dc8:	5f                   	pop    edi
c0011dc9:	5d                   	pop    ebp
c0011dca:	c3                   	ret    
c0011dcb:	89 f3                	mov    ebx,esi
c0011dcd:	bd 01 00 00 00       	mov    ebp,0x1
c0011dd2:	31 c9                	xor    ecx,ecx
c0011dd4:	09 ea                	or     edx,ebp
c0011dd6:	89 c8                	mov    eax,ecx
c0011dd8:	89 13                	mov    DWORD PTR [ebx],edx
c0011dda:	83 c4 0c             	add    esp,0xc
c0011ddd:	5b                   	pop    ebx
c0011dde:	5e                   	pop    esi
c0011ddf:	5f                   	pop    edi
c0011de0:	5d                   	pop    ebp
c0011de1:	c3                   	ret    

c0011de2 <Virt::virtualMemorySetup()>:
c0011de2:	53                   	push   ebx
c0011de3:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0011de8:	83 ec 08             	sub    esp,0x8
c0011deb:	6a 0f                	push   0xf
c0011ded:	53                   	push   ebx
c0011dee:	43                   	inc    ebx
c0011def:	e8 d6 fd ff ff       	call   c0011bca <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011df4:	59                   	pop    ecx
c0011df5:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0011dfb:	58                   	pop    eax
c0011dfc:	75 ed                	jne    c0011deb <Virt::virtualMemorySetup()+0x9>
c0011dfe:	83 ec 08             	sub    esp,0x8
c0011e01:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0011e06:	68 00 00 00 c8       	push   0xc8000000
c0011e0b:	68 29 a9 02 c0       	push   0xc002a929
c0011e10:	e8 ce 11 00 00       	call   c0012fe3 <Dbg::kprintf(char const*, ...)>
c0011e15:	58                   	pop    eax
c0011e16:	5a                   	pop    edx
c0011e17:	68 00 f0 ff ef       	push   0xeffff000
c0011e1c:	68 3d a9 02 c0       	push   0xc002a93d
c0011e21:	e8 bd 11 00 00       	call   c0012fe3 <Dbg::kprintf(char const*, ...)>
c0011e26:	83 c4 10             	add    esp,0x10
c0011e29:	83 ec 08             	sub    esp,0x8
c0011e2c:	6a 00                	push   0x0
c0011e2e:	53                   	push   ebx
c0011e2f:	43                   	inc    ebx
c0011e30:	e8 95 fd ff ff       	call   c0011bca <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011e35:	83 c4 10             	add    esp,0x10
c0011e38:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0011e3e:	75 e9                	jne    c0011e29 <Virt::virtualMemorySetup()+0x47>
c0011e40:	bb 00 00 0d 00       	mov    ebx,0xd0000
c0011e45:	83 ec 08             	sub    esp,0x8
c0011e48:	6a 0f                	push   0xf
c0011e4a:	53                   	push   ebx
c0011e4b:	43                   	inc    ebx
c0011e4c:	e8 79 fd ff ff       	call   c0011bca <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011e51:	83 c4 10             	add    esp,0x10
c0011e54:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c0011e5a:	75 e9                	jne    c0011e45 <Virt::virtualMemorySetup()+0x63>
c0011e5c:	83 c4 08             	add    esp,0x8
c0011e5f:	5b                   	pop    ebx
c0011e60:	c3                   	ret    

c0011e61 <Virt::swappingSetup()>:
c0011e61:	83 ec 14             	sub    esp,0x14
c0011e64:	31 d2                	xor    edx,edx
c0011e66:	a1 90 d6 02 c0       	mov    eax,ds:0xc002d690
c0011e6b:	f7 35 8c d6 02 c0    	div    DWORD PTR ds:0xc002d68c
c0011e71:	c1 e8 05             	shr    eax,0x5
c0011e74:	50                   	push   eax
c0011e75:	68 51 a9 02 c0       	push   0xc002a951
c0011e7a:	e8 64 11 00 00       	call   c0012fe3 <Dbg::kprintf(char const*, ...)>
c0011e7f:	a1 90 d6 02 c0       	mov    eax,ds:0xc002d690
c0011e84:	31 d2                	xor    edx,edx
c0011e86:	f7 35 8c d6 02 c0    	div    DWORD PTR ds:0xc002d68c
c0011e8c:	c1 e8 05             	shr    eax,0x5
c0011e8f:	89 04 24             	mov    DWORD PTR [esp],eax
c0011e92:	e8 4d da ff ff       	call   c000f8e4 <malloc>
c0011e97:	83 c4 0c             	add    esp,0xc
c0011e9a:	89 c1                	mov    ecx,eax
c0011e9c:	a3 64 e8 02 c0       	mov    ds:0xc002e864,eax
c0011ea1:	31 d2                	xor    edx,edx
c0011ea3:	a1 90 d6 02 c0       	mov    eax,ds:0xc002d690
c0011ea8:	f7 35 8c d6 02 c0    	div    DWORD PTR ds:0xc002d68c
c0011eae:	c1 e8 05             	shr    eax,0x5
c0011eb1:	50                   	push   eax
c0011eb2:	6a 00                	push   0x0
c0011eb4:	51                   	push   ecx
c0011eb5:	e8 be e8 fe ff       	call   c0000778 <memset>
c0011eba:	83 c4 1c             	add    esp,0x1c
c0011ebd:	c3                   	ret    

c0011ebe <Virt::getAKernelVAS()>:
c0011ebe:	a1 68 e8 02 c0       	mov    eax,ds:0xc002e868
c0011ec3:	c3                   	ret    

c0011ec4 <Virt::setupPageSwapping(int)>:
c0011ec4:	57                   	push   edi
c0011ec5:	56                   	push   esi
c0011ec6:	53                   	push   ebx
c0011ec7:	83 ec 1c             	sub    esp,0x1c
c0011eca:	68 14 01 00 00       	push   0x114
c0011ecf:	e8 10 da ff ff       	call   c000f8e4 <malloc>
c0011ed4:	83 c4 0c             	add    esp,0xc
c0011ed7:	89 c6                	mov    esi,eax
c0011ed9:	ff 35 58 1c 03 c0    	push   DWORD PTR ds:0xc0031c58
c0011edf:	68 6c a9 02 c0       	push   0xc002a96c
c0011ee4:	50                   	push   eax
c0011ee5:	e8 52 16 00 00       	call   c001353c <File::File(char const*, Process*)>
c0011eea:	89 34 24             	mov    DWORD PTR [esp],esi
c0011eed:	e8 26 18 00 00       	call   c0013718 <File::unlink()>
c0011ef2:	58                   	pop    eax
c0011ef3:	5a                   	pop    edx
c0011ef4:	6a 12                	push   0x12
c0011ef6:	56                   	push   esi
c0011ef7:	e8 a4 16 00 00       	call   c00135a0 <File::open(FileOpenMode)>
c0011efc:	83 c4 10             	add    esp,0x10
c0011eff:	85 c0                	test   eax,eax
c0011f01:	0f 85 ca 00 00 00    	jne    c0011fd1 <Virt::setupPageSwapping(int)+0x10d>
c0011f07:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011f0b:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011f13:	c1 e3 08             	shl    ebx,0x8
c0011f16:	83 ec 0c             	sub    esp,0xc
c0011f19:	68 00 00 01 00       	push   0x10000
c0011f1e:	e8 c1 d9 ff ff       	call   c000f8e4 <malloc>
c0011f23:	83 c4 0c             	add    esp,0xc
c0011f26:	89 c7                	mov    edi,eax
c0011f28:	68 00 00 01 00       	push   0x10000
c0011f2d:	6a 00                	push   0x0
c0011f2f:	50                   	push   eax
c0011f30:	e8 43 e8 fe ff       	call   c0000778 <memset>
c0011f35:	83 c4 10             	add    esp,0x10
c0011f38:	85 db                	test   ebx,ebx
c0011f3a:	79 03                	jns    c0011f3f <Virt::setupPageSwapping(int)+0x7b>
c0011f3c:	83 c3 0f             	add    ebx,0xf
c0011f3f:	c1 fb 04             	sar    ebx,0x4
c0011f42:	4b                   	dec    ebx
c0011f43:	83 fb ff             	cmp    ebx,0xffffffff
c0011f46:	74 4b                	je     c0011f93 <Virt::setupPageSwapping(int)+0xcf>
c0011f48:	83 ec 0c             	sub    esp,0xc
c0011f4b:	8b 06                	mov    eax,DWORD PTR [esi]
c0011f4d:	8d 54 24 18          	lea    edx,[esp+0x18]
c0011f51:	52                   	push   edx
c0011f52:	57                   	push   edi
c0011f53:	6a 00                	push   0x0
c0011f55:	68 00 00 01 00       	push   0x10000
c0011f5a:	56                   	push   esi
c0011f5b:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0011f5e:	83 c4 20             	add    esp,0x20
c0011f61:	85 c0                	test   eax,eax
c0011f63:	75 59                	jne    c0011fbe <Virt::setupPageSwapping(int)+0xfa>
c0011f65:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011f69:	3d 00 00 01 00       	cmp    eax,0x10000
c0011f6e:	74 d2                	je     c0011f42 <Virt::setupPageSwapping(int)+0x7e>
c0011f70:	83 ec 08             	sub    esp,0x8
c0011f73:	4b                   	dec    ebx
c0011f74:	50                   	push   eax
c0011f75:	68 bf a9 02 c0       	push   0xc002a9bf
c0011f7a:	e8 64 10 00 00       	call   c0012fe3 <Dbg::kprintf(char const*, ...)>
c0011f7f:	c7 04 24 c8 a9 02 c0 	mov    DWORD PTR [esp],0xc002a9c8
c0011f86:	e8 0a 87 00 00       	call   c001a695 <Krnl::panic(char const*)>
c0011f8b:	83 c4 10             	add    esp,0x10
c0011f8e:	83 fb ff             	cmp    ebx,0xffffffff
c0011f91:	75 b5                	jne    c0011f48 <Virt::setupPageSwapping(int)+0x84>
c0011f93:	83 ec 0c             	sub    esp,0xc
c0011f96:	56                   	push   esi
c0011f97:	e8 62 16 00 00       	call   c00135fe <File::close()>
c0011f9c:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011f9f:	e8 60 d9 ff ff       	call   c000f904 <rfree>
c0011fa4:	83 c4 10             	add    esp,0x10
c0011fa7:	85 f6                	test   esi,esi
c0011fa9:	74 0c                	je     c0011fb7 <Virt::setupPageSwapping(int)+0xf3>
c0011fab:	83 ec 0c             	sub    esp,0xc
c0011fae:	8b 06                	mov    eax,DWORD PTR [esi]
c0011fb0:	56                   	push   esi
c0011fb1:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011fb4:	83 c4 10             	add    esp,0x10
c0011fb7:	83 c4 10             	add    esp,0x10
c0011fba:	5b                   	pop    ebx
c0011fbb:	5e                   	pop    esi
c0011fbc:	5f                   	pop    edi
c0011fbd:	c3                   	ret    
c0011fbe:	83 ec 08             	sub    esp,0x8
c0011fc1:	50                   	push   eax
c0011fc2:	68 a7 a9 02 c0       	push   0xc002a9a7
c0011fc7:	e8 17 10 00 00       	call   c0012fe3 <Dbg::kprintf(char const*, ...)>
c0011fcc:	83 c4 10             	add    esp,0x10
c0011fcf:	eb 94                	jmp    c0011f65 <Virt::setupPageSwapping(int)+0xa1>
c0011fd1:	83 ec 08             	sub    esp,0x8
c0011fd4:	50                   	push   eax
c0011fd5:	68 83 a9 02 c0       	push   0xc002a983
c0011fda:	e8 04 10 00 00       	call   c0012fe3 <Dbg::kprintf(char const*, ...)>
c0011fdf:	c7 04 24 8c a9 02 c0 	mov    DWORD PTR [esp],0xc002a98c
c0011fe6:	e8 aa 86 00 00       	call   c001a695 <Krnl::panic(char const*)>
c0011feb:	83 c4 10             	add    esp,0x10
c0011fee:	e9 14 ff ff ff       	jmp    c0011f07 <Virt::setupPageSwapping(int)+0x43>
c0011ff3:	90                   	nop

c0011ff4 <VAS::VAS()>:
c0011ff4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011ff8:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011fff:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012003:	a3 68 e8 02 c0       	mov    ds:0xc002e868,eax
c0012008:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001200c:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c0012010:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012014:	c6 00 01             	mov    BYTE PTR [eax],0x1
c0012017:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001201b:	c7 40 08 00 10 00 c2 	mov    DWORD PTR [eax+0x8],0xc2001000
c0012022:	90                   	nop
c0012023:	c3                   	ret    

c0012024 <VAS::VAS(VAS*)>:
c0012024:	83 ec 0c             	sub    esp,0xc
c0012027:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001202b:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0012032:	83 ec 0c             	sub    esp,0xc
c0012035:	68 c0 a6 02 c0       	push   0xc002a6c0
c001203a:	e8 56 86 00 00       	call   c001a695 <Krnl::panic(char const*)>
c001203f:	83 c4 10             	add    esp,0x10
c0012042:	90                   	nop
c0012043:	83 c4 0c             	add    esp,0xc
c0012046:	c3                   	ret    
c0012047:	90                   	nop

c0012048 <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c0012048:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001204c:	89 c2                	mov    edx,eax
c001204e:	c1 e8 0a             	shr    eax,0xa
c0012051:	c1 ea 16             	shr    edx,0x16
c0012054:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0012059:	19 c9                	sbb    ecx,ecx
c001205b:	c1 e2 0c             	shl    edx,0xc
c001205e:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c0012064:	25 fc 0f 00 00       	and    eax,0xffc
c0012069:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c0012070:	01 d0                	add    eax,edx
c0012072:	c3                   	ret    
c0012073:	90                   	nop

c0012074 <VAS::getPageTableEntry(unsigned long)>:
c0012074:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0012078:	89 ca                	mov    edx,ecx
c001207a:	c1 e9 0a             	shr    ecx,0xa
c001207d:	c1 ea 16             	shr    edx,0x16
c0012080:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c0012086:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c001208c:	c1 e0 0c             	shl    eax,0xc
c001208f:	8d 04 08             	lea    eax,[eax+ecx*1]
c0012092:	c3                   	ret    

c0012093 <Virt::freeKernelVirtualPages(unsigned long)>:
c0012093:	57                   	push   edi
c0012094:	56                   	push   esi
c0012095:	be 01 00 00 00       	mov    esi,0x1
c001209a:	53                   	push   ebx
c001209b:	83 ec 10             	sub    esp,0x10
c001209e:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00120a2:	c1 eb 0c             	shr    ebx,0xc
c00120a5:	eb 3f                	jmp    c00120e6 <Virt::freeKernelVirtualPages(unsigned long)+0x53>
c00120a7:	e8 12 fe ff ff       	call   c0011ebe <Virt::getAKernelVAS()>
c00120ac:	83 ec 08             	sub    esp,0x8
c00120af:	57                   	push   edi
c00120b0:	50                   	push   eax
c00120b1:	e8 be ff ff ff       	call   c0012074 <VAS::getPageTableEntry(unsigned long)>
c00120b6:	83 c4 10             	add    esp,0x10
c00120b9:	8b 00                	mov    eax,DWORD PTR [eax]
c00120bb:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00120bf:	f6 c4 04             	test   ah,0x4
c00120c2:	75 5f                	jne    c0012123 <Virt::freeKernelVirtualPages(unsigned long)+0x90>
c00120c4:	80 fa 04             	cmp    dl,0x4
c00120c7:	74 78                	je     c0012141 <Virt::freeKernelVirtualPages(unsigned long)+0xae>
c00120c9:	80 fa 02             	cmp    dl,0x2
c00120cc:	0f 84 88 00 00 00    	je     c001215a <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c00120d2:	80 fa 03             	cmp    dl,0x3
c00120d5:	0f 84 ad 00 00 00    	je     c0012188 <Virt::freeKernelVirtualPages(unsigned long)+0xf5>
c00120db:	fe ca                	dec    dl
c00120dd:	0f 84 92 00 00 00    	je     c0012175 <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c00120e3:	43                   	inc    ebx
c00120e4:	31 f6                	xor    esi,esi
c00120e6:	53                   	push   ebx
c00120e7:	e8 13 fb ff ff       	call   c0011bff <Virt::getPageState(unsigned long)>
c00120ec:	5f                   	pop    edi
c00120ed:	89 df                	mov    edi,ebx
c00120ef:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00120f3:	c1 e7 0c             	shl    edi,0xc
c00120f6:	84 c0                	test   al,al
c00120f8:	75 ad                	jne    c00120a7 <Virt::freeKernelVirtualPages(unsigned long)+0x14>
c00120fa:	83 ec 0c             	sub    esp,0xc
c00120fd:	68 ce a9 02 c0       	push   0xc002a9ce
c0012102:	e8 8e 85 00 00       	call   c001a695 <Krnl::panic(char const*)>
c0012107:	e8 b2 fd ff ff       	call   c0011ebe <Virt::getAKernelVAS()>
c001210c:	5a                   	pop    edx
c001210d:	59                   	pop    ecx
c001210e:	57                   	push   edi
c001210f:	50                   	push   eax
c0012110:	e8 5f ff ff ff       	call   c0012074 <VAS::getPageTableEntry(unsigned long)>
c0012115:	83 c4 10             	add    esp,0x10
c0012118:	8b 00                	mov    eax,DWORD PTR [eax]
c001211a:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c001211e:	f6 c4 04             	test   ah,0x4
c0012121:	74 c0                	je     c00120e3 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0012123:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c0012127:	25 00 f0 ff ff       	and    eax,0xfffff000
c001212c:	83 ec 0c             	sub    esp,0xc
c001212f:	50                   	push   eax
c0012130:	e8 c7 dd ff ff       	call   c000fefc <Phys::freePage(unsigned long)>
c0012135:	83 c4 10             	add    esp,0x10
c0012138:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c001213c:	80 fa 04             	cmp    dl,0x4
c001213f:	75 88                	jne    c00120c9 <Virt::freeKernelVirtualPages(unsigned long)+0x36>
c0012141:	89 f0                	mov    eax,esi
c0012143:	84 c0                	test   al,al
c0012145:	75 47                	jne    c001218e <Virt::freeKernelVirtualPages(unsigned long)+0xfb>
c0012147:	c7 44 24 20 e4 a6 02 c0 	mov    DWORD PTR [esp+0x20],0xc002a6e4
c001214f:	83 c4 10             	add    esp,0x10
c0012152:	5b                   	pop    ebx
c0012153:	5e                   	pop    esi
c0012154:	5f                   	pop    edi
c0012155:	e9 3b 85 00 00       	jmp    c001a695 <Krnl::panic(char const*)>
c001215a:	89 f0                	mov    eax,esi
c001215c:	84 c0                	test   al,al
c001215e:	75 15                	jne    c0012175 <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c0012160:	83 ec 0c             	sub    esp,0xc
c0012163:	68 ea a9 02 c0       	push   0xc002a9ea
c0012168:	e8 28 85 00 00       	call   c001a695 <Krnl::panic(char const*)>
c001216d:	83 c4 10             	add    esp,0x10
c0012170:	e9 6e ff ff ff       	jmp    c00120e3 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0012175:	83 ec 08             	sub    esp,0x8
c0012178:	6a 00                	push   0x0
c001217a:	53                   	push   ebx
c001217b:	e8 4a fa ff ff       	call   c0011bca <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0012180:	83 c4 10             	add    esp,0x10
c0012183:	e9 5b ff ff ff       	jmp    c00120e3 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0012188:	89 f0                	mov    eax,esi
c001218a:	84 c0                	test   al,al
c001218c:	75 15                	jne    c00121a3 <Virt::freeKernelVirtualPages(unsigned long)+0x110>
c001218e:	83 ec 08             	sub    esp,0x8
c0012191:	6a 00                	push   0x0
c0012193:	53                   	push   ebx
c0012194:	e8 31 fa ff ff       	call   c0011bca <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0012199:	83 c4 10             	add    esp,0x10
c001219c:	83 c4 10             	add    esp,0x10
c001219f:	5b                   	pop    ebx
c00121a0:	5e                   	pop    esi
c00121a1:	5f                   	pop    edi
c00121a2:	c3                   	ret    
c00121a3:	c7 44 24 20 06 aa 02 c0 	mov    DWORD PTR [esp+0x20],0xc002aa06
c00121ab:	83 c4 10             	add    esp,0x10
c00121ae:	5b                   	pop    ebx
c00121af:	5e                   	pop    esi
c00121b0:	5f                   	pop    edi
c00121b1:	e9 df 84 00 00       	jmp    c001a695 <Krnl::panic(char const*)>

c00121b6 <VAS::freeAllocatedPages(unsigned long)>:
c00121b6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00121ba:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00121be:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c00121c2:	74 09                	je     c00121cd <VAS::freeAllocatedPages(unsigned long)+0x17>
c00121c4:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00121c8:	e9 c6 fe ff ff       	jmp    c0012093 <Virt::freeKernelVirtualPages(unsigned long)>
c00121cd:	c7 44 24 04 08 a7 02 c0 	mov    DWORD PTR [esp+0x4],0xc002a708
c00121d5:	e9 09 0e 00 00       	jmp    c0012fe3 <Dbg::kprintf(char const*, ...)>

c00121da <VAS::virtualToPhysical(unsigned long)>:
c00121da:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c00121de:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c00121e2:	e8 8d fe ff ff       	call   c0012074 <VAS::getPageTableEntry(unsigned long)>
c00121e7:	5a                   	pop    edx
c00121e8:	8b 00                	mov    eax,DWORD PTR [eax]
c00121ea:	59                   	pop    ecx
c00121eb:	25 00 f0 ff ff       	and    eax,0xfffff000
c00121f0:	c3                   	ret    
c00121f1:	90                   	nop

c00121f2 <VAS::reflagRange(unsigned long, int, int, int)>:
c00121f2:	55                   	push   ebp
c00121f3:	57                   	push   edi
c00121f4:	56                   	push   esi
c00121f5:	53                   	push   ebx
c00121f6:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00121fa:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00121fe:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0012202:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0012206:	85 db                	test   ebx,ebx
c0012208:	7e 22                	jle    c001222c <VAS::reflagRange(unsigned long, int, int, int)+0x3a>
c001220a:	c1 e3 0c             	shl    ebx,0xc
c001220d:	01 f3                	add    ebx,esi
c001220f:	56                   	push   esi
c0012210:	81 c6 00 10 00 00    	add    esi,0x1000
c0012216:	55                   	push   ebp
c0012217:	e8 58 fe ff ff       	call   c0012074 <VAS::getPageTableEntry(unsigned long)>
c001221c:	5a                   	pop    edx
c001221d:	59                   	pop    ecx
c001221e:	8b 08                	mov    ecx,DWORD PTR [eax]
c0012220:	21 f9                	and    ecx,edi
c0012222:	0b 4c 24 24          	or     ecx,DWORD PTR [esp+0x24]
c0012226:	39 f3                	cmp    ebx,esi
c0012228:	89 08                	mov    DWORD PTR [eax],ecx
c001222a:	75 e3                	jne    c001220f <VAS::reflagRange(unsigned long, int, int, int)+0x1d>
c001222c:	5b                   	pop    ebx
c001222d:	5e                   	pop    esi
c001222e:	5f                   	pop    edi
c001222f:	5d                   	pop    ebp
c0012230:	c3                   	ret    
c0012231:	90                   	nop

c0012232 <VAS::setToWriteCombining(unsigned long, int)>:
c0012232:	a1 e8 e6 02 c0       	mov    eax,ds:0xc002e6e8
c0012237:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001223d:	f6 80 90 11 00 00 20 	test   BYTE PTR [eax+0x1190],0x20
c0012244:	75 01                	jne    c0012247 <VAS::setToWriteCombining(unsigned long, int)+0x15>
c0012246:	c3                   	ret    
c0012247:	68 80 00 00 00       	push   0x80
c001224c:	6a ff                	push   0xffffffff
c001224e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012252:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012256:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001225a:	e8 93 ff ff ff       	call   c00121f2 <VAS::reflagRange(unsigned long, int, int, int)>
c001225f:	83 c4 14             	add    esp,0x14
c0012262:	c3                   	ret    
c0012263:	90                   	nop

c0012264 <VAS::mapOtherVASIn(bool, VAS*)>:
c0012264:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0012269:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001226d:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0012270:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012274:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0012277:	19 c0                	sbb    eax,eax
c0012279:	83 ca 03             	or     edx,0x3
c001227c:	83 e0 fc             	and    eax,0xfffffffc
c001227f:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c0012286:	0f 20 d8             	mov    eax,cr3
c0012289:	0f 22 d8             	mov    cr3,eax
c001228c:	c3                   	ret    
c001228d:	90                   	nop

c001228e <VAS::~VAS()>:
c001228e:	83 ec 2c             	sub    esp,0x2c
c0012291:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0012299:	e8 1c bc 00 00       	call   c001deba <lockScheduler()>
c001229e:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00122a3:	8b 00                	mov    eax,DWORD PTR [eax]
c00122a5:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00122a8:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c00122ae:	83 ec 04             	sub    esp,0x4
c00122b1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00122b5:	6a 01                	push   0x1
c00122b7:	50                   	push   eax
c00122b8:	e8 a7 ff ff ff       	call   c0012264 <VAS::mapOtherVASIn(bool, VAS*)>
c00122bd:	83 c4 10             	add    esp,0x10
c00122c0:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00122c8:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c00122d0:	0f 8f d7 00 00 00    	jg     c00123ad <VAS::~VAS()+0x11f>
c00122d6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00122da:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00122dd:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00122e1:	c1 e2 02             	shl    edx,0x2
c00122e4:	01 d0                	add    eax,edx
c00122e6:	8b 00                	mov    eax,DWORD PTR [eax]
c00122e8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00122ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00122f0:	83 e0 01             	and    eax,0x1
c00122f3:	0f 84 ab 00 00 00    	je     c00123a4 <VAS::~VAS()+0x116>
c00122f9:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0012301:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c0012309:	7f 75                	jg     c0012380 <VAS::~VAS()+0xf2>
c001230b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001230f:	c1 e0 0a             	shl    eax,0xa
c0012312:	89 c2                	mov    edx,eax
c0012314:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012318:	01 d0                	add    eax,edx
c001231a:	c1 e0 0c             	shl    eax,0xc
c001231d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012321:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0012326:	8b 00                	mov    eax,DWORD PTR [eax]
c0012328:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001232b:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c0012331:	83 ec 04             	sub    esp,0x4
c0012334:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0012338:	6a 01                	push   0x1
c001233a:	50                   	push   eax
c001233b:	e8 08 fd ff ff       	call   c0012048 <VAS::getForeignPageTableEntry(bool, unsigned long)>
c0012340:	83 c4 10             	add    esp,0x10
c0012343:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012347:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001234b:	8b 00                	mov    eax,DWORD PTR [eax]
c001234d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012351:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012355:	25 01 04 00 00       	and    eax,0x401
c001235a:	3d 01 04 00 00       	cmp    eax,0x401
c001235f:	75 19                	jne    c001237a <VAS::~VAS()+0xec>
c0012361:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012365:	25 00 f0 ff ff       	and    eax,0xfffff000
c001236a:	83 ec 0c             	sub    esp,0xc
c001236d:	50                   	push   eax
c001236e:	e8 89 db ff ff       	call   c000fefc <Phys::freePage(unsigned long)>
c0012373:	83 c4 10             	add    esp,0x10
c0012376:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c001237a:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c001237e:	eb 81                	jmp    c0012301 <VAS::~VAS()+0x73>
c0012380:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012384:	25 00 04 00 00       	and    eax,0x400
c0012389:	74 19                	je     c00123a4 <VAS::~VAS()+0x116>
c001238b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001238f:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012394:	83 ec 0c             	sub    esp,0xc
c0012397:	50                   	push   eax
c0012398:	e8 5f db ff ff       	call   c000fefc <Phys::freePage(unsigned long)>
c001239d:	83 c4 10             	add    esp,0x10
c00123a0:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00123a4:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c00123a8:	e9 1b ff ff ff       	jmp    c00122c8 <VAS::~VAS()+0x3a>
c00123ad:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00123b1:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00123b4:	83 ec 0c             	sub    esp,0xc
c00123b7:	50                   	push   eax
c00123b8:	e8 d6 fc ff ff       	call   c0012093 <Virt::freeKernelVirtualPages(unsigned long)>
c00123bd:	83 c4 10             	add    esp,0x10
c00123c0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00123c4:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00123c7:	83 ec 0c             	sub    esp,0xc
c00123ca:	50                   	push   eax
c00123cb:	e8 2c db ff ff       	call   c000fefc <Phys::freePage(unsigned long)>
c00123d0:	83 c4 10             	add    esp,0x10
c00123d3:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00123d7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00123db:	c1 e0 02             	shl    eax,0x2
c00123de:	83 ec 08             	sub    esp,0x8
c00123e1:	50                   	push   eax
c00123e2:	68 2c a7 02 c0       	push   0xc002a72c
c00123e7:	e8 f7 0b 00 00       	call   c0012fe3 <Dbg::kprintf(char const*, ...)>
c00123ec:	83 c4 10             	add    esp,0x10
c00123ef:	e8 c8 ba 00 00       	call   c001debc <unlockScheduler()>
c00123f4:	90                   	nop
c00123f5:	83 c4 2c             	add    esp,0x2c
c00123f8:	c3                   	ret    
c00123f9:	90                   	nop

c00123fa <VAS::mapPage(unsigned long, unsigned long, int)>:
c00123fa:	55                   	push   ebp
c00123fb:	57                   	push   edi
c00123fc:	56                   	push   esi
c00123fd:	53                   	push   ebx
c00123fe:	83 ec 1c             	sub    esp,0x1c
c0012401:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0012405:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0012409:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c001240f:	77 08                	ja     c0012419 <VAS::mapPage(unsigned long, unsigned long, int)+0x1f>
c0012411:	0f 20 d8             	mov    eax,cr3
c0012414:	39 47 0c             	cmp    DWORD PTR [edi+0xc],eax
c0012417:	75 47                	jne    c0012460 <VAS::mapPage(unsigned long, unsigned long, int)+0x66>
c0012419:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001241d:	09 d8                	or     eax,ebx
c001241f:	a9 ff 0f 00 00       	test   eax,0xfff
c0012424:	75 57                	jne    c001247d <VAS::mapPage(unsigned long, unsigned long, int)+0x83>
c0012426:	89 de                	mov    esi,ebx
c0012428:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c001242b:	c1 ee 16             	shr    esi,0x16
c001242e:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c0012435:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c0012439:	74 54                	je     c001248f <VAS::mapPage(unsigned long, unsigned long, int)+0x95>
c001243b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001243f:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c0012445:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c0012449:	c1 e6 0c             	shl    esi,0xc
c001244c:	c1 eb 0a             	shr    ebx,0xa
c001244f:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c0012455:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c0012458:	83 c4 1c             	add    esp,0x1c
c001245b:	5b                   	pop    ebx
c001245c:	5e                   	pop    esi
c001245d:	5f                   	pop    edi
c001245e:	5d                   	pop    ebp
c001245f:	c3                   	ret    
c0012460:	83 ec 0c             	sub    esp,0xc
c0012463:	68 4c a7 02 c0       	push   0xc002a74c
c0012468:	e8 76 0b 00 00       	call   c0012fe3 <Dbg::kprintf(char const*, ...)>
c001246d:	83 c4 10             	add    esp,0x10
c0012470:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012474:	09 d8                	or     eax,ebx
c0012476:	a9 ff 0f 00 00       	test   eax,0xfff
c001247b:	74 a9                	je     c0012426 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c001247d:	83 ec 0c             	sub    esp,0xc
c0012480:	68 b4 a7 02 c0       	push   0xc002a7b4
c0012485:	e8 0b 82 00 00       	call   c001a695 <Krnl::panic(char const*)>
c001248a:	83 c4 10             	add    esp,0x10
c001248d:	eb 97                	jmp    c0012426 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c001248f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012493:	e8 ee da ff ff       	call   c000ff86 <Phys::allocatePage()>
c0012498:	89 c5                	mov    ebp,eax
c001249a:	e8 1f fa ff ff       	call   c0011ebe <Virt::getAKernelVAS()>
c001249f:	83 ec 0c             	sub    esp,0xc
c00124a2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00124a6:	6a 01                	push   0x1
c00124a8:	e8 76 f7 ff ff       	call   c0011c23 <Virt::allocateKernelVirtualPages(int)>
c00124ad:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c00124b4:	6a 01                	push   0x1
c00124b6:	50                   	push   eax
c00124b7:	55                   	push   ebp
c00124b8:	81 cd 07 04 00 00    	or     ebp,0x407
c00124be:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00124c2:	51                   	push   ecx
c00124c3:	e8 26 02 00 00       	call   c00126ee <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00124c8:	83 c4 1c             	add    esp,0x1c
c00124cb:	68 00 10 00 00       	push   0x1000
c00124d0:	6a 00                	push   0x0
c00124d2:	50                   	push   eax
c00124d3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00124d7:	e8 9c e2 fe ff       	call   c0000778 <memset>
c00124dc:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00124e0:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00124e3:	e8 ab fb ff ff       	call   c0012093 <Virt::freeKernelVirtualPages(unsigned long)>
c00124e8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00124ec:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00124ef:	83 c4 10             	add    esp,0x10
c00124f2:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c00124f5:	e9 41 ff ff ff       	jmp    c001243b <VAS::mapPage(unsigned long, unsigned long, int)+0x41>

c00124fa <VAS::allocatePages(int, int)>:
c00124fa:	55                   	push   ebp
c00124fb:	57                   	push   edi
c00124fc:	56                   	push   esi
c00124fd:	53                   	push   ebx
c00124fe:	83 ec 1c             	sub    esp,0x1c
c0012501:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0012505:	a1 e8 e6 02 c0       	mov    eax,ds:0xc002e6e8
c001250a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012510:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c0012516:	83 e0 01             	and    eax,0x1
c0012519:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c001251d:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0012521:	0f 85 cc 00 00 00    	jne    c00125f3 <VAS::allocatePages(int, int)+0xf9>
c0012527:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c001252a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001252e:	85 c0                	test   eax,eax
c0012530:	0f 84 a1 00 00 00    	je     c00125d7 <VAS::allocatePages(int, int)+0xdd>
c0012536:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001253a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001253e:	c1 e6 0c             	shl    esi,0xc
c0012541:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c0012545:	85 c0                	test   eax,eax
c0012547:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c001254a:	7e 33                	jle    c001257f <VAS::allocatePages(int, int)+0x85>
c001254c:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0012550:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012554:	81 cd 00 04 00 00    	or     ebp,0x400
c001255a:	e8 27 da ff ff       	call   c000ff86 <Phys::allocatePage()>
c001255f:	55                   	push   ebp
c0012560:	53                   	push   ebx
c0012561:	50                   	push   eax
c0012562:	57                   	push   edi
c0012563:	e8 92 fe ff ff       	call   c00123fa <VAS::mapPage(unsigned long, unsigned long, int)>
c0012568:	83 c4 10             	add    esp,0x10
c001256b:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0012570:	74 03                	je     c0012575 <VAS::allocatePages(int, int)+0x7b>
c0012572:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0012575:	81 c3 00 10 00 00    	add    ebx,0x1000
c001257b:	39 de                	cmp    esi,ebx
c001257d:	75 db                	jne    c001255a <VAS::allocatePages(int, int)+0x60>
c001257f:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0012584:	75 12                	jne    c0012598 <VAS::allocatePages(int, int)+0x9e>
c0012586:	0f 20 d8             	mov    eax,cr3
c0012589:	0f 22 d8             	mov    cr3,eax
c001258c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012590:	83 c4 1c             	add    esp,0x1c
c0012593:	5b                   	pop    ebx
c0012594:	5e                   	pop    esi
c0012595:	5f                   	pop    edi
c0012596:	5d                   	pop    ebp
c0012597:	c3                   	ret    
c0012598:	c1 ee 0a             	shr    esi,0xa
c001259b:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001259f:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c00125a5:	c1 eb 0a             	shr    ebx,0xa
c00125a8:	8d 86 00 00 c0 ff    	lea    eax,[esi-0x400000]
c00125ae:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c00125b4:	81 eb 00 00 40 00    	sub    ebx,0x400000
c00125ba:	39 c3                	cmp    ebx,eax
c00125bc:	77 ce                	ja     c001258c <VAS::allocatePages(int, int)+0x92>
c00125be:	0f 01 3b             	invlpg BYTE PTR [ebx]
c00125c1:	81 c3 00 10 00 00    	add    ebx,0x1000
c00125c7:	39 d8                	cmp    eax,ebx
c00125c9:	73 f3                	jae    c00125be <VAS::allocatePages(int, int)+0xc4>
c00125cb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00125cf:	83 c4 1c             	add    esp,0x1c
c00125d2:	5b                   	pop    ebx
c00125d3:	5e                   	pop    esi
c00125d4:	5f                   	pop    edi
c00125d5:	5d                   	pop    ebp
c00125d6:	c3                   	ret    
c00125d7:	83 ec 0c             	sub    esp,0xc
c00125da:	68 d8 a7 02 c0       	push   0xc002a7d8
c00125df:	e8 b1 80 00 00       	call   c001a695 <Krnl::panic(char const*)>
c00125e4:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c00125e7:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00125eb:	83 c4 10             	add    esp,0x10
c00125ee:	e9 43 ff ff ff       	jmp    c0012536 <VAS::allocatePages(int, int)+0x3c>
c00125f3:	83 ec 0c             	sub    esp,0xc
c00125f6:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00125fa:	e8 24 f6 ff ff       	call   c0011c23 <Virt::allocateKernelVirtualPages(int)>
c00125ff:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012603:	83 c4 10             	add    esp,0x10
c0012606:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c001260b:	0f 87 9b 00 00 00    	ja     c00126ac <VAS::allocatePages(int, int)+0x1b2>
c0012611:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0012615:	85 d2                	test   edx,edx
c0012617:	7e 3c                	jle    c0012655 <VAS::allocatePages(int, int)+0x15b>
c0012619:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001261d:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0012621:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012625:	c1 e5 0c             	shl    ebp,0xc
c0012628:	81 ce 00 04 00 00    	or     esi,0x400
c001262e:	01 dd                	add    ebp,ebx
c0012630:	e8 51 d9 ff ff       	call   c000ff86 <Phys::allocatePage()>
c0012635:	56                   	push   esi
c0012636:	53                   	push   ebx
c0012637:	50                   	push   eax
c0012638:	57                   	push   edi
c0012639:	e8 bc fd ff ff       	call   c00123fa <VAS::mapPage(unsigned long, unsigned long, int)>
c001263e:	83 c4 10             	add    esp,0x10
c0012641:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0012646:	74 03                	je     c001264b <VAS::allocatePages(int, int)+0x151>
c0012648:	0f 01 3b             	invlpg BYTE PTR [ebx]
c001264b:	81 c3 00 10 00 00    	add    ebx,0x1000
c0012651:	39 dd                	cmp    ebp,ebx
c0012653:	75 db                	jne    c0012630 <VAS::allocatePages(int, int)+0x136>
c0012655:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c001265a:	0f 84 26 ff ff ff    	je     c0012586 <VAS::allocatePages(int, int)+0x8c>
c0012660:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012664:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012668:	89 d3                	mov    ebx,edx
c001266a:	c1 e0 0c             	shl    eax,0xc
c001266d:	c1 eb 0a             	shr    ebx,0xa
c0012670:	01 d0                	add    eax,edx
c0012672:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0012678:	c1 e8 0a             	shr    eax,0xa
c001267b:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0012681:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012686:	2d 00 00 40 00       	sub    eax,0x400000
c001268b:	39 c3                	cmp    ebx,eax
c001268d:	0f 87 f9 fe ff ff    	ja     c001258c <VAS::allocatePages(int, int)+0x92>
c0012693:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0012696:	81 c3 00 10 00 00    	add    ebx,0x1000
c001269c:	39 d8                	cmp    eax,ebx
c001269e:	73 f3                	jae    c0012693 <VAS::allocatePages(int, int)+0x199>
c00126a0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00126a4:	83 c4 1c             	add    esp,0x1c
c00126a7:	5b                   	pop    ebx
c00126a8:	5e                   	pop    esi
c00126a9:	5f                   	pop    edi
c00126aa:	5d                   	pop    ebp
c00126ab:	c3                   	ret    
c00126ac:	a1 e8 e6 02 c0       	mov    eax,ds:0xc002e6e8
c00126b1:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00126b7:	f6 80 90 11 00 00 10 	test   BYTE PTR [eax+0x1190],0x10
c00126be:	0f 84 4d ff ff ff    	je     c0012611 <VAS::allocatePages(int, int)+0x117>
c00126c4:	81 4c 24 38 00 01 00 00 	or     DWORD PTR [esp+0x38],0x100
c00126cc:	e9 40 ff ff ff       	jmp    c0012611 <VAS::allocatePages(int, int)+0x117>
c00126d1:	90                   	nop

c00126d2 <VAS::setCPUSpecific(unsigned long)>:
c00126d2:	83 ec 0c             	sub    esp,0xc
c00126d5:	6a 05                	push   0x5
c00126d7:	68 00 00 40 c2       	push   0xc2400000
c00126dc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00126e0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00126e4:	e8 11 fd ff ff       	call   c00123fa <VAS::mapPage(unsigned long, unsigned long, int)>
c00126e9:	83 c4 1c             	add    esp,0x1c
c00126ec:	c3                   	ret    
c00126ed:	90                   	nop

c00126ee <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c00126ee:	55                   	push   ebp
c00126ef:	57                   	push   edi
c00126f0:	56                   	push   esi
c00126f1:	53                   	push   ebx
c00126f2:	83 ec 1c             	sub    esp,0x1c
c00126f5:	a1 e8 e6 02 c0       	mov    eax,ds:0xc002e6e8
c00126fa:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00126fe:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012704:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0012708:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c001270e:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0012712:	83 e0 01             	and    eax,0x1
c0012715:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0012719:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001271d:	85 c0                	test   eax,eax
c001271f:	7e 39                	jle    c001275a <VAS::mapRange(unsigned long, unsigned long, int, int)+0x6c>
c0012721:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012725:	89 f3                	mov    ebx,esi
c0012727:	c1 e0 0c             	shl    eax,0xc
c001272a:	01 f0                	add    eax,esi
c001272c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012730:	55                   	push   ebp
c0012731:	53                   	push   ebx
c0012732:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012736:	29 f0                	sub    eax,esi
c0012738:	01 d8                	add    eax,ebx
c001273a:	50                   	push   eax
c001273b:	57                   	push   edi
c001273c:	e8 b9 fc ff ff       	call   c00123fa <VAS::mapPage(unsigned long, unsigned long, int)>
c0012741:	83 c4 10             	add    esp,0x10
c0012744:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0012749:	74 03                	je     c001274e <VAS::mapRange(unsigned long, unsigned long, int, int)+0x60>
c001274b:	0f 01 3b             	invlpg BYTE PTR [ebx]
c001274e:	81 c3 00 10 00 00    	add    ebx,0x1000
c0012754:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c0012758:	75 d6                	jne    c0012730 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x42>
c001275a:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c001275f:	75 10                	jne    c0012771 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x83>
c0012761:	0f 20 d8             	mov    eax,cr3
c0012764:	0f 22 d8             	mov    cr3,eax
c0012767:	83 c4 1c             	add    esp,0x1c
c001276a:	89 f0                	mov    eax,esi
c001276c:	5b                   	pop    ebx
c001276d:	5e                   	pop    esi
c001276e:	5f                   	pop    edi
c001276f:	5d                   	pop    ebp
c0012770:	c3                   	ret    
c0012771:	89 f3                	mov    ebx,esi
c0012773:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012777:	c1 eb 0a             	shr    ebx,0xa
c001277a:	c1 e0 0c             	shl    eax,0xc
c001277d:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0012783:	01 f0                	add    eax,esi
c0012785:	81 eb 00 00 40 00    	sub    ebx,0x400000
c001278b:	c1 e8 0a             	shr    eax,0xa
c001278e:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012793:	2d 00 00 40 00       	sub    eax,0x400000
c0012798:	39 c3                	cmp    ebx,eax
c001279a:	77 cb                	ja     c0012767 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x79>
c001279c:	0f 01 3b             	invlpg BYTE PTR [ebx]
c001279f:	81 c3 00 10 00 00    	add    ebx,0x1000
c00127a5:	39 d8                	cmp    eax,ebx
c00127a7:	73 f3                	jae    c001279c <VAS::mapRange(unsigned long, unsigned long, int, int)+0xae>
c00127a9:	83 c4 1c             	add    esp,0x1c
c00127ac:	89 f0                	mov    eax,esi
c00127ae:	5b                   	pop    ebx
c00127af:	5e                   	pop    esi
c00127b0:	5f                   	pop    edi
c00127b1:	5d                   	pop    ebp
c00127b2:	c3                   	ret    
c00127b3:	90                   	nop

c00127b4 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c00127b4:	55                   	push   ebp
c00127b5:	57                   	push   edi
c00127b6:	56                   	push   esi
c00127b7:	53                   	push   ebx
c00127b8:	83 ec 1c             	sub    esp,0x1c
c00127bb:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00127bf:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00127c3:	0b 44 24 3c          	or     eax,DWORD PTR [esp+0x3c]
c00127c7:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00127cb:	a9 ff 0f 00 00       	test   eax,0xfff
c00127d0:	75 4a                	jne    c001281c <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x68>
c00127d2:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00127d6:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00127d9:	c1 eb 16             	shr    ebx,0x16
c00127dc:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
c00127e3:	f6 04 30 01          	test   BYTE PTR [eax+esi*1],0x1
c00127e7:	74 4d                	je     c0012836 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x82>
c00127e9:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00127ed:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c00127f1:	c1 e8 0a             	shr    eax,0xa
c00127f4:	80 fa 01             	cmp    dl,0x1
c00127f7:	19 d2                	sbb    edx,edx
c00127f9:	c1 e3 0c             	shl    ebx,0xc
c00127fc:	0b 4c 24 3c          	or     ecx,DWORD PTR [esp+0x3c]
c0012800:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c0012806:	25 fc 0f 00 00       	and    eax,0xffc
c001280b:	01 d8                	add    eax,ebx
c001280d:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c0012814:	83 c4 1c             	add    esp,0x1c
c0012817:	5b                   	pop    ebx
c0012818:	5e                   	pop    esi
c0012819:	5f                   	pop    edi
c001281a:	5d                   	pop    ebp
c001281b:	c3                   	ret    
c001281c:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0012820:	83 ec 0c             	sub    esp,0xc
c0012823:	68 04 a8 02 c0       	push   0xc002a804
c0012828:	e8 68 7e 00 00       	call   c001a695 <Krnl::panic(char const*)>
c001282d:	83 c4 10             	add    esp,0x10
c0012830:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012834:	eb 9c                	jmp    c00127d2 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x1e>
c0012836:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001283a:	e8 47 d7 ff ff       	call   c000ff86 <Phys::allocatePage()>
c001283f:	89 c5                	mov    ebp,eax
c0012841:	e8 78 f6 ff ff       	call   c0011ebe <Virt::getAKernelVAS()>
c0012846:	83 ec 0c             	sub    esp,0xc
c0012849:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001284d:	6a 01                	push   0x1
c001284f:	e8 cf f3 ff ff       	call   c0011c23 <Virt::allocateKernelVirtualPages(int)>
c0012854:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c001285b:	6a 01                	push   0x1
c001285d:	50                   	push   eax
c001285e:	55                   	push   ebp
c001285f:	81 cd 07 04 00 00    	or     ebp,0x407
c0012865:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0012869:	51                   	push   ecx
c001286a:	e8 7f fe ff ff       	call   c00126ee <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001286f:	83 c4 1c             	add    esp,0x1c
c0012872:	68 00 10 00 00       	push   0x1000
c0012877:	6a 00                	push   0x0
c0012879:	50                   	push   eax
c001287a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001287e:	e8 f5 de fe ff       	call   c0000778 <memset>
c0012883:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0012887:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001288a:	e8 04 f8 ff ff       	call   c0012093 <Virt::freeKernelVirtualPages(unsigned long)>
c001288f:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0012892:	83 c4 10             	add    esp,0x10
c0012895:	89 2c 30             	mov    DWORD PTR [eax+esi*1],ebp
c0012898:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001289c:	e9 48 ff ff ff       	jmp    c00127e9 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x35>
c00128a1:	90                   	nop

c00128a2 <VAS::VAS(bool)>:
c00128a2:	53                   	push   ebx
c00128a3:	83 ec 28             	sub    esp,0x28
c00128a6:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00128aa:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00128ae:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00128b2:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00128b9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00128bd:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c00128c1:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c00128c4:	e8 bd d6 ff ff       	call   c000ff86 <Phys::allocatePage()>
c00128c9:	89 c2                	mov    edx,eax
c00128cb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00128cf:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00128d2:	e8 e7 f5 ff ff       	call   c0011ebe <Virt::getAKernelVAS()>
c00128d7:	89 c3                	mov    ebx,eax
c00128d9:	83 ec 0c             	sub    esp,0xc
c00128dc:	6a 01                	push   0x1
c00128de:	e8 40 f3 ff ff       	call   c0011c23 <Virt::allocateKernelVirtualPages(int)>
c00128e3:	83 c4 10             	add    esp,0x10
c00128e6:	89 c2                	mov    edx,eax
c00128e8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00128ec:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00128ef:	83 ec 0c             	sub    esp,0xc
c00128f2:	6a 03                	push   0x3
c00128f4:	6a 01                	push   0x1
c00128f6:	52                   	push   edx
c00128f7:	50                   	push   eax
c00128f8:	53                   	push   ebx
c00128f9:	e8 f0 fd ff ff       	call   c00126ee <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00128fe:	83 c4 20             	add    esp,0x20
c0012901:	89 c2                	mov    edx,eax
c0012903:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012907:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001290a:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0012912:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c001291a:	7f 1c                	jg     c0012938 <VAS::VAS(bool)+0x96>
c001291c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012920:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0012923:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0012927:	c1 e2 02             	shl    edx,0x2
c001292a:	01 d0                	add    eax,edx
c001292c:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0012932:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0012936:	eb da                	jmp    c0012912 <VAS::VAS(bool)+0x70>
c0012938:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c0012940:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c0012948:	7f 7a                	jg     c00129c4 <VAS::VAS(bool)+0x122>
c001294a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001294e:	2d 00 02 00 00       	sub    eax,0x200
c0012953:	c1 e0 0c             	shl    eax,0xc
c0012956:	83 c8 03             	or     eax,0x3
c0012959:	89 c2                	mov    edx,eax
c001295b:	a1 e8 e6 02 c0       	mov    eax,ds:0xc002e6e8
c0012960:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012966:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c001296c:	83 e0 10             	and    eax,0x10
c001296f:	84 c0                	test   al,al
c0012971:	74 07                	je     c001297a <VAS::VAS(bool)+0xd8>
c0012973:	b8 00 01 00 00       	mov    eax,0x100
c0012978:	eb 05                	jmp    c001297f <VAS::VAS(bool)+0xdd>
c001297a:	b8 00 00 00 00       	mov    eax,0x0
c001297f:	09 d0                	or     eax,edx
c0012981:	89 c1                	mov    ecx,eax
c0012983:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012987:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001298a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001298e:	c1 e2 02             	shl    edx,0x2
c0012991:	01 d0                	add    eax,edx
c0012993:	89 ca                	mov    edx,ecx
c0012995:	89 10                	mov    DWORD PTR [eax],edx
c0012997:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001299b:	2d 40 03 00 00       	sub    eax,0x340
c00129a0:	83 f8 7f             	cmp    eax,0x7f
c00129a3:	77 16                	ja     c00129bb <VAS::VAS(bool)+0x119>
c00129a5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00129a9:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00129ac:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00129b0:	c1 e2 02             	shl    edx,0x2
c00129b3:	01 d0                	add    eax,edx
c00129b5:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c00129bb:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c00129bf:	e9 7c ff ff ff       	jmp    c0012940 <VAS::VAS(bool)+0x9e>
c00129c4:	a1 e8 e6 02 c0       	mov    eax,ds:0xc002e6e8
c00129c9:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00129cf:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c00129d5:	83 e0 10             	and    eax,0x10
c00129d8:	84 c0                	test   al,al
c00129da:	74 07                	je     c00129e3 <VAS::VAS(bool)+0x141>
c00129dc:	b8 03 41 00 00       	mov    eax,0x4103
c00129e1:	eb 05                	jmp    c00129e8 <VAS::VAS(bool)+0x146>
c00129e3:	b8 03 40 00 00       	mov    eax,0x4003
c00129e8:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00129ec:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00129ef:	81 c2 20 0c 00 00    	add    edx,0xc20
c00129f5:	89 02                	mov    DWORD PTR [edx],eax
c00129f7:	a1 e8 e6 02 c0       	mov    eax,ds:0xc002e6e8
c00129fc:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012a02:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0012a08:	83 ec 08             	sub    esp,0x8
c0012a0b:	50                   	push   eax
c0012a0c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012a10:	e8 bd fc ff ff       	call   c00126d2 <VAS::setCPUSpecific(unsigned long)>
c0012a15:	83 c4 10             	add    esp,0x10
c0012a18:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012a1c:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0012a1f:	a1 e8 e6 02 c0       	mov    eax,ds:0xc002e6e8
c0012a24:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012a2a:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0012a30:	83 e0 10             	and    eax,0x10
c0012a33:	84 c0                	test   al,al
c0012a35:	74 07                	je     c0012a3e <VAS::VAS(bool)+0x19c>
c0012a37:	b8 00 01 00 00       	mov    eax,0x100
c0012a3c:	eb 05                	jmp    c0012a43 <VAS::VAS(bool)+0x1a1>
c0012a3e:	b8 00 00 00 00       	mov    eax,0x0
c0012a43:	09 c2                	or     edx,eax
c0012a45:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012a49:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0012a4c:	05 fc 0f 00 00       	add    eax,0xffc
c0012a51:	83 ca 03             	or     edx,0x3
c0012a54:	89 10                	mov    DWORD PTR [eax],edx
c0012a56:	a1 e8 e6 02 c0       	mov    eax,ds:0xc002e6e8
c0012a5b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012a61:	83 ec 0c             	sub    esp,0xc
c0012a64:	50                   	push   eax
c0012a65:	e8 8c 1c 00 00       	call   c00146f6 <Device::getName()>
c0012a6a:	83 c4 10             	add    esp,0x10
c0012a6d:	83 ec 08             	sub    esp,0x8
c0012a70:	68 20 aa 02 c0       	push   0xc002aa20
c0012a75:	50                   	push   eax
c0012a76:	e8 45 de fe ff       	call   c00008c0 <strcmp>
c0012a7b:	83 c4 10             	add    esp,0x10
c0012a7e:	85 c0                	test   eax,eax
c0012a80:	0f 94 c0             	sete   al
c0012a83:	84 c0                	test   al,al
c0012a85:	74 70                	je     c0012af7 <VAS::VAS(bool)+0x255>
c0012a87:	e8 11 b4 00 00       	call   c001de9d <disableIRQs()>
c0012a8c:	a1 e8 e6 02 c0       	mov    eax,ds:0xc002e6e8
c0012a91:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012a97:	05 7c 09 00 00       	add    eax,0x97c
c0012a9c:	83 ec 0c             	sub    esp,0xc
c0012a9f:	50                   	push   eax
c0012aa0:	e8 bb c8 ff ff       	call   c000f360 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c0012aa5:	83 c4 10             	add    esp,0x10
c0012aa8:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012aad:	89 c3                	mov    ebx,eax
c0012aaf:	a1 e8 e6 02 c0       	mov    eax,ds:0xc002e6e8
c0012ab4:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012aba:	05 7c 09 00 00       	add    eax,0x97c
c0012abf:	83 ec 0c             	sub    esp,0xc
c0012ac2:	50                   	push   eax
c0012ac3:	e8 98 c8 ff ff       	call   c000f360 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c0012ac8:	83 c4 10             	add    esp,0x10
c0012acb:	83 ec 08             	sub    esp,0x8
c0012ace:	50                   	push   eax
c0012acf:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012ad3:	e8 9c f5 ff ff       	call   c0012074 <VAS::getPageTableEntry(unsigned long)>
c0012ad8:	83 c4 10             	add    esp,0x10
c0012adb:	8b 00                	mov    eax,DWORD PTR [eax]
c0012add:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012ae2:	6a 11                	push   0x11
c0012ae4:	53                   	push   ebx
c0012ae5:	50                   	push   eax
c0012ae6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012aea:	e8 0b f9 ff ff       	call   c00123fa <VAS::mapPage(unsigned long, unsigned long, int)>
c0012aef:	83 c4 10             	add    esp,0x10
c0012af2:	e8 b4 b3 00 00       	call   c001deab <enableIRQs()>
c0012af7:	90                   	nop
c0012af8:	83 c4 28             	add    esp,0x28
c0012afb:	5b                   	pop    ebx
c0012afc:	c3                   	ret    
c0012afd:	90                   	nop

c0012afe <VAS::evict(unsigned long)>:
c0012afe:	57                   	push   edi
c0012aff:	56                   	push   esi
c0012b00:	53                   	push   ebx
c0012b01:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0012b05:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0012b09:	e8 ac b3 00 00       	call   c001deba <lockScheduler()>
c0012b0e:	83 ec 08             	sub    esp,0x8
c0012b11:	56                   	push   esi
c0012b12:	68 28 a8 02 c0       	push   0xc002a828
c0012b17:	e8 c7 04 00 00       	call   c0012fe3 <Dbg::kprintf(char const*, ...)>
c0012b1c:	e8 43 f2 ff ff       	call   c0011d64 <Virt::allocateSwapfilePage()>
c0012b21:	83 c4 0c             	add    esp,0xc
c0012b24:	89 c3                	mov    ebx,eax
c0012b26:	50                   	push   eax
c0012b27:	50                   	push   eax
c0012b28:	68 2e aa 02 c0       	push   0xc002aa2e
c0012b2d:	e8 b1 04 00 00       	call   c0012fe3 <Dbg::kprintf(char const*, ...)>
c0012b32:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012b35:	e8 18 f2 ff ff       	call   c0011d52 <Virt::swapIDToSector(unsigned long)>
c0012b3a:	c1 e3 0b             	shl    ebx,0xb
c0012b3d:	89 34 24             	mov    DWORD PTR [esp],esi
c0012b40:	31 d2                	xor    edx,edx
c0012b42:	6a 08                	push   0x8
c0012b44:	52                   	push   edx
c0012b45:	50                   	push   eax
c0012b46:	0f be 05 98 d6 02 c0 	movsx  eax,BYTE PTR ds:0xc002d698
c0012b4d:	ff 34 85 fc eb 02 c0 	push   DWORD PTR [eax*4-0x3ffd1404]
c0012b54:	e8 17 3d 00 00       	call   c0016870 <LogicalDisk::write(unsigned long long, int, void*)>
c0012b59:	83 c4 18             	add    esp,0x18
c0012b5c:	56                   	push   esi
c0012b5d:	57                   	push   edi
c0012b5e:	e8 11 f5 ff ff       	call   c0012074 <VAS::getPageTableEntry(unsigned long)>
c0012b63:	89 c6                	mov    esi,eax
c0012b65:	8b 00                	mov    eax,DWORD PTR [eax]
c0012b67:	c1 e8 0c             	shr    eax,0xc
c0012b6a:	89 04 24             	mov    DWORD PTR [esp],eax
c0012b6d:	e8 8a d3 ff ff       	call   c000fefc <Phys::freePage(unsigned long)>
c0012b72:	8b 16                	mov    edx,DWORD PTR [esi]
c0012b74:	81 e2 fe 07 00 00    	and    edx,0x7fe
c0012b7a:	09 d3                	or     ebx,edx
c0012b7c:	89 1e                	mov    DWORD PTR [esi],ebx
c0012b7e:	c7 04 24 3e aa 02 c0 	mov    DWORD PTR [esp],0xc002aa3e
c0012b85:	e8 59 04 00 00       	call   c0012fe3 <Dbg::kprintf(char const*, ...)>
c0012b8a:	83 c4 10             	add    esp,0x10
c0012b8d:	5b                   	pop    ebx
c0012b8e:	5e                   	pop    esi
c0012b8f:	5f                   	pop    edi
c0012b90:	e9 27 b3 00 00       	jmp    c001debc <unlockScheduler()>
c0012b95:	90                   	nop

c0012b96 <VAS::tryLoadBackOffDisk(unsigned long)>:
c0012b96:	57                   	push   edi
c0012b97:	56                   	push   esi
c0012b98:	53                   	push   ebx
c0012b99:	83 ec 10             	sub    esp,0x10
c0012b9c:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0012ba0:	e8 15 b3 00 00       	call   c001deba <lockScheduler()>
c0012ba5:	83 ec 08             	sub    esp,0x8
c0012ba8:	56                   	push   esi
c0012ba9:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c0012baf:	68 48 a8 02 c0       	push   0xc002a848
c0012bb4:	e8 2a 04 00 00       	call   c0012fe3 <Dbg::kprintf(char const*, ...)>
c0012bb9:	58                   	pop    eax
c0012bba:	5a                   	pop    edx
c0012bbb:	56                   	push   esi
c0012bbc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012bc0:	e8 af f4 ff ff       	call   c0012074 <VAS::getPageTableEntry(unsigned long)>
c0012bc5:	59                   	pop    ecx
c0012bc6:	5b                   	pop    ebx
c0012bc7:	89 c3                	mov    ebx,eax
c0012bc9:	ff 30                	push   DWORD PTR [eax]
c0012bcb:	68 4e aa 02 c0       	push   0xc002aa4e
c0012bd0:	e8 0e 04 00 00       	call   c0012fe3 <Dbg::kprintf(char const*, ...)>
c0012bd5:	5f                   	pop    edi
c0012bd6:	58                   	pop    eax
c0012bd7:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012bd9:	c1 e8 0b             	shr    eax,0xb
c0012bdc:	50                   	push   eax
c0012bdd:	68 5f aa 02 c0       	push   0xc002aa5f
c0012be2:	e8 fc 03 00 00       	call   c0012fe3 <Dbg::kprintf(char const*, ...)>
c0012be7:	83 c4 10             	add    esp,0x10
c0012bea:	f7 03 00 04 00 00    	test   DWORD PTR [ebx],0x400
c0012bf0:	75 1e                	jne    c0012c10 <VAS::tryLoadBackOffDisk(unsigned long)+0x7a>
c0012bf2:	83 ec 0c             	sub    esp,0xc
c0012bf5:	68 d4 aa 02 c0       	push   0xc002aad4
c0012bfa:	e8 e4 03 00 00       	call   c0012fe3 <Dbg::kprintf(char const*, ...)>
c0012bff:	e8 b8 b2 00 00       	call   c001debc <unlockScheduler()>
c0012c04:	83 c4 10             	add    esp,0x10
c0012c07:	31 c0                	xor    eax,eax
c0012c09:	83 c4 10             	add    esp,0x10
c0012c0c:	5b                   	pop    ebx
c0012c0d:	5e                   	pop    esi
c0012c0e:	5f                   	pop    edi
c0012c0f:	c3                   	ret    
c0012c10:	83 ec 0c             	sub    esp,0xc
c0012c13:	68 7c aa 02 c0       	push   0xc002aa7c
c0012c18:	e8 c6 03 00 00       	call   c0012fe3 <Dbg::kprintf(char const*, ...)>
c0012c1d:	8b 3b                	mov    edi,DWORD PTR [ebx]
c0012c1f:	e8 62 d3 ff ff       	call   c000ff86 <Phys::allocatePage()>
c0012c24:	c1 ef 0b             	shr    edi,0xb
c0012c27:	5a                   	pop    edx
c0012c28:	59                   	pop    ecx
c0012c29:	50                   	push   eax
c0012c2a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0012c2e:	68 94 aa 02 c0       	push   0xc002aa94
c0012c33:	e8 ab 03 00 00       	call   c0012fe3 <Dbg::kprintf(char const*, ...)>
c0012c38:	58                   	pop    eax
c0012c39:	5a                   	pop    edx
c0012c3a:	ff 33                	push   DWORD PTR [ebx]
c0012c3c:	68 ae aa 02 c0       	push   0xc002aaae
c0012c41:	e8 9d 03 00 00       	call   c0012fe3 <Dbg::kprintf(char const*, ...)>
c0012c46:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012c4a:	8b 13                	mov    edx,DWORD PTR [ebx]
c0012c4c:	81 e2 ff 0f 00 00    	and    edx,0xfff
c0012c52:	09 d0                	or     eax,edx
c0012c54:	0d 01 08 00 00       	or     eax,0x801
c0012c59:	89 03                	mov    DWORD PTR [ebx],eax
c0012c5b:	59                   	pop    ecx
c0012c5c:	5b                   	pop    ebx
c0012c5d:	50                   	push   eax
c0012c5e:	68 c1 aa 02 c0       	push   0xc002aac1
c0012c63:	e8 7b 03 00 00       	call   c0012fe3 <Dbg::kprintf(char const*, ...)>
c0012c68:	89 3c 24             	mov    DWORD PTR [esp],edi
c0012c6b:	e8 e2 f0 ff ff       	call   c0011d52 <Virt::swapIDToSector(unsigned long)>
c0012c70:	89 34 24             	mov    DWORD PTR [esp],esi
c0012c73:	31 d2                	xor    edx,edx
c0012c75:	ff 35 8c d6 02 c0    	push   DWORD PTR ds:0xc002d68c
c0012c7b:	52                   	push   edx
c0012c7c:	50                   	push   eax
c0012c7d:	0f be 05 98 d6 02 c0 	movsx  eax,BYTE PTR ds:0xc002d698
c0012c84:	ff 34 85 fc eb 02 c0 	push   DWORD PTR [eax*4-0x3ffd1404]
c0012c8b:	e8 74 3b 00 00       	call   c0016804 <LogicalDisk::read(unsigned long long, int, void*)>
c0012c90:	83 c4 14             	add    esp,0x14
c0012c93:	57                   	push   edi
c0012c94:	e8 9b f0 ff ff       	call   c0011d34 <Virt::freeSwapfilePage(unsigned long)>
c0012c99:	89 3c 24             	mov    DWORD PTR [esp],edi
c0012c9c:	e8 b1 f0 ff ff       	call   c0011d52 <Virt::swapIDToSector(unsigned long)>
c0012ca1:	5e                   	pop    esi
c0012ca2:	5f                   	pop    edi
c0012ca3:	50                   	push   eax
c0012ca4:	68 74 a8 02 c0       	push   0xc002a874
c0012ca9:	e8 35 03 00 00       	call   c0012fe3 <Dbg::kprintf(char const*, ...)>
c0012cae:	e8 09 b2 00 00       	call   c001debc <unlockScheduler()>
c0012cb3:	83 c4 10             	add    esp,0x10
c0012cb6:	b0 01                	mov    al,0x1
c0012cb8:	83 c4 10             	add    esp,0x10
c0012cbb:	5b                   	pop    ebx
c0012cbc:	5e                   	pop    esi
c0012cbd:	5f                   	pop    edi
c0012cbe:	c3                   	ret    
c0012cbf:	90                   	nop

c0012cc0 <VAS::scanForEviction(int, int)>:
c0012cc0:	55                   	push   ebp
c0012cc1:	57                   	push   edi
c0012cc2:	56                   	push   esi
c0012cc3:	53                   	push   ebx
c0012cc4:	83 ec 1c             	sub    esp,0x1c
c0012cc7:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0012ccb:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0012ccf:	85 c9                	test   ecx,ecx
c0012cd1:	75 08                	jne    c0012cdb <VAS::scanForEviction(int, int)+0x1b>
c0012cd3:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c0012cdb:	83 ec 0c             	sub    esp,0xc
c0012cde:	bb 00 00 40 00       	mov    ebx,0x400000
c0012ce3:	68 94 a8 02 c0       	push   0xc002a894
c0012ce8:	31 ff                	xor    edi,edi
c0012cea:	e8 f4 02 00 00       	call   c0012fe3 <Dbg::kprintf(char const*, ...)>
c0012cef:	83 c4 10             	add    esp,0x10
c0012cf2:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0012cfa:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0012d02:	eb 17                	jmp    c0012d1b <VAS::scanForEviction(int, int)+0x5b>
c0012d04:	83 44 24 0c 04       	add    DWORD PTR [esp+0xc],0x4
c0012d09:	81 c3 00 00 40 00    	add    ebx,0x400000
c0012d0f:	81 fb 00 00 40 c0    	cmp    ebx,0xc0400000
c0012d15:	0f 84 88 00 00 00    	je     c0012da3 <VAS::scanForEviction(int, int)+0xe3>
c0012d1b:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c0012d1e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0012d22:	f6 04 08 01          	test   BYTE PTR [eax+ecx*1],0x1
c0012d26:	74 dc                	je     c0012d04 <VAS::scanForEviction(int, int)+0x44>
c0012d28:	8d ab 00 00 c0 ff    	lea    ebp,[ebx-0x400000]
c0012d2e:	eb 0a                	jmp    c0012d3a <VAS::scanForEviction(int, int)+0x7a>
c0012d30:	81 c5 00 10 00 00    	add    ebp,0x1000
c0012d36:	39 eb                	cmp    ebx,ebp
c0012d38:	74 ca                	je     c0012d04 <VAS::scanForEviction(int, int)+0x44>
c0012d3a:	83 ec 08             	sub    esp,0x8
c0012d3d:	55                   	push   ebp
c0012d3e:	56                   	push   esi
c0012d3f:	e8 30 f3 ff ff       	call   c0012074 <VAS::getPageTableEntry(unsigned long)>
c0012d44:	83 c4 10             	add    esp,0x10
c0012d47:	8b 00                	mov    eax,DWORD PTR [eax]
c0012d49:	89 c2                	mov    edx,eax
c0012d4b:	81 e2 00 0c 00 00    	and    edx,0xc00
c0012d51:	81 fa 00 0c 00 00    	cmp    edx,0xc00
c0012d57:	75 d7                	jne    c0012d30 <VAS::scanForEviction(int, int)+0x70>
c0012d59:	a8 01                	test   al,0x1
c0012d5b:	74 4e                	je     c0012dab <VAS::scanForEviction(int, int)+0xeb>
c0012d5d:	83 ec 08             	sub    esp,0x8
c0012d60:	55                   	push   ebp
c0012d61:	68 b8 a8 02 c0       	push   0xc002a8b8
c0012d66:	e8 78 02 00 00       	call   c0012fe3 <Dbg::kprintf(char const*, ...)>
c0012d6b:	89 f8                	mov    eax,edi
c0012d6d:	99                   	cdq    
c0012d6e:	f7 7c 24 44          	idiv   DWORD PTR [esp+0x44]
c0012d72:	83 c4 10             	add    esp,0x10
c0012d75:	85 d2                	test   edx,edx
c0012d77:	74 03                	je     c0012d7c <VAS::scanForEviction(int, int)+0xbc>
c0012d79:	47                   	inc    edi
c0012d7a:	eb b4                	jmp    c0012d30 <VAS::scanForEviction(int, int)+0x70>
c0012d7c:	83 ec 0c             	sub    esp,0xc
c0012d7f:	68 ed aa 02 c0       	push   0xc002aaed
c0012d84:	e8 5a 02 00 00       	call   c0012fe3 <Dbg::kprintf(char const*, ...)>
c0012d89:	58                   	pop    eax
c0012d8a:	5a                   	pop    edx
c0012d8b:	55                   	push   ebp
c0012d8c:	56                   	push   esi
c0012d8d:	e8 6c fd ff ff       	call   c0012afe <VAS::evict(unsigned long)>
c0012d92:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0012d96:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012d9a:	83 c4 10             	add    esp,0x10
c0012d9d:	3b 44 24 38          	cmp    eax,DWORD PTR [esp+0x38]
c0012da1:	75 d6                	jne    c0012d79 <VAS::scanForEviction(int, int)+0xb9>
c0012da3:	83 c4 1c             	add    esp,0x1c
c0012da6:	5b                   	pop    ebx
c0012da7:	5e                   	pop    esi
c0012da8:	5f                   	pop    edi
c0012da9:	5d                   	pop    ebp
c0012daa:	c3                   	ret    
c0012dab:	83 ec 08             	sub    esp,0x8
c0012dae:	55                   	push   ebp
c0012daf:	68 e4 a8 02 c0       	push   0xc002a8e4
c0012db4:	e8 2a 02 00 00       	call   c0012fe3 <Dbg::kprintf(char const*, ...)>
c0012db9:	83 c4 10             	add    esp,0x10
c0012dbc:	e9 6f ff ff ff       	jmp    c0012d30 <VAS::scanForEviction(int, int)+0x70>

c0012dc1 <mapVASFirstTime>:
c0012dc1:	55                   	push   ebp
c0012dc2:	57                   	push   edi
c0012dc3:	56                   	push   esi
c0012dc4:	53                   	push   ebx
c0012dc5:	83 ec 0c             	sub    esp,0xc
c0012dc8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012dcd:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0012dd0:	4a                   	dec    edx
c0012dd1:	0f 84 8e 00 00 00    	je     c0012e65 <mapVASFirstTime+0xa4>
c0012dd7:	8b 50 40             	mov    edx,DWORD PTR [eax+0x40]
c0012dda:	8b 68 3c             	mov    ebp,DWORD PTR [eax+0x3c]
c0012ddd:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c0012de2:	c1 e5 15             	shl    ebp,0x15
c0012de5:	be 00 90 e7 01       	mov    esi,0x1e79000
c0012dea:	8b ba 32 05 00 00    	mov    edi,DWORD PTR [edx+0x532]
c0012df0:	29 eb                	sub    ebx,ebp
c0012df2:	29 ee                	sub    esi,ebp
c0012df4:	e8 8d d1 ff ff       	call   c000ff86 <Phys::allocatePage()>
c0012df9:	83 ec 0c             	sub    esp,0xc
c0012dfc:	68 03 04 00 00       	push   0x403
c0012e01:	6a 01                	push   0x1
c0012e03:	53                   	push   ebx
c0012e04:	81 eb 00 10 00 00    	sub    ebx,0x1000
c0012e0a:	50                   	push   eax
c0012e0b:	57                   	push   edi
c0012e0c:	e8 dd f8 ff ff       	call   c00126ee <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012e11:	83 c4 20             	add    esp,0x20
c0012e14:	39 f3                	cmp    ebx,esi
c0012e16:	75 dc                	jne    c0012df4 <mapVASFirstTime+0x33>
c0012e18:	be 00 f0 ff 01       	mov    esi,0x1fff000
c0012e1d:	b8 00 f0 fd 01       	mov    eax,0x1fdf000
c0012e22:	29 ee                	sub    esi,ebp
c0012e24:	29 e8                	sub    eax,ebp
c0012e26:	89 c5                	mov    ebp,eax
c0012e28:	80 7f 01 01          	cmp    BYTE PTR [edi+0x1],0x1
c0012e2c:	19 db                	sbb    ebx,ebx
c0012e2e:	e8 53 d1 ff ff       	call   c000ff86 <Phys::allocatePage()>
c0012e33:	83 e3 04             	and    ebx,0x4
c0012e36:	83 ec 0c             	sub    esp,0xc
c0012e39:	81 c3 03 04 00 00    	add    ebx,0x403
c0012e3f:	53                   	push   ebx
c0012e40:	6a 01                	push   0x1
c0012e42:	56                   	push   esi
c0012e43:	81 ee 00 10 00 00    	sub    esi,0x1000
c0012e49:	50                   	push   eax
c0012e4a:	57                   	push   edi
c0012e4b:	e8 9e f8 ff ff       	call   c00126ee <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012e50:	83 c4 20             	add    esp,0x20
c0012e53:	39 f5                	cmp    ebp,esi
c0012e55:	75 d1                	jne    c0012e28 <mapVASFirstTime+0x67>
c0012e57:	0f 20 d8             	mov    eax,cr3
c0012e5a:	0f 22 d8             	mov    cr3,eax
c0012e5d:	83 c4 0c             	add    esp,0xc
c0012e60:	5b                   	pop    ebx
c0012e61:	5e                   	pop    esi
c0012e62:	5f                   	pop    edi
c0012e63:	5d                   	pop    ebp
c0012e64:	c3                   	ret    
c0012e65:	83 ec 0c             	sub    esp,0xc
c0012e68:	68 f8 aa 02 c0       	push   0xc002aaf8
c0012e6d:	e8 71 01 00 00       	call   c0012fe3 <Dbg::kprintf(char const*, ...)>
c0012e72:	83 c4 10             	add    esp,0x10
c0012e75:	83 c4 0c             	add    esp,0xc
c0012e78:	5b                   	pop    ebx
c0012e79:	5e                   	pop    esi
c0012e7a:	5f                   	pop    edi
c0012e7b:	5d                   	pop    ebp
c0012e7c:	c3                   	ret    

c0012e7d <__cxa_atexit>:
c0012e7d:	31 c0                	xor    eax,eax
c0012e7f:	c3                   	ret    

c0012e80 <__cxa_finalize>:
c0012e80:	c3                   	ret    

c0012e81 <__stack_chk_fail>:
c0012e81:	55                   	push   ebp
c0012e82:	89 e5                	mov    ebp,esp
c0012e84:	83 ec 14             	sub    esp,0x14
c0012e87:	68 11 ab 02 c0       	push   0xc002ab11
c0012e8c:	e8 52 01 00 00       	call   c0012fe3 <Dbg::kprintf(char const*, ...)>
c0012e91:	58                   	pop    eax
c0012e92:	5a                   	pop    edx
c0012e93:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0012e96:	68 61 ab 02 c0       	push   0xc002ab61
c0012e9b:	e8 43 01 00 00       	call   c0012fe3 <Dbg::kprintf(char const*, ...)>
c0012ea0:	59                   	pop    ecx
c0012ea1:	58                   	pop    eax
c0012ea2:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012ea5:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012ea8:	68 61 ab 02 c0       	push   0xc002ab61
c0012ead:	e8 31 01 00 00       	call   c0012fe3 <Dbg::kprintf(char const*, ...)>
c0012eb2:	5a                   	pop    edx
c0012eb3:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012eb6:	59                   	pop    ecx
c0012eb7:	8b 00                	mov    eax,DWORD PTR [eax]
c0012eb9:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012ebc:	68 61 ab 02 c0       	push   0xc002ab61
c0012ec1:	e8 1d 01 00 00       	call   c0012fe3 <Dbg::kprintf(char const*, ...)>
c0012ec6:	5a                   	pop    edx
c0012ec7:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012eca:	59                   	pop    ecx
c0012ecb:	8b 00                	mov    eax,DWORD PTR [eax]
c0012ecd:	8b 00                	mov    eax,DWORD PTR [eax]
c0012ecf:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012ed2:	68 61 ab 02 c0       	push   0xc002ab61
c0012ed7:	e8 07 01 00 00       	call   c0012fe3 <Dbg::kprintf(char const*, ...)>
c0012edc:	c7 04 24 69 ab 02 c0 	mov    DWORD PTR [esp],0xc002ab69
c0012ee3:	e8 ad 77 00 00       	call   c001a695 <Krnl::panic(char const*)>
c0012ee8:	83 c4 10             	add    esp,0x10
c0012eeb:	c9                   	leave  
c0012eec:	c3                   	ret    

c0012eed <__cxa_pure_virtual>:
c0012eed:	83 ec 18             	sub    esp,0x18
c0012ef0:	68 81 ab 02 c0       	push   0xc002ab81
c0012ef5:	e8 9b 77 00 00       	call   c001a695 <Krnl::panic(char const*)>
c0012efa:	83 c4 1c             	add    esp,0x1c
c0012efd:	c3                   	ret    

c0012efe <operator new[](unsigned long)>:
c0012efe:	e9 e1 c9 ff ff       	jmp    c000f8e4 <malloc>

c0012f03 <operator delete(void*, unsigned long)>:
c0012f03:	e9 fc c9 ff ff       	jmp    c000f904 <rfree>

c0012f08 <operator delete[](void*)>:
c0012f08:	e9 f7 c9 ff ff       	jmp    c000f904 <rfree>

c0012f0d <operator delete[](void*, unsigned long)>:
c0012f0d:	e9 f2 c9 ff ff       	jmp    c000f904 <rfree>

c0012f12 <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c0012f12:	57                   	push   edi
c0012f13:	b9 3f 00 00 00       	mov    ecx,0x3f
c0012f18:	56                   	push   esi
c0012f19:	be 94 ab 02 c0       	mov    esi,0xc002ab94
c0012f1e:	53                   	push   ebx
c0012f1f:	83 ec 40             	sub    esp,0x40
c0012f22:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0012f26:	8d 7c 24 01          	lea    edi,[esp+0x1]
c0012f2a:	fc                   	cld    
c0012f2b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012f2d:	8b 4c 24 58          	mov    ecx,DWORD PTR [esp+0x58]
c0012f31:	83 f9 3e             	cmp    ecx,0x3e
c0012f34:	7e 05                	jle    c0012f3b <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x29>
c0012f36:	b9 3e 00 00 00       	mov    ecx,0x3e
c0012f3b:	89 df                	mov    edi,ebx
c0012f3d:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0012f41:	eb 02                	jmp    c0012f45 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x33>
c0012f43:	89 c7                	mov    edi,eax
c0012f45:	31 d2                	xor    edx,edx
c0012f47:	46                   	inc    esi
c0012f48:	89 f8                	mov    eax,edi
c0012f4a:	f7 f1                	div    ecx
c0012f4c:	39 cf                	cmp    edi,ecx
c0012f4e:	73 f3                	jae    c0012f43 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x31>
c0012f50:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0012f53:	eb 02                	jmp    c0012f57 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x45>
c0012f55:	89 c3                	mov    ebx,eax
c0012f57:	31 d2                	xor    edx,edx
c0012f59:	4e                   	dec    esi
c0012f5a:	89 d8                	mov    eax,ebx
c0012f5c:	f7 f1                	div    ecx
c0012f5e:	39 cb                	cmp    ebx,ecx
c0012f60:	8a 54 14 01          	mov    dl,BYTE PTR [esp+edx*1+0x1]
c0012f64:	88 16                	mov    BYTE PTR [esi],dl
c0012f66:	73 ed                	jae    c0012f55 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x43>
c0012f68:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0012f6c:	83 c4 40             	add    esp,0x40
c0012f6f:	5b                   	pop    ebx
c0012f70:	5e                   	pop    esi
c0012f71:	5f                   	pop    edi
c0012f72:	c3                   	ret    

c0012f73 <Dbg::logc(char)>:
c0012f73:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012f77:	ba fd 03 00 00       	mov    edx,0x3fd
c0012f7c:	ec                   	in     al,dx
c0012f7d:	a8 20                	test   al,0x20
c0012f7f:	74 fb                	je     c0012f7c <Dbg::logc(char)+0x9>
c0012f81:	ba f8 03 00 00       	mov    edx,0x3f8
c0012f86:	88 c8                	mov    al,cl
c0012f88:	ee                   	out    dx,al
c0012f89:	c3                   	ret    

c0012f8a <Dbg::logs(char*)>:
c0012f8a:	53                   	push   ebx
c0012f8b:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0012f8f:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0012f92:	84 c0                	test   al,al
c0012f94:	74 0f                	je     c0012fa5 <Dbg::logs(char*)+0x1b>
c0012f96:	50                   	push   eax
c0012f97:	43                   	inc    ebx
c0012f98:	e8 d6 ff ff ff       	call   c0012f73 <Dbg::logc(char)>
c0012f9d:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0012fa0:	5a                   	pop    edx
c0012fa1:	84 c0                	test   al,al
c0012fa3:	75 f1                	jne    c0012f96 <Dbg::logs(char*)+0xc>
c0012fa5:	5b                   	pop    ebx
c0012fa6:	c3                   	ret    

c0012fa7 <Dbg::logWriteInt(unsigned int)>:
c0012fa7:	83 ec 10             	sub    esp,0x10
c0012faa:	6a 0a                	push   0xa
c0012fac:	8d 44 24 08          	lea    eax,[esp+0x8]
c0012fb0:	50                   	push   eax
c0012fb1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012fb5:	e8 58 ff ff ff       	call   c0012f12 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0012fba:	50                   	push   eax
c0012fbb:	e8 ca ff ff ff       	call   c0012f8a <Dbg::logs(char*)>
c0012fc0:	83 c4 20             	add    esp,0x20
c0012fc3:	c3                   	ret    

c0012fc4 <Dbg::logWriteIntBase(unsigned int, int)>:
c0012fc4:	83 ec 10             	sub    esp,0x10
c0012fc7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012fcb:	8d 44 24 08          	lea    eax,[esp+0x8]
c0012fcf:	50                   	push   eax
c0012fd0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012fd4:	e8 39 ff ff ff       	call   c0012f12 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0012fd9:	50                   	push   eax
c0012fda:	e8 ab ff ff ff       	call   c0012f8a <Dbg::logs(char*)>
c0012fdf:	83 c4 20             	add    esp,0x20
c0012fe2:	c3                   	ret    

c0012fe3 <Dbg::kprintf(char const*, ...)>:
c0012fe3:	55                   	push   ebp
c0012fe4:	57                   	push   edi
c0012fe5:	56                   	push   esi
c0012fe6:	53                   	push   ebx
c0012fe7:	83 ec 0c             	sub    esp,0xc
c0012fea:	8d 44 24 24          	lea    eax,[esp+0x24]
c0012fee:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0012ff2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012ff6:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0012ff9:	84 c0                	test   al,al
c0012ffb:	74 4a                	je     c0013047 <Dbg::kprintf(char const*, ...)+0x64>
c0012ffd:	31 db                	xor    ebx,ebx
c0012fff:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0013002:	3c 25                	cmp    al,0x25
c0013004:	8d 3c 2e             	lea    edi,[esi+ebp*1]
c0013007:	0f 85 e4 00 00 00    	jne    c00130f1 <Dbg::kprintf(char const*, ...)+0x10e>
c001300d:	83 c3 02             	add    ebx,0x2
c0013010:	8a 07                	mov    al,BYTE PTR [edi]
c0013012:	8d 2c 1e             	lea    ebp,[esi+ebx*1]
c0013015:	83 e8 25             	sub    eax,0x25
c0013018:	3c 53                	cmp    al,0x53
c001301a:	0f 87 ba 00 00 00    	ja     c00130da <Dbg::kprintf(char const*, ...)+0xf7>
c0013020:	0f b6 c0             	movzx  eax,al
c0013023:	ff 24 85 d4 ab 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd542c]
c001302a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001302e:	89 c8                	mov    eax,ecx
c0013030:	83 c1 04             	add    ecx,0x4
c0013033:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0013037:	ff 30                	push   DWORD PTR [eax]
c0013039:	e8 4c ff ff ff       	call   c0012f8a <Dbg::logs(char*)>
c001303e:	58                   	pop    eax
c001303f:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c0013043:	84 c0                	test   al,al
c0013045:	75 b8                	jne    c0012fff <Dbg::kprintf(char const*, ...)+0x1c>
c0013047:	83 c4 0c             	add    esp,0xc
c001304a:	5b                   	pop    ebx
c001304b:	5e                   	pop    esi
c001304c:	5f                   	pop    edi
c001304d:	5d                   	pop    ebp
c001304e:	c3                   	ret    
c001304f:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0013053:	89 d0                	mov    eax,edx
c0013055:	83 c2 04             	add    edx,0x4
c0013058:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001305c:	ff 30                	push   DWORD PTR [eax]
c001305e:	e8 44 ff ff ff       	call   c0012fa7 <Dbg::logWriteInt(unsigned int)>
c0013063:	58                   	pop    eax
c0013064:	eb d9                	jmp    c001303f <Dbg::kprintf(char const*, ...)+0x5c>
c0013066:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001306a:	89 d0                	mov    eax,edx
c001306c:	83 c2 04             	add    edx,0x4
c001306f:	0f be 00             	movsx  eax,BYTE PTR [eax]
c0013072:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0013076:	50                   	push   eax
c0013077:	e8 f7 fe ff ff       	call   c0012f73 <Dbg::logc(char)>
c001307c:	58                   	pop    eax
c001307d:	eb c0                	jmp    c001303f <Dbg::kprintf(char const*, ...)+0x5c>
c001307f:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0013083:	89 c8                	mov    eax,ecx
c0013085:	83 c1 04             	add    ecx,0x4
c0013088:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c001308c:	ff 30                	push   DWORD PTR [eax]
c001308e:	e8 14 ff ff ff       	call   c0012fa7 <Dbg::logWriteInt(unsigned int)>
c0013093:	5f                   	pop    edi
c0013094:	eb a9                	jmp    c001303f <Dbg::kprintf(char const*, ...)+0x5c>
c0013096:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001309a:	89 c8                	mov    eax,ecx
c001309c:	83 c1 04             	add    ecx,0x4
c001309f:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c00130a3:	6a 10                	push   0x10
c00130a5:	ff 30                	push   DWORD PTR [eax]
c00130a7:	e8 18 ff ff ff       	call   c0012fc4 <Dbg::logWriteIntBase(unsigned int, int)>
c00130ac:	59                   	pop    ecx
c00130ad:	5f                   	pop    edi
c00130ae:	eb 8f                	jmp    c001303f <Dbg::kprintf(char const*, ...)+0x5c>
c00130b0:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00130b4:	89 d0                	mov    eax,edx
c00130b6:	83 c2 08             	add    edx,0x8
c00130b9:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00130bd:	6a 10                	push   0x10
c00130bf:	ff 30                	push   DWORD PTR [eax]
c00130c1:	e8 fe fe ff ff       	call   c0012fc4 <Dbg::logWriteIntBase(unsigned int, int)>
c00130c6:	58                   	pop    eax
c00130c7:	5a                   	pop    edx
c00130c8:	e9 72 ff ff ff       	jmp    c001303f <Dbg::kprintf(char const*, ...)+0x5c>
c00130cd:	6a 25                	push   0x25
c00130cf:	e8 9f fe ff ff       	call   c0012f73 <Dbg::logc(char)>
c00130d4:	58                   	pop    eax
c00130d5:	e9 65 ff ff ff       	jmp    c001303f <Dbg::kprintf(char const*, ...)+0x5c>
c00130da:	6a 25                	push   0x25
c00130dc:	e8 92 fe ff ff       	call   c0012f73 <Dbg::logc(char)>
c00130e1:	0f be 07             	movsx  eax,BYTE PTR [edi]
c00130e4:	50                   	push   eax
c00130e5:	e8 89 fe ff ff       	call   c0012f73 <Dbg::logc(char)>
c00130ea:	5a                   	pop    edx
c00130eb:	59                   	pop    ecx
c00130ec:	e9 4e ff ff ff       	jmp    c001303f <Dbg::kprintf(char const*, ...)+0x5c>
c00130f1:	50                   	push   eax
c00130f2:	89 eb                	mov    ebx,ebp
c00130f4:	e8 7a fe ff ff       	call   c0012f73 <Dbg::logc(char)>
c00130f9:	89 fd                	mov    ebp,edi
c00130fb:	58                   	pop    eax
c00130fc:	e9 3e ff ff ff       	jmp    c001303f <Dbg::kprintf(char const*, ...)+0x5c>
c0013101:	90                   	nop

c0013102 <File::read(unsigned long long, void*, int*)>:
c0013102:	53                   	push   ebx
c0013103:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0013107:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001310b:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0013112:	3c 19                	cmp    al,0x19
c0013114:	77 35                	ja     c001314b <File::read(unsigned long long, void*, int*)+0x49>
c0013116:	8b 04 85 00 ed 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1300]
c001311d:	85 c0                	test   eax,eax
c001311f:	74 2a                	je     c001314b <File::read(unsigned long long, void*, int*)+0x49>
c0013121:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0013127:	85 c0                	test   eax,eax
c0013129:	74 20                	je     c001314b <File::read(unsigned long long, void*, int*)+0x49>
c001312b:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001312f:	74 21                	je     c0013152 <File::read(unsigned long long, void*, int*)+0x50>
c0013131:	8b 08                	mov    ecx,DWORD PTR [eax]
c0013133:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0013137:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c001313d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013141:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0013145:	5b                   	pop    ebx
c0013146:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c0013149:	ff e0                	jmp    eax
c001314b:	b8 0b 00 00 00       	mov    eax,0xb
c0013150:	eb 05                	jmp    c0013157 <File::read(unsigned long long, void*, int*)+0x55>
c0013152:	b8 05 00 00 00       	mov    eax,0x5
c0013157:	5b                   	pop    ebx
c0013158:	c3                   	ret    
c0013159:	90                   	nop

c001315a <File::write(unsigned long long, void*, int*)>:
c001315a:	53                   	push   ebx
c001315b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001315f:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0013163:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c001316a:	3c 19                	cmp    al,0x19
c001316c:	77 35                	ja     c00131a3 <File::write(unsigned long long, void*, int*)+0x49>
c001316e:	8b 04 85 00 ed 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1300]
c0013175:	85 c0                	test   eax,eax
c0013177:	74 2a                	je     c00131a3 <File::write(unsigned long long, void*, int*)+0x49>
c0013179:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c001317f:	85 c0                	test   eax,eax
c0013181:	74 20                	je     c00131a3 <File::write(unsigned long long, void*, int*)+0x49>
c0013183:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013187:	74 21                	je     c00131aa <File::write(unsigned long long, void*, int*)+0x50>
c0013189:	8b 08                	mov    ecx,DWORD PTR [eax]
c001318b:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001318f:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0013195:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013199:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001319d:	5b                   	pop    ebx
c001319e:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c00131a1:	ff e0                	jmp    eax
c00131a3:	b8 0b 00 00 00       	mov    eax,0xb
c00131a8:	eb 05                	jmp    c00131af <File::write(unsigned long long, void*, int*)+0x55>
c00131aa:	b8 05 00 00 00       	mov    eax,0x5
c00131af:	5b                   	pop    ebx
c00131b0:	c3                   	ret    
c00131b1:	90                   	nop

c00131b2 <Directory::read(unsigned long long, void*, int*)>:
c00131b2:	53                   	push   ebx
c00131b3:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00131b7:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00131bb:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c00131c2:	3c 19                	cmp    al,0x19
c00131c4:	77 35                	ja     c00131fb <Directory::read(unsigned long long, void*, int*)+0x49>
c00131c6:	8b 04 85 00 ed 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1300]
c00131cd:	85 c0                	test   eax,eax
c00131cf:	74 2a                	je     c00131fb <Directory::read(unsigned long long, void*, int*)+0x49>
c00131d1:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c00131d7:	85 c0                	test   eax,eax
c00131d9:	74 20                	je     c00131fb <Directory::read(unsigned long long, void*, int*)+0x49>
c00131db:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00131df:	74 21                	je     c0013202 <Directory::read(unsigned long long, void*, int*)+0x50>
c00131e1:	8b 08                	mov    ecx,DWORD PTR [eax]
c00131e3:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00131e7:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c00131ed:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00131f1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00131f5:	5b                   	pop    ebx
c00131f6:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c00131f9:	ff e0                	jmp    eax
c00131fb:	b8 0b 00 00 00       	mov    eax,0xb
c0013200:	eb 05                	jmp    c0013207 <Directory::read(unsigned long long, void*, int*)+0x55>
c0013202:	b8 05 00 00 00       	mov    eax,0x5
c0013207:	5b                   	pop    ebx
c0013208:	c3                   	ret    
c0013209:	90                   	nop

c001320a <Directory::write(unsigned long long, void*, int*)>:
c001320a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001320e:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c0013215:	b8 0b 00 00 00       	mov    eax,0xb
c001321a:	80 fa 19             	cmp    dl,0x19
c001321d:	77 18                	ja     c0013237 <Directory::write(unsigned long long, void*, int*)+0x2d>
c001321f:	8b 14 95 00 ed 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1300]
c0013226:	85 d2                	test   edx,edx
c0013228:	74 0d                	je     c0013237 <Directory::write(unsigned long long, void*, int*)+0x2d>
c001322a:	83 ba 70 01 00 00 01 	cmp    DWORD PTR [edx+0x170],0x1
c0013231:	19 c0                	sbb    eax,eax
c0013233:	83 e0 0a             	and    eax,0xa
c0013236:	40                   	inc    eax
c0013237:	c3                   	ret    

c0013238 <File::isAtty()>:
c0013238:	31 c0                	xor    eax,eax
c001323a:	c3                   	ret    
c001323b:	90                   	nop

c001323c <Directory::isAtty()>:
c001323c:	31 c0                	xor    eax,eax
c001323e:	c3                   	ret    
c001323f:	90                   	nop

c0013240 <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0013240:	b8 0a 00 00 00       	mov    eax,0xa
c0013245:	c3                   	ret    

c0013246 <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c0013246:	b8 0a 00 00 00       	mov    eax,0xa
c001324b:	c3                   	ret    

c001324c <File::~File()>:
c001324c:	83 ec 0c             	sub    esp,0xc
c001324f:	ba 90 ad 02 c0       	mov    edx,0xc002ad90
c0013254:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013258:	89 10                	mov    DWORD PTR [eax],edx
c001325a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001325e:	83 ec 0c             	sub    esp,0xc
c0013261:	50                   	push   eax
c0013262:	e8 5b e7 ff ff       	call   c00119c2 <UnixFile::~UnixFile()>
c0013267:	83 c4 10             	add    esp,0x10
c001326a:	90                   	nop
c001326b:	83 c4 0c             	add    esp,0xc
c001326e:	c3                   	ret    
c001326f:	90                   	nop

c0013270 <File::~File()>:
c0013270:	83 ec 0c             	sub    esp,0xc
c0013273:	83 ec 0c             	sub    esp,0xc
c0013276:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001327a:	e8 cd ff ff ff       	call   c001324c <File::~File()>
c001327f:	83 c4 10             	add    esp,0x10
c0013282:	83 ec 08             	sub    esp,0x8
c0013285:	68 14 01 00 00       	push   0x114
c001328a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001328e:	e8 70 fc ff ff       	call   c0012f03 <operator delete(void*, unsigned long)>
c0013293:	83 c4 10             	add    esp,0x10
c0013296:	83 c4 0c             	add    esp,0xc
c0013299:	c3                   	ret    

c001329a <Directory::~Directory()>:
c001329a:	83 ec 0c             	sub    esp,0xc
c001329d:	ba ac ad 02 c0       	mov    edx,0xc002adac
c00132a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00132a6:	89 10                	mov    DWORD PTR [eax],edx
c00132a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00132ac:	83 ec 0c             	sub    esp,0xc
c00132af:	50                   	push   eax
c00132b0:	e8 0d e7 ff ff       	call   c00119c2 <UnixFile::~UnixFile()>
c00132b5:	83 c4 10             	add    esp,0x10
c00132b8:	90                   	nop
c00132b9:	83 c4 0c             	add    esp,0xc
c00132bc:	c3                   	ret    
c00132bd:	90                   	nop

c00132be <Directory::~Directory()>:
c00132be:	83 ec 0c             	sub    esp,0xc
c00132c1:	83 ec 0c             	sub    esp,0xc
c00132c4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00132c8:	e8 cd ff ff ff       	call   c001329a <Directory::~Directory()>
c00132cd:	83 c4 10             	add    esp,0x10
c00132d0:	83 ec 08             	sub    esp,0x8
c00132d3:	68 14 01 00 00       	push   0x114
c00132d8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00132dc:	e8 22 fc ff ff       	call   c0012f03 <operator delete(void*, unsigned long)>
c00132e1:	83 c4 10             	add    esp,0x10
c00132e4:	83 c4 0c             	add    esp,0xc
c00132e7:	c3                   	ret    

c00132e8 <Filesystem::Filesystem()>:
c00132e8:	ba 2c ad 02 c0       	mov    edx,0xc002ad2c
c00132ed:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00132f1:	89 10                	mov    DWORD PTR [eax],edx
c00132f3:	8b 15 6c e8 02 c0    	mov    edx,DWORD PTR ds:0xc002e86c
c00132f9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00132fd:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0013300:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013304:	a3 6c e8 02 c0       	mov    ds:0xc002e86c,eax
c0013309:	90                   	nop
c001330a:	c3                   	ret    
c001330b:	90                   	nop

c001330c <Filesystem::~Filesystem()>:
c001330c:	ba 2c ad 02 c0       	mov    edx,0xc002ad2c
c0013311:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013315:	89 10                	mov    DWORD PTR [eax],edx
c0013317:	90                   	nop
c0013318:	c3                   	ret    
c0013319:	90                   	nop

c001331a <Filesystem::~Filesystem()>:
c001331a:	83 ec 0c             	sub    esp,0xc
c001331d:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0013321:	e8 e6 ff ff ff       	call   c001330c <Filesystem::~Filesystem()>
c0013326:	83 c4 04             	add    esp,0x4
c0013329:	83 ec 08             	sub    esp,0x8
c001332c:	6a 08                	push   0x8
c001332e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013332:	e8 cc fb ff ff       	call   c0012f03 <operator delete(void*, unsigned long)>
c0013337:	83 c4 10             	add    esp,0x10
c001333a:	83 c4 0c             	add    esp,0xc
c001333d:	c3                   	ret    

c001333e <Fs::getcwd(Process*, char*, int)>:
c001333e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0013342:	31 c0                	xor    eax,eax
c0013344:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0013347:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c001334b:	7d 15                	jge    c0013362 <Fs::getcwd(Process*, char*, int)+0x24>
c001334d:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0013351:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c0013358:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c001335b:	84 c9                	test   cl,cl
c001335d:	74 06                	je     c0013365 <Fs::getcwd(Process*, char*, int)+0x27>
c001335f:	40                   	inc    eax
c0013360:	eb e2                	jmp    c0013344 <Fs::getcwd(Process*, char*, int)+0x6>
c0013362:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c0013365:	31 c0                	xor    eax,eax
c0013367:	c3                   	ret    

c0013368 <Fs::initVFS()>:
c0013368:	83 ec 18             	sub    esp,0x18
c001336b:	6a 08                	push   0x8
c001336d:	e8 72 c5 ff ff       	call   c000f8e4 <malloc>
c0013372:	89 04 24             	mov    DWORD PTR [esp],eax
c0013375:	e8 b4 dc 00 00       	call   c002102e <FAT::FAT()>
c001337a:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0013381:	e8 5e c5 ff ff       	call   c000f8e4 <malloc>
c0013386:	89 04 24             	mov    DWORD PTR [esp],eax
c0013389:	e8 f8 ee 00 00       	call   c0022286 <ISO9660::ISO9660()>
c001338e:	83 c4 1c             	add    esp,0x1c
c0013391:	c3                   	ret    

c0013392 <Fs::standardiseFiles(char*, char const*, char const*)>:
c0013392:	55                   	push   ebp
c0013393:	57                   	push   edi
c0013394:	56                   	push   esi
c0013395:	53                   	push   ebx
c0013396:	81 ec 10 04 00 00    	sub    esp,0x410
c001339c:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c00133a3:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c00133aa:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c00133b1:	68 00 04 00 00       	push   0x400
c00133b6:	6a 00                	push   0x0
c00133b8:	8d 74 24 0c          	lea    esi,[esp+0xc]
c00133bc:	56                   	push   esi
c00133bd:	e8 b6 d3 fe ff       	call   c0000778 <memset>
c00133c2:	83 c4 10             	add    esp,0x10
c00133c5:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c00133c9:	75 0b                	jne    c00133d6 <Fs::standardiseFiles(char*, char const*, char const*)+0x44>
c00133cb:	50                   	push   eax
c00133cc:	50                   	push   eax
c00133cd:	57                   	push   edi
c00133ce:	56                   	push   esi
c00133cf:	e8 60 d4 fe ff       	call   c0000834 <strcpy>
c00133d4:	eb 41                	jmp    c0013417 <Fs::standardiseFiles(char*, char const*, char const*)+0x85>
c00133d6:	8a 07                	mov    al,BYTE PTR [edi]
c00133d8:	3c 5c                	cmp    al,0x5c
c00133da:	74 04                	je     c00133e0 <Fs::standardiseFiles(char*, char const*, char const*)+0x4e>
c00133dc:	3c 2f                	cmp    al,0x2f
c00133de:	75 18                	jne    c00133f8 <Fs::standardiseFiles(char*, char const*, char const*)+0x66>
c00133e0:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c00133e3:	3c 60                	cmp    al,0x60
c00133e5:	7e 03                	jle    c00133ea <Fs::standardiseFiles(char*, char const*, char const*)+0x58>
c00133e7:	83 e8 20             	sub    eax,0x20
c00133ea:	88 04 24             	mov    BYTE PTR [esp],al
c00133ed:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c00133f4:	50                   	push   eax
c00133f5:	50                   	push   eax
c00133f6:	eb 18                	jmp    c0013410 <Fs::standardiseFiles(char*, char const*, char const*)+0x7e>
c00133f8:	50                   	push   eax
c00133f9:	50                   	push   eax
c00133fa:	55                   	push   ebp
c00133fb:	56                   	push   esi
c00133fc:	e8 33 d4 fe ff       	call   c0000834 <strcpy>
c0013401:	5a                   	pop    edx
c0013402:	59                   	pop    ecx
c0013403:	68 cd c4 02 c0       	push   0xc002c4cd
c0013408:	56                   	push   esi
c0013409:	e8 66 d5 fe ff       	call   c0000974 <strcat>
c001340e:	5d                   	pop    ebp
c001340f:	58                   	pop    eax
c0013410:	57                   	push   edi
c0013411:	56                   	push   esi
c0013412:	e8 5d d5 fe ff       	call   c0000974 <strcat>
c0013417:	83 c4 10             	add    esp,0x10
c001341a:	8a 04 24             	mov    al,BYTE PTR [esp]
c001341d:	3c 60                	cmp    al,0x60
c001341f:	7e 03                	jle    c0013424 <Fs::standardiseFiles(char*, char const*, char const*)+0x92>
c0013421:	83 e8 20             	sub    eax,0x20
c0013424:	88 04 24             	mov    BYTE PTR [esp],al
c0013427:	88 03                	mov    BYTE PTR [ebx],al
c0013429:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c0013430:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c0013436:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c001343a:	bf 03 00 00 00       	mov    edi,0x3
c001343f:	b8 03 00 00 00       	mov    eax,0x3
c0013444:	8a 14 3c             	mov    dl,BYTE PTR [esp+edi*1]
c0013447:	84 d2                	test   dl,dl
c0013449:	0f 84 91 00 00 00    	je     c00134e0 <Fs::standardiseFiles(char*, char const*, char const*)+0x14e>
c001344f:	8d 4f 01             	lea    ecx,[edi+0x1]
c0013452:	80 fa 5c             	cmp    dl,0x5c
c0013455:	74 05                	je     c001345c <Fs::standardiseFiles(char*, char const*, char const*)+0xca>
c0013457:	80 fa 2f             	cmp    dl,0x2f
c001345a:	75 12                	jne    c001346e <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c001345c:	89 c5                	mov    ebp,eax
c001345e:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c0013463:	74 09                	je     c001346e <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c0013465:	40                   	inc    eax
c0013466:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c001346a:	89 cf                	mov    edi,ecx
c001346c:	eb d6                	jmp    c0013444 <Fs::standardiseFiles(char*, char const*, char const*)+0xb2>
c001346e:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c0013473:	75 5b                	jne    c00134d0 <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c0013475:	80 fa 2e             	cmp    dl,0x2e
c0013478:	75 56                	jne    c00134d0 <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c001347a:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c001347e:	74 19                	je     c0013499 <Fs::standardiseFiles(char*, char const*, char const*)+0x107>
c0013480:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c0013485:	74 53                	je     c00134da <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c0013487:	89 f9                	mov    ecx,edi
c0013489:	41                   	inc    ecx
c001348a:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c001348d:	80 fa 2f             	cmp    dl,0x2f
c0013490:	74 f7                	je     c0013489 <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c0013492:	80 fa 5c             	cmp    dl,0x5c
c0013495:	74 f2                	je     c0013489 <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c0013497:	eb d1                	jmp    c001346a <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0013499:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c001349e:	74 3a                	je     c00134da <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c00134a0:	83 f8 03             	cmp    eax,0x3
c00134a3:	74 c5                	je     c001346a <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c00134a5:	41                   	inc    ecx
c00134a6:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c00134a9:	80 fa 2f             	cmp    dl,0x2f
c00134ac:	74 f7                	je     c00134a5 <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c00134ae:	80 fa 5c             	cmp    dl,0x5c
c00134b1:	74 f2                	je     c00134a5 <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c00134b3:	48                   	dec    eax
c00134b4:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c00134b8:	75 06                	jne    c00134c0 <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c00134ba:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c00134be:	eb f3                	jmp    c00134b3 <Fs::standardiseFiles(char*, char const*, char const*)+0x121>
c00134c0:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c00134c4:	74 07                	je     c00134cd <Fs::standardiseFiles(char*, char const*, char const*)+0x13b>
c00134c6:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c00134ca:	48                   	dec    eax
c00134cb:	eb f3                	jmp    c00134c0 <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c00134cd:	40                   	inc    eax
c00134ce:	eb 9a                	jmp    c001346a <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c00134d0:	80 fa 2f             	cmp    dl,0x2f
c00134d3:	74 95                	je     c001346a <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c00134d5:	80 fa 5c             	cmp    dl,0x5c
c00134d8:	74 90                	je     c001346a <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c00134da:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c00134dd:	40                   	inc    eax
c00134de:	eb 8a                	jmp    c001346a <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c00134e0:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c00134e4:	83 ec 0c             	sub    esp,0xc
c00134e7:	53                   	push   ebx
c00134e8:	e8 a7 d2 fe ff       	call   c0000794 <strlen>
c00134ed:	83 c4 10             	add    esp,0x10
c00134f0:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c00134f5:	75 26                	jne    c001351d <Fs::standardiseFiles(char*, char const*, char const*)+0x18b>
c00134f7:	83 ec 0c             	sub    esp,0xc
c00134fa:	53                   	push   ebx
c00134fb:	e8 94 d2 fe ff       	call   c0000794 <strlen>
c0013500:	83 c4 10             	add    esp,0x10
c0013503:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c0013508:	74 26                	je     c0013530 <Fs::standardiseFiles(char*, char const*, char const*)+0x19e>
c001350a:	83 ec 0c             	sub    esp,0xc
c001350d:	53                   	push   ebx
c001350e:	e8 81 d2 fe ff       	call   c0000794 <strlen>
c0013513:	83 c4 10             	add    esp,0x10
c0013516:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c001351b:	eb c7                	jmp    c00134e4 <Fs::standardiseFiles(char*, char const*, char const*)+0x152>
c001351d:	83 ec 0c             	sub    esp,0xc
c0013520:	53                   	push   ebx
c0013521:	e8 6e d2 fe ff       	call   c0000794 <strlen>
c0013526:	83 c4 10             	add    esp,0x10
c0013529:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c001352e:	74 c7                	je     c00134f7 <Fs::standardiseFiles(char*, char const*, char const*)+0x165>
c0013530:	81 c4 0c 04 00 00    	add    esp,0x40c
c0013536:	5b                   	pop    ebx
c0013537:	5e                   	pop    esi
c0013538:	5f                   	pop    edi
c0013539:	5d                   	pop    ebp
c001353a:	c3                   	ret    
c001353b:	90                   	nop

c001353c <File::File(char const*, Process*)>:
c001353c:	83 ec 0c             	sub    esp,0xc
c001353f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013543:	83 ec 08             	sub    esp,0x8
c0013546:	6a 00                	push   0x0
c0013548:	50                   	push   eax
c0013549:	e8 92 e2 ff ff       	call   c00117e0 <UnixFile::UnixFile(int)>
c001354e:	83 c4 10             	add    esp,0x10
c0013551:	ba 90 ad 02 c0       	mov    edx,0xc002ad90
c0013556:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001355a:	89 10                	mov    DWORD PTR [eax],edx
c001355c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013560:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0013566:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001356a:	83 c0 0d             	add    eax,0xd
c001356d:	83 ec 04             	sub    esp,0x4
c0013570:	52                   	push   edx
c0013571:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013575:	50                   	push   eax
c0013576:	e8 17 fe ff ff       	call   c0013392 <Fs::standardiseFiles(char*, char const*, char const*)>
c001357b:	83 c4 10             	add    esp,0x10
c001357e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013582:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c0013585:	8d 50 bf             	lea    edx,[eax-0x41]
c0013588:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001358c:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c0013592:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013596:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c001359a:	90                   	nop
c001359b:	83 c4 0c             	add    esp,0xc
c001359e:	c3                   	ret    
c001359f:	90                   	nop

c00135a0 <File::open(FileOpenMode)>:
c00135a0:	53                   	push   ebx
c00135a1:	b8 0b 00 00 00       	mov    eax,0xb
c00135a6:	83 ec 08             	sub    esp,0x8
c00135a9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00135ad:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c00135b4:	80 fa 19             	cmp    dl,0x19
c00135b7:	77 40                	ja     c00135f9 <File::open(FileOpenMode)+0x59>
c00135b9:	8b 14 95 00 ed 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1300]
c00135c0:	85 d2                	test   edx,edx
c00135c2:	74 35                	je     c00135f9 <File::open(FileOpenMode)+0x59>
c00135c4:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c00135ca:	85 d2                	test   edx,edx
c00135cc:	74 2b                	je     c00135f9 <File::open(FileOpenMode)+0x59>
c00135ce:	b8 06 00 00 00       	mov    eax,0x6
c00135d3:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c00135d7:	75 20                	jne    c00135f9 <File::open(FileOpenMode)+0x59>
c00135d9:	8b 02                	mov    eax,DWORD PTR [edx]
c00135db:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c00135e1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00135e5:	51                   	push   ecx
c00135e6:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c00135e9:	51                   	push   ecx
c00135ea:	52                   	push   edx
c00135eb:	ff 50 10             	call   DWORD PTR [eax+0x10]
c00135ee:	83 c4 10             	add    esp,0x10
c00135f1:	85 c0                	test   eax,eax
c00135f3:	75 04                	jne    c00135f9 <File::open(FileOpenMode)+0x59>
c00135f5:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c00135f9:	83 c4 08             	add    esp,0x8
c00135fc:	5b                   	pop    ebx
c00135fd:	c3                   	ret    

c00135fe <File::close()>:
c00135fe:	53                   	push   ebx
c00135ff:	b8 0b 00 00 00       	mov    eax,0xb
c0013604:	83 ec 08             	sub    esp,0x8
c0013607:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001360b:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0013612:	80 fa 19             	cmp    dl,0x19
c0013615:	77 41                	ja     c0013658 <File::close()+0x5a>
c0013617:	8b 1c 95 00 ed 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd1300]
c001361e:	85 db                	test   ebx,ebx
c0013620:	74 36                	je     c0013658 <File::close()+0x5a>
c0013622:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c0013629:	74 2d                	je     c0013658 <File::close()+0x5a>
c001362b:	b8 05 00 00 00       	mov    eax,0x5
c0013630:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0013634:	74 22                	je     c0013658 <File::close()+0x5a>
c0013636:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c001363a:	8b 04 95 00 ed 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd1300]
c0013641:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0013647:	53                   	push   ebx
c0013648:	53                   	push   ebx
c0013649:	8b 10                	mov    edx,DWORD PTR [eax]
c001364b:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0013651:	50                   	push   eax
c0013652:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c0013655:	83 c4 10             	add    esp,0x10
c0013658:	83 c4 08             	add    esp,0x8
c001365b:	5b                   	pop    ebx
c001365c:	c3                   	ret    
c001365d:	90                   	nop

c001365e <File::seek(unsigned long long)>:
c001365e:	56                   	push   esi
c001365f:	53                   	push   ebx
c0013660:	b8 0b 00 00 00       	mov    eax,0xb
c0013665:	51                   	push   ecx
c0013666:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001366a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001366e:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c0013675:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013679:	80 fa 19             	cmp    dl,0x19
c001367c:	77 31                	ja     c00136af <File::seek(unsigned long long)+0x51>
c001367e:	8b 14 95 00 ed 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1300]
c0013685:	85 d2                	test   edx,edx
c0013687:	74 26                	je     c00136af <File::seek(unsigned long long)+0x51>
c0013689:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c001368f:	85 d2                	test   edx,edx
c0013691:	74 1c                	je     c00136af <File::seek(unsigned long long)+0x51>
c0013693:	b8 05 00 00 00       	mov    eax,0x5
c0013698:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c001369c:	74 11                	je     c00136af <File::seek(unsigned long long)+0x51>
c001369e:	8b 02                	mov    eax,DWORD PTR [edx]
c00136a0:	53                   	push   ebx
c00136a1:	51                   	push   ecx
c00136a2:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c00136a8:	52                   	push   edx
c00136a9:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00136ac:	83 c4 10             	add    esp,0x10
c00136af:	5a                   	pop    edx
c00136b0:	5b                   	pop    ebx
c00136b1:	5e                   	pop    esi
c00136b2:	c3                   	ret    
c00136b3:	90                   	nop

c00136b4 <File::tell(unsigned long long*)>:
c00136b4:	83 ec 0c             	sub    esp,0xc
c00136b7:	b8 0b 00 00 00       	mov    eax,0xb
c00136bc:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00136c0:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c00136c7:	80 fa 19             	cmp    dl,0x19
c00136ca:	77 34                	ja     c0013700 <File::tell(unsigned long long*)+0x4c>
c00136cc:	8b 14 95 00 ed 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1300]
c00136d3:	85 d2                	test   edx,edx
c00136d5:	74 29                	je     c0013700 <File::tell(unsigned long long*)+0x4c>
c00136d7:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c00136dd:	85 d2                	test   edx,edx
c00136df:	74 1f                	je     c0013700 <File::tell(unsigned long long*)+0x4c>
c00136e1:	b8 05 00 00 00       	mov    eax,0x5
c00136e6:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c00136ea:	74 14                	je     c0013700 <File::tell(unsigned long long*)+0x4c>
c00136ec:	50                   	push   eax
c00136ed:	8b 02                	mov    eax,DWORD PTR [edx]
c00136ef:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00136f3:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c00136f9:	52                   	push   edx
c00136fa:	ff 50 28             	call   DWORD PTR [eax+0x28]
c00136fd:	83 c4 10             	add    esp,0x10
c0013700:	83 c4 0c             	add    esp,0xc
c0013703:	c3                   	ret    

c0013704 <File::rewind()>:
c0013704:	83 ec 10             	sub    esp,0x10
c0013707:	6a 00                	push   0x0
c0013709:	6a 00                	push   0x0
c001370b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001370f:	e8 4a ff ff ff       	call   c001365e <File::seek(unsigned long long)>
c0013714:	83 c4 1c             	add    esp,0x1c
c0013717:	c3                   	ret    

c0013718 <File::unlink()>:
c0013718:	83 ec 0c             	sub    esp,0xc
c001371b:	b8 0b 00 00 00       	mov    eax,0xb
c0013720:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013724:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001372b:	80 f9 19             	cmp    cl,0x19
c001372e:	77 2f                	ja     c001375f <File::unlink()+0x47>
c0013730:	8b 0c 8d 00 ed 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1300]
c0013737:	85 c9                	test   ecx,ecx
c0013739:	74 24                	je     c001375f <File::unlink()+0x47>
c001373b:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013741:	85 c9                	test   ecx,ecx
c0013743:	74 1a                	je     c001375f <File::unlink()+0x47>
c0013745:	b8 06 00 00 00       	mov    eax,0x6
c001374a:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001374e:	75 0f                	jne    c001375f <File::unlink()+0x47>
c0013750:	83 c2 0d             	add    edx,0xd
c0013753:	50                   	push   eax
c0013754:	50                   	push   eax
c0013755:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013757:	52                   	push   edx
c0013758:	51                   	push   ecx
c0013759:	ff 50 38             	call   DWORD PTR [eax+0x38]
c001375c:	83 c4 10             	add    esp,0x10
c001375f:	83 c4 0c             	add    esp,0xc
c0013762:	c3                   	ret    
c0013763:	90                   	nop

c0013764 <File::rename(char const*)>:
c0013764:	83 ec 0c             	sub    esp,0xc
c0013767:	b8 0b 00 00 00       	mov    eax,0xb
c001376c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013770:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013777:	80 f9 19             	cmp    cl,0x19
c001377a:	77 32                	ja     c00137ae <File::rename(char const*)+0x4a>
c001377c:	8b 0c 8d 00 ed 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1300]
c0013783:	85 c9                	test   ecx,ecx
c0013785:	74 27                	je     c00137ae <File::rename(char const*)+0x4a>
c0013787:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c001378d:	85 c9                	test   ecx,ecx
c001378f:	74 1d                	je     c00137ae <File::rename(char const*)+0x4a>
c0013791:	b8 06 00 00 00       	mov    eax,0x6
c0013796:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001379a:	75 12                	jne    c00137ae <File::rename(char const*)+0x4a>
c001379c:	83 c2 0d             	add    edx,0xd
c001379f:	50                   	push   eax
c00137a0:	8b 01                	mov    eax,DWORD PTR [ecx]
c00137a2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00137a6:	52                   	push   edx
c00137a7:	51                   	push   ecx
c00137a8:	ff 50 40             	call   DWORD PTR [eax+0x40]
c00137ab:	83 c4 10             	add    esp,0x10
c00137ae:	83 c4 0c             	add    esp,0xc
c00137b1:	c3                   	ret    

c00137b2 <File::chfatattr(unsigned char, unsigned char)>:
c00137b2:	57                   	push   edi
c00137b3:	b8 0b 00 00 00       	mov    eax,0xb
c00137b8:	56                   	push   esi
c00137b9:	53                   	push   ebx
c00137ba:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00137be:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00137c2:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00137c9:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00137cd:	80 f9 19             	cmp    cl,0x19
c00137d0:	77 37                	ja     c0013809 <File::chfatattr(unsigned char, unsigned char)+0x57>
c00137d2:	8b 0c 8d 00 ed 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1300]
c00137d9:	85 c9                	test   ecx,ecx
c00137db:	74 2c                	je     c0013809 <File::chfatattr(unsigned char, unsigned char)+0x57>
c00137dd:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00137e3:	85 c9                	test   ecx,ecx
c00137e5:	74 22                	je     c0013809 <File::chfatattr(unsigned char, unsigned char)+0x57>
c00137e7:	b8 06 00 00 00       	mov    eax,0x6
c00137ec:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00137f0:	75 17                	jne    c0013809 <File::chfatattr(unsigned char, unsigned char)+0x57>
c00137f2:	8b 39                	mov    edi,DWORD PTR [ecx]
c00137f4:	89 f0                	mov    eax,esi
c00137f6:	83 c2 0d             	add    edx,0xd
c00137f9:	0f b6 f0             	movzx  esi,al
c00137fc:	0f b6 db             	movzx  ebx,bl
c00137ff:	56                   	push   esi
c0013800:	53                   	push   ebx
c0013801:	52                   	push   edx
c0013802:	51                   	push   ecx
c0013803:	ff 57 34             	call   DWORD PTR [edi+0x34]
c0013806:	83 c4 10             	add    esp,0x10
c0013809:	5b                   	pop    ebx
c001380a:	5e                   	pop    esi
c001380b:	5f                   	pop    edi
c001380c:	c3                   	ret    
c001380d:	90                   	nop

c001380e <File::exists()>:
c001380e:	83 ec 0c             	sub    esp,0xc
c0013811:	31 c0                	xor    eax,eax
c0013813:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013817:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001381e:	80 f9 19             	cmp    cl,0x19
c0013821:	77 24                	ja     c0013847 <File::exists()+0x39>
c0013823:	8b 0c 8d 00 ed 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1300]
c001382a:	85 c9                	test   ecx,ecx
c001382c:	74 19                	je     c0013847 <File::exists()+0x39>
c001382e:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013834:	85 c9                	test   ecx,ecx
c0013836:	74 0f                	je     c0013847 <File::exists()+0x39>
c0013838:	83 c2 0d             	add    edx,0xd
c001383b:	50                   	push   eax
c001383c:	50                   	push   eax
c001383d:	8b 01                	mov    eax,DWORD PTR [ecx]
c001383f:	52                   	push   edx
c0013840:	51                   	push   ecx
c0013841:	ff 50 44             	call   DWORD PTR [eax+0x44]
c0013844:	83 c4 10             	add    esp,0x10
c0013847:	83 c4 0c             	add    esp,0xc
c001384a:	c3                   	ret    
c001384b:	90                   	nop

c001384c <File::stat(unsigned long long*, bool*)>:
c001384c:	56                   	push   esi
c001384d:	53                   	push   ebx
c001384e:	50                   	push   eax
c001384f:	b8 0b 00 00 00       	mov    eax,0xb
c0013854:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013858:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001385c:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013863:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013867:	80 f9 19             	cmp    cl,0x19
c001386a:	77 3d                	ja     c00138a9 <File::stat(unsigned long long*, bool*)+0x5d>
c001386c:	8b 0c 8d 00 ed 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1300]
c0013873:	85 c9                	test   ecx,ecx
c0013875:	74 32                	je     c00138a9 <File::stat(unsigned long long*, bool*)+0x5d>
c0013877:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c001387d:	85 c9                	test   ecx,ecx
c001387f:	74 28                	je     c00138a9 <File::stat(unsigned long long*, bool*)+0x5d>
c0013881:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013883:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013887:	74 13                	je     c001389c <File::stat(unsigned long long*, bool*)+0x50>
c0013889:	83 ec 04             	sub    esp,0x4
c001388c:	56                   	push   esi
c001388d:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c0013893:	51                   	push   ecx
c0013894:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c0013897:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c001389a:	eb 0a                	jmp    c00138a6 <File::stat(unsigned long long*, bool*)+0x5a>
c001389c:	53                   	push   ebx
c001389d:	83 c2 0d             	add    edx,0xd
c00138a0:	56                   	push   esi
c00138a1:	52                   	push   edx
c00138a2:	51                   	push   ecx
c00138a3:	ff 50 30             	call   DWORD PTR [eax+0x30]
c00138a6:	83 c4 10             	add    esp,0x10
c00138a9:	5a                   	pop    edx
c00138aa:	5b                   	pop    ebx
c00138ab:	5e                   	pop    esi
c00138ac:	c3                   	ret    

c00138ad <Fs::setcwd(Process*, char*)>:
c00138ad:	55                   	push   ebp
c00138ae:	57                   	push   edi
c00138af:	56                   	push   esi
c00138b0:	53                   	push   ebx
c00138b1:	81 ec 20 02 00 00    	sub    esp,0x220
c00138b7:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c00138be:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c00138c4:	57                   	push   edi
c00138c5:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00138cc:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c00138d0:	56                   	push   esi
c00138d1:	e8 bc fa ff ff       	call   c0013392 <Fs::standardiseFiles(char*, char const*, char const*)>
c00138d6:	89 34 24             	mov    DWORD PTR [esp],esi
c00138d9:	e8 b6 ce fe ff       	call   c0000794 <strlen>
c00138de:	83 c4 10             	add    esp,0x10
c00138e1:	83 f8 02             	cmp    eax,0x2
c00138e4:	77 17                	ja     c00138fd <Fs::setcwd(Process*, char*)+0x50>
c00138e6:	0f be 44 24 10       	movsx  eax,BYTE PTR [esp+0x10]
c00138eb:	83 e8 41             	sub    eax,0x41
c00138ee:	83 f8 19             	cmp    eax,0x19
c00138f1:	76 24                	jbe    c0013917 <Fs::setcwd(Process*, char*)+0x6a>
c00138f3:	b8 03 00 00 00       	mov    eax,0x3
c00138f8:	e9 e0 00 00 00       	jmp    c00139dd <Fs::setcwd(Process*, char*)+0x130>
c00138fd:	83 ec 0c             	sub    esp,0xc
c0013900:	56                   	push   esi
c0013901:	e8 8e ce fe ff       	call   c0000794 <strlen>
c0013906:	83 c4 10             	add    esp,0x10
c0013909:	83 f8 03             	cmp    eax,0x3
c001390c:	75 34                	jne    c0013942 <Fs::setcwd(Process*, char*)+0x95>
c001390e:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c0013913:	75 2d                	jne    c0013942 <Fs::setcwd(Process*, char*)+0x95>
c0013915:	eb cf                	jmp    c00138e6 <Fs::setcwd(Process*, char*)+0x39>
c0013917:	8b 14 85 00 ed 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd1300]
c001391e:	b8 05 00 00 00       	mov    eax,0x5
c0013923:	85 d2                	test   edx,edx
c0013925:	0f 84 b2 00 00 00    	je     c00139dd <Fs::setcwd(Process*, char*)+0x130>
c001392b:	b8 06 00 00 00       	mov    eax,0x6
c0013930:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c0013937:	0f 85 92 00 00 00    	jne    c00139cf <Fs::setcwd(Process*, char*)+0x122>
c001393d:	e9 9b 00 00 00       	jmp    c00139dd <Fs::setcwd(Process*, char*)+0x130>
c0013942:	83 ec 0c             	sub    esp,0xc
c0013945:	68 14 01 00 00       	push   0x114
c001394a:	e8 95 bf ff ff       	call   c000f8e4 <malloc>
c001394f:	83 c4 0c             	add    esp,0xc
c0013952:	89 c3                	mov    ebx,eax
c0013954:	55                   	push   ebp
c0013955:	56                   	push   esi
c0013956:	50                   	push   eax
c0013957:	e8 e0 fb ff ff       	call   c001353c <File::File(char const*, Process*)>
c001395c:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c0013961:	83 c4 0c             	add    esp,0xc
c0013964:	8d 44 24 0b          	lea    eax,[esp+0xb]
c0013968:	50                   	push   eax
c0013969:	8d 44 24 10          	lea    eax,[esp+0x10]
c001396d:	50                   	push   eax
c001396e:	53                   	push   ebx
c001396f:	e8 d8 fe ff ff       	call   c001384c <File::stat(unsigned long long*, bool*)>
c0013974:	83 c4 10             	add    esp,0x10
c0013977:	83 f8 02             	cmp    eax,0x2
c001397a:	74 04                	je     c0013980 <Fs::setcwd(Process*, char*)+0xd3>
c001397c:	85 c0                	test   eax,eax
c001397e:	74 1c                	je     c001399c <Fs::setcwd(Process*, char*)+0xef>
c0013980:	b8 01 00 00 00       	mov    eax,0x1
c0013985:	85 db                	test   ebx,ebx
c0013987:	74 54                	je     c00139dd <Fs::setcwd(Process*, char*)+0x130>
c0013989:	83 ec 0c             	sub    esp,0xc
c001398c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001398e:	53                   	push   ebx
c001398f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013992:	83 c4 10             	add    esp,0x10
c0013995:	b8 01 00 00 00       	mov    eax,0x1
c001399a:	eb 41                	jmp    c00139dd <Fs::setcwd(Process*, char*)+0x130>
c001399c:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c00139a1:	75 1c                	jne    c00139bf <Fs::setcwd(Process*, char*)+0x112>
c00139a3:	b8 02 00 00 00       	mov    eax,0x2
c00139a8:	85 db                	test   ebx,ebx
c00139aa:	74 31                	je     c00139dd <Fs::setcwd(Process*, char*)+0x130>
c00139ac:	83 ec 0c             	sub    esp,0xc
c00139af:	8b 03                	mov    eax,DWORD PTR [ebx]
c00139b1:	53                   	push   ebx
c00139b2:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00139b5:	83 c4 10             	add    esp,0x10
c00139b8:	b8 02 00 00 00       	mov    eax,0x2
c00139bd:	eb 1e                	jmp    c00139dd <Fs::setcwd(Process*, char*)+0x130>
c00139bf:	85 db                	test   ebx,ebx
c00139c1:	74 0c                	je     c00139cf <Fs::setcwd(Process*, char*)+0x122>
c00139c3:	83 ec 0c             	sub    esp,0xc
c00139c6:	8b 03                	mov    eax,DWORD PTR [ebx]
c00139c8:	53                   	push   ebx
c00139c9:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00139cc:	83 c4 10             	add    esp,0x10
c00139cf:	50                   	push   eax
c00139d0:	50                   	push   eax
c00139d1:	56                   	push   esi
c00139d2:	57                   	push   edi
c00139d3:	e8 5c ce fe ff       	call   c0000834 <strcpy>
c00139d8:	83 c4 10             	add    esp,0x10
c00139db:	31 c0                	xor    eax,eax
c00139dd:	81 c4 1c 02 00 00    	add    esp,0x21c
c00139e3:	5b                   	pop    ebx
c00139e4:	5e                   	pop    esi
c00139e5:	5f                   	pop    edi
c00139e6:	5d                   	pop    ebp
c00139e7:	c3                   	ret    

c00139e8 <Directory::Directory(char const*, Process*)>:
c00139e8:	83 ec 0c             	sub    esp,0xc
c00139eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00139ef:	83 ec 08             	sub    esp,0x8
c00139f2:	6a 00                	push   0x0
c00139f4:	50                   	push   eax
c00139f5:	e8 e6 dd ff ff       	call   c00117e0 <UnixFile::UnixFile(int)>
c00139fa:	83 c4 10             	add    esp,0x10
c00139fd:	ba ac ad 02 c0       	mov    edx,0xc002adac
c0013a02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013a06:	89 10                	mov    DWORD PTR [eax],edx
c0013a08:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013a0c:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0013a12:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013a16:	83 c0 0d             	add    eax,0xd
c0013a19:	83 ec 04             	sub    esp,0x4
c0013a1c:	52                   	push   edx
c0013a1d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013a21:	50                   	push   eax
c0013a22:	e8 6b f9 ff ff       	call   c0013392 <Fs::standardiseFiles(char*, char const*, char const*)>
c0013a27:	83 c4 10             	add    esp,0x10
c0013a2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013a2e:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c0013a31:	8d 50 bf             	lea    edx,[eax-0x41]
c0013a34:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013a38:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c0013a3e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013a42:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c0013a46:	90                   	nop
c0013a47:	83 c4 0c             	add    esp,0xc
c0013a4a:	c3                   	ret    
c0013a4b:	90                   	nop

c0013a4c <Directory::open()>:
c0013a4c:	53                   	push   ebx
c0013a4d:	b8 0b 00 00 00       	mov    eax,0xb
c0013a52:	83 ec 08             	sub    esp,0x8
c0013a55:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013a59:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c0013a60:	80 fa 19             	cmp    dl,0x19
c0013a63:	77 3d                	ja     c0013aa2 <Directory::open()+0x56>
c0013a65:	8b 14 95 00 ed 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1300]
c0013a6c:	85 d2                	test   edx,edx
c0013a6e:	74 32                	je     c0013aa2 <Directory::open()+0x56>
c0013a70:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0013a76:	85 d2                	test   edx,edx
c0013a78:	74 28                	je     c0013aa2 <Directory::open()+0x56>
c0013a7a:	b8 06 00 00 00       	mov    eax,0x6
c0013a7f:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c0013a83:	75 1d                	jne    c0013aa2 <Directory::open()+0x56>
c0013a85:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c0013a8b:	50                   	push   eax
c0013a8c:	8b 02                	mov    eax,DWORD PTR [edx]
c0013a8e:	51                   	push   ecx
c0013a8f:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c0013a92:	51                   	push   ecx
c0013a93:	52                   	push   edx
c0013a94:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c0013a97:	83 c4 10             	add    esp,0x10
c0013a9a:	85 c0                	test   eax,eax
c0013a9c:	75 04                	jne    c0013aa2 <Directory::open()+0x56>
c0013a9e:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c0013aa2:	83 c4 08             	add    esp,0x8
c0013aa5:	5b                   	pop    ebx
c0013aa6:	c3                   	ret    
c0013aa7:	90                   	nop

c0013aa8 <Directory::close()>:
c0013aa8:	53                   	push   ebx
c0013aa9:	b8 0b 00 00 00       	mov    eax,0xb
c0013aae:	83 ec 08             	sub    esp,0x8
c0013ab1:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0013ab5:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0013abc:	80 fa 19             	cmp    dl,0x19
c0013abf:	77 41                	ja     c0013b02 <Directory::close()+0x5a>
c0013ac1:	8b 1c 95 00 ed 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd1300]
c0013ac8:	85 db                	test   ebx,ebx
c0013aca:	74 36                	je     c0013b02 <Directory::close()+0x5a>
c0013acc:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c0013ad3:	74 2d                	je     c0013b02 <Directory::close()+0x5a>
c0013ad5:	b8 05 00 00 00       	mov    eax,0x5
c0013ada:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0013ade:	74 22                	je     c0013b02 <Directory::close()+0x5a>
c0013ae0:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c0013ae4:	8b 04 95 00 ed 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd1300]
c0013aeb:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0013af1:	53                   	push   ebx
c0013af2:	53                   	push   ebx
c0013af3:	8b 10                	mov    edx,DWORD PTR [eax]
c0013af5:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0013afb:	50                   	push   eax
c0013afc:	ff 52 20             	call   DWORD PTR [edx+0x20]
c0013aff:	83 c4 10             	add    esp,0x10
c0013b02:	83 c4 08             	add    esp,0x8
c0013b05:	5b                   	pop    ebx
c0013b06:	c3                   	ret    
c0013b07:	90                   	nop

c0013b08 <Directory::unlink()>:
c0013b08:	83 ec 0c             	sub    esp,0xc
c0013b0b:	b8 0b 00 00 00       	mov    eax,0xb
c0013b10:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013b14:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013b1b:	80 f9 19             	cmp    cl,0x19
c0013b1e:	77 2f                	ja     c0013b4f <Directory::unlink()+0x47>
c0013b20:	8b 0c 8d 00 ed 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1300]
c0013b27:	85 c9                	test   ecx,ecx
c0013b29:	74 24                	je     c0013b4f <Directory::unlink()+0x47>
c0013b2b:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013b31:	85 c9                	test   ecx,ecx
c0013b33:	74 1a                	je     c0013b4f <Directory::unlink()+0x47>
c0013b35:	b8 06 00 00 00       	mov    eax,0x6
c0013b3a:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013b3e:	75 0f                	jne    c0013b4f <Directory::unlink()+0x47>
c0013b40:	83 c2 0d             	add    edx,0xd
c0013b43:	50                   	push   eax
c0013b44:	50                   	push   eax
c0013b45:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013b47:	52                   	push   edx
c0013b48:	51                   	push   ecx
c0013b49:	ff 50 38             	call   DWORD PTR [eax+0x38]
c0013b4c:	83 c4 10             	add    esp,0x10
c0013b4f:	83 c4 0c             	add    esp,0xc
c0013b52:	c3                   	ret    
c0013b53:	90                   	nop

c0013b54 <Directory::rename(char const*)>:
c0013b54:	83 ec 0c             	sub    esp,0xc
c0013b57:	b8 0b 00 00 00       	mov    eax,0xb
c0013b5c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013b60:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013b67:	80 f9 19             	cmp    cl,0x19
c0013b6a:	77 32                	ja     c0013b9e <Directory::rename(char const*)+0x4a>
c0013b6c:	8b 0c 8d 00 ed 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1300]
c0013b73:	85 c9                	test   ecx,ecx
c0013b75:	74 27                	je     c0013b9e <Directory::rename(char const*)+0x4a>
c0013b77:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013b7d:	85 c9                	test   ecx,ecx
c0013b7f:	74 1d                	je     c0013b9e <Directory::rename(char const*)+0x4a>
c0013b81:	b8 06 00 00 00       	mov    eax,0x6
c0013b86:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013b8a:	75 12                	jne    c0013b9e <Directory::rename(char const*)+0x4a>
c0013b8c:	83 c2 0d             	add    edx,0xd
c0013b8f:	50                   	push   eax
c0013b90:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013b92:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013b96:	52                   	push   edx
c0013b97:	51                   	push   ecx
c0013b98:	ff 50 40             	call   DWORD PTR [eax+0x40]
c0013b9b:	83 c4 10             	add    esp,0x10
c0013b9e:	83 c4 0c             	add    esp,0xc
c0013ba1:	c3                   	ret    

c0013ba2 <Directory::exists()>:
c0013ba2:	83 ec 0c             	sub    esp,0xc
c0013ba5:	31 c0                	xor    eax,eax
c0013ba7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013bab:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013bb2:	80 f9 19             	cmp    cl,0x19
c0013bb5:	77 24                	ja     c0013bdb <Directory::exists()+0x39>
c0013bb7:	8b 0c 8d 00 ed 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1300]
c0013bbe:	85 c9                	test   ecx,ecx
c0013bc0:	74 19                	je     c0013bdb <Directory::exists()+0x39>
c0013bc2:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013bc8:	85 c9                	test   ecx,ecx
c0013bca:	74 0f                	je     c0013bdb <Directory::exists()+0x39>
c0013bcc:	83 c2 0d             	add    edx,0xd
c0013bcf:	50                   	push   eax
c0013bd0:	50                   	push   eax
c0013bd1:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013bd3:	52                   	push   edx
c0013bd4:	51                   	push   ecx
c0013bd5:	ff 50 44             	call   DWORD PTR [eax+0x44]
c0013bd8:	83 c4 10             	add    esp,0x10
c0013bdb:	83 c4 0c             	add    esp,0xc
c0013bde:	c3                   	ret    
c0013bdf:	90                   	nop

c0013be0 <Directory::read(dirent*)>:
c0013be0:	83 ec 1c             	sub    esp,0x1c
c0013be3:	b8 0b 00 00 00       	mov    eax,0xb
c0013be8:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0013bec:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0013bf3:	80 fa 19             	cmp    dl,0x19
c0013bf6:	77 30                	ja     c0013c28 <Directory::read(dirent*)+0x48>
c0013bf8:	8b 14 95 00 ed 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1300]
c0013bff:	85 d2                	test   edx,edx
c0013c01:	74 25                	je     c0013c28 <Directory::read(dirent*)+0x48>
c0013c03:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c0013c0a:	74 1c                	je     c0013c28 <Directory::read(dirent*)+0x48>
c0013c0c:	83 ec 0c             	sub    esp,0xc
c0013c0f:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013c11:	8d 54 24 18          	lea    edx,[esp+0x18]
c0013c15:	52                   	push   edx
c0013c16:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0013c1a:	6a 00                	push   0x0
c0013c1c:	68 10 01 00 00       	push   0x110
c0013c21:	51                   	push   ecx
c0013c22:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013c25:	83 c4 20             	add    esp,0x20
c0013c28:	83 c4 1c             	add    esp,0x1c
c0013c2b:	c3                   	ret    

c0013c2c <Directory::create()>:
c0013c2c:	83 ec 0c             	sub    esp,0xc
c0013c2f:	b8 0b 00 00 00       	mov    eax,0xb
c0013c34:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013c38:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013c3f:	80 f9 19             	cmp    cl,0x19
c0013c42:	77 2f                	ja     c0013c73 <Directory::create()+0x47>
c0013c44:	8b 0c 8d 00 ed 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1300]
c0013c4b:	85 c9                	test   ecx,ecx
c0013c4d:	74 24                	je     c0013c73 <Directory::create()+0x47>
c0013c4f:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013c55:	85 c9                	test   ecx,ecx
c0013c57:	74 1a                	je     c0013c73 <Directory::create()+0x47>
c0013c59:	b8 06 00 00 00       	mov    eax,0x6
c0013c5e:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013c62:	75 0f                	jne    c0013c73 <Directory::create()+0x47>
c0013c64:	83 c2 0d             	add    edx,0xd
c0013c67:	50                   	push   eax
c0013c68:	50                   	push   eax
c0013c69:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013c6b:	52                   	push   edx
c0013c6c:	51                   	push   ecx
c0013c6d:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c0013c70:	83 c4 10             	add    esp,0x10
c0013c73:	83 c4 0c             	add    esp,0xc
c0013c76:	c3                   	ret    
c0013c77:	90                   	nop

c0013c78 <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c0013c78:	b8 0a 00 00 00       	mov    eax,0xa
c0013c7d:	c3                   	ret    

c0013c7e <Bus::Bus(char const*)>:
c0013c7e:	83 ec 0c             	sub    esp,0xc
c0013c81:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013c85:	83 ec 08             	sub    esp,0x8
c0013c88:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013c8c:	50                   	push   eax
c0013c8d:	e8 68 09 00 00       	call   c00145fa <Device::Device(char const*)>
c0013c92:	83 c4 10             	add    esp,0x10
c0013c95:	ba c8 ad 02 c0       	mov    edx,0xc002adc8
c0013c9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013c9e:	89 10                	mov    DWORD PTR [eax],edx
c0013ca0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013ca4:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0013cae:	90                   	nop
c0013caf:	83 c4 0c             	add    esp,0xc
c0013cb2:	c3                   	ret    
c0013cb3:	90                   	nop

c0013cb4 <Bus::~Bus()>:
c0013cb4:	83 ec 0c             	sub    esp,0xc
c0013cb7:	ba c8 ad 02 c0       	mov    edx,0xc002adc8
c0013cbc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013cc0:	89 10                	mov    DWORD PTR [eax],edx
c0013cc2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013cc6:	83 ec 0c             	sub    esp,0xc
c0013cc9:	50                   	push   eax
c0013cca:	e8 0d 06 00 00       	call   c00142dc <Device::~Device()>
c0013ccf:	83 c4 10             	add    esp,0x10
c0013cd2:	90                   	nop
c0013cd3:	83 c4 0c             	add    esp,0xc
c0013cd6:	c3                   	ret    
c0013cd7:	90                   	nop

c0013cd8 <Bus::~Bus()>:
c0013cd8:	83 ec 0c             	sub    esp,0xc
c0013cdb:	83 ec 0c             	sub    esp,0xc
c0013cde:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013ce2:	e8 cd ff ff ff       	call   c0013cb4 <Bus::~Bus()>
c0013ce7:	83 c4 10             	add    esp,0x10
c0013cea:	83 ec 08             	sub    esp,0x8
c0013ced:	68 58 01 00 00       	push   0x158
c0013cf2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013cf6:	e8 08 f2 ff ff       	call   c0012f03 <operator delete(void*, unsigned long)>
c0013cfb:	83 c4 10             	add    esp,0x10
c0013cfe:	83 c4 0c             	add    esp,0xc
c0013d01:	c3                   	ret    

c0013d02 <Buzzer::Buzzer(char const*)>:
c0013d02:	83 ec 0c             	sub    esp,0xc
c0013d05:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013d09:	83 ec 08             	sub    esp,0x8
c0013d0c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013d10:	50                   	push   eax
c0013d11:	e8 e4 08 00 00       	call   c00145fa <Device::Device(char const*)>
c0013d16:	83 c4 10             	add    esp,0x10
c0013d19:	ba f4 ad 02 c0       	mov    edx,0xc002adf4
c0013d1e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013d22:	89 10                	mov    DWORD PTR [eax],edx
c0013d24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013d28:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0013d32:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013d36:	c7 80 10 01 00 00 0c 00 00 00 	mov    DWORD PTR [eax+0x110],0xc
c0013d40:	90                   	nop
c0013d41:	83 c4 0c             	add    esp,0xc
c0013d44:	c3                   	ret    
c0013d45:	90                   	nop

c0013d46 <Buzzer::~Buzzer()>:
c0013d46:	83 ec 0c             	sub    esp,0xc
c0013d49:	ba f4 ad 02 c0       	mov    edx,0xc002adf4
c0013d4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013d52:	89 10                	mov    DWORD PTR [eax],edx
c0013d54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013d58:	83 ec 0c             	sub    esp,0xc
c0013d5b:	50                   	push   eax
c0013d5c:	e8 7b 05 00 00       	call   c00142dc <Device::~Device()>
c0013d61:	83 c4 10             	add    esp,0x10
c0013d64:	90                   	nop
c0013d65:	83 c4 0c             	add    esp,0xc
c0013d68:	c3                   	ret    
c0013d69:	90                   	nop

c0013d6a <Buzzer::~Buzzer()>:
c0013d6a:	83 ec 0c             	sub    esp,0xc
c0013d6d:	83 ec 0c             	sub    esp,0xc
c0013d70:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013d74:	e8 cd ff ff ff       	call   c0013d46 <Buzzer::~Buzzer()>
c0013d79:	83 c4 10             	add    esp,0x10
c0013d7c:	83 ec 08             	sub    esp,0x8
c0013d7f:	68 5c 01 00 00       	push   0x15c
c0013d84:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013d88:	e8 76 f1 ff ff       	call   c0012f03 <operator delete(void*, unsigned long)>
c0013d8d:	83 c4 10             	add    esp,0x10
c0013d90:	83 c4 0c             	add    esp,0xc
c0013d93:	c3                   	ret    

c0013d94 <Buzzer::stop()>:
c0013d94:	83 ec 14             	sub    esp,0x14
c0013d97:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013d9b:	8b 10                	mov    edx,DWORD PTR [eax]
c0013d9d:	6a 00                	push   0x0
c0013d9f:	50                   	push   eax
c0013da0:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0013da3:	83 c4 1c             	add    esp,0x1c
c0013da6:	c3                   	ret    

c0013da7 <beepThread(void*)>:
c0013da7:	53                   	push   ebx
c0013da8:	83 ec 08             	sub    esp,0x8
c0013dab:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013daf:	e8 08 a1 00 00       	call   c001debc <unlockScheduler()>
c0013db4:	b8 40 42 0f 00       	mov    eax,0xf4240
c0013db9:	52                   	push   edx
c0013dba:	52                   	push   edx
c0013dbb:	f7 ab 58 01 00 00    	imul   DWORD PTR [ebx+0x158]
c0013dc1:	52                   	push   edx
c0013dc2:	50                   	push   eax
c0013dc3:	e8 42 a6 00 00       	call   c001e40a <nanoSleep(unsigned long long)>
c0013dc8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013dcb:	e8 c4 ff ff ff       	call   c0013d94 <Buzzer::stop()>
c0013dd0:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c0013dd8:	83 c4 18             	add    esp,0x18
c0013ddb:	5b                   	pop    ebx
c0013ddc:	e9 6f a5 00 00       	jmp    c001e350 <blockTask(TaskState)>
c0013de1:	90                   	nop

c0013de2 <Buzzer::beep(int, int, bool)>:
c0013de2:	57                   	push   edi
c0013de3:	56                   	push   esi
c0013de4:	53                   	push   ebx
c0013de5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013de9:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0013ded:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013df1:	52                   	push   edx
c0013df2:	52                   	push   edx
c0013df3:	8b 06                	mov    eax,DWORD PTR [esi]
c0013df5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013df9:	56                   	push   esi
c0013dfa:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0013dfd:	83 c4 10             	add    esp,0x10
c0013e00:	89 f8                	mov    eax,edi
c0013e02:	84 c0                	test   al,al
c0013e04:	74 1f                	je     c0013e25 <Buzzer::beep(int, int, bool)+0x43>
c0013e06:	50                   	push   eax
c0013e07:	50                   	push   eax
c0013e08:	69 c3 40 42 0f 00    	imul   eax,ebx,0xf4240
c0013e0e:	99                   	cdq    
c0013e0f:	52                   	push   edx
c0013e10:	50                   	push   eax
c0013e11:	e8 f4 a5 00 00       	call   c001e40a <nanoSleep(unsigned long long)>
c0013e16:	83 c4 10             	add    esp,0x10
c0013e19:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0013e1d:	5b                   	pop    ebx
c0013e1e:	5e                   	pop    esi
c0013e1f:	5f                   	pop    edi
c0013e20:	e9 6f ff ff ff       	jmp    c0013d94 <Buzzer::stop()>
c0013e25:	89 9e 58 01 00 00    	mov    DWORD PTR [esi+0x158],ebx
c0013e2b:	a1 58 1c 03 c0       	mov    eax,ds:0xc0031c58
c0013e30:	c7 44 24 1c e6 00 00 00 	mov    DWORD PTR [esp+0x1c],0xe6
c0013e38:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c0013e3c:	c7 44 24 14 a7 3d 01 c0 	mov    DWORD PTR [esp+0x14],0xc0013da7
c0013e44:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0013e48:	5b                   	pop    ebx
c0013e49:	5e                   	pop    esi
c0013e4a:	5f                   	pop    edi
c0013e4b:	e9 9c a1 00 00       	jmp    c001dfec <Process::createThread(void (*)(void*), void*, int)>

c0013e50 <User::loadClockSettings(int)>:
c0013e50:	53                   	push   ebx
c0013e51:	83 ec 14             	sub    esp,0x14
c0013e54:	68 14 01 00 00       	push   0x114
c0013e59:	e8 86 ba ff ff       	call   c000f8e4 <malloc>
c0013e5e:	83 c4 0c             	add    esp,0xc
c0013e61:	89 c3                	mov    ebx,eax
c0013e63:	ff 35 58 1c 03 c0    	push   DWORD PTR ds:0xc0031c58
c0013e69:	68 1c ae 02 c0       	push   0xc002ae1c
c0013e6e:	50                   	push   eax
c0013e6f:	e8 c8 f6 ff ff       	call   c001353c <File::File(char const*, Process*)>
c0013e74:	58                   	pop    eax
c0013e75:	5a                   	pop    edx
c0013e76:	6a 01                	push   0x1
c0013e78:	53                   	push   ebx
c0013e79:	e8 22 f7 ff ff       	call   c00135a0 <File::open(FileOpenMode)>
c0013e7e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013e81:	e8 78 f7 ff ff       	call   c00135fe <File::close()>
c0013e86:	83 c4 10             	add    esp,0x10
c0013e89:	85 db                	test   ebx,ebx
c0013e8b:	74 0f                	je     c0013e9c <User::loadClockSettings(int)+0x4c>
c0013e8d:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013e8f:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0013e93:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0013e96:	83 c4 08             	add    esp,0x8
c0013e99:	5b                   	pop    ebx
c0013e9a:	ff e0                	jmp    eax
c0013e9c:	83 c4 08             	add    esp,0x8
c0013e9f:	5b                   	pop    ebx
c0013ea0:	c3                   	ret    
c0013ea1:	90                   	nop

c0013ea2 <Clock::Clock(char const*)>:
c0013ea2:	83 ec 0c             	sub    esp,0xc
c0013ea5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013ea9:	83 ec 08             	sub    esp,0x8
c0013eac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013eb0:	50                   	push   eax
c0013eb1:	e8 44 07 00 00       	call   c00145fa <Device::Device(char const*)>
c0013eb6:	83 c4 10             	add    esp,0x10
c0013eb9:	ba 44 ae 02 c0       	mov    edx,0xc002ae44
c0013ebe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013ec2:	89 10                	mov    DWORD PTR [eax],edx
c0013ec4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013ec8:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c0013ed2:	90                   	nop
c0013ed3:	83 c4 0c             	add    esp,0xc
c0013ed6:	c3                   	ret    
c0013ed7:	90                   	nop

c0013ed8 <Clock::~Clock()>:
c0013ed8:	83 ec 0c             	sub    esp,0xc
c0013edb:	ba 44 ae 02 c0       	mov    edx,0xc002ae44
c0013ee0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013ee4:	89 10                	mov    DWORD PTR [eax],edx
c0013ee6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013eea:	83 ec 0c             	sub    esp,0xc
c0013eed:	50                   	push   eax
c0013eee:	e8 e9 03 00 00       	call   c00142dc <Device::~Device()>
c0013ef3:	83 c4 10             	add    esp,0x10
c0013ef6:	90                   	nop
c0013ef7:	83 c4 0c             	add    esp,0xc
c0013efa:	c3                   	ret    
c0013efb:	90                   	nop

c0013efc <Clock::~Clock()>:
c0013efc:	83 ec 0c             	sub    esp,0xc
c0013eff:	83 ec 0c             	sub    esp,0xc
c0013f02:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013f06:	e8 cd ff ff ff       	call   c0013ed8 <Clock::~Clock()>
c0013f0b:	83 c4 10             	add    esp,0x10
c0013f0e:	83 ec 08             	sub    esp,0x8
c0013f11:	68 58 01 00 00       	push   0x158
c0013f16:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013f1a:	e8 e4 ef ff ff       	call   c0012f03 <operator delete(void*, unsigned long)>
c0013f1f:	83 c4 10             	add    esp,0x10
c0013f22:	83 c4 0c             	add    esp,0xc
c0013f25:	c3                   	ret    

c0013f26 <Clock::timeInSecondsLocal()>:
c0013f26:	53                   	push   ebx
c0013f27:	83 ec 14             	sub    esp,0x14
c0013f2a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013f2e:	8b 10                	mov    edx,DWORD PTR [eax]
c0013f30:	50                   	push   eax
c0013f31:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0013f34:	0f b6 0d 74 e8 02 c0 	movzx  ecx,BYTE PTR ds:0xc002e874
c0013f3b:	03 0d 78 e8 02 c0    	add    ecx,DWORD PTR ds:0xc002e878
c0013f41:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0013f47:	89 cb                	mov    ebx,ecx
c0013f49:	c1 fb 1f             	sar    ebx,0x1f
c0013f4c:	01 c8                	add    eax,ecx
c0013f4e:	11 da                	adc    edx,ebx
c0013f50:	83 c4 10             	add    esp,0x10
c0013f53:	31 c9                	xor    ecx,ecx
c0013f55:	80 3d 75 e8 02 c0 00 	cmp    BYTE PTR ds:0xc002e875,0x0
c0013f5c:	74 05                	je     c0013f63 <Clock::timeInSecondsLocal()+0x3d>
c0013f5e:	b9 08 07 00 00       	mov    ecx,0x708
c0013f63:	31 db                	xor    ebx,ebx
c0013f65:	01 c8                	add    eax,ecx
c0013f67:	11 da                	adc    edx,ebx
c0013f69:	83 c4 08             	add    esp,0x8
c0013f6c:	5b                   	pop    ebx
c0013f6d:	c3                   	ret    

c0013f6e <Clock::setTimeInSecondsLocal(unsigned long long)>:
c0013f6e:	57                   	push   edi
c0013f6f:	56                   	push   esi
c0013f70:	53                   	push   ebx
c0013f71:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0013f75:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013f79:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013f7b:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0013f7f:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c0013f82:	0f b6 05 74 e8 02 c0 	movzx  eax,BYTE PTR ds:0xc002e874
c0013f89:	03 05 78 e8 02 c0    	add    eax,DWORD PTR ds:0xc002e878
c0013f8f:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c0013f95:	99                   	cdq    
c0013f96:	29 c6                	sub    esi,eax
c0013f98:	19 d7                	sbb    edi,edx
c0013f9a:	89 f0                	mov    eax,esi
c0013f9c:	89 fa                	mov    edx,edi
c0013f9e:	31 f6                	xor    esi,esi
c0013fa0:	80 3d 75 e8 02 c0 00 	cmp    BYTE PTR ds:0xc002e875,0x0
c0013fa7:	74 05                	je     c0013fae <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c0013fa9:	be 08 07 00 00       	mov    esi,0x708
c0013fae:	31 ff                	xor    edi,edi
c0013fb0:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0013fb4:	29 f0                	sub    eax,esi
c0013fb6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013fba:	19 fa                	sbb    edx,edi
c0013fbc:	89 d8                	mov    eax,ebx
c0013fbe:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0013fc2:	5b                   	pop    ebx
c0013fc3:	5e                   	pop    esi
c0013fc4:	5f                   	pop    edi
c0013fc5:	ff e0                	jmp    eax

c0013fc7 <datetimeToSeconds(datetime_t)>:
c0013fc7:	55                   	push   ebp
c0013fc8:	57                   	push   edi
c0013fc9:	56                   	push   esi
c0013fca:	53                   	push   ebx
c0013fcb:	83 ec 14             	sub    esp,0x14
c0013fce:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0013fd2:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0013fd6:	89 d3                	mov    ebx,edx
c0013fd8:	0f b6 c6             	movzx  eax,dh
c0013fdb:	c1 eb 10             	shr    ebx,0x10
c0013fde:	48                   	dec    eax
c0013fdf:	66 81 eb 6c 07       	sub    bx,0x76c
c0013fe4:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0013fe8:	0f b6 f5             	movzx  esi,ch
c0013feb:	89 cf                	mov    edi,ecx
c0013fed:	6b f6 3c             	imul   esi,esi,0x3c
c0013ff0:	c1 ef 10             	shr    edi,0x10
c0013ff3:	0f b6 c9             	movzx  ecx,cl
c0013ff6:	89 f8                	mov    eax,edi
c0013ff8:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0013ffe:	0f b6 f8             	movzx  edi,al
c0014001:	0f b6 d2             	movzx  edx,dl
c0014004:	01 fe                	add    esi,edi
c0014006:	01 f1                	add    ecx,esi
c0014008:	0f b7 f3             	movzx  esi,bx
c001400b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001400f:	c1 f9 1f             	sar    ecx,0x1f
c0014012:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c0014017:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001401b:	0f b6 4c 24 07       	movzx  ecx,BYTE PTR [esp+0x7]
c0014020:	8b 0c 8d 80 ae 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd5180]
c0014027:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c001402b:	76 29                	jbe    c0014056 <datetimeToSeconds(datetime_t)+0x8f>
c001402d:	f6 c3 03             	test   bl,0x3
c0014030:	75 24                	jne    c0014056 <datetimeToSeconds(datetime_t)+0x8f>
c0014032:	31 d2                	xor    edx,edx
c0014034:	bf 64 00 00 00       	mov    edi,0x64
c0014039:	89 d8                	mov    eax,ebx
c001403b:	66 f7 f7             	div    di
c001403e:	66 85 d2             	test   dx,dx
c0014041:	75 12                	jne    c0014055 <datetimeToSeconds(datetime_t)+0x8e>
c0014043:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c0014049:	bf 90 01 00 00       	mov    edi,0x190
c001404e:	99                   	cdq    
c001404f:	f7 ff                	idiv   edi
c0014051:	85 d2                	test   edx,edx
c0014053:	75 01                	jne    c0014056 <datetimeToSeconds(datetime_t)+0x8f>
c0014055:	41                   	inc    ecx
c0014056:	66 83 fb 46          	cmp    bx,0x46
c001405a:	76 45                	jbe    c00140a1 <datetimeToSeconds(datetime_t)+0xda>
c001405c:	bb 46 00 00 00       	mov    ebx,0x46
c0014061:	bf 64 00 00 00       	mov    edi,0x64
c0014066:	bd 90 01 00 00       	mov    ebp,0x190
c001406b:	b8 6d 01 00 00       	mov    eax,0x16d
c0014070:	f6 c3 03             	test   bl,0x3
c0014073:	75 23                	jne    c0014098 <datetimeToSeconds(datetime_t)+0xd1>
c0014075:	89 d8                	mov    eax,ebx
c0014077:	99                   	cdq    
c0014078:	f7 ff                	idiv   edi
c001407a:	b8 6e 01 00 00       	mov    eax,0x16e
c001407f:	85 d2                	test   edx,edx
c0014081:	75 15                	jne    c0014098 <datetimeToSeconds(datetime_t)+0xd1>
c0014083:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c0014089:	99                   	cdq    
c001408a:	f7 fd                	idiv   ebp
c001408c:	83 fa 01             	cmp    edx,0x1
c001408f:	19 c0                	sbb    eax,eax
c0014091:	f7 d0                	not    eax
c0014093:	05 6e 01 00 00       	add    eax,0x16e
c0014098:	01 c1                	add    ecx,eax
c001409a:	43                   	inc    ebx
c001409b:	39 f3                	cmp    ebx,esi
c001409d:	7c cc                	jl     c001406b <datetimeToSeconds(datetime_t)+0xa4>
c001409f:	eb 35                	jmp    c00140d6 <datetimeToSeconds(datetime_t)+0x10f>
c00140a1:	74 33                	je     c00140d6 <datetimeToSeconds(datetime_t)+0x10f>
c00140a3:	b8 45 00 00 00       	mov    eax,0x45
c00140a8:	89 c2                	mov    edx,eax
c00140aa:	83 e2 03             	and    edx,0x3
c00140ad:	39 f0                	cmp    eax,esi
c00140af:	7e 0f                	jle    c00140c0 <datetimeToSeconds(datetime_t)+0xf9>
c00140b1:	83 fa 01             	cmp    edx,0x1
c00140b4:	19 d2                	sbb    edx,edx
c00140b6:	48                   	dec    eax
c00140b7:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c00140be:	eb e8                	jmp    c00140a8 <datetimeToSeconds(datetime_t)+0xe1>
c00140c0:	b8 6d 01 00 00       	mov    eax,0x16d
c00140c5:	85 d2                	test   edx,edx
c00140c7:	75 0b                	jne    c00140d4 <datetimeToSeconds(datetime_t)+0x10d>
c00140c9:	66 83 fb 01          	cmp    bx,0x1
c00140cd:	19 c0                	sbb    eax,eax
c00140cf:	05 6e 01 00 00       	add    eax,0x16e
c00140d4:	29 c1                	sub    ecx,eax
c00140d6:	b8 80 51 01 00       	mov    eax,0x15180
c00140db:	f7 e9                	imul   ecx
c00140dd:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00140e1:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00140e5:	83 c4 14             	add    esp,0x14
c00140e8:	5b                   	pop    ebx
c00140e9:	5e                   	pop    esi
c00140ea:	5f                   	pop    edi
c00140eb:	5d                   	pop    ebp
c00140ec:	c3                   	ret    
c00140ed:	90                   	nop

c00140ee <Clock::setTimeInDatetimeLocal(datetime_t)>:
c00140ee:	57                   	push   edi
c00140ef:	56                   	push   esi
c00140f0:	53                   	push   ebx
c00140f1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00140f5:	8b 06                	mov    eax,DWORD PTR [esi]
c00140f7:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c00140fa:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00140fe:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014102:	e8 c0 fe ff ff       	call   c0013fc7 <datetimeToSeconds(datetime_t)>
c0014107:	59                   	pop    ecx
c0014108:	0f b6 0d 74 e8 02 c0 	movzx  ecx,BYTE PTR ds:0xc002e874
c001410f:	5b                   	pop    ebx
c0014110:	03 0d 78 e8 02 c0    	add    ecx,DWORD PTR ds:0xc002e878
c0014116:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c001411c:	89 cb                	mov    ebx,ecx
c001411e:	c1 fb 1f             	sar    ebx,0x1f
c0014121:	29 c8                	sub    eax,ecx
c0014123:	19 da                	sbb    edx,ebx
c0014125:	31 c9                	xor    ecx,ecx
c0014127:	80 3d 75 e8 02 c0 00 	cmp    BYTE PTR ds:0xc002e875,0x0
c001412e:	74 05                	je     c0014135 <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c0014130:	b9 08 07 00 00       	mov    ecx,0x708
c0014135:	31 db                	xor    ebx,ebx
c0014137:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c001413b:	29 c8                	sub    eax,ecx
c001413d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014141:	19 da                	sbb    edx,ebx
c0014143:	89 f8                	mov    eax,edi
c0014145:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0014149:	5b                   	pop    ebx
c001414a:	5e                   	pop    esi
c001414b:	5f                   	pop    edi
c001414c:	ff e0                	jmp    eax

c001414e <secondsToDatetime(unsigned long long)>:
c001414e:	55                   	push   ebp
c001414f:	57                   	push   edi
c0014150:	56                   	push   esi
c0014151:	53                   	push   ebx
c0014152:	83 ec 1c             	sub    esp,0x1c
c0014155:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0014159:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001415d:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0014161:	6a 00                	push   0x0
c0014163:	68 80 51 01 00       	push   0x15180
c0014168:	55                   	push   ebp
c0014169:	57                   	push   edi
c001416a:	e8 2d 29 01 00       	call   c0026a9c <__udivdi3>
c001416f:	83 c4 10             	add    esp,0x10
c0014172:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c0014178:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001417c:	6a 00                	push   0x0
c001417e:	68 80 51 01 00       	push   0x15180
c0014183:	55                   	push   ebp
c0014184:	57                   	push   edi
c0014185:	bf 10 0e 00 00       	mov    edi,0xe10
c001418a:	e8 0d 2a 01 00       	call   c0026b9c <__umoddi3>
c001418f:	83 c4 10             	add    esp,0x10
c0014192:	99                   	cdq    
c0014193:	f7 ff                	idiv   edi
c0014195:	bf 3c 00 00 00       	mov    edi,0x3c
c001419a:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c001419d:	89 d0                	mov    eax,edx
c001419f:	99                   	cdq    
c00141a0:	f7 ff                	idiv   edi
c00141a2:	85 db                	test   ebx,ebx
c00141a4:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c00141a7:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c00141aa:	79 11                	jns    c00141bd <secondsToDatetime(unsigned long long)+0x6f>
c00141ac:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00141b0:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c00141b6:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c00141bb:	eb 07                	jmp    c00141c4 <secondsToDatetime(unsigned long long)+0x76>
c00141bd:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c00141c2:	89 d8                	mov    eax,ebx
c00141c4:	bf b4 05 00 00       	mov    edi,0x5b4
c00141c9:	99                   	cdq    
c00141ca:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c00141cf:	f7 f9                	idiv   ecx
c00141d1:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c00141d6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00141da:	31 d2                	xor    edx,edx
c00141dc:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c00141e4:	01 c3                	add    ebx,eax
c00141e6:	89 d8                	mov    eax,ebx
c00141e8:	f7 f1                	div    ecx
c00141ea:	31 d2                	xor    edx,edx
c00141ec:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c00141ef:	89 d8                	mov    eax,ebx
c00141f1:	f7 f7                	div    edi
c00141f3:	31 d2                	xor    edx,edx
c00141f5:	29 c1                	sub    ecx,eax
c00141f7:	89 d8                	mov    eax,ebx
c00141f9:	f7 f5                	div    ebp
c00141fb:	bd 6d 01 00 00       	mov    ebp,0x16d
c0014200:	29 c1                	sub    ecx,eax
c0014202:	31 d2                	xor    edx,edx
c0014204:	89 c8                	mov    eax,ecx
c0014206:	f7 f5                	div    ebp
c0014208:	bd 94 8e 00 00       	mov    ebp,0x8e94
c001420d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014211:	31 d2                	xor    edx,edx
c0014213:	89 c8                	mov    eax,ecx
c0014215:	f7 f5                	div    ebp
c0014217:	31 d2                	xor    edx,edx
c0014219:	01 c3                	add    ebx,eax
c001421b:	89 c8                	mov    eax,ecx
c001421d:	f7 f7                	div    edi
c001421f:	bf 99 00 00 00       	mov    edi,0x99
c0014224:	29 c3                	sub    ebx,eax
c0014226:	31 d2                	xor    edx,edx
c0014228:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c0014230:	29 c3                	sub    ebx,eax
c0014232:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0014235:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c0014238:	bb 05 00 00 00       	mov    ebx,0x5
c001423d:	83 c1 02             	add    ecx,0x2
c0014240:	89 c8                	mov    eax,ecx
c0014242:	f7 f7                	div    edi
c0014244:	31 d2                	xor    edx,edx
c0014246:	89 c7                	mov    edi,eax
c0014248:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c001424e:	83 c0 02             	add    eax,0x2
c0014251:	f7 f3                	div    ebx
c0014253:	89 eb                	mov    ebx,ebp
c0014255:	29 c3                	sub    ebx,eax
c0014257:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c001425d:	88 1e                	mov    BYTE PTR [esi],bl
c001425f:	19 c0                	sbb    eax,eax
c0014261:	31 d2                	xor    edx,edx
c0014263:	83 e0 0c             	and    eax,0xc
c0014266:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c001426a:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c0014272:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0014276:	83 f9 01             	cmp    ecx,0x1
c0014279:	0f 96 c2             	setbe  dl
c001427c:	41                   	inc    ecx
c001427d:	01 d0                	add    eax,edx
c001427f:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c0014282:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c0014286:	83 c4 1c             	add    esp,0x1c
c0014289:	89 f0                	mov    eax,esi
c001428b:	5b                   	pop    ebx
c001428c:	5e                   	pop    esi
c001428d:	5f                   	pop    edi
c001428e:	5d                   	pop    ebp
c001428f:	c2 04 00             	ret    0x4

c0014292 <Clock::timeInDatetimeLocal()>:
c0014292:	53                   	push   ebx
c0014293:	83 ec 14             	sub    esp,0x14
c0014296:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001429a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001429e:	e8 83 fc ff ff       	call   c0013f26 <Clock::timeInSecondsLocal()>
c00142a3:	83 c4 0c             	add    esp,0xc
c00142a6:	52                   	push   edx
c00142a7:	50                   	push   eax
c00142a8:	53                   	push   ebx
c00142a9:	e8 a0 fe ff ff       	call   c001414e <secondsToDatetime(unsigned long long)>
c00142ae:	89 d8                	mov    eax,ebx
c00142b0:	83 c4 14             	add    esp,0x14
c00142b3:	5b                   	pop    ebx
c00142b4:	c2 04 00             	ret    0x4
c00142b7:	90                   	nop

c00142b8 <Device::hibernate()>:
c00142b8:	c3                   	ret    
c00142b9:	90                   	nop

c00142ba <Device::wake()>:
c00142ba:	c3                   	ret    
c00142bb:	90                   	nop

c00142bc <Device::detect()>:
c00142bc:	c3                   	ret    
c00142bd:	90                   	nop

c00142be <Device::disableLegacy()>:
c00142be:	c3                   	ret    
c00142bf:	90                   	nop

c00142c0 <Device::powerSaving(PowerSavingLevel)>:
c00142c0:	c3                   	ret    
c00142c1:	90                   	nop

c00142c2 <DriverlessDevice::close(int, int, void*)>:
c00142c2:	31 c0                	xor    eax,eax
c00142c4:	c3                   	ret    
c00142c5:	90                   	nop

c00142c6 <DriverlessDevice::detect()>:
c00142c6:	c3                   	ret    
c00142c7:	90                   	nop

c00142c8 <DriverlessDevice::open(int, int, void*)>:
c00142c8:	83 ec 18             	sub    esp,0x18
c00142cb:	68 b0 ae 02 c0       	push   0xc002aeb0
c00142d0:	e8 c0 63 00 00       	call   c001a695 <Krnl::panic(char const*)>
c00142d5:	83 c8 ff             	or     eax,0xffffffff
c00142d8:	83 c4 1c             	add    esp,0x1c
c00142db:	c3                   	ret    

c00142dc <Device::~Device()>:
c00142dc:	ba d8 ae 02 c0       	mov    edx,0xc002aed8
c00142e1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00142e5:	89 10                	mov    DWORD PTR [eax],edx
c00142e7:	90                   	nop
c00142e8:	c3                   	ret    
c00142e9:	90                   	nop

c00142ea <Device::~Device()>:
c00142ea:	83 ec 0c             	sub    esp,0xc
c00142ed:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00142f1:	e8 e6 ff ff ff       	call   c00142dc <Device::~Device()>
c00142f6:	83 c4 04             	add    esp,0x4
c00142f9:	83 ec 08             	sub    esp,0x8
c00142fc:	68 58 01 00 00       	push   0x158
c0014301:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014305:	e8 f9 eb ff ff       	call   c0012f03 <operator delete(void*, unsigned long)>
c001430a:	83 c4 10             	add    esp,0x10
c001430d:	83 c4 0c             	add    esp,0xc
c0014310:	c3                   	ret    
c0014311:	90                   	nop

c0014312 <Device::findAndLoadDriver()>:
c0014312:	c3                   	ret    
c0014313:	90                   	nop

c0014314 <Device::preOpenPCI(PCIDeviceInfo)>:
c0014314:	57                   	push   edi
c0014315:	b9 09 00 00 00       	mov    ecx,0x9
c001431a:	56                   	push   esi
c001431b:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001431f:	8d 74 24 10          	lea    esi,[esp+0x10]
c0014323:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c001432d:	81 c7 18 01 00 00    	add    edi,0x118
c0014333:	fc                   	cld    
c0014334:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0014336:	5e                   	pop    esi
c0014337:	5f                   	pop    edi
c0014338:	c3                   	ret    
c0014339:	90                   	nop

c001433a <Device::preOpenACPI(void*, char*, char*)>:
c001433a:	56                   	push   esi
c001433b:	53                   	push   ebx
c001433c:	83 ec 08             	sub    esp,0x8
c001433f:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014343:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0014347:	c7 83 14 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x114],0x3
c0014351:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014355:	89 83 18 01 00 00    	mov    DWORD PTR [ebx+0x118],eax
c001435b:	6a 1e                	push   0x1e
c001435d:	8d 83 1c 01 00 00    	lea    eax,[ebx+0x11c]
c0014363:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0014367:	81 c3 3a 01 00 00    	add    ebx,0x13a
c001436d:	50                   	push   eax
c001436e:	e8 d1 c3 fe ff       	call   c0000744 <memcpy>
c0014373:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
c0014377:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c001437b:	c7 44 24 28 0e 00 00 00 	mov    DWORD PTR [esp+0x28],0xe
c0014383:	83 c4 14             	add    esp,0x14
c0014386:	5b                   	pop    ebx
c0014387:	5e                   	pop    esi
c0014388:	e9 b7 c3 fe ff       	jmp    c0000744 <memcpy>
c001438d:	90                   	nop

c001438e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c001438e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014392:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0014397:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c001439e:	75 0b                	jne    c00143ab <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1d>
c00143a0:	8b 00                	mov    eax,DWORD PTR [eax]
c00143a2:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00143a6:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00143a9:	eb 1e                	jmp    c00143c9 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3b>
c00143ab:	a1 e8 e6 02 c0       	mov    eax,ds:0xc002e6e8
c00143b0:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00143b6:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c00143bc:	8b 08                	mov    ecx,DWORD PTR [eax]
c00143be:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00143c2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00143c6:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c00143c9:	ff e0                	jmp    eax
c00143cb:	90                   	nop

c00143cc <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c00143cc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00143d0:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c00143d5:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c00143dc:	75 0b                	jne    c00143e9 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c00143de:	8b 00                	mov    eax,DWORD PTR [eax]
c00143e0:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00143e4:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c00143e7:	eb 1e                	jmp    c0014407 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x3b>
c00143e9:	a1 e8 e6 02 c0       	mov    eax,ds:0xc002e6e8
c00143ee:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00143f4:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c00143fa:	8b 08                	mov    ecx,DWORD PTR [eax]
c00143fc:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0014400:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014404:	8b 41 30             	mov    eax,DWORD PTR [ecx+0x30]
c0014407:	ff e0                	jmp    eax
c0014409:	90                   	nop

c001440a <Device::addChild(Device*)>:
c001440a:	53                   	push   ebx
c001440b:	83 ec 08             	sub    esp,0x8
c001440e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0014412:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014416:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c001441c:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c0014422:	8b 13                	mov    edx,DWORD PTR [ebx]
c0014424:	85 d2                	test   edx,edx
c0014426:	74 04                	je     c001442c <Device::addChild(Device*)+0x22>
c0014428:	89 d3                	mov    ebx,edx
c001442a:	eb f6                	jmp    c0014422 <Device::addChild(Device*)+0x18>
c001442c:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c001442f:	83 ec 0c             	sub    esp,0xc
c0014432:	6a 08                	push   0x8
c0014434:	e8 ab b4 ff ff       	call   c000f8e4 <malloc>
c0014439:	89 03                	mov    DWORD PTR [ebx],eax
c001443b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0014441:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0014448:	83 c4 18             	add    esp,0x18
c001444b:	5b                   	pop    ebx
c001444c:	c3                   	ret    
c001444d:	90                   	nop

c001444e <Device::removeAllChildren()>:
c001444e:	56                   	push   esi
c001444f:	53                   	push   ebx
c0014450:	52                   	push   edx
c0014451:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014455:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c001445b:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001445e:	74 17                	je     c0014477 <Device::removeAllChildren()+0x29>
c0014460:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0014463:	85 c0                	test   eax,eax
c0014465:	74 0c                	je     c0014473 <Device::removeAllChildren()+0x25>
c0014467:	83 ec 0c             	sub    esp,0xc
c001446a:	8b 10                	mov    edx,DWORD PTR [eax]
c001446c:	50                   	push   eax
c001446d:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0014470:	83 c4 10             	add    esp,0x10
c0014473:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0014475:	eb e4                	jmp    c001445b <Device::removeAllChildren()+0xd>
c0014477:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c001447d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0014483:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0014489:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0014490:	58                   	pop    eax
c0014491:	5b                   	pop    ebx
c0014492:	5e                   	pop    esi
c0014493:	c3                   	ret    

c0014494 <Device::hibernateAll()>:
c0014494:	53                   	push   ebx
c0014495:	83 ec 14             	sub    esp,0x14
c0014498:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001449c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001449e:	53                   	push   ebx
c001449f:	ff 50 10             	call   DWORD PTR [eax+0x10]
c00144a2:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00144a8:	83 c4 10             	add    esp,0x10
c00144ab:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00144ae:	74 0f                	je     c00144bf <Device::hibernateAll()+0x2b>
c00144b0:	83 ec 0c             	sub    esp,0xc
c00144b3:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00144b6:	e8 d9 ff ff ff       	call   c0014494 <Device::hibernateAll()>
c00144bb:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00144bd:	eb e9                	jmp    c00144a8 <Device::hibernateAll()+0x14>
c00144bf:	83 c4 08             	add    esp,0x8
c00144c2:	5b                   	pop    ebx
c00144c3:	c3                   	ret    

c00144c4 <Device::wakeAll()>:
c00144c4:	53                   	push   ebx
c00144c5:	83 ec 14             	sub    esp,0x14
c00144c8:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00144cc:	8b 03                	mov    eax,DWORD PTR [ebx]
c00144ce:	53                   	push   ebx
c00144cf:	ff 50 14             	call   DWORD PTR [eax+0x14]
c00144d2:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00144d8:	83 c4 10             	add    esp,0x10
c00144db:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00144de:	74 0f                	je     c00144ef <Device::wakeAll()+0x2b>
c00144e0:	83 ec 0c             	sub    esp,0xc
c00144e3:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00144e6:	e8 d9 ff ff ff       	call   c00144c4 <Device::wakeAll()>
c00144eb:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00144ed:	eb e9                	jmp    c00144d8 <Device::wakeAll()+0x14>
c00144ef:	83 c4 08             	add    esp,0x8
c00144f2:	5b                   	pop    ebx
c00144f3:	c3                   	ret    

c00144f4 <Device::detectAll()>:
c00144f4:	53                   	push   ebx
c00144f5:	83 ec 14             	sub    esp,0x14
c00144f8:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00144fc:	8b 03                	mov    eax,DWORD PTR [ebx]
c00144fe:	53                   	push   ebx
c00144ff:	ff 50 18             	call   DWORD PTR [eax+0x18]
c0014502:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0014508:	83 c4 10             	add    esp,0x10
c001450b:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001450e:	74 0f                	je     c001451f <Device::detectAll()+0x2b>
c0014510:	83 ec 0c             	sub    esp,0xc
c0014513:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0014516:	e8 d9 ff ff ff       	call   c00144f4 <Device::detectAll()>
c001451b:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001451d:	eb e9                	jmp    c0014508 <Device::detectAll()+0x14>
c001451f:	83 c4 08             	add    esp,0x8
c0014522:	5b                   	pop    ebx
c0014523:	c3                   	ret    

c0014524 <Device::disableLegacyAll()>:
c0014524:	53                   	push   ebx
c0014525:	83 ec 14             	sub    esp,0x14
c0014528:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001452c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001452e:	53                   	push   ebx
c001452f:	ff 50 1c             	call   DWORD PTR [eax+0x1c]
c0014532:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0014538:	83 c4 10             	add    esp,0x10
c001453b:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001453e:	74 0f                	je     c001454f <Device::disableLegacyAll()+0x2b>
c0014540:	83 ec 0c             	sub    esp,0xc
c0014543:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0014546:	e8 d9 ff ff ff       	call   c0014524 <Device::disableLegacyAll()>
c001454b:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001454d:	eb e9                	jmp    c0014538 <Device::disableLegacyAll()+0x14>
c001454f:	83 c4 08             	add    esp,0x8
c0014552:	5b                   	pop    ebx
c0014553:	c3                   	ret    

c0014554 <Device::loadDriversForAll()>:
c0014554:	53                   	push   ebx
c0014555:	83 ec 08             	sub    esp,0x8
c0014558:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001455c:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0014562:	8b 18                	mov    ebx,DWORD PTR [eax]
c0014564:	85 db                	test   ebx,ebx
c0014566:	74 12                	je     c001457a <Device::loadDriversForAll()+0x26>
c0014568:	83 ec 0c             	sub    esp,0xc
c001456b:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001456e:	e8 e1 ff ff ff       	call   c0014554 <Device::loadDriversForAll()>
c0014573:	83 c4 10             	add    esp,0x10
c0014576:	89 d8                	mov    eax,ebx
c0014578:	eb e8                	jmp    c0014562 <Device::loadDriversForAll()+0xe>
c001457a:	83 c4 08             	add    esp,0x8
c001457d:	5b                   	pop    ebx
c001457e:	c3                   	ret    
c001457f:	90                   	nop

c0014580 <Device::closeAll()>:
c0014580:	53                   	push   ebx
c0014581:	83 ec 08             	sub    esp,0x8
c0014584:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014588:	8b 03                	mov    eax,DWORD PTR [ebx]
c001458a:	6a 00                	push   0x0
c001458c:	6a 00                	push   0x0
c001458e:	6a 00                	push   0x0
c0014590:	53                   	push   ebx
c0014591:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014594:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001459a:	83 c4 10             	add    esp,0x10
c001459d:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00145a0:	74 0f                	je     c00145b1 <Device::closeAll()+0x31>
c00145a2:	83 ec 0c             	sub    esp,0xc
c00145a5:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00145a8:	e8 d3 ff ff ff       	call   c0014580 <Device::closeAll()>
c00145ad:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00145af:	eb e9                	jmp    c001459a <Device::closeAll()+0x1a>
c00145b1:	83 c4 08             	add    esp,0x8
c00145b4:	5b                   	pop    ebx
c00145b5:	c3                   	ret    

c00145b6 <Device::powerSavingAll(PowerSavingLevel)>:
c00145b6:	56                   	push   esi
c00145b7:	53                   	push   ebx
c00145b8:	83 ec 0c             	sub    esp,0xc
c00145bb:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00145bf:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00145c3:	8b 03                	mov    eax,DWORD PTR [ebx]
c00145c5:	56                   	push   esi
c00145c6:	53                   	push   ebx
c00145c7:	ff 50 20             	call   DWORD PTR [eax+0x20]
c00145ca:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00145d0:	83 c4 10             	add    esp,0x10
c00145d3:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00145d6:	74 0f                	je     c00145e7 <Device::powerSavingAll(PowerSavingLevel)+0x31>
c00145d8:	52                   	push   edx
c00145d9:	52                   	push   edx
c00145da:	56                   	push   esi
c00145db:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00145de:	e8 d3 ff ff ff       	call   c00145b6 <Device::powerSavingAll(PowerSavingLevel)>
c00145e3:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00145e5:	eb e9                	jmp    c00145d0 <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c00145e7:	58                   	pop    eax
c00145e8:	5b                   	pop    ebx
c00145e9:	5e                   	pop    esi
c00145ea:	c3                   	ret    
c00145eb:	90                   	nop

c00145ec <Device::setName(char const*)>:
c00145ec:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c00145f4:	e9 3b c2 fe ff       	jmp    c0000834 <strcpy>
c00145f9:	90                   	nop

c00145fa <Device::Device(char const*)>:
c00145fa:	83 ec 1c             	sub    esp,0x1c
c00145fd:	ba d8 ae 02 c0       	mov    edx,0xc002aed8
c0014602:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014606:	89 10                	mov    DWORD PTR [eax],edx
c0014608:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001460c:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c0014616:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001461a:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c0014624:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014628:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0014632:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014636:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c0014640:	83 ec 08             	sub    esp,0x8
c0014643:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014647:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001464b:	e8 9c ff ff ff       	call   c00145ec <Device::setName(char const*)>
c0014650:	83 c4 10             	add    esp,0x10
c0014653:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c001465b:	83 ec 0c             	sub    esp,0xc
c001465e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014662:	e8 7d b2 ff ff       	call   c000f8e4 <malloc>
c0014667:	83 c4 10             	add    esp,0x10
c001466a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0014670:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0014677:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001467b:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c0014681:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014685:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c001468b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0014691:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014695:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c001469b:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00146a2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00146a6:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c00146ad:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00146b1:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c00146b8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00146bc:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c00146c6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00146ca:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c00146d4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00146d8:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c00146e2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00146e6:	c7 80 10 01 00 00 12 00 00 00 	mov    DWORD PTR [eax+0x110],0x12
c00146f0:	90                   	nop
c00146f1:	83 c4 1c             	add    esp,0x1c
c00146f4:	c3                   	ret    
c00146f5:	90                   	nop

c00146f6 <Device::getName()>:
c00146f6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00146fa:	05 d0 00 00 00       	add    eax,0xd0
c00146ff:	c3                   	ret    

c0014700 <DriverlessDevice::DriverlessDevice(char const*)>:
c0014700:	83 ec 0c             	sub    esp,0xc
c0014703:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014707:	83 ec 08             	sub    esp,0x8
c001470a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001470e:	50                   	push   eax
c001470f:	e8 e6 fe ff ff       	call   c00145fa <Device::Device(char const*)>
c0014714:	83 c4 10             	add    esp,0x10
c0014717:	ba 04 af 02 c0       	mov    edx,0xc002af04
c001471c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014720:	89 10                	mov    DWORD PTR [eax],edx
c0014722:	90                   	nop
c0014723:	83 c4 0c             	add    esp,0xc
c0014726:	c3                   	ret    
c0014727:	90                   	nop

c0014728 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c0014728:	57                   	push   edi
c0014729:	56                   	push   esi
c001472a:	53                   	push   ebx
c001472b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001472f:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0014733:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0014737:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c001473d:	75 0c                	jne    c001474b <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c001473f:	52                   	push   edx
c0014740:	52                   	push   edx
c0014741:	53                   	push   ebx
c0014742:	56                   	push   esi
c0014743:	e8 92 42 01 00       	call   c00289da <LinkedList<Device>::addElement(Device*)>
c0014748:	83 c4 10             	add    esp,0x10
c001474b:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0014751:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0014754:	74 12                	je     c0014768 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c0014756:	50                   	push   eax
c0014757:	57                   	push   edi
c0014758:	56                   	push   esi
c0014759:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001475c:	e8 c7 ff ff ff       	call   c0014728 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c0014761:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0014763:	83 c4 10             	add    esp,0x10
c0014766:	eb e9                	jmp    c0014751 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c0014768:	5b                   	pop    ebx
c0014769:	5e                   	pop    esi
c001476a:	5f                   	pop    edi
c001476b:	c3                   	ret    

c001476c <getDevicesOfType(DeviceType)>:
c001476c:	53                   	push   ebx
c001476d:	83 ec 14             	sub    esp,0x14
c0014770:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014774:	53                   	push   ebx
c0014775:	e8 3c 43 01 00       	call   c0028ab6 <LinkedList<Device>::LinkedList()>
c001477a:	83 c4 0c             	add    esp,0xc
c001477d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014781:	53                   	push   ebx
c0014782:	ff 35 e8 e6 02 c0    	push   DWORD PTR ds:0xc002e6e8
c0014788:	e8 9b ff ff ff       	call   c0014728 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c001478d:	89 d8                	mov    eax,ebx
c001478f:	83 c4 18             	add    esp,0x18
c0014792:	5b                   	pop    ebx
c0014793:	c2 04 00             	ret    0x4

c0014796 <HardDiskController::HardDiskController(char const*)>:
c0014796:	83 ec 0c             	sub    esp,0xc
c0014799:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001479d:	83 ec 08             	sub    esp,0x8
c00147a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00147a4:	50                   	push   eax
c00147a5:	e8 50 fe ff ff       	call   c00145fa <Device::Device(char const*)>
c00147aa:	83 c4 10             	add    esp,0x10
c00147ad:	ba 30 af 02 c0       	mov    edx,0xc002af30
c00147b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00147b6:	89 10                	mov    DWORD PTR [eax],edx
c00147b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00147bc:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c00147c6:	90                   	nop
c00147c7:	83 c4 0c             	add    esp,0xc
c00147ca:	c3                   	ret    
c00147cb:	90                   	nop

c00147cc <HardDiskController::~HardDiskController()>:
c00147cc:	83 ec 0c             	sub    esp,0xc
c00147cf:	ba 30 af 02 c0       	mov    edx,0xc002af30
c00147d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00147d8:	89 10                	mov    DWORD PTR [eax],edx
c00147da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00147de:	83 ec 0c             	sub    esp,0xc
c00147e1:	50                   	push   eax
c00147e2:	e8 f5 fa ff ff       	call   c00142dc <Device::~Device()>
c00147e7:	83 c4 10             	add    esp,0x10
c00147ea:	90                   	nop
c00147eb:	83 c4 0c             	add    esp,0xc
c00147ee:	c3                   	ret    
c00147ef:	90                   	nop

c00147f0 <HardDiskController::~HardDiskController()>:
c00147f0:	83 ec 0c             	sub    esp,0xc
c00147f3:	83 ec 0c             	sub    esp,0xc
c00147f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00147fa:	e8 cd ff ff ff       	call   c00147cc <HardDiskController::~HardDiskController()>
c00147ff:	83 c4 10             	add    esp,0x10
c0014802:	83 ec 08             	sub    esp,0x8
c0014805:	68 58 01 00 00       	push   0x158
c001480a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001480e:	e8 f0 e6 ff ff       	call   c0012f03 <operator delete(void*, unsigned long)>
c0014813:	83 c4 10             	add    esp,0x10
c0014816:	83 c4 0c             	add    esp,0xc
c0014819:	c3                   	ret    

c001481a <PhysicalDisk::eject()>:
c001481a:	83 ec 18             	sub    esp,0x18
c001481d:	68 54 af 02 c0       	push   0xc002af54
c0014822:	e8 bc e7 ff ff       	call   c0012fe3 <Dbg::kprintf(char const*, ...)>
c0014827:	83 c8 ff             	or     eax,0xffffffff
c001482a:	83 c4 1c             	add    esp,0x1c
c001482d:	c3                   	ret    

c001482e <PhysicalDisk::PhysicalDisk(char const*, int)>:
c001482e:	83 ec 0c             	sub    esp,0xc
c0014831:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014835:	83 ec 08             	sub    esp,0x8
c0014838:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001483c:	50                   	push   eax
c001483d:	e8 b8 fd ff ff       	call   c00145fa <Device::Device(char const*)>
c0014842:	83 c4 10             	add    esp,0x10
c0014845:	ba 84 af 02 c0       	mov    edx,0xc002af84
c001484a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001484e:	89 10                	mov    DWORD PTR [eax],edx
c0014850:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014854:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c001485b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001485f:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c0014866:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001486a:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c0014874:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014878:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001487c:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0014882:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014886:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0014890:	90                   	nop
c0014891:	83 c4 0c             	add    esp,0xc
c0014894:	c3                   	ret    
c0014895:	90                   	nop

c0014896 <PhysicalDisk::startCache()>:
c0014896:	56                   	push   esi
c0014897:	53                   	push   ebx
c0014898:	83 ec 10             	sub    esp,0x10
c001489b:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001489f:	6a 44                	push   0x44
c00148a1:	e8 3e b0 ff ff       	call   c000f8e4 <malloc>
c00148a6:	89 c6                	mov    esi,eax
c00148a8:	58                   	pop    eax
c00148a9:	5a                   	pop    edx
c00148aa:	53                   	push   ebx
c00148ab:	56                   	push   esi
c00148ac:	e8 39 27 00 00       	call   c0016fea <VCache::VCache(PhysicalDisk*)>
c00148b1:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c00148b7:	83 c4 14             	add    esp,0x14
c00148ba:	5b                   	pop    ebx
c00148bb:	5e                   	pop    esi
c00148bc:	c3                   	ret    
c00148bd:	90                   	nop

c00148be <PhysicalDisk::~PhysicalDisk()>:
c00148be:	83 ec 0c             	sub    esp,0xc
c00148c1:	ba 84 af 02 c0       	mov    edx,0xc002af84
c00148c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00148ca:	89 10                	mov    DWORD PTR [eax],edx
c00148cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00148d0:	83 ec 0c             	sub    esp,0xc
c00148d3:	50                   	push   eax
c00148d4:	e8 03 fa ff ff       	call   c00142dc <Device::~Device()>
c00148d9:	83 c4 10             	add    esp,0x10
c00148dc:	90                   	nop
c00148dd:	83 c4 0c             	add    esp,0xc
c00148e0:	c3                   	ret    
c00148e1:	90                   	nop

c00148e2 <PhysicalDisk::~PhysicalDisk()>:
c00148e2:	83 ec 0c             	sub    esp,0xc
c00148e5:	83 ec 0c             	sub    esp,0xc
c00148e8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00148ec:	e8 cd ff ff ff       	call   c00148be <PhysicalDisk::~PhysicalDisk()>
c00148f1:	83 c4 10             	add    esp,0x10
c00148f4:	83 ec 08             	sub    esp,0x8
c00148f7:	68 6c 01 00 00       	push   0x16c
c00148fc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014900:	e8 fe e5 ff ff       	call   c0012f03 <operator delete(void*, unsigned long)>
c0014905:	83 c4 10             	add    esp,0x10
c0014908:	83 c4 0c             	add    esp,0xc
c001490b:	c3                   	ret    

c001490c <FPU::FPU(char const*)>:
c001490c:	83 ec 0c             	sub    esp,0xc
c001490f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014913:	83 ec 08             	sub    esp,0x8
c0014916:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001491a:	50                   	push   eax
c001491b:	e8 da fc ff ff       	call   c00145fa <Device::Device(char const*)>
c0014920:	83 c4 10             	add    esp,0x10
c0014923:	ba c8 af 02 c0       	mov    edx,0xc002afc8
c0014928:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001492c:	89 10                	mov    DWORD PTR [eax],edx
c001492e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014932:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c001493c:	90                   	nop
c001493d:	83 c4 0c             	add    esp,0xc
c0014940:	c3                   	ret    
c0014941:	90                   	nop

c0014942 <FPU::~FPU()>:
c0014942:	83 ec 0c             	sub    esp,0xc
c0014945:	ba c8 af 02 c0       	mov    edx,0xc002afc8
c001494a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001494e:	89 10                	mov    DWORD PTR [eax],edx
c0014950:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014954:	83 ec 0c             	sub    esp,0xc
c0014957:	50                   	push   eax
c0014958:	e8 7f f9 ff ff       	call   c00142dc <Device::~Device()>
c001495d:	83 c4 10             	add    esp,0x10
c0014960:	90                   	nop
c0014961:	83 c4 0c             	add    esp,0xc
c0014964:	c3                   	ret    
c0014965:	90                   	nop

c0014966 <FPU::~FPU()>:
c0014966:	83 ec 0c             	sub    esp,0xc
c0014969:	83 ec 0c             	sub    esp,0xc
c001496c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014970:	e8 cd ff ff ff       	call   c0014942 <FPU::~FPU()>
c0014975:	83 c4 10             	add    esp,0x10
c0014978:	83 ec 08             	sub    esp,0x8
c001497b:	68 58 01 00 00       	push   0x158
c0014980:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014984:	e8 7a e5 ff ff       	call   c0012f03 <operator delete(void*, unsigned long)>
c0014989:	83 c4 10             	add    esp,0x10
c001498c:	83 c4 0c             	add    esp,0xc
c001498f:	c3                   	ret    

c0014990 <setupFPU()>:
c0014990:	53                   	push   ebx
c0014991:	83 ec 08             	sub    esp,0x8
c0014994:	8b 15 e8 e6 02 c0    	mov    edx,DWORD PTR ds:0xc002e6e8
c001499a:	f6 82 e9 01 00 00 20 	test   BYTE PTR [edx+0x1e9],0x20
c00149a1:	74 19                	je     c00149bc <setupFPU()+0x2c>
c00149a3:	83 ec 0c             	sub    esp,0xc
c00149a6:	68 58 01 00 00       	push   0x158
c00149ab:	e8 34 af ff ff       	call   c000f8e4 <malloc>
c00149b0:	89 c3                	mov    ebx,eax
c00149b2:	89 04 24             	mov    DWORD PTR [esp],eax
c00149b5:	e8 66 0c 01 00       	call   c0025620 <AVX::AVX()>
c00149ba:	eb 5b                	jmp    c0014a17 <setupFPU()+0x87>
c00149bc:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c00149c2:	84 c0                	test   al,al
c00149c4:	79 19                	jns    c00149df <setupFPU()+0x4f>
c00149c6:	83 ec 0c             	sub    esp,0xc
c00149c9:	68 58 01 00 00       	push   0x158
c00149ce:	e8 11 af ff ff       	call   c000f8e4 <malloc>
c00149d3:	89 c3                	mov    ebx,eax
c00149d5:	89 04 24             	mov    DWORD PTR [esp],eax
c00149d8:	e8 69 0d 01 00       	call   c0025746 <SSE::SSE()>
c00149dd:	eb 38                	jmp    c0014a17 <setupFPU()+0x87>
c00149df:	a8 20                	test   al,0x20
c00149e1:	74 19                	je     c00149fc <setupFPU()+0x6c>
c00149e3:	83 ec 0c             	sub    esp,0xc
c00149e6:	68 58 01 00 00       	push   0x158
c00149eb:	e8 f4 ae ff ff       	call   c000f8e4 <malloc>
c00149f0:	89 c3                	mov    ebx,eax
c00149f2:	89 04 24             	mov    DWORD PTR [esp],eax
c00149f5:	e8 b6 0c 01 00       	call   c00256b0 <MMX::MMX()>
c00149fa:	eb 1b                	jmp    c0014a17 <setupFPU()+0x87>
c00149fc:	a8 10                	test   al,0x10
c00149fe:	74 1c                	je     c0014a1c <setupFPU()+0x8c>
c0014a00:	83 ec 0c             	sub    esp,0xc
c0014a03:	68 58 01 00 00       	push   0x158
c0014a08:	e8 d7 ae ff ff       	call   c000f8e4 <malloc>
c0014a0d:	89 c3                	mov    ebx,eax
c0014a0f:	89 04 24             	mov    DWORD PTR [esp],eax
c0014a12:	e8 bd 0d 01 00       	call   c00257d4 <x87::x87()>
c0014a17:	83 c4 10             	add    esp,0x10
c0014a1a:	eb 24                	jmp    c0014a40 <setupFPU()+0xb0>
c0014a1c:	83 e0 ef             	and    eax,0xffffffef
c0014a1f:	83 ec 0c             	sub    esp,0xc
c0014a22:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c0014a28:	68 b4 af 02 c0       	push   0xc002afb4
c0014a2d:	e8 b1 e5 ff ff       	call   c0012fe3 <Dbg::kprintf(char const*, ...)>
c0014a32:	0f 20 c0             	mov    eax,cr0
c0014a35:	83 c8 04             	or     eax,0x4
c0014a38:	0f 22 c0             	mov    cr0,eax
c0014a3b:	31 db                	xor    ebx,ebx
c0014a3d:	83 c4 10             	add    esp,0x10
c0014a40:	89 d8                	mov    eax,ebx
c0014a42:	83 c4 08             	add    esp,0x8
c0014a45:	5b                   	pop    ebx
c0014a46:	c3                   	ret    
c0014a47:	90                   	nop

c0014a48 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))>:
c0014a48:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0014a4c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0014a50:	c1 e0 04             	shl    eax,0x4
c0014a53:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0014a57:	8d 50 10             	lea    edx,[eax+0x10]
c0014a5a:	39 88 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ecx
c0014a60:	74 08                	je     c0014a6a <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x22>
c0014a62:	83 c0 04             	add    eax,0x4
c0014a65:	39 d0                	cmp    eax,edx
c0014a67:	75 f1                	jne    c0014a5a <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x12>
c0014a69:	c3                   	ret    
c0014a6a:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0014a74:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c0014a7e:	eb e2                	jmp    c0014a62 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x1a>

c0014a80 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)>:
c0014a80:	57                   	push   edi
c0014a81:	31 c0                	xor    eax,eax
c0014a83:	56                   	push   esi
c0014a84:	53                   	push   ebx
c0014a85:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0014a89:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014a8d:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0014a91:	89 da                	mov    edx,ebx
c0014a93:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0014a97:	c1 e2 04             	shl    edx,0x4
c0014a9a:	01 ca                	add    edx,ecx
c0014a9c:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c0014aa4:	74 16                	je     c0014abc <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x3c>
c0014aa6:	40                   	inc    eax
c0014aa7:	83 f8 04             	cmp    eax,0x4
c0014aaa:	75 f0                	jne    c0014a9c <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x1c>
c0014aac:	c7 44 24 10 f8 af 02 c0 	mov    DWORD PTR [esp+0x10],0xc002aff8
c0014ab4:	5b                   	pop    ebx
c0014ab5:	5e                   	pop    esi
c0014ab6:	5f                   	pop    edi
c0014ab7:	e9 d9 5b 00 00       	jmp    c001a695 <Krnl::panic(char const*)>
c0014abc:	8d 04 98             	lea    eax,[eax+ebx*4]
c0014abf:	8d 04 81             	lea    eax,[ecx+eax*4]
c0014ac2:	89 b0 58 01 00 00    	mov    DWORD PTR [eax+0x158],esi
c0014ac8:	89 b8 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edi
c0014ace:	5b                   	pop    ebx
c0014acf:	5e                   	pop    esi
c0014ad0:	5f                   	pop    edi
c0014ad1:	c3                   	ret    

c0014ad2 <doubleFault(regs*, void*)>:
c0014ad2:	55                   	push   ebp
c0014ad3:	89 e5                	mov    ebp,esp
c0014ad5:	83 ec 08             	sub    esp,0x8
c0014ad8:	83 ec 0c             	sub    esp,0xc
c0014adb:	68 33 b0 02 c0       	push   0xc002b033
c0014ae0:	e8 b0 5b 00 00       	call   c001a695 <Krnl::panic(char const*)>
c0014ae5:	83 c4 10             	add    esp,0x10
c0014ae8:	90                   	nop
c0014ae9:	c9                   	leave  
c0014aea:	c3                   	ret    
c0014aeb:	90                   	nop

c0014aec <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0014aec:	56                   	push   esi
c0014aed:	53                   	push   ebx
c0014aee:	50                   	push   eax
c0014aef:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014af3:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014af7:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0014afc:	75 35                	jne    c0014b33 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x47>
c0014afe:	8d 43 20             	lea    eax,[ebx+0x20]
c0014b01:	31 d2                	xor    edx,edx
c0014b03:	89 c1                	mov    ecx,eax
c0014b05:	c1 e1 04             	shl    ecx,0x4
c0014b08:	01 f1                	add    ecx,esi
c0014b0a:	83 bc 91 58 01 00 00 00 	cmp    DWORD PTR [ecx+edx*4+0x158],0x0
c0014b12:	74 3e                	je     c0014b52 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x66>
c0014b14:	42                   	inc    edx
c0014b15:	83 fa 04             	cmp    edx,0x4
c0014b18:	75 f0                	jne    c0014b0a <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1e>
c0014b1a:	83 ec 0c             	sub    esp,0xc
c0014b1d:	68 78 b0 02 c0       	push   0xc002b078
c0014b22:	e8 6e 5b 00 00       	call   c001a695 <Krnl::panic(char const*)>
c0014b27:	83 c4 10             	add    esp,0x10
c0014b2a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0014b2f:	5a                   	pop    edx
c0014b30:	5b                   	pop    ebx
c0014b31:	5e                   	pop    esi
c0014b32:	c3                   	ret    
c0014b33:	83 ec 0c             	sub    esp,0xc
c0014b36:	56                   	push   esi
c0014b37:	e8 ba fb ff ff       	call   c00146f6 <Device::getName()>
c0014b3c:	83 c4 10             	add    esp,0x10
c0014b3f:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0014b42:	75 ba                	jne    c0014afe <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0014b44:	83 fb 0f             	cmp    ebx,0xf
c0014b47:	7f 29                	jg     c0014b72 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x86>
c0014b49:	0f b6 9b 40 d9 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffd26c0]
c0014b50:	eb ac                	jmp    c0014afe <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0014b52:	8d 04 82             	lea    eax,[edx+eax*4]
c0014b55:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0014b59:	8d 04 86             	lea    eax,[esi+eax*4]
c0014b5c:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0014b62:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0014b66:	89 90 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edx
c0014b6c:	89 d8                	mov    eax,ebx
c0014b6e:	5a                   	pop    edx
c0014b6f:	5b                   	pop    ebx
c0014b70:	5e                   	pop    esi
c0014b71:	c3                   	ret    
c0014b72:	83 ec 0c             	sub    esp,0xc
c0014b75:	68 40 b0 02 c0       	push   0xc002b040
c0014b7a:	e8 16 5b 00 00       	call   c001a695 <Krnl::panic(char const*)>
c0014b7f:	83 c4 10             	add    esp,0x10
c0014b82:	e9 77 ff ff ff       	jmp    c0014afe <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0014b87:	90                   	nop

c0014b88 <InterruptController::clearAllHandlers(int, bool)>:
c0014b88:	56                   	push   esi
c0014b89:	53                   	push   ebx
c0014b8a:	52                   	push   edx
c0014b8b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014b8f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0014b93:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0014b98:	75 61                	jne    c0014bfb <InterruptController::clearAllHandlers(int, bool)+0x73>
c0014b9a:	8d 46 20             	lea    eax,[esi+0x20]
c0014b9d:	c1 e6 04             	shl    esi,0x4
c0014ba0:	c1 e0 04             	shl    eax,0x4
c0014ba3:	01 de                	add    esi,ebx
c0014ba5:	01 d8                	add    eax,ebx
c0014ba7:	c7 86 58 03 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x358],0x0
c0014bb1:	c7 86 58 13 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x1358],0x0
c0014bbb:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c0014bc5:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c0014bcf:	c7 80 60 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x160],0x0
c0014bd9:	c7 80 60 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1160],0x0
c0014be3:	c7 80 64 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x164],0x0
c0014bed:	c7 80 64 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1164],0x0
c0014bf7:	58                   	pop    eax
c0014bf8:	5b                   	pop    ebx
c0014bf9:	5e                   	pop    esi
c0014bfa:	c3                   	ret    
c0014bfb:	83 ec 0c             	sub    esp,0xc
c0014bfe:	53                   	push   ebx
c0014bff:	e8 f2 fa ff ff       	call   c00146f6 <Device::getName()>
c0014c04:	83 c4 10             	add    esp,0x10
c0014c07:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0014c0a:	75 8e                	jne    c0014b9a <InterruptController::clearAllHandlers(int, bool)+0x12>
c0014c0c:	83 fe 0f             	cmp    esi,0xf
c0014c0f:	7f 09                	jg     c0014c1a <InterruptController::clearAllHandlers(int, bool)+0x92>
c0014c11:	0f b6 b6 40 d9 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffd26c0]
c0014c18:	eb 80                	jmp    c0014b9a <InterruptController::clearAllHandlers(int, bool)+0x12>
c0014c1a:	83 ec 0c             	sub    esp,0xc
c0014c1d:	68 b4 b0 02 c0       	push   0xc002b0b4
c0014c22:	e8 6e 5a 00 00       	call   c001a695 <Krnl::panic(char const*)>
c0014c27:	83 c4 10             	add    esp,0x10
c0014c2a:	e9 6b ff ff ff       	jmp    c0014b9a <InterruptController::clearAllHandlers(int, bool)+0x12>
c0014c2f:	90                   	nop

c0014c30 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c0014c30:	56                   	push   esi
c0014c31:	53                   	push   ebx
c0014c32:	52                   	push   edx
c0014c33:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014c37:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0014c3b:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0014c40:	75 3a                	jne    c0014c7c <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x4c>
c0014c42:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014c46:	8d 50 20             	lea    edx,[eax+0x20]
c0014c49:	c1 e2 04             	shl    edx,0x4
c0014c4c:	8d 04 16             	lea    eax,[esi+edx*1]
c0014c4f:	8d 54 16 10          	lea    edx,[esi+edx*1+0x10]
c0014c53:	39 98 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ebx
c0014c59:	74 0b                	je     c0014c66 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x36>
c0014c5b:	83 c0 04             	add    eax,0x4
c0014c5e:	39 d0                	cmp    eax,edx
c0014c60:	75 f1                	jne    c0014c53 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x23>
c0014c62:	58                   	pop    eax
c0014c63:	5b                   	pop    ebx
c0014c64:	5e                   	pop    esi
c0014c65:	c3                   	ret    
c0014c66:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0014c70:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c0014c7a:	eb df                	jmp    c0014c5b <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2b>
c0014c7c:	83 ec 0c             	sub    esp,0xc
c0014c7f:	56                   	push   esi
c0014c80:	e8 71 fa ff ff       	call   c00146f6 <Device::getName()>
c0014c85:	83 c4 10             	add    esp,0x10
c0014c88:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0014c8b:	75 b5                	jne    c0014c42 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c0014c8d:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c0014c92:	7f 11                	jg     c0014ca5 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x75>
c0014c94:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014c98:	0f b6 80 40 d9 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd26c0]
c0014c9f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014ca3:	eb 9d                	jmp    c0014c42 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c0014ca5:	83 ec 0c             	sub    esp,0xc
c0014ca8:	68 b4 b0 02 c0       	push   0xc002b0b4
c0014cad:	e8 e3 59 00 00       	call   c001a695 <Krnl::panic(char const*)>
c0014cb2:	83 c4 10             	add    esp,0x10
c0014cb5:	eb 8b                	jmp    c0014c42 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>

c0014cb7 <nmiHandler(regs*, void*)>:
c0014cb7:	a1 e8 e6 02 c0       	mov    eax,ds:0xc002e6e8
c0014cbc:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014cc0:	e9 6b a3 ff ff       	jmp    c000f030 <Computer::handleNMI()>

c0014cc5 <int_handler>:
c0014cc5:	55                   	push   ebp
c0014cc6:	57                   	push   edi
c0014cc7:	56                   	push   esi
c0014cc8:	53                   	push   ebx
c0014cc9:	83 ec 0c             	sub    esp,0xc
c0014ccc:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0014cd0:	80 3d 44 12 03 c0 00 	cmp    BYTE PTR ds:0xc0031244,0x0
c0014cd7:	74 0b                	je     c0014ce4 <int_handler+0x1f>
c0014cd9:	fa                   	cli    
c0014cda:	f4                   	hlt    
c0014cdb:	80 3d 44 12 03 c0 00 	cmp    BYTE PTR ds:0xc0031244,0x0
c0014ce2:	75 f5                	jne    c0014cd9 <int_handler+0x14>
c0014ce4:	a1 e8 e6 02 c0       	mov    eax,ds:0xc002e6e8
c0014ce9:	8b 5e 30             	mov    ebx,DWORD PTR [esi+0x30]
c0014cec:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0014cf2:	8b b8 88 11 00 00    	mov    edi,DWORD PTR [eax+0x1188]
c0014cf8:	8d 43 e0             	lea    eax,[ebx-0x20]
c0014cfb:	83 f8 17             	cmp    eax,0x17
c0014cfe:	77 13                	ja     c0014d13 <int_handler+0x4e>
c0014d00:	83 ec 08             	sub    esp,0x8
c0014d03:	8b 17                	mov    edx,DWORD PTR [edi]
c0014d05:	8d 43 e0             	lea    eax,[ebx-0x20]
c0014d08:	0f b6 c0             	movzx  eax,al
c0014d0b:	50                   	push   eax
c0014d0c:	57                   	push   edi
c0014d0d:	ff 52 38             	call   DWORD PTR [edx+0x38]
c0014d10:	83 c4 10             	add    esp,0x10
c0014d13:	83 c3 15             	add    ebx,0x15
c0014d16:	c1 e3 04             	shl    ebx,0x4
c0014d19:	8d 6c 1f 08          	lea    ebp,[edi+ebx*1+0x8]
c0014d1d:	8d bc 1f 08 10 00 00 	lea    edi,[edi+ebx*1+0x1008]
c0014d24:	31 db                	xor    ebx,ebx
c0014d26:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c0014d2a:	85 c0                	test   eax,eax
c0014d2c:	74 13                	je     c0014d41 <int_handler+0x7c>
c0014d2e:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c0014d31:	83 7e 30 60          	cmp    DWORD PTR [esi+0x30],0x60
c0014d35:	74 1c                	je     c0014d53 <int_handler+0x8e>
c0014d37:	83 ec 08             	sub    esp,0x8
c0014d3a:	52                   	push   edx
c0014d3b:	56                   	push   esi
c0014d3c:	ff d0                	call   eax
c0014d3e:	83 c4 10             	add    esp,0x10
c0014d41:	43                   	inc    ebx
c0014d42:	83 fb 04             	cmp    ebx,0x4
c0014d45:	75 df                	jne    c0014d26 <int_handler+0x61>
c0014d47:	83 c4 0c             	add    esp,0xc
c0014d4a:	31 c0                	xor    eax,eax
c0014d4c:	5b                   	pop    ebx
c0014d4d:	31 d2                	xor    edx,edx
c0014d4f:	5e                   	pop    esi
c0014d50:	5f                   	pop    edi
c0014d51:	5d                   	pop    ebp
c0014d52:	c3                   	ret    
c0014d53:	83 ec 08             	sub    esp,0x8
c0014d56:	52                   	push   edx
c0014d57:	56                   	push   esi
c0014d58:	ff d0                	call   eax
c0014d5a:	83 c4 10             	add    esp,0x10
c0014d5d:	83 c4 0c             	add    esp,0xc
c0014d60:	5b                   	pop    ebx
c0014d61:	5e                   	pop    esi
c0014d62:	5f                   	pop    edi
c0014d63:	5d                   	pop    ebp
c0014d64:	c3                   	ret    
c0014d65:	90                   	nop

c0014d66 <InterruptController::InterruptController(char const*)>:
c0014d66:	83 ec 1c             	sub    esp,0x1c
c0014d69:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014d6d:	83 ec 08             	sub    esp,0x8
c0014d70:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014d74:	50                   	push   eax
c0014d75:	e8 80 f8 ff ff       	call   c00145fa <Device::Device(char const*)>
c0014d7a:	83 c4 10             	add    esp,0x10
c0014d7d:	ba 5c b3 02 c0       	mov    edx,0xc002b35c
c0014d82:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014d86:	89 10                	mov    DWORD PTR [eax],edx
c0014d88:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014d8c:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c0014d96:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0014d9e:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c0014da6:	7f 5e                	jg     c0014e06 <InterruptController::InterruptController(char const*)+0xa0>
c0014da8:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0014db0:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c0014db5:	7f 49                	jg     c0014e00 <InterruptController::InterruptController(char const*)+0x9a>
c0014db7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014dbb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014dbf:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0014dc6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014dca:	01 ca                	add    edx,ecx
c0014dcc:	83 c2 54             	add    edx,0x54
c0014dcf:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0014dd7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014ddb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014ddf:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0014de6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014dea:	01 ca                	add    edx,ecx
c0014dec:	81 c2 54 04 00 00    	add    edx,0x454
c0014df2:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0014dfa:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0014dfe:	eb b0                	jmp    c0014db0 <InterruptController::InterruptController(char const*)+0x4a>
c0014e00:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0014e04:	eb 98                	jmp    c0014d9e <InterruptController::InterruptController(char const*)+0x38>
c0014e06:	90                   	nop
c0014e07:	83 c4 1c             	add    esp,0x1c
c0014e0a:	c3                   	ret    
c0014e0b:	90                   	nop

c0014e0c <InterruptController::~InterruptController()>:
c0014e0c:	83 ec 0c             	sub    esp,0xc
c0014e0f:	ba 5c b3 02 c0       	mov    edx,0xc002b35c
c0014e14:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014e18:	89 10                	mov    DWORD PTR [eax],edx
c0014e1a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014e1e:	83 ec 0c             	sub    esp,0xc
c0014e21:	50                   	push   eax
c0014e22:	e8 b5 f4 ff ff       	call   c00142dc <Device::~Device()>
c0014e27:	83 c4 10             	add    esp,0x10
c0014e2a:	90                   	nop
c0014e2b:	83 c4 0c             	add    esp,0xc
c0014e2e:	c3                   	ret    
c0014e2f:	90                   	nop

c0014e30 <InterruptController::~InterruptController()>:
c0014e30:	83 ec 0c             	sub    esp,0xc
c0014e33:	83 ec 0c             	sub    esp,0xc
c0014e36:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014e3a:	e8 cd ff ff ff       	call   c0014e0c <InterruptController::~InterruptController()>
c0014e3f:	83 c4 10             	add    esp,0x10
c0014e42:	83 ec 08             	sub    esp,0x8
c0014e45:	68 58 21 00 00       	push   0x2158
c0014e4a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014e4e:	e8 b0 e0 ff ff       	call   c0012f03 <operator delete(void*, unsigned long)>
c0014e53:	83 c4 10             	add    esp,0x10
c0014e56:	83 c4 0c             	add    esp,0xc
c0014e59:	c3                   	ret    

c0014e5a <displayDebugInfo(regs*)>:
c0014e5a:	55                   	push   ebp
c0014e5b:	57                   	push   edi
c0014e5c:	56                   	push   esi
c0014e5d:	53                   	push   ebx
c0014e5e:	83 ec 24             	sub    esp,0x24
c0014e61:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0014e65:	0f 20 c2             	mov    edx,cr0
c0014e68:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0014e6c:	0f 20 d7             	mov    edi,cr2
c0014e6f:	0f 20 de             	mov    esi,cr3
c0014e72:	0f 20 e5             	mov    ebp,cr4
c0014e75:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c0014e78:	68 ee b0 02 c0       	push   0xc002b0ee
c0014e7d:	e8 61 e1 ff ff       	call   c0012fe3 <Dbg::kprintf(char const*, ...)>
c0014e82:	59                   	pop    ecx
c0014e83:	58                   	pop    eax
c0014e84:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0014e87:	68 f9 b0 02 c0       	push   0xc002b0f9
c0014e8c:	e8 52 e1 ff ff       	call   c0012fe3 <Dbg::kprintf(char const*, ...)>
c0014e91:	58                   	pop    eax
c0014e92:	5a                   	pop    edx
c0014e93:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0014e96:	68 04 b1 02 c0       	push   0xc002b104
c0014e9b:	e8 43 e1 ff ff       	call   c0012fe3 <Dbg::kprintf(char const*, ...)>
c0014ea0:	59                   	pop    ecx
c0014ea1:	58                   	pop    eax
c0014ea2:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0014ea5:	68 0f b1 02 c0       	push   0xc002b10f
c0014eaa:	e8 34 e1 ff ff       	call   c0012fe3 <Dbg::kprintf(char const*, ...)>
c0014eaf:	58                   	pop    eax
c0014eb0:	5a                   	pop    edx
c0014eb1:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0014eb4:	68 1a b1 02 c0       	push   0xc002b11a
c0014eb9:	e8 25 e1 ff ff       	call   c0012fe3 <Dbg::kprintf(char const*, ...)>
c0014ebe:	59                   	pop    ecx
c0014ebf:	58                   	pop    eax
c0014ec0:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c0014ec3:	68 25 b1 02 c0       	push   0xc002b125
c0014ec8:	e8 16 e1 ff ff       	call   c0012fe3 <Dbg::kprintf(char const*, ...)>
c0014ecd:	58                   	pop    eax
c0014ece:	5a                   	pop    edx
c0014ecf:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0014ed2:	68 30 b1 02 c0       	push   0xc002b130
c0014ed7:	e8 07 e1 ff ff       	call   c0012fe3 <Dbg::kprintf(char const*, ...)>
c0014edc:	59                   	pop    ecx
c0014edd:	58                   	pop    eax
c0014ede:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0014ee1:	68 3b b1 02 c0       	push   0xc002b13b
c0014ee6:	e8 f8 e0 ff ff       	call   c0012fe3 <Dbg::kprintf(char const*, ...)>
c0014eeb:	58                   	pop    eax
c0014eec:	5a                   	pop    edx
c0014eed:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c0014ef0:	68 46 b1 02 c0       	push   0xc002b146
c0014ef5:	e8 e9 e0 ff ff       	call   c0012fe3 <Dbg::kprintf(char const*, ...)>
c0014efa:	59                   	pop    ecx
c0014efb:	58                   	pop    eax
c0014efc:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014eff:	68 55 b1 02 c0       	push   0xc002b155
c0014f04:	e8 da e0 ff ff       	call   c0012fe3 <Dbg::kprintf(char const*, ...)>
c0014f09:	58                   	pop    eax
c0014f0a:	5a                   	pop    edx
c0014f0b:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0014f0e:	68 60 b1 02 c0       	push   0xc002b160
c0014f13:	e8 cb e0 ff ff       	call   c0012fe3 <Dbg::kprintf(char const*, ...)>
c0014f18:	59                   	pop    ecx
c0014f19:	58                   	pop    eax
c0014f1a:	57                   	push   edi
c0014f1b:	68 6b b1 02 c0       	push   0xc002b16b
c0014f20:	e8 be e0 ff ff       	call   c0012fe3 <Dbg::kprintf(char const*, ...)>
c0014f25:	58                   	pop    eax
c0014f26:	5a                   	pop    edx
c0014f27:	56                   	push   esi
c0014f28:	68 76 b1 02 c0       	push   0xc002b176
c0014f2d:	e8 b1 e0 ff ff       	call   c0012fe3 <Dbg::kprintf(char const*, ...)>
c0014f32:	59                   	pop    ecx
c0014f33:	a1 58 1c 03 c0       	mov    eax,ds:0xc0031c58
c0014f38:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f3e:	e8 92 be ff ff       	call   c0010dd5 <setActiveTerminal(VgaText*)>
c0014f43:	58                   	pop    eax
c0014f44:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0014f47:	5a                   	pop    edx
c0014f48:	c1 e0 05             	shl    eax,0x5
c0014f4b:	05 a0 d6 02 c0       	add    eax,0xc002d6a0
c0014f50:	50                   	push   eax
c0014f51:	a1 58 1c 03 c0       	mov    eax,ds:0xc0031c58
c0014f56:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f5c:	e8 93 c2 ff ff       	call   c00111f4 <VgaText::puts(char const*)>
c0014f61:	59                   	pop    ecx
c0014f62:	58                   	pop    eax
c0014f63:	a1 58 1c 03 c0       	mov    eax,ds:0xc0031c58
c0014f68:	68 81 b1 02 c0       	push   0xc002b181
c0014f6d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f73:	e8 7c c2 ff ff       	call   c00111f4 <VgaText::puts(char const*)>
c0014f78:	58                   	pop    eax
c0014f79:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014f7e:	5a                   	pop    edx
c0014f7f:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014f82:	83 c0 0c             	add    eax,0xc
c0014f85:	50                   	push   eax
c0014f86:	a1 58 1c 03 c0       	mov    eax,ds:0xc0031c58
c0014f8b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f91:	e8 5e c2 ff ff       	call   c00111f4 <VgaText::puts(char const*)>
c0014f96:	59                   	pop    ecx
c0014f97:	58                   	pop    eax
c0014f98:	a1 58 1c 03 c0       	mov    eax,ds:0xc0031c58
c0014f9d:	68 8a b1 02 c0       	push   0xc002b18a
c0014fa2:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014fa8:	e8 47 c2 ff ff       	call   c00111f4 <VgaText::puts(char const*)>
c0014fad:	58                   	pop    eax
c0014fae:	a1 58 1c 03 c0       	mov    eax,ds:0xc0031c58
c0014fb3:	5a                   	pop    edx
c0014fb4:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014fb7:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014fbd:	e8 58 c2 ff ff       	call   c001121a <VgaText::putx(unsigned int)>
c0014fc2:	59                   	pop    ecx
c0014fc3:	58                   	pop    eax
c0014fc4:	a1 58 1c 03 c0       	mov    eax,ds:0xc0031c58
c0014fc9:	68 92 b1 02 c0       	push   0xc002b192
c0014fce:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014fd4:	e8 1b c2 ff ff       	call   c00111f4 <VgaText::puts(char const*)>
c0014fd9:	58                   	pop    eax
c0014fda:	a1 58 1c 03 c0       	mov    eax,ds:0xc0031c58
c0014fdf:	5a                   	pop    edx
c0014fe0:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0014fe3:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014fe9:	e8 2c c2 ff ff       	call   c001121a <VgaText::putx(unsigned int)>
c0014fee:	59                   	pop    ecx
c0014fef:	58                   	pop    eax
c0014ff0:	a1 58 1c 03 c0       	mov    eax,ds:0xc0031c58
c0014ff5:	68 9a b1 02 c0       	push   0xc002b19a
c0014ffa:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015000:	e8 ef c1 ff ff       	call   c00111f4 <VgaText::puts(char const*)>
c0015005:	58                   	pop    eax
c0015006:	a1 58 1c 03 c0       	mov    eax,ds:0xc0031c58
c001500b:	5a                   	pop    edx
c001500c:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c001500f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015015:	e8 00 c2 ff ff       	call   c001121a <VgaText::putx(unsigned int)>
c001501a:	59                   	pop    ecx
c001501b:	58                   	pop    eax
c001501c:	a1 58 1c 03 c0       	mov    eax,ds:0xc0031c58
c0015021:	68 a2 b1 02 c0       	push   0xc002b1a2
c0015026:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001502c:	e8 c3 c1 ff ff       	call   c00111f4 <VgaText::puts(char const*)>
c0015031:	58                   	pop    eax
c0015032:	a1 58 1c 03 c0       	mov    eax,ds:0xc0031c58
c0015037:	5a                   	pop    edx
c0015038:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c001503b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015041:	e8 d4 c1 ff ff       	call   c001121a <VgaText::putx(unsigned int)>
c0015046:	59                   	pop    ecx
c0015047:	58                   	pop    eax
c0015048:	a1 58 1c 03 c0       	mov    eax,ds:0xc0031c58
c001504d:	68 aa b1 02 c0       	push   0xc002b1aa
c0015052:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015058:	e8 97 c1 ff ff       	call   c00111f4 <VgaText::puts(char const*)>
c001505d:	58                   	pop    eax
c001505e:	a1 58 1c 03 c0       	mov    eax,ds:0xc0031c58
c0015063:	5a                   	pop    edx
c0015064:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0015067:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001506d:	e8 a8 c1 ff ff       	call   c001121a <VgaText::putx(unsigned int)>
c0015072:	59                   	pop    ecx
c0015073:	58                   	pop    eax
c0015074:	a1 58 1c 03 c0       	mov    eax,ds:0xc0031c58
c0015079:	68 b2 b1 02 c0       	push   0xc002b1b2
c001507e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015084:	e8 6b c1 ff ff       	call   c00111f4 <VgaText::puts(char const*)>
c0015089:	58                   	pop    eax
c001508a:	a1 58 1c 03 c0       	mov    eax,ds:0xc0031c58
c001508f:	5a                   	pop    edx
c0015090:	ff 73 40             	push   DWORD PTR [ebx+0x40]
c0015093:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015099:	e8 7c c1 ff ff       	call   c001121a <VgaText::putx(unsigned int)>
c001509e:	59                   	pop    ecx
c001509f:	58                   	pop    eax
c00150a0:	a1 58 1c 03 c0       	mov    eax,ds:0xc0031c58
c00150a5:	68 ba b1 02 c0       	push   0xc002b1ba
c00150aa:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00150b0:	e8 3f c1 ff ff       	call   c00111f4 <VgaText::puts(char const*)>
c00150b5:	58                   	pop    eax
c00150b6:	a1 58 1c 03 c0       	mov    eax,ds:0xc0031c58
c00150bb:	5a                   	pop    edx
c00150bc:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00150c0:	52                   	push   edx
c00150c1:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00150c7:	e8 4e c1 ff ff       	call   c001121a <VgaText::putx(unsigned int)>
c00150cc:	59                   	pop    ecx
c00150cd:	58                   	pop    eax
c00150ce:	a1 58 1c 03 c0       	mov    eax,ds:0xc0031c58
c00150d3:	68 c3 b1 02 c0       	push   0xc002b1c3
c00150d8:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00150de:	e8 11 c1 ff ff       	call   c00111f4 <VgaText::puts(char const*)>
c00150e3:	58                   	pop    eax
c00150e4:	a1 58 1c 03 c0       	mov    eax,ds:0xc0031c58
c00150e9:	5a                   	pop    edx
c00150ea:	57                   	push   edi
c00150eb:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00150f1:	e8 24 c1 ff ff       	call   c001121a <VgaText::putx(unsigned int)>
c00150f6:	59                   	pop    ecx
c00150f7:	a1 58 1c 03 c0       	mov    eax,ds:0xc0031c58
c00150fc:	5f                   	pop    edi
c00150fd:	68 cb b1 02 c0       	push   0xc002b1cb
c0015102:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015108:	e8 e7 c0 ff ff       	call   c00111f4 <VgaText::puts(char const*)>
c001510d:	58                   	pop    eax
c001510e:	a1 58 1c 03 c0       	mov    eax,ds:0xc0031c58
c0015113:	5a                   	pop    edx
c0015114:	56                   	push   esi
c0015115:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001511b:	e8 fa c0 ff ff       	call   c001121a <VgaText::putx(unsigned int)>
c0015120:	59                   	pop    ecx
c0015121:	a1 58 1c 03 c0       	mov    eax,ds:0xc0031c58
c0015126:	5e                   	pop    esi
c0015127:	68 d3 b1 02 c0       	push   0xc002b1d3
c001512c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015132:	e8 bd c0 ff ff       	call   c00111f4 <VgaText::puts(char const*)>
c0015137:	5f                   	pop    edi
c0015138:	58                   	pop    eax
c0015139:	a1 58 1c 03 c0       	mov    eax,ds:0xc0031c58
c001513e:	55                   	push   ebp
c001513f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015145:	e8 d0 c0 ff ff       	call   c001121a <VgaText::putx(unsigned int)>
c001514a:	58                   	pop    eax
c001514b:	a1 58 1c 03 c0       	mov    eax,ds:0xc0031c58
c0015150:	5a                   	pop    edx
c0015151:	68 db b1 02 c0       	push   0xc002b1db
c0015156:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001515c:	e8 93 c0 ff ff       	call   c00111f4 <VgaText::puts(char const*)>
c0015161:	0f 21 c0             	mov    eax,db0
c0015164:	59                   	pop    ecx
c0015165:	5e                   	pop    esi
c0015166:	50                   	push   eax
c0015167:	a1 58 1c 03 c0       	mov    eax,ds:0xc0031c58
c001516c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015172:	e8 a3 c0 ff ff       	call   c001121a <VgaText::putx(unsigned int)>
c0015177:	5f                   	pop    edi
c0015178:	a1 58 1c 03 c0       	mov    eax,ds:0xc0031c58
c001517d:	5d                   	pop    ebp
c001517e:	68 e4 b1 02 c0       	push   0xc002b1e4
c0015183:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015189:	e8 66 c0 ff ff       	call   c00111f4 <VgaText::puts(char const*)>
c001518e:	0f 21 c8             	mov    eax,db1
c0015191:	5a                   	pop    edx
c0015192:	59                   	pop    ecx
c0015193:	50                   	push   eax
c0015194:	a1 58 1c 03 c0       	mov    eax,ds:0xc0031c58
c0015199:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001519f:	e8 76 c0 ff ff       	call   c001121a <VgaText::putx(unsigned int)>
c00151a4:	5e                   	pop    esi
c00151a5:	a1 58 1c 03 c0       	mov    eax,ds:0xc0031c58
c00151aa:	5f                   	pop    edi
c00151ab:	68 ec b1 02 c0       	push   0xc002b1ec
c00151b0:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00151b6:	e8 39 c0 ff ff       	call   c00111f4 <VgaText::puts(char const*)>
c00151bb:	0f 21 d0             	mov    eax,db2
c00151be:	5d                   	pop    ebp
c00151bf:	5a                   	pop    edx
c00151c0:	50                   	push   eax
c00151c1:	a1 58 1c 03 c0       	mov    eax,ds:0xc0031c58
c00151c6:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00151cc:	e8 49 c0 ff ff       	call   c001121a <VgaText::putx(unsigned int)>
c00151d1:	59                   	pop    ecx
c00151d2:	a1 58 1c 03 c0       	mov    eax,ds:0xc0031c58
c00151d7:	5e                   	pop    esi
c00151d8:	68 f4 b1 02 c0       	push   0xc002b1f4
c00151dd:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00151e3:	e8 0c c0 ff ff       	call   c00111f4 <VgaText::puts(char const*)>
c00151e8:	0f 21 d8             	mov    eax,db3
c00151eb:	5f                   	pop    edi
c00151ec:	5d                   	pop    ebp
c00151ed:	50                   	push   eax
c00151ee:	a1 58 1c 03 c0       	mov    eax,ds:0xc0031c58
c00151f3:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00151f9:	e8 1c c0 ff ff       	call   c001121a <VgaText::putx(unsigned int)>
c00151fe:	58                   	pop    eax
c00151ff:	a1 58 1c 03 c0       	mov    eax,ds:0xc0031c58
c0015204:	5a                   	pop    edx
c0015205:	68 fc b1 02 c0       	push   0xc002b1fc
c001520a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015210:	e8 df bf ff ff       	call   c00111f4 <VgaText::puts(char const*)>
c0015215:	0f 21 f0             	mov    eax,db6
c0015218:	59                   	pop    ecx
c0015219:	5e                   	pop    esi
c001521a:	50                   	push   eax
c001521b:	a1 58 1c 03 c0       	mov    eax,ds:0xc0031c58
c0015220:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015226:	e8 ef bf ff ff       	call   c001121a <VgaText::putx(unsigned int)>
c001522b:	5f                   	pop    edi
c001522c:	a1 58 1c 03 c0       	mov    eax,ds:0xc0031c58
c0015231:	5d                   	pop    ebp
c0015232:	68 04 b2 02 c0       	push   0xc002b204
c0015237:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001523d:	e8 b2 bf ff ff       	call   c00111f4 <VgaText::puts(char const*)>
c0015242:	0f 21 f8             	mov    eax,db7
c0015245:	5a                   	pop    edx
c0015246:	59                   	pop    ecx
c0015247:	50                   	push   eax
c0015248:	a1 58 1c 03 c0       	mov    eax,ds:0xc0031c58
c001524d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015253:	e8 c2 bf ff ff       	call   c001121a <VgaText::putx(unsigned int)>
c0015258:	5e                   	pop    esi
c0015259:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c001525c:	e8 60 85 00 00       	call   c001d7c1 <Thr::getDriverNameFromAddress(unsigned long)>
c0015261:	83 c4 10             	add    esp,0x10
c0015264:	85 c0                	test   eax,eax
c0015266:	74 7d                	je     c00152e5 <displayDebugInfo(regs*)+0x48b>
c0015268:	89 c6                	mov    esi,eax
c001526a:	50                   	push   eax
c001526b:	50                   	push   eax
c001526c:	56                   	push   esi
c001526d:	68 0c b2 02 c0       	push   0xc002b20c
c0015272:	e8 6c dd ff ff       	call   c0012fe3 <Dbg::kprintf(char const*, ...)>
c0015277:	5a                   	pop    edx
c0015278:	a1 58 1c 03 c0       	mov    eax,ds:0xc0031c58
c001527d:	59                   	pop    ecx
c001527e:	68 1a b2 02 c0       	push   0xc002b21a
c0015283:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015289:	e8 66 bf ff ff       	call   c00111f4 <VgaText::puts(char const*)>
c001528e:	5f                   	pop    edi
c001528f:	a1 58 1c 03 c0       	mov    eax,ds:0xc0031c58
c0015294:	5d                   	pop    ebp
c0015295:	56                   	push   esi
c0015296:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001529c:	e8 53 bf ff ff       	call   c00111f4 <VgaText::puts(char const*)>
c00152a1:	58                   	pop    eax
c00152a2:	a1 58 1c 03 c0       	mov    eax,ds:0xc0031c58
c00152a7:	5a                   	pop    edx
c00152a8:	68 26 b2 02 c0       	push   0xc002b226
c00152ad:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00152b3:	e8 3c bf ff ff       	call   c00111f4 <VgaText::puts(char const*)>
c00152b8:	59                   	pop    ecx
c00152b9:	a1 58 1c 03 c0       	mov    eax,ds:0xc0031c58
c00152be:	8b b8 26 05 00 00    	mov    edi,DWORD PTR [eax+0x526]
c00152c4:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00152c7:	e8 2c 85 00 00       	call   c001d7f8 <Thr::getDriverOffsetFromAddress(unsigned long)>
c00152cc:	5b                   	pop    ebx
c00152cd:	5d                   	pop    ebp
c00152ce:	50                   	push   eax
c00152cf:	57                   	push   edi
c00152d0:	e8 45 bf ff ff       	call   c001121a <VgaText::putx(unsigned int)>
c00152d5:	58                   	pop    eax
c00152d6:	5a                   	pop    edx
c00152d7:	56                   	push   esi
c00152d8:	68 32 b2 02 c0       	push   0xc002b232
c00152dd:	e8 01 dd ff ff       	call   c0012fe3 <Dbg::kprintf(char const*, ...)>
c00152e2:	83 c4 10             	add    esp,0x10
c00152e5:	fa                   	cli    
c00152e6:	f4                   	hlt    
c00152e7:	eb fe                	jmp    c00152e7 <displayDebugInfo(regs*)+0x48d>

c00152e9 <x87EmulHandler(regs*, void*)>:
c00152e9:	53                   	push   ebx
c00152ea:	83 ec 14             	sub    esp,0x14
c00152ed:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00152f1:	53                   	push   ebx
c00152f2:	e8 57 a8 00 00       	call   c001fb4e <Vm::x87Handler(regs*)>
c00152f7:	83 c4 10             	add    esp,0x10
c00152fa:	84 c0                	test   al,al
c00152fc:	74 05                	je     c0015303 <x87EmulHandler(regs*, void*)+0x1a>
c00152fe:	83 c4 08             	add    esp,0x8
c0015301:	5b                   	pop    ebx
c0015302:	c3                   	ret    
c0015303:	83 ec 0c             	sub    esp,0xc
c0015306:	68 42 b2 02 c0       	push   0xc002b242
c001530b:	e8 d3 dc ff ff       	call   c0012fe3 <Dbg::kprintf(char const*, ...)>
c0015310:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015313:	e8 42 fb ff ff       	call   c0014e5a <displayDebugInfo(regs*)>

c0015318 <gpFault(regs*, void*)>:
c0015318:	53                   	push   ebx
c0015319:	83 ec 14             	sub    esp,0x14
c001531c:	c7 05 94 e8 02 c0 cb ee 01 c0 	mov    DWORD PTR ds:0xc002e894,0xc001eecb
c0015326:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001532a:	53                   	push   ebx
c001532b:	e8 9b 9b 00 00       	call   c001eecb <Vm::faultHandler(regs*)>
c0015330:	83 c4 10             	add    esp,0x10
c0015333:	84 c0                	test   al,al
c0015335:	74 05                	je     c001533c <gpFault(regs*, void*)+0x24>
c0015337:	83 c4 08             	add    esp,0x8
c001533a:	5b                   	pop    ebx
c001533b:	c3                   	ret    
c001533c:	83 ec 0c             	sub    esp,0xc
c001533f:	68 58 b2 02 c0       	push   0xc002b258
c0015344:	e8 9a dc ff ff       	call   c0012fe3 <Dbg::kprintf(char const*, ...)>
c0015349:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001534c:	e8 09 fb ff ff       	call   c0014e5a <displayDebugInfo(regs*)>

c0015351 <pgFault(regs*, void*)>:
c0015351:	53                   	push   ebx
c0015352:	83 ec 14             	sub    esp,0x14
c0015355:	68 73 b2 02 c0       	push   0xc002b273
c001535a:	e8 84 dc ff ff       	call   c0012fe3 <Dbg::kprintf(char const*, ...)>
c001535f:	0f 20 d3             	mov    ebx,cr2
c0015362:	58                   	pop    eax
c0015363:	5a                   	pop    edx
c0015364:	53                   	push   ebx
c0015365:	68 80 b2 02 c0       	push   0xc002b280
c001536a:	e8 74 dc ff ff       	call   c0012fe3 <Dbg::kprintf(char const*, ...)>
c001536f:	59                   	pop    ecx
c0015370:	58                   	pop    eax
c0015371:	53                   	push   ebx
c0015372:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015377:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001537a:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c0015380:	e8 11 d8 ff ff       	call   c0012b96 <VAS::tryLoadBackOffDisk(unsigned long)>
c0015385:	83 c4 10             	add    esp,0x10
c0015388:	84 c0                	test   al,al
c001538a:	74 05                	je     c0015391 <pgFault(regs*, void*)+0x40>
c001538c:	83 c4 08             	add    esp,0x8
c001538f:	5b                   	pop    ebx
c0015390:	c3                   	ret    
c0015391:	83 ec 0c             	sub    esp,0xc
c0015394:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015398:	e8 bd fa ff ff       	call   c0014e5a <displayDebugInfo(regs*)>

c001539d <otherISRHandler(regs*, void*)>:
c001539d:	53                   	push   ebx
c001539e:	83 ec 0c             	sub    esp,0xc
c00153a1:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00153a5:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c00153a8:	50                   	push   eax
c00153a9:	50                   	push   eax
c00153aa:	68 8c b2 02 c0       	push   0xc002b28c
c00153af:	e8 2f dc ff ff       	call   c0012fe3 <Dbg::kprintf(char const*, ...)>
c00153b4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00153b7:	e8 9e fa ff ff       	call   c0014e5a <displayDebugInfo(regs*)>

c00153bc <opcodeFault(regs*, void*)>:
c00153bc:	55                   	push   ebp
c00153bd:	89 e5                	mov    ebp,esp
c00153bf:	56                   	push   esi
c00153c0:	53                   	push   ebx
c00153c1:	83 ec 40             	sub    esp,0x40
c00153c4:	a1 e8 e6 02 c0       	mov    eax,ds:0xc002e6e8
c00153c9:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00153cf:	8a 80 94 11 00 00    	mov    al,BYTE PTR [eax+0x1194]
c00153d5:	84 c0                	test   al,al
c00153d7:	74 24                	je     c00153fd <opcodeFault(regs*, void*)+0x41>
c00153d9:	83 ec 0c             	sub    esp,0xc
c00153dc:	68 ac b2 02 c0       	push   0xc002b2ac
c00153e1:	e8 fd db ff ff       	call   c0012fe3 <Dbg::kprintf(char const*, ...)>
c00153e6:	83 c4 10             	add    esp,0x10
c00153e9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153ec:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00153ef:	8d 50 19             	lea    edx,[eax+0x19]
c00153f2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153f5:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00153f8:	e9 be 05 00 00       	jmp    c00159bb <opcodeFault(regs*, void*)+0x5ff>
c00153fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015400:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015403:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0015406:	c6 45 f3 00          	mov    BYTE PTR [ebp-0xd],0x0
c001540a:	c6 45 f2 00          	mov    BYTE PTR [ebp-0xe],0x0
c001540e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015411:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015414:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0015417:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001541a:	8a 00                	mov    al,BYTE PTR [eax]
c001541c:	3c f0                	cmp    al,0xf0
c001541e:	75 17                	jne    c0015437 <opcodeFault(regs*, void*)+0x7b>
c0015420:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0015423:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015426:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015429:	8d 50 01             	lea    edx,[eax+0x1]
c001542c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001542f:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015432:	e9 da 00 00 00       	jmp    c0015511 <opcodeFault(regs*, void*)+0x155>
c0015437:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001543a:	8a 00                	mov    al,BYTE PTR [eax]
c001543c:	3c f2                	cmp    al,0xf2
c001543e:	74 09                	je     c0015449 <opcodeFault(regs*, void*)+0x8d>
c0015440:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015443:	8a 00                	mov    al,BYTE PTR [eax]
c0015445:	3c f3                	cmp    al,0xf3
c0015447:	75 1b                	jne    c0015464 <opcodeFault(regs*, void*)+0xa8>
c0015449:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c001544d:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0015450:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015453:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015456:	8d 50 01             	lea    edx,[eax+0x1]
c0015459:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001545c:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001545f:	e9 ad 00 00 00       	jmp    c0015511 <opcodeFault(regs*, void*)+0x155>
c0015464:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015467:	8a 00                	mov    al,BYTE PTR [eax]
c0015469:	3c 66                	cmp    al,0x66
c001546b:	75 1f                	jne    c001548c <opcodeFault(regs*, void*)+0xd0>
c001546d:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0015471:	c6 45 f2 01          	mov    BYTE PTR [ebp-0xe],0x1
c0015475:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0015478:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001547b:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001547e:	8d 50 01             	lea    edx,[eax+0x1]
c0015481:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015484:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015487:	e9 85 00 00 00       	jmp    c0015511 <opcodeFault(regs*, void*)+0x155>
c001548c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001548f:	8a 00                	mov    al,BYTE PTR [eax]
c0015491:	3c 67                	cmp    al,0x67
c0015493:	75 18                	jne    c00154ad <opcodeFault(regs*, void*)+0xf1>
c0015495:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0015499:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c001549c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001549f:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00154a2:	8d 50 01             	lea    edx,[eax+0x1]
c00154a5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154a8:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00154ab:	eb 64                	jmp    c0015511 <opcodeFault(regs*, void*)+0x155>
c00154ad:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00154b0:	8a 00                	mov    al,BYTE PTR [eax]
c00154b2:	3c 2e                	cmp    al,0x2e
c00154b4:	74 09                	je     c00154bf <opcodeFault(regs*, void*)+0x103>
c00154b6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00154b9:	8a 00                	mov    al,BYTE PTR [eax]
c00154bb:	3c 3e                	cmp    al,0x3e
c00154bd:	75 18                	jne    c00154d7 <opcodeFault(regs*, void*)+0x11b>
c00154bf:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c00154c3:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00154c6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154c9:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00154cc:	8d 50 01             	lea    edx,[eax+0x1]
c00154cf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154d2:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00154d5:	eb 3a                	jmp    c0015511 <opcodeFault(regs*, void*)+0x155>
c00154d7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00154da:	8a 00                	mov    al,BYTE PTR [eax]
c00154dc:	3c 36                	cmp    al,0x36
c00154de:	74 1b                	je     c00154fb <opcodeFault(regs*, void*)+0x13f>
c00154e0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00154e3:	8a 00                	mov    al,BYTE PTR [eax]
c00154e5:	3c 26                	cmp    al,0x26
c00154e7:	74 12                	je     c00154fb <opcodeFault(regs*, void*)+0x13f>
c00154e9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00154ec:	8a 00                	mov    al,BYTE PTR [eax]
c00154ee:	3c 64                	cmp    al,0x64
c00154f0:	74 09                	je     c00154fb <opcodeFault(regs*, void*)+0x13f>
c00154f2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00154f5:	8a 00                	mov    al,BYTE PTR [eax]
c00154f7:	3c 65                	cmp    al,0x65
c00154f9:	75 16                	jne    c0015511 <opcodeFault(regs*, void*)+0x155>
c00154fb:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c00154ff:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0015502:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015505:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015508:	8d 50 01             	lea    edx,[eax+0x1]
c001550b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001550e:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015511:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015514:	8a 00                	mov    al,BYTE PTR [eax]
c0015516:	3c 0f                	cmp    al,0xf
c0015518:	0f 85 ad 00 00 00    	jne    c00155cb <opcodeFault(regs*, void*)+0x20f>
c001551e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015521:	40                   	inc    eax
c0015522:	8a 00                	mov    al,BYTE PTR [eax]
c0015524:	3c c2                	cmp    al,0xc2
c0015526:	74 0e                	je     c0015536 <opcodeFault(regs*, void*)+0x17a>
c0015528:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001552b:	40                   	inc    eax
c001552c:	8a 00                	mov    al,BYTE PTR [eax]
c001552e:	3c c3                	cmp    al,0xc3
c0015530:	0f 85 95 00 00 00    	jne    c00155cb <opcodeFault(regs*, void*)+0x20f>
c0015536:	83 ec 0c             	sub    esp,0xc
c0015539:	68 cf b2 02 c0       	push   0xc002b2cf
c001553e:	e8 a0 da ff ff       	call   c0012fe3 <Dbg::kprintf(char const*, ...)>
c0015543:	83 c4 10             	add    esp,0x10
c0015546:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015549:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001554c:	8d 50 01             	lea    edx,[eax+0x1]
c001554f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015552:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015555:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0015558:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001555b:	8a 00                	mov    al,BYTE PTR [eax]
c001555d:	8d 50 fe             	lea    edx,[eax-0x2]
c0015560:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015563:	88 10                	mov    BYTE PTR [eax],dl
c0015565:	8d 45 c2             	lea    eax,[ebp-0x3e]
c0015568:	50                   	push   eax
c0015569:	8d 45 c3             	lea    eax,[ebp-0x3d]
c001556c:	50                   	push   eax
c001556d:	8d 45 c4             	lea    eax,[ebp-0x3c]
c0015570:	50                   	push   eax
c0015571:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0015574:	e8 e3 47 00 00       	call   c0019d5c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c0015579:	83 c4 10             	add    esp,0x10
c001557c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001557f:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015582:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c0015585:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
c0015588:	01 d0                	add    eax,edx
c001558a:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c001558d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015590:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015593:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c0015596:	48                   	dec    eax
c0015597:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c001559a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001559d:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c00155a0:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00155a3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155a6:	83 ec 04             	sub    esp,0x4
c00155a9:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c00155ac:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c00155af:	50                   	push   eax
c00155b0:	e8 ff ab fe ff       	call   c00001b4 <voodooXADD>
c00155b5:	83 c4 10             	add    esp,0x10
c00155b8:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c00155bb:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c00155be:	01 c2                	add    edx,eax
c00155c0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155c3:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00155c6:	e9 f0 03 00 00       	jmp    c00159bb <opcodeFault(regs*, void*)+0x5ff>
c00155cb:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00155ce:	8a 00                	mov    al,BYTE PTR [eax]
c00155d0:	3c 0f                	cmp    al,0xf
c00155d2:	0f 85 8b 01 00 00    	jne    c0015763 <opcodeFault(regs*, void*)+0x3a7>
c00155d8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00155db:	40                   	inc    eax
c00155dc:	8a 00                	mov    al,BYTE PTR [eax]
c00155de:	3c c7                	cmp    al,0xc7
c00155e0:	0f 86 7d 01 00 00    	jbe    c0015763 <opcodeFault(regs*, void*)+0x3a7>
c00155e6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00155e9:	40                   	inc    eax
c00155ea:	8a 00                	mov    al,BYTE PTR [eax]
c00155ec:	3c cf                	cmp    al,0xcf
c00155ee:	0f 87 6f 01 00 00    	ja     c0015763 <opcodeFault(regs*, void*)+0x3a7>
c00155f4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00155f7:	40                   	inc    eax
c00155f8:	8a 00                	mov    al,BYTE PTR [eax]
c00155fa:	83 c0 38             	add    eax,0x38
c00155fd:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c0015600:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c0015604:	75 0b                	jne    c0015611 <opcodeFault(regs*, void*)+0x255>
c0015606:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015609:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c001560c:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001560f:	eb 75                	jmp    c0015686 <opcodeFault(regs*, void*)+0x2ca>
c0015611:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c0015615:	75 0b                	jne    c0015622 <opcodeFault(regs*, void*)+0x266>
c0015617:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001561a:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001561d:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0015620:	eb 64                	jmp    c0015686 <opcodeFault(regs*, void*)+0x2ca>
c0015622:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c0015626:	75 0b                	jne    c0015633 <opcodeFault(regs*, void*)+0x277>
c0015628:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001562b:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001562e:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0015631:	eb 53                	jmp    c0015686 <opcodeFault(regs*, void*)+0x2ca>
c0015633:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c0015637:	75 0b                	jne    c0015644 <opcodeFault(regs*, void*)+0x288>
c0015639:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001563c:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001563f:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0015642:	eb 42                	jmp    c0015686 <opcodeFault(regs*, void*)+0x2ca>
c0015644:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c0015648:	75 0b                	jne    c0015655 <opcodeFault(regs*, void*)+0x299>
c001564a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001564d:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0015650:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0015653:	eb 31                	jmp    c0015686 <opcodeFault(regs*, void*)+0x2ca>
c0015655:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c0015659:	75 0b                	jne    c0015666 <opcodeFault(regs*, void*)+0x2aa>
c001565b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001565e:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0015661:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0015664:	eb 20                	jmp    c0015686 <opcodeFault(regs*, void*)+0x2ca>
c0015666:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c001566a:	75 0b                	jne    c0015677 <opcodeFault(regs*, void*)+0x2bb>
c001566c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001566f:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0015672:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0015675:	eb 0f                	jmp    c0015686 <opcodeFault(regs*, void*)+0x2ca>
c0015677:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c001567b:	75 09                	jne    c0015686 <opcodeFault(regs*, void*)+0x2ca>
c001567d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015680:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0015683:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0015686:	80 7d f2 00          	cmp    BYTE PTR [ebp-0xe],0x0
c001568a:	74 10                	je     c001569c <opcodeFault(regs*, void*)+0x2e0>
c001568c:	81 65 ec 00 00 ff ff 	and    DWORD PTR [ebp-0x14],0xffff0000
c0015693:	81 4d ec ad de 00 00 	or     DWORD PTR [ebp-0x14],0xdead
c001569a:	eb 2d                	jmp    c00156c9 <opcodeFault(regs*, void*)+0x30d>
c001569c:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001569f:	c1 e0 18             	shl    eax,0x18
c00156a2:	89 c2                	mov    edx,eax
c00156a4:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00156a7:	c1 e0 08             	shl    eax,0x8
c00156aa:	25 00 00 ff 00       	and    eax,0xff0000
c00156af:	09 c2                	or     edx,eax
c00156b1:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00156b4:	c1 e8 08             	shr    eax,0x8
c00156b7:	25 00 ff 00 00       	and    eax,0xff00
c00156bc:	09 c2                	or     edx,eax
c00156be:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00156c1:	c1 e8 18             	shr    eax,0x18
c00156c4:	09 d0                	or     eax,edx
c00156c6:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00156c9:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c00156cd:	75 0b                	jne    c00156da <opcodeFault(regs*, void*)+0x31e>
c00156cf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156d2:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00156d5:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c00156d8:	eb 75                	jmp    c001574f <opcodeFault(regs*, void*)+0x393>
c00156da:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c00156de:	75 0b                	jne    c00156eb <opcodeFault(regs*, void*)+0x32f>
c00156e0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156e3:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00156e6:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c00156e9:	eb 64                	jmp    c001574f <opcodeFault(regs*, void*)+0x393>
c00156eb:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c00156ef:	75 0b                	jne    c00156fc <opcodeFault(regs*, void*)+0x340>
c00156f1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156f4:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00156f7:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c00156fa:	eb 53                	jmp    c001574f <opcodeFault(regs*, void*)+0x393>
c00156fc:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c0015700:	75 0b                	jne    c001570d <opcodeFault(regs*, void*)+0x351>
c0015702:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015705:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015708:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c001570b:	eb 42                	jmp    c001574f <opcodeFault(regs*, void*)+0x393>
c001570d:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c0015711:	75 0b                	jne    c001571e <opcodeFault(regs*, void*)+0x362>
c0015713:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015716:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015719:	89 50 44             	mov    DWORD PTR [eax+0x44],edx
c001571c:	eb 31                	jmp    c001574f <opcodeFault(regs*, void*)+0x393>
c001571e:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c0015722:	75 0b                	jne    c001572f <opcodeFault(regs*, void*)+0x373>
c0015724:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015727:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001572a:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001572d:	eb 20                	jmp    c001574f <opcodeFault(regs*, void*)+0x393>
c001572f:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c0015733:	75 0b                	jne    c0015740 <opcodeFault(regs*, void*)+0x384>
c0015735:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015738:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001573b:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c001573e:	eb 0f                	jmp    c001574f <opcodeFault(regs*, void*)+0x393>
c0015740:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c0015744:	75 09                	jne    c001574f <opcodeFault(regs*, void*)+0x393>
c0015746:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015749:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001574c:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c001574f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015752:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015755:	8d 50 02             	lea    edx,[eax+0x2]
c0015758:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001575b:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001575e:	e9 58 02 00 00       	jmp    c00159bb <opcodeFault(regs*, void*)+0x5ff>
c0015763:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015766:	8a 00                	mov    al,BYTE PTR [eax]
c0015768:	3c 0f                	cmp    al,0xf
c001576a:	0f 85 76 01 00 00    	jne    c00158e6 <opcodeFault(regs*, void*)+0x52a>
c0015770:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015773:	40                   	inc    eax
c0015774:	8a 00                	mov    al,BYTE PTR [eax]
c0015776:	3c c7                	cmp    al,0xc7
c0015778:	0f 85 68 01 00 00    	jne    c00158e6 <opcodeFault(regs*, void*)+0x52a>
c001577e:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0015781:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015784:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015787:	8d 50 01             	lea    edx,[eax+0x1]
c001578a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001578d:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015790:	8d 45 ba             	lea    eax,[ebp-0x46]
c0015793:	50                   	push   eax
c0015794:	8d 45 bb             	lea    eax,[ebp-0x45]
c0015797:	50                   	push   eax
c0015798:	8d 45 bc             	lea    eax,[ebp-0x44]
c001579b:	50                   	push   eax
c001579c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001579f:	e8 b8 45 00 00       	call   c0019d5c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c00157a4:	83 c4 10             	add    esp,0x10
c00157a7:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c00157aa:	8a 45 bb             	mov    al,BYTE PTR [ebp-0x45]
c00157ad:	83 f0 01             	xor    eax,0x1
c00157b0:	84 c0                	test   al,al
c00157b2:	0f 84 2e 01 00 00    	je     c00158e6 <opcodeFault(regs*, void*)+0x52a>
c00157b8:	8a 45 ba             	mov    al,BYTE PTR [ebp-0x46]
c00157bb:	3c 01                	cmp    al,0x1
c00157bd:	0f 85 23 01 00 00    	jne    c00158e6 <opcodeFault(regs*, void*)+0x52a>
c00157c3:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
c00157c6:	83 f0 01             	xor    eax,0x1
c00157c9:	84 c0                	test   al,al
c00157cb:	0f 84 15 01 00 00    	je     c00158e6 <opcodeFault(regs*, void*)+0x52a>
c00157d1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157d4:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c00157d7:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c00157da:	c7 45 d4 00 00 00 00 	mov    DWORD PTR [ebp-0x2c],0x0
c00157e1:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c00157e4:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c00157e7:	89 c2                	mov    edx,eax
c00157e9:	b8 00 00 00 00       	mov    eax,0x0
c00157ee:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c00157f1:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c00157f4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157f7:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c00157fa:	ba 00 00 00 00       	mov    edx,0x0
c00157ff:	09 45 d0             	or     DWORD PTR [ebp-0x30],eax
c0015802:	09 55 d4             	or     DWORD PTR [ebp-0x2c],edx
c0015805:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015808:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001580b:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c001580e:	c7 45 cc 00 00 00 00 	mov    DWORD PTR [ebp-0x34],0x0
c0015815:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c0015818:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c001581b:	89 c2                	mov    edx,eax
c001581d:	b8 00 00 00 00       	mov    eax,0x0
c0015822:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c0015825:	89 55 cc             	mov    DWORD PTR [ebp-0x34],edx
c0015828:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001582b:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001582e:	ba 00 00 00 00       	mov    edx,0x0
c0015833:	09 45 c8             	or     DWORD PTR [ebp-0x38],eax
c0015836:	09 55 cc             	or     DWORD PTR [ebp-0x34],edx
c0015839:	e8 7c 86 00 00       	call   c001deba <lockScheduler()>
c001583e:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0015841:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0015844:	8b 00                	mov    eax,DWORD PTR [eax]
c0015846:	89 c1                	mov    ecx,eax
c0015848:	33 4d d0             	xor    ecx,DWORD PTR [ebp-0x30]
c001584b:	89 cb                	mov    ebx,ecx
c001584d:	89 d0                	mov    eax,edx
c001584f:	33 45 d4             	xor    eax,DWORD PTR [ebp-0x2c]
c0015852:	89 c6                	mov    esi,eax
c0015854:	89 f0                	mov    eax,esi
c0015856:	09 d8                	or     eax,ebx
c0015858:	85 c0                	test   eax,eax
c001585a:	75 21                	jne    c001587d <opcodeFault(regs*, void*)+0x4c1>
c001585c:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c001585f:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c0015862:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0015865:	89 01                	mov    DWORD PTR [ecx],eax
c0015867:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001586a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001586d:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015870:	83 c8 40             	or     eax,0x40
c0015873:	89 c2                	mov    edx,eax
c0015875:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015878:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c001587b:	eb 3e                	jmp    c00158bb <opcodeFault(regs*, void*)+0x4ff>
c001587d:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0015880:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0015883:	8b 00                	mov    eax,DWORD PTR [eax]
c0015885:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0015888:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c001588b:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c001588e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015891:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0015894:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0015897:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c001589a:	89 d0                	mov    eax,edx
c001589c:	31 d2                	xor    edx,edx
c001589e:	89 c3                	mov    ebx,eax
c00158a0:	89 d6                	mov    esi,edx
c00158a2:	89 da                	mov    edx,ebx
c00158a4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158a7:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c00158aa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158ad:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00158b0:	83 e0 bf             	and    eax,0xffffffbf
c00158b3:	89 c2                	mov    edx,eax
c00158b5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158b8:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c00158bb:	e8 fc 85 00 00       	call   c001debc <unlockScheduler()>
c00158c0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158c3:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00158c6:	8b 55 bc             	mov    edx,DWORD PTR [ebp-0x44]
c00158c9:	01 c2                	add    edx,eax
c00158cb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158ce:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00158d1:	83 ec 0c             	sub    esp,0xc
c00158d4:	68 de b2 02 c0       	push   0xc002b2de
c00158d9:	e8 05 d7 ff ff       	call   c0012fe3 <Dbg::kprintf(char const*, ...)>
c00158de:	83 c4 10             	add    esp,0x10
c00158e1:	e9 d5 00 00 00       	jmp    c00159bb <opcodeFault(regs*, void*)+0x5ff>
c00158e6:	83 ec 0c             	sub    esp,0xc
c00158e9:	68 f1 b2 02 c0       	push   0xc002b2f1
c00158ee:	e8 f0 d6 ff ff       	call   c0012fe3 <Dbg::kprintf(char const*, ...)>
c00158f3:	83 c4 10             	add    esp,0x10
c00158f6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158f9:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00158fc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158ff:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015902:	c1 e0 04             	shl    eax,0x4
c0015905:	01 d0                	add    eax,edx
c0015907:	83 c0 03             	add    eax,0x3
c001590a:	8a 00                	mov    al,BYTE PTR [eax]
c001590c:	0f b6 d8             	movzx  ebx,al
c001590f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015912:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0015915:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015918:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001591b:	c1 e0 04             	shl    eax,0x4
c001591e:	01 d0                	add    eax,edx
c0015920:	83 c0 02             	add    eax,0x2
c0015923:	8a 00                	mov    al,BYTE PTR [eax]
c0015925:	0f b6 c8             	movzx  ecx,al
c0015928:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001592b:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c001592e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015931:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015934:	c1 e0 04             	shl    eax,0x4
c0015937:	01 d0                	add    eax,edx
c0015939:	40                   	inc    eax
c001593a:	8a 00                	mov    al,BYTE PTR [eax]
c001593c:	0f b6 d0             	movzx  edx,al
c001593f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015942:	8b 70 38             	mov    esi,DWORD PTR [eax+0x38]
c0015945:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015948:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001594b:	c1 e0 04             	shl    eax,0x4
c001594e:	01 f0                	add    eax,esi
c0015950:	8a 00                	mov    al,BYTE PTR [eax]
c0015952:	0f b6 c0             	movzx  eax,al
c0015955:	83 ec 0c             	sub    esp,0xc
c0015958:	53                   	push   ebx
c0015959:	51                   	push   ecx
c001595a:	52                   	push   edx
c001595b:	50                   	push   eax
c001595c:	68 04 b3 02 c0       	push   0xc002b304
c0015961:	e8 7d d6 ff ff       	call   c0012fe3 <Dbg::kprintf(char const*, ...)>
c0015966:	83 c4 20             	add    esp,0x20
c0015969:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001596c:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001596f:	83 c0 03             	add    eax,0x3
c0015972:	8a 00                	mov    al,BYTE PTR [eax]
c0015974:	0f b6 d8             	movzx  ebx,al
c0015977:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001597a:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001597d:	83 c0 02             	add    eax,0x2
c0015980:	8a 00                	mov    al,BYTE PTR [eax]
c0015982:	0f b6 c8             	movzx  ecx,al
c0015985:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015988:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001598b:	40                   	inc    eax
c001598c:	8a 00                	mov    al,BYTE PTR [eax]
c001598e:	0f b6 d0             	movzx  edx,al
c0015991:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015994:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015997:	8a 00                	mov    al,BYTE PTR [eax]
c0015999:	0f b6 c0             	movzx  eax,al
c001599c:	83 ec 0c             	sub    esp,0xc
c001599f:	53                   	push   ebx
c00159a0:	51                   	push   ecx
c00159a1:	52                   	push   edx
c00159a2:	50                   	push   eax
c00159a3:	68 2c b3 02 c0       	push   0xc002b32c
c00159a8:	e8 36 d6 ff ff       	call   c0012fe3 <Dbg::kprintf(char const*, ...)>
c00159ad:	83 c4 20             	add    esp,0x20
c00159b0:	83 ec 0c             	sub    esp,0xc
c00159b3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00159b6:	e8 9f f4 ff ff       	call   c0014e5a <displayDebugInfo(regs*)>
c00159bb:	8d 65 f8             	lea    esp,[ebp-0x8]
c00159be:	5b                   	pop    ebx
c00159bf:	5e                   	pop    esi
c00159c0:	5d                   	pop    ebp
c00159c1:	c3                   	ret    

c00159c2 <displayProgramFault(char const*)>:
c00159c2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00159c7:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00159ca:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c00159d0:	85 c0                	test   eax,eax
c00159d2:	74 15                	je     c00159e9 <displayProgramFault(char const*)+0x27>
c00159d4:	83 ec 0c             	sub    esp,0xc
c00159d7:	6a 04                	push   0x4
c00159d9:	6a 0f                	push   0xf
c00159db:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00159df:	50                   	push   eax
c00159e0:	e8 d1 b4 ff ff       	call   c0010eb6 <VgaText::puts(char const*, VgaColour, VgaColour)>
c00159e5:	83 c4 1c             	add    esp,0x1c
c00159e8:	c3                   	ret    
c00159e9:	c3                   	ret    

c00159ea <setupInterruptController()>:
c00159ea:	55                   	push   ebp
c00159eb:	89 e5                	mov    ebp,esp
c00159ed:	53                   	push   ebx
c00159ee:	83 ec 24             	sub    esp,0x24
c00159f1:	b8 00 00 00 00       	mov    eax,0x0
c00159f6:	85 c0                	test   eax,eax
c00159f8:	0f 95 c0             	setne  al
c00159fb:	84 c0                	test   al,al
c00159fd:	74 5b                	je     c0015a5a <setupInterruptController()+0x70>
c00159ff:	c7 45 e8 58 21 00 00 	mov    DWORD PTR [ebp-0x18],0x2158
c0015a06:	83 ec 0c             	sub    esp,0xc
c0015a09:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
c0015a0c:	e8 d3 9e ff ff       	call   c000f8e4 <malloc>
c0015a11:	83 c4 10             	add    esp,0x10
c0015a14:	89 c3                	mov    ebx,eax
c0015a16:	83 ec 0c             	sub    esp,0xc
c0015a19:	53                   	push   ebx
c0015a1a:	e8 f3 ff 00 00       	call   c0025a12 <APIC::APIC()>
c0015a1f:	83 c4 10             	add    esp,0x10
c0015a22:	89 5d f0             	mov    DWORD PTR [ebp-0x10],ebx
c0015a25:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
c0015a28:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0015a2b:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a2d:	83 c0 08             	add    eax,0x8
c0015a30:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a32:	6a 00                	push   0x0
c0015a34:	6a 00                	push   0x0
c0015a36:	6a 00                	push   0x0
c0015a38:	52                   	push   edx
c0015a39:	ff d0                	call   eax
c0015a3b:	83 c4 10             	add    esp,0x10
c0015a3e:	a1 e8 e6 02 c0       	mov    eax,ds:0xc002e6e8
c0015a43:	83 ec 08             	sub    esp,0x8
c0015a46:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0015a49:	50                   	push   eax
c0015a4a:	e8 bb e9 ff ff       	call   c001440a <Device::addChild(Device*)>
c0015a4f:	83 c4 10             	add    esp,0x10
c0015a52:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0015a55:	e9 52 03 00 00       	jmp    c0015dac <setupInterruptController()+0x3c2>
c0015a5a:	a1 e8 e6 02 c0       	mov    eax,ds:0xc002e6e8
c0015a5f:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0015a65:	83 e0 01             	and    eax,0x1
c0015a68:	84 c0                	test   al,al
c0015a6a:	0f 95 c0             	setne  al
c0015a6d:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c0015a70:	c7 45 e4 58 21 00 00 	mov    DWORD PTR [ebp-0x1c],0x2158
c0015a77:	83 ec 0c             	sub    esp,0xc
c0015a7a:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0015a7d:	e8 62 9e ff ff       	call   c000f8e4 <malloc>
c0015a82:	83 c4 10             	add    esp,0x10
c0015a85:	89 c3                	mov    ebx,eax
c0015a87:	83 ec 0c             	sub    esp,0xc
c0015a8a:	53                   	push   ebx
c0015a8b:	e8 da 04 01 00       	call   c0025f6a <PIC::PIC()>
c0015a90:	83 c4 10             	add    esp,0x10
c0015a93:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c0015a96:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0015a99:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015a9c:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a9e:	83 c0 08             	add    eax,0x8
c0015aa1:	8b 00                	mov    eax,DWORD PTR [eax]
c0015aa3:	6a 00                	push   0x0
c0015aa5:	6a 00                	push   0x0
c0015aa7:	6a 00                	push   0x0
c0015aa9:	52                   	push   edx
c0015aaa:	ff d0                	call   eax
c0015aac:	83 c4 10             	add    esp,0x10
c0015aaf:	80 7d ef 00          	cmp    BYTE PTR [ebp-0x11],0x0
c0015ab3:	74 73                	je     c0015b28 <setupInterruptController()+0x13e>
c0015ab5:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0015ab8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015abb:	8b 00                	mov    eax,DWORD PTR [eax]
c0015abd:	83 c0 0c             	add    eax,0xc
c0015ac0:	8b 00                	mov    eax,DWORD PTR [eax]
c0015ac2:	6a 00                	push   0x0
c0015ac4:	6a 00                	push   0x0
c0015ac6:	6a 00                	push   0x0
c0015ac8:	52                   	push   edx
c0015ac9:	ff d0                	call   eax
c0015acb:	83 c4 10             	add    esp,0x10
c0015ace:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c0015ad2:	74 15                	je     c0015ae9 <setupInterruptController()+0xff>
c0015ad4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015ad7:	8b 00                	mov    eax,DWORD PTR [eax]
c0015ad9:	83 c0 04             	add    eax,0x4
c0015adc:	8b 00                	mov    eax,DWORD PTR [eax]
c0015ade:	83 ec 0c             	sub    esp,0xc
c0015ae1:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015ae4:	ff d0                	call   eax
c0015ae6:	83 c4 10             	add    esp,0x10
c0015ae9:	c7 45 e0 58 21 00 00 	mov    DWORD PTR [ebp-0x20],0x2158
c0015af0:	83 ec 0c             	sub    esp,0xc
c0015af3:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c0015af6:	e8 e9 9d ff ff       	call   c000f8e4 <malloc>
c0015afb:	83 c4 10             	add    esp,0x10
c0015afe:	89 c3                	mov    ebx,eax
c0015b00:	83 ec 0c             	sub    esp,0xc
c0015b03:	53                   	push   ebx
c0015b04:	e8 09 ff 00 00       	call   c0025a12 <APIC::APIC()>
c0015b09:	83 c4 10             	add    esp,0x10
c0015b0c:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c0015b0f:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0015b12:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b15:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b17:	83 c0 08             	add    eax,0x8
c0015b1a:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b1c:	6a 00                	push   0x0
c0015b1e:	6a 00                	push   0x0
c0015b20:	6a 00                	push   0x0
c0015b22:	52                   	push   edx
c0015b23:	ff d0                	call   eax
c0015b25:	83 c4 10             	add    esp,0x10
c0015b28:	a1 e8 e6 02 c0       	mov    eax,ds:0xc002e6e8
c0015b2d:	83 ec 08             	sub    esp,0x8
c0015b30:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b33:	50                   	push   eax
c0015b34:	e8 d1 e8 ff ff       	call   c001440a <Device::addChild(Device*)>
c0015b39:	83 c4 10             	add    esp,0x10
c0015b3c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b3f:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b41:	83 c0 24             	add    eax,0x24
c0015b44:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b46:	6a 00                	push   0x0
c0015b48:	68 9d 53 01 c0       	push   0xc001539d
c0015b4d:	6a 00                	push   0x0
c0015b4f:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b52:	ff d0                	call   eax
c0015b54:	83 c4 10             	add    esp,0x10
c0015b57:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b5a:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b5c:	83 c0 24             	add    eax,0x24
c0015b5f:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b61:	6a 00                	push   0x0
c0015b63:	68 9d 53 01 c0       	push   0xc001539d
c0015b68:	6a 01                	push   0x1
c0015b6a:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b6d:	ff d0                	call   eax
c0015b6f:	83 c4 10             	add    esp,0x10
c0015b72:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b75:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b77:	83 c0 24             	add    eax,0x24
c0015b7a:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b7c:	6a 00                	push   0x0
c0015b7e:	68 b7 4c 01 c0       	push   0xc0014cb7
c0015b83:	6a 02                	push   0x2
c0015b85:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b88:	ff d0                	call   eax
c0015b8a:	83 c4 10             	add    esp,0x10
c0015b8d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b90:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b92:	83 c0 24             	add    eax,0x24
c0015b95:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b97:	6a 00                	push   0x0
c0015b99:	68 9d 53 01 c0       	push   0xc001539d
c0015b9e:	6a 03                	push   0x3
c0015ba0:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015ba3:	ff d0                	call   eax
c0015ba5:	83 c4 10             	add    esp,0x10
c0015ba8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015bab:	8b 00                	mov    eax,DWORD PTR [eax]
c0015bad:	83 c0 24             	add    eax,0x24
c0015bb0:	8b 00                	mov    eax,DWORD PTR [eax]
c0015bb2:	6a 00                	push   0x0
c0015bb4:	68 9d 53 01 c0       	push   0xc001539d
c0015bb9:	6a 04                	push   0x4
c0015bbb:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015bbe:	ff d0                	call   eax
c0015bc0:	83 c4 10             	add    esp,0x10
c0015bc3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015bc6:	8b 00                	mov    eax,DWORD PTR [eax]
c0015bc8:	83 c0 24             	add    eax,0x24
c0015bcb:	8b 00                	mov    eax,DWORD PTR [eax]
c0015bcd:	6a 00                	push   0x0
c0015bcf:	68 9d 53 01 c0       	push   0xc001539d
c0015bd4:	6a 05                	push   0x5
c0015bd6:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015bd9:	ff d0                	call   eax
c0015bdb:	83 c4 10             	add    esp,0x10
c0015bde:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015be1:	8b 00                	mov    eax,DWORD PTR [eax]
c0015be3:	83 c0 24             	add    eax,0x24
c0015be6:	8b 00                	mov    eax,DWORD PTR [eax]
c0015be8:	6a 00                	push   0x0
c0015bea:	68 bc 53 01 c0       	push   0xc00153bc
c0015bef:	6a 06                	push   0x6
c0015bf1:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015bf4:	ff d0                	call   eax
c0015bf6:	83 c4 10             	add    esp,0x10
c0015bf9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015bfc:	8b 00                	mov    eax,DWORD PTR [eax]
c0015bfe:	83 c0 24             	add    eax,0x24
c0015c01:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c03:	6a 00                	push   0x0
c0015c05:	68 e9 52 01 c0       	push   0xc00152e9
c0015c0a:	6a 07                	push   0x7
c0015c0c:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015c0f:	ff d0                	call   eax
c0015c11:	83 c4 10             	add    esp,0x10
c0015c14:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c17:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c19:	83 c0 24             	add    eax,0x24
c0015c1c:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c1e:	6a 00                	push   0x0
c0015c20:	68 d2 4a 01 c0       	push   0xc0014ad2
c0015c25:	6a 08                	push   0x8
c0015c27:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015c2a:	ff d0                	call   eax
c0015c2c:	83 c4 10             	add    esp,0x10
c0015c2f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c32:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c34:	83 c0 24             	add    eax,0x24
c0015c37:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c39:	6a 00                	push   0x0
c0015c3b:	68 9d 53 01 c0       	push   0xc001539d
c0015c40:	6a 09                	push   0x9
c0015c42:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015c45:	ff d0                	call   eax
c0015c47:	83 c4 10             	add    esp,0x10
c0015c4a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c4d:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c4f:	83 c0 24             	add    eax,0x24
c0015c52:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c54:	6a 00                	push   0x0
c0015c56:	68 9d 53 01 c0       	push   0xc001539d
c0015c5b:	6a 0a                	push   0xa
c0015c5d:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015c60:	ff d0                	call   eax
c0015c62:	83 c4 10             	add    esp,0x10
c0015c65:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c68:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c6a:	83 c0 24             	add    eax,0x24
c0015c6d:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c6f:	6a 00                	push   0x0
c0015c71:	68 9d 53 01 c0       	push   0xc001539d
c0015c76:	6a 0b                	push   0xb
c0015c78:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015c7b:	ff d0                	call   eax
c0015c7d:	83 c4 10             	add    esp,0x10
c0015c80:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c83:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c85:	83 c0 24             	add    eax,0x24
c0015c88:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c8a:	6a 00                	push   0x0
c0015c8c:	68 9d 53 01 c0       	push   0xc001539d
c0015c91:	6a 0c                	push   0xc
c0015c93:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015c96:	ff d0                	call   eax
c0015c98:	83 c4 10             	add    esp,0x10
c0015c9b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c9e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015ca0:	83 c0 24             	add    eax,0x24
c0015ca3:	8b 00                	mov    eax,DWORD PTR [eax]
c0015ca5:	6a 00                	push   0x0
c0015ca7:	68 18 53 01 c0       	push   0xc0015318
c0015cac:	6a 0d                	push   0xd
c0015cae:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015cb1:	ff d0                	call   eax
c0015cb3:	83 c4 10             	add    esp,0x10
c0015cb6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015cb9:	8b 00                	mov    eax,DWORD PTR [eax]
c0015cbb:	83 c0 24             	add    eax,0x24
c0015cbe:	8b 00                	mov    eax,DWORD PTR [eax]
c0015cc0:	6a 00                	push   0x0
c0015cc2:	68 51 53 01 c0       	push   0xc0015351
c0015cc7:	6a 0e                	push   0xe
c0015cc9:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015ccc:	ff d0                	call   eax
c0015cce:	83 c4 10             	add    esp,0x10
c0015cd1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015cd4:	8b 00                	mov    eax,DWORD PTR [eax]
c0015cd6:	83 c0 24             	add    eax,0x24
c0015cd9:	8b 00                	mov    eax,DWORD PTR [eax]
c0015cdb:	6a 00                	push   0x0
c0015cdd:	68 9d 53 01 c0       	push   0xc001539d
c0015ce2:	6a 0f                	push   0xf
c0015ce4:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015ce7:	ff d0                	call   eax
c0015ce9:	83 c4 10             	add    esp,0x10
c0015cec:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015cef:	8b 00                	mov    eax,DWORD PTR [eax]
c0015cf1:	83 c0 24             	add    eax,0x24
c0015cf4:	8b 00                	mov    eax,DWORD PTR [eax]
c0015cf6:	6a 00                	push   0x0
c0015cf8:	68 9d 53 01 c0       	push   0xc001539d
c0015cfd:	6a 10                	push   0x10
c0015cff:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015d02:	ff d0                	call   eax
c0015d04:	83 c4 10             	add    esp,0x10
c0015d07:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015d0a:	8b 00                	mov    eax,DWORD PTR [eax]
c0015d0c:	83 c0 24             	add    eax,0x24
c0015d0f:	8b 00                	mov    eax,DWORD PTR [eax]
c0015d11:	6a 00                	push   0x0
c0015d13:	68 9d 53 01 c0       	push   0xc001539d
c0015d18:	6a 11                	push   0x11
c0015d1a:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015d1d:	ff d0                	call   eax
c0015d1f:	83 c4 10             	add    esp,0x10
c0015d22:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015d25:	8b 00                	mov    eax,DWORD PTR [eax]
c0015d27:	83 c0 24             	add    eax,0x24
c0015d2a:	8b 00                	mov    eax,DWORD PTR [eax]
c0015d2c:	6a 00                	push   0x0
c0015d2e:	68 9d 53 01 c0       	push   0xc001539d
c0015d33:	6a 12                	push   0x12
c0015d35:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015d38:	ff d0                	call   eax
c0015d3a:	83 c4 10             	add    esp,0x10
c0015d3d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015d40:	8b 00                	mov    eax,DWORD PTR [eax]
c0015d42:	83 c0 24             	add    eax,0x24
c0015d45:	8b 00                	mov    eax,DWORD PTR [eax]
c0015d47:	6a 00                	push   0x0
c0015d49:	68 9d 53 01 c0       	push   0xc001539d
c0015d4e:	6a 13                	push   0x13
c0015d50:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015d53:	ff d0                	call   eax
c0015d55:	83 c4 10             	add    esp,0x10
c0015d58:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015d5b:	8b 00                	mov    eax,DWORD PTR [eax]
c0015d5d:	83 c0 24             	add    eax,0x24
c0015d60:	8b 00                	mov    eax,DWORD PTR [eax]
c0015d62:	6a 00                	push   0x0
c0015d64:	68 9d 53 01 c0       	push   0xc001539d
c0015d69:	6a 14                	push   0x14
c0015d6b:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015d6e:	ff d0                	call   eax
c0015d70:	83 c4 10             	add    esp,0x10
c0015d73:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015d76:	8b 00                	mov    eax,DWORD PTR [eax]
c0015d78:	83 c0 24             	add    eax,0x24
c0015d7b:	8b 00                	mov    eax,DWORD PTR [eax]
c0015d7d:	6a 00                	push   0x0
c0015d7f:	68 9d 53 01 c0       	push   0xc001539d
c0015d84:	6a 1e                	push   0x1e
c0015d86:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015d89:	ff d0                	call   eax
c0015d8b:	83 c4 10             	add    esp,0x10
c0015d8e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015d91:	8b 00                	mov    eax,DWORD PTR [eax]
c0015d93:	83 c0 24             	add    eax,0x24
c0015d96:	8b 00                	mov    eax,DWORD PTR [eax]
c0015d98:	6a 00                	push   0x0
c0015d9a:	68 69 c8 01 c0       	push   0xc001c869
c0015d9f:	6a 60                	push   0x60
c0015da1:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015da4:	ff d0                	call   eax
c0015da6:	83 c4 10             	add    esp,0x10
c0015da9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015dac:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0015daf:	c9                   	leave  
c0015db0:	c3                   	ret    
c0015db1:	90                   	nop

c0015db2 <InterruptController::convertLegacyIRQNumber(int)>:
c0015db2:	55                   	push   ebp
c0015db3:	89 e5                	mov    ebp,esp
c0015db5:	83 ec 08             	sub    esp,0x8
c0015db8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015dbb:	83 ec 0c             	sub    esp,0xc
c0015dbe:	50                   	push   eax
c0015dbf:	e8 32 e9 ff ff       	call   c00146f6 <Device::getName()>
c0015dc4:	83 c4 10             	add    esp,0x10
c0015dc7:	8a 00                	mov    al,BYTE PTR [eax]
c0015dc9:	3c 41                	cmp    al,0x41
c0015dcb:	0f 94 c0             	sete   al
c0015dce:	84 c0                	test   al,al
c0015dd0:	74 28                	je     c0015dfa <InterruptController::convertLegacyIRQNumber(int)+0x48>
c0015dd2:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c0015dd6:	7f 12                	jg     c0015dea <InterruptController::convertLegacyIRQNumber(int)+0x38>
c0015dd8:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015ddb:	05 40 d9 02 c0       	add    eax,0xc002d940
c0015de0:	8a 00                	mov    al,BYTE PTR [eax]
c0015de2:	0f b6 c0             	movzx  eax,al
c0015de5:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0015de8:	eb 10                	jmp    c0015dfa <InterruptController::convertLegacyIRQNumber(int)+0x48>
c0015dea:	83 ec 0c             	sub    esp,0xc
c0015ded:	68 40 b0 02 c0       	push   0xc002b040
c0015df2:	e8 9e 48 00 00       	call   c001a695 <Krnl::panic(char const*)>
c0015df7:	83 c4 10             	add    esp,0x10
c0015dfa:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015dfd:	c9                   	leave  
c0015dfe:	c3                   	ret    
c0015dff:	90                   	nop

c0015e00 <startGUI(void*)>:
c0015e00:	55                   	push   ebp
c0015e01:	89 e5                	mov    ebp,esp
c0015e03:	53                   	push   ebx
c0015e04:	83 ec 04             	sub    esp,0x4
c0015e07:	e8 b0 80 00 00       	call   c001debc <unlockScheduler()>
c0015e0c:	8b 1d e8 e6 02 c0    	mov    ebx,DWORD PTR ds:0xc002e6e8
c0015e12:	83 ec 08             	sub    esp,0x8
c0015e15:	6a 01                	push   0x1
c0015e17:	68 9c b3 02 c0       	push   0xc002b39c
c0015e1c:	e8 f1 79 00 00       	call   c001d812 <Thr::loadDLL(char const*, bool)>
c0015e21:	83 c4 10             	add    esp,0x10
c0015e24:	83 ec 08             	sub    esp,0x8
c0015e27:	53                   	push   ebx
c0015e28:	50                   	push   eax
c0015e29:	e8 18 7c 00 00       	call   c001da46 <Thr::executeDLL(unsigned long, void*)>
c0015e2e:	83 c4 10             	add    esp,0x10
c0015e31:	8b 1d e8 e6 02 c0    	mov    ebx,DWORD PTR ds:0xc002e6e8
c0015e37:	83 ec 08             	sub    esp,0x8
c0015e3a:	6a 01                	push   0x1
c0015e3c:	68 b6 b3 02 c0       	push   0xc002b3b6
c0015e41:	e8 cc 79 00 00       	call   c001d812 <Thr::loadDLL(char const*, bool)>
c0015e46:	83 c4 10             	add    esp,0x10
c0015e49:	83 ec 08             	sub    esp,0x8
c0015e4c:	53                   	push   ebx
c0015e4d:	50                   	push   eax
c0015e4e:	e8 f3 7b 00 00       	call   c001da46 <Thr::executeDLL(unsigned long, void*)>
c0015e53:	83 c4 10             	add    esp,0x10
c0015e56:	90                   	nop
c0015e57:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0015e5a:	c9                   	leave  
c0015e5b:	c3                   	ret    

c0015e5c <startGUIVESA(void*)>:
c0015e5c:	55                   	push   ebp
c0015e5d:	89 e5                	mov    ebp,esp
c0015e5f:	53                   	push   ebx
c0015e60:	83 ec 04             	sub    esp,0x4
c0015e63:	e8 54 80 00 00       	call   c001debc <unlockScheduler()>
c0015e68:	8b 1d e8 e6 02 c0    	mov    ebx,DWORD PTR ds:0xc002e6e8
c0015e6e:	83 ec 08             	sub    esp,0x8
c0015e71:	6a 01                	push   0x1
c0015e73:	68 d0 b3 02 c0       	push   0xc002b3d0
c0015e78:	e8 95 79 00 00       	call   c001d812 <Thr::loadDLL(char const*, bool)>
c0015e7d:	83 c4 10             	add    esp,0x10
c0015e80:	83 ec 08             	sub    esp,0x8
c0015e83:	53                   	push   ebx
c0015e84:	50                   	push   eax
c0015e85:	e8 bc 7b 00 00       	call   c001da46 <Thr::executeDLL(unsigned long, void*)>
c0015e8a:	83 c4 10             	add    esp,0x10
c0015e8d:	8b 1d e8 e6 02 c0    	mov    ebx,DWORD PTR ds:0xc002e6e8
c0015e93:	83 ec 08             	sub    esp,0x8
c0015e96:	6a 01                	push   0x1
c0015e98:	68 b6 b3 02 c0       	push   0xc002b3b6
c0015e9d:	e8 70 79 00 00       	call   c001d812 <Thr::loadDLL(char const*, bool)>
c0015ea2:	83 c4 10             	add    esp,0x10
c0015ea5:	83 ec 08             	sub    esp,0x8
c0015ea8:	53                   	push   ebx
c0015ea9:	50                   	push   eax
c0015eaa:	e8 97 7b 00 00       	call   c001da46 <Thr::executeDLL(unsigned long, void*)>
c0015eaf:	83 c4 10             	add    esp,0x10
c0015eb2:	90                   	nop
c0015eb3:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0015eb6:	c9                   	leave  
c0015eb7:	c3                   	ret    

c0015eb8 <sendKeyToTerminal(unsigned char)>:
c0015eb8:	55                   	push   ebp
c0015eb9:	89 e5                	mov    ebp,esp
c0015ebb:	83 ec 28             	sub    esp,0x28
c0015ebe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ec1:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0015ec4:	a1 c4 e7 02 c0       	mov    eax,ds:0xc002e7c4
c0015ec9:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c0015ecd:	83 ec 08             	sub    esp,0x8
c0015ed0:	52                   	push   edx
c0015ed1:	50                   	push   eax
c0015ed2:	e8 1b b5 ff ff       	call   c00113f2 <VgaText::receiveKey(unsigned char)>
c0015ed7:	83 c4 10             	add    esp,0x10
c0015eda:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c0015ede:	75 41                	jne    c0015f21 <sendKeyToTerminal(unsigned char)+0x69>
c0015ee0:	e8 fc 7f 00 00       	call   c001dee1 <lockStuff()>
c0015ee5:	a1 a0 e8 02 c0       	mov    eax,ds:0xc002e8a0
c0015eea:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0015eed:	c7 05 a0 e8 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e8a0,0x0
c0015ef7:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c0015efb:	74 1f                	je     c0015f1c <sendKeyToTerminal(unsigned char)+0x64>
c0015efd:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015f00:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0015f03:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0015f06:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0015f09:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0015f0c:	83 ec 0c             	sub    esp,0xc
c0015f0f:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0015f12:	e8 bb 85 00 00       	call   c001e4d2 <unblockTask(ThreadControlBlock*)>
c0015f17:	83 c4 10             	add    esp,0x10
c0015f1a:	eb db                	jmp    c0015ef7 <sendKeyToTerminal(unsigned char)+0x3f>
c0015f1c:	e8 5a 83 00 00       	call   c001e27b <unlockStuff()>
c0015f21:	90                   	nop
c0015f22:	c9                   	leave  
c0015f23:	c3                   	ret    

c0015f24 <sendKeyboardToken(KeyboardToken)>:
c0015f24:	55                   	push   ebp
c0015f25:	89 e5                	mov    ebp,esp
c0015f27:	83 ec 18             	sub    esp,0x18
c0015f2a:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c0015f2d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f30:	0f b7 c0             	movzx  eax,ax
c0015f33:	83 f2 01             	xor    edx,0x1
c0015f36:	88 90 c0 e8 02 c0    	mov    BYTE PTR [eax-0x3ffd1740],dl
c0015f3c:	a1 a8 e8 02 c0       	mov    eax,ds:0xc002e8a8
c0015f41:	85 c0                	test   eax,eax
c0015f43:	74 24                	je     c0015f69 <sendKeyboardToken(KeyboardToken)+0x45>
c0015f45:	8b 0d a8 e8 02 c0    	mov    ecx,DWORD PTR ds:0xc002e8a8
c0015f4b:	83 ec 04             	sub    esp,0x4
c0015f4e:	68 c0 e8 02 c0       	push   0xc002e8c0
c0015f53:	83 ec 08             	sub    esp,0x8
c0015f56:	89 e2                	mov    edx,esp
c0015f58:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f5b:	89 02                	mov    DWORD PTR [edx],eax
c0015f5d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015f60:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c0015f64:	ff d1                	call   ecx
c0015f66:	83 c4 10             	add    esp,0x10
c0015f69:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f6c:	66 3d 03 02          	cmp    ax,0x203
c0015f70:	75 07                	jne    c0015f79 <sendKeyboardToken(KeyboardToken)+0x55>
c0015f72:	a0 c0 e9 02 c0       	mov    al,ds:0xc002e9c0
c0015f77:	84 c0                	test   al,al
c0015f79:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c0015f7d:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c0015f80:	a0 c8 ec 02 c0       	mov    al,ds:0xc002ecc8
c0015f85:	38 c2                	cmp    dl,al
c0015f87:	74 1c                	je     c0015fa5 <sendKeyboardToken(KeyboardToken)+0x81>
c0015f89:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c0015f8c:	a2 c8 ec 02 c0       	mov    ds:0xc002ecc8,al
c0015f91:	a0 c8 ec 02 c0       	mov    al,ds:0xc002ecc8
c0015f96:	0f b6 c0             	movzx  eax,al
c0015f99:	83 ec 0c             	sub    esp,0xc
c0015f9c:	50                   	push   eax
c0015f9d:	e8 b0 a6 ff ff       	call   c0010652 <setTerminalScrollLock(bool)>
c0015fa2:	83 c4 10             	add    esp,0x10
c0015fa5:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c0015fa8:	84 c0                	test   al,al
c0015faa:	0f 84 ae 00 00 00    	je     c001605e <sendKeyboardToken(KeyboardToken)+0x13a>
c0015fb0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015fb3:	66 3d 10 03          	cmp    ax,0x310
c0015fb7:	75 06                	jne    c0015fbf <sendKeyboardToken(KeyboardToken)+0x9b>
c0015fb9:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c0015fbf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015fc2:	66 3d 11 03          	cmp    ax,0x311
c0015fc6:	75 06                	jne    c0015fce <sendKeyboardToken(KeyboardToken)+0xaa>
c0015fc8:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c0015fce:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015fd1:	66 3d 12 03          	cmp    ax,0x312
c0015fd5:	75 06                	jne    c0015fdd <sendKeyboardToken(KeyboardToken)+0xb9>
c0015fd7:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c0015fdd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015fe0:	66 3d 13 03          	cmp    ax,0x313
c0015fe4:	75 06                	jne    c0015fec <sendKeyboardToken(KeyboardToken)+0xc8>
c0015fe6:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c0015fec:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015fef:	66 3d 14 03          	cmp    ax,0x314
c0015ff3:	75 06                	jne    c0015ffb <sendKeyboardToken(KeyboardToken)+0xd7>
c0015ff5:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c0015ffb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ffe:	66 3d 15 03          	cmp    ax,0x315
c0016002:	75 06                	jne    c001600a <sendKeyboardToken(KeyboardToken)+0xe6>
c0016004:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c001600a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001600d:	66 3d 16 03          	cmp    ax,0x316
c0016011:	75 06                	jne    c0016019 <sendKeyboardToken(KeyboardToken)+0xf5>
c0016013:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c0016019:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001601c:	66 3d 17 03          	cmp    ax,0x317
c0016020:	75 06                	jne    c0016028 <sendKeyboardToken(KeyboardToken)+0x104>
c0016022:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c0016028:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001602b:	66 3d 18 03          	cmp    ax,0x318
c001602f:	75 06                	jne    c0016037 <sendKeyboardToken(KeyboardToken)+0x113>
c0016031:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c0016037:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001603a:	66 3d 19 03          	cmp    ax,0x319
c001603e:	75 06                	jne    c0016046 <sendKeyboardToken(KeyboardToken)+0x122>
c0016040:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c0016046:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016049:	66 3d 1a 03          	cmp    ax,0x31a
c001604d:	0f 85 c9 00 00 00    	jne    c001611c <sendKeyboardToken(KeyboardToken)+0x1f8>
c0016053:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c0016059:	e9 be 00 00 00       	jmp    c001611c <sendKeyboardToken(KeyboardToken)+0x1f8>
c001605e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016061:	66 3d 10 03          	cmp    ax,0x310
c0016065:	75 0a                	jne    c0016071 <sendKeyboardToken(KeyboardToken)+0x14d>
c0016067:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c001606d:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0016071:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016074:	66 3d 11 03          	cmp    ax,0x311
c0016078:	75 0a                	jne    c0016084 <sendKeyboardToken(KeyboardToken)+0x160>
c001607a:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c0016080:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0016084:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016087:	66 3d 12 03          	cmp    ax,0x312
c001608b:	75 0a                	jne    c0016097 <sendKeyboardToken(KeyboardToken)+0x173>
c001608d:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c0016093:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0016097:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001609a:	66 3d 13 03          	cmp    ax,0x313
c001609e:	75 0a                	jne    c00160aa <sendKeyboardToken(KeyboardToken)+0x186>
c00160a0:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c00160a6:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00160aa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00160ad:	66 3d 14 03          	cmp    ax,0x314
c00160b1:	75 0a                	jne    c00160bd <sendKeyboardToken(KeyboardToken)+0x199>
c00160b3:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c00160b9:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00160bd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00160c0:	66 3d 15 03          	cmp    ax,0x315
c00160c4:	75 0a                	jne    c00160d0 <sendKeyboardToken(KeyboardToken)+0x1ac>
c00160c6:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c00160cc:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00160d0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00160d3:	66 3d 16 03          	cmp    ax,0x316
c00160d7:	75 0a                	jne    c00160e3 <sendKeyboardToken(KeyboardToken)+0x1bf>
c00160d9:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c00160df:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00160e3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00160e6:	66 3d 17 03          	cmp    ax,0x317
c00160ea:	75 0a                	jne    c00160f6 <sendKeyboardToken(KeyboardToken)+0x1d2>
c00160ec:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c00160f2:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00160f6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00160f9:	66 3d 18 03          	cmp    ax,0x318
c00160fd:	75 0a                	jne    c0016109 <sendKeyboardToken(KeyboardToken)+0x1e5>
c00160ff:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c0016105:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0016109:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001610c:	66 3d 19 03          	cmp    ax,0x319
c0016110:	75 0a                	jne    c001611c <sendKeyboardToken(KeyboardToken)+0x1f8>
c0016112:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c0016118:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001611c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001611f:	66 3d 00 02          	cmp    ax,0x200
c0016123:	75 2c                	jne    c0016151 <sendKeyboardToken(KeyboardToken)+0x22d>
c0016125:	a0 c0 ec 02 c0       	mov    al,ds:0xc002ecc0
c001612a:	83 f0 01             	xor    eax,0x1
c001612d:	84 c0                	test   al,al
c001612f:	74 20                	je     c0016151 <sendKeyboardToken(KeyboardToken)+0x22d>
c0016131:	a1 58 1c 03 c0       	mov    eax,ds:0xc0031c58
c0016136:	6a 01                	push   0x1
c0016138:	6a 00                	push   0x0
c001613a:	68 00 5e 01 c0       	push   0xc0015e00
c001613f:	50                   	push   eax
c0016140:	e8 a7 7e 00 00       	call   c001dfec <Process::createThread(void (*)(void*), void*, int)>
c0016145:	83 c4 10             	add    esp,0x10
c0016148:	c6 05 c0 ec 02 c0 01 	mov    BYTE PTR ds:0xc002ecc0,0x1
c001614f:	eb 33                	jmp    c0016184 <sendKeyboardToken(KeyboardToken)+0x260>
c0016151:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016154:	66 3d 01 02          	cmp    ax,0x201
c0016158:	75 2a                	jne    c0016184 <sendKeyboardToken(KeyboardToken)+0x260>
c001615a:	a0 c0 ec 02 c0       	mov    al,ds:0xc002ecc0
c001615f:	83 f0 01             	xor    eax,0x1
c0016162:	84 c0                	test   al,al
c0016164:	74 1e                	je     c0016184 <sendKeyboardToken(KeyboardToken)+0x260>
c0016166:	a1 58 1c 03 c0       	mov    eax,ds:0xc0031c58
c001616b:	6a 01                	push   0x1
c001616d:	6a 00                	push   0x0
c001616f:	68 5c 5e 01 c0       	push   0xc0015e5c
c0016174:	50                   	push   eax
c0016175:	e8 72 7e 00 00       	call   c001dfec <Process::createThread(void (*)(void*), void*, int)>
c001617a:	83 c4 10             	add    esp,0x10
c001617d:	c6 05 c0 ec 02 c0 01 	mov    BYTE PTR ds:0xc002ecc0,0x1
c0016184:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016187:	66 3d 1d 03          	cmp    ax,0x31d
c001618b:	75 06                	jne    c0016193 <sendKeyboardToken(KeyboardToken)+0x26f>
c001618d:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c0016193:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016196:	66 3d 1c 03          	cmp    ax,0x31c
c001619a:	75 06                	jne    c00161a2 <sendKeyboardToken(KeyboardToken)+0x27e>
c001619c:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c00161a2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00161a5:	66 3d 1b 03          	cmp    ax,0x31b
c00161a9:	75 06                	jne    c00161b1 <sendKeyboardToken(KeyboardToken)+0x28d>
c00161ab:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c00161b1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00161b4:	66 3d 1e 03          	cmp    ax,0x31e
c00161b8:	75 06                	jne    c00161c0 <sendKeyboardToken(KeyboardToken)+0x29c>
c00161ba:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c00161c0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00161c3:	66 3d 1f 03          	cmp    ax,0x31f
c00161c7:	75 06                	jne    c00161cf <sendKeyboardToken(KeyboardToken)+0x2ab>
c00161c9:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c00161cf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00161d2:	66 3d 1a 03          	cmp    ax,0x31a
c00161d6:	75 06                	jne    c00161de <sendKeyboardToken(KeyboardToken)+0x2ba>
c00161d8:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c00161de:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c00161e2:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c00161e5:	83 f0 01             	xor    eax,0x1
c00161e8:	84 c0                	test   al,al
c00161ea:	74 77                	je     c0016263 <sendKeyboardToken(KeyboardToken)+0x33f>
c00161ec:	a0 c1 e9 02 c0       	mov    al,ds:0xc002e9c1
c00161f1:	84 c0                	test   al,al
c00161f3:	74 41                	je     c0016236 <sendKeyboardToken(KeyboardToken)+0x312>
c00161f5:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c00161f9:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c00161fd:	74 2b                	je     c001622a <sendKeyboardToken(KeyboardToken)+0x306>
c00161ff:	8b 15 c4 ec 02 c0    	mov    edx,DWORD PTR ds:0xc002ecc4
c0016205:	89 d0                	mov    eax,edx
c0016207:	c1 e0 02             	shl    eax,0x2
c001620a:	01 d0                	add    eax,edx
c001620c:	01 c0                	add    eax,eax
c001620e:	a3 c4 ec 02 c0       	mov    ds:0xc002ecc4,eax
c0016213:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016216:	0f b7 c0             	movzx  eax,ax
c0016219:	8d 50 d0             	lea    edx,[eax-0x30]
c001621c:	a1 c4 ec 02 c0       	mov    eax,ds:0xc002ecc4
c0016221:	01 d0                	add    eax,edx
c0016223:	a3 c4 ec 02 c0       	mov    ds:0xc002ecc4,eax
c0016228:	eb 6d                	jmp    c0016297 <sendKeyboardToken(KeyboardToken)+0x373>
c001622a:	c7 05 c4 ec 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ecc4,0x0
c0016234:	eb 61                	jmp    c0016297 <sendKeyboardToken(KeyboardToken)+0x373>
c0016236:	a1 c4 ec 02 c0       	mov    eax,ds:0xc002ecc4
c001623b:	85 c0                	test   eax,eax
c001623d:	74 18                	je     c0016257 <sendKeyboardToken(KeyboardToken)+0x333>
c001623f:	a1 c4 ec 02 c0       	mov    eax,ds:0xc002ecc4
c0016244:	0f b6 c0             	movzx  eax,al
c0016247:	83 ec 0c             	sub    esp,0xc
c001624a:	50                   	push   eax
c001624b:	e8 68 fc ff ff       	call   c0015eb8 <sendKeyToTerminal(unsigned char)>
c0016250:	83 c4 10             	add    esp,0x10
c0016253:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0016257:	c7 05 c4 ec 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ecc4,0x0
c0016261:	eb 34                	jmp    c0016297 <sendKeyboardToken(KeyboardToken)+0x373>
c0016263:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016266:	66 3d 01 01          	cmp    ax,0x101
c001626a:	75 2b                	jne    c0016297 <sendKeyboardToken(KeyboardToken)+0x373>
c001626c:	a1 c4 ec 02 c0       	mov    eax,ds:0xc002ecc4
c0016271:	85 c0                	test   eax,eax
c0016273:	74 18                	je     c001628d <sendKeyboardToken(KeyboardToken)+0x369>
c0016275:	a1 c4 ec 02 c0       	mov    eax,ds:0xc002ecc4
c001627a:	0f b6 c0             	movzx  eax,al
c001627d:	83 ec 0c             	sub    esp,0xc
c0016280:	50                   	push   eax
c0016281:	e8 32 fc ff ff       	call   c0015eb8 <sendKeyToTerminal(unsigned char)>
c0016286:	83 c4 10             	add    esp,0x10
c0016289:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c001628d:	c7 05 c4 ec 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ecc4,0x0
c0016297:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c001629a:	83 f0 01             	xor    eax,0x1
c001629d:	84 c0                	test   al,al
c001629f:	74 4c                	je     c00162ed <sendKeyboardToken(KeyboardToken)+0x3c9>
c00162a1:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c00162a4:	83 f0 01             	xor    eax,0x1
c00162a7:	84 c0                	test   al,al
c00162a9:	74 42                	je     c00162ed <sendKeyboardToken(KeyboardToken)+0x3c9>
c00162ab:	a0 c0 e9 02 c0       	mov    al,ds:0xc002e9c0
c00162b0:	83 f0 01             	xor    eax,0x1
c00162b3:	84 c0                	test   al,al
c00162b5:	74 36                	je     c00162ed <sendKeyboardToken(KeyboardToken)+0x3c9>
c00162b7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00162ba:	66 83 f8 1f          	cmp    ax,0x1f
c00162be:	76 09                	jbe    c00162c9 <sendKeyboardToken(KeyboardToken)+0x3a5>
c00162c0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00162c3:	66 83 f8 7e          	cmp    ax,0x7e
c00162c7:	76 12                	jbe    c00162db <sendKeyboardToken(KeyboardToken)+0x3b7>
c00162c9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00162cc:	66 83 f8 0a          	cmp    ax,0xa
c00162d0:	74 09                	je     c00162db <sendKeyboardToken(KeyboardToken)+0x3b7>
c00162d2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00162d5:	66 83 f8 08          	cmp    ax,0x8
c00162d9:	75 12                	jne    c00162ed <sendKeyboardToken(KeyboardToken)+0x3c9>
c00162db:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00162de:	0f b6 c0             	movzx  eax,al
c00162e1:	83 ec 0c             	sub    esp,0xc
c00162e4:	50                   	push   eax
c00162e5:	e8 ce fb ff ff       	call   c0015eb8 <sendKeyToTerminal(unsigned char)>
c00162ea:	83 c4 10             	add    esp,0x10
c00162ed:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c00162f0:	83 f0 01             	xor    eax,0x1
c00162f3:	84 c0                	test   al,al
c00162f5:	74 4f                	je     c0016346 <sendKeyboardToken(KeyboardToken)+0x422>
c00162f7:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c00162fa:	83 f0 01             	xor    eax,0x1
c00162fd:	84 c0                	test   al,al
c00162ff:	74 45                	je     c0016346 <sendKeyboardToken(KeyboardToken)+0x422>
c0016301:	a0 c0 e9 02 c0       	mov    al,ds:0xc002e9c0
c0016306:	84 c0                	test   al,al
c0016308:	74 3c                	je     c0016346 <sendKeyboardToken(KeyboardToken)+0x422>
c001630a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001630d:	66 83 f8 3f          	cmp    ax,0x3f
c0016311:	76 33                	jbe    c0016346 <sendKeyboardToken(KeyboardToken)+0x422>
c0016313:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016316:	66 83 f8 7f          	cmp    ax,0x7f
c001631a:	77 2a                	ja     c0016346 <sendKeyboardToken(KeyboardToken)+0x422>
c001631c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001631f:	88 c2                	mov    dl,al
c0016321:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016324:	66 83 f8 5f          	cmp    ax,0x5f
c0016328:	76 04                	jbe    c001632e <sendKeyboardToken(KeyboardToken)+0x40a>
c001632a:	b0 20                	mov    al,0x20
c001632c:	eb 02                	jmp    c0016330 <sendKeyboardToken(KeyboardToken)+0x40c>
c001632e:	b0 00                	mov    al,0x0
c0016330:	29 c2                	sub    edx,eax
c0016332:	88 d0                	mov    al,dl
c0016334:	83 e8 40             	sub    eax,0x40
c0016337:	0f b6 c0             	movzx  eax,al
c001633a:	83 ec 0c             	sub    esp,0xc
c001633d:	50                   	push   eax
c001633e:	e8 75 fb ff ff       	call   c0015eb8 <sendKeyToTerminal(unsigned char)>
c0016343:	83 c4 10             	add    esp,0x10
c0016346:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016349:	66 3d 00 03          	cmp    ax,0x300
c001634d:	75 0f                	jne    c001635e <sendKeyboardToken(KeyboardToken)+0x43a>
c001634f:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0016352:	83 f0 01             	xor    eax,0x1
c0016355:	84 c0                	test   al,al
c0016357:	74 05                	je     c001635e <sendKeyboardToken(KeyboardToken)+0x43a>
c0016359:	e8 29 ab ff ff       	call   c0010e87 <doTerminalCycle()>
c001635e:	90                   	nop
c001635f:	c9                   	leave  
c0016360:	c3                   	ret    

c0016361 <clearInternalKeybuffer(VgaText*)>:
c0016361:	55                   	push   ebp
c0016362:	89 e5                	mov    ebp,esp
c0016364:	83 ec 08             	sub    esp,0x8
c0016367:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001636a:	05 34 11 00 00       	add    eax,0x1134
c001636f:	83 ec 0c             	sub    esp,0xc
c0016372:	50                   	push   eax
c0016373:	e8 1c a4 fe ff       	call   c0000794 <strlen>
c0016378:	83 c4 10             	add    esp,0x10
c001637b:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c001637e:	81 c2 34 11 00 00    	add    edx,0x1134
c0016384:	83 ec 04             	sub    esp,0x4
c0016387:	50                   	push   eax
c0016388:	6a 00                	push   0x0
c001638a:	52                   	push   edx
c001638b:	e8 e8 a3 fe ff       	call   c0000778 <memset>
c0016390:	83 c4 10             	add    esp,0x10
c0016393:	90                   	nop
c0016394:	c9                   	leave  
c0016395:	c3                   	ret    

c0016396 <readKeyboard(VgaText*, char*, unsigned long)>:
c0016396:	55                   	push   ebp
c0016397:	89 e5                	mov    ebp,esp
c0016399:	83 ec 18             	sub    esp,0x18
c001639c:	fb                   	sti    
c001639d:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c00163a4:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c00163a8:	0f 84 8a 00 00 00    	je     c0016438 <readKeyboard(VgaText*, char*, unsigned long)+0xa2>
c00163ae:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00163b1:	8a 80 34 11 00 00    	mov    al,BYTE PTR [eax+0x1134]
c00163b7:	84 c0                	test   al,al
c00163b9:	75 11                	jne    c00163cc <readKeyboard(VgaText*, char*, unsigned long)+0x36>
c00163bb:	e8 fa 7a 00 00       	call   c001deba <lockScheduler()>
c00163c0:	e8 31 7e 00 00       	call   c001e1f6 <schedule()>
c00163c5:	e8 f2 7a 00 00       	call   c001debc <unlockScheduler()>
c00163ca:	eb e2                	jmp    c00163ae <readKeyboard(VgaText*, char*, unsigned long)+0x18>
c00163cc:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00163cf:	8d 50 01             	lea    edx,[eax+0x1]
c00163d2:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c00163d5:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00163d8:	8a 92 34 11 00 00    	mov    dl,BYTE PTR [edx+0x1134]
c00163de:	88 10                	mov    BYTE PTR [eax],dl
c00163e0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00163e3:	8a 80 34 11 00 00    	mov    al,BYTE PTR [eax+0x1134]
c00163e9:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c00163ec:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00163ef:	05 34 11 00 00       	add    eax,0x1134
c00163f4:	83 ec 0c             	sub    esp,0xc
c00163f7:	50                   	push   eax
c00163f8:	e8 97 a3 fe ff       	call   c0000794 <strlen>
c00163fd:	83 c4 10             	add    esp,0x10
c0016400:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0016403:	81 c2 34 11 00 00    	add    edx,0x1134
c0016409:	8d 4a 01             	lea    ecx,[edx+0x1]
c001640c:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c001640f:	81 c2 34 11 00 00    	add    edx,0x1134
c0016415:	83 ec 04             	sub    esp,0x4
c0016418:	50                   	push   eax
c0016419:	51                   	push   ecx
c001641a:	52                   	push   edx
c001641b:	e8 5c a2 fe ff       	call   c000067c <memmove>
c0016420:	83 c4 10             	add    esp,0x10
c0016423:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c0016426:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0016429:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c001642d:	0f 85 71 ff ff ff    	jne    c00163a4 <readKeyboard(VgaText*, char*, unsigned long)+0xe>
c0016433:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0016436:	eb 03                	jmp    c001643b <readKeyboard(VgaText*, char*, unsigned long)+0xa5>
c0016438:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001643b:	c9                   	leave  
c001643c:	c3                   	ret    
c001643d:	90                   	nop

c001643e <Keyboard::Keyboard(char const*)>:
c001643e:	83 ec 0c             	sub    esp,0xc
c0016441:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016445:	83 ec 08             	sub    esp,0x8
c0016448:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001644c:	50                   	push   eax
c001644d:	e8 a8 e1 ff ff       	call   c00145fa <Device::Device(char const*)>
c0016452:	83 c4 10             	add    esp,0x10
c0016455:	ba f4 b3 02 c0       	mov    edx,0xc002b3f4
c001645a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001645e:	89 10                	mov    DWORD PTR [eax],edx
c0016460:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016464:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c001646e:	c6 05 a4 e8 02 c0 01 	mov    BYTE PTR ds:0xc002e8a4,0x1
c0016475:	90                   	nop
c0016476:	83 c4 0c             	add    esp,0xc
c0016479:	c3                   	ret    

c001647a <Keyboard::~Keyboard()>:
c001647a:	83 ec 0c             	sub    esp,0xc
c001647d:	ba f4 b3 02 c0       	mov    edx,0xc002b3f4
c0016482:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016486:	89 10                	mov    DWORD PTR [eax],edx
c0016488:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001648c:	83 ec 0c             	sub    esp,0xc
c001648f:	50                   	push   eax
c0016490:	e8 47 de ff ff       	call   c00142dc <Device::~Device()>
c0016495:	83 c4 10             	add    esp,0x10
c0016498:	90                   	nop
c0016499:	83 c4 0c             	add    esp,0xc
c001649c:	c3                   	ret    
c001649d:	90                   	nop

c001649e <Keyboard::~Keyboard()>:
c001649e:	83 ec 0c             	sub    esp,0xc
c00164a1:	83 ec 0c             	sub    esp,0xc
c00164a4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00164a8:	e8 cd ff ff ff       	call   c001647a <Keyboard::~Keyboard()>
c00164ad:	83 c4 10             	add    esp,0x10
c00164b0:	83 ec 08             	sub    esp,0x8
c00164b3:	68 5c 01 00 00       	push   0x15c
c00164b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00164bc:	e8 42 ca ff ff       	call   c0012f03 <operator delete(void*, unsigned long)>
c00164c1:	83 c4 10             	add    esp,0x10
c00164c4:	83 c4 0c             	add    esp,0xc
c00164c7:	c3                   	ret    

c00164c8 <LogicalDisk::close(int, int, void*)>:
c00164c8:	83 c8 ff             	or     eax,0xffffffff
c00164cb:	c3                   	ret    

c00164cc <LogicalDisk::~LogicalDisk()>:
c00164cc:	83 ec 0c             	sub    esp,0xc
c00164cf:	ba a4 b4 02 c0       	mov    edx,0xc002b4a4
c00164d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00164d8:	89 10                	mov    DWORD PTR [eax],edx
c00164da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00164de:	83 ec 0c             	sub    esp,0xc
c00164e1:	50                   	push   eax
c00164e2:	e8 f5 dd ff ff       	call   c00142dc <Device::~Device()>
c00164e7:	83 c4 10             	add    esp,0x10
c00164ea:	90                   	nop
c00164eb:	83 c4 0c             	add    esp,0xc
c00164ee:	c3                   	ret    
c00164ef:	90                   	nop

c00164f0 <LogicalDisk::~LogicalDisk()>:
c00164f0:	83 ec 0c             	sub    esp,0xc
c00164f3:	83 ec 0c             	sub    esp,0xc
c00164f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00164fa:	e8 cd ff ff ff       	call   c00164cc <LogicalDisk::~LogicalDisk()>
c00164ff:	83 c4 10             	add    esp,0x10
c0016502:	83 ec 08             	sub    esp,0x8
c0016505:	68 74 01 00 00       	push   0x174
c001650a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001650e:	e8 f0 c9 ff ff       	call   c0012f03 <operator delete(void*, unsigned long)>
c0016513:	83 c4 10             	add    esp,0x10
c0016516:	83 c4 0c             	add    esp,0xc
c0016519:	c3                   	ret    

c001651a <LogicalDisk::open(int, int, void*)>:
c001651a:	83 ec 18             	sub    esp,0x18
c001651d:	68 20 b4 02 c0       	push   0xc002b420
c0016522:	e8 6e 41 00 00       	call   c001a695 <Krnl::panic(char const*)>
c0016527:	83 c8 ff             	or     eax,0xffffffff
c001652a:	83 c4 1c             	add    esp,0x1c
c001652d:	c3                   	ret    

c001652e <LogicalDisk::absoluteToRelative(unsigned long long)>:
c001652e:	53                   	push   ebx
c001652f:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0016533:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016537:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001653b:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c0016541:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c0016547:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c001654d:	77 10                	ja     c001655f <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c001654f:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c0016555:	89 d3                	mov    ebx,edx
c0016557:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c001655d:	72 05                	jb     c0016564 <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c001655f:	83 c8 ff             	or     eax,0xffffffff
c0016562:	89 c2                	mov    edx,eax
c0016564:	5b                   	pop    ebx
c0016565:	c3                   	ret    

c0016566 <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c0016566:	56                   	push   esi
c0016567:	83 c8 ff             	or     eax,0xffffffff
c001656a:	53                   	push   ebx
c001656b:	89 c2                	mov    edx,eax
c001656d:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0016571:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0016575:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0016579:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c001657f:	77 27                	ja     c00165a8 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c0016581:	89 d8                	mov    eax,ebx
c0016583:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c0016589:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c001658f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0016594:	89 c2                	mov    edx,eax
c0016596:	73 10                	jae    c00165a8 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c0016598:	89 c8                	mov    eax,ecx
c001659a:	89 da                	mov    edx,ebx
c001659c:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c00165a2:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c00165a8:	5b                   	pop    ebx
c00165a9:	5e                   	pop    esi
c00165aa:	c3                   	ret    
c00165ab:	90                   	nop

c00165ac <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c00165ac:	83 ec 1c             	sub    esp,0x1c
c00165af:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00165b3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00165b7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00165bb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00165bf:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00165c3:	89 04 24             	mov    DWORD PTR [esp],eax
c00165c6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00165ca:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00165ce:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00165d2:	83 ec 08             	sub    esp,0x8
c00165d5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00165d9:	50                   	push   eax
c00165da:	e8 1b e0 ff ff       	call   c00145fa <Device::Device(char const*)>
c00165df:	83 c4 10             	add    esp,0x10
c00165e2:	ba a4 b4 02 c0       	mov    edx,0xc002b4a4
c00165e7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00165eb:	89 10                	mov    DWORD PTR [eax],edx
c00165ed:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00165f1:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c00165f8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00165fc:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0016603:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016607:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c0016611:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0016615:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016619:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001661d:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c0016623:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c0016629:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001662d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0016630:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0016634:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c001663a:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c0016640:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016644:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0016648:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c001664e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016652:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c001665c:	90                   	nop
c001665d:	83 c4 1c             	add    esp,0x1c
c0016660:	c3                   	ret    
c0016661:	90                   	nop

c0016662 <LogicalDisk::assignDriveLetter()>:
c0016662:	55                   	push   ebp
c0016663:	57                   	push   edi
c0016664:	56                   	push   esi
c0016665:	53                   	push   ebx
c0016666:	83 ec 14             	sub    esp,0x14
c0016669:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001666d:	8b 3d e0 ec 02 c0    	mov    edi,DWORD PTR ds:0xc002ece0
c0016673:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c0016679:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c001667d:	8a 83 69 01 00 00    	mov    al,BYTE PTR [ebx+0x169]
c0016683:	8b 3d e4 ec 02 c0    	mov    edi,DWORD PTR ds:0xc002ece4
c0016689:	3c 01                	cmp    al,0x1
c001668b:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c001668f:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0016693:	19 c0                	sbb    eax,eax
c0016695:	83 e0 02             	and    eax,0x2
c0016698:	83 c0 41             	add    eax,0x41
c001669b:	0f be e8             	movsx  ebp,al
c001669e:	3c 43                	cmp    al,0x43
c00166a0:	75 10                	jne    c00166b2 <LogicalDisk::assignDriveLetter()+0x50>
c00166a2:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c00166a9:	75 5d                	jne    c0016708 <LogicalDisk::assignDriveLetter()+0xa6>
c00166ab:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c00166b0:	75 56                	jne    c0016708 <LogicalDisk::assignDriveLetter()+0xa6>
c00166b2:	8d 75 bf             	lea    esi,[ebp-0x41]
c00166b5:	ba 01 00 00 00       	mov    edx,0x1
c00166ba:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c00166be:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c00166c2:	d3 e2                	shl    edx,cl
c00166c4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00166c8:	89 d7                	mov    edi,edx
c00166ca:	89 d6                	mov    esi,edx
c00166cc:	c1 ff 1f             	sar    edi,0x1f
c00166cf:	23 54 24 08          	and    edx,DWORD PTR [esp+0x8]
c00166d3:	21 f9                	and    ecx,edi
c00166d5:	09 d1                	or     ecx,edx
c00166d7:	75 2f                	jne    c0016708 <LogicalDisk::assignDriveLetter()+0xa6>
c00166d9:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c00166dd:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00166e1:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c00166e7:	09 f2                	or     edx,esi
c00166e9:	89 15 e0 ec 02 c0    	mov    DWORD PTR ds:0xc002ece0,edx
c00166ef:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00166f3:	09 fa                	or     edx,edi
c00166f5:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c00166f9:	89 15 e4 ec 02 c0    	mov    DWORD PTR ds:0xc002ece4,edx
c00166ff:	89 1c bd 00 ed 02 c0 	mov    DWORD PTR [edi*4-0x3ffd1300],ebx
c0016706:	eb 08                	jmp    c0016710 <LogicalDisk::assignDriveLetter()+0xae>
c0016708:	45                   	inc    ebp
c0016709:	40                   	inc    eax
c001670a:	3c 5b                	cmp    al,0x5b
c001670c:	75 90                	jne    c001669e <LogicalDisk::assignDriveLetter()+0x3c>
c001670e:	31 c0                	xor    eax,eax
c0016710:	83 c4 14             	add    esp,0x14
c0016713:	5b                   	pop    ebx
c0016714:	5e                   	pop    esi
c0016715:	5f                   	pop    edi
c0016716:	5d                   	pop    ebp
c0016717:	c3                   	ret    

c0016718 <LogicalDisk::mount()>:
c0016718:	56                   	push   esi
c0016719:	53                   	push   ebx
c001671a:	51                   	push   ecx
c001671b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001671f:	8b 1d 6c e8 02 c0    	mov    ebx,DWORD PTR ds:0xc002e86c
c0016725:	c7 86 70 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x170],0x0
c001672f:	85 db                	test   ebx,ebx
c0016731:	74 50                	je     c0016783 <LogicalDisk::mount()+0x6b>
c0016733:	e8 6d 77 00 00       	call   c001dea5 <getIRQNestingLevel()>
c0016738:	52                   	push   edx
c0016739:	52                   	push   edx
c001673a:	50                   	push   eax
c001673b:	68 44 b4 02 c0       	push   0xc002b444
c0016740:	e8 9e c8 ff ff       	call   c0012fe3 <Dbg::kprintf(char const*, ...)>
c0016745:	83 c4 0c             	add    esp,0xc
c0016748:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c001674f:	8b 13                	mov    edx,DWORD PTR [ebx]
c0016751:	83 e8 41             	sub    eax,0x41
c0016754:	50                   	push   eax
c0016755:	56                   	push   esi
c0016756:	53                   	push   ebx
c0016757:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001675a:	83 c4 10             	add    esp,0x10
c001675d:	84 c0                	test   al,al
c001675f:	74 08                	je     c0016769 <LogicalDisk::mount()+0x51>
c0016761:	89 9e 70 01 00 00    	mov    DWORD PTR [esi+0x170],ebx
c0016767:	eb 1c                	jmp    c0016785 <LogicalDisk::mount()+0x6d>
c0016769:	e8 37 77 00 00       	call   c001dea5 <getIRQNestingLevel()>
c001676e:	51                   	push   ecx
c001676f:	51                   	push   ecx
c0016770:	50                   	push   eax
c0016771:	68 5f b4 02 c0       	push   0xc002b45f
c0016776:	e8 68 c8 ff ff       	call   c0012fe3 <Dbg::kprintf(char const*, ...)>
c001677b:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c001677e:	83 c4 10             	add    esp,0x10
c0016781:	eb ac                	jmp    c001672f <LogicalDisk::mount()+0x17>
c0016783:	31 c0                	xor    eax,eax
c0016785:	5a                   	pop    edx
c0016786:	5b                   	pop    ebx
c0016787:	5e                   	pop    esi
c0016788:	c3                   	ret    
c0016789:	90                   	nop

c001678a <LogicalDisk::unmount()>:
c001678a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001678e:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c0016798:	c3                   	ret    
c0016799:	90                   	nop

c001679a <LogicalDisk::eject()>:
c001679a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001679e:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c00167a4:	8b 10                	mov    edx,DWORD PTR [eax]
c00167a6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00167aa:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c00167ad:	90                   	nop

c00167ae <LogicalDisk::unassignDriveLetter()>:
c00167ae:	57                   	push   edi
c00167af:	56                   	push   esi
c00167b0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00167b4:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c00167bb:	84 c9                	test   cl,cl
c00167bd:	75 0f                	jne    c00167ce <LogicalDisk::unassignDriveLetter()+0x20>
c00167bf:	c7 44 24 0c 7a b4 02 c0 	mov    DWORD PTR [esp+0xc],0xc002b47a
c00167c7:	5e                   	pop    esi
c00167c8:	5f                   	pop    edi
c00167c9:	e9 c7 3e 00 00       	jmp    c001a695 <Krnl::panic(char const*)>
c00167ce:	83 e9 41             	sub    ecx,0x41
c00167d1:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c00167d8:	b8 01 00 00 00       	mov    eax,0x1
c00167dd:	c7 04 8d 00 ed 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd1300],0x0
c00167e8:	d3 e0                	shl    eax,cl
c00167ea:	89 c7                	mov    edi,eax
c00167ec:	f7 d0                	not    eax
c00167ee:	c1 ff 1f             	sar    edi,0x1f
c00167f1:	21 05 e0 ec 02 c0    	and    DWORD PTR ds:0xc002ece0,eax
c00167f7:	89 fe                	mov    esi,edi
c00167f9:	f7 d6                	not    esi
c00167fb:	21 35 e4 ec 02 c0    	and    DWORD PTR ds:0xc002ece4,esi
c0016801:	5e                   	pop    esi
c0016802:	5f                   	pop    edi
c0016803:	c3                   	ret    

c0016804 <LogicalDisk::read(unsigned long long, int, void*)>:
c0016804:	57                   	push   edi
c0016805:	56                   	push   esi
c0016806:	53                   	push   ebx
c0016807:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001680b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001680f:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0016813:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016817:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c001681d:	77 41                	ja     c0016860 <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c001681f:	99                   	cdq    
c0016820:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c0016826:	01 c8                	add    eax,ecx
c0016828:	11 da                	adc    edx,ebx
c001682a:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c0016830:	19 d7                	sbb    edi,edx
c0016832:	72 33                	jb     c0016867 <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c0016834:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c001683a:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c0016840:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0016844:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0016848:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c001684e:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0016854:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016858:	5b                   	pop    ebx
c0016859:	5e                   	pop    esi
c001685a:	5f                   	pop    edi
c001685b:	e9 b0 0a 00 00       	jmp    c0017310 <VCache::read(unsigned long long, int, void*)>
c0016860:	b8 05 00 00 00       	mov    eax,0x5
c0016865:	eb 05                	jmp    c001686c <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c0016867:	b8 07 00 00 00       	mov    eax,0x7
c001686c:	5b                   	pop    ebx
c001686d:	5e                   	pop    esi
c001686e:	5f                   	pop    edi
c001686f:	c3                   	ret    

c0016870 <LogicalDisk::write(unsigned long long, int, void*)>:
c0016870:	57                   	push   edi
c0016871:	56                   	push   esi
c0016872:	53                   	push   ebx
c0016873:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0016877:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001687b:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001687f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016883:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0016889:	77 41                	ja     c00168cc <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c001688b:	99                   	cdq    
c001688c:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c0016892:	01 c8                	add    eax,ecx
c0016894:	11 da                	adc    edx,ebx
c0016896:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c001689c:	19 d7                	sbb    edi,edx
c001689e:	72 33                	jb     c00168d3 <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c00168a0:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c00168a6:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c00168ac:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00168b0:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c00168b4:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c00168ba:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00168c0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00168c4:	5b                   	pop    ebx
c00168c5:	5e                   	pop    esi
c00168c6:	5f                   	pop    edi
c00168c7:	e9 4e 09 00 00       	jmp    c001721a <VCache::write(unsigned long long, int, void*)>
c00168cc:	b8 05 00 00 00       	mov    eax,0x5
c00168d1:	eb 05                	jmp    c00168d8 <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c00168d3:	b8 07 00 00 00       	mov    eax,0x7
c00168d8:	5b                   	pop    ebx
c00168d9:	5e                   	pop    esi
c00168da:	5f                   	pop    edi
c00168db:	c3                   	ret    

c00168dc <Mouse::Mouse(char const*)>:
c00168dc:	83 ec 0c             	sub    esp,0xc
c00168df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00168e3:	83 ec 08             	sub    esp,0x8
c00168e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00168ea:	50                   	push   eax
c00168eb:	e8 0a dd ff ff       	call   c00145fa <Device::Device(char const*)>
c00168f0:	83 c4 10             	add    esp,0x10
c00168f3:	ba d0 b4 02 c0       	mov    edx,0xc002b4d0
c00168f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00168fc:	89 10                	mov    DWORD PTR [eax],edx
c00168fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016902:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c001690c:	90                   	nop
c001690d:	83 c4 0c             	add    esp,0xc
c0016910:	c3                   	ret    
c0016911:	90                   	nop

c0016912 <Mouse::~Mouse()>:
c0016912:	83 ec 0c             	sub    esp,0xc
c0016915:	ba d0 b4 02 c0       	mov    edx,0xc002b4d0
c001691a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001691e:	89 10                	mov    DWORD PTR [eax],edx
c0016920:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016924:	83 ec 0c             	sub    esp,0xc
c0016927:	50                   	push   eax
c0016928:	e8 af d9 ff ff       	call   c00142dc <Device::~Device()>
c001692d:	83 c4 10             	add    esp,0x10
c0016930:	90                   	nop
c0016931:	83 c4 0c             	add    esp,0xc
c0016934:	c3                   	ret    
c0016935:	90                   	nop

c0016936 <Mouse::~Mouse()>:
c0016936:	83 ec 0c             	sub    esp,0xc
c0016939:	83 ec 0c             	sub    esp,0xc
c001693c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016940:	e8 cd ff ff ff       	call   c0016912 <Mouse::~Mouse()>
c0016945:	83 c4 10             	add    esp,0x10
c0016948:	83 ec 08             	sub    esp,0x8
c001694b:	68 58 01 00 00       	push   0x158
c0016950:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016954:	e8 aa c5 ff ff       	call   c0012f03 <operator delete(void*, unsigned long)>
c0016959:	83 c4 10             	add    esp,0x10
c001695c:	83 c4 0c             	add    esp,0xc
c001695f:	c3                   	ret    

c0016960 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c0016960:	55                   	push   ebp
c0016961:	57                   	push   edi
c0016962:	56                   	push   esi
c0016963:	53                   	push   ebx
c0016964:	81 ec 28 01 00 00    	sub    esp,0x128
c001696a:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c0016971:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c0016978:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c001697f:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c0016986:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001698a:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001698e:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0016995:	e8 5c dd ff ff       	call   c00146f6 <Device::getName()>
c001699a:	5a                   	pop    edx
c001699b:	59                   	pop    ecx
c001699c:	50                   	push   eax
c001699d:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c00169a1:	55                   	push   ebp
c00169a2:	e8 8d 9e fe ff       	call   c0000834 <strcpy>
c00169a7:	5b                   	pop    ebx
c00169a8:	58                   	pop    eax
c00169a9:	68 f4 b4 02 c0       	push   0xc002b4f4
c00169ae:	55                   	push   ebp
c00169af:	e8 c0 9f fe ff       	call   c0000974 <strcat>
c00169b4:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c00169bb:	e8 24 8f ff ff       	call   c000f8e4 <malloc>
c00169c0:	83 c4 0c             	add    esp,0xc
c00169c3:	89 c3                	mov    ebx,eax
c00169c5:	57                   	push   edi
c00169c6:	56                   	push   esi
c00169c7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00169cb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00169cf:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c00169d6:	55                   	push   ebp
c00169d7:	50                   	push   eax
c00169d8:	e8 cf fb ff ff       	call   c00165ac <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c00169dd:	83 c4 14             	add    esp,0x14
c00169e0:	53                   	push   ebx
c00169e1:	e8 7c fc ff ff       	call   c0016662 <LogicalDisk::assignDriveLetter()>
c00169e6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00169e9:	89 c6                	mov    esi,eax
c00169eb:	e8 28 fd ff ff       	call   c0016718 <LogicalDisk::mount()>
c00169f0:	58                   	pop    eax
c00169f1:	5a                   	pop    edx
c00169f2:	53                   	push   ebx
c00169f3:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c00169fa:	e8 0b da ff ff       	call   c001440a <Device::addChild(Device*)>
c00169ff:	59                   	pop    ecx
c0016a00:	89 f0                	mov    eax,esi
c0016a02:	5b                   	pop    ebx
c0016a03:	0f be f0             	movsx  esi,al
c0016a06:	56                   	push   esi
c0016a07:	68 ff b4 02 c0       	push   0xc002b4ff
c0016a0c:	e8 d2 c5 ff ff       	call   c0012fe3 <Dbg::kprintf(char const*, ...)>
c0016a11:	81 c4 2c 01 00 00    	add    esp,0x12c
c0016a17:	5b                   	pop    ebx
c0016a18:	5e                   	pop    esi
c0016a19:	5f                   	pop    edi
c0016a1a:	5d                   	pop    ebp
c0016a1b:	c3                   	ret    

c0016a1c <createPartitionsForDisk(PhysicalDisk*)>:
c0016a1c:	55                   	push   ebp
c0016a1d:	57                   	push   edi
c0016a1e:	56                   	push   esi
c0016a1f:	53                   	push   ebx
c0016a20:	81 ec 5c 02 00 00    	sub    esp,0x25c
c0016a26:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c0016a2d:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0016a33:	3d 00 02 00 00       	cmp    eax,0x200
c0016a38:	74 27                	je     c0016a61 <createPartitionsForDisk(PhysicalDisk*)+0x45>
c0016a3a:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c0016a40:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c0016a46:	83 ec 10             	sub    esp,0x10
c0016a49:	0f a4 f7 0a          	shld   edi,esi,0xa
c0016a4d:	99                   	cdq    
c0016a4e:	c1 e6 0a             	shl    esi,0xa
c0016a51:	52                   	push   edx
c0016a52:	89 fd                	mov    ebp,edi
c0016a54:	50                   	push   eax
c0016a55:	55                   	push   ebp
c0016a56:	56                   	push   esi
c0016a57:	e8 40 00 01 00       	call   c0026a9c <__udivdi3>
c0016a5c:	e9 b1 00 00 00       	jmp    c0016b12 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c0016a61:	83 ec 0c             	sub    esp,0xc
c0016a64:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016a66:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c0016a6a:	56                   	push   esi
c0016a6b:	6a 01                	push   0x1
c0016a6d:	6a 00                	push   0x0
c0016a6f:	6a 00                	push   0x0
c0016a71:	53                   	push   ebx
c0016a72:	ff 50 28             	call   DWORD PTR [eax+0x28]
c0016a75:	83 c4 20             	add    esp,0x20
c0016a78:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c0016a80:	75 0a                	jne    c0016a8c <createPartitionsForDisk(PhysicalDisk*)+0x70>
c0016a82:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c0016a8a:	74 2c                	je     c0016ab8 <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c0016a8c:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0016a92:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0016a98:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0016a9e:	83 ec 10             	sub    esp,0x10
c0016aa1:	0f a4 c2 0a          	shld   edx,eax,0xa
c0016aa5:	89 f7                	mov    edi,esi
c0016aa7:	c1 e0 0a             	shl    eax,0xa
c0016aaa:	c1 ff 1f             	sar    edi,0x1f
c0016aad:	57                   	push   edi
c0016aae:	56                   	push   esi
c0016aaf:	52                   	push   edx
c0016ab0:	50                   	push   eax
c0016ab1:	e8 e6 ff 00 00       	call   c0026a9c <__udivdi3>
c0016ab6:	eb 5a                	jmp    c0016b12 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c0016ab8:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c0016abf:	8a 84 24 1e 02 00 00 	mov    al,BYTE PTR [esp+0x21e]
c0016ac6:	83 e1 7f             	and    ecx,0x7f
c0016ac9:	83 e0 7f             	and    eax,0x7f
c0016acc:	01 c1                	add    ecx,eax
c0016ace:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c0016ad5:	83 e0 7f             	and    eax,0x7f
c0016ad8:	01 c1                	add    ecx,eax
c0016ada:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c0016ae1:	83 e0 7f             	and    eax,0x7f
c0016ae4:	00 c1                	add    cl,al
c0016ae6:	74 41                	je     c0016b29 <createPartitionsForDisk(PhysicalDisk*)+0x10d>
c0016ae8:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0016aee:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0016af4:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0016afa:	83 ec 10             	sub    esp,0x10
c0016afd:	0f a4 c2 0a          	shld   edx,eax,0xa
c0016b01:	89 f7                	mov    edi,esi
c0016b03:	c1 e0 0a             	shl    eax,0xa
c0016b06:	c1 ff 1f             	sar    edi,0x1f
c0016b09:	57                   	push   edi
c0016b0a:	56                   	push   esi
c0016b0b:	52                   	push   edx
c0016b0c:	50                   	push   eax
c0016b0d:	e8 8a ff 00 00       	call   c0026a9c <__udivdi3>
c0016b12:	83 c4 14             	add    esp,0x14
c0016b15:	52                   	push   edx
c0016b16:	50                   	push   eax
c0016b17:	6a 00                	push   0x0
c0016b19:	6a 00                	push   0x0
c0016b1b:	53                   	push   ebx
c0016b1c:	e8 3f fe ff ff       	call   c0016960 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c0016b21:	83 c4 20             	add    esp,0x20
c0016b24:	e9 79 01 00 00       	jmp    c0016ca2 <createPartitionsForDisk(PhysicalDisk*)+0x286>
c0016b29:	89 f0                	mov    eax,esi
c0016b2b:	31 f6                	xor    esi,esi
c0016b2d:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c0016b34:	75 02                	jne    c0016b38 <createPartitionsForDisk(PhysicalDisk*)+0x11c>
c0016b36:	89 f1                	mov    ecx,esi
c0016b38:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c0016b3f:	0f b6 b8 c8 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c8]
c0016b46:	c1 e2 08             	shl    edx,0x8
c0016b49:	c1 e7 10             	shl    edi,0x10
c0016b4c:	c7 44 f4 14 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x14],0x0
c0016b54:	09 fa                	or     edx,edi
c0016b56:	c7 44 f4 34 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x34],0x0
c0016b5e:	0f b6 b8 c6 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c6]
c0016b65:	83 c0 10             	add    eax,0x10
c0016b68:	09 fa                	or     edx,edi
c0016b6a:	0f b6 b8 b9 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b9]
c0016b71:	c1 e7 18             	shl    edi,0x18
c0016b74:	09 fa                	or     edx,edi
c0016b76:	0f b6 b8 bc 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bc]
c0016b7d:	89 54 f4 10          	mov    DWORD PTR [esp+esi*8+0x10],edx
c0016b81:	c1 e7 10             	shl    edi,0x10
c0016b84:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c0016b8b:	c1 e2 08             	shl    edx,0x8
c0016b8e:	09 fa                	or     edx,edi
c0016b90:	0f b6 b8 ba 01 00 00 	movzx  edi,BYTE PTR [eax+0x1ba]
c0016b97:	09 fa                	or     edx,edi
c0016b99:	0f b6 b8 bd 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bd]
c0016ba0:	c1 e7 18             	shl    edi,0x18
c0016ba3:	09 fa                	or     edx,edi
c0016ba5:	89 54 f4 30          	mov    DWORD PTR [esp+esi*8+0x30],edx
c0016ba9:	46                   	inc    esi
c0016baa:	83 fe 04             	cmp    esi,0x4
c0016bad:	0f 85 7a ff ff ff    	jne    c0016b2d <createPartitionsForDisk(PhysicalDisk*)+0x111>
c0016bb3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016bb7:	83 f0 01             	xor    eax,0x1
c0016bba:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0016bbe:	75 57                	jne    c0016c17 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c0016bc0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016bc4:	83 f0 01             	xor    eax,0x1
c0016bc7:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c0016bcb:	75 4a                	jne    c0016c17 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c0016bcd:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0016bd1:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0016bd9:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0016be1:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0016be7:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0016bed:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0016bf3:	0f a4 c2 0a          	shld   edx,eax,0xa
c0016bf7:	89 f7                	mov    edi,esi
c0016bf9:	c1 e0 0a             	shl    eax,0xa
c0016bfc:	c1 ff 1f             	sar    edi,0x1f
c0016bff:	57                   	push   edi
c0016c00:	56                   	push   esi
c0016c01:	52                   	push   edx
c0016c02:	50                   	push   eax
c0016c03:	e8 94 fe 00 00       	call   c0026a9c <__udivdi3>
c0016c08:	83 c4 10             	add    esp,0x10
c0016c0b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0016c0f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0016c13:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0016c17:	84 c9                	test   cl,cl
c0016c19:	74 53                	je     c0016c6e <createPartitionsForDisk(PhysicalDisk*)+0x252>
c0016c1b:	0f b6 c9             	movzx  ecx,cl
c0016c1e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c22:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0016c26:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016c2a:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0016c2e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016c32:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0016c36:	8b 44 cc 10          	mov    eax,DWORD PTR [esp+ecx*8+0x10]
c0016c3a:	8b 54 cc 14          	mov    edx,DWORD PTR [esp+ecx*8+0x14]
c0016c3e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016c42:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0016c46:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016c4a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016c4e:	89 44 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],eax
c0016c52:	89 54 cc 14          	mov    DWORD PTR [esp+ecx*8+0x14],edx
c0016c56:	8b 44 cc 30          	mov    eax,DWORD PTR [esp+ecx*8+0x30]
c0016c5a:	8b 54 cc 34          	mov    edx,DWORD PTR [esp+ecx*8+0x34]
c0016c5e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0016c62:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0016c66:	89 74 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],esi
c0016c6a:	89 7c cc 34          	mov    DWORD PTR [esp+ecx*8+0x34],edi
c0016c6e:	31 ed                	xor    ebp,ebp
c0016c70:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c0016c74:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c0016c78:	89 f8                	mov    eax,edi
c0016c7a:	09 f0                	or     eax,esi
c0016c7c:	74 1e                	je     c0016c9c <createPartitionsForDisk(PhysicalDisk*)+0x280>
c0016c7e:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c0016c82:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c0016c86:	89 d1                	mov    ecx,edx
c0016c88:	09 c1                	or     ecx,eax
c0016c8a:	74 10                	je     c0016c9c <createPartitionsForDisk(PhysicalDisk*)+0x280>
c0016c8c:	83 ec 0c             	sub    esp,0xc
c0016c8f:	57                   	push   edi
c0016c90:	56                   	push   esi
c0016c91:	52                   	push   edx
c0016c92:	50                   	push   eax
c0016c93:	53                   	push   ebx
c0016c94:	e8 c7 fc ff ff       	call   c0016960 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c0016c99:	83 c4 20             	add    esp,0x20
c0016c9c:	45                   	inc    ebp
c0016c9d:	83 fd 04             	cmp    ebp,0x4
c0016ca0:	75 ce                	jne    c0016c70 <createPartitionsForDisk(PhysicalDisk*)+0x254>
c0016ca2:	81 c4 5c 02 00 00    	add    esp,0x25c
c0016ca8:	5b                   	pop    ebx
c0016ca9:	5e                   	pop    esi
c0016caa:	5f                   	pop    edi
c0016cab:	5d                   	pop    ebp
c0016cac:	c3                   	ret    
c0016cad:	90                   	nop

c0016cae <Serial::Serial(char const*)>:
c0016cae:	83 ec 0c             	sub    esp,0xc
c0016cb1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016cb5:	83 ec 08             	sub    esp,0x8
c0016cb8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016cbc:	50                   	push   eax
c0016cbd:	e8 38 d9 ff ff       	call   c00145fa <Device::Device(char const*)>
c0016cc2:	83 c4 10             	add    esp,0x10
c0016cc5:	ba 2c b5 02 c0       	mov    edx,0xc002b52c
c0016cca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016cce:	89 10                	mov    DWORD PTR [eax],edx
c0016cd0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016cd4:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c0016cde:	90                   	nop
c0016cdf:	83 c4 0c             	add    esp,0xc
c0016ce2:	c3                   	ret    
c0016ce3:	90                   	nop

c0016ce4 <Serial::~Serial()>:
c0016ce4:	83 ec 0c             	sub    esp,0xc
c0016ce7:	ba 2c b5 02 c0       	mov    edx,0xc002b52c
c0016cec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016cf0:	89 10                	mov    DWORD PTR [eax],edx
c0016cf2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016cf6:	83 ec 0c             	sub    esp,0xc
c0016cf9:	50                   	push   eax
c0016cfa:	e8 dd d5 ff ff       	call   c00142dc <Device::~Device()>
c0016cff:	83 c4 10             	add    esp,0x10
c0016d02:	90                   	nop
c0016d03:	83 c4 0c             	add    esp,0xc
c0016d06:	c3                   	ret    
c0016d07:	90                   	nop

c0016d08 <Serial::~Serial()>:
c0016d08:	83 ec 0c             	sub    esp,0xc
c0016d0b:	83 ec 0c             	sub    esp,0xc
c0016d0e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016d12:	e8 cd ff ff ff       	call   c0016ce4 <Serial::~Serial()>
c0016d17:	83 c4 10             	add    esp,0x10
c0016d1a:	83 ec 08             	sub    esp,0x8
c0016d1d:	68 58 01 00 00       	push   0x158
c0016d22:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016d26:	e8 d8 c1 ff ff       	call   c0012f03 <operator delete(void*, unsigned long)>
c0016d2b:	83 c4 10             	add    esp,0x10
c0016d2e:	83 c4 0c             	add    esp,0xc
c0016d31:	c3                   	ret    

c0016d32 <Timer::Timer(char const*)>:
c0016d32:	83 ec 0c             	sub    esp,0xc
c0016d35:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016d39:	83 ec 08             	sub    esp,0x8
c0016d3c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016d40:	50                   	push   eax
c0016d41:	e8 b4 d8 ff ff       	call   c00145fa <Device::Device(char const*)>
c0016d46:	83 c4 10             	add    esp,0x10
c0016d49:	ba 70 b5 02 c0       	mov    edx,0xc002b570
c0016d4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016d52:	89 10                	mov    DWORD PTR [eax],edx
c0016d54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016d58:	c7 80 10 01 00 00 0e 00 00 00 	mov    DWORD PTR [eax+0x110],0xe
c0016d62:	90                   	nop
c0016d63:	83 c4 0c             	add    esp,0xc
c0016d66:	c3                   	ret    
c0016d67:	90                   	nop

c0016d68 <Timer::~Timer()>:
c0016d68:	83 ec 0c             	sub    esp,0xc
c0016d6b:	ba 70 b5 02 c0       	mov    edx,0xc002b570
c0016d70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016d74:	89 10                	mov    DWORD PTR [eax],edx
c0016d76:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016d7a:	83 ec 0c             	sub    esp,0xc
c0016d7d:	50                   	push   eax
c0016d7e:	e8 59 d5 ff ff       	call   c00142dc <Device::~Device()>
c0016d83:	83 c4 10             	add    esp,0x10
c0016d86:	90                   	nop
c0016d87:	83 c4 0c             	add    esp,0xc
c0016d8a:	c3                   	ret    
c0016d8b:	90                   	nop

c0016d8c <Timer::~Timer()>:
c0016d8c:	83 ec 0c             	sub    esp,0xc
c0016d8f:	83 ec 0c             	sub    esp,0xc
c0016d92:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016d96:	e8 cd ff ff ff       	call   c0016d68 <Timer::~Timer()>
c0016d9b:	83 c4 10             	add    esp,0x10
c0016d9e:	83 ec 08             	sub    esp,0x8
c0016da1:	68 5c 01 00 00       	push   0x15c
c0016da6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016daa:	e8 54 c1 ff ff       	call   c0012f03 <operator delete(void*, unsigned long)>
c0016daf:	83 c4 10             	add    esp,0x10
c0016db2:	83 c4 0c             	add    esp,0xc
c0016db5:	c3                   	ret    

c0016db6 <Timer::read()>:
c0016db6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016dba:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0016dc0:	c3                   	ret    

c0016dc1 <timerHandler(unsigned long long)>:
c0016dc1:	55                   	push   ebp
c0016dc2:	57                   	push   edi
c0016dc3:	56                   	push   esi
c0016dc4:	53                   	push   ebx
c0016dc5:	83 ec 0c             	sub    esp,0xc
c0016dc8:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0016dcc:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0016dd0:	01 35 70 ed 02 c0    	add    DWORD PTR ds:0xc002ed70,esi
c0016dd6:	11 3d 74 ed 02 c0    	adc    DWORD PTR ds:0xc002ed74,edi
c0016ddc:	80 3d ed e6 02 c0 00 	cmp    BYTE PTR ds:0xc002e6ed,0x0
c0016de3:	0f 84 07 01 00 00    	je     c0016ef0 <timerHandler(unsigned long long)+0x12f>
c0016de9:	e8 f3 70 00 00       	call   c001dee1 <lockStuff()>
c0016dee:	83 ec 0c             	sub    esp,0xc
c0016df1:	68 40 1c 03 c0       	push   0xc0031c40
c0016df6:	e8 13 1d 01 00       	call   c0028b0e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016dfb:	c7 04 24 40 1c 03 c0 	mov    DWORD PTR [esp],0xc0031c40
c0016e02:	89 c3                	mov    ebx,eax
c0016e04:	e8 0d 1d 01 00       	call   c0028b16 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016e09:	83 c4 10             	add    esp,0x10
c0016e0c:	84 c0                	test   al,al
c0016e0e:	74 60                	je     c0016e70 <timerHandler(unsigned long long)+0xaf>
c0016e10:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0016e16:	8b 42 38             	mov    eax,DWORD PTR [edx+0x38]
c0016e19:	85 c0                	test   eax,eax
c0016e1b:	0f 85 91 00 00 00    	jne    c0016eb2 <timerHandler(unsigned long long)+0xf1>
c0016e21:	e9 be 00 00 00       	jmp    c0016ee4 <timerHandler(unsigned long long)+0x123>
c0016e26:	83 ec 0c             	sub    esp,0xc
c0016e29:	55                   	push   ebp
c0016e2a:	e8 a3 76 00 00       	call   c001e4d2 <unblockTask(ThreadControlBlock*)>
c0016e2f:	83 c4 10             	add    esp,0x10
c0016e32:	39 eb                	cmp    ebx,ebp
c0016e34:	75 12                	jne    c0016e48 <timerHandler(unsigned long long)+0x87>
c0016e36:	83 ec 0c             	sub    esp,0xc
c0016e39:	68 40 1c 03 c0       	push   0xc0031c40
c0016e3e:	e8 cb 1c 01 00       	call   c0028b0e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016e43:	89 c3                	mov    ebx,eax
c0016e45:	83 c4 10             	add    esp,0x10
c0016e48:	83 ec 0c             	sub    esp,0xc
c0016e4b:	68 40 1c 03 c0       	push   0xc0031c40
c0016e50:	e8 c1 1c 01 00       	call   c0028b16 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016e55:	83 c4 10             	add    esp,0x10
c0016e58:	84 c0                	test   al,al
c0016e5a:	75 b4                	jne    c0016e10 <timerHandler(unsigned long long)+0x4f>
c0016e5c:	83 ec 0c             	sub    esp,0xc
c0016e5f:	68 40 1c 03 c0       	push   0xc0031c40
c0016e64:	e8 a5 1c 01 00       	call   c0028b0e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016e69:	83 c4 10             	add    esp,0x10
c0016e6c:	39 d8                	cmp    eax,ebx
c0016e6e:	74 a0                	je     c0016e10 <timerHandler(unsigned long long)+0x4f>
c0016e70:	83 ec 0c             	sub    esp,0xc
c0016e73:	68 40 1c 03 c0       	push   0xc0031c40
c0016e78:	e8 91 1c 01 00       	call   c0028b0e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016e7d:	c7 04 24 40 1c 03 c0 	mov    DWORD PTR [esp],0xc0031c40
c0016e84:	89 c5                	mov    ebp,eax
c0016e86:	e8 a7 1c 01 00       	call   c0028b32 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0016e8b:	8b 55 2c             	mov    edx,DWORD PTR [ebp+0x2c]
c0016e8e:	83 c4 10             	add    esp,0x10
c0016e91:	8b 4d 30             	mov    ecx,DWORD PTR [ebp+0x30]
c0016e94:	39 15 70 ed 02 c0    	cmp    DWORD PTR ds:0xc002ed70,edx
c0016e9a:	a1 74 ed 02 c0       	mov    eax,ds:0xc002ed74
c0016e9f:	19 c8                	sbb    eax,ecx
c0016ea1:	73 83                	jae    c0016e26 <timerHandler(unsigned long long)+0x65>
c0016ea3:	50                   	push   eax
c0016ea4:	50                   	push   eax
c0016ea5:	55                   	push   ebp
c0016ea6:	68 40 1c 03 c0       	push   0xc0031c40
c0016eab:	e8 30 1d 01 00       	call   c0028be0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0016eb0:	eb 93                	jmp    c0016e45 <timerHandler(unsigned long long)+0x84>
c0016eb2:	80 3d ec e6 02 c0 00 	cmp    BYTE PTR ds:0xc002e6ec,0x0
c0016eb9:	74 29                	je     c0016ee4 <timerHandler(unsigned long long)+0x123>
c0016ebb:	39 c6                	cmp    esi,eax
c0016ebd:	bb 00 00 00 00       	mov    ebx,0x0
c0016ec2:	19 df                	sbb    edi,ebx
c0016ec4:	72 19                	jb     c0016edf <timerHandler(unsigned long long)+0x11e>
c0016ec6:	e8 ef 6f 00 00       	call   c001deba <lockScheduler()>
c0016ecb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016ed0:	29 70 38             	sub    DWORD PTR [eax+0x38],esi
c0016ed3:	e8 1e 73 00 00       	call   c001e1f6 <schedule()>
c0016ed8:	e8 df 6f 00 00       	call   c001debc <unlockScheduler()>
c0016edd:	eb 05                	jmp    c0016ee4 <timerHandler(unsigned long long)+0x123>
c0016edf:	29 f0                	sub    eax,esi
c0016ee1:	89 42 38             	mov    DWORD PTR [edx+0x38],eax
c0016ee4:	83 c4 0c             	add    esp,0xc
c0016ee7:	5b                   	pop    ebx
c0016ee8:	5e                   	pop    esi
c0016ee9:	5f                   	pop    edi
c0016eea:	5d                   	pop    ebp
c0016eeb:	e9 8b 73 00 00       	jmp    c001e27b <unlockStuff()>
c0016ef0:	83 c4 0c             	add    esp,0xc
c0016ef3:	5b                   	pop    ebx
c0016ef4:	5e                   	pop    esi
c0016ef5:	5f                   	pop    edi
c0016ef6:	5d                   	pop    ebp
c0016ef7:	c3                   	ret    

c0016ef8 <setupTimer(int)>:
c0016ef8:	57                   	push   edi
c0016ef9:	a1 e8 e6 02 c0       	mov    eax,ds:0xc002e6e8
c0016efe:	56                   	push   esi
c0016eff:	53                   	push   ebx
c0016f00:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016f04:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016f0a:	83 ec 0c             	sub    esp,0xc
c0016f0d:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0016f13:	e8 de d7 ff ff       	call   c00146f6 <Device::getName()>
c0016f18:	83 c4 10             	add    esp,0x10
c0016f1b:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0016f1e:	0f 85 8d 00 00 00    	jne    c0016fb1 <setupTimer(int)+0xb9>
c0016f24:	a1 e8 e6 02 c0       	mov    eax,ds:0xc002e6e8
c0016f29:	f6 80 e8 01 00 00 01 	test   BYTE PTR [eax+0x1e8],0x1
c0016f30:	74 7f                	je     c0016fb1 <setupTimer(int)+0xb9>
c0016f32:	83 ec 0c             	sub    esp,0xc
c0016f35:	68 5c 01 00 00       	push   0x15c
c0016f3a:	e8 a5 89 ff ff       	call   c000f8e4 <malloc>
c0016f3f:	89 04 24             	mov    DWORD PTR [esp],eax
c0016f42:	89 c3                	mov    ebx,eax
c0016f44:	e8 2b f7 00 00       	call   c0026674 <PIT::PIT()>
c0016f49:	59                   	pop    ecx
c0016f4a:	5f                   	pop    edi
c0016f4b:	53                   	push   ebx
c0016f4c:	ff 35 e8 e6 02 c0    	push   DWORD PTR ds:0xc002e6e8
c0016f52:	e8 b3 d4 ff ff       	call   c001440a <Device::addChild(Device*)>
c0016f57:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016f59:	6a 00                	push   0x0
c0016f5b:	6a 00                	push   0x0
c0016f5d:	56                   	push   esi
c0016f5e:	53                   	push   ebx
c0016f5f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016f62:	83 c4 14             	add    esp,0x14
c0016f65:	68 60 01 00 00       	push   0x160
c0016f6a:	e8 75 89 ff ff       	call   c000f8e4 <malloc>
c0016f6f:	89 04 24             	mov    DWORD PTR [esp],eax
c0016f72:	89 c7                	mov    edi,eax
c0016f74:	e8 ab f5 00 00       	call   c0026524 <APICTimer::APICTimer()>
c0016f79:	6a 00                	push   0x0
c0016f7b:	6a 00                	push   0x0
c0016f7d:	56                   	push   esi
c0016f7e:	57                   	push   edi
c0016f7f:	e8 a2 f4 00 00       	call   c0026426 <APICTimer::open(int, int, void*)>
c0016f84:	83 c4 20             	add    esp,0x20
c0016f87:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016f89:	6a 00                	push   0x0
c0016f8b:	6a 00                	push   0x0
c0016f8d:	6a 00                	push   0x0
c0016f8f:	53                   	push   ebx
c0016f90:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0016f93:	58                   	pop    eax
c0016f94:	a1 e8 e6 02 c0       	mov    eax,ds:0xc002e6e8
c0016f99:	5a                   	pop    edx
c0016f9a:	57                   	push   edi
c0016f9b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016fa1:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0016fa7:	e8 5e d4 ff ff       	call   c001440a <Device::addChild(Device*)>
c0016fac:	83 c4 10             	add    esp,0x10
c0016faf:	eb 33                	jmp    c0016fe4 <setupTimer(int)+0xec>
c0016fb1:	83 ec 0c             	sub    esp,0xc
c0016fb4:	68 5c 01 00 00       	push   0x15c
c0016fb9:	e8 26 89 ff ff       	call   c000f8e4 <malloc>
c0016fbe:	89 04 24             	mov    DWORD PTR [esp],eax
c0016fc1:	89 c3                	mov    ebx,eax
c0016fc3:	e8 ac f6 00 00       	call   c0026674 <PIT::PIT()>
c0016fc8:	58                   	pop    eax
c0016fc9:	5a                   	pop    edx
c0016fca:	53                   	push   ebx
c0016fcb:	ff 35 e8 e6 02 c0    	push   DWORD PTR ds:0xc002e6e8
c0016fd1:	e8 34 d4 ff ff       	call   c001440a <Device::addChild(Device*)>
c0016fd6:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016fd8:	6a 00                	push   0x0
c0016fda:	6a 00                	push   0x0
c0016fdc:	56                   	push   esi
c0016fdd:	53                   	push   ebx
c0016fde:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016fe1:	83 c4 20             	add    esp,0x20
c0016fe4:	89 d8                	mov    eax,ebx
c0016fe6:	5b                   	pop    ebx
c0016fe7:	5e                   	pop    esi
c0016fe8:	5f                   	pop    edi
c0016fe9:	c3                   	ret    

c0016fea <VCache::VCache(PhysicalDisk*)>:
c0016fea:	53                   	push   ebx
c0016feb:	83 ec 18             	sub    esp,0x18
c0016fee:	ba a0 b5 02 c0       	mov    edx,0xc002b5a0
c0016ff3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016ff7:	89 10                	mov    DWORD PTR [eax],edx
c0016ff9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016ffd:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c0017004:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017008:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c001700f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017013:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c001701a:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0017021:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017025:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c001702c:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0017033:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017037:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c001703e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017042:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c0017046:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001704a:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c0017051:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c0017058:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001705c:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c0017060:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017064:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c0017068:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001706c:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c0017070:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017074:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c001707b:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c0017083:	83 ec 0c             	sub    esp,0xc
c0017086:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001708a:	e8 55 88 ff ff       	call   c000f8e4 <malloc>
c001708f:	83 c4 10             	add    esp,0x10
c0017092:	89 c3                	mov    ebx,eax
c0017094:	83 ec 0c             	sub    esp,0xc
c0017097:	53                   	push   ebx
c0017098:	e8 3d 6f 00 00       	call   c001dfda <Mutex::Mutex()>
c001709d:	83 c4 10             	add    esp,0x10
c00170a0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00170a4:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00170a7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00170ab:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00170af:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00170b2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00170b6:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c00170bd:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00170c1:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c00170c7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00170cb:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00170ce:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00170d2:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c00170d8:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00170de:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00170e2:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c00170e5:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c00170e8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00170ec:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c00170f0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00170f4:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00170fa:	05 00 01 00 00       	add    eax,0x100
c00170ff:	c1 e0 04             	shl    eax,0x4
c0017102:	83 ec 0c             	sub    esp,0xc
c0017105:	50                   	push   eax
c0017106:	e8 d9 87 ff ff       	call   c000f8e4 <malloc>
c001710b:	83 c4 10             	add    esp,0x10
c001710e:	89 c2                	mov    edx,eax
c0017110:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017114:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0017117:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001711b:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c0017122:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017126:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c001712a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001712e:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0017134:	c1 e0 07             	shl    eax,0x7
c0017137:	83 ec 0c             	sub    esp,0xc
c001713a:	50                   	push   eax
c001713b:	e8 a4 87 ff ff       	call   c000f8e4 <malloc>
c0017140:	83 c4 10             	add    esp,0x10
c0017143:	89 c2                	mov    edx,eax
c0017145:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017149:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c001714c:	90                   	nop
c001714d:	83 c4 18             	add    esp,0x18
c0017150:	5b                   	pop    ebx
c0017151:	c3                   	ret    

c0017152 <VCache::invalidateReadBuffer()>:
c0017152:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017156:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c001715c:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c0017160:	c3                   	ret    
c0017161:	90                   	nop

c0017162 <VCache::writeWriteBuffer()>:
c0017162:	53                   	push   ebx
c0017163:	83 ec 14             	sub    esp,0x14
c0017166:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001716a:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001716d:	8b 10                	mov    edx,DWORD PTR [eax]
c001716f:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0017172:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0017175:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0017178:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c001717b:	50                   	push   eax
c001717c:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c001717f:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0017186:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c001718d:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c0017191:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c0017198:	83 c4 28             	add    esp,0x28
c001719b:	5b                   	pop    ebx
c001719c:	c3                   	ret    
c001719d:	90                   	nop

c001719e <VCache::~VCache()>:
c001719e:	83 ec 0c             	sub    esp,0xc
c00171a1:	ba a0 b5 02 c0       	mov    edx,0xc002b5a0
c00171a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00171aa:	89 10                	mov    DWORD PTR [eax],edx
c00171ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00171b0:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c00171b3:	84 c0                	test   al,al
c00171b5:	74 0f                	je     c00171c6 <VCache::~VCache()+0x28>
c00171b7:	83 ec 0c             	sub    esp,0xc
c00171ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00171be:	e8 9f ff ff ff       	call   c0017162 <VCache::writeWriteBuffer()>
c00171c3:	83 c4 10             	add    esp,0x10
c00171c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00171ca:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00171cd:	83 ec 0c             	sub    esp,0xc
c00171d0:	50                   	push   eax
c00171d1:	e8 1e 87 ff ff       	call   c000f8f4 <free>
c00171d6:	83 c4 10             	add    esp,0x10
c00171d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00171dd:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00171e0:	83 ec 0c             	sub    esp,0xc
c00171e3:	50                   	push   eax
c00171e4:	e8 0b 87 ff ff       	call   c000f8f4 <free>
c00171e9:	83 c4 10             	add    esp,0x10
c00171ec:	90                   	nop
c00171ed:	83 c4 0c             	add    esp,0xc
c00171f0:	c3                   	ret    
c00171f1:	90                   	nop

c00171f2 <VCache::~VCache()>:
c00171f2:	83 ec 0c             	sub    esp,0xc
c00171f5:	83 ec 0c             	sub    esp,0xc
c00171f8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00171fc:	e8 9d ff ff ff       	call   c001719e <VCache::~VCache()>
c0017201:	83 c4 10             	add    esp,0x10
c0017204:	83 ec 08             	sub    esp,0x8
c0017207:	6a 44                	push   0x44
c0017209:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001720d:	e8 f1 bc ff ff       	call   c0012f03 <operator delete(void*, unsigned long)>
c0017212:	83 c4 10             	add    esp,0x10
c0017215:	83 c4 0c             	add    esp,0xc
c0017218:	c3                   	ret    
c0017219:	90                   	nop

c001721a <VCache::write(unsigned long long, int, void*)>:
c001721a:	55                   	push   ebp
c001721b:	57                   	push   edi
c001721c:	56                   	push   esi
c001721d:	53                   	push   ebx
c001721e:	83 ec 28             	sub    esp,0x28
c0017221:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0017225:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0017229:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c001722d:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c0017231:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0017234:	e8 03 72 00 00       	call   c001e43c <Semaphore::acquire()>
c0017239:	83 c4 10             	add    esp,0x10
c001723c:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c0017240:	74 0c                	je     c001724e <VCache::write(unsigned long long, int, void*)+0x34>
c0017242:	83 ec 0c             	sub    esp,0xc
c0017245:	53                   	push   ebx
c0017246:	e8 07 ff ff ff       	call   c0017152 <VCache::invalidateReadBuffer()>
c001724b:	83 c4 10             	add    esp,0x10
c001724e:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0017252:	74 66                	je     c00172ba <VCache::write(unsigned long long, int, void*)+0xa0>
c0017254:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0017257:	99                   	cdq    
c0017258:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001725c:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c001725f:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c0017262:	89 c1                	mov    ecx,eax
c0017264:	89 d0                	mov    eax,edx
c0017266:	31 f1                	xor    ecx,esi
c0017268:	31 f8                	xor    eax,edi
c001726a:	89 ca                	mov    edx,ecx
c001726c:	09 c2                	or     edx,eax
c001726e:	75 3e                	jne    c00172ae <VCache::write(unsigned long long, int, void*)+0x94>
c0017270:	83 fd 01             	cmp    ebp,0x1
c0017273:	75 39                	jne    c00172ae <VCache::write(unsigned long long, int, void*)+0x94>
c0017275:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0017278:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001727e:	51                   	push   ecx
c001727f:	50                   	push   eax
c0017280:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0017284:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0017288:	0f af c8             	imul   ecx,eax
c001728b:	03 4b 28             	add    ecx,DWORD PTR [ebx+0x28]
c001728e:	51                   	push   ecx
c001728f:	e8 b0 94 fe ff       	call   c0000744 <memcpy>
c0017294:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0017297:	83 c4 10             	add    esp,0x10
c001729a:	40                   	inc    eax
c001729b:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c001729e:	83 c0 80             	add    eax,0xffffff80
c00172a1:	75 57                	jne    c00172fa <VCache::write(unsigned long long, int, void*)+0xe0>
c00172a3:	83 ec 0c             	sub    esp,0xc
c00172a6:	53                   	push   ebx
c00172a7:	e8 b6 fe ff ff       	call   c0017162 <VCache::writeWriteBuffer()>
c00172ac:	eb 34                	jmp    c00172e2 <VCache::write(unsigned long long, int, void*)+0xc8>
c00172ae:	83 ec 0c             	sub    esp,0xc
c00172b1:	53                   	push   ebx
c00172b2:	e8 ab fe ff ff       	call   c0017162 <VCache::writeWriteBuffer()>
c00172b7:	83 c4 10             	add    esp,0x10
c00172ba:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00172bd:	83 fd 7f             	cmp    ebp,0x7f
c00172c0:	7f 25                	jg     c00172e7 <VCache::write(unsigned long long, int, void*)+0xcd>
c00172c2:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c00172c5:	89 7b 20             	mov    DWORD PTR [ebx+0x20],edi
c00172c8:	89 6b 24             	mov    DWORD PTR [ebx+0x24],ebp
c00172cb:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c00172cf:	52                   	push   edx
c00172d0:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c00172d6:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00172da:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00172dd:	e8 62 94 fe ff       	call   c0000744 <memcpy>
c00172e2:	83 c4 10             	add    esp,0x10
c00172e5:	eb 13                	jmp    c00172fa <VCache::write(unsigned long long, int, void*)+0xe0>
c00172e7:	83 ec 0c             	sub    esp,0xc
c00172ea:	8b 10                	mov    edx,DWORD PTR [eax]
c00172ec:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00172f0:	55                   	push   ebp
c00172f1:	57                   	push   edi
c00172f2:	56                   	push   esi
c00172f3:	50                   	push   eax
c00172f4:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c00172f7:	83 c4 20             	add    esp,0x20
c00172fa:	83 ec 0c             	sub    esp,0xc
c00172fd:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0017300:	e8 e5 76 00 00       	call   c001e9ea <Semaphore::release()>
c0017305:	83 c4 2c             	add    esp,0x2c
c0017308:	31 c0                	xor    eax,eax
c001730a:	5b                   	pop    ebx
c001730b:	5e                   	pop    esi
c001730c:	5f                   	pop    edi
c001730d:	5d                   	pop    ebp
c001730e:	c3                   	ret    
c001730f:	90                   	nop

c0017310 <VCache::read(unsigned long long, int, void*)>:
c0017310:	55                   	push   ebp
c0017311:	57                   	push   edi
c0017312:	56                   	push   esi
c0017313:	53                   	push   ebx
c0017314:	83 ec 28             	sub    esp,0x28
c0017317:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001731b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001731f:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0017323:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017327:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001732b:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c001732f:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0017333:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0017336:	e8 01 71 00 00       	call   c001e43c <Semaphore::acquire()>
c001733b:	83 c4 10             	add    esp,0x10
c001733e:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0017342:	74 0c                	je     c0017350 <VCache::read(unsigned long long, int, void*)+0x40>
c0017344:	83 ec 0c             	sub    esp,0xc
c0017347:	53                   	push   ebx
c0017348:	e8 15 fe ff ff       	call   c0017162 <VCache::writeWriteBuffer()>
c001734d:	83 c4 10             	add    esp,0x10
c0017350:	83 fe 01             	cmp    esi,0x1
c0017353:	0f 85 80 00 00 00    	jne    c00173d9 <VCache::read(unsigned long long, int, void*)+0xc9>
c0017359:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001735c:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c0017363:	75 74                	jne    c00173d9 <VCache::read(unsigned long long, int, void*)+0xc9>
c0017365:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0017368:	89 d1                	mov    ecx,edx
c001736a:	f7 d9                	neg    ecx
c001736c:	89 cf                	mov    edi,ecx
c001736e:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0017372:	c1 ff 1f             	sar    edi,0x1f
c0017375:	23 0c 24             	and    ecx,DWORD PTR [esp]
c0017378:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001737c:	89 ce                	mov    esi,ecx
c001737e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0017382:	23 4c 24 04          	and    ecx,DWORD PTR [esp+0x4]
c0017386:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c001738a:	89 cf                	mov    edi,ecx
c001738c:	74 0a                	je     c0017398 <VCache::read(unsigned long long, int, void*)+0x88>
c001738e:	39 4b 34             	cmp    DWORD PTR [ebx+0x34],ecx
c0017391:	75 05                	jne    c0017398 <VCache::read(unsigned long long, int, void*)+0x88>
c0017393:	39 73 30             	cmp    DWORD PTR [ebx+0x30],esi
c0017396:	74 1c                	je     c00173b4 <VCache::read(unsigned long long, int, void*)+0xa4>
c0017398:	c6 43 3c 01          	mov    BYTE PTR [ebx+0x3c],0x1
c001739c:	89 73 30             	mov    DWORD PTR [ebx+0x30],esi
c001739f:	89 7b 34             	mov    DWORD PTR [ebx+0x34],edi
c00173a2:	83 ec 0c             	sub    esp,0xc
c00173a5:	8b 08                	mov    ecx,DWORD PTR [eax]
c00173a7:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00173aa:	52                   	push   edx
c00173ab:	57                   	push   edi
c00173ac:	56                   	push   esi
c00173ad:	50                   	push   eax
c00173ae:	ff 51 28             	call   DWORD PTR [ecx+0x28]
c00173b1:	83 c4 20             	add    esp,0x20
c00173b4:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00173b7:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c00173bd:	50                   	push   eax
c00173be:	52                   	push   edx
c00173bf:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c00173c2:	48                   	dec    eax
c00173c3:	23 44 24 08          	and    eax,DWORD PTR [esp+0x8]
c00173c7:	0f af c2             	imul   eax,edx
c00173ca:	03 43 38             	add    eax,DWORD PTR [ebx+0x38]
c00173cd:	50                   	push   eax
c00173ce:	55                   	push   ebp
c00173cf:	e8 70 93 fe ff       	call   c0000744 <memcpy>
c00173d4:	83 c4 10             	add    esp,0x10
c00173d7:	eb 21                	jmp    c00173fa <VCache::read(unsigned long long, int, void*)+0xea>
c00173d9:	83 ec 0c             	sub    esp,0xc
c00173dc:	53                   	push   ebx
c00173dd:	e8 70 fd ff ff       	call   c0017152 <VCache::invalidateReadBuffer()>
c00173e2:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00173e5:	8b 10                	mov    edx,DWORD PTR [eax]
c00173e7:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00173ea:	56                   	push   esi
c00173eb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00173ef:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00173f3:	50                   	push   eax
c00173f4:	ff 52 28             	call   DWORD PTR [edx+0x28]
c00173f7:	83 c4 20             	add    esp,0x20
c00173fa:	83 ec 0c             	sub    esp,0xc
c00173fd:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0017400:	e8 e5 75 00 00       	call   c001e9ea <Semaphore::release()>
c0017405:	83 c4 2c             	add    esp,0x2c
c0017408:	31 c0                	xor    eax,eax
c001740a:	5b                   	pop    ebx
c001740b:	5e                   	pop    esi
c001740c:	5f                   	pop    edi
c001740d:	5d                   	pop    ebp
c001740e:	c3                   	ret    
c001740f:	90                   	nop

c0017410 <Video::putrect(int, int, int, int, unsigned int)>:
c0017410:	55                   	push   ebp
c0017411:	57                   	push   edi
c0017412:	56                   	push   esi
c0017413:	53                   	push   ebx
c0017414:	83 ec 1c             	sub    esp,0x1c
c0017417:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001741b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001741f:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0017423:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c0017427:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001742b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001742f:	01 df                	add    edi,ebx
c0017431:	39 fb                	cmp    ebx,edi
c0017433:	7d 1f                	jge    c0017454 <Video::putrect(int, int, int, int, unsigned int)+0x44>
c0017435:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0017439:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c001743d:	7d 12                	jge    c0017451 <Video::putrect(int, int, int, int, unsigned int)+0x41>
c001743f:	8b 16                	mov    edx,DWORD PTR [esi]
c0017441:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0017445:	53                   	push   ebx
c0017446:	55                   	push   ebp
c0017447:	45                   	inc    ebp
c0017448:	56                   	push   esi
c0017449:	ff 52 24             	call   DWORD PTR [edx+0x24]
c001744c:	83 c4 10             	add    esp,0x10
c001744f:	eb e8                	jmp    c0017439 <Video::putrect(int, int, int, int, unsigned int)+0x29>
c0017451:	43                   	inc    ebx
c0017452:	eb dd                	jmp    c0017431 <Video::putrect(int, int, int, int, unsigned int)+0x21>
c0017454:	83 c4 1c             	add    esp,0x1c
c0017457:	5b                   	pop    ebx
c0017458:	5e                   	pop    esi
c0017459:	5f                   	pop    edi
c001745a:	5d                   	pop    ebp
c001745b:	c3                   	ret    

c001745c <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c001745c:	55                   	push   ebp
c001745d:	57                   	push   edi
c001745e:	31 ff                	xor    edi,edi
c0017460:	56                   	push   esi
c0017461:	53                   	push   ebx
c0017462:	83 ec 1c             	sub    esp,0x1c
c0017465:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c0017469:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001746d:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c0017474:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c0017479:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001747d:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c0017481:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0017485:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c0017488:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c001748c:	01 f9                	add    ecx,edi
c001748e:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c0017492:	7d 2f                	jge    c00174c3 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c0017494:	31 f6                	xor    esi,esi
c0017496:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001749a:	01 f2                	add    edx,esi
c001749c:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c00174a0:	7d 1a                	jge    c00174bc <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c00174a2:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00174a5:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c00174a8:	46                   	inc    esi
c00174a9:	51                   	push   ecx
c00174aa:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00174ae:	52                   	push   edx
c00174af:	55                   	push   ebp
c00174b0:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00174b3:	83 c4 10             	add    esp,0x10
c00174b6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00174ba:	eb da                	jmp    c0017496 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c00174bc:	47                   	inc    edi
c00174bd:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c00174c1:	eb c5                	jmp    c0017488 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c00174c3:	83 c4 1c             	add    esp,0x1c
c00174c6:	5b                   	pop    ebx
c00174c7:	5e                   	pop    esi
c00174c8:	5f                   	pop    edi
c00174c9:	5d                   	pop    ebp
c00174ca:	c3                   	ret    
c00174cb:	90                   	nop

c00174cc <Video::blit(unsigned int*, int, int, int, int)>:
c00174cc:	55                   	push   ebp
c00174cd:	57                   	push   edi
c00174ce:	56                   	push   esi
c00174cf:	53                   	push   ebx
c00174d0:	83 ec 1c             	sub    esp,0x1c
c00174d3:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00174d7:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00174db:	85 c0                	test   eax,eax
c00174dd:	79 02                	jns    c00174e1 <Video::blit(unsigned int*, int, int, int, int)+0x15>
c00174df:	31 c0                	xor    eax,eax
c00174e1:	c1 e0 02             	shl    eax,0x2
c00174e4:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00174e8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00174ec:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00174f0:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c00174f4:	39 d8                	cmp    eax,ebx
c00174f6:	7e 49                	jle    c0017541 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c00174f8:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c00174fe:	7c 41                	jl     c0017541 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c0017500:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0017504:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0017508:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c001750c:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c0017510:	39 f9                	cmp    ecx,edi
c0017512:	7e 22                	jle    c0017536 <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c0017514:	83 c5 04             	add    ebp,0x4
c0017517:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c001751d:	7c 14                	jl     c0017533 <Video::blit(unsigned int*, int, int, int, int)+0x67>
c001751f:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0017521:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c0017524:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0017528:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001752c:	56                   	push   esi
c001752d:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c0017530:	83 c4 10             	add    esp,0x10
c0017533:	47                   	inc    edi
c0017534:	eb d2                	jmp    c0017508 <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c0017536:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001753a:	43                   	inc    ebx
c001753b:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c001753f:	eb ab                	jmp    c00174ec <Video::blit(unsigned int*, int, int, int, int)+0x20>
c0017541:	83 c4 1c             	add    esp,0x1c
c0017544:	5b                   	pop    ebx
c0017545:	5e                   	pop    esi
c0017546:	5f                   	pop    edi
c0017547:	5d                   	pop    ebp
c0017548:	c3                   	ret    
c0017549:	90                   	nop

c001754a <Video::clearScreen(unsigned int)>:
c001754a:	57                   	push   edi
c001754b:	56                   	push   esi
c001754c:	53                   	push   ebx
c001754d:	31 db                	xor    ebx,ebx
c001754f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0017553:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c0017559:	7e 1f                	jle    c001757a <Video::clearScreen(unsigned int)+0x30>
c001755b:	31 ff                	xor    edi,edi
c001755d:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c0017563:	7e 12                	jle    c0017577 <Video::clearScreen(unsigned int)+0x2d>
c0017565:	8b 06                	mov    eax,DWORD PTR [esi]
c0017567:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001756b:	53                   	push   ebx
c001756c:	57                   	push   edi
c001756d:	47                   	inc    edi
c001756e:	56                   	push   esi
c001756f:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0017572:	83 c4 10             	add    esp,0x10
c0017575:	eb e6                	jmp    c001755d <Video::clearScreen(unsigned int)+0x13>
c0017577:	43                   	inc    ebx
c0017578:	eb d9                	jmp    c0017553 <Video::clearScreen(unsigned int)+0x9>
c001757a:	5b                   	pop    ebx
c001757b:	5e                   	pop    esi
c001757c:	5f                   	pop    edi
c001757d:	c3                   	ret    

c001757e <Video::putpixel(int, int, unsigned int)>:
c001757e:	c7 44 24 04 a8 b5 02 c0 	mov    DWORD PTR [esp+0x4],0xc002b5a8
c0017586:	e9 0a 31 00 00       	jmp    c001a695 <Krnl::panic(char const*)>
c001758b:	90                   	nop

c001758c <Video::Video(char const*)>:
c001758c:	83 ec 0c             	sub    esp,0xc
c001758f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017593:	83 ec 08             	sub    esp,0x8
c0017596:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001759a:	50                   	push   eax
c001759b:	e8 5a d0 ff ff       	call   c00145fa <Device::Device(char const*)>
c00175a0:	83 c4 10             	add    esp,0x10
c00175a3:	ba 2c b6 02 c0       	mov    edx,0xc002b62c
c00175a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00175ac:	89 10                	mov    DWORD PTR [eax],edx
c00175ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00175b2:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c00175bc:	90                   	nop
c00175bd:	83 c4 0c             	add    esp,0xc
c00175c0:	c3                   	ret    
c00175c1:	90                   	nop

c00175c2 <Video::~Video()>:
c00175c2:	83 ec 0c             	sub    esp,0xc
c00175c5:	ba 2c b6 02 c0       	mov    edx,0xc002b62c
c00175ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00175ce:	89 10                	mov    DWORD PTR [eax],edx
c00175d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00175d4:	83 ec 0c             	sub    esp,0xc
c00175d7:	50                   	push   eax
c00175d8:	e8 ff cc ff ff       	call   c00142dc <Device::~Device()>
c00175dd:	83 c4 10             	add    esp,0x10
c00175e0:	90                   	nop
c00175e1:	83 c4 0c             	add    esp,0xc
c00175e4:	c3                   	ret    
c00175e5:	90                   	nop

c00175e6 <Video::~Video()>:
c00175e6:	83 ec 0c             	sub    esp,0xc
c00175e9:	83 ec 0c             	sub    esp,0xc
c00175ec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00175f0:	e8 cd ff ff ff       	call   c00175c2 <Video::~Video()>
c00175f5:	83 c4 10             	add    esp,0x10
c00175f8:	83 ec 08             	sub    esp,0x8
c00175fb:	68 64 01 00 00       	push   0x164
c0017600:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017604:	e8 fa b8 ff ff       	call   c0012f03 <operator delete(void*, unsigned long)>
c0017609:	83 c4 10             	add    esp,0x10
c001760c:	83 c4 0c             	add    esp,0xc
c001760f:	c3                   	ret    

c0017610 <Video::isMonochrome()>:
c0017610:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017614:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c001761a:	c3                   	ret    
c001761b:	90                   	nop

c001761c <Video::getWidth()>:
c001761c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017620:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0017626:	c3                   	ret    
c0017627:	90                   	nop

c0017628 <Video::getHeight()>:
c0017628:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001762c:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0017632:	c3                   	ret    
c0017633:	90                   	nop

c0017634 <Video::drawCursor(int, int, unsigned char*, int)>:
c0017634:	55                   	push   ebp
c0017635:	57                   	push   edi
c0017636:	56                   	push   esi
c0017637:	53                   	push   ebx
c0017638:	83 ec 2c             	sub    esp,0x2c
c001763b:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001763f:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0017643:	83 f8 01             	cmp    eax,0x1
c0017646:	19 c9                	sbb    ecx,ecx
c0017648:	31 db                	xor    ebx,ebx
c001764a:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c001764e:	89 cd                	mov    ebp,ecx
c0017650:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c0017658:	f7 d5                	not    ebp
c001765a:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c0017660:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0017664:	01 d8                	add    eax,ebx
c0017666:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001766a:	56                   	push   esi
c001766b:	e8 b8 ff ff ff       	call   c0017628 <Video::getHeight()>
c0017670:	59                   	pop    ecx
c0017671:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0017675:	7e 70                	jle    c00176e7 <Video::drawCursor(int, int, unsigned char*, int)+0xb3>
c0017677:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001767b:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c001767f:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c0017682:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017686:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001768a:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c0017691:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017695:	89 f8                	mov    eax,edi
c0017697:	83 c0 20             	add    eax,0x20
c001769a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001769e:	56                   	push   esi
c001769f:	e8 78 ff ff ff       	call   c001761c <Video::getWidth()>
c00176a4:	5a                   	pop    edx
c00176a5:	39 c7                	cmp    edi,eax
c00176a7:	7d 34                	jge    c00176dd <Video::drawCursor(int, int, unsigned char*, int)+0xa9>
c00176a9:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c00176ae:	74 05                	je     c00176b5 <Video::drawCursor(int, int, unsigned char*, int)+0x81>
c00176b0:	8b 06                	mov    eax,DWORD PTR [esi]
c00176b2:	55                   	push   ebp
c00176b3:	eb 0d                	jmp    c00176c2 <Video::drawCursor(int, int, unsigned char*, int)+0x8e>
c00176b5:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c00176ba:	74 12                	je     c00176ce <Video::drawCursor(int, int, unsigned char*, int)+0x9a>
c00176bc:	8b 06                	mov    eax,DWORD PTR [esi]
c00176be:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00176c2:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00176c6:	57                   	push   edi
c00176c7:	56                   	push   esi
c00176c8:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00176cb:	83 c4 10             	add    esp,0x10
c00176ce:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c00176d2:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c00176d6:	47                   	inc    edi
c00176d7:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c00176db:	75 c1                	jne    c001769e <Video::drawCursor(int, int, unsigned char*, int)+0x6a>
c00176dd:	43                   	inc    ebx
c00176de:	83 fb 20             	cmp    ebx,0x20
c00176e1:	0f 85 79 ff ff ff    	jne    c0017660 <Video::drawCursor(int, int, unsigned char*, int)+0x2c>
c00176e7:	83 c4 2c             	add    esp,0x2c
c00176ea:	5b                   	pop    ebx
c00176eb:	5e                   	pop    esi
c00176ec:	5f                   	pop    edi
c00176ed:	5d                   	pop    ebp
c00176ee:	c3                   	ret    
c00176ef:	90                   	nop

c00176f0 <Video::tgaParse(unsigned char*, int, int*, int*)>:
c00176f0:	55                   	push   ebp
c00176f1:	57                   	push   edi
c00176f2:	56                   	push   esi
c00176f3:	53                   	push   ebx
c00176f4:	83 ec 28             	sub    esp,0x28
c00176f7:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00176fb:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c00176ff:	0f b6 7b 0d          	movzx  edi,BYTE PTR [ebx+0xd]
c0017703:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c0017707:	c1 e7 08             	shl    edi,0x8
c001770a:	01 c7                	add    edi,eax
c001770c:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c0017710:	c1 e0 08             	shl    eax,0x8
c0017713:	01 d0                	add    eax,edx
c0017715:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017719:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001771d:	0f af c7             	imul   eax,edi
c0017720:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c0017727:	50                   	push   eax
c0017728:	e8 b7 81 ff ff       	call   c000f8e4 <malloc>
c001772d:	83 c4 10             	add    esp,0x10
c0017730:	89 c5                	mov    ebp,eax
c0017732:	85 c0                	test   eax,eax
c0017734:	75 15                	jne    c001774b <Video::tgaParse(unsigned char*, int, int*, int*)+0x5b>
c0017736:	83 ec 0c             	sub    esp,0xc
c0017739:	68 c9 b5 02 c0       	push   0xc002b5c9
c001773e:	e8 a0 b8 ff ff       	call   c0012fe3 <Dbg::kprintf(char const*, ...)>
c0017743:	83 c4 10             	add    esp,0x10
c0017746:	e9 1c 01 00 00       	jmp    c0017867 <Video::tgaParse(unsigned char*, int, int*, int*)+0x177>
c001774b:	be 12 00 00 00       	mov    esi,0x12
c0017750:	80 7b 01 00          	cmp    BYTE PTR [ebx+0x1],0x0
c0017754:	74 11                	je     c0017767 <Video::tgaParse(unsigned char*, int, int*, int*)+0x77>
c0017756:	0f b6 73 07          	movzx  esi,BYTE PTR [ebx+0x7]
c001775a:	0f b7 43 05          	movzx  eax,WORD PTR [ebx+0x5]
c001775e:	c1 fe 03             	sar    esi,0x3
c0017761:	0f af f0             	imul   esi,eax
c0017764:	83 c6 12             	add    esi,0x12
c0017767:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c001776b:	74 04                	je     c0017771 <Video::tgaParse(unsigned char*, int, int*, int*)+0x81>
c001776d:	85 ff                	test   edi,edi
c001776f:	75 12                	jne    c0017783 <Video::tgaParse(unsigned char*, int, int*, int*)+0x93>
c0017771:	83 ec 0c             	sub    esp,0xc
c0017774:	68 e0 b5 02 c0       	push   0xc002b5e0
c0017779:	e8 65 b8 ff ff       	call   c0012fe3 <Dbg::kprintf(char const*, ...)>
c001777e:	e9 ce 00 00 00       	jmp    c0017851 <Video::tgaParse(unsigned char*, int, int*, int*)+0x161>
c0017783:	52                   	push   edx
c0017784:	52                   	push   edx
c0017785:	0f b6 43 02          	movzx  eax,BYTE PTR [ebx+0x2]
c0017789:	50                   	push   eax
c001778a:	68 f5 b5 02 c0       	push   0xc002b5f5
c001778f:	e8 4f b8 ff ff       	call   c0012fe3 <Dbg::kprintf(char const*, ...)>
c0017794:	0f b6 53 02          	movzx  edx,BYTE PTR [ebx+0x2]
c0017798:	83 c4 10             	add    esp,0x10
c001779b:	80 fa 02             	cmp    dl,0x2
c001779e:	0f 85 98 00 00 00    	jne    c001783c <Video::tgaParse(unsigned char*, int, int*, int*)+0x14c>
c00177a4:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c00177a9:	75 10                	jne    c00177bb <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c00177ab:	80 7b 01 00          	cmp    BYTE PTR [ebx+0x1],0x0
c00177af:	75 0a                	jne    c00177bb <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c00177b1:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00177b4:	83 e8 18             	sub    eax,0x18
c00177b7:	a8 f7                	test   al,0xf7
c00177b9:	74 0a                	je     c00177c5 <Video::tgaParse(unsigned char*, int, int*, int*)+0xd5>
c00177bb:	83 ec 0c             	sub    esp,0xc
c00177be:	68 02 b6 02 c0       	push   0xc002b602
c00177c3:	eb 7f                	jmp    c0017844 <Video::tgaParse(unsigned char*, int, int*, int*)+0x154>
c00177c5:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00177cd:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00177d5:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00177d9:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00177e1:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c00177e5:	75 0c                	jne    c00177f3 <Video::tgaParse(unsigned char*, int, int*, int*)+0x103>
c00177e7:	0f b6 44 33 03       	movzx  eax,BYTE PTR [ebx+esi*1+0x3]
c00177ec:	c1 e0 18             	shl    eax,0x18
c00177ef:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00177f3:	41                   	inc    ecx
c00177f4:	0f b6 54 33 02       	movzx  edx,BYTE PTR [ebx+esi*1+0x2]
c00177f9:	c1 e2 10             	shl    edx,0x10
c00177fc:	89 d0                	mov    eax,edx
c00177fe:	0f b6 54 33 01       	movzx  edx,BYTE PTR [ebx+esi*1+0x1]
c0017803:	c1 e2 08             	shl    edx,0x8
c0017806:	09 c2                	or     edx,eax
c0017808:	0f b6 04 33          	movzx  eax,BYTE PTR [ebx+esi*1]
c001780c:	09 c2                	or     edx,eax
c001780e:	0b 54 24 08          	or     edx,DWORD PTR [esp+0x8]
c0017812:	89 54 8d fc          	mov    DWORD PTR [ebp+ecx*4-0x4],edx
c0017816:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c001781a:	c1 f8 03             	sar    eax,0x3
c001781d:	01 c6                	add    esi,eax
c001781f:	89 c8                	mov    eax,ecx
c0017821:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c0017825:	39 c7                	cmp    edi,eax
c0017827:	7f b0                	jg     c00177d9 <Video::tgaParse(unsigned char*, int, int*, int*)+0xe9>
c0017829:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001782d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017831:	39 14 24             	cmp    DWORD PTR [esp],edx
c0017834:	7e 22                	jle    c0017858 <Video::tgaParse(unsigned char*, int, int*, int*)+0x168>
c0017836:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c001783a:	eb 99                	jmp    c00177d5 <Video::tgaParse(unsigned char*, int, int*, int*)+0xe5>
c001783c:	50                   	push   eax
c001783d:	50                   	push   eax
c001783e:	52                   	push   edx
c001783f:	68 10 b6 02 c0       	push   0xc002b610
c0017844:	e8 9a b7 ff ff       	call   c0012fe3 <Dbg::kprintf(char const*, ...)>
c0017849:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001784c:	e8 a3 80 ff ff       	call   c000f8f4 <free>
c0017851:	83 c4 10             	add    esp,0x10
c0017854:	31 ed                	xor    ebp,ebp
c0017856:	eb 0f                	jmp    c0017867 <Video::tgaParse(unsigned char*, int, int*, int*)+0x177>
c0017858:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001785c:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c001785f:	89 38                	mov    DWORD PTR [eax],edi
c0017861:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0017865:	89 08                	mov    DWORD PTR [eax],ecx
c0017867:	83 c4 1c             	add    esp,0x1c
c001786a:	89 e8                	mov    eax,ebp
c001786c:	5b                   	pop    ebx
c001786d:	5e                   	pop    esi
c001786e:	5f                   	pop    edi
c001786f:	5d                   	pop    ebp
c0017870:	c3                   	ret    
c0017871:	90                   	nop

c0017872 <Video::putTGA(int, int, unsigned char*, int)>:
c0017872:	55                   	push   ebp
c0017873:	57                   	push   edi
c0017874:	56                   	push   esi
c0017875:	53                   	push   ebx
c0017876:	83 ec 28             	sub    esp,0x28
c0017879:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001787d:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017881:	50                   	push   eax
c0017882:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017886:	50                   	push   eax
c0017887:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001788b:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001788f:	56                   	push   esi
c0017890:	e8 5b fe ff ff       	call   c00176f0 <Video::tgaParse(unsigned char*, int, int*, int*)>
c0017895:	83 c4 20             	add    esp,0x20
c0017898:	85 c0                	test   eax,eax
c001789a:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001789e:	74 35                	je     c00178d5 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c00178a0:	89 c7                	mov    edi,eax
c00178a2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00178a6:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c00178aa:	39 d8                	cmp    eax,ebx
c00178ac:	7e 27                	jle    c00178d5 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c00178ae:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c00178b2:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00178b6:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00178ba:	39 e8                	cmp    eax,ebp
c00178bc:	7e 14                	jle    c00178d2 <Video::putTGA(int, int, unsigned char*, int)+0x60>
c00178be:	8b 06                	mov    eax,DWORD PTR [esi]
c00178c0:	83 c7 04             	add    edi,0x4
c00178c3:	ff 77 fc             	push   DWORD PTR [edi-0x4]
c00178c6:	53                   	push   ebx
c00178c7:	55                   	push   ebp
c00178c8:	45                   	inc    ebp
c00178c9:	56                   	push   esi
c00178ca:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00178cd:	83 c4 10             	add    esp,0x10
c00178d0:	eb e0                	jmp    c00178b2 <Video::putTGA(int, int, unsigned char*, int)+0x40>
c00178d2:	43                   	inc    ebx
c00178d3:	eb cd                	jmp    c00178a2 <Video::putTGA(int, int, unsigned char*, int)+0x30>
c00178d5:	83 c4 1c             	add    esp,0x1c
c00178d8:	5b                   	pop    ebx
c00178d9:	5e                   	pop    esi
c00178da:	5f                   	pop    edi
c00178db:	5d                   	pop    ebp
c00178dc:	c3                   	ret    
c00178dd:	90                   	nop

c00178de <ACPI::close(int, int, void*)>:
c00178de:	83 ec 1c             	sub    esp,0x1c
c00178e1:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c00178e9:	74 0a                	je     c00178f5 <ACPI::close(int, int, void*)+0x17>
c00178eb:	b8 00 00 00 00       	mov    eax,0x0
c00178f0:	e9 9a 00 00 00       	jmp    c001798f <ACPI::close(int, int, void*)+0xb1>
c00178f5:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00178fa:	75 37                	jne    c0017933 <ACPI::close(int, int, void*)+0x55>
c00178fc:	83 ec 0c             	sub    esp,0xc
c00178ff:	68 6c b6 02 c0       	push   0xc002b66c
c0017904:	e8 da b6 ff ff       	call   c0012fe3 <Dbg::kprintf(char const*, ...)>
c0017909:	83 c4 10             	add    esp,0x10
c001790c:	a1 a8 0d 03 c0       	mov    eax,ds:0xc0030da8
c0017911:	85 c0                	test   eax,eax
c0017913:	74 07                	je     c001791c <ACPI::close(int, int, void*)+0x3e>
c0017915:	a1 a8 0d 03 c0       	mov    eax,ds:0xc0030da8
c001791a:	ff d0                	call   eax
c001791c:	83 ec 0c             	sub    esp,0xc
c001791f:	68 90 b7 02 c0       	push   0xc002b790
c0017924:	e8 6c 2d 00 00       	call   c001a695 <Krnl::panic(char const*)>
c0017929:	83 c4 10             	add    esp,0x10
c001792c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0017931:	eb 5c                	jmp    c001798f <ACPI::close(int, int, void*)+0xb1>
c0017933:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c0017938:	75 50                	jne    c001798a <ACPI::close(int, int, void*)+0xac>
c001793a:	a1 a4 0d 03 c0       	mov    eax,ds:0xc0030da4
c001793f:	85 c0                	test   eax,eax
c0017941:	74 07                	je     c001794a <ACPI::close(int, int, void*)+0x6c>
c0017943:	a1 a4 0d 03 c0       	mov    eax,ds:0xc0030da4
c0017948:	ff d0                	call   eax
c001794a:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c001794f:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0017954:	83 e0 02             	and    eax,0x2
c0017957:	74 1c                	je     c0017975 <ACPI::close(int, int, void*)+0x97>
c0017959:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c0017960:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017964:	89 c2                	mov    edx,eax
c0017966:	ec                   	in     al,dx
c0017967:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c001796b:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c001796f:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0017973:	eb da                	jmp    c001794f <ACPI::close(int, int, void*)+0x71>
c0017975:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c001797c:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c0017981:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0017985:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0017989:	ee                   	out    dx,al
c001798a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001798f:	83 c4 1c             	add    esp,0x1c
c0017992:	c3                   	ret    

c0017993 <findRSDP()>:
c0017993:	83 ec 1c             	sub    esp,0x1c
c0017996:	a1 e8 e6 02 c0       	mov    eax,ds:0xc002e6e8
c001799b:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00179a1:	83 e0 04             	and    eax,0x4
c00179a4:	84 c0                	test   al,al
c00179a6:	75 07                	jne    c00179af <findRSDP()+0x1c>
c00179a8:	b8 00 00 00 00       	mov    eax,0x0
c00179ad:	eb 6a                	jmp    c0017a19 <findRSDP()+0x86>
c00179af:	a1 30 e7 02 c0       	mov    eax,ds:0xc002e730
c00179b4:	3d ff 07 00 00       	cmp    eax,0x7ff
c00179b9:	7f 1b                	jg     c00179d6 <findRSDP()+0x43>
c00179bb:	a1 e8 e6 02 c0       	mov    eax,ds:0xc002e6e8
c00179c0:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c00179c6:	83 e2 fb             	and    edx,0xfffffffb
c00179c9:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c00179cf:	b8 00 00 00 00       	mov    eax,0x0
c00179d4:	eb 43                	jmp    c0017a19 <findRSDP()+0x86>
c00179d6:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c00179de:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c00179e6:	77 2c                	ja     c0017a14 <findRSDP()+0x81>
c00179e8:	83 ec 04             	sub    esp,0x4
c00179eb:	6a 08                	push   0x8
c00179ed:	68 79 b6 02 c0       	push   0xc002b679
c00179f2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00179f6:	e8 45 8c fe ff       	call   c0000640 <memcmp>
c00179fb:	83 c4 10             	add    esp,0x10
c00179fe:	85 c0                	test   eax,eax
c0017a00:	0f 94 c0             	sete   al
c0017a03:	84 c0                	test   al,al
c0017a05:	74 06                	je     c0017a0d <findRSDP()+0x7a>
c0017a07:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017a0b:	eb 0c                	jmp    c0017a19 <findRSDP()+0x86>
c0017a0d:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c0017a12:	eb ca                	jmp    c00179de <findRSDP()+0x4b>
c0017a14:	b8 00 00 00 00       	mov    eax,0x0
c0017a19:	83 c4 1c             	add    esp,0x1c
c0017a1c:	c3                   	ret    

c0017a1d <loadACPITables(unsigned char*)>:
c0017a1d:	56                   	push   esi
c0017a1e:	53                   	push   ebx
c0017a1f:	83 ec 44             	sub    esp,0x44
c0017a22:	a1 e8 e6 02 c0       	mov    eax,ds:0xc002e6e8
c0017a27:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017a2d:	83 e0 04             	and    eax,0x4
c0017a30:	84 c0                	test   al,al
c0017a32:	0f 84 05 02 00 00    	je     c0017c3d <loadACPITables(unsigned char*)+0x220>
c0017a38:	a0 c0 0f 03 c0       	mov    al,ds:0xc0030fc0
c0017a3d:	84 c0                	test   al,al
c0017a3f:	74 75                	je     c0017ab6 <loadACPITables(unsigned char*)+0x99>
c0017a41:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0017a45:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017a49:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017a4d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017a50:	83 e8 24             	sub    eax,0x24
c0017a53:	c1 e8 03             	shr    eax,0x3
c0017a56:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0017a5a:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c0017a62:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017a66:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c0017a6a:	0f 8d b2 00 00 00    	jge    c0017b22 <loadACPITables(unsigned char*)+0x105>
c0017a70:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0017a74:	83 c0 24             	add    eax,0x24
c0017a77:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0017a7b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017a7f:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0017a83:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017a87:	c1 e0 03             	shl    eax,0x3
c0017a8a:	01 44 24 24          	add    DWORD PTR [esp+0x24],eax
c0017a8e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017a92:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0017a95:	8b 00                	mov    eax,DWORD PTR [eax]
c0017a97:	89 c1                	mov    ecx,eax
c0017a99:	a1 ac 0d 03 c0       	mov    eax,ds:0xc0030dac
c0017a9e:	8d 50 01             	lea    edx,[eax+0x1]
c0017aa1:	89 15 ac 0d 03 c0    	mov    DWORD PTR ds:0xc0030dac,edx
c0017aa7:	89 ca                	mov    edx,ecx
c0017aa9:	89 14 c5 c4 0d 03 c0 	mov    DWORD PTR [eax*8-0x3ffcf23c],edx
c0017ab0:	ff 44 24 3c          	inc    DWORD PTR [esp+0x3c]
c0017ab4:	eb ac                	jmp    c0017a62 <loadACPITables(unsigned char*)+0x45>
c0017ab6:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0017aba:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0017abe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017ac2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017ac5:	83 e8 24             	sub    eax,0x24
c0017ac8:	c1 e8 02             	shr    eax,0x2
c0017acb:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017acf:	c7 44 24 38 00 00 00 00 	mov    DWORD PTR [esp+0x38],0x0
c0017ad7:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0017adb:	3b 44 24 1c          	cmp    eax,DWORD PTR [esp+0x1c]
c0017adf:	7d 41                	jge    c0017b22 <loadACPITables(unsigned char*)+0x105>
c0017ae1:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0017ae5:	83 c0 24             	add    eax,0x24
c0017ae8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017aec:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017af0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017af4:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0017af8:	c1 e0 02             	shl    eax,0x2
c0017afb:	01 44 24 14          	add    DWORD PTR [esp+0x14],eax
c0017aff:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017b03:	8b 08                	mov    ecx,DWORD PTR [eax]
c0017b05:	a1 ac 0d 03 c0       	mov    eax,ds:0xc0030dac
c0017b0a:	8d 50 01             	lea    edx,[eax+0x1]
c0017b0d:	89 15 ac 0d 03 c0    	mov    DWORD PTR ds:0xc0030dac,edx
c0017b13:	89 ca                	mov    edx,ecx
c0017b15:	89 14 c5 c4 0d 03 c0 	mov    DWORD PTR [eax*8-0x3ffcf23c],edx
c0017b1c:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c0017b20:	eb b5                	jmp    c0017ad7 <loadACPITables(unsigned char*)+0xba>
c0017b22:	c7 44 24 34 00 00 00 00 	mov    DWORD PTR [esp+0x34],0x0
c0017b2a:	a1 ac 0d 03 c0       	mov    eax,ds:0xc0030dac
c0017b2f:	39 44 24 34          	cmp    DWORD PTR [esp+0x34],eax
c0017b33:	0f 8d 05 01 00 00    	jge    c0017c3e <loadACPITables(unsigned char*)+0x221>
c0017b39:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017b3d:	8b 04 c5 c4 0d 03 c0 	mov    eax,DWORD PTR [eax*8-0x3ffcf23c]
c0017b44:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017b48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017b4c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017b50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017b54:	25 ff 0f 00 00       	and    eax,0xfff
c0017b59:	89 c6                	mov    esi,eax
c0017b5b:	e8 5e a3 ff ff       	call   c0011ebe <Virt::getAKernelVAS()>
c0017b60:	89 c3                	mov    ebx,eax
c0017b62:	83 ec 0c             	sub    esp,0xc
c0017b65:	6a 01                	push   0x1
c0017b67:	e8 b7 a0 ff ff       	call   c0011c23 <Virt::allocateKernelVirtualPages(int)>
c0017b6c:	83 c4 10             	add    esp,0x10
c0017b6f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017b73:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017b79:	83 ec 0c             	sub    esp,0xc
c0017b7c:	6a 01                	push   0x1
c0017b7e:	6a 01                	push   0x1
c0017b80:	50                   	push   eax
c0017b81:	52                   	push   edx
c0017b82:	53                   	push   ebx
c0017b83:	e8 66 ab ff ff       	call   c00126ee <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017b88:	83 c4 20             	add    esp,0x20
c0017b8b:	09 f0                	or     eax,esi
c0017b8d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017b91:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017b95:	c1 e0 03             	shl    eax,0x3
c0017b98:	05 c0 0d 03 c0       	add    eax,0xc0030dc0
c0017b9d:	83 ec 04             	sub    esp,0x4
c0017ba0:	6a 04                	push   0x4
c0017ba2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017ba6:	50                   	push   eax
c0017ba7:	e8 98 8b fe ff       	call   c0000744 <memcpy>
c0017bac:	83 c4 10             	add    esp,0x10
c0017baf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017bb3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017bb6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017bba:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017bbe:	05 00 10 00 00       	add    eax,0x1000
c0017bc3:	c1 e8 0c             	shr    eax,0xc
c0017bc6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017bca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017bce:	89 04 24             	mov    DWORD PTR [esp],eax
c0017bd1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017bd5:	25 ff 0f 00 00       	and    eax,0xfff
c0017bda:	89 c6                	mov    esi,eax
c0017bdc:	e8 dd a2 ff ff       	call   c0011ebe <Virt::getAKernelVAS()>
c0017be1:	89 c3                	mov    ebx,eax
c0017be3:	83 ec 0c             	sub    esp,0xc
c0017be6:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017bea:	e8 34 a0 ff ff       	call   c0011c23 <Virt::allocateKernelVirtualPages(int)>
c0017bef:	83 c4 10             	add    esp,0x10
c0017bf2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017bf6:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017bfc:	83 ec 0c             	sub    esp,0xc
c0017bff:	6a 01                	push   0x1
c0017c01:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017c05:	50                   	push   eax
c0017c06:	52                   	push   edx
c0017c07:	53                   	push   ebx
c0017c08:	e8 e1 aa ff ff       	call   c00126ee <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017c0d:	83 c4 20             	add    esp,0x20
c0017c10:	09 f0                	or     eax,esi
c0017c12:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017c16:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0017c19:	83 ec 0c             	sub    esp,0xc
c0017c1c:	50                   	push   eax
c0017c1d:	e8 71 a4 ff ff       	call   c0012093 <Virt::freeKernelVirtualPages(unsigned long)>
c0017c22:	83 c4 10             	add    esp,0x10
c0017c25:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017c29:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0017c2d:	89 14 c5 c4 0d 03 c0 	mov    DWORD PTR [eax*8-0x3ffcf23c],edx
c0017c34:	ff 44 24 34          	inc    DWORD PTR [esp+0x34]
c0017c38:	e9 ed fe ff ff       	jmp    c0017b2a <loadACPITables(unsigned char*)+0x10d>
c0017c3d:	90                   	nop
c0017c3e:	83 c4 44             	add    esp,0x44
c0017c41:	5b                   	pop    ebx
c0017c42:	5e                   	pop    esi
c0017c43:	c3                   	ret    

c0017c44 <findRSDT(unsigned char*)>:
c0017c44:	56                   	push   esi
c0017c45:	53                   	push   ebx
c0017c46:	83 ec 44             	sub    esp,0x44
c0017c49:	a1 e8 e6 02 c0       	mov    eax,ds:0xc002e6e8
c0017c4e:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017c54:	83 e0 04             	and    eax,0x4
c0017c57:	84 c0                	test   al,al
c0017c59:	75 0a                	jne    c0017c65 <findRSDT(unsigned char*)+0x21>
c0017c5b:	b8 00 00 00 00       	mov    eax,0x0
c0017c60:	e9 f7 00 00 00       	jmp    c0017d5c <findRSDT(unsigned char*)+0x118>
c0017c65:	83 ec 04             	sub    esp,0x4
c0017c68:	6a 24                	push   0x24
c0017c6a:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0017c6e:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017c72:	50                   	push   eax
c0017c73:	e8 cc 8a fe ff       	call   c0000744 <memcpy>
c0017c78:	83 c4 10             	add    esp,0x10
c0017c7b:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0017c7f:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c0017c83:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c0017c8b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017c8f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017c93:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0017c97:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017c9b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017c9f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017ca3:	25 ff 0f 00 00       	and    eax,0xfff
c0017ca8:	89 c6                	mov    esi,eax
c0017caa:	e8 0f a2 ff ff       	call   c0011ebe <Virt::getAKernelVAS()>
c0017caf:	89 c3                	mov    ebx,eax
c0017cb1:	83 ec 0c             	sub    esp,0xc
c0017cb4:	6a 02                	push   0x2
c0017cb6:	e8 68 9f ff ff       	call   c0011c23 <Virt::allocateKernelVirtualPages(int)>
c0017cbb:	83 c4 10             	add    esp,0x10
c0017cbe:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0017cc2:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017cc8:	83 ec 0c             	sub    esp,0xc
c0017ccb:	6a 01                	push   0x1
c0017ccd:	6a 02                	push   0x2
c0017ccf:	50                   	push   eax
c0017cd0:	52                   	push   edx
c0017cd1:	53                   	push   ebx
c0017cd2:	e8 17 aa ff ff       	call   c00126ee <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017cd7:	83 c4 20             	add    esp,0x20
c0017cda:	09 f0                	or     eax,esi
c0017cdc:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0017ce0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017ce4:	25 ff 0f 00 00       	and    eax,0xfff
c0017ce9:	89 c6                	mov    esi,eax
c0017ceb:	e8 ce a1 ff ff       	call   c0011ebe <Virt::getAKernelVAS()>
c0017cf0:	89 c3                	mov    ebx,eax
c0017cf2:	83 ec 0c             	sub    esp,0xc
c0017cf5:	6a 02                	push   0x2
c0017cf7:	e8 27 9f ff ff       	call   c0011c23 <Virt::allocateKernelVirtualPages(int)>
c0017cfc:	83 c4 10             	add    esp,0x10
c0017cff:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0017d03:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017d09:	83 ec 0c             	sub    esp,0xc
c0017d0c:	6a 01                	push   0x1
c0017d0e:	6a 02                	push   0x2
c0017d10:	50                   	push   eax
c0017d11:	52                   	push   edx
c0017d12:	53                   	push   ebx
c0017d13:	e8 d6 a9 ff ff       	call   c00126ee <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017d18:	83 c4 20             	add    esp,0x20
c0017d1b:	09 f0                	or     eax,esi
c0017d1d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017d21:	80 7c 24 3b 00       	cmp    BYTE PTR [esp+0x3b],0x0
c0017d26:	75 11                	jne    c0017d39 <findRSDT(unsigned char*)+0xf5>
c0017d28:	c6 05 c0 0f 03 c0 00 	mov    BYTE PTR ds:0xc0030fc0,0x0
c0017d2f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017d33:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0017d37:	eb 1f                	jmp    c0017d58 <findRSDT(unsigned char*)+0x114>
c0017d39:	80 7c 24 3b 02       	cmp    BYTE PTR [esp+0x3b],0x2
c0017d3e:	75 11                	jne    c0017d51 <findRSDT(unsigned char*)+0x10d>
c0017d40:	c6 05 c0 0f 03 c0 01 	mov    BYTE PTR ds:0xc0030fc0,0x1
c0017d47:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017d4b:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0017d4f:	eb 07                	jmp    c0017d58 <findRSDT(unsigned char*)+0x114>
c0017d51:	b8 00 00 00 00       	mov    eax,0x0
c0017d56:	eb 04                	jmp    c0017d5c <findRSDT(unsigned char*)+0x118>
c0017d58:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017d5c:	83 c4 44             	add    esp,0x44
c0017d5f:	5b                   	pop    ebx
c0017d60:	5e                   	pop    esi
c0017d61:	c3                   	ret    

c0017d62 <findDataTable(unsigned char*, char*)>:
c0017d62:	83 ec 1c             	sub    esp,0x1c
c0017d65:	a1 e8 e6 02 c0       	mov    eax,ds:0xc002e6e8
c0017d6a:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017d70:	83 e0 04             	and    eax,0x4
c0017d73:	84 c0                	test   al,al
c0017d75:	75 07                	jne    c0017d7e <findDataTable(unsigned char*, char*)+0x1c>
c0017d77:	b8 00 00 00 00       	mov    eax,0x0
c0017d7c:	eb 7c                	jmp    c0017dfa <findDataTable(unsigned char*, char*)+0x98>
c0017d7e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0017d86:	a1 ac 0d 03 c0       	mov    eax,ds:0xc0030dac
c0017d8b:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0017d8f:	7d 3a                	jge    c0017dcb <findDataTable(unsigned char*, char*)+0x69>
c0017d91:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017d95:	c1 e0 03             	shl    eax,0x3
c0017d98:	05 c0 0d 03 c0       	add    eax,0xc0030dc0
c0017d9d:	83 ec 04             	sub    esp,0x4
c0017da0:	6a 04                	push   0x4
c0017da2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017da6:	50                   	push   eax
c0017da7:	e8 94 88 fe ff       	call   c0000640 <memcmp>
c0017dac:	83 c4 10             	add    esp,0x10
c0017daf:	85 c0                	test   eax,eax
c0017db1:	0f 94 c0             	sete   al
c0017db4:	84 c0                	test   al,al
c0017db6:	74 0d                	je     c0017dc5 <findDataTable(unsigned char*, char*)+0x63>
c0017db8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017dbc:	8b 04 c5 c4 0d 03 c0 	mov    eax,DWORD PTR [eax*8-0x3ffcf23c]
c0017dc3:	eb 35                	jmp    c0017dfa <findDataTable(unsigned char*, char*)+0x98>
c0017dc5:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0017dc9:	eb bb                	jmp    c0017d86 <findDataTable(unsigned char*, char*)+0x24>
c0017dcb:	a0 c0 0f 03 c0       	mov    al,ds:0xc0030fc0
c0017dd0:	84 c0                	test   al,al
c0017dd2:	74 07                	je     c0017ddb <findDataTable(unsigned char*, char*)+0x79>
c0017dd4:	b8 58 00 00 00       	mov    eax,0x58
c0017dd9:	eb 05                	jmp    c0017de0 <findDataTable(unsigned char*, char*)+0x7e>
c0017ddb:	b8 52 00 00 00       	mov    eax,0x52
c0017de0:	83 ec 04             	sub    esp,0x4
c0017de3:	50                   	push   eax
c0017de4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017de8:	68 b4 b7 02 c0       	push   0xc002b7b4
c0017ded:	e8 f1 b1 ff ff       	call   c0012fe3 <Dbg::kprintf(char const*, ...)>
c0017df2:	83 c4 10             	add    esp,0x10
c0017df5:	b8 00 00 00 00       	mov    eax,0x0
c0017dfa:	83 c4 1c             	add    esp,0x1c
c0017dfd:	c3                   	ret    

c0017dfe <scanMADT()>:
c0017dfe:	53                   	push   ebx
c0017dff:	83 ec 38             	sub    esp,0x38
c0017e02:	a1 e8 e6 02 c0       	mov    eax,ds:0xc002e6e8
c0017e07:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017e0d:	83 e0 04             	and    eax,0x4
c0017e10:	84 c0                	test   al,al
c0017e12:	0f 84 63 04 00 00    	je     c001827b <scanMADT()+0x47d>
c0017e18:	e8 76 fb ff ff       	call   c0017993 <findRSDP()>
c0017e1d:	a3 cc 0f 03 c0       	mov    ds:0xc0030fcc,eax
c0017e22:	a1 cc 0f 03 c0       	mov    eax,ds:0xc0030fcc
c0017e27:	85 c0                	test   eax,eax
c0017e29:	75 19                	jne    c0017e44 <scanMADT()+0x46>
c0017e2b:	a1 e8 e6 02 c0       	mov    eax,ds:0xc002e6e8
c0017e30:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017e36:	83 e2 fb             	and    edx,0xfffffffb
c0017e39:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017e3f:	e9 3b 04 00 00       	jmp    c001827f <scanMADT()+0x481>
c0017e44:	a1 cc 0f 03 c0       	mov    eax,ds:0xc0030fcc
c0017e49:	83 ec 0c             	sub    esp,0xc
c0017e4c:	50                   	push   eax
c0017e4d:	e8 f2 fd ff ff       	call   c0017c44 <findRSDT(unsigned char*)>
c0017e52:	83 c4 10             	add    esp,0x10
c0017e55:	a3 c8 0f 03 c0       	mov    ds:0xc0030fc8,eax
c0017e5a:	a1 c8 0f 03 c0       	mov    eax,ds:0xc0030fc8
c0017e5f:	85 c0                	test   eax,eax
c0017e61:	75 19                	jne    c0017e7c <scanMADT()+0x7e>
c0017e63:	a1 e8 e6 02 c0       	mov    eax,ds:0xc002e6e8
c0017e68:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017e6e:	83 e2 fb             	and    edx,0xfffffffb
c0017e71:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017e77:	e9 03 04 00 00       	jmp    c001827f <scanMADT()+0x481>
c0017e7c:	a1 c8 0f 03 c0       	mov    eax,ds:0xc0030fc8
c0017e81:	83 ec 0c             	sub    esp,0xc
c0017e84:	50                   	push   eax
c0017e85:	e8 93 fb ff ff       	call   c0017a1d <loadACPITables(unsigned char*)>
c0017e8a:	83 c4 10             	add    esp,0x10
c0017e8d:	a1 c8 0f 03 c0       	mov    eax,ds:0xc0030fc8
c0017e92:	83 ec 08             	sub    esp,0x8
c0017e95:	68 82 b6 02 c0       	push   0xc002b682
c0017e9a:	50                   	push   eax
c0017e9b:	e8 c2 fe ff ff       	call   c0017d62 <findDataTable(unsigned char*, char*)>
c0017ea0:	83 c4 10             	add    esp,0x10
c0017ea3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0017ea7:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c0017eac:	75 19                	jne    c0017ec7 <scanMADT()+0xc9>
c0017eae:	a1 e8 e6 02 c0       	mov    eax,ds:0xc002e6e8
c0017eb3:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017eb9:	83 e2 fe             	and    edx,0xfffffffe
c0017ebc:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017ec2:	e9 b8 03 00 00       	jmp    c001827f <scanMADT()+0x481>
c0017ec7:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0017ecf:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017ed3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017ed6:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c0017eda:	0f 87 9f 03 00 00    	ja     c001827f <scanMADT()+0x481>
c0017ee0:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c0017ee8:	0f 87 91 03 00 00    	ja     c001827f <scanMADT()+0x481>
c0017eee:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017ef2:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0017ef6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017efa:	8d 50 01             	lea    edx,[eax+0x1]
c0017efd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017f01:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017f05:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017f09:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c0017f0d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017f11:	8d 50 01             	lea    edx,[eax+0x1]
c0017f14:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017f18:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017f1c:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017f20:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c0017f24:	80 7c 24 22 02       	cmp    BYTE PTR [esp+0x22],0x2
c0017f29:	0f 86 4f 03 00 00    	jbe    c001827e <scanMADT()+0x480>
c0017f2f:	80 7c 24 23 00       	cmp    BYTE PTR [esp+0x23],0x0
c0017f34:	75 57                	jne    c0017f8d <scanMADT()+0x18f>
c0017f36:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017f3a:	8d 50 01             	lea    edx,[eax+0x1]
c0017f3d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017f41:	8a 15 c0 11 03 c0    	mov    dl,BYTE PTR ds:0xc00311c0
c0017f47:	0f b6 d2             	movzx  edx,dl
c0017f4a:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0017f4e:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0017f52:	88 82 00 12 03 c0    	mov    BYTE PTR [edx-0x3ffcee00],al
c0017f58:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017f5c:	8d 50 01             	lea    edx,[eax+0x1]
c0017f5f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017f63:	8a 15 c0 11 03 c0    	mov    dl,BYTE PTR ds:0xc00311c0
c0017f69:	8d 4a 01             	lea    ecx,[edx+0x1]
c0017f6c:	88 0d c0 11 03 c0    	mov    BYTE PTR ds:0xc00311c0,cl
c0017f72:	0f b6 d2             	movzx  edx,dl
c0017f75:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0017f79:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0017f7d:	88 82 e0 11 03 c0    	mov    BYTE PTR [edx-0x3ffcee20],al
c0017f83:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017f88:	e9 da 02 00 00       	jmp    c0018267 <scanMADT()+0x469>
c0017f8d:	80 7c 24 23 01       	cmp    BYTE PTR [esp+0x23],0x1
c0017f92:	0f 85 14 01 00 00    	jne    c00180ac <scanMADT()+0x2ae>
c0017f98:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017f9c:	8d 50 01             	lea    edx,[eax+0x1]
c0017f9f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017fa3:	8a 15 80 10 03 c0    	mov    dl,BYTE PTR ds:0xc0031080
c0017fa9:	0f b6 d2             	movzx  edx,dl
c0017fac:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0017fb0:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0017fb4:	88 82 a0 10 03 c0    	mov    BYTE PTR [edx-0x3ffcef60],al
c0017fba:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
c0017fbe:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017fc2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017fc6:	01 d0                	add    eax,edx
c0017fc8:	83 c0 2c             	add    eax,0x2c
c0017fcb:	8a 00                	mov    al,BYTE PTR [eax]
c0017fcd:	0f b6 d0             	movzx  edx,al
c0017fd0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017fd4:	8d 48 01             	lea    ecx,[eax+0x1]
c0017fd7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017fdb:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0017fdf:	0f b6 c0             	movzx  eax,al
c0017fe2:	c1 e0 08             	shl    eax,0x8
c0017fe5:	89 d1                	mov    ecx,edx
c0017fe7:	09 c1                	or     ecx,eax
c0017fe9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017fed:	8d 50 02             	lea    edx,[eax+0x2]
c0017ff0:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017ff4:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017ff8:	0f b6 c0             	movzx  eax,al
c0017ffb:	c1 e0 10             	shl    eax,0x10
c0017ffe:	09 c1                	or     ecx,eax
c0018000:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018004:	8d 50 03             	lea    edx,[eax+0x3]
c0018007:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001800b:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001800f:	0f b6 c0             	movzx  eax,al
c0018012:	c1 e0 18             	shl    eax,0x18
c0018015:	09 c1                	or     ecx,eax
c0018017:	89 ca                	mov    edx,ecx
c0018019:	a0 80 10 03 c0       	mov    al,ds:0xc0031080
c001801e:	0f b6 c0             	movzx  eax,al
c0018021:	89 14 85 c0 10 03 c0 	mov    DWORD PTR [eax*4-0x3ffcef40],edx
c0018028:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c001802d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018031:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018035:	01 d0                	add    eax,edx
c0018037:	83 c0 2c             	add    eax,0x2c
c001803a:	8a 00                	mov    al,BYTE PTR [eax]
c001803c:	0f b6 d0             	movzx  edx,al
c001803f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018043:	8d 48 01             	lea    ecx,[eax+0x1]
c0018046:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001804a:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c001804e:	0f b6 c0             	movzx  eax,al
c0018051:	c1 e0 08             	shl    eax,0x8
c0018054:	89 d1                	mov    ecx,edx
c0018056:	09 c1                	or     ecx,eax
c0018058:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001805c:	8d 50 02             	lea    edx,[eax+0x2]
c001805f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018063:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0018067:	0f b6 c0             	movzx  eax,al
c001806a:	c1 e0 10             	shl    eax,0x10
c001806d:	09 c1                	or     ecx,eax
c001806f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018073:	8d 50 03             	lea    edx,[eax+0x3]
c0018076:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001807a:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001807e:	0f b6 c0             	movzx  eax,al
c0018081:	c1 e0 18             	shl    eax,0x18
c0018084:	09 c1                	or     ecx,eax
c0018086:	89 ca                	mov    edx,ecx
c0018088:	a0 80 10 03 c0       	mov    al,ds:0xc0031080
c001808d:	0f b6 c0             	movzx  eax,al
c0018090:	89 14 85 40 11 03 c0 	mov    DWORD PTR [eax*4-0x3ffceec0],edx
c0018097:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c001809c:	a0 80 10 03 c0       	mov    al,ds:0xc0031080
c00180a1:	40                   	inc    eax
c00180a2:	a2 80 10 03 c0       	mov    ds:0xc0031080,al
c00180a7:	e9 bb 01 00 00       	jmp    c0018267 <scanMADT()+0x469>
c00180ac:	80 7c 24 23 02       	cmp    BYTE PTR [esp+0x23],0x2
c00180b1:	0f 85 e9 00 00 00    	jne    c00181a0 <scanMADT()+0x3a2>
c00180b7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00180bb:	8d 50 01             	lea    edx,[eax+0x1]
c00180be:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00180c2:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00180c6:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c00180ca:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c00180ce:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00180d2:	8d 50 01             	lea    edx,[eax+0x1]
c00180d5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00180d9:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00180dd:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c00180e1:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c00180e5:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00180e9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00180ed:	01 d0                	add    eax,edx
c00180ef:	83 c0 2c             	add    eax,0x2c
c00180f2:	8a 00                	mov    al,BYTE PTR [eax]
c00180f4:	0f b6 d0             	movzx  edx,al
c00180f7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00180fb:	8d 48 01             	lea    ecx,[eax+0x1]
c00180fe:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018102:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0018106:	0f b6 c0             	movzx  eax,al
c0018109:	c1 e0 08             	shl    eax,0x8
c001810c:	89 d1                	mov    ecx,edx
c001810e:	09 c1                	or     ecx,eax
c0018110:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018114:	8d 50 02             	lea    edx,[eax+0x2]
c0018117:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001811b:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001811f:	0f b6 c0             	movzx  eax,al
c0018122:	c1 e0 10             	shl    eax,0x10
c0018125:	09 c1                	or     ecx,eax
c0018127:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001812b:	8d 50 03             	lea    edx,[eax+0x3]
c001812e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018132:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0018136:	0f b6 c0             	movzx  eax,al
c0018139:	c1 e0 18             	shl    eax,0x18
c001813c:	09 c8                	or     eax,ecx
c001813e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0018142:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0018147:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001814b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001814f:	01 d0                	add    eax,edx
c0018151:	83 c0 2c             	add    eax,0x2c
c0018154:	8a 00                	mov    al,BYTE PTR [eax]
c0018156:	0f b6 c0             	movzx  eax,al
c0018159:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001815d:	8d 4a 01             	lea    ecx,[edx+0x1]
c0018160:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018164:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c0018168:	0f b6 d2             	movzx  edx,dl
c001816b:	c1 e2 08             	shl    edx,0x8
c001816e:	09 d0                	or     eax,edx
c0018170:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c0018175:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c001817a:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c001817f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018183:	88 90 40 d9 02 c0    	mov    BYTE PTR [eax-0x3ffd26c0],dl
c0018189:	0f b6 54 24 20       	movzx  edx,BYTE PTR [esp+0x20]
c001818e:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c0018193:	66 89 84 12 60 10 03 c0 	mov    WORD PTR [edx+edx*1-0x3ffcefa0],ax
c001819b:	e9 c7 00 00 00       	jmp    c0018267 <scanMADT()+0x469>
c00181a0:	80 7c 24 23 04       	cmp    BYTE PTR [esp+0x23],0x4
c00181a5:	0f 85 b0 00 00 00    	jne    c001825b <scanMADT()+0x45d>
c00181ab:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00181af:	8d 50 01             	lea    edx,[eax+0x1]
c00181b2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00181b6:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00181ba:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c00181be:	0f b6 c0             	movzx  eax,al
c00181c1:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00181c5:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00181c9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00181cd:	01 d0                	add    eax,edx
c00181cf:	83 c0 2c             	add    eax,0x2c
c00181d2:	8a 00                	mov    al,BYTE PTR [eax]
c00181d4:	0f b6 d0             	movzx  edx,al
c00181d7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00181db:	8d 48 01             	lea    ecx,[eax+0x1]
c00181de:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00181e2:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c00181e6:	0f b6 c0             	movzx  eax,al
c00181e9:	c1 e0 08             	shl    eax,0x8
c00181ec:	09 d0                	or     eax,edx
c00181ee:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00181f2:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c00181f7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00181fb:	8d 50 01             	lea    edx,[eax+0x1]
c00181fe:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0018202:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018206:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c001820a:	0f b6 c0             	movzx  eax,al
c001820d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018211:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018215:	c1 e0 08             	shl    eax,0x8
c0018218:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c001821c:	89 c1                	mov    ecx,eax
c001821e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018222:	c1 e0 18             	shl    eax,0x18
c0018225:	89 c3                	mov    ebx,eax
c0018227:	a1 d0 0f 03 c0       	mov    eax,ds:0xc0030fd0
c001822c:	8d 50 01             	lea    edx,[eax+0x1]
c001822f:	89 15 d0 0f 03 c0    	mov    DWORD PTR ds:0xc0030fd0,edx
c0018235:	09 d9                	or     ecx,ebx
c0018237:	89 ca                	mov    edx,ecx
c0018239:	89 14 85 e0 0f 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf020],edx
c0018240:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0018244:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0018248:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001824c:	68 e4 b7 02 c0       	push   0xc002b7e4
c0018251:	e8 8d ad ff ff       	call   c0012fe3 <Dbg::kprintf(char const*, ...)>
c0018256:	83 c4 10             	add    esp,0x10
c0018259:	eb 0c                	jmp    c0018267 <scanMADT()+0x469>
c001825b:	80 7c 24 23 05       	cmp    BYTE PTR [esp+0x23],0x5
c0018260:	75 05                	jne    c0018267 <scanMADT()+0x469>
c0018262:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c0018267:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c001826c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018270:	01 d0                	add    eax,edx
c0018272:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0018276:	e9 54 fc ff ff       	jmp    c0017ecf <scanMADT()+0xd1>
c001827b:	90                   	nop
c001827c:	eb 01                	jmp    c001827f <scanMADT()+0x481>
c001827e:	90                   	nop
c001827f:	83 c4 38             	add    esp,0x38
c0018282:	5b                   	pop    ebx
c0018283:	c3                   	ret    

c0018284 <ACPI::ACPI()>:
c0018284:	83 ec 0c             	sub    esp,0xc
c0018287:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001828b:	83 ec 08             	sub    esp,0x8
c001828e:	68 87 b6 02 c0       	push   0xc002b687
c0018293:	50                   	push   eax
c0018294:	e8 61 c3 ff ff       	call   c00145fa <Device::Device(char const*)>
c0018299:	83 c4 10             	add    esp,0x10
c001829c:	ba 58 b8 02 c0       	mov    edx,0xc002b858
c00182a1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00182a5:	89 10                	mov    DWORD PTR [eax],edx
c00182a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00182ab:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c00182b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00182b6:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c00182c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00182c4:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c00182ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00182d2:	c6 80 64 12 00 00 00 	mov    BYTE PTR [eax+0x1264],0x0
c00182d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00182dd:	c6 80 65 12 00 00 00 	mov    BYTE PTR [eax+0x1265],0x0
c00182e4:	e8 15 fb ff ff       	call   c0017dfe <scanMADT()>
c00182e9:	90                   	nop
c00182ea:	83 c4 0c             	add    esp,0xc
c00182ed:	c3                   	ret    

c00182ee <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c00182ee:	83 ec 2c             	sub    esp,0x2c
c00182f1:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c00182f5:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00182f9:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00182fd:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0018301:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0018306:	88 d0                	mov    al,dl
c0018308:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c001830c:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0018311:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0018319:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001831d:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0018323:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0018327:	0f 8d 97 00 00 00    	jge    c00183c4 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd6>
c001832d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0018331:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018335:	83 c2 2a             	add    edx,0x2a
c0018338:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c001833c:	66 39 44 24 08       	cmp    WORD PTR [esp+0x8],ax
c0018341:	75 78                	jne    c00183bb <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c0018343:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0018347:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001834b:	83 c2 2a             	add    edx,0x2a
c001834e:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c0018352:	38 44 24 04          	cmp    BYTE PTR [esp+0x4],al
c0018356:	75 63                	jne    c00183bb <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c0018358:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001835d:	74 3a                	je     c0018399 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xab>
c001835f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0018363:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018367:	83 c2 2a             	add    edx,0x2a
c001836a:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c001836e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018372:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0018375:	39 c2                	cmp    edx,eax
c0018377:	74 10                	je     c0018389 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x9b>
c0018379:	83 ec 0c             	sub    esp,0xc
c001837c:	68 20 b8 02 c0       	push   0xc002b820
c0018381:	e8 0f 23 00 00       	call   c001a695 <Krnl::panic(char const*)>
c0018386:	83 c4 10             	add    esp,0x10
c0018389:	83 ec 0c             	sub    esp,0xc
c001838c:	68 8c b6 02 c0       	push   0xc002b68c
c0018391:	e8 ff 22 00 00       	call   c001a695 <Krnl::panic(char const*)>
c0018396:	83 c4 10             	add    esp,0x10
c0018399:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001839d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00183a1:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00183a5:	83 c2 2a             	add    edx,0x2a
c00183a8:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c00183ac:	8b 02                	mov    eax,DWORD PTR [edx]
c00183ae:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c00183b1:	89 01                	mov    DWORD PTR [ecx],eax
c00183b3:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00183b6:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c00183bb:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c00183bf:	e9 55 ff ff ff       	jmp    c0018319 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2b>
c00183c4:	90                   	nop
c00183c5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00183c9:	83 c4 2c             	add    esp,0x2c
c00183cc:	c2 04 00             	ret    0x4
c00183cf:	90                   	nop

c00183d0 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c00183d0:	83 ec 1c             	sub    esp,0x1c
c00183d3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00183d7:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c00183db:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00183df:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c00183e4:	88 c8                	mov    al,cl
c00183e6:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00183ea:	88 d0                	mov    al,dl
c00183ec:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c00183f0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00183f4:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c00183fa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00183fe:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0018401:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c0018405:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c0018409:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001840d:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0018413:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0018417:	8d 48 2a             	lea    ecx,[eax+0x2a]
c001841a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001841e:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c0018423:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018427:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c001842d:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0018431:	8d 48 01             	lea    ecx,[eax+0x1]
c0018434:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018438:	83 c2 2a             	add    edx,0x2a
c001843b:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c001843f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018443:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0018449:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001844d:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0018450:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0018454:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c0018458:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001845c:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0018462:	8d 50 01             	lea    edx,[eax+0x1]
c0018465:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018469:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c001846f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018473:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0018479:	3d 00 02 00 00       	cmp    eax,0x200
c001847e:	75 10                	jne    c0018490 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc0>
c0018480:	83 ec 0c             	sub    esp,0xc
c0018483:	68 9b b6 02 c0       	push   0xc002b69b
c0018488:	e8 08 22 00 00       	call   c001a695 <Krnl::panic(char const*)>
c001848d:	83 c4 10             	add    esp,0x10
c0018490:	90                   	nop
c0018491:	83 c4 1c             	add    esp,0x1c
c0018494:	c3                   	ret    
c0018495:	90                   	nop

c0018496 <ACPI::setScreenBrightnessLevel(void*, int)>:
c0018496:	b8 00 00 00 00       	mov    eax,0x0
c001849b:	c3                   	ret    

c001849c <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c001849c:	83 ec 1c             	sub    esp,0x1c
c001849f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00184a3:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c00184a6:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00184aa:	a1 e8 e6 02 c0       	mov    eax,ds:0xc002e6e8
c00184af:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c00184b4:	83 ec 08             	sub    esp,0x8
c00184b7:	52                   	push   edx
c00184b8:	50                   	push   eax
c00184b9:	e8 3e 6a ff ff       	call   c000eefc <Computer::readCMOS(unsigned char)>
c00184be:	83 c4 10             	add    esp,0x10
c00184c1:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c00184c5:	a1 e8 e6 02 c0       	mov    eax,ds:0xc002e6e8
c00184ca:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c00184cf:	83 ec 04             	sub    esp,0x4
c00184d2:	6a 01                	push   0x1
c00184d4:	52                   	push   edx
c00184d5:	50                   	push   eax
c00184d6:	e8 37 6b ff ff       	call   c000f012 <Computer::writeCMOS(unsigned char, unsigned char)>
c00184db:	83 c4 10             	add    esp,0x10
c00184de:	90                   	nop
c00184df:	83 c4 1c             	add    esp,0x1c
c00184e2:	c3                   	ret    
c00184e3:	90                   	nop

c00184e4 <ACPI::open(int, int, void*)>:
c00184e4:	53                   	push   ebx
c00184e5:	83 ec 28             	sub    esp,0x28
c00184e8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00184ec:	c6 80 64 12 00 00 00 	mov    BYTE PTR [eax+0x1264],0x0
c00184f3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00184f7:	c6 80 65 12 00 00 00 	mov    BYTE PTR [eax+0x1265],0x0
c00184fe:	a1 e8 e6 02 c0       	mov    eax,ds:0xc002e6e8
c0018503:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0018509:	83 e0 04             	and    eax,0x4
c001850c:	84 c0                	test   al,al
c001850e:	74 47                	je     c0018557 <ACPI::open(int, int, void*)+0x73>
c0018510:	a1 c8 0f 03 c0       	mov    eax,ds:0xc0030fc8
c0018515:	83 ec 08             	sub    esp,0x8
c0018518:	68 b8 b6 02 c0       	push   0xc002b6b8
c001851d:	50                   	push   eax
c001851e:	e8 3f f8 ff ff       	call   c0017d62 <findDataTable(unsigned char*, char*)>
c0018523:	83 c4 10             	add    esp,0x10
c0018526:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001852a:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001852f:	74 26                	je     c0018557 <ACPI::open(int, int, void*)+0x73>
c0018531:	83 ec 0c             	sub    esp,0xc
c0018534:	68 bd b6 02 c0       	push   0xc002b6bd
c0018539:	e8 a5 aa ff ff       	call   c0012fe3 <Dbg::kprintf(char const*, ...)>
c001853e:	83 c4 10             	add    esp,0x10
c0018541:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018545:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c001854c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018550:	c6 80 65 12 00 00 01 	mov    BYTE PTR [eax+0x1265],0x1
c0018557:	c7 44 24 18 5f 0c 00 00 	mov    DWORD PTR [esp+0x18],0xc5f
c001855f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018563:	8a 00                	mov    al,BYTE PTR [eax]
c0018565:	3c 01                	cmp    al,0x1
c0018567:	75 28                	jne    c0018591 <ACPI::open(int, int, void*)+0xad>
c0018569:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001856d:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c0018574:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018578:	c6 80 65 12 00 00 01 	mov    BYTE PTR [eax+0x1265],0x1
c001857f:	83 ec 0c             	sub    esp,0xc
c0018582:	68 ce b6 02 c0       	push   0xc002b6ce
c0018587:	e8 57 aa ff ff       	call   c0012fe3 <Dbg::kprintf(char const*, ...)>
c001858c:	83 c4 10             	add    esp,0x10
c001858f:	eb 25                	jmp    c00185b6 <ACPI::open(int, int, void*)+0xd2>
c0018591:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018595:	8a 00                	mov    al,BYTE PTR [eax]
c0018597:	3c 02                	cmp    al,0x2
c0018599:	75 1b                	jne    c00185b6 <ACPI::open(int, int, void*)+0xd2>
c001859b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001859f:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c00185a6:	83 ec 0c             	sub    esp,0xc
c00185a9:	68 d6 b6 02 c0       	push   0xc002b6d6
c00185ae:	e8 30 aa ff ff       	call   c0012fe3 <Dbg::kprintf(char const*, ...)>
c00185b3:	83 c4 10             	add    esp,0x10
c00185b6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00185ba:	8a 80 64 12 00 00    	mov    al,BYTE PTR [eax+0x1264]
c00185c0:	83 f0 01             	xor    eax,0x1
c00185c3:	84 c0                	test   al,al
c00185c5:	74 6a                	je     c0018631 <ACPI::open(int, int, void*)+0x14d>
c00185c7:	83 ec 0c             	sub    esp,0xc
c00185ca:	68 de b6 02 c0       	push   0xc002b6de
c00185cf:	e8 0f aa ff ff       	call   c0012fe3 <Dbg::kprintf(char const*, ...)>
c00185d4:	83 c4 10             	add    esp,0x10
c00185d7:	e8 74 7b fe ff       	call   c0000150 <manualPCIProbe>
c00185dc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00185e0:	83 7c 24 14 01       	cmp    DWORD PTR [esp+0x14],0x1
c00185e5:	75 28                	jne    c001860f <ACPI::open(int, int, void*)+0x12b>
c00185e7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00185eb:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c00185f2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00185f6:	c6 80 65 12 00 00 01 	mov    BYTE PTR [eax+0x1265],0x1
c00185fd:	83 ec 0c             	sub    esp,0xc
c0018600:	68 ec b6 02 c0       	push   0xc002b6ec
c0018605:	e8 d9 a9 ff ff       	call   c0012fe3 <Dbg::kprintf(char const*, ...)>
c001860a:	83 c4 10             	add    esp,0x10
c001860d:	eb 22                	jmp    c0018631 <ACPI::open(int, int, void*)+0x14d>
c001860f:	83 7c 24 14 02       	cmp    DWORD PTR [esp+0x14],0x2
c0018614:	75 1b                	jne    c0018631 <ACPI::open(int, int, void*)+0x14d>
c0018616:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001861a:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c0018621:	83 ec 0c             	sub    esp,0xc
c0018624:	68 f6 b6 02 c0       	push   0xc002b6f6
c0018629:	e8 b5 a9 ff ff       	call   c0012fe3 <Dbg::kprintf(char const*, ...)>
c001862e:	83 c4 10             	add    esp,0x10
c0018631:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018635:	8a 80 64 12 00 00    	mov    al,BYTE PTR [eax+0x1264]
c001863b:	84 c0                	test   al,al
c001863d:	74 13                	je     c0018652 <ACPI::open(int, int, void*)+0x16e>
c001863f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018643:	8a 80 65 12 00 00    	mov    al,BYTE PTR [eax+0x1265]
c0018649:	83 f0 01             	xor    eax,0x1
c001864c:	0f b6 c0             	movzx  eax,al
c001864f:	40                   	inc    eax
c0018650:	eb 05                	jmp    c0018657 <ACPI::open(int, int, void*)+0x173>
c0018652:	b8 00 00 00 00       	mov    eax,0x0
c0018657:	83 ec 08             	sub    esp,0x8
c001865a:	50                   	push   eax
c001865b:	68 00 b7 02 c0       	push   0xc002b700
c0018660:	e8 7e a9 ff ff       	call   c0012fe3 <Dbg::kprintf(char const*, ...)>
c0018665:	83 c4 10             	add    esp,0x10
c0018668:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001866c:	8a 80 64 12 00 00    	mov    al,BYTE PTR [eax+0x1264]
c0018672:	84 c0                	test   al,al
c0018674:	74 67                	je     c00186dd <ACPI::open(int, int, void*)+0x1f9>
c0018676:	c7 44 24 04 58 01 00 00 	mov    DWORD PTR [esp+0x4],0x158
c001867e:	83 ec 0c             	sub    esp,0xc
c0018681:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0018685:	e8 5a 72 ff ff       	call   c000f8e4 <malloc>
c001868a:	83 c4 10             	add    esp,0x10
c001868d:	89 c3                	mov    ebx,eax
c001868f:	83 ec 0c             	sub    esp,0xc
c0018692:	53                   	push   ebx
c0018693:	e8 26 a3 00 00       	call   c00229be <PCI::PCI()>
c0018698:	83 c4 10             	add    esp,0x10
c001869b:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001869f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00186a3:	83 ec 08             	sub    esp,0x8
c00186a6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00186aa:	50                   	push   eax
c00186ab:	e8 5a bd ff ff       	call   c001440a <Device::addChild(Device*)>
c00186b0:	83 c4 10             	add    esp,0x10
c00186b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00186b7:	8b 00                	mov    eax,DWORD PTR [eax]
c00186b9:	83 c0 08             	add    eax,0x8
c00186bc:	8b 00                	mov    eax,DWORD PTR [eax]
c00186be:	6a 00                	push   0x0
c00186c0:	6a 00                	push   0x0
c00186c2:	6a 00                	push   0x0
c00186c4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00186c8:	ff d0                	call   eax
c00186ca:	83 c4 10             	add    esp,0x10
c00186cd:	83 ec 0c             	sub    esp,0xc
c00186d0:	68 09 b7 02 c0       	push   0xc002b709
c00186d5:	e8 09 a9 ff ff       	call   c0012fe3 <Dbg::kprintf(char const*, ...)>
c00186da:	83 c4 10             	add    esp,0x10
c00186dd:	83 ec 0c             	sub    esp,0xc
c00186e0:	68 14 b7 02 c0       	push   0xc002b714
c00186e5:	e8 cb 46 00 00       	call   c001cdb5 <Thr::loadKernelSymbolTable(char const*)>
c00186ea:	83 c4 10             	add    esp,0x10
c00186ed:	8b 1d e8 e6 02 c0    	mov    ebx,DWORD PTR ds:0xc002e6e8
c00186f3:	83 ec 08             	sub    esp,0x8
c00186f6:	6a 01                	push   0x1
c00186f8:	68 32 b7 02 c0       	push   0xc002b732
c00186fd:	e8 10 51 00 00       	call   c001d812 <Thr::loadDLL(char const*, bool)>
c0018702:	83 c4 10             	add    esp,0x10
c0018705:	83 ec 08             	sub    esp,0x8
c0018708:	53                   	push   ebx
c0018709:	50                   	push   eax
c001870a:	e8 37 53 00 00       	call   c001da46 <Thr::executeDLL(unsigned long, void*)>
c001870f:	83 c4 10             	add    esp,0x10
c0018712:	8b 1d e8 e6 02 c0    	mov    ebx,DWORD PTR ds:0xc002e6e8
c0018718:	83 ec 08             	sub    esp,0x8
c001871b:	6a 01                	push   0x1
c001871d:	68 4f b7 02 c0       	push   0xc002b74f
c0018722:	e8 eb 50 00 00       	call   c001d812 <Thr::loadDLL(char const*, bool)>
c0018727:	83 c4 10             	add    esp,0x10
c001872a:	83 ec 08             	sub    esp,0x8
c001872d:	53                   	push   ebx
c001872e:	50                   	push   eax
c001872f:	e8 12 53 00 00       	call   c001da46 <Thr::executeDLL(unsigned long, void*)>
c0018734:	83 c4 10             	add    esp,0x10
c0018737:	a1 e8 e6 02 c0       	mov    eax,ds:0xc002e6e8
c001873c:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0018742:	83 e0 04             	and    eax,0x4
c0018745:	84 c0                	test   al,al
c0018747:	0f 84 d2 00 00 00    	je     c001881f <ACPI::open(int, int, void*)+0x33b>
c001874d:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0018754:	83 ec 0c             	sub    esp,0xc
c0018757:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001875b:	e8 84 71 ff ff       	call   c000f8e4 <malloc>
c0018760:	83 c4 10             	add    esp,0x10
c0018763:	89 c3                	mov    ebx,eax
c0018765:	a1 58 1c 03 c0       	mov    eax,ds:0xc0031c58
c001876a:	83 ec 04             	sub    esp,0x4
c001876d:	50                   	push   eax
c001876e:	68 6c b7 02 c0       	push   0xc002b76c
c0018773:	53                   	push   ebx
c0018774:	e8 c3 ad ff ff       	call   c001353c <File::File(char const*, Process*)>
c0018779:	83 c4 10             	add    esp,0x10
c001877c:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0018780:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0018785:	74 17                	je     c001879e <ACPI::open(int, int, void*)+0x2ba>
c0018787:	83 ec 0c             	sub    esp,0xc
c001878a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001878e:	e8 7b b0 ff ff       	call   c001380e <File::exists()>
c0018793:	83 c4 10             	add    esp,0x10
c0018796:	84 c0                	test   al,al
c0018798:	74 04                	je     c001879e <ACPI::open(int, int, void*)+0x2ba>
c001879a:	b0 01                	mov    al,0x1
c001879c:	eb 02                	jmp    c00187a0 <ACPI::open(int, int, void*)+0x2bc>
c001879e:	b0 00                	mov    al,0x0
c00187a0:	84 c0                	test   al,al
c00187a2:	74 22                	je     c00187c6 <ACPI::open(int, int, void*)+0x2e2>
c00187a4:	83 ec 08             	sub    esp,0x8
c00187a7:	6a 01                	push   0x1
c00187a9:	68 6c b7 02 c0       	push   0xc002b76c
c00187ae:	e8 5f 50 00 00       	call   c001d812 <Thr::loadDLL(char const*, bool)>
c00187b3:	83 c4 10             	add    esp,0x10
c00187b6:	83 ec 08             	sub    esp,0x8
c00187b9:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00187bd:	50                   	push   eax
c00187be:	e8 83 52 00 00       	call   c001da46 <Thr::executeDLL(unsigned long, void*)>
c00187c3:	83 c4 10             	add    esp,0x10
c00187c6:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00187cb:	74 1e                	je     c00187eb <ACPI::open(int, int, void*)+0x307>
c00187cd:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00187d2:	74 17                	je     c00187eb <ACPI::open(int, int, void*)+0x307>
c00187d4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00187d8:	8b 00                	mov    eax,DWORD PTR [eax]
c00187da:	83 c0 08             	add    eax,0x8
c00187dd:	8b 00                	mov    eax,DWORD PTR [eax]
c00187df:	83 ec 0c             	sub    esp,0xc
c00187e2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00187e6:	ff d0                	call   eax
c00187e8:	83 c4 10             	add    esp,0x10
c00187eb:	a1 c8 0f 03 c0       	mov    eax,ds:0xc0030fc8
c00187f0:	83 ec 08             	sub    esp,0x8
c00187f3:	68 89 b7 02 c0       	push   0xc002b789
c00187f8:	50                   	push   eax
c00187f9:	e8 64 f5 ff ff       	call   c0017d62 <findDataTable(unsigned char*, char*)>
c00187fe:	83 c4 10             	add    esp,0x10
c0018801:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0018805:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001880a:	74 13                	je     c001881f <ACPI::open(int, int, void*)+0x33b>
c001880c:	83 ec 08             	sub    esp,0x8
c001880f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0018813:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0018817:	e8 80 fc ff ff       	call   c001849c <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c001881c:	83 c4 10             	add    esp,0x10
c001881f:	b8 00 00 00 00       	mov    eax,0x0
c0018824:	83 c4 28             	add    esp,0x28
c0018827:	5b                   	pop    ebx
c0018828:	c3                   	ret    
c0018829:	90                   	nop

c001882a <ACPI::sleep()>:
c001882a:	83 ec 0c             	sub    esp,0xc
c001882d:	a1 a0 0d 03 c0       	mov    eax,ds:0xc0030da0
c0018832:	85 c0                	test   eax,eax
c0018834:	74 07                	je     c001883d <ACPI::sleep()+0x13>
c0018836:	a1 a0 0d 03 c0       	mov    eax,ds:0xc0030da0
c001883b:	ff d0                	call   eax
c001883d:	90                   	nop
c001883e:	83 c4 0c             	add    esp,0xc
c0018841:	c3                   	ret    

c0018842 <CPU::close(int, int, void*)>:
c0018842:	31 c0                	xor    eax,eax
c0018844:	c3                   	ret    
c0018845:	90                   	nop

c0018846 <CPU::lookupAMDName(unsigned char, unsigned char)>:
c0018846:	55                   	push   ebp
c0018847:	57                   	push   edi
c0018848:	56                   	push   esi
c0018849:	53                   	push   ebx
c001884a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001884e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018852:	89 ce                	mov    esi,ecx
c0018854:	89 d5                	mov    ebp,edx
c0018856:	80 f9 04             	cmp    cl,0x4
c0018859:	75 28                	jne    c0018883 <CPU::lookupAMDName(unsigned char, unsigned char)+0x3d>
c001885b:	8d 42 f9             	lea    eax,[edx-0x7]
c001885e:	3c 03                	cmp    al,0x3
c0018860:	0f 86 63 01 00 00    	jbe    c00189c9 <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c0018866:	80 fa 03             	cmp    dl,0x3
c0018869:	0f 84 5a 01 00 00    	je     c00189c9 <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c001886f:	8d 7a f2             	lea    edi,[edx-0xe]
c0018872:	b8 10 db 02 c0       	mov    eax,0xc002db10
c0018877:	89 fb                	mov    ebx,edi
c0018879:	80 fb 01             	cmp    bl,0x1
c001887c:	77 4e                	ja     c00188cc <CPU::lookupAMDName(unsigned char, unsigned char)+0x86>
c001887e:	e9 52 01 00 00       	jmp    c00189d5 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018883:	80 f9 05             	cmp    cl,0x5
c0018886:	75 4d                	jne    c00188d5 <CPU::lookupAMDName(unsigned char, unsigned char)+0x8f>
c0018888:	b8 20 db 02 c0       	mov    eax,0xc002db20
c001888d:	80 fa 03             	cmp    dl,0x3
c0018890:	0f 86 3f 01 00 00    	jbe    c00189d5 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018896:	8d 7a fa             	lea    edi,[edx-0x6]
c0018899:	b8 30 db 02 c0       	mov    eax,0xc002db30
c001889e:	89 fb                	mov    ebx,edi
c00188a0:	80 fb 01             	cmp    bl,0x1
c00188a3:	0f 86 2c 01 00 00    	jbe    c00189d5 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00188a9:	b8 40 db 02 c0       	mov    eax,0xc002db40
c00188ae:	80 fa 08             	cmp    dl,0x8
c00188b1:	0f 84 1e 01 00 00    	je     c00189d5 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00188b7:	89 d7                	mov    edi,edx
c00188b9:	b8 50 db 02 c0       	mov    eax,0xc002db50
c00188be:	83 e7 fb             	and    edi,0xfffffffb
c00188c1:	89 fb                	mov    ebx,edi
c00188c3:	80 fb 09             	cmp    bl,0x9
c00188c6:	0f 84 09 01 00 00    	je     c00189d5 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00188cc:	31 c0                	xor    eax,eax
c00188ce:	89 eb                	mov    ebx,ebp
c00188d0:	0f b6 fb             	movzx  edi,bl
c00188d3:	eb 30                	jmp    c0018905 <CPU::lookupAMDName(unsigned char, unsigned char)+0xbf>
c00188d5:	31 c0                	xor    eax,eax
c00188d7:	80 f9 06             	cmp    cl,0x6
c00188da:	75 f2                	jne    c00188ce <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c00188dc:	80 fa 0a             	cmp    dl,0xa
c00188df:	77 ed                	ja     c00188ce <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c00188e1:	bf de 05 00 00       	mov    edi,0x5de
c00188e6:	0f a3 d7             	bt     edi,edx
c00188e9:	73 e3                	jae    c00188ce <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c00188eb:	b8 60 db 02 c0       	mov    eax,0xc002db60
c00188f0:	e9 e0 00 00 00       	jmp    c00189d5 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00188f5:	39 c7                	cmp    edi,eax
c00188f7:	0f 84 d3 00 00 00    	je     c00189d0 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c00188fd:	40                   	inc    eax
c00188fe:	3d d0 00 00 00       	cmp    eax,0xd0
c0018903:	74 09                	je     c001890e <CPU::lookupAMDName(unsigned char, unsigned char)+0xc8>
c0018905:	89 f3                	mov    ebx,esi
c0018907:	80 fb 0f             	cmp    bl,0xf
c001890a:	75 f1                	jne    c00188fd <CPU::lookupAMDName(unsigned char, unsigned char)+0xb7>
c001890c:	eb e7                	jmp    c00188f5 <CPU::lookupAMDName(unsigned char, unsigned char)+0xaf>
c001890e:	80 f9 10             	cmp    cl,0x10
c0018911:	75 14                	jne    c0018927 <CPU::lookupAMDName(unsigned char, unsigned char)+0xe1>
c0018913:	8d 42 fc             	lea    eax,[edx-0x4]
c0018916:	83 e0 fb             	and    eax,0xfffffffb
c0018919:	3c 02                	cmp    al,0x2
c001891b:	76 34                	jbe    c0018951 <CPU::lookupAMDName(unsigned char, unsigned char)+0x10b>
c001891d:	b8 6e bb 02 c0       	mov    eax,0xc002bb6e
c0018922:	80 fa 02             	cmp    dl,0x2
c0018925:	eb 24                	jmp    c001894b <CPU::lookupAMDName(unsigned char, unsigned char)+0x105>
c0018927:	80 f9 11             	cmp    cl,0x11
c001892a:	75 13                	jne    c001893f <CPU::lookupAMDName(unsigned char, unsigned char)+0xf9>
c001892c:	b8 6e bb 02 c0       	mov    eax,0xc002bb6e
c0018931:	80 fa 03             	cmp    dl,0x3
c0018934:	0f 85 9b 00 00 00    	jne    c00189d5 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001893a:	e9 91 00 00 00       	jmp    c00189d0 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c001893f:	80 f9 12             	cmp    cl,0x12
c0018942:	75 14                	jne    c0018958 <CPU::lookupAMDName(unsigned char, unsigned char)+0x112>
c0018944:	b8 6e bb 02 c0       	mov    eax,0xc002bb6e
c0018949:	fe ca                	dec    dl
c001894b:	0f 85 84 00 00 00    	jne    c00189d5 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018951:	b8 80 db 02 c0       	mov    eax,0xc002db80
c0018956:	eb 7d                	jmp    c00189d5 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018958:	80 f9 14             	cmp    cl,0x14
c001895b:	75 12                	jne    c001896f <CPU::lookupAMDName(unsigned char, unsigned char)+0x129>
c001895d:	4a                   	dec    edx
c001895e:	b8 6e bb 02 c0       	mov    eax,0xc002bb6e
c0018963:	80 fa 01             	cmp    dl,0x1
c0018966:	77 6d                	ja     c00189d5 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018968:	b8 90 db 02 c0       	mov    eax,0xc002db90
c001896d:	eb 66                	jmp    c00189d5 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001896f:	80 f9 15             	cmp    cl,0x15
c0018972:	75 31                	jne    c00189a5 <CPU::lookupAMDName(unsigned char, unsigned char)+0x15f>
c0018974:	b8 a0 db 02 c0       	mov    eax,0xc002dba0
c0018979:	80 fa 01             	cmp    dl,0x1
c001897c:	74 57                	je     c00189d5 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001897e:	b8 6e bb 02 c0       	mov    eax,0xc002bb6e
c0018983:	80 fa 13             	cmp    dl,0x13
c0018986:	76 0c                	jbe    c0018994 <CPU::lookupAMDName(unsigned char, unsigned char)+0x14e>
c0018988:	80 fa 30             	cmp    dl,0x30
c001898b:	75 48                	jne    c00189d5 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001898d:	b8 c0 db 02 c0       	mov    eax,0xc002dbc0
c0018992:	eb 41                	jmp    c00189d5 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018994:	b9 04 00 09 00       	mov    ecx,0x90004
c0018999:	0f a3 d1             	bt     ecx,edx
c001899c:	73 37                	jae    c00189d5 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001899e:	b8 b0 db 02 c0       	mov    eax,0xc002dbb0
c00189a3:	eb 30                	jmp    c00189d5 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00189a5:	b8 6e bb 02 c0       	mov    eax,0xc002bb6e
c00189aa:	80 f9 16             	cmp    cl,0x16
c00189ad:	75 26                	jne    c00189d5 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00189af:	b8 d0 db 02 c0       	mov    eax,0xc002dbd0
c00189b4:	84 d2                	test   dl,dl
c00189b6:	74 1d                	je     c00189d5 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00189b8:	b8 6e bb 02 c0       	mov    eax,0xc002bb6e
c00189bd:	80 fa 30             	cmp    dl,0x30
c00189c0:	75 13                	jne    c00189d5 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00189c2:	b8 e0 db 02 c0       	mov    eax,0xc002dbe0
c00189c7:	eb 0c                	jmp    c00189d5 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00189c9:	b8 00 db 02 c0       	mov    eax,0xc002db00
c00189ce:	eb 05                	jmp    c00189d5 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00189d0:	b8 70 db 02 c0       	mov    eax,0xc002db70
c00189d5:	5b                   	pop    ebx
c00189d6:	5e                   	pop    esi
c00189d7:	5f                   	pop    edi
c00189d8:	5d                   	pop    ebp
c00189d9:	c3                   	ret    

c00189da <CPU::lookupIntelName(unsigned char, unsigned char)>:
c00189da:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00189de:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00189e2:	80 f9 04             	cmp    cl,0x4
c00189e5:	75 6b                	jne    c0018a52 <CPU::lookupIntelName(unsigned char, unsigned char)+0x78>
c00189e7:	b8 60 d9 02 c0       	mov    eax,0xc002d960
c00189ec:	80 fa 01             	cmp    dl,0x1
c00189ef:	0f 86 92 02 00 00    	jbe    c0018c87 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00189f5:	b8 70 d9 02 c0       	mov    eax,0xc002d970
c00189fa:	80 fa 02             	cmp    dl,0x2
c00189fd:	0f 84 84 02 00 00    	je     c0018c87 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a03:	b8 80 d9 02 c0       	mov    eax,0xc002d980
c0018a08:	80 fa 03             	cmp    dl,0x3
c0018a0b:	0f 84 76 02 00 00    	je     c0018c87 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a11:	b8 90 d9 02 c0       	mov    eax,0xc002d990
c0018a16:	80 fa 04             	cmp    dl,0x4
c0018a19:	0f 84 68 02 00 00    	je     c0018c87 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a1f:	b8 a0 d9 02 c0       	mov    eax,0xc002d9a0
c0018a24:	80 fa 05             	cmp    dl,0x5
c0018a27:	0f 84 5a 02 00 00    	je     c0018c87 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a2d:	b8 80 d9 02 c0       	mov    eax,0xc002d980
c0018a32:	80 fa 07             	cmp    dl,0x7
c0018a35:	0f 84 4c 02 00 00    	je     c0018c87 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a3b:	83 ea 08             	sub    edx,0x8
c0018a3e:	b8 6e bb 02 c0       	mov    eax,0xc002bb6e
c0018a43:	80 fa 01             	cmp    dl,0x1
c0018a46:	0f 87 3b 02 00 00    	ja     c0018c87 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a4c:	b8 b0 d9 02 c0       	mov    eax,0xc002d9b0
c0018a51:	c3                   	ret    
c0018a52:	80 f9 05             	cmp    cl,0x5
c0018a55:	75 45                	jne    c0018a9c <CPU::lookupIntelName(unsigned char, unsigned char)+0xc2>
c0018a57:	8d 4a ff             	lea    ecx,[edx-0x1]
c0018a5a:	b8 c0 d9 02 c0       	mov    eax,0xc002d9c0
c0018a5f:	80 f9 02             	cmp    cl,0x2
c0018a62:	0f 86 1f 02 00 00    	jbe    c0018c87 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a68:	80 fa 04             	cmp    dl,0x4
c0018a6b:	0f 84 f3 01 00 00    	je     c0018c64 <CPU::lookupIntelName(unsigned char, unsigned char)+0x28a>
c0018a71:	80 fa 07             	cmp    dl,0x7
c0018a74:	0f 84 0d 02 00 00    	je     c0018c87 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a7a:	b8 d0 d9 02 c0       	mov    eax,0xc002d9d0
c0018a7f:	80 fa 08             	cmp    dl,0x8
c0018a82:	0f 84 ff 01 00 00    	je     c0018c87 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a88:	b8 6e bb 02 c0       	mov    eax,0xc002bb6e
c0018a8d:	80 fa 09             	cmp    dl,0x9
c0018a90:	0f 85 f1 01 00 00    	jne    c0018c87 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a96:	b8 e0 d9 02 c0       	mov    eax,0xc002d9e0
c0018a9b:	c3                   	ret    
c0018a9c:	80 f9 06             	cmp    cl,0x6
c0018a9f:	0f 85 85 01 00 00    	jne    c0018c2a <CPU::lookupIntelName(unsigned char, unsigned char)+0x250>
c0018aa5:	b8 f0 d9 02 c0       	mov    eax,0xc002d9f0
c0018aaa:	80 fa 01             	cmp    dl,0x1
c0018aad:	0f 84 d4 01 00 00    	je     c0018c87 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018ab3:	8d 42 fb             	lea    eax,[edx-0x5]
c0018ab6:	3c 01                	cmp    al,0x1
c0018ab8:	0f 86 ac 01 00 00    	jbe    c0018c6a <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c0018abe:	80 fa 03             	cmp    dl,0x3
c0018ac1:	0f 84 a3 01 00 00    	je     c0018c6a <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c0018ac7:	8d 4a f9             	lea    ecx,[edx-0x7]
c0018aca:	b8 10 da 02 c0       	mov    eax,0xc002da10
c0018acf:	80 f9 01             	cmp    cl,0x1
c0018ad2:	0f 86 af 01 00 00    	jbe    c0018c87 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018ad8:	80 fa 09             	cmp    dl,0x9
c0018adb:	0f 84 8f 01 00 00    	je     c0018c70 <CPU::lookupIntelName(unsigned char, unsigned char)+0x296>
c0018ae1:	8d 4a f6             	lea    ecx,[edx-0xa]
c0018ae4:	80 f9 01             	cmp    cl,0x1
c0018ae7:	0f 86 9a 01 00 00    	jbe    c0018c87 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018aed:	b8 20 da 02 c0       	mov    eax,0xc002da20
c0018af2:	80 fa 0d             	cmp    dl,0xd
c0018af5:	0f 84 8c 01 00 00    	je     c0018c87 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018afb:	b8 30 da 02 c0       	mov    eax,0xc002da30
c0018b00:	80 fa 0e             	cmp    dl,0xe
c0018b03:	0f 84 7e 01 00 00    	je     c0018c87 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b09:	b8 40 da 02 c0       	mov    eax,0xc002da40
c0018b0e:	80 fa 0f             	cmp    dl,0xf
c0018b11:	0f 84 70 01 00 00    	je     c0018c87 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b17:	b8 20 da 02 c0       	mov    eax,0xc002da20
c0018b1c:	80 fa 15             	cmp    dl,0x15
c0018b1f:	0f 84 62 01 00 00    	je     c0018c87 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b25:	8d 4a ea             	lea    ecx,[edx-0x16]
c0018b28:	b8 40 da 02 c0       	mov    eax,0xc002da40
c0018b2d:	80 f9 01             	cmp    cl,0x1
c0018b30:	0f 86 51 01 00 00    	jbe    c0018c87 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b36:	80 fa 1a             	cmp    dl,0x1a
c0018b39:	0f 84 37 01 00 00    	je     c0018c76 <CPU::lookupIntelName(unsigned char, unsigned char)+0x29c>
c0018b3f:	80 fa 1c             	cmp    dl,0x1c
c0018b42:	0f 84 34 01 00 00    	je     c0018c7c <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a2>
c0018b48:	80 fa 1d             	cmp    dl,0x1d
c0018b4b:	0f 84 36 01 00 00    	je     c0018c87 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b51:	b8 70 da 02 c0       	mov    eax,0xc002da70
c0018b56:	80 fa 25             	cmp    dl,0x25
c0018b59:	0f 84 28 01 00 00    	je     c0018c87 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b5f:	8d 4a da             	lea    ecx,[edx-0x26]
c0018b62:	b8 60 da 02 c0       	mov    eax,0xc002da60
c0018b67:	80 f9 01             	cmp    cl,0x1
c0018b6a:	0f 86 17 01 00 00    	jbe    c0018c87 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b70:	b8 80 da 02 c0       	mov    eax,0xc002da80
c0018b75:	80 fa 2a             	cmp    dl,0x2a
c0018b78:	0f 84 09 01 00 00    	je     c0018c87 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b7e:	b8 70 da 02 c0       	mov    eax,0xc002da70
c0018b83:	80 fa 2c             	cmp    dl,0x2c
c0018b86:	0f 84 fb 00 00 00    	je     c0018c87 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b8c:	b8 80 da 02 c0       	mov    eax,0xc002da80
c0018b91:	80 fa 2d             	cmp    dl,0x2d
c0018b94:	0f 84 ed 00 00 00    	je     c0018c87 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b9a:	b8 50 da 02 c0       	mov    eax,0xc002da50
c0018b9f:	80 fa 2e             	cmp    dl,0x2e
c0018ba2:	0f 84 df 00 00 00    	je     c0018c87 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018ba8:	b8 70 da 02 c0       	mov    eax,0xc002da70
c0018bad:	80 fa 2f             	cmp    dl,0x2f
c0018bb0:	0f 84 d1 00 00 00    	je     c0018c87 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018bb6:	8d 4a cb             	lea    ecx,[edx-0x35]
c0018bb9:	b8 60 da 02 c0       	mov    eax,0xc002da60
c0018bbe:	80 f9 01             	cmp    cl,0x1
c0018bc1:	0f 86 c0 00 00 00    	jbe    c0018c87 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018bc7:	b8 90 da 02 c0       	mov    eax,0xc002da90
c0018bcc:	80 fa 37             	cmp    dl,0x37
c0018bcf:	0f 84 b2 00 00 00    	je     c0018c87 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018bd5:	b8 a0 da 02 c0       	mov    eax,0xc002daa0
c0018bda:	80 fa 3a             	cmp    dl,0x3a
c0018bdd:	0f 84 a4 00 00 00    	je     c0018c87 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018be3:	b8 b0 da 02 c0       	mov    eax,0xc002dab0
c0018be8:	80 fa 3c             	cmp    dl,0x3c
c0018beb:	0f 84 96 00 00 00    	je     c0018c87 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018bf1:	b8 c0 da 02 c0       	mov    eax,0xc002dac0
c0018bf6:	80 fa 3d             	cmp    dl,0x3d
c0018bf9:	0f 84 88 00 00 00    	je     c0018c87 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018bff:	b8 a0 da 02 c0       	mov    eax,0xc002daa0
c0018c04:	80 fa 3e             	cmp    dl,0x3e
c0018c07:	74 7e                	je     c0018c87 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018c09:	8d 42 bb             	lea    eax,[edx-0x45]
c0018c0c:	3c 01                	cmp    al,0x1
c0018c0e:	76 72                	jbe    c0018c82 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c0018c10:	80 fa 3f             	cmp    dl,0x3f
c0018c13:	74 6d                	je     c0018c82 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c0018c15:	80 fa 4a             	cmp    dl,0x4a
c0018c18:	74 0a                	je     c0018c24 <CPU::lookupIntelName(unsigned char, unsigned char)+0x24a>
c0018c1a:	b8 6e bb 02 c0       	mov    eax,0xc002bb6e
c0018c1f:	80 fa 4d             	cmp    dl,0x4d
c0018c22:	75 63                	jne    c0018c87 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018c24:	b8 90 da 02 c0       	mov    eax,0xc002da90
c0018c29:	c3                   	ret    
c0018c2a:	b8 6e bb 02 c0       	mov    eax,0xc002bb6e
c0018c2f:	80 f9 0b             	cmp    cl,0xb
c0018c32:	75 0a                	jne    c0018c3e <CPU::lookupIntelName(unsigned char, unsigned char)+0x264>
c0018c34:	fe ca                	dec    dl
c0018c36:	75 4f                	jne    c0018c87 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018c38:	b8 d0 da 02 c0       	mov    eax,0xc002dad0
c0018c3d:	c3                   	ret    
c0018c3e:	80 f9 0f             	cmp    cl,0xf
c0018c41:	75 44                	jne    c0018c87 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018c43:	b8 e0 da 02 c0       	mov    eax,0xc002dae0
c0018c48:	80 fa 02             	cmp    dl,0x2
c0018c4b:	76 3a                	jbe    c0018c87 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018c4d:	8d 42 fd             	lea    eax,[edx-0x3]
c0018c50:	3c 01                	cmp    al,0x1
c0018c52:	76 0a                	jbe    c0018c5e <CPU::lookupIntelName(unsigned char, unsigned char)+0x284>
c0018c54:	b8 6e bb 02 c0       	mov    eax,0xc002bb6e
c0018c59:	80 fa 06             	cmp    dl,0x6
c0018c5c:	75 29                	jne    c0018c87 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018c5e:	b8 f0 da 02 c0       	mov    eax,0xc002daf0
c0018c63:	c3                   	ret    
c0018c64:	b8 d0 d9 02 c0       	mov    eax,0xc002d9d0
c0018c69:	c3                   	ret    
c0018c6a:	b8 00 da 02 c0       	mov    eax,0xc002da00
c0018c6f:	c3                   	ret    
c0018c70:	b8 20 da 02 c0       	mov    eax,0xc002da20
c0018c75:	c3                   	ret    
c0018c76:	b8 50 da 02 c0       	mov    eax,0xc002da50
c0018c7b:	c3                   	ret    
c0018c7c:	b8 60 da 02 c0       	mov    eax,0xc002da60
c0018c81:	c3                   	ret    
c0018c82:	b8 b0 da 02 c0       	mov    eax,0xc002dab0
c0018c87:	c3                   	ret    

c0018c88 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c0018c88:	60                   	pusha  
c0018c89:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0018c8d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018c91:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018c95:	9c                   	pushf  
c0018c96:	fa                   	cli    
c0018c97:	0f 09                	wbinvd 
c0018c99:	0f 30                	wrmsr  
c0018c9b:	9d                   	popf   
c0018c9c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018ca0:	89 02                	mov    DWORD PTR [edx],eax
c0018ca2:	61                   	popa   
c0018ca3:	c3                   	ret    

c0018ca4 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c0018ca4:	60                   	pusha  
c0018ca5:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0018ca9:	9c                   	pushf  
c0018caa:	fa                   	cli    
c0018cab:	0f 09                	wbinvd 
c0018cad:	31 c0                	xor    eax,eax
c0018caf:	31 d2                	xor    edx,edx
c0018cb1:	0f 32                	rdmsr  
c0018cb3:	9d                   	popf   
c0018cb4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018cb8:	89 02                	mov    DWORD PTR [edx],eax
c0018cba:	61                   	popa   
c0018cbb:	c3                   	ret    

c0018cbc <CPU::AMD_K6_writeback(int, int, int)>:
c0018cbc:	56                   	push   esi
c0018cbd:	53                   	push   ebx
c0018cbe:	83 ec 10             	sub    esp,0x10
c0018cc1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018cc5:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c0018cca:	75 5d                	jne    c0018d29 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0018ccc:	83 f8 08             	cmp    eax,0x8
c0018ccf:	75 09                	jne    c0018cda <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c0018cd1:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c0018cd6:	7e 13                	jle    c0018ceb <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0018cd8:	eb 30                	jmp    c0018d0a <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0018cda:	83 f8 06             	cmp    eax,0x6
c0018cdd:	7c 4a                	jl     c0018d29 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0018cdf:	83 f8 07             	cmp    eax,0x7
c0018ce2:	7e 07                	jle    c0018ceb <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0018ce4:	83 f8 09             	cmp    eax,0x9
c0018ce7:	74 21                	je     c0018d0a <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0018ce9:	eb 3e                	jmp    c0018d29 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0018ceb:	89 e6                	mov    esi,esp
c0018ced:	8b 1d 24 e7 02 c0    	mov    ebx,DWORD PTR ds:0xc002e724
c0018cf3:	56                   	push   esi
c0018cf4:	c1 eb 15             	shr    ebx,0x15
c0018cf7:	68 82 00 00 c0       	push   0xc0000082
c0018cfc:	83 e3 7e             	and    ebx,0x7e
c0018cff:	e8 a0 ff ff ff       	call   c0018ca4 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0018d04:	56                   	push   esi
c0018d05:	6a 00                	push   0x0
c0018d07:	53                   	push   ebx
c0018d08:	eb 12                	jmp    c0018d1c <CPU::AMD_K6_writeback(int, int, int)+0x60>
c0018d0a:	89 e3                	mov    ebx,esp
c0018d0c:	53                   	push   ebx
c0018d0d:	68 82 00 00 c0       	push   0xc0000082
c0018d12:	e8 8d ff ff ff       	call   c0018ca4 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0018d17:	53                   	push   ebx
c0018d18:	6a 00                	push   0x0
c0018d1a:	6a 00                	push   0x0
c0018d1c:	68 82 00 00 c0       	push   0xc0000082
c0018d21:	e8 62 ff ff ff       	call   c0018c88 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c0018d26:	83 c4 18             	add    esp,0x18
c0018d29:	83 c4 10             	add    esp,0x10
c0018d2c:	5b                   	pop    ebx
c0018d2d:	5e                   	pop    esi
c0018d2e:	c3                   	ret    
c0018d2f:	90                   	nop

c0018d30 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c0018d30:	55                   	push   ebp
c0018d31:	57                   	push   edi
c0018d32:	56                   	push   esi
c0018d33:	53                   	push   ebx
c0018d34:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018d38:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0018d3c:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0018d40:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0018d44:	39 05 00 dc 02 c0    	cmp    DWORD PTR ds:0xc002dc00,eax
c0018d4a:	75 23                	jne    c0018d6f <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c0018d4c:	a1 2c 12 03 c0       	mov    eax,ds:0xc003122c
c0018d51:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0018d55:	89 06                	mov    DWORD PTR [esi],eax
c0018d57:	a1 28 12 03 c0       	mov    eax,ds:0xc0031228
c0018d5c:	89 07                	mov    DWORD PTR [edi],eax
c0018d5e:	a1 24 12 03 c0       	mov    eax,ds:0xc0031224
c0018d63:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0018d66:	a1 20 12 03 c0       	mov    eax,ds:0xc0031220
c0018d6b:	89 02                	mov    DWORD PTR [edx],eax
c0018d6d:	eb 3f                	jmp    c0018dae <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c0018d6f:	31 c9                	xor    ecx,ecx
c0018d71:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018d75:	0f a2                	cpuid  
c0018d77:	89 06                	mov    DWORD PTR [esi],eax
c0018d79:	89 1f                	mov    DWORD PTR [edi],ebx
c0018d7b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018d7f:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c0018d82:	89 10                	mov    DWORD PTR [eax],edx
c0018d84:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018d88:	a3 00 dc 02 c0       	mov    ds:0xc002dc00,eax
c0018d8d:	8b 06                	mov    eax,DWORD PTR [esi]
c0018d8f:	a3 2c 12 03 c0       	mov    ds:0xc003122c,eax
c0018d94:	8b 07                	mov    eax,DWORD PTR [edi]
c0018d96:	a3 28 12 03 c0       	mov    ds:0xc0031228,eax
c0018d9b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0018d9e:	a3 24 12 03 c0       	mov    ds:0xc0031224,eax
c0018da3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018da7:	8b 00                	mov    eax,DWORD PTR [eax]
c0018da9:	a3 20 12 03 c0       	mov    ds:0xc0031220,eax
c0018dae:	5b                   	pop    ebx
c0018daf:	5e                   	pop    esi
c0018db0:	5f                   	pop    edi
c0018db1:	5d                   	pop    ebp
c0018db2:	c3                   	ret    
c0018db3:	90                   	nop

c0018db4 <CPU::cpuidCheckEDX(unsigned int)>:
c0018db4:	83 ec 10             	sub    esp,0x10
c0018db7:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018dbb:	50                   	push   eax
c0018dbc:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018dc0:	50                   	push   eax
c0018dc1:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018dc5:	50                   	push   eax
c0018dc6:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018dca:	50                   	push   eax
c0018dcb:	6a 01                	push   0x1
c0018dcd:	e8 5e ff ff ff       	call   c0018d30 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018dd2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018dd6:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c0018dda:	0f 95 c0             	setne  al
c0018ddd:	83 c4 24             	add    esp,0x24
c0018de0:	c3                   	ret    
c0018de1:	90                   	nop

c0018de2 <CPU::cpuidCheckECX(unsigned int)>:
c0018de2:	83 ec 10             	sub    esp,0x10
c0018de5:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018de9:	50                   	push   eax
c0018dea:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018dee:	50                   	push   eax
c0018def:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018df3:	50                   	push   eax
c0018df4:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018df8:	50                   	push   eax
c0018df9:	6a 01                	push   0x1
c0018dfb:	e8 30 ff ff ff       	call   c0018d30 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018e00:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018e04:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0018e08:	0f 95 c0             	setne  al
c0018e0b:	83 c4 24             	add    esp,0x24
c0018e0e:	c3                   	ret    
c0018e0f:	90                   	nop

c0018e10 <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c0018e10:	83 ec 10             	sub    esp,0x10
c0018e13:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018e17:	50                   	push   eax
c0018e18:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018e1c:	50                   	push   eax
c0018e1d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018e21:	50                   	push   eax
c0018e22:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018e26:	50                   	push   eax
c0018e27:	6a 07                	push   0x7
c0018e29:	e8 02 ff ff ff       	call   c0018d30 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018e2e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018e32:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c0018e36:	0f 95 c0             	setne  al
c0018e39:	83 c4 24             	add    esp,0x24
c0018e3c:	c3                   	ret    
c0018e3d:	90                   	nop

c0018e3e <CPU::cpuidCheckExtendedECX(unsigned int)>:
c0018e3e:	83 ec 10             	sub    esp,0x10
c0018e41:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018e45:	50                   	push   eax
c0018e46:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018e4a:	50                   	push   eax
c0018e4b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018e4f:	50                   	push   eax
c0018e50:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018e54:	50                   	push   eax
c0018e55:	6a 07                	push   0x7
c0018e57:	e8 d4 fe ff ff       	call   c0018d30 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018e5c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018e60:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0018e64:	0f 95 c0             	setne  al
c0018e67:	83 c4 24             	add    esp,0x24
c0018e6a:	c3                   	ret    
c0018e6b:	90                   	nop

c0018e6c <CPU::CPU()>:
c0018e6c:	83 ec 0c             	sub    esp,0xc
c0018e6f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018e73:	83 ec 08             	sub    esp,0x8
c0018e76:	68 6e bb 02 c0       	push   0xc002bb6e
c0018e7b:	50                   	push   eax
c0018e7c:	e8 79 b7 ff ff       	call   c00145fa <Device::Device(char const*)>
c0018e81:	83 c4 10             	add    esp,0x10
c0018e84:	ba 48 bc 02 c0       	mov    edx,0xc002bc48
c0018e89:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018e8d:	89 10                	mov    DWORD PTR [eax],edx
c0018e8f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018e93:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c0018e9d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018ea1:	05 78 01 00 00       	add    eax,0x178
c0018ea6:	83 ec 0c             	sub    esp,0xc
c0018ea9:	50                   	push   eax
c0018eaa:	e8 4d 62 ff ff       	call   c000f0fc <GDT::GDT()>
c0018eaf:	83 c4 10             	add    esp,0x10
c0018eb2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018eb6:	05 7c 09 00 00       	add    eax,0x97c
c0018ebb:	83 ec 0c             	sub    esp,0xc
c0018ebe:	50                   	push   eax
c0018ebf:	e8 9a 64 ff ff       	call   c000f35e <IDT::IDT()>
c0018ec4:	83 c4 10             	add    esp,0x10
c0018ec7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018ecb:	05 7c 11 00 00       	add    eax,0x117c
c0018ed0:	83 ec 0c             	sub    esp,0xc
c0018ed3:	50                   	push   eax
c0018ed4:	e8 7b 86 ff ff       	call   c0011554 <TSS::TSS()>
c0018ed9:	83 c4 10             	add    esp,0x10
c0018edc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018ee0:	c6 80 94 11 00 00 00 	mov    BYTE PTR [eax+0x1194],0x0
c0018ee7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018eeb:	c7 80 10 01 00 00 10 00 00 00 	mov    DWORD PTR [eax+0x110],0x10
c0018ef5:	90                   	nop
c0018ef6:	83 c4 0c             	add    esp,0xc
c0018ef9:	c3                   	ret    

c0018efa <CPU::displayFeatures()>:
c0018efa:	53                   	push   ebx
c0018efb:	83 ec 10             	sub    esp,0x10
c0018efe:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0018f02:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c0018f08:	68 7c b8 02 c0       	push   0xc002b87c
c0018f0d:	e8 d1 a0 ff ff       	call   c0012fe3 <Dbg::kprintf(char const*, ...)>
c0018f12:	59                   	pop    ecx
c0018f13:	58                   	pop    eax
c0018f14:	8d 83 5f 01 00 00    	lea    eax,[ebx+0x15f]
c0018f1a:	50                   	push   eax
c0018f1b:	68 8d b8 02 c0       	push   0xc002b88d
c0018f20:	e8 be a0 ff ff       	call   c0012fe3 <Dbg::kprintf(char const*, ...)>
c0018f25:	58                   	pop    eax
c0018f26:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018f2c:	5a                   	pop    edx
c0018f2d:	c1 e8 0e             	shr    eax,0xe
c0018f30:	0f b6 c0             	movzx  eax,al
c0018f33:	50                   	push   eax
c0018f34:	68 9e b8 02 c0       	push   0xc002b89e
c0018f39:	e8 a5 a0 ff ff       	call   c0012fe3 <Dbg::kprintf(char const*, ...)>
c0018f3e:	59                   	pop    ecx
c0018f3f:	58                   	pop    eax
c0018f40:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018f46:	66 c1 e8 06          	shr    ax,0x6
c0018f4a:	0f b6 c0             	movzx  eax,al
c0018f4d:	50                   	push   eax
c0018f4e:	68 af b8 02 c0       	push   0xc002b8af
c0018f53:	e8 8b a0 ff ff       	call   c0012fe3 <Dbg::kprintf(char const*, ...)>
c0018f58:	c7 04 24 5c bd 02 c0 	mov    DWORD PTR [esp],0xc002bd5c
c0018f5f:	e8 7f a0 ff ff       	call   c0012fe3 <Dbg::kprintf(char const*, ...)>
c0018f64:	83 c4 10             	add    esp,0x10
c0018f67:	b8 2e a1 02 c0       	mov    eax,0xc002a12e
c0018f6c:	f6 83 90 11 00 00 01 	test   BYTE PTR [ebx+0x1190],0x1
c0018f73:	74 05                	je     c0018f7a <CPU::displayFeatures()+0x80>
c0018f75:	b8 2a a1 02 c0       	mov    eax,0xc002a12a
c0018f7a:	52                   	push   edx
c0018f7b:	52                   	push   edx
c0018f7c:	50                   	push   eax
c0018f7d:	68 c0 b8 02 c0       	push   0xc002b8c0
c0018f82:	e8 5c a0 ff ff       	call   c0012fe3 <Dbg::kprintf(char const*, ...)>
c0018f87:	83 c4 10             	add    esp,0x10
c0018f8a:	b8 2a a1 02 c0       	mov    eax,0xc002a12a
c0018f8f:	80 bb 90 11 00 00 00 	cmp    BYTE PTR [ebx+0x1190],0x0
c0018f96:	78 05                	js     c0018f9d <CPU::displayFeatures()+0xa3>
c0018f98:	b8 2e a1 02 c0       	mov    eax,0xc002a12e
c0018f9d:	51                   	push   ecx
c0018f9e:	51                   	push   ecx
c0018f9f:	50                   	push   eax
c0018fa0:	68 d7 b8 02 c0       	push   0xc002b8d7
c0018fa5:	e8 39 a0 ff ff       	call   c0012fe3 <Dbg::kprintf(char const*, ...)>
c0018faa:	83 c4 10             	add    esp,0x10
c0018fad:	b8 2a a1 02 c0       	mov    eax,0xc002a12a
c0018fb2:	f6 83 90 11 00 00 02 	test   BYTE PTR [ebx+0x1190],0x2
c0018fb9:	75 05                	jne    c0018fc0 <CPU::displayFeatures()+0xc6>
c0018fbb:	b8 2e a1 02 c0       	mov    eax,0xc002a12e
c0018fc0:	52                   	push   edx
c0018fc1:	52                   	push   edx
c0018fc2:	50                   	push   eax
c0018fc3:	68 ee b8 02 c0       	push   0xc002b8ee
c0018fc8:	e8 16 a0 ff ff       	call   c0012fe3 <Dbg::kprintf(char const*, ...)>
c0018fcd:	83 c4 10             	add    esp,0x10
c0018fd0:	b8 2a a1 02 c0       	mov    eax,0xc002a12a
c0018fd5:	f6 83 90 11 00 00 04 	test   BYTE PTR [ebx+0x1190],0x4
c0018fdc:	75 05                	jne    c0018fe3 <CPU::displayFeatures()+0xe9>
c0018fde:	b8 2e a1 02 c0       	mov    eax,0xc002a12e
c0018fe3:	51                   	push   ecx
c0018fe4:	51                   	push   ecx
c0018fe5:	50                   	push   eax
c0018fe6:	68 05 b9 02 c0       	push   0xc002b905
c0018feb:	e8 f3 9f ff ff       	call   c0012fe3 <Dbg::kprintf(char const*, ...)>
c0018ff0:	83 c4 10             	add    esp,0x10
c0018ff3:	b8 2a a1 02 c0       	mov    eax,0xc002a12a
c0018ff8:	f6 83 90 11 00 00 08 	test   BYTE PTR [ebx+0x1190],0x8
c0018fff:	75 05                	jne    c0019006 <CPU::displayFeatures()+0x10c>
c0019001:	b8 2e a1 02 c0       	mov    eax,0xc002a12e
c0019006:	52                   	push   edx
c0019007:	52                   	push   edx
c0019008:	50                   	push   eax
c0019009:	68 1c b9 02 c0       	push   0xc002b91c
c001900e:	e8 d0 9f ff ff       	call   c0012fe3 <Dbg::kprintf(char const*, ...)>
c0019013:	83 c4 10             	add    esp,0x10
c0019016:	b8 2a a1 02 c0       	mov    eax,0xc002a12a
c001901b:	f6 83 90 11 00 00 10 	test   BYTE PTR [ebx+0x1190],0x10
c0019022:	75 05                	jne    c0019029 <CPU::displayFeatures()+0x12f>
c0019024:	b8 2e a1 02 c0       	mov    eax,0xc002a12e
c0019029:	51                   	push   ecx
c001902a:	51                   	push   ecx
c001902b:	50                   	push   eax
c001902c:	68 33 b9 02 c0       	push   0xc002b933
c0019031:	e8 ad 9f ff ff       	call   c0012fe3 <Dbg::kprintf(char const*, ...)>
c0019036:	83 c4 10             	add    esp,0x10
c0019039:	b8 2a a1 02 c0       	mov    eax,0xc002a12a
c001903e:	f6 83 90 11 00 00 20 	test   BYTE PTR [ebx+0x1190],0x20
c0019045:	75 05                	jne    c001904c <CPU::displayFeatures()+0x152>
c0019047:	b8 2e a1 02 c0       	mov    eax,0xc002a12e
c001904c:	52                   	push   edx
c001904d:	52                   	push   edx
c001904e:	50                   	push   eax
c001904f:	68 4a b9 02 c0       	push   0xc002b94a
c0019054:	e8 8a 9f ff ff       	call   c0012fe3 <Dbg::kprintf(char const*, ...)>
c0019059:	83 c4 10             	add    esp,0x10
c001905c:	b8 2a a1 02 c0       	mov    eax,0xc002a12a
c0019061:	f6 83 90 11 00 00 40 	test   BYTE PTR [ebx+0x1190],0x40
c0019068:	75 05                	jne    c001906f <CPU::displayFeatures()+0x175>
c001906a:	b8 2e a1 02 c0       	mov    eax,0xc002a12e
c001906f:	51                   	push   ecx
c0019070:	51                   	push   ecx
c0019071:	50                   	push   eax
c0019072:	68 61 b9 02 c0       	push   0xc002b961
c0019077:	e8 67 9f ff ff       	call   c0012fe3 <Dbg::kprintf(char const*, ...)>
c001907c:	83 c4 10             	add    esp,0x10
c001907f:	b8 2a a1 02 c0       	mov    eax,0xc002a12a
c0019084:	f6 83 91 11 00 00 10 	test   BYTE PTR [ebx+0x1191],0x10
c001908b:	75 05                	jne    c0019092 <CPU::displayFeatures()+0x198>
c001908d:	b8 2e a1 02 c0       	mov    eax,0xc002a12e
c0019092:	52                   	push   edx
c0019093:	52                   	push   edx
c0019094:	50                   	push   eax
c0019095:	68 78 b9 02 c0       	push   0xc002b978
c001909a:	e8 44 9f ff ff       	call   c0012fe3 <Dbg::kprintf(char const*, ...)>
c001909f:	83 c4 10             	add    esp,0x10
c00190a2:	b8 2a a1 02 c0       	mov    eax,0xc002a12a
c00190a7:	f6 83 92 11 00 00 01 	test   BYTE PTR [ebx+0x1192],0x1
c00190ae:	75 05                	jne    c00190b5 <CPU::displayFeatures()+0x1bb>
c00190b0:	b8 2e a1 02 c0       	mov    eax,0xc002a12e
c00190b5:	51                   	push   ecx
c00190b6:	51                   	push   ecx
c00190b7:	50                   	push   eax
c00190b8:	68 8f b9 02 c0       	push   0xc002b98f
c00190bd:	e8 21 9f ff ff       	call   c0012fe3 <Dbg::kprintf(char const*, ...)>
c00190c2:	83 c4 10             	add    esp,0x10
c00190c5:	b8 2a a1 02 c0       	mov    eax,0xc002a12a
c00190ca:	f6 83 91 11 00 00 08 	test   BYTE PTR [ebx+0x1191],0x8
c00190d1:	75 05                	jne    c00190d8 <CPU::displayFeatures()+0x1de>
c00190d3:	b8 2e a1 02 c0       	mov    eax,0xc002a12e
c00190d8:	52                   	push   edx
c00190d9:	52                   	push   edx
c00190da:	50                   	push   eax
c00190db:	68 a6 b9 02 c0       	push   0xc002b9a6
c00190e0:	e8 fe 9e ff ff       	call   c0012fe3 <Dbg::kprintf(char const*, ...)>
c00190e5:	83 c4 10             	add    esp,0x10
c00190e8:	b8 2a a1 02 c0       	mov    eax,0xc002a12a
c00190ed:	f6 83 91 11 00 00 20 	test   BYTE PTR [ebx+0x1191],0x20
c00190f4:	75 05                	jne    c00190fb <CPU::displayFeatures()+0x201>
c00190f6:	b8 2e a1 02 c0       	mov    eax,0xc002a12e
c00190fb:	51                   	push   ecx
c00190fc:	51                   	push   ecx
c00190fd:	50                   	push   eax
c00190fe:	68 bd b9 02 c0       	push   0xc002b9bd
c0019103:	e8 db 9e ff ff       	call   c0012fe3 <Dbg::kprintf(char const*, ...)>
c0019108:	83 c4 10             	add    esp,0x10
c001910b:	b8 2a a1 02 c0       	mov    eax,0xc002a12a
c0019110:	f6 83 91 11 00 00 40 	test   BYTE PTR [ebx+0x1191],0x40
c0019117:	75 05                	jne    c001911e <CPU::displayFeatures()+0x224>
c0019119:	b8 2e a1 02 c0       	mov    eax,0xc002a12e
c001911e:	52                   	push   edx
c001911f:	52                   	push   edx
c0019120:	50                   	push   eax
c0019121:	68 d4 b9 02 c0       	push   0xc002b9d4
c0019126:	e8 b8 9e ff ff       	call   c0012fe3 <Dbg::kprintf(char const*, ...)>
c001912b:	83 c4 10             	add    esp,0x10
c001912e:	b8 2a a1 02 c0       	mov    eax,0xc002a12a
c0019133:	80 bb 91 11 00 00 00 	cmp    BYTE PTR [ebx+0x1191],0x0
c001913a:	78 05                	js     c0019141 <CPU::displayFeatures()+0x247>
c001913c:	b8 2e a1 02 c0       	mov    eax,0xc002a12e
c0019141:	51                   	push   ecx
c0019142:	51                   	push   ecx
c0019143:	50                   	push   eax
c0019144:	68 eb b9 02 c0       	push   0xc002b9eb
c0019149:	e8 95 9e ff ff       	call   c0012fe3 <Dbg::kprintf(char const*, ...)>
c001914e:	83 c4 10             	add    esp,0x10
c0019151:	b8 2a a1 02 c0       	mov    eax,0xc002a12a
c0019156:	f6 83 92 11 00 00 04 	test   BYTE PTR [ebx+0x1192],0x4
c001915d:	75 05                	jne    c0019164 <CPU::displayFeatures()+0x26a>
c001915f:	b8 2e a1 02 c0       	mov    eax,0xc002a12e
c0019164:	52                   	push   edx
c0019165:	52                   	push   edx
c0019166:	50                   	push   eax
c0019167:	68 02 ba 02 c0       	push   0xc002ba02
c001916c:	e8 72 9e ff ff       	call   c0012fe3 <Dbg::kprintf(char const*, ...)>
c0019171:	83 c4 18             	add    esp,0x18
c0019174:	5b                   	pop    ebx
c0019175:	c3                   	ret    

c0019176 <CPU::detectFeatures()>:
c0019176:	55                   	push   ebp
c0019177:	57                   	push   edi
c0019178:	56                   	push   esi
c0019179:	53                   	push   ebx
c001917a:	83 ec 50             	sub    esp,0x50
c001917d:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c0019181:	81 a3 90 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x1190],0xfff80700
c001918b:	c6 83 94 11 00 00 01 	mov    BYTE PTR [ebx+0x1194],0x1
c0019192:	8d bb 5f 01 00 00    	lea    edi,[ebx+0x15f]
c0019198:	6a 0d                	push   0xd
c001919a:	6a 00                	push   0x0
c001919c:	57                   	push   edi
c001919d:	e8 d6 75 fe ff       	call   c0000778 <memset>
c00191a2:	83 c4 10             	add    esp,0x10
c00191a5:	a1 e8 e6 02 c0       	mov    eax,ds:0xc002e6e8
c00191aa:	f6 80 e8 01 00 00 02 	test   BYTE PTR [eax+0x1e8],0x2
c00191b1:	0f 84 20 09 00 00    	je     c0019ad7 <CPU::detectFeatures()+0x961>
c00191b7:	83 ec 0c             	sub    esp,0xc
c00191ba:	6a 10                	push   0x10
c00191bc:	e8 f3 fb ff ff       	call   c0018db4 <CPU::cpuidCheckEDX(unsigned int)>
c00191c1:	83 e0 01             	and    eax,0x1
c00191c4:	8d 14 00             	lea    edx,[eax+eax*1]
c00191c7:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00191cd:	83 e0 fd             	and    eax,0xfffffffd
c00191d0:	09 d0                	or     eax,edx
c00191d2:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00191d8:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c00191df:	e8 d0 fb ff ff       	call   c0018db4 <CPU::cpuidCheckEDX(unsigned int)>
c00191e4:	83 e0 01             	and    eax,0x1
c00191e7:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00191ee:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00191f4:	83 e0 fb             	and    eax,0xfffffffb
c00191f7:	09 d0                	or     eax,edx
c00191f9:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00191ff:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0019206:	e8 a9 fb ff ff       	call   c0018db4 <CPU::cpuidCheckEDX(unsigned int)>
c001920b:	83 e0 01             	and    eax,0x1
c001920e:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0019215:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c001921b:	83 e0 f7             	and    eax,0xfffffff7
c001921e:	09 d0                	or     eax,edx
c0019220:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0019226:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c001922d:	e8 82 fb ff ff       	call   c0018db4 <CPU::cpuidCheckEDX(unsigned int)>
c0019232:	83 e0 01             	and    eax,0x1
c0019235:	c1 e0 04             	shl    eax,0x4
c0019238:	88 c2                	mov    dl,al
c001923a:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0019240:	83 e0 ef             	and    eax,0xffffffef
c0019243:	09 d0                	or     eax,edx
c0019245:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c001924b:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c0019252:	e8 5d fb ff ff       	call   c0018db4 <CPU::cpuidCheckEDX(unsigned int)>
c0019257:	83 e0 01             	and    eax,0x1
c001925a:	c1 e0 05             	shl    eax,0x5
c001925d:	88 c2                	mov    dl,al
c001925f:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0019265:	83 e0 df             	and    eax,0xffffffdf
c0019268:	09 d0                	or     eax,edx
c001926a:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0019270:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0019277:	e8 38 fb ff ff       	call   c0018db4 <CPU::cpuidCheckEDX(unsigned int)>
c001927c:	83 e0 01             	and    eax,0x1
c001927f:	8d 14 00             	lea    edx,[eax+eax*1]
c0019282:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0019288:	83 e0 fd             	and    eax,0xfffffffd
c001928b:	09 d0                	or     eax,edx
c001928d:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0019293:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c001929a:	e8 15 fb ff ff       	call   c0018db4 <CPU::cpuidCheckEDX(unsigned int)>
c001929f:	83 e0 01             	and    eax,0x1
c00192a2:	c1 e0 06             	shl    eax,0x6
c00192a5:	88 c2                	mov    dl,al
c00192a7:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c00192ad:	83 e0 bf             	and    eax,0xffffffbf
c00192b0:	09 d0                	or     eax,edx
c00192b2:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c00192b8:	58                   	pop    eax
c00192b9:	8d 74 24 28          	lea    esi,[esp+0x28]
c00192bd:	56                   	push   esi
c00192be:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c00192c2:	55                   	push   ebp
c00192c3:	8d 44 24 28          	lea    eax,[esp+0x28]
c00192c7:	50                   	push   eax
c00192c8:	8d 54 24 28          	lea    edx,[esp+0x28]
c00192cc:	52                   	push   edx
c00192cd:	6a 00                	push   0x0
c00192cf:	e8 5c fa ff ff       	call   c0018d30 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00192d4:	83 c4 1c             	add    esp,0x1c
c00192d7:	6a 04                	push   0x4
c00192d9:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00192dd:	50                   	push   eax
c00192de:	57                   	push   edi
c00192df:	e8 60 74 fe ff       	call   c0000744 <memcpy>
c00192e4:	83 c4 0c             	add    esp,0xc
c00192e7:	8d 83 63 01 00 00    	lea    eax,[ebx+0x163]
c00192ed:	6a 04                	push   0x4
c00192ef:	56                   	push   esi
c00192f0:	50                   	push   eax
c00192f1:	e8 4e 74 fe ff       	call   c0000744 <memcpy>
c00192f6:	83 c4 0c             	add    esp,0xc
c00192f9:	8d 83 67 01 00 00    	lea    eax,[ebx+0x167]
c00192ff:	6a 04                	push   0x4
c0019301:	55                   	push   ebp
c0019302:	50                   	push   eax
c0019303:	e8 3c 74 fe ff       	call   c0000744 <memcpy>
c0019308:	58                   	pop    eax
c0019309:	5a                   	pop    edx
c001930a:	68 19 ba 02 c0       	push   0xc002ba19
c001930f:	57                   	push   edi
c0019310:	e8 ab 75 fe ff       	call   c00008c0 <strcmp>
c0019315:	83 c4 10             	add    esp,0x10
c0019318:	85 c0                	test   eax,eax
c001931a:	75 0f                	jne    c001932b <CPU::detectFeatures()+0x1b5>
c001931c:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c0019326:	e9 22 02 00 00       	jmp    c001954d <CPU::detectFeatures()+0x3d7>
c001932b:	50                   	push   eax
c001932c:	50                   	push   eax
c001932d:	68 26 ba 02 c0       	push   0xc002ba26
c0019332:	57                   	push   edi
c0019333:	e8 88 75 fe ff       	call   c00008c0 <strcmp>
c0019338:	83 c4 10             	add    esp,0x10
c001933b:	85 c0                	test   eax,eax
c001933d:	74 dd                	je     c001931c <CPU::detectFeatures()+0x1a6>
c001933f:	51                   	push   ecx
c0019340:	51                   	push   ecx
c0019341:	68 33 ba 02 c0       	push   0xc002ba33
c0019346:	57                   	push   edi
c0019347:	e8 74 75 fe ff       	call   c00008c0 <strcmp>
c001934c:	83 c4 10             	add    esp,0x10
c001934f:	85 c0                	test   eax,eax
c0019351:	74 2a                	je     c001937d <CPU::detectFeatures()+0x207>
c0019353:	52                   	push   edx
c0019354:	52                   	push   edx
c0019355:	68 40 ba 02 c0       	push   0xc002ba40
c001935a:	57                   	push   edi
c001935b:	e8 60 75 fe ff       	call   c00008c0 <strcmp>
c0019360:	83 c4 10             	add    esp,0x10
c0019363:	85 c0                	test   eax,eax
c0019365:	74 16                	je     c001937d <CPU::detectFeatures()+0x207>
c0019367:	50                   	push   eax
c0019368:	50                   	push   eax
c0019369:	68 4d ba 02 c0       	push   0xc002ba4d
c001936e:	57                   	push   edi
c001936f:	e8 4c 75 fe ff       	call   c00008c0 <strcmp>
c0019374:	83 c4 10             	add    esp,0x10
c0019377:	85 c0                	test   eax,eax
c0019379:	74 48                	je     c00193c3 <CPU::detectFeatures()+0x24d>
c001937b:	eb 0f                	jmp    c001938c <CPU::detectFeatures()+0x216>
c001937d:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c0019387:	e9 c1 01 00 00       	jmp    c001954d <CPU::detectFeatures()+0x3d7>
c001938c:	50                   	push   eax
c001938d:	50                   	push   eax
c001938e:	68 5a ba 02 c0       	push   0xc002ba5a
c0019393:	57                   	push   edi
c0019394:	e8 27 75 fe ff       	call   c00008c0 <strcmp>
c0019399:	83 c4 10             	add    esp,0x10
c001939c:	85 c0                	test   eax,eax
c001939e:	74 23                	je     c00193c3 <CPU::detectFeatures()+0x24d>
c00193a0:	50                   	push   eax
c00193a1:	50                   	push   eax
c00193a2:	68 67 ba 02 c0       	push   0xc002ba67
c00193a7:	57                   	push   edi
c00193a8:	e8 13 75 fe ff       	call   c00008c0 <strcmp>
c00193ad:	83 c4 10             	add    esp,0x10
c00193b0:	85 c0                	test   eax,eax
c00193b2:	75 1e                	jne    c00193d2 <CPU::detectFeatures()+0x25c>
c00193b4:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c00193be:	e9 8a 01 00 00       	jmp    c001954d <CPU::detectFeatures()+0x3d7>
c00193c3:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c00193cd:	e9 7b 01 00 00       	jmp    c001954d <CPU::detectFeatures()+0x3d7>
c00193d2:	50                   	push   eax
c00193d3:	50                   	push   eax
c00193d4:	68 74 ba 02 c0       	push   0xc002ba74
c00193d9:	57                   	push   edi
c00193da:	e8 e1 74 fe ff       	call   c00008c0 <strcmp>
c00193df:	83 c4 10             	add    esp,0x10
c00193e2:	85 c0                	test   eax,eax
c00193e4:	75 0f                	jne    c00193f5 <CPU::detectFeatures()+0x27f>
c00193e6:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c00193f0:	e9 58 01 00 00       	jmp    c001954d <CPU::detectFeatures()+0x3d7>
c00193f5:	50                   	push   eax
c00193f6:	50                   	push   eax
c00193f7:	68 33 ba 02 c0       	push   0xc002ba33
c00193fc:	57                   	push   edi
c00193fd:	e8 be 74 fe ff       	call   c00008c0 <strcmp>
c0019402:	83 c4 10             	add    esp,0x10
c0019405:	85 c0                	test   eax,eax
c0019407:	75 0f                	jne    c0019418 <CPU::detectFeatures()+0x2a2>
c0019409:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c0019413:	e9 35 01 00 00       	jmp    c001954d <CPU::detectFeatures()+0x3d7>
c0019418:	50                   	push   eax
c0019419:	50                   	push   eax
c001941a:	68 81 ba 02 c0       	push   0xc002ba81
c001941f:	57                   	push   edi
c0019420:	e8 9b 74 fe ff       	call   c00008c0 <strcmp>
c0019425:	83 c4 10             	add    esp,0x10
c0019428:	85 c0                	test   eax,eax
c001942a:	75 0f                	jne    c001943b <CPU::detectFeatures()+0x2c5>
c001942c:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c0019436:	e9 12 01 00 00       	jmp    c001954d <CPU::detectFeatures()+0x3d7>
c001943b:	51                   	push   ecx
c001943c:	51                   	push   ecx
c001943d:	68 8e ba 02 c0       	push   0xc002ba8e
c0019442:	57                   	push   edi
c0019443:	e8 78 74 fe ff       	call   c00008c0 <strcmp>
c0019448:	83 c4 10             	add    esp,0x10
c001944b:	85 c0                	test   eax,eax
c001944d:	75 0f                	jne    c001945e <CPU::detectFeatures()+0x2e8>
c001944f:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c0019459:	e9 ef 00 00 00       	jmp    c001954d <CPU::detectFeatures()+0x3d7>
c001945e:	52                   	push   edx
c001945f:	52                   	push   edx
c0019460:	68 9b ba 02 c0       	push   0xc002ba9b
c0019465:	57                   	push   edi
c0019466:	e8 55 74 fe ff       	call   c00008c0 <strcmp>
c001946b:	83 c4 10             	add    esp,0x10
c001946e:	85 c0                	test   eax,eax
c0019470:	75 0f                	jne    c0019481 <CPU::detectFeatures()+0x30b>
c0019472:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c001947c:	e9 cc 00 00 00       	jmp    c001954d <CPU::detectFeatures()+0x3d7>
c0019481:	50                   	push   eax
c0019482:	50                   	push   eax
c0019483:	68 a8 ba 02 c0       	push   0xc002baa8
c0019488:	57                   	push   edi
c0019489:	e8 32 74 fe ff       	call   c00008c0 <strcmp>
c001948e:	83 c4 10             	add    esp,0x10
c0019491:	85 c0                	test   eax,eax
c0019493:	75 0f                	jne    c00194a4 <CPU::detectFeatures()+0x32e>
c0019495:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c001949f:	e9 a9 00 00 00       	jmp    c001954d <CPU::detectFeatures()+0x3d7>
c00194a4:	50                   	push   eax
c00194a5:	50                   	push   eax
c00194a6:	68 b5 ba 02 c0       	push   0xc002bab5
c00194ab:	57                   	push   edi
c00194ac:	e8 0f 74 fe ff       	call   c00008c0 <strcmp>
c00194b1:	83 c4 10             	add    esp,0x10
c00194b4:	85 c0                	test   eax,eax
c00194b6:	75 0f                	jne    c00194c7 <CPU::detectFeatures()+0x351>
c00194b8:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c00194c2:	e9 86 00 00 00       	jmp    c001954d <CPU::detectFeatures()+0x3d7>
c00194c7:	50                   	push   eax
c00194c8:	50                   	push   eax
c00194c9:	68 c2 ba 02 c0       	push   0xc002bac2
c00194ce:	57                   	push   edi
c00194cf:	e8 ec 73 fe ff       	call   c00008c0 <strcmp>
c00194d4:	83 c4 10             	add    esp,0x10
c00194d7:	85 c0                	test   eax,eax
c00194d9:	75 0c                	jne    c00194e7 <CPU::detectFeatures()+0x371>
c00194db:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c00194e5:	eb 66                	jmp    c001954d <CPU::detectFeatures()+0x3d7>
c00194e7:	50                   	push   eax
c00194e8:	50                   	push   eax
c00194e9:	68 cf ba 02 c0       	push   0xc002bacf
c00194ee:	57                   	push   edi
c00194ef:	e8 cc 73 fe ff       	call   c00008c0 <strcmp>
c00194f4:	83 c4 10             	add    esp,0x10
c00194f7:	85 c0                	test   eax,eax
c00194f9:	75 0c                	jne    c0019507 <CPU::detectFeatures()+0x391>
c00194fb:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c0019505:	eb 46                	jmp    c001954d <CPU::detectFeatures()+0x3d7>
c0019507:	50                   	push   eax
c0019508:	50                   	push   eax
c0019509:	68 dc ba 02 c0       	push   0xc002badc
c001950e:	57                   	push   edi
c001950f:	e8 ac 73 fe ff       	call   c00008c0 <strcmp>
c0019514:	83 c4 10             	add    esp,0x10
c0019517:	85 c0                	test   eax,eax
c0019519:	74 e0                	je     c00194fb <CPU::detectFeatures()+0x385>
c001951b:	50                   	push   eax
c001951c:	50                   	push   eax
c001951d:	68 e9 ba 02 c0       	push   0xc002bae9
c0019522:	57                   	push   edi
c0019523:	e8 98 73 fe ff       	call   c00008c0 <strcmp>
c0019528:	83 c4 10             	add    esp,0x10
c001952b:	85 c0                	test   eax,eax
c001952d:	74 cc                	je     c00194fb <CPU::detectFeatures()+0x385>
c001952f:	51                   	push   ecx
c0019530:	51                   	push   ecx
c0019531:	68 f6 ba 02 c0       	push   0xc002baf6
c0019536:	57                   	push   edi
c0019537:	e8 84 73 fe ff       	call   c00008c0 <strcmp>
c001953c:	83 c4 10             	add    esp,0x10
c001953f:	85 c0                	test   eax,eax
c0019541:	74 b8                	je     c00194fb <CPU::detectFeatures()+0x385>
c0019543:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c001954d:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c0019552:	0f 86 be 00 00 00    	jbe    c0019616 <CPU::detectFeatures()+0x4a0>
c0019558:	83 ec 0c             	sub    esp,0xc
c001955b:	68 80 00 00 00       	push   0x80
c0019560:	e8 ab f8 ff ff       	call   c0018e10 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0019565:	83 e0 01             	and    eax,0x1
c0019568:	c1 e0 06             	shl    eax,0x6
c001956b:	88 c2                	mov    dl,al
c001956d:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0019573:	83 e0 bf             	and    eax,0xffffffbf
c0019576:	09 d0                	or     eax,edx
c0019578:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c001957e:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c0019585:	e8 86 f8 ff ff       	call   c0018e10 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c001958a:	83 e0 01             	and    eax,0x1
c001958d:	c1 e0 04             	shl    eax,0x4
c0019590:	88 c2                	mov    dl,al
c0019592:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0019598:	83 e0 ef             	and    eax,0xffffffef
c001959b:	09 d0                	or     eax,edx
c001959d:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c00195a3:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c00195aa:	e8 61 f8 ff ff       	call   c0018e10 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c00195af:	c1 e0 07             	shl    eax,0x7
c00195b2:	88 c2                	mov    dl,al
c00195b4:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00195ba:	83 e0 7f             	and    eax,0x7f
c00195bd:	09 d0                	or     eax,edx
c00195bf:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00195c5:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00195cc:	e8 6d f8 ff ff       	call   c0018e3e <CPU::cpuidCheckExtendedECX(unsigned int)>
c00195d1:	83 e0 01             	and    eax,0x1
c00195d4:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c00195db:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c00195e1:	83 e0 f7             	and    eax,0xfffffff7
c00195e4:	09 d0                	or     eax,edx
c00195e6:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c00195ec:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c00195f3:	e8 46 f8 ff ff       	call   c0018e3e <CPU::cpuidCheckExtendedECX(unsigned int)>
c00195f8:	83 c4 10             	add    esp,0x10
c00195fb:	83 e0 01             	and    eax,0x1
c00195fe:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0019605:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c001960b:	83 e0 fb             	and    eax,0xfffffffb
c001960e:	09 d0                	or     eax,edx
c0019610:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0019616:	83 ec 0c             	sub    esp,0xc
c0019619:	56                   	push   esi
c001961a:	55                   	push   ebp
c001961b:	8d 7c 24 28          	lea    edi,[esp+0x28]
c001961f:	57                   	push   edi
c0019620:	8d 44 24 28          	lea    eax,[esp+0x28]
c0019624:	50                   	push   eax
c0019625:	6a 01                	push   0x1
c0019627:	e8 04 f7 ff ff       	call   c0018d30 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001962c:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0019630:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c0019636:	88 ca                	mov    dl,cl
c0019638:	83 e0 f0             	and    eax,0xfffffff0
c001963b:	83 e2 0f             	and    edx,0xf
c001963e:	09 d0                	or     eax,edx
c0019640:	88 ca                	mov    dl,cl
c0019642:	88 83 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],al
c0019648:	c0 ea 04             	shr    dl,0x4
c001964b:	88 54 24 2f          	mov    BYTE PTR [esp+0x2f],dl
c001964f:	0f b6 c2             	movzx  eax,dl
c0019652:	83 c4 20             	add    esp,0x20
c0019655:	c1 e0 06             	shl    eax,0x6
c0019658:	89 c5                	mov    ebp,eax
c001965a:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019660:	66 25 3f c0          	and    ax,0xc03f
c0019664:	09 e8                	or     eax,ebp
c0019666:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001966d:	89 c8                	mov    eax,ecx
c001966f:	8a 93 5d 01 00 00    	mov    dl,BYTE PTR [ebx+0x15d]
c0019675:	c1 e8 08             	shr    eax,0x8
c0019678:	83 e2 3f             	and    edx,0x3f
c001967b:	83 e0 0f             	and    eax,0xf
c001967e:	89 c5                	mov    ebp,eax
c0019680:	c1 e5 06             	shl    ebp,0x6
c0019683:	09 d5                	or     ebp,edx
c0019685:	89 ea                	mov    edx,ebp
c0019687:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c001968d:	88 c2                	mov    dl,al
c001968f:	c0 ea 02             	shr    dl,0x2
c0019692:	89 d5                	mov    ebp,edx
c0019694:	8a 93 5e 01 00 00    	mov    dl,BYTE PTR [ebx+0x15e]
c001969a:	83 e2 c0             	and    edx,0xffffffc0
c001969d:	09 d5                	or     ebp,edx
c001969f:	89 ea                	mov    edx,ebp
c00196a1:	89 cd                	mov    ebp,ecx
c00196a3:	88 93 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],dl
c00196a9:	c1 ed 0c             	shr    ebp,0xc
c00196ac:	8a 93 5c 01 00 00    	mov    dl,BYTE PTR [ebx+0x15c]
c00196b2:	83 e5 03             	and    ebp,0x3
c00196b5:	83 e2 cf             	and    edx,0xffffffcf
c00196b8:	c1 e5 04             	shl    ebp,0x4
c00196bb:	09 d5                	or     ebp,edx
c00196bd:	3c 06                	cmp    al,0x6
c00196bf:	89 ea                	mov    edx,ebp
c00196c1:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c00196c7:	74 04                	je     c00196cd <CPU::detectFeatures()+0x557>
c00196c9:	3c 0f                	cmp    al,0xf
c00196cb:	75 5c                	jne    c0019729 <CPU::detectFeatures()+0x5b3>
c00196cd:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00196d1:	89 cd                	mov    ebp,ecx
c00196d3:	c1 ed 10             	shr    ebp,0x10
c00196d6:	c1 e5 04             	shl    ebp,0x4
c00196d9:	09 ea                	or     edx,ebp
c00196db:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c00196e1:	0f b6 d2             	movzx  edx,dl
c00196e4:	66 81 e5 3f c0       	and    bp,0xc03f
c00196e9:	c1 e2 06             	shl    edx,0x6
c00196ec:	09 ea                	or     edx,ebp
c00196ee:	3c 0f                	cmp    al,0xf
c00196f0:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c00196f7:	75 30                	jne    c0019729 <CPU::detectFeatures()+0x5b3>
c00196f9:	8a 83 5d 01 00 00    	mov    al,BYTE PTR [ebx+0x15d]
c00196ff:	c1 e9 14             	shr    ecx,0x14
c0019702:	83 e0 3f             	and    eax,0x3f
c0019705:	83 c1 0f             	add    ecx,0xf
c0019708:	88 ca                	mov    dl,cl
c001970a:	c0 e9 02             	shr    cl,0x2
c001970d:	c1 e2 06             	shl    edx,0x6
c0019710:	09 d0                	or     eax,edx
c0019712:	88 83 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],al
c0019718:	8a 83 5e 01 00 00    	mov    al,BYTE PTR [ebx+0x15e]
c001971e:	83 e0 c0             	and    eax,0xffffffc0
c0019721:	09 c1                	or     ecx,eax
c0019723:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c0019729:	83 ec 0c             	sub    esp,0xc
c001972c:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c0019733:	56                   	push   esi
c0019734:	8d 44 24 28          	lea    eax,[esp+0x28]
c0019738:	50                   	push   eax
c0019739:	57                   	push   edi
c001973a:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c001973e:	55                   	push   ebp
c001973f:	68 00 00 00 80       	push   0x80000000
c0019744:	e8 e7 f5 ff ff       	call   c0018d30 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0019749:	83 c4 20             	add    esp,0x20
c001974c:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c0019754:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019758:	76 1e                	jbe    c0019778 <CPU::detectFeatures()+0x602>
c001975a:	83 ec 0c             	sub    esp,0xc
c001975d:	56                   	push   esi
c001975e:	50                   	push   eax
c001975f:	57                   	push   edi
c0019760:	55                   	push   ebp
c0019761:	68 01 00 00 80       	push   0x80000001
c0019766:	e8 c5 f5 ff ff       	call   c0018d30 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001976b:	81 a3 90 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x1190],0xfffe5fff
c0019775:	83 c4 20             	add    esp,0x20
c0019778:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c001977e:	83 f8 01             	cmp    eax,0x1
c0019781:	75 6f                	jne    c00197f2 <CPU::detectFeatures()+0x67c>
c0019783:	51                   	push   ecx
c0019784:	51                   	push   ecx
c0019785:	68 02 bb 02 c0       	push   0xc002bb02
c001978a:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c001978e:	56                   	push   esi
c001978f:	e8 a0 70 fe ff       	call   c0000834 <strcpy>
c0019794:	5f                   	pop    edi
c0019795:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001979b:	5d                   	pop    ebp
c001979c:	66 c1 e8 06          	shr    ax,0x6
c00197a0:	0f b6 c0             	movzx  eax,al
c00197a3:	50                   	push   eax
c00197a4:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00197aa:	c1 e8 0e             	shr    eax,0xe
c00197ad:	0f b6 c0             	movzx  eax,al
c00197b0:	50                   	push   eax
c00197b1:	e8 24 f2 ff ff       	call   c00189da <CPU::lookupIntelName(unsigned char, unsigned char)>
c00197b6:	5a                   	pop    edx
c00197b7:	59                   	pop    ecx
c00197b8:	50                   	push   eax
c00197b9:	56                   	push   esi
c00197ba:	e8 b5 71 fe ff       	call   c0000974 <strcat>
c00197bf:	5f                   	pop    edi
c00197c0:	5d                   	pop    ebp
c00197c1:	56                   	push   esi
c00197c2:	53                   	push   ebx
c00197c3:	e8 24 ae ff ff       	call   c00145ec <Device::setName(char const*)>
c00197c8:	58                   	pop    eax
c00197c9:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c00197cf:	5a                   	pop    edx
c00197d0:	68 09 bb 02 c0       	push   0xc002bb09
c00197d5:	50                   	push   eax
c00197d6:	e8 e5 70 fe ff       	call   c00008c0 <strcmp>
c00197db:	83 c4 10             	add    esp,0x10
c00197de:	85 c0                	test   eax,eax
c00197e0:	0f 85 71 03 00 00    	jne    c0019b57 <CPU::detectFeatures()+0x9e1>
c00197e6:	80 a3 91 11 00 00 3f 	and    BYTE PTR [ebx+0x1191],0x3f
c00197ed:	e9 65 03 00 00       	jmp    c0019b57 <CPU::detectFeatures()+0x9e1>
c00197f2:	83 f8 02             	cmp    eax,0x2
c00197f5:	0f 85 b5 00 00 00    	jne    c00198b0 <CPU::detectFeatures()+0x73a>
c00197fb:	57                   	push   edi
c00197fc:	57                   	push   edi
c00197fd:	68 1b bb 02 c0       	push   0xc002bb1b
c0019802:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0019806:	56                   	push   esi
c0019807:	e8 28 70 fe ff       	call   c0000834 <strcpy>
c001980c:	5d                   	pop    ebp
c001980d:	58                   	pop    eax
c001980e:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019814:	66 c1 e8 06          	shr    ax,0x6
c0019818:	0f b6 c0             	movzx  eax,al
c001981b:	50                   	push   eax
c001981c:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019822:	c1 e8 0e             	shr    eax,0xe
c0019825:	0f b6 c0             	movzx  eax,al
c0019828:	50                   	push   eax
c0019829:	e8 18 f0 ff ff       	call   c0018846 <CPU::lookupAMDName(unsigned char, unsigned char)>
c001982e:	5a                   	pop    edx
c001982f:	59                   	pop    ecx
c0019830:	50                   	push   eax
c0019831:	56                   	push   esi
c0019832:	e8 3d 71 fe ff       	call   c0000974 <strcat>
c0019837:	5f                   	pop    edi
c0019838:	5d                   	pop    ebp
c0019839:	56                   	push   esi
c001983a:	53                   	push   ebx
c001983b:	e8 ac ad ff ff       	call   c00145ec <Device::setName(char const*)>
c0019840:	58                   	pop    eax
c0019841:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c0019847:	5a                   	pop    edx
c0019848:	68 20 bb 02 c0       	push   0xc002bb20
c001984d:	50                   	push   eax
c001984e:	e8 6d 70 fe ff       	call   c00008c0 <strcmp>
c0019853:	83 c4 10             	add    esp,0x10
c0019856:	85 c0                	test   eax,eax
c0019858:	75 20                	jne    c001987a <CPU::detectFeatures()+0x704>
c001985a:	8b 15 e8 e6 02 c0    	mov    edx,DWORD PTR ds:0xc002e6e8
c0019860:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c0019866:	a8 01                	test   al,0x1
c0019868:	74 10                	je     c001987a <CPU::detectFeatures()+0x704>
c001986a:	83 e0 fe             	and    eax,0xfffffffe
c001986d:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c0019873:	80 8b 90 11 00 00 10 	or     BYTE PTR [ebx+0x1190],0x10
c001987a:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019880:	c1 e8 0e             	shr    eax,0xe
c0019883:	3c 05                	cmp    al,0x5
c0019885:	0f 85 cc 02 00 00    	jne    c0019b57 <CPU::detectFeatures()+0x9e1>
c001988b:	56                   	push   esi
c001988c:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c0019892:	83 e0 0f             	and    eax,0xf
c0019895:	50                   	push   eax
c0019896:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001989c:	66 c1 e8 06          	shr    ax,0x6
c00198a0:	0f b6 c0             	movzx  eax,al
c00198a3:	50                   	push   eax
c00198a4:	6a 05                	push   0x5
c00198a6:	e8 11 f4 ff ff       	call   c0018cbc <CPU::AMD_K6_writeback(int, int, int)>
c00198ab:	e9 1f 02 00 00       	jmp    c0019acf <CPU::detectFeatures()+0x959>
c00198b0:	8d 50 fd             	lea    edx,[eax-0x3]
c00198b3:	83 fa 01             	cmp    edx,0x1
c00198b6:	76 09                	jbe    c00198c1 <CPU::detectFeatures()+0x74b>
c00198b8:	83 f8 06             	cmp    eax,0x6
c00198bb:	0f 85 91 01 00 00    	jne    c0019a52 <CPU::detectFeatures()+0x8dc>
c00198c1:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c00198c7:	c1 ea 0e             	shr    edx,0xe
c00198ca:	80 fa 05             	cmp    dl,0x5
c00198cd:	75 7b                	jne    c001994a <CPU::detectFeatures()+0x7d4>
c00198cf:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c00198d5:	66 81 e2 c0 3f       	and    dx,0x3fc0
c00198da:	66 81 fa 00 01       	cmp    dx,0x100
c00198df:	75 0c                	jne    c00198ed <CPU::detectFeatures()+0x777>
c00198e1:	51                   	push   ecx
c00198e2:	51                   	push   ecx
c00198e3:	68 27 bb 02 c0       	push   0xc002bb27
c00198e8:	e9 dc 01 00 00       	jmp    c0019ac9 <CPU::detectFeatures()+0x953>
c00198ed:	66 81 fa 00 02       	cmp    dx,0x200
c00198f2:	75 0c                	jne    c0019900 <CPU::detectFeatures()+0x78a>
c00198f4:	52                   	push   edx
c00198f5:	52                   	push   edx
c00198f6:	68 3a bb 02 c0       	push   0xc002bb3a
c00198fb:	e9 c9 01 00 00       	jmp    c0019ac9 <CPU::detectFeatures()+0x953>
c0019900:	66 81 fa 40 02       	cmp    dx,0x240
c0019905:	75 0c                	jne    c0019913 <CPU::detectFeatures()+0x79d>
c0019907:	50                   	push   eax
c0019908:	50                   	push   eax
c0019909:	68 4c bb 02 c0       	push   0xc002bb4c
c001990e:	e9 b6 01 00 00       	jmp    c0019ac9 <CPU::detectFeatures()+0x953>
c0019913:	83 f8 06             	cmp    eax,0x6
c0019916:	75 0c                	jne    c0019924 <CPU::detectFeatures()+0x7ae>
c0019918:	50                   	push   eax
c0019919:	50                   	push   eax
c001991a:	68 5e bb 02 c0       	push   0xc002bb5e
c001991f:	e9 a5 01 00 00       	jmp    c0019ac9 <CPU::detectFeatures()+0x953>
c0019924:	83 f8 04             	cmp    eax,0x4
c0019927:	75 0c                	jne    c0019935 <CPU::detectFeatures()+0x7bf>
c0019929:	50                   	push   eax
c001992a:	50                   	push   eax
c001992b:	68 6a bb 02 c0       	push   0xc002bb6a
c0019930:	e9 94 01 00 00       	jmp    c0019ac9 <CPU::detectFeatures()+0x953>
c0019935:	83 f8 03             	cmp    eax,0x3
c0019938:	0f 85 19 02 00 00    	jne    c0019b57 <CPU::detectFeatures()+0x9e1>
c001993e:	50                   	push   eax
c001993f:	50                   	push   eax
c0019940:	68 72 bb 02 c0       	push   0xc002bb72
c0019945:	e9 7f 01 00 00       	jmp    c0019ac9 <CPU::detectFeatures()+0x953>
c001994a:	80 fa 06             	cmp    dl,0x6
c001994d:	0f 85 db 00 00 00    	jne    c0019a2e <CPU::detectFeatures()+0x8b8>
c0019953:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0019959:	66 81 e2 c0 3f       	and    dx,0x3fc0
c001995e:	66 81 fa 80 01       	cmp    dx,0x180
c0019963:	75 0c                	jne    c0019971 <CPU::detectFeatures()+0x7fb>
c0019965:	50                   	push   eax
c0019966:	50                   	push   eax
c0019967:	68 7d bb 02 c0       	push   0xc002bb7d
c001996c:	e9 58 01 00 00       	jmp    c0019ac9 <CPU::detectFeatures()+0x953>
c0019971:	8d 8a 40 fe ff ff    	lea    ecx,[edx-0x1c0]
c0019977:	66 f7 c1 80 ff       	test   cx,0xff80
c001997c:	75 0c                	jne    c001998a <CPU::detectFeatures()+0x814>
c001997e:	50                   	push   eax
c001997f:	50                   	push   eax
c0019980:	68 8d bb 02 c0       	push   0xc002bb8d
c0019985:	e9 3f 01 00 00       	jmp    c0019ac9 <CPU::detectFeatures()+0x953>
c001998a:	66 81 fa 40 02       	cmp    dx,0x240
c001998f:	75 0c                	jne    c001999d <CPU::detectFeatures()+0x827>
c0019991:	55                   	push   ebp
c0019992:	55                   	push   ebp
c0019993:	68 94 bb 02 c0       	push   0xc002bb94
c0019998:	e9 2c 01 00 00       	jmp    c0019ac9 <CPU::detectFeatures()+0x953>
c001999d:	66 81 fa 80 02       	cmp    dx,0x280
c00199a2:	75 0c                	jne    c00199b0 <CPU::detectFeatures()+0x83a>
c00199a4:	57                   	push   edi
c00199a5:	57                   	push   edi
c00199a6:	68 9d bb 02 c0       	push   0xc002bb9d
c00199ab:	e9 19 01 00 00       	jmp    c0019ac9 <CPU::detectFeatures()+0x953>
c00199b0:	66 81 fa 40 03       	cmp    dx,0x340
c00199b5:	74 ed                	je     c00199a4 <CPU::detectFeatures()+0x82e>
c00199b7:	66 81 fa c0 03       	cmp    dx,0x3c0
c00199bc:	75 0c                	jne    c00199ca <CPU::detectFeatures()+0x854>
c00199be:	56                   	push   esi
c00199bf:	56                   	push   esi
c00199c0:	68 a4 bb 02 c0       	push   0xc002bba4
c00199c5:	e9 ff 00 00 00       	jmp    c0019ac9 <CPU::detectFeatures()+0x953>
c00199ca:	83 f8 06             	cmp    eax,0x6
c00199cd:	0f 84 45 ff ff ff    	je     c0019918 <CPU::detectFeatures()+0x7a2>
c00199d3:	83 f8 04             	cmp    eax,0x4
c00199d6:	0f 84 4d ff ff ff    	je     c0019929 <CPU::detectFeatures()+0x7b3>
c00199dc:	83 f8 03             	cmp    eax,0x3
c00199df:	0f 85 72 01 00 00    	jne    c0019b57 <CPU::detectFeatures()+0x9e1>
c00199e5:	51                   	push   ecx
c00199e6:	51                   	push   ecx
c00199e7:	68 ad bb 02 c0       	push   0xc002bbad
c00199ec:	53                   	push   ebx
c00199ed:	e8 fa ab ff ff       	call   c00145ec <Device::setName(char const*)>
c00199f2:	b1 c1                	mov    cl,0xc1
c00199f4:	88 c8                	mov    al,cl
c00199f6:	e6 22                	out    0x22,al
c00199f8:	e4 23                	in     al,0x23
c00199fa:	88 c2                	mov    dl,al
c00199fc:	88 c8                	mov    al,cl
c00199fe:	e6 22                	out    0x22,al
c0019a00:	88 d0                	mov    al,dl
c0019a02:	83 c8 10             	or     eax,0x10
c0019a05:	e6 23                	out    0x23,al
c0019a07:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c0019a0e:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0019a11:	89 d0                	mov    eax,edx
c0019a13:	66 c7 41 04 22 00    	mov    WORD PTR [ecx+0x4],0x22
c0019a19:	c6 41 06 02          	mov    BYTE PTR [ecx+0x6],0x2
c0019a1d:	40                   	inc    eax
c0019a1e:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c0019a24:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0019a29:	e9 a1 00 00 00       	jmp    c0019acf <CPU::detectFeatures()+0x959>
c0019a2e:	83 f8 06             	cmp    eax,0x6
c0019a31:	0f 84 e1 fe ff ff    	je     c0019918 <CPU::detectFeatures()+0x7a2>
c0019a37:	83 f8 04             	cmp    eax,0x4
c0019a3a:	0f 84 e9 fe ff ff    	je     c0019929 <CPU::detectFeatures()+0x7b3>
c0019a40:	83 f8 03             	cmp    eax,0x3
c0019a43:	0f 85 0e 01 00 00    	jne    c0019b57 <CPU::detectFeatures()+0x9e1>
c0019a49:	52                   	push   edx
c0019a4a:	52                   	push   edx
c0019a4b:	68 b8 bb 02 c0       	push   0xc002bbb8
c0019a50:	eb 77                	jmp    c0019ac9 <CPU::detectFeatures()+0x953>
c0019a52:	83 f8 07             	cmp    eax,0x7
c0019a55:	75 09                	jne    c0019a60 <CPU::detectFeatures()+0x8ea>
c0019a57:	50                   	push   eax
c0019a58:	50                   	push   eax
c0019a59:	68 c2 bb 02 c0       	push   0xc002bbc2
c0019a5e:	eb 69                	jmp    c0019ac9 <CPU::detectFeatures()+0x953>
c0019a60:	83 f8 0a             	cmp    eax,0xa
c0019a63:	75 09                	jne    c0019a6e <CPU::detectFeatures()+0x8f8>
c0019a65:	50                   	push   eax
c0019a66:	50                   	push   eax
c0019a67:	68 cd bb 02 c0       	push   0xc002bbcd
c0019a6c:	eb 5b                	jmp    c0019ac9 <CPU::detectFeatures()+0x953>
c0019a6e:	83 f8 0b             	cmp    eax,0xb
c0019a71:	75 09                	jne    c0019a7c <CPU::detectFeatures()+0x906>
c0019a73:	50                   	push   eax
c0019a74:	50                   	push   eax
c0019a75:	68 d5 bb 02 c0       	push   0xc002bbd5
c0019a7a:	eb 4d                	jmp    c0019ac9 <CPU::detectFeatures()+0x953>
c0019a7c:	83 f8 08             	cmp    eax,0x8
c0019a7f:	75 09                	jne    c0019a8a <CPU::detectFeatures()+0x914>
c0019a81:	50                   	push   eax
c0019a82:	50                   	push   eax
c0019a83:	68 de bb 02 c0       	push   0xc002bbde
c0019a88:	eb 3f                	jmp    c0019ac9 <CPU::detectFeatures()+0x953>
c0019a8a:	83 f8 09             	cmp    eax,0x9
c0019a8d:	75 09                	jne    c0019a98 <CPU::detectFeatures()+0x922>
c0019a8f:	50                   	push   eax
c0019a90:	50                   	push   eax
c0019a91:	68 e6 bb 02 c0       	push   0xc002bbe6
c0019a96:	eb 31                	jmp    c0019ac9 <CPU::detectFeatures()+0x953>
c0019a98:	83 f8 05             	cmp    eax,0x5
c0019a9b:	75 09                	jne    c0019aa6 <CPU::detectFeatures()+0x930>
c0019a9d:	50                   	push   eax
c0019a9e:	50                   	push   eax
c0019a9f:	68 ee bb 02 c0       	push   0xc002bbee
c0019aa4:	eb 23                	jmp    c0019ac9 <CPU::detectFeatures()+0x953>
c0019aa6:	83 f8 0c             	cmp    eax,0xc
c0019aa9:	75 09                	jne    c0019ab4 <CPU::detectFeatures()+0x93e>
c0019aab:	55                   	push   ebp
c0019aac:	55                   	push   ebp
c0019aad:	68 fc bb 02 c0       	push   0xc002bbfc
c0019ab2:	eb 15                	jmp    c0019ac9 <CPU::detectFeatures()+0x953>
c0019ab4:	83 f8 0d             	cmp    eax,0xd
c0019ab7:	75 09                	jne    c0019ac2 <CPU::detectFeatures()+0x94c>
c0019ab9:	57                   	push   edi
c0019aba:	57                   	push   edi
c0019abb:	68 07 bc 02 c0       	push   0xc002bc07
c0019ac0:	eb 07                	jmp    c0019ac9 <CPU::detectFeatures()+0x953>
c0019ac2:	56                   	push   esi
c0019ac3:	56                   	push   esi
c0019ac4:	68 1b bc 02 c0       	push   0xc002bc1b
c0019ac9:	53                   	push   ebx
c0019aca:	e8 1d ab ff ff       	call   c00145ec <Device::setName(char const*)>
c0019acf:	83 c4 10             	add    esp,0x10
c0019ad2:	e9 80 00 00 00       	jmp    c0019b57 <CPU::detectFeatures()+0x9e1>
c0019ad7:	51                   	push   ecx
c0019ad8:	51                   	push   ecx
c0019ad9:	68 67 ba 02 c0       	push   0xc002ba67
c0019ade:	57                   	push   edi
c0019adf:	e8 50 6d fe ff       	call   c0000834 <strcpy>
c0019ae4:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0019aee:	e8 bb 67 fe ff       	call   c00002ae <is486>
c0019af3:	83 c4 10             	add    esp,0x10
c0019af6:	85 c0                	test   eax,eax
c0019af8:	74 2b                	je     c0019b25 <CPU::detectFeatures()+0x9af>
c0019afa:	52                   	push   edx
c0019afb:	52                   	push   edx
c0019afc:	68 27 bc 02 c0       	push   0xc002bc27
c0019b01:	53                   	push   ebx
c0019b02:	e8 e5 aa ff ff       	call   c00145ec <Device::setName(char const*)>
c0019b07:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c0019b0e:	0f 20 c0             	mov    eax,cr0
c0019b11:	83 e0 14             	and    eax,0x14
c0019b14:	83 c4 10             	add    esp,0x10
c0019b17:	83 f8 04             	cmp    eax,0x4
c0019b1a:	75 1f                	jne    c0019b3b <CPU::detectFeatures()+0x9c5>
c0019b1c:	80 a3 92 11 00 00 fd 	and    BYTE PTR [ebx+0x1192],0xfd
c0019b23:	eb 32                	jmp    c0019b57 <CPU::detectFeatures()+0x9e1>
c0019b25:	50                   	push   eax
c0019b26:	50                   	push   eax
c0019b27:	68 32 bc 02 c0       	push   0xc002bc32
c0019b2c:	53                   	push   ebx
c0019b2d:	e8 ba aa ff ff       	call   c00145ec <Device::setName(char const*)>
c0019b32:	80 a3 91 11 00 00 f8 	and    BYTE PTR [ebx+0x1191],0xf8
c0019b39:	eb d3                	jmp    c0019b0e <CPU::detectFeatures()+0x998>
c0019b3b:	e8 49 67 fe ff       	call   c0000289 <hasLegacyFPU>
c0019b40:	83 e0 01             	and    eax,0x1
c0019b43:	8d 14 00             	lea    edx,[eax+eax*1]
c0019b46:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0019b4c:	83 e0 fd             	and    eax,0xfffffffd
c0019b4f:	09 d0                	or     eax,edx
c0019b51:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0019b57:	c6 83 94 11 00 00 00 	mov    BYTE PTR [ebx+0x1194],0x0
c0019b5e:	83 c4 4c             	add    esp,0x4c
c0019b61:	5b                   	pop    ebx
c0019b62:	5e                   	pop    esi
c0019b63:	5f                   	pop    edi
c0019b64:	5d                   	pop    ebp
c0019b65:	c3                   	ret    

c0019b66 <CPU::setupSMEP()>:
c0019b66:	0f 20 e0             	mov    eax,cr4
c0019b69:	0d 00 00 10 00       	or     eax,0x100000
c0019b6e:	0f 22 e0             	mov    cr4,eax
c0019b71:	c3                   	ret    

c0019b72 <CPU::setupUMIP()>:
c0019b72:	0f 20 e0             	mov    eax,cr4
c0019b75:	80 cc 08             	or     ah,0x8
c0019b78:	0f 22 e0             	mov    cr4,eax
c0019b7b:	c3                   	ret    

c0019b7c <CPU::setupTSC()>:
c0019b7c:	0f 20 e0             	mov    eax,cr4
c0019b7f:	83 c8 04             	or     eax,0x4
c0019b82:	0f 22 e0             	mov    cr4,eax
c0019b85:	c3                   	ret    

c0019b86 <CPU::setupLargePages()>:
c0019b86:	0f 20 e0             	mov    eax,cr4
c0019b89:	83 c8 10             	or     eax,0x10
c0019b8c:	0f 22 e0             	mov    cr4,eax
c0019b8f:	c3                   	ret    

c0019b90 <CPU::setupPAT()>:
c0019b90:	a1 e8 e6 02 c0       	mov    eax,ds:0xc002e6e8
c0019b95:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0019b9c:	74 2c                	je     c0019bca <CPU::setupPAT()+0x3a>
c0019b9e:	53                   	push   ebx
c0019b9f:	83 ec 10             	sub    esp,0x10
c0019ba2:	68 77 02 00 00       	push   0x277
c0019ba7:	50                   	push   eax
c0019ba8:	e8 df 52 ff ff       	call   c000ee8c <Computer::rdmsr(unsigned int)>
c0019bad:	83 e2 f8             	and    edx,0xfffffff8
c0019bb0:	83 ca 01             	or     edx,0x1
c0019bb3:	52                   	push   edx
c0019bb4:	50                   	push   eax
c0019bb5:	68 77 02 00 00       	push   0x277
c0019bba:	ff 35 e8 e6 02 c0    	push   DWORD PTR ds:0xc002e6e8
c0019bc0:	e8 f3 52 ff ff       	call   c000eeb8 <Computer::wrmsr(unsigned int, unsigned long long)>
c0019bc5:	83 c4 28             	add    esp,0x28
c0019bc8:	5b                   	pop    ebx
c0019bc9:	c3                   	ret    
c0019bca:	c3                   	ret    
c0019bcb:	90                   	nop

c0019bcc <CPU::setupMTRR()>:
c0019bcc:	c3                   	ret    
c0019bcd:	90                   	nop

c0019bce <CPU::setupGlobalPages()>:
c0019bce:	0f 20 e0             	mov    eax,cr4
c0019bd1:	0c 80                	or     al,0x80
c0019bd3:	0f 22 e0             	mov    cr4,eax
c0019bd6:	c3                   	ret    
c0019bd7:	90                   	nop

c0019bd8 <CPU::allowUsermodeDataAccess()>:
c0019bd8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019bdc:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0019be3:	74 03                	je     c0019be8 <CPU::allowUsermodeDataAccess()+0x10>
c0019be5:	0f 01 cb             	stac   
c0019be8:	c3                   	ret    
c0019be9:	90                   	nop

c0019bea <CPU::prohibitUsermodeDataAccess()>:
c0019bea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019bee:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0019bf5:	74 03                	je     c0019bfa <CPU::prohibitUsermodeDataAccess()+0x10>
c0019bf7:	0f 01 ca             	clac   
c0019bfa:	c3                   	ret    
c0019bfb:	90                   	nop

c0019bfc <CPU::setupSMAP()>:
c0019bfc:	0f 20 e0             	mov    eax,cr4
c0019bff:	0d 00 00 20 00       	or     eax,0x200000
c0019c04:	0f 22 e0             	mov    cr4,eax
c0019c07:	eb e1                	jmp    c0019bea <CPU::prohibitUsermodeDataAccess()>
c0019c09:	90                   	nop

c0019c0a <CPU::setupFeatures()>:
c0019c0a:	83 ec 0c             	sub    esp,0xc
c0019c0d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019c11:	f6 82 90 11 00 00 40 	test   BYTE PTR [edx+0x1190],0x40
c0019c18:	74 07                	je     c0019c21 <CPU::setupFeatures()+0x17>
c0019c1a:	52                   	push   edx
c0019c1b:	e8 46 ff ff ff       	call   c0019b66 <CPU::setupSMEP()>
c0019c20:	58                   	pop    eax
c0019c21:	f6 82 91 11 00 00 10 	test   BYTE PTR [edx+0x1191],0x10
c0019c28:	74 07                	je     c0019c31 <CPU::setupFeatures()+0x27>
c0019c2a:	52                   	push   edx
c0019c2b:	e8 cc ff ff ff       	call   c0019bfc <CPU::setupSMAP()>
c0019c30:	58                   	pop    eax
c0019c31:	f6 82 91 11 00 00 08 	test   BYTE PTR [edx+0x1191],0x8
c0019c38:	74 07                	je     c0019c41 <CPU::setupFeatures()+0x37>
c0019c3a:	52                   	push   edx
c0019c3b:	e8 32 ff ff ff       	call   c0019b72 <CPU::setupUMIP()>
c0019c40:	58                   	pop    eax
c0019c41:	f6 82 90 11 00 00 02 	test   BYTE PTR [edx+0x1190],0x2
c0019c48:	74 07                	je     c0019c51 <CPU::setupFeatures()+0x47>
c0019c4a:	52                   	push   edx
c0019c4b:	e8 2c ff ff ff       	call   c0019b7c <CPU::setupTSC()>
c0019c50:	58                   	pop    eax
c0019c51:	f6 82 90 11 00 00 08 	test   BYTE PTR [edx+0x1190],0x8
c0019c58:	74 07                	je     c0019c61 <CPU::setupFeatures()+0x57>
c0019c5a:	52                   	push   edx
c0019c5b:	e8 26 ff ff ff       	call   c0019b86 <CPU::setupLargePages()>
c0019c60:	59                   	pop    ecx
c0019c61:	f6 82 90 11 00 00 10 	test   BYTE PTR [edx+0x1190],0x10
c0019c68:	74 07                	je     c0019c71 <CPU::setupFeatures()+0x67>
c0019c6a:	52                   	push   edx
c0019c6b:	e8 5e ff ff ff       	call   c0019bce <CPU::setupGlobalPages()>
c0019c70:	58                   	pop    eax
c0019c71:	f6 82 90 11 00 00 20 	test   BYTE PTR [edx+0x1190],0x20
c0019c78:	74 0c                	je     c0019c86 <CPU::setupFeatures()+0x7c>
c0019c7a:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0019c7e:	83 c4 0c             	add    esp,0xc
c0019c81:	e9 0a ff ff ff       	jmp    c0019b90 <CPU::setupPAT()>
c0019c86:	83 c4 0c             	add    esp,0xc
c0019c89:	c3                   	ret    

c0019c8a <CPU::open(int, int, void*)>:
c0019c8a:	57                   	push   edi
c0019c8b:	56                   	push   esi
c0019c8c:	53                   	push   ebx
c0019c8d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019c91:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0019c95:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c0019c9b:	83 ec 0c             	sub    esp,0xc
c0019c9e:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c0019ca4:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c0019caa:	50                   	push   eax
c0019cab:	e8 c8 54 ff ff       	call   c000f178 <GDT::setup()>
c0019cb0:	83 c4 0c             	add    esp,0xc
c0019cb3:	6a 00                	push   0x0
c0019cb5:	68 ef be ad de       	push   0xdeadbeef
c0019cba:	57                   	push   edi
c0019cbb:	e8 d4 78 ff ff       	call   c0011594 <TSS::setup(unsigned long, unsigned long)>
c0019cc0:	89 3c 24             	mov    DWORD PTR [esp],edi
c0019cc3:	e8 ac 78 ff ff       	call   c0011574 <TSS::flush()>
c0019cc8:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c0019cce:	89 04 24             	mov    DWORD PTR [esp],eax
c0019cd1:	e8 fe 56 ff ff       	call   c000f3d4 <IDT::setup()>
c0019cd6:	b8 00 04 00 00       	mov    eax,0x400
c0019cdb:	0f 23 f8             	mov    db7,eax
c0019cde:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c0019ce8:	e8 99 62 ff ff       	call   c000ff86 <Phys::allocatePage()>
c0019ced:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0019cf3:	89 30                	mov    DWORD PTR [eax],esi
c0019cf5:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0019cfb:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0019cfe:	58                   	pop    eax
c0019cff:	5a                   	pop    edx
c0019d00:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019d06:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0019d0a:	e8 c3 89 ff ff       	call   c00126d2 <VAS::setCPUSpecific(unsigned long)>
c0019d0f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019d12:	e8 5f f4 ff ff       	call   c0019176 <CPU::detectFeatures()>
c0019d17:	e8 ce bc ff ff       	call   c00159ea <setupInterruptController()>
c0019d1c:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c0019d22:	a1 00 e7 02 c0       	mov    eax,ds:0xc002e700
c0019d27:	83 e0 10             	and    eax,0x10
c0019d2a:	83 f8 01             	cmp    eax,0x1
c0019d2d:	19 c0                	sbb    eax,eax
c0019d2f:	83 e0 46             	and    eax,0x46
c0019d32:	83 c0 1e             	add    eax,0x1e
c0019d35:	89 04 24             	mov    DWORD PTR [esp],eax
c0019d38:	e8 bb d1 ff ff       	call   c0016ef8 <setupTimer(int)>
c0019d3d:	89 83 8c 11 00 00    	mov    DWORD PTR [ebx+0x118c],eax
c0019d43:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019d46:	e8 bf fe ff ff       	call   c0019c0a <CPU::setupFeatures()>
c0019d4b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019d4e:	e8 a7 f1 ff ff       	call   c0018efa <CPU::displayFeatures()>
c0019d53:	83 c4 10             	add    esp,0x10
c0019d56:	31 c0                	xor    eax,eax
c0019d58:	5b                   	pop    ebx
c0019d59:	5e                   	pop    esi
c0019d5a:	5f                   	pop    edi
c0019d5b:	c3                   	ret    

c0019d5c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>:
c0019d5c:	57                   	push   edi
c0019d5d:	56                   	push   esi
c0019d5e:	53                   	push   ebx
c0019d5f:	51                   	push   ecx
c0019d60:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0019d64:	8b 46 3c             	mov    eax,DWORD PTR [esi+0x3c]
c0019d67:	0f 02 c0             	lar    eax,ax
c0019d6a:	8b 5e 38             	mov    ebx,DWORD PTR [esi+0x38]
c0019d6d:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0019d71:	8a 4b 01             	mov    cl,BYTE PTR [ebx+0x1]
c0019d74:	88 ca                	mov    dl,cl
c0019d76:	c0 ea 06             	shr    dl,0x6
c0019d79:	88 54 24 01          	mov    BYTE PTR [esp+0x1],dl
c0019d7d:	89 ca                	mov    edx,ecx
c0019d7f:	66 c1 ea 03          	shr    dx,0x3
c0019d83:	83 e2 07             	and    edx,0x7
c0019d86:	80 7c 24 01 03       	cmp    BYTE PTR [esp+0x1],0x3
c0019d8b:	88 17                	mov    BYTE PTR [edi],dl
c0019d8d:	0f 84 a6 01 00 00    	je     c0019f39 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1dd>
c0019d93:	83 e1 07             	and    ecx,0x7
c0019d96:	80 f9 04             	cmp    cl,0x4
c0019d99:	0f 84 98 00 00 00    	je     c0019e37 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xdb>
c0019d9f:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0019da4:	0f 95 c0             	setne  al
c0019da7:	80 f9 05             	cmp    cl,0x5
c0019daa:	0f 95 c2             	setne  dl
c0019dad:	08 c2                	or     dl,al
c0019daf:	74 79                	je     c0019e2a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xce>
c0019db1:	84 c9                	test   cl,cl
c0019db3:	75 05                	jne    c0019dba <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x5e>
c0019db5:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c0019db8:	eb 3c                	jmp    c0019df6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019dba:	80 f9 01             	cmp    cl,0x1
c0019dbd:	75 05                	jne    c0019dc4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x68>
c0019dbf:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0019dc2:	eb 32                	jmp    c0019df6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019dc4:	80 f9 02             	cmp    cl,0x2
c0019dc7:	75 05                	jne    c0019dce <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x72>
c0019dc9:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0019dcc:	eb 28                	jmp    c0019df6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019dce:	31 c0                	xor    eax,eax
c0019dd0:	80 f9 03             	cmp    cl,0x3
c0019dd3:	75 05                	jne    c0019dda <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x7e>
c0019dd5:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0019dd8:	eb 1c                	jmp    c0019df6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019dda:	80 f9 05             	cmp    cl,0x5
c0019ddd:	75 05                	jne    c0019de4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x88>
c0019ddf:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0019de2:	eb 12                	jmp    c0019df6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019de4:	80 f9 06             	cmp    cl,0x6
c0019de7:	75 05                	jne    c0019dee <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x92>
c0019de9:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0019dec:	eb 08                	jmp    c0019df6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019dee:	80 f9 07             	cmp    cl,0x7
c0019df1:	75 03                	jne    c0019df6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019df3:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0019df6:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c0019dfb:	75 10                	jne    c0019e0d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xb1>
c0019dfd:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c0019e01:	b9 03 00 00 00       	mov    ecx,0x3
c0019e06:	01 d0                	add    eax,edx
c0019e08:	e9 37 01 00 00       	jmp    c0019f44 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019e0d:	b9 02 00 00 00       	mov    ecx,0x2
c0019e12:	80 7c 24 01 02       	cmp    BYTE PTR [esp+0x1],0x2
c0019e17:	0f 85 27 01 00 00    	jne    c0019f44 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019e1d:	03 43 02             	add    eax,DWORD PTR [ebx+0x2]
c0019e20:	b9 06 00 00 00       	mov    ecx,0x6
c0019e25:	e9 1a 01 00 00       	jmp    c0019f44 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019e2a:	8b 43 02             	mov    eax,DWORD PTR [ebx+0x2]
c0019e2d:	b9 06 00 00 00       	mov    ecx,0x6
c0019e32:	e9 0f 01 00 00       	jmp    c0019f46 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019e37:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c0019e3a:	88 ca                	mov    dl,cl
c0019e3c:	c0 ea 06             	shr    dl,0x6
c0019e3f:	88 54 24 02          	mov    BYTE PTR [esp+0x2],dl
c0019e43:	89 ca                	mov    edx,ecx
c0019e45:	66 c1 ea 03          	shr    dx,0x3
c0019e49:	83 e2 07             	and    edx,0x7
c0019e4c:	80 e1 07             	and    cl,0x7
c0019e4f:	75 05                	jne    c0019e56 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xfa>
c0019e51:	8b 7e 2c             	mov    edi,DWORD PTR [esi+0x2c]
c0019e54:	eb 4c                	jmp    c0019ea2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019e56:	80 f9 01             	cmp    cl,0x1
c0019e59:	75 05                	jne    c0019e60 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x104>
c0019e5b:	8b 7e 28             	mov    edi,DWORD PTR [esi+0x28]
c0019e5e:	eb 42                	jmp    c0019ea2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019e60:	80 f9 02             	cmp    cl,0x2
c0019e63:	75 05                	jne    c0019e6a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x10e>
c0019e65:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c0019e68:	eb 38                	jmp    c0019ea2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019e6a:	80 f9 03             	cmp    cl,0x3
c0019e6d:	75 05                	jne    c0019e74 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x118>
c0019e6f:	8b 7e 20             	mov    edi,DWORD PTR [esi+0x20]
c0019e72:	eb 2e                	jmp    c0019ea2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019e74:	80 f9 04             	cmp    cl,0x4
c0019e77:	75 12                	jne    c0019e8b <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12f>
c0019e79:	f6 c4 60             	test   ah,0x60
c0019e7c:	75 08                	jne    c0019e86 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12a>
c0019e7e:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0019e81:	8d 78 14             	lea    edi,[eax+0x14]
c0019e84:	eb 1c                	jmp    c0019ea2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019e86:	8b 7e 44             	mov    edi,DWORD PTR [esi+0x44]
c0019e89:	eb 17                	jmp    c0019ea2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019e8b:	80 f9 05             	cmp    cl,0x5
c0019e8e:	75 05                	jne    c0019e95 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x139>
c0019e90:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c0019e93:	eb 0d                	jmp    c0019ea2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019e95:	80 f9 06             	cmp    cl,0x6
c0019e98:	75 05                	jne    c0019e9f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x143>
c0019e9a:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c0019e9d:	eb 03                	jmp    c0019ea2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019e9f:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c0019ea2:	84 d2                	test   dl,dl
c0019ea4:	75 05                	jne    c0019eab <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x14f>
c0019ea6:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c0019ea9:	eb 3c                	jmp    c0019ee7 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019eab:	80 fa 01             	cmp    dl,0x1
c0019eae:	75 05                	jne    c0019eb5 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x159>
c0019eb0:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0019eb3:	eb 32                	jmp    c0019ee7 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019eb5:	80 fa 02             	cmp    dl,0x2
c0019eb8:	75 05                	jne    c0019ebf <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x163>
c0019eba:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0019ebd:	eb 28                	jmp    c0019ee7 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019ebf:	80 fa 03             	cmp    dl,0x3
c0019ec2:	75 05                	jne    c0019ec9 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x16d>
c0019ec4:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0019ec7:	eb 1e                	jmp    c0019ee7 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019ec9:	31 c0                	xor    eax,eax
c0019ecb:	80 fa 04             	cmp    dl,0x4
c0019ece:	74 17                	je     c0019ee7 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019ed0:	80 fa 05             	cmp    dl,0x5
c0019ed3:	75 05                	jne    c0019eda <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x17e>
c0019ed5:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0019ed8:	eb 0d                	jmp    c0019ee7 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019eda:	80 fa 06             	cmp    dl,0x6
c0019edd:	75 05                	jne    c0019ee4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x188>
c0019edf:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0019ee2:	eb 03                	jmp    c0019ee7 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019ee4:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0019ee7:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0019eec:	0f 94 c2             	sete   dl
c0019eef:	80 f9 05             	cmp    cl,0x5
c0019ef2:	8a 4c 24 02          	mov    cl,BYTE PTR [esp+0x2]
c0019ef6:	0f 94 44 24 03       	sete   BYTE PTR [esp+0x3]
c0019efb:	d3 e0                	shl    eax,cl
c0019efd:	22 54 24 03          	and    dl,BYTE PTR [esp+0x3]
c0019f01:	74 0a                	je     c0019f0d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1b1>
c0019f03:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c0019f06:	b9 07 00 00 00       	mov    ecx,0x7
c0019f0b:	eb 37                	jmp    c0019f44 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019f0d:	01 f8                	add    eax,edi
c0019f0f:	b9 03 00 00 00       	mov    ecx,0x3
c0019f14:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0019f19:	74 2b                	je     c0019f46 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019f1b:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c0019f20:	75 0d                	jne    c0019f2f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1d3>
c0019f22:	0f be 4b 03          	movsx  ecx,BYTE PTR [ebx+0x3]
c0019f26:	01 c8                	add    eax,ecx
c0019f28:	b9 04 00 00 00       	mov    ecx,0x4
c0019f2d:	eb 17                	jmp    c0019f46 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019f2f:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c0019f32:	b9 07 00 00 00       	mov    ecx,0x7
c0019f37:	eb 0d                	jmp    c0019f46 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019f39:	b9 02 00 00 00       	mov    ecx,0x2
c0019f3e:	b2 01                	mov    dl,0x1
c0019f40:	31 c0                	xor    eax,eax
c0019f42:	eb 02                	jmp    c0019f46 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019f44:	31 d2                	xor    edx,edx
c0019f46:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0019f4a:	89 0b                	mov    DWORD PTR [ebx],ecx
c0019f4c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0019f50:	88 11                	mov    BYTE PTR [ecx],dl
c0019f52:	5a                   	pop    edx
c0019f53:	5b                   	pop    ebx
c0019f54:	5e                   	pop    esi
c0019f55:	5f                   	pop    edi
c0019f56:	c3                   	ret    

c0019f57 <Krnl::smpEntry()>:
c0019f57:	eb fe                	jmp    c0019f57 <Krnl::smpEntry()>

c0019f59 <Krnl::startCPU(int)>:
c0019f59:	a1 e8 e6 02 c0       	mov    eax,ds:0xc002e6e8
c0019f5e:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0019f65:	0f 84 36 01 00 00    	je     c001a0a1 <Krnl::startCPU(int)+0x148>
c0019f6b:	53                   	push   ebx
c0019f6c:	83 ec 08             	sub    esp,0x8
c0019f6f:	e8 46 3f 00 00       	call   c001deba <lockScheduler()>
c0019f74:	52                   	push   edx
c0019f75:	52                   	push   edx
c0019f76:	6a 1b                	push   0x1b
c0019f78:	ff 35 e8 e6 02 c0    	push   DWORD PTR ds:0xc002e6e8
c0019f7e:	e8 09 4f ff ff       	call   c000ee8c <Computer::rdmsr(unsigned int)>
c0019f83:	59                   	pop    ecx
c0019f84:	25 00 f0 ff ff       	and    eax,0xfffff000
c0019f89:	89 c3                	mov    ebx,eax
c0019f8b:	58                   	pop    eax
c0019f8c:	53                   	push   ebx
c0019f8d:	68 6c bc 02 c0       	push   0xc002bc6c
c0019f92:	e8 4c 90 ff ff       	call   c0012fe3 <Dbg::kprintf(char const*, ...)>
c0019f97:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0019fa1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019fa5:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0019faf:	c1 e0 18             	shl    eax,0x18
c0019fb2:	8b 93 10 03 00 00    	mov    edx,DWORD PTR [ebx+0x310]
c0019fb8:	83 c4 10             	add    esp,0x10
c0019fbb:	81 e2 ff ff ff 00    	and    edx,0xffffff
c0019fc1:	09 c2                	or     edx,eax
c0019fc3:	89 93 10 03 00 00    	mov    DWORD PTR [ebx+0x310],edx
c0019fc9:	8d 93 00 03 00 00    	lea    edx,[ebx+0x300]
c0019fcf:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c0019fd5:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c0019fdb:	80 cd c5             	or     ch,0xc5
c0019fde:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c0019fe4:	f3 90                	pause  
c0019fe6:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0019fe8:	0f ba e1 0c          	bt     ecx,0xc
c0019fec:	72 f6                	jb     c0019fe4 <Krnl::startCPU(int)+0x8b>
c0019fee:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c0019ff4:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c0019ffa:	09 c1                	or     ecx,eax
c0019ffc:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c001a002:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c001a008:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c001a00e:	80 cd 85             	or     ch,0x85
c001a011:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c001a017:	f3 90                	pause  
c001a019:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001a01b:	0f ba e1 0c          	bt     ecx,0xc
c001a01f:	72 f6                	jb     c001a017 <Krnl::startCPU(int)+0xbe>
c001a021:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c001a02b:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c001a031:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c001a037:	09 c1                	or     ecx,eax
c001a039:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c001a03f:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c001a045:	81 e1 00 f8 f0 ff    	and    ecx,0xfff0f800
c001a04b:	81 c9 02 06 00 00    	or     ecx,0x602
c001a051:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c001a057:	f3 90                	pause  
c001a059:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001a05b:	0f ba e1 0c          	bt     ecx,0xc
c001a05f:	72 f6                	jb     c001a057 <Krnl::startCPU(int)+0xfe>
c001a061:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c001a06b:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c001a071:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c001a077:	09 c8                	or     eax,ecx
c001a079:	89 83 10 03 00 00    	mov    DWORD PTR [ebx+0x310],eax
c001a07f:	8b 83 00 03 00 00    	mov    eax,DWORD PTR [ebx+0x300]
c001a085:	25 00 f8 f0 ff       	and    eax,0xfff0f800
c001a08a:	0d 02 06 00 00       	or     eax,0x602
c001a08f:	89 83 00 03 00 00    	mov    DWORD PTR [ebx+0x300],eax
c001a095:	f3 90                	pause  
c001a097:	8b 02                	mov    eax,DWORD PTR [edx]
c001a099:	0f ba e0 0c          	bt     eax,0xc
c001a09d:	72 f6                	jb     c001a095 <Krnl::startCPU(int)+0x13c>
c001a09f:	eb fe                	jmp    c001a09f <Krnl::startCPU(int)+0x146>
c001a0a1:	c3                   	ret    

c001a0a2 <Krnl::startCPUs()>:
c001a0a2:	a1 e8 e6 02 c0       	mov    eax,ds:0xc002e6e8
c001a0a7:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001a0ad:	88 c2                	mov    dl,al
c001a0af:	83 e2 0a             	and    edx,0xa
c001a0b2:	80 fa 0a             	cmp    dl,0xa
c001a0b5:	75 09                	jne    c001a0c0 <Krnl::startCPUs()+0x1e>
c001a0b7:	a8 01                	test   al,0x1
c001a0b9:	74 05                	je     c001a0c0 <Krnl::startCPUs()+0x1e>
c001a0bb:	e9 db 60 fe ff       	jmp    c000019b <prepareTramp>
c001a0c0:	c3                   	ret    
c001a0c1:	90                   	nop

c001a0c2 <EnvVarContainer::getEnv(char const*)>:
c001a0c2:	57                   	push   edi
c001a0c3:	56                   	push   esi
c001a0c4:	53                   	push   ebx
c001a0c5:	31 db                	xor    ebx,ebx
c001a0c7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a0cb:	39 1e                	cmp    DWORD PTR [esi],ebx
c001a0cd:	7e 2b                	jle    c001a0fa <EnvVarContainer::getEnv(char const*)+0x38>
c001a0cf:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c001a0d6:	50                   	push   eax
c001a0d7:	50                   	push   eax
c001a0d8:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001a0db:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c001a0de:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001a0e2:	e8 d9 67 fe ff       	call   c00008c0 <strcmp>
c001a0e7:	83 c4 10             	add    esp,0x10
c001a0ea:	85 c0                	test   eax,eax
c001a0ec:	75 09                	jne    c001a0f7 <EnvVarContainer::getEnv(char const*)+0x35>
c001a0ee:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001a0f1:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c001a0f5:	eb 05                	jmp    c001a0fc <EnvVarContainer::getEnv(char const*)+0x3a>
c001a0f7:	43                   	inc    ebx
c001a0f8:	eb d1                	jmp    c001a0cb <EnvVarContainer::getEnv(char const*)+0x9>
c001a0fa:	31 c0                	xor    eax,eax
c001a0fc:	5b                   	pop    ebx
c001a0fd:	5e                   	pop    esi
c001a0fe:	5f                   	pop    edi
c001a0ff:	c3                   	ret    

c001a100 <EnvVarContainer::setEnv(char const*, char const*)>:
c001a100:	57                   	push   edi
c001a101:	56                   	push   esi
c001a102:	53                   	push   ebx
c001a103:	83 ec 1c             	sub    esp,0x1c
c001a106:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001a10a:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001a10e:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001a112:	57                   	push   edi
c001a113:	e8 7c 66 fe ff       	call   c0000794 <strlen>
c001a118:	40                   	inc    eax
c001a119:	89 04 24             	mov    DWORD PTR [esp],eax
c001a11c:	e8 c3 57 ff ff       	call   c000f8e4 <malloc>
c001a121:	89 34 24             	mov    DWORD PTR [esp],esi
c001a124:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001a128:	e8 67 66 fe ff       	call   c0000794 <strlen>
c001a12d:	40                   	inc    eax
c001a12e:	89 04 24             	mov    DWORD PTR [esp],eax
c001a131:	e8 ae 57 ff ff       	call   c000f8e4 <malloc>
c001a136:	89 3c 24             	mov    DWORD PTR [esp],edi
c001a139:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a13d:	e8 52 66 fe ff       	call   c0000794 <strlen>
c001a142:	83 c4 0c             	add    esp,0xc
c001a145:	40                   	inc    eax
c001a146:	50                   	push   eax
c001a147:	6a 00                	push   0x0
c001a149:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001a14d:	e8 26 66 fe ff       	call   c0000778 <memset>
c001a152:	89 3c 24             	mov    DWORD PTR [esp],edi
c001a155:	e8 3a 66 fe ff       	call   c0000794 <strlen>
c001a15a:	83 c4 0c             	add    esp,0xc
c001a15d:	40                   	inc    eax
c001a15e:	50                   	push   eax
c001a15f:	57                   	push   edi
c001a160:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001a164:	e8 db 65 fe ff       	call   c0000744 <memcpy>
c001a169:	89 34 24             	mov    DWORD PTR [esp],esi
c001a16c:	e8 23 66 fe ff       	call   c0000794 <strlen>
c001a171:	83 c4 0c             	add    esp,0xc
c001a174:	40                   	inc    eax
c001a175:	50                   	push   eax
c001a176:	6a 00                	push   0x0
c001a178:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a17c:	e8 f7 65 fe ff       	call   c0000778 <memset>
c001a181:	89 34 24             	mov    DWORD PTR [esp],esi
c001a184:	e8 0b 66 fe ff       	call   c0000794 <strlen>
c001a189:	83 c4 0c             	add    esp,0xc
c001a18c:	40                   	inc    eax
c001a18d:	50                   	push   eax
c001a18e:	56                   	push   esi
c001a18f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a193:	e8 ac 65 fe ff       	call   c0000744 <memcpy>
c001a198:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a19a:	40                   	inc    eax
c001a19b:	89 03                	mov    DWORD PTR [ebx],eax
c001a19d:	c1 e0 03             	shl    eax,0x3
c001a1a0:	5a                   	pop    edx
c001a1a1:	59                   	pop    ecx
c001a1a2:	50                   	push   eax
c001a1a3:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001a1a6:	e8 25 57 ff ff       	call   c000f8d0 <realloc>
c001a1ab:	83 c4 0c             	add    esp,0xc
c001a1ae:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c001a1b1:	6a 08                	push   0x8
c001a1b3:	8d 54 24 10          	lea    edx,[esp+0x10]
c001a1b7:	52                   	push   edx
c001a1b8:	8b 13                	mov    edx,DWORD PTR [ebx]
c001a1ba:	8d 44 d0 f8          	lea    eax,[eax+edx*8-0x8]
c001a1be:	50                   	push   eax
c001a1bf:	e8 80 65 fe ff       	call   c0000744 <memcpy>
c001a1c4:	83 c4 20             	add    esp,0x20
c001a1c7:	5b                   	pop    ebx
c001a1c8:	5e                   	pop    esi
c001a1c9:	5f                   	pop    edi
c001a1ca:	c3                   	ret    
c001a1cb:	90                   	nop

c001a1cc <EnvVarContainer::deleteEnv(char const*)>:
c001a1cc:	c3                   	ret    
c001a1cd:	90                   	nop

c001a1ce <EnvVarContainer::loadFrom(char const*, char const*)>:
c001a1ce:	55                   	push   ebp
c001a1cf:	57                   	push   edi
c001a1d0:	56                   	push   esi
c001a1d1:	53                   	push   ebx
c001a1d2:	81 ec 38 01 00 00    	sub    esp,0x138
c001a1d8:	8b b4 24 4c 01 00 00 	mov    esi,DWORD PTR [esp+0x14c]
c001a1df:	8b ac 24 54 01 00 00 	mov    ebp,DWORD PTR [esp+0x154]
c001a1e6:	68 14 01 00 00       	push   0x114
c001a1eb:	e8 f4 56 ff ff       	call   c000f8e4 <malloc>
c001a1f0:	83 c4 0c             	add    esp,0xc
c001a1f3:	89 c7                	mov    edi,eax
c001a1f5:	ff 76 08             	push   DWORD PTR [esi+0x8]
c001a1f8:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001a1ff:	50                   	push   eax
c001a200:	e8 37 93 ff ff       	call   c001353c <File::File(char const*, Process*)>
c001a205:	89 3c 24             	mov    DWORD PTR [esp],edi
c001a208:	e8 01 96 ff ff       	call   c001380e <File::exists()>
c001a20d:	83 c4 10             	add    esp,0x10
c001a210:	84 c0                	test   al,al
c001a212:	75 31                	jne    c001a245 <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c001a214:	51                   	push   ecx
c001a215:	51                   	push   ecx
c001a216:	6a 12                	push   0x12
c001a218:	57                   	push   edi
c001a219:	e8 82 93 ff ff       	call   c00135a0 <File::open(FileOpenMode)>
c001a21e:	8b 07                	mov    eax,DWORD PTR [edi]
c001a220:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c001a223:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001a226:	e8 69 65 fe ff       	call   c0000794 <strlen>
c001a22b:	5a                   	pop    edx
c001a22c:	31 d2                	xor    edx,edx
c001a22e:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001a232:	51                   	push   ecx
c001a233:	55                   	push   ebp
c001a234:	52                   	push   edx
c001a235:	50                   	push   eax
c001a236:	57                   	push   edi
c001a237:	ff d3                	call   ebx
c001a239:	83 c4 14             	add    esp,0x14
c001a23c:	57                   	push   edi
c001a23d:	e8 bc 93 ff ff       	call   c00135fe <File::close()>
c001a242:	83 c4 10             	add    esp,0x10
c001a245:	31 db                	xor    ebx,ebx
c001a247:	50                   	push   eax
c001a248:	31 ed                	xor    ebp,ebp
c001a24a:	68 00 01 00 00       	push   0x100
c001a24f:	6a 00                	push   0x0
c001a251:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c001a255:	50                   	push   eax
c001a256:	e8 1d 65 fe ff       	call   c0000778 <memset>
c001a25b:	58                   	pop    eax
c001a25c:	5a                   	pop    edx
c001a25d:	6a 01                	push   0x1
c001a25f:	57                   	push   edi
c001a260:	e8 3b 93 ff ff       	call   c00135a0 <File::open(FileOpenMode)>
c001a265:	83 c4 10             	add    esp,0x10
c001a268:	83 ec 0c             	sub    esp,0xc
c001a26b:	8b 07                	mov    eax,DWORD PTR [edi]
c001a26d:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001a271:	51                   	push   ecx
c001a272:	8d 54 24 23          	lea    edx,[esp+0x23]
c001a276:	52                   	push   edx
c001a277:	6a 00                	push   0x0
c001a279:	6a 01                	push   0x1
c001a27b:	57                   	push   edi
c001a27c:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001a27f:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c001a283:	83 c4 20             	add    esp,0x20
c001a286:	3c 0d                	cmp    al,0xd
c001a288:	0f 84 12 01 00 00    	je     c001a3a0 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d2>
c001a28e:	85 db                	test   ebx,ebx
c001a290:	0f 84 fd 00 00 00    	je     c001a393 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c5>
c001a296:	3c 0a                	cmp    al,0xa
c001a298:	74 13                	je     c001a2ad <EnvVarContainer::loadFrom(char const*, char const*)+0xdf>
c001a29a:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001a29f:	74 0c                	je     c001a2ad <EnvVarContainer::loadFrom(char const*, char const*)+0xdf>
c001a2a1:	81 fd fe 00 00 00    	cmp    ebp,0xfe
c001a2a7:	0f 8e e6 00 00 00    	jle    c001a393 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c5>
c001a2ad:	83 ec 0c             	sub    esp,0xc
c001a2b0:	8d 53 01             	lea    edx,[ebx+0x1]
c001a2b3:	29 dd                	sub    ebp,ebx
c001a2b5:	52                   	push   edx
c001a2b6:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001a2ba:	e8 25 56 ff ff       	call   c000f8e4 <malloc>
c001a2bf:	8d 4d 04             	lea    ecx,[ebp+0x4]
c001a2c2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001a2c6:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001a2c9:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c001a2cd:	e8 12 56 ff ff       	call   c000f8e4 <malloc>
c001a2d2:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001a2d6:	83 c4 0c             	add    esp,0xc
c001a2d9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a2dd:	52                   	push   edx
c001a2de:	6a 00                	push   0x0
c001a2e0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001a2e4:	e8 8f 64 fe ff       	call   c0000778 <memset>
c001a2e9:	83 c4 0c             	add    esp,0xc
c001a2ec:	53                   	push   ebx
c001a2ed:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c001a2f1:	55                   	push   ebp
c001a2f2:	01 eb                	add    ebx,ebp
c001a2f4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001a2f8:	e8 47 64 fe ff       	call   c0000744 <memcpy>
c001a2fd:	83 c4 0c             	add    esp,0xc
c001a300:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001a304:	51                   	push   ecx
c001a305:	6a 00                	push   0x0
c001a307:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001a30b:	e8 68 64 fe ff       	call   c0000778 <memset>
c001a310:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a313:	e8 7c 64 fe ff       	call   c0000794 <strlen>
c001a318:	83 c4 0c             	add    esp,0xc
c001a31b:	50                   	push   eax
c001a31c:	53                   	push   ebx
c001a31d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001a321:	e8 1e 64 fe ff       	call   c0000744 <memcpy>
c001a326:	5b                   	pop    ebx
c001a327:	58                   	pop    eax
c001a328:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001a32c:	68 7d bc 02 c0       	push   0xc002bc7d
c001a331:	e8 ad 8c ff ff       	call   c0012fe3 <Dbg::kprintf(char const*, ...)>
c001a336:	8b 06                	mov    eax,DWORD PTR [esi]
c001a338:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c001a33b:	40                   	inc    eax
c001a33c:	83 c4 10             	add    esp,0x10
c001a33f:	89 06                	mov    DWORD PTR [esi],eax
c001a341:	85 d2                	test   edx,edx
c001a343:	75 0c                	jne    c001a351 <EnvVarContainer::loadFrom(char const*, char const*)+0x183>
c001a345:	83 ec 0c             	sub    esp,0xc
c001a348:	6a 08                	push   0x8
c001a34a:	e8 95 55 ff ff       	call   c000f8e4 <malloc>
c001a34f:	eb 0c                	jmp    c001a35d <EnvVarContainer::loadFrom(char const*, char const*)+0x18f>
c001a351:	c1 e0 03             	shl    eax,0x3
c001a354:	51                   	push   ecx
c001a355:	51                   	push   ecx
c001a356:	50                   	push   eax
c001a357:	52                   	push   edx
c001a358:	e8 73 55 ff ff       	call   c000f8d0 <realloc>
c001a35d:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
c001a360:	83 c4 10             	add    esp,0x10
c001a363:	31 db                	xor    ebx,ebx
c001a365:	52                   	push   edx
c001a366:	6a 08                	push   0x8
c001a368:	8d 44 24 20          	lea    eax,[esp+0x20]
c001a36c:	50                   	push   eax
c001a36d:	8b 16                	mov    edx,DWORD PTR [esi]
c001a36f:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001a372:	8d 44 d0 f8          	lea    eax,[eax+edx*8-0x8]
c001a376:	50                   	push   eax
c001a377:	e8 c8 63 fe ff       	call   c0000744 <memcpy>
c001a37c:	83 c4 0c             	add    esp,0xc
c001a37f:	68 00 01 00 00       	push   0x100
c001a384:	6a 00                	push   0x0
c001a386:	55                   	push   ebp
c001a387:	31 ed                	xor    ebp,ebp
c001a389:	e8 ea 63 fe ff       	call   c0000778 <memset>
c001a38e:	83 c4 10             	add    esp,0x10
c001a391:	eb 0d                	jmp    c001a3a0 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d2>
c001a393:	3c 3d                	cmp    al,0x3d
c001a395:	74 07                	je     c001a39e <EnvVarContainer::loadFrom(char const*, char const*)+0x1d0>
c001a397:	88 44 2c 20          	mov    BYTE PTR [esp+ebp*1+0x20],al
c001a39b:	45                   	inc    ebp
c001a39c:	eb 02                	jmp    c001a3a0 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d2>
c001a39e:	89 eb                	mov    ebx,ebp
c001a3a0:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001a3a5:	0f 85 bd fe ff ff    	jne    c001a268 <EnvVarContainer::loadFrom(char const*, char const*)+0x9a>
c001a3ab:	50                   	push   eax
c001a3ac:	50                   	push   eax
c001a3ad:	ff 36                	push   DWORD PTR [esi]
c001a3af:	68 8b bc 02 c0       	push   0xc002bc8b
c001a3b4:	e8 2a 8c ff ff       	call   c0012fe3 <Dbg::kprintf(char const*, ...)>
c001a3b9:	81 c4 3c 01 00 00    	add    esp,0x13c
c001a3bf:	5b                   	pop    ebx
c001a3c0:	5e                   	pop    esi
c001a3c1:	5f                   	pop    edi
c001a3c2:	5d                   	pop    ebp
c001a3c3:	c3                   	ret    

c001a3c4 <EnvVarContainer::__loadSystem()>:
c001a3c4:	83 ec 10             	sub    esp,0x10
c001a3c7:	68 20 dc 02 c0       	push   0xc002dc20
c001a3cc:	68 b6 bc 02 c0       	push   0xc002bcb6
c001a3d1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a3d5:	e8 f4 fd ff ff       	call   c001a1ce <EnvVarContainer::loadFrom(char const*, char const*)>
c001a3da:	83 c4 1c             	add    esp,0x1c
c001a3dd:	c3                   	ret    

c001a3de <EnvVarContainer::__loadUser()>:
c001a3de:	c3                   	ret    
c001a3df:	90                   	nop

c001a3e0 <EnvVarContainer::EnvVarContainer(Process*)>:
c001a3e0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a3e4:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001a3ea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a3ee:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a3f2:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001a3f5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a3f9:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001a400:	90                   	nop
c001a401:	c3                   	ret    

c001a402 <EnvVarContainer::~EnvVarContainer()>:
c001a402:	83 ec 0c             	sub    esp,0xc
c001a405:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a409:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001a40c:	85 c0                	test   eax,eax
c001a40e:	74 1d                	je     c001a42d <EnvVarContainer::~EnvVarContainer()+0x2b>
c001a410:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a414:	8b 00                	mov    eax,DWORD PTR [eax]
c001a416:	85 c0                	test   eax,eax
c001a418:	74 13                	je     c001a42d <EnvVarContainer::~EnvVarContainer()+0x2b>
c001a41a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a41e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001a421:	83 ec 0c             	sub    esp,0xc
c001a424:	50                   	push   eax
c001a425:	e8 ca 54 ff ff       	call   c000f8f4 <free>
c001a42a:	83 c4 10             	add    esp,0x10
c001a42d:	90                   	nop
c001a42e:	83 c4 0c             	add    esp,0xc
c001a431:	c3                   	ret    

c001a432 <Krnl::getEnv(Process*, char const*)>:
c001a432:	53                   	push   ebx
c001a433:	83 ec 08             	sub    esp,0x8
c001a436:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a43a:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001a43e:	39 05 58 1c 03 c0    	cmp    DWORD PTR ds:0xc0031c58,eax
c001a444:	74 04                	je     c001a44a <Krnl::getEnv(Process*, char const*)+0x18>
c001a446:	85 c0                	test   eax,eax
c001a448:	75 0b                	jne    c001a455 <Krnl::getEnv(Process*, char const*)+0x23>
c001a44a:	a1 34 12 03 c0       	mov    eax,ds:0xc0031234
c001a44f:	85 c0                	test   eax,eax
c001a451:	75 19                	jne    c001a46c <Krnl::getEnv(Process*, char const*)+0x3a>
c001a453:	eb 27                	jmp    c001a47c <Krnl::getEnv(Process*, char const*)+0x4a>
c001a455:	52                   	push   edx
c001a456:	52                   	push   edx
c001a457:	53                   	push   ebx
c001a458:	ff b0 3a 07 00 00    	push   DWORD PTR [eax+0x73a]
c001a45e:	e8 5f fc ff ff       	call   c001a0c2 <EnvVarContainer::getEnv(char const*)>
c001a463:	83 c4 10             	add    esp,0x10
c001a466:	85 c0                	test   eax,eax
c001a468:	75 28                	jne    c001a492 <Krnl::getEnv(Process*, char const*)+0x60>
c001a46a:	eb de                	jmp    c001a44a <Krnl::getEnv(Process*, char const*)+0x18>
c001a46c:	52                   	push   edx
c001a46d:	52                   	push   edx
c001a46e:	53                   	push   ebx
c001a46f:	50                   	push   eax
c001a470:	e8 4d fc ff ff       	call   c001a0c2 <EnvVarContainer::getEnv(char const*)>
c001a475:	83 c4 10             	add    esp,0x10
c001a478:	85 c0                	test   eax,eax
c001a47a:	75 16                	jne    c001a492 <Krnl::getEnv(Process*, char const*)+0x60>
c001a47c:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001a480:	a1 38 12 03 c0       	mov    eax,ds:0xc0031238
c001a485:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001a489:	83 c4 08             	add    esp,0x8
c001a48c:	5b                   	pop    ebx
c001a48d:	e9 30 fc ff ff       	jmp    c001a0c2 <EnvVarContainer::getEnv(char const*)>
c001a492:	83 c4 08             	add    esp,0x8
c001a495:	5b                   	pop    ebx
c001a496:	c3                   	ret    

c001a497 <Krnl::setEnvSystem(char const*, char const*)>:
c001a497:	83 ec 10             	sub    esp,0x10
c001a49a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a49e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a4a2:	ff 35 38 12 03 c0    	push   DWORD PTR ds:0xc0031238
c001a4a8:	e8 53 fc ff ff       	call   c001a100 <EnvVarContainer::setEnv(char const*, char const*)>
c001a4ad:	83 c4 1c             	add    esp,0x1c
c001a4b0:	c3                   	ret    

c001a4b1 <Krnl::setEnvUser(char const*, char const*)>:
c001a4b1:	a1 34 12 03 c0       	mov    eax,ds:0xc0031234
c001a4b6:	85 c0                	test   eax,eax
c001a4b8:	74 15                	je     c001a4cf <Krnl::setEnvUser(char const*, char const*)+0x1e>
c001a4ba:	83 ec 10             	sub    esp,0x10
c001a4bd:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a4c1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a4c5:	50                   	push   eax
c001a4c6:	e8 35 fc ff ff       	call   c001a100 <EnvVarContainer::setEnv(char const*, char const*)>
c001a4cb:	83 c4 1c             	add    esp,0x1c
c001a4ce:	c3                   	ret    
c001a4cf:	c3                   	ret    

c001a4d0 <Krnl::setEnvProcess(Process*, char const*, char const*)>:
c001a4d0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a4d4:	8b 80 3a 07 00 00    	mov    eax,DWORD PTR [eax+0x73a]
c001a4da:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a4de:	e9 1d fc ff ff       	jmp    c001a100 <EnvVarContainer::setEnv(char const*, char const*)>

c001a4e3 <Krnl::deleteEnvSystem(char const*)>:
c001a4e3:	c3                   	ret    

c001a4e4 <Krnl::deleteEnvUser(char const*)>:
c001a4e4:	c3                   	ret    

c001a4e5 <Krnl::deleteEnvProcess(Process*, char const*)>:
c001a4e5:	c3                   	ret    

c001a4e6 <Krnl::newProcessEnv(Process*)>:
c001a4e6:	83 ec 28             	sub    esp,0x28
c001a4e9:	6a 0c                	push   0xc
c001a4eb:	e8 f4 53 ff ff       	call   c000f8e4 <malloc>
c001a4f0:	5a                   	pop    edx
c001a4f1:	59                   	pop    ecx
c001a4f2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001a4f6:	50                   	push   eax
c001a4f7:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a4fb:	e8 e0 fe ff ff       	call   c001a3e0 <EnvVarContainer::EnvVarContainer(Process*)>
c001a500:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a504:	83 c4 2c             	add    esp,0x2c
c001a507:	c3                   	ret    

c001a508 <Krnl::copyProcessEnv(Process*, Process*)>:
c001a508:	56                   	push   esi
c001a509:	53                   	push   ebx
c001a50a:	83 ec 10             	sub    esp,0x10
c001a50d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a511:	8b b0 3a 07 00 00    	mov    esi,DWORD PTR [eax+0x73a]
c001a517:	6a 0c                	push   0xc
c001a519:	e8 c6 53 ff ff       	call   c000f8e4 <malloc>
c001a51e:	89 c3                	mov    ebx,eax
c001a520:	58                   	pop    eax
c001a521:	5a                   	pop    edx
c001a522:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a526:	53                   	push   ebx
c001a527:	e8 b4 fe ff ff       	call   c001a3e0 <EnvVarContainer::EnvVarContainer(Process*)>
c001a52c:	8b 06                	mov    eax,DWORD PTR [esi]
c001a52e:	89 03                	mov    DWORD PTR [ebx],eax
c001a530:	c1 e0 03             	shl    eax,0x3
c001a533:	89 04 24             	mov    DWORD PTR [esp],eax
c001a536:	e8 a9 53 ff ff       	call   c000f8e4 <malloc>
c001a53b:	83 c4 0c             	add    esp,0xc
c001a53e:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c001a541:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001a543:	8d 14 cd 00 00 00 00 	lea    edx,[ecx*8+0x0]
c001a54a:	52                   	push   edx
c001a54b:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001a54e:	50                   	push   eax
c001a54f:	e8 f0 61 fe ff       	call   c0000744 <memcpy>
c001a554:	89 d8                	mov    eax,ebx
c001a556:	83 c4 14             	add    esp,0x14
c001a559:	5b                   	pop    ebx
c001a55a:	5e                   	pop    esi
c001a55b:	c3                   	ret    

c001a55c <Krnl::loadSystemEnv()>:
c001a55c:	53                   	push   ebx
c001a55d:	83 ec 14             	sub    esp,0x14
c001a560:	6a 0c                	push   0xc
c001a562:	e8 7d 53 ff ff       	call   c000f8e4 <malloc>
c001a567:	89 c3                	mov    ebx,eax
c001a569:	58                   	pop    eax
c001a56a:	5a                   	pop    edx
c001a56b:	ff 35 58 1c 03 c0    	push   DWORD PTR ds:0xc0031c58
c001a571:	53                   	push   ebx
c001a572:	e8 69 fe ff ff       	call   c001a3e0 <EnvVarContainer::EnvVarContainer(Process*)>
c001a577:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a57a:	89 1d 38 12 03 c0    	mov    DWORD PTR ds:0xc0031238,ebx
c001a580:	e8 3f fe ff ff       	call   c001a3c4 <EnvVarContainer::__loadSystem()>
c001a585:	83 c4 18             	add    esp,0x18
c001a588:	5b                   	pop    ebx
c001a589:	c3                   	ret    

c001a58a <Krnl::loadUserEnv()>:
c001a58a:	53                   	push   ebx
c001a58b:	83 ec 14             	sub    esp,0x14
c001a58e:	6a 0c                	push   0xc
c001a590:	e8 4f 53 ff ff       	call   c000f8e4 <malloc>
c001a595:	89 c3                	mov    ebx,eax
c001a597:	58                   	pop    eax
c001a598:	5a                   	pop    edx
c001a599:	ff 35 58 1c 03 c0    	push   DWORD PTR ds:0xc0031c58
c001a59f:	53                   	push   ebx
c001a5a0:	e8 3b fe ff ff       	call   c001a3e0 <EnvVarContainer::EnvVarContainer(Process*)>
c001a5a5:	89 1d 34 12 03 c0    	mov    DWORD PTR ds:0xc0031234,ebx
c001a5ab:	83 c4 18             	add    esp,0x18
c001a5ae:	5b                   	pop    ebx
c001a5af:	c3                   	ret    

c001a5b0 <Krnl::flushEnv()>:
c001a5b0:	c3                   	ret    

c001a5b1 <Krnl::getProcessTotalEnvCount(Process*)>:
c001a5b1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a5b5:	8b 15 34 12 03 c0    	mov    edx,DWORD PTR ds:0xc0031234
c001a5bb:	8b 88 3a 07 00 00    	mov    ecx,DWORD PTR [eax+0x73a]
c001a5c1:	a1 38 12 03 c0       	mov    eax,ds:0xc0031238
c001a5c6:	8b 00                	mov    eax,DWORD PTR [eax]
c001a5c8:	03 01                	add    eax,DWORD PTR [ecx]
c001a5ca:	85 d2                	test   edx,edx
c001a5cc:	74 02                	je     c001a5d0 <Krnl::getProcessTotalEnvCount(Process*)+0x1f>
c001a5ce:	03 02                	add    eax,DWORD PTR [edx]
c001a5d0:	c3                   	ret    

c001a5d1 <Krnl::getProcessEnvPair(Process*, int)>:
c001a5d1:	57                   	push   edi
c001a5d2:	8b 0d 34 12 03 c0    	mov    ecx,DWORD PTR ds:0xc0031234
c001a5d8:	56                   	push   esi
c001a5d9:	85 c9                	test   ecx,ecx
c001a5db:	53                   	push   ebx
c001a5dc:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001a5e0:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a5e4:	8b 97 3a 07 00 00    	mov    edx,DWORD PTR [edi+0x73a]
c001a5ea:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a5ee:	8b 02                	mov    eax,DWORD PTR [edx]
c001a5f0:	75 47                	jne    c001a639 <Krnl::getProcessEnvPair(Process*, int)+0x68>
c001a5f2:	39 c3                	cmp    ebx,eax
c001a5f4:	7c 47                	jl     c001a63d <Krnl::getProcessEnvPair(Process*, int)+0x6c>
c001a5f6:	8b 15 38 12 03 c0    	mov    edx,DWORD PTR ds:0xc0031238
c001a5fc:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001a5fe:	01 c1                	add    ecx,eax
c001a600:	39 d9                	cmp    ecx,ebx
c001a602:	7e 6c                	jle    c001a670 <Krnl::getProcessEnvPair(Process*, int)+0x9f>
c001a604:	51                   	push   ecx
c001a605:	89 d9                	mov    ecx,ebx
c001a607:	29 c1                	sub    ecx,eax
c001a609:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c001a60c:	ff 74 c8 04          	push   DWORD PTR [eax+ecx*8+0x4]
c001a610:	53                   	push   ebx
c001a611:	68 d8 bc 02 c0       	push   0xc002bcd8
c001a616:	e8 c8 89 ff ff       	call   c0012fe3 <Dbg::kprintf(char const*, ...)>
c001a61b:	8b 87 3a 07 00 00    	mov    eax,DWORD PTR [edi+0x73a]
c001a621:	2b 18                	sub    ebx,DWORD PTR [eax]
c001a623:	a1 38 12 03 c0       	mov    eax,ds:0xc0031238
c001a628:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001a62b:	8b 54 d8 04          	mov    edx,DWORD PTR [eax+ebx*8+0x4]
c001a62f:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c001a632:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c001a635:	89 06                	mov    DWORD PTR [esi],eax
c001a637:	eb 51                	jmp    c001a68a <Krnl::getProcessEnvPair(Process*, int)+0xb9>
c001a639:	39 c3                	cmp    ebx,eax
c001a63b:	7d 05                	jge    c001a642 <Krnl::getProcessEnvPair(Process*, int)+0x71>
c001a63d:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c001a640:	eb 20                	jmp    c001a662 <Krnl::getProcessEnvPair(Process*, int)+0x91>
c001a642:	8b 39                	mov    edi,DWORD PTR [ecx]
c001a644:	8d 14 07             	lea    edx,[edi+eax*1]
c001a647:	39 da                	cmp    edx,ebx
c001a649:	7e 04                	jle    c001a64f <Krnl::getProcessEnvPair(Process*, int)+0x7e>
c001a64b:	29 c3                	sub    ebx,eax
c001a64d:	eb 10                	jmp    c001a65f <Krnl::getProcessEnvPair(Process*, int)+0x8e>
c001a64f:	8b 0d 38 12 03 c0    	mov    ecx,DWORD PTR ds:0xc0031238
c001a655:	03 11                	add    edx,DWORD PTR [ecx]
c001a657:	39 da                	cmp    edx,ebx
c001a659:	7e 15                	jle    c001a670 <Krnl::getProcessEnvPair(Process*, int)+0x9f>
c001a65b:	29 c3                	sub    ebx,eax
c001a65d:	29 fb                	sub    ebx,edi
c001a65f:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c001a662:	8b 54 d8 04          	mov    edx,DWORD PTR [eax+ebx*8+0x4]
c001a666:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c001a669:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c001a66c:	89 06                	mov    DWORD PTR [esi],eax
c001a66e:	eb 1d                	jmp    c001a68d <Krnl::getProcessEnvPair(Process*, int)+0xbc>
c001a670:	83 ec 0c             	sub    esp,0xc
c001a673:	68 ec bc 02 c0       	push   0xc002bcec
c001a678:	e8 18 00 00 00       	call   c001a695 <Krnl::panic(char const*)>
c001a67d:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c001a683:	c7 46 04 00 00 00 00 	mov    DWORD PTR [esi+0x4],0x0
c001a68a:	83 c4 10             	add    esp,0x10
c001a68d:	89 f0                	mov    eax,esi
c001a68f:	5b                   	pop    ebx
c001a690:	5e                   	pop    esi
c001a691:	5f                   	pop    edi
c001a692:	c2 04 00             	ret    0x4

c001a695 <Krnl::panic(char const*)>:
c001a695:	55                   	push   ebp
c001a696:	89 e5                	mov    ebp,esp
c001a698:	53                   	push   ebx
c001a699:	83 ec 0c             	sub    esp,0xc
c001a69c:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c001a69f:	fa                   	cli    
c001a6a0:	c6 05 44 12 03 c0 01 	mov    BYTE PTR ds:0xc0031244,0x1
c001a6a7:	53                   	push   ebx
c001a6a8:	c6 05 24 d6 02 c0 00 	mov    BYTE PTR ds:0xc002d624,0x0
c001a6af:	68 06 bd 02 c0       	push   0xc002bd06
c001a6b4:	e8 2a 89 ff ff       	call   c0012fe3 <Dbg::kprintf(char const*, ...)>
c001a6b9:	58                   	pop    eax
c001a6ba:	a1 58 1c 03 c0       	mov    eax,ds:0xc0031c58
c001a6bf:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a6c5:	e8 0b 67 ff ff       	call   c0010dd5 <setActiveTerminal(VgaText*)>
c001a6ca:	83 c4 0c             	add    esp,0xc
c001a6cd:	a1 58 1c 03 c0       	mov    eax,ds:0xc0031c58
c001a6d2:	6a 01                	push   0x1
c001a6d4:	6a 0f                	push   0xf
c001a6d6:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a6dc:	e8 25 61 ff ff       	call   c0010806 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001a6e1:	58                   	pop    eax
c001a6e2:	a1 58 1c 03 c0       	mov    eax,ds:0xc0031c58
c001a6e7:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a6ed:	e8 84 69 ff ff       	call   c0011076 <VgaText::clearScreen()>
c001a6f2:	58                   	pop    eax
c001a6f3:	a1 58 1c 03 c0       	mov    eax,ds:0xc0031c58
c001a6f8:	5a                   	pop    edx
c001a6f9:	68 1f bd 02 c0       	push   0xc002bd1f
c001a6fe:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a704:	e8 eb 6a ff ff       	call   c00111f4 <VgaText::puts(char const*)>
c001a709:	59                   	pop    ecx
c001a70a:	58                   	pop    eax
c001a70b:	a1 58 1c 03 c0       	mov    eax,ds:0xc0031c58
c001a710:	68 c4 bd 02 c0       	push   0xc002bdc4
c001a715:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a71b:	e8 d4 6a ff ff       	call   c00111f4 <VgaText::puts(char const*)>
c001a720:	58                   	pop    eax
c001a721:	a1 58 1c 03 c0       	mov    eax,ds:0xc0031c58
c001a726:	5a                   	pop    edx
c001a727:	68 3b bd 02 c0       	push   0xc002bd3b
c001a72c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a732:	e8 bd 6a ff ff       	call   c00111f4 <VgaText::puts(char const*)>
c001a737:	59                   	pop    ecx
c001a738:	58                   	pop    eax
c001a739:	a1 58 1c 03 c0       	mov    eax,ds:0xc0031c58
c001a73e:	53                   	push   ebx
c001a73f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a745:	e8 aa 6a ff ff       	call   c00111f4 <VgaText::puts(char const*)>
c001a74a:	58                   	pop    eax
c001a74b:	a1 58 1c 03 c0       	mov    eax,ds:0xc0031c58
c001a750:	5a                   	pop    edx
c001a751:	68 5b bd 02 c0       	push   0xc002bd5b
c001a756:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a75c:	e8 93 6a ff ff       	call   c00111f4 <VgaText::puts(char const*)>
c001a761:	a1 40 12 03 c0       	mov    eax,ds:0xc0031240
c001a766:	83 c4 10             	add    esp,0x10
c001a769:	85 c0                	test   eax,eax
c001a76b:	74 02                	je     c001a76f <Krnl::panic(char const*)+0xda>
c001a76d:	ff d0                	call   eax
c001a76f:	83 ec 0c             	sub    esp,0xc
c001a772:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001a775:	e8 47 30 00 00       	call   c001d7c1 <Thr::getDriverNameFromAddress(unsigned long)>
c001a77a:	83 c4 10             	add    esp,0x10
c001a77d:	89 c3                	mov    ebx,eax
c001a77f:	85 c0                	test   eax,eax
c001a781:	0f 84 50 02 00 00    	je     c001a9d7 <Krnl::panic(char const*)+0x342>
c001a787:	83 ec 08             	sub    esp,0x8
c001a78a:	8b 15 58 1c 03 c0    	mov    edx,DWORD PTR ds:0xc0031c58
c001a790:	68 00 be 02 c0       	push   0xc002be00
c001a795:	ff b2 26 05 00 00    	push   DWORD PTR [edx+0x526]
c001a79b:	e8 54 6a ff ff       	call   c00111f4 <VgaText::puts(char const*)>
c001a7a0:	58                   	pop    eax
c001a7a1:	5a                   	pop    edx
c001a7a2:	8b 15 58 1c 03 c0    	mov    edx,DWORD PTR ds:0xc0031c58
c001a7a8:	68 3b bd 02 c0       	push   0xc002bd3b
c001a7ad:	ff b2 26 05 00 00    	push   DWORD PTR [edx+0x526]
c001a7b3:	e8 3c 6a ff ff       	call   c00111f4 <VgaText::puts(char const*)>
c001a7b8:	59                   	pop    ecx
c001a7b9:	58                   	pop    eax
c001a7ba:	a1 58 1c 03 c0       	mov    eax,ds:0xc0031c58
c001a7bf:	53                   	push   ebx
c001a7c0:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a7c6:	e8 29 6a ff ff       	call   c00111f4 <VgaText::puts(char const*)>
c001a7cb:	83 c4 10             	add    esp,0x10
c001a7ce:	83 ec 08             	sub    esp,0x8
c001a7d1:	a1 58 1c 03 c0       	mov    eax,ds:0xc0031c58
c001a7d6:	68 5a bd 02 c0       	push   0xc002bd5a
c001a7db:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a7e1:	e8 0e 6a ff ff       	call   c00111f4 <VgaText::puts(char const*)>
c001a7e6:	58                   	pop    eax
c001a7e7:	a1 58 1c 03 c0       	mov    eax,ds:0xc0031c58
c001a7ec:	5a                   	pop    edx
c001a7ed:	68 58 be 02 c0       	push   0xc002be58
c001a7f2:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a7f8:	e8 f7 69 ff ff       	call   c00111f4 <VgaText::puts(char const*)>
c001a7fd:	59                   	pop    ecx
c001a7fe:	a1 58 1c 03 c0       	mov    eax,ds:0xc0031c58
c001a803:	5b                   	pop    ebx
c001a804:	68 98 be 02 c0       	push   0xc002be98
c001a809:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a80f:	e8 e0 69 ff ff       	call   c00111f4 <VgaText::puts(char const*)>
c001a814:	58                   	pop    eax
c001a815:	a1 58 1c 03 c0       	mov    eax,ds:0xc0031c58
c001a81a:	5a                   	pop    edx
c001a81b:	68 46 bd 02 c0       	push   0xc002bd46
c001a820:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a826:	e8 c9 69 ff ff       	call   c00111f4 <VgaText::puts(char const*)>
c001a82b:	59                   	pop    ecx
c001a82c:	5b                   	pop    ebx
c001a82d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001a830:	68 5e bd 02 c0       	push   0xc002bd5e
c001a835:	e8 a9 87 ff ff       	call   c0012fe3 <Dbg::kprintf(char const*, ...)>
c001a83a:	58                   	pop    eax
c001a83b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001a83e:	5a                   	pop    edx
c001a83f:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001a842:	68 67 bd 02 c0       	push   0xc002bd67
c001a847:	e8 97 87 ff ff       	call   c0012fe3 <Dbg::kprintf(char const*, ...)>
c001a84c:	59                   	pop    ecx
c001a84d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001a850:	5b                   	pop    ebx
c001a851:	8b 00                	mov    eax,DWORD PTR [eax]
c001a853:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001a856:	68 70 bd 02 c0       	push   0xc002bd70
c001a85b:	e8 83 87 ff ff       	call   c0012fe3 <Dbg::kprintf(char const*, ...)>
c001a860:	58                   	pop    eax
c001a861:	a1 58 1c 03 c0       	mov    eax,ds:0xc0031c58
c001a866:	5a                   	pop    edx
c001a867:	68 dc be 02 c0       	push   0xc002bedc
c001a86c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a872:	e8 7d 69 ff ff       	call   c00111f4 <VgaText::puts(char const*)>
c001a877:	59                   	pop    ecx
c001a878:	a1 58 1c 03 c0       	mov    eax,ds:0xc0031c58
c001a87d:	5b                   	pop    ebx
c001a87e:	68 79 bd 02 c0       	push   0xc002bd79
c001a883:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a889:	e8 66 69 ff ff       	call   c00111f4 <VgaText::puts(char const*)>
c001a88e:	0f 20 c0             	mov    eax,cr0
c001a891:	5a                   	pop    edx
c001a892:	59                   	pop    ecx
c001a893:	50                   	push   eax
c001a894:	a1 58 1c 03 c0       	mov    eax,ds:0xc0031c58
c001a899:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a89f:	e8 76 69 ff ff       	call   c001121a <VgaText::putx(unsigned int)>
c001a8a4:	5b                   	pop    ebx
c001a8a5:	58                   	pop    eax
c001a8a6:	a1 58 1c 03 c0       	mov    eax,ds:0xc0031c58
c001a8ab:	68 83 bd 02 c0       	push   0xc002bd83
c001a8b0:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a8b6:	e8 39 69 ff ff       	call   c00111f4 <VgaText::puts(char const*)>
c001a8bb:	0f 20 d0             	mov    eax,cr2
c001a8be:	5a                   	pop    edx
c001a8bf:	59                   	pop    ecx
c001a8c0:	50                   	push   eax
c001a8c1:	a1 58 1c 03 c0       	mov    eax,ds:0xc0031c58
c001a8c6:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a8cc:	e8 49 69 ff ff       	call   c001121a <VgaText::putx(unsigned int)>
c001a8d1:	5b                   	pop    ebx
c001a8d2:	58                   	pop    eax
c001a8d3:	a1 58 1c 03 c0       	mov    eax,ds:0xc0031c58
c001a8d8:	68 8d bd 02 c0       	push   0xc002bd8d
c001a8dd:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a8e3:	e8 0c 69 ff ff       	call   c00111f4 <VgaText::puts(char const*)>
c001a8e8:	0f 20 d8             	mov    eax,cr3
c001a8eb:	5a                   	pop    edx
c001a8ec:	59                   	pop    ecx
c001a8ed:	50                   	push   eax
c001a8ee:	a1 58 1c 03 c0       	mov    eax,ds:0xc0031c58
c001a8f3:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a8f9:	e8 1c 69 ff ff       	call   c001121a <VgaText::putx(unsigned int)>
c001a8fe:	5b                   	pop    ebx
c001a8ff:	58                   	pop    eax
c001a900:	a1 58 1c 03 c0       	mov    eax,ds:0xc0031c58
c001a905:	68 a0 bd 02 c0       	push   0xc002bda0
c001a90a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a910:	e8 df 68 ff ff       	call   c00111f4 <VgaText::puts(char const*)>
c001a915:	0f 20 e0             	mov    eax,cr4
c001a918:	5a                   	pop    edx
c001a919:	59                   	pop    ecx
c001a91a:	50                   	push   eax
c001a91b:	a1 58 1c 03 c0       	mov    eax,ds:0xc0031c58
c001a920:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a926:	e8 ef 68 ff ff       	call   c001121a <VgaText::putx(unsigned int)>
c001a92b:	5b                   	pop    ebx
c001a92c:	58                   	pop    eax
c001a92d:	a1 58 1c 03 c0       	mov    eax,ds:0xc0031c58
c001a932:	68 aa bd 02 c0       	push   0xc002bdaa
c001a937:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a93d:	e8 b2 68 ff ff       	call   c00111f4 <VgaText::puts(char const*)>
c001a942:	5a                   	pop    edx
c001a943:	a1 58 1c 03 c0       	mov    eax,ds:0xc0031c58
c001a948:	59                   	pop    ecx
c001a949:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001a94f:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001a952:	50                   	push   eax
c001a953:	e8 c2 68 ff ff       	call   c001121a <VgaText::putx(unsigned int)>
c001a958:	5b                   	pop    ebx
c001a959:	58                   	pop    eax
c001a95a:	a1 58 1c 03 c0       	mov    eax,ds:0xc0031c58
c001a95f:	68 c1 bd 02 c0       	push   0xc002bdc1
c001a964:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a96a:	e8 85 68 ff ff       	call   c00111f4 <VgaText::puts(char const*)>
c001a96f:	5a                   	pop    edx
c001a970:	a1 58 1c 03 c0       	mov    eax,ds:0xc0031c58
c001a975:	59                   	pop    ecx
c001a976:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001a97c:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001a97f:	ff 72 04             	push   DWORD PTR [edx+0x4]
c001a982:	50                   	push   eax
c001a983:	e8 92 68 ff ff       	call   c001121a <VgaText::putx(unsigned int)>
c001a988:	5b                   	pop    ebx
c001a989:	58                   	pop    eax
c001a98a:	a1 58 1c 03 c0       	mov    eax,ds:0xc0031c58
c001a98f:	68 c1 bd 02 c0       	push   0xc002bdc1
c001a994:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a99a:	e8 55 68 ff ff       	call   c00111f4 <VgaText::puts(char const*)>
c001a99f:	a1 58 1c 03 c0       	mov    eax,ds:0xc0031c58
c001a9a4:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001a9a7:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001a9ad:	8b 12                	mov    edx,DWORD PTR [edx]
c001a9af:	59                   	pop    ecx
c001a9b0:	5b                   	pop    ebx
c001a9b1:	ff 72 04             	push   DWORD PTR [edx+0x4]
c001a9b4:	50                   	push   eax
c001a9b5:	e8 60 68 ff ff       	call   c001121a <VgaText::putx(unsigned int)>
c001a9ba:	83 c4 10             	add    esp,0x10
c001a9bd:	b2 fe                	mov    dl,0xfe
c001a9bf:	e4 60                	in     al,0x60
c001a9c1:	3c 1c                	cmp    al,0x1c
c001a9c3:	74 04                	je     c001a9c9 <Krnl::panic(char const*)+0x334>
c001a9c5:	3c 5a                	cmp    al,0x5a
c001a9c7:	75 f6                	jne    c001a9bf <Krnl::panic(char const*)+0x32a>
c001a9c9:	e4 64                	in     al,0x64
c001a9cb:	a8 02                	test   al,0x2
c001a9cd:	75 fa                	jne    c001a9c9 <Krnl::panic(char const*)+0x334>
c001a9cf:	88 d0                	mov    al,dl
c001a9d1:	e6 64                	out    0x64,al
c001a9d3:	fa                   	cli    
c001a9d4:	f4                   	hlt    
c001a9d5:	eb e8                	jmp    c001a9bf <Krnl::panic(char const*)+0x32a>
c001a9d7:	50                   	push   eax
c001a9d8:	50                   	push   eax
c001a9d9:	a1 58 1c 03 c0       	mov    eax,ds:0xc0031c58
c001a9de:	68 2c be 02 c0       	push   0xc002be2c
c001a9e3:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a9e9:	e8 06 68 ff ff       	call   c00111f4 <VgaText::puts(char const*)>
c001a9ee:	58                   	pop    eax
c001a9ef:	a1 58 1c 03 c0       	mov    eax,ds:0xc0031c58
c001a9f4:	5a                   	pop    edx
c001a9f5:	68 3b bd 02 c0       	push   0xc002bd3b
c001a9fa:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001aa00:	e8 ef 67 ff ff       	call   c00111f4 <VgaText::puts(char const*)>
c001aa05:	59                   	pop    ecx
c001aa06:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001aa0b:	5b                   	pop    ebx
c001aa0c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001aa0f:	83 c0 0c             	add    eax,0xc
c001aa12:	50                   	push   eax
c001aa13:	a1 58 1c 03 c0       	mov    eax,ds:0xc0031c58
c001aa18:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001aa1e:	e8 d1 67 ff ff       	call   c00111f4 <VgaText::puts(char const*)>
c001aa23:	83 c4 10             	add    esp,0x10
c001aa26:	e9 a3 fd ff ff       	jmp    c001a7ce <Krnl::panic(char const*)+0x139>

c001aa2b <Net::switchEndian16(unsigned short)>:
c001aa2b:	83 ec 04             	sub    esp,0x4
c001aa2e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001aa32:	66 89 04 24          	mov    WORD PTR [esp],ax
c001aa36:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c001aa3a:	c1 f8 08             	sar    eax,0x8
c001aa3d:	89 c2                	mov    edx,eax
c001aa3f:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c001aa43:	c1 e0 08             	shl    eax,0x8
c001aa46:	09 d0                	or     eax,edx
c001aa48:	83 c4 04             	add    esp,0x4
c001aa4b:	c3                   	ret    

c001aa4c <Net::switchEndian32(unsigned int)>:
c001aa4c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aa50:	c1 e8 18             	shr    eax,0x18
c001aa53:	89 c2                	mov    edx,eax
c001aa55:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aa59:	c1 e0 08             	shl    eax,0x8
c001aa5c:	25 00 00 ff 00       	and    eax,0xff0000
c001aa61:	09 c2                	or     edx,eax
c001aa63:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aa67:	c1 e8 08             	shr    eax,0x8
c001aa6a:	25 00 ff 00 00       	and    eax,0xff00
c001aa6f:	09 c2                	or     edx,eax
c001aa71:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aa75:	c1 e0 18             	shl    eax,0x18
c001aa78:	09 d0                	or     eax,edx
c001aa7a:	c3                   	ret    

c001aa7b <Net::crc32Calc(unsigned char*, int)>:
c001aa7b:	83 ec 10             	sub    esp,0x10
c001aa7e:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001aa83:	75 07                	jne    c001aa8c <Net::crc32Calc(unsigned char*, int)+0x11>
c001aa85:	b8 00 00 00 00       	mov    eax,0x0
c001aa8a:	eb 7c                	jmp    c001ab08 <Net::crc32Calc(unsigned char*, int)+0x8d>
c001aa8c:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c001aa91:	7f 07                	jg     c001aa9a <Net::crc32Calc(unsigned char*, int)+0x1f>
c001aa93:	b8 00 00 00 00       	mov    eax,0x0
c001aa98:	eb 6e                	jmp    c001ab08 <Net::crc32Calc(unsigned char*, int)+0x8d>
c001aa9a:	c7 44 24 04 ff ff ff ff 	mov    DWORD PTR [esp+0x4],0xffffffff
c001aaa2:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001aaaa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001aaae:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c001aab2:	7d 4e                	jge    c001ab02 <Net::crc32Calc(unsigned char*, int)+0x87>
c001aab4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001aab8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001aabc:	01 d0                	add    eax,edx
c001aabe:	8a 00                	mov    al,BYTE PTR [eax]
c001aac0:	0f b6 c0             	movzx  eax,al
c001aac3:	31 44 24 04          	xor    DWORD PTR [esp+0x4],eax
c001aac7:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001aacf:	83 7c 24 0c 07       	cmp    DWORD PTR [esp+0xc],0x7
c001aad4:	7f 26                	jg     c001aafc <Net::crc32Calc(unsigned char*, int)+0x81>
c001aad6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aada:	83 e0 01             	and    eax,0x1
c001aadd:	74 0d                	je     c001aaec <Net::crc32Calc(unsigned char*, int)+0x71>
c001aadf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aae3:	d1 e8                	shr    eax,1
c001aae5:	35 20 83 b8 ed       	xor    eax,0xedb88320
c001aaea:	eb 06                	jmp    c001aaf2 <Net::crc32Calc(unsigned char*, int)+0x77>
c001aaec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aaf0:	d1 e8                	shr    eax,1
c001aaf2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001aaf6:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001aafa:	eb d3                	jmp    c001aacf <Net::crc32Calc(unsigned char*, int)+0x54>
c001aafc:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c001ab00:	eb a8                	jmp    c001aaaa <Net::crc32Calc(unsigned char*, int)+0x2f>
c001ab02:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ab06:	f7 d0                	not    eax
c001ab08:	83 c4 10             	add    esp,0x10
c001ab0b:	c3                   	ret    

c001ab0c <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)>:
c001ab0c:	83 ec 1c             	sub    esp,0x1c
c001ab0f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ab13:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001ab17:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001ab1f:	83 7c 24 0c 06       	cmp    DWORD PTR [esp+0xc],0x6
c001ab24:	7f 14                	jg     c001ab3a <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x2e>
c001ab26:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ab2a:	8d 50 01             	lea    edx,[eax+0x1]
c001ab2d:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001ab31:	c6 00 aa             	mov    BYTE PTR [eax],0xaa
c001ab34:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001ab38:	eb e5                	jmp    c001ab1f <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x13>
c001ab3a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ab3e:	8d 50 01             	lea    edx,[eax+0x1]
c001ab41:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001ab45:	c6 00 ab             	mov    BYTE PTR [eax],0xab
c001ab48:	83 ec 04             	sub    esp,0x4
c001ab4b:	6a 06                	push   0x6
c001ab4d:	8d 44 24 36          	lea    eax,[esp+0x36]
c001ab51:	50                   	push   eax
c001ab52:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001ab56:	e8 e9 5b fe ff       	call   c0000744 <memcpy>
c001ab5b:	83 c4 10             	add    esp,0x10
c001ab5e:	83 44 24 38 06       	add    DWORD PTR [esp+0x38],0x6
c001ab63:	83 ec 04             	sub    esp,0x4
c001ab66:	6a 06                	push   0x6
c001ab68:	8d 44 24 30          	lea    eax,[esp+0x30]
c001ab6c:	50                   	push   eax
c001ab6d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001ab71:	e8 ce 5b fe ff       	call   c0000744 <memcpy>
c001ab76:	83 c4 10             	add    esp,0x10
c001ab79:	83 44 24 38 06       	add    DWORD PTR [esp+0x38],0x6
c001ab7e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ab82:	0f b7 c0             	movzx  eax,ax
c001ab85:	c1 f8 08             	sar    eax,0x8
c001ab88:	89 c1                	mov    ecx,eax
c001ab8a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ab8e:	8d 50 01             	lea    edx,[eax+0x1]
c001ab91:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001ab95:	88 ca                	mov    dl,cl
c001ab97:	88 10                	mov    BYTE PTR [eax],dl
c001ab99:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001ab9d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001aba1:	8d 48 01             	lea    ecx,[eax+0x1]
c001aba4:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c001aba8:	88 10                	mov    BYTE PTR [eax],dl
c001abaa:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001abae:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001abb2:	83 ec 04             	sub    esp,0x4
c001abb5:	52                   	push   edx
c001abb6:	50                   	push   eax
c001abb7:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001abbb:	e8 84 5b fe ff       	call   c0000744 <memcpy>
c001abc0:	83 c4 10             	add    esp,0x10
c001abc3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001abc7:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c001abcb:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001abcf:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c001abd3:	83 ec 08             	sub    esp,0x8
c001abd6:	50                   	push   eax
c001abd7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001abdb:	e8 9b fe ff ff       	call   c001aa7b <Net::crc32Calc(unsigned char*, int)>
c001abe0:	83 c4 10             	add    esp,0x10
c001abe3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001abe7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001abeb:	c1 e8 18             	shr    eax,0x18
c001abee:	89 c1                	mov    ecx,eax
c001abf0:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001abf4:	8d 50 01             	lea    edx,[eax+0x1]
c001abf7:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001abfb:	88 ca                	mov    dl,cl
c001abfd:	88 10                	mov    BYTE PTR [eax],dl
c001abff:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ac03:	c1 e8 10             	shr    eax,0x10
c001ac06:	89 c1                	mov    ecx,eax
c001ac08:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ac0c:	8d 50 01             	lea    edx,[eax+0x1]
c001ac0f:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001ac13:	88 ca                	mov    dl,cl
c001ac15:	88 10                	mov    BYTE PTR [eax],dl
c001ac17:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ac1b:	c1 e8 08             	shr    eax,0x8
c001ac1e:	89 c1                	mov    ecx,eax
c001ac20:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ac24:	8d 50 01             	lea    edx,[eax+0x1]
c001ac27:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001ac2b:	88 ca                	mov    dl,cl
c001ac2d:	88 10                	mov    BYTE PTR [eax],dl
c001ac2f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ac33:	8d 50 01             	lea    edx,[eax+0x1]
c001ac36:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001ac3a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001ac3e:	88 10                	mov    BYTE PTR [eax],dl
c001ac40:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001ac44:	83 c4 1c             	add    esp,0x1c
c001ac47:	c3                   	ret    

c001ac48 <Net::unwrapEthernetFrame(unsigned char*, int)>:
c001ac48:	83 ec 2c             	sub    esp,0x2c
c001ac4b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ac4f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001ac53:	83 44 24 34 08       	add    DWORD PTR [esp+0x34],0x8
c001ac58:	83 ec 04             	sub    esp,0x4
c001ac5b:	6a 06                	push   0x6
c001ac5d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001ac61:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001ac65:	83 c0 0e             	add    eax,0xe
c001ac68:	50                   	push   eax
c001ac69:	e8 d6 5a fe ff       	call   c0000744 <memcpy>
c001ac6e:	83 c4 10             	add    esp,0x10
c001ac71:	83 44 24 34 06       	add    DWORD PTR [esp+0x34],0x6
c001ac76:	83 ec 04             	sub    esp,0x4
c001ac79:	6a 06                	push   0x6
c001ac7b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001ac7f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001ac83:	83 c0 08             	add    eax,0x8
c001ac86:	50                   	push   eax
c001ac87:	e8 b8 5a fe ff       	call   c0000744 <memcpy>
c001ac8c:	83 c4 10             	add    esp,0x10
c001ac8f:	83 44 24 34 06       	add    DWORD PTR [esp+0x34],0x6
c001ac94:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ac98:	8d 50 01             	lea    edx,[eax+0x1]
c001ac9b:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001ac9f:	8a 00                	mov    al,BYTE PTR [eax]
c001aca1:	0f b6 c0             	movzx  eax,al
c001aca4:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c001aca9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001acad:	8d 50 01             	lea    edx,[eax+0x1]
c001acb0:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001acb4:	8a 00                	mov    al,BYTE PTR [eax]
c001acb6:	0f b6 c0             	movzx  eax,al
c001acb9:	66 89 44 24 18       	mov    WORD PTR [esp+0x18],ax
c001acbe:	0f b7 44 24 1a       	movzx  eax,WORD PTR [esp+0x1a]
c001acc3:	c1 e0 08             	shl    eax,0x8
c001acc6:	89 c2                	mov    edx,eax
c001acc8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001accc:	09 d0                	or     eax,edx
c001acce:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001acd2:	66 89 42 14          	mov    WORD PTR [edx+0x14],ax
c001acd6:	83 7c 24 38 ff       	cmp    DWORD PTR [esp+0x38],0xffffffff
c001acdb:	75 3a                	jne    c001ad17 <Net::unwrapEthernetFrame(unsigned char*, int)+0xcf>
c001acdd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ace1:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001ace4:	66 3d dc 05          	cmp    ax,0x5dc
c001ace8:	77 10                	ja     c001acfa <Net::unwrapEthernetFrame(unsigned char*, int)+0xb2>
c001acea:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001acee:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001acf1:	0f b7 c0             	movzx  eax,ax
c001acf4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001acf8:	eb 1d                	jmp    c001ad17 <Net::unwrapEthernetFrame(unsigned char*, int)+0xcf>
c001acfa:	83 ec 0c             	sub    esp,0xc
c001acfd:	68 04 bf 02 c0       	push   0xc002bf04
c001ad02:	e8 dc 82 ff ff       	call   c0012fe3 <Dbg::kprintf(char const*, ...)>
c001ad07:	83 c4 10             	add    esp,0x10
c001ad0a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ad0e:	c6 40 16 00          	mov    BYTE PTR [eax+0x16],0x0
c001ad12:	e9 c0 00 00 00       	jmp    c001add7 <Net::unwrapEthernetFrame(unsigned char*, int)+0x18f>
c001ad17:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001ad1b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ad1f:	8b 00                	mov    eax,DWORD PTR [eax]
c001ad21:	83 ec 04             	sub    esp,0x4
c001ad24:	52                   	push   edx
c001ad25:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001ad29:	50                   	push   eax
c001ad2a:	e8 15 5a fe ff       	call   c0000744 <memcpy>
c001ad2f:	83 c4 10             	add    esp,0x10
c001ad32:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ad36:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c001ad3a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ad3e:	8d 50 01             	lea    edx,[eax+0x1]
c001ad41:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001ad45:	8a 00                	mov    al,BYTE PTR [eax]
c001ad47:	0f b6 c0             	movzx  eax,al
c001ad4a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001ad4e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ad52:	8d 50 01             	lea    edx,[eax+0x1]
c001ad55:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001ad59:	8a 00                	mov    al,BYTE PTR [eax]
c001ad5b:	0f b6 c0             	movzx  eax,al
c001ad5e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001ad62:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ad66:	8d 50 01             	lea    edx,[eax+0x1]
c001ad69:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001ad6d:	8a 00                	mov    al,BYTE PTR [eax]
c001ad6f:	0f b6 c0             	movzx  eax,al
c001ad72:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ad76:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ad7a:	8d 50 01             	lea    edx,[eax+0x1]
c001ad7d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001ad81:	8a 00                	mov    al,BYTE PTR [eax]
c001ad83:	0f b6 c0             	movzx  eax,al
c001ad86:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001ad8a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ad8e:	c1 e0 18             	shl    eax,0x18
c001ad91:	89 c2                	mov    edx,eax
c001ad93:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ad97:	c1 e0 10             	shl    eax,0x10
c001ad9a:	09 c2                	or     edx,eax
c001ad9c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ada0:	c1 e0 08             	shl    eax,0x8
c001ada3:	09 d0                	or     eax,edx
c001ada5:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c001ada9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001adad:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001adb1:	2b 44 24 1c          	sub    eax,DWORD PTR [esp+0x1c]
c001adb5:	83 e8 04             	sub    eax,0x4
c001adb8:	83 ec 08             	sub    esp,0x8
c001adbb:	50                   	push   eax
c001adbc:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001adc0:	e8 b6 fc ff ff       	call   c001aa7b <Net::crc32Calc(unsigned char*, int)>
c001adc5:	83 c4 10             	add    esp,0x10
c001adc8:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001adcc:	0f 94 c2             	sete   dl
c001adcf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001add3:	88 50 16             	mov    BYTE PTR [eax+0x16],dl
c001add6:	90                   	nop
c001add7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001addb:	83 c4 2c             	add    esp,0x2c
c001adde:	c2 04 00             	ret    0x4

c001ade1 <Reg::findLineFromLoadedData(char*, char*, char*)>:
c001ade1:	55                   	push   ebp
c001ade2:	57                   	push   edi
c001ade3:	56                   	push   esi
c001ade4:	53                   	push   ebx
c001ade5:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001adeb:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c001adf2:	8a 1e                	mov    bl,BYTE PTR [esi]
c001adf4:	8d 6e 01             	lea    ebp,[esi+0x1]
c001adf7:	80 fb 40             	cmp    bl,0x40
c001adfa:	75 1b                	jne    c001ae17 <Reg::findLineFromLoadedData(char*, char*, char*)+0x36>
c001adfc:	8a 16                	mov    dl,BYTE PTR [esi]
c001adfe:	84 d2                	test   dl,dl
c001ae00:	0f 84 f1 00 00 00    	je     c001aef7 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001ae06:	8d 46 01             	lea    eax,[esi+0x1]
c001ae09:	80 fa 3a             	cmp    dl,0x3a
c001ae0c:	74 04                	je     c001ae12 <Reg::findLineFromLoadedData(char*, char*, char*)+0x31>
c001ae0e:	89 c6                	mov    esi,eax
c001ae10:	eb ea                	jmp    c001adfc <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c001ae12:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001ae15:	89 c6                	mov    esi,eax
c001ae17:	50                   	push   eax
c001ae18:	6a 40                	push   0x40
c001ae1a:	6a 00                	push   0x0
c001ae1c:	8d 44 24 24          	lea    eax,[esp+0x24]
c001ae20:	50                   	push   eax
c001ae21:	e8 52 59 fe ff       	call   c0000778 <memset>
c001ae26:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c001ae2d:	31 c0                	xor    eax,eax
c001ae2f:	83 c4 10             	add    esp,0x10
c001ae32:	8a 0f                	mov    cl,BYTE PTR [edi]
c001ae34:	84 c9                	test   cl,cl
c001ae36:	0f 84 bb 00 00 00    	je     c001aef7 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001ae3c:	3d c7 00 00 00       	cmp    eax,0xc7
c001ae41:	0f 8f b0 00 00 00    	jg     c001aef7 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001ae47:	80 f9 0a             	cmp    cl,0xa
c001ae4a:	0f 85 98 00 00 00    	jne    c001aee8 <Reg::findLineFromLoadedData(char*, char*, char*)+0x107>
c001ae50:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c001ae55:	8a 44 24 58          	mov    al,BYTE PTR [esp+0x58]
c001ae59:	a8 df                	test   al,0xdf
c001ae5b:	0f 94 c1             	sete   cl
c001ae5e:	3c 23                	cmp    al,0x23
c001ae60:	0f 94 c2             	sete   dl
c001ae63:	08 d1                	or     cl,dl
c001ae65:	75 4a                	jne    c001aeb1 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001ae67:	8d 50 f7             	lea    edx,[eax-0x9]
c001ae6a:	80 fa 01             	cmp    dl,0x1
c001ae6d:	76 42                	jbe    c001aeb1 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001ae6f:	3c 5b                	cmp    al,0x5b
c001ae71:	75 42                	jne    c001aeb5 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c001ae73:	80 fb 40             	cmp    bl,0x40
c001ae76:	75 39                	jne    c001aeb1 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001ae78:	83 ec 0c             	sub    esp,0xc
c001ae7b:	8d 54 24 65          	lea    edx,[esp+0x65]
c001ae7f:	52                   	push   edx
c001ae80:	e8 0f 59 fe ff       	call   c0000794 <strlen>
c001ae85:	83 c4 10             	add    esp,0x10
c001ae88:	83 f8 3f             	cmp    eax,0x3f
c001ae8b:	77 6a                	ja     c001aef7 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001ae8d:	50                   	push   eax
c001ae8e:	50                   	push   eax
c001ae8f:	8d 54 24 61          	lea    edx,[esp+0x61]
c001ae93:	52                   	push   edx
c001ae94:	8d 54 24 24          	lea    edx,[esp+0x24]
c001ae98:	52                   	push   edx
c001ae99:	e8 96 59 fe ff       	call   c0000834 <strcpy>
c001ae9e:	58                   	pop    eax
c001ae9f:	8d 54 24 24          	lea    edx,[esp+0x24]
c001aea3:	52                   	push   edx
c001aea4:	e8 eb 58 fe ff       	call   c0000794 <strlen>
c001aea9:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c001aeae:	83 c4 10             	add    esp,0x10
c001aeb1:	31 d2                	xor    edx,edx
c001aeb3:	eb 3a                	jmp    c001aeef <Reg::findLineFromLoadedData(char*, char*, char*)+0x10e>
c001aeb5:	80 fb 40             	cmp    bl,0x40
c001aeb8:	74 06                	je     c001aec0 <Reg::findLineFromLoadedData(char*, char*, char*)+0xdf>
c001aeba:	8d 44 24 58          	lea    eax,[esp+0x58]
c001aebe:	eb 20                	jmp    c001aee0 <Reg::findLineFromLoadedData(char*, char*, char*)+0xff>
c001aec0:	50                   	push   eax
c001aec1:	50                   	push   eax
c001aec2:	55                   	push   ebp
c001aec3:	8d 44 24 24          	lea    eax,[esp+0x24]
c001aec7:	50                   	push   eax
c001aec8:	e8 f3 59 fe ff       	call   c00008c0 <strcmp>
c001aecd:	83 c4 10             	add    esp,0x10
c001aed0:	85 c0                	test   eax,eax
c001aed2:	75 dd                	jne    c001aeb1 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001aed4:	eb e4                	jmp    c001aeba <Reg::findLineFromLoadedData(char*, char*, char*)+0xd9>
c001aed6:	8d 50 01             	lea    edx,[eax+0x1]
c001aed9:	80 f9 3d             	cmp    cl,0x3d
c001aedc:	74 1d                	je     c001aefb <Reg::findLineFromLoadedData(char*, char*, char*)+0x11a>
c001aede:	89 d0                	mov    eax,edx
c001aee0:	8a 08                	mov    cl,BYTE PTR [eax]
c001aee2:	84 c9                	test   cl,cl
c001aee4:	75 f0                	jne    c001aed6 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf5>
c001aee6:	eb 0f                	jmp    c001aef7 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001aee8:	8d 50 01             	lea    edx,[eax+0x1]
c001aeeb:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c001aeef:	47                   	inc    edi
c001aef0:	89 d0                	mov    eax,edx
c001aef2:	e9 3b ff ff ff       	jmp    c001ae32 <Reg::findLineFromLoadedData(char*, char*, char*)+0x51>
c001aef7:	31 c0                	xor    eax,eax
c001aef9:	eb 33                	jmp    c001af2e <Reg::findLineFromLoadedData(char*, char*, char*)+0x14d>
c001aefb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001aeff:	c6 00 00             	mov    BYTE PTR [eax],0x0
c001af02:	50                   	push   eax
c001af03:	50                   	push   eax
c001af04:	8d 44 24 60          	lea    eax,[esp+0x60]
c001af08:	50                   	push   eax
c001af09:	56                   	push   esi
c001af0a:	e8 b1 59 fe ff       	call   c00008c0 <strcmp>
c001af0f:	83 c4 10             	add    esp,0x10
c001af12:	85 c0                	test   eax,eax
c001af14:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001af18:	75 97                	jne    c001aeb1 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001af1a:	51                   	push   ecx
c001af1b:	51                   	push   ecx
c001af1c:	52                   	push   edx
c001af1d:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c001af24:	e8 0b 59 fe ff       	call   c0000834 <strcpy>
c001af29:	83 c4 10             	add    esp,0x10
c001af2c:	b0 01                	mov    al,0x1
c001af2e:	81 c4 2c 01 00 00    	add    esp,0x12c
c001af34:	5b                   	pop    ebx
c001af35:	5e                   	pop    esi
c001af36:	5f                   	pop    edi
c001af37:	5d                   	pop    ebp
c001af38:	c3                   	ret    

c001af39 <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c001af39:	57                   	push   edi
c001af3a:	56                   	push   esi
c001af3b:	53                   	push   ebx
c001af3c:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001af42:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c001af49:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c001af50:	53                   	push   ebx
c001af51:	e8 3e 58 fe ff       	call   c0000794 <strlen>
c001af56:	89 34 24             	mov    DWORD PTR [esp],esi
c001af59:	89 c7                	mov    edi,eax
c001af5b:	e8 34 58 fe ff       	call   c0000794 <strlen>
c001af60:	83 c4 10             	add    esp,0x10
c001af63:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c001af67:	3d ff 00 00 00       	cmp    eax,0xff
c001af6c:	0f 87 d3 00 00 00    	ja     c001b045 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001af72:	57                   	push   edi
c001af73:	57                   	push   edi
c001af74:	56                   	push   esi
c001af75:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c001af79:	56                   	push   esi
c001af7a:	e8 b5 58 fe ff       	call   c0000834 <strcpy>
c001af7f:	58                   	pop    eax
c001af80:	5a                   	pop    edx
c001af81:	68 cd c4 02 c0       	push   0xc002c4cd
c001af86:	56                   	push   esi
c001af87:	e8 e8 59 fe ff       	call   c0000974 <strcat>
c001af8c:	59                   	pop    ecx
c001af8d:	5f                   	pop    edi
c001af8e:	53                   	push   ebx
c001af8f:	56                   	push   esi
c001af90:	e8 df 59 fe ff       	call   c0000974 <strcat>
c001af95:	58                   	pop    eax
c001af96:	5a                   	pop    edx
c001af97:	68 50 bf 02 c0       	push   0xc002bf50
c001af9c:	56                   	push   esi
c001af9d:	e8 d2 59 fe ff       	call   c0000974 <strcat>
c001afa2:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001afa9:	e8 36 49 ff ff       	call   c000f8e4 <malloc>
c001afae:	83 c4 0c             	add    esp,0xc
c001afb1:	89 c3                	mov    ebx,eax
c001afb3:	ff 35 58 1c 03 c0    	push   DWORD PTR ds:0xc0031c58
c001afb9:	56                   	push   esi
c001afba:	50                   	push   eax
c001afbb:	e8 7c 85 ff ff       	call   c001353c <File::File(char const*, Process*)>
c001afc0:	83 c4 10             	add    esp,0x10
c001afc3:	85 db                	test   ebx,ebx
c001afc5:	74 7e                	je     c001b045 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001afc7:	51                   	push   ecx
c001afc8:	51                   	push   ecx
c001afc9:	6a 01                	push   0x1
c001afcb:	53                   	push   ebx
c001afcc:	e8 cf 85 ff ff       	call   c00135a0 <File::open(FileOpenMode)>
c001afd1:	83 c4 10             	add    esp,0x10
c001afd4:	85 c0                	test   eax,eax
c001afd6:	74 08                	je     c001afe0 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c001afd8:	83 ec 0c             	sub    esp,0xc
c001afdb:	8b 03                	mov    eax,DWORD PTR [ebx]
c001afdd:	53                   	push   ebx
c001afde:	eb 5f                	jmp    c001b03f <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c001afe0:	52                   	push   edx
c001afe1:	8d 44 24 17          	lea    eax,[esp+0x17]
c001afe5:	50                   	push   eax
c001afe6:	8d 44 24 20          	lea    eax,[esp+0x20]
c001afea:	50                   	push   eax
c001afeb:	53                   	push   ebx
c001afec:	e8 5b 88 ff ff       	call   c001384c <File::stat(unsigned long long*, bool*)>
c001aff1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001aff5:	83 c4 10             	add    esp,0x10
c001aff8:	89 c1                	mov    ecx,eax
c001affa:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c001affe:	74 31                	je     c001b031 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001b000:	83 ec 0c             	sub    esp,0xc
c001b003:	50                   	push   eax
c001b004:	e8 db 48 ff ff       	call   c000f8e4 <malloc>
c001b009:	89 c6                	mov    esi,eax
c001b00b:	58                   	pop    eax
c001b00c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b00e:	8d 54 24 20          	lea    edx,[esp+0x20]
c001b012:	52                   	push   edx
c001b013:	56                   	push   esi
c001b014:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001b018:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001b01c:	53                   	push   ebx
c001b01d:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001b020:	83 c4 20             	add    esp,0x20
c001b023:	85 c0                	test   eax,eax
c001b025:	75 0a                	jne    c001b031 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001b027:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b02b:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c001b02f:	74 18                	je     c001b049 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c001b031:	83 ec 0c             	sub    esp,0xc
c001b034:	53                   	push   ebx
c001b035:	e8 c4 85 ff ff       	call   c00135fe <File::close()>
c001b03a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b03c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b03f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b042:	83 c4 10             	add    esp,0x10
c001b045:	31 c0                	xor    eax,eax
c001b047:	eb 3b                	jmp    c001b084 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c001b049:	83 ec 0c             	sub    esp,0xc
c001b04c:	53                   	push   ebx
c001b04d:	e8 ac 85 ff ff       	call   c00135fe <File::close()>
c001b052:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b054:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b057:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b05a:	83 c4 0c             	add    esp,0xc
c001b05d:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001b064:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001b06b:	56                   	push   esi
c001b06c:	e8 70 fd ff ff       	call   c001ade1 <Reg::findLineFromLoadedData(char*, char*, char*)>
c001b071:	89 34 24             	mov    DWORD PTR [esp],esi
c001b074:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001b078:	e8 77 48 ff ff       	call   c000f8f4 <free>
c001b07d:	83 c4 10             	add    esp,0x10
c001b080:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001b084:	81 c4 20 01 00 00    	add    esp,0x120
c001b08a:	5b                   	pop    ebx
c001b08b:	5e                   	pop    esi
c001b08c:	5f                   	pop    edi
c001b08d:	c3                   	ret    

c001b08e <Reg::getLine(char*, char*, char*)>:
c001b08e:	57                   	push   edi
c001b08f:	56                   	push   esi
c001b090:	53                   	push   ebx
c001b091:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b095:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001b099:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001b09d:	57                   	push   edi
c001b09e:	56                   	push   esi
c001b09f:	53                   	push   ebx
c001b0a0:	68 55 bf 02 c0       	push   0xc002bf55
c001b0a5:	e8 8f fe ff ff       	call   c001af39 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001b0aa:	83 c4 10             	add    esp,0x10
c001b0ad:	84 c0                	test   al,al
c001b0af:	75 10                	jne    c001b0c1 <Reg::getLine(char*, char*, char*)+0x33>
c001b0b1:	57                   	push   edi
c001b0b2:	56                   	push   esi
c001b0b3:	53                   	push   ebx
c001b0b4:	68 7a bf 02 c0       	push   0xc002bf7a
c001b0b9:	e8 7b fe ff ff       	call   c001af39 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001b0be:	83 c4 10             	add    esp,0x10
c001b0c1:	5b                   	pop    ebx
c001b0c2:	5e                   	pop    esi
c001b0c3:	5f                   	pop    edi
c001b0c4:	c3                   	ret    

c001b0c5 <Reg::readInt(char*, char*, int*)>:
c001b0c5:	55                   	push   ebp
c001b0c6:	57                   	push   edi
c001b0c7:	56                   	push   esi
c001b0c8:	53                   	push   ebx
c001b0c9:	81 ec f0 00 00 00    	sub    esp,0xf0
c001b0cf:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001b0d3:	57                   	push   edi
c001b0d4:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001b0db:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001b0e2:	e8 a7 ff ff ff       	call   c001b08e <Reg::getLine(char*, char*, char*)>
c001b0e7:	83 c4 10             	add    esp,0x10
c001b0ea:	84 c0                	test   al,al
c001b0ec:	0f 84 b3 00 00 00    	je     c001b1a5 <Reg::readInt(char*, char*, int*)+0xe0>
c001b0f2:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c001b0f6:	80 fa 2b             	cmp    dl,0x2b
c001b0f9:	74 0c                	je     c001b107 <Reg::readInt(char*, char*, int*)+0x42>
c001b0fb:	80 fa 2d             	cmp    dl,0x2d
c001b0fe:	75 0e                	jne    c001b10e <Reg::readInt(char*, char*, int*)+0x49>
c001b100:	ba 01 00 00 00       	mov    edx,0x1
c001b105:	eb 0b                	jmp    c001b112 <Reg::readInt(char*, char*, int*)+0x4d>
c001b107:	ba 01 00 00 00       	mov    edx,0x1
c001b10c:	eb 02                	jmp    c001b110 <Reg::readInt(char*, char*, int*)+0x4b>
c001b10e:	31 d2                	xor    edx,edx
c001b110:	31 c0                	xor    eax,eax
c001b112:	be 0a 00 00 00       	mov    esi,0xa
c001b117:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c001b11c:	75 20                	jne    c001b13e <Reg::readInt(char*, char*, int*)+0x79>
c001b11e:	8a 4c 14 19          	mov    cl,BYTE PTR [esp+edx*1+0x19]
c001b122:	80 f9 78             	cmp    cl,0x78
c001b125:	75 0a                	jne    c001b131 <Reg::readInt(char*, char*, int*)+0x6c>
c001b127:	83 c2 02             	add    edx,0x2
c001b12a:	be 10 00 00 00       	mov    esi,0x10
c001b12f:	eb 0d                	jmp    c001b13e <Reg::readInt(char*, char*, int*)+0x79>
c001b131:	80 f9 62             	cmp    cl,0x62
c001b134:	75 08                	jne    c001b13e <Reg::readInt(char*, char*, int*)+0x79>
c001b136:	83 c2 02             	add    edx,0x2
c001b139:	be 02 00 00 00       	mov    esi,0x2
c001b13e:	01 d7                	add    edi,edx
c001b140:	31 d2                	xor    edx,edx
c001b142:	8a 1f                	mov    bl,BYTE PTR [edi]
c001b144:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
c001b148:	80 fb 0d             	cmp    bl,0xd
c001b14b:	0f 94 c3             	sete   bl
c001b14e:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001b153:	0f 94 c1             	sete   cl
c001b156:	08 cb                	or     bl,cl
c001b158:	75 3a                	jne    c001b194 <Reg::readInt(char*, char*, int*)+0xcf>
c001b15a:	0f af d6             	imul   edx,esi
c001b15d:	0f be 5c 24 0f       	movsx  ebx,BYTE PTR [esp+0xf]
c001b162:	83 fe 10             	cmp    esi,0x10
c001b165:	75 26                	jne    c001b18d <Reg::readInt(char*, char*, int*)+0xc8>
c001b167:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001b16b:	8d 69 bf             	lea    ebp,[ecx-0x41]
c001b16e:	89 e9                	mov    ecx,ebp
c001b170:	80 f9 05             	cmp    cl,0x5
c001b173:	77 06                	ja     c001b17b <Reg::readInt(char*, char*, int*)+0xb6>
c001b175:	8d 54 1a c9          	lea    edx,[edx+ebx*1-0x37]
c001b179:	eb 16                	jmp    c001b191 <Reg::readInt(char*, char*, int*)+0xcc>
c001b17b:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001b17f:	83 e9 61             	sub    ecx,0x61
c001b182:	80 f9 05             	cmp    cl,0x5
c001b185:	77 06                	ja     c001b18d <Reg::readInt(char*, char*, int*)+0xc8>
c001b187:	8d 54 1a a9          	lea    edx,[edx+ebx*1-0x57]
c001b18b:	eb 04                	jmp    c001b191 <Reg::readInt(char*, char*, int*)+0xcc>
c001b18d:	8d 54 1a d0          	lea    edx,[edx+ebx*1-0x30]
c001b191:	47                   	inc    edi
c001b192:	eb ae                	jmp    c001b142 <Reg::readInt(char*, char*, int*)+0x7d>
c001b194:	84 c0                	test   al,al
c001b196:	74 02                	je     c001b19a <Reg::readInt(char*, char*, int*)+0xd5>
c001b198:	f7 da                	neg    edx
c001b19a:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c001b1a1:	89 10                	mov    DWORD PTR [eax],edx
c001b1a3:	88 d8                	mov    al,bl
c001b1a5:	81 c4 ec 00 00 00    	add    esp,0xec
c001b1ab:	5b                   	pop    ebx
c001b1ac:	5e                   	pop    esi
c001b1ad:	5f                   	pop    edi
c001b1ae:	5d                   	pop    ebp
c001b1af:	c3                   	ret    

c001b1b0 <Reg::readString(char*, char*, char*, int)>:
c001b1b0:	57                   	push   edi
c001b1b1:	56                   	push   esi
c001b1b2:	53                   	push   ebx
c001b1b3:	81 ec d4 00 00 00    	sub    esp,0xd4
c001b1b9:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c001b1c0:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c001b1c4:	57                   	push   edi
c001b1c5:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001b1cc:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001b1d3:	e8 b6 fe ff ff       	call   c001b08e <Reg::getLine(char*, char*, char*)>
c001b1d8:	83 c4 10             	add    esp,0x10
c001b1db:	89 c6                	mov    esi,eax
c001b1dd:	84 c0                	test   al,al
c001b1df:	74 44                	je     c001b225 <Reg::readString(char*, char*, char*, int)+0x75>
c001b1e1:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c001b1e8:	31 c0                	xor    eax,eax
c001b1ea:	4a                   	dec    edx
c001b1eb:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c001b1ee:	84 c9                	test   cl,cl
c001b1f0:	74 0f                	je     c001b201 <Reg::readString(char*, char*, char*, int)+0x51>
c001b1f2:	39 c2                	cmp    edx,eax
c001b1f4:	7e 0b                	jle    c001b201 <Reg::readString(char*, char*, char*, int)+0x51>
c001b1f6:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c001b1f9:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c001b1fe:	40                   	inc    eax
c001b1ff:	eb ea                	jmp    c001b1eb <Reg::readString(char*, char*, char*, int)+0x3b>
c001b201:	83 ec 0c             	sub    esp,0xc
c001b204:	53                   	push   ebx
c001b205:	e8 8a 55 fe ff       	call   c0000794 <strlen>
c001b20a:	83 c4 10             	add    esp,0x10
c001b20d:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c001b212:	75 11                	jne    c001b225 <Reg::readString(char*, char*, char*, int)+0x75>
c001b214:	83 ec 0c             	sub    esp,0xc
c001b217:	53                   	push   ebx
c001b218:	e8 77 55 fe ff       	call   c0000794 <strlen>
c001b21d:	83 c4 10             	add    esp,0x10
c001b220:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c001b225:	81 c4 d0 00 00 00    	add    esp,0xd0
c001b22b:	89 f0                	mov    eax,esi
c001b22d:	5b                   	pop    ebx
c001b22e:	5e                   	pop    esi
c001b22f:	5f                   	pop    edi
c001b230:	c3                   	ret    

c001b231 <Reg::readBool(char*, char*, bool*)>:
c001b231:	83 ec 20             	sub    esp,0x20
c001b234:	8d 44 24 10          	lea    eax,[esp+0x10]
c001b238:	50                   	push   eax
c001b239:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b23d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b241:	e8 7f fe ff ff       	call   c001b0c5 <Reg::readInt(char*, char*, int*)>
c001b246:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001b24b:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001b24f:	0f 95 02             	setne  BYTE PTR [edx]
c001b252:	83 c4 2c             	add    esp,0x2c
c001b255:	c3                   	ret    

c001b256 <Reg::readBoolWithDefault(char*, char*, bool)>:
c001b256:	53                   	push   ebx
c001b257:	83 ec 1c             	sub    esp,0x1c
c001b25a:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c001b25e:	8d 44 24 13          	lea    eax,[esp+0x13]
c001b262:	50                   	push   eax
c001b263:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b267:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b26b:	e8 c1 ff ff ff       	call   c001b231 <Reg::readBool(char*, char*, bool*)>
c001b270:	83 c4 10             	add    esp,0x10
c001b273:	84 c0                	test   al,al
c001b275:	74 04                	je     c001b27b <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c001b277:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c001b27b:	88 d8                	mov    al,bl
c001b27d:	83 c4 18             	add    esp,0x18
c001b280:	5b                   	pop    ebx
c001b281:	c3                   	ret    

c001b282 <Reg::readIntWithDefault(char*, char*, int)>:
c001b282:	53                   	push   ebx
c001b283:	83 ec 1c             	sub    esp,0x1c
c001b286:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001b28a:	8d 44 24 10          	lea    eax,[esp+0x10]
c001b28e:	50                   	push   eax
c001b28f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b293:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b297:	e8 29 fe ff ff       	call   c001b0c5 <Reg::readInt(char*, char*, int*)>
c001b29c:	83 c4 10             	add    esp,0x10
c001b29f:	84 c0                	test   al,al
c001b2a1:	74 04                	je     c001b2a7 <Reg::readIntWithDefault(char*, char*, int)+0x25>
c001b2a3:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001b2a7:	89 d8                	mov    eax,ebx
c001b2a9:	83 c4 18             	add    esp,0x18
c001b2ac:	5b                   	pop    ebx
c001b2ad:	c3                   	ret    

c001b2ae <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c001b2ae:	57                   	push   edi
c001b2af:	56                   	push   esi
c001b2b0:	53                   	push   ebx
c001b2b1:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001b2b5:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001b2b9:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001b2bd:	56                   	push   esi
c001b2be:	53                   	push   ebx
c001b2bf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b2c3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b2c7:	e8 e4 fe ff ff       	call   c001b1b0 <Reg::readString(char*, char*, char*, int)>
c001b2cc:	83 c4 10             	add    esp,0x10
c001b2cf:	84 c0                	test   al,al
c001b2d1:	75 1b                	jne    c001b2ee <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x40>
c001b2d3:	50                   	push   eax
c001b2d4:	56                   	push   esi
c001b2d5:	4e                   	dec    esi
c001b2d6:	6a 00                	push   0x0
c001b2d8:	53                   	push   ebx
c001b2d9:	e8 9a 54 fe ff       	call   c0000778 <memset>
c001b2de:	83 c4 0c             	add    esp,0xc
c001b2e1:	56                   	push   esi
c001b2e2:	57                   	push   edi
c001b2e3:	53                   	push   ebx
c001b2e4:	89 fb                	mov    ebx,edi
c001b2e6:	e8 59 54 fe ff       	call   c0000744 <memcpy>
c001b2eb:	83 c4 10             	add    esp,0x10
c001b2ee:	89 d8                	mov    eax,ebx
c001b2f0:	5b                   	pop    ebx
c001b2f1:	5e                   	pop    esi
c001b2f2:	5f                   	pop    edi
c001b2f3:	c3                   	ret    

c001b2f4 <Sys::eject(regs*)>:
c001b2f4:	83 ec 0c             	sub    esp,0xc
c001b2f7:	83 ca ff             	or     edx,0xffffffff
c001b2fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b2fe:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c001b301:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001b306:	83 e9 41             	sub    ecx,0x41
c001b309:	83 f9 19             	cmp    ecx,0x19
c001b30c:	77 18                	ja     c001b326 <Sys::eject(regs*)+0x32>
c001b30e:	8b 0c 8d 00 ed 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1300]
c001b315:	85 c9                	test   ecx,ecx
c001b317:	74 0d                	je     c001b326 <Sys::eject(regs*)+0x32>
c001b319:	83 ec 0c             	sub    esp,0xc
c001b31c:	51                   	push   ecx
c001b31d:	e8 78 b4 ff ff       	call   c001679a <LogicalDisk::eject()>
c001b322:	83 c4 10             	add    esp,0x10
c001b325:	99                   	cdq    
c001b326:	83 c4 0c             	add    esp,0xc
c001b329:	c3                   	ret    

c001b32a <Sys::exit(regs*)>:
c001b32a:	83 ec 18             	sub    esp,0x18
c001b32d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b331:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001b334:	e8 c4 35 00 00       	call   c001e8fd <terminateTask(int)>
c001b339:	83 c8 ff             	or     eax,0xffffffff
c001b33c:	83 c4 1c             	add    esp,0x1c
c001b33f:	89 c2                	mov    edx,eax
c001b341:	c3                   	ret    

c001b342 <Sys::getCwd(regs*)>:
c001b342:	83 ec 10             	sub    esp,0x10
c001b345:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b349:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001b34c:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001b34f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b354:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b357:	e8 e2 7f ff ff       	call   c001333e <Fs::getcwd(Process*, char*, int)>
c001b35c:	83 c4 1c             	add    esp,0x1c
c001b35f:	99                   	cdq    
c001b360:	c3                   	ret    

c001b361 <Sys::getPID(regs*)>:
c001b361:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b366:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b369:	8b 00                	mov    eax,DWORD PTR [eax]
c001b36b:	99                   	cdq    
c001b36c:	c3                   	ret    

c001b36d <Sys::getRAMData(regs*)>:
c001b36d:	8b 0d 30 e7 02 c0    	mov    ecx,DWORD PTR ds:0xc002e730
c001b373:	6b 05 2c e7 02 c0 64 	imul   eax,DWORD PTR ds:0xc002e72c,0x64
c001b37a:	99                   	cdq    
c001b37b:	f7 f9                	idiv   ecx
c001b37d:	c1 e0 18             	shl    eax,0x18
c001b380:	09 c8                	or     eax,ecx
c001b382:	99                   	cdq    
c001b383:	c3                   	ret    

c001b384 <Sys::loadDLL(regs*)>:
c001b384:	56                   	push   esi
c001b385:	53                   	push   ebx
c001b386:	31 d2                	xor    edx,edx
c001b388:	51                   	push   ecx
c001b389:	b8 01 00 00 00       	mov    eax,0x1
c001b38e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b392:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c001b396:	0f 84 8c 00 00 00    	je     c001b428 <Sys::loadDLL(regs*)+0xa4>
c001b39c:	83 ec 0c             	sub    esp,0xc
c001b39f:	68 14 01 00 00       	push   0x114
c001b3a4:	e8 3b 45 ff ff       	call   c000f8e4 <malloc>
c001b3a9:	83 c4 0c             	add    esp,0xc
c001b3ac:	89 c3                	mov    ebx,eax
c001b3ae:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b3b3:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b3b6:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001b3b9:	53                   	push   ebx
c001b3ba:	e8 7d 81 ff ff       	call   c001353c <File::File(char const*, Process*)>
c001b3bf:	83 c4 10             	add    esp,0x10
c001b3c2:	31 d2                	xor    edx,edx
c001b3c4:	b8 02 00 00 00       	mov    eax,0x2
c001b3c9:	85 db                	test   ebx,ebx
c001b3cb:	74 5b                	je     c001b428 <Sys::loadDLL(regs*)+0xa4>
c001b3cd:	83 ec 0c             	sub    esp,0xc
c001b3d0:	53                   	push   ebx
c001b3d1:	e8 38 84 ff ff       	call   c001380e <File::exists()>
c001b3d6:	83 c4 10             	add    esp,0x10
c001b3d9:	84 c0                	test   al,al
c001b3db:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b3dd:	75 11                	jne    c001b3f0 <Sys::loadDLL(regs*)+0x6c>
c001b3df:	83 ec 0c             	sub    esp,0xc
c001b3e2:	53                   	push   ebx
c001b3e3:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b3e6:	83 c4 10             	add    esp,0x10
c001b3e9:	b8 03 00 00 00       	mov    eax,0x3
c001b3ee:	eb 36                	jmp    c001b426 <Sys::loadDLL(regs*)+0xa2>
c001b3f0:	83 ec 0c             	sub    esp,0xc
c001b3f3:	53                   	push   ebx
c001b3f4:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b3f7:	58                   	pop    eax
c001b3f8:	5a                   	pop    edx
c001b3f9:	6a 00                	push   0x0
c001b3fb:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001b3fe:	e8 0f 24 00 00       	call   c001d812 <Thr::loadDLL(char const*, bool)>
c001b403:	83 c4 10             	add    esp,0x10
c001b406:	89 c1                	mov    ecx,eax
c001b408:	31 d2                	xor    edx,edx
c001b40a:	b8 04 00 00 00       	mov    eax,0x4
c001b40f:	85 c9                	test   ecx,ecx
c001b411:	74 15                	je     c001b428 <Sys::loadDLL(regs*)+0xa4>
c001b413:	53                   	push   ebx
c001b414:	53                   	push   ebx
c001b415:	ff 35 e8 e6 02 c0    	push   DWORD PTR ds:0xc002e6e8
c001b41b:	51                   	push   ecx
c001b41c:	e8 25 26 00 00       	call   c001da46 <Thr::executeDLL(unsigned long, void*)>
c001b421:	83 c4 10             	add    esp,0x10
c001b424:	31 c0                	xor    eax,eax
c001b426:	31 d2                	xor    edx,edx
c001b428:	59                   	pop    ecx
c001b429:	5b                   	pop    ebx
c001b42a:	5e                   	pop    esi
c001b42b:	c3                   	ret    

c001b42c <Sys::read(regs*)>:
c001b42c:	57                   	push   edi
c001b42d:	56                   	push   esi
c001b42e:	53                   	push   ebx
c001b42f:	83 ec 10             	sub    esp,0x10
c001b432:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b436:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b439:	83 f8 02             	cmp    eax,0x2
c001b43c:	77 10                	ja     c001b44e <Sys::read(regs*)+0x22>
c001b43e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b443:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b446:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c001b44c:	eb 0e                	jmp    c001b45c <Sys::read(regs*)+0x30>
c001b44e:	83 ec 0c             	sub    esp,0xc
c001b451:	50                   	push   eax
c001b452:	e8 76 66 ff ff       	call   c0011acd <getFromFileDescriptor(int)>
c001b457:	83 c4 10             	add    esp,0x10
c001b45a:	89 c1                	mov    ecx,eax
c001b45c:	83 c8 ff             	or     eax,0xffffffff
c001b45f:	85 c9                	test   ecx,ecx
c001b461:	89 c2                	mov    edx,eax
c001b463:	74 28                	je     c001b48d <Sys::read(regs*)+0x61>
c001b465:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b46d:	31 ff                	xor    edi,edi
c001b46f:	83 ec 0c             	sub    esp,0xc
c001b472:	8b 01                	mov    eax,DWORD PTR [ecx]
c001b474:	8d 54 24 18          	lea    edx,[esp+0x18]
c001b478:	52                   	push   edx
c001b479:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b47c:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001b47f:	57                   	push   edi
c001b480:	56                   	push   esi
c001b481:	51                   	push   ecx
c001b482:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001b485:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b489:	83 c4 20             	add    esp,0x20
c001b48c:	99                   	cdq    
c001b48d:	83 c4 10             	add    esp,0x10
c001b490:	5b                   	pop    ebx
c001b491:	5e                   	pop    esi
c001b492:	5f                   	pop    edi
c001b493:	c3                   	ret    

c001b494 <Sys::sbrk(regs*)>:
c001b494:	56                   	push   esi
c001b495:	53                   	push   ebx
c001b496:	83 ec 0c             	sub    esp,0xc
c001b499:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001b49d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b4a2:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b4a5:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c001b4ab:	8b 58 04             	mov    ebx,DWORD PTR [eax+0x4]
c001b4ae:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001b4b1:	68 95 bf 02 c0       	push   0xc002bf95
c001b4b6:	e8 28 7b ff ff       	call   c0012fe3 <Dbg::kprintf(char const*, ...)>
c001b4bb:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001b4be:	83 c4 10             	add    esp,0x10
c001b4c1:	85 c0                	test   eax,eax
c001b4c3:	75 0a                	jne    c001b4cf <Sys::sbrk(regs*)+0x3b>
c001b4c5:	50                   	push   eax
c001b4c6:	50                   	push   eax
c001b4c7:	53                   	push   ebx
c001b4c8:	68 b1 bf 02 c0       	push   0xc002bfb1
c001b4cd:	eb 54                	jmp    c001b523 <Sys::sbrk(regs*)+0x8f>
c001b4cf:	79 0a                	jns    c001b4db <Sys::sbrk(regs*)+0x47>
c001b4d1:	56                   	push   esi
c001b4d2:	56                   	push   esi
c001b4d3:	53                   	push   ebx
c001b4d4:	68 c4 bf 02 c0       	push   0xc002bfc4
c001b4d9:	eb 48                	jmp    c001b523 <Sys::sbrk(regs*)+0x8f>
c001b4db:	3d 00 00 00 04       	cmp    eax,0x4000000
c001b4e0:	76 17                	jbe    c001b4f9 <Sys::sbrk(regs*)+0x65>
c001b4e2:	51                   	push   ecx
c001b4e3:	51                   	push   ecx
c001b4e4:	53                   	push   ebx
c001b4e5:	68 d6 bf 02 c0       	push   0xc002bfd6
c001b4ea:	e8 f4 7a ff ff       	call   c0012fe3 <Dbg::kprintf(char const*, ...)>
c001b4ef:	83 c8 ff             	or     eax,0xffffffff
c001b4f2:	83 c4 10             	add    esp,0x10
c001b4f5:	89 c2                	mov    edx,eax
c001b4f7:	eb 36                	jmp    c001b52f <Sys::sbrk(regs*)+0x9b>
c001b4f9:	05 ff 0f 00 00       	add    eax,0xfff
c001b4fe:	56                   	push   esi
c001b4ff:	c1 e8 0c             	shr    eax,0xc
c001b502:	68 07 04 00 00       	push   0x407
c001b507:	50                   	push   eax
c001b508:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b50d:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b510:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001b516:	e8 df 6f ff ff       	call   c00124fa <VAS::allocatePages(int, int)>
c001b51b:	58                   	pop    eax
c001b51c:	5a                   	pop    edx
c001b51d:	53                   	push   ebx
c001b51e:	68 ef bf 02 c0       	push   0xc002bfef
c001b523:	e8 bb 7a ff ff       	call   c0012fe3 <Dbg::kprintf(char const*, ...)>
c001b528:	89 d8                	mov    eax,ebx
c001b52a:	31 d2                	xor    edx,edx
c001b52c:	83 c4 10             	add    esp,0x10
c001b52f:	59                   	pop    ecx
c001b530:	5b                   	pop    ebx
c001b531:	5e                   	pop    esi
c001b532:	c3                   	ret    

c001b533 <Sys::setCwd(regs*)>:
c001b533:	83 ec 14             	sub    esp,0x14
c001b536:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b53a:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001b53d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b542:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b545:	e8 63 83 ff ff       	call   c00138ad <Fs::setcwd(Process*, char*)>
c001b54a:	83 c4 1c             	add    esp,0x1c
c001b54d:	99                   	cdq    
c001b54e:	c3                   	ret    

c001b54f <Sys::setTime(regs*)>:
c001b54f:	55                   	push   ebp
c001b550:	31 d2                	xor    edx,edx
c001b552:	57                   	push   edi
c001b553:	bf 18 00 00 00       	mov    edi,0x18
c001b558:	56                   	push   esi
c001b559:	53                   	push   ebx
c001b55a:	bb 3c 00 00 00       	mov    ebx,0x3c
c001b55f:	83 ec 30             	sub    esp,0x30
c001b562:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c001b566:	8b 69 24             	mov    ebp,DWORD PTR [ecx+0x24]
c001b569:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001b56c:	f7 f3                	div    ebx
c001b56e:	89 d6                	mov    esi,edx
c001b570:	31 d2                	xor    edx,edx
c001b572:	f7 f3                	div    ebx
c001b574:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001b577:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001b57b:	bb 10 0e 00 00       	mov    ebx,0xe10
c001b580:	31 d2                	xor    edx,edx
c001b582:	f7 f3                	div    ebx
c001b584:	31 d2                	xor    edx,edx
c001b586:	bb 0c 00 00 00       	mov    ebx,0xc
c001b58b:	f7 f7                	div    edi
c001b58d:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c001b590:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001b594:	0f b7 cd             	movzx  ecx,bp
c001b597:	56                   	push   esi
c001b598:	89 c7                	mov    edi,eax
c001b59a:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c001b59e:	c1 e6 10             	shl    esi,0x10
c001b5a1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b5a5:	83 e7 1f             	and    edi,0x1f
c001b5a8:	51                   	push   ecx
c001b5a9:	47                   	inc    edi
c001b5aa:	c1 e8 05             	shr    eax,0x5
c001b5ad:	31 d2                	xor    edx,edx
c001b5af:	f7 f3                	div    ebx
c001b5b1:	31 db                	xor    ebx,ebx
c001b5b3:	52                   	push   edx
c001b5b4:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001b5b8:	57                   	push   edi
c001b5b9:	68 15 c0 02 c0       	push   0xc002c015
c001b5be:	e8 20 7a ff ff       	call   c0012fe3 <Dbg::kprintf(char const*, ...)>
c001b5c3:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001b5c7:	89 f8                	mov    eax,edi
c001b5c9:	31 c9                	xor    ecx,ecx
c001b5cb:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c001b5cf:	88 c1                	mov    cl,al
c001b5d1:	8d 85 94 f8 ff ff    	lea    eax,[ebp-0x76c]
c001b5d7:	88 d5                	mov    ch,dl
c001b5d9:	c1 e0 10             	shl    eax,0x10
c001b5dc:	0f b7 d1             	movzx  edx,cx
c001b5df:	09 c2                	or     edx,eax
c001b5e1:	89 d8                	mov    eax,ebx
c001b5e3:	25 ff ff 00 ff       	and    eax,0xff00ffff
c001b5e8:	09 f0                	or     eax,esi
c001b5ea:	89 c3                	mov    ebx,eax
c001b5ec:	8a 7c 24 20          	mov    bh,BYTE PTR [esp+0x20]
c001b5f0:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c001b5f4:	83 c4 18             	add    esp,0x18
c001b5f7:	53                   	push   ebx
c001b5f8:	52                   	push   edx
c001b5f9:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001b5fd:	8d 74 24 28          	lea    esi,[esp+0x28]
c001b601:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001b605:	e8 bd 89 ff ff       	call   c0013fc7 <datetimeToSeconds(datetime_t)>
c001b60a:	83 c4 0c             	add    esp,0xc
c001b60d:	52                   	push   edx
c001b60e:	50                   	push   eax
c001b60f:	56                   	push   esi
c001b610:	e8 39 8b ff ff       	call   c001414e <secondsToDatetime(unsigned long long)>
c001b615:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001b619:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001b61d:	51                   	push   ecx
c001b61e:	89 d6                	mov    esi,edx
c001b620:	51                   	push   ecx
c001b621:	c1 ee 10             	shr    esi,0x10
c001b624:	89 f3                	mov    ebx,esi
c001b626:	0f b6 f3             	movzx  esi,bl
c001b629:	56                   	push   esi
c001b62a:	0f b6 f6             	movzx  esi,dh
c001b62d:	0f b6 d2             	movzx  edx,dl
c001b630:	56                   	push   esi
c001b631:	52                   	push   edx
c001b632:	89 c2                	mov    edx,eax
c001b634:	c1 ea 10             	shr    edx,0x10
c001b637:	52                   	push   edx
c001b638:	0f b6 d4             	movzx  edx,ah
c001b63b:	0f b6 c0             	movzx  eax,al
c001b63e:	52                   	push   edx
c001b63f:	50                   	push   eax
c001b640:	68 31 c0 02 c0       	push   0xc002c031
c001b645:	e8 99 79 ff ff       	call   c0012fe3 <Dbg::kprintf(char const*, ...)>
c001b64a:	83 c4 2c             	add    esp,0x2c
c001b64d:	a1 e8 e6 02 c0       	mov    eax,ds:0xc002e6e8
c001b652:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001b656:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001b65a:	53                   	push   ebx
c001b65b:	51                   	push   ecx
c001b65c:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c001b662:	e8 87 8a ff ff       	call   c00140ee <Clock::setTimeInDatetimeLocal(datetime_t)>
c001b667:	83 f0 01             	xor    eax,0x1
c001b66a:	31 d2                	xor    edx,edx
c001b66c:	0f b6 c0             	movzx  eax,al
c001b66f:	83 c4 3c             	add    esp,0x3c
c001b672:	5b                   	pop    ebx
c001b673:	5e                   	pop    esi
c001b674:	5f                   	pop    edi
c001b675:	5d                   	pop    ebp
c001b676:	c3                   	ret    

c001b677 <Sys::timezone(regs*)>:
c001b677:	53                   	push   ebx
c001b678:	83 ec 08             	sub    esp,0x8
c001b67b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b67f:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c001b683:	75 17                	jne    c001b69c <Sys::timezone(regs*)+0x25>
c001b685:	83 ec 0c             	sub    esp,0xc
c001b688:	68 4d c0 02 c0       	push   0xc002c04d
c001b68d:	e8 51 79 ff ff       	call   c0012fe3 <Dbg::kprintf(char const*, ...)>
c001b692:	83 c8 ff             	or     eax,0xffffffff
c001b695:	83 c4 10             	add    esp,0x10
c001b698:	89 c2                	mov    edx,eax
c001b69a:	eb 20                	jmp    c001b6bc <Sys::timezone(regs*)+0x45>
c001b69c:	83 ec 0c             	sub    esp,0xc
c001b69f:	68 85 c0 02 c0       	push   0xc002c085
c001b6a4:	e8 3a 79 ff ff       	call   c0012fe3 <Dbg::kprintf(char const*, ...)>
c001b6a9:	58                   	pop    eax
c001b6aa:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001b6ad:	e8 9e 87 ff ff       	call   c0013e50 <User::loadClockSettings(int)>
c001b6b2:	83 c4 10             	add    esp,0x10
c001b6b5:	b8 01 00 00 00       	mov    eax,0x1
c001b6ba:	31 d2                	xor    edx,edx
c001b6bc:	83 c4 08             	add    esp,0x8
c001b6bf:	5b                   	pop    ebx
c001b6c0:	c3                   	ret    

c001b6c1 <Sys::write(regs*)>:
c001b6c1:	57                   	push   edi
c001b6c2:	56                   	push   esi
c001b6c3:	53                   	push   ebx
c001b6c4:	83 ec 10             	sub    esp,0x10
c001b6c7:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b6cb:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b6ce:	83 f8 02             	cmp    eax,0x2
c001b6d1:	77 10                	ja     c001b6e3 <Sys::write(regs*)+0x22>
c001b6d3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b6d8:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b6db:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c001b6e1:	eb 0e                	jmp    c001b6f1 <Sys::write(regs*)+0x30>
c001b6e3:	83 ec 0c             	sub    esp,0xc
c001b6e6:	50                   	push   eax
c001b6e7:	e8 e1 63 ff ff       	call   c0011acd <getFromFileDescriptor(int)>
c001b6ec:	83 c4 10             	add    esp,0x10
c001b6ef:	89 c1                	mov    ecx,eax
c001b6f1:	83 c8 ff             	or     eax,0xffffffff
c001b6f4:	85 c9                	test   ecx,ecx
c001b6f6:	89 c2                	mov    edx,eax
c001b6f8:	74 28                	je     c001b722 <Sys::write(regs*)+0x61>
c001b6fa:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b702:	31 ff                	xor    edi,edi
c001b704:	83 ec 0c             	sub    esp,0xc
c001b707:	8b 01                	mov    eax,DWORD PTR [ecx]
c001b709:	8d 54 24 18          	lea    edx,[esp+0x18]
c001b70d:	52                   	push   edx
c001b70e:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b711:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001b714:	57                   	push   edi
c001b715:	56                   	push   esi
c001b716:	51                   	push   ecx
c001b717:	ff 50 10             	call   DWORD PTR [eax+0x10]
c001b71a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b71e:	83 c4 20             	add    esp,0x20
c001b721:	99                   	cdq    
c001b722:	83 c4 10             	add    esp,0x10
c001b725:	5b                   	pop    ebx
c001b726:	5e                   	pop    esi
c001b727:	5f                   	pop    edi
c001b728:	c3                   	ret    

c001b729 <Sys::wsbe(regs*)>:
c001b729:	57                   	push   edi
c001b72a:	b9 0b 00 00 00       	mov    ecx,0xb
c001b72f:	56                   	push   esi
c001b730:	be c4 c0 02 c0       	mov    esi,0xc002c0c4
c001b735:	53                   	push   ebx
c001b736:	83 ec 30             	sub    esp,0x30
c001b739:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001b73d:	fc                   	cld    
c001b73e:	83 ec 0c             	sub    esp,0xc
c001b741:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001b743:	8d 7c 24 10          	lea    edi,[esp+0x10]
c001b747:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b74c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b74f:	8b b0 26 05 00 00    	mov    esi,DWORD PTR [eax+0x526]
c001b755:	8b 06                	mov    eax,DWORD PTR [esi]
c001b757:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c001b75a:	57                   	push   edi
c001b75b:	e8 34 50 fe ff       	call   c0000794 <strlen>
c001b760:	5a                   	pop    edx
c001b761:	8d 54 24 0c          	lea    edx,[esp+0xc]
c001b765:	52                   	push   edx
c001b766:	31 d2                	xor    edx,edx
c001b768:	57                   	push   edi
c001b769:	52                   	push   edx
c001b76a:	50                   	push   eax
c001b76b:	56                   	push   esi
c001b76c:	ff d3                	call   ebx
c001b76e:	83 c4 14             	add    esp,0x14
c001b771:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001b775:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001b778:	e8 80 31 00 00       	call   c001e8fd <terminateTask(int)>
c001b77d:	83 c4 40             	add    esp,0x40
c001b780:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001b785:	5b                   	pop    ebx
c001b786:	31 d2                	xor    edx,edx
c001b788:	5e                   	pop    esi
c001b789:	5f                   	pop    edi
c001b78a:	c3                   	ret    

c001b78b <Sys::yield(regs*)>:
c001b78b:	57                   	push   edi
c001b78c:	56                   	push   esi
c001b78d:	53                   	push   ebx
c001b78e:	e8 27 27 00 00       	call   c001deba <lockScheduler()>
c001b793:	e8 5e 2a 00 00       	call   c001e1f6 <schedule()>
c001b798:	e8 1f 27 00 00       	call   c001debc <unlockScheduler()>
c001b79d:	8b 35 70 ed 02 c0    	mov    esi,DWORD PTR ds:0xc002ed70
c001b7a3:	8b 3d 74 ed 02 c0    	mov    edi,DWORD PTR ds:0xc002ed74
c001b7a9:	89 f0                	mov    eax,esi
c001b7ab:	89 fb                	mov    ebx,edi
c001b7ad:	89 f1                	mov    ecx,esi
c001b7af:	c1 e0 07             	shl    eax,0x7
c001b7b2:	0f ac d9 17          	shrd   ecx,ebx,0x17
c001b7b6:	25 80 30 0f 00       	and    eax,0xf3080
c001b7bb:	c1 eb 17             	shr    ebx,0x17
c001b7be:	31 c8                	xor    eax,ecx
c001b7c0:	89 da                	mov    edx,ebx
c001b7c2:	5b                   	pop    ebx
c001b7c3:	5e                   	pop    esi
c001b7c4:	5f                   	pop    edi
c001b7c5:	c3                   	ret    

c001b7c6 <sysCallSeekDir(regs*)>:
c001b7c6:	31 c0                	xor    eax,eax
c001b7c8:	31 d2                	xor    edx,edx
c001b7ca:	c3                   	ret    

c001b7cb <sysCallTellDir(regs*)>:
c001b7cb:	31 c0                	xor    eax,eax
c001b7cd:	31 d2                	xor    edx,edx
c001b7cf:	c3                   	ret    

c001b7d0 <sysCallVerify(regs*)>:
c001b7d0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b7d4:	31 d2                	xor    edx,edx
c001b7d6:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b7d9:	c3                   	ret    

c001b7da <sysFormatDisk(regs*)>:
c001b7da:	56                   	push   esi
c001b7db:	53                   	push   ebx
c001b7dc:	53                   	push   ebx
c001b7dd:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b7e1:	8b 1d 6c e8 02 c0    	mov    ebx,DWORD PTR ds:0xc002e86c
c001b7e7:	eb 25                	jmp    c001b80e <sysFormatDisk(regs*)+0x34>
c001b7e9:	83 ec 0c             	sub    esp,0xc
c001b7ec:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001b7ef:	8b 13                	mov    edx,DWORD PTR [ebx]
c001b7f1:	ff 76 28             	push   DWORD PTR [esi+0x28]
c001b7f4:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001b7f7:	50                   	push   eax
c001b7f8:	ff 34 85 00 ed 02 c0 	push   DWORD PTR [eax*4-0x3ffd1300]
c001b7ff:	53                   	push   ebx
c001b800:	ff 52 48             	call   DWORD PTR [edx+0x48]
c001b803:	83 c4 20             	add    esp,0x20
c001b806:	83 f8 08             	cmp    eax,0x8
c001b809:	75 12                	jne    c001b81d <sysFormatDisk(regs*)+0x43>
c001b80b:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c001b80e:	85 db                	test   ebx,ebx
c001b810:	75 d7                	jne    c001b7e9 <sysFormatDisk(regs*)+0xf>
c001b812:	59                   	pop    ecx
c001b813:	b8 03 00 00 00       	mov    eax,0x3
c001b818:	31 d2                	xor    edx,edx
c001b81a:	5b                   	pop    ebx
c001b81b:	5e                   	pop    esi
c001b81c:	c3                   	ret    
c001b81d:	85 c0                	test   eax,eax
c001b81f:	74 1b                	je     c001b83c <sysFormatDisk(regs*)+0x62>
c001b821:	83 f8 09             	cmp    eax,0x9
c001b824:	74 0b                	je     c001b831 <sysFormatDisk(regs*)+0x57>
c001b826:	59                   	pop    ecx
c001b827:	b8 02 00 00 00       	mov    eax,0x2
c001b82c:	31 d2                	xor    edx,edx
c001b82e:	5b                   	pop    ebx
c001b82f:	5e                   	pop    esi
c001b830:	c3                   	ret    
c001b831:	59                   	pop    ecx
c001b832:	b8 01 00 00 00       	mov    eax,0x1
c001b837:	31 d2                	xor    edx,edx
c001b839:	5b                   	pop    ebx
c001b83a:	5e                   	pop    esi
c001b83b:	c3                   	ret    
c001b83c:	59                   	pop    ecx
c001b83d:	31 c0                	xor    eax,eax
c001b83f:	31 d2                	xor    edx,edx
c001b841:	5b                   	pop    ebx
c001b842:	5e                   	pop    esi
c001b843:	c3                   	ret    

c001b844 <sysSetDiskVolumeLabel(regs*)>:
c001b844:	56                   	push   esi
c001b845:	53                   	push   ebx
c001b846:	53                   	push   ebx
c001b847:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b84b:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001b84e:	83 f8 19             	cmp    eax,0x19
c001b851:	77 29                	ja     c001b87c <sysSetDiskVolumeLabel(regs*)+0x38>
c001b853:	8b 0c 85 00 ed 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd1300]
c001b85a:	85 c9                	test   ecx,ecx
c001b85c:	74 1e                	je     c001b87c <sysSetDiskVolumeLabel(regs*)+0x38>
c001b85e:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c001b861:	85 d2                	test   edx,edx
c001b863:	74 17                	je     c001b87c <sysSetDiskVolumeLabel(regs*)+0x38>
c001b865:	8b 99 70 01 00 00    	mov    ebx,DWORD PTR [ecx+0x170]
c001b86b:	8b 33                	mov    esi,DWORD PTR [ebx]
c001b86d:	52                   	push   edx
c001b86e:	50                   	push   eax
c001b86f:	51                   	push   ecx
c001b870:	53                   	push   ebx
c001b871:	ff 56 58             	call   DWORD PTR [esi+0x58]
c001b874:	83 c4 10             	add    esp,0x10
c001b877:	99                   	cdq    
c001b878:	59                   	pop    ecx
c001b879:	5b                   	pop    ebx
c001b87a:	5e                   	pop    esi
c001b87b:	c3                   	ret    
c001b87c:	59                   	pop    ecx
c001b87d:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001b882:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b887:	5b                   	pop    ebx
c001b888:	5e                   	pop    esi
c001b889:	c3                   	ret    

c001b88a <sysGetDiskVolumeLabel(regs*)>:
c001b88a:	57                   	push   edi
c001b88b:	56                   	push   esi
c001b88c:	53                   	push   ebx
c001b88d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b891:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001b894:	83 fa 19             	cmp    edx,0x19
c001b897:	77 34                	ja     c001b8cd <sysGetDiskVolumeLabel(regs*)+0x43>
c001b899:	8b 0c 95 00 ed 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd1300]
c001b8a0:	85 c9                	test   ecx,ecx
c001b8a2:	74 29                	je     c001b8cd <sysGetDiskVolumeLabel(regs*)+0x43>
c001b8a4:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c001b8a7:	85 db                	test   ebx,ebx
c001b8a9:	74 22                	je     c001b8cd <sysGetDiskVolumeLabel(regs*)+0x43>
c001b8ab:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001b8ae:	85 c0                	test   eax,eax
c001b8b0:	74 1b                	je     c001b8cd <sysGetDiskVolumeLabel(regs*)+0x43>
c001b8b2:	8b b1 70 01 00 00    	mov    esi,DWORD PTR [ecx+0x170]
c001b8b8:	83 ec 0c             	sub    esp,0xc
c001b8bb:	8b 3e                	mov    edi,DWORD PTR [esi]
c001b8bd:	50                   	push   eax
c001b8be:	53                   	push   ebx
c001b8bf:	52                   	push   edx
c001b8c0:	51                   	push   ecx
c001b8c1:	56                   	push   esi
c001b8c2:	ff 57 54             	call   DWORD PTR [edi+0x54]
c001b8c5:	83 c4 20             	add    esp,0x20
c001b8c8:	99                   	cdq    
c001b8c9:	5b                   	pop    ebx
c001b8ca:	5e                   	pop    esi
c001b8cb:	5f                   	pop    edi
c001b8cc:	c3                   	ret    
c001b8cd:	5b                   	pop    ebx
c001b8ce:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001b8d3:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b8d8:	5e                   	pop    esi
c001b8d9:	5f                   	pop    edi
c001b8da:	c3                   	ret    

c001b8db <sysShutdown(regs*)>:
c001b8db:	83 ec 0c             	sub    esp,0xc
c001b8de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b8e2:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b8e5:	85 c0                	test   eax,eax
c001b8e7:	74 18                	je     c001b901 <sysShutdown(regs*)+0x26>
c001b8e9:	83 f8 01             	cmp    eax,0x1
c001b8ec:	74 38                	je     c001b926 <sysShutdown(regs*)+0x4b>
c001b8ee:	83 f8 02             	cmp    eax,0x2
c001b8f1:	74 24                	je     c001b917 <sysShutdown(regs*)+0x3c>
c001b8f3:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b8f8:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b8fd:	83 c4 0c             	add    esp,0xc
c001b900:	c3                   	ret    
c001b901:	a1 e8 e6 02 c0       	mov    eax,ds:0xc002e6e8
c001b906:	8b 10                	mov    edx,DWORD PTR [eax]
c001b908:	6a 00                	push   0x0
c001b90a:	6a 00                	push   0x0
c001b90c:	6a 00                	push   0x0
c001b90e:	50                   	push   eax
c001b90f:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001b912:	83 c4 10             	add    esp,0x10
c001b915:	eb dc                	jmp    c001b8f3 <sysShutdown(regs*)+0x18>
c001b917:	a1 e8 e6 02 c0       	mov    eax,ds:0xc002e6e8
c001b91c:	8b 10                	mov    edx,DWORD PTR [eax]
c001b91e:	6a 00                	push   0x0
c001b920:	6a 00                	push   0x0
c001b922:	6a 01                	push   0x1
c001b924:	eb e8                	jmp    c001b90e <sysShutdown(regs*)+0x33>
c001b926:	a1 a0 0d 03 c0       	mov    eax,ds:0xc0030da0
c001b92b:	85 c0                	test   eax,eax
c001b92d:	74 02                	je     c001b931 <sysShutdown(regs*)+0x56>
c001b92f:	ff d0                	call   eax
c001b931:	31 c0                	xor    eax,eax
c001b933:	31 d2                	xor    edx,edx
c001b935:	83 c4 0c             	add    esp,0xc
c001b938:	c3                   	ret    

c001b939 <sysCallRealpath(regs*)>:
c001b939:	83 ec 0c             	sub    esp,0xc
c001b93c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b940:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c001b943:	85 d2                	test   edx,edx
c001b945:	74 07                	je     c001b94e <sysCallRealpath(regs*)+0x15>
c001b947:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001b94a:	85 c0                	test   eax,eax
c001b94c:	75 0b                	jne    c001b959 <sysCallRealpath(regs*)+0x20>
c001b94e:	b8 01 00 00 00       	mov    eax,0x1
c001b953:	31 d2                	xor    edx,edx
c001b955:	83 c4 0c             	add    esp,0xc
c001b958:	c3                   	ret    
c001b959:	51                   	push   ecx
c001b95a:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001b960:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001b963:	81 c1 0c 01 00 00    	add    ecx,0x10c
c001b969:	51                   	push   ecx
c001b96a:	52                   	push   edx
c001b96b:	50                   	push   eax
c001b96c:	e8 21 7a ff ff       	call   c0013392 <Fs::standardiseFiles(char*, char const*, char const*)>
c001b971:	83 c4 10             	add    esp,0x10
c001b974:	31 c0                	xor    eax,eax
c001b976:	31 d2                	xor    edx,edx
c001b978:	83 c4 0c             	add    esp,0xc
c001b97b:	c3                   	ret    

c001b97c <sysCallGetArgc(regs*)>:
c001b97c:	83 ec 14             	sub    esp,0x14
c001b97f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b984:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b987:	ff b0 36 05 00 00    	push   DWORD PTR [eax+0x536]
c001b98d:	68 f0 c0 02 c0       	push   0xc002c0f0
c001b992:	e8 4c 76 ff ff       	call   c0012fe3 <Dbg::kprintf(char const*, ...)>
c001b997:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b99c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b99f:	8b 80 36 05 00 00    	mov    eax,DWORD PTR [eax+0x536]
c001b9a5:	83 c4 1c             	add    esp,0x1c
c001b9a8:	99                   	cdq    
c001b9a9:	c3                   	ret    

c001b9aa <sysCallReadDir(regs*)>:
c001b9aa:	53                   	push   ebx
c001b9ab:	83 ec 18             	sub    esp,0x18
c001b9ae:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b9b2:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001b9b5:	83 f8 02             	cmp    eax,0x2
c001b9b8:	76 53                	jbe    c001ba0d <sysCallReadDir(regs*)+0x63>
c001b9ba:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001b9bd:	81 fa 00 ff ff 0f    	cmp    edx,0xfffff00
c001b9c3:	77 4f                	ja     c001ba14 <sysCallReadDir(regs*)+0x6a>
c001b9c5:	83 ec 0c             	sub    esp,0xc
c001b9c8:	50                   	push   eax
c001b9c9:	e8 ff 60 ff ff       	call   c0011acd <getFromFileDescriptor(int)>
c001b9ce:	83 c4 10             	add    esp,0x10
c001b9d1:	85 c0                	test   eax,eax
c001b9d3:	74 50                	je     c001ba25 <sysCallReadDir(regs*)+0x7b>
c001b9d5:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b9dd:	83 ec 0c             	sub    esp,0xc
c001b9e0:	8b 10                	mov    edx,DWORD PTR [eax]
c001b9e2:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c001b9e6:	51                   	push   ecx
c001b9e7:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b9ea:	6a 00                	push   0x0
c001b9ec:	68 10 01 00 00       	push   0x110
c001b9f1:	50                   	push   eax
c001b9f2:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001b9f5:	83 c4 20             	add    esp,0x20
c001b9f8:	85 c0                	test   eax,eax
c001b9fa:	74 38                	je     c001ba34 <sysCallReadDir(regs*)+0x8a>
c001b9fc:	83 f8 07             	cmp    eax,0x7
c001b9ff:	74 0c                	je     c001ba0d <sysCallReadDir(regs*)+0x63>
c001ba01:	b8 02 00 00 00       	mov    eax,0x2
c001ba06:	31 d2                	xor    edx,edx
c001ba08:	83 c4 18             	add    esp,0x18
c001ba0b:	5b                   	pop    ebx
c001ba0c:	c3                   	ret    
c001ba0d:	b8 01 00 00 00       	mov    eax,0x1
c001ba12:	eb f2                	jmp    c001ba06 <sysCallReadDir(regs*)+0x5c>
c001ba14:	83 ec 08             	sub    esp,0x8
c001ba17:	52                   	push   edx
c001ba18:	68 08 c2 02 c0       	push   0xc002c208
c001ba1d:	e8 c1 75 ff ff       	call   c0012fe3 <Dbg::kprintf(char const*, ...)>
c001ba22:	83 c4 10             	add    esp,0x10
c001ba25:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001ba2a:	ba ff ff ff ff       	mov    edx,0xffffffff
c001ba2f:	83 c4 18             	add    esp,0x18
c001ba32:	5b                   	pop    ebx
c001ba33:	c3                   	ret    
c001ba34:	31 c0                	xor    eax,eax
c001ba36:	eb ce                	jmp    c001ba06 <sysCallReadDir(regs*)+0x5c>

c001ba38 <sysCallIsATTY(regs*)>:
c001ba38:	83 ec 0c             	sub    esp,0xc
c001ba3b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba3f:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001ba42:	83 f8 02             	cmp    eax,0x2
c001ba45:	76 07                	jbe    c001ba4e <sysCallIsATTY(regs*)+0x16>
c001ba47:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001ba4c:	75 26                	jne    c001ba74 <sysCallIsATTY(regs*)+0x3c>
c001ba4e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ba53:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001ba56:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001ba5c:	85 c0                	test   eax,eax
c001ba5e:	74 24                	je     c001ba84 <sysCallIsATTY(regs*)+0x4c>
c001ba60:	83 ec 0c             	sub    esp,0xc
c001ba63:	8b 10                	mov    edx,DWORD PTR [eax]
c001ba65:	50                   	push   eax
c001ba66:	ff 12                	call   DWORD PTR [edx]
c001ba68:	31 d2                	xor    edx,edx
c001ba6a:	0f b6 c0             	movzx  eax,al
c001ba6d:	83 c4 10             	add    esp,0x10
c001ba70:	83 c4 0c             	add    esp,0xc
c001ba73:	c3                   	ret    
c001ba74:	83 ec 0c             	sub    esp,0xc
c001ba77:	50                   	push   eax
c001ba78:	e8 50 60 ff ff       	call   c0011acd <getFromFileDescriptor(int)>
c001ba7d:	83 c4 10             	add    esp,0x10
c001ba80:	85 c0                	test   eax,eax
c001ba82:	75 dc                	jne    c001ba60 <sysCallIsATTY(regs*)+0x28>
c001ba84:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001ba89:	ba ff ff ff ff       	mov    edx,0xffffffff
c001ba8e:	83 c4 0c             	add    esp,0xc
c001ba91:	c3                   	ret    

c001ba92 <sysCallSeek(regs*)>:
c001ba92:	53                   	push   ebx
c001ba93:	83 ec 08             	sub    esp,0x8
c001ba96:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ba9a:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001ba9d:	83 f8 02             	cmp    eax,0x2
c001baa0:	76 4a                	jbe    c001baec <sysCallSeek(regs*)+0x5a>
c001baa2:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001baa7:	77 32                	ja     c001badb <sysCallSeek(regs*)+0x49>
c001baa9:	83 ec 0c             	sub    esp,0xc
c001baac:	50                   	push   eax
c001baad:	e8 1b 60 ff ff       	call   c0011acd <getFromFileDescriptor(int)>
c001bab2:	83 c4 0c             	add    esp,0xc
c001bab5:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c001bab8:	31 db                	xor    ebx,ebx
c001baba:	53                   	push   ebx
c001babb:	51                   	push   ecx
c001babc:	50                   	push   eax
c001babd:	e8 9c 7b ff ff       	call   c001365e <File::seek(unsigned long long)>
c001bac2:	83 c4 10             	add    esp,0x10
c001bac5:	85 c0                	test   eax,eax
c001bac7:	0f 95 c0             	setne  al
c001baca:	31 d2                	xor    edx,edx
c001bacc:	0f b6 c0             	movzx  eax,al
c001bacf:	f7 d8                	neg    eax
c001bad1:	83 d2 00             	adc    edx,0x0
c001bad4:	83 c4 08             	add    esp,0x8
c001bad7:	f7 da                	neg    edx
c001bad9:	5b                   	pop    ebx
c001bada:	c3                   	ret    
c001badb:	83 ec 08             	sub    esp,0x8
c001bade:	50                   	push   eax
c001badf:	68 fb c0 02 c0       	push   0xc002c0fb
c001bae4:	e8 fa 74 ff ff       	call   c0012fe3 <Dbg::kprintf(char const*, ...)>
c001bae9:	83 c4 10             	add    esp,0x10
c001baec:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001baf1:	ba ff ff ff ff       	mov    edx,0xffffffff
c001baf6:	83 c4 08             	add    esp,0x8
c001baf9:	5b                   	pop    ebx
c001bafa:	c3                   	ret    

c001bafb <sysCallTell(regs*)>:
c001bafb:	53                   	push   ebx
c001bafc:	83 ec 08             	sub    esp,0x8
c001baff:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001bb03:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001bb06:	83 f8 02             	cmp    eax,0x2
c001bb09:	76 5e                	jbe    c001bb69 <sysCallTell(regs*)+0x6e>
c001bb0b:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001bb10:	77 2d                	ja     c001bb3f <sysCallTell(regs*)+0x44>
c001bb12:	83 ec 0c             	sub    esp,0xc
c001bb15:	50                   	push   eax
c001bb16:	e8 b2 5f ff ff       	call   c0011acd <getFromFileDescriptor(int)>
c001bb1b:	5a                   	pop    edx
c001bb1c:	59                   	pop    ecx
c001bb1d:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001bb20:	50                   	push   eax
c001bb21:	e8 8e 7b ff ff       	call   c00136b4 <File::tell(unsigned long long*)>
c001bb26:	83 c4 10             	add    esp,0x10
c001bb29:	85 c0                	test   eax,eax
c001bb2b:	0f 95 c0             	setne  al
c001bb2e:	31 d2                	xor    edx,edx
c001bb30:	0f b6 c0             	movzx  eax,al
c001bb33:	f7 d8                	neg    eax
c001bb35:	83 d2 00             	adc    edx,0x0
c001bb38:	83 c4 08             	add    esp,0x8
c001bb3b:	f7 da                	neg    edx
c001bb3d:	5b                   	pop    ebx
c001bb3e:	c3                   	ret    
c001bb3f:	83 ec 08             	sub    esp,0x8
c001bb42:	50                   	push   eax
c001bb43:	68 15 c1 02 c0       	push   0xc002c115
c001bb48:	e8 96 74 ff ff       	call   c0012fe3 <Dbg::kprintf(char const*, ...)>
c001bb4d:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001bb50:	83 c4 10             	add    esp,0x10
c001bb53:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001bb59:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001bb60:	31 d2                	xor    edx,edx
c001bb62:	31 c0                	xor    eax,eax
c001bb64:	83 c4 08             	add    esp,0x8
c001bb67:	5b                   	pop    ebx
c001bb68:	c3                   	ret    
c001bb69:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bb6e:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bb73:	83 c4 08             	add    esp,0x8
c001bb76:	5b                   	pop    ebx
c001bb77:	c3                   	ret    

c001bb78 <sysCallSize(regs*)>:
c001bb78:	53                   	push   ebx
c001bb79:	83 ec 18             	sub    esp,0x18
c001bb7c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001bb80:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001bb83:	83 f8 02             	cmp    eax,0x2
c001bb86:	76 64                	jbe    c001bbec <sysCallSize(regs*)+0x74>
c001bb88:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001bb8d:	77 33                	ja     c001bbc2 <sysCallSize(regs*)+0x4a>
c001bb8f:	83 ec 0c             	sub    esp,0xc
c001bb92:	50                   	push   eax
c001bb93:	e8 35 5f ff ff       	call   c0011acd <getFromFileDescriptor(int)>
c001bb98:	83 c4 0c             	add    esp,0xc
c001bb9b:	8d 54 24 13          	lea    edx,[esp+0x13]
c001bb9f:	52                   	push   edx
c001bba0:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001bba3:	50                   	push   eax
c001bba4:	e8 a3 7c ff ff       	call   c001384c <File::stat(unsigned long long*, bool*)>
c001bba9:	83 c4 10             	add    esp,0x10
c001bbac:	85 c0                	test   eax,eax
c001bbae:	0f 95 c0             	setne  al
c001bbb1:	31 d2                	xor    edx,edx
c001bbb3:	0f b6 c0             	movzx  eax,al
c001bbb6:	f7 d8                	neg    eax
c001bbb8:	83 d2 00             	adc    edx,0x0
c001bbbb:	83 c4 18             	add    esp,0x18
c001bbbe:	f7 da                	neg    edx
c001bbc0:	5b                   	pop    ebx
c001bbc1:	c3                   	ret    
c001bbc2:	83 ec 08             	sub    esp,0x8
c001bbc5:	50                   	push   eax
c001bbc6:	68 2f c1 02 c0       	push   0xc002c12f
c001bbcb:	e8 13 74 ff ff       	call   c0012fe3 <Dbg::kprintf(char const*, ...)>
c001bbd0:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001bbd3:	83 c4 10             	add    esp,0x10
c001bbd6:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001bbdc:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001bbe3:	31 d2                	xor    edx,edx
c001bbe5:	31 c0                	xor    eax,eax
c001bbe7:	83 c4 18             	add    esp,0x18
c001bbea:	5b                   	pop    ebx
c001bbeb:	c3                   	ret    
c001bbec:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bbf1:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bbf6:	83 c4 18             	add    esp,0x18
c001bbf9:	5b                   	pop    ebx
c001bbfa:	c3                   	ret    

c001bbfb <sysCallSizeFromFilename(regs*)>:
c001bbfb:	57                   	push   edi
c001bbfc:	56                   	push   esi
c001bbfd:	53                   	push   ebx
c001bbfe:	83 ec 20             	sub    esp,0x20
c001bc01:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001bc05:	8b 5f 20             	mov    ebx,DWORD PTR [edi+0x20]
c001bc08:	83 fb 02             	cmp    ebx,0x2
c001bc0b:	0f 86 99 00 00 00    	jbe    c001bcaa <sysCallSizeFromFilename(regs*)+0xaf>
c001bc11:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c001bc17:	77 65                	ja     c001bc7e <sysCallSizeFromFilename(regs*)+0x83>
c001bc19:	83 ec 0c             	sub    esp,0xc
c001bc1c:	68 14 01 00 00       	push   0x114
c001bc21:	e8 be 3c ff ff       	call   c000f8e4 <malloc>
c001bc26:	83 c4 0c             	add    esp,0xc
c001bc29:	89 c6                	mov    esi,eax
c001bc2b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bc30:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bc33:	53                   	push   ebx
c001bc34:	56                   	push   esi
c001bc35:	e8 02 79 ff ff       	call   c001353c <File::File(char const*, Process*)>
c001bc3a:	83 c4 0c             	add    esp,0xc
c001bc3d:	8d 44 24 23          	lea    eax,[esp+0x23]
c001bc41:	50                   	push   eax
c001bc42:	ff 77 28             	push   DWORD PTR [edi+0x28]
c001bc45:	56                   	push   esi
c001bc46:	e8 01 7c ff ff       	call   c001384c <File::stat(unsigned long long*, bool*)>
c001bc4b:	83 c4 10             	add    esp,0x10
c001bc4e:	85 f6                	test   esi,esi
c001bc50:	74 14                	je     c001bc66 <sysCallSizeFromFilename(regs*)+0x6b>
c001bc52:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bc56:	8b 16                	mov    edx,DWORD PTR [esi]
c001bc58:	83 ec 0c             	sub    esp,0xc
c001bc5b:	56                   	push   esi
c001bc5c:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001bc5f:	83 c4 10             	add    esp,0x10
c001bc62:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bc66:	85 c0                	test   eax,eax
c001bc68:	0f 95 c0             	setne  al
c001bc6b:	31 d2                	xor    edx,edx
c001bc6d:	0f b6 c0             	movzx  eax,al
c001bc70:	f7 d8                	neg    eax
c001bc72:	83 d2 00             	adc    edx,0x0
c001bc75:	83 c4 20             	add    esp,0x20
c001bc78:	f7 da                	neg    edx
c001bc7a:	5b                   	pop    ebx
c001bc7b:	5e                   	pop    esi
c001bc7c:	5f                   	pop    edi
c001bc7d:	c3                   	ret    
c001bc7e:	83 ec 08             	sub    esp,0x8
c001bc81:	53                   	push   ebx
c001bc82:	68 2f c1 02 c0       	push   0xc002c12f
c001bc87:	e8 57 73 ff ff       	call   c0012fe3 <Dbg::kprintf(char const*, ...)>
c001bc8c:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c001bc8f:	83 c4 10             	add    esp,0x10
c001bc92:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001bc98:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001bc9f:	31 d2                	xor    edx,edx
c001bca1:	83 c4 20             	add    esp,0x20
c001bca4:	31 c0                	xor    eax,eax
c001bca6:	5b                   	pop    ebx
c001bca7:	5e                   	pop    esi
c001bca8:	5f                   	pop    edi
c001bca9:	c3                   	ret    
c001bcaa:	83 c4 20             	add    esp,0x20
c001bcad:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bcb2:	5b                   	pop    ebx
c001bcb3:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bcb8:	5e                   	pop    esi
c001bcb9:	5f                   	pop    edi
c001bcba:	c3                   	ret    

c001bcbb <sysCallClose(regs*)>:
c001bcbb:	53                   	push   ebx
c001bcbc:	83 ec 08             	sub    esp,0x8
c001bcbf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bcc3:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001bcc6:	83 f8 02             	cmp    eax,0x2
c001bcc9:	76 50                	jbe    c001bd1b <sysCallClose(regs*)+0x60>
c001bccb:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001bcd0:	74 58                	je     c001bd2a <sysCallClose(regs*)+0x6f>
c001bcd2:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001bcd7:	74 60                	je     c001bd39 <sysCallClose(regs*)+0x7e>
c001bcd9:	77 2f                	ja     c001bd0a <sysCallClose(regs*)+0x4f>
c001bcdb:	83 ec 0c             	sub    esp,0xc
c001bcde:	50                   	push   eax
c001bcdf:	e8 e9 5d ff ff       	call   c0011acd <getFromFileDescriptor(int)>
c001bce4:	89 c3                	mov    ebx,eax
c001bce6:	89 04 24             	mov    DWORD PTR [esp],eax
c001bce9:	e8 10 79 ff ff       	call   c00135fe <File::close()>
c001bcee:	83 c4 10             	add    esp,0x10
c001bcf1:	85 db                	test   ebx,ebx
c001bcf3:	74 0c                	je     c001bd01 <sysCallClose(regs*)+0x46>
c001bcf5:	83 ec 0c             	sub    esp,0xc
c001bcf8:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bcfa:	53                   	push   ebx
c001bcfb:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001bcfe:	83 c4 10             	add    esp,0x10
c001bd01:	31 c0                	xor    eax,eax
c001bd03:	31 d2                	xor    edx,edx
c001bd05:	83 c4 08             	add    esp,0x8
c001bd08:	5b                   	pop    ebx
c001bd09:	c3                   	ret    
c001bd0a:	83 ec 08             	sub    esp,0x8
c001bd0d:	50                   	push   eax
c001bd0e:	68 2c c2 02 c0       	push   0xc002c22c
c001bd13:	e8 cb 72 ff ff       	call   c0012fe3 <Dbg::kprintf(char const*, ...)>
c001bd18:	83 c4 10             	add    esp,0x10
c001bd1b:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bd20:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bd25:	83 c4 08             	add    esp,0x8
c001bd28:	5b                   	pop    ebx
c001bd29:	c3                   	ret    
c001bd2a:	83 ec 0c             	sub    esp,0xc
c001bd2d:	68 4a c1 02 c0       	push   0xc002c14a
c001bd32:	e8 ac 72 ff ff       	call   c0012fe3 <Dbg::kprintf(char const*, ...)>
c001bd37:	eb c5                	jmp    c001bcfe <sysCallClose(regs*)+0x43>
c001bd39:	83 ec 0c             	sub    esp,0xc
c001bd3c:	68 58 c1 02 c0       	push   0xc002c158
c001bd41:	eb ef                	jmp    c001bd32 <sysCallClose(regs*)+0x77>

c001bd43 <sysCallOpenDir(regs*)>:
c001bd43:	56                   	push   esi
c001bd44:	53                   	push   ebx
c001bd45:	53                   	push   ebx
c001bd46:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001bd4a:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c001bd4d:	85 f6                	test   esi,esi
c001bd4f:	74 59                	je     c001bdaa <sysCallOpenDir(regs*)+0x67>
c001bd51:	83 ec 0c             	sub    esp,0xc
c001bd54:	68 14 01 00 00       	push   0x114
c001bd59:	e8 86 3b ff ff       	call   c000f8e4 <malloc>
c001bd5e:	83 c4 0c             	add    esp,0xc
c001bd61:	89 c6                	mov    esi,eax
c001bd63:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bd68:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bd6b:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bd6e:	56                   	push   esi
c001bd6f:	e8 74 7c ff ff       	call   c00139e8 <Directory::Directory(char const*, Process*)>
c001bd74:	83 c4 10             	add    esp,0x10
c001bd77:	85 f6                	test   esi,esi
c001bd79:	74 2f                	je     c001bdaa <sysCallOpenDir(regs*)+0x67>
c001bd7b:	83 ec 0c             	sub    esp,0xc
c001bd7e:	56                   	push   esi
c001bd7f:	e8 c8 7c ff ff       	call   c0013a4c <Directory::open()>
c001bd84:	83 c4 10             	add    esp,0x10
c001bd87:	85 c0                	test   eax,eax
c001bd89:	75 1f                	jne    c001bdaa <sysCallOpenDir(regs*)+0x67>
c001bd8b:	83 ec 0c             	sub    esp,0xc
c001bd8e:	56                   	push   esi
c001bd8f:	e8 44 5a ff ff       	call   c00117d8 <UnixFile::getFileDescriptor()>
c001bd94:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001bd97:	83 c4 10             	add    esp,0x10
c001bd9a:	89 02                	mov    DWORD PTR [edx],eax
c001bd9c:	c1 f8 1f             	sar    eax,0x1f
c001bd9f:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001bda2:	31 c0                	xor    eax,eax
c001bda4:	59                   	pop    ecx
c001bda5:	31 d2                	xor    edx,edx
c001bda7:	5b                   	pop    ebx
c001bda8:	5e                   	pop    esi
c001bda9:	c3                   	ret    
c001bdaa:	59                   	pop    ecx
c001bdab:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bdb0:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bdb5:	5b                   	pop    ebx
c001bdb6:	5e                   	pop    esi
c001bdb7:	c3                   	ret    

c001bdb8 <sysCallCloseDir(regs*)>:
c001bdb8:	53                   	push   ebx
c001bdb9:	83 ec 08             	sub    esp,0x8
c001bdbc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bdc0:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001bdc3:	83 f8 02             	cmp    eax,0x2
c001bdc6:	76 47                	jbe    c001be0f <sysCallCloseDir(regs*)+0x57>
c001bdc8:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001bdcd:	77 2f                	ja     c001bdfe <sysCallCloseDir(regs*)+0x46>
c001bdcf:	83 ec 0c             	sub    esp,0xc
c001bdd2:	50                   	push   eax
c001bdd3:	e8 f5 5c ff ff       	call   c0011acd <getFromFileDescriptor(int)>
c001bdd8:	89 c3                	mov    ebx,eax
c001bdda:	89 04 24             	mov    DWORD PTR [esp],eax
c001bddd:	e8 c6 7c ff ff       	call   c0013aa8 <Directory::close()>
c001bde2:	83 c4 10             	add    esp,0x10
c001bde5:	85 db                	test   ebx,ebx
c001bde7:	74 0c                	je     c001bdf5 <sysCallCloseDir(regs*)+0x3d>
c001bde9:	83 ec 0c             	sub    esp,0xc
c001bdec:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bdee:	53                   	push   ebx
c001bdef:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001bdf2:	83 c4 10             	add    esp,0x10
c001bdf5:	31 c0                	xor    eax,eax
c001bdf7:	31 d2                	xor    edx,edx
c001bdf9:	83 c4 08             	add    esp,0x8
c001bdfc:	5b                   	pop    ebx
c001bdfd:	c3                   	ret    
c001bdfe:	83 ec 08             	sub    esp,0x8
c001be01:	50                   	push   eax
c001be02:	68 54 c2 02 c0       	push   0xc002c254
c001be07:	e8 d7 71 ff ff       	call   c0012fe3 <Dbg::kprintf(char const*, ...)>
c001be0c:	83 c4 10             	add    esp,0x10
c001be0f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001be14:	ba ff ff ff ff       	mov    edx,0xffffffff
c001be19:	83 c4 08             	add    esp,0x8
c001be1c:	5b                   	pop    ebx
c001be1d:	c3                   	ret    

c001be1e <sysCallMakeDir(regs*)>:
c001be1e:	56                   	push   esi
c001be1f:	53                   	push   ebx
c001be20:	83 ec 10             	sub    esp,0x10
c001be23:	68 14 01 00 00       	push   0x114
c001be28:	e8 b7 3a ff ff       	call   c000f8e4 <malloc>
c001be2d:	83 c4 0c             	add    esp,0xc
c001be30:	89 c3                	mov    ebx,eax
c001be32:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001be37:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001be3a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001be3e:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001be41:	53                   	push   ebx
c001be42:	e8 a1 7b ff ff       	call   c00139e8 <Directory::Directory(char const*, Process*)>
c001be47:	83 c4 10             	add    esp,0x10
c001be4a:	85 db                	test   ebx,ebx
c001be4c:	74 32                	je     c001be80 <sysCallMakeDir(regs*)+0x62>
c001be4e:	83 ec 0c             	sub    esp,0xc
c001be51:	53                   	push   ebx
c001be52:	e8 d5 7d ff ff       	call   c0013c2c <Directory::create()>
c001be57:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001be5a:	89 c6                	mov    esi,eax
c001be5c:	e8 47 7c ff ff       	call   c0013aa8 <Directory::close()>
c001be61:	8b 03                	mov    eax,DWORD PTR [ebx]
c001be63:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001be66:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001be69:	83 c4 10             	add    esp,0x10
c001be6c:	31 c0                	xor    eax,eax
c001be6e:	59                   	pop    ecx
c001be6f:	85 f6                	test   esi,esi
c001be71:	5b                   	pop    ebx
c001be72:	0f 95 c0             	setne  al
c001be75:	5e                   	pop    esi
c001be76:	31 d2                	xor    edx,edx
c001be78:	f7 d8                	neg    eax
c001be7a:	83 d2 00             	adc    edx,0x0
c001be7d:	f7 da                	neg    edx
c001be7f:	c3                   	ret    
c001be80:	59                   	pop    ecx
c001be81:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001be86:	ba ff ff ff ff       	mov    edx,0xffffffff
c001be8b:	5b                   	pop    ebx
c001be8c:	5e                   	pop    esi
c001be8d:	c3                   	ret    

c001be8e <sysCallWait(regs*)>:
c001be8e:	83 ec 10             	sub    esp,0x10
c001be91:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001be95:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001be98:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001be9b:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001be9e:	e8 ce 24 00 00       	call   c001e371 <waitTask(int, int*, int)>
c001bea3:	83 c4 1c             	add    esp,0x1c
c001bea6:	99                   	cdq    
c001bea7:	c3                   	ret    

c001bea8 <sysCallNotImpl(regs*)>:
c001bea8:	83 ec 18             	sub    esp,0x18
c001beab:	68 66 c1 02 c0       	push   0xc002c166
c001beb0:	e8 e0 e7 ff ff       	call   c001a695 <Krnl::panic(char const*)>
c001beb5:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001beba:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bebf:	83 c4 1c             	add    esp,0x1c
c001bec2:	c3                   	ret    

c001bec3 <sysPanic(regs*)>:
c001bec3:	83 ec 18             	sub    esp,0x18
c001bec6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001beca:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001becd:	e8 c3 e7 ff ff       	call   c001a695 <Krnl::panic(char const*)>
c001bed2:	c7 04 24 80 c1 02 c0 	mov    DWORD PTR [esp],0xc002c180
c001bed9:	e8 b7 e7 ff ff       	call   c001a695 <Krnl::panic(char const*)>
c001bede:	b8 01 00 00 00       	mov    eax,0x1
c001bee3:	31 d2                	xor    edx,edx
c001bee5:	83 c4 1c             	add    esp,0x1c
c001bee8:	c3                   	ret    

c001bee9 <sysCallRmdir(regs*)>:
c001bee9:	56                   	push   esi
c001beea:	53                   	push   ebx
c001beeb:	83 ec 20             	sub    esp,0x20
c001beee:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001bef2:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001bef5:	68 14 01 00 00       	push   0x114
c001befa:	e8 e5 39 ff ff       	call   c000f8e4 <malloc>
c001beff:	83 c4 0c             	add    esp,0xc
c001bf02:	89 c3                	mov    ebx,eax
c001bf04:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bf09:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bf0c:	56                   	push   esi
c001bf0d:	53                   	push   ebx
c001bf0e:	e8 29 76 ff ff       	call   c001353c <File::File(char const*, Process*)>
c001bf13:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bf16:	e8 fd 77 ff ff       	call   c0013718 <File::unlink()>
c001bf1b:	83 c4 10             	add    esp,0x10
c001bf1e:	85 db                	test   ebx,ebx
c001bf20:	74 14                	je     c001bf36 <sysCallRmdir(regs*)+0x4d>
c001bf22:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bf26:	8b 13                	mov    edx,DWORD PTR [ebx]
c001bf28:	83 ec 0c             	sub    esp,0xc
c001bf2b:	53                   	push   ebx
c001bf2c:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001bf2f:	83 c4 10             	add    esp,0x10
c001bf32:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bf36:	85 c0                	test   eax,eax
c001bf38:	0f 95 c0             	setne  al
c001bf3b:	31 d2                	xor    edx,edx
c001bf3d:	0f b6 c0             	movzx  eax,al
c001bf40:	f7 d8                	neg    eax
c001bf42:	83 d2 00             	adc    edx,0x0
c001bf45:	83 c4 14             	add    esp,0x14
c001bf48:	f7 da                	neg    edx
c001bf4a:	5b                   	pop    ebx
c001bf4b:	5e                   	pop    esi
c001bf4c:	c3                   	ret    

c001bf4d <sysCallUnlink(regs*)>:
c001bf4d:	56                   	push   esi
c001bf4e:	53                   	push   ebx
c001bf4f:	83 ec 20             	sub    esp,0x20
c001bf52:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001bf56:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001bf59:	68 14 01 00 00       	push   0x114
c001bf5e:	e8 81 39 ff ff       	call   c000f8e4 <malloc>
c001bf63:	83 c4 0c             	add    esp,0xc
c001bf66:	89 c3                	mov    ebx,eax
c001bf68:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bf6d:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bf70:	56                   	push   esi
c001bf71:	53                   	push   ebx
c001bf72:	e8 c5 75 ff ff       	call   c001353c <File::File(char const*, Process*)>
c001bf77:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bf7a:	e8 99 77 ff ff       	call   c0013718 <File::unlink()>
c001bf7f:	83 c4 10             	add    esp,0x10
c001bf82:	85 db                	test   ebx,ebx
c001bf84:	74 14                	je     c001bf9a <sysCallUnlink(regs*)+0x4d>
c001bf86:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bf8a:	8b 13                	mov    edx,DWORD PTR [ebx]
c001bf8c:	83 ec 0c             	sub    esp,0xc
c001bf8f:	53                   	push   ebx
c001bf90:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001bf93:	83 c4 10             	add    esp,0x10
c001bf96:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bf9a:	85 c0                	test   eax,eax
c001bf9c:	0f 95 c0             	setne  al
c001bf9f:	31 d2                	xor    edx,edx
c001bfa1:	0f b6 c0             	movzx  eax,al
c001bfa4:	f7 d8                	neg    eax
c001bfa6:	83 d2 00             	adc    edx,0x0
c001bfa9:	83 c4 14             	add    esp,0x14
c001bfac:	f7 da                	neg    edx
c001bfae:	5b                   	pop    ebx
c001bfaf:	5e                   	pop    esi
c001bfb0:	c3                   	ret    

c001bfb1 <sysCallGetArgv(regs*)>:
c001bfb1:	83 ec 0c             	sub    esp,0xc
c001bfb4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001bfb8:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001bfbb:	85 c0                	test   eax,eax
c001bfbd:	78 2b                	js     c001bfea <sysCallGetArgv(regs*)+0x39>
c001bfbf:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001bfc5:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001bfc8:	3b 81 36 05 00 00    	cmp    eax,DWORD PTR [ecx+0x536]
c001bfce:	7d 1a                	jge    c001bfea <sysCallGetArgv(regs*)+0x39>
c001bfd0:	8b 84 81 3a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x53a]
c001bfd7:	85 c0                	test   eax,eax
c001bfd9:	74 17                	je     c001bff2 <sysCallGetArgv(regs*)+0x41>
c001bfdb:	83 ec 08             	sub    esp,0x8
c001bfde:	50                   	push   eax
c001bfdf:	ff 72 24             	push   DWORD PTR [edx+0x24]
c001bfe2:	e8 4d 48 fe ff       	call   c0000834 <strcpy>
c001bfe7:	83 c4 10             	add    esp,0x10
c001bfea:	31 c0                	xor    eax,eax
c001bfec:	31 d2                	xor    edx,edx
c001bfee:	83 c4 0c             	add    esp,0xc
c001bff1:	c3                   	ret    
c001bff2:	b8 01 00 00 00       	mov    eax,0x1
c001bff7:	31 d2                	xor    edx,edx
c001bff9:	83 c4 0c             	add    esp,0xc
c001bffc:	c3                   	ret    

c001bffd <sysCallTTYName(regs*)>:
c001bffd:	56                   	push   esi
c001bffe:	53                   	push   ebx
c001bfff:	53                   	push   ebx
c001c000:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001c004:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c001c007:	85 c0                	test   eax,eax
c001c009:	74 5f                	je     c001c06a <sysCallTTYName(regs*)+0x6d>
c001c00b:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001c00e:	83 f8 02             	cmp    eax,0x2
c001c011:	77 3e                	ja     c001c051 <sysCallTTYName(regs*)+0x54>
c001c013:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c018:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c01b:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c001c021:	85 db                	test   ebx,ebx
c001c023:	74 45                	je     c001c06a <sysCallTTYName(regs*)+0x6d>
c001c025:	83 ec 0c             	sub    esp,0xc
c001c028:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c02a:	53                   	push   ebx
c001c02b:	ff 10                	call   DWORD PTR [eax]
c001c02d:	83 c4 10             	add    esp,0x10
c001c030:	84 c0                	test   al,al
c001c032:	74 41                	je     c001c075 <sysCallTTYName(regs*)+0x78>
c001c034:	83 ec 08             	sub    esp,0x8
c001c037:	81 c3 1e 10 00 00    	add    ebx,0x101e
c001c03d:	53                   	push   ebx
c001c03e:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001c041:	e8 ee 47 fe ff       	call   c0000834 <strcpy>
c001c046:	83 c4 10             	add    esp,0x10
c001c049:	31 c0                	xor    eax,eax
c001c04b:	59                   	pop    ecx
c001c04c:	31 d2                	xor    edx,edx
c001c04e:	5b                   	pop    ebx
c001c04f:	5e                   	pop    esi
c001c050:	c3                   	ret    
c001c051:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001c056:	74 bb                	je     c001c013 <sysCallTTYName(regs*)+0x16>
c001c058:	83 ec 0c             	sub    esp,0xc
c001c05b:	50                   	push   eax
c001c05c:	e8 6c 5a ff ff       	call   c0011acd <getFromFileDescriptor(int)>
c001c061:	83 c4 10             	add    esp,0x10
c001c064:	89 c3                	mov    ebx,eax
c001c066:	85 db                	test   ebx,ebx
c001c068:	75 bb                	jne    c001c025 <sysCallTTYName(regs*)+0x28>
c001c06a:	59                   	pop    ecx
c001c06b:	b8 01 00 00 00       	mov    eax,0x1
c001c070:	31 d2                	xor    edx,edx
c001c072:	5b                   	pop    ebx
c001c073:	5e                   	pop    esi
c001c074:	c3                   	ret    
c001c075:	59                   	pop    ecx
c001c076:	b8 02 00 00 00       	mov    eax,0x2
c001c07b:	31 d2                	xor    edx,edx
c001c07d:	5b                   	pop    ebx
c001c07e:	5e                   	pop    esi
c001c07f:	c3                   	ret    

c001c080 <sysCallUSleep(regs*)>:
c001c080:	83 ec 14             	sub    esp,0x14
c001c083:	b8 e8 03 00 00       	mov    eax,0x3e8
c001c088:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001c08c:	69 4a 28 e8 03 00 00 	imul   ecx,DWORD PTR [edx+0x28],0x3e8
c001c093:	f7 62 20             	mul    DWORD PTR [edx+0x20]
c001c096:	01 ca                	add    edx,ecx
c001c098:	52                   	push   edx
c001c099:	50                   	push   eax
c001c09a:	e8 6b 23 00 00       	call   c001e40a <nanoSleep(unsigned long long)>
c001c09f:	31 c0                	xor    eax,eax
c001c0a1:	31 d2                	xor    edx,edx
c001c0a3:	83 c4 1c             	add    esp,0x1c
c001c0a6:	c3                   	ret    

c001c0a7 <sysCallSpawn(regs*)>:
c001c0a7:	56                   	push   esi
c001c0a8:	53                   	push   ebx
c001c0a9:	53                   	push   ebx
c001c0aa:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c0ae:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c001c0b1:	85 f6                	test   esi,esi
c001c0b3:	75 08                	jne    c001c0bd <sysCallSpawn(regs*)+0x16>
c001c0b5:	59                   	pop    ecx
c001c0b6:	31 c0                	xor    eax,eax
c001c0b8:	31 d2                	xor    edx,edx
c001c0ba:	5b                   	pop    ebx
c001c0bb:	5e                   	pop    esi
c001c0bc:	c3                   	ret    
c001c0bd:	83 ec 0c             	sub    esp,0xc
c001c0c0:	68 3f 07 00 00       	push   0x73f
c001c0c5:	e8 1a 38 ff ff       	call   c000f8e4 <malloc>
c001c0ca:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001c0cd:	89 c6                	mov    esi,eax
c001c0cf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c0d4:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c0d7:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c0da:	56                   	push   esi
c001c0db:	e8 2a 1a 00 00       	call   c001db0a <Process::Process(char const*, Process*, char**)>
c001c0e0:	83 c4 20             	add    esp,0x20
c001c0e3:	80 be 3e 07 00 00 00 	cmp    BYTE PTR [esi+0x73e],0x0
c001c0ea:	75 c9                	jne    c001c0b5 <sysCallSpawn(regs*)+0xe>
c001c0ec:	83 ec 0c             	sub    esp,0xc
c001c0ef:	56                   	push   esi
c001c0f0:	e8 db 1f 00 00       	call   c001e0d0 <Process::createUserThread()>
c001c0f5:	8b 06                	mov    eax,DWORD PTR [esi]
c001c0f7:	83 c4 10             	add    esp,0x10
c001c0fa:	99                   	cdq    
c001c0fb:	59                   	pop    ecx
c001c0fc:	5b                   	pop    ebx
c001c0fd:	5e                   	pop    esi
c001c0fe:	c3                   	ret    

c001c0ff <sysCallGetEnv(regs*)>:
c001c0ff:	55                   	push   ebp
c001c100:	57                   	push   edi
c001c101:	56                   	push   esi
c001c102:	53                   	push   ebx
c001c103:	83 ec 28             	sub    esp,0x28
c001c106:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001c10a:	68 8f c1 02 c0       	push   0xc002c18f
c001c10f:	e8 cf 6e ff ff       	call   c0012fe3 <Dbg::kprintf(char const*, ...)>
c001c114:	5f                   	pop    edi
c001c115:	8b 5e 24             	mov    ebx,DWORD PTR [esi+0x24]
c001c118:	5d                   	pop    ebp
c001c119:	53                   	push   ebx
c001c11a:	68 be c4 02 c0       	push   0xc002c4be
c001c11f:	e8 bf 6e ff ff       	call   c0012fe3 <Dbg::kprintf(char const*, ...)>
c001c124:	58                   	pop    eax
c001c125:	8b 7e 20             	mov    edi,DWORD PTR [esi+0x20]
c001c128:	5a                   	pop    edx
c001c129:	57                   	push   edi
c001c12a:	68 98 c1 02 c0       	push   0xc002c198
c001c12f:	e8 af 6e ff ff       	call   c0012fe3 <Dbg::kprintf(char const*, ...)>
c001c134:	59                   	pop    ecx
c001c135:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c13a:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c13d:	e8 6f e4 ff ff       	call   c001a5b1 <Krnl::getProcessTotalEnvCount(Process*)>
c001c142:	5a                   	pop    edx
c001c143:	89 c5                	mov    ebp,eax
c001c145:	59                   	pop    ecx
c001c146:	50                   	push   eax
c001c147:	68 a2 c1 02 c0       	push   0xc002c1a2
c001c14c:	e8 92 6e ff ff       	call   c0012fe3 <Dbg::kprintf(char const*, ...)>
c001c151:	83 c4 10             	add    esp,0x10
c001c154:	39 ef                	cmp    edi,ebp
c001c156:	7c 15                	jl     c001c16d <sysCallGetEnv(regs*)+0x6e>
c001c158:	85 db                	test   ebx,ebx
c001c15a:	75 0c                	jne    c001c168 <sysCallGetEnv(regs*)+0x69>
c001c15c:	83 c4 1c             	add    esp,0x1c
c001c15f:	31 c0                	xor    eax,eax
c001c161:	5b                   	pop    ebx
c001c162:	31 d2                	xor    edx,edx
c001c164:	5e                   	pop    esi
c001c165:	5f                   	pop    edi
c001c166:	5d                   	pop    ebp
c001c167:	c3                   	ret    
c001c168:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c001c16b:	eb ef                	jmp    c001c15c <sysCallGetEnv(regs*)+0x5d>
c001c16d:	83 ec 0c             	sub    esp,0xc
c001c170:	68 ae c1 02 c0       	push   0xc002c1ae
c001c175:	e8 69 6e ff ff       	call   c0012fe3 <Dbg::kprintf(char const*, ...)>
c001c17a:	8d 44 24 18          	lea    eax,[esp+0x18]
c001c17e:	83 c4 0c             	add    esp,0xc
c001c181:	57                   	push   edi
c001c182:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001c188:	ff 72 40             	push   DWORD PTR [edx+0x40]
c001c18b:	50                   	push   eax
c001c18c:	e8 40 e4 ff ff       	call   c001a5d1 <Krnl::getProcessEnvPair(Process*, int)>
c001c191:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c001c195:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001c199:	68 3d c5 02 c0       	push   0xc002c53d
c001c19e:	e8 40 6e ff ff       	call   c0012fe3 <Dbg::kprintf(char const*, ...)>
c001c1a3:	83 c4 10             	add    esp,0x10
c001c1a6:	8b 76 28             	mov    esi,DWORD PTR [esi+0x28]
c001c1a9:	85 f6                	test   esi,esi
c001c1ab:	75 47                	jne    c001c1f4 <sysCallGetEnv(regs*)+0xf5>
c001c1ad:	83 ec 0c             	sub    esp,0xc
c001c1b0:	55                   	push   ebp
c001c1b1:	e8 de 45 fe ff       	call   c0000794 <strlen>
c001c1b6:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c1b9:	89 c3                	mov    ebx,eax
c001c1bb:	e8 d4 45 fe ff       	call   c0000794 <strlen>
c001c1c0:	5a                   	pop    edx
c001c1c1:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c001c1c5:	59                   	pop    ecx
c001c1c6:	50                   	push   eax
c001c1c7:	68 b1 c1 02 c0       	push   0xc002c1b1
c001c1cc:	e8 12 6e ff ff       	call   c0012fe3 <Dbg::kprintf(char const*, ...)>
c001c1d1:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001c1d4:	e8 bb 45 fe ff       	call   c0000794 <strlen>
c001c1d9:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c1dc:	89 c3                	mov    ebx,eax
c001c1de:	e8 b1 45 fe ff       	call   c0000794 <strlen>
c001c1e3:	83 c4 10             	add    esp,0x10
c001c1e6:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c001c1ea:	83 c4 1c             	add    esp,0x1c
c001c1ed:	31 d2                	xor    edx,edx
c001c1ef:	5b                   	pop    ebx
c001c1f0:	5e                   	pop    esi
c001c1f1:	5f                   	pop    edi
c001c1f2:	5d                   	pop    ebp
c001c1f3:	c3                   	ret    
c001c1f4:	83 ec 0c             	sub    esp,0xc
c001c1f7:	68 57 c5 02 c0       	push   0xc002c557
c001c1fc:	e8 e2 6d ff ff       	call   c0012fe3 <Dbg::kprintf(char const*, ...)>
c001c201:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c001c204:	58                   	pop    eax
c001c205:	5a                   	pop    edx
c001c206:	55                   	push   ebp
c001c207:	53                   	push   ebx
c001c208:	e8 27 46 fe ff       	call   c0000834 <strcpy>
c001c20d:	59                   	pop    ecx
c001c20e:	5e                   	pop    esi
c001c20f:	68 bb c1 02 c0       	push   0xc002c1bb
c001c214:	53                   	push   ebx
c001c215:	e8 5a 47 fe ff       	call   c0000974 <strcat>
c001c21a:	5d                   	pop    ebp
c001c21b:	58                   	pop    eax
c001c21c:	57                   	push   edi
c001c21d:	53                   	push   ebx
c001c21e:	e8 51 47 fe ff       	call   c0000974 <strcat>
c001c223:	c7 04 24 71 c5 02 c0 	mov    DWORD PTR [esp],0xc002c571
c001c22a:	e8 b4 6d ff ff       	call   c0012fe3 <Dbg::kprintf(char const*, ...)>
c001c22f:	83 c4 10             	add    esp,0x10
c001c232:	e9 25 ff ff ff       	jmp    c001c15c <sysCallGetEnv(regs*)+0x5d>

c001c237 <sysAppSettings(regs*)>:
c001c237:	53                   	push   ebx
c001c238:	83 ec 08             	sub    esp,0x8
c001c23b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c23f:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c001c242:	8b 83 00 01 00 00    	mov    eax,DWORD PTR [ebx+0x100]
c001c248:	25 e0 1f 00 00       	and    eax,0x1fe0
c001c24d:	66 3d c0 09          	cmp    ax,0x9c0
c001c251:	75 2f                	jne    c001c282 <sysAppSettings(regs*)+0x4b>
c001c253:	8a 83 00 01 00 00    	mov    al,BYTE PTR [ebx+0x100]
c001c259:	83 e0 1f             	and    eax,0x1f
c001c25c:	3c 01                	cmp    al,0x1
c001c25e:	74 2e                	je     c001c28e <sysAppSettings(regs*)+0x57>
c001c260:	3c 07                	cmp    al,0x7
c001c262:	0f 84 bd 00 00 00    	je     c001c325 <sysAppSettings(regs*)+0xee>
c001c268:	84 c0                	test   al,al
c001c26a:	0f 84 dc 00 00 00    	je     c001c34c <sysAppSettings(regs*)+0x115>
c001c270:	3c 08                	cmp    al,0x8
c001c272:	74 6d                	je     c001c2e1 <sysAppSettings(regs*)+0xaa>
c001c274:	0f b6 c0             	movzx  eax,al
c001c277:	83 c4 08             	add    esp,0x8
c001c27a:	05 e8 03 00 00       	add    eax,0x3e8
c001c27f:	5b                   	pop    ebx
c001c280:	99                   	cdq    
c001c281:	c3                   	ret    
c001c282:	b8 01 00 00 00       	mov    eax,0x1
c001c287:	31 d2                	xor    edx,edx
c001c289:	83 c4 08             	add    esp,0x8
c001c28c:	5b                   	pop    ebx
c001c28d:	c3                   	ret    
c001c28e:	51                   	push   ecx
c001c28f:	68 00 01 00 00       	push   0x100
c001c294:	6a 00                	push   0x0
c001c296:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c29b:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c29e:	83 c0 0c             	add    eax,0xc
c001c2a1:	50                   	push   eax
c001c2a2:	e8 d1 44 fe ff       	call   c0000778 <memset>
c001c2a7:	83 c4 0c             	add    esp,0xc
c001c2aa:	68 ff 00 00 00       	push   0xff
c001c2af:	53                   	push   ebx
c001c2b0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c2b5:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c2b8:	83 c0 0c             	add    eax,0xc
c001c2bb:	50                   	push   eax
c001c2bc:	e8 83 44 fe ff       	call   c0000744 <memcpy>
c001c2c1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c2c6:	5b                   	pop    ebx
c001c2c7:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c2ca:	5a                   	pop    edx
c001c2cb:	8d 50 0c             	lea    edx,[eax+0xc]
c001c2ce:	52                   	push   edx
c001c2cf:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001c2d5:	e8 6e 49 ff ff       	call   c0010c48 <VgaText::setTitle(char*)>
c001c2da:	83 c4 10             	add    esp,0x10
c001c2dd:	31 c0                	xor    eax,eax
c001c2df:	eb a6                	jmp    c001c287 <sysAppSettings(regs*)+0x50>
c001c2e1:	83 ec 08             	sub    esp,0x8
c001c2e4:	8b 83 04 01 00 00    	mov    eax,DWORD PTR [ebx+0x104]
c001c2ea:	83 e0 0f             	and    eax,0xf
c001c2ed:	50                   	push   eax
c001c2ee:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c2f3:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c2f6:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001c2fc:	e8 37 49 ff ff       	call   c0010c38 <VgaText::setTitleColour(VgaColour)>
c001c301:	58                   	pop    eax
c001c302:	8b 83 04 01 00 00    	mov    eax,DWORD PTR [ebx+0x104]
c001c308:	5a                   	pop    edx
c001c309:	c1 e8 04             	shr    eax,0x4
c001c30c:	83 e0 0f             	and    eax,0xf
c001c30f:	50                   	push   eax
c001c310:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c315:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c318:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001c31e:	e8 05 49 ff ff       	call   c0010c28 <VgaText::setTitleTextColour(VgaColour)>
c001c323:	eb b5                	jmp    c001c2da <sysAppSettings(regs*)+0xa3>
c001c325:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c32a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c32d:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001c333:	8a 83 01 01 00 00    	mov    al,BYTE PTR [ebx+0x101]
c001c339:	c0 e8 06             	shr    al,0x6
c001c33c:	83 e0 01             	and    eax,0x1
c001c33f:	88 82 1c 10 00 00    	mov    BYTE PTR [edx+0x101c],al
c001c345:	31 c0                	xor    eax,eax
c001c347:	e9 3b ff ff ff       	jmp    c001c287 <sysAppSettings(regs*)+0x50>
c001c34c:	b8 02 00 00 00       	mov    eax,0x2
c001c351:	e9 31 ff ff ff       	jmp    c001c287 <sysAppSettings(regs*)+0x50>

c001c356 <sysSetFatAttrib(regs*)>:
c001c356:	57                   	push   edi
c001c357:	56                   	push   esi
c001c358:	53                   	push   ebx
c001c359:	83 ec 1c             	sub    esp,0x1c
c001c35c:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001c360:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c001c363:	68 14 01 00 00       	push   0x114
c001c368:	e8 77 35 ff ff       	call   c000f8e4 <malloc>
c001c36d:	83 c4 0c             	add    esp,0xc
c001c370:	89 c3                	mov    ebx,eax
c001c372:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c377:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c37a:	57                   	push   edi
c001c37b:	53                   	push   ebx
c001c37c:	e8 bb 71 ff ff       	call   c001353c <File::File(char const*, Process*)>
c001c381:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001c384:	83 c4 0c             	add    esp,0xc
c001c387:	0f b6 d4             	movzx  edx,ah
c001c38a:	0f b6 c0             	movzx  eax,al
c001c38d:	52                   	push   edx
c001c38e:	50                   	push   eax
c001c38f:	53                   	push   ebx
c001c390:	e8 1d 74 ff ff       	call   c00137b2 <File::chfatattr(unsigned char, unsigned char)>
c001c395:	83 c4 10             	add    esp,0x10
c001c398:	85 db                	test   ebx,ebx
c001c39a:	74 14                	je     c001c3b0 <sysSetFatAttrib(regs*)+0x5a>
c001c39c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c3a0:	8b 13                	mov    edx,DWORD PTR [ebx]
c001c3a2:	83 ec 0c             	sub    esp,0xc
c001c3a5:	53                   	push   ebx
c001c3a6:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001c3a9:	83 c4 10             	add    esp,0x10
c001c3ac:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c3b0:	85 c0                	test   eax,eax
c001c3b2:	0f 95 c0             	setne  al
c001c3b5:	31 d2                	xor    edx,edx
c001c3b7:	0f b6 c0             	movzx  eax,al
c001c3ba:	f7 d8                	neg    eax
c001c3bc:	83 d2 00             	adc    edx,0x0
c001c3bf:	83 c4 10             	add    esp,0x10
c001c3c2:	f7 da                	neg    edx
c001c3c4:	5b                   	pop    ebx
c001c3c5:	5e                   	pop    esi
c001c3c6:	5f                   	pop    edi
c001c3c7:	c3                   	ret    

c001c3c8 <sysPipe(regs*)>:
c001c3c8:	57                   	push   edi
c001c3c9:	56                   	push   esi
c001c3ca:	53                   	push   ebx
c001c3cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c3cf:	83 ec 0c             	sub    esp,0xc
c001c3d2:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c001c3d5:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c001c3d8:	6a 20                	push   0x20
c001c3da:	e8 05 35 ff ff       	call   c000f8e4 <malloc>
c001c3df:	89 c3                	mov    ebx,eax
c001c3e1:	58                   	pop    eax
c001c3e2:	5a                   	pop    edx
c001c3e3:	68 00 50 00 00       	push   0x5000
c001c3e8:	53                   	push   ebx
c001c3e9:	e8 8a 41 ff ff       	call   c0010578 <Pipe::Pipe(int)>
c001c3ee:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c3f1:	e8 e2 53 ff ff       	call   c00117d8 <UnixFile::getFileDescriptor()>
c001c3f6:	89 07                	mov    DWORD PTR [edi],eax
c001c3f8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c3fb:	e8 d8 53 ff ff       	call   c00117d8 <UnixFile::getFileDescriptor()>
c001c400:	83 c4 10             	add    esp,0x10
c001c403:	89 06                	mov    DWORD PTR [esi],eax
c001c405:	31 d2                	xor    edx,edx
c001c407:	5b                   	pop    ebx
c001c408:	31 c0                	xor    eax,eax
c001c40a:	5e                   	pop    esi
c001c40b:	5f                   	pop    edi
c001c40c:	c3                   	ret    

c001c40d <sysGetUnixTime(regs*)>:
c001c40d:	a1 e8 e6 02 c0       	mov    eax,ds:0xc002e6e8
c001c412:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001c418:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c41c:	e9 05 7b ff ff       	jmp    c0013f26 <Clock::timeInSecondsLocal()>

c001c421 <string_ends_with(char const*, char const*)>:
c001c421:	57                   	push   edi
c001c422:	56                   	push   esi
c001c423:	53                   	push   ebx
c001c424:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c428:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001c42c:	83 ec 0c             	sub    esp,0xc
c001c42f:	53                   	push   ebx
c001c430:	e8 5f 43 fe ff       	call   c0000794 <strlen>
c001c435:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c438:	89 c6                	mov    esi,eax
c001c43a:	e8 55 43 fe ff       	call   c0000794 <strlen>
c001c43f:	83 c4 10             	add    esp,0x10
c001c442:	39 c6                	cmp    esi,eax
c001c444:	7d 06                	jge    c001c44c <string_ends_with(char const*, char const*)+0x2b>
c001c446:	5b                   	pop    ebx
c001c447:	31 c0                	xor    eax,eax
c001c449:	5e                   	pop    esi
c001c44a:	5f                   	pop    edi
c001c44b:	c3                   	ret    
c001c44c:	83 ec 08             	sub    esp,0x8
c001c44f:	29 c6                	sub    esi,eax
c001c451:	57                   	push   edi
c001c452:	01 f3                	add    ebx,esi
c001c454:	53                   	push   ebx
c001c455:	e8 66 44 fe ff       	call   c00008c0 <strcmp>
c001c45a:	83 c4 10             	add    esp,0x10
c001c45d:	85 c0                	test   eax,eax
c001c45f:	5b                   	pop    ebx
c001c460:	0f 94 c0             	sete   al
c001c463:	5e                   	pop    esi
c001c464:	0f b6 c0             	movzx  eax,al
c001c467:	5f                   	pop    edi
c001c468:	c3                   	ret    

c001c469 <sysCallOpen(regs*)>:
c001c469:	56                   	push   esi
c001c46a:	53                   	push   ebx
c001c46b:	81 ec 04 01 00 00    	sub    esp,0x104
c001c471:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c001c478:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c001c47b:	85 c9                	test   ecx,ecx
c001c47d:	0f 84 b3 00 00 00    	je     c001c536 <sysCallOpen(regs*)+0xcd>
c001c483:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001c486:	85 c0                	test   eax,eax
c001c488:	0f 84 a8 00 00 00    	je     c001c536 <sysCallOpen(regs*)+0xcd>
c001c48e:	52                   	push   edx
c001c48f:	68 bd c1 02 c0       	push   0xc002c1bd
c001c494:	50                   	push   eax
c001c495:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001c499:	56                   	push   esi
c001c49a:	e8 f3 6e ff ff       	call   c0013392 <Fs::standardiseFiles(char*, char const*, char const*)>
c001c49f:	89 34 24             	mov    DWORD PTR [esp],esi
c001c4a2:	e8 ed 42 fe ff       	call   c0000794 <strlen>
c001c4a7:	83 c4 10             	add    esp,0x10
c001c4aa:	48                   	dec    eax
c001c4ab:	74 1d                	je     c001c4ca <sysCallOpen(regs*)+0x61>
c001c4ad:	8a 14 04             	mov    dl,BYTE PTR [esp+eax*1]
c001c4b0:	eb 0f                	jmp    c001c4c1 <sysCallOpen(regs*)+0x58>
c001c4b2:	80 fa 3a             	cmp    dl,0x3a
c001c4b5:	74 0f                	je     c001c4c6 <sysCallOpen(regs*)+0x5d>
c001c4b7:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c001c4bb:	48                   	dec    eax
c001c4bc:	74 0c                	je     c001c4ca <sysCallOpen(regs*)+0x61>
c001c4be:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c001c4c1:	80 fa 2e             	cmp    dl,0x2e
c001c4c4:	75 ec                	jne    c001c4b2 <sysCallOpen(regs*)+0x49>
c001c4c6:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c001c4ca:	83 ec 08             	sub    esp,0x8
c001c4cd:	68 c1 c1 02 c0       	push   0xc002c1c1
c001c4d2:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c4d5:	e8 47 ff ff ff       	call   c001c421 <string_ends_with(char const*, char const*)>
c001c4da:	83 c4 10             	add    esp,0x10
c001c4dd:	85 c0                	test   eax,eax
c001c4df:	75 17                	jne    c001c4f8 <sysCallOpen(regs*)+0x8f>
c001c4e1:	83 ec 08             	sub    esp,0x8
c001c4e4:	68 e2 c1 02 c0       	push   0xc002c1e2
c001c4e9:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c4ec:	e8 30 ff ff ff       	call   c001c421 <string_ends_with(char const*, char const*)>
c001c4f1:	83 c4 10             	add    esp,0x10
c001c4f4:	85 c0                	test   eax,eax
c001c4f6:	74 51                	je     c001c549 <sysCallOpen(regs*)+0xe0>
c001c4f8:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c4fb:	83 ec 08             	sub    esp,0x8
c001c4fe:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c001c504:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c50b:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c50e:	ff 30                	push   DWORD PTR [eax]
c001c510:	68 c6 c1 02 c0       	push   0xc002c1c6
c001c515:	e8 c9 6a ff ff       	call   c0012fe3 <Dbg::kprintf(char const*, ...)>
c001c51a:	c7 04 24 d5 c1 02 c0 	mov    DWORD PTR [esp],0xc002c1d5
c001c521:	e8 bd 6a ff ff       	call   c0012fe3 <Dbg::kprintf(char const*, ...)>
c001c526:	83 c4 10             	add    esp,0x10
c001c529:	81 c4 04 01 00 00    	add    esp,0x104
c001c52f:	31 c0                	xor    eax,eax
c001c531:	31 d2                	xor    edx,edx
c001c533:	5b                   	pop    ebx
c001c534:	5e                   	pop    esi
c001c535:	c3                   	ret    
c001c536:	81 c4 04 01 00 00    	add    esp,0x104
c001c53c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001c541:	ba ff ff ff ff       	mov    edx,0xffffffff
c001c546:	5b                   	pop    ebx
c001c547:	5e                   	pop    esi
c001c548:	c3                   	ret    
c001c549:	83 ec 08             	sub    esp,0x8
c001c54c:	68 c2 c1 02 c0       	push   0xc002c1c2
c001c551:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c554:	e8 67 43 fe ff       	call   c00008c0 <strcmp>
c001c559:	83 c4 10             	add    esp,0x10
c001c55c:	85 c0                	test   eax,eax
c001c55e:	74 98                	je     c001c4f8 <sysCallOpen(regs*)+0x8f>
c001c560:	83 ec 08             	sub    esp,0x8
c001c563:	68 c1 c1 02 c0       	push   0xc002c1c1
c001c568:	56                   	push   esi
c001c569:	e8 b3 fe ff ff       	call   c001c421 <string_ends_with(char const*, char const*)>
c001c56e:	83 c4 10             	add    esp,0x10
c001c571:	85 c0                	test   eax,eax
c001c573:	75 83                	jne    c001c4f8 <sysCallOpen(regs*)+0x8f>
c001c575:	83 ec 08             	sub    esp,0x8
c001c578:	68 e7 c1 02 c0       	push   0xc002c1e7
c001c57d:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c580:	e8 9c fe ff ff       	call   c001c421 <string_ends_with(char const*, char const*)>
c001c585:	83 c4 10             	add    esp,0x10
c001c588:	85 c0                	test   eax,eax
c001c58a:	0f 85 d9 00 00 00    	jne    c001c669 <sysCallOpen(regs*)+0x200>
c001c590:	83 ec 08             	sub    esp,0x8
c001c593:	68 ec c1 02 c0       	push   0xc002c1ec
c001c598:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c59b:	e8 81 fe ff ff       	call   c001c421 <string_ends_with(char const*, char const*)>
c001c5a0:	83 c4 10             	add    esp,0x10
c001c5a3:	85 c0                	test   eax,eax
c001c5a5:	0f 85 be 00 00 00    	jne    c001c669 <sysCallOpen(regs*)+0x200>
c001c5ab:	83 ec 08             	sub    esp,0x8
c001c5ae:	68 e8 c1 02 c0       	push   0xc002c1e8
c001c5b3:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c5b6:	e8 05 43 fe ff       	call   c00008c0 <strcmp>
c001c5bb:	83 c4 10             	add    esp,0x10
c001c5be:	85 c0                	test   eax,eax
c001c5c0:	0f 84 a3 00 00 00    	je     c001c669 <sysCallOpen(regs*)+0x200>
c001c5c6:	83 ec 08             	sub    esp,0x8
c001c5c9:	68 e7 c1 02 c0       	push   0xc002c1e7
c001c5ce:	56                   	push   esi
c001c5cf:	e8 4d fe ff ff       	call   c001c421 <string_ends_with(char const*, char const*)>
c001c5d4:	83 c4 10             	add    esp,0x10
c001c5d7:	85 c0                	test   eax,eax
c001c5d9:	0f 85 8a 00 00 00    	jne    c001c669 <sysCallOpen(regs*)+0x200>
c001c5df:	83 ec 0c             	sub    esp,0xc
c001c5e2:	68 14 01 00 00       	push   0x114
c001c5e7:	e8 f8 32 ff ff       	call   c000f8e4 <malloc>
c001c5ec:	83 c4 0c             	add    esp,0xc
c001c5ef:	89 c6                	mov    esi,eax
c001c5f1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c5f6:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c5f9:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c5fc:	56                   	push   esi
c001c5fd:	e8 3a 6f ff ff       	call   c001353c <File::File(char const*, Process*)>
c001c602:	83 c4 10             	add    esp,0x10
c001c605:	85 f6                	test   esi,esi
c001c607:	0f 84 29 ff ff ff    	je     c001c536 <sysCallOpen(regs*)+0xcd>
c001c60d:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001c610:	0f b6 c2             	movzx  eax,dl
c001c613:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c001c616:	89 d0                	mov    eax,edx
c001c618:	83 e0 01             	and    eax,0x1
c001c61b:	f6 c2 02             	test   dl,0x2
c001c61e:	74 03                	je     c001c623 <sysCallOpen(regs*)+0x1ba>
c001c620:	83 c8 02             	or     eax,0x2
c001c623:	f6 c2 04             	test   dl,0x4
c001c626:	74 03                	je     c001c62b <sysCallOpen(regs*)+0x1c2>
c001c628:	83 c8 04             	or     eax,0x4
c001c62b:	f6 c2 08             	test   dl,0x8
c001c62e:	74 03                	je     c001c633 <sysCallOpen(regs*)+0x1ca>
c001c630:	83 c8 0a             	or     eax,0xa
c001c633:	83 e2 10             	and    edx,0x10
c001c636:	74 03                	je     c001c63b <sysCallOpen(regs*)+0x1d2>
c001c638:	83 c8 12             	or     eax,0x12
c001c63b:	83 ec 08             	sub    esp,0x8
c001c63e:	50                   	push   eax
c001c63f:	56                   	push   esi
c001c640:	e8 5b 6f ff ff       	call   c00135a0 <File::open(FileOpenMode)>
c001c645:	83 c4 10             	add    esp,0x10
c001c648:	85 c0                	test   eax,eax
c001c64a:	0f 85 e6 fe ff ff    	jne    c001c536 <sysCallOpen(regs*)+0xcd>
c001c650:	83 ec 0c             	sub    esp,0xc
c001c653:	56                   	push   esi
c001c654:	e8 7f 51 ff ff       	call   c00117d8 <UnixFile::getFileDescriptor()>
c001c659:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001c65c:	89 02                	mov    DWORD PTR [edx],eax
c001c65e:	c1 f8 1f             	sar    eax,0x1f
c001c661:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001c664:	e9 bd fe ff ff       	jmp    c001c526 <sysCallOpen(regs*)+0xbd>
c001c669:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c66c:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c001c672:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c679:	e9 ab fe ff ff       	jmp    c001c529 <sysCallOpen(regs*)+0xc0>

c001c67e <Sys::loadSyscalls()>:
c001c67e:	c7 05 60 12 03 c0 8b b7 01 c0 	mov    DWORD PTR ds:0xc0031260,0xc001b78b
c001c688:	c7 05 64 12 03 c0 2a b3 01 c0 	mov    DWORD PTR ds:0xc0031264,0xc001b32a
c001c692:	c7 05 68 12 03 c0 94 b4 01 c0 	mov    DWORD PTR ds:0xc0031268,0xc001b494
c001c69c:	c7 05 6c 12 03 c0 c1 b6 01 c0 	mov    DWORD PTR ds:0xc003126c,0xc001b6c1
c001c6a6:	c7 05 70 12 03 c0 2c b4 01 c0 	mov    DWORD PTR ds:0xc0031270,0xc001b42c
c001c6b0:	c7 05 74 12 03 c0 61 b3 01 c0 	mov    DWORD PTR ds:0xc0031274,0xc001b361
c001c6ba:	c7 05 78 12 03 c0 42 b3 01 c0 	mov    DWORD PTR ds:0xc0031278,0xc001b342
c001c6c4:	c7 05 7c 12 03 c0 33 b5 01 c0 	mov    DWORD PTR ds:0xc003127c,0xc001b533
c001c6ce:	c7 05 84 12 03 c0 bb bc 01 c0 	mov    DWORD PTR ds:0xc0031284,0xc001bcbb
c001c6d8:	c7 05 80 12 03 c0 69 c4 01 c0 	mov    DWORD PTR ds:0xc0031280,0xc001c469
c001c6e2:	c7 05 88 12 03 c0 43 bd 01 c0 	mov    DWORD PTR ds:0xc0031288,0xc001bd43
c001c6ec:	c7 05 8c 12 03 c0 aa b9 01 c0 	mov    DWORD PTR ds:0xc003128c,0xc001b9aa
c001c6f6:	c7 05 90 12 03 c0 c6 b7 01 c0 	mov    DWORD PTR ds:0xc0031290,0xc001b7c6
c001c700:	c7 05 94 12 03 c0 cb b7 01 c0 	mov    DWORD PTR ds:0xc0031294,0xc001b7cb
c001c70a:	c7 05 98 12 03 c0 1e be 01 c0 	mov    DWORD PTR ds:0xc0031298,0xc001be1e
c001c714:	c7 05 9c 12 03 c0 b8 bd 01 c0 	mov    DWORD PTR ds:0xc003129c,0xc001bdb8
c001c71e:	c7 05 a0 12 03 c0 92 ba 01 c0 	mov    DWORD PTR ds:0xc00312a0,0xc001ba92
c001c728:	c7 05 a4 12 03 c0 fb ba 01 c0 	mov    DWORD PTR ds:0xc00312a4,0xc001bafb
c001c732:	c7 05 a8 12 03 c0 78 bb 01 c0 	mov    DWORD PTR ds:0xc00312a8,0xc001bb78
c001c73c:	c7 05 ac 12 03 c0 d0 b7 01 c0 	mov    DWORD PTR ds:0xc00312ac,0xc001b7d0
c001c746:	c7 05 b0 12 03 c0 8e be 01 c0 	mov    DWORD PTR ds:0xc00312b0,0xc001be8e
c001c750:	c7 05 b4 12 03 c0 a8 be 01 c0 	mov    DWORD PTR ds:0xc00312b4,0xc001bea8
c001c75a:	c7 05 b8 12 03 c0 a8 be 01 c0 	mov    DWORD PTR ds:0xc00312b8,0xc001bea8
c001c764:	c7 05 bc 12 03 c0 e9 be 01 c0 	mov    DWORD PTR ds:0xc00312bc,0xc001bee9
c001c76e:	c7 05 c0 12 03 c0 4d bf 01 c0 	mov    DWORD PTR ds:0xc00312c0,0xc001bf4d
c001c778:	c7 05 c4 12 03 c0 7c b9 01 c0 	mov    DWORD PTR ds:0xc00312c4,0xc001b97c
c001c782:	c7 05 c8 12 03 c0 b1 bf 01 c0 	mov    DWORD PTR ds:0xc00312c8,0xc001bfb1
c001c78c:	c7 05 cc 12 03 c0 39 b9 01 c0 	mov    DWORD PTR ds:0xc00312cc,0xc001b939
c001c796:	c7 05 d0 12 03 c0 fd bf 01 c0 	mov    DWORD PTR ds:0xc00312d0,0xc001bffd
c001c7a0:	c7 05 d4 12 03 c0 38 ba 01 c0 	mov    DWORD PTR ds:0xc00312d4,0xc001ba38
c001c7aa:	c7 05 d8 12 03 c0 80 c0 01 c0 	mov    DWORD PTR ds:0xc00312d8,0xc001c080
c001c7b4:	c7 05 dc 12 03 c0 fb bb 01 c0 	mov    DWORD PTR ds:0xc00312dc,0xc001bbfb
c001c7be:	c7 05 e0 12 03 c0 a7 c0 01 c0 	mov    DWORD PTR ds:0xc00312e0,0xc001c0a7
c001c7c8:	c7 05 e4 12 03 c0 ff c0 01 c0 	mov    DWORD PTR ds:0xc00312e4,0xc001c0ff
c001c7d2:	c7 05 e8 12 03 c0 37 c2 01 c0 	mov    DWORD PTR ds:0xc00312e8,0xc001c237
c001c7dc:	c7 05 ec 12 03 c0 da b7 01 c0 	mov    DWORD PTR ds:0xc00312ec,0xc001b7da
c001c7e6:	c7 05 f0 12 03 c0 44 b8 01 c0 	mov    DWORD PTR ds:0xc00312f0,0xc001b844
c001c7f0:	c7 05 f4 12 03 c0 8a b8 01 c0 	mov    DWORD PTR ds:0xc00312f4,0xc001b88a
c001c7fa:	c7 05 f8 12 03 c0 56 c3 01 c0 	mov    DWORD PTR ds:0xc00312f8,0xc001c356
c001c804:	c7 05 fc 12 03 c0 c3 be 01 c0 	mov    DWORD PTR ds:0xc00312fc,0xc001bec3
c001c80e:	c7 05 00 13 03 c0 db b8 01 c0 	mov    DWORD PTR ds:0xc0031300,0xc001b8db
c001c818:	c7 05 04 13 03 c0 c8 c3 01 c0 	mov    DWORD PTR ds:0xc0031304,0xc001c3c8
c001c822:	c7 05 08 13 03 c0 0d c4 01 c0 	mov    DWORD PTR ds:0xc0031308,0xc001c40d
c001c82c:	c7 05 0c 13 03 c0 84 b3 01 c0 	mov    DWORD PTR ds:0xc003130c,0xc001b384
c001c836:	c7 05 10 13 03 c0 4f b5 01 c0 	mov    DWORD PTR ds:0xc0031310,0xc001b54f
c001c840:	c7 05 14 13 03 c0 77 b6 01 c0 	mov    DWORD PTR ds:0xc0031314,0xc001b677
c001c84a:	c7 05 18 13 03 c0 f4 b2 01 c0 	mov    DWORD PTR ds:0xc0031318,0xc001b2f4
c001c854:	c7 05 1c 13 03 c0 29 b7 01 c0 	mov    DWORD PTR ds:0xc003131c,0xc001b729
c001c85e:	c7 05 20 13 03 c0 6d b3 01 c0 	mov    DWORD PTR ds:0xc0031320,0xc001b36d
c001c868:	c3                   	ret    

c001c869 <Sys::systemCall(regs*, void*)>:
c001c869:	53                   	push   ebx
c001c86a:	83 ec 08             	sub    esp,0x8
c001c86d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c871:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001c874:	83 f8 7f             	cmp    eax,0x7f
c001c877:	77 16                	ja     c001c88f <Sys::systemCall(regs*, void*)+0x26>
c001c879:	8b 14 85 60 12 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffceda0]
c001c880:	85 d2                	test   edx,edx
c001c882:	74 0b                	je     c001c88f <Sys::systemCall(regs*, void*)+0x26>
c001c884:	83 ec 0c             	sub    esp,0xc
c001c887:	53                   	push   ebx
c001c888:	ff d2                	call   edx
c001c88a:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001c88d:	eb 0d                	jmp    c001c89c <Sys::systemCall(regs*, void*)+0x33>
c001c88f:	52                   	push   edx
c001c890:	52                   	push   edx
c001c891:	50                   	push   eax
c001c892:	68 f1 c1 02 c0       	push   0xc002c1f1
c001c897:	e8 47 67 ff ff       	call   c0012fe3 <Dbg::kprintf(char const*, ...)>
c001c89c:	83 c4 10             	add    esp,0x10
c001c89f:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001c8a4:	31 d2                	xor    edx,edx
c001c8a6:	83 c4 08             	add    esp,0x8
c001c8a9:	5b                   	pop    ebx
c001c8aa:	c3                   	ret    

c001c8ab <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c001c8ab:	55                   	push   ebp
c001c8ac:	57                   	push   edi
c001c8ad:	56                   	push   esi
c001c8ae:	53                   	push   ebx
c001c8af:	81 ec 2c 10 00 00    	sub    esp,0x102c
c001c8b5:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c001c8bc:	8b 9c 24 4c 10 00 00 	mov    ebx,DWORD PTR [esp+0x104c]
c001c8c3:	85 c0                	test   eax,eax
c001c8c5:	0f 95 c1             	setne  cl
c001c8c8:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c001c8d0:	0f 94 c2             	sete   dl
c001c8d3:	84 d1                	test   cl,dl
c001c8d5:	74 23                	je     c001c8fa <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c001c8d7:	f7 c3 ff 0f 00 00    	test   ebx,0xfff
c001c8dd:	74 1b                	je     c001c8fa <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c001c8df:	81 c3 00 10 00 00    	add    ebx,0x1000
c001c8e5:	89 da                	mov    edx,ebx
c001c8e7:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c001c8ed:	81 ca 00 f0 ff ff    	or     edx,0xfffff000
c001c8f3:	89 94 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],edx
c001c8fa:	8b 8c 24 48 10 00 00 	mov    ecx,DWORD PTR [esp+0x1048]
c001c901:	05 ff 0f 00 00       	add    eax,0xfff
c001c906:	83 ec 0c             	sub    esp,0xc
c001c909:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001c90d:	8d a9 ff 0f 00 00    	lea    ebp,[ecx+0xfff]
c001c913:	c1 e8 0c             	shr    eax,0xc
c001c916:	89 ef                	mov    edi,ebp
c001c918:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c91c:	c1 ef 0c             	shr    edi,0xc
c001c91f:	6a 01                	push   0x1
c001c921:	e8 fd 52 ff ff       	call   c0011c23 <Virt::allocateKernelVirtualPages(int)>
c001c926:	89 c6                	mov    esi,eax
c001c928:	58                   	pop    eax
c001c929:	5a                   	pop    edx
c001c92a:	57                   	push   edi
c001c92b:	68 77 c2 02 c0       	push   0xc002c277
c001c930:	e8 ae 66 ff ff       	call   c0012fe3 <Dbg::kprintf(char const*, ...)>
c001c935:	59                   	pop    ecx
c001c936:	58                   	pop    eax
c001c937:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001c93b:	68 89 c2 02 c0       	push   0xc002c289
c001c940:	e8 9e 66 ff ff       	call   c0012fe3 <Dbg::kprintf(char const*, ...)>
c001c945:	83 c4 10             	add    esp,0x10
c001c948:	81 fd ff 0f 00 00    	cmp    ebp,0xfff
c001c94e:	0f 86 24 01 00 00    	jbe    c001ca78 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1cd>
c001c954:	c1 e7 0c             	shl    edi,0xc
c001c957:	8d 04 1f             	lea    eax,[edi+ebx*1]
c001c95a:	89 df                	mov    edi,ebx
c001c95c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c960:	8b ac 24 48 10 00 00 	mov    ebp,DWORD PTR [esp+0x1048]
c001c967:	01 dd                	add    ebp,ebx
c001c969:	29 fd                	sub    ebp,edi
c001c96b:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c001c96f:	0f 84 01 01 00 00    	je     c001ca76 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1cb>
c001c975:	81 fd 00 10 00 00    	cmp    ebp,0x1000
c001c97b:	76 05                	jbe    c001c982 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xd7>
c001c97d:	bd 00 10 00 00       	mov    ebp,0x1000
c001c982:	83 ec 0c             	sub    esp,0xc
c001c985:	31 d2                	xor    edx,edx
c001c987:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c001c98e:	8b 08                	mov    ecx,DWORD PTR [eax]
c001c990:	8d 44 24 28          	lea    eax,[esp+0x28]
c001c994:	50                   	push   eax
c001c995:	8d 44 24 30          	lea    eax,[esp+0x30]
c001c999:	50                   	push   eax
c001c99a:	52                   	push   edx
c001c99b:	55                   	push   ebp
c001c99c:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c001c9a3:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c9a6:	83 c4 20             	add    esp,0x20
c001c9a9:	85 c0                	test   eax,eax
c001c9ab:	74 0a                	je     c001c9b7 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x10c>
c001c9ad:	53                   	push   ebx
c001c9ae:	53                   	push   ebx
c001c9af:	50                   	push   eax
c001c9b0:	68 9b c2 02 c0       	push   0xc002c29b
c001c9b5:	eb 0f                	jmp    c001c9c6 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x11b>
c001c9b7:	3b 6c 24 1c          	cmp    ebp,DWORD PTR [esp+0x1c]
c001c9bb:	74 20                	je     c001c9dd <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x132>
c001c9bd:	51                   	push   ecx
c001c9be:	51                   	push   ecx
c001c9bf:	6a 00                	push   0x0
c001c9c1:	68 c6 c2 02 c0       	push   0xc002c2c6
c001c9c6:	e8 18 66 ff ff       	call   c0012fe3 <Dbg::kprintf(char const*, ...)>
c001c9cb:	89 34 24             	mov    DWORD PTR [esp],esi
c001c9ce:	e8 c0 56 ff ff       	call   c0012093 <Virt::freeKernelVirtualPages(unsigned long)>
c001c9d3:	83 c4 10             	add    esp,0x10
c001c9d6:	31 c0                	xor    eax,eax
c001c9d8:	e9 55 01 00 00       	jmp    c001cb32 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x287>
c001c9dd:	e8 d8 14 00 00       	call   c001deba <lockScheduler()>
c001c9e2:	e8 9f 35 ff ff       	call   c000ff86 <Phys::allocatePage()>
c001c9e7:	6a 07                	push   0x7
c001c9e9:	89 c5                	mov    ebp,eax
c001c9eb:	56                   	push   esi
c001c9ec:	50                   	push   eax
c001c9ed:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c9f2:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c9f5:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c9fb:	e8 fa 59 ff ff       	call   c00123fa <VAS::mapPage(unsigned long, unsigned long, int)>
c001ca00:	83 c4 0c             	add    esp,0xc
c001ca03:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c001ca0a:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001ca10:	6a 00                	push   0x0
c001ca12:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ca17:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001ca1a:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001ca20:	e8 3f 58 ff ff       	call   c0012264 <VAS::mapOtherVASIn(bool, VAS*)>
c001ca25:	58                   	pop    eax
c001ca26:	5a                   	pop    edx
c001ca27:	68 07 0c 00 00       	push   0xc07
c001ca2c:	57                   	push   edi
c001ca2d:	81 c7 00 10 00 00    	add    edi,0x1000
c001ca33:	55                   	push   ebp
c001ca34:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c001ca3b:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001ca41:	6a 00                	push   0x0
c001ca43:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ca48:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001ca4b:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001ca51:	e8 5e 5d ff ff       	call   c00127b4 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001ca56:	83 c4 1c             	add    esp,0x1c
c001ca59:	68 00 10 00 00       	push   0x1000
c001ca5e:	8d 44 24 28          	lea    eax,[esp+0x28]
c001ca62:	50                   	push   eax
c001ca63:	56                   	push   esi
c001ca64:	e8 db 3c fe ff       	call   c0000744 <memcpy>
c001ca69:	e8 4e 14 00 00       	call   c001debc <unlockScheduler()>
c001ca6e:	83 c4 10             	add    esp,0x10
c001ca71:	e9 ea fe ff ff       	jmp    c001c960 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xb5>
c001ca76:	89 fb                	mov    ebx,edi
c001ca78:	81 7c 24 04 ff 0f 00 00 	cmp    DWORD PTR [esp+0x4],0xfff
c001ca80:	0f 86 9e 00 00 00    	jbe    c001cb24 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x279>
c001ca86:	e8 2f 14 00 00       	call   c001deba <lockScheduler()>
c001ca8b:	51                   	push   ecx
c001ca8c:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c001ca93:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001ca99:	6a 00                	push   0x0
c001ca9b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001caa0:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001caa3:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001caa9:	e8 b6 57 ff ff       	call   c0012264 <VAS::mapOtherVASIn(bool, VAS*)>
c001caae:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001cab2:	c1 e7 0c             	shl    edi,0xc
c001cab5:	01 df                	add    edi,ebx
c001cab7:	83 c4 10             	add    esp,0x10
c001caba:	39 fb                	cmp    ebx,edi
c001cabc:	74 61                	je     c001cb1f <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x274>
c001cabe:	e8 c3 34 ff ff       	call   c000ff86 <Phys::allocatePage()>
c001cac3:	6a 07                	push   0x7
c001cac5:	89 c5                	mov    ebp,eax
c001cac7:	56                   	push   esi
c001cac8:	50                   	push   eax
c001cac9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001cace:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001cad1:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001cad7:	e8 1e 59 ff ff       	call   c00123fa <VAS::mapPage(unsigned long, unsigned long, int)>
c001cadc:	58                   	pop    eax
c001cadd:	5a                   	pop    edx
c001cade:	68 07 0c 00 00       	push   0xc07
c001cae3:	53                   	push   ebx
c001cae4:	81 c3 00 10 00 00    	add    ebx,0x1000
c001caea:	55                   	push   ebp
c001caeb:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c001caf2:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001caf8:	6a 00                	push   0x0
c001cafa:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001caff:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001cb02:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001cb08:	e8 a7 5c ff ff       	call   c00127b4 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001cb0d:	83 c4 1c             	add    esp,0x1c
c001cb10:	68 00 10 00 00       	push   0x1000
c001cb15:	6a 00                	push   0x0
c001cb17:	56                   	push   esi
c001cb18:	e8 5b 3c fe ff       	call   c0000778 <memset>
c001cb1d:	eb 98                	jmp    c001cab7 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x20c>
c001cb1f:	e8 98 13 00 00       	call   c001debc <unlockScheduler()>
c001cb24:	83 ec 0c             	sub    esp,0xc
c001cb27:	56                   	push   esi
c001cb28:	e8 66 55 ff ff       	call   c0012093 <Virt::freeKernelVirtualPages(unsigned long)>
c001cb2d:	83 c4 10             	add    esp,0x10
c001cb30:	b0 01                	mov    al,0x1
c001cb32:	81 c4 2c 10 00 00    	add    esp,0x102c
c001cb38:	5b                   	pop    ebx
c001cb39:	5e                   	pop    esi
c001cb3a:	5f                   	pop    edi
c001cb3b:	5d                   	pop    ebp
c001cb3c:	c3                   	ret    

c001cb3d <Thr::loadProgramIntoMemory(Process*, char const*)>:
c001cb3d:	55                   	push   ebp
c001cb3e:	57                   	push   edi
c001cb3f:	56                   	push   esi
c001cb40:	53                   	push   ebx
c001cb41:	83 ec 48             	sub    esp,0x48
c001cb44:	68 14 01 00 00       	push   0x114
c001cb49:	e8 96 2d ff ff       	call   c000f8e4 <malloc>
c001cb4e:	83 c4 0c             	add    esp,0xc
c001cb51:	89 c6                	mov    esi,eax
c001cb53:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001cb57:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001cb5b:	50                   	push   eax
c001cb5c:	e8 db 69 ff ff       	call   c001353c <File::File(char const*, Process*)>
c001cb61:	58                   	pop    eax
c001cb62:	5a                   	pop    edx
c001cb63:	6a 01                	push   0x1
c001cb65:	56                   	push   esi
c001cb66:	e8 35 6a ff ff       	call   c00135a0 <File::open(FileOpenMode)>
c001cb6b:	83 c4 10             	add    esp,0x10
c001cb6e:	85 c0                	test   eax,eax
c001cb70:	0f 85 47 01 00 00    	jne    c001ccbd <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001cb76:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001cb7e:	83 ec 0c             	sub    esp,0xc
c001cb81:	6a 34                	push   0x34
c001cb83:	e8 5c 2d ff ff       	call   c000f8e4 <malloc>
c001cb88:	89 c3                	mov    ebx,eax
c001cb8a:	58                   	pop    eax
c001cb8b:	8b 06                	mov    eax,DWORD PTR [esi]
c001cb8d:	8d 7c 24 38          	lea    edi,[esp+0x38]
c001cb91:	57                   	push   edi
c001cb92:	53                   	push   ebx
c001cb93:	6a 00                	push   0x0
c001cb95:	6a 34                	push   0x34
c001cb97:	56                   	push   esi
c001cb98:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001cb9b:	83 c4 20             	add    esp,0x20
c001cb9e:	85 c0                	test   eax,eax
c001cba0:	0f 85 17 01 00 00    	jne    c001ccbd <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001cba6:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c001cbac:	0f 85 0b 01 00 00    	jne    c001ccbd <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001cbb2:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001cbb5:	85 c0                	test   eax,eax
c001cbb7:	0f 84 00 01 00 00    	je     c001ccbd <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001cbbd:	31 d2                	xor    edx,edx
c001cbbf:	55                   	push   ebp
c001cbc0:	52                   	push   edx
c001cbc1:	50                   	push   eax
c001cbc2:	56                   	push   esi
c001cbc3:	e8 96 6a ff ff       	call   c001365e <File::seek(unsigned long long)>
c001cbc8:	83 c4 10             	add    esp,0x10
c001cbcb:	85 c0                	test   eax,eax
c001cbcd:	0f 85 ea 00 00 00    	jne    c001ccbd <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001cbd3:	83 ec 0c             	sub    esp,0xc
c001cbd6:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001cbd9:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001cbdd:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001cbe1:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001cbe5:	0f af c2             	imul   eax,edx
c001cbe8:	50                   	push   eax
c001cbe9:	e8 f6 2c ff ff       	call   c000f8e4 <malloc>
c001cbee:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001cbf0:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001cbf4:	89 3c 24             	mov    DWORD PTR [esp],edi
c001cbf7:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001cbfb:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001cbff:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001cc03:	0f af c2             	imul   eax,edx
c001cc06:	99                   	cdq    
c001cc07:	52                   	push   edx
c001cc08:	50                   	push   eax
c001cc09:	56                   	push   esi
c001cc0a:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cc0d:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c001cc10:	83 c4 20             	add    esp,0x20
c001cc13:	85 c0                	test   eax,eax
c001cc15:	0f 84 a2 00 00 00    	je     c001ccbd <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001cc1b:	31 d2                	xor    edx,edx
c001cc1d:	51                   	push   ecx
c001cc1e:	52                   	push   edx
c001cc1f:	50                   	push   eax
c001cc20:	56                   	push   esi
c001cc21:	e8 38 6a ff ff       	call   c001365e <File::seek(unsigned long long)>
c001cc26:	83 c4 10             	add    esp,0x10
c001cc29:	85 c0                	test   eax,eax
c001cc2b:	0f 85 8c 00 00 00    	jne    c001ccbd <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001cc31:	83 ec 0c             	sub    esp,0xc
c001cc34:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001cc38:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001cc3c:	31 ed                	xor    ebp,ebp
c001cc3e:	0f af c2             	imul   eax,edx
c001cc41:	50                   	push   eax
c001cc42:	e8 9d 2c ff ff       	call   c000f8e4 <malloc>
c001cc47:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001cc49:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001cc4d:	89 3c 24             	mov    DWORD PTR [esp],edi
c001cc50:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cc54:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001cc58:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001cc5c:	0f af c2             	imul   eax,edx
c001cc5f:	99                   	cdq    
c001cc60:	52                   	push   edx
c001cc61:	50                   	push   eax
c001cc62:	56                   	push   esi
c001cc63:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cc66:	83 c4 20             	add    esp,0x20
c001cc69:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001cc71:	66 39 6b 2c          	cmp    WORD PTR [ebx+0x2c],bp
c001cc75:	0f 86 80 00 00 00    	jbe    c001ccfb <Thr::loadProgramIntoMemory(Process*, char const*)+0x1be>
c001cc7b:	0f b7 fd             	movzx  edi,bp
c001cc7e:	c1 e7 05             	shl    edi,0x5
c001cc81:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c001cc85:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c001cc88:	75 6b                	jne    c001ccf5 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001cc8a:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c001cc8d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001cc91:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001cc94:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001cc98:	52                   	push   edx
c001cc99:	31 d2                	xor    edx,edx
c001cc9b:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c001cc9e:	52                   	push   edx
c001cc9f:	50                   	push   eax
c001cca0:	56                   	push   esi
c001cca1:	e8 b8 69 ff ff       	call   c001365e <File::seek(unsigned long long)>
c001cca6:	83 c4 10             	add    esp,0x10
c001cca9:	85 c0                	test   eax,eax
c001ccab:	74 17                	je     c001ccc4 <Thr::loadProgramIntoMemory(Process*, char const*)+0x187>
c001ccad:	83 ec 0c             	sub    esp,0xc
c001ccb0:	68 f2 c2 02 c0       	push   0xc002c2f2
c001ccb5:	e8 29 63 ff ff       	call   c0012fe3 <Dbg::kprintf(char const*, ...)>
c001ccba:	83 c4 10             	add    esp,0x10
c001ccbd:	31 c0                	xor    eax,eax
c001ccbf:	e9 87 00 00 00       	jmp    c001cd4b <Thr::loadProgramIntoMemory(Process*, char const*)+0x20e>
c001ccc4:	83 ec 0c             	sub    esp,0xc
c001ccc7:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001ccca:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c001cccd:	50                   	push   eax
c001ccce:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001ccd2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ccd6:	56                   	push   esi
c001ccd7:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c001ccdb:	e8 cb fb ff ff       	call   c001c8ab <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c001cce0:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001cce4:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c001cce8:	83 c4 20             	add    esp,0x20
c001cceb:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c001ccef:	73 04                	jae    c001ccf5 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001ccf1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001ccf5:	45                   	inc    ebp
c001ccf6:	e9 76 ff ff ff       	jmp    c001cc71 <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c001ccfb:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c001ccff:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001cd03:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001cd07:	89 91 2e 05 00 00    	mov    DWORD PTR [ecx+0x52e],edx
c001cd0d:	83 ec 0c             	sub    esp,0xc
c001cd10:	8b 91 32 05 00 00    	mov    edx,DWORD PTR [ecx+0x532]
c001cd16:	25 00 f0 ff ff       	and    eax,0xfffff000
c001cd1b:	05 00 10 00 00       	add    eax,0x1000
c001cd20:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001cd23:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cd27:	e8 c8 2b ff ff       	call   c000f8f4 <free>
c001cd2c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001cd2f:	e8 c0 2b ff ff       	call   c000f8f4 <free>
c001cd34:	58                   	pop    eax
c001cd35:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001cd39:	e8 b6 2b ff ff       	call   c000f8f4 <free>
c001cd3e:	89 34 24             	mov    DWORD PTR [esp],esi
c001cd41:	e8 b8 68 ff ff       	call   c00135fe <File::close()>
c001cd46:	83 c4 10             	add    esp,0x10
c001cd49:	b0 01                	mov    al,0x1
c001cd4b:	83 c4 3c             	add    esp,0x3c
c001cd4e:	5b                   	pop    ebx
c001cd4f:	5e                   	pop    esi
c001cd50:	5f                   	pop    edi
c001cd51:	5d                   	pop    ebp
c001cd52:	c3                   	ret    

c001cd53 <Thr::runtimeReferenceHelper()>:
c001cd53:	83 ec 18             	sub    esp,0x18
c001cd56:	68 fa c2 02 c0       	push   0xc002c2fa
c001cd5b:	e8 83 62 ff ff       	call   c0012fe3 <Dbg::kprintf(char const*, ...)>
c001cd60:	fa                   	cli    
c001cd61:	83 c4 10             	add    esp,0x10
c001cd64:	eb fe                	jmp    c001cd64 <Thr::runtimeReferenceHelper()+0x11>

c001cd66 <Thr::getAddressOfKernelSymbol(char const*)>:
c001cd66:	57                   	push   edi
c001cd67:	56                   	push   esi
c001cd68:	53                   	push   ebx
c001cd69:	31 db                	xor    ebx,ebx
c001cd6b:	39 1d 00 1c 03 c0    	cmp    DWORD PTR ds:0xc0031c00,ebx
c001cd71:	7e 3c                	jle    c001cdaf <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c001cd73:	8b 34 9d 80 1b 03 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffce480]
c001cd7a:	31 ff                	xor    edi,edi
c001cd7c:	39 3c 9d 80 1a 03 c0 	cmp    DWORD PTR [ebx*4-0x3ffce580],edi
c001cd83:	7e 27                	jle    c001cdac <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c001cd85:	50                   	push   eax
c001cd86:	50                   	push   eax
c001cd87:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001cd8b:	8b 06                	mov    eax,DWORD PTR [esi]
c001cd8d:	03 04 9d 00 1b 03 c0 	add    eax,DWORD PTR [ebx*4-0x3ffce500]
c001cd94:	50                   	push   eax
c001cd95:	e8 26 3b fe ff       	call   c00008c0 <strcmp>
c001cd9a:	83 c4 10             	add    esp,0x10
c001cd9d:	85 c0                	test   eax,eax
c001cd9f:	75 05                	jne    c001cda6 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c001cda1:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001cda4:	eb 0b                	jmp    c001cdb1 <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c001cda6:	83 c6 10             	add    esi,0x10
c001cda9:	47                   	inc    edi
c001cdaa:	eb d0                	jmp    c001cd7c <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c001cdac:	43                   	inc    ebx
c001cdad:	eb bc                	jmp    c001cd6b <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c001cdaf:	31 c0                	xor    eax,eax
c001cdb1:	5b                   	pop    ebx
c001cdb2:	5e                   	pop    esi
c001cdb3:	5f                   	pop    edi
c001cdb4:	c3                   	ret    

c001cdb5 <Thr::loadKernelSymbolTable(char const*)>:
c001cdb5:	55                   	push   ebp
c001cdb6:	57                   	push   edi
c001cdb7:	56                   	push   esi
c001cdb8:	53                   	push   ebx
c001cdb9:	83 ec 68             	sub    esp,0x68
c001cdbc:	8b 35 58 1c 03 c0    	mov    esi,DWORD PTR ds:0xc0031c58
c001cdc2:	68 14 01 00 00       	push   0x114
c001cdc7:	e8 18 2b ff ff       	call   c000f8e4 <malloc>
c001cdcc:	83 c4 0c             	add    esp,0xc
c001cdcf:	89 c3                	mov    ebx,eax
c001cdd1:	56                   	push   esi
c001cdd2:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c001cdd6:	50                   	push   eax
c001cdd7:	e8 60 67 ff ff       	call   c001353c <File::File(char const*, Process*)>
c001cddc:	5e                   	pop    esi
c001cddd:	5f                   	pop    edi
c001cdde:	6a 01                	push   0x1
c001cde0:	53                   	push   ebx
c001cde1:	e8 ba 67 ff ff       	call   c00135a0 <File::open(FileOpenMode)>
c001cde6:	83 c4 10             	add    esp,0x10
c001cde9:	85 c0                	test   eax,eax
c001cdeb:	74 0a                	je     c001cdf7 <Thr::loadKernelSymbolTable(char const*)+0x42>
c001cded:	83 ec 0c             	sub    esp,0xc
c001cdf0:	68 1c c3 02 c0       	push   0xc002c31c
c001cdf5:	eb 34                	jmp    c001ce2b <Thr::loadKernelSymbolTable(char const*)+0x76>
c001cdf7:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c001cdff:	83 ec 0c             	sub    esp,0xc
c001ce02:	6a 34                	push   0x34
c001ce04:	e8 db 2a ff ff       	call   c000f8e4 <malloc>
c001ce09:	59                   	pop    ecx
c001ce0a:	89 c7                	mov    edi,eax
c001ce0c:	8d 74 24 34          	lea    esi,[esp+0x34]
c001ce10:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ce12:	56                   	push   esi
c001ce13:	57                   	push   edi
c001ce14:	6a 00                	push   0x0
c001ce16:	6a 34                	push   0x34
c001ce18:	53                   	push   ebx
c001ce19:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001ce1c:	83 c4 20             	add    esp,0x20
c001ce1f:	85 c0                	test   eax,eax
c001ce21:	74 17                	je     c001ce3a <Thr::loadKernelSymbolTable(char const*)+0x85>
c001ce23:	83 ec 0c             	sub    esp,0xc
c001ce26:	68 33 c3 02 c0       	push   0xc002c333
c001ce2b:	e8 65 d8 ff ff       	call   c001a695 <Krnl::panic(char const*)>
c001ce30:	83 c4 10             	add    esp,0x10
c001ce33:	31 c0                	xor    eax,eax
c001ce35:	e9 31 02 00 00       	jmp    c001d06b <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c001ce3a:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001ce40:	75 e1                	jne    c001ce23 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001ce42:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001ce45:	85 c0                	test   eax,eax
c001ce47:	74 da                	je     c001ce23 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001ce49:	52                   	push   edx
c001ce4a:	31 d2                	xor    edx,edx
c001ce4c:	52                   	push   edx
c001ce4d:	50                   	push   eax
c001ce4e:	53                   	push   ebx
c001ce4f:	e8 0a 68 ff ff       	call   c001365e <File::seek(unsigned long long)>
c001ce54:	83 c4 10             	add    esp,0x10
c001ce57:	85 c0                	test   eax,eax
c001ce59:	75 c8                	jne    c001ce23 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001ce5b:	83 ec 0c             	sub    esp,0xc
c001ce5e:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001ce62:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001ce66:	31 ed                	xor    ebp,ebp
c001ce68:	0f af c2             	imul   eax,edx
c001ce6b:	50                   	push   eax
c001ce6c:	e8 73 2a ff ff       	call   c000f8e4 <malloc>
c001ce71:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001ce73:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001ce77:	89 34 24             	mov    DWORD PTR [esp],esi
c001ce7a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001ce7e:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001ce82:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001ce86:	0f af c2             	imul   eax,edx
c001ce89:	99                   	cdq    
c001ce8a:	52                   	push   edx
c001ce8b:	50                   	push   eax
c001ce8c:	53                   	push   ebx
c001ce8d:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001ce90:	83 c4 20             	add    esp,0x20
c001ce93:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001ce9b:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001cea3:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001ceab:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001ceb3:	66 39 6f 30          	cmp    WORD PTR [edi+0x30],bp
c001ceb7:	0f 86 aa 00 00 00    	jbe    c001cf67 <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c001cebd:	0f b7 f5             	movzx  esi,bp
c001cec0:	6b f6 28             	imul   esi,esi,0x28
c001cec3:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001cec7:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001ceca:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001cece:	50                   	push   eax
c001cecf:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001ced3:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c001ced7:	8b 16                	mov    edx,DWORD PTR [esi]
c001ced9:	6b c0 28             	imul   eax,eax,0x28
c001cedc:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c001cee0:	89 d0                	mov    eax,edx
c001cee2:	31 d2                	xor    edx,edx
c001cee4:	52                   	push   edx
c001cee5:	50                   	push   eax
c001cee6:	53                   	push   ebx
c001cee7:	e8 72 67 ff ff       	call   c001365e <File::seek(unsigned long long)>
c001ceec:	83 c4 0c             	add    esp,0xc
c001ceef:	6a 20                	push   0x20
c001cef1:	6a 00                	push   0x0
c001cef3:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001cef7:	52                   	push   edx
c001cef8:	e8 7b 38 fe ff       	call   c0000778 <memset>
c001cefd:	58                   	pop    eax
c001cefe:	8b 03                	mov    eax,DWORD PTR [ebx]
c001cf00:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c001cf04:	51                   	push   ecx
c001cf05:	8d 54 24 40          	lea    edx,[esp+0x40]
c001cf09:	52                   	push   edx
c001cf0a:	6a 00                	push   0x0
c001cf0c:	6a 1f                	push   0x1f
c001cf0e:	53                   	push   ebx
c001cf0f:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001cf12:	83 c4 18             	add    esp,0x18
c001cf15:	68 4a c3 02 c0       	push   0xc002c34a
c001cf1a:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001cf1e:	52                   	push   edx
c001cf1f:	e8 9c 39 fe ff       	call   c00008c0 <strcmp>
c001cf24:	83 c4 10             	add    esp,0x10
c001cf27:	85 c0                	test   eax,eax
c001cf29:	75 0f                	jne    c001cf3a <Thr::loadKernelSymbolTable(char const*)+0x185>
c001cf2b:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001cf2e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001cf32:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001cf36:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001cf3a:	50                   	push   eax
c001cf3b:	50                   	push   eax
c001cf3c:	68 52 c3 02 c0       	push   0xc002c352
c001cf41:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001cf45:	50                   	push   eax
c001cf46:	e8 75 39 fe ff       	call   c00008c0 <strcmp>
c001cf4b:	83 c4 10             	add    esp,0x10
c001cf4e:	85 c0                	test   eax,eax
c001cf50:	75 0f                	jne    c001cf61 <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c001cf52:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001cf55:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001cf59:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001cf5d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001cf61:	45                   	inc    ebp
c001cf62:	e9 4c ff ff ff       	jmp    c001ceb3 <Thr::loadKernelSymbolTable(char const*)+0xfe>
c001cf67:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001cf6c:	75 10                	jne    c001cf7e <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c001cf6e:	83 ec 0c             	sub    esp,0xc
c001cf71:	68 5a c3 02 c0       	push   0xc002c35a
c001cf76:	e8 1a d7 ff ff       	call   c001a695 <Krnl::panic(char const*)>
c001cf7b:	83 c4 10             	add    esp,0x10
c001cf7e:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c001cf83:	75 10                	jne    c001cf95 <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c001cf85:	83 ec 0c             	sub    esp,0xc
c001cf88:	68 5a c3 02 c0       	push   0xc002c35a
c001cf8d:	e8 03 d7 ff ff       	call   c001a695 <Krnl::panic(char const*)>
c001cf92:	83 c4 10             	add    esp,0x10
c001cf95:	31 d2                	xor    edx,edx
c001cf97:	50                   	push   eax
c001cf98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cf9c:	52                   	push   edx
c001cf9d:	50                   	push   eax
c001cf9e:	53                   	push   ebx
c001cf9f:	e8 ba 66 ff ff       	call   c001365e <File::seek(unsigned long long)>
c001cfa4:	5a                   	pop    edx
c001cfa5:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001cfa9:	e8 36 29 ff ff       	call   c000f8e4 <malloc>
c001cfae:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001cfb2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001cfb6:	31 c9                	xor    ecx,ecx
c001cfb8:	5e                   	pop    esi
c001cfb9:	8b 03                	mov    eax,DWORD PTR [ebx]
c001cfbb:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c001cfbf:	55                   	push   ebp
c001cfc0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cfc4:	51                   	push   ecx
c001cfc5:	52                   	push   edx
c001cfc6:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001cfca:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c001cfce:	53                   	push   ebx
c001cfcf:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001cfd2:	83 c4 14             	add    esp,0x14
c001cfd5:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001cfd9:	e8 06 29 ff ff       	call   c000f8e4 <malloc>
c001cfde:	89 c6                	mov    esi,eax
c001cfe0:	8b 03                	mov    eax,DWORD PTR [ebx]
c001cfe2:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001cfe5:	56                   	push   esi
c001cfe6:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001cfea:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001cfee:	51                   	push   ecx
c001cfef:	52                   	push   edx
c001cff0:	53                   	push   ebx
c001cff1:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001cff4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001cff8:	8b 15 00 1c 03 c0    	mov    edx,DWORD PTR ds:0xc0031c00
c001cffe:	83 c4 1c             	add    esp,0x1c
c001d001:	c1 e8 04             	shr    eax,0x4
c001d004:	89 04 95 80 1a 03 c0 	mov    DWORD PTR [edx*4-0x3ffce580],eax
c001d00b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d00f:	31 d2                	xor    edx,edx
c001d011:	52                   	push   edx
c001d012:	50                   	push   eax
c001d013:	53                   	push   ebx
c001d014:	e8 45 66 ff ff       	call   c001365e <File::seek(unsigned long long)>
c001d019:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001d01b:	31 d2                	xor    edx,edx
c001d01d:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001d020:	56                   	push   esi
c001d021:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d025:	52                   	push   edx
c001d026:	50                   	push   eax
c001d027:	53                   	push   ebx
c001d028:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d02b:	83 c4 14             	add    esp,0x14
c001d02e:	53                   	push   ebx
c001d02f:	e8 ca 65 ff ff       	call   c00135fe <File::close()>
c001d034:	5d                   	pop    ebp
c001d035:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d039:	e8 b6 28 ff ff       	call   c000f8f4 <free>
c001d03e:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d041:	e8 ae 28 ff ff       	call   c000f8f4 <free>
c001d046:	a1 00 1c 03 c0       	mov    eax,ds:0xc0031c00
c001d04b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001d04f:	8d 50 01             	lea    edx,[eax+0x1]
c001d052:	89 0c 85 80 1b 03 c0 	mov    DWORD PTR [eax*4-0x3ffce480],ecx
c001d059:	89 34 85 00 1b 03 c0 	mov    DWORD PTR [eax*4-0x3ffce500],esi
c001d060:	89 15 00 1c 03 c0    	mov    DWORD PTR ds:0xc0031c00,edx
c001d066:	83 c4 10             	add    esp,0x10
c001d069:	b0 01                	mov    al,0x1
c001d06b:	83 c4 5c             	add    esp,0x5c
c001d06e:	5b                   	pop    ebx
c001d06f:	5e                   	pop    esi
c001d070:	5f                   	pop    edi
c001d071:	5d                   	pop    ebp
c001d072:	c3                   	ret    

c001d073 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c001d073:	55                   	push   ebp
c001d074:	57                   	push   edi
c001d075:	56                   	push   esi
c001d076:	53                   	push   ebx
c001d077:	81 ec 68 03 00 00    	sub    esp,0x368
c001d07d:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c001d084:	8b 1d 58 1c 03 c0    	mov    ebx,DWORD PTR ds:0xc0031c58
c001d08a:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001d08e:	68 14 01 00 00       	push   0x114
c001d093:	e8 4c 28 ff ff       	call   c000f8e4 <malloc>
c001d098:	83 c4 0c             	add    esp,0xc
c001d09b:	89 c5                	mov    ebp,eax
c001d09d:	53                   	push   ebx
c001d09e:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c001d0a5:	50                   	push   eax
c001d0a6:	e8 91 64 ff ff       	call   c001353c <File::File(char const*, Process*)>
c001d0ab:	5e                   	pop    esi
c001d0ac:	5f                   	pop    edi
c001d0ad:	6a 01                	push   0x1
c001d0af:	55                   	push   ebp
c001d0b0:	e8 eb 64 ff ff       	call   c00135a0 <File::open(FileOpenMode)>
c001d0b5:	83 c4 10             	add    esp,0x10
c001d0b8:	85 c0                	test   eax,eax
c001d0ba:	0f 85 8d 06 00 00    	jne    c001d74d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001d0c0:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001d0c8:	83 ec 0c             	sub    esp,0xc
c001d0cb:	6a 34                	push   0x34
c001d0cd:	e8 12 28 ff ff       	call   c000f8e4 <malloc>
c001d0d2:	5b                   	pop    ebx
c001d0d3:	89 c7                	mov    edi,eax
c001d0d5:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001d0d9:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d0dc:	53                   	push   ebx
c001d0dd:	57                   	push   edi
c001d0de:	6a 00                	push   0x0
c001d0e0:	6a 34                	push   0x34
c001d0e2:	55                   	push   ebp
c001d0e3:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001d0e6:	83 c4 20             	add    esp,0x20
c001d0e9:	85 c0                	test   eax,eax
c001d0eb:	0f 85 5c 06 00 00    	jne    c001d74d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001d0f1:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001d0f7:	0f 85 50 06 00 00    	jne    c001d74d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001d0fd:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001d100:	85 c0                	test   eax,eax
c001d102:	0f 84 45 06 00 00    	je     c001d74d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001d108:	31 d2                	xor    edx,edx
c001d10a:	51                   	push   ecx
c001d10b:	52                   	push   edx
c001d10c:	50                   	push   eax
c001d10d:	55                   	push   ebp
c001d10e:	e8 4b 65 ff ff       	call   c001365e <File::seek(unsigned long long)>
c001d113:	83 c4 10             	add    esp,0x10
c001d116:	85 c0                	test   eax,eax
c001d118:	0f 85 2f 06 00 00    	jne    c001d74d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001d11e:	83 ec 0c             	sub    esp,0xc
c001d121:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c001d124:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001d128:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001d12c:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d130:	0f af c2             	imul   eax,edx
c001d133:	50                   	push   eax
c001d134:	e8 ab 27 ff ff       	call   c000f8e4 <malloc>
c001d139:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d13c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001d140:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d143:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d147:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001d14b:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d14f:	0f af c2             	imul   eax,edx
c001d152:	99                   	cdq    
c001d153:	52                   	push   edx
c001d154:	50                   	push   eax
c001d155:	55                   	push   ebp
c001d156:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d159:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c001d15c:	83 c4 20             	add    esp,0x20
c001d15f:	85 c0                	test   eax,eax
c001d161:	0f 84 e6 05 00 00    	je     c001d74d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001d167:	52                   	push   edx
c001d168:	31 d2                	xor    edx,edx
c001d16a:	52                   	push   edx
c001d16b:	50                   	push   eax
c001d16c:	55                   	push   ebp
c001d16d:	e8 ec 64 ff ff       	call   c001365e <File::seek(unsigned long long)>
c001d172:	83 c4 10             	add    esp,0x10
c001d175:	85 c0                	test   eax,eax
c001d177:	0f 85 d0 05 00 00    	jne    c001d74d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001d17d:	83 ec 0c             	sub    esp,0xc
c001d180:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001d184:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001d188:	31 f6                	xor    esi,esi
c001d18a:	0f af c2             	imul   eax,edx
c001d18d:	50                   	push   eax
c001d18e:	e8 51 27 ff ff       	call   c000f8e4 <malloc>
c001d193:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d196:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d19a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d19d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001d1a1:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001d1a5:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001d1a9:	0f af c2             	imul   eax,edx
c001d1ac:	99                   	cdq    
c001d1ad:	52                   	push   edx
c001d1ae:	50                   	push   eax
c001d1af:	55                   	push   ebp
c001d1b0:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d1b3:	83 c4 20             	add    esp,0x20
c001d1b6:	66 39 77 2c          	cmp    WORD PTR [edi+0x2c],si
c001d1ba:	0f 86 8a 00 00 00    	jbe    c001d24a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c001d1c0:	0f b7 de             	movzx  ebx,si
c001d1c3:	c1 e3 05             	shl    ebx,0x5
c001d1c6:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c001d1ca:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c001d1cd:	75 75                	jne    c001d244 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c001d1cf:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001d1d2:	31 d2                	xor    edx,edx
c001d1d4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d1d8:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001d1db:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d1df:	50                   	push   eax
c001d1e0:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c001d1e3:	52                   	push   edx
c001d1e4:	50                   	push   eax
c001d1e5:	55                   	push   ebp
c001d1e6:	e8 73 64 ff ff       	call   c001365e <File::seek(unsigned long long)>
c001d1eb:	83 c4 10             	add    esp,0x10
c001d1ee:	85 c0                	test   eax,eax
c001d1f0:	0f 85 57 05 00 00    	jne    c001d74d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001d1f6:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c001d1fd:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d200:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c001d204:	31 d2                	xor    edx,edx
c001d206:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001d20a:	83 ec 0c             	sub    esp,0xc
c001d20d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001d211:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d218:	50                   	push   eax
c001d219:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d21d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d221:	52                   	push   edx
c001d222:	50                   	push   eax
c001d223:	55                   	push   ebp
c001d224:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d227:	83 c4 1c             	add    esp,0x1c
c001d22a:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001d22d:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c001d230:	50                   	push   eax
c001d231:	6a 00                	push   0x0
c001d233:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d237:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c001d23b:	50                   	push   eax
c001d23c:	e8 37 35 fe ff       	call   c0000778 <memset>
c001d241:	83 c4 10             	add    esp,0x10
c001d244:	46                   	inc    esi
c001d245:	e9 6c ff ff ff       	jmp    c001d1b6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c001d24a:	53                   	push   ebx
c001d24b:	31 db                	xor    ebx,ebx
c001d24d:	68 00 01 00 00       	push   0x100
c001d252:	6a 00                	push   0x0
c001d254:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c001d258:	50                   	push   eax
c001d259:	e8 1a 35 fe ff       	call   c0000778 <memset>
c001d25e:	83 c4 0c             	add    esp,0xc
c001d261:	68 00 01 00 00       	push   0x100
c001d266:	6a 00                	push   0x0
c001d268:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c001d26f:	50                   	push   eax
c001d270:	e8 03 35 fe ff       	call   c0000778 <memset>
c001d275:	83 c4 10             	add    esp,0x10
c001d278:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001d280:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001d288:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c001d290:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001d298:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001d2a0:	66 39 5f 30          	cmp    WORD PTR [edi+0x30],bx
c001d2a4:	0f 86 30 01 00 00    	jbe    c001d3da <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c001d2aa:	0f b7 f3             	movzx  esi,bx
c001d2ad:	6b f6 28             	imul   esi,esi,0x28
c001d2b0:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001d2b4:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001d2b7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d2bb:	52                   	push   edx
c001d2bc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001d2c0:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c001d2c4:	8b 06                	mov    eax,DWORD PTR [esi]
c001d2c6:	6b d2 28             	imul   edx,edx,0x28
c001d2c9:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c001d2cd:	31 d2                	xor    edx,edx
c001d2cf:	52                   	push   edx
c001d2d0:	50                   	push   eax
c001d2d1:	55                   	push   ebp
c001d2d2:	e8 87 63 ff ff       	call   c001365e <File::seek(unsigned long long)>
c001d2d7:	83 c4 0c             	add    esp,0xc
c001d2da:	6a 20                	push   0x20
c001d2dc:	6a 00                	push   0x0
c001d2de:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001d2e5:	51                   	push   ecx
c001d2e6:	e8 8d 34 fe ff       	call   c0000778 <memset>
c001d2eb:	59                   	pop    ecx
c001d2ec:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d2ef:	8d 54 24 58          	lea    edx,[esp+0x58]
c001d2f3:	52                   	push   edx
c001d2f4:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c001d2fb:	51                   	push   ecx
c001d2fc:	6a 00                	push   0x0
c001d2fe:	6a 1f                	push   0x1f
c001d300:	55                   	push   ebp
c001d301:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001d304:	83 c4 1c             	add    esp,0x1c
c001d307:	6a 09                	push   0x9
c001d309:	68 74 c3 02 c0       	push   0xc002c374
c001d30e:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001d315:	51                   	push   ecx
c001d316:	e8 25 33 fe ff       	call   c0000640 <memcmp>
c001d31b:	83 c4 10             	add    esp,0x10
c001d31e:	85 c0                	test   eax,eax
c001d320:	75 21                	jne    c001d343 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c001d322:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d326:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001d32a:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001d32e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001d332:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d335:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001d33c:	89 d0                	mov    eax,edx
c001d33e:	40                   	inc    eax
c001d33f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d343:	50                   	push   eax
c001d344:	6a 09                	push   0x9
c001d346:	68 7e c3 02 c0       	push   0xc002c37e
c001d34b:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d352:	50                   	push   eax
c001d353:	e8 e8 32 fe ff       	call   c0000640 <memcmp>
c001d358:	83 c4 10             	add    esp,0x10
c001d35b:	85 c0                	test   eax,eax
c001d35d:	75 21                	jne    c001d380 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c001d35f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d363:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001d367:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001d36b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001d36f:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d372:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001d379:	89 d0                	mov    eax,edx
c001d37b:	40                   	inc    eax
c001d37c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d380:	50                   	push   eax
c001d381:	50                   	push   eax
c001d382:	68 4a c3 02 c0       	push   0xc002c34a
c001d387:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d38e:	50                   	push   eax
c001d38f:	e8 2c 35 fe ff       	call   c00008c0 <strcmp>
c001d394:	83 c4 10             	add    esp,0x10
c001d397:	85 c0                	test   eax,eax
c001d399:	75 0f                	jne    c001d3aa <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c001d39b:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d39e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001d3a2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d3a6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001d3aa:	50                   	push   eax
c001d3ab:	50                   	push   eax
c001d3ac:	68 52 c3 02 c0       	push   0xc002c352
c001d3b1:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d3b8:	50                   	push   eax
c001d3b9:	e8 02 35 fe ff       	call   c00008c0 <strcmp>
c001d3be:	83 c4 10             	add    esp,0x10
c001d3c1:	85 c0                	test   eax,eax
c001d3c3:	75 0f                	jne    c001d3d4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c001d3c5:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d3c8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d3cc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d3d0:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001d3d4:	43                   	inc    ebx
c001d3d5:	e9 c6 fe ff ff       	jmp    c001d2a0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c001d3da:	31 d2                	xor    edx,edx
c001d3dc:	50                   	push   eax
c001d3dd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d3e1:	52                   	push   edx
c001d3e2:	50                   	push   eax
c001d3e3:	55                   	push   ebp
c001d3e4:	e8 75 62 ff ff       	call   c001365e <File::seek(unsigned long long)>
c001d3e9:	58                   	pop    eax
c001d3ea:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001d3ee:	e8 f1 24 ff ff       	call   c000f8e4 <malloc>
c001d3f3:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d3f6:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001d3fa:	31 d2                	xor    edx,edx
c001d3fc:	58                   	pop    eax
c001d3fd:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001d401:	53                   	push   ebx
c001d402:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001d406:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d40a:	52                   	push   edx
c001d40b:	50                   	push   eax
c001d40c:	55                   	push   ebp
c001d40d:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d410:	83 c4 14             	add    esp,0x14
c001d413:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d417:	e8 c8 24 ff ff       	call   c000f8e4 <malloc>
c001d41c:	31 d2                	xor    edx,edx
c001d41e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001d422:	83 c4 0c             	add    esp,0xc
c001d425:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d429:	52                   	push   edx
c001d42a:	50                   	push   eax
c001d42b:	55                   	push   ebp
c001d42c:	e8 2d 62 ff ff       	call   c001365e <File::seek(unsigned long long)>
c001d431:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d434:	31 d2                	xor    edx,edx
c001d436:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d439:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001d43d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001d441:	52                   	push   edx
c001d442:	50                   	push   eax
c001d443:	55                   	push   ebp
c001d444:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d447:	83 c4 20             	add    esp,0x20
c001d44a:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001d452:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001d456:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
c001d45a:	0f 84 f1 02 00 00    	je     c001d751 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6de>
c001d460:	8b 84 9c 50 01 00 00 	mov    eax,DWORD PTR [esp+ebx*4+0x150]
c001d467:	31 d2                	xor    edx,edx
c001d469:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d46d:	c1 e8 03             	shr    eax,0x3
c001d470:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001d474:	51                   	push   ecx
c001d475:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d479:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c001d47d:	52                   	push   edx
c001d47e:	50                   	push   eax
c001d47f:	55                   	push   ebp
c001d480:	e8 d9 61 ff ff       	call   c001365e <File::seek(unsigned long long)>
c001d485:	5b                   	pop    ebx
c001d486:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d48a:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c001d491:	e8 4e 24 ff ff       	call   c000f8e4 <malloc>
c001d496:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d499:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001d49d:	31 d2                	xor    edx,edx
c001d49f:	5e                   	pop    esi
c001d4a0:	8d 44 24 58          	lea    eax,[esp+0x58]
c001d4a4:	50                   	push   eax
c001d4a5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d4a9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d4ad:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c001d4b4:	52                   	push   edx
c001d4b5:	50                   	push   eax
c001d4b6:	55                   	push   ebp
c001d4b7:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d4ba:	83 c4 20             	add    esp,0x20
c001d4bd:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001d4c5:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001d4c9:	39 74 24 20          	cmp    DWORD PTR [esp+0x20],esi
c001d4cd:	0f 8d 62 02 00 00    	jge    c001d735 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6c2>
c001d4d3:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001d4d7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d4db:	c6 44 24 24 00       	mov    BYTE PTR [esp+0x24],0x0
c001d4e0:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c001d4e3:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001d4e7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d4eb:	8b 5c d8 04          	mov    ebx,DWORD PTR [eax+ebx*8+0x4]
c001d4ef:	89 d8                	mov    eax,ebx
c001d4f1:	c1 e8 08             	shr    eax,0x8
c001d4f4:	89 c6                	mov    esi,eax
c001d4f6:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001d4fa:	c1 e6 04             	shl    esi,0x4
c001d4fd:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c001d501:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c001d504:	85 d2                	test   edx,edx
c001d506:	0f 85 bf 00 00 00    	jne    c001d5cb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001d50c:	83 ec 0c             	sub    esp,0xc
c001d50f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d513:	03 06                	add    eax,DWORD PTR [esi]
c001d515:	50                   	push   eax
c001d516:	e8 4b f8 ff ff       	call   c001cd66 <Thr::getAddressOfKernelSymbol(char const*)>
c001d51b:	83 c4 10             	add    esp,0x10
c001d51e:	89 c2                	mov    edx,eax
c001d520:	c6 44 24 24 01       	mov    BYTE PTR [esp+0x24],0x1
c001d525:	85 c0                	test   eax,eax
c001d527:	0f 85 9e 00 00 00    	jne    c001d5cb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001d52d:	83 ec 0c             	sub    esp,0xc
c001d530:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d534:	03 06                	add    eax,DWORD PTR [esi]
c001d536:	50                   	push   eax
c001d537:	e8 b9 0f ff ff       	call   c000e4f5 <Krnl::resolveCompatibilitySymbol(char*)>
c001d53c:	83 c4 10             	add    esp,0x10
c001d53f:	89 c2                	mov    edx,eax
c001d541:	85 c0                	test   eax,eax
c001d543:	0f 85 82 00 00 00    	jne    c001d5cb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001d549:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001d54d:	50                   	push   eax
c001d54e:	50                   	push   eax
c001d54f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d553:	03 06                	add    eax,DWORD PTR [esi]
c001d555:	50                   	push   eax
c001d556:	68 88 c3 02 c0       	push   0xc002c388
c001d55b:	e8 83 5a ff ff       	call   c0012fe3 <Dbg::kprintf(char const*, ...)>
c001d560:	58                   	pop    eax
c001d561:	5a                   	pop    edx
c001d562:	68 a2 c3 02 c0       	push   0xc002c3a2
c001d567:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d56e:	50                   	push   eax
c001d56f:	e8 c0 32 fe ff       	call   c0000834 <strcpy>
c001d574:	59                   	pop    ecx
c001d575:	58                   	pop    eax
c001d576:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d57a:	03 06                	add    eax,DWORD PTR [esi]
c001d57c:	50                   	push   eax
c001d57d:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d584:	50                   	push   eax
c001d585:	e8 ea 33 fe ff       	call   c0000974 <strcat>
c001d58a:	58                   	pop    eax
c001d58b:	5a                   	pop    edx
c001d58c:	68 38 c4 02 c0       	push   0xc002c438
c001d591:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d598:	50                   	push   eax
c001d599:	e8 d6 33 fe ff       	call   c0000974 <strcat>
c001d59e:	83 c4 10             	add    esp,0x10
c001d5a1:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d5a6:	0f 84 43 01 00 00    	je     c001d6ef <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67c>
c001d5ac:	83 ec 0c             	sub    esp,0xc
c001d5af:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d5b6:	50                   	push   eax
c001d5b7:	e8 d9 d0 ff ff       	call   c001a695 <Krnl::panic(char const*)>
c001d5bc:	83 c4 10             	add    esp,0x10
c001d5bf:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c001d5c3:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001d5c7:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001d5cb:	80 fb 01             	cmp    bl,0x1
c001d5ce:	75 7d                	jne    c001d64d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5da>
c001d5d0:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c001d5d7:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001d5db:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c001d5df:	01 ce                	add    esi,ecx
c001d5e1:	81 fb 01 04 00 00    	cmp    ebx,0x401
c001d5e7:	0f 94 c0             	sete   al
c001d5ea:	81 fb 01 01 00 00    	cmp    ebx,0x101
c001d5f0:	0f 94 c3             	sete   bl
c001d5f3:	09 c3                	or     ebx,eax
c001d5f5:	8b 06                	mov    eax,DWORD PTR [esi]
c001d5f7:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c001d5fc:	74 36                	je     c001d634 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5c1>
c001d5fe:	8d 0c 02             	lea    ecx,[edx+eax*1]
c001d601:	84 db                	test   bl,bl
c001d603:	75 0a                	jne    c001d60f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x59c>
c001d605:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d609:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001d60d:	76 37                	jbe    c001d646 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d3>
c001d60f:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c001d613:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d618:	0f 84 d1 00 00 00    	je     c001d6ef <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67c>
c001d61e:	83 ec 0c             	sub    esp,0xc
c001d621:	68 b9 c3 02 c0       	push   0xc002c3b9
c001d626:	e8 6a d0 ff ff       	call   c001a695 <Krnl::panic(char const*)>
c001d62b:	83 c4 10             	add    esp,0x10
c001d62e:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001d632:	eb 12                	jmp    c001d646 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d3>
c001d634:	01 c1                	add    ecx,eax
c001d636:	84 db                	test   bl,bl
c001d638:	75 0c                	jne    c001d646 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d3>
c001d63a:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d63e:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001d642:	77 02                	ja     c001d646 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d3>
c001d644:	01 d1                	add    ecx,edx
c001d646:	89 0e                	mov    DWORD PTR [esi],ecx
c001d648:	e9 df 00 00 00       	jmp    c001d72c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6b9>
c001d64d:	80 fb 02             	cmp    bl,0x2
c001d650:	75 71                	jne    c001d6c3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x650>
c001d652:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c001d659:	2b 74 24 28          	sub    esi,DWORD PTR [esp+0x28]
c001d65d:	03 74 24 2c          	add    esi,DWORD PTR [esp+0x2c]
c001d661:	81 fb 01 04 00 00    	cmp    ebx,0x401
c001d667:	74 15                	je     c001d67e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x60b>
c001d669:	81 fb 01 01 00 00    	cmp    ebx,0x101
c001d66f:	74 0d                	je     c001d67e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x60b>
c001d671:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d675:	83 e8 04             	sub    eax,0x4
c001d678:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001d67c:	76 1f                	jbe    c001d69d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x62a>
c001d67e:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c001d682:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d687:	74 66                	je     c001d6ef <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67c>
c001d689:	83 ec 0c             	sub    esp,0xc
c001d68c:	68 d5 c3 02 c0       	push   0xc002c3d5
c001d691:	e8 ff cf ff ff       	call   c001a695 <Krnl::panic(char const*)>
c001d696:	83 c4 10             	add    esp,0x10
c001d699:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001d69d:	8b 06                	mov    eax,DWORD PTR [esi]
c001d69f:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c001d6a4:	74 13                	je     c001d6b9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x646>
c001d6a6:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001d6aa:	2b 8c 24 74 03 00 00 	sub    ecx,DWORD PTR [esp+0x374]
c001d6b1:	2b 4c 24 2c          	sub    ecx,DWORD PTR [esp+0x2c]
c001d6b5:	01 c8                	add    eax,ecx
c001d6b7:	eb 04                	jmp    c001d6bd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x64a>
c001d6b9:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c001d6bd:	01 c2                	add    edx,eax
c001d6bf:	89 16                	mov    DWORD PTR [esi],edx
c001d6c1:	eb 69                	jmp    c001d72c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6b9>
c001d6c3:	0f b6 db             	movzx  ebx,bl
c001d6c6:	50                   	push   eax
c001d6c7:	50                   	push   eax
c001d6c8:	53                   	push   ebx
c001d6c9:	68 f1 c3 02 c0       	push   0xc002c3f1
c001d6ce:	e8 10 59 ff ff       	call   c0012fe3 <Dbg::kprintf(char const*, ...)>
c001d6d3:	83 c4 10             	add    esp,0x10
c001d6d6:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d6db:	74 12                	je     c001d6ef <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67c>
c001d6dd:	83 ec 0c             	sub    esp,0xc
c001d6e0:	68 fc c3 02 c0       	push   0xc002c3fc
c001d6e5:	e8 ab cf ff ff       	call   c001a695 <Krnl::panic(char const*)>
c001d6ea:	83 c4 10             	add    esp,0x10
c001d6ed:	eb 3d                	jmp    c001d72c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6b9>
c001d6ef:	83 ec 0c             	sub    esp,0xc
c001d6f2:	55                   	push   ebp
c001d6f3:	e8 06 5f ff ff       	call   c00135fe <File::close()>
c001d6f8:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d6fb:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001d6fe:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d701:	59                   	pop    ecx
c001d702:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d706:	e8 e9 21 ff ff       	call   c000f8f4 <free>
c001d70b:	5b                   	pop    ebx
c001d70c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d710:	e8 df 21 ff ff       	call   c000f8f4 <free>
c001d715:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d718:	e8 d7 21 ff ff       	call   c000f8f4 <free>
c001d71d:	5e                   	pop    esi
c001d71e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d722:	e8 cd 21 ff ff       	call   c000f8f4 <free>
c001d727:	83 c4 10             	add    esp,0x10
c001d72a:	eb 21                	jmp    c001d74d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001d72c:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c001d730:	e9 90 fd ff ff       	jmp    c001d4c5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x452>
c001d735:	83 ec 0c             	sub    esp,0xc
c001d738:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d73c:	e8 b3 21 ff ff       	call   c000f8f4 <free>
c001d741:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c001d745:	83 c4 10             	add    esp,0x10
c001d748:	e9 05 fd ff ff       	jmp    c001d452 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3df>
c001d74d:	31 c0                	xor    eax,eax
c001d74f:	eb 33                	jmp    c001d784 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x711>
c001d751:	83 ec 0c             	sub    esp,0xc
c001d754:	55                   	push   ebp
c001d755:	e8 a4 5e ff ff       	call   c00135fe <File::close()>
c001d75a:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d75d:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001d760:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d763:	58                   	pop    eax
c001d764:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d768:	e8 87 21 ff ff       	call   c000f8f4 <free>
c001d76d:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d770:	e8 7f 21 ff ff       	call   c000f8f4 <free>
c001d775:	5a                   	pop    edx
c001d776:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d77a:	e8 75 21 ff ff       	call   c000f8f4 <free>
c001d77f:	83 c4 10             	add    esp,0x10
c001d782:	b0 01                	mov    al,0x1
c001d784:	81 c4 5c 03 00 00    	add    esp,0x35c
c001d78a:	5b                   	pop    ebx
c001d78b:	5e                   	pop    esi
c001d78c:	5f                   	pop    edi
c001d78d:	5d                   	pop    ebp
c001d78e:	c3                   	ret    

c001d78f <Thr::getDriverBaseFromAddress(unsigned long)>:
c001d78f:	56                   	push   esi
c001d790:	31 d2                	xor    edx,edx
c001d792:	53                   	push   ebx
c001d793:	8b 1d 60 14 03 c0    	mov    ebx,DWORD PTR ds:0xc0031460
c001d799:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001d79d:	39 d3                	cmp    ebx,edx
c001d79f:	7e 1b                	jle    c001d7bc <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c001d7a1:	8b 04 95 80 16 03 c0 	mov    eax,DWORD PTR [edx*4-0x3ffce980]
c001d7a8:	39 c8                	cmp    eax,ecx
c001d7aa:	77 0d                	ja     c001d7b9 <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c001d7ac:	8b 34 95 80 14 03 c0 	mov    esi,DWORD PTR [edx*4-0x3ffceb80]
c001d7b3:	01 c6                	add    esi,eax
c001d7b5:	39 ce                	cmp    esi,ecx
c001d7b7:	77 05                	ja     c001d7be <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c001d7b9:	42                   	inc    edx
c001d7ba:	eb e1                	jmp    c001d79d <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c001d7bc:	31 c0                	xor    eax,eax
c001d7be:	5b                   	pop    ebx
c001d7bf:	5e                   	pop    esi
c001d7c0:	c3                   	ret    

c001d7c1 <Thr::getDriverNameFromAddress(unsigned long)>:
c001d7c1:	53                   	push   ebx
c001d7c2:	31 c0                	xor    eax,eax
c001d7c4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001d7c8:	8b 1d 60 14 03 c0    	mov    ebx,DWORD PTR ds:0xc0031460
c001d7ce:	39 c3                	cmp    ebx,eax
c001d7d0:	7e 22                	jle    c001d7f4 <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c001d7d2:	8b 14 85 80 16 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffce980]
c001d7d9:	39 ca                	cmp    edx,ecx
c001d7db:	77 14                	ja     c001d7f1 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001d7dd:	03 14 85 80 14 03 c0 	add    edx,DWORD PTR [eax*4-0x3ffceb80]
c001d7e4:	39 ca                	cmp    edx,ecx
c001d7e6:	76 09                	jbe    c001d7f1 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001d7e8:	8b 04 85 80 18 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce780]
c001d7ef:	eb 05                	jmp    c001d7f6 <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c001d7f1:	40                   	inc    eax
c001d7f2:	eb da                	jmp    c001d7ce <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c001d7f4:	31 c0                	xor    eax,eax
c001d7f6:	5b                   	pop    ebx
c001d7f7:	c3                   	ret    

c001d7f8 <Thr::getDriverOffsetFromAddress(unsigned long)>:
c001d7f8:	53                   	push   ebx
c001d7f9:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001d7fd:	53                   	push   ebx
c001d7fe:	e8 8c ff ff ff       	call   c001d78f <Thr::getDriverBaseFromAddress(unsigned long)>
c001d803:	5a                   	pop    edx
c001d804:	31 d2                	xor    edx,edx
c001d806:	85 c0                	test   eax,eax
c001d808:	74 04                	je     c001d80e <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c001d80a:	89 da                	mov    edx,ebx
c001d80c:	29 c2                	sub    edx,eax
c001d80e:	89 d0                	mov    eax,edx
c001d810:	5b                   	pop    ebx
c001d811:	c3                   	ret    

c001d812 <Thr::loadDLL(char const*, bool)>:
c001d812:	55                   	push   ebp
c001d813:	57                   	push   edi
c001d814:	56                   	push   esi
c001d815:	53                   	push   ebx
c001d816:	81 ec 34 01 00 00    	sub    esp,0x134
c001d81c:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c001d823:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c001d82a:	56                   	push   esi
c001d82b:	68 14 c4 02 c0       	push   0xc002c414
c001d830:	e8 ae 57 ff ff       	call   c0012fe3 <Dbg::kprintf(char const*, ...)>
c001d835:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001d83c:	e8 a3 20 ff ff       	call   c000f8e4 <malloc>
c001d841:	83 c4 0c             	add    esp,0xc
c001d844:	89 c3                	mov    ebx,eax
c001d846:	ff 35 58 1c 03 c0    	push   DWORD PTR ds:0xc0031c58
c001d84c:	56                   	push   esi
c001d84d:	50                   	push   eax
c001d84e:	e8 e9 5c ff ff       	call   c001353c <File::File(char const*, Process*)>
c001d853:	83 c4 10             	add    esp,0x10
c001d856:	85 db                	test   ebx,ebx
c001d858:	75 3c                	jne    c001d896 <Thr::loadDLL(char const*, bool)+0x84>
c001d85a:	89 e8                	mov    eax,ebp
c001d85c:	84 c0                	test   al,al
c001d85e:	0f 84 d5 01 00 00    	je     c001da39 <Thr::loadDLL(char const*, bool)+0x227>
c001d864:	57                   	push   edi
c001d865:	57                   	push   edi
c001d866:	68 25 c4 02 c0       	push   0xc002c425
c001d86b:	8d 7c 24 2c          	lea    edi,[esp+0x2c]
c001d86f:	57                   	push   edi
c001d870:	e8 bf 2f fe ff       	call   c0000834 <strcpy>
c001d875:	58                   	pop    eax
c001d876:	5a                   	pop    edx
c001d877:	56                   	push   esi
c001d878:	57                   	push   edi
c001d879:	e8 f6 30 fe ff       	call   c0000974 <strcat>
c001d87e:	59                   	pop    ecx
c001d87f:	58                   	pop    eax
c001d880:	68 38 c4 02 c0       	push   0xc002c438
c001d885:	57                   	push   edi
c001d886:	e8 e9 30 fe ff       	call   c0000974 <strcat>
c001d88b:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d88e:	e8 02 ce ff ff       	call   c001a695 <Krnl::panic(char const*)>
c001d893:	83 c4 10             	add    esp,0x10
c001d896:	51                   	push   ecx
c001d897:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c001d89b:	50                   	push   eax
c001d89c:	8d 44 24 20          	lea    eax,[esp+0x20]
c001d8a0:	50                   	push   eax
c001d8a1:	53                   	push   ebx
c001d8a2:	e8 a5 5f ff ff       	call   c001384c <File::stat(unsigned long long*, bool*)>
c001d8a7:	83 c4 10             	add    esp,0x10
c001d8aa:	85 db                	test   ebx,ebx
c001d8ac:	74 0c                	je     c001d8ba <Thr::loadDLL(char const*, bool)+0xa8>
c001d8ae:	83 ec 0c             	sub    esp,0xc
c001d8b1:	8b 03                	mov    eax,DWORD PTR [ebx]
c001d8b3:	53                   	push   ebx
c001d8b4:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d8b7:	83 c4 10             	add    esp,0x10
c001d8ba:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c001d8bf:	75 0a                	jne    c001d8cb <Thr::loadDLL(char const*, bool)+0xb9>
c001d8c1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d8c5:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c001d8c9:	75 3c                	jne    c001d907 <Thr::loadDLL(char const*, bool)+0xf5>
c001d8cb:	89 e8                	mov    eax,ebp
c001d8cd:	84 c0                	test   al,al
c001d8cf:	0f 84 4c 01 00 00    	je     c001da21 <Thr::loadDLL(char const*, bool)+0x20f>
c001d8d5:	51                   	push   ecx
c001d8d6:	51                   	push   ecx
c001d8d7:	68 25 c4 02 c0       	push   0xc002c425
c001d8dc:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c001d8e0:	53                   	push   ebx
c001d8e1:	e8 4e 2f fe ff       	call   c0000834 <strcpy>
c001d8e6:	5f                   	pop    edi
c001d8e7:	58                   	pop    eax
c001d8e8:	56                   	push   esi
c001d8e9:	53                   	push   ebx
c001d8ea:	e8 85 30 fe ff       	call   c0000974 <strcat>
c001d8ef:	58                   	pop    eax
c001d8f0:	5a                   	pop    edx
c001d8f1:	68 38 c4 02 c0       	push   0xc002c438
c001d8f6:	53                   	push   ebx
c001d8f7:	e8 78 30 fe ff       	call   c0000974 <strcat>
c001d8fc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d8ff:	e8 91 cd ff ff       	call   c001a695 <Krnl::panic(char const*)>
c001d904:	83 c4 10             	add    esp,0x10
c001d907:	e8 b2 45 ff ff       	call   c0011ebe <Virt::getAKernelVAS()>
c001d90c:	51                   	push   ecx
c001d90d:	6a 03                	push   0x3
c001d90f:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001d913:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001d917:	81 c1 ff 0f 00 00    	add    ecx,0xfff
c001d91d:	83 d3 00             	adc    ebx,0x0
c001d920:	89 ca                	mov    edx,ecx
c001d922:	89 d1                	mov    ecx,edx
c001d924:	0f ac d9 0c          	shrd   ecx,ebx,0xc
c001d928:	51                   	push   ecx
c001d929:	50                   	push   eax
c001d92a:	e8 cb 4b ff ff       	call   c00124fa <VAS::allocatePages(int, int)>
c001d92f:	5f                   	pop    edi
c001d930:	89 c3                	mov    ebx,eax
c001d932:	58                   	pop    eax
c001d933:	53                   	push   ebx
c001d934:	68 3a c4 02 c0       	push   0xc002c43a
c001d939:	e8 a5 56 ff ff       	call   c0012fe3 <Dbg::kprintf(char const*, ...)>
c001d93e:	89 34 24             	mov    DWORD PTR [esp],esi
c001d941:	e8 4e 2e fe ff       	call   c0000794 <strlen>
c001d946:	8b 3d 60 14 03 c0    	mov    edi,DWORD PTR ds:0xc0031460
c001d94c:	40                   	inc    eax
c001d94d:	89 04 24             	mov    DWORD PTR [esp],eax
c001d950:	e8 8f 1f ff ff       	call   c000f8e4 <malloc>
c001d955:	89 04 bd 80 18 03 c0 	mov    DWORD PTR [edi*4-0x3ffce780],eax
c001d95c:	58                   	pop    eax
c001d95d:	a1 60 14 03 c0       	mov    eax,ds:0xc0031460
c001d962:	5a                   	pop    edx
c001d963:	56                   	push   esi
c001d964:	ff 34 85 80 18 03 c0 	push   DWORD PTR [eax*4-0x3ffce780]
c001d96b:	e8 c4 2e fe ff       	call   c0000834 <strcpy>
c001d970:	a1 60 14 03 c0       	mov    eax,ds:0xc0031460
c001d975:	8d 50 01             	lea    edx,[eax+0x1]
c001d978:	89 1c 85 80 16 03 c0 	mov    DWORD PTR [eax*4-0x3ffce980],ebx
c001d97f:	89 15 60 14 03 c0    	mov    DWORD PTR ds:0xc0031460,edx
c001d985:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001d989:	83 c4 0c             	add    esp,0xc
c001d98c:	89 14 85 80 14 03 c0 	mov    DWORD PTR [eax*4-0x3ffceb80],edx
c001d993:	6a 01                	push   0x1
c001d995:	53                   	push   ebx
c001d996:	56                   	push   esi
c001d997:	e8 d7 f6 ff ff       	call   c001d073 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c001d99c:	83 c4 10             	add    esp,0x10
c001d99f:	89 c7                	mov    edi,eax
c001d9a1:	84 c0                	test   al,al
c001d9a3:	0f 85 8c 00 00 00    	jne    c001da35 <Thr::loadDLL(char const*, bool)+0x223>
c001d9a9:	89 e8                	mov    eax,ebp
c001d9ab:	84 c0                	test   al,al
c001d9ad:	74 76                	je     c001da25 <Thr::loadDLL(char const*, bool)+0x213>
c001d9af:	83 ec 0c             	sub    esp,0xc
c001d9b2:	68 47 c4 02 c0       	push   0xc002c447
c001d9b7:	e8 d9 cc ff ff       	call   c001a695 <Krnl::panic(char const*)>
c001d9bc:	83 c4 10             	add    esp,0x10
c001d9bf:	eb 64                	jmp    c001da25 <Thr::loadDLL(char const*, bool)+0x213>
c001d9c1:	e8 f8 44 ff ff       	call   c0011ebe <Virt::getAKernelVAS()>
c001d9c6:	89 f5                	mov    ebp,esi
c001d9c8:	c1 e5 0c             	shl    ebp,0xc
c001d9cb:	52                   	push   edx
c001d9cc:	01 dd                	add    ebp,ebx
c001d9ce:	52                   	push   edx
c001d9cf:	55                   	push   ebp
c001d9d0:	50                   	push   eax
c001d9d1:	e8 9e 46 ff ff       	call   c0012074 <VAS::getPageTableEntry(unsigned long)>
c001d9d6:	83 c4 10             	add    esp,0x10
c001d9d9:	f6 00 60             	test   BYTE PTR [eax],0x60
c001d9dc:	75 0c                	jne    c001d9ea <Thr::loadDLL(char const*, bool)+0x1d8>
c001d9de:	83 ec 0c             	sub    esp,0xc
c001d9e1:	55                   	push   ebp
c001d9e2:	e8 15 25 ff ff       	call   c000fefc <Phys::freePage(unsigned long)>
c001d9e7:	83 c4 10             	add    esp,0x10
c001d9ea:	46                   	inc    esi
c001d9eb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d9ef:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d9f3:	05 ff 0f 00 00       	add    eax,0xfff
c001d9f8:	83 d2 00             	adc    edx,0x0
c001d9fb:	0f ac d0 0c          	shrd   eax,edx,0xc
c001d9ff:	c1 ea 0c             	shr    edx,0xc
c001da02:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001da06:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001da0a:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c001da0e:	ba 00 00 00 00       	mov    edx,0x0
c001da13:	89 d0                	mov    eax,edx
c001da15:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c001da19:	72 a6                	jb     c001d9c1 <Thr::loadDLL(char const*, bool)+0x1af>
c001da1b:	89 f8                	mov    eax,edi
c001da1d:	84 c0                	test   al,al
c001da1f:	75 18                	jne    c001da39 <Thr::loadDLL(char const*, bool)+0x227>
c001da21:	31 db                	xor    ebx,ebx
c001da23:	eb 14                	jmp    c001da39 <Thr::loadDLL(char const*, bool)+0x227>
c001da25:	83 ec 0c             	sub    esp,0xc
c001da28:	68 66 c4 02 c0       	push   0xc002c466
c001da2d:	e8 63 cc ff ff       	call   c001a695 <Krnl::panic(char const*)>
c001da32:	83 c4 10             	add    esp,0x10
c001da35:	31 f6                	xor    esi,esi
c001da37:	eb b2                	jmp    c001d9eb <Thr::loadDLL(char const*, bool)+0x1d9>
c001da39:	81 c4 2c 01 00 00    	add    esp,0x12c
c001da3f:	89 d8                	mov    eax,ebx
c001da41:	5b                   	pop    ebx
c001da42:	5e                   	pop    esi
c001da43:	5f                   	pop    edi
c001da44:	5d                   	pop    ebp
c001da45:	c3                   	ret    

c001da46 <Thr::executeDLL(unsigned long, void*)>:
c001da46:	56                   	push   esi
c001da47:	53                   	push   ebx
c001da48:	52                   	push   edx
c001da49:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001da4d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001da51:	85 db                	test   ebx,ebx
c001da53:	75 10                	jne    c001da65 <Thr::executeDLL(unsigned long, void*)+0x1f>
c001da55:	83 ec 0c             	sub    esp,0xc
c001da58:	68 82 c4 02 c0       	push   0xc002c482
c001da5d:	e8 33 cc ff ff       	call   c001a695 <Krnl::panic(char const*)>
c001da62:	83 c4 10             	add    esp,0x10
c001da65:	50                   	push   eax
c001da66:	50                   	push   eax
c001da67:	53                   	push   ebx
c001da68:	68 ac c4 02 c0       	push   0xc002c4ac
c001da6d:	e8 71 55 ff ff       	call   c0012fe3 <Dbg::kprintf(char const*, ...)>
c001da72:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001da76:	89 d8                	mov    eax,ebx
c001da78:	83 c4 14             	add    esp,0x14
c001da7b:	5b                   	pop    ebx
c001da7c:	5e                   	pop    esi
c001da7d:	ff e0                	jmp    eax
c001da7f:	90                   	nop

c001da80 <changeTSS>:
c001da80:	83 ec 14             	sub    esp,0x14
c001da83:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001da88:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c001da8b:	b8 00 00 e8 01       	mov    eax,0x1e80000
c001da90:	c1 e2 15             	shl    edx,0x15
c001da93:	29 d0                	sub    eax,edx
c001da95:	50                   	push   eax
c001da96:	a1 e8 e6 02 c0       	mov    eax,ds:0xc002e6e8
c001da9b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001daa1:	05 7c 11 00 00       	add    eax,0x117c
c001daa6:	50                   	push   eax
c001daa7:	e8 b6 3a ff ff       	call   c0011562 <TSS::setESP(unsigned long)>
c001daac:	83 c4 1c             	add    esp,0x1c
c001daaf:	c3                   	ret    

c001dab0 <Process::addArgs(char**)>:
c001dab0:	57                   	push   edi
c001dab1:	56                   	push   esi
c001dab2:	53                   	push   ebx
c001dab3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001dab7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001dabb:	c7 86 36 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x536],0x0
c001dac5:	85 ff                	test   edi,edi
c001dac7:	74 3d                	je     c001db06 <Process::addArgs(char**)+0x56>
c001dac9:	8b 07                	mov    eax,DWORD PTR [edi]
c001dacb:	85 c0                	test   eax,eax
c001dacd:	74 37                	je     c001db06 <Process::addArgs(char**)+0x56>
c001dacf:	31 db                	xor    ebx,ebx
c001dad1:	83 ec 0c             	sub    esp,0xc
c001dad4:	50                   	push   eax
c001dad5:	e8 ba 2c fe ff       	call   c0000794 <strlen>
c001dada:	40                   	inc    eax
c001dadb:	89 04 24             	mov    DWORD PTR [esp],eax
c001dade:	e8 01 1e ff ff       	call   c000f8e4 <malloc>
c001dae3:	89 84 9e 3a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x53a],eax
c001daea:	5a                   	pop    edx
c001daeb:	59                   	pop    ecx
c001daec:	ff 34 9f             	push   DWORD PTR [edi+ebx*4]
c001daef:	43                   	inc    ebx
c001daf0:	50                   	push   eax
c001daf1:	e8 3e 2d fe ff       	call   c0000834 <strcpy>
c001daf6:	ff 86 36 05 00 00    	inc    DWORD PTR [esi+0x536]
c001dafc:	83 c4 10             	add    esp,0x10
c001daff:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001db02:	85 c0                	test   eax,eax
c001db04:	75 cb                	jne    c001dad1 <Process::addArgs(char**)+0x21>
c001db06:	5b                   	pop    ebx
c001db07:	5e                   	pop    esi
c001db08:	5f                   	pop    edi
c001db09:	c3                   	ret    

c001db0a <Process::Process(char const*, Process*, char**)>:
c001db0a:	56                   	push   esi
c001db0b:	53                   	push   ebx
c001db0c:	83 ec 14             	sub    esp,0x14
c001db0f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001db13:	05 0c 02 00 00       	add    eax,0x20c
c001db18:	bb 07 00 00 00       	mov    ebx,0x7
c001db1d:	89 c6                	mov    esi,eax
c001db1f:	85 db                	test   ebx,ebx
c001db21:	78 12                	js     c001db35 <Process::Process(char const*, Process*, char**)+0x2b>
c001db23:	83 ec 0c             	sub    esp,0xc
c001db26:	56                   	push   esi
c001db27:	e8 26 b2 00 00       	call   c0028d52 <ThreadControlBlock::ThreadControlBlock()>
c001db2c:	83 c4 10             	add    esp,0x10
c001db2f:	83 c6 63             	add    esi,0x63
c001db32:	4b                   	dec    ebx
c001db33:	eb ea                	jmp    c001db1f <Process::Process(char const*, Process*, char**)+0x15>
c001db35:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001db39:	c6 80 3e 07 00 00 00 	mov    BYTE PTR [eax+0x73e],0x0
c001db40:	83 ec 0c             	sub    esp,0xc
c001db43:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001db47:	e8 9a c9 ff ff       	call   c001a4e6 <Krnl::newProcessEnv(Process*)>
c001db4c:	83 c4 10             	add    esp,0x10
c001db4f:	89 c2                	mov    edx,eax
c001db51:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001db55:	89 90 3a 07 00 00    	mov    DWORD PTR [eax+0x73a],edx
c001db5b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001db5f:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c001db68:	a1 70 dc 02 c0       	mov    eax,ds:0xc002dc70
c001db6d:	8d 50 01             	lea    edx,[eax+0x1]
c001db70:	89 15 70 dc 02 c0    	mov    DWORD PTR ds:0xc002dc70,edx
c001db76:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001db7a:	89 02                	mov    DWORD PTR [edx],eax
c001db7c:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c001db84:	83 ec 0c             	sub    esp,0xc
c001db87:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001db8b:	e8 54 1d ff ff       	call   c000f8e4 <malloc>
c001db90:	83 c4 10             	add    esp,0x10
c001db93:	89 c3                	mov    ebx,eax
c001db95:	83 ec 08             	sub    esp,0x8
c001db98:	6a 00                	push   0x0
c001db9a:	53                   	push   ebx
c001db9b:	e8 02 4d ff ff       	call   c00128a2 <VAS::VAS(bool)>
c001dba0:	83 c4 10             	add    esp,0x10
c001dba3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dba7:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001dbad:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dbb1:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001dbbb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dbbf:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001dbc3:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001dbc9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dbcd:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001dbd3:	85 c0                	test   eax,eax
c001dbd5:	74 42                	je     c001dc19 <Process::Process(char const*, Process*, char**)+0x10f>
c001dbd7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dbdb:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001dbe1:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001dbe7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dbeb:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001dbf1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dbf5:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001dbfb:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001dc01:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dc05:	05 0c 01 00 00       	add    eax,0x10c
c001dc0a:	83 ec 08             	sub    esp,0x8
c001dc0d:	52                   	push   edx
c001dc0e:	50                   	push   eax
c001dc0f:	e8 20 2c fe ff       	call   c0000834 <strcpy>
c001dc14:	83 c4 10             	add    esp,0x10
c001dc17:	eb 63                	jmp    c001dc7c <Process::Process(char const*, Process*, char**)+0x172>
c001dc19:	c7 44 24 04 60 12 00 00 	mov    DWORD PTR [esp+0x4],0x1260
c001dc21:	83 ec 0c             	sub    esp,0xc
c001dc24:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001dc28:	e8 b7 1c ff ff       	call   c000f8e4 <malloc>
c001dc2d:	83 c4 10             	add    esp,0x10
c001dc30:	89 c3                	mov    ebx,eax
c001dc32:	83 ec 08             	sub    esp,0x8
c001dc35:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001dc39:	53                   	push   ebx
c001dc3a:	e8 21 36 ff ff       	call   c0011260 <VgaText::VgaText(char const*)>
c001dc3f:	83 c4 10             	add    esp,0x10
c001dc42:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dc46:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c001dc4c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dc50:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001dc56:	83 ec 0c             	sub    esp,0xc
c001dc59:	50                   	push   eax
c001dc5a:	e8 f4 29 ff ff       	call   c0010653 <addToTerminalCycle(VgaText*)>
c001dc5f:	83 c4 10             	add    esp,0x10
c001dc62:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dc66:	05 0c 01 00 00       	add    eax,0x10c
c001dc6b:	83 ec 08             	sub    esp,0x8
c001dc6e:	68 cb c4 02 c0       	push   0xc002c4cb
c001dc73:	50                   	push   eax
c001dc74:	e8 bb 2b fe ff       	call   c0000834 <strcpy>
c001dc79:	83 c4 10             	add    esp,0x10
c001dc7c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dc80:	83 c0 0c             	add    eax,0xc
c001dc83:	83 ec 08             	sub    esp,0x8
c001dc86:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001dc8a:	50                   	push   eax
c001dc8b:	e8 a4 2b fe ff       	call   c0000834 <strcpy>
c001dc90:	83 c4 10             	add    esp,0x10
c001dc93:	83 ec 08             	sub    esp,0x8
c001dc96:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001dc9a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001dc9e:	e8 0d fe ff ff       	call   c001dab0 <Process::addArgs(char**)>
c001dca3:	83 c4 10             	add    esp,0x10
c001dca6:	83 ec 08             	sub    esp,0x8
c001dca9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001dcad:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001dcb1:	e8 87 ee ff ff       	call   c001cb3d <Thr::loadProgramIntoMemory(Process*, char const*)>
c001dcb6:	83 c4 10             	add    esp,0x10
c001dcb9:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001dcbd:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001dcc1:	83 f0 01             	xor    eax,0x1
c001dcc4:	88 c2                	mov    dl,al
c001dcc6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dcca:	88 90 3e 07 00 00    	mov    BYTE PTR [eax+0x73e],dl
c001dcd0:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001dcd5:	83 ec 08             	sub    esp,0x8
c001dcd8:	50                   	push   eax
c001dcd9:	68 c8 c5 02 c0       	push   0xc002c5c8
c001dcde:	e8 00 53 ff ff       	call   c0012fe3 <Dbg::kprintf(char const*, ...)>
c001dce3:	83 c4 10             	add    esp,0x10
c001dce6:	90                   	nop
c001dce7:	83 c4 14             	add    esp,0x14
c001dcea:	5b                   	pop    ebx
c001dceb:	5e                   	pop    esi
c001dcec:	c3                   	ret    
c001dced:	90                   	nop

c001dcee <Process::Process(bool, char const*, Process*, char**)>:
c001dcee:	56                   	push   esi
c001dcef:	53                   	push   ebx
c001dcf0:	83 ec 24             	sub    esp,0x24
c001dcf3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001dcf7:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001dcfb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dcff:	05 0c 02 00 00       	add    eax,0x20c
c001dd04:	bb 07 00 00 00       	mov    ebx,0x7
c001dd09:	89 c6                	mov    esi,eax
c001dd0b:	85 db                	test   ebx,ebx
c001dd0d:	78 12                	js     c001dd21 <Process::Process(bool, char const*, Process*, char**)+0x33>
c001dd0f:	83 ec 0c             	sub    esp,0xc
c001dd12:	56                   	push   esi
c001dd13:	e8 3a b0 00 00       	call   c0028d52 <ThreadControlBlock::ThreadControlBlock()>
c001dd18:	83 c4 10             	add    esp,0x10
c001dd1b:	83 c6 63             	add    esi,0x63
c001dd1e:	4b                   	dec    ebx
c001dd1f:	eb ea                	jmp    c001dd0b <Process::Process(bool, char const*, Process*, char**)+0x1d>
c001dd21:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dd25:	c6 80 3e 07 00 00 00 	mov    BYTE PTR [eax+0x73e],0x0
c001dd2c:	83 ec 0c             	sub    esp,0xc
c001dd2f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001dd33:	e8 ae c7 ff ff       	call   c001a4e6 <Krnl::newProcessEnv(Process*)>
c001dd38:	83 c4 10             	add    esp,0x10
c001dd3b:	89 c2                	mov    edx,eax
c001dd3d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dd41:	89 90 3a 07 00 00    	mov    DWORD PTR [eax+0x73a],edx
c001dd47:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dd4b:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c001dd54:	a1 70 dc 02 c0       	mov    eax,ds:0xc002dc70
c001dd59:	8d 50 01             	lea    edx,[eax+0x1]
c001dd5c:	89 15 70 dc 02 c0    	mov    DWORD PTR ds:0xc002dc70,edx
c001dd62:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001dd66:	89 02                	mov    DWORD PTR [edx],eax
c001dd68:	c7 44 24 1c 10 00 00 00 	mov    DWORD PTR [esp+0x1c],0x10
c001dd70:	83 ec 0c             	sub    esp,0xc
c001dd73:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001dd77:	e8 68 1b ff ff       	call   c000f8e4 <malloc>
c001dd7c:	83 c4 10             	add    esp,0x10
c001dd7f:	89 c3                	mov    ebx,eax
c001dd81:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001dd86:	83 ec 08             	sub    esp,0x8
c001dd89:	50                   	push   eax
c001dd8a:	53                   	push   ebx
c001dd8b:	e8 12 4b ff ff       	call   c00128a2 <VAS::VAS(bool)>
c001dd90:	83 c4 10             	add    esp,0x10
c001dd93:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dd97:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001dd9d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dda1:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001ddab:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ddaf:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001ddb3:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001ddb9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ddbd:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001ddc3:	85 c0                	test   eax,eax
c001ddc5:	74 42                	je     c001de09 <Process::Process(bool, char const*, Process*, char**)+0x11b>
c001ddc7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ddcb:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001ddd1:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001ddd7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dddb:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001dde1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dde5:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001ddeb:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001ddf1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ddf5:	05 0c 01 00 00       	add    eax,0x10c
c001ddfa:	83 ec 08             	sub    esp,0x8
c001ddfd:	52                   	push   edx
c001ddfe:	50                   	push   eax
c001ddff:	e8 30 2a fe ff       	call   c0000834 <strcpy>
c001de04:	83 c4 10             	add    esp,0x10
c001de07:	eb 63                	jmp    c001de6c <Process::Process(bool, char const*, Process*, char**)+0x17e>
c001de09:	c7 44 24 18 60 12 00 00 	mov    DWORD PTR [esp+0x18],0x1260
c001de11:	83 ec 0c             	sub    esp,0xc
c001de14:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001de18:	e8 c7 1a ff ff       	call   c000f8e4 <malloc>
c001de1d:	83 c4 10             	add    esp,0x10
c001de20:	89 c3                	mov    ebx,eax
c001de22:	83 ec 08             	sub    esp,0x8
c001de25:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001de29:	53                   	push   ebx
c001de2a:	e8 31 34 ff ff       	call   c0011260 <VgaText::VgaText(char const*)>
c001de2f:	83 c4 10             	add    esp,0x10
c001de32:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001de36:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c001de3c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001de40:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001de46:	83 ec 0c             	sub    esp,0xc
c001de49:	50                   	push   eax
c001de4a:	e8 04 28 ff ff       	call   c0010653 <addToTerminalCycle(VgaText*)>
c001de4f:	83 c4 10             	add    esp,0x10
c001de52:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001de56:	05 0c 01 00 00       	add    eax,0x10c
c001de5b:	83 ec 08             	sub    esp,0x8
c001de5e:	68 cb c4 02 c0       	push   0xc002c4cb
c001de63:	50                   	push   eax
c001de64:	e8 cb 29 fe ff       	call   c0000834 <strcpy>
c001de69:	83 c4 10             	add    esp,0x10
c001de6c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001de70:	83 c0 0c             	add    eax,0xc
c001de73:	83 ec 08             	sub    esp,0x8
c001de76:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001de7a:	50                   	push   eax
c001de7b:	e8 b4 29 fe ff       	call   c0000834 <strcpy>
c001de80:	83 c4 10             	add    esp,0x10
c001de83:	83 ec 08             	sub    esp,0x8
c001de86:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001de8a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001de8e:	e8 1d fc ff ff       	call   c001dab0 <Process::addArgs(char**)>
c001de93:	83 c4 10             	add    esp,0x10
c001de96:	90                   	nop
c001de97:	83 c4 24             	add    esp,0x24
c001de9a:	5b                   	pop    ebx
c001de9b:	5e                   	pop    esi
c001de9c:	c3                   	ret    

c001de9d <disableIRQs()>:
c001de9d:	fa                   	cli    
c001de9e:	ff 05 30 1c 03 c0    	inc    DWORD PTR ds:0xc0031c30
c001dea4:	c3                   	ret    

c001dea5 <getIRQNestingLevel()>:
c001dea5:	a1 30 1c 03 c0       	mov    eax,ds:0xc0031c30
c001deaa:	c3                   	ret    

c001deab <enableIRQs()>:
c001deab:	a1 30 1c 03 c0       	mov    eax,ds:0xc0031c30
c001deb0:	48                   	dec    eax
c001deb1:	a3 30 1c 03 c0       	mov    ds:0xc0031c30,eax
c001deb6:	75 01                	jne    c001deb9 <enableIRQs()+0xe>
c001deb8:	fb                   	sti    
c001deb9:	c3                   	ret    

c001deba <lockScheduler()>:
c001deba:	eb e1                	jmp    c001de9d <disableIRQs()>

c001debc <unlockScheduler()>:
c001debc:	eb ed                	jmp    c001deab <enableIRQs()>

c001debe <userModeEntryPoint(void*)>:
c001debe:	83 ec 0c             	sub    esp,0xc
c001dec1:	e8 f6 ff ff ff       	call   c001debc <unlockScheduler()>
c001dec6:	fb                   	sti    
c001dec7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001decc:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001decf:	8b 80 2e 05 00 00    	mov    eax,DWORD PTR [eax+0x52e]
c001ded5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001ded9:	83 c4 0c             	add    esp,0xc
c001dedc:	e9 49 24 fe ff       	jmp    c000032a <goToUsermode>

c001dee1 <lockStuff()>:
c001dee1:	e8 b7 ff ff ff       	call   c001de9d <disableIRQs()>
c001dee6:	ff 05 2c 1c 03 c0    	inc    DWORD PTR ds:0xc0031c2c
c001deec:	c3                   	ret    

c001deed <taskStartupFunction>:
c001deed:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001def2:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c001def5:	c3                   	ret    

c001def6 <updateTimeUsed()>:
c001def6:	a1 e8 e6 02 c0       	mov    eax,ds:0xc002e6e8
c001defb:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001df01:	f6 80 90 11 00 00 02 	test   BYTE PTR [eax+0x1190],0x2
c001df08:	74 50                	je     c001df5a <updateTimeUsed()+0x64>
c001df0a:	57                   	push   edi
c001df0b:	56                   	push   esi
c001df0c:	53                   	push   ebx
c001df0d:	0f 31                	rdtsc  
c001df0f:	89 c1                	mov    ecx,eax
c001df11:	a3 70 1c 03 c0       	mov    ds:0xc0031c70,eax
c001df16:	2b 0d 60 1c 03 c0    	sub    ecx,DWORD PTR ds:0xc0031c60
c001df1c:	89 d3                	mov    ebx,edx
c001df1e:	89 0d 68 1c 03 c0    	mov    DWORD PTR ds:0xc0031c68,ecx
c001df24:	1b 1d 64 1c 03 c0    	sbb    ebx,DWORD PTR ds:0xc0031c64
c001df2a:	a3 60 1c 03 c0       	mov    ds:0xc0031c60,eax
c001df2f:	89 1d 6c 1c 03 c0    	mov    DWORD PTR ds:0xc0031c6c,ebx
c001df35:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001df3a:	89 15 74 1c 03 c0    	mov    DWORD PTR ds:0xc0031c74,edx
c001df40:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c001df43:	89 15 64 1c 03 c0    	mov    DWORD PTR ds:0xc0031c64,edx
c001df49:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c001df4c:	01 f1                	add    ecx,esi
c001df4e:	89 48 10             	mov    DWORD PTR [eax+0x10],ecx
c001df51:	11 fb                	adc    ebx,edi
c001df53:	89 58 14             	mov    DWORD PTR [eax+0x14],ebx
c001df56:	5b                   	pop    ebx
c001df57:	5e                   	pop    esi
c001df58:	5f                   	pop    edi
c001df59:	c3                   	ret    
c001df5a:	c3                   	ret    

c001df5b <switchToThread(ThreadControlBlock*)>:
c001df5b:	53                   	push   ebx
c001df5c:	83 ec 08             	sub    esp,0x8
c001df5f:	a1 2c 1c 03 c0       	mov    eax,ds:0xc0031c2c
c001df64:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001df68:	85 c0                	test   eax,eax
c001df6a:	75 30                	jne    c001df9c <switchToThread(ThreadControlBlock*)+0x41>
c001df6c:	8a 43 44             	mov    al,BYTE PTR [ebx+0x44]
c001df6f:	3c ff                	cmp    al,0xff
c001df71:	74 25                	je     c001df98 <switchToThread(ThreadControlBlock*)+0x3d>
c001df73:	0f b6 d0             	movzx  edx,al
c001df76:	b8 84 03 00 00       	mov    eax,0x384
c001df7b:	29 d0                	sub    eax,edx
c001df7d:	c1 e0 10             	shl    eax,0x10
c001df80:	03 43 38             	add    eax,DWORD PTR [ebx+0x38]
c001df83:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c001df86:	e8 6b ff ff ff       	call   c001def6 <updateTimeUsed()>
c001df8b:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001df8f:	83 c4 08             	add    esp,0x8
c001df92:	5b                   	pop    ebx
c001df93:	e9 ca 23 fe ff       	jmp    c0000362 <switchToThreadASM>
c001df98:	31 c0                	xor    eax,eax
c001df9a:	eb e7                	jmp    c001df83 <switchToThread(ThreadControlBlock*)+0x28>
c001df9c:	c7 05 28 1c 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0031c28,0x1
c001dfa6:	83 c4 08             	add    esp,0x8
c001dfa9:	5b                   	pop    ebx
c001dfaa:	c3                   	ret    
c001dfab:	90                   	nop

c001dfac <Semaphore::Semaphore(int)>:
c001dfac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001dfb0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001dfb4:	89 10                	mov    DWORD PTR [eax],edx
c001dfb6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001dfba:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001dfc1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001dfc5:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001dfcc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001dfd0:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001dfd7:	90                   	nop
c001dfd8:	c3                   	ret    
c001dfd9:	90                   	nop

c001dfda <Mutex::Mutex()>:
c001dfda:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001dfde:	6a 01                	push   0x1
c001dfe0:	50                   	push   eax
c001dfe1:	e8 c6 ff ff ff       	call   c001dfac <Semaphore::Semaphore(int)>
c001dfe6:	83 c4 08             	add    esp,0x8
c001dfe9:	90                   	nop
c001dfea:	c3                   	ret    
c001dfeb:	90                   	nop

c001dfec <Process::createThread(void (*)(void*), void*, int)>:
c001dfec:	55                   	push   ebp
c001dfed:	31 c9                	xor    ecx,ecx
c001dfef:	57                   	push   edi
c001dff0:	56                   	push   esi
c001dff1:	53                   	push   ebx
c001dff2:	83 ec 1c             	sub    esp,0x1c
c001dff5:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001dff9:	66 8b b3 24 05 00 00 	mov    si,WORD PTR [ebx+0x524]
c001e000:	89 f2                	mov    edx,esi
c001e002:	0f b7 c2             	movzx  eax,dx
c001e005:	83 e2 01             	and    edx,0x1
c001e008:	74 14                	je     c001e01e <Process::createThread(void (*)(void*), void*, int)+0x32>
c001e00a:	d1 f8                	sar    eax,1
c001e00c:	41                   	inc    ecx
c001e00d:	89 c2                	mov    edx,eax
c001e00f:	83 f9 10             	cmp    ecx,0x10
c001e012:	75 ee                	jne    c001e002 <Process::createThread(void (*)(void*), void*, int)+0x16>
c001e014:	83 c4 1c             	add    esp,0x1c
c001e017:	31 c0                	xor    eax,eax
c001e019:	5b                   	pop    ebx
c001e01a:	5e                   	pop    esi
c001e01b:	5f                   	pop    edi
c001e01c:	5d                   	pop    ebp
c001e01d:	c3                   	ret    
c001e01e:	83 ec 08             	sub    esp,0x8
c001e021:	b8 01 00 00 00       	mov    eax,0x1
c001e026:	d3 e0                	shl    eax,cl
c001e028:	09 c6                	or     esi,eax
c001e02a:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c001e030:	66 89 b3 24 05 00 00 	mov    WORD PTR [ebx+0x524],si
c001e037:	8d 34 09             	lea    esi,[ecx+ecx*1]
c001e03a:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001e03d:	01 ce                	add    esi,ecx
c001e03f:	89 f0                	mov    eax,esi
c001e041:	c1 e0 05             	shl    eax,0x5
c001e044:	01 c6                	add    esi,eax
c001e046:	8d 04 33             	lea    eax,[ebx+esi*1]
c001e049:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c001e04f:	89 98 4c 02 00 00    	mov    DWORD PTR [eax+0x24c],ebx
c001e055:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c001e059:	89 88 48 02 00 00    	mov    DWORD PTR [eax+0x248],ecx
c001e05f:	89 90 51 02 00 00    	mov    DWORD PTR [eax+0x251],edx
c001e065:	89 ca                	mov    edx,ecx
c001e067:	f7 da                	neg    edx
c001e069:	c1 e2 15             	shl    edx,0x15
c001e06c:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c001e072:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c001e078:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c001e07c:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c001e086:	88 90 50 02 00 00    	mov    BYTE PTR [eax+0x250],dl
c001e08c:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001e090:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c001e096:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c001e0a0:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c001e0aa:	8d 84 33 0c 02 00 00 	lea    eax,[ebx+esi*1+0x20c]
c001e0b1:	50                   	push   eax
c001e0b2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001e0b6:	68 4c 1c 03 c0       	push   0xc0031c4c
c001e0bb:	e8 20 ab 00 00       	call   c0028be0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e0c0:	83 c4 10             	add    esp,0x10
c001e0c3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e0c7:	83 c4 1c             	add    esp,0x1c
c001e0ca:	5b                   	pop    ebx
c001e0cb:	5e                   	pop    esi
c001e0cc:	5f                   	pop    edi
c001e0cd:	5d                   	pop    ebp
c001e0ce:	c3                   	ret    
c001e0cf:	90                   	nop

c001e0d0 <Process::createUserThread()>:
c001e0d0:	83 ec 0c             	sub    esp,0xc
c001e0d3:	68 80 00 00 00       	push   0x80
c001e0d8:	6a 00                	push   0x0
c001e0da:	68 be de 01 c0       	push   0xc001debe
c001e0df:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e0e3:	e8 04 ff ff ff       	call   c001dfec <Process::createThread(void (*)(void*), void*, int)>
c001e0e8:	83 c4 1c             	add    esp,0x1c
c001e0eb:	c3                   	ret    

c001e0ec <setupMultitasking(void (*)())>:
c001e0ec:	56                   	push   esi
c001e0ed:	53                   	push   ebx
c001e0ee:	53                   	push   ebx
c001e0ef:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001e0f3:	eb 10                	jmp    c001e105 <setupMultitasking(void (*)())+0x19>
c001e0f5:	83 ec 0c             	sub    esp,0xc
c001e0f8:	68 4c 1c 03 c0       	push   0xc0031c4c
c001e0fd:	e8 30 aa 00 00       	call   c0028b32 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e102:	83 c4 10             	add    esp,0x10
c001e105:	83 ec 0c             	sub    esp,0xc
c001e108:	68 4c 1c 03 c0       	push   0xc0031c4c
c001e10d:	e8 04 aa 00 00       	call   c0028b16 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001e112:	83 c4 10             	add    esp,0x10
c001e115:	84 c0                	test   al,al
c001e117:	74 dc                	je     c001e0f5 <setupMultitasking(void (*)())+0x9>
c001e119:	83 ec 0c             	sub    esp,0xc
c001e11c:	68 3f 07 00 00       	push   0x73f
c001e121:	e8 be 17 ff ff       	call   c000f8e4 <malloc>
c001e126:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001e12d:	89 c3                	mov    ebx,eax
c001e12f:	6a 00                	push   0x0
c001e131:	68 cf c4 02 c0       	push   0xc002c4cf
c001e136:	6a 01                	push   0x1
c001e138:	50                   	push   eax
c001e139:	e8 b0 fb ff ff       	call   c001dcee <Process::Process(bool, char const*, Process*, char**)>
c001e13e:	83 c4 18             	add    esp,0x18
c001e141:	89 1d 58 1c 03 c0    	mov    DWORD PTR ds:0xc0031c58,ebx
c001e147:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c001e14d:	68 f0 c5 02 c0       	push   0xc002c5f0
c001e152:	e8 8c 4e ff ff       	call   c0012fe3 <Dbg::kprintf(char const*, ...)>
c001e157:	58                   	pop    eax
c001e158:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c001e15e:	e8 72 2c ff ff       	call   c0010dd5 <setActiveTerminal(VgaText*)>
c001e163:	66 83 8b 24 05 00 00 01 	or     WORD PTR [ebx+0x524],0x1
c001e16b:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c001e171:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001e174:	c7 83 48 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x248],0x0
c001e17e:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c001e184:	89 9b 4c 02 00 00    	mov    DWORD PTR [ebx+0x24c],ebx
c001e18a:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c001e194:	c7 83 44 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x244],0x2faf080
c001e19e:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c001e1a8:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c001e1ae:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c001e1b4:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c001e1be:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c001e1c4:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c001e1ce:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c001e1d4:	5a                   	pop    edx
c001e1d5:	59                   	pop    ecx
c001e1d6:	68 cb c4 02 c0       	push   0xc002c4cb
c001e1db:	50                   	push   eax
c001e1dc:	e8 53 26 fe ff       	call   c0000834 <strcpy>
c001e1e1:	c6 83 50 02 00 00 80 	mov    BYTE PTR [ebx+0x250],0x80
c001e1e8:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001e1ec:	83 c4 14             	add    esp,0x14
c001e1ef:	5b                   	pop    ebx
c001e1f0:	5e                   	pop    esi
c001e1f1:	e9 5e 21 fe ff       	jmp    c0000354 <switchToThreadASMFirstTime>

c001e1f6 <schedule()>:
c001e1f6:	a1 2c 1c 03 c0       	mov    eax,ds:0xc0031c2c
c001e1fb:	85 c0                	test   eax,eax
c001e1fd:	74 0b                	je     c001e20a <schedule()+0x14>
c001e1ff:	c7 05 28 1c 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0031c28,0x1
c001e209:	c3                   	ret    
c001e20a:	53                   	push   ebx
c001e20b:	83 ec 14             	sub    esp,0x14
c001e20e:	68 4c 1c 03 c0       	push   0xc0031c4c
c001e213:	e8 fe a8 00 00       	call   c0028b16 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001e218:	83 c4 10             	add    esp,0x10
c001e21b:	84 c0                	test   al,al
c001e21d:	75 38                	jne    c001e257 <schedule()+0x61>
c001e21f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e224:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001e227:	4a                   	dec    edx
c001e228:	74 32                	je     c001e25c <schedule()+0x66>
c001e22a:	83 ec 0c             	sub    esp,0xc
c001e22d:	68 4c 1c 03 c0       	push   0xc0031c4c
c001e232:	e8 d7 a8 00 00       	call   c0028b0e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e237:	c7 04 24 4c 1c 03 c0 	mov    DWORD PTR [esp],0xc0031c4c
c001e23e:	89 c3                	mov    ebx,eax
c001e240:	e8 ed a8 00 00       	call   c0028b32 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e245:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c001e24c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e24f:	e8 07 fd ff ff       	call   c001df5b <switchToThread(ThreadControlBlock*)>
c001e254:	83 c4 10             	add    esp,0x10
c001e257:	83 c4 08             	add    esp,0x8
c001e25a:	5b                   	pop    ebx
c001e25b:	c3                   	ret    
c001e25c:	83 ec 08             	sub    esp,0x8
c001e25f:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001e266:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001e26c:	68 4c 1c 03 c0       	push   0xc0031c4c
c001e271:	e8 6a a9 00 00       	call   c0028be0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e276:	83 c4 10             	add    esp,0x10
c001e279:	eb af                	jmp    c001e22a <schedule()+0x34>

c001e27b <unlockStuff()>:
c001e27b:	a1 2c 1c 03 c0       	mov    eax,ds:0xc0031c2c
c001e280:	48                   	dec    eax
c001e281:	a3 2c 1c 03 c0       	mov    ds:0xc0031c2c,eax
c001e286:	75 09                	jne    c001e291 <unlockStuff()+0x16>
c001e288:	a1 28 1c 03 c0       	mov    eax,ds:0xc0031c28
c001e28d:	85 c0                	test   eax,eax
c001e28f:	75 05                	jne    c001e296 <unlockStuff()+0x1b>
c001e291:	e9 15 fc ff ff       	jmp    c001deab <enableIRQs()>
c001e296:	83 ec 0c             	sub    esp,0xc
c001e299:	c7 05 28 1c 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0031c28,0x0
c001e2a3:	e8 4e ff ff ff       	call   c001e1f6 <schedule()>
c001e2a8:	83 c4 0c             	add    esp,0xc
c001e2ab:	e9 fb fb ff ff       	jmp    c001deab <enableIRQs()>

c001e2b0 <Semaphore::tryAcquire()>:
c001e2b0:	83 ec 0c             	sub    esp,0xc
c001e2b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e2b7:	e8 25 fc ff ff       	call   c001dee1 <lockStuff()>
c001e2bc:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001e2bf:	3b 10                	cmp    edx,DWORD PTR [eax]
c001e2c1:	7c 0b                	jl     c001e2ce <Semaphore::tryAcquire()+0x1e>
c001e2c3:	e8 b3 ff ff ff       	call   c001e27b <unlockStuff()>
c001e2c8:	31 c0                	xor    eax,eax
c001e2ca:	83 c4 0c             	add    esp,0xc
c001e2cd:	c3                   	ret    
c001e2ce:	42                   	inc    edx
c001e2cf:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001e2d2:	e8 a4 ff ff ff       	call   c001e27b <unlockStuff()>
c001e2d7:	b0 01                	mov    al,0x1
c001e2d9:	83 c4 0c             	add    esp,0xc
c001e2dc:	c3                   	ret    
c001e2dd:	90                   	nop

c001e2de <Semaphore::assertLocked(char const*)>:
c001e2de:	83 ec 0c             	sub    esp,0xc
c001e2e1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e2e5:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e2e9:	e8 f3 fb ff ff       	call   c001dee1 <lockStuff()>
c001e2ee:	8b 08                	mov    ecx,DWORD PTR [eax]
c001e2f0:	39 48 0c             	cmp    DWORD PTR [eax+0xc],ecx
c001e2f3:	7c 05                	jl     c001e2fa <Semaphore::assertLocked(char const*)+0x1c>
c001e2f5:	83 c4 0c             	add    esp,0xc
c001e2f8:	eb 81                	jmp    c001e27b <unlockStuff()>
c001e2fa:	83 ec 0c             	sub    esp,0xc
c001e2fd:	52                   	push   edx
c001e2fe:	e8 92 c3 ff ff       	call   c001a695 <Krnl::panic(char const*)>
c001e303:	83 c4 10             	add    esp,0x10
c001e306:	83 c4 0c             	add    esp,0xc
c001e309:	e9 6d ff ff ff       	jmp    c001e27b <unlockStuff()>

c001e30e <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c001e30e:	83 ec 0c             	sub    esp,0xc
c001e311:	e8 8f fb ff ff       	call   c001dea5 <getIRQNestingLevel()>
c001e316:	83 ec 08             	sub    esp,0x8
c001e319:	50                   	push   eax
c001e31a:	68 24 c6 02 c0       	push   0xc002c624
c001e31f:	e8 bf 4c ff ff       	call   c0012fe3 <Dbg::kprintf(char const*, ...)>
c001e324:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001e328:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e32d:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001e330:	e8 c1 fe ff ff       	call   c001e1f6 <schedule()>
c001e335:	e8 82 fb ff ff       	call   c001debc <unlockScheduler()>
c001e33a:	e8 66 fb ff ff       	call   c001dea5 <getIRQNestingLevel()>
c001e33f:	5a                   	pop    edx
c001e340:	59                   	pop    ecx
c001e341:	50                   	push   eax
c001e342:	68 58 c6 02 c0       	push   0xc002c658
c001e347:	e8 97 4c ff ff       	call   c0012fe3 <Dbg::kprintf(char const*, ...)>
c001e34c:	83 c4 1c             	add    esp,0x1c
c001e34f:	c3                   	ret    

c001e350 <blockTask(TaskState)>:
c001e350:	83 ec 0c             	sub    esp,0xc
c001e353:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e357:	e8 5e fb ff ff       	call   c001deba <lockScheduler()>
c001e35c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e361:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001e364:	e8 8d fe ff ff       	call   c001e1f6 <schedule()>
c001e369:	83 c4 0c             	add    esp,0xc
c001e36c:	e9 4b fb ff ff       	jmp    c001debc <unlockScheduler()>

c001e371 <waitTask(int, int*, int)>:
c001e371:	83 ec 18             	sub    esp,0x18
c001e374:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e379:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001e37d:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c001e380:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001e384:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e389:	89 50 4d             	mov    DWORD PTR [eax+0x4d],edx
c001e38c:	6a 07                	push   0x7
c001e38e:	e8 bd ff ff ff       	call   c001e350 <blockTask(TaskState)>
c001e393:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e398:	83 c4 10             	add    esp,0x10
c001e39b:	8b 50 4d             	mov    edx,DWORD PTR [eax+0x4d]
c001e39e:	85 d2                	test   edx,edx
c001e3a0:	74 0a                	je     c001e3ac <waitTask(int, int*, int)+0x3b>
c001e3a2:	8b 40 51             	mov    eax,DWORD PTR [eax+0x51]
c001e3a5:	89 02                	mov    DWORD PTR [edx],eax
c001e3a7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e3ac:	8b 40 49             	mov    eax,DWORD PTR [eax+0x49]
c001e3af:	83 c4 0c             	add    esp,0xc
c001e3b2:	c3                   	ret    

c001e3b3 <nanoSleepUntil(unsigned long long)>:
c001e3b3:	83 ec 0c             	sub    esp,0xc
c001e3b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e3ba:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e3be:	3b 05 70 ed 02 c0    	cmp    eax,DWORD PTR ds:0xc002ed70
c001e3c4:	89 d1                	mov    ecx,edx
c001e3c6:	1b 0d 74 ed 02 c0    	sbb    ecx,DWORD PTR ds:0xc002ed74
c001e3cc:	73 04                	jae    c001e3d2 <nanoSleepUntil(unsigned long long)+0x1f>
c001e3ce:	83 c4 0c             	add    esp,0xc
c001e3d1:	c3                   	ret    
c001e3d2:	e8 0a fb ff ff       	call   c001dee1 <lockStuff()>
c001e3d7:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001e3dd:	83 ec 08             	sub    esp,0x8
c001e3e0:	89 41 2c             	mov    DWORD PTR [ecx+0x2c],eax
c001e3e3:	89 51 30             	mov    DWORD PTR [ecx+0x30],edx
c001e3e6:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001e3ec:	68 40 1c 03 c0       	push   0xc0031c40
c001e3f1:	e8 ea a7 00 00       	call   c0028be0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e3f6:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c001e3fd:	e8 4e ff ff ff       	call   c001e350 <blockTask(TaskState)>
c001e402:	83 c4 1c             	add    esp,0x1c
c001e405:	e9 71 fe ff ff       	jmp    c001e27b <unlockStuff()>

c001e40a <nanoSleep(unsigned long long)>:
c001e40a:	a1 70 ed 02 c0       	mov    eax,ds:0xc002ed70
c001e40f:	8b 15 74 ed 02 c0    	mov    edx,DWORD PTR ds:0xc002ed74
c001e415:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c001e419:	11 54 24 08          	adc    DWORD PTR [esp+0x8],edx
c001e41d:	eb 94                	jmp    c001e3b3 <nanoSleepUntil(unsigned long long)>

c001e41f <sleep(unsigned long long)>:
c001e41f:	69 4c 24 08 00 ca 9a 3b 	imul   ecx,DWORD PTR [esp+0x8],0x3b9aca00
c001e427:	b8 00 ca 9a 3b       	mov    eax,0x3b9aca00
c001e42c:	f7 64 24 04          	mul    DWORD PTR [esp+0x4]
c001e430:	01 ca                	add    edx,ecx
c001e432:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001e436:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001e43a:	eb ce                	jmp    c001e40a <nanoSleep(unsigned long long)>

c001e43c <Semaphore::acquire()>:
c001e43c:	83 ec 0c             	sub    esp,0xc
c001e43f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e443:	e8 99 fa ff ff       	call   c001dee1 <lockStuff()>
c001e448:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001e44b:	3b 10                	cmp    edx,DWORD PTR [eax]
c001e44d:	7d 0c                	jge    c001e45b <Semaphore::acquire()+0x1f>
c001e44f:	42                   	inc    edx
c001e450:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001e453:	83 c4 0c             	add    esp,0xc
c001e456:	e9 20 fe ff ff       	jmp    c001e27b <unlockStuff()>
c001e45b:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001e461:	c7 42 20 00 00 00 00 	mov    DWORD PTR [edx+0x20],0x0
c001e468:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001e46b:	85 d2                	test   edx,edx
c001e46d:	74 2a                	je     c001e499 <Semaphore::acquire()+0x5d>
c001e46f:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c001e472:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001e478:	89 4a 20             	mov    DWORD PTR [edx+0x20],ecx
c001e47b:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001e481:	83 ec 0c             	sub    esp,0xc
c001e484:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001e487:	6a 05                	push   0x5
c001e489:	e8 c2 fe ff ff       	call   c001e350 <blockTask(TaskState)>
c001e48e:	83 c4 10             	add    esp,0x10
c001e491:	83 c4 0c             	add    esp,0xc
c001e494:	e9 e2 fd ff ff       	jmp    c001e27b <unlockStuff()>
c001e499:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001e49f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001e4a2:	eb d7                	jmp    c001e47b <Semaphore::acquire()+0x3f>

c001e4a4 <taskReturned>:
c001e4a4:	83 ec 18             	sub    esp,0x18
c001e4a7:	68 8c c6 02 c0       	push   0xc002c68c
c001e4ac:	e8 e4 c1 ff ff       	call   c001a695 <Krnl::panic(char const*)>
c001e4b1:	83 c4 10             	add    esp,0x10
c001e4b4:	83 ec 0c             	sub    esp,0xc
c001e4b7:	6a 02                	push   0x2
c001e4b9:	e8 92 fe ff ff       	call   c001e350 <blockTask(TaskState)>
c001e4be:	e8 f7 f9 ff ff       	call   c001deba <lockScheduler()>
c001e4c3:	e8 2e fd ff ff       	call   c001e1f6 <schedule()>
c001e4c8:	e8 ef f9 ff ff       	call   c001debc <unlockScheduler()>
c001e4cd:	83 c4 10             	add    esp,0x10
c001e4d0:	eb e2                	jmp    c001e4b4 <taskReturned+0x10>

c001e4d2 <unblockTask(ThreadControlBlock*)>:
c001e4d2:	53                   	push   ebx
c001e4d3:	83 ec 08             	sub    esp,0x8
c001e4d6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001e4da:	e8 db f9 ff ff       	call   c001deba <lockScheduler()>
c001e4df:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001e4e2:	85 c0                	test   eax,eax
c001e4e4:	74 5c                	je     c001e542 <unblockTask(ThreadControlBlock*)+0x70>
c001e4e6:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001e4e9:	48                   	dec    eax
c001e4ea:	74 31                	je     c001e51d <unblockTask(ThreadControlBlock*)+0x4b>
c001e4ec:	83 ec 0c             	sub    esp,0xc
c001e4ef:	68 4c 1c 03 c0       	push   0xc0031c4c
c001e4f4:	e8 15 a6 00 00       	call   c0028b0e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e4f9:	83 c4 10             	add    esp,0x10
c001e4fc:	85 c0                	test   eax,eax
c001e4fe:	75 17                	jne    c001e517 <unblockTask(ThreadControlBlock*)+0x45>
c001e500:	eb 65                	jmp    c001e567 <unblockTask(ThreadControlBlock*)+0x95>
c001e502:	83 ec 08             	sub    esp,0x8
c001e505:	50                   	push   eax
c001e506:	68 4c 1c 03 c0       	push   0xc0031c4c
c001e50b:	e8 d8 a8 00 00       	call   c0028de8 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c001e510:	83 c4 10             	add    esp,0x10
c001e513:	85 c0                	test   eax,eax
c001e515:	74 50                	je     c001e567 <unblockTask(ThreadControlBlock*)+0x95>
c001e517:	39 c3                	cmp    ebx,eax
c001e519:	75 e7                	jne    c001e502 <unblockTask(ThreadControlBlock*)+0x30>
c001e51b:	eb 1c                	jmp    c001e539 <unblockTask(ThreadControlBlock*)+0x67>
c001e51d:	83 ec 0c             	sub    esp,0xc
c001e520:	68 7c c7 02 c0       	push   0xc002c77c
c001e525:	e8 b9 4a ff ff       	call   c0012fe3 <Dbg::kprintf(char const*, ...)>
c001e52a:	c7 04 24 08 c7 02 c0 	mov    DWORD PTR [esp],0xc002c708
c001e531:	e8 ad 4a ff ff       	call   c0012fe3 <Dbg::kprintf(char const*, ...)>
c001e536:	83 c4 10             	add    esp,0x10
c001e539:	83 c4 08             	add    esp,0x8
c001e53c:	5b                   	pop    ebx
c001e53d:	e9 7a f9 ff ff       	jmp    c001debc <unlockScheduler()>
c001e542:	83 ec 0c             	sub    esp,0xc
c001e545:	68 c0 c6 02 c0       	push   0xc002c6c0
c001e54a:	e8 94 4a ff ff       	call   c0012fe3 <Dbg::kprintf(char const*, ...)>
c001e54f:	c7 04 24 08 c7 02 c0 	mov    DWORD PTR [esp],0xc002c708
c001e556:	e8 88 4a ff ff       	call   c0012fe3 <Dbg::kprintf(char const*, ...)>
c001e55b:	83 c4 10             	add    esp,0x10
c001e55e:	83 c4 08             	add    esp,0x8
c001e561:	5b                   	pop    ebx
c001e562:	e9 55 f9 ff ff       	jmp    c001debc <unlockScheduler()>
c001e567:	83 ec 08             	sub    esp,0x8
c001e56a:	53                   	push   ebx
c001e56b:	68 4c 1c 03 c0       	push   0xc0031c4c
c001e570:	e8 6b a6 00 00       	call   c0028be0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e575:	83 c4 10             	add    esp,0x10
c001e578:	83 c4 08             	add    esp,0x8
c001e57b:	5b                   	pop    ebx
c001e57c:	e9 3b f9 ff ff       	jmp    c001debc <unlockScheduler()>

c001e581 <cleanupTerminatedTask(ThreadControlBlock*)>:
c001e581:	55                   	push   ebp
c001e582:	57                   	push   edi
c001e583:	56                   	push   esi
c001e584:	53                   	push   ebx
c001e585:	83 ec 1c             	sub    esp,0x1c
c001e588:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001e58c:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e58f:	8b b8 36 05 00 00    	mov    edi,DWORD PTR [eax+0x536]
c001e595:	85 ff                	test   edi,edi
c001e597:	7e 20                	jle    c001e5b9 <cleanupTerminatedTask(ThreadControlBlock*)+0x38>
c001e599:	31 f6                	xor    esi,esi
c001e59b:	83 ec 0c             	sub    esp,0xc
c001e59e:	ff b4 b0 3a 05 00 00 	push   DWORD PTR [eax+esi*4+0x53a]
c001e5a5:	46                   	inc    esi
c001e5a6:	e8 49 13 ff ff       	call   c000f8f4 <free>
c001e5ab:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e5ae:	83 c4 10             	add    esp,0x10
c001e5b1:	39 b0 36 05 00 00    	cmp    DWORD PTR [eax+0x536],esi
c001e5b7:	7f e2                	jg     c001e59b <cleanupTerminatedTask(ThreadControlBlock*)+0x1a>
c001e5b9:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001e5c3:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001e5c8:	8b 4b 3c             	mov    ecx,DWORD PTR [ebx+0x3c]
c001e5cb:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c001e5ce:	d3 c0                	rol    eax,cl
c001e5d0:	66 21 82 24 05 00 00 	and    WORD PTR [edx+0x524],ax
c001e5d7:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e5da:	89 f7                	mov    edi,esi
c001e5dc:	66 83 be 24 05 00 00 00 	cmp    WORD PTR [esi+0x524],0x0
c001e5e4:	0f 85 74 01 00 00    	jne    c001e75e <cleanupTerminatedTask(ThreadControlBlock*)+0x1dd>
c001e5ea:	8b ae 3a 07 00 00    	mov    ebp,DWORD PTR [esi+0x73a]
c001e5f0:	85 ed                	test   ebp,ebp
c001e5f2:	74 1b                	je     c001e60f <cleanupTerminatedTask(ThreadControlBlock*)+0x8e>
c001e5f4:	83 ec 0c             	sub    esp,0xc
c001e5f7:	55                   	push   ebp
c001e5f8:	e8 05 be ff ff       	call   c001a402 <EnvVarContainer::~EnvVarContainer()>
c001e5fd:	59                   	pop    ecx
c001e5fe:	5e                   	pop    esi
c001e5ff:	6a 0c                	push   0xc
c001e601:	55                   	push   ebp
c001e602:	e8 fc 48 ff ff       	call   c0012f03 <operator delete(void*, unsigned long)>
c001e607:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e60a:	83 c4 10             	add    esp,0x10
c001e60d:	89 f7                	mov    edi,esi
c001e60f:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001e615:	85 c0                	test   eax,eax
c001e617:	0f 84 aa 00 00 00    	je     c001e6c7 <cleanupTerminatedTask(ThreadControlBlock*)+0x146>
c001e61d:	8b 4b 55             	mov    ecx,DWORD PTR [ebx+0x55]
c001e620:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001e624:	31 c9                	xor    ecx,ecx
c001e626:	eb 10                	jmp    c001e638 <cleanupTerminatedTask(ThreadControlBlock*)+0xb7>
c001e628:	41                   	inc    ecx
c001e629:	83 f9 10             	cmp    ecx,0x10
c001e62c:	0f 84 95 00 00 00    	je     c001e6c7 <cleanupTerminatedTask(ThreadControlBlock*)+0x146>
c001e632:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001e638:	0f b7 90 24 05 00 00 	movzx  edx,WORD PTR [eax+0x524]
c001e63f:	d3 fa                	sar    edx,cl
c001e641:	83 e2 01             	and    edx,0x1
c001e644:	74 e2                	je     c001e628 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e646:	8d 14 09             	lea    edx,[ecx+ecx*1]
c001e649:	01 ca                	add    edx,ecx
c001e64b:	89 d5                	mov    ebp,edx
c001e64d:	c1 e5 05             	shl    ebp,0x5
c001e650:	01 ea                	add    edx,ebp
c001e652:	01 d0                	add    eax,edx
c001e654:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c001e65a:	83 fd 07             	cmp    ebp,0x7
c001e65d:	75 c9                	jne    c001e628 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e65f:	05 40 02 00 00       	add    eax,0x240
c001e664:	8b 68 15             	mov    ebp,DWORD PTR [eax+0x15]
c001e667:	83 fd ff             	cmp    ebp,0xffffffff
c001e66a:	0f 8c 08 01 00 00    	jl     c001e778 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f7>
c001e670:	0f 84 b9 01 00 00    	je     c001e82f <cleanupTerminatedTask(ThreadControlBlock*)+0x2ae>
c001e676:	85 ed                	test   ebp,ebp
c001e678:	0f 84 a0 01 00 00    	je     c001e81e <cleanupTerminatedTask(ThreadControlBlock*)+0x29d>
c001e67e:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c001e680:	75 a6                	jne    c001e628 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e682:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001e688:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e68c:	01 d0                	add    eax,edx
c001e68e:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c001e692:	83 ec 0c             	sub    esp,0xc
c001e695:	89 b8 5d 02 00 00    	mov    DWORD PTR [eax+0x25d],edi
c001e69b:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e69e:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001e6a4:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c001e6ab:	50                   	push   eax
c001e6ac:	e8 21 fe ff ff       	call   c001e4d2 <unblockTask(ThreadControlBlock*)>
c001e6b1:	83 c4 10             	add    esp,0x10
c001e6b4:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e6b7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e6bb:	89 f7                	mov    edi,esi
c001e6bd:	41                   	inc    ecx
c001e6be:	83 f9 10             	cmp    ecx,0x10
c001e6c1:	0f 85 6b ff ff ff    	jne    c001e632 <cleanupTerminatedTask(ThreadControlBlock*)+0xb1>
c001e6c7:	8b 86 26 05 00 00    	mov    eax,DWORD PTR [esi+0x526]
c001e6cd:	85 c0                	test   eax,eax
c001e6cf:	74 5d                	je     c001e72e <cleanupTerminatedTask(ThreadControlBlock*)+0x1ad>
c001e6d1:	8b 96 2a 05 00 00    	mov    edx,DWORD PTR [esi+0x52a]
c001e6d7:	3b 82 26 05 00 00    	cmp    eax,DWORD PTR [edx+0x526]
c001e6dd:	74 4f                	je     c001e72e <cleanupTerminatedTask(ThreadControlBlock*)+0x1ad>
c001e6df:	83 ec 0c             	sub    esp,0xc
c001e6e2:	68 4c 1c 03 c0       	push   0xc0031c4c
c001e6e7:	e8 22 a4 00 00       	call   c0028b0e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e6ec:	c7 04 24 4c 1c 03 c0 	mov    DWORD PTR [esp],0xc0031c4c
c001e6f3:	89 c7                	mov    edi,eax
c001e6f5:	e8 1c a4 00 00       	call   c0028b16 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001e6fa:	83 c4 10             	add    esp,0x10
c001e6fd:	84 c0                	test   al,al
c001e6ff:	0f 84 e4 00 00 00    	je     c001e7e9 <cleanupTerminatedTask(ThreadControlBlock*)+0x268>
c001e705:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e708:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001e70e:	85 d2                	test   edx,edx
c001e710:	74 0f                	je     c001e721 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a0>
c001e712:	83 ec 0c             	sub    esp,0xc
c001e715:	8b 02                	mov    eax,DWORD PTR [edx]
c001e717:	52                   	push   edx
c001e718:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001e71b:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e71e:	83 c4 10             	add    esp,0x10
c001e721:	c7 80 26 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x526],0x0
c001e72b:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c001e72e:	8b 9f 32 05 00 00    	mov    ebx,DWORD PTR [edi+0x532]
c001e734:	85 db                	test   ebx,ebx
c001e736:	74 16                	je     c001e74e <cleanupTerminatedTask(ThreadControlBlock*)+0x1cd>
c001e738:	83 ec 0c             	sub    esp,0xc
c001e73b:	53                   	push   ebx
c001e73c:	e8 4d 3b ff ff       	call   c001228e <VAS::~VAS()>
c001e741:	58                   	pop    eax
c001e742:	5a                   	pop    edx
c001e743:	6a 10                	push   0x10
c001e745:	53                   	push   ebx
c001e746:	e8 b8 47 ff ff       	call   c0012f03 <operator delete(void*, unsigned long)>
c001e74b:	83 c4 10             	add    esp,0x10
c001e74e:	83 ec 0c             	sub    esp,0xc
c001e751:	68 d6 c4 02 c0       	push   0xc002c4d6
c001e756:	e8 88 48 ff ff       	call   c0012fe3 <Dbg::kprintf(char const*, ...)>
c001e75b:	83 c4 10             	add    esp,0x10
c001e75e:	83 ec 08             	sub    esp,0x8
c001e761:	68 3f 07 00 00       	push   0x73f
c001e766:	68 e4 c4 02 c0       	push   0xc002c4e4
c001e76b:	e8 73 48 ff ff       	call   c0012fe3 <Dbg::kprintf(char const*, ...)>
c001e770:	83 c4 2c             	add    esp,0x2c
c001e773:	5b                   	pop    ebx
c001e774:	5e                   	pop    esi
c001e775:	5f                   	pop    edi
c001e776:	5d                   	pop    ebp
c001e777:	c3                   	ret    
c001e778:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e77c:	83 ec 0c             	sub    esp,0xc
c001e77f:	68 c0 c7 02 c0       	push   0xc002c7c0
c001e784:	e8 0c bf ff ff       	call   c001a695 <Krnl::panic(char const*)>
c001e789:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e78c:	83 c4 10             	add    esp,0x10
c001e78f:	89 f7                	mov    edi,esi
c001e791:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e795:	e9 8e fe ff ff       	jmp    c001e628 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e79a:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001e7a0:	39 82 26 05 00 00    	cmp    DWORD PTR [edx+0x526],eax
c001e7a6:	75 1c                	jne    c001e7c4 <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c001e7a8:	83 ec 0c             	sub    esp,0xc
c001e7ab:	68 28 c8 02 c0       	push   0xc002c828
c001e7b0:	e8 2e 48 ff ff       	call   c0012fe3 <Dbg::kprintf(char const*, ...)>
c001e7b5:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001e7bc:	e8 8f fb ff ff       	call   c001e350 <blockTask(TaskState)>
c001e7c1:	83 c4 10             	add    esp,0x10
c001e7c4:	83 ec 08             	sub    esp,0x8
c001e7c7:	56                   	push   esi
c001e7c8:	68 4c 1c 03 c0       	push   0xc0031c4c
c001e7cd:	e8 0e a4 00 00       	call   c0028be0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e7d2:	c7 04 24 4c 1c 03 c0 	mov    DWORD PTR [esp],0xc0031c4c
c001e7d9:	e8 30 a3 00 00       	call   c0028b0e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e7de:	83 c4 10             	add    esp,0x10
c001e7e1:	39 f8                	cmp    eax,edi
c001e7e3:	0f 84 1c ff ff ff    	je     c001e705 <cleanupTerminatedTask(ThreadControlBlock*)+0x184>
c001e7e9:	83 ec 0c             	sub    esp,0xc
c001e7ec:	68 4c 1c 03 c0       	push   0xc0031c4c
c001e7f1:	e8 18 a3 00 00       	call   c0028b0e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e7f6:	c7 04 24 4c 1c 03 c0 	mov    DWORD PTR [esp],0xc0031c4c
c001e7fd:	89 c6                	mov    esi,eax
c001e7ff:	e8 2e a3 00 00       	call   c0028b32 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e804:	83 c4 10             	add    esp,0x10
c001e807:	39 f3                	cmp    ebx,esi
c001e809:	74 b9                	je     c001e7c4 <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c001e80b:	8b 56 40             	mov    edx,DWORD PTR [esi+0x40]
c001e80e:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e811:	39 82 2a 05 00 00    	cmp    DWORD PTR [edx+0x52a],eax
c001e817:	75 ab                	jne    c001e7c4 <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c001e819:	e9 7c ff ff ff       	jmp    c001e79a <cleanupTerminatedTask(ThreadControlBlock*)+0x219>
c001e81e:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e822:	83 ec 0c             	sub    esp,0xc
c001e825:	68 f4 c7 02 c0       	push   0xc002c7f4
c001e82a:	e9 55 ff ff ff       	jmp    c001e784 <cleanupTerminatedTask(ThreadControlBlock*)+0x203>
c001e82f:	8b 36                	mov    esi,DWORD PTR [esi]
c001e831:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e835:	89 70 15             	mov    DWORD PTR [eax+0x15],esi
c001e838:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e83b:	8b b8 2a 05 00 00    	mov    edi,DWORD PTR [eax+0x52a]
c001e841:	01 d7                	add    edi,edx
c001e843:	89 f8                	mov    eax,edi
c001e845:	e9 44 fe ff ff       	jmp    c001e68e <cleanupTerminatedTask(ThreadControlBlock*)+0x10d>

c001e84a <cleanerTaskFunction(void*)>:
c001e84a:	53                   	push   ebx
c001e84b:	83 ec 08             	sub    esp,0x8
c001e84e:	e8 69 f6 ff ff       	call   c001debc <unlockScheduler()>
c001e853:	e8 62 f6 ff ff       	call   c001deba <lockScheduler()>
c001e858:	80 3d 10 1c 03 c0 00 	cmp    BYTE PTR ds:0xc0031c10,0x0
c001e85f:	0f 85 8e 00 00 00    	jne    c001e8f3 <cleanerTaskFunction(void*)+0xa9>
c001e865:	83 ec 0c             	sub    esp,0xc
c001e868:	6a 02                	push   0x2
c001e86a:	e8 9f fa ff ff       	call   c001e30e <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001e86f:	83 c4 10             	add    esp,0x10
c001e872:	c6 05 10 1c 03 c0 00 	mov    BYTE PTR ds:0xc0031c10,0x0
c001e879:	e8 63 f6 ff ff       	call   c001dee1 <lockStuff()>
c001e87e:	e8 37 f6 ff ff       	call   c001deba <lockScheduler()>
c001e883:	83 ec 0c             	sub    esp,0xc
c001e886:	68 34 1c 03 c0       	push   0xc0031c34
c001e88b:	e8 86 a2 00 00       	call   c0028b16 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001e890:	83 c4 10             	add    esp,0x10
c001e893:	84 c0                	test   al,al
c001e895:	75 40                	jne    c001e8d7 <cleanerTaskFunction(void*)+0x8d>
c001e897:	83 ec 0c             	sub    esp,0xc
c001e89a:	68 34 1c 03 c0       	push   0xc0031c34
c001e89f:	e8 6a a2 00 00       	call   c0028b0e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e8a4:	c7 04 24 34 1c 03 c0 	mov    DWORD PTR [esp],0xc0031c34
c001e8ab:	89 c3                	mov    ebx,eax
c001e8ad:	e8 80 a2 00 00       	call   c0028b32 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e8b2:	c7 04 24 fa c4 02 c0 	mov    DWORD PTR [esp],0xc002c4fa
c001e8b9:	e8 25 47 ff ff       	call   c0012fe3 <Dbg::kprintf(char const*, ...)>
c001e8be:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e8c1:	e8 bb fc ff ff       	call   c001e581 <cleanupTerminatedTask(ThreadControlBlock*)>
c001e8c6:	c7 04 24 13 c5 02 c0 	mov    DWORD PTR [esp],0xc002c513
c001e8cd:	e8 11 47 ff ff       	call   c0012fe3 <Dbg::kprintf(char const*, ...)>
c001e8d2:	83 c4 10             	add    esp,0x10
c001e8d5:	eb ac                	jmp    c001e883 <cleanerTaskFunction(void*)+0x39>
c001e8d7:	e8 e0 f5 ff ff       	call   c001debc <unlockScheduler()>
c001e8dc:	e8 9a f9 ff ff       	call   c001e27b <unlockStuff()>
c001e8e1:	e8 d4 f5 ff ff       	call   c001deba <lockScheduler()>
c001e8e6:	80 3d 10 1c 03 c0 00 	cmp    BYTE PTR ds:0xc0031c10,0x0
c001e8ed:	0f 84 72 ff ff ff    	je     c001e865 <cleanerTaskFunction(void*)+0x1b>
c001e8f3:	e8 c4 f5 ff ff       	call   c001debc <unlockScheduler()>
c001e8f8:	e9 75 ff ff ff       	jmp    c001e872 <cleanerTaskFunction(void*)+0x28>

c001e8fd <terminateTask(int)>:
c001e8fd:	83 ec 14             	sub    esp,0x14
c001e900:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e905:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001e908:	83 c0 0c             	add    eax,0xc
c001e90b:	50                   	push   eax
c001e90c:	68 50 c8 02 c0       	push   0xc002c850
c001e911:	e8 cd 46 ff ff       	call   c0012fe3 <Dbg::kprintf(char const*, ...)>
c001e916:	e8 c6 f5 ff ff       	call   c001dee1 <lockStuff()>
c001e91b:	e8 9a f5 ff ff       	call   c001deba <lockScheduler()>
c001e920:	c7 04 24 26 c5 02 c0 	mov    DWORD PTR [esp],0xc002c526
c001e927:	e8 b7 46 ff ff       	call   c0012fe3 <Dbg::kprintf(char const*, ...)>
c001e92c:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001e930:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e935:	89 50 55             	mov    DWORD PTR [eax+0x55],edx
c001e938:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e93d:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001e940:	5a                   	pop    edx
c001e941:	59                   	pop    ecx
c001e942:	50                   	push   eax
c001e943:	68 34 1c 03 c0       	push   0xc0031c34
c001e948:	e8 93 a2 00 00       	call   c0028be0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e94d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e952:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c001e959:	c7 04 24 40 c5 02 c0 	mov    DWORD PTR [esp],0xc002c540
c001e960:	e8 7e 46 ff ff       	call   c0012fe3 <Dbg::kprintf(char const*, ...)>
c001e965:	83 c4 10             	add    esp,0x10
c001e968:	a1 0c 1c 03 c0       	mov    eax,ds:0xc0031c0c
c001e96d:	85 c0                	test   eax,eax
c001e96f:	74 5a                	je     c001e9cb <terminateTask(int)+0xce>
c001e971:	83 ec 0c             	sub    esp,0xc
c001e974:	68 5a c5 02 c0       	push   0xc002c55a
c001e979:	e8 65 46 ff ff       	call   c0012fe3 <Dbg::kprintf(char const*, ...)>
c001e97e:	58                   	pop    eax
c001e97f:	c6 05 10 1c 03 c0 01 	mov    BYTE PTR ds:0xc0031c10,0x1
c001e986:	ff 35 0c 1c 03 c0    	push   DWORD PTR ds:0xc0031c0c
c001e98c:	e8 41 fb ff ff       	call   c001e4d2 <unblockTask(ThreadControlBlock*)>
c001e991:	c7 04 24 74 c5 02 c0 	mov    DWORD PTR [esp],0xc002c574
c001e998:	e8 46 46 ff ff       	call   c0012fe3 <Dbg::kprintf(char const*, ...)>
c001e99d:	83 c4 10             	add    esp,0x10
c001e9a0:	e8 17 f5 ff ff       	call   c001debc <unlockScheduler()>
c001e9a5:	e8 d1 f8 ff ff       	call   c001e27b <unlockStuff()>
c001e9aa:	83 ec 0c             	sub    esp,0xc
c001e9ad:	68 ac c5 02 c0       	push   0xc002c5ac
c001e9b2:	e8 2c 46 ff ff       	call   c0012fe3 <Dbg::kprintf(char const*, ...)>
c001e9b7:	83 c4 10             	add    esp,0x10
c001e9ba:	e8 fb f4 ff ff       	call   c001deba <lockScheduler()>
c001e9bf:	e8 32 f8 ff ff       	call   c001e1f6 <schedule()>
c001e9c4:	e8 f3 f4 ff ff       	call   c001debc <unlockScheduler()>
c001e9c9:	eb ef                	jmp    c001e9ba <terminateTask(int)+0xbd>
c001e9cb:	83 ec 0c             	sub    esp,0xc
c001e9ce:	68 8e c5 02 c0       	push   0xc002c58e
c001e9d3:	e8 0b 46 ff ff       	call   c0012fe3 <Dbg::kprintf(char const*, ...)>
c001e9d8:	83 c4 10             	add    esp,0x10
c001e9db:	eb c3                	jmp    c001e9a0 <terminateTask(int)+0xa3>

c001e9dd <Thr::terminateFromIRQ(int)>:
c001e9dd:	83 ec 18             	sub    esp,0x18
c001e9e0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e9e4:	e8 14 ff ff ff       	call   c001e8fd <terminateTask(int)>
c001e9e9:	90                   	nop

c001e9ea <Semaphore::release()>:
c001e9ea:	83 ec 0c             	sub    esp,0xc
c001e9ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e9f1:	e8 eb f4 ff ff       	call   c001dee1 <lockStuff()>
c001e9f6:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001e9f9:	85 d2                	test   edx,edx
c001e9fb:	74 1a                	je     c001ea17 <Semaphore::release()+0x2d>
c001e9fd:	8b 4a 20             	mov    ecx,DWORD PTR [edx+0x20]
c001ea00:	83 ec 0c             	sub    esp,0xc
c001ea03:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c001ea06:	52                   	push   edx
c001ea07:	e8 c6 fa ff ff       	call   c001e4d2 <unblockTask(ThreadControlBlock*)>
c001ea0c:	83 c4 10             	add    esp,0x10
c001ea0f:	83 c4 0c             	add    esp,0xc
c001ea12:	e9 64 f8 ff ff       	jmp    c001e27b <unlockStuff()>
c001ea17:	ff 48 0c             	dec    DWORD PTR [eax+0xc]
c001ea1a:	83 c4 0c             	add    esp,0xc
c001ea1d:	e9 59 f8 ff ff       	jmp    c001e27b <unlockStuff()>

c001ea22 <__static_initialization_and_destruction_0(int, int)>:
c001ea22:	83 ec 0c             	sub    esp,0xc
c001ea25:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001ea2a:	0f 85 88 00 00 00    	jne    c001eab8 <__static_initialization_and_destruction_0(int, int)+0x96>
c001ea30:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001ea38:	75 7e                	jne    c001eab8 <__static_initialization_and_destruction_0(int, int)+0x96>
c001ea3a:	83 ec 0c             	sub    esp,0xc
c001ea3d:	68 4c 1c 03 c0       	push   0xc0031c4c
c001ea42:	e8 49 a3 00 00       	call   c0028d90 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001ea47:	83 c4 10             	add    esp,0x10
c001ea4a:	83 ec 04             	sub    esp,0x4
c001ea4d:	68 08 d6 02 c0       	push   0xc002d608
c001ea52:	68 4c 1c 03 c0       	push   0xc0031c4c
c001ea57:	68 50 8d 02 c0       	push   0xc0028d50
c001ea5c:	e8 1c 44 ff ff       	call   c0012e7d <__cxa_atexit>
c001ea61:	83 c4 10             	add    esp,0x10
c001ea64:	83 ec 0c             	sub    esp,0xc
c001ea67:	68 40 1c 03 c0       	push   0xc0031c40
c001ea6c:	e8 1f a3 00 00       	call   c0028d90 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001ea71:	83 c4 10             	add    esp,0x10
c001ea74:	83 ec 04             	sub    esp,0x4
c001ea77:	68 08 d6 02 c0       	push   0xc002d608
c001ea7c:	68 40 1c 03 c0       	push   0xc0031c40
c001ea81:	68 50 8d 02 c0       	push   0xc0028d50
c001ea86:	e8 f2 43 ff ff       	call   c0012e7d <__cxa_atexit>
c001ea8b:	83 c4 10             	add    esp,0x10
c001ea8e:	83 ec 0c             	sub    esp,0xc
c001ea91:	68 34 1c 03 c0       	push   0xc0031c34
c001ea96:	e8 f5 a2 00 00       	call   c0028d90 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001ea9b:	83 c4 10             	add    esp,0x10
c001ea9e:	83 ec 04             	sub    esp,0x4
c001eaa1:	68 08 d6 02 c0       	push   0xc002d608
c001eaa6:	68 34 1c 03 c0       	push   0xc0031c34
c001eaab:	68 50 8d 02 c0       	push   0xc0028d50
c001eab0:	e8 c8 43 ff ff       	call   c0012e7d <__cxa_atexit>
c001eab5:	83 c4 10             	add    esp,0x10
c001eab8:	90                   	nop
c001eab9:	83 c4 0c             	add    esp,0xc
c001eabc:	c3                   	ret    

c001eabd <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c001eabd:	83 ec 0c             	sub    esp,0xc
c001eac0:	83 ec 08             	sub    esp,0x8
c001eac3:	68 ff ff 00 00       	push   0xffff
c001eac8:	6a 01                	push   0x1
c001eaca:	e8 53 ff ff ff       	call   c001ea22 <__static_initialization_and_destruction_0(int, int)>
c001eacf:	83 c4 10             	add    esp,0x10
c001ead2:	83 c4 0c             	add    esp,0xc
c001ead5:	c3                   	ret    

c001ead6 <Vm::inbv(unsigned short)>:
c001ead6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001eada:	66 81 fa fe fe       	cmp    dx,0xfefe
c001eadf:	75 06                	jne    c001eae7 <Vm::inbv(unsigned short)+0x11>
c001eae1:	a0 8c 1c 03 c0       	mov    al,ds:0xc0031c8c
c001eae6:	c3                   	ret    
c001eae7:	ec                   	in     al,dx
c001eae8:	c3                   	ret    

c001eae9 <Vm::outbv(unsigned short, unsigned char)>:
c001eae9:	53                   	push   ebx
c001eaea:	83 ec 08             	sub    esp,0x8
c001eaed:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001eaf1:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001eaf5:	66 81 fa fe fe       	cmp    dx,0xfefe
c001eafa:	75 38                	jne    c001eb34 <Vm::outbv(unsigned short, unsigned char)+0x4b>
c001eafc:	0f b6 c3             	movzx  eax,bl
c001eaff:	51                   	push   ecx
c001eb00:	51                   	push   ecx
c001eb01:	50                   	push   eax
c001eb02:	68 6f c8 02 c0       	push   0xc002c86f
c001eb07:	e8 d7 44 ff ff       	call   c0012fe3 <Dbg::kprintf(char const*, ...)>
c001eb0c:	8b 15 8c 1c 03 c0    	mov    edx,DWORD PTR ds:0xc0031c8c
c001eb12:	83 c4 10             	add    esp,0x10
c001eb15:	8d 42 01             	lea    eax,[edx+0x1]
c001eb18:	88 9a a0 1c 03 c0    	mov    BYTE PTR [edx-0x3ffce360],bl
c001eb1e:	a3 8c 1c 03 c0       	mov    ds:0xc0031c8c,eax
c001eb23:	83 f8 20             	cmp    eax,0x20
c001eb26:	75 0f                	jne    c001eb37 <Vm::outbv(unsigned short, unsigned char)+0x4e>
c001eb28:	c7 05 8c 1c 03 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc0031c8c,0x1f
c001eb32:	eb 03                	jmp    c001eb37 <Vm::outbv(unsigned short, unsigned char)+0x4e>
c001eb34:	88 d8                	mov    al,bl
c001eb36:	ee                   	out    dx,al
c001eb37:	83 c4 08             	add    esp,0x8
c001eb3a:	5b                   	pop    ebx
c001eb3b:	c3                   	ret    

c001eb3c <Vm::realToLinear(unsigned short, unsigned short)>:
c001eb3c:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001eb41:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001eb46:	c1 e0 04             	shl    eax,0x4
c001eb49:	01 d0                	add    eax,edx
c001eb4b:	c3                   	ret    

c001eb4c <Vm::getSegment(unsigned int)>:
c001eb4c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001eb50:	c1 e8 10             	shr    eax,0x10
c001eb53:	c3                   	ret    

c001eb54 <Vm::getOffset(unsigned int)>:
c001eb54:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001eb58:	c3                   	ret    

c001eb59 <Vm::mainloop2()>:
c001eb59:	83 ec 0c             	sub    esp,0xc
c001eb5c:	e8 59 f3 ff ff       	call   c001deba <lockScheduler()>
c001eb61:	83 ec 0c             	sub    esp,0xc
c001eb64:	c6 05 85 1c 03 c0 01 	mov    BYTE PTR ds:0xc0031c85,0x1
c001eb6b:	6a 02                	push   0x2
c001eb6d:	e8 9c f7 ff ff       	call   c001e30e <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001eb72:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001eb77:	0f b7 50 5f          	movzx  edx,WORD PTR [eax+0x5f]
c001eb7b:	52                   	push   edx
c001eb7c:	0f b7 50 5d          	movzx  edx,WORD PTR [eax+0x5d]
c001eb80:	52                   	push   edx
c001eb81:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c001eb85:	52                   	push   edx
c001eb86:	0f b7 40 59          	movzx  eax,WORD PTR [eax+0x59]
c001eb8a:	50                   	push   eax
c001eb8b:	e8 6a 17 fe ff       	call   c00002fa <goToVM86>
c001eb90:	83 c4 2c             	add    esp,0x2c
c001eb93:	c3                   	ret    

c001eb94 <Vm::mainVm8086Loop(void*)>:
c001eb94:	83 ec 0c             	sub    esp,0xc
c001eb97:	e8 20 f3 ff ff       	call   c001debc <unlockScheduler()>
c001eb9c:	83 c4 0c             	add    esp,0xc
c001eb9f:	eb b8                	jmp    c001eb59 <Vm::mainloop2()>

c001eba1 <Vm::mainloop3(unsigned long)>:
c001eba1:	53                   	push   ebx
c001eba2:	83 ec 08             	sub    esp,0x8
c001eba5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001eba9:	e8 0c f3 ff ff       	call   c001deba <lockScheduler()>
c001ebae:	83 ec 0c             	sub    esp,0xc
c001ebb1:	89 1d 80 1c 03 c0    	mov    DWORD PTR ds:0xc0031c80,ebx
c001ebb7:	6a 02                	push   0x2
c001ebb9:	c6 05 84 1c 03 c0 01 	mov    BYTE PTR ds:0xc0031c84,0x1
c001ebc0:	e8 49 f7 ff ff       	call   c001e30e <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001ebc5:	83 c4 18             	add    esp,0x18
c001ebc8:	5b                   	pop    ebx
c001ebc9:	eb 8e                	jmp    c001eb59 <Vm::mainloop2()>

c001ebcb <Vm::initialise8086()>:
c001ebcb:	83 ec 0c             	sub    esp,0xc
c001ebce:	68 80 00 00 00       	push   0x80
c001ebd3:	6a 00                	push   0x0
c001ebd5:	68 94 eb 01 c0       	push   0xc001eb94
c001ebda:	ff 35 58 1c 03 c0    	push   DWORD PTR ds:0xc0031c58
c001ebe0:	e8 07 f4 ff ff       	call   c001dfec <Process::createThread(void (*)(void*), void*, int)>
c001ebe5:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c001ebec:	a3 88 1c 03 c0       	mov    ds:0xc0031c88,eax
c001ebf1:	68 00 01 00 00       	push   0x100
c001ebf6:	a1 58 1c 03 c0       	mov    eax,ds:0xc0031c58
c001ebfb:	6a 00                	push   0x0
c001ebfd:	6a 00                	push   0x0
c001ebff:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001ec05:	e8 e4 3a ff ff       	call   c00126ee <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001ec0a:	83 c4 2c             	add    esp,0x2c
c001ec0d:	c3                   	ret    

c001ec0e <Vm::finish8086()>:
c001ec0e:	53                   	push   ebx
c001ec0f:	83 ec 08             	sub    esp,0x8
c001ec12:	e8 a3 f2 ff ff       	call   c001deba <lockScheduler()>
c001ec17:	80 3d 84 1c 03 c0 00 	cmp    BYTE PTR ds:0xc0031c84,0x0
c001ec1e:	75 0c                	jne    c001ec2c <Vm::finish8086()+0x1e>
c001ec20:	e8 d1 f5 ff ff       	call   c001e1f6 <schedule()>
c001ec25:	e8 92 f2 ff ff       	call   c001debc <unlockScheduler()>
c001ec2a:	eb e6                	jmp    c001ec12 <Vm::finish8086()+0x4>
c001ec2c:	83 ec 0c             	sub    esp,0xc
c001ec2f:	8b 1d 80 1c 03 c0    	mov    ebx,DWORD PTR ds:0xc0031c80
c001ec35:	ff 35 88 1c 03 c0    	push   DWORD PTR ds:0xc0031c88
c001ec3b:	c6 05 84 1c 03 c0 00 	mov    BYTE PTR ds:0xc0031c84,0x0
c001ec42:	e8 8b f8 ff ff       	call   c001e4d2 <unblockTask(ThreadControlBlock*)>
c001ec47:	e8 70 f2 ff ff       	call   c001debc <unlockScheduler()>
c001ec4c:	89 d8                	mov    eax,ebx
c001ec4e:	83 c4 18             	add    esp,0x18
c001ec51:	5b                   	pop    ebx
c001ec52:	c3                   	ret    

c001ec53 <Vm::getOutput8086(unsigned char*)>:
c001ec53:	83 ec 10             	sub    esp,0x10
c001ec56:	ff 35 8c 1c 03 c0    	push   DWORD PTR ds:0xc0031c8c
c001ec5c:	68 a0 1c 03 c0       	push   0xc0031ca0
c001ec61:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ec65:	e8 da 1a fe ff       	call   c0000744 <memcpy>
c001ec6a:	a1 8c 1c 03 c0       	mov    eax,ds:0xc0031c8c
c001ec6f:	c7 05 8c 1c 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0031c8c,0x0
c001ec79:	83 c4 1c             	add    esp,0x1c
c001ec7c:	c3                   	ret    

c001ec7d <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c001ec7d:	55                   	push   ebp
c001ec7e:	57                   	push   edi
c001ec7f:	56                   	push   esi
c001ec80:	53                   	push   ebx
c001ec81:	83 ec 2c             	sub    esp,0x2c
c001ec84:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001ec88:	8b 5c 24 48          	mov    ebx,DWORD PTR [esp+0x48]
c001ec8c:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c001ec90:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c001ec94:	e8 21 f2 ff ff       	call   c001deba <lockScheduler()>
c001ec99:	a0 85 1c 03 c0       	mov    al,ds:0xc0031c85
c001ec9e:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001eca2:	84 c0                	test   al,al
c001eca4:	75 0c                	jne    c001ecb2 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x35>
c001eca6:	e8 4b f5 ff ff       	call   c001e1f6 <schedule()>
c001ecab:	e8 0c f2 ff ff       	call   c001debc <unlockScheduler()>
c001ecb0:	eb e2                	jmp    c001ec94 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c001ecb2:	a1 88 1c 03 c0       	mov    eax,ds:0xc0031c88
c001ecb7:	c7 05 8c 1c 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0031c8c,0x0
c001ecc1:	66 89 78 5f          	mov    WORD PTR [eax+0x5f],di
c001ecc5:	66 89 70 59          	mov    WORD PTR [eax+0x59],si
c001ecc9:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c001eccd:	66 89 68 5d          	mov    WORD PTR [eax+0x5d],bp
c001ecd1:	c6 40 62 01          	mov    BYTE PTR [eax+0x62],0x1
c001ecd5:	50                   	push   eax
c001ecd6:	6a 20                	push   0x20
c001ecd8:	6a 00                	push   0x0
c001ecda:	68 a0 1c 03 c0       	push   0xc0031ca0
c001ecdf:	e8 94 1a fe ff       	call   c0000778 <memset>
c001ece4:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001eceb:	e8 f4 0b ff ff       	call   c000f8e4 <malloc>
c001ecf0:	83 c4 0c             	add    esp,0xc
c001ecf3:	89 c7                	mov    edi,eax
c001ecf5:	ff 35 58 1c 03 c0    	push   DWORD PTR ds:0xc0031c58
c001ecfb:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001ecff:	50                   	push   eax
c001ed00:	e8 37 48 ff ff       	call   c001353c <File::File(char const*, Process*)>
c001ed05:	83 c4 10             	add    esp,0x10
c001ed08:	85 ff                	test   edi,edi
c001ed0a:	75 0a                	jne    c001ed16 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x99>
c001ed0c:	83 ec 0c             	sub    esp,0xc
c001ed0f:	68 8b c8 02 c0       	push   0xc002c88b
c001ed14:	eb 27                	jmp    c001ed3d <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xc0>
c001ed16:	50                   	push   eax
c001ed17:	8d 44 24 17          	lea    eax,[esp+0x17]
c001ed1b:	50                   	push   eax
c001ed1c:	8d 44 24 20          	lea    eax,[esp+0x20]
c001ed20:	50                   	push   eax
c001ed21:	57                   	push   edi
c001ed22:	e8 25 4b ff ff       	call   c001384c <File::stat(unsigned long long*, bool*)>
c001ed27:	0f b6 6c 24 23       	movzx  ebp,BYTE PTR [esp+0x23]
c001ed2c:	83 c4 10             	add    esp,0x10
c001ed2f:	89 e8                	mov    eax,ebp
c001ed31:	84 c0                	test   al,al
c001ed33:	74 19                	je     c001ed4e <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd1>
c001ed35:	83 ec 0c             	sub    esp,0xc
c001ed38:	68 9f c8 02 c0       	push   0xc002c89f
c001ed3d:	e8 53 b9 ff ff       	call   c001a695 <Krnl::panic(char const*)>
c001ed42:	31 ed                	xor    ebp,ebp
c001ed44:	e8 73 f1 ff ff       	call   c001debc <unlockScheduler()>
c001ed49:	83 c4 10             	add    esp,0x10
c001ed4c:	eb 75                	jmp    c001edc3 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x146>
c001ed4e:	50                   	push   eax
c001ed4f:	50                   	push   eax
c001ed50:	6a 01                	push   0x1
c001ed52:	57                   	push   edi
c001ed53:	e8 48 48 ff ff       	call   c00135a0 <File::open(FileOpenMode)>
c001ed58:	83 c4 10             	add    esp,0x10
c001ed5b:	85 c0                	test   eax,eax
c001ed5d:	74 17                	je     c001ed76 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xf9>
c001ed5f:	83 ec 0c             	sub    esp,0xc
c001ed62:	68 b8 c8 02 c0       	push   0xc002c8b8
c001ed67:	e8 29 b9 ff ff       	call   c001a695 <Krnl::panic(char const*)>
c001ed6c:	e8 4b f1 ff ff       	call   c001debc <unlockScheduler()>
c001ed71:	83 c4 10             	add    esp,0x10
c001ed74:	eb 4d                	jmp    c001edc3 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x146>
c001ed76:	0f b7 f6             	movzx  esi,si
c001ed79:	50                   	push   eax
c001ed7a:	0f b7 db             	movzx  ebx,bx
c001ed7d:	50                   	push   eax
c001ed7e:	56                   	push   esi
c001ed7f:	53                   	push   ebx
c001ed80:	e8 b7 fd ff ff       	call   c001eb3c <Vm::realToLinear(unsigned short, unsigned short)>
c001ed85:	5a                   	pop    edx
c001ed86:	8b 17                	mov    edx,DWORD PTR [edi]
c001ed88:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001ed8c:	51                   	push   ecx
c001ed8d:	50                   	push   eax
c001ed8e:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001ed92:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001ed96:	57                   	push   edi
c001ed97:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001ed9a:	83 c4 14             	add    esp,0x14
c001ed9d:	57                   	push   edi
c001ed9e:	e8 5b 48 ff ff       	call   c00135fe <File::close()>
c001eda3:	c6 05 85 1c 03 c0 00 	mov    BYTE PTR ds:0xc0031c85,0x0
c001edaa:	e8 0d f1 ff ff       	call   c001debc <unlockScheduler()>
c001edaf:	59                   	pop    ecx
c001edb0:	ff 35 88 1c 03 c0    	push   DWORD PTR ds:0xc0031c88
c001edb6:	e8 17 f7 ff ff       	call   c001e4d2 <unblockTask(ThreadControlBlock*)>
c001edbb:	83 c4 10             	add    esp,0x10
c001edbe:	0f b6 6c 24 0f       	movzx  ebp,BYTE PTR [esp+0xf]
c001edc3:	83 c4 2c             	add    esp,0x2c
c001edc6:	89 e8                	mov    eax,ebp
c001edc8:	5b                   	pop    ebx
c001edc9:	5e                   	pop    esi
c001edca:	5f                   	pop    edi
c001edcb:	5d                   	pop    ebp
c001edcc:	c3                   	ret    

c001edcd <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c001edcd:	57                   	push   edi
c001edce:	56                   	push   esi
c001edcf:	53                   	push   ebx
c001edd0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001edd4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001edd8:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001eddc:	83 e8 06             	sub    eax,0x6
c001eddf:	0f b7 c0             	movzx  eax,ax
c001ede2:	50                   	push   eax
c001ede3:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c001ede8:	50                   	push   eax
c001ede9:	e8 4e fd ff ff       	call   c001eb3c <Vm::realToLinear(unsigned short, unsigned short)>
c001edee:	5a                   	pop    edx
c001edef:	5e                   	pop    esi
c001edf0:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c001edf3:	8d 56 fa             	lea    edx,[esi-0x6]
c001edf6:	81 e2 ff ff 00 00    	and    edx,0xffff
c001edfc:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c001edff:	8b 51 38             	mov    edx,DWORD PTR [ecx+0x38]
c001ee02:	83 c2 02             	add    edx,0x2
c001ee05:	66 89 10             	mov    WORD PTR [eax],dx
c001ee08:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c001ee0b:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c001ee0f:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c001ee12:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c001ee16:	89 d6                	mov    esi,edx
c001ee18:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c001ee1e:	66 81 e6 ff fd       	and    si,0xfdff
c001ee23:	80 7f 61 00          	cmp    BYTE PTR [edi+0x61],0x0
c001ee27:	74 07                	je     c001ee30 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x63>
c001ee29:	89 d6                	mov    esi,edx
c001ee2b:	66 81 ce 00 02       	or     si,0x200
c001ee30:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c001ee34:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ee39:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001ee3d:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c001ee45:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c001ee48:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c001ee50:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c001ee53:	5b                   	pop    ebx
c001ee54:	5e                   	pop    esi
c001ee55:	5f                   	pop    edi
c001ee56:	c3                   	ret    

c001ee57 <Vm::readByteFromReal(unsigned short, unsigned short)>:
c001ee57:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001ee5c:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001ee61:	c1 e0 04             	shl    eax,0x4
c001ee64:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c001ee67:	c3                   	ret    

c001ee68 <Vm::readWordFromReal(unsigned short, unsigned short)>:
c001ee68:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001ee6d:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001ee72:	c1 e0 04             	shl    eax,0x4
c001ee75:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c001ee79:	c3                   	ret    

c001ee7a <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c001ee7a:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001ee7f:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001ee84:	c1 e0 04             	shl    eax,0x4
c001ee87:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c001ee8a:	c3                   	ret    

c001ee8b <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c001ee8b:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001ee90:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001ee95:	c1 e0 04             	shl    eax,0x4
c001ee98:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001ee9c:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c001ee9f:	c3                   	ret    

c001eea0 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c001eea0:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001eea5:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001eeaa:	c1 e0 04             	shl    eax,0x4
c001eead:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001eeb1:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c001eeb5:	c3                   	ret    

c001eeb6 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c001eeb6:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001eebb:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001eec0:	c1 e0 04             	shl    eax,0x4
c001eec3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001eec7:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c001eeca:	c3                   	ret    

c001eecb <Vm::faultHandler(regs*)>:
c001eecb:	55                   	push   ebp
c001eecc:	57                   	push   edi
c001eecd:	56                   	push   esi
c001eece:	53                   	push   ebx
c001eecf:	83 ec 1c             	sub    esp,0x1c
c001eed2:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001eed6:	8b 4f 38             	mov    ecx,DWORD PTR [edi+0x38]
c001eed9:	8b 5f 3c             	mov    ebx,DWORD PTR [edi+0x3c]
c001eedc:	0f b7 c1             	movzx  eax,cx
c001eedf:	50                   	push   eax
c001eee0:	0f b7 c3             	movzx  eax,bx
c001eee3:	c1 e3 04             	shl    ebx,0x4
c001eee6:	50                   	push   eax
c001eee7:	e8 50 fc ff ff       	call   c001eb3c <Vm::realToLinear(unsigned short, unsigned short)>
c001eeec:	5a                   	pop    edx
c001eeed:	89 c5                	mov    ebp,eax
c001eeef:	5e                   	pop    esi
c001eef0:	0f b7 47 44          	movzx  eax,WORD PTR [edi+0x44]
c001eef4:	50                   	push   eax
c001eef5:	0f b7 47 48          	movzx  eax,WORD PTR [edi+0x48]
c001eef9:	50                   	push   eax
c001eefa:	e8 3d fc ff ff       	call   c001eb3c <Vm::realToLinear(unsigned short, unsigned short)>
c001eeff:	01 cb                	add    ebx,ecx
c001ef01:	89 c6                	mov    esi,eax
c001ef03:	0f b6 45 02          	movzx  eax,BYTE PTR [ebp+0x2]
c001ef07:	50                   	push   eax
c001ef08:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ef0c:	50                   	push   eax
c001ef0d:	0f b6 45 00          	movzx  eax,BYTE PTR [ebp+0x0]
c001ef11:	50                   	push   eax
c001ef12:	55                   	push   ebp
c001ef13:	53                   	push   ebx
c001ef14:	b3 06                	mov    bl,0x6
c001ef16:	68 d1 c8 02 c0       	push   0xc002c8d1
c001ef1b:	e8 c3 40 ff ff       	call   c0012fe3 <Dbg::kprintf(char const*, ...)>
c001ef20:	83 c4 20             	add    esp,0x20
c001ef23:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c001ef28:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c001ef2d:	0f b6 45 00          	movzx  eax,BYTE PTR [ebp+0x0]
c001ef31:	3c 9d                	cmp    al,0x9d
c001ef33:	0f 84 d7 02 00 00    	je     c001f210 <Vm::faultHandler(regs*)+0x345>
c001ef39:	0f 87 a3 00 00 00    	ja     c001efe2 <Vm::faultHandler(regs*)+0x117>
c001ef3f:	3c 66                	cmp    al,0x66
c001ef41:	0f 84 15 02 00 00    	je     c001f15c <Vm::faultHandler(regs*)+0x291>
c001ef47:	77 5f                	ja     c001efa8 <Vm::faultHandler(regs*)+0xdd>
c001ef49:	3c 36                	cmp    al,0x36
c001ef4b:	0f 84 f1 01 00 00    	je     c001f142 <Vm::faultHandler(regs*)+0x277>
c001ef51:	77 28                	ja     c001ef7b <Vm::faultHandler(regs*)+0xb0>
c001ef53:	3c 26                	cmp    al,0x26
c001ef55:	0f 84 99 01 00 00    	je     c001f0f4 <Vm::faultHandler(regs*)+0x229>
c001ef5b:	3c 2e                	cmp    al,0x2e
c001ef5d:	0f 85 3b 07 00 00    	jne    c001f69e <Vm::faultHandler(regs*)+0x7d3>
c001ef63:	83 ec 0c             	sub    esp,0xc
c001ef66:	31 db                	xor    ebx,ebx
c001ef68:	68 e6 c8 02 c0       	push   0xc002c8e6
c001ef6d:	e8 71 40 ff ff       	call   c0012fe3 <Dbg::kprintf(char const*, ...)>
c001ef72:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001ef75:	83 c4 10             	add    esp,0x10
c001ef78:	45                   	inc    ebp
c001ef79:	eb b2                	jmp    c001ef2d <Vm::faultHandler(regs*)+0x62>
c001ef7b:	3c 64                	cmp    al,0x64
c001ef7d:	0f 84 8b 01 00 00    	je     c001f10e <Vm::faultHandler(regs*)+0x243>
c001ef83:	0f 87 9f 01 00 00    	ja     c001f128 <Vm::faultHandler(regs*)+0x25d>
c001ef89:	3c 3e                	cmp    al,0x3e
c001ef8b:	0f 85 0d 07 00 00    	jne    c001f69e <Vm::faultHandler(regs*)+0x7d3>
c001ef91:	83 ec 0c             	sub    esp,0xc
c001ef94:	b3 01                	mov    bl,0x1
c001ef96:	68 ea c8 02 c0       	push   0xc002c8ea
c001ef9b:	e8 43 40 ff ff       	call   c0012fe3 <Dbg::kprintf(char const*, ...)>
c001efa0:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001efa3:	83 c4 10             	add    esp,0x10
c001efa6:	eb d0                	jmp    c001ef78 <Vm::faultHandler(regs*)+0xad>
c001efa8:	3c 6d                	cmp    al,0x6d
c001efaa:	0f 84 af 03 00 00    	je     c001f35f <Vm::faultHandler(regs*)+0x494>
c001efb0:	77 15                	ja     c001efc7 <Vm::faultHandler(regs*)+0xfc>
c001efb2:	3c 67                	cmp    al,0x67
c001efb4:	0f 84 bf 01 00 00    	je     c001f179 <Vm::faultHandler(regs*)+0x2ae>
c001efba:	3c 6c                	cmp    al,0x6c
c001efbc:	0f 84 3f 03 00 00    	je     c001f301 <Vm::faultHandler(regs*)+0x436>
c001efc2:	e9 d7 06 00 00       	jmp    c001f69e <Vm::faultHandler(regs*)+0x7d3>
c001efc7:	3c 6f                	cmp    al,0x6f
c001efc9:	0f 84 a4 04 00 00    	je     c001f473 <Vm::faultHandler(regs*)+0x5a8>
c001efcf:	0f 82 11 04 00 00    	jb     c001f3e6 <Vm::faultHandler(regs*)+0x51b>
c001efd5:	3c 9c                	cmp    al,0x9c
c001efd7:	0f 84 ba 01 00 00    	je     c001f197 <Vm::faultHandler(regs*)+0x2cc>
c001efdd:	e9 bc 06 00 00       	jmp    c001f69e <Vm::faultHandler(regs*)+0x7d3>
c001efe2:	3c ec                	cmp    al,0xec
c001efe4:	0f 84 24 06 00 00    	je     c001f60e <Vm::faultHandler(regs*)+0x743>
c001efea:	0f 87 93 00 00 00    	ja     c001f083 <Vm::faultHandler(regs*)+0x1b8>
c001eff0:	3c e4                	cmp    al,0xe4
c001eff2:	0f 84 5c 05 00 00    	je     c001f554 <Vm::faultHandler(regs*)+0x689>
c001eff8:	77 6a                	ja     c001f064 <Vm::faultHandler(regs*)+0x199>
c001effa:	3c cd                	cmp    al,0xcd
c001effc:	0f 84 7e 02 00 00    	je     c001f280 <Vm::faultHandler(regs*)+0x3b5>
c001f002:	3c cf                	cmp    al,0xcf
c001f004:	0f 85 94 06 00 00    	jne    c001f69e <Vm::faultHandler(regs*)+0x7d3>
c001f00a:	83 ec 0c             	sub    esp,0xc
c001f00d:	68 2e c9 02 c0       	push   0xc002c92e
c001f012:	e8 cc 3f ff ff       	call   c0012fe3 <Dbg::kprintf(char const*, ...)>
c001f017:	0f b7 16             	movzx  edx,WORD PTR [esi]
c001f01a:	89 57 38             	mov    DWORD PTR [edi+0x38],edx
c001f01d:	0f b7 5e 02          	movzx  ebx,WORD PTR [esi+0x2]
c001f021:	89 5f 3c             	mov    DWORD PTR [edi+0x3c],ebx
c001f024:	0f b7 46 04          	movzx  eax,WORD PTR [esi+0x4]
c001f028:	0d 00 02 02 00       	or     eax,0x20200
c001f02d:	89 47 40             	mov    DWORD PTR [edi+0x40],eax
c001f030:	56                   	push   esi
c001f031:	53                   	push   ebx
c001f032:	52                   	push   edx
c001f033:	68 34 c9 02 c0       	push   0xc002c934
c001f038:	e8 a6 3f ff ff       	call   c0012fe3 <Dbg::kprintf(char const*, ...)>
c001f03d:	66 8b 46 04          	mov    ax,WORD PTR [esi+0x4]
c001f041:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001f047:	66 c1 e8 09          	shr    ax,0x9
c001f04b:	83 e0 01             	and    eax,0x1
c001f04e:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001f051:	8b 47 44             	mov    eax,DWORD PTR [edi+0x44]
c001f054:	83 c0 06             	add    eax,0x6
c001f057:	25 ff ff 00 00       	and    eax,0xffff
c001f05c:	89 47 44             	mov    DWORD PTR [edi+0x44],eax
c001f05f:	e9 95 02 00 00       	jmp    c001f2f9 <Vm::faultHandler(regs*)+0x42e>
c001f064:	3c e6                	cmp    al,0xe6
c001f066:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c001f06a:	0f 84 4e 05 00 00    	je     c001f5be <Vm::faultHandler(regs*)+0x6f3>
c001f070:	0f 82 0a 05 00 00    	jb     c001f580 <Vm::faultHandler(regs*)+0x6b5>
c001f076:	3c e7                	cmp    al,0xe7
c001f078:	0f 84 69 05 00 00    	je     c001f5e7 <Vm::faultHandler(regs*)+0x71c>
c001f07e:	e9 1b 06 00 00       	jmp    c001f69e <Vm::faultHandler(regs*)+0x7d3>
c001f083:	3c ef                	cmp    al,0xef
c001f085:	0f 84 e6 05 00 00    	je     c001f671 <Vm::faultHandler(regs*)+0x7a6>
c001f08b:	77 37                	ja     c001f0c4 <Vm::faultHandler(regs*)+0x1f9>
c001f08d:	3c ed                	cmp    al,0xed
c001f08f:	0f 84 a3 05 00 00    	je     c001f638 <Vm::faultHandler(regs*)+0x76d>
c001f095:	3c ee                	cmp    al,0xee
c001f097:	0f 85 01 06 00 00    	jne    c001f69e <Vm::faultHandler(regs*)+0x7d3>
c001f09d:	52                   	push   edx
c001f09e:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001f0a1:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001f0a4:	68 cf c9 02 c0       	push   0xc002c9cf
c001f0a9:	e8 35 3f ff ff       	call   c0012fe3 <Dbg::kprintf(char const*, ...)>
c001f0ae:	59                   	pop    ecx
c001f0af:	0f b6 47 2c          	movzx  eax,BYTE PTR [edi+0x2c]
c001f0b3:	5b                   	pop    ebx
c001f0b4:	50                   	push   eax
c001f0b5:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001f0b9:	50                   	push   eax
c001f0ba:	e8 2a fa ff ff       	call   c001eae9 <Vm::outbv(unsigned short, unsigned char)>
c001f0bf:	e9 a5 05 00 00       	jmp    c001f669 <Vm::faultHandler(regs*)+0x79e>
c001f0c4:	3c fa                	cmp    al,0xfa
c001f0c6:	0f 84 f7 01 00 00    	je     c001f2c3 <Vm::faultHandler(regs*)+0x3f8>
c001f0cc:	3c fb                	cmp    al,0xfb
c001f0ce:	0f 84 0a 02 00 00    	je     c001f2de <Vm::faultHandler(regs*)+0x413>
c001f0d4:	3c f3                	cmp    al,0xf3
c001f0d6:	0f 85 c2 05 00 00    	jne    c001f69e <Vm::faultHandler(regs*)+0x7d3>
c001f0dc:	83 ec 0c             	sub    esp,0xc
c001f0df:	68 07 c9 02 c0       	push   0xc002c907
c001f0e4:	e8 fa 3e ff ff       	call   c0012fe3 <Dbg::kprintf(char const*, ...)>
c001f0e9:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f0ec:	83 c4 10             	add    esp,0x10
c001f0ef:	e9 84 fe ff ff       	jmp    c001ef78 <Vm::faultHandler(regs*)+0xad>
c001f0f4:	83 ec 0c             	sub    esp,0xc
c001f0f7:	b3 02                	mov    bl,0x2
c001f0f9:	68 e2 c8 02 c0       	push   0xc002c8e2
c001f0fe:	e8 e0 3e ff ff       	call   c0012fe3 <Dbg::kprintf(char const*, ...)>
c001f103:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f106:	83 c4 10             	add    esp,0x10
c001f109:	e9 6a fe ff ff       	jmp    c001ef78 <Vm::faultHandler(regs*)+0xad>
c001f10e:	83 ec 0c             	sub    esp,0xc
c001f111:	b3 03                	mov    bl,0x3
c001f113:	68 ee c8 02 c0       	push   0xc002c8ee
c001f118:	e8 c6 3e ff ff       	call   c0012fe3 <Dbg::kprintf(char const*, ...)>
c001f11d:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f120:	83 c4 10             	add    esp,0x10
c001f123:	e9 50 fe ff ff       	jmp    c001ef78 <Vm::faultHandler(regs*)+0xad>
c001f128:	83 ec 0c             	sub    esp,0xc
c001f12b:	b3 04                	mov    bl,0x4
c001f12d:	68 f2 c8 02 c0       	push   0xc002c8f2
c001f132:	e8 ac 3e ff ff       	call   c0012fe3 <Dbg::kprintf(char const*, ...)>
c001f137:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f13a:	83 c4 10             	add    esp,0x10
c001f13d:	e9 36 fe ff ff       	jmp    c001ef78 <Vm::faultHandler(regs*)+0xad>
c001f142:	83 ec 0c             	sub    esp,0xc
c001f145:	b3 05                	mov    bl,0x5
c001f147:	68 f6 c8 02 c0       	push   0xc002c8f6
c001f14c:	e8 92 3e ff ff       	call   c0012fe3 <Dbg::kprintf(char const*, ...)>
c001f151:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f154:	83 c4 10             	add    esp,0x10
c001f157:	e9 1c fe ff ff       	jmp    c001ef78 <Vm::faultHandler(regs*)+0xad>
c001f15c:	83 ec 0c             	sub    esp,0xc
c001f15f:	68 fa c8 02 c0       	push   0xc002c8fa
c001f164:	e8 7a 3e ff ff       	call   c0012fe3 <Dbg::kprintf(char const*, ...)>
c001f169:	83 c4 10             	add    esp,0x10
c001f16c:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f16f:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c001f174:	e9 ff fd ff ff       	jmp    c001ef78 <Vm::faultHandler(regs*)+0xad>
c001f179:	50                   	push   eax
c001f17a:	50                   	push   eax
c001f17b:	6a 01                	push   0x1
c001f17d:	68 ff c8 02 c0       	push   0xc002c8ff
c001f182:	e8 5c 3e ff ff       	call   c0012fe3 <Dbg::kprintf(char const*, ...)>
c001f187:	83 c4 10             	add    esp,0x10
c001f18a:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f18d:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c001f192:	e9 e1 fd ff ff       	jmp    c001ef78 <Vm::faultHandler(regs*)+0xad>
c001f197:	83 ec 0c             	sub    esp,0xc
c001f19a:	68 0d c9 02 c0       	push   0xc002c90d
c001f19f:	e8 3f 3e ff ff       	call   c0012fe3 <Dbg::kprintf(char const*, ...)>
c001f1a4:	83 c4 10             	add    esp,0x10
c001f1a7:	8b 57 44             	mov    edx,DWORD PTR [edi+0x44]
c001f1aa:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f1af:	8b 47 40             	mov    eax,DWORD PTR [edi+0x40]
c001f1b2:	74 2f                	je     c001f1e3 <Vm::faultHandler(regs*)+0x318>
c001f1b4:	83 ea 04             	sub    edx,0x4
c001f1b7:	25 ff 0d 00 00       	and    eax,0xdff
c001f1bc:	81 e2 ff ff 00 00    	and    edx,0xffff
c001f1c2:	89 57 44             	mov    DWORD PTR [edi+0x44],edx
c001f1c5:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c001f1c8:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001f1ce:	80 7a 61 00          	cmp    BYTE PTR [edx+0x61],0x0
c001f1d2:	0f 84 bf 04 00 00    	je     c001f697 <Vm::faultHandler(regs*)+0x7cc>
c001f1d8:	80 cc 02             	or     ah,0x2
c001f1db:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c001f1de:	e9 b4 04 00 00       	jmp    c001f697 <Vm::faultHandler(regs*)+0x7cc>
c001f1e3:	83 ea 02             	sub    edx,0x2
c001f1e6:	81 e2 ff ff 00 00    	and    edx,0xffff
c001f1ec:	89 57 44             	mov    DWORD PTR [edi+0x44],edx
c001f1ef:	66 89 46 fe          	mov    WORD PTR [esi-0x2],ax
c001f1f3:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001f1f9:	80 7a 61 00          	cmp    BYTE PTR [edx+0x61],0x0
c001f1fd:	74 05                	je     c001f204 <Vm::faultHandler(regs*)+0x339>
c001f1ff:	80 cc 02             	or     ah,0x2
c001f202:	eb 03                	jmp    c001f207 <Vm::faultHandler(regs*)+0x33c>
c001f204:	80 e4 fd             	and    ah,0xfd
c001f207:	66 89 46 fe          	mov    WORD PTR [esi-0x2],ax
c001f20b:	e9 87 04 00 00       	jmp    c001f697 <Vm::faultHandler(regs*)+0x7cc>
c001f210:	83 ec 0c             	sub    esp,0xc
c001f213:	68 14 c9 02 c0       	push   0xc002c914
c001f218:	e8 c6 3d ff ff       	call   c0012fe3 <Dbg::kprintf(char const*, ...)>
c001f21d:	83 c4 10             	add    esp,0x10
c001f220:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f225:	74 28                	je     c001f24f <Vm::faultHandler(regs*)+0x384>
c001f227:	8b 06                	mov    eax,DWORD PTR [esi]
c001f229:	25 ff 0d 00 00       	and    eax,0xdff
c001f22e:	0d 00 02 02 00       	or     eax,0x20200
c001f233:	89 47 40             	mov    DWORD PTR [edi+0x40],eax
c001f236:	8b 06                	mov    eax,DWORD PTR [esi]
c001f238:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001f23e:	c1 e8 09             	shr    eax,0x9
c001f241:	83 e0 01             	and    eax,0x1
c001f244:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001f247:	8b 47 44             	mov    eax,DWORD PTR [edi+0x44]
c001f24a:	83 c0 04             	add    eax,0x4
c001f24d:	eb 24                	jmp    c001f273 <Vm::faultHandler(regs*)+0x3a8>
c001f24f:	0f b7 06             	movzx  eax,WORD PTR [esi]
c001f252:	0d 00 02 02 00       	or     eax,0x20200
c001f257:	89 47 40             	mov    DWORD PTR [edi+0x40],eax
c001f25a:	66 8b 06             	mov    ax,WORD PTR [esi]
c001f25d:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001f263:	66 c1 e8 09          	shr    ax,0x9
c001f267:	83 e0 01             	and    eax,0x1
c001f26a:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001f26d:	8b 47 44             	mov    eax,DWORD PTR [edi+0x44]
c001f270:	83 c0 02             	add    eax,0x2
c001f273:	25 ff ff 00 00       	and    eax,0xffff
c001f278:	89 47 44             	mov    DWORD PTR [edi+0x44],eax
c001f27b:	e9 17 04 00 00       	jmp    c001f697 <Vm::faultHandler(regs*)+0x7cc>
c001f280:	53                   	push   ebx
c001f281:	53                   	push   ebx
c001f282:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f286:	50                   	push   eax
c001f287:	68 1a c9 02 c0       	push   0xc002c91a
c001f28c:	e8 52 3d ff ff       	call   c0012fe3 <Dbg::kprintf(char const*, ...)>
c001f291:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f295:	83 c4 10             	add    esp,0x10
c001f298:	3c ee                	cmp    al,0xee
c001f29a:	75 10                	jne    c001f2ac <Vm::faultHandler(regs*)+0x3e1>
c001f29c:	83 ec 0c             	sub    esp,0xc
c001f29f:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001f2a2:	e8 fa f8 ff ff       	call   c001eba1 <Vm::mainloop3(unsigned long)>
c001f2a7:	e9 c0 03 00 00       	jmp    c001f66c <Vm::faultHandler(regs*)+0x7a1>
c001f2ac:	0f b7 5f 44          	movzx  ebx,WORD PTR [edi+0x44]
c001f2b0:	83 ec 0c             	sub    esp,0xc
c001f2b3:	53                   	push   ebx
c001f2b4:	0f b7 5f 48          	movzx  ebx,WORD PTR [edi+0x48]
c001f2b8:	53                   	push   ebx
c001f2b9:	55                   	push   ebp
c001f2ba:	50                   	push   eax
c001f2bb:	57                   	push   edi
c001f2bc:	e8 0c fb ff ff       	call   c001edcd <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c001f2c1:	eb 36                	jmp    c001f2f9 <Vm::faultHandler(regs*)+0x42e>
c001f2c3:	83 ec 0c             	sub    esp,0xc
c001f2c6:	68 24 c9 02 c0       	push   0xc002c924
c001f2cb:	e8 13 3d ff ff       	call   c0012fe3 <Dbg::kprintf(char const*, ...)>
c001f2d0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001f2d5:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001f2d9:	e9 8b 03 00 00       	jmp    c001f669 <Vm::faultHandler(regs*)+0x79e>
c001f2de:	83 ec 0c             	sub    esp,0xc
c001f2e1:	68 29 c9 02 c0       	push   0xc002c929
c001f2e6:	e8 f8 3c ff ff       	call   c0012fe3 <Dbg::kprintf(char const*, ...)>
c001f2eb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001f2f0:	c6 40 61 01          	mov    BYTE PTR [eax+0x61],0x1
c001f2f4:	e9 70 03 00 00       	jmp    c001f669 <Vm::faultHandler(regs*)+0x79e>
c001f2f9:	83 c4 20             	add    esp,0x20
c001f2fc:	e9 99 03 00 00       	jmp    c001f69a <Vm::faultHandler(regs*)+0x7cf>
c001f301:	83 ec 0c             	sub    esp,0xc
c001f304:	68 67 c9 02 c0       	push   0xc002c967
c001f309:	e8 d5 3c ff ff       	call   c0012fe3 <Dbg::kprintf(char const*, ...)>
c001f30e:	83 c4 10             	add    esp,0x10
c001f311:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c001f314:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001f319:	74 0d                	je     c001f328 <Vm::faultHandler(regs*)+0x45d>
c001f31b:	81 7f 10 ff ff 00 00 	cmp    DWORD PTR [edi+0x10],0xffff
c001f322:	0f 87 9e 01 00 00    	ja     c001f4c6 <Vm::faultHandler(regs*)+0x5fb>
c001f328:	83 ec 0c             	sub    esp,0xc
c001f32b:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001f32f:	0f b7 db             	movzx  ebx,bx
c001f332:	50                   	push   eax
c001f333:	e8 9e f7 ff ff       	call   c001ead6 <Vm::inbv(unsigned short)>
c001f338:	83 c4 0c             	add    esp,0xc
c001f33b:	0f b6 c0             	movzx  eax,al
c001f33e:	50                   	push   eax
c001f33f:	0f b7 47 10          	movzx  eax,WORD PTR [edi+0x10]
c001f343:	50                   	push   eax
c001f344:	53                   	push   ebx
c001f345:	e8 41 fb ff ff       	call   c001ee8b <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c001f34a:	83 c4 10             	add    esp,0x10
c001f34d:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001f350:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001f354:	74 03                	je     c001f359 <Vm::faultHandler(regs*)+0x48e>
c001f356:	48                   	dec    eax
c001f357:	eb 01                	jmp    c001f35a <Vm::faultHandler(regs*)+0x48f>
c001f359:	40                   	inc    eax
c001f35a:	0f b7 c0             	movzx  eax,ax
c001f35d:	eb 7f                	jmp    c001f3de <Vm::faultHandler(regs*)+0x513>
c001f35f:	83 ec 0c             	sub    esp,0xc
c001f362:	68 99 c9 02 c0       	push   0xc002c999
c001f367:	e8 77 3c ff ff       	call   c0012fe3 <Dbg::kprintf(char const*, ...)>
c001f36c:	83 c4 10             	add    esp,0x10
c001f36f:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c001f372:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001f377:	74 0d                	je     c001f386 <Vm::faultHandler(regs*)+0x4bb>
c001f379:	81 7f 10 ff ff 00 00 	cmp    DWORD PTR [edi+0x10],0xffff
c001f380:	0f 87 40 01 00 00    	ja     c001f4c6 <Vm::faultHandler(regs*)+0x5fb>
c001f386:	8b 57 24             	mov    edx,DWORD PTR [edi+0x24]
c001f389:	0f b7 77 10          	movzx  esi,WORD PTR [edi+0x10]
c001f38d:	0f b7 db             	movzx  ebx,bx
c001f390:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f395:	74 20                	je     c001f3b7 <Vm::faultHandler(regs*)+0x4ec>
c001f397:	ed                   	in     eax,dx
c001f398:	51                   	push   ecx
c001f399:	50                   	push   eax
c001f39a:	56                   	push   esi
c001f39b:	53                   	push   ebx
c001f39c:	e8 15 fb ff ff       	call   c001eeb6 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c001f3a1:	83 c4 10             	add    esp,0x10
c001f3a4:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001f3a7:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001f3ab:	74 05                	je     c001f3b2 <Vm::faultHandler(regs*)+0x4e7>
c001f3ad:	83 e8 04             	sub    eax,0x4
c001f3b0:	eb 27                	jmp    c001f3d9 <Vm::faultHandler(regs*)+0x50e>
c001f3b2:	83 c0 04             	add    eax,0x4
c001f3b5:	eb 22                	jmp    c001f3d9 <Vm::faultHandler(regs*)+0x50e>
c001f3b7:	66 ed                	in     ax,dx
c001f3b9:	0f b7 c0             	movzx  eax,ax
c001f3bc:	52                   	push   edx
c001f3bd:	50                   	push   eax
c001f3be:	56                   	push   esi
c001f3bf:	53                   	push   ebx
c001f3c0:	e8 db fa ff ff       	call   c001eea0 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c001f3c5:	83 c4 10             	add    esp,0x10
c001f3c8:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001f3cb:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001f3cf:	74 05                	je     c001f3d6 <Vm::faultHandler(regs*)+0x50b>
c001f3d1:	83 e8 02             	sub    eax,0x2
c001f3d4:	eb 03                	jmp    c001f3d9 <Vm::faultHandler(regs*)+0x50e>
c001f3d6:	83 c0 02             	add    eax,0x2
c001f3d9:	25 ff ff 00 00       	and    eax,0xffff
c001f3de:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c001f3e1:	e9 b1 02 00 00       	jmp    c001f697 <Vm::faultHandler(regs*)+0x7cc>
c001f3e6:	83 ec 0c             	sub    esp,0xc
c001f3e9:	4b                   	dec    ebx
c001f3ea:	68 9f c9 02 c0       	push   0xc002c99f
c001f3ef:	e8 ef 3b ff ff       	call   c0012fe3 <Dbg::kprintf(char const*, ...)>
c001f3f4:	83 c4 10             	add    esp,0x10
c001f3f7:	80 fb 05             	cmp    bl,0x5
c001f3fa:	77 0a                	ja     c001f406 <Vm::faultHandler(regs*)+0x53b>
c001f3fc:	0f b6 db             	movzx  ebx,bl
c001f3ff:	ff 24 9d 10 ca 02 c0 	jmp    DWORD PTR [ebx*4-0x3ffd35f0]
c001f406:	0f b7 47 3c          	movzx  eax,WORD PTR [edi+0x3c]
c001f40a:	eb 1b                	jmp    c001f427 <Vm::faultHandler(regs*)+0x55c>
c001f40c:	0f b7 47 0c          	movzx  eax,WORD PTR [edi+0xc]
c001f410:	eb 15                	jmp    c001f427 <Vm::faultHandler(regs*)+0x55c>
c001f412:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c001f416:	eb 0f                	jmp    c001f427 <Vm::faultHandler(regs*)+0x55c>
c001f418:	0f b7 47 04          	movzx  eax,WORD PTR [edi+0x4]
c001f41c:	eb 09                	jmp    c001f427 <Vm::faultHandler(regs*)+0x55c>
c001f41e:	0f b7 07             	movzx  eax,WORD PTR [edi]
c001f421:	eb 04                	jmp    c001f427 <Vm::faultHandler(regs*)+0x55c>
c001f423:	0f b7 47 48          	movzx  eax,WORD PTR [edi+0x48]
c001f427:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001f42c:	74 0d                	je     c001f43b <Vm::faultHandler(regs*)+0x570>
c001f42e:	81 7f 14 ff ff 00 00 	cmp    DWORD PTR [edi+0x14],0xffff
c001f435:	0f 87 8b 00 00 00    	ja     c001f4c6 <Vm::faultHandler(regs*)+0x5fb>
c001f43b:	53                   	push   ebx
c001f43c:	53                   	push   ebx
c001f43d:	0f b7 57 14          	movzx  edx,WORD PTR [edi+0x14]
c001f441:	52                   	push   edx
c001f442:	50                   	push   eax
c001f443:	e8 0f fa ff ff       	call   c001ee57 <Vm::readByteFromReal(unsigned short, unsigned short)>
c001f448:	5e                   	pop    esi
c001f449:	0f b6 c0             	movzx  eax,al
c001f44c:	5d                   	pop    ebp
c001f44d:	50                   	push   eax
c001f44e:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001f452:	50                   	push   eax
c001f453:	e8 91 f6 ff ff       	call   c001eae9 <Vm::outbv(unsigned short, unsigned char)>
c001f458:	83 c4 10             	add    esp,0x10
c001f45b:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001f45e:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001f462:	74 03                	je     c001f467 <Vm::faultHandler(regs*)+0x59c>
c001f464:	48                   	dec    eax
c001f465:	eb 01                	jmp    c001f468 <Vm::faultHandler(regs*)+0x59d>
c001f467:	40                   	inc    eax
c001f468:	0f b7 c0             	movzx  eax,ax
c001f46b:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c001f46e:	e9 24 02 00 00       	jmp    c001f697 <Vm::faultHandler(regs*)+0x7cc>
c001f473:	83 ec 0c             	sub    esp,0xc
c001f476:	4b                   	dec    ebx
c001f477:	68 9f c9 02 c0       	push   0xc002c99f
c001f47c:	e8 62 3b ff ff       	call   c0012fe3 <Dbg::kprintf(char const*, ...)>
c001f481:	83 c4 10             	add    esp,0x10
c001f484:	80 fb 05             	cmp    bl,0x5
c001f487:	77 0a                	ja     c001f493 <Vm::faultHandler(regs*)+0x5c8>
c001f489:	0f b6 db             	movzx  ebx,bl
c001f48c:	ff 24 9d 28 ca 02 c0 	jmp    DWORD PTR [ebx*4-0x3ffd35d8]
c001f493:	0f b7 47 3c          	movzx  eax,WORD PTR [edi+0x3c]
c001f497:	eb 1b                	jmp    c001f4b4 <Vm::faultHandler(regs*)+0x5e9>
c001f499:	0f b7 47 0c          	movzx  eax,WORD PTR [edi+0xc]
c001f49d:	eb 15                	jmp    c001f4b4 <Vm::faultHandler(regs*)+0x5e9>
c001f49f:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c001f4a3:	eb 0f                	jmp    c001f4b4 <Vm::faultHandler(regs*)+0x5e9>
c001f4a5:	0f b7 47 04          	movzx  eax,WORD PTR [edi+0x4]
c001f4a9:	eb 09                	jmp    c001f4b4 <Vm::faultHandler(regs*)+0x5e9>
c001f4ab:	0f b7 07             	movzx  eax,WORD PTR [edi]
c001f4ae:	eb 04                	jmp    c001f4b4 <Vm::faultHandler(regs*)+0x5e9>
c001f4b0:	0f b7 47 48          	movzx  eax,WORD PTR [edi+0x48]
c001f4b4:	8b 5f 14             	mov    ebx,DWORD PTR [edi+0x14]
c001f4b7:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001f4bc:	74 39                	je     c001f4f7 <Vm::faultHandler(regs*)+0x62c>
c001f4be:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c001f4c4:	76 31                	jbe    c001f4f7 <Vm::faultHandler(regs*)+0x62c>
c001f4c6:	0f b6 4d 05          	movzx  ecx,BYTE PTR [ebp+0x5]
c001f4ca:	0f b6 45 00          	movzx  eax,BYTE PTR [ebp+0x0]
c001f4ce:	51                   	push   ecx
c001f4cf:	0f b6 4d 04          	movzx  ecx,BYTE PTR [ebp+0x4]
c001f4d3:	51                   	push   ecx
c001f4d4:	0f b6 4d 03          	movzx  ecx,BYTE PTR [ebp+0x3]
c001f4d8:	51                   	push   ecx
c001f4d9:	0f b6 4d 02          	movzx  ecx,BYTE PTR [ebp+0x2]
c001f4dd:	51                   	push   ecx
c001f4de:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001f4e2:	52                   	push   edx
c001f4e3:	50                   	push   eax
c001f4e4:	50                   	push   eax
c001f4e5:	68 6c c9 02 c0       	push   0xc002c96c
c001f4ea:	e8 f4 3a ff ff       	call   c0012fe3 <Dbg::kprintf(char const*, ...)>
c001f4ef:	83 c4 20             	add    esp,0x20
c001f4f2:	e9 fb 01 00 00       	jmp    c001f6f2 <Vm::faultHandler(regs*)+0x827>
c001f4f7:	8b 77 40             	mov    esi,DWORD PTR [edi+0x40]
c001f4fa:	0f b7 d3             	movzx  edx,bx
c001f4fd:	81 e6 00 04 00 00    	and    esi,0x400
c001f503:	8b 6f 24             	mov    ebp,DWORD PTR [edi+0x24]
c001f506:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f50b:	74 1d                	je     c001f52a <Vm::faultHandler(regs*)+0x65f>
c001f50d:	51                   	push   ecx
c001f50e:	51                   	push   ecx
c001f50f:	52                   	push   edx
c001f510:	50                   	push   eax
c001f511:	e8 64 f9 ff ff       	call   c001ee7a <Vm::readDwordFromReal(unsigned short, unsigned short)>
c001f516:	83 c4 10             	add    esp,0x10
c001f519:	89 ea                	mov    edx,ebp
c001f51b:	ef                   	out    dx,eax
c001f51c:	85 f6                	test   esi,esi
c001f51e:	74 05                	je     c001f525 <Vm::faultHandler(regs*)+0x65a>
c001f520:	83 eb 04             	sub    ebx,0x4
c001f523:	eb 21                	jmp    c001f546 <Vm::faultHandler(regs*)+0x67b>
c001f525:	83 c3 04             	add    ebx,0x4
c001f528:	eb 1c                	jmp    c001f546 <Vm::faultHandler(regs*)+0x67b>
c001f52a:	51                   	push   ecx
c001f52b:	51                   	push   ecx
c001f52c:	52                   	push   edx
c001f52d:	50                   	push   eax
c001f52e:	e8 35 f9 ff ff       	call   c001ee68 <Vm::readWordFromReal(unsigned short, unsigned short)>
c001f533:	83 c4 10             	add    esp,0x10
c001f536:	89 ea                	mov    edx,ebp
c001f538:	66 ef                	out    dx,ax
c001f53a:	85 f6                	test   esi,esi
c001f53c:	74 05                	je     c001f543 <Vm::faultHandler(regs*)+0x678>
c001f53e:	83 eb 02             	sub    ebx,0x2
c001f541:	eb 03                	jmp    c001f546 <Vm::faultHandler(regs*)+0x67b>
c001f543:	83 c3 02             	add    ebx,0x2
c001f546:	81 e3 ff ff 00 00    	and    ebx,0xffff
c001f54c:	89 5f 14             	mov    DWORD PTR [edi+0x14],ebx
c001f54f:	e9 43 01 00 00       	jmp    c001f697 <Vm::faultHandler(regs*)+0x7cc>
c001f554:	53                   	push   ebx
c001f555:	53                   	push   ebx
c001f556:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f55a:	50                   	push   eax
c001f55b:	68 a5 c9 02 c0       	push   0xc002c9a5
c001f560:	e8 7e 3a ff ff       	call   c0012fe3 <Dbg::kprintf(char const*, ...)>
c001f565:	81 67 2c 00 ff ff ff 	and    DWORD PTR [edi+0x2c],0xffffff00
c001f56c:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f570:	89 04 24             	mov    DWORD PTR [esp],eax
c001f573:	e8 5e f5 ff ff       	call   c001ead6 <Vm::inbv(unsigned short)>
c001f578:	0f b6 c0             	movzx  eax,al
c001f57b:	09 47 2c             	or     DWORD PTR [edi+0x2c],eax
c001f57e:	eb 5e                	jmp    c001f5de <Vm::faultHandler(regs*)+0x713>
c001f580:	51                   	push   ecx
c001f581:	51                   	push   ecx
c001f582:	53                   	push   ebx
c001f583:	68 ab c9 02 c0       	push   0xc002c9ab
c001f588:	e8 56 3a ff ff       	call   c0012fe3 <Dbg::kprintf(char const*, ...)>
c001f58d:	83 c4 10             	add    esp,0x10
c001f590:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f595:	74 07                	je     c001f59e <Vm::faultHandler(regs*)+0x6d3>
c001f597:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001f59b:	ed                   	in     eax,dx
c001f59c:	eb 14                	jmp    c001f5b2 <Vm::faultHandler(regs*)+0x6e7>
c001f59e:	8b 5f 2c             	mov    ebx,DWORD PTR [edi+0x2c]
c001f5a1:	66 31 db             	xor    bx,bx
c001f5a4:	89 5f 2c             	mov    DWORD PTR [edi+0x2c],ebx
c001f5a7:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001f5ab:	66 ed                	in     ax,dx
c001f5ad:	0f b7 c0             	movzx  eax,ax
c001f5b0:	09 d8                	or     eax,ebx
c001f5b2:	89 47 2c             	mov    DWORD PTR [edi+0x2c],eax
c001f5b5:	83 47 38 02          	add    DWORD PTR [edi+0x38],0x2
c001f5b9:	e9 dc 00 00 00       	jmp    c001f69a <Vm::faultHandler(regs*)+0x7cf>
c001f5be:	50                   	push   eax
c001f5bf:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001f5c2:	53                   	push   ebx
c001f5c3:	68 b1 c9 02 c0       	push   0xc002c9b1
c001f5c8:	e8 16 3a ff ff       	call   c0012fe3 <Dbg::kprintf(char const*, ...)>
c001f5cd:	58                   	pop    eax
c001f5ce:	0f b6 47 2c          	movzx  eax,BYTE PTR [edi+0x2c]
c001f5d2:	5a                   	pop    edx
c001f5d3:	50                   	push   eax
c001f5d4:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f5d8:	50                   	push   eax
c001f5d9:	e8 0b f5 ff ff       	call   c001eae9 <Vm::outbv(unsigned short, unsigned char)>
c001f5de:	83 47 38 02          	add    DWORD PTR [edi+0x38],0x2
c001f5e2:	e9 85 00 00 00       	jmp    c001f66c <Vm::faultHandler(regs*)+0x7a1>
c001f5e7:	50                   	push   eax
c001f5e8:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001f5eb:	53                   	push   ebx
c001f5ec:	68 ba c9 02 c0       	push   0xc002c9ba
c001f5f1:	e8 ed 39 ff ff       	call   c0012fe3 <Dbg::kprintf(char const*, ...)>
c001f5f6:	83 c4 10             	add    esp,0x10
c001f5f9:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001f5fd:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f602:	8b 47 2c             	mov    eax,DWORD PTR [edi+0x2c]
c001f605:	74 03                	je     c001f60a <Vm::faultHandler(regs*)+0x73f>
c001f607:	ef                   	out    dx,eax
c001f608:	eb ab                	jmp    c001f5b5 <Vm::faultHandler(regs*)+0x6ea>
c001f60a:	66 ef                	out    dx,ax
c001f60c:	eb a7                	jmp    c001f5b5 <Vm::faultHandler(regs*)+0x6ea>
c001f60e:	55                   	push   ebp
c001f60f:	55                   	push   ebp
c001f610:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001f613:	68 c3 c9 02 c0       	push   0xc002c9c3
c001f618:	e8 c6 39 ff ff       	call   c0012fe3 <Dbg::kprintf(char const*, ...)>
c001f61d:	81 67 2c 00 ff ff ff 	and    DWORD PTR [edi+0x2c],0xffffff00
c001f624:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001f628:	89 04 24             	mov    DWORD PTR [esp],eax
c001f62b:	e8 a6 f4 ff ff       	call   c001ead6 <Vm::inbv(unsigned short)>
c001f630:	0f b6 c0             	movzx  eax,al
c001f633:	09 47 2c             	or     DWORD PTR [edi+0x2c],eax
c001f636:	eb 31                	jmp    c001f669 <Vm::faultHandler(regs*)+0x79e>
c001f638:	56                   	push   esi
c001f639:	56                   	push   esi
c001f63a:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001f63d:	68 c9 c9 02 c0       	push   0xc002c9c9
c001f642:	e8 9c 39 ff ff       	call   c0012fe3 <Dbg::kprintf(char const*, ...)>
c001f647:	83 c4 10             	add    esp,0x10
c001f64a:	8b 57 24             	mov    edx,DWORD PTR [edi+0x24]
c001f64d:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f652:	74 03                	je     c001f657 <Vm::faultHandler(regs*)+0x78c>
c001f654:	ed                   	in     eax,dx
c001f655:	eb 0d                	jmp    c001f664 <Vm::faultHandler(regs*)+0x799>
c001f657:	66 ed                	in     ax,dx
c001f659:	8b 57 2c             	mov    edx,DWORD PTR [edi+0x2c]
c001f65c:	0f b7 c0             	movzx  eax,ax
c001f65f:	66 31 d2             	xor    dx,dx
c001f662:	09 d0                	or     eax,edx
c001f664:	89 47 2c             	mov    DWORD PTR [edi+0x2c],eax
c001f667:	eb 2e                	jmp    c001f697 <Vm::faultHandler(regs*)+0x7cc>
c001f669:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f66c:	83 c4 10             	add    esp,0x10
c001f66f:	eb 29                	jmp    c001f69a <Vm::faultHandler(regs*)+0x7cf>
c001f671:	50                   	push   eax
c001f672:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001f675:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001f678:	68 d8 c9 02 c0       	push   0xc002c9d8
c001f67d:	e8 61 39 ff ff       	call   c0012fe3 <Dbg::kprintf(char const*, ...)>
c001f682:	83 c4 10             	add    esp,0x10
c001f685:	8b 57 24             	mov    edx,DWORD PTR [edi+0x24]
c001f688:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f68d:	8b 47 2c             	mov    eax,DWORD PTR [edi+0x2c]
c001f690:	74 03                	je     c001f695 <Vm::faultHandler(regs*)+0x7ca>
c001f692:	ef                   	out    dx,eax
c001f693:	eb 02                	jmp    c001f697 <Vm::faultHandler(regs*)+0x7cc>
c001f695:	66 ef                	out    dx,ax
c001f697:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f69a:	b0 01                	mov    al,0x1
c001f69c:	eb 56                	jmp    c001f6f4 <Vm::faultHandler(regs*)+0x829>
c001f69e:	0f b6 4d 05          	movzx  ecx,BYTE PTR [ebp+0x5]
c001f6a2:	51                   	push   ecx
c001f6a3:	0f b6 4d 04          	movzx  ecx,BYTE PTR [ebp+0x4]
c001f6a7:	51                   	push   ecx
c001f6a8:	0f b6 4d 03          	movzx  ecx,BYTE PTR [ebp+0x3]
c001f6ac:	51                   	push   ecx
c001f6ad:	0f b6 4d 02          	movzx  ecx,BYTE PTR [ebp+0x2]
c001f6b1:	51                   	push   ecx
c001f6b2:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001f6b6:	52                   	push   edx
c001f6b7:	50                   	push   eax
c001f6b8:	50                   	push   eax
c001f6b9:	68 e1 c9 02 c0       	push   0xc002c9e1
c001f6be:	e8 20 39 ff ff       	call   c0012fe3 <Dbg::kprintf(char const*, ...)>
c001f6c3:	83 c4 20             	add    esp,0x20
c001f6c6:	83 ec 0c             	sub    esp,0xc
c001f6c9:	6a 60                	push   0x60
c001f6cb:	e8 06 f4 ff ff       	call   c001ead6 <Vm::inbv(unsigned short)>
c001f6d0:	83 c4 10             	add    esp,0x10
c001f6d3:	3c 1c                	cmp    al,0x1c
c001f6d5:	74 04                	je     c001f6db <Vm::faultHandler(regs*)+0x810>
c001f6d7:	3c 5a                	cmp    al,0x5a
c001f6d9:	75 eb                	jne    c001f6c6 <Vm::faultHandler(regs*)+0x7fb>
c001f6db:	3c 1c                	cmp    al,0x1c
c001f6dd:	74 04                	je     c001f6e3 <Vm::faultHandler(regs*)+0x818>
c001f6df:	3c 5a                	cmp    al,0x5a
c001f6e1:	75 0f                	jne    c001f6f2 <Vm::faultHandler(regs*)+0x827>
c001f6e3:	83 ec 0c             	sub    esp,0xc
c001f6e6:	6a 60                	push   0x60
c001f6e8:	e8 e9 f3 ff ff       	call   c001ead6 <Vm::inbv(unsigned short)>
c001f6ed:	83 c4 10             	add    esp,0x10
c001f6f0:	eb e9                	jmp    c001f6db <Vm::faultHandler(regs*)+0x810>
c001f6f2:	31 c0                	xor    eax,eax
c001f6f4:	83 c4 1c             	add    esp,0x1c
c001f6f7:	5b                   	pop    ebx
c001f6f8:	5e                   	pop    esi
c001f6f9:	5f                   	pop    edi
c001f6fa:	5d                   	pop    ebp
c001f6fb:	c3                   	ret    

c001f6fc <Vm::fpuInternalTo32(unsigned long long)>:
c001f6fc:	57                   	push   edi
c001f6fd:	56                   	push   esi
c001f6fe:	53                   	push   ebx
c001f6ff:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f703:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f707:	89 d6                	mov    esi,edx
c001f709:	89 d7                	mov    edi,edx
c001f70b:	89 c1                	mov    ecx,eax
c001f70d:	c1 ef 14             	shr    edi,0x14
c001f710:	89 d3                	mov    ebx,edx
c001f712:	81 e7 ff 07 00 00    	and    edi,0x7ff
c001f718:	31 d2                	xor    edx,edx
c001f71a:	89 f8                	mov    eax,edi
c001f71c:	81 e6 00 00 00 80    	and    esi,0x80000000
c001f722:	bf ff 00 00 00       	mov    edi,0xff
c001f727:	05 80 fc ff ff       	add    eax,0xfffffc80
c001f72c:	83 d2 ff             	adc    edx,0xffffffff
c001f72f:	39 c7                	cmp    edi,eax
c001f731:	bf 00 00 00 00       	mov    edi,0x0
c001f736:	19 d7                	sbb    edi,edx
c001f738:	72 15                	jb     c001f74f <Vm::fpuInternalTo32(unsigned long long)+0x53>
c001f73a:	0f ac d9 1d          	shrd   ecx,ebx,0x1d
c001f73e:	c1 e0 17             	shl    eax,0x17
c001f741:	81 e1 ff ff 7f 00    	and    ecx,0x7fffff
c001f747:	09 f1                	or     ecx,esi
c001f749:	09 c1                	or     ecx,eax
c001f74b:	89 cf                	mov    edi,ecx
c001f74d:	eb 02                	jmp    c001f751 <Vm::fpuInternalTo32(unsigned long long)+0x55>
c001f74f:	31 ff                	xor    edi,edi
c001f751:	89 f8                	mov    eax,edi
c001f753:	5b                   	pop    ebx
c001f754:	5e                   	pop    esi
c001f755:	5f                   	pop    edi
c001f756:	c3                   	ret    

c001f757 <Vm::fpuInternalTo64(unsigned long long)>:
c001f757:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f75b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f75f:	c3                   	ret    

c001f760 <Vm::fpu32ToInternal(unsigned int)>:
c001f760:	57                   	push   edi
c001f761:	31 ff                	xor    edi,edi
c001f763:	56                   	push   esi
c001f764:	53                   	push   ebx
c001f765:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f769:	89 cb                	mov    ebx,ecx
c001f76b:	89 ce                	mov    esi,ecx
c001f76d:	81 e3 00 00 00 80    	and    ebx,0x80000000
c001f773:	81 e6 ff ff 7f 00    	and    esi,0x7fffff
c001f779:	c1 e9 17             	shr    ecx,0x17
c001f77c:	89 f0                	mov    eax,esi
c001f77e:	0f b6 d1             	movzx  edx,cl
c001f781:	81 c2 80 03 00 00    	add    edx,0x380
c001f787:	89 d1                	mov    ecx,edx
c001f789:	89 fa                	mov    edx,edi
c001f78b:	c1 e1 14             	shl    ecx,0x14
c001f78e:	0f a4 c2 1d          	shld   edx,eax,0x1d
c001f792:	c1 e0 1d             	shl    eax,0x1d
c001f795:	89 d7                	mov    edi,edx
c001f797:	89 c6                	mov    esi,eax
c001f799:	89 ca                	mov    edx,ecx
c001f79b:	89 f0                	mov    eax,esi
c001f79d:	09 fa                	or     edx,edi
c001f79f:	09 da                	or     edx,ebx
c001f7a1:	5b                   	pop    ebx
c001f7a2:	5e                   	pop    esi
c001f7a3:	5f                   	pop    edi
c001f7a4:	c3                   	ret    

c001f7a5 <Vm::fpu64ToInternal(unsigned long long)>:
c001f7a5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f7a9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f7ad:	c3                   	ret    

c001f7ae <Vm::fpuFloatToLong(unsigned long long)>:
c001f7ae:	57                   	push   edi
c001f7af:	31 c0                	xor    eax,eax
c001f7b1:	56                   	push   esi
c001f7b2:	31 d2                	xor    edx,edx
c001f7b4:	53                   	push   ebx
c001f7b5:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f7b9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001f7bd:	89 d9                	mov    ecx,ebx
c001f7bf:	c1 e9 14             	shr    ecx,0x14
c001f7c2:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c001f7c8:	89 cf                	mov    edi,ecx
c001f7ca:	81 ef ff 03 00 00    	sub    edi,0x3ff
c001f7d0:	78 33                	js     c001f805 <Vm::fpuFloatToLong(unsigned long long)+0x57>
c001f7d2:	89 d9                	mov    ecx,ebx
c001f7d4:	89 f0                	mov    eax,esi
c001f7d6:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001f7dc:	81 c9 00 00 10 00    	or     ecx,0x100000
c001f7e2:	89 ca                	mov    edx,ecx
c001f7e4:	b9 34 00 00 00       	mov    ecx,0x34
c001f7e9:	29 f9                	sub    ecx,edi
c001f7eb:	0f ad d0             	shrd   eax,edx,cl
c001f7ee:	d3 fa                	sar    edx,cl
c001f7f0:	f6 c1 20             	test   cl,0x20
c001f7f3:	74 05                	je     c001f7fa <Vm::fpuFloatToLong(unsigned long long)+0x4c>
c001f7f5:	89 d0                	mov    eax,edx
c001f7f7:	c1 fa 1f             	sar    edx,0x1f
c001f7fa:	85 db                	test   ebx,ebx
c001f7fc:	79 07                	jns    c001f805 <Vm::fpuFloatToLong(unsigned long long)+0x57>
c001f7fe:	f7 d8                	neg    eax
c001f800:	83 d2 00             	adc    edx,0x0
c001f803:	f7 da                	neg    edx
c001f805:	5b                   	pop    ebx
c001f806:	5e                   	pop    esi
c001f807:	5f                   	pop    edi
c001f808:	c3                   	ret    

c001f809 <Vm::fpuULongToFloat(unsigned long long)>:
c001f809:	57                   	push   edi
c001f80a:	31 c9                	xor    ecx,ecx
c001f80c:	56                   	push   esi
c001f80d:	53                   	push   ebx
c001f80e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001f812:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001f816:	0f ba e7 14          	bt     edi,0x14
c001f81a:	72 07                	jb     c001f823 <Vm::fpuULongToFloat(unsigned long long)+0x1a>
c001f81c:	01 f6                	add    esi,esi
c001f81e:	11 ff                	adc    edi,edi
c001f820:	41                   	inc    ecx
c001f821:	eb f3                	jmp    c001f816 <Vm::fpuULongToFloat(unsigned long long)+0xd>
c001f823:	89 fa                	mov    edx,edi
c001f825:	89 f0                	mov    eax,esi
c001f827:	bb 33 04 00 00       	mov    ebx,0x433
c001f82c:	81 e2 ff ff 0f 00    	and    edx,0xfffff
c001f832:	29 cb                	sub    ebx,ecx
c001f834:	89 d9                	mov    ecx,ebx
c001f836:	5b                   	pop    ebx
c001f837:	c1 e1 14             	shl    ecx,0x14
c001f83a:	5e                   	pop    esi
c001f83b:	09 ca                	or     edx,ecx
c001f83d:	5f                   	pop    edi
c001f83e:	c3                   	ret    

c001f83f <Vm::fpuLongToFloat(long long)>:
c001f83f:	56                   	push   esi
c001f840:	31 c0                	xor    eax,eax
c001f842:	53                   	push   ebx
c001f843:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001f847:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001f84b:	39 c8                	cmp    eax,ecx
c001f84d:	19 d8                	sbb    eax,ebx
c001f84f:	7d 04                	jge    c001f855 <Vm::fpuLongToFloat(long long)+0x16>
c001f851:	31 f6                	xor    esi,esi
c001f853:	eb 0c                	jmp    c001f861 <Vm::fpuLongToFloat(long long)+0x22>
c001f855:	f7 d9                	neg    ecx
c001f857:	be 01 00 00 00       	mov    esi,0x1
c001f85c:	83 d3 00             	adc    ebx,0x0
c001f85f:	f7 db                	neg    ebx
c001f861:	31 c0                	xor    eax,eax
c001f863:	0f ba e3 14          	bt     ebx,0x14
c001f867:	72 07                	jb     c001f870 <Vm::fpuLongToFloat(long long)+0x31>
c001f869:	01 c9                	add    ecx,ecx
c001f86b:	11 db                	adc    ebx,ebx
c001f86d:	40                   	inc    eax
c001f86e:	eb f3                	jmp    c001f863 <Vm::fpuLongToFloat(long long)+0x24>
c001f870:	ba 33 04 00 00       	mov    edx,0x433
c001f875:	29 c2                	sub    edx,eax
c001f877:	89 c8                	mov    eax,ecx
c001f879:	c1 e2 14             	shl    edx,0x14
c001f87c:	89 d9                	mov    ecx,ebx
c001f87e:	89 f3                	mov    ebx,esi
c001f880:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001f886:	09 ca                	or     edx,ecx
c001f888:	84 db                	test   bl,bl
c001f88a:	74 06                	je     c001f892 <Vm::fpuLongToFloat(long long)+0x53>
c001f88c:	81 ca 00 00 00 80    	or     edx,0x80000000
c001f892:	5b                   	pop    ebx
c001f893:	5e                   	pop    esi
c001f894:	c3                   	ret    

c001f895 <Vm::fpuGet0()>:
c001f895:	31 c0                	xor    eax,eax
c001f897:	31 d2                	xor    edx,edx
c001f899:	c3                   	ret    

c001f89a <Vm::fpuGet1()>:
c001f89a:	b8 01 00 00 00       	mov    eax,0x1
c001f89f:	31 d2                	xor    edx,edx
c001f8a1:	c3                   	ret    

c001f8a2 <Vm::fpuGetPi()>:
c001f8a2:	b8 03 00 00 00       	mov    eax,0x3
c001f8a7:	31 d2                	xor    edx,edx
c001f8a9:	c3                   	ret    

c001f8aa <Vm::fpuGetLog2E()>:
c001f8aa:	83 ec 18             	sub    esp,0x18
c001f8ad:	68 40 ca 02 c0       	push   0xc002ca40
c001f8b2:	e8 de ad ff ff       	call   c001a695 <Krnl::panic(char const*)>
c001f8b7:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f8bc:	31 d2                	xor    edx,edx
c001f8be:	83 c4 1c             	add    esp,0x1c
c001f8c1:	c3                   	ret    

c001f8c2 <Vm::fpuGetLogE2()>:
c001f8c2:	83 ec 18             	sub    esp,0x18
c001f8c5:	68 4c ca 02 c0       	push   0xc002ca4c
c001f8ca:	e8 c6 ad ff ff       	call   c001a695 <Krnl::panic(char const*)>
c001f8cf:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f8d4:	31 d2                	xor    edx,edx
c001f8d6:	83 c4 1c             	add    esp,0x1c
c001f8d9:	c3                   	ret    

c001f8da <Vm::fpuGetLog210()>:
c001f8da:	83 ec 18             	sub    esp,0x18
c001f8dd:	68 58 ca 02 c0       	push   0xc002ca58
c001f8e2:	e8 ae ad ff ff       	call   c001a695 <Krnl::panic(char const*)>
c001f8e7:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f8ec:	31 d2                	xor    edx,edx
c001f8ee:	83 c4 1c             	add    esp,0x1c
c001f8f1:	c3                   	ret    

c001f8f2 <Vm::fpuGetLog102()>:
c001f8f2:	83 ec 18             	sub    esp,0x18
c001f8f5:	68 65 ca 02 c0       	push   0xc002ca65
c001f8fa:	e8 96 ad ff ff       	call   c001a695 <Krnl::panic(char const*)>
c001f8ff:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f904:	31 d2                	xor    edx,edx
c001f906:	83 c4 1c             	add    esp,0x1c
c001f909:	c3                   	ret    

c001f90a <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>:
c001f90a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f90e:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001f912:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f916:	1b 44 24 10          	sbb    eax,DWORD PTR [esp+0x10]
c001f91a:	0f 92 c0             	setb   al
c001f91d:	c3                   	ret    

c001f91e <Vm::fpuAreEqual(unsigned long long, unsigned long long)>:
c001f91e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001f922:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f926:	33 54 24 04          	xor    edx,DWORD PTR [esp+0x4]
c001f92a:	33 44 24 08          	xor    eax,DWORD PTR [esp+0x8]
c001f92e:	09 c2                	or     edx,eax
c001f930:	0f 94 c0             	sete   al
c001f933:	c3                   	ret    

c001f934 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>:
c001f934:	57                   	push   edi
c001f935:	56                   	push   esi
c001f936:	53                   	push   ebx
c001f937:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f93b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f93f:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001f943:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001f947:	57                   	push   edi
c001f948:	56                   	push   esi
c001f949:	53                   	push   ebx
c001f94a:	51                   	push   ecx
c001f94b:	e8 ce ff ff ff       	call   c001f91e <Vm::fpuAreEqual(unsigned long long, unsigned long long)>
c001f950:	83 c4 10             	add    esp,0x10
c001f953:	88 c2                	mov    dl,al
c001f955:	31 c0                	xor    eax,eax
c001f957:	84 d2                	test   dl,dl
c001f959:	75 0c                	jne    c001f967 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)+0x33>
c001f95b:	57                   	push   edi
c001f95c:	56                   	push   esi
c001f95d:	53                   	push   ebx
c001f95e:	51                   	push   ecx
c001f95f:	e8 a6 ff ff ff       	call   c001f90a <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>
c001f964:	83 c4 10             	add    esp,0x10
c001f967:	83 e0 01             	and    eax,0x1
c001f96a:	5b                   	pop    ebx
c001f96b:	88 c1                	mov    cl,al
c001f96d:	83 e2 01             	and    edx,0x1
c001f970:	a0 c1 1c 03 c0       	mov    al,ds:0xc0031cc1
c001f975:	c1 e2 06             	shl    edx,0x6
c001f978:	83 e0 ba             	and    eax,0xffffffba
c001f97b:	5e                   	pop    esi
c001f97c:	09 c8                	or     eax,ecx
c001f97e:	5f                   	pop    edi
c001f97f:	09 d0                	or     eax,edx
c001f981:	a2 c1 1c 03 c0       	mov    ds:0xc0031cc1,al
c001f986:	c3                   	ret    

c001f987 <Vm::fpuAdd(unsigned long long, unsigned long long)>:
c001f987:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f98b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f98f:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001f993:	13 54 24 08          	adc    edx,DWORD PTR [esp+0x8]
c001f997:	c3                   	ret    

c001f998 <Vm::fpuAbs(unsigned long long)>:
c001f998:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f99c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f9a0:	c3                   	ret    

c001f9a1 <Vm::fpuChs(unsigned long long)>:
c001f9a1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f9a5:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f9a9:	f7 d8                	neg    eax
c001f9ab:	83 d2 00             	adc    edx,0x0
c001f9ae:	f7 da                	neg    edx
c001f9b0:	c3                   	ret    

c001f9b1 <Vm::fpuSub(unsigned long long, unsigned long long)>:
c001f9b1:	f7 5c 24 0c          	neg    DWORD PTR [esp+0xc]
c001f9b5:	83 54 24 10 00       	adc    DWORD PTR [esp+0x10],0x0
c001f9ba:	f7 5c 24 10          	neg    DWORD PTR [esp+0x10]
c001f9be:	eb c7                	jmp    c001f987 <Vm::fpuAdd(unsigned long long, unsigned long long)>

c001f9c0 <Vm::fpuMultiply(unsigned long long, unsigned long long)>:
c001f9c0:	53                   	push   ebx
c001f9c1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f9c5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f9c9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001f9cd:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f9d1:	0f af ca             	imul   ecx,edx
c001f9d4:	0f af d8             	imul   ebx,eax
c001f9d7:	f7 e2                	mul    edx
c001f9d9:	01 d9                	add    ecx,ebx
c001f9db:	5b                   	pop    ebx
c001f9dc:	01 ca                	add    edx,ecx
c001f9de:	c3                   	ret    

c001f9df <Vm::fpuDivide(unsigned long long, unsigned long long)>:
c001f9df:	83 ec 0c             	sub    esp,0xc
c001f9e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f9e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f9ea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f9ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f9f2:	e8 a5 70 00 00       	call   c0026a9c <__udivdi3>
c001f9f7:	83 c4 1c             	add    esp,0x1c
c001f9fa:	c3                   	ret    

c001f9fb <Vm::fpuSquare(unsigned long long)>:
c001f9fb:	50                   	push   eax
c001f9fc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001fa00:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001fa04:	52                   	push   edx
c001fa05:	50                   	push   eax
c001fa06:	52                   	push   edx
c001fa07:	50                   	push   eax
c001fa08:	e8 b3 ff ff ff       	call   c001f9c0 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001fa0d:	83 c4 14             	add    esp,0x14
c001fa10:	c3                   	ret    

c001fa11 <Vm::fpuGetReg(int)>:
c001fa11:	83 ec 0c             	sub    esp,0xc
c001fa14:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001fa19:	76 10                	jbe    c001fa2b <Vm::fpuGetReg(int)+0x1a>
c001fa1b:	83 ec 0c             	sub    esp,0xc
c001fa1e:	68 72 ca 02 c0       	push   0xc002ca72
c001fa23:	e8 6d ac ff ff       	call   c001a695 <Krnl::panic(char const*)>
c001fa28:	83 c4 10             	add    esp,0x10
c001fa2b:	a0 c1 1c 03 c0       	mov    al,ds:0xc0031cc1
c001fa30:	b9 08 00 00 00       	mov    ecx,0x8
c001fa35:	c0 e8 03             	shr    al,0x3
c001fa38:	83 e0 07             	and    eax,0x7
c001fa3b:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001fa3f:	99                   	cdq    
c001fa40:	f7 f9                	idiv   ecx
c001fa42:	8b 04 d5 c4 1c 03 c0 	mov    eax,DWORD PTR [edx*8-0x3ffce33c]
c001fa49:	8b 14 d5 c8 1c 03 c0 	mov    edx,DWORD PTR [edx*8-0x3ffce338]
c001fa50:	83 c4 0c             	add    esp,0xc
c001fa53:	c3                   	ret    

c001fa54 <Vm::fpuSetReg(int, unsigned long long)>:
c001fa54:	57                   	push   edi
c001fa55:	56                   	push   esi
c001fa56:	52                   	push   edx
c001fa57:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001fa5b:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001fa5f:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001fa64:	76 10                	jbe    c001fa76 <Vm::fpuSetReg(int, unsigned long long)+0x22>
c001fa66:	83 ec 0c             	sub    esp,0xc
c001fa69:	68 85 ca 02 c0       	push   0xc002ca85
c001fa6e:	e8 22 ac ff ff       	call   c001a695 <Krnl::panic(char const*)>
c001fa73:	83 c4 10             	add    esp,0x10
c001fa76:	a0 c1 1c 03 c0       	mov    al,ds:0xc0031cc1
c001fa7b:	b9 08 00 00 00       	mov    ecx,0x8
c001fa80:	c0 e8 03             	shr    al,0x3
c001fa83:	83 e0 07             	and    eax,0x7
c001fa86:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001fa8a:	99                   	cdq    
c001fa8b:	f7 f9                	idiv   ecx
c001fa8d:	89 34 d5 c4 1c 03 c0 	mov    DWORD PTR [edx*8-0x3ffce33c],esi
c001fa94:	89 3c d5 c8 1c 03 c0 	mov    DWORD PTR [edx*8-0x3ffce338],edi
c001fa9b:	58                   	pop    eax
c001fa9c:	5e                   	pop    esi
c001fa9d:	5f                   	pop    edi
c001fa9e:	c3                   	ret    

c001fa9f <Vm::fpuPush(unsigned long long)>:
c001fa9f:	a0 c1 1c 03 c0       	mov    al,ds:0xc0031cc1
c001faa4:	c0 e8 03             	shr    al,0x3
c001faa7:	83 e0 07             	and    eax,0x7
c001faaa:	83 c0 07             	add    eax,0x7
c001faad:	88 c2                	mov    dl,al
c001faaf:	83 e0 07             	and    eax,0x7
c001fab2:	83 e2 07             	and    edx,0x7
c001fab5:	8d 0c d5 00 00 00 00 	lea    ecx,[edx*8+0x0]
c001fabc:	8a 15 c1 1c 03 c0    	mov    dl,BYTE PTR ds:0xc0031cc1
c001fac2:	83 e2 c7             	and    edx,0xffffffc7
c001fac5:	09 ca                	or     edx,ecx
c001fac7:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001facb:	88 15 c1 1c 03 c0    	mov    BYTE PTR ds:0xc0031cc1,dl
c001fad1:	89 0c c5 c8 1c 03 c0 	mov    DWORD PTR [eax*8-0x3ffce338],ecx
c001fad8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001fadc:	89 14 c5 c4 1c 03 c0 	mov    DWORD PTR [eax*8-0x3ffce33c],edx
c001fae3:	a1 04 1d 03 c0       	mov    eax,ds:0xc0031d04
c001fae8:	83 f8 08             	cmp    eax,0x8
c001faeb:	75 08                	jne    c001faf5 <Vm::fpuPush(unsigned long long)+0x56>
c001faed:	80 0d c0 1c 03 c0 40 	or     BYTE PTR ds:0xc0031cc0,0x40
c001faf4:	c3                   	ret    
c001faf5:	40                   	inc    eax
c001faf6:	a3 04 1d 03 c0       	mov    ds:0xc0031d04,eax
c001fafb:	c3                   	ret    

c001fafc <Vm::fpuPop()>:
c001fafc:	8a 0d c1 1c 03 c0    	mov    cl,BYTE PTR ds:0xc0031cc1
c001fb02:	53                   	push   ebx
c001fb03:	c0 e9 03             	shr    cl,0x3
c001fb06:	8a 1d c1 1c 03 c0    	mov    bl,BYTE PTR ds:0xc0031cc1
c001fb0c:	83 e1 07             	and    ecx,0x7
c001fb0f:	83 e3 c7             	and    ebx,0xffffffc7
c001fb12:	8b 04 cd c4 1c 03 c0 	mov    eax,DWORD PTR [ecx*8-0x3ffce33c]
c001fb19:	8b 14 cd c8 1c 03 c0 	mov    edx,DWORD PTR [ecx*8-0x3ffce338]
c001fb20:	8d 0c cd 08 00 00 00 	lea    ecx,[ecx*8+0x8]
c001fb27:	83 e1 38             	and    ecx,0x38
c001fb2a:	09 d9                	or     ecx,ebx
c001fb2c:	88 0d c1 1c 03 c0    	mov    BYTE PTR ds:0xc0031cc1,cl
c001fb32:	8b 0d 04 1d 03 c0    	mov    ecx,DWORD PTR ds:0xc0031d04
c001fb38:	85 c9                	test   ecx,ecx
c001fb3a:	74 09                	je     c001fb45 <Vm::fpuPop()+0x49>
c001fb3c:	49                   	dec    ecx
c001fb3d:	89 0d 04 1d 03 c0    	mov    DWORD PTR ds:0xc0031d04,ecx
c001fb43:	eb 07                	jmp    c001fb4c <Vm::fpuPop()+0x50>
c001fb45:	80 0d c0 1c 03 c0 40 	or     BYTE PTR ds:0xc0031cc0,0x40
c001fb4c:	5b                   	pop    ebx
c001fb4d:	c3                   	ret    

c001fb4e <Vm::x87Handler(regs*)>:
c001fb4e:	55                   	push   ebp
c001fb4f:	57                   	push   edi
c001fb50:	56                   	push   esi
c001fb51:	53                   	push   ebx
c001fb52:	83 ec 1c             	sub    esp,0x1c
c001fb55:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001fb59:	c6 44 24 0a 00       	mov    BYTE PTR [esp+0xa],0x0
c001fb5e:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c001fb61:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c001fb69:	8d 44 24 0b          	lea    eax,[esp+0xb]
c001fb6d:	50                   	push   eax
c001fb6e:	8d 44 24 0e          	lea    eax,[esp+0xe]
c001fb72:	50                   	push   eax
c001fb73:	8d 44 24 14          	lea    eax,[esp+0x14]
c001fb77:	50                   	push   eax
c001fb78:	53                   	push   ebx
c001fb79:	e8 de a1 ff ff       	call   c0019d5c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c001fb7e:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c001fb81:	83 c4 10             	add    esp,0x10
c001fb84:	89 c6                	mov    esi,eax
c001fb86:	80 fa d9             	cmp    dl,0xd9
c001fb89:	0f 85 52 01 00 00    	jne    c001fce1 <Vm::x87Handler(regs*)+0x193>
c001fb8f:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fb93:	8d 50 20             	lea    edx,[eax+0x20]
c001fb96:	80 fa 0e             	cmp    dl,0xe
c001fb99:	0f 87 86 00 00 00    	ja     c001fc25 <Vm::x87Handler(regs*)+0xd7>
c001fb9f:	0f b6 d2             	movzx  edx,dl
c001fba2:	ff 24 95 98 ca 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd3568]
c001fba9:	e8 e7 fc ff ff       	call   c001f895 <Vm::fpuGet0()>
c001fbae:	eb 05                	jmp    c001fbb5 <Vm::x87Handler(regs*)+0x67>
c001fbb0:	e8 e5 fc ff ff       	call   c001f89a <Vm::fpuGet1()>
c001fbb5:	57                   	push   edi
c001fbb6:	57                   	push   edi
c001fbb7:	52                   	push   edx
c001fbb8:	50                   	push   eax
c001fbb9:	e8 e1 fe ff ff       	call   c001fa9f <Vm::fpuPush(unsigned long long)>
c001fbbe:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001fbc2:	83 c4 10             	add    esp,0x10
c001fbc5:	b0 01                	mov    al,0x1
c001fbc7:	e9 e3 09 00 00       	jmp    c00205af <Vm::x87Handler(regs*)+0xa61>
c001fbcc:	83 ec 0c             	sub    esp,0xc
c001fbcf:	6a 00                	push   0x0
c001fbd1:	e8 3b fe ff ff       	call   c001fa11 <Vm::fpuGetReg(int)>
c001fbd6:	59                   	pop    ecx
c001fbd7:	5e                   	pop    esi
c001fbd8:	52                   	push   edx
c001fbd9:	50                   	push   eax
c001fbda:	e8 c2 fd ff ff       	call   c001f9a1 <Vm::fpuChs(unsigned long long)>
c001fbdf:	eb 13                	jmp    c001fbf4 <Vm::x87Handler(regs*)+0xa6>
c001fbe1:	83 ec 0c             	sub    esp,0xc
c001fbe4:	6a 00                	push   0x0
c001fbe6:	e8 26 fe ff ff       	call   c001fa11 <Vm::fpuGetReg(int)>
c001fbeb:	5f                   	pop    edi
c001fbec:	5d                   	pop    ebp
c001fbed:	52                   	push   edx
c001fbee:	50                   	push   eax
c001fbef:	e8 a4 fd ff ff       	call   c001f998 <Vm::fpuAbs(unsigned long long)>
c001fbf4:	83 c4 0c             	add    esp,0xc
c001fbf7:	52                   	push   edx
c001fbf8:	50                   	push   eax
c001fbf9:	6a 00                	push   0x0
c001fbfb:	e8 54 fe ff ff       	call   c001fa54 <Vm::fpuSetReg(int, unsigned long long)>
c001fc00:	eb bc                	jmp    c001fbbe <Vm::x87Handler(regs*)+0x70>
c001fc02:	e8 d3 fc ff ff       	call   c001f8da <Vm::fpuGetLog210()>
c001fc07:	eb ac                	jmp    c001fbb5 <Vm::x87Handler(regs*)+0x67>
c001fc09:	e8 9c fc ff ff       	call   c001f8aa <Vm::fpuGetLog2E()>
c001fc0e:	eb a5                	jmp    c001fbb5 <Vm::x87Handler(regs*)+0x67>
c001fc10:	e8 8d fc ff ff       	call   c001f8a2 <Vm::fpuGetPi()>
c001fc15:	eb 9e                	jmp    c001fbb5 <Vm::x87Handler(regs*)+0x67>
c001fc17:	e8 d6 fc ff ff       	call   c001f8f2 <Vm::fpuGetLog102()>
c001fc1c:	eb 97                	jmp    c001fbb5 <Vm::x87Handler(regs*)+0x67>
c001fc1e:	e8 9f fc ff ff       	call   c001f8c2 <Vm::fpuGetLogE2()>
c001fc23:	eb 90                	jmp    c001fbb5 <Vm::x87Handler(regs*)+0x67>
c001fc25:	8d 50 40             	lea    edx,[eax+0x40]
c001fc28:	80 fa 07             	cmp    dl,0x7
c001fc2b:	77 15                	ja     c001fc42 <Vm::x87Handler(regs*)+0xf4>
c001fc2d:	83 ec 0c             	sub    esp,0xc
c001fc30:	2d c0 00 00 00       	sub    eax,0xc0
c001fc35:	50                   	push   eax
c001fc36:	e8 d6 fd ff ff       	call   c001fa11 <Vm::fpuGetReg(int)>
c001fc3b:	59                   	pop    ecx
c001fc3c:	5e                   	pop    esi
c001fc3d:	e9 75 ff ff ff       	jmp    c001fbb7 <Vm::x87Handler(regs*)+0x69>
c001fc42:	8d 50 38             	lea    edx,[eax+0x38]
c001fc45:	80 fa 07             	cmp    dl,0x7
c001fc48:	77 3c                	ja     c001fc86 <Vm::x87Handler(regs*)+0x138>
c001fc4a:	83 ec 0c             	sub    esp,0xc
c001fc4d:	2d c8 00 00 00       	sub    eax,0xc8
c001fc52:	50                   	push   eax
c001fc53:	e8 b9 fd ff ff       	call   c001fa11 <Vm::fpuGetReg(int)>
c001fc58:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fc5f:	89 c6                	mov    esi,eax
c001fc61:	89 d7                	mov    edi,edx
c001fc63:	e8 a9 fd ff ff       	call   c001fa11 <Vm::fpuGetReg(int)>
c001fc68:	83 c4 0c             	add    esp,0xc
c001fc6b:	52                   	push   edx
c001fc6c:	50                   	push   eax
c001fc6d:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fc71:	2d c8 00 00 00       	sub    eax,0xc8
c001fc76:	50                   	push   eax
c001fc77:	e8 d8 fd ff ff       	call   c001fa54 <Vm::fpuSetReg(int, unsigned long long)>
c001fc7c:	83 c4 0c             	add    esp,0xc
c001fc7f:	57                   	push   edi
c001fc80:	56                   	push   esi
c001fc81:	e9 73 ff ff ff       	jmp    c001fbf9 <Vm::x87Handler(regs*)+0xab>
c001fc86:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001fc8a:	84 d2                	test   dl,dl
c001fc8c:	75 0f                	jne    c001fc9d <Vm::x87Handler(regs*)+0x14f>
c001fc8e:	83 ec 0c             	sub    esp,0xc
c001fc91:	ff 36                	push   DWORD PTR [esi]
c001fc93:	e8 c8 fa ff ff       	call   c001f760 <Vm::fpu32ToInternal(unsigned int)>
c001fc98:	e9 bf 00 00 00       	jmp    c001fd5c <Vm::x87Handler(regs*)+0x20e>
c001fc9d:	80 fa 03             	cmp    dl,0x3
c001fca0:	75 13                	jne    c001fcb5 <Vm::x87Handler(regs*)+0x167>
c001fca2:	e8 55 fe ff ff       	call   c001fafc <Vm::fpuPop()>
c001fca7:	55                   	push   ebp
c001fca8:	55                   	push   ebp
c001fca9:	52                   	push   edx
c001fcaa:	50                   	push   eax
c001fcab:	e8 4c fa ff ff       	call   c001f6fc <Vm::fpuInternalTo32(unsigned long long)>
c001fcb0:	e9 88 00 00 00       	jmp    c001fd3d <Vm::x87Handler(regs*)+0x1ef>
c001fcb5:	80 fa 05             	cmp    dl,0x5
c001fcb8:	75 0e                	jne    c001fcc8 <Vm::x87Handler(regs*)+0x17a>
c001fcba:	66 8b 06             	mov    ax,WORD PTR [esi]
c001fcbd:	66 a3 c2 1c 03 c0    	mov    ds:0xc0031cc2,ax
c001fcc3:	e9 df 00 00 00       	jmp    c001fda7 <Vm::x87Handler(regs*)+0x259>
c001fcc8:	31 c0                	xor    eax,eax
c001fcca:	80 fa 07             	cmp    dl,0x7
c001fccd:	0f 85 dc 08 00 00    	jne    c00205af <Vm::x87Handler(regs*)+0xa61>
c001fcd3:	66 a1 c2 1c 03 c0    	mov    ax,ds:0xc0031cc2
c001fcd9:	66 89 06             	mov    WORD PTR [esi],ax
c001fcdc:	e9 c6 00 00 00       	jmp    c001fda7 <Vm::x87Handler(regs*)+0x259>
c001fce1:	80 fa d8             	cmp    dl,0xd8
c001fce4:	0f 84 c9 00 00 00    	je     c001fdb3 <Vm::x87Handler(regs*)+0x265>
c001fcea:	80 fa dc             	cmp    dl,0xdc
c001fced:	0f 84 0d 02 00 00    	je     c001ff00 <Vm::x87Handler(regs*)+0x3b2>
c001fcf3:	80 fa de             	cmp    dl,0xde
c001fcf6:	0f 84 cd 02 00 00    	je     c001ffc9 <Vm::x87Handler(regs*)+0x47b>
c001fcfc:	80 fa dd             	cmp    dl,0xdd
c001fcff:	0f 84 5f 04 00 00    	je     c0020164 <Vm::x87Handler(regs*)+0x616>
c001fd05:	80 fa da             	cmp    dl,0xda
c001fd08:	0f 84 24 05 00 00    	je     c0020232 <Vm::x87Handler(regs*)+0x6e4>
c001fd0e:	80 fa df             	cmp    dl,0xdf
c001fd11:	0f 84 68 05 00 00    	je     c002027f <Vm::x87Handler(regs*)+0x731>
c001fd17:	31 c0                	xor    eax,eax
c001fd19:	80 fa db             	cmp    dl,0xdb
c001fd1c:	0f 85 8d 08 00 00    	jne    c00205af <Vm::x87Handler(regs*)+0xa61>
c001fd22:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001fd26:	80 fa 03             	cmp    dl,0x3
c001fd29:	0f 85 70 06 00 00    	jne    c002039f <Vm::x87Handler(regs*)+0x851>
c001fd2f:	e8 c8 fd ff ff       	call   c001fafc <Vm::fpuPop()>
c001fd34:	55                   	push   ebp
c001fd35:	55                   	push   ebp
c001fd36:	52                   	push   edx
c001fd37:	50                   	push   eax
c001fd38:	e8 71 fa ff ff       	call   c001f7ae <Vm::fpuFloatToLong(unsigned long long)>
c001fd3d:	83 c4 10             	add    esp,0x10
c001fd40:	89 06                	mov    DWORD PTR [esi],eax
c001fd42:	eb 63                	jmp    c001fda7 <Vm::x87Handler(regs*)+0x259>
c001fd44:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001fd48:	84 d2                	test   dl,dl
c001fd4a:	0f 85 e6 05 00 00    	jne    c0020336 <Vm::x87Handler(regs*)+0x7e8>
c001fd50:	57                   	push   edi
c001fd51:	57                   	push   edi
c001fd52:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fd55:	ff 36                	push   DWORD PTR [esi]
c001fd57:	e8 49 fa ff ff       	call   c001f7a5 <Vm::fpu64ToInternal(unsigned long long)>
c001fd5c:	5e                   	pop    esi
c001fd5d:	5f                   	pop    edi
c001fd5e:	52                   	push   edx
c001fd5f:	50                   	push   eax
c001fd60:	e8 3a fd ff ff       	call   c001fa9f <Vm::fpuPush(unsigned long long)>
c001fd65:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001fd69:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001fd6c:	e9 51 fe ff ff       	jmp    c001fbc2 <Vm::x87Handler(regs*)+0x74>
c001fd71:	80 fa 03             	cmp    dl,0x3
c001fd74:	0f 85 d7 06 00 00    	jne    c0020451 <Vm::x87Handler(regs*)+0x903>
c001fd7a:	57                   	push   edi
c001fd7b:	57                   	push   edi
c001fd7c:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fd7f:	ff 36                	push   DWORD PTR [esi]
c001fd81:	e8 1f fa ff ff       	call   c001f7a5 <Vm::fpu64ToInternal(unsigned long long)>
c001fd86:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fd8d:	89 c6                	mov    esi,eax
c001fd8f:	89 d7                	mov    edi,edx
c001fd91:	e8 7b fc ff ff       	call   c001fa11 <Vm::fpuGetReg(int)>
c001fd96:	57                   	push   edi
c001fd97:	56                   	push   esi
c001fd98:	52                   	push   edx
c001fd99:	50                   	push   eax
c001fd9a:	e8 95 fb ff ff       	call   c001f934 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001fd9f:	83 c4 20             	add    esp,0x20
c001fda2:	e8 55 fd ff ff       	call   c001fafc <Vm::fpuPop()>
c001fda7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001fdab:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001fdae:	e9 12 fe ff ff       	jmp    c001fbc5 <Vm::x87Handler(regs*)+0x77>
c001fdb3:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fdb7:	8d 50 40             	lea    edx,[eax+0x40]
c001fdba:	80 fa 07             	cmp    dl,0x7
c001fdbd:	77 29                	ja     c001fde8 <Vm::x87Handler(regs*)+0x29a>
c001fdbf:	83 ec 0c             	sub    esp,0xc
c001fdc2:	2d c0 00 00 00       	sub    eax,0xc0
c001fdc7:	50                   	push   eax
c001fdc8:	e8 44 fc ff ff       	call   c001fa11 <Vm::fpuGetReg(int)>
c001fdcd:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fdd4:	89 c6                	mov    esi,eax
c001fdd6:	89 d7                	mov    edi,edx
c001fdd8:	e8 34 fc ff ff       	call   c001fa11 <Vm::fpuGetReg(int)>
c001fddd:	57                   	push   edi
c001fdde:	56                   	push   esi
c001fddf:	52                   	push   edx
c001fde0:	50                   	push   eax
c001fde1:	e8 a1 fb ff ff       	call   c001f987 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001fde6:	eb 2f                	jmp    c001fe17 <Vm::x87Handler(regs*)+0x2c9>
c001fde8:	8d 50 38             	lea    edx,[eax+0x38]
c001fdeb:	80 fa 07             	cmp    dl,0x7
c001fdee:	77 2f                	ja     c001fe1f <Vm::x87Handler(regs*)+0x2d1>
c001fdf0:	83 ec 0c             	sub    esp,0xc
c001fdf3:	2d c8 00 00 00       	sub    eax,0xc8
c001fdf8:	50                   	push   eax
c001fdf9:	e8 13 fc ff ff       	call   c001fa11 <Vm::fpuGetReg(int)>
c001fdfe:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fe05:	89 c6                	mov    esi,eax
c001fe07:	89 d7                	mov    edi,edx
c001fe09:	e8 03 fc ff ff       	call   c001fa11 <Vm::fpuGetReg(int)>
c001fe0e:	57                   	push   edi
c001fe0f:	56                   	push   esi
c001fe10:	52                   	push   edx
c001fe11:	50                   	push   eax
c001fe12:	e8 a9 fb ff ff       	call   c001f9c0 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001fe17:	83 c4 1c             	add    esp,0x1c
c001fe1a:	e9 d8 fd ff ff       	jmp    c001fbf7 <Vm::x87Handler(regs*)+0xa9>
c001fe1f:	8d 50 30             	lea    edx,[eax+0x30]
c001fe22:	80 fa 07             	cmp    dl,0x7
c001fe25:	77 0d                	ja     c001fe34 <Vm::x87Handler(regs*)+0x2e6>
c001fe27:	83 ec 0c             	sub    esp,0xc
c001fe2a:	2d d0 00 00 00       	sub    eax,0xd0
c001fe2f:	e9 99 03 00 00       	jmp    c00201cd <Vm::x87Handler(regs*)+0x67f>
c001fe34:	8d 50 28             	lea    edx,[eax+0x28]
c001fe37:	80 fa 07             	cmp    dl,0x7
c001fe3a:	77 0d                	ja     c001fe49 <Vm::x87Handler(regs*)+0x2fb>
c001fe3c:	83 ec 0c             	sub    esp,0xc
c001fe3f:	2d d8 00 00 00       	sub    eax,0xd8
c001fe44:	e9 c0 03 00 00       	jmp    c0020209 <Vm::x87Handler(regs*)+0x6bb>
c001fe49:	8d 50 20             	lea    edx,[eax+0x20]
c001fe4c:	80 fa 07             	cmp    dl,0x7
c001fe4f:	77 1b                	ja     c001fe6c <Vm::x87Handler(regs*)+0x31e>
c001fe51:	83 ec 0c             	sub    esp,0xc
c001fe54:	2d e0 00 00 00       	sub    eax,0xe0
c001fe59:	50                   	push   eax
c001fe5a:	e8 b2 fb ff ff       	call   c001fa11 <Vm::fpuGetReg(int)>
c001fe5f:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fe66:	89 c6                	mov    esi,eax
c001fe68:	89 d7                	mov    edi,edx
c001fe6a:	eb 22                	jmp    c001fe8e <Vm::x87Handler(regs*)+0x340>
c001fe6c:	8d 50 18             	lea    edx,[eax+0x18]
c001fe6f:	80 fa 07             	cmp    dl,0x7
c001fe72:	77 2d                	ja     c001fea1 <Vm::x87Handler(regs*)+0x353>
c001fe74:	83 ec 0c             	sub    esp,0xc
c001fe77:	6a 00                	push   0x0
c001fe79:	e8 93 fb ff ff       	call   c001fa11 <Vm::fpuGetReg(int)>
c001fe7e:	89 c6                	mov    esi,eax
c001fe80:	89 d7                	mov    edi,edx
c001fe82:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fe86:	2d e8 00 00 00       	sub    eax,0xe8
c001fe8b:	89 04 24             	mov    DWORD PTR [esp],eax
c001fe8e:	e8 7e fb ff ff       	call   c001fa11 <Vm::fpuGetReg(int)>
c001fe93:	57                   	push   edi
c001fe94:	56                   	push   esi
c001fe95:	52                   	push   edx
c001fe96:	50                   	push   eax
c001fe97:	e8 15 fb ff ff       	call   c001f9b1 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001fe9c:	e9 76 ff ff ff       	jmp    c001fe17 <Vm::x87Handler(regs*)+0x2c9>
c001fea1:	8d 50 10             	lea    edx,[eax+0x10]
c001fea4:	80 fa 07             	cmp    dl,0x7
c001fea7:	77 1b                	ja     c001fec4 <Vm::x87Handler(regs*)+0x376>
c001fea9:	83 ec 0c             	sub    esp,0xc
c001feac:	2d f0 00 00 00       	sub    eax,0xf0
c001feb1:	50                   	push   eax
c001feb2:	e8 5a fb ff ff       	call   c001fa11 <Vm::fpuGetReg(int)>
c001feb7:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001febe:	89 c6                	mov    esi,eax
c001fec0:	89 d7                	mov    edi,edx
c001fec2:	eb 22                	jmp    c001fee6 <Vm::x87Handler(regs*)+0x398>
c001fec4:	3c f7                	cmp    al,0xf7
c001fec6:	0f 86 d1 03 00 00    	jbe    c002029d <Vm::x87Handler(regs*)+0x74f>
c001fecc:	83 ec 0c             	sub    esp,0xc
c001fecf:	6a 00                	push   0x0
c001fed1:	e8 3b fb ff ff       	call   c001fa11 <Vm::fpuGetReg(int)>
c001fed6:	89 c6                	mov    esi,eax
c001fed8:	89 d7                	mov    edi,edx
c001feda:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fede:	2d f8 00 00 00       	sub    eax,0xf8
c001fee3:	89 04 24             	mov    DWORD PTR [esp],eax
c001fee6:	e8 26 fb ff ff       	call   c001fa11 <Vm::fpuGetReg(int)>
c001feeb:	57                   	push   edi
c001feec:	56                   	push   esi
c001feed:	52                   	push   edx
c001feee:	50                   	push   eax
c001feef:	e8 eb fa ff ff       	call   c001f9df <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001fef4:	83 c4 1c             	add    esp,0x1c
c001fef7:	52                   	push   edx
c001fef8:	50                   	push   eax
c001fef9:	6a 00                	push   0x0
c001fefb:	e9 51 02 00 00       	jmp    c0020151 <Vm::x87Handler(regs*)+0x603>
c001ff00:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ff04:	8d 50 40             	lea    edx,[eax+0x40]
c001ff07:	80 fa 07             	cmp    dl,0x7
c001ff0a:	77 37                	ja     c001ff43 <Vm::x87Handler(regs*)+0x3f5>
c001ff0c:	83 ec 0c             	sub    esp,0xc
c001ff0f:	2d c0 00 00 00       	sub    eax,0xc0
c001ff14:	50                   	push   eax
c001ff15:	e8 f7 fa ff ff       	call   c001fa11 <Vm::fpuGetReg(int)>
c001ff1a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ff21:	89 c6                	mov    esi,eax
c001ff23:	89 d7                	mov    edi,edx
c001ff25:	e8 e7 fa ff ff       	call   c001fa11 <Vm::fpuGetReg(int)>
c001ff2a:	57                   	push   edi
c001ff2b:	56                   	push   esi
c001ff2c:	52                   	push   edx
c001ff2d:	50                   	push   eax
c001ff2e:	e8 54 fa ff ff       	call   c001f987 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001ff33:	83 c4 1c             	add    esp,0x1c
c001ff36:	52                   	push   edx
c001ff37:	50                   	push   eax
c001ff38:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ff3c:	2d c0 00 00 00       	sub    eax,0xc0
c001ff41:	eb 3d                	jmp    c001ff80 <Vm::x87Handler(regs*)+0x432>
c001ff43:	8d 50 38             	lea    edx,[eax+0x38]
c001ff46:	80 fa 07             	cmp    dl,0x7
c001ff49:	77 3b                	ja     c001ff86 <Vm::x87Handler(regs*)+0x438>
c001ff4b:	83 ec 0c             	sub    esp,0xc
c001ff4e:	2d c8 00 00 00       	sub    eax,0xc8
c001ff53:	50                   	push   eax
c001ff54:	e8 b8 fa ff ff       	call   c001fa11 <Vm::fpuGetReg(int)>
c001ff59:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ff60:	89 c6                	mov    esi,eax
c001ff62:	89 d7                	mov    edi,edx
c001ff64:	e8 a8 fa ff ff       	call   c001fa11 <Vm::fpuGetReg(int)>
c001ff69:	57                   	push   edi
c001ff6a:	56                   	push   esi
c001ff6b:	52                   	push   edx
c001ff6c:	50                   	push   eax
c001ff6d:	e8 4e fa ff ff       	call   c001f9c0 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001ff72:	83 c4 1c             	add    esp,0x1c
c001ff75:	52                   	push   edx
c001ff76:	50                   	push   eax
c001ff77:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ff7b:	2d c8 00 00 00       	sub    eax,0xc8
c001ff80:	50                   	push   eax
c001ff81:	e9 75 fc ff ff       	jmp    c001fbfb <Vm::x87Handler(regs*)+0xad>
c001ff86:	83 c0 18             	add    eax,0x18
c001ff89:	3c 07                	cmp    al,0x7
c001ff8b:	0f 87 3b 04 00 00    	ja     c00203cc <Vm::x87Handler(regs*)+0x87e>
c001ff91:	83 ec 0c             	sub    esp,0xc
c001ff94:	6a 00                	push   0x0
c001ff96:	e8 76 fa ff ff       	call   c001fa11 <Vm::fpuGetReg(int)>
c001ff9b:	89 c6                	mov    esi,eax
c001ff9d:	89 d7                	mov    edi,edx
c001ff9f:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ffa3:	2d e8 00 00 00       	sub    eax,0xe8
c001ffa8:	89 04 24             	mov    DWORD PTR [esp],eax
c001ffab:	e8 61 fa ff ff       	call   c001fa11 <Vm::fpuGetReg(int)>
c001ffb0:	57                   	push   edi
c001ffb1:	56                   	push   esi
c001ffb2:	52                   	push   edx
c001ffb3:	50                   	push   eax
c001ffb4:	e8 f8 f9 ff ff       	call   c001f9b1 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001ffb9:	83 c4 1c             	add    esp,0x1c
c001ffbc:	52                   	push   edx
c001ffbd:	50                   	push   eax
c001ffbe:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ffc2:	2d e8 00 00 00       	sub    eax,0xe8
c001ffc7:	eb b7                	jmp    c001ff80 <Vm::x87Handler(regs*)+0x432>
c001ffc9:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ffcd:	8d 50 40             	lea    edx,[eax+0x40]
c001ffd0:	80 fa 07             	cmp    dl,0x7
c001ffd3:	77 3a                	ja     c002000f <Vm::x87Handler(regs*)+0x4c1>
c001ffd5:	83 ec 0c             	sub    esp,0xc
c001ffd8:	2d c0 00 00 00       	sub    eax,0xc0
c001ffdd:	50                   	push   eax
c001ffde:	e8 2e fa ff ff       	call   c001fa11 <Vm::fpuGetReg(int)>
c001ffe3:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ffea:	89 c6                	mov    esi,eax
c001ffec:	89 d7                	mov    edi,edx
c001ffee:	e8 1e fa ff ff       	call   c001fa11 <Vm::fpuGetReg(int)>
c001fff3:	57                   	push   edi
c001fff4:	56                   	push   esi
c001fff5:	52                   	push   edx
c001fff6:	50                   	push   eax
c001fff7:	e8 8b f9 ff ff       	call   c001f987 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001fffc:	83 c4 1c             	add    esp,0x1c
c001ffff:	52                   	push   edx
c0020000:	50                   	push   eax
c0020001:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020005:	2d c0 00 00 00       	sub    eax,0xc0
c002000a:	e9 9e 01 00 00       	jmp    c00201ad <Vm::x87Handler(regs*)+0x65f>
c002000f:	8d 50 20             	lea    edx,[eax+0x20]
c0020012:	80 fa 07             	cmp    dl,0x7
c0020015:	77 3a                	ja     c0020051 <Vm::x87Handler(regs*)+0x503>
c0020017:	83 ec 0c             	sub    esp,0xc
c002001a:	2d e0 00 00 00       	sub    eax,0xe0
c002001f:	50                   	push   eax
c0020020:	e8 ec f9 ff ff       	call   c001fa11 <Vm::fpuGetReg(int)>
c0020025:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c002002c:	89 c6                	mov    esi,eax
c002002e:	89 d7                	mov    edi,edx
c0020030:	e8 dc f9 ff ff       	call   c001fa11 <Vm::fpuGetReg(int)>
c0020035:	57                   	push   edi
c0020036:	56                   	push   esi
c0020037:	52                   	push   edx
c0020038:	50                   	push   eax
c0020039:	e8 73 f9 ff ff       	call   c001f9b1 <Vm::fpuSub(unsigned long long, unsigned long long)>
c002003e:	83 c4 1c             	add    esp,0x1c
c0020041:	52                   	push   edx
c0020042:	50                   	push   eax
c0020043:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020047:	2d e0 00 00 00       	sub    eax,0xe0
c002004c:	e9 5c 01 00 00       	jmp    c00201ad <Vm::x87Handler(regs*)+0x65f>
c0020051:	8d 50 18             	lea    edx,[eax+0x18]
c0020054:	80 fa 07             	cmp    dl,0x7
c0020057:	77 3b                	ja     c0020094 <Vm::x87Handler(regs*)+0x546>
c0020059:	83 ec 0c             	sub    esp,0xc
c002005c:	6a 00                	push   0x0
c002005e:	e8 ae f9 ff ff       	call   c001fa11 <Vm::fpuGetReg(int)>
c0020063:	89 c6                	mov    esi,eax
c0020065:	89 d7                	mov    edi,edx
c0020067:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c002006b:	2d e8 00 00 00       	sub    eax,0xe8
c0020070:	89 04 24             	mov    DWORD PTR [esp],eax
c0020073:	e8 99 f9 ff ff       	call   c001fa11 <Vm::fpuGetReg(int)>
c0020078:	57                   	push   edi
c0020079:	56                   	push   esi
c002007a:	52                   	push   edx
c002007b:	50                   	push   eax
c002007c:	e8 30 f9 ff ff       	call   c001f9b1 <Vm::fpuSub(unsigned long long, unsigned long long)>
c0020081:	83 c4 1c             	add    esp,0x1c
c0020084:	52                   	push   edx
c0020085:	50                   	push   eax
c0020086:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c002008a:	2d e8 00 00 00       	sub    eax,0xe8
c002008f:	e9 19 01 00 00       	jmp    c00201ad <Vm::x87Handler(regs*)+0x65f>
c0020094:	8d 50 38             	lea    edx,[eax+0x38]
c0020097:	80 fa 07             	cmp    dl,0x7
c002009a:	77 37                	ja     c00200d3 <Vm::x87Handler(regs*)+0x585>
c002009c:	83 ec 0c             	sub    esp,0xc
c002009f:	2d c8 00 00 00       	sub    eax,0xc8
c00200a4:	50                   	push   eax
c00200a5:	e8 67 f9 ff ff       	call   c001fa11 <Vm::fpuGetReg(int)>
c00200aa:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00200b1:	89 c6                	mov    esi,eax
c00200b3:	89 d7                	mov    edi,edx
c00200b5:	e8 57 f9 ff ff       	call   c001fa11 <Vm::fpuGetReg(int)>
c00200ba:	57                   	push   edi
c00200bb:	56                   	push   esi
c00200bc:	52                   	push   edx
c00200bd:	50                   	push   eax
c00200be:	e8 fd f8 ff ff       	call   c001f9c0 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c00200c3:	83 c4 1c             	add    esp,0x1c
c00200c6:	52                   	push   edx
c00200c7:	50                   	push   eax
c00200c8:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00200cc:	2d c8 00 00 00       	sub    eax,0xc8
c00200d1:	eb 7d                	jmp    c0020150 <Vm::x87Handler(regs*)+0x602>
c00200d3:	3c f7                	cmp    al,0xf7
c00200d5:	76 38                	jbe    c002010f <Vm::x87Handler(regs*)+0x5c1>
c00200d7:	83 ec 0c             	sub    esp,0xc
c00200da:	6a 00                	push   0x0
c00200dc:	e8 30 f9 ff ff       	call   c001fa11 <Vm::fpuGetReg(int)>
c00200e1:	89 c6                	mov    esi,eax
c00200e3:	89 d7                	mov    edi,edx
c00200e5:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00200e9:	2d f8 00 00 00       	sub    eax,0xf8
c00200ee:	89 04 24             	mov    DWORD PTR [esp],eax
c00200f1:	e8 1b f9 ff ff       	call   c001fa11 <Vm::fpuGetReg(int)>
c00200f6:	57                   	push   edi
c00200f7:	56                   	push   esi
c00200f8:	52                   	push   edx
c00200f9:	50                   	push   eax
c00200fa:	e8 e0 f8 ff ff       	call   c001f9df <Vm::fpuDivide(unsigned long long, unsigned long long)>
c00200ff:	83 c4 1c             	add    esp,0x1c
c0020102:	52                   	push   edx
c0020103:	50                   	push   eax
c0020104:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020108:	2d f8 00 00 00       	sub    eax,0xf8
c002010d:	eb 41                	jmp    c0020150 <Vm::x87Handler(regs*)+0x602>
c002010f:	8d 50 10             	lea    edx,[eax+0x10]
c0020112:	80 fa 07             	cmp    dl,0x7
c0020115:	0f 87 5a 01 00 00    	ja     c0020275 <Vm::x87Handler(regs*)+0x727>
c002011b:	83 ec 0c             	sub    esp,0xc
c002011e:	2d f0 00 00 00       	sub    eax,0xf0
c0020123:	50                   	push   eax
c0020124:	e8 e8 f8 ff ff       	call   c001fa11 <Vm::fpuGetReg(int)>
c0020129:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020130:	89 c6                	mov    esi,eax
c0020132:	89 d7                	mov    edi,edx
c0020134:	e8 d8 f8 ff ff       	call   c001fa11 <Vm::fpuGetReg(int)>
c0020139:	57                   	push   edi
c002013a:	56                   	push   esi
c002013b:	52                   	push   edx
c002013c:	50                   	push   eax
c002013d:	e8 9d f8 ff ff       	call   c001f9df <Vm::fpuDivide(unsigned long long, unsigned long long)>
c0020142:	83 c4 1c             	add    esp,0x1c
c0020145:	52                   	push   edx
c0020146:	50                   	push   eax
c0020147:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c002014b:	2d f0 00 00 00       	sub    eax,0xf0
c0020150:	50                   	push   eax
c0020151:	e8 fe f8 ff ff       	call   c001fa54 <Vm::fpuSetReg(int, unsigned long long)>
c0020156:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c002015a:	e8 9d f9 ff ff       	call   c001fafc <Vm::fpuPop()>
c002015f:	e9 5e fa ff ff       	jmp    c001fbc2 <Vm::x87Handler(regs*)+0x74>
c0020164:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020168:	8d 50 30             	lea    edx,[eax+0x30]
c002016b:	80 fa 07             	cmp    dl,0x7
c002016e:	77 1d                	ja     c002018d <Vm::x87Handler(regs*)+0x63f>
c0020170:	83 ec 0c             	sub    esp,0xc
c0020173:	6a 00                	push   0x0
c0020175:	e8 97 f8 ff ff       	call   c001fa11 <Vm::fpuGetReg(int)>
c002017a:	83 c4 0c             	add    esp,0xc
c002017d:	52                   	push   edx
c002017e:	50                   	push   eax
c002017f:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020183:	2d d0 00 00 00       	sub    eax,0xd0
c0020188:	e9 f3 fd ff ff       	jmp    c001ff80 <Vm::x87Handler(regs*)+0x432>
c002018d:	8d 50 28             	lea    edx,[eax+0x28]
c0020190:	80 fa 07             	cmp    dl,0x7
c0020193:	77 28                	ja     c00201bd <Vm::x87Handler(regs*)+0x66f>
c0020195:	83 ec 0c             	sub    esp,0xc
c0020198:	6a 00                	push   0x0
c002019a:	e8 72 f8 ff ff       	call   c001fa11 <Vm::fpuGetReg(int)>
c002019f:	83 c4 0c             	add    esp,0xc
c00201a2:	52                   	push   edx
c00201a3:	50                   	push   eax
c00201a4:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00201a8:	2d d8 00 00 00       	sub    eax,0xd8
c00201ad:	50                   	push   eax
c00201ae:	e8 a1 f8 ff ff       	call   c001fa54 <Vm::fpuSetReg(int, unsigned long long)>
c00201b3:	e8 44 f9 ff ff       	call   c001fafc <Vm::fpuPop()>
c00201b8:	e9 01 fa ff ff       	jmp    c001fbbe <Vm::x87Handler(regs*)+0x70>
c00201bd:	8d 50 20             	lea    edx,[eax+0x20]
c00201c0:	80 fa 07             	cmp    dl,0x7
c00201c3:	77 30                	ja     c00201f5 <Vm::x87Handler(regs*)+0x6a7>
c00201c5:	83 ec 0c             	sub    esp,0xc
c00201c8:	2d e0 00 00 00       	sub    eax,0xe0
c00201cd:	50                   	push   eax
c00201ce:	e8 3e f8 ff ff       	call   c001fa11 <Vm::fpuGetReg(int)>
c00201d3:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00201da:	89 c6                	mov    esi,eax
c00201dc:	89 d7                	mov    edi,edx
c00201de:	e8 2e f8 ff ff       	call   c001fa11 <Vm::fpuGetReg(int)>
c00201e3:	57                   	push   edi
c00201e4:	56                   	push   esi
c00201e5:	52                   	push   edx
c00201e6:	50                   	push   eax
c00201e7:	e8 48 f7 ff ff       	call   c001f934 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c00201ec:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c00201f0:	e9 54 02 00 00       	jmp    c0020449 <Vm::x87Handler(regs*)+0x8fb>
c00201f5:	8d 50 18             	lea    edx,[eax+0x18]
c00201f8:	80 fa 07             	cmp    dl,0x7
c00201fb:	0f 87 43 fb ff ff    	ja     c001fd44 <Vm::x87Handler(regs*)+0x1f6>
c0020201:	83 ec 0c             	sub    esp,0xc
c0020204:	2d e8 00 00 00       	sub    eax,0xe8
c0020209:	50                   	push   eax
c002020a:	e8 02 f8 ff ff       	call   c001fa11 <Vm::fpuGetReg(int)>
c002020f:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020216:	89 c6                	mov    esi,eax
c0020218:	89 d7                	mov    edi,edx
c002021a:	e8 f2 f7 ff ff       	call   c001fa11 <Vm::fpuGetReg(int)>
c002021f:	57                   	push   edi
c0020220:	56                   	push   esi
c0020221:	52                   	push   edx
c0020222:	50                   	push   eax
c0020223:	e8 0c f7 ff ff       	call   c001f934 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c0020228:	83 c4 20             	add    esp,0x20
c002022b:	e8 cc f8 ff ff       	call   c001fafc <Vm::fpuPop()>
c0020230:	eb 62                	jmp    c0020294 <Vm::x87Handler(regs*)+0x746>
c0020232:	80 7d 01 e9          	cmp    BYTE PTR [ebp+0x1],0xe9
c0020236:	0f 85 0f 01 00 00    	jne    c002034b <Vm::x87Handler(regs*)+0x7fd>
c002023c:	83 ec 0c             	sub    esp,0xc
c002023f:	6a 01                	push   0x1
c0020241:	e8 cb f7 ff ff       	call   c001fa11 <Vm::fpuGetReg(int)>
c0020246:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c002024d:	89 c6                	mov    esi,eax
c002024f:	89 d7                	mov    edi,edx
c0020251:	e8 bb f7 ff ff       	call   c001fa11 <Vm::fpuGetReg(int)>
c0020256:	57                   	push   edi
c0020257:	56                   	push   esi
c0020258:	52                   	push   edx
c0020259:	50                   	push   eax
c002025a:	e8 d5 f6 ff ff       	call   c001f934 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c002025f:	83 c4 20             	add    esp,0x20
c0020262:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0020266:	e8 91 f8 ff ff       	call   c001fafc <Vm::fpuPop()>
c002026b:	e8 8c f8 ff ff       	call   c001fafc <Vm::fpuPop()>
c0020270:	e9 50 f9 ff ff       	jmp    c001fbc5 <Vm::x87Handler(regs*)+0x77>
c0020275:	3c d9                	cmp    al,0xd9
c0020277:	0f 85 b5 02 00 00    	jne    c0020532 <Vm::x87Handler(regs*)+0x9e4>
c002027d:	eb bd                	jmp    c002023c <Vm::x87Handler(regs*)+0x6ee>
c002027f:	80 7d 01 e0          	cmp    BYTE PTR [ebp+0x1],0xe0
c0020283:	0f 85 ea 02 00 00    	jne    c0020573 <Vm::x87Handler(regs*)+0xa25>
c0020289:	0f b7 05 c0 1c 03 c0 	movzx  eax,WORD PTR ds:0xc0031cc0
c0020290:	66 89 43 2c          	mov    WORD PTR [ebx+0x2c],ax
c0020294:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0020298:	e9 28 f9 ff ff       	jmp    c001fbc5 <Vm::x87Handler(regs*)+0x77>
c002029d:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c00202a1:	84 d2                	test   dl,dl
c00202a3:	75 0f                	jne    c00202b4 <Vm::x87Handler(regs*)+0x766>
c00202a5:	83 ec 0c             	sub    esp,0xc
c00202a8:	ff 36                	push   DWORD PTR [esi]
c00202aa:	e8 b1 f4 ff ff       	call   c001f760 <Vm::fpu32ToInternal(unsigned int)>
c00202af:	e9 2c 01 00 00       	jmp    c00203e0 <Vm::x87Handler(regs*)+0x892>
c00202b4:	80 fa 01             	cmp    dl,0x1
c00202b7:	75 0f                	jne    c00202c8 <Vm::x87Handler(regs*)+0x77a>
c00202b9:	83 ec 0c             	sub    esp,0xc
c00202bc:	ff 36                	push   DWORD PTR [esi]
c00202be:	e8 9d f4 ff ff       	call   c001f760 <Vm::fpu32ToInternal(unsigned int)>
c00202c3:	e9 81 02 00 00       	jmp    c0020549 <Vm::x87Handler(regs*)+0x9fb>
c00202c8:	80 fa 04             	cmp    dl,0x4
c00202cb:	75 0f                	jne    c00202dc <Vm::x87Handler(regs*)+0x78e>
c00202cd:	83 ec 0c             	sub    esp,0xc
c00202d0:	ff 36                	push   DWORD PTR [esi]
c00202d2:	e8 89 f4 ff ff       	call   c001f760 <Vm::fpu32ToInternal(unsigned int)>
c00202d7:	e9 86 01 00 00       	jmp    c0020462 <Vm::x87Handler(regs*)+0x914>
c00202dc:	80 fa 05             	cmp    dl,0x5
c00202df:	75 1b                	jne    c00202fc <Vm::x87Handler(regs*)+0x7ae>
c00202e1:	83 ec 0c             	sub    esp,0xc
c00202e4:	6a 00                	push   0x0
c00202e6:	e8 26 f7 ff ff       	call   c001fa11 <Vm::fpuGetReg(int)>
c00202eb:	89 c7                	mov    edi,eax
c00202ed:	89 d5                	mov    ebp,edx
c00202ef:	58                   	pop    eax
c00202f0:	ff 36                	push   DWORD PTR [esi]
c00202f2:	e8 69 f4 ff ff       	call   c001f760 <Vm::fpu32ToInternal(unsigned int)>
c00202f7:	e9 a3 01 00 00       	jmp    c002049f <Vm::x87Handler(regs*)+0x951>
c00202fc:	80 fa 06             	cmp    dl,0x6
c00202ff:	75 0f                	jne    c0020310 <Vm::x87Handler(regs*)+0x7c2>
c0020301:	83 ec 0c             	sub    esp,0xc
c0020304:	ff 36                	push   DWORD PTR [esi]
c0020306:	e8 55 f4 ff ff       	call   c001f760 <Vm::fpu32ToInternal(unsigned int)>
c002030b:	e9 ae 01 00 00       	jmp    c00204be <Vm::x87Handler(regs*)+0x970>
c0020310:	31 c0                	xor    eax,eax
c0020312:	80 fa 07             	cmp    dl,0x7
c0020315:	0f 85 94 02 00 00    	jne    c00205af <Vm::x87Handler(regs*)+0xa61>
c002031b:	83 ec 0c             	sub    esp,0xc
c002031e:	6a 00                	push   0x0
c0020320:	e8 ec f6 ff ff       	call   c001fa11 <Vm::fpuGetReg(int)>
c0020325:	89 c7                	mov    edi,eax
c0020327:	89 d5                	mov    ebp,edx
c0020329:	58                   	pop    eax
c002032a:	ff 36                	push   DWORD PTR [esi]
c002032c:	e8 2f f4 ff ff       	call   c001f760 <Vm::fpu32ToInternal(unsigned int)>
c0020331:	e9 cb 01 00 00       	jmp    c0020501 <Vm::x87Handler(regs*)+0x9b3>
c0020336:	80 fa 03             	cmp    dl,0x3
c0020339:	0f 85 d3 01 00 00    	jne    c0020512 <Vm::x87Handler(regs*)+0x9c4>
c002033f:	e8 b8 f7 ff ff       	call   c001fafc <Vm::fpuPop()>
c0020344:	51                   	push   ecx
c0020345:	51                   	push   ecx
c0020346:	e9 de 01 00 00       	jmp    c0020529 <Vm::x87Handler(regs*)+0x9db>
c002034b:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c002034f:	80 fa 01             	cmp    dl,0x1
c0020352:	75 09                	jne    c002035d <Vm::x87Handler(regs*)+0x80f>
c0020354:	57                   	push   edi
c0020355:	57                   	push   edi
c0020356:	8b 06                	mov    eax,DWORD PTR [esi]
c0020358:	e9 e3 01 00 00       	jmp    c0020540 <Vm::x87Handler(regs*)+0x9f2>
c002035d:	80 fa 04             	cmp    dl,0x4
c0020360:	75 12                	jne    c0020374 <Vm::x87Handler(regs*)+0x826>
c0020362:	31 d2                	xor    edx,edx
c0020364:	51                   	push   ecx
c0020365:	51                   	push   ecx
c0020366:	8b 06                	mov    eax,DWORD PTR [esi]
c0020368:	52                   	push   edx
c0020369:	50                   	push   eax
c002036a:	e8 d0 f4 ff ff       	call   c001f83f <Vm::fpuLongToFloat(long long)>
c002036f:	e9 ee 00 00 00       	jmp    c0020462 <Vm::x87Handler(regs*)+0x914>
c0020374:	31 c0                	xor    eax,eax
c0020376:	80 fa 07             	cmp    dl,0x7
c0020379:	0f 85 30 02 00 00    	jne    c00205af <Vm::x87Handler(regs*)+0xa61>
c002037f:	83 ec 0c             	sub    esp,0xc
c0020382:	6a 00                	push   0x0
c0020384:	e8 88 f6 ff ff       	call   c001fa11 <Vm::fpuGetReg(int)>
c0020389:	89 c7                	mov    edi,eax
c002038b:	89 d5                	mov    ebp,edx
c002038d:	58                   	pop    eax
c002038e:	8b 06                	mov    eax,DWORD PTR [esi]
c0020390:	5a                   	pop    edx
c0020391:	31 d2                	xor    edx,edx
c0020393:	52                   	push   edx
c0020394:	50                   	push   eax
c0020395:	e8 a5 f4 ff ff       	call   c001f83f <Vm::fpuLongToFloat(long long)>
c002039a:	e9 62 01 00 00       	jmp    c0020501 <Vm::x87Handler(regs*)+0x9b3>
c002039f:	84 d2                	test   dl,dl
c00203a1:	75 0d                	jne    c00203b0 <Vm::x87Handler(regs*)+0x862>
c00203a3:	31 d2                	xor    edx,edx
c00203a5:	55                   	push   ebp
c00203a6:	55                   	push   ebp
c00203a7:	8b 06                	mov    eax,DWORD PTR [esi]
c00203a9:	52                   	push   edx
c00203aa:	50                   	push   eax
c00203ab:	e9 d3 01 00 00       	jmp    c0020583 <Vm::x87Handler(regs*)+0xa35>
c00203b0:	31 c0                	xor    eax,eax
c00203b2:	80 fa 02             	cmp    dl,0x2
c00203b5:	0f 85 f4 01 00 00    	jne    c00205af <Vm::x87Handler(regs*)+0xa61>
c00203bb:	83 ec 0c             	sub    esp,0xc
c00203be:	6a 00                	push   0x0
c00203c0:	e8 4c f6 ff ff       	call   c001fa11 <Vm::fpuGetReg(int)>
c00203c5:	59                   	pop    ecx
c00203c6:	5f                   	pop    edi
c00203c7:	e9 6a f9 ff ff       	jmp    c001fd36 <Vm::x87Handler(regs*)+0x1e8>
c00203cc:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c00203d0:	84 d2                	test   dl,dl
c00203d2:	75 2a                	jne    c00203fe <Vm::x87Handler(regs*)+0x8b0>
c00203d4:	50                   	push   eax
c00203d5:	50                   	push   eax
c00203d6:	ff 76 04             	push   DWORD PTR [esi+0x4]
c00203d9:	ff 36                	push   DWORD PTR [esi]
c00203db:	e8 c5 f3 ff ff       	call   c001f7a5 <Vm::fpu64ToInternal(unsigned long long)>
c00203e0:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00203e7:	89 c6                	mov    esi,eax
c00203e9:	89 d7                	mov    edi,edx
c00203eb:	e8 21 f6 ff ff       	call   c001fa11 <Vm::fpuGetReg(int)>
c00203f0:	57                   	push   edi
c00203f1:	56                   	push   esi
c00203f2:	52                   	push   edx
c00203f3:	50                   	push   eax
c00203f4:	e8 8e f5 ff ff       	call   c001f987 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c00203f9:	e9 64 01 00 00       	jmp    c0020562 <Vm::x87Handler(regs*)+0xa14>
c00203fe:	80 fa 01             	cmp    dl,0x1
c0020401:	75 11                	jne    c0020414 <Vm::x87Handler(regs*)+0x8c6>
c0020403:	50                   	push   eax
c0020404:	50                   	push   eax
c0020405:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020408:	ff 36                	push   DWORD PTR [esi]
c002040a:	e8 96 f3 ff ff       	call   c001f7a5 <Vm::fpu64ToInternal(unsigned long long)>
c002040f:	e9 35 01 00 00       	jmp    c0020549 <Vm::x87Handler(regs*)+0x9fb>
c0020414:	80 fa 02             	cmp    dl,0x2
c0020417:	0f 85 54 f9 ff ff    	jne    c001fd71 <Vm::x87Handler(regs*)+0x223>
c002041d:	55                   	push   ebp
c002041e:	55                   	push   ebp
c002041f:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020422:	ff 36                	push   DWORD PTR [esi]
c0020424:	e8 7c f3 ff ff       	call   c001f7a5 <Vm::fpu64ToInternal(unsigned long long)>
c0020429:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020430:	89 c6                	mov    esi,eax
c0020432:	89 d7                	mov    edi,edx
c0020434:	e8 d8 f5 ff ff       	call   c001fa11 <Vm::fpuGetReg(int)>
c0020439:	57                   	push   edi
c002043a:	56                   	push   esi
c002043b:	52                   	push   edx
c002043c:	50                   	push   eax
c002043d:	e8 f2 f4 ff ff       	call   c001f934 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c0020442:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0020446:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c0020449:	83 c4 20             	add    esp,0x20
c002044c:	e9 74 f7 ff ff       	jmp    c001fbc5 <Vm::x87Handler(regs*)+0x77>
c0020451:	80 fa 04             	cmp    dl,0x4
c0020454:	75 2a                	jne    c0020480 <Vm::x87Handler(regs*)+0x932>
c0020456:	51                   	push   ecx
c0020457:	51                   	push   ecx
c0020458:	ff 76 04             	push   DWORD PTR [esi+0x4]
c002045b:	ff 36                	push   DWORD PTR [esi]
c002045d:	e8 43 f3 ff ff       	call   c001f7a5 <Vm::fpu64ToInternal(unsigned long long)>
c0020462:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020469:	89 c6                	mov    esi,eax
c002046b:	89 d7                	mov    edi,edx
c002046d:	e8 9f f5 ff ff       	call   c001fa11 <Vm::fpuGetReg(int)>
c0020472:	57                   	push   edi
c0020473:	56                   	push   esi
c0020474:	52                   	push   edx
c0020475:	50                   	push   eax
c0020476:	e8 36 f5 ff ff       	call   c001f9b1 <Vm::fpuSub(unsigned long long, unsigned long long)>
c002047b:	e9 e2 00 00 00       	jmp    c0020562 <Vm::x87Handler(regs*)+0xa14>
c0020480:	80 fa 05             	cmp    dl,0x5
c0020483:	75 28                	jne    c00204ad <Vm::x87Handler(regs*)+0x95f>
c0020485:	83 ec 0c             	sub    esp,0xc
c0020488:	6a 00                	push   0x0
c002048a:	e8 82 f5 ff ff       	call   c001fa11 <Vm::fpuGetReg(int)>
c002048f:	89 c7                	mov    edi,eax
c0020491:	89 d5                	mov    ebp,edx
c0020493:	58                   	pop    eax
c0020494:	5a                   	pop    edx
c0020495:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020498:	ff 36                	push   DWORD PTR [esi]
c002049a:	e8 06 f3 ff ff       	call   c001f7a5 <Vm::fpu64ToInternal(unsigned long long)>
c002049f:	83 c4 10             	add    esp,0x10
c00204a2:	55                   	push   ebp
c00204a3:	57                   	push   edi
c00204a4:	52                   	push   edx
c00204a5:	50                   	push   eax
c00204a6:	e8 06 f5 ff ff       	call   c001f9b1 <Vm::fpuSub(unsigned long long, unsigned long long)>
c00204ab:	eb 60                	jmp    c002050d <Vm::x87Handler(regs*)+0x9bf>
c00204ad:	80 fa 06             	cmp    dl,0x6
c00204b0:	75 2a                	jne    c00204dc <Vm::x87Handler(regs*)+0x98e>
c00204b2:	51                   	push   ecx
c00204b3:	51                   	push   ecx
c00204b4:	ff 76 04             	push   DWORD PTR [esi+0x4]
c00204b7:	ff 36                	push   DWORD PTR [esi]
c00204b9:	e8 e7 f2 ff ff       	call   c001f7a5 <Vm::fpu64ToInternal(unsigned long long)>
c00204be:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00204c5:	89 c6                	mov    esi,eax
c00204c7:	89 d7                	mov    edi,edx
c00204c9:	e8 43 f5 ff ff       	call   c001fa11 <Vm::fpuGetReg(int)>
c00204ce:	57                   	push   edi
c00204cf:	56                   	push   esi
c00204d0:	52                   	push   edx
c00204d1:	50                   	push   eax
c00204d2:	e8 08 f5 ff ff       	call   c001f9df <Vm::fpuDivide(unsigned long long, unsigned long long)>
c00204d7:	e9 86 00 00 00       	jmp    c0020562 <Vm::x87Handler(regs*)+0xa14>
c00204dc:	31 c0                	xor    eax,eax
c00204de:	80 fa 07             	cmp    dl,0x7
c00204e1:	0f 85 c8 00 00 00    	jne    c00205af <Vm::x87Handler(regs*)+0xa61>
c00204e7:	83 ec 0c             	sub    esp,0xc
c00204ea:	6a 00                	push   0x0
c00204ec:	e8 20 f5 ff ff       	call   c001fa11 <Vm::fpuGetReg(int)>
c00204f1:	89 c7                	mov    edi,eax
c00204f3:	89 d5                	mov    ebp,edx
c00204f5:	58                   	pop    eax
c00204f6:	5a                   	pop    edx
c00204f7:	ff 76 04             	push   DWORD PTR [esi+0x4]
c00204fa:	ff 36                	push   DWORD PTR [esi]
c00204fc:	e8 a4 f2 ff ff       	call   c001f7a5 <Vm::fpu64ToInternal(unsigned long long)>
c0020501:	83 c4 10             	add    esp,0x10
c0020504:	55                   	push   ebp
c0020505:	57                   	push   edi
c0020506:	52                   	push   edx
c0020507:	50                   	push   eax
c0020508:	e8 d2 f4 ff ff       	call   c001f9df <Vm::fpuDivide(unsigned long long, unsigned long long)>
c002050d:	83 c4 0c             	add    esp,0xc
c0020510:	eb 53                	jmp    c0020565 <Vm::x87Handler(regs*)+0xa17>
c0020512:	31 c0                	xor    eax,eax
c0020514:	80 fa 02             	cmp    dl,0x2
c0020517:	0f 85 92 00 00 00    	jne    c00205af <Vm::x87Handler(regs*)+0xa61>
c002051d:	83 ec 0c             	sub    esp,0xc
c0020520:	6a 00                	push   0x0
c0020522:	e8 ea f4 ff ff       	call   c001fa11 <Vm::fpuGetReg(int)>
c0020527:	59                   	pop    ecx
c0020528:	5f                   	pop    edi
c0020529:	52                   	push   edx
c002052a:	50                   	push   eax
c002052b:	e8 27 f2 ff ff       	call   c001f757 <Vm::fpuInternalTo64(unsigned long long)>
c0020530:	eb 70                	jmp    c00205a2 <Vm::x87Handler(regs*)+0xa54>
c0020532:	31 c0                	xor    eax,eax
c0020534:	80 7c 24 0b 01       	cmp    BYTE PTR [esp+0xb],0x1
c0020539:	75 74                	jne    c00205af <Vm::x87Handler(regs*)+0xa61>
c002053b:	50                   	push   eax
c002053c:	50                   	push   eax
c002053d:	0f b7 06             	movzx  eax,WORD PTR [esi]
c0020540:	31 d2                	xor    edx,edx
c0020542:	52                   	push   edx
c0020543:	50                   	push   eax
c0020544:	e8 f6 f2 ff ff       	call   c001f83f <Vm::fpuLongToFloat(long long)>
c0020549:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020550:	89 c6                	mov    esi,eax
c0020552:	89 d7                	mov    edi,edx
c0020554:	e8 b8 f4 ff ff       	call   c001fa11 <Vm::fpuGetReg(int)>
c0020559:	57                   	push   edi
c002055a:	56                   	push   esi
c002055b:	52                   	push   edx
c002055c:	50                   	push   eax
c002055d:	e8 5e f4 ff ff       	call   c001f9c0 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c0020562:	83 c4 1c             	add    esp,0x1c
c0020565:	52                   	push   edx
c0020566:	50                   	push   eax
c0020567:	6a 00                	push   0x0
c0020569:	e8 e6 f4 ff ff       	call   c001fa54 <Vm::fpuSetReg(int, unsigned long long)>
c002056e:	e9 f2 f7 ff ff       	jmp    c001fd65 <Vm::x87Handler(regs*)+0x217>
c0020573:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c0020577:	80 fa 05             	cmp    dl,0x5
c002057a:	75 11                	jne    c002058d <Vm::x87Handler(regs*)+0xa3f>
c002057c:	55                   	push   ebp
c002057d:	55                   	push   ebp
c002057e:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020581:	ff 36                	push   DWORD PTR [esi]
c0020583:	e8 81 f2 ff ff       	call   c001f809 <Vm::fpuULongToFloat(unsigned long long)>
c0020588:	e9 cf f7 ff ff       	jmp    c001fd5c <Vm::x87Handler(regs*)+0x20e>
c002058d:	31 c0                	xor    eax,eax
c002058f:	80 fa 07             	cmp    dl,0x7
c0020592:	75 1b                	jne    c00205af <Vm::x87Handler(regs*)+0xa61>
c0020594:	e8 63 f5 ff ff       	call   c001fafc <Vm::fpuPop()>
c0020599:	51                   	push   ecx
c002059a:	51                   	push   ecx
c002059b:	52                   	push   edx
c002059c:	50                   	push   eax
c002059d:	e8 0c f2 ff ff       	call   c001f7ae <Vm::fpuFloatToLong(unsigned long long)>
c00205a2:	83 c4 10             	add    esp,0x10
c00205a5:	89 06                	mov    DWORD PTR [esi],eax
c00205a7:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c00205aa:	e9 f8 f7 ff ff       	jmp    c001fda7 <Vm::x87Handler(regs*)+0x259>
c00205af:	83 c4 1c             	add    esp,0x1c
c00205b2:	5b                   	pop    ebx
c00205b3:	5e                   	pop    esi
c00205b4:	5f                   	pop    edi
c00205b5:	5d                   	pop    ebp
c00205b6:	c3                   	ret    

c00205b7 <__static_initialization_and_destruction_0(int, int)>:
c00205b7:	83 ec 0c             	sub    esp,0xc
c00205ba:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c00205bf:	75 1a                	jne    c00205db <__static_initialization_and_destruction_0(int, int)+0x24>
c00205c1:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00205c9:	75 10                	jne    c00205db <__static_initialization_and_destruction_0(int, int)+0x24>
c00205cb:	83 ec 0c             	sub    esp,0xc
c00205ce:	68 c0 1c 03 c0       	push   0xc0031cc0
c00205d3:	e8 18 88 00 00       	call   c0028df0 <Vm::_FPUState::_FPUState()>
c00205d8:	83 c4 10             	add    esp,0x10
c00205db:	90                   	nop
c00205dc:	83 c4 0c             	add    esp,0xc
c00205df:	c3                   	ret    

c00205e0 <_GLOBAL__sub_I__ZN2Vm8fpuStateE>:
c00205e0:	83 ec 0c             	sub    esp,0xc
c00205e3:	83 ec 08             	sub    esp,0x8
c00205e6:	68 ff ff 00 00       	push   0xffff
c00205eb:	6a 01                	push   0x1
c00205ed:	e8 c5 ff ff ff       	call   c00205b7 <__static_initialization_and_destruction_0(int, int)>
c00205f2:	83 c4 10             	add    esp,0x10
c00205f5:	83 c4 0c             	add    esp,0xc
c00205f8:	c3                   	ret    
c00205f9:	90                   	nop

c00205fa <FAT::getName()>:
c00205fa:	b8 d4 ca 02 c0       	mov    eax,0xc002cad4
c00205ff:	c3                   	ret    

c0020600 <FAT::tell(void*, unsigned long long*)>:
c0020600:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0020605:	75 06                	jne    c002060d <FAT::tell(void*, unsigned long long*)+0xd>
c0020607:	b8 04 00 00 00       	mov    eax,0x4
c002060c:	c3                   	ret    
c002060d:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0020612:	75 06                	jne    c002061a <FAT::tell(void*, unsigned long long*)+0x1a>
c0020614:	b8 04 00 00 00       	mov    eax,0x4
c0020619:	c3                   	ret    
c002061a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002061e:	8b 50 30             	mov    edx,DWORD PTR [eax+0x30]
c0020621:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0020624:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0020628:	89 01                	mov    DWORD PTR [ecx],eax
c002062a:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c002062d:	b8 00 00 00 00       	mov    eax,0x0
c0020632:	c3                   	ret    
c0020633:	90                   	nop

c0020634 <FAT::stat(void*, unsigned long long*)>:
c0020634:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0020639:	75 06                	jne    c0020641 <FAT::stat(void*, unsigned long long*)+0xd>
c002063b:	b8 04 00 00 00       	mov    eax,0x4
c0020640:	c3                   	ret    
c0020641:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0020646:	75 06                	jne    c002064e <FAT::stat(void*, unsigned long long*)+0x1a>
c0020648:	b8 04 00 00 00       	mov    eax,0x4
c002064d:	c3                   	ret    
c002064e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020652:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0020655:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0020658:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c002065c:	89 01                	mov    DWORD PTR [ecx],eax
c002065e:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0020661:	b8 00 00 00 00       	mov    eax,0x0
c0020666:	c3                   	ret    
c0020667:	90                   	nop

c0020668 <FAT::~FAT()>:
c0020668:	83 ec 0c             	sub    esp,0xc
c002066b:	ba 58 cb 02 c0       	mov    edx,0xc002cb58
c0020670:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020674:	89 10                	mov    DWORD PTR [eax],edx
c0020676:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002067a:	83 ec 0c             	sub    esp,0xc
c002067d:	50                   	push   eax
c002067e:	e8 89 2c ff ff       	call   c001330c <Filesystem::~Filesystem()>
c0020683:	83 c4 10             	add    esp,0x10
c0020686:	90                   	nop
c0020687:	83 c4 0c             	add    esp,0xc
c002068a:	c3                   	ret    
c002068b:	90                   	nop

c002068c <FAT::~FAT()>:
c002068c:	83 ec 0c             	sub    esp,0xc
c002068f:	83 ec 0c             	sub    esp,0xc
c0020692:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020696:	e8 cd ff ff ff       	call   c0020668 <FAT::~FAT()>
c002069b:	83 c4 10             	add    esp,0x10
c002069e:	83 ec 08             	sub    esp,0x8
c00206a1:	6a 08                	push   0x8
c00206a3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00206a7:	e8 57 28 ff ff       	call   c0012f03 <operator delete(void*, unsigned long)>
c00206ac:	83 c4 10             	add    esp,0x10
c00206af:	83 c4 0c             	add    esp,0xc
c00206b2:	c3                   	ret    
c00206b3:	90                   	nop

c00206b4 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c00206b4:	83 ec 1c             	sub    esp,0x1c
c00206b7:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c00206be:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c00206c3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00206c7:	8b 04 85 40 1d 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce2c0]
c00206ce:	83 f8 ff             	cmp    eax,0xffffffff
c00206d1:	75 34                	jne    c0020707 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x53>
c00206d3:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00206d7:	88 c2                	mov    dl,al
c00206d9:	a1 20 1d 03 c0       	mov    eax,ds:0xc0031d20
c00206de:	01 d0                	add    eax,edx
c00206e0:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c00206e4:	8b 15 20 1d 03 c0    	mov    edx,DWORD PTR ds:0xc0031d20
c00206ea:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00206ee:	89 14 85 40 1d 03 c0 	mov    DWORD PTR [eax*4-0x3ffce2c0],edx
c00206f5:	a1 20 1d 03 c0       	mov    eax,ds:0xc0031d20
c00206fa:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00206fe:	89 14 85 c0 1d 03 c0 	mov    DWORD PTR [eax*4-0x3ffce240],edx
c0020705:	eb 17                	jmp    c002071e <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6a>
c0020707:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c002070b:	88 c2                	mov    dl,al
c002070d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020711:	8b 04 85 40 1d 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce2c0]
c0020718:	01 d0                	add    eax,edx
c002071a:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c002071e:	83 ec 04             	sub    esp,0x4
c0020721:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0020725:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0020729:	8d 44 24 15          	lea    eax,[esp+0x15]
c002072d:	50                   	push   eax
c002072e:	e8 05 66 fe ff       	call   c0006d38 <f_getlabel>
c0020733:	83 c4 10             	add    esp,0x10
c0020736:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002073a:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c002073f:	75 07                	jne    c0020748 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x94>
c0020741:	b8 00 00 00 00       	mov    eax,0x0
c0020746:	eb 05                	jmp    c002074d <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x99>
c0020748:	b8 01 00 00 00       	mov    eax,0x1
c002074d:	83 c4 1c             	add    esp,0x1c
c0020750:	c3                   	ret    
c0020751:	90                   	nop

c0020752 <FAT::setlabel(LogicalDisk*, int, char*)>:
c0020752:	57                   	push   edi
c0020753:	83 ec 58             	sub    esp,0x58
c0020756:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c002075e:	8d 54 24 10          	lea    edx,[esp+0x10]
c0020762:	b9 0f 00 00 00       	mov    ecx,0xf
c0020767:	b8 00 00 00 00       	mov    eax,0x0
c002076c:	fc                   	cld    
c002076d:	89 d7                	mov    edi,edx
c002076f:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0020771:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0020775:	8b 04 85 40 1d 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce2c0]
c002077c:	83 f8 ff             	cmp    eax,0xffffffff
c002077f:	75 34                	jne    c00207b5 <FAT::setlabel(LogicalDisk*, int, char*)+0x63>
c0020781:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0020785:	88 c2                	mov    dl,al
c0020787:	a1 20 1d 03 c0       	mov    eax,ds:0xc0031d20
c002078c:	01 d0                	add    eax,edx
c002078e:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0020792:	8b 15 20 1d 03 c0    	mov    edx,DWORD PTR ds:0xc0031d20
c0020798:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c002079c:	89 14 85 40 1d 03 c0 	mov    DWORD PTR [eax*4-0x3ffce2c0],edx
c00207a3:	a1 20 1d 03 c0       	mov    eax,ds:0xc0031d20
c00207a8:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c00207ac:	89 14 85 c0 1d 03 c0 	mov    DWORD PTR [eax*4-0x3ffce240],edx
c00207b3:	eb 17                	jmp    c00207cc <FAT::setlabel(LogicalDisk*, int, char*)+0x7a>
c00207b5:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00207b9:	88 c2                	mov    dl,al
c00207bb:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00207bf:	8b 04 85 40 1d 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce2c0]
c00207c6:	01 d0                	add    eax,edx
c00207c8:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00207cc:	83 ec 08             	sub    esp,0x8
c00207cf:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c00207d3:	8d 44 24 18          	lea    eax,[esp+0x18]
c00207d7:	50                   	push   eax
c00207d8:	e8 97 01 fe ff       	call   c0000974 <strcat>
c00207dd:	83 c4 10             	add    esp,0x10
c00207e0:	83 ec 0c             	sub    esp,0xc
c00207e3:	8d 44 24 18          	lea    eax,[esp+0x18]
c00207e7:	50                   	push   eax
c00207e8:	e8 39 67 fe ff       	call   c0006f26 <f_setlabel>
c00207ed:	83 c4 10             	add    esp,0x10
c00207f0:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c00207f4:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c00207f9:	75 07                	jne    c0020802 <FAT::setlabel(LogicalDisk*, int, char*)+0xb0>
c00207fb:	b8 00 00 00 00       	mov    eax,0x0
c0020800:	eb 05                	jmp    c0020807 <FAT::setlabel(LogicalDisk*, int, char*)+0xb5>
c0020802:	b8 01 00 00 00       	mov    eax,0x1
c0020807:	83 c4 58             	add    esp,0x58
c002080a:	5f                   	pop    edi
c002080b:	c3                   	ret    

c002080c <FAT::format(LogicalDisk*, int, char const*, int)>:
c002080c:	83 ec 2c             	sub    esp,0x2c
c002080f:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0020817:	83 ec 08             	sub    esp,0x8
c002081a:	68 f8 ca 02 c0       	push   0xc002caf8
c002081f:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0020823:	e8 98 00 fe ff       	call   c00008c0 <strcmp>
c0020828:	83 c4 10             	add    esp,0x10
c002082b:	85 c0                	test   eax,eax
c002082d:	0f 94 c0             	sete   al
c0020830:	84 c0                	test   al,al
c0020832:	74 0d                	je     c0020841 <FAT::format(LogicalDisk*, int, char const*, int)+0x35>
c0020834:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c002083c:	e9 a6 00 00 00       	jmp    c00208e7 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0020841:	83 ec 08             	sub    esp,0x8
c0020844:	68 ea ca 02 c0       	push   0xc002caea
c0020849:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c002084d:	e8 6e 00 fe ff       	call   c00008c0 <strcmp>
c0020852:	83 c4 10             	add    esp,0x10
c0020855:	85 c0                	test   eax,eax
c0020857:	0f 94 c0             	sete   al
c002085a:	84 c0                	test   al,al
c002085c:	74 0a                	je     c0020868 <FAT::format(LogicalDisk*, int, char const*, int)+0x5c>
c002085e:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0020866:	eb 7f                	jmp    c00208e7 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0020868:	83 ec 08             	sub    esp,0x8
c002086b:	68 f0 ca 02 c0       	push   0xc002caf0
c0020870:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0020874:	e8 47 00 fe ff       	call   c00008c0 <strcmp>
c0020879:	83 c4 10             	add    esp,0x10
c002087c:	85 c0                	test   eax,eax
c002087e:	0f 94 c0             	sete   al
c0020881:	84 c0                	test   al,al
c0020883:	74 0a                	je     c002088f <FAT::format(LogicalDisk*, int, char const*, int)+0x83>
c0020885:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c002088d:	eb 58                	jmp    c00208e7 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c002088f:	83 ec 08             	sub    esp,0x8
c0020892:	68 4c 95 02 c0       	push   0xc002954c
c0020897:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c002089b:	e8 20 00 fe ff       	call   c00008c0 <strcmp>
c00208a0:	83 c4 10             	add    esp,0x10
c00208a3:	85 c0                	test   eax,eax
c00208a5:	0f 94 c0             	sete   al
c00208a8:	84 c0                	test   al,al
c00208aa:	74 0a                	je     c00208b6 <FAT::format(LogicalDisk*, int, char const*, int)+0xaa>
c00208ac:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c00208b4:	eb 31                	jmp    c00208e7 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c00208b6:	83 ec 08             	sub    esp,0x8
c00208b9:	68 f6 ca 02 c0       	push   0xc002caf6
c00208be:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00208c2:	e8 f9 ff fd ff       	call   c00008c0 <strcmp>
c00208c7:	83 c4 10             	add    esp,0x10
c00208ca:	85 c0                	test   eax,eax
c00208cc:	0f 94 c0             	sete   al
c00208cf:	84 c0                	test   al,al
c00208d1:	74 0a                	je     c00208dd <FAT::format(LogicalDisk*, int, char const*, int)+0xd1>
c00208d3:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c00208db:	eb 0a                	jmp    c00208e7 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c00208dd:	b8 08 00 00 00       	mov    eax,0x8
c00208e2:	e9 04 01 00 00       	jmp    c00209eb <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c00208e7:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c00208ee:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c00208f3:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00208f7:	8b 04 85 40 1d 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce2c0]
c00208fe:	83 f8 ff             	cmp    eax,0xffffffff
c0020901:	75 34                	jne    c0020937 <FAT::format(LogicalDisk*, int, char const*, int)+0x12b>
c0020903:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0020907:	88 c2                	mov    dl,al
c0020909:	a1 20 1d 03 c0       	mov    eax,ds:0xc0031d20
c002090e:	01 d0                	add    eax,edx
c0020910:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0020914:	8b 15 20 1d 03 c0    	mov    edx,DWORD PTR ds:0xc0031d20
c002091a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c002091e:	89 14 85 40 1d 03 c0 	mov    DWORD PTR [eax*4-0x3ffce2c0],edx
c0020925:	a1 20 1d 03 c0       	mov    eax,ds:0xc0031d20
c002092a:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c002092e:	89 14 85 c0 1d 03 c0 	mov    DWORD PTR [eax*4-0x3ffce240],edx
c0020935:	eb 17                	jmp    c002094e <FAT::format(LogicalDisk*, int, char const*, int)+0x142>
c0020937:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c002093b:	88 c2                	mov    dl,al
c002093d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020941:	8b 04 85 40 1d 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce2c0]
c0020948:	01 d0                	add    eax,edx
c002094a:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c002094e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0020952:	88 04 24             	mov    BYTE PTR [esp],al
c0020955:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0020959:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002095d:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0020965:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c002096a:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0020972:	83 ec 0c             	sub    esp,0xc
c0020975:	68 00 20 00 00       	push   0x2000
c002097a:	e8 65 ef fe ff       	call   c000f8e4 <malloc>
c002097f:	83 c4 10             	add    esp,0x10
c0020982:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0020986:	68 00 20 00 00       	push   0x2000
c002098b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002098f:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020993:	50                   	push   eax
c0020994:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c0020998:	50                   	push   eax
c0020999:	e8 d3 69 fe ff       	call   c0007371 <f_mkfs>
c002099e:	83 c4 10             	add    esp,0x10
c00209a1:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00209a5:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00209aa:	75 07                	jne    c00209b3 <FAT::format(LogicalDisk*, int, char const*, int)+0x1a7>
c00209ac:	b8 00 00 00 00       	mov    eax,0x0
c00209b1:	eb 38                	jmp    c00209eb <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c00209b3:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c00209b8:	75 17                	jne    c00209d1 <FAT::format(LogicalDisk*, int, char const*, int)+0x1c5>
c00209ba:	83 ec 0c             	sub    esp,0xc
c00209bd:	68 28 cb 02 c0       	push   0xc002cb28
c00209c2:	e8 1c 26 ff ff       	call   c0012fe3 <Dbg::kprintf(char const*, ...)>
c00209c7:	83 c4 10             	add    esp,0x10
c00209ca:	b8 09 00 00 00       	mov    eax,0x9
c00209cf:	eb 1a                	jmp    c00209eb <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c00209d1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00209d5:	83 ec 08             	sub    esp,0x8
c00209d8:	50                   	push   eax
c00209d9:	68 fc ca 02 c0       	push   0xc002cafc
c00209de:	e8 00 26 ff ff       	call   c0012fe3 <Dbg::kprintf(char const*, ...)>
c00209e3:	83 c4 10             	add    esp,0x10
c00209e6:	b8 01 00 00 00       	mov    eax,0x1
c00209eb:	83 c4 2c             	add    esp,0x2c
c00209ee:	c3                   	ret    
c00209ef:	90                   	nop

c00209f0 <FAT::tryMount(LogicalDisk*, int)>:
c00209f0:	81 ec 6c 03 00 00    	sub    esp,0x36c
c00209f6:	a1 20 1d 03 c0       	mov    eax,ds:0xc0031d20
c00209fb:	83 f8 14             	cmp    eax,0x14
c00209fe:	75 17                	jne    c0020a17 <FAT::tryMount(LogicalDisk*, int)+0x27>
c0020a00:	83 ec 0c             	sub    esp,0xc
c0020a03:	68 0e cb 02 c0       	push   0xc002cb0e
c0020a08:	e8 88 9c ff ff       	call   c001a695 <Krnl::panic(char const*)>
c0020a0d:	83 c4 10             	add    esp,0x10
c0020a10:	b0 00                	mov    al,0x0
c0020a12:	e9 d7 01 00 00       	jmp    c0020bee <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020a17:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c0020a1e:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0020a24:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0020a2a:	3d 00 02 00 00       	cmp    eax,0x200
c0020a2f:	74 07                	je     c0020a38 <FAT::tryMount(LogicalDisk*, int)+0x48>
c0020a31:	b0 00                	mov    al,0x0
c0020a33:	e9 b6 01 00 00       	jmp    c0020bee <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020a38:	c6 84 24 5f 03 00 00 00 	mov    BYTE PTR [esp+0x35f],0x0
c0020a40:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c0020a47:	8b 04 85 40 1d 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce2c0]
c0020a4e:	83 f8 ff             	cmp    eax,0xffffffff
c0020a51:	74 07                	je     c0020a5a <FAT::tryMount(LogicalDisk*, int)+0x6a>
c0020a53:	b0 01                	mov    al,0x1
c0020a55:	e9 94 01 00 00       	jmp    c0020bee <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020a5a:	66 c7 84 24 51 03 00 00 30 3a 	mov    WORD PTR [esp+0x351],0x3a30
c0020a64:	c6 84 24 53 03 00 00 00 	mov    BYTE PTR [esp+0x353],0x0
c0020a6c:	8a 84 24 51 03 00 00 	mov    al,BYTE PTR [esp+0x351]
c0020a73:	88 c2                	mov    dl,al
c0020a75:	a1 20 1d 03 c0       	mov    eax,ds:0xc0031d20
c0020a7a:	01 d0                	add    eax,edx
c0020a7c:	88 84 24 51 03 00 00 	mov    BYTE PTR [esp+0x351],al
c0020a83:	8b 15 20 1d 03 c0    	mov    edx,DWORD PTR ds:0xc0031d20
c0020a89:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c0020a90:	89 14 85 40 1d 03 c0 	mov    DWORD PTR [eax*4-0x3ffce2c0],edx
c0020a97:	a1 20 1d 03 c0       	mov    eax,ds:0xc0031d20
c0020a9c:	8b 94 24 78 03 00 00 	mov    edx,DWORD PTR [esp+0x378]
c0020aa3:	89 14 85 c0 1d 03 c0 	mov    DWORD PTR [eax*4-0x3ffce240],edx
c0020aaa:	83 ec 0c             	sub    esp,0xc
c0020aad:	68 54 02 00 00       	push   0x254
c0020ab2:	e8 2d ee fe ff       	call   c000f8e4 <malloc>
c0020ab7:	83 c4 10             	add    esp,0x10
c0020aba:	89 84 24 58 03 00 00 	mov    DWORD PTR [esp+0x358],eax
c0020ac1:	83 ec 04             	sub    esp,0x4
c0020ac4:	6a 00                	push   0x0
c0020ac6:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c0020acd:	50                   	push   eax
c0020ace:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c0020ad5:	e8 55 44 fe ff       	call   c0004f2f <f_mount>
c0020ada:	83 c4 10             	add    esp,0x10
c0020add:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c0020ae4:	83 bc 24 54 03 00 00 00 	cmp    DWORD PTR [esp+0x354],0x0
c0020aec:	74 19                	je     c0020b07 <FAT::tryMount(LogicalDisk*, int)+0x117>
c0020aee:	83 ec 0c             	sub    esp,0xc
c0020af1:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c0020af8:	e8 07 ee fe ff       	call   c000f904 <rfree>
c0020afd:	83 c4 10             	add    esp,0x10
c0020b00:	b0 00                	mov    al,0x0
c0020b02:	e9 e7 00 00 00       	jmp    c0020bee <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020b07:	83 ec 04             	sub    esp,0x4
c0020b0a:	68 00 01 00 00       	push   0x100
c0020b0f:	6a 00                	push   0x0
c0020b11:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c0020b18:	50                   	push   eax
c0020b19:	e8 5a fc fd ff       	call   c0000778 <memset>
c0020b1e:	83 c4 10             	add    esp,0x10
c0020b21:	83 ec 08             	sub    esp,0x8
c0020b24:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c0020b2b:	50                   	push   eax
c0020b2c:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c0020b33:	50                   	push   eax
c0020b34:	e8 3b fe fd ff       	call   c0000974 <strcat>
c0020b39:	83 c4 10             	add    esp,0x10
c0020b3c:	83 ec 08             	sub    esp,0x8
c0020b3f:	68 1c cb 02 c0       	push   0xc002cb1c
c0020b44:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c0020b4b:	50                   	push   eax
c0020b4c:	e8 23 fe fd ff       	call   c0000974 <strcat>
c0020b51:	83 c4 10             	add    esp,0x10
c0020b54:	83 ec 04             	sub    esp,0x4
c0020b57:	6a 01                	push   0x1
c0020b59:	8d 84 24 59 02 00 00 	lea    eax,[esp+0x259]
c0020b60:	50                   	push   eax
c0020b61:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0020b65:	50                   	push   eax
c0020b66:	e8 26 44 fe ff       	call   c0004f91 <f_open>
c0020b6b:	83 c4 10             	add    esp,0x10
c0020b6e:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c0020b75:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c0020b7c:	85 c0                	test   eax,eax
c0020b7e:	74 0a                	je     c0020b8a <FAT::tryMount(LogicalDisk*, int)+0x19a>
c0020b80:	78 2d                	js     c0020baf <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c0020b82:	83 e8 04             	sub    eax,0x4
c0020b85:	83 f8 01             	cmp    eax,0x1
c0020b88:	77 25                	ja     c0020baf <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c0020b8a:	c6 84 24 5f 03 00 00 01 	mov    BYTE PTR [esp+0x35f],0x1
c0020b92:	83 ec 0c             	sub    esp,0xc
c0020b95:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0020b99:	50                   	push   eax
c0020b9a:	e8 44 4f fe ff       	call   c0005ae3 <f_close>
c0020b9f:	83 c4 10             	add    esp,0x10
c0020ba2:	90                   	nop
c0020ba3:	80 bc 24 5f 03 00 00 00 	cmp    BYTE PTR [esp+0x35f],0x0
c0020bab:	74 3a                	je     c0020be7 <FAT::tryMount(LogicalDisk*, int)+0x1f7>
c0020bad:	eb 2d                	jmp    c0020bdc <FAT::tryMount(LogicalDisk*, int)+0x1ec>
c0020baf:	83 ec 0c             	sub    esp,0xc
c0020bb2:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c0020bb9:	e8 46 ed fe ff       	call   c000f904 <rfree>
c0020bbe:	83 c4 10             	add    esp,0x10
c0020bc1:	83 ec 04             	sub    esp,0x4
c0020bc4:	6a 00                	push   0x0
c0020bc6:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c0020bcd:	50                   	push   eax
c0020bce:	6a 00                	push   0x0
c0020bd0:	e8 5a 43 fe ff       	call   c0004f2f <f_mount>
c0020bd5:	83 c4 10             	add    esp,0x10
c0020bd8:	b0 00                	mov    al,0x0
c0020bda:	eb 12                	jmp    c0020bee <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020bdc:	a1 20 1d 03 c0       	mov    eax,ds:0xc0031d20
c0020be1:	40                   	inc    eax
c0020be2:	a3 20 1d 03 c0       	mov    ds:0xc0031d20,eax
c0020be7:	8a 84 24 5f 03 00 00 	mov    al,BYTE PTR [esp+0x35f]
c0020bee:	81 c4 6c 03 00 00    	add    esp,0x36c
c0020bf4:	c3                   	ret    
c0020bf5:	90                   	nop

c0020bf6 <FAT::readDir(void*, unsigned long, void*, int*)>:
c0020bf6:	81 ec 3c 02 00 00    	sub    esp,0x23c
c0020bfc:	83 bc 24 44 02 00 00 00 	cmp    DWORD PTR [esp+0x244],0x0
c0020c04:	74 0a                	je     c0020c10 <FAT::readDir(void*, unsigned long, void*, int*)+0x1a>
c0020c06:	83 bc 24 50 02 00 00 00 	cmp    DWORD PTR [esp+0x250],0x0
c0020c0e:	75 0a                	jne    c0020c1a <FAT::readDir(void*, unsigned long, void*, int*)+0x24>
c0020c10:	b8 04 00 00 00       	mov    eax,0x4
c0020c15:	e9 db 00 00 00       	jmp    c0020cf5 <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c0020c1a:	83 ec 08             	sub    esp,0x8
c0020c1d:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0020c24:	50                   	push   eax
c0020c25:	ff b4 24 50 02 00 00 	push   DWORD PTR [esp+0x250]
c0020c2c:	e8 bc 54 fe ff       	call   c00060ed <f_readdir>
c0020c31:	83 c4 10             	add    esp,0x10
c0020c34:	89 84 24 2c 02 00 00 	mov    DWORD PTR [esp+0x22c],eax
c0020c3b:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c0020c41:	83 ec 0c             	sub    esp,0xc
c0020c44:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c0020c4b:	83 c0 1a             	add    eax,0x1a
c0020c4e:	50                   	push   eax
c0020c4f:	e8 40 fb fd ff       	call   c0000794 <strlen>
c0020c54:	83 c4 10             	add    esp,0x10
c0020c57:	ba 00 00 00 00       	mov    edx,0x0
c0020c5c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0020c60:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0020c64:	8a 84 24 1c 01 00 00 	mov    al,BYTE PTR [esp+0x11c]
c0020c6b:	0f b6 c0             	movzx  eax,al
c0020c6e:	83 e0 10             	and    eax,0x10
c0020c71:	74 07                	je     c0020c7a <FAT::readDir(void*, unsigned long, void*, int*)+0x84>
c0020c73:	b8 02 00 00 00       	mov    eax,0x2
c0020c78:	eb 05                	jmp    c0020c7f <FAT::readDir(void*, unsigned long, void*, int*)+0x89>
c0020c7a:	b8 01 00 00 00       	mov    eax,0x1
c0020c7f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020c83:	83 ec 08             	sub    esp,0x8
c0020c86:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0020c8d:	83 c0 1a             	add    eax,0x1a
c0020c90:	50                   	push   eax
c0020c91:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0020c95:	83 c0 10             	add    eax,0x10
c0020c98:	50                   	push   eax
c0020c99:	e8 96 fb fd ff       	call   c0000834 <strcpy>
c0020c9e:	83 c4 10             	add    esp,0x10
c0020ca1:	83 ec 04             	sub    esp,0x4
c0020ca4:	ff b4 24 4c 02 00 00 	push   DWORD PTR [esp+0x24c]
c0020cab:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020caf:	50                   	push   eax
c0020cb0:	ff b4 24 58 02 00 00 	push   DWORD PTR [esp+0x258]
c0020cb7:	e8 88 fa fd ff       	call   c0000744 <memcpy>
c0020cbc:	83 c4 10             	add    esp,0x10
c0020cbf:	8b 84 24 50 02 00 00 	mov    eax,DWORD PTR [esp+0x250]
c0020cc6:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c0020ccc:	8a 84 24 2a 01 00 00 	mov    al,BYTE PTR [esp+0x12a]
c0020cd3:	84 c0                	test   al,al
c0020cd5:	75 07                	jne    c0020cde <FAT::readDir(void*, unsigned long, void*, int*)+0xe8>
c0020cd7:	b8 07 00 00 00       	mov    eax,0x7
c0020cdc:	eb 17                	jmp    c0020cf5 <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c0020cde:	8b 84 24 2c 02 00 00 	mov    eax,DWORD PTR [esp+0x22c]
c0020ce5:	85 c0                	test   eax,eax
c0020ce7:	75 07                	jne    c0020cf0 <FAT::readDir(void*, unsigned long, void*, int*)+0xfa>
c0020ce9:	b8 00 00 00 00       	mov    eax,0x0
c0020cee:	eb 05                	jmp    c0020cf5 <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c0020cf0:	b8 01 00 00 00       	mov    eax,0x1
c0020cf5:	81 c4 3c 02 00 00    	add    esp,0x23c
c0020cfb:	c3                   	ret    

c0020cfc <FAT::read(void*, unsigned long, void*, int*)>:
c0020cfc:	83 ec 1c             	sub    esp,0x1c
c0020cff:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020d04:	74 07                	je     c0020d0d <FAT::read(void*, unsigned long, void*, int*)+0x11>
c0020d06:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0020d0b:	75 07                	jne    c0020d14 <FAT::read(void*, unsigned long, void*, int*)+0x18>
c0020d0d:	b8 04 00 00 00       	mov    eax,0x4
c0020d12:	eb 3d                	jmp    c0020d51 <FAT::read(void*, unsigned long, void*, int*)+0x55>
c0020d14:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020d18:	50                   	push   eax
c0020d19:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0020d1d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0020d21:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020d25:	e8 a3 46 fe ff       	call   c00053cd <f_read>
c0020d2a:	83 c4 10             	add    esp,0x10
c0020d2d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020d31:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020d35:	89 c2                	mov    edx,eax
c0020d37:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0020d3b:	89 10                	mov    DWORD PTR [eax],edx
c0020d3d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020d41:	85 c0                	test   eax,eax
c0020d43:	75 07                	jne    c0020d4c <FAT::read(void*, unsigned long, void*, int*)+0x50>
c0020d45:	b8 00 00 00 00       	mov    eax,0x0
c0020d4a:	eb 05                	jmp    c0020d51 <FAT::read(void*, unsigned long, void*, int*)+0x55>
c0020d4c:	b8 01 00 00 00       	mov    eax,0x1
c0020d51:	83 c4 1c             	add    esp,0x1c
c0020d54:	c3                   	ret    
c0020d55:	90                   	nop

c0020d56 <FAT::write(void*, unsigned long, void*, int*)>:
c0020d56:	83 ec 1c             	sub    esp,0x1c
c0020d59:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020d5e:	74 07                	je     c0020d67 <FAT::write(void*, unsigned long, void*, int*)+0x11>
c0020d60:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0020d65:	75 07                	jne    c0020d6e <FAT::write(void*, unsigned long, void*, int*)+0x18>
c0020d67:	b8 04 00 00 00       	mov    eax,0x4
c0020d6c:	eb 3d                	jmp    c0020dab <FAT::write(void*, unsigned long, void*, int*)+0x55>
c0020d6e:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020d72:	50                   	push   eax
c0020d73:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0020d77:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0020d7b:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020d7f:	e8 c9 48 fe ff       	call   c000564d <f_write>
c0020d84:	83 c4 10             	add    esp,0x10
c0020d87:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020d8b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020d8f:	89 c2                	mov    edx,eax
c0020d91:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0020d95:	89 10                	mov    DWORD PTR [eax],edx
c0020d97:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020d9b:	85 c0                	test   eax,eax
c0020d9d:	75 07                	jne    c0020da6 <FAT::write(void*, unsigned long, void*, int*)+0x50>
c0020d9f:	b8 00 00 00 00       	mov    eax,0x0
c0020da4:	eb 05                	jmp    c0020dab <FAT::write(void*, unsigned long, void*, int*)+0x55>
c0020da6:	b8 01 00 00 00       	mov    eax,0x1
c0020dab:	83 c4 1c             	add    esp,0x1c
c0020dae:	c3                   	ret    
c0020daf:	90                   	nop

c0020db0 <FAT::close(void*)>:
c0020db0:	83 ec 1c             	sub    esp,0x1c
c0020db3:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020db8:	75 07                	jne    c0020dc1 <FAT::close(void*)+0x11>
c0020dba:	b8 04 00 00 00       	mov    eax,0x4
c0020dbf:	eb 36                	jmp    c0020df7 <FAT::close(void*)+0x47>
c0020dc1:	83 ec 0c             	sub    esp,0xc
c0020dc4:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020dc8:	e8 16 4d fe ff       	call   c0005ae3 <f_close>
c0020dcd:	83 c4 10             	add    esp,0x10
c0020dd0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020dd4:	83 ec 0c             	sub    esp,0xc
c0020dd7:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020ddb:	e8 14 eb fe ff       	call   c000f8f4 <free>
c0020de0:	83 c4 10             	add    esp,0x10
c0020de3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020de7:	85 c0                	test   eax,eax
c0020de9:	75 07                	jne    c0020df2 <FAT::close(void*)+0x42>
c0020deb:	b8 00 00 00 00       	mov    eax,0x0
c0020df0:	eb 05                	jmp    c0020df7 <FAT::close(void*)+0x47>
c0020df2:	b8 01 00 00 00       	mov    eax,0x1
c0020df7:	83 c4 1c             	add    esp,0x1c
c0020dfa:	c3                   	ret    
c0020dfb:	90                   	nop

c0020dfc <FAT::closeDir(void*)>:
c0020dfc:	83 ec 1c             	sub    esp,0x1c
c0020dff:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020e04:	75 07                	jne    c0020e0d <FAT::closeDir(void*)+0x11>
c0020e06:	b8 04 00 00 00       	mov    eax,0x4
c0020e0b:	eb 36                	jmp    c0020e43 <FAT::closeDir(void*)+0x47>
c0020e0d:	83 ec 0c             	sub    esp,0xc
c0020e10:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020e14:	e8 b2 52 fe ff       	call   c00060cb <f_closedir>
c0020e19:	83 c4 10             	add    esp,0x10
c0020e1c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020e20:	83 ec 0c             	sub    esp,0xc
c0020e23:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020e27:	e8 c8 ea fe ff       	call   c000f8f4 <free>
c0020e2c:	83 c4 10             	add    esp,0x10
c0020e2f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020e33:	85 c0                	test   eax,eax
c0020e35:	75 07                	jne    c0020e3e <FAT::closeDir(void*)+0x42>
c0020e37:	b8 00 00 00 00       	mov    eax,0x0
c0020e3c:	eb 05                	jmp    c0020e43 <FAT::closeDir(void*)+0x47>
c0020e3e:	b8 01 00 00 00       	mov    eax,0x1
c0020e43:	83 c4 1c             	add    esp,0x1c
c0020e46:	c3                   	ret    
c0020e47:	90                   	nop

c0020e48 <FAT::seek(void*, unsigned long long)>:
c0020e48:	83 ec 2c             	sub    esp,0x2c
c0020e4b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020e4f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0020e53:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0020e57:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020e5b:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0020e60:	75 07                	jne    c0020e69 <FAT::seek(void*, unsigned long long)+0x21>
c0020e62:	b8 04 00 00 00       	mov    eax,0x4
c0020e67:	eb 2f                	jmp    c0020e98 <FAT::seek(void*, unsigned long long)+0x50>
c0020e69:	83 ec 04             	sub    esp,0x4
c0020e6c:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0020e70:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0020e74:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0020e78:	e8 95 4c fe ff       	call   c0005b12 <f_lseek>
c0020e7d:	83 c4 10             	add    esp,0x10
c0020e80:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0020e84:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0020e88:	85 c0                	test   eax,eax
c0020e8a:	75 07                	jne    c0020e93 <FAT::seek(void*, unsigned long long)+0x4b>
c0020e8c:	b8 00 00 00 00       	mov    eax,0x0
c0020e91:	eb 05                	jmp    c0020e98 <FAT::seek(void*, unsigned long long)+0x50>
c0020e93:	b8 01 00 00 00       	mov    eax,0x1
c0020e98:	83 c4 2c             	add    esp,0x2c
c0020e9b:	c3                   	ret    

c0020e9c <fatWrapperReadDisk>:
c0020e9c:	83 ec 1c             	sub    esp,0x1c
c0020e9f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020ea3:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0020ea7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020eab:	89 04 24             	mov    DWORD PTR [esp],eax
c0020eae:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0020eb2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0020eb6:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020ebb:	8b 04 85 00 ed 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1300]
c0020ec2:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0020ec6:	83 ec 0c             	sub    esp,0xc
c0020ec9:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020ecd:	52                   	push   edx
c0020ece:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020ed2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020ed6:	50                   	push   eax
c0020ed7:	e8 28 59 ff ff       	call   c0016804 <LogicalDisk::read(unsigned long long, int, void*)>
c0020edc:	83 c4 20             	add    esp,0x20
c0020edf:	83 c4 1c             	add    esp,0x1c
c0020ee2:	c3                   	ret    

c0020ee3 <fatWrapperWriteDisk>:
c0020ee3:	83 ec 1c             	sub    esp,0x1c
c0020ee6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020eea:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0020eee:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020ef2:	89 04 24             	mov    DWORD PTR [esp],eax
c0020ef5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0020ef9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0020efd:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020f02:	8b 04 85 00 ed 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1300]
c0020f09:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0020f0d:	83 ec 0c             	sub    esp,0xc
c0020f10:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020f14:	52                   	push   edx
c0020f15:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020f19:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020f1d:	50                   	push   eax
c0020f1e:	e8 4d 59 ff ff       	call   c0016870 <LogicalDisk::write(unsigned long long, int, void*)>
c0020f23:	83 c4 20             	add    esp,0x20
c0020f26:	83 c4 1c             	add    esp,0x1c
c0020f29:	c3                   	ret    

c0020f2a <fatWrapperIoctl>:
c0020f2a:	53                   	push   ebx
c0020f2b:	83 ec 28             	sub    esp,0x28
c0020f2e:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0020f32:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0020f36:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0020f3a:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0020f3e:	80 7c 24 08 02       	cmp    BYTE PTR [esp+0x8],0x2
c0020f43:	75 31                	jne    c0020f76 <fatWrapperIoctl+0x4c>
c0020f45:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020f49:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0020f4d:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020f52:	8b 04 85 00 ed 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1300]
c0020f59:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0020f5f:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0020f65:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0020f69:	66 89 02             	mov    WORD PTR [edx],ax
c0020f6c:	b8 00 00 00 00       	mov    eax,0x0
c0020f71:	e9 b2 00 00 00       	jmp    c0021028 <fatWrapperIoctl+0xfe>
c0020f76:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0020f7b:	75 6a                	jne    c0020fe7 <fatWrapperIoctl+0xbd>
c0020f7d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020f81:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0020f85:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020f8a:	8b 04 85 00 ed 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1300]
c0020f91:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0020f97:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c0020f9d:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c0020fa3:	89 c8                	mov    eax,ecx
c0020fa5:	89 da                	mov    edx,ebx
c0020fa7:	0f a4 c2 0a          	shld   edx,eax,0xa
c0020fab:	c1 e0 0a             	shl    eax,0xa
c0020fae:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0020fb3:	8b 0c 8d 00 ed 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1300]
c0020fba:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c0020fc0:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c0020fc6:	89 cb                	mov    ebx,ecx
c0020fc8:	c1 fb 1f             	sar    ebx,0x1f
c0020fcb:	53                   	push   ebx
c0020fcc:	51                   	push   ecx
c0020fcd:	52                   	push   edx
c0020fce:	50                   	push   eax
c0020fcf:	e8 c8 5a 00 00       	call   c0026a9c <__udivdi3>
c0020fd4:	83 c4 10             	add    esp,0x10
c0020fd7:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0020fdb:	89 01                	mov    DWORD PTR [ecx],eax
c0020fdd:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0020fe0:	b8 00 00 00 00       	mov    eax,0x0
c0020fe5:	eb 41                	jmp    c0021028 <fatWrapperIoctl+0xfe>
c0020fe7:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c0020fec:	75 07                	jne    c0020ff5 <fatWrapperIoctl+0xcb>
c0020fee:	b8 00 00 00 00       	mov    eax,0x0
c0020ff3:	eb 33                	jmp    c0021028 <fatWrapperIoctl+0xfe>
c0020ff5:	80 7c 24 08 03       	cmp    BYTE PTR [esp+0x8],0x3
c0020ffa:	75 19                	jne    c0021015 <fatWrapperIoctl+0xeb>
c0020ffc:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0021000:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0021004:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0021008:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c002100e:	b8 00 00 00 00       	mov    eax,0x0
c0021013:	eb 13                	jmp    c0021028 <fatWrapperIoctl+0xfe>
c0021015:	80 7c 24 08 04       	cmp    BYTE PTR [esp+0x8],0x4
c002101a:	75 07                	jne    c0021023 <fatWrapperIoctl+0xf9>
c002101c:	b8 00 00 00 00       	mov    eax,0x0
c0021021:	eb 05                	jmp    c0021028 <fatWrapperIoctl+0xfe>
c0021023:	b8 04 00 00 00       	mov    eax,0x4
c0021028:	83 c4 28             	add    esp,0x28
c002102b:	5b                   	pop    ebx
c002102c:	c3                   	ret    
c002102d:	90                   	nop

c002102e <FAT::FAT()>:
c002102e:	83 ec 1c             	sub    esp,0x1c
c0021031:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021035:	83 ec 0c             	sub    esp,0xc
c0021038:	50                   	push   eax
c0021039:	e8 aa 22 ff ff       	call   c00132e8 <Filesystem::Filesystem()>
c002103e:	83 c4 10             	add    esp,0x10
c0021041:	ba 58 cb 02 c0       	mov    edx,0xc002cb58
c0021046:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002104a:	89 10                	mov    DWORD PTR [eax],edx
c002104c:	c7 05 20 1d 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0031d20,0x0
c0021056:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c002105e:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c0021063:	7f 15                	jg     c002107a <FAT::FAT()+0x4c>
c0021065:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021069:	c7 04 85 40 1d 03 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffce2c0],0xffffffff
c0021074:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0021078:	eb e4                	jmp    c002105e <FAT::FAT()+0x30>
c002107a:	90                   	nop
c002107b:	83 c4 1c             	add    esp,0x1c
c002107e:	c3                   	ret    
c002107f:	90                   	nop

c0021080 <FAT::fixFilepath(char*)>:
c0021080:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021084:	8a 00                	mov    al,BYTE PTR [eax]
c0021086:	3c 40                	cmp    al,0x40
c0021088:	7e 2c                	jle    c00210b6 <FAT::fixFilepath(char*)+0x36>
c002108a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002108e:	8a 00                	mov    al,BYTE PTR [eax]
c0021090:	83 e8 41             	sub    eax,0x41
c0021093:	88 c2                	mov    dl,al
c0021095:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021099:	88 10                	mov    BYTE PTR [eax],dl
c002109b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002109f:	8a 00                	mov    al,BYTE PTR [eax]
c00210a1:	0f be c0             	movsx  eax,al
c00210a4:	8b 04 85 40 1d 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce2c0]
c00210ab:	83 c0 30             	add    eax,0x30
c00210ae:	88 c2                	mov    dl,al
c00210b0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00210b4:	88 10                	mov    BYTE PTR [eax],dl
c00210b6:	90                   	nop
c00210b7:	c3                   	ret    

c00210b8 <FAT::open(char const*, void**, FileOpenMode)>:
c00210b8:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00210be:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c00210c6:	74 0a                	je     c00210d2 <FAT::open(char const*, void**, FileOpenMode)+0x1a>
c00210c8:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c00210d0:	75 0a                	jne    c00210dc <FAT::open(char const*, void**, FileOpenMode)+0x24>
c00210d2:	b8 04 00 00 00       	mov    eax,0x4
c00210d7:	e9 fd 00 00 00       	jmp    c00211d9 <FAT::open(char const*, void**, FileOpenMode)+0x121>
c00210dc:	83 ec 08             	sub    esp,0x8
c00210df:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00210e6:	8d 44 24 14          	lea    eax,[esp+0x14]
c00210ea:	50                   	push   eax
c00210eb:	e8 44 f7 fd ff       	call   c0000834 <strcpy>
c00210f0:	83 c4 10             	add    esp,0x10
c00210f3:	83 ec 08             	sub    esp,0x8
c00210f6:	8d 44 24 10          	lea    eax,[esp+0x10]
c00210fa:	50                   	push   eax
c00210fb:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021102:	e8 79 ff ff ff       	call   c0021080 <FAT::fixFilepath(char*)>
c0021107:	83 c4 10             	add    esp,0x10
c002110a:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c0021112:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0021119:	83 e0 01             	and    eax,0x1
c002111c:	74 08                	je     c0021126 <FAT::open(char const*, void**, FileOpenMode)+0x6e>
c002111e:	80 8c 24 0f 01 00 00 01 	or     BYTE PTR [esp+0x10f],0x1
c0021126:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c002112d:	83 e0 04             	and    eax,0x4
c0021130:	74 10                	je     c0021142 <FAT::open(char const*, void**, FileOpenMode)+0x8a>
c0021132:	80 8c 24 0f 01 00 00 30 	or     BYTE PTR [esp+0x10f],0x30
c002113a:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c0021142:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0021149:	83 e0 02             	and    eax,0x2
c002114c:	74 08                	je     c0021156 <FAT::open(char const*, void**, FileOpenMode)+0x9e>
c002114e:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c0021156:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c002115d:	83 e0 08             	and    eax,0x8
c0021160:	74 08                	je     c002116a <FAT::open(char const*, void**, FileOpenMode)+0xb2>
c0021162:	80 8c 24 0f 01 00 00 04 	or     BYTE PTR [esp+0x10f],0x4
c002116a:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0021171:	83 e0 10             	and    eax,0x10
c0021174:	74 08                	je     c002117e <FAT::open(char const*, void**, FileOpenMode)+0xc6>
c0021176:	80 8c 24 0f 01 00 00 08 	or     BYTE PTR [esp+0x10f],0x8
c002117e:	83 ec 0c             	sub    esp,0xc
c0021181:	68 50 02 00 00       	push   0x250
c0021186:	e8 59 e7 fe ff       	call   c000f8e4 <malloc>
c002118b:	83 c4 10             	add    esp,0x10
c002118e:	89 c2                	mov    edx,eax
c0021190:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0021197:	89 10                	mov    DWORD PTR [eax],edx
c0021199:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c00211a1:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c00211a8:	8b 00                	mov    eax,DWORD PTR [eax]
c00211aa:	83 ec 04             	sub    esp,0x4
c00211ad:	52                   	push   edx
c00211ae:	8d 54 24 10          	lea    edx,[esp+0x10]
c00211b2:	52                   	push   edx
c00211b3:	50                   	push   eax
c00211b4:	e8 d8 3d fe ff       	call   c0004f91 <f_open>
c00211b9:	83 c4 10             	add    esp,0x10
c00211bc:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c00211c3:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c00211cb:	74 07                	je     c00211d4 <FAT::open(char const*, void**, FileOpenMode)+0x11c>
c00211cd:	b8 01 00 00 00       	mov    eax,0x1
c00211d2:	eb 05                	jmp    c00211d9 <FAT::open(char const*, void**, FileOpenMode)+0x121>
c00211d4:	b8 00 00 00 00       	mov    eax,0x0
c00211d9:	81 c4 1c 01 00 00    	add    esp,0x11c
c00211df:	c3                   	ret    

c00211e0 <FAT::openDir(char const*, void**)>:
c00211e0:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00211e6:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c00211ee:	74 0a                	je     c00211fa <FAT::openDir(char const*, void**)+0x1a>
c00211f0:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c00211f8:	75 07                	jne    c0021201 <FAT::openDir(char const*, void**)+0x21>
c00211fa:	b8 04 00 00 00       	mov    eax,0x4
c00211ff:	eb 7d                	jmp    c002127e <FAT::openDir(char const*, void**)+0x9e>
c0021201:	83 ec 08             	sub    esp,0x8
c0021204:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c002120b:	8d 44 24 18          	lea    eax,[esp+0x18]
c002120f:	50                   	push   eax
c0021210:	e8 1f f6 fd ff       	call   c0000834 <strcpy>
c0021215:	83 c4 10             	add    esp,0x10
c0021218:	83 ec 08             	sub    esp,0x8
c002121b:	8d 44 24 14          	lea    eax,[esp+0x14]
c002121f:	50                   	push   eax
c0021220:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021227:	e8 54 fe ff ff       	call   c0021080 <FAT::fixFilepath(char*)>
c002122c:	83 c4 10             	add    esp,0x10
c002122f:	83 ec 0c             	sub    esp,0xc
c0021232:	6a 4c                	push   0x4c
c0021234:	e8 ab e6 fe ff       	call   c000f8e4 <malloc>
c0021239:	83 c4 10             	add    esp,0x10
c002123c:	89 c2                	mov    edx,eax
c002123e:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0021245:	89 10                	mov    DWORD PTR [eax],edx
c0021247:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c002124e:	8b 00                	mov    eax,DWORD PTR [eax]
c0021250:	83 ec 08             	sub    esp,0x8
c0021253:	8d 54 24 14          	lea    edx,[esp+0x14]
c0021257:	52                   	push   edx
c0021258:	50                   	push   eax
c0021259:	e8 6b 4d fe ff       	call   c0005fc9 <f_opendir>
c002125e:	83 c4 10             	add    esp,0x10
c0021261:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0021268:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c0021270:	74 07                	je     c0021279 <FAT::openDir(char const*, void**)+0x99>
c0021272:	b8 01 00 00 00       	mov    eax,0x1
c0021277:	eb 05                	jmp    c002127e <FAT::openDir(char const*, void**)+0x9e>
c0021279:	b8 00 00 00 00       	mov    eax,0x0
c002127e:	81 c4 1c 01 00 00    	add    esp,0x11c
c0021284:	c3                   	ret    
c0021285:	90                   	nop

c0021286 <FAT::stat(char const*, unsigned long long*, bool*)>:
c0021286:	81 ec 2c 02 00 00    	sub    esp,0x22c
c002128c:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c0021294:	75 0a                	jne    c00212a0 <FAT::stat(char const*, unsigned long long*, bool*)+0x1a>
c0021296:	b8 04 00 00 00       	mov    eax,0x4
c002129b:	e9 c9 00 00 00       	jmp    c0021369 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c00212a0:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c00212a8:	75 0a                	jne    c00212b4 <FAT::stat(char const*, unsigned long long*, bool*)+0x2e>
c00212aa:	b8 04 00 00 00       	mov    eax,0x4
c00212af:	e9 b5 00 00 00       	jmp    c0021369 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c00212b4:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c00212bc:	75 0a                	jne    c00212c8 <FAT::stat(char const*, unsigned long long*, bool*)+0x42>
c00212be:	b8 04 00 00 00       	mov    eax,0x4
c00212c3:	e9 a1 00 00 00       	jmp    c0021369 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c00212c8:	83 ec 08             	sub    esp,0x8
c00212cb:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00212d2:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c00212d9:	50                   	push   eax
c00212da:	e8 55 f5 fd ff       	call   c0000834 <strcpy>
c00212df:	83 c4 10             	add    esp,0x10
c00212e2:	83 ec 08             	sub    esp,0x8
c00212e5:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c00212ec:	50                   	push   eax
c00212ed:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00212f4:	e8 87 fd ff ff       	call   c0021080 <FAT::fixFilepath(char*)>
c00212f9:	83 c4 10             	add    esp,0x10
c00212fc:	83 ec 08             	sub    esp,0x8
c00212ff:	8d 44 24 08          	lea    eax,[esp+0x8]
c0021303:	50                   	push   eax
c0021304:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c002130b:	50                   	push   eax
c002130c:	e8 77 4e fe ff       	call   c0006188 <f_stat>
c0021311:	83 c4 10             	add    esp,0x10
c0021314:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c002131b:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0021322:	85 c0                	test   eax,eax
c0021324:	74 07                	je     c002132d <FAT::stat(char const*, unsigned long long*, bool*)+0xa7>
c0021326:	83 f8 04             	cmp    eax,0x4
c0021329:	74 32                	je     c002135d <FAT::stat(char const*, unsigned long long*, bool*)+0xd7>
c002132b:	eb 37                	jmp    c0021364 <FAT::stat(char const*, unsigned long long*, bool*)+0xde>
c002132d:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0021331:	0f b6 c0             	movzx  eax,al
c0021334:	83 e0 10             	and    eax,0x10
c0021337:	0f 95 c2             	setne  dl
c002133a:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c0021341:	88 10                	mov    BYTE PTR [eax],dl
c0021343:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0021346:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c002134a:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c0021351:	89 01                	mov    DWORD PTR [ecx],eax
c0021353:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0021356:	b8 00 00 00 00       	mov    eax,0x0
c002135b:	eb 0c                	jmp    c0021369 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c002135d:	b8 02 00 00 00       	mov    eax,0x2
c0021362:	eb 05                	jmp    c0021369 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0021364:	b8 01 00 00 00       	mov    eax,0x1
c0021369:	81 c4 2c 02 00 00    	add    esp,0x22c
c002136f:	c3                   	ret    

c0021370 <FAT::unlink(char const*)>:
c0021370:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0021376:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c002137e:	75 07                	jne    c0021387 <FAT::unlink(char const*)+0x17>
c0021380:	b8 04 00 00 00       	mov    eax,0x4
c0021385:	eb 5c                	jmp    c00213e3 <FAT::unlink(char const*)+0x73>
c0021387:	83 ec 08             	sub    esp,0x8
c002138a:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021391:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021395:	50                   	push   eax
c0021396:	e8 99 f4 fd ff       	call   c0000834 <strcpy>
c002139b:	83 c4 10             	add    esp,0x10
c002139e:	83 ec 08             	sub    esp,0x8
c00213a1:	8d 44 24 14          	lea    eax,[esp+0x14]
c00213a5:	50                   	push   eax
c00213a6:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00213ad:	e8 ce fc ff ff       	call   c0021080 <FAT::fixFilepath(char*)>
c00213b2:	83 c4 10             	add    esp,0x10
c00213b5:	83 ec 0c             	sub    esp,0xc
c00213b8:	8d 44 24 18          	lea    eax,[esp+0x18]
c00213bc:	50                   	push   eax
c00213bd:	e8 18 51 fe ff       	call   c00064da <f_unlink>
c00213c2:	83 c4 10             	add    esp,0x10
c00213c5:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c00213cc:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c00213d3:	85 c0                	test   eax,eax
c00213d5:	75 07                	jne    c00213de <FAT::unlink(char const*)+0x6e>
c00213d7:	b8 00 00 00 00       	mov    eax,0x0
c00213dc:	eb 05                	jmp    c00213e3 <FAT::unlink(char const*)+0x73>
c00213de:	b8 01 00 00 00       	mov    eax,0x1
c00213e3:	81 c4 1c 01 00 00    	add    esp,0x11c
c00213e9:	c3                   	ret    

c00213ea <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c00213ea:	81 ec 2c 01 00 00    	sub    esp,0x12c
c00213f0:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c00213f7:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c00213fe:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0021402:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0021406:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c002140e:	75 0a                	jne    c002141a <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c0021410:	b8 04 00 00 00       	mov    eax,0x4
c0021415:	e9 1c 01 00 00       	jmp    c0021536 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c002141a:	83 ec 08             	sub    esp,0x8
c002141d:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0021424:	8d 44 24 24          	lea    eax,[esp+0x24]
c0021428:	50                   	push   eax
c0021429:	e8 06 f4 fd ff       	call   c0000834 <strcpy>
c002142e:	83 c4 10             	add    esp,0x10
c0021431:	83 ec 08             	sub    esp,0x8
c0021434:	8d 44 24 20          	lea    eax,[esp+0x20]
c0021438:	50                   	push   eax
c0021439:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0021440:	e8 3b fc ff ff       	call   c0021080 <FAT::fixFilepath(char*)>
c0021445:	83 c4 10             	add    esp,0x10
c0021448:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c0021450:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c0021458:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c002145d:	83 e0 01             	and    eax,0x1
c0021460:	74 08                	je     c002146a <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x80>
c0021462:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c002146a:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c002146f:	83 e0 02             	and    eax,0x2
c0021472:	74 08                	je     c002147c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x92>
c0021474:	80 8c 24 1f 01 00 00 20 	or     BYTE PTR [esp+0x11f],0x20
c002147c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0021481:	83 e0 04             	and    eax,0x4
c0021484:	74 08                	je     c002148e <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xa4>
c0021486:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c002148e:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0021493:	83 e0 08             	and    eax,0x8
c0021496:	74 08                	je     c00214a0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xb6>
c0021498:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c00214a0:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00214a5:	83 e0 01             	and    eax,0x1
c00214a8:	74 08                	je     c00214b2 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc8>
c00214aa:	80 8c 24 1e 01 00 00 01 	or     BYTE PTR [esp+0x11e],0x1
c00214b2:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00214b7:	83 e0 02             	and    eax,0x2
c00214ba:	74 08                	je     c00214c4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xda>
c00214bc:	80 8c 24 1e 01 00 00 20 	or     BYTE PTR [esp+0x11e],0x20
c00214c4:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00214c9:	83 e0 04             	and    eax,0x4
c00214cc:	74 08                	je     c00214d6 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xec>
c00214ce:	80 8c 24 1e 01 00 00 04 	or     BYTE PTR [esp+0x11e],0x4
c00214d6:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00214db:	83 e0 08             	and    eax,0x8
c00214de:	74 08                	je     c00214e8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfe>
c00214e0:	80 8c 24 1e 01 00 00 02 	or     BYTE PTR [esp+0x11e],0x2
c00214e8:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c00214ef:	08 84 24 1e 01 00 00 	or     BYTE PTR [esp+0x11e],al
c00214f6:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c00214fe:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c0021506:	83 ec 04             	sub    esp,0x4
c0021509:	52                   	push   edx
c002150a:	50                   	push   eax
c002150b:	8d 44 24 24          	lea    eax,[esp+0x24]
c002150f:	50                   	push   eax
c0021510:	e8 67 56 fe ff       	call   c0006b7c <f_chmod>
c0021515:	83 c4 10             	add    esp,0x10
c0021518:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c002151f:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c0021526:	85 c0                	test   eax,eax
c0021528:	75 07                	jne    c0021531 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x147>
c002152a:	b8 00 00 00 00       	mov    eax,0x0
c002152f:	eb 05                	jmp    c0021536 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c0021531:	b8 01 00 00 00       	mov    eax,0x1
c0021536:	81 c4 2c 01 00 00    	add    esp,0x12c
c002153c:	c3                   	ret    
c002153d:	90                   	nop

c002153e <FAT::rename(char const*, char const*)>:
c002153e:	81 ec 1c 02 00 00    	sub    esp,0x21c
c0021544:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c002154c:	74 0a                	je     c0021558 <FAT::rename(char const*, char const*)+0x1a>
c002154e:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c0021556:	75 0a                	jne    c0021562 <FAT::rename(char const*, char const*)+0x24>
c0021558:	b8 04 00 00 00       	mov    eax,0x4
c002155d:	e9 98 00 00 00       	jmp    c00215fa <FAT::rename(char const*, char const*)+0xbc>
c0021562:	83 ec 08             	sub    esp,0x8
c0021565:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c002156c:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0021573:	50                   	push   eax
c0021574:	e8 bb f2 fd ff       	call   c0000834 <strcpy>
c0021579:	83 c4 10             	add    esp,0x10
c002157c:	83 ec 08             	sub    esp,0x8
c002157f:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c0021586:	50                   	push   eax
c0021587:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c002158e:	e8 ed fa ff ff       	call   c0021080 <FAT::fixFilepath(char*)>
c0021593:	83 c4 10             	add    esp,0x10
c0021596:	83 ec 08             	sub    esp,0x8
c0021599:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c00215a0:	8d 44 24 18          	lea    eax,[esp+0x18]
c00215a4:	50                   	push   eax
c00215a5:	e8 8a f2 fd ff       	call   c0000834 <strcpy>
c00215aa:	83 c4 10             	add    esp,0x10
c00215ad:	83 ec 08             	sub    esp,0x8
c00215b0:	8d 44 24 14          	lea    eax,[esp+0x14]
c00215b4:	50                   	push   eax
c00215b5:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c00215bc:	e8 bf fa ff ff       	call   c0021080 <FAT::fixFilepath(char*)>
c00215c1:	83 c4 10             	add    esp,0x10
c00215c4:	83 ec 08             	sub    esp,0x8
c00215c7:	8d 44 24 14          	lea    eax,[esp+0x14]
c00215cb:	50                   	push   eax
c00215cc:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c00215d3:	50                   	push   eax
c00215d4:	e8 b0 52 fe ff       	call   c0006889 <f_rename>
c00215d9:	83 c4 10             	add    esp,0x10
c00215dc:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c00215e3:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c00215ea:	85 c0                	test   eax,eax
c00215ec:	75 07                	jne    c00215f5 <FAT::rename(char const*, char const*)+0xb7>
c00215ee:	b8 00 00 00 00       	mov    eax,0x0
c00215f3:	eb 05                	jmp    c00215fa <FAT::rename(char const*, char const*)+0xbc>
c00215f5:	b8 01 00 00 00       	mov    eax,0x1
c00215fa:	81 c4 1c 02 00 00    	add    esp,0x21c
c0021600:	c3                   	ret    
c0021601:	90                   	nop

c0021602 <FAT::mkdir(char const*)>:
c0021602:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0021608:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0021610:	75 07                	jne    c0021619 <FAT::mkdir(char const*)+0x17>
c0021612:	b8 04 00 00 00       	mov    eax,0x4
c0021617:	eb 5c                	jmp    c0021675 <FAT::mkdir(char const*)+0x73>
c0021619:	83 ec 08             	sub    esp,0x8
c002161c:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021623:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021627:	50                   	push   eax
c0021628:	e8 07 f2 fd ff       	call   c0000834 <strcpy>
c002162d:	83 c4 10             	add    esp,0x10
c0021630:	83 ec 08             	sub    esp,0x8
c0021633:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021637:	50                   	push   eax
c0021638:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c002163f:	e8 3c fa ff ff       	call   c0021080 <FAT::fixFilepath(char*)>
c0021644:	83 c4 10             	add    esp,0x10
c0021647:	83 ec 0c             	sub    esp,0xc
c002164a:	8d 44 24 18          	lea    eax,[esp+0x18]
c002164e:	50                   	push   eax
c002164f:	e8 09 50 fe ff       	call   c000665d <f_mkdir>
c0021654:	83 c4 10             	add    esp,0x10
c0021657:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c002165e:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0021665:	85 c0                	test   eax,eax
c0021667:	75 07                	jne    c0021670 <FAT::mkdir(char const*)+0x6e>
c0021669:	b8 00 00 00 00       	mov    eax,0x0
c002166e:	eb 05                	jmp    c0021675 <FAT::mkdir(char const*)+0x73>
c0021670:	b8 01 00 00 00       	mov    eax,0x1
c0021675:	81 c4 1c 01 00 00    	add    esp,0x11c
c002167b:	c3                   	ret    

c002167c <FAT::exists(char const*)>:
c002167c:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0021682:	83 ec 08             	sub    esp,0x8
c0021685:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c002168c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0021690:	50                   	push   eax
c0021691:	e8 9e f1 fd ff       	call   c0000834 <strcpy>
c0021696:	83 c4 10             	add    esp,0x10
c0021699:	83 ec 08             	sub    esp,0x8
c002169c:	8d 44 24 08          	lea    eax,[esp+0x8]
c00216a0:	50                   	push   eax
c00216a1:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00216a8:	e8 d3 f9 ff ff       	call   c0021080 <FAT::fixFilepath(char*)>
c00216ad:	83 c4 10             	add    esp,0x10
c00216b0:	83 ec 08             	sub    esp,0x8
c00216b3:	8d 84 24 08 01 00 00 	lea    eax,[esp+0x108]
c00216ba:	50                   	push   eax
c00216bb:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00216bf:	50                   	push   eax
c00216c0:	e8 c3 4a fe ff       	call   c0006188 <f_stat>
c00216c5:	83 c4 10             	add    esp,0x10
c00216c8:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c00216cf:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c00216d6:	85 c0                	test   eax,eax
c00216d8:	75 04                	jne    c00216de <FAT::exists(char const*)+0x62>
c00216da:	b0 01                	mov    al,0x1
c00216dc:	eb 02                	jmp    c00216e0 <FAT::exists(char const*)+0x64>
c00216de:	b0 00                	mov    al,0x0
c00216e0:	81 c4 2c 02 00 00    	add    esp,0x22c
c00216e6:	c3                   	ret    
c00216e7:	90                   	nop

c00216e8 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c00216e8:	b8 08 00 00 00       	mov    eax,0x8
c00216ed:	c3                   	ret    

c00216ee <ISO9660::seek(void*, unsigned long long)>:
c00216ee:	53                   	push   ebx
c00216ef:	b8 04 00 00 00       	mov    eax,0x4
c00216f4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00216f8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00216fc:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0021700:	85 d2                	test   edx,edx
c0021702:	74 17                	je     c002171b <ISO9660::seek(void*, unsigned long long)+0x2d>
c0021704:	89 c8                	mov    eax,ecx
c0021706:	3b 5a 08             	cmp    ebx,DWORD PTR [edx+0x8]
c0021709:	1b 42 0c             	sbb    eax,DWORD PTR [edx+0xc]
c002170c:	b8 01 00 00 00       	mov    eax,0x1
c0021711:	73 08                	jae    c002171b <ISO9660::seek(void*, unsigned long long)+0x2d>
c0021713:	89 5a 10             	mov    DWORD PTR [edx+0x10],ebx
c0021716:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c0021719:	31 c0                	xor    eax,eax
c002171b:	5b                   	pop    ebx
c002171c:	c3                   	ret    
c002171d:	90                   	nop

c002171e <ISO9660::tell(void*, unsigned long long*)>:
c002171e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0021722:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021726:	85 d2                	test   edx,edx
c0021728:	74 12                	je     c002173c <ISO9660::tell(void*, unsigned long long*)+0x1e>
c002172a:	85 c0                	test   eax,eax
c002172c:	74 0e                	je     c002173c <ISO9660::tell(void*, unsigned long long*)+0x1e>
c002172e:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0021731:	8b 52 10             	mov    edx,DWORD PTR [edx+0x10]
c0021734:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0021737:	89 10                	mov    DWORD PTR [eax],edx
c0021739:	31 c0                	xor    eax,eax
c002173b:	c3                   	ret    
c002173c:	b8 04 00 00 00       	mov    eax,0x4
c0021741:	c3                   	ret    

c0021742 <ISO9660::getName()>:
c0021742:	b8 b4 cb 02 c0       	mov    eax,0xc002cbb4
c0021747:	c3                   	ret    

c0021748 <ISO9660::stat(void*, unsigned long long*)>:
c0021748:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002174c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021750:	85 d2                	test   edx,edx
c0021752:	74 12                	je     c0021766 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c0021754:	85 c0                	test   eax,eax
c0021756:	74 0e                	je     c0021766 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c0021758:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c002175b:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c002175e:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0021761:	89 10                	mov    DWORD PTR [eax],edx
c0021763:	31 c0                	xor    eax,eax
c0021765:	c3                   	ret    
c0021766:	b8 04 00 00 00       	mov    eax,0x4
c002176b:	c3                   	ret    

c002176c <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c002176c:	b8 01 00 00 00       	mov    eax,0x1
c0021771:	c3                   	ret    

c0021772 <ISO9660::unlink(char const*)>:
c0021772:	b8 01 00 00 00       	mov    eax,0x1
c0021777:	c3                   	ret    

c0021778 <ISO9660::write(void*, unsigned long, void*, int*)>:
c0021778:	b8 01 00 00 00       	mov    eax,0x1
c002177d:	c3                   	ret    

c002177e <ISO9660::rename(char const*, char const*)>:
c002177e:	b8 01 00 00 00       	mov    eax,0x1
c0021783:	c3                   	ret    

c0021784 <ISO9660::mkdir(char const*)>:
c0021784:	b8 01 00 00 00       	mov    eax,0x1
c0021789:	c3                   	ret    

c002178a <ISO9660::close(void*)>:
c002178a:	83 ec 0c             	sub    esp,0xc
c002178d:	b8 04 00 00 00       	mov    eax,0x4
c0021792:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021796:	85 d2                	test   edx,edx
c0021798:	74 0e                	je     c00217a8 <ISO9660::close(void*)+0x1e>
c002179a:	83 ec 0c             	sub    esp,0xc
c002179d:	52                   	push   edx
c002179e:	e8 51 e1 fe ff       	call   c000f8f4 <free>
c00217a3:	83 c4 10             	add    esp,0x10
c00217a6:	31 c0                	xor    eax,eax
c00217a8:	83 c4 0c             	add    esp,0xc
c00217ab:	c3                   	ret    

c00217ac <ISO9660::closeDir(void*)>:
c00217ac:	83 ec 0c             	sub    esp,0xc
c00217af:	b8 04 00 00 00       	mov    eax,0x4
c00217b4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00217b8:	85 d2                	test   edx,edx
c00217ba:	74 0e                	je     c00217ca <ISO9660::closeDir(void*)+0x1e>
c00217bc:	83 ec 0c             	sub    esp,0xc
c00217bf:	52                   	push   edx
c00217c0:	e8 2f e1 fe ff       	call   c000f8f4 <free>
c00217c5:	83 c4 10             	add    esp,0x10
c00217c8:	31 c0                	xor    eax,eax
c00217ca:	83 c4 0c             	add    esp,0xc
c00217cd:	c3                   	ret    

c00217ce <ISO9660::~ISO9660()>:
c00217ce:	83 ec 0c             	sub    esp,0xc
c00217d1:	ba 18 cc 02 c0       	mov    edx,0xc002cc18
c00217d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00217da:	89 10                	mov    DWORD PTR [eax],edx
c00217dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00217e0:	83 ec 0c             	sub    esp,0xc
c00217e3:	50                   	push   eax
c00217e4:	e8 23 1b ff ff       	call   c001330c <Filesystem::~Filesystem()>
c00217e9:	83 c4 10             	add    esp,0x10
c00217ec:	90                   	nop
c00217ed:	83 c4 0c             	add    esp,0xc
c00217f0:	c3                   	ret    
c00217f1:	90                   	nop

c00217f2 <ISO9660::~ISO9660()>:
c00217f2:	83 ec 0c             	sub    esp,0xc
c00217f5:	83 ec 0c             	sub    esp,0xc
c00217f8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00217fc:	e8 cd ff ff ff       	call   c00217ce <ISO9660::~ISO9660()>
c0021801:	83 c4 10             	add    esp,0x10
c0021804:	83 ec 08             	sub    esp,0x8
c0021807:	6a 08                	push   0x8
c0021809:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002180d:	e8 f1 16 ff ff       	call   c0012f03 <operator delete(void*, unsigned long)>
c0021812:	83 c4 10             	add    esp,0x10
c0021815:	83 c4 0c             	add    esp,0xc
c0021818:	c3                   	ret    

c0021819 <__memmem(unsigned char*, int, unsigned char*, int)>:
c0021819:	55                   	push   ebp
c002181a:	31 c9                	xor    ecx,ecx
c002181c:	57                   	push   edi
c002181d:	56                   	push   esi
c002181e:	53                   	push   ebx
c002181f:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0021823:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0021827:	89 eb                	mov    ebx,ebp
c0021829:	2b 74 24 20          	sub    esi,DWORD PTR [esp+0x20]
c002182d:	39 ce                	cmp    esi,ecx
c002182f:	7e 17                	jle    c0021848 <__memmem(unsigned char*, int, unsigned char*, int)+0x2f>
c0021831:	31 d2                	xor    edx,edx
c0021833:	3b 54 24 20          	cmp    edx,DWORD PTR [esp+0x20]
c0021837:	7d 13                	jge    c002184c <__memmem(unsigned char*, int, unsigned char*, int)+0x33>
c0021839:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c002183d:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c0021840:	38 04 17             	cmp    BYTE PTR [edi+edx*1],al
c0021843:	75 0d                	jne    c0021852 <__memmem(unsigned char*, int, unsigned char*, int)+0x39>
c0021845:	42                   	inc    edx
c0021846:	eb eb                	jmp    c0021833 <__memmem(unsigned char*, int, unsigned char*, int)+0x1a>
c0021848:	31 c0                	xor    eax,eax
c002184a:	eb 0a                	jmp    c0021856 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c002184c:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c0021850:	eb 04                	jmp    c0021856 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c0021852:	41                   	inc    ecx
c0021853:	43                   	inc    ebx
c0021854:	eb d7                	jmp    c002182d <__memmem(unsigned char*, int, unsigned char*, int)+0x14>
c0021856:	5b                   	pop    ebx
c0021857:	5e                   	pop    esi
c0021858:	5f                   	pop    edi
c0021859:	5d                   	pop    ebp
c002185a:	c3                   	ret    

c002185b <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c002185b:	56                   	push   esi
c002185c:	53                   	push   ebx
c002185d:	52                   	push   edx
c002185e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0021862:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0021866:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002186a:	39 0d 20 1e 03 c0    	cmp    DWORD PTR ds:0xc0031e20,ecx
c0021870:	75 08                	jne    c002187a <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1f>
c0021872:	38 05 74 dc 02 c0    	cmp    BYTE PTR ds:0xc002dc74,al
c0021878:	74 2b                	je     c00218a5 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x4a>
c002187a:	83 ec 0c             	sub    esp,0xc
c002187d:	a2 74 dc 02 c0       	mov    ds:0xc002dc74,al
c0021882:	68 40 1e 03 c0       	push   0xc0031e40
c0021887:	0f be c0             	movsx  eax,al
c002188a:	6a 01                	push   0x1
c002188c:	89 0d 20 1e 03 c0    	mov    DWORD PTR ds:0xc0031e20,ecx
c0021892:	31 db                	xor    ebx,ebx
c0021894:	53                   	push   ebx
c0021895:	51                   	push   ecx
c0021896:	ff 34 85 fc eb 02 c0 	push   DWORD PTR [eax*4-0x3ffd1404]
c002189d:	e8 62 4f ff ff       	call   c0016804 <LogicalDisk::read(unsigned long long, int, void*)>
c00218a2:	83 c4 20             	add    esp,0x20
c00218a5:	c7 44 24 18 00 08 00 00 	mov    DWORD PTR [esp+0x18],0x800
c00218ad:	c7 44 24 14 40 1e 03 c0 	mov    DWORD PTR [esp+0x14],0xc0031e40
c00218b5:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c00218b9:	58                   	pop    eax
c00218ba:	5b                   	pop    ebx
c00218bb:	5e                   	pop    esi
c00218bc:	e9 83 ee fd ff       	jmp    c0000744 <memcpy>
c00218c1:	90                   	nop

c00218c2 <ISO9660::tryMount(LogicalDisk*, int)>:
c00218c2:	81 ec 10 08 00 00    	sub    esp,0x810
c00218c8:	8a 84 24 1c 08 00 00 	mov    al,BYTE PTR [esp+0x81c]
c00218cf:	83 c0 41             	add    eax,0x41
c00218d2:	0f be c0             	movsx  eax,al
c00218d5:	50                   	push   eax
c00218d6:	8d 44 24 08          	lea    eax,[esp+0x8]
c00218da:	50                   	push   eax
c00218db:	6a 10                	push   0x10
c00218dd:	e8 79 ff ff ff       	call   c002185b <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c00218e2:	83 c4 10             	add    esp,0x10
c00218e5:	31 c0                	xor    eax,eax
c00218e7:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c00218ec:	75 1d                	jne    c002190b <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c00218ee:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c00218f3:	75 16                	jne    c002190b <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c00218f5:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c00218fa:	75 0f                	jne    c002190b <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c00218fc:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c0021901:	75 08                	jne    c002190b <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0021903:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c0021908:	0f 94 c0             	sete   al
c002190b:	81 c4 0c 08 00 00    	add    esp,0x80c
c0021911:	c3                   	ret    

c0021912 <ISO9660::read(void*, unsigned long, void*, int*)>:
c0021912:	55                   	push   ebp
c0021913:	57                   	push   edi
c0021914:	56                   	push   esi
c0021915:	53                   	push   ebx
c0021916:	81 ec 2c 08 00 00    	sub    esp,0x82c
c002191c:	8b ac 24 44 08 00 00 	mov    ebp,DWORD PTR [esp+0x844]
c0021923:	85 ed                	test   ebp,ebp
c0021925:	0f 84 d6 01 00 00    	je     c0021b01 <ISO9660::read(void*, unsigned long, void*, int*)+0x1ef>
c002192b:	83 bc 24 50 08 00 00 00 	cmp    DWORD PTR [esp+0x850],0x0
c0021933:	0f 84 c8 01 00 00    	je     c0021b01 <ISO9660::read(void*, unsigned long, void*, int*)+0x1ef>
c0021939:	b8 01 00 00 00       	mov    eax,0x1
c002193e:	80 7d 18 00          	cmp    BYTE PTR [ebp+0x18],0x0
c0021942:	0f 85 be 01 00 00    	jne    c0021b06 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f4>
c0021948:	31 d2                	xor    edx,edx
c002194a:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c0021951:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0021954:	8b 75 10             	mov    esi,DWORD PTR [ebp+0x10]
c0021957:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c002195b:	8b 7d 14             	mov    edi,DWORD PTR [ebp+0x14]
c002195e:	89 04 24             	mov    DWORD PTR [esp],eax
c0021961:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0021965:	01 f0                	add    eax,esi
c0021967:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c002196a:	11 fa                	adc    edx,edi
c002196c:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0021970:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c0021974:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0021978:	19 d1                	sbb    ecx,edx
c002197a:	72 0a                	jb     c0021986 <ISO9660::read(void*, unsigned long, void*, int*)+0x74>
c002197c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0021980:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0021984:	eb 13                	jmp    c0021999 <ISO9660::read(void*, unsigned long, void*, int*)+0x87>
c0021986:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002198a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c002198e:	29 f0                	sub    eax,esi
c0021990:	19 fa                	sbb    edx,edi
c0021992:	89 04 24             	mov    DWORD PTR [esp],eax
c0021995:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0021999:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c002199c:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c002199f:	0f a4 c2 0b          	shld   edx,eax,0xb
c00219a3:	51                   	push   ecx
c00219a4:	c1 e0 0b             	shl    eax,0xb
c00219a7:	01 c6                	add    esi,eax
c00219a9:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c00219ad:	11 d7                	adc    edi,edx
c00219af:	50                   	push   eax
c00219b0:	89 fa                	mov    edx,edi
c00219b2:	8d 5c 24 28          	lea    ebx,[esp+0x28]
c00219b6:	89 f0                	mov    eax,esi
c00219b8:	53                   	push   ebx
c00219b9:	0f ac d0 0b          	shrd   eax,edx,0xb
c00219bd:	50                   	push   eax
c00219be:	e8 98 fe ff ff       	call   c002185b <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c00219c3:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00219c7:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c00219ca:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c00219ce:	81 e2 ff 07 00 00    	and    edx,0x7ff
c00219d4:	83 c4 10             	add    esp,0x10
c00219d7:	b8 00 08 00 00       	mov    eax,0x800
c00219dc:	29 d0                	sub    eax,edx
c00219de:	39 c1                	cmp    ecx,eax
c00219e0:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00219e4:	83 d9 00             	sbb    ecx,0x0
c00219e7:	7d 1c                	jge    c0021a05 <ISO9660::read(void*, unsigned long, void*, int*)+0xf3>
c00219e9:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00219ee:	75 12                	jne    c0021a02 <ISO9660::read(void*, unsigned long, void*, int*)+0xf0>
c00219f0:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c00219f7:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00219fd:	e9 fb 00 00 00       	jmp    c0021afd <ISO9660::read(void*, unsigned long, void*, int*)+0x1eb>
c0021a02:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0021a05:	8d 0c 13             	lea    ecx,[ebx+edx*1]
c0021a08:	31 d2                	xor    edx,edx
c0021a0a:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0021a0e:	39 c2                	cmp    edx,eax
c0021a10:	7d 14                	jge    c0021a26 <ISO9660::read(void*, unsigned long, void*, int*)+0x114>
c0021a12:	8b 9c 24 4c 08 00 00 	mov    ebx,DWORD PTR [esp+0x84c]
c0021a19:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0021a1d:	8a 0c 11             	mov    cl,BYTE PTR [ecx+edx*1]
c0021a20:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c0021a23:	42                   	inc    edx
c0021a24:	eb e8                	jmp    c0021a0e <ISO9660::read(void*, unsigned long, void*, int*)+0xfc>
c0021a26:	89 c3                	mov    ebx,eax
c0021a28:	85 c0                	test   eax,eax
c0021a2a:	79 02                	jns    c0021a2e <ISO9660::read(void*, unsigned long, void*, int*)+0x11c>
c0021a2c:	31 db                	xor    ebx,ebx
c0021a2e:	99                   	cdq    
c0021a2f:	01 c3                	add    ebx,eax
c0021a31:	03 9c 24 4c 08 00 00 	add    ebx,DWORD PTR [esp+0x84c]
c0021a38:	01 c6                	add    esi,eax
c0021a3a:	11 d7                	adc    edi,edx
c0021a3c:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0021a40:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c0021a44:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0021a47:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0021a4b:	29 c6                	sub    esi,eax
c0021a4d:	19 d7                	sbb    edi,edx
c0021a4f:	89 34 24             	mov    DWORD PTR [esp],esi
c0021a52:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0021a56:	b8 ff 07 00 00       	mov    eax,0x7ff
c0021a5b:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0021a5e:	b8 00 00 00 00       	mov    eax,0x0
c0021a63:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0021a67:	7d 3e                	jge    c0021aa7 <ISO9660::read(void*, unsigned long, void*, int*)+0x195>
c0021a69:	52                   	push   edx
c0021a6a:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0021a6e:	50                   	push   eax
c0021a6f:	53                   	push   ebx
c0021a70:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0021a74:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0021a78:	0f ac d0 0b          	shrd   eax,edx,0xb
c0021a7c:	50                   	push   eax
c0021a7d:	e8 d9 fd ff ff       	call   c002185b <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021a82:	81 44 24 20 00 08 00 00 	add    DWORD PTR [esp+0x20],0x800
c0021a8a:	83 54 24 24 00       	adc    DWORD PTR [esp+0x24],0x0
c0021a8f:	81 c3 00 08 00 00    	add    ebx,0x800
c0021a95:	81 44 24 10 00 f8 ff ff 	add    DWORD PTR [esp+0x10],0xfffff800
c0021a9d:	83 54 24 14 ff       	adc    DWORD PTR [esp+0x14],0xffffffff
c0021aa2:	83 c4 10             	add    esp,0x10
c0021aa5:	eb af                	jmp    c0021a56 <ISO9660::read(void*, unsigned long, void*, int*)+0x144>
c0021aa7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021aab:	0b 04 24             	or     eax,DWORD PTR [esp]
c0021aae:	74 32                	je     c0021ae2 <ISO9660::read(void*, unsigned long, void*, int*)+0x1d0>
c0021ab0:	50                   	push   eax
c0021ab1:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0021ab5:	50                   	push   eax
c0021ab6:	8d 44 24 28          	lea    eax,[esp+0x28]
c0021aba:	50                   	push   eax
c0021abb:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0021abf:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0021ac3:	0f ac fe 0b          	shrd   esi,edi,0xb
c0021ac7:	56                   	push   esi
c0021ac8:	e8 8e fd ff ff       	call   c002185b <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021acd:	83 c4 0c             	add    esp,0xc
c0021ad0:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0021ad4:	8d 44 24 28          	lea    eax,[esp+0x28]
c0021ad8:	50                   	push   eax
c0021ad9:	53                   	push   ebx
c0021ada:	e8 65 ec fd ff       	call   c0000744 <memcpy>
c0021adf:	83 c4 10             	add    esp,0x10
c0021ae2:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c0021ae9:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0021aed:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0021af1:	89 38                	mov    DWORD PTR [eax],edi
c0021af3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021af7:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c0021afa:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c0021afd:	31 c0                	xor    eax,eax
c0021aff:	eb 05                	jmp    c0021b06 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f4>
c0021b01:	b8 04 00 00 00       	mov    eax,0x4
c0021b06:	81 c4 2c 08 00 00    	add    esp,0x82c
c0021b0c:	5b                   	pop    ebx
c0021b0d:	5e                   	pop    esi
c0021b0e:	5f                   	pop    edi
c0021b0f:	5d                   	pop    ebp
c0021b10:	c3                   	ret    
c0021b11:	90                   	nop

c0021b12 <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c0021b12:	55                   	push   ebp
c0021b13:	57                   	push   edi
c0021b14:	56                   	push   esi
c0021b15:	53                   	push   ebx
c0021b16:	81 ec 5c 09 00 00    	sub    esp,0x95c
c0021b1c:	8b b4 24 74 09 00 00 	mov    esi,DWORD PTR [esp+0x974]
c0021b23:	85 f6                	test   esi,esi
c0021b25:	0f 84 64 02 00 00    	je     c0021d8f <ISO9660::readDir(void*, unsigned long, void*, int*)+0x27d>
c0021b2b:	83 bc 24 80 09 00 00 00 	cmp    DWORD PTR [esp+0x980],0x0
c0021b33:	0f 84 56 02 00 00    	je     c0021d8f <ISO9660::readDir(void*, unsigned long, void*, int*)+0x27d>
c0021b39:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0021b3c:	0b 46 08             	or     eax,DWORD PTR [esi+0x8]
c0021b3f:	75 0a                	jne    c0021b4b <ISO9660::readDir(void*, unsigned long, void*, int*)+0x39>
c0021b41:	b8 07 00 00 00       	mov    eax,0x7
c0021b46:	e9 49 02 00 00       	jmp    c0021d94 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x282>
c0021b4b:	50                   	push   eax
c0021b4c:	0f be 46 19          	movsx  eax,BYTE PTR [esi+0x19]
c0021b50:	50                   	push   eax
c0021b51:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c0021b58:	53                   	push   ebx
c0021b59:	8b 06                	mov    eax,DWORD PTR [esi]
c0021b5b:	c1 e0 0b             	shl    eax,0xb
c0021b5e:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c0021b61:	c1 e8 0b             	shr    eax,0xb
c0021b64:	50                   	push   eax
c0021b65:	e8 f1 fc ff ff       	call   c002185b <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021b6a:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0021b6d:	83 c4 10             	add    esp,0x10
c0021b70:	89 c1                	mov    ecx,eax
c0021b72:	8b 56 14             	mov    edx,DWORD PTR [esi+0x14]
c0021b75:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0021b7b:	8a 1c 0b             	mov    bl,BYTE PTR [ebx+ecx*1]
c0021b7e:	84 db                	test   bl,bl
c0021b80:	0f 85 90 00 00 00    	jne    c0021c16 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x104>
c0021b86:	8d b8 ff 07 00 00    	lea    edi,[eax+0x7ff]
c0021b8c:	81 e7 ff 07 00 00    	and    edi,0x7ff
c0021b92:	29 c7                	sub    edi,eax
c0021b94:	89 fb                	mov    ebx,edi
c0021b96:	c1 fb 1f             	sar    ebx,0x1f
c0021b99:	01 f8                	add    eax,edi
c0021b9b:	11 da                	adc    edx,ebx
c0021b9d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0021ba1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0021ba5:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c0021ba8:	89 56 14             	mov    DWORD PTR [esi+0x14],edx
c0021bab:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c0021bae:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0021bb1:	89 04 24             	mov    DWORD PTR [esp],eax
c0021bb4:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0021bb8:	89 d8                	mov    eax,ebx
c0021bba:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c0021bbd:	ba 00 00 00 00       	mov    edx,0x0
c0021bc2:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0021bc6:	b8 00 00 00 00       	mov    eax,0x0
c0021bcb:	73 0b                	jae    c0021bd8 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc6>
c0021bcd:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0021bd0:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0021bd4:	29 f8                	sub    eax,edi
c0021bd6:	19 da                	sbb    edx,ebx
c0021bd8:	89 d3                	mov    ebx,edx
c0021bda:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c0021bdd:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c0021be0:	09 c3                	or     ebx,eax
c0021be2:	0f 84 59 ff ff ff    	je     c0021b41 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x2f>
c0021be8:	55                   	push   ebp
c0021be9:	0f be 46 19          	movsx  eax,BYTE PTR [esi+0x19]
c0021bed:	50                   	push   eax
c0021bee:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c0021bf5:	53                   	push   ebx
c0021bf6:	8b 06                	mov    eax,DWORD PTR [esi]
c0021bf8:	c1 e0 0b             	shl    eax,0xb
c0021bfb:	03 44 24 14          	add    eax,DWORD PTR [esp+0x14]
c0021bff:	c1 e8 0b             	shr    eax,0xb
c0021c02:	50                   	push   eax
c0021c03:	e8 53 fc ff ff       	call   c002185b <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021c08:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0021c0b:	83 c4 10             	add    esp,0x10
c0021c0e:	25 ff 07 00 00       	and    eax,0x7ff
c0021c13:	8a 1c 03             	mov    bl,BYTE PTR [ebx+eax*1]
c0021c16:	57                   	push   edi
c0021c17:	6a 28                	push   0x28
c0021c19:	6a 00                	push   0x0
c0021c1b:	8d 44 24 24          	lea    eax,[esp+0x24]
c0021c1f:	50                   	push   eax
c0021c20:	e8 53 eb fd ff       	call   c0000778 <memset>
c0021c25:	31 d2                	xor    edx,edx
c0021c27:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c0021c2a:	81 e7 ff 07 00 00    	and    edi,0x7ff
c0021c30:	89 f8                	mov    eax,edi
c0021c32:	83 c0 21             	add    eax,0x21
c0021c35:	83 d2 00             	adc    edx,0x0
c0021c38:	89 c7                	mov    edi,eax
c0021c3a:	89 d5                	mov    ebp,edx
c0021c3c:	83 c4 10             	add    esp,0x10
c0021c3f:	31 c9                	xor    ecx,ecx
c0021c41:	8a 84 3c 50 01 00 00 	mov    al,BYTE PTR [esp+edi*1+0x150]
c0021c48:	83 f9 28             	cmp    ecx,0x28
c0021c4b:	88 04 24             	mov    BYTE PTR [esp],al
c0021c4e:	0f 94 c2             	sete   dl
c0021c51:	88 d0                	mov    al,dl
c0021c53:	ba ff 07 00 00       	mov    edx,0x7ff
c0021c58:	39 fa                	cmp    edx,edi
c0021c5a:	ba 00 00 00 00       	mov    edx,0x0
c0021c5f:	19 ea                	sbb    edx,ebp
c0021c61:	0f 92 c2             	setb   dl
c0021c64:	09 c2                	or     edx,eax
c0021c66:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c0021c6a:	0f 94 c0             	sete   al
c0021c6d:	08 d0                	or     al,dl
c0021c6f:	75 16                	jne    c0021c87 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x175>
c0021c71:	80 3c 24 3b          	cmp    BYTE PTR [esp],0x3b
c0021c75:	74 10                	je     c0021c87 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x175>
c0021c77:	8a 04 24             	mov    al,BYTE PTR [esp]
c0021c7a:	88 44 0c 18          	mov    BYTE PTR [esp+ecx*1+0x18],al
c0021c7e:	41                   	inc    ecx
c0021c7f:	83 c7 01             	add    edi,0x1
c0021c82:	83 d5 00             	adc    ebp,0x0
c0021c85:	eb ba                	jmp    c0021c41 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x12f>
c0021c87:	66 c7 44 24 40 00 00 	mov    WORD PTR [esp+0x40],0x0
c0021c8e:	83 ec 0c             	sub    esp,0xc
c0021c91:	8d 7c 24 24          	lea    edi,[esp+0x24]
c0021c95:	57                   	push   edi
c0021c96:	e8 f9 ea fd ff       	call   c0000794 <strlen>
c0021c9b:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c0021ca3:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0021ca7:	8d 8c 24 60 09 00 00 	lea    ecx,[esp+0x960]
c0021cae:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0021cb1:	5a                   	pop    edx
c0021cb2:	25 ff 07 00 00       	and    eax,0x7ff
c0021cb7:	01 c8                	add    eax,ecx
c0021cb9:	59                   	pop    ecx
c0021cba:	8a 80 19 f8 ff ff    	mov    al,BYTE PTR [eax-0x7e7]
c0021cc0:	83 e0 02             	and    eax,0x2
c0021cc3:	3c 01                	cmp    al,0x1
c0021cc5:	19 c0                	sbb    eax,eax
c0021cc7:	83 c0 02             	add    eax,0x2
c0021cca:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0021cce:	57                   	push   edi
c0021ccf:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c0021cd3:	50                   	push   eax
c0021cd4:	e8 5b eb fd ff       	call   c0000834 <strcpy>
c0021cd9:	8a 44 24 60          	mov    al,BYTE PTR [esp+0x60]
c0021cdd:	83 c4 10             	add    esp,0x10
c0021ce0:	84 c0                	test   al,al
c0021ce2:	75 21                	jne    c0021d05 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x1f3>
c0021ce4:	c7 44 24 44 01 00 00 00 	mov    DWORD PTR [esp+0x44],0x1
c0021cec:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0021cf4:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c0021cfc:	66 c7 44 24 50 2e 00 	mov    WORD PTR [esp+0x50],0x2e
c0021d03:	eb 28                	jmp    c0021d2d <ISO9660::readDir(void*, unsigned long, void*, int*)+0x21b>
c0021d05:	fe c8                	dec    al
c0021d07:	75 24                	jne    c0021d2d <ISO9660::readDir(void*, unsigned long, void*, int*)+0x21b>
c0021d09:	c7 44 24 44 02 00 00 00 	mov    DWORD PTR [esp+0x44],0x2
c0021d11:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0021d19:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c0021d21:	66 c7 44 24 50 2e 2e 	mov    WORD PTR [esp+0x50],0x2e2e
c0021d28:	c6 44 24 52 00       	mov    BYTE PTR [esp+0x52],0x0
c0021d2d:	0f b6 fb             	movzx  edi,bl
c0021d30:	31 db                	xor    ebx,ebx
c0021d32:	50                   	push   eax
c0021d33:	ff b4 24 7c 09 00 00 	push   DWORD PTR [esp+0x97c]
c0021d3a:	8d 44 24 48          	lea    eax,[esp+0x48]
c0021d3e:	50                   	push   eax
c0021d3f:	ff b4 24 88 09 00 00 	push   DWORD PTR [esp+0x988]
c0021d46:	e8 f9 e9 fd ff       	call   c0000744 <memcpy>
c0021d4b:	8b 84 24 90 09 00 00 	mov    eax,DWORD PTR [esp+0x990]
c0021d52:	89 f9                	mov    ecx,edi
c0021d54:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c0021d5a:	01 7e 10             	add    DWORD PTR [esi+0x10],edi
c0021d5d:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c0021d60:	11 5e 14             	adc    DWORD PTR [esi+0x14],ebx
c0021d63:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0021d66:	83 c4 10             	add    esp,0x10
c0021d69:	39 c7                	cmp    edi,eax
c0021d6b:	89 df                	mov    edi,ebx
c0021d6d:	19 d7                	sbb    edi,edx
c0021d6f:	72 10                	jb     c0021d81 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c0021d71:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c0021d78:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c0021d7f:	eb 0a                	jmp    c0021d8b <ISO9660::readDir(void*, unsigned long, void*, int*)+0x279>
c0021d81:	29 c8                	sub    eax,ecx
c0021d83:	19 da                	sbb    edx,ebx
c0021d85:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c0021d88:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c0021d8b:	31 c0                	xor    eax,eax
c0021d8d:	eb 05                	jmp    c0021d94 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x282>
c0021d8f:	b8 04 00 00 00       	mov    eax,0x4
c0021d94:	81 c4 5c 09 00 00    	add    esp,0x95c
c0021d9a:	5b                   	pop    ebx
c0021d9b:	5e                   	pop    esi
c0021d9c:	5f                   	pop    edi
c0021d9d:	5d                   	pop    ebp
c0021d9e:	c3                   	ret    

c0021d9f <readRoot(unsigned int*, unsigned int*, char)>:
c0021d9f:	81 ec 40 08 00 00    	sub    esp,0x840
c0021da5:	0f be 84 24 4c 08 00 00 	movsx  eax,BYTE PTR [esp+0x84c]
c0021dad:	50                   	push   eax
c0021dae:	8d 44 24 38          	lea    eax,[esp+0x38]
c0021db2:	50                   	push   eax
c0021db3:	6a 10                	push   0x10
c0021db5:	e8 a1 fa ff ff       	call   c002185b <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021dba:	83 c4 0c             	add    esp,0xc
c0021dbd:	6a 22                	push   0x22
c0021dbf:	8d 84 24 d4 00 00 00 	lea    eax,[esp+0xd4]
c0021dc6:	50                   	push   eax
c0021dc7:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c0021dcb:	50                   	push   eax
c0021dcc:	e8 73 e9 fd ff       	call   c0000744 <memcpy>
c0021dd1:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c0021dd8:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0021ddc:	89 10                	mov    DWORD PTR [eax],edx
c0021dde:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c0021de5:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0021de9:	89 10                	mov    DWORD PTR [eax],edx
c0021deb:	b0 01                	mov    al,0x1
c0021ded:	81 c4 4c 08 00 00    	add    esp,0x84c
c0021df3:	c3                   	ret    

c0021df4 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>:
c0021df4:	55                   	push   ebp
c0021df5:	57                   	push   edi
c0021df6:	56                   	push   esi
c0021df7:	53                   	push   ebx
c0021df8:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0021dfe:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c0021e05:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c0021e0c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0021e10:	80 7b 01 3a          	cmp    BYTE PTR [ebx+0x1],0x3a
c0021e14:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0021e18:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0021e1c:	75 03                	jne    c0021e21 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c0021e1e:	83 c3 02             	add    ebx,0x2
c0021e21:	80 3b 2f             	cmp    BYTE PTR [ebx],0x2f
c0021e24:	75 03                	jne    c0021e29 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x35>
c0021e26:	43                   	inc    ebx
c0021e27:	eb f8                	jmp    c0021e21 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c0021e29:	51                   	push   ecx
c0021e2a:	68 00 01 00 00       	push   0x100
c0021e2f:	6a 00                	push   0x0
c0021e31:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021e35:	50                   	push   eax
c0021e36:	e8 3d e9 fd ff       	call   c0000778 <memset>
c0021e3b:	83 c4 10             	add    esp,0x10
c0021e3e:	31 d2                	xor    edx,edx
c0021e40:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c0021e43:	84 c0                	test   al,al
c0021e45:	74 21                	je     c0021e68 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x74>
c0021e47:	3c 2f                	cmp    al,0x2f
c0021e49:	75 0b                	jne    c0021e56 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x62>
c0021e4b:	8d 5c 13 01          	lea    ebx,[ebx+edx*1+0x1]
c0021e4f:	bd 01 00 00 00       	mov    ebp,0x1
c0021e54:	eb 14                	jmp    c0021e6a <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x76>
c0021e56:	8d 48 9f             	lea    ecx,[eax-0x61]
c0021e59:	80 f9 19             	cmp    cl,0x19
c0021e5c:	77 03                	ja     c0021e61 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x6d>
c0021e5e:	83 e8 20             	sub    eax,0x20
c0021e61:	88 44 14 10          	mov    BYTE PTR [esp+edx*1+0x10],al
c0021e65:	42                   	inc    edx
c0021e66:	eb d8                	jmp    c0021e40 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x4c>
c0021e68:	31 ed                	xor    ebp,ebp
c0021e6a:	83 ec 0c             	sub    esp,0xc
c0021e6d:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c0021e74:	e8 6b da fe ff       	call   c000f8e4 <malloc>
c0021e79:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c0021e80:	89 c6                	mov    esi,eax
c0021e82:	8d b9 ff 07 00 00    	lea    edi,[ecx+0x7ff]
c0021e88:	c1 ef 0b             	shr    edi,0xb
c0021e8b:	03 bc 24 44 01 00 00 	add    edi,DWORD PTR [esp+0x144]
c0021e92:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c0021e96:	83 c4 10             	add    esp,0x10
c0021e99:	0f be 7c 24 0c       	movsx  edi,BYTE PTR [esp+0xc]
c0021e9e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0021ea2:	3b 8c 24 34 01 00 00 	cmp    ecx,DWORD PTR [esp+0x134]
c0021ea9:	74 28                	je     c0021ed3 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xdf>
c0021eab:	52                   	push   edx
c0021eac:	57                   	push   edi
c0021ead:	50                   	push   eax
c0021eae:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0021eb2:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0021eb9:	e8 9d f9 ff ff       	call   c002185b <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021ebe:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0021ec2:	ff 84 24 44 01 00 00 	inc    DWORD PTR [esp+0x144]
c0021ec9:	05 00 08 00 00       	add    eax,0x800
c0021ece:	83 c4 10             	add    esp,0x10
c0021ed1:	eb cb                	jmp    c0021e9e <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xaa>
c0021ed3:	83 ec 0c             	sub    esp,0xc
c0021ed6:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c0021eda:	57                   	push   edi
c0021edb:	e8 b4 e8 fd ff       	call   c0000794 <strlen>
c0021ee0:	50                   	push   eax
c0021ee1:	57                   	push   edi
c0021ee2:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c0021ee9:	56                   	push   esi
c0021eea:	e8 2a f9 ff ff       	call   c0021819 <__memmem(unsigned char*, int, unsigned char*, int)>
c0021eef:	83 c4 20             	add    esp,0x20
c0021ef2:	85 c0                	test   eax,eax
c0021ef4:	75 13                	jne    c0021f09 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x115>
c0021ef6:	83 ec 0c             	sub    esp,0xc
c0021ef9:	56                   	push   esi
c0021efa:	e8 f5 d9 fe ff       	call   c000f8f4 <free>
c0021eff:	83 c4 10             	add    esp,0x10
c0021f02:	31 c0                	xor    eax,eax
c0021f04:	e9 b3 00 00 00       	jmp    c0021fbc <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c0021f09:	0f b6 78 e2          	movzx  edi,BYTE PTR [eax-0x1e]
c0021f0d:	0f b6 50 e3          	movzx  edx,BYTE PTR [eax-0x1d]
c0021f11:	c1 e7 08             	shl    edi,0x8
c0021f14:	c1 e2 10             	shl    edx,0x10
c0021f17:	09 d7                	or     edi,edx
c0021f19:	0f b6 50 e1          	movzx  edx,BYTE PTR [eax-0x1f]
c0021f1d:	09 d7                	or     edi,edx
c0021f1f:	0f b6 50 e4          	movzx  edx,BYTE PTR [eax-0x1c]
c0021f23:	c1 e2 18             	shl    edx,0x18
c0021f26:	09 d7                	or     edi,edx
c0021f28:	0f b6 50 ea          	movzx  edx,BYTE PTR [eax-0x16]
c0021f2c:	89 d1                	mov    ecx,edx
c0021f2e:	0f b6 50 eb          	movzx  edx,BYTE PTR [eax-0x15]
c0021f32:	c1 e1 08             	shl    ecx,0x8
c0021f35:	c1 e2 10             	shl    edx,0x10
c0021f38:	09 ca                	or     edx,ecx
c0021f3a:	0f b6 48 e9          	movzx  ecx,BYTE PTR [eax-0x17]
c0021f3e:	09 ca                	or     edx,ecx
c0021f40:	0f b6 48 ec          	movzx  ecx,BYTE PTR [eax-0x14]
c0021f44:	c1 e1 18             	shl    ecx,0x18
c0021f47:	09 ca                	or     edx,ecx
c0021f49:	89 e9                	mov    ecx,ebp
c0021f4b:	84 c9                	test   cl,cl
c0021f4d:	74 3c                	je     c0021f8b <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x197>
c0021f4f:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0021f53:	83 ec 0c             	sub    esp,0xc
c0021f56:	56                   	push   esi
c0021f57:	e8 98 d9 fe ff       	call   c000f8f4 <free>
c0021f5c:	83 c4 0c             	add    esp,0xc
c0021f5f:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0021f66:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c0021f6b:	50                   	push   eax
c0021f6c:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0021f73:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0021f7a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0021f7e:	52                   	push   edx
c0021f7f:	57                   	push   edi
c0021f80:	53                   	push   ebx
c0021f81:	e8 6e fe ff ff       	call   c0021df4 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c0021f86:	83 c4 20             	add    esp,0x20
c0021f89:	eb 31                	jmp    c0021fbc <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c0021f8b:	8a 40 f8             	mov    al,BYTE PTR [eax-0x8]
c0021f8e:	8b 9c 24 3c 01 00 00 	mov    ebx,DWORD PTR [esp+0x13c]
c0021f95:	d0 e8                	shr    al,1
c0021f97:	89 3b                	mov    DWORD PTR [ebx],edi
c0021f99:	83 e0 01             	and    eax,0x1
c0021f9c:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c0021fa3:	83 ec 0c             	sub    esp,0xc
c0021fa6:	89 13                	mov    DWORD PTR [ebx],edx
c0021fa8:	8b 9c 24 54 01 00 00 	mov    ebx,DWORD PTR [esp+0x154]
c0021faf:	89 03                	mov    DWORD PTR [ebx],eax
c0021fb1:	56                   	push   esi
c0021fb2:	e8 3d d9 fe ff       	call   c000f8f4 <free>
c0021fb7:	83 c4 10             	add    esp,0x10
c0021fba:	b0 01                	mov    al,0x1
c0021fbc:	81 c4 1c 01 00 00    	add    esp,0x11c
c0021fc2:	5b                   	pop    ebx
c0021fc3:	5e                   	pop    esi
c0021fc4:	5f                   	pop    edi
c0021fc5:	5d                   	pop    ebp
c0021fc6:	c3                   	ret    

c0021fc7 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>:
c0021fc7:	55                   	push   ebp
c0021fc8:	57                   	push   edi
c0021fc9:	56                   	push   esi
c0021fca:	53                   	push   ebx
c0021fcb:	83 ec 20             	sub    esp,0x20
c0021fce:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0021fd2:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0021fd6:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0021fda:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0021fe2:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0021fea:	0f be 7c 24 40       	movsx  edi,BYTE PTR [esp+0x40]
c0021fef:	c7 03 ff ff ff ff    	mov    DWORD PTR [ebx],0xffffffff
c0021ff5:	c7 06 ff ff ff ff    	mov    DWORD PTR [esi],0xffffffff
c0021ffb:	57                   	push   edi
c0021ffc:	8d 44 24 14          	lea    eax,[esp+0x14]
c0022000:	50                   	push   eax
c0022001:	8d 44 24 14          	lea    eax,[esp+0x14]
c0022005:	50                   	push   eax
c0022006:	e8 94 fd ff ff       	call   c0021d9f <readRoot(unsigned int*, unsigned int*, char)>
c002200b:	5a                   	pop    edx
c002200c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0022010:	e8 7f e7 fd ff       	call   c0000794 <strlen>
c0022015:	83 c4 10             	add    esp,0x10
c0022018:	83 f8 03             	cmp    eax,0x3
c002201b:	77 17                	ja     c0022034 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x6d>
c002201d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0022021:	89 03                	mov    DWORD PTR [ebx],eax
c0022023:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022027:	89 06                	mov    DWORD PTR [esi],eax
c0022029:	c7 45 00 01 00 00 00 	mov    DWORD PTR [ebp+0x0],0x1
c0022030:	b0 01                	mov    al,0x1
c0022032:	eb 19                	jmp    c002204d <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x86>
c0022034:	50                   	push   eax
c0022035:	55                   	push   ebp
c0022036:	57                   	push   edi
c0022037:	56                   	push   esi
c0022038:	53                   	push   ebx
c0022039:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c002203d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0022041:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0022045:	e8 aa fd ff ff       	call   c0021df4 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c002204a:	83 c4 20             	add    esp,0x20
c002204d:	83 c4 1c             	add    esp,0x1c
c0022050:	5b                   	pop    ebx
c0022051:	5e                   	pop    esi
c0022052:	5f                   	pop    edi
c0022053:	5d                   	pop    ebp
c0022054:	c3                   	ret    
c0022055:	90                   	nop

c0022056 <ISO9660::open(char const*, void**, FileOpenMode)>:
c0022056:	57                   	push   edi
c0022057:	56                   	push   esi
c0022058:	53                   	push   ebx
c0022059:	83 ec 10             	sub    esp,0x10
c002205c:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0022060:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0022064:	85 ff                	test   edi,edi
c0022066:	0f 84 9d 00 00 00    	je     c0022109 <ISO9660::open(char const*, void**, FileOpenMode)+0xb3>
c002206c:	85 f6                	test   esi,esi
c002206e:	0f 84 95 00 00 00    	je     c0022109 <ISO9660::open(char const*, void**, FileOpenMode)+0xb3>
c0022074:	83 7c 24 2c 01       	cmp    DWORD PTR [esp+0x2c],0x1
c0022079:	74 17                	je     c0022092 <ISO9660::open(char const*, void**, FileOpenMode)+0x3c>
c002207b:	83 ec 0c             	sub    esp,0xc
c002207e:	68 cf cb 02 c0       	push   0xc002cbcf
c0022083:	e8 5b 0f ff ff       	call   c0012fe3 <Dbg::kprintf(char const*, ...)>
c0022088:	83 c4 10             	add    esp,0x10
c002208b:	b8 03 00 00 00       	mov    eax,0x3
c0022090:	eb 7c                	jmp    c002210e <ISO9660::open(char const*, void**, FileOpenMode)+0xb8>
c0022092:	83 ec 0c             	sub    esp,0xc
c0022095:	6a 1c                	push   0x1c
c0022097:	e8 48 d8 fe ff       	call   c000f8e4 <malloc>
c002209c:	89 07                	mov    DWORD PTR [edi],eax
c002209e:	89 c3                	mov    ebx,eax
c00220a0:	58                   	pop    eax
c00220a1:	8d 44 24 18          	lea    eax,[esp+0x18]
c00220a5:	50                   	push   eax
c00220a6:	0f be 06             	movsx  eax,BYTE PTR [esi]
c00220a9:	50                   	push   eax
c00220aa:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00220ae:	50                   	push   eax
c00220af:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00220b3:	50                   	push   eax
c00220b4:	56                   	push   esi
c00220b5:	e8 0d ff ff ff       	call   c0021fc7 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c00220ba:	83 c4 20             	add    esp,0x20
c00220bd:	84 c0                	test   al,al
c00220bf:	74 07                	je     c00220c8 <ISO9660::open(char const*, void**, FileOpenMode)+0x72>
c00220c1:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00220c6:	74 0b                	je     c00220d3 <ISO9660::open(char const*, void**, FileOpenMode)+0x7d>
c00220c8:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c00220cc:	b8 01 00 00 00       	mov    eax,0x1
c00220d1:	eb 3b                	jmp    c002210e <ISO9660::open(char const*, void**, FileOpenMode)+0xb8>
c00220d3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00220d7:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c00220db:	89 03                	mov    DWORD PTR [ebx],eax
c00220dd:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c00220e4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00220e8:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00220ef:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00220f6:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00220f9:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0022100:	8a 06                	mov    al,BYTE PTR [esi]
c0022102:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c0022105:	31 c0                	xor    eax,eax
c0022107:	eb 05                	jmp    c002210e <ISO9660::open(char const*, void**, FileOpenMode)+0xb8>
c0022109:	b8 04 00 00 00       	mov    eax,0x4
c002210e:	83 c4 10             	add    esp,0x10
c0022111:	5b                   	pop    ebx
c0022112:	5e                   	pop    esi
c0022113:	5f                   	pop    edi
c0022114:	c3                   	ret    
c0022115:	90                   	nop

c0022116 <ISO9660::exists(char const*)>:
c0022116:	83 ec 28             	sub    esp,0x28
c0022119:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c002211d:	8d 54 24 18          	lea    edx,[esp+0x18]
c0022121:	52                   	push   edx
c0022122:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0022125:	52                   	push   edx
c0022126:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c002212a:	52                   	push   edx
c002212b:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c002212f:	52                   	push   edx
c0022130:	50                   	push   eax
c0022131:	e8 91 fe ff ff       	call   c0021fc7 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0022136:	83 c4 3c             	add    esp,0x3c
c0022139:	c3                   	ret    

c002213a <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c002213a:	56                   	push   esi
c002213b:	53                   	push   ebx
c002213c:	83 ec 14             	sub    esp,0x14
c002213f:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0022143:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0022147:	85 db                	test   ebx,ebx
c0022149:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c002214d:	0f 94 c2             	sete   dl
c0022150:	85 f6                	test   esi,esi
c0022152:	0f 94 c0             	sete   al
c0022155:	08 c2                	or     dl,al
c0022157:	75 68                	jne    c00221c1 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c0022159:	85 c9                	test   ecx,ecx
c002215b:	74 64                	je     c00221c1 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c002215d:	83 ec 0c             	sub    esp,0xc
c0022160:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0022163:	8d 44 24 18          	lea    eax,[esp+0x18]
c0022167:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c002216d:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0022174:	50                   	push   eax
c0022175:	0f be 01             	movsx  eax,BYTE PTR [ecx]
c0022178:	50                   	push   eax
c0022179:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002217d:	50                   	push   eax
c002217e:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0022182:	50                   	push   eax
c0022183:	51                   	push   ecx
c0022184:	e8 3e fe ff ff       	call   c0021fc7 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0022189:	83 c4 20             	add    esp,0x20
c002218c:	ba 01 00 00 00       	mov    edx,0x1
c0022191:	84 c0                	test   al,al
c0022193:	74 31                	je     c00221c6 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c0022195:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0022199:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00221a0:	89 03                	mov    DWORD PTR [ebx],eax
c00221a2:	ba 00 00 00 00       	mov    edx,0x0
c00221a7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00221ab:	85 c0                	test   eax,eax
c00221ad:	0f 95 06             	setne  BYTE PTR [esi]
c00221b0:	74 14                	je     c00221c6 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c00221b2:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00221b8:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00221bf:	eb 05                	jmp    c00221c6 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c00221c1:	ba 04 00 00 00       	mov    edx,0x4
c00221c6:	83 c4 14             	add    esp,0x14
c00221c9:	89 d0                	mov    eax,edx
c00221cb:	5b                   	pop    ebx
c00221cc:	5e                   	pop    esi
c00221cd:	c3                   	ret    

c00221ce <ISO9660::openDir(char const*, void**)>:
c00221ce:	57                   	push   edi
c00221cf:	56                   	push   esi
c00221d0:	53                   	push   ebx
c00221d1:	83 ec 10             	sub    esp,0x10
c00221d4:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00221d8:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00221dc:	85 ff                	test   edi,edi
c00221de:	0f 84 95 00 00 00    	je     c0022279 <ISO9660::openDir(char const*, void**)+0xab>
c00221e4:	85 f6                	test   esi,esi
c00221e6:	0f 84 8d 00 00 00    	je     c0022279 <ISO9660::openDir(char const*, void**)+0xab>
c00221ec:	83 ec 0c             	sub    esp,0xc
c00221ef:	6a 1c                	push   0x1c
c00221f1:	e8 ee d6 fe ff       	call   c000f8e4 <malloc>
c00221f6:	89 07                	mov    DWORD PTR [edi],eax
c00221f8:	89 c3                	mov    ebx,eax
c00221fa:	59                   	pop    ecx
c00221fb:	8d 44 24 18          	lea    eax,[esp+0x18]
c00221ff:	50                   	push   eax
c0022200:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0022203:	50                   	push   eax
c0022204:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0022208:	50                   	push   eax
c0022209:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002220d:	50                   	push   eax
c002220e:	56                   	push   esi
c002220f:	e8 b3 fd ff ff       	call   c0021fc7 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0022214:	83 c4 20             	add    esp,0x20
c0022217:	84 c0                	test   al,al
c0022219:	74 07                	je     c0022222 <ISO9660::openDir(char const*, void**)+0x54>
c002221b:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0022220:	75 21                	jne    c0022243 <ISO9660::openDir(char const*, void**)+0x75>
c0022222:	0f b6 c0             	movzx  eax,al
c0022225:	52                   	push   edx
c0022226:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c002222a:	50                   	push   eax
c002222b:	68 f5 cb 02 c0       	push   0xc002cbf5
c0022230:	e8 ae 0d ff ff       	call   c0012fe3 <Dbg::kprintf(char const*, ...)>
c0022235:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c0022239:	83 c4 10             	add    esp,0x10
c002223c:	b8 01 00 00 00       	mov    eax,0x1
c0022241:	eb 3b                	jmp    c002227e <ISO9660::openDir(char const*, void**)+0xb0>
c0022243:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022247:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c002224b:	89 03                	mov    DWORD PTR [ebx],eax
c002224d:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0022254:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0022258:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c002225f:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0022266:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0022269:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0022270:	8a 06                	mov    al,BYTE PTR [esi]
c0022272:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c0022275:	31 c0                	xor    eax,eax
c0022277:	eb 05                	jmp    c002227e <ISO9660::openDir(char const*, void**)+0xb0>
c0022279:	b8 04 00 00 00       	mov    eax,0x4
c002227e:	83 c4 10             	add    esp,0x10
c0022281:	5b                   	pop    ebx
c0022282:	5e                   	pop    esi
c0022283:	5f                   	pop    edi
c0022284:	c3                   	ret    
c0022285:	90                   	nop

c0022286 <ISO9660::ISO9660()>:
c0022286:	83 ec 0c             	sub    esp,0xc
c0022289:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002228d:	83 ec 0c             	sub    esp,0xc
c0022290:	50                   	push   eax
c0022291:	e8 52 10 ff ff       	call   c00132e8 <Filesystem::Filesystem()>
c0022296:	83 c4 10             	add    esp,0x10
c0022299:	ba 18 cc 02 c0       	mov    edx,0xc002cc18
c002229e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00222a2:	89 10                	mov    DWORD PTR [eax],edx
c00222a4:	90                   	nop
c00222a5:	83 c4 0c             	add    esp,0xc
c00222a8:	c3                   	ret    
c00222a9:	90                   	nop

c00222aa <SoundChannel::~SoundChannel()>:
c00222aa:	83 ec 0c             	sub    esp,0xc
c00222ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00222b1:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00222b4:	83 ec 0c             	sub    esp,0xc
c00222b7:	50                   	push   eax
c00222b8:	e8 37 d6 fe ff       	call   c000f8f4 <free>
c00222bd:	83 c4 10             	add    esp,0x10
c00222c0:	90                   	nop
c00222c1:	83 c4 0c             	add    esp,0xc
c00222c4:	c3                   	ret    
c00222c5:	90                   	nop

c00222c6 <SoundChannel::setSpeed(float)>:
c00222c6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00222ca:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00222ce:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c00222d1:	c3                   	ret    

c00222d2 <SoundChannel::getSpeed()>:
c00222d2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00222d6:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00222d9:	c3                   	ret    

c00222da <SoundChannel::setVolume(int)>:
c00222da:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00222de:	83 f8 64             	cmp    eax,0x64
c00222e1:	7e 05                	jle    c00222e8 <SoundChannel::setVolume(int)+0xe>
c00222e3:	b8 64 00 00 00       	mov    eax,0x64
c00222e8:	85 c0                	test   eax,eax
c00222ea:	79 02                	jns    c00222ee <SoundChannel::setVolume(int)+0x14>
c00222ec:	31 c0                	xor    eax,eax
c00222ee:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00222f2:	89 42 24             	mov    DWORD PTR [edx+0x24],eax
c00222f5:	c3                   	ret    

c00222f6 <SoundChannel::getVolume()>:
c00222f6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00222fa:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c00222fd:	c3                   	ret    

c00222fe <SoundChannel::pause()>:
c00222fe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022302:	c6 40 20 01          	mov    BYTE PTR [eax+0x20],0x1
c0022306:	c3                   	ret    
c0022307:	90                   	nop

c0022308 <SoundChannel::SoundChannel(int, int, int, int)>:
c0022308:	83 ec 1c             	sub    esp,0x1c
c002230b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c002230f:	e8 ea ff ff ff       	call   c00222fe <SoundChannel::pause()>
c0022314:	83 c4 04             	add    esp,0x4
c0022317:	6a 50                	push   0x50
c0022319:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c002231d:	e8 b8 ff ff ff       	call   c00222da <SoundChannel::setVolume(int)>
c0022322:	83 c4 08             	add    esp,0x8
c0022325:	a1 90 cc 02 c0       	mov    eax,ds:0xc002cc90
c002232a:	50                   	push   eax
c002232b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c002232f:	e8 92 ff ff ff       	call   c00222c6 <SoundChannel::setSpeed(float)>
c0022334:	83 c4 08             	add    esp,0x8
c0022337:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002233b:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c002233f:	89 10                	mov    DWORD PTR [eax],edx
c0022341:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022345:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0022349:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002234c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022350:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0022354:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0022357:	83 7c 24 30 ff       	cmp    DWORD PTR [esp+0x30],0xffffffff
c002235c:	75 23                	jne    c0022381 <SoundChannel::SoundChannel(int, int, int, int)+0x79>
c002235e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022362:	8b 10                	mov    edx,DWORD PTR [eax]
c0022364:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022368:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002236b:	0f af c2             	imul   eax,edx
c002236e:	85 c0                	test   eax,eax
c0022370:	79 03                	jns    c0022375 <SoundChannel::SoundChannel(int, int, int, int)+0x6d>
c0022372:	83 c0 03             	add    eax,0x3
c0022375:	c1 f8 02             	sar    eax,0x2
c0022378:	05 a0 0f 00 00       	add    eax,0xfa0
c002237d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0022381:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022385:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0022389:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c002238c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022390:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0022397:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002239b:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c00223a2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00223a6:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00223a9:	c1 e0 02             	shl    eax,0x2
c00223ac:	83 ec 0c             	sub    esp,0xc
c00223af:	50                   	push   eax
c00223b0:	e8 2f d5 fe ff       	call   c000f8e4 <malloc>
c00223b5:	83 c4 10             	add    esp,0x10
c00223b8:	89 c2                	mov    edx,eax
c00223ba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00223be:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00223c1:	83 ec 04             	sub    esp,0x4
c00223c4:	8d 44 24 08          	lea    eax,[esp+0x8]
c00223c8:	50                   	push   eax
c00223c9:	6a 01                	push   0x1
c00223cb:	6a 04                	push   0x4
c00223cd:	e8 cd 67 fe ff       	call   c0008b9f <src_new>
c00223d2:	83 c4 10             	add    esp,0x10
c00223d5:	89 c2                	mov    edx,eax
c00223d7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00223db:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00223de:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00223e2:	85 c0                	test   eax,eax
c00223e4:	74 10                	je     c00223f6 <SoundChannel::SoundChannel(int, int, int, int)+0xee>
c00223e6:	83 ec 0c             	sub    esp,0xc
c00223e9:	68 74 cc 02 c0       	push   0xc002cc74
c00223ee:	e8 a2 82 ff ff       	call   c001a695 <Krnl::panic(char const*)>
c00223f3:	83 c4 10             	add    esp,0x10
c00223f6:	a0 40 2a 03 c0       	mov    al,ds:0xc0032a40
c00223fb:	83 f0 01             	xor    eax,0x1
c00223fe:	84 c0                	test   al,al
c0022400:	74 57                	je     c0022459 <SoundChannel::SoundChannel(int, int, int, int)+0x151>
c0022402:	a1 94 cc 02 c0       	mov    eax,ds:0xc002cc94
c0022407:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002240b:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0022413:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c002241b:	7f 35                	jg     c0022452 <SoundChannel::SoundChannel(int, int, int, int)+0x14a>
c002241d:	83 ec 0c             	sub    esp,0xc
c0022420:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0022424:	e8 9e 4f 00 00       	call   c00273c7 <__floatsisf>
c0022429:	83 c4 10             	add    esp,0x10
c002242c:	8b 15 94 cc 02 c0    	mov    edx,DWORD PTR ds:0xc002cc94
c0022432:	83 ec 08             	sub    esp,0x8
c0022435:	52                   	push   edx
c0022436:	50                   	push   eax
c0022437:	e8 9d 4b 00 00       	call   c0026fd9 <__mulsf3>
c002243c:	83 c4 10             	add    esp,0x10
c002243f:	89 c2                	mov    edx,eax
c0022441:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022445:	89 14 85 40 26 03 c0 	mov    DWORD PTR [eax*4-0x3ffcd9c0],edx
c002244c:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0022450:	eb c1                	jmp    c0022413 <SoundChannel::SoundChannel(int, int, int, int)+0x10b>
c0022452:	c6 05 40 2a 03 c0 01 	mov    BYTE PTR ds:0xc0032a40,0x1
c0022459:	90                   	nop
c002245a:	83 c4 1c             	add    esp,0x1c
c002245d:	c3                   	ret    

c002245e <SoundChannel::play()>:
c002245e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022462:	c6 40 20 00          	mov    BYTE PTR [eax+0x20],0x0
c0022466:	c3                   	ret    
c0022467:	90                   	nop

c0022468 <SoundChannel::paused()>:
c0022468:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002246c:	8a 40 20             	mov    al,BYTE PTR [eax+0x20]
c002246f:	c3                   	ret    

c0022470 <SoundChannel::getSampleRate()>:
c0022470:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022474:	8b 00                	mov    eax,DWORD PTR [eax]
c0022476:	c3                   	ret    
c0022477:	90                   	nop

c0022478 <SoundChannel::getBits()>:
c0022478:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002247c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002247f:	c3                   	ret    

c0022480 <SoundChannel::getBufferUsed()>:
c0022480:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022484:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0022487:	c3                   	ret    

c0022488 <SoundChannel::getBufferSize()>:
c0022488:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002248c:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c002248f:	c3                   	ret    

c0022490 <SoundChannel::unbuffer(float*, int, int)>:
c0022490:	56                   	push   esi
c0022491:	53                   	push   ebx
c0022492:	83 ec 40             	sub    esp,0x40
c0022495:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c0022499:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c002249c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00224a0:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00224a3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00224a7:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c00224ab:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00224af:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00224b3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00224b7:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00224bb:	e8 07 4f 00 00       	call   c00273c7 <__floatsisf>
c00224c0:	5a                   	pop    edx
c00224c1:	89 c6                	mov    esi,eax
c00224c3:	ff 33                	push   DWORD PTR [ebx]
c00224c5:	e8 fd 4e 00 00       	call   c00273c7 <__floatsisf>
c00224ca:	59                   	pop    ecx
c00224cb:	5a                   	pop    edx
c00224cc:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00224cf:	50                   	push   eax
c00224d0:	e8 04 4b 00 00       	call   c0026fd9 <__mulsf3>
c00224d5:	59                   	pop    ecx
c00224d6:	5a                   	pop    edx
c00224d7:	50                   	push   eax
c00224d8:	56                   	push   esi
c00224d9:	e8 be 4c 00 00       	call   c002719c <__divsf3>
c00224de:	89 04 24             	mov    DWORD PTR [esp],eax
c00224e1:	e8 b1 61 00 00       	call   c0028697 <__extendsfdf2>
c00224e6:	59                   	pop    ecx
c00224e7:	5e                   	pop    esi
c00224e8:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00224ec:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00224f0:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c00224f8:	8d 44 24 14          	lea    eax,[esp+0x14]
c00224fc:	50                   	push   eax
c00224fd:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c0022500:	e8 8f 62 fe ff       	call   c0008794 <src_process>
c0022505:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0022509:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c002250c:	83 c4 0c             	add    esp,0xc
c002250f:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0022512:	29 53 1c             	sub    DWORD PTR [ebx+0x1c],edx
c0022515:	29 d0                	sub    eax,edx
c0022517:	c1 e0 02             	shl    eax,0x2
c002251a:	50                   	push   eax
c002251b:	8d 04 91             	lea    eax,[ecx+edx*4]
c002251e:	50                   	push   eax
c002251f:	51                   	push   ecx
c0022520:	e8 57 e1 fd ff       	call   c000067c <memmove>
c0022525:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0022529:	83 c4 44             	add    esp,0x44
c002252c:	5b                   	pop    ebx
c002252d:	5e                   	pop    esi
c002252e:	c3                   	ret    
c002252f:	90                   	nop

c0022530 <SoundChannel::buffer8(unsigned char*, int)>:
c0022530:	55                   	push   ebp
c0022531:	57                   	push   edi
c0022532:	56                   	push   esi
c0022533:	53                   	push   ebx
c0022534:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0022538:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c002253c:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c002253f:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0022543:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c0022546:	74 7a                	je     c00225c2 <SoundChannel::buffer8(unsigned char*, int)+0x92>
c0022548:	85 ff                	test   edi,edi
c002254a:	7e 76                	jle    c00225c2 <SoundChannel::buffer8(unsigned char*, int)+0x92>
c002254c:	0f b6 5d 00          	movzx  ebx,BYTE PTR [ebp+0x0]
c0022550:	8d 70 01             	lea    esi,[eax+0x1]
c0022553:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c0022556:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c0022559:	8b 1c 9d 40 26 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffcd9c0]
c0022560:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c0022563:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0022566:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c0022569:	74 5e                	je     c00225c9 <SoundChannel::buffer8(unsigned char*, int)+0x99>
c002256b:	83 ff 01             	cmp    edi,0x1
c002256e:	74 4b                	je     c00225bb <SoundChannel::buffer8(unsigned char*, int)+0x8b>
c0022570:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c0022574:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c0022577:	8d 70 01             	lea    esi,[eax+0x1]
c002257a:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c002257d:	8b 1c 9d 40 26 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffcd9c0]
c0022584:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c0022587:	b8 02 00 00 00       	mov    eax,0x2
c002258c:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c002258f:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c0022592:	75 23                	jne    c00225b7 <SoundChannel::buffer8(unsigned char*, int)+0x87>
c0022594:	eb 27                	jmp    c00225bd <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c0022596:	0f b6 5c 05 00       	movzx  ebx,BYTE PTR [ebp+eax*1+0x0]
c002259b:	8d 71 01             	lea    esi,[ecx+0x1]
c002259e:	40                   	inc    eax
c002259f:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c00225a2:	8b 72 10             	mov    esi,DWORD PTR [edx+0x10]
c00225a5:	8b 1c 9d 40 26 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffcd9c0]
c00225ac:	89 1c 8e             	mov    DWORD PTR [esi+ecx*4],ebx
c00225af:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c00225b2:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c00225b5:	74 06                	je     c00225bd <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c00225b7:	39 c7                	cmp    edi,eax
c00225b9:	75 db                	jne    c0022596 <SoundChannel::buffer8(unsigned char*, int)+0x66>
c00225bb:	89 f8                	mov    eax,edi
c00225bd:	5b                   	pop    ebx
c00225be:	5e                   	pop    esi
c00225bf:	5f                   	pop    edi
c00225c0:	5d                   	pop    ebp
c00225c1:	c3                   	ret    
c00225c2:	5b                   	pop    ebx
c00225c3:	31 c0                	xor    eax,eax
c00225c5:	5e                   	pop    esi
c00225c6:	5f                   	pop    edi
c00225c7:	5d                   	pop    ebp
c00225c8:	c3                   	ret    
c00225c9:	b8 01 00 00 00       	mov    eax,0x1
c00225ce:	eb ed                	jmp    c00225bd <SoundChannel::buffer8(unsigned char*, int)+0x8d>

c00225d0 <SoundDevice::SoundDevice(char const*)>:
c00225d0:	83 ec 1c             	sub    esp,0x1c
c00225d3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00225d7:	83 ec 08             	sub    esp,0x8
c00225da:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00225de:	50                   	push   eax
c00225df:	e8 16 20 ff ff       	call   c00145fa <Device::Device(char const*)>
c00225e4:	83 c4 10             	add    esp,0x10
c00225e7:	ba a0 cc 02 c0       	mov    edx,0xc002cca0
c00225ec:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00225f0:	89 10                	mov    DWORD PTR [eax],edx
c00225f2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00225f6:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c0022600:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022604:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c002260e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0022616:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c002261b:	7f 19                	jg     c0022636 <SoundDevice::SoundDevice(char const*)+0x66>
c002261d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022621:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0022625:	83 c2 54             	add    edx,0x54
c0022628:	c7 44 90 0c 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0xc],0x0
c0022630:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0022634:	eb e0                	jmp    c0022616 <SoundDevice::SoundDevice(char const*)+0x46>
c0022636:	90                   	nop
c0022637:	83 c4 1c             	add    esp,0x1c
c002263a:	c3                   	ret    
c002263b:	90                   	nop

c002263c <SoundDevice::~SoundDevice()>:
c002263c:	53                   	push   ebx
c002263d:	83 ec 18             	sub    esp,0x18
c0022640:	ba a0 cc 02 c0       	mov    edx,0xc002cca0
c0022645:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022649:	89 10                	mov    DWORD PTR [eax],edx
c002264b:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0022653:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c0022658:	7f 46                	jg     c00226a0 <SoundDevice::~SoundDevice()+0x64>
c002265a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002265e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0022662:	83 c2 54             	add    edx,0x54
c0022665:	8b 44 90 0c          	mov    eax,DWORD PTR [eax+edx*4+0xc]
c0022669:	85 c0                	test   eax,eax
c002266b:	74 2d                	je     c002269a <SoundDevice::~SoundDevice()+0x5e>
c002266d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022671:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0022675:	83 c2 54             	add    edx,0x54
c0022678:	8b 5c 90 0c          	mov    ebx,DWORD PTR [eax+edx*4+0xc]
c002267c:	85 db                	test   ebx,ebx
c002267e:	74 1a                	je     c002269a <SoundDevice::~SoundDevice()+0x5e>
c0022680:	83 ec 0c             	sub    esp,0xc
c0022683:	53                   	push   ebx
c0022684:	e8 21 fc ff ff       	call   c00222aa <SoundChannel::~SoundChannel()>
c0022689:	83 c4 10             	add    esp,0x10
c002268c:	83 ec 08             	sub    esp,0x8
c002268f:	6a 2c                	push   0x2c
c0022691:	53                   	push   ebx
c0022692:	e8 6c 08 ff ff       	call   c0012f03 <operator delete(void*, unsigned long)>
c0022697:	83 c4 10             	add    esp,0x10
c002269a:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c002269e:	eb b3                	jmp    c0022653 <SoundDevice::~SoundDevice()+0x17>
c00226a0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00226a4:	83 ec 0c             	sub    esp,0xc
c00226a7:	50                   	push   eax
c00226a8:	e8 2f 1c ff ff       	call   c00142dc <Device::~Device()>
c00226ad:	83 c4 10             	add    esp,0x10
c00226b0:	90                   	nop
c00226b1:	83 c4 18             	add    esp,0x18
c00226b4:	5b                   	pop    ebx
c00226b5:	c3                   	ret    

c00226b6 <SoundDevice::~SoundDevice()>:
c00226b6:	83 ec 0c             	sub    esp,0xc
c00226b9:	83 ec 0c             	sub    esp,0xc
c00226bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00226c0:	e8 77 ff ff ff       	call   c002263c <SoundDevice::~SoundDevice()>
c00226c5:	83 c4 10             	add    esp,0x10
c00226c8:	83 ec 08             	sub    esp,0x8
c00226cb:	68 e4 01 00 00       	push   0x1e4
c00226d0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00226d4:	e8 2a 08 ff ff       	call   c0012f03 <operator delete(void*, unsigned long)>
c00226d9:	83 c4 10             	add    esp,0x10
c00226dc:	83 c4 0c             	add    esp,0xc
c00226df:	c3                   	ret    

c00226e0 <SoundDevice::getFreeChannelNum()>:
c00226e0:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00226e4:	31 c0                	xor    eax,eax
c00226e6:	83 bc 82 5c 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x15c],0x0
c00226ee:	74 09                	je     c00226f9 <SoundDevice::getFreeChannelNum()+0x19>
c00226f0:	40                   	inc    eax
c00226f1:	83 f8 20             	cmp    eax,0x20
c00226f4:	75 f0                	jne    c00226e6 <SoundDevice::getFreeChannelNum()+0x6>
c00226f6:	83 c8 ff             	or     eax,0xffffffff
c00226f9:	c3                   	ret    

c00226fa <SoundDevice::addChannel(SoundChannel*)>:
c00226fa:	56                   	push   esi
c00226fb:	53                   	push   ebx
c00226fc:	51                   	push   ecx
c00226fd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0022701:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0022705:	53                   	push   ebx
c0022706:	e8 d5 ff ff ff       	call   c00226e0 <SoundDevice::getFreeChannelNum()>
c002270b:	5a                   	pop    edx
c002270c:	83 f8 ff             	cmp    eax,0xffffffff
c002270f:	74 51                	je     c0022762 <SoundDevice::addChannel(SoundChannel*)+0x68>
c0022711:	85 f6                	test   esi,esi
c0022713:	74 4d                	je     c0022762 <SoundDevice::addChannel(SoundChannel*)+0x68>
c0022715:	89 b4 83 5c 01 00 00 	mov    DWORD PTR [ebx+eax*4+0x15c],esi
c002271c:	83 bb 58 01 00 00 00 	cmp    DWORD PTR [ebx+0x158],0x0
c0022723:	75 30                	jne    c0022755 <SoundDevice::addChannel(SoundChannel*)+0x5b>
c0022725:	83 ec 0c             	sub    esp,0xc
c0022728:	56                   	push   esi
c0022729:	e8 42 fd ff ff       	call   c0022470 <SoundChannel::getSampleRate()>
c002272e:	89 83 dc 01 00 00    	mov    DWORD PTR [ebx+0x1dc],eax
c0022734:	89 34 24             	mov    DWORD PTR [esp],esi
c0022737:	e8 3c fd ff ff       	call   c0022478 <SoundChannel::getBits()>
c002273c:	83 c4 0c             	add    esp,0xc
c002273f:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c0022745:	8b 13                	mov    edx,DWORD PTR [ebx]
c0022747:	50                   	push   eax
c0022748:	ff b3 dc 01 00 00    	push   DWORD PTR [ebx+0x1dc]
c002274e:	53                   	push   ebx
c002274f:	ff 52 28             	call   DWORD PTR [edx+0x28]
c0022752:	83 c4 10             	add    esp,0x10
c0022755:	ff 83 58 01 00 00    	inc    DWORD PTR [ebx+0x158]
c002275b:	b8 01 00 00 00       	mov    eax,0x1
c0022760:	eb 03                	jmp    c0022765 <SoundDevice::addChannel(SoundChannel*)+0x6b>
c0022762:	83 c8 ff             	or     eax,0xffffffff
c0022765:	5a                   	pop    edx
c0022766:	5b                   	pop    ebx
c0022767:	5e                   	pop    esi
c0022768:	c3                   	ret    
c0022769:	90                   	nop

c002276a <SoundDevice::removeChannel(int)>:
c002276a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002276e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022772:	83 fa 1f             	cmp    edx,0x1f
c0022775:	77 23                	ja     c002279a <SoundDevice::removeChannel(int)+0x30>
c0022777:	8d 14 90             	lea    edx,[eax+edx*4]
c002277a:	83 ba 5c 01 00 00 00 	cmp    DWORD PTR [edx+0x15c],0x0
c0022781:	74 17                	je     c002279a <SoundDevice::removeChannel(int)+0x30>
c0022783:	c7 82 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [edx+0x15c],0x0
c002278d:	ff 88 58 01 00 00    	dec    DWORD PTR [eax+0x158]
c0022793:	75 05                	jne    c002279a <SoundDevice::removeChannel(int)+0x30>
c0022795:	8b 00                	mov    eax,DWORD PTR [eax]
c0022797:	ff 60 2c             	jmp    DWORD PTR [eax+0x2c]
c002279a:	c3                   	ret    
c002279b:	90                   	nop

c002279c <SoundDevice::floatTo8(float*, unsigned char*, int)>:
c002279c:	57                   	push   edi
c002279d:	56                   	push   esi
c002279e:	53                   	push   ebx
c002279f:	31 db                	xor    ebx,ebx
c00227a1:	83 ec 10             	sub    esp,0x10
c00227a4:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c00227a8:	3b 5c 24 2c          	cmp    ebx,DWORD PTR [esp+0x2c]
c00227ac:	0f 8d cb 00 00 00    	jge    c002287d <SoundDevice::floatTo8(float*, unsigned char*, int)+0xe1>
c00227b2:	83 ec 0c             	sub    esp,0xc
c00227b5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00227b9:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c00227bc:	e8 d6 5e 00 00       	call   c0028697 <__extendsfdf2>
c00227c1:	83 c4 10             	add    esp,0x10
c00227c4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00227c8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00227cc:	68 00 00 f0 3f       	push   0x3ff00000
c00227d1:	6a 00                	push   0x0
c00227d3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00227d7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00227db:	e8 43 4e 00 00       	call   c0027623 <__adddf3>
c00227e0:	83 c4 10             	add    esp,0x10
c00227e3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00227e7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00227eb:	68 00 00 e0 3f       	push   0x3fe00000
c00227f0:	6a 00                	push   0x0
c00227f2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00227f6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00227fa:	e8 a1 54 00 00       	call   c0027ca0 <__muldf3>
c00227ff:	83 c4 10             	add    esp,0x10
c0022802:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022806:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002280a:	68 00 00 60 40       	push   0x40600000
c002280f:	6a 00                	push   0x0
c0022811:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022815:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022819:	e8 82 54 00 00       	call   c0027ca0 <__muldf3>
c002281e:	59                   	pop    ecx
c002281f:	5f                   	pop    edi
c0022820:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0022824:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0022828:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002282c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022830:	e8 3e 5d 00 00       	call   c0028573 <__truncdfsf2>
c0022835:	5a                   	pop    edx
c0022836:	89 c7                	mov    edi,eax
c0022838:	59                   	pop    ecx
c0022839:	68 00 00 fe 42       	push   0x42fe0000
c002283e:	50                   	push   eax
c002283f:	e8 d9 4d 00 00       	call   c002761d <__gesf2>
c0022844:	83 c4 10             	add    esp,0x10
c0022847:	85 c0                	test   eax,eax
c0022849:	78 06                	js     c0022851 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xb5>
c002284b:	c6 04 1e 7f          	mov    BYTE PTR [esi+ebx*1],0x7f
c002284f:	eb 26                	jmp    c0022877 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c0022851:	50                   	push   eax
c0022852:	50                   	push   eax
c0022853:	6a 00                	push   0x0
c0022855:	57                   	push   edi
c0022856:	e8 c6 4d 00 00       	call   c0027621 <__lesf2>
c002285b:	83 c4 10             	add    esp,0x10
c002285e:	85 c0                	test   eax,eax
c0022860:	7f 06                	jg     c0022868 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xcc>
c0022862:	c6 04 1e 00          	mov    BYTE PTR [esi+ebx*1],0x0
c0022866:	eb 0f                	jmp    c0022877 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c0022868:	83 ec 0c             	sub    esp,0xc
c002286b:	57                   	push   edi
c002286c:	e8 bb 5e 00 00       	call   c002872c <lrintf>
c0022871:	83 c4 10             	add    esp,0x10
c0022874:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c0022877:	43                   	inc    ebx
c0022878:	e9 2b ff ff ff       	jmp    c00227a8 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xc>
c002287d:	83 c4 10             	add    esp,0x10
c0022880:	5b                   	pop    ebx
c0022881:	5e                   	pop    esi
c0022882:	5f                   	pop    edi
c0022883:	c3                   	ret    

c0022884 <SoundDevice::getAudio(int, float*, float*)>:
c0022884:	55                   	push   ebp
c0022885:	57                   	push   edi
c0022886:	56                   	push   esi
c0022887:	53                   	push   ebx
c0022888:	31 db                	xor    ebx,ebx
c002288a:	83 ec 20             	sub    esp,0x20
c002288d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0022891:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0022895:	c1 e0 02             	shl    eax,0x2
c0022898:	50                   	push   eax
c0022899:	6a 00                	push   0x0
c002289b:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c002289f:	e8 d4 de fd ff       	call   c0000778 <memset>
c00228a4:	83 c4 10             	add    esp,0x10
c00228a7:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00228ab:	8b 84 9e 5c 01 00 00 	mov    eax,DWORD PTR [esi+ebx*4+0x15c]
c00228b2:	85 c0                	test   eax,eax
c00228b4:	0f 84 d7 00 00 00    	je     c0022991 <SoundDevice::getAudio(int, float*, float*)+0x10d>
c00228ba:	83 ec 0c             	sub    esp,0xc
c00228bd:	50                   	push   eax
c00228be:	e8 a5 fb ff ff       	call   c0022468 <SoundChannel::paused()>
c00228c3:	83 c4 10             	add    esp,0x10
c00228c6:	84 c0                	test   al,al
c00228c8:	0f 85 c3 00 00 00    	jne    c0022991 <SoundDevice::getAudio(int, float*, float*)+0x10d>
c00228ce:	83 ec 0c             	sub    esp,0xc
c00228d1:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c00228d8:	e8 19 fa ff ff       	call   c00222f6 <SoundChannel::getVolume()>
c00228dd:	83 c4 10             	add    esp,0x10
c00228e0:	85 c0                	test   eax,eax
c00228e2:	0f 84 a9 00 00 00    	je     c0022991 <SoundDevice::getAudio(int, float*, float*)+0x10d>
c00228e8:	83 ec 0c             	sub    esp,0xc
c00228eb:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c00228f2:	e8 ff f9 ff ff       	call   c00222f6 <SoundChannel::getVolume()>
c00228f7:	83 ec 0c             	sub    esp,0xc
c00228fa:	50                   	push   eax
c00228fb:	e8 c7 4a 00 00       	call   c00273c7 <__floatsisf>
c0022900:	59                   	pop    ecx
c0022901:	5d                   	pop    ebp
c0022902:	31 ed                	xor    ebp,ebp
c0022904:	68 00 00 c8 42       	push   0x42c80000
c0022909:	50                   	push   eax
c002290a:	e8 8d 48 00 00       	call   c002719c <__divsf3>
c002290f:	83 c4 10             	add    esp,0x10
c0022912:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0022916:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c002291a:	ff b6 dc 01 00 00    	push   DWORD PTR [esi+0x1dc]
c0022920:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c0022924:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c002292b:	e8 60 fb ff ff       	call   c0022490 <SoundChannel::unbuffer(float*, int, int)>
c0022930:	83 c4 20             	add    esp,0x20
c0022933:	89 c1                	mov    ecx,eax
c0022935:	39 cd                	cmp    ebp,ecx
c0022937:	7d 52                	jge    c002298b <SoundDevice::getAudio(int, float*, float*)+0x107>
c0022939:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c002293d:	50                   	push   eax
c002293e:	50                   	push   eax
c002293f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0022943:	ff 34 a8             	push   DWORD PTR [eax+ebp*4]
c0022946:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c002294a:	e8 8a 46 00 00       	call   c0026fd9 <__mulsf3>
c002294f:	5a                   	pop    edx
c0022950:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0022954:	ff b6 58 01 00 00    	push   DWORD PTR [esi+0x158]
c002295a:	e8 68 4a 00 00       	call   c00273c7 <__floatsisf>
c002295f:	59                   	pop    ecx
c0022960:	5a                   	pop    edx
c0022961:	50                   	push   eax
c0022962:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022966:	e8 31 48 00 00       	call   c002719c <__divsf3>
c002296b:	59                   	pop    ecx
c002296c:	5a                   	pop    edx
c002296d:	50                   	push   eax
c002296e:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0022972:	ff 34 a8             	push   DWORD PTR [eax+ebp*4]
c0022975:	e8 3c 43 00 00       	call   c0026cb6 <__addsf3>
c002297a:	83 c4 10             	add    esp,0x10
c002297d:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0022981:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0022985:	89 04 aa             	mov    DWORD PTR [edx+ebp*4],eax
c0022988:	45                   	inc    ebp
c0022989:	eb aa                	jmp    c0022935 <SoundDevice::getAudio(int, float*, float*)+0xb1>
c002298b:	39 cf                	cmp    edi,ecx
c002298d:	7e 02                	jle    c0022991 <SoundDevice::getAudio(int, float*, float*)+0x10d>
c002298f:	89 cf                	mov    edi,ecx
c0022991:	43                   	inc    ebx
c0022992:	83 fb 20             	cmp    ebx,0x20
c0022995:	0f 85 10 ff ff ff    	jne    c00228ab <SoundDevice::getAudio(int, float*, float*)+0x27>
c002299b:	83 c4 1c             	add    esp,0x1c
c002299e:	89 f8                	mov    eax,edi
c00229a0:	5b                   	pop    ebx
c00229a1:	5e                   	pop    esi
c00229a2:	5f                   	pop    edi
c00229a3:	5d                   	pop    ebp
c00229a4:	c3                   	ret    
c00229a5:	90                   	nop

c00229a6 <PCI::open(int, int, void*)>:
c00229a6:	83 ec 18             	sub    esp,0x18
c00229a9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00229ad:	8b 10                	mov    edx,DWORD PTR [eax]
c00229af:	50                   	push   eax
c00229b0:	ff 52 18             	call   DWORD PTR [edx+0x18]
c00229b3:	31 c0                	xor    eax,eax
c00229b5:	83 c4 1c             	add    esp,0x1c
c00229b8:	c3                   	ret    
c00229b9:	90                   	nop

c00229ba <PCI::close(int, int, void*)>:
c00229ba:	31 c0                	xor    eax,eax
c00229bc:	c3                   	ret    
c00229bd:	90                   	nop

c00229be <PCI::PCI()>:
c00229be:	83 ec 0c             	sub    esp,0xc
c00229c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00229c5:	83 ec 08             	sub    esp,0x8
c00229c8:	68 d0 cc 02 c0       	push   0xc002ccd0
c00229cd:	50                   	push   eax
c00229ce:	e8 ab 12 ff ff       	call   c0013c7e <Bus::Bus(char const*)>
c00229d3:	83 c4 10             	add    esp,0x10
c00229d6:	ba 3c cd 02 c0       	mov    edx,0xc002cd3c
c00229db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00229df:	89 10                	mov    DWORD PTR [eax],edx
c00229e1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00229e5:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00229eb:	0f b6 d0             	movzx  edx,al
c00229ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00229f2:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c00229f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00229fd:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0022a03:	0f b6 d0             	movzx  edx,al
c0022a06:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022a0a:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c0022a0f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022a13:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0022a19:	8d 50 01             	lea    edx,[eax+0x1]
c0022a1c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0022a20:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0022a26:	0f b6 d0             	movzx  edx,al
c0022a29:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022a2d:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0022a31:	83 c9 c0             	or     ecx,0xffffffc0
c0022a34:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0022a38:	90                   	nop
c0022a39:	83 c4 0c             	add    esp,0xc
c0022a3c:	c3                   	ret    
c0022a3d:	90                   	nop

c0022a3e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0022a3e:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0022a42:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0022a47:	89 ca                	mov    edx,ecx
c0022a49:	c1 e0 10             	shl    eax,0x10
c0022a4c:	81 e2 fc 00 00 00    	and    edx,0xfc
c0022a52:	09 d0                	or     eax,edx
c0022a54:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0022a59:	c1 e2 08             	shl    edx,0x8
c0022a5c:	09 d0                	or     eax,edx
c0022a5e:	0f b6 54 24 0c       	movzx  edx,BYTE PTR [esp+0xc]
c0022a63:	c1 e2 0b             	shl    edx,0xb
c0022a66:	09 d0                	or     eax,edx
c0022a68:	ba f8 0c 00 00       	mov    edx,0xcf8
c0022a6d:	0d 00 00 00 80       	or     eax,0x80000000
c0022a72:	ef                   	out    dx,eax
c0022a73:	ba fc 0c 00 00       	mov    edx,0xcfc
c0022a78:	ed                   	in     eax,dx
c0022a79:	83 e1 02             	and    ecx,0x2
c0022a7c:	0f b6 c9             	movzx  ecx,cl
c0022a7f:	c1 e1 03             	shl    ecx,0x3
c0022a82:	d3 e8                	shr    eax,cl
c0022a84:	c3                   	ret    
c0022a85:	90                   	nop

c0022a86 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c0022a86:	6a 00                	push   0x0
c0022a88:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022a8d:	50                   	push   eax
c0022a8e:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022a93:	50                   	push   eax
c0022a94:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022a99:	50                   	push   eax
c0022a9a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022a9e:	e8 9b ff ff ff       	call   c0022a3e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022aa3:	83 c4 14             	add    esp,0x14
c0022aa6:	c3                   	ret    
c0022aa7:	90                   	nop

c0022aa8 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c0022aa8:	6a 0e                	push   0xe
c0022aaa:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022aaf:	50                   	push   eax
c0022ab0:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022ab5:	50                   	push   eax
c0022ab6:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022abb:	50                   	push   eax
c0022abc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022ac0:	e8 79 ff ff ff       	call   c0022a3e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022ac5:	83 c4 14             	add    esp,0x14
c0022ac8:	0f b6 c0             	movzx  eax,al
c0022acb:	c3                   	ret    

c0022acc <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c0022acc:	55                   	push   ebp
c0022acd:	57                   	push   edi
c0022ace:	56                   	push   esi
c0022acf:	53                   	push   ebx
c0022ad0:	0f b6 74 24 20       	movzx  esi,BYTE PTR [esp+0x20]
c0022ad5:	0f b6 6c 24 1c       	movzx  ebp,BYTE PTR [esp+0x1c]
c0022ada:	0f b6 7c 24 18       	movzx  edi,BYTE PTR [esp+0x18]
c0022adf:	6a 0a                	push   0xa
c0022ae1:	56                   	push   esi
c0022ae2:	55                   	push   ebp
c0022ae3:	57                   	push   edi
c0022ae4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0022ae8:	e8 51 ff ff ff       	call   c0022a3e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022aed:	6a 0a                	push   0xa
c0022aef:	89 c3                	mov    ebx,eax
c0022af1:	56                   	push   esi
c0022af2:	0f b6 db             	movzx  ebx,bl
c0022af5:	55                   	push   ebp
c0022af6:	57                   	push   edi
c0022af7:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0022afb:	e8 3e ff ff ff       	call   c0022a3e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022b00:	83 c4 28             	add    esp,0x28
c0022b03:	25 00 ff 00 00       	and    eax,0xff00
c0022b08:	09 d8                	or     eax,ebx
c0022b0a:	5b                   	pop    ebx
c0022b0b:	5e                   	pop    esi
c0022b0c:	5f                   	pop    edi
c0022b0d:	5d                   	pop    ebp
c0022b0e:	c3                   	ret    
c0022b0f:	90                   	nop

c0022b10 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c0022b10:	6a 08                	push   0x8
c0022b12:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022b17:	50                   	push   eax
c0022b18:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022b1d:	50                   	push   eax
c0022b1e:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022b23:	50                   	push   eax
c0022b24:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022b28:	e8 11 ff ff ff       	call   c0022a3e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022b2d:	83 c4 14             	add    esp,0x14
c0022b30:	0f b6 c4             	movzx  eax,ah
c0022b33:	c3                   	ret    

c0022b34 <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c0022b34:	6a 08                	push   0x8
c0022b36:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022b3b:	50                   	push   eax
c0022b3c:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022b41:	50                   	push   eax
c0022b42:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022b47:	50                   	push   eax
c0022b48:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022b4c:	e8 ed fe ff ff       	call   c0022a3e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022b51:	83 c4 14             	add    esp,0x14
c0022b54:	c3                   	ret    
c0022b55:	90                   	nop

c0022b56 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c0022b56:	6a 3c                	push   0x3c
c0022b58:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022b5d:	50                   	push   eax
c0022b5e:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022b63:	50                   	push   eax
c0022b64:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022b69:	50                   	push   eax
c0022b6a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022b6e:	e8 cb fe ff ff       	call   c0022a3e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022b73:	83 c4 14             	add    esp,0x14
c0022b76:	c3                   	ret    
c0022b77:	90                   	nop

c0022b78 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c0022b78:	6a 18                	push   0x18
c0022b7a:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022b7f:	50                   	push   eax
c0022b80:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022b85:	50                   	push   eax
c0022b86:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022b8b:	50                   	push   eax
c0022b8c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022b90:	e8 a9 fe ff ff       	call   c0022a3e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022b95:	83 c4 14             	add    esp,0x14
c0022b98:	0f b6 c4             	movzx  eax,ah
c0022b9b:	c3                   	ret    

c0022b9c <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0022b9c:	55                   	push   ebp
c0022b9d:	57                   	push   edi
c0022b9e:	56                   	push   esi
c0022b9f:	53                   	push   ebx
c0022ba0:	50                   	push   eax
c0022ba1:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c0022ba5:	0f b6 4c 24 28       	movzx  ecx,BYTE PTR [esp+0x28]
c0022baa:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c0022baf:	0f b6 6c 24 20       	movzx  ebp,BYTE PTR [esp+0x20]
c0022bb4:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c0022bbb:	8d 43 12             	lea    eax,[ebx+0x12]
c0022bbe:	83 c3 10             	add    ebx,0x10
c0022bc1:	0f b6 c0             	movzx  eax,al
c0022bc4:	0f b6 db             	movzx  ebx,bl
c0022bc7:	50                   	push   eax
c0022bc8:	51                   	push   ecx
c0022bc9:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0022bcd:	57                   	push   edi
c0022bce:	55                   	push   ebp
c0022bcf:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0022bd3:	e8 66 fe ff ff       	call   c0022a3e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022bd8:	53                   	push   ebx
c0022bd9:	89 c6                	mov    esi,eax
c0022bdb:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0022bdf:	c1 e6 10             	shl    esi,0x10
c0022be2:	51                   	push   ecx
c0022be3:	57                   	push   edi
c0022be4:	55                   	push   ebp
c0022be5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0022be9:	e8 50 fe ff ff       	call   c0022a3e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022bee:	83 c4 2c             	add    esp,0x2c
c0022bf1:	0f b7 c0             	movzx  eax,ax
c0022bf4:	5b                   	pop    ebx
c0022bf5:	09 f0                	or     eax,esi
c0022bf7:	5e                   	pop    esi
c0022bf8:	5f                   	pop    edi
c0022bf9:	5d                   	pop    ebp
c0022bfa:	c3                   	ret    
c0022bfb:	90                   	nop

c0022bfc <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c0022bfc:	53                   	push   ebx
c0022bfd:	ba f8 0c 00 00       	mov    edx,0xcf8
c0022c02:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0022c07:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0022c0b:	c1 e1 10             	shl    ecx,0x10
c0022c0e:	25 fc 00 00 00       	and    eax,0xfc
c0022c13:	09 c1                	or     ecx,eax
c0022c15:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022c1a:	c1 e0 08             	shl    eax,0x8
c0022c1d:	09 c1                	or     ecx,eax
c0022c1f:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0022c24:	c1 e0 0b             	shl    eax,0xb
c0022c27:	09 c1                	or     ecx,eax
c0022c29:	81 c9 00 00 00 80    	or     ecx,0x80000000
c0022c2f:	89 c8                	mov    eax,ecx
c0022c31:	ef                   	out    dx,eax
c0022c32:	ba fc 0c 00 00       	mov    edx,0xcfc
c0022c37:	ed                   	in     eax,dx
c0022c38:	0f b7 54 24 1c       	movzx  edx,WORD PTR [esp+0x1c]
c0022c3d:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c0022c42:	74 0a                	je     c0022c4e <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x52>
c0022c44:	0f b7 d8             	movzx  ebx,ax
c0022c47:	89 d0                	mov    eax,edx
c0022c49:	c1 e0 10             	shl    eax,0x10
c0022c4c:	eb 05                	jmp    c0022c53 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x57>
c0022c4e:	66 31 c0             	xor    ax,ax
c0022c51:	89 d3                	mov    ebx,edx
c0022c53:	09 c3                	or     ebx,eax
c0022c55:	ba f8 0c 00 00       	mov    edx,0xcf8
c0022c5a:	89 c8                	mov    eax,ecx
c0022c5c:	ef                   	out    dx,eax
c0022c5d:	ba fc 0c 00 00       	mov    edx,0xcfc
c0022c62:	89 d8                	mov    eax,ebx
c0022c64:	ef                   	out    dx,eax
c0022c65:	5b                   	pop    ebx
c0022c66:	c3                   	ret    
c0022c67:	90                   	nop

c0022c68 <PCI::checkBus(unsigned char)>:
c0022c68:	56                   	push   esi
c0022c69:	53                   	push   ebx
c0022c6a:	31 db                	xor    ebx,ebx
c0022c6c:	51                   	push   ecx
c0022c6d:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c0022c72:	52                   	push   edx
c0022c73:	53                   	push   ebx
c0022c74:	43                   	inc    ebx
c0022c75:	56                   	push   esi
c0022c76:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022c7a:	e8 2b 03 00 00       	call   c0022faa <PCI::checkDevice(unsigned char, unsigned char)>
c0022c7f:	83 c4 10             	add    esp,0x10
c0022c82:	83 fb 20             	cmp    ebx,0x20
c0022c85:	75 eb                	jne    c0022c72 <PCI::checkBus(unsigned char)+0xa>
c0022c87:	58                   	pop    eax
c0022c88:	5b                   	pop    ebx
c0022c89:	5e                   	pop    esi
c0022c8a:	c3                   	ret    
c0022c8b:	90                   	nop

c0022c8c <PCI::foundDevice(PCIDeviceInfo)>:
c0022c8c:	55                   	push   ebp
c0022c8d:	57                   	push   edi
c0022c8e:	56                   	push   esi
c0022c8f:	53                   	push   ebx
c0022c90:	83 ec 1c             	sub    esp,0x1c
c0022c93:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0022c97:	66 83 7c 24 36 ff    	cmp    WORD PTR [esp+0x36],0xffff
c0022c9d:	0f 84 52 01 00 00    	je     c0022df5 <PCI::foundDevice(PCIDeviceInfo)+0x169>
c0022ca3:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0022ca7:	66 81 f9 06 04       	cmp    cx,0x406
c0022cac:	75 2c                	jne    c0022cda <PCI::foundDevice(PCIDeviceInfo)+0x4e>
c0022cae:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c0022cb3:	50                   	push   eax
c0022cb4:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c0022cb9:	50                   	push   eax
c0022cba:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c0022cbf:	50                   	push   eax
c0022cc0:	56                   	push   esi
c0022cc1:	e8 b2 fe ff ff       	call   c0022b78 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c0022cc6:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c0022cca:	0f b6 c0             	movzx  eax,al
c0022ccd:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0022cd1:	83 c4 2c             	add    esp,0x2c
c0022cd4:	5b                   	pop    ebx
c0022cd5:	5e                   	pop    esi
c0022cd6:	5f                   	pop    edi
c0022cd7:	5d                   	pop    ebp
c0022cd8:	eb 8e                	jmp    c0022c68 <PCI::checkBus(unsigned char)>
c0022cda:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0022cde:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0022ce4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022ce8:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0022cec:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c0022cf0:	88 d3                	mov    bl,dl
c0022cf2:	85 c0                	test   eax,eax
c0022cf4:	74 33                	je     c0022d29 <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c0022cf6:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0022cf9:	85 d2                	test   edx,edx
c0022cfb:	74 28                	je     c0022d25 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0022cfd:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c0022d03:	31 ef                	xor    edi,ebp
c0022d05:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c0022d0b:	75 18                	jne    c0022d25 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0022d0d:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0022d11:	39 ba 20 01 00 00    	cmp    DWORD PTR [edx+0x120],edi
c0022d17:	75 0c                	jne    c0022d25 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0022d19:	38 9a 38 01 00 00    	cmp    BYTE PTR [edx+0x138],bl
c0022d1f:	0f 84 d0 00 00 00    	je     c0022df5 <PCI::foundDevice(PCIDeviceInfo)+0x169>
c0022d25:	8b 00                	mov    eax,DWORD PTR [eax]
c0022d27:	eb c9                	jmp    c0022cf2 <PCI::foundDevice(PCIDeviceInfo)+0x66>
c0022d29:	66 81 f9 01 06       	cmp    cx,0x601
c0022d2e:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c0022d32:	75 19                	jne    c0022d4d <PCI::foundDevice(PCIDeviceInfo)+0xc1>
c0022d34:	83 ec 0c             	sub    esp,0xc
c0022d37:	68 64 01 00 00       	push   0x164
c0022d3c:	e8 a3 cb fe ff       	call   c000f8e4 <malloc>
c0022d41:	89 c5                	mov    ebp,eax
c0022d43:	89 04 24             	mov    DWORD PTR [esp],eax
c0022d46:	e8 95 0f 00 00       	call   c0023ce0 <SATABus::SATABus()>
c0022d4b:	eb 1e                	jmp    c0022d6b <PCI::foundDevice(PCIDeviceInfo)+0xdf>
c0022d4d:	66 81 f9 01 01       	cmp    cx,0x101
c0022d52:	75 60                	jne    c0022db4 <PCI::foundDevice(PCIDeviceInfo)+0x128>
c0022d54:	83 ec 0c             	sub    esp,0xc
c0022d57:	68 70 02 00 00       	push   0x270
c0022d5c:	e8 83 cb fe ff       	call   c000f8e4 <malloc>
c0022d61:	89 c5                	mov    ebp,eax
c0022d63:	89 04 24             	mov    DWORD PTR [esp],eax
c0022d66:	e8 03 03 00 00       	call   c002306e <IDE::IDE()>
c0022d6b:	58                   	pop    eax
c0022d6c:	5a                   	pop    edx
c0022d6d:	55                   	push   ebp
c0022d6e:	56                   	push   esi
c0022d6f:	e8 96 16 ff ff       	call   c001440a <Device::addChild(Device*)>
c0022d74:	83 ec 1c             	sub    esp,0x1c
c0022d77:	b9 09 00 00 00       	mov    ecx,0x9
c0022d7c:	fc                   	cld    
c0022d7d:	89 e7                	mov    edi,esp
c0022d7f:	89 de                	mov    esi,ebx
c0022d81:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0022d83:	55                   	push   ebp
c0022d84:	e8 8b 15 ff ff       	call   c0014314 <Device::preOpenPCI(PCIDeviceInfo)>
c0022d89:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0022d8c:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c0022d90:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c0022d98:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c0022da0:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c0022da8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022dab:	83 c4 4c             	add    esp,0x4c
c0022dae:	5b                   	pop    ebx
c0022daf:	5e                   	pop    esi
c0022db0:	5f                   	pop    edi
c0022db1:	5d                   	pop    ebp
c0022db2:	ff e0                	jmp    eax
c0022db4:	83 ec 0c             	sub    esp,0xc
c0022db7:	68 58 01 00 00       	push   0x158
c0022dbc:	e8 23 cb fe ff       	call   c000f8e4 <malloc>
c0022dc1:	89 c5                	mov    ebp,eax
c0022dc3:	58                   	pop    eax
c0022dc4:	5a                   	pop    edx
c0022dc5:	68 d8 cc 02 c0       	push   0xc002ccd8
c0022dca:	55                   	push   ebp
c0022dcb:	e8 30 19 ff ff       	call   c0014700 <DriverlessDevice::DriverlessDevice(char const*)>
c0022dd0:	59                   	pop    ecx
c0022dd1:	5f                   	pop    edi
c0022dd2:	55                   	push   ebp
c0022dd3:	56                   	push   esi
c0022dd4:	e8 31 16 ff ff       	call   c001440a <Device::addChild(Device*)>
c0022dd9:	b9 09 00 00 00       	mov    ecx,0x9
c0022dde:	fc                   	cld    
c0022ddf:	89 df                	mov    edi,ebx
c0022de1:	89 de                	mov    esi,ebx
c0022de3:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0022de5:	89 6c 24 40          	mov    DWORD PTR [esp+0x40],ebp
c0022de9:	83 c4 2c             	add    esp,0x2c
c0022dec:	5b                   	pop    ebx
c0022ded:	5e                   	pop    esi
c0022dee:	5f                   	pop    edi
c0022def:	5d                   	pop    ebp
c0022df0:	e9 1f 15 ff ff       	jmp    c0014314 <Device::preOpenPCI(PCIDeviceInfo)>
c0022df5:	83 c4 1c             	add    esp,0x1c
c0022df8:	5b                   	pop    ebx
c0022df9:	5e                   	pop    esi
c0022dfa:	5f                   	pop    edi
c0022dfb:	5d                   	pop    ebp
c0022dfc:	c3                   	ret    
c0022dfd:	90                   	nop

c0022dfe <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c0022dfe:	55                   	push   ebp
c0022dff:	57                   	push   edi
c0022e00:	56                   	push   esi
c0022e01:	53                   	push   ebx
c0022e02:	83 ec 5c             	sub    esp,0x5c
c0022e05:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0022e09:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0022e0d:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0022e11:	0f b6 7c 24 10       	movzx  edi,BYTE PTR [esp+0x10]
c0022e16:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0022e1a:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c0022e1e:	0f b6 5c 24 14       	movzx  ebx,BYTE PTR [esp+0x14]
c0022e23:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0022e27:	0f b6 6c 24 18       	movzx  ebp,BYTE PTR [esp+0x18]
c0022e2c:	6a 0c                	push   0xc
c0022e2e:	55                   	push   ebp
c0022e2f:	53                   	push   ebx
c0022e30:	57                   	push   edi
c0022e31:	ff b4 24 80 00 00 00 	push   DWORD PTR [esp+0x80]
c0022e38:	e8 01 fc ff ff       	call   c0022a3e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022e3d:	55                   	push   ebp
c0022e3e:	53                   	push   ebx
c0022e3f:	57                   	push   edi
c0022e40:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c0022e47:	e8 80 fc ff ff       	call   c0022acc <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c0022e4c:	66 89 44 24 42       	mov    WORD PTR [esp+0x42],ax
c0022e51:	83 c4 24             	add    esp,0x24
c0022e54:	55                   	push   ebp
c0022e55:	53                   	push   ebx
c0022e56:	57                   	push   edi
c0022e57:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c0022e5b:	e8 f6 fc ff ff       	call   c0022b56 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c0022e60:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c0022e64:	6a 3c                	push   0x3c
c0022e66:	55                   	push   ebp
c0022e67:	53                   	push   ebx
c0022e68:	57                   	push   edi
c0022e69:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c0022e70:	e8 c9 fb ff ff       	call   c0022a3e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022e75:	0f b6 c4             	movzx  eax,ah
c0022e78:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0022e7c:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c0022e80:	88 44 24 71          	mov    BYTE PTR [esp+0x71],al
c0022e84:	a1 e8 e6 02 c0       	mov    eax,ds:0xc002e6e8
c0022e89:	83 c4 24             	add    esp,0x24
c0022e8c:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c0022e92:	83 b8 5c 11 00 00 00 	cmp    DWORD PTR [eax+0x115c],0x0
c0022e99:	74 6c                	je     c0022f07 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x109>
c0022e9b:	31 f6                	xor    esi,esi
c0022e9d:	8b 15 e8 e6 02 c0    	mov    edx,DWORD PTR ds:0xc002e6e8
c0022ea3:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c0022ea9:	39 b2 5c 11 00 00    	cmp    DWORD PTR [edx+0x115c],esi
c0022eaf:	7e 56                	jle    c0022f07 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x109>
c0022eb1:	8d 14 f2             	lea    edx,[edx+esi*8]
c0022eb4:	0f b7 8a 5c 01 00 00 	movzx  ecx,WORD PTR [edx+0x15c]
c0022ebb:	39 cb                	cmp    ebx,ecx
c0022ebd:	75 45                	jne    c0022f04 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x106>
c0022ebf:	0f b6 92 5e 01 00 00 	movzx  edx,BYTE PTR [edx+0x15e]
c0022ec6:	3b 54 24 0c          	cmp    edx,DWORD PTR [esp+0xc]
c0022eca:	75 38                	jne    c0022f04 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x106>
c0022ecc:	83 ec 0c             	sub    esp,0xc
c0022ecf:	68 f2 cc 02 c0       	push   0xc002ccf2
c0022ed4:	e8 0a 01 ff ff       	call   c0012fe3 <Dbg::kprintf(char const*, ...)>
c0022ed9:	8b 15 e8 e6 02 c0    	mov    edx,DWORD PTR ds:0xc002e6e8
c0022edf:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c0022ee5:	0f b6 94 f2 5f 01 00 00 	movzx  edx,BYTE PTR [edx+esi*8+0x15f]
c0022eed:	88 54 24 2d          	mov    BYTE PTR [esp+0x2d],dl
c0022ef1:	52                   	push   edx
c0022ef2:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0022ef6:	53                   	push   ebx
c0022ef7:	68 17 cd 02 c0       	push   0xc002cd17
c0022efc:	e8 e2 00 ff ff       	call   c0012fe3 <Dbg::kprintf(char const*, ...)>
c0022f01:	83 c4 20             	add    esp,0x20
c0022f04:	46                   	inc    esi
c0022f05:	eb 96                	jmp    c0022e9d <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x9f>
c0022f07:	31 d2                	xor    edx,edx
c0022f09:	83 ec 0c             	sub    esp,0xc
c0022f0c:	55                   	push   ebp
c0022f0d:	53                   	push   ebx
c0022f0e:	57                   	push   edi
c0022f0f:	52                   	push   edx
c0022f10:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0022f14:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c0022f1b:	e8 7c fc ff ff       	call   c0022b9c <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022f20:	8d 74 24 4c          	lea    esi,[esp+0x4c]
c0022f24:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0022f28:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c0022f2c:	42                   	inc    edx
c0022f2d:	83 c4 20             	add    esp,0x20
c0022f30:	83 fa 06             	cmp    edx,0x6
c0022f33:	75 d4                	jne    c0022f09 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x10b>
c0022f35:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0022f39:	88 44 24 30          	mov    BYTE PTR [esp+0x30],al
c0022f3d:	8a 44 24 14          	mov    al,BYTE PTR [esp+0x14]
c0022f41:	88 44 24 31          	mov    BYTE PTR [esp+0x31],al
c0022f45:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0022f49:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c0022f4d:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0022f52:	86 e0                	xchg   al,ah
c0022f54:	66 89 44 24 2c       	mov    WORD PTR [esp+0x2c],ax
c0022f59:	55                   	push   ebp
c0022f5a:	53                   	push   ebx
c0022f5b:	57                   	push   edi
c0022f5c:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c0022f60:	e8 ab fb ff ff       	call   c0022b10 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c0022f65:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0022f69:	55                   	push   ebp
c0022f6a:	53                   	push   ebx
c0022f6b:	57                   	push   edi
c0022f6c:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c0022f73:	e8 0e fb ff ff       	call   c0022a86 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0022f78:	83 ec 0c             	sub    esp,0xc
c0022f7b:	66 89 44 24 5a       	mov    WORD PTR [esp+0x5a],ax
c0022f80:	b9 09 00 00 00       	mov    ecx,0x9
c0022f85:	8a 44 24 49          	mov    al,BYTE PTR [esp+0x49]
c0022f89:	88 44 24 78          	mov    BYTE PTR [esp+0x78],al
c0022f8d:	fc                   	cld    
c0022f8e:	89 e7                	mov    edi,esp
c0022f90:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0022f92:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0022f99:	e8 ee fc ff ff       	call   c0022c8c <PCI::foundDevice(PCIDeviceInfo)>
c0022f9e:	81 c4 8c 00 00 00    	add    esp,0x8c
c0022fa4:	5b                   	pop    ebx
c0022fa5:	5e                   	pop    esi
c0022fa6:	5f                   	pop    edi
c0022fa7:	5d                   	pop    ebp
c0022fa8:	c3                   	ret    
c0022fa9:	90                   	nop

c0022faa <PCI::checkDevice(unsigned char, unsigned char)>:
c0022faa:	55                   	push   ebp
c0022fab:	57                   	push   edi
c0022fac:	56                   	push   esi
c0022fad:	53                   	push   ebx
c0022fae:	83 ec 0c             	sub    esp,0xc
c0022fb1:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0022fb5:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c0022fba:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c0022fbf:	6a 00                	push   0x0
c0022fc1:	56                   	push   esi
c0022fc2:	57                   	push   edi
c0022fc3:	55                   	push   ebp
c0022fc4:	e8 bd fa ff ff       	call   c0022a86 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0022fc9:	6a 00                	push   0x0
c0022fcb:	56                   	push   esi
c0022fcc:	57                   	push   edi
c0022fcd:	55                   	push   ebp
c0022fce:	e8 2b fe ff ff       	call   c0022dfe <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0022fd3:	83 c4 20             	add    esp,0x20
c0022fd6:	6a 00                	push   0x0
c0022fd8:	56                   	push   esi
c0022fd9:	57                   	push   edi
c0022fda:	55                   	push   ebp
c0022fdb:	e8 c8 fa ff ff       	call   c0022aa8 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0022fe0:	83 c4 10             	add    esp,0x10
c0022fe3:	84 c0                	test   al,al
c0022fe5:	79 27                	jns    c002300e <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c0022fe7:	bb 01 00 00 00       	mov    ebx,0x1
c0022fec:	53                   	push   ebx
c0022fed:	56                   	push   esi
c0022fee:	57                   	push   edi
c0022fef:	55                   	push   ebp
c0022ff0:	e8 91 fa ff ff       	call   c0022a86 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0022ff5:	83 c4 10             	add    esp,0x10
c0022ff8:	66 40                	inc    ax
c0022ffa:	74 0c                	je     c0023008 <PCI::checkDevice(unsigned char, unsigned char)+0x5e>
c0022ffc:	53                   	push   ebx
c0022ffd:	56                   	push   esi
c0022ffe:	57                   	push   edi
c0022fff:	55                   	push   ebp
c0023000:	e8 f9 fd ff ff       	call   c0022dfe <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0023005:	83 c4 10             	add    esp,0x10
c0023008:	43                   	inc    ebx
c0023009:	83 fb 08             	cmp    ebx,0x8
c002300c:	75 de                	jne    c0022fec <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c002300e:	83 c4 0c             	add    esp,0xc
c0023011:	5b                   	pop    ebx
c0023012:	5e                   	pop    esi
c0023013:	5f                   	pop    edi
c0023014:	5d                   	pop    ebp
c0023015:	c3                   	ret    

c0023016 <PCI::detect()>:
c0023016:	56                   	push   esi
c0023017:	53                   	push   ebx
c0023018:	53                   	push   ebx
c0023019:	31 db                	xor    ebx,ebx
c002301b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c002301f:	6a 00                	push   0x0
c0023021:	6a 00                	push   0x0
c0023023:	6a 00                	push   0x0
c0023025:	56                   	push   esi
c0023026:	e8 7d fa ff ff       	call   c0022aa8 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c002302b:	83 c4 10             	add    esp,0x10
c002302e:	a8 80                	test   al,0x80
c0023030:	75 21                	jne    c0023053 <PCI::detect()+0x3d>
c0023032:	51                   	push   ecx
c0023033:	51                   	push   ecx
c0023034:	6a 00                	push   0x0
c0023036:	56                   	push   esi
c0023037:	e8 2c fc ff ff       	call   c0022c68 <PCI::checkBus(unsigned char)>
c002303c:	83 c4 10             	add    esp,0x10
c002303f:	eb 24                	jmp    c0023065 <PCI::detect()+0x4f>
c0023041:	52                   	push   edx
c0023042:	52                   	push   edx
c0023043:	53                   	push   ebx
c0023044:	43                   	inc    ebx
c0023045:	56                   	push   esi
c0023046:	e8 1d fc ff ff       	call   c0022c68 <PCI::checkBus(unsigned char)>
c002304b:	83 c4 10             	add    esp,0x10
c002304e:	83 fb 08             	cmp    ebx,0x8
c0023051:	74 12                	je     c0023065 <PCI::detect()+0x4f>
c0023053:	53                   	push   ebx
c0023054:	6a 00                	push   0x0
c0023056:	6a 00                	push   0x0
c0023058:	56                   	push   esi
c0023059:	e8 28 fa ff ff       	call   c0022a86 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c002305e:	83 c4 10             	add    esp,0x10
c0023061:	66 40                	inc    ax
c0023063:	74 dc                	je     c0023041 <PCI::detect()+0x2b>
c0023065:	58                   	pop    eax
c0023066:	5b                   	pop    ebx
c0023067:	5e                   	pop    esi
c0023068:	c3                   	ret    
c0023069:	90                   	nop

c002306a <IDE::close(int, int, void*)>:
c002306a:	83 c8 ff             	or     eax,0xffffffff
c002306d:	c3                   	ret    

c002306e <IDE::IDE()>:
c002306e:	83 ec 0c             	sub    esp,0xc
c0023071:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023075:	83 ec 08             	sub    esp,0x8
c0023078:	68 60 cd 02 c0       	push   0xc002cd60
c002307d:	50                   	push   eax
c002307e:	e8 13 17 ff ff       	call   c0014796 <HardDiskController::HardDiskController(char const*)>
c0023083:	83 c4 10             	add    esp,0x10
c0023086:	ba a0 cf 02 c0       	mov    edx,0xc002cfa0
c002308b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002308f:	89 10                	mov    DWORD PTR [eax],edx
c0023091:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023095:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c002309c:	90                   	nop
c002309d:	83 c4 0c             	add    esp,0xc
c00230a0:	c3                   	ret    
c00230a1:	90                   	nop

c00230a2 <IDE::prepareInterrupt(unsigned char)>:
c00230a2:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00230a7:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00230ab:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c00230b3:	c3                   	ret    

c00230b4 <selectDrive(unsigned char, unsigned char)>:
c00230b4:	c3                   	ret    
c00230b5:	90                   	nop

c00230b6 <IDE::getBase(unsigned char)>:
c00230b6:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c00230bb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00230bf:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c00230c7:	c3                   	ret    

c00230c8 <IDE::write(unsigned char, unsigned char, unsigned char)>:
c00230c8:	55                   	push   ebp
c00230c9:	57                   	push   edi
c00230ca:	56                   	push   esi
c00230cb:	53                   	push   ebx
c00230cc:	83 ec 1c             	sub    esp,0x1c
c00230cf:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00230d3:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00230d7:	8d 4b f8             	lea    ecx,[ebx-0x8]
c00230da:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00230de:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00230e2:	80 f9 03             	cmp    cl,0x3
c00230e5:	77 51                	ja     c0023138 <IDE::write(unsigned char, unsigned char, unsigned char)+0x70>
c00230e7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00230eb:	0f b6 f2             	movzx  esi,dl
c00230ee:	0f b6 db             	movzx  ebx,bl
c00230f1:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c00230f4:	8a 54 ef 10          	mov    dl,BYTE PTR [edi+ebp*8+0x10]
c00230f8:	83 ca 80             	or     edx,0xffffff80
c00230fb:	0f b6 d2             	movzx  edx,dl
c00230fe:	52                   	push   edx
c00230ff:	6a 0c                	push   0xc
c0023101:	56                   	push   esi
c0023102:	57                   	push   edi
c0023103:	e8 c0 ff ff ff       	call   c00230c8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023108:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c002310d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0023111:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c0023115:	ee                   	out    dx,al
c0023116:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c002311b:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c002311f:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c0023123:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0023127:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c002312f:	83 c4 2c             	add    esp,0x2c
c0023132:	5b                   	pop    ebx
c0023133:	5e                   	pop    esi
c0023134:	5f                   	pop    edi
c0023135:	5d                   	pop    ebp
c0023136:	eb 90                	jmp    c00230c8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023138:	80 fb 07             	cmp    bl,0x7
c002313b:	77 12                	ja     c002314f <IDE::write(unsigned char, unsigned char, unsigned char)+0x87>
c002313d:	0f b6 d2             	movzx  edx,dl
c0023140:	0f b6 db             	movzx  ebx,bl
c0023143:	66 03 9c d7 5a 01 00 00 	add    bx,WORD PTR [edi+edx*8+0x15a]
c002314b:	89 da                	mov    edx,ebx
c002314d:	eb 2f                	jmp    c002317e <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c002314f:	80 fb 0d             	cmp    bl,0xd
c0023152:	77 13                	ja     c0023167 <IDE::write(unsigned char, unsigned char, unsigned char)+0x9f>
c0023154:	0f b6 d2             	movzx  edx,dl
c0023157:	0f b6 db             	movzx  ebx,bl
c002315a:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c0023161:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c0023165:	eb 17                	jmp    c002317e <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c0023167:	80 fb 15             	cmp    bl,0x15
c002316a:	77 13                	ja     c002317f <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c002316c:	0f b6 d2             	movzx  edx,dl
c002316f:	0f b6 db             	movzx  ebx,bl
c0023172:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c002317a:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c002317e:	ee                   	out    dx,al
c002317f:	83 c4 1c             	add    esp,0x1c
c0023182:	5b                   	pop    ebx
c0023183:	5e                   	pop    esi
c0023184:	5f                   	pop    edi
c0023185:	5d                   	pop    ebp
c0023186:	c3                   	ret    
c0023187:	90                   	nop

c0023188 <IDE::read(unsigned char, unsigned char)>:
c0023188:	55                   	push   ebp
c0023189:	57                   	push   edi
c002318a:	56                   	push   esi
c002318b:	53                   	push   ebx
c002318c:	83 ec 1c             	sub    esp,0x1c
c002318f:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0023193:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0023197:	8d 43 f8             	lea    eax,[ebx-0x8]
c002319a:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c002319e:	3c 03                	cmp    al,0x3
c00231a0:	77 43                	ja     c00231e5 <IDE::read(unsigned char, unsigned char)+0x5d>
c00231a2:	0f b6 f2             	movzx  esi,dl
c00231a5:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c00231a8:	8a 44 ef 10          	mov    al,BYTE PTR [edi+ebp*8+0x10]
c00231ac:	83 c8 80             	or     eax,0xffffff80
c00231af:	0f b6 c0             	movzx  eax,al
c00231b2:	50                   	push   eax
c00231b3:	6a 0c                	push   0xc
c00231b5:	56                   	push   esi
c00231b6:	57                   	push   edi
c00231b7:	e8 0c ff ff ff       	call   c00230c8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00231bc:	66 8b 4c ef 0a       	mov    cx,WORD PTR [edi+ebp*8+0xa]
c00231c1:	0f b6 c3             	movzx  eax,bl
c00231c4:	8d 54 01 fa          	lea    edx,[ecx+eax*1-0x6]
c00231c8:	ec                   	in     al,dx
c00231c9:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c00231cd:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c00231d2:	52                   	push   edx
c00231d3:	6a 0c                	push   0xc
c00231d5:	56                   	push   esi
c00231d6:	57                   	push   edi
c00231d7:	e8 ec fe ff ff       	call   c00230c8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00231dc:	83 c4 20             	add    esp,0x20
c00231df:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00231e3:	eb 49                	jmp    c002322e <IDE::read(unsigned char, unsigned char)+0xa6>
c00231e5:	80 fb 07             	cmp    bl,0x7
c00231e8:	77 12                	ja     c00231fc <IDE::read(unsigned char, unsigned char)+0x74>
c00231ea:	0f b6 d2             	movzx  edx,dl
c00231ed:	0f b6 c3             	movzx  eax,bl
c00231f0:	66 03 84 d7 5a 01 00 00 	add    ax,WORD PTR [edi+edx*8+0x15a]
c00231f8:	89 c2                	mov    edx,eax
c00231fa:	eb 31                	jmp    c002322d <IDE::read(unsigned char, unsigned char)+0xa5>
c00231fc:	80 fb 0d             	cmp    bl,0xd
c00231ff:	77 13                	ja     c0023214 <IDE::read(unsigned char, unsigned char)+0x8c>
c0023201:	0f b6 d2             	movzx  edx,dl
c0023204:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c002320b:	0f b6 d3             	movzx  edx,bl
c002320e:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c0023212:	eb 19                	jmp    c002322d <IDE::read(unsigned char, unsigned char)+0xa5>
c0023214:	31 c0                	xor    eax,eax
c0023216:	80 fb 15             	cmp    bl,0x15
c0023219:	77 13                	ja     c002322e <IDE::read(unsigned char, unsigned char)+0xa6>
c002321b:	0f b6 d2             	movzx  edx,dl
c002321e:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c0023226:	0f b6 d3             	movzx  edx,bl
c0023229:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c002322d:	ec                   	in     al,dx
c002322e:	83 c4 1c             	add    esp,0x1c
c0023231:	5b                   	pop    ebx
c0023232:	5e                   	pop    esi
c0023233:	5f                   	pop    edi
c0023234:	5d                   	pop    ebp
c0023235:	c3                   	ret    

c0023236 <IDE::waitInterrupt(unsigned char)>:
c0023236:	55                   	push   ebp
c0023237:	57                   	push   edi
c0023238:	56                   	push   esi
c0023239:	53                   	push   ebx
c002323a:	31 db                	xor    ebx,ebx
c002323c:	83 ec 0c             	sub    esp,0xc
c002323f:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0023243:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c0023248:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c0023250:	89 e8                	mov    eax,ebp
c0023252:	84 c0                	test   al,al
c0023254:	75 34                	jne    c002328a <IDE::waitInterrupt(unsigned char)+0x54>
c0023256:	52                   	push   edx
c0023257:	6a 0c                	push   0xc
c0023259:	56                   	push   esi
c002325a:	57                   	push   edi
c002325b:	e8 28 ff ff ff       	call   c0023188 <IDE::read(unsigned char, unsigned char)>
c0023260:	83 c4 10             	add    esp,0x10
c0023263:	a8 01                	test   al,0x1
c0023265:	75 2b                	jne    c0023292 <IDE::waitInterrupt(unsigned char)+0x5c>
c0023267:	f6 c3 04             	test   bl,0x4
c002326a:	75 16                	jne    c0023282 <IDE::waitInterrupt(unsigned char)+0x4c>
c002326c:	83 fb 32             	cmp    ebx,0x32
c002326f:	7e 11                	jle    c0023282 <IDE::waitInterrupt(unsigned char)+0x4c>
c0023271:	50                   	push   eax
c0023272:	50                   	push   eax
c0023273:	6a 00                	push   0x0
c0023275:	68 80 96 98 00       	push   0x989680
c002327a:	e8 8b b1 ff ff       	call   c001e40a <nanoSleep(unsigned long long)>
c002327f:	83 c4 10             	add    esp,0x10
c0023282:	83 fb 3c             	cmp    ebx,0x3c
c0023285:	74 0b                	je     c0023292 <IDE::waitInterrupt(unsigned char)+0x5c>
c0023287:	43                   	inc    ebx
c0023288:	eb be                	jmp    c0023248 <IDE::waitInterrupt(unsigned char)+0x12>
c002328a:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c0023292:	83 c4 0c             	add    esp,0xc
c0023295:	89 e8                	mov    eax,ebp
c0023297:	5b                   	pop    ebx
c0023298:	5e                   	pop    esi
c0023299:	5f                   	pop    edi
c002329a:	5d                   	pop    ebp
c002329b:	c3                   	ret    

c002329c <ideChannel0IRQHandler(regs*, void*)>:
c002329c:	83 ec 10             	sub    esp,0x10
c002329f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00232a3:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c00232aa:	6a 07                	push   0x7
c00232ac:	6a 00                	push   0x0
c00232ae:	50                   	push   eax
c00232af:	e8 d4 fe ff ff       	call   c0023188 <IDE::read(unsigned char, unsigned char)>
c00232b4:	83 c4 1c             	add    esp,0x1c
c00232b7:	c3                   	ret    

c00232b8 <ideChannel1IRQHandler(regs*, void*)>:
c00232b8:	83 ec 10             	sub    esp,0x10
c00232bb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00232bf:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c00232c6:	6a 07                	push   0x7
c00232c8:	6a 01                	push   0x1
c00232ca:	50                   	push   eax
c00232cb:	e8 b8 fe ff ff       	call   c0023188 <IDE::read(unsigned char, unsigned char)>
c00232d0:	83 c4 1c             	add    esp,0x1c
c00232d3:	c3                   	ret    

c00232d4 <IDE::enableIRQs(unsigned char, bool)>:
c00232d4:	57                   	push   edi
c00232d5:	56                   	push   esi
c00232d6:	be 04 00 00 00       	mov    esi,0x4
c00232db:	53                   	push   ebx
c00232dc:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c00232e1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00232e5:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c00232ea:	0f 94 c0             	sete   al
c00232ed:	d1 e0                	shl    eax,1
c00232ef:	88 84 fb 60 01 00 00 	mov    BYTE PTR [ebx+edi*8+0x160],al
c00232f6:	0f b6 c0             	movzx  eax,al
c00232f9:	50                   	push   eax
c00232fa:	6a 0c                	push   0xc
c00232fc:	57                   	push   edi
c00232fd:	53                   	push   ebx
c00232fe:	e8 c5 fd ff ff       	call   c00230c8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023303:	83 c4 10             	add    esp,0x10
c0023306:	50                   	push   eax
c0023307:	6a 0c                	push   0xc
c0023309:	57                   	push   edi
c002330a:	53                   	push   ebx
c002330b:	e8 78 fe ff ff       	call   c0023188 <IDE::read(unsigned char, unsigned char)>
c0023310:	83 c4 10             	add    esp,0x10
c0023313:	4e                   	dec    esi
c0023314:	75 f0                	jne    c0023306 <IDE::enableIRQs(unsigned char, bool)+0x32>
c0023316:	5b                   	pop    ebx
c0023317:	5e                   	pop    esi
c0023318:	5f                   	pop    edi
c0023319:	c3                   	ret    

c002331a <IDE::open(int, int, void*)>:
c002331a:	55                   	push   ebp
c002331b:	57                   	push   edi
c002331c:	56                   	push   esi
c002331d:	53                   	push   ebx
c002331e:	83 ec 1c             	sub    esp,0x1c
c0023321:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0023325:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c002332e:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c0023337:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c002333e:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c0023345:	0f 85 b0 02 00 00    	jne    c00235fb <IDE::open(int, int, void*)+0x2e1>
c002334b:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c0023351:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c0023355:	83 e0 7f             	and    eax,0x7f
c0023358:	3c 05                	cmp    al,0x5
c002335a:	74 04                	je     c0023360 <IDE::open(int, int, void*)+0x46>
c002335c:	3c 0f                	cmp    al,0xf
c002335e:	75 32                	jne    c0023392 <IDE::open(int, int, void*)+0x78>
c0023360:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c0023366:	83 e0 fc             	and    eax,0xfffffffc
c0023369:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c0023370:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c0023376:	83 e0 fc             	and    eax,0xfffffffc
c0023379:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c0023380:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c0023386:	83 e0 fc             	and    eax,0xfffffffc
c0023389:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0023390:	eb 14                	jmp    c00233a6 <IDE::open(int, int, void*)+0x8c>
c0023392:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c002339c:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c00233a6:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c00233ad:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c00233b4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00233b8:	89 c6                	mov    esi,eax
c00233ba:	bf f8 0c 00 00       	mov    edi,0xcf8
c00233bf:	c1 e6 10             	shl    esi,0x10
c00233c2:	89 e8                	mov    eax,ebp
c00233c4:	89 fa                	mov    edx,edi
c00233c6:	c1 e0 0b             	shl    eax,0xb
c00233c9:	09 f0                	or     eax,esi
c00233cb:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c00233d2:	c1 e6 08             	shl    esi,0x8
c00233d5:	09 c6                	or     esi,eax
c00233d7:	89 f0                	mov    eax,esi
c00233d9:	0d 08 00 00 80       	or     eax,0x80000008
c00233de:	ef                   	out    dx,eax
c00233df:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c00233e4:	89 ca                	mov    edx,ecx
c00233e6:	ed                   	in     eax,dx
c00233e7:	c1 e8 10             	shr    eax,0x10
c00233ea:	3d ff ff 00 00       	cmp    eax,0xffff
c00233ef:	0f 84 f5 00 00 00    	je     c00234ea <IDE::open(int, int, void*)+0x1d0>
c00233f5:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c00233fb:	89 fa                	mov    edx,edi
c00233fd:	89 f0                	mov    eax,esi
c00233ff:	ef                   	out    dx,eax
c0023400:	b0 fe                	mov    al,0xfe
c0023402:	89 ca                	mov    edx,ecx
c0023404:	ee                   	out    dx,al
c0023405:	89 f0                	mov    eax,esi
c0023407:	89 fa                	mov    edx,edi
c0023409:	ef                   	out    dx,eax
c002340a:	89 ca                	mov    edx,ecx
c002340c:	ed                   	in     eax,dx
c002340d:	3c fe                	cmp    al,0xfe
c002340f:	0f 85 a9 00 00 00    	jne    c00234be <IDE::open(int, int, void*)+0x1a4>
c0023415:	8b 15 e8 e6 02 c0    	mov    edx,DWORD PTR ds:0xc002e6e8
c002341b:	f6 82 e8 01 00 00 01 	test   BYTE PTR [edx+0x1e8],0x1
c0023422:	74 33                	je     c0023457 <IDE::open(int, int, void*)+0x13d>
c0023424:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c002342a:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c002342e:	40                   	inc    eax
c002342f:	83 ec 0c             	sub    esp,0xc
c0023432:	0f b6 c0             	movzx  eax,al
c0023435:	50                   	push   eax
c0023436:	55                   	push   ebp
c0023437:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c002343b:	ff b2 e4 01 00 00    	push   DWORD PTR [edx+0x1e4]
c0023441:	51                   	push   ecx
c0023442:	e8 a7 4e ff ff       	call   c00182ee <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c0023447:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c002344c:	83 c4 1c             	add    esp,0x1c
c002344f:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c0023455:	eb 0a                	jmp    c0023461 <IDE::open(int, int, void*)+0x147>
c0023457:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c0023461:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c0023468:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c002346f:	c1 e1 10             	shl    ecx,0x10
c0023472:	c1 e0 08             	shl    eax,0x8
c0023475:	bf f8 0c 00 00       	mov    edi,0xcf8
c002347a:	09 c1                	or     ecx,eax
c002347c:	89 fa                	mov    edx,edi
c002347e:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c0023485:	c1 e0 0b             	shl    eax,0xb
c0023488:	09 c1                	or     ecx,eax
c002348a:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c0023490:	89 c8                	mov    eax,ecx
c0023492:	ef                   	out    dx,eax
c0023493:	be fc 0c 00 00       	mov    esi,0xcfc
c0023498:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c002349e:	89 f2                	mov    edx,esi
c00234a0:	ee                   	out    dx,al
c00234a1:	89 c8                	mov    eax,ecx
c00234a3:	89 fa                	mov    edx,edi
c00234a5:	ef                   	out    dx,eax
c00234a6:	89 f2                	mov    edx,esi
c00234a8:	ed                   	in     eax,dx
c00234a9:	0f b6 c0             	movzx  eax,al
c00234ac:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c00234b2:	74 46                	je     c00234fa <IDE::open(int, int, void*)+0x1e0>
c00234b4:	83 ec 0c             	sub    esp,0xc
c00234b7:	68 78 cd 02 c0       	push   0xc002cd78
c00234bc:	eb 34                	jmp    c00234f2 <IDE::open(int, int, void*)+0x1d8>
c00234be:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c00234c7:	75 17                	jne    c00234e0 <IDE::open(int, int, void*)+0x1c6>
c00234c9:	80 7c 24 03 80       	cmp    BYTE PTR [esp+0x3],0x80
c00234ce:	74 07                	je     c00234d7 <IDE::open(int, int, void*)+0x1bd>
c00234d0:	80 7c 24 03 8a       	cmp    BYTE PTR [esp+0x3],0x8a
c00234d5:	75 09                	jne    c00234e0 <IDE::open(int, int, void*)+0x1c6>
c00234d7:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c00234de:	eb 1a                	jmp    c00234fa <IDE::open(int, int, void*)+0x1e0>
c00234e0:	83 ec 0c             	sub    esp,0xc
c00234e3:	68 80 cd 02 c0       	push   0xc002cd80
c00234e8:	eb 08                	jmp    c00234f2 <IDE::open(int, int, void*)+0x1d8>
c00234ea:	83 ec 0c             	sub    esp,0xc
c00234ed:	68 b1 cd 02 c0       	push   0xc002cdb1
c00234f2:	e8 9e 71 ff ff       	call   c001a695 <Krnl::panic(char const*)>
c00234f7:	83 c4 10             	add    esp,0x10
c00234fa:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c0023501:	79 1a                	jns    c002351d <IDE::open(int, int, void*)+0x203>
c0023503:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c0023509:	83 e0 fc             	and    eax,0xfffffffc
c002350c:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c0023513:	83 c0 08             	add    eax,0x8
c0023516:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c002351d:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0023523:	89 c2                	mov    edx,eax
c0023525:	83 e2 0f             	and    edx,0xf
c0023528:	66 83 fa 08          	cmp    dx,0x8
c002352c:	75 0a                	jne    c0023538 <IDE::open(int, int, void*)+0x21e>
c002352e:	83 e8 02             	sub    eax,0x2
c0023531:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0023538:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c002353e:	89 c2                	mov    edx,eax
c0023540:	83 e2 0f             	and    edx,0xf
c0023543:	66 83 fa 08          	cmp    dx,0x8
c0023547:	75 0a                	jne    c0023553 <IDE::open(int, int, void*)+0x239>
c0023549:	83 e8 02             	sub    eax,0x2
c002354c:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c0023553:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c002355a:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c0023561:	89 d0                	mov    eax,edx
c0023563:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0023566:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c002356a:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c002356e:	8d 4a 01             	lea    ecx,[edx+0x1]
c0023571:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0023576:	0f b6 c9             	movzx  ecx,cl
c0023579:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c0023580:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c0023583:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c0023587:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c002358b:	8d 50 02             	lea    edx,[eax+0x2]
c002358e:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c0023593:	0f b6 d2             	movzx  edx,dl
c0023596:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c002359c:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c002359f:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c00235a3:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c00235a7:	8d 48 03             	lea    ecx,[eax+0x3]
c00235aa:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c00235af:	0f b6 c9             	movzx  ecx,cl
c00235b2:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c00235b8:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c00235bb:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c00235bf:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c00235c3:	8d 50 04             	lea    edx,[eax+0x4]
c00235c6:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c00235cc:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c00235d1:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c00235d8:	66 85 f6             	test   si,si
c00235db:	74 3e                	je     c002361b <IDE::open(int, int, void*)+0x301>
c00235dd:	0f b6 d2             	movzx  edx,dl
c00235e0:	83 c0 05             	add    eax,0x5
c00235e3:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c00235e6:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c00235ea:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c00235ee:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c00235f4:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c00235f9:	eb 20                	jmp    c002361b <IDE::open(int, int, void*)+0x301>
c00235fb:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c0023605:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c002360f:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c0023616:	e9 02 ff ff ff       	jmp    c002351d <IDE::open(int, int, void*)+0x203>
c002361b:	52                   	push   edx
c002361c:	52                   	push   edx
c002361d:	6a 00                	push   0x0
c002361f:	53                   	push   ebx
c0023620:	e8 7d fa ff ff       	call   c00230a2 <IDE::prepareInterrupt(unsigned char)>
c0023625:	59                   	pop    ecx
c0023626:	5e                   	pop    esi
c0023627:	6a 01                	push   0x1
c0023629:	53                   	push   ebx
c002362a:	e8 73 fa ff ff       	call   c00230a2 <IDE::prepareInterrupt(unsigned char)>
c002362f:	83 c4 0c             	add    esp,0xc
c0023632:	6a 00                	push   0x0
c0023634:	6a 00                	push   0x0
c0023636:	53                   	push   ebx
c0023637:	e8 98 fc ff ff       	call   c00232d4 <IDE::enableIRQs(unsigned char, bool)>
c002363c:	83 c4 0c             	add    esp,0xc
c002363f:	6a 00                	push   0x0
c0023641:	6a 01                	push   0x1
c0023643:	53                   	push   ebx
c0023644:	e8 8b fc ff ff       	call   c00232d4 <IDE::enableIRQs(unsigned char, bool)>
c0023649:	83 c4 10             	add    esp,0x10
c002364c:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c0023653:	74 40                	je     c0023695 <IDE::open(int, int, void*)+0x37b>
c0023655:	83 ec 0c             	sub    esp,0xc
c0023658:	68 db cd 02 c0       	push   0xc002cddb
c002365d:	e8 81 f9 fe ff       	call   c0012fe3 <Dbg::kprintf(char const*, ...)>
c0023662:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0023665:	6a 01                	push   0x1
c0023667:	68 9c 32 02 c0       	push   0xc002329c
c002366c:	6a 0e                	push   0xe
c002366e:	53                   	push   ebx
c002366f:	e8 1a 0d ff ff       	call   c001438e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0023674:	83 c4 14             	add    esp,0x14
c0023677:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c002367d:	53                   	push   ebx
c002367e:	6a 01                	push   0x1
c0023680:	68 b8 32 02 c0       	push   0xc00232b8
c0023685:	6a 0f                	push   0xf
c0023687:	53                   	push   ebx
c0023688:	e8 01 0d ff ff       	call   c001438e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c002368d:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c0023693:	eb 4a                	jmp    c00236df <IDE::open(int, int, void*)+0x3c5>
c0023695:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c002369f:	50                   	push   eax
c00236a0:	6a 0f                	push   0xf
c00236a2:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c00236a8:	68 f7 cd 02 c0       	push   0xc002cdf7
c00236ad:	e8 31 f9 fe ff       	call   c0012fe3 <Dbg::kprintf(char const*, ...)>
c00236b2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00236b5:	6a 00                	push   0x0
c00236b7:	68 9c 32 02 c0       	push   0xc002329c
c00236bc:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c00236c2:	53                   	push   ebx
c00236c3:	e8 c6 0c ff ff       	call   c001438e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00236c8:	83 c4 14             	add    esp,0x14
c00236cb:	53                   	push   ebx
c00236cc:	6a 00                	push   0x0
c00236ce:	68 b8 32 02 c0       	push   0xc00232b8
c00236d3:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c00236d9:	53                   	push   ebx
c00236da:	e8 af 0c ff ff       	call   c001438e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00236df:	8b 03                	mov    eax,DWORD PTR [ebx]
c00236e1:	83 c4 20             	add    esp,0x20
c00236e4:	83 ec 0c             	sub    esp,0xc
c00236e7:	53                   	push   ebx
c00236e8:	ff 50 18             	call   DWORD PTR [eax+0x18]
c00236eb:	83 c4 0c             	add    esp,0xc
c00236ee:	6a 07                	push   0x7
c00236f0:	6a 00                	push   0x0
c00236f2:	53                   	push   ebx
c00236f3:	e8 90 fa ff ff       	call   c0023188 <IDE::read(unsigned char, unsigned char)>
c00236f8:	83 c4 0c             	add    esp,0xc
c00236fb:	6a 07                	push   0x7
c00236fd:	6a 01                	push   0x1
c00236ff:	53                   	push   ebx
c0023700:	e8 83 fa ff ff       	call   c0023188 <IDE::read(unsigned char, unsigned char)>
c0023705:	83 c4 0c             	add    esp,0xc
c0023708:	6a 01                	push   0x1
c002370a:	6a 00                	push   0x0
c002370c:	53                   	push   ebx
c002370d:	e8 c2 fb ff ff       	call   c00232d4 <IDE::enableIRQs(unsigned char, bool)>
c0023712:	83 c4 0c             	add    esp,0xc
c0023715:	6a 01                	push   0x1
c0023717:	6a 01                	push   0x1
c0023719:	53                   	push   ebx
c002371a:	e8 b5 fb ff ff       	call   c00232d4 <IDE::enableIRQs(unsigned char, bool)>
c002371f:	83 c4 2c             	add    esp,0x2c
c0023722:	31 c0                	xor    eax,eax
c0023724:	5b                   	pop    ebx
c0023725:	5e                   	pop    esi
c0023726:	5f                   	pop    edi
c0023727:	5d                   	pop    ebp
c0023728:	c3                   	ret    
c0023729:	90                   	nop

c002372a <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c002372a:	55                   	push   ebp
c002372b:	57                   	push   edi
c002372c:	56                   	push   esi
c002372d:	53                   	push   ebx
c002372e:	83 ec 1c             	sub    esp,0x1c
c0023731:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0023735:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0023739:	8d 50 f8             	lea    edx,[eax-0x8]
c002373c:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0023740:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0023744:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0023748:	80 fa 03             	cmp    dl,0x3
c002374b:	77 5d                	ja     c00237aa <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x80>
c002374d:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0023751:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0023755:	0f b6 db             	movzx  ebx,bl
c0023758:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c002375b:	8a 54 ee 10          	mov    dl,BYTE PTR [esi+ebp*8+0x10]
c002375f:	83 ca 80             	or     edx,0xffffff80
c0023762:	0f b6 d2             	movzx  edx,dl
c0023765:	52                   	push   edx
c0023766:	6a 0c                	push   0xc
c0023768:	53                   	push   ebx
c0023769:	56                   	push   esi
c002376a:	e8 59 f9 ff ff       	call   c00230c8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002376f:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c0023774:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023778:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c002377c:	0f b6 c0             	movzx  eax,al
c002377f:	8d 54 02 fa          	lea    edx,[edx+eax*1-0x6]
c0023783:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c0023785:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c002378a:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c002378e:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c0023792:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0023796:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c002379e:	83 c4 2c             	add    esp,0x2c
c00237a1:	5b                   	pop    ebx
c00237a2:	5e                   	pop    esi
c00237a3:	5f                   	pop    edi
c00237a4:	5d                   	pop    ebp
c00237a5:	e9 1e f9 ff ff       	jmp    c00230c8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00237aa:	3c 07                	cmp    al,0x7
c00237ac:	77 10                	ja     c00237be <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x94>
c00237ae:	0f b6 db             	movzx  ebx,bl
c00237b1:	0f b6 d0             	movzx  edx,al
c00237b4:	66 03 94 de 5a 01 00 00 	add    dx,WORD PTR [esi+ebx*8+0x15a]
c00237bc:	eb 2d                	jmp    c00237eb <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c00237be:	3c 0d                	cmp    al,0xd
c00237c0:	77 13                	ja     c00237d5 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xab>
c00237c2:	0f b6 db             	movzx  ebx,bl
c00237c5:	0f b6 c0             	movzx  eax,al
c00237c8:	8b 94 de 5c 01 00 00 	mov    edx,DWORD PTR [esi+ebx*8+0x15c]
c00237cf:	8d 54 02 f4          	lea    edx,[edx+eax*1-0xc]
c00237d3:	eb 16                	jmp    c00237eb <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c00237d5:	3c 15                	cmp    al,0x15
c00237d7:	77 14                	ja     c00237ed <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc3>
c00237d9:	0f b6 db             	movzx  ebx,bl
c00237dc:	0f b6 c0             	movzx  eax,al
c00237df:	66 8b 94 de 5e 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15e]
c00237e7:	8d 54 02 f2          	lea    edx,[edx+eax*1-0xe]
c00237eb:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c00237ed:	83 c4 1c             	add    esp,0x1c
c00237f0:	5b                   	pop    ebx
c00237f1:	5e                   	pop    esi
c00237f2:	5f                   	pop    edi
c00237f3:	5d                   	pop    ebp
c00237f4:	c3                   	ret    
c00237f5:	90                   	nop

c00237f6 <IDE::detect()>:
c00237f6:	55                   	push   ebp
c00237f7:	57                   	push   edi
c00237f8:	56                   	push   esi
c00237f9:	53                   	push   ebx
c00237fa:	81 ec 1c 02 00 00    	sub    esp,0x21c
c0023800:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c0023807:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c002380e:	0f 85 be 02 00 00    	jne    c0023ad2 <IDE::detect()+0x2dc>
c0023814:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c002381b:	31 f6                	xor    esi,esi
c002381d:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0023825:	31 ed                	xor    ebp,ebp
c0023827:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002382b:	c1 e0 06             	shl    eax,0x6
c002382e:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c0023836:	89 e8                	mov    eax,ebp
c0023838:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c002383c:	c1 e0 04             	shl    eax,0x4
c002383f:	83 c8 a0             	or     eax,0xffffffa0
c0023842:	0f b6 c0             	movzx  eax,al
c0023845:	50                   	push   eax
c0023846:	6a 06                	push   0x6
c0023848:	56                   	push   esi
c0023849:	53                   	push   ebx
c002384a:	e8 79 f8 ff ff       	call   c00230c8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002384f:	83 c4 0c             	add    esp,0xc
c0023852:	6a 0c                	push   0xc
c0023854:	56                   	push   esi
c0023855:	53                   	push   ebx
c0023856:	e8 2d f9 ff ff       	call   c0023188 <IDE::read(unsigned char, unsigned char)>
c002385b:	83 c4 0c             	add    esp,0xc
c002385e:	6a 0c                	push   0xc
c0023860:	56                   	push   esi
c0023861:	53                   	push   ebx
c0023862:	e8 21 f9 ff ff       	call   c0023188 <IDE::read(unsigned char, unsigned char)>
c0023867:	83 c4 0c             	add    esp,0xc
c002386a:	6a 0c                	push   0xc
c002386c:	56                   	push   esi
c002386d:	53                   	push   ebx
c002386e:	e8 15 f9 ff ff       	call   c0023188 <IDE::read(unsigned char, unsigned char)>
c0023873:	83 c4 0c             	add    esp,0xc
c0023876:	6a 0c                	push   0xc
c0023878:	56                   	push   esi
c0023879:	53                   	push   ebx
c002387a:	e8 09 f9 ff ff       	call   c0023188 <IDE::read(unsigned char, unsigned char)>
c002387f:	68 ec 00 00 00       	push   0xec
c0023884:	6a 07                	push   0x7
c0023886:	56                   	push   esi
c0023887:	53                   	push   ebx
c0023888:	e8 3b f8 ff ff       	call   c00230c8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002388d:	83 c4 1c             	add    esp,0x1c
c0023890:	6a 0c                	push   0xc
c0023892:	56                   	push   esi
c0023893:	53                   	push   ebx
c0023894:	e8 ef f8 ff ff       	call   c0023188 <IDE::read(unsigned char, unsigned char)>
c0023899:	83 c4 0c             	add    esp,0xc
c002389c:	6a 0c                	push   0xc
c002389e:	56                   	push   esi
c002389f:	53                   	push   ebx
c00238a0:	e8 e3 f8 ff ff       	call   c0023188 <IDE::read(unsigned char, unsigned char)>
c00238a5:	83 c4 0c             	add    esp,0xc
c00238a8:	6a 0c                	push   0xc
c00238aa:	56                   	push   esi
c00238ab:	53                   	push   ebx
c00238ac:	e8 d7 f8 ff ff       	call   c0023188 <IDE::read(unsigned char, unsigned char)>
c00238b1:	83 c4 0c             	add    esp,0xc
c00238b4:	6a 0c                	push   0xc
c00238b6:	56                   	push   esi
c00238b7:	53                   	push   ebx
c00238b8:	e8 cb f8 ff ff       	call   c0023188 <IDE::read(unsigned char, unsigned char)>
c00238bd:	83 c4 0c             	add    esp,0xc
c00238c0:	6a 0c                	push   0xc
c00238c2:	56                   	push   esi
c00238c3:	53                   	push   ebx
c00238c4:	e8 bf f8 ff ff       	call   c0023188 <IDE::read(unsigned char, unsigned char)>
c00238c9:	83 c4 10             	add    esp,0x10
c00238cc:	84 c0                	test   al,al
c00238ce:	0f 84 8b 01 00 00    	je     c0023a5f <IDE::detect()+0x269>
c00238d4:	31 ff                	xor    edi,edi
c00238d6:	50                   	push   eax
c00238d7:	6a 0c                	push   0xc
c00238d9:	56                   	push   esi
c00238da:	53                   	push   ebx
c00238db:	e8 a8 f8 ff ff       	call   c0023188 <IDE::read(unsigned char, unsigned char)>
c00238e0:	83 c4 10             	add    esp,0x10
c00238e3:	a8 01                	test   al,0x1
c00238e5:	0f 85 8e 01 00 00    	jne    c0023a79 <IDE::detect()+0x283>
c00238eb:	84 c0                	test   al,al
c00238ed:	78 04                	js     c00238f3 <IDE::detect()+0xfd>
c00238ef:	a8 08                	test   al,0x8
c00238f1:	75 27                	jne    c002391a <IDE::detect()+0x124>
c00238f3:	47                   	inc    edi
c00238f4:	81 ff 17 01 00 00    	cmp    edi,0x117
c00238fa:	7e da                	jle    c00238d6 <IDE::detect()+0xe0>
c00238fc:	50                   	push   eax
c00238fd:	50                   	push   eax
c00238fe:	6a 00                	push   0x0
c0023900:	68 40 4b 4c 00       	push   0x4c4b40
c0023905:	e8 00 ab ff ff       	call   c001e40a <nanoSleep(unsigned long long)>
c002390a:	83 c4 10             	add    esp,0x10
c002390d:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c0023913:	75 c1                	jne    c00238d6 <IDE::detect()+0xe0>
c0023915:	e9 5f 01 00 00       	jmp    c0023a79 <IDE::detect()+0x283>
c002391a:	31 c9                	xor    ecx,ecx
c002391c:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0023920:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0023924:	83 ec 0c             	sub    esp,0xc
c0023927:	68 80 00 00 00       	push   0x80
c002392c:	57                   	push   edi
c002392d:	6a 00                	push   0x0
c002392f:	56                   	push   esi
c0023930:	53                   	push   ebx
c0023931:	e8 f4 fd ff ff       	call   c002372a <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c0023936:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c002393b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c002393f:	89 d1                	mov    ecx,edx
c0023941:	c1 e0 06             	shl    eax,0x6
c0023944:	01 d8                	add    eax,ebx
c0023946:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c002394d:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c0023954:	89 f2                	mov    edx,esi
c0023956:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c002395c:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c0023960:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c0023966:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c002396a:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c0023971:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c0023979:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c0023980:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c0023988:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c002398e:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c0023995:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c002399b:	8d 54 24 58          	lea    edx,[esp+0x58]
c002399f:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c00239a3:	83 c4 20             	add    esp,0x20
c00239a6:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c00239a9:	83 c0 02             	add    eax,0x2
c00239ac:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c00239b2:	83 c7 02             	add    edi,0x2
c00239b5:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c00239b8:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c00239be:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c00239c2:	75 e2                	jne    c00239a6 <IDE::detect()+0x1b0>
c00239c4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00239c8:	c1 e0 06             	shl    eax,0x6
c00239cb:	01 d8                	add    eax,ebx
c00239cd:	8b 90 74 01 00 00    	mov    edx,DWORD PTR [eax+0x174]
c00239d3:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c00239da:	66 c1 ea 09          	shr    dx,0x9
c00239de:	83 e2 01             	and    edx,0x1
c00239e1:	84 c9                	test   cl,cl
c00239e3:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c00239e9:	75 2f                	jne    c0023a1a <IDE::detect()+0x224>
c00239eb:	8b 80 7c 01 00 00    	mov    eax,DWORD PTR [eax+0x17c]
c00239f1:	85 c0                	test   eax,eax
c00239f3:	74 66                	je     c0023a5b <IDE::detect()+0x265>
c00239f5:	50                   	push   eax
c00239f6:	55                   	push   ebp
c00239f7:	56                   	push   esi
c00239f8:	68 13 ce 02 c0       	push   0xc002ce13
c00239fd:	e8 e1 f5 fe ff       	call   c0012fe3 <Dbg::kprintf(char const*, ...)>
c0023a02:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c0023a09:	e8 d6 be fe ff       	call   c000f8e4 <malloc>
c0023a0e:	89 c7                	mov    edi,eax
c0023a10:	89 04 24             	mov    DWORD PTR [esp],eax
c0023a13:	e8 78 06 00 00       	call   c0024090 <ATA::ATA()>
c0023a18:	eb 28                	jmp    c0023a42 <IDE::detect()+0x24c>
c0023a1a:	ff b0 7c 01 00 00    	push   DWORD PTR [eax+0x17c]
c0023a20:	55                   	push   ebp
c0023a21:	56                   	push   esi
c0023a22:	68 42 ce 02 c0       	push   0xc002ce42
c0023a27:	e8 b7 f5 fe ff       	call   c0012fe3 <Dbg::kprintf(char const*, ...)>
c0023a2c:	c7 04 24 80 01 00 00 	mov    DWORD PTR [esp],0x180
c0023a33:	e8 ac be fe ff       	call   c000f8e4 <malloc>
c0023a38:	89 c7                	mov    edi,eax
c0023a3a:	89 04 24             	mov    DWORD PTR [esp],eax
c0023a3d:	e8 8e 0c 00 00       	call   c00246d0 <ATAPI::ATAPI()>
c0023a42:	5a                   	pop    edx
c0023a43:	59                   	pop    ecx
c0023a44:	57                   	push   edi
c0023a45:	53                   	push   ebx
c0023a46:	e8 bf 09 ff ff       	call   c001440a <Device::addChild(Device*)>
c0023a4b:	8b 07                	mov    eax,DWORD PTR [edi]
c0023a4d:	53                   	push   ebx
c0023a4e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0023a52:	6a 00                	push   0x0
c0023a54:	57                   	push   edi
c0023a55:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0023a58:	83 c4 20             	add    esp,0x20
c0023a5b:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0023a5f:	4d                   	dec    ebp
c0023a60:	74 0a                	je     c0023a6c <IDE::detect()+0x276>
c0023a62:	bd 01 00 00 00       	mov    ebp,0x1
c0023a67:	e9 bb fd ff ff       	jmp    c0023827 <IDE::detect()+0x31>
c0023a6c:	4e                   	dec    esi
c0023a6d:	74 63                	je     c0023ad2 <IDE::detect()+0x2dc>
c0023a6f:	be 01 00 00 00       	mov    esi,0x1
c0023a74:	e9 ac fd ff ff       	jmp    c0023825 <IDE::detect()+0x2f>
c0023a79:	50                   	push   eax
c0023a7a:	6a 04                	push   0x4
c0023a7c:	56                   	push   esi
c0023a7d:	53                   	push   ebx
c0023a7e:	e8 05 f7 ff ff       	call   c0023188 <IDE::read(unsigned char, unsigned char)>
c0023a83:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0023a87:	83 c4 0c             	add    esp,0xc
c0023a8a:	6a 05                	push   0x5
c0023a8c:	56                   	push   esi
c0023a8d:	53                   	push   ebx
c0023a8e:	e8 f5 f6 ff ff       	call   c0023188 <IDE::read(unsigned char, unsigned char)>
c0023a93:	83 c4 10             	add    esp,0x10
c0023a96:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0023a9a:	80 fa 14             	cmp    dl,0x14
c0023a9d:	75 04                	jne    c0023aa3 <IDE::detect()+0x2ad>
c0023a9f:	3c eb                	cmp    al,0xeb
c0023aa1:	eb 07                	jmp    c0023aaa <IDE::detect()+0x2b4>
c0023aa3:	3c 96                	cmp    al,0x96
c0023aa5:	75 b8                	jne    c0023a5f <IDE::detect()+0x269>
c0023aa7:	80 fa 69             	cmp    dl,0x69
c0023aaa:	75 b3                	jne    c0023a5f <IDE::detect()+0x269>
c0023aac:	68 a1 00 00 00       	push   0xa1
c0023ab1:	6a 07                	push   0x7
c0023ab3:	56                   	push   esi
c0023ab4:	53                   	push   ebx
c0023ab5:	e8 0e f6 ff ff       	call   c00230c8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023aba:	5f                   	pop    edi
c0023abb:	58                   	pop    eax
c0023abc:	6a 00                	push   0x0
c0023abe:	68 40 42 0f 00       	push   0xf4240
c0023ac3:	e8 42 a9 ff ff       	call   c001e40a <nanoSleep(unsigned long long)>
c0023ac8:	83 c4 10             	add    esp,0x10
c0023acb:	b1 01                	mov    cl,0x1
c0023acd:	e9 4a fe ff ff       	jmp    c002391c <IDE::detect()+0x126>
c0023ad2:	81 c4 1c 02 00 00    	add    esp,0x21c
c0023ad8:	5b                   	pop    ebx
c0023ad9:	5e                   	pop    esi
c0023ada:	5f                   	pop    edi
c0023adb:	5d                   	pop    ebp
c0023adc:	c3                   	ret    
c0023add:	90                   	nop

c0023ade <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c0023ade:	55                   	push   ebp
c0023adf:	57                   	push   edi
c0023ae0:	56                   	push   esi
c0023ae1:	53                   	push   ebx
c0023ae2:	83 ec 1c             	sub    esp,0x1c
c0023ae5:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0023ae9:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0023aed:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0023af1:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0023af5:	88 c3                	mov    bl,al
c0023af7:	84 c0                	test   al,al
c0023af9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0023afd:	0f 84 67 01 00 00    	je     c0023c6a <IDE::printError(unsigned char, unsigned char, unsigned char)+0x18c>
c0023b03:	83 ec 0c             	sub    esp,0xc
c0023b06:	68 73 ce 02 c0       	push   0xc002ce73
c0023b0b:	e8 d3 f4 fe ff       	call   c0012fe3 <Dbg::kprintf(char const*, ...)>
c0023b10:	83 c4 10             	add    esp,0x10
c0023b13:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0023b17:	3c 01                	cmp    al,0x1
c0023b19:	75 17                	jne    c0023b32 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x54>
c0023b1b:	83 ec 0c             	sub    esp,0xc
c0023b1e:	b3 13                	mov    bl,0x13
c0023b20:	68 7f ce 02 c0       	push   0xc002ce7f
c0023b25:	e8 b9 f4 fe ff       	call   c0012fe3 <Dbg::kprintf(char const*, ...)>
c0023b2a:	83 c4 10             	add    esp,0x10
c0023b2d:	e9 25 01 00 00       	jmp    c0023c57 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0023b32:	3c 02                	cmp    al,0x2
c0023b34:	0f 85 ef 00 00 00    	jne    c0023c29 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x14b>
c0023b3a:	d1 e6                	shl    esi,1
c0023b3c:	09 ee                	or     esi,ebp
c0023b3e:	52                   	push   edx
c0023b3f:	89 f0                	mov    eax,esi
c0023b41:	6a 01                	push   0x1
c0023b43:	0f b6 f0             	movzx  esi,al
c0023b46:	c1 e6 06             	shl    esi,0x6
c0023b49:	0f b6 84 37 6d 01 00 00 	movzx  eax,BYTE PTR [edi+esi*1+0x16d]
c0023b51:	50                   	push   eax
c0023b52:	57                   	push   edi
c0023b53:	e8 30 f6 ff ff       	call   c0023188 <IDE::read(unsigned char, unsigned char)>
c0023b58:	83 c4 10             	add    esp,0x10
c0023b5b:	89 c6                	mov    esi,eax
c0023b5d:	a8 01                	test   al,0x1
c0023b5f:	74 12                	je     c0023b73 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x95>
c0023b61:	83 ec 0c             	sub    esp,0xc
c0023b64:	b3 07                	mov    bl,0x7
c0023b66:	68 94 ce 02 c0       	push   0xc002ce94
c0023b6b:	e8 73 f4 fe ff       	call   c0012fe3 <Dbg::kprintf(char const*, ...)>
c0023b70:	83 c4 10             	add    esp,0x10
c0023b73:	f7 c6 02 00 00 00    	test   esi,0x2
c0023b79:	74 12                	je     c0023b8d <IDE::printError(unsigned char, unsigned char, unsigned char)+0xaf>
c0023b7b:	83 ec 0c             	sub    esp,0xc
c0023b7e:	b3 03                	mov    bl,0x3
c0023b80:	68 b2 ce 02 c0       	push   0xc002ceb2
c0023b85:	e8 59 f4 fe ff       	call   c0012fe3 <Dbg::kprintf(char const*, ...)>
c0023b8a:	83 c4 10             	add    esp,0x10
c0023b8d:	f7 c6 04 00 00 00    	test   esi,0x4
c0023b93:	74 12                	je     c0023ba7 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xc9>
c0023b95:	83 ec 0c             	sub    esp,0xc
c0023b98:	b3 14                	mov    bl,0x14
c0023b9a:	68 d2 ce 02 c0       	push   0xc002ced2
c0023b9f:	e8 3f f4 fe ff       	call   c0012fe3 <Dbg::kprintf(char const*, ...)>
c0023ba4:	83 c4 10             	add    esp,0x10
c0023ba7:	f7 c6 08 00 00 00    	test   esi,0x8
c0023bad:	74 12                	je     c0023bc1 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xe3>
c0023baf:	83 ec 0c             	sub    esp,0xc
c0023bb2:	b3 03                	mov    bl,0x3
c0023bb4:	68 b2 ce 02 c0       	push   0xc002ceb2
c0023bb9:	e8 25 f4 fe ff       	call   c0012fe3 <Dbg::kprintf(char const*, ...)>
c0023bbe:	83 c4 10             	add    esp,0x10
c0023bc1:	f7 c6 10 00 00 00    	test   esi,0x10
c0023bc7:	74 12                	je     c0023bdb <IDE::printError(unsigned char, unsigned char, unsigned char)+0xfd>
c0023bc9:	83 ec 0c             	sub    esp,0xc
c0023bcc:	b3 15                	mov    bl,0x15
c0023bce:	68 ea ce 02 c0       	push   0xc002ceea
c0023bd3:	e8 0b f4 fe ff       	call   c0012fe3 <Dbg::kprintf(char const*, ...)>
c0023bd8:	83 c4 10             	add    esp,0x10
c0023bdb:	f7 c6 20 00 00 00    	test   esi,0x20
c0023be1:	74 12                	je     c0023bf5 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x117>
c0023be3:	83 ec 0c             	sub    esp,0xc
c0023be6:	b3 03                	mov    bl,0x3
c0023be8:	68 b2 ce 02 c0       	push   0xc002ceb2
c0023bed:	e8 f1 f3 fe ff       	call   c0012fe3 <Dbg::kprintf(char const*, ...)>
c0023bf2:	83 c4 10             	add    esp,0x10
c0023bf5:	f7 c6 40 00 00 00    	test   esi,0x40
c0023bfb:	74 12                	je     c0023c0f <IDE::printError(unsigned char, unsigned char, unsigned char)+0x131>
c0023bfd:	83 ec 0c             	sub    esp,0xc
c0023c00:	b3 16                	mov    bl,0x16
c0023c02:	68 04 cf 02 c0       	push   0xc002cf04
c0023c07:	e8 d7 f3 fe ff       	call   c0012fe3 <Dbg::kprintf(char const*, ...)>
c0023c0c:	83 c4 10             	add    esp,0x10
c0023c0f:	89 f0                	mov    eax,esi
c0023c11:	84 c0                	test   al,al
c0023c13:	79 42                	jns    c0023c57 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0023c15:	83 ec 0c             	sub    esp,0xc
c0023c18:	b3 0d                	mov    bl,0xd
c0023c1a:	68 25 cf 02 c0       	push   0xc002cf25
c0023c1f:	e8 bf f3 fe ff       	call   c0012fe3 <Dbg::kprintf(char const*, ...)>
c0023c24:	83 c4 10             	add    esp,0x10
c0023c27:	eb 2e                	jmp    c0023c57 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0023c29:	3c 03                	cmp    al,0x3
c0023c2b:	75 14                	jne    c0023c41 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x163>
c0023c2d:	83 ec 0c             	sub    esp,0xc
c0023c30:	b3 17                	mov    bl,0x17
c0023c32:	68 39 cf 02 c0       	push   0xc002cf39
c0023c37:	e8 a7 f3 fe ff       	call   c0012fe3 <Dbg::kprintf(char const*, ...)>
c0023c3c:	83 c4 10             	add    esp,0x10
c0023c3f:	eb 16                	jmp    c0023c57 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0023c41:	3c 04                	cmp    al,0x4
c0023c43:	75 12                	jne    c0023c57 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0023c45:	83 ec 0c             	sub    esp,0xc
c0023c48:	b3 08                	mov    bl,0x8
c0023c4a:	68 4f cf 02 c0       	push   0xc002cf4f
c0023c4f:	e8 8f f3 fe ff       	call   c0012fe3 <Dbg::kprintf(char const*, ...)>
c0023c54:	83 c4 10             	add    esp,0x10
c0023c57:	50                   	push   eax
c0023c58:	50                   	push   eax
c0023c59:	0f b6 c3             	movzx  eax,bl
c0023c5c:	50                   	push   eax
c0023c5d:	68 67 cf 02 c0       	push   0xc002cf67
c0023c62:	e8 7c f3 fe ff       	call   c0012fe3 <Dbg::kprintf(char const*, ...)>
c0023c67:	83 c4 10             	add    esp,0x10
c0023c6a:	83 c4 1c             	add    esp,0x1c
c0023c6d:	88 d8                	mov    al,bl
c0023c6f:	5b                   	pop    ebx
c0023c70:	5e                   	pop    esi
c0023c71:	5f                   	pop    edi
c0023c72:	5d                   	pop    ebp
c0023c73:	c3                   	ret    

c0023c74 <IDE::polling(unsigned char, unsigned int)>:
c0023c74:	57                   	push   edi
c0023c75:	56                   	push   esi
c0023c76:	53                   	push   ebx
c0023c77:	bb 04 00 00 00       	mov    ebx,0x4
c0023c7c:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0023c80:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c0023c85:	52                   	push   edx
c0023c86:	6a 0c                	push   0xc
c0023c88:	56                   	push   esi
c0023c89:	57                   	push   edi
c0023c8a:	e8 f9 f4 ff ff       	call   c0023188 <IDE::read(unsigned char, unsigned char)>
c0023c8f:	83 c4 10             	add    esp,0x10
c0023c92:	4b                   	dec    ebx
c0023c93:	75 f0                	jne    c0023c85 <IDE::polling(unsigned char, unsigned int)+0x11>
c0023c95:	bb a0 86 01 00       	mov    ebx,0x186a0
c0023c9a:	50                   	push   eax
c0023c9b:	6a 0c                	push   0xc
c0023c9d:	56                   	push   esi
c0023c9e:	57                   	push   edi
c0023c9f:	e8 e4 f4 ff ff       	call   c0023188 <IDE::read(unsigned char, unsigned char)>
c0023ca4:	83 c4 10             	add    esp,0x10
c0023ca7:	a8 01                	test   al,0x1
c0023ca9:	74 12                	je     c0023cbd <IDE::polling(unsigned char, unsigned int)+0x49>
c0023cab:	83 ec 0c             	sub    esp,0xc
c0023cae:	68 81 cf 02 c0       	push   0xc002cf81
c0023cb3:	e8 2b f3 fe ff       	call   c0012fe3 <Dbg::kprintf(char const*, ...)>
c0023cb8:	83 c4 10             	add    esp,0x10
c0023cbb:	eb 17                	jmp    c0023cd4 <IDE::polling(unsigned char, unsigned int)+0x60>
c0023cbd:	a8 20                	test   al,0x20
c0023cbf:	75 0f                	jne    c0023cd0 <IDE::polling(unsigned char, unsigned int)+0x5c>
c0023cc1:	4b                   	dec    ebx
c0023cc2:	74 10                	je     c0023cd4 <IDE::polling(unsigned char, unsigned int)+0x60>
c0023cc4:	84 c0                	test   al,al
c0023cc6:	78 d2                	js     c0023c9a <IDE::polling(unsigned char, unsigned int)+0x26>
c0023cc8:	a8 08                	test   al,0x8
c0023cca:	74 ce                	je     c0023c9a <IDE::polling(unsigned char, unsigned int)+0x26>
c0023ccc:	31 c0                	xor    eax,eax
c0023cce:	eb 06                	jmp    c0023cd6 <IDE::polling(unsigned char, unsigned int)+0x62>
c0023cd0:	b0 01                	mov    al,0x1
c0023cd2:	eb 02                	jmp    c0023cd6 <IDE::polling(unsigned char, unsigned int)+0x62>
c0023cd4:	b0 02                	mov    al,0x2
c0023cd6:	5b                   	pop    ebx
c0023cd7:	5e                   	pop    esi
c0023cd8:	5f                   	pop    edi
c0023cd9:	c3                   	ret    

c0023cda <SATABus::close(int, int, void*)>:
c0023cda:	31 c0                	xor    eax,eax
c0023cdc:	c3                   	ret    
c0023cdd:	90                   	nop

c0023cde <SATABus::detect()>:
c0023cde:	c3                   	ret    
c0023cdf:	90                   	nop

c0023ce0 <SATABus::SATABus()>:
c0023ce0:	83 ec 0c             	sub    esp,0xc
c0023ce3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023ce7:	83 ec 08             	sub    esp,0x8
c0023cea:	68 c4 cf 02 c0       	push   0xc002cfc4
c0023cef:	50                   	push   eax
c0023cf0:	e8 a1 0a ff ff       	call   c0014796 <HardDiskController::HardDiskController(char const*)>
c0023cf5:	83 c4 10             	add    esp,0x10
c0023cf8:	ba 80 d0 02 c0       	mov    edx,0xc002d080
c0023cfd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023d01:	89 10                	mov    DWORD PTR [eax],edx
c0023d03:	83 ec 0c             	sub    esp,0xc
c0023d06:	6a 50                	push   0x50
c0023d08:	e8 9c c3 fe ff       	call   c00100a9 <Phys::allocateContiguousPages(int)>
c0023d0d:	83 c4 10             	add    esp,0x10
c0023d10:	89 c2                	mov    edx,eax
c0023d12:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023d16:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0023d1c:	83 ec 0c             	sub    esp,0xc
c0023d1f:	6a 50                	push   0x50
c0023d21:	e8 fd de fe ff       	call   c0011c23 <Virt::allocateKernelVirtualPages(int)>
c0023d26:	83 c4 10             	add    esp,0x10
c0023d29:	89 c2                	mov    edx,eax
c0023d2b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023d2f:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0023d35:	e8 84 e1 fe ff       	call   c0011ebe <Virt::getAKernelVAS()>
c0023d3a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0023d3e:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c0023d44:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0023d48:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c0023d4e:	83 ec 0c             	sub    esp,0xc
c0023d51:	6a 03                	push   0x3
c0023d53:	6a 50                	push   0x50
c0023d55:	51                   	push   ecx
c0023d56:	52                   	push   edx
c0023d57:	50                   	push   eax
c0023d58:	e8 91 e9 fe ff       	call   c00126ee <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0023d5d:	83 c4 20             	add    esp,0x20
c0023d60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023d64:	8b 90 58 01 00 00    	mov    edx,DWORD PTR [eax+0x158]
c0023d6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023d6e:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0023d74:	83 ec 04             	sub    esp,0x4
c0023d77:	52                   	push   edx
c0023d78:	50                   	push   eax
c0023d79:	68 e8 cf 02 c0       	push   0xc002cfe8
c0023d7e:	e8 60 f2 fe ff       	call   c0012fe3 <Dbg::kprintf(char const*, ...)>
c0023d83:	83 c4 10             	add    esp,0x10
c0023d86:	90                   	nop
c0023d87:	83 c4 0c             	add    esp,0xc
c0023d8a:	c3                   	ret    
c0023d8b:	90                   	nop

c0023d8c <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c0023d8c:	83 ec 0c             	sub    esp,0xc
c0023d8f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0023d93:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c0023d96:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0023d99:	09 c2                	or     edx,eax
c0023d9b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023d9f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0023da5:	8b 08                	mov    ecx,DWORD PTR [eax]
c0023da7:	31 c0                	xor    eax,eax
c0023da9:	c1 e9 08             	shr    ecx,0x8
c0023dac:	83 e1 0f             	and    ecx,0xf
c0023daf:	39 c8                	cmp    eax,ecx
c0023db1:	74 0a                	je     c0023dbd <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c0023db3:	f6 c2 01             	test   dl,0x1
c0023db6:	74 18                	je     c0023dd0 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x44>
c0023db8:	d1 ea                	shr    edx,1
c0023dba:	40                   	inc    eax
c0023dbb:	eb f2                	jmp    c0023daf <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x23>
c0023dbd:	83 ec 0c             	sub    esp,0xc
c0023dc0:	68 0c d0 02 c0       	push   0xc002d00c
c0023dc5:	e8 cb 68 ff ff       	call   c001a695 <Krnl::panic(char const*)>
c0023dca:	83 c4 10             	add    esp,0x10
c0023dcd:	83 c8 ff             	or     eax,0xffffffff
c0023dd0:	83 c4 0c             	add    esp,0xc
c0023dd3:	c3                   	ret    

c0023dd4 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c0023dd4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0023dd8:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c0023ddb:	89 c2                	mov    edx,eax
c0023ddd:	c1 ea 08             	shr    edx,0x8
c0023de0:	83 e2 0f             	and    edx,0xf
c0023de3:	fe ca                	dec    dl
c0023de5:	75 31                	jne    c0023e18 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c0023de7:	83 e0 0f             	and    eax,0xf
c0023dea:	3c 03                	cmp    al,0x3
c0023dec:	75 2a                	jne    c0023e18 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c0023dee:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c0023df1:	b8 02 00 00 00       	mov    eax,0x2
c0023df6:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c0023dfc:	74 1c                	je     c0023e1a <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c0023dfe:	b8 04 00 00 00       	mov    eax,0x4
c0023e03:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c0023e09:	74 0f                	je     c0023e1a <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c0023e0b:	31 c0                	xor    eax,eax
c0023e0d:	83 fa 03             	cmp    edx,0x3
c0023e10:	0f 94 c0             	sete   al
c0023e13:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c0023e17:	c3                   	ret    
c0023e18:	31 c0                	xor    eax,eax
c0023e1a:	c3                   	ret    
c0023e1b:	90                   	nop

c0023e1c <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c0023e1c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0023e20:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023e23:	0f ba e2 0f          	bt     edx,0xf
c0023e27:	72 f7                	jb     c0023e20 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c0023e29:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023e2c:	83 ca 10             	or     edx,0x10
c0023e2f:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0023e32:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023e35:	83 ca 01             	or     edx,0x1
c0023e38:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0023e3b:	c3                   	ret    

c0023e3c <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c0023e3c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0023e40:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023e43:	83 e2 fe             	and    edx,0xfffffffe
c0023e46:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0023e49:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023e4c:	83 e2 ef             	and    edx,0xffffffef
c0023e4f:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0023e52:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023e55:	0f ba e2 0e          	bt     edx,0xe
c0023e59:	72 f7                	jb     c0023e52 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c0023e5b:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023e5e:	0f ba e2 0f          	bt     edx,0xf
c0023e62:	72 ee                	jb     c0023e52 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c0023e64:	c3                   	ret    
c0023e65:	90                   	nop

c0023e66 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c0023e66:	55                   	push   ebp
c0023e67:	57                   	push   edi
c0023e68:	56                   	push   esi
c0023e69:	53                   	push   ebx
c0023e6a:	83 ec 1c             	sub    esp,0x1c
c0023e6d:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0023e71:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0023e75:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0023e79:	53                   	push   ebx
c0023e7a:	89 fd                	mov    ebp,edi
c0023e7c:	56                   	push   esi
c0023e7d:	c1 e5 0a             	shl    ebp,0xa
c0023e80:	e8 b7 ff ff ff       	call   c0023e3c <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c0023e85:	83 ec 0c             	sub    esp,0xc
c0023e88:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c0023e8e:	01 e8                	add    eax,ebp
c0023e90:	89 03                	mov    DWORD PTR [ebx],eax
c0023e92:	8b 03                	mov    eax,DWORD PTR [ebx]
c0023e94:	68 00 04 00 00       	push   0x400
c0023e99:	6a 00                	push   0x0
c0023e9b:	50                   	push   eax
c0023e9c:	e8 d7 c8 fd ff       	call   c0000778 <memset>
c0023ea1:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c0023ea7:	89 fa                	mov    edx,edi
c0023ea9:	01 e8                	add    eax,ebp
c0023eab:	c1 e7 0d             	shl    edi,0xd
c0023eae:	89 03                	mov    DWORD PTR [ebx],eax
c0023eb0:	c1 e2 08             	shl    edx,0x8
c0023eb3:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0023eba:	81 c2 00 80 00 00    	add    edx,0x8000
c0023ec0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0023ec4:	89 d0                	mov    eax,edx
c0023ec6:	83 c4 1c             	add    esp,0x1c
c0023ec9:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0023ecf:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0023ed2:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0023ed5:	68 00 01 00 00       	push   0x100
c0023eda:	6a 00                	push   0x0
c0023edc:	50                   	push   eax
c0023edd:	e8 96 c8 fd ff       	call   c0000778 <memset>
c0023ee2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0023ee6:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c0023eec:	03 96 5c 01 00 00    	add    edx,DWORD PTR [esi+0x15c]
c0023ef2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0023ef6:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0023ef9:	83 c4 10             	add    esp,0x10
c0023efc:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0023f03:	31 ff                	xor    edi,edi
c0023f05:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c0023f0b:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c0023f11:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0023f15:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0023f1b:	83 c5 20             	add    ebp,0x20
c0023f1e:	01 f8                	add    eax,edi
c0023f20:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0023f23:	52                   	push   edx
c0023f24:	68 00 01 00 00       	push   0x100
c0023f29:	6a 00                	push   0x0
c0023f2b:	50                   	push   eax
c0023f2c:	e8 47 c8 fd ff       	call   c0000778 <memset>
c0023f31:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0023f35:	83 c4 10             	add    esp,0x10
c0023f38:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c0023f3e:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0023f45:	01 f8                	add    eax,edi
c0023f47:	81 c7 00 01 00 00    	add    edi,0x100
c0023f4d:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0023f50:	81 ff 00 20 00 00    	cmp    edi,0x2000
c0023f56:	75 b3                	jne    c0023f0b <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa5>
c0023f58:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c0023f5c:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0023f60:	83 c4 1c             	add    esp,0x1c
c0023f63:	5b                   	pop    ebx
c0023f64:	5e                   	pop    esi
c0023f65:	5f                   	pop    edi
c0023f66:	5d                   	pop    ebp
c0023f67:	e9 b0 fe ff ff       	jmp    c0023e1c <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>

c0023f6c <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c0023f6c:	55                   	push   ebp
c0023f6d:	57                   	push   edi
c0023f6e:	56                   	push   esi
c0023f6f:	53                   	push   ebx
c0023f70:	31 db                	xor    ebx,ebx
c0023f72:	83 ec 0c             	sub    esp,0xc
c0023f75:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0023f79:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0023f7d:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c0023f80:	f7 c7 01 00 00 00    	test   edi,0x1
c0023f86:	0f 84 aa 00 00 00    	je     c0024036 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xca>
c0023f8c:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0023f90:	89 d8                	mov    eax,ebx
c0023f92:	c1 e0 07             	shl    eax,0x7
c0023f95:	8d ac 02 00 01 00 00 	lea    ebp,[edx+eax*1+0x100]
c0023f9c:	55                   	push   ebp
c0023f9d:	56                   	push   esi
c0023f9e:	e8 31 fe ff ff       	call   c0023dd4 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c0023fa3:	5a                   	pop    edx
c0023fa4:	83 f8 01             	cmp    eax,0x1
c0023fa7:	59                   	pop    ecx
c0023fa8:	75 30                	jne    c0023fda <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x6e>
c0023faa:	50                   	push   eax
c0023fab:	50                   	push   eax
c0023fac:	53                   	push   ebx
c0023fad:	68 31 d0 02 c0       	push   0xc002d031
c0023fb2:	e8 2c f0 fe ff       	call   c0012fe3 <Dbg::kprintf(char const*, ...)>
c0023fb7:	83 c4 0c             	add    esp,0xc
c0023fba:	53                   	push   ebx
c0023fbb:	55                   	push   ebp
c0023fbc:	56                   	push   esi
c0023fbd:	e8 a4 fe ff ff       	call   c0023e66 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0023fc2:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c0023fc9:	e8 16 b9 fe ff       	call   c000f8e4 <malloc>
c0023fce:	89 c5                	mov    ebp,eax
c0023fd0:	89 04 24             	mov    DWORD PTR [esp],eax
c0023fd3:	e8 60 0d 00 00       	call   c0024d38 <SATA::SATA()>
c0023fd8:	eb 33                	jmp    c002400d <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xa1>
c0023fda:	83 f8 04             	cmp    eax,0x4
c0023fdd:	75 47                	jne    c0024026 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xba>
c0023fdf:	50                   	push   eax
c0023fe0:	50                   	push   eax
c0023fe1:	53                   	push   ebx
c0023fe2:	68 48 d0 02 c0       	push   0xc002d048
c0023fe7:	e8 f7 ef fe ff       	call   c0012fe3 <Dbg::kprintf(char const*, ...)>
c0023fec:	83 c4 0c             	add    esp,0xc
c0023fef:	53                   	push   ebx
c0023ff0:	55                   	push   ebp
c0023ff1:	56                   	push   esi
c0023ff2:	e8 6f fe ff ff       	call   c0023e66 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0023ff7:	c7 04 24 80 01 00 00 	mov    DWORD PTR [esp],0x180
c0023ffe:	e8 e1 b8 fe ff       	call   c000f8e4 <malloc>
c0024003:	89 c5                	mov    ebp,eax
c0024005:	89 04 24             	mov    DWORD PTR [esp],eax
c0024008:	e8 d7 10 00 00       	call   c00250e4 <SATAPI::SATAPI()>
c002400d:	5a                   	pop    edx
c002400e:	59                   	pop    ecx
c002400f:	55                   	push   ebp
c0024010:	56                   	push   esi
c0024011:	e8 f4 03 ff ff       	call   c001440a <Device::addChild(Device*)>
c0024016:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0024019:	56                   	push   esi
c002401a:	6a 00                	push   0x0
c002401c:	53                   	push   ebx
c002401d:	55                   	push   ebp
c002401e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0024021:	83 c4 20             	add    esp,0x20
c0024024:	eb 10                	jmp    c0024036 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xca>
c0024026:	50                   	push   eax
c0024027:	50                   	push   eax
c0024028:	53                   	push   ebx
c0024029:	68 61 d0 02 c0       	push   0xc002d061
c002402e:	e8 b0 ef fe ff       	call   c0012fe3 <Dbg::kprintf(char const*, ...)>
c0024033:	83 c4 10             	add    esp,0x10
c0024036:	d1 ef                	shr    edi,1
c0024038:	43                   	inc    ebx
c0024039:	83 fb 20             	cmp    ebx,0x20
c002403c:	0f 85 3e ff ff ff    	jne    c0023f80 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c0024042:	83 c4 0c             	add    esp,0xc
c0024045:	5b                   	pop    ebx
c0024046:	5e                   	pop    esi
c0024047:	5f                   	pop    edi
c0024048:	5d                   	pop    ebp
c0024049:	c3                   	ret    

c002404a <SATABus::open(int, int, void*)>:
c002404a:	83 ec 14             	sub    esp,0x14
c002404d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0024051:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c0024057:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c002405d:	52                   	push   edx
c002405e:	50                   	push   eax
c002405f:	e8 08 ff ff ff       	call   c0023f6c <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c0024064:	31 c0                	xor    eax,eax
c0024066:	83 c4 1c             	add    esp,0x1c
c0024069:	c3                   	ret    

c002406a <ATA::close(int, int, void*)>:
c002406a:	83 ec 0c             	sub    esp,0xc
c002406d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024071:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0024077:	85 c0                	test   eax,eax
c0024079:	74 0c                	je     c0024087 <ATA::close(int, int, void*)+0x1d>
c002407b:	83 ec 0c             	sub    esp,0xc
c002407e:	8b 10                	mov    edx,DWORD PTR [eax]
c0024080:	50                   	push   eax
c0024081:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0024084:	83 c4 10             	add    esp,0x10
c0024087:	31 c0                	xor    eax,eax
c0024089:	83 c4 0c             	add    esp,0xc
c002408c:	c3                   	ret    
c002408d:	90                   	nop

c002408e <ATA::powerSaving(PowerSavingLevel)>:
c002408e:	c3                   	ret    
c002408f:	90                   	nop

c0024090 <ATA::ATA()>:
c0024090:	83 ec 0c             	sub    esp,0xc
c0024093:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024097:	83 ec 04             	sub    esp,0x4
c002409a:	68 00 02 00 00       	push   0x200
c002409f:	68 49 d1 02 c0       	push   0xc002d149
c00240a4:	50                   	push   eax
c00240a5:	e8 84 07 ff ff       	call   c001482e <PhysicalDisk::PhysicalDisk(char const*, int)>
c00240aa:	83 c4 10             	add    esp,0x10
c00240ad:	ba cc d0 02 c0       	mov    edx,0xc002d0cc
c00240b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00240b6:	89 10                	mov    DWORD PTR [eax],edx
c00240b8:	90                   	nop
c00240b9:	83 c4 0c             	add    esp,0xc
c00240bc:	c3                   	ret    
c00240bd:	90                   	nop

c00240be <ATA::flush(bool)>:
c00240be:	53                   	push   ebx
c00240bf:	83 ec 08             	sub    esp,0x8
c00240c2:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c00240c7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00240cb:	19 c0                	sbb    eax,eax
c00240cd:	83 e0 fd             	and    eax,0xfffffffd
c00240d0:	05 ea 00 00 00       	add    eax,0xea
c00240d5:	50                   	push   eax
c00240d6:	6a 07                	push   0x7
c00240d8:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00240df:	50                   	push   eax
c00240e0:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00240e6:	e8 dd ef ff ff       	call   c00230c8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00240eb:	83 c4 0c             	add    esp,0xc
c00240ee:	6a 00                	push   0x0
c00240f0:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00240f7:	50                   	push   eax
c00240f8:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00240fe:	e8 71 fb ff ff       	call   c0023c74 <IDE::polling(unsigned char, unsigned int)>
c0024103:	83 c4 18             	add    esp,0x18
c0024106:	5b                   	pop    ebx
c0024107:	c3                   	ret    

c0024108 <ATA::readyForCommand()>:
c0024108:	56                   	push   esi
c0024109:	53                   	push   ebx
c002410a:	31 db                	xor    ebx,ebx
c002410c:	50                   	push   eax
c002410d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0024111:	50                   	push   eax
c0024112:	6a 0c                	push   0xc
c0024114:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c002411b:	50                   	push   eax
c002411c:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c0024122:	e8 61 f0 ff ff       	call   c0023188 <IDE::read(unsigned char, unsigned char)>
c0024127:	83 c4 10             	add    esp,0x10
c002412a:	a8 88                	test   al,0x88
c002412c:	74 23                	je     c0024151 <ATA::readyForCommand()+0x49>
c002412e:	43                   	inc    ebx
c002412f:	83 fb 63             	cmp    ebx,0x63
c0024132:	7e dd                	jle    c0024111 <ATA::readyForCommand()+0x9>
c0024134:	51                   	push   ecx
c0024135:	51                   	push   ecx
c0024136:	6a 00                	push   0x0
c0024138:	68 40 42 0f 00       	push   0xf4240
c002413d:	e8 c8 a2 ff ff       	call   c001e40a <nanoSleep(unsigned long long)>
c0024142:	83 c4 10             	add    esp,0x10
c0024145:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c002414b:	75 c4                	jne    c0024111 <ATA::readyForCommand()+0x9>
c002414d:	31 c0                	xor    eax,eax
c002414f:	eb 02                	jmp    c0024153 <ATA::readyForCommand()+0x4b>
c0024151:	b0 01                	mov    al,0x1
c0024153:	5a                   	pop    edx
c0024154:	5b                   	pop    ebx
c0024155:	5e                   	pop    esi
c0024156:	c3                   	ret    
c0024157:	90                   	nop

c0024158 <ATA::access(unsigned long long, int, void*, bool)>:
c0024158:	55                   	push   ebp
c0024159:	57                   	push   edi
c002415a:	56                   	push   esi
c002415b:	53                   	push   ebx
c002415c:	83 ec 2c             	sub    esp,0x2c
c002415f:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0024163:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0024167:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c002416b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c002416f:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0024173:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0024177:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c002417b:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0024181:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0024185:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c002418b:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c002418f:	c1 e0 06             	shl    eax,0x6
c0024192:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c002419a:	74 5d                	je     c00241f9 <ATA::access(unsigned long long, int, void*, bool)+0xa1>
c002419c:	89 fa                	mov    edx,edi
c002419e:	89 f0                	mov    eax,esi
c00241a0:	0f ac d0 1c          	shrd   eax,edx,0x1c
c00241a4:	c1 ea 1c             	shr    edx,0x1c
c00241a7:	89 d1                	mov    ecx,edx
c00241a9:	09 c1                	or     ecx,eax
c00241ab:	74 25                	je     c00241d2 <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c00241ad:	31 ed                	xor    ebp,ebp
c00241af:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c00241b6:	89 fa                	mov    edx,edi
c00241b8:	89 f0                	mov    eax,esi
c00241ba:	0f ad d0             	shrd   eax,edx,cl
c00241bd:	d3 ea                	shr    edx,cl
c00241bf:	f6 c1 20             	test   cl,0x20
c00241c2:	74 02                	je     c00241c6 <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c00241c4:	89 d0                	mov    eax,edx
c00241c6:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c00241ca:	45                   	inc    ebp
c00241cb:	83 fd 06             	cmp    ebp,0x6
c00241ce:	75 df                	jne    c00241af <ATA::access(unsigned long long, int, void*, bool)+0x57>
c00241d0:	eb 76                	jmp    c0024248 <ATA::access(unsigned long long, int, void*, bool)+0xf0>
c00241d2:	89 f0                	mov    eax,esi
c00241d4:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c00241d9:	89 fa                	mov    edx,edi
c00241db:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c00241e2:	0f ac d0 10          	shrd   eax,edx,0x10
c00241e6:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c00241eb:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c00241ef:	c1 ee 18             	shr    esi,0x18
c00241f2:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c00241f7:	eb 56                	jmp    c002424f <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c00241f9:	6a 00                	push   0x0
c00241fb:	6a 3f                	push   0x3f
c00241fd:	57                   	push   edi
c00241fe:	56                   	push   esi
c00241ff:	e8 98 29 00 00       	call   c0026b9c <__umoddi3>
c0024204:	83 c4 10             	add    esp,0x10
c0024207:	40                   	inc    eax
c0024208:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c002420c:	6a 00                	push   0x0
c002420e:	68 f0 03 00 00       	push   0x3f0
c0024213:	57                   	push   edi
c0024214:	56                   	push   esi
c0024215:	e8 82 28 00 00       	call   c0026a9c <__udivdi3>
c002421a:	83 c4 10             	add    esp,0x10
c002421d:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c0024222:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c0024229:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c002422e:	6a 00                	push   0x0
c0024230:	6a 3f                	push   0x3f
c0024232:	57                   	push   edi
c0024233:	56                   	push   esi
c0024234:	e8 63 28 00 00       	call   c0026a9c <__udivdi3>
c0024239:	83 c4 10             	add    esp,0x10
c002423c:	89 c6                	mov    esi,eax
c002423e:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c0024243:	83 e6 0f             	and    esi,0xf
c0024246:	eb 07                	jmp    c002424f <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c0024248:	31 f6                	xor    esi,esi
c002424a:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c002424f:	bf 01 00 00 00       	mov    edi,0x1
c0024254:	50                   	push   eax
c0024255:	6a 00                	push   0x0
c0024257:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002425e:	50                   	push   eax
c002425f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0024263:	e8 6c f0 ff ff       	call   c00232d4 <IDE::enableIRQs(unsigned char, bool)>
c0024268:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002426b:	e8 98 fe ff ff       	call   c0024108 <ATA::readyForCommand()>
c0024270:	83 c4 10             	add    esp,0x10
c0024273:	84 c0                	test   al,al
c0024275:	0f 84 5a 02 00 00    	je     c00244d5 <ATA::access(unsigned long long, int, void*, bool)+0x37d>
c002427b:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c0024281:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0024287:	c1 e0 04             	shl    eax,0x4
c002428a:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c0024291:	09 c6                	or     esi,eax
c0024293:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c0024298:	75 05                	jne    c002429f <ATA::access(unsigned long long, int, void*, bool)+0x147>
c002429a:	83 ce a0             	or     esi,0xffffffa0
c002429d:	eb 03                	jmp    c00242a2 <ATA::access(unsigned long long, int, void*, bool)+0x14a>
c002429f:	83 ce e0             	or     esi,0xffffffe0
c00242a2:	89 f0                	mov    eax,esi
c00242a4:	0f b6 f0             	movzx  esi,al
c00242a7:	56                   	push   esi
c00242a8:	6a 06                	push   0x6
c00242aa:	51                   	push   ecx
c00242ab:	52                   	push   edx
c00242ac:	e8 17 ee ff ff       	call   c00230c8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00242b1:	83 c4 10             	add    esp,0x10
c00242b4:	6a 00                	push   0x0
c00242b6:	6a 01                	push   0x1
c00242b8:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00242bf:	50                   	push   eax
c00242c0:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00242c6:	e8 fd ed ff ff       	call   c00230c8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00242cb:	83 c4 10             	add    esp,0x10
c00242ce:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c00242d3:	75 6e                	jne    c0024343 <ATA::access(unsigned long long, int, void*, bool)+0x1eb>
c00242d5:	6a 00                	push   0x0
c00242d7:	6a 08                	push   0x8
c00242d9:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00242e0:	50                   	push   eax
c00242e1:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00242e7:	e8 dc ed ff ff       	call   c00230c8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00242ec:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c00242f1:	50                   	push   eax
c00242f2:	6a 09                	push   0x9
c00242f4:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00242fb:	50                   	push   eax
c00242fc:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024302:	e8 c1 ed ff ff       	call   c00230c8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024307:	83 c4 20             	add    esp,0x20
c002430a:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c002430f:	50                   	push   eax
c0024310:	6a 0a                	push   0xa
c0024312:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024319:	50                   	push   eax
c002431a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024320:	e8 a3 ed ff ff       	call   c00230c8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024325:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c002432a:	50                   	push   eax
c002432b:	6a 0b                	push   0xb
c002432d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024334:	50                   	push   eax
c0024335:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002433b:	e8 88 ed ff ff       	call   c00230c8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024340:	83 c4 20             	add    esp,0x20
c0024343:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c0024348:	50                   	push   eax
c0024349:	6a 02                	push   0x2
c002434b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024352:	50                   	push   eax
c0024353:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024359:	e8 6a ed ff ff       	call   c00230c8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002435e:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c0024363:	50                   	push   eax
c0024364:	6a 03                	push   0x3
c0024366:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002436d:	50                   	push   eax
c002436e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024374:	e8 4f ed ff ff       	call   c00230c8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024379:	83 c4 20             	add    esp,0x20
c002437c:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c0024381:	50                   	push   eax
c0024382:	6a 04                	push   0x4
c0024384:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002438b:	50                   	push   eax
c002438c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024392:	e8 31 ed ff ff       	call   c00230c8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024397:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002439c:	50                   	push   eax
c002439d:	6a 05                	push   0x5
c002439f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00243a6:	50                   	push   eax
c00243a7:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00243ad:	e8 16 ed ff ff       	call   c00230c8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00243b2:	83 c4 20             	add    esp,0x20
c00243b5:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c00243ba:	0f 94 c0             	sete   al
c00243bd:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c00243c2:	74 09                	je     c00243cd <ATA::access(unsigned long long, int, void*, bool)+0x275>
c00243c4:	8d 04 85 30 00 00 00 	lea    eax,[eax*4+0x30]
c00243cb:	eb 07                	jmp    c00243d4 <ATA::access(unsigned long long, int, void*, bool)+0x27c>
c00243cd:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c00243d4:	0f b6 c0             	movzx  eax,al
c00243d7:	50                   	push   eax
c00243d8:	6a 07                	push   0x7
c00243da:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00243e1:	50                   	push   eax
c00243e2:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00243e8:	e8 db ec ff ff       	call   c00230c8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00243ed:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c00243f1:	83 c4 10             	add    esp,0x10
c00243f4:	85 f6                	test   esi,esi
c00243f6:	0f 84 ba 00 00 00    	je     c00244b6 <ATA::access(unsigned long long, int, void*, bool)+0x35e>
c00243fc:	50                   	push   eax
c00243fd:	6a 01                	push   0x1
c00243ff:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024406:	50                   	push   eax
c0024407:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002440d:	e8 62 f8 ff ff       	call   c0023c74 <IDE::polling(unsigned char, unsigned int)>
c0024412:	83 c4 10             	add    esp,0x10
c0024415:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c002441b:	84 c0                	test   al,al
c002441d:	74 2c                	je     c002444b <ATA::access(unsigned long long, int, void*, bool)+0x2f3>
c002441f:	0f b6 f8             	movzx  edi,al
c0024422:	0f b6 d2             	movzx  edx,dl
c0024425:	57                   	push   edi
c0024426:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c002442d:	50                   	push   eax
c002442e:	52                   	push   edx
c002442f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024435:	e8 a4 f6 ff ff       	call   c0023ade <IDE::printError(unsigned char, unsigned char, unsigned char)>
c002443a:	c7 04 24 a4 d0 02 c0 	mov    DWORD PTR [esp],0xc002d0a4
c0024441:	e8 9d eb fe ff       	call   c0012fe3 <Dbg::kprintf(char const*, ...)>
c0024446:	e9 87 00 00 00       	jmp    c00244d2 <ATA::access(unsigned long long, int, void*, bool)+0x37a>
c002444b:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0024450:	74 33                	je     c0024485 <ATA::access(unsigned long long, int, void*, bool)+0x32d>
c0024452:	31 ed                	xor    ebp,ebp
c0024454:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0024458:	66 8b 3c 68          	mov    di,WORD PTR [eax+ebp*2]
c002445c:	50                   	push   eax
c002445d:	50                   	push   eax
c002445e:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024465:	50                   	push   eax
c0024466:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002446c:	e8 45 ec ff ff       	call   c00230b6 <IDE::getBase(unsigned char)>
c0024471:	89 c2                	mov    edx,eax
c0024473:	89 f8                	mov    eax,edi
c0024475:	66 ef                	out    dx,ax
c0024477:	45                   	inc    ebp
c0024478:	83 c4 10             	add    esp,0x10
c002447b:	81 fd 00 01 00 00    	cmp    ebp,0x100
c0024481:	75 d1                	jne    c0024454 <ATA::access(unsigned long long, int, void*, bool)+0x2fc>
c0024483:	eb 23                	jmp    c00244a8 <ATA::access(unsigned long long, int, void*, bool)+0x350>
c0024485:	0f b6 d2             	movzx  edx,dl
c0024488:	51                   	push   ecx
c0024489:	51                   	push   ecx
c002448a:	52                   	push   edx
c002448b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024491:	e8 20 ec ff ff       	call   c00230b6 <IDE::getBase(unsigned char)>
c0024496:	b9 00 01 00 00       	mov    ecx,0x100
c002449b:	89 c2                	mov    edx,eax
c002449d:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c00244a1:	fc                   	cld    
c00244a2:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c00244a5:	83 c4 10             	add    esp,0x10
c00244a8:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c00244b0:	4e                   	dec    esi
c00244b1:	e9 3e ff ff ff       	jmp    c00243f4 <ATA::access(unsigned long long, int, void*, bool)+0x29c>
c00244b6:	31 ff                	xor    edi,edi
c00244b8:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c00244bd:	74 16                	je     c00244d5 <ATA::access(unsigned long long, int, void*, bool)+0x37d>
c00244bf:	50                   	push   eax
c00244c0:	50                   	push   eax
c00244c1:	31 c0                	xor    eax,eax
c00244c3:	80 7c 24 16 02       	cmp    BYTE PTR [esp+0x16],0x2
c00244c8:	0f 94 c0             	sete   al
c00244cb:	50                   	push   eax
c00244cc:	53                   	push   ebx
c00244cd:	e8 ec fb ff ff       	call   c00240be <ATA::flush(bool)>
c00244d2:	83 c4 10             	add    esp,0x10
c00244d5:	83 c4 2c             	add    esp,0x2c
c00244d8:	89 f8                	mov    eax,edi
c00244da:	5b                   	pop    ebx
c00244db:	5e                   	pop    esi
c00244dc:	5f                   	pop    edi
c00244dd:	5d                   	pop    ebp
c00244de:	c3                   	ret    
c00244df:	90                   	nop

c00244e0 <ATA::read(unsigned long long, int, void*)>:
c00244e0:	57                   	push   edi
c00244e1:	b8 04 00 00 00       	mov    eax,0x4
c00244e6:	56                   	push   esi
c00244e7:	53                   	push   ebx
c00244e8:	83 ec 10             	sub    esp,0x10
c00244eb:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00244ef:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00244f3:	8d 4b ff             	lea    ecx,[ebx-0x1]
c00244f6:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00244fa:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00244fe:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c0024504:	77 3b                	ja     c0024541 <ATA::read(unsigned long long, int, void*)+0x61>
c0024506:	b8 06 00 00 00       	mov    eax,0x6
c002450b:	85 d2                	test   edx,edx
c002450d:	74 32                	je     c0024541 <ATA::read(unsigned long long, int, void*)+0x61>
c002450f:	50                   	push   eax
c0024510:	50                   	push   eax
c0024511:	6a 00                	push   0x0
c0024513:	52                   	push   edx
c0024514:	53                   	push   ebx
c0024515:	57                   	push   edi
c0024516:	56                   	push   esi
c0024517:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c002451b:	e8 38 fc ff ff       	call   c0024158 <ATA::access(unsigned long long, int, void*, bool)>
c0024520:	83 c4 20             	add    esp,0x20
c0024523:	85 c0                	test   eax,eax
c0024525:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0024529:	75 11                	jne    c002453c <ATA::read(unsigned long long, int, void*)+0x5c>
c002452b:	01 1d 48 2a 03 c0    	add    DWORD PTR ds:0xc0032a48,ebx
c0024531:	e8 42 c5 fe ff       	call   c0010a78 <VgaText::updateDiskUsage()>
c0024536:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002453a:	eb 05                	jmp    c0024541 <ATA::read(unsigned long long, int, void*)+0x61>
c002453c:	b8 01 00 00 00       	mov    eax,0x1
c0024541:	83 c4 10             	add    esp,0x10
c0024544:	5b                   	pop    ebx
c0024545:	5e                   	pop    esi
c0024546:	5f                   	pop    edi
c0024547:	c3                   	ret    

c0024548 <ATA::write(unsigned long long, int, void*)>:
c0024548:	57                   	push   edi
c0024549:	b8 04 00 00 00       	mov    eax,0x4
c002454e:	56                   	push   esi
c002454f:	53                   	push   ebx
c0024550:	83 ec 10             	sub    esp,0x10
c0024553:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0024557:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c002455b:	8d 4b ff             	lea    ecx,[ebx-0x1]
c002455e:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0024562:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0024566:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c002456c:	77 3b                	ja     c00245a9 <ATA::write(unsigned long long, int, void*)+0x61>
c002456e:	b8 06 00 00 00       	mov    eax,0x6
c0024573:	85 d2                	test   edx,edx
c0024575:	74 32                	je     c00245a9 <ATA::write(unsigned long long, int, void*)+0x61>
c0024577:	50                   	push   eax
c0024578:	50                   	push   eax
c0024579:	6a 01                	push   0x1
c002457b:	52                   	push   edx
c002457c:	53                   	push   ebx
c002457d:	57                   	push   edi
c002457e:	56                   	push   esi
c002457f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0024583:	e8 d0 fb ff ff       	call   c0024158 <ATA::access(unsigned long long, int, void*, bool)>
c0024588:	83 c4 20             	add    esp,0x20
c002458b:	85 c0                	test   eax,eax
c002458d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0024591:	75 11                	jne    c00245a4 <ATA::write(unsigned long long, int, void*)+0x5c>
c0024593:	01 1d 44 2a 03 c0    	add    DWORD PTR ds:0xc0032a44,ebx
c0024599:	e8 da c4 fe ff       	call   c0010a78 <VgaText::updateDiskUsage()>
c002459e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00245a2:	eb 05                	jmp    c00245a9 <ATA::write(unsigned long long, int, void*)+0x61>
c00245a4:	b8 01 00 00 00       	mov    eax,0x1
c00245a9:	83 c4 10             	add    esp,0x10
c00245ac:	5b                   	pop    ebx
c00245ad:	5e                   	pop    esi
c00245ae:	5f                   	pop    edi
c00245af:	c3                   	ret    

c00245b0 <ATA::detectCHS()>:
c00245b0:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00245b4:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c00245ba:	c1 e0 06             	shl    eax,0x6
c00245bd:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c00245c3:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c00245cd:	c7 44 24 04 af d0 02 c0 	mov    DWORD PTR [esp+0x4],0xc002d0af
c00245d5:	e9 bb 60 ff ff       	jmp    c001a695 <Krnl::panic(char const*)>

c00245da <ATA::open(int, int, void*)>:
c00245da:	53                   	push   ebx
c00245db:	83 ec 08             	sub    esp,0x8
c00245de:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00245e2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00245e6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00245ea:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c00245f0:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c00245f6:	c1 e0 06             	shl    eax,0x6
c00245f9:	01 d0                	add    eax,edx
c00245fb:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c0024602:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c0024608:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c002460f:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c0024619:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c002461f:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c0024626:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c002462d:	75 0c                	jne    c002463b <ATA::open(int, int, void*)+0x61>
c002462f:	83 ec 0c             	sub    esp,0xc
c0024632:	53                   	push   ebx
c0024633:	e8 78 ff ff ff       	call   c00245b0 <ATA::detectCHS()>
c0024638:	83 c4 10             	add    esp,0x10
c002463b:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0024641:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c0024647:	c1 e0 06             	shl    eax,0x6
c002464a:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c0024651:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c002465b:	d1 e8                	shr    eax,1
c002465d:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c0024663:	6a 04                	push   0x4
c0024665:	6a 0c                	push   0xc
c0024667:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002466e:	50                   	push   eax
c002466f:	52                   	push   edx
c0024670:	e8 53 ea ff ff       	call   c00230c8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024675:	90                   	nop
c0024676:	90                   	nop
c0024677:	6a 00                	push   0x0
c0024679:	6a 0c                	push   0xc
c002467b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024682:	50                   	push   eax
c0024683:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024689:	e8 3a ea ff ff       	call   c00230c8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002468e:	83 c4 14             	add    esp,0x14
c0024691:	53                   	push   ebx
c0024692:	e8 ff 01 ff ff       	call   c0014896 <PhysicalDisk::startCache()>
c0024697:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002469a:	e8 7d 23 ff ff       	call   c0016a1c <createPartitionsForDisk(PhysicalDisk*)>
c002469f:	31 c0                	xor    eax,eax
c00246a1:	83 c4 18             	add    esp,0x18
c00246a4:	5b                   	pop    ebx
c00246a5:	c3                   	ret    

c00246a6 <ATAPI::write(unsigned long long, int, void*)>:
c00246a6:	b8 03 00 00 00       	mov    eax,0x3
c00246ab:	c3                   	ret    

c00246ac <ATAPI::close(int, int, void*)>:
c00246ac:	83 ec 0c             	sub    esp,0xc
c00246af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00246b3:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00246b9:	85 c0                	test   eax,eax
c00246bb:	74 0c                	je     c00246c9 <ATAPI::close(int, int, void*)+0x1d>
c00246bd:	83 ec 0c             	sub    esp,0xc
c00246c0:	8b 10                	mov    edx,DWORD PTR [eax]
c00246c2:	50                   	push   eax
c00246c3:	ff 52 04             	call   DWORD PTR [edx+0x4]
c00246c6:	83 c4 10             	add    esp,0x10
c00246c9:	31 c0                	xor    eax,eax
c00246cb:	83 c4 0c             	add    esp,0xc
c00246ce:	c3                   	ret    
c00246cf:	90                   	nop

c00246d0 <ATAPI::ATAPI()>:
c00246d0:	83 ec 0c             	sub    esp,0xc
c00246d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00246d7:	83 ec 04             	sub    esp,0x4
c00246da:	68 00 08 00 00       	push   0x800
c00246df:	68 e9 d1 02 c0       	push   0xc002d1e9
c00246e4:	50                   	push   eax
c00246e5:	e8 44 01 ff ff       	call   c001482e <PhysicalDisk::PhysicalDisk(char const*, int)>
c00246ea:	83 c4 10             	add    esp,0x10
c00246ed:	ba 04 d1 02 c0       	mov    edx,0xc002d104
c00246f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00246f6:	89 10                	mov    DWORD PTR [eax],edx
c00246f8:	90                   	nop
c00246f9:	83 c4 0c             	add    esp,0xc
c00246fc:	c3                   	ret    
c00246fd:	90                   	nop

c00246fe <ATAPI::readyForCommand()>:
c00246fe:	56                   	push   esi
c00246ff:	53                   	push   ebx
c0024700:	31 db                	xor    ebx,ebx
c0024702:	50                   	push   eax
c0024703:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0024707:	50                   	push   eax
c0024708:	6a 0c                	push   0xc
c002470a:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c0024711:	50                   	push   eax
c0024712:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c0024718:	e8 6b ea ff ff       	call   c0023188 <IDE::read(unsigned char, unsigned char)>
c002471d:	83 c4 10             	add    esp,0x10
c0024720:	a8 88                	test   al,0x88
c0024722:	74 23                	je     c0024747 <ATAPI::readyForCommand()+0x49>
c0024724:	43                   	inc    ebx
c0024725:	83 fb 63             	cmp    ebx,0x63
c0024728:	7e dd                	jle    c0024707 <ATAPI::readyForCommand()+0x9>
c002472a:	51                   	push   ecx
c002472b:	51                   	push   ecx
c002472c:	6a 00                	push   0x0
c002472e:	68 40 42 0f 00       	push   0xf4240
c0024733:	e8 d2 9c ff ff       	call   c001e40a <nanoSleep(unsigned long long)>
c0024738:	83 c4 10             	add    esp,0x10
c002473b:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c0024741:	75 c4                	jne    c0024707 <ATAPI::readyForCommand()+0x9>
c0024743:	31 c0                	xor    eax,eax
c0024745:	eb 02                	jmp    c0024749 <ATAPI::readyForCommand()+0x4b>
c0024747:	b0 01                	mov    al,0x1
c0024749:	5a                   	pop    edx
c002474a:	5b                   	pop    ebx
c002474b:	5e                   	pop    esi
c002474c:	c3                   	ret    
c002474d:	90                   	nop

c002474e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c002474e:	55                   	push   ebp
c002474f:	57                   	push   edi
c0024750:	56                   	push   esi
c0024751:	53                   	push   ebx
c0024752:	83 ec 20             	sub    esp,0x20
c0024755:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0024759:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c002475d:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0024761:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0024765:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0024769:	6a 01                	push   0x1
c002476b:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024772:	50                   	push   eax
c0024773:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024779:	e8 56 eb ff ff       	call   c00232d4 <IDE::enableIRQs(unsigned char, bool)>
c002477e:	5e                   	pop    esi
c002477f:	58                   	pop    eax
c0024780:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024787:	50                   	push   eax
c0024788:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002478e:	e8 0f e9 ff ff       	call   c00230a2 <IDE::prepareInterrupt(unsigned char)>
c0024793:	89 3c 24             	mov    DWORD PTR [esp],edi
c0024796:	e8 63 ff ff ff       	call   c00246fe <ATAPI::readyForCommand()>
c002479b:	83 c4 10             	add    esp,0x10
c002479e:	84 c0                	test   al,al
c00247a0:	75 0a                	jne    c00247ac <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c00247a2:	bb 01 00 00 00       	mov    ebx,0x1
c00247a7:	e9 57 02 00 00       	jmp    c0024a03 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c00247ac:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c00247b2:	c1 e0 04             	shl    eax,0x4
c00247b5:	0f b6 c0             	movzx  eax,al
c00247b8:	50                   	push   eax
c00247b9:	6a 06                	push   0x6
c00247bb:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00247c2:	50                   	push   eax
c00247c3:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00247c9:	e8 fa e8 ff ff       	call   c00230c8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00247ce:	6a 00                	push   0x0
c00247d0:	6a 01                	push   0x1
c00247d2:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00247d9:	50                   	push   eax
c00247da:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00247e0:	e8 e3 e8 ff ff       	call   c00230c8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00247e5:	83 c4 20             	add    esp,0x20
c00247e8:	0f b6 c3             	movzx  eax,bl
c00247eb:	0f b6 df             	movzx  ebx,bh
c00247ee:	50                   	push   eax
c00247ef:	6a 04                	push   0x4
c00247f1:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00247f8:	50                   	push   eax
c00247f9:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00247ff:	e8 c4 e8 ff ff       	call   c00230c8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024804:	53                   	push   ebx
c0024805:	6a 05                	push   0x5
c0024807:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002480e:	50                   	push   eax
c002480f:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024815:	e8 ae e8 ff ff       	call   c00230c8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002481a:	83 c4 20             	add    esp,0x20
c002481d:	68 a0 00 00 00       	push   0xa0
c0024822:	6a 07                	push   0x7
c0024824:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002482b:	50                   	push   eax
c002482c:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024832:	e8 91 e8 ff ff       	call   c00230c8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024837:	83 c4 0c             	add    esp,0xc
c002483a:	6a 01                	push   0x1
c002483c:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024843:	50                   	push   eax
c0024844:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002484a:	e8 25 f4 ff ff       	call   c0023c74 <IDE::polling(unsigned char, unsigned int)>
c002484f:	83 c4 10             	add    esp,0x10
c0024852:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c0024858:	84 c0                	test   al,al
c002485a:	74 23                	je     c002487f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c002485c:	0f b6 d8             	movzx  ebx,al
c002485f:	0f b6 d2             	movzx  edx,dl
c0024862:	53                   	push   ebx
c0024863:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c002486a:	50                   	push   eax
c002486b:	52                   	push   edx
c002486c:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024872:	e8 67 f2 ff ff       	call   c0023ade <IDE::printError(unsigned char, unsigned char, unsigned char)>
c0024877:	83 c4 10             	add    esp,0x10
c002487a:	e9 84 01 00 00       	jmp    c0024a03 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c002487f:	0f b6 d2             	movzx  edx,dl
c0024882:	53                   	push   ebx
c0024883:	53                   	push   ebx
c0024884:	52                   	push   edx
c0024885:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002488b:	e8 26 e8 ff ff       	call   c00230b6 <IDE::getBase(unsigned char)>
c0024890:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0024894:	b9 06 00 00 00       	mov    ecx,0x6
c0024899:	89 c2                	mov    edx,eax
c002489b:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c002489e:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c00248a2:	83 c4 10             	add    esp,0x10
c00248a5:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c00248ab:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c00248b2:	85 db                	test   ebx,ebx
c00248b4:	0f 84 ec 00 00 00    	je     c00249a6 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c00248ba:	51                   	push   ecx
c00248bb:	51                   	push   ecx
c00248bc:	52                   	push   edx
c00248bd:	50                   	push   eax
c00248be:	e8 73 e9 ff ff       	call   c0023236 <IDE::waitInterrupt(unsigned char)>
c00248c3:	83 c4 10             	add    esp,0x10
c00248c6:	84 c0                	test   al,al
c00248c8:	0f 84 d4 fe ff ff    	je     c00247a2 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c00248ce:	56                   	push   esi
c00248cf:	56                   	push   esi
c00248d0:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00248d7:	50                   	push   eax
c00248d8:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00248de:	e8 bf e7 ff ff       	call   c00230a2 <IDE::prepareInterrupt(unsigned char)>
c00248e3:	83 c4 0c             	add    esp,0xc
c00248e6:	6a 04                	push   0x4
c00248e8:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00248ef:	50                   	push   eax
c00248f0:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00248f6:	e8 8d e8 ff ff       	call   c0023188 <IDE::read(unsigned char, unsigned char)>
c00248fb:	83 c4 0c             	add    esp,0xc
c00248fe:	89 c6                	mov    esi,eax
c0024900:	6a 05                	push   0x5
c0024902:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024909:	50                   	push   eax
c002490a:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024910:	e8 73 e8 ff ff       	call   c0023188 <IDE::read(unsigned char, unsigned char)>
c0024915:	89 f1                	mov    ecx,esi
c0024917:	0f b6 c0             	movzx  eax,al
c002491a:	0f b6 f1             	movzx  esi,cl
c002491d:	c1 e0 08             	shl    eax,0x8
c0024920:	09 c6                	or     esi,eax
c0024922:	d1 fe                	sar    esi,1
c0024924:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0024928:	83 c4 10             	add    esp,0x10
c002492b:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0024930:	74 41                	je     c0024973 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x225>
c0024932:	31 c9                	xor    ecx,ecx
c0024934:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c002493a:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0024941:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c0024945:	75 0a                	jne    c0024951 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x203>
c0024947:	01 c9                	add    ecx,ecx
c0024949:	01 cd                	add    ebp,ecx
c002494b:	4b                   	dec    ebx
c002494c:	e9 54 ff ff ff       	jmp    c00248a5 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c0024951:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c0024956:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c002495a:	51                   	push   ecx
c002495b:	51                   	push   ecx
c002495c:	52                   	push   edx
c002495d:	50                   	push   eax
c002495e:	e8 53 e7 ff ff       	call   c00230b6 <IDE::getBase(unsigned char)>
c0024963:	89 c2                	mov    edx,eax
c0024965:	89 f0                	mov    eax,esi
c0024967:	66 ef                	out    dx,ax
c0024969:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c002496d:	83 c4 10             	add    esp,0x10
c0024970:	41                   	inc    ecx
c0024971:	eb c1                	jmp    c0024934 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e6>
c0024973:	31 f6                	xor    esi,esi
c0024975:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c002497b:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0024982:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c0024986:	75 06                	jne    c002498e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x240>
c0024988:	01 f6                	add    esi,esi
c002498a:	01 f5                	add    ebp,esi
c002498c:	eb bd                	jmp    c002494b <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fd>
c002498e:	51                   	push   ecx
c002498f:	51                   	push   ecx
c0024990:	52                   	push   edx
c0024991:	50                   	push   eax
c0024992:	e8 1f e7 ff ff       	call   c00230b6 <IDE::getBase(unsigned char)>
c0024997:	89 c2                	mov    edx,eax
c0024999:	66 ed                	in     ax,dx
c002499b:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c00249a0:	83 c4 10             	add    esp,0x10
c00249a3:	46                   	inc    esi
c00249a4:	eb cf                	jmp    c0024975 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x227>
c00249a6:	51                   	push   ecx
c00249a7:	51                   	push   ecx
c00249a8:	52                   	push   edx
c00249a9:	50                   	push   eax
c00249aa:	e8 87 e8 ff ff       	call   c0023236 <IDE::waitInterrupt(unsigned char)>
c00249af:	83 c4 10             	add    esp,0x10
c00249b2:	84 c0                	test   al,al
c00249b4:	0f 84 e8 fd ff ff    	je     c00247a2 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c00249ba:	bb a0 86 01 00       	mov    ebx,0x186a0
c00249bf:	52                   	push   edx
c00249c0:	52                   	push   edx
c00249c1:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00249c8:	50                   	push   eax
c00249c9:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00249cf:	e8 ce e6 ff ff       	call   c00230a2 <IDE::prepareInterrupt(unsigned char)>
c00249d4:	83 c4 10             	add    esp,0x10
c00249d7:	50                   	push   eax
c00249d8:	50                   	push   eax
c00249d9:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00249e0:	50                   	push   eax
c00249e1:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00249e7:	e8 ca e6 ff ff       	call   c00230b6 <IDE::getBase(unsigned char)>
c00249ec:	8d 50 07             	lea    edx,[eax+0x7]
c00249ef:	ec                   	in     al,dx
c00249f0:	83 c4 10             	add    esp,0x10
c00249f3:	a8 88                	test   al,0x88
c00249f5:	74 0a                	je     c0024a01 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c00249f7:	4b                   	dec    ebx
c00249f8:	75 dd                	jne    c00249d7 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c00249fa:	bb 02 00 00 00       	mov    ebx,0x2
c00249ff:	eb 02                	jmp    c0024a03 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0024a01:	31 db                	xor    ebx,ebx
c0024a03:	83 c4 1c             	add    esp,0x1c
c0024a06:	89 d8                	mov    eax,ebx
c0024a08:	5b                   	pop    ebx
c0024a09:	5e                   	pop    esi
c0024a0a:	5f                   	pop    edi
c0024a0b:	5d                   	pop    ebp
c0024a0c:	c3                   	ret    
c0024a0d:	90                   	nop

c0024a0e <ATAPI::diskRemoved()>:
c0024a0e:	83 ec 18             	sub    esp,0x18
c0024a11:	68 f5 d1 02 c0       	push   0xc002d1f5
c0024a16:	e8 c8 e5 fe ff       	call   c0012fe3 <Dbg::kprintf(char const*, ...)>
c0024a1b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024a1f:	c6 80 7c 01 00 00 00 	mov    BYTE PTR [eax+0x17c],0x0
c0024a26:	83 c4 1c             	add    esp,0x1c
c0024a29:	c3                   	ret    

c0024a2a <ATAPI::eject()>:
c0024a2a:	57                   	push   edi
c0024a2b:	b9 03 00 00 00       	mov    ecx,0x3
c0024a30:	53                   	push   ebx
c0024a31:	83 ec 14             	sub    esp,0x14
c0024a34:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0024a38:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0024a3c:	fc                   	cld    
c0024a3d:	31 c0                	xor    eax,eax
c0024a3f:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0024a41:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c0024a46:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c0024a4b:	50                   	push   eax
c0024a4c:	50                   	push   eax
c0024a4d:	6a 00                	push   0x0
c0024a4f:	6a 00                	push   0x0
c0024a51:	6a 00                	push   0x0
c0024a53:	6a 02                	push   0x2
c0024a55:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0024a59:	50                   	push   eax
c0024a5a:	53                   	push   ebx
c0024a5b:	e8 ee fc ff ff       	call   c002474e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0024a60:	83 c4 14             	add    esp,0x14
c0024a63:	53                   	push   ebx
c0024a64:	e8 a5 ff ff ff       	call   c0024a0e <ATAPI::diskRemoved()>
c0024a69:	83 c4 24             	add    esp,0x24
c0024a6c:	31 c0                	xor    eax,eax
c0024a6e:	5b                   	pop    ebx
c0024a6f:	5f                   	pop    edi
c0024a70:	c3                   	ret    
c0024a71:	90                   	nop

c0024a72 <ATAPI::diskInserted()>:
c0024a72:	53                   	push   ebx
c0024a73:	83 ec 14             	sub    esp,0x14
c0024a76:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0024a7a:	68 0c d2 02 c0       	push   0xc002d20c
c0024a7f:	e8 5f e5 fe ff       	call   c0012fe3 <Dbg::kprintf(char const*, ...)>
c0024a84:	c6 83 7c 01 00 00 01 	mov    BYTE PTR [ebx+0x17c],0x1
c0024a8b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024a8e:	e8 03 fe fe ff       	call   c0014896 <PhysicalDisk::startCache()>
c0024a93:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0024a97:	83 c4 18             	add    esp,0x18
c0024a9a:	5b                   	pop    ebx
c0024a9b:	e9 7c 1f ff ff       	jmp    c0016a1c <createPartitionsForDisk(PhysicalDisk*)>

c0024aa0 <ATAPI::detectMedia()>:
c0024aa0:	56                   	push   esi
c0024aa1:	53                   	push   ebx
c0024aa2:	83 ec 28             	sub    esp,0x28
c0024aa5:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0024aa9:	6a 0c                	push   0xc
c0024aab:	6a 00                	push   0x0
c0024aad:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0024ab1:	56                   	push   esi
c0024ab2:	e8 c1 bc fd ff       	call   c0000778 <memset>
c0024ab7:	58                   	pop    eax
c0024ab8:	5a                   	pop    edx
c0024ab9:	6a 00                	push   0x0
c0024abb:	6a 00                	push   0x0
c0024abd:	6a 00                	push   0x0
c0024abf:	6a 00                	push   0x0
c0024ac1:	56                   	push   esi
c0024ac2:	53                   	push   ebx
c0024ac3:	e8 86 fc ff ff       	call   c002474e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0024ac8:	83 c4 1c             	add    esp,0x1c
c0024acb:	6a 0c                	push   0xc
c0024acd:	6a 00                	push   0x0
c0024acf:	56                   	push   esi
c0024ad0:	e8 a3 bc fd ff       	call   c0000778 <memset>
c0024ad5:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c0024ada:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c0024adf:	59                   	pop    ecx
c0024ae0:	58                   	pop    eax
c0024ae1:	6a 01                	push   0x1
c0024ae3:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c0024ae7:	50                   	push   eax
c0024ae8:	6a 00                	push   0x0
c0024aea:	6a 12                	push   0x12
c0024aec:	56                   	push   esi
c0024aed:	53                   	push   ebx
c0024aee:	e8 5b fc ff ff       	call   c002474e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0024af3:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c0024af7:	83 c4 20             	add    esp,0x20
c0024afa:	83 e0 7f             	and    eax,0x7f
c0024afd:	3c 70                	cmp    al,0x70
c0024aff:	74 15                	je     c0024b16 <ATAPI::detectMedia()+0x76>
c0024b01:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0024b08:	75 0c                	jne    c0024b16 <ATAPI::detectMedia()+0x76>
c0024b0a:	83 ec 0c             	sub    esp,0xc
c0024b0d:	53                   	push   ebx
c0024b0e:	e8 5f ff ff ff       	call   c0024a72 <ATAPI::diskInserted()>
c0024b13:	83 c4 10             	add    esp,0x10
c0024b16:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0024b1a:	83 e0 0f             	and    eax,0xf
c0024b1d:	3c 02                	cmp    al,0x2
c0024b1f:	75 1b                	jne    c0024b3c <ATAPI::detectMedia()+0x9c>
c0024b21:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c0024b26:	75 2d                	jne    c0024b55 <ATAPI::detectMedia()+0xb5>
c0024b28:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0024b2f:	74 24                	je     c0024b55 <ATAPI::detectMedia()+0xb5>
c0024b31:	83 ec 0c             	sub    esp,0xc
c0024b34:	53                   	push   ebx
c0024b35:	e8 d4 fe ff ff       	call   c0024a0e <ATAPI::diskRemoved()>
c0024b3a:	eb 16                	jmp    c0024b52 <ATAPI::detectMedia()+0xb2>
c0024b3c:	84 c0                	test   al,al
c0024b3e:	75 15                	jne    c0024b55 <ATAPI::detectMedia()+0xb5>
c0024b40:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0024b47:	75 0c                	jne    c0024b55 <ATAPI::detectMedia()+0xb5>
c0024b49:	83 ec 0c             	sub    esp,0xc
c0024b4c:	53                   	push   ebx
c0024b4d:	e8 20 ff ff ff       	call   c0024a72 <ATAPI::diskInserted()>
c0024b52:	83 c4 10             	add    esp,0x10
c0024b55:	83 c4 24             	add    esp,0x24
c0024b58:	5b                   	pop    ebx
c0024b59:	5e                   	pop    esi
c0024b5a:	c3                   	ret    
c0024b5b:	90                   	nop

c0024b5c <ATAPI::open(int, int, void*)>:
c0024b5c:	53                   	push   ebx
c0024b5d:	83 ec 08             	sub    esp,0x8
c0024b60:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0024b64:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0024b68:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0024b6c:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0024b72:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0024b78:	c1 e0 06             	shl    eax,0x6
c0024b7b:	01 d0                	add    eax,edx
c0024b7d:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c0024b84:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c0024b8a:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c0024b91:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c0024b9b:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c0024ba1:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c0024ba8:	6a 04                	push   0x4
c0024baa:	6a 0c                	push   0xc
c0024bac:	51                   	push   ecx
c0024bad:	52                   	push   edx
c0024bae:	e8 15 e5 ff ff       	call   c00230c8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024bb3:	90                   	nop
c0024bb4:	90                   	nop
c0024bb5:	6a 00                	push   0x0
c0024bb7:	6a 0c                	push   0xc
c0024bb9:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024bc0:	50                   	push   eax
c0024bc1:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024bc7:	e8 fc e4 ff ff       	call   c00230c8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024bcc:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c0024bd3:	83 c4 14             	add    esp,0x14
c0024bd6:	53                   	push   ebx
c0024bd7:	e8 c4 fe ff ff       	call   c0024aa0 <ATAPI::detectMedia()>
c0024bdc:	31 c0                	xor    eax,eax
c0024bde:	83 c4 18             	add    esp,0x18
c0024be1:	5b                   	pop    ebx
c0024be2:	c3                   	ret    
c0024be3:	90                   	nop

c0024be4 <ATAPI::read(unsigned long long, int, void*)>:
c0024be4:	55                   	push   ebp
c0024be5:	57                   	push   edi
c0024be6:	56                   	push   esi
c0024be7:	53                   	push   ebx
c0024be8:	83 ec 1c             	sub    esp,0x1c
c0024beb:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0024bef:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0024bf3:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0024bf7:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c0024bfe:	74 41                	je     c0024c41 <ATAPI::read(unsigned long long, int, void*)+0x5d>
c0024c00:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0024c04:	b9 03 00 00 00       	mov    ecx,0x3
c0024c09:	fc                   	cld    
c0024c0a:	31 c0                	xor    eax,eax
c0024c0c:	86 fb                	xchg   bl,bh
c0024c0e:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0024c10:	c1 c3 10             	rol    ebx,0x10
c0024c13:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c0024c18:	89 e8                	mov    eax,ebp
c0024c1a:	86 fb                	xchg   bl,bh
c0024c1c:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0024c20:	89 5c 24 06          	mov    DWORD PTR [esp+0x6],ebx
c0024c24:	50                   	push   eax
c0024c25:	50                   	push   eax
c0024c26:	55                   	push   ebp
c0024c27:	c1 e5 0b             	shl    ebp,0xb
c0024c2a:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0024c2e:	6a 00                	push   0x0
c0024c30:	55                   	push   ebp
c0024c31:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0024c35:	50                   	push   eax
c0024c36:	56                   	push   esi
c0024c37:	e8 12 fb ff ff       	call   c002474e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0024c3c:	83 c4 20             	add    esp,0x20
c0024c3f:	eb 1a                	jmp    c0024c5b <ATAPI::read(unsigned long long, int, void*)+0x77>
c0024c41:	83 ec 0c             	sub    esp,0xc
c0024c44:	56                   	push   esi
c0024c45:	e8 56 fe ff ff       	call   c0024aa0 <ATAPI::detectMedia()>
c0024c4a:	83 c4 10             	add    esp,0x10
c0024c4d:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c0024c54:	75 aa                	jne    c0024c00 <ATAPI::read(unsigned long long, int, void*)+0x1c>
c0024c56:	b8 02 00 00 00       	mov    eax,0x2
c0024c5b:	83 c4 1c             	add    esp,0x1c
c0024c5e:	5b                   	pop    ebx
c0024c5f:	5e                   	pop    esi
c0024c60:	5f                   	pop    edi
c0024c61:	5d                   	pop    ebp
c0024c62:	c3                   	ret    
c0024c63:	90                   	nop

c0024c64 <SATA::close(int, int, void*)>:
c0024c64:	83 ec 0c             	sub    esp,0xc
c0024c67:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024c6b:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0024c71:	85 c0                	test   eax,eax
c0024c73:	74 0c                	je     c0024c81 <SATA::close(int, int, void*)+0x1d>
c0024c75:	83 ec 0c             	sub    esp,0xc
c0024c78:	8b 10                	mov    edx,DWORD PTR [eax]
c0024c7a:	50                   	push   eax
c0024c7b:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0024c7e:	83 c4 10             	add    esp,0x10
c0024c81:	31 c0                	xor    eax,eax
c0024c83:	83 c4 0c             	add    esp,0xc
c0024c86:	c3                   	ret    
c0024c87:	90                   	nop

c0024c88 <SATA::powerSaving(PowerSavingLevel)>:
c0024c88:	c3                   	ret    
c0024c89:	90                   	nop

c0024c8a <SATA::open(int, int, void*)>:
c0024c8a:	56                   	push   esi
c0024c8b:	53                   	push   ebx
c0024c8c:	50                   	push   eax
c0024c8d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0024c91:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0024c95:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c0024c9f:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c0024ca5:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c0024caf:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0024cb3:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0024cbd:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0024cc3:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c0024cca:	e8 b7 b2 fe ff       	call   c000ff86 <Phys::allocatePage()>
c0024ccf:	89 c6                	mov    esi,eax
c0024cd1:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c0024cd7:	81 c6 00 10 00 00    	add    esi,0x1000
c0024cdd:	e8 a4 b2 fe ff       	call   c000ff86 <Phys::allocatePage()>
c0024ce2:	39 c6                	cmp    esi,eax
c0024ce4:	74 10                	je     c0024cf6 <SATA::open(int, int, void*)+0x6c>
c0024ce6:	83 ec 0c             	sub    esp,0xc
c0024ce9:	68 34 d1 02 c0       	push   0xc002d134
c0024cee:	e8 a2 59 ff ff       	call   c001a695 <Krnl::panic(char const*)>
c0024cf3:	83 c4 10             	add    esp,0x10
c0024cf6:	83 ec 0c             	sub    esp,0xc
c0024cf9:	6a 02                	push   0x2
c0024cfb:	e8 23 cf fe ff       	call   c0011c23 <Virt::allocateKernelVirtualPages(int)>
c0024d00:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0024d06:	e8 b3 d1 fe ff       	call   c0011ebe <Virt::getAKernelVAS()>
c0024d0b:	6a 03                	push   0x3
c0024d0d:	ff b3 78 01 00 00    	push   DWORD PTR [ebx+0x178]
c0024d13:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c0024d19:	50                   	push   eax
c0024d1a:	e8 db d6 fe ff       	call   c00123fa <VAS::mapPage(unsigned long, unsigned long, int)>
c0024d1f:	83 c4 14             	add    esp,0x14
c0024d22:	53                   	push   ebx
c0024d23:	e8 6e fb fe ff       	call   c0014896 <PhysicalDisk::startCache()>
c0024d28:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024d2b:	e8 ec 1c ff ff       	call   c0016a1c <createPartitionsForDisk(PhysicalDisk*)>
c0024d30:	83 c4 14             	add    esp,0x14
c0024d33:	31 c0                	xor    eax,eax
c0024d35:	5b                   	pop    ebx
c0024d36:	5e                   	pop    esi
c0024d37:	c3                   	ret    

c0024d38 <SATA::SATA()>:
c0024d38:	83 ec 0c             	sub    esp,0xc
c0024d3b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024d3f:	83 ec 04             	sub    esp,0x4
c0024d42:	68 00 02 00 00       	push   0x200
c0024d47:	68 48 d1 02 c0       	push   0xc002d148
c0024d4c:	50                   	push   eax
c0024d4d:	e8 dc fa fe ff       	call   c001482e <PhysicalDisk::PhysicalDisk(char const*, int)>
c0024d52:	83 c4 10             	add    esp,0x10
c0024d55:	ba b8 d1 02 c0       	mov    edx,0xc002d1b8
c0024d5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024d5e:	89 10                	mov    DWORD PTR [eax],edx
c0024d60:	90                   	nop
c0024d61:	83 c4 0c             	add    esp,0xc
c0024d64:	c3                   	ret    
c0024d65:	90                   	nop

c0024d66 <SATA::access(unsigned long long, int, void*, bool)>:
c0024d66:	55                   	push   ebp
c0024d67:	57                   	push   edi
c0024d68:	56                   	push   esi
c0024d69:	53                   	push   ebx
c0024d6a:	83 ec 2c             	sub    esp,0x2c
c0024d6d:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0024d71:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0024d75:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0024d79:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0024d7d:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0024d81:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c0024d86:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0024d8a:	7e 10                	jle    c0024d9c <SATA::access(unsigned long long, int, void*, bool)+0x36>
c0024d8c:	83 ec 0c             	sub    esp,0xc
c0024d8f:	68 58 d1 02 c0       	push   0xc002d158
c0024d94:	e8 fc 58 ff ff       	call   c001a695 <Krnl::panic(char const*)>
c0024d99:	83 c4 10             	add    esp,0x10
c0024d9c:	8b b5 6c 01 00 00    	mov    esi,DWORD PTR [ebp+0x16c]
c0024da2:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c0024da8:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0024dae:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0024db2:	89 f0                	mov    eax,esi
c0024db4:	c1 e0 07             	shl    eax,0x7
c0024db7:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0024dbb:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c0024dc5:	53                   	push   ebx
c0024dc6:	8d 46 02             	lea    eax,[esi+0x2]
c0024dc9:	53                   	push   ebx
c0024dca:	c1 e0 07             	shl    eax,0x7
c0024dcd:	bb 01 00 00 00       	mov    ebx,0x1
c0024dd2:	03 44 24 14          	add    eax,DWORD PTR [esp+0x14]
c0024dd6:	50                   	push   eax
c0024dd7:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c0024ddd:	e8 aa ef ff ff       	call   c0023d8c <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c0024de2:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0024de6:	83 c4 10             	add    esp,0x10
c0024de9:	83 7c 24 14 ff       	cmp    DWORD PTR [esp+0x14],0xffffffff
c0024dee:	0f 84 ce 01 00 00    	je     c0024fc2 <SATA::access(unsigned long long, int, void*, bool)+0x25c>
c0024df4:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0024df8:	c1 e0 09             	shl    eax,0x9
c0024dfb:	80 7c 24 10 00       	cmp    BYTE PTR [esp+0x10],0x0
c0024e00:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0024e04:	74 17                	je     c0024e1d <SATA::access(unsigned long long, int, void*, bool)+0xb7>
c0024e06:	51                   	push   ecx
c0024e07:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0024e0b:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0024e0f:	ff b5 78 01 00 00    	push   DWORD PTR [ebp+0x178]
c0024e15:	e8 2a b9 fd ff       	call   c0000744 <memcpy>
c0024e1a:	83 c4 10             	add    esp,0x10
c0024e1d:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c0024e23:	8d 46 02             	lea    eax,[esi+0x2]
c0024e26:	c1 e0 07             	shl    eax,0x7
c0024e29:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0024e2d:	8b 00                	mov    eax,DWORD PTR [eax]
c0024e2f:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c0024e35:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c0024e3b:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0024e3f:	c1 e1 05             	shl    ecx,0x5
c0024e42:	01 c8                	add    eax,ecx
c0024e44:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c0024e48:	8a 18                	mov    bl,BYTE PTR [eax]
c0024e4a:	83 e1 01             	and    ecx,0x1
c0024e4d:	83 e3 bf             	and    ebx,0xffffffbf
c0024e50:	c1 e1 06             	shl    ecx,0x6
c0024e53:	09 d9                	or     ecx,ebx
c0024e55:	88 08                	mov    BYTE PTR [eax],cl
c0024e57:	8b 08                	mov    ecx,DWORD PTR [eax]
c0024e59:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c0024e5f:	81 c9 05 00 01 00    	or     ecx,0x10005
c0024e65:	89 08                	mov    DWORD PTR [eax],ecx
c0024e67:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c0024e6d:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c0024e73:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c0024e79:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c0024e7c:	52                   	push   edx
c0024e7d:	68 90 00 00 00       	push   0x90
c0024e82:	6a 00                	push   0x0
c0024e84:	53                   	push   ebx
c0024e85:	e8 ee b8 fd ff       	call   c0000778 <memset>
c0024e8a:	8b 85 74 01 00 00    	mov    eax,DWORD PTR [ebp+0x174]
c0024e90:	66 89 7b 04          	mov    WORD PTR [ebx+0x4],di
c0024e94:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c0024e9a:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c0024e9e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0024ea2:	83 c4 10             	add    esp,0x10
c0024ea5:	8d 48 ff             	lea    ecx,[eax-0x1]
c0024ea8:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c0024eae:	81 e1 ff ff 3f 00    	and    ecx,0x3fffff
c0024eb4:	25 00 00 c0 ff       	and    eax,0xffc00000
c0024eb9:	09 c8                	or     eax,ecx
c0024ebb:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c0024ec1:	66 8b 03             	mov    ax,WORD PTR [ebx]
c0024ec4:	80 8b 8f 00 00 00 80 	or     BYTE PTR [ebx+0x8f],0x80
c0024ecb:	66 25 00 7f          	and    ax,0x7f00
c0024ecf:	66 0d 27 80          	or     ax,0x8027
c0024ed3:	80 7c 24 10 01       	cmp    BYTE PTR [esp+0x10],0x1
c0024ed8:	66 89 03             	mov    WORD PTR [ebx],ax
c0024edb:	19 c0                	sbb    eax,eax
c0024edd:	83 e0 f0             	and    eax,0xfffffff0
c0024ee0:	83 c0 35             	add    eax,0x35
c0024ee3:	88 43 02             	mov    BYTE PTR [ebx+0x2],al
c0024ee6:	89 f8                	mov    eax,edi
c0024ee8:	c1 e8 10             	shr    eax,0x10
c0024eeb:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0024eee:	89 f8                	mov    eax,edi
c0024ef0:	c1 e8 18             	shr    eax,0x18
c0024ef3:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c0024ef6:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c0024efa:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c0024efd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0024f01:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c0024f04:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0024f08:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c0024f0c:	89 f3                	mov    ebx,esi
c0024f0e:	31 c0                	xor    eax,eax
c0024f10:	c1 e3 07             	shl    ebx,0x7
c0024f13:	03 5c 24 0c          	add    ebx,DWORD PTR [esp+0xc]
c0024f17:	8b 8b 20 01 00 00    	mov    ecx,DWORD PTR [ebx+0x120]
c0024f1d:	80 e1 88             	and    cl,0x88
c0024f20:	74 0a                	je     c0024f2c <SATA::access(unsigned long long, int, void*, bool)+0x1c6>
c0024f22:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0024f27:	74 0a                	je     c0024f33 <SATA::access(unsigned long long, int, void*, bool)+0x1cd>
c0024f29:	40                   	inc    eax
c0024f2a:	eb eb                	jmp    c0024f17 <SATA::access(unsigned long long, int, void*, bool)+0x1b1>
c0024f2c:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0024f31:	75 0a                	jne    c0024f3d <SATA::access(unsigned long long, int, void*, bool)+0x1d7>
c0024f33:	83 ec 0c             	sub    esp,0xc
c0024f36:	68 91 d1 02 c0       	push   0xc002d191
c0024f3b:	eb 56                	jmp    c0024f93 <SATA::access(unsigned long long, int, void*, bool)+0x22d>
c0024f3d:	b8 01 00 00 00       	mov    eax,0x1
c0024f42:	8a 4c 24 14          	mov    cl,BYTE PTR [esp+0x14]
c0024f46:	c1 e6 07             	shl    esi,0x7
c0024f49:	d3 e0                	shl    eax,cl
c0024f4b:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c0024f4f:	89 83 38 01 00 00    	mov    DWORD PTR [ebx+0x138],eax
c0024f55:	8b 8e 38 01 00 00    	mov    ecx,DWORD PTR [esi+0x138]
c0024f5b:	85 c8                	test   eax,ecx
c0024f5d:	74 20                	je     c0024f7f <SATA::access(unsigned long long, int, void*, bool)+0x219>
c0024f5f:	8b 8e 10 01 00 00    	mov    ecx,DWORD PTR [esi+0x110]
c0024f65:	0f ba e1 1e          	bt     ecx,0x1e
c0024f69:	73 ea                	jae    c0024f55 <SATA::access(unsigned long long, int, void*, bool)+0x1ef>
c0024f6b:	83 ec 0c             	sub    esp,0xc
c0024f6e:	31 db                	xor    ebx,ebx
c0024f70:	68 9f d1 02 c0       	push   0xc002d19f
c0024f75:	e8 1b 57 ff ff       	call   c001a695 <Krnl::panic(char const*)>
c0024f7a:	83 c4 10             	add    esp,0x10
c0024f7d:	eb 43                	jmp    c0024fc2 <SATA::access(unsigned long long, int, void*, bool)+0x25c>
c0024f7f:	8b 86 10 01 00 00    	mov    eax,DWORD PTR [esi+0x110]
c0024f85:	0f ba e0 1e          	bt     eax,0x1e
c0024f89:	73 17                	jae    c0024fa2 <SATA::access(unsigned long long, int, void*, bool)+0x23c>
c0024f8b:	83 ec 0c             	sub    esp,0xc
c0024f8e:	68 9f d1 02 c0       	push   0xc002d19f
c0024f93:	e8 fd 56 ff ff       	call   c001a695 <Krnl::panic(char const*)>
c0024f98:	bb 01 00 00 00       	mov    ebx,0x1
c0024f9d:	83 c4 10             	add    esp,0x10
c0024fa0:	eb 20                	jmp    c0024fc2 <SATA::access(unsigned long long, int, void*, bool)+0x25c>
c0024fa2:	31 db                	xor    ebx,ebx
c0024fa4:	80 7c 24 10 00       	cmp    BYTE PTR [esp+0x10],0x0
c0024fa9:	75 17                	jne    c0024fc2 <SATA::access(unsigned long long, int, void*, bool)+0x25c>
c0024fab:	50                   	push   eax
c0024fac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0024fb0:	ff b5 78 01 00 00    	push   DWORD PTR [ebp+0x178]
c0024fb6:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0024fba:	e8 85 b7 fd ff       	call   c0000744 <memcpy>
c0024fbf:	83 c4 10             	add    esp,0x10
c0024fc2:	83 c4 2c             	add    esp,0x2c
c0024fc5:	89 d8                	mov    eax,ebx
c0024fc7:	5b                   	pop    ebx
c0024fc8:	5e                   	pop    esi
c0024fc9:	5f                   	pop    edi
c0024fca:	5d                   	pop    ebp
c0024fcb:	c3                   	ret    

c0024fcc <SATA::read(unsigned long long, int, void*)>:
c0024fcc:	57                   	push   edi
c0024fcd:	b8 04 00 00 00       	mov    eax,0x4
c0024fd2:	56                   	push   esi
c0024fd3:	53                   	push   ebx
c0024fd4:	83 ec 10             	sub    esp,0x10
c0024fd7:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0024fdb:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0024fdf:	8d 4b ff             	lea    ecx,[ebx-0x1]
c0024fe2:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0024fe6:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0024fea:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c0024ff0:	77 3b                	ja     c002502d <SATA::read(unsigned long long, int, void*)+0x61>
c0024ff2:	b8 06 00 00 00       	mov    eax,0x6
c0024ff7:	85 d2                	test   edx,edx
c0024ff9:	74 32                	je     c002502d <SATA::read(unsigned long long, int, void*)+0x61>
c0024ffb:	50                   	push   eax
c0024ffc:	50                   	push   eax
c0024ffd:	6a 00                	push   0x0
c0024fff:	52                   	push   edx
c0025000:	53                   	push   ebx
c0025001:	57                   	push   edi
c0025002:	56                   	push   esi
c0025003:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0025007:	e8 5a fd ff ff       	call   c0024d66 <SATA::access(unsigned long long, int, void*, bool)>
c002500c:	83 c4 20             	add    esp,0x20
c002500f:	85 c0                	test   eax,eax
c0025011:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0025015:	75 11                	jne    c0025028 <SATA::read(unsigned long long, int, void*)+0x5c>
c0025017:	01 1d 48 2a 03 c0    	add    DWORD PTR ds:0xc0032a48,ebx
c002501d:	e8 56 ba fe ff       	call   c0010a78 <VgaText::updateDiskUsage()>
c0025022:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0025026:	eb 05                	jmp    c002502d <SATA::read(unsigned long long, int, void*)+0x61>
c0025028:	b8 01 00 00 00       	mov    eax,0x1
c002502d:	83 c4 10             	add    esp,0x10
c0025030:	5b                   	pop    ebx
c0025031:	5e                   	pop    esi
c0025032:	5f                   	pop    edi
c0025033:	c3                   	ret    

c0025034 <SATA::write(unsigned long long, int, void*)>:
c0025034:	55                   	push   ebp
c0025035:	b8 04 00 00 00       	mov    eax,0x4
c002503a:	57                   	push   edi
c002503b:	56                   	push   esi
c002503c:	53                   	push   ebx
c002503d:	83 ec 1c             	sub    esp,0x1c
c0025040:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0025044:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0025048:	8d 75 ff             	lea    esi,[ebp-0x1]
c002504b:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c002504f:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0025053:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0025059:	77 56                	ja     c00250b1 <SATA::write(unsigned long long, int, void*)+0x7d>
c002505b:	b8 06 00 00 00       	mov    eax,0x6
c0025060:	85 ff                	test   edi,edi
c0025062:	74 4d                	je     c00250b1 <SATA::write(unsigned long long, int, void*)+0x7d>
c0025064:	89 ee                	mov    esi,ebp
c0025066:	c1 e6 09             	shl    esi,0x9
c0025069:	01 fe                	add    esi,edi
c002506b:	89 c8                	mov    eax,ecx
c002506d:	89 da                	mov    edx,ebx
c002506f:	83 c0 01             	add    eax,0x1
c0025072:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0025076:	83 d2 00             	adc    edx,0x0
c0025079:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002507d:	50                   	push   eax
c002507e:	50                   	push   eax
c002507f:	6a 01                	push   0x1
c0025081:	57                   	push   edi
c0025082:	81 c7 00 02 00 00    	add    edi,0x200
c0025088:	6a 01                	push   0x1
c002508a:	53                   	push   ebx
c002508b:	51                   	push   ecx
c002508c:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0025090:	e8 d1 fc ff ff       	call   c0024d66 <SATA::access(unsigned long long, int, void*, bool)>
c0025095:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0025099:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c002509d:	83 c4 20             	add    esp,0x20
c00250a0:	39 f7                	cmp    edi,esi
c00250a2:	75 c7                	jne    c002506b <SATA::write(unsigned long long, int, void*)+0x37>
c00250a4:	01 2d 44 2a 03 c0    	add    DWORD PTR ds:0xc0032a44,ebp
c00250aa:	e8 c9 b9 fe ff       	call   c0010a78 <VgaText::updateDiskUsage()>
c00250af:	31 c0                	xor    eax,eax
c00250b1:	83 c4 1c             	add    esp,0x1c
c00250b4:	5b                   	pop    ebx
c00250b5:	5e                   	pop    esi
c00250b6:	5f                   	pop    edi
c00250b7:	5d                   	pop    ebp
c00250b8:	c3                   	ret    
c00250b9:	90                   	nop

c00250ba <SATAPI::write(unsigned long long, int, void*)>:
c00250ba:	b8 03 00 00 00       	mov    eax,0x3
c00250bf:	c3                   	ret    

c00250c0 <SATAPI::close(int, int, void*)>:
c00250c0:	83 ec 0c             	sub    esp,0xc
c00250c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00250c7:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00250cd:	85 c0                	test   eax,eax
c00250cf:	74 0c                	je     c00250dd <SATAPI::close(int, int, void*)+0x1d>
c00250d1:	83 ec 0c             	sub    esp,0xc
c00250d4:	8b 10                	mov    edx,DWORD PTR [eax]
c00250d6:	50                   	push   eax
c00250d7:	ff 52 04             	call   DWORD PTR [edx+0x4]
c00250da:	83 c4 10             	add    esp,0x10
c00250dd:	31 c0                	xor    eax,eax
c00250df:	83 c4 0c             	add    esp,0xc
c00250e2:	c3                   	ret    
c00250e3:	90                   	nop

c00250e4 <SATAPI::SATAPI()>:
c00250e4:	83 ec 0c             	sub    esp,0xc
c00250e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00250eb:	83 ec 04             	sub    esp,0x4
c00250ee:	68 00 08 00 00       	push   0x800
c00250f3:	68 e8 d1 02 c0       	push   0xc002d1e8
c00250f8:	50                   	push   eax
c00250f9:	e8 30 f7 fe ff       	call   c001482e <PhysicalDisk::PhysicalDisk(char const*, int)>
c00250fe:	83 c4 10             	add    esp,0x10
c0025101:	ba 94 d2 02 c0       	mov    edx,0xc002d294
c0025106:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002510a:	89 10                	mov    DWORD PTR [eax],edx
c002510c:	90                   	nop
c002510d:	83 c4 0c             	add    esp,0xc
c0025110:	c3                   	ret    
c0025111:	90                   	nop

c0025112 <SATAPI::diskRemoved()>:
c0025112:	83 ec 18             	sub    esp,0x18
c0025115:	68 f4 d1 02 c0       	push   0xc002d1f4
c002511a:	e8 c4 de fe ff       	call   c0012fe3 <Dbg::kprintf(char const*, ...)>
c002511f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0025123:	c6 80 74 01 00 00 00 	mov    BYTE PTR [eax+0x174],0x0
c002512a:	83 c4 1c             	add    esp,0x1c
c002512d:	c3                   	ret    

c002512e <SATAPI::diskInserted()>:
c002512e:	53                   	push   ebx
c002512f:	83 ec 14             	sub    esp,0x14
c0025132:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0025136:	68 0b d2 02 c0       	push   0xc002d20b
c002513b:	e8 a3 de fe ff       	call   c0012fe3 <Dbg::kprintf(char const*, ...)>
c0025140:	c6 83 74 01 00 00 01 	mov    BYTE PTR [ebx+0x174],0x1
c0025147:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002514a:	e8 47 f7 fe ff       	call   c0014896 <PhysicalDisk::startCache()>
c002514f:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0025153:	83 c4 18             	add    esp,0x18
c0025156:	5b                   	pop    ebx
c0025157:	e9 c0 18 ff ff       	jmp    c0016a1c <createPartitionsForDisk(PhysicalDisk*)>

c002515c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c002515c:	55                   	push   ebp
c002515d:	57                   	push   edi
c002515e:	56                   	push   esi
c002515f:	53                   	push   ebx
c0025160:	83 ec 24             	sub    esp,0x24
c0025163:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0025167:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c002516b:	8b be 6c 01 00 00    	mov    edi,DWORD PTR [esi+0x16c]
c0025171:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0025175:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0025179:	8b 86 70 01 00 00    	mov    eax,DWORD PTR [esi+0x170]
c002517f:	8d 5f 02             	lea    ebx,[edi+0x2]
c0025182:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0025188:	c1 e3 07             	shl    ebx,0x7
c002518b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002518f:	89 f8                	mov    eax,edi
c0025191:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c0025195:	c1 e0 07             	shl    eax,0x7
c0025198:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c002519c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00251a0:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c00251aa:	53                   	push   ebx
c00251ab:	ff b6 70 01 00 00    	push   DWORD PTR [esi+0x170]
c00251b1:	e8 d6 eb ff ff       	call   c0023d8c <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c00251b6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00251ba:	83 c4 10             	add    esp,0x10
c00251bd:	b8 01 00 00 00       	mov    eax,0x1
c00251c2:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c00251c7:	0f 84 8a 01 00 00    	je     c0025357 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1fb>
c00251cd:	8b 8e 70 01 00 00    	mov    ecx,DWORD PTR [esi+0x170]
c00251d3:	8b 03                	mov    eax,DWORD PTR [ebx]
c00251d5:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c00251db:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c00251e1:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00251e5:	c1 e1 05             	shl    ecx,0x5
c00251e8:	01 c8                	add    eax,ecx
c00251ea:	8b 08                	mov    ecx,DWORD PTR [eax]
c00251ec:	81 e1 80 ff 00 00    	and    ecx,0xff80
c00251f2:	81 c9 25 00 01 00    	or     ecx,0x10025
c00251f8:	89 08                	mov    DWORD PTR [eax],ecx
c00251fa:	8b 8e 70 01 00 00    	mov    ecx,DWORD PTR [esi+0x170]
c0025200:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c0025206:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c002520c:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c002520f:	52                   	push   edx
c0025210:	68 90 00 00 00       	push   0x90
c0025215:	6a 00                	push   0x0
c0025217:	53                   	push   ebx
c0025218:	e8 5b b5 fd ff       	call   c0000778 <memset>
c002521d:	83 c4 0c             	add    esp,0xc
c0025220:	8d 43 40             	lea    eax,[ebx+0x40]
c0025223:	6a 0c                	push   0xc
c0025225:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0025229:	50                   	push   eax
c002522a:	e8 15 b5 fd ff       	call   c0000744 <memcpy>
c002522f:	8b 86 78 01 00 00    	mov    eax,DWORD PTR [esi+0x178]
c0025235:	89 ea                	mov    edx,ebp
c0025237:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c002523d:	c1 ea 18             	shr    edx,0x18
c0025240:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0025244:	88 53 08             	mov    BYTE PTR [ebx+0x8],dl
c0025247:	8d 48 ff             	lea    ecx,[eax-0x1]
c002524a:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c002524e:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c0025254:	81 e1 ff ff 3f 00    	and    ecx,0x3fffff
c002525a:	25 00 00 c0 ff       	and    eax,0xffc00000
c002525f:	66 89 6b 04          	mov    WORD PTR [ebx+0x4],bp
c0025263:	09 c8                	or     eax,ecx
c0025265:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c0025269:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c002526f:	66 8b 03             	mov    ax,WORD PTR [ebx]
c0025272:	80 8b 8f 00 00 00 80 	or     BYTE PTR [ebx+0x8f],0x80
c0025279:	66 25 00 7f          	and    ax,0x7f00
c002527d:	66 0d 27 80          	or     ax,0x8027
c0025281:	66 89 03             	mov    WORD PTR [ebx],ax
c0025284:	89 e8                	mov    eax,ebp
c0025286:	c1 e8 10             	shr    eax,0x10
c0025289:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c002528c:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c0025290:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c0025293:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025297:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c002529a:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c002529e:	83 c4 10             	add    esp,0x10
c00252a1:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c00252a5:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00252a9:	31 c0                	xor    eax,eax
c00252ab:	8b 8a 20 01 00 00    	mov    ecx,DWORD PTR [edx+0x120]
c00252b1:	80 e1 88             	and    cl,0x88
c00252b4:	74 0a                	je     c00252c0 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x164>
c00252b6:	3d 40 42 0f 00       	cmp    eax,0xf4240
c00252bb:	74 0a                	je     c00252c7 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x16b>
c00252bd:	40                   	inc    eax
c00252be:	eb eb                	jmp    c00252ab <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x14f>
c00252c0:	3d 40 42 0f 00       	cmp    eax,0xf4240
c00252c5:	75 0f                	jne    c00252d6 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x17a>
c00252c7:	83 ec 0c             	sub    esp,0xc
c00252ca:	68 91 d1 02 c0       	push   0xc002d191
c00252cf:	e8 c1 53 ff ff       	call   c001a695 <Krnl::panic(char const*)>
c00252d4:	eb 3a                	jmp    c0025310 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1b4>
c00252d6:	b8 01 00 00 00       	mov    eax,0x1
c00252db:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c00252df:	c1 e7 07             	shl    edi,0x7
c00252e2:	d3 e0                	shl    eax,cl
c00252e4:	03 3c 24             	add    edi,DWORD PTR [esp]
c00252e7:	89 82 38 01 00 00    	mov    DWORD PTR [edx+0x138],eax
c00252ed:	8b 97 38 01 00 00    	mov    edx,DWORD PTR [edi+0x138]
c00252f3:	85 d0                	test   eax,edx
c00252f5:	74 23                	je     c002531a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1be>
c00252f7:	8b 97 10 01 00 00    	mov    edx,DWORD PTR [edi+0x110]
c00252fd:	0f ba e2 1e          	bt     edx,0x1e
c0025301:	73 ea                	jae    c00252ed <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x191>
c0025303:	83 ec 0c             	sub    esp,0xc
c0025306:	68 23 d2 02 c0       	push   0xc002d223
c002530b:	e8 d3 dc fe ff       	call   c0012fe3 <Dbg::kprintf(char const*, ...)>
c0025310:	83 c4 10             	add    esp,0x10
c0025313:	b8 01 00 00 00       	mov    eax,0x1
c0025318:	eb 3d                	jmp    c0025357 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1fb>
c002531a:	8b 87 10 01 00 00    	mov    eax,DWORD PTR [edi+0x110]
c0025320:	0f ba e0 1e          	bt     eax,0x1e
c0025324:	73 0a                	jae    c0025330 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1d4>
c0025326:	83 ec 0c             	sub    esp,0xc
c0025329:	68 36 d2 02 c0       	push   0xc002d236
c002532e:	eb db                	jmp    c002530b <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1af>
c0025330:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c0025335:	74 1e                	je     c0025355 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1f9>
c0025337:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c002533c:	74 17                	je     c0025355 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1f9>
c002533e:	50                   	push   eax
c002533f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0025343:	ff b6 7c 01 00 00    	push   DWORD PTR [esi+0x17c]
c0025349:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c002534d:	e8 f2 b3 fd ff       	call   c0000744 <memcpy>
c0025352:	83 c4 10             	add    esp,0x10
c0025355:	31 c0                	xor    eax,eax
c0025357:	83 c4 1c             	add    esp,0x1c
c002535a:	5b                   	pop    ebx
c002535b:	5e                   	pop    esi
c002535c:	5f                   	pop    edi
c002535d:	5d                   	pop    ebp
c002535e:	c3                   	ret    
c002535f:	90                   	nop

c0025360 <SATAPI::eject()>:
c0025360:	57                   	push   edi
c0025361:	b9 03 00 00 00       	mov    ecx,0x3
c0025366:	53                   	push   ebx
c0025367:	83 ec 14             	sub    esp,0x14
c002536a:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c002536e:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0025372:	fc                   	cld    
c0025373:	31 c0                	xor    eax,eax
c0025375:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0025377:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c002537c:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c0025381:	50                   	push   eax
c0025382:	6a 00                	push   0x0
c0025384:	6a 00                	push   0x0
c0025386:	6a 00                	push   0x0
c0025388:	6a 00                	push   0x0
c002538a:	6a 02                	push   0x2
c002538c:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0025390:	50                   	push   eax
c0025391:	53                   	push   ebx
c0025392:	e8 c5 fd ff ff       	call   c002515c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0025397:	83 c4 14             	add    esp,0x14
c002539a:	53                   	push   ebx
c002539b:	e8 72 fd ff ff       	call   c0025112 <SATAPI::diskRemoved()>
c00253a0:	83 c4 24             	add    esp,0x24
c00253a3:	31 c0                	xor    eax,eax
c00253a5:	5b                   	pop    ebx
c00253a6:	5f                   	pop    edi
c00253a7:	c3                   	ret    

c00253a8 <SATAPI::detectMedia()>:
c00253a8:	56                   	push   esi
c00253a9:	53                   	push   ebx
c00253aa:	83 ec 28             	sub    esp,0x28
c00253ad:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00253b1:	6a 0c                	push   0xc
c00253b3:	6a 00                	push   0x0
c00253b5:	8d 74 24 0e          	lea    esi,[esp+0xe]
c00253b9:	56                   	push   esi
c00253ba:	e8 b9 b3 fd ff       	call   c0000778 <memset>
c00253bf:	83 c4 0c             	add    esp,0xc
c00253c2:	6a 00                	push   0x0
c00253c4:	6a 00                	push   0x0
c00253c6:	6a 00                	push   0x0
c00253c8:	6a 00                	push   0x0
c00253ca:	6a 00                	push   0x0
c00253cc:	56                   	push   esi
c00253cd:	53                   	push   ebx
c00253ce:	e8 89 fd ff ff       	call   c002515c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c00253d3:	83 c4 1c             	add    esp,0x1c
c00253d6:	6a 0c                	push   0xc
c00253d8:	6a 00                	push   0x0
c00253da:	56                   	push   esi
c00253db:	e8 98 b3 fd ff       	call   c0000778 <memset>
c00253e0:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c00253e5:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c00253ea:	83 c4 0c             	add    esp,0xc
c00253ed:	6a 01                	push   0x1
c00253ef:	8d 44 24 16          	lea    eax,[esp+0x16]
c00253f3:	50                   	push   eax
c00253f4:	6a 00                	push   0x0
c00253f6:	6a 00                	push   0x0
c00253f8:	6a 12                	push   0x12
c00253fa:	56                   	push   esi
c00253fb:	53                   	push   ebx
c00253fc:	e8 5b fd ff ff       	call   c002515c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0025401:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c0025405:	83 c4 20             	add    esp,0x20
c0025408:	83 e0 7f             	and    eax,0x7f
c002540b:	3c 70                	cmp    al,0x70
c002540d:	74 15                	je     c0025424 <SATAPI::detectMedia()+0x7c>
c002540f:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0025416:	75 0c                	jne    c0025424 <SATAPI::detectMedia()+0x7c>
c0025418:	83 ec 0c             	sub    esp,0xc
c002541b:	53                   	push   ebx
c002541c:	e8 0d fd ff ff       	call   c002512e <SATAPI::diskInserted()>
c0025421:	83 c4 10             	add    esp,0x10
c0025424:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0025428:	83 e0 0f             	and    eax,0xf
c002542b:	3c 02                	cmp    al,0x2
c002542d:	75 1b                	jne    c002544a <SATAPI::detectMedia()+0xa2>
c002542f:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c0025434:	75 2d                	jne    c0025463 <SATAPI::detectMedia()+0xbb>
c0025436:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c002543d:	74 24                	je     c0025463 <SATAPI::detectMedia()+0xbb>
c002543f:	83 ec 0c             	sub    esp,0xc
c0025442:	53                   	push   ebx
c0025443:	e8 ca fc ff ff       	call   c0025112 <SATAPI::diskRemoved()>
c0025448:	eb 16                	jmp    c0025460 <SATAPI::detectMedia()+0xb8>
c002544a:	84 c0                	test   al,al
c002544c:	75 15                	jne    c0025463 <SATAPI::detectMedia()+0xbb>
c002544e:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0025455:	75 0c                	jne    c0025463 <SATAPI::detectMedia()+0xbb>
c0025457:	83 ec 0c             	sub    esp,0xc
c002545a:	53                   	push   ebx
c002545b:	e8 ce fc ff ff       	call   c002512e <SATAPI::diskInserted()>
c0025460:	83 c4 10             	add    esp,0x10
c0025463:	83 c4 24             	add    esp,0x24
c0025466:	5b                   	pop    ebx
c0025467:	5e                   	pop    esi
c0025468:	c3                   	ret    
c0025469:	90                   	nop

c002546a <SATAPI::open(int, int, void*)>:
c002546a:	56                   	push   esi
c002546b:	53                   	push   ebx
c002546c:	50                   	push   eax
c002546d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0025471:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025475:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c002547f:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c0025485:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c002548f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025493:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c002549d:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c00254a3:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c00254aa:	e8 d7 aa fe ff       	call   c000ff86 <Phys::allocatePage()>
c00254af:	89 c6                	mov    esi,eax
c00254b1:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c00254b7:	81 c6 00 10 00 00    	add    esi,0x1000
c00254bd:	e8 c4 aa fe ff       	call   c000ff86 <Phys::allocatePage()>
c00254c2:	39 c6                	cmp    esi,eax
c00254c4:	74 10                	je     c00254d6 <SATAPI::open(int, int, void*)+0x6c>
c00254c6:	83 ec 0c             	sub    esp,0xc
c00254c9:	68 4b d2 02 c0       	push   0xc002d24b
c00254ce:	e8 c2 51 ff ff       	call   c001a695 <Krnl::panic(char const*)>
c00254d3:	83 c4 10             	add    esp,0x10
c00254d6:	83 ec 0c             	sub    esp,0xc
c00254d9:	6a 02                	push   0x2
c00254db:	e8 43 c7 fe ff       	call   c0011c23 <Virt::allocateKernelVirtualPages(int)>
c00254e0:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c00254e6:	e8 d3 c9 fe ff       	call   c0011ebe <Virt::getAKernelVAS()>
c00254eb:	6a 03                	push   0x3
c00254ed:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c00254f3:	ff b3 78 01 00 00    	push   DWORD PTR [ebx+0x178]
c00254f9:	50                   	push   eax
c00254fa:	e8 fb ce fe ff       	call   c00123fa <VAS::mapPage(unsigned long, unsigned long, int)>
c00254ff:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c0025506:	83 c4 14             	add    esp,0x14
c0025509:	53                   	push   ebx
c002550a:	e8 99 fe ff ff       	call   c00253a8 <SATAPI::detectMedia()>
c002550f:	83 c4 14             	add    esp,0x14
c0025512:	31 c0                	xor    eax,eax
c0025514:	5b                   	pop    ebx
c0025515:	5e                   	pop    esi
c0025516:	c3                   	ret    
c0025517:	90                   	nop

c0025518 <SATAPI::read(unsigned long long, int, void*)>:
c0025518:	55                   	push   ebp
c0025519:	57                   	push   edi
c002551a:	56                   	push   esi
c002551b:	53                   	push   ebx
c002551c:	83 ec 1c             	sub    esp,0x1c
c002551f:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0025523:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0025527:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c002552b:	80 bd 74 01 00 00 00 	cmp    BYTE PTR [ebp+0x174],0x0
c0025532:	74 19                	je     c002554d <SATAPI::read(unsigned long long, int, void*)+0x35>
c0025534:	83 7c 24 3c 04       	cmp    DWORD PTR [esp+0x3c],0x4
c0025539:	7e 2e                	jle    c0025569 <SATAPI::read(unsigned long long, int, void*)+0x51>
c002553b:	83 ec 0c             	sub    esp,0xc
c002553e:	68 61 d2 02 c0       	push   0xc002d261
c0025543:	e8 4d 51 ff ff       	call   c001a695 <Krnl::panic(char const*)>
c0025548:	83 c4 10             	add    esp,0x10
c002554b:	eb 1c                	jmp    c0025569 <SATAPI::read(unsigned long long, int, void*)+0x51>
c002554d:	83 ec 0c             	sub    esp,0xc
c0025550:	55                   	push   ebp
c0025551:	e8 52 fe ff ff       	call   c00253a8 <SATAPI::detectMedia()>
c0025556:	83 c4 10             	add    esp,0x10
c0025559:	b8 02 00 00 00       	mov    eax,0x2
c002555e:	80 bd 74 01 00 00 00 	cmp    BYTE PTR [ebp+0x174],0x0
c0025565:	75 cd                	jne    c0025534 <SATAPI::read(unsigned long long, int, void*)+0x1c>
c0025567:	eb 49                	jmp    c00255b2 <SATAPI::read(unsigned long long, int, void*)+0x9a>
c0025569:	8d 7c 24 04          	lea    edi,[esp+0x4]
c002556d:	b9 03 00 00 00       	mov    ecx,0x3
c0025572:	fc                   	cld    
c0025573:	31 c0                	xor    eax,eax
c0025575:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0025577:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c002557c:	89 d8                	mov    eax,ebx
c002557e:	86 e0                	xchg   al,ah
c0025580:	c1 c0 10             	rol    eax,0x10
c0025583:	86 e0                	xchg   al,ah
c0025585:	89 44 24 06          	mov    DWORD PTR [esp+0x6],eax
c0025589:	8a 44 24 3c          	mov    al,BYTE PTR [esp+0x3c]
c002558d:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0025591:	50                   	push   eax
c0025592:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0025596:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c002559a:	56                   	push   esi
c002559b:	53                   	push   ebx
c002559c:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00255a0:	c1 e0 0b             	shl    eax,0xb
c00255a3:	50                   	push   eax
c00255a4:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00255a8:	50                   	push   eax
c00255a9:	55                   	push   ebp
c00255aa:	e8 ad fb ff ff       	call   c002515c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c00255af:	83 c4 20             	add    esp,0x20
c00255b2:	83 c4 1c             	add    esp,0x1c
c00255b5:	5b                   	pop    ebx
c00255b6:	5e                   	pop    esi
c00255b7:	5f                   	pop    edi
c00255b8:	5d                   	pop    ebp
c00255b9:	c3                   	ret    

c00255ba <AVX::open(int, int, void*)>:
c00255ba:	83 ec 0c             	sub    esp,0xc
c00255bd:	e8 46 11 00 00       	call   c0026708 <avxInit>
c00255c2:	b8 00 00 00 00       	mov    eax,0x0
c00255c7:	83 c4 0c             	add    esp,0xc
c00255ca:	c3                   	ret    
c00255cb:	90                   	nop

c00255cc <AVX::close(int, int, void*)>:
c00255cc:	83 ec 0c             	sub    esp,0xc
c00255cf:	e8 35 11 00 00       	call   c0026709 <avxClose>
c00255d4:	b8 00 00 00 00       	mov    eax,0x0
c00255d9:	83 c4 0c             	add    esp,0xc
c00255dc:	c3                   	ret    
c00255dd:	90                   	nop

c00255de <AVX::available()>:
c00255de:	83 ec 0c             	sub    esp,0xc
c00255e1:	e8 1a 11 00 00       	call   c0026700 <avxDetect>
c00255e6:	85 c0                	test   eax,eax
c00255e8:	0f 95 c0             	setne  al
c00255eb:	83 c4 0c             	add    esp,0xc
c00255ee:	c3                   	ret    
c00255ef:	90                   	nop

c00255f0 <AVX::save(void*)>:
c00255f0:	83 ec 0c             	sub    esp,0xc
c00255f3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00255f7:	83 ec 0c             	sub    esp,0xc
c00255fa:	50                   	push   eax
c00255fb:	e8 06 11 00 00       	call   c0026706 <avxSave>
c0025600:	83 c4 10             	add    esp,0x10
c0025603:	90                   	nop
c0025604:	83 c4 0c             	add    esp,0xc
c0025607:	c3                   	ret    

c0025608 <AVX::load(void*)>:
c0025608:	83 ec 0c             	sub    esp,0xc
c002560b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002560f:	83 ec 0c             	sub    esp,0xc
c0025612:	50                   	push   eax
c0025613:	e8 ef 10 00 00       	call   c0026707 <avxLoad>
c0025618:	83 c4 10             	add    esp,0x10
c002561b:	90                   	nop
c002561c:	83 c4 0c             	add    esp,0xc
c002561f:	c3                   	ret    

c0025620 <AVX::AVX()>:
c0025620:	83 ec 0c             	sub    esp,0xc
c0025623:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025627:	83 ec 08             	sub    esp,0x8
c002562a:	68 c4 d2 02 c0       	push   0xc002d2c4
c002562f:	50                   	push   eax
c0025630:	e8 d7 f2 fe ff       	call   c001490c <FPU::FPU(char const*)>
c0025635:	83 c4 10             	add    esp,0x10
c0025638:	ba d4 d2 02 c0       	mov    edx,0xc002d2d4
c002563d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025641:	89 10                	mov    DWORD PTR [eax],edx
c0025643:	90                   	nop
c0025644:	83 c4 0c             	add    esp,0xc
c0025647:	c3                   	ret    

c0025648 <MMX::available()>:
c0025648:	a1 e8 e6 02 c0       	mov    eax,ds:0xc002e6e8
c002564d:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0025653:	83 e0 20             	and    eax,0x20
c0025656:	84 c0                	test   al,al
c0025658:	0f 95 c0             	setne  al
c002565b:	c3                   	ret    

c002565c <MMX::open(int, int, void*)>:
c002565c:	83 ec 0c             	sub    esp,0xc
c002565f:	e8 28 11 00 00       	call   c002678c <x87Init>
c0025664:	b8 00 00 00 00       	mov    eax,0x0
c0025669:	83 c4 0c             	add    esp,0xc
c002566c:	c3                   	ret    
c002566d:	90                   	nop

c002566e <MMX::close(int, int, void*)>:
c002566e:	83 ec 0c             	sub    esp,0xc
c0025671:	e8 30 11 00 00       	call   c00267a6 <x87Close>
c0025676:	b8 00 00 00 00       	mov    eax,0x0
c002567b:	83 c4 0c             	add    esp,0xc
c002567e:	c3                   	ret    
c002567f:	90                   	nop

c0025680 <MMX::save(void*)>:
c0025680:	83 ec 0c             	sub    esp,0xc
c0025683:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025687:	83 ec 0c             	sub    esp,0xc
c002568a:	50                   	push   eax
c002568b:	e8 f1 10 00 00       	call   c0026781 <x87Save>
c0025690:	83 c4 10             	add    esp,0x10
c0025693:	90                   	nop
c0025694:	83 c4 0c             	add    esp,0xc
c0025697:	c3                   	ret    

c0025698 <MMX::load(void*)>:
c0025698:	83 ec 0c             	sub    esp,0xc
c002569b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002569f:	83 ec 0c             	sub    esp,0xc
c00256a2:	50                   	push   eax
c00256a3:	e8 df 10 00 00       	call   c0026787 <x87Load>
c00256a8:	83 c4 10             	add    esp,0x10
c00256ab:	90                   	nop
c00256ac:	83 c4 0c             	add    esp,0xc
c00256af:	c3                   	ret    

c00256b0 <MMX::MMX()>:
c00256b0:	83 ec 0c             	sub    esp,0xc
c00256b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00256b7:	83 ec 08             	sub    esp,0x8
c00256ba:	68 04 d3 02 c0       	push   0xc002d304
c00256bf:	50                   	push   eax
c00256c0:	e8 47 f2 fe ff       	call   c001490c <FPU::FPU(char const*)>
c00256c5:	83 c4 10             	add    esp,0x10
c00256c8:	ba 14 d3 02 c0       	mov    edx,0xc002d314
c00256cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00256d1:	89 10                	mov    DWORD PTR [eax],edx
c00256d3:	90                   	nop
c00256d4:	83 c4 0c             	add    esp,0xc
c00256d7:	c3                   	ret    

c00256d8 <SSE::open(int, int, void*)>:
c00256d8:	83 ec 0c             	sub    esp,0xc
c00256db:	e8 64 10 00 00       	call   c0026744 <sseInit>
c00256e0:	b8 00 00 00 00       	mov    eax,0x0
c00256e5:	83 c4 0c             	add    esp,0xc
c00256e8:	c3                   	ret    
c00256e9:	90                   	nop

c00256ea <SSE::close(int, int, void*)>:
c00256ea:	83 ec 0c             	sub    esp,0xc
c00256ed:	e8 62 10 00 00       	call   c0026754 <sseClose>
c00256f2:	b8 00 00 00 00       	mov    eax,0x0
c00256f7:	83 c4 0c             	add    esp,0xc
c00256fa:	c3                   	ret    
c00256fb:	90                   	nop

c00256fc <SSE::available()>:
c00256fc:	83 ec 1c             	sub    esp,0x1c
c00256ff:	e8 1c 10 00 00       	call   c0026720 <absolutelyNoChanceInHell>
c0025704:	85 c0                	test   eax,eax
c0025706:	0f 95 c0             	setne  al
c0025709:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c002570d:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0025711:	83 c4 1c             	add    esp,0x1c
c0025714:	c3                   	ret    
c0025715:	90                   	nop

c0025716 <SSE::save(void*)>:
c0025716:	83 ec 0c             	sub    esp,0xc
c0025719:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002571d:	83 ec 0c             	sub    esp,0xc
c0025720:	50                   	push   eax
c0025721:	e8 12 10 00 00       	call   c0026738 <sseSave>
c0025726:	83 c4 10             	add    esp,0x10
c0025729:	90                   	nop
c002572a:	83 c4 0c             	add    esp,0xc
c002572d:	c3                   	ret    

c002572e <SSE::load(void*)>:
c002572e:	83 ec 0c             	sub    esp,0xc
c0025731:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025735:	83 ec 0c             	sub    esp,0xc
c0025738:	50                   	push   eax
c0025739:	e8 00 10 00 00       	call   c002673e <sseLoad>
c002573e:	83 c4 10             	add    esp,0x10
c0025741:	90                   	nop
c0025742:	83 c4 0c             	add    esp,0xc
c0025745:	c3                   	ret    

c0025746 <SSE::SSE()>:
c0025746:	83 ec 0c             	sub    esp,0xc
c0025749:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002574d:	83 ec 08             	sub    esp,0x8
c0025750:	68 44 d3 02 c0       	push   0xc002d344
c0025755:	50                   	push   eax
c0025756:	e8 b1 f1 fe ff       	call   c001490c <FPU::FPU(char const*)>
c002575b:	83 c4 10             	add    esp,0x10
c002575e:	ba 54 d3 02 c0       	mov    edx,0xc002d354
c0025763:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025767:	89 10                	mov    DWORD PTR [eax],edx
c0025769:	90                   	nop
c002576a:	83 c4 0c             	add    esp,0xc
c002576d:	c3                   	ret    

c002576e <x87::open(int, int, void*)>:
c002576e:	83 ec 0c             	sub    esp,0xc
c0025771:	e8 16 10 00 00       	call   c002678c <x87Init>
c0025776:	b8 00 00 00 00       	mov    eax,0x0
c002577b:	83 c4 0c             	add    esp,0xc
c002577e:	c3                   	ret    
c002577f:	90                   	nop

c0025780 <x87::close(int, int, void*)>:
c0025780:	83 ec 0c             	sub    esp,0xc
c0025783:	e8 1e 10 00 00       	call   c00267a6 <x87Close>
c0025788:	b8 00 00 00 00       	mov    eax,0x0
c002578d:	83 c4 0c             	add    esp,0xc
c0025790:	c3                   	ret    
c0025791:	90                   	nop

c0025792 <x87::available()>:
c0025792:	83 ec 0c             	sub    esp,0xc
c0025795:	e8 cc 0f 00 00       	call   c0026766 <x87Detect>
c002579a:	85 c0                	test   eax,eax
c002579c:	0f 95 c0             	setne  al
c002579f:	83 c4 0c             	add    esp,0xc
c00257a2:	c3                   	ret    
c00257a3:	90                   	nop

c00257a4 <x87::save(void*)>:
c00257a4:	83 ec 0c             	sub    esp,0xc
c00257a7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00257ab:	83 ec 0c             	sub    esp,0xc
c00257ae:	50                   	push   eax
c00257af:	e8 cd 0f 00 00       	call   c0026781 <x87Save>
c00257b4:	83 c4 10             	add    esp,0x10
c00257b7:	90                   	nop
c00257b8:	83 c4 0c             	add    esp,0xc
c00257bb:	c3                   	ret    

c00257bc <x87::load(void*)>:
c00257bc:	83 ec 0c             	sub    esp,0xc
c00257bf:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00257c3:	83 ec 0c             	sub    esp,0xc
c00257c6:	50                   	push   eax
c00257c7:	e8 bb 0f 00 00       	call   c0026787 <x87Load>
c00257cc:	83 c4 10             	add    esp,0x10
c00257cf:	90                   	nop
c00257d0:	83 c4 0c             	add    esp,0xc
c00257d3:	c3                   	ret    

c00257d4 <x87::x87()>:
c00257d4:	83 ec 0c             	sub    esp,0xc
c00257d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00257db:	83 ec 08             	sub    esp,0x8
c00257de:	68 84 d3 02 c0       	push   0xc002d384
c00257e3:	50                   	push   eax
c00257e4:	e8 23 f1 fe ff       	call   c001490c <FPU::FPU(char const*)>
c00257e9:	83 c4 10             	add    esp,0x10
c00257ec:	ba 94 d3 02 c0       	mov    edx,0xc002d394
c00257f1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00257f5:	89 10                	mov    DWORD PTR [eax],edx
c00257f7:	90                   	nop
c00257f8:	83 c4 0c             	add    esp,0xc
c00257fb:	c3                   	ret    

c00257fc <APIC::disable()>:
c00257fc:	90                   	nop
c00257fd:	c3                   	ret    

c00257fe <APIC::close(int, int, void*)>:
c00257fe:	55                   	push   ebp
c00257ff:	89 e5                	mov    ebp,esp
c0025801:	83 ec 08             	sub    esp,0x8
c0025804:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025807:	8b 00                	mov    eax,DWORD PTR [eax]
c0025809:	83 c0 3c             	add    eax,0x3c
c002580c:	8b 00                	mov    eax,DWORD PTR [eax]
c002580e:	83 ec 0c             	sub    esp,0xc
c0025811:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025814:	ff d0                	call   eax
c0025816:	83 c4 10             	add    esp,0x10
c0025819:	b8 00 00 00 00       	mov    eax,0x0
c002581e:	c9                   	leave  
c002581f:	c3                   	ret    

c0025820 <IOAPIC::close(int, int, void*)>:
c0025820:	b8 00 00 00 00       	mov    eax,0x0
c0025825:	c3                   	ret    

c0025826 <APIC::io_wait()>:
c0025826:	eb 00                	jmp    c0025828 <APIC::io_wait()+0x2>
c0025828:	eb 00                	jmp    c002582a <APIC::io_wait()+0x4>
c002582a:	90                   	nop
c002582b:	c3                   	ret    

c002582c <APIC::getBase()>:
c002582c:	55                   	push   ebp
c002582d:	89 e5                	mov    ebp,esp
c002582f:	83 ec 18             	sub    esp,0x18
c0025832:	a1 e8 e6 02 c0       	mov    eax,ds:0xc002e6e8
c0025837:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c002583d:	83 e0 08             	and    eax,0x8
c0025840:	84 c0                	test   al,al
c0025842:	75 07                	jne    c002584b <APIC::getBase()+0x1f>
c0025844:	b8 00 00 00 00       	mov    eax,0x0
c0025849:	eb 21                	jmp    c002586c <APIC::getBase()+0x40>
c002584b:	a1 e8 e6 02 c0       	mov    eax,ds:0xc002e6e8
c0025850:	83 ec 08             	sub    esp,0x8
c0025853:	6a 1b                	push   0x1b
c0025855:	50                   	push   eax
c0025856:	e8 31 96 fe ff       	call   c000ee8c <Computer::rdmsr(unsigned int)>
c002585b:	83 c4 10             	add    esp,0x10
c002585e:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0025861:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0025864:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0025867:	25 00 f0 ff ff       	and    eax,0xfffff000
c002586c:	c9                   	leave  
c002586d:	c3                   	ret    

c002586e <APIC::eoi(unsigned char)>:
c002586e:	55                   	push   ebp
c002586f:	89 e5                	mov    ebp,esp
c0025871:	83 ec 28             	sub    esp,0x28
c0025874:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025877:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c002587a:	83 ec 0c             	sub    esp,0xc
c002587d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025880:	e8 a7 ff ff ff       	call   c002582c <APIC::getBase()>
c0025885:	83 c4 10             	add    esp,0x10
c0025888:	05 b0 00 00 00       	add    eax,0xb0
c002588d:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0025890:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0025893:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0025899:	90                   	nop
c002589a:	c9                   	leave  
c002589b:	c3                   	ret    

c002589c <APIC::open(int, int, void*)>:
c002589c:	55                   	push   ebp
c002589d:	89 e5                	mov    ebp,esp
c002589f:	57                   	push   edi
c00258a0:	56                   	push   esi
c00258a1:	53                   	push   ebx
c00258a2:	83 ec 2c             	sub    esp,0x2c
c00258a5:	83 ec 0c             	sub    esp,0xc
c00258a8:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00258ab:	e8 7c ff ff ff       	call   c002582c <APIC::getBase()>
c00258b0:	83 c4 10             	add    esp,0x10
c00258b3:	89 c2                	mov    edx,eax
c00258b5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00258b8:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c00258be:	0f b6 f8             	movzx  edi,al
c00258c1:	89 d0                	mov    eax,edx
c00258c3:	ba 00 00 00 00       	mov    edx,0x0
c00258c8:	89 c1                	mov    ecx,eax
c00258ca:	80 e5 ff             	and    ch,0xff
c00258cd:	89 cb                	mov    ebx,ecx
c00258cf:	0f b6 f2             	movzx  esi,dl
c00258d2:	89 d8                	mov    eax,ebx
c00258d4:	89 f2                	mov    edx,esi
c00258d6:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c00258d9:	8d 5f 08             	lea    ebx,[edi+0x8]
c00258dc:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c00258e0:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c00258e4:	83 e0 00             	and    eax,0x0
c00258e7:	09 d0                	or     eax,edx
c00258e9:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c00258ed:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00258f0:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c00258f6:	8d 50 01             	lea    edx,[eax+0x1]
c00258f9:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c00258fc:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0025902:	0f b6 d0             	movzx  edx,al
c0025905:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025908:	83 c2 08             	add    edx,0x8
c002590b:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c002590f:	0f b6 c9             	movzx  ecx,cl
c0025912:	81 c9 00 00 01 00    	or     ecx,0x10000
c0025918:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c002591c:	83 ec 0c             	sub    esp,0xc
c002591f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025922:	e8 05 ff ff ff       	call   c002582c <APIC::getBase()>
c0025927:	83 c4 10             	add    esp,0x10
c002592a:	05 f0 00 00 00       	add    eax,0xf0
c002592f:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0025932:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0025935:	8b 00                	mov    eax,DWORD PTR [eax]
c0025937:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c002593a:	81 4d dc 00 01 00 00 	or     DWORD PTR [ebp-0x24],0x100
c0025941:	81 4d dc ff 00 00 00 	or     DWORD PTR [ebp-0x24],0xff
c0025948:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c002594b:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c002594e:	89 10                	mov    DWORD PTR [eax],edx
c0025950:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
c0025957:	a1 d0 0f 03 c0       	mov    eax,ds:0xc0030fd0
c002595c:	39 45 e4             	cmp    DWORD PTR [ebp-0x1c],eax
c002595f:	7d 7c                	jge    c00259dd <APIC::open(int, int, void*)+0x141>
c0025961:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0025964:	8b 04 85 e0 0f 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf020]
c002596b:	88 45 db             	mov    BYTE PTR [ebp-0x25],al
c002596e:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0025971:	8b 04 85 e0 0f 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf020]
c0025978:	c1 e8 08             	shr    eax,0x8
c002597b:	66 89 45 d8          	mov    WORD PTR [ebp-0x28],ax
c002597f:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0025982:	8b 04 85 e0 0f 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf020]
c0025989:	c1 e8 18             	shr    eax,0x18
c002598c:	88 45 d7             	mov    BYTE PTR [ebp-0x29],al
c002598f:	80 7d db ff          	cmp    BYTE PTR [ebp-0x25],0xff
c0025993:	75 40                	jne    c00259d5 <APIC::open(int, int, void*)+0x139>
c0025995:	83 ec 0c             	sub    esp,0xc
c0025998:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002599b:	e8 8c fe ff ff       	call   c002582c <APIC::getBase()>
c00259a0:	83 c4 10             	add    esp,0x10
c00259a3:	80 7d d7 01          	cmp    BYTE PTR [ebp-0x29],0x1
c00259a7:	75 07                	jne    c00259b0 <APIC::open(int, int, void*)+0x114>
c00259a9:	ba 60 03 00 00       	mov    edx,0x360
c00259ae:	eb 05                	jmp    c00259b5 <APIC::open(int, int, void*)+0x119>
c00259b0:	ba 50 03 00 00       	mov    edx,0x350
c00259b5:	01 d0                	add    eax,edx
c00259b7:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c00259ba:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c00259bd:	8b 00                	mov    eax,DWORD PTR [eax]
c00259bf:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c00259c2:	81 65 cc 00 ff ff ff 	and    DWORD PTR [ebp-0x34],0xffffff00
c00259c9:	83 4d cc 02          	or     DWORD PTR [ebp-0x34],0x2
c00259cd:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c00259d0:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c00259d3:	89 10                	mov    DWORD PTR [eax],edx
c00259d5:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
c00259d8:	e9 7a ff ff ff       	jmp    c0025957 <APIC::open(int, int, void*)+0xbb>
c00259dd:	b8 00 00 00 00       	mov    eax,0x0
c00259e2:	8d 65 f4             	lea    esp,[ebp-0xc]
c00259e5:	5b                   	pop    ebx
c00259e6:	5e                   	pop    esi
c00259e7:	5f                   	pop    edi
c00259e8:	5d                   	pop    ebp
c00259e9:	c3                   	ret    

c00259ea <IOAPIC::IOAPIC()>:
c00259ea:	83 ec 0c             	sub    esp,0xc
c00259ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00259f1:	83 ec 08             	sub    esp,0x8
c00259f4:	68 c4 d3 02 c0       	push   0xc002d3c4
c00259f9:	50                   	push   eax
c00259fa:	e8 fb eb fe ff       	call   c00145fa <Device::Device(char const*)>
c00259ff:	83 c4 10             	add    esp,0x10
c0025a02:	ba ec d4 02 c0       	mov    edx,0xc002d4ec
c0025a07:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025a0b:	89 10                	mov    DWORD PTR [eax],edx
c0025a0d:	90                   	nop
c0025a0e:	83 c4 0c             	add    esp,0xc
c0025a11:	c3                   	ret    

c0025a12 <APIC::APIC()>:
c0025a12:	53                   	push   ebx
c0025a13:	83 ec 18             	sub    esp,0x18
c0025a16:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0025a1a:	83 ec 08             	sub    esp,0x8
c0025a1d:	68 cc d3 02 c0       	push   0xc002d3cc
c0025a22:	50                   	push   eax
c0025a23:	e8 3e f3 fe ff       	call   c0014d66 <InterruptController::InterruptController(char const*)>
c0025a28:	83 c4 10             	add    esp,0x10
c0025a2b:	ba a4 d4 02 c0       	mov    edx,0xc002d4a4
c0025a30:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0025a34:	89 10                	mov    DWORD PTR [eax],edx
c0025a36:	a0 a0 2a 03 c0       	mov    al,ds:0xc0032aa0
c0025a3b:	83 f0 01             	xor    eax,0x1
c0025a3e:	84 c0                	test   al,al
c0025a40:	0f 84 a1 00 00 00    	je     c0025ae7 <APIC::APIC()+0xd5>
c0025a46:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0025a4b:	a0 80 10 03 c0       	mov    al,ds:0xc0031080
c0025a50:	38 44 24 0f          	cmp    BYTE PTR [esp+0xf],al
c0025a54:	0f 83 86 00 00 00    	jae    c0025ae0 <APIC::APIC()+0xce>
c0025a5a:	c7 44 24 04 68 01 00 00 	mov    DWORD PTR [esp+0x4],0x168
c0025a62:	83 ec 0c             	sub    esp,0xc
c0025a65:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0025a69:	e8 76 9e fe ff       	call   c000f8e4 <malloc>
c0025a6e:	83 c4 10             	add    esp,0x10
c0025a71:	89 c3                	mov    ebx,eax
c0025a73:	83 ec 0c             	sub    esp,0xc
c0025a76:	53                   	push   ebx
c0025a77:	e8 6e ff ff ff       	call   c00259ea <IOAPIC::IOAPIC()>
c0025a7c:	83 c4 10             	add    esp,0x10
c0025a7f:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0025a83:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0025a88:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0025a8c:	89 14 85 80 2a 03 c0 	mov    DWORD PTR [eax*4-0x3ffcd580],edx
c0025a93:	a1 60 2a 03 c0       	mov    eax,ds:0xc0032a60
c0025a98:	40                   	inc    eax
c0025a99:	a3 60 2a 03 c0       	mov    ds:0xc0032a60,eax
c0025a9e:	a1 e8 e6 02 c0       	mov    eax,ds:0xc002e6e8
c0025aa3:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c0025aa9:	83 ec 08             	sub    esp,0x8
c0025aac:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0025ab0:	50                   	push   eax
c0025ab1:	e8 54 e9 fe ff       	call   c001440a <Device::addChild(Device*)>
c0025ab6:	83 c4 10             	add    esp,0x10
c0025ab9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0025abd:	8b 00                	mov    eax,DWORD PTR [eax]
c0025abf:	83 c0 08             	add    eax,0x8
c0025ac2:	8b 00                	mov    eax,DWORD PTR [eax]
c0025ac4:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0025ac9:	6a 00                	push   0x0
c0025acb:	6a 00                	push   0x0
c0025acd:	52                   	push   edx
c0025ace:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0025ad2:	ff d0                	call   eax
c0025ad4:	83 c4 10             	add    esp,0x10
c0025ad7:	fe 44 24 0f          	inc    BYTE PTR [esp+0xf]
c0025adb:	e9 6b ff ff ff       	jmp    c0025a4b <APIC::APIC()+0x39>
c0025ae0:	c6 05 a0 2a 03 c0 01 	mov    BYTE PTR ds:0xc0032aa0,0x1
c0025ae7:	90                   	nop
c0025ae8:	83 c4 18             	add    esp,0x18
c0025aeb:	5b                   	pop    ebx
c0025aec:	c3                   	ret    
c0025aed:	90                   	nop

c0025aee <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c0025aee:	55                   	push   ebp
c0025aef:	89 e5                	mov    ebp,esp
c0025af1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025af4:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0025afa:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c0025afd:	72 1d                	jb     c0025b1c <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c0025aff:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025b02:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c0025b08:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025b0b:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c0025b11:	01 d0                	add    eax,edx
c0025b13:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c0025b16:	73 04                	jae    c0025b1c <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c0025b18:	b0 01                	mov    al,0x1
c0025b1a:	eb 02                	jmp    c0025b1e <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c0025b1c:	b0 00                	mov    al,0x0
c0025b1e:	5d                   	pop    ebp
c0025b1f:	c3                   	ret    

c0025b20 <IOAPIC::read(int)>:
c0025b20:	55                   	push   ebp
c0025b21:	89 e5                	mov    ebp,esp
c0025b23:	83 ec 10             	sub    esp,0x10
c0025b26:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025b29:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0025b2f:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0025b32:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025b35:	0f b6 d0             	movzx  edx,al
c0025b38:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0025b3b:	89 10                	mov    DWORD PTR [eax],edx
c0025b3d:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0025b40:	83 c0 10             	add    eax,0x10
c0025b43:	8b 00                	mov    eax,DWORD PTR [eax]
c0025b45:	c9                   	leave  
c0025b46:	c3                   	ret    
c0025b47:	90                   	nop

c0025b48 <IOAPIC::open(int, int, void*)>:
c0025b48:	55                   	push   ebp
c0025b49:	89 e5                	mov    ebp,esp
c0025b4b:	57                   	push   edi
c0025b4c:	56                   	push   esi
c0025b4d:	53                   	push   ebx
c0025b4e:	83 ec 0c             	sub    esp,0xc
c0025b51:	83 ec 0c             	sub    esp,0xc
c0025b54:	68 f7 d3 02 c0       	push   0xc002d3f7
c0025b59:	e8 85 d4 fe ff       	call   c0012fe3 <Dbg::kprintf(char const*, ...)>
c0025b5e:	83 c4 10             	add    esp,0x10
c0025b61:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025b64:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025b67:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0025b6d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025b70:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0025b76:	8b 14 85 c0 10 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcef40]
c0025b7d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025b80:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0025b86:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025b89:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0025b8f:	8b 14 85 40 11 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffceec0]
c0025b96:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025b99:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c0025b9f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025ba2:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0025ba8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025bab:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0025bb1:	0f b6 f8             	movzx  edi,al
c0025bb4:	89 d0                	mov    eax,edx
c0025bb6:	ba 00 00 00 00       	mov    edx,0x0
c0025bbb:	89 c1                	mov    ecx,eax
c0025bbd:	80 e5 ff             	and    ch,0xff
c0025bc0:	89 cb                	mov    ebx,ecx
c0025bc2:	0f b6 f2             	movzx  esi,dl
c0025bc5:	89 d8                	mov    eax,ebx
c0025bc7:	89 f2                	mov    edx,esi
c0025bc9:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0025bcc:	8d 5f 08             	lea    ebx,[edi+0x8]
c0025bcf:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0025bd3:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0025bd7:	83 e0 00             	and    eax,0x0
c0025bda:	09 d0                	or     eax,edx
c0025bdc:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0025be0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025be3:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0025be9:	8d 50 01             	lea    edx,[eax+0x1]
c0025bec:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0025bef:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0025bf5:	0f b6 d0             	movzx  edx,al
c0025bf8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025bfb:	83 c2 08             	add    edx,0x8
c0025bfe:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0025c02:	0f b6 c9             	movzx  ecx,cl
c0025c05:	81 c9 00 ad de 00    	or     ecx,0xdead00
c0025c0b:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0025c0f:	83 ec 08             	sub    esp,0x8
c0025c12:	6a 01                	push   0x1
c0025c14:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025c17:	e8 04 ff ff ff       	call   c0025b20 <IOAPIC::read(int)>
c0025c1c:	83 c4 10             	add    esp,0x10
c0025c1f:	c1 f8 10             	sar    eax,0x10
c0025c22:	0f b6 c0             	movzx  eax,al
c0025c25:	8d 50 01             	lea    edx,[eax+0x1]
c0025c28:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025c2b:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c0025c31:	b8 00 00 00 00       	mov    eax,0x0
c0025c36:	8d 65 f4             	lea    esp,[ebp-0xc]
c0025c39:	5b                   	pop    ebx
c0025c3a:	5e                   	pop    esi
c0025c3b:	5f                   	pop    edi
c0025c3c:	5d                   	pop    ebp
c0025c3d:	c3                   	ret    

c0025c3e <IOAPIC::write(int, int)>:
c0025c3e:	55                   	push   ebp
c0025c3f:	89 e5                	mov    ebp,esp
c0025c41:	83 ec 10             	sub    esp,0x10
c0025c44:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025c47:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0025c4d:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0025c50:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025c53:	0f b6 d0             	movzx  edx,al
c0025c56:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0025c59:	89 10                	mov    DWORD PTR [eax],edx
c0025c5b:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0025c5e:	8d 50 10             	lea    edx,[eax+0x10]
c0025c61:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0025c64:	89 02                	mov    DWORD PTR [edx],eax
c0025c66:	90                   	nop
c0025c67:	c9                   	leave  
c0025c68:	c3                   	ret    
c0025c69:	90                   	nop

c0025c6a <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c0025c6a:	55                   	push   ebp
c0025c6b:	89 e5                	mov    ebp,esp
c0025c6d:	53                   	push   ebx
c0025c6e:	83 ec 2c             	sub    esp,0x2c
c0025c71:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025c74:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c0025c77:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c0025c7a:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c0025c7d:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0025c80:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0025c83:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0025c86:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0025c89:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0025c8c:	88 d8                	mov    al,bl
c0025c8e:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c0025c91:	88 c8                	mov    al,cl
c0025c93:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c0025c96:	88 d0                	mov    al,dl
c0025c98:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c0025c9b:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0025c9f:	83 c0 08             	add    eax,0x8
c0025ca2:	01 c0                	add    eax,eax
c0025ca4:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0025ca7:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0025cab:	83 c0 08             	add    eax,0x8
c0025cae:	01 c0                	add    eax,eax
c0025cb0:	40                   	inc    eax
c0025cb1:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0025cb4:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0025cb7:	50                   	push   eax
c0025cb8:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025cbb:	e8 60 fe ff ff       	call   c0025b20 <IOAPIC::read(int)>
c0025cc0:	83 c4 08             	add    esp,0x8
c0025cc3:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0025cc6:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c0025ccd:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0025cd0:	c1 e0 18             	shl    eax,0x18
c0025cd3:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c0025cd6:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0025cd9:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0025cdc:	52                   	push   edx
c0025cdd:	50                   	push   eax
c0025cde:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025ce1:	e8 58 ff ff ff       	call   c0025c3e <IOAPIC::write(int, int)>
c0025ce6:	83 c4 0c             	add    esp,0xc
c0025ce9:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0025cec:	50                   	push   eax
c0025ced:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025cf0:	e8 2b fe ff ff       	call   c0025b20 <IOAPIC::read(int)>
c0025cf5:	83 c4 08             	add    esp,0x8
c0025cf8:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0025cfb:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c0025d02:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c0025d09:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c0025d10:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c0025d14:	74 09                	je     c0025d1f <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb5>
c0025d16:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c0025d1d:	eb 07                	jmp    c0025d26 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xbc>
c0025d1f:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c0025d26:	80 7d d0 00          	cmp    BYTE PTR [ebp-0x30],0x0
c0025d2a:	74 09                	je     c0025d35 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xcb>
c0025d2c:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c0025d33:	eb 07                	jmp    c0025d3c <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd2>
c0025d35:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c0025d3c:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c0025d43:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c0025d47:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c0025d4a:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0025d4d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0025d50:	52                   	push   edx
c0025d51:	50                   	push   eax
c0025d52:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025d55:	e8 e4 fe ff ff       	call   c0025c3e <IOAPIC::write(int, int)>
c0025d5a:	83 c4 0c             	add    esp,0xc
c0025d5d:	90                   	nop
c0025d5e:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0025d61:	c9                   	leave  
c0025d62:	c3                   	ret    
c0025d63:	90                   	nop

c0025d64 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0025d64:	55                   	push   ebp
c0025d65:	89 e5                	mov    ebp,esp
c0025d67:	57                   	push   edi
c0025d68:	56                   	push   esi
c0025d69:	53                   	push   ebx
c0025d6a:	83 ec 2c             	sub    esp,0x2c
c0025d6d:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0025d70:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c0025d73:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c0025d77:	c6 45 e6 00          	mov    BYTE PTR [ebp-0x1a],0x0
c0025d7b:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c0025d7f:	74 5a                	je     c0025ddb <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0025d81:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c0025d85:	7f 44                	jg     c0025dcb <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x67>
c0025d87:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025d8a:	05 40 d9 02 c0       	add    eax,0xc002d940
c0025d8f:	8a 00                	mov    al,BYTE PTR [eax]
c0025d91:	0f b6 c0             	movzx  eax,al
c0025d94:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0025d97:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025d9a:	66 8b 84 00 60 10 03 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffcefa0]
c0025da2:	0f b7 c0             	movzx  eax,ax
c0025da5:	83 e0 02             	and    eax,0x2
c0025da8:	85 c0                	test   eax,eax
c0025daa:	74 04                	je     c0025db0 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x4c>
c0025dac:	c6 45 e6 01          	mov    BYTE PTR [ebp-0x1a],0x1
c0025db0:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025db3:	66 8b 84 00 60 10 03 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffcefa0]
c0025dbb:	0f b7 c0             	movzx  eax,ax
c0025dbe:	83 e0 08             	and    eax,0x8
c0025dc1:	85 c0                	test   eax,eax
c0025dc3:	74 16                	je     c0025ddb <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0025dc5:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c0025dc9:	eb 10                	jmp    c0025ddb <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0025dcb:	83 ec 0c             	sub    esp,0xc
c0025dce:	68 08 d4 02 c0       	push   0xc002d408
c0025dd3:	e8 bd 48 ff ff       	call   c001a695 <Krnl::panic(char const*)>
c0025dd8:	83 c4 10             	add    esp,0x10
c0025ddb:	c6 45 e5 00          	mov    BYTE PTR [ebp-0x1b],0x0
c0025ddf:	a1 60 2a 03 c0       	mov    eax,ds:0xc0032a60
c0025de4:	83 ec 08             	sub    esp,0x8
c0025de7:	50                   	push   eax
c0025de8:	68 40 d4 02 c0       	push   0xc002d440
c0025ded:	e8 f1 d1 fe ff       	call   c0012fe3 <Dbg::kprintf(char const*, ...)>
c0025df2:	83 c4 10             	add    esp,0x10
c0025df5:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
c0025dfc:	a1 60 2a 03 c0       	mov    eax,ds:0xc0032a60
c0025e01:	39 45 e0             	cmp    DWORD PTR [ebp-0x20],eax
c0025e04:	7d 67                	jge    c0025e6d <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c0025e06:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0025e09:	8b 04 85 80 2a 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcd580]
c0025e10:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025e13:	83 ec 08             	sub    esp,0x8
c0025e16:	52                   	push   edx
c0025e17:	50                   	push   eax
c0025e18:	e8 d1 fc ff ff       	call   c0025aee <IOAPIC::handlesGSIWithNumber(unsigned int)>
c0025e1d:	83 c4 10             	add    esp,0x10
c0025e20:	84 c0                	test   al,al
c0025e22:	74 44                	je     c0025e68 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x104>
c0025e24:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0025e27:	8b 1c 85 80 2a 03 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffcd580]
c0025e2e:	0f b6 45 e6          	movzx  eax,BYTE PTR [ebp-0x1a]
c0025e32:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0025e35:	0f b6 7d e7          	movzx  edi,BYTE PTR [ebp-0x19]
c0025e39:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025e3c:	83 c0 20             	add    eax,0x20
c0025e3f:	0f b6 f0             	movzx  esi,al
c0025e42:	b8 00 00 00 00       	mov    eax,0x0
c0025e47:	99                   	cdq    
c0025e48:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0025e4b:	0f b6 c9             	movzx  ecx,cl
c0025e4e:	83 ec 04             	sub    esp,0x4
c0025e51:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c0025e54:	57                   	push   edi
c0025e55:	56                   	push   esi
c0025e56:	52                   	push   edx
c0025e57:	50                   	push   eax
c0025e58:	51                   	push   ecx
c0025e59:	53                   	push   ebx
c0025e5a:	e8 0b fe ff ff       	call   c0025c6a <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c0025e5f:	83 c4 20             	add    esp,0x20
c0025e62:	c6 45 e5 01          	mov    BYTE PTR [ebp-0x1b],0x1
c0025e66:	eb 05                	jmp    c0025e6d <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c0025e68:	ff 45 e0             	inc    DWORD PTR [ebp-0x20]
c0025e6b:	eb 8f                	jmp    c0025dfc <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x98>
c0025e6d:	8a 45 e5             	mov    al,BYTE PTR [ebp-0x1b]
c0025e70:	83 f0 01             	xor    eax,0x1
c0025e73:	84 c0                	test   al,al
c0025e75:	74 10                	je     c0025e87 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x123>
c0025e77:	83 ec 0c             	sub    esp,0xc
c0025e7a:	68 57 d4 02 c0       	push   0xc002d457
c0025e7f:	e8 11 48 ff ff       	call   c001a695 <Krnl::panic(char const*)>
c0025e84:	83 c4 10             	add    esp,0x10
c0025e87:	83 45 0c 20          	add    DWORD PTR [ebp+0xc],0x20
c0025e8b:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
c0025e92:	83 7d dc 03          	cmp    DWORD PTR [ebp-0x24],0x3
c0025e96:	7f 65                	jg     c0025efd <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x199>
c0025e98:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025e9b:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025e9e:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0025ea5:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0025ea8:	01 ca                	add    edx,ecx
c0025eaa:	83 c2 54             	add    edx,0x54
c0025ead:	8b 44 90 08          	mov    eax,DWORD PTR [eax+edx*4+0x8]
c0025eb1:	85 c0                	test   eax,eax
c0025eb3:	75 43                	jne    c0025ef8 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x194>
c0025eb5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025eb8:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025ebb:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0025ec2:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0025ec5:	01 ca                	add    edx,ecx
c0025ec7:	8d 4a 54             	lea    ecx,[edx+0x54]
c0025eca:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0025ecd:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c0025ed1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025ed4:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025ed7:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0025ede:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0025ee1:	01 ca                	add    edx,ecx
c0025ee3:	8d 8a 54 04 00 00    	lea    ecx,[edx+0x454]
c0025ee9:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0025eec:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c0025ef0:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025ef3:	83 e8 20             	sub    eax,0x20
c0025ef6:	eb 1a                	jmp    c0025f12 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1ae>
c0025ef8:	ff 45 dc             	inc    DWORD PTR [ebp-0x24]
c0025efb:	eb 95                	jmp    c0025e92 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12e>
c0025efd:	83 ec 0c             	sub    esp,0xc
c0025f00:	68 64 d4 02 c0       	push   0xc002d464
c0025f05:	e8 8b 47 ff ff       	call   c001a695 <Krnl::panic(char const*)>
c0025f0a:	83 c4 10             	add    esp,0x10
c0025f0d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0025f12:	8d 65 f4             	lea    esp,[ebp-0xc]
c0025f15:	5b                   	pop    ebx
c0025f16:	5e                   	pop    esi
c0025f17:	5f                   	pop    edi
c0025f18:	5d                   	pop    ebp
c0025f19:	c3                   	ret    

c0025f1a <PIC::disable()>:
c0025f1a:	55                   	push   ebp
c0025f1b:	89 e5                	mov    ebp,esp
c0025f1d:	83 ec 10             	sub    esp,0x10
c0025f20:	66 c7 45 fa a1 00    	mov    WORD PTR [ebp-0x6],0xa1
c0025f26:	c6 45 f9 ff          	mov    BYTE PTR [ebp-0x7],0xff
c0025f2a:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0025f2d:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c0025f31:	ee                   	out    dx,al
c0025f32:	66 c7 45 fe 21 00    	mov    WORD PTR [ebp-0x2],0x21
c0025f38:	c6 45 fd ff          	mov    BYTE PTR [ebp-0x3],0xff
c0025f3c:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c0025f3f:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0025f43:	ee                   	out    dx,al
c0025f44:	90                   	nop
c0025f45:	c9                   	leave  
c0025f46:	c3                   	ret    
c0025f47:	90                   	nop

c0025f48 <PIC::close(int, int, void*)>:
c0025f48:	55                   	push   ebp
c0025f49:	89 e5                	mov    ebp,esp
c0025f4b:	83 ec 08             	sub    esp,0x8
c0025f4e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025f51:	8b 00                	mov    eax,DWORD PTR [eax]
c0025f53:	83 c0 3c             	add    eax,0x3c
c0025f56:	8b 00                	mov    eax,DWORD PTR [eax]
c0025f58:	83 ec 0c             	sub    esp,0xc
c0025f5b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025f5e:	ff d0                	call   eax
c0025f60:	83 c4 10             	add    esp,0x10
c0025f63:	b8 00 00 00 00       	mov    eax,0x0
c0025f68:	c9                   	leave  
c0025f69:	c3                   	ret    

c0025f6a <PIC::PIC()>:
c0025f6a:	83 ec 0c             	sub    esp,0xc
c0025f6d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f71:	83 ec 08             	sub    esp,0x8
c0025f74:	68 10 d5 02 c0       	push   0xc002d510
c0025f79:	50                   	push   eax
c0025f7a:	e8 e7 ed fe ff       	call   c0014d66 <InterruptController::InterruptController(char const*)>
c0025f7f:	83 c4 10             	add    esp,0x10
c0025f82:	ba 3c d5 02 c0       	mov    edx,0xc002d53c
c0025f87:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f8b:	89 10                	mov    DWORD PTR [eax],edx
c0025f8d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f91:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025f97:	0f b6 d0             	movzx  edx,al
c0025f9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f9e:	66 c7 44 90 04 20 00 	mov    WORD PTR [eax+edx*4+0x4],0x20
c0025fa5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025fa9:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025faf:	0f b6 d0             	movzx  edx,al
c0025fb2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025fb6:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0025fbb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025fbf:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025fc5:	8d 50 01             	lea    edx,[eax+0x1]
c0025fc8:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0025fcc:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0025fd2:	0f b6 d0             	movzx  edx,al
c0025fd5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025fd9:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0025fdd:	83 e1 3f             	and    ecx,0x3f
c0025fe0:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0025fe4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025fe8:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025fee:	0f b6 d0             	movzx  edx,al
c0025ff1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025ff5:	66 c7 44 90 04 a0 00 	mov    WORD PTR [eax+edx*4+0x4],0xa0
c0025ffc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026000:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0026006:	0f b6 d0             	movzx  edx,al
c0026009:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002600d:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0026012:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026016:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002601c:	8d 50 01             	lea    edx,[eax+0x1]
c002601f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0026023:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0026029:	0f b6 d0             	movzx  edx,al
c002602c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026030:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0026034:	83 e1 3f             	and    ecx,0x3f
c0026037:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c002603b:	90                   	nop
c002603c:	83 c4 0c             	add    esp,0xc
c002603f:	c3                   	ret    

c0026040 <PIC::ioWait()>:
c0026040:	eb 00                	jmp    c0026042 <PIC::ioWait()+0x2>
c0026042:	eb 00                	jmp    c0026044 <PIC::ioWait()+0x4>
c0026044:	90                   	nop
c0026045:	c3                   	ret    

c0026046 <PIC::getIRQReg(int)>:
c0026046:	55                   	push   ebp
c0026047:	89 e5                	mov    ebp,esp
c0026049:	83 ec 10             	sub    esp,0x10
c002604c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002604f:	0f b6 c0             	movzx  eax,al
c0026052:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c0026058:	88 45 f1             	mov    BYTE PTR [ebp-0xf],al
c002605b:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c002605e:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0026062:	ee                   	out    dx,al
c0026063:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026066:	0f b6 c0             	movzx  eax,al
c0026069:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c002606f:	88 45 f5             	mov    BYTE PTR [ebp-0xb],al
c0026072:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0026075:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0026079:	ee                   	out    dx,al
c002607a:	66 c7 45 fa a0 00    	mov    WORD PTR [ebp-0x6],0xa0
c0026080:	66 8b 45 fa          	mov    ax,WORD PTR [ebp-0x6]
c0026084:	89 c2                	mov    edx,eax
c0026086:	ec                   	in     al,dx
c0026087:	88 45 f9             	mov    BYTE PTR [ebp-0x7],al
c002608a:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c002608d:	0f b6 c0             	movzx  eax,al
c0026090:	c1 e0 08             	shl    eax,0x8
c0026093:	89 c1                	mov    ecx,eax
c0026095:	66 c7 45 fe 20 00    	mov    WORD PTR [ebp-0x2],0x20
c002609b:	66 8b 45 fe          	mov    ax,WORD PTR [ebp-0x2]
c002609f:	89 c2                	mov    edx,eax
c00260a1:	ec                   	in     al,dx
c00260a2:	88 45 fd             	mov    BYTE PTR [ebp-0x3],al
c00260a5:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c00260a8:	0f b6 c0             	movzx  eax,al
c00260ab:	09 c8                	or     eax,ecx
c00260ad:	c9                   	leave  
c00260ae:	c3                   	ret    
c00260af:	90                   	nop

c00260b0 <PIC::eoi(unsigned char)>:
c00260b0:	55                   	push   ebp
c00260b1:	89 e5                	mov    ebp,esp
c00260b3:	83 ec 14             	sub    esp,0x14
c00260b6:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00260b9:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
c00260bc:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c00260c0:	75 1e                	jne    c00260e0 <PIC::eoi(unsigned char)+0x30>
c00260c2:	6a 0b                	push   0xb
c00260c4:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00260c7:	e8 7a ff ff ff       	call   c0026046 <PIC::getIRQReg(int)>
c00260cc:	83 c4 08             	add    esp,0x8
c00260cf:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c00260d3:	0f b7 45 fe          	movzx  eax,WORD PTR [ebp-0x2]
c00260d7:	25 80 00 00 00       	and    eax,0x80
c00260dc:	85 c0                	test   eax,eax
c00260de:	74 5f                	je     c002613f <PIC::eoi(unsigned char)+0x8f>
c00260e0:	80 7d ec 0f          	cmp    BYTE PTR [ebp-0x14],0xf
c00260e4:	75 2d                	jne    c0026113 <PIC::eoi(unsigned char)+0x63>
c00260e6:	6a 0b                	push   0xb
c00260e8:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00260eb:	e8 56 ff ff ff       	call   c0026046 <PIC::getIRQReg(int)>
c00260f0:	83 c4 08             	add    esp,0x8
c00260f3:	66 89 45 fc          	mov    WORD PTR [ebp-0x4],ax
c00260f7:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00260fa:	66 85 c0             	test   ax,ax
c00260fd:	78 14                	js     c0026113 <PIC::eoi(unsigned char)+0x63>
c00260ff:	66 c7 45 fa 20 00    	mov    WORD PTR [ebp-0x6],0x20
c0026105:	c6 45 f9 20          	mov    BYTE PTR [ebp-0x7],0x20
c0026109:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c002610c:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c0026110:	ee                   	out    dx,al
c0026111:	eb 2d                	jmp    c0026140 <PIC::eoi(unsigned char)+0x90>
c0026113:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c0026117:	76 12                	jbe    c002612b <PIC::eoi(unsigned char)+0x7b>
c0026119:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c002611f:	c6 45 f5 20          	mov    BYTE PTR [ebp-0xb],0x20
c0026123:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0026126:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c002612a:	ee                   	out    dx,al
c002612b:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c0026131:	c6 45 f1 20          	mov    BYTE PTR [ebp-0xf],0x20
c0026135:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0026138:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c002613c:	ee                   	out    dx,al
c002613d:	eb 01                	jmp    c0026140 <PIC::eoi(unsigned char)+0x90>
c002613f:	90                   	nop
c0026140:	c9                   	leave  
c0026141:	c3                   	ret    

c0026142 <PIC::remap()>:
c0026142:	55                   	push   ebp
c0026143:	89 e5                	mov    ebp,esp
c0026145:	83 ec 48             	sub    esp,0x48
c0026148:	c7 45 f4 20 00 00 00 	mov    DWORD PTR [ebp-0xc],0x20
c002614f:	c7 45 f0 28 00 00 00 	mov    DWORD PTR [ebp-0x10],0x28
c0026156:	66 c7 45 c0 21 00    	mov    WORD PTR [ebp-0x40],0x21
c002615c:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c002615f:	89 c2                	mov    edx,eax
c0026161:	ec                   	in     al,dx
c0026162:	88 45 bf             	mov    BYTE PTR [ebp-0x41],al
c0026165:	8a 45 bf             	mov    al,BYTE PTR [ebp-0x41]
c0026168:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c002616b:	66 c7 45 c4 a1 00    	mov    WORD PTR [ebp-0x3c],0xa1
c0026171:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
c0026174:	89 c2                	mov    edx,eax
c0026176:	ec                   	in     al,dx
c0026177:	88 45 c3             	mov    BYTE PTR [ebp-0x3d],al
c002617a:	8a 45 c3             	mov    al,BYTE PTR [ebp-0x3d]
c002617d:	88 45 ee             	mov    BYTE PTR [ebp-0x12],al
c0026180:	66 c7 45 c8 20 00    	mov    WORD PTR [ebp-0x38],0x20
c0026186:	c6 45 c7 11          	mov    BYTE PTR [ebp-0x39],0x11
c002618a:	8a 45 c7             	mov    al,BYTE PTR [ebp-0x39]
c002618d:	8b 55 c8             	mov    edx,DWORD PTR [ebp-0x38]
c0026190:	ee                   	out    dx,al
c0026191:	83 ec 0c             	sub    esp,0xc
c0026194:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026197:	e8 a4 fe ff ff       	call   c0026040 <PIC::ioWait()>
c002619c:	83 c4 10             	add    esp,0x10
c002619f:	66 c7 45 cc a0 00    	mov    WORD PTR [ebp-0x34],0xa0
c00261a5:	c6 45 cb 11          	mov    BYTE PTR [ebp-0x35],0x11
c00261a9:	8a 45 cb             	mov    al,BYTE PTR [ebp-0x35]
c00261ac:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c00261af:	ee                   	out    dx,al
c00261b0:	83 ec 0c             	sub    esp,0xc
c00261b3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00261b6:	e8 85 fe ff ff       	call   c0026040 <PIC::ioWait()>
c00261bb:	83 c4 10             	add    esp,0x10
c00261be:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00261c1:	0f b6 c0             	movzx  eax,al
c00261c4:	66 c7 45 d0 21 00    	mov    WORD PTR [ebp-0x30],0x21
c00261ca:	88 45 cf             	mov    BYTE PTR [ebp-0x31],al
c00261cd:	8a 45 cf             	mov    al,BYTE PTR [ebp-0x31]
c00261d0:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c00261d3:	ee                   	out    dx,al
c00261d4:	83 ec 0c             	sub    esp,0xc
c00261d7:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00261da:	e8 61 fe ff ff       	call   c0026040 <PIC::ioWait()>
c00261df:	83 c4 10             	add    esp,0x10
c00261e2:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00261e5:	0f b6 c0             	movzx  eax,al
c00261e8:	66 c7 45 d4 a1 00    	mov    WORD PTR [ebp-0x2c],0xa1
c00261ee:	88 45 d3             	mov    BYTE PTR [ebp-0x2d],al
c00261f1:	8a 45 d3             	mov    al,BYTE PTR [ebp-0x2d]
c00261f4:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c00261f7:	ee                   	out    dx,al
c00261f8:	83 ec 0c             	sub    esp,0xc
c00261fb:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00261fe:	e8 3d fe ff ff       	call   c0026040 <PIC::ioWait()>
c0026203:	83 c4 10             	add    esp,0x10
c0026206:	66 c7 45 d8 21 00    	mov    WORD PTR [ebp-0x28],0x21
c002620c:	c6 45 d7 04          	mov    BYTE PTR [ebp-0x29],0x4
c0026210:	8a 45 d7             	mov    al,BYTE PTR [ebp-0x29]
c0026213:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
c0026216:	ee                   	out    dx,al
c0026217:	83 ec 0c             	sub    esp,0xc
c002621a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002621d:	e8 1e fe ff ff       	call   c0026040 <PIC::ioWait()>
c0026222:	83 c4 10             	add    esp,0x10
c0026225:	66 c7 45 dc a1 00    	mov    WORD PTR [ebp-0x24],0xa1
c002622b:	c6 45 db 02          	mov    BYTE PTR [ebp-0x25],0x2
c002622f:	8a 45 db             	mov    al,BYTE PTR [ebp-0x25]
c0026232:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0026235:	ee                   	out    dx,al
c0026236:	83 ec 0c             	sub    esp,0xc
c0026239:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002623c:	e8 ff fd ff ff       	call   c0026040 <PIC::ioWait()>
c0026241:	83 c4 10             	add    esp,0x10
c0026244:	66 c7 45 e0 21 00    	mov    WORD PTR [ebp-0x20],0x21
c002624a:	c6 45 df 01          	mov    BYTE PTR [ebp-0x21],0x1
c002624e:	8a 45 df             	mov    al,BYTE PTR [ebp-0x21]
c0026251:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0026254:	ee                   	out    dx,al
c0026255:	83 ec 0c             	sub    esp,0xc
c0026258:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002625b:	e8 e0 fd ff ff       	call   c0026040 <PIC::ioWait()>
c0026260:	83 c4 10             	add    esp,0x10
c0026263:	66 c7 45 e4 a1 00    	mov    WORD PTR [ebp-0x1c],0xa1
c0026269:	c6 45 e3 01          	mov    BYTE PTR [ebp-0x1d],0x1
c002626d:	8a 45 e3             	mov    al,BYTE PTR [ebp-0x1d]
c0026270:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0026273:	ee                   	out    dx,al
c0026274:	83 ec 0c             	sub    esp,0xc
c0026277:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002627a:	e8 c1 fd ff ff       	call   c0026040 <PIC::ioWait()>
c002627f:	83 c4 10             	add    esp,0x10
c0026282:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
c0026286:	66 c7 45 e8 21 00    	mov    WORD PTR [ebp-0x18],0x21
c002628c:	88 45 e7             	mov    BYTE PTR [ebp-0x19],al
c002628f:	8a 45 e7             	mov    al,BYTE PTR [ebp-0x19]
c0026292:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0026295:	ee                   	out    dx,al
c0026296:	0f b6 45 ee          	movzx  eax,BYTE PTR [ebp-0x12]
c002629a:	66 c7 45 ec a1 00    	mov    WORD PTR [ebp-0x14],0xa1
c00262a0:	88 45 eb             	mov    BYTE PTR [ebp-0x15],al
c00262a3:	8a 45 eb             	mov    al,BYTE PTR [ebp-0x15]
c00262a6:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00262a9:	ee                   	out    dx,al
c00262aa:	90                   	nop
c00262ab:	c9                   	leave  
c00262ac:	c3                   	ret    
c00262ad:	90                   	nop

c00262ae <PIC::open(int, int, void*)>:
c00262ae:	55                   	push   ebp
c00262af:	89 e5                	mov    ebp,esp
c00262b1:	83 ec 18             	sub    esp,0x18
c00262b4:	66 c7 45 f2 21 00    	mov    WORD PTR [ebp-0xe],0x21
c00262ba:	c6 45 f1 00          	mov    BYTE PTR [ebp-0xf],0x0
c00262be:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c00262c1:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c00262c5:	ee                   	out    dx,al
c00262c6:	66 c7 45 f6 a1 00    	mov    WORD PTR [ebp-0xa],0xa1
c00262cc:	c6 45 f5 00          	mov    BYTE PTR [ebp-0xb],0x0
c00262d0:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c00262d3:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c00262d7:	ee                   	out    dx,al
c00262d8:	83 ec 0c             	sub    esp,0xc
c00262db:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00262de:	e8 5f fe ff ff       	call   c0026142 <PIC::remap()>
c00262e3:	83 c4 10             	add    esp,0x10
c00262e6:	b8 00 00 00 00       	mov    eax,0x0
c00262eb:	c9                   	leave  
c00262ec:	c3                   	ret    
c00262ed:	90                   	nop

c00262ee <APICTimer::close(int, int, void*)>:
c00262ee:	b8 00 00 00 00       	mov    eax,0x0
c00262f3:	c3                   	ret    

c00262f4 <apicTimerHandler(regs*, void*)>:
c00262f4:	83 ec 0c             	sub    esp,0xc
c00262f7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00262fb:	8b 00                	mov    eax,DWORD PTR [eax]
c00262fd:	99                   	cdq    
c00262fe:	52                   	push   edx
c00262ff:	50                   	push   eax
c0026300:	6a 00                	push   0x0
c0026302:	68 00 ca 9a 3b       	push   0x3b9aca00
c0026307:	e8 90 07 00 00       	call   c0026a9c <__udivdi3>
c002630c:	83 c4 10             	add    esp,0x10
c002630f:	83 ec 08             	sub    esp,0x8
c0026312:	52                   	push   edx
c0026313:	50                   	push   eax
c0026314:	e8 a8 0a ff ff       	call   c0016dc1 <timerHandler(unsigned long long)>
c0026319:	83 c4 10             	add    esp,0x10
c002631c:	90                   	nop
c002631d:	83 c4 0c             	add    esp,0xc
c0026320:	c3                   	ret    
c0026321:	90                   	nop

c0026322 <APICTimer::write(int)>:
c0026322:	53                   	push   ebx
c0026323:	83 ec 28             	sub    esp,0x28
c0026326:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c002632a:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c002632e:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0026334:	a1 e8 e6 02 c0       	mov    eax,ds:0xc002e6e8
c0026339:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c002633f:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0026345:	83 ec 0c             	sub    esp,0xc
c0026348:	50                   	push   eax
c0026349:	e8 de f4 ff ff       	call   c002582c <APIC::getBase()>
c002634e:	83 c4 10             	add    esp,0x10
c0026351:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0026355:	a1 70 ed 02 c0       	mov    eax,ds:0xc002ed70
c002635a:	8b 15 74 ed 02 c0    	mov    edx,DWORD PTR ds:0xc002ed74
c0026360:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0026364:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0026368:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002636c:	05 e0 03 00 00       	add    eax,0x3e0
c0026371:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c0026377:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002637b:	05 80 03 00 00       	add    eax,0x380
c0026380:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0026386:	fb                   	sti    
c0026387:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002638b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002638f:	05 00 ca 9a 3b       	add    eax,0x3b9aca00
c0026394:	83 d2 00             	adc    edx,0x0
c0026397:	89 c1                	mov    ecx,eax
c0026399:	89 d3                	mov    ebx,edx
c002639b:	a1 70 ed 02 c0       	mov    eax,ds:0xc002ed70
c00263a0:	8b 15 74 ed 02 c0    	mov    edx,DWORD PTR ds:0xc002ed74
c00263a6:	39 c8                	cmp    eax,ecx
c00263a8:	89 d0                	mov    eax,edx
c00263aa:	19 d8                	sbb    eax,ebx
c00263ac:	73 02                	jae    c00263b0 <APICTimer::write(int)+0x8e>
c00263ae:	eb d7                	jmp    c0026387 <APICTimer::write(int)+0x65>
c00263b0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00263b4:	05 20 03 00 00       	add    eax,0x320
c00263b9:	c7 00 00 00 01 00    	mov    DWORD PTR [eax],0x10000
c00263bf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00263c3:	05 90 03 00 00       	add    eax,0x390
c00263c8:	8b 00                	mov    eax,DWORD PTR [eax]
c00263ca:	f7 d0                	not    eax
c00263cc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00263d0:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00263d4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00263d8:	ba 00 00 00 00       	mov    edx,0x0
c00263dd:	f7 f3                	div    ebx
c00263df:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00263e3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00263e7:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00263ed:	0d 00 00 02 00       	or     eax,0x20000
c00263f2:	89 c2                	mov    edx,eax
c00263f4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00263f8:	05 20 03 00 00       	add    eax,0x320
c00263fd:	89 10                	mov    DWORD PTR [eax],edx
c00263ff:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026403:	05 e0 03 00 00       	add    eax,0x3e0
c0026408:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c002640e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026412:	05 80 03 00 00       	add    eax,0x380
c0026417:	89 c2                	mov    edx,eax
c0026419:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002641d:	89 02                	mov    DWORD PTR [edx],eax
c002641f:	90                   	nop
c0026420:	83 c4 28             	add    esp,0x28
c0026423:	5b                   	pop    ebx
c0026424:	c3                   	ret    
c0026425:	90                   	nop

c0026426 <APICTimer::open(int, int, void*)>:
c0026426:	57                   	push   edi
c0026427:	56                   	push   esi
c0026428:	53                   	push   ebx
c0026429:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002642d:	8b 00                	mov    eax,DWORD PTR [eax]
c002642f:	83 c0 24             	add    eax,0x24
c0026432:	8b 00                	mov    eax,DWORD PTR [eax]
c0026434:	83 ec 08             	sub    esp,0x8
c0026437:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002643b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002643f:	ff d0                	call   eax
c0026441:	83 c4 10             	add    esp,0x10
c0026444:	a1 e8 e6 02 c0       	mov    eax,ds:0xc002e6e8
c0026449:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c002644f:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0026455:	83 ec 0c             	sub    esp,0xc
c0026458:	50                   	push   eax
c0026459:	e8 ce f3 ff ff       	call   c002582c <APIC::getBase()>
c002645e:	83 c4 10             	add    esp,0x10
c0026461:	8d 90 00 03 00 00    	lea    edx,[eax+0x300]
c0026467:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002646b:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0026471:	0f b6 f8             	movzx  edi,al
c0026474:	89 d0                	mov    eax,edx
c0026476:	ba 00 00 00 00       	mov    edx,0x0
c002647b:	89 c1                	mov    ecx,eax
c002647d:	80 e5 ff             	and    ch,0xff
c0026480:	89 cb                	mov    ebx,ecx
c0026482:	0f b6 f2             	movzx  esi,dl
c0026485:	89 d8                	mov    eax,ebx
c0026487:	89 f2                	mov    edx,esi
c0026489:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002648d:	8d 5f 08             	lea    ebx,[edi+0x8]
c0026490:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0026494:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0026498:	83 e0 00             	and    eax,0x0
c002649b:	09 d0                	or     eax,edx
c002649d:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c00264a1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00264a5:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c00264ab:	8d 50 01             	lea    edx,[eax+0x1]
c00264ae:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00264b2:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c00264b8:	0f b6 d0             	movzx  edx,al
c00264bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00264bf:	83 c2 08             	add    edx,0x8
c00264c2:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c00264c6:	0f b6 c9             	movzx  ecx,cl
c00264c9:	81 c9 00 00 01 00    	or     ecx,0x10000
c00264cf:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c00264d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00264d7:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00264db:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c00264e1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00264e5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00264e9:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c00264ef:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00264f3:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c00264f9:	83 ec 0c             	sub    esp,0xc
c00264fc:	51                   	push   ecx
c00264fd:	6a 01                	push   0x1
c00264ff:	68 f4 62 02 c0       	push   0xc00262f4
c0026504:	52                   	push   edx
c0026505:	50                   	push   eax
c0026506:	e8 83 de fe ff       	call   c001438e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c002650b:	83 c4 20             	add    esp,0x20
c002650e:	89 c2                	mov    edx,eax
c0026510:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026514:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c002651a:	b8 00 00 00 00       	mov    eax,0x0
c002651f:	5b                   	pop    ebx
c0026520:	5e                   	pop    esi
c0026521:	5f                   	pop    edi
c0026522:	c3                   	ret    
c0026523:	90                   	nop

c0026524 <APICTimer::APICTimer()>:
c0026524:	83 ec 0c             	sub    esp,0xc
c0026527:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002652b:	83 ec 08             	sub    esp,0x8
c002652e:	68 7c d5 02 c0       	push   0xc002d57c
c0026533:	50                   	push   eax
c0026534:	e8 f9 07 ff ff       	call   c0016d32 <Timer::Timer(char const*)>
c0026539:	83 c4 10             	add    esp,0x10
c002653c:	ba 90 d5 02 c0       	mov    edx,0xc002d590
c0026541:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026545:	89 10                	mov    DWORD PTR [eax],edx
c0026547:	90                   	nop
c0026548:	83 c4 0c             	add    esp,0xc
c002654b:	c3                   	ret    

c002654c <PIT::write(int)>:
c002654c:	83 ec 10             	sub    esp,0x10
c002654f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0026553:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0026557:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c002655d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0026561:	a3 a4 2a 03 c0       	mov    ds:0xc0032aa4,eax
c0026566:	b8 dc 34 12 00       	mov    eax,0x1234dc
c002656b:	99                   	cdq    
c002656c:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c0026570:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0026574:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c002657b:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c0026580:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0026584:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0026589:	ee                   	out    dx,al
c002658a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002658e:	0f b6 c0             	movzx  eax,al
c0026591:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c0026598:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c002659c:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c00265a0:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c00265a5:	ee                   	out    dx,al
c00265a6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00265aa:	c1 f8 08             	sar    eax,0x8
c00265ad:	0f b6 c0             	movzx  eax,al
c00265b0:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c00265b7:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c00265bb:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00265bf:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c00265c4:	ee                   	out    dx,al
c00265c5:	90                   	nop
c00265c6:	83 c4 10             	add    esp,0x10
c00265c9:	c3                   	ret    

c00265ca <pitHandler(regs*, void*)>:
c00265ca:	83 ec 0c             	sub    esp,0xc
c00265cd:	a1 a4 2a 03 c0       	mov    eax,ds:0xc0032aa4
c00265d2:	99                   	cdq    
c00265d3:	52                   	push   edx
c00265d4:	50                   	push   eax
c00265d5:	6a 00                	push   0x0
c00265d7:	68 00 ca 9a 3b       	push   0x3b9aca00
c00265dc:	e8 bb 04 00 00       	call   c0026a9c <__udivdi3>
c00265e1:	83 c4 10             	add    esp,0x10
c00265e4:	83 ec 08             	sub    esp,0x8
c00265e7:	52                   	push   edx
c00265e8:	50                   	push   eax
c00265e9:	e8 d3 07 ff ff       	call   c0016dc1 <timerHandler(unsigned long long)>
c00265ee:	83 c4 10             	add    esp,0x10
c00265f1:	90                   	nop
c00265f2:	83 c4 0c             	add    esp,0xc
c00265f5:	c3                   	ret    

c00265f6 <PIT::open(int, int, void*)>:
c00265f6:	83 ec 0c             	sub    esp,0xc
c00265f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00265fd:	8b 00                	mov    eax,DWORD PTR [eax]
c00265ff:	83 c0 24             	add    eax,0x24
c0026602:	8b 00                	mov    eax,DWORD PTR [eax]
c0026604:	83 ec 08             	sub    esp,0x8
c0026607:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002660b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002660f:	ff d0                	call   eax
c0026611:	83 c4 10             	add    esp,0x10
c0026614:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026618:	83 ec 0c             	sub    esp,0xc
c002661b:	6a 00                	push   0x0
c002661d:	6a 01                	push   0x1
c002661f:	68 ca 65 02 c0       	push   0xc00265ca
c0026624:	6a 00                	push   0x0
c0026626:	50                   	push   eax
c0026627:	e8 62 dd fe ff       	call   c001438e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c002662c:	83 c4 20             	add    esp,0x20
c002662f:	89 c2                	mov    edx,eax
c0026631:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026635:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c002663b:	b8 00 00 00 00       	mov    eax,0x0
c0026640:	83 c4 0c             	add    esp,0xc
c0026643:	c3                   	ret    

c0026644 <PIT::close(int, int, void*)>:
c0026644:	83 ec 0c             	sub    esp,0xc
c0026647:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002664b:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0026655:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026659:	6a 01                	push   0x1
c002665b:	68 ca 65 02 c0       	push   0xc00265ca
c0026660:	6a 00                	push   0x0
c0026662:	50                   	push   eax
c0026663:	e8 64 dd fe ff       	call   c00143cc <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c0026668:	83 c4 10             	add    esp,0x10
c002666b:	b8 00 00 00 00       	mov    eax,0x0
c0026670:	83 c4 0c             	add    esp,0xc
c0026673:	c3                   	ret    

c0026674 <PIT::PIT()>:
c0026674:	83 ec 0c             	sub    esp,0xc
c0026677:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002667b:	83 ec 08             	sub    esp,0x8
c002667e:	68 b8 d5 02 c0       	push   0xc002d5b8
c0026683:	50                   	push   eax
c0026684:	e8 a9 06 ff ff       	call   c0016d32 <Timer::Timer(char const*)>
c0026689:	83 c4 10             	add    esp,0x10
c002668c:	ba e0 d5 02 c0       	mov    edx,0xc002d5e0
c0026691:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026695:	89 10                	mov    DWORD PTR [eax],edx
c0026697:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002669b:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00266a1:	0f b6 d0             	movzx  edx,al
c00266a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00266a8:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c00266af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00266b3:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00266b9:	0f b6 d0             	movzx  edx,al
c00266bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00266c0:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c00266c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00266c9:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00266cf:	8d 50 01             	lea    edx,[eax+0x1]
c00266d2:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00266d6:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c00266dc:	0f b6 d0             	movzx  edx,al
c00266df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00266e3:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c00266e7:	83 e1 3f             	and    ecx,0x3f
c00266ea:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c00266ee:	90                   	nop
c00266ef:	83 c4 0c             	add    esp,0xc
c00266f2:	c3                   	ret    
c00266f3:	66 90                	xchg   ax,ax
c00266f5:	66 90                	xchg   ax,ax
c00266f7:	66 90                	xchg   ax,ax
c00266f9:	66 90                	xchg   ax,ax
c00266fb:	66 90                	xchg   ax,ax
c00266fd:	66 90                	xchg   ax,ax
c00266ff:	90                   	nop

c0026700 <avxDetect>:
c0026700:	b8 00 00 00 00       	mov    eax,0x0
c0026705:	c3                   	ret    

c0026706 <avxSave>:
c0026706:	c3                   	ret    

c0026707 <avxLoad>:
c0026707:	c3                   	ret    

c0026708 <avxInit>:
c0026708:	c3                   	ret    

c0026709 <avxClose>:
c0026709:	c3                   	ret    

c002670a <wouldSheSayYes>:
c002670a:	c3                   	ret    
c002670b:	49                   	dec    ecx
c002670c:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c0026710:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c0026714:	75 20                	jne    c0026736 <sseDetect.noSSE+0x1>
c0026716:	4e                   	dec    esi
c0026717:	79 61                	jns    c002677a <x87Detect+0x14>
c0026719:	68 2e 2e 2e 00       	push   0x2e2e2e
c002671e:	66 90                	xchg   ax,ax

c0026720 <absolutelyNoChanceInHell>:
c0026720:	b8 01 00 00 00       	mov    eax,0x1
c0026725:	0f a2                	cpuid  
c0026727:	f7 c2 00 00 00 02    	test   edx,0x2000000
c002672d:	74 06                	je     c0026735 <sseDetect.noSSE>
c002672f:	b8 01 00 00 00       	mov    eax,0x1
c0026734:	c3                   	ret    

c0026735 <sseDetect.noSSE>:
c0026735:	31 c0                	xor    eax,eax
c0026737:	c3                   	ret    

c0026738 <sseSave>:
c0026738:	0f ae 44 24 08       	fxsave [esp+0x8]
c002673d:	c3                   	ret    

c002673e <sseLoad>:
c002673e:	0f ae 4c 24 08       	fxrstor [esp+0x8]
c0026743:	c3                   	ret    

c0026744 <sseInit>:
c0026744:	e8 43 00 00 00       	call   c002678c <x87Init>
c0026749:	0f 20 e0             	mov    eax,cr4
c002674c:	66 0d 00 06          	or     ax,0x600
c0026750:	0f 22 e0             	mov    cr4,eax
c0026753:	c3                   	ret    

c0026754 <sseClose>:
c0026754:	c3                   	ret    
c0026755:	66 90                	xchg   ax,ax
c0026757:	66 90                	xchg   ax,ax
c0026759:	66 90                	xchg   ax,ax
c002675b:	66 90                	xchg   ax,ax
c002675d:	66 90                	xchg   ax,ax
c002675f:	90                   	nop

c0026760 <value_37F>:
c0026760:	7f 03                	jg     c0026765 <value_37A+0x1>

c0026762 <value_37E>:
c0026762:	7e 03                	jle    c0026767 <x87Detect+0x1>

c0026764 <value_37A>:
c0026764:	7a 03                	jp     c0026769 <x87Detect+0x3>

c0026766 <x87Detect>:
c0026766:	b8 01 00 00 00       	mov    eax,0x1
c002676b:	0f a2                	cpuid  
c002676d:	f7 c2 01 00 00 00    	test   edx,0x1
c0026773:	74 06                	je     c002677b <x87Detect.nox87>
c0026775:	b8 01 00 00 00       	mov    eax,0x1
c002677a:	c3                   	ret    

c002677b <x87Detect.nox87>:
c002677b:	b8 00 00 00 00       	mov    eax,0x0
c0026780:	c3                   	ret    

c0026781 <x87Save>:
c0026781:	9b dd 74 24 08       	fsave  [esp+0x8]
c0026786:	c3                   	ret    

c0026787 <x87Load>:
c0026787:	dd 64 24 08          	frstor [esp+0x8]
c002678b:	c3                   	ret    

c002678c <x87Init>:
c002678c:	9b db e3             	finit  
c002678f:	0f 20 c0             	mov    eax,cr0
c0026792:	66 25 fb ff          	and    ax,0xfffb
c0026796:	66 0d 22 00          	or     ax,0x22
c002679a:	0f 22 c0             	mov    cr0,eax
c002679d:	0f 06                	clts   
c002679f:	d9 2d 64 67 02 c0    	fldcw  WORD PTR ds:0xc0026764
c00267a5:	c3                   	ret    

c00267a6 <x87Close>:
c00267a6:	c3                   	ret    
c00267a7:	90                   	nop

c00267a8 <__do_global_ctors_aux>:
c00267a8:	a1 ec 92 02 c0       	mov    eax,ds:0xc00292ec
c00267ad:	83 f8 ff             	cmp    eax,0xffffffff
c00267b0:	74 1a                	je     c00267cc <__do_global_ctors_aux+0x24>
c00267b2:	55                   	push   ebp
c00267b3:	89 e5                	mov    ebp,esp
c00267b5:	53                   	push   ebx
c00267b6:	52                   	push   edx
c00267b7:	bb ec 92 02 c0       	mov    ebx,0xc00292ec
c00267bc:	ff d0                	call   eax
c00267be:	83 eb 04             	sub    ebx,0x4
c00267c1:	8b 03                	mov    eax,DWORD PTR [ebx]
c00267c3:	83 f8 ff             	cmp    eax,0xffffffff
c00267c6:	75 f4                	jne    c00267bc <__do_global_ctors_aux+0x14>
c00267c8:	58                   	pop    eax
c00267c9:	5b                   	pop    ebx
c00267ca:	5d                   	pop    ebp
c00267cb:	c3                   	ret    
c00267cc:	c3                   	ret    
c00267cd:	66 90                	xchg   ax,ax
c00267cf:	90                   	nop

c00267d0 <__divdi3>:
c00267d0:	55                   	push   ebp
c00267d1:	57                   	push   edi
c00267d2:	56                   	push   esi
c00267d3:	53                   	push   ebx
c00267d4:	83 ec 1c             	sub    esp,0x1c
c00267d7:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c00267db:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00267df:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00267e2:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c00267e6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00267ea:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00267ee:	85 db                	test   ebx,ebx
c00267f0:	0f 88 8e 00 00 00    	js     c0026884 <__divdi3+0xb4>
c00267f6:	89 dd                	mov    ebp,ebx
c00267f8:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0026800:	89 d3                	mov    ebx,edx
c0026802:	85 d2                	test   edx,edx
c0026804:	79 0d                	jns    c0026813 <__divdi3+0x43>
c0026806:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c002680a:	f7 d8                	neg    eax
c002680c:	83 d2 00             	adc    edx,0x0
c002680f:	f7 da                	neg    edx
c0026811:	89 d3                	mov    ebx,edx
c0026813:	89 c7                	mov    edi,eax
c0026815:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0026818:	85 db                	test   ebx,ebx
c002681a:	75 48                	jne    c0026864 <__divdi3+0x94>
c002681c:	39 ef                	cmp    edi,ebp
c002681e:	76 24                	jbe    c0026844 <__divdi3+0x74>
c0026820:	89 ea                	mov    edx,ebp
c0026822:	f7 f7                	div    edi
c0026824:	89 c1                	mov    ecx,eax
c0026826:	31 f6                	xor    esi,esi
c0026828:	89 c8                	mov    eax,ecx
c002682a:	89 f2                	mov    edx,esi
c002682c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0026830:	85 c9                	test   ecx,ecx
c0026832:	74 07                	je     c002683b <__divdi3+0x6b>
c0026834:	f7 d8                	neg    eax
c0026836:	83 d2 00             	adc    edx,0x0
c0026839:	f7 da                	neg    edx
c002683b:	83 c4 1c             	add    esp,0x1c
c002683e:	5b                   	pop    ebx
c002683f:	5e                   	pop    esi
c0026840:	5f                   	pop    edi
c0026841:	5d                   	pop    ebp
c0026842:	c3                   	ret    
c0026843:	90                   	nop
c0026844:	85 ff                	test   edi,edi
c0026846:	75 0b                	jne    c0026853 <__divdi3+0x83>
c0026848:	b8 01 00 00 00       	mov    eax,0x1
c002684d:	31 d2                	xor    edx,edx
c002684f:	f7 f3                	div    ebx
c0026851:	89 c7                	mov    edi,eax
c0026853:	31 d2                	xor    edx,edx
c0026855:	89 e8                	mov    eax,ebp
c0026857:	f7 f7                	div    edi
c0026859:	89 c6                	mov    esi,eax
c002685b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c002685e:	f7 f7                	div    edi
c0026860:	89 c1                	mov    ecx,eax
c0026862:	eb c4                	jmp    c0026828 <__divdi3+0x58>
c0026864:	39 eb                	cmp    ebx,ebp
c0026866:	77 3c                	ja     c00268a4 <__divdi3+0xd4>
c0026868:	0f bd f3             	bsr    esi,ebx
c002686b:	83 f6 1f             	xor    esi,0x1f
c002686e:	75 40                	jne    c00268b0 <__divdi3+0xe0>
c0026870:	39 eb                	cmp    ebx,ebp
c0026872:	72 09                	jb     c002687d <__divdi3+0xad>
c0026874:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c0026877:	0f 87 97 00 00 00    	ja     c0026914 <__divdi3+0x144>
c002687d:	b9 01 00 00 00       	mov    ecx,0x1
c0026882:	eb a4                	jmp    c0026828 <__divdi3+0x58>
c0026884:	f7 d9                	neg    ecx
c0026886:	83 d3 00             	adc    ebx,0x0
c0026889:	f7 db                	neg    ebx
c002688b:	89 0c 24             	mov    DWORD PTR [esp],ecx
c002688e:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0026892:	89 dd                	mov    ebp,ebx
c0026894:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c002689c:	e9 5f ff ff ff       	jmp    c0026800 <__divdi3+0x30>
c00268a1:	8d 76 00             	lea    esi,[esi+0x0]
c00268a4:	31 f6                	xor    esi,esi
c00268a6:	31 c9                	xor    ecx,ecx
c00268a8:	e9 7b ff ff ff       	jmp    c0026828 <__divdi3+0x58>
c00268ad:	8d 76 00             	lea    esi,[esi+0x0]
c00268b0:	b8 20 00 00 00       	mov    eax,0x20
c00268b5:	29 f0                	sub    eax,esi
c00268b7:	89 f1                	mov    ecx,esi
c00268b9:	d3 e3                	shl    ebx,cl
c00268bb:	89 fa                	mov    edx,edi
c00268bd:	88 c1                	mov    cl,al
c00268bf:	d3 ea                	shr    edx,cl
c00268c1:	09 da                	or     edx,ebx
c00268c3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00268c7:	89 f1                	mov    ecx,esi
c00268c9:	d3 e7                	shl    edi,cl
c00268cb:	89 eb                	mov    ebx,ebp
c00268cd:	88 c1                	mov    cl,al
c00268cf:	d3 eb                	shr    ebx,cl
c00268d1:	89 f1                	mov    ecx,esi
c00268d3:	d3 e5                	shl    ebp,cl
c00268d5:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00268d8:	88 c1                	mov    cl,al
c00268da:	d3 ea                	shr    edx,cl
c00268dc:	09 d5                	or     ebp,edx
c00268de:	89 e8                	mov    eax,ebp
c00268e0:	89 da                	mov    edx,ebx
c00268e2:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c00268e6:	89 d3                	mov    ebx,edx
c00268e8:	89 c5                	mov    ebp,eax
c00268ea:	f7 e7                	mul    edi
c00268ec:	39 d3                	cmp    ebx,edx
c00268ee:	72 18                	jb     c0026908 <__divdi3+0x138>
c00268f0:	74 0a                	je     c00268fc <__divdi3+0x12c>
c00268f2:	89 e9                	mov    ecx,ebp
c00268f4:	31 f6                	xor    esi,esi
c00268f6:	e9 2d ff ff ff       	jmp    c0026828 <__divdi3+0x58>
c00268fb:	90                   	nop
c00268fc:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00268ff:	89 f1                	mov    ecx,esi
c0026901:	d3 e7                	shl    edi,cl
c0026903:	39 c7                	cmp    edi,eax
c0026905:	73 eb                	jae    c00268f2 <__divdi3+0x122>
c0026907:	90                   	nop
c0026908:	8d 4d ff             	lea    ecx,[ebp-0x1]
c002690b:	31 f6                	xor    esi,esi
c002690d:	e9 16 ff ff ff       	jmp    c0026828 <__divdi3+0x58>
c0026912:	66 90                	xchg   ax,ax
c0026914:	31 c9                	xor    ecx,ecx
c0026916:	e9 0d ff ff ff       	jmp    c0026828 <__divdi3+0x58>
c002691b:	90                   	nop

c002691c <__moddi3>:
c002691c:	55                   	push   ebp
c002691d:	57                   	push   edi
c002691e:	56                   	push   esi
c002691f:	53                   	push   ebx
c0026920:	83 ec 2c             	sub    esp,0x2c
c0026923:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0026927:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c002692b:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c002692f:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0026933:	85 db                	test   ebx,ebx
c0026935:	0f 88 85 00 00 00    	js     c00269c0 <__moddi3+0xa4>
c002693b:	89 de                	mov    esi,ebx
c002693d:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0026945:	89 d7                	mov    edi,edx
c0026947:	85 d2                	test   edx,edx
c0026949:	79 09                	jns    c0026954 <__moddi3+0x38>
c002694b:	f7 d8                	neg    eax
c002694d:	83 d2 00             	adc    edx,0x0
c0026950:	f7 da                	neg    edx
c0026952:	89 d7                	mov    edi,edx
c0026954:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0026958:	89 cd                	mov    ebp,ecx
c002695a:	85 ff                	test   edi,edi
c002695c:	75 52                	jne    c00269b0 <__moddi3+0x94>
c002695e:	89 c3                	mov    ebx,eax
c0026960:	39 f0                	cmp    eax,esi
c0026962:	76 24                	jbe    c0026988 <__moddi3+0x6c>
c0026964:	89 c8                	mov    eax,ecx
c0026966:	89 f2                	mov    edx,esi
c0026968:	f7 f3                	div    ebx
c002696a:	89 d6                	mov    esi,edx
c002696c:	89 f0                	mov    eax,esi
c002696e:	31 d2                	xor    edx,edx
c0026970:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0026974:	85 c9                	test   ecx,ecx
c0026976:	74 07                	je     c002697f <__moddi3+0x63>
c0026978:	f7 d8                	neg    eax
c002697a:	83 d2 00             	adc    edx,0x0
c002697d:	f7 da                	neg    edx
c002697f:	83 c4 2c             	add    esp,0x2c
c0026982:	5b                   	pop    ebx
c0026983:	5e                   	pop    esi
c0026984:	5f                   	pop    edi
c0026985:	5d                   	pop    ebp
c0026986:	c3                   	ret    
c0026987:	90                   	nop
c0026988:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c002698c:	85 db                	test   ebx,ebx
c002698e:	75 0d                	jne    c002699d <__moddi3+0x81>
c0026990:	b8 01 00 00 00       	mov    eax,0x1
c0026995:	31 d2                	xor    edx,edx
c0026997:	f7 f7                	div    edi
c0026999:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002699d:	89 f0                	mov    eax,esi
c002699f:	31 d2                	xor    edx,edx
c00269a1:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00269a5:	f7 f7                	div    edi
c00269a7:	89 e8                	mov    eax,ebp
c00269a9:	f7 f7                	div    edi
c00269ab:	89 d6                	mov    esi,edx
c00269ad:	eb bd                	jmp    c002696c <__moddi3+0x50>
c00269af:	90                   	nop
c00269b0:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00269b4:	39 f7                	cmp    edi,esi
c00269b6:	76 20                	jbe    c00269d8 <__moddi3+0xbc>
c00269b8:	89 c8                	mov    eax,ecx
c00269ba:	89 f2                	mov    edx,esi
c00269bc:	eb b2                	jmp    c0026970 <__moddi3+0x54>
c00269be:	66 90                	xchg   ax,ax
c00269c0:	f7 d9                	neg    ecx
c00269c2:	83 d3 00             	adc    ebx,0x0
c00269c5:	f7 db                	neg    ebx
c00269c7:	89 de                	mov    esi,ebx
c00269c9:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c00269d1:	e9 6f ff ff ff       	jmp    c0026945 <__moddi3+0x29>
c00269d6:	66 90                	xchg   ax,ax
c00269d8:	0f bd c7             	bsr    eax,edi
c00269db:	83 f0 1f             	xor    eax,0x1f
c00269de:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00269e2:	75 24                	jne    c0026a08 <__moddi3+0xec>
c00269e4:	39 f7                	cmp    edi,esi
c00269e6:	72 06                	jb     c00269ee <__moddi3+0xd2>
c00269e8:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c00269ec:	77 0c                	ja     c00269fa <__moddi3+0xde>
c00269ee:	89 e9                	mov    ecx,ebp
c00269f0:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c00269f4:	19 fe                	sbb    esi,edi
c00269f6:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00269fa:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00269fe:	89 f2                	mov    edx,esi
c0026a00:	e9 6b ff ff ff       	jmp    c0026970 <__moddi3+0x54>
c0026a05:	8d 76 00             	lea    esi,[esi+0x0]
c0026a08:	b8 20 00 00 00       	mov    eax,0x20
c0026a0d:	89 c2                	mov    edx,eax
c0026a0f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0026a13:	29 da                	sub    edx,ebx
c0026a15:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0026a19:	88 d9                	mov    cl,bl
c0026a1b:	d3 e7                	shl    edi,cl
c0026a1d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0026a21:	88 d1                	mov    cl,dl
c0026a23:	d3 e8                	shr    eax,cl
c0026a25:	09 c7                	or     edi,eax
c0026a27:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c0026a2b:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0026a2f:	89 d8                	mov    eax,ebx
c0026a31:	88 d9                	mov    cl,bl
c0026a33:	d3 e7                	shl    edi,cl
c0026a35:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0026a39:	89 f3                	mov    ebx,esi
c0026a3b:	88 d1                	mov    cl,dl
c0026a3d:	d3 eb                	shr    ebx,cl
c0026a3f:	89 c7                	mov    edi,eax
c0026a41:	88 c1                	mov    cl,al
c0026a43:	d3 e6                	shl    esi,cl
c0026a45:	89 e8                	mov    eax,ebp
c0026a47:	88 d1                	mov    cl,dl
c0026a49:	d3 e8                	shr    eax,cl
c0026a4b:	09 f0                	or     eax,esi
c0026a4d:	89 f9                	mov    ecx,edi
c0026a4f:	d3 e5                	shl    ebp,cl
c0026a51:	89 da                	mov    edx,ebx
c0026a53:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c0026a57:	89 d3                	mov    ebx,edx
c0026a59:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0026a5d:	89 c6                	mov    esi,eax
c0026a5f:	89 d1                	mov    ecx,edx
c0026a61:	39 d3                	cmp    ebx,edx
c0026a63:	72 27                	jb     c0026a8c <__moddi3+0x170>
c0026a65:	74 21                	je     c0026a88 <__moddi3+0x16c>
c0026a67:	29 f5                	sub    ebp,esi
c0026a69:	19 cb                	sbb    ebx,ecx
c0026a6b:	89 de                	mov    esi,ebx
c0026a6d:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c0026a71:	d3 e6                	shl    esi,cl
c0026a73:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0026a77:	89 f9                	mov    ecx,edi
c0026a79:	d3 ed                	shr    ebp,cl
c0026a7b:	09 ee                	or     esi,ebp
c0026a7d:	89 f0                	mov    eax,esi
c0026a7f:	d3 eb                	shr    ebx,cl
c0026a81:	89 da                	mov    edx,ebx
c0026a83:	e9 e8 fe ff ff       	jmp    c0026970 <__moddi3+0x54>
c0026a88:	39 c5                	cmp    ebp,eax
c0026a8a:	73 db                	jae    c0026a67 <__moddi3+0x14b>
c0026a8c:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0026a90:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0026a94:	89 d1                	mov    ecx,edx
c0026a96:	89 c6                	mov    esi,eax
c0026a98:	eb cd                	jmp    c0026a67 <__moddi3+0x14b>
c0026a9a:	66 90                	xchg   ax,ax

c0026a9c <__udivdi3>:
c0026a9c:	55                   	push   ebp
c0026a9d:	57                   	push   edi
c0026a9e:	56                   	push   esi
c0026a9f:	53                   	push   ebx
c0026aa0:	83 ec 1c             	sub    esp,0x1c
c0026aa3:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0026aa7:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0026aab:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0026aaf:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0026ab3:	85 d2                	test   edx,edx
c0026ab5:	75 41                	jne    c0026af8 <__udivdi3+0x5c>
c0026ab7:	39 f7                	cmp    edi,esi
c0026ab9:	76 15                	jbe    c0026ad0 <__udivdi3+0x34>
c0026abb:	89 e8                	mov    eax,ebp
c0026abd:	89 f2                	mov    edx,esi
c0026abf:	f7 f7                	div    edi
c0026ac1:	31 db                	xor    ebx,ebx
c0026ac3:	89 da                	mov    edx,ebx
c0026ac5:	83 c4 1c             	add    esp,0x1c
c0026ac8:	5b                   	pop    ebx
c0026ac9:	5e                   	pop    esi
c0026aca:	5f                   	pop    edi
c0026acb:	5d                   	pop    ebp
c0026acc:	c3                   	ret    
c0026acd:	8d 76 00             	lea    esi,[esi+0x0]
c0026ad0:	89 f9                	mov    ecx,edi
c0026ad2:	85 ff                	test   edi,edi
c0026ad4:	75 0b                	jne    c0026ae1 <__udivdi3+0x45>
c0026ad6:	b8 01 00 00 00       	mov    eax,0x1
c0026adb:	31 d2                	xor    edx,edx
c0026add:	f7 f7                	div    edi
c0026adf:	89 c1                	mov    ecx,eax
c0026ae1:	31 d2                	xor    edx,edx
c0026ae3:	89 f0                	mov    eax,esi
c0026ae5:	f7 f1                	div    ecx
c0026ae7:	89 c3                	mov    ebx,eax
c0026ae9:	89 e8                	mov    eax,ebp
c0026aeb:	f7 f1                	div    ecx
c0026aed:	89 da                	mov    edx,ebx
c0026aef:	83 c4 1c             	add    esp,0x1c
c0026af2:	5b                   	pop    ebx
c0026af3:	5e                   	pop    esi
c0026af4:	5f                   	pop    edi
c0026af5:	5d                   	pop    ebp
c0026af6:	c3                   	ret    
c0026af7:	90                   	nop
c0026af8:	39 f2                	cmp    edx,esi
c0026afa:	77 1c                	ja     c0026b18 <__udivdi3+0x7c>
c0026afc:	0f bd da             	bsr    ebx,edx
c0026aff:	83 f3 1f             	xor    ebx,0x1f
c0026b02:	75 24                	jne    c0026b28 <__udivdi3+0x8c>
c0026b04:	39 f2                	cmp    edx,esi
c0026b06:	72 08                	jb     c0026b10 <__udivdi3+0x74>
c0026b08:	39 ef                	cmp    edi,ebp
c0026b0a:	0f 87 84 00 00 00    	ja     c0026b94 <__udivdi3+0xf8>
c0026b10:	b8 01 00 00 00       	mov    eax,0x1
c0026b15:	eb ac                	jmp    c0026ac3 <__udivdi3+0x27>
c0026b17:	90                   	nop
c0026b18:	31 db                	xor    ebx,ebx
c0026b1a:	31 c0                	xor    eax,eax
c0026b1c:	89 da                	mov    edx,ebx
c0026b1e:	83 c4 1c             	add    esp,0x1c
c0026b21:	5b                   	pop    ebx
c0026b22:	5e                   	pop    esi
c0026b23:	5f                   	pop    edi
c0026b24:	5d                   	pop    ebp
c0026b25:	c3                   	ret    
c0026b26:	66 90                	xchg   ax,ax
c0026b28:	b8 20 00 00 00       	mov    eax,0x20
c0026b2d:	29 d8                	sub    eax,ebx
c0026b2f:	88 d9                	mov    cl,bl
c0026b31:	d3 e2                	shl    edx,cl
c0026b33:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0026b37:	89 fa                	mov    edx,edi
c0026b39:	88 c1                	mov    cl,al
c0026b3b:	d3 ea                	shr    edx,cl
c0026b3d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0026b41:	09 d1                	or     ecx,edx
c0026b43:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0026b47:	88 d9                	mov    cl,bl
c0026b49:	d3 e7                	shl    edi,cl
c0026b4b:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0026b4f:	89 f7                	mov    edi,esi
c0026b51:	88 c1                	mov    cl,al
c0026b53:	d3 ef                	shr    edi,cl
c0026b55:	88 d9                	mov    cl,bl
c0026b57:	d3 e6                	shl    esi,cl
c0026b59:	89 ea                	mov    edx,ebp
c0026b5b:	88 c1                	mov    cl,al
c0026b5d:	d3 ea                	shr    edx,cl
c0026b5f:	09 d6                	or     esi,edx
c0026b61:	89 f0                	mov    eax,esi
c0026b63:	89 fa                	mov    edx,edi
c0026b65:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0026b69:	89 d7                	mov    edi,edx
c0026b6b:	89 c6                	mov    esi,eax
c0026b6d:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0026b71:	39 d7                	cmp    edi,edx
c0026b73:	72 13                	jb     c0026b88 <__udivdi3+0xec>
c0026b75:	74 09                	je     c0026b80 <__udivdi3+0xe4>
c0026b77:	89 f0                	mov    eax,esi
c0026b79:	31 db                	xor    ebx,ebx
c0026b7b:	e9 43 ff ff ff       	jmp    c0026ac3 <__udivdi3+0x27>
c0026b80:	88 d9                	mov    cl,bl
c0026b82:	d3 e5                	shl    ebp,cl
c0026b84:	39 c5                	cmp    ebp,eax
c0026b86:	73 ef                	jae    c0026b77 <__udivdi3+0xdb>
c0026b88:	8d 46 ff             	lea    eax,[esi-0x1]
c0026b8b:	31 db                	xor    ebx,ebx
c0026b8d:	e9 31 ff ff ff       	jmp    c0026ac3 <__udivdi3+0x27>
c0026b92:	66 90                	xchg   ax,ax
c0026b94:	31 c0                	xor    eax,eax
c0026b96:	e9 28 ff ff ff       	jmp    c0026ac3 <__udivdi3+0x27>
c0026b9b:	90                   	nop

c0026b9c <__umoddi3>:
c0026b9c:	55                   	push   ebp
c0026b9d:	57                   	push   edi
c0026b9e:	56                   	push   esi
c0026b9f:	53                   	push   ebx
c0026ba0:	83 ec 1c             	sub    esp,0x1c
c0026ba3:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0026ba7:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0026bab:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0026baf:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0026bb3:	89 da                	mov    edx,ebx
c0026bb5:	85 c0                	test   eax,eax
c0026bb7:	75 37                	jne    c0026bf0 <__umoddi3+0x54>
c0026bb9:	39 df                	cmp    edi,ebx
c0026bbb:	76 13                	jbe    c0026bd0 <__umoddi3+0x34>
c0026bbd:	89 f0                	mov    eax,esi
c0026bbf:	f7 f7                	div    edi
c0026bc1:	89 d0                	mov    eax,edx
c0026bc3:	31 d2                	xor    edx,edx
c0026bc5:	83 c4 1c             	add    esp,0x1c
c0026bc8:	5b                   	pop    ebx
c0026bc9:	5e                   	pop    esi
c0026bca:	5f                   	pop    edi
c0026bcb:	5d                   	pop    ebp
c0026bcc:	c3                   	ret    
c0026bcd:	8d 76 00             	lea    esi,[esi+0x0]
c0026bd0:	89 fd                	mov    ebp,edi
c0026bd2:	85 ff                	test   edi,edi
c0026bd4:	75 0b                	jne    c0026be1 <__umoddi3+0x45>
c0026bd6:	b8 01 00 00 00       	mov    eax,0x1
c0026bdb:	31 d2                	xor    edx,edx
c0026bdd:	f7 f7                	div    edi
c0026bdf:	89 c5                	mov    ebp,eax
c0026be1:	89 d8                	mov    eax,ebx
c0026be3:	31 d2                	xor    edx,edx
c0026be5:	f7 f5                	div    ebp
c0026be7:	89 f0                	mov    eax,esi
c0026be9:	f7 f5                	div    ebp
c0026beb:	89 d0                	mov    eax,edx
c0026bed:	eb d4                	jmp    c0026bc3 <__umoddi3+0x27>
c0026bef:	90                   	nop
c0026bf0:	89 f1                	mov    ecx,esi
c0026bf2:	39 d8                	cmp    eax,ebx
c0026bf4:	76 0a                	jbe    c0026c00 <__umoddi3+0x64>
c0026bf6:	89 f0                	mov    eax,esi
c0026bf8:	83 c4 1c             	add    esp,0x1c
c0026bfb:	5b                   	pop    ebx
c0026bfc:	5e                   	pop    esi
c0026bfd:	5f                   	pop    edi
c0026bfe:	5d                   	pop    ebp
c0026bff:	c3                   	ret    
c0026c00:	0f bd e8             	bsr    ebp,eax
c0026c03:	83 f5 1f             	xor    ebp,0x1f
c0026c06:	75 1c                	jne    c0026c24 <__umoddi3+0x88>
c0026c08:	39 d8                	cmp    eax,ebx
c0026c0a:	72 04                	jb     c0026c10 <__umoddi3+0x74>
c0026c0c:	39 f7                	cmp    edi,esi
c0026c0e:	77 08                	ja     c0026c18 <__umoddi3+0x7c>
c0026c10:	89 da                	mov    edx,ebx
c0026c12:	29 fe                	sub    esi,edi
c0026c14:	19 c2                	sbb    edx,eax
c0026c16:	89 f1                	mov    ecx,esi
c0026c18:	89 c8                	mov    eax,ecx
c0026c1a:	83 c4 1c             	add    esp,0x1c
c0026c1d:	5b                   	pop    ebx
c0026c1e:	5e                   	pop    esi
c0026c1f:	5f                   	pop    edi
c0026c20:	5d                   	pop    ebp
c0026c21:	c3                   	ret    
c0026c22:	66 90                	xchg   ax,ax
c0026c24:	ba 20 00 00 00       	mov    edx,0x20
c0026c29:	29 ea                	sub    edx,ebp
c0026c2b:	89 e9                	mov    ecx,ebp
c0026c2d:	d3 e0                	shl    eax,cl
c0026c2f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0026c33:	89 f8                	mov    eax,edi
c0026c35:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0026c39:	88 d1                	mov    cl,dl
c0026c3b:	d3 e8                	shr    eax,cl
c0026c3d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0026c41:	09 c1                	or     ecx,eax
c0026c43:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0026c47:	89 e9                	mov    ecx,ebp
c0026c49:	d3 e7                	shl    edi,cl
c0026c4b:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0026c4f:	89 d8                	mov    eax,ebx
c0026c51:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0026c55:	88 d1                	mov    cl,dl
c0026c57:	d3 e8                	shr    eax,cl
c0026c59:	89 c7                	mov    edi,eax
c0026c5b:	89 e9                	mov    ecx,ebp
c0026c5d:	d3 e3                	shl    ebx,cl
c0026c5f:	89 f0                	mov    eax,esi
c0026c61:	88 d1                	mov    cl,dl
c0026c63:	d3 e8                	shr    eax,cl
c0026c65:	09 d8                	or     eax,ebx
c0026c67:	89 e9                	mov    ecx,ebp
c0026c69:	d3 e6                	shl    esi,cl
c0026c6b:	89 f3                	mov    ebx,esi
c0026c6d:	89 fa                	mov    edx,edi
c0026c6f:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0026c73:	89 d1                	mov    ecx,edx
c0026c75:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0026c79:	89 c6                	mov    esi,eax
c0026c7b:	89 d7                	mov    edi,edx
c0026c7d:	39 d1                	cmp    ecx,edx
c0026c7f:	72 27                	jb     c0026ca8 <__umoddi3+0x10c>
c0026c81:	74 21                	je     c0026ca4 <__umoddi3+0x108>
c0026c83:	89 ca                	mov    edx,ecx
c0026c85:	29 f3                	sub    ebx,esi
c0026c87:	19 fa                	sbb    edx,edi
c0026c89:	89 d0                	mov    eax,edx
c0026c8b:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0026c8f:	d3 e0                	shl    eax,cl
c0026c91:	89 e9                	mov    ecx,ebp
c0026c93:	d3 eb                	shr    ebx,cl
c0026c95:	09 d8                	or     eax,ebx
c0026c97:	d3 ea                	shr    edx,cl
c0026c99:	83 c4 1c             	add    esp,0x1c
c0026c9c:	5b                   	pop    ebx
c0026c9d:	5e                   	pop    esi
c0026c9e:	5f                   	pop    edi
c0026c9f:	5d                   	pop    ebp
c0026ca0:	c3                   	ret    
c0026ca1:	8d 76 00             	lea    esi,[esi+0x0]
c0026ca4:	39 c3                	cmp    ebx,eax
c0026ca6:	73 db                	jae    c0026c83 <__umoddi3+0xe7>
c0026ca8:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0026cac:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c0026cb0:	89 d7                	mov    edi,edx
c0026cb2:	89 c6                	mov    esi,eax
c0026cb4:	eb cd                	jmp    c0026c83 <__umoddi3+0xe7>

c0026cb6 <__addsf3>:
c0026cb6:	55                   	push   ebp
c0026cb7:	89 e5                	mov    ebp,esp
c0026cb9:	57                   	push   edi
c0026cba:	56                   	push   esi
c0026cbb:	53                   	push   ebx
c0026cbc:	83 ec 08             	sub    esp,0x8
c0026cbf:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0026cc2:	89 fa                	mov    edx,edi
c0026cc4:	89 f8                	mov    eax,edi
c0026cc6:	c1 f8 17             	sar    eax,0x17
c0026cc9:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0026ccc:	c1 e2 08             	shl    edx,0x8
c0026ccf:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c0026cd5:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0026cd8:	89 de                	mov    esi,ebx
c0026cda:	c1 fe 17             	sar    esi,0x17
c0026cdd:	c1 e3 08             	shl    ebx,0x8
c0026ce0:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c0026ce6:	31 f0                	xor    eax,esi
c0026ce8:	0f 88 3b 01 00 00    	js     c0026e29 <__addsf3+0x173>
c0026cee:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c0026cf1:	29 f1                	sub    ecx,esi
c0026cf3:	85 c9                	test   ecx,ecx
c0026cf5:	7e 54                	jle    c0026d4b <__addsf3+0x95>
c0026cf7:	89 f0                	mov    eax,esi
c0026cf9:	84 c0                	test   al,al
c0026cfb:	75 10                	jne    c0026d0d <__addsf3+0x57>
c0026cfd:	85 db                	test   ebx,ebx
c0026cff:	0f 84 aa 02 00 00    	je     c0026faf <__addsf3+0x2f9>
c0026d05:	49                   	dec    ecx
c0026d06:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0026d09:	74 38                	je     c0026d43 <__addsf3+0x8d>
c0026d0b:	eb 13                	jmp    c0026d20 <__addsf3+0x6a>
c0026d0d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026d10:	f7 d0                	not    eax
c0026d12:	84 c0                	test   al,al
c0026d14:	0f 84 95 02 00 00    	je     c0026faf <__addsf3+0x2f9>
c0026d1a:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0026d20:	83 f9 1f             	cmp    ecx,0x1f
c0026d23:	0f 8f 86 02 00 00    	jg     c0026faf <__addsf3+0x2f9>
c0026d29:	89 de                	mov    esi,ebx
c0026d2b:	d3 ee                	shr    esi,cl
c0026d2d:	b8 20 00 00 00       	mov    eax,0x20
c0026d32:	29 c8                	sub    eax,ecx
c0026d34:	89 c1                	mov    ecx,eax
c0026d36:	d3 e3                	shl    ebx,cl
c0026d38:	31 c0                	xor    eax,eax
c0026d3a:	85 db                	test   ebx,ebx
c0026d3c:	0f 95 c0             	setne  al
c0026d3f:	09 f0                	or     eax,esi
c0026d41:	01 d0                	add    eax,edx
c0026d43:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026d46:	e9 b6 00 00 00       	jmp    c0026e01 <__addsf3+0x14b>
c0026d4b:	74 5c                	je     c0026da9 <__addsf3+0xf3>
c0026d4d:	89 f1                	mov    ecx,esi
c0026d4f:	2b 4d f0             	sub    ecx,DWORD PTR [ebp-0x10]
c0026d52:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026d55:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c0026d59:	75 14                	jne    c0026d6f <__addsf3+0xb9>
c0026d5b:	85 d2                	test   edx,edx
c0026d5d:	0f 84 4c 02 00 00    	je     c0026faf <__addsf3+0x2f9>
c0026d63:	49                   	dec    ecx
c0026d64:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0026d67:	0f 84 94 00 00 00    	je     c0026e01 <__addsf3+0x14b>
c0026d6d:	eb 12                	jmp    c0026d81 <__addsf3+0xcb>
c0026d6f:	89 f0                	mov    eax,esi
c0026d71:	f7 d0                	not    eax
c0026d73:	84 c0                	test   al,al
c0026d75:	0f 84 34 02 00 00    	je     c0026faf <__addsf3+0x2f9>
c0026d7b:	81 ca 00 00 00 80    	or     edx,0x80000000
c0026d81:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026d84:	83 f9 1f             	cmp    ecx,0x1f
c0026d87:	0f 8f 22 02 00 00    	jg     c0026faf <__addsf3+0x2f9>
c0026d8d:	89 d7                	mov    edi,edx
c0026d8f:	d3 ef                	shr    edi,cl
c0026d91:	b8 20 00 00 00       	mov    eax,0x20
c0026d96:	29 c8                	sub    eax,ecx
c0026d98:	89 c1                	mov    ecx,eax
c0026d9a:	d3 e2                	shl    edx,cl
c0026d9c:	31 c0                	xor    eax,eax
c0026d9e:	85 d2                	test   edx,edx
c0026da0:	0f 95 c0             	setne  al
c0026da3:	09 f8                	or     eax,edi
c0026da5:	01 d8                	add    eax,ebx
c0026da7:	eb 58                	jmp    c0026e01 <__addsf3+0x14b>
c0026da9:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026dac:	8d 70 01             	lea    esi,[eax+0x1]
c0026daf:	f7 c6 fe 00 00 00    	test   esi,0xfe
c0026db5:	75 32                	jne    c0026de9 <__addsf3+0x133>
c0026db7:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c0026dbb:	75 1f                	jne    c0026ddc <__addsf3+0x126>
c0026dbd:	85 d2                	test   edx,edx
c0026dbf:	0f 84 e0 01 00 00    	je     c0026fa5 <__addsf3+0x2ef>
c0026dc5:	85 db                	test   ebx,ebx
c0026dc7:	0f 84 e2 01 00 00    	je     c0026faf <__addsf3+0x2f9>
c0026dcd:	89 d0                	mov    eax,edx
c0026dcf:	01 d8                	add    eax,ebx
c0026dd1:	0f 89 a9 01 00 00    	jns    c0026f80 <__addsf3+0x2ca>
c0026dd7:	e9 9d 01 00 00       	jmp    c0026f79 <__addsf3+0x2c3>
c0026ddc:	85 d2                	test   edx,edx
c0026dde:	0f 85 cb 01 00 00    	jne    c0026faf <__addsf3+0x2f9>
c0026de4:	e9 bc 01 00 00       	jmp    c0026fa5 <__addsf3+0x2ef>
c0026de9:	31 c0                	xor    eax,eax
c0026deb:	89 f1                	mov    ecx,esi
c0026ded:	f7 d1                	not    ecx
c0026def:	84 c9                	test   cl,cl
c0026df1:	0f 84 90 01 00 00    	je     c0026f87 <__addsf3+0x2d1>
c0026df7:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0026dfa:	d1 e8                	shr    eax,1
c0026dfc:	e9 86 01 00 00       	jmp    c0026f87 <__addsf3+0x2d1>
c0026e01:	85 c0                	test   eax,eax
c0026e03:	0f 89 7e 01 00 00    	jns    c0026f87 <__addsf3+0x2d1>
c0026e09:	46                   	inc    esi
c0026e0a:	89 f2                	mov    edx,esi
c0026e0c:	f7 d2                	not    edx
c0026e0e:	84 d2                	test   dl,dl
c0026e10:	0f 84 6f 01 00 00    	je     c0026f85 <__addsf3+0x2cf>
c0026e16:	89 c2                	mov    edx,eax
c0026e18:	83 e2 01             	and    edx,0x1
c0026e1b:	d1 e8                	shr    eax,1
c0026e1d:	25 ff ff ff 3f       	and    eax,0x3fffffff
c0026e22:	09 d0                	or     eax,edx
c0026e24:	e9 5e 01 00 00       	jmp    c0026f87 <__addsf3+0x2d1>
c0026e29:	0f b6 45 f0          	movzx  eax,BYTE PTR [ebp-0x10]
c0026e2d:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0026e30:	89 f0                	mov    eax,esi
c0026e32:	0f b6 c0             	movzx  eax,al
c0026e35:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0026e38:	29 c1                	sub    ecx,eax
c0026e3a:	85 c9                	test   ecx,ecx
c0026e3c:	7e 55                	jle    c0026e93 <__addsf3+0x1dd>
c0026e3e:	85 c0                	test   eax,eax
c0026e40:	75 11                	jne    c0026e53 <__addsf3+0x19d>
c0026e42:	85 db                	test   ebx,ebx
c0026e44:	0f 84 65 01 00 00    	je     c0026faf <__addsf3+0x2f9>
c0026e4a:	49                   	dec    ecx
c0026e4b:	75 19                	jne    c0026e66 <__addsf3+0x1b0>
c0026e4d:	89 d0                	mov    eax,edx
c0026e4f:	29 d8                	sub    eax,ebx
c0026e51:	eb 38                	jmp    c0026e8b <__addsf3+0x1d5>
c0026e53:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026e56:	f7 d0                	not    eax
c0026e58:	84 c0                	test   al,al
c0026e5a:	0f 84 4f 01 00 00    	je     c0026faf <__addsf3+0x2f9>
c0026e60:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0026e66:	83 f9 1f             	cmp    ecx,0x1f
c0026e69:	0f 8f 40 01 00 00    	jg     c0026faf <__addsf3+0x2f9>
c0026e6f:	89 de                	mov    esi,ebx
c0026e71:	d3 ee                	shr    esi,cl
c0026e73:	b8 20 00 00 00       	mov    eax,0x20
c0026e78:	29 c8                	sub    eax,ecx
c0026e7a:	89 c1                	mov    ecx,eax
c0026e7c:	d3 e3                	shl    ebx,cl
c0026e7e:	31 c0                	xor    eax,eax
c0026e80:	85 db                	test   ebx,ebx
c0026e82:	0f 95 c0             	setne  al
c0026e85:	09 f0                	or     eax,esi
c0026e87:	29 c2                	sub    edx,eax
c0026e89:	89 d0                	mov    eax,edx
c0026e8b:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026e8e:	e9 af 00 00 00       	jmp    c0026f42 <__addsf3+0x28c>
c0026e93:	74 5c                	je     c0026ef1 <__addsf3+0x23b>
c0026e95:	2b 45 ec             	sub    eax,DWORD PTR [ebp-0x14]
c0026e98:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026e9b:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c0026e9f:	75 14                	jne    c0026eb5 <__addsf3+0x1ff>
c0026ea1:	85 d2                	test   edx,edx
c0026ea3:	0f 84 06 01 00 00    	je     c0026faf <__addsf3+0x2f9>
c0026ea9:	48                   	dec    eax
c0026eaa:	75 1b                	jne    c0026ec7 <__addsf3+0x211>
c0026eac:	89 d8                	mov    eax,ebx
c0026eae:	29 d0                	sub    eax,edx
c0026eb0:	e9 8d 00 00 00       	jmp    c0026f42 <__addsf3+0x28c>
c0026eb5:	89 f1                	mov    ecx,esi
c0026eb7:	f7 d1                	not    ecx
c0026eb9:	84 c9                	test   cl,cl
c0026ebb:	0f 84 ee 00 00 00    	je     c0026faf <__addsf3+0x2f9>
c0026ec1:	81 ca 00 00 00 80    	or     edx,0x80000000
c0026ec7:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026eca:	83 f8 1f             	cmp    eax,0x1f
c0026ecd:	0f 8f dc 00 00 00    	jg     c0026faf <__addsf3+0x2f9>
c0026ed3:	89 d7                	mov    edi,edx
c0026ed5:	88 c1                	mov    cl,al
c0026ed7:	d3 ef                	shr    edi,cl
c0026ed9:	b9 20 00 00 00       	mov    ecx,0x20
c0026ede:	29 c1                	sub    ecx,eax
c0026ee0:	d3 e2                	shl    edx,cl
c0026ee2:	31 c0                	xor    eax,eax
c0026ee4:	85 d2                	test   edx,edx
c0026ee6:	0f 95 c0             	setne  al
c0026ee9:	09 f8                	or     eax,edi
c0026eeb:	29 c3                	sub    ebx,eax
c0026eed:	89 d8                	mov    eax,ebx
c0026eef:	eb 51                	jmp    c0026f42 <__addsf3+0x28c>
c0026ef1:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026ef4:	40                   	inc    eax
c0026ef5:	a8 fe                	test   al,0xfe
c0026ef7:	75 3d                	jne    c0026f36 <__addsf3+0x280>
c0026ef9:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c0026efd:	0f 85 a7 00 00 00    	jne    c0026faa <__addsf3+0x2f4>
c0026f03:	85 d2                	test   edx,edx
c0026f05:	75 12                	jne    c0026f19 <__addsf3+0x263>
c0026f07:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026f0a:	85 db                	test   ebx,ebx
c0026f0c:	0f 85 9d 00 00 00    	jne    c0026faf <__addsf3+0x2f9>
c0026f12:	31 ff                	xor    edi,edi
c0026f14:	e9 96 00 00 00       	jmp    c0026faf <__addsf3+0x2f9>
c0026f19:	85 db                	test   ebx,ebx
c0026f1b:	0f 84 8e 00 00 00    	je     c0026faf <__addsf3+0x2f9>
c0026f21:	89 d0                	mov    eax,edx
c0026f23:	29 d8                	sub    eax,ebx
c0026f25:	79 06                	jns    c0026f2d <__addsf3+0x277>
c0026f27:	89 d8                	mov    eax,ebx
c0026f29:	29 d0                	sub    eax,edx
c0026f2b:	eb 5a                	jmp    c0026f87 <__addsf3+0x2d1>
c0026f2d:	bf 00 00 00 00       	mov    edi,0x0
c0026f32:	74 7b                	je     c0026faf <__addsf3+0x2f9>
c0026f34:	eb 4a                	jmp    c0026f80 <__addsf3+0x2ca>
c0026f36:	89 d0                	mov    eax,edx
c0026f38:	29 d8                	sub    eax,ebx
c0026f3a:	79 12                	jns    c0026f4e <__addsf3+0x298>
c0026f3c:	89 d8                	mov    eax,ebx
c0026f3e:	29 d0                	sub    eax,edx
c0026f40:	eb 09                	jmp    c0026f4b <__addsf3+0x295>
c0026f42:	85 c0                	test   eax,eax
c0026f44:	79 41                	jns    c0026f87 <__addsf3+0x2d1>
c0026f46:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0026f4b:	89 75 f0             	mov    DWORD PTR [ebp-0x10],esi
c0026f4e:	31 f6                	xor    esi,esi
c0026f50:	85 c0                	test   eax,eax
c0026f52:	74 33                	je     c0026f87 <__addsf3+0x2d1>
c0026f54:	0f bd c8             	bsr    ecx,eax
c0026f57:	83 f1 1f             	xor    ecx,0x1f
c0026f5a:	d3 e0                	shl    eax,cl
c0026f5c:	0f b6 55 f0          	movzx  edx,BYTE PTR [ebp-0x10]
c0026f60:	39 ca                	cmp    edx,ecx
c0026f62:	7f 10                	jg     c0026f74 <__addsf3+0x2be>
c0026f64:	29 d1                	sub    ecx,edx
c0026f66:	41                   	inc    ecx
c0026f67:	d3 e8                	shr    eax,cl
c0026f69:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026f6c:	81 e6 00 ff ff ff    	and    esi,0xffffff00
c0026f72:	eb 13                	jmp    c0026f87 <__addsf3+0x2d1>
c0026f74:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026f77:	29 ce                	sub    esi,ecx
c0026f79:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0026f7e:	eb 07                	jmp    c0026f87 <__addsf3+0x2d1>
c0026f80:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026f83:	eb 02                	jmp    c0026f87 <__addsf3+0x2d1>
c0026f85:	31 c0                	xor    eax,eax
c0026f87:	89 c2                	mov    edx,eax
c0026f89:	c1 ea 08             	shr    edx,0x8
c0026f8c:	a8 7f                	test   al,0x7f
c0026f8e:	0f 95 c1             	setne  cl
c0026f91:	09 d1                	or     ecx,edx
c0026f93:	83 e1 01             	and    ecx,0x1
c0026f96:	c1 e8 07             	shr    eax,0x7
c0026f99:	21 c8                	and    eax,ecx
c0026f9b:	c1 e6 17             	shl    esi,0x17
c0026f9e:	09 d6                	or     esi,edx
c0026fa0:	8d 3c 30             	lea    edi,[eax+esi*1]
c0026fa3:	eb 0a                	jmp    c0026faf <__addsf3+0x2f9>
c0026fa5:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026fa8:	eb 05                	jmp    c0026faf <__addsf3+0x2f9>
c0026faa:	bf 00 00 c0 7f       	mov    edi,0x7fc00000
c0026faf:	89 f8                	mov    eax,edi
c0026fb1:	5a                   	pop    edx
c0026fb2:	59                   	pop    ecx
c0026fb3:	5b                   	pop    ebx
c0026fb4:	5e                   	pop    esi
c0026fb5:	5f                   	pop    edi
c0026fb6:	5d                   	pop    ebp
c0026fb7:	c3                   	ret    

c0026fb8 <__subsf3>:
c0026fb8:	55                   	push   ebp
c0026fb9:	89 e5                	mov    ebp,esp
c0026fbb:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026fbe:	05 00 00 00 80       	add    eax,0x80000000
c0026fc3:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0026fc6:	5d                   	pop    ebp
c0026fc7:	e9 ea fc ff ff       	jmp    c0026cb6 <__addsf3>

c0026fcc <__negsf2>:
c0026fcc:	55                   	push   ebp
c0026fcd:	89 e5                	mov    ebp,esp
c0026fcf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026fd2:	05 00 00 00 80       	add    eax,0x80000000
c0026fd7:	5d                   	pop    ebp
c0026fd8:	c3                   	ret    

c0026fd9 <__mulsf3>:
c0026fd9:	55                   	push   ebp
c0026fda:	89 e5                	mov    ebp,esp
c0026fdc:	57                   	push   edi
c0026fdd:	56                   	push   esi
c0026fde:	53                   	push   ebx
c0026fdf:	83 ec 1c             	sub    esp,0x1c
c0026fe2:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c0026fe5:	89 f0                	mov    eax,esi
c0026fe7:	89 f1                	mov    ecx,esi
c0026fe9:	c1 f9 17             	sar    ecx,0x17
c0026fec:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c0026fef:	c1 e0 08             	shl    eax,0x8
c0026ff2:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0026ff7:	89 c1                	mov    ecx,eax
c0026ff9:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026ffc:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0026fff:	89 c7                	mov    edi,eax
c0027001:	c1 ff 17             	sar    edi,0x17
c0027004:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0027008:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c002700b:	89 f8                	mov    eax,edi
c002700d:	0f b6 c0             	movzx  eax,al
c0027010:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0027013:	8d 5c 03 82          	lea    ebx,[ebx+eax*1-0x7e]
c0027017:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c002701a:	42                   	inc    edx
c002701b:	80 e2 fe             	and    dl,0xfe
c002701e:	75 7b                	jne    c002709b <__mulsf3+0xc2>
c0027020:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0027024:	74 54                	je     c002707a <__mulsf3+0xa1>
c0027026:	85 c9                	test   ecx,ecx
c0027028:	0f 85 64 01 00 00    	jne    c0027192 <__mulsf3+0x1b9>
c002702e:	8d 57 01             	lea    edx,[edi+0x1]
c0027031:	80 e2 fe             	and    dl,0xfe
c0027034:	75 1f                	jne    c0027055 <__mulsf3+0x7c>
c0027036:	85 c0                	test   eax,eax
c0027038:	b8 00 00 00 00       	mov    eax,0x0
c002703d:	74 29                	je     c0027068 <__mulsf3+0x8f>
c002703f:	53                   	push   ebx
c0027040:	53                   	push   ebx
c0027041:	50                   	push   eax
c0027042:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027045:	e8 96 05 00 00       	call   c00275e0 <__nesf2>
c002704a:	83 c4 10             	add    esp,0x10
c002704d:	85 c0                	test   eax,eax
c002704f:	0f 85 3a 01 00 00    	jne    c002718f <__mulsf3+0x1b6>
c0027055:	85 ff                	test   edi,edi
c0027057:	0f 89 35 01 00 00    	jns    c0027192 <__mulsf3+0x1b9>
c002705d:	81 c6 00 00 00 80    	add    esi,0x80000000
c0027063:	e9 2a 01 00 00       	jmp    c0027192 <__mulsf3+0x1b9>
c0027068:	51                   	push   ecx
c0027069:	51                   	push   ecx
c002706a:	50                   	push   eax
c002706b:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c002706e:	e8 6d 05 00 00       	call   c00275e0 <__nesf2>
c0027073:	83 c4 10             	add    esp,0x10
c0027076:	85 c0                	test   eax,eax
c0027078:	eb 15                	jmp    c002708f <__mulsf3+0xb6>
c002707a:	85 c9                	test   ecx,ecx
c002707c:	74 0b                	je     c0027089 <__mulsf3+0xb0>
c002707e:	8d 53 ff             	lea    edx,[ebx-0x1]
c0027081:	01 c9                	add    ecx,ecx
c0027083:	78 16                	js     c002709b <__mulsf3+0xc2>
c0027085:	89 d3                	mov    ebx,edx
c0027087:	eb f5                	jmp    c002707e <__mulsf3+0xa5>
c0027089:	89 f8                	mov    eax,edi
c002708b:	f7 d0                	not    eax
c002708d:	84 c0                	test   al,al
c002708f:	75 c4                	jne    c0027055 <__mulsf3+0x7c>
c0027091:	be 00 00 c0 7f       	mov    esi,0x7fc00000
c0027096:	e9 f7 00 00 00       	jmp    c0027192 <__mulsf3+0x1b9>
c002709b:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c002709e:	c1 e6 08             	shl    esi,0x8
c00270a1:	81 e6 00 ff ff 7f    	and    esi,0x7fffff00
c00270a7:	8d 57 01             	lea    edx,[edi+0x1]
c00270aa:	80 e2 fe             	and    dl,0xfe
c00270ad:	75 63                	jne    c0027112 <__mulsf3+0x139>
c00270af:	85 c0                	test   eax,eax
c00270b1:	74 2f                	je     c00270e2 <__mulsf3+0x109>
c00270b3:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c00270b7:	0f 89 d2 00 00 00    	jns    c002718f <__mulsf3+0x1b6>
c00270bd:	52                   	push   edx
c00270be:	52                   	push   edx
c00270bf:	6a 00                	push   0x0
c00270c1:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00270c4:	e8 dc 04 00 00       	call   c00275a5 <__eqsf2>
c00270c9:	83 c4 10             	add    esp,0x10
c00270cc:	85 c0                	test   eax,eax
c00270ce:	0f 85 bb 00 00 00    	jne    c002718f <__mulsf3+0x1b6>
c00270d4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00270d7:	8d b0 00 00 00 80    	lea    esi,[eax-0x80000000]
c00270dd:	e9 b0 00 00 00       	jmp    c0027192 <__mulsf3+0x1b9>
c00270e2:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c00270e5:	50                   	push   eax
c00270e6:	50                   	push   eax
c00270e7:	6a 00                	push   0x0
c00270e9:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00270ec:	e8 b4 04 00 00       	call   c00275a5 <__eqsf2>
c00270f1:	83 c4 10             	add    esp,0x10
c00270f4:	85 c0                	test   eax,eax
c00270f6:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c00270f9:	75 0c                	jne    c0027107 <__mulsf3+0x12e>
c00270fb:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c00270ff:	0f 89 8a 00 00 00    	jns    c002718f <__mulsf3+0x1b6>
c0027105:	eb cd                	jmp    c00270d4 <__mulsf3+0xfb>
c0027107:	8d 43 ff             	lea    eax,[ebx-0x1]
c002710a:	01 f6                	add    esi,esi
c002710c:	78 04                	js     c0027112 <__mulsf3+0x139>
c002710e:	89 c3                	mov    ebx,eax
c0027110:	eb f5                	jmp    c0027107 <__mulsf3+0x12e>
c0027112:	89 c8                	mov    eax,ecx
c0027114:	0d 00 00 00 80       	or     eax,0x80000000
c0027119:	81 ce 00 00 00 80    	or     esi,0x80000000
c002711f:	f7 e6                	mul    esi
c0027121:	85 c0                	test   eax,eax
c0027123:	0f 95 c0             	setne  al
c0027126:	0f b6 c0             	movzx  eax,al
c0027129:	09 c2                	or     edx,eax
c002712b:	78 03                	js     c0027130 <__mulsf3+0x157>
c002712d:	01 d2                	add    edx,edx
c002712f:	4b                   	dec    ebx
c0027130:	81 fb fe 00 00 00    	cmp    ebx,0xfe
c0027136:	7f 22                	jg     c002715a <__mulsf3+0x181>
c0027138:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c002713e:	85 db                	test   ebx,ebx
c0027140:	7f 23                	jg     c0027165 <__mulsf3+0x18c>
c0027142:	83 fb e9             	cmp    ebx,0xffffffe9
c0027145:	7c 1a                	jl     c0027161 <__mulsf3+0x188>
c0027147:	81 ca 00 00 00 80    	or     edx,0x80000000
c002714d:	b9 01 00 00 00       	mov    ecx,0x1
c0027152:	29 d9                	sub    ecx,ebx
c0027154:	d3 ea                	shr    edx,cl
c0027156:	31 db                	xor    ebx,ebx
c0027158:	eb 0b                	jmp    c0027165 <__mulsf3+0x18c>
c002715a:	bb ff 00 00 00       	mov    ebx,0xff
c002715f:	eb 02                	jmp    c0027163 <__mulsf3+0x18a>
c0027161:	31 db                	xor    ebx,ebx
c0027163:	31 d2                	xor    edx,edx
c0027165:	89 d0                	mov    eax,edx
c0027167:	c1 e8 08             	shr    eax,0x8
c002716a:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c002716d:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c0027173:	09 fb                	or     ebx,edi
c0027175:	c1 e3 17             	shl    ebx,0x17
c0027178:	09 c3                	or     ebx,eax
c002717a:	f6 c2 7f             	test   dl,0x7f
c002717d:	0f 95 c1             	setne  cl
c0027180:	09 c8                	or     eax,ecx
c0027182:	83 e0 01             	and    eax,0x1
c0027185:	c1 ea 07             	shr    edx,0x7
c0027188:	21 c2                	and    edx,eax
c002718a:	8d 34 13             	lea    esi,[ebx+edx*1]
c002718d:	eb 03                	jmp    c0027192 <__mulsf3+0x1b9>
c002718f:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c0027192:	89 f0                	mov    eax,esi
c0027194:	8d 65 f4             	lea    esp,[ebp-0xc]
c0027197:	5b                   	pop    ebx
c0027198:	5e                   	pop    esi
c0027199:	5f                   	pop    edi
c002719a:	5d                   	pop    ebp
c002719b:	c3                   	ret    

c002719c <__divsf3>:
c002719c:	55                   	push   ebp
c002719d:	89 e5                	mov    ebp,esp
c002719f:	57                   	push   edi
c00271a0:	56                   	push   esi
c00271a1:	53                   	push   ebx
c00271a2:	83 ec 1c             	sub    esp,0x1c
c00271a5:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c00271a8:	89 d8                	mov    eax,ebx
c00271aa:	89 d9                	mov    ecx,ebx
c00271ac:	c1 f9 17             	sar    ecx,0x17
c00271af:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c00271b2:	c1 e0 08             	shl    eax,0x8
c00271b5:	25 00 ff ff 7f       	and    eax,0x7fffff00
c00271ba:	89 c1                	mov    ecx,eax
c00271bc:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00271bf:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c00271c2:	89 c7                	mov    edi,eax
c00271c4:	c1 ff 17             	sar    edi,0x17
c00271c7:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c00271cb:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c00271ce:	89 f8                	mov    eax,edi
c00271d0:	0f b6 c0             	movzx  eax,al
c00271d3:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c00271d6:	29 c6                	sub    esi,eax
c00271d8:	83 c6 7f             	add    esi,0x7f
c00271db:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c00271de:	42                   	inc    edx
c00271df:	80 e2 fe             	and    dl,0xfe
c00271e2:	0f 85 9c 00 00 00    	jne    c0027284 <__divsf3+0xe8>
c00271e8:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c00271ec:	74 33                	je     c0027221 <__divsf3+0x85>
c00271ee:	85 c9                	test   ecx,ecx
c00271f0:	0f 85 c7 01 00 00    	jne    c00273bd <__divsf3+0x221>
c00271f6:	8d 57 01             	lea    edx,[edi+0x1]
c00271f9:	80 e2 fe             	and    dl,0xfe
c00271fc:	75 2f                	jne    c002722d <__divsf3+0x91>
c00271fe:	85 c0                	test   eax,eax
c0027200:	74 2b                	je     c002722d <__divsf3+0x91>
c0027202:	51                   	push   ecx
c0027203:	51                   	push   ecx
c0027204:	6a 00                	push   0x0
c0027206:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027209:	e8 d2 03 00 00       	call   c00275e0 <__nesf2>
c002720e:	83 c4 10             	add    esp,0x10
c0027211:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0027214:	85 c0                	test   eax,eax
c0027216:	0f 85 a1 01 00 00    	jne    c00273bd <__divsf3+0x221>
c002721c:	e9 92 01 00 00       	jmp    c00273b3 <__divsf3+0x217>
c0027221:	85 c9                	test   ecx,ecx
c0027223:	75 1b                	jne    c0027240 <__divsf3+0xa4>
c0027225:	8d 57 01             	lea    edx,[edi+0x1]
c0027228:	80 e2 fe             	and    dl,0xfe
c002722b:	74 1e                	je     c002724b <__divsf3+0xaf>
c002722d:	85 ff                	test   edi,edi
c002722f:	0f 89 88 01 00 00    	jns    c00273bd <__divsf3+0x221>
c0027235:	81 c3 00 00 00 80    	add    ebx,0x80000000
c002723b:	e9 7d 01 00 00       	jmp    c00273bd <__divsf3+0x221>
c0027240:	8d 56 ff             	lea    edx,[esi-0x1]
c0027243:	01 c9                	add    ecx,ecx
c0027245:	78 3d                	js     c0027284 <__divsf3+0xe8>
c0027247:	89 d6                	mov    esi,edx
c0027249:	eb f5                	jmp    c0027240 <__divsf3+0xa4>
c002724b:	85 c0                	test   eax,eax
c002724d:	b8 00 00 00 00       	mov    eax,0x0
c0027252:	74 18                	je     c002726c <__divsf3+0xd0>
c0027254:	52                   	push   edx
c0027255:	52                   	push   edx
c0027256:	50                   	push   eax
c0027257:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c002725a:	e8 81 03 00 00       	call   c00275e0 <__nesf2>
c002725f:	83 c4 10             	add    esp,0x10
c0027262:	85 c0                	test   eax,eax
c0027264:	0f 85 50 01 00 00    	jne    c00273ba <__divsf3+0x21e>
c002726a:	eb c1                	jmp    c002722d <__divsf3+0x91>
c002726c:	56                   	push   esi
c002726d:	56                   	push   esi
c002726e:	50                   	push   eax
c002726f:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027272:	e8 69 03 00 00       	call   c00275e0 <__nesf2>
c0027277:	83 c4 10             	add    esp,0x10
c002727a:	85 c0                	test   eax,eax
c002727c:	0f 84 31 01 00 00    	je     c00273b3 <__divsf3+0x217>
c0027282:	eb a9                	jmp    c002722d <__divsf3+0x91>
c0027284:	8b 5d dc             	mov    ebx,DWORD PTR [ebp-0x24]
c0027287:	c1 e3 08             	shl    ebx,0x8
c002728a:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c0027290:	8d 57 01             	lea    edx,[edi+0x1]
c0027293:	80 e2 fe             	and    dl,0xfe
c0027296:	75 71                	jne    c0027309 <__divsf3+0x16d>
c0027298:	85 c0                	test   eax,eax
c002729a:	ba 00 00 00 00       	mov    edx,0x0
c002729f:	74 2f                	je     c00272d0 <__divsf3+0x134>
c00272a1:	51                   	push   ecx
c00272a2:	51                   	push   ecx
c00272a3:	52                   	push   edx
c00272a4:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00272a7:	e8 f9 02 00 00       	call   c00275a5 <__eqsf2>
c00272ac:	83 c4 10             	add    esp,0x10
c00272af:	85 c0                	test   eax,eax
c00272b1:	0f 85 03 01 00 00    	jne    c00273ba <__divsf3+0x21e>
c00272b7:	31 d2                	xor    edx,edx
c00272b9:	89 d3                	mov    ebx,edx
c00272bb:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00272be:	31 f8                	xor    eax,edi
c00272c0:	0f 89 f7 00 00 00    	jns    c00273bd <__divsf3+0x221>
c00272c6:	bb 00 00 00 80       	mov    ebx,0x80000000
c00272cb:	e9 ed 00 00 00       	jmp    c00273bd <__divsf3+0x221>
c00272d0:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c00272d3:	50                   	push   eax
c00272d4:	50                   	push   eax
c00272d5:	52                   	push   edx
c00272d6:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00272d9:	e8 c7 02 00 00       	call   c00275a5 <__eqsf2>
c00272de:	83 c4 10             	add    esp,0x10
c00272e1:	85 c0                	test   eax,eax
c00272e3:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c00272e6:	75 16                	jne    c00272fe <__divsf3+0x162>
c00272e8:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c00272eb:	31 fb                	xor    ebx,edi
c00272ed:	81 e3 00 00 00 80    	and    ebx,0x80000000
c00272f3:	81 cb 00 00 80 7f    	or     ebx,0x7f800000
c00272f9:	e9 bf 00 00 00       	jmp    c00273bd <__divsf3+0x221>
c00272fe:	8d 46 01             	lea    eax,[esi+0x1]
c0027301:	01 db                	add    ebx,ebx
c0027303:	78 04                	js     c0027309 <__divsf3+0x16d>
c0027305:	89 c6                	mov    esi,eax
c0027307:	eb f5                	jmp    c00272fe <__divsf3+0x162>
c0027309:	89 c8                	mov    eax,ecx
c002730b:	0d 00 00 00 80       	or     eax,0x80000000
c0027310:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0027316:	31 d2                	xor    edx,edx
c0027318:	39 d8                	cmp    eax,ebx
c002731a:	72 07                	jb     c0027323 <__divsf3+0x187>
c002731c:	29 d8                	sub    eax,ebx
c002731e:	ba 01 00 00 00       	mov    edx,0x1
c0027323:	c7 45 e0 19 00 00 00 	mov    DWORD PTR [ebp-0x20],0x19
c002732a:	01 d2                	add    edx,edx
c002732c:	89 c1                	mov    ecx,eax
c002732e:	01 c0                	add    eax,eax
c0027330:	85 c9                	test   ecx,ecx
c0027332:	78 04                	js     c0027338 <__divsf3+0x19c>
c0027334:	39 c3                	cmp    ebx,eax
c0027336:	77 05                	ja     c002733d <__divsf3+0x1a1>
c0027338:	29 d8                	sub    eax,ebx
c002733a:	83 ca 01             	or     edx,0x1
c002733d:	ff 4d e0             	dec    DWORD PTR [ebp-0x20]
c0027340:	75 e8                	jne    c002732a <__divsf3+0x18e>
c0027342:	85 c0                	test   eax,eax
c0027344:	0f 95 c0             	setne  al
c0027347:	0f b6 c0             	movzx  eax,al
c002734a:	c1 e2 06             	shl    edx,0x6
c002734d:	09 c2                	or     edx,eax
c002734f:	78 03                	js     c0027354 <__divsf3+0x1b8>
c0027351:	01 d2                	add    edx,edx
c0027353:	4e                   	dec    esi
c0027354:	81 fe fe 00 00 00    	cmp    esi,0xfe
c002735a:	7f 22                	jg     c002737e <__divsf3+0x1e2>
c002735c:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0027362:	85 f6                	test   esi,esi
c0027364:	7f 23                	jg     c0027389 <__divsf3+0x1ed>
c0027366:	83 fe e9             	cmp    esi,0xffffffe9
c0027369:	7c 1a                	jl     c0027385 <__divsf3+0x1e9>
c002736b:	81 ca 00 00 00 80    	or     edx,0x80000000
c0027371:	b9 01 00 00 00       	mov    ecx,0x1
c0027376:	29 f1                	sub    ecx,esi
c0027378:	d3 ea                	shr    edx,cl
c002737a:	31 f6                	xor    esi,esi
c002737c:	eb 0b                	jmp    c0027389 <__divsf3+0x1ed>
c002737e:	be ff 00 00 00       	mov    esi,0xff
c0027383:	eb 02                	jmp    c0027387 <__divsf3+0x1eb>
c0027385:	31 f6                	xor    esi,esi
c0027387:	31 d2                	xor    edx,edx
c0027389:	89 d0                	mov    eax,edx
c002738b:	c1 e8 08             	shr    eax,0x8
c002738e:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c0027391:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c0027397:	09 fe                	or     esi,edi
c0027399:	c1 e6 17             	shl    esi,0x17
c002739c:	09 c6                	or     esi,eax
c002739e:	f6 c2 7f             	test   dl,0x7f
c00273a1:	0f 95 c1             	setne  cl
c00273a4:	09 c8                	or     eax,ecx
c00273a6:	83 e0 01             	and    eax,0x1
c00273a9:	c1 ea 07             	shr    edx,0x7
c00273ac:	21 c2                	and    edx,eax
c00273ae:	8d 1c 16             	lea    ebx,[esi+edx*1]
c00273b1:	eb 0a                	jmp    c00273bd <__divsf3+0x221>
c00273b3:	bb 00 00 c0 7f       	mov    ebx,0x7fc00000
c00273b8:	eb 03                	jmp    c00273bd <__divsf3+0x221>
c00273ba:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c00273bd:	89 d8                	mov    eax,ebx
c00273bf:	8d 65 f4             	lea    esp,[ebp-0xc]
c00273c2:	5b                   	pop    ebx
c00273c3:	5e                   	pop    esi
c00273c4:	5f                   	pop    edi
c00273c5:	5d                   	pop    ebp
c00273c6:	c3                   	ret    

c00273c7 <__floatsisf>:
c00273c7:	55                   	push   ebp
c00273c8:	89 e5                	mov    ebp,esp
c00273ca:	53                   	push   ebx
c00273cb:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00273ce:	85 d2                	test   edx,edx
c00273d0:	7e 2b                	jle    c00273fd <__floatsisf+0x36>
c00273d2:	0f bd ca             	bsr    ecx,edx
c00273d5:	83 f1 1f             	xor    ecx,0x1f
c00273d8:	d3 e2                	shl    edx,cl
c00273da:	89 d0                	mov    eax,edx
c00273dc:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00273e1:	89 c3                	mov    ebx,eax
c00273e3:	c1 eb 08             	shr    ebx,0x8
c00273e6:	80 e2 7f             	and    dl,0x7f
c00273e9:	0f 95 c2             	setne  dl
c00273ec:	09 da                	or     edx,ebx
c00273ee:	83 e2 01             	and    edx,0x1
c00273f1:	c1 e8 07             	shr    eax,0x7
c00273f4:	21 c2                	and    edx,eax
c00273f6:	b8 9e 00 00 00       	mov    eax,0x9e
c00273fb:	eb 32                	jmp    c002742f <__floatsisf+0x68>
c00273fd:	b8 00 00 00 00       	mov    eax,0x0
c0027402:	74 34                	je     c0027438 <__floatsisf+0x71>
c0027404:	f7 da                	neg    edx
c0027406:	0f bd ca             	bsr    ecx,edx
c0027409:	83 f1 1f             	xor    ecx,0x1f
c002740c:	d3 e2                	shl    edx,cl
c002740e:	89 d0                	mov    eax,edx
c0027410:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027415:	89 c3                	mov    ebx,eax
c0027417:	c1 eb 08             	shr    ebx,0x8
c002741a:	80 e2 7f             	and    dl,0x7f
c002741d:	0f 95 c2             	setne  dl
c0027420:	09 da                	or     edx,ebx
c0027422:	83 e2 01             	and    edx,0x1
c0027425:	c1 e8 07             	shr    eax,0x7
c0027428:	21 c2                	and    edx,eax
c002742a:	b8 9e 01 00 00       	mov    eax,0x19e
c002742f:	29 c8                	sub    eax,ecx
c0027431:	c1 e0 17             	shl    eax,0x17
c0027434:	09 d8                	or     eax,ebx
c0027436:	01 d0                	add    eax,edx
c0027438:	5b                   	pop    ebx
c0027439:	5d                   	pop    ebp
c002743a:	c3                   	ret    

c002743b <__floatunsisf>:
c002743b:	55                   	push   ebp
c002743c:	89 e5                	mov    ebp,esp
c002743e:	53                   	push   ebx
c002743f:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0027442:	31 c0                	xor    eax,eax
c0027444:	85 d2                	test   edx,edx
c0027446:	74 32                	je     c002747a <__floatunsisf+0x3f>
c0027448:	0f bd ca             	bsr    ecx,edx
c002744b:	83 f1 1f             	xor    ecx,0x1f
c002744e:	d3 e2                	shl    edx,cl
c0027450:	89 d0                	mov    eax,edx
c0027452:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027457:	89 c3                	mov    ebx,eax
c0027459:	c1 eb 08             	shr    ebx,0x8
c002745c:	80 e2 7f             	and    dl,0x7f
c002745f:	0f 95 c2             	setne  dl
c0027462:	09 da                	or     edx,ebx
c0027464:	83 e2 01             	and    edx,0x1
c0027467:	c1 e8 07             	shr    eax,0x7
c002746a:	21 c2                	and    edx,eax
c002746c:	b8 9e 00 00 00       	mov    eax,0x9e
c0027471:	29 c8                	sub    eax,ecx
c0027473:	c1 e0 17             	shl    eax,0x17
c0027476:	09 d8                	or     eax,ebx
c0027478:	01 d0                	add    eax,edx
c002747a:	5b                   	pop    ebx
c002747b:	5d                   	pop    ebp
c002747c:	c3                   	ret    

c002747d <__fixsfsi>:
c002747d:	55                   	push   ebp
c002747e:	89 e5                	mov    ebp,esp
c0027480:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0027483:	89 d1                	mov    ecx,edx
c0027485:	c1 e1 08             	shl    ecx,0x8
c0027488:	81 e1 00 ff ff 7f    	and    ecx,0x7fffff00
c002748e:	c1 fa 17             	sar    edx,0x17
c0027491:	78 1c                	js     c00274af <__fixsfsi+0x32>
c0027493:	83 ea 7f             	sub    edx,0x7f
c0027496:	31 c0                	xor    eax,eax
c0027498:	83 fa 1e             	cmp    edx,0x1e
c002749b:	77 40                	ja     c00274dd <__fixsfsi+0x60>
c002749d:	89 c8                	mov    eax,ecx
c002749f:	0d 00 00 00 80       	or     eax,0x80000000
c00274a4:	b9 1f 00 00 00       	mov    ecx,0x1f
c00274a9:	29 d1                	sub    ecx,edx
c00274ab:	d3 e8                	shr    eax,cl
c00274ad:	eb 2e                	jmp    c00274dd <__fixsfsi+0x60>
c00274af:	31 c0                	xor    eax,eax
c00274b1:	81 c2 81 00 00 00    	add    edx,0x81
c00274b7:	78 24                	js     c00274dd <__fixsfsi+0x60>
c00274b9:	83 fa 1e             	cmp    edx,0x1e
c00274bc:	7e 09                	jle    c00274c7 <__fixsfsi+0x4a>
c00274be:	83 fa 1f             	cmp    edx,0x1f
c00274c1:	75 18                	jne    c00274db <__fixsfsi+0x5e>
c00274c3:	85 c9                	test   ecx,ecx
c00274c5:	75 14                	jne    c00274db <__fixsfsi+0x5e>
c00274c7:	89 c8                	mov    eax,ecx
c00274c9:	0d 00 00 00 80       	or     eax,0x80000000
c00274ce:	b9 1f 00 00 00       	mov    ecx,0x1f
c00274d3:	29 d1                	sub    ecx,edx
c00274d5:	d3 e8                	shr    eax,cl
c00274d7:	f7 d8                	neg    eax
c00274d9:	eb 02                	jmp    c00274dd <__fixsfsi+0x60>
c00274db:	31 c0                	xor    eax,eax
c00274dd:	5d                   	pop    ebp
c00274de:	c3                   	ret    

c00274df <__fixunssfsi>:
c00274df:	55                   	push   ebp
c00274e0:	89 e5                	mov    ebp,esp
c00274e2:	53                   	push   ebx
c00274e3:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00274e6:	89 d3                	mov    ebx,edx
c00274e8:	c1 fb 17             	sar    ebx,0x17
c00274eb:	83 eb 7f             	sub    ebx,0x7f
c00274ee:	31 c0                	xor    eax,eax
c00274f0:	83 fb 1f             	cmp    ebx,0x1f
c00274f3:	77 18                	ja     c002750d <__fixunssfsi+0x2e>
c00274f5:	89 d0                	mov    eax,edx
c00274f7:	c1 e0 08             	shl    eax,0x8
c00274fa:	25 00 ff ff 7f       	and    eax,0x7fffff00
c00274ff:	0d 00 00 00 80       	or     eax,0x80000000
c0027504:	b9 1f 00 00 00       	mov    ecx,0x1f
c0027509:	29 d9                	sub    ecx,ebx
c002750b:	d3 e8                	shr    eax,cl
c002750d:	5b                   	pop    ebx
c002750e:	5d                   	pop    ebp
c002750f:	c3                   	ret    

c0027510 <__cmpsf2>:
c0027510:	55                   	push   ebp
c0027511:	89 e5                	mov    ebp,esp
c0027513:	57                   	push   edi
c0027514:	56                   	push   esi
c0027515:	53                   	push   ebx
c0027516:	83 ec 24             	sub    esp,0x24
c0027519:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c002751c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002751f:	e8 4f 10 00 00       	call   c0028573 <__truncdfsf2>
c0027524:	5a                   	pop    edx
c0027525:	59                   	pop    ecx
c0027526:	89 c3                	mov    ebx,eax
c0027528:	c1 e8 17             	shr    eax,0x17
c002752b:	0f b6 f0             	movzx  esi,al
c002752e:	89 d8                	mov    eax,ebx
c0027530:	c1 e8 1f             	shr    eax,0x1f
c0027533:	31 c6                	xor    esi,eax
c0027535:	c1 e3 08             	shl    ebx,0x8
c0027538:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c002753b:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c002753e:	e8 30 10 00 00       	call   c0028573 <__truncdfsf2>
c0027543:	83 c4 10             	add    esp,0x10
c0027546:	89 c1                	mov    ecx,eax
c0027548:	c1 e9 17             	shr    ecx,0x17
c002754b:	0f b6 c9             	movzx  ecx,cl
c002754e:	89 c7                	mov    edi,eax
c0027550:	c1 ef 1f             	shr    edi,0x1f
c0027553:	89 ca                	mov    edx,ecx
c0027555:	31 fa                	xor    edx,edi
c0027557:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c002755a:	c1 e0 08             	shl    eax,0x8
c002755d:	89 c2                	mov    edx,eax
c002755f:	89 d8                	mov    eax,ebx
c0027561:	09 d0                	or     eax,edx
c0027563:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0027568:	09 f0                	or     eax,esi
c002756a:	75 08                	jne    c0027574 <__cmpsf2+0x64>
c002756c:	31 c0                	xor    eax,eax
c002756e:	39 f9                	cmp    ecx,edi
c0027570:	75 0c                	jne    c002757e <__cmpsf2+0x6e>
c0027572:	eb 29                	jmp    c002759d <__cmpsf2+0x8d>
c0027574:	b8 01 00 00 00       	mov    eax,0x1
c0027579:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c002757c:	7f 1f                	jg     c002759d <__cmpsf2+0x8d>
c002757e:	83 c8 ff             	or     eax,0xffffffff
c0027581:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c0027584:	7c 17                	jl     c002759d <__cmpsf2+0x8d>
c0027586:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c002758c:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c0027592:	b8 01 00 00 00       	mov    eax,0x1
c0027597:	39 d3                	cmp    ebx,edx
c0027599:	77 02                	ja     c002759d <__cmpsf2+0x8d>
c002759b:	19 c0                	sbb    eax,eax
c002759d:	8d 65 f4             	lea    esp,[ebp-0xc]
c00275a0:	5b                   	pop    ebx
c00275a1:	5e                   	pop    esi
c00275a2:	5f                   	pop    edi
c00275a3:	5d                   	pop    ebp
c00275a4:	c3                   	ret    

c00275a5 <__eqsf2>:
c00275a5:	55                   	push   ebp
c00275a6:	89 e5                	mov    ebp,esp
c00275a8:	83 ec 24             	sub    esp,0x24
c00275ab:	6a 01                	push   0x1
c00275ad:	83 ec 0c             	sub    esp,0xc
c00275b0:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00275b3:	e8 df 10 00 00       	call   c0028697 <__extendsfdf2>
c00275b8:	83 c4 10             	add    esp,0x10
c00275bb:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00275be:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c00275c1:	52                   	push   edx
c00275c2:	50                   	push   eax
c00275c3:	50                   	push   eax
c00275c4:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00275c7:	e8 cb 10 00 00       	call   c0028697 <__extendsfdf2>
c00275cc:	59                   	pop    ecx
c00275cd:	59                   	pop    ecx
c00275ce:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00275d1:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c00275d4:	52                   	push   edx
c00275d5:	50                   	push   eax
c00275d6:	e8 35 ff ff ff       	call   c0027510 <__cmpsf2>
c00275db:	83 c4 20             	add    esp,0x20
c00275de:	c9                   	leave  
c00275df:	c3                   	ret    

c00275e0 <__nesf2>:
c00275e0:	eb c3                	jmp    c00275a5 <__eqsf2>

c00275e2 <__gtsf2>:
c00275e2:	55                   	push   ebp
c00275e3:	89 e5                	mov    ebp,esp
c00275e5:	83 ec 24             	sub    esp,0x24
c00275e8:	6a ff                	push   0xffffffff
c00275ea:	83 ec 0c             	sub    esp,0xc
c00275ed:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00275f0:	e8 a2 10 00 00       	call   c0028697 <__extendsfdf2>
c00275f5:	83 c4 10             	add    esp,0x10
c00275f8:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00275fb:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c00275fe:	52                   	push   edx
c00275ff:	50                   	push   eax
c0027600:	50                   	push   eax
c0027601:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0027604:	e8 8e 10 00 00       	call   c0028697 <__extendsfdf2>
c0027609:	59                   	pop    ecx
c002760a:	59                   	pop    ecx
c002760b:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c002760e:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0027611:	52                   	push   edx
c0027612:	50                   	push   eax
c0027613:	e8 f8 fe ff ff       	call   c0027510 <__cmpsf2>
c0027618:	83 c4 20             	add    esp,0x20
c002761b:	c9                   	leave  
c002761c:	c3                   	ret    

c002761d <__gesf2>:
c002761d:	eb c3                	jmp    c00275e2 <__gtsf2>

c002761f <__ltsf2>:
c002761f:	eb 84                	jmp    c00275a5 <__eqsf2>

c0027621 <__lesf2>:
c0027621:	eb 82                	jmp    c00275a5 <__eqsf2>

c0027623 <__adddf3>:
c0027623:	55                   	push   ebp
c0027624:	89 e5                	mov    ebp,esp
c0027626:	57                   	push   edi
c0027627:	56                   	push   esi
c0027628:	53                   	push   ebx
c0027629:	83 ec 24             	sub    esp,0x24
c002762c:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c002762f:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0027632:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0027635:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0027638:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c002763b:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c002763e:	89 c8                	mov    eax,ecx
c0027640:	89 ce                	mov    esi,ecx
c0027642:	c1 fe 14             	sar    esi,0x14
c0027645:	89 75 e4             	mov    DWORD PTR [ebp-0x1c],esi
c0027648:	89 fb                	mov    ebx,edi
c002764a:	89 fa                	mov    edx,edi
c002764c:	c1 e2 0b             	shl    edx,0xb
c002764f:	c1 e0 0b             	shl    eax,0xb
c0027652:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0027657:	c1 eb 15             	shr    ebx,0x15
c002765a:	09 d8                	or     eax,ebx
c002765c:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c002765f:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c0027662:	c1 fe 14             	sar    esi,0x14
c0027665:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c0027668:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c002766b:	89 f3                	mov    ebx,esi
c002766d:	c1 e3 0b             	shl    ebx,0xb
c0027670:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c0027673:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0027676:	c1 e3 0b             	shl    ebx,0xb
c0027679:	81 e3 00 f8 ff 7f    	and    ebx,0x7ffff800
c002767f:	c1 ee 15             	shr    esi,0x15
c0027682:	09 f3                	or     ebx,esi
c0027684:	89 5d e8             	mov    DWORD PTR [ebp-0x18],ebx
c0027687:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c002768a:	33 75 ec             	xor    esi,DWORD PTR [ebp-0x14]
c002768d:	0f 88 5f 02 00 00    	js     c00278f2 <__adddf3+0x2cf>
c0027693:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0027696:	2b 5d ec             	sub    ebx,DWORD PTR [ebp-0x14]
c0027699:	85 db                	test   ebx,ebx
c002769b:	0f 8e c7 00 00 00    	jle    c0027768 <__adddf3+0x145>
c00276a1:	f7 45 ec ff 07 00 00 	test   DWORD PTR [ebp-0x14],0x7ff
c00276a8:	75 1a                	jne    c00276c4 <__adddf3+0xa1>
c00276aa:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c00276ad:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c00276b0:	0f 84 b2 05 00 00    	je     c0027c68 <__adddf3+0x645>
c00276b6:	4b                   	dec    ebx
c00276b7:	75 23                	jne    c00276dc <__adddf3+0xb9>
c00276b9:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c00276bc:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c00276bf:	e9 99 00 00 00       	jmp    c002775d <__adddf3+0x13a>
c00276c4:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c00276c7:	f7 d6                	not    esi
c00276c9:	81 e6 ff 07 00 00    	and    esi,0x7ff
c00276cf:	0f 84 93 05 00 00    	je     c0027c68 <__adddf3+0x645>
c00276d5:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c00276dc:	83 fb 1f             	cmp    ebx,0x1f
c00276df:	7e 42                	jle    c0027723 <__adddf3+0x100>
c00276e1:	83 fb 3f             	cmp    ebx,0x3f
c00276e4:	0f 8f 7e 05 00 00    	jg     c0027c68 <__adddf3+0x645>
c00276ea:	83 e3 1f             	and    ebx,0x1f
c00276ed:	89 d9                	mov    ecx,ebx
c00276ef:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c00276f2:	d3 ef                	shr    edi,cl
c00276f4:	31 db                	xor    ebx,ebx
c00276f6:	85 c9                	test   ecx,ecx
c00276f8:	74 15                	je     c002770f <__adddf3+0xec>
c00276fa:	be 20 00 00 00       	mov    esi,0x20
c00276ff:	29 ce                	sub    esi,ecx
c0027701:	89 f1                	mov    ecx,esi
c0027703:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027706:	d3 e6                	shl    esi,cl
c0027708:	31 db                	xor    ebx,ebx
c002770a:	85 f6                	test   esi,esi
c002770c:	0f 95 c3             	setne  bl
c002770f:	31 c9                	xor    ecx,ecx
c0027711:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0027715:	0f 95 c1             	setne  cl
c0027718:	09 cf                	or     edi,ecx
c002771a:	09 fb                	or     ebx,edi
c002771c:	01 da                	add    edx,ebx
c002771e:	83 d0 00             	adc    eax,0x0
c0027721:	eb 3a                	jmp    c002775d <__adddf3+0x13a>
c0027723:	bf 20 00 00 00       	mov    edi,0x20
c0027728:	29 df                	sub    edi,ebx
c002772a:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c002772d:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027730:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c0027733:	d3 e6                	shl    esi,cl
c0027735:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0027738:	88 d9                	mov    cl,bl
c002773a:	d3 ef                	shr    edi,cl
c002773c:	09 fe                	or     esi,edi
c002773e:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0027741:	88 d9                	mov    cl,bl
c0027743:	d3 ef                	shr    edi,cl
c0027745:	89 fb                	mov    ebx,edi
c0027747:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c002774a:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c002774d:	d3 e7                	shl    edi,cl
c002774f:	85 ff                	test   edi,edi
c0027751:	0f 95 c1             	setne  cl
c0027754:	0f b6 c9             	movzx  ecx,cl
c0027757:	09 ce                	or     esi,ecx
c0027759:	01 f2                	add    edx,esi
c002775b:	11 d8                	adc    eax,ebx
c002775d:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027760:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027763:	e9 52 01 00 00       	jmp    c00278ba <__adddf3+0x297>
c0027768:	0f 84 d5 00 00 00    	je     c0027843 <__adddf3+0x220>
c002776e:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0027771:	2b 5d e4             	sub    ebx,DWORD PTR [ebp-0x1c]
c0027774:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027777:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c002777a:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c0027781:	75 20                	jne    c00277a3 <__adddf3+0x180>
c0027783:	89 d6                	mov    esi,edx
c0027785:	09 c6                	or     esi,eax
c0027787:	0f 84 db 04 00 00    	je     c0027c68 <__adddf3+0x645>
c002778d:	4b                   	dec    ebx
c002778e:	75 29                	jne    c00277b9 <__adddf3+0x196>
c0027790:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027793:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0027796:	01 d1                	add    ecx,edx
c0027798:	11 c6                	adc    esi,eax
c002779a:	89 f0                	mov    eax,esi
c002779c:	89 ca                	mov    edx,ecx
c002779e:	e9 17 01 00 00       	jmp    c00278ba <__adddf3+0x297>
c00277a3:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c00277a6:	f7 d6                	not    esi
c00277a8:	81 e6 ff 07 00 00    	and    esi,0x7ff
c00277ae:	0f 84 b4 04 00 00    	je     c0027c68 <__adddf3+0x645>
c00277b4:	0d 00 00 00 80       	or     eax,0x80000000
c00277b9:	83 fb 1f             	cmp    ebx,0x1f
c00277bc:	7e 48                	jle    c0027806 <__adddf3+0x1e3>
c00277be:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c00277c1:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00277c4:	83 fb 3f             	cmp    ebx,0x3f
c00277c7:	0f 8f 9b 04 00 00    	jg     c0027c68 <__adddf3+0x645>
c00277cd:	83 e3 1f             	and    ebx,0x1f
c00277d0:	89 d9                	mov    ecx,ebx
c00277d2:	89 c7                	mov    edi,eax
c00277d4:	d3 ef                	shr    edi,cl
c00277d6:	31 db                	xor    ebx,ebx
c00277d8:	85 c9                	test   ecx,ecx
c00277da:	74 12                	je     c00277ee <__adddf3+0x1cb>
c00277dc:	be 20 00 00 00       	mov    esi,0x20
c00277e1:	29 ce                	sub    esi,ecx
c00277e3:	89 f1                	mov    ecx,esi
c00277e5:	d3 e0                	shl    eax,cl
c00277e7:	31 db                	xor    ebx,ebx
c00277e9:	85 c0                	test   eax,eax
c00277eb:	0f 95 c3             	setne  bl
c00277ee:	31 c0                	xor    eax,eax
c00277f0:	85 d2                	test   edx,edx
c00277f2:	0f 95 c0             	setne  al
c00277f5:	09 c7                	or     edi,eax
c00277f7:	09 fb                	or     ebx,edi
c00277f9:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00277fc:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c00277ff:	01 da                	add    edx,ebx
c0027801:	83 d6 00             	adc    esi,0x0
c0027804:	eb 39                	jmp    c002783f <__adddf3+0x21c>
c0027806:	be 20 00 00 00       	mov    esi,0x20
c002780b:	29 de                	sub    esi,ebx
c002780d:	89 c7                	mov    edi,eax
c002780f:	89 f1                	mov    ecx,esi
c0027811:	d3 e7                	shl    edi,cl
c0027813:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c0027816:	89 d7                	mov    edi,edx
c0027818:	88 d9                	mov    cl,bl
c002781a:	d3 ef                	shr    edi,cl
c002781c:	89 f9                	mov    ecx,edi
c002781e:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027821:	09 cf                	or     edi,ecx
c0027823:	88 d9                	mov    cl,bl
c0027825:	d3 e8                	shr    eax,cl
c0027827:	89 f1                	mov    ecx,esi
c0027829:	d3 e2                	shl    edx,cl
c002782b:	85 d2                	test   edx,edx
c002782d:	0f 95 c2             	setne  dl
c0027830:	0f b6 d2             	movzx  edx,dl
c0027833:	09 d7                	or     edi,edx
c0027835:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027838:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c002783b:	01 fa                	add    edx,edi
c002783d:	11 c6                	adc    esi,eax
c002783f:	89 f0                	mov    eax,esi
c0027841:	eb 77                	jmp    c00278ba <__adddf3+0x297>
c0027843:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0027846:	46                   	inc    esi
c0027847:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c002784a:	81 e6 fe 07 00 00    	and    esi,0x7fe
c0027850:	75 41                	jne    c0027893 <__adddf3+0x270>
c0027852:	89 d3                	mov    ebx,edx
c0027854:	09 c3                	or     ebx,eax
c0027856:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c002785d:	75 27                	jne    c0027886 <__adddf3+0x263>
c002785f:	85 db                	test   ebx,ebx
c0027861:	0f 84 fb 03 00 00    	je     c0027c62 <__adddf3+0x63f>
c0027867:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c002786a:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c002786d:	0f 84 f5 03 00 00    	je     c0027c68 <__adddf3+0x645>
c0027873:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c0027876:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c0027879:	85 c0                	test   eax,eax
c002787b:	0f 89 91 03 00 00    	jns    c0027c12 <__adddf3+0x5ef>
c0027881:	e9 85 03 00 00       	jmp    c0027c0b <__adddf3+0x5e8>
c0027886:	85 db                	test   ebx,ebx
c0027888:	0f 85 da 03 00 00    	jne    c0027c68 <__adddf3+0x645>
c002788e:	e9 cf 03 00 00       	jmp    c0027c62 <__adddf3+0x63f>
c0027893:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c0027896:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c0027899:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c002789c:	f7 d1                	not    ecx
c002789e:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c00278a4:	0f 84 70 03 00 00    	je     c0027c1a <__adddf3+0x5f7>
c00278aa:	d1 ea                	shr    edx,1
c00278ac:	89 c1                	mov    ecx,eax
c00278ae:	c1 e1 1f             	shl    ecx,0x1f
c00278b1:	09 ca                	or     edx,ecx
c00278b3:	d1 e8                	shr    eax,1
c00278b5:	e9 6f 03 00 00       	jmp    c0027c29 <__adddf3+0x606>
c00278ba:	85 c0                	test   eax,eax
c00278bc:	0f 89 67 03 00 00    	jns    c0027c29 <__adddf3+0x606>
c00278c2:	ff 45 ec             	inc    DWORD PTR [ebp-0x14]
c00278c5:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00278c8:	f7 d1                	not    ecx
c00278ca:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c00278d0:	0f 84 44 03 00 00    	je     c0027c1a <__adddf3+0x5f7>
c00278d6:	89 d1                	mov    ecx,edx
c00278d8:	d1 e9                	shr    ecx,1
c00278da:	83 e2 01             	and    edx,0x1
c00278dd:	09 ca                	or     edx,ecx
c00278df:	89 c1                	mov    ecx,eax
c00278e1:	c1 e1 1f             	shl    ecx,0x1f
c00278e4:	09 ca                	or     edx,ecx
c00278e6:	d1 e8                	shr    eax,1
c00278e8:	25 ff ff ff 3f       	and    eax,0x3fffffff
c00278ed:	e9 37 03 00 00       	jmp    c0027c29 <__adddf3+0x606>
c00278f2:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c00278f5:	81 e6 ff 07 00 00    	and    esi,0x7ff
c00278fb:	89 75 d4             	mov    DWORD PTR [ebp-0x2c],esi
c00278fe:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0027901:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0027907:	29 de                	sub    esi,ebx
c0027909:	85 f6                	test   esi,esi
c002790b:	0f 8e bd 00 00 00    	jle    c00279ce <__adddf3+0x3ab>
c0027911:	85 db                	test   ebx,ebx
c0027913:	75 17                	jne    c002792c <__adddf3+0x309>
c0027915:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0027918:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c002791b:	0f 84 47 03 00 00    	je     c0027c68 <__adddf3+0x645>
c0027921:	4e                   	dec    esi
c0027922:	75 20                	jne    c0027944 <__adddf3+0x321>
c0027924:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c0027927:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c002792a:	eb 5b                	jmp    c0027987 <__adddf3+0x364>
c002792c:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c002792f:	f7 d3                	not    ebx
c0027931:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0027937:	0f 84 2b 03 00 00    	je     c0027c68 <__adddf3+0x645>
c002793d:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c0027944:	83 fe 1f             	cmp    esi,0x1f
c0027947:	7e 49                	jle    c0027992 <__adddf3+0x36f>
c0027949:	83 fe 3f             	cmp    esi,0x3f
c002794c:	0f 8f 16 03 00 00    	jg     c0027c68 <__adddf3+0x645>
c0027952:	83 e6 1f             	and    esi,0x1f
c0027955:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0027958:	89 f1                	mov    ecx,esi
c002795a:	d3 ef                	shr    edi,cl
c002795c:	31 db                	xor    ebx,ebx
c002795e:	85 f6                	test   esi,esi
c0027960:	74 13                	je     c0027975 <__adddf3+0x352>
c0027962:	b9 20 00 00 00       	mov    ecx,0x20
c0027967:	29 f1                	sub    ecx,esi
c0027969:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c002796c:	d3 e6                	shl    esi,cl
c002796e:	31 db                	xor    ebx,ebx
c0027970:	85 f6                	test   esi,esi
c0027972:	0f 95 c3             	setne  bl
c0027975:	31 c9                	xor    ecx,ecx
c0027977:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c002797b:	0f 95 c1             	setne  cl
c002797e:	09 cf                	or     edi,ecx
c0027980:	09 fb                	or     ebx,edi
c0027982:	29 da                	sub    edx,ebx
c0027984:	83 d8 00             	sbb    eax,0x0
c0027987:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c002798a:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c002798d:	e9 aa 01 00 00       	jmp    c0027b3c <__adddf3+0x519>
c0027992:	bf 20 00 00 00       	mov    edi,0x20
c0027997:	29 f7                	sub    edi,esi
c0027999:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c002799c:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c002799f:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c00279a2:	d3 e3                	shl    ebx,cl
c00279a4:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c00279a7:	89 f1                	mov    ecx,esi
c00279a9:	d3 ef                	shr    edi,cl
c00279ab:	09 fb                	or     ebx,edi
c00279ad:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c00279b0:	89 f1                	mov    ecx,esi
c00279b2:	d3 ef                	shr    edi,cl
c00279b4:	89 fe                	mov    esi,edi
c00279b6:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c00279b9:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c00279bc:	d3 e7                	shl    edi,cl
c00279be:	85 ff                	test   edi,edi
c00279c0:	0f 95 c1             	setne  cl
c00279c3:	0f b6 c9             	movzx  ecx,cl
c00279c6:	09 cb                	or     ebx,ecx
c00279c8:	29 da                	sub    edx,ebx
c00279ca:	19 f0                	sbb    eax,esi
c00279cc:	eb b9                	jmp    c0027987 <__adddf3+0x364>
c00279ce:	0f 84 cd 00 00 00    	je     c0027aa1 <__adddf3+0x47e>
c00279d4:	2b 5d d4             	sub    ebx,DWORD PTR [ebp-0x2c]
c00279d7:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c00279da:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00279dd:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c00279e1:	75 1b                	jne    c00279fe <__adddf3+0x3db>
c00279e3:	89 d6                	mov    esi,edx
c00279e5:	09 c6                	or     esi,eax
c00279e7:	0f 84 7b 02 00 00    	je     c0027c68 <__adddf3+0x645>
c00279ed:	4b                   	dec    ebx
c00279ee:	75 24                	jne    c0027a14 <__adddf3+0x3f1>
c00279f0:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00279f3:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c00279f6:	29 d1                	sub    ecx,edx
c00279f8:	19 c6                	sbb    esi,eax
c00279fa:	89 ca                	mov    edx,ecx
c00279fc:	eb 61                	jmp    c0027a5f <__adddf3+0x43c>
c00279fe:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c0027a01:	f7 d6                	not    esi
c0027a03:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0027a09:	0f 84 59 02 00 00    	je     c0027c68 <__adddf3+0x645>
c0027a0f:	0d 00 00 00 80       	or     eax,0x80000000
c0027a14:	83 fb 1f             	cmp    ebx,0x1f
c0027a17:	7e 4d                	jle    c0027a66 <__adddf3+0x443>
c0027a19:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027a1c:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0027a1f:	83 fb 3f             	cmp    ebx,0x3f
c0027a22:	0f 8f 40 02 00 00    	jg     c0027c68 <__adddf3+0x645>
c0027a28:	83 e3 1f             	and    ebx,0x1f
c0027a2b:	89 d9                	mov    ecx,ebx
c0027a2d:	89 c7                	mov    edi,eax
c0027a2f:	d3 ef                	shr    edi,cl
c0027a31:	31 db                	xor    ebx,ebx
c0027a33:	85 c9                	test   ecx,ecx
c0027a35:	74 12                	je     c0027a49 <__adddf3+0x426>
c0027a37:	be 20 00 00 00       	mov    esi,0x20
c0027a3c:	29 ce                	sub    esi,ecx
c0027a3e:	89 f1                	mov    ecx,esi
c0027a40:	d3 e0                	shl    eax,cl
c0027a42:	31 db                	xor    ebx,ebx
c0027a44:	85 c0                	test   eax,eax
c0027a46:	0f 95 c3             	setne  bl
c0027a49:	31 c0                	xor    eax,eax
c0027a4b:	85 d2                	test   edx,edx
c0027a4d:	0f 95 c0             	setne  al
c0027a50:	09 c7                	or     edi,eax
c0027a52:	09 fb                	or     ebx,edi
c0027a54:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027a57:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0027a5a:	29 da                	sub    edx,ebx
c0027a5c:	83 de 00             	sbb    esi,0x0
c0027a5f:	89 f0                	mov    eax,esi
c0027a61:	e9 d6 00 00 00       	jmp    c0027b3c <__adddf3+0x519>
c0027a66:	be 20 00 00 00       	mov    esi,0x20
c0027a6b:	29 de                	sub    esi,ebx
c0027a6d:	89 c7                	mov    edi,eax
c0027a6f:	89 f1                	mov    ecx,esi
c0027a71:	d3 e7                	shl    edi,cl
c0027a73:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c0027a76:	89 d7                	mov    edi,edx
c0027a78:	88 d9                	mov    cl,bl
c0027a7a:	d3 ef                	shr    edi,cl
c0027a7c:	89 f9                	mov    ecx,edi
c0027a7e:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027a81:	09 cf                	or     edi,ecx
c0027a83:	88 d9                	mov    cl,bl
c0027a85:	d3 e8                	shr    eax,cl
c0027a87:	89 f1                	mov    ecx,esi
c0027a89:	d3 e2                	shl    edx,cl
c0027a8b:	85 d2                	test   edx,edx
c0027a8d:	0f 95 c2             	setne  dl
c0027a90:	0f b6 d2             	movzx  edx,dl
c0027a93:	09 d7                	or     edi,edx
c0027a95:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027a98:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0027a9b:	29 fa                	sub    edx,edi
c0027a9d:	19 c6                	sbb    esi,eax
c0027a9f:	eb be                	jmp    c0027a5f <__adddf3+0x43c>
c0027aa1:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0027aa4:	8d 5e 01             	lea    ebx,[esi+0x1]
c0027aa7:	81 e3 fe 07 00 00    	and    ebx,0x7fe
c0027aad:	75 6a                	jne    c0027b19 <__adddf3+0x4f6>
c0027aaf:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0027ab3:	75 58                	jne    c0027b0d <__adddf3+0x4ea>
c0027ab5:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0027ab8:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c0027abb:	89 d6                	mov    esi,edx
c0027abd:	09 c6                	or     esi,eax
c0027abf:	75 17                	jne    c0027ad8 <__adddf3+0x4b5>
c0027ac1:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027ac4:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0027ac7:	85 db                	test   ebx,ebx
c0027ac9:	0f 85 99 01 00 00    	jne    c0027c68 <__adddf3+0x645>
c0027acf:	31 ff                	xor    edi,edi
c0027ad1:	31 c9                	xor    ecx,ecx
c0027ad3:	e9 90 01 00 00       	jmp    c0027c68 <__adddf3+0x645>
c0027ad8:	85 db                	test   ebx,ebx
c0027ada:	0f 84 88 01 00 00    	je     c0027c68 <__adddf3+0x645>
c0027ae0:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c0027ae3:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c0027ae6:	85 c0                	test   eax,eax
c0027ae8:	79 10                	jns    c0027afa <__adddf3+0x4d7>
c0027aea:	31 c9                	xor    ecx,ecx
c0027aec:	f7 da                	neg    edx
c0027aee:	0f 95 c1             	setne  cl
c0027af1:	01 c8                	add    eax,ecx
c0027af3:	f7 d8                	neg    eax
c0027af5:	e9 2f 01 00 00       	jmp    c0027c29 <__adddf3+0x606>
c0027afa:	31 ff                	xor    edi,edi
c0027afc:	31 c9                	xor    ecx,ecx
c0027afe:	89 c3                	mov    ebx,eax
c0027b00:	09 d3                	or     ebx,edx
c0027b02:	0f 84 60 01 00 00    	je     c0027c68 <__adddf3+0x645>
c0027b08:	e9 05 01 00 00       	jmp    c0027c12 <__adddf3+0x5ef>
c0027b0d:	31 ff                	xor    edi,edi
c0027b0f:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c0027b14:	e9 4f 01 00 00       	jmp    c0027c68 <__adddf3+0x645>
c0027b19:	89 c1                	mov    ecx,eax
c0027b1b:	89 d0                	mov    eax,edx
c0027b1d:	2b 45 e0             	sub    eax,DWORD PTR [ebp-0x20]
c0027b20:	1b 4d e8             	sbb    ecx,DWORD PTR [ebp-0x18]
c0027b23:	89 ca                	mov    edx,ecx
c0027b25:	85 c9                	test   ecx,ecx
c0027b27:	79 2c                	jns    c0027b55 <__adddf3+0x532>
c0027b29:	31 c9                	xor    ecx,ecx
c0027b2b:	f7 d8                	neg    eax
c0027b2d:	0f 95 c1             	setne  cl
c0027b30:	01 ca                	add    edx,ecx
c0027b32:	f7 da                	neg    edx
c0027b34:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c0027b37:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c0027b3a:	eb 19                	jmp    c0027b55 <__adddf3+0x532>
c0027b3c:	85 c0                	test   eax,eax
c0027b3e:	0f 89 e5 00 00 00    	jns    c0027c29 <__adddf3+0x606>
c0027b44:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027b49:	89 c1                	mov    ecx,eax
c0027b4b:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0027b4e:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0027b51:	89 d0                	mov    eax,edx
c0027b53:	89 ca                	mov    edx,ecx
c0027b55:	85 d2                	test   edx,edx
c0027b57:	74 59                	je     c0027bb2 <__adddf3+0x58f>
c0027b59:	0f bd da             	bsr    ebx,edx
c0027b5c:	83 f3 1f             	xor    ebx,0x1f
c0027b5f:	88 d9                	mov    cl,bl
c0027b61:	d3 e2                	shl    edx,cl
c0027b63:	bf 20 00 00 00       	mov    edi,0x20
c0027b68:	89 f9                	mov    ecx,edi
c0027b6a:	29 d9                	sub    ecx,ebx
c0027b6c:	89 c6                	mov    esi,eax
c0027b6e:	d3 ee                	shr    esi,cl
c0027b70:	09 d6                	or     esi,edx
c0027b72:	88 d9                	mov    cl,bl
c0027b74:	d3 e0                	shl    eax,cl
c0027b76:	89 c2                	mov    edx,eax
c0027b78:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027b7b:	25 ff 07 00 00       	and    eax,0x7ff
c0027b80:	39 d8                	cmp    eax,ebx
c0027b82:	7f 22                	jg     c0027ba6 <__adddf3+0x583>
c0027b84:	29 c3                	sub    ebx,eax
c0027b86:	43                   	inc    ebx
c0027b87:	88 d9                	mov    cl,bl
c0027b89:	d3 ea                	shr    edx,cl
c0027b8b:	29 df                	sub    edi,ebx
c0027b8d:	89 f9                	mov    ecx,edi
c0027b8f:	89 f0                	mov    eax,esi
c0027b91:	d3 e0                	shl    eax,cl
c0027b93:	09 c2                	or     edx,eax
c0027b95:	89 f0                	mov    eax,esi
c0027b97:	88 d9                	mov    cl,bl
c0027b99:	d3 e8                	shr    eax,cl
c0027b9b:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027b9e:	81 e7 00 f8 ff ff    	and    edi,0xfffff800
c0027ba4:	eb 6f                	jmp    c0027c15 <__adddf3+0x5f2>
c0027ba6:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027ba9:	29 d8                	sub    eax,ebx
c0027bab:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027bae:	89 f0                	mov    eax,esi
c0027bb0:	eb 59                	jmp    c0027c0b <__adddf3+0x5e8>
c0027bb2:	85 c0                	test   eax,eax
c0027bb4:	74 6a                	je     c0027c20 <__adddf3+0x5fd>
c0027bb6:	0f bd c8             	bsr    ecx,eax
c0027bb9:	83 f1 1f             	xor    ecx,0x1f
c0027bbc:	d3 e0                	shl    eax,cl
c0027bbe:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0027bc1:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0027bc7:	83 c1 20             	add    ecx,0x20
c0027bca:	39 cb                	cmp    ebx,ecx
c0027bcc:	7f 35                	jg     c0027c03 <__adddf3+0x5e0>
c0027bce:	29 d9                	sub    ecx,ebx
c0027bd0:	8d 71 01             	lea    esi,[ecx+0x1]
c0027bd3:	83 fe 1f             	cmp    esi,0x1f
c0027bd6:	7e 09                	jle    c0027be1 <__adddf3+0x5be>
c0027bd8:	83 e9 1f             	sub    ecx,0x1f
c0027bdb:	d3 e8                	shr    eax,cl
c0027bdd:	89 c3                	mov    ebx,eax
c0027bdf:	eb 11                	jmp    c0027bf2 <__adddf3+0x5cf>
c0027be1:	b9 20 00 00 00       	mov    ecx,0x20
c0027be6:	29 f1                	sub    ecx,esi
c0027be8:	89 c3                	mov    ebx,eax
c0027bea:	d3 e3                	shl    ebx,cl
c0027bec:	89 f1                	mov    ecx,esi
c0027bee:	d3 e8                	shr    eax,cl
c0027bf0:	89 c2                	mov    edx,eax
c0027bf2:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027bf5:	25 00 f8 ff ff       	and    eax,0xfffff800
c0027bfa:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027bfd:	89 d0                	mov    eax,edx
c0027bff:	89 da                	mov    edx,ebx
c0027c01:	eb 26                	jmp    c0027c29 <__adddf3+0x606>
c0027c03:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027c06:	29 cf                	sub    edi,ecx
c0027c08:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027c0b:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027c10:	eb 17                	jmp    c0027c29 <__adddf3+0x606>
c0027c12:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027c15:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027c18:	eb 0f                	jmp    c0027c29 <__adddf3+0x606>
c0027c1a:	31 d2                	xor    edx,edx
c0027c1c:	31 c0                	xor    eax,eax
c0027c1e:	eb 09                	jmp    c0027c29 <__adddf3+0x606>
c0027c20:	89 c2                	mov    edx,eax
c0027c22:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0027c29:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027c2c:	c1 e1 14             	shl    ecx,0x14
c0027c2f:	89 c3                	mov    ebx,eax
c0027c31:	c1 eb 0b             	shr    ebx,0xb
c0027c34:	09 d9                	or     ecx,ebx
c0027c36:	89 d3                	mov    ebx,edx
c0027c38:	c1 eb 0b             	shr    ebx,0xb
c0027c3b:	c1 e0 15             	shl    eax,0x15
c0027c3e:	09 d8                	or     eax,ebx
c0027c40:	89 c7                	mov    edi,eax
c0027c42:	f7 c2 ff 03 00 00    	test   edx,0x3ff
c0027c48:	0f 95 c0             	setne  al
c0027c4b:	89 c6                	mov    esi,eax
c0027c4d:	09 f3                	or     ebx,esi
c0027c4f:	83 e3 01             	and    ebx,0x1
c0027c52:	c1 ea 0a             	shr    edx,0xa
c0027c55:	21 da                	and    edx,ebx
c0027c57:	89 f8                	mov    eax,edi
c0027c59:	01 d0                	add    eax,edx
c0027c5b:	83 d1 00             	adc    ecx,0x0
c0027c5e:	89 c7                	mov    edi,eax
c0027c60:	eb 06                	jmp    c0027c68 <__adddf3+0x645>
c0027c62:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027c65:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0027c68:	89 f8                	mov    eax,edi
c0027c6a:	89 ca                	mov    edx,ecx
c0027c6c:	83 c4 24             	add    esp,0x24
c0027c6f:	5b                   	pop    ebx
c0027c70:	5e                   	pop    esi
c0027c71:	5f                   	pop    edi
c0027c72:	5d                   	pop    ebp
c0027c73:	c3                   	ret    

c0027c74 <__subdf3>:
c0027c74:	55                   	push   ebp
c0027c75:	89 e5                	mov    ebp,esp
c0027c77:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0027c7a:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c0027c7d:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c0027c83:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c0027c86:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c0027c89:	5d                   	pop    ebp
c0027c8a:	e9 94 f9 ff ff       	jmp    c0027623 <__adddf3>

c0027c8f <__negdf2>:
c0027c8f:	55                   	push   ebp
c0027c90:	89 e5                	mov    ebp,esp
c0027c92:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0027c95:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0027c98:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c0027c9e:	5d                   	pop    ebp
c0027c9f:	c3                   	ret    

c0027ca0 <__muldf3>:
c0027ca0:	55                   	push   ebp
c0027ca1:	89 e5                	mov    ebp,esp
c0027ca3:	57                   	push   edi
c0027ca4:	56                   	push   esi
c0027ca5:	53                   	push   ebx
c0027ca6:	83 ec 24             	sub    esp,0x24
c0027ca9:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0027cac:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0027caf:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027cb2:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0027cb5:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0027cb8:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0027cbb:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027cbe:	89 c8                	mov    eax,ecx
c0027cc0:	c1 f8 14             	sar    eax,0x14
c0027cc3:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0027cc6:	89 f8                	mov    eax,edi
c0027cc8:	89 fb                	mov    ebx,edi
c0027cca:	c1 e3 0b             	shl    ebx,0xb
c0027ccd:	89 5d e4             	mov    DWORD PTR [ebp-0x1c],ebx
c0027cd0:	c1 e1 0b             	shl    ecx,0xb
c0027cd3:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0027cd9:	c1 e8 15             	shr    eax,0x15
c0027cdc:	09 c1                	or     ecx,eax
c0027cde:	89 d6                	mov    esi,edx
c0027ce0:	89 d0                	mov    eax,edx
c0027ce2:	c1 f8 14             	sar    eax,0x14
c0027ce5:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0027ce8:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0027ceb:	89 c3                	mov    ebx,eax
c0027ced:	c1 e3 0b             	shl    ebx,0xb
c0027cf0:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c0027cf3:	c1 e6 0b             	shl    esi,0xb
c0027cf6:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c0027cfc:	c1 e8 15             	shr    eax,0x15
c0027cff:	09 c6                	or     esi,eax
c0027d01:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027d04:	25 ff 07 00 00       	and    eax,0x7ff
c0027d09:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0027d0c:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027d0f:	25 ff 07 00 00       	and    eax,0x7ff
c0027d14:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c0027d17:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0027d1a:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c0027d1d:	8d 9c 18 02 fc ff ff 	lea    ebx,[eax+ebx*1-0x3fe]
c0027d24:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027d27:	40                   	inc    eax
c0027d28:	a9 fe 07 00 00       	test   eax,0x7fe
c0027d2d:	0f 85 8d 00 00 00    	jne    c0027dc0 <__muldf3+0x120>
c0027d33:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027d36:	09 c8                	or     eax,ecx
c0027d38:	83 7d d0 00          	cmp    DWORD PTR [ebp-0x30],0x0
c0027d3c:	74 44                	je     c0027d82 <__muldf3+0xe2>
c0027d3e:	85 c0                	test   eax,eax
c0027d40:	0f 85 31 02 00 00    	jne    c0027f77 <__muldf3+0x2d7>
c0027d46:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027d49:	40                   	inc    eax
c0027d4a:	a9 fe 07 00 00       	test   eax,0x7fe
c0027d4f:	75 13                	jne    c0027d64 <__muldf3+0xc4>
c0027d51:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0027d54:	09 f1                	or     ecx,esi
c0027d56:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0027d5a:	74 22                	je     c0027d7e <__muldf3+0xde>
c0027d5c:	85 c9                	test   ecx,ecx
c0027d5e:	0f 85 0d 02 00 00    	jne    c0027f71 <__muldf3+0x2d1>
c0027d64:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
c0027d68:	0f 89 09 02 00 00    	jns    c0027f77 <__muldf3+0x2d7>
c0027d6e:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0027d71:	05 00 00 00 80       	add    eax,0x80000000
c0027d76:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027d79:	e9 f9 01 00 00       	jmp    c0027f77 <__muldf3+0x2d7>
c0027d7e:	85 c9                	test   ecx,ecx
c0027d80:	eb 2e                	jmp    c0027db0 <__muldf3+0x110>
c0027d82:	85 c0                	test   eax,eax
c0027d84:	74 20                	je     c0027da6 <__muldf3+0x106>
c0027d86:	8d 04 09             	lea    eax,[ecx+ecx*1]
c0027d89:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027d8c:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027d8f:	c1 ef 1f             	shr    edi,0x1f
c0027d92:	8b 4d e4             	mov    ecx,DWORD PTR [ebp-0x1c]
c0027d95:	01 4d e4             	add    DWORD PTR [ebp-0x1c],ecx
c0027d98:	8d 43 ff             	lea    eax,[ebx-0x1]
c0027d9b:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027d9e:	09 f9                	or     ecx,edi
c0027da0:	78 1e                	js     c0027dc0 <__muldf3+0x120>
c0027da2:	89 c3                	mov    ebx,eax
c0027da4:	eb e0                	jmp    c0027d86 <__muldf3+0xe6>
c0027da6:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027da9:	f7 d0                	not    eax
c0027dab:	a9 ff 07 00 00       	test   eax,0x7ff
c0027db0:	75 b2                	jne    c0027d64 <__muldf3+0xc4>
c0027db2:	31 ff                	xor    edi,edi
c0027db4:	c7 45 ec 00 00 f8 7f 	mov    DWORD PTR [ebp-0x14],0x7ff80000
c0027dbb:	e9 b7 01 00 00       	jmp    c0027f77 <__muldf3+0x2d7>
c0027dc0:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027dc3:	40                   	inc    eax
c0027dc4:	a9 fe 07 00 00       	test   eax,0x7fe
c0027dc9:	75 57                	jne    c0027e22 <__muldf3+0x182>
c0027dcb:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0027dce:	09 f0                	or     eax,esi
c0027dd0:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0027dd4:	74 23                	je     c0027df9 <__muldf3+0x159>
c0027dd6:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c0027dda:	0f 89 91 01 00 00    	jns    c0027f71 <__muldf3+0x2d1>
c0027de0:	85 c0                	test   eax,eax
c0027de2:	0f 85 89 01 00 00    	jne    c0027f71 <__muldf3+0x2d1>
c0027de8:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c0027deb:	8d 82 00 00 00 80    	lea    eax,[edx-0x80000000]
c0027df1:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027df4:	e9 7e 01 00 00       	jmp    c0027f77 <__muldf3+0x2d7>
c0027df9:	85 c0                	test   eax,eax
c0027dfb:	75 0c                	jne    c0027e09 <__muldf3+0x169>
c0027dfd:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c0027e01:	0f 89 6a 01 00 00    	jns    c0027f71 <__muldf3+0x2d1>
c0027e07:	eb df                	jmp    c0027de8 <__muldf3+0x148>
c0027e09:	01 f6                	add    esi,esi
c0027e0b:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0027e0e:	c1 ea 1f             	shr    edx,0x1f
c0027e11:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0027e14:	01 7d e0             	add    DWORD PTR [ebp-0x20],edi
c0027e17:	8d 43 ff             	lea    eax,[ebx-0x1]
c0027e1a:	09 d6                	or     esi,edx
c0027e1c:	78 04                	js     c0027e22 <__muldf3+0x182>
c0027e1e:	89 c3                	mov    ebx,eax
c0027e20:	eb e7                	jmp    c0027e09 <__muldf3+0x169>
c0027e22:	81 c9 00 00 00 80    	or     ecx,0x80000000
c0027e28:	81 ce 00 00 00 80    	or     esi,0x80000000
c0027e2e:	89 c8                	mov    eax,ecx
c0027e30:	f7 e6                	mul    esi
c0027e32:	89 55 d8             	mov    DWORD PTR [ebp-0x28],edx
c0027e35:	89 c7                	mov    edi,eax
c0027e37:	89 c8                	mov    eax,ecx
c0027e39:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c0027e3c:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c0027e3f:	89 c1                	mov    ecx,eax
c0027e41:	89 f0                	mov    eax,esi
c0027e43:	f7 65 e4             	mul    DWORD PTR [ebp-0x1c]
c0027e46:	89 55 d0             	mov    DWORD PTR [ebp-0x30],edx
c0027e49:	89 c6                	mov    esi,eax
c0027e4b:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027e4e:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c0027e51:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0027e54:	31 c0                	xor    eax,eax
c0027e56:	01 f1                	add    ecx,esi
c0027e58:	0f 92 c0             	setb   al
c0027e5b:	03 7d d4             	add    edi,DWORD PTR [ebp-0x2c]
c0027e5e:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c0027e61:	83 d6 00             	adc    esi,0x0
c0027e64:	01 c7                	add    edi,eax
c0027e66:	83 d6 00             	adc    esi,0x0
c0027e69:	01 ca                	add    edx,ecx
c0027e6b:	0f 92 c1             	setb   cl
c0027e6e:	0f b6 c9             	movzx  ecx,cl
c0027e71:	03 7d d0             	add    edi,DWORD PTR [ebp-0x30]
c0027e74:	83 d6 00             	adc    esi,0x0
c0027e77:	01 cf                	add    edi,ecx
c0027e79:	83 d6 00             	adc    esi,0x0
c0027e7c:	31 c9                	xor    ecx,ecx
c0027e7e:	0b 55 e4             	or     edx,DWORD PTR [ebp-0x1c]
c0027e81:	0f 95 c1             	setne  cl
c0027e84:	09 cf                	or     edi,ecx
c0027e86:	85 f6                	test   esi,esi
c0027e88:	78 0c                	js     c0027e96 <__muldf3+0x1f6>
c0027e8a:	01 f6                	add    esi,esi
c0027e8c:	89 f8                	mov    eax,edi
c0027e8e:	c1 e8 1f             	shr    eax,0x1f
c0027e91:	09 c6                	or     esi,eax
c0027e93:	01 ff                	add    edi,edi
c0027e95:	4b                   	dec    ebx
c0027e96:	81 fb fe 07 00 00    	cmp    ebx,0x7fe
c0027e9c:	0f 8f 85 00 00 00    	jg     c0027f27 <__muldf3+0x287>
c0027ea2:	81 e6 ff ff ff 7f    	and    esi,0x7fffffff
c0027ea8:	85 db                	test   ebx,ebx
c0027eaa:	0f 8f 84 00 00 00    	jg     c0027f34 <__muldf3+0x294>
c0027eb0:	83 fb cc             	cmp    ebx,0xffffffcc
c0027eb3:	7c 79                	jl     c0027f2e <__muldf3+0x28e>
c0027eb5:	ba 01 00 00 00       	mov    edx,0x1
c0027eba:	29 da                	sub    edx,ebx
c0027ebc:	81 ce 00 00 00 80    	or     esi,0x80000000
c0027ec2:	83 fa 1f             	cmp    edx,0x1f
c0027ec5:	7e 30                	jle    c0027ef7 <__muldf3+0x257>
c0027ec7:	83 fa 20             	cmp    edx,0x20
c0027eca:	75 0b                	jne    c0027ed7 <__muldf3+0x237>
c0027ecc:	31 c0                	xor    eax,eax
c0027ece:	85 ff                	test   edi,edi
c0027ed0:	0f 95 c0             	setne  al
c0027ed3:	89 c7                	mov    edi,eax
c0027ed5:	eb 1a                	jmp    c0027ef1 <__muldf3+0x251>
c0027ed7:	8d 4b 3f             	lea    ecx,[ebx+0x3f]
c0027eda:	89 f0                	mov    eax,esi
c0027edc:	d3 e0                	shl    eax,cl
c0027ede:	09 f8                	or     eax,edi
c0027ee0:	0f 95 c0             	setne  al
c0027ee3:	0f b6 c0             	movzx  eax,al
c0027ee6:	89 c7                	mov    edi,eax
c0027ee8:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c0027eed:	29 d9                	sub    ecx,ebx
c0027eef:	d3 ee                	shr    esi,cl
c0027ef1:	09 f7                	or     edi,esi
c0027ef3:	31 db                	xor    ebx,ebx
c0027ef5:	eb 3b                	jmp    c0027f32 <__muldf3+0x292>
c0027ef7:	83 c3 1f             	add    ebx,0x1f
c0027efa:	89 f0                	mov    eax,esi
c0027efc:	88 d9                	mov    cl,bl
c0027efe:	d3 e0                	shl    eax,cl
c0027f00:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027f03:	89 f8                	mov    eax,edi
c0027f05:	88 d1                	mov    cl,dl
c0027f07:	d3 e8                	shr    eax,cl
c0027f09:	89 c1                	mov    ecx,eax
c0027f0b:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0027f0e:	09 c8                	or     eax,ecx
c0027f10:	88 d9                	mov    cl,bl
c0027f12:	d3 e7                	shl    edi,cl
c0027f14:	31 db                	xor    ebx,ebx
c0027f16:	85 ff                	test   edi,edi
c0027f18:	0f 95 c3             	setne  bl
c0027f1b:	89 df                	mov    edi,ebx
c0027f1d:	09 c7                	or     edi,eax
c0027f1f:	88 d1                	mov    cl,dl
c0027f21:	d3 ee                	shr    esi,cl
c0027f23:	31 db                	xor    ebx,ebx
c0027f25:	eb 0d                	jmp    c0027f34 <__muldf3+0x294>
c0027f27:	bb ff 07 00 00       	mov    ebx,0x7ff
c0027f2c:	eb 02                	jmp    c0027f30 <__muldf3+0x290>
c0027f2e:	31 db                	xor    ebx,ebx
c0027f30:	31 ff                	xor    edi,edi
c0027f32:	31 f6                	xor    esi,esi
c0027f34:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027f37:	33 45 e8             	xor    eax,DWORD PTR [ebp-0x18]
c0027f3a:	25 00 f8 ff ff       	and    eax,0xfffff800
c0027f3f:	09 c3                	or     ebx,eax
c0027f41:	c1 e3 14             	shl    ebx,0x14
c0027f44:	89 f0                	mov    eax,esi
c0027f46:	c1 e8 0b             	shr    eax,0xb
c0027f49:	09 c3                	or     ebx,eax
c0027f4b:	89 f8                	mov    eax,edi
c0027f4d:	c1 e8 0b             	shr    eax,0xb
c0027f50:	c1 e6 15             	shl    esi,0x15
c0027f53:	09 c6                	or     esi,eax
c0027f55:	f7 c7 ff 03 00 00    	test   edi,0x3ff
c0027f5b:	0f 95 c1             	setne  cl
c0027f5e:	09 c8                	or     eax,ecx
c0027f60:	83 e0 01             	and    eax,0x1
c0027f63:	c1 ef 0a             	shr    edi,0xa
c0027f66:	21 c7                	and    edi,eax
c0027f68:	01 f7                	add    edi,esi
c0027f6a:	83 d3 00             	adc    ebx,0x0
c0027f6d:	89 da                	mov    edx,ebx
c0027f6f:	eb 03                	jmp    c0027f74 <__muldf3+0x2d4>
c0027f71:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c0027f74:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c0027f77:	89 f8                	mov    eax,edi
c0027f79:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0027f7c:	83 c4 24             	add    esp,0x24
c0027f7f:	5b                   	pop    ebx
c0027f80:	5e                   	pop    esi
c0027f81:	5f                   	pop    edi
c0027f82:	5d                   	pop    ebp
c0027f83:	c3                   	ret    

c0027f84 <__divdf3>:
c0027f84:	55                   	push   ebp
c0027f85:	89 e5                	mov    ebp,esp
c0027f87:	57                   	push   edi
c0027f88:	56                   	push   esi
c0027f89:	53                   	push   ebx
c0027f8a:	83 ec 2c             	sub    esp,0x2c
c0027f8d:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0027f90:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0027f93:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0027f96:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c0027f99:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0027f9c:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0027f9f:	89 ce                	mov    esi,ecx
c0027fa1:	89 c8                	mov    eax,ecx
c0027fa3:	c1 f8 14             	sar    eax,0x14
c0027fa6:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0027fa9:	89 f8                	mov    eax,edi
c0027fab:	89 fb                	mov    ebx,edi
c0027fad:	c1 e3 0b             	shl    ebx,0xb
c0027fb0:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c0027fb3:	c1 e6 0b             	shl    esi,0xb
c0027fb6:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c0027fbc:	c1 e8 15             	shr    eax,0x15
c0027fbf:	09 c6                	or     esi,eax
c0027fc1:	89 75 e0             	mov    DWORD PTR [ebp-0x20],esi
c0027fc4:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0027fc7:	89 c2                	mov    edx,eax
c0027fc9:	c1 fa 14             	sar    edx,0x14
c0027fcc:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c0027fcf:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c0027fd2:	89 de                	mov    esi,ebx
c0027fd4:	c1 e6 0b             	shl    esi,0xb
c0027fd7:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c0027fda:	c1 e0 0b             	shl    eax,0xb
c0027fdd:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0027fe2:	c1 eb 15             	shr    ebx,0x15
c0027fe5:	09 d8                	or     eax,ebx
c0027fe7:	89 c2                	mov    edx,eax
c0027fe9:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027fec:	25 ff 07 00 00       	and    eax,0x7ff
c0027ff1:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c0027ff4:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0027ff7:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0027ffd:	89 5d d8             	mov    DWORD PTR [ebp-0x28],ebx
c0028000:	29 d8                	sub    eax,ebx
c0028002:	05 ff 03 00 00       	add    eax,0x3ff
c0028007:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c002800a:	46                   	inc    esi
c002800b:	81 e6 fe 07 00 00    	and    esi,0x7fe
c0028011:	0f 85 a5 00 00 00    	jne    c00280bc <__divdf3+0x138>
c0028017:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c002801a:	0b 75 e0             	or     esi,DWORD PTR [ebp-0x20]
c002801d:	83 7d cc 00          	cmp    DWORD PTR [ebp-0x34],0x0
c0028021:	74 2a                	je     c002804d <__divdf3+0xc9>
c0028023:	85 f6                	test   esi,esi
c0028025:	0f 85 cc 02 00 00    	jne    c00282f7 <__divdf3+0x373>
c002802b:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002802e:	40                   	inc    eax
c002802f:	a9 fe 07 00 00       	test   eax,0x7fe
c0028034:	75 26                	jne    c002805c <__divdf3+0xd8>
c0028036:	85 db                	test   ebx,ebx
c0028038:	74 22                	je     c002805c <__divdf3+0xd8>
c002803a:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c002803d:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0028040:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0028043:	09 d0                	or     eax,edx
c0028045:	0f 85 ac 02 00 00    	jne    c00282f7 <__divdf3+0x373>
c002804b:	eb 63                	jmp    c00280b0 <__divdf3+0x12c>
c002804d:	85 f6                	test   esi,esi
c002804f:	75 22                	jne    c0028073 <__divdf3+0xef>
c0028051:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0028054:	40                   	inc    eax
c0028055:	a9 fe 07 00 00       	test   eax,0x7fe
c002805a:	74 36                	je     c0028092 <__divdf3+0x10e>
c002805c:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0028060:	0f 89 91 02 00 00    	jns    c00282f7 <__divdf3+0x373>
c0028066:	89 f8                	mov    eax,edi
c0028068:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c002806e:	e9 80 02 00 00       	jmp    c00282f3 <__divdf3+0x36f>
c0028073:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0028076:	01 f6                	add    esi,esi
c0028078:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c002807b:	c1 ef 1f             	shr    edi,0x1f
c002807e:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0028081:	01 5d ec             	add    DWORD PTR [ebp-0x14],ebx
c0028084:	8d 48 ff             	lea    ecx,[eax-0x1]
c0028087:	09 f7                	or     edi,esi
c0028089:	89 7d e0             	mov    DWORD PTR [ebp-0x20],edi
c002808c:	78 2e                	js     c00280bc <__divdf3+0x138>
c002808e:	89 c8                	mov    eax,ecx
c0028090:	eb e1                	jmp    c0028073 <__divdf3+0xef>
c0028092:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0028095:	09 d0                	or     eax,edx
c0028097:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c002809b:	74 0f                	je     c00280ac <__divdf3+0x128>
c002809d:	85 c0                	test   eax,eax
c002809f:	74 bb                	je     c002805c <__divdf3+0xd8>
c00280a1:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c00280a4:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c00280a7:	e9 4b 02 00 00       	jmp    c00282f7 <__divdf3+0x373>
c00280ac:	85 c0                	test   eax,eax
c00280ae:	75 ac                	jne    c002805c <__divdf3+0xd8>
c00280b0:	31 ff                	xor    edi,edi
c00280b2:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c00280b7:	e9 3b 02 00 00       	jmp    c00282f7 <__divdf3+0x373>
c00280bc:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00280bf:	8d 4f 01             	lea    ecx,[edi+0x1]
c00280c2:	81 e1 fe 07 00 00    	and    ecx,0x7fe
c00280c8:	75 6b                	jne    c0028135 <__divdf3+0x1b1>
c00280ca:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00280cd:	09 d6                	or     esi,edx
c00280cf:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c00280d3:	74 28                	je     c00280fd <__divdf3+0x179>
c00280d5:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c00280d8:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c00280db:	85 f6                	test   esi,esi
c00280dd:	0f 85 14 02 00 00    	jne    c00282f7 <__divdf3+0x373>
c00280e3:	31 ff                	xor    edi,edi
c00280e5:	31 c9                	xor    ecx,ecx
c00280e7:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c00280ea:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c00280ed:	0f 89 04 02 00 00    	jns    c00282f7 <__divdf3+0x373>
c00280f3:	b9 00 00 00 80       	mov    ecx,0x80000000
c00280f8:	e9 fa 01 00 00       	jmp    c00282f7 <__divdf3+0x373>
c00280fd:	85 f6                	test   esi,esi
c00280ff:	75 1b                	jne    c002811c <__divdf3+0x198>
c0028101:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0028104:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c0028107:	25 00 00 00 80       	and    eax,0x80000000
c002810c:	31 c9                	xor    ecx,ecx
c002810e:	0d 00 00 f0 7f       	or     eax,0x7ff00000
c0028113:	89 cf                	mov    edi,ecx
c0028115:	89 c1                	mov    ecx,eax
c0028117:	e9 db 01 00 00       	jmp    c00282f7 <__divdf3+0x373>
c002811c:	01 d2                	add    edx,edx
c002811e:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0028121:	c1 eb 1f             	shr    ebx,0x1f
c0028124:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0028127:	01 75 e8             	add    DWORD PTR [ebp-0x18],esi
c002812a:	8d 48 01             	lea    ecx,[eax+0x1]
c002812d:	09 da                	or     edx,ebx
c002812f:	78 04                	js     c0028135 <__divdf3+0x1b1>
c0028131:	89 c8                	mov    eax,ecx
c0028133:	eb e7                	jmp    c002811c <__divdf3+0x198>
c0028135:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0028138:	81 ce 00 00 00 80    	or     esi,0x80000000
c002813e:	81 ca 00 00 00 80    	or     edx,0x80000000
c0028144:	89 55 e0             	mov    DWORD PTR [ebp-0x20],edx
c0028147:	39 d6                	cmp    esi,edx
c0028149:	77 0d                	ja     c0028158 <__divdf3+0x1d4>
c002814b:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c002814e:	39 55 ec             	cmp    DWORD PTR [ebp-0x14],edx
c0028151:	72 1b                	jb     c002816e <__divdf3+0x1ea>
c0028153:	3b 75 e0             	cmp    esi,DWORD PTR [ebp-0x20]
c0028156:	75 16                	jne    c002816e <__divdf3+0x1ea>
c0028158:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c002815b:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c002815e:	39 5d ec             	cmp    DWORD PTR [ebp-0x14],ebx
c0028161:	83 de 00             	sbb    esi,0x0
c0028164:	29 5d ec             	sub    DWORD PTR [ebp-0x14],ebx
c0028167:	ba 01 00 00 00       	mov    edx,0x1
c002816c:	eb 02                	jmp    c0028170 <__divdf3+0x1ec>
c002816e:	31 d2                	xor    edx,edx
c0028170:	c7 45 d0 36 00 00 00 	mov    DWORD PTR [ebp-0x30],0x36
c0028177:	31 ff                	xor    edi,edi
c0028179:	01 ff                	add    edi,edi
c002817b:	89 d1                	mov    ecx,edx
c002817d:	c1 e9 1f             	shr    ecx,0x1f
c0028180:	09 cf                	or     edi,ecx
c0028182:	8d 1c 12             	lea    ebx,[edx+edx*1]
c0028185:	89 5d d4             	mov    DWORD PTR [ebp-0x2c],ebx
c0028188:	89 da                	mov    edx,ebx
c002818a:	89 f3                	mov    ebx,esi
c002818c:	8d 34 36             	lea    esi,[esi+esi*1]
c002818f:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0028192:	c1 e9 1f             	shr    ecx,0x1f
c0028195:	09 ce                	or     esi,ecx
c0028197:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c002819a:	01 c9                	add    ecx,ecx
c002819c:	89 4d d8             	mov    DWORD PTR [ebp-0x28],ecx
c002819f:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c00281a2:	85 db                	test   ebx,ebx
c00281a4:	78 29                	js     c00281cf <__divdf3+0x24b>
c00281a6:	39 75 e0             	cmp    DWORD PTR [ebp-0x20],esi
c00281a9:	72 07                	jb     c00281b2 <__divdf3+0x22e>
c00281ab:	75 3c                	jne    c00281e9 <__divdf3+0x265>
c00281ad:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c00281b0:	77 37                	ja     c00281e9 <__divdf3+0x265>
c00281b2:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c00281b5:	8b 5d d8             	mov    ebx,DWORD PTR [ebp-0x28]
c00281b8:	31 d2                	xor    edx,edx
c00281ba:	39 5d e8             	cmp    DWORD PTR [ebp-0x18],ebx
c00281bd:	0f 97 c2             	seta   dl
c00281c0:	29 d6                	sub    esi,edx
c00281c2:	89 d9                	mov    ecx,ebx
c00281c4:	2b 4d e8             	sub    ecx,DWORD PTR [ebp-0x18]
c00281c7:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c00281ca:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c00281cd:	eb 17                	jmp    c00281e6 <__divdf3+0x262>
c00281cf:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c00281d2:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00281d5:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c00281d8:	0f 97 c1             	seta   cl
c00281db:	0f b6 c9             	movzx  ecx,cl
c00281de:	29 ce                	sub    esi,ecx
c00281e0:	8b 4d e8             	mov    ecx,DWORD PTR [ebp-0x18]
c00281e3:	29 4d ec             	sub    DWORD PTR [ebp-0x14],ecx
c00281e6:	83 ca 01             	or     edx,0x1
c00281e9:	ff 4d d0             	dec    DWORD PTR [ebp-0x30]
c00281ec:	75 8b                	jne    c0028179 <__divdf3+0x1f5>
c00281ee:	c1 e7 09             	shl    edi,0x9
c00281f1:	89 d1                	mov    ecx,edx
c00281f3:	c1 e9 17             	shr    ecx,0x17
c00281f6:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c00281f9:	09 f3                	or     ebx,esi
c00281fb:	0f 95 c3             	setne  bl
c00281fe:	0f b6 db             	movzx  ebx,bl
c0028201:	c1 e2 09             	shl    edx,0x9
c0028204:	09 d3                	or     ebx,edx
c0028206:	89 ca                	mov    edx,ecx
c0028208:	09 fa                	or     edx,edi
c002820a:	78 0c                	js     c0028218 <__divdf3+0x294>
c002820c:	01 d2                	add    edx,edx
c002820e:	89 d9                	mov    ecx,ebx
c0028210:	c1 e9 1f             	shr    ecx,0x1f
c0028213:	09 ca                	or     edx,ecx
c0028215:	01 db                	add    ebx,ebx
c0028217:	48                   	dec    eax
c0028218:	3d fe 07 00 00       	cmp    eax,0x7fe
c002821d:	0f 8f 83 00 00 00    	jg     c00282a6 <__divdf3+0x322>
c0028223:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0028229:	85 c0                	test   eax,eax
c002822b:	0f 8f 82 00 00 00    	jg     c00282b3 <__divdf3+0x32f>
c0028231:	83 f8 cc             	cmp    eax,0xffffffcc
c0028234:	7c 77                	jl     c00282ad <__divdf3+0x329>
c0028236:	be 01 00 00 00       	mov    esi,0x1
c002823b:	29 c6                	sub    esi,eax
c002823d:	81 ca 00 00 00 80    	or     edx,0x80000000
c0028243:	83 fe 1f             	cmp    esi,0x1f
c0028246:	7e 2f                	jle    c0028277 <__divdf3+0x2f3>
c0028248:	83 fe 20             	cmp    esi,0x20
c002824b:	75 0a                	jne    c0028257 <__divdf3+0x2d3>
c002824d:	85 db                	test   ebx,ebx
c002824f:	0f 95 c3             	setne  bl
c0028252:	0f b6 db             	movzx  ebx,bl
c0028255:	eb 1a                	jmp    c0028271 <__divdf3+0x2ed>
c0028257:	8d 48 3f             	lea    ecx,[eax+0x3f]
c002825a:	89 d7                	mov    edi,edx
c002825c:	d3 e7                	shl    edi,cl
c002825e:	89 f9                	mov    ecx,edi
c0028260:	09 d9                	or     ecx,ebx
c0028262:	0f 95 c3             	setne  bl
c0028265:	0f b6 db             	movzx  ebx,bl
c0028268:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c002826d:	29 c1                	sub    ecx,eax
c002826f:	d3 ea                	shr    edx,cl
c0028271:	09 d3                	or     ebx,edx
c0028273:	31 c0                	xor    eax,eax
c0028275:	eb 3a                	jmp    c00282b1 <__divdf3+0x32d>
c0028277:	83 c0 1f             	add    eax,0x1f
c002827a:	89 d7                	mov    edi,edx
c002827c:	88 c1                	mov    cl,al
c002827e:	d3 e7                	shl    edi,cl
c0028280:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0028283:	89 df                	mov    edi,ebx
c0028285:	89 f1                	mov    ecx,esi
c0028287:	d3 ef                	shr    edi,cl
c0028289:	89 f9                	mov    ecx,edi
c002828b:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c002828e:	09 cf                	or     edi,ecx
c0028290:	88 c1                	mov    cl,al
c0028292:	d3 e3                	shl    ebx,cl
c0028294:	85 db                	test   ebx,ebx
c0028296:	0f 95 c3             	setne  bl
c0028299:	0f b6 db             	movzx  ebx,bl
c002829c:	09 fb                	or     ebx,edi
c002829e:	89 f1                	mov    ecx,esi
c00282a0:	d3 ea                	shr    edx,cl
c00282a2:	31 c0                	xor    eax,eax
c00282a4:	eb 0d                	jmp    c00282b3 <__divdf3+0x32f>
c00282a6:	b8 ff 07 00 00       	mov    eax,0x7ff
c00282ab:	eb 02                	jmp    c00282af <__divdf3+0x32b>
c00282ad:	31 c0                	xor    eax,eax
c00282af:	31 db                	xor    ebx,ebx
c00282b1:	31 d2                	xor    edx,edx
c00282b3:	8b 4d dc             	mov    ecx,DWORD PTR [ebp-0x24]
c00282b6:	33 4d e4             	xor    ecx,DWORD PTR [ebp-0x1c]
c00282b9:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c00282bf:	09 c8                	or     eax,ecx
c00282c1:	c1 e0 14             	shl    eax,0x14
c00282c4:	89 d1                	mov    ecx,edx
c00282c6:	c1 e9 0b             	shr    ecx,0xb
c00282c9:	09 c8                	or     eax,ecx
c00282cb:	89 c6                	mov    esi,eax
c00282cd:	89 d9                	mov    ecx,ebx
c00282cf:	c1 e9 0b             	shr    ecx,0xb
c00282d2:	c1 e2 15             	shl    edx,0x15
c00282d5:	09 ca                	or     edx,ecx
c00282d7:	f7 c3 ff 03 00 00    	test   ebx,0x3ff
c00282dd:	0f 95 c0             	setne  al
c00282e0:	09 c1                	or     ecx,eax
c00282e2:	83 e1 01             	and    ecx,0x1
c00282e5:	c1 eb 0a             	shr    ebx,0xa
c00282e8:	21 cb                	and    ebx,ecx
c00282ea:	01 d3                	add    ebx,edx
c00282ec:	89 d8                	mov    eax,ebx
c00282ee:	83 d6 00             	adc    esi,0x0
c00282f1:	89 f2                	mov    edx,esi
c00282f3:	89 c7                	mov    edi,eax
c00282f5:	89 d1                	mov    ecx,edx
c00282f7:	89 f8                	mov    eax,edi
c00282f9:	89 ca                	mov    edx,ecx
c00282fb:	83 c4 2c             	add    esp,0x2c
c00282fe:	5b                   	pop    ebx
c00282ff:	5e                   	pop    esi
c0028300:	5f                   	pop    edi
c0028301:	5d                   	pop    ebp
c0028302:	c3                   	ret    

c0028303 <__floatsidf>:
c0028303:	55                   	push   ebp
c0028304:	89 e5                	mov    ebp,esp
c0028306:	56                   	push   esi
c0028307:	53                   	push   ebx
c0028308:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c002830b:	85 db                	test   ebx,ebx
c002830d:	7e 15                	jle    c0028324 <__floatsidf+0x21>
c002830f:	0f bd cb             	bsr    ecx,ebx
c0028312:	83 f1 1f             	xor    ecx,0x1f
c0028315:	d3 e3                	shl    ebx,cl
c0028317:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c002831d:	b8 1e 04 00 00       	mov    eax,0x41e
c0028322:	eb 21                	jmp    c0028345 <__floatsidf+0x42>
c0028324:	b8 00 00 00 00       	mov    eax,0x0
c0028329:	ba 00 00 00 00       	mov    edx,0x0
c002832e:	74 2a                	je     c002835a <__floatsidf+0x57>
c0028330:	f7 db                	neg    ebx
c0028332:	0f bd cb             	bsr    ecx,ebx
c0028335:	83 f1 1f             	xor    ecx,0x1f
c0028338:	d3 e3                	shl    ebx,cl
c002833a:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0028340:	b8 1e 0c 00 00       	mov    eax,0xc1e
c0028345:	29 c8                	sub    eax,ecx
c0028347:	c1 e0 14             	shl    eax,0x14
c002834a:	89 c1                	mov    ecx,eax
c002834c:	89 de                	mov    esi,ebx
c002834e:	c1 ee 0b             	shr    esi,0xb
c0028351:	09 f1                	or     ecx,esi
c0028353:	89 ca                	mov    edx,ecx
c0028355:	c1 e3 15             	shl    ebx,0x15
c0028358:	89 d8                	mov    eax,ebx
c002835a:	5b                   	pop    ebx
c002835b:	5e                   	pop    esi
c002835c:	5d                   	pop    ebp
c002835d:	c3                   	ret    

c002835e <__floatunsidf>:
c002835e:	55                   	push   ebp
c002835f:	89 e5                	mov    ebp,esp
c0028361:	56                   	push   esi
c0028362:	53                   	push   ebx
c0028363:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0028366:	85 db                	test   ebx,ebx
c0028368:	74 2a                	je     c0028394 <__floatunsidf+0x36>
c002836a:	0f bd cb             	bsr    ecx,ebx
c002836d:	83 f1 1f             	xor    ecx,0x1f
c0028370:	d3 e3                	shl    ebx,cl
c0028372:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0028378:	b8 1e 04 00 00       	mov    eax,0x41e
c002837d:	29 c8                	sub    eax,ecx
c002837f:	c1 e0 14             	shl    eax,0x14
c0028382:	89 c1                	mov    ecx,eax
c0028384:	89 de                	mov    esi,ebx
c0028386:	c1 ee 0b             	shr    esi,0xb
c0028389:	09 f1                	or     ecx,esi
c002838b:	89 ca                	mov    edx,ecx
c002838d:	c1 e3 15             	shl    ebx,0x15
c0028390:	89 d8                	mov    eax,ebx
c0028392:	eb 04                	jmp    c0028398 <__floatunsidf+0x3a>
c0028394:	31 c0                	xor    eax,eax
c0028396:	31 d2                	xor    edx,edx
c0028398:	5b                   	pop    ebx
c0028399:	5e                   	pop    esi
c002839a:	5d                   	pop    ebp
c002839b:	c3                   	ret    

c002839c <__fixdfsi>:
c002839c:	55                   	push   ebp
c002839d:	89 e5                	mov    ebp,esp
c002839f:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00283a2:	89 d1                	mov    ecx,edx
c00283a4:	c1 e1 0b             	shl    ecx,0xb
c00283a7:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c00283ad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00283b0:	c1 e8 15             	shr    eax,0x15
c00283b3:	09 c1                	or     ecx,eax
c00283b5:	c1 fa 14             	sar    edx,0x14
c00283b8:	78 1f                	js     c00283d9 <__fixdfsi+0x3d>
c00283ba:	81 ea ff 03 00 00    	sub    edx,0x3ff
c00283c0:	31 c0                	xor    eax,eax
c00283c2:	83 fa 1e             	cmp    edx,0x1e
c00283c5:	77 40                	ja     c0028407 <__fixdfsi+0x6b>
c00283c7:	89 c8                	mov    eax,ecx
c00283c9:	0d 00 00 00 80       	or     eax,0x80000000
c00283ce:	b9 1f 00 00 00       	mov    ecx,0x1f
c00283d3:	29 d1                	sub    ecx,edx
c00283d5:	d3 e8                	shr    eax,cl
c00283d7:	eb 2e                	jmp    c0028407 <__fixdfsi+0x6b>
c00283d9:	31 c0                	xor    eax,eax
c00283db:	81 c2 01 04 00 00    	add    edx,0x401
c00283e1:	78 24                	js     c0028407 <__fixdfsi+0x6b>
c00283e3:	83 fa 1e             	cmp    edx,0x1e
c00283e6:	7e 09                	jle    c00283f1 <__fixdfsi+0x55>
c00283e8:	83 fa 1f             	cmp    edx,0x1f
c00283eb:	75 18                	jne    c0028405 <__fixdfsi+0x69>
c00283ed:	85 c9                	test   ecx,ecx
c00283ef:	75 14                	jne    c0028405 <__fixdfsi+0x69>
c00283f1:	89 c8                	mov    eax,ecx
c00283f3:	0d 00 00 00 80       	or     eax,0x80000000
c00283f8:	b9 1f 00 00 00       	mov    ecx,0x1f
c00283fd:	29 d1                	sub    ecx,edx
c00283ff:	d3 e8                	shr    eax,cl
c0028401:	f7 d8                	neg    eax
c0028403:	eb 02                	jmp    c0028407 <__fixdfsi+0x6b>
c0028405:	31 c0                	xor    eax,eax
c0028407:	5d                   	pop    ebp
c0028408:	c3                   	ret    

c0028409 <__fixunsdfsi>:
c0028409:	55                   	push   ebp
c002840a:	89 e5                	mov    ebp,esp
c002840c:	53                   	push   ebx
c002840d:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0028410:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0028413:	89 d3                	mov    ebx,edx
c0028415:	c1 fb 14             	sar    ebx,0x14
c0028418:	81 eb ff 03 00 00    	sub    ebx,0x3ff
c002841e:	31 c0                	xor    eax,eax
c0028420:	83 fb 1f             	cmp    ebx,0x1f
c0028423:	77 1d                	ja     c0028442 <__fixunsdfsi+0x39>
c0028425:	89 d0                	mov    eax,edx
c0028427:	c1 e0 0b             	shl    eax,0xb
c002842a:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c002842f:	c1 e9 15             	shr    ecx,0x15
c0028432:	09 c8                	or     eax,ecx
c0028434:	0d 00 00 00 80       	or     eax,0x80000000
c0028439:	b9 1f 00 00 00       	mov    ecx,0x1f
c002843e:	29 d9                	sub    ecx,ebx
c0028440:	d3 e8                	shr    eax,cl
c0028442:	5b                   	pop    ebx
c0028443:	5d                   	pop    ebp
c0028444:	c3                   	ret    

c0028445 <__cmpdf2>:
c0028445:	55                   	push   ebp
c0028446:	89 e5                	mov    ebp,esp
c0028448:	57                   	push   edi
c0028449:	56                   	push   esi
c002844a:	53                   	push   ebx
c002844b:	83 ec 0c             	sub    esp,0xc
c002844e:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c0028451:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0028454:	89 ca                	mov    edx,ecx
c0028456:	c1 ea 14             	shr    edx,0x14
c0028459:	81 e2 ff 07 00 00    	and    edx,0x7ff
c002845f:	89 cb                	mov    ebx,ecx
c0028461:	c1 fb 1f             	sar    ebx,0x1f
c0028464:	31 da                	xor    edx,ebx
c0028466:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0028469:	89 df                	mov    edi,ebx
c002846b:	c1 e7 0b             	shl    edi,0xb
c002846e:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0028471:	c1 e1 0b             	shl    ecx,0xb
c0028474:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c002847a:	c1 eb 15             	shr    ebx,0x15
c002847d:	09 d9                	or     ecx,ebx
c002847f:	89 4d e8             	mov    DWORD PTR [ebp-0x18],ecx
c0028482:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c0028485:	89 ce                	mov    esi,ecx
c0028487:	c1 ee 14             	shr    esi,0x14
c002848a:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0028490:	89 cb                	mov    ebx,ecx
c0028492:	c1 fb 1f             	sar    ebx,0x1f
c0028495:	31 de                	xor    esi,ebx
c0028497:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c002849a:	89 df                	mov    edi,ebx
c002849c:	c1 e7 0b             	shl    edi,0xb
c002849f:	c1 e1 0b             	shl    ecx,0xb
c00284a2:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c00284a8:	c1 eb 15             	shr    ebx,0x15
c00284ab:	09 d9                	or     ecx,ebx
c00284ad:	89 d3                	mov    ebx,edx
c00284af:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c00284b5:	43                   	inc    ebx
c00284b6:	83 fb 01             	cmp    ebx,0x1
c00284b9:	77 08                	ja     c00284c3 <__cmpdf2+0x7e>
c00284bb:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c00284be:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c00284c1:	75 68                	jne    c002852b <__cmpdf2+0xe6>
c00284c3:	89 f3                	mov    ebx,esi
c00284c5:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c00284cb:	43                   	inc    ebx
c00284cc:	83 fb 01             	cmp    ebx,0x1
c00284cf:	77 06                	ja     c00284d7 <__cmpdf2+0x92>
c00284d1:	89 fb                	mov    ebx,edi
c00284d3:	09 cb                	or     ebx,ecx
c00284d5:	75 54                	jne    c002852b <__cmpdf2+0xe6>
c00284d7:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00284da:	09 f8                	or     eax,edi
c00284dc:	09 c8                	or     eax,ecx
c00284de:	0b 45 e8             	or     eax,DWORD PTR [ebp-0x18]
c00284e1:	75 12                	jne    c00284f5 <__cmpdf2+0xb0>
c00284e3:	8d 42 01             	lea    eax,[edx+0x1]
c00284e6:	83 f8 01             	cmp    eax,0x1
c00284e9:	77 0a                	ja     c00284f5 <__cmpdf2+0xb0>
c00284eb:	8d 5e 01             	lea    ebx,[esi+0x1]
c00284ee:	31 c0                	xor    eax,eax
c00284f0:	83 fb 01             	cmp    ebx,0x1
c00284f3:	76 36                	jbe    c002852b <__cmpdf2+0xe6>
c00284f5:	b8 01 00 00 00       	mov    eax,0x1
c00284fa:	39 f2                	cmp    edx,esi
c00284fc:	7f 2d                	jg     c002852b <__cmpdf2+0xe6>
c00284fe:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0028503:	7c 26                	jl     c002852b <__cmpdf2+0xe6>
c0028505:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0028508:	77 07                	ja     c0028511 <__cmpdf2+0xcc>
c002850a:	72 16                	jb     c0028522 <__cmpdf2+0xdd>
c002850c:	39 7d ec             	cmp    DWORD PTR [ebp-0x14],edi
c002850f:	76 0a                	jbe    c002851b <__cmpdf2+0xd6>
c0028511:	89 d0                	mov    eax,edx
c0028513:	c1 f8 1f             	sar    eax,0x1f
c0028516:	83 c8 01             	or     eax,0x1
c0028519:	eb 10                	jmp    c002852b <__cmpdf2+0xe6>
c002851b:	b8 00 00 00 00       	mov    eax,0x0
c0028520:	73 09                	jae    c002852b <__cmpdf2+0xe6>
c0028522:	89 d0                	mov    eax,edx
c0028524:	c1 f8 1f             	sar    eax,0x1f
c0028527:	83 e0 02             	and    eax,0x2
c002852a:	48                   	dec    eax
c002852b:	83 c4 0c             	add    esp,0xc
c002852e:	5b                   	pop    ebx
c002852f:	5e                   	pop    esi
c0028530:	5f                   	pop    edi
c0028531:	5d                   	pop    ebp
c0028532:	c3                   	ret    

c0028533 <__eqdf2>:
c0028533:	55                   	push   ebp
c0028534:	89 e5                	mov    ebp,esp
c0028536:	50                   	push   eax
c0028537:	6a 01                	push   0x1
c0028539:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c002853c:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c002853f:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0028542:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0028545:	e8 fb fe ff ff       	call   c0028445 <__cmpdf2>
c002854a:	83 c4 18             	add    esp,0x18
c002854d:	c9                   	leave  
c002854e:	c3                   	ret    

c002854f <__nedf2>:
c002854f:	eb e2                	jmp    c0028533 <__eqdf2>

c0028551 <__gtdf2>:
c0028551:	55                   	push   ebp
c0028552:	89 e5                	mov    ebp,esp
c0028554:	50                   	push   eax
c0028555:	6a ff                	push   0xffffffff
c0028557:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c002855a:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c002855d:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0028560:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0028563:	e8 dd fe ff ff       	call   c0028445 <__cmpdf2>
c0028568:	83 c4 18             	add    esp,0x18
c002856b:	c9                   	leave  
c002856c:	c3                   	ret    

c002856d <__gedf2>:
c002856d:	eb e2                	jmp    c0028551 <__gtdf2>

c002856f <__ltdf2>:
c002856f:	eb c2                	jmp    c0028533 <__eqdf2>

c0028571 <__ledf2>:
c0028571:	eb c0                	jmp    c0028533 <__eqdf2>

c0028573 <__truncdfsf2>:
c0028573:	55                   	push   ebp
c0028574:	89 e5                	mov    ebp,esp
c0028576:	57                   	push   edi
c0028577:	56                   	push   esi
c0028578:	53                   	push   ebx
c0028579:	83 ec 0c             	sub    esp,0xc
c002857c:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c002857f:	89 d1                	mov    ecx,edx
c0028581:	c1 f9 14             	sar    ecx,0x14
c0028584:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0028587:	89 df                	mov    edi,ebx
c0028589:	c1 e7 0b             	shl    edi,0xb
c002858c:	89 d0                	mov    eax,edx
c002858e:	c1 e0 0b             	shl    eax,0xb
c0028591:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0028596:	c1 eb 15             	shr    ebx,0x15
c0028599:	09 d8                	or     eax,ebx
c002859b:	89 cb                	mov    ebx,ecx
c002859d:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c00285a3:	8d b3 7f fc ff ff    	lea    esi,[ebx-0x381]
c00285a9:	81 fe fd 00 00 00    	cmp    esi,0xfd
c00285af:	0f 86 9e 00 00 00    	jbe    c0028653 <__truncdfsf2+0xe0>
c00285b5:	85 db                	test   ebx,ebx
c00285b7:	75 0a                	jne    c00285c3 <__truncdfsf2+0x50>
c00285b9:	c1 fa 17             	sar    edx,0x17
c00285bc:	30 d2                	xor    dl,dl
c00285be:	e9 84 00 00 00       	jmp    c0028647 <__truncdfsf2+0xd4>
c00285c3:	8d b3 02 fc ff ff    	lea    esi,[ebx-0x3fe]
c00285c9:	83 fe 83             	cmp    esi,0xffffff83
c00285cc:	7d 4b                	jge    c0028619 <__truncdfsf2+0xa6>
c00285ce:	b9 83 ff ff ff       	mov    ecx,0xffffff83
c00285d3:	29 f1                	sub    ecx,esi
c00285d5:	83 f9 1f             	cmp    ecx,0x1f
c00285d8:	7f 6b                	jg     c0028645 <__truncdfsf2+0xd2>
c00285da:	0d 00 00 00 80       	or     eax,0x80000000
c00285df:	89 c3                	mov    ebx,eax
c00285e1:	d3 eb                	shr    ebx,cl
c00285e3:	be 01 00 00 00       	mov    esi,0x1
c00285e8:	d3 e6                	shl    esi,cl
c00285ea:	4e                   	dec    esi
c00285eb:	21 f0                	and    eax,esi
c00285ed:	09 f8                	or     eax,edi
c00285ef:	0f 95 c0             	setne  al
c00285f2:	0f b6 c0             	movzx  eax,al
c00285f5:	09 c3                	or     ebx,eax
c00285f7:	89 d9                	mov    ecx,ebx
c00285f9:	c1 e9 08             	shr    ecx,0x8
c00285fc:	f6 c3 7f             	test   bl,0x7f
c00285ff:	0f 95 c0             	setne  al
c0028602:	09 c8                	or     eax,ecx
c0028604:	83 e0 01             	and    eax,0x1
c0028607:	c1 eb 07             	shr    ebx,0x7
c002860a:	21 c3                	and    ebx,eax
c002860c:	81 e2 00 00 00 80    	and    edx,0x80000000
c0028612:	09 d1                	or     ecx,edx
c0028614:	8d 04 0b             	lea    eax,[ebx+ecx*1]
c0028617:	eb 76                	jmp    c002868f <__truncdfsf2+0x11c>
c0028619:	83 c6 80             	add    esi,0xffffff80
c002861c:	7e 1d                	jle    c002863b <__truncdfsf2+0xc8>
c002861e:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0028624:	75 0b                	jne    c0028631 <__truncdfsf2+0xbe>
c0028626:	09 f8                	or     eax,edi
c0028628:	74 09                	je     c0028633 <__truncdfsf2+0xc0>
c002862a:	b8 ff ff ff 7f       	mov    eax,0x7fffffff
c002862f:	eb 02                	jmp    c0028633 <__truncdfsf2+0xc0>
c0028631:	31 c0                	xor    eax,eax
c0028633:	c1 fa 17             	sar    edx,0x17
c0028636:	80 ca ff             	or     dl,0xff
c0028639:	eb 0e                	jmp    c0028649 <__truncdfsf2+0xd6>
c002863b:	c1 fa 1f             	sar    edx,0x1f
c002863e:	c1 e2 08             	shl    edx,0x8
c0028641:	09 ca                	or     edx,ecx
c0028643:	eb 04                	jmp    c0028649 <__truncdfsf2+0xd6>
c0028645:	31 d2                	xor    edx,edx
c0028647:	31 c0                	xor    eax,eax
c0028649:	c1 e2 17             	shl    edx,0x17
c002864c:	c1 e8 08             	shr    eax,0x8
c002864f:	09 d0                	or     eax,edx
c0028651:	eb 3c                	jmp    c002868f <__truncdfsf2+0x11c>
c0028653:	81 e9 80 03 00 00    	sub    ecx,0x380
c0028659:	89 ca                	mov    edx,ecx
c002865b:	c1 fa 0b             	sar    edx,0xb
c002865e:	c1 e2 08             	shl    edx,0x8
c0028661:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c0028664:	31 db                	xor    ebx,ebx
c0028666:	85 ff                	test   edi,edi
c0028668:	0f 95 c3             	setne  bl
c002866b:	09 d8                	or     eax,ebx
c002866d:	89 c3                	mov    ebx,eax
c002866f:	c1 eb 08             	shr    ebx,0x8
c0028672:	a8 7f                	test   al,0x7f
c0028674:	0f 95 c2             	setne  dl
c0028677:	89 d6                	mov    esi,edx
c0028679:	09 de                	or     esi,ebx
c002867b:	83 e6 01             	and    esi,0x1
c002867e:	c1 e8 07             	shr    eax,0x7
c0028681:	21 f0                	and    eax,esi
c0028683:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0028686:	09 ca                	or     edx,ecx
c0028688:	c1 e2 17             	shl    edx,0x17
c002868b:	09 da                	or     edx,ebx
c002868d:	01 d0                	add    eax,edx
c002868f:	83 c4 0c             	add    esp,0xc
c0028692:	5b                   	pop    ebx
c0028693:	5e                   	pop    esi
c0028694:	5f                   	pop    edi
c0028695:	5d                   	pop    ebp
c0028696:	c3                   	ret    

c0028697 <__extendsfdf2>:
c0028697:	55                   	push   ebp
c0028698:	89 e5                	mov    ebp,esp
c002869a:	57                   	push   edi
c002869b:	56                   	push   esi
c002869c:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c002869f:	89 d1                	mov    ecx,edx
c00286a1:	c1 f9 17             	sar    ecx,0x17
c00286a4:	c1 e2 08             	shl    edx,0x8
c00286a7:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c00286ad:	89 c8                	mov    eax,ecx
c00286af:	80 e4 f8             	and    ah,0xf8
c00286b2:	8d 71 01             	lea    esi,[ecx+0x1]
c00286b5:	81 e6 fe 00 00 00    	and    esi,0xfe
c00286bb:	75 27                	jne    c00286e4 <__extendsfdf2+0x4d>
c00286bd:	81 e1 ff 00 00 00    	and    ecx,0xff
c00286c3:	75 18                	jne    c00286dd <__extendsfdf2+0x46>
c00286c5:	85 d2                	test   edx,edx
c00286c7:	74 20                	je     c00286e9 <__extendsfdf2+0x52>
c00286c9:	41                   	inc    ecx
c00286ca:	01 d2                	add    edx,edx
c00286cc:	79 fb                	jns    c00286c9 <__extendsfdf2+0x32>
c00286ce:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c00286d4:	29 c8                	sub    eax,ecx
c00286d6:	05 81 03 00 00       	add    eax,0x381
c00286db:	eb 0c                	jmp    c00286e9 <__extendsfdf2+0x52>
c00286dd:	05 00 07 00 00       	add    eax,0x700
c00286e2:	eb 05                	jmp    c00286e9 <__extendsfdf2+0x52>
c00286e4:	05 80 03 00 00       	add    eax,0x380
c00286e9:	c1 e0 14             	shl    eax,0x14
c00286ec:	89 c1                	mov    ecx,eax
c00286ee:	89 d0                	mov    eax,edx
c00286f0:	c1 e8 0b             	shr    eax,0xb
c00286f3:	09 c1                	or     ecx,eax
c00286f5:	c1 e2 15             	shl    edx,0x15
c00286f8:	89 d0                	mov    eax,edx
c00286fa:	89 ca                	mov    edx,ecx
c00286fc:	5e                   	pop    esi
c00286fd:	5f                   	pop    edi
c00286fe:	5d                   	pop    ebp
c00286ff:	c3                   	ret    

c0028700 <fabs>:
c0028700:	83 ec 0c             	sub    esp,0xc
c0028703:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028707:	89 04 24             	mov    DWORD PTR [esp],eax
c002870a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002870e:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0028713:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0028717:	dd 04 24             	fld    QWORD PTR [esp]
c002871a:	83 c4 0c             	add    esp,0xc
c002871d:	c3                   	ret    
c002871e:	66 90                	xchg   ax,ax

c0028720 <lrint>:
c0028720:	dd 44 24 04          	fld    QWORD PTR [esp+0x4]
c0028724:	83 ec 04             	sub    esp,0x4
c0028727:	db 1c 24             	fistp  DWORD PTR [esp]
c002872a:	58                   	pop    eax
c002872b:	c3                   	ret    

c002872c <lrintf>:
c002872c:	d9 44 24 04          	fld    DWORD PTR [esp+0x4]
c0028730:	83 ec 04             	sub    esp,0x4
c0028733:	db 1c 24             	fistp  DWORD PTR [esp]
c0028736:	58                   	pop    eax
c0028737:	c3                   	ret    

Disassembly of section .init:

c0028738 <_init>:
c0028738:	55                   	push   ebp
c0028739:	89 e5                	mov    ebp,esp
c002873b:	e8 d8 79 fd ff       	call   c0000118 <frame_dummy>
c0028740:	e8 63 e0 ff ff       	call   c00267a8 <__do_global_ctors_aux>
c0028745:	5d                   	pop    ebp
c0028746:	c3                   	ret    

Disassembly of section .fini:

c0028747 <_fini>:
c0028747:	55                   	push   ebp
c0028748:	89 e5                	mov    ebp,esp
c002874a:	e8 59 79 fd ff       	call   c00000a8 <__do_global_dtors_aux>
c002874f:	5d                   	pop    ebp
c0028750:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c0028752 <Computer::~Computer()>:
c0028752:	83 ec 0c             	sub    esp,0xc
c0028755:	ba c0 a2 02 c0       	mov    edx,0xc002a2c0
c002875a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002875e:	89 10                	mov    DWORD PTR [eax],edx
c0028760:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028764:	83 ec 0c             	sub    esp,0xc
c0028767:	50                   	push   eax
c0028768:	e8 6f bb fe ff       	call   c00142dc <Device::~Device()>
c002876d:	83 c4 10             	add    esp,0x10
c0028770:	90                   	nop
c0028771:	83 c4 0c             	add    esp,0xc
c0028774:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c0028776 <Computer::~Computer()>:
c0028776:	83 ec 0c             	sub    esp,0xc
c0028779:	83 ec 0c             	sub    esp,0xc
c002877c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028780:	e8 cd ff ff ff       	call   c0028752 <Computer::~Computer()>
c0028785:	83 c4 10             	add    esp,0x10
c0028788:	83 ec 08             	sub    esp,0x8
c002878b:	68 ec 01 00 00       	push   0x1ec
c0028790:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028794:	e8 6a a7 fe ff       	call   c0012f03 <operator delete(void*, unsigned long)>
c0028799:	83 c4 10             	add    esp,0x10
c002879c:	83 c4 0c             	add    esp,0xc
c002879f:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c00287a0 <idleCommon()>:
c00287a0:	83 ec 0c             	sub    esp,0xc
c00287a3:	e8 12 57 ff ff       	call   c001deba <lockScheduler()>
c00287a8:	e8 49 5a ff ff       	call   c001e1f6 <schedule()>
c00287ad:	83 c4 0c             	add    esp,0xc
c00287b0:	e9 07 57 ff ff       	jmp    c001debc <unlockScheduler()>

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c00287b6 <LinkedList<UnixFile>::~LinkedList()>:
c00287b6:	90                   	nop
c00287b7:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c00287b8 <LinkedList<UnixFile>::LinkedList()>:
c00287b8:	83 ec 0c             	sub    esp,0xc
c00287bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287bf:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00287c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287c9:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00287d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287d4:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00287db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287df:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00287e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287e9:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00287f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287f4:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00287fb:	83 ec 0c             	sub    esp,0xc
c00287fe:	68 a2 a5 02 c0       	push   0xc002a5a2
c0028803:	e8 db a7 fe ff       	call   c0012fe3 <Dbg::kprintf(char const*, ...)>
c0028808:	83 c4 10             	add    esp,0x10
c002880b:	90                   	nop
c002880c:	83 c4 0c             	add    esp,0xc
c002880f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c0028810 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c0028810:	83 ec 0c             	sub    esp,0xc
c0028813:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0028818:	75 10                	jne    c002882a <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c002881a:	83 ec 0c             	sub    esp,0xc
c002881d:	68 bc a5 02 c0       	push   0xc002a5bc
c0028822:	e8 6e 1e ff ff       	call   c001a695 <Krnl::panic(char const*)>
c0028827:	83 c4 10             	add    esp,0x10
c002882a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002882e:	8b 00                	mov    eax,DWORD PTR [eax]
c0028830:	85 c0                	test   eax,eax
c0028832:	74 34                	je     c0028868 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c0028834:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028838:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002883b:	85 c0                	test   eax,eax
c002883d:	74 29                	je     c0028868 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c002883f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028843:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028846:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002884a:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002884d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028851:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028855:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028858:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002885c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002885f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028866:	eb 65                	jmp    c00288cd <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0028868:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002886c:	8b 00                	mov    eax,DWORD PTR [eax]
c002886e:	85 c0                	test   eax,eax
c0028870:	75 4b                	jne    c00288bd <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c0028872:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028876:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028879:	85 c0                	test   eax,eax
c002887b:	75 40                	jne    c00288bd <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c002887d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028881:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028885:	89 10                	mov    DWORD PTR [eax],edx
c0028887:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002888b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002888f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028892:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028896:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028899:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00288a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288a4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00288a7:	85 c0                	test   eax,eax
c00288a9:	74 22                	je     c00288cd <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c00288ab:	83 ec 0c             	sub    esp,0xc
c00288ae:	68 de a5 02 c0       	push   0xc002a5de
c00288b3:	e8 dd 1d ff ff       	call   c001a695 <Krnl::panic(char const*)>
c00288b8:	83 c4 10             	add    esp,0x10
c00288bb:	eb 10                	jmp    c00288cd <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c00288bd:	83 ec 0c             	sub    esp,0xc
c00288c0:	68 e8 a5 02 c0       	push   0xc002a5e8
c00288c5:	e8 cb 1d ff ff       	call   c001a695 <Krnl::panic(char const*)>
c00288ca:	83 c4 10             	add    esp,0x10
c00288cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288d1:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00288d4:	8d 50 01             	lea    edx,[eax+0x1]
c00288d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288db:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00288de:	90                   	nop
c00288df:	83 c4 0c             	add    esp,0xc
c00288e2:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c00288e4 <LinkedList<UnixFile>::getFirstElement()>:
c00288e4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00288e8:	8b 00                	mov    eax,DWORD PTR [eax]
c00288ea:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c00288ec <LinkedList<UnixFile>::removeFirst()>:
c00288ec:	83 ec 0c             	sub    esp,0xc
c00288ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288f3:	8b 00                	mov    eax,DWORD PTR [eax]
c00288f5:	85 c0                	test   eax,eax
c00288f7:	75 12                	jne    c002890b <LinkedList<UnixFile>::removeFirst()+0x1f>
c00288f9:	83 ec 0c             	sub    esp,0xc
c00288fc:	68 f4 a5 02 c0       	push   0xc002a5f4
c0028901:	e8 8f 1d ff ff       	call   c001a695 <Krnl::panic(char const*)>
c0028906:	83 c4 10             	add    esp,0x10
c0028909:	eb 7e                	jmp    c0028989 <LinkedList<UnixFile>::removeFirst()+0x9d>
c002890b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002890f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028912:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028915:	85 c0                	test   eax,eax
c0028917:	74 10                	je     c0028929 <LinkedList<UnixFile>::removeFirst()+0x3d>
c0028919:	83 ec 0c             	sub    esp,0xc
c002891c:	68 3f a6 02 c0       	push   0xc002a63f
c0028921:	e8 6f 1d ff ff       	call   c001a695 <Krnl::panic(char const*)>
c0028926:	83 c4 10             	add    esp,0x10
c0028929:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002892d:	8b 00                	mov    eax,DWORD PTR [eax]
c002892f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028932:	85 c0                	test   eax,eax
c0028934:	75 33                	jne    c0028969 <LinkedList<UnixFile>::removeFirst()+0x7d>
c0028936:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002893a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028940:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028944:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002894b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002894f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028952:	83 f8 01             	cmp    eax,0x1
c0028955:	74 21                	je     c0028978 <LinkedList<UnixFile>::removeFirst()+0x8c>
c0028957:	83 ec 0c             	sub    esp,0xc
c002895a:	68 18 a6 02 c0       	push   0xc002a618
c002895f:	e8 31 1d ff ff       	call   c001a695 <Krnl::panic(char const*)>
c0028964:	83 c4 10             	add    esp,0x10
c0028967:	eb 0f                	jmp    c0028978 <LinkedList<UnixFile>::removeFirst()+0x8c>
c0028969:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002896d:	8b 00                	mov    eax,DWORD PTR [eax]
c002896f:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0028972:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028976:	89 10                	mov    DWORD PTR [eax],edx
c0028978:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002897c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002897f:	8d 50 ff             	lea    edx,[eax-0x1]
c0028982:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028986:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028989:	83 c4 0c             	add    esp,0xc
c002898c:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c002898e <LinkedList<UnixFile>::getNext(UnixFile*)>:
c002898e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0028992:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028995:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c0028996 <DriverlessDevice::~DriverlessDevice()>:
c0028996:	ba 04 af 02 c0       	mov    edx,0xc002af04
c002899b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002899f:	89 10                	mov    DWORD PTR [eax],edx
c00289a1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00289a5:	50                   	push   eax
c00289a6:	e8 31 b9 fe ff       	call   c00142dc <Device::~Device()>
c00289ab:	83 c4 04             	add    esp,0x4
c00289ae:	90                   	nop
c00289af:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c00289b0 <DriverlessDevice::~DriverlessDevice()>:
c00289b0:	83 ec 0c             	sub    esp,0xc
c00289b3:	83 ec 0c             	sub    esp,0xc
c00289b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00289ba:	e8 d7 ff ff ff       	call   c0028996 <DriverlessDevice::~DriverlessDevice()>
c00289bf:	83 c4 10             	add    esp,0x10
c00289c2:	83 ec 08             	sub    esp,0x8
c00289c5:	68 58 01 00 00       	push   0x158
c00289ca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00289ce:	e8 30 a5 fe ff       	call   c0012f03 <operator delete(void*, unsigned long)>
c00289d3:	83 c4 10             	add    esp,0x10
c00289d6:	83 c4 0c             	add    esp,0xc
c00289d9:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c00289da <LinkedList<Device>::addElement(Device*)>:
c00289da:	83 ec 0c             	sub    esp,0xc
c00289dd:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00289e2:	75 10                	jne    c00289f4 <LinkedList<Device>::addElement(Device*)+0x1a>
c00289e4:	83 ec 0c             	sub    esp,0xc
c00289e7:	68 bc a5 02 c0       	push   0xc002a5bc
c00289ec:	e8 a4 1c ff ff       	call   c001a695 <Krnl::panic(char const*)>
c00289f1:	83 c4 10             	add    esp,0x10
c00289f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289f8:	8b 00                	mov    eax,DWORD PTR [eax]
c00289fa:	85 c0                	test   eax,eax
c00289fc:	74 3a                	je     c0028a38 <LinkedList<Device>::addElement(Device*)+0x5e>
c00289fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a02:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028a05:	85 c0                	test   eax,eax
c0028a07:	74 2f                	je     c0028a38 <LinkedList<Device>::addElement(Device*)+0x5e>
c0028a09:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a0d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028a10:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028a14:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c0028a1a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a1e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028a22:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028a25:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a29:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028a2c:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c0028a36:	eb 68                	jmp    c0028aa0 <LinkedList<Device>::addElement(Device*)+0xc6>
c0028a38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a3c:	8b 00                	mov    eax,DWORD PTR [eax]
c0028a3e:	85 c0                	test   eax,eax
c0028a40:	75 4e                	jne    c0028a90 <LinkedList<Device>::addElement(Device*)+0xb6>
c0028a42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a46:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028a49:	85 c0                	test   eax,eax
c0028a4b:	75 43                	jne    c0028a90 <LinkedList<Device>::addElement(Device*)+0xb6>
c0028a4d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a51:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028a55:	89 10                	mov    DWORD PTR [eax],edx
c0028a57:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a5b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028a5f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028a62:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a66:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028a69:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c0028a73:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a77:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028a7a:	85 c0                	test   eax,eax
c0028a7c:	74 22                	je     c0028aa0 <LinkedList<Device>::addElement(Device*)+0xc6>
c0028a7e:	83 ec 0c             	sub    esp,0xc
c0028a81:	68 de a5 02 c0       	push   0xc002a5de
c0028a86:	e8 0a 1c ff ff       	call   c001a695 <Krnl::panic(char const*)>
c0028a8b:	83 c4 10             	add    esp,0x10
c0028a8e:	eb 10                	jmp    c0028aa0 <LinkedList<Device>::addElement(Device*)+0xc6>
c0028a90:	83 ec 0c             	sub    esp,0xc
c0028a93:	68 e8 a5 02 c0       	push   0xc002a5e8
c0028a98:	e8 f8 1b ff ff       	call   c001a695 <Krnl::panic(char const*)>
c0028a9d:	83 c4 10             	add    esp,0x10
c0028aa0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028aa4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028aa7:	8d 50 01             	lea    edx,[eax+0x1]
c0028aaa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028aae:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028ab1:	90                   	nop
c0028ab2:	83 c4 0c             	add    esp,0xc
c0028ab5:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c0028ab6 <LinkedList<Device>::LinkedList()>:
c0028ab6:	83 ec 0c             	sub    esp,0xc
c0028ab9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028abd:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028ac3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ac7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028ace:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ad2:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028ad9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028add:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028ae3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ae7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028aee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028af2:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028af9:	83 ec 0c             	sub    esp,0xc
c0028afc:	68 a2 a5 02 c0       	push   0xc002a5a2
c0028b01:	e8 dd a4 fe ff       	call   c0012fe3 <Dbg::kprintf(char const*, ...)>
c0028b06:	83 c4 10             	add    esp,0x10
c0028b09:	90                   	nop
c0028b0a:	83 c4 0c             	add    esp,0xc
c0028b0d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c0028b0e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c0028b0e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028b12:	8b 00                	mov    eax,DWORD PTR [eax]
c0028b14:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c0028b16 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c0028b16:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028b1a:	8b 00                	mov    eax,DWORD PTR [eax]
c0028b1c:	85 c0                	test   eax,eax
c0028b1e:	75 0e                	jne    c0028b2e <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c0028b20:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028b24:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028b27:	85 c0                	test   eax,eax
c0028b29:	75 03                	jne    c0028b2e <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c0028b2b:	b0 01                	mov    al,0x1
c0028b2d:	c3                   	ret    
c0028b2e:	b0 00                	mov    al,0x0
c0028b30:	90                   	nop
c0028b31:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c0028b32 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c0028b32:	83 ec 0c             	sub    esp,0xc
c0028b35:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b39:	8b 00                	mov    eax,DWORD PTR [eax]
c0028b3b:	85 c0                	test   eax,eax
c0028b3d:	75 15                	jne    c0028b54 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x22>
c0028b3f:	83 ec 0c             	sub    esp,0xc
c0028b42:	68 f4 a5 02 c0       	push   0xc002a5f4
c0028b47:	e8 49 1b ff ff       	call   c001a695 <Krnl::panic(char const*)>
c0028b4c:	83 c4 10             	add    esp,0x10
c0028b4f:	e9 88 00 00 00       	jmp    c0028bdc <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xaa>
c0028b54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b58:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028b5b:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0028b5e:	85 c0                	test   eax,eax
c0028b60:	0f 95 c0             	setne  al
c0028b63:	84 c0                	test   al,al
c0028b65:	74 10                	je     c0028b77 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x45>
c0028b67:	83 ec 0c             	sub    esp,0xc
c0028b6a:	68 3f a6 02 c0       	push   0xc002a63f
c0028b6f:	e8 21 1b ff ff       	call   c001a695 <Krnl::panic(char const*)>
c0028b74:	83 c4 10             	add    esp,0x10
c0028b77:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b7b:	8b 00                	mov    eax,DWORD PTR [eax]
c0028b7d:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0028b80:	85 c0                	test   eax,eax
c0028b82:	0f 94 c0             	sete   al
c0028b85:	84 c0                	test   al,al
c0028b87:	74 33                	je     c0028bbc <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x8a>
c0028b89:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b8d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028b93:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b97:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028b9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ba2:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028ba5:	83 f8 01             	cmp    eax,0x1
c0028ba8:	74 21                	je     c0028bcb <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c0028baa:	83 ec 0c             	sub    esp,0xc
c0028bad:	68 18 a6 02 c0       	push   0xc002a618
c0028bb2:	e8 de 1a ff ff       	call   c001a695 <Krnl::panic(char const*)>
c0028bb7:	83 c4 10             	add    esp,0x10
c0028bba:	eb 0f                	jmp    c0028bcb <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c0028bbc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028bc0:	8b 00                	mov    eax,DWORD PTR [eax]
c0028bc2:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0028bc5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028bc9:	89 10                	mov    DWORD PTR [eax],edx
c0028bcb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028bcf:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028bd2:	8d 50 ff             	lea    edx,[eax-0x1]
c0028bd5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028bd9:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028bdc:	83 c4 0c             	add    esp,0xc
c0028bdf:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c0028be0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c0028be0:	83 ec 0c             	sub    esp,0xc
c0028be3:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0028be8:	75 10                	jne    c0028bfa <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1a>
c0028bea:	83 ec 0c             	sub    esp,0xc
c0028bed:	68 bc a5 02 c0       	push   0xc002a5bc
c0028bf2:	e8 9e 1a ff ff       	call   c001a695 <Krnl::panic(char const*)>
c0028bf7:	83 c4 10             	add    esp,0x10
c0028bfa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028bfe:	8b 00                	mov    eax,DWORD PTR [eax]
c0028c00:	85 c0                	test   eax,eax
c0028c02:	74 34                	je     c0028c38 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c0028c04:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c08:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028c0b:	85 c0                	test   eax,eax
c0028c0d:	74 29                	je     c0028c38 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c0028c0f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c13:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028c16:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028c1a:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0028c1d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c21:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028c25:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028c28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c2c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028c2f:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0028c36:	eb 65                	jmp    c0028c9d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c0028c38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c3c:	8b 00                	mov    eax,DWORD PTR [eax]
c0028c3e:	85 c0                	test   eax,eax
c0028c40:	75 4b                	jne    c0028c8d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c0028c42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c46:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028c49:	85 c0                	test   eax,eax
c0028c4b:	75 40                	jne    c0028c8d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c0028c4d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c51:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028c55:	89 10                	mov    DWORD PTR [eax],edx
c0028c57:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c5b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028c5f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028c62:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c66:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028c69:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0028c70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c74:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028c77:	85 c0                	test   eax,eax
c0028c79:	74 22                	je     c0028c9d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c0028c7b:	83 ec 0c             	sub    esp,0xc
c0028c7e:	68 de a5 02 c0       	push   0xc002a5de
c0028c83:	e8 0d 1a ff ff       	call   c001a695 <Krnl::panic(char const*)>
c0028c88:	83 c4 10             	add    esp,0x10
c0028c8b:	eb 10                	jmp    c0028c9d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c0028c8d:	83 ec 0c             	sub    esp,0xc
c0028c90:	68 e8 a5 02 c0       	push   0xc002a5e8
c0028c95:	e8 fb 19 ff ff       	call   c001a695 <Krnl::panic(char const*)>
c0028c9a:	83 c4 10             	add    esp,0x10
c0028c9d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ca1:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028ca4:	8d 50 01             	lea    edx,[eax+0x1]
c0028ca7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028cab:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028cae:	90                   	nop
c0028caf:	83 c4 0c             	add    esp,0xc
c0028cb2:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c0028cb4 <ACPI::~ACPI()>:
c0028cb4:	83 ec 0c             	sub    esp,0xc
c0028cb7:	ba 58 b8 02 c0       	mov    edx,0xc002b858
c0028cbc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028cc0:	89 10                	mov    DWORD PTR [eax],edx
c0028cc2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028cc6:	83 ec 0c             	sub    esp,0xc
c0028cc9:	50                   	push   eax
c0028cca:	e8 0d b6 fe ff       	call   c00142dc <Device::~Device()>
c0028ccf:	83 c4 10             	add    esp,0x10
c0028cd2:	90                   	nop
c0028cd3:	83 c4 0c             	add    esp,0xc
c0028cd6:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c0028cd8 <ACPI::~ACPI()>:
c0028cd8:	83 ec 0c             	sub    esp,0xc
c0028cdb:	83 ec 0c             	sub    esp,0xc
c0028cde:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028ce2:	e8 cd ff ff ff       	call   c0028cb4 <ACPI::~ACPI()>
c0028ce7:	83 c4 10             	add    esp,0x10
c0028cea:	83 ec 08             	sub    esp,0x8
c0028ced:	68 68 12 00 00       	push   0x1268
c0028cf2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028cf6:	e8 08 a2 fe ff       	call   c0012f03 <operator delete(void*, unsigned long)>
c0028cfb:	83 c4 10             	add    esp,0x10
c0028cfe:	83 c4 0c             	add    esp,0xc
c0028d01:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c0028d02 <CPU::~CPU()>:
c0028d02:	83 ec 0c             	sub    esp,0xc
c0028d05:	ba 48 bc 02 c0       	mov    edx,0xc002bc48
c0028d0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d0e:	89 10                	mov    DWORD PTR [eax],edx
c0028d10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d14:	83 ec 0c             	sub    esp,0xc
c0028d17:	50                   	push   eax
c0028d18:	e8 bf b5 fe ff       	call   c00142dc <Device::~Device()>
c0028d1d:	83 c4 10             	add    esp,0x10
c0028d20:	90                   	nop
c0028d21:	83 c4 0c             	add    esp,0xc
c0028d24:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c0028d26 <CPU::~CPU()>:
c0028d26:	83 ec 0c             	sub    esp,0xc
c0028d29:	83 ec 0c             	sub    esp,0xc
c0028d2c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028d30:	e8 cd ff ff ff       	call   c0028d02 <CPU::~CPU()>
c0028d35:	83 c4 10             	add    esp,0x10
c0028d38:	83 ec 08             	sub    esp,0x8
c0028d3b:	68 98 11 00 00       	push   0x1198
c0028d40:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028d44:	e8 ba a1 fe ff       	call   c0012f03 <operator delete(void*, unsigned long)>
c0028d49:	83 c4 10             	add    esp,0x10
c0028d4c:	83 c4 0c             	add    esp,0xc
c0028d4f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c0028d50 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c0028d50:	90                   	nop
c0028d51:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c0028d52 <ThreadControlBlock::ThreadControlBlock()>:
c0028d52:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028d56:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0028d5d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028d61:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0028d68:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028d6c:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c0028d73:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028d77:	c7 40 40 00 00 00 00 	mov    DWORD PTR [eax+0x40],0x0
c0028d7e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028d82:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c0028d86:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028d8a:	c6 40 62 00          	mov    BYTE PTR [eax+0x62],0x0
c0028d8e:	90                   	nop
c0028d8f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c0028d90 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c0028d90:	83 ec 0c             	sub    esp,0xc
c0028d93:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d97:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028d9d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028da1:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028da8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028dac:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028db3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028db7:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028dbd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028dc1:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028dc8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028dcc:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028dd3:	83 ec 0c             	sub    esp,0xc
c0028dd6:	68 a2 a5 02 c0       	push   0xc002a5a2
c0028ddb:	e8 03 a2 fe ff       	call   c0012fe3 <Dbg::kprintf(char const*, ...)>
c0028de0:	83 c4 10             	add    esp,0x10
c0028de3:	90                   	nop
c0028de4:	83 c4 0c             	add    esp,0xc
c0028de7:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c0028de8 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c0028de8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0028dec:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0028def:	c3                   	ret    

Disassembly of section .text._ZN2Vm9_FPUStateC2Ev:

c0028df0 <Vm::_FPUState::_FPUState()>:
c0028df0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028df4:	c7 40 44 00 00 00 00 	mov    DWORD PTR [eax+0x44],0x0
c0028dfb:	90                   	nop
c0028dfc:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c0028dfe <PCI::~PCI()>:
c0028dfe:	83 ec 0c             	sub    esp,0xc
c0028e01:	ba 3c cd 02 c0       	mov    edx,0xc002cd3c
c0028e06:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e0a:	89 10                	mov    DWORD PTR [eax],edx
c0028e0c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e10:	83 ec 0c             	sub    esp,0xc
c0028e13:	50                   	push   eax
c0028e14:	e8 9b ae fe ff       	call   c0013cb4 <Bus::~Bus()>
c0028e19:	83 c4 10             	add    esp,0x10
c0028e1c:	90                   	nop
c0028e1d:	83 c4 0c             	add    esp,0xc
c0028e20:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c0028e22 <PCI::~PCI()>:
c0028e22:	83 ec 0c             	sub    esp,0xc
c0028e25:	83 ec 0c             	sub    esp,0xc
c0028e28:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028e2c:	e8 cd ff ff ff       	call   c0028dfe <PCI::~PCI()>
c0028e31:	83 c4 10             	add    esp,0x10
c0028e34:	83 ec 08             	sub    esp,0x8
c0028e37:	68 58 01 00 00       	push   0x158
c0028e3c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028e40:	e8 be a0 fe ff       	call   c0012f03 <operator delete(void*, unsigned long)>
c0028e45:	83 c4 10             	add    esp,0x10
c0028e48:	83 c4 0c             	add    esp,0xc
c0028e4b:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c0028e4c <IDE::~IDE()>:
c0028e4c:	83 ec 0c             	sub    esp,0xc
c0028e4f:	ba a0 cf 02 c0       	mov    edx,0xc002cfa0
c0028e54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e58:	89 10                	mov    DWORD PTR [eax],edx
c0028e5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e5e:	83 ec 0c             	sub    esp,0xc
c0028e61:	50                   	push   eax
c0028e62:	e8 65 b9 fe ff       	call   c00147cc <HardDiskController::~HardDiskController()>
c0028e67:	83 c4 10             	add    esp,0x10
c0028e6a:	90                   	nop
c0028e6b:	83 c4 0c             	add    esp,0xc
c0028e6e:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c0028e70 <IDE::~IDE()>:
c0028e70:	83 ec 0c             	sub    esp,0xc
c0028e73:	83 ec 0c             	sub    esp,0xc
c0028e76:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028e7a:	e8 cd ff ff ff       	call   c0028e4c <IDE::~IDE()>
c0028e7f:	83 c4 10             	add    esp,0x10
c0028e82:	83 ec 08             	sub    esp,0x8
c0028e85:	68 70 02 00 00       	push   0x270
c0028e8a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028e8e:	e8 70 a0 fe ff       	call   c0012f03 <operator delete(void*, unsigned long)>
c0028e93:	83 c4 10             	add    esp,0x10
c0028e96:	83 c4 0c             	add    esp,0xc
c0028e99:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c0028e9a <SATABus::~SATABus()>:
c0028e9a:	83 ec 0c             	sub    esp,0xc
c0028e9d:	ba 80 d0 02 c0       	mov    edx,0xc002d080
c0028ea2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ea6:	89 10                	mov    DWORD PTR [eax],edx
c0028ea8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028eac:	83 ec 0c             	sub    esp,0xc
c0028eaf:	50                   	push   eax
c0028eb0:	e8 17 b9 fe ff       	call   c00147cc <HardDiskController::~HardDiskController()>
c0028eb5:	83 c4 10             	add    esp,0x10
c0028eb8:	90                   	nop
c0028eb9:	83 c4 0c             	add    esp,0xc
c0028ebc:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c0028ebe <SATABus::~SATABus()>:
c0028ebe:	83 ec 0c             	sub    esp,0xc
c0028ec1:	83 ec 0c             	sub    esp,0xc
c0028ec4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028ec8:	e8 cd ff ff ff       	call   c0028e9a <SATABus::~SATABus()>
c0028ecd:	83 c4 10             	add    esp,0x10
c0028ed0:	83 ec 08             	sub    esp,0x8
c0028ed3:	68 64 01 00 00       	push   0x164
c0028ed8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028edc:	e8 22 a0 fe ff       	call   c0012f03 <operator delete(void*, unsigned long)>
c0028ee1:	83 c4 10             	add    esp,0x10
c0028ee4:	83 c4 0c             	add    esp,0xc
c0028ee7:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c0028ee8 <ATA::~ATA()>:
c0028ee8:	83 ec 0c             	sub    esp,0xc
c0028eeb:	ba cc d0 02 c0       	mov    edx,0xc002d0cc
c0028ef0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ef4:	89 10                	mov    DWORD PTR [eax],edx
c0028ef6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028efa:	83 ec 0c             	sub    esp,0xc
c0028efd:	50                   	push   eax
c0028efe:	e8 bb b9 fe ff       	call   c00148be <PhysicalDisk::~PhysicalDisk()>
c0028f03:	83 c4 10             	add    esp,0x10
c0028f06:	90                   	nop
c0028f07:	83 c4 0c             	add    esp,0xc
c0028f0a:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c0028f0c <ATA::~ATA()>:
c0028f0c:	83 ec 0c             	sub    esp,0xc
c0028f0f:	83 ec 0c             	sub    esp,0xc
c0028f12:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028f16:	e8 cd ff ff ff       	call   c0028ee8 <ATA::~ATA()>
c0028f1b:	83 c4 10             	add    esp,0x10
c0028f1e:	83 ec 08             	sub    esp,0x8
c0028f21:	68 7c 01 00 00       	push   0x17c
c0028f26:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028f2a:	e8 d4 9f fe ff       	call   c0012f03 <operator delete(void*, unsigned long)>
c0028f2f:	83 c4 10             	add    esp,0x10
c0028f32:	83 c4 0c             	add    esp,0xc
c0028f35:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c0028f36 <ATAPI::~ATAPI()>:
c0028f36:	83 ec 0c             	sub    esp,0xc
c0028f39:	ba 04 d1 02 c0       	mov    edx,0xc002d104
c0028f3e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f42:	89 10                	mov    DWORD PTR [eax],edx
c0028f44:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f48:	83 ec 0c             	sub    esp,0xc
c0028f4b:	50                   	push   eax
c0028f4c:	e8 6d b9 fe ff       	call   c00148be <PhysicalDisk::~PhysicalDisk()>
c0028f51:	83 c4 10             	add    esp,0x10
c0028f54:	90                   	nop
c0028f55:	83 c4 0c             	add    esp,0xc
c0028f58:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c0028f5a <ATAPI::~ATAPI()>:
c0028f5a:	83 ec 0c             	sub    esp,0xc
c0028f5d:	83 ec 0c             	sub    esp,0xc
c0028f60:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028f64:	e8 cd ff ff ff       	call   c0028f36 <ATAPI::~ATAPI()>
c0028f69:	83 c4 10             	add    esp,0x10
c0028f6c:	83 ec 08             	sub    esp,0x8
c0028f6f:	68 80 01 00 00       	push   0x180
c0028f74:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028f78:	e8 86 9f fe ff       	call   c0012f03 <operator delete(void*, unsigned long)>
c0028f7d:	83 c4 10             	add    esp,0x10
c0028f80:	83 c4 0c             	add    esp,0xc
c0028f83:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c0028f84 <SATA::~SATA()>:
c0028f84:	83 ec 0c             	sub    esp,0xc
c0028f87:	ba b8 d1 02 c0       	mov    edx,0xc002d1b8
c0028f8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f90:	89 10                	mov    DWORD PTR [eax],edx
c0028f92:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f96:	83 ec 0c             	sub    esp,0xc
c0028f99:	50                   	push   eax
c0028f9a:	e8 1f b9 fe ff       	call   c00148be <PhysicalDisk::~PhysicalDisk()>
c0028f9f:	83 c4 10             	add    esp,0x10
c0028fa2:	90                   	nop
c0028fa3:	83 c4 0c             	add    esp,0xc
c0028fa6:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c0028fa8 <SATA::~SATA()>:
c0028fa8:	83 ec 0c             	sub    esp,0xc
c0028fab:	83 ec 0c             	sub    esp,0xc
c0028fae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028fb2:	e8 cd ff ff ff       	call   c0028f84 <SATA::~SATA()>
c0028fb7:	83 c4 10             	add    esp,0x10
c0028fba:	83 ec 08             	sub    esp,0x8
c0028fbd:	68 7c 01 00 00       	push   0x17c
c0028fc2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028fc6:	e8 38 9f fe ff       	call   c0012f03 <operator delete(void*, unsigned long)>
c0028fcb:	83 c4 10             	add    esp,0x10
c0028fce:	83 c4 0c             	add    esp,0xc
c0028fd1:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c0028fd2 <SATAPI::~SATAPI()>:
c0028fd2:	83 ec 0c             	sub    esp,0xc
c0028fd5:	ba 94 d2 02 c0       	mov    edx,0xc002d294
c0028fda:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028fde:	89 10                	mov    DWORD PTR [eax],edx
c0028fe0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028fe4:	83 ec 0c             	sub    esp,0xc
c0028fe7:	50                   	push   eax
c0028fe8:	e8 d1 b8 fe ff       	call   c00148be <PhysicalDisk::~PhysicalDisk()>
c0028fed:	83 c4 10             	add    esp,0x10
c0028ff0:	90                   	nop
c0028ff1:	83 c4 0c             	add    esp,0xc
c0028ff4:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c0028ff6 <SATAPI::~SATAPI()>:
c0028ff6:	83 ec 0c             	sub    esp,0xc
c0028ff9:	83 ec 0c             	sub    esp,0xc
c0028ffc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029000:	e8 cd ff ff ff       	call   c0028fd2 <SATAPI::~SATAPI()>
c0029005:	83 c4 10             	add    esp,0x10
c0029008:	83 ec 08             	sub    esp,0x8
c002900b:	68 80 01 00 00       	push   0x180
c0029010:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029014:	e8 ea 9e fe ff       	call   c0012f03 <operator delete(void*, unsigned long)>
c0029019:	83 c4 10             	add    esp,0x10
c002901c:	83 c4 0c             	add    esp,0xc
c002901f:	c3                   	ret    

Disassembly of section .text._ZN3AVXD2Ev:

c0029020 <AVX::~AVX()>:
c0029020:	83 ec 0c             	sub    esp,0xc
c0029023:	ba d4 d2 02 c0       	mov    edx,0xc002d2d4
c0029028:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002902c:	89 10                	mov    DWORD PTR [eax],edx
c002902e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029032:	83 ec 0c             	sub    esp,0xc
c0029035:	50                   	push   eax
c0029036:	e8 07 b9 fe ff       	call   c0014942 <FPU::~FPU()>
c002903b:	83 c4 10             	add    esp,0x10
c002903e:	90                   	nop
c002903f:	83 c4 0c             	add    esp,0xc
c0029042:	c3                   	ret    

Disassembly of section .text._ZN3AVXD0Ev:

c0029044 <AVX::~AVX()>:
c0029044:	83 ec 0c             	sub    esp,0xc
c0029047:	83 ec 0c             	sub    esp,0xc
c002904a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002904e:	e8 cd ff ff ff       	call   c0029020 <AVX::~AVX()>
c0029053:	83 c4 10             	add    esp,0x10
c0029056:	83 ec 08             	sub    esp,0x8
c0029059:	68 58 01 00 00       	push   0x158
c002905e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029062:	e8 9c 9e fe ff       	call   c0012f03 <operator delete(void*, unsigned long)>
c0029067:	83 c4 10             	add    esp,0x10
c002906a:	83 c4 0c             	add    esp,0xc
c002906d:	c3                   	ret    

Disassembly of section .text._ZN3MMXD2Ev:

c002906e <MMX::~MMX()>:
c002906e:	83 ec 0c             	sub    esp,0xc
c0029071:	ba 14 d3 02 c0       	mov    edx,0xc002d314
c0029076:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002907a:	89 10                	mov    DWORD PTR [eax],edx
c002907c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029080:	83 ec 0c             	sub    esp,0xc
c0029083:	50                   	push   eax
c0029084:	e8 b9 b8 fe ff       	call   c0014942 <FPU::~FPU()>
c0029089:	83 c4 10             	add    esp,0x10
c002908c:	90                   	nop
c002908d:	83 c4 0c             	add    esp,0xc
c0029090:	c3                   	ret    

Disassembly of section .text._ZN3MMXD0Ev:

c0029092 <MMX::~MMX()>:
c0029092:	83 ec 0c             	sub    esp,0xc
c0029095:	83 ec 0c             	sub    esp,0xc
c0029098:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002909c:	e8 cd ff ff ff       	call   c002906e <MMX::~MMX()>
c00290a1:	83 c4 10             	add    esp,0x10
c00290a4:	83 ec 08             	sub    esp,0x8
c00290a7:	68 58 01 00 00       	push   0x158
c00290ac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00290b0:	e8 4e 9e fe ff       	call   c0012f03 <operator delete(void*, unsigned long)>
c00290b5:	83 c4 10             	add    esp,0x10
c00290b8:	83 c4 0c             	add    esp,0xc
c00290bb:	c3                   	ret    

Disassembly of section .text._ZN3SSED2Ev:

c00290bc <SSE::~SSE()>:
c00290bc:	83 ec 0c             	sub    esp,0xc
c00290bf:	ba 54 d3 02 c0       	mov    edx,0xc002d354
c00290c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00290c8:	89 10                	mov    DWORD PTR [eax],edx
c00290ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00290ce:	83 ec 0c             	sub    esp,0xc
c00290d1:	50                   	push   eax
c00290d2:	e8 6b b8 fe ff       	call   c0014942 <FPU::~FPU()>
c00290d7:	83 c4 10             	add    esp,0x10
c00290da:	90                   	nop
c00290db:	83 c4 0c             	add    esp,0xc
c00290de:	c3                   	ret    

Disassembly of section .text._ZN3SSED0Ev:

c00290e0 <SSE::~SSE()>:
c00290e0:	83 ec 0c             	sub    esp,0xc
c00290e3:	83 ec 0c             	sub    esp,0xc
c00290e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00290ea:	e8 cd ff ff ff       	call   c00290bc <SSE::~SSE()>
c00290ef:	83 c4 10             	add    esp,0x10
c00290f2:	83 ec 08             	sub    esp,0x8
c00290f5:	68 58 01 00 00       	push   0x158
c00290fa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00290fe:	e8 00 9e fe ff       	call   c0012f03 <operator delete(void*, unsigned long)>
c0029103:	83 c4 10             	add    esp,0x10
c0029106:	83 c4 0c             	add    esp,0xc
c0029109:	c3                   	ret    

Disassembly of section .text._ZN3x87D2Ev:

c002910a <x87::~x87()>:
c002910a:	83 ec 0c             	sub    esp,0xc
c002910d:	ba 94 d3 02 c0       	mov    edx,0xc002d394
c0029112:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029116:	89 10                	mov    DWORD PTR [eax],edx
c0029118:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002911c:	83 ec 0c             	sub    esp,0xc
c002911f:	50                   	push   eax
c0029120:	e8 1d b8 fe ff       	call   c0014942 <FPU::~FPU()>
c0029125:	83 c4 10             	add    esp,0x10
c0029128:	90                   	nop
c0029129:	83 c4 0c             	add    esp,0xc
c002912c:	c3                   	ret    

Disassembly of section .text._ZN3x87D0Ev:

c002912e <x87::~x87()>:
c002912e:	83 ec 0c             	sub    esp,0xc
c0029131:	83 ec 0c             	sub    esp,0xc
c0029134:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029138:	e8 cd ff ff ff       	call   c002910a <x87::~x87()>
c002913d:	83 c4 10             	add    esp,0x10
c0029140:	83 ec 08             	sub    esp,0x8
c0029143:	68 58 01 00 00       	push   0x158
c0029148:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002914c:	e8 b2 9d fe ff       	call   c0012f03 <operator delete(void*, unsigned long)>
c0029151:	83 c4 10             	add    esp,0x10
c0029154:	83 c4 0c             	add    esp,0xc
c0029157:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c0029158 <IOAPIC::~IOAPIC()>:
c0029158:	83 ec 0c             	sub    esp,0xc
c002915b:	ba ec d4 02 c0       	mov    edx,0xc002d4ec
c0029160:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029164:	89 10                	mov    DWORD PTR [eax],edx
c0029166:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002916a:	83 ec 0c             	sub    esp,0xc
c002916d:	50                   	push   eax
c002916e:	e8 69 b1 fe ff       	call   c00142dc <Device::~Device()>
c0029173:	83 c4 10             	add    esp,0x10
c0029176:	90                   	nop
c0029177:	83 c4 0c             	add    esp,0xc
c002917a:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c002917c <IOAPIC::~IOAPIC()>:
c002917c:	83 ec 0c             	sub    esp,0xc
c002917f:	83 ec 0c             	sub    esp,0xc
c0029182:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029186:	e8 cd ff ff ff       	call   c0029158 <IOAPIC::~IOAPIC()>
c002918b:	83 c4 10             	add    esp,0x10
c002918e:	83 ec 08             	sub    esp,0x8
c0029191:	68 68 01 00 00       	push   0x168
c0029196:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002919a:	e8 64 9d fe ff       	call   c0012f03 <operator delete(void*, unsigned long)>
c002919f:	83 c4 10             	add    esp,0x10
c00291a2:	83 c4 0c             	add    esp,0xc
c00291a5:	c3                   	ret    

Disassembly of section .text._ZN4APICD2Ev:

c00291a6 <APIC::~APIC()>:
c00291a6:	83 ec 0c             	sub    esp,0xc
c00291a9:	ba a4 d4 02 c0       	mov    edx,0xc002d4a4
c00291ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00291b2:	89 10                	mov    DWORD PTR [eax],edx
c00291b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00291b8:	83 ec 0c             	sub    esp,0xc
c00291bb:	50                   	push   eax
c00291bc:	e8 4b bc fe ff       	call   c0014e0c <InterruptController::~InterruptController()>
c00291c1:	83 c4 10             	add    esp,0x10
c00291c4:	90                   	nop
c00291c5:	83 c4 0c             	add    esp,0xc
c00291c8:	c3                   	ret    

Disassembly of section .text._ZN4APICD0Ev:

c00291ca <APIC::~APIC()>:
c00291ca:	83 ec 0c             	sub    esp,0xc
c00291cd:	83 ec 0c             	sub    esp,0xc
c00291d0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00291d4:	e8 cd ff ff ff       	call   c00291a6 <APIC::~APIC()>
c00291d9:	83 c4 10             	add    esp,0x10
c00291dc:	83 ec 08             	sub    esp,0x8
c00291df:	68 58 21 00 00       	push   0x2158
c00291e4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00291e8:	e8 16 9d fe ff       	call   c0012f03 <operator delete(void*, unsigned long)>
c00291ed:	83 c4 10             	add    esp,0x10
c00291f0:	83 c4 0c             	add    esp,0xc
c00291f3:	c3                   	ret    

Disassembly of section .text._ZN3PICD2Ev:

c00291f4 <PIC::~PIC()>:
c00291f4:	83 ec 0c             	sub    esp,0xc
c00291f7:	ba 3c d5 02 c0       	mov    edx,0xc002d53c
c00291fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029200:	89 10                	mov    DWORD PTR [eax],edx
c0029202:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029206:	83 ec 0c             	sub    esp,0xc
c0029209:	50                   	push   eax
c002920a:	e8 fd bb fe ff       	call   c0014e0c <InterruptController::~InterruptController()>
c002920f:	83 c4 10             	add    esp,0x10
c0029212:	90                   	nop
c0029213:	83 c4 0c             	add    esp,0xc
c0029216:	c3                   	ret    

Disassembly of section .text._ZN3PICD0Ev:

c0029218 <PIC::~PIC()>:
c0029218:	83 ec 0c             	sub    esp,0xc
c002921b:	83 ec 0c             	sub    esp,0xc
c002921e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029222:	e8 cd ff ff ff       	call   c00291f4 <PIC::~PIC()>
c0029227:	83 c4 10             	add    esp,0x10
c002922a:	83 ec 08             	sub    esp,0x8
c002922d:	68 58 21 00 00       	push   0x2158
c0029232:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029236:	e8 c8 9c fe ff       	call   c0012f03 <operator delete(void*, unsigned long)>
c002923b:	83 c4 10             	add    esp,0x10
c002923e:	83 c4 0c             	add    esp,0xc
c0029241:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c0029242 <APICTimer::~APICTimer()>:
c0029242:	83 ec 0c             	sub    esp,0xc
c0029245:	ba 90 d5 02 c0       	mov    edx,0xc002d590
c002924a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002924e:	89 10                	mov    DWORD PTR [eax],edx
c0029250:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029254:	83 ec 0c             	sub    esp,0xc
c0029257:	50                   	push   eax
c0029258:	e8 0b db fe ff       	call   c0016d68 <Timer::~Timer()>
c002925d:	83 c4 10             	add    esp,0x10
c0029260:	90                   	nop
c0029261:	83 c4 0c             	add    esp,0xc
c0029264:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c0029266 <APICTimer::~APICTimer()>:
c0029266:	83 ec 0c             	sub    esp,0xc
c0029269:	83 ec 0c             	sub    esp,0xc
c002926c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029270:	e8 cd ff ff ff       	call   c0029242 <APICTimer::~APICTimer()>
c0029275:	83 c4 10             	add    esp,0x10
c0029278:	83 ec 08             	sub    esp,0x8
c002927b:	68 60 01 00 00       	push   0x160
c0029280:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029284:	e8 7a 9c fe ff       	call   c0012f03 <operator delete(void*, unsigned long)>
c0029289:	83 c4 10             	add    esp,0x10
c002928c:	83 c4 0c             	add    esp,0xc
c002928f:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c0029290 <PIT::~PIT()>:
c0029290:	83 ec 0c             	sub    esp,0xc
c0029293:	ba e0 d5 02 c0       	mov    edx,0xc002d5e0
c0029298:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002929c:	89 10                	mov    DWORD PTR [eax],edx
c002929e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00292a2:	83 ec 0c             	sub    esp,0xc
c00292a5:	50                   	push   eax
c00292a6:	e8 bd da fe ff       	call   c0016d68 <Timer::~Timer()>
c00292ab:	83 c4 10             	add    esp,0x10
c00292ae:	90                   	nop
c00292af:	83 c4 0c             	add    esp,0xc
c00292b2:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c00292b4 <PIT::~PIT()>:
c00292b4:	83 ec 0c             	sub    esp,0xc
c00292b7:	83 ec 0c             	sub    esp,0xc
c00292ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00292be:	e8 cd ff ff ff       	call   c0029290 <PIT::~PIT()>
c00292c3:	83 c4 10             	add    esp,0x10
c00292c6:	83 ec 08             	sub    esp,0x8
c00292c9:	68 5c 01 00 00       	push   0x15c
c00292ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00292d2:	e8 2c 9c fe ff       	call   c0012f03 <operator delete(void*, unsigned long)>
c00292d7:	83 c4 10             	add    esp,0x10
c00292da:	83 c4 0c             	add    esp,0xc
c00292dd:	c3                   	ret    
