
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 07 7f 00 00       	call   c0007f27 <kernel_main>

c0000020 <callGlobalConstructors>:
c0000020:	e8 55 c2 01 00       	call   c001c27a <_init>
c0000025:	c3                   	ret    
c0000026:	bb 16 cd 01 c0       	mov    ebx,0xc001cd16
c000002b:	e9 08 00 00 00       	jmp    c0000038 <callGlobalConstructors.ctors_until_end>

c0000030 <callGlobalConstructors.call_constructor>:
c0000030:	ff 13                	call   DWORD PTR [ebx]
c0000032:	81 c3 04 00 00 00    	add    ebx,0x4

c0000038 <callGlobalConstructors.ctors_until_end>:
c0000038:	81 fb 20 cd 01 c0    	cmp    ebx,0xc001cd20
c000003e:	72 f0                	jb     c0000030 <callGlobalConstructors.call_constructor>
c0000040:	c3                   	ret    
c0000041:	66 90                	xchg   ax,ax
c0000043:	90                   	nop

c0000044 <deregister_tm_clones>:
c0000044:	b8 38 f8 01 c0       	mov    eax,0xc001f838
c0000049:	3d 38 f8 01 c0       	cmp    eax,0xc001f838
c000004e:	74 1c                	je     c000006c <deregister_tm_clones+0x28>
c0000050:	b8 00 00 00 00       	mov    eax,0x0
c0000055:	85 c0                	test   eax,eax
c0000057:	74 13                	je     c000006c <deregister_tm_clones+0x28>
c0000059:	55                   	push   ebp
c000005a:	89 e5                	mov    ebp,esp
c000005c:	83 ec 14             	sub    esp,0x14
c000005f:	68 38 f8 01 c0       	push   0xc001f838
c0000064:	ff d0                	call   eax
c0000066:	83 c4 10             	add    esp,0x10
c0000069:	c9                   	leave  
c000006a:	c3                   	ret    
c000006b:	90                   	nop
c000006c:	c3                   	ret    
c000006d:	8d 76 00             	lea    esi,[esi+0x0]

c0000070 <register_tm_clones>:
c0000070:	b8 38 f8 01 c0       	mov    eax,0xc001f838
c0000075:	2d 38 f8 01 c0       	sub    eax,0xc001f838
c000007a:	c1 f8 02             	sar    eax,0x2
c000007d:	89 c2                	mov    edx,eax
c000007f:	c1 ea 1f             	shr    edx,0x1f
c0000082:	01 d0                	add    eax,edx
c0000084:	d1 f8                	sar    eax,1
c0000086:	74 1c                	je     c00000a4 <register_tm_clones+0x34>
c0000088:	ba 00 00 00 00       	mov    edx,0x0
c000008d:	85 d2                	test   edx,edx
c000008f:	74 13                	je     c00000a4 <register_tm_clones+0x34>
c0000091:	55                   	push   ebp
c0000092:	89 e5                	mov    ebp,esp
c0000094:	83 ec 10             	sub    esp,0x10
c0000097:	50                   	push   eax
c0000098:	68 38 f8 01 c0       	push   0xc001f838
c000009d:	ff d2                	call   edx
c000009f:	83 c4 10             	add    esp,0x10
c00000a2:	c9                   	leave  
c00000a3:	c3                   	ret    
c00000a4:	c3                   	ret    
c00000a5:	8d 76 00             	lea    esi,[esi+0x0]

c00000a8 <__do_global_dtors_aux>:
c00000a8:	80 3d c4 f9 01 c0 00 	cmp    BYTE PTR ds:0xc001f9c4,0x0
c00000af:	75 63                	jne    c0000114 <__do_global_dtors_aux+0x6c>
c00000b1:	55                   	push   ebp
c00000b2:	89 e5                	mov    ebp,esp
c00000b4:	56                   	push   esi
c00000b5:	53                   	push   ebx
c00000b6:	bb 28 cd 01 c0       	mov    ebx,0xc001cd28
c00000bb:	81 eb 24 cd 01 c0    	sub    ebx,0xc001cd24
c00000c1:	c1 fb 02             	sar    ebx,0x2
c00000c4:	4b                   	dec    ebx
c00000c5:	be 24 cd 01 c0       	mov    esi,0xc001cd24
c00000ca:	a1 c8 f9 01 c0       	mov    eax,ds:0xc001f9c8
c00000cf:	39 d8                	cmp    eax,ebx
c00000d1:	73 13                	jae    c00000e6 <__do_global_dtors_aux+0x3e>
c00000d3:	90                   	nop
c00000d4:	40                   	inc    eax
c00000d5:	a3 c8 f9 01 c0       	mov    ds:0xc001f9c8,eax
c00000da:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000dd:	a1 c8 f9 01 c0       	mov    eax,ds:0xc001f9c8
c00000e2:	39 d8                	cmp    eax,ebx
c00000e4:	72 ee                	jb     c00000d4 <__do_global_dtors_aux+0x2c>
c00000e6:	e8 59 ff ff ff       	call   c0000044 <deregister_tm_clones>
c00000eb:	b8 00 00 00 00       	mov    eax,0x0
c00000f0:	85 c0                	test   eax,eax
c00000f2:	74 10                	je     c0000104 <__do_global_dtors_aux+0x5c>
c00000f4:	83 ec 0c             	sub    esp,0xc
c00000f7:	68 38 f8 01 c0       	push   0xc001f838
c00000fc:	e8 ff fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000101:	83 c4 10             	add    esp,0x10
c0000104:	c6 05 c4 f9 01 c0 01 	mov    BYTE PTR ds:0xc001f9c4,0x1
c000010b:	8d 65 f8             	lea    esp,[ebp-0x8]
c000010e:	5b                   	pop    ebx
c000010f:	5e                   	pop    esi
c0000110:	5d                   	pop    ebp
c0000111:	c3                   	ret    
c0000112:	66 90                	xchg   ax,ax
c0000114:	c3                   	ret    
c0000115:	8d 76 00             	lea    esi,[esi+0x0]

c0000118 <frame_dummy>:
c0000118:	b8 00 00 00 00       	mov    eax,0x0
c000011d:	85 c0                	test   eax,eax
c000011f:	74 1f                	je     c0000140 <frame_dummy+0x28>
c0000121:	55                   	push   ebp
c0000122:	89 e5                	mov    ebp,esp
c0000124:	83 ec 10             	sub    esp,0x10
c0000127:	68 cc f9 01 c0       	push   0xc001f9cc
c000012c:	68 38 f8 01 c0       	push   0xc001f838
c0000131:	e8 ca fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000136:	83 c4 10             	add    esp,0x10
c0000139:	c9                   	leave  
c000013a:	e9 31 ff ff ff       	jmp    c0000070 <register_tm_clones>
c000013f:	90                   	nop
c0000140:	e9 2b ff ff ff       	jmp    c0000070 <register_tm_clones>
c0000145:	66 90                	xchg   ax,ax
c0000147:	66 90                	xchg   ax,ax
c0000149:	66 90                	xchg   ax,ax
c000014b:	66 90                	xchg   ax,ax
c000014d:	66 90                	xchg   ax,ax
c000014f:	90                   	nop

c0000150 <manualPCIProbe>:
c0000150:	31 c0                	xor    eax,eax
c0000152:	66 ba f8 0c          	mov    dx,0xcf8
c0000156:	ed                   	in     eax,dx
c0000157:	89 c3                	mov    ebx,eax
c0000159:	b8 00 00 00 80       	mov    eax,0x80000000
c000015e:	ef                   	out    dx,eax
c000015f:	ed                   	in     eax,dx
c0000160:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000165:	75 0a                	jne    c0000171 <manualPCIProbe.noMech1>
c0000167:	b8 01 00 00 00       	mov    eax,0x1
c000016c:	e9 26 00 00 00       	jmp    c0000197 <manualPCIProbe.gotPCI>

c0000171 <manualPCIProbe.noMech1>:
c0000171:	89 d8                	mov    eax,ebx
c0000173:	ef                   	out    dx,eax
c0000174:	66 ba f8 0c          	mov    dx,0xcf8
c0000178:	ec                   	in     al,dx
c0000179:	88 c3                	mov    bl,al
c000017b:	30 c0                	xor    al,al
c000017d:	ee                   	out    dx,al
c000017e:	ec                   	in     al,dx
c000017f:	84 c0                	test   al,al
c0000181:	75 15                	jne    c0000198 <manualPCIProbe.noPCI>
c0000183:	66 ba fa 0c          	mov    dx,0xcfa
c0000187:	ec                   	in     al,dx
c0000188:	88 c7                	mov    bh,al
c000018a:	30 c0                	xor    al,al
c000018c:	ee                   	out    dx,al
c000018d:	ec                   	in     al,dx
c000018e:	84 c0                	test   al,al
c0000190:	75 06                	jne    c0000198 <manualPCIProbe.noPCI>
c0000192:	b8 02 00 00 00       	mov    eax,0x2

c0000197 <manualPCIProbe.gotPCI>:
c0000197:	c3                   	ret    

c0000198 <manualPCIProbe.noPCI>:
c0000198:	31 c0                	xor    eax,eax
c000019a:	c3                   	ret    

c000019b <prepareTramp>:
c000019b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c00001a2:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c00001a9:	50                   	push   eax
c00001aa:	0f 20 d8             	mov    eax,cr3
c00001ad:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c00001b2:	58                   	pop    eax
c00001b3:	c3                   	ret    

c00001b4 <doTPAUSE>:
c00001b4:	fb                   	sti    
c00001b5:	31 c0                	xor    eax,eax
c00001b7:	31 d2                	xor    edx,edx
c00001b9:	66 0f ae f0          	tpause eax
c00001bd:	c3                   	ret    

c00001be <hasLegacyFPU>:
c00001be:	0f 20 c2             	mov    edx,cr0
c00001c1:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c00001c7:	0f 22 c2             	mov    cr0,edx
c00001ca:	db e3                	fninit 
c00001cc:	dd 3d e1 01 00 c0    	fnstsw WORD PTR ds:0xc00001e1
c00001d2:	31 c0                	xor    eax,eax
c00001d4:	66 81 3d e1 01 00 c0 00 00 	cmp    WORD PTR ds:0xc00001e1,0x0
c00001dd:	75 01                	jne    c00001e0 <hasLegacyFPU.nofpu>

c00001df <hasLegacyFPU.hasfpu>:
c00001df:	40                   	inc    eax

c00001e0 <hasLegacyFPU.nofpu>:
c00001e0:	c3                   	ret    

c00001e1 <testword>:
c00001e1:	aa                   	stos   BYTE PTR es:[edi],al
c00001e2:	55                   	push   ebp

c00001e3 <is486>:
c00001e3:	0f 09                	wbinvd 
c00001e5:	31 c0                	xor    eax,eax
c00001e7:	40                   	inc    eax
c00001e8:	c3                   	ret    
c00001e9:	90                   	nop
c00001ea:	90                   	nop
c00001eb:	90                   	nop
c00001ec:	90                   	nop
c00001ed:	90                   	nop
c00001ee:	90                   	nop
c00001ef:	90                   	nop
c00001f0:	90                   	nop
c00001f1:	90                   	nop
c00001f2:	90                   	nop
c00001f3:	90                   	nop
c00001f4:	90                   	nop
c00001f5:	90                   	nop
c00001f6:	90                   	nop
c00001f7:	90                   	nop
c00001f8:	90                   	nop
c00001f9:	90                   	nop
c00001fa:	90                   	nop
c00001fb:	90                   	nop
c00001fc:	90                   	nop
c00001fd:	90                   	nop
c00001fe:	90                   	nop
c00001ff:	90                   	nop
c0000200:	90                   	nop
c0000201:	90                   	nop
c0000202:	90                   	nop
c0000203:	90                   	nop
c0000204:	90                   	nop
c0000205:	90                   	nop
c0000206:	90                   	nop
c0000207:	90                   	nop
c0000208:	90                   	nop
c0000209:	90                   	nop
c000020a:	90                   	nop
c000020b:	90                   	nop
c000020c:	90                   	nop
c000020d:	90                   	nop
c000020e:	90                   	nop
c000020f:	90                   	nop
c0000210:	90                   	nop
c0000211:	90                   	nop
c0000212:	90                   	nop
c0000213:	90                   	nop
c0000214:	90                   	nop
c0000215:	90                   	nop
c0000216:	31 c0                	xor    eax,eax
c0000218:	c3                   	ret    

c0000219 <detectCPUID>:
c0000219:	9c                   	pushf  
c000021a:	9c                   	pushf  
c000021b:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c0000222:	9d                   	popf   
c0000223:	9c                   	pushf  
c0000224:	58                   	pop    eax
c0000225:	33 04 24             	xor    eax,DWORD PTR [esp]
c0000228:	9d                   	popf   
c0000229:	25 00 00 20 00       	and    eax,0x200000
c000022e:	c3                   	ret    

c000022f <goToVM86>:
c000022f:	55                   	push   ebp
c0000230:	89 e5                	mov    ebp,esp
c0000232:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000235:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000238:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c000023b:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000023e:	25 ff ff 00 00       	and    eax,0xffff
c0000243:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000249:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000024f:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000255:	52                   	push   edx
c0000256:	51                   	push   ecx
c0000257:	68 02 02 02 00       	push   0x20202
c000025c:	53                   	push   ebx
c000025d:	50                   	push   eax
c000025e:	cf                   	iret   

c000025f <goToUsermode>:
c000025f:	55                   	push   ebp
c0000260:	89 e5                	mov    ebp,esp
c0000262:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000265:	66 b8 23 00          	mov    ax,0x23
c0000269:	66 8e d8             	mov    ds,ax
c000026c:	66 8e c0             	mov    es,ax
c000026f:	66 8e e0             	mov    fs,ax
c0000272:	66 8e e8             	mov    gs,ax
c0000275:	89 e0                	mov    eax,esp
c0000277:	68 23 00 00 00       	push   0x23
c000027c:	50                   	push   eax
c000027d:	68 02 02 00 00       	push   0x202
c0000282:	68 1b 00 00 00       	push   0x1b
c0000287:	53                   	push   ebx
c0000288:	cf                   	iret   

c0000289 <switchToThreadASMFirstTime>:
c0000289:	9c                   	pushf  
c000028a:	fa                   	cli    
c000028b:	50                   	push   eax
c000028c:	53                   	push   ebx
c000028d:	51                   	push   ecx
c000028e:	52                   	push   edx
c000028f:	56                   	push   esi
c0000290:	57                   	push   edi
c0000291:	55                   	push   ebp
c0000292:	e9 11 00 00 00       	jmp    c00002a8 <commonThreadSwitch>

c0000297 <switchToThreadASM>:
c0000297:	9c                   	pushf  
c0000298:	50                   	push   eax
c0000299:	53                   	push   ebx
c000029a:	51                   	push   ecx
c000029b:	52                   	push   edx
c000029c:	56                   	push   esi
c000029d:	57                   	push   edi
c000029e:	55                   	push   ebp
c000029f:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c00002a5:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c00002a8 <commonThreadSwitch>:
c00002a8:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00002ac:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c00002b2:	8b 06                	mov    eax,DWORD PTR [esi]
c00002b4:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c00002b7:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c00002ba:	0f 20 d9             	mov    ecx,cr3
c00002bd:	39 c8                	cmp    eax,ecx
c00002bf:	74 03                	je     c00002c4 <commonThreadSwitch.doneVAS>
c00002c1:	0f 22 d8             	mov    cr3,eax

c00002c4 <commonThreadSwitch.doneVAS>:
c00002c4:	85 d2                	test   edx,edx
c00002c6:	75 11                	jne    c00002d9 <commonThreadSwitch.firstTime>
c00002c8:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c00002cb:	e8 64 30 01 00       	call   c0013334 <changeTSS>
c00002d0:	5d                   	pop    ebp
c00002d1:	5f                   	pop    edi
c00002d2:	5e                   	pop    esi
c00002d3:	5a                   	pop    edx
c00002d4:	59                   	pop    ecx
c00002d5:	5b                   	pop    ebx
c00002d6:	58                   	pop    eax
c00002d7:	9d                   	popf   
c00002d8:	c3                   	ret    

c00002d9 <commonThreadSwitch.firstTime>:
c00002d9:	fa                   	cli    
c00002da:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00002dd:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00002e2:	60                   	pusha  
c00002e3:	e8 08 a7 00 00       	call   c000a9f0 <mapVASFirstTime>
c00002e8:	61                   	popa   
c00002e9:	89 c4                	mov    esp,eax
c00002eb:	56                   	push   esi
c00002ec:	52                   	push   edx
c00002ed:	e8 42 30 01 00       	call   c0013334 <changeTSS>
c00002f2:	5a                   	pop    edx
c00002f3:	5e                   	pop    esi
c00002f4:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00002fb:	5d                   	pop    ebp
c00002fc:	5f                   	pop    edi
c00002fd:	5e                   	pop    esi
c00002fe:	59                   	pop    ecx
c00002ff:	59                   	pop    ecx
c0000300:	5b                   	pop    ebx
c0000301:	58                   	pop    eax
c0000302:	81 c4 04 00 00 00    	add    esp,0x4
c0000308:	6a 02                	push   0x2
c000030a:	9d                   	popf   
c000030b:	52                   	push   edx
c000030c:	e8 13 35 01 00       	call   c0013824 <taskStartupFunction>
c0000311:	5a                   	pop    edx
c0000312:	50                   	push   eax
c0000313:	ff d2                	call   edx
c0000315:	e8 62 3b 01 00       	call   c0013e7c <taskReturned>
c000031a:	e9 fb ff ff ff       	jmp    c000031a <commonThreadSwitch.firstTime+0x41>

c000031f <asmQuickAcquireLock>:
c000031f:	55                   	push   ebp
c0000320:	89 e5                	mov    ebp,esp
c0000322:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000325 <asmQuickAcquireLock.retry>:
c0000325:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c000032a:	72 02                	jb     c000032e <asmQuickAcquireLock.spin_with_pause>
c000032c:	fa                   	cli    
c000032d:	c3                   	ret    

c000032e <asmQuickAcquireLock.spin_with_pause>:
c000032e:	f3 90                	pause  
c0000330:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000336:	75 f6                	jne    c000032e <asmQuickAcquireLock.spin_with_pause>
c0000338:	e9 e8 ff ff ff       	jmp    c0000325 <asmQuickAcquireLock.retry>

c000033d <asmQuickReleaseLock>:
c000033d:	55                   	push   ebp
c000033e:	89 e5                	mov    ebp,esp
c0000340:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0000347:	5d                   	pop    ebp
c0000348:	c3                   	ret    

c0000349 <asmAcquireLock>:
c0000349:	55                   	push   ebp
c000034a:	89 e5                	mov    ebp,esp
c000034c:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000034f <asmAcquireLock.retry>:
c000034f:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000354:	72 05                	jb     c000035b <asmAcquireLock.spin_with_pause>
c0000356:	9c                   	pushf  
c0000357:	58                   	pop    eax
c0000358:	fa                   	cli    
c0000359:	5d                   	pop    ebp
c000035a:	c3                   	ret    

c000035b <asmAcquireLock.spin_with_pause>:
c000035b:	f3 90                	pause  
c000035d:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000363:	75 f6                	jne    c000035b <asmAcquireLock.spin_with_pause>
c0000365:	e9 e5 ff ff ff       	jmp    c000034f <asmAcquireLock.retry>

c000036a <asmReleaseLock>:
c000036a:	55                   	push   ebp
c000036b:	89 e5                	mov    ebp,esp
c000036d:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000370:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000373:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0000379:	52                   	push   edx
c000037a:	9d                   	popf   
c000037b:	5d                   	pop    ebp
c000037c:	c3                   	ret    

c000037d <loadGDT>:
c000037d:	0f 01 15 4c 08 02 c0 	lgdtd  ds:0xc002084c
c0000384:	66 b8 10 00          	mov    ax,0x10
c0000388:	66 8e d8             	mov    ds,ax
c000038b:	66 8e c0             	mov    es,ax
c000038e:	66 8e e0             	mov    fs,ax
c0000391:	66 8e e8             	mov    gs,ax
c0000394:	66 8e d0             	mov    ss,ax
c0000397:	e9 00 00 00 00       	jmp    c000039c <flush2>

c000039c <flush2>:
c000039c:	c3                   	ret    

c000039d <memcpy>:
c000039d:	e9 91 6b 00 00       	jmp    c0006f33 <__not_memcpy>
c00003a2:	66 90                	xchg   ax,ax
c00003a4:	66 90                	xchg   ax,ax
c00003a6:	66 90                	xchg   ax,ax
c00003a8:	66 90                	xchg   ax,ax
c00003aa:	66 90                	xchg   ax,ax
c00003ac:	66 90                	xchg   ax,ax
c00003ae:	66 90                	xchg   ax,ax

c00003b0 <memcmp>:
c00003b0:	56                   	push   esi
c00003b1:	53                   	push   ebx
c00003b2:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00003b6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00003ba:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00003be:	85 f6                	test   esi,esi
c00003c0:	74 1c                	je     c00003de <memcmp+0x2e>
c00003c2:	8a 08                	mov    cl,BYTE PTR [eax]
c00003c4:	8a 1a                	mov    bl,BYTE PTR [edx]
c00003c6:	38 cb                	cmp    bl,cl
c00003c8:	75 26                	jne    c00003f0 <memcmp+0x40>
c00003ca:	01 c6                	add    esi,eax
c00003cc:	eb 0a                	jmp    c00003d8 <memcmp+0x28>
c00003ce:	66 90                	xchg   ax,ax
c00003d0:	8a 08                	mov    cl,BYTE PTR [eax]
c00003d2:	8a 1a                	mov    bl,BYTE PTR [edx]
c00003d4:	38 d9                	cmp    cl,bl
c00003d6:	75 18                	jne    c00003f0 <memcmp+0x40>
c00003d8:	40                   	inc    eax
c00003d9:	42                   	inc    edx
c00003da:	39 f0                	cmp    eax,esi
c00003dc:	75 f2                	jne    c00003d0 <memcmp+0x20>
c00003de:	31 c0                	xor    eax,eax
c00003e0:	5b                   	pop    ebx
c00003e1:	5e                   	pop    esi
c00003e2:	c3                   	ret    
c00003e3:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00003e9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00003f0:	81 e3 ff 00 00 00    	and    ebx,0xff
c00003f6:	31 c0                	xor    eax,eax
c00003f8:	88 c8                	mov    al,cl
c00003fa:	29 d8                	sub    eax,ebx
c00003fc:	5b                   	pop    ebx
c00003fd:	5e                   	pop    esi
c00003fe:	c3                   	ret    
c00003ff:	90                   	nop

c0000400 <memmove>:
c0000400:	55                   	push   ebp
c0000401:	57                   	push   edi
c0000402:	56                   	push   esi
c0000403:	53                   	push   ebx
c0000404:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0000408:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000040c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0000410:	39 dd                	cmp    ebp,ebx
c0000412:	0f 83 98 00 00 00    	jae    c00004b0 <memmove+0xb0>
c0000418:	85 d2                	test   edx,edx
c000041a:	0f 84 7c 00 00 00    	je     c000049c <memmove+0x9c>
c0000420:	8d 4b 04             	lea    ecx,[ebx+0x4]
c0000423:	8d 75 04             	lea    esi,[ebp+0x4]
c0000426:	39 cd                	cmp    ebp,ecx
c0000428:	0f 93 c1             	setae  cl
c000042b:	39 f3                	cmp    ebx,esi
c000042d:	0f 93 c0             	setae  al
c0000430:	89 c6                	mov    esi,eax
c0000432:	09 ce                	or     esi,ecx
c0000434:	8d 4a ff             	lea    ecx,[edx-0x1]
c0000437:	89 f0                	mov    eax,esi
c0000439:	83 f9 0c             	cmp    ecx,0xc
c000043c:	0f 97 c1             	seta   cl
c000043f:	84 c8                	test   al,cl
c0000441:	0f 84 89 00 00 00    	je     c00004d0 <memmove+0xd0>
c0000447:	89 e9                	mov    ecx,ebp
c0000449:	09 d9                	or     ecx,ebx
c000044b:	83 e1 03             	and    ecx,0x3
c000044e:	0f 85 7c 00 00 00    	jne    c00004d0 <memmove+0xd0>
c0000454:	89 d7                	mov    edi,edx
c0000456:	89 d9                	mov    ecx,ebx
c0000458:	83 e7 fc             	and    edi,0xfffffffc
c000045b:	89 ee                	mov    esi,ebp
c000045d:	01 df                	add    edi,ebx
c000045f:	90                   	nop
c0000460:	8b 01                	mov    eax,DWORD PTR [ecx]
c0000462:	83 c6 04             	add    esi,0x4
c0000465:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c0000468:	83 c1 04             	add    ecx,0x4
c000046b:	39 f9                	cmp    ecx,edi
c000046d:	75 f1                	jne    c0000460 <memmove+0x60>
c000046f:	89 d1                	mov    ecx,edx
c0000471:	89 d7                	mov    edi,edx
c0000473:	83 e1 fc             	and    ecx,0xfffffffc
c0000476:	29 cf                	sub    edi,ecx
c0000478:	01 cb                	add    ebx,ecx
c000047a:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c000047e:	39 ca                	cmp    edx,ecx
c0000480:	74 1a                	je     c000049c <memmove+0x9c>
c0000482:	8a 03                	mov    al,BYTE PTR [ebx]
c0000484:	83 ff 01             	cmp    edi,0x1
c0000487:	88 06                	mov    BYTE PTR [esi],al
c0000489:	74 11                	je     c000049c <memmove+0x9c>
c000048b:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000048e:	83 ff 02             	cmp    edi,0x2
c0000491:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000494:	74 06                	je     c000049c <memmove+0x9c>
c0000496:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000499:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c000049c:	5b                   	pop    ebx
c000049d:	89 e8                	mov    eax,ebp
c000049f:	5e                   	pop    esi
c00004a0:	5f                   	pop    edi
c00004a1:	5d                   	pop    ebp
c00004a2:	c3                   	ret    
c00004a3:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00004a9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00004b0:	76 ea                	jbe    c000049c <memmove+0x9c>
c00004b2:	85 d2                	test   edx,edx
c00004b4:	74 e6                	je     c000049c <memmove+0x9c>
c00004b6:	4b                   	dec    ebx
c00004b7:	8d 4d ff             	lea    ecx,[ebp-0x1]
c00004ba:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00004c0:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c00004c3:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c00004c6:	4a                   	dec    edx
c00004c7:	75 f7                	jne    c00004c0 <memmove+0xc0>
c00004c9:	5b                   	pop    ebx
c00004ca:	89 e8                	mov    eax,ebp
c00004cc:	5e                   	pop    esi
c00004cd:	5f                   	pop    edi
c00004ce:	5d                   	pop    ebp
c00004cf:	c3                   	ret    
c00004d0:	01 ea                	add    edx,ebp
c00004d2:	89 e9                	mov    ecx,ebp
c00004d4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00004da:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c00004e0:	8a 03                	mov    al,BYTE PTR [ebx]
c00004e2:	41                   	inc    ecx
c00004e3:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c00004e6:	43                   	inc    ebx
c00004e7:	39 d1                	cmp    ecx,edx
c00004e9:	75 f5                	jne    c00004e0 <memmove+0xe0>
c00004eb:	eb af                	jmp    c000049c <memmove+0x9c>
c00004ed:	8d 76 00             	lea    esi,[esi+0x0]

c00004f0 <memset>:
c00004f0:	57                   	push   edi
c00004f1:	53                   	push   ebx
c00004f2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00004f6:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00004fa:	85 d2                	test   edx,edx
c00004fc:	74 1f                	je     c000051d <memset+0x2d>
c00004fe:	31 c0                	xor    eax,eax
c0000500:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0000504:	88 c4                	mov    ah,al
c0000506:	89 c1                	mov    ecx,eax
c0000508:	c1 e1 10             	shl    ecx,0x10
c000050b:	09 c8                	or     eax,ecx
c000050d:	83 fa 04             	cmp    edx,0x4
c0000510:	73 1e                	jae    c0000530 <memset+0x40>
c0000512:	85 d2                	test   edx,edx
c0000514:	74 07                	je     c000051d <memset+0x2d>
c0000516:	88 03                	mov    BYTE PTR [ebx],al
c0000518:	f6 c2 02             	test   dl,0x2
c000051b:	75 30                	jne    c000054d <memset+0x5d>
c000051d:	89 d8                	mov    eax,ebx
c000051f:	5b                   	pop    ebx
c0000520:	5f                   	pop    edi
c0000521:	c3                   	ret    
c0000522:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000529:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000530:	89 03                	mov    DWORD PTR [ebx],eax
c0000532:	8d 7b 04             	lea    edi,[ebx+0x4]
c0000535:	89 d9                	mov    ecx,ebx
c0000537:	83 e7 fc             	and    edi,0xfffffffc
c000053a:	89 44 13 fc          	mov    DWORD PTR [ebx+edx*1-0x4],eax
c000053e:	29 f9                	sub    ecx,edi
c0000540:	01 d1                	add    ecx,edx
c0000542:	c1 e9 02             	shr    ecx,0x2
c0000545:	fc                   	cld    
c0000546:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0000548:	89 d8                	mov    eax,ebx
c000054a:	5b                   	pop    ebx
c000054b:	5f                   	pop    edi
c000054c:	c3                   	ret    
c000054d:	66 89 44 13 fe       	mov    WORD PTR [ebx+edx*1-0x2],ax
c0000552:	eb c9                	jmp    c000051d <memset+0x2d>
c0000554:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000055a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000560 <strlen>:
c0000560:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000564:	31 c0                	xor    eax,eax
c0000566:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c0000569:	74 15                	je     c0000580 <strlen+0x20>
c000056b:	90                   	nop
c000056c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000570:	40                   	inc    eax
c0000571:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c0000575:	75 f9                	jne    c0000570 <strlen+0x10>
c0000577:	c3                   	ret    
c0000578:	90                   	nop
c0000579:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000580:	c3                   	ret    
c0000581:	eb 0d                	jmp    c0000590 <strpbrk>
c0000583:	90                   	nop
c0000584:	90                   	nop
c0000585:	90                   	nop
c0000586:	90                   	nop
c0000587:	90                   	nop
c0000588:	90                   	nop
c0000589:	90                   	nop
c000058a:	90                   	nop
c000058b:	90                   	nop
c000058c:	90                   	nop
c000058d:	90                   	nop
c000058e:	90                   	nop
c000058f:	90                   	nop

c0000590 <strpbrk>:
c0000590:	57                   	push   edi
c0000591:	56                   	push   esi
c0000592:	53                   	push   ebx
c0000593:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000597:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000059b:	8a 1e                	mov    bl,BYTE PTR [esi]
c000059d:	84 db                	test   bl,bl
c000059f:	74 21                	je     c00005c2 <strpbrk+0x32>
c00005a1:	8a 07                	mov    al,BYTE PTR [edi]
c00005a3:	84 c0                	test   al,al
c00005a5:	74 14                	je     c00005bb <strpbrk+0x2b>
c00005a7:	38 d8                	cmp    al,bl
c00005a9:	74 19                	je     c00005c4 <strpbrk+0x34>
c00005ab:	89 fa                	mov    edx,edi
c00005ad:	eb 05                	jmp    c00005b4 <strpbrk+0x24>
c00005af:	90                   	nop
c00005b0:	38 d9                	cmp    cl,bl
c00005b2:	74 10                	je     c00005c4 <strpbrk+0x34>
c00005b4:	42                   	inc    edx
c00005b5:	8a 0a                	mov    cl,BYTE PTR [edx]
c00005b7:	84 c9                	test   cl,cl
c00005b9:	75 f5                	jne    c00005b0 <strpbrk+0x20>
c00005bb:	46                   	inc    esi
c00005bc:	8a 1e                	mov    bl,BYTE PTR [esi]
c00005be:	84 db                	test   bl,bl
c00005c0:	75 e1                	jne    c00005a3 <strpbrk+0x13>
c00005c2:	31 f6                	xor    esi,esi
c00005c4:	89 f0                	mov    eax,esi
c00005c6:	5b                   	pop    ebx
c00005c7:	5e                   	pop    esi
c00005c8:	5f                   	pop    edi
c00005c9:	c3                   	ret    
c00005ca:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]

c00005d0 <strtok>:
c00005d0:	56                   	push   esi
c00005d1:	53                   	push   ebx
c00005d2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00005d6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00005da:	85 db                	test   ebx,ebx
c00005dc:	75 07                	jne    c00005e5 <strtok+0x15>
c00005de:	eb 30                	jmp    c0000610 <strtok+0x40>
c00005e0:	43                   	inc    ebx
c00005e1:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c00005e5:	56                   	push   esi
c00005e6:	53                   	push   ebx
c00005e7:	e8 a4 ff ff ff       	call   c0000590 <strpbrk>
c00005ec:	5a                   	pop    edx
c00005ed:	a3 e4 f9 01 c0       	mov    ds:0xc001f9e4,eax
c00005f2:	59                   	pop    ecx
c00005f3:	39 d8                	cmp    eax,ebx
c00005f5:	74 e9                	je     c00005e0 <strtok+0x10>
c00005f7:	85 c0                	test   eax,eax
c00005f9:	74 1f                	je     c000061a <strtok+0x4a>
c00005fb:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00005fe:	8d 50 01             	lea    edx,[eax+0x1]
c0000601:	89 d8                	mov    eax,ebx
c0000603:	89 15 e4 f9 01 c0    	mov    DWORD PTR ds:0xc001f9e4,edx
c0000609:	5b                   	pop    ebx
c000060a:	5e                   	pop    esi
c000060b:	c3                   	ret    
c000060c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000610:	8b 1d e4 f9 01 c0    	mov    ebx,DWORD PTR ds:0xc001f9e4
c0000616:	85 db                	test   ebx,ebx
c0000618:	75 cb                	jne    c00005e5 <strtok+0x15>
c000061a:	31 c0                	xor    eax,eax
c000061c:	5b                   	pop    ebx
c000061d:	5e                   	pop    esi
c000061e:	c3                   	ret    
c000061f:	90                   	nop

c0000620 <strcpy>:
c0000620:	53                   	push   ebx
c0000621:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000625:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000629:	89 c3                	mov    ebx,eax
c000062b:	8a 11                	mov    dl,BYTE PTR [ecx]
c000062d:	84 d2                	test   dl,dl
c000062f:	74 19                	je     c000064a <strcpy+0x2a>
c0000631:	eb 0d                	jmp    c0000640 <strcpy+0x20>
c0000633:	90                   	nop
c0000634:	90                   	nop
c0000635:	90                   	nop
c0000636:	90                   	nop
c0000637:	90                   	nop
c0000638:	90                   	nop
c0000639:	90                   	nop
c000063a:	90                   	nop
c000063b:	90                   	nop
c000063c:	90                   	nop
c000063d:	90                   	nop
c000063e:	90                   	nop
c000063f:	90                   	nop
c0000640:	88 13                	mov    BYTE PTR [ebx],dl
c0000642:	41                   	inc    ecx
c0000643:	43                   	inc    ebx
c0000644:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000646:	84 d2                	test   dl,dl
c0000648:	75 f6                	jne    c0000640 <strcpy+0x20>
c000064a:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000064d:	5b                   	pop    ebx
c000064e:	c3                   	ret    
c000064f:	90                   	nop

c0000650 <strncpy>:
c0000650:	57                   	push   edi
c0000651:	56                   	push   esi
c0000652:	53                   	push   ebx
c0000653:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0000657:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000065b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000065f:	85 ff                	test   edi,edi
c0000661:	74 3e                	je     c00006a1 <strncpy+0x51>
c0000663:	8a 1e                	mov    bl,BYTE PTR [esi]
c0000665:	8d 47 ff             	lea    eax,[edi-0x1]
c0000668:	8d 4a 01             	lea    ecx,[edx+0x1]
c000066b:	88 1a                	mov    BYTE PTR [edx],bl
c000066d:	84 db                	test   bl,bl
c000066f:	74 3f                	je     c00006b0 <strncpy+0x60>
c0000671:	85 c0                	test   eax,eax
c0000673:	74 2c                	je     c00006a1 <strncpy+0x51>
c0000675:	8a 5e 01             	mov    bl,BYTE PTR [esi+0x1]
c0000678:	8d 47 fe             	lea    eax,[edi-0x2]
c000067b:	8d 4a 02             	lea    ecx,[edx+0x2]
c000067e:	8d 7e 02             	lea    edi,[esi+0x2]
c0000681:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0000684:	84 db                	test   bl,bl
c0000686:	75 15                	jne    c000069d <strncpy+0x4d>
c0000688:	eb 26                	jmp    c00006b0 <strncpy+0x60>
c000068a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000690:	47                   	inc    edi
c0000691:	41                   	inc    ecx
c0000692:	8a 5f ff             	mov    bl,BYTE PTR [edi-0x1]
c0000695:	48                   	dec    eax
c0000696:	88 59 ff             	mov    BYTE PTR [ecx-0x1],bl
c0000699:	84 db                	test   bl,bl
c000069b:	74 13                	je     c00006b0 <strncpy+0x60>
c000069d:	85 c0                	test   eax,eax
c000069f:	75 ef                	jne    c0000690 <strncpy+0x40>
c00006a1:	5b                   	pop    ebx
c00006a2:	89 d0                	mov    eax,edx
c00006a4:	5e                   	pop    esi
c00006a5:	5f                   	pop    edi
c00006a6:	c3                   	ret    
c00006a7:	89 f6                	mov    esi,esi
c00006a9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00006b0:	85 c0                	test   eax,eax
c00006b2:	74 ed                	je     c00006a1 <strncpy+0x51>
c00006b4:	83 f8 04             	cmp    eax,0x4
c00006b7:	73 17                	jae    c00006d0 <strncpy+0x80>
c00006b9:	85 c0                	test   eax,eax
c00006bb:	74 e4                	je     c00006a1 <strncpy+0x51>
c00006bd:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c00006c0:	a8 02                	test   al,0x2
c00006c2:	74 dd                	je     c00006a1 <strncpy+0x51>
c00006c4:	66 c7 44 01 fe 00 00 	mov    WORD PTR [ecx+eax*1-0x2],0x0
c00006cb:	eb d4                	jmp    c00006a1 <strncpy+0x51>
c00006cd:	8d 76 00             	lea    esi,[esi+0x0]
c00006d0:	c7 01 00 00 00 00    	mov    DWORD PTR [ecx],0x0
c00006d6:	8d 79 04             	lea    edi,[ecx+0x4]
c00006d9:	c7 44 01 fc 00 00 00 00 	mov    DWORD PTR [ecx+eax*1-0x4],0x0
c00006e1:	83 e7 fc             	and    edi,0xfffffffc
c00006e4:	29 f9                	sub    ecx,edi
c00006e6:	01 c1                	add    ecx,eax
c00006e8:	c1 e9 02             	shr    ecx,0x2
c00006eb:	fc                   	cld    
c00006ec:	31 c0                	xor    eax,eax
c00006ee:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00006f0:	89 d0                	mov    eax,edx
c00006f2:	5b                   	pop    ebx
c00006f3:	5e                   	pop    esi
c00006f4:	5f                   	pop    edi
c00006f5:	c3                   	ret    
c00006f6:	8d 76 00             	lea    esi,[esi+0x0]
c00006f9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000700 <strcmp>:
c0000700:	56                   	push   esi
c0000701:	53                   	push   ebx
c0000702:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0000706:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000070a:	8a 16                	mov    dl,BYTE PTR [esi]
c000070c:	8a 0b                	mov    cl,BYTE PTR [ebx]
c000070e:	38 d1                	cmp    cl,dl
c0000710:	75 1d                	jne    c000072f <strcmp+0x2f>
c0000712:	84 c9                	test   cl,cl
c0000714:	74 2a                	je     c0000740 <strcmp+0x40>
c0000716:	b8 01 00 00 00       	mov    eax,0x1
c000071b:	eb 08                	jmp    c0000725 <strcmp+0x25>
c000071d:	8d 76 00             	lea    esi,[esi+0x0]
c0000720:	40                   	inc    eax
c0000721:	84 d2                	test   dl,dl
c0000723:	74 1b                	je     c0000740 <strcmp+0x40>
c0000725:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c0000728:	8a 0c 03             	mov    cl,BYTE PTR [ebx+eax*1]
c000072b:	38 ca                	cmp    dl,cl
c000072d:	74 f1                	je     c0000720 <strcmp+0x20>
c000072f:	31 c0                	xor    eax,eax
c0000731:	81 e1 ff 00 00 00    	and    ecx,0xff
c0000737:	88 d0                	mov    al,dl
c0000739:	5b                   	pop    ebx
c000073a:	29 c8                	sub    eax,ecx
c000073c:	5e                   	pop    esi
c000073d:	c3                   	ret    
c000073e:	66 90                	xchg   ax,ax
c0000740:	31 c0                	xor    eax,eax
c0000742:	5b                   	pop    ebx
c0000743:	5e                   	pop    esi
c0000744:	c3                   	ret    
c0000745:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000749:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000750 <strchr>:
c0000750:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000754:	8a 10                	mov    dl,BYTE PTR [eax]
c0000756:	84 d2                	test   dl,dl
c0000758:	74 21                	je     c000077b <strchr+0x2b>
c000075a:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c000075e:	38 ca                	cmp    dl,cl
c0000760:	75 12                	jne    c0000774 <strchr+0x24>
c0000762:	eb 1a                	jmp    c000077e <strchr+0x2e>
c0000764:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000076a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0000770:	38 ca                	cmp    dl,cl
c0000772:	74 09                	je     c000077d <strchr+0x2d>
c0000774:	40                   	inc    eax
c0000775:	8a 10                	mov    dl,BYTE PTR [eax]
c0000777:	84 d2                	test   dl,dl
c0000779:	75 f5                	jne    c0000770 <strchr+0x20>
c000077b:	31 c0                	xor    eax,eax
c000077d:	c3                   	ret    
c000077e:	c3                   	ret    
c000077f:	90                   	nop

c0000780 <strncmp>:
c0000780:	57                   	push   edi
c0000781:	56                   	push   esi
c0000782:	53                   	push   ebx
c0000783:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0000787:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000078b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000078f:	85 ff                	test   edi,edi
c0000791:	74 2f                	je     c00007c2 <strncmp+0x42>
c0000793:	8a 16                	mov    dl,BYTE PTR [esi]
c0000795:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000797:	38 d1                	cmp    cl,dl
c0000799:	75 35                	jne    c00007d0 <strncmp+0x50>
c000079b:	8d 46 01             	lea    eax,[esi+0x1]
c000079e:	84 c9                	test   cl,cl
c00007a0:	74 20                	je     c00007c2 <strncmp+0x42>
c00007a2:	01 fe                	add    esi,edi
c00007a4:	eb 17                	jmp    c00007bd <strncmp+0x3d>
c00007a6:	8d 76 00             	lea    esi,[esi+0x0]
c00007a9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00007b0:	8a 10                	mov    dl,BYTE PTR [eax]
c00007b2:	8a 0b                	mov    cl,BYTE PTR [ebx]
c00007b4:	38 ca                	cmp    dl,cl
c00007b6:	75 18                	jne    c00007d0 <strncmp+0x50>
c00007b8:	40                   	inc    eax
c00007b9:	84 d2                	test   dl,dl
c00007bb:	74 05                	je     c00007c2 <strncmp+0x42>
c00007bd:	43                   	inc    ebx
c00007be:	39 c6                	cmp    esi,eax
c00007c0:	75 ee                	jne    c00007b0 <strncmp+0x30>
c00007c2:	5b                   	pop    ebx
c00007c3:	31 c0                	xor    eax,eax
c00007c5:	5e                   	pop    esi
c00007c6:	5f                   	pop    edi
c00007c7:	c3                   	ret    
c00007c8:	90                   	nop
c00007c9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00007d0:	5b                   	pop    ebx
c00007d1:	31 c0                	xor    eax,eax
c00007d3:	81 e1 ff 00 00 00    	and    ecx,0xff
c00007d9:	88 d0                	mov    al,dl
c00007db:	5e                   	pop    esi
c00007dc:	29 c8                	sub    eax,ecx
c00007de:	5f                   	pop    edi
c00007df:	c3                   	ret    

c00007e0 <strcat>:
c00007e0:	56                   	push   esi
c00007e1:	53                   	push   ebx
c00007e2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00007e6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00007ea:	89 c3                	mov    ebx,eax
c00007ec:	eb 04                	jmp    c00007f2 <strcat+0x12>
c00007ee:	66 90                	xchg   ax,ax
c00007f0:	89 d3                	mov    ebx,edx
c00007f2:	8d 53 01             	lea    edx,[ebx+0x1]
c00007f5:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c00007f9:	75 f5                	jne    c00007f0 <strcat+0x10>
c00007fb:	31 d2                	xor    edx,edx
c00007fd:	8d 76 00             	lea    esi,[esi+0x0]
c0000800:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c0000803:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c0000806:	42                   	inc    edx
c0000807:	84 c9                	test   cl,cl
c0000809:	75 f5                	jne    c0000800 <strcat+0x20>
c000080b:	5b                   	pop    ebx
c000080c:	5e                   	pop    esi
c000080d:	c3                   	ret    
c000080e:	66 90                	xchg   ax,ax

c0000810 <strncat>:
c0000810:	56                   	push   esi
c0000811:	53                   	push   ebx
c0000812:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000816:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000081a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000081e:	85 f6                	test   esi,esi
c0000820:	74 2e                	je     c0000850 <strncat+0x40>
c0000822:	89 c2                	mov    edx,eax
c0000824:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000082a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0000830:	42                   	inc    edx
c0000831:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000835:	75 f9                	jne    c0000830 <strncat+0x20>
c0000837:	01 ce                	add    esi,ecx
c0000839:	eb 0a                	jmp    c0000845 <strncat+0x35>
c000083b:	90                   	nop
c000083c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000840:	39 f1                	cmp    ecx,esi
c0000842:	74 1c                	je     c0000860 <strncat+0x50>
c0000844:	42                   	inc    edx
c0000845:	41                   	inc    ecx
c0000846:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c0000849:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c000084c:	84 db                	test   bl,bl
c000084e:	75 f0                	jne    c0000840 <strncat+0x30>
c0000850:	5b                   	pop    ebx
c0000851:	5e                   	pop    esi
c0000852:	c3                   	ret    
c0000853:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000859:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000860:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0000863:	5b                   	pop    ebx
c0000864:	5e                   	pop    esi
c0000865:	c3                   	ret    
c0000866:	8d 76 00             	lea    esi,[esi+0x0]
c0000869:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000870 <strstr>:
c0000870:	57                   	push   edi
c0000871:	56                   	push   esi
c0000872:	53                   	push   ebx
c0000873:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000877:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000087b:	57                   	push   edi
c000087c:	e8 df fc ff ff       	call   c0000560 <strlen>
c0000881:	59                   	pop    ecx
c0000882:	85 c0                	test   eax,eax
c0000884:	74 3a                	je     c00008c0 <strstr+0x50>
c0000886:	89 c6                	mov    esi,eax
c0000888:	eb 16                	jmp    c00008a0 <strstr+0x30>
c000088a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000890:	56                   	push   esi
c0000891:	57                   	push   edi
c0000892:	53                   	push   ebx
c0000893:	e8 18 fb ff ff       	call   c00003b0 <memcmp>
c0000898:	83 c4 0c             	add    esp,0xc
c000089b:	85 c0                	test   eax,eax
c000089d:	74 21                	je     c00008c0 <strstr+0x50>
c000089f:	43                   	inc    ebx
c00008a0:	53                   	push   ebx
c00008a1:	e8 ba fc ff ff       	call   c0000560 <strlen>
c00008a6:	5a                   	pop    edx
c00008a7:	39 f0                	cmp    eax,esi
c00008a9:	73 e5                	jae    c0000890 <strstr+0x20>
c00008ab:	5b                   	pop    ebx
c00008ac:	31 c0                	xor    eax,eax
c00008ae:	5e                   	pop    esi
c00008af:	5f                   	pop    edi
c00008b0:	c3                   	ret    
c00008b1:	eb 0d                	jmp    c00008c0 <strstr+0x50>
c00008b3:	90                   	nop
c00008b4:	90                   	nop
c00008b5:	90                   	nop
c00008b6:	90                   	nop
c00008b7:	90                   	nop
c00008b8:	90                   	nop
c00008b9:	90                   	nop
c00008ba:	90                   	nop
c00008bb:	90                   	nop
c00008bc:	90                   	nop
c00008bd:	90                   	nop
c00008be:	90                   	nop
c00008bf:	90                   	nop
c00008c0:	89 d8                	mov    eax,ebx
c00008c2:	5b                   	pop    ebx
c00008c3:	5e                   	pop    esi
c00008c4:	5f                   	pop    edi
c00008c5:	c3                   	ret    
c00008c6:	8d 76 00             	lea    esi,[esi+0x0]
c00008c9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00008d0 <toupper>:
c00008d0:	31 d2                	xor    edx,edx
c00008d2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00008d6:	88 c2                	mov    dl,al
c00008d8:	f6 82 40 cd 01 c0 02 	test   BYTE PTR [edx-0x3ffe32c0],0x2
c00008df:	74 03                	je     c00008e4 <toupper+0x14>
c00008e1:	83 e8 20             	sub    eax,0x20
c00008e4:	c3                   	ret    
c00008e5:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00008e9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00008f0 <tolower>:
c00008f0:	31 d2                	xor    edx,edx
c00008f2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00008f6:	88 c2                	mov    dl,al
c00008f8:	f6 82 40 cd 01 c0 01 	test   BYTE PTR [edx-0x3ffe32c0],0x1
c00008ff:	74 03                	je     c0000904 <tolower+0x14>
c0000901:	83 c0 20             	add    eax,0x20
c0000904:	c3                   	ret    
c0000905:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000909:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000910 <simple_strtoul>:
c0000910:	55                   	push   ebp
c0000911:	57                   	push   edi
c0000912:	56                   	push   esi
c0000913:	53                   	push   ebx
c0000914:	83 ec 08             	sub    esp,0x8
c0000917:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000091b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000091f:	90                   	nop
c0000920:	31 d2                	xor    edx,edx
c0000922:	8a 01                	mov    al,BYTE PTR [ecx]
c0000924:	88 c2                	mov    dl,al
c0000926:	f6 82 40 cd 01 c0 08 	test   BYTE PTR [edx-0x3ffe32c0],0x8
c000092d:	75 04                	jne    c0000933 <simple_strtoul+0x23>
c000092f:	3c 09                	cmp    al,0x9
c0000931:	75 0d                	jne    c0000940 <simple_strtoul+0x30>
c0000933:	41                   	inc    ecx
c0000934:	eb ea                	jmp    c0000920 <simple_strtoul+0x10>
c0000936:	8d 76 00             	lea    esi,[esi+0x0]
c0000939:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000940:	3c 2d                	cmp    al,0x2d
c0000942:	0f 84 48 01 00 00    	je     c0000a90 <simple_strtoul+0x180>
c0000948:	3c 2b                	cmp    al,0x2b
c000094a:	0f 84 e0 00 00 00    	je     c0000a30 <simple_strtoul+0x120>
c0000950:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000958:	85 f6                	test   esi,esi
c000095a:	0f 85 e1 00 00 00    	jne    c0000a41 <simple_strtoul+0x131>
c0000960:	0f be 11             	movsx  edx,BYTE PTR [ecx]
c0000963:	80 fa 30             	cmp    dl,0x30
c0000966:	0f 84 75 01 00 00    	je     c0000ae1 <simple_strtoul+0x1d1>
c000096c:	be 0a 00 00 00       	mov    esi,0xa
c0000971:	84 d2                	test   dl,dl
c0000973:	0f 84 9f 01 00 00    	je     c0000b18 <simple_strtoul+0x208>
c0000979:	31 ed                	xor    ebp,ebp
c000097b:	31 ff                	xor    edi,edi
c000097d:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0000984:	eb 35                	jmp    c00009bb <simple_strtoul+0xab>
c0000986:	8d 76 00             	lea    esi,[esi+0x0]
c0000989:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000990:	83 eb 30             	sub    ebx,0x30
c0000993:	39 f3                	cmp    ebx,esi
c0000995:	73 59                	jae    c00009f0 <simple_strtoul+0xe0>
c0000997:	31 d2                	xor    edx,edx
c0000999:	89 d8                	mov    eax,ebx
c000099b:	f7 d0                	not    eax
c000099d:	f7 f6                	div    esi
c000099f:	39 f8                	cmp    eax,edi
c00009a1:	0f 82 c9 00 00 00    	jb     c0000a70 <simple_strtoul+0x160>
c00009a7:	0f af fe             	imul   edi,esi
c00009aa:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00009b1:	01 df                	add    edi,ebx
c00009b3:	41                   	inc    ecx
c00009b4:	0f be 11             	movsx  edx,BYTE PTR [ecx]
c00009b7:	84 d2                	test   dl,dl
c00009b9:	74 35                	je     c00009f0 <simple_strtoul+0xe0>
c00009bb:	31 db                	xor    ebx,ebx
c00009bd:	88 d3                	mov    bl,dl
c00009bf:	f6 83 40 cd 01 c0 04 	test   BYTE PTR [ebx-0x3ffe32c0],0x4
c00009c6:	75 c8                	jne    c0000990 <simple_strtoul+0x80>
c00009c8:	52                   	push   edx
c00009c9:	e8 02 ff ff ff       	call   c00008d0 <toupper>
c00009ce:	31 d2                	xor    edx,edx
c00009d0:	5b                   	pop    ebx
c00009d1:	88 c2                	mov    dl,al
c00009d3:	f6 82 40 cd 01 c0 01 	test   BYTE PTR [edx-0x3ffe32c0],0x1
c00009da:	74 14                	je     c00009f0 <simple_strtoul+0xe0>
c00009dc:	8d 58 c9             	lea    ebx,[eax-0x37]
c00009df:	39 f3                	cmp    ebx,esi
c00009e1:	72 b4                	jb     c0000997 <simple_strtoul+0x87>
c00009e3:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00009e9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00009f0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00009f4:	85 c0                	test   eax,eax
c00009f6:	74 18                	je     c0000a10 <simple_strtoul+0x100>
c00009f8:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00009fb:	09 f8                	or     eax,edi
c00009fd:	0f 85 7d 00 00 00    	jne    c0000a80 <simple_strtoul+0x170>
c0000a03:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a07:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000a0b:	31 ff                	xor    edi,edi
c0000a0d:	89 30                	mov    DWORD PTR [eax],esi
c0000a0f:	90                   	nop
c0000a10:	4d                   	dec    ebp
c0000a11:	75 05                	jne    c0000a18 <simple_strtoul+0x108>
c0000a13:	bf ff ff ff ff       	mov    edi,0xffffffff
c0000a18:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000a1d:	75 02                	jne    c0000a21 <simple_strtoul+0x111>
c0000a1f:	f7 df                	neg    edi
c0000a21:	83 c4 08             	add    esp,0x8
c0000a24:	89 f8                	mov    eax,edi
c0000a26:	5b                   	pop    ebx
c0000a27:	5e                   	pop    esi
c0000a28:	5f                   	pop    edi
c0000a29:	5d                   	pop    ebp
c0000a2a:	c3                   	ret    
c0000a2b:	90                   	nop
c0000a2c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a30:	41                   	inc    ecx
c0000a31:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000a39:	85 f6                	test   esi,esi
c0000a3b:	0f 84 1f ff ff ff    	je     c0000960 <simple_strtoul+0x50>
c0000a41:	8d 46 fe             	lea    eax,[esi-0x2]
c0000a44:	83 f8 22             	cmp    eax,0x22
c0000a47:	77 7b                	ja     c0000ac4 <simple_strtoul+0x1b4>
c0000a49:	0f be 11             	movsx  edx,BYTE PTR [ecx]
c0000a4c:	83 fe 08             	cmp    esi,0x8
c0000a4f:	0f 84 b3 00 00 00    	je     c0000b08 <simple_strtoul+0x1f8>
c0000a55:	83 fe 10             	cmp    esi,0x10
c0000a58:	0f 85 13 ff ff ff    	jne    c0000971 <simple_strtoul+0x61>
c0000a5e:	80 fa 30             	cmp    dl,0x30
c0000a61:	74 3b                	je     c0000a9e <simple_strtoul+0x18e>
c0000a63:	be 10 00 00 00       	mov    esi,0x10
c0000a68:	e9 04 ff ff ff       	jmp    c0000971 <simple_strtoul+0x61>
c0000a6d:	8d 76 00             	lea    esi,[esi+0x0]
c0000a70:	bd 01 00 00 00       	mov    ebp,0x1
c0000a75:	31 ff                	xor    edi,edi
c0000a77:	e9 37 ff ff ff       	jmp    c00009b3 <simple_strtoul+0xa3>
c0000a7c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a80:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a84:	89 08                	mov    DWORD PTR [eax],ecx
c0000a86:	eb 88                	jmp    c0000a10 <simple_strtoul+0x100>
c0000a88:	90                   	nop
c0000a89:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000a90:	41                   	inc    ecx
c0000a91:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000a99:	e9 ba fe ff ff       	jmp    c0000958 <simple_strtoul+0x48>
c0000a9e:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000aa2:	88 04 24             	mov    BYTE PTR [esp],al
c0000aa5:	50                   	push   eax
c0000aa6:	e8 45 fe ff ff       	call   c00008f0 <tolower>
c0000aab:	5e                   	pop    esi
c0000aac:	83 f8 78             	cmp    eax,0x78
c0000aaf:	0f 84 88 00 00 00    	je     c0000b3d <simple_strtoul+0x22d>
c0000ab5:	41                   	inc    ecx
c0000ab6:	be 10 00 00 00       	mov    esi,0x10
c0000abb:	0f be 14 24          	movsx  edx,BYTE PTR [esp]
c0000abf:	e9 ad fe ff ff       	jmp    c0000971 <simple_strtoul+0x61>
c0000ac4:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0000ac8:	85 ff                	test   edi,edi
c0000aca:	74 5e                	je     c0000b2a <simple_strtoul+0x21a>
c0000acc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000ad0:	85 c9                	test   ecx,ecx
c0000ad2:	75 50                	jne    c0000b24 <simple_strtoul+0x214>
c0000ad4:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000ada:	31 ff                	xor    edi,edi
c0000adc:	e9 37 ff ff ff       	jmp    c0000a18 <simple_strtoul+0x108>
c0000ae1:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000ae5:	88 04 24             	mov    BYTE PTR [esp],al
c0000ae8:	50                   	push   eax
c0000ae9:	e8 02 fe ff ff       	call   c00008f0 <tolower>
c0000aee:	5d                   	pop    ebp
c0000aef:	83 f8 78             	cmp    eax,0x78
c0000af2:	74 3d                	je     c0000b31 <simple_strtoul+0x221>
c0000af4:	41                   	inc    ecx
c0000af5:	0f be 14 24          	movsx  edx,BYTE PTR [esp]
c0000af9:	80 fa 30             	cmp    dl,0x30
c0000afc:	74 13                	je     c0000b11 <simple_strtoul+0x201>
c0000afe:	be 08 00 00 00       	mov    esi,0x8
c0000b03:	e9 69 fe ff ff       	jmp    c0000971 <simple_strtoul+0x61>
c0000b08:	80 fa 30             	cmp    dl,0x30
c0000b0b:	0f 85 60 fe ff ff    	jne    c0000971 <simple_strtoul+0x61>
c0000b11:	0f be 51 01          	movsx  edx,BYTE PTR [ecx+0x1]
c0000b15:	41                   	inc    ecx
c0000b16:	eb e6                	jmp    c0000afe <simple_strtoul+0x1ee>
c0000b18:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000b1c:	85 d2                	test   edx,edx
c0000b1e:	74 0a                	je     c0000b2a <simple_strtoul+0x21a>
c0000b20:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b24:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000b28:	89 30                	mov    DWORD PTR [eax],esi
c0000b2a:	31 ff                	xor    edi,edi
c0000b2c:	e9 e7 fe ff ff       	jmp    c0000a18 <simple_strtoul+0x108>
c0000b31:	0f be 51 02          	movsx  edx,BYTE PTR [ecx+0x2]
c0000b35:	83 c1 02             	add    ecx,0x2
c0000b38:	e9 21 ff ff ff       	jmp    c0000a5e <simple_strtoul+0x14e>
c0000b3d:	0f be 51 02          	movsx  edx,BYTE PTR [ecx+0x2]
c0000b41:	be 10 00 00 00       	mov    esi,0x10
c0000b46:	83 c1 02             	add    ecx,0x2
c0000b49:	e9 23 fe ff ff       	jmp    c0000971 <simple_strtoul+0x61>

c0000b4e <largebin_index>:
c0000b4e:	89 c2                	mov    edx,eax
c0000b50:	c1 ea 08             	shr    edx,0x8
c0000b53:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000b59:	77 10                	ja     c0000b6b <largebin_index+0x1d>
c0000b5b:	0f bd d2             	bsr    edx,edx
c0000b5e:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000b61:	d3 e8                	shr    eax,cl
c0000b63:	83 e0 03             	and    eax,0x3
c0000b66:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000b6a:	c3                   	ret    
c0000b6b:	b8 5f 00 00 00       	mov    eax,0x5f
c0000b70:	c3                   	ret    

c0000b71 <malloc_init_state>:
c0000b71:	53                   	push   ebx
c0000b72:	8d 50 34             	lea    edx,[eax+0x34]
c0000b75:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000b7b:	89 d1                	mov    ecx,edx
c0000b7d:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000b80:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000b83:	83 c2 08             	add    edx,0x8
c0000b86:	39 da                	cmp    edx,ebx
c0000b88:	75 f3                	jne    c0000b7d <malloc_init_state+0xc>
c0000b8a:	8b 10                	mov    edx,DWORD PTR [eax]
c0000b8c:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000b96:	83 e2 03             	and    edx,0x3
c0000b99:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000ba3:	83 ca 48             	or     edx,0x48
c0000ba6:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000bb0:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000bba:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000bc1:	89 10                	mov    DWORD PTR [eax],edx
c0000bc3:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000bc6:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000bd0:	5b                   	pop    ebx
c0000bd1:	c3                   	ret    

c0000bd2 <malloc_consolidate>:
c0000bd2:	8b 10                	mov    edx,DWORD PTR [eax]
c0000bd4:	85 d2                	test   edx,edx
c0000bd6:	0f 84 d8 00 00 00    	je     c0000cb4 <malloc_consolidate+0xe2>
c0000bdc:	55                   	push   ebp
c0000bdd:	83 e2 fd             	and    edx,0xfffffffd
c0000be0:	57                   	push   edi
c0000be1:	89 c5                	mov    ebp,eax
c0000be3:	56                   	push   esi
c0000be4:	8d 78 34             	lea    edi,[eax+0x34]
c0000be7:	53                   	push   ebx
c0000be8:	83 ec 10             	sub    esp,0x10
c0000beb:	89 10                	mov    DWORD PTR [eax],edx
c0000bed:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000bf1:	c1 ea 03             	shr    edx,0x3
c0000bf4:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000bf8:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000bfc:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000bff:	85 d2                	test   edx,edx
c0000c01:	0f 84 98 00 00 00    	je     c0000c9f <malloc_consolidate+0xcd>
c0000c07:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000c0e:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000c11:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000c14:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000c18:	89 f9                	mov    ecx,edi
c0000c1a:	83 e1 fe             	and    ecx,0xfffffffe
c0000c1d:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000c20:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000c23:	83 e3 fc             	and    ebx,0xfffffffc
c0000c26:	83 e7 01             	and    edi,0x1
c0000c29:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000c2c:	75 14                	jne    c0000c42 <malloc_consolidate+0x70>
c0000c2e:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000c30:	29 fa                	sub    edx,edi
c0000c32:	01 f9                	add    ecx,edi
c0000c34:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000c37:	89 fb                	mov    ebx,edi
c0000c39:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000c3c:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000c3f:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000c42:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000c45:	74 40                	je     c0000c87 <malloc_consolidate+0xb5>
c0000c47:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000c4a:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000c4d:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000c51:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000c54:	83 e7 01             	and    edi,0x1
c0000c57:	75 0e                	jne    c0000c67 <malloc_consolidate+0x95>
c0000c59:	01 d9                	add    ecx,ebx
c0000c5b:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000c5e:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000c61:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000c64:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000c67:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000c6a:	89 ce                	mov    esi,ecx
c0000c6c:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000c6f:	83 ce 01             	or     esi,0x1
c0000c72:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000c75:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000c78:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000c7b:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000c7f:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000c82:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000c85:	eb 0c                	jmp    c0000c93 <malloc_consolidate+0xc1>
c0000c87:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000c8a:	83 c9 01             	or     ecx,0x1
c0000c8d:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000c90:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000c93:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000c97:	85 d2                	test   edx,edx
c0000c99:	0f 85 6f ff ff ff    	jne    c0000c0e <malloc_consolidate+0x3c>
c0000c9f:	83 c5 04             	add    ebp,0x4
c0000ca2:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000ca6:	0f 85 50 ff ff ff    	jne    c0000bfc <malloc_consolidate+0x2a>
c0000cac:	83 c4 10             	add    esp,0x10
c0000caf:	5b                   	pop    ebx
c0000cb0:	5e                   	pop    esi
c0000cb1:	5f                   	pop    edi
c0000cb2:	5d                   	pop    ebp
c0000cb3:	c3                   	ret    
c0000cb4:	e9 b8 fe ff ff       	jmp    c0000b71 <malloc_init_state>

c0000cb9 <dlfree>:
c0000cb9:	57                   	push   edi
c0000cba:	56                   	push   esi
c0000cbb:	53                   	push   ebx
c0000cbc:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000cc0:	85 db                	test   ebx,ebx
c0000cc2:	0f 84 e2 00 00 00    	je     c0000daa <dlfree+0xf1>
c0000cc8:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000ccb:	8b 0d 00 fa 01 c0    	mov    ecx,DWORD PTR ds:0xc001fa00
c0000cd1:	89 f0                	mov    eax,esi
c0000cd3:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000cd6:	83 e0 fc             	and    eax,0xfffffffc
c0000cd9:	39 c1                	cmp    ecx,eax
c0000cdb:	72 24                	jb     c0000d01 <dlfree+0x48>
c0000cdd:	83 c9 03             	or     ecx,0x3
c0000ce0:	c1 e8 03             	shr    eax,0x3
c0000ce3:	89 0d 00 fa 01 c0    	mov    DWORD PTR ds:0xc001fa00,ecx
c0000ce9:	83 e8 02             	sub    eax,0x2
c0000cec:	8b 0c 85 04 fa 01 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffe05fc]
c0000cf3:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000cf5:	89 14 85 04 fa 01 c0 	mov    DWORD PTR [eax*4-0x3ffe05fc],edx
c0000cfc:	e9 a9 00 00 00       	jmp    c0000daa <dlfree+0xf1>
c0000d01:	83 e6 02             	and    esi,0x2
c0000d04:	0f 85 a0 00 00 00    	jne    c0000daa <dlfree+0xf1>
c0000d0a:	83 c9 01             	or     ecx,0x1
c0000d0d:	8d 34 02             	lea    esi,[edx+eax*1]
c0000d10:	89 0d 00 fa 01 c0    	mov    DWORD PTR ds:0xc001fa00,ecx
c0000d16:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000d19:	83 e1 fc             	and    ecx,0xfffffffc
c0000d1c:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000d20:	75 13                	jne    c0000d35 <dlfree+0x7c>
c0000d22:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000d25:	29 da                	sub    edx,ebx
c0000d27:	01 d8                	add    eax,ebx
c0000d29:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000d2c:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000d2f:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000d32:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000d35:	39 35 2c fa 01 c0    	cmp    DWORD PTR ds:0xc001fa2c,esi
c0000d3b:	74 40                	je     c0000d7d <dlfree+0xc4>
c0000d3d:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000d41:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000d44:	80 e3 01             	and    bl,0x1
c0000d47:	75 0e                	jne    c0000d57 <dlfree+0x9e>
c0000d49:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000d4c:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000d4f:	01 c8                	add    eax,ecx
c0000d51:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000d54:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000d57:	8b 0d 3c fa 01 c0    	mov    ecx,DWORD PTR ds:0xc001fa3c
c0000d5d:	c7 42 0c 34 fa 01 c0 	mov    DWORD PTR [edx+0xc],0xc001fa34
c0000d64:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000d67:	89 15 3c fa 01 c0    	mov    DWORD PTR ds:0xc001fa3c,edx
c0000d6d:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000d70:	89 c1                	mov    ecx,eax
c0000d72:	83 c9 01             	or     ecx,0x1
c0000d75:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d78:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000d7b:	eb 10                	jmp    c0000d8d <dlfree+0xd4>
c0000d7d:	01 c8                	add    eax,ecx
c0000d7f:	89 c1                	mov    ecx,eax
c0000d81:	83 c9 01             	or     ecx,0x1
c0000d84:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d87:	89 15 2c fa 01 c0    	mov    DWORD PTR ds:0xc001fa2c,edx
c0000d8d:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000d92:	76 16                	jbe    c0000daa <dlfree+0xf1>
c0000d94:	f6 05 00 fa 01 c0 02 	test   BYTE PTR ds:0xc001fa00,0x2
c0000d9b:	74 0d                	je     c0000daa <dlfree+0xf1>
c0000d9d:	5b                   	pop    ebx
c0000d9e:	b8 00 fa 01 c0       	mov    eax,0xc001fa00
c0000da3:	5e                   	pop    esi
c0000da4:	5f                   	pop    edi
c0000da5:	e9 28 fe ff ff       	jmp    c0000bd2 <malloc_consolidate>
c0000daa:	5b                   	pop    ebx
c0000dab:	5e                   	pop    esi
c0000dac:	5f                   	pop    edi
c0000dad:	c3                   	ret    

c0000dae <sYSMALLOc>:
c0000dae:	55                   	push   ebp
c0000daf:	57                   	push   edi
c0000db0:	56                   	push   esi
c0000db1:	53                   	push   ebx
c0000db2:	89 d3                	mov    ebx,edx
c0000db4:	83 ec 2c             	sub    esp,0x2c
c0000db7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000dbb:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000dc1:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000dc4:	8d 42 ff             	lea    eax,[edx-0x1]
c0000dc7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000dcb:	74 1f                	je     c0000dec <sYSMALLOc+0x3e>
c0000dcd:	89 d8                	mov    eax,ebx
c0000dcf:	e8 fe fd ff ff       	call   c0000bd2 <malloc_consolidate>
c0000dd4:	83 ec 0c             	sub    esp,0xc
c0000dd7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000ddb:	83 e8 07             	sub    eax,0x7
c0000dde:	50                   	push   eax
c0000ddf:	e8 30 02 00 00       	call   c0001014 <dlmalloc>
c0000de4:	83 c4 10             	add    esp,0x10
c0000de7:	e9 20 02 00 00       	jmp    c000100c <sYSMALLOc+0x25e>
c0000dec:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000def:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000df5:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000df8:	83 e0 fc             	and    eax,0xfffffffc
c0000dfb:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000dff:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000e03:	83 c0 10             	add    eax,0x10
c0000e06:	01 c1                	add    ecx,eax
c0000e08:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000e0c:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000e13:	74 04                	je     c0000e19 <sYSMALLOc+0x6b>
c0000e15:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000e19:	f7 da                	neg    edx
c0000e1b:	03 4c 24 10          	add    ecx,DWORD PTR [esp+0x10]
c0000e1f:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0000e23:	21 d1                	and    ecx,edx
c0000e25:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000e29:	7f 07                	jg     c0000e32 <sYSMALLOc+0x84>
c0000e2b:	31 c0                	xor    eax,eax
c0000e2d:	e9 da 01 00 00       	jmp    c000100c <sYSMALLOc+0x25e>
c0000e32:	83 ec 0c             	sub    esp,0xc
c0000e35:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000e39:	e8 fa 6e 00 00       	call   c0007d38 <sbrk>
c0000e3e:	83 c4 10             	add    esp,0x10
c0000e41:	89 c6                	mov    esi,eax
c0000e43:	83 f8 ff             	cmp    eax,0xffffffff
c0000e46:	74 e3                	je     c0000e2b <sYSMALLOc+0x7d>
c0000e48:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000e4c:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0000e50:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000e53:	03 ab 68 03 00 00    	add    ebp,DWORD PTR [ebx+0x368]
c0000e59:	39 f1                	cmp    ecx,esi
c0000e5b:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0000e61:	75 13                	jne    c0000e76 <sYSMALLOc+0xc8>
c0000e63:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000e67:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000e6b:	83 c8 01             	or     eax,0x1
c0000e6e:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000e71:	e9 3e 01 00 00       	jmp    c0000fb4 <sYSMALLOc+0x206>
c0000e76:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000e7c:	88 d0                	mov    al,dl
c0000e7e:	83 e0 01             	and    eax,0x1
c0000e81:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000e86:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0000e8a:	0f 95 c0             	setne  al
c0000e8d:	22 44 24 1f          	and    al,BYTE PTR [esp+0x1f]
c0000e91:	39 f1                	cmp    ecx,esi
c0000e93:	76 12                	jbe    c0000ea7 <sYSMALLOc+0xf9>
c0000e95:	84 c0                	test   al,al
c0000e97:	74 0e                	je     c0000ea7 <sYSMALLOc+0xf9>
c0000e99:	83 e2 fe             	and    edx,0xfffffffe
c0000e9c:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000ea2:	e9 83 00 00 00       	jmp    c0000f2a <sYSMALLOc+0x17c>
c0000ea7:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0000eac:	74 7c                	je     c0000f2a <sYSMALLOc+0x17c>
c0000eae:	84 c0                	test   al,al
c0000eb0:	74 0c                	je     c0000ebe <sYSMALLOc+0x110>
c0000eb2:	89 f0                	mov    eax,esi
c0000eb4:	29 c8                	sub    eax,ecx
c0000eb6:	01 e8                	add    eax,ebp
c0000eb8:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000ebe:	89 f2                	mov    edx,esi
c0000ec0:	83 e2 07             	and    edx,0x7
c0000ec3:	74 0c                	je     c0000ed1 <sYSMALLOc+0x123>
c0000ec5:	b8 08 00 00 00       	mov    eax,0x8
c0000eca:	29 d0                	sub    eax,edx
c0000ecc:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000ecf:	eb 04                	jmp    c0000ed5 <sYSMALLOc+0x127>
c0000ed1:	89 f5                	mov    ebp,esi
c0000ed3:	31 c0                	xor    eax,eax
c0000ed5:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000ed9:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000edd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000ee1:	01 c1                	add    ecx,eax
c0000ee3:	83 ec 0c             	sub    esp,0xc
c0000ee6:	01 f1                	add    ecx,esi
c0000ee8:	01 ca                	add    edx,ecx
c0000eea:	29 c8                	sub    eax,ecx
c0000eec:	23 54 24 20          	and    edx,DWORD PTR [esp+0x20]
c0000ef0:	01 c2                	add    edx,eax
c0000ef2:	52                   	push   edx
c0000ef3:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0000ef7:	e8 3c 6e 00 00       	call   c0007d38 <sbrk>
c0000efc:	83 c4 10             	add    esp,0x10
c0000eff:	83 f8 ff             	cmp    eax,0xffffffff
c0000f02:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000f06:	75 0f                	jne    c0000f17 <sYSMALLOc+0x169>
c0000f08:	83 ec 0c             	sub    esp,0xc
c0000f0b:	6a 00                	push   0x0
c0000f0d:	e8 26 6e 00 00       	call   c0007d38 <sbrk>
c0000f12:	83 c4 10             	add    esp,0x10
c0000f15:	eb 30                	jmp    c0000f47 <sYSMALLOc+0x199>
c0000f17:	39 c6                	cmp    esi,eax
c0000f19:	76 33                	jbe    c0000f4e <sYSMALLOc+0x1a0>
c0000f1b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000f1f:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0000f26:	01 f0                	add    eax,esi
c0000f28:	eb 1d                	jmp    c0000f47 <sYSMALLOc+0x199>
c0000f2a:	83 ec 0c             	sub    esp,0xc
c0000f2d:	89 f5                	mov    ebp,esi
c0000f2f:	6a 00                	push   0x0
c0000f31:	e8 02 6e 00 00       	call   c0007d38 <sbrk>
c0000f36:	89 c2                	mov    edx,eax
c0000f38:	29 f2                	sub    edx,esi
c0000f3a:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0000f3e:	83 c4 10             	add    esp,0x10
c0000f41:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000f47:	31 d2                	xor    edx,edx
c0000f49:	83 f8 ff             	cmp    eax,0xffffffff
c0000f4c:	74 66                	je     c0000fb4 <sYSMALLOc+0x206>
c0000f4e:	29 e8                	sub    eax,ebp
c0000f50:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c0000f53:	01 d0                	add    eax,edx
c0000f55:	83 c8 01             	or     eax,0x1
c0000f58:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0000f5b:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000f61:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000f66:	74 4c                	je     c0000fb4 <sYSMALLOc+0x206>
c0000f68:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000f6c:	83 e8 0c             	sub    eax,0xc
c0000f6f:	83 e0 f8             	and    eax,0xfffffff8
c0000f72:	89 c2                	mov    edx,eax
c0000f74:	83 ca 01             	or     edx,0x1
c0000f77:	83 f8 0f             	cmp    eax,0xf
c0000f7a:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0000f7d:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0000f85:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0000f8d:	76 25                	jbe    c0000fb4 <sYSMALLOc+0x206>
c0000f8f:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0000f95:	83 ec 0c             	sub    esp,0xc
c0000f98:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c0000fa2:	83 c7 08             	add    edi,0x8
c0000fa5:	57                   	push   edi
c0000fa6:	e8 0e fd ff ff       	call   c0000cb9 <dlfree>
c0000fab:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c0000fb1:	83 c4 10             	add    esp,0x10
c0000fb4:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0000fba:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0000fc0:	73 06                	jae    c0000fc8 <sYSMALLOc+0x21a>
c0000fc2:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c0000fc8:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c0000fce:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c0000fd4:	73 06                	jae    c0000fdc <sYSMALLOc+0x22e>
c0000fd6:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c0000fdc:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0000fdf:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0000fe2:	83 e2 fc             	and    edx,0xfffffffc
c0000fe5:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c0000fe9:	0f 82 3c fe ff ff    	jb     c0000e2b <sYSMALLOc+0x7d>
c0000fef:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0000ff3:	8d 0c 38             	lea    ecx,[eax+edi*1]
c0000ff6:	29 fa                	sub    edx,edi
c0000ff8:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0000ffb:	83 ca 01             	or     edx,0x1
c0000ffe:	89 fb                	mov    ebx,edi
c0001000:	83 c0 08             	add    eax,0x8
c0001003:	83 cb 01             	or     ebx,0x1
c0001006:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c0001009:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000100c:	83 c4 2c             	add    esp,0x2c
c000100f:	5b                   	pop    ebx
c0001010:	5e                   	pop    esi
c0001011:	5f                   	pop    edi
c0001012:	5d                   	pop    ebp
c0001013:	c3                   	ret    

c0001014 <dlmalloc>:
c0001014:	55                   	push   ebp
c0001015:	57                   	push   edi
c0001016:	56                   	push   esi
c0001017:	53                   	push   ebx
c0001018:	83 ec 1c             	sub    esp,0x1c
c000101b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000101f:	83 f8 df             	cmp    eax,0xffffffdf
c0001022:	0f 87 70 03 00 00    	ja     c0001398 <dlmalloc+0x384>
c0001028:	83 c0 0b             	add    eax,0xb
c000102b:	be 10 00 00 00       	mov    esi,0x10
c0001030:	83 f8 0f             	cmp    eax,0xf
c0001033:	76 05                	jbe    c000103a <dlmalloc+0x26>
c0001035:	83 e0 f8             	and    eax,0xfffffff8
c0001038:	89 c6                	mov    esi,eax
c000103a:	8b 3d 00 fa 01 c0    	mov    edi,DWORD PTR ds:0xc001fa00
c0001040:	f7 c7 01 00 00 00    	test   edi,0x1
c0001046:	75 17                	jne    c000105f <dlmalloc+0x4b>
c0001048:	85 ff                	test   edi,edi
c000104a:	0f 85 05 03 00 00    	jne    c0001355 <dlmalloc+0x341>
c0001050:	b8 00 fa 01 c0       	mov    eax,0xc001fa00
c0001055:	e8 78 fb ff ff       	call   c0000bd2 <malloc_consolidate>
c000105a:	e9 f6 02 00 00       	jmp    c0001355 <dlmalloc+0x341>
c000105f:	39 f7                	cmp    edi,esi
c0001061:	72 1f                	jb     c0001082 <dlmalloc+0x6e>
c0001063:	89 f2                	mov    edx,esi
c0001065:	c1 ea 03             	shr    edx,0x3
c0001068:	83 ea 02             	sub    edx,0x2
c000106b:	8b 04 95 04 fa 01 c0 	mov    eax,DWORD PTR [edx*4-0x3ffe05fc]
c0001072:	85 c0                	test   eax,eax
c0001074:	74 0c                	je     c0001082 <dlmalloc+0x6e>
c0001076:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0001079:	89 0c 95 04 fa 01 c0 	mov    DWORD PTR [edx*4-0x3ffe05fc],ecx
c0001080:	eb 30                	jmp    c00010b2 <dlmalloc+0x9e>
c0001082:	89 f0                	mov    eax,esi
c0001084:	81 fe ff 00 00 00    	cmp    esi,0xff
c000108a:	77 2e                	ja     c00010ba <dlmalloc+0xa6>
c000108c:	c1 e8 03             	shr    eax,0x3
c000108f:	8d 14 c5 34 fa 01 c0 	lea    edx,[eax*8-0x3ffe05cc]
c0001096:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000109a:	8d 5a f8             	lea    ebx,[edx-0x8]
c000109d:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c00010a0:	39 c3                	cmp    ebx,eax
c00010a2:	74 2e                	je     c00010d2 <dlmalloc+0xbe>
c00010a4:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c00010a7:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c00010ac:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c00010af:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c00010b2:	83 c0 08             	add    eax,0x8
c00010b5:	e9 e0 02 00 00       	jmp    c000139a <dlmalloc+0x386>
c00010ba:	e8 8f fa ff ff       	call   c0000b4e <largebin_index>
c00010bf:	83 e7 02             	and    edi,0x2
c00010c2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00010c6:	74 0a                	je     c00010d2 <dlmalloc+0xbe>
c00010c8:	b8 00 fa 01 c0       	mov    eax,0xc001fa00
c00010cd:	e8 00 fb ff ff       	call   c0000bd2 <malloc_consolidate>
c00010d2:	8d 46 10             	lea    eax,[esi+0x10]
c00010d5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00010d9:	8b 1d 40 fa 01 c0    	mov    ebx,DWORD PTR ds:0xc001fa40
c00010df:	81 fb 34 fa 01 c0    	cmp    ebx,0xc001fa34
c00010e5:	0f 84 13 01 00 00    	je     c00011fe <dlmalloc+0x1ea>
c00010eb:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00010ee:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00010f1:	83 e7 fc             	and    edi,0xfffffffc
c00010f4:	81 fe ff 00 00 00    	cmp    esi,0xff
c00010fa:	77 4c                	ja     c0001148 <dlmalloc+0x134>
c00010fc:	3d 34 fa 01 c0       	cmp    eax,0xc001fa34
c0001101:	75 45                	jne    c0001148 <dlmalloc+0x134>
c0001103:	39 1d 30 fa 01 c0    	cmp    DWORD PTR ds:0xc001fa30,ebx
c0001109:	75 3d                	jne    c0001148 <dlmalloc+0x134>
c000110b:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c000110f:	73 37                	jae    c0001148 <dlmalloc+0x134>
c0001111:	8d 04 33             	lea    eax,[ebx+esi*1]
c0001114:	89 fa                	mov    edx,edi
c0001116:	a3 3c fa 01 c0       	mov    ds:0xc001fa3c,eax
c000111b:	a3 40 fa 01 c0       	mov    ds:0xc001fa40,eax
c0001120:	a3 30 fa 01 c0       	mov    ds:0xc001fa30,eax
c0001125:	29 f2                	sub    edx,esi
c0001127:	c7 40 08 34 fa 01 c0 	mov    DWORD PTR [eax+0x8],0xc001fa34
c000112e:	c7 40 0c 34 fa 01 c0 	mov    DWORD PTR [eax+0xc],0xc001fa34
c0001135:	83 ce 01             	or     esi,0x1
c0001138:	89 d1                	mov    ecx,edx
c000113a:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c000113d:	83 c9 01             	or     ecx,0x1
c0001140:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001143:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0001146:	eb 15                	jmp    c000115d <dlmalloc+0x149>
c0001148:	a3 40 fa 01 c0       	mov    ds:0xc001fa40,eax
c000114d:	39 fe                	cmp    esi,edi
c000114f:	c7 40 08 34 fa 01 c0 	mov    DWORD PTR [eax+0x8],0xc001fa34
c0001156:	75 0d                	jne    c0001165 <dlmalloc+0x151>
c0001158:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c000115d:	8d 43 08             	lea    eax,[ebx+0x8]
c0001160:	e9 35 02 00 00       	jmp    c000139a <dlmalloc+0x386>
c0001165:	89 f8                	mov    eax,edi
c0001167:	81 ff ff 00 00 00    	cmp    edi,0xff
c000116d:	77 19                	ja     c0001188 <dlmalloc+0x174>
c000116f:	c1 e8 03             	shr    eax,0x3
c0001172:	8d 14 00             	lea    edx,[eax+eax*1]
c0001175:	83 c2 0d             	add    edx,0xd
c0001178:	8d 2c 95 f8 f9 01 c0 	lea    ebp,[edx*4-0x3ffe0608]
c000117f:	8b 14 95 00 fa 01 c0 	mov    edx,DWORD PTR [edx*4-0x3ffe0600]
c0001186:	eb 46                	jmp    c00011ce <dlmalloc+0x1ba>
c0001188:	e8 c1 f9 ff ff       	call   c0000b4e <largebin_index>
c000118d:	8d 14 00             	lea    edx,[eax+eax*1]
c0001190:	83 c2 0d             	add    edx,0xd
c0001193:	8d 0c 95 00 fa 01 c0 	lea    ecx,[edx*4-0x3ffe0600]
c000119a:	8b 14 95 00 fa 01 c0 	mov    edx,DWORD PTR [edx*4-0x3ffe0600]
c00011a1:	8d 69 f8             	lea    ebp,[ecx-0x8]
c00011a4:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c00011a8:	89 d5                	mov    ebp,edx
c00011aa:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c00011ae:	74 1e                	je     c00011ce <dlmalloc+0x1ba>
c00011b0:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c00011b3:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c00011b6:	77 12                	ja     c00011ca <dlmalloc+0x1b6>
c00011b8:	83 cf 01             	or     edi,0x1
c00011bb:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c00011be:	76 05                	jbe    c00011c5 <dlmalloc+0x1b1>
c00011c0:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00011c3:	eb f6                	jmp    c00011bb <dlmalloc+0x1a7>
c00011c5:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00011c8:	eb 04                	jmp    c00011ce <dlmalloc+0x1ba>
c00011ca:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00011ce:	89 c7                	mov    edi,eax
c00011d0:	88 c1                	mov    cl,al
c00011d2:	c1 ff 05             	sar    edi,0x5
c00011d5:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00011d9:	bf 01 00 00 00       	mov    edi,0x1
c00011de:	d3 e7                	shl    edi,cl
c00011e0:	89 f8                	mov    eax,edi
c00011e2:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00011e6:	09 04 bd 34 fd 01 c0 	or     DWORD PTR [edi*4-0x3ffe02cc],eax
c00011ed:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00011f0:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00011f3:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c00011f6:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c00011f9:	e9 db fe ff ff       	jmp    c00010d9 <dlmalloc+0xc5>
c00011fe:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001204:	76 78                	jbe    c000127e <dlmalloc+0x26a>
c0001206:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000120a:	8d 04 c5 34 fa 01 c0 	lea    eax,[eax*8-0x3ffe05cc]
c0001211:	8d 48 f8             	lea    ecx,[eax-0x8]
c0001214:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001217:	39 ca                	cmp    edx,ecx
c0001219:	74 63                	je     c000127e <dlmalloc+0x26a>
c000121b:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c000121e:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001221:	83 e3 fc             	and    ebx,0xfffffffc
c0001224:	39 de                	cmp    esi,ebx
c0001226:	77 52                	ja     c000127a <dlmalloc+0x266>
c0001228:	89 df                	mov    edi,ebx
c000122a:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c000122d:	29 f7                	sub    edi,esi
c000122f:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001232:	01 d3                	add    ebx,edx
c0001234:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0001237:	83 ff 0f             	cmp    edi,0xf
c000123a:	8d 42 08             	lea    eax,[edx+0x8]
c000123d:	77 09                	ja     c0001248 <dlmalloc+0x234>
c000123f:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c0001243:	e9 52 01 00 00       	jmp    c000139a <dlmalloc+0x386>
c0001248:	8d 0c 32             	lea    ecx,[edx+esi*1]
c000124b:	83 ce 01             	or     esi,0x1
c000124e:	89 0d 3c fa 01 c0    	mov    DWORD PTR ds:0xc001fa3c,ecx
c0001254:	89 0d 40 fa 01 c0    	mov    DWORD PTR ds:0xc001fa40,ecx
c000125a:	c7 41 08 34 fa 01 c0 	mov    DWORD PTR [ecx+0x8],0xc001fa34
c0001261:	c7 41 0c 34 fa 01 c0 	mov    DWORD PTR [ecx+0xc],0xc001fa34
c0001268:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c000126b:	89 fa                	mov    edx,edi
c000126d:	83 ca 01             	or     edx,0x1
c0001270:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001273:	89 3b                	mov    DWORD PTR [ebx],edi
c0001275:	e9 20 01 00 00       	jmp    c000139a <dlmalloc+0x386>
c000127a:	89 c2                	mov    edx,eax
c000127c:	eb 99                	jmp    c0001217 <dlmalloc+0x203>
c000127e:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001282:	b8 01 00 00 00       	mov    eax,0x1
c0001287:	41                   	inc    ecx
c0001288:	89 cb                	mov    ebx,ecx
c000128a:	8d 14 cd 2c fa 01 c0 	lea    edx,[ecx*8-0x3ffe05d4]
c0001291:	c1 eb 05             	shr    ebx,0x5
c0001294:	d3 e0                	shl    eax,cl
c0001296:	8b 3c 9d 34 fd 01 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffe02cc]
c000129d:	39 f8                	cmp    eax,edi
c000129f:	77 04                	ja     c00012a5 <dlmalloc+0x291>
c00012a1:	85 c0                	test   eax,eax
c00012a3:	75 26                	jne    c00012cb <dlmalloc+0x2b7>
c00012a5:	43                   	inc    ebx
c00012a6:	83 fb 02             	cmp    ebx,0x2
c00012a9:	0f 87 a6 00 00 00    	ja     c0001355 <dlmalloc+0x341>
c00012af:	8b 3c 9d 34 fd 01 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffe02cc]
c00012b6:	85 ff                	test   edi,edi
c00012b8:	74 eb                	je     c00012a5 <dlmalloc+0x291>
c00012ba:	89 d8                	mov    eax,ebx
c00012bc:	c1 e0 06             	shl    eax,0x6
c00012bf:	8d 14 85 2c fa 01 c0 	lea    edx,[eax*4-0x3ffe05d4]
c00012c6:	b8 01 00 00 00       	mov    eax,0x1
c00012cb:	85 f8                	test   eax,edi
c00012cd:	75 07                	jne    c00012d6 <dlmalloc+0x2c2>
c00012cf:	83 c2 08             	add    edx,0x8
c00012d2:	01 c0                	add    eax,eax
c00012d4:	eb f5                	jmp    c00012cb <dlmalloc+0x2b7>
c00012d6:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00012d9:	39 ca                	cmp    edx,ecx
c00012db:	75 14                	jne    c00012f1 <dlmalloc+0x2dd>
c00012dd:	89 c1                	mov    ecx,eax
c00012df:	83 c2 08             	add    edx,0x8
c00012e2:	f7 d1                	not    ecx
c00012e4:	01 c0                	add    eax,eax
c00012e6:	21 cf                	and    edi,ecx
c00012e8:	89 3c 9d 34 fd 01 c0 	mov    DWORD PTR [ebx*4-0x3ffe02cc],edi
c00012ef:	eb ac                	jmp    c000129d <dlmalloc+0x289>
c00012f1:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00012f4:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c00012f7:	83 e0 fc             	and    eax,0xfffffffc
c00012fa:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c00012fd:	89 c3                	mov    ebx,eax
c00012ff:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c0001302:	29 f3                	sub    ebx,esi
c0001304:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001307:	83 fb 0f             	cmp    ebx,0xf
c000130a:	8d 41 08             	lea    eax,[ecx+0x8]
c000130d:	77 09                	ja     c0001318 <dlmalloc+0x304>
c000130f:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c0001313:	e9 82 00 00 00       	jmp    c000139a <dlmalloc+0x386>
c0001318:	8d 3c 31             	lea    edi,[ecx+esi*1]
c000131b:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001321:	89 3d 3c fa 01 c0    	mov    DWORD PTR ds:0xc001fa3c,edi
c0001327:	89 3d 40 fa 01 c0    	mov    DWORD PTR ds:0xc001fa40,edi
c000132d:	c7 47 08 34 fa 01 c0 	mov    DWORD PTR [edi+0x8],0xc001fa34
c0001334:	c7 47 0c 34 fa 01 c0 	mov    DWORD PTR [edi+0xc],0xc001fa34
c000133b:	77 06                	ja     c0001343 <dlmalloc+0x32f>
c000133d:	89 3d 30 fa 01 c0    	mov    DWORD PTR ds:0xc001fa30,edi
c0001343:	83 ce 01             	or     esi,0x1
c0001346:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c0001349:	89 d9                	mov    ecx,ebx
c000134b:	83 c9 01             	or     ecx,0x1
c000134e:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c0001351:	89 1a                	mov    DWORD PTR [edx],ebx
c0001353:	eb 45                	jmp    c000139a <dlmalloc+0x386>
c0001355:	a1 2c fa 01 c0       	mov    eax,ds:0xc001fa2c
c000135a:	8d 4e 10             	lea    ecx,[esi+0x10]
c000135d:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001360:	83 e2 fc             	and    edx,0xfffffffc
c0001363:	39 d1                	cmp    ecx,edx
c0001365:	77 1e                	ja     c0001385 <dlmalloc+0x371>
c0001367:	8d 0c 30             	lea    ecx,[eax+esi*1]
c000136a:	89 f3                	mov    ebx,esi
c000136c:	89 0d 2c fa 01 c0    	mov    DWORD PTR ds:0xc001fa2c,ecx
c0001372:	83 cb 01             	or     ebx,0x1
c0001375:	29 f2                	sub    edx,esi
c0001377:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000137a:	83 ca 01             	or     edx,0x1
c000137d:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001380:	e9 2d fd ff ff       	jmp    c00010b2 <dlmalloc+0x9e>
c0001385:	83 c4 1c             	add    esp,0x1c
c0001388:	89 f0                	mov    eax,esi
c000138a:	5b                   	pop    ebx
c000138b:	ba 00 fa 01 c0       	mov    edx,0xc001fa00
c0001390:	5e                   	pop    esi
c0001391:	5f                   	pop    edi
c0001392:	5d                   	pop    ebp
c0001393:	e9 16 fa ff ff       	jmp    c0000dae <sYSMALLOc>
c0001398:	31 c0                	xor    eax,eax
c000139a:	83 c4 1c             	add    esp,0x1c
c000139d:	5b                   	pop    ebx
c000139e:	5e                   	pop    esi
c000139f:	5f                   	pop    edi
c00013a0:	5d                   	pop    ebp
c00013a1:	c3                   	ret    

c00013a2 <iALLOc>:
c00013a2:	55                   	push   ebp
c00013a3:	89 c5                	mov    ebp,eax
c00013a5:	57                   	push   edi
c00013a6:	56                   	push   esi
c00013a7:	53                   	push   ebx
c00013a8:	83 ec 2c             	sub    esp,0x2c
c00013ab:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00013af:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00013b3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00013b7:	83 3d 00 fa 01 c0 00 	cmp    DWORD PTR ds:0xc001fa00,0x0
c00013be:	75 12                	jne    c00013d2 <iALLOc+0x30>
c00013c0:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00013c4:	b8 00 fa 01 c0       	mov    eax,0xc001fa00
c00013c9:	e8 04 f8 ff ff       	call   c0000bd2 <malloc_consolidate>
c00013ce:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00013d2:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00013d7:	74 12                	je     c00013eb <iALLOc+0x49>
c00013d9:	85 ed                	test   ebp,ebp
c00013db:	0f 84 64 01 00 00    	je     c0001545 <iALLOc+0x1a3>
c00013e1:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00013e9:	eb 33                	jmp    c000141e <iALLOc+0x7c>
c00013eb:	85 ed                	test   ebp,ebp
c00013ed:	75 14                	jne    c0001403 <iALLOc+0x61>
c00013ef:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c00013f7:	83 c4 2c             	add    esp,0x2c
c00013fa:	5b                   	pop    ebx
c00013fb:	5e                   	pop    esi
c00013fc:	5f                   	pop    edi
c00013fd:	5d                   	pop    ebp
c00013fe:	e9 11 fc ff ff       	jmp    c0001014 <dlmalloc>
c0001403:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c000140a:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c0001412:	83 f8 0f             	cmp    eax,0xf
c0001415:	76 07                	jbe    c000141e <iALLOc+0x7c>
c0001417:	83 e0 f8             	and    eax,0xfffffff8
c000141a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000141e:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c0001423:	75 09                	jne    c000142e <iALLOc+0x8c>
c0001425:	89 d0                	mov    eax,edx
c0001427:	8d 3c aa             	lea    edi,[edx+ebp*4]
c000142a:	31 f6                	xor    esi,esi
c000142c:	eb 3b                	jmp    c0001469 <iALLOc+0xc7>
c000142e:	8b 02                	mov    eax,DWORD PTR [edx]
c0001430:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c0001438:	83 c0 0b             	add    eax,0xb
c000143b:	83 f8 0f             	cmp    eax,0xf
c000143e:	76 07                	jbe    c0001447 <iALLOc+0xa5>
c0001440:	83 e0 f8             	and    eax,0xfffffff8
c0001443:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0001447:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000144b:	0f af f5             	imul   esi,ebp
c000144e:	eb 25                	jmp    c0001475 <iALLOc+0xd3>
c0001450:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001452:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001455:	bb 10 00 00 00       	mov    ebx,0x10
c000145a:	83 f9 0f             	cmp    ecx,0xf
c000145d:	76 05                	jbe    c0001464 <iALLOc+0xc2>
c000145f:	83 e1 f8             	and    ecx,0xfffffff8
c0001462:	89 cb                	mov    ebx,ecx
c0001464:	01 de                	add    esi,ebx
c0001466:	83 c0 04             	add    eax,0x4
c0001469:	39 c7                	cmp    edi,eax
c000146b:	75 e3                	jne    c0001450 <iALLOc+0xae>
c000146d:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0001475:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0001479:	8b 1d 54 fd 01 c0    	mov    ebx,DWORD PTR ds:0xc001fd54
c000147f:	83 ec 0c             	sub    esp,0xc
c0001482:	c7 05 54 fd 01 c0 00 00 00 00 	mov    DWORD PTR ds:0xc001fd54,0x0
c000148c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001490:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c0001494:	50                   	push   eax
c0001495:	e8 7a fb ff ff       	call   c0001014 <dlmalloc>
c000149a:	83 c4 10             	add    esp,0x10
c000149d:	89 1d 54 fd 01 c0    	mov    DWORD PTR ds:0xc001fd54,ebx
c00014a3:	85 c0                	test   eax,eax
c00014a5:	0f 84 92 00 00 00    	je     c000153d <iALLOc+0x19b>
c00014ab:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c00014ae:	8d 78 f8             	lea    edi,[eax-0x8]
c00014b1:	83 e3 fc             	and    ebx,0xfffffffc
c00014b4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00014b8:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c00014bd:	74 1e                	je     c00014dd <iALLOc+0x13b>
c00014bf:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00014c3:	89 d9                	mov    ecx,ebx
c00014c5:	52                   	push   edx
c00014c6:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00014ca:	83 e9 04             	sub    ecx,0x4
c00014cd:	51                   	push   ecx
c00014ce:	6a 00                	push   0x0
c00014d0:	50                   	push   eax
c00014d1:	e8 1a f0 ff ff       	call   c00004f0 <memset>
c00014d6:	83 c4 10             	add    esp,0x10
c00014d9:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00014dd:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00014e2:	75 14                	jne    c00014f8 <iALLOc+0x156>
c00014e4:	8d 04 37             	lea    eax,[edi+esi*1]
c00014e7:	29 f3                	sub    ebx,esi
c00014e9:	8d 48 08             	lea    ecx,[eax+0x8]
c00014ec:	83 cb 01             	or     ebx,0x1
c00014ef:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00014f3:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00014f6:	89 f3                	mov    ebx,esi
c00014f8:	31 c0                	xor    eax,eax
c00014fa:	4d                   	dec    ebp
c00014fb:	8d 4f 08             	lea    ecx,[edi+0x8]
c00014fe:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001502:	39 c5                	cmp    ebp,eax
c0001504:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c0001507:	74 2c                	je     c0001535 <iALLOc+0x193>
c0001509:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000150d:	85 c9                	test   ecx,ecx
c000150f:	75 15                	jne    c0001526 <iALLOc+0x184>
c0001511:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c0001514:	8d 71 0b             	lea    esi,[ecx+0xb]
c0001517:	b9 10 00 00 00       	mov    ecx,0x10
c000151c:	83 fe 0f             	cmp    esi,0xf
c000151f:	76 05                	jbe    c0001526 <iALLOc+0x184>
c0001521:	83 e6 f8             	and    esi,0xfffffff8
c0001524:	89 f1                	mov    ecx,esi
c0001526:	89 ce                	mov    esi,ecx
c0001528:	29 cb                	sub    ebx,ecx
c000152a:	83 ce 01             	or     esi,0x1
c000152d:	40                   	inc    eax
c000152e:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0001531:	01 cf                	add    edi,ecx
c0001533:	eb c6                	jmp    c00014fb <iALLOc+0x159>
c0001535:	83 cb 01             	or     ebx,0x1
c0001538:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c000153b:	eb 08                	jmp    c0001545 <iALLOc+0x1a3>
c000153d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001545:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001549:	83 c4 2c             	add    esp,0x2c
c000154c:	5b                   	pop    ebx
c000154d:	5e                   	pop    esi
c000154e:	5f                   	pop    edi
c000154f:	5d                   	pop    ebp
c0001550:	c3                   	ret    

c0001551 <dlrealloc>:
c0001551:	55                   	push   ebp
c0001552:	57                   	push   edi
c0001553:	56                   	push   esi
c0001554:	53                   	push   ebx
c0001555:	83 ec 1c             	sub    esp,0x1c
c0001558:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000155c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0001560:	85 db                	test   ebx,ebx
c0001562:	75 10                	jne    c0001574 <dlrealloc+0x23>
c0001564:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0001568:	83 c4 1c             	add    esp,0x1c
c000156b:	5b                   	pop    ebx
c000156c:	5e                   	pop    esi
c000156d:	5f                   	pop    edi
c000156e:	5d                   	pop    ebp
c000156f:	e9 a0 fa ff ff       	jmp    c0001014 <dlmalloc>
c0001574:	83 f8 df             	cmp    eax,0xffffffdf
c0001577:	76 07                	jbe    c0001580 <dlrealloc+0x2f>
c0001579:	31 db                	xor    ebx,ebx
c000157b:	e9 6a 01 00 00       	jmp    c00016ea <dlrealloc+0x199>
c0001580:	83 c0 0b             	add    eax,0xb
c0001583:	bd 10 00 00 00       	mov    ebp,0x10
c0001588:	83 f8 0f             	cmp    eax,0xf
c000158b:	76 05                	jbe    c0001592 <dlrealloc+0x41>
c000158d:	83 e0 f8             	and    eax,0xfffffff8
c0001590:	89 c5                	mov    ebp,eax
c0001592:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c0001595:	8d 7b f8             	lea    edi,[ebx-0x8]
c0001598:	89 c6                	mov    esi,eax
c000159a:	83 e6 fc             	and    esi,0xfffffffc
c000159d:	a8 02                	test   al,0x2
c000159f:	75 d8                	jne    c0001579 <dlrealloc+0x28>
c00015a1:	39 f5                	cmp    ebp,esi
c00015a3:	0f 86 04 01 00 00    	jbe    c00016ad <dlrealloc+0x15c>
c00015a9:	8d 14 37             	lea    edx,[edi+esi*1]
c00015ac:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c00015af:	39 15 2c fa 01 c0    	cmp    DWORD PTR ds:0xc001fa2c,edx
c00015b5:	75 33                	jne    c00015ea <dlrealloc+0x99>
c00015b7:	83 e1 fc             	and    ecx,0xfffffffc
c00015ba:	01 f1                	add    ecx,esi
c00015bc:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00015c0:	8d 4d 10             	lea    ecx,[ebp+0x10]
c00015c3:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00015c7:	77 49                	ja     c0001612 <dlrealloc+0xc1>
c00015c9:	01 ef                	add    edi,ebp
c00015cb:	83 e0 01             	and    eax,0x1
c00015ce:	09 e8                	or     eax,ebp
c00015d0:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c00015d3:	89 3d 2c fa 01 c0    	mov    DWORD PTR ds:0xc001fa2c,edi
c00015d9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00015dd:	29 e8                	sub    eax,ebp
c00015df:	83 c8 01             	or     eax,0x1
c00015e2:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c00015e5:	e9 00 01 00 00       	jmp    c00016ea <dlrealloc+0x199>
c00015ea:	89 c8                	mov    eax,ecx
c00015ec:	83 e0 fe             	and    eax,0xfffffffe
c00015ef:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c00015f4:	75 1c                	jne    c0001612 <dlrealloc+0xc1>
c00015f6:	83 e1 fc             	and    ecx,0xfffffffc
c00015f9:	01 f1                	add    ecx,esi
c00015fb:	39 cd                	cmp    ebp,ecx
c00015fd:	77 13                	ja     c0001612 <dlrealloc+0xc1>
c00015ff:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c0001602:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001605:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c0001608:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c000160b:	89 ce                	mov    esi,ecx
c000160d:	e9 9b 00 00 00       	jmp    c00016ad <dlrealloc+0x15c>
c0001612:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0001616:	8d 45 f9             	lea    eax,[ebp-0x7]
c0001619:	83 ec 0c             	sub    esp,0xc
c000161c:	50                   	push   eax
c000161d:	e8 f2 f9 ff ff       	call   c0001014 <dlmalloc>
c0001622:	83 c4 10             	add    esp,0x10
c0001625:	85 c0                	test   eax,eax
c0001627:	0f 84 4c ff ff ff    	je     c0001579 <dlrealloc+0x28>
c000162d:	8d 48 f8             	lea    ecx,[eax-0x8]
c0001630:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001634:	39 ca                	cmp    edx,ecx
c0001636:	75 0a                	jne    c0001642 <dlrealloc+0xf1>
c0001638:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c000163b:	83 e0 fc             	and    eax,0xfffffffc
c000163e:	01 c6                	add    esi,eax
c0001640:	eb 6b                	jmp    c00016ad <dlrealloc+0x15c>
c0001642:	8d 4e fc             	lea    ecx,[esi-0x4]
c0001645:	83 f9 27             	cmp    ecx,0x27
c0001648:	76 08                	jbe    c0001652 <dlrealloc+0x101>
c000164a:	89 de                	mov    esi,ebx
c000164c:	89 c7                	mov    edi,eax
c000164e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001650:	eb 43                	jmp    c0001695 <dlrealloc+0x144>
c0001652:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001654:	83 f9 13             	cmp    ecx,0x13
c0001657:	89 10                	mov    DWORD PTR [eax],edx
c0001659:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000165c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000165f:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0001662:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0001665:	76 2e                	jbe    c0001695 <dlrealloc+0x144>
c0001667:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000166a:	83 f9 1b             	cmp    ecx,0x1b
c000166d:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0001670:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0001673:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0001676:	76 1d                	jbe    c0001695 <dlrealloc+0x144>
c0001678:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000167b:	83 f9 23             	cmp    ecx,0x23
c000167e:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0001681:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0001684:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0001687:	76 0c                	jbe    c0001695 <dlrealloc+0x144>
c0001689:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000168c:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c000168f:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0001692:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0001695:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001699:	83 ec 0c             	sub    esp,0xc
c000169c:	53                   	push   ebx
c000169d:	e8 17 f6 ff ff       	call   c0000cb9 <dlfree>
c00016a2:	83 c4 10             	add    esp,0x10
c00016a5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00016a9:	89 c3                	mov    ebx,eax
c00016ab:	eb 3d                	jmp    c00016ea <dlrealloc+0x199>
c00016ad:	89 f2                	mov    edx,esi
c00016af:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c00016b2:	29 ea                	sub    edx,ebp
c00016b4:	83 e1 01             	and    ecx,0x1
c00016b7:	8d 04 37             	lea    eax,[edi+esi*1]
c00016ba:	83 fa 0f             	cmp    edx,0xf
c00016bd:	77 0b                	ja     c00016ca <dlrealloc+0x179>
c00016bf:	09 ce                	or     esi,ecx
c00016c1:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c00016c4:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00016c8:	eb 20                	jmp    c00016ea <dlrealloc+0x199>
c00016ca:	01 ef                	add    edi,ebp
c00016cc:	83 ec 0c             	sub    esp,0xc
c00016cf:	09 cd                	or     ebp,ecx
c00016d1:	83 ca 01             	or     edx,0x1
c00016d4:	89 6b fc             	mov    DWORD PTR [ebx-0x4],ebp
c00016d7:	83 c7 08             	add    edi,0x8
c00016da:	89 57 fc             	mov    DWORD PTR [edi-0x4],edx
c00016dd:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00016e1:	57                   	push   edi
c00016e2:	e8 d2 f5 ff ff       	call   c0000cb9 <dlfree>
c00016e7:	83 c4 10             	add    esp,0x10
c00016ea:	83 c4 1c             	add    esp,0x1c
c00016ed:	89 d8                	mov    eax,ebx
c00016ef:	5b                   	pop    ebx
c00016f0:	5e                   	pop    esi
c00016f1:	5f                   	pop    edi
c00016f2:	5d                   	pop    ebp
c00016f3:	c3                   	ret    

c00016f4 <dlmemalign>:
c00016f4:	55                   	push   ebp
c00016f5:	57                   	push   edi
c00016f6:	56                   	push   esi
c00016f7:	53                   	push   ebx
c00016f8:	83 ec 0c             	sub    esp,0xc
c00016fb:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00016ff:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0001703:	83 fa 08             	cmp    edx,0x8
c0001706:	77 10                	ja     c0001718 <dlmemalign+0x24>
c0001708:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000170c:	83 c4 0c             	add    esp,0xc
c000170f:	5b                   	pop    ebx
c0001710:	5e                   	pop    esi
c0001711:	5f                   	pop    edi
c0001712:	5d                   	pop    ebp
c0001713:	e9 fc f8 ff ff       	jmp    c0001014 <dlmalloc>
c0001718:	bf 10 00 00 00       	mov    edi,0x10
c000171d:	83 fa 0f             	cmp    edx,0xf
c0001720:	76 13                	jbe    c0001735 <dlmemalign+0x41>
c0001722:	8d 4a ff             	lea    ecx,[edx-0x1]
c0001725:	85 d1                	test   ecx,edx
c0001727:	75 04                	jne    c000172d <dlmemalign+0x39>
c0001729:	89 d7                	mov    edi,edx
c000172b:	eb 08                	jmp    c0001735 <dlmemalign+0x41>
c000172d:	39 d7                	cmp    edi,edx
c000172f:	73 04                	jae    c0001735 <dlmemalign+0x41>
c0001731:	01 ff                	add    edi,edi
c0001733:	eb f8                	jmp    c000172d <dlmemalign+0x39>
c0001735:	83 f8 df             	cmp    eax,0xffffffdf
c0001738:	76 07                	jbe    c0001741 <dlmemalign+0x4d>
c000173a:	31 c0                	xor    eax,eax
c000173c:	e9 ce 00 00 00       	jmp    c000180f <dlmemalign+0x11b>
c0001741:	83 c0 0b             	add    eax,0xb
c0001744:	bd 10 00 00 00       	mov    ebp,0x10
c0001749:	83 f8 0f             	cmp    eax,0xf
c000174c:	76 05                	jbe    c0001753 <dlmemalign+0x5f>
c000174e:	83 e0 f8             	and    eax,0xfffffff8
c0001751:	89 c5                	mov    ebp,eax
c0001753:	83 ec 0c             	sub    esp,0xc
c0001756:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c000175a:	50                   	push   eax
c000175b:	e8 b4 f8 ff ff       	call   c0001014 <dlmalloc>
c0001760:	83 c4 10             	add    esp,0x10
c0001763:	89 c1                	mov    ecx,eax
c0001765:	85 c0                	test   eax,eax
c0001767:	74 d1                	je     c000173a <dlmemalign+0x46>
c0001769:	31 d2                	xor    edx,edx
c000176b:	8d 70 f8             	lea    esi,[eax-0x8]
c000176e:	f7 f7                	div    edi
c0001770:	85 d2                	test   edx,edx
c0001772:	74 62                	je     c00017d6 <dlmemalign+0xe2>
c0001774:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c0001778:	89 f8                	mov    eax,edi
c000177a:	f7 d8                	neg    eax
c000177c:	21 c3                	and    ebx,eax
c000177e:	83 eb 08             	sub    ebx,0x8
c0001781:	89 d8                	mov    eax,ebx
c0001783:	29 f0                	sub    eax,esi
c0001785:	83 f8 0f             	cmp    eax,0xf
c0001788:	77 02                	ja     c000178c <dlmemalign+0x98>
c000178a:	01 fb                	add    ebx,edi
c000178c:	89 d8                	mov    eax,ebx
c000178e:	29 f0                	sub    eax,esi
c0001790:	89 c6                	mov    esi,eax
c0001792:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001795:	89 c2                	mov    edx,eax
c0001797:	83 e2 fc             	and    edx,0xfffffffc
c000179a:	29 f2                	sub    edx,esi
c000179c:	a8 02                	test   al,0x2
c000179e:	74 10                	je     c00017b0 <dlmemalign+0xbc>
c00017a0:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c00017a3:	83 ca 02             	or     edx,0x2
c00017a6:	8d 43 08             	lea    eax,[ebx+0x8]
c00017a9:	89 33                	mov    DWORD PTR [ebx],esi
c00017ab:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00017ae:	eb 5f                	jmp    c000180f <dlmemalign+0x11b>
c00017b0:	83 ec 0c             	sub    esp,0xc
c00017b3:	89 d0                	mov    eax,edx
c00017b5:	83 c8 01             	or     eax,0x1
c00017b8:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00017bb:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c00017c0:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00017c3:	83 e0 01             	and    eax,0x1
c00017c6:	09 f0                	or     eax,esi
c00017c8:	89 de                	mov    esi,ebx
c00017ca:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c00017cd:	51                   	push   ecx
c00017ce:	e8 e6 f4 ff ff       	call   c0000cb9 <dlfree>
c00017d3:	83 c4 10             	add    esp,0x10
c00017d6:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00017d9:	a8 02                	test   al,0x2
c00017db:	75 2f                	jne    c000180c <dlmemalign+0x118>
c00017dd:	83 e0 fc             	and    eax,0xfffffffc
c00017e0:	8d 55 10             	lea    edx,[ebp+0x10]
c00017e3:	39 c2                	cmp    edx,eax
c00017e5:	73 25                	jae    c000180c <dlmemalign+0x118>
c00017e7:	8d 14 2e             	lea    edx,[esi+ebp*1]
c00017ea:	83 ec 0c             	sub    esp,0xc
c00017ed:	29 e8                	sub    eax,ebp
c00017ef:	83 c2 08             	add    edx,0x8
c00017f2:	83 c8 01             	or     eax,0x1
c00017f5:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c00017f8:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00017fb:	83 e0 01             	and    eax,0x1
c00017fe:	09 c5                	or     ebp,eax
c0001800:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0001803:	52                   	push   edx
c0001804:	e8 b0 f4 ff ff       	call   c0000cb9 <dlfree>
c0001809:	83 c4 10             	add    esp,0x10
c000180c:	8d 46 08             	lea    eax,[esi+0x8]
c000180f:	83 c4 0c             	add    esp,0xc
c0001812:	5b                   	pop    ebx
c0001813:	5e                   	pop    esi
c0001814:	5f                   	pop    edi
c0001815:	5d                   	pop    ebp
c0001816:	c3                   	ret    

c0001817 <dlcalloc>:
c0001817:	53                   	push   ebx
c0001818:	83 ec 14             	sub    esp,0x14
c000181b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000181f:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c0001824:	50                   	push   eax
c0001825:	e8 ea f7 ff ff       	call   c0001014 <dlmalloc>
c000182a:	83 c4 10             	add    esp,0x10
c000182d:	89 c3                	mov    ebx,eax
c000182f:	85 c0                	test   eax,eax
c0001831:	74 77                	je     c00018aa <dlcalloc+0x93>
c0001833:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c0001836:	89 d0                	mov    eax,edx
c0001838:	83 e0 fc             	and    eax,0xfffffffc
c000183b:	80 e2 02             	and    dl,0x2
c000183e:	75 5a                	jne    c000189a <dlcalloc+0x83>
c0001840:	83 e8 04             	sub    eax,0x4
c0001843:	83 f8 27             	cmp    eax,0x27
c0001846:	76 03                	jbe    c000184b <dlcalloc+0x34>
c0001848:	51                   	push   ecx
c0001849:	eb 53                	jmp    c000189e <dlcalloc+0x87>
c000184b:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001851:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0001858:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000185f:	83 f8 13             	cmp    eax,0x13
c0001862:	76 46                	jbe    c00018aa <dlcalloc+0x93>
c0001864:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000186b:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001872:	83 f8 1b             	cmp    eax,0x1b
c0001875:	76 33                	jbe    c00018aa <dlcalloc+0x93>
c0001877:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000187e:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0001885:	83 f8 23             	cmp    eax,0x23
c0001888:	76 20                	jbe    c00018aa <dlcalloc+0x93>
c000188a:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0001891:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0001898:	eb 10                	jmp    c00018aa <dlcalloc+0x93>
c000189a:	83 e8 08             	sub    eax,0x8
c000189d:	52                   	push   edx
c000189e:	50                   	push   eax
c000189f:	6a 00                	push   0x0
c00018a1:	53                   	push   ebx
c00018a2:	e8 49 ec ff ff       	call   c00004f0 <memset>
c00018a7:	83 c4 10             	add    esp,0x10
c00018aa:	89 d8                	mov    eax,ebx
c00018ac:	83 c4 08             	add    esp,0x8
c00018af:	5b                   	pop    ebx
c00018b0:	c3                   	ret    

c00018b1 <dlcfree>:
c00018b1:	e9 03 f4 ff ff       	jmp    c0000cb9 <dlfree>

c00018b6 <dlindependent_calloc>:
c00018b6:	83 ec 28             	sub    esp,0x28
c00018b9:	b9 03 00 00 00       	mov    ecx,0x3
c00018be:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00018c2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00018c6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00018ca:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00018ce:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00018d2:	e8 cb fa ff ff       	call   c00013a2 <iALLOc>
c00018d7:	83 c4 2c             	add    esp,0x2c
c00018da:	c3                   	ret    

c00018db <dlindependent_comalloc>:
c00018db:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00018df:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00018e3:	31 c9                	xor    ecx,ecx
c00018e5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00018e9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00018ed:	e9 b0 fa ff ff       	jmp    c00013a2 <iALLOc>

c00018f2 <dlvalloc>:
c00018f2:	83 ec 0c             	sub    esp,0xc
c00018f5:	83 3d 00 fa 01 c0 00 	cmp    DWORD PTR ds:0xc001fa00,0x0
c00018fc:	75 0a                	jne    c0001908 <dlvalloc+0x16>
c00018fe:	b8 00 fa 01 c0       	mov    eax,0xc001fa00
c0001903:	e8 ca f2 ff ff       	call   c0000bd2 <malloc_consolidate>
c0001908:	50                   	push   eax
c0001909:	50                   	push   eax
c000190a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000190e:	ff 35 5c fd 01 c0    	push   DWORD PTR ds:0xc001fd5c
c0001914:	e8 db fd ff ff       	call   c00016f4 <dlmemalign>
c0001919:	83 c4 1c             	add    esp,0x1c
c000191c:	c3                   	ret    

c000191d <dlpvalloc>:
c000191d:	83 ec 0c             	sub    esp,0xc
c0001920:	83 3d 00 fa 01 c0 00 	cmp    DWORD PTR ds:0xc001fa00,0x0
c0001927:	75 0a                	jne    c0001933 <dlpvalloc+0x16>
c0001929:	b8 00 fa 01 c0       	mov    eax,0xc001fa00
c000192e:	e8 9f f2 ff ff       	call   c0000bd2 <malloc_consolidate>
c0001933:	a1 5c fd 01 c0       	mov    eax,ds:0xc001fd5c
c0001938:	89 c1                	mov    ecx,eax
c000193a:	52                   	push   edx
c000193b:	f7 d9                	neg    ecx
c000193d:	52                   	push   edx
c000193e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001942:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001946:	21 ca                	and    edx,ecx
c0001948:	52                   	push   edx
c0001949:	50                   	push   eax
c000194a:	e8 a5 fd ff ff       	call   c00016f4 <dlmemalign>
c000194f:	83 c4 1c             	add    esp,0x1c
c0001952:	c3                   	ret    

c0001953 <dlmalloc_trim>:
c0001953:	b8 00 fa 01 c0       	mov    eax,0xc001fa00
c0001958:	e8 75 f2 ff ff       	call   c0000bd2 <malloc_consolidate>
c000195d:	31 c0                	xor    eax,eax
c000195f:	c3                   	ret    

c0001960 <dlmalloc_usable_size>:
c0001960:	53                   	push   ebx
c0001961:	31 c0                	xor    eax,eax
c0001963:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001967:	85 c9                	test   ecx,ecx
c0001969:	74 24                	je     c000198f <dlmalloc_usable_size+0x2f>
c000196b:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c000196e:	f6 c2 02             	test   dl,0x2
c0001971:	74 08                	je     c000197b <dlmalloc_usable_size+0x1b>
c0001973:	83 e2 fc             	and    edx,0xfffffffc
c0001976:	8d 42 f8             	lea    eax,[edx-0x8]
c0001979:	eb 14                	jmp    c000198f <dlmalloc_usable_size+0x2f>
c000197b:	89 d3                	mov    ebx,edx
c000197d:	31 c0                	xor    eax,eax
c000197f:	83 e3 fe             	and    ebx,0xfffffffe
c0001982:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001987:	74 06                	je     c000198f <dlmalloc_usable_size+0x2f>
c0001989:	83 e2 fc             	and    edx,0xfffffffc
c000198c:	8d 42 fc             	lea    eax,[edx-0x4]
c000198f:	5b                   	pop    ebx
c0001990:	c3                   	ret    

c0001991 <dlmallinfo>:
c0001991:	55                   	push   ebp
c0001992:	57                   	push   edi
c0001993:	56                   	push   esi
c0001994:	53                   	push   ebx
c0001995:	83 ec 08             	sub    esp,0x8
c0001998:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000199c:	83 3d 2c fa 01 c0 00 	cmp    DWORD PTR ds:0xc001fa2c,0x0
c00019a3:	75 0a                	jne    c00019af <dlmallinfo+0x1e>
c00019a5:	b8 00 fa 01 c0       	mov    eax,0xc001fa00
c00019aa:	e8 23 f2 ff ff       	call   c0000bd2 <malloc_consolidate>
c00019af:	a1 2c fa 01 c0       	mov    eax,ds:0xc001fa2c
c00019b4:	31 ed                	xor    ebp,ebp
c00019b6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00019b9:	31 c9                	xor    ecx,ecx
c00019bb:	83 e0 fc             	and    eax,0xfffffffc
c00019be:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00019c2:	31 c0                	xor    eax,eax
c00019c4:	8b 14 85 04 fa 01 c0 	mov    edx,DWORD PTR [eax*4-0x3ffe05fc]
c00019cb:	85 d2                	test   edx,edx
c00019cd:	74 0e                	je     c00019dd <dlmallinfo+0x4c>
c00019cf:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c00019d2:	45                   	inc    ebp
c00019d3:	83 e6 fc             	and    esi,0xfffffffc
c00019d6:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00019d9:	01 f1                	add    ecx,esi
c00019db:	eb ee                	jmp    c00019cb <dlmallinfo+0x3a>
c00019dd:	40                   	inc    eax
c00019de:	83 f8 0a             	cmp    eax,0xa
c00019e1:	75 e1                	jne    c00019c4 <dlmallinfo+0x33>
c00019e3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00019e7:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00019ee:	8d 14 01             	lea    edx,[ecx+eax*1]
c00019f1:	b8 34 fa 01 c0       	mov    eax,0xc001fa34
c00019f6:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c00019f9:	39 f0                	cmp    eax,esi
c00019fb:	74 10                	je     c0001a0d <dlmallinfo+0x7c>
c00019fd:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001a00:	ff 04 24             	inc    DWORD PTR [esp]
c0001a03:	83 e7 fc             	and    edi,0xfffffffc
c0001a06:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001a09:	01 fa                	add    edx,edi
c0001a0b:	eb ec                	jmp    c00019f9 <dlmallinfo+0x68>
c0001a0d:	83 c0 08             	add    eax,0x8
c0001a10:	3d 2c fd 01 c0       	cmp    eax,0xc001fd2c
c0001a15:	75 df                	jne    c00019f6 <dlmallinfo+0x65>
c0001a17:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001a1a:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001a1d:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001a20:	a1 68 fd 01 c0       	mov    eax,ds:0xc001fd68
c0001a25:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001a28:	89 03                	mov    DWORD PTR [ebx],eax
c0001a2a:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001a2d:	8b 35 50 fd 01 c0    	mov    esi,DWORD PTR ds:0xc001fd50
c0001a33:	29 d0                	sub    eax,edx
c0001a35:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001a38:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001a3b:	8b 35 64 fd 01 c0    	mov    esi,DWORD PTR ds:0xc001fd64
c0001a41:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001a45:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001a48:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001a4b:	8b 35 74 fd 01 c0    	mov    esi,DWORD PTR ds:0xc001fd74
c0001a51:	89 d8                	mov    eax,ebx
c0001a53:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001a56:	83 c4 08             	add    esp,0x8
c0001a59:	5b                   	pop    ebx
c0001a5a:	5e                   	pop    esi
c0001a5b:	5f                   	pop    edi
c0001a5c:	5d                   	pop    ebp
c0001a5d:	c2 04 00             	ret    0x4

c0001a60 <dlmalloc_stats>:
c0001a60:	83 ec 30             	sub    esp,0x30
c0001a63:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001a67:	50                   	push   eax
c0001a68:	e8 24 ff ff ff       	call   c0001991 <dlmallinfo>
c0001a6d:	83 c4 30             	add    esp,0x30
c0001a70:	c3                   	ret    

c0001a71 <dlmallopt>:
c0001a71:	56                   	push   esi
c0001a72:	b8 00 fa 01 c0       	mov    eax,0xc001fa00
c0001a77:	53                   	push   ebx
c0001a78:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001a7c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001a80:	e8 4d f1 ff ff       	call   c0000bd2 <malloc_consolidate>
c0001a85:	8d 46 04             	lea    eax,[esi+0x4]
c0001a88:	83 f8 05             	cmp    eax,0x5
c0001a8b:	77 67                	ja     c0001af4 <dlmallopt+0x83>
c0001a8d:	ff 24 85 44 ce 01 c0 	jmp    DWORD PTR [eax*4-0x3ffe31bc]
c0001a94:	83 fb 50             	cmp    ebx,0x50
c0001a97:	77 5b                	ja     c0001af4 <dlmallopt+0x83>
c0001a99:	ba 08 00 00 00       	mov    edx,0x8
c0001a9e:	85 db                	test   ebx,ebx
c0001aa0:	74 12                	je     c0001ab4 <dlmallopt+0x43>
c0001aa2:	83 c3 0b             	add    ebx,0xb
c0001aa5:	ba 10 00 00 00       	mov    edx,0x10
c0001aaa:	83 fb 0f             	cmp    ebx,0xf
c0001aad:	76 05                	jbe    c0001ab4 <dlmallopt+0x43>
c0001aaf:	89 da                	mov    edx,ebx
c0001ab1:	83 e2 f8             	and    edx,0xfffffff8
c0001ab4:	a1 00 fa 01 c0       	mov    eax,ds:0xc001fa00
c0001ab9:	83 e0 03             	and    eax,0x3
c0001abc:	09 d0                	or     eax,edx
c0001abe:	a3 00 fa 01 c0       	mov    ds:0xc001fa00,eax
c0001ac3:	eb 31                	jmp    c0001af6 <dlmallopt+0x85>
c0001ac5:	89 1d 44 fd 01 c0    	mov    DWORD PTR ds:0xc001fd44,ebx
c0001acb:	eb 06                	jmp    c0001ad3 <dlmallopt+0x62>
c0001acd:	89 1d 48 fd 01 c0    	mov    DWORD PTR ds:0xc001fd48,ebx
c0001ad3:	be 01 00 00 00       	mov    esi,0x1
c0001ad8:	eb 1c                	jmp    c0001af6 <dlmallopt+0x85>
c0001ada:	89 1d 4c fd 01 c0    	mov    DWORD PTR ds:0xc001fd4c,ebx
c0001ae0:	eb f1                	jmp    c0001ad3 <dlmallopt+0x62>
c0001ae2:	31 f6                	xor    esi,esi
c0001ae4:	85 db                	test   ebx,ebx
c0001ae6:	75 0e                	jne    c0001af6 <dlmallopt+0x85>
c0001ae8:	c7 05 54 fd 01 c0 00 00 00 00 	mov    DWORD PTR ds:0xc001fd54,0x0
c0001af2:	eb df                	jmp    c0001ad3 <dlmallopt+0x62>
c0001af4:	31 f6                	xor    esi,esi
c0001af6:	89 f0                	mov    eax,esi
c0001af8:	5b                   	pop    ebx
c0001af9:	5e                   	pop    esi
c0001afa:	c3                   	ret    
c0001afb:	90                   	nop

c0001afc <isblank>:
c0001afc:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001b01:	74 09                	je     c0001b0c <isblank+0x10>
c0001b03:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001b08:	75 0a                	jne    c0001b14 <isblank+0x18>
c0001b0a:	66 90                	xchg   ax,ax
c0001b0c:	b8 01 00 00 00       	mov    eax,0x1
c0001b11:	c3                   	ret    
c0001b12:	66 90                	xchg   ax,ax
c0001b14:	b8 00 00 00 00       	mov    eax,0x0
c0001b19:	c3                   	ret    
c0001b1a:	66 90                	xchg   ax,ax

c0001b1c <iscntrl>:
c0001b1c:	83 7c 24 04 1f       	cmp    DWORD PTR [esp+0x4],0x1f
c0001b21:	7e 09                	jle    c0001b2c <iscntrl+0x10>
c0001b23:	83 7c 24 04 7f       	cmp    DWORD PTR [esp+0x4],0x7f
c0001b28:	75 0a                	jne    c0001b34 <iscntrl+0x18>
c0001b2a:	66 90                	xchg   ax,ax
c0001b2c:	b8 01 00 00 00       	mov    eax,0x1
c0001b31:	c3                   	ret    
c0001b32:	66 90                	xchg   ax,ax
c0001b34:	b8 00 00 00 00       	mov    eax,0x0
c0001b39:	c3                   	ret    
c0001b3a:	66 90                	xchg   ax,ax

c0001b3c <isdigit>:
c0001b3c:	83 7c 24 04 2f       	cmp    DWORD PTR [esp+0x4],0x2f
c0001b41:	7e 0d                	jle    c0001b50 <isdigit+0x14>
c0001b43:	83 7c 24 04 39       	cmp    DWORD PTR [esp+0x4],0x39
c0001b48:	7f 06                	jg     c0001b50 <isdigit+0x14>
c0001b4a:	b8 01 00 00 00       	mov    eax,0x1
c0001b4f:	c3                   	ret    
c0001b50:	b8 00 00 00 00       	mov    eax,0x0
c0001b55:	c3                   	ret    
c0001b56:	66 90                	xchg   ax,ax

c0001b58 <islower>:
c0001b58:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001b5d:	7e 0d                	jle    c0001b6c <islower+0x14>
c0001b5f:	83 7c 24 04 7a       	cmp    DWORD PTR [esp+0x4],0x7a
c0001b64:	7f 06                	jg     c0001b6c <islower+0x14>
c0001b66:	b8 01 00 00 00       	mov    eax,0x1
c0001b6b:	c3                   	ret    
c0001b6c:	b8 00 00 00 00       	mov    eax,0x0
c0001b71:	c3                   	ret    
c0001b72:	66 90                	xchg   ax,ax

c0001b74 <isspace>:
c0001b74:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001b79:	7c 19                	jl     c0001b94 <isspace+0x20>
c0001b7b:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0001b80:	7e 0a                	jle    c0001b8c <isspace+0x18>
c0001b82:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001b87:	75 0b                	jne    c0001b94 <isspace+0x20>
c0001b89:	8d 76 00             	lea    esi,[esi+0x0]
c0001b8c:	b8 01 00 00 00       	mov    eax,0x1
c0001b91:	c3                   	ret    
c0001b92:	66 90                	xchg   ax,ax
c0001b94:	b8 00 00 00 00       	mov    eax,0x0
c0001b99:	c3                   	ret    
c0001b9a:	66 90                	xchg   ax,ax

c0001b9c <isupper>:
c0001b9c:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001ba1:	7e 0d                	jle    c0001bb0 <isupper+0x14>
c0001ba3:	83 7c 24 04 5a       	cmp    DWORD PTR [esp+0x4],0x5a
c0001ba8:	7f 06                	jg     c0001bb0 <isupper+0x14>
c0001baa:	b8 01 00 00 00       	mov    eax,0x1
c0001baf:	c3                   	ret    
c0001bb0:	b8 00 00 00 00       	mov    eax,0x0
c0001bb5:	c3                   	ret    
c0001bb6:	66 90                	xchg   ax,ax

c0001bb8 <isalpha>:
c0001bb8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001bbc:	e8 db ff ff ff       	call   c0001b9c <isupper>
c0001bc1:	83 c4 04             	add    esp,0x4
c0001bc4:	85 c0                	test   eax,eax
c0001bc6:	75 10                	jne    c0001bd8 <isalpha+0x20>
c0001bc8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001bcc:	e8 87 ff ff ff       	call   c0001b58 <islower>
c0001bd1:	83 c4 04             	add    esp,0x4
c0001bd4:	85 c0                	test   eax,eax
c0001bd6:	74 08                	je     c0001be0 <isalpha+0x28>
c0001bd8:	b8 01 00 00 00       	mov    eax,0x1
c0001bdd:	c3                   	ret    
c0001bde:	66 90                	xchg   ax,ax
c0001be0:	b8 00 00 00 00       	mov    eax,0x0
c0001be5:	c3                   	ret    
c0001be6:	66 90                	xchg   ax,ax

c0001be8 <isalnum>:
c0001be8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001bec:	e8 c7 ff ff ff       	call   c0001bb8 <isalpha>
c0001bf1:	83 c4 04             	add    esp,0x4
c0001bf4:	85 c0                	test   eax,eax
c0001bf6:	75 10                	jne    c0001c08 <isalnum+0x20>
c0001bf8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001bfc:	e8 3b ff ff ff       	call   c0001b3c <isdigit>
c0001c01:	83 c4 04             	add    esp,0x4
c0001c04:	85 c0                	test   eax,eax
c0001c06:	74 08                	je     c0001c10 <isalnum+0x28>
c0001c08:	b8 01 00 00 00       	mov    eax,0x1
c0001c0d:	c3                   	ret    
c0001c0e:	66 90                	xchg   ax,ax
c0001c10:	b8 00 00 00 00       	mov    eax,0x0
c0001c15:	c3                   	ret    
c0001c16:	66 90                	xchg   ax,ax

c0001c18 <ispunct>:
c0001c18:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c1c:	e8 c7 ff ff ff       	call   c0001be8 <isalnum>
c0001c21:	83 c4 04             	add    esp,0x4
c0001c24:	85 c0                	test   eax,eax
c0001c26:	75 28                	jne    c0001c50 <ispunct+0x38>
c0001c28:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c2c:	e8 43 ff ff ff       	call   c0001b74 <isspace>
c0001c31:	83 c4 04             	add    esp,0x4
c0001c34:	85 c0                	test   eax,eax
c0001c36:	75 18                	jne    c0001c50 <ispunct+0x38>
c0001c38:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c3c:	e8 db fe ff ff       	call   c0001b1c <iscntrl>
c0001c41:	83 c4 04             	add    esp,0x4
c0001c44:	85 c0                	test   eax,eax
c0001c46:	75 08                	jne    c0001c50 <ispunct+0x38>
c0001c48:	b8 01 00 00 00       	mov    eax,0x1
c0001c4d:	c3                   	ret    
c0001c4e:	66 90                	xchg   ax,ax
c0001c50:	b8 00 00 00 00       	mov    eax,0x0
c0001c55:	c3                   	ret    
c0001c56:	66 90                	xchg   ax,ax

c0001c58 <isgraph>:
c0001c58:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c5c:	e8 87 ff ff ff       	call   c0001be8 <isalnum>
c0001c61:	83 c4 04             	add    esp,0x4
c0001c64:	85 c0                	test   eax,eax
c0001c66:	75 10                	jne    c0001c78 <isgraph+0x20>
c0001c68:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c6c:	e8 a7 ff ff ff       	call   c0001c18 <ispunct>
c0001c71:	83 c4 04             	add    esp,0x4
c0001c74:	85 c0                	test   eax,eax
c0001c76:	74 08                	je     c0001c80 <isgraph+0x28>
c0001c78:	b8 01 00 00 00       	mov    eax,0x1
c0001c7d:	c3                   	ret    
c0001c7e:	66 90                	xchg   ax,ax
c0001c80:	b8 00 00 00 00       	mov    eax,0x0
c0001c85:	c3                   	ret    
c0001c86:	66 90                	xchg   ax,ax

c0001c88 <isprint>:
c0001c88:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c8c:	e8 c7 ff ff ff       	call   c0001c58 <isgraph>
c0001c91:	83 c4 04             	add    esp,0x4
c0001c94:	85 c0                	test   eax,eax
c0001c96:	75 08                	jne    c0001ca0 <isprint+0x18>
c0001c98:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001c9d:	75 09                	jne    c0001ca8 <isprint+0x20>
c0001c9f:	90                   	nop
c0001ca0:	b8 01 00 00 00       	mov    eax,0x1
c0001ca5:	c3                   	ret    
c0001ca6:	66 90                	xchg   ax,ax
c0001ca8:	b8 00 00 00 00       	mov    eax,0x0
c0001cad:	c3                   	ret    
c0001cae:	66 90                	xchg   ax,ax

c0001cb0 <isxdigit>:
c0001cb0:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001cb4:	e8 83 fe ff ff       	call   c0001b3c <isdigit>
c0001cb9:	83 c4 04             	add    esp,0x4
c0001cbc:	85 c0                	test   eax,eax
c0001cbe:	75 20                	jne    c0001ce0 <isxdigit+0x30>
c0001cc0:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001cc5:	7e 09                	jle    c0001cd0 <isxdigit+0x20>
c0001cc7:	83 7c 24 04 46       	cmp    DWORD PTR [esp+0x4],0x46
c0001ccc:	7e 12                	jle    c0001ce0 <isxdigit+0x30>
c0001cce:	66 90                	xchg   ax,ax
c0001cd0:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001cd5:	7e 11                	jle    c0001ce8 <isxdigit+0x38>
c0001cd7:	83 7c 24 04 66       	cmp    DWORD PTR [esp+0x4],0x66
c0001cdc:	7f 0a                	jg     c0001ce8 <isxdigit+0x38>
c0001cde:	66 90                	xchg   ax,ax
c0001ce0:	b8 01 00 00 00       	mov    eax,0x1
c0001ce5:	c3                   	ret    
c0001ce6:	66 90                	xchg   ax,ax
c0001ce8:	b8 00 00 00 00       	mov    eax,0x0
c0001ced:	c3                   	ret    

c0001cee <disk_status>:
c0001cee:	31 c0                	xor    eax,eax
c0001cf0:	c3                   	ret    

c0001cf1 <disk_initialize>:
c0001cf1:	31 c0                	xor    eax,eax
c0001cf3:	c3                   	ret    

c0001cf4 <disk_read>:
c0001cf4:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001cf9:	0f b6 04 85 60 3e 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffdc1a0]
c0001d01:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001d05:	e9 9a 53 01 00       	jmp    c00170a4 <fatWrapperReadDisk>

c0001d0a <disk_write>:
c0001d0a:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001d0f:	0f b6 04 85 60 3e 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffdc1a0]
c0001d17:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001d1b:	e9 c8 53 01 00       	jmp    c00170e8 <fatWrapperWriteDisk>

c0001d20 <disk_ioctl>:
c0001d20:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001d25:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001d29:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001d2e:	0f b6 04 85 60 3e 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffdc1a0]
c0001d36:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001d3a:	e9 ed 53 01 00       	jmp    c001712c <fatWrapperIoctl>

c0001d3f <ld_word>:
c0001d3f:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001d43:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001d46:	c1 e2 08             	shl    edx,0x8
c0001d49:	09 d0                	or     eax,edx
c0001d4b:	c3                   	ret    

c0001d4c <ld_dword>:
c0001d4c:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001d50:	89 d1                	mov    ecx,edx
c0001d52:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001d56:	c1 e1 08             	shl    ecx,0x8
c0001d59:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001d5c:	09 ca                	or     edx,ecx
c0001d5e:	c1 e2 08             	shl    edx,0x8
c0001d61:	09 d0                	or     eax,edx
c0001d63:	c3                   	ret    

c0001d64 <st_word>:
c0001d64:	66 89 10             	mov    WORD PTR [eax],dx
c0001d67:	c3                   	ret    

c0001d68 <st_dword>:
c0001d68:	89 10                	mov    DWORD PTR [eax],edx
c0001d6a:	c3                   	ret    

c0001d6b <mem_cpy>:
c0001d6b:	85 c9                	test   ecx,ecx
c0001d6d:	74 10                	je     c0001d7f <mem_cpy+0x14>
c0001d6f:	57                   	push   edi
c0001d70:	01 c1                	add    ecx,eax
c0001d72:	56                   	push   esi
c0001d73:	89 c7                	mov    edi,eax
c0001d75:	89 d6                	mov    esi,edx
c0001d77:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001d78:	39 f9                	cmp    ecx,edi
c0001d7a:	75 fb                	jne    c0001d77 <mem_cpy+0xc>
c0001d7c:	5e                   	pop    esi
c0001d7d:	5f                   	pop    edi
c0001d7e:	c3                   	ret    
c0001d7f:	c3                   	ret    

c0001d80 <mem_set>:
c0001d80:	01 c1                	add    ecx,eax
c0001d82:	40                   	inc    eax
c0001d83:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001d86:	39 c8                	cmp    eax,ecx
c0001d88:	75 f8                	jne    c0001d82 <mem_set+0x2>
c0001d8a:	c3                   	ret    

c0001d8b <mem_cmp>:
c0001d8b:	57                   	push   edi
c0001d8c:	56                   	push   esi
c0001d8d:	89 c6                	mov    esi,eax
c0001d8f:	53                   	push   ebx
c0001d90:	46                   	inc    esi
c0001d91:	42                   	inc    edx
c0001d92:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001d96:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001d9a:	29 fb                	sub    ebx,edi
c0001d9c:	89 cf                	mov    edi,ecx
c0001d9e:	29 f7                	sub    edi,esi
c0001da0:	01 c7                	add    edi,eax
c0001da2:	74 04                	je     c0001da8 <mem_cmp+0x1d>
c0001da4:	85 db                	test   ebx,ebx
c0001da6:	74 e8                	je     c0001d90 <mem_cmp+0x5>
c0001da8:	89 d8                	mov    eax,ebx
c0001daa:	5b                   	pop    ebx
c0001dab:	5e                   	pop    esi
c0001dac:	5f                   	pop    edi
c0001dad:	c3                   	ret    

c0001dae <chk_chr>:
c0001dae:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0001db1:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001db4:	74 07                	je     c0001dbd <chk_chr+0xf>
c0001db6:	39 d1                	cmp    ecx,edx
c0001db8:	74 03                	je     c0001dbd <chk_chr+0xf>
c0001dba:	40                   	inc    eax
c0001dbb:	eb f1                	jmp    c0001dae <chk_chr>
c0001dbd:	89 c8                	mov    eax,ecx
c0001dbf:	c3                   	ret    

c0001dc0 <dbc_1st>:
c0001dc0:	31 c0                	xor    eax,eax
c0001dc2:	c3                   	ret    

c0001dc3 <dbc_2nd>:
c0001dc3:	31 c0                	xor    eax,eax
c0001dc5:	c3                   	ret    

c0001dc6 <tchar2uni>:
c0001dc6:	57                   	push   edi
c0001dc7:	89 c7                	mov    edi,eax
c0001dc9:	56                   	push   esi
c0001dca:	53                   	push   ebx
c0001dcb:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001dcd:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001dcf:	8d 73 01             	lea    esi,[ebx+0x1]
c0001dd2:	84 c9                	test   cl,cl
c0001dd4:	78 0a                	js     c0001de0 <tchar2uni+0x1a>
c0001dd6:	0f b6 d1             	movzx  edx,cl
c0001dd9:	89 f3                	mov    ebx,esi
c0001ddb:	e9 9f 00 00 00       	jmp    c0001e7f <tchar2uni+0xb9>
c0001de0:	88 ca                	mov    dl,cl
c0001de2:	83 e2 e0             	and    edx,0xffffffe0
c0001de5:	80 fa c0             	cmp    dl,0xc0
c0001de8:	75 0c                	jne    c0001df6 <tchar2uni+0x30>
c0001dea:	89 ca                	mov    edx,ecx
c0001dec:	b9 01 00 00 00       	mov    ecx,0x1
c0001df1:	83 e2 1f             	and    edx,0x1f
c0001df4:	eb 2e                	jmp    c0001e24 <tchar2uni+0x5e>
c0001df6:	88 ca                	mov    dl,cl
c0001df8:	83 e2 f0             	and    edx,0xfffffff0
c0001dfb:	80 fa e0             	cmp    dl,0xe0
c0001dfe:	75 0c                	jne    c0001e0c <tchar2uni+0x46>
c0001e00:	89 ca                	mov    edx,ecx
c0001e02:	b9 02 00 00 00       	mov    ecx,0x2
c0001e07:	83 e2 0f             	and    edx,0xf
c0001e0a:	eb 18                	jmp    c0001e24 <tchar2uni+0x5e>
c0001e0c:	88 ca                	mov    dl,cl
c0001e0e:	83 e2 f8             	and    edx,0xfffffff8
c0001e11:	88 d0                	mov    al,dl
c0001e13:	83 ca ff             	or     edx,0xffffffff
c0001e16:	3c f0                	cmp    al,0xf0
c0001e18:	75 6c                	jne    c0001e86 <tchar2uni+0xc0>
c0001e1a:	89 ca                	mov    edx,ecx
c0001e1c:	b9 03 00 00 00       	mov    ecx,0x3
c0001e21:	83 e2 07             	and    edx,0x7
c0001e24:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001e28:	46                   	inc    esi
c0001e29:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001e2c:	88 c8                	mov    al,cl
c0001e2e:	83 e0 c0             	and    eax,0xffffffc0
c0001e31:	3c 80                	cmp    al,0x80
c0001e33:	75 4e                	jne    c0001e83 <tchar2uni+0xbd>
c0001e35:	c1 e2 06             	shl    edx,0x6
c0001e38:	83 e1 3f             	and    ecx,0x3f
c0001e3b:	09 ca                	or     edx,ecx
c0001e3d:	39 de                	cmp    esi,ebx
c0001e3f:	75 e7                	jne    c0001e28 <tchar2uni+0x62>
c0001e41:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001e44:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001e4a:	77 37                	ja     c0001e83 <tchar2uni+0xbd>
c0001e4c:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001e52:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001e58:	76 29                	jbe    c0001e83 <tchar2uni+0xbd>
c0001e5a:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001e60:	76 1d                	jbe    c0001e7f <tchar2uni+0xb9>
c0001e62:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001e68:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001e6e:	c1 e1 06             	shl    ecx,0x6
c0001e71:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001e77:	09 ca                	or     edx,ecx
c0001e79:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001e7f:	89 1f                	mov    DWORD PTR [edi],ebx
c0001e81:	eb 03                	jmp    c0001e86 <tchar2uni+0xc0>
c0001e83:	83 ca ff             	or     edx,0xffffffff
c0001e86:	5b                   	pop    ebx
c0001e87:	89 d0                	mov    eax,edx
c0001e89:	5e                   	pop    esi
c0001e8a:	5f                   	pop    edi
c0001e8b:	c3                   	ret    

c0001e8c <put_utf>:
c0001e8c:	53                   	push   ebx
c0001e8d:	83 f8 7f             	cmp    eax,0x7f
c0001e90:	89 c3                	mov    ebx,eax
c0001e92:	b0 00                	mov    al,0x0
c0001e94:	77 11                	ja     c0001ea7 <put_utf+0x1b>
c0001e96:	85 c9                	test   ecx,ecx
c0001e98:	0f 84 e5 00 00 00    	je     c0001f83 <put_utf+0xf7>
c0001e9e:	88 1a                	mov    BYTE PTR [edx],bl
c0001ea0:	b0 01                	mov    al,0x1
c0001ea2:	e9 dc 00 00 00       	jmp    c0001f83 <put_utf+0xf7>
c0001ea7:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001ead:	77 23                	ja     c0001ed2 <put_utf+0x46>
c0001eaf:	83 f9 01             	cmp    ecx,0x1
c0001eb2:	0f 86 cb 00 00 00    	jbe    c0001f83 <put_utf+0xf7>
c0001eb8:	89 d8                	mov    eax,ebx
c0001eba:	83 e3 3f             	and    ebx,0x3f
c0001ebd:	c1 e8 06             	shr    eax,0x6
c0001ec0:	83 cb 80             	or     ebx,0xffffff80
c0001ec3:	83 c8 c0             	or     eax,0xffffffc0
c0001ec6:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001ec9:	88 02                	mov    BYTE PTR [edx],al
c0001ecb:	b0 02                	mov    al,0x2
c0001ecd:	e9 b1 00 00 00       	jmp    c0001f83 <put_utf+0xf7>
c0001ed2:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001ed8:	77 40                	ja     c0001f1a <put_utf+0x8e>
c0001eda:	83 f9 02             	cmp    ecx,0x2
c0001edd:	0f 86 a0 00 00 00    	jbe    c0001f83 <put_utf+0xf7>
c0001ee3:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001ee9:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001eef:	0f 86 8e 00 00 00    	jbe    c0001f83 <put_utf+0xf7>
c0001ef5:	89 d8                	mov    eax,ebx
c0001ef7:	c1 e8 0c             	shr    eax,0xc
c0001efa:	83 c8 e0             	or     eax,0xffffffe0
c0001efd:	88 02                	mov    BYTE PTR [edx],al
c0001eff:	89 d8                	mov    eax,ebx
c0001f01:	83 e3 3f             	and    ebx,0x3f
c0001f04:	c1 e8 06             	shr    eax,0x6
c0001f07:	83 cb 80             	or     ebx,0xffffff80
c0001f0a:	83 e0 3f             	and    eax,0x3f
c0001f0d:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001f10:	83 c8 80             	or     eax,0xffffff80
c0001f13:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001f16:	b0 03                	mov    al,0x3
c0001f18:	eb 69                	jmp    c0001f83 <put_utf+0xf7>
c0001f1a:	83 f9 03             	cmp    ecx,0x3
c0001f1d:	76 64                	jbe    c0001f83 <put_utf+0xf7>
c0001f1f:	89 d9                	mov    ecx,ebx
c0001f21:	0f b7 c3             	movzx  eax,bx
c0001f24:	66 31 c9             	xor    cx,cx
c0001f27:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001f2d:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001f33:	c1 e9 06             	shr    ecx,0x6
c0001f36:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001f3c:	77 43                	ja     c0001f81 <put_utf+0xf5>
c0001f3e:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001f44:	77 3b                	ja     c0001f81 <put_utf+0xf5>
c0001f46:	09 cb                	or     ebx,ecx
c0001f48:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001f4e:	89 d8                	mov    eax,ebx
c0001f50:	c1 e8 12             	shr    eax,0x12
c0001f53:	83 c8 f0             	or     eax,0xfffffff0
c0001f56:	88 02                	mov    BYTE PTR [edx],al
c0001f58:	89 d8                	mov    eax,ebx
c0001f5a:	c1 e8 0c             	shr    eax,0xc
c0001f5d:	83 e0 3f             	and    eax,0x3f
c0001f60:	83 c8 80             	or     eax,0xffffff80
c0001f63:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001f66:	89 d8                	mov    eax,ebx
c0001f68:	83 e3 3f             	and    ebx,0x3f
c0001f6b:	c1 e8 06             	shr    eax,0x6
c0001f6e:	83 cb 80             	or     ebx,0xffffff80
c0001f71:	83 e0 3f             	and    eax,0x3f
c0001f74:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0001f77:	83 c8 80             	or     eax,0xffffff80
c0001f7a:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0001f7d:	b0 04                	mov    al,0x4
c0001f7f:	eb 02                	jmp    c0001f83 <put_utf+0xf7>
c0001f81:	31 c0                	xor    eax,eax
c0001f83:	5b                   	pop    ebx
c0001f84:	c3                   	ret    

c0001f85 <clst2sect>:
c0001f85:	8d 4a fe             	lea    ecx,[edx-0x2]
c0001f88:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0001f8b:	83 ea 02             	sub    edx,0x2
c0001f8e:	39 ca                	cmp    edx,ecx
c0001f90:	76 0d                	jbe    c0001f9f <clst2sect+0x1a>
c0001f92:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c0001f96:	0f af d1             	imul   edx,ecx
c0001f99:	03 50 2c             	add    edx,DWORD PTR [eax+0x2c]
c0001f9c:	89 d0                	mov    eax,edx
c0001f9e:	c3                   	ret    
c0001f9f:	31 c0                	xor    eax,eax
c0001fa1:	c3                   	ret    

c0001fa2 <pick_lfn>:
c0001fa2:	55                   	push   ebp
c0001fa3:	57                   	push   edi
c0001fa4:	56                   	push   esi
c0001fa5:	89 d6                	mov    esi,edx
c0001fa7:	53                   	push   ebx
c0001fa8:	89 c3                	mov    ebx,eax
c0001faa:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001fad:	e8 8d fd ff ff       	call   c0001d3f <ld_word>
c0001fb2:	66 85 c0             	test   ax,ax
c0001fb5:	74 04                	je     c0001fbb <pick_lfn+0x19>
c0001fb7:	31 c0                	xor    eax,eax
c0001fb9:	eb 5c                	jmp    c0002017 <pick_lfn+0x75>
c0001fbb:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0001fbe:	bd 01 00 00 00       	mov    ebp,0x1
c0001fc3:	83 e1 bf             	and    ecx,0xffffffbf
c0001fc6:	31 ff                	xor    edi,edi
c0001fc8:	49                   	dec    ecx
c0001fc9:	6b c9 0d             	imul   ecx,ecx,0xd
c0001fcc:	0f b6 87 a0 cf 01 c0 	movzx  eax,BYTE PTR [edi-0x3ffe3060]
c0001fd3:	01 f0                	add    eax,esi
c0001fd5:	e8 65 fd ff ff       	call   c0001d3f <ld_word>
c0001fda:	66 85 ed             	test   bp,bp
c0001fdd:	74 11                	je     c0001ff0 <pick_lfn+0x4e>
c0001fdf:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001fe5:	77 d0                	ja     c0001fb7 <pick_lfn+0x15>
c0001fe7:	66 89 04 4b          	mov    WORD PTR [ebx+ecx*2],ax
c0001feb:	89 c5                	mov    ebp,eax
c0001fed:	41                   	inc    ecx
c0001fee:	eb 04                	jmp    c0001ff4 <pick_lfn+0x52>
c0001ff0:	66 40                	inc    ax
c0001ff2:	75 c3                	jne    c0001fb7 <pick_lfn+0x15>
c0001ff4:	47                   	inc    edi
c0001ff5:	83 ff 0d             	cmp    edi,0xd
c0001ff8:	75 d2                	jne    c0001fcc <pick_lfn+0x2a>
c0001ffa:	f6 06 40             	test   BYTE PTR [esi],0x40
c0001ffd:	74 13                	je     c0002012 <pick_lfn+0x70>
c0001fff:	66 85 ed             	test   bp,bp
c0002002:	74 0e                	je     c0002012 <pick_lfn+0x70>
c0002004:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c000200a:	77 ab                	ja     c0001fb7 <pick_lfn+0x15>
c000200c:	66 c7 04 4b 00 00    	mov    WORD PTR [ebx+ecx*2],0x0
c0002012:	b8 01 00 00 00       	mov    eax,0x1
c0002017:	5b                   	pop    ebx
c0002018:	5e                   	pop    esi
c0002019:	5f                   	pop    edi
c000201a:	5d                   	pop    ebp
c000201b:	c3                   	ret    

c000201c <put_lfn>:
c000201c:	55                   	push   ebp
c000201d:	31 ed                	xor    ebp,ebp
c000201f:	57                   	push   edi
c0002020:	89 d7                	mov    edi,edx
c0002022:	56                   	push   esi
c0002023:	31 f6                	xor    esi,esi
c0002025:	53                   	push   ebx
c0002026:	83 ec 08             	sub    esp,0x8
c0002029:	89 04 24             	mov    DWORD PTR [esp],eax
c000202c:	88 4c 24 07          	mov    BYTE PTR [esp+0x7],cl
c0002030:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0002034:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c000203a:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c000203d:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002040:	31 d2                	xor    edx,edx
c0002042:	e8 1d fd ff ff       	call   c0001d64 <st_word>
c0002047:	0f b6 d9             	movzx  ebx,cl
c000204a:	4b                   	dec    ebx
c000204b:	6b db 0d             	imul   ebx,ebx,0xd
c000204e:	66 83 fe ff          	cmp    si,0xffff
c0002052:	74 08                	je     c000205c <put_lfn+0x40>
c0002054:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002057:	66 8b 34 58          	mov    si,WORD PTR [eax+ebx*2]
c000205b:	43                   	inc    ebx
c000205c:	0f b6 85 a0 cf 01 c0 	movzx  eax,BYTE PTR [ebp-0x3ffe3060]
c0002063:	0f b7 d6             	movzx  edx,si
c0002066:	01 f8                	add    eax,edi
c0002068:	e8 f7 fc ff ff       	call   c0001d64 <st_word>
c000206d:	66 85 f6             	test   si,si
c0002070:	75 03                	jne    c0002075 <put_lfn+0x59>
c0002072:	83 ce ff             	or     esi,0xffffffff
c0002075:	45                   	inc    ebp
c0002076:	83 fd 0d             	cmp    ebp,0xd
c0002079:	75 d3                	jne    c000204e <put_lfn+0x32>
c000207b:	66 46                	inc    si
c000207d:	74 0a                	je     c0002089 <put_lfn+0x6d>
c000207f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002082:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002087:	75 09                	jne    c0002092 <put_lfn+0x76>
c0002089:	88 c8                	mov    al,cl
c000208b:	83 c8 40             	or     eax,0x40
c000208e:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0002092:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0002096:	88 07                	mov    BYTE PTR [edi],al
c0002098:	83 c4 08             	add    esp,0x8
c000209b:	5b                   	pop    ebx
c000209c:	5e                   	pop    esi
c000209d:	5f                   	pop    edi
c000209e:	5d                   	pop    ebp
c000209f:	c3                   	ret    

c00020a0 <gen_numname>:
c00020a0:	57                   	push   edi
c00020a1:	89 cf                	mov    edi,ecx
c00020a3:	56                   	push   esi
c00020a4:	b9 0b 00 00 00       	mov    ecx,0xb
c00020a9:	53                   	push   ebx
c00020aa:	89 c6                	mov    esi,eax
c00020ac:	83 ec 10             	sub    esp,0x10
c00020af:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00020b3:	e8 b3 fc ff ff       	call   c0001d6b <mem_cpy>
c00020b8:	83 fb 05             	cmp    ebx,0x5
c00020bb:	76 2d                	jbe    c00020ea <gen_numname+0x4a>
c00020bd:	66 8b 07             	mov    ax,WORD PTR [edi]
c00020c0:	66 85 c0             	test   ax,ax
c00020c3:	74 25                	je     c00020ea <gen_numname+0x4a>
c00020c5:	83 c7 02             	add    edi,0x2
c00020c8:	ba 10 00 00 00       	mov    edx,0x10
c00020cd:	01 db                	add    ebx,ebx
c00020cf:	89 c1                	mov    ecx,eax
c00020d1:	66 d1 e8             	shr    ax,1
c00020d4:	83 e1 01             	and    ecx,0x1
c00020d7:	01 cb                	add    ebx,ecx
c00020d9:	0f ba e3 10          	bt     ebx,0x10
c00020dd:	73 06                	jae    c00020e5 <gen_numname+0x45>
c00020df:	81 f3 21 10 01 00    	xor    ebx,0x11021
c00020e5:	4a                   	dec    edx
c00020e6:	75 e5                	jne    c00020cd <gen_numname+0x2d>
c00020e8:	eb d3                	jmp    c00020bd <gen_numname+0x1d>
c00020ea:	b8 07 00 00 00       	mov    eax,0x7
c00020ef:	88 d9                	mov    cl,bl
c00020f1:	83 e1 0f             	and    ecx,0xf
c00020f4:	8d 51 30             	lea    edx,[ecx+0x30]
c00020f7:	80 fa 39             	cmp    dl,0x39
c00020fa:	76 03                	jbe    c00020ff <gen_numname+0x5f>
c00020fc:	8d 51 37             	lea    edx,[ecx+0x37]
c00020ff:	8d 48 ff             	lea    ecx,[eax-0x1]
c0002102:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c0002106:	89 da                	mov    edx,ebx
c0002108:	c1 ea 04             	shr    edx,0x4
c000210b:	83 fb 0f             	cmp    ebx,0xf
c000210e:	76 06                	jbe    c0002116 <gen_numname+0x76>
c0002110:	89 c8                	mov    eax,ecx
c0002112:	89 d3                	mov    ebx,edx
c0002114:	eb d9                	jmp    c00020ef <gen_numname+0x4f>
c0002116:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c000211b:	31 d2                	xor    edx,edx
c000211d:	8d 58 fe             	lea    ebx,[eax-0x2]
c0002120:	8d 04 16             	lea    eax,[esi+edx*1]
c0002123:	39 ca                	cmp    edx,ecx
c0002125:	73 18                	jae    c000213f <gen_numname+0x9f>
c0002127:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c000212a:	3c 20                	cmp    al,0x20
c000212c:	74 11                	je     c000213f <gen_numname+0x9f>
c000212e:	e8 8d fc ff ff       	call   c0001dc0 <dbc_1st>
c0002133:	85 c0                	test   eax,eax
c0002135:	74 05                	je     c000213c <gen_numname+0x9c>
c0002137:	39 d3                	cmp    ebx,edx
c0002139:	74 04                	je     c000213f <gen_numname+0x9f>
c000213b:	42                   	inc    edx
c000213c:	42                   	inc    edx
c000213d:	eb e1                	jmp    c0002120 <gen_numname+0x80>
c000213f:	b0 20                	mov    al,0x20
c0002141:	83 f9 07             	cmp    ecx,0x7
c0002144:	77 05                	ja     c000214b <gen_numname+0xab>
c0002146:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c000214a:	41                   	inc    ecx
c000214b:	42                   	inc    edx
c000214c:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c0002150:	83 fa 07             	cmp    edx,0x7
c0002153:	76 ea                	jbe    c000213f <gen_numname+0x9f>
c0002155:	83 c4 10             	add    esp,0x10
c0002158:	5b                   	pop    ebx
c0002159:	5e                   	pop    esi
c000215a:	5f                   	pop    edi
c000215b:	c3                   	ret    

c000215c <sum_sfn>:
c000215c:	31 c9                	xor    ecx,ecx
c000215e:	31 d2                	xor    edx,edx
c0002160:	d0 ca                	ror    dl,1
c0002162:	02 14 08             	add    dl,BYTE PTR [eax+ecx*1]
c0002165:	41                   	inc    ecx
c0002166:	83 f9 0b             	cmp    ecx,0xb
c0002169:	75 f5                	jne    c0002160 <sum_sfn+0x4>
c000216b:	88 d0                	mov    al,dl
c000216d:	c3                   	ret    

c000216e <get_ldnumber>:
c000216e:	8b 10                	mov    edx,DWORD PTR [eax]
c0002170:	85 d2                	test   edx,edx
c0002172:	74 14                	je     c0002188 <get_ldnumber+0x1a>
c0002174:	56                   	push   esi
c0002175:	53                   	push   ebx
c0002176:	89 d3                	mov    ebx,edx
c0002178:	43                   	inc    ebx
c0002179:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c000217c:	80 f9 1f             	cmp    cl,0x1f
c000217f:	76 0d                	jbe    c000218e <get_ldnumber+0x20>
c0002181:	80 f9 3a             	cmp    cl,0x3a
c0002184:	75 f2                	jne    c0002178 <get_ldnumber+0xa>
c0002186:	eb 0a                	jmp    c0002192 <get_ldnumber+0x24>
c0002188:	83 c9 ff             	or     ecx,0xffffffff
c000218b:	89 c8                	mov    eax,ecx
c000218d:	c3                   	ret    
c000218e:	31 c9                	xor    ecx,ecx
c0002190:	eb 24                	jmp    c00021b6 <get_ldnumber+0x48>
c0002192:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c0002195:	8d 4e d0             	lea    ecx,[esi-0x30]
c0002198:	80 f9 09             	cmp    cl,0x9
c000219b:	77 16                	ja     c00021b3 <get_ldnumber+0x45>
c000219d:	83 c2 02             	add    edx,0x2
c00021a0:	83 c9 ff             	or     ecx,0xffffffff
c00021a3:	39 d3                	cmp    ebx,edx
c00021a5:	75 0f                	jne    c00021b6 <get_ldnumber+0x48>
c00021a7:	89 f2                	mov    edx,esi
c00021a9:	89 18                	mov    DWORD PTR [eax],ebx
c00021ab:	0f be ca             	movsx  ecx,dl
c00021ae:	83 e9 30             	sub    ecx,0x30
c00021b1:	eb 03                	jmp    c00021b6 <get_ldnumber+0x48>
c00021b3:	83 c9 ff             	or     ecx,0xffffffff
c00021b6:	89 c8                	mov    eax,ecx
c00021b8:	5b                   	pop    ebx
c00021b9:	5e                   	pop    esi
c00021ba:	c3                   	ret    

c00021bb <validate>:
c00021bb:	56                   	push   esi
c00021bc:	53                   	push   ebx
c00021bd:	89 d6                	mov    esi,edx
c00021bf:	51                   	push   ecx
c00021c0:	85 c0                	test   eax,eax
c00021c2:	75 09                	jne    c00021cd <validate+0x12>
c00021c4:	b8 09 00 00 00       	mov    eax,0x9
c00021c9:	31 c9                	xor    ecx,ecx
c00021cb:	eb 2f                	jmp    c00021fc <validate+0x41>
c00021cd:	89 c3                	mov    ebx,eax
c00021cf:	8b 00                	mov    eax,DWORD PTR [eax]
c00021d1:	85 c0                	test   eax,eax
c00021d3:	74 ef                	je     c00021c4 <validate+0x9>
c00021d5:	80 38 00             	cmp    BYTE PTR [eax],0x0
c00021d8:	74 ea                	je     c00021c4 <validate+0x9>
c00021da:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c00021de:	66 39 53 04          	cmp    WORD PTR [ebx+0x4],dx
c00021e2:	75 e0                	jne    c00021c4 <validate+0x9>
c00021e4:	83 ec 0c             	sub    esp,0xc
c00021e7:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00021eb:	50                   	push   eax
c00021ec:	e8 fd fa ff ff       	call   c0001cee <disk_status>
c00021f1:	83 c4 10             	add    esp,0x10
c00021f4:	a8 01                	test   al,0x1
c00021f6:	75 cc                	jne    c00021c4 <validate+0x9>
c00021f8:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00021fa:	31 c0                	xor    eax,eax
c00021fc:	89 0e                	mov    DWORD PTR [esi],ecx
c00021fe:	5a                   	pop    edx
c00021ff:	5b                   	pop    ebx
c0002200:	5e                   	pop    esi
c0002201:	c3                   	ret    

c0002202 <sync_window>:
c0002202:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c0002206:	74 58                	je     c0002260 <sync_window+0x5e>
c0002208:	56                   	push   esi
c0002209:	53                   	push   ebx
c000220a:	8d 70 34             	lea    esi,[eax+0x34]
c000220d:	51                   	push   ecx
c000220e:	89 c3                	mov    ebx,eax
c0002210:	6a 01                	push   0x1
c0002212:	ff 70 30             	push   DWORD PTR [eax+0x30]
c0002215:	56                   	push   esi
c0002216:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000221a:	50                   	push   eax
c000221b:	e8 ea fa ff ff       	call   c0001d0a <disk_write>
c0002220:	83 c4 10             	add    esp,0x10
c0002223:	ba 01 00 00 00       	mov    edx,0x1
c0002228:	85 c0                	test   eax,eax
c000222a:	75 2e                	jne    c000225a <sync_window+0x58>
c000222c:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c000222f:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0002232:	89 c1                	mov    ecx,eax
c0002234:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c0002238:	2b 4b 24             	sub    ecx,DWORD PTR [ebx+0x24]
c000223b:	39 d1                	cmp    ecx,edx
c000223d:	73 19                	jae    c0002258 <sync_window+0x56>
c000223f:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c0002243:	75 13                	jne    c0002258 <sync_window+0x56>
c0002245:	6a 01                	push   0x1
c0002247:	01 d0                	add    eax,edx
c0002249:	50                   	push   eax
c000224a:	56                   	push   esi
c000224b:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000224f:	50                   	push   eax
c0002250:	e8 b5 fa ff ff       	call   c0001d0a <disk_write>
c0002255:	83 c4 10             	add    esp,0x10
c0002258:	31 d2                	xor    edx,edx
c000225a:	89 d0                	mov    eax,edx
c000225c:	5a                   	pop    edx
c000225d:	5b                   	pop    ebx
c000225e:	5e                   	pop    esi
c000225f:	c3                   	ret    
c0002260:	31 d2                	xor    edx,edx
c0002262:	89 d0                	mov    eax,edx
c0002264:	c3                   	ret    

c0002265 <move_window>:
c0002265:	57                   	push   edi
c0002266:	56                   	push   esi
c0002267:	31 f6                	xor    esi,esi
c0002269:	53                   	push   ebx
c000226a:	39 50 30             	cmp    DWORD PTR [eax+0x30],edx
c000226d:	74 32                	je     c00022a1 <move_window+0x3c>
c000226f:	89 c3                	mov    ebx,eax
c0002271:	89 d7                	mov    edi,edx
c0002273:	e8 8a ff ff ff       	call   c0002202 <sync_window>
c0002278:	89 c6                	mov    esi,eax
c000227a:	85 c0                	test   eax,eax
c000227c:	75 23                	jne    c00022a1 <move_window+0x3c>
c000227e:	6a 01                	push   0x1
c0002280:	8d 43 34             	lea    eax,[ebx+0x34]
c0002283:	57                   	push   edi
c0002284:	50                   	push   eax
c0002285:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002289:	50                   	push   eax
c000228a:	e8 65 fa ff ff       	call   c0001cf4 <disk_read>
c000228f:	83 c4 10             	add    esp,0x10
c0002292:	85 c0                	test   eax,eax
c0002294:	74 08                	je     c000229e <move_window+0x39>
c0002296:	be 01 00 00 00       	mov    esi,0x1
c000229b:	83 cf ff             	or     edi,0xffffffff
c000229e:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c00022a1:	89 f0                	mov    eax,esi
c00022a3:	5b                   	pop    ebx
c00022a4:	5e                   	pop    esi
c00022a5:	5f                   	pop    edi
c00022a6:	c3                   	ret    

c00022a7 <check_fs>:
c00022a7:	53                   	push   ebx
c00022a8:	89 c3                	mov    ebx,eax
c00022aa:	83 ec 08             	sub    esp,0x8
c00022ad:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c00022b1:	c7 40 30 ff ff ff ff 	mov    DWORD PTR [eax+0x30],0xffffffff
c00022b8:	e8 a8 ff ff ff       	call   c0002265 <move_window>
c00022bd:	ba 04 00 00 00       	mov    edx,0x4
c00022c2:	85 c0                	test   eax,eax
c00022c4:	75 68                	jne    c000232e <check_fs+0x87>
c00022c6:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c00022cc:	e8 6e fa ff ff       	call   c0001d3f <ld_word>
c00022d1:	ba 03 00 00 00       	mov    edx,0x3
c00022d6:	66 3d 55 aa          	cmp    ax,0xaa55
c00022da:	75 52                	jne    c000232e <check_fs+0x87>
c00022dc:	8a 43 34             	mov    al,BYTE PTR [ebx+0x34]
c00022df:	8d 50 18             	lea    edx,[eax+0x18]
c00022e2:	80 fa 01             	cmp    dl,0x1
c00022e5:	76 09                	jbe    c00022f0 <check_fs+0x49>
c00022e7:	ba 02 00 00 00       	mov    edx,0x2
c00022ec:	3c eb                	cmp    al,0xeb
c00022ee:	75 3e                	jne    c000232e <check_fs+0x87>
c00022f0:	ba a8 ed 01 c0       	mov    edx,0xc001eda8
c00022f5:	8d 43 6a             	lea    eax,[ebx+0x6a]
c00022f8:	b9 03 00 00 00       	mov    ecx,0x3
c00022fd:	e8 89 fa ff ff       	call   c0001d8b <mem_cmp>
c0002302:	31 d2                	xor    edx,edx
c0002304:	85 c0                	test   eax,eax
c0002306:	74 26                	je     c000232e <check_fs+0x87>
c0002308:	ba 5c ce 01 c0       	mov    edx,0xc001ce5c
c000230d:	8d 83 86 00 00 00    	lea    eax,[ebx+0x86]
c0002313:	b9 05 00 00 00       	mov    ecx,0x5
c0002318:	e8 6e fa ff ff       	call   c0001d8b <mem_cmp>
c000231d:	31 d2                	xor    edx,edx
c000231f:	85 c0                	test   eax,eax
c0002321:	74 0b                	je     c000232e <check_fs+0x87>
c0002323:	31 d2                	xor    edx,edx
c0002325:	80 7b 76 28          	cmp    BYTE PTR [ebx+0x76],0x28
c0002329:	0f 95 c2             	setne  dl
c000232c:	01 d2                	add    edx,edx
c000232e:	89 d0                	mov    eax,edx
c0002330:	83 c4 08             	add    esp,0x8
c0002333:	5b                   	pop    ebx
c0002334:	c3                   	ret    

c0002335 <find_volume>:
c0002335:	55                   	push   ebp
c0002336:	57                   	push   edi
c0002337:	56                   	push   esi
c0002338:	89 c6                	mov    esi,eax
c000233a:	53                   	push   ebx
c000233b:	89 d3                	mov    ebx,edx
c000233d:	83 ec 2c             	sub    esp,0x2c
c0002340:	31 d2                	xor    edx,edx
c0002342:	e8 60 ff ff ff       	call   c00022a7 <check_fs>
c0002347:	83 f8 02             	cmp    eax,0x2
c000234a:	74 06                	je     c0002352 <find_volume+0x1d>
c000234c:	77 62                	ja     c00023b0 <find_volume+0x7b>
c000234e:	85 db                	test   ebx,ebx
c0002350:	74 5e                	je     c00023b0 <find_volume+0x7b>
c0002352:	8d 4c 24 10          	lea    ecx,[esp+0x10]
c0002356:	8d 86 3a 02 00 00    	lea    eax,[esi+0x23a]
c000235c:	8d ae fa 01 00 00    	lea    ebp,[esi+0x1fa]
c0002362:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002366:	89 cf                	mov    edi,ecx
c0002368:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000236c:	89 e8                	mov    eax,ebp
c000236e:	83 c5 10             	add    ebp,0x10
c0002371:	e8 d6 f9 ff ff       	call   c0001d4c <ld_dword>
c0002376:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000237a:	89 01                	mov    DWORD PTR [ecx],eax
c000237c:	83 c1 04             	add    ecx,0x4
c000237f:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c0002383:	75 e3                	jne    c0002368 <find_volume+0x33>
c0002385:	31 ed                	xor    ebp,ebp
c0002387:	85 db                	test   ebx,ebx
c0002389:	74 03                	je     c000238e <find_volume+0x59>
c000238b:	8d 6b ff             	lea    ebp,[ebx-0x1]
c000238e:	8b 14 af             	mov    edx,DWORD PTR [edi+ebp*4]
c0002391:	b8 03 00 00 00       	mov    eax,0x3
c0002396:	85 d2                	test   edx,edx
c0002398:	74 0c                	je     c00023a6 <find_volume+0x71>
c000239a:	89 f0                	mov    eax,esi
c000239c:	e8 06 ff ff ff       	call   c00022a7 <check_fs>
c00023a1:	83 f8 01             	cmp    eax,0x1
c00023a4:	76 0a                	jbe    c00023b0 <find_volume+0x7b>
c00023a6:	85 db                	test   ebx,ebx
c00023a8:	75 06                	jne    c00023b0 <find_volume+0x7b>
c00023aa:	45                   	inc    ebp
c00023ab:	83 fd 03             	cmp    ebp,0x3
c00023ae:	76 de                	jbe    c000238e <find_volume+0x59>
c00023b0:	83 c4 2c             	add    esp,0x2c
c00023b3:	5b                   	pop    ebx
c00023b4:	5e                   	pop    esi
c00023b5:	5f                   	pop    edi
c00023b6:	5d                   	pop    ebp
c00023b7:	c3                   	ret    

c00023b8 <mount_volume>:
c00023b8:	55                   	push   ebp
c00023b9:	89 d5                	mov    ebp,edx
c00023bb:	57                   	push   edi
c00023bc:	89 cf                	mov    edi,ecx
c00023be:	56                   	push   esi
c00023bf:	53                   	push   ebx
c00023c0:	bb 0b 00 00 00       	mov    ebx,0xb
c00023c5:	83 ec 2c             	sub    esp,0x2c
c00023c8:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00023ce:	e8 9b fd ff ff       	call   c000216e <get_ldnumber>
c00023d3:	85 c0                	test   eax,eax
c00023d5:	0f 88 d6 02 00 00    	js     c00026b1 <mount_volume+0x2f9>
c00023db:	8b 34 85 a0 fd 01 c0 	mov    esi,DWORD PTR [eax*4-0x3ffe0260]
c00023e2:	89 c2                	mov    edx,eax
c00023e4:	bb 0c 00 00 00       	mov    ebx,0xc
c00023e9:	85 f6                	test   esi,esi
c00023eb:	0f 84 c0 02 00 00    	je     c00026b1 <mount_volume+0x2f9>
c00023f1:	89 75 00             	mov    DWORD PTR [ebp+0x0],esi
c00023f4:	83 e7 fe             	and    edi,0xfffffffe
c00023f7:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c00023fa:	74 3a                	je     c0002436 <mount_volume+0x7e>
c00023fc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002400:	83 ec 0c             	sub    esp,0xc
c0002403:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0002407:	50                   	push   eax
c0002408:	e8 e1 f8 ff ff       	call   c0001cee <disk_status>
c000240d:	83 c4 10             	add    esp,0x10
c0002410:	a8 01                	test   al,0x1
c0002412:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002416:	75 1e                	jne    c0002436 <mount_volume+0x7e>
c0002418:	31 db                	xor    ebx,ebx
c000241a:	89 f9                	mov    ecx,edi
c000241c:	84 c9                	test   cl,cl
c000241e:	0f 84 8d 02 00 00    	je     c00026b1 <mount_volume+0x2f9>
c0002424:	a8 04                	test   al,0x4
c0002426:	0f 84 85 02 00 00    	je     c00026b1 <mount_volume+0x2f9>
c000242c:	bb 0a 00 00 00       	mov    ebx,0xa
c0002431:	e9 7b 02 00 00       	jmp    c00026b1 <mount_volume+0x2f9>
c0002436:	83 ec 0c             	sub    esp,0xc
c0002439:	c6 06 00             	mov    BYTE PTR [esi],0x0
c000243c:	88 56 01             	mov    BYTE PTR [esi+0x1],dl
c000243f:	0f b6 c2             	movzx  eax,dl
c0002442:	bb 03 00 00 00       	mov    ebx,0x3
c0002447:	50                   	push   eax
c0002448:	e8 a4 f8 ff ff       	call   c0001cf1 <disk_initialize>
c000244d:	83 c4 10             	add    esp,0x10
c0002450:	a8 01                	test   al,0x1
c0002452:	0f 85 59 02 00 00    	jne    c00026b1 <mount_volume+0x2f9>
c0002458:	89 f9                	mov    ecx,edi
c000245a:	84 c9                	test   cl,cl
c000245c:	74 04                	je     c0002462 <mount_volume+0xaa>
c000245e:	a8 04                	test   al,0x4
c0002460:	75 ca                	jne    c000242c <mount_volume+0x74>
c0002462:	31 d2                	xor    edx,edx
c0002464:	89 f0                	mov    eax,esi
c0002466:	bb 01 00 00 00       	mov    ebx,0x1
c000246b:	e8 c5 fe ff ff       	call   c0002335 <find_volume>
c0002470:	83 f8 04             	cmp    eax,0x4
c0002473:	0f 84 38 02 00 00    	je     c00026b1 <mount_volume+0x2f9>
c0002479:	83 f8 01             	cmp    eax,0x1
c000247c:	76 0a                	jbe    c0002488 <mount_volume+0xd0>
c000247e:	bb 0d 00 00 00       	mov    ebx,0xd
c0002483:	e9 29 02 00 00       	jmp    c00026b1 <mount_volume+0x2f9>
c0002488:	8d 46 3f             	lea    eax,[esi+0x3f]
c000248b:	e8 af f8 ff ff       	call   c0001d3f <ld_word>
c0002490:	66 3d 00 02          	cmp    ax,0x200
c0002494:	75 e8                	jne    c000247e <mount_volume+0xc6>
c0002496:	8d 46 4a             	lea    eax,[esi+0x4a]
c0002499:	e8 a1 f8 ff ff       	call   c0001d3f <ld_word>
c000249e:	0f b7 c0             	movzx  eax,ax
c00024a1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00024a5:	85 c0                	test   eax,eax
c00024a7:	75 0c                	jne    c00024b5 <mount_volume+0xfd>
c00024a9:	8d 46 58             	lea    eax,[esi+0x58]
c00024ac:	e8 9b f8 ff ff       	call   c0001d4c <ld_dword>
c00024b1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00024b5:	8b 46 30             	mov    eax,DWORD PTR [esi+0x30]
c00024b8:	8b 6e 44             	mov    ebp,DWORD PTR [esi+0x44]
c00024bb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00024bf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00024c3:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c00024c6:	89 e8                	mov    eax,ebp
c00024c8:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c00024cb:	8d 45 ff             	lea    eax,[ebp-0x1]
c00024ce:	3c 01                	cmp    al,0x1
c00024d0:	77 ac                	ja     c000247e <mount_volume+0xc6>
c00024d2:	0f b6 46 41          	movzx  eax,BYTE PTR [esi+0x41]
c00024d6:	89 c3                	mov    ebx,eax
c00024d8:	66 89 46 0a          	mov    WORD PTR [esi+0xa],ax
c00024dc:	66 85 c0             	test   ax,ax
c00024df:	74 9d                	je     c000247e <mount_volume+0xc6>
c00024e1:	8d 40 ff             	lea    eax,[eax-0x1]
c00024e4:	85 d8                	test   eax,ebx
c00024e6:	75 96                	jne    c000247e <mount_volume+0xc6>
c00024e8:	8d 46 45             	lea    eax,[esi+0x45]
c00024eb:	e8 4f f8 ff ff       	call   c0001d3f <ld_word>
c00024f0:	89 c7                	mov    edi,eax
c00024f2:	66 89 46 08          	mov    WORD PTR [esi+0x8],ax
c00024f6:	a8 0f                	test   al,0xf
c00024f8:	75 84                	jne    c000247e <mount_volume+0xc6>
c00024fa:	8d 46 47             	lea    eax,[esi+0x47]
c00024fd:	e8 3d f8 ff ff       	call   c0001d3f <ld_word>
c0002502:	0f b7 d0             	movzx  edx,ax
c0002505:	85 d2                	test   edx,edx
c0002507:	75 0a                	jne    c0002513 <mount_volume+0x15b>
c0002509:	8d 46 54             	lea    eax,[esi+0x54]
c000250c:	e8 3b f8 ff ff       	call   c0001d4c <ld_dword>
c0002511:	89 c2                	mov    edx,eax
c0002513:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002517:	8d 46 42             	lea    eax,[esi+0x42]
c000251a:	e8 20 f8 ff ff       	call   c0001d3f <ld_word>
c000251f:	66 85 c0             	test   ax,ax
c0002522:	0f 84 56 ff ff ff    	je     c000247e <mount_volume+0xc6>
c0002528:	89 e9                	mov    ecx,ebp
c000252a:	0f b7 c0             	movzx  eax,ax
c000252d:	0f b6 e9             	movzx  ebp,cl
c0002530:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002534:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002538:	89 f8                	mov    eax,edi
c000253a:	0f af cd             	imul   ecx,ebp
c000253d:	66 c1 e8 04          	shr    ax,0x4
c0002541:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0002545:	0f b7 c0             	movzx  eax,ax
c0002548:	01 c8                	add    eax,ecx
c000254a:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c000254e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002552:	39 c2                	cmp    edx,eax
c0002554:	0f 82 24 ff ff ff    	jb     c000247e <mount_volume+0xc6>
c000255a:	29 c2                	sub    edx,eax
c000255c:	89 d5                	mov    ebp,edx
c000255e:	89 d0                	mov    eax,edx
c0002560:	31 d2                	xor    edx,edx
c0002562:	f7 f3                	div    ebx
c0002564:	39 dd                	cmp    ebp,ebx
c0002566:	0f 82 12 ff ff ff    	jb     c000247e <mount_volume+0xc6>
c000256c:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c0002571:	0f 87 07 ff ff ff    	ja     c000247e <mount_volume+0xc6>
c0002577:	3d f5 ff 00 00       	cmp    eax,0xfff5
c000257c:	0f 86 1f 01 00 00    	jbe    c00026a1 <mount_volume+0x2e9>
c0002582:	bb 03 00 00 00       	mov    ebx,0x3
c0002587:	8d 68 02             	lea    ebp,[eax+0x2]
c000258a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000258e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002592:	03 54 24 10          	add    edx,DWORD PTR [esp+0x10]
c0002596:	89 46 20             	mov    DWORD PTR [esi+0x20],eax
c0002599:	89 6e 18             	mov    DWORD PTR [esi+0x18],ebp
c000259c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00025a0:	89 56 2c             	mov    DWORD PTR [esi+0x2c],edx
c00025a3:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c00025a7:	83 fb 03             	cmp    ebx,0x3
c00025aa:	89 46 24             	mov    DWORD PTR [esi+0x24],eax
c00025ad:	75 21                	jne    c00025d0 <mount_volume+0x218>
c00025af:	8d 46 5e             	lea    eax,[esi+0x5e]
c00025b2:	e8 88 f7 ff ff       	call   c0001d3f <ld_word>
c00025b7:	66 09 c7             	or     di,ax
c00025ba:	0f 85 be fe ff ff    	jne    c000247e <mount_volume+0xc6>
c00025c0:	8d 46 60             	lea    eax,[esi+0x60]
c00025c3:	c1 e5 02             	shl    ebp,0x2
c00025c6:	e8 81 f7 ff ff       	call   c0001d4c <ld_dword>
c00025cb:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c00025ce:	eb 22                	jmp    c00025f2 <mount_volume+0x23a>
c00025d0:	66 85 ff             	test   di,di
c00025d3:	0f 84 a5 fe ff ff    	je     c000247e <mount_volume+0xc6>
c00025d9:	01 c8                	add    eax,ecx
c00025db:	83 fb 02             	cmp    ebx,0x2
c00025de:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c00025e1:	75 04                	jne    c00025e7 <mount_volume+0x22f>
c00025e3:	01 ed                	add    ebp,ebp
c00025e5:	eb 0b                	jmp    c00025f2 <mount_volume+0x23a>
c00025e7:	8d 44 6d 00          	lea    eax,[ebp+ebp*2+0x0]
c00025eb:	83 e5 01             	and    ebp,0x1
c00025ee:	d1 e8                	shr    eax,1
c00025f0:	01 c5                	add    ebp,eax
c00025f2:	81 c5 ff 01 00 00    	add    ebp,0x1ff
c00025f8:	c1 ed 09             	shr    ebp,0x9
c00025fb:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c00025ff:	0f 87 79 fe ff ff    	ja     c000247e <mount_volume+0xc6>
c0002605:	c7 46 14 ff ff ff ff 	mov    DWORD PTR [esi+0x14],0xffffffff
c000260c:	c7 46 10 ff ff ff ff 	mov    DWORD PTR [esi+0x10],0xffffffff
c0002613:	c6 46 04 80          	mov    BYTE PTR [esi+0x4],0x80
c0002617:	83 fb 03             	cmp    ebx,0x3
c000261a:	75 6e                	jne    c000268a <mount_volume+0x2d2>
c000261c:	8d 46 64             	lea    eax,[esi+0x64]
c000261f:	e8 1b f7 ff ff       	call   c0001d3f <ld_word>
c0002624:	66 48                	dec    ax
c0002626:	75 62                	jne    c000268a <mount_volume+0x2d2>
c0002628:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000262c:	89 f0                	mov    eax,esi
c000262e:	42                   	inc    edx
c000262f:	e8 31 fc ff ff       	call   c0002265 <move_window>
c0002634:	85 c0                	test   eax,eax
c0002636:	75 52                	jne    c000268a <mount_volume+0x2d2>
c0002638:	c6 46 04 00          	mov    BYTE PTR [esi+0x4],0x0
c000263c:	8d 86 32 02 00 00    	lea    eax,[esi+0x232]
c0002642:	e8 f8 f6 ff ff       	call   c0001d3f <ld_word>
c0002647:	66 3d 55 aa          	cmp    ax,0xaa55
c000264b:	75 3d                	jne    c000268a <mount_volume+0x2d2>
c000264d:	8d 46 34             	lea    eax,[esi+0x34]
c0002650:	e8 f7 f6 ff ff       	call   c0001d4c <ld_dword>
c0002655:	3d 52 52 61 41       	cmp    eax,0x41615252
c000265a:	75 2e                	jne    c000268a <mount_volume+0x2d2>
c000265c:	8d 86 18 02 00 00    	lea    eax,[esi+0x218]
c0002662:	e8 e5 f6 ff ff       	call   c0001d4c <ld_dword>
c0002667:	3d 72 72 41 61       	cmp    eax,0x61417272
c000266c:	75 1c                	jne    c000268a <mount_volume+0x2d2>
c000266e:	8d 86 1c 02 00 00    	lea    eax,[esi+0x21c]
c0002674:	e8 d3 f6 ff ff       	call   c0001d4c <ld_dword>
c0002679:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000267c:	8d 86 20 02 00 00    	lea    eax,[esi+0x220]
c0002682:	e8 c5 f6 ff ff       	call   c0001d4c <ld_dword>
c0002687:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000268a:	66 a1 80 fd 01 c0    	mov    ax,ds:0xc001fd80
c0002690:	88 1e                	mov    BYTE PTR [esi],bl
c0002692:	40                   	inc    eax
c0002693:	31 db                	xor    ebx,ebx
c0002695:	66 a3 80 fd 01 c0    	mov    ds:0xc001fd80,ax
c000269b:	66 89 46 06          	mov    WORD PTR [esi+0x6],ax
c000269f:	eb 10                	jmp    c00026b1 <mount_volume+0x2f9>
c00026a1:	31 db                	xor    ebx,ebx
c00026a3:	3d f5 0f 00 00       	cmp    eax,0xff5
c00026a8:	0f 97 c3             	seta   bl
c00026ab:	43                   	inc    ebx
c00026ac:	e9 d6 fe ff ff       	jmp    c0002587 <mount_volume+0x1cf>
c00026b1:	83 c4 2c             	add    esp,0x2c
c00026b4:	89 d8                	mov    eax,ebx
c00026b6:	5b                   	pop    ebx
c00026b7:	5e                   	pop    esi
c00026b8:	5f                   	pop    edi
c00026b9:	5d                   	pop    ebp
c00026ba:	c3                   	ret    

c00026bb <put_fat>:
c00026bb:	55                   	push   ebp
c00026bc:	bd 02 00 00 00       	mov    ebp,0x2
c00026c1:	57                   	push   edi
c00026c2:	56                   	push   esi
c00026c3:	53                   	push   ebx
c00026c4:	83 ec 1c             	sub    esp,0x1c
c00026c7:	83 fa 01             	cmp    edx,0x1
c00026ca:	0f 86 31 01 00 00    	jbe    c0002801 <put_fat+0x146>
c00026d0:	39 50 18             	cmp    DWORD PTR [eax+0x18],edx
c00026d3:	0f 86 28 01 00 00    	jbe    c0002801 <put_fat+0x146>
c00026d9:	89 c6                	mov    esi,eax
c00026db:	89 cf                	mov    edi,ecx
c00026dd:	8a 00                	mov    al,BYTE PTR [eax]
c00026df:	89 d3                	mov    ebx,edx
c00026e1:	3c 02                	cmp    al,0x2
c00026e3:	0f 84 ac 00 00 00    	je     c0002795 <put_fat+0xda>
c00026e9:	3c 03                	cmp    al,0x3
c00026eb:	0f 84 d1 00 00 00    	je     c00027c2 <put_fat+0x107>
c00026f1:	fe c8                	dec    al
c00026f3:	0f 85 08 01 00 00    	jne    c0002801 <put_fat+0x146>
c00026f9:	89 d1                	mov    ecx,edx
c00026fb:	89 f0                	mov    eax,esi
c00026fd:	d1 e9                	shr    ecx,1
c00026ff:	01 d1                	add    ecx,edx
c0002701:	89 ca                	mov    edx,ecx
c0002703:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002707:	c1 ea 09             	shr    edx,0x9
c000270a:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c000270d:	e8 53 fb ff ff       	call   c0002265 <move_window>
c0002712:	89 c5                	mov    ebp,eax
c0002714:	85 c0                	test   eax,eax
c0002716:	0f 85 e5 00 00 00    	jne    c0002801 <put_fat+0x146>
c000271c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002720:	8d 46 34             	lea    eax,[esi+0x34]
c0002723:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002727:	8d 41 01             	lea    eax,[ecx+0x1]
c000272a:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c0002730:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002734:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002738:	89 f8                	mov    eax,edi
c000273a:	83 e3 01             	and    ebx,0x1
c000273d:	74 0c                	je     c000274b <put_fat+0x90>
c000273f:	8a 11                	mov    dl,BYTE PTR [ecx]
c0002741:	89 f8                	mov    eax,edi
c0002743:	83 e2 0f             	and    edx,0xf
c0002746:	c1 e0 04             	shl    eax,0x4
c0002749:	09 d0                	or     eax,edx
c000274b:	88 01                	mov    BYTE PTR [ecx],al
c000274d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002751:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002755:	c1 ea 09             	shr    edx,0x9
c0002758:	89 f0                	mov    eax,esi
c000275a:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c000275d:	e8 03 fb ff ff       	call   c0002265 <move_window>
c0002762:	89 c5                	mov    ebp,eax
c0002764:	85 c0                	test   eax,eax
c0002766:	0f 85 95 00 00 00    	jne    c0002801 <put_fat+0x146>
c000276c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002770:	25 ff 01 00 00       	and    eax,0x1ff
c0002775:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002779:	85 db                	test   ebx,ebx
c000277b:	74 07                	je     c0002784 <put_fat+0xc9>
c000277d:	c1 ef 04             	shr    edi,0x4
c0002780:	89 f9                	mov    ecx,edi
c0002782:	eb 0d                	jmp    c0002791 <put_fat+0xd6>
c0002784:	8a 08                	mov    cl,BYTE PTR [eax]
c0002786:	c1 ef 08             	shr    edi,0x8
c0002789:	83 e1 f0             	and    ecx,0xfffffff0
c000278c:	83 e7 0f             	and    edi,0xf
c000278f:	09 f9                	or     ecx,edi
c0002791:	88 08                	mov    BYTE PTR [eax],cl
c0002793:	eb 27                	jmp    c00027bc <put_fat+0x101>
c0002795:	c1 ea 08             	shr    edx,0x8
c0002798:	89 f0                	mov    eax,esi
c000279a:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c000279d:	e8 c3 fa ff ff       	call   c0002265 <move_window>
c00027a2:	89 c5                	mov    ebp,eax
c00027a4:	85 c0                	test   eax,eax
c00027a6:	75 59                	jne    c0002801 <put_fat+0x146>
c00027a8:	01 db                	add    ebx,ebx
c00027aa:	0f b7 d7             	movzx  edx,di
c00027ad:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c00027b3:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c00027b7:	e8 a8 f5 ff ff       	call   c0001d64 <st_word>
c00027bc:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c00027c0:	eb 3f                	jmp    c0002801 <put_fat+0x146>
c00027c2:	c1 ea 07             	shr    edx,0x7
c00027c5:	89 f0                	mov    eax,esi
c00027c7:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00027ca:	e8 96 fa ff ff       	call   c0002265 <move_window>
c00027cf:	89 c5                	mov    ebp,eax
c00027d1:	85 c0                	test   eax,eax
c00027d3:	75 2c                	jne    c0002801 <put_fat+0x146>
c00027d5:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c00027db:	c1 e3 02             	shl    ebx,0x2
c00027de:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c00027e4:	8d 5c 1e 34          	lea    ebx,[esi+ebx*1+0x34]
c00027e8:	89 d8                	mov    eax,ebx
c00027ea:	e8 5d f5 ff ff       	call   c0001d4c <ld_dword>
c00027ef:	25 00 00 00 f0       	and    eax,0xf0000000
c00027f4:	09 f8                	or     eax,edi
c00027f6:	89 c2                	mov    edx,eax
c00027f8:	89 d8                	mov    eax,ebx
c00027fa:	e8 69 f5 ff ff       	call   c0001d68 <st_dword>
c00027ff:	eb bb                	jmp    c00027bc <put_fat+0x101>
c0002801:	83 c4 1c             	add    esp,0x1c
c0002804:	89 e8                	mov    eax,ebp
c0002806:	5b                   	pop    ebx
c0002807:	5e                   	pop    esi
c0002808:	5f                   	pop    edi
c0002809:	5d                   	pop    ebp
c000280a:	c3                   	ret    

c000280b <dir_clear>:
c000280b:	55                   	push   ebp
c000280c:	57                   	push   edi
c000280d:	56                   	push   esi
c000280e:	89 c6                	mov    esi,eax
c0002810:	53                   	push   ebx
c0002811:	83 ec 1c             	sub    esp,0x1c
c0002814:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0002818:	e8 e5 f9 ff ff       	call   c0002202 <sync_window>
c000281d:	85 c0                	test   eax,eax
c000281f:	0f 85 c0 00 00 00    	jne    c00028e5 <dir_clear+0xda>
c0002825:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002829:	89 f0                	mov    eax,esi
c000282b:	e8 55 f7 ff ff       	call   c0001f85 <clst2sect>
c0002830:	31 d2                	xor    edx,edx
c0002832:	89 46 30             	mov    DWORD PTR [esi+0x30],eax
c0002835:	89 c5                	mov    ebp,eax
c0002837:	b9 00 02 00 00       	mov    ecx,0x200
c000283c:	8d 46 34             	lea    eax,[esi+0x34]
c000283f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002843:	e8 38 f5 ff ff       	call   c0001d80 <mem_set>
c0002848:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c000284c:	c1 e3 09             	shl    ebx,0x9
c000284f:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0002855:	76 1b                	jbe    c0002872 <dir_clear+0x67>
c0002857:	bb 00 80 00 00       	mov    ebx,0x8000
c000285c:	eb 14                	jmp    c0002872 <dir_clear+0x67>
c000285e:	83 ec 0c             	sub    esp,0xc
c0002861:	53                   	push   ebx
c0002862:	e8 25 32 00 00       	call   c0005a8c <ff_memalloc>
c0002867:	83 c4 10             	add    esp,0x10
c000286a:	89 c7                	mov    edi,eax
c000286c:	85 c0                	test   eax,eax
c000286e:	75 7c                	jne    c00028ec <dir_clear+0xe1>
c0002870:	d1 eb                	shr    ebx,1
c0002872:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002878:	77 e4                	ja     c000285e <dir_clear+0x53>
c000287a:	31 db                	xor    ebx,ebx
c000287c:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0002880:	39 d8                	cmp    eax,ebx
c0002882:	76 53                	jbe    c00028d7 <dir_clear+0xcc>
c0002884:	6a 01                	push   0x1
c0002886:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002889:	50                   	push   eax
c000288a:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c000288e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0002892:	50                   	push   eax
c0002893:	e8 72 f4 ff ff       	call   c0001d0a <disk_write>
c0002898:	83 c4 10             	add    esp,0x10
c000289b:	85 c0                	test   eax,eax
c000289d:	75 38                	jne    c00028d7 <dir_clear+0xcc>
c000289f:	43                   	inc    ebx
c00028a0:	eb da                	jmp    c000287c <dir_clear+0x71>
c00028a2:	52                   	push   edx
c00028a3:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c00028a6:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00028aa:	50                   	push   eax
c00028ab:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00028af:	57                   	push   edi
c00028b0:	50                   	push   eax
c00028b1:	e8 54 f4 ff ff       	call   c0001d0a <disk_write>
c00028b6:	83 c4 10             	add    esp,0x10
c00028b9:	85 c0                	test   eax,eax
c00028bb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00028bf:	75 0a                	jne    c00028cb <dir_clear+0xc0>
c00028c1:	01 d3                	add    ebx,edx
c00028c3:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00028c7:	39 d8                	cmp    eax,ebx
c00028c9:	77 d7                	ja     c00028a2 <dir_clear+0x97>
c00028cb:	83 ec 0c             	sub    esp,0xc
c00028ce:	57                   	push   edi
c00028cf:	e8 d0 31 00 00       	call   c0005aa4 <ff_memfree>
c00028d4:	83 c4 10             	add    esp,0x10
c00028d7:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00028db:	39 d8                	cmp    eax,ebx
c00028dd:	0f 95 c0             	setne  al
c00028e0:	0f b6 c0             	movzx  eax,al
c00028e3:	eb 19                	jmp    c00028fe <dir_clear+0xf3>
c00028e5:	b8 01 00 00 00       	mov    eax,0x1
c00028ea:	eb 12                	jmp    c00028fe <dir_clear+0xf3>
c00028ec:	89 d9                	mov    ecx,ebx
c00028ee:	31 d2                	xor    edx,edx
c00028f0:	e8 8b f4 ff ff       	call   c0001d80 <mem_set>
c00028f5:	89 da                	mov    edx,ebx
c00028f7:	31 db                	xor    ebx,ebx
c00028f9:	c1 ea 09             	shr    edx,0x9
c00028fc:	eb c5                	jmp    c00028c3 <dir_clear+0xb8>
c00028fe:	83 c4 1c             	add    esp,0x1c
c0002901:	5b                   	pop    ebx
c0002902:	5e                   	pop    esi
c0002903:	5f                   	pop    edi
c0002904:	5d                   	pop    ebp
c0002905:	c3                   	ret    

c0002906 <create_name>:
c0002906:	55                   	push   ebp
c0002907:	89 d5                	mov    ebp,edx
c0002909:	57                   	push   edi
c000290a:	89 c7                	mov    edi,eax
c000290c:	56                   	push   esi
c000290d:	31 f6                	xor    esi,esi
c000290f:	53                   	push   ebx
c0002910:	83 ec 3c             	sub    esp,0x3c
c0002913:	8b 02                	mov    eax,DWORD PTR [edx]
c0002915:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002919:	8b 07                	mov    eax,DWORD PTR [edi]
c000291b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000291e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002922:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0002926:	e8 9b f4 ff ff       	call   c0001dc6 <tchar2uni>
c000292b:	89 c3                	mov    ebx,eax
c000292d:	83 f8 ff             	cmp    eax,0xffffffff
c0002930:	75 0a                	jne    c000293c <create_name+0x36>
c0002932:	b8 06 00 00 00       	mov    eax,0x6
c0002937:	e9 9e 02 00 00       	jmp    c0002bda <create_name+0x2d4>
c000293c:	3d ff ff 00 00       	cmp    eax,0xffff
c0002941:	76 0c                	jbe    c000294f <create_name+0x49>
c0002943:	c1 e8 10             	shr    eax,0x10
c0002946:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000294a:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c000294e:	46                   	inc    esi
c000294f:	66 83 fb 1f          	cmp    bx,0x1f
c0002953:	76 4f                	jbe    c00029a4 <create_name+0x9e>
c0002955:	66 83 fb 5c          	cmp    bx,0x5c
c0002959:	74 35                	je     c0002990 <create_name+0x8a>
c000295b:	66 83 fb 2f          	cmp    bx,0x2f
c000295f:	74 2f                	je     c0002990 <create_name+0x8a>
c0002961:	66 83 fb 7f          	cmp    bx,0x7f
c0002965:	77 11                	ja     c0002978 <create_name+0x72>
c0002967:	0f b7 d3             	movzx  edx,bx
c000296a:	b8 62 ce 01 c0       	mov    eax,0xc001ce62
c000296f:	e8 3a f4 ff ff       	call   c0001dae <chk_chr>
c0002974:	85 c0                	test   eax,eax
c0002976:	75 ba                	jne    c0002932 <create_name+0x2c>
c0002978:	81 fe fe 00 00 00    	cmp    esi,0xfe
c000297e:	77 b2                	ja     c0002932 <create_name+0x2c>
c0002980:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002984:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0002988:	46                   	inc    esi
c0002989:	eb 97                	jmp    c0002922 <create_name+0x1c>
c000298b:	40                   	inc    eax
c000298c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002990:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002994:	8a 10                	mov    dl,BYTE PTR [eax]
c0002996:	80 fa 2f             	cmp    dl,0x2f
c0002999:	74 f0                	je     c000298b <create_name+0x85>
c000299b:	80 fa 5c             	cmp    dl,0x5c
c000299e:	74 eb                	je     c000298b <create_name+0x85>
c00029a0:	31 db                	xor    ebx,ebx
c00029a2:	eb 02                	jmp    c00029a6 <create_name+0xa0>
c00029a4:	b3 04                	mov    bl,0x4
c00029a6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00029aa:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c00029ad:	85 f6                	test   esi,esi
c00029af:	74 18                	je     c00029c9 <create_name+0xc3>
c00029b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00029b5:	66 8b 44 70 fe       	mov    ax,WORD PTR [eax+esi*2-0x2]
c00029ba:	66 83 f8 20          	cmp    ax,0x20
c00029be:	74 06                	je     c00029c6 <create_name+0xc0>
c00029c0:	66 83 f8 2e          	cmp    ax,0x2e
c00029c4:	75 03                	jne    c00029c9 <create_name+0xc3>
c00029c6:	4e                   	dec    esi
c00029c7:	eb e4                	jmp    c00029ad <create_name+0xa7>
c00029c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00029cd:	31 ed                	xor    ebp,ebp
c00029cf:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c00029d5:	85 f6                	test   esi,esi
c00029d7:	0f 84 55 ff ff ff    	je     c0002932 <create_name+0x2c>
c00029dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00029e1:	8d 55 01             	lea    edx,[ebp+0x1]
c00029e4:	66 8b 04 68          	mov    ax,WORD PTR [eax+ebp*2]
c00029e8:	66 83 f8 20          	cmp    ax,0x20
c00029ec:	75 04                	jne    c00029f2 <create_name+0xec>
c00029ee:	89 d5                	mov    ebp,edx
c00029f0:	eb eb                	jmp    c00029dd <create_name+0xd7>
c00029f2:	85 ed                	test   ebp,ebp
c00029f4:	75 06                	jne    c00029fc <create_name+0xf6>
c00029f6:	66 83 f8 2e          	cmp    ax,0x2e
c00029fa:	75 08                	jne    c0002a04 <create_name+0xfe>
c00029fc:	83 cb 03             	or     ebx,0x3
c00029ff:	eb 03                	jmp    c0002a04 <create_name+0xfe>
c0002a01:	4e                   	dec    esi
c0002a02:	74 0c                	je     c0002a10 <create_name+0x10a>
c0002a04:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002a08:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0002a0e:	75 f1                	jne    c0002a01 <create_name+0xfb>
c0002a10:	b9 0b 00 00 00       	mov    ecx,0xb
c0002a15:	8d 47 20             	lea    eax,[edi+0x20]
c0002a18:	ba 20 00 00 00       	mov    edx,0x20
c0002a1d:	e8 5e f3 ff ff       	call   c0001d80 <mem_set>
c0002a22:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0002a2a:	31 c9                	xor    ecx,ecx
c0002a2c:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0002a31:	8d 45 01             	lea    eax,[ebp+0x1]
c0002a34:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002a38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002a3c:	0f b7 2c 68          	movzx  ebp,WORD PTR [eax+ebp*2]
c0002a40:	66 85 ed             	test   bp,bp
c0002a43:	0f 84 30 01 00 00    	je     c0002b79 <create_name+0x273>
c0002a49:	66 83 fd 20          	cmp    bp,0x20
c0002a4d:	74 10                	je     c0002a5f <create_name+0x159>
c0002a4f:	66 83 fd 2e          	cmp    bp,0x2e
c0002a53:	75 13                	jne    c0002a68 <create_name+0x162>
c0002a55:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002a59:	0f 84 6b 01 00 00    	je     c0002bca <create_name+0x2c4>
c0002a5f:	83 cb 03             	or     ebx,0x3
c0002a62:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0002a66:	eb c9                	jmp    c0002a31 <create_name+0x12b>
c0002a68:	3b 4c 24 08          	cmp    ecx,DWORD PTR [esp+0x8]
c0002a6c:	73 0b                	jae    c0002a79 <create_name+0x173>
c0002a6e:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002a72:	75 47                	jne    c0002abb <create_name+0x1b5>
c0002a74:	e9 51 01 00 00       	jmp    c0002bca <create_name+0x2c4>
c0002a79:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0002a7e:	75 10                	jne    c0002a90 <create_name+0x18a>
c0002a80:	83 cb 03             	or     ebx,0x3
c0002a83:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0002a8b:	e9 e9 00 00 00       	jmp    c0002b79 <create_name+0x273>
c0002a90:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002a94:	74 0d                	je     c0002aa3 <create_name+0x19d>
c0002a96:	83 cb 03             	or     ebx,0x3
c0002a99:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002a9d:	0f 87 d6 00 00 00    	ja     c0002b79 <create_name+0x273>
c0002aa3:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0002aa8:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0002aac:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0002ab4:	b9 08 00 00 00       	mov    ecx,0x8
c0002ab9:	eb a7                	jmp    c0002a62 <create_name+0x15c>
c0002abb:	66 83 fd 7f          	cmp    bp,0x7f
c0002abf:	76 68                	jbe    c0002b29 <create_name+0x223>
c0002ac1:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002ac5:	88 da                	mov    dl,bl
c0002ac7:	83 ca 02             	or     edx,0x2
c0002aca:	88 54 24 18          	mov    BYTE PTR [esp+0x18],dl
c0002ace:	50                   	push   eax
c0002acf:	50                   	push   eax
c0002ad0:	68 b5 01 00 00       	push   0x1b5
c0002ad5:	55                   	push   ebp
c0002ad6:	e8 e1 2f 00 00       	call   c0005abc <ff_uni2oem>
c0002adb:	83 c4 10             	add    esp,0x10
c0002ade:	89 c5                	mov    ebp,eax
c0002ae0:	a8 80                	test   al,0x80
c0002ae2:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0002ae6:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0002aea:	74 0c                	je     c0002af8 <create_name+0x1f2>
c0002aec:	83 e5 7f             	and    ebp,0x7f
c0002aef:	0f b6 ad 20 cf 01 c0 	movzx  ebp,BYTE PTR [ebp-0x3ffe30e0]
c0002af6:	eb 2a                	jmp    c0002b22 <create_name+0x21c>
c0002af8:	66 3d ff 00          	cmp    ax,0xff
c0002afc:	76 24                	jbe    c0002b22 <create_name+0x21c>
c0002afe:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002b02:	48                   	dec    eax
c0002b03:	39 c8                	cmp    eax,ecx
c0002b05:	77 0c                	ja     c0002b13 <create_name+0x20d>
c0002b07:	83 cb 03             	or     ebx,0x3
c0002b0a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002b0e:	e9 4f ff ff ff       	jmp    c0002a62 <create_name+0x15c>
c0002b13:	89 e8                	mov    eax,ebp
c0002b15:	88 d3                	mov    bl,dl
c0002b17:	66 c1 e8 08          	shr    ax,0x8
c0002b1b:	88 44 0f 20          	mov    BYTE PTR [edi+ecx*1+0x20],al
c0002b1f:	41                   	inc    ecx
c0002b20:	eb 4b                	jmp    c0002b6d <create_name+0x267>
c0002b22:	88 d3                	mov    bl,dl
c0002b24:	66 85 ed             	test   bp,bp
c0002b27:	74 19                	je     c0002b42 <create_name+0x23c>
c0002b29:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002b2d:	0f b7 d5             	movzx  edx,bp
c0002b30:	b8 6b ce 01 c0       	mov    eax,0xc001ce6b
c0002b35:	e8 74 f2 ff ff       	call   c0001dae <chk_chr>
c0002b3a:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002b3e:	85 c0                	test   eax,eax
c0002b40:	74 0a                	je     c0002b4c <create_name+0x246>
c0002b42:	83 cb 03             	or     ebx,0x3
c0002b45:	bd 5f 00 00 00       	mov    ebp,0x5f
c0002b4a:	eb 21                	jmp    c0002b6d <create_name+0x267>
c0002b4c:	8d 45 bf             	lea    eax,[ebp-0x41]
c0002b4f:	66 83 f8 19          	cmp    ax,0x19
c0002b53:	77 07                	ja     c0002b5c <create_name+0x256>
c0002b55:	80 4c 24 0f 02       	or     BYTE PTR [esp+0xf],0x2
c0002b5a:	eb 11                	jmp    c0002b6d <create_name+0x267>
c0002b5c:	8d 45 9f             	lea    eax,[ebp-0x61]
c0002b5f:	66 83 f8 19          	cmp    ax,0x19
c0002b63:	77 08                	ja     c0002b6d <create_name+0x267>
c0002b65:	80 4c 24 0f 01       	or     BYTE PTR [esp+0xf],0x1
c0002b6a:	83 ed 20             	sub    ebp,0x20
c0002b6d:	89 e8                	mov    eax,ebp
c0002b6f:	88 44 0f 20          	mov    BYTE PTR [edi+ecx*1+0x20],al
c0002b73:	41                   	inc    ecx
c0002b74:	e9 e9 fe ff ff       	jmp    c0002a62 <create_name+0x15c>
c0002b79:	80 7f 20 e5          	cmp    BYTE PTR [edi+0x20],0xe5
c0002b7d:	75 04                	jne    c0002b83 <create_name+0x27d>
c0002b7f:	c6 47 20 05          	mov    BYTE PTR [edi+0x20],0x5
c0002b83:	83 7c 24 08 08       	cmp    DWORD PTR [esp+0x8],0x8
c0002b88:	75 05                	jne    c0002b8f <create_name+0x289>
c0002b8a:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0002b8f:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0002b93:	83 e0 0c             	and    eax,0xc
c0002b96:	3c 0c                	cmp    al,0xc
c0002b98:	74 0b                	je     c0002ba5 <create_name+0x29f>
c0002b9a:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0002b9e:	83 e0 03             	and    eax,0x3
c0002ba1:	3c 03                	cmp    al,0x3
c0002ba3:	75 05                	jne    c0002baa <create_name+0x2a4>
c0002ba5:	83 cb 02             	or     ebx,0x2
c0002ba8:	eb 19                	jmp    c0002bc3 <create_name+0x2bd>
c0002baa:	f6 c3 02             	test   bl,0x2
c0002bad:	75 14                	jne    c0002bc3 <create_name+0x2bd>
c0002baf:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0002bb4:	74 03                	je     c0002bb9 <create_name+0x2b3>
c0002bb6:	83 cb 10             	or     ebx,0x10
c0002bb9:	f6 44 24 0f 04       	test   BYTE PTR [esp+0xf],0x4
c0002bbe:	74 03                	je     c0002bc3 <create_name+0x2bd>
c0002bc0:	83 cb 08             	or     ebx,0x8
c0002bc3:	88 5f 2b             	mov    BYTE PTR [edi+0x2b],bl
c0002bc6:	31 c0                	xor    eax,eax
c0002bc8:	eb 10                	jmp    c0002bda <create_name+0x2d4>
c0002bca:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0002bcf:	0f 85 ce fe ff ff    	jne    c0002aa3 <create_name+0x19d>
c0002bd5:	e9 a6 fe ff ff       	jmp    c0002a80 <create_name+0x17a>
c0002bda:	83 c4 3c             	add    esp,0x3c
c0002bdd:	5b                   	pop    ebx
c0002bde:	5e                   	pop    esi
c0002bdf:	5f                   	pop    edi
c0002be0:	5d                   	pop    ebp
c0002be1:	c3                   	ret    

c0002be2 <cmp_lfn>:
c0002be2:	55                   	push   ebp
c0002be3:	57                   	push   edi
c0002be4:	89 d7                	mov    edi,edx
c0002be6:	56                   	push   esi
c0002be7:	53                   	push   ebx
c0002be8:	83 ec 1c             	sub    esp,0x1c
c0002beb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002bef:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002bf2:	e8 48 f1 ff ff       	call   c0001d3f <ld_word>
c0002bf7:	66 85 c0             	test   ax,ax
c0002bfa:	74 07                	je     c0002c03 <cmp_lfn+0x21>
c0002bfc:	31 c0                	xor    eax,eax
c0002bfe:	e9 9a 00 00 00       	jmp    c0002c9d <cmp_lfn+0xbb>
c0002c03:	8a 1f                	mov    bl,BYTE PTR [edi]
c0002c05:	bd 01 00 00 00       	mov    ebp,0x1
c0002c0a:	83 e3 3f             	and    ebx,0x3f
c0002c0d:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0002c15:	4b                   	dec    ebx
c0002c16:	6b db 0d             	imul   ebx,ebx,0xd
c0002c19:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002c1d:	0f b6 80 a0 cf 01 c0 	movzx  eax,BYTE PTR [eax-0x3ffe3060]
c0002c24:	01 f8                	add    eax,edi
c0002c26:	e8 14 f1 ff ff       	call   c0001d3f <ld_word>
c0002c2b:	66 85 ed             	test   bp,bp
c0002c2e:	89 c6                	mov    esi,eax
c0002c30:	74 3c                	je     c0002c6e <cmp_lfn+0x8c>
c0002c32:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0002c38:	77 c2                	ja     c0002bfc <cmp_lfn+0x1a>
c0002c3a:	83 ec 0c             	sub    esp,0xc
c0002c3d:	0f b7 c0             	movzx  eax,ax
c0002c40:	50                   	push   eax
c0002c41:	e8 8e 2f 00 00       	call   c0005bd4 <ff_wtoupper>
c0002c46:	89 c5                	mov    ebp,eax
c0002c48:	8d 43 01             	lea    eax,[ebx+0x1]
c0002c4b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0002c4f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0002c53:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0002c57:	89 04 24             	mov    DWORD PTR [esp],eax
c0002c5a:	e8 75 2f 00 00       	call   c0005bd4 <ff_wtoupper>
c0002c5f:	83 c4 10             	add    esp,0x10
c0002c62:	39 c5                	cmp    ebp,eax
c0002c64:	75 96                	jne    c0002bfc <cmp_lfn+0x1a>
c0002c66:	89 f5                	mov    ebp,esi
c0002c68:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0002c6c:	eb 04                	jmp    c0002c72 <cmp_lfn+0x90>
c0002c6e:	66 46                	inc    si
c0002c70:	75 8a                	jne    c0002bfc <cmp_lfn+0x1a>
c0002c72:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0002c76:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0002c7b:	75 9c                	jne    c0002c19 <cmp_lfn+0x37>
c0002c7d:	f6 07 40             	test   BYTE PTR [edi],0x40
c0002c80:	74 16                	je     c0002c98 <cmp_lfn+0xb6>
c0002c82:	66 85 ed             	test   bp,bp
c0002c85:	74 11                	je     c0002c98 <cmp_lfn+0xb6>
c0002c87:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002c8b:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002c90:	0f 94 c0             	sete   al
c0002c93:	0f b6 c0             	movzx  eax,al
c0002c96:	eb 05                	jmp    c0002c9d <cmp_lfn+0xbb>
c0002c98:	b8 01 00 00 00       	mov    eax,0x1
c0002c9d:	83 c4 1c             	add    esp,0x1c
c0002ca0:	5b                   	pop    ebx
c0002ca1:	5e                   	pop    esi
c0002ca2:	5f                   	pop    edi
c0002ca3:	5d                   	pop    ebp
c0002ca4:	c3                   	ret    

c0002ca5 <sync_fs>:
c0002ca5:	56                   	push   esi
c0002ca6:	53                   	push   ebx
c0002ca7:	53                   	push   ebx
c0002ca8:	89 c3                	mov    ebx,eax
c0002caa:	e8 53 f5 ff ff       	call   c0002202 <sync_window>
c0002caf:	85 c0                	test   eax,eax
c0002cb1:	0f 85 9a 00 00 00    	jne    c0002d51 <sync_fs+0xac>
c0002cb7:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0002cba:	75 7b                	jne    c0002d37 <sync_fs+0x92>
c0002cbc:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0002cc0:	75 75                	jne    c0002d37 <sync_fs+0x92>
c0002cc2:	b9 00 02 00 00       	mov    ecx,0x200
c0002cc7:	8d 73 34             	lea    esi,[ebx+0x34]
c0002cca:	31 d2                	xor    edx,edx
c0002ccc:	89 f0                	mov    eax,esi
c0002cce:	e8 ad f0 ff ff       	call   c0001d80 <mem_set>
c0002cd3:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c0002cd9:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002cde:	e8 81 f0 ff ff       	call   c0001d64 <st_word>
c0002ce3:	ba 52 52 61 41       	mov    edx,0x41615252
c0002ce8:	89 f0                	mov    eax,esi
c0002cea:	e8 79 f0 ff ff       	call   c0001d68 <st_dword>
c0002cef:	8d 83 18 02 00 00    	lea    eax,[ebx+0x218]
c0002cf5:	ba 72 72 41 61       	mov    edx,0x61417272
c0002cfa:	e8 69 f0 ff ff       	call   c0001d68 <st_dword>
c0002cff:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0002d02:	8d 83 1c 02 00 00    	lea    eax,[ebx+0x21c]
c0002d08:	e8 5b f0 ff ff       	call   c0001d68 <st_dword>
c0002d0d:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002d10:	8d 83 20 02 00 00    	lea    eax,[ebx+0x220]
c0002d16:	e8 4d f0 ff ff       	call   c0001d68 <st_dword>
c0002d1b:	6a 01                	push   0x1
c0002d1d:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0002d20:	40                   	inc    eax
c0002d21:	50                   	push   eax
c0002d22:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0002d25:	56                   	push   esi
c0002d26:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002d2a:	50                   	push   eax
c0002d2b:	e8 da ef ff ff       	call   c0001d0a <disk_write>
c0002d30:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c0002d34:	83 c4 10             	add    esp,0x10
c0002d37:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002d3b:	51                   	push   ecx
c0002d3c:	6a 00                	push   0x0
c0002d3e:	6a 00                	push   0x0
c0002d40:	50                   	push   eax
c0002d41:	e8 da ef ff ff       	call   c0001d20 <disk_ioctl>
c0002d46:	83 c4 10             	add    esp,0x10
c0002d49:	85 c0                	test   eax,eax
c0002d4b:	0f 95 c0             	setne  al
c0002d4e:	0f b6 c0             	movzx  eax,al
c0002d51:	5a                   	pop    edx
c0002d52:	5b                   	pop    ebx
c0002d53:	5e                   	pop    esi
c0002d54:	c3                   	ret    

c0002d55 <create_partition>:
c0002d55:	55                   	push   ebp
c0002d56:	0f b6 c0             	movzx  eax,al
c0002d59:	57                   	push   edi
c0002d5a:	56                   	push   esi
c0002d5b:	53                   	push   ebx
c0002d5c:	83 ec 40             	sub    esp,0x40
c0002d5f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002d63:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0002d67:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002d6b:	8d 44 24 30          	lea    eax,[esp+0x30]
c0002d6f:	50                   	push   eax
c0002d70:	6a 01                	push   0x1
c0002d72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0002d76:	e8 a5 ef ff ff       	call   c0001d20 <disk_ioctl>
c0002d7b:	83 c4 10             	add    esp,0x10
c0002d7e:	85 c0                	test   eax,eax
c0002d80:	0f 85 69 01 00 00    	jne    c0002eef <create_partition+0x19a>
c0002d86:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002d8a:	b9 05 00 00 00       	mov    ecx,0x5
c0002d8f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0002d93:	c6 44 24 0b 08       	mov    BYTE PTR [esp+0xb],0x8
c0002d98:	31 d2                	xor    edx,edx
c0002d9a:	0f b6 5c 24 0b       	movzx  ebx,BYTE PTR [esp+0xb]
c0002d9f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002da3:	f7 f3                	div    ebx
c0002da5:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0002daa:	76 0c                	jbe    c0002db8 <create_partition+0x63>
c0002dac:	d0 64 24 0b          	shl    BYTE PTR [esp+0xb],1
c0002db0:	49                   	dec    ecx
c0002db1:	75 e5                	jne    c0002d98 <create_partition+0x43>
c0002db3:	c6 44 24 0b ff       	mov    BYTE PTR [esp+0xb],0xff
c0002db8:	b9 00 02 00 00       	mov    ecx,0x200
c0002dbd:	31 d2                	xor    edx,edx
c0002dbf:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002dc3:	e8 b8 ef ff ff       	call   c0001d80 <mem_set>
c0002dc8:	b9 64 00 00 00       	mov    ecx,0x64
c0002dcd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002dd1:	31 d2                	xor    edx,edx
c0002dd3:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0002ddb:	f7 f1                	div    ecx
c0002ddd:	b9 3f 00 00 00       	mov    ecx,0x3f
c0002de2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0002de6:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002dea:	8d 98 c6 01 00 00    	lea    ebx,[eax+0x1c6]
c0002df0:	85 c9                	test   ecx,ecx
c0002df2:	75 34                	jne    c0002e28 <create_partition+0xd3>
c0002df4:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002df8:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002dfd:	05 fe 01 00 00       	add    eax,0x1fe
c0002e02:	e8 5d ef ff ff       	call   c0001d64 <st_word>
c0002e07:	6a 01                	push   0x1
c0002e09:	6a 00                	push   0x0
c0002e0b:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0002e0f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0002e13:	e8 f2 ee ff ff       	call   c0001d0a <disk_write>
c0002e18:	83 c4 10             	add    esp,0x10
c0002e1b:	85 c0                	test   eax,eax
c0002e1d:	0f 95 c0             	setne  al
c0002e20:	0f b6 c0             	movzx  eax,al
c0002e23:	e9 cc 00 00 00       	jmp    c0002ef4 <create_partition+0x19f>
c0002e28:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c0002e2c:	76 c6                	jbe    c0002df4 <create_partition+0x9f>
c0002e2e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0002e32:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0002e36:	8b 34 b8             	mov    esi,DWORD PTR [eax+edi*4]
c0002e39:	83 fe 64             	cmp    esi,0x64
c0002e3c:	77 0d                	ja     c0002e4b <create_partition+0xf6>
c0002e3e:	74 07                	je     c0002e47 <create_partition+0xf2>
c0002e40:	0f af 74 24 1c       	imul   esi,DWORD PTR [esp+0x1c]
c0002e45:	eb 04                	jmp    c0002e4b <create_partition+0xf6>
c0002e47:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0002e4b:	31 c0                	xor    eax,eax
c0002e4d:	89 f2                	mov    edx,esi
c0002e4f:	01 ca                	add    edx,ecx
c0002e51:	0f 92 c0             	setb   al
c0002e54:	3b 54 24 04          	cmp    edx,DWORD PTR [esp+0x4]
c0002e58:	77 04                	ja     c0002e5e <create_partition+0x109>
c0002e5a:	85 c0                	test   eax,eax
c0002e5c:	74 08                	je     c0002e66 <create_partition+0x111>
c0002e5e:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0002e62:	29 ce                	sub    esi,ecx
c0002e64:	eb 04                	jmp    c0002e6a <create_partition+0x115>
c0002e66:	85 f6                	test   esi,esi
c0002e68:	74 8a                	je     c0002df4 <create_partition+0x9f>
c0002e6a:	89 ca                	mov    edx,ecx
c0002e6c:	89 d8                	mov    eax,ebx
c0002e6e:	bd 3f 00 00 00       	mov    ebp,0x3f
c0002e73:	e8 f0 ee ff ff       	call   c0001d68 <st_dword>
c0002e78:	8d 43 04             	lea    eax,[ebx+0x4]
c0002e7b:	89 f2                	mov    edx,esi
c0002e7d:	83 c3 10             	add    ebx,0x10
c0002e80:	e8 e3 ee ff ff       	call   c0001d68 <st_dword>
c0002e85:	0f b6 7c 24 0b       	movzx  edi,BYTE PTR [esp+0xb]
c0002e8a:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0002e8e:	31 d2                	xor    edx,edx
c0002e90:	88 43 ec             	mov    BYTE PTR [ebx-0x14],al
c0002e93:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0002e97:	89 c8                	mov    eax,ecx
c0002e99:	01 f1                	add    ecx,esi
c0002e9b:	f7 f5                	div    ebp
c0002e9d:	89 d5                	mov    ebp,edx
c0002e9f:	31 d2                	xor    edx,edx
c0002ea1:	45                   	inc    ebp
c0002ea2:	f7 f7                	div    edi
c0002ea4:	88 53 e9             	mov    BYTE PTR [ebx-0x17],dl
c0002ea7:	88 43 eb             	mov    BYTE PTR [ebx-0x15],al
c0002eaa:	89 c2                	mov    edx,eax
c0002eac:	8d 41 ff             	lea    eax,[ecx-0x1]
c0002eaf:	c1 ea 02             	shr    edx,0x2
c0002eb2:	83 e2 c0             	and    edx,0xffffffc0
c0002eb5:	09 ea                	or     edx,ebp
c0002eb7:	bd 3f 00 00 00       	mov    ebp,0x3f
c0002ebc:	88 53 ea             	mov    BYTE PTR [ebx-0x16],dl
c0002ebf:	31 d2                	xor    edx,edx
c0002ec1:	f7 f5                	div    ebp
c0002ec3:	89 d6                	mov    esi,edx
c0002ec5:	31 d2                	xor    edx,edx
c0002ec7:	46                   	inc    esi
c0002ec8:	f7 f7                	div    edi
c0002eca:	88 53 ed             	mov    BYTE PTR [ebx-0x13],dl
c0002ecd:	88 43 ef             	mov    BYTE PTR [ebx-0x11],al
c0002ed0:	89 c7                	mov    edi,eax
c0002ed2:	c1 ef 02             	shr    edi,0x2
c0002ed5:	83 e7 c0             	and    edi,0xffffffc0
c0002ed8:	09 fe                	or     esi,edi
c0002eda:	89 f2                	mov    edx,esi
c0002edc:	88 53 ee             	mov    BYTE PTR [ebx-0x12],dl
c0002edf:	83 7c 24 0c 04       	cmp    DWORD PTR [esp+0xc],0x4
c0002ee4:	0f 85 06 ff ff ff    	jne    c0002df0 <create_partition+0x9b>
c0002eea:	e9 05 ff ff ff       	jmp    c0002df4 <create_partition+0x9f>
c0002eef:	b8 01 00 00 00       	mov    eax,0x1
c0002ef4:	83 c4 3c             	add    esp,0x3c
c0002ef7:	5b                   	pop    ebx
c0002ef8:	5e                   	pop    esi
c0002ef9:	5f                   	pop    edi
c0002efa:	5d                   	pop    ebp
c0002efb:	c3                   	ret    

c0002efc <get_fileinfo>:
c0002efc:	55                   	push   ebp
c0002efd:	57                   	push   edi
c0002efe:	56                   	push   esi
c0002eff:	53                   	push   ebx
c0002f00:	83 ec 1c             	sub    esp,0x1c
c0002f03:	8b 30                	mov    esi,DWORD PTR [eax]
c0002f05:	c6 42 16 00          	mov    BYTE PTR [edx+0x16],0x0
c0002f09:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0002f0d:	83 78 18 00          	cmp    DWORD PTR [eax+0x18],0x0
c0002f11:	0f 84 c1 01 00 00    	je     c00030d8 <get_fileinfo+0x1dc>
c0002f17:	89 d3                	mov    ebx,edx
c0002f19:	89 c6                	mov    esi,eax
c0002f1b:	83 78 2c ff          	cmp    DWORD PTR [eax+0x2c],0xffffffff
c0002f1f:	74 6a                	je     c0002f8b <get_fileinfo+0x8f>
c0002f21:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002f29:	31 ed                	xor    ebp,ebp
c0002f2b:	31 ff                	xor    edi,edi
c0002f2d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002f31:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002f35:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0002f38:	0f b7 14 08          	movzx  edx,WORD PTR [eax+ecx*1]
c0002f3c:	66 85 d2             	test   dx,dx
c0002f3f:	74 3e                	je     c0002f7f <get_fileinfo+0x83>
c0002f41:	66 85 ed             	test   bp,bp
c0002f44:	75 0c                	jne    c0002f52 <get_fileinfo+0x56>
c0002f46:	8d 82 00 28 00 00    	lea    eax,[edx+0x2800]
c0002f4c:	66 3d ff 07          	cmp    ax,0x7ff
c0002f50:	76 22                	jbe    c0002f74 <get_fileinfo+0x78>
c0002f52:	b9 ff 00 00 00       	mov    ecx,0xff
c0002f57:	89 e8                	mov    eax,ebp
c0002f59:	29 f9                	sub    ecx,edi
c0002f5b:	c1 e0 10             	shl    eax,0x10
c0002f5e:	09 d0                	or     eax,edx
c0002f60:	8d 54 3b 16          	lea    edx,[ebx+edi*1+0x16]
c0002f64:	e8 23 ef ff ff       	call   c0001e8c <put_utf>
c0002f69:	84 c0                	test   al,al
c0002f6b:	74 10                	je     c0002f7d <get_fileinfo+0x81>
c0002f6d:	0f b6 c0             	movzx  eax,al
c0002f70:	31 d2                	xor    edx,edx
c0002f72:	01 c7                	add    edi,eax
c0002f74:	83 44 24 08 02       	add    DWORD PTR [esp+0x8],0x2
c0002f79:	89 d5                	mov    ebp,edx
c0002f7b:	eb b0                	jmp    c0002f2d <get_fileinfo+0x31>
c0002f7d:	31 ff                	xor    edi,edi
c0002f7f:	66 85 ed             	test   bp,bp
c0002f82:	74 02                	je     c0002f86 <get_fileinfo+0x8a>
c0002f84:	31 ff                	xor    edi,edi
c0002f86:	c6 44 3b 16 00       	mov    BYTE PTR [ebx+edi*1+0x16],0x0
c0002f8b:	31 ff                	xor    edi,edi
c0002f8d:	31 c9                	xor    ecx,ecx
c0002f8f:	83 f9 0a             	cmp    ecx,0xa
c0002f92:	0f 87 ad 00 00 00    	ja     c0003045 <get_fileinfo+0x149>
c0002f98:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0002f9b:	8d 69 01             	lea    ebp,[ecx+0x1]
c0002f9e:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
c0002fa2:	66 83 fa 20          	cmp    dx,0x20
c0002fa6:	0f 84 92 00 00 00    	je     c000303e <get_fileinfo+0x142>
c0002fac:	66 83 fa 05          	cmp    dx,0x5
c0002fb0:	75 05                	jne    c0002fb7 <get_fileinfo+0xbb>
c0002fb2:	ba e5 00 00 00       	mov    edx,0xe5
c0002fb7:	83 ff 0b             	cmp    edi,0xb
c0002fba:	77 0b                	ja     c0002fc7 <get_fileinfo+0xcb>
c0002fbc:	83 fd 09             	cmp    ebp,0x9
c0002fbf:	75 06                	jne    c0002fc7 <get_fileinfo+0xcb>
c0002fc1:	c6 44 3b 09 2e       	mov    BYTE PTR [ebx+edi*1+0x9],0x2e
c0002fc6:	47                   	inc    edi
c0002fc7:	0f b7 c2             	movzx  eax,dx
c0002fca:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002fce:	e8 ed ed ff ff       	call   c0001dc0 <dbc_1st>
c0002fd3:	85 c0                	test   eax,eax
c0002fd5:	74 2f                	je     c0003006 <get_fileinfo+0x10a>
c0002fd7:	83 fd 08             	cmp    ebp,0x8
c0002fda:	74 2a                	je     c0003006 <get_fileinfo+0x10a>
c0002fdc:	83 fd 0b             	cmp    ebp,0xb
c0002fdf:	74 25                	je     c0003006 <get_fileinfo+0x10a>
c0002fe1:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0002fe4:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0002fe8:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0002fec:	e8 d2 ed ff ff       	call   c0001dc3 <dbc_2nd>
c0002ff1:	85 c0                	test   eax,eax
c0002ff3:	74 11                	je     c0003006 <get_fileinfo+0x10a>
c0002ff5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002ff9:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0002ffe:	c1 e2 08             	shl    edx,0x8
c0003001:	8d 69 02             	lea    ebp,[ecx+0x2]
c0003004:	09 c2                	or     edx,eax
c0003006:	0f b7 d2             	movzx  edx,dx
c0003009:	50                   	push   eax
c000300a:	50                   	push   eax
c000300b:	68 b5 01 00 00       	push   0x1b5
c0003010:	52                   	push   edx
c0003011:	e8 46 2b 00 00       	call   c0005b5c <ff_oem2uni>
c0003016:	83 c4 10             	add    esp,0x10
c0003019:	66 85 c0             	test   ax,ax
c000301c:	75 04                	jne    c0003022 <get_fileinfo+0x126>
c000301e:	31 ff                	xor    edi,edi
c0003020:	eb 23                	jmp    c0003045 <get_fileinfo+0x149>
c0003022:	b9 0c 00 00 00       	mov    ecx,0xc
c0003027:	8d 54 3b 09          	lea    edx,[ebx+edi*1+0x9]
c000302b:	29 f9                	sub    ecx,edi
c000302d:	0f b7 c0             	movzx  eax,ax
c0003030:	e8 57 ee ff ff       	call   c0001e8c <put_utf>
c0003035:	84 c0                	test   al,al
c0003037:	74 e5                	je     c000301e <get_fileinfo+0x122>
c0003039:	0f b6 c0             	movzx  eax,al
c000303c:	01 c7                	add    edi,eax
c000303e:	89 e9                	mov    ecx,ebp
c0003040:	e9 4a ff ff ff       	jmp    c0002f8f <get_fileinfo+0x93>
c0003045:	c6 44 3b 09 00       	mov    BYTE PTR [ebx+edi*1+0x9],0x0
c000304a:	80 7b 16 00          	cmp    BYTE PTR [ebx+0x16],0x0
c000304e:	75 54                	jne    c00030a4 <get_fileinfo+0x1a8>
c0003050:	85 ff                	test   edi,edi
c0003052:	75 0b                	jne    c000305f <get_fileinfo+0x163>
c0003054:	c6 43 16 3f          	mov    BYTE PTR [ebx+0x16],0x3f
c0003058:	ba 01 00 00 00       	mov    edx,0x1
c000305d:	eb 33                	jmp    c0003092 <get_fileinfo+0x196>
c000305f:	b1 08                	mov    cl,0x8
c0003061:	31 d2                	xor    edx,edx
c0003063:	66 0f be 44 13 09    	movsx  ax,BYTE PTR [ebx+edx*1+0x9]
c0003069:	84 c0                	test   al,al
c000306b:	74 25                	je     c0003092 <get_fileinfo+0x196>
c000306d:	66 83 f8 2e          	cmp    ax,0x2e
c0003071:	74 16                	je     c0003089 <get_fileinfo+0x18d>
c0003073:	8d 78 bf             	lea    edi,[eax-0x41]
c0003076:	66 83 ff 19          	cmp    di,0x19
c000307a:	77 0f                	ja     c000308b <get_fileinfo+0x18f>
c000307c:	8b 7e 1c             	mov    edi,DWORD PTR [esi+0x1c]
c000307f:	84 4f 0c             	test   BYTE PTR [edi+0xc],cl
c0003082:	74 07                	je     c000308b <get_fileinfo+0x18f>
c0003084:	83 c0 20             	add    eax,0x20
c0003087:	eb 02                	jmp    c000308b <get_fileinfo+0x18f>
c0003089:	b1 10                	mov    cl,0x10
c000308b:	88 44 13 16          	mov    BYTE PTR [ebx+edx*1+0x16],al
c000308f:	42                   	inc    edx
c0003090:	eb d1                	jmp    c0003063 <get_fileinfo+0x167>
c0003092:	c6 44 13 16 00       	mov    BYTE PTR [ebx+edx*1+0x16],0x0
c0003097:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000309a:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c000309e:	75 04                	jne    c00030a4 <get_fileinfo+0x1a8>
c00030a0:	c6 43 09 00          	mov    BYTE PTR [ebx+0x9],0x0
c00030a4:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00030a7:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c00030aa:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c00030ad:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00030b0:	83 c0 1c             	add    eax,0x1c
c00030b3:	e8 94 ec ff ff       	call   c0001d4c <ld_dword>
c00030b8:	89 03                	mov    DWORD PTR [ebx],eax
c00030ba:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00030bd:	83 c0 16             	add    eax,0x16
c00030c0:	e8 7a ec ff ff       	call   c0001d3f <ld_word>
c00030c5:	66 89 43 06          	mov    WORD PTR [ebx+0x6],ax
c00030c9:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00030cc:	83 c0 18             	add    eax,0x18
c00030cf:	e8 6b ec ff ff       	call   c0001d3f <ld_word>
c00030d4:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c00030d8:	83 c4 1c             	add    esp,0x1c
c00030db:	5b                   	pop    ebx
c00030dc:	5e                   	pop    esi
c00030dd:	5f                   	pop    edi
c00030de:	5d                   	pop    ebp
c00030df:	c3                   	ret    

c00030e0 <ld_clust.isra.0>:
c00030e0:	56                   	push   esi
c00030e1:	89 c6                	mov    esi,eax
c00030e3:	53                   	push   ebx
c00030e4:	8d 42 1a             	lea    eax,[edx+0x1a]
c00030e7:	89 d3                	mov    ebx,edx
c00030e9:	e8 51 ec ff ff       	call   c0001d3f <ld_word>
c00030ee:	0f b7 c8             	movzx  ecx,ax
c00030f1:	89 f0                	mov    eax,esi
c00030f3:	3c 03                	cmp    al,0x3
c00030f5:	75 0d                	jne    c0003104 <ld_clust.isra.0+0x24>
c00030f7:	8d 43 14             	lea    eax,[ebx+0x14]
c00030fa:	e8 40 ec ff ff       	call   c0001d3f <ld_word>
c00030ff:	c1 e0 10             	shl    eax,0x10
c0003102:	09 c1                	or     ecx,eax
c0003104:	89 c8                	mov    eax,ecx
c0003106:	5b                   	pop    ebx
c0003107:	5e                   	pop    esi
c0003108:	c3                   	ret    

c0003109 <st_clust.isra.1>:
c0003109:	56                   	push   esi
c000310a:	89 c6                	mov    esi,eax
c000310c:	53                   	push   ebx
c000310d:	89 d3                	mov    ebx,edx
c000310f:	0f b7 d1             	movzx  edx,cx
c0003112:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0003115:	e8 4a ec ff ff       	call   c0001d64 <st_word>
c000311a:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c000311d:	75 0f                	jne    c000312e <st_clust.isra.1+0x25>
c000311f:	c1 e9 10             	shr    ecx,0x10
c0003122:	8d 43 14             	lea    eax,[ebx+0x14]
c0003125:	89 ca                	mov    edx,ecx
c0003127:	5b                   	pop    ebx
c0003128:	5e                   	pop    esi
c0003129:	e9 36 ec ff ff       	jmp    c0001d64 <st_word>
c000312e:	5b                   	pop    ebx
c000312f:	5e                   	pop    esi
c0003130:	c3                   	ret    

c0003131 <get_fat.isra.2>:
c0003131:	b9 01 00 00 00       	mov    ecx,0x1
c0003136:	83 fa 01             	cmp    edx,0x1
c0003139:	0f 86 f1 00 00 00    	jbe    c0003230 <get_fat.isra.2+0xff>
c000313f:	3b 50 18             	cmp    edx,DWORD PTR [eax+0x18]
c0003142:	0f 83 e8 00 00 00    	jae    c0003230 <get_fat.isra.2+0xff>
c0003148:	55                   	push   ebp
c0003149:	57                   	push   edi
c000314a:	89 c7                	mov    edi,eax
c000314c:	56                   	push   esi
c000314d:	89 d6                	mov    esi,edx
c000314f:	53                   	push   ebx
c0003150:	83 ec 0c             	sub    esp,0xc
c0003153:	8a 00                	mov    al,BYTE PTR [eax]
c0003155:	3c 02                	cmp    al,0x2
c0003157:	74 78                	je     c00031d1 <get_fat.isra.2+0xa0>
c0003159:	3c 03                	cmp    al,0x3
c000315b:	0f 84 97 00 00 00    	je     c00031f8 <get_fat.isra.2+0xc7>
c0003161:	fe c8                	dec    al
c0003163:	0f 85 bd 00 00 00    	jne    c0003226 <get_fat.isra.2+0xf5>
c0003169:	89 d3                	mov    ebx,edx
c000316b:	89 f8                	mov    eax,edi
c000316d:	d1 eb                	shr    ebx,1
c000316f:	01 d3                	add    ebx,edx
c0003171:	89 da                	mov    edx,ebx
c0003173:	c1 ea 09             	shr    edx,0x9
c0003176:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c0003179:	e8 e7 f0 ff ff       	call   c0002265 <move_window>
c000317e:	85 c0                	test   eax,eax
c0003180:	74 08                	je     c000318a <get_fat.isra.2+0x59>
c0003182:	83 c9 ff             	or     ecx,0xffffffff
c0003185:	e9 9c 00 00 00       	jmp    c0003226 <get_fat.isra.2+0xf5>
c000318a:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000318d:	89 f8                	mov    eax,edi
c000318f:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0003195:	89 ea                	mov    edx,ebp
c0003197:	8a 5c 1f 34          	mov    bl,BYTE PTR [edi+ebx*1+0x34]
c000319b:	c1 ea 09             	shr    edx,0x9
c000319e:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c00031a1:	e8 bf f0 ff ff       	call   c0002265 <move_window>
c00031a6:	85 c0                	test   eax,eax
c00031a8:	75 d8                	jne    c0003182 <get_fat.isra.2+0x51>
c00031aa:	0f b6 c3             	movzx  eax,bl
c00031ad:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00031b3:	0f b6 5c 2f 34       	movzx  ebx,BYTE PTR [edi+ebp*1+0x34]
c00031b8:	c1 e3 08             	shl    ebx,0x8
c00031bb:	09 c3                	or     ebx,eax
c00031bd:	89 d9                	mov    ecx,ebx
c00031bf:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c00031c5:	83 e6 01             	and    esi,0x1
c00031c8:	74 5c                	je     c0003226 <get_fat.isra.2+0xf5>
c00031ca:	89 d9                	mov    ecx,ebx
c00031cc:	c1 e9 04             	shr    ecx,0x4
c00031cf:	eb 55                	jmp    c0003226 <get_fat.isra.2+0xf5>
c00031d1:	c1 ea 08             	shr    edx,0x8
c00031d4:	89 f8                	mov    eax,edi
c00031d6:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c00031d9:	e8 87 f0 ff ff       	call   c0002265 <move_window>
c00031de:	85 c0                	test   eax,eax
c00031e0:	75 a0                	jne    c0003182 <get_fat.isra.2+0x51>
c00031e2:	01 f6                	add    esi,esi
c00031e4:	81 e6 fe 01 00 00    	and    esi,0x1fe
c00031ea:	8d 44 37 34          	lea    eax,[edi+esi*1+0x34]
c00031ee:	e8 4c eb ff ff       	call   c0001d3f <ld_word>
c00031f3:	0f b7 c8             	movzx  ecx,ax
c00031f6:	eb 2e                	jmp    c0003226 <get_fat.isra.2+0xf5>
c00031f8:	c1 ea 07             	shr    edx,0x7
c00031fb:	89 f8                	mov    eax,edi
c00031fd:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c0003200:	e8 60 f0 ff ff       	call   c0002265 <move_window>
c0003205:	85 c0                	test   eax,eax
c0003207:	0f 85 75 ff ff ff    	jne    c0003182 <get_fat.isra.2+0x51>
c000320d:	c1 e6 02             	shl    esi,0x2
c0003210:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0003216:	8d 44 37 34          	lea    eax,[edi+esi*1+0x34]
c000321a:	e8 2d eb ff ff       	call   c0001d4c <ld_dword>
c000321f:	25 ff ff ff 0f       	and    eax,0xfffffff
c0003224:	89 c1                	mov    ecx,eax
c0003226:	83 c4 0c             	add    esp,0xc
c0003229:	89 c8                	mov    eax,ecx
c000322b:	5b                   	pop    ebx
c000322c:	5e                   	pop    esi
c000322d:	5f                   	pop    edi
c000322e:	5d                   	pop    ebp
c000322f:	c3                   	ret    
c0003230:	89 c8                	mov    eax,ecx
c0003232:	c3                   	ret    

c0003233 <dir_sdi>:
c0003233:	81 fa ff ff 1f 00    	cmp    edx,0x1fffff
c0003239:	0f 87 b6 00 00 00    	ja     c00032f5 <dir_sdi+0xc2>
c000323f:	55                   	push   ebp
c0003240:	57                   	push   edi
c0003241:	56                   	push   esi
c0003242:	53                   	push   ebx
c0003243:	89 d3                	mov    ebx,edx
c0003245:	83 ec 1c             	sub    esp,0x1c
c0003248:	f6 c2 1f             	test   dl,0x1f
c000324b:	74 0a                	je     c0003257 <dir_sdi+0x24>
c000324d:	b8 02 00 00 00       	mov    eax,0x2
c0003252:	e9 96 00 00 00       	jmp    c00032ed <dir_sdi+0xba>
c0003257:	89 c6                	mov    esi,eax
c0003259:	8b 38                	mov    edi,DWORD PTR [eax]
c000325b:	89 56 10             	mov    DWORD PTR [esi+0x10],edx
c000325e:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0003261:	85 c9                	test   ecx,ecx
c0003263:	75 23                	jne    c0003288 <dir_sdi+0x55>
c0003265:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0003268:	76 07                	jbe    c0003271 <dir_sdi+0x3e>
c000326a:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c000326d:	85 c0                	test   eax,eax
c000326f:	75 15                	jne    c0003286 <dir_sdi+0x53>
c0003271:	89 da                	mov    edx,ebx
c0003273:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c0003277:	c1 ea 05             	shr    edx,0x5
c000327a:	39 c2                	cmp    edx,eax
c000327c:	73 cf                	jae    c000324d <dir_sdi+0x1a>
c000327e:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c0003281:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003284:	eb 3d                	jmp    c00032c3 <dir_sdi+0x90>
c0003286:	89 c1                	mov    ecx,eax
c0003288:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c000328c:	c1 e5 09             	shl    ebp,0x9
c000328f:	89 ca                	mov    edx,ecx
c0003291:	39 eb                	cmp    ebx,ebp
c0003293:	72 1c                	jb     c00032b1 <dir_sdi+0x7e>
c0003295:	8b 06                	mov    eax,DWORD PTR [esi]
c0003297:	e8 95 fe ff ff       	call   c0003131 <get_fat.isra.2>
c000329c:	89 c1                	mov    ecx,eax
c000329e:	83 f8 ff             	cmp    eax,0xffffffff
c00032a1:	74 45                	je     c00032e8 <dir_sdi+0xb5>
c00032a3:	83 f8 01             	cmp    eax,0x1
c00032a6:	76 a5                	jbe    c000324d <dir_sdi+0x1a>
c00032a8:	39 47 18             	cmp    DWORD PTR [edi+0x18],eax
c00032ab:	76 a0                	jbe    c000324d <dir_sdi+0x1a>
c00032ad:	29 eb                	sub    ebx,ebp
c00032af:	eb de                	jmp    c000328f <dir_sdi+0x5c>
c00032b1:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00032b5:	89 f8                	mov    eax,edi
c00032b7:	e8 c9 ec ff ff       	call   c0001f85 <clst2sect>
c00032bc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00032c0:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00032c3:	8b 56 18             	mov    edx,DWORD PTR [esi+0x18]
c00032c6:	89 4e 14             	mov    DWORD PTR [esi+0x14],ecx
c00032c9:	85 d2                	test   edx,edx
c00032cb:	74 80                	je     c000324d <dir_sdi+0x1a>
c00032cd:	89 d8                	mov    eax,ebx
c00032cf:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c00032d5:	c1 e8 09             	shr    eax,0x9
c00032d8:	01 d0                	add    eax,edx
c00032da:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00032dd:	8d 44 1f 34          	lea    eax,[edi+ebx*1+0x34]
c00032e1:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c00032e4:	31 c0                	xor    eax,eax
c00032e6:	eb 05                	jmp    c00032ed <dir_sdi+0xba>
c00032e8:	b8 01 00 00 00       	mov    eax,0x1
c00032ed:	83 c4 1c             	add    esp,0x1c
c00032f0:	5b                   	pop    ebx
c00032f1:	5e                   	pop    esi
c00032f2:	5f                   	pop    edi
c00032f3:	5d                   	pop    ebp
c00032f4:	c3                   	ret    
c00032f5:	b8 02 00 00 00       	mov    eax,0x2
c00032fa:	c3                   	ret    

c00032fb <create_chain>:
c00032fb:	55                   	push   ebp
c00032fc:	89 c5                	mov    ebp,eax
c00032fe:	57                   	push   edi
c00032ff:	89 d7                	mov    edi,edx
c0003301:	56                   	push   esi
c0003302:	53                   	push   ebx
c0003303:	83 ec 1c             	sub    esp,0x1c
c0003306:	85 d2                	test   edx,edx
c0003308:	8b 30                	mov    esi,DWORD PTR [eax]
c000330a:	75 0e                	jne    c000331a <create_chain+0x1f>
c000330c:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c000330f:	85 c9                	test   ecx,ecx
c0003311:	74 34                	je     c0003347 <create_chain+0x4c>
c0003313:	39 4e 18             	cmp    DWORD PTR [esi+0x18],ecx
c0003316:	77 34                	ja     c000334c <create_chain+0x51>
c0003318:	eb 2d                	jmp    c0003347 <create_chain+0x4c>
c000331a:	89 f0                	mov    eax,esi
c000331c:	e8 10 fe ff ff       	call   c0003131 <get_fat.isra.2>
c0003321:	89 c3                	mov    ebx,eax
c0003323:	83 f8 01             	cmp    eax,0x1
c0003326:	77 0a                	ja     c0003332 <create_chain+0x37>
c0003328:	bb 01 00 00 00       	mov    ebx,0x1
c000332d:	e9 f9 00 00 00       	jmp    c000342b <create_chain+0x130>
c0003332:	83 f8 ff             	cmp    eax,0xffffffff
c0003335:	0f 84 ed 00 00 00    	je     c0003428 <create_chain+0x12d>
c000333b:	89 f9                	mov    ecx,edi
c000333d:	39 46 18             	cmp    DWORD PTR [esi+0x18],eax
c0003340:	76 0a                	jbe    c000334c <create_chain+0x51>
c0003342:	e9 e4 00 00 00       	jmp    c000342b <create_chain+0x130>
c0003347:	b9 01 00 00 00       	mov    ecx,0x1
c000334c:	83 7e 14 00          	cmp    DWORD PTR [esi+0x14],0x0
c0003350:	75 07                	jne    c0003359 <create_chain+0x5e>
c0003352:	31 db                	xor    ebx,ebx
c0003354:	e9 d2 00 00 00       	jmp    c000342b <create_chain+0x130>
c0003359:	39 f9                	cmp    ecx,edi
c000335b:	75 46                	jne    c00033a3 <create_chain+0xa8>
c000335d:	8d 59 01             	lea    ebx,[ecx+0x1]
c0003360:	39 5e 18             	cmp    DWORD PTR [esi+0x18],ebx
c0003363:	77 05                	ja     c000336a <create_chain+0x6f>
c0003365:	bb 02 00 00 00       	mov    ebx,0x2
c000336a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000336e:	89 da                	mov    edx,ebx
c0003370:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003373:	e8 b9 fd ff ff       	call   c0003131 <get_fat.isra.2>
c0003378:	83 f8 01             	cmp    eax,0x1
c000337b:	74 ab                	je     c0003328 <create_chain+0x2d>
c000337d:	83 f8 ff             	cmp    eax,0xffffffff
c0003380:	0f 84 a2 00 00 00    	je     c0003428 <create_chain+0x12d>
c0003386:	85 c0                	test   eax,eax
c0003388:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000338c:	74 11                	je     c000339f <create_chain+0xa4>
c000338e:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0003391:	83 f8 01             	cmp    eax,0x1
c0003394:	76 0d                	jbe    c00033a3 <create_chain+0xa8>
c0003396:	3b 46 18             	cmp    eax,DWORD PTR [esi+0x18]
c0003399:	73 08                	jae    c00033a3 <create_chain+0xa8>
c000339b:	89 c1                	mov    ecx,eax
c000339d:	eb 04                	jmp    c00033a3 <create_chain+0xa8>
c000339f:	85 db                	test   ebx,ebx
c00033a1:	75 3d                	jne    c00033e0 <create_chain+0xe5>
c00033a3:	89 cb                	mov    ebx,ecx
c00033a5:	43                   	inc    ebx
c00033a6:	39 5e 18             	cmp    DWORD PTR [esi+0x18],ebx
c00033a9:	77 0a                	ja     c00033b5 <create_chain+0xba>
c00033ab:	83 f9 01             	cmp    ecx,0x1
c00033ae:	76 a2                	jbe    c0003352 <create_chain+0x57>
c00033b0:	bb 02 00 00 00       	mov    ebx,0x2
c00033b5:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00033b9:	89 da                	mov    edx,ebx
c00033bb:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00033be:	e8 6e fd ff ff       	call   c0003131 <get_fat.isra.2>
c00033c3:	85 c0                	test   eax,eax
c00033c5:	74 19                	je     c00033e0 <create_chain+0xe5>
c00033c7:	83 f8 01             	cmp    eax,0x1
c00033ca:	0f 84 58 ff ff ff    	je     c0003328 <create_chain+0x2d>
c00033d0:	40                   	inc    eax
c00033d1:	74 55                	je     c0003428 <create_chain+0x12d>
c00033d3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00033d7:	39 cb                	cmp    ebx,ecx
c00033d9:	75 ca                	jne    c00033a5 <create_chain+0xaa>
c00033db:	e9 72 ff ff ff       	jmp    c0003352 <create_chain+0x57>
c00033e0:	83 c9 ff             	or     ecx,0xffffffff
c00033e3:	89 da                	mov    edx,ebx
c00033e5:	89 f0                	mov    eax,esi
c00033e7:	e8 cf f2 ff ff       	call   c00026bb <put_fat>
c00033ec:	85 c0                	test   eax,eax
c00033ee:	75 31                	jne    c0003421 <create_chain+0x126>
c00033f0:	85 ff                	test   edi,edi
c00033f2:	75 16                	jne    c000340a <create_chain+0x10f>
c00033f4:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00033f7:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c00033fa:	89 5e 10             	mov    DWORD PTR [esi+0x10],ebx
c00033fd:	8d 57 fe             	lea    edx,[edi-0x2]
c0003400:	39 d0                	cmp    eax,edx
c0003402:	77 17                	ja     c000341b <create_chain+0x120>
c0003404:	48                   	dec    eax
c0003405:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c0003408:	eb 11                	jmp    c000341b <create_chain+0x120>
c000340a:	89 d9                	mov    ecx,ebx
c000340c:	89 fa                	mov    edx,edi
c000340e:	89 f0                	mov    eax,esi
c0003410:	e8 a6 f2 ff ff       	call   c00026bb <put_fat>
c0003415:	85 c0                	test   eax,eax
c0003417:	74 db                	je     c00033f4 <create_chain+0xf9>
c0003419:	eb 06                	jmp    c0003421 <create_chain+0x126>
c000341b:	80 4e 04 01          	or     BYTE PTR [esi+0x4],0x1
c000341f:	eb 0a                	jmp    c000342b <create_chain+0x130>
c0003421:	48                   	dec    eax
c0003422:	0f 85 00 ff ff ff    	jne    c0003328 <create_chain+0x2d>
c0003428:	83 cb ff             	or     ebx,0xffffffff
c000342b:	83 c4 1c             	add    esp,0x1c
c000342e:	89 d8                	mov    eax,ebx
c0003430:	5b                   	pop    ebx
c0003431:	5e                   	pop    esi
c0003432:	5f                   	pop    edi
c0003433:	5d                   	pop    ebp
c0003434:	c3                   	ret    

c0003435 <remove_chain>:
c0003435:	55                   	push   ebp
c0003436:	57                   	push   edi
c0003437:	56                   	push   esi
c0003438:	89 d6                	mov    esi,edx
c000343a:	53                   	push   ebx
c000343b:	83 ec 0c             	sub    esp,0xc
c000343e:	83 fa 01             	cmp    edx,0x1
c0003441:	8b 18                	mov    ebx,DWORD PTR [eax]
c0003443:	76 65                	jbe    c00034aa <remove_chain+0x75>
c0003445:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c0003448:	76 60                	jbe    c00034aa <remove_chain+0x75>
c000344a:	89 c5                	mov    ebp,eax
c000344c:	89 ca                	mov    edx,ecx
c000344e:	85 c9                	test   ecx,ecx
c0003450:	74 0e                	je     c0003460 <remove_chain+0x2b>
c0003452:	83 c9 ff             	or     ecx,0xffffffff
c0003455:	89 d8                	mov    eax,ebx
c0003457:	e8 5f f2 ff ff       	call   c00026bb <put_fat>
c000345c:	85 c0                	test   eax,eax
c000345e:	75 56                	jne    c00034b6 <remove_chain+0x81>
c0003460:	89 f2                	mov    edx,esi
c0003462:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003465:	e8 c7 fc ff ff       	call   c0003131 <get_fat.isra.2>
c000346a:	89 c7                	mov    edi,eax
c000346c:	85 c0                	test   eax,eax
c000346e:	75 04                	jne    c0003474 <remove_chain+0x3f>
c0003470:	31 c0                	xor    eax,eax
c0003472:	eb 42                	jmp    c00034b6 <remove_chain+0x81>
c0003474:	83 f8 01             	cmp    eax,0x1
c0003477:	74 31                	je     c00034aa <remove_chain+0x75>
c0003479:	83 f8 ff             	cmp    eax,0xffffffff
c000347c:	74 33                	je     c00034b1 <remove_chain+0x7c>
c000347e:	31 c9                	xor    ecx,ecx
c0003480:	89 f2                	mov    edx,esi
c0003482:	89 d8                	mov    eax,ebx
c0003484:	e8 32 f2 ff ff       	call   c00026bb <put_fat>
c0003489:	85 c0                	test   eax,eax
c000348b:	75 29                	jne    c00034b6 <remove_chain+0x81>
c000348d:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0003490:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003493:	8d 4a fe             	lea    ecx,[edx-0x2]
c0003496:	39 c8                	cmp    eax,ecx
c0003498:	73 08                	jae    c00034a2 <remove_chain+0x6d>
c000349a:	40                   	inc    eax
c000349b:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c000349f:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c00034a2:	89 fe                	mov    esi,edi
c00034a4:	39 fa                	cmp    edx,edi
c00034a6:	77 b8                	ja     c0003460 <remove_chain+0x2b>
c00034a8:	eb c6                	jmp    c0003470 <remove_chain+0x3b>
c00034aa:	b8 02 00 00 00       	mov    eax,0x2
c00034af:	eb 05                	jmp    c00034b6 <remove_chain+0x81>
c00034b1:	b8 01 00 00 00       	mov    eax,0x1
c00034b6:	83 c4 0c             	add    esp,0xc
c00034b9:	5b                   	pop    ebx
c00034ba:	5e                   	pop    esi
c00034bb:	5f                   	pop    edi
c00034bc:	5d                   	pop    ebp
c00034bd:	c3                   	ret    

c00034be <dir_next>:
c00034be:	55                   	push   ebp
c00034bf:	57                   	push   edi
c00034c0:	56                   	push   esi
c00034c1:	53                   	push   ebx
c00034c2:	83 ec 1c             	sub    esp,0x1c
c00034c5:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c00034c8:	8b 28                	mov    ebp,DWORD PTR [eax]
c00034ca:	83 c7 20             	add    edi,0x20
c00034cd:	81 ff ff ff 1f 00    	cmp    edi,0x1fffff
c00034d3:	76 07                	jbe    c00034dc <dir_next+0x1e>
c00034d5:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c00034dc:	8b 70 18             	mov    esi,DWORD PTR [eax+0x18]
c00034df:	b9 04 00 00 00       	mov    ecx,0x4
c00034e4:	85 f6                	test   esi,esi
c00034e6:	0f 84 cd 00 00 00    	je     c00035b9 <dir_next+0xfb>
c00034ec:	89 c3                	mov    ebx,eax
c00034ee:	89 d1                	mov    ecx,edx
c00034f0:	89 f8                	mov    eax,edi
c00034f2:	25 ff 01 00 00       	and    eax,0x1ff
c00034f7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00034fb:	0f 85 a8 00 00 00    	jne    c00035a9 <dir_next+0xeb>
c0003501:	46                   	inc    esi
c0003502:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0003505:	89 73 18             	mov    DWORD PTR [ebx+0x18],esi
c0003508:	85 d2                	test   edx,edx
c000350a:	75 22                	jne    c000352e <dir_next+0x70>
c000350c:	89 fa                	mov    edx,edi
c000350e:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c0003512:	c1 ea 05             	shr    edx,0x5
c0003515:	39 c2                	cmp    edx,eax
c0003517:	0f 82 8c 00 00 00    	jb     c00035a9 <dir_next+0xeb>
c000351d:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0003524:	b9 04 00 00 00       	mov    ecx,0x4
c0003529:	e9 8b 00 00 00       	jmp    c00035b9 <dir_next+0xfb>
c000352e:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0003532:	89 fe                	mov    esi,edi
c0003534:	48                   	dec    eax
c0003535:	c1 ee 09             	shr    esi,0x9
c0003538:	85 f0                	test   eax,esi
c000353a:	75 6d                	jne    c00035a9 <dir_next+0xeb>
c000353c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003540:	89 e8                	mov    eax,ebp
c0003542:	e8 ea fb ff ff       	call   c0003131 <get_fat.isra.2>
c0003547:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000354b:	89 c6                	mov    esi,eax
c000354d:	83 f8 01             	cmp    eax,0x1
c0003550:	77 07                	ja     c0003559 <dir_next+0x9b>
c0003552:	b9 02 00 00 00       	mov    ecx,0x2
c0003557:	eb 60                	jmp    c00035b9 <dir_next+0xfb>
c0003559:	83 f8 ff             	cmp    eax,0xffffffff
c000355c:	75 07                	jne    c0003565 <dir_next+0xa7>
c000355e:	b9 01 00 00 00       	mov    ecx,0x1
c0003563:	eb 54                	jmp    c00035b9 <dir_next+0xfb>
c0003565:	39 45 18             	cmp    DWORD PTR [ebp+0x18],eax
c0003568:	77 30                	ja     c000359a <dir_next+0xdc>
c000356a:	85 c9                	test   ecx,ecx
c000356c:	74 af                	je     c000351d <dir_next+0x5f>
c000356e:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0003571:	89 d8                	mov    eax,ebx
c0003573:	e8 83 fd ff ff       	call   c00032fb <create_chain>
c0003578:	b9 07 00 00 00       	mov    ecx,0x7
c000357d:	89 c6                	mov    esi,eax
c000357f:	85 c0                	test   eax,eax
c0003581:	74 36                	je     c00035b9 <dir_next+0xfb>
c0003583:	83 f8 01             	cmp    eax,0x1
c0003586:	74 ca                	je     c0003552 <dir_next+0x94>
c0003588:	83 f8 ff             	cmp    eax,0xffffffff
c000358b:	74 d1                	je     c000355e <dir_next+0xa0>
c000358d:	89 c2                	mov    edx,eax
c000358f:	89 e8                	mov    eax,ebp
c0003591:	e8 75 f2 ff ff       	call   c000280b <dir_clear>
c0003596:	85 c0                	test   eax,eax
c0003598:	75 c4                	jne    c000355e <dir_next+0xa0>
c000359a:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c000359d:	89 f2                	mov    edx,esi
c000359f:	89 e8                	mov    eax,ebp
c00035a1:	e8 df e9 ff ff       	call   c0001f85 <clst2sect>
c00035a6:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00035a9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00035ad:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c00035b0:	8d 44 05 34          	lea    eax,[ebp+eax*1+0x34]
c00035b4:	31 c9                	xor    ecx,ecx
c00035b6:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c00035b9:	83 c4 1c             	add    esp,0x1c
c00035bc:	89 c8                	mov    eax,ecx
c00035be:	5b                   	pop    ebx
c00035bf:	5e                   	pop    esi
c00035c0:	5f                   	pop    edi
c00035c1:	5d                   	pop    ebp
c00035c2:	c3                   	ret    

c00035c3 <dir_alloc>:
c00035c3:	55                   	push   ebp
c00035c4:	89 c5                	mov    ebp,eax
c00035c6:	57                   	push   edi
c00035c7:	89 d7                	mov    edi,edx
c00035c9:	56                   	push   esi
c00035ca:	31 d2                	xor    edx,edx
c00035cc:	53                   	push   ebx
c00035cd:	83 ec 0c             	sub    esp,0xc
c00035d0:	8b 30                	mov    esi,DWORD PTR [eax]
c00035d2:	e8 5c fc ff ff       	call   c0003233 <dir_sdi>
c00035d7:	85 c0                	test   eax,eax
c00035d9:	75 37                	jne    c0003612 <dir_alloc+0x4f>
c00035db:	31 db                	xor    ebx,ebx
c00035dd:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c00035e0:	89 f0                	mov    eax,esi
c00035e2:	e8 7e ec ff ff       	call   c0002265 <move_window>
c00035e7:	85 c0                	test   eax,eax
c00035e9:	75 27                	jne    c0003612 <dir_alloc+0x4f>
c00035eb:	8b 55 1c             	mov    edx,DWORD PTR [ebp+0x1c]
c00035ee:	8a 12                	mov    dl,BYTE PTR [edx]
c00035f0:	84 d2                	test   dl,dl
c00035f2:	74 05                	je     c00035f9 <dir_alloc+0x36>
c00035f4:	80 fa e5             	cmp    dl,0xe5
c00035f7:	75 07                	jne    c0003600 <dir_alloc+0x3d>
c00035f9:	43                   	inc    ebx
c00035fa:	39 fb                	cmp    ebx,edi
c00035fc:	75 04                	jne    c0003602 <dir_alloc+0x3f>
c00035fe:	eb 1c                	jmp    c000361c <dir_alloc+0x59>
c0003600:	31 db                	xor    ebx,ebx
c0003602:	ba 01 00 00 00       	mov    edx,0x1
c0003607:	89 e8                	mov    eax,ebp
c0003609:	e8 b0 fe ff ff       	call   c00034be <dir_next>
c000360e:	85 c0                	test   eax,eax
c0003610:	74 cb                	je     c00035dd <dir_alloc+0x1a>
c0003612:	83 f8 04             	cmp    eax,0x4
c0003615:	75 05                	jne    c000361c <dir_alloc+0x59>
c0003617:	b8 07 00 00 00       	mov    eax,0x7
c000361c:	83 c4 0c             	add    esp,0xc
c000361f:	5b                   	pop    ebx
c0003620:	5e                   	pop    esi
c0003621:	5f                   	pop    edi
c0003622:	5d                   	pop    ebp
c0003623:	c3                   	ret    

c0003624 <dir_read>:
c0003624:	55                   	push   ebp
c0003625:	57                   	push   edi
c0003626:	bf ff ff ff ff       	mov    edi,0xffffffff
c000362b:	56                   	push   esi
c000362c:	be 04 00 00 00       	mov    esi,0x4
c0003631:	53                   	push   ebx
c0003632:	89 c3                	mov    ebx,eax
c0003634:	83 ec 1c             	sub    esp,0x1c
c0003637:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000363b:	8b 28                	mov    ebp,DWORD PTR [eax]
c000363d:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c0003642:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003645:	85 d2                	test   edx,edx
c0003647:	0f 84 d8 00 00 00    	je     c0003725 <dir_read+0x101>
c000364d:	89 e8                	mov    eax,ebp
c000364f:	e8 11 ec ff ff       	call   c0002265 <move_window>
c0003654:	89 c6                	mov    esi,eax
c0003656:	85 c0                	test   eax,eax
c0003658:	0f 85 d2 00 00 00    	jne    c0003730 <dir_read+0x10c>
c000365e:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003661:	8a 0a                	mov    cl,BYTE PTR [edx]
c0003663:	84 c9                	test   cl,cl
c0003665:	0f 84 c0 00 00 00    	je     c000372b <dir_read+0x107>
c000366b:	8a 42 0b             	mov    al,BYTE PTR [edx+0xb]
c000366e:	83 e0 3f             	and    eax,0x3f
c0003671:	80 f9 2e             	cmp    cl,0x2e
c0003674:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0003678:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c000367b:	0f 84 8a 00 00 00    	je     c000370b <dir_read+0xe7>
c0003681:	80 f9 e5             	cmp    cl,0xe5
c0003684:	0f 84 81 00 00 00    	je     c000370b <dir_read+0xe7>
c000368a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000368e:	83 e0 1f             	and    eax,0x1f
c0003691:	83 f8 08             	cmp    eax,0x8
c0003694:	0f 94 c0             	sete   al
c0003697:	0f b6 c0             	movzx  eax,al
c000369a:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000369e:	75 6b                	jne    c000370b <dir_read+0xe7>
c00036a0:	80 7c 24 08 0f       	cmp    BYTE PTR [esp+0x8],0xf
c00036a5:	75 44                	jne    c00036eb <dir_read+0xc7>
c00036a7:	f6 c1 40             	test   cl,0x40
c00036aa:	74 12                	je     c00036be <dir_read+0x9a>
c00036ac:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c00036af:	83 e1 bf             	and    ecx,0xffffffbf
c00036b2:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c00036b6:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00036b9:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00036bc:	eb 06                	jmp    c00036c4 <dir_read+0xa0>
c00036be:	89 f8                	mov    eax,edi
c00036c0:	38 c8                	cmp    al,cl
c00036c2:	75 47                	jne    c000370b <dir_read+0xe7>
c00036c4:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00036c8:	bf ff ff ff ff       	mov    edi,0xffffffff
c00036cd:	38 42 0d             	cmp    BYTE PTR [edx+0xd],al
c00036d0:	75 3e                	jne    c0003710 <dir_read+0xec>
c00036d2:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00036d6:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00036d9:	e8 c4 e8 ff ff       	call   c0001fa2 <pick_lfn>
c00036de:	85 c0                	test   eax,eax
c00036e0:	74 2e                	je     c0003710 <dir_read+0xec>
c00036e2:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c00036e6:	8d 79 ff             	lea    edi,[ecx-0x1]
c00036e9:	eb 25                	jmp    c0003710 <dir_read+0xec>
c00036eb:	89 f8                	mov    eax,edi
c00036ed:	84 c0                	test   al,al
c00036ef:	75 11                	jne    c0003702 <dir_read+0xde>
c00036f1:	89 d0                	mov    eax,edx
c00036f3:	e8 64 ea ff ff       	call   c000215c <sum_sfn>
c00036f8:	3a 44 24 07          	cmp    al,BYTE PTR [esp+0x7]
c00036fc:	75 04                	jne    c0003702 <dir_read+0xde>
c00036fe:	31 f6                	xor    esi,esi
c0003700:	eb 35                	jmp    c0003737 <dir_read+0x113>
c0003702:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003709:	eb 2c                	jmp    c0003737 <dir_read+0x113>
c000370b:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003710:	31 d2                	xor    edx,edx
c0003712:	89 d8                	mov    eax,ebx
c0003714:	e8 a5 fd ff ff       	call   c00034be <dir_next>
c0003719:	89 c6                	mov    esi,eax
c000371b:	85 c0                	test   eax,eax
c000371d:	0f 84 1f ff ff ff    	je     c0003642 <dir_read+0x1e>
c0003723:	eb 0b                	jmp    c0003730 <dir_read+0x10c>
c0003725:	85 f6                	test   esi,esi
c0003727:	74 d5                	je     c00036fe <dir_read+0xda>
c0003729:	eb 05                	jmp    c0003730 <dir_read+0x10c>
c000372b:	be 04 00 00 00       	mov    esi,0x4
c0003730:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0003737:	83 c4 1c             	add    esp,0x1c
c000373a:	89 f0                	mov    eax,esi
c000373c:	5b                   	pop    ebx
c000373d:	5e                   	pop    esi
c000373e:	5f                   	pop    edi
c000373f:	5d                   	pop    ebp
c0003740:	c3                   	ret    

c0003741 <dir_remove>:
c0003741:	57                   	push   edi
c0003742:	56                   	push   esi
c0003743:	53                   	push   ebx
c0003744:	89 c3                	mov    ebx,eax
c0003746:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0003749:	8b 30                	mov    esi,DWORD PTR [eax]
c000374b:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000374e:	83 fa ff             	cmp    edx,0xffffffff
c0003751:	74 09                	je     c000375c <dir_remove+0x1b>
c0003753:	e8 db fa ff ff       	call   c0003233 <dir_sdi>
c0003758:	85 c0                	test   eax,eax
c000375a:	75 34                	jne    c0003790 <dir_remove+0x4f>
c000375c:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000375f:	89 f0                	mov    eax,esi
c0003761:	e8 ff ea ff ff       	call   c0002265 <move_window>
c0003766:	85 c0                	test   eax,eax
c0003768:	75 1c                	jne    c0003786 <dir_remove+0x45>
c000376a:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000376d:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003770:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003774:	39 7b 10             	cmp    DWORD PTR [ebx+0x10],edi
c0003777:	73 17                	jae    c0003790 <dir_remove+0x4f>
c0003779:	31 d2                	xor    edx,edx
c000377b:	89 d8                	mov    eax,ebx
c000377d:	e8 3c fd ff ff       	call   c00034be <dir_next>
c0003782:	85 c0                	test   eax,eax
c0003784:	74 d6                	je     c000375c <dir_remove+0x1b>
c0003786:	83 f8 04             	cmp    eax,0x4
c0003789:	75 05                	jne    c0003790 <dir_remove+0x4f>
c000378b:	b8 02 00 00 00       	mov    eax,0x2
c0003790:	5b                   	pop    ebx
c0003791:	5e                   	pop    esi
c0003792:	5f                   	pop    edi
c0003793:	c3                   	ret    

c0003794 <dir_find>:
c0003794:	55                   	push   ebp
c0003795:	31 d2                	xor    edx,edx
c0003797:	57                   	push   edi
c0003798:	56                   	push   esi
c0003799:	53                   	push   ebx
c000379a:	89 c3                	mov    ebx,eax
c000379c:	83 ec 1c             	sub    esp,0x1c
c000379f:	8b 00                	mov    eax,DWORD PTR [eax]
c00037a1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00037a5:	89 d8                	mov    eax,ebx
c00037a7:	e8 87 fa ff ff       	call   c0003233 <dir_sdi>
c00037ac:	89 c6                	mov    esi,eax
c00037ae:	85 c0                	test   eax,eax
c00037b0:	0f 85 02 01 00 00    	jne    c00038b8 <dir_find+0x124>
c00037b6:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c00037bd:	c6 44 24 0e ff       	mov    BYTE PTR [esp+0xe],0xff
c00037c2:	bf ff ff ff ff       	mov    edi,0xffffffff
c00037c7:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00037ca:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00037ce:	e8 92 ea ff ff       	call   c0002265 <move_window>
c00037d3:	89 c6                	mov    esi,eax
c00037d5:	85 c0                	test   eax,eax
c00037d7:	0f 85 db 00 00 00    	jne    c00038b8 <dir_find+0x124>
c00037dd:	8b 6b 1c             	mov    ebp,DWORD PTR [ebx+0x1c]
c00037e0:	8a 4d 00             	mov    cl,BYTE PTR [ebp+0x0]
c00037e3:	84 c9                	test   cl,cl
c00037e5:	0f 84 c8 00 00 00    	je     c00038b3 <dir_find+0x11f>
c00037eb:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c00037ee:	88 d0                	mov    al,dl
c00037f0:	83 e0 3f             	and    eax,0x3f
c00037f3:	80 f9 e5             	cmp    cl,0xe5
c00037f6:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c00037f9:	0f 84 93 00 00 00    	je     c0003892 <dir_find+0xfe>
c00037ff:	80 e2 08             	and    dl,0x8
c0003802:	74 0a                	je     c000380e <dir_find+0x7a>
c0003804:	3c 0f                	cmp    al,0xf
c0003806:	0f 85 86 00 00 00    	jne    c0003892 <dir_find+0xfe>
c000380c:	eb 04                	jmp    c0003812 <dir_find+0x7e>
c000380e:	3c 0f                	cmp    al,0xf
c0003810:	75 54                	jne    c0003866 <dir_find+0xd2>
c0003812:	f6 43 2b 40          	test   BYTE PTR [ebx+0x2b],0x40
c0003816:	0f 85 82 00 00 00    	jne    c000389e <dir_find+0x10a>
c000381c:	f6 c1 40             	test   cl,0x40
c000381f:	74 12                	je     c0003833 <dir_find+0x9f>
c0003821:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0003824:	83 e1 bf             	and    ecx,0xffffffbf
c0003827:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c000382b:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000382e:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0003831:	eb 06                	jmp    c0003839 <dir_find+0xa5>
c0003833:	89 f8                	mov    eax,edi
c0003835:	38 c8                	cmp    al,cl
c0003837:	75 60                	jne    c0003899 <dir_find+0x105>
c0003839:	8a 44 24 0e          	mov    al,BYTE PTR [esp+0xe]
c000383d:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003842:	38 45 0d             	cmp    BYTE PTR [ebp+0xd],al
c0003845:	75 57                	jne    c000389e <dir_find+0x10a>
c0003847:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000384b:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c000384f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003852:	89 ea                	mov    edx,ebp
c0003854:	e8 89 f3 ff ff       	call   c0002be2 <cmp_lfn>
c0003859:	85 c0                	test   eax,eax
c000385b:	74 41                	je     c000389e <dir_find+0x10a>
c000385d:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0003861:	8d 79 ff             	lea    edi,[ecx-0x1]
c0003864:	eb 38                	jmp    c000389e <dir_find+0x10a>
c0003866:	89 f8                	mov    eax,edi
c0003868:	84 c0                	test   al,al
c000386a:	75 0d                	jne    c0003879 <dir_find+0xe5>
c000386c:	89 e8                	mov    eax,ebp
c000386e:	e8 e9 e8 ff ff       	call   c000215c <sum_sfn>
c0003873:	3a 44 24 0e          	cmp    al,BYTE PTR [esp+0xe]
c0003877:	74 3f                	je     c00038b8 <dir_find+0x124>
c0003879:	f6 43 2b 01          	test   BYTE PTR [ebx+0x2b],0x1
c000387d:	75 13                	jne    c0003892 <dir_find+0xfe>
c000387f:	8d 53 20             	lea    edx,[ebx+0x20]
c0003882:	b9 0b 00 00 00       	mov    ecx,0xb
c0003887:	89 e8                	mov    eax,ebp
c0003889:	e8 fd e4 ff ff       	call   c0001d8b <mem_cmp>
c000388e:	85 c0                	test   eax,eax
c0003890:	74 26                	je     c00038b8 <dir_find+0x124>
c0003892:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003899:	bf ff ff ff ff       	mov    edi,0xffffffff
c000389e:	31 d2                	xor    edx,edx
c00038a0:	89 d8                	mov    eax,ebx
c00038a2:	e8 17 fc ff ff       	call   c00034be <dir_next>
c00038a7:	89 c6                	mov    esi,eax
c00038a9:	85 c0                	test   eax,eax
c00038ab:	0f 84 16 ff ff ff    	je     c00037c7 <dir_find+0x33>
c00038b1:	eb 05                	jmp    c00038b8 <dir_find+0x124>
c00038b3:	be 04 00 00 00       	mov    esi,0x4
c00038b8:	83 c4 1c             	add    esp,0x1c
c00038bb:	89 f0                	mov    eax,esi
c00038bd:	5b                   	pop    ebx
c00038be:	5e                   	pop    esi
c00038bf:	5f                   	pop    edi
c00038c0:	5d                   	pop    ebp
c00038c1:	c3                   	ret    

c00038c2 <follow_path>:
c00038c2:	56                   	push   esi
c00038c3:	53                   	push   ebx
c00038c4:	89 c3                	mov    ebx,eax
c00038c6:	83 ec 14             	sub    esp,0x14
c00038c9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00038cd:	8b 30                	mov    esi,DWORD PTR [eax]
c00038cf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00038d3:	8a 10                	mov    dl,BYTE PTR [eax]
c00038d5:	80 fa 5c             	cmp    dl,0x5c
c00038d8:	75 07                	jne    c00038e1 <follow_path+0x1f>
c00038da:	40                   	inc    eax
c00038db:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00038df:	eb ee                	jmp    c00038cf <follow_path+0xd>
c00038e1:	80 fa 2f             	cmp    dl,0x2f
c00038e4:	74 f4                	je     c00038da <follow_path+0x18>
c00038e6:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c00038ed:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c00038f0:	77 3e                	ja     c0003930 <follow_path+0x6e>
c00038f2:	c6 43 2b 80          	mov    BYTE PTR [ebx+0x2b],0x80
c00038f6:	31 d2                	xor    edx,edx
c00038f8:	89 d8                	mov    eax,ebx
c00038fa:	e8 34 f9 ff ff       	call   c0003233 <dir_sdi>
c00038ff:	eb 4f                	jmp    c0003950 <follow_path+0x8e>
c0003901:	89 d8                	mov    eax,ebx
c0003903:	e8 8c fe ff ff       	call   c0003794 <dir_find>
c0003908:	8a 53 2b             	mov    dl,BYTE PTR [ebx+0x2b]
c000390b:	85 c0                	test   eax,eax
c000390d:	75 32                	jne    c0003941 <follow_path+0x7f>
c000390f:	80 e2 04             	and    dl,0x4
c0003912:	75 3c                	jne    c0003950 <follow_path+0x8e>
c0003914:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0003918:	74 31                	je     c000394b <follow_path+0x89>
c000391a:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000391d:	25 ff 01 00 00       	and    eax,0x1ff
c0003922:	8d 54 06 34          	lea    edx,[esi+eax*1+0x34]
c0003926:	8a 06                	mov    al,BYTE PTR [esi]
c0003928:	e8 b3 f7 ff ff       	call   c00030e0 <ld_clust.isra.0>
c000392d:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003930:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0003934:	89 d8                	mov    eax,ebx
c0003936:	e8 cb ef ff ff       	call   c0002906 <create_name>
c000393b:	85 c0                	test   eax,eax
c000393d:	74 c2                	je     c0003901 <follow_path+0x3f>
c000393f:	eb 0f                	jmp    c0003950 <follow_path+0x8e>
c0003941:	83 f8 04             	cmp    eax,0x4
c0003944:	75 0a                	jne    c0003950 <follow_path+0x8e>
c0003946:	80 e2 04             	and    dl,0x4
c0003949:	75 05                	jne    c0003950 <follow_path+0x8e>
c000394b:	b8 05 00 00 00       	mov    eax,0x5
c0003950:	83 c4 14             	add    esp,0x14
c0003953:	5b                   	pop    ebx
c0003954:	5e                   	pop    esi
c0003955:	c3                   	ret    

c0003956 <dir_register>:
c0003956:	55                   	push   ebp
c0003957:	57                   	push   edi
c0003958:	56                   	push   esi
c0003959:	be 06 00 00 00       	mov    esi,0x6
c000395e:	53                   	push   ebx
c000395f:	83 ec 2c             	sub    esp,0x2c
c0003962:	f6 40 2b a0          	test   BYTE PTR [eax+0x2b],0xa0
c0003966:	0f 85 65 01 00 00    	jne    c0003ad1 <dir_register+0x17b>
c000396c:	8b 38                	mov    edi,DWORD PTR [eax]
c000396e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003976:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c0003979:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000397d:	66 83 3c 4a 00       	cmp    WORD PTR [edx+ecx*2],0x0
c0003982:	74 06                	je     c000398a <dir_register+0x34>
c0003984:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0003988:	eb ef                	jmp    c0003979 <dir_register+0x23>
c000398a:	89 c3                	mov    ebx,eax
c000398c:	b9 0c 00 00 00       	mov    ecx,0xc
c0003991:	8d 40 20             	lea    eax,[eax+0x20]
c0003994:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003998:	89 c2                	mov    edx,eax
c000399a:	8d 44 24 14          	lea    eax,[esp+0x14]
c000399e:	e8 c8 e3 ff ff       	call   c0001d6b <mem_cpy>
c00039a3:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c00039a8:	74 48                	je     c00039f2 <dir_register+0x9c>
c00039aa:	c6 43 2b 40          	mov    BYTE PTR [ebx+0x2b],0x40
c00039ae:	bd 01 00 00 00       	mov    ebp,0x1
c00039b3:	8b 4f 0c             	mov    ecx,DWORD PTR [edi+0xc]
c00039b6:	55                   	push   ebp
c00039b7:	8d 54 24 18          	lea    edx,[esp+0x18]
c00039bb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00039bf:	e8 dc e6 ff ff       	call   c00020a0 <gen_numname>
c00039c4:	58                   	pop    eax
c00039c5:	89 d8                	mov    eax,ebx
c00039c7:	e8 c8 fd ff ff       	call   c0003794 <dir_find>
c00039cc:	89 c6                	mov    esi,eax
c00039ce:	85 c0                	test   eax,eax
c00039d0:	75 10                	jne    c00039e2 <dir_register+0x8c>
c00039d2:	45                   	inc    ebp
c00039d3:	83 fd 64             	cmp    ebp,0x64
c00039d6:	75 db                	jne    c00039b3 <dir_register+0x5d>
c00039d8:	be 07 00 00 00       	mov    esi,0x7
c00039dd:	e9 ef 00 00 00       	jmp    c0003ad1 <dir_register+0x17b>
c00039e2:	83 f8 04             	cmp    eax,0x4
c00039e5:	0f 85 e6 00 00 00    	jne    c0003ad1 <dir_register+0x17b>
c00039eb:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c00039ef:	88 43 2b             	mov    BYTE PTR [ebx+0x2b],al
c00039f2:	bd 01 00 00 00       	mov    ebp,0x1
c00039f7:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c00039fc:	74 13                	je     c0003a11 <dir_register+0xbb>
c00039fe:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003a02:	b9 0d 00 00 00       	mov    ecx,0xd
c0003a07:	83 c0 0c             	add    eax,0xc
c0003a0a:	31 d2                	xor    edx,edx
c0003a0c:	f7 f1                	div    ecx
c0003a0e:	8d 68 01             	lea    ebp,[eax+0x1]
c0003a11:	89 ea                	mov    edx,ebp
c0003a13:	89 d8                	mov    eax,ebx
c0003a15:	e8 a9 fb ff ff       	call   c00035c3 <dir_alloc>
c0003a1a:	89 c6                	mov    esi,eax
c0003a1c:	85 c0                	test   eax,eax
c0003a1e:	0f 85 ad 00 00 00    	jne    c0003ad1 <dir_register+0x17b>
c0003a24:	4d                   	dec    ebp
c0003a25:	74 6a                	je     c0003a91 <dir_register+0x13b>
c0003a27:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0003a2a:	89 e8                	mov    eax,ebp
c0003a2c:	c1 e0 05             	shl    eax,0x5
c0003a2f:	29 c2                	sub    edx,eax
c0003a31:	89 d8                	mov    eax,ebx
c0003a33:	e8 fb f7 ff ff       	call   c0003233 <dir_sdi>
c0003a38:	89 c6                	mov    esi,eax
c0003a3a:	85 c0                	test   eax,eax
c0003a3c:	0f 85 8f 00 00 00    	jne    c0003ad1 <dir_register+0x17b>
c0003a42:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003a46:	e8 11 e7 ff ff       	call   c000215c <sum_sfn>
c0003a4b:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0003a4f:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003a52:	89 f8                	mov    eax,edi
c0003a54:	e8 0c e8 ff ff       	call   c0002265 <move_window>
c0003a59:	89 c6                	mov    esi,eax
c0003a5b:	85 c0                	test   eax,eax
c0003a5d:	75 72                	jne    c0003ad1 <dir_register+0x17b>
c0003a5f:	83 ec 0c             	sub    esp,0xc
c0003a62:	89 e8                	mov    eax,ebp
c0003a64:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c0003a69:	0f b6 c8             	movzx  ecx,al
c0003a6c:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003a6f:	52                   	push   edx
c0003a70:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003a73:	e8 a4 e5 ff ff       	call   c000201c <put_lfn>
c0003a78:	31 d2                	xor    edx,edx
c0003a7a:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003a7e:	89 d8                	mov    eax,ebx
c0003a80:	e8 39 fa ff ff       	call   c00034be <dir_next>
c0003a85:	83 c4 10             	add    esp,0x10
c0003a88:	89 c6                	mov    esi,eax
c0003a8a:	85 c0                	test   eax,eax
c0003a8c:	75 43                	jne    c0003ad1 <dir_register+0x17b>
c0003a8e:	4d                   	dec    ebp
c0003a8f:	75 be                	jne    c0003a4f <dir_register+0xf9>
c0003a91:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003a94:	89 f8                	mov    eax,edi
c0003a96:	e8 ca e7 ff ff       	call   c0002265 <move_window>
c0003a9b:	89 c6                	mov    esi,eax
c0003a9d:	85 c0                	test   eax,eax
c0003a9f:	75 30                	jne    c0003ad1 <dir_register+0x17b>
c0003aa1:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003aa4:	b9 20 00 00 00       	mov    ecx,0x20
c0003aa9:	31 d2                	xor    edx,edx
c0003aab:	e8 d0 e2 ff ff       	call   c0001d80 <mem_set>
c0003ab0:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003ab3:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003ab7:	b9 0b 00 00 00       	mov    ecx,0xb
c0003abc:	e8 aa e2 ff ff       	call   c0001d6b <mem_cpy>
c0003ac1:	8a 43 2b             	mov    al,BYTE PTR [ebx+0x2b]
c0003ac4:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003ac7:	83 e0 18             	and    eax,0x18
c0003aca:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0003acd:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003ad1:	83 c4 2c             	add    esp,0x2c
c0003ad4:	89 f0                	mov    eax,esi
c0003ad6:	5b                   	pop    ebx
c0003ad7:	5e                   	pop    esi
c0003ad8:	5f                   	pop    edi
c0003ad9:	5d                   	pop    ebp
c0003ada:	c3                   	ret    

c0003adb <f_mount>:
c0003adb:	53                   	push   ebx
c0003adc:	83 ec 18             	sub    esp,0x18
c0003adf:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0003ae3:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0003ae7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003aeb:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0003aef:	e8 7a e6 ff ff       	call   c000216e <get_ldnumber>
c0003af4:	89 c2                	mov    edx,eax
c0003af6:	b8 0b 00 00 00       	mov    eax,0xb
c0003afb:	85 d2                	test   edx,edx
c0003afd:	78 39                	js     c0003b38 <f_mount+0x5d>
c0003aff:	8b 04 95 a0 fd 01 c0 	mov    eax,DWORD PTR [edx*4-0x3ffe0260]
c0003b06:	85 c0                	test   eax,eax
c0003b08:	74 03                	je     c0003b0d <f_mount+0x32>
c0003b0a:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003b0d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003b11:	85 c0                	test   eax,eax
c0003b13:	74 03                	je     c0003b18 <f_mount+0x3d>
c0003b15:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003b18:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003b1c:	89 04 95 a0 fd 01 c0 	mov    DWORD PTR [edx*4-0x3ffe0260],eax
c0003b23:	31 c0                	xor    eax,eax
c0003b25:	84 db                	test   bl,bl
c0003b27:	74 0f                	je     c0003b38 <f_mount+0x5d>
c0003b29:	31 c9                	xor    ecx,ecx
c0003b2b:	8d 54 24 20          	lea    edx,[esp+0x20]
c0003b2f:	8d 44 24 24          	lea    eax,[esp+0x24]
c0003b33:	e8 80 e8 ff ff       	call   c00023b8 <mount_volume>
c0003b38:	83 c4 18             	add    esp,0x18
c0003b3b:	5b                   	pop    ebx
c0003b3c:	c3                   	ret    

c0003b3d <f_open>:
c0003b3d:	55                   	push   ebp
c0003b3e:	b8 09 00 00 00       	mov    eax,0x9
c0003b43:	57                   	push   edi
c0003b44:	56                   	push   esi
c0003b45:	53                   	push   ebx
c0003b46:	83 ec 5c             	sub    esp,0x5c
c0003b49:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c0003b4d:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0003b51:	85 db                	test   ebx,ebx
c0003b53:	0f 84 a7 02 00 00    	je     c0003e00 <f_open+0x2c3>
c0003b59:	89 fe                	mov    esi,edi
c0003b5b:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003b5f:	83 e6 3f             	and    esi,0x3f
c0003b62:	89 f0                	mov    eax,esi
c0003b64:	0f b6 c8             	movzx  ecx,al
c0003b67:	8d 44 24 74          	lea    eax,[esp+0x74]
c0003b6b:	e8 48 e8 ff ff       	call   c00023b8 <mount_volume>
c0003b70:	85 c0                	test   eax,eax
c0003b72:	0f 85 82 02 00 00    	jne    c0003dfa <f_open+0x2bd>
c0003b78:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003b7c:	83 ec 0c             	sub    esp,0xc
c0003b7f:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003b83:	68 00 02 00 00       	push   0x200
c0003b88:	e8 ff 1e 00 00       	call   c0005a8c <ff_memalloc>
c0003b8d:	83 c4 10             	add    esp,0x10
c0003b90:	89 c5                	mov    ebp,eax
c0003b92:	b8 11 00 00 00       	mov    eax,0x11
c0003b97:	85 ed                	test   ebp,ebp
c0003b99:	0f 84 61 02 00 00    	je     c0003e00 <f_open+0x2c3>
c0003b9f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003ba3:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0003ba7:	89 68 0c             	mov    DWORD PTR [eax+0xc],ebp
c0003baa:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003bae:	e8 0f fd ff ff       	call   c00038c2 <follow_path>
c0003bb3:	85 c0                	test   eax,eax
c0003bb5:	75 0c                	jne    c0003bc3 <f_open+0x86>
c0003bb7:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c0003bbc:	79 05                	jns    c0003bc3 <f_open+0x86>
c0003bbe:	b8 06 00 00 00       	mov    eax,0x6
c0003bc3:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0003bc9:	0f 84 de 00 00 00    	je     c0003cad <f_open+0x170>
c0003bcf:	85 c0                	test   eax,eax
c0003bd1:	74 1e                	je     c0003bf1 <f_open+0xb4>
c0003bd3:	83 f8 04             	cmp    eax,0x4
c0003bd6:	0f 85 06 02 00 00    	jne    c0003de2 <f_open+0x2a5>
c0003bdc:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003be0:	83 ce 08             	or     esi,0x8
c0003be3:	e8 6e fd ff ff       	call   c0003956 <dir_register>
c0003be8:	85 c0                	test   eax,eax
c0003bea:	74 2f                	je     c0003c1b <f_open+0xde>
c0003bec:	e9 f1 01 00 00       	jmp    c0003de2 <f_open+0x2a5>
c0003bf1:	b8 07 00 00 00       	mov    eax,0x7
c0003bf6:	f6 44 24 26 11       	test   BYTE PTR [esp+0x26],0x11
c0003bfb:	0f 85 e1 01 00 00    	jne    c0003de2 <f_open+0x2a5>
c0003c01:	b8 08 00 00 00       	mov    eax,0x8
c0003c06:	f7 c7 04 00 00 00    	test   edi,0x4
c0003c0c:	0f 85 d0 01 00 00    	jne    c0003de2 <f_open+0x2a5>
c0003c12:	83 e7 08             	and    edi,0x8
c0003c15:	0f 84 bf 00 00 00    	je     c0003cda <f_open+0x19d>
c0003c1b:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c0003c1f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003c23:	89 ca                	mov    edx,ecx
c0003c25:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003c29:	8a 00                	mov    al,BYTE PTR [eax]
c0003c2b:	e8 b0 f4 ff ff       	call   c00030e0 <ld_clust.isra.0>
c0003c30:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003c34:	89 c7                	mov    edi,eax
c0003c36:	ba 00 00 21 50       	mov    edx,0x50210000
c0003c3b:	8d 41 0e             	lea    eax,[ecx+0xe]
c0003c3e:	e8 25 e1 ff ff       	call   c0001d68 <st_dword>
c0003c43:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003c47:	31 c9                	xor    ecx,ecx
c0003c49:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0003c4d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003c51:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0003c55:	e8 af f4 ff ff       	call   c0003109 <st_clust.isra.1>
c0003c5a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003c5e:	31 d2                	xor    edx,edx
c0003c60:	83 c0 1c             	add    eax,0x1c
c0003c63:	e8 00 e1 ff ff       	call   c0001d68 <st_dword>
c0003c68:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003c6c:	85 ff                	test   edi,edi
c0003c6e:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003c72:	74 66                	je     c0003cda <f_open+0x19d>
c0003c74:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003c78:	31 c9                	xor    ecx,ecx
c0003c7a:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0003c7d:	89 fa                	mov    edx,edi
c0003c7f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003c83:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003c87:	e8 a9 f7 ff ff       	call   c0003435 <remove_chain>
c0003c8c:	85 c0                	test   eax,eax
c0003c8e:	0f 85 4e 01 00 00    	jne    c0003de2 <f_open+0x2a5>
c0003c94:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003c98:	4f                   	dec    edi
c0003c99:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003c9d:	e8 c3 e5 ff ff       	call   c0002265 <move_window>
c0003ca2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003ca6:	85 c0                	test   eax,eax
c0003ca8:	89 7a 10             	mov    DWORD PTR [edx+0x10],edi
c0003cab:	eb 27                	jmp    c0003cd4 <f_open+0x197>
c0003cad:	85 c0                	test   eax,eax
c0003caf:	0f 85 2d 01 00 00    	jne    c0003de2 <f_open+0x2a5>
c0003cb5:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0003cb9:	b8 04 00 00 00       	mov    eax,0x4
c0003cbe:	f6 c2 10             	test   dl,0x10
c0003cc1:	0f 85 1b 01 00 00    	jne    c0003de2 <f_open+0x2a5>
c0003cc7:	83 e7 02             	and    edi,0x2
c0003cca:	74 0e                	je     c0003cda <f_open+0x19d>
c0003ccc:	b8 07 00 00 00       	mov    eax,0x7
c0003cd1:	80 e2 01             	and    dl,0x1
c0003cd4:	0f 85 08 01 00 00    	jne    c0003de2 <f_open+0x2a5>
c0003cda:	f7 c6 08 00 00 00    	test   esi,0x8
c0003ce0:	74 03                	je     c0003ce5 <f_open+0x1a8>
c0003ce2:	83 ce 40             	or     esi,0x40
c0003ce5:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003ce9:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0003ced:	8b 41 30             	mov    eax,DWORD PTR [ecx+0x30]
c0003cf0:	89 fa                	mov    edx,edi
c0003cf2:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003cf6:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0003cf9:	89 7b 24             	mov    DWORD PTR [ebx+0x24],edi
c0003cfc:	8a 01                	mov    al,BYTE PTR [ecx]
c0003cfe:	e8 dd f3 ff ff       	call   c00030e0 <ld_clust.isra.0>
c0003d03:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003d06:	8d 47 1c             	lea    eax,[edi+0x1c]
c0003d09:	e8 3e e0 ff ff       	call   c0001d4c <ld_dword>
c0003d0e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003d12:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0003d15:	89 0b                	mov    DWORD PTR [ebx],ecx
c0003d17:	31 d2                	xor    edx,edx
c0003d19:	66 8b 41 06          	mov    ax,WORD PTR [ecx+0x6]
c0003d1d:	c6 43 11 00          	mov    BYTE PTR [ebx+0x11],0x0
c0003d21:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0003d25:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0003d2c:	89 f0                	mov    eax,esi
c0003d2e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0003d35:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0003d38:	b9 00 02 00 00       	mov    ecx,0x200
c0003d3d:	8d 43 28             	lea    eax,[ebx+0x28]
c0003d40:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003d44:	e8 37 e0 ff ff       	call   c0001d80 <mem_set>
c0003d49:	83 e6 20             	and    esi,0x20
c0003d4c:	75 07                	jne    c0003d55 <f_open+0x218>
c0003d4e:	31 c0                	xor    eax,eax
c0003d50:	e9 8d 00 00 00       	jmp    c0003de2 <f_open+0x2a5>
c0003d55:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0003d58:	85 ff                	test   edi,edi
c0003d5a:	74 f2                	je     c0003d4e <f_open+0x211>
c0003d5c:	89 7b 14             	mov    DWORD PTR [ebx+0x14],edi
c0003d5f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003d63:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0003d66:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0003d6a:	c1 e6 09             	shl    esi,0x9
c0003d6d:	39 fe                	cmp    esi,edi
c0003d6f:	73 1c                	jae    c0003d8d <f_open+0x250>
c0003d71:	8b 03                	mov    eax,DWORD PTR [ebx]
c0003d73:	29 f7                	sub    edi,esi
c0003d75:	e8 b7 f3 ff ff       	call   c0003131 <get_fat.isra.2>
c0003d7a:	89 c2                	mov    edx,eax
c0003d7c:	83 f8 01             	cmp    eax,0x1
c0003d7f:	76 10                	jbe    c0003d91 <f_open+0x254>
c0003d81:	83 f8 ff             	cmp    eax,0xffffffff
c0003d84:	75 e7                	jne    c0003d6d <f_open+0x230>
c0003d86:	b8 01 00 00 00       	mov    eax,0x1
c0003d8b:	eb 09                	jmp    c0003d96 <f_open+0x259>
c0003d8d:	31 c0                	xor    eax,eax
c0003d8f:	eb 05                	jmp    c0003d96 <f_open+0x259>
c0003d91:	b8 02 00 00 00       	mov    eax,0x2
c0003d96:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0003d99:	85 c0                	test   eax,eax
c0003d9b:	75 45                	jne    c0003de2 <f_open+0x2a5>
c0003d9d:	f7 c7 ff 01 00 00    	test   edi,0x1ff
c0003da3:	74 a9                	je     c0003d4e <f_open+0x211>
c0003da5:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0003da9:	89 f0                	mov    eax,esi
c0003dab:	e8 d5 e1 ff ff       	call   c0001f85 <clst2sect>
c0003db0:	89 c2                	mov    edx,eax
c0003db2:	b8 02 00 00 00       	mov    eax,0x2
c0003db7:	85 d2                	test   edx,edx
c0003db9:	74 27                	je     c0003de2 <f_open+0x2a5>
c0003dbb:	89 f9                	mov    ecx,edi
c0003dbd:	c1 e9 09             	shr    ecx,0x9
c0003dc0:	8d 04 11             	lea    eax,[ecx+edx*1]
c0003dc3:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0003dc6:	6a 01                	push   0x1
c0003dc8:	50                   	push   eax
c0003dc9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0003dcd:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003dd1:	50                   	push   eax
c0003dd2:	e8 1d df ff ff       	call   c0001cf4 <disk_read>
c0003dd7:	83 c4 10             	add    esp,0x10
c0003dda:	85 c0                	test   eax,eax
c0003ddc:	0f 95 c0             	setne  al
c0003ddf:	0f b6 c0             	movzx  eax,al
c0003de2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003de6:	83 ec 0c             	sub    esp,0xc
c0003de9:	55                   	push   ebp
c0003dea:	e8 b5 1c 00 00       	call   c0005aa4 <ff_memfree>
c0003def:	83 c4 10             	add    esp,0x10
c0003df2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003df6:	85 c0                	test   eax,eax
c0003df8:	74 06                	je     c0003e00 <f_open+0x2c3>
c0003dfa:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0003e00:	83 c4 5c             	add    esp,0x5c
c0003e03:	5b                   	pop    ebx
c0003e04:	5e                   	pop    esi
c0003e05:	5f                   	pop    edi
c0003e06:	5d                   	pop    ebp
c0003e07:	c3                   	ret    

c0003e08 <f_read>:
c0003e08:	55                   	push   ebp
c0003e09:	57                   	push   edi
c0003e0a:	56                   	push   esi
c0003e0b:	53                   	push   ebx
c0003e0c:	83 ec 2c             	sub    esp,0x2c
c0003e0f:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0003e13:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0003e17:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0003e1d:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0003e21:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003e25:	89 d8                	mov    eax,ebx
c0003e27:	e8 8f e3 ff ff       	call   c00021bb <validate>
c0003e2c:	89 c5                	mov    ebp,eax
c0003e2e:	85 c0                	test   eax,eax
c0003e30:	0f 85 c7 01 00 00    	jne    c0003ffd <f_read+0x1f5>
c0003e36:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0003e3a:	85 ed                	test   ebp,ebp
c0003e3c:	0f 85 bb 01 00 00    	jne    c0003ffd <f_read+0x1f5>
c0003e42:	f6 43 10 01          	test   BYTE PTR [ebx+0x10],0x1
c0003e46:	0f 84 ac 01 00 00    	je     c0003ff8 <f_read+0x1f0>
c0003e4c:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0003e4f:	2b 43 14             	sub    eax,DWORD PTR [ebx+0x14]
c0003e52:	89 c7                	mov    edi,eax
c0003e54:	39 f0                	cmp    eax,esi
c0003e56:	0f 86 ad 00 00 00    	jbe    c0003f09 <f_read+0x101>
c0003e5c:	89 f7                	mov    edi,esi
c0003e5e:	e9 a6 00 00 00       	jmp    c0003f09 <f_read+0x101>
c0003e63:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0003e66:	f7 c2 ff 01 00 00    	test   edx,0x1ff
c0003e6c:	0f 85 5b 01 00 00    	jne    c0003fcd <f_read+0x1c5>
c0003e72:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003e76:	89 d1                	mov    ecx,edx
c0003e78:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0003e7c:	c1 e9 09             	shr    ecx,0x9
c0003e7f:	48                   	dec    eax
c0003e80:	21 c8                	and    eax,ecx
c0003e82:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003e86:	0f 84 8a 00 00 00    	je     c0003f16 <f_read+0x10e>
c0003e8c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003e90:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003e93:	89 c8                	mov    eax,ecx
c0003e95:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003e99:	e8 e7 e0 ff ff       	call   c0001f85 <clst2sect>
c0003e9e:	85 c0                	test   eax,eax
c0003ea0:	0f 84 88 00 00 00    	je     c0003f2e <f_read+0x126>
c0003ea6:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0003eaa:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003eae:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0003eb2:	81 ff ff 01 00 00    	cmp    edi,0x1ff
c0003eb8:	0f 86 bd 00 00 00    	jbe    c0003f7b <f_read+0x173>
c0003ebe:	89 fe                	mov    esi,edi
c0003ec0:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0003ec4:	c1 ee 09             	shr    esi,0x9
c0003ec7:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003ecb:	01 f2                	add    edx,esi
c0003ecd:	39 c2                	cmp    edx,eax
c0003ecf:	76 06                	jbe    c0003ed7 <f_read+0xcf>
c0003ed1:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0003ed5:	89 c6                	mov    esi,eax
c0003ed7:	56                   	push   esi
c0003ed8:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0003edc:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0003ee0:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0003ee4:	50                   	push   eax
c0003ee5:	e8 0a de ff ff       	call   c0001cf4 <disk_read>
c0003eea:	83 c4 10             	add    esp,0x10
c0003eed:	85 c0                	test   eax,eax
c0003eef:	75 50                	jne    c0003f41 <f_read+0x139>
c0003ef1:	80 7b 10 00          	cmp    BYTE PTR [ebx+0x10],0x0
c0003ef5:	78 60                	js     c0003f57 <f_read+0x14f>
c0003ef7:	c1 e6 09             	shl    esi,0x9
c0003efa:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0003efe:	29 f7                	sub    edi,esi
c0003f00:	01 30                	add    DWORD PTR [eax],esi
c0003f02:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0003f06:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c0003f09:	85 ff                	test   edi,edi
c0003f0b:	0f 85 52 ff ff ff    	jne    c0003e63 <f_read+0x5b>
c0003f11:	e9 e7 00 00 00       	jmp    c0003ffd <f_read+0x1f5>
c0003f16:	85 d2                	test   edx,edx
c0003f18:	75 05                	jne    c0003f1f <f_read+0x117>
c0003f1a:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0003f1d:	eb 0a                	jmp    c0003f29 <f_read+0x121>
c0003f1f:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003f22:	8b 03                	mov    eax,DWORD PTR [ebx]
c0003f24:	e8 08 f2 ff ff       	call   c0003131 <get_fat.isra.2>
c0003f29:	83 f8 01             	cmp    eax,0x1
c0003f2c:	77 0e                	ja     c0003f3c <f_read+0x134>
c0003f2e:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c0003f32:	bd 02 00 00 00       	mov    ebp,0x2
c0003f37:	e9 c1 00 00 00       	jmp    c0003ffd <f_read+0x1f5>
c0003f3c:	83 f8 ff             	cmp    eax,0xffffffff
c0003f3f:	75 0e                	jne    c0003f4f <f_read+0x147>
c0003f41:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c0003f45:	bd 01 00 00 00       	mov    ebp,0x1
c0003f4a:	e9 ae 00 00 00       	jmp    c0003ffd <f_read+0x1f5>
c0003f4f:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0003f52:	e9 35 ff ff ff       	jmp    c0003e8c <f_read+0x84>
c0003f57:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003f5a:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c0003f5e:	39 f0                	cmp    eax,esi
c0003f60:	73 95                	jae    c0003ef7 <f_read+0xef>
c0003f62:	c1 e0 09             	shl    eax,0x9
c0003f65:	8d 53 28             	lea    edx,[ebx+0x28]
c0003f68:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c0003f6c:	b9 00 02 00 00       	mov    ecx,0x200
c0003f71:	e8 f5 dd ff ff       	call   c0001d6b <mem_cpy>
c0003f76:	e9 7c ff ff ff       	jmp    c0003ef7 <f_read+0xef>
c0003f7b:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003f7e:	3b 44 24 04          	cmp    eax,DWORD PTR [esp+0x4]
c0003f82:	74 42                	je     c0003fc6 <f_read+0x1be>
c0003f84:	8d 73 28             	lea    esi,[ebx+0x28]
c0003f87:	80 7b 10 00          	cmp    BYTE PTR [ebx+0x10],0x0
c0003f8b:	79 19                	jns    c0003fa6 <f_read+0x19e>
c0003f8d:	6a 01                	push   0x1
c0003f8f:	50                   	push   eax
c0003f90:	56                   	push   esi
c0003f91:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0003f95:	50                   	push   eax
c0003f96:	e8 6f dd ff ff       	call   c0001d0a <disk_write>
c0003f9b:	83 c4 10             	add    esp,0x10
c0003f9e:	85 c0                	test   eax,eax
c0003fa0:	75 9f                	jne    c0003f41 <f_read+0x139>
c0003fa2:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c0003fa6:	6a 01                	push   0x1
c0003fa8:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0003fac:	56                   	push   esi
c0003fad:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0003fb1:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0003fb5:	50                   	push   eax
c0003fb6:	e8 39 dd ff ff       	call   c0001cf4 <disk_read>
c0003fbb:	83 c4 10             	add    esp,0x10
c0003fbe:	85 c0                	test   eax,eax
c0003fc0:	0f 85 7b ff ff ff    	jne    c0003f41 <f_read+0x139>
c0003fc6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0003fca:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0003fcd:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0003fd0:	ba 00 02 00 00       	mov    edx,0x200
c0003fd5:	25 ff 01 00 00       	and    eax,0x1ff
c0003fda:	89 fe                	mov    esi,edi
c0003fdc:	29 c2                	sub    edx,eax
c0003fde:	39 d7                	cmp    edi,edx
c0003fe0:	76 02                	jbe    c0003fe4 <f_read+0x1dc>
c0003fe2:	89 d6                	mov    esi,edx
c0003fe4:	8d 54 03 28          	lea    edx,[ebx+eax*1+0x28]
c0003fe8:	89 f1                	mov    ecx,esi
c0003fea:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0003fee:	e8 78 dd ff ff       	call   c0001d6b <mem_cpy>
c0003ff3:	e9 02 ff ff ff       	jmp    c0003efa <f_read+0xf2>
c0003ff8:	bd 07 00 00 00       	mov    ebp,0x7
c0003ffd:	83 c4 2c             	add    esp,0x2c
c0004000:	89 e8                	mov    eax,ebp
c0004002:	5b                   	pop    ebx
c0004003:	5e                   	pop    esi
c0004004:	5f                   	pop    edi
c0004005:	5d                   	pop    ebp
c0004006:	c3                   	ret    

c0004007 <f_write>:
c0004007:	55                   	push   ebp
c0004008:	57                   	push   edi
c0004009:	56                   	push   esi
c000400a:	53                   	push   ebx
c000400b:	83 ec 2c             	sub    esp,0x2c
c000400e:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004012:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0004016:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000401c:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004020:	89 d8                	mov    eax,ebx
c0004022:	e8 94 e1 ff ff       	call   c00021bb <validate>
c0004027:	89 c5                	mov    ebp,eax
c0004029:	85 c0                	test   eax,eax
c000402b:	0f 85 00 02 00 00    	jne    c0004231 <f_write+0x22a>
c0004031:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0004035:	85 ed                	test   ebp,ebp
c0004037:	0f 85 f4 01 00 00    	jne    c0004231 <f_write+0x22a>
c000403d:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004041:	0f 84 e5 01 00 00    	je     c000422c <f_write+0x225>
c0004047:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000404a:	89 c7                	mov    edi,eax
c000404c:	03 7c 24 48          	add    edi,DWORD PTR [esp+0x48]
c0004050:	0f 83 ea 00 00 00    	jae    c0004140 <f_write+0x139>
c0004056:	f7 d0                	not    eax
c0004058:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000405c:	e9 df 00 00 00       	jmp    c0004140 <f_write+0x139>
c0004061:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0004064:	f7 c2 ff 01 00 00    	test   edx,0x1ff
c000406a:	0f 85 8b 01 00 00    	jne    c00041fb <f_write+0x1f4>
c0004070:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004074:	89 d1                	mov    ecx,edx
c0004076:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c000407a:	c1 e9 09             	shr    ecx,0x9
c000407d:	48                   	dec    eax
c000407e:	21 c8                	and    eax,ecx
c0004080:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004084:	0f 84 c3 00 00 00    	je     c000414d <f_write+0x146>
c000408a:	80 7b 10 00          	cmp    BYTE PTR [ebx+0x10],0x0
c000408e:	0f 88 18 01 00 00    	js     c00041ac <f_write+0x1a5>
c0004094:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004098:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000409b:	89 c8                	mov    eax,ecx
c000409d:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00040a1:	e8 df de ff ff       	call   c0001f85 <clst2sect>
c00040a6:	85 c0                	test   eax,eax
c00040a8:	0f 84 c8 00 00 00    	je     c0004176 <f_write+0x16f>
c00040ae:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00040b2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00040b6:	01 c7                	add    edi,eax
c00040b8:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c00040c0:	0f 86 0d 01 00 00    	jbe    c00041d3 <f_write+0x1cc>
c00040c6:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00040ca:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00040ce:	c1 ee 09             	shr    esi,0x9
c00040d1:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00040d5:	01 f2                	add    edx,esi
c00040d7:	39 c2                	cmp    edx,eax
c00040d9:	76 06                	jbe    c00040e1 <f_write+0xda>
c00040db:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c00040df:	89 c6                	mov    esi,eax
c00040e1:	56                   	push   esi
c00040e2:	57                   	push   edi
c00040e3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00040e7:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00040eb:	50                   	push   eax
c00040ec:	e8 19 dc ff ff       	call   c0001d0a <disk_write>
c00040f1:	83 c4 10             	add    esp,0x10
c00040f4:	85 c0                	test   eax,eax
c00040f6:	0f 85 8d 00 00 00    	jne    c0004189 <f_write+0x182>
c00040fc:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c00040ff:	29 fa                	sub    edx,edi
c0004101:	39 f2                	cmp    edx,esi
c0004103:	73 18                	jae    c000411d <f_write+0x116>
c0004105:	c1 e2 09             	shl    edx,0x9
c0004108:	8d 43 28             	lea    eax,[ebx+0x28]
c000410b:	03 54 24 44          	add    edx,DWORD PTR [esp+0x44]
c000410f:	b9 00 02 00 00       	mov    ecx,0x200
c0004114:	e8 52 dc ff ff       	call   c0001d6b <mem_cpy>
c0004119:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c000411d:	c1 e6 09             	shl    esi,0x9
c0004120:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c0004124:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004128:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c000412c:	01 30                	add    DWORD PTR [eax],esi
c000412e:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0004131:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004134:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0004137:	39 f0                	cmp    eax,esi
c0004139:	73 02                	jae    c000413d <f_write+0x136>
c000413b:	89 f0                	mov    eax,esi
c000413d:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004140:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0004145:	0f 85 16 ff ff ff    	jne    c0004061 <f_write+0x5a>
c000414b:	eb 1b                	jmp    c0004168 <f_write+0x161>
c000414d:	85 d2                	test   edx,edx
c000414f:	75 09                	jne    c000415a <f_write+0x153>
c0004151:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004154:	85 c0                	test   eax,eax
c0004156:	75 19                	jne    c0004171 <f_write+0x16a>
c0004158:	eb 03                	jmp    c000415d <f_write+0x156>
c000415a:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000415d:	89 d8                	mov    eax,ebx
c000415f:	e8 97 f1 ff ff       	call   c00032fb <create_chain>
c0004164:	85 c0                	test   eax,eax
c0004166:	75 09                	jne    c0004171 <f_write+0x16a>
c0004168:	80 4b 10 40          	or     BYTE PTR [ebx+0x10],0x40
c000416c:	e9 c0 00 00 00       	jmp    c0004231 <f_write+0x22a>
c0004171:	83 f8 01             	cmp    eax,0x1
c0004174:	75 0e                	jne    c0004184 <f_write+0x17d>
c0004176:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c000417a:	bd 02 00 00 00       	mov    ebp,0x2
c000417f:	e9 ad 00 00 00       	jmp    c0004231 <f_write+0x22a>
c0004184:	83 f8 ff             	cmp    eax,0xffffffff
c0004187:	75 0e                	jne    c0004197 <f_write+0x190>
c0004189:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c000418d:	bd 01 00 00 00       	mov    ebp,0x1
c0004192:	e9 9a 00 00 00       	jmp    c0004231 <f_write+0x22a>
c0004197:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000419a:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000419e:	0f 85 e6 fe ff ff    	jne    c000408a <f_write+0x83>
c00041a4:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00041a7:	e9 de fe ff ff       	jmp    c000408a <f_write+0x83>
c00041ac:	6a 01                	push   0x1
c00041ae:	8d 43 28             	lea    eax,[ebx+0x28]
c00041b1:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00041b4:	50                   	push   eax
c00041b5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00041b9:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00041bd:	50                   	push   eax
c00041be:	e8 47 db ff ff       	call   c0001d0a <disk_write>
c00041c3:	83 c4 10             	add    esp,0x10
c00041c6:	85 c0                	test   eax,eax
c00041c8:	75 bf                	jne    c0004189 <f_write+0x182>
c00041ca:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c00041ce:	e9 c1 fe ff ff       	jmp    c0004094 <f_write+0x8d>
c00041d3:	39 7b 1c             	cmp    DWORD PTR [ebx+0x1c],edi
c00041d6:	74 20                	je     c00041f8 <f_write+0x1f1>
c00041d8:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00041db:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c00041de:	76 18                	jbe    c00041f8 <f_write+0x1f1>
c00041e0:	6a 01                	push   0x1
c00041e2:	8d 43 28             	lea    eax,[ebx+0x28]
c00041e5:	57                   	push   edi
c00041e6:	50                   	push   eax
c00041e7:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00041eb:	50                   	push   eax
c00041ec:	e8 03 db ff ff       	call   c0001cf4 <disk_read>
c00041f1:	83 c4 10             	add    esp,0x10
c00041f4:	85 c0                	test   eax,eax
c00041f6:	75 91                	jne    c0004189 <f_write+0x182>
c00041f8:	89 7b 1c             	mov    DWORD PTR [ebx+0x1c],edi
c00041fb:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00041fe:	ba 00 02 00 00       	mov    edx,0x200
c0004203:	25 ff 01 00 00       	and    eax,0x1ff
c0004208:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c000420c:	29 c2                	sub    edx,eax
c000420e:	39 d6                	cmp    esi,edx
c0004210:	76 02                	jbe    c0004214 <f_write+0x20d>
c0004212:	89 d6                	mov    esi,edx
c0004214:	8d 44 03 28          	lea    eax,[ebx+eax*1+0x28]
c0004218:	89 f1                	mov    ecx,esi
c000421a:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000421e:	e8 48 db ff ff       	call   c0001d6b <mem_cpy>
c0004223:	80 4b 10 80          	or     BYTE PTR [ebx+0x10],0x80
c0004227:	e9 f4 fe ff ff       	jmp    c0004120 <f_write+0x119>
c000422c:	bd 07 00 00 00       	mov    ebp,0x7
c0004231:	83 c4 2c             	add    esp,0x2c
c0004234:	89 e8                	mov    eax,ebp
c0004236:	5b                   	pop    ebx
c0004237:	5e                   	pop    esi
c0004238:	5f                   	pop    edi
c0004239:	5d                   	pop    ebp
c000423a:	c3                   	ret    

c000423b <f_sync>:
c000423b:	56                   	push   esi
c000423c:	53                   	push   ebx
c000423d:	83 ec 14             	sub    esp,0x14
c0004240:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004244:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004248:	89 d8                	mov    eax,ebx
c000424a:	e8 6c df ff ff       	call   c00021bb <validate>
c000424f:	85 c0                	test   eax,eax
c0004251:	0f 85 93 00 00 00    	jne    c00042ea <f_sync+0xaf>
c0004257:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c000425a:	f6 c2 40             	test   dl,0x40
c000425d:	0f 84 87 00 00 00    	je     c00042ea <f_sync+0xaf>
c0004263:	84 d2                	test   dl,dl
c0004265:	79 29                	jns    c0004290 <f_sync+0x55>
c0004267:	6a 01                	push   0x1
c0004269:	8d 43 28             	lea    eax,[ebx+0x28]
c000426c:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000426f:	50                   	push   eax
c0004270:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004274:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004278:	50                   	push   eax
c0004279:	e8 8c da ff ff       	call   c0001d0a <disk_write>
c000427e:	83 c4 10             	add    esp,0x10
c0004281:	89 c2                	mov    edx,eax
c0004283:	b8 01 00 00 00       	mov    eax,0x1
c0004288:	85 d2                	test   edx,edx
c000428a:	75 5e                	jne    c00042ea <f_sync+0xaf>
c000428c:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c0004290:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0004293:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004297:	e8 c9 df ff ff       	call   c0002265 <move_window>
c000429c:	85 c0                	test   eax,eax
c000429e:	75 4a                	jne    c00042ea <f_sync+0xaf>
c00042a0:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c00042a3:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c00042a7:	89 f2                	mov    edx,esi
c00042a9:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00042ac:	8b 03                	mov    eax,DWORD PTR [ebx]
c00042ae:	e8 56 ee ff ff       	call   c0003109 <st_clust.isra.1>
c00042b3:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00042b6:	8d 46 1c             	lea    eax,[esi+0x1c]
c00042b9:	e8 aa da ff ff       	call   c0001d68 <st_dword>
c00042be:	8d 46 16             	lea    eax,[esi+0x16]
c00042c1:	ba 00 00 21 50       	mov    edx,0x50210000
c00042c6:	e8 9d da ff ff       	call   c0001d68 <st_dword>
c00042cb:	8d 46 12             	lea    eax,[esi+0x12]
c00042ce:	31 d2                	xor    edx,edx
c00042d0:	e8 8f da ff ff       	call   c0001d64 <st_word>
c00042d5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00042d9:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00042dd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00042e1:	e8 bf e9 ff ff       	call   c0002ca5 <sync_fs>
c00042e6:	80 63 10 bf          	and    BYTE PTR [ebx+0x10],0xbf
c00042ea:	83 c4 14             	add    esp,0x14
c00042ed:	5b                   	pop    ebx
c00042ee:	5e                   	pop    esi
c00042ef:	c3                   	ret    

c00042f0 <f_close>:
c00042f0:	53                   	push   ebx
c00042f1:	83 ec 24             	sub    esp,0x24
c00042f4:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00042f8:	53                   	push   ebx
c00042f9:	e8 3d ff ff ff       	call   c000423b <f_sync>
c00042fe:	83 c4 10             	add    esp,0x10
c0004301:	85 c0                	test   eax,eax
c0004303:	75 15                	jne    c000431a <f_close+0x2a>
c0004305:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004309:	89 d8                	mov    eax,ebx
c000430b:	e8 ab de ff ff       	call   c00021bb <validate>
c0004310:	85 c0                	test   eax,eax
c0004312:	75 06                	jne    c000431a <f_close+0x2a>
c0004314:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000431a:	83 c4 18             	add    esp,0x18
c000431d:	5b                   	pop    ebx
c000431e:	c3                   	ret    

c000431f <f_lseek>:
c000431f:	55                   	push   ebp
c0004320:	57                   	push   edi
c0004321:	56                   	push   esi
c0004322:	53                   	push   ebx
c0004323:	83 ec 2c             	sub    esp,0x2c
c0004326:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000432a:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c000432e:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004332:	89 d8                	mov    eax,ebx
c0004334:	e8 82 de ff ff       	call   c00021bb <validate>
c0004339:	89 c5                	mov    ebp,eax
c000433b:	85 c0                	test   eax,eax
c000433d:	0f 85 79 01 00 00    	jne    c00044bc <f_lseek+0x19d>
c0004343:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0004347:	85 ed                	test   ebp,ebp
c0004349:	0f 85 6d 01 00 00    	jne    c00044bc <f_lseek+0x19d>
c000434f:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004352:	39 f0                	cmp    eax,esi
c0004354:	73 08                	jae    c000435e <f_lseek+0x3f>
c0004356:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c000435a:	75 02                	jne    c000435e <f_lseek+0x3f>
c000435c:	89 c6                	mov    esi,eax
c000435e:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0004361:	85 f6                	test   esi,esi
c0004363:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000436a:	75 07                	jne    c0004373 <f_lseek+0x54>
c000436c:	31 f6                	xor    esi,esi
c000436e:	e9 e2 00 00 00       	jmp    c0004455 <f_lseek+0x136>
c0004373:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004377:	0f b7 78 0a          	movzx  edi,WORD PTR [eax+0xa]
c000437b:	c1 e7 09             	shl    edi,0x9
c000437e:	85 c9                	test   ecx,ecx
c0004380:	74 28                	je     c00043aa <f_lseek+0x8b>
c0004382:	49                   	dec    ecx
c0004383:	31 d2                	xor    edx,edx
c0004385:	8d 46 ff             	lea    eax,[esi-0x1]
c0004388:	f7 f7                	div    edi
c000438a:	31 d2                	xor    edx,edx
c000438c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004390:	89 c8                	mov    eax,ecx
c0004392:	f7 f7                	div    edi
c0004394:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0004398:	72 10                	jb     c00043aa <f_lseek+0x8b>
c000439a:	89 f8                	mov    eax,edi
c000439c:	f7 d8                	neg    eax
c000439e:	21 c1                	and    ecx,eax
c00043a0:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00043a3:	89 4b 14             	mov    DWORD PTR [ebx+0x14],ecx
c00043a6:	29 ce                	sub    esi,ecx
c00043a8:	eb 3c                	jmp    c00043e6 <f_lseek+0xc7>
c00043aa:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00043ad:	85 c0                	test   eax,eax
c00043af:	75 32                	jne    c00043e3 <f_lseek+0xc4>
c00043b1:	31 d2                	xor    edx,edx
c00043b3:	89 d8                	mov    eax,ebx
c00043b5:	e8 41 ef ff ff       	call   c00032fb <create_chain>
c00043ba:	83 f8 01             	cmp    eax,0x1
c00043bd:	75 0e                	jne    c00043cd <f_lseek+0xae>
c00043bf:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c00043c3:	bd 02 00 00 00       	mov    ebp,0x2
c00043c8:	e9 ef 00 00 00       	jmp    c00044bc <f_lseek+0x19d>
c00043cd:	83 f8 ff             	cmp    eax,0xffffffff
c00043d0:	75 0e                	jne    c00043e0 <f_lseek+0xc1>
c00043d2:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c00043d6:	bd 01 00 00 00       	mov    ebp,0x1
c00043db:	e9 dc 00 00 00       	jmp    c00044bc <f_lseek+0x19d>
c00043e0:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00043e3:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00043e6:	85 c0                	test   eax,eax
c00043e8:	74 82                	je     c000436c <f_lseek+0x4d>
c00043ea:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00043ed:	39 fe                	cmp    esi,edi
c00043ef:	76 3d                	jbe    c000442e <f_lseek+0x10f>
c00043f1:	01 fa                	add    edx,edi
c00043f3:	29 fe                	sub    esi,edi
c00043f5:	89 53 14             	mov    DWORD PTR [ebx+0x14],edx
c00043f8:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c00043fc:	89 c2                	mov    edx,eax
c00043fe:	74 0d                	je     c000440d <f_lseek+0xee>
c0004400:	89 d8                	mov    eax,ebx
c0004402:	e8 f4 ee ff ff       	call   c00032fb <create_chain>
c0004407:	85 c0                	test   eax,eax
c0004409:	75 09                	jne    c0004414 <f_lseek+0xf5>
c000440b:	eb 1f                	jmp    c000442c <f_lseek+0x10d>
c000440d:	8b 03                	mov    eax,DWORD PTR [ebx]
c000440f:	e8 1d ed ff ff       	call   c0003131 <get_fat.isra.2>
c0004414:	83 f8 ff             	cmp    eax,0xffffffff
c0004417:	74 b9                	je     c00043d2 <f_lseek+0xb3>
c0004419:	83 f8 01             	cmp    eax,0x1
c000441c:	76 a1                	jbe    c00043bf <f_lseek+0xa0>
c000441e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004422:	39 42 18             	cmp    DWORD PTR [edx+0x18],eax
c0004425:	76 98                	jbe    c00043bf <f_lseek+0xa0>
c0004427:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000442a:	eb be                	jmp    c00043ea <f_lseek+0xcb>
c000442c:	31 f6                	xor    esi,esi
c000442e:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c0004431:	f7 c6 ff 01 00 00    	test   esi,0x1ff
c0004437:	0f 84 2f ff ff ff    	je     c000436c <f_lseek+0x4d>
c000443d:	89 c2                	mov    edx,eax
c000443f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004443:	e8 3d db ff ff       	call   c0001f85 <clst2sect>
c0004448:	85 c0                	test   eax,eax
c000444a:	0f 84 6f ff ff ff    	je     c00043bf <f_lseek+0xa0>
c0004450:	c1 ee 09             	shr    esi,0x9
c0004453:	01 c6                	add    esi,eax
c0004455:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004458:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c000445b:	76 07                	jbe    c0004464 <f_lseek+0x145>
c000445d:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004460:	80 4b 10 40          	or     BYTE PTR [ebx+0x10],0x40
c0004464:	a9 ff 01 00 00       	test   eax,0x1ff
c0004469:	74 51                	je     c00044bc <f_lseek+0x19d>
c000446b:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000446e:	39 f0                	cmp    eax,esi
c0004470:	74 4a                	je     c00044bc <f_lseek+0x19d>
c0004472:	8d 7b 28             	lea    edi,[ebx+0x28]
c0004475:	80 7b 10 00          	cmp    BYTE PTR [ebx+0x10],0x0
c0004479:	79 21                	jns    c000449c <f_lseek+0x17d>
c000447b:	6a 01                	push   0x1
c000447d:	50                   	push   eax
c000447e:	57                   	push   edi
c000447f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004483:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004487:	50                   	push   eax
c0004488:	e8 7d d8 ff ff       	call   c0001d0a <disk_write>
c000448d:	83 c4 10             	add    esp,0x10
c0004490:	85 c0                	test   eax,eax
c0004492:	0f 85 3a ff ff ff    	jne    c00043d2 <f_lseek+0xb3>
c0004498:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c000449c:	6a 01                	push   0x1
c000449e:	56                   	push   esi
c000449f:	57                   	push   edi
c00044a0:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00044a4:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00044a8:	50                   	push   eax
c00044a9:	e8 46 d8 ff ff       	call   c0001cf4 <disk_read>
c00044ae:	83 c4 10             	add    esp,0x10
c00044b1:	85 c0                	test   eax,eax
c00044b3:	0f 85 19 ff ff ff    	jne    c00043d2 <f_lseek+0xb3>
c00044b9:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c00044bc:	83 c4 2c             	add    esp,0x2c
c00044bf:	89 e8                	mov    eax,ebp
c00044c1:	5b                   	pop    ebx
c00044c2:	5e                   	pop    esi
c00044c3:	5f                   	pop    edi
c00044c4:	5d                   	pop    ebp
c00044c5:	c3                   	ret    

c00044c6 <f_opendir>:
c00044c6:	56                   	push   esi
c00044c7:	b8 09 00 00 00       	mov    eax,0x9
c00044cc:	53                   	push   ebx
c00044cd:	83 ec 24             	sub    esp,0x24
c00044d0:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00044d4:	85 db                	test   ebx,ebx
c00044d6:	0f 84 af 00 00 00    	je     c000458b <f_opendir+0xc5>
c00044dc:	31 c9                	xor    ecx,ecx
c00044de:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00044e2:	8d 44 24 34          	lea    eax,[esp+0x34]
c00044e6:	e8 cd de ff ff       	call   c00023b8 <mount_volume>
c00044eb:	85 c0                	test   eax,eax
c00044ed:	0f 85 92 00 00 00    	jne    c0004585 <f_opendir+0xbf>
c00044f3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00044f7:	83 ec 0c             	sub    esp,0xc
c00044fa:	89 03                	mov    DWORD PTR [ebx],eax
c00044fc:	68 00 02 00 00       	push   0x200
c0004501:	e8 86 15 00 00       	call   c0005a8c <ff_memalloc>
c0004506:	83 c4 10             	add    esp,0x10
c0004509:	89 c6                	mov    esi,eax
c000450b:	b8 11 00 00 00       	mov    eax,0x11
c0004510:	85 f6                	test   esi,esi
c0004512:	74 77                	je     c000458b <f_opendir+0xc5>
c0004514:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004518:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000451c:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c000451f:	89 d8                	mov    eax,ebx
c0004521:	e8 9c f3 ff ff       	call   c00038c2 <follow_path>
c0004526:	85 c0                	test   eax,eax
c0004528:	75 37                	jne    c0004561 <f_opendir+0x9b>
c000452a:	80 7b 2b 00          	cmp    BYTE PTR [ebx+0x2b],0x0
c000452e:	78 1c                	js     c000454c <f_opendir+0x86>
c0004530:	b8 05 00 00 00       	mov    eax,0x5
c0004535:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004539:	74 26                	je     c0004561 <f_opendir+0x9b>
c000453b:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000453e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004542:	8a 00                	mov    al,BYTE PTR [eax]
c0004544:	e8 97 eb ff ff       	call   c00030e0 <ld_clust.isra.0>
c0004549:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000454c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004550:	31 d2                	xor    edx,edx
c0004552:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0004556:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c000455a:	89 d8                	mov    eax,ebx
c000455c:	e8 d2 ec ff ff       	call   c0003233 <dir_sdi>
c0004561:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004565:	83 ec 0c             	sub    esp,0xc
c0004568:	56                   	push   esi
c0004569:	e8 36 15 00 00       	call   c0005aa4 <ff_memfree>
c000456e:	83 c4 10             	add    esp,0x10
c0004571:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004575:	83 f8 04             	cmp    eax,0x4
c0004578:	74 06                	je     c0004580 <f_opendir+0xba>
c000457a:	85 c0                	test   eax,eax
c000457c:	74 0d                	je     c000458b <f_opendir+0xc5>
c000457e:	eb 05                	jmp    c0004585 <f_opendir+0xbf>
c0004580:	b8 05 00 00 00       	mov    eax,0x5
c0004585:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000458b:	83 c4 24             	add    esp,0x24
c000458e:	5b                   	pop    ebx
c000458f:	5e                   	pop    esi
c0004590:	c3                   	ret    

c0004591 <f_closedir>:
c0004591:	53                   	push   ebx
c0004592:	83 ec 18             	sub    esp,0x18
c0004595:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004599:	8d 54 24 0c          	lea    edx,[esp+0xc]
c000459d:	89 d8                	mov    eax,ebx
c000459f:	e8 17 dc ff ff       	call   c00021bb <validate>
c00045a4:	85 c0                	test   eax,eax
c00045a6:	75 06                	jne    c00045ae <f_closedir+0x1d>
c00045a8:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00045ae:	83 c4 18             	add    esp,0x18
c00045b1:	5b                   	pop    ebx
c00045b2:	c3                   	ret    

c00045b3 <f_readdir>:
c00045b3:	57                   	push   edi
c00045b4:	56                   	push   esi
c00045b5:	53                   	push   ebx
c00045b6:	83 ec 20             	sub    esp,0x20
c00045b9:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00045bd:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00045c1:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00045c5:	89 d8                	mov    eax,ebx
c00045c7:	e8 ef db ff ff       	call   c00021bb <validate>
c00045cc:	85 c0                	test   eax,eax
c00045ce:	75 6e                	jne    c000463e <f_readdir+0x8b>
c00045d0:	85 ff                	test   edi,edi
c00045d2:	75 0b                	jne    c00045df <f_readdir+0x2c>
c00045d4:	31 d2                	xor    edx,edx
c00045d6:	89 d8                	mov    eax,ebx
c00045d8:	e8 56 ec ff ff       	call   c0003233 <dir_sdi>
c00045dd:	eb 5f                	jmp    c000463e <f_readdir+0x8b>
c00045df:	83 ec 0c             	sub    esp,0xc
c00045e2:	68 00 02 00 00       	push   0x200
c00045e7:	e8 a0 14 00 00       	call   c0005a8c <ff_memalloc>
c00045ec:	83 c4 10             	add    esp,0x10
c00045ef:	89 c6                	mov    esi,eax
c00045f1:	b8 11 00 00 00       	mov    eax,0x11
c00045f6:	85 f6                	test   esi,esi
c00045f8:	74 44                	je     c000463e <f_readdir+0x8b>
c00045fa:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00045fe:	31 d2                	xor    edx,edx
c0004600:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004603:	89 d8                	mov    eax,ebx
c0004605:	e8 1a f0 ff ff       	call   c0003624 <dir_read>
c000460a:	a9 fb ff ff ff       	test   eax,0xfffffffb
c000460f:	75 19                	jne    c000462a <f_readdir+0x77>
c0004611:	89 fa                	mov    edx,edi
c0004613:	89 d8                	mov    eax,ebx
c0004615:	e8 e2 e8 ff ff       	call   c0002efc <get_fileinfo>
c000461a:	31 d2                	xor    edx,edx
c000461c:	89 d8                	mov    eax,ebx
c000461e:	e8 9b ee ff ff       	call   c00034be <dir_next>
c0004623:	83 f8 04             	cmp    eax,0x4
c0004626:	75 02                	jne    c000462a <f_readdir+0x77>
c0004628:	31 c0                	xor    eax,eax
c000462a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000462e:	83 ec 0c             	sub    esp,0xc
c0004631:	56                   	push   esi
c0004632:	e8 6d 14 00 00       	call   c0005aa4 <ff_memfree>
c0004637:	83 c4 10             	add    esp,0x10
c000463a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000463e:	83 c4 20             	add    esp,0x20
c0004641:	5b                   	pop    ebx
c0004642:	5e                   	pop    esi
c0004643:	5f                   	pop    edi
c0004644:	c3                   	ret    

c0004645 <f_stat>:
c0004645:	57                   	push   edi
c0004646:	31 c9                	xor    ecx,ecx
c0004648:	56                   	push   esi
c0004649:	53                   	push   ebx
c000464a:	83 ec 30             	sub    esp,0x30
c000464d:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0004651:	89 e2                	mov    edx,esp
c0004653:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004657:	e8 5c dd ff ff       	call   c00023b8 <mount_volume>
c000465c:	89 c3                	mov    ebx,eax
c000465e:	85 c0                	test   eax,eax
c0004660:	75 59                	jne    c00046bb <f_stat+0x76>
c0004662:	83 ec 0c             	sub    esp,0xc
c0004665:	bb 11 00 00 00       	mov    ebx,0x11
c000466a:	68 00 02 00 00       	push   0x200
c000466f:	e8 18 14 00 00       	call   c0005a8c <ff_memalloc>
c0004674:	83 c4 10             	add    esp,0x10
c0004677:	89 c6                	mov    esi,eax
c0004679:	85 c0                	test   eax,eax
c000467b:	74 3e                	je     c00046bb <f_stat+0x76>
c000467d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004680:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0004684:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004687:	89 e0                	mov    eax,esp
c0004689:	e8 34 f2 ff ff       	call   c00038c2 <follow_path>
c000468e:	89 c3                	mov    ebx,eax
c0004690:	85 c0                	test   eax,eax
c0004692:	75 1b                	jne    c00046af <f_stat+0x6a>
c0004694:	80 7c 24 2b 00       	cmp    BYTE PTR [esp+0x2b],0x0
c0004699:	78 0f                	js     c00046aa <f_stat+0x65>
c000469b:	85 ff                	test   edi,edi
c000469d:	74 10                	je     c00046af <f_stat+0x6a>
c000469f:	89 fa                	mov    edx,edi
c00046a1:	89 e0                	mov    eax,esp
c00046a3:	e8 54 e8 ff ff       	call   c0002efc <get_fileinfo>
c00046a8:	eb 05                	jmp    c00046af <f_stat+0x6a>
c00046aa:	bb 06 00 00 00       	mov    ebx,0x6
c00046af:	83 ec 0c             	sub    esp,0xc
c00046b2:	56                   	push   esi
c00046b3:	e8 ec 13 00 00       	call   c0005aa4 <ff_memfree>
c00046b8:	83 c4 10             	add    esp,0x10
c00046bb:	83 c4 30             	add    esp,0x30
c00046be:	89 d8                	mov    eax,ebx
c00046c0:	5b                   	pop    ebx
c00046c1:	5e                   	pop    esi
c00046c2:	5f                   	pop    edi
c00046c3:	c3                   	ret    

c00046c4 <f_getfree>:
c00046c4:	55                   	push   ebp
c00046c5:	31 c9                	xor    ecx,ecx
c00046c7:	57                   	push   edi
c00046c8:	56                   	push   esi
c00046c9:	53                   	push   ebx
c00046ca:	83 ec 2c             	sub    esp,0x2c
c00046cd:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00046d1:	8d 44 24 40          	lea    eax,[esp+0x40]
c00046d5:	e8 de dc ff ff       	call   c00023b8 <mount_volume>
c00046da:	89 c7                	mov    edi,eax
c00046dc:	85 c0                	test   eax,eax
c00046de:	0f 85 d8 00 00 00    	jne    c00047bc <f_getfree+0xf8>
c00046e4:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00046e8:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00046ec:	89 30                	mov    DWORD PTR [eax],esi
c00046ee:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00046f1:	8b 6e 18             	mov    ebp,DWORD PTR [esi+0x18]
c00046f4:	8d 55 fe             	lea    edx,[ebp-0x2]
c00046f7:	39 d0                	cmp    eax,edx
c00046f9:	77 0b                	ja     c0004706 <f_getfree+0x42>
c00046fb:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c00046ff:	89 01                	mov    DWORD PTR [ecx],eax
c0004701:	e9 b6 00 00 00       	jmp    c00047bc <f_getfree+0xf8>
c0004706:	80 3e 01             	cmp    BYTE PTR [esi],0x1
c0004709:	75 29                	jne    c0004734 <f_getfree+0x70>
c000470b:	bd 02 00 00 00       	mov    ebp,0x2
c0004710:	31 db                	xor    ebx,ebx
c0004712:	89 ea                	mov    edx,ebp
c0004714:	89 f0                	mov    eax,esi
c0004716:	e8 16 ea ff ff       	call   c0003131 <get_fat.isra.2>
c000471b:	83 f8 ff             	cmp    eax,0xffffffff
c000471e:	74 7b                	je     c000479b <f_getfree+0xd7>
c0004720:	83 f8 01             	cmp    eax,0x1
c0004723:	74 7d                	je     c00047a2 <f_getfree+0xde>
c0004725:	83 d3 00             	adc    ebx,0x0
c0004728:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000472c:	45                   	inc    ebp
c000472d:	39 68 18             	cmp    DWORD PTR [eax+0x18],ebp
c0004730:	77 e0                	ja     c0004712 <f_getfree+0x4e>
c0004732:	eb 77                	jmp    c00047ab <f_getfree+0xe7>
c0004734:	8b 56 24             	mov    edx,DWORD PTR [esi+0x24]
c0004737:	31 db                	xor    ebx,ebx
c0004739:	31 f6                	xor    esi,esi
c000473b:	85 f6                	test   esi,esi
c000473d:	75 18                	jne    c0004757 <f_getfree+0x93>
c000473f:	8d 42 01             	lea    eax,[edx+0x1]
c0004742:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004746:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000474a:	e8 16 db ff ff       	call   c0002265 <move_window>
c000474f:	85 c0                	test   eax,eax
c0004751:	75 56                	jne    c00047a9 <f_getfree+0xe5>
c0004753:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004757:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000475b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000475f:	8d 44 31 34          	lea    eax,[ecx+esi*1+0x34]
c0004763:	80 39 02             	cmp    BYTE PTR [ecx],0x2
c0004766:	75 11                	jne    c0004779 <f_getfree+0xb5>
c0004768:	e8 d2 d5 ff ff       	call   c0001d3f <ld_word>
c000476d:	66 83 f8 01          	cmp    ax,0x1
c0004771:	83 d3 00             	adc    ebx,0x0
c0004774:	83 c6 02             	add    esi,0x2
c0004777:	eb 13                	jmp    c000478c <f_getfree+0xc8>
c0004779:	e8 ce d5 ff ff       	call   c0001d4c <ld_dword>
c000477e:	25 ff ff ff 0f       	and    eax,0xfffffff
c0004783:	83 f8 01             	cmp    eax,0x1
c0004786:	83 d3 00             	adc    ebx,0x0
c0004789:	83 c6 04             	add    esi,0x4
c000478c:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0004792:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004796:	4d                   	dec    ebp
c0004797:	75 a2                	jne    c000473b <f_getfree+0x77>
c0004799:	eb 10                	jmp    c00047ab <f_getfree+0xe7>
c000479b:	bf 01 00 00 00       	mov    edi,0x1
c00047a0:	eb 09                	jmp    c00047ab <f_getfree+0xe7>
c00047a2:	bf 02 00 00 00       	mov    edi,0x2
c00047a7:	eb 02                	jmp    c00047ab <f_getfree+0xe7>
c00047a9:	89 c7                	mov    edi,eax
c00047ab:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00047af:	89 18                	mov    DWORD PTR [eax],ebx
c00047b1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00047b5:	89 58 14             	mov    DWORD PTR [eax+0x14],ebx
c00047b8:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c00047bc:	83 c4 2c             	add    esp,0x2c
c00047bf:	89 f8                	mov    eax,edi
c00047c1:	5b                   	pop    ebx
c00047c2:	5e                   	pop    esi
c00047c3:	5f                   	pop    edi
c00047c4:	5d                   	pop    ebp
c00047c5:	c3                   	ret    

c00047c6 <f_truncate>:
c00047c6:	56                   	push   esi
c00047c7:	53                   	push   ebx
c00047c8:	83 ec 14             	sub    esp,0x14
c00047cb:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00047cf:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00047d3:	89 d8                	mov    eax,ebx
c00047d5:	e8 e1 d9 ff ff       	call   c00021bb <validate>
c00047da:	89 c6                	mov    esi,eax
c00047dc:	85 c0                	test   eax,eax
c00047de:	0f 85 be 00 00 00    	jne    c00048a2 <f_truncate+0xdc>
c00047e4:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c00047e8:	85 f6                	test   esi,esi
c00047ea:	0f 85 b2 00 00 00    	jne    c00048a2 <f_truncate+0xdc>
c00047f0:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c00047f4:	0f 84 a3 00 00 00    	je     c000489d <f_truncate+0xd7>
c00047fa:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00047fd:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c0004800:	0f 83 9c 00 00 00    	jae    c00048a2 <f_truncate+0xdc>
c0004806:	85 c0                	test   eax,eax
c0004808:	75 15                	jne    c000481f <f_truncate+0x59>
c000480a:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000480d:	31 c9                	xor    ecx,ecx
c000480f:	89 d8                	mov    eax,ebx
c0004811:	e8 1f ec ff ff       	call   c0003435 <remove_chain>
c0004816:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000481d:	eb 35                	jmp    c0004854 <f_truncate+0x8e>
c000481f:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004822:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004824:	e8 08 e9 ff ff       	call   c0003131 <get_fat.isra.2>
c0004829:	89 c2                	mov    edx,eax
c000482b:	b8 01 00 00 00       	mov    eax,0x1
c0004830:	83 fa ff             	cmp    edx,0xffffffff
c0004833:	74 1f                	je     c0004854 <f_truncate+0x8e>
c0004835:	b8 02 00 00 00       	mov    eax,0x2
c000483a:	83 fa 01             	cmp    edx,0x1
c000483d:	74 15                	je     c0004854 <f_truncate+0x8e>
c000483f:	31 c0                	xor    eax,eax
c0004841:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004845:	39 51 18             	cmp    DWORD PTR [ecx+0x18],edx
c0004848:	76 0a                	jbe    c0004854 <f_truncate+0x8e>
c000484a:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000484d:	89 d8                	mov    eax,ebx
c000484f:	e8 e1 eb ff ff       	call   c0003435 <remove_chain>
c0004854:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0004857:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000485a:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c000485d:	83 ca 40             	or     edx,0x40
c0004860:	85 c0                	test   eax,eax
c0004862:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c0004865:	75 2f                	jne    c0004896 <f_truncate+0xd0>
c0004867:	84 d2                	test   dl,dl
c0004869:	79 37                	jns    c00048a2 <f_truncate+0xdc>
c000486b:	6a 01                	push   0x1
c000486d:	8d 43 28             	lea    eax,[ebx+0x28]
c0004870:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0004873:	50                   	push   eax
c0004874:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004878:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000487c:	50                   	push   eax
c000487d:	e8 88 d4 ff ff       	call   c0001d0a <disk_write>
c0004882:	83 c4 10             	add    esp,0x10
c0004885:	85 c0                	test   eax,eax
c0004887:	75 08                	jne    c0004891 <f_truncate+0xcb>
c0004889:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c000488d:	31 f6                	xor    esi,esi
c000488f:	eb 11                	jmp    c00048a2 <f_truncate+0xdc>
c0004891:	b8 01 00 00 00       	mov    eax,0x1
c0004896:	88 43 11             	mov    BYTE PTR [ebx+0x11],al
c0004899:	89 c6                	mov    esi,eax
c000489b:	eb 05                	jmp    c00048a2 <f_truncate+0xdc>
c000489d:	be 07 00 00 00       	mov    esi,0x7
c00048a2:	89 f0                	mov    eax,esi
c00048a4:	83 c4 14             	add    esp,0x14
c00048a7:	5b                   	pop    ebx
c00048a8:	5e                   	pop    esi
c00048a9:	c3                   	ret    

c00048aa <f_unlink>:
c00048aa:	55                   	push   ebp
c00048ab:	b9 02 00 00 00       	mov    ecx,0x2
c00048b0:	57                   	push   edi
c00048b1:	56                   	push   esi
c00048b2:	53                   	push   ebx
c00048b3:	81 ec 8c 00 00 00    	sub    esp,0x8c
c00048b9:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00048bd:	8d 84 24 a0 00 00 00 	lea    eax,[esp+0xa0]
c00048c4:	e8 ef da ff ff       	call   c00023b8 <mount_volume>
c00048c9:	85 c0                	test   eax,eax
c00048cb:	0f 85 f0 00 00 00    	jne    c00049c1 <f_unlink+0x117>
c00048d1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00048d5:	83 ec 0c             	sub    esp,0xc
c00048d8:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00048dc:	68 00 02 00 00       	push   0x200
c00048e1:	e8 a6 11 00 00       	call   c0005a8c <ff_memalloc>
c00048e6:	83 c4 10             	add    esp,0x10
c00048e9:	89 c3                	mov    ebx,eax
c00048eb:	b8 11 00 00 00       	mov    eax,0x11
c00048f0:	85 db                	test   ebx,ebx
c00048f2:	0f 84 c9 00 00 00    	je     c00049c1 <f_unlink+0x117>
c00048f8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00048fc:	8b 94 24 a0 00 00 00 	mov    edx,DWORD PTR [esp+0xa0]
c0004903:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0004906:	8d 44 24 20          	lea    eax,[esp+0x20]
c000490a:	e8 b3 ef ff ff       	call   c00038c2 <follow_path>
c000490f:	85 c0                	test   eax,eax
c0004911:	0f 85 96 00 00 00    	jne    c00049ad <f_unlink+0x103>
c0004917:	b8 06 00 00 00       	mov    eax,0x6
c000491c:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c0004921:	0f 88 86 00 00 00    	js     c00049ad <f_unlink+0x103>
c0004927:	0f b6 6c 24 26       	movzx  ebp,BYTE PTR [esp+0x26]
c000492c:	f7 c5 01 00 00 00    	test   ebp,0x1
c0004932:	74 07                	je     c000493b <f_unlink+0x91>
c0004934:	b8 07 00 00 00       	mov    eax,0x7
c0004939:	eb 72                	jmp    c00049ad <f_unlink+0x103>
c000493b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000493f:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004943:	8a 07                	mov    al,BYTE PTR [edi]
c0004945:	e8 96 e7 ff ff       	call   c00030e0 <ld_clust.isra.0>
c000494a:	83 e5 10             	and    ebp,0x10
c000494d:	89 c6                	mov    esi,eax
c000494f:	75 0f                	jne    c0004960 <f_unlink+0xb6>
c0004951:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004955:	e8 e7 ed ff ff       	call   c0003741 <dir_remove>
c000495a:	85 c0                	test   eax,eax
c000495c:	74 2f                	je     c000498d <f_unlink+0xe3>
c000495e:	eb 4d                	jmp    c00049ad <f_unlink+0x103>
c0004960:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0004964:	31 d2                	xor    edx,edx
c0004966:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c000496a:	8d 44 24 50          	lea    eax,[esp+0x50]
c000496e:	e8 c0 e8 ff ff       	call   c0003233 <dir_sdi>
c0004973:	85 c0                	test   eax,eax
c0004975:	75 36                	jne    c00049ad <f_unlink+0x103>
c0004977:	31 d2                	xor    edx,edx
c0004979:	8d 44 24 50          	lea    eax,[esp+0x50]
c000497d:	e8 a2 ec ff ff       	call   c0003624 <dir_read>
c0004982:	85 c0                	test   eax,eax
c0004984:	74 ae                	je     c0004934 <f_unlink+0x8a>
c0004986:	83 f8 04             	cmp    eax,0x4
c0004989:	75 22                	jne    c00049ad <f_unlink+0x103>
c000498b:	eb c4                	jmp    c0004951 <f_unlink+0xa7>
c000498d:	85 f6                	test   esi,esi
c000498f:	75 0b                	jne    c000499c <f_unlink+0xf2>
c0004991:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004995:	e8 0b e3 ff ff       	call   c0002ca5 <sync_fs>
c000499a:	eb 11                	jmp    c00049ad <f_unlink+0x103>
c000499c:	31 c9                	xor    ecx,ecx
c000499e:	89 f2                	mov    edx,esi
c00049a0:	8d 44 24 20          	lea    eax,[esp+0x20]
c00049a4:	e8 8c ea ff ff       	call   c0003435 <remove_chain>
c00049a9:	85 c0                	test   eax,eax
c00049ab:	74 e4                	je     c0004991 <f_unlink+0xe7>
c00049ad:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00049b1:	83 ec 0c             	sub    esp,0xc
c00049b4:	53                   	push   ebx
c00049b5:	e8 ea 10 00 00       	call   c0005aa4 <ff_memfree>
c00049ba:	83 c4 10             	add    esp,0x10
c00049bd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00049c1:	81 c4 8c 00 00 00    	add    esp,0x8c
c00049c7:	5b                   	pop    ebx
c00049c8:	5e                   	pop    esi
c00049c9:	5f                   	pop    edi
c00049ca:	5d                   	pop    ebp
c00049cb:	c3                   	ret    

c00049cc <f_mkdir>:
c00049cc:	57                   	push   edi
c00049cd:	b9 02 00 00 00       	mov    ecx,0x2
c00049d2:	56                   	push   esi
c00049d3:	53                   	push   ebx
c00049d4:	83 ec 50             	sub    esp,0x50
c00049d7:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00049db:	8d 44 24 60          	lea    eax,[esp+0x60]
c00049df:	e8 d4 d9 ff ff       	call   c00023b8 <mount_volume>
c00049e4:	89 c3                	mov    ebx,eax
c00049e6:	85 c0                	test   eax,eax
c00049e8:	0f 85 70 01 00 00    	jne    c0004b5e <f_mkdir+0x192>
c00049ee:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00049f2:	bb 11 00 00 00       	mov    ebx,0x11
c00049f7:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00049fb:	83 ec 0c             	sub    esp,0xc
c00049fe:	68 00 02 00 00       	push   0x200
c0004a03:	e8 84 10 00 00       	call   c0005a8c <ff_memalloc>
c0004a08:	83 c4 10             	add    esp,0x10
c0004a0b:	89 c7                	mov    edi,eax
c0004a0d:	85 c0                	test   eax,eax
c0004a0f:	0f 84 49 01 00 00    	je     c0004b5e <f_mkdir+0x192>
c0004a15:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004a19:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004a1d:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c0004a20:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004a24:	e8 99 ee ff ff       	call   c00038c2 <follow_path>
c0004a29:	89 c3                	mov    ebx,eax
c0004a2b:	85 c0                	test   eax,eax
c0004a2d:	74 3e                	je     c0004a6d <f_mkdir+0xa1>
c0004a2f:	83 f8 04             	cmp    eax,0x4
c0004a32:	75 3e                	jne    c0004a72 <f_mkdir+0xa6>
c0004a34:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004a38:	31 d2                	xor    edx,edx
c0004a3a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004a3e:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004a42:	e8 b4 e8 ff ff       	call   c00032fb <create_chain>
c0004a47:	89 c6                	mov    esi,eax
c0004a49:	85 c0                	test   eax,eax
c0004a4b:	74 0c                	je     c0004a59 <f_mkdir+0x8d>
c0004a4d:	bb 02 00 00 00       	mov    ebx,0x2
c0004a52:	83 f8 01             	cmp    eax,0x1
c0004a55:	74 07                	je     c0004a5e <f_mkdir+0x92>
c0004a57:	eb 2a                	jmp    c0004a83 <f_mkdir+0xb7>
c0004a59:	bb 07 00 00 00       	mov    ebx,0x7
c0004a5e:	31 c9                	xor    ecx,ecx
c0004a60:	89 f2                	mov    edx,esi
c0004a62:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004a66:	e8 ca e9 ff ff       	call   c0003435 <remove_chain>
c0004a6b:	eb 05                	jmp    c0004a72 <f_mkdir+0xa6>
c0004a6d:	bb 08 00 00 00       	mov    ebx,0x8
c0004a72:	83 ec 0c             	sub    esp,0xc
c0004a75:	57                   	push   edi
c0004a76:	e8 29 10 00 00       	call   c0005aa4 <ff_memfree>
c0004a7b:	83 c4 10             	add    esp,0x10
c0004a7e:	e9 db 00 00 00       	jmp    c0004b5e <f_mkdir+0x192>
c0004a83:	bb 01 00 00 00       	mov    ebx,0x1
c0004a88:	83 f8 ff             	cmp    eax,0xffffffff
c0004a8b:	74 d1                	je     c0004a5e <f_mkdir+0x92>
c0004a8d:	89 f2                	mov    edx,esi
c0004a8f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004a93:	e8 73 dd ff ff       	call   c000280b <dir_clear>
c0004a98:	89 c3                	mov    ebx,eax
c0004a9a:	85 c0                	test   eax,eax
c0004a9c:	75 c0                	jne    c0004a5e <f_mkdir+0x92>
c0004a9e:	b9 0b 00 00 00       	mov    ecx,0xb
c0004aa3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004aa7:	ba 20 00 00 00       	mov    edx,0x20
c0004aac:	83 c0 34             	add    eax,0x34
c0004aaf:	e8 cc d2 ff ff       	call   c0001d80 <mem_set>
c0004ab4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004ab8:	ba 00 00 21 50       	mov    edx,0x50210000
c0004abd:	c6 40 34 2e          	mov    BYTE PTR [eax+0x34],0x2e
c0004ac1:	c6 40 3f 10          	mov    BYTE PTR [eax+0x3f],0x10
c0004ac5:	83 c0 4a             	add    eax,0x4a
c0004ac8:	e8 9b d2 ff ff       	call   c0001d68 <st_dword>
c0004acd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004ad1:	89 f1                	mov    ecx,esi
c0004ad3:	8d 50 34             	lea    edx,[eax+0x34]
c0004ad6:	e8 2e e6 ff ff       	call   c0003109 <st_clust.isra.1>
c0004adb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004adf:	b9 20 00 00 00       	mov    ecx,0x20
c0004ae4:	8d 50 34             	lea    edx,[eax+0x34]
c0004ae7:	83 c0 54             	add    eax,0x54
c0004aea:	e8 7c d2 ff ff       	call   c0001d6b <mem_cpy>
c0004aef:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004af3:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0004af7:	8d 50 54             	lea    edx,[eax+0x54]
c0004afa:	c6 40 55 2e          	mov    BYTE PTR [eax+0x55],0x2e
c0004afe:	e8 06 e6 ff ff       	call   c0003109 <st_clust.isra.1>
c0004b03:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b07:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004b0b:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004b0f:	e8 42 ee ff ff       	call   c0003956 <dir_register>
c0004b14:	89 c3                	mov    ebx,eax
c0004b16:	85 c0                	test   eax,eax
c0004b18:	0f 85 40 ff ff ff    	jne    c0004a5e <f_mkdir+0x92>
c0004b1e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004b22:	ba 00 00 21 50       	mov    edx,0x50210000
c0004b27:	83 c0 16             	add    eax,0x16
c0004b2a:	e8 39 d2 ff ff       	call   c0001d68 <st_dword>
c0004b2f:	89 f1                	mov    ecx,esi
c0004b31:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004b35:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b39:	e8 cb e5 ff ff       	call   c0003109 <st_clust.isra.1>
c0004b3e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004b42:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0004b46:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b4a:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004b4e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b52:	e8 4e e1 ff ff       	call   c0002ca5 <sync_fs>
c0004b57:	89 c3                	mov    ebx,eax
c0004b59:	e9 14 ff ff ff       	jmp    c0004a72 <f_mkdir+0xa6>
c0004b5e:	83 c4 50             	add    esp,0x50
c0004b61:	89 d8                	mov    eax,ebx
c0004b63:	5b                   	pop    ebx
c0004b64:	5e                   	pop    esi
c0004b65:	5f                   	pop    edi
c0004b66:	c3                   	ret    

c0004b67 <f_rename>:
c0004b67:	57                   	push   edi
c0004b68:	56                   	push   esi
c0004b69:	53                   	push   ebx
c0004b6a:	81 ec a0 00 00 00    	sub    esp,0xa0
c0004b70:	8d 84 24 b4 00 00 00 	lea    eax,[esp+0xb4]
c0004b77:	e8 f2 d5 ff ff       	call   c000216e <get_ldnumber>
c0004b7c:	b9 02 00 00 00       	mov    ecx,0x2
c0004b81:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004b85:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c0004b8c:	e8 27 d8 ff ff       	call   c00023b8 <mount_volume>
c0004b91:	85 c0                	test   eax,eax
c0004b93:	0f 85 7a 01 00 00    	jne    c0004d13 <f_rename+0x1ac>
c0004b99:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004b9d:	83 ec 0c             	sub    esp,0xc
c0004ba0:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0004ba4:	68 00 02 00 00       	push   0x200
c0004ba9:	e8 de 0e 00 00       	call   c0005a8c <ff_memalloc>
c0004bae:	83 c4 10             	add    esp,0x10
c0004bb1:	89 c6                	mov    esi,eax
c0004bb3:	b8 11 00 00 00       	mov    eax,0x11
c0004bb8:	85 f6                	test   esi,esi
c0004bba:	0f 84 53 01 00 00    	je     c0004d13 <f_rename+0x1ac>
c0004bc0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004bc4:	8b 94 24 b0 00 00 00 	mov    edx,DWORD PTR [esp+0xb0]
c0004bcb:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004bce:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004bd2:	e8 eb ec ff ff       	call   c00038c2 <follow_path>
c0004bd7:	85 c0                	test   eax,eax
c0004bd9:	0f 85 20 01 00 00    	jne    c0004cff <f_rename+0x198>
c0004bdf:	b8 06 00 00 00       	mov    eax,0x6
c0004be4:	f6 44 24 6b a0       	test   BYTE PTR [esp+0x6b],0xa0
c0004be9:	0f 85 10 01 00 00    	jne    c0004cff <f_rename+0x198>
c0004bef:	b9 20 00 00 00       	mov    ecx,0x20
c0004bf4:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004bf8:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004bfc:	e8 6a d1 ff ff       	call   c0001d6b <mem_cpy>
c0004c01:	b9 30 00 00 00       	mov    ecx,0x30
c0004c06:	8d 54 24 40          	lea    edx,[esp+0x40]
c0004c0a:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004c0e:	e8 58 d1 ff ff       	call   c0001d6b <mem_cpy>
c0004c13:	8b 94 24 b4 00 00 00 	mov    edx,DWORD PTR [esp+0xb4]
c0004c1a:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004c1e:	e8 9f ec ff ff       	call   c00038c2 <follow_path>
c0004c23:	85 c0                	test   eax,eax
c0004c25:	75 20                	jne    c0004c47 <f_rename+0xe0>
c0004c27:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0004c2b:	b8 08 00 00 00       	mov    eax,0x8
c0004c30:	39 7c 24 78          	cmp    DWORD PTR [esp+0x78],edi
c0004c34:	0f 85 c5 00 00 00    	jne    c0004cff <f_rename+0x198>
c0004c3a:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0004c3e:	39 8c 24 80 00 00 00 	cmp    DWORD PTR [esp+0x80],ecx
c0004c45:	eb 03                	jmp    c0004c4a <f_rename+0xe3>
c0004c47:	83 f8 04             	cmp    eax,0x4
c0004c4a:	0f 85 af 00 00 00    	jne    c0004cff <f_rename+0x198>
c0004c50:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004c54:	e8 fd ec ff ff       	call   c0003956 <dir_register>
c0004c59:	85 c0                	test   eax,eax
c0004c5b:	0f 85 9e 00 00 00    	jne    c0004cff <f_rename+0x198>
c0004c61:	8b 9c 24 8c 00 00 00 	mov    ebx,DWORD PTR [esp+0x8c]
c0004c68:	b9 13 00 00 00       	mov    ecx,0x13
c0004c6d:	8d 43 0d             	lea    eax,[ebx+0xd]
c0004c70:	8d 54 24 2d          	lea    edx,[esp+0x2d]
c0004c74:	e8 f2 d0 ff ff       	call   c0001d6b <mem_cpy>
c0004c79:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c0004c7d:	a8 10                	test   al,0x10
c0004c7f:	75 03                	jne    c0004c84 <f_rename+0x11d>
c0004c81:	83 c8 20             	or     eax,0x20
c0004c84:	88 43 0b             	mov    BYTE PTR [ebx+0xb],al
c0004c87:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004c8b:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004c8f:	f6 43 0b 10          	test   BYTE PTR [ebx+0xb],0x10
c0004c93:	74 54                	je     c0004ce9 <f_rename+0x182>
c0004c95:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0004c99:	39 44 24 48          	cmp    DWORD PTR [esp+0x48],eax
c0004c9d:	74 4a                	je     c0004ce9 <f_rename+0x182>
c0004c9f:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004ca3:	89 da                	mov    edx,ebx
c0004ca5:	8a 07                	mov    al,BYTE PTR [edi]
c0004ca7:	e8 34 e4 ff ff       	call   c00030e0 <ld_clust.isra.0>
c0004cac:	89 c2                	mov    edx,eax
c0004cae:	89 f8                	mov    eax,edi
c0004cb0:	e8 d0 d2 ff ff       	call   c0001f85 <clst2sect>
c0004cb5:	89 c2                	mov    edx,eax
c0004cb7:	b8 02 00 00 00       	mov    eax,0x2
c0004cbc:	85 d2                	test   edx,edx
c0004cbe:	74 3f                	je     c0004cff <f_rename+0x198>
c0004cc0:	89 f8                	mov    eax,edi
c0004cc2:	e8 9e d5 ff ff       	call   c0002265 <move_window>
c0004cc7:	85 c0                	test   eax,eax
c0004cc9:	75 34                	jne    c0004cff <f_rename+0x198>
c0004ccb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ccf:	80 78 55 2e          	cmp    BYTE PTR [eax+0x55],0x2e
c0004cd3:	75 14                	jne    c0004ce9 <f_rename+0x182>
c0004cd5:	8d 50 54             	lea    edx,[eax+0x54]
c0004cd8:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c0004cdc:	e8 28 e4 ff ff       	call   c0003109 <st_clust.isra.1>
c0004ce1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ce5:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004ce9:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004ced:	e8 4f ea ff ff       	call   c0003741 <dir_remove>
c0004cf2:	85 c0                	test   eax,eax
c0004cf4:	75 09                	jne    c0004cff <f_rename+0x198>
c0004cf6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004cfa:	e8 a6 df ff ff       	call   c0002ca5 <sync_fs>
c0004cff:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004d03:	83 ec 0c             	sub    esp,0xc
c0004d06:	56                   	push   esi
c0004d07:	e8 98 0d 00 00       	call   c0005aa4 <ff_memfree>
c0004d0c:	83 c4 10             	add    esp,0x10
c0004d0f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004d13:	81 c4 a0 00 00 00    	add    esp,0xa0
c0004d19:	5b                   	pop    ebx
c0004d1a:	5e                   	pop    esi
c0004d1b:	5f                   	pop    edi
c0004d1c:	c3                   	ret    

c0004d1d <f_chmod>:
c0004d1d:	57                   	push   edi
c0004d1e:	b9 02 00 00 00       	mov    ecx,0x2
c0004d23:	56                   	push   esi
c0004d24:	53                   	push   ebx
c0004d25:	83 ec 50             	sub    esp,0x50
c0004d28:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c0004d2c:	8b 7c 24 68          	mov    edi,DWORD PTR [esp+0x68]
c0004d30:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004d34:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004d38:	e8 7b d6 ff ff       	call   c00023b8 <mount_volume>
c0004d3d:	85 c0                	test   eax,eax
c0004d3f:	75 7e                	jne    c0004dbf <f_chmod+0xa2>
c0004d41:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d45:	83 ec 0c             	sub    esp,0xc
c0004d48:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004d4c:	68 00 02 00 00       	push   0x200
c0004d51:	e8 36 0d 00 00       	call   c0005a8c <ff_memalloc>
c0004d56:	83 c4 10             	add    esp,0x10
c0004d59:	89 c6                	mov    esi,eax
c0004d5b:	b8 11 00 00 00       	mov    eax,0x11
c0004d60:	85 f6                	test   esi,esi
c0004d62:	74 5b                	je     c0004dbf <f_chmod+0xa2>
c0004d64:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d68:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004d6c:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004d6f:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004d73:	e8 4a eb ff ff       	call   c00038c2 <follow_path>
c0004d78:	85 c0                	test   eax,eax
c0004d7a:	75 2f                	jne    c0004dab <f_chmod+0x8e>
c0004d7c:	b8 06 00 00 00       	mov    eax,0x6
c0004d81:	f6 44 24 4b a0       	test   BYTE PTR [esp+0x4b],0xa0
c0004d86:	75 23                	jne    c0004dab <f_chmod+0x8e>
c0004d88:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004d8c:	32 58 0b             	xor    bl,BYTE PTR [eax+0xb]
c0004d8f:	21 fb                	and    ebx,edi
c0004d91:	83 e3 27             	and    ebx,0x27
c0004d94:	32 58 0b             	xor    bl,BYTE PTR [eax+0xb]
c0004d97:	88 58 0b             	mov    BYTE PTR [eax+0xb],bl
c0004d9a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d9e:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004da2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004da6:	e8 fa de ff ff       	call   c0002ca5 <sync_fs>
c0004dab:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004daf:	83 ec 0c             	sub    esp,0xc
c0004db2:	56                   	push   esi
c0004db3:	e8 ec 0c 00 00       	call   c0005aa4 <ff_memfree>
c0004db8:	83 c4 10             	add    esp,0x10
c0004dbb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004dbf:	83 c4 50             	add    esp,0x50
c0004dc2:	5b                   	pop    ebx
c0004dc3:	5e                   	pop    esi
c0004dc4:	5f                   	pop    edi
c0004dc5:	c3                   	ret    

c0004dc6 <f_utime>:
c0004dc6:	56                   	push   esi
c0004dc7:	b9 02 00 00 00       	mov    ecx,0x2
c0004dcc:	53                   	push   ebx
c0004dcd:	83 ec 54             	sub    esp,0x54
c0004dd0:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c0004dd4:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004dd8:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004ddc:	e8 d7 d5 ff ff       	call   c00023b8 <mount_volume>
c0004de1:	85 c0                	test   eax,eax
c0004de3:	0f 85 85 00 00 00    	jne    c0004e6e <f_utime+0xa8>
c0004de9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ded:	83 ec 0c             	sub    esp,0xc
c0004df0:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004df4:	68 00 02 00 00       	push   0x200
c0004df9:	e8 8e 0c 00 00       	call   c0005a8c <ff_memalloc>
c0004dfe:	83 c4 10             	add    esp,0x10
c0004e01:	89 c3                	mov    ebx,eax
c0004e03:	b8 11 00 00 00       	mov    eax,0x11
c0004e08:	85 db                	test   ebx,ebx
c0004e0a:	74 62                	je     c0004e6e <f_utime+0xa8>
c0004e0c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e10:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004e14:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0004e17:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004e1b:	e8 a2 ea ff ff       	call   c00038c2 <follow_path>
c0004e20:	85 c0                	test   eax,eax
c0004e22:	75 36                	jne    c0004e5a <f_utime+0x94>
c0004e24:	b8 06 00 00 00       	mov    eax,0x6
c0004e29:	f6 44 24 4b a0       	test   BYTE PTR [esp+0x4b],0xa0
c0004e2e:	75 2a                	jne    c0004e5a <f_utime+0x94>
c0004e30:	0f b7 46 06          	movzx  eax,WORD PTR [esi+0x6]
c0004e34:	0f b7 56 04          	movzx  edx,WORD PTR [esi+0x4]
c0004e38:	c1 e2 10             	shl    edx,0x10
c0004e3b:	09 c2                	or     edx,eax
c0004e3d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004e41:	83 c0 16             	add    eax,0x16
c0004e44:	e8 1f cf ff ff       	call   c0001d68 <st_dword>
c0004e49:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e4d:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004e51:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e55:	e8 4b de ff ff       	call   c0002ca5 <sync_fs>
c0004e5a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004e5e:	83 ec 0c             	sub    esp,0xc
c0004e61:	53                   	push   ebx
c0004e62:	e8 3d 0c 00 00       	call   c0005aa4 <ff_memfree>
c0004e67:	83 c4 10             	add    esp,0x10
c0004e6a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e6e:	83 c4 54             	add    esp,0x54
c0004e71:	5b                   	pop    ebx
c0004e72:	5e                   	pop    esi
c0004e73:	c3                   	ret    

c0004e74 <f_getlabel>:
c0004e74:	55                   	push   ebp
c0004e75:	31 c9                	xor    ecx,ecx
c0004e77:	57                   	push   edi
c0004e78:	56                   	push   esi
c0004e79:	53                   	push   ebx
c0004e7a:	83 ec 5c             	sub    esp,0x5c
c0004e7d:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004e81:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004e85:	e8 2e d5 ff ff       	call   c00023b8 <mount_volume>
c0004e8a:	89 c6                	mov    esi,eax
c0004e8c:	85 c0                	test   eax,eax
c0004e8e:	0f 85 27 01 00 00    	jne    c0004fbb <f_getlabel+0x147>
c0004e94:	83 7c 24 74 00       	cmp    DWORD PTR [esp+0x74],0x0
c0004e99:	0f 84 d1 00 00 00    	je     c0004f70 <f_getlabel+0xfc>
c0004e9f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ea3:	31 d2                	xor    edx,edx
c0004ea5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0004ea9:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0004eb1:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004eb5:	e8 79 e3 ff ff       	call   c0003233 <dir_sdi>
c0004eba:	85 c0                	test   eax,eax
c0004ebc:	0f 85 a2 00 00 00    	jne    c0004f64 <f_getlabel+0xf0>
c0004ec2:	ba 01 00 00 00       	mov    edx,0x1
c0004ec7:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004ecb:	e8 54 e7 ff ff       	call   c0003624 <dir_read>
c0004ed0:	85 c0                	test   eax,eax
c0004ed2:	0f 85 8c 00 00 00    	jne    c0004f64 <f_getlabel+0xf0>
c0004ed8:	31 db                	xor    ebx,ebx
c0004eda:	31 c9                	xor    ecx,ecx
c0004edc:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0004ee0:	8d 79 01             	lea    edi,[ecx+0x1]
c0004ee3:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0004ee8:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0004eed:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004ef1:	e8 ca ce ff ff       	call   c0001dc0 <dbc_1st>
c0004ef6:	85 c0                	test   eax,eax
c0004ef8:	74 16                	je     c0004f10 <f_getlabel+0x9c>
c0004efa:	83 ff 0b             	cmp    edi,0xb
c0004efd:	74 11                	je     c0004f10 <f_getlabel+0x9c>
c0004eff:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0004f04:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004f08:	8d 79 02             	lea    edi,[ecx+0x2]
c0004f0b:	c1 e0 08             	shl    eax,0x8
c0004f0e:	09 c2                	or     edx,eax
c0004f10:	0f b7 d2             	movzx  edx,dx
c0004f13:	50                   	push   eax
c0004f14:	50                   	push   eax
c0004f15:	68 b5 01 00 00       	push   0x1b5
c0004f1a:	52                   	push   edx
c0004f1b:	e8 3c 0c 00 00       	call   c0005b5c <ff_oem2uni>
c0004f20:	83 c4 10             	add    esp,0x10
c0004f23:	66 85 c0             	test   ax,ax
c0004f26:	74 25                	je     c0004f4d <f_getlabel+0xd9>
c0004f28:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0004f2c:	0f b7 c0             	movzx  eax,ax
c0004f2f:	01 da                	add    edx,ebx
c0004f31:	b9 04 00 00 00       	mov    ecx,0x4
c0004f36:	e8 51 cf ff ff       	call   c0001e8c <put_utf>
c0004f3b:	84 c0                	test   al,al
c0004f3d:	74 0e                	je     c0004f4d <f_getlabel+0xd9>
c0004f3f:	0f b6 c0             	movzx  eax,al
c0004f42:	01 c3                	add    ebx,eax
c0004f44:	83 ff 0b             	cmp    edi,0xb
c0004f47:	74 06                	je     c0004f4f <f_getlabel+0xdb>
c0004f49:	89 f9                	mov    ecx,edi
c0004f4b:	eb 8f                	jmp    c0004edc <f_getlabel+0x68>
c0004f4d:	31 db                	xor    ebx,ebx
c0004f4f:	03 5c 24 74          	add    ebx,DWORD PTR [esp+0x74]
c0004f53:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0004f56:	39 5c 24 74          	cmp    DWORD PTR [esp+0x74],ebx
c0004f5a:	74 14                	je     c0004f70 <f_getlabel+0xfc>
c0004f5c:	4b                   	dec    ebx
c0004f5d:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c0004f60:	74 f1                	je     c0004f53 <f_getlabel+0xdf>
c0004f62:	eb 0c                	jmp    c0004f70 <f_getlabel+0xfc>
c0004f64:	83 f8 04             	cmp    eax,0x4
c0004f67:	75 50                	jne    c0004fb9 <f_getlabel+0x145>
c0004f69:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0004f6d:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004f70:	83 7c 24 78 00       	cmp    DWORD PTR [esp+0x78],0x0
c0004f75:	74 44                	je     c0004fbb <f_getlabel+0x147>
c0004f77:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f7b:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0004f7e:	e8 e2 d2 ff ff       	call   c0002265 <move_window>
c0004f83:	89 c6                	mov    esi,eax
c0004f85:	85 c0                	test   eax,eax
c0004f87:	75 32                	jne    c0004fbb <f_getlabel+0x147>
c0004f89:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004f8d:	b8 43 00 00 00       	mov    eax,0x43
c0004f92:	8a 0a                	mov    cl,BYTE PTR [edx]
c0004f94:	80 f9 03             	cmp    cl,0x3
c0004f97:	74 0f                	je     c0004fa8 <f_getlabel+0x134>
c0004f99:	31 c0                	xor    eax,eax
c0004f9b:	80 f9 04             	cmp    cl,0x4
c0004f9e:	0f 94 c0             	sete   al
c0004fa1:	48                   	dec    eax
c0004fa2:	83 e0 c3             	and    eax,0xffffffc3
c0004fa5:	83 c0 64             	add    eax,0x64
c0004fa8:	8d 44 02 34          	lea    eax,[edx+eax*1+0x34]
c0004fac:	e8 9b cd ff ff       	call   c0001d4c <ld_dword>
c0004fb1:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0004fb5:	89 07                	mov    DWORD PTR [edi],eax
c0004fb7:	eb 02                	jmp    c0004fbb <f_getlabel+0x147>
c0004fb9:	89 c6                	mov    esi,eax
c0004fbb:	83 c4 5c             	add    esp,0x5c
c0004fbe:	89 f0                	mov    eax,esi
c0004fc0:	5b                   	pop    ebx
c0004fc1:	5e                   	pop    esi
c0004fc2:	5f                   	pop    edi
c0004fc3:	5d                   	pop    ebp
c0004fc4:	c3                   	ret    

c0004fc5 <f_setlabel>:
c0004fc5:	56                   	push   esi
c0004fc6:	b9 02 00 00 00       	mov    ecx,0x2
c0004fcb:	53                   	push   ebx
c0004fcc:	83 ec 54             	sub    esp,0x54
c0004fcf:	8d 54 24 04          	lea    edx,[esp+0x4]
c0004fd3:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004fd7:	e8 dc d3 ff ff       	call   c00023b8 <mount_volume>
c0004fdc:	89 c6                	mov    esi,eax
c0004fde:	85 c0                	test   eax,eax
c0004fe0:	0f 85 67 01 00 00    	jne    c000514d <f_setlabel+0x188>
c0004fe6:	b9 0b 00 00 00       	mov    ecx,0xb
c0004feb:	ba 20 00 00 00       	mov    edx,0x20
c0004ff0:	8d 44 24 0a          	lea    eax,[esp+0xa]
c0004ff4:	31 db                	xor    ebx,ebx
c0004ff6:	e8 85 cd ff ff       	call   c0001d80 <mem_set>
c0004ffb:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0004fff:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0005002:	76 5b                	jbe    c000505f <f_setlabel+0x9a>
c0005004:	8d 44 24 60          	lea    eax,[esp+0x60]
c0005008:	e8 b9 cd ff ff       	call   c0001dc6 <tchar2uni>
c000500d:	3d ff ff 00 00       	cmp    eax,0xffff
c0005012:	76 0a                	jbe    c000501e <f_setlabel+0x59>
c0005014:	be 06 00 00 00       	mov    esi,0x6
c0005019:	e9 2f 01 00 00       	jmp    c000514d <f_setlabel+0x188>
c000501e:	83 ec 0c             	sub    esp,0xc
c0005021:	50                   	push   eax
c0005022:	e8 ad 0b 00 00       	call   c0005bd4 <ff_wtoupper>
c0005027:	5a                   	pop    edx
c0005028:	59                   	pop    ecx
c0005029:	68 b5 01 00 00       	push   0x1b5
c000502e:	50                   	push   eax
c000502f:	e8 88 0a 00 00       	call   c0005abc <ff_uni2oem>
c0005034:	83 c4 10             	add    esp,0x10
c0005037:	89 c6                	mov    esi,eax
c0005039:	66 85 c0             	test   ax,ax
c000503c:	74 d6                	je     c0005014 <f_setlabel+0x4f>
c000503e:	0f b7 d0             	movzx  edx,ax
c0005041:	b8 f0 ce 01 c0       	mov    eax,0xc001cef0
c0005046:	e8 63 cd ff ff       	call   c0001dae <chk_chr>
c000504b:	85 c0                	test   eax,eax
c000504d:	75 c5                	jne    c0005014 <f_setlabel+0x4f>
c000504f:	66 81 fe ff 00       	cmp    si,0xff
c0005054:	0f 87 c9 00 00 00    	ja     c0005123 <f_setlabel+0x15e>
c000505a:	e9 e4 00 00 00       	jmp    c0005143 <f_setlabel+0x17e>
c000505f:	80 7c 24 0a e5       	cmp    BYTE PTR [esp+0xa],0xe5
c0005064:	74 ae                	je     c0005014 <f_setlabel+0x4f>
c0005066:	85 db                	test   ebx,ebx
c0005068:	74 0e                	je     c0005078 <f_setlabel+0xb3>
c000506a:	8d 43 ff             	lea    eax,[ebx-0x1]
c000506d:	80 7c 1c 09 20       	cmp    BYTE PTR [esp+ebx*1+0x9],0x20
c0005072:	75 04                	jne    c0005078 <f_setlabel+0xb3>
c0005074:	89 c3                	mov    ebx,eax
c0005076:	eb ee                	jmp    c0005066 <f_setlabel+0xa1>
c0005078:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000507c:	31 d2                	xor    edx,edx
c000507e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0005082:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c000508a:	8d 44 24 20          	lea    eax,[esp+0x20]
c000508e:	e8 a0 e1 ff ff       	call   c0003233 <dir_sdi>
c0005093:	89 c6                	mov    esi,eax
c0005095:	85 c0                	test   eax,eax
c0005097:	0f 85 b0 00 00 00    	jne    c000514d <f_setlabel+0x188>
c000509d:	ba 01 00 00 00       	mov    edx,0x1
c00050a2:	8d 44 24 20          	lea    eax,[esp+0x20]
c00050a6:	e8 79 e5 ff ff       	call   c0003624 <dir_read>
c00050ab:	85 c0                	test   eax,eax
c00050ad:	75 18                	jne    c00050c7 <f_setlabel+0x102>
c00050af:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00050b3:	85 db                	test   ebx,ebx
c00050b5:	74 0b                	je     c00050c2 <f_setlabel+0xfd>
c00050b7:	b9 0b 00 00 00       	mov    ecx,0xb
c00050bc:	8d 54 24 0a          	lea    edx,[esp+0xa]
c00050c0:	eb 47                	jmp    c0005109 <f_setlabel+0x144>
c00050c2:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c00050c5:	eb 47                	jmp    c000510e <f_setlabel+0x149>
c00050c7:	83 f8 04             	cmp    eax,0x4
c00050ca:	75 53                	jne    c000511f <f_setlabel+0x15a>
c00050cc:	85 db                	test   ebx,ebx
c00050ce:	74 7d                	je     c000514d <f_setlabel+0x188>
c00050d0:	ba 01 00 00 00       	mov    edx,0x1
c00050d5:	8d 44 24 20          	lea    eax,[esp+0x20]
c00050d9:	e8 e5 e4 ff ff       	call   c00035c3 <dir_alloc>
c00050de:	89 c6                	mov    esi,eax
c00050e0:	85 c0                	test   eax,eax
c00050e2:	75 69                	jne    c000514d <f_setlabel+0x188>
c00050e4:	b9 20 00 00 00       	mov    ecx,0x20
c00050e9:	31 d2                	xor    edx,edx
c00050eb:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00050ef:	e8 8c cc ff ff       	call   c0001d80 <mem_set>
c00050f4:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00050f8:	b9 0b 00 00 00       	mov    ecx,0xb
c00050fd:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c0005101:	8d 54 24 0a          	lea    edx,[esp+0xa]
c0005105:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005109:	e8 5d cc ff ff       	call   c0001d6b <mem_cpy>
c000510e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005112:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005116:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000511a:	e8 86 db ff ff       	call   c0002ca5 <sync_fs>
c000511f:	89 c6                	mov    esi,eax
c0005121:	eb 2a                	jmp    c000514d <f_setlabel+0x188>
c0005123:	83 fb 09             	cmp    ebx,0x9
c0005126:	0f 87 e8 fe ff ff    	ja     c0005014 <f_setlabel+0x4f>
c000512c:	89 f0                	mov    eax,esi
c000512e:	66 c1 e8 08          	shr    ax,0x8
c0005132:	88 44 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],al
c0005136:	43                   	inc    ebx
c0005137:	89 f0                	mov    eax,esi
c0005139:	88 44 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],al
c000513d:	43                   	inc    ebx
c000513e:	e9 b8 fe ff ff       	jmp    c0004ffb <f_setlabel+0x36>
c0005143:	83 fb 0a             	cmp    ebx,0xa
c0005146:	76 ef                	jbe    c0005137 <f_setlabel+0x172>
c0005148:	e9 c7 fe ff ff       	jmp    c0005014 <f_setlabel+0x4f>
c000514d:	89 f0                	mov    eax,esi
c000514f:	83 c4 54             	add    esp,0x54
c0005152:	5b                   	pop    ebx
c0005153:	5e                   	pop    esi
c0005154:	c3                   	ret    

c0005155 <f_expand>:
c0005155:	55                   	push   ebp
c0005156:	57                   	push   edi
c0005157:	56                   	push   esi
c0005158:	53                   	push   ebx
c0005159:	83 ec 2c             	sub    esp,0x2c
c000515c:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005160:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0005164:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005168:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000516c:	89 d8                	mov    eax,ebx
c000516e:	e8 48 d0 ff ff       	call   c00021bb <validate>
c0005173:	89 c6                	mov    esi,eax
c0005175:	85 c0                	test   eax,eax
c0005177:	0f 85 2e 01 00 00    	jne    c00052ab <f_expand+0x156>
c000517d:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c0005181:	85 f6                	test   esi,esi
c0005183:	0f 85 22 01 00 00    	jne    c00052ab <f_expand+0x156>
c0005189:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c000518e:	75 0a                	jne    c000519a <f_expand+0x45>
c0005190:	be 07 00 00 00       	mov    esi,0x7
c0005195:	e9 11 01 00 00       	jmp    c00052ab <f_expand+0x156>
c000519a:	83 7b 0c 00          	cmp    DWORD PTR [ebx+0xc],0x0
c000519e:	75 f0                	jne    c0005190 <f_expand+0x3b>
c00051a0:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c00051a4:	74 ea                	je     c0005190 <f_expand+0x3b>
c00051a6:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c00051aa:	0f b7 4d 0a          	movzx  ecx,WORD PTR [ebp+0xa]
c00051ae:	c1 e1 09             	shl    ecx,0x9
c00051b1:	8d 41 ff             	lea    eax,[ecx-0x1]
c00051b4:	85 44 24 44          	test   DWORD PTR [esp+0x44],eax
c00051b8:	0f 95 c0             	setne  al
c00051bb:	31 d2                	xor    edx,edx
c00051bd:	0f b6 c0             	movzx  eax,al
c00051c0:	89 c7                	mov    edi,eax
c00051c2:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00051c6:	f7 f1                	div    ecx
c00051c8:	01 f8                	add    eax,edi
c00051ca:	8b 7d 10             	mov    edi,DWORD PTR [ebp+0x10]
c00051cd:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00051d1:	83 ff 01             	cmp    edi,0x1
c00051d4:	76 05                	jbe    c00051db <f_expand+0x86>
c00051d6:	39 7d 18             	cmp    DWORD PTR [ebp+0x18],edi
c00051d9:	77 05                	ja     c00051e0 <f_expand+0x8b>
c00051db:	bf 02 00 00 00       	mov    edi,0x2
c00051e0:	89 3c 24             	mov    DWORD PTR [esp],edi
c00051e3:	89 fd                	mov    ebp,edi
c00051e5:	31 c9                	xor    ecx,ecx
c00051e7:	89 ea                	mov    edx,ebp
c00051e9:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00051ed:	8b 03                	mov    eax,DWORD PTR [ebx]
c00051ef:	45                   	inc    ebp
c00051f0:	e8 3c df ff ff       	call   c0003131 <get_fat.isra.2>
c00051f5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00051f9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00051fd:	39 6a 18             	cmp    DWORD PTR [edx+0x18],ebp
c0005200:	77 05                	ja     c0005207 <f_expand+0xb2>
c0005202:	bd 02 00 00 00       	mov    ebp,0x2
c0005207:	83 f8 01             	cmp    eax,0x1
c000520a:	74 20                	je     c000522c <f_expand+0xd7>
c000520c:	83 f8 ff             	cmp    eax,0xffffffff
c000520f:	74 22                	je     c0005233 <f_expand+0xde>
c0005211:	85 c0                	test   eax,eax
c0005213:	75 09                	jne    c000521e <f_expand+0xc9>
c0005215:	41                   	inc    ecx
c0005216:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c000521a:	75 07                	jne    c0005223 <f_expand+0xce>
c000521c:	eb 1c                	jmp    c000523a <f_expand+0xe5>
c000521e:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0005221:	31 c9                	xor    ecx,ecx
c0005223:	39 fd                	cmp    ebp,edi
c0005225:	75 c0                	jne    c00051e7 <f_expand+0x92>
c0005227:	e9 64 ff ff ff       	jmp    c0005190 <f_expand+0x3b>
c000522c:	be 02 00 00 00       	mov    esi,0x2
c0005231:	eb 78                	jmp    c00052ab <f_expand+0x156>
c0005233:	be 01 00 00 00       	mov    esi,0x1
c0005238:	eb 71                	jmp    c00052ab <f_expand+0x156>
c000523a:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c000523f:	74 2b                	je     c000526c <f_expand+0x117>
c0005241:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0005244:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0005248:	85 ed                	test   ebp,ebp
c000524a:	74 24                	je     c0005270 <f_expand+0x11b>
c000524c:	83 c9 ff             	or     ecx,0xffffffff
c000524f:	83 fd 01             	cmp    ebp,0x1
c0005252:	74 03                	je     c0005257 <f_expand+0x102>
c0005254:	8d 4f 01             	lea    ecx,[edi+0x1]
c0005257:	89 fa                	mov    edx,edi
c0005259:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000525d:	e8 59 d4 ff ff       	call   c00026bb <put_fat>
c0005262:	85 c0                	test   eax,eax
c0005264:	75 43                	jne    c00052a9 <f_expand+0x154>
c0005266:	89 f8                	mov    eax,edi
c0005268:	4d                   	dec    ebp
c0005269:	47                   	inc    edi
c000526a:	eb dc                	jmp    c0005248 <f_expand+0xf3>
c000526c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000526f:	48                   	dec    eax
c0005270:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005274:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c0005279:	89 42 10             	mov    DWORD PTR [edx+0x10],eax
c000527c:	74 2d                	je     c00052ab <f_expand+0x156>
c000527e:	80 4b 10 40          	or     BYTE PTR [ebx+0x10],0x40
c0005282:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005285:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005288:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000528c:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000528f:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0005292:	8b 5a 18             	mov    ebx,DWORD PTR [edx+0x18]
c0005295:	8d 4b fe             	lea    ecx,[ebx-0x2]
c0005298:	39 c8                	cmp    eax,ecx
c000529a:	77 0f                	ja     c00052ab <f_expand+0x156>
c000529c:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c00052a0:	80 4a 04 01          	or     BYTE PTR [edx+0x4],0x1
c00052a4:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c00052a7:	eb 02                	jmp    c00052ab <f_expand+0x156>
c00052a9:	89 c6                	mov    esi,eax
c00052ab:	83 c4 2c             	add    esp,0x2c
c00052ae:	89 f0                	mov    eax,esi
c00052b0:	5b                   	pop    ebx
c00052b1:	5e                   	pop    esi
c00052b2:	5f                   	pop    edi
c00052b3:	5d                   	pop    ebp
c00052b4:	c3                   	ret    

c00052b5 <f_mkfs>:
c00052b5:	55                   	push   ebp
c00052b6:	57                   	push   edi
c00052b7:	bf 0b 00 00 00       	mov    edi,0xb
c00052bc:	56                   	push   esi
c00052bd:	53                   	push   ebx
c00052be:	83 ec 4c             	sub    esp,0x4c
c00052c1:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c00052c5:	8b 6c 24 68          	mov    ebp,DWORD PTR [esp+0x68]
c00052c9:	8d 44 24 60          	lea    eax,[esp+0x60]
c00052cd:	e8 9c ce ff ff       	call   c000216e <get_ldnumber>
c00052d2:	85 c0                	test   eax,eax
c00052d4:	0f 88 a6 07 00 00    	js     c0005a80 <f_mkfs+0x7cb>
c00052da:	8b 14 85 a0 fd 01 c0 	mov    edx,DWORD PTR [eax*4-0x3ffe0260]
c00052e1:	85 d2                	test   edx,edx
c00052e3:	74 03                	je     c00052e8 <f_mkfs+0x33>
c00052e5:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00052e8:	85 db                	test   ebx,ebx
c00052ea:	75 05                	jne    c00052f1 <f_mkfs+0x3c>
c00052ec:	bb e0 ce 01 c0       	mov    ebx,0xc001cee0
c00052f1:	83 ec 0c             	sub    esp,0xc
c00052f4:	0f b6 c0             	movzx  eax,al
c00052f7:	bf 03 00 00 00       	mov    edi,0x3
c00052fc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005300:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0005304:	e8 e8 c9 ff ff       	call   c0001cf1 <disk_initialize>
c0005309:	83 c4 10             	add    esp,0x10
c000530c:	a8 01                	test   al,0x1
c000530e:	0f 85 6c 07 00 00    	jne    c0005a80 <f_mkfs+0x7cb>
c0005314:	bf 0a 00 00 00       	mov    edi,0xa
c0005319:	a8 04                	test   al,0x4
c000531b:	0f 85 5f 07 00 00    	jne    c0005a80 <f_mkfs+0x7cb>
c0005321:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0005324:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0005328:	85 c0                	test   eax,eax
c000532a:	75 20                	jne    c000534c <f_mkfs+0x97>
c000532c:	51                   	push   ecx
c000532d:	8d 44 24 34          	lea    eax,[esp+0x34]
c0005331:	50                   	push   eax
c0005332:	6a 03                	push   0x3
c0005334:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0005338:	e8 e3 c9 ff ff       	call   c0001d20 <disk_ioctl>
c000533d:	83 c4 10             	add    esp,0x10
c0005340:	85 c0                	test   eax,eax
c0005342:	74 08                	je     c000534c <f_mkfs+0x97>
c0005344:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c000534c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0005350:	8d 42 ff             	lea    eax,[edx-0x1]
c0005353:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0005358:	77 04                	ja     c000535e <f_mkfs+0xa9>
c000535a:	85 c2                	test   edx,eax
c000535c:	74 08                	je     c0005366 <f_mkfs+0xb1>
c000535e:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0005366:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c0005369:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c000536d:	48                   	dec    eax
c000536e:	3c 01                	cmp    al,0x1
c0005370:	76 05                	jbe    c0005377 <f_mkfs+0xc2>
c0005372:	c6 44 24 2d 01       	mov    BYTE PTR [esp+0x2d],0x1
c0005377:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000537a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000537e:	48                   	dec    eax
c000537f:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0005384:	77 07                	ja     c000538d <f_mkfs+0xd8>
c0005386:	f6 44 24 0c 0f       	test   BYTE PTR [esp+0xc],0xf
c000538b:	74 08                	je     c0005395 <f_mkfs+0xe0>
c000538d:	c7 44 24 0c 00 02 00 00 	mov    DWORD PTR [esp+0xc],0x200
c0005395:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0005398:	81 ff 00 00 00 01    	cmp    edi,0x1000000
c000539e:	77 07                	ja     c00053a7 <f_mkfs+0xf2>
c00053a0:	8d 47 ff             	lea    eax,[edi-0x1]
c00053a3:	85 f8                	test   eax,edi
c00053a5:	74 02                	je     c00053a9 <f_mkfs+0xf4>
c00053a7:	31 ff                	xor    edi,edi
c00053a9:	81 7c 24 6c ff 01 00 00 	cmp    DWORD PTR [esp+0x6c],0x1ff
c00053b1:	77 0a                	ja     c00053bd <f_mkfs+0x108>
c00053b3:	bf 11 00 00 00       	mov    edi,0x11
c00053b8:	e9 c3 06 00 00       	jmp    c0005a80 <f_mkfs+0x7cb>
c00053bd:	8a 1b                	mov    bl,BYTE PTR [ebx]
c00053bf:	89 ee                	mov    esi,ebp
c00053c1:	85 ed                	test   ebp,ebp
c00053c3:	75 1b                	jne    c00053e0 <f_mkfs+0x12b>
c00053c5:	83 ec 0c             	sub    esp,0xc
c00053c8:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c00053cc:	25 00 fe ff ff       	and    eax,0xfffffe00
c00053d1:	50                   	push   eax
c00053d2:	e8 b5 06 00 00       	call   c0005a8c <ff_memalloc>
c00053d7:	83 c4 10             	add    esp,0x10
c00053da:	89 c6                	mov    esi,eax
c00053dc:	85 c0                	test   eax,eax
c00053de:	74 d3                	je     c00053b3 <f_mkfs+0xfe>
c00053e0:	c7 44 24 34 00 00 00 00 	mov    DWORD PTR [esp+0x34],0x0
c00053e8:	52                   	push   edx
c00053e9:	8d 44 24 38          	lea    eax,[esp+0x38]
c00053ed:	50                   	push   eax
c00053ee:	6a 01                	push   0x1
c00053f0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00053f4:	e8 27 c9 ff ff       	call   c0001d20 <disk_ioctl>
c00053f9:	83 c4 10             	add    esp,0x10
c00053fc:	85 c0                	test   eax,eax
c00053fe:	0f 85 25 06 00 00    	jne    c0005a29 <f_mkfs+0x774>
c0005404:	88 d8                	mov    al,bl
c0005406:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000540e:	24 08                	and    al,0x8
c0005410:	88 44 24 2f          	mov    BYTE PTR [esp+0x2f],al
c0005414:	75 18                	jne    c000542e <f_mkfs+0x179>
c0005416:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000541a:	83 f8 3f             	cmp    eax,0x3f
c000541d:	76 0f                	jbe    c000542e <f_mkfs+0x179>
c000541f:	83 e8 3f             	sub    eax,0x3f
c0005422:	c7 44 24 08 3f 00 00 00 	mov    DWORD PTR [esp+0x8],0x3f
c000542a:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000542e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0005432:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005436:	83 f8 7f             	cmp    eax,0x7f
c0005439:	0f 86 52 02 00 00    	jbe    c0005691 <f_mkfs+0x3dc>
c000543f:	b9 80 00 00 00       	mov    ecx,0x80
c0005444:	81 ff ff 01 01 00    	cmp    edi,0x101ff
c000544a:	77 05                	ja     c0005451 <f_mkfs+0x19c>
c000544c:	89 f9                	mov    ecx,edi
c000544e:	c1 e9 09             	shr    ecx,0x9
c0005451:	88 d8                	mov    al,bl
c0005453:	83 e0 01             	and    eax,0x1
c0005456:	80 e3 02             	and    bl,0x2
c0005459:	88 5c 24 2e          	mov    BYTE PTR [esp+0x2e],bl
c000545d:	74 0a                	je     c0005469 <f_mkfs+0x1b4>
c000545f:	84 c0                	test   al,al
c0005461:	0f 84 4c 01 00 00    	je     c00055b3 <f_mkfs+0x2fe>
c0005467:	eb 38                	jmp    c00054a1 <f_mkfs+0x1ec>
c0005469:	bf 13 00 00 00       	mov    edi,0x13
c000546e:	84 c0                	test   al,al
c0005470:	75 2f                	jne    c00054a1 <f_mkfs+0x1ec>
c0005472:	e9 c9 05 00 00       	jmp    c0005a40 <f_mkfs+0x78b>
c0005477:	80 7c 24 2c 02       	cmp    BYTE PTR [esp+0x2c],0x2
c000547c:	0f 85 08 02 00 00    	jne    c000568a <f_mkfs+0x3d5>
c0005482:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0005487:	0f 86 e1 01 00 00    	jbe    c000566e <f_mkfs+0x3b9>
c000548d:	85 c9                	test   ecx,ecx
c000548f:	0f 85 bd 05 00 00    	jne    c0005a52 <f_mkfs+0x79d>
c0005495:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c0005498:	83 f9 40             	cmp    ecx,0x40
c000549b:	0f 87 c1 05 00 00    	ja     c0005a62 <f_mkfs+0x7ad>
c00054a1:	89 cf                	mov    edi,ecx
c00054a3:	85 c9                	test   ecx,ecx
c00054a5:	75 1d                	jne    c00054c4 <f_mkfs+0x20f>
c00054a7:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00054ab:	ba c0 ce 01 c0       	mov    edx,0xc001cec0
c00054b0:	c1 eb 0c             	shr    ebx,0xc
c00054b3:	bf 01 00 00 00       	mov    edi,0x1
c00054b8:	0f b7 02             	movzx  eax,WORD PTR [edx]
c00054bb:	66 85 c0             	test   ax,ax
c00054be:	0f 85 5f 01 00 00    	jne    c0005623 <f_mkfs+0x36e>
c00054c4:	31 d2                	xor    edx,edx
c00054c6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00054ca:	f7 f7                	div    edi
c00054cc:	3d f5 0f 00 00       	cmp    eax,0xff5
c00054d1:	0f 86 5e 01 00 00    	jbe    c0005635 <f_mkfs+0x380>
c00054d7:	83 c0 02             	add    eax,0x2
c00054da:	c6 44 24 2c 02       	mov    BYTE PTR [esp+0x2c],0x2
c00054df:	01 c0                	add    eax,eax
c00054e1:	05 ff 01 00 00       	add    eax,0x1ff
c00054e6:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c00054ee:	c1 e8 09             	shr    eax,0x9
c00054f1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00054f5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00054f9:	c1 e0 05             	shl    eax,0x5
c00054fc:	c1 e8 09             	shr    eax,0x9
c00054ff:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0005503:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c0005508:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000550c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005510:	03 44 24 1c          	add    eax,DWORD PTR [esp+0x1c]
c0005514:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005518:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000551c:	0f af 44 24 20       	imul   eax,DWORD PTR [esp+0x20]
c0005521:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0005525:	03 44 24 24          	add    eax,DWORD PTR [esp+0x24]
c0005529:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000552d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0005531:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0005535:	8d 5c 18 ff          	lea    ebx,[eax+ebx*1-0x1]
c0005539:	f7 d8                	neg    eax
c000553b:	21 c3                	and    ebx,eax
c000553d:	2b 5c 24 28          	sub    ebx,DWORD PTR [esp+0x28]
c0005541:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c0005546:	0f 85 fc 00 00 00    	jne    c0005648 <f_mkfs+0x393>
c000554c:	01 5c 24 1c          	add    DWORD PTR [esp+0x1c],ebx
c0005550:	01 5c 24 18          	add    DWORD PTR [esp+0x18],ebx
c0005554:	89 f8                	mov    eax,edi
c0005556:	c1 e0 04             	shl    eax,0x4
c0005559:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c000555d:	03 44 24 28          	add    eax,DWORD PTR [esp+0x28]
c0005561:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
c0005565:	0f 82 26 01 00 00    	jb     c0005691 <f_mkfs+0x3dc>
c000556b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000556f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0005573:	2b 44 24 24          	sub    eax,DWORD PTR [esp+0x24]
c0005577:	0f af 54 24 20       	imul   edx,DWORD PTR [esp+0x20]
c000557c:	2b 44 24 1c          	sub    eax,DWORD PTR [esp+0x1c]
c0005580:	29 d0                	sub    eax,edx
c0005582:	31 d2                	xor    edx,edx
c0005584:	f7 f7                	div    edi
c0005586:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c000558b:	89 c3                	mov    ebx,eax
c000558d:	0f 85 e4 fe ff ff    	jne    c0005477 <f_mkfs+0x1c2>
c0005593:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0005598:	0f 87 02 01 00 00    	ja     c00056a0 <f_mkfs+0x3eb>
c000559e:	85 c9                	test   ecx,ecx
c00055a0:	0f 85 eb 00 00 00    	jne    c0005691 <f_mkfs+0x3dc>
c00055a6:	83 ff 01             	cmp    edi,0x1
c00055a9:	0f 86 e2 00 00 00    	jbe    c0005691 <f_mkfs+0x3dc>
c00055af:	89 f9                	mov    ecx,edi
c00055b1:	d1 e9                	shr    ecx,1
c00055b3:	89 cb                	mov    ebx,ecx
c00055b5:	85 c9                	test   ecx,ecx
c00055b7:	75 26                	jne    c00055df <f_mkfs+0x32a>
c00055b9:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00055bd:	ba d0 ce 01 c0       	mov    edx,0xc001ced0
c00055c2:	c1 eb 11             	shr    ebx,0x11
c00055c5:	b9 01 00 00 00       	mov    ecx,0x1
c00055ca:	0f b7 02             	movzx  eax,WORD PTR [edx]
c00055cd:	66 85 c0             	test   ax,ax
c00055d0:	74 0b                	je     c00055dd <f_mkfs+0x328>
c00055d2:	83 c2 02             	add    edx,0x2
c00055d5:	39 d8                	cmp    eax,ebx
c00055d7:	77 04                	ja     c00055dd <f_mkfs+0x328>
c00055d9:	01 c9                	add    ecx,ecx
c00055db:	eb ed                	jmp    c00055ca <f_mkfs+0x315>
c00055dd:	31 db                	xor    ebx,ebx
c00055df:	31 d2                	xor    edx,edx
c00055e1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00055e5:	f7 f1                	div    ecx
c00055e7:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c00055ee:	2d f6 ff 00 00       	sub    eax,0xfff6
c00055f3:	c1 ea 09             	shr    edx,0x9
c00055f6:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c00055fb:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00055ff:	0f 87 8c 00 00 00    	ja     c0005691 <f_mkfs+0x3dc>
c0005605:	89 cf                	mov    edi,ecx
c0005607:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c000560f:	89 d9                	mov    ecx,ebx
c0005611:	c7 44 24 1c 20 00 00 00 	mov    DWORD PTR [esp+0x1c],0x20
c0005619:	c6 44 24 2c 03       	mov    BYTE PTR [esp+0x2c],0x3
c000561e:	e9 e0 fe ff ff       	jmp    c0005503 <f_mkfs+0x24e>
c0005623:	83 c2 02             	add    edx,0x2
c0005626:	39 d8                	cmp    eax,ebx
c0005628:	0f 87 96 fe ff ff    	ja     c00054c4 <f_mkfs+0x20f>
c000562e:	01 ff                	add    edi,edi
c0005630:	e9 83 fe ff ff       	jmp    c00054b8 <f_mkfs+0x203>
c0005635:	8d 04 40             	lea    eax,[eax+eax*2]
c0005638:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c000563d:	40                   	inc    eax
c000563e:	d1 e8                	shr    eax,1
c0005640:	83 c0 03             	add    eax,0x3
c0005643:	e9 99 fe ff ff       	jmp    c00054e1 <f_mkfs+0x22c>
c0005648:	31 d2                	xor    edx,edx
c000564a:	89 d8                	mov    eax,ebx
c000564c:	f7 74 24 20          	div    DWORD PTR [esp+0x20]
c0005650:	85 d2                	test   edx,edx
c0005652:	74 09                	je     c000565d <f_mkfs+0x3a8>
c0005654:	4b                   	dec    ebx
c0005655:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0005659:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000565d:	89 d8                	mov    eax,ebx
c000565f:	31 d2                	xor    edx,edx
c0005661:	f7 74 24 20          	div    DWORD PTR [esp+0x20]
c0005665:	01 44 24 10          	add    DWORD PTR [esp+0x10],eax
c0005669:	e9 e6 fe ff ff       	jmp    c0005554 <f_mkfs+0x29f>
c000566e:	3d f5 0f 00 00       	cmp    eax,0xff5
c0005673:	77 2b                	ja     c00056a0 <f_mkfs+0x3eb>
c0005675:	85 c9                	test   ecx,ecx
c0005677:	75 18                	jne    c0005691 <f_mkfs+0x3dc>
c0005679:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c000567c:	81 f9 80 00 00 00    	cmp    ecx,0x80
c0005682:	0f 86 19 fe ff ff    	jbe    c00054a1 <f_mkfs+0x1ec>
c0005688:	eb 07                	jmp    c0005691 <f_mkfs+0x3dc>
c000568a:	3d f5 0f 00 00       	cmp    eax,0xff5
c000568f:	76 0a                	jbe    c000569b <f_mkfs+0x3e6>
c0005691:	bf 0e 00 00 00       	mov    edi,0xe
c0005696:	e9 a5 03 00 00       	jmp    c0005a40 <f_mkfs+0x78b>
c000569b:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c00056a0:	31 d2                	xor    edx,edx
c00056a2:	b9 00 02 00 00       	mov    ecx,0x200
c00056a7:	89 f0                	mov    eax,esi
c00056a9:	e8 d2 c6 ff ff       	call   c0001d80 <mem_set>
c00056ae:	b9 0b 00 00 00       	mov    ecx,0xb
c00056b3:	ba 72 ce 01 c0       	mov    edx,0xc001ce72
c00056b8:	89 f0                	mov    eax,esi
c00056ba:	e8 ac c6 ff ff       	call   c0001d6b <mem_cpy>
c00056bf:	8d 46 0b             	lea    eax,[esi+0xb]
c00056c2:	ba 00 02 00 00       	mov    edx,0x200
c00056c7:	e8 98 c6 ff ff       	call   c0001d64 <st_word>
c00056cc:	89 f8                	mov    eax,edi
c00056ce:	0f b7 54 24 1c       	movzx  edx,WORD PTR [esp+0x1c]
c00056d3:	88 46 0d             	mov    BYTE PTR [esi+0xd],al
c00056d6:	8d 46 0e             	lea    eax,[esi+0xe]
c00056d9:	e8 86 c6 ff ff       	call   c0001d64 <st_word>
c00056de:	8a 44 24 2d          	mov    al,BYTE PTR [esp+0x2d]
c00056e2:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c00056e7:	88 46 10             	mov    BYTE PTR [esi+0x10],al
c00056ea:	75 08                	jne    c00056f4 <f_mkfs+0x43f>
c00056ec:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00056f4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00056f8:	8d 46 11             	lea    eax,[esi+0x11]
c00056fb:	e8 64 c6 ff ff       	call   c0001d64 <st_word>
c0005700:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0005704:	81 fa ff ff 00 00    	cmp    edx,0xffff
c000570a:	77 0a                	ja     c0005716 <f_mkfs+0x461>
c000570c:	8d 46 13             	lea    eax,[esi+0x13]
c000570f:	e8 50 c6 ff ff       	call   c0001d64 <st_word>
c0005714:	eb 08                	jmp    c000571e <f_mkfs+0x469>
c0005716:	8d 46 20             	lea    eax,[esi+0x20]
c0005719:	e8 4a c6 ff ff       	call   c0001d68 <st_dword>
c000571e:	8d 46 18             	lea    eax,[esi+0x18]
c0005721:	ba 3f 00 00 00       	mov    edx,0x3f
c0005726:	c6 46 15 f8          	mov    BYTE PTR [esi+0x15],0xf8
c000572a:	e8 35 c6 ff ff       	call   c0001d64 <st_word>
c000572f:	8d 46 1a             	lea    eax,[esi+0x1a]
c0005732:	ba ff 00 00 00       	mov    edx,0xff
c0005737:	e8 28 c6 ff ff       	call   c0001d64 <st_word>
c000573c:	8d 46 1c             	lea    eax,[esi+0x1c]
c000573f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0005743:	e8 20 c6 ff ff       	call   c0001d68 <st_dword>
c0005748:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c000574d:	75 57                	jne    c00057a6 <f_mkfs+0x4f1>
c000574f:	8d 46 43             	lea    eax,[esi+0x43]
c0005752:	ba 00 00 21 50       	mov    edx,0x50210000
c0005757:	e8 0c c6 ff ff       	call   c0001d68 <st_dword>
c000575c:	8d 46 24             	lea    eax,[esi+0x24]
c000575f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0005763:	e8 00 c6 ff ff       	call   c0001d68 <st_dword>
c0005768:	8d 46 2c             	lea    eax,[esi+0x2c]
c000576b:	ba 02 00 00 00       	mov    edx,0x2
c0005770:	e8 f3 c5 ff ff       	call   c0001d68 <st_dword>
c0005775:	8d 46 30             	lea    eax,[esi+0x30]
c0005778:	ba 01 00 00 00       	mov    edx,0x1
c000577d:	e8 e2 c5 ff ff       	call   c0001d64 <st_word>
c0005782:	8d 46 32             	lea    eax,[esi+0x32]
c0005785:	ba 06 00 00 00       	mov    edx,0x6
c000578a:	e8 d5 c5 ff ff       	call   c0001d64 <st_word>
c000578f:	c6 46 40 80          	mov    BYTE PTR [esi+0x40],0x80
c0005793:	c6 46 42 29          	mov    BYTE PTR [esi+0x42],0x29
c0005797:	8d 46 47             	lea    eax,[esi+0x47]
c000579a:	b9 13 00 00 00       	mov    ecx,0x13
c000579f:	ba 7e ce 01 c0       	mov    edx,0xc001ce7e
c00057a4:	eb 2f                	jmp    c00057d5 <f_mkfs+0x520>
c00057a6:	8d 46 27             	lea    eax,[esi+0x27]
c00057a9:	ba 00 00 21 50       	mov    edx,0x50210000
c00057ae:	e8 b5 c5 ff ff       	call   c0001d68 <st_dword>
c00057b3:	0f b7 54 24 10       	movzx  edx,WORD PTR [esp+0x10]
c00057b8:	8d 46 16             	lea    eax,[esi+0x16]
c00057bb:	e8 a4 c5 ff ff       	call   c0001d64 <st_word>
c00057c0:	c6 46 24 80          	mov    BYTE PTR [esi+0x24],0x80
c00057c4:	c6 46 26 29          	mov    BYTE PTR [esi+0x26],0x29
c00057c8:	8d 46 2b             	lea    eax,[esi+0x2b]
c00057cb:	b9 13 00 00 00       	mov    ecx,0x13
c00057d0:	ba 92 ce 01 c0       	mov    edx,0xc001ce92
c00057d5:	e8 91 c5 ff ff       	call   c0001d6b <mem_cpy>
c00057da:	8d 86 fe 01 00 00    	lea    eax,[esi+0x1fe]
c00057e0:	ba 55 aa 00 00       	mov    edx,0xaa55
c00057e5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00057e9:	e8 76 c5 ff ff       	call   c0001d64 <st_word>
c00057ee:	6a 01                	push   0x1
c00057f0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00057f4:	56                   	push   esi
c00057f5:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00057f9:	e8 0c c5 ff ff       	call   c0001d0a <disk_write>
c00057fe:	83 c4 10             	add    esp,0x10
c0005801:	85 c0                	test   eax,eax
c0005803:	0f 85 20 02 00 00    	jne    c0005a29 <f_mkfs+0x774>
c0005809:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c000580e:	0f 85 98 00 00 00    	jne    c00058ac <f_mkfs+0x5f7>
c0005814:	6a 01                	push   0x1
c0005816:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000581a:	83 c0 06             	add    eax,0x6
c000581d:	50                   	push   eax
c000581e:	56                   	push   esi
c000581f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0005823:	e8 e2 c4 ff ff       	call   c0001d0a <disk_write>
c0005828:	b9 00 02 00 00       	mov    ecx,0x200
c000582d:	31 d2                	xor    edx,edx
c000582f:	89 f0                	mov    eax,esi
c0005831:	e8 4a c5 ff ff       	call   c0001d80 <mem_set>
c0005836:	ba 52 52 61 41       	mov    edx,0x41615252
c000583b:	89 f0                	mov    eax,esi
c000583d:	e8 26 c5 ff ff       	call   c0001d68 <st_dword>
c0005842:	8d 86 e4 01 00 00    	lea    eax,[esi+0x1e4]
c0005848:	ba 72 72 41 61       	mov    edx,0x61417272
c000584d:	e8 16 c5 ff ff       	call   c0001d68 <st_dword>
c0005852:	8d 53 ff             	lea    edx,[ebx-0x1]
c0005855:	8d 86 e8 01 00 00    	lea    eax,[esi+0x1e8]
c000585b:	e8 08 c5 ff ff       	call   c0001d68 <st_dword>
c0005860:	8d 86 ec 01 00 00    	lea    eax,[esi+0x1ec]
c0005866:	ba 02 00 00 00       	mov    edx,0x2
c000586b:	e8 f8 c4 ff ff       	call   c0001d68 <st_dword>
c0005870:	ba 55 aa 00 00       	mov    edx,0xaa55
c0005875:	8d 86 fe 01 00 00    	lea    eax,[esi+0x1fe]
c000587b:	e8 e4 c4 ff ff       	call   c0001d64 <st_word>
c0005880:	6a 01                	push   0x1
c0005882:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005886:	83 c0 07             	add    eax,0x7
c0005889:	50                   	push   eax
c000588a:	56                   	push   esi
c000588b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000588f:	e8 76 c4 ff ff       	call   c0001d0a <disk_write>
c0005894:	83 c4 20             	add    esp,0x20
c0005897:	6a 01                	push   0x1
c0005899:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000589d:	40                   	inc    eax
c000589e:	50                   	push   eax
c000589f:	56                   	push   esi
c00058a0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00058a4:	e8 61 c4 ff ff       	call   c0001d0a <disk_write>
c00058a9:	83 c4 10             	add    esp,0x10
c00058ac:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c00058b0:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c00058b4:	c1 e8 09             	shr    eax,0x9
c00058b7:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c00058bd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00058c1:	31 d2                	xor    edx,edx
c00058c3:	31 db                	xor    ebx,ebx
c00058c5:	89 f0                	mov    eax,esi
c00058c7:	e8 b4 c4 ff ff       	call   c0001d80 <mem_set>
c00058cc:	80 7c 24 2c 01       	cmp    BYTE PTR [esp+0x2c],0x1
c00058d1:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00058d9:	0f 94 c3             	sete   bl
c00058dc:	4b                   	dec    ebx
c00058dd:	81 e3 00 00 00 ff    	and    ebx,0xff000000
c00058e3:	81 c3 f8 ff ff 00    	add    ebx,0xfffff8
c00058e9:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c00058ee:	75 21                	jne    c0005911 <f_mkfs+0x65c>
c00058f0:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c00058f5:	89 f0                	mov    eax,esi
c00058f7:	e8 6c c4 ff ff       	call   c0001d68 <st_dword>
c00058fc:	8d 46 04             	lea    eax,[esi+0x4]
c00058ff:	83 ca ff             	or     edx,0xffffffff
c0005902:	e8 61 c4 ff ff       	call   c0001d68 <st_dword>
c0005907:	8d 46 08             	lea    eax,[esi+0x8]
c000590a:	ba ff ff ff 0f       	mov    edx,0xfffffff
c000590f:	eb 04                	jmp    c0005915 <f_mkfs+0x660>
c0005911:	89 da                	mov    edx,ebx
c0005913:	89 f0                	mov    eax,esi
c0005915:	e8 4e c4 ff ff       	call   c0001d68 <st_dword>
c000591a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000591e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005922:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005926:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000592a:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c000592e:	76 08                	jbe    c0005938 <f_mkfs+0x683>
c0005930:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005934:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005938:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000593c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005940:	56                   	push   esi
c0005941:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0005945:	e8 c0 c3 ff ff       	call   c0001d0a <disk_write>
c000594a:	83 c4 10             	add    esp,0x10
c000594d:	85 c0                	test   eax,eax
c000594f:	0f 85 d4 00 00 00    	jne    c0005a29 <f_mkfs+0x774>
c0005955:	b9 00 02 00 00       	mov    ecx,0x200
c000595a:	31 d2                	xor    edx,edx
c000595c:	89 f0                	mov    eax,esi
c000595e:	e8 1d c4 ff ff       	call   c0001d80 <mem_set>
c0005963:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0005967:	01 4c 24 18          	add    DWORD PTR [esp+0x18],ecx
c000596b:	29 4c 24 14          	sub    DWORD PTR [esp+0x14],ecx
c000596f:	75 b1                	jne    c0005922 <f_mkfs+0x66d>
c0005971:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005975:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c000597d:	40                   	inc    eax
c000597e:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0005982:	0f 87 61 ff ff ff    	ja     c00058e9 <f_mkfs+0x634>
c0005988:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c000598d:	74 04                	je     c0005993 <f_mkfs+0x6de>
c000598f:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0005993:	89 fb                	mov    ebx,edi
c0005995:	3b 7c 24 08          	cmp    edi,DWORD PTR [esp+0x8]
c0005999:	76 04                	jbe    c000599f <f_mkfs+0x6ea>
c000599b:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000599f:	53                   	push   ebx
c00059a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00059a4:	56                   	push   esi
c00059a5:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00059a9:	e8 5c c3 ff ff       	call   c0001d0a <disk_write>
c00059ae:	83 c4 10             	add    esp,0x10
c00059b1:	85 c0                	test   eax,eax
c00059b3:	75 74                	jne    c0005a29 <f_mkfs+0x774>
c00059b5:	01 5c 24 18          	add    DWORD PTR [esp+0x18],ebx
c00059b9:	29 df                	sub    edi,ebx
c00059bb:	75 d6                	jne    c0005993 <f_mkfs+0x6de>
c00059bd:	b1 0c                	mov    cl,0xc
c00059bf:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c00059c4:	74 18                	je     c00059de <f_mkfs+0x729>
c00059c6:	b1 06                	mov    cl,0x6
c00059c8:	81 7c 24 34 ff ff 00 00 	cmp    DWORD PTR [esp+0x34],0xffff
c00059d0:	77 0c                	ja     c00059de <f_mkfs+0x729>
c00059d2:	80 7c 24 2c 02       	cmp    BYTE PTR [esp+0x2c],0x2
c00059d7:	0f 94 c1             	sete   cl
c00059da:	8d 4c 49 01          	lea    ecx,[ecx+ecx*2+0x1]
c00059de:	80 7c 24 2f 00       	cmp    BYTE PTR [esp+0x2f],0x0
c00059e3:	75 2d                	jne    c0005a12 <f_mkfs+0x75d>
c00059e5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00059e9:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c00059f1:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00059f5:	0f b6 c9             	movzx  ecx,cl
c00059f8:	83 ec 0c             	sub    esp,0xc
c00059fb:	56                   	push   esi
c00059fc:	8d 54 24 48          	lea    edx,[esp+0x48]
c0005a00:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005a04:	e8 4c d3 ff ff       	call   c0002d55 <create_partition>
c0005a09:	83 c4 10             	add    esp,0x10
c0005a0c:	89 c7                	mov    edi,eax
c0005a0e:	85 c0                	test   eax,eax
c0005a10:	75 2e                	jne    c0005a40 <f_mkfs+0x78b>
c0005a12:	31 ff                	xor    edi,edi
c0005a14:	50                   	push   eax
c0005a15:	6a 00                	push   0x0
c0005a17:	6a 00                	push   0x0
c0005a19:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0005a1d:	e8 fe c2 ff ff       	call   c0001d20 <disk_ioctl>
c0005a22:	83 c4 10             	add    esp,0x10
c0005a25:	85 c0                	test   eax,eax
c0005a27:	74 17                	je     c0005a40 <f_mkfs+0x78b>
c0005a29:	85 ed                	test   ebp,ebp
c0005a2b:	75 0c                	jne    c0005a39 <f_mkfs+0x784>
c0005a2d:	83 ec 0c             	sub    esp,0xc
c0005a30:	56                   	push   esi
c0005a31:	e8 6e 00 00 00       	call   c0005aa4 <ff_memfree>
c0005a36:	83 c4 10             	add    esp,0x10
c0005a39:	bf 01 00 00 00       	mov    edi,0x1
c0005a3e:	eb 40                	jmp    c0005a80 <f_mkfs+0x7cb>
c0005a40:	85 ed                	test   ebp,ebp
c0005a42:	75 3c                	jne    c0005a80 <f_mkfs+0x7cb>
c0005a44:	83 ec 0c             	sub    esp,0xc
c0005a47:	56                   	push   esi
c0005a48:	e8 57 00 00 00       	call   c0005aa4 <ff_memfree>
c0005a4d:	83 c4 10             	add    esp,0x10
c0005a50:	eb 2e                	jmp    c0005a80 <f_mkfs+0x7cb>
c0005a52:	80 7c 24 2e 00       	cmp    BYTE PTR [esp+0x2e],0x0
c0005a57:	0f 85 56 fb ff ff    	jne    c00055b3 <f_mkfs+0x2fe>
c0005a5d:	e9 2f fc ff ff       	jmp    c0005691 <f_mkfs+0x3dc>
c0005a62:	80 7c 24 2e 00       	cmp    BYTE PTR [esp+0x2e],0x0
c0005a67:	0f 85 4c fb ff ff    	jne    c00055b9 <f_mkfs+0x304>
c0005a6d:	89 cf                	mov    edi,ecx
c0005a6f:	81 f9 80 00 00 00    	cmp    ecx,0x80
c0005a75:	0f 86 49 fa ff ff    	jbe    c00054c4 <f_mkfs+0x20f>
c0005a7b:	e9 11 fc ff ff       	jmp    c0005691 <f_mkfs+0x3dc>
c0005a80:	83 c4 4c             	add    esp,0x4c
c0005a83:	89 f8                	mov    eax,edi
c0005a85:	5b                   	pop    ebx
c0005a86:	5e                   	pop    esi
c0005a87:	5f                   	pop    edi
c0005a88:	5d                   	pop    ebp
c0005a89:	c3                   	ret    
c0005a8a:	66 90                	xchg   ax,ax

c0005a8c <ff_memalloc>:
c0005a8c:	83 ec 0c             	sub    esp,0xc
c0005a8f:	83 ec 0c             	sub    esp,0xc
c0005a92:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005a96:	e8 c6 23 00 00       	call   c0007e61 <malloc>
c0005a9b:	83 c4 10             	add    esp,0x10
c0005a9e:	83 c4 0c             	add    esp,0xc
c0005aa1:	c3                   	ret    
c0005aa2:	66 90                	xchg   ax,ax

c0005aa4 <ff_memfree>:
c0005aa4:	83 ec 0c             	sub    esp,0xc
c0005aa7:	83 ec 0c             	sub    esp,0xc
c0005aaa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005aae:	e8 be 23 00 00       	call   c0007e71 <free>
c0005ab3:	83 c4 10             	add    esp,0x10
c0005ab6:	90                   	nop
c0005ab7:	83 c4 0c             	add    esp,0xc
c0005aba:	c3                   	ret    
c0005abb:	90                   	nop

c0005abc <ff_uni2oem>:
c0005abc:	83 ec 14             	sub    esp,0x14
c0005abf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005ac3:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005ac7:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005ace:	c7 44 24 0c c0 d2 01 c0 	mov    DWORD PTR [esp+0xc],0xc001d2c0
c0005ad6:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c0005adb:	77 0b                	ja     c0005ae8 <ff_uni2oem+0x2c>
c0005add:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005ae1:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005ae6:	eb 68                	jmp    c0005b50 <ff_uni2oem+0x94>
c0005ae8:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c0005af0:	77 5e                	ja     c0005b50 <ff_uni2oem+0x94>
c0005af2:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c0005af8:	75 56                	jne    c0005b50 <ff_uni2oem+0x94>
c0005afa:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005b01:	eb 0d                	jmp    c0005b10 <ff_uni2oem+0x54>
c0005b03:	90                   	nop
c0005b04:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005b09:	40                   	inc    eax
c0005b0a:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005b0f:	90                   	nop
c0005b10:	66 83 7c 24 12 7f    	cmp    WORD PTR [esp+0x12],0x7f
c0005b16:	77 24                	ja     c0005b3c <ff_uni2oem+0x80>
c0005b18:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005b1d:	25 ff ff 00 00       	and    eax,0xffff
c0005b22:	01 c0                	add    eax,eax
c0005b24:	89 c2                	mov    edx,eax
c0005b26:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005b2a:	01 d0                	add    eax,edx
c0005b2c:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005b2f:	25 ff ff 00 00       	and    eax,0xffff
c0005b34:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0005b38:	75 ca                	jne    c0005b04 <ff_uni2oem+0x48>
c0005b3a:	66 90                	xchg   ax,ax
c0005b3c:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005b41:	83 e8 80             	sub    eax,0xffffff80
c0005b44:	25 ff 00 00 00       	and    eax,0xff
c0005b49:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005b4e:	66 90                	xchg   ax,ax
c0005b50:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005b55:	83 c4 14             	add    esp,0x14
c0005b58:	c3                   	ret    
c0005b59:	8d 76 00             	lea    esi,[esi+0x0]

c0005b5c <ff_oem2uni>:
c0005b5c:	83 ec 18             	sub    esp,0x18
c0005b5f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005b63:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005b67:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0005b6c:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005b70:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0005b77:	c7 44 24 10 c0 d2 01 c0 	mov    DWORD PTR [esp+0x10],0xc001d2c0
c0005b7f:	66 83 7c 24 04 7f    	cmp    WORD PTR [esp+0x4],0x7f
c0005b85:	77 0d                	ja     c0005b94 <ff_oem2uni+0x38>
c0005b87:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005b8b:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005b90:	eb 36                	jmp    c0005bc8 <ff_oem2uni+0x6c>
c0005b92:	66 90                	xchg   ax,ax
c0005b94:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c0005b9a:	75 2c                	jne    c0005bc8 <ff_oem2uni+0x6c>
c0005b9c:	66 81 7c 24 04 ff 00 	cmp    WORD PTR [esp+0x4],0xff
c0005ba3:	77 23                	ja     c0005bc8 <ff_oem2uni+0x6c>
c0005ba5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005ba9:	25 ff ff 00 00       	and    eax,0xffff
c0005bae:	05 80 ff ff 7f       	add    eax,0x7fffff80
c0005bb3:	01 c0                	add    eax,eax
c0005bb5:	89 c2                	mov    edx,eax
c0005bb7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005bbb:	01 d0                	add    eax,edx
c0005bbd:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005bc0:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005bc5:	8d 76 00             	lea    esi,[esi+0x0]
c0005bc8:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0005bcd:	83 c4 18             	add    esp,0x18
c0005bd0:	c3                   	ret    
c0005bd1:	8d 76 00             	lea    esi,[esi+0x0]

c0005bd4 <ff_wtoupper>:
c0005bd4:	83 ec 10             	sub    esp,0x10
c0005bd7:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0005bdf:	0f 87 77 01 00 00    	ja     c0005d5c <ff_wtoupper+0x188>
c0005be5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005be9:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005bee:	66 81 7c 24 0a ff 0f 	cmp    WORD PTR [esp+0xa],0xfff
c0005bf5:	77 09                	ja     c0005c00 <ff_wtoupper+0x2c>
c0005bf7:	b8 c0 d0 01 c0       	mov    eax,0xc001d0c0
c0005bfc:	eb 0a                	jmp    c0005c08 <ff_wtoupper+0x34>
c0005bfe:	66 90                	xchg   ax,ax
c0005c00:	b8 00 d0 01 c0       	mov    eax,0xc001d000
c0005c05:	8d 76 00             	lea    esi,[esi+0x0]
c0005c08:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005c0c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005c10:	8d 50 02             	lea    edx,[eax+0x2]
c0005c13:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c17:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005c1a:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0005c1f:	66 83 7c 24 08 00    	cmp    WORD PTR [esp+0x8],0x0
c0005c25:	0f 84 21 01 00 00    	je     c0005d4c <ff_wtoupper+0x178>
c0005c2b:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005c30:	66 3b 44 24 08       	cmp    ax,WORD PTR [esp+0x8]
c0005c35:	0f 82 11 01 00 00    	jb     c0005d4c <ff_wtoupper+0x178>
c0005c3b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005c3f:	8d 50 02             	lea    edx,[eax+0x2]
c0005c42:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c46:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005c49:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005c4e:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0005c53:	66 c1 e8 08          	shr    ax,0x8
c0005c57:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0005c5c:	66 81 64 24 06 ff 00 	and    WORD PTR [esp+0x6],0xff
c0005c63:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005c68:	31 d2                	xor    edx,edx
c0005c6a:	66 89 c2             	mov    dx,ax
c0005c6d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c71:	31 c9                	xor    ecx,ecx
c0005c73:	66 89 c1             	mov    cx,ax
c0005c76:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0005c7b:	25 ff ff 00 00       	and    eax,0xffff
c0005c80:	01 c8                	add    eax,ecx
c0005c82:	39 c2                	cmp    edx,eax
c0005c84:	0f 8d 9a 00 00 00    	jge    c0005d24 <ff_wtoupper+0x150>
c0005c8a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005c8e:	25 ff ff 00 00       	and    eax,0xffff
c0005c93:	83 f8 08             	cmp    eax,0x8
c0005c96:	0f 87 ac 00 00 00    	ja     c0005d48 <ff_wtoupper+0x174>
c0005c9c:	8b 04 85 c0 cf 01 c0 	mov    eax,DWORD PTR [eax*4-0x3ffe3040]
c0005ca3:	ff e0                	jmp    eax
c0005ca5:	8d 76 00             	lea    esi,[esi+0x0]
c0005ca8:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005cad:	31 d2                	xor    edx,edx
c0005caf:	66 89 c2             	mov    dx,ax
c0005cb2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005cb6:	25 ff ff 00 00       	and    eax,0xffff
c0005cbb:	29 c2                	sub    edx,eax
c0005cbd:	89 d0                	mov    eax,edx
c0005cbf:	01 c0                	add    eax,eax
c0005cc1:	89 c2                	mov    edx,eax
c0005cc3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005cc7:	01 d0                	add    eax,edx
c0005cc9:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005ccc:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005cd1:	eb 4d                	jmp    c0005d20 <ff_wtoupper+0x14c>
c0005cd3:	90                   	nop
c0005cd4:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005cd9:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0005cdd:	83 e0 01             	and    eax,0x1
c0005ce0:	66 29 44 24 0a       	sub    WORD PTR [esp+0xa],ax
c0005ce5:	eb 39                	jmp    c0005d20 <ff_wtoupper+0x14c>
c0005ce7:	90                   	nop
c0005ce8:	66 83 6c 24 0a 10    	sub    WORD PTR [esp+0xa],0x10
c0005cee:	eb 30                	jmp    c0005d20 <ff_wtoupper+0x14c>
c0005cf0:	66 83 6c 24 0a 20    	sub    WORD PTR [esp+0xa],0x20
c0005cf6:	eb 28                	jmp    c0005d20 <ff_wtoupper+0x14c>
c0005cf8:	66 83 6c 24 0a 30    	sub    WORD PTR [esp+0xa],0x30
c0005cfe:	eb 20                	jmp    c0005d20 <ff_wtoupper+0x14c>
c0005d00:	66 83 6c 24 0a 1a    	sub    WORD PTR [esp+0xa],0x1a
c0005d06:	eb 18                	jmp    c0005d20 <ff_wtoupper+0x14c>
c0005d08:	66 83 44 24 0a 08    	add    WORD PTR [esp+0xa],0x8
c0005d0e:	eb 10                	jmp    c0005d20 <ff_wtoupper+0x14c>
c0005d10:	66 83 6c 24 0a 50    	sub    WORD PTR [esp+0xa],0x50
c0005d16:	eb 08                	jmp    c0005d20 <ff_wtoupper+0x14c>
c0005d18:	66 81 6c 24 0a 60 1c 	sub    WORD PTR [esp+0xa],0x1c60
c0005d1f:	90                   	nop
c0005d20:	eb 26                	jmp    c0005d48 <ff_wtoupper+0x174>
c0005d22:	66 90                	xchg   ax,ax
c0005d24:	66 83 7c 24 04 00    	cmp    WORD PTR [esp+0x4],0x0
c0005d2a:	0f 85 dc fe ff ff    	jne    c0005c0c <ff_wtoupper+0x38>
c0005d30:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0005d35:	25 ff ff 00 00       	and    eax,0xffff
c0005d3a:	01 c0                	add    eax,eax
c0005d3c:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0005d40:	e9 c7 fe ff ff       	jmp    c0005c0c <ff_wtoupper+0x38>
c0005d45:	8d 76 00             	lea    esi,[esi+0x0]
c0005d48:	90                   	nop
c0005d49:	8d 76 00             	lea    esi,[esi+0x0]
c0005d4c:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005d51:	25 ff ff 00 00       	and    eax,0xffff
c0005d56:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005d5a:	66 90                	xchg   ax,ax
c0005d5c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005d60:	83 c4 10             	add    esp,0x10
c0005d63:	c3                   	ret    

c0005d64 <utf2ucs>:
c0005d64:	57                   	push   edi
c0005d65:	56                   	push   esi
c0005d66:	53                   	push   ebx
c0005d67:	89 d7                	mov    edi,edx
c0005d69:	47                   	inc    edi
c0005d6a:	8a 5f ff             	mov    bl,BYTE PTR [edi-0x1]
c0005d6d:	0f be cb             	movsx  ecx,bl
c0005d70:	89 ce                	mov    esi,ecx
c0005d72:	c1 fe 08             	sar    esi,0x8
c0005d75:	89 f2                	mov    edx,esi
c0005d77:	88 10                	mov    BYTE PTR [eax],dl
c0005d79:	83 c0 02             	add    eax,0x2
c0005d7c:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c0005d7f:	85 c9                	test   ecx,ecx
c0005d81:	75 e6                	jne    c0005d69 <utf2ucs+0x5>
c0005d83:	5b                   	pop    ebx
c0005d84:	5e                   	pop    esi
c0005d85:	5f                   	pop    edi
c0005d86:	c3                   	ret    

c0005d87 <ucs2utfn>:
c0005d87:	57                   	push   edi
c0005d88:	56                   	push   esi
c0005d89:	53                   	push   ebx
c0005d8a:	89 cb                	mov    ebx,ecx
c0005d8c:	d1 eb                	shr    ebx,1
c0005d8e:	83 f9 01             	cmp    ecx,0x1
c0005d91:	76 17                	jbe    c0005daa <ucs2utfn+0x23>
c0005d93:	8d 7b ff             	lea    edi,[ebx-0x1]
c0005d96:	0f be 32             	movsx  esi,BYTE PTR [edx]
c0005d99:	c1 e6 08             	shl    esi,0x8
c0005d9c:	8d 4a 02             	lea    ecx,[edx+0x2]
c0005d9f:	0f be 52 01          	movsx  edx,BYTE PTR [edx+0x1]
c0005da3:	09 f2                	or     edx,esi
c0005da5:	83 fa 3b             	cmp    edx,0x3b
c0005da8:	75 40                	jne    c0005dea <ucs2utfn+0x63>
c0005daa:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0005dad:	5b                   	pop    ebx
c0005dae:	5e                   	pop    esi
c0005daf:	5f                   	pop    edi
c0005db0:	c3                   	ret    
c0005db1:	81 fa ff 07 00 00    	cmp    edx,0x7ff
c0005db7:	7f 3d                	jg     c0005df6 <ucs2utfn+0x6f>
c0005db9:	89 d6                	mov    esi,edx
c0005dbb:	c1 fe 06             	sar    esi,0x6
c0005dbe:	83 ce c0             	or     esi,0xffffffc0
c0005dc1:	89 f3                	mov    ebx,esi
c0005dc3:	88 18                	mov    BYTE PTR [eax],bl
c0005dc5:	83 e2 3f             	and    edx,0x3f
c0005dc8:	83 ca 80             	or     edx,0xffffff80
c0005dcb:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c0005dce:	8d 40 02             	lea    eax,[eax+0x2]
c0005dd1:	85 ff                	test   edi,edi
c0005dd3:	74 d5                	je     c0005daa <ucs2utfn+0x23>
c0005dd5:	4f                   	dec    edi
c0005dd6:	0f be 11             	movsx  edx,BYTE PTR [ecx]
c0005dd9:	c1 e2 08             	shl    edx,0x8
c0005ddc:	83 c1 02             	add    ecx,0x2
c0005ddf:	0f be 71 ff          	movsx  esi,BYTE PTR [ecx-0x1]
c0005de3:	09 f2                	or     edx,esi
c0005de5:	83 fa 3b             	cmp    edx,0x3b
c0005de8:	74 c0                	je     c0005daa <ucs2utfn+0x23>
c0005dea:	83 fa 7f             	cmp    edx,0x7f
c0005ded:	7f c2                	jg     c0005db1 <ucs2utfn+0x2a>
c0005def:	88 10                	mov    BYTE PTR [eax],dl
c0005df1:	8d 40 01             	lea    eax,[eax+0x1]
c0005df4:	eb db                	jmp    c0005dd1 <ucs2utfn+0x4a>
c0005df6:	89 d6                	mov    esi,edx
c0005df8:	c1 fe 0c             	sar    esi,0xc
c0005dfb:	83 ce e0             	or     esi,0xffffffe0
c0005dfe:	89 f3                	mov    ebx,esi
c0005e00:	88 18                	mov    BYTE PTR [eax],bl
c0005e02:	89 d6                	mov    esi,edx
c0005e04:	c1 fe 06             	sar    esi,0x6
c0005e07:	83 e6 3f             	and    esi,0x3f
c0005e0a:	83 ce 80             	or     esi,0xffffff80
c0005e0d:	89 f3                	mov    ebx,esi
c0005e0f:	88 58 01             	mov    BYTE PTR [eax+0x1],bl
c0005e12:	83 e2 3f             	and    edx,0x3f
c0005e15:	83 ca 80             	or     edx,0xffffff80
c0005e18:	88 50 02             	mov    BYTE PTR [eax+0x2],dl
c0005e1b:	8d 40 03             	lea    eax,[eax+0x3]
c0005e1e:	eb b1                	jmp    c0005dd1 <ucs2utfn+0x4a>

c0005e20 <isjoliet>:
c0005e20:	80 38 25             	cmp    BYTE PTR [eax],0x25
c0005e23:	74 06                	je     c0005e2b <isjoliet+0xb>
c0005e25:	b8 00 00 00 00       	mov    eax,0x0
c0005e2a:	c3                   	ret    
c0005e2b:	80 78 01 2f          	cmp    BYTE PTR [eax+0x1],0x2f
c0005e2f:	74 06                	je     c0005e37 <isjoliet+0x17>
c0005e31:	b8 00 00 00 00       	mov    eax,0x0
c0005e36:	c3                   	ret    
c0005e37:	8a 40 02             	mov    al,BYTE PTR [eax+0x2]
c0005e3a:	3c 43                	cmp    al,0x43
c0005e3c:	74 0f                	je     c0005e4d <isjoliet+0x2d>
c0005e3e:	3c 45                	cmp    al,0x45
c0005e40:	74 11                	je     c0005e53 <isjoliet+0x33>
c0005e42:	3c 40                	cmp    al,0x40
c0005e44:	0f 94 c0             	sete   al
c0005e47:	25 ff 00 00 00       	and    eax,0xff
c0005e4c:	c3                   	ret    
c0005e4d:	b8 02 00 00 00       	mov    eax,0x2
c0005e52:	c3                   	ret    
c0005e53:	b8 03 00 00 00       	mov    eax,0x3
c0005e58:	c3                   	ret    

c0005e59 <htohl_32>:
c0005e59:	31 d2                	xor    edx,edx
c0005e5b:	8a 50 01             	mov    dl,BYTE PTR [eax+0x1]
c0005e5e:	c1 e2 08             	shl    edx,0x8
c0005e61:	31 c9                	xor    ecx,ecx
c0005e63:	8a 48 02             	mov    cl,BYTE PTR [eax+0x2]
c0005e66:	c1 e1 10             	shl    ecx,0x10
c0005e69:	09 ca                	or     edx,ecx
c0005e6b:	31 c9                	xor    ecx,ecx
c0005e6d:	8a 08                	mov    cl,BYTE PTR [eax]
c0005e6f:	09 ca                	or     edx,ecx
c0005e71:	31 c9                	xor    ecx,ecx
c0005e73:	8a 48 03             	mov    cl,BYTE PTR [eax+0x3]
c0005e76:	89 c8                	mov    eax,ecx
c0005e78:	c1 e0 18             	shl    eax,0x18
c0005e7b:	09 d0                	or     eax,edx
c0005e7d:	c3                   	ret    

c0005e7e <iso_733>:
c0005e7e:	e8 d6 ff ff ff       	call   c0005e59 <htohl_32>
c0005e83:	c3                   	ret    

c0005e84 <bclear_cache>:
c0005e84:	8d 48 40             	lea    ecx,[eax+0x40]
c0005e87:	8b 10                	mov    edx,DWORD PTR [eax]
c0005e89:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c0005e8f:	83 c0 04             	add    eax,0x4
c0005e92:	39 c8                	cmp    eax,ecx
c0005e94:	75 f1                	jne    c0005e87 <bclear_cache+0x3>
c0005e96:	c3                   	ret    

c0005e97 <bgrad_cache>:
c0005e97:	83 fa 0e             	cmp    edx,0xe
c0005e9a:	77 1c                	ja     c0005eb8 <bgrad_cache+0x21>
c0005e9c:	56                   	push   esi
c0005e9d:	53                   	push   ebx
c0005e9e:	8d 14 90             	lea    edx,[eax+edx*4]
c0005ea1:	8b 32                	mov    esi,DWORD PTR [edx]
c0005ea3:	8d 58 3c             	lea    ebx,[eax+0x3c]
c0005ea6:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0005ea9:	89 0a                	mov    DWORD PTR [edx],ecx
c0005eab:	83 c2 04             	add    edx,0x4
c0005eae:	39 da                	cmp    edx,ebx
c0005eb0:	75 f4                	jne    c0005ea6 <bgrad_cache+0xf>
c0005eb2:	89 70 3c             	mov    DWORD PTR [eax+0x3c],esi
c0005eb5:	5b                   	pop    ebx
c0005eb6:	5e                   	pop    esi
c0005eb7:	c3                   	ret    
c0005eb8:	c3                   	ret    

c0005eb9 <bclear>:
c0005eb9:	b8 c0 07 02 c0       	mov    eax,0xc00207c0
c0005ebe:	e8 c1 ff ff ff       	call   c0005e84 <bclear_cache>
c0005ec3:	b8 00 08 02 c0       	mov    eax,0xc0020800
c0005ec8:	e8 b7 ff ff ff       	call   c0005e84 <bclear_cache>
c0005ecd:	c3                   	ret    

c0005ece <iso_break_all>:
c0005ece:	b8 d0 fe 01 c0       	mov    eax,0xc001fed0
c0005ed3:	ba 10 08 02 c0       	mov    edx,0xc0020810
c0005ed8:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0005ede:	05 94 00 00 00       	add    eax,0x94
c0005ee3:	39 d0                	cmp    eax,edx
c0005ee5:	75 f1                	jne    c0005ed8 <iso_break_all+0xa>
c0005ee7:	c3                   	ret    

c0005ee8 <ucscompare>:
c0005ee8:	55                   	push   ebp
c0005ee9:	57                   	push   edi
c0005eea:	56                   	push   esi
c0005eeb:	53                   	push   ebx
c0005eec:	83 ec 1c             	sub    esp,0x1c
c0005eef:	89 d7                	mov    edi,edx
c0005ef1:	85 c9                	test   ecx,ecx
c0005ef3:	0f 8e ab 00 00 00    	jle    c0005fa4 <ucscompare+0xbc>
c0005ef9:	89 c5                	mov    ebp,eax
c0005efb:	0f be 00             	movsx  eax,BYTE PTR [eax]
c0005efe:	c1 e0 08             	shl    eax,0x8
c0005f01:	0f be 55 01          	movsx  edx,BYTE PTR [ebp+0x1]
c0005f05:	09 d0                	or     eax,edx
c0005f07:	0f be 37             	movsx  esi,BYTE PTR [edi]
c0005f0a:	c1 e6 08             	shl    esi,0x8
c0005f0d:	0f be 57 01          	movsx  edx,BYTE PTR [edi+0x1]
c0005f11:	09 d6                	or     esi,edx
c0005f13:	83 f8 3b             	cmp    eax,0x3b
c0005f16:	0f 84 92 00 00 00    	je     c0005fae <ucscompare+0xc6>
c0005f1c:	49                   	dec    ecx
c0005f1d:	83 e1 fe             	and    ecx,0xfffffffe
c0005f20:	83 c1 02             	add    ecx,0x2
c0005f23:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005f27:	bb 00 00 00 00       	mov    ebx,0x0
c0005f2c:	83 ec 0c             	sub    esp,0xc
c0005f2f:	50                   	push   eax
c0005f30:	e8 bb a9 ff ff       	call   c00008f0 <tolower>
c0005f35:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005f39:	89 34 24             	mov    DWORD PTR [esp],esi
c0005f3c:	e8 af a9 ff ff       	call   c00008f0 <tolower>
c0005f41:	83 c4 10             	add    esp,0x10
c0005f44:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c0005f48:	75 6e                	jne    c0005fb8 <ucscompare+0xd0>
c0005f4a:	83 c3 02             	add    ebx,0x2
c0005f4d:	3b 5c 24 0c          	cmp    ebx,DWORD PTR [esp+0xc]
c0005f51:	74 26                	je     c0005f79 <ucscompare+0x91>
c0005f53:	0f be 44 1d 00       	movsx  eax,BYTE PTR [ebp+ebx*1+0x0]
c0005f58:	c1 e0 08             	shl    eax,0x8
c0005f5b:	0f be 54 1d 01       	movsx  edx,BYTE PTR [ebp+ebx*1+0x1]
c0005f60:	09 d0                	or     eax,edx
c0005f62:	0f be 34 1f          	movsx  esi,BYTE PTR [edi+ebx*1]
c0005f66:	c1 e6 08             	shl    esi,0x8
c0005f69:	0f be 54 1f 01       	movsx  edx,BYTE PTR [edi+ebx*1+0x1]
c0005f6e:	09 d6                	or     esi,edx
c0005f70:	83 f8 3b             	cmp    eax,0x3b
c0005f73:	75 b7                	jne    c0005f2c <ucscompare+0x44>
c0005f75:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0005f79:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0005f7d:	0f be 04 0f          	movsx  eax,BYTE PTR [edi+ecx*1]
c0005f81:	c1 e0 08             	shl    eax,0x8
c0005f84:	0f be 54 0f 01       	movsx  edx,BYTE PTR [edi+ecx*1+0x1]
c0005f89:	09 d0                	or     eax,edx
c0005f8b:	83 f8 2f             	cmp    eax,0x2f
c0005f8e:	74 2f                	je     c0005fbf <ucscompare+0xd7>
c0005f90:	85 c0                	test   eax,eax
c0005f92:	0f 95 c0             	setne  al
c0005f95:	25 ff 00 00 00       	and    eax,0xff
c0005f9a:	f7 d8                	neg    eax
c0005f9c:	83 c4 1c             	add    esp,0x1c
c0005f9f:	5b                   	pop    ebx
c0005fa0:	5e                   	pop    esi
c0005fa1:	5f                   	pop    edi
c0005fa2:	5d                   	pop    ebp
c0005fa3:	c3                   	ret    
c0005fa4:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0005fac:	eb cb                	jmp    c0005f79 <ucscompare+0x91>
c0005fae:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0005fb6:	eb c1                	jmp    c0005f79 <ucscompare+0x91>
c0005fb8:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0005fbd:	eb dd                	jmp    c0005f9c <ucscompare+0xb4>
c0005fbf:	b8 00 00 00 00       	mov    eax,0x0
c0005fc4:	eb d6                	jmp    c0005f9c <ucscompare+0xb4>

c0005fc6 <fncompare>:
c0005fc6:	55                   	push   ebp
c0005fc7:	57                   	push   edi
c0005fc8:	56                   	push   esi
c0005fc9:	53                   	push   ebx
c0005fca:	83 ec 1c             	sub    esp,0x1c
c0005fcd:	89 cd                	mov    ebp,ecx
c0005fcf:	85 d2                	test   edx,edx
c0005fd1:	7e 71                	jle    c0006044 <fncompare+0x7e>
c0005fd3:	89 c7                	mov    edi,eax
c0005fd5:	89 d6                	mov    esi,edx
c0005fd7:	8a 00                	mov    al,BYTE PTR [eax]
c0005fd9:	3c 3b                	cmp    al,0x3b
c0005fdb:	74 6e                	je     c000604b <fncompare+0x85>
c0005fdd:	bb 00 00 00 00       	mov    ebx,0x0
c0005fe2:	eb 32                	jmp    c0006016 <fncompare+0x50>
c0005fe4:	83 ec 0c             	sub    esp,0xc
c0005fe7:	0f be c0             	movsx  eax,al
c0005fea:	50                   	push   eax
c0005feb:	e8 00 a9 ff ff       	call   c00008f0 <tolower>
c0005ff0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0005ff4:	0f be 44 1d 00       	movsx  eax,BYTE PTR [ebp+ebx*1+0x0]
c0005ff9:	89 04 24             	mov    DWORD PTR [esp],eax
c0005ffc:	e8 ef a8 ff ff       	call   c00008f0 <tolower>
c0006001:	83 c4 10             	add    esp,0x10
c0006004:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0006008:	75 48                	jne    c0006052 <fncompare+0x8c>
c000600a:	43                   	inc    ebx
c000600b:	39 de                	cmp    esi,ebx
c000600d:	74 19                	je     c0006028 <fncompare+0x62>
c000600f:	8a 04 1f             	mov    al,BYTE PTR [edi+ebx*1]
c0006012:	3c 3b                	cmp    al,0x3b
c0006014:	74 12                	je     c0006028 <fncompare+0x62>
c0006016:	3c 2e                	cmp    al,0x2e
c0006018:	75 ca                	jne    c0005fe4 <fncompare+0x1e>
c000601a:	8d 56 ff             	lea    edx,[esi-0x1]
c000601d:	39 da                	cmp    edx,ebx
c000601f:	74 07                	je     c0006028 <fncompare+0x62>
c0006021:	80 7c 1f 01 3b       	cmp    BYTE PTR [edi+ebx*1+0x1],0x3b
c0006026:	75 bc                	jne    c0005fe4 <fncompare+0x1e>
c0006028:	8a 44 1d 00          	mov    al,BYTE PTR [ebp+ebx*1+0x0]
c000602c:	3c 2f                	cmp    al,0x2f
c000602e:	74 29                	je     c0006059 <fncompare+0x93>
c0006030:	84 c0                	test   al,al
c0006032:	0f 95 c0             	setne  al
c0006035:	25 ff 00 00 00       	and    eax,0xff
c000603a:	f7 d8                	neg    eax
c000603c:	83 c4 1c             	add    esp,0x1c
c000603f:	5b                   	pop    ebx
c0006040:	5e                   	pop    esi
c0006041:	5f                   	pop    edi
c0006042:	5d                   	pop    ebp
c0006043:	c3                   	ret    
c0006044:	bb 00 00 00 00       	mov    ebx,0x0
c0006049:	eb dd                	jmp    c0006028 <fncompare+0x62>
c000604b:	bb 00 00 00 00       	mov    ebx,0x0
c0006050:	eb d6                	jmp    c0006028 <fncompare+0x62>
c0006052:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0006057:	eb e3                	jmp    c000603c <fncompare+0x76>
c0006059:	b8 00 00 00 00       	mov    eax,0x0
c000605e:	eb dc                	jmp    c000603c <fncompare+0x76>

c0006060 <isoReadDiscSector>:
c0006060:	83 ec 0c             	sub    esp,0xc
c0006063:	0f be 05 c0 f9 01 c0 	movsx  eax,BYTE PTR ds:0xc001f9c0
c000606a:	50                   	push   eax
c000606b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000606f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0006073:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0006077:	e8 04 19 01 00       	call   c0017980 <isoReadDiscSectorHelper>
c000607c:	83 c4 1c             	add    esp,0x1c
c000607f:	c3                   	ret    

c0006080 <bread_cache>:
c0006080:	55                   	push   ebp
c0006081:	57                   	push   edi
c0006082:	56                   	push   esi
c0006083:	53                   	push   ebx
c0006084:	83 ec 0c             	sub    esp,0xc
c0006087:	89 c6                	mov    esi,eax
c0006089:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000608c:	3b 10                	cmp    edx,DWORD PTR [eax]
c000608e:	74 6a                	je     c00060fa <bread_cache+0x7a>
c0006090:	89 d7                	mov    edi,edx
c0006092:	ba 0e 00 00 00       	mov    edx,0xe
c0006097:	8b 04 96             	mov    eax,DWORD PTR [esi+edx*4]
c000609a:	39 38                	cmp    DWORD PTR [eax],edi
c000609c:	74 61                	je     c00060ff <bread_cache+0x7f>
c000609e:	4a                   	dec    edx
c000609f:	83 fa ff             	cmp    edx,0xffffffff
c00060a2:	75 f3                	jne    c0006097 <bread_cache+0x17>
c00060a4:	8b 06                	mov    eax,DWORD PTR [esi]
c00060a6:	83 38 ff             	cmp    DWORD PTR [eax],0xffffffff
c00060a9:	74 69                	je     c0006114 <bread_cache+0x94>
c00060ab:	bb 01 00 00 00       	mov    ebx,0x1
c00060b0:	8b 04 9e             	mov    eax,DWORD PTR [esi+ebx*4]
c00060b3:	83 38 ff             	cmp    DWORD PTR [eax],0xffffffff
c00060b6:	74 0b                	je     c00060c3 <bread_cache+0x43>
c00060b8:	43                   	inc    ebx
c00060b9:	83 fb 10             	cmp    ebx,0x10
c00060bc:	75 f2                	jne    c00060b0 <bread_cache+0x30>
c00060be:	bb 00 00 00 00       	mov    ebx,0x0
c00060c3:	8d 2c 9e             	lea    ebp,[esi+ebx*4]
c00060c6:	83 ec 04             	sub    esp,0x4
c00060c9:	6a 01                	push   0x1
c00060cb:	57                   	push   edi
c00060cc:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00060cf:	83 c0 04             	add    eax,0x4
c00060d2:	50                   	push   eax
c00060d3:	e8 88 ff ff ff       	call   c0006060 <isoReadDiscSector>
c00060d8:	83 c4 10             	add    esp,0x10
c00060db:	85 c0                	test   eax,eax
c00060dd:	78 2e                	js     c000610d <bread_cache+0x8d>
c00060df:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00060e2:	89 38                	mov    DWORD PTR [eax],edi
c00060e4:	89 da                	mov    edx,ebx
c00060e6:	89 f0                	mov    eax,esi
c00060e8:	e8 aa fd ff ff       	call   c0005e97 <bgrad_cache>
c00060ed:	b8 0f 00 00 00       	mov    eax,0xf
c00060f2:	83 c4 0c             	add    esp,0xc
c00060f5:	5b                   	pop    ebx
c00060f6:	5e                   	pop    esi
c00060f7:	5f                   	pop    edi
c00060f8:	5d                   	pop    ebp
c00060f9:	c3                   	ret    
c00060fa:	ba 0f 00 00 00       	mov    edx,0xf
c00060ff:	89 f0                	mov    eax,esi
c0006101:	e8 91 fd ff ff       	call   c0005e97 <bgrad_cache>
c0006106:	b8 0f 00 00 00       	mov    eax,0xf
c000610b:	eb e5                	jmp    c00060f2 <bread_cache+0x72>
c000610d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0006112:	eb de                	jmp    c00060f2 <bread_cache+0x72>
c0006114:	bb 00 00 00 00       	mov    ebx,0x0
c0006119:	eb a8                	jmp    c00060c3 <bread_cache+0x43>

c000611b <biread>:
c000611b:	83 ec 0c             	sub    esp,0xc
c000611e:	89 c2                	mov    edx,eax
c0006120:	b8 00 08 02 c0       	mov    eax,0xc0020800
c0006125:	e8 56 ff ff ff       	call   c0006080 <bread_cache>
c000612a:	83 c4 0c             	add    esp,0xc
c000612d:	c3                   	ret    

c000612e <bdread>:
c000612e:	83 ec 0c             	sub    esp,0xc
c0006131:	89 c2                	mov    edx,eax
c0006133:	b8 c0 07 02 c0       	mov    eax,0xc00207c0
c0006138:	e8 43 ff ff ff       	call   c0006080 <bread_cache>
c000613d:	83 c4 0c             	add    esp,0xc
c0006140:	c3                   	ret    

c0006141 <strnicmp>:
c0006141:	55                   	push   ebp
c0006142:	57                   	push   edi
c0006143:	56                   	push   esi
c0006144:	53                   	push   ebx
c0006145:	83 ec 0c             	sub    esp,0xc
c0006148:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000614c:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0006150:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0006154:	85 ff                	test   edi,edi
c0006156:	74 51                	je     c00061a9 <strnicmp+0x68>
c0006158:	8a 03                	mov    al,BYTE PTR [ebx]
c000615a:	84 c0                	test   al,al
c000615c:	74 52                	je     c00061b0 <strnicmp+0x6f>
c000615e:	8a 16                	mov    dl,BYTE PTR [esi]
c0006160:	84 d2                	test   dl,dl
c0006162:	74 53                	je     c00061b7 <strnicmp+0x76>
c0006164:	01 df                	add    edi,ebx
c0006166:	eb 32                	jmp    c000619a <strnicmp+0x59>
c0006168:	83 ec 0c             	sub    esp,0xc
c000616b:	0f be c0             	movsx  eax,al
c000616e:	50                   	push   eax
c000616f:	e8 7c a7 ff ff       	call   c00008f0 <tolower>
c0006174:	89 c5                	mov    ebp,eax
c0006176:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0006179:	89 04 24             	mov    DWORD PTR [esp],eax
c000617c:	e8 6f a7 ff ff       	call   c00008f0 <tolower>
c0006181:	43                   	inc    ebx
c0006182:	46                   	inc    esi
c0006183:	83 c4 10             	add    esp,0x10
c0006186:	29 c5                	sub    ebp,eax
c0006188:	75 39                	jne    c00061c3 <strnicmp+0x82>
c000618a:	39 fb                	cmp    ebx,edi
c000618c:	74 30                	je     c00061be <strnicmp+0x7d>
c000618e:	8a 03                	mov    al,BYTE PTR [ebx]
c0006190:	84 c0                	test   al,al
c0006192:	74 39                	je     c00061cd <strnicmp+0x8c>
c0006194:	8a 16                	mov    dl,BYTE PTR [esi]
c0006196:	84 d2                	test   dl,dl
c0006198:	74 08                	je     c00061a2 <strnicmp+0x61>
c000619a:	38 d0                	cmp    al,dl
c000619c:	75 ca                	jne    c0006168 <strnicmp+0x27>
c000619e:	43                   	inc    ebx
c000619f:	46                   	inc    esi
c00061a0:	eb e8                	jmp    c000618a <strnicmp+0x49>
c00061a2:	bd 00 00 00 00       	mov    ebp,0x0
c00061a7:	eb 1a                	jmp    c00061c3 <strnicmp+0x82>
c00061a9:	bd 00 00 00 00       	mov    ebp,0x0
c00061ae:	eb 13                	jmp    c00061c3 <strnicmp+0x82>
c00061b0:	bd 00 00 00 00       	mov    ebp,0x0
c00061b5:	eb 0c                	jmp    c00061c3 <strnicmp+0x82>
c00061b7:	bd 00 00 00 00       	mov    ebp,0x0
c00061bc:	eb 05                	jmp    c00061c3 <strnicmp+0x82>
c00061be:	bd 00 00 00 00       	mov    ebp,0x0
c00061c3:	89 e8                	mov    eax,ebp
c00061c5:	83 c4 0c             	add    esp,0xc
c00061c8:	5b                   	pop    ebx
c00061c9:	5e                   	pop    esi
c00061ca:	5f                   	pop    edi
c00061cb:	5d                   	pop    ebp
c00061cc:	c3                   	ret    
c00061cd:	bd 00 00 00 00       	mov    ebp,0x0
c00061d2:	eb ef                	jmp    c00061c3 <strnicmp+0x82>

c00061d4 <find_object>:
c00061d4:	55                   	push   ebp
c00061d5:	57                   	push   edi
c00061d6:	56                   	push   esi
c00061d7:	53                   	push   ebx
c00061d8:	81 ec 2c 01 00 00    	sub    esp,0x12c
c00061de:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00061e2:	89 d3                	mov    ebx,edx
c00061e4:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c00061e8:	8b b4 24 40 01 00 00 	mov    esi,DWORD PTR [esp+0x140]
c00061ef:	83 3d 40 08 02 c0 00 	cmp    DWORD PTR ds:0xc0020840,0x0
c00061f6:	75 14                	jne    c000620c <find_object+0x38>
c00061f8:	85 f6                	test   esi,esi
c00061fa:	0f 8e f0 01 00 00    	jle    c00063f0 <find_object+0x21c>
c0006200:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006203:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0006207:	e9 9f 01 00 00       	jmp    c00063ab <find_object+0x1d7>
c000620c:	89 c2                	mov    edx,eax
c000620e:	8d 44 24 20          	lea    eax,[esp+0x20]
c0006212:	e8 4d fb ff ff       	call   c0005d64 <utf2ucs>
c0006217:	eb df                	jmp    c00061f8 <find_object+0x24>
c0006219:	31 d2                	xor    edx,edx
c000621b:	8a 55 20             	mov    dl,BYTE PTR [ebp+0x20]
c000621e:	89 c6                	mov    esi,eax
c0006220:	81 e6 ff 00 00 00    	and    esi,0xff
c0006226:	29 d6                	sub    esi,edx
c0006228:	8d 5c 15 21          	lea    ebx,[ebp+edx*1+0x21]
c000622c:	f6 45 20 01          	test   BYTE PTR [ebp+0x20],0x1
c0006230:	74 3d                	je     c000626f <find_object+0x9b>
c0006232:	83 ee 21             	sub    esi,0x21
c0006235:	83 fe 03             	cmp    esi,0x3
c0006238:	7e 08                	jle    c0006242 <find_object+0x6e>
c000623a:	8a 43 03             	mov    al,BYTE PTR [ebx+0x3]
c000623d:	48                   	dec    eax
c000623e:	3c 01                	cmp    al,0x1
c0006240:	76 69                	jbe    c00062ab <find_object+0xd7>
c0006242:	31 d2                	xor    edx,edx
c0006244:	8a 55 20             	mov    dl,BYTE PTR [ebp+0x20]
c0006247:	8d 45 21             	lea    eax,[ebp+0x21]
c000624a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000624e:	e8 73 fd ff ff       	call   c0005fc6 <fncompare>
c0006253:	85 c0                	test   eax,eax
c0006255:	0f 85 b1 00 00 00    	jne    c000630c <find_object+0x138>
c000625b:	31 c0                	xor    eax,eax
c000625d:	8a 45 19             	mov    al,BYTE PTR [ebp+0x19]
c0006260:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0006264:	0f 85 a2 00 00 00    	jne    c000630c <find_object+0x138>
c000626a:	e9 02 01 00 00       	jmp    c0006371 <find_object+0x19d>
c000626f:	43                   	inc    ebx
c0006270:	83 ee 22             	sub    esi,0x22
c0006273:	eb c0                	jmp    c0006235 <find_object+0x61>
c0006275:	0f be 7b 02          	movsx  edi,BYTE PTR [ebx+0x2]
c0006279:	83 ef 05             	sub    edi,0x5
c000627c:	83 ec 04             	sub    esp,0x4
c000627f:	57                   	push   edi
c0006280:	8d 43 05             	lea    eax,[ebx+0x5]
c0006283:	50                   	push   eax
c0006284:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0006288:	50                   	push   eax
c0006289:	e8 c2 a3 ff ff       	call   c0000650 <strncpy>
c000628e:	c6 44 3c 30 00       	mov    BYTE PTR [esp+edi*1+0x30],0x0
c0006293:	83 c4 10             	add    esp,0x10
c0006296:	0f be 43 02          	movsx  eax,BYTE PTR [ebx+0x2]
c000629a:	29 c6                	sub    esi,eax
c000629c:	01 c3                	add    ebx,eax
c000629e:	83 fe 03             	cmp    esi,0x3
c00062a1:	7e 21                	jle    c00062c4 <find_object+0xf0>
c00062a3:	8a 43 03             	mov    al,BYTE PTR [ebx+0x3]
c00062a6:	48                   	dec    eax
c00062a7:	3c 01                	cmp    al,0x1
c00062a9:	77 19                	ja     c00062c4 <find_object+0xf0>
c00062ab:	83 ec 04             	sub    esp,0x4
c00062ae:	6a 02                	push   0x2
c00062b0:	68 c0 d3 01 c0       	push   0xc001d3c0
c00062b5:	53                   	push   ebx
c00062b6:	e8 c5 a4 ff ff       	call   c0000780 <strncmp>
c00062bb:	83 c4 10             	add    esp,0x10
c00062be:	85 c0                	test   eax,eax
c00062c0:	75 d4                	jne    c0006296 <find_object+0xc2>
c00062c2:	eb b1                	jmp    c0006275 <find_object+0xa1>
c00062c4:	85 ff                	test   edi,edi
c00062c6:	0f 8e 76 ff ff ff    	jle    c0006242 <find_object+0x6e>
c00062cc:	83 ec 08             	sub    esp,0x8
c00062cf:	6a 2f                	push   0x2f
c00062d1:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00062d5:	57                   	push   edi
c00062d6:	e8 75 a4 ff ff       	call   c0000750 <strchr>
c00062db:	83 c4 10             	add    esp,0x10
c00062de:	85 c0                	test   eax,eax
c00062e0:	0f 84 98 00 00 00    	je     c000637e <find_object+0x1aa>
c00062e6:	29 f8                	sub    eax,edi
c00062e8:	83 ec 04             	sub    esp,0x4
c00062eb:	50                   	push   eax
c00062ec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00062f0:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00062f4:	50                   	push   eax
c00062f5:	e8 47 fe ff ff       	call   c0006141 <strnicmp>
c00062fa:	83 c4 10             	add    esp,0x10
c00062fd:	85 c0                	test   eax,eax
c00062ff:	75 0b                	jne    c000630c <find_object+0x138>
c0006301:	31 c0                	xor    eax,eax
c0006303:	8a 45 19             	mov    al,BYTE PTR [ebp+0x19]
c0006306:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c000630a:	74 65                	je     c0006371 <find_object+0x19d>
c000630c:	31 c0                	xor    eax,eax
c000630e:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0006311:	01 44 24 08          	add    DWORD PTR [esp+0x8],eax
c0006315:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0006319:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c000631f:	7f 71                	jg     c0006392 <find_object+0x1be>
c0006321:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006325:	39 c1                	cmp    ecx,eax
c0006327:	7d 69                	jge    c0006392 <find_object+0x1be>
c0006329:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000632d:	8b 04 85 00 08 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdf800]
c0006334:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0006338:	8d 6c 10 04          	lea    ebp,[eax+edx*1+0x4]
c000633c:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000633f:	84 c0                	test   al,al
c0006341:	74 4f                	je     c0006392 <find_object+0x1be>
c0006343:	8b 3d 40 08 02 c0    	mov    edi,DWORD PTR ds:0xc0020840
c0006349:	85 ff                	test   edi,edi
c000634b:	0f 84 c8 fe ff ff    	je     c0006219 <find_object+0x45>
c0006351:	31 c9                	xor    ecx,ecx
c0006353:	8a 4d 20             	mov    cl,BYTE PTR [ebp+0x20]
c0006356:	8d 45 21             	lea    eax,[ebp+0x21]
c0006359:	8d 54 24 20          	lea    edx,[esp+0x20]
c000635d:	e8 86 fb ff ff       	call   c0005ee8 <ucscompare>
c0006362:	85 c0                	test   eax,eax
c0006364:	75 a6                	jne    c000630c <find_object+0x138>
c0006366:	31 c0                	xor    eax,eax
c0006368:	8a 45 19             	mov    al,BYTE PTR [ebp+0x19]
c000636b:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c000636f:	75 9b                	jne    c000630c <find_object+0x138>
c0006371:	89 e8                	mov    eax,ebp
c0006373:	81 c4 2c 01 00 00    	add    esp,0x12c
c0006379:	5b                   	pop    ebx
c000637a:	5e                   	pop    esi
c000637b:	5f                   	pop    edi
c000637c:	5d                   	pop    ebp
c000637d:	c3                   	ret    
c000637e:	83 ec 0c             	sub    esp,0xc
c0006381:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0006385:	e8 d6 a1 ff ff       	call   c0000560 <strlen>
c000638a:	83 c4 10             	add    esp,0x10
c000638d:	e9 56 ff ff ff       	jmp    c00062e8 <find_object+0x114>
c0006392:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0006396:	81 ac 24 40 01 00 00 00 08 00 00 	sub    DWORD PTR [esp+0x140],0x800
c00063a1:	83 bc 24 40 01 00 00 00 	cmp    DWORD PTR [esp+0x140],0x0
c00063a9:	7e 3e                	jle    c00063e9 <find_object+0x215>
c00063ab:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00063af:	e8 67 fd ff ff       	call   c000611b <biread>
c00063b4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00063b8:	85 c0                	test   eax,eax
c00063ba:	78 3e                	js     c00063fa <find_object+0x226>
c00063bc:	8b 94 24 40 01 00 00 	mov    edx,DWORD PTR [esp+0x140]
c00063c3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00063c7:	85 d2                	test   edx,edx
c00063c9:	7e c7                	jle    c0006392 <find_object+0x1be>
c00063cb:	8b 04 85 00 08 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdf800]
c00063d2:	8d 68 04             	lea    ebp,[eax+0x4]
c00063d5:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c00063d8:	84 c0                	test   al,al
c00063da:	74 b6                	je     c0006392 <find_object+0x1be>
c00063dc:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00063e4:	e9 5a ff ff ff       	jmp    c0006343 <find_object+0x16f>
c00063e9:	bd 00 00 00 00       	mov    ebp,0x0
c00063ee:	eb 81                	jmp    c0006371 <find_object+0x19d>
c00063f0:	bd 00 00 00 00       	mov    ebp,0x0
c00063f5:	e9 77 ff ff ff       	jmp    c0006371 <find_object+0x19d>
c00063fa:	bd 00 00 00 00       	mov    ebp,0x0
c00063ff:	e9 6d ff ff ff       	jmp    c0006371 <find_object+0x19d>

c0006404 <find_object_path>:
c0006404:	55                   	push   ebp
c0006405:	57                   	push   edi
c0006406:	56                   	push   esi
c0006407:	53                   	push   ebx
c0006408:	83 ec 1c             	sub    esp,0x1c
c000640b:	89 c6                	mov    esi,eax
c000640d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0006411:	89 cf                	mov    edi,ecx
c0006413:	eb 03                	jmp    c0006418 <find_object_path+0x14>
c0006415:	8d 73 01             	lea    esi,[ebx+0x1]
c0006418:	83 ec 08             	sub    esp,0x8
c000641b:	6a 2f                	push   0x2f
c000641d:	56                   	push   esi
c000641e:	e8 2d a3 ff ff       	call   c0000750 <strchr>
c0006423:	89 c3                	mov    ebx,eax
c0006425:	83 c4 10             	add    esp,0x10
c0006428:	85 c0                	test   eax,eax
c000642a:	74 33                	je     c000645f <find_object_path+0x5b>
c000642c:	39 de                	cmp    esi,ebx
c000642e:	74 e5                	je     c0006415 <find_object_path+0x11>
c0006430:	8d 47 0a             	lea    eax,[edi+0xa]
c0006433:	e8 46 fa ff ff       	call   c0005e7e <iso_733>
c0006438:	89 c5                	mov    ebp,eax
c000643a:	8d 47 02             	lea    eax,[edi+0x2]
c000643d:	e8 3c fa ff ff       	call   c0005e7e <iso_733>
c0006442:	83 ec 0c             	sub    esp,0xc
c0006445:	55                   	push   ebp
c0006446:	89 c1                	mov    ecx,eax
c0006448:	ba 01 00 00 00       	mov    edx,0x1
c000644d:	89 f0                	mov    eax,esi
c000644f:	e8 80 fd ff ff       	call   c00061d4 <find_object>
c0006454:	89 c7                	mov    edi,eax
c0006456:	83 c4 10             	add    esp,0x10
c0006459:	85 c0                	test   eax,eax
c000645b:	75 b8                	jne    c0006415 <find_object_path+0x11>
c000645d:	eb 0e                	jmp    c000646d <find_object_path+0x69>
c000645f:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0006462:	75 11                	jne    c0006475 <find_object_path+0x71>
c0006464:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0006469:	74 32                	je     c000649d <find_object_path+0x99>
c000646b:	89 f8                	mov    eax,edi
c000646d:	83 c4 1c             	add    esp,0x1c
c0006470:	5b                   	pop    ebx
c0006471:	5e                   	pop    esi
c0006472:	5f                   	pop    edi
c0006473:	5d                   	pop    ebp
c0006474:	c3                   	ret    
c0006475:	8d 47 0a             	lea    eax,[edi+0xa]
c0006478:	e8 01 fa ff ff       	call   c0005e7e <iso_733>
c000647d:	89 c3                	mov    ebx,eax
c000647f:	8d 47 02             	lea    eax,[edi+0x2]
c0006482:	e8 f7 f9 ff ff       	call   c0005e7e <iso_733>
c0006487:	83 ec 0c             	sub    esp,0xc
c000648a:	53                   	push   ebx
c000648b:	89 c1                	mov    ecx,eax
c000648d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006491:	89 f0                	mov    eax,esi
c0006493:	e8 3c fd ff ff       	call   c00061d4 <find_object>
c0006498:	83 c4 10             	add    esp,0x10
c000649b:	eb d0                	jmp    c000646d <find_object_path+0x69>
c000649d:	b8 00 00 00 00       	mov    eax,0x0
c00064a2:	eb c9                	jmp    c000646d <find_object_path+0x69>

c00064a4 <stricmp>:
c00064a4:	55                   	push   ebp
c00064a5:	57                   	push   edi
c00064a6:	56                   	push   esi
c00064a7:	53                   	push   ebx
c00064a8:	83 ec 0c             	sub    esp,0xc
c00064ab:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00064af:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c00064b3:	46                   	inc    esi
c00064b4:	47                   	inc    edi
c00064b5:	0f b6 6f ff          	movzx  ebp,BYTE PTR [edi-0x1]
c00064b9:	81 e5 ff 00 00 00    	and    ebp,0xff
c00064bf:	83 ec 0c             	sub    esp,0xc
c00064c2:	31 c0                	xor    eax,eax
c00064c4:	8a 46 ff             	mov    al,BYTE PTR [esi-0x1]
c00064c7:	50                   	push   eax
c00064c8:	e8 03 a4 ff ff       	call   c00008d0 <toupper>
c00064cd:	89 04 24             	mov    DWORD PTR [esp],eax
c00064d0:	e8 1b a4 ff ff       	call   c00008f0 <tolower>
c00064d5:	89 c3                	mov    ebx,eax
c00064d7:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00064da:	e8 f1 a3 ff ff       	call   c00008d0 <toupper>
c00064df:	89 04 24             	mov    DWORD PTR [esp],eax
c00064e2:	e8 09 a4 ff ff       	call   c00008f0 <tolower>
c00064e7:	83 c4 10             	add    esp,0x10
c00064ea:	39 c3                	cmp    ebx,eax
c00064ec:	75 04                	jne    c00064f2 <stricmp+0x4e>
c00064ee:	85 db                	test   ebx,ebx
c00064f0:	75 c1                	jne    c00064b3 <stricmp+0xf>
c00064f2:	29 c3                	sub    ebx,eax
c00064f4:	89 d8                	mov    eax,ebx
c00064f6:	83 c4 0c             	add    esp,0xc
c00064f9:	5b                   	pop    ebx
c00064fa:	5e                   	pop    esi
c00064fb:	5f                   	pop    edi
c00064fc:	5d                   	pop    ebp
c00064fd:	c3                   	ret    

c00064fe <iso_open>:
c00064fe:	57                   	push   edi
c00064ff:	56                   	push   esi
c0006500:	53                   	push   ebx
c0006501:	b9 80 07 02 c0       	mov    ecx,0xc0020780
c0006506:	ba 00 00 00 00       	mov    edx,0x0
c000650b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000650f:	e8 f0 fe ff ff       	call   c0006404 <find_object_path>
c0006514:	85 c0                	test   eax,eax
c0006516:	0f 84 93 00 00 00    	je     c00065af <iso_open+0xb1>
c000651c:	89 c6                	mov    esi,eax
c000651e:	83 3d 40 fe 01 c0 00 	cmp    DWORD PTR ds:0xc001fe40,0x0
c0006525:	0f 84 92 00 00 00    	je     c00065bd <iso_open+0xbf>
c000652b:	ba d4 fe 01 c0       	mov    edx,0xc001fed4
c0006530:	bb 01 00 00 00       	mov    ebx,0x1
c0006535:	83 3a 00             	cmp    DWORD PTR [edx],0x0
c0006538:	74 13                	je     c000654d <iso_open+0x4f>
c000653a:	43                   	inc    ebx
c000653b:	81 c2 94 00 00 00    	add    edx,0x94
c0006541:	83 fb 10             	cmp    ebx,0x10
c0006544:	75 ef                	jne    c0006535 <iso_open+0x37>
c0006546:	bb ff ff ff ff       	mov    ebx,0xffffffff
c000654b:	eb 5c                	jmp    c00065a9 <iso_open+0xab>
c000654d:	8d 04 db             	lea    eax,[ebx+ebx*8]
c0006550:	8d 04 83             	lea    eax,[ebx+eax*4]
c0006553:	c7 04 85 40 fe 01 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffe01c0],0xffffffff
c000655e:	83 fb 0f             	cmp    ebx,0xf
c0006561:	7f 53                	jg     c00065b6 <iso_open+0xb8>
c0006563:	8d 46 02             	lea    eax,[esi+0x2]
c0006566:	e8 13 f9 ff ff       	call   c0005e7e <iso_733>
c000656b:	8d 14 db             	lea    edx,[ebx+ebx*8]
c000656e:	8d 14 93             	lea    edx,[ebx+edx*4]
c0006571:	c1 e2 02             	shl    edx,0x2
c0006574:	8d ba 40 fe 01 c0    	lea    edi,[edx-0x3ffe01c0]
c000657a:	89 82 40 fe 01 c0    	mov    DWORD PTR [edx-0x3ffe01c0],eax
c0006580:	c7 82 44 fe 01 c0 00 00 00 00 	mov    DWORD PTR [edx-0x3ffe01bc],0x0
c000658a:	c7 82 48 fe 01 c0 00 00 00 00 	mov    DWORD PTR [edx-0x3ffe01b8],0x0
c0006594:	8d 46 0a             	lea    eax,[esi+0xa]
c0006597:	e8 e2 f8 ff ff       	call   c0005e7e <iso_733>
c000659c:	89 47 0c             	mov    DWORD PTR [edi+0xc],eax
c000659f:	c7 87 90 00 00 00 00 00 00 00 	mov    DWORD PTR [edi+0x90],0x0
c00065a9:	89 d8                	mov    eax,ebx
c00065ab:	5b                   	pop    ebx
c00065ac:	5e                   	pop    esi
c00065ad:	5f                   	pop    edi
c00065ae:	c3                   	ret    
c00065af:	bb ff ff ff ff       	mov    ebx,0xffffffff
c00065b4:	eb f3                	jmp    c00065a9 <iso_open+0xab>
c00065b6:	bb ff ff ff ff       	mov    ebx,0xffffffff
c00065bb:	eb ec                	jmp    c00065a9 <iso_open+0xab>
c00065bd:	c7 05 40 fe 01 c0 ff ff ff ff 	mov    DWORD PTR ds:0xc001fe40,0xffffffff
c00065c7:	bb 00 00 00 00       	mov    ebx,0x0
c00065cc:	eb 95                	jmp    c0006563 <iso_open+0x65>

c00065ce <iso_close>:
c00065ce:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00065d2:	83 f8 0f             	cmp    eax,0xf
c00065d5:	7f 11                	jg     c00065e8 <iso_close+0x1a>
c00065d7:	8d 14 c0             	lea    edx,[eax+eax*8]
c00065da:	8d 04 90             	lea    eax,[eax+edx*4]
c00065dd:	c7 04 85 40 fe 01 c0 00 00 00 00 	mov    DWORD PTR [eax*4-0x3ffe01c0],0x0
c00065e8:	c3                   	ret    

c00065e9 <iso_read>:
c00065e9:	55                   	push   ebp
c00065ea:	57                   	push   edi
c00065eb:	56                   	push   esi
c00065ec:	53                   	push   ebx
c00065ed:	83 ec 1c             	sub    esp,0x1c
c00065f0:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00065f4:	83 fd 0f             	cmp    ebp,0xf
c00065f7:	0f 8f ba 01 00 00    	jg     c00067b7 <iso_read+0x1ce>
c00065fd:	8d 44 ed 00          	lea    eax,[ebp+ebp*8+0x0]
c0006601:	8d 44 85 00          	lea    eax,[ebp+eax*4+0x0]
c0006605:	83 3c 85 40 fe 01 c0 00 	cmp    DWORD PTR [eax*4-0x3ffe01c0],0x0
c000660d:	0f 84 b0 01 00 00    	je     c00067c3 <iso_read+0x1da>
c0006613:	8d 44 ed 00          	lea    eax,[ebp+ebp*8+0x0]
c0006617:	8d 44 85 00          	lea    eax,[ebp+eax*4+0x0]
c000661b:	8b 04 85 d0 fe 01 c0 	mov    eax,DWORD PTR [eax*4-0x3ffe0130]
c0006622:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006626:	85 c0                	test   eax,eax
c0006628:	0f 85 a1 01 00 00    	jne    c00067cf <iso_read+0x1e6>
c000662e:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0006633:	0f 84 71 01 00 00    	je     c00067aa <iso_read+0x1c1>
c0006639:	8d 44 ed 00          	lea    eax,[ebp+ebp*8+0x0]
c000663d:	8d 44 85 00          	lea    eax,[ebp+eax*4+0x0]
c0006641:	8d 14 85 40 fe 01 c0 	lea    edx,[eax*4-0x3ffe01c0]
c0006648:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c000664b:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000664e:	29 c2                	sub    edx,eax
c0006650:	89 d1                	mov    ecx,edx
c0006652:	3b 54 24 38          	cmp    edx,DWORD PTR [esp+0x38]
c0006656:	76 04                	jbe    c000665c <iso_read+0x73>
c0006658:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000665c:	85 c9                	test   ecx,ecx
c000665e:	0f 84 42 01 00 00    	je     c00067a6 <iso_read+0x1bd>
c0006664:	8d 1c ed 00 00 00 00 	lea    ebx,[ebp*8+0x0]
c000666b:	e9 b7 00 00 00       	jmp    c0006727 <iso_read+0x13e>
c0006670:	8d 91 ff 07 00 00    	lea    edx,[ecx+0x7ff]
c0006676:	e9 e9 00 00 00       	jmp    c0006764 <iso_read+0x17b>
c000667b:	ba 20 00 00 00       	mov    edx,0x20
c0006680:	e9 e2 00 00 00       	jmp    c0006767 <iso_read+0x17e>
c0006685:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0006689:	39 ca                	cmp    edx,ecx
c000668b:	7e 04                	jle    c0006691 <iso_read+0xa8>
c000668d:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0006691:	8d 14 2b             	lea    edx,[ebx+ebp*1]
c0006694:	8d 54 95 00          	lea    edx,[ebp+edx*4+0x0]
c0006698:	c1 e8 0b             	shr    eax,0xb
c000669b:	03 04 95 40 fe 01 c0 	add    eax,DWORD PTR [edx*4-0x3ffe01c0]
c00066a2:	e8 87 fa ff ff       	call   c000612e <bdread>
c00066a7:	85 c0                	test   eax,eax
c00066a9:	0f 88 2c 01 00 00    	js     c00067db <iso_read+0x1f2>
c00066af:	8b 14 85 c0 07 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdf840]
c00066b6:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c00066b9:	8d 44 85 00          	lea    eax,[ebp+eax*4+0x0]
c00066bd:	8b 04 85 48 fe 01 c0 	mov    eax,DWORD PTR [eax*4-0x3ffe01b8]
c00066c4:	25 ff 07 00 00       	and    eax,0x7ff
c00066c9:	8d 74 02 04          	lea    esi,[edx+eax*1+0x4]
c00066cd:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00066d1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00066d5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00066d7:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00066db:	01 7c 24 34          	add    DWORD PTR [esp+0x34],edi
c00066df:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c00066e2:	8d 44 85 00          	lea    eax,[ebp+eax*4+0x0]
c00066e6:	8d 14 85 40 fe 01 c0 	lea    edx,[eax*4-0x3ffe01c0]
c00066ed:	89 f8                	mov    eax,edi
c00066ef:	03 42 08             	add    eax,DWORD PTR [edx+0x8]
c00066f2:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c00066f5:	01 7c 24 0c          	add    DWORD PTR [esp+0xc],edi
c00066f9:	29 7c 24 38          	sub    DWORD PTR [esp+0x38],edi
c00066fd:	0f 84 a7 00 00 00    	je     c00067aa <iso_read+0x1c1>
c0006703:	8d 14 2b             	lea    edx,[ebx+ebp*1]
c0006706:	8d 54 95 00          	lea    edx,[ebp+edx*4+0x0]
c000670a:	8b 14 95 4c fe 01 c0 	mov    edx,DWORD PTR [edx*4-0x3ffe01b4]
c0006711:	29 c2                	sub    edx,eax
c0006713:	89 d1                	mov    ecx,edx
c0006715:	3b 54 24 38          	cmp    edx,DWORD PTR [esp+0x38]
c0006719:	76 04                	jbe    c000671f <iso_read+0x136>
c000671b:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000671f:	85 c9                	test   ecx,ecx
c0006721:	0f 84 83 00 00 00    	je     c00067aa <iso_read+0x1c1>
c0006727:	89 c6                	mov    esi,eax
c0006729:	81 e6 ff 07 00 00    	and    esi,0x7ff
c000672f:	ba 00 08 00 00       	mov    edx,0x800
c0006734:	29 f2                	sub    edx,esi
c0006736:	81 fa 00 08 00 00    	cmp    edx,0x800
c000673c:	0f 85 43 ff ff ff    	jne    c0006685 <iso_read+0x9c>
c0006742:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0006748:	0f 8e 37 ff ff ff    	jle    c0006685 <iso_read+0x9c>
c000674e:	81 f9 ff 07 01 00    	cmp    ecx,0x107ff
c0006754:	0f 8f 21 ff ff ff    	jg     c000667b <iso_read+0x92>
c000675a:	89 ca                	mov    edx,ecx
c000675c:	85 c9                	test   ecx,ecx
c000675e:	0f 88 0c ff ff ff    	js     c0006670 <iso_read+0x87>
c0006764:	c1 fa 0b             	sar    edx,0xb
c0006767:	89 d6                	mov    esi,edx
c0006769:	c1 e6 0b             	shl    esi,0xb
c000676c:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0006770:	83 ec 04             	sub    esp,0x4
c0006773:	52                   	push   edx
c0006774:	8d 14 2b             	lea    edx,[ebx+ebp*1]
c0006777:	8d 54 95 00          	lea    edx,[ebp+edx*4+0x0]
c000677b:	c1 e8 0b             	shr    eax,0xb
c000677e:	03 04 95 40 fe 01 c0 	add    eax,DWORD PTR [edx*4-0x3ffe01c0]
c0006785:	50                   	push   eax
c0006786:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000678a:	e8 d1 f8 ff ff       	call   c0006060 <isoReadDiscSector>
c000678f:	83 c4 10             	add    esp,0x10
c0006792:	85 c0                	test   eax,eax
c0006794:	0f 8f 3d ff ff ff    	jg     c00066d7 <iso_read+0xee>
c000679a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000679f:	ba ff ff ff ff       	mov    edx,0xffffffff
c00067a4:	eb 09                	jmp    c00067af <iso_read+0x1c6>
c00067a6:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00067aa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00067ae:	99                   	cdq    
c00067af:	83 c4 1c             	add    esp,0x1c
c00067b2:	5b                   	pop    ebx
c00067b3:	5e                   	pop    esi
c00067b4:	5f                   	pop    edi
c00067b5:	5d                   	pop    ebp
c00067b6:	c3                   	ret    
c00067b7:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00067bc:	ba ff ff ff ff       	mov    edx,0xffffffff
c00067c1:	eb ec                	jmp    c00067af <iso_read+0x1c6>
c00067c3:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00067c8:	ba ff ff ff ff       	mov    edx,0xffffffff
c00067cd:	eb e0                	jmp    c00067af <iso_read+0x1c6>
c00067cf:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00067d4:	ba ff ff ff ff       	mov    edx,0xffffffff
c00067d9:	eb d4                	jmp    c00067af <iso_read+0x1c6>
c00067db:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00067e0:	ba ff ff ff ff       	mov    edx,0xffffffff
c00067e5:	eb c8                	jmp    c00067af <iso_read+0x1c6>

c00067e7 <iso_seek>:
c00067e7:	53                   	push   ebx
c00067e8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067ec:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00067f0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00067f4:	83 f8 0f             	cmp    eax,0xf
c00067f7:	0f 8f a4 00 00 00    	jg     c00068a1 <iso_seek+0xba>
c00067fd:	8d 1c c0             	lea    ebx,[eax+eax*8]
c0006800:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c0006803:	83 3c 9d 40 fe 01 c0 00 	cmp    DWORD PTR [ebx*4-0x3ffe01c0],0x0
c000680b:	0f 84 9c 00 00 00    	je     c00068ad <iso_seek+0xc6>
c0006811:	8d 1c c0             	lea    ebx,[eax+eax*8]
c0006814:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c0006817:	83 3c 9d d0 fe 01 c0 00 	cmp    DWORD PTR [ebx*4-0x3ffe0130],0x0
c000681f:	0f 85 94 00 00 00    	jne    c00068b9 <iso_seek+0xd2>
c0006825:	83 fa 01             	cmp    edx,0x1
c0006828:	74 53                	je     c000687d <iso_seek+0x96>
c000682a:	83 fa 02             	cmp    edx,0x2
c000682d:	74 5d                	je     c000688c <iso_seek+0xa5>
c000682f:	85 d2                	test   edx,edx
c0006831:	74 0c                	je     c000683f <iso_seek+0x58>
c0006833:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0006838:	ba ff ff ff ff       	mov    edx,0xffffffff
c000683d:	eb 3c                	jmp    c000687b <iso_seek+0x94>
c000683f:	89 0c 9d 48 fe 01 c0 	mov    DWORD PTR [ebx*4-0x3ffe01b8],ecx
c0006846:	8d 14 c0             	lea    edx,[eax+eax*8]
c0006849:	8d 14 90             	lea    edx,[eax+edx*4]
c000684c:	8b 0c 95 4c fe 01 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffe01b4]
c0006853:	39 0c 95 48 fe 01 c0 	cmp    DWORD PTR [edx*4-0x3ffe01b8],ecx
c000685a:	76 0d                	jbe    c0006869 <iso_seek+0x82>
c000685c:	8d 14 c0             	lea    edx,[eax+eax*8]
c000685f:	8d 14 90             	lea    edx,[eax+edx*4]
c0006862:	89 0c 95 48 fe 01 c0 	mov    DWORD PTR [edx*4-0x3ffe01b8],ecx
c0006869:	8d 14 c0             	lea    edx,[eax+eax*8]
c000686c:	8d 04 90             	lea    eax,[eax+edx*4]
c000686f:	8b 04 85 48 fe 01 c0 	mov    eax,DWORD PTR [eax*4-0x3ffe01b8]
c0006876:	ba 00 00 00 00       	mov    edx,0x0
c000687b:	5b                   	pop    ebx
c000687c:	c3                   	ret    
c000687d:	8d 14 c0             	lea    edx,[eax+eax*8]
c0006880:	8d 14 90             	lea    edx,[eax+edx*4]
c0006883:	01 0c 95 48 fe 01 c0 	add    DWORD PTR [edx*4-0x3ffe01b8],ecx
c000688a:	eb ba                	jmp    c0006846 <iso_seek+0x5f>
c000688c:	8d 14 c0             	lea    edx,[eax+eax*8]
c000688f:	8d 14 90             	lea    edx,[eax+edx*4]
c0006892:	8d 14 95 40 fe 01 c0 	lea    edx,[edx*4-0x3ffe01c0]
c0006899:	03 4a 0c             	add    ecx,DWORD PTR [edx+0xc]
c000689c:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c000689f:	eb a5                	jmp    c0006846 <iso_seek+0x5f>
c00068a1:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00068a6:	ba ff ff ff ff       	mov    edx,0xffffffff
c00068ab:	eb ce                	jmp    c000687b <iso_seek+0x94>
c00068ad:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00068b2:	ba ff ff ff ff       	mov    edx,0xffffffff
c00068b7:	eb c2                	jmp    c000687b <iso_seek+0x94>
c00068b9:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00068be:	ba ff ff ff ff       	mov    edx,0xffffffff
c00068c3:	eb b6                	jmp    c000687b <iso_seek+0x94>

c00068c5 <iso_tell>:
c00068c5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00068c9:	83 f8 0f             	cmp    eax,0xf
c00068cc:	7f 33                	jg     c0006901 <iso_tell+0x3c>
c00068ce:	8d 14 c0             	lea    edx,[eax+eax*8]
c00068d1:	8d 14 90             	lea    edx,[eax+edx*4]
c00068d4:	83 3c 95 40 fe 01 c0 00 	cmp    DWORD PTR [edx*4-0x3ffe01c0],0x0
c00068dc:	74 2e                	je     c000690c <iso_tell+0x47>
c00068de:	8d 14 c0             	lea    edx,[eax+eax*8]
c00068e1:	8d 14 90             	lea    edx,[eax+edx*4]
c00068e4:	83 3c 95 d0 fe 01 c0 00 	cmp    DWORD PTR [edx*4-0x3ffe0130],0x0
c00068ec:	75 29                	jne    c0006917 <iso_tell+0x52>
c00068ee:	8d 14 c0             	lea    edx,[eax+eax*8]
c00068f1:	8d 04 90             	lea    eax,[eax+edx*4]
c00068f4:	8b 04 85 48 fe 01 c0 	mov    eax,DWORD PTR [eax*4-0x3ffe01b8]
c00068fb:	ba 00 00 00 00       	mov    edx,0x0
c0006900:	c3                   	ret    
c0006901:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0006906:	ba ff ff ff ff       	mov    edx,0xffffffff
c000690b:	c3                   	ret    
c000690c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0006911:	ba ff ff ff ff       	mov    edx,0xffffffff
c0006916:	c3                   	ret    
c0006917:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000691c:	ba ff ff ff ff       	mov    edx,0xffffffff
c0006921:	c3                   	ret    

c0006922 <iso_total>:
c0006922:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0006926:	83 f8 0f             	cmp    eax,0xf
c0006929:	7f 2e                	jg     c0006959 <iso_total+0x37>
c000692b:	8d 14 c0             	lea    edx,[eax+eax*8]
c000692e:	8d 14 90             	lea    edx,[eax+edx*4]
c0006931:	83 3c 95 40 fe 01 c0 00 	cmp    DWORD PTR [edx*4-0x3ffe01c0],0x0
c0006939:	74 24                	je     c000695f <iso_total+0x3d>
c000693b:	8d 14 c0             	lea    edx,[eax+eax*8]
c000693e:	8d 14 90             	lea    edx,[eax+edx*4]
c0006941:	83 3c 95 d0 fe 01 c0 00 	cmp    DWORD PTR [edx*4-0x3ffe0130],0x0
c0006949:	75 1a                	jne    c0006965 <iso_total+0x43>
c000694b:	8d 14 c0             	lea    edx,[eax+eax*8]
c000694e:	8d 04 90             	lea    eax,[eax+edx*4]
c0006951:	8b 04 85 4c fe 01 c0 	mov    eax,DWORD PTR [eax*4-0x3ffe01b4]
c0006958:	c3                   	ret    
c0006959:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000695e:	c3                   	ret    
c000695f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0006964:	c3                   	ret    
c0006965:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000696a:	c3                   	ret    

c000696b <fn_postprocess>:
c000696b:	56                   	push   esi
c000696c:	53                   	push   ebx
c000696d:	83 ec 04             	sub    esp,0x4
c0006970:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0006974:	8a 06                	mov    al,BYTE PTR [esi]
c0006976:	84 c0                	test   al,al
c0006978:	74 3b                	je     c00069b5 <fn_postprocess+0x4a>
c000697a:	3c 3b                	cmp    al,0x3b
c000697c:	74 37                	je     c00069b5 <fn_postprocess+0x4a>
c000697e:	89 f3                	mov    ebx,esi
c0006980:	83 ec 0c             	sub    esp,0xc
c0006983:	0f be c0             	movsx  eax,al
c0006986:	50                   	push   eax
c0006987:	e8 64 9f ff ff       	call   c00008f0 <tolower>
c000698c:	88 03                	mov    BYTE PTR [ebx],al
c000698e:	43                   	inc    ebx
c000698f:	8a 03                	mov    al,BYTE PTR [ebx]
c0006991:	83 c4 10             	add    esp,0x10
c0006994:	84 c0                	test   al,al
c0006996:	74 04                	je     c000699c <fn_postprocess+0x31>
c0006998:	3c 3b                	cmp    al,0x3b
c000699a:	75 e4                	jne    c0006980 <fn_postprocess+0x15>
c000699c:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000699f:	39 de                	cmp    esi,ebx
c00069a1:	73 06                	jae    c00069a9 <fn_postprocess+0x3e>
c00069a3:	80 7b ff 2e          	cmp    BYTE PTR [ebx-0x1],0x2e
c00069a7:	74 06                	je     c00069af <fn_postprocess+0x44>
c00069a9:	83 c4 04             	add    esp,0x4
c00069ac:	5b                   	pop    ebx
c00069ad:	5e                   	pop    esi
c00069ae:	c3                   	ret    
c00069af:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c00069b3:	eb f4                	jmp    c00069a9 <fn_postprocess+0x3e>
c00069b5:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00069b8:	eb ef                	jmp    c00069a9 <fn_postprocess+0x3e>

c00069ba <iso_readdir>:
c00069ba:	55                   	push   ebp
c00069bb:	57                   	push   edi
c00069bc:	56                   	push   esi
c00069bd:	53                   	push   ebx
c00069be:	83 ec 1c             	sub    esp,0x1c
c00069c1:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00069c5:	83 fe 0f             	cmp    esi,0xf
c00069c8:	0f 8f 7a 02 00 00    	jg     c0006c48 <iso_readdir+0x28e>
c00069ce:	8d 04 f6             	lea    eax,[esi+esi*8]
c00069d1:	8d 04 86             	lea    eax,[esi+eax*4]
c00069d4:	83 3c 85 40 fe 01 c0 00 	cmp    DWORD PTR [eax*4-0x3ffe01c0],0x0
c00069dc:	0f 84 70 02 00 00    	je     c0006c52 <iso_readdir+0x298>
c00069e2:	8d 04 f6             	lea    eax,[esi+esi*8]
c00069e5:	8d 04 86             	lea    eax,[esi+eax*4]
c00069e8:	83 3c 85 44 fe 01 c0 00 	cmp    DWORD PTR [eax*4-0x3ffe01bc],0x0
c00069f0:	0f 84 66 02 00 00    	je     c0006c5c <iso_readdir+0x2a2>
c00069f6:	8d 04 f6             	lea    eax,[esi+esi*8]
c00069f9:	8d 04 86             	lea    eax,[esi+eax*4]
c00069fc:	83 3c 85 d0 fe 01 c0 00 	cmp    DWORD PTR [eax*4-0x3ffe0130],0x0
c0006a04:	0f 85 5c 02 00 00    	jne    c0006c66 <iso_readdir+0x2ac>
c0006a0a:	8d 04 f6             	lea    eax,[esi+esi*8]
c0006a0d:	8d 14 86             	lea    edx,[esi+eax*4]
c0006a10:	8b 04 95 48 fe 01 c0 	mov    eax,DWORD PTR [edx*4-0x3ffe01b8]
c0006a17:	8b 0c 95 4c fe 01 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffe01b4]
c0006a1e:	39 c8                	cmp    eax,ecx
c0006a20:	73 57                	jae    c0006a79 <iso_readdir+0xbf>
c0006a22:	8d 14 f6             	lea    edx,[esi+esi*8]
c0006a25:	8d 3c 96             	lea    edi,[esi+edx*4]
c0006a28:	c1 e7 02             	shl    edi,0x2
c0006a2b:	c1 e8 0b             	shr    eax,0xb
c0006a2e:	03 87 40 fe 01 c0    	add    eax,DWORD PTR [edi-0x3ffe01c0]
c0006a34:	e8 e2 f6 ff ff       	call   c000611b <biread>
c0006a39:	85 c0                	test   eax,eax
c0006a3b:	0f 88 2f 02 00 00    	js     c0006c70 <iso_readdir+0x2b6>
c0006a41:	8b 14 85 00 08 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdf800]
c0006a48:	83 c2 04             	add    edx,0x4
c0006a4b:	8b 87 48 fe 01 c0    	mov    eax,DWORD PTR [edi-0x3ffe01b8]
c0006a51:	89 c3                	mov    ebx,eax
c0006a53:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0006a59:	01 d3                	add    ebx,edx
c0006a5b:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0006a5d:	84 c9                	test   cl,cl
c0006a5f:	75 22                	jne    c0006a83 <iso_readdir+0xc9>
c0006a61:	25 00 f8 ff ff       	and    eax,0xfffff800
c0006a66:	05 00 08 00 00       	add    eax,0x800
c0006a6b:	89 87 48 fe 01 c0    	mov    DWORD PTR [edi-0x3ffe01b8],eax
c0006a71:	3b 87 4c fe 01 c0    	cmp    eax,DWORD PTR [edi-0x3ffe01b4]
c0006a77:	72 b2                	jb     c0006a2b <iso_readdir+0x71>
c0006a79:	b8 00 00 00 00       	mov    eax,0x0
c0006a7e:	e9 83 00 00 00       	jmp    c0006b06 <iso_readdir+0x14c>
c0006a83:	8d 3c f6             	lea    edi,[esi+esi*8]
c0006a86:	8d 3c be             	lea    edi,[esi+edi*4]
c0006a89:	3b 04 bd 4c fe 01 c0 	cmp    eax,DWORD PTR [edi*4-0x3ffe01b4]
c0006a90:	0f 83 e4 01 00 00    	jae    c0006c7a <iso_readdir+0x2c0>
c0006a96:	80 7b 21 00          	cmp    BYTE PTR [ebx+0x21],0x0
c0006a9a:	75 06                	jne    c0006aa2 <iso_readdir+0xe8>
c0006a9c:	80 7b 20 01          	cmp    BYTE PTR [ebx+0x20],0x1
c0006aa0:	74 6c                	je     c0006b0e <iso_readdir+0x154>
c0006aa2:	83 3d 40 08 02 c0 00 	cmp    DWORD PTR ds:0xc0020840,0x0
c0006aa9:	0f 84 9d 00 00 00    	je     c0006b4c <iso_readdir+0x192>
c0006aaf:	31 c9                	xor    ecx,ecx
c0006ab1:	8a 4b 20             	mov    cl,BYTE PTR [ebx+0x20]
c0006ab4:	8d 53 21             	lea    edx,[ebx+0x21]
c0006ab7:	8d 04 f6             	lea    eax,[esi+esi*8]
c0006aba:	8d 04 86             	lea    eax,[esi+eax*4]
c0006abd:	8d 04 85 58 fe 01 c0 	lea    eax,[eax*4-0x3ffe01a8]
c0006ac4:	e8 be f2 ff ff       	call   c0005d87 <ucs2utfn>
c0006ac9:	f6 43 19 02          	test   BYTE PTR [ebx+0x19],0x2
c0006acd:	0f 85 66 01 00 00    	jne    c0006c39 <iso_readdir+0x27f>
c0006ad3:	8d 43 0a             	lea    eax,[ebx+0xa]
c0006ad6:	e8 a3 f3 ff ff       	call   c0005e7e <iso_733>
c0006adb:	ba 00 00 00 00       	mov    edx,0x0
c0006ae0:	8d 0c f6             	lea    ecx,[esi+esi*8]
c0006ae3:	c1 e1 02             	shl    ecx,0x2
c0006ae6:	8d 3c 31             	lea    edi,[ecx+esi*1]
c0006ae9:	8d 3c bd 40 fe 01 c0 	lea    edi,[edi*4-0x3ffe01c0]
c0006af0:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c0006af3:	89 57 14             	mov    DWORD PTR [edi+0x14],edx
c0006af6:	31 c0                	xor    eax,eax
c0006af8:	8a 03                	mov    al,BYTE PTR [ebx]
c0006afa:	01 47 08             	add    DWORD PTR [edi+0x8],eax
c0006afd:	01 ce                	add    esi,ecx
c0006aff:	8d 04 b5 50 fe 01 c0 	lea    eax,[esi*4-0x3ffe01b0]
c0006b06:	83 c4 1c             	add    esp,0x1c
c0006b09:	5b                   	pop    ebx
c0006b0a:	5e                   	pop    esi
c0006b0b:	5f                   	pop    edi
c0006b0c:	5d                   	pop    ebp
c0006b0d:	c3                   	ret    
c0006b0e:	81 e1 ff 00 00 00    	and    ecx,0xff
c0006b14:	01 c8                	add    eax,ecx
c0006b16:	8d 3c bd 40 fe 01 c0 	lea    edi,[edi*4-0x3ffe01c0]
c0006b1d:	89 47 08             	mov    DWORD PTR [edi+0x8],eax
c0006b20:	89 c1                	mov    ecx,eax
c0006b22:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0006b28:	31 db                	xor    ebx,ebx
c0006b2a:	8a 1c 0a             	mov    bl,BYTE PTR [edx+ecx*1]
c0006b2d:	89 d9                	mov    ecx,ebx
c0006b2f:	01 c8                	add    eax,ecx
c0006b31:	89 47 08             	mov    DWORD PTR [edi+0x8],eax
c0006b34:	25 ff 07 00 00       	and    eax,0x7ff
c0006b39:	8d 1c 02             	lea    ebx,[edx+eax*1]
c0006b3c:	80 3b 00             	cmp    BYTE PTR [ebx],0x0
c0006b3f:	0f 85 5d ff ff ff    	jne    c0006aa2 <iso_readdir+0xe8>
c0006b45:	b8 00 00 00 00       	mov    eax,0x0
c0006b4a:	eb ba                	jmp    c0006b06 <iso_readdir+0x14c>
c0006b4c:	8d 3c f6             	lea    edi,[esi+esi*8]
c0006b4f:	c1 e7 02             	shl    edi,0x2
c0006b52:	8d 04 37             	lea    eax,[edi+esi*1]
c0006b55:	8d 2c 85 58 fe 01 c0 	lea    ebp,[eax*4-0x3ffe01a8]
c0006b5c:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c0006b60:	83 ec 04             	sub    esp,0x4
c0006b63:	31 c0                	xor    eax,eax
c0006b65:	8a 43 20             	mov    al,BYTE PTR [ebx+0x20]
c0006b68:	50                   	push   eax
c0006b69:	8d 43 21             	lea    eax,[ebx+0x21]
c0006b6c:	50                   	push   eax
c0006b6d:	55                   	push   ebp
c0006b6e:	e8 dd 9a ff ff       	call   c0000650 <strncpy>
c0006b73:	31 c0                	xor    eax,eax
c0006b75:	8a 43 20             	mov    al,BYTE PTR [ebx+0x20]
c0006b78:	01 f7                	add    edi,esi
c0006b7a:	c6 84 b8 58 fe 01 c0 00 	mov    BYTE PTR [eax+edi*4-0x3ffe01a8],0x0
c0006b82:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0006b85:	e8 e1 fd ff ff       	call   c000696b <fn_postprocess>
c0006b8a:	31 c0                	xor    eax,eax
c0006b8c:	8a 43 20             	mov    al,BYTE PTR [ebx+0x20]
c0006b8f:	0f b6 2b             	movzx  ebp,BYTE PTR [ebx]
c0006b92:	81 e5 ff 00 00 00    	and    ebp,0xff
c0006b98:	29 c5                	sub    ebp,eax
c0006b9a:	8d 7c 03 21          	lea    edi,[ebx+eax*1+0x21]
c0006b9e:	83 c4 10             	add    esp,0x10
c0006ba1:	f6 43 20 01          	test   BYTE PTR [ebx+0x20],0x1
c0006ba5:	74 25                	je     c0006bcc <iso_readdir+0x212>
c0006ba7:	83 ed 21             	sub    ebp,0x21
c0006baa:	83 fd 03             	cmp    ebp,0x3
c0006bad:	0f 8e 16 ff ff ff    	jle    c0006ac9 <iso_readdir+0x10f>
c0006bb3:	8a 47 03             	mov    al,BYTE PTR [edi+0x3]
c0006bb6:	48                   	dec    eax
c0006bb7:	3c 01                	cmp    al,0x1
c0006bb9:	0f 87 0a ff ff ff    	ja     c0006ac9 <iso_readdir+0x10f>
c0006bbf:	8d 04 f5 00 00 00 00 	lea    eax,[esi*8+0x0]
c0006bc6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006bca:	eb 23                	jmp    c0006bef <iso_readdir+0x235>
c0006bcc:	47                   	inc    edi
c0006bcd:	83 ed 22             	sub    ebp,0x22
c0006bd0:	eb d8                	jmp    c0006baa <iso_readdir+0x1f0>
c0006bd2:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c0006bd6:	29 c5                	sub    ebp,eax
c0006bd8:	01 c7                	add    edi,eax
c0006bda:	83 fd 03             	cmp    ebp,0x3
c0006bdd:	0f 8e e6 fe ff ff    	jle    c0006ac9 <iso_readdir+0x10f>
c0006be3:	8a 47 03             	mov    al,BYTE PTR [edi+0x3]
c0006be6:	48                   	dec    eax
c0006be7:	3c 01                	cmp    al,0x1
c0006be9:	0f 87 da fe ff ff    	ja     c0006ac9 <iso_readdir+0x10f>
c0006bef:	83 ec 04             	sub    esp,0x4
c0006bf2:	6a 02                	push   0x2
c0006bf4:	68 c0 d3 01 c0       	push   0xc001d3c0
c0006bf9:	57                   	push   edi
c0006bfa:	e8 81 9b ff ff       	call   c0000780 <strncmp>
c0006bff:	83 c4 10             	add    esp,0x10
c0006c02:	85 c0                	test   eax,eax
c0006c04:	75 cc                	jne    c0006bd2 <iso_readdir+0x218>
c0006c06:	83 ec 04             	sub    esp,0x4
c0006c09:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c0006c0d:	83 e8 05             	sub    eax,0x5
c0006c10:	50                   	push   eax
c0006c11:	8d 47 05             	lea    eax,[edi+0x5]
c0006c14:	50                   	push   eax
c0006c15:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0006c19:	e8 32 9a ff ff       	call   c0000650 <strncpy>
c0006c1e:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c0006c22:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006c26:	8d 14 31             	lea    edx,[ecx+esi*1]
c0006c29:	8d 14 96             	lea    edx,[esi+edx*4]
c0006c2c:	c6 84 90 53 fe 01 c0 00 	mov    BYTE PTR [eax+edx*4-0x3ffe01ad],0x0
c0006c34:	83 c4 10             	add    esp,0x10
c0006c37:	eb 99                	jmp    c0006bd2 <iso_readdir+0x218>
c0006c39:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0006c3e:	ba ff ff ff ff       	mov    edx,0xffffffff
c0006c43:	e9 98 fe ff ff       	jmp    c0006ae0 <iso_readdir+0x126>
c0006c48:	b8 00 00 00 00       	mov    eax,0x0
c0006c4d:	e9 b4 fe ff ff       	jmp    c0006b06 <iso_readdir+0x14c>
c0006c52:	b8 00 00 00 00       	mov    eax,0x0
c0006c57:	e9 aa fe ff ff       	jmp    c0006b06 <iso_readdir+0x14c>
c0006c5c:	b8 00 00 00 00       	mov    eax,0x0
c0006c61:	e9 a0 fe ff ff       	jmp    c0006b06 <iso_readdir+0x14c>
c0006c66:	b8 00 00 00 00       	mov    eax,0x0
c0006c6b:	e9 96 fe ff ff       	jmp    c0006b06 <iso_readdir+0x14c>
c0006c70:	b8 00 00 00 00       	mov    eax,0x0
c0006c75:	e9 8c fe ff ff       	jmp    c0006b06 <iso_readdir+0x14c>
c0006c7a:	b8 00 00 00 00       	mov    eax,0x0
c0006c7f:	e9 82 fe ff ff       	jmp    c0006b06 <iso_readdir+0x14c>

c0006c84 <iso_reset>:
c0006c84:	e8 45 f2 ff ff       	call   c0005ece <iso_break_all>
c0006c89:	e8 2b f2 ff ff       	call   c0005eb9 <bclear>
c0006c8e:	b8 00 00 00 00       	mov    eax,0x0
c0006c93:	c3                   	ret    

c0006c94 <init_percd>:
c0006c94:	57                   	push   edi
c0006c95:	56                   	push   esi
c0006c96:	53                   	push   ebx
c0006c97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c9b:	a2 c0 f9 01 c0       	mov    ds:0xc001f9c0,al
c0006ca0:	e8 df ff ff ff       	call   c0006c84 <iso_reset>
c0006ca5:	c7 05 40 08 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0020840,0x0
c0006caf:	bb 01 00 00 00       	mov    ebx,0x1
c0006cb4:	eb 06                	jmp    c0006cbc <init_percd+0x28>
c0006cb6:	43                   	inc    ebx
c0006cb7:	83 fb 04             	cmp    ebx,0x4
c0006cba:	74 53                	je     c0006d0f <init_percd+0x7b>
c0006cbc:	a1 ac 07 02 c0       	mov    eax,ds:0xc00207ac
c0006cc1:	8d 44 03 10          	lea    eax,[ebx+eax*1+0x10]
c0006cc5:	e8 51 f4 ff ff       	call   c000611b <biread>
c0006cca:	89 c6                	mov    esi,eax
c0006ccc:	85 c0                	test   eax,eax
c0006cce:	0f 88 c1 00 00 00    	js     c0006d95 <init_percd+0x101>
c0006cd4:	83 ec 04             	sub    esp,0x4
c0006cd7:	6a 06                	push   0x6
c0006cd9:	68 c3 d3 01 c0       	push   0xc001d3c3
c0006cde:	8b 04 85 00 08 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdf800]
c0006ce5:	83 c0 04             	add    eax,0x4
c0006ce8:	50                   	push   eax
c0006ce9:	e8 c2 96 ff ff       	call   c00003b0 <memcmp>
c0006cee:	83 c4 10             	add    esp,0x10
c0006cf1:	85 c0                	test   eax,eax
c0006cf3:	75 c1                	jne    c0006cb6 <init_percd+0x22>
c0006cf5:	8b 04 b5 00 08 02 c0 	mov    eax,DWORD PTR [esi*4-0x3ffdf800]
c0006cfc:	83 c0 5c             	add    eax,0x5c
c0006cff:	e8 1c f1 ff ff       	call   c0005e20 <isjoliet>
c0006d04:	a3 40 08 02 c0       	mov    ds:0xc0020840,eax
c0006d09:	85 c0                	test   eax,eax
c0006d0b:	74 a9                	je     c0006cb6 <init_percd+0x22>
c0006d0d:	eb 09                	jmp    c0006d18 <init_percd+0x84>
c0006d0f:	83 3d 40 08 02 c0 00 	cmp    DWORD PTR ds:0xc0020840,0x0
c0006d16:	74 42                	je     c0006d5a <init_percd+0xc6>
c0006d18:	8b 34 b5 00 08 02 c0 	mov    esi,DWORD PTR [esi*4-0x3ffdf800]
c0006d1f:	81 c6 a0 00 00 00    	add    esi,0xa0
c0006d25:	bf 80 07 02 c0       	mov    edi,0xc0020780
c0006d2a:	b9 22 00 00 00       	mov    ecx,0x22
c0006d2f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0006d31:	b8 82 07 02 c0       	mov    eax,0xc0020782
c0006d36:	e8 43 f1 ff ff       	call   c0005e7e <iso_733>
c0006d3b:	a3 a8 07 02 c0       	mov    ds:0xc00207a8,eax
c0006d40:	b8 8a 07 02 c0       	mov    eax,0xc002078a
c0006d45:	e8 34 f1 ff ff       	call   c0005e7e <iso_733>
c0006d4a:	a3 a4 07 02 c0       	mov    ds:0xc00207a4,eax
c0006d4f:	bb 00 00 00 00       	mov    ebx,0x0
c0006d54:	89 d8                	mov    eax,ebx
c0006d56:	5b                   	pop    ebx
c0006d57:	5e                   	pop    esi
c0006d58:	5f                   	pop    edi
c0006d59:	c3                   	ret    
c0006d5a:	a1 ac 07 02 c0       	mov    eax,ds:0xc00207ac
c0006d5f:	83 c0 10             	add    eax,0x10
c0006d62:	e8 b4 f3 ff ff       	call   c000611b <biread>
c0006d67:	89 c6                	mov    esi,eax
c0006d69:	85 c0                	test   eax,eax
c0006d6b:	78 e7                	js     c0006d54 <init_percd+0xc0>
c0006d6d:	83 ec 04             	sub    esp,0x4
c0006d70:	6a 06                	push   0x6
c0006d72:	68 ca d3 01 c0       	push   0xc001d3ca
c0006d77:	8b 04 85 00 08 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdf800]
c0006d7e:	83 c0 04             	add    eax,0x4
c0006d81:	50                   	push   eax
c0006d82:	e8 29 96 ff ff       	call   c00003b0 <memcmp>
c0006d87:	83 c4 10             	add    esp,0x10
c0006d8a:	85 c0                	test   eax,eax
c0006d8c:	74 8a                	je     c0006d18 <init_percd+0x84>
c0006d8e:	bb ff ff ff ff       	mov    ebx,0xffffffff
c0006d93:	eb bf                	jmp    c0006d54 <init_percd+0xc0>
c0006d95:	89 c3                	mov    ebx,eax
c0006d97:	eb bb                	jmp    c0006d54 <init_percd+0xc0>

c0006d99 <iso_ioctl>:
c0006d99:	e8 e6 fe ff ff       	call   c0006c84 <iso_reset>
c0006d9e:	b8 00 00 00 00       	mov    eax,0x0
c0006da3:	c3                   	ret    

c0006da4 <fs_iso9660_init>:
c0006da4:	53                   	push   ebx
c0006da5:	83 ec 0c             	sub    esp,0xc
c0006da8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006dac:	a2 c0 f9 01 c0       	mov    ds:0xc001f9c0,al
c0006db1:	68 40 09 00 00       	push   0x940
c0006db6:	6a 00                	push   0x0
c0006db8:	68 40 fe 01 c0       	push   0xc001fe40
c0006dbd:	e8 2e 97 ff ff       	call   c00004f0 <memset>
c0006dc2:	c7 05 40 fe 01 c0 ff ff ff ff 	mov    DWORD PTR ds:0xc001fe40,0xffffffff
c0006dcc:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006dd3:	e8 89 10 00 00       	call   c0007e61 <malloc>
c0006dd8:	a3 b0 07 02 c0       	mov    ds:0xc00207b0,eax
c0006ddd:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006de4:	e8 78 10 00 00       	call   c0007e61 <malloc>
c0006de9:	a3 20 fe 01 c0       	mov    ds:0xc001fe20,eax
c0006dee:	83 c4 10             	add    esp,0x10
c0006df1:	bb 00 00 00 00       	mov    ebx,0x0
c0006df6:	83 ec 0c             	sub    esp,0xc
c0006df9:	68 04 08 00 00       	push   0x804
c0006dfe:	e8 5e 10 00 00       	call   c0007e61 <malloc>
c0006e03:	89 04 9d 00 08 02 c0 	mov    DWORD PTR [ebx*4-0x3ffdf800],eax
c0006e0a:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006e10:	c7 04 24 04 08 00 00 	mov    DWORD PTR [esp],0x804
c0006e17:	e8 45 10 00 00       	call   c0007e61 <malloc>
c0006e1c:	89 04 9d c0 07 02 c0 	mov    DWORD PTR [ebx*4-0x3ffdf840],eax
c0006e23:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006e29:	43                   	inc    ebx
c0006e2a:	83 c4 10             	add    esp,0x10
c0006e2d:	83 fb 10             	cmp    ebx,0x10
c0006e30:	75 c4                	jne    c0006df6 <fs_iso9660_init+0x52>
c0006e32:	b8 00 00 00 00       	mov    eax,0x0
c0006e37:	83 c4 08             	add    esp,0x8
c0006e3a:	5b                   	pop    ebx
c0006e3b:	c3                   	ret    

c0006e3c <fs_iso9660_shutdown>:
c0006e3c:	53                   	push   ebx
c0006e3d:	83 ec 08             	sub    esp,0x8
c0006e40:	bb 00 00 00 00       	mov    ebx,0x0
c0006e45:	83 ec 0c             	sub    esp,0xc
c0006e48:	ff 34 9d 00 08 02 c0 	push   DWORD PTR [ebx*4-0x3ffdf800]
c0006e4f:	e8 1d 10 00 00       	call   c0007e71 <free>
c0006e54:	83 c4 04             	add    esp,0x4
c0006e57:	ff 34 9d c0 07 02 c0 	push   DWORD PTR [ebx*4-0x3ffdf840]
c0006e5e:	e8 0e 10 00 00       	call   c0007e71 <free>
c0006e63:	43                   	inc    ebx
c0006e64:	83 c4 10             	add    esp,0x10
c0006e67:	83 fb 10             	cmp    ebx,0x10
c0006e6a:	75 d9                	jne    c0006e45 <fs_iso9660_shutdown+0x9>
c0006e6c:	a1 b0 07 02 c0       	mov    eax,ds:0xc00207b0
c0006e71:	85 c0                	test   eax,eax
c0006e73:	74 0c                	je     c0006e81 <fs_iso9660_shutdown+0x45>
c0006e75:	83 ec 0c             	sub    esp,0xc
c0006e78:	50                   	push   eax
c0006e79:	e8 f3 0f 00 00       	call   c0007e71 <free>
c0006e7e:	83 c4 10             	add    esp,0x10
c0006e81:	a1 20 fe 01 c0       	mov    eax,ds:0xc001fe20
c0006e86:	85 c0                	test   eax,eax
c0006e88:	74 0c                	je     c0006e96 <fs_iso9660_shutdown+0x5a>
c0006e8a:	83 ec 0c             	sub    esp,0xc
c0006e8d:	50                   	push   eax
c0006e8e:	e8 de 0f 00 00       	call   c0007e71 <free>
c0006e93:	83 c4 10             	add    esp,0x10
c0006e96:	c7 05 20 fe 01 c0 00 00 00 00 	mov    DWORD PTR ds:0xc001fe20,0x0
c0006ea0:	c7 05 b0 07 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00207b0,0x0
c0006eaa:	b8 00 00 00 00       	mov    eax,0x0
c0006eaf:	83 c4 08             	add    esp,0x8
c0006eb2:	5b                   	pop    ebx
c0006eb3:	c3                   	ret    

c0006eb4 <CPU::current()>:
c0006eb4:	a1 44 08 02 c0       	mov    eax,ds:0xc0020844
c0006eb9:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0006ebf:	c3                   	ret    

c0006ec0 <operator new(unsigned long)>:
c0006ec0:	e9 9c 0f 00 00       	jmp    c0007e61 <malloc>

c0006ec5 <operator delete(void*)>:
c0006ec5:	e9 b7 0f 00 00       	jmp    c0007e81 <rfree>

c0006eca <disableIRQs()>:
c0006eca:	fa                   	cli    
c0006ecb:	c3                   	ret    

c0006ecc <enableIRQs()>:
c0006ecc:	fb                   	sti    
c0006ecd:	c3                   	ret    

c0006ece <lockScheduler()>:
c0006ece:	fa                   	cli    
c0006ecf:	ff 05 08 3d 02 c0    	inc    DWORD PTR ds:0xc0023d08
c0006ed5:	c3                   	ret    

c0006ed6 <unlockScheduler()>:
c0006ed6:	a1 08 3d 02 c0       	mov    eax,ds:0xc0023d08
c0006edb:	48                   	dec    eax
c0006edc:	a3 08 3d 02 c0       	mov    ds:0xc0023d08,eax
c0006ee1:	75 01                	jne    c0006ee4 <unlockScheduler()+0xe>
c0006ee3:	fb                   	sti    
c0006ee4:	c3                   	ret    

c0006ee5 <lockStuff()>:
c0006ee5:	fa                   	cli    
c0006ee6:	ff 05 08 3d 02 c0    	inc    DWORD PTR ds:0xc0023d08
c0006eec:	ff 05 04 3d 02 c0    	inc    DWORD PTR ds:0xc0023d04
c0006ef2:	c3                   	ret    

c0006ef3 <unlockStuff()>:
c0006ef3:	83 ec 0c             	sub    esp,0xc
c0006ef6:	a1 04 3d 02 c0       	mov    eax,ds:0xc0023d04
c0006efb:	48                   	dec    eax
c0006efc:	a3 04 3d 02 c0       	mov    ds:0xc0023d04,eax
c0006f01:	75 18                	jne    c0006f1b <unlockStuff()+0x28>
c0006f03:	83 3d 00 3d 02 c0 00 	cmp    DWORD PTR ds:0xc0023d00,0x0
c0006f0a:	74 0f                	je     c0006f1b <unlockStuff()+0x28>
c0006f0c:	c7 05 00 3d 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023d00,0x0
c0006f16:	e8 79 cb 00 00       	call   c0013a94 <schedule()>
c0006f1b:	a1 08 3d 02 c0       	mov    eax,ds:0xc0023d08
c0006f20:	48                   	dec    eax
c0006f21:	a3 08 3d 02 c0       	mov    ds:0xc0023d08,eax
c0006f26:	75 01                	jne    c0006f29 <unlockStuff()+0x36>
c0006f28:	fb                   	sti    
c0006f29:	83 c4 0c             	add    esp,0xc
c0006f2c:	c3                   	ret    

c0006f2d <Virt::getAKernelVAS()>:
c0006f2d:	a1 30 09 02 c0       	mov    eax,ds:0xc0020930
c0006f32:	c3                   	ret    

c0006f33 <__not_memcpy>:
c0006f33:	57                   	push   edi
c0006f34:	56                   	push   esi
c0006f35:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006f39:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0006f3d:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0006f41:	89 c7                	mov    edi,eax
c0006f43:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0006f45:	5e                   	pop    esi
c0006f46:	5f                   	pop    edi
c0006f47:	c3                   	ret    

c0006f48 <Krnl::resolveCompatibilitySymbol(char*)>:
c0006f48:	83 ec 0c             	sub    esp,0xc
c0006f4b:	83 ec 08             	sub    esp,0x8
c0006f4e:	68 d1 d3 01 c0       	push   0xc001d3d1
c0006f53:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0006f57:	e8 a4 97 ff ff       	call   c0000700 <strcmp>
c0006f5c:	83 c4 10             	add    esp,0x10
c0006f5f:	85 c0                	test   eax,eax
c0006f61:	0f 94 c0             	sete   al
c0006f64:	84 c0                	test   al,al
c0006f66:	74 0c                	je     c0006f74 <Krnl::resolveCompatibilitySymbol(char*)+0x2c>
c0006f68:	b8 44 08 02 c0       	mov    eax,0xc0020844
c0006f6d:	e9 ea 00 00 00       	jmp    c000705c <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c0006f72:	66 90                	xchg   ax,ax
c0006f74:	83 ec 08             	sub    esp,0x8
c0006f77:	68 da d3 01 c0       	push   0xc001d3da
c0006f7c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0006f80:	e8 7b 97 ff ff       	call   c0000700 <strcmp>
c0006f85:	83 c4 10             	add    esp,0x10
c0006f88:	85 c0                	test   eax,eax
c0006f8a:	0f 94 c0             	sete   al
c0006f8d:	84 c0                	test   al,al
c0006f8f:	74 0b                	je     c0006f9c <Krnl::resolveCompatibilitySymbol(char*)+0x54>
c0006f91:	b8 60 c0 01 c0       	mov    eax,0xc001c060
c0006f96:	e9 c1 00 00 00       	jmp    c000705c <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c0006f9b:	90                   	nop
c0006f9c:	83 ec 08             	sub    esp,0x8
c0006f9f:	68 e4 d3 01 c0       	push   0xc001d3e4
c0006fa4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0006fa8:	e8 53 97 ff ff       	call   c0000700 <strcmp>
c0006fad:	83 c4 10             	add    esp,0x10
c0006fb0:	85 c0                	test   eax,eax
c0006fb2:	0f 94 c0             	sete   al
c0006fb5:	84 c0                	test   al,al
c0006fb7:	74 0b                	je     c0006fc4 <Krnl::resolveCompatibilitySymbol(char*)+0x7c>
c0006fb9:	b8 94 bd 01 c0       	mov    eax,0xc001bd94
c0006fbe:	e9 99 00 00 00       	jmp    c000705c <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c0006fc3:	90                   	nop
c0006fc4:	83 ec 08             	sub    esp,0x8
c0006fc7:	68 ed d3 01 c0       	push   0xc001d3ed
c0006fcc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0006fd0:	e8 2b 97 ff ff       	call   c0000700 <strcmp>
c0006fd5:	83 c4 10             	add    esp,0x10
c0006fd8:	85 c0                	test   eax,eax
c0006fda:	0f 94 c0             	sete   al
c0006fdd:	84 c0                	test   al,al
c0006fdf:	74 07                	je     c0006fe8 <Krnl::resolveCompatibilitySymbol(char*)+0xa0>
c0006fe1:	b8 60 c1 01 c0       	mov    eax,0xc001c160
c0006fe6:	eb 74                	jmp    c000705c <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c0006fe8:	83 ec 08             	sub    esp,0x8
c0006feb:	68 f7 d3 01 c0       	push   0xc001d3f7
c0006ff0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0006ff4:	e8 07 97 ff ff       	call   c0000700 <strcmp>
c0006ff9:	83 c4 10             	add    esp,0x10
c0006ffc:	85 c0                	test   eax,eax
c0006ffe:	0f 94 c0             	sete   al
c0007001:	84 c0                	test   al,al
c0007003:	74 07                	je     c000700c <Krnl::resolveCompatibilitySymbol(char*)+0xc4>
c0007005:	b8 e0 be 01 c0       	mov    eax,0xc001bee0
c000700a:	eb 50                	jmp    c000705c <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c000700c:	83 ec 08             	sub    esp,0x8
c000700f:	68 00 d4 01 c0       	push   0xc001d400
c0007014:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007018:	e8 e3 96 ff ff       	call   c0000700 <strcmp>
c000701d:	83 c4 10             	add    esp,0x10
c0007020:	85 c0                	test   eax,eax
c0007022:	0f 94 c0             	sete   al
c0007025:	84 c0                	test   al,al
c0007027:	74 07                	je     c0007030 <Krnl::resolveCompatibilitySymbol(char*)+0xe8>
c0007029:	b8 48 08 02 c0       	mov    eax,0xc0020848
c000702e:	eb 2c                	jmp    c000705c <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c0007030:	83 ec 08             	sub    esp,0x8
c0007033:	68 0d d4 01 c0       	push   0xc001d40d
c0007038:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000703c:	e8 bf 96 ff ff       	call   c0000700 <strcmp>
c0007041:	83 c4 10             	add    esp,0x10
c0007044:	85 c0                	test   eax,eax
c0007046:	0f 94 c0             	sete   al
c0007049:	84 c0                	test   al,al
c000704b:	74 07                	je     c0007054 <Krnl::resolveCompatibilitySymbol(char*)+0x10c>
c000704d:	b8 49 08 02 c0       	mov    eax,0xc0020849
c0007052:	eb 08                	jmp    c000705c <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c0007054:	b8 00 00 00 00       	mov    eax,0x0
c0007059:	8d 76 00             	lea    esi,[esi+0x0]
c000705c:	83 c4 0c             	add    esp,0xc
c000705f:	c3                   	ret    

c0007060 <Computer::close(int, int, void*)>:
c0007060:	57                   	push   edi
c0007061:	56                   	push   esi
c0007062:	53                   	push   ebx
c0007063:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0007067:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000706b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000706f:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
c0007075:	83 ec 0c             	sub    esp,0xc
c0007078:	50                   	push   eax
c0007079:	e8 d0 50 00 00       	call   c000c14e <Device::closeAll()>
c000707e:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
c0007084:	83 c4 10             	add    esp,0x10
c0007087:	8b 10                	mov    edx,DWORD PTR [eax]
c0007089:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c000708d:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c0007095:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0007099:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000709d:	5b                   	pop    ebx
c000709e:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00070a1:	5e                   	pop    esi
c00070a2:	5f                   	pop    edi
c00070a3:	ff e0                	jmp    eax

c00070a5 <Krnl::firstTask()>:
c00070a5:	53                   	push   ebx
c00070a6:	83 ec 14             	sub    esp,0x14
c00070a9:	fb                   	sti    
c00070aa:	68 1a d4 01 c0       	push   0xc001d41a
c00070af:	e8 07 0e 00 00       	call   c0007ebb <Krnl::setBootMessage(char const*)>
c00070b4:	c7 04 24 1f 07 00 00 	mov    DWORD PTR [esp],0x71f
c00070bb:	e8 a1 0d 00 00       	call   c0007e61 <malloc>
c00070c0:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00070c7:	89 c3                	mov    ebx,eax
c00070c9:	a1 30 3d 02 c0       	mov    eax,ds:0xc0023d30
c00070ce:	50                   	push   eax
c00070cf:	68 33 d4 01 c0       	push   0xc001d433
c00070d4:	6a 01                	push   0x1
c00070d6:	53                   	push   ebx
c00070d7:	e8 8c c5 00 00       	call   c0013668 <Process::Process(bool, char const*, Process*, char**)>
c00070dc:	83 c4 20             	add    esp,0x20
c00070df:	68 ff 00 00 00       	push   0xff
c00070e4:	6a 00                	push   0x0
c00070e6:	68 bb 78 00 c0       	push   0xc00078bb
c00070eb:	53                   	push   ebx
c00070ec:	e8 83 c7 00 00       	call   c0013874 <Process::createThread(void (*)(void*), void*, int)>
c00070f1:	8b 15 30 3d 02 c0    	mov    edx,DWORD PTR ds:0xc0023d30
c00070f7:	6a 7a                	push   0x7a
c00070f9:	6a 00                	push   0x0
c00070fb:	68 c8 42 01 c0       	push   0xc00142c8
c0007100:	52                   	push   edx
c0007101:	e8 6e c7 00 00       	call   c0013874 <Process::createThread(void (*)(void*), void*, int)>
c0007106:	83 c4 14             	add    esp,0x14
c0007109:	a3 e8 3c 02 c0       	mov    ds:0xc0023ce8,eax
c000710e:	68 30 d5 01 c0       	push   0xc001d530
c0007113:	c6 05 49 08 02 c0 01 	mov    BYTE PTR ds:0xc0020849,0x1
c000711a:	e8 9c 0d 00 00       	call   c0007ebb <Krnl::setBootMessage(char const*)>
c000711f:	e8 83 d5 00 00       	call   c00146a7 <Vm::initialise8086()>
c0007124:	e8 69 3e 00 00       	call   c000af92 <Fs::initVFS()>
c0007129:	c7 04 24 40 d4 01 c0 	mov    DWORD PTR [esp],0xc001d440
c0007130:	e8 86 0d 00 00       	call   c0007ebb <Krnl::setBootMessage(char const*)>
c0007135:	a1 44 08 02 c0       	mov    eax,ds:0xc0020844
c000713a:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c0007140:	8b 10                	mov    edx,DWORD PTR [eax]
c0007142:	6a 00                	push   0x0
c0007144:	6a 00                	push   0x0
c0007146:	6a 00                	push   0x0
c0007148:	50                   	push   eax
c0007149:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000714c:	83 c4 14             	add    esp,0x14
c000714f:	68 30 d5 01 c0       	push   0xc001d530
c0007154:	e8 62 0d 00 00       	call   c0007ebb <Krnl::setBootMessage(char const*)>
c0007159:	e8 9c ad 00 00       	call   c0011efa <Sys::loadSyscalls()>
c000715e:	e8 d3 94 00 00       	call   c0010636 <Krnl::loadSystemEnv()>
c0007163:	e8 98 97 00 00       	call   c0010900 <Krnl::setupPowerManager()>
c0007168:	83 c4 0c             	add    esp,0xc
c000716b:	6a 3a                	push   0x3a
c000716d:	68 5a d4 01 c0       	push   0xc001d45a
c0007172:	68 63 d4 01 c0       	push   0xc001d463
c0007177:	e8 ae 9c 00 00       	call   c0010e2a <Reg::readIntWithDefault(char*, char*, int)>
c000717c:	89 04 24             	mov    DWORD PTR [esp],eax
c000717f:	e8 1c 49 00 00       	call   c000baa0 <User::loadClockSettings(int)>
c0007184:	c7 04 24 54 d5 01 c0 	mov    DWORD PTR [esp],0xc001d554
c000718b:	e8 2b 0d 00 00       	call   c0007ebb <Krnl::setBootMessage(char const*)>
c0007190:	59                   	pop    ecx
c0007191:	a1 44 08 02 c0       	mov    eax,ds:0xc0020844
c0007196:	8b 98 68 01 00 00    	mov    ebx,DWORD PTR [eax+0x168]
c000719c:	53                   	push   ebx
c000719d:	e8 aa 4f 00 00       	call   c000c14c <Device::loadDriversForAll()>
c00071a2:	c7 04 24 6b d4 01 c0 	mov    DWORD PTR [esp],0xc001d46b
c00071a9:	e8 0d 0d 00 00       	call   c0007ebb <Krnl::setBootMessage(char const*)>
c00071ae:	58                   	pop    eax
c00071af:	8b 1d 44 08 02 c0    	mov    ebx,DWORD PTR ds:0xc0020844
c00071b5:	5a                   	pop    edx
c00071b6:	6a 01                	push   0x1
c00071b8:	68 7c d4 01 c0       	push   0xc001d47c
c00071bd:	e8 e0 be 00 00       	call   c00130a2 <Thr::loadDLL(char const*, bool)>
c00071c2:	59                   	pop    ecx
c00071c3:	5a                   	pop    edx
c00071c4:	53                   	push   ebx
c00071c5:	50                   	push   eax
c00071c6:	e8 08 c1 00 00       	call   c00132d3 <Thr::executeDLL(unsigned long, void*)>
c00071cb:	83 c4 10             	add    esp,0x10
c00071ce:	83 ec 0c             	sub    esp,0xc
c00071d1:	6a 02                	push   0x2
c00071d3:	e8 b8 ca 00 00       	call   c0013c90 <blockTask(TaskState)>
c00071d8:	83 c4 10             	add    esp,0x10
c00071db:	eb f1                	jmp    c00071ce <Krnl::firstTask()+0x129>
c00071dd:	90                   	nop

c00071de <Computer::Computer()>:
c00071de:	83 ec 0c             	sub    esp,0xc
c00071e1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00071e5:	83 ec 08             	sub    esp,0x8
c00071e8:	68 98 d4 01 c0       	push   0xc001d498
c00071ed:	50                   	push   eax
c00071ee:	e8 d5 4f 00 00       	call   c000c1c8 <Device::Device(char const*)>
c00071f3:	83 c4 10             	add    esp,0x10
c00071f6:	ba a0 d5 01 c0       	mov    edx,0xc001d5a0
c00071fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00071ff:	89 10                	mov    DWORD PTR [eax],edx
c0007201:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007205:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000720f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007213:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c000721d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007221:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c0007227:	83 ca 04             	or     edx,0x4
c000722a:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c0007230:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007234:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000723a:	31 d2                	xor    edx,edx
c000723c:	88 c2                	mov    dl,al
c000723e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007242:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c0007249:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000724d:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0007253:	31 d2                	xor    edx,edx
c0007255:	88 c2                	mov    dl,al
c0007257:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000725b:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0007260:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007264:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000726a:	8d 50 01             	lea    edx,[eax+0x1]
c000726d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0007271:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0007277:	31 d2                	xor    edx,edx
c0007279:	88 c2                	mov    dl,al
c000727b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000727f:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0007283:	83 e1 3f             	and    ecx,0x3f
c0007286:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000728a:	90                   	nop
c000728b:	83 c4 0c             	add    esp,0xc
c000728e:	c3                   	ret    
c000728f:	90                   	nop

c0007290 <Computer::setBootMessage(char const*)>:
c0007290:	c3                   	ret    
c0007291:	90                   	nop

c0007292 <Computer::detectFeatures()>:
c0007292:	55                   	push   ebp
c0007293:	57                   	push   edi
c0007294:	56                   	push   esi
c0007295:	53                   	push   ebx
c0007296:	83 ec 1c             	sub    esp,0x1c
c0007299:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000729d:	81 a3 6c 01 00 00 04 00 fc ff 	and    DWORD PTR [ebx+0x16c],0xfffc0004
c00072a7:	e8 6d 8f ff ff       	call   c0000219 <detectCPUID>
c00072ac:	85 c0                	test   eax,eax
c00072ae:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c00072b4:	0f 95 c2             	setne  dl
c00072b7:	83 e0 fd             	and    eax,0xfffffffd
c00072ba:	01 d2                	add    edx,edx
c00072bc:	09 d0                	or     eax,edx
c00072be:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c00072c4:	a8 02                	test   al,0x2
c00072c6:	75 46                	jne    c000730e <Computer::detectFeatures()+0x7c>
c00072c8:	f6 05 5d 08 02 c0 04 	test   BYTE PTR ds:0xc002085d,0x4
c00072cf:	74 07                	je     c00072d8 <Computer::detectFeatures()+0x46>
c00072d1:	80 a3 6c 01 00 00 fb 	and    BYTE PTR [ebx+0x16c],0xfb
c00072d8:	e8 49 4a 01 00       	call   c001bd26 <x87Detect>
c00072dd:	83 e0 01             	and    eax,0x1
c00072e0:	c1 e0 04             	shl    eax,0x4
c00072e3:	88 c2                	mov    dl,al
c00072e5:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c00072eb:	83 e0 ef             	and    eax,0xffffffef
c00072ee:	09 d0                	or     eax,edx
c00072f0:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c00072f6:	a8 10                	test   al,0x10
c00072f8:	0f 85 2a 01 00 00    	jne    c0007428 <Computer::detectFeatures()+0x196>
c00072fe:	84 c0                	test   al,al
c0007300:	0f 88 45 01 00 00    	js     c000744b <Computer::detectFeatures()+0x1b9>
c0007306:	83 c4 1c             	add    esp,0x1c
c0007309:	5b                   	pop    ebx
c000730a:	5e                   	pop    esi
c000730b:	5f                   	pop    edi
c000730c:	5d                   	pop    ebp
c000730d:	c3                   	ret    
c000730e:	83 ec 0c             	sub    esp,0xc
c0007311:	6a 20                	push   0x20
c0007313:	e8 40 84 00 00       	call   c000f758 <CPU::cpuidCheckEDX(unsigned int)>
c0007318:	83 e0 01             	and    eax,0x1
c000731b:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0007322:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0007328:	83 e0 f7             	and    eax,0xfffffff7
c000732b:	09 d0                	or     eax,edx
c000732d:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0007333:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c000733a:	e8 19 84 00 00       	call   c000f758 <CPU::cpuidCheckEDX(unsigned int)>
c000733f:	83 e0 01             	and    eax,0x1
c0007342:	88 c2                	mov    dl,al
c0007344:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c000734a:	83 e0 fe             	and    eax,0xfffffffe
c000734d:	09 d0                	or     eax,edx
c000734f:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0007355:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c000735c:	e8 f7 83 00 00       	call   c000f758 <CPU::cpuidCheckEDX(unsigned int)>
c0007361:	c1 e0 07             	shl    eax,0x7
c0007364:	88 c2                	mov    dl,al
c0007366:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c000736c:	83 e0 7f             	and    eax,0x7f
c000736f:	09 d0                	or     eax,edx
c0007371:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0007377:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c000737e:	e8 d5 83 00 00       	call   c000f758 <CPU::cpuidCheckEDX(unsigned int)>
c0007383:	83 c4 10             	add    esp,0x10
c0007386:	83 e0 01             	and    eax,0x1
c0007389:	c1 e0 05             	shl    eax,0x5
c000738c:	88 c2                	mov    dl,al
c000738e:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0007394:	83 e0 df             	and    eax,0xffffffdf
c0007397:	09 d0                	or     eax,edx
c0007399:	f7 05 5c 08 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc002085c,0x401
c00073a3:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c00073a9:	0f 84 c2 00 00 00    	je     c0007471 <Computer::detectFeatures()+0x1df>
c00073af:	83 e0 fe             	and    eax,0xfffffffe
c00073b2:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c00073b8:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c00073be:	88 c2                	mov    dl,al
c00073c0:	83 e2 09             	and    edx,0x9
c00073c3:	fe ca                	dec    dl
c00073c5:	75 09                	jne    c00073d0 <Computer::detectFeatures()+0x13e>
c00073c7:	83 e0 fe             	and    eax,0xfffffffe
c00073ca:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c00073d0:	83 ec 0c             	sub    esp,0xc
c00073d3:	8d 44 24 18          	lea    eax,[esp+0x18]
c00073d7:	50                   	push   eax
c00073d8:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c00073dc:	55                   	push   ebp
c00073dd:	8d 7c 24 18          	lea    edi,[esp+0x18]
c00073e1:	57                   	push   edi
c00073e2:	8d 74 24 18          	lea    esi,[esp+0x18]
c00073e6:	56                   	push   esi
c00073e7:	68 00 00 00 80       	push   0x80000000
c00073ec:	e8 e3 82 00 00       	call   c000f6d4 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00073f1:	83 c4 20             	add    esp,0x20
c00073f4:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c00073fb:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00073ff:	0f 86 c3 fe ff ff    	jbe    c00072c8 <Computer::detectFeatures()+0x36>
c0007405:	83 ec 0c             	sub    esp,0xc
c0007408:	50                   	push   eax
c0007409:	55                   	push   ebp
c000740a:	57                   	push   edi
c000740b:	56                   	push   esi
c000740c:	68 01 00 00 80       	push   0x80000001
c0007411:	e8 be 82 00 00       	call   c000f6d4 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0007416:	81 a3 6c 01 00 00 bf ff fc ff 	and    DWORD PTR [ebx+0x16c],0xfffcffbf
c0007420:	83 c4 20             	add    esp,0x20
c0007423:	e9 a0 fe ff ff       	jmp    c00072c8 <Computer::detectFeatures()+0x36>
c0007428:	e8 b3 48 01 00       	call   c001bce0 <absolutelyNoChanceInHell>
c000742d:	88 c2                	mov    dl,al
c000742f:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0007435:	c1 e2 07             	shl    edx,0x7
c0007438:	83 e0 7f             	and    eax,0x7f
c000743b:	09 d0                	or     eax,edx
c000743d:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0007443:	84 c0                	test   al,al
c0007445:	0f 89 bb fe ff ff    	jns    c0007306 <Computer::detectFeatures()+0x74>
c000744b:	e8 10 46 01 00       	call   c001ba60 <avxDetect>
c0007450:	83 e0 01             	and    eax,0x1
c0007453:	c1 e0 05             	shl    eax,0x5
c0007456:	88 c2                	mov    dl,al
c0007458:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c000745e:	83 e0 df             	and    eax,0xffffffdf
c0007461:	09 d0                	or     eax,edx
c0007463:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0007469:	83 c4 1c             	add    esp,0x1c
c000746c:	5b                   	pop    ebx
c000746d:	5e                   	pop    esi
c000746e:	5f                   	pop    edi
c000746f:	5d                   	pop    ebp
c0007470:	c3                   	ret    
c0007471:	83 ec 0c             	sub    esp,0xc
c0007474:	68 00 02 00 00       	push   0x200
c0007479:	e8 da 82 00 00       	call   c000f758 <CPU::cpuidCheckEDX(unsigned int)>
c000747e:	83 c4 10             	add    esp,0x10
c0007481:	83 e0 01             	and    eax,0x1
c0007484:	88 c2                	mov    dl,al
c0007486:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c000748c:	83 e0 fe             	and    eax,0xfffffffe
c000748f:	09 d0                	or     eax,edx
c0007491:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0007497:	e9 1c ff ff ff       	jmp    c00073b8 <Computer::detectFeatures()+0x126>

c000749c <Computer::displayFeatures()>:
c000749c:	c3                   	ret    
c000749d:	90                   	nop

c000749e <Computer::rdmsr(unsigned int)>:
c000749e:	83 ec 0c             	sub    esp,0xc
c00074a1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00074a5:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c00074ac:	74 0a                	je     c00074b8 <Computer::rdmsr(unsigned int)+0x1a>
c00074ae:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00074b2:	0f 32                	rdmsr  
c00074b4:	83 c4 0c             	add    esp,0xc
c00074b7:	c3                   	ret    
c00074b8:	83 ec 0c             	sub    esp,0xc
c00074bb:	68 a1 d4 01 c0       	push   0xc001d4a1
c00074c0:	e8 7a 92 00 00       	call   c001073f <Krnl::panic(char const*)>
c00074c5:	83 c4 10             	add    esp,0x10
c00074c8:	eb e4                	jmp    c00074ae <Computer::rdmsr(unsigned int)+0x10>

c00074ca <Computer::wrmsr(unsigned int, unsigned long long)>:
c00074ca:	57                   	push   edi
c00074cb:	56                   	push   esi
c00074cc:	52                   	push   edx
c00074cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00074d1:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00074d5:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00074d9:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c00074e0:	74 0e                	je     c00074f0 <Computer::wrmsr(unsigned int, unsigned long long)+0x26>
c00074e2:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00074e6:	89 f0                	mov    eax,esi
c00074e8:	89 fa                	mov    edx,edi
c00074ea:	0f 30                	wrmsr  
c00074ec:	58                   	pop    eax
c00074ed:	5e                   	pop    esi
c00074ee:	5f                   	pop    edi
c00074ef:	c3                   	ret    
c00074f0:	83 ec 0c             	sub    esp,0xc
c00074f3:	68 a7 d4 01 c0       	push   0xc001d4a7
c00074f8:	e8 42 92 00 00       	call   c001073f <Krnl::panic(char const*)>
c00074fd:	83 c4 10             	add    esp,0x10
c0007500:	eb e0                	jmp    c00074e2 <Computer::wrmsr(unsigned int, unsigned long long)+0x18>

c0007502 <Computer::shutdown()>:
c0007502:	83 ec 0c             	sub    esp,0xc
c0007505:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007509:	8b 10                	mov    edx,DWORD PTR [eax]
c000750b:	6a 00                	push   0x0
c000750d:	6a 00                	push   0x0
c000750f:	6a 00                	push   0x0
c0007511:	50                   	push   eax
c0007512:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0007515:	83 c4 1c             	add    esp,0x1c
c0007518:	c3                   	ret    
c0007519:	90                   	nop

c000751a <Computer::restart()>:
c000751a:	83 ec 0c             	sub    esp,0xc
c000751d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007521:	8b 10                	mov    edx,DWORD PTR [eax]
c0007523:	6a 00                	push   0x0
c0007525:	6a 00                	push   0x0
c0007527:	6a 01                	push   0x1
c0007529:	50                   	push   eax
c000752a:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000752d:	83 c4 1c             	add    esp,0x1c
c0007530:	c3                   	ret    
c0007531:	90                   	nop

c0007532 <Computer::sleep()>:
c0007532:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007536:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c000753c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0007540:	e9 8b 7c 00 00       	jmp    c000f1d0 <ACPI::sleep()>
c0007545:	90                   	nop

c0007546 <Computer::nmiEnabled()>:
c0007546:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000754a:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c0007550:	c3                   	ret    
c0007551:	90                   	nop

c0007552 <Computer::readCMOS(unsigned char)>:
c0007552:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007556:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000755d:	19 c0                	sbb    eax,eax
c000755f:	83 e0 80             	and    eax,0xffffff80
c0007562:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0007566:	e6 70                	out    0x70,al
c0007568:	e4 71                	in     al,0x71
c000756a:	c3                   	ret    
c000756b:	90                   	nop

c000756c <Computer::enableNMI(bool)>:
c000756c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007570:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007574:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c000757a:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c0007582:	eb ce                	jmp    c0007552 <Computer::readCMOS(unsigned char)>

c0007584 <Computer::open(int, int, void*)>:
c0007584:	56                   	push   esi
c0007585:	53                   	push   ebx
c0007586:	83 ec 10             	sub    esp,0x10
c0007589:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000758d:	f6 05 5c 08 02 c0 04 	test   BYTE PTR ds:0xc002085c,0x4
c0007594:	68 ad d4 01 c0       	push   0xc001d4ad
c0007599:	0f 94 05 40 f7 01 c0 	sete   BYTE PTR ds:0xc001f740
c00075a0:	e8 16 09 00 00       	call   c0007ebb <Krnl::setBootMessage(char const*)>
c00075a5:	c7 04 24 64 12 00 00 	mov    DWORD PTR [esp],0x1264
c00075ac:	e8 b0 08 00 00       	call   c0007e61 <malloc>
c00075b1:	89 04 24             	mov    DWORD PTR [esp],eax
c00075b4:	89 c6                	mov    esi,eax
c00075b6:	e8 ad 77 00 00       	call   c000ed68 <ACPI::ACPI()>
c00075bb:	89 b3 68 01 00 00    	mov    DWORD PTR [ebx+0x168],esi
c00075c1:	58                   	pop    eax
c00075c2:	5a                   	pop    edx
c00075c3:	56                   	push   esi
c00075c4:	53                   	push   ebx
c00075c5:	e8 66 4a 00 00       	call   c000c030 <Device::addChild(Device*)>
c00075ca:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00075cd:	e8 c0 fc ff ff       	call   c0007292 <Computer::detectFeatures()>
c00075d2:	59                   	pop    ecx
c00075d3:	5e                   	pop    esi
c00075d4:	6a 01                	push   0x1
c00075d6:	53                   	push   ebx
c00075d7:	e8 90 ff ff ff       	call   c000756c <Computer::enableNMI(bool)>
c00075dc:	c7 04 24 c5 d4 01 c0 	mov    DWORD PTR [esp],0xc001d4c5
c00075e3:	e8 d3 08 00 00       	call   c0007ebb <Krnl::setBootMessage(char const*)>
c00075e8:	c7 04 24 94 11 00 00 	mov    DWORD PTR [esp],0x1194
c00075ef:	e8 6d 08 00 00       	call   c0007e61 <malloc>
c00075f4:	89 04 24             	mov    DWORD PTR [esp],eax
c00075f7:	89 c6                	mov    esi,eax
c00075f9:	e8 12 82 00 00       	call   c000f810 <CPU::CPU()>
c00075fe:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c0007604:	58                   	pop    eax
c0007605:	5a                   	pop    edx
c0007606:	56                   	push   esi
c0007607:	53                   	push   ebx
c0007608:	e8 23 4a 00 00       	call   c000c030 <Device::addChild(Device*)>
c000760d:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0007613:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0007617:	8b 10                	mov    edx,DWORD PTR [eax]
c0007619:	51                   	push   ecx
c000761a:	6a 00                	push   0x0
c000761c:	6a 00                	push   0x0
c000761e:	50                   	push   eax
c000761f:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0007622:	83 c4 14             	add    esp,0x14
c0007625:	68 74 d5 01 c0       	push   0xc001d574
c000762a:	e8 8c 08 00 00       	call   c0007ebb <Krnl::setBootMessage(char const*)>
c000762f:	e8 34 e1 00 00       	call   c0015768 <HalInitialiseCoprocessor()>
c0007634:	c7 04 24 df d4 01 c0 	mov    DWORD PTR [esp],0xc001d4df
c000763b:	e8 7b 08 00 00       	call   c0007ebb <Krnl::setBootMessage(char const*)>
c0007640:	c7 04 24 a5 70 00 c0 	mov    DWORD PTR [esp],0xc00070a5
c0007647:	e8 40 c3 00 00       	call   c001398c <setupMultitasking(void (*)())>
c000764c:	83 c4 14             	add    esp,0x14
c000764f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0007654:	5b                   	pop    ebx
c0007655:	5e                   	pop    esi
c0007656:	c3                   	ret    
c0007657:	90                   	nop

c0007658 <Computer::disableNMI()>:
c0007658:	6a 00                	push   0x0
c000765a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000765e:	50                   	push   eax
c000765f:	e8 08 ff ff ff       	call   c000756c <Computer::enableNMI(bool)>
c0007664:	5a                   	pop    edx
c0007665:	59                   	pop    ecx
c0007666:	c3                   	ret    
c0007667:	90                   	nop

c0007668 <Computer::writeCMOS(unsigned char, unsigned char)>:
c0007668:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000766c:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c0007673:	19 c0                	sbb    eax,eax
c0007675:	83 e0 80             	and    eax,0xffffff80
c0007678:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000767c:	e6 70                	out    0x70,al
c000767e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007682:	e6 71                	out    0x71,al
c0007684:	c3                   	ret    
c0007685:	90                   	nop

c0007686 <Computer::handleNMI()>:
c0007686:	56                   	push   esi
c0007687:	53                   	push   ebx
c0007688:	83 ec 10             	sub    esp,0x10
c000768b:	e4 92                	in     al,0x92
c000768d:	89 c6                	mov    esi,eax
c000768f:	e4 61                	in     al,0x61
c0007691:	68 fa d4 01 c0       	push   0xc001d4fa
c0007696:	88 c3                	mov    bl,al
c0007698:	e8 53 35 00 00       	call   c000abf0 <Dbg::kprintf(char const*, ...)>
c000769d:	83 c4 10             	add    esp,0x10
c00076a0:	83 e6 10             	and    esi,0x10
c00076a3:	75 0d                	jne    c00076b2 <Computer::handleNMI()+0x2c>
c00076a5:	f6 c3 40             	test   bl,0x40
c00076a8:	75 1d                	jne    c00076c7 <Computer::handleNMI()+0x41>
c00076aa:	84 db                	test   bl,bl
c00076ac:	78 2d                	js     c00076db <Computer::handleNMI()+0x55>
c00076ae:	58                   	pop    eax
c00076af:	5b                   	pop    ebx
c00076b0:	5e                   	pop    esi
c00076b1:	c3                   	ret    
c00076b2:	83 ec 0c             	sub    esp,0xc
c00076b5:	68 0b d5 01 c0       	push   0xc001d50b
c00076ba:	e8 80 90 00 00       	call   c001073f <Krnl::panic(char const*)>
c00076bf:	83 c4 10             	add    esp,0x10
c00076c2:	f6 c3 40             	test   bl,0x40
c00076c5:	74 e3                	je     c00076aa <Computer::handleNMI()+0x24>
c00076c7:	83 ec 0c             	sub    esp,0xc
c00076ca:	68 18 d5 01 c0       	push   0xc001d518
c00076cf:	e8 6b 90 00 00       	call   c001073f <Krnl::panic(char const*)>
c00076d4:	83 c4 10             	add    esp,0x10
c00076d7:	84 db                	test   bl,bl
c00076d9:	79 d3                	jns    c00076ae <Computer::handleNMI()+0x28>
c00076db:	c7 44 24 10 22 d5 01 c0 	mov    DWORD PTR [esp+0x10],0xc001d522
c00076e3:	5a                   	pop    edx
c00076e4:	5b                   	pop    ebx
c00076e5:	5e                   	pop    esi
c00076e6:	e9 54 90 00 00       	jmp    c001073f <Krnl::panic(char const*)>
c00076eb:	90                   	nop

c00076ec <GDTEntry::setBase(unsigned int)>:
c00076ec:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00076f0:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00076f4:	89 c1                	mov    ecx,eax
c00076f6:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c00076fa:	c1 e9 10             	shr    ecx,0x10
c00076fd:	c1 e8 18             	shr    eax,0x18
c0007700:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c0007703:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c0007706:	c3                   	ret    
c0007707:	90                   	nop

c0007708 <GDTEntry::setLimit(unsigned int)>:
c0007708:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000770c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007710:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c0007713:	66 89 01             	mov    WORD PTR [ecx],ax
c0007716:	83 e2 f0             	and    edx,0xfffffff0
c0007719:	c1 e8 10             	shr    eax,0x10
c000771c:	83 e0 0f             	and    eax,0xf
c000771f:	09 d0                	or     eax,edx
c0007721:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c0007724:	c3                   	ret    
c0007725:	90                   	nop

c0007726 <GDT::GDT()>:
c0007726:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000772a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0007730:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007734:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000773a:	90                   	nop
c000773b:	c3                   	ret    

c000773c <GDT::addEntry(GDTEntry)>:
c000773c:	53                   	push   ebx
c000773d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007741:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007745:	8b 02                	mov    eax,DWORD PTR [edx]
c0007747:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000774b:	89 4c c2 04          	mov    DWORD PTR [edx+eax*8+0x4],ecx
c000774f:	89 5c c2 08          	mov    DWORD PTR [edx+eax*8+0x8],ebx
c0007753:	8d 48 01             	lea    ecx,[eax+0x1]
c0007756:	c1 e0 03             	shl    eax,0x3
c0007759:	89 0a                	mov    DWORD PTR [edx],ecx
c000775b:	5b                   	pop    ebx
c000775c:	c3                   	ret    
c000775d:	90                   	nop

c000775e <GDT::getNumberOfEntries()>:
c000775e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007762:	8b 00                	mov    eax,DWORD PTR [eax]
c0007764:	c3                   	ret    
c0007765:	90                   	nop

c0007766 <GDT::flush()>:
c0007766:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000776a:	8b 10                	mov    edx,DWORD PTR [eax]
c000776c:	83 c0 04             	add    eax,0x4
c000776f:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c0007776:	a3 4e 08 02 c0       	mov    ds:0xc002084e,eax
c000777b:	66 89 15 4c 08 02 c0 	mov    WORD PTR ds:0xc002084c,dx
c0007782:	e9 f6 8b ff ff       	jmp    c000037d <loadGDT>
c0007787:	90                   	nop

c0007788 <GDT::setup()>:
c0007788:	57                   	push   edi
c0007789:	56                   	push   esi
c000778a:	53                   	push   ebx
c000778b:	83 ec 30             	sub    esp,0x30
c000778e:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0007792:	6a 00                	push   0x0
c0007794:	8d 74 24 14          	lea    esi,[esp+0x14]
c0007798:	56                   	push   esi
c0007799:	e8 4e ff ff ff       	call   c00076ec <GDTEntry::setBase(unsigned int)>
c000779e:	6a 00                	push   0x0
c00077a0:	56                   	push   esi
c00077a1:	e8 62 ff ff ff       	call   c0007708 <GDTEntry::setLimit(unsigned int)>
c00077a6:	81 64 24 24 ff 00 0f ff 	and    DWORD PTR [esp+0x24],0xff0f00ff
c00077ae:	6a 00                	push   0x0
c00077b0:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c00077b4:	56                   	push   esi
c00077b5:	e8 32 ff ff ff       	call   c00076ec <GDTEntry::setBase(unsigned int)>
c00077ba:	68 ff ff ff 00       	push   0xffffff
c00077bf:	56                   	push   esi
c00077c0:	e8 43 ff ff ff       	call   c0007708 <GDTEntry::setLimit(unsigned int)>
c00077c5:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c00077c9:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00077cd:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c00077d1:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c00077d5:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c00077da:	0d 00 9a c0 00       	or     eax,0xc09a00
c00077df:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c00077e3:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c00077e7:	89 f8                	mov    eax,edi
c00077e9:	89 fa                	mov    edx,edi
c00077eb:	80 e4 f7             	and    ah,0xf7
c00077ee:	80 ce 60             	or     dh,0x60
c00077f1:	89 c7                	mov    edi,eax
c00077f3:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00077f7:	80 cc 60             	or     ah,0x60
c00077fa:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00077fe:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0007802:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0007806:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000780a:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000780e:	83 c4 20             	add    esp,0x20
c0007811:	6a 00                	push   0x0
c0007813:	8d 44 24 24          	lea    eax,[esp+0x24]
c0007817:	50                   	push   eax
c0007818:	e8 cf fe ff ff       	call   c00076ec <GDTEntry::setBase(unsigned int)>
c000781d:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0007821:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c0007825:	80 64 24 2e 3f       	and    BYTE PTR [esp+0x2e],0x3f
c000782a:	6a 00                	push   0x0
c000782c:	8d 44 24 34          	lea    eax,[esp+0x34]
c0007830:	50                   	push   eax
c0007831:	e8 b6 fe ff ff       	call   c00076ec <GDTEntry::setBase(unsigned int)>
c0007836:	80 64 24 3e 3f       	and    BYTE PTR [esp+0x3e],0x3f
c000783b:	83 c4 0c             	add    esp,0xc
c000783e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007842:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007846:	53                   	push   ebx
c0007847:	e8 f0 fe ff ff       	call   c000773c <GDT::addEntry(GDTEntry)>
c000784c:	83 c4 0c             	add    esp,0xc
c000784f:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007853:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007857:	53                   	push   ebx
c0007858:	e8 df fe ff ff       	call   c000773c <GDT::addEntry(GDTEntry)>
c000785d:	83 c4 0c             	add    esp,0xc
c0007860:	57                   	push   edi
c0007861:	56                   	push   esi
c0007862:	53                   	push   ebx
c0007863:	e8 d4 fe ff ff       	call   c000773c <GDT::addEntry(GDTEntry)>
c0007868:	83 c4 0c             	add    esp,0xc
c000786b:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000786f:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0007873:	53                   	push   ebx
c0007874:	e8 c3 fe ff ff       	call   c000773c <GDT::addEntry(GDTEntry)>
c0007879:	83 c4 0c             	add    esp,0xc
c000787c:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0007880:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0007884:	53                   	push   ebx
c0007885:	e8 b2 fe ff ff       	call   c000773c <GDT::addEntry(GDTEntry)>
c000788a:	83 c4 0c             	add    esp,0xc
c000788d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007891:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007895:	53                   	push   ebx
c0007896:	e8 a1 fe ff ff       	call   c000773c <GDT::addEntry(GDTEntry)>
c000789b:	83 c4 0c             	add    esp,0xc
c000789e:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00078a2:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00078a6:	53                   	push   ebx
c00078a7:	e8 90 fe ff ff       	call   c000773c <GDT::addEntry(GDTEntry)>
c00078ac:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00078af:	e8 b2 fe ff ff       	call   c0007766 <GDT::flush()>
c00078b4:	83 c4 40             	add    esp,0x40
c00078b7:	5b                   	pop    ebx
c00078b8:	5e                   	pop    esi
c00078b9:	5f                   	pop    edi
c00078ba:	c3                   	ret    

c00078bb <idleFunction(void*)>:
c00078bb:	83 ec 0c             	sub    esp,0xc
c00078be:	a1 08 3d 02 c0       	mov    eax,ds:0xc0023d08
c00078c3:	48                   	dec    eax
c00078c4:	a3 08 3d 02 c0       	mov    ds:0xc0023d08,eax
c00078c9:	75 01                	jne    c00078cc <idleFunction(void*)+0x11>
c00078cb:	fb                   	sti    
c00078cc:	f4                   	hlt    
c00078cd:	e8 10 4a 01 00       	call   c001c2e2 <idleCommon()>
c00078d2:	eb f8                	jmp    c00078cc <idleFunction(void*)+0x11>

c00078d4 <IDTEntry::IDTEntry(bool)>:
c00078d4:	83 ec 04             	sub    esp,0x4
c00078d7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00078db:	88 04 24             	mov    BYTE PTR [esp],al
c00078de:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00078e2:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c00078e8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00078ec:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c00078f0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00078f4:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c00078f7:	83 e2 f0             	and    edx,0xfffffff0
c00078fa:	83 ca 0e             	or     edx,0xe
c00078fd:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007900:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007904:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0007907:	83 e2 ef             	and    edx,0xffffffef
c000790a:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000790d:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c0007911:	74 05                	je     c0007918 <IDTEntry::IDTEntry(bool)+0x44>
c0007913:	b2 03                	mov    dl,0x3
c0007915:	eb 05                	jmp    c000791c <IDTEntry::IDTEntry(bool)+0x48>
c0007917:	90                   	nop
c0007918:	b2 00                	mov    dl,0x0
c000791a:	66 90                	xchg   ax,ax
c000791c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007920:	83 e2 03             	and    edx,0x3
c0007923:	88 d1                	mov    cl,dl
c0007925:	c1 e1 05             	shl    ecx,0x5
c0007928:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000792b:	83 e2 9f             	and    edx,0xffffff9f
c000792e:	09 ca                	or     edx,ecx
c0007930:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007933:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007937:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000793a:	83 ca 80             	or     edx,0xffffff80
c000793d:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007940:	90                   	nop
c0007941:	83 c4 04             	add    esp,0x4
c0007944:	c3                   	ret    
c0007945:	90                   	nop

c0007946 <IDTEntry::setOffset(unsigned int)>:
c0007946:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000794a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000794e:	66 89 02             	mov    WORD PTR [edx],ax
c0007951:	c1 e8 10             	shr    eax,0x10
c0007954:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c0007958:	c3                   	ret    
c0007959:	90                   	nop
c000795a:	66 90                	xchg   ax,ax

c000795c <IDT::IDT()>:
c000795c:	90                   	nop
c000795d:	c3                   	ret    

c000795e <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c000795e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007962:	83 c0 30             	add    eax,0x30
c0007965:	c3                   	ret    

c0007966 <IDT::addEntry(IDTEntry, int)>:
c0007966:	53                   	push   ebx
c0007967:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000796b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000796f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007973:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0007977:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c000797a:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c000797e:	5b                   	pop    ebx
c000797f:	c3                   	ret    

c0007980 <IDT::addEntry(int, void (*)(), bool)>:
c0007980:	53                   	push   ebx
c0007981:	83 ec 10             	sub    esp,0x10
c0007984:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c0007989:	50                   	push   eax
c000798a:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000798e:	53                   	push   ebx
c000798f:	e8 40 ff ff ff       	call   c00078d4 <IDTEntry::IDTEntry(bool)>
c0007994:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007998:	53                   	push   ebx
c0007999:	e8 a8 ff ff ff       	call   c0007946 <IDTEntry::setOffset(unsigned int)>
c000799e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00079a2:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00079a6:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00079aa:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00079ae:	e8 b3 ff ff ff       	call   c0007966 <IDT::addEntry(IDTEntry, int)>
c00079b3:	83 c4 30             	add    esp,0x30
c00079b6:	5b                   	pop    ebx
c00079b7:	c3                   	ret    

c00079b8 <IDT::flush()>:
c00079b8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00079bc:	66 c7 05 54 08 02 c0 ff 07 	mov    WORD PTR ds:0xc0020854,0x7ff
c00079c5:	a3 56 08 02 c0       	mov    ds:0xc0020856,eax
c00079ca:	0f 01 1d 54 08 02 c0 	lidtd  ds:0xc0020854
c00079d1:	c3                   	ret    

c00079d2 <IDT::setup()>:
c00079d2:	57                   	push   edi
c00079d3:	56                   	push   esi
c00079d4:	53                   	push   ebx
c00079d5:	83 ec 10             	sub    esp,0x10
c00079d8:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00079dc:	6a 00                	push   0x0
c00079de:	68 f0 ba 01 c0       	push   0xc001baf0
c00079e3:	6a 00                	push   0x0
c00079e5:	53                   	push   ebx
c00079e6:	e8 95 ff ff ff       	call   c0007980 <IDT::addEntry(int, void (*)(), bool)>
c00079eb:	6a 00                	push   0x0
c00079ed:	68 00 bb 01 c0       	push   0xc001bb00
c00079f2:	6a 01                	push   0x1
c00079f4:	53                   	push   ebx
c00079f5:	e8 86 ff ff ff       	call   c0007980 <IDT::addEntry(int, void (*)(), bool)>
c00079fa:	83 c4 20             	add    esp,0x20
c00079fd:	6a 00                	push   0x0
c00079ff:	68 0a bb 01 c0       	push   0xc001bb0a
c0007a04:	6a 02                	push   0x2
c0007a06:	53                   	push   ebx
c0007a07:	e8 74 ff ff ff       	call   c0007980 <IDT::addEntry(int, void (*)(), bool)>
c0007a0c:	6a 00                	push   0x0
c0007a0e:	68 14 bb 01 c0       	push   0xc001bb14
c0007a13:	6a 03                	push   0x3
c0007a15:	53                   	push   ebx
c0007a16:	e8 65 ff ff ff       	call   c0007980 <IDT::addEntry(int, void (*)(), bool)>
c0007a1b:	83 c4 20             	add    esp,0x20
c0007a1e:	6a 00                	push   0x0
c0007a20:	68 1e bb 01 c0       	push   0xc001bb1e
c0007a25:	6a 04                	push   0x4
c0007a27:	53                   	push   ebx
c0007a28:	e8 53 ff ff ff       	call   c0007980 <IDT::addEntry(int, void (*)(), bool)>
c0007a2d:	6a 00                	push   0x0
c0007a2f:	68 28 bb 01 c0       	push   0xc001bb28
c0007a34:	6a 05                	push   0x5
c0007a36:	53                   	push   ebx
c0007a37:	e8 44 ff ff ff       	call   c0007980 <IDT::addEntry(int, void (*)(), bool)>
c0007a3c:	83 c4 20             	add    esp,0x20
c0007a3f:	6a 00                	push   0x0
c0007a41:	68 32 bb 01 c0       	push   0xc001bb32
c0007a46:	6a 06                	push   0x6
c0007a48:	53                   	push   ebx
c0007a49:	e8 32 ff ff ff       	call   c0007980 <IDT::addEntry(int, void (*)(), bool)>
c0007a4e:	6a 00                	push   0x0
c0007a50:	68 3c bb 01 c0       	push   0xc001bb3c
c0007a55:	6a 07                	push   0x7
c0007a57:	53                   	push   ebx
c0007a58:	e8 23 ff ff ff       	call   c0007980 <IDT::addEntry(int, void (*)(), bool)>
c0007a5d:	83 c4 20             	add    esp,0x20
c0007a60:	6a 00                	push   0x0
c0007a62:	68 46 bb 01 c0       	push   0xc001bb46
c0007a67:	6a 08                	push   0x8
c0007a69:	53                   	push   ebx
c0007a6a:	e8 11 ff ff ff       	call   c0007980 <IDT::addEntry(int, void (*)(), bool)>
c0007a6f:	6a 00                	push   0x0
c0007a71:	68 4e bb 01 c0       	push   0xc001bb4e
c0007a76:	6a 09                	push   0x9
c0007a78:	53                   	push   ebx
c0007a79:	e8 02 ff ff ff       	call   c0007980 <IDT::addEntry(int, void (*)(), bool)>
c0007a7e:	83 c4 20             	add    esp,0x20
c0007a81:	6a 00                	push   0x0
c0007a83:	68 58 bb 01 c0       	push   0xc001bb58
c0007a88:	6a 0a                	push   0xa
c0007a8a:	53                   	push   ebx
c0007a8b:	e8 f0 fe ff ff       	call   c0007980 <IDT::addEntry(int, void (*)(), bool)>
c0007a90:	6a 00                	push   0x0
c0007a92:	68 60 bb 01 c0       	push   0xc001bb60
c0007a97:	6a 0b                	push   0xb
c0007a99:	53                   	push   ebx
c0007a9a:	e8 e1 fe ff ff       	call   c0007980 <IDT::addEntry(int, void (*)(), bool)>
c0007a9f:	83 c4 20             	add    esp,0x20
c0007aa2:	6a 00                	push   0x0
c0007aa4:	68 68 bb 01 c0       	push   0xc001bb68
c0007aa9:	6a 0c                	push   0xc
c0007aab:	53                   	push   ebx
c0007aac:	e8 cf fe ff ff       	call   c0007980 <IDT::addEntry(int, void (*)(), bool)>
c0007ab1:	6a 00                	push   0x0
c0007ab3:	68 70 bb 01 c0       	push   0xc001bb70
c0007ab8:	6a 0d                	push   0xd
c0007aba:	53                   	push   ebx
c0007abb:	e8 c0 fe ff ff       	call   c0007980 <IDT::addEntry(int, void (*)(), bool)>
c0007ac0:	83 c4 20             	add    esp,0x20
c0007ac3:	6a 00                	push   0x0
c0007ac5:	68 78 bb 01 c0       	push   0xc001bb78
c0007aca:	6a 0e                	push   0xe
c0007acc:	53                   	push   ebx
c0007acd:	e8 ae fe ff ff       	call   c0007980 <IDT::addEntry(int, void (*)(), bool)>
c0007ad2:	6a 00                	push   0x0
c0007ad4:	68 80 bb 01 c0       	push   0xc001bb80
c0007ad9:	6a 0f                	push   0xf
c0007adb:	53                   	push   ebx
c0007adc:	e8 9f fe ff ff       	call   c0007980 <IDT::addEntry(int, void (*)(), bool)>
c0007ae1:	83 c4 20             	add    esp,0x20
c0007ae4:	6a 00                	push   0x0
c0007ae6:	68 8a bb 01 c0       	push   0xc001bb8a
c0007aeb:	6a 10                	push   0x10
c0007aed:	53                   	push   ebx
c0007aee:	e8 8d fe ff ff       	call   c0007980 <IDT::addEntry(int, void (*)(), bool)>
c0007af3:	6a 00                	push   0x0
c0007af5:	68 94 bb 01 c0       	push   0xc001bb94
c0007afa:	6a 11                	push   0x11
c0007afc:	53                   	push   ebx
c0007afd:	e8 7e fe ff ff       	call   c0007980 <IDT::addEntry(int, void (*)(), bool)>
c0007b02:	83 c4 20             	add    esp,0x20
c0007b05:	6a 00                	push   0x0
c0007b07:	68 9e bb 01 c0       	push   0xc001bb9e
c0007b0c:	6a 12                	push   0x12
c0007b0e:	53                   	push   ebx
c0007b0f:	e8 6c fe ff ff       	call   c0007980 <IDT::addEntry(int, void (*)(), bool)>
c0007b14:	6a 01                	push   0x1
c0007b16:	68 38 bc 01 c0       	push   0xc001bc38
c0007b1b:	6a 60                	push   0x60
c0007b1d:	53                   	push   ebx
c0007b1e:	e8 5d fe ff ff       	call   c0007980 <IDT::addEntry(int, void (*)(), bool)>
c0007b23:	83 c4 20             	add    esp,0x20
c0007b26:	6a 00                	push   0x0
c0007b28:	68 3f bc 01 c0       	push   0xc001bc3f
c0007b2d:	6a 20                	push   0x20
c0007b2f:	53                   	push   ebx
c0007b30:	e8 4b fe ff ff       	call   c0007980 <IDT::addEntry(int, void (*)(), bool)>
c0007b35:	6a 00                	push   0x0
c0007b37:	68 2a bc 01 c0       	push   0xc001bc2a
c0007b3c:	6a 21                	push   0x21
c0007b3e:	53                   	push   ebx
c0007b3f:	e8 3c fe ff ff       	call   c0007980 <IDT::addEntry(int, void (*)(), bool)>
c0007b44:	83 c4 20             	add    esp,0x20
c0007b47:	6a 00                	push   0x0
c0007b49:	68 31 bc 01 c0       	push   0xc001bc31
c0007b4e:	6a 22                	push   0x22
c0007b50:	53                   	push   ebx
c0007b51:	e8 2a fe ff ff       	call   c0007980 <IDT::addEntry(int, void (*)(), bool)>
c0007b56:	6a 00                	push   0x0
c0007b58:	68 a8 bb 01 c0       	push   0xc001bba8
c0007b5d:	6a 23                	push   0x23
c0007b5f:	53                   	push   ebx
c0007b60:	e8 1b fe ff ff       	call   c0007980 <IDT::addEntry(int, void (*)(), bool)>
c0007b65:	83 c4 20             	add    esp,0x20
c0007b68:	6a 00                	push   0x0
c0007b6a:	68 b2 bb 01 c0       	push   0xc001bbb2
c0007b6f:	6a 24                	push   0x24
c0007b71:	53                   	push   ebx
c0007b72:	e8 09 fe ff ff       	call   c0007980 <IDT::addEntry(int, void (*)(), bool)>
c0007b77:	6a 00                	push   0x0
c0007b79:	68 bc bb 01 c0       	push   0xc001bbbc
c0007b7e:	6a 25                	push   0x25
c0007b80:	53                   	push   ebx
c0007b81:	e8 fa fd ff ff       	call   c0007980 <IDT::addEntry(int, void (*)(), bool)>
c0007b86:	83 c4 20             	add    esp,0x20
c0007b89:	6a 00                	push   0x0
c0007b8b:	68 c6 bb 01 c0       	push   0xc001bbc6
c0007b90:	6a 26                	push   0x26
c0007b92:	53                   	push   ebx
c0007b93:	e8 e8 fd ff ff       	call   c0007980 <IDT::addEntry(int, void (*)(), bool)>
c0007b98:	6a 00                	push   0x0
c0007b9a:	68 d0 bb 01 c0       	push   0xc001bbd0
c0007b9f:	6a 27                	push   0x27
c0007ba1:	53                   	push   ebx
c0007ba2:	e8 d9 fd ff ff       	call   c0007980 <IDT::addEntry(int, void (*)(), bool)>
c0007ba7:	83 c4 20             	add    esp,0x20
c0007baa:	6a 00                	push   0x0
c0007bac:	68 da bb 01 c0       	push   0xc001bbda
c0007bb1:	6a 28                	push   0x28
c0007bb3:	53                   	push   ebx
c0007bb4:	e8 c7 fd ff ff       	call   c0007980 <IDT::addEntry(int, void (*)(), bool)>
c0007bb9:	6a 00                	push   0x0
c0007bbb:	68 e4 bb 01 c0       	push   0xc001bbe4
c0007bc0:	6a 29                	push   0x29
c0007bc2:	53                   	push   ebx
c0007bc3:	e8 b8 fd ff ff       	call   c0007980 <IDT::addEntry(int, void (*)(), bool)>
c0007bc8:	83 c4 20             	add    esp,0x20
c0007bcb:	6a 00                	push   0x0
c0007bcd:	68 ee bb 01 c0       	push   0xc001bbee
c0007bd2:	6a 2a                	push   0x2a
c0007bd4:	53                   	push   ebx
c0007bd5:	e8 a6 fd ff ff       	call   c0007980 <IDT::addEntry(int, void (*)(), bool)>
c0007bda:	6a 00                	push   0x0
c0007bdc:	68 f8 bb 01 c0       	push   0xc001bbf8
c0007be1:	6a 2b                	push   0x2b
c0007be3:	53                   	push   ebx
c0007be4:	e8 97 fd ff ff       	call   c0007980 <IDT::addEntry(int, void (*)(), bool)>
c0007be9:	83 c4 20             	add    esp,0x20
c0007bec:	6a 00                	push   0x0
c0007bee:	68 02 bc 01 c0       	push   0xc001bc02
c0007bf3:	6a 2c                	push   0x2c
c0007bf5:	53                   	push   ebx
c0007bf6:	e8 85 fd ff ff       	call   c0007980 <IDT::addEntry(int, void (*)(), bool)>
c0007bfb:	6a 00                	push   0x0
c0007bfd:	68 0c bc 01 c0       	push   0xc001bc0c
c0007c02:	6a 2d                	push   0x2d
c0007c04:	53                   	push   ebx
c0007c05:	e8 76 fd ff ff       	call   c0007980 <IDT::addEntry(int, void (*)(), bool)>
c0007c0a:	83 c4 20             	add    esp,0x20
c0007c0d:	6a 00                	push   0x0
c0007c0f:	68 16 bc 01 c0       	push   0xc001bc16
c0007c14:	6a 2e                	push   0x2e
c0007c16:	53                   	push   ebx
c0007c17:	e8 64 fd ff ff       	call   c0007980 <IDT::addEntry(int, void (*)(), bool)>
c0007c1c:	6a 00                	push   0x0
c0007c1e:	68 20 bc 01 c0       	push   0xc001bc20
c0007c23:	6a 2f                	push   0x2f
c0007c25:	53                   	push   ebx
c0007c26:	e8 55 fd ff ff       	call   c0007980 <IDT::addEntry(int, void (*)(), bool)>
c0007c2b:	83 c4 20             	add    esp,0x20
c0007c2e:	6a 00                	push   0x0
c0007c30:	68 76 bc 01 c0       	push   0xc001bc76
c0007c35:	6a 30                	push   0x30
c0007c37:	53                   	push   ebx
c0007c38:	e8 43 fd ff ff       	call   c0007980 <IDT::addEntry(int, void (*)(), bool)>
c0007c3d:	6a 00                	push   0x0
c0007c3f:	68 80 bc 01 c0       	push   0xc001bc80
c0007c44:	6a 31                	push   0x31
c0007c46:	53                   	push   ebx
c0007c47:	e8 34 fd ff ff       	call   c0007980 <IDT::addEntry(int, void (*)(), bool)>
c0007c4c:	83 c4 20             	add    esp,0x20
c0007c4f:	6a 00                	push   0x0
c0007c51:	68 8a bc 01 c0       	push   0xc001bc8a
c0007c56:	6a 32                	push   0x32
c0007c58:	53                   	push   ebx
c0007c59:	e8 22 fd ff ff       	call   c0007980 <IDT::addEntry(int, void (*)(), bool)>
c0007c5e:	6a 00                	push   0x0
c0007c60:	68 94 bc 01 c0       	push   0xc001bc94
c0007c65:	6a 33                	push   0x33
c0007c67:	53                   	push   ebx
c0007c68:	e8 13 fd ff ff       	call   c0007980 <IDT::addEntry(int, void (*)(), bool)>
c0007c6d:	83 c4 20             	add    esp,0x20
c0007c70:	6a 00                	push   0x0
c0007c72:	68 9e bc 01 c0       	push   0xc001bc9e
c0007c77:	6a 34                	push   0x34
c0007c79:	53                   	push   ebx
c0007c7a:	e8 01 fd ff ff       	call   c0007980 <IDT::addEntry(int, void (*)(), bool)>
c0007c7f:	6a 00                	push   0x0
c0007c81:	68 a8 bc 01 c0       	push   0xc001bca8
c0007c86:	6a 35                	push   0x35
c0007c88:	53                   	push   ebx
c0007c89:	e8 f2 fc ff ff       	call   c0007980 <IDT::addEntry(int, void (*)(), bool)>
c0007c8e:	83 c4 20             	add    esp,0x20
c0007c91:	6a 00                	push   0x0
c0007c93:	68 b2 bc 01 c0       	push   0xc001bcb2
c0007c98:	6a 36                	push   0x36
c0007c9a:	53                   	push   ebx
c0007c9b:	e8 e0 fc ff ff       	call   c0007980 <IDT::addEntry(int, void (*)(), bool)>
c0007ca0:	6a 00                	push   0x0
c0007ca2:	68 bc bc 01 c0       	push   0xc001bcbc
c0007ca7:	6a 37                	push   0x37
c0007ca9:	53                   	push   ebx
c0007caa:	e8 d1 fc ff ff       	call   c0007980 <IDT::addEntry(int, void (*)(), bool)>
c0007caf:	83 c4 1c             	add    esp,0x1c
c0007cb2:	6a 03                	push   0x3
c0007cb4:	6a 02                	push   0x2
c0007cb6:	ff 35 30 09 02 c0    	push   DWORD PTR ds:0xc0020930
c0007cbc:	e8 75 24 00 00       	call   c000a136 <VAS::allocatePages(int, int)>
c0007cc1:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0007cc8:	89 c6                	mov    esi,eax
c0007cca:	e8 92 01 00 00       	call   c0007e61 <malloc>
c0007ccf:	81 c6 00 20 00 00    	add    esi,0x2000
c0007cd5:	89 04 24             	mov    DWORD PTR [esp],eax
c0007cd8:	89 c7                	mov    edi,eax
c0007cda:	e8 01 16 00 00       	call   c00092e0 <TSS::TSS()>
c0007cdf:	83 c4 0c             	add    esp,0xc
c0007ce2:	68 46 bb 01 c0       	push   0xc001bb46
c0007ce7:	56                   	push   esi
c0007ce8:	57                   	push   edi
c0007ce9:	e8 36 16 00 00       	call   c0009324 <TSS::setup(unsigned long, unsigned long)>
c0007cee:	89 c6                	mov    esi,eax
c0007cf0:	58                   	pop    eax
c0007cf1:	5a                   	pop    edx
c0007cf2:	6a 00                	push   0x0
c0007cf4:	8d 44 24 14          	lea    eax,[esp+0x14]
c0007cf8:	50                   	push   eax
c0007cf9:	e8 d6 fb ff ff       	call   c00078d4 <IDTEntry::IDTEntry(bool)>
c0007cfe:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0007d02:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c0007d07:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c0007d0e:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c0007d14:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007d18:	80 ce 05             	or     dh,0x5
c0007d1b:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c0007d1e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0007d22:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0007d26:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c0007d29:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007d2c:	e8 87 fc ff ff       	call   c00079b8 <IDT::flush()>
c0007d31:	83 c4 20             	add    esp,0x20
c0007d34:	5b                   	pop    ebx
c0007d35:	5e                   	pop    esi
c0007d36:	5f                   	pop    edi
c0007d37:	c3                   	ret    

c0007d38 <sbrk>:
c0007d38:	55                   	push   ebp
c0007d39:	57                   	push   edi
c0007d3a:	56                   	push   esi
c0007d3b:	53                   	push   ebx
c0007d3c:	83 ec 1c             	sub    esp,0x1c
c0007d3f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0007d43:	85 c0                	test   eax,eax
c0007d45:	74 5f                	je     c0007da6 <sbrk+0x6e>
c0007d47:	78 64                	js     c0007dad <sbrk+0x75>
c0007d49:	8b 15 c8 f5 01 c0    	mov    edx,DWORD PTR ds:0xc001f5c8
c0007d4f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0007d53:	05 ff 0f 00 00       	add    eax,0xfff
c0007d58:	89 c5                	mov    ebp,eax
c0007d5a:	78 69                	js     c0007dc5 <sbrk+0x8d>
c0007d5c:	c1 fd 0c             	sar    ebp,0xc
c0007d5f:	bb 00 00 00 00       	mov    ebx,0x0
c0007d64:	8b 35 30 09 02 c0    	mov    esi,DWORD PTR ds:0xc0020930
c0007d6a:	8b 3d c8 f5 01 c0    	mov    edi,DWORD PTR ds:0xc001f5c8
c0007d70:	e8 b9 04 00 00       	call   c000822e <Phys::allocatePage()>
c0007d75:	68 01 04 00 00       	push   0x401
c0007d7a:	57                   	push   edi
c0007d7b:	50                   	push   eax
c0007d7c:	56                   	push   esi
c0007d7d:	e8 b0 22 00 00       	call   c000a032 <VAS::mapPage(unsigned long, unsigned long, int)>
c0007d82:	81 05 c8 f5 01 c0 00 10 00 00 	add    DWORD PTR ds:0xc001f5c8,0x1000
c0007d8c:	43                   	inc    ebx
c0007d8d:	83 c4 10             	add    esp,0x10
c0007d90:	39 dd                	cmp    ebp,ebx
c0007d92:	75 d0                	jne    c0007d64 <sbrk+0x2c>
c0007d94:	0f 20 d8             	mov    eax,cr3
c0007d97:	0f 22 d8             	mov    cr3,eax
c0007d9a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007d9e:	83 c4 1c             	add    esp,0x1c
c0007da1:	5b                   	pop    ebx
c0007da2:	5e                   	pop    esi
c0007da3:	5f                   	pop    edi
c0007da4:	5d                   	pop    ebp
c0007da5:	c3                   	ret    
c0007da6:	a1 c8 f5 01 c0       	mov    eax,ds:0xc001f5c8
c0007dab:	eb f1                	jmp    c0007d9e <sbrk+0x66>
c0007dad:	83 ec 08             	sub    esp,0x8
c0007db0:	50                   	push   eax
c0007db1:	68 c4 d5 01 c0       	push   0xc001d5c4
c0007db6:	e8 35 2e 00 00       	call   c000abf0 <Dbg::kprintf(char const*, ...)>
c0007dbb:	83 c4 10             	add    esp,0x10
c0007dbe:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0007dc3:	eb d9                	jmp    c0007d9e <sbrk+0x66>
c0007dc5:	8d a8 ff 0f 00 00    	lea    ebp,[eax+0xfff]
c0007dcb:	eb 8f                	jmp    c0007d5c <sbrk+0x24>

c0007dcd <mmap>:
c0007dcd:	83 ec 18             	sub    esp,0x18
c0007dd0:	68 f4 d5 01 c0       	push   0xc001d5f4
c0007dd5:	e8 65 89 00 00       	call   c001073f <Krnl::panic(char const*)>
c0007dda:	b8 00 00 00 00       	mov    eax,0x0
c0007ddf:	83 c4 1c             	add    esp,0x1c
c0007de2:	c3                   	ret    

c0007de3 <munmap>:
c0007de3:	83 ec 18             	sub    esp,0x18
c0007de6:	68 f9 d5 01 c0       	push   0xc001d5f9
c0007deb:	e8 4f 89 00 00       	call   c001073f <Krnl::panic(char const*)>
c0007df0:	b8 00 00 00 00       	mov    eax,0x0
c0007df5:	83 c4 1c             	add    esp,0x1c
c0007df8:	c3                   	ret    

c0007df9 <liballoc_lock()>:
c0007df9:	fa                   	cli    
c0007dfa:	ff 05 08 3d 02 c0    	inc    DWORD PTR ds:0xc0023d08
c0007e00:	b8 00 00 00 00       	mov    eax,0x0
c0007e05:	c3                   	ret    

c0007e06 <liballoc_unlock()>:
c0007e06:	a1 08 3d 02 c0       	mov    eax,ds:0xc0023d08
c0007e0b:	48                   	dec    eax
c0007e0c:	a3 08 3d 02 c0       	mov    ds:0xc0023d08,eax
c0007e11:	75 01                	jne    c0007e14 <liballoc_unlock()+0xe>
c0007e13:	fb                   	sti    
c0007e14:	b8 00 00 00 00       	mov    eax,0x0
c0007e19:	c3                   	ret    

c0007e1a <liballoc_alloc(int)>:
c0007e1a:	83 ec 10             	sub    esp,0x10
c0007e1d:	6a 01                	push   0x1
c0007e1f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007e23:	ff 35 30 09 02 c0    	push   DWORD PTR ds:0xc0020930
c0007e29:	e8 08 23 00 00       	call   c000a136 <VAS::allocatePages(int, int)>
c0007e2e:	83 c4 1c             	add    esp,0x1c
c0007e31:	c3                   	ret    

c0007e32 <liballoc_free(void*, int)>:
c0007e32:	83 ec 14             	sub    esp,0x14
c0007e35:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007e39:	ff 35 30 09 02 c0    	push   DWORD PTR ds:0xc0020930
c0007e3f:	e8 ae 1f 00 00       	call   c0009df2 <VAS::freeAllocatedPages(unsigned long)>
c0007e44:	b8 00 00 00 00       	mov    eax,0x0
c0007e49:	83 c4 1c             	add    esp,0x1c
c0007e4c:	c3                   	ret    

c0007e4d <realloc>:
c0007e4d:	83 ec 14             	sub    esp,0x14
c0007e50:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007e54:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007e58:	e8 f4 96 ff ff       	call   c0001551 <dlrealloc>
c0007e5d:	83 c4 1c             	add    esp,0x1c
c0007e60:	c3                   	ret    

c0007e61 <malloc>:
c0007e61:	83 ec 18             	sub    esp,0x18
c0007e64:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007e68:	e8 a7 91 ff ff       	call   c0001014 <dlmalloc>
c0007e6d:	83 c4 1c             	add    esp,0x1c
c0007e70:	c3                   	ret    

c0007e71 <free>:
c0007e71:	83 ec 18             	sub    esp,0x18
c0007e74:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007e78:	e8 3c 8e ff ff       	call   c0000cb9 <dlfree>
c0007e7d:	83 c4 1c             	add    esp,0x1c
c0007e80:	c3                   	ret    

c0007e81 <rfree>:
c0007e81:	83 ec 18             	sub    esp,0x18
c0007e84:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007e88:	e8 2c 8e ff ff       	call   c0000cb9 <dlfree>
c0007e8d:	83 c4 1c             	add    esp,0x1c
c0007e90:	c3                   	ret    

c0007e91 <calloc>:
c0007e91:	56                   	push   esi
c0007e92:	53                   	push   ebx
c0007e93:	83 ec 10             	sub    esp,0x10
c0007e96:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0007e9a:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c0007e9f:	53                   	push   ebx
c0007ea0:	e8 bc ff ff ff       	call   c0007e61 <malloc>
c0007ea5:	89 c6                	mov    esi,eax
c0007ea7:	83 c4 0c             	add    esp,0xc
c0007eaa:	53                   	push   ebx
c0007eab:	6a 00                	push   0x0
c0007ead:	50                   	push   eax
c0007eae:	e8 3d 86 ff ff       	call   c00004f0 <memset>
c0007eb3:	89 f0                	mov    eax,esi
c0007eb5:	83 c4 14             	add    esp,0x14
c0007eb8:	5b                   	pop    ebx
c0007eb9:	5e                   	pop    esi
c0007eba:	c3                   	ret    

c0007ebb <Krnl::setBootMessage(char const*)>:
c0007ebb:	57                   	push   edi
c0007ebc:	56                   	push   esi
c0007ebd:	53                   	push   ebx
c0007ebe:	81 ec a4 00 00 00    	sub    esp,0xa4
c0007ec4:	8b 9c 24 b4 00 00 00 	mov    ebx,DWORD PTR [esp+0xb4]
c0007ecb:	68 9e 00 00 00       	push   0x9e
c0007ed0:	6a 00                	push   0x0
c0007ed2:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0007ed6:	56                   	push   esi
c0007ed7:	e8 14 86 ff ff       	call   c00004f0 <memset>
c0007edc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007edf:	e8 7c 86 ff ff       	call   c0000560 <strlen>
c0007ee4:	ba 50 00 00 00       	mov    edx,0x50
c0007ee9:	83 c4 10             	add    esp,0x10
c0007eec:	29 c2                	sub    edx,eax
c0007eee:	66 0f be 03          	movsx  ax,BYTE PTR [ebx]
c0007ef2:	d1 ea                	shr    edx,1
c0007ef4:	84 c0                	test   al,al
c0007ef6:	74 19                	je     c0007f11 <Krnl::setBootMessage(char const*)+0x56>
c0007ef8:	01 d2                	add    edx,edx
c0007efa:	43                   	inc    ebx
c0007efb:	01 f2                	add    edx,esi
c0007efd:	80 cc 0f             	or     ah,0xf
c0007f00:	83 c2 02             	add    edx,0x2
c0007f03:	66 89 42 fe          	mov    WORD PTR [edx-0x2],ax
c0007f07:	43                   	inc    ebx
c0007f08:	66 0f be 43 ff       	movsx  ax,BYTE PTR [ebx-0x1]
c0007f0d:	84 c0                	test   al,al
c0007f0f:	75 ec                	jne    c0007efd <Krnl::setBootMessage(char const*)+0x42>
c0007f11:	bf 80 8c 0b c2       	mov    edi,0xc20b8c80
c0007f16:	b9 9e 00 00 00       	mov    ecx,0x9e
c0007f1b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0007f1d:	81 c4 a0 00 00 00    	add    esp,0xa0
c0007f23:	5b                   	pop    ebx
c0007f24:	5e                   	pop    esi
c0007f25:	5f                   	pop    edi
c0007f26:	c3                   	ret    

c0007f27 <kernel_main>:
c0007f27:	55                   	push   ebp
c0007f28:	57                   	push   edi
c0007f29:	bf f9 03 00 00       	mov    edi,0x3f9
c0007f2e:	56                   	push   esi
c0007f2f:	89 fa                	mov    edx,edi
c0007f31:	53                   	push   ebx
c0007f32:	31 f6                	xor    esi,esi
c0007f34:	83 ec 38             	sub    esp,0x38
c0007f37:	a1 00 05 00 00       	mov    eax,ds:0x500
c0007f3c:	a3 5c 08 02 c0       	mov    ds:0xc002085c,eax
c0007f41:	89 f0                	mov    eax,esi
c0007f43:	ee                   	out    dx,al
c0007f44:	bb fb 03 00 00       	mov    ebx,0x3fb
c0007f49:	b0 80                	mov    al,0x80
c0007f4b:	89 da                	mov    edx,ebx
c0007f4d:	ee                   	out    dx,al
c0007f4e:	b1 03                	mov    cl,0x3
c0007f50:	ba f8 03 00 00       	mov    edx,0x3f8
c0007f55:	88 c8                	mov    al,cl
c0007f57:	ee                   	out    dx,al
c0007f58:	89 f0                	mov    eax,esi
c0007f5a:	89 fa                	mov    edx,edi
c0007f5c:	ee                   	out    dx,al
c0007f5d:	88 c8                	mov    al,cl
c0007f5f:	89 da                	mov    edx,ebx
c0007f61:	ee                   	out    dx,al
c0007f62:	b0 c7                	mov    al,0xc7
c0007f64:	ba fa 03 00 00       	mov    edx,0x3fa
c0007f69:	ee                   	out    dx,al
c0007f6a:	b0 0b                	mov    al,0xb
c0007f6c:	ba fc 03 00 00       	mov    edx,0x3fc
c0007f71:	ee                   	out    dx,al
c0007f72:	68 00 d6 01 c0       	push   0xc001d600
c0007f77:	e8 74 2c 00 00       	call   c000abf0 <Dbg::kprintf(char const*, ...)>
c0007f7c:	0f be 05 e0 f5 01 c0 	movsx  eax,BYTE PTR ds:0xc001f5e0
c0007f83:	83 c4 10             	add    esp,0x10
c0007f86:	84 c0                	test   al,al
c0007f88:	74 5c                	je     c0007fe6 <kernel_main+0xbf>
c0007f8a:	31 db                	xor    ebx,ebx
c0007f8c:	bd 0a 00 00 00       	mov    ebp,0xa
c0007f91:	bf 05 00 00 00       	mov    edi,0x5
c0007f96:	31 f6                	xor    esi,esi
c0007f98:	eb 14                	jmp    c0007fae <kernel_main+0x87>
c0007f9a:	47                   	inc    edi
c0007f9b:	bd 0a 00 00 00       	mov    ebp,0xa
c0007fa0:	31 f6                	xor    esi,esi
c0007fa2:	43                   	inc    ebx
c0007fa3:	0f be 83 e0 f5 01 c0 	movsx  eax,BYTE PTR [ebx-0x3ffe0a20]
c0007faa:	84 c0                	test   al,al
c0007fac:	74 38                	je     c0007fe6 <kernel_main+0xbf>
c0007fae:	80 be 16 f6 01 c0 db 	cmp    BYTE PTR [esi-0x3ffe09ea],0xdb
c0007fb5:	0f 84 97 00 00 00    	je     c0008052 <kernel_main+0x12b>
c0007fbb:	3c 0d                	cmp    al,0xd
c0007fbd:	74 e3                	je     c0007fa2 <kernel_main+0x7b>
c0007fbf:	3c 0a                	cmp    al,0xa
c0007fc1:	74 d7                	je     c0007f9a <kernel_main+0x73>
c0007fc3:	83 ec 0c             	sub    esp,0xc
c0007fc6:	8d 54 35 00          	lea    edx,[ebp+esi*1+0x0]
c0007fca:	57                   	push   edi
c0007fcb:	43                   	inc    ebx
c0007fcc:	52                   	push   edx
c0007fcd:	46                   	inc    esi
c0007fce:	6a 00                	push   0x0
c0007fd0:	6a 0e                	push   0xe
c0007fd2:	50                   	push   eax
c0007fd3:	e8 c4 e4 00 00       	call   c001649c <HalConsoleWriteCharacter(char, int, int, int, int)>
c0007fd8:	83 c4 20             	add    esp,0x20
c0007fdb:	0f be 83 e0 f5 01 c0 	movsx  eax,BYTE PTR [ebx-0x3ffe0a20]
c0007fe2:	84 c0                	test   al,al
c0007fe4:	75 c8                	jne    c0007fae <kernel_main+0x87>
c0007fe6:	83 ec 0c             	sub    esp,0xc
c0007fe9:	a1 24 05 00 00       	mov    eax,ds:0x524
c0007fee:	05 ff 0f 00 00       	add    eax,0xfff
c0007ff3:	25 00 f0 ff ff       	and    eax,0xfffff000
c0007ff8:	50                   	push   eax
c0007ff9:	e8 82 03 00 00       	call   c0008380 <Phys::physicalMemorySetup(unsigned int)>
c0007ffe:	e8 59 1b 00 00       	call   c0009b5c <Virt::virtualMemorySetup()>
c0008003:	58                   	pop    eax
c0008004:	8d 5c 24 18          	lea    ebx,[esp+0x18]
c0008008:	53                   	push   ebx
c0008009:	e8 0a 1c 00 00       	call   c0009c18 <VAS::VAS()>
c000800e:	89 1d 30 09 02 c0    	mov    DWORD PTR ds:0xc0020930,ebx
c0008014:	e8 07 80 ff ff       	call   c0000020 <callGlobalConstructors>
c0008019:	c7 04 24 70 01 00 00 	mov    DWORD PTR [esp],0x170
c0008020:	e8 3c fe ff ff       	call   c0007e61 <malloc>
c0008025:	89 04 24             	mov    DWORD PTR [esp],eax
c0008028:	89 c6                	mov    esi,eax
c000802a:	e8 af f1 ff ff       	call   c00071de <Computer::Computer()>
c000802f:	6a 00                	push   0x0
c0008031:	89 35 44 08 02 c0    	mov    DWORD PTR ds:0xc0020844,esi
c0008037:	6a 00                	push   0x0
c0008039:	6a 00                	push   0x0
c000803b:	56                   	push   esi
c000803c:	e8 43 f5 ff ff       	call   c0007584 <Computer::open(int, int, void*)>
c0008041:	83 c4 14             	add    esp,0x14
c0008044:	53                   	push   ebx
c0008045:	e8 84 1e 00 00       	call   c0009ece <VAS::~VAS()>
c000804a:	83 c4 3c             	add    esp,0x3c
c000804d:	5b                   	pop    ebx
c000804e:	5e                   	pop    esi
c000804f:	5f                   	pop    edi
c0008050:	5d                   	pop    ebp
c0008051:	c3                   	ret    
c0008052:	31 d2                	xor    edx,edx
c0008054:	8a 96 15 f6 01 c0    	mov    dl,BYTE PTR [esi-0x3ffe09eb]
c000805a:	83 e2 fe             	and    edx,0xfffffffe
c000805d:	81 fa ba 00 00 00    	cmp    edx,0xba
c0008063:	0f 85 52 ff ff ff    	jne    c0007fbb <kernel_main+0x94>
c0008069:	45                   	inc    ebp
c000806a:	e9 4c ff ff ff       	jmp    c0007fbb <kernel_main+0x94>

c000806f <Phys::allocateDMA(unsigned long)>:
c000806f:	55                   	push   ebp
c0008070:	31 ed                	xor    ebp,ebp
c0008072:	57                   	push   edi
c0008073:	56                   	push   esi
c0008074:	53                   	push   ebx
c0008075:	31 db                	xor    ebx,ebx
c0008077:	83 ec 1c             	sub    esp,0x1c
c000807a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000807e:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0008086:	8d b8 ff 0f 00 00    	lea    edi,[eax+0xfff]
c000808c:	31 c0                	xor    eax,eax
c000808e:	c1 ef 0c             	shr    edi,0xc
c0008091:	eb 19                	jmp    c00080ac <Phys::allocateDMA(unsigned long)+0x3d>
c0008093:	85 c0                	test   eax,eax
c0008095:	75 06                	jne    c000809d <Phys::allocateDMA(unsigned long)+0x2e>
c0008097:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000809b:	89 dd                	mov    ebp,ebx
c000809d:	8d 70 01             	lea    esi,[eax+0x1]
c00080a0:	39 f7                	cmp    edi,esi
c00080a2:	74 33                	je     c00080d7 <Phys::allocateDMA(unsigned long)+0x68>
c00080a4:	89 f0                	mov    eax,esi
c00080a6:	43                   	inc    ebx
c00080a7:	83 fb 0f             	cmp    ebx,0xf
c00080aa:	7f 11                	jg     c00080bd <Phys::allocateDMA(unsigned long)+0x4e>
c00080ac:	80 bb 78 08 02 c0 00 	cmp    BYTE PTR [ebx-0x3ffdf788],0x0
c00080b3:	74 de                	je     c0008093 <Phys::allocateDMA(unsigned long)+0x24>
c00080b5:	31 c0                	xor    eax,eax
c00080b7:	43                   	inc    ebx
c00080b8:	83 fb 0f             	cmp    ebx,0xf
c00080bb:	7e ef                	jle    c00080ac <Phys::allocateDMA(unsigned long)+0x3d>
c00080bd:	83 ec 0c             	sub    esp,0xc
c00080c0:	68 18 d6 01 c0       	push   0xc001d618
c00080c5:	e8 75 86 00 00       	call   c001073f <Krnl::panic(char const*)>
c00080ca:	83 c4 10             	add    esp,0x10
c00080cd:	31 c0                	xor    eax,eax
c00080cf:	83 c4 1c             	add    esp,0x1c
c00080d2:	5b                   	pop    ebx
c00080d3:	5e                   	pop    esi
c00080d4:	5f                   	pop    edi
c00080d5:	5d                   	pop    ebp
c00080d6:	c3                   	ret    
c00080d7:	89 e9                	mov    ecx,ebp
c00080d9:	c1 f9 04             	sar    ecx,0x4
c00080dc:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00080e0:	8d 4c 3d 00          	lea    ecx,[ebp+edi*1+0x0]
c00080e4:	89 ca                	mov    edx,ecx
c00080e6:	4a                   	dec    edx
c00080e7:	79 03                	jns    c00080ec <Phys::allocateDMA(unsigned long)+0x7d>
c00080e9:	8d 51 0e             	lea    edx,[ecx+0xe]
c00080ec:	c1 fa 04             	sar    edx,0x4
c00080ef:	39 54 24 0c          	cmp    DWORD PTR [esp+0xc],edx
c00080f3:	74 08                	je     c00080fd <Phys::allocateDMA(unsigned long)+0x8e>
c00080f5:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c00080f9:	31 c0                	xor    eax,eax
c00080fb:	eb ba                	jmp    c00080b7 <Phys::allocateDMA(unsigned long)+0x48>
c00080fd:	85 f6                	test   esi,esi
c00080ff:	74 15                	je     c0008116 <Phys::allocateDMA(unsigned long)+0xa7>
c0008101:	8d 95 78 08 02 c0    	lea    edx,[ebp-0x3ffdf788]
c0008107:	8d 84 05 79 08 02 c0 	lea    eax,[ebp+eax*1-0x3ffdf787]
c000810e:	c6 02 01             	mov    BYTE PTR [edx],0x1
c0008111:	42                   	inc    edx
c0008112:	39 d0                	cmp    eax,edx
c0008114:	75 f8                	jne    c000810e <Phys::allocateDMA(unsigned long)+0x9f>
c0008116:	01 3d 70 08 02 c0    	add    DWORD PTR ds:0xc0020870,edi
c000811c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008120:	85 c0                	test   eax,eax
c0008122:	74 17                	je     c000813b <Phys::allocateDMA(unsigned long)+0xcc>
c0008124:	83 ec 0c             	sub    esp,0xc
c0008127:	68 18 d6 01 c0       	push   0xc001d618
c000812c:	e8 0e 86 00 00       	call   c001073f <Krnl::panic(char const*)>
c0008131:	83 c4 10             	add    esp,0x10
c0008134:	89 f0                	mov    eax,esi
c0008136:	e9 6b ff ff ff       	jmp    c00080a6 <Phys::allocateDMA(unsigned long)+0x37>
c000813b:	c1 e5 0c             	shl    ebp,0xc
c000813e:	8d 85 00 00 01 c2    	lea    eax,[ebp-0x3dff0000]
c0008144:	eb 89                	jmp    c00080cf <Phys::allocateDMA(unsigned long)+0x60>

c0008146 <Phys::freeDMA(unsigned long, unsigned long)>:
c0008146:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000814a:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c0008150:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008154:	c1 ea 0c             	shr    edx,0xc
c0008157:	05 00 00 ff 3d       	add    eax,0x3dff0000
c000815c:	29 15 70 08 02 c0    	sub    DWORD PTR ds:0xc0020870,edx
c0008162:	c1 e8 0c             	shr    eax,0xc
c0008165:	85 d2                	test   edx,edx
c0008167:	74 0f                	je     c0008178 <Phys::freeDMA(unsigned long, unsigned long)+0x32>
c0008169:	05 78 08 02 c0       	add    eax,0xc0020878
c000816e:	01 c2                	add    edx,eax
c0008170:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0008173:	40                   	inc    eax
c0008174:	39 d0                	cmp    eax,edx
c0008176:	75 f8                	jne    c0008170 <Phys::freeDMA(unsigned long, unsigned long)+0x2a>
c0008178:	c3                   	ret    

c0008179 <Phys::setPageState(unsigned long, bool)>:
c0008179:	56                   	push   esi
c000817a:	ba 01 00 00 00       	mov    edx,0x1
c000817f:	53                   	push   ebx
c0008180:	8b 35 24 f7 01 c0    	mov    esi,DWORD PTR ds:0xc001f724
c0008186:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000818a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000818e:	89 c8                	mov    eax,ecx
c0008190:	83 e1 07             	and    ecx,0x7
c0008193:	c1 e8 03             	shr    eax,0x3
c0008196:	d3 e3                	shl    ebx,cl
c0008198:	01 c6                	add    esi,eax
c000819a:	d3 e2                	shl    edx,cl
c000819c:	f7 d2                	not    edx
c000819e:	20 16                	and    BYTE PTR [esi],dl
c00081a0:	03 05 24 f7 01 c0    	add    eax,DWORD PTR ds:0xc001f724
c00081a6:	08 18                	or     BYTE PTR [eax],bl
c00081a8:	5b                   	pop    ebx
c00081a9:	5e                   	pop    esi
c00081aa:	c3                   	ret    

c00081ab <Phys::getPageState(unsigned long)>:
c00081ab:	53                   	push   ebx
c00081ac:	8b 15 24 f7 01 c0    	mov    edx,DWORD PTR ds:0xc001f724
c00081b2:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00081b6:	31 db                	xor    ebx,ebx
c00081b8:	89 c8                	mov    eax,ecx
c00081ba:	83 e1 07             	and    ecx,0x7
c00081bd:	c1 e8 03             	shr    eax,0x3
c00081c0:	8a 1c 02             	mov    bl,BYTE PTR [edx+eax*1]
c00081c3:	89 d8                	mov    eax,ebx
c00081c5:	5b                   	pop    ebx
c00081c6:	d3 f8                	sar    eax,cl
c00081c8:	83 e0 01             	and    eax,0x1
c00081cb:	c3                   	ret    

c00081cc <Phys::freePage(unsigned long)>:
c00081cc:	53                   	push   ebx
c00081cd:	83 ec 08             	sub    esp,0x8
c00081d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00081d4:	8d 90 00 00 ff ff    	lea    edx,[eax-0x10000]
c00081da:	81 fa ff ff 00 00    	cmp    edx,0xffff
c00081e0:	76 3a                	jbe    c000821c <Phys::freePage(unsigned long)+0x50>
c00081e2:	c1 e8 0c             	shr    eax,0xc
c00081e5:	50                   	push   eax
c00081e6:	89 c3                	mov    ebx,eax
c00081e8:	e8 be ff ff ff       	call   c00081ab <Phys::getPageState(unsigned long)>
c00081ed:	5a                   	pop    edx
c00081ee:	84 c0                	test   al,al
c00081f0:	74 19                	je     c000820b <Phys::freePage(unsigned long)+0x3f>
c00081f2:	83 ec 08             	sub    esp,0x8
c00081f5:	ff 0d 70 08 02 c0    	dec    DWORD PTR ds:0xc0020870
c00081fb:	6a 00                	push   0x0
c00081fd:	53                   	push   ebx
c00081fe:	e8 76 ff ff ff       	call   c0008179 <Phys::setPageState(unsigned long, bool)>
c0008203:	83 c4 10             	add    esp,0x10
c0008206:	83 c4 08             	add    esp,0x8
c0008209:	5b                   	pop    ebx
c000820a:	c3                   	ret    
c000820b:	c7 44 24 10 bd d6 01 c0 	mov    DWORD PTR [esp+0x10],0xc001d6bd
c0008213:	83 c4 08             	add    esp,0x8
c0008216:	5b                   	pop    ebx
c0008217:	e9 23 85 00 00       	jmp    c001073f <Krnl::panic(char const*)>
c000821c:	68 00 10 00 00       	push   0x1000
c0008221:	50                   	push   eax
c0008222:	e8 1f ff ff ff       	call   c0008146 <Phys::freeDMA(unsigned long, unsigned long)>
c0008227:	59                   	pop    ecx
c0008228:	5b                   	pop    ebx
c0008229:	83 c4 08             	add    esp,0x8
c000822c:	5b                   	pop    ebx
c000822d:	c3                   	ret    

c000822e <Phys::allocatePage()>:
c000822e:	56                   	push   esi
c000822f:	53                   	push   ebx
c0008230:	83 ec 14             	sub    esp,0x14
c0008233:	8b 35 64 08 02 c0    	mov    esi,DWORD PTR ds:0xc0020864
c0008239:	89 f3                	mov    ebx,esi
c000823b:	eb 0a                	jmp    c0008247 <Phys::allocatePage()+0x19>
c000823d:	89 1d 64 08 02 c0    	mov    DWORD PTR ds:0xc0020864,ebx
c0008243:	39 de                	cmp    esi,ebx
c0008245:	74 24                	je     c000826b <Phys::allocatePage()+0x3d>
c0008247:	53                   	push   ebx
c0008248:	e8 5e ff ff ff       	call   c00081ab <Phys::getPageState(unsigned long)>
c000824d:	5a                   	pop    edx
c000824e:	84 c0                	test   al,al
c0008250:	74 5f                	je     c00082b1 <Phys::allocatePage()+0x83>
c0008252:	43                   	inc    ebx
c0008253:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0008259:	75 e2                	jne    c000823d <Phys::allocatePage()+0xf>
c000825b:	31 db                	xor    ebx,ebx
c000825d:	c7 05 64 08 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0020864,0x0
c0008267:	39 de                	cmp    esi,ebx
c0008269:	75 dc                	jne    c0008247 <Phys::allocatePage()+0x19>
c000826b:	83 ec 0c             	sub    esp,0xc
c000826e:	80 35 88 08 02 c0 01 	xor    BYTE PTR ds:0xc0020888,0x1
c0008275:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000827a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000827d:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0008283:	50                   	push   eax
c0008284:	e8 87 26 00 00       	call   c000a910 <VAS::scanForEviction()>
c0008289:	83 c4 10             	add    esp,0x10
c000828c:	85 c0                	test   eax,eax
c000828e:	75 3f                	jne    c00082cf <Phys::allocatePage()+0xa1>
c0008290:	83 ec 0c             	sub    esp,0xc
c0008293:	68 40 d6 01 c0       	push   0xc001d640
c0008298:	e8 a2 84 00 00       	call   c001073f <Krnl::panic(char const*)>
c000829d:	83 c4 10             	add    esp,0x10
c00082a0:	8b 1d 64 08 02 c0    	mov    ebx,DWORD PTR ds:0xc0020864
c00082a6:	53                   	push   ebx
c00082a7:	e8 ff fe ff ff       	call   c00081ab <Phys::getPageState(unsigned long)>
c00082ac:	5a                   	pop    edx
c00082ad:	84 c0                	test   al,al
c00082af:	75 a1                	jne    c0008252 <Phys::allocatePage()+0x24>
c00082b1:	6a 01                	push   0x1
c00082b3:	53                   	push   ebx
c00082b4:	e8 c0 fe ff ff       	call   c0008179 <Phys::setPageState(unsigned long, bool)>
c00082b9:	a1 64 08 02 c0       	mov    eax,ds:0xc0020864
c00082be:	5a                   	pop    edx
c00082bf:	ff 05 70 08 02 c0    	inc    DWORD PTR ds:0xc0020870
c00082c5:	c1 e0 0c             	shl    eax,0xc
c00082c8:	59                   	pop    ecx
c00082c9:	83 c4 14             	add    esp,0x14
c00082cc:	5b                   	pop    ebx
c00082cd:	5e                   	pop    esi
c00082ce:	c3                   	ret    
c00082cf:	83 ec 08             	sub    esp,0x8
c00082d2:	89 c2                	mov    edx,eax
c00082d4:	6a 01                	push   0x1
c00082d6:	c1 ea 0c             	shr    edx,0xc
c00082d9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00082dd:	52                   	push   edx
c00082de:	e8 96 fe ff ff       	call   c0008179 <Phys::setPageState(unsigned long, bool)>
c00082e3:	83 c4 10             	add    esp,0x10
c00082e6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00082ea:	eb dd                	jmp    c00082c9 <Phys::allocatePage()+0x9b>

c00082ec <Phys::allocateContiguousPages(int)>:
c00082ec:	57                   	push   edi
c00082ed:	56                   	push   esi
c00082ee:	53                   	push   ebx
c00082ef:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00082f3:	fa                   	cli    
c00082f4:	ff 05 08 3d 02 c0    	inc    DWORD PTR ds:0xc0023d08
c00082fa:	31 db                	xor    ebx,ebx
c00082fc:	85 db                	test   ebx,ebx
c00082fe:	75 11                	jne    c0008311 <Phys::allocateContiguousPages(int)+0x25>
c0008300:	e8 29 ff ff ff       	call   c000822e <Phys::allocatePage()>
c0008305:	83 fe 01             	cmp    esi,0x1
c0008308:	89 c7                	mov    edi,eax
c000830a:	74 21                	je     c000832d <Phys::allocateContiguousPages(int)+0x41>
c000830c:	bb 01 00 00 00       	mov    ebx,0x1
c0008311:	e8 18 ff ff ff       	call   c000822e <Phys::allocatePage()>
c0008316:	89 da                	mov    edx,ebx
c0008318:	c1 e2 0c             	shl    edx,0xc
c000831b:	01 fa                	add    edx,edi
c000831d:	39 c2                	cmp    edx,eax
c000831f:	74 20                	je     c0008341 <Phys::allocateContiguousPages(int)+0x55>
c0008321:	bb 01 00 00 00       	mov    ebx,0x1
c0008326:	89 c7                	mov    edi,eax
c0008328:	83 fe 01             	cmp    esi,0x1
c000832b:	75 e4                	jne    c0008311 <Phys::allocateContiguousPages(int)+0x25>
c000832d:	a1 08 3d 02 c0       	mov    eax,ds:0xc0023d08
c0008332:	48                   	dec    eax
c0008333:	a3 08 3d 02 c0       	mov    ds:0xc0023d08,eax
c0008338:	75 01                	jne    c000833b <Phys::allocateContiguousPages(int)+0x4f>
c000833a:	fb                   	sti    
c000833b:	89 f8                	mov    eax,edi
c000833d:	5b                   	pop    ebx
c000833e:	5e                   	pop    esi
c000833f:	5f                   	pop    edi
c0008340:	c3                   	ret    
c0008341:	43                   	inc    ebx
c0008342:	39 f3                	cmp    ebx,esi
c0008344:	75 b6                	jne    c00082fc <Phys::allocateContiguousPages(int)+0x10>
c0008346:	eb e5                	jmp    c000832d <Phys::allocateContiguousPages(int)+0x41>

c0008348 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c0008348:	56                   	push   esi
c0008349:	53                   	push   ebx
c000834a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000834e:	39 1d 68 08 02 c0    	cmp    DWORD PTR ds:0xc0020868,ebx
c0008354:	73 06                	jae    c000835c <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c0008356:	89 1d 68 08 02 c0    	mov    DWORD PTR ds:0xc0020868,ebx
c000835c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008360:	c1 eb 0c             	shr    ebx,0xc
c0008363:	c1 e8 0c             	shr    eax,0xc
c0008366:	39 d8                	cmp    eax,ebx
c0008368:	73 13                	jae    c000837d <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c000836a:	6a 00                	push   0x0
c000836c:	8d 70 01             	lea    esi,[eax+0x1]
c000836f:	50                   	push   eax
c0008370:	e8 04 fe ff ff       	call   c0008179 <Phys::setPageState(unsigned long, bool)>
c0008375:	5a                   	pop    edx
c0008376:	89 f0                	mov    eax,esi
c0008378:	59                   	pop    ecx
c0008379:	39 f3                	cmp    ebx,esi
c000837b:	75 ed                	jne    c000836a <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c000837d:	5b                   	pop    ebx
c000837e:	5e                   	pop    esi
c000837f:	c3                   	ret    

c0008380 <Phys::physicalMemorySetup(unsigned int)>:
c0008380:	55                   	push   ebp
c0008381:	57                   	push   edi
c0008382:	56                   	push   esi
c0008383:	53                   	push   ebx
c0008384:	31 db                	xor    ebx,ebx
c0008386:	83 ec 40             	sub    esp,0x40
c0008389:	6a 10                	push   0x10
c000838b:	6a 00                	push   0x0
c000838d:	68 78 08 02 c0       	push   0xc0020878
c0008392:	e8 59 81 ff ff       	call   c00004f0 <memset>
c0008397:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000839b:	25 00 f0 ff ff       	and    eax,0xfffff000
c00083a0:	05 00 10 00 00       	add    eax,0x1000
c00083a5:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00083a9:	5a                   	pop    edx
c00083aa:	59                   	pop    ecx
c00083ab:	50                   	push   eax
c00083ac:	68 d3 d6 01 c0       	push   0xc001d6d3
c00083b1:	e8 3a 28 00 00       	call   c000abf0 <Dbg::kprintf(char const*, ...)>
c00083b6:	83 c4 10             	add    esp,0x10
c00083b9:	83 ec 08             	sub    esp,0x8
c00083bc:	6a 01                	push   0x1
c00083be:	53                   	push   ebx
c00083bf:	43                   	inc    ebx
c00083c0:	e8 b4 fd ff ff       	call   c0008179 <Phys::setPageState(unsigned long, bool)>
c00083c5:	83 c4 10             	add    esp,0x10
c00083c8:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c00083ce:	75 e9                	jne    c00083b9 <Phys::physicalMemorySetup(unsigned int)+0x39>
c00083d0:	66 a1 13 05 00 c2    	mov    ax,ds:0xc2000513
c00083d6:	66 85 c0             	test   ax,ax
c00083d9:	0f 84 97 01 00 00    	je     c0008576 <Phys::physicalMemorySetup(unsigned int)+0x1f6>
c00083df:	89 c7                	mov    edi,eax
c00083e1:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00083e9:	81 e7 ff ff 00 00    	and    edi,0xffff
c00083ef:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c00083f4:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c00083f8:	eb 15                	jmp    c000840f <Phys::physicalMemorySetup(unsigned int)+0x8f>
c00083fa:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c00083fe:	83 c3 18             	add    ebx,0x18
c0008401:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008405:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0008409:	0f 84 77 01 00 00    	je     c0008586 <Phys::physicalMemorySetup(unsigned int)+0x206>
c000840f:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0008412:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0008415:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0008418:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000841c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0008420:	8b 33                	mov    esi,DWORD PTR [ebx]
c0008422:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c0008425:	01 f0                	add    eax,esi
c0008427:	55                   	push   ebp
c0008428:	11 fa                	adc    edx,edi
c000842a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000842e:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0008432:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008436:	50                   	push   eax
c0008437:	56                   	push   esi
c0008438:	68 70 d6 01 c0       	push   0xc001d670
c000843d:	e8 ae 27 00 00       	call   c000abf0 <Dbg::kprintf(char const*, ...)>
c0008442:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008446:	83 c4 10             	add    esp,0x10
c0008449:	09 f8                	or     eax,edi
c000844b:	0f 85 35 01 00 00    	jne    c0008586 <Phys::physicalMemorySetup(unsigned int)+0x206>
c0008451:	4d                   	dec    ebp
c0008452:	75 a6                	jne    c00083fa <Phys::physicalMemorySetup(unsigned int)+0x7a>
c0008454:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0008458:	ba 00 00 08 00       	mov    edx,0x80000
c000845d:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c0008461:	39 f2                	cmp    edx,esi
c0008463:	89 c1                	mov    ecx,eax
c0008465:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000846d:	19 f9                	sbb    ecx,edi
c000846f:	0f 82 a7 00 00 00    	jb     c000851c <Phys::physicalMemorySetup(unsigned int)+0x19c>
c0008475:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c0008479:	89 c1                	mov    ecx,eax
c000847b:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c000847f:	0f 83 97 00 00 00    	jae    c000851c <Phys::physicalMemorySetup(unsigned int)+0x19c>
c0008485:	ba 00 00 0a 00       	mov    edx,0xa0000
c000848a:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000848e:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0008492:	39 fa                	cmp    edx,edi
c0008494:	19 e8                	sbb    eax,ebp
c0008496:	0f 82 9a 01 00 00    	jb     c0008636 <Phys::physicalMemorySetup(unsigned int)+0x2b6>
c000849c:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00084a0:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c00084a4:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c00084aa:	ba ff 1f 00 00       	mov    edx,0x1fff
c00084af:	83 d5 ff             	adc    ebp,0xffffffff
c00084b2:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c00084b6:	31 c0                	xor    eax,eax
c00084b8:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c00084bc:	39 fa                	cmp    edx,edi
c00084be:	89 c1                	mov    ecx,eax
c00084c0:	19 e9                	sbb    ecx,ebp
c00084c2:	0f 83 32 ff ff ff    	jae    c00083fa <Phys::physicalMemorySetup(unsigned int)+0x7a>
c00084c8:	be 00 00 08 00       	mov    esi,0x80000
c00084cd:	51                   	push   ecx
c00084ce:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00084d2:	57                   	push   edi
c00084d3:	56                   	push   esi
c00084d4:	68 94 d6 01 c0       	push   0xc001d694
c00084d9:	e8 12 27 00 00       	call   c000abf0 <Dbg::kprintf(char const*, ...)>
c00084de:	5d                   	pop    ebp
c00084df:	58                   	pop    eax
c00084e0:	57                   	push   edi
c00084e1:	56                   	push   esi
c00084e2:	e8 61 fe ff ff       	call   c0008348 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c00084e7:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00084eb:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00084ef:	83 c4 0c             	add    esp,0xc
c00084f2:	0f ac d0 0c          	shrd   eax,edx,0xc
c00084f6:	03 05 74 08 02 c0    	add    eax,DWORD PTR ds:0xc0020874
c00084fc:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0008503:	a3 74 08 02 c0       	mov    ds:0xc0020874,eax
c0008508:	52                   	push   edx
c0008509:	50                   	push   eax
c000850a:	68 f9 d6 01 c0       	push   0xc001d6f9
c000850f:	e8 dc 26 00 00       	call   c000abf0 <Dbg::kprintf(char const*, ...)>
c0008514:	83 c4 10             	add    esp,0x10
c0008517:	e9 de fe ff ff       	jmp    c00083fa <Phys::physicalMemorySetup(unsigned int)+0x7a>
c000851c:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c0008520:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008524:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0008528:	39 ea                	cmp    edx,ebp
c000852a:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c000852e:	0f 82 c6 fe ff ff    	jb     c00083fa <Phys::physicalMemorySetup(unsigned int)+0x7a>
c0008534:	ba ff 1f 00 00       	mov    edx,0x1fff
c0008539:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c000853d:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c0008541:	0f 83 b3 fe ff ff    	jae    c00083fa <Phys::physicalMemorySetup(unsigned int)+0x7a>
c0008547:	39 ee                	cmp    esi,ebp
c0008549:	89 f8                	mov    eax,edi
c000854b:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c000854f:	0f 83 78 ff ff ff    	jae    c00084cd <Phys::physicalMemorySetup(unsigned int)+0x14d>
c0008555:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0008559:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000855d:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0008561:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008565:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c0008569:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000856d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0008571:	e9 57 ff ff ff       	jmp    c00084cd <Phys::physicalMemorySetup(unsigned int)+0x14d>
c0008576:	83 ec 0c             	sub    esp,0xc
c0008579:	68 eb d6 01 c0       	push   0xc001d6eb
c000857e:	e8 bc 81 00 00       	call   c001073f <Krnl::panic(char const*)>
c0008583:	83 c4 10             	add    esp,0x10
c0008586:	83 ec 08             	sub    esp,0x8
c0008589:	bb 60 00 00 00       	mov    ebx,0x60
c000858e:	6a 00                	push   0x0
c0008590:	6a 06                	push   0x6
c0008592:	e8 e2 fb ff ff       	call   c0008179 <Phys::setPageState(unsigned long, bool)>
c0008597:	58                   	pop    eax
c0008598:	5a                   	pop    edx
c0008599:	6a 00                	push   0x0
c000859b:	6a 07                	push   0x7
c000859d:	e8 d7 fb ff ff       	call   c0008179 <Phys::setPageState(unsigned long, bool)>
c00085a2:	83 05 74 08 02 c0 02 	add    DWORD PTR ds:0xc0020874,0x2
c00085a9:	83 c4 10             	add    esp,0x10
c00085ac:	83 ec 08             	sub    esp,0x8
c00085af:	6a 00                	push   0x0
c00085b1:	53                   	push   ebx
c00085b2:	43                   	inc    ebx
c00085b3:	e8 c1 fb ff ff       	call   c0008179 <Phys::setPageState(unsigned long, bool)>
c00085b8:	83 c4 10             	add    esp,0x10
c00085bb:	81 fb 80 00 00 00    	cmp    ebx,0x80
c00085c1:	75 e9                	jne    c00085ac <Phys::physicalMemorySetup(unsigned int)+0x22c>
c00085c3:	a1 74 08 02 c0       	mov    eax,ds:0xc0020874
c00085c8:	bb 40 01 00 00       	mov    ebx,0x140
c00085cd:	83 c0 20             	add    eax,0x20
c00085d0:	a3 74 08 02 c0       	mov    ds:0xc0020874,eax
c00085d5:	eb 22                	jmp    c00085f9 <Phys::physicalMemorySetup(unsigned int)+0x279>
c00085d7:	83 ec 08             	sub    esp,0x8
c00085da:	6a 00                	push   0x0
c00085dc:	53                   	push   ebx
c00085dd:	43                   	inc    ebx
c00085de:	e8 96 fb ff ff       	call   c0008179 <Phys::setPageState(unsigned long, bool)>
c00085e3:	a1 74 08 02 c0       	mov    eax,ds:0xc0020874
c00085e8:	83 c4 10             	add    esp,0x10
c00085eb:	40                   	inc    eax
c00085ec:	81 fb c0 01 00 00    	cmp    ebx,0x1c0
c00085f2:	a3 74 08 02 c0       	mov    ds:0xc0020874,eax
c00085f7:	74 07                	je     c0008600 <Phys::physicalMemorySetup(unsigned int)+0x280>
c00085f9:	3d ff 03 00 00       	cmp    eax,0x3ff
c00085fe:	7e d7                	jle    c00085d7 <Phys::physicalMemorySetup(unsigned int)+0x257>
c0008600:	bb d0 01 00 00       	mov    ebx,0x1d0
c0008605:	3d ff 07 00 00       	cmp    eax,0x7ff
c000860a:	7f 22                	jg     c000862e <Phys::physicalMemorySetup(unsigned int)+0x2ae>
c000860c:	83 ec 08             	sub    esp,0x8
c000860f:	6a 00                	push   0x0
c0008611:	53                   	push   ebx
c0008612:	43                   	inc    ebx
c0008613:	e8 61 fb ff ff       	call   c0008179 <Phys::setPageState(unsigned long, bool)>
c0008618:	a1 74 08 02 c0       	mov    eax,ds:0xc0020874
c000861d:	83 c4 10             	add    esp,0x10
c0008620:	40                   	inc    eax
c0008621:	81 fb e0 01 00 00    	cmp    ebx,0x1e0
c0008627:	a3 74 08 02 c0       	mov    ds:0xc0020874,eax
c000862c:	75 d7                	jne    c0008605 <Phys::physicalMemorySetup(unsigned int)+0x285>
c000862e:	83 c4 3c             	add    esp,0x3c
c0008631:	5b                   	pop    ebx
c0008632:	5e                   	pop    esi
c0008633:	5f                   	pop    edi
c0008634:	5d                   	pop    ebp
c0008635:	c3                   	ret    
c0008636:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c000863e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0008646:	e9 51 fe ff ff       	jmp    c000849c <Phys::physicalMemorySetup(unsigned int)+0x11c>
c000864b:	90                   	nop

c000864c <Pipe::isAtty()>:
c000864c:	31 c0                	xor    eax,eax
c000864e:	c3                   	ret    
c000864f:	90                   	nop

c0008650 <Pipe::~Pipe()>:
c0008650:	83 ec 0c             	sub    esp,0xc
c0008653:	ba 58 d7 01 c0       	mov    edx,0xc001d758
c0008658:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000865c:	89 10                	mov    DWORD PTR [eax],edx
c000865e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008662:	83 ec 0c             	sub    esp,0xc
c0008665:	50                   	push   eax
c0008666:	e8 d1 10 00 00       	call   c000973c <UnixFile::~UnixFile()>
c000866b:	83 c4 10             	add    esp,0x10
c000866e:	90                   	nop
c000866f:	83 c4 0c             	add    esp,0xc
c0008672:	c3                   	ret    
c0008673:	90                   	nop

c0008674 <Pipe::~Pipe()>:
c0008674:	83 ec 0c             	sub    esp,0xc
c0008677:	83 ec 0c             	sub    esp,0xc
c000867a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000867e:	e8 cd ff ff ff       	call   c0008650 <Pipe::~Pipe()>
c0008683:	83 c4 10             	add    esp,0x10
c0008686:	83 ec 08             	sub    esp,0x8
c0008689:	6a 20                	push   0x20
c000868b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000868f:	e8 66 24 00 00       	call   c000aafa <operator delete(void*, unsigned long)>
c0008694:	83 c4 10             	add    esp,0x10
c0008697:	83 c4 0c             	add    esp,0xc
c000869a:	c3                   	ret    
c000869b:	90                   	nop

c000869c <Pipe::write(unsigned long long, void*, int*)>:
c000869c:	55                   	push   ebp
c000869d:	57                   	push   edi
c000869e:	56                   	push   esi
c000869f:	53                   	push   ebx
c00086a0:	83 ec 1c             	sub    esp,0x1c
c00086a3:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00086a7:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00086ab:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c00086ae:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00086b2:	89 04 24             	mov    DWORD PTR [esp],eax
c00086b5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00086b9:	89 d8                	mov    eax,ebx
c00086bb:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c00086be:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c00086c2:	89 d6                	mov    esi,edx
c00086c4:	89 d7                	mov    edi,edx
c00086c6:	c1 ff 1f             	sar    edi,0x1f
c00086c9:	03 34 24             	add    esi,DWORD PTR [esp]
c00086cc:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c00086d0:	c1 f8 1f             	sar    eax,0x1f
c00086d3:	39 f3                	cmp    ebx,esi
c00086d5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00086d9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00086dd:	19 f8                	sbb    eax,edi
c00086df:	b8 01 00 00 00       	mov    eax,0x1
c00086e4:	72 6e                	jb     c0008754 <Pipe::write(unsigned long long, void*, int*)+0xb8>
c00086e6:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00086e9:	01 d0                	add    eax,edx
c00086eb:	99                   	cdq    
c00086ec:	f7 fb                	idiv   ebx
c00086ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00086f2:	29 d3                	sub    ebx,edx
c00086f4:	89 d7                	mov    edi,edx
c00086f6:	89 de                	mov    esi,ebx
c00086f8:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00086fb:	c1 fb 1f             	sar    ebx,0x1f
c00086fe:	39 f2                	cmp    edx,esi
c0008700:	19 d8                	sbb    eax,ebx
c0008702:	b8 00 00 00 00       	mov    eax,0x0
c0008707:	72 04                	jb     c000870d <Pipe::write(unsigned long long, void*, int*)+0x71>
c0008709:	89 d0                	mov    eax,edx
c000870b:	29 f0                	sub    eax,esi
c000870d:	89 d3                	mov    ebx,edx
c000870f:	29 c3                	sub    ebx,eax
c0008711:	74 0b                	je     c000871e <Pipe::write(unsigned long long, void*, int*)+0x82>
c0008713:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c0008716:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c000871a:	89 d9                	mov    ecx,ebx
c000871c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000871e:	85 c0                	test   eax,eax
c0008720:	74 0d                	je     c000872f <Pipe::write(unsigned long long, void*, int*)+0x93>
c0008722:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c0008726:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0008729:	89 de                	mov    esi,ebx
c000872b:	89 c1                	mov    ecx,eax
c000872d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000872f:	01 55 14             	add    DWORD PTR [ebp+0x14],edx
c0008732:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0008737:	75 10                	jne    c0008749 <Pipe::write(unsigned long long, void*, int*)+0xad>
c0008739:	83 ec 0c             	sub    esp,0xc
c000873c:	68 15 d7 01 c0       	push   0xc001d715
c0008741:	e8 f9 7f 00 00       	call   c001073f <Krnl::panic(char const*)>
c0008746:	83 c4 10             	add    esp,0x10
c0008749:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000874d:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0008750:	89 08                	mov    DWORD PTR [eax],ecx
c0008752:	31 c0                	xor    eax,eax
c0008754:	83 c4 1c             	add    esp,0x1c
c0008757:	5b                   	pop    ebx
c0008758:	5e                   	pop    esi
c0008759:	5f                   	pop    edi
c000875a:	5d                   	pop    ebp
c000875b:	c3                   	ret    

c000875c <Pipe::read(unsigned long long, void*, int*)>:
c000875c:	55                   	push   ebp
c000875d:	57                   	push   edi
c000875e:	56                   	push   esi
c000875f:	53                   	push   ebx
c0008760:	83 ec 1c             	sub    esp,0x1c
c0008763:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0008767:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000876b:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000876f:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0008772:	89 c8                	mov    eax,ecx
c0008774:	99                   	cdq    
c0008775:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c0008779:	74 24                	je     c000879f <Pipe::read(unsigned long long, void*, int*)+0x43>
c000877b:	39 f9                	cmp    ecx,edi
c000877d:	89 d1                	mov    ecx,edx
c000877f:	19 f1                	sbb    ecx,esi
c0008781:	73 1c                	jae    c000879f <Pipe::read(unsigned long long, void*, int*)+0x43>
c0008783:	fa                   	cli    
c0008784:	ff 05 08 3d 02 c0    	inc    DWORD PTR ds:0xc0023d08
c000878a:	e8 05 b3 00 00       	call   c0013a94 <schedule()>
c000878f:	a1 08 3d 02 c0       	mov    eax,ds:0xc0023d08
c0008794:	48                   	dec    eax
c0008795:	a3 08 3d 02 c0       	mov    ds:0xc0023d08,eax
c000879a:	75 d3                	jne    c000876f <Pipe::read(unsigned long long, void*, int*)+0x13>
c000879c:	fb                   	sti    
c000879d:	eb d0                	jmp    c000876f <Pipe::read(unsigned long long, void*, int*)+0x13>
c000879f:	39 f8                	cmp    eax,edi
c00087a1:	89 d1                	mov    ecx,edx
c00087a3:	89 3c 24             	mov    DWORD PTR [esp],edi
c00087a6:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c00087aa:	19 f1                	sbb    ecx,esi
c00087ac:	73 07                	jae    c00087b5 <Pipe::read(unsigned long long, void*, int*)+0x59>
c00087ae:	89 04 24             	mov    DWORD PTR [esp],eax
c00087b1:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00087b5:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c00087b8:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c00087bb:	29 f7                	sub    edi,esi
c00087bd:	89 f8                	mov    eax,edi
c00087bf:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00087c3:	99                   	cdq    
c00087c4:	39 3c 24             	cmp    DWORD PTR [esp],edi
c00087c7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00087cb:	19 d0                	sbb    eax,edx
c00087cd:	73 07                	jae    c00087d6 <Pipe::read(unsigned long long, void*, int*)+0x7a>
c00087cf:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00087d2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00087d6:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c00087d9:	89 ea                	mov    edx,ebp
c00087db:	2b 54 24 0c          	sub    edx,DWORD PTR [esp+0xc]
c00087df:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00087e4:	74 0d                	je     c00087f3 <Pipe::read(unsigned long long, void*, int*)+0x97>
c00087e6:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c00087e9:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c00087ed:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00087f1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00087f3:	85 d2                	test   edx,edx
c00087f5:	74 11                	je     c0008808 <Pipe::read(unsigned long long, void*, int*)+0xac>
c00087f7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00087fb:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c00087fe:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c0008802:	89 d1                	mov    ecx,edx
c0008804:	89 c7                	mov    edi,eax
c0008806:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0008808:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000880b:	29 6b 14             	sub    DWORD PTR [ebx+0x14],ebp
c000880e:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c0008811:	99                   	cdq    
c0008812:	89 f7                	mov    edi,esi
c0008814:	03 04 24             	add    eax,DWORD PTR [esp]
c0008817:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c000881b:	c1 ff 1f             	sar    edi,0x1f
c000881e:	57                   	push   edi
c000881f:	56                   	push   esi
c0008820:	52                   	push   edx
c0008821:	50                   	push   eax
c0008822:	e8 39 39 01 00       	call   c001c160 <__umoddi3>
c0008827:	83 c4 10             	add    esp,0x10
c000882a:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000882d:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0008832:	75 10                	jne    c0008844 <Pipe::read(unsigned long long, void*, int*)+0xe8>
c0008834:	83 ec 0c             	sub    esp,0xc
c0008837:	68 32 d7 01 c0       	push   0xc001d732
c000883c:	e8 fe 7e 00 00       	call   c001073f <Krnl::panic(char const*)>
c0008841:	83 c4 10             	add    esp,0x10
c0008844:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0008848:	8b 14 24             	mov    edx,DWORD PTR [esp]
c000884b:	89 10                	mov    DWORD PTR [eax],edx
c000884d:	83 c4 1c             	add    esp,0x1c
c0008850:	31 c0                	xor    eax,eax
c0008852:	5b                   	pop    ebx
c0008853:	5e                   	pop    esi
c0008854:	5f                   	pop    edi
c0008855:	5d                   	pop    ebp
c0008856:	c3                   	ret    
c0008857:	90                   	nop

c0008858 <Pipe::Pipe(int)>:
c0008858:	83 ec 0c             	sub    esp,0xc
c000885b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000885f:	83 ec 08             	sub    esp,0x8
c0008862:	6a 00                	push   0x0
c0008864:	50                   	push   eax
c0008865:	e8 f0 0c 00 00       	call   c000955a <UnixFile::UnixFile(int)>
c000886a:	83 c4 10             	add    esp,0x10
c000886d:	ba 58 d7 01 c0       	mov    edx,0xc001d758
c0008872:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008876:	89 10                	mov    DWORD PTR [eax],edx
c0008878:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000887c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0008880:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0008883:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008887:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c000888e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008892:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c0008899:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000889d:	83 ec 0c             	sub    esp,0xc
c00088a0:	50                   	push   eax
c00088a1:	e8 bb f5 ff ff       	call   c0007e61 <malloc>
c00088a6:	83 c4 10             	add    esp,0x10
c00088a9:	89 c2                	mov    edx,eax
c00088ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00088af:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00088b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00088b6:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c00088ba:	90                   	nop
c00088bb:	83 c4 0c             	add    esp,0xc
c00088be:	c3                   	ret    
c00088bf:	90                   	nop

c00088c0 <VgaText::isAtty()>:
c00088c0:	b0 01                	mov    al,0x1
c00088c2:	c3                   	ret    
c00088c3:	90                   	nop

c00088c4 <VgaText::~VgaText()>:
c00088c4:	83 ec 0c             	sub    esp,0xc
c00088c7:	ba e0 d7 01 c0       	mov    edx,0xc001d7e0
c00088cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00088d0:	89 10                	mov    DWORD PTR [eax],edx
c00088d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00088d6:	83 ec 0c             	sub    esp,0xc
c00088d9:	50                   	push   eax
c00088da:	e8 5d 0e 00 00       	call   c000973c <UnixFile::~UnixFile()>
c00088df:	83 c4 10             	add    esp,0x10
c00088e2:	90                   	nop
c00088e3:	83 c4 0c             	add    esp,0xc
c00088e6:	c3                   	ret    
c00088e7:	90                   	nop

c00088e8 <VgaText::~VgaText()>:
c00088e8:	83 ec 0c             	sub    esp,0xc
c00088eb:	83 ec 0c             	sub    esp,0xc
c00088ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00088f2:	e8 cd ff ff ff       	call   c00088c4 <VgaText::~VgaText()>
c00088f7:	83 c4 10             	add    esp,0x10
c00088fa:	83 ec 08             	sub    esp,0x8
c00088fd:	68 34 01 00 00       	push   0x134
c0008902:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008906:	e8 ef 21 00 00       	call   c000aafa <operator delete(void*, unsigned long)>
c000890b:	83 c4 10             	add    esp,0x10
c000890e:	83 c4 0c             	add    esp,0xc
c0008911:	c3                   	ret    

c0008912 <VgaText::read(unsigned long long, void*, int*)>:
c0008912:	83 ec 10             	sub    esp,0x10
c0008915:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008919:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000891d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008921:	e8 24 45 00 00       	call   c000ce4a <readKeyboard(VgaText*, char*, unsigned long)>
c0008926:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000892a:	89 02                	mov    DWORD PTR [edx],eax
c000892c:	31 c0                	xor    eax,eax
c000892e:	83 c4 1c             	add    esp,0x1c
c0008931:	c3                   	ret    

c0008932 <setTerminalScrollLock(bool)>:
c0008932:	c3                   	ret    

c0008933 <doTerminalCycle()>:
c0008933:	c3                   	ret    

c0008934 <addToTerminalCycle(VgaText*)>:
c0008934:	c3                   	ret    

c0008935 <scrollTerminalScrollLock(int)>:
c0008935:	c3                   	ret    

c0008936 <VgaText::updateTitle()>:
c0008936:	c3                   	ret    
c0008937:	90                   	nop

c0008938 <VgaText::load()>:
c0008938:	c3                   	ret    
c0008939:	90                   	nop

c000893a <VgaText::updateCursor()>:
c000893a:	83 ec 14             	sub    esp,0x14
c000893d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008941:	ff 70 18             	push   DWORD PTR [eax+0x18]
c0008944:	ff 70 14             	push   DWORD PTR [eax+0x14]
c0008947:	e8 bc db 00 00       	call   c0016508 <HalConsoleCursorUpdate(int, int)>
c000894c:	83 c4 1c             	add    esp,0x1c
c000894f:	c3                   	ret    

c0008950 <VgaText::doANSI_SGR(int)>:
c0008950:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008954:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008958:	85 d2                	test   edx,edx
c000895a:	75 0b                	jne    c0008967 <VgaText::doANSI_SGR(int)+0x17>
c000895c:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c000895f:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0008962:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0008965:	eb 59                	jmp    c00089c0 <VgaText::doANSI_SGR(int)+0x70>
c0008967:	83 fa 07             	cmp    edx,0x7
c000896a:	75 0b                	jne    c0008977 <VgaText::doANSI_SGR(int)+0x27>
c000896c:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c000896f:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c0008972:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c0008975:	eb 49                	jmp    c00089c0 <VgaText::doANSI_SGR(int)+0x70>
c0008977:	83 fa 1b             	cmp    edx,0x1b
c000897a:	74 e0                	je     c000895c <VgaText::doANSI_SGR(int)+0xc>
c000897c:	8d 4a e2             	lea    ecx,[edx-0x1e]
c000897f:	83 f9 07             	cmp    ecx,0x7
c0008982:	77 09                	ja     c000898d <VgaText::doANSI_SGR(int)+0x3d>
c0008984:	8b 14 8d 60 f7 01 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffe08a0]
c000898b:	eb 20                	jmp    c00089ad <VgaText::doANSI_SGR(int)+0x5d>
c000898d:	8d 4a d8             	lea    ecx,[edx-0x28]
c0008990:	83 f9 07             	cmp    ecx,0x7
c0008993:	77 09                	ja     c000899e <VgaText::doANSI_SGR(int)+0x4e>
c0008995:	8b 14 8d 60 f7 01 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffe08a0]
c000899c:	eb 22                	jmp    c00089c0 <VgaText::doANSI_SGR(int)+0x70>
c000899e:	8d 4a a6             	lea    ecx,[edx-0x5a]
c00089a1:	83 f9 07             	cmp    ecx,0x7
c00089a4:	77 0b                	ja     c00089b1 <VgaText::doANSI_SGR(int)+0x61>
c00089a6:	8b 14 95 18 f6 01 c0 	mov    edx,DWORD PTR [edx*4-0x3ffe09e8]
c00089ad:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c00089b0:	c3                   	ret    
c00089b1:	8d 4a 9c             	lea    ecx,[edx-0x64]
c00089b4:	83 f9 07             	cmp    ecx,0x7
c00089b7:	77 0a                	ja     c00089c3 <VgaText::doANSI_SGR(int)+0x73>
c00089b9:	8b 14 95 f0 f5 01 c0 	mov    edx,DWORD PTR [edx*4-0x3ffe0a10]
c00089c0:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c00089c3:	c3                   	ret    

c00089c4 <VgaText::setDefaultBgColour(VgaColour)>:
c00089c4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00089c8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00089cc:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c00089cf:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c00089d2:	c3                   	ret    
c00089d3:	90                   	nop

c00089d4 <VgaText::setDefaultFgColour(VgaColour)>:
c00089d4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00089d8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00089dc:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c00089df:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c00089e2:	c3                   	ret    
c00089e3:	90                   	nop

c00089e4 <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c00089e4:	53                   	push   ebx
c00089e5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00089e9:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00089ed:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00089f1:	51                   	push   ecx
c00089f2:	e8 cd ff ff ff       	call   c00089c4 <VgaText::setDefaultBgColour(VgaColour)>
c00089f7:	58                   	pop    eax
c00089f8:	5a                   	pop    edx
c00089f9:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c00089fd:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0008a01:	5b                   	pop    ebx
c0008a02:	eb d0                	jmp    c00089d4 <VgaText::setDefaultFgColour(VgaColour)>

c0008a04 <VgaText::setTitleTextColour(VgaColour)>:
c0008a04:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008a08:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008a0c:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0008a0f:	c3                   	ret    

c0008a10 <VgaText::setTitleColour(VgaColour)>:
c0008a10:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008a14:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008a18:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0008a1b:	c3                   	ret    

c0008a1c <VgaText::setTitle(char*)>:
c0008a1c:	c3                   	ret    
c0008a1d:	90                   	nop

c0008a1e <VgaText::combineColours(unsigned char, unsigned char)>:
c0008a1e:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0008a22:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0008a27:	83 e0 0f             	and    eax,0xf
c0008a2a:	c1 e2 04             	shl    edx,0x4
c0008a2d:	09 d0                	or     eax,edx
c0008a2f:	c3                   	ret    

c0008a30 <VgaText::scrollScreen()>:
c0008a30:	55                   	push   ebp
c0008a31:	b9 01 00 00 00       	mov    ecx,0x1
c0008a36:	57                   	push   edi
c0008a37:	56                   	push   esi
c0008a38:	53                   	push   ebx
c0008a39:	83 ec 0c             	sub    esp,0xc
c0008a3c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008a40:	69 f1 a0 00 00 00    	imul   esi,ecx,0xa0
c0008a46:	31 ff                	xor    edi,edi
c0008a48:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0008a4b:	83 f9 18             	cmp    ecx,0x18
c0008a4e:	8a 14 30             	mov    dl,BYTE PTR [eax+esi*1]
c0008a51:	88 94 30 60 ff ff ff 	mov    BYTE PTR [eax+esi*1-0xa0],dl
c0008a58:	75 27                	jne    c0008a81 <VgaText::scrollScreen()+0x51>
c0008a5a:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0008a5d:	01 f5                	add    ebp,esi
c0008a5f:	f7 c7 01 00 00 00    	test   edi,0x1
c0008a65:	74 16                	je     c0008a7d <VgaText::scrollScreen()+0x4d>
c0008a67:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c0008a6b:	50                   	push   eax
c0008a6c:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c0008a70:	50                   	push   eax
c0008a71:	e8 a8 ff ff ff       	call   c0008a1e <VgaText::combineColours(unsigned char, unsigned char)>
c0008a76:	5a                   	pop    edx
c0008a77:	5a                   	pop    edx
c0008a78:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c0008a7b:	eb 04                	jmp    c0008a81 <VgaText::scrollScreen()+0x51>
c0008a7d:	c6 45 00 20          	mov    BYTE PTR [ebp+0x0],0x20
c0008a81:	47                   	inc    edi
c0008a82:	46                   	inc    esi
c0008a83:	81 ff a0 00 00 00    	cmp    edi,0xa0
c0008a89:	75 bd                	jne    c0008a48 <VgaText::scrollScreen()+0x18>
c0008a8b:	41                   	inc    ecx
c0008a8c:	83 f9 19             	cmp    ecx,0x19
c0008a8f:	75 af                	jne    c0008a40 <VgaText::scrollScreen()+0x10>
c0008a91:	39 1d 90 08 02 c0    	cmp    DWORD PTR ds:0xc0020890,ebx
c0008a97:	75 1f                	jne    c0008ab8 <VgaText::scrollScreen()+0x88>
c0008a99:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c0008a9d:	74 05                	je     c0008aa4 <VgaText::scrollScreen()+0x74>
c0008a9f:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c0008aa2:	eb 14                	jmp    c0008ab8 <VgaText::scrollScreen()+0x88>
c0008aa4:	50                   	push   eax
c0008aa5:	50                   	push   eax
c0008aa6:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c0008aaa:	50                   	push   eax
c0008aab:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c0008aaf:	50                   	push   eax
c0008ab0:	e8 df d8 00 00       	call   c0016394 <HalConsoleScroll(int, int)>
c0008ab5:	83 c4 10             	add    esp,0x10
c0008ab8:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0008abc:	83 c4 0c             	add    esp,0xc
c0008abf:	5b                   	pop    ebx
c0008ac0:	5e                   	pop    esi
c0008ac1:	5f                   	pop    edi
c0008ac2:	5d                   	pop    ebp
c0008ac3:	e9 72 fe ff ff       	jmp    c000893a <VgaText::updateCursor()>

c0008ac8 <VgaText::combineCharAndColour(char, unsigned char)>:
c0008ac8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0008acd:	c1 e0 08             	shl    eax,0x8
c0008ad0:	89 c2                	mov    edx,eax
c0008ad2:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0008ad7:	09 d0                	or     eax,edx
c0008ad9:	c3                   	ret    

c0008ada <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c0008ada:	55                   	push   ebp
c0008adb:	57                   	push   edi
c0008adc:	56                   	push   esi
c0008add:	53                   	push   ebx
c0008ade:	83 ec 1c             	sub    esp,0x1c
c0008ae1:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0008ae5:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0008ae9:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0008aed:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008af1:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0008af5:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0008af9:	0f b6 c3             	movzx  eax,bl
c0008afc:	50                   	push   eax
c0008afd:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0008b02:	50                   	push   eax
c0008b03:	e8 16 ff ff ff       	call   c0008a1e <VgaText::combineColours(unsigned char, unsigned char)>
c0008b08:	5a                   	pop    edx
c0008b09:	0f b6 c0             	movzx  eax,al
c0008b0c:	59                   	pop    ecx
c0008b0d:	0f be 4c 24 34       	movsx  ecx,BYTE PTR [esp+0x34]
c0008b12:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0008b16:	50                   	push   eax
c0008b17:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008b1b:	e8 a8 ff ff ff       	call   c0008ac8 <VgaText::combineCharAndColour(char, unsigned char)>
c0008b20:	5a                   	pop    edx
c0008b21:	66 6b d7 50          	imul   dx,di,0x50
c0008b25:	59                   	pop    ecx
c0008b26:	01 f2                	add    edx,esi
c0008b28:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0008b2b:	0f b7 d2             	movzx  edx,dx
c0008b2e:	66 89 04 51          	mov    WORD PTR [ecx+edx*2],ax
c0008b32:	39 2d 90 08 02 c0    	cmp    DWORD PTR ds:0xc0020890,ebp
c0008b38:	75 28                	jne    c0008b62 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x88>
c0008b3a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008b3e:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c0008b42:	89 74 24 3c          	mov    DWORD PTR [esp+0x3c],esi
c0008b46:	89 5c 24 38          	mov    DWORD PTR [esp+0x38],ebx
c0008b4a:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0008b4e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0008b52:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0008b56:	83 c4 1c             	add    esp,0x1c
c0008b59:	5b                   	pop    ebx
c0008b5a:	5e                   	pop    esi
c0008b5b:	5f                   	pop    edi
c0008b5c:	5d                   	pop    ebp
c0008b5d:	e9 3a d9 00 00       	jmp    c001649c <HalConsoleWriteCharacter(char, int, int, int, int)>
c0008b62:	83 c4 1c             	add    esp,0x1c
c0008b65:	5b                   	pop    ebx
c0008b66:	5e                   	pop    esi
c0008b67:	5f                   	pop    edi
c0008b68:	5d                   	pop    ebp
c0008b69:	c3                   	ret    

c0008b6a <VgaText::getCursorX()>:
c0008b6a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008b6e:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0008b71:	c3                   	ret    

c0008b72 <VgaText::getCursorY()>:
c0008b72:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008b76:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0008b79:	c3                   	ret    

c0008b7a <VgaText::setCursor(int, int)>:
c0008b7a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008b7e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008b82:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0008b85:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0008b89:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0008b8c:	e9 a9 fd ff ff       	jmp    c000893a <VgaText::updateCursor()>

c0008b91 <setActiveTerminal(VgaText*)>:
c0008b91:	53                   	push   ebx
c0008b92:	83 ec 08             	sub    esp,0x8
c0008b95:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008b99:	85 db                	test   ebx,ebx
c0008b9b:	75 11                	jne    c0008bae <setActiveTerminal(VgaText*)+0x1d>
c0008b9d:	c7 44 24 10 6c d7 01 c0 	mov    DWORD PTR [esp+0x10],0xc001d76c
c0008ba5:	83 c4 08             	add    esp,0x8
c0008ba8:	5b                   	pop    ebx
c0008ba9:	e9 91 7b 00 00       	jmp    c001073f <Krnl::panic(char const*)>
c0008bae:	a1 90 08 02 c0       	mov    eax,ds:0xc0020890
c0008bb3:	85 c0                	test   eax,eax
c0008bb5:	74 0c                	je     c0008bc3 <setActiveTerminal(VgaText*)+0x32>
c0008bb7:	83 ec 0c             	sub    esp,0xc
c0008bba:	50                   	push   eax
c0008bbb:	e8 7a fd ff ff       	call   c000893a <VgaText::updateCursor()>
c0008bc0:	83 c4 10             	add    esp,0x10
c0008bc3:	89 1d 90 08 02 c0    	mov    DWORD PTR ds:0xc0020890,ebx
c0008bc9:	50                   	push   eax
c0008bca:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008bcd:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0008bd0:	53                   	push   ebx
c0008bd1:	e8 a4 ff ff ff       	call   c0008b7a <VgaText::setCursor(int, int)>
c0008bd6:	83 c4 18             	add    esp,0x18
c0008bd9:	5b                   	pop    ebx
c0008bda:	c3                   	ret    
c0008bdb:	90                   	nop

c0008bdc <VgaText::clearScreen()>:
c0008bdc:	57                   	push   edi
c0008bdd:	56                   	push   esi
c0008bde:	31 f6                	xor    esi,esi
c0008be0:	53                   	push   ebx
c0008be1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008be5:	52                   	push   edx
c0008be6:	6a 00                	push   0x0
c0008be8:	6a 00                	push   0x0
c0008bea:	53                   	push   ebx
c0008beb:	e8 8a ff ff ff       	call   c0008b7a <VgaText::setCursor(int, int)>
c0008bf0:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c0008bf7:	83 c4 10             	add    esp,0x10
c0008bfa:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c0008bfd:	7e 20                	jle    c0008c1f <VgaText::clearScreen()+0x43>
c0008bff:	31 ff                	xor    edi,edi
c0008c01:	50                   	push   eax
c0008c02:	50                   	push   eax
c0008c03:	56                   	push   esi
c0008c04:	57                   	push   edi
c0008c05:	47                   	inc    edi
c0008c06:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008c09:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008c0c:	6a 20                	push   0x20
c0008c0e:	53                   	push   ebx
c0008c0f:	e8 c6 fe ff ff       	call   c0008ada <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0008c14:	83 c4 20             	add    esp,0x20
c0008c17:	83 ff 50             	cmp    edi,0x50
c0008c1a:	75 e5                	jne    c0008c01 <VgaText::clearScreen()+0x25>
c0008c1c:	46                   	inc    esi
c0008c1d:	eb db                	jmp    c0008bfa <VgaText::clearScreen()+0x1e>
c0008c1f:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c0008c26:	5b                   	pop    ebx
c0008c27:	5e                   	pop    esi
c0008c28:	5f                   	pop    edi
c0008c29:	c3                   	ret    

c0008c2a <VgaText::setCursorX(int)>:
c0008c2a:	83 ec 10             	sub    esp,0x10
c0008c2d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008c31:	ff 70 18             	push   DWORD PTR [eax+0x18]
c0008c34:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008c38:	50                   	push   eax
c0008c39:	e8 3c ff ff ff       	call   c0008b7a <VgaText::setCursor(int, int)>
c0008c3e:	83 c4 1c             	add    esp,0x1c
c0008c41:	c3                   	ret    

c0008c42 <VgaText::setCursorY(int)>:
c0008c42:	83 ec 10             	sub    esp,0x10
c0008c45:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008c49:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008c4d:	ff 70 14             	push   DWORD PTR [eax+0x14]
c0008c50:	50                   	push   eax
c0008c51:	e8 24 ff ff ff       	call   c0008b7a <VgaText::setCursor(int, int)>
c0008c56:	83 c4 1c             	add    esp,0x1c
c0008c59:	c3                   	ret    

c0008c5a <VgaText::incrementCursor(bool)>:
c0008c5a:	56                   	push   esi
c0008c5b:	53                   	push   ebx
c0008c5c:	51                   	push   ecx
c0008c5d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008c61:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008c65:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0008c68:	40                   	inc    eax
c0008c69:	83 f8 50             	cmp    eax,0x50
c0008c6c:	74 05                	je     c0008c73 <VgaText::incrementCursor(bool)+0x19>
c0008c6e:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0008c71:	eb 24                	jmp    c0008c97 <VgaText::incrementCursor(bool)+0x3d>
c0008c73:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0008c76:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008c7d:	8d 50 01             	lea    edx,[eax+0x1]
c0008c80:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0008c83:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c0008c86:	75 0f                	jne    c0008c97 <VgaText::incrementCursor(bool)+0x3d>
c0008c88:	83 ec 0c             	sub    esp,0xc
c0008c8b:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0008c8e:	53                   	push   ebx
c0008c8f:	e8 9c fd ff ff       	call   c0008a30 <VgaText::scrollScreen()>
c0008c94:	83 c4 10             	add    esp,0x10
c0008c97:	89 f0                	mov    eax,esi
c0008c99:	84 c0                	test   al,al
c0008c9b:	74 0c                	je     c0008ca9 <VgaText::incrementCursor(bool)+0x4f>
c0008c9d:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008ca1:	5a                   	pop    edx
c0008ca2:	5b                   	pop    ebx
c0008ca3:	5e                   	pop    esi
c0008ca4:	e9 91 fc ff ff       	jmp    c000893a <VgaText::updateCursor()>
c0008ca9:	58                   	pop    eax
c0008caa:	5b                   	pop    ebx
c0008cab:	5e                   	pop    esi
c0008cac:	c3                   	ret    
c0008cad:	90                   	nop

c0008cae <VgaText::decrementCursor(bool)>:
c0008cae:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008cb2:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0008cb6:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0008cb9:	85 c0                	test   eax,eax
c0008cbb:	74 04                	je     c0008cc1 <VgaText::decrementCursor(bool)+0x13>
c0008cbd:	48                   	dec    eax
c0008cbe:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0008cc1:	84 c9                	test   cl,cl
c0008cc3:	74 09                	je     c0008cce <VgaText::decrementCursor(bool)+0x20>
c0008cc5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0008cc9:	e9 6c fc ff ff       	jmp    c000893a <VgaText::updateCursor()>
c0008cce:	c3                   	ret    
c0008ccf:	90                   	nop

c0008cd0 <VgaText::putchar(char, VgaColour, VgaColour)>:
c0008cd0:	53                   	push   ebx
c0008cd1:	83 ec 08             	sub    esp,0x8
c0008cd4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008cd8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008cdc:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0008ce0:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0008ce4:	3c 07                	cmp    al,0x7
c0008ce6:	75 21                	jne    c0008d09 <VgaText::putchar(char, VgaColour, VgaColour)+0x39>
c0008ce8:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0008cf0:	c7 44 24 14 f4 01 00 00 	mov    DWORD PTR [esp+0x14],0x1f4
c0008cf8:	c7 44 24 10 b8 01 00 00 	mov    DWORD PTR [esp+0x10],0x1b8
c0008d00:	83 c4 08             	add    esp,0x8
c0008d03:	5b                   	pop    ebx
c0008d04:	e9 3e 2d 00 00       	jmp    c000ba47 <Krnl::beep(int, int, bool)>
c0008d09:	3c 0d                	cmp    al,0xd
c0008d0b:	75 09                	jne    c0008d16 <VgaText::putchar(char, VgaColour, VgaColour)+0x46>
c0008d0d:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008d14:	eb 2c                	jmp    c0008d42 <VgaText::putchar(char, VgaColour, VgaColour)+0x72>
c0008d16:	3c 0a                	cmp    al,0xa
c0008d18:	75 31                	jne    c0008d4b <VgaText::putchar(char, VgaColour, VgaColour)+0x7b>
c0008d1a:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0008d1d:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008d24:	8d 50 01             	lea    edx,[eax+0x1]
c0008d27:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0008d2a:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c0008d2d:	75 0f                	jne    c0008d3e <VgaText::putchar(char, VgaColour, VgaColour)+0x6e>
c0008d2f:	83 ec 0c             	sub    esp,0xc
c0008d32:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0008d35:	53                   	push   ebx
c0008d36:	e8 f5 fc ff ff       	call   c0008a30 <VgaText::scrollScreen()>
c0008d3b:	83 c4 10             	add    esp,0x10
c0008d3e:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008d42:	83 c4 08             	add    esp,0x8
c0008d45:	5b                   	pop    ebx
c0008d46:	e9 ef fb ff ff       	jmp    c000893a <VgaText::updateCursor()>
c0008d4b:	3c 08                	cmp    al,0x8
c0008d4d:	75 25                	jne    c0008d74 <VgaText::putchar(char, VgaColour, VgaColour)+0xa4>
c0008d4f:	50                   	push   eax
c0008d50:	50                   	push   eax
c0008d51:	6a 01                	push   0x1
c0008d53:	53                   	push   ebx
c0008d54:	e8 55 ff ff ff       	call   c0008cae <VgaText::decrementCursor(bool)>
c0008d59:	5a                   	pop    edx
c0008d5a:	59                   	pop    ecx
c0008d5b:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008d5e:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0008d61:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008d64:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008d67:	6a 20                	push   0x20
c0008d69:	53                   	push   ebx
c0008d6a:	e8 6b fd ff ff       	call   c0008ada <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0008d6f:	83 c4 28             	add    esp,0x28
c0008d72:	5b                   	pop    ebx
c0008d73:	c3                   	ret    
c0008d74:	83 ec 08             	sub    esp,0x8
c0008d77:	0f be c0             	movsx  eax,al
c0008d7a:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008d7d:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0008d80:	51                   	push   ecx
c0008d81:	52                   	push   edx
c0008d82:	50                   	push   eax
c0008d83:	53                   	push   ebx
c0008d84:	e8 51 fd ff ff       	call   c0008ada <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0008d89:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c0008d8d:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c0008d95:	83 c4 28             	add    esp,0x28
c0008d98:	5b                   	pop    ebx
c0008d99:	e9 bc fe ff ff       	jmp    c0008c5a <VgaText::incrementCursor(bool)>

c0008d9e <VgaText::putchar(char)>:
c0008d9e:	56                   	push   esi
c0008d9f:	53                   	push   ebx
c0008da0:	83 ec 14             	sub    esp,0x14
c0008da3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0008da7:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008dab:	3c 5b                	cmp    al,0x5b
c0008dad:	75 18                	jne    c0008dc7 <VgaText::putchar(char)+0x29>
c0008daf:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c0008db3:	74 1f                	je     c0008dd4 <VgaText::putchar(char)+0x36>
c0008db5:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c0008dbb:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c0008dc2:	e9 bd 00 00 00       	jmp    c0008e84 <VgaText::putchar(char)+0xe6>
c0008dc7:	3c 1b                	cmp    al,0x1b
c0008dc9:	75 09                	jne    c0008dd4 <VgaText::putchar(char)+0x36>
c0008dcb:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c0008dcf:	e9 b0 00 00 00       	jmp    c0008e84 <VgaText::putchar(char)+0xe6>
c0008dd4:	8a 4b 41             	mov    cl,BYTE PTR [ebx+0x41]
c0008dd7:	84 c9                	test   cl,cl
c0008dd9:	0f 84 92 00 00 00    	je     c0008e71 <VgaText::putchar(char)+0xd3>
c0008ddf:	8d 50 c0             	lea    edx,[eax-0x40]
c0008de2:	80 fa 3e             	cmp    dl,0x3e
c0008de5:	77 76                	ja     c0008e5d <VgaText::putchar(char)+0xbf>
c0008de7:	3c 6d                	cmp    al,0x6d
c0008de9:	75 47                	jne    c0008e32 <VgaText::putchar(char)+0x94>
c0008deb:	31 f6                	xor    esi,esi
c0008ded:	31 d2                	xor    edx,edx
c0008def:	31 c0                	xor    eax,eax
c0008df1:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c0008df4:	7e 2d                	jle    c0008e23 <VgaText::putchar(char)+0x85>
c0008df6:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c0008dfb:	80 fa 3b             	cmp    dl,0x3b
c0008dfe:	75 17                	jne    c0008e17 <VgaText::putchar(char)+0x79>
c0008e00:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0008e04:	50                   	push   eax
c0008e05:	53                   	push   ebx
c0008e06:	e8 45 fb ff ff       	call   c0008950 <VgaText::doANSI_SGR(int)>
c0008e0b:	59                   	pop    ecx
c0008e0c:	31 d2                	xor    edx,edx
c0008e0e:	58                   	pop    eax
c0008e0f:	31 c0                	xor    eax,eax
c0008e11:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0008e15:	eb 09                	jmp    c0008e20 <VgaText::putchar(char)+0x82>
c0008e17:	6b c0 0a             	imul   eax,eax,0xa
c0008e1a:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c0008e1e:	88 ca                	mov    dl,cl
c0008e20:	46                   	inc    esi
c0008e21:	eb ce                	jmp    c0008df1 <VgaText::putchar(char)+0x53>
c0008e23:	84 d2                	test   dl,dl
c0008e25:	74 2e                	je     c0008e55 <VgaText::putchar(char)+0xb7>
c0008e27:	50                   	push   eax
c0008e28:	53                   	push   ebx
c0008e29:	e8 22 fb ff ff       	call   c0008950 <VgaText::doANSI_SGR(int)>
c0008e2e:	58                   	pop    eax
c0008e2f:	5a                   	pop    edx
c0008e30:	eb 23                	jmp    c0008e55 <VgaText::putchar(char)+0xb7>
c0008e32:	3c 4a                	cmp    al,0x4a
c0008e34:	75 1f                	jne    c0008e55 <VgaText::putchar(char)+0xb7>
c0008e36:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c0008e3a:	75 19                	jne    c0008e55 <VgaText::putchar(char)+0xb7>
c0008e3c:	83 ec 0c             	sub    esp,0xc
c0008e3f:	53                   	push   ebx
c0008e40:	e8 97 fd ff ff       	call   c0008bdc <VgaText::clearScreen()>
c0008e45:	83 c4 0c             	add    esp,0xc
c0008e48:	6a 00                	push   0x0
c0008e4a:	6a 00                	push   0x0
c0008e4c:	53                   	push   ebx
c0008e4d:	e8 28 fd ff ff       	call   c0008b7a <VgaText::setCursor(int, int)>
c0008e52:	83 c4 10             	add    esp,0x10
c0008e55:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c0008e5b:	eb 27                	jmp    c0008e84 <VgaText::putchar(char)+0xe6>
c0008e5d:	8b 53 54             	mov    edx,DWORD PTR [ebx+0x54]
c0008e60:	83 fa 0e             	cmp    edx,0xe
c0008e63:	7f 1f                	jg     c0008e84 <VgaText::putchar(char)+0xe6>
c0008e65:	8d 4a 01             	lea    ecx,[edx+0x1]
c0008e68:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c0008e6b:	88 44 13 42          	mov    BYTE PTR [ebx+edx*1+0x42],al
c0008e6f:	eb 13                	jmp    c0008e84 <VgaText::putchar(char)+0xe6>
c0008e71:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008e74:	0f be c0             	movsx  eax,al
c0008e77:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008e7a:	50                   	push   eax
c0008e7b:	53                   	push   ebx
c0008e7c:	e8 4f fe ff ff       	call   c0008cd0 <VgaText::putchar(char, VgaColour, VgaColour)>
c0008e81:	83 c4 10             	add    esp,0x10
c0008e84:	83 c4 14             	add    esp,0x14
c0008e87:	5b                   	pop    ebx
c0008e88:	5e                   	pop    esi
c0008e89:	c3                   	ret    

c0008e8a <VgaText::putx(unsigned int)>:
c0008e8a:	57                   	push   edi
c0008e8b:	b9 11 00 00 00       	mov    ecx,0x11
c0008e90:	56                   	push   esi
c0008e91:	be 7a d7 01 c0       	mov    esi,0xc001d77a
c0008e96:	53                   	push   ebx
c0008e97:	83 ec 20             	sub    esp,0x20
c0008e9a:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0008e9e:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c0008ea2:	fc                   	cld    
c0008ea3:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0008ea5:	be 08 00 00 00       	mov    esi,0x8
c0008eaa:	50                   	push   eax
c0008eab:	50                   	push   eax
c0008eac:	89 d8                	mov    eax,ebx
c0008eae:	c1 e3 04             	shl    ebx,0x4
c0008eb1:	c1 e8 1c             	shr    eax,0x1c
c0008eb4:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c0008eb9:	50                   	push   eax
c0008eba:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0008ebe:	e8 db fe ff ff       	call   c0008d9e <VgaText::putchar(char)>
c0008ec3:	83 c4 10             	add    esp,0x10
c0008ec6:	4e                   	dec    esi
c0008ec7:	75 e1                	jne    c0008eaa <VgaText::putx(unsigned int)+0x20>
c0008ec9:	83 c4 20             	add    esp,0x20
c0008ecc:	5b                   	pop    ebx
c0008ecd:	5e                   	pop    esi
c0008ece:	5f                   	pop    edi
c0008ecf:	c3                   	ret    

c0008ed0 <VgaText::puts(char const*)>:
c0008ed0:	53                   	push   ebx
c0008ed1:	83 ec 08             	sub    esp,0x8
c0008ed4:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0008ed8:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0008edb:	84 c0                	test   al,al
c0008edd:	74 12                	je     c0008ef1 <VgaText::puts(char const*)+0x21>
c0008edf:	43                   	inc    ebx
c0008ee0:	51                   	push   ecx
c0008ee1:	51                   	push   ecx
c0008ee2:	50                   	push   eax
c0008ee3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008ee7:	e8 b2 fe ff ff       	call   c0008d9e <VgaText::putchar(char)>
c0008eec:	83 c4 10             	add    esp,0x10
c0008eef:	eb e7                	jmp    c0008ed8 <VgaText::puts(char const*)+0x8>
c0008ef1:	83 c4 08             	add    esp,0x8
c0008ef4:	5b                   	pop    ebx
c0008ef5:	c3                   	ret    

c0008ef6 <VgaText::write(unsigned long long, void*, int*)>:
c0008ef6:	55                   	push   ebp
c0008ef7:	57                   	push   edi
c0008ef8:	56                   	push   esi
c0008ef9:	53                   	push   ebx
c0008efa:	83 ec 0c             	sub    esp,0xc
c0008efd:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0008f01:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0008f05:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0008f09:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c0008f10:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c0008f13:	39 eb                	cmp    ebx,ebp
c0008f15:	74 13                	je     c0008f2a <VgaText::write(unsigned long long, void*, int*)+0x34>
c0008f17:	43                   	inc    ebx
c0008f18:	50                   	push   eax
c0008f19:	50                   	push   eax
c0008f1a:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c0008f1e:	50                   	push   eax
c0008f1f:	56                   	push   esi
c0008f20:	e8 79 fe ff ff       	call   c0008d9e <VgaText::putchar(char)>
c0008f25:	83 c4 10             	add    esp,0x10
c0008f28:	eb e9                	jmp    c0008f13 <VgaText::write(unsigned long long, void*, int*)+0x1d>
c0008f2a:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c0008f31:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008f35:	89 38                	mov    DWORD PTR [eax],edi
c0008f37:	83 c4 0c             	add    esp,0xc
c0008f3a:	31 c0                	xor    eax,eax
c0008f3c:	5b                   	pop    ebx
c0008f3d:	5e                   	pop    esi
c0008f3e:	5f                   	pop    edi
c0008f3f:	5d                   	pop    ebp
c0008f40:	c3                   	ret    
c0008f41:	90                   	nop

c0008f42 <VgaText::puts(char const*, VgaColour, VgaColour)>:
c0008f42:	55                   	push   ebp
c0008f43:	57                   	push   edi
c0008f44:	56                   	push   esi
c0008f45:	53                   	push   ebx
c0008f46:	83 ec 0c             	sub    esp,0xc
c0008f49:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008f4d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0008f52:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c0008f59:	50                   	push   eax
c0008f5a:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0008f5f:	50                   	push   eax
c0008f60:	e8 b9 fa ff ff       	call   c0008a1e <VgaText::combineColours(unsigned char, unsigned char)>
c0008f65:	5a                   	pop    edx
c0008f66:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0008f6b:	59                   	pop    ecx
c0008f6c:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0008f6f:	89 c5                	mov    ebp,eax
c0008f71:	0f b7 f6             	movzx  esi,si
c0008f74:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0008f78:	01 f6                	add    esi,esi
c0008f7a:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0008f7d:	0f be 07             	movsx  eax,BYTE PTR [edi]
c0008f80:	84 c0                	test   al,al
c0008f82:	0f 84 f4 00 00 00    	je     c000907c <VgaText::puts(char const*, VgaColour, VgaColour)+0x13a>
c0008f88:	3c 0d                	cmp    al,0xd
c0008f8a:	75 0c                	jne    c0008f98 <VgaText::puts(char const*, VgaColour, VgaColour)+0x56>
c0008f8c:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008f93:	e9 de 00 00 00       	jmp    c0009076 <VgaText::puts(char const*, VgaColour, VgaColour)+0x134>
c0008f98:	3c 0a                	cmp    al,0xa
c0008f9a:	75 45                	jne    c0008fe1 <VgaText::puts(char const*, VgaColour, VgaColour)+0x9f>
c0008f9c:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0008f9f:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008fa6:	8d 48 01             	lea    ecx,[eax+0x1]
c0008fa9:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0008fac:	3b 4b 10             	cmp    ecx,DWORD PTR [ebx+0x10]
c0008faf:	75 0f                	jne    c0008fc0 <VgaText::puts(char const*, VgaColour, VgaColour)+0x7e>
c0008fb1:	83 ec 0c             	sub    esp,0xc
c0008fb4:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0008fb7:	53                   	push   ebx
c0008fb8:	e8 73 fa ff ff       	call   c0008a30 <VgaText::scrollScreen()>
c0008fbd:	83 c4 10             	add    esp,0x10
c0008fc0:	83 ec 0c             	sub    esp,0xc
c0008fc3:	53                   	push   ebx
c0008fc4:	e8 71 f9 ff ff       	call   c000893a <VgaText::updateCursor()>
c0008fc9:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0008fce:	83 c4 10             	add    esp,0x10
c0008fd1:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0008fd4:	0f b7 f6             	movzx  esi,si
c0008fd7:	01 f6                	add    esi,esi
c0008fd9:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0008fdc:	e9 95 00 00 00       	jmp    c0009076 <VgaText::puts(char const*, VgaColour, VgaColour)+0x134>
c0008fe1:	3c 08                	cmp    al,0x8
c0008fe3:	75 35                	jne    c000901a <VgaText::puts(char const*, VgaColour, VgaColour)+0xd8>
c0008fe5:	51                   	push   ecx
c0008fe6:	51                   	push   ecx
c0008fe7:	6a 01                	push   0x1
c0008fe9:	53                   	push   ebx
c0008fea:	e8 bf fc ff ff       	call   c0008cae <VgaText::decrementCursor(bool)>
c0008fef:	5e                   	pop    esi
c0008ff0:	58                   	pop    eax
c0008ff1:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008ff4:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0008ff7:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008ffa:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008ffd:	6a 20                	push   0x20
c0008fff:	53                   	push   ebx
c0009000:	e8 d5 fa ff ff       	call   c0008ada <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0009005:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c000900a:	83 c4 20             	add    esp,0x20
c000900d:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0009010:	0f b7 f6             	movzx  esi,si
c0009013:	01 f6                	add    esi,esi
c0009015:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0009018:	eb 5c                	jmp    c0009076 <VgaText::puts(char const*, VgaColour, VgaColour)+0x134>
c000901a:	52                   	push   edx
c000901b:	52                   	push   edx
c000901c:	89 ea                	mov    edx,ebp
c000901e:	0f b6 ca             	movzx  ecx,dl
c0009021:	51                   	push   ecx
c0009022:	50                   	push   eax
c0009023:	e8 a0 fa ff ff       	call   c0008ac8 <VgaText::combineCharAndColour(char, unsigned char)>
c0009028:	83 c4 10             	add    esp,0x10
c000902b:	66 89 06             	mov    WORD PTR [esi],ax
c000902e:	39 1d 90 08 02 c0    	cmp    DWORD PTR ds:0xc0020890,ebx
c0009034:	75 1d                	jne    c0009053 <VgaText::puts(char const*, VgaColour, VgaColour)+0x111>
c0009036:	83 ec 0c             	sub    esp,0xc
c0009039:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000903c:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000903f:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0009043:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0009047:	0f be 07             	movsx  eax,BYTE PTR [edi]
c000904a:	50                   	push   eax
c000904b:	e8 4c d4 00 00       	call   c001649c <HalConsoleWriteCharacter(char, int, int, int, int)>
c0009050:	83 c4 20             	add    esp,0x20
c0009053:	83 c6 02             	add    esi,0x2
c0009056:	50                   	push   eax
c0009057:	50                   	push   eax
c0009058:	6a 00                	push   0x0
c000905a:	53                   	push   ebx
c000905b:	e8 fa fb ff ff       	call   c0008c5a <VgaText::incrementCursor(bool)>
c0009060:	83 c4 10             	add    esp,0x10
c0009063:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
c0009067:	75 0d                	jne    c0009076 <VgaText::puts(char const*, VgaColour, VgaColour)+0x134>
c0009069:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c000906e:	0f b7 f6             	movzx  esi,si
c0009071:	01 f6                	add    esi,esi
c0009073:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0009076:	47                   	inc    edi
c0009077:	e9 01 ff ff ff       	jmp    c0008f7d <VgaText::puts(char const*, VgaColour, VgaColour)+0x3b>
c000907c:	83 ec 0c             	sub    esp,0xc
c000907f:	53                   	push   ebx
c0009080:	e8 b5 f8 ff ff       	call   c000893a <VgaText::updateCursor()>
c0009085:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c000908c:	83 c4 1c             	add    esp,0x1c
c000908f:	5b                   	pop    ebx
c0009090:	5e                   	pop    esi
c0009091:	5f                   	pop    edi
c0009092:	5d                   	pop    ebp
c0009093:	c3                   	ret    

c0009094 <VgaText::VgaText(char const*)>:
c0009094:	56                   	push   esi
c0009095:	53                   	push   ebx
c0009096:	83 ec 04             	sub    esp,0x4
c0009099:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000909d:	83 ec 08             	sub    esp,0x8
c00090a0:	6a 00                	push   0x0
c00090a2:	50                   	push   eax
c00090a3:	e8 b2 04 00 00       	call   c000955a <UnixFile::UnixFile(int)>
c00090a8:	83 c4 10             	add    esp,0x10
c00090ab:	ba e0 d7 01 c0       	mov    edx,0xc001d7e0
c00090b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00090b4:	89 10                	mov    DWORD PTR [eax],edx
c00090b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00090ba:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c00090c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00090c5:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c00090cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00090d0:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c00090d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00090d8:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c00090dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00090e0:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c00090e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00090eb:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c00090f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00090f6:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c00090fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009101:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c0009108:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000910c:	c7 40 10 19 00 00 00 	mov    DWORD PTR [eax+0x10],0x19
c0009113:	83 ec 0c             	sub    esp,0xc
c0009116:	6a 01                	push   0x1
c0009118:	e8 80 08 00 00       	call   c000999d <Virt::allocateKernelVirtualPages(int)>
c000911d:	83 c4 10             	add    esp,0x10
c0009120:	89 c2                	mov    edx,eax
c0009122:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009126:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0009129:	8b 1d 30 09 02 c0    	mov    ebx,DWORD PTR ds:0xc0020930
c000912f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009133:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009136:	89 c6                	mov    esi,eax
c0009138:	e8 f1 f0 ff ff       	call   c000822e <Phys::allocatePage()>
c000913d:	68 05 0c 00 00       	push   0xc05
c0009142:	56                   	push   esi
c0009143:	50                   	push   eax
c0009144:	53                   	push   ebx
c0009145:	e8 e8 0e 00 00       	call   c000a032 <VAS::mapPage(unsigned long, unsigned long, int)>
c000914a:	83 c4 10             	add    esp,0x10
c000914d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009151:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009154:	83 ec 04             	sub    esp,0x4
c0009157:	68 a0 0f 00 00       	push   0xfa0
c000915c:	6a 00                	push   0x0
c000915e:	50                   	push   eax
c000915f:	e8 8c 73 ff ff       	call   c00004f0 <memset>
c0009164:	83 c4 10             	add    esp,0x10
c0009167:	83 ec 04             	sub    esp,0x4
c000916a:	6a 00                	push   0x0
c000916c:	6a 07                	push   0x7
c000916e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009172:	e8 6d f8 ff ff       	call   c00089e4 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0009177:	83 c4 10             	add    esp,0x10
c000917a:	83 ec 04             	sub    esp,0x4
c000917d:	6a 00                	push   0x0
c000917f:	6a 00                	push   0x0
c0009181:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009185:	e8 f0 f9 ff ff       	call   c0008b7a <VgaText::setCursor(int, int)>
c000918a:	83 c4 10             	add    esp,0x10
c000918d:	83 ec 0c             	sub    esp,0xc
c0009190:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009194:	e8 43 fa ff ff       	call   c0008bdc <VgaText::clearScreen()>
c0009199:	83 c4 10             	add    esp,0x10
c000919c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00091a0:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c00091a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00091a8:	05 82 00 00 00       	add    eax,0x82
c00091ad:	83 ec 04             	sub    esp,0x4
c00091b0:	6a 30                	push   0x30
c00091b2:	6a 00                	push   0x0
c00091b4:	50                   	push   eax
c00091b5:	e8 36 73 ff ff       	call   c00004f0 <memset>
c00091ba:	83 c4 10             	add    esp,0x10
c00091bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00091c1:	05 b2 00 00 00       	add    eax,0xb2
c00091c6:	83 ec 04             	sub    esp,0x4
c00091c9:	68 80 00 00 00       	push   0x80
c00091ce:	6a 00                	push   0x0
c00091d0:	50                   	push   eax
c00091d1:	e8 1a 73 ff ff       	call   c00004f0 <memset>
c00091d6:	83 c4 10             	add    esp,0x10
c00091d9:	90                   	nop
c00091da:	83 c4 04             	add    esp,0x4
c00091dd:	5b                   	pop    ebx
c00091de:	5e                   	pop    esi
c00091df:	c3                   	ret    

c00091e0 <VgaText::receiveKey(unsigned char)>:
c00091e0:	57                   	push   edi
c00091e1:	56                   	push   esi
c00091e2:	53                   	push   ebx
c00091e3:	83 ec 10             	sub    esp,0x10
c00091e6:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c00091ea:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00091ee:	84 db                	test   bl,bl
c00091f0:	0f 84 ba 00 00 00    	je     c00092b0 <VgaText::receiveKey(unsigned char)+0xd0>
c00091f6:	8d be 82 00 00 00    	lea    edi,[esi+0x82]
c00091fc:	80 fb 08             	cmp    bl,0x8
c00091ff:	75 2c                	jne    c000922d <VgaText::receiveKey(unsigned char)+0x4d>
c0009201:	83 ec 0c             	sub    esp,0xc
c0009204:	57                   	push   edi
c0009205:	e8 56 73 ff ff       	call   c0000560 <strlen>
c000920a:	83 c4 10             	add    esp,0x10
c000920d:	85 c0                	test   eax,eax
c000920f:	74 41                	je     c0009252 <VgaText::receiveKey(unsigned char)+0x72>
c0009211:	50                   	push   eax
c0009212:	50                   	push   eax
c0009213:	6a 08                	push   0x8
c0009215:	56                   	push   esi
c0009216:	e8 83 fb ff ff       	call   c0008d9e <VgaText::putchar(char)>
c000921b:	89 3c 24             	mov    DWORD PTR [esp],edi
c000921e:	e8 3d 73 ff ff       	call   c0000560 <strlen>
c0009223:	c6 84 06 81 00 00 00 00 	mov    BYTE PTR [esi+eax*1+0x81],0x0
c000922b:	eb 22                	jmp    c000924f <VgaText::receiveKey(unsigned char)+0x6f>
c000922d:	0f be c3             	movsx  eax,bl
c0009230:	52                   	push   edx
c0009231:	52                   	push   edx
c0009232:	50                   	push   eax
c0009233:	56                   	push   esi
c0009234:	e8 65 fb ff ff       	call   c0008d9e <VgaText::putchar(char)>
c0009239:	88 5c 24 1e          	mov    BYTE PTR [esp+0x1e],bl
c000923d:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0009242:	59                   	pop    ecx
c0009243:	58                   	pop    eax
c0009244:	8d 44 24 16          	lea    eax,[esp+0x16]
c0009248:	50                   	push   eax
c0009249:	57                   	push   edi
c000924a:	e8 91 75 ff ff       	call   c00007e0 <strcat>
c000924f:	83 c4 10             	add    esp,0x10
c0009252:	80 be 80 00 00 00 00 	cmp    BYTE PTR [esi+0x80],0x0
c0009259:	75 05                	jne    c0009260 <VgaText::receiveKey(unsigned char)+0x80>
c000925b:	80 fb 0a             	cmp    bl,0xa
c000925e:	75 50                	jne    c00092b0 <VgaText::receiveKey(unsigned char)+0xd0>
c0009260:	83 ec 0c             	sub    esp,0xc
c0009263:	81 c6 b2 00 00 00    	add    esi,0xb2
c0009269:	56                   	push   esi
c000926a:	e8 f1 72 ff ff       	call   c0000560 <strlen>
c000926f:	89 3c 24             	mov    DWORD PTR [esp],edi
c0009272:	89 c3                	mov    ebx,eax
c0009274:	e8 e7 72 ff ff       	call   c0000560 <strlen>
c0009279:	83 c4 10             	add    esp,0x10
c000927c:	8d 44 03 04          	lea    eax,[ebx+eax*1+0x4]
c0009280:	3d 80 00 00 00       	cmp    eax,0x80
c0009285:	76 10                	jbe    c0009297 <VgaText::receiveKey(unsigned char)+0xb7>
c0009287:	83 ec 0c             	sub    esp,0xc
c000928a:	68 8b d7 01 c0       	push   0xc001d78b
c000928f:	e8 ab 74 00 00       	call   c001073f <Krnl::panic(char const*)>
c0009294:	83 c4 10             	add    esp,0x10
c0009297:	50                   	push   eax
c0009298:	50                   	push   eax
c0009299:	57                   	push   edi
c000929a:	56                   	push   esi
c000929b:	e8 40 75 ff ff       	call   c00007e0 <strcat>
c00092a0:	83 c4 0c             	add    esp,0xc
c00092a3:	6a 30                	push   0x30
c00092a5:	6a 00                	push   0x0
c00092a7:	57                   	push   edi
c00092a8:	e8 43 72 ff ff       	call   c00004f0 <memset>
c00092ad:	83 c4 10             	add    esp,0x10
c00092b0:	83 c4 10             	add    esp,0x10
c00092b3:	5b                   	pop    ebx
c00092b4:	5e                   	pop    esi
c00092b5:	5f                   	pop    edi
c00092b6:	c3                   	ret    
c00092b7:	90                   	nop

c00092b8 <VgaText::doUpdate()>:
c00092b8:	c3                   	ret    

c00092b9 <newTerminal(char*)>:
c00092b9:	83 ec 28             	sub    esp,0x28
c00092bc:	68 34 01 00 00       	push   0x134
c00092c1:	e8 9b eb ff ff       	call   c0007e61 <malloc>
c00092c6:	5a                   	pop    edx
c00092c7:	59                   	pop    ecx
c00092c8:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00092cc:	50                   	push   eax
c00092cd:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00092d1:	e8 be fd ff ff       	call   c0009094 <VgaText::VgaText(char const*)>
c00092d6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00092da:	83 c4 2c             	add    esp,0x2c
c00092dd:	c3                   	ret    
c00092de:	66 90                	xchg   ax,ax

c00092e0 <TSS::TSS()>:
c00092e0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00092e4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00092eb:	90                   	nop
c00092ec:	c3                   	ret    
c00092ed:	90                   	nop
c00092ee:	66 90                	xchg   ax,ax

c00092f0 <TSS::setESP(unsigned long)>:
c00092f0:	55                   	push   ebp
c00092f1:	89 e5                	mov    ebp,esp
c00092f3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00092f6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00092f9:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00092fc:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00092ff:	90                   	nop
c0009300:	5d                   	pop    ebp
c0009301:	c3                   	ret    
c0009302:	66 90                	xchg   ax,ax

c0009304 <TSS::flush()>:
c0009304:	55                   	push   ebp
c0009305:	89 e5                	mov    ebp,esp
c0009307:	83 ec 10             	sub    esp,0x10
c000930a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000930d:	8b 00                	mov    eax,DWORD PTR [eax]
c000930f:	83 c8 03             	or     eax,0x3
c0009312:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0009316:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c000931a:	66 89 d0             	mov    ax,dx
c000931d:	0f 00 d8             	ltr    ax
c0009320:	90                   	nop
c0009321:	c9                   	leave  
c0009322:	c3                   	ret    
c0009323:	90                   	nop

c0009324 <TSS::setup(unsigned long, unsigned long)>:
c0009324:	55                   	push   ebp
c0009325:	89 e5                	mov    ebp,esp
c0009327:	83 ec 18             	sub    esp,0x18
c000932a:	83 ec 0c             	sub    esp,0xc
c000932d:	6a 68                	push   0x68
c000932f:	e8 2d eb ff ff       	call   c0007e61 <malloc>
c0009334:	83 c4 10             	add    esp,0x10
c0009337:	89 c2                	mov    edx,eax
c0009339:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000933c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000933f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009342:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009345:	83 ec 04             	sub    esp,0x4
c0009348:	6a 68                	push   0x68
c000934a:	6a 00                	push   0x0
c000934c:	50                   	push   eax
c000934d:	e8 9e 71 ff ff       	call   c00004f0 <memset>
c0009352:	83 c4 10             	add    esp,0x10
c0009355:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009358:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000935b:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c0009361:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009364:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009367:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c000936d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009370:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009373:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0009376:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0009379:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000937c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000937f:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c0009385:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009388:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000938b:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c0009391:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009394:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009397:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c000939d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00093a0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00093a3:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c00093a9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00093ac:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00093af:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c00093b5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00093b8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00093bb:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c00093c1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00093c4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00093c7:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c00093ca:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c00093cd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00093d0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00093d3:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00093d6:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00093d9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00093dc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00093df:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c00093e6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00093e9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00093ec:	0f 20 da             	mov    edx,cr3
c00093ef:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c00093f2:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c00093f5:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c00093f8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00093fb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00093fe:	83 ec 08             	sub    esp,0x8
c0009401:	50                   	push   eax
c0009402:	8d 45 ec             	lea    eax,[ebp-0x14]
c0009405:	50                   	push   eax
c0009406:	e8 e1 e2 ff ff       	call   c00076ec <GDTEntry::setBase(unsigned int)>
c000940b:	83 c4 10             	add    esp,0x10
c000940e:	83 ec 08             	sub    esp,0x8
c0009411:	6a 68                	push   0x68
c0009413:	8d 45 ec             	lea    eax,[ebp-0x14]
c0009416:	50                   	push   eax
c0009417:	e8 ec e2 ff ff       	call   c0007708 <GDTEntry::setLimit(unsigned int)>
c000941c:	83 c4 10             	add    esp,0x10
c000941f:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c0009423:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0009426:	83 e0 0f             	and    eax,0xf
c0009429:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c000942c:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c000942f:	83 c8 40             	or     eax,0x40
c0009432:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0009435:	a1 44 08 02 c0       	mov    eax,ds:0xc0020844
c000943a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009440:	05 78 01 00 00       	add    eax,0x178
c0009445:	83 ec 04             	sub    esp,0x4
c0009448:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000944b:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c000944e:	50                   	push   eax
c000944f:	e8 e8 e2 ff ff       	call   c000773c <GDT::addEntry(GDTEntry)>
c0009454:	83 c4 10             	add    esp,0x10
c0009457:	89 c2                	mov    edx,eax
c0009459:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000945c:	89 10                	mov    DWORD PTR [eax],edx
c000945e:	a1 44 08 02 c0       	mov    eax,ds:0xc0020844
c0009463:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009469:	05 78 01 00 00       	add    eax,0x178
c000946e:	83 ec 0c             	sub    esp,0xc
c0009471:	50                   	push   eax
c0009472:	e8 ef e2 ff ff       	call   c0007766 <GDT::flush()>
c0009477:	83 c4 10             	add    esp,0x10
c000947a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000947d:	8b 00                	mov    eax,DWORD PTR [eax]
c000947f:	c9                   	leave  
c0009480:	c3                   	ret    
c0009481:	90                   	nop

c0009482 <ReservedFilename::read(unsigned long long, void*, int*)>:
c0009482:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009486:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000948a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000948d:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0009492:	75 08                	jne    c000949c <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c0009494:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c000949a:	eb 38                	jmp    c00094d4 <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c000949c:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c00094a1:	75 17                	jne    c00094ba <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c00094a3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00094a8:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00094ab:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00094b1:	8b 10                	mov    edx,DWORD PTR [eax]
c00094b3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00094b7:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c00094ba:	89 c1                	mov    ecx,eax
c00094bc:	83 e1 fd             	and    ecx,0xfffffffd
c00094bf:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c00094c5:	74 cd                	je     c0009494 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c00094c7:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c00094cc:	83 e0 ef             	and    eax,0xffffffef
c00094cf:	83 f8 08             	cmp    eax,0x8
c00094d2:	76 c0                	jbe    c0009494 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c00094d4:	31 c0                	xor    eax,eax
c00094d6:	c3                   	ret    
c00094d7:	90                   	nop

c00094d8 <ReservedFilename::isAtty()>:
c00094d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00094dc:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00094df:	31 c0                	xor    eax,eax
c00094e1:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c00094e7:	74 09                	je     c00094f2 <ReservedFilename::isAtty()+0x1a>
c00094e9:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c00094ef:	0f 94 c0             	sete   al
c00094f2:	c3                   	ret    
c00094f3:	90                   	nop

c00094f4 <ReservedFilename::write(unsigned long long, void*, int*)>:
c00094f4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00094f8:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00094fc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00094ff:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0009503:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0009508:	75 08                	jne    c0009512 <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c000950a:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0009510:	eb 3d                	jmp    c000954f <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0009512:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0009517:	75 17                	jne    c0009530 <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c0009519:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000951e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009521:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0009527:	8b 10                	mov    edx,DWORD PTR [eax]
c0009529:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000952d:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c0009530:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0009535:	75 04                	jne    c000953b <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c0009537:	89 0a                	mov    DWORD PTR [edx],ecx
c0009539:	eb 14                	jmp    c000954f <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c000953b:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c0009540:	74 c8                	je     c000950a <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0009542:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0009547:	83 e0 ef             	and    eax,0xffffffef
c000954a:	83 f8 08             	cmp    eax,0x8
c000954d:	76 bb                	jbe    c000950a <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c000954f:	31 c0                	xor    eax,eax
c0009551:	c3                   	ret    

c0009552 <UnixFile::getFileDescriptor()>:
c0009552:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009556:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009559:	c3                   	ret    

c000955a <UnixFile::UnixFile(int)>:
c000955a:	53                   	push   ebx
c000955b:	83 ec 28             	sub    esp,0x28
c000955e:	ba a8 d8 01 c0       	mov    edx,0xc001d8a8
c0009563:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009567:	89 10                	mov    DWORD PTR [eax],edx
c0009569:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c0009571:	0f 8f 8c 01 00 00    	jg     c0009703 <UnixFile::UnixFile(int)+0x1a9>
c0009577:	a1 a0 f7 01 c0       	mov    eax,ds:0xc001f7a0
c000957c:	8d 50 01             	lea    edx,[eax+0x1]
c000957f:	89 15 a0 f7 01 c0    	mov    DWORD PTR ds:0xc001f7a0,edx
c0009585:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0009589:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000958c:	83 ec 08             	sub    esp,0x8
c000958f:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0009593:	68 18 09 02 c0       	push   0xc0020918
c0009598:	e8 ab 2d 01 00       	call   c001c348 <LinkedList<UnixFile>::addElement(UnixFile*)>
c000959d:	83 c4 10             	add    esp,0x10
c00095a0:	a0 14 09 02 c0       	mov    al,ds:0xc0020914
c00095a5:	83 f0 01             	xor    eax,0x1
c00095a8:	84 c0                	test   al,al
c00095aa:	0f 84 54 01 00 00    	je     c0009704 <UnixFile::UnixFile(int)+0x1aa>
c00095b0:	c6 05 14 09 02 c0 01 	mov    BYTE PTR ds:0xc0020914,0x1
c00095b7:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c00095bf:	83 ec 0c             	sub    esp,0xc
c00095c2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00095c6:	e8 96 e8 ff ff       	call   c0007e61 <malloc>
c00095cb:	83 c4 10             	add    esp,0x10
c00095ce:	89 c3                	mov    ebx,eax
c00095d0:	83 ec 08             	sub    esp,0x8
c00095d3:	68 03 ff ff 0f       	push   0xfffff03
c00095d8:	53                   	push   ebx
c00095d9:	e8 2c 01 00 00       	call   c000970a <ReservedFilename::ReservedFilename(int)>
c00095de:	83 c4 10             	add    esp,0x10
c00095e1:	89 1d 0c 09 02 c0    	mov    DWORD PTR ds:0xc002090c,ebx
c00095e7:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c00095ef:	83 ec 0c             	sub    esp,0xc
c00095f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00095f6:	e8 66 e8 ff ff       	call   c0007e61 <malloc>
c00095fb:	83 c4 10             	add    esp,0x10
c00095fe:	89 c3                	mov    ebx,eax
c0009600:	83 ec 08             	sub    esp,0x8
c0009603:	68 01 ff ff 0f       	push   0xfffff01
c0009608:	53                   	push   ebx
c0009609:	e8 fc 00 00 00       	call   c000970a <ReservedFilename::ReservedFilename(int)>
c000960e:	83 c4 10             	add    esp,0x10
c0009611:	89 1d 10 09 02 c0    	mov    DWORD PTR ds:0xc0020910,ebx
c0009617:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c000961f:	83 ec 0c             	sub    esp,0xc
c0009622:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0009626:	e8 36 e8 ff ff       	call   c0007e61 <malloc>
c000962b:	83 c4 10             	add    esp,0x10
c000962e:	89 c3                	mov    ebx,eax
c0009630:	83 ec 08             	sub    esp,0x8
c0009633:	68 00 ff ff 0f       	push   0xfffff00
c0009638:	53                   	push   ebx
c0009639:	e8 cc 00 00 00       	call   c000970a <ReservedFilename::ReservedFilename(int)>
c000963e:	83 c4 10             	add    esp,0x10
c0009641:	89 1d 04 09 02 c0    	mov    DWORD PTR ds:0xc0020904,ebx
c0009647:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c000964f:	83 ec 0c             	sub    esp,0xc
c0009652:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009656:	e8 06 e8 ff ff       	call   c0007e61 <malloc>
c000965b:	83 c4 10             	add    esp,0x10
c000965e:	89 c3                	mov    ebx,eax
c0009660:	83 ec 08             	sub    esp,0x8
c0009663:	68 02 ff ff 0f       	push   0xfffff02
c0009668:	53                   	push   ebx
c0009669:	e8 9c 00 00 00       	call   c000970a <ReservedFilename::ReservedFilename(int)>
c000966e:	83 c4 10             	add    esp,0x10
c0009671:	89 1d 08 09 02 c0    	mov    DWORD PTR ds:0xc0020908,ebx
c0009677:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000967f:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c0009684:	7f 7e                	jg     c0009704 <UnixFile::UnixFile(int)+0x1aa>
c0009686:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c000968e:	83 ec 0c             	sub    esp,0xc
c0009691:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0009695:	e8 c7 e7 ff ff       	call   c0007e61 <malloc>
c000969a:	83 c4 10             	add    esp,0x10
c000969d:	89 c3                	mov    ebx,eax
c000969f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00096a3:	05 10 ff ff 0f       	add    eax,0xfffff10
c00096a8:	83 ec 08             	sub    esp,0x8
c00096ab:	50                   	push   eax
c00096ac:	53                   	push   ebx
c00096ad:	e8 58 00 00 00       	call   c000970a <ReservedFilename::ReservedFilename(int)>
c00096b2:	83 c4 10             	add    esp,0x10
c00096b5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00096b9:	89 1c 85 e0 08 02 c0 	mov    DWORD PTR [eax*4-0x3ffdf720],ebx
c00096c0:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c00096c8:	83 ec 0c             	sub    esp,0xc
c00096cb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096cf:	e8 8d e7 ff ff       	call   c0007e61 <malloc>
c00096d4:	83 c4 10             	add    esp,0x10
c00096d7:	89 c3                	mov    ebx,eax
c00096d9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00096dd:	05 20 ff ff 0f       	add    eax,0xfffff20
c00096e2:	83 ec 08             	sub    esp,0x8
c00096e5:	50                   	push   eax
c00096e6:	53                   	push   ebx
c00096e7:	e8 1e 00 00 00       	call   c000970a <ReservedFilename::ReservedFilename(int)>
c00096ec:	83 c4 10             	add    esp,0x10
c00096ef:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00096f3:	89 1c 85 a0 08 02 c0 	mov    DWORD PTR [eax*4-0x3ffdf760],ebx
c00096fa:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00096fe:	e9 7c ff ff ff       	jmp    c000967f <UnixFile::UnixFile(int)+0x125>
c0009703:	90                   	nop
c0009704:	83 c4 28             	add    esp,0x28
c0009707:	5b                   	pop    ebx
c0009708:	c3                   	ret    
c0009709:	90                   	nop

c000970a <ReservedFilename::ReservedFilename(int)>:
c000970a:	83 ec 0c             	sub    esp,0xc
c000970d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009711:	83 ec 08             	sub    esp,0x8
c0009714:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009718:	50                   	push   eax
c0009719:	e8 3c fe ff ff       	call   c000955a <UnixFile::UnixFile(int)>
c000971e:	83 c4 10             	add    esp,0x10
c0009721:	ba c4 d8 01 c0       	mov    edx,0xc001d8c4
c0009726:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000972a:	89 10                	mov    DWORD PTR [eax],edx
c000972c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009730:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0009734:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0009737:	90                   	nop
c0009738:	83 c4 0c             	add    esp,0xc
c000973b:	c3                   	ret    

c000973c <UnixFile::~UnixFile()>:
c000973c:	83 ec 1c             	sub    esp,0x1c
c000973f:	ba a8 d8 01 c0       	mov    edx,0xc001d8a8
c0009744:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009748:	89 10                	mov    DWORD PTR [eax],edx
c000974a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000974e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009751:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c0009756:	7f 73                	jg     c00097cb <UnixFile::~UnixFile()+0x8f>
c0009758:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0009760:	83 ec 0c             	sub    esp,0xc
c0009763:	68 18 09 02 c0       	push   0xc0020918
c0009768:	e8 af 2c 01 00       	call   c001c41c <LinkedList<UnixFile>::getFirstElement()>
c000976d:	83 c4 10             	add    esp,0x10
c0009770:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009774:	83 ec 0c             	sub    esp,0xc
c0009777:	68 18 09 02 c0       	push   0xc0020918
c000977c:	e8 a3 2c 01 00       	call   c001c424 <LinkedList<UnixFile>::removeFirst()>
c0009781:	83 c4 10             	add    esp,0x10
c0009784:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009788:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c000978c:	74 40                	je     c00097ce <UnixFile::~UnixFile()+0x92>
c000978e:	83 ec 08             	sub    esp,0x8
c0009791:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0009795:	68 18 09 02 c0       	push   0xc0020918
c000979a:	e8 a9 2b 01 00       	call   c001c348 <LinkedList<UnixFile>::addElement(UnixFile*)>
c000979f:	83 c4 10             	add    esp,0x10
c00097a2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00097a6:	8d 50 01             	lea    edx,[eax+0x1]
c00097a9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00097ad:	3d 88 13 00 00       	cmp    eax,0x1388
c00097b2:	0f 94 c0             	sete   al
c00097b5:	84 c0                	test   al,al
c00097b7:	74 a7                	je     c0009760 <UnixFile::~UnixFile()+0x24>
c00097b9:	83 ec 0c             	sub    esp,0xc
c00097bc:	68 80 d8 01 c0       	push   0xc001d880
c00097c1:	e8 79 6f 00 00       	call   c001073f <Krnl::panic(char const*)>
c00097c6:	83 c4 10             	add    esp,0x10
c00097c9:	eb 95                	jmp    c0009760 <UnixFile::~UnixFile()+0x24>
c00097cb:	90                   	nop
c00097cc:	eb 01                	jmp    c00097cf <UnixFile::~UnixFile()+0x93>
c00097ce:	90                   	nop
c00097cf:	90                   	nop
c00097d0:	83 c4 1c             	add    esp,0x1c
c00097d3:	c3                   	ret    

c00097d4 <UnixFile::~UnixFile()>:
c00097d4:	83 ec 0c             	sub    esp,0xc
c00097d7:	83 ec 0c             	sub    esp,0xc
c00097da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00097de:	e8 59 ff ff ff       	call   c000973c <UnixFile::~UnixFile()>
c00097e3:	83 c4 10             	add    esp,0x10
c00097e6:	83 ec 08             	sub    esp,0x8
c00097e9:	6a 0c                	push   0xc
c00097eb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00097ef:	e8 06 13 00 00       	call   c000aafa <operator delete(void*, unsigned long)>
c00097f4:	83 c4 10             	add    esp,0x10
c00097f7:	83 c4 0c             	add    esp,0xc
c00097fa:	c3                   	ret    
c00097fb:	90                   	nop

c00097fc <ReservedFilename::~ReservedFilename()>:
c00097fc:	83 ec 0c             	sub    esp,0xc
c00097ff:	ba c4 d8 01 c0       	mov    edx,0xc001d8c4
c0009804:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009808:	89 10                	mov    DWORD PTR [eax],edx
c000980a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000980e:	83 ec 0c             	sub    esp,0xc
c0009811:	50                   	push   eax
c0009812:	e8 25 ff ff ff       	call   c000973c <UnixFile::~UnixFile()>
c0009817:	83 c4 10             	add    esp,0x10
c000981a:	90                   	nop
c000981b:	83 c4 0c             	add    esp,0xc
c000981e:	c3                   	ret    
c000981f:	90                   	nop

c0009820 <ReservedFilename::~ReservedFilename()>:
c0009820:	83 ec 0c             	sub    esp,0xc
c0009823:	83 ec 0c             	sub    esp,0xc
c0009826:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000982a:	e8 cd ff ff ff       	call   c00097fc <ReservedFilename::~ReservedFilename()>
c000982f:	83 c4 10             	add    esp,0x10
c0009832:	83 ec 08             	sub    esp,0x8
c0009835:	6a 0c                	push   0xc
c0009837:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000983b:	e8 ba 12 00 00       	call   c000aafa <operator delete(void*, unsigned long)>
c0009840:	83 c4 10             	add    esp,0x10
c0009843:	83 c4 0c             	add    esp,0xc
c0009846:	c3                   	ret    

c0009847 <getFromFileDescriptor(int)>:
c0009847:	53                   	push   ebx
c0009848:	83 ec 08             	sub    esp,0x8
c000984b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000984f:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c0009855:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c000985b:	7f 2c                	jg     c0009889 <getFromFileDescriptor(int)+0x42>
c000985d:	83 ec 0c             	sub    esp,0xc
c0009860:	68 18 09 02 c0       	push   0xc0020918
c0009865:	e8 b2 2b 01 00       	call   c001c41c <LinkedList<UnixFile>::getFirstElement()>
c000986a:	83 c4 10             	add    esp,0x10
c000986d:	85 c0                	test   eax,eax
c000986f:	75 04                	jne    c0009875 <getFromFileDescriptor(int)+0x2e>
c0009871:	31 c0                	xor    eax,eax
c0009873:	eb 6e                	jmp    c00098e3 <getFromFileDescriptor(int)+0x9c>
c0009875:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c0009878:	74 69                	je     c00098e3 <getFromFileDescriptor(int)+0x9c>
c000987a:	52                   	push   edx
c000987b:	52                   	push   edx
c000987c:	50                   	push   eax
c000987d:	68 18 09 02 c0       	push   0xc0020918
c0009882:	e8 3f 2c 01 00       	call   c001c4c6 <LinkedList<UnixFile>::getNext(UnixFile*)>
c0009887:	eb e1                	jmp    c000986a <getFromFileDescriptor(int)+0x23>
c0009889:	a1 0c 09 02 c0       	mov    eax,ds:0xc002090c
c000988e:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c0009894:	74 4d                	je     c00098e3 <getFromFileDescriptor(int)+0x9c>
c0009896:	a1 10 09 02 c0       	mov    eax,ds:0xc0020910
c000989b:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c00098a1:	74 40                	je     c00098e3 <getFromFileDescriptor(int)+0x9c>
c00098a3:	a1 08 09 02 c0       	mov    eax,ds:0xc0020908
c00098a8:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c00098ae:	74 33                	je     c00098e3 <getFromFileDescriptor(int)+0x9c>
c00098b0:	a1 04 09 02 c0       	mov    eax,ds:0xc0020904
c00098b5:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c00098bb:	74 26                	je     c00098e3 <getFromFileDescriptor(int)+0x9c>
c00098bd:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c00098c3:	83 f8 08             	cmp    eax,0x8
c00098c6:	77 09                	ja     c00098d1 <getFromFileDescriptor(int)+0x8a>
c00098c8:	8b 04 85 e0 08 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdf720]
c00098cf:	eb 12                	jmp    c00098e3 <getFromFileDescriptor(int)+0x9c>
c00098d1:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c00098d7:	83 fb 08             	cmp    ebx,0x8
c00098da:	77 95                	ja     c0009871 <getFromFileDescriptor(int)+0x2a>
c00098dc:	8b 04 9d a0 08 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffdf760]
c00098e3:	83 c4 08             	add    esp,0x8
c00098e6:	5b                   	pop    ebx
c00098e7:	c3                   	ret    

c00098e8 <__static_initialization_and_destruction_0(int, int)>:
c00098e8:	83 ec 0c             	sub    esp,0xc
c00098eb:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c00098f0:	75 34                	jne    c0009926 <__static_initialization_and_destruction_0(int, int)+0x3e>
c00098f2:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00098fa:	75 2a                	jne    c0009926 <__static_initialization_and_destruction_0(int, int)+0x3e>
c00098fc:	83 ec 0c             	sub    esp,0xc
c00098ff:	68 18 09 02 c0       	push   0xc0020918
c0009904:	e8 fd 29 01 00       	call   c001c306 <LinkedList<UnixFile>::LinkedList()>
c0009909:	83 c4 10             	add    esp,0x10
c000990c:	83 ec 04             	sub    esp,0x4
c000990f:	68 c4 f5 01 c0       	push   0xc001f5c4
c0009914:	68 18 09 02 c0       	push   0xc0020918
c0009919:	68 04 c3 01 c0       	push   0xc001c304
c000991e:	e8 87 11 00 00       	call   c000aaaa <__cxa_atexit>
c0009923:	83 c4 10             	add    esp,0x10
c0009926:	90                   	nop
c0009927:	83 c4 0c             	add    esp,0xc
c000992a:	c3                   	ret    

c000992b <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c000992b:	83 ec 0c             	sub    esp,0xc
c000992e:	83 ec 08             	sub    esp,0x8
c0009931:	68 ff ff 00 00       	push   0xffff
c0009936:	6a 01                	push   0x1
c0009938:	e8 ab ff ff ff       	call   c00098e8 <__static_initialization_and_destruction_0(int, int)>
c000993d:	83 c4 10             	add    esp,0x10
c0009940:	83 c4 0c             	add    esp,0xc
c0009943:	c3                   	ret    

c0009944 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c0009944:	53                   	push   ebx
c0009945:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009949:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000994d:	8d 88 00 80 f3 ff    	lea    ecx,[eax-0xc8000]
c0009953:	89 c8                	mov    eax,ecx
c0009955:	d1 e8                	shr    eax,1
c0009957:	03 05 a8 f7 01 c0    	add    eax,DWORD PTR ds:0xc001f7a8
c000995d:	83 e1 01             	and    ecx,0x1
c0009960:	8a 10                	mov    dl,BYTE PTR [eax]
c0009962:	75 09                	jne    c000996d <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x29>
c0009964:	83 e2 f0             	and    edx,0xfffffff0
c0009967:	09 da                	or     edx,ebx
c0009969:	88 10                	mov    BYTE PTR [eax],dl
c000996b:	5b                   	pop    ebx
c000996c:	c3                   	ret    
c000996d:	c1 e3 04             	shl    ebx,0x4
c0009970:	83 e2 0f             	and    edx,0xf
c0009973:	09 da                	or     edx,ebx
c0009975:	88 10                	mov    BYTE PTR [eax],dl
c0009977:	5b                   	pop    ebx
c0009978:	c3                   	ret    

c0009979 <Virt::getPageState(unsigned long)>:
c0009979:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000997d:	8b 0d a8 f7 01 c0    	mov    ecx,DWORD PTR ds:0xc001f7a8
c0009983:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c0009989:	89 d0                	mov    eax,edx
c000998b:	d1 e8                	shr    eax,1
c000998d:	83 e2 01             	and    edx,0x1
c0009990:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c0009993:	75 04                	jne    c0009999 <Virt::getPageState(unsigned long)+0x20>
c0009995:	83 e0 0f             	and    eax,0xf
c0009998:	c3                   	ret    
c0009999:	c0 e8 04             	shr    al,0x4
c000999c:	c3                   	ret    

c000999d <Virt::allocateKernelVirtualPages(int)>:
c000999d:	55                   	push   ebp
c000999e:	31 ed                	xor    ebp,ebp
c00099a0:	57                   	push   edi
c00099a1:	56                   	push   esi
c00099a2:	53                   	push   ebx
c00099a3:	31 db                	xor    ebx,ebx
c00099a5:	83 ec 1c             	sub    esp,0x1c
c00099a8:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00099ac:	8b 3d a4 f7 01 c0    	mov    edi,DWORD PTR ds:0xc001f7a4
c00099b2:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c00099b7:	57                   	push   edi
c00099b8:	e8 bc ff ff ff       	call   c0009979 <Virt::getPageState(unsigned long)>
c00099bd:	5a                   	pop    edx
c00099be:	84 c0                	test   al,al
c00099c0:	75 3a                	jne    c00099fc <Virt::allocateKernelVirtualPages(int)+0x5f>
c00099c2:	85 db                	test   ebx,ebx
c00099c4:	75 02                	jne    c00099c8 <Virt::allocateKernelVirtualPages(int)+0x2b>
c00099c6:	89 fd                	mov    ebp,edi
c00099c8:	43                   	inc    ebx
c00099c9:	39 f3                	cmp    ebx,esi
c00099cb:	74 5a                	je     c0009a27 <Virt::allocateKernelVirtualPages(int)+0x8a>
c00099cd:	47                   	inc    edi
c00099ce:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c00099d4:	76 31                	jbe    c0009a07 <Virt::allocateKernelVirtualPages(int)+0x6a>
c00099d6:	c7 05 a4 f7 01 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc001f7a4,0xc8000
c00099e0:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00099e5:	75 28                	jne    c0009a0f <Virt::allocateKernelVirtualPages(int)+0x72>
c00099e7:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c00099ec:	bf 00 80 0c 00       	mov    edi,0xc8000
c00099f1:	57                   	push   edi
c00099f2:	e8 82 ff ff ff       	call   c0009979 <Virt::getPageState(unsigned long)>
c00099f7:	5a                   	pop    edx
c00099f8:	84 c0                	test   al,al
c00099fa:	74 c6                	je     c00099c2 <Virt::allocateKernelVirtualPages(int)+0x25>
c00099fc:	31 db                	xor    ebx,ebx
c00099fe:	47                   	inc    edi
c00099ff:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c0009a05:	77 cf                	ja     c00099d6 <Virt::allocateKernelVirtualPages(int)+0x39>
c0009a07:	89 3d a4 f7 01 c0    	mov    DWORD PTR ds:0xc001f7a4,edi
c0009a0d:	eb a8                	jmp    c00099b7 <Virt::allocateKernelVirtualPages(int)+0x1a>
c0009a0f:	83 ec 0c             	sub    esp,0xc
c0009a12:	68 d8 d8 01 c0       	push   0xc001d8d8
c0009a17:	e8 23 6d 00 00       	call   c001073f <Krnl::panic(char const*)>
c0009a1c:	8b 3d a4 f7 01 c0    	mov    edi,DWORD PTR ds:0xc001f7a4
c0009a22:	83 c4 10             	add    esp,0x10
c0009a25:	eb 90                	jmp    c00099b7 <Virt::allocateKernelVirtualPages(int)+0x1a>
c0009a27:	89 2d a4 f7 01 c0    	mov    DWORD PTR ds:0xc001f7a4,ebp
c0009a2d:	4b                   	dec    ebx
c0009a2e:	74 5f                	je     c0009a8f <Virt::allocateKernelVirtualPages(int)+0xf2>
c0009a30:	85 f6                	test   esi,esi
c0009a32:	74 3d                	je     c0009a71 <Virt::allocateKernelVirtualPages(int)+0xd4>
c0009a34:	89 e8                	mov    eax,ebp
c0009a36:	31 db                	xor    ebx,ebx
c0009a38:	8d 7e ff             	lea    edi,[esi-0x1]
c0009a3b:	eb 14                	jmp    c0009a51 <Virt::allocateKernelVirtualPages(int)+0xb4>
c0009a3d:	6a 01                	push   0x1
c0009a3f:	43                   	inc    ebx
c0009a40:	50                   	push   eax
c0009a41:	e8 fe fe ff ff       	call   c0009944 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009a46:	58                   	pop    eax
c0009a47:	39 f3                	cmp    ebx,esi
c0009a49:	5a                   	pop    edx
c0009a4a:	74 25                	je     c0009a71 <Virt::allocateKernelVirtualPages(int)+0xd4>
c0009a4c:	a1 a4 f7 01 c0       	mov    eax,ds:0xc001f7a4
c0009a51:	8d 50 01             	lea    edx,[eax+0x1]
c0009a54:	85 db                	test   ebx,ebx
c0009a56:	89 15 a4 f7 01 c0    	mov    DWORD PTR ds:0xc001f7a4,edx
c0009a5c:	74 20                	je     c0009a7e <Virt::allocateKernelVirtualPages(int)+0xe1>
c0009a5e:	39 df                	cmp    edi,ebx
c0009a60:	75 db                	jne    c0009a3d <Virt::allocateKernelVirtualPages(int)+0xa0>
c0009a62:	6a 03                	push   0x3
c0009a64:	43                   	inc    ebx
c0009a65:	50                   	push   eax
c0009a66:	e8 d9 fe ff ff       	call   c0009944 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009a6b:	59                   	pop    ecx
c0009a6c:	39 f3                	cmp    ebx,esi
c0009a6e:	58                   	pop    eax
c0009a6f:	75 db                	jne    c0009a4c <Virt::allocateKernelVirtualPages(int)+0xaf>
c0009a71:	83 c4 1c             	add    esp,0x1c
c0009a74:	89 e8                	mov    eax,ebp
c0009a76:	5b                   	pop    ebx
c0009a77:	c1 e0 0c             	shl    eax,0xc
c0009a7a:	5e                   	pop    esi
c0009a7b:	5f                   	pop    edi
c0009a7c:	5d                   	pop    ebp
c0009a7d:	c3                   	ret    
c0009a7e:	6a 02                	push   0x2
c0009a80:	bb 01 00 00 00       	mov    ebx,0x1
c0009a85:	50                   	push   eax
c0009a86:	e8 b9 fe ff ff       	call   c0009944 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009a8b:	58                   	pop    eax
c0009a8c:	5a                   	pop    edx
c0009a8d:	eb bd                	jmp    c0009a4c <Virt::allocateKernelVirtualPages(int)+0xaf>
c0009a8f:	6a 04                	push   0x4
c0009a91:	8d 45 01             	lea    eax,[ebp+0x1]
c0009a94:	55                   	push   ebp
c0009a95:	a3 a4 f7 01 c0       	mov    ds:0xc001f7a4,eax
c0009a9a:	e8 a5 fe ff ff       	call   c0009944 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009a9f:	59                   	pop    ecx
c0009aa0:	89 e8                	mov    eax,ebp
c0009aa2:	5b                   	pop    ebx
c0009aa3:	c1 e0 0c             	shl    eax,0xc
c0009aa6:	83 c4 1c             	add    esp,0x1c
c0009aa9:	5b                   	pop    ebx
c0009aaa:	5e                   	pop    esi
c0009aab:	5f                   	pop    edi
c0009aac:	5d                   	pop    ebp
c0009aad:	c3                   	ret    

c0009aae <Virt::freeSwapfilePage(unsigned long)>:
c0009aae:	53                   	push   ebx
c0009aaf:	8b 15 2c 09 02 c0    	mov    edx,DWORD PTR ds:0xc002092c
c0009ab5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009ab9:	b8 01 00 00 00       	mov    eax,0x1
c0009abe:	89 cb                	mov    ebx,ecx
c0009ac0:	d3 e0                	shl    eax,cl
c0009ac2:	c1 eb 05             	shr    ebx,0x5
c0009ac5:	f7 d0                	not    eax
c0009ac7:	21 04 9a             	and    DWORD PTR [edx+ebx*4],eax
c0009aca:	5b                   	pop    ebx
c0009acb:	c3                   	ret    

c0009acc <Virt::swapIDToSector(unsigned long)>:
c0009acc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009ad0:	0f af 05 ac f7 01 c0 	imul   eax,DWORD PTR ds:0xc001f7ac
c0009ad7:	03 05 b4 f7 01 c0    	add    eax,DWORD PTR ds:0xc001f7b4
c0009add:	c3                   	ret    

c0009ade <Virt::allocateSwapfilePage()>:
c0009ade:	55                   	push   ebp
c0009adf:	31 d2                	xor    edx,edx
c0009ae1:	57                   	push   edi
c0009ae2:	56                   	push   esi
c0009ae3:	53                   	push   ebx
c0009ae4:	83 ec 0c             	sub    esp,0xc
c0009ae7:	8b 0d ac f7 01 c0    	mov    ecx,DWORD PTR ds:0xc001f7ac
c0009aed:	a1 b0 f7 01 c0       	mov    eax,ds:0xc001f7b0
c0009af2:	f7 f1                	div    ecx
c0009af4:	39 0d b0 f7 01 c0    	cmp    DWORD PTR ds:0xc001f7b0,ecx
c0009afa:	72 2d                	jb     c0009b29 <Virt::allocateSwapfilePage()+0x4b>
c0009afc:	8b 35 2c 09 02 c0    	mov    esi,DWORD PTR ds:0xc002092c
c0009b02:	8b 16                	mov    edx,DWORD PTR [esi]
c0009b04:	f6 c2 01             	test   dl,0x1
c0009b07:	74 3c                	je     c0009b45 <Virt::allocateSwapfilePage()+0x67>
c0009b09:	31 c9                	xor    ecx,ecx
c0009b0b:	bf 01 00 00 00       	mov    edi,0x1
c0009b10:	eb 12                	jmp    c0009b24 <Virt::allocateSwapfilePage()+0x46>
c0009b12:	89 fd                	mov    ebp,edi
c0009b14:	89 ca                	mov    edx,ecx
c0009b16:	d3 e5                	shl    ebp,cl
c0009b18:	c1 ea 05             	shr    edx,0x5
c0009b1b:	8d 1c 96             	lea    ebx,[esi+edx*4]
c0009b1e:	8b 13                	mov    edx,DWORD PTR [ebx]
c0009b20:	85 ea                	test   edx,ebp
c0009b22:	74 2a                	je     c0009b4e <Virt::allocateSwapfilePage()+0x70>
c0009b24:	41                   	inc    ecx
c0009b25:	39 c8                	cmp    eax,ecx
c0009b27:	77 e9                	ja     c0009b12 <Virt::allocateSwapfilePage()+0x34>
c0009b29:	83 ec 0c             	sub    esp,0xc
c0009b2c:	68 3f da 01 c0       	push   0xc001da3f
c0009b31:	e8 09 6c 00 00       	call   c001073f <Krnl::panic(char const*)>
c0009b36:	83 c4 10             	add    esp,0x10
c0009b39:	31 c9                	xor    ecx,ecx
c0009b3b:	83 c4 0c             	add    esp,0xc
c0009b3e:	89 c8                	mov    eax,ecx
c0009b40:	5b                   	pop    ebx
c0009b41:	5e                   	pop    esi
c0009b42:	5f                   	pop    edi
c0009b43:	5d                   	pop    ebp
c0009b44:	c3                   	ret    
c0009b45:	89 f3                	mov    ebx,esi
c0009b47:	bd 01 00 00 00       	mov    ebp,0x1
c0009b4c:	31 c9                	xor    ecx,ecx
c0009b4e:	09 ea                	or     edx,ebp
c0009b50:	89 c8                	mov    eax,ecx
c0009b52:	89 13                	mov    DWORD PTR [ebx],edx
c0009b54:	83 c4 0c             	add    esp,0xc
c0009b57:	5b                   	pop    ebx
c0009b58:	5e                   	pop    esi
c0009b59:	5f                   	pop    edi
c0009b5a:	5d                   	pop    ebp
c0009b5b:	c3                   	ret    

c0009b5c <Virt::virtualMemorySetup()>:
c0009b5c:	53                   	push   ebx
c0009b5d:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0009b62:	6a 0f                	push   0xf
c0009b64:	53                   	push   ebx
c0009b65:	43                   	inc    ebx
c0009b66:	e8 d9 fd ff ff       	call   c0009944 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009b6b:	58                   	pop    eax
c0009b6c:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0009b72:	5a                   	pop    edx
c0009b73:	75 ed                	jne    c0009b62 <Virt::virtualMemorySetup()+0x6>
c0009b75:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0009b7a:	6a 00                	push   0x0
c0009b7c:	53                   	push   ebx
c0009b7d:	43                   	inc    ebx
c0009b7e:	e8 c1 fd ff ff       	call   c0009944 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009b83:	59                   	pop    ecx
c0009b84:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0009b8a:	58                   	pop    eax
c0009b8b:	75 ed                	jne    c0009b7a <Virt::virtualMemorySetup()+0x1e>
c0009b8d:	bb 00 00 0d 00       	mov    ebx,0xd0000
c0009b92:	6a 0f                	push   0xf
c0009b94:	53                   	push   ebx
c0009b95:	43                   	inc    ebx
c0009b96:	e8 a9 fd ff ff       	call   c0009944 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009b9b:	58                   	pop    eax
c0009b9c:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c0009ba2:	5a                   	pop    edx
c0009ba3:	75 ed                	jne    c0009b92 <Virt::virtualMemorySetup()+0x36>
c0009ba5:	5b                   	pop    ebx
c0009ba6:	c3                   	ret    

c0009ba7 <Virt::setupPageSwapping(int)>:
c0009ba7:	53                   	push   ebx
c0009ba8:	83 ec 0c             	sub    esp,0xc
c0009bab:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0009baf:	a1 a8 2d 02 c0       	mov    eax,ds:0xc0022da8
c0009bb4:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0009bba:	8b 10                	mov    edx,DWORD PTR [eax]
c0009bbc:	53                   	push   ebx
c0009bbd:	c1 e3 0b             	shl    ebx,0xb
c0009bc0:	68 56 da 01 c0       	push   0xc001da56
c0009bc5:	50                   	push   eax
c0009bc6:	ff 52 5c             	call   DWORD PTR [edx+0x5c]
c0009bc9:	89 1d b0 f7 01 c0    	mov    DWORD PTR ds:0xc001f7b0,ebx
c0009bcf:	c6 05 b8 f7 01 c0 43 	mov    BYTE PTR ds:0xc001f7b8,0x43
c0009bd6:	c1 eb 08             	shr    ebx,0x8
c0009bd9:	a3 b4 f7 01 c0       	mov    ds:0xc001f7b4,eax
c0009bde:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0009be1:	c7 05 ac f7 01 c0 08 00 00 00 	mov    DWORD PTR ds:0xc001f7ac,0x8
c0009beb:	e8 71 e2 ff ff       	call   c0007e61 <malloc>
c0009bf0:	83 c4 0c             	add    esp,0xc
c0009bf3:	89 c1                	mov    ecx,eax
c0009bf5:	a3 2c 09 02 c0       	mov    ds:0xc002092c,eax
c0009bfa:	31 d2                	xor    edx,edx
c0009bfc:	a1 b0 f7 01 c0       	mov    eax,ds:0xc001f7b0
c0009c01:	f7 35 ac f7 01 c0    	div    DWORD PTR ds:0xc001f7ac
c0009c07:	c1 e8 05             	shr    eax,0x5
c0009c0a:	50                   	push   eax
c0009c0b:	6a 00                	push   0x0
c0009c0d:	51                   	push   ecx
c0009c0e:	e8 dd 68 ff ff       	call   c00004f0 <memset>
c0009c13:	83 c4 18             	add    esp,0x18
c0009c16:	5b                   	pop    ebx
c0009c17:	c3                   	ret    

c0009c18 <VAS::VAS()>:
c0009c18:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009c1c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0009c23:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009c27:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0009c2e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009c32:	a3 30 09 02 c0       	mov    ds:0xc0020930,eax
c0009c37:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009c3b:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c0009c3f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009c43:	c6 00 01             	mov    BYTE PTR [eax],0x1
c0009c46:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009c4a:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c0009c51:	90                   	nop
c0009c52:	c3                   	ret    
c0009c53:	90                   	nop

c0009c54 <VAS::VAS(VAS*)>:
c0009c54:	83 ec 0c             	sub    esp,0xc
c0009c57:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009c5b:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0009c62:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009c66:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0009c6d:	83 ec 0c             	sub    esp,0xc
c0009c70:	68 f8 d8 01 c0       	push   0xc001d8f8
c0009c75:	e8 c5 6a 00 00       	call   c001073f <Krnl::panic(char const*)>
c0009c7a:	83 c4 10             	add    esp,0x10
c0009c7d:	90                   	nop
c0009c7e:	83 c4 0c             	add    esp,0xc
c0009c81:	c3                   	ret    

c0009c82 <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c0009c82:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009c86:	89 c2                	mov    edx,eax
c0009c88:	c1 e8 0a             	shr    eax,0xa
c0009c8b:	c1 ea 16             	shr    edx,0x16
c0009c8e:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0009c93:	19 c9                	sbb    ecx,ecx
c0009c95:	c1 e2 0c             	shl    edx,0xc
c0009c98:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c0009c9e:	25 fc 0f 00 00       	and    eax,0xffc
c0009ca3:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c0009caa:	01 d0                	add    eax,edx
c0009cac:	c3                   	ret    
c0009cad:	90                   	nop

c0009cae <VAS::getPageTableEntry(unsigned long)>:
c0009cae:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009cb2:	89 ca                	mov    edx,ecx
c0009cb4:	c1 e9 0a             	shr    ecx,0xa
c0009cb7:	c1 ea 16             	shr    edx,0x16
c0009cba:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c0009cc0:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c0009cc6:	c1 e0 0c             	shl    eax,0xc
c0009cc9:	8d 04 08             	lea    eax,[eax+ecx*1]
c0009ccc:	c3                   	ret    

c0009ccd <Virt::freeKernelVirtualPages(unsigned long)>:
c0009ccd:	57                   	push   edi
c0009cce:	56                   	push   esi
c0009ccf:	be 01 00 00 00       	mov    esi,0x1
c0009cd4:	53                   	push   ebx
c0009cd5:	83 ec 10             	sub    esp,0x10
c0009cd8:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0009cdc:	c1 eb 0c             	shr    ebx,0xc
c0009cdf:	eb 3f                	jmp    c0009d20 <Virt::freeKernelVirtualPages(unsigned long)+0x53>
c0009ce1:	83 ec 08             	sub    esp,0x8
c0009ce4:	a1 30 09 02 c0       	mov    eax,ds:0xc0020930
c0009ce9:	57                   	push   edi
c0009cea:	50                   	push   eax
c0009ceb:	e8 be ff ff ff       	call   c0009cae <VAS::getPageTableEntry(unsigned long)>
c0009cf0:	83 c4 10             	add    esp,0x10
c0009cf3:	8b 00                	mov    eax,DWORD PTR [eax]
c0009cf5:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0009cf9:	f6 c4 04             	test   ah,0x4
c0009cfc:	75 60                	jne    c0009d5e <Virt::freeKernelVirtualPages(unsigned long)+0x91>
c0009cfe:	80 fa 04             	cmp    dl,0x4
c0009d01:	74 79                	je     c0009d7c <Virt::freeKernelVirtualPages(unsigned long)+0xaf>
c0009d03:	80 fa 02             	cmp    dl,0x2
c0009d06:	0f 84 89 00 00 00    	je     c0009d95 <Virt::freeKernelVirtualPages(unsigned long)+0xc8>
c0009d0c:	80 fa 03             	cmp    dl,0x3
c0009d0f:	0f 84 ae 00 00 00    	je     c0009dc3 <Virt::freeKernelVirtualPages(unsigned long)+0xf6>
c0009d15:	fe ca                	dec    dl
c0009d17:	0f 84 93 00 00 00    	je     c0009db0 <Virt::freeKernelVirtualPages(unsigned long)+0xe3>
c0009d1d:	43                   	inc    ebx
c0009d1e:	31 f6                	xor    esi,esi
c0009d20:	53                   	push   ebx
c0009d21:	89 df                	mov    edi,ebx
c0009d23:	e8 51 fc ff ff       	call   c0009979 <Virt::getPageState(unsigned long)>
c0009d28:	c1 e7 0c             	shl    edi,0xc
c0009d2b:	5a                   	pop    edx
c0009d2c:	84 c0                	test   al,al
c0009d2e:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0009d32:	75 ad                	jne    c0009ce1 <Virt::freeKernelVirtualPages(unsigned long)+0x14>
c0009d34:	83 ec 0c             	sub    esp,0xc
c0009d37:	68 6d da 01 c0       	push   0xc001da6d
c0009d3c:	e8 fe 69 00 00       	call   c001073f <Krnl::panic(char const*)>
c0009d41:	5a                   	pop    edx
c0009d42:	59                   	pop    ecx
c0009d43:	57                   	push   edi
c0009d44:	8b 3d 30 09 02 c0    	mov    edi,DWORD PTR ds:0xc0020930
c0009d4a:	57                   	push   edi
c0009d4b:	e8 5e ff ff ff       	call   c0009cae <VAS::getPageTableEntry(unsigned long)>
c0009d50:	83 c4 10             	add    esp,0x10
c0009d53:	8b 00                	mov    eax,DWORD PTR [eax]
c0009d55:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0009d59:	f6 c4 04             	test   ah,0x4
c0009d5c:	74 bf                	je     c0009d1d <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0009d5e:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c0009d62:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009d67:	83 ec 0c             	sub    esp,0xc
c0009d6a:	50                   	push   eax
c0009d6b:	e8 5c e4 ff ff       	call   c00081cc <Phys::freePage(unsigned long)>
c0009d70:	83 c4 10             	add    esp,0x10
c0009d73:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0009d77:	80 fa 04             	cmp    dl,0x4
c0009d7a:	75 87                	jne    c0009d03 <Virt::freeKernelVirtualPages(unsigned long)+0x36>
c0009d7c:	89 f0                	mov    eax,esi
c0009d7e:	84 c0                	test   al,al
c0009d80:	75 47                	jne    c0009dc9 <Virt::freeKernelVirtualPages(unsigned long)+0xfc>
c0009d82:	c7 44 24 20 1c d9 01 c0 	mov    DWORD PTR [esp+0x20],0xc001d91c
c0009d8a:	83 c4 10             	add    esp,0x10
c0009d8d:	5b                   	pop    ebx
c0009d8e:	5e                   	pop    esi
c0009d8f:	5f                   	pop    edi
c0009d90:	e9 aa 69 00 00       	jmp    c001073f <Krnl::panic(char const*)>
c0009d95:	89 f0                	mov    eax,esi
c0009d97:	84 c0                	test   al,al
c0009d99:	75 15                	jne    c0009db0 <Virt::freeKernelVirtualPages(unsigned long)+0xe3>
c0009d9b:	83 ec 0c             	sub    esp,0xc
c0009d9e:	68 89 da 01 c0       	push   0xc001da89
c0009da3:	e8 97 69 00 00       	call   c001073f <Krnl::panic(char const*)>
c0009da8:	83 c4 10             	add    esp,0x10
c0009dab:	e9 6d ff ff ff       	jmp    c0009d1d <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0009db0:	83 ec 08             	sub    esp,0x8
c0009db3:	6a 00                	push   0x0
c0009db5:	53                   	push   ebx
c0009db6:	e8 89 fb ff ff       	call   c0009944 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009dbb:	83 c4 10             	add    esp,0x10
c0009dbe:	e9 5a ff ff ff       	jmp    c0009d1d <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0009dc3:	89 f0                	mov    eax,esi
c0009dc5:	84 c0                	test   al,al
c0009dc7:	75 15                	jne    c0009dde <Virt::freeKernelVirtualPages(unsigned long)+0x111>
c0009dc9:	83 ec 08             	sub    esp,0x8
c0009dcc:	6a 00                	push   0x0
c0009dce:	53                   	push   ebx
c0009dcf:	e8 70 fb ff ff       	call   c0009944 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009dd4:	83 c4 10             	add    esp,0x10
c0009dd7:	83 c4 10             	add    esp,0x10
c0009dda:	5b                   	pop    ebx
c0009ddb:	5e                   	pop    esi
c0009ddc:	5f                   	pop    edi
c0009ddd:	c3                   	ret    
c0009dde:	c7 44 24 20 a5 da 01 c0 	mov    DWORD PTR [esp+0x20],0xc001daa5
c0009de6:	83 c4 10             	add    esp,0x10
c0009de9:	5b                   	pop    ebx
c0009dea:	5e                   	pop    esi
c0009deb:	5f                   	pop    edi
c0009dec:	e9 4e 69 00 00       	jmp    c001073f <Krnl::panic(char const*)>
c0009df1:	90                   	nop

c0009df2 <VAS::freeAllocatedPages(unsigned long)>:
c0009df2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009df6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009dfa:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c0009dfe:	74 09                	je     c0009e09 <VAS::freeAllocatedPages(unsigned long)+0x17>
c0009e00:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009e04:	e9 c4 fe ff ff       	jmp    c0009ccd <Virt::freeKernelVirtualPages(unsigned long)>
c0009e09:	c7 44 24 04 40 d9 01 c0 	mov    DWORD PTR [esp+0x4],0xc001d940
c0009e11:	e9 da 0d 00 00       	jmp    c000abf0 <Dbg::kprintf(char const*, ...)>

c0009e16 <VAS::virtualToPhysical(unsigned long)>:
c0009e16:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009e1a:	50                   	push   eax
c0009e1b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009e1f:	52                   	push   edx
c0009e20:	e8 89 fe ff ff       	call   c0009cae <VAS::getPageTableEntry(unsigned long)>
c0009e25:	59                   	pop    ecx
c0009e26:	8b 00                	mov    eax,DWORD PTR [eax]
c0009e28:	5a                   	pop    edx
c0009e29:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009e2e:	c3                   	ret    
c0009e2f:	90                   	nop

c0009e30 <VAS::reflagRange(unsigned long, int, int, int)>:
c0009e30:	55                   	push   ebp
c0009e31:	57                   	push   edi
c0009e32:	56                   	push   esi
c0009e33:	53                   	push   ebx
c0009e34:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0009e38:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0009e3c:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0009e40:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0009e44:	85 db                	test   ebx,ebx
c0009e46:	7e 22                	jle    c0009e6a <VAS::reflagRange(unsigned long, int, int, int)+0x3a>
c0009e48:	c1 e3 0c             	shl    ebx,0xc
c0009e4b:	01 f3                	add    ebx,esi
c0009e4d:	56                   	push   esi
c0009e4e:	81 c6 00 10 00 00    	add    esi,0x1000
c0009e54:	55                   	push   ebp
c0009e55:	e8 54 fe ff ff       	call   c0009cae <VAS::getPageTableEntry(unsigned long)>
c0009e5a:	5a                   	pop    edx
c0009e5b:	59                   	pop    ecx
c0009e5c:	8b 08                	mov    ecx,DWORD PTR [eax]
c0009e5e:	21 f9                	and    ecx,edi
c0009e60:	0b 4c 24 24          	or     ecx,DWORD PTR [esp+0x24]
c0009e64:	39 f3                	cmp    ebx,esi
c0009e66:	89 08                	mov    DWORD PTR [eax],ecx
c0009e68:	75 e3                	jne    c0009e4d <VAS::reflagRange(unsigned long, int, int, int)+0x1d>
c0009e6a:	5b                   	pop    ebx
c0009e6b:	5e                   	pop    esi
c0009e6c:	5f                   	pop    edi
c0009e6d:	5d                   	pop    ebp
c0009e6e:	c3                   	ret    
c0009e6f:	90                   	nop

c0009e70 <VAS::setToWriteCombining(unsigned long, int)>:
c0009e70:	a1 44 08 02 c0       	mov    eax,ds:0xc0020844
c0009e75:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009e7b:	f6 80 8c 11 00 00 20 	test   BYTE PTR [eax+0x118c],0x20
c0009e82:	75 01                	jne    c0009e85 <VAS::setToWriteCombining(unsigned long, int)+0x15>
c0009e84:	c3                   	ret    
c0009e85:	68 80 00 00 00       	push   0x80
c0009e8a:	6a ff                	push   0xffffffff
c0009e8c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009e90:	50                   	push   eax
c0009e91:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0009e95:	52                   	push   edx
c0009e96:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0009e9a:	51                   	push   ecx
c0009e9b:	e8 90 ff ff ff       	call   c0009e30 <VAS::reflagRange(unsigned long, int, int, int)>
c0009ea0:	83 c4 14             	add    esp,0x14
c0009ea3:	c3                   	ret    

c0009ea4 <VAS::mapOtherVASIn(bool, VAS*)>:
c0009ea4:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0009ea9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009ead:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0009eb0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009eb4:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0009eb7:	19 c0                	sbb    eax,eax
c0009eb9:	83 ca 03             	or     edx,0x3
c0009ebc:	83 e0 fc             	and    eax,0xfffffffc
c0009ebf:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c0009ec6:	0f 20 d8             	mov    eax,cr3
c0009ec9:	0f 22 d8             	mov    cr3,eax
c0009ecc:	c3                   	ret    
c0009ecd:	90                   	nop

c0009ece <VAS::~VAS()>:
c0009ece:	83 ec 2c             	sub    esp,0x2c
c0009ed1:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0009ed9:	fa                   	cli    
c0009eda:	a1 08 3d 02 c0       	mov    eax,ds:0xc0023d08
c0009edf:	40                   	inc    eax
c0009ee0:	a3 08 3d 02 c0       	mov    ds:0xc0023d08,eax
c0009ee5:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0009eea:	8b 00                	mov    eax,DWORD PTR [eax]
c0009eec:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009eef:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0009ef5:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0009ef9:	6a 01                	push   0x1
c0009efb:	50                   	push   eax
c0009efc:	e8 a3 ff ff ff       	call   c0009ea4 <VAS::mapOtherVASIn(bool, VAS*)>
c0009f01:	83 c4 0c             	add    esp,0xc
c0009f04:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0009f0c:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c0009f14:	0f 8f d4 00 00 00    	jg     c0009fee <VAS::~VAS()+0x120>
c0009f1a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009f1e:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009f21:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0009f25:	c1 e2 02             	shl    edx,0x2
c0009f28:	01 d0                	add    eax,edx
c0009f2a:	8b 00                	mov    eax,DWORD PTR [eax]
c0009f2c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009f30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009f34:	83 e0 01             	and    eax,0x1
c0009f37:	0f 84 a8 00 00 00    	je     c0009fe5 <VAS::~VAS()+0x117>
c0009f3d:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0009f45:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c0009f4d:	7f 72                	jg     c0009fc1 <VAS::~VAS()+0xf3>
c0009f4f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009f53:	c1 e0 0a             	shl    eax,0xa
c0009f56:	89 c2                	mov    edx,eax
c0009f58:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009f5c:	01 d0                	add    eax,edx
c0009f5e:	c1 e0 0c             	shl    eax,0xc
c0009f61:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009f65:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0009f6a:	8b 00                	mov    eax,DWORD PTR [eax]
c0009f6c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009f6f:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0009f75:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009f79:	6a 01                	push   0x1
c0009f7b:	50                   	push   eax
c0009f7c:	e8 01 fd ff ff       	call   c0009c82 <VAS::getForeignPageTableEntry(bool, unsigned long)>
c0009f81:	83 c4 0c             	add    esp,0xc
c0009f84:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009f88:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009f8c:	8b 00                	mov    eax,DWORD PTR [eax]
c0009f8e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009f92:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009f96:	25 01 04 00 00       	and    eax,0x401
c0009f9b:	3d 01 04 00 00       	cmp    eax,0x401
c0009fa0:	75 19                	jne    c0009fbb <VAS::~VAS()+0xed>
c0009fa2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009fa6:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009fab:	83 ec 0c             	sub    esp,0xc
c0009fae:	50                   	push   eax
c0009faf:	e8 18 e2 ff ff       	call   c00081cc <Phys::freePage(unsigned long)>
c0009fb4:	83 c4 10             	add    esp,0x10
c0009fb7:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0009fbb:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c0009fbf:	eb 84                	jmp    c0009f45 <VAS::~VAS()+0x77>
c0009fc1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009fc5:	25 00 04 00 00       	and    eax,0x400
c0009fca:	74 19                	je     c0009fe5 <VAS::~VAS()+0x117>
c0009fcc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009fd0:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009fd5:	83 ec 0c             	sub    esp,0xc
c0009fd8:	50                   	push   eax
c0009fd9:	e8 ee e1 ff ff       	call   c00081cc <Phys::freePage(unsigned long)>
c0009fde:	83 c4 10             	add    esp,0x10
c0009fe1:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0009fe5:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0009fe9:	e9 1e ff ff ff       	jmp    c0009f0c <VAS::~VAS()+0x3e>
c0009fee:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009ff2:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009ff5:	83 ec 0c             	sub    esp,0xc
c0009ff8:	50                   	push   eax
c0009ff9:	e8 cf fc ff ff       	call   c0009ccd <Virt::freeKernelVirtualPages(unsigned long)>
c0009ffe:	83 c4 10             	add    esp,0x10
c000a001:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a005:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a008:	83 ec 0c             	sub    esp,0xc
c000a00b:	50                   	push   eax
c000a00c:	e8 bb e1 ff ff       	call   c00081cc <Phys::freePage(unsigned long)>
c000a011:	83 c4 10             	add    esp,0x10
c000a014:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000a018:	a1 08 3d 02 c0       	mov    eax,ds:0xc0023d08
c000a01d:	48                   	dec    eax
c000a01e:	a3 08 3d 02 c0       	mov    ds:0xc0023d08,eax
c000a023:	a1 08 3d 02 c0       	mov    eax,ds:0xc0023d08
c000a028:	85 c0                	test   eax,eax
c000a02a:	75 01                	jne    c000a02d <VAS::~VAS()+0x15f>
c000a02c:	fb                   	sti    
c000a02d:	90                   	nop
c000a02e:	83 c4 2c             	add    esp,0x2c
c000a031:	c3                   	ret    

c000a032 <VAS::mapPage(unsigned long, unsigned long, int)>:
c000a032:	55                   	push   ebp
c000a033:	57                   	push   edi
c000a034:	56                   	push   esi
c000a035:	53                   	push   ebx
c000a036:	83 ec 1c             	sub    esp,0x1c
c000a039:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000a03d:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000a041:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c000a047:	77 0b                	ja     c000a054 <VAS::mapPage(unsigned long, unsigned long, int)+0x22>
c000a049:	0f 20 d8             	mov    eax,cr3
c000a04c:	0f 20 d8             	mov    eax,cr3
c000a04f:	39 47 10             	cmp    DWORD PTR [edi+0x10],eax
c000a052:	75 47                	jne    c000a09b <VAS::mapPage(unsigned long, unsigned long, int)+0x69>
c000a054:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000a058:	09 d8                	or     eax,ebx
c000a05a:	a9 ff 0f 00 00       	test   eax,0xfff
c000a05f:	75 57                	jne    c000a0b8 <VAS::mapPage(unsigned long, unsigned long, int)+0x86>
c000a061:	89 de                	mov    esi,ebx
c000a063:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000a066:	c1 ee 16             	shr    esi,0x16
c000a069:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c000a070:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c000a074:	74 54                	je     c000a0ca <VAS::mapPage(unsigned long, unsigned long, int)+0x98>
c000a076:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000a07a:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c000a080:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c000a084:	c1 e6 0c             	shl    esi,0xc
c000a087:	c1 eb 0a             	shr    ebx,0xa
c000a08a:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c000a090:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c000a093:	83 c4 1c             	add    esp,0x1c
c000a096:	5b                   	pop    ebx
c000a097:	5e                   	pop    esi
c000a098:	5f                   	pop    edi
c000a099:	5d                   	pop    ebp
c000a09a:	c3                   	ret    
c000a09b:	83 ec 0c             	sub    esp,0xc
c000a09e:	68 64 d9 01 c0       	push   0xc001d964
c000a0a3:	e8 48 0b 00 00       	call   c000abf0 <Dbg::kprintf(char const*, ...)>
c000a0a8:	83 c4 10             	add    esp,0x10
c000a0ab:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000a0af:	09 d8                	or     eax,ebx
c000a0b1:	a9 ff 0f 00 00       	test   eax,0xfff
c000a0b6:	74 a9                	je     c000a061 <VAS::mapPage(unsigned long, unsigned long, int)+0x2f>
c000a0b8:	83 ec 0c             	sub    esp,0xc
c000a0bb:	68 cc d9 01 c0       	push   0xc001d9cc
c000a0c0:	e8 7a 66 00 00       	call   c001073f <Krnl::panic(char const*)>
c000a0c5:	83 c4 10             	add    esp,0x10
c000a0c8:	eb 97                	jmp    c000a061 <VAS::mapPage(unsigned long, unsigned long, int)+0x2f>
c000a0ca:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a0ce:	e8 5b e1 ff ff       	call   c000822e <Phys::allocatePage()>
c000a0d3:	83 ec 0c             	sub    esp,0xc
c000a0d6:	89 c5                	mov    ebp,eax
c000a0d8:	8b 0d 30 09 02 c0    	mov    ecx,DWORD PTR ds:0xc0020930
c000a0de:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000a0e2:	6a 01                	push   0x1
c000a0e4:	e8 b4 f8 ff ff       	call   c000999d <Virt::allocateKernelVirtualPages(int)>
c000a0e9:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c000a0f0:	6a 01                	push   0x1
c000a0f2:	50                   	push   eax
c000a0f3:	55                   	push   ebp
c000a0f4:	81 cd 07 04 00 00    	or     ebp,0x407
c000a0fa:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000a0fe:	51                   	push   ecx
c000a0ff:	e8 28 02 00 00       	call   c000a32c <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a104:	83 c4 1c             	add    esp,0x1c
c000a107:	68 00 10 00 00       	push   0x1000
c000a10c:	6a 00                	push   0x0
c000a10e:	50                   	push   eax
c000a10f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a113:	e8 d8 63 ff ff       	call   c00004f0 <memset>
c000a118:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000a11c:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a11f:	e8 a9 fb ff ff       	call   c0009ccd <Virt::freeKernelVirtualPages(unsigned long)>
c000a124:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a128:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000a12b:	83 c4 10             	add    esp,0x10
c000a12e:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c000a131:	e9 40 ff ff ff       	jmp    c000a076 <VAS::mapPage(unsigned long, unsigned long, int)+0x44>

c000a136 <VAS::allocatePages(int, int)>:
c000a136:	55                   	push   ebp
c000a137:	57                   	push   edi
c000a138:	56                   	push   esi
c000a139:	53                   	push   ebx
c000a13a:	83 ec 1c             	sub    esp,0x1c
c000a13d:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000a141:	a1 44 08 02 c0       	mov    eax,ds:0xc0020844
c000a146:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a14c:	8a 80 8d 11 00 00    	mov    al,BYTE PTR [eax+0x118d]
c000a152:	83 e0 01             	and    eax,0x1
c000a155:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c000a159:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000a15d:	0f 85 cc 00 00 00    	jne    c000a22f <VAS::allocatePages(int, int)+0xf9>
c000a163:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000a166:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a16a:	85 c0                	test   eax,eax
c000a16c:	0f 84 a1 00 00 00    	je     c000a213 <VAS::allocatePages(int, int)+0xdd>
c000a172:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c000a176:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000a17a:	c1 e6 0c             	shl    esi,0xc
c000a17d:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c000a181:	85 c0                	test   eax,eax
c000a183:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c000a186:	7e 33                	jle    c000a1bb <VAS::allocatePages(int, int)+0x85>
c000a188:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000a18c:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000a190:	81 cd 00 04 00 00    	or     ebp,0x400
c000a196:	e8 93 e0 ff ff       	call   c000822e <Phys::allocatePage()>
c000a19b:	55                   	push   ebp
c000a19c:	53                   	push   ebx
c000a19d:	50                   	push   eax
c000a19e:	57                   	push   edi
c000a19f:	e8 8e fe ff ff       	call   c000a032 <VAS::mapPage(unsigned long, unsigned long, int)>
c000a1a4:	83 c4 10             	add    esp,0x10
c000a1a7:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000a1ac:	74 03                	je     c000a1b1 <VAS::allocatePages(int, int)+0x7b>
c000a1ae:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000a1b1:	81 c3 00 10 00 00    	add    ebx,0x1000
c000a1b7:	39 de                	cmp    esi,ebx
c000a1b9:	75 db                	jne    c000a196 <VAS::allocatePages(int, int)+0x60>
c000a1bb:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000a1c0:	75 12                	jne    c000a1d4 <VAS::allocatePages(int, int)+0x9e>
c000a1c2:	0f 20 d8             	mov    eax,cr3
c000a1c5:	0f 22 d8             	mov    cr3,eax
c000a1c8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a1cc:	83 c4 1c             	add    esp,0x1c
c000a1cf:	5b                   	pop    ebx
c000a1d0:	5e                   	pop    esi
c000a1d1:	5f                   	pop    edi
c000a1d2:	5d                   	pop    ebp
c000a1d3:	c3                   	ret    
c000a1d4:	c1 ee 0a             	shr    esi,0xa
c000a1d7:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000a1db:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c000a1e1:	c1 eb 0a             	shr    ebx,0xa
c000a1e4:	8d 86 00 00 c0 ff    	lea    eax,[esi-0x400000]
c000a1ea:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000a1f0:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000a1f6:	39 c3                	cmp    ebx,eax
c000a1f8:	77 ce                	ja     c000a1c8 <VAS::allocatePages(int, int)+0x92>
c000a1fa:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000a1fd:	81 c3 00 10 00 00    	add    ebx,0x1000
c000a203:	39 d8                	cmp    eax,ebx
c000a205:	73 f3                	jae    c000a1fa <VAS::allocatePages(int, int)+0xc4>
c000a207:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a20b:	83 c4 1c             	add    esp,0x1c
c000a20e:	5b                   	pop    ebx
c000a20f:	5e                   	pop    esi
c000a210:	5f                   	pop    edi
c000a211:	5d                   	pop    ebp
c000a212:	c3                   	ret    
c000a213:	83 ec 0c             	sub    esp,0xc
c000a216:	68 f0 d9 01 c0       	push   0xc001d9f0
c000a21b:	e8 1f 65 00 00       	call   c001073f <Krnl::panic(char const*)>
c000a220:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000a223:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a227:	83 c4 10             	add    esp,0x10
c000a22a:	e9 43 ff ff ff       	jmp    c000a172 <VAS::allocatePages(int, int)+0x3c>
c000a22f:	83 ec 0c             	sub    esp,0xc
c000a232:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c000a236:	51                   	push   ecx
c000a237:	e8 61 f7 ff ff       	call   c000999d <Virt::allocateKernelVirtualPages(int)>
c000a23c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a240:	83 c4 10             	add    esp,0x10
c000a243:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c000a248:	0f 87 9b 00 00 00    	ja     c000a2e9 <VAS::allocatePages(int, int)+0x1b3>
c000a24e:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000a252:	85 d2                	test   edx,edx
c000a254:	7e 3c                	jle    c000a292 <VAS::allocatePages(int, int)+0x15c>
c000a256:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000a25a:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000a25e:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000a262:	c1 e5 0c             	shl    ebp,0xc
c000a265:	81 ce 00 04 00 00    	or     esi,0x400
c000a26b:	01 dd                	add    ebp,ebx
c000a26d:	e8 bc df ff ff       	call   c000822e <Phys::allocatePage()>
c000a272:	56                   	push   esi
c000a273:	53                   	push   ebx
c000a274:	50                   	push   eax
c000a275:	57                   	push   edi
c000a276:	e8 b7 fd ff ff       	call   c000a032 <VAS::mapPage(unsigned long, unsigned long, int)>
c000a27b:	83 c4 10             	add    esp,0x10
c000a27e:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000a283:	74 03                	je     c000a288 <VAS::allocatePages(int, int)+0x152>
c000a285:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000a288:	81 c3 00 10 00 00    	add    ebx,0x1000
c000a28e:	39 dd                	cmp    ebp,ebx
c000a290:	75 db                	jne    c000a26d <VAS::allocatePages(int, int)+0x137>
c000a292:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000a297:	0f 84 25 ff ff ff    	je     c000a1c2 <VAS::allocatePages(int, int)+0x8c>
c000a29d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000a2a1:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000a2a5:	89 d3                	mov    ebx,edx
c000a2a7:	c1 e0 0c             	shl    eax,0xc
c000a2aa:	c1 eb 0a             	shr    ebx,0xa
c000a2ad:	01 d0                	add    eax,edx
c000a2af:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000a2b5:	c1 e8 0a             	shr    eax,0xa
c000a2b8:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000a2be:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a2c3:	2d 00 00 40 00       	sub    eax,0x400000
c000a2c8:	39 c3                	cmp    ebx,eax
c000a2ca:	0f 87 f8 fe ff ff    	ja     c000a1c8 <VAS::allocatePages(int, int)+0x92>
c000a2d0:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000a2d3:	81 c3 00 10 00 00    	add    ebx,0x1000
c000a2d9:	39 d8                	cmp    eax,ebx
c000a2db:	73 f3                	jae    c000a2d0 <VAS::allocatePages(int, int)+0x19a>
c000a2dd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a2e1:	83 c4 1c             	add    esp,0x1c
c000a2e4:	5b                   	pop    ebx
c000a2e5:	5e                   	pop    esi
c000a2e6:	5f                   	pop    edi
c000a2e7:	5d                   	pop    ebp
c000a2e8:	c3                   	ret    
c000a2e9:	a1 44 08 02 c0       	mov    eax,ds:0xc0020844
c000a2ee:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a2f4:	f6 80 8c 11 00 00 10 	test   BYTE PTR [eax+0x118c],0x10
c000a2fb:	0f 84 4d ff ff ff    	je     c000a24e <VAS::allocatePages(int, int)+0x118>
c000a301:	81 4c 24 38 00 01 00 00 	or     DWORD PTR [esp+0x38],0x100
c000a309:	e9 40 ff ff ff       	jmp    c000a24e <VAS::allocatePages(int, int)+0x118>

c000a30e <VAS::setCPUSpecific(unsigned long)>:
c000a30e:	83 ec 0c             	sub    esp,0xc
c000a311:	6a 05                	push   0x5
c000a313:	68 00 00 40 c2       	push   0xc2400000
c000a318:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a31c:	50                   	push   eax
c000a31d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a321:	52                   	push   edx
c000a322:	e8 0b fd ff ff       	call   c000a032 <VAS::mapPage(unsigned long, unsigned long, int)>
c000a327:	83 c4 1c             	add    esp,0x1c
c000a32a:	c3                   	ret    
c000a32b:	90                   	nop

c000a32c <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c000a32c:	55                   	push   ebp
c000a32d:	57                   	push   edi
c000a32e:	56                   	push   esi
c000a32f:	53                   	push   ebx
c000a330:	83 ec 1c             	sub    esp,0x1c
c000a333:	a1 44 08 02 c0       	mov    eax,ds:0xc0020844
c000a338:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000a33c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a342:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000a346:	8a 80 8d 11 00 00    	mov    al,BYTE PTR [eax+0x118d]
c000a34c:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c000a350:	83 e0 01             	and    eax,0x1
c000a353:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000a357:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000a35b:	85 c0                	test   eax,eax
c000a35d:	7e 39                	jle    c000a398 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x6c>
c000a35f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000a363:	89 f3                	mov    ebx,esi
c000a365:	c1 e0 0c             	shl    eax,0xc
c000a368:	01 f0                	add    eax,esi
c000a36a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a36e:	55                   	push   ebp
c000a36f:	53                   	push   ebx
c000a370:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000a374:	29 f0                	sub    eax,esi
c000a376:	01 d8                	add    eax,ebx
c000a378:	50                   	push   eax
c000a379:	57                   	push   edi
c000a37a:	e8 b3 fc ff ff       	call   c000a032 <VAS::mapPage(unsigned long, unsigned long, int)>
c000a37f:	83 c4 10             	add    esp,0x10
c000a382:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000a387:	74 03                	je     c000a38c <VAS::mapRange(unsigned long, unsigned long, int, int)+0x60>
c000a389:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000a38c:	81 c3 00 10 00 00    	add    ebx,0x1000
c000a392:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c000a396:	75 d6                	jne    c000a36e <VAS::mapRange(unsigned long, unsigned long, int, int)+0x42>
c000a398:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000a39d:	75 10                	jne    c000a3af <VAS::mapRange(unsigned long, unsigned long, int, int)+0x83>
c000a39f:	0f 20 d8             	mov    eax,cr3
c000a3a2:	0f 22 d8             	mov    cr3,eax
c000a3a5:	83 c4 1c             	add    esp,0x1c
c000a3a8:	89 f0                	mov    eax,esi
c000a3aa:	5b                   	pop    ebx
c000a3ab:	5e                   	pop    esi
c000a3ac:	5f                   	pop    edi
c000a3ad:	5d                   	pop    ebp
c000a3ae:	c3                   	ret    
c000a3af:	89 f3                	mov    ebx,esi
c000a3b1:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000a3b5:	c1 eb 0a             	shr    ebx,0xa
c000a3b8:	c1 e0 0c             	shl    eax,0xc
c000a3bb:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000a3c1:	01 f0                	add    eax,esi
c000a3c3:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000a3c9:	c1 e8 0a             	shr    eax,0xa
c000a3cc:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a3d1:	2d 00 00 40 00       	sub    eax,0x400000
c000a3d6:	39 c3                	cmp    ebx,eax
c000a3d8:	77 cb                	ja     c000a3a5 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x79>
c000a3da:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000a3dd:	81 c3 00 10 00 00    	add    ebx,0x1000
c000a3e3:	39 d8                	cmp    eax,ebx
c000a3e5:	73 f3                	jae    c000a3da <VAS::mapRange(unsigned long, unsigned long, int, int)+0xae>
c000a3e7:	83 c4 1c             	add    esp,0x1c
c000a3ea:	89 f0                	mov    eax,esi
c000a3ec:	5b                   	pop    ebx
c000a3ed:	5e                   	pop    esi
c000a3ee:	5f                   	pop    edi
c000a3ef:	5d                   	pop    ebp
c000a3f0:	c3                   	ret    
c000a3f1:	90                   	nop

c000a3f2 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c000a3f2:	55                   	push   ebp
c000a3f3:	57                   	push   edi
c000a3f4:	56                   	push   esi
c000a3f5:	53                   	push   ebx
c000a3f6:	83 ec 1c             	sub    esp,0x1c
c000a3f9:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000a3fd:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000a401:	0b 44 24 3c          	or     eax,DWORD PTR [esp+0x3c]
c000a405:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000a409:	a9 ff 0f 00 00       	test   eax,0xfff
c000a40e:	75 4a                	jne    c000a45a <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x68>
c000a410:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000a414:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000a417:	c1 eb 16             	shr    ebx,0x16
c000a41a:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
c000a421:	f6 04 30 01          	test   BYTE PTR [eax+esi*1],0x1
c000a425:	74 4d                	je     c000a474 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x82>
c000a427:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000a42b:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c000a42f:	c1 e8 0a             	shr    eax,0xa
c000a432:	80 fa 01             	cmp    dl,0x1
c000a435:	19 d2                	sbb    edx,edx
c000a437:	c1 e3 0c             	shl    ebx,0xc
c000a43a:	0b 4c 24 3c          	or     ecx,DWORD PTR [esp+0x3c]
c000a43e:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c000a444:	25 fc 0f 00 00       	and    eax,0xffc
c000a449:	01 d8                	add    eax,ebx
c000a44b:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c000a452:	83 c4 1c             	add    esp,0x1c
c000a455:	5b                   	pop    ebx
c000a456:	5e                   	pop    esi
c000a457:	5f                   	pop    edi
c000a458:	5d                   	pop    ebp
c000a459:	c3                   	ret    
c000a45a:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000a45e:	83 ec 0c             	sub    esp,0xc
c000a461:	68 1c da 01 c0       	push   0xc001da1c
c000a466:	e8 d4 62 00 00       	call   c001073f <Krnl::panic(char const*)>
c000a46b:	83 c4 10             	add    esp,0x10
c000a46e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a472:	eb 9c                	jmp    c000a410 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x1e>
c000a474:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a478:	e8 b1 dd ff ff       	call   c000822e <Phys::allocatePage()>
c000a47d:	83 ec 0c             	sub    esp,0xc
c000a480:	89 c5                	mov    ebp,eax
c000a482:	8b 0d 30 09 02 c0    	mov    ecx,DWORD PTR ds:0xc0020930
c000a488:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000a48c:	6a 01                	push   0x1
c000a48e:	e8 0a f5 ff ff       	call   c000999d <Virt::allocateKernelVirtualPages(int)>
c000a493:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c000a49a:	6a 01                	push   0x1
c000a49c:	50                   	push   eax
c000a49d:	55                   	push   ebp
c000a49e:	81 cd 07 04 00 00    	or     ebp,0x407
c000a4a4:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000a4a8:	51                   	push   ecx
c000a4a9:	e8 7e fe ff ff       	call   c000a32c <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a4ae:	83 c4 1c             	add    esp,0x1c
c000a4b1:	68 00 10 00 00       	push   0x1000
c000a4b6:	6a 00                	push   0x0
c000a4b8:	50                   	push   eax
c000a4b9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a4bd:	e8 2e 60 ff ff       	call   c00004f0 <memset>
c000a4c2:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000a4c6:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a4c9:	e8 ff f7 ff ff       	call   c0009ccd <Virt::freeKernelVirtualPages(unsigned long)>
c000a4ce:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000a4d1:	83 c4 10             	add    esp,0x10
c000a4d4:	89 2c 30             	mov    DWORD PTR [eax+esi*1],ebp
c000a4d7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000a4db:	e9 47 ff ff ff       	jmp    c000a427 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x35>

c000a4e0 <VAS::VAS(bool)>:
c000a4e0:	53                   	push   ebx
c000a4e1:	83 ec 28             	sub    esp,0x28
c000a4e4:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000a4e8:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000a4ec:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a4f0:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000a4f7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a4fb:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c000a502:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a506:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c000a50a:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c000a50d:	e8 1c dd ff ff       	call   c000822e <Phys::allocatePage()>
c000a512:	89 c2                	mov    edx,eax
c000a514:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a518:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000a51b:	8b 1d 30 09 02 c0    	mov    ebx,DWORD PTR ds:0xc0020930
c000a521:	83 ec 0c             	sub    esp,0xc
c000a524:	6a 01                	push   0x1
c000a526:	e8 72 f4 ff ff       	call   c000999d <Virt::allocateKernelVirtualPages(int)>
c000a52b:	83 c4 10             	add    esp,0x10
c000a52e:	89 c2                	mov    edx,eax
c000a530:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a534:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a537:	83 ec 0c             	sub    esp,0xc
c000a53a:	6a 03                	push   0x3
c000a53c:	6a 01                	push   0x1
c000a53e:	52                   	push   edx
c000a53f:	50                   	push   eax
c000a540:	53                   	push   ebx
c000a541:	e8 e6 fd ff ff       	call   c000a32c <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a546:	83 c4 20             	add    esp,0x20
c000a549:	89 c2                	mov    edx,eax
c000a54b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a54f:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000a552:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000a55a:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c000a562:	7f 1c                	jg     c000a580 <VAS::VAS(bool)+0xa0>
c000a564:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a568:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a56b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a56f:	c1 e2 02             	shl    edx,0x2
c000a572:	01 d0                	add    eax,edx
c000a574:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000a57a:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000a57e:	eb da                	jmp    c000a55a <VAS::VAS(bool)+0x7a>
c000a580:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c000a588:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c000a590:	7f 7a                	jg     c000a60c <VAS::VAS(bool)+0x12c>
c000a592:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a596:	2d 00 02 00 00       	sub    eax,0x200
c000a59b:	c1 e0 0c             	shl    eax,0xc
c000a59e:	83 c8 03             	or     eax,0x3
c000a5a1:	89 c2                	mov    edx,eax
c000a5a3:	a1 44 08 02 c0       	mov    eax,ds:0xc0020844
c000a5a8:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a5ae:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c000a5b4:	83 e0 10             	and    eax,0x10
c000a5b7:	84 c0                	test   al,al
c000a5b9:	74 07                	je     c000a5c2 <VAS::VAS(bool)+0xe2>
c000a5bb:	b8 00 01 00 00       	mov    eax,0x100
c000a5c0:	eb 05                	jmp    c000a5c7 <VAS::VAS(bool)+0xe7>
c000a5c2:	b8 00 00 00 00       	mov    eax,0x0
c000a5c7:	09 d0                	or     eax,edx
c000a5c9:	89 c1                	mov    ecx,eax
c000a5cb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a5cf:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a5d2:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000a5d6:	c1 e2 02             	shl    edx,0x2
c000a5d9:	01 d0                	add    eax,edx
c000a5db:	89 ca                	mov    edx,ecx
c000a5dd:	89 10                	mov    DWORD PTR [eax],edx
c000a5df:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a5e3:	2d 40 03 00 00       	sub    eax,0x340
c000a5e8:	83 f8 7f             	cmp    eax,0x7f
c000a5eb:	77 16                	ja     c000a603 <VAS::VAS(bool)+0x123>
c000a5ed:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a5f1:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a5f4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000a5f8:	c1 e2 02             	shl    edx,0x2
c000a5fb:	01 d0                	add    eax,edx
c000a5fd:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000a603:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000a607:	e9 7c ff ff ff       	jmp    c000a588 <VAS::VAS(bool)+0xa8>
c000a60c:	a1 44 08 02 c0       	mov    eax,ds:0xc0020844
c000a611:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a617:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c000a61d:	83 e0 10             	and    eax,0x10
c000a620:	84 c0                	test   al,al
c000a622:	74 07                	je     c000a62b <VAS::VAS(bool)+0x14b>
c000a624:	b8 03 41 00 00       	mov    eax,0x4103
c000a629:	eb 05                	jmp    c000a630 <VAS::VAS(bool)+0x150>
c000a62b:	b8 03 40 00 00       	mov    eax,0x4003
c000a630:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000a634:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000a637:	81 c2 20 0c 00 00    	add    edx,0xc20
c000a63d:	89 02                	mov    DWORD PTR [edx],eax
c000a63f:	a1 44 08 02 c0       	mov    eax,ds:0xc0020844
c000a644:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a64a:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000a650:	83 ec 08             	sub    esp,0x8
c000a653:	50                   	push   eax
c000a654:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a658:	e8 b1 fc ff ff       	call   c000a30e <VAS::setCPUSpecific(unsigned long)>
c000a65d:	83 c4 10             	add    esp,0x10
c000a660:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a664:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000a667:	a1 44 08 02 c0       	mov    eax,ds:0xc0020844
c000a66c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a672:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c000a678:	83 e0 10             	and    eax,0x10
c000a67b:	84 c0                	test   al,al
c000a67d:	74 07                	je     c000a686 <VAS::VAS(bool)+0x1a6>
c000a67f:	b8 00 01 00 00       	mov    eax,0x100
c000a684:	eb 05                	jmp    c000a68b <VAS::VAS(bool)+0x1ab>
c000a686:	b8 00 00 00 00       	mov    eax,0x0
c000a68b:	09 c2                	or     edx,eax
c000a68d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a691:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a694:	05 fc 0f 00 00       	add    eax,0xffc
c000a699:	83 ca 03             	or     edx,0x3
c000a69c:	89 10                	mov    DWORD PTR [eax],edx
c000a69e:	a1 44 08 02 c0       	mov    eax,ds:0xc0020844
c000a6a3:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a6a9:	83 ec 0c             	sub    esp,0xc
c000a6ac:	50                   	push   eax
c000a6ad:	e8 12 1c 00 00       	call   c000c2c4 <Device::getName()>
c000a6b2:	83 c4 10             	add    esp,0x10
c000a6b5:	83 ec 08             	sub    esp,0x8
c000a6b8:	68 bf da 01 c0       	push   0xc001dabf
c000a6bd:	50                   	push   eax
c000a6be:	e8 3d 60 ff ff       	call   c0000700 <strcmp>
c000a6c3:	83 c4 10             	add    esp,0x10
c000a6c6:	85 c0                	test   eax,eax
c000a6c8:	0f 94 c0             	sete   al
c000a6cb:	84 c0                	test   al,al
c000a6cd:	0f 84 87 00 00 00    	je     c000a75a <VAS::VAS(bool)+0x27a>
c000a6d3:	fa                   	cli    
c000a6d4:	a1 08 3d 02 c0       	mov    eax,ds:0xc0023d08
c000a6d9:	40                   	inc    eax
c000a6da:	a3 08 3d 02 c0       	mov    ds:0xc0023d08,eax
c000a6df:	a1 44 08 02 c0       	mov    eax,ds:0xc0020844
c000a6e4:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a6ea:	05 7c 09 00 00       	add    eax,0x97c
c000a6ef:	83 ec 0c             	sub    esp,0xc
c000a6f2:	50                   	push   eax
c000a6f3:	e8 66 d2 ff ff       	call   c000795e <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000a6f8:	83 c4 10             	add    esp,0x10
c000a6fb:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a700:	89 c3                	mov    ebx,eax
c000a702:	a1 44 08 02 c0       	mov    eax,ds:0xc0020844
c000a707:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a70d:	05 7c 09 00 00       	add    eax,0x97c
c000a712:	83 ec 0c             	sub    esp,0xc
c000a715:	50                   	push   eax
c000a716:	e8 43 d2 ff ff       	call   c000795e <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000a71b:	83 c4 10             	add    esp,0x10
c000a71e:	83 ec 08             	sub    esp,0x8
c000a721:	50                   	push   eax
c000a722:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a726:	e8 83 f5 ff ff       	call   c0009cae <VAS::getPageTableEntry(unsigned long)>
c000a72b:	83 c4 10             	add    esp,0x10
c000a72e:	8b 00                	mov    eax,DWORD PTR [eax]
c000a730:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a735:	6a 11                	push   0x11
c000a737:	53                   	push   ebx
c000a738:	50                   	push   eax
c000a739:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a73d:	e8 f0 f8 ff ff       	call   c000a032 <VAS::mapPage(unsigned long, unsigned long, int)>
c000a742:	83 c4 10             	add    esp,0x10
c000a745:	a1 08 3d 02 c0       	mov    eax,ds:0xc0023d08
c000a74a:	48                   	dec    eax
c000a74b:	a3 08 3d 02 c0       	mov    ds:0xc0023d08,eax
c000a750:	a1 08 3d 02 c0       	mov    eax,ds:0xc0023d08
c000a755:	85 c0                	test   eax,eax
c000a757:	75 01                	jne    c000a75a <VAS::VAS(bool)+0x27a>
c000a759:	fb                   	sti    
c000a75a:	90                   	nop
c000a75b:	83 c4 28             	add    esp,0x28
c000a75e:	5b                   	pop    ebx
c000a75f:	c3                   	ret    

c000a760 <VAS::evict(unsigned long)>:
c000a760:	55                   	push   ebp
c000a761:	57                   	push   edi
c000a762:	56                   	push   esi
c000a763:	53                   	push   ebx
c000a764:	83 ec 1c             	sub    esp,0x1c
c000a767:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a76b:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000a76f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a773:	e8 66 f3 ff ff       	call   c0009ade <Virt::allocateSwapfilePage()>
c000a778:	8b 0d ac f7 01 c0    	mov    ecx,DWORD PTR ds:0xc001f7ac
c000a77e:	89 c7                	mov    edi,eax
c000a780:	85 c9                	test   ecx,ecx
c000a782:	7e 3e                	jle    c000a7c2 <VAS::evict(unsigned long)+0x62>
c000a784:	89 ee                	mov    esi,ebp
c000a786:	31 db                	xor    ebx,ebx
c000a788:	83 ec 0c             	sub    esp,0xc
c000a78b:	57                   	push   edi
c000a78c:	e8 3b f3 ff ff       	call   c0009acc <Virt::swapIDToSector(unsigned long)>
c000a791:	89 34 24             	mov    DWORD PTR [esp],esi
c000a794:	01 d8                	add    eax,ebx
c000a796:	6a 01                	push   0x1
c000a798:	31 d2                	xor    edx,edx
c000a79a:	43                   	inc    ebx
c000a79b:	52                   	push   edx
c000a79c:	81 c6 00 02 00 00    	add    esi,0x200
c000a7a2:	50                   	push   eax
c000a7a3:	0f be 05 b8 f7 01 c0 	movsx  eax,BYTE PTR ds:0xc001f7b8
c000a7aa:	8b 14 85 9c 2c 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdd364]
c000a7b1:	52                   	push   edx
c000a7b2:	e8 8d 2b 00 00       	call   c000d344 <LogicalDisk::write(unsigned long long, int, void*)>
c000a7b7:	83 c4 20             	add    esp,0x20
c000a7ba:	39 1d ac f7 01 c0    	cmp    DWORD PTR ds:0xc001f7ac,ebx
c000a7c0:	7f c6                	jg     c000a788 <VAS::evict(unsigned long)+0x28>
c000a7c2:	83 ec 08             	sub    esp,0x8
c000a7c5:	c1 e7 0b             	shl    edi,0xb
c000a7c8:	55                   	push   ebp
c000a7c9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a7cd:	50                   	push   eax
c000a7ce:	e8 db f4 ff ff       	call   c0009cae <VAS::getPageTableEntry(unsigned long)>
c000a7d3:	8b 10                	mov    edx,DWORD PTR [eax]
c000a7d5:	89 d1                	mov    ecx,edx
c000a7d7:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000a7dd:	81 e1 fe 07 00 00    	and    ecx,0x7fe
c000a7e3:	09 cf                	or     edi,ecx
c000a7e5:	89 38                	mov    DWORD PTR [eax],edi
c000a7e7:	89 14 24             	mov    DWORD PTR [esp],edx
c000a7ea:	ff 05 28 09 02 c0    	inc    DWORD PTR ds:0xc0020928
c000a7f0:	e8 d7 d9 ff ff       	call   c00081cc <Phys::freePage(unsigned long)>
c000a7f5:	0f 20 d8             	mov    eax,cr3
c000a7f8:	0f 22 d8             	mov    cr3,eax
c000a7fb:	a1 24 09 02 c0       	mov    eax,ds:0xc0020924
c000a800:	c7 44 24 40 cd da 01 c0 	mov    DWORD PTR [esp+0x40],0xc001dacd
c000a808:	8d 50 01             	lea    edx,[eax+0x1]
c000a80b:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a80f:	89 15 24 09 02 c0    	mov    DWORD PTR ds:0xc0020924,edx
c000a815:	83 c4 2c             	add    esp,0x2c
c000a818:	5b                   	pop    ebx
c000a819:	5e                   	pop    esi
c000a81a:	5f                   	pop    edi
c000a81b:	5d                   	pop    ebp
c000a81c:	e9 cf 03 00 00       	jmp    c000abf0 <Dbg::kprintf(char const*, ...)>
c000a821:	90                   	nop

c000a822 <VAS::tryLoadBackOffDisk(unsigned long)>:
c000a822:	55                   	push   ebp
c000a823:	57                   	push   edi
c000a824:	56                   	push   esi
c000a825:	53                   	push   ebx
c000a826:	83 ec 14             	sub    esp,0x14
c000a829:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000a82d:	53                   	push   ebx
c000a82e:	68 de da 01 c0       	push   0xc001dade
c000a833:	e8 b8 03 00 00       	call   c000abf0 <Dbg::kprintf(char const*, ...)>
c000a838:	83 c4 10             	add    esp,0x10
c000a83b:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000a841:	74 21                	je     c000a864 <VAS::tryLoadBackOffDisk(unsigned long)+0x42>
c000a843:	83 ec 08             	sub    esp,0x8
c000a846:	53                   	push   ebx
c000a847:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c000a84b:	57                   	push   edi
c000a84c:	e8 5d f4 ff ff       	call   c0009cae <VAS::getPageTableEntry(unsigned long)>
c000a851:	83 c4 10             	add    esp,0x10
c000a854:	89 c6                	mov    esi,eax
c000a856:	85 c0                	test   eax,eax
c000a858:	74 0a                	je     c000a864 <VAS::tryLoadBackOffDisk(unsigned long)+0x42>
c000a85a:	8b 28                	mov    ebp,DWORD PTR [eax]
c000a85c:	f7 c5 01 00 00 00    	test   ebp,0x1
c000a862:	74 0a                	je     c000a86e <VAS::tryLoadBackOffDisk(unsigned long)+0x4c>
c000a864:	31 c0                	xor    eax,eax
c000a866:	83 c4 0c             	add    esp,0xc
c000a869:	5b                   	pop    ebx
c000a86a:	5e                   	pop    esi
c000a86b:	5f                   	pop    edi
c000a86c:	5d                   	pop    ebp
c000a86d:	c3                   	ret    
c000a86e:	e8 bb d9 ff ff       	call   c000822e <Phys::allocatePage()>
c000a873:	c1 ed 0b             	shr    ebp,0xb
c000a876:	8b 16                	mov    edx,DWORD PTR [esi]
c000a878:	81 e2 ff 0f 00 00    	and    edx,0xfff
c000a87e:	09 c2                	or     edx,eax
c000a880:	81 ca 01 08 00 00    	or     edx,0x801
c000a886:	89 16                	mov    DWORD PTR [esi],edx
c000a888:	8b 35 ac f7 01 c0    	mov    esi,DWORD PTR ds:0xc001f7ac
c000a88e:	85 f6                	test   esi,esi
c000a890:	7e 3e                	jle    c000a8d0 <VAS::tryLoadBackOffDisk(unsigned long)+0xae>
c000a892:	89 df                	mov    edi,ebx
c000a894:	31 f6                	xor    esi,esi
c000a896:	83 ec 0c             	sub    esp,0xc
c000a899:	55                   	push   ebp
c000a89a:	e8 2d f2 ff ff       	call   c0009acc <Virt::swapIDToSector(unsigned long)>
c000a89f:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a8a2:	01 f0                	add    eax,esi
c000a8a4:	6a 01                	push   0x1
c000a8a6:	31 d2                	xor    edx,edx
c000a8a8:	46                   	inc    esi
c000a8a9:	52                   	push   edx
c000a8aa:	81 c7 00 02 00 00    	add    edi,0x200
c000a8b0:	50                   	push   eax
c000a8b1:	0f be 05 b8 f7 01 c0 	movsx  eax,BYTE PTR ds:0xc001f7b8
c000a8b8:	8b 0c 85 9c 2c 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdd364]
c000a8bf:	51                   	push   ecx
c000a8c0:	e8 13 2a 00 00       	call   c000d2d8 <LogicalDisk::read(unsigned long long, int, void*)>
c000a8c5:	83 c4 20             	add    esp,0x20
c000a8c8:	39 35 ac f7 01 c0    	cmp    DWORD PTR ds:0xc001f7ac,esi
c000a8ce:	7f c6                	jg     c000a896 <VAS::tryLoadBackOffDisk(unsigned long)+0x74>
c000a8d0:	a1 28 09 02 c0       	mov    eax,ds:0xc0020928
c000a8d5:	48                   	dec    eax
c000a8d6:	52                   	push   edx
c000a8d7:	a3 28 09 02 c0       	mov    ds:0xc0020928,eax
c000a8dc:	50                   	push   eax
c000a8dd:	53                   	push   ebx
c000a8de:	68 f1 da 01 c0       	push   0xc001daf1
c000a8e3:	e8 08 03 00 00       	call   c000abf0 <Dbg::kprintf(char const*, ...)>
c000a8e8:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000a8eb:	e8 be f1 ff ff       	call   c0009aae <Virt::freeSwapfilePage(unsigned long)>
c000a8f0:	a1 08 3d 02 c0       	mov    eax,ds:0xc0023d08
c000a8f5:	83 c4 10             	add    esp,0x10
c000a8f8:	48                   	dec    eax
c000a8f9:	a3 08 3d 02 c0       	mov    ds:0xc0023d08,eax
c000a8fe:	85 c0                	test   eax,eax
c000a900:	75 01                	jne    c000a903 <VAS::tryLoadBackOffDisk(unsigned long)+0xe1>
c000a902:	fb                   	sti    
c000a903:	0f 20 d8             	mov    eax,cr3
c000a906:	0f 22 d8             	mov    cr3,eax
c000a909:	b0 01                	mov    al,0x1
c000a90b:	e9 56 ff ff ff       	jmp    c000a866 <VAS::tryLoadBackOffDisk(unsigned long)+0x44>

c000a910 <VAS::scanForEviction()>:
c000a910:	57                   	push   edi
c000a911:	31 ff                	xor    edi,edi
c000a913:	56                   	push   esi
c000a914:	53                   	push   ebx
c000a915:	83 ec 10             	sub    esp,0x10
c000a918:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000a91c:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c000a91f:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000a925:	75 0e                	jne    c000a935 <VAS::scanForEviction()+0x25>
c000a927:	89 da                	mov    edx,ebx
c000a929:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000a92c:	c1 ea 16             	shr    edx,0x16
c000a92f:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000a933:	74 4e                	je     c000a983 <VAS::scanForEviction()+0x73>
c000a935:	53                   	push   ebx
c000a936:	56                   	push   esi
c000a937:	e8 72 f3 ff ff       	call   c0009cae <VAS::getPageTableEntry(unsigned long)>
c000a93c:	5a                   	pop    edx
c000a93d:	8b 10                	mov    edx,DWORD PTR [eax]
c000a93f:	59                   	pop    ecx
c000a940:	89 d1                	mov    ecx,edx
c000a942:	81 e1 01 08 00 00    	and    ecx,0x801
c000a948:	81 f9 01 08 00 00    	cmp    ecx,0x801
c000a94e:	74 3e                	je     c000a98e <VAS::scanForEviction()+0x7e>
c000a950:	81 c3 00 10 00 00    	add    ebx,0x1000
c000a956:	81 fb ff ff ff fe    	cmp    ebx,0xfeffffff
c000a95c:	76 2b                	jbe    c000a989 <VAS::scanForEviction()+0x79>
c000a95e:	47                   	inc    edi
c000a95f:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c000a966:	83 ff 03             	cmp    edi,0x3
c000a969:	74 32                	je     c000a99d <VAS::scanForEviction()+0x8d>
c000a96b:	31 db                	xor    ebx,ebx
c000a96d:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000a973:	75 c0                	jne    c000a935 <VAS::scanForEviction()+0x25>
c000a975:	89 da                	mov    edx,ebx
c000a977:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000a97a:	c1 ea 16             	shr    edx,0x16
c000a97d:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000a981:	75 b2                	jne    c000a935 <VAS::scanForEviction()+0x25>
c000a983:	81 c3 00 00 40 00    	add    ebx,0x400000
c000a989:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c000a98c:	eb 91                	jmp    c000a91f <VAS::scanForEviction()+0xf>
c000a98e:	f6 c2 20             	test   dl,0x20
c000a991:	74 13                	je     c000a9a6 <VAS::scanForEviction()+0x96>
c000a993:	83 e2 df             	and    edx,0xffffffdf
c000a996:	89 10                	mov    DWORD PTR [eax],edx
c000a998:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c000a99b:	eb b3                	jmp    c000a950 <VAS::scanForEviction()+0x40>
c000a99d:	83 c4 10             	add    esp,0x10
c000a9a0:	31 c0                	xor    eax,eax
c000a9a2:	5b                   	pop    ebx
c000a9a3:	5e                   	pop    esi
c000a9a4:	5f                   	pop    edi
c000a9a5:	c3                   	ret    
c000a9a6:	83 ec 08             	sub    esp,0x8
c000a9a9:	89 d0                	mov    eax,edx
c000a9ab:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a9b0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000a9b4:	53                   	push   ebx
c000a9b5:	68 06 db 01 c0       	push   0xc001db06
c000a9ba:	e8 31 02 00 00       	call   c000abf0 <Dbg::kprintf(char const*, ...)>
c000a9bf:	58                   	pop    eax
c000a9c0:	8b 4e 08             	mov    ecx,DWORD PTR [esi+0x8]
c000a9c3:	5a                   	pop    edx
c000a9c4:	51                   	push   ecx
c000a9c5:	56                   	push   esi
c000a9c6:	e8 95 fd ff ff       	call   c000a760 <VAS::evict(unsigned long)>
c000a9cb:	5b                   	pop    ebx
c000a9cc:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000a9cf:	5f                   	pop    edi
c000a9d0:	50                   	push   eax
c000a9d1:	68 1a db 01 c0       	push   0xc001db1a
c000a9d6:	e8 15 02 00 00       	call   c000abf0 <Dbg::kprintf(char const*, ...)>
c000a9db:	81 46 08 00 10 00 00 	add    DWORD PTR [esi+0x8],0x1000
c000a9e2:	83 c4 10             	add    esp,0x10
c000a9e5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a9e9:	83 c4 10             	add    esp,0x10
c000a9ec:	5b                   	pop    ebx
c000a9ed:	5e                   	pop    esi
c000a9ee:	5f                   	pop    edi
c000a9ef:	c3                   	ret    

c000a9f0 <mapVASFirstTime>:
c000a9f0:	55                   	push   ebp
c000a9f1:	57                   	push   edi
c000a9f2:	56                   	push   esi
c000a9f3:	53                   	push   ebx
c000a9f4:	83 ec 0c             	sub    esp,0xc
c000a9f7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000a9fc:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000a9ff:	4a                   	dec    edx
c000aa00:	0f 84 8c 00 00 00    	je     c000aa92 <mapVASFirstTime+0xa2>
c000aa06:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c000aa09:	8b 68 38             	mov    ebp,DWORD PTR [eax+0x38]
c000aa0c:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c000aa11:	c1 e5 15             	shl    ebp,0x15
c000aa14:	bf 00 90 e7 01       	mov    edi,0x1e79000
c000aa19:	8b b2 12 05 00 00    	mov    esi,DWORD PTR [edx+0x512]
c000aa1f:	29 eb                	sub    ebx,ebp
c000aa21:	29 ef                	sub    edi,ebp
c000aa23:	e8 06 d8 ff ff       	call   c000822e <Phys::allocatePage()>
c000aa28:	83 ec 0c             	sub    esp,0xc
c000aa2b:	68 03 04 00 00       	push   0x403
c000aa30:	6a 01                	push   0x1
c000aa32:	53                   	push   ebx
c000aa33:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000aa39:	50                   	push   eax
c000aa3a:	56                   	push   esi
c000aa3b:	e8 ec f8 ff ff       	call   c000a32c <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000aa40:	83 c4 20             	add    esp,0x20
c000aa43:	39 fb                	cmp    ebx,edi
c000aa45:	75 dc                	jne    c000aa23 <mapVASFirstTime+0x33>
c000aa47:	bb 00 f0 ff 01       	mov    ebx,0x1fff000
c000aa4c:	bf 00 f0 fd 01       	mov    edi,0x1fdf000
c000aa51:	29 eb                	sub    ebx,ebp
c000aa53:	29 ef                	sub    edi,ebp
c000aa55:	e8 d4 d7 ff ff       	call   c000822e <Phys::allocatePage()>
c000aa5a:	80 7e 01 01          	cmp    BYTE PTR [esi+0x1],0x1
c000aa5e:	19 d2                	sbb    edx,edx
c000aa60:	83 ec 0c             	sub    esp,0xc
c000aa63:	83 e2 04             	and    edx,0x4
c000aa66:	81 c2 03 04 00 00    	add    edx,0x403
c000aa6c:	52                   	push   edx
c000aa6d:	6a 01                	push   0x1
c000aa6f:	53                   	push   ebx
c000aa70:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000aa76:	50                   	push   eax
c000aa77:	56                   	push   esi
c000aa78:	e8 af f8 ff ff       	call   c000a32c <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000aa7d:	83 c4 20             	add    esp,0x20
c000aa80:	39 df                	cmp    edi,ebx
c000aa82:	75 d1                	jne    c000aa55 <mapVASFirstTime+0x65>
c000aa84:	0f 20 d8             	mov    eax,cr3
c000aa87:	0f 22 d8             	mov    cr3,eax
c000aa8a:	83 c4 0c             	add    esp,0xc
c000aa8d:	5b                   	pop    ebx
c000aa8e:	5e                   	pop    esi
c000aa8f:	5f                   	pop    edi
c000aa90:	5d                   	pop    ebp
c000aa91:	c3                   	ret    
c000aa92:	83 ec 0c             	sub    esp,0xc
c000aa95:	68 2d db 01 c0       	push   0xc001db2d
c000aa9a:	e8 51 01 00 00       	call   c000abf0 <Dbg::kprintf(char const*, ...)>
c000aa9f:	83 c4 10             	add    esp,0x10
c000aaa2:	83 c4 0c             	add    esp,0xc
c000aaa5:	5b                   	pop    ebx
c000aaa6:	5e                   	pop    esi
c000aaa7:	5f                   	pop    edi
c000aaa8:	5d                   	pop    ebp
c000aaa9:	c3                   	ret    

c000aaaa <__cxa_atexit>:
c000aaaa:	31 c0                	xor    eax,eax
c000aaac:	c3                   	ret    

c000aaad <__cxa_finalize>:
c000aaad:	c3                   	ret    

c000aaae <__stack_chk_fail>:
c000aaae:	55                   	push   ebp
c000aaaf:	89 e5                	mov    ebp,esp
c000aab1:	83 ec 10             	sub    esp,0x10
c000aab4:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000aab7:	68 46 db 01 c0       	push   0xc001db46
c000aabc:	e8 2f 01 00 00       	call   c000abf0 <Dbg::kprintf(char const*, ...)>
c000aac1:	58                   	pop    eax
c000aac2:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000aac5:	5a                   	pop    edx
c000aac6:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000aac9:	68 46 db 01 c0       	push   0xc001db46
c000aace:	e8 1d 01 00 00       	call   c000abf0 <Dbg::kprintf(char const*, ...)>
c000aad3:	c7 04 24 4e db 01 c0 	mov    DWORD PTR [esp],0xc001db4e
c000aada:	e8 60 5c 00 00       	call   c001073f <Krnl::panic(char const*)>
c000aadf:	83 c4 10             	add    esp,0x10
c000aae2:	c9                   	leave  
c000aae3:	c3                   	ret    

c000aae4 <__cxa_pure_virtual>:
c000aae4:	83 ec 18             	sub    esp,0x18
c000aae7:	68 66 db 01 c0       	push   0xc001db66
c000aaec:	e8 4e 5c 00 00       	call   c001073f <Krnl::panic(char const*)>
c000aaf1:	83 c4 1c             	add    esp,0x1c
c000aaf4:	c3                   	ret    

c000aaf5 <operator new[](unsigned long)>:
c000aaf5:	e9 67 d3 ff ff       	jmp    c0007e61 <malloc>

c000aafa <operator delete(void*, unsigned long)>:
c000aafa:	e9 82 d3 ff ff       	jmp    c0007e81 <rfree>

c000aaff <operator delete[](void*)>:
c000aaff:	e9 7d d3 ff ff       	jmp    c0007e81 <rfree>

c000ab04 <operator delete[](void*, unsigned long)>:
c000ab04:	e9 78 d3 ff ff       	jmp    c0007e81 <rfree>

c000ab09 <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c000ab09:	55                   	push   ebp
c000ab0a:	b9 04 00 00 00       	mov    ecx,0x4
c000ab0f:	57                   	push   edi
c000ab10:	56                   	push   esi
c000ab11:	be 7b d7 01 c0       	mov    esi,0xc001d77b
c000ab16:	53                   	push   ebx
c000ab17:	83 ec 20             	sub    esp,0x20
c000ab1a:	a1 7a d7 01 c0       	mov    eax,ds:0xc001d77a
c000ab1f:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000ab23:	89 44 24 0f          	mov    DWORD PTR [esp+0xf],eax
c000ab27:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000ab2b:	a1 87 d7 01 c0       	mov    eax,ds:0xc001d787
c000ab30:	8d 7c 24 10          	lea    edi,[esp+0x10]
c000ab34:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000ab38:	fc                   	cld    
c000ab39:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000ab3b:	89 ee                	mov    esi,ebp
c000ab3d:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000ab41:	eb 02                	jmp    c000ab45 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3c>
c000ab43:	89 c6                	mov    esi,eax
c000ab45:	31 d2                	xor    edx,edx
c000ab47:	41                   	inc    ecx
c000ab48:	89 f0                	mov    eax,esi
c000ab4a:	f7 f3                	div    ebx
c000ab4c:	39 de                	cmp    esi,ebx
c000ab4e:	73 f3                	jae    c000ab43 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3a>
c000ab50:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000ab53:	eb 02                	jmp    c000ab57 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x4e>
c000ab55:	89 c5                	mov    ebp,eax
c000ab57:	31 d2                	xor    edx,edx
c000ab59:	49                   	dec    ecx
c000ab5a:	89 e8                	mov    eax,ebp
c000ab5c:	f7 f3                	div    ebx
c000ab5e:	39 dd                	cmp    ebp,ebx
c000ab60:	8a 54 14 0f          	mov    dl,BYTE PTR [esp+edx*1+0xf]
c000ab64:	88 11                	mov    BYTE PTR [ecx],dl
c000ab66:	73 ed                	jae    c000ab55 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x4c>
c000ab68:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000ab6c:	83 c4 20             	add    esp,0x20
c000ab6f:	5b                   	pop    ebx
c000ab70:	5e                   	pop    esi
c000ab71:	5f                   	pop    edi
c000ab72:	5d                   	pop    ebp
c000ab73:	c3                   	ret    

c000ab74 <Dbg::logc(char)>:
c000ab74:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000ab78:	f6 05 5c 08 02 c0 10 	test   BYTE PTR ds:0xc002085c,0x10
c000ab7f:	75 12                	jne    c000ab93 <Dbg::logc(char)+0x1f>
c000ab81:	ba fd 03 00 00       	mov    edx,0x3fd
c000ab86:	ec                   	in     al,dx
c000ab87:	a8 20                	test   al,0x20
c000ab89:	74 fb                	je     c000ab86 <Dbg::logc(char)+0x12>
c000ab8b:	ba f8 03 00 00       	mov    edx,0x3f8
c000ab90:	88 c8                	mov    al,cl
c000ab92:	ee                   	out    dx,al
c000ab93:	c3                   	ret    

c000ab94 <Dbg::logs(char*)>:
c000ab94:	53                   	push   ebx
c000ab95:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000ab99:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000ab9c:	84 c0                	test   al,al
c000ab9e:	74 0f                	je     c000abaf <Dbg::logs(char*)+0x1b>
c000aba0:	50                   	push   eax
c000aba1:	43                   	inc    ebx
c000aba2:	e8 cd ff ff ff       	call   c000ab74 <Dbg::logc(char)>
c000aba7:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000abaa:	5a                   	pop    edx
c000abab:	84 c0                	test   al,al
c000abad:	75 f1                	jne    c000aba0 <Dbg::logs(char*)+0xc>
c000abaf:	5b                   	pop    ebx
c000abb0:	c3                   	ret    

c000abb1 <Dbg::logWriteInt(unsigned int)>:
c000abb1:	83 ec 10             	sub    esp,0x10
c000abb4:	6a 0a                	push   0xa
c000abb6:	8d 44 24 08          	lea    eax,[esp+0x8]
c000abba:	50                   	push   eax
c000abbb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000abbf:	50                   	push   eax
c000abc0:	e8 44 ff ff ff       	call   c000ab09 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000abc5:	50                   	push   eax
c000abc6:	e8 c9 ff ff ff       	call   c000ab94 <Dbg::logs(char*)>
c000abcb:	83 c4 20             	add    esp,0x20
c000abce:	c3                   	ret    

c000abcf <Dbg::logWriteIntBase(unsigned int, int)>:
c000abcf:	83 ec 10             	sub    esp,0x10
c000abd2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000abd6:	50                   	push   eax
c000abd7:	8d 44 24 08          	lea    eax,[esp+0x8]
c000abdb:	50                   	push   eax
c000abdc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000abe0:	52                   	push   edx
c000abe1:	e8 23 ff ff ff       	call   c000ab09 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000abe6:	50                   	push   eax
c000abe7:	e8 a8 ff ff ff       	call   c000ab94 <Dbg::logs(char*)>
c000abec:	83 c4 20             	add    esp,0x20
c000abef:	c3                   	ret    

c000abf0 <Dbg::kprintf(char const*, ...)>:
c000abf0:	55                   	push   ebp
c000abf1:	57                   	push   edi
c000abf2:	56                   	push   esi
c000abf3:	53                   	push   ebx
c000abf4:	83 ec 0c             	sub    esp,0xc
c000abf7:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000abfb:	f6 05 5c 08 02 c0 10 	test   BYTE PTR ds:0xc002085c,0x10
c000ac02:	74 08                	je     c000ac0c <Dbg::kprintf(char const*, ...)+0x1c>
c000ac04:	83 c4 0c             	add    esp,0xc
c000ac07:	5b                   	pop    ebx
c000ac08:	5e                   	pop    esi
c000ac09:	5f                   	pop    edi
c000ac0a:	5d                   	pop    ebp
c000ac0b:	c3                   	ret    
c000ac0c:	8d 44 24 24          	lea    eax,[esp+0x24]
c000ac10:	31 ff                	xor    edi,edi
c000ac12:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000ac16:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000ac19:	84 c0                	test   al,al
c000ac1b:	74 e7                	je     c000ac04 <Dbg::kprintf(char const*, ...)+0x14>
c000ac1d:	8d 77 01             	lea    esi,[edi+0x1]
c000ac20:	3c 25                	cmp    al,0x25
c000ac22:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c000ac25:	75 47                	jne    c000ac6e <Dbg::kprintf(char const*, ...)+0x7e>
c000ac27:	83 c7 02             	add    edi,0x2
c000ac2a:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000ac2d:	8d 34 3b             	lea    esi,[ebx+edi*1]
c000ac30:	83 e8 25             	sub    eax,0x25
c000ac33:	3c 53                	cmp    al,0x53
c000ac35:	0f 87 d2 00 00 00    	ja     c000ad0d <Dbg::kprintf(char const*, ...)+0x11d>
c000ac3b:	25 ff 00 00 00       	and    eax,0xff
c000ac40:	ff 24 85 7c db 01 c0 	jmp    DWORD PTR [eax*4-0x3ffe2484]
c000ac47:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000ac4b:	89 c8                	mov    eax,ecx
c000ac4d:	83 c1 04             	add    ecx,0x4
c000ac50:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000ac54:	8b 28                	mov    ebp,DWORD PTR [eax]
c000ac56:	55                   	push   ebp
c000ac57:	e8 55 ff ff ff       	call   c000abb1 <Dbg::logWriteInt(unsigned int)>
c000ac5c:	58                   	pop    eax
c000ac5d:	0f be 06             	movsx  eax,BYTE PTR [esi]
c000ac60:	84 c0                	test   al,al
c000ac62:	74 a0                	je     c000ac04 <Dbg::kprintf(char const*, ...)+0x14>
c000ac64:	8d 77 01             	lea    esi,[edi+0x1]
c000ac67:	3c 25                	cmp    al,0x25
c000ac69:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c000ac6c:	74 b9                	je     c000ac27 <Dbg::kprintf(char const*, ...)+0x37>
c000ac6e:	50                   	push   eax
c000ac6f:	89 f7                	mov    edi,esi
c000ac71:	e8 fe fe ff ff       	call   c000ab74 <Dbg::logc(char)>
c000ac76:	89 ee                	mov    esi,ebp
c000ac78:	58                   	pop    eax
c000ac79:	eb e2                	jmp    c000ac5d <Dbg::kprintf(char const*, ...)+0x6d>
c000ac7b:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000ac7f:	89 c8                	mov    eax,ecx
c000ac81:	83 c1 04             	add    ecx,0x4
c000ac84:	8b 00                	mov    eax,DWORD PTR [eax]
c000ac86:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000ac8a:	50                   	push   eax
c000ac8b:	e8 04 ff ff ff       	call   c000ab94 <Dbg::logs(char*)>
c000ac90:	58                   	pop    eax
c000ac91:	eb ca                	jmp    c000ac5d <Dbg::kprintf(char const*, ...)+0x6d>
c000ac93:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000ac97:	89 d0                	mov    eax,edx
c000ac99:	83 c2 04             	add    edx,0x4
c000ac9c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aca0:	8b 00                	mov    eax,DWORD PTR [eax]
c000aca2:	50                   	push   eax
c000aca3:	e8 09 ff ff ff       	call   c000abb1 <Dbg::logWriteInt(unsigned int)>
c000aca8:	58                   	pop    eax
c000aca9:	eb b2                	jmp    c000ac5d <Dbg::kprintf(char const*, ...)+0x6d>
c000acab:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000acaf:	89 d0                	mov    eax,edx
c000acb1:	83 c2 04             	add    edx,0x4
c000acb4:	0f be 00             	movsx  eax,BYTE PTR [eax]
c000acb7:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000acbb:	50                   	push   eax
c000acbc:	e8 b3 fe ff ff       	call   c000ab74 <Dbg::logc(char)>
c000acc1:	58                   	pop    eax
c000acc2:	eb 99                	jmp    c000ac5d <Dbg::kprintf(char const*, ...)+0x6d>
c000acc4:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000acc8:	89 c8                	mov    eax,ecx
c000acca:	83 c1 04             	add    ecx,0x4
c000accd:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000acd1:	6a 10                	push   0x10
c000acd3:	8b 08                	mov    ecx,DWORD PTR [eax]
c000acd5:	51                   	push   ecx
c000acd6:	e8 f4 fe ff ff       	call   c000abcf <Dbg::logWriteIntBase(unsigned int, int)>
c000acdb:	5d                   	pop    ebp
c000acdc:	58                   	pop    eax
c000acdd:	e9 7b ff ff ff       	jmp    c000ac5d <Dbg::kprintf(char const*, ...)+0x6d>
c000ace2:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000ace6:	89 d0                	mov    eax,edx
c000ace8:	83 c2 08             	add    edx,0x8
c000aceb:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000acef:	6a 10                	push   0x10
c000acf1:	8b 00                	mov    eax,DWORD PTR [eax]
c000acf3:	50                   	push   eax
c000acf4:	e8 d6 fe ff ff       	call   c000abcf <Dbg::logWriteIntBase(unsigned int, int)>
c000acf9:	58                   	pop    eax
c000acfa:	5a                   	pop    edx
c000acfb:	e9 5d ff ff ff       	jmp    c000ac5d <Dbg::kprintf(char const*, ...)+0x6d>
c000ad00:	6a 25                	push   0x25
c000ad02:	e8 6d fe ff ff       	call   c000ab74 <Dbg::logc(char)>
c000ad07:	5a                   	pop    edx
c000ad08:	e9 50 ff ff ff       	jmp    c000ac5d <Dbg::kprintf(char const*, ...)+0x6d>
c000ad0d:	6a 25                	push   0x25
c000ad0f:	e8 60 fe ff ff       	call   c000ab74 <Dbg::logc(char)>
c000ad14:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c000ad18:	50                   	push   eax
c000ad19:	e8 56 fe ff ff       	call   c000ab74 <Dbg::logc(char)>
c000ad1e:	5a                   	pop    edx
c000ad1f:	59                   	pop    ecx
c000ad20:	e9 38 ff ff ff       	jmp    c000ac5d <Dbg::kprintf(char const*, ...)+0x6d>
c000ad25:	90                   	nop

c000ad26 <File::read(unsigned long long, void*, int*)>:
c000ad26:	53                   	push   ebx
c000ad27:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ad2b:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000ad2f:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000ad36:	3c 19                	cmp    al,0x19
c000ad38:	77 35                	ja     c000ad6f <File::read(unsigned long long, void*, int*)+0x49>
c000ad3a:	8b 04 85 a0 2d 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd260]
c000ad41:	85 c0                	test   eax,eax
c000ad43:	74 2a                	je     c000ad6f <File::read(unsigned long long, void*, int*)+0x49>
c000ad45:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000ad4b:	85 c0                	test   eax,eax
c000ad4d:	74 20                	je     c000ad6f <File::read(unsigned long long, void*, int*)+0x49>
c000ad4f:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000ad53:	74 21                	je     c000ad76 <File::read(unsigned long long, void*, int*)+0x50>
c000ad55:	8b 08                	mov    ecx,DWORD PTR [eax]
c000ad57:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000ad5b:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000ad61:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ad65:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ad69:	5b                   	pop    ebx
c000ad6a:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c000ad6d:	ff e0                	jmp    eax
c000ad6f:	b8 0b 00 00 00       	mov    eax,0xb
c000ad74:	eb 05                	jmp    c000ad7b <File::read(unsigned long long, void*, int*)+0x55>
c000ad76:	b8 05 00 00 00       	mov    eax,0x5
c000ad7b:	5b                   	pop    ebx
c000ad7c:	c3                   	ret    
c000ad7d:	90                   	nop

c000ad7e <File::write(unsigned long long, void*, int*)>:
c000ad7e:	53                   	push   ebx
c000ad7f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ad83:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000ad87:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000ad8e:	3c 19                	cmp    al,0x19
c000ad90:	77 35                	ja     c000adc7 <File::write(unsigned long long, void*, int*)+0x49>
c000ad92:	8b 04 85 a0 2d 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd260]
c000ad99:	85 c0                	test   eax,eax
c000ad9b:	74 2a                	je     c000adc7 <File::write(unsigned long long, void*, int*)+0x49>
c000ad9d:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000ada3:	85 c0                	test   eax,eax
c000ada5:	74 20                	je     c000adc7 <File::write(unsigned long long, void*, int*)+0x49>
c000ada7:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000adab:	74 21                	je     c000adce <File::write(unsigned long long, void*, int*)+0x50>
c000adad:	8b 08                	mov    ecx,DWORD PTR [eax]
c000adaf:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000adb3:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000adb9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000adbd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000adc1:	5b                   	pop    ebx
c000adc2:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c000adc5:	ff e0                	jmp    eax
c000adc7:	b8 0b 00 00 00       	mov    eax,0xb
c000adcc:	eb 05                	jmp    c000add3 <File::write(unsigned long long, void*, int*)+0x55>
c000adce:	b8 05 00 00 00       	mov    eax,0x5
c000add3:	5b                   	pop    ebx
c000add4:	c3                   	ret    
c000add5:	90                   	nop

c000add6 <Directory::read(unsigned long long, void*, int*)>:
c000add6:	53                   	push   ebx
c000add7:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000addb:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000addf:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000ade6:	3c 19                	cmp    al,0x19
c000ade8:	77 35                	ja     c000ae1f <Directory::read(unsigned long long, void*, int*)+0x49>
c000adea:	8b 04 85 a0 2d 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd260]
c000adf1:	85 c0                	test   eax,eax
c000adf3:	74 2a                	je     c000ae1f <Directory::read(unsigned long long, void*, int*)+0x49>
c000adf5:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000adfb:	85 c0                	test   eax,eax
c000adfd:	74 20                	je     c000ae1f <Directory::read(unsigned long long, void*, int*)+0x49>
c000adff:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000ae03:	74 21                	je     c000ae26 <Directory::read(unsigned long long, void*, int*)+0x50>
c000ae05:	8b 08                	mov    ecx,DWORD PTR [eax]
c000ae07:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000ae0b:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000ae11:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ae15:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ae19:	5b                   	pop    ebx
c000ae1a:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c000ae1d:	ff e0                	jmp    eax
c000ae1f:	b8 0b 00 00 00       	mov    eax,0xb
c000ae24:	eb 05                	jmp    c000ae2b <Directory::read(unsigned long long, void*, int*)+0x55>
c000ae26:	b8 05 00 00 00       	mov    eax,0x5
c000ae2b:	5b                   	pop    ebx
c000ae2c:	c3                   	ret    
c000ae2d:	90                   	nop

c000ae2e <Directory::write(unsigned long long, void*, int*)>:
c000ae2e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ae32:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c000ae39:	b8 0b 00 00 00       	mov    eax,0xb
c000ae3e:	80 fa 19             	cmp    dl,0x19
c000ae41:	77 18                	ja     c000ae5b <Directory::write(unsigned long long, void*, int*)+0x2d>
c000ae43:	8b 14 95 a0 2d 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdd260]
c000ae4a:	85 d2                	test   edx,edx
c000ae4c:	74 0d                	je     c000ae5b <Directory::write(unsigned long long, void*, int*)+0x2d>
c000ae4e:	83 ba 70 01 00 00 01 	cmp    DWORD PTR [edx+0x170],0x1
c000ae55:	19 c0                	sbb    eax,eax
c000ae57:	83 e0 0a             	and    eax,0xa
c000ae5a:	40                   	inc    eax
c000ae5b:	c3                   	ret    

c000ae5c <File::isAtty()>:
c000ae5c:	31 c0                	xor    eax,eax
c000ae5e:	c3                   	ret    
c000ae5f:	90                   	nop

c000ae60 <Directory::isAtty()>:
c000ae60:	31 c0                	xor    eax,eax
c000ae62:	c3                   	ret    
c000ae63:	90                   	nop

c000ae64 <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c000ae64:	b8 0a 00 00 00       	mov    eax,0xa
c000ae69:	c3                   	ret    

c000ae6a <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c000ae6a:	b8 0a 00 00 00       	mov    eax,0xa
c000ae6f:	c3                   	ret    

c000ae70 <Filesystem::allocateSwapfile(char const*, int)>:
c000ae70:	31 c0                	xor    eax,eax
c000ae72:	31 d2                	xor    edx,edx
c000ae74:	c3                   	ret    
c000ae75:	90                   	nop

c000ae76 <File::~File()>:
c000ae76:	83 ec 0c             	sub    esp,0xc
c000ae79:	ba 3c dd 01 c0       	mov    edx,0xc001dd3c
c000ae7e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae82:	89 10                	mov    DWORD PTR [eax],edx
c000ae84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae88:	83 ec 0c             	sub    esp,0xc
c000ae8b:	50                   	push   eax
c000ae8c:	e8 ab e8 ff ff       	call   c000973c <UnixFile::~UnixFile()>
c000ae91:	83 c4 10             	add    esp,0x10
c000ae94:	90                   	nop
c000ae95:	83 c4 0c             	add    esp,0xc
c000ae98:	c3                   	ret    
c000ae99:	90                   	nop

c000ae9a <File::~File()>:
c000ae9a:	83 ec 0c             	sub    esp,0xc
c000ae9d:	83 ec 0c             	sub    esp,0xc
c000aea0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000aea4:	e8 cd ff ff ff       	call   c000ae76 <File::~File()>
c000aea9:	83 c4 10             	add    esp,0x10
c000aeac:	83 ec 08             	sub    esp,0x8
c000aeaf:	68 14 01 00 00       	push   0x114
c000aeb4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000aeb8:	e8 3d fc ff ff       	call   c000aafa <operator delete(void*, unsigned long)>
c000aebd:	83 c4 10             	add    esp,0x10
c000aec0:	83 c4 0c             	add    esp,0xc
c000aec3:	c3                   	ret    

c000aec4 <Directory::~Directory()>:
c000aec4:	83 ec 0c             	sub    esp,0xc
c000aec7:	ba 58 dd 01 c0       	mov    edx,0xc001dd58
c000aecc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aed0:	89 10                	mov    DWORD PTR [eax],edx
c000aed2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aed6:	83 ec 0c             	sub    esp,0xc
c000aed9:	50                   	push   eax
c000aeda:	e8 5d e8 ff ff       	call   c000973c <UnixFile::~UnixFile()>
c000aedf:	83 c4 10             	add    esp,0x10
c000aee2:	90                   	nop
c000aee3:	83 c4 0c             	add    esp,0xc
c000aee6:	c3                   	ret    
c000aee7:	90                   	nop

c000aee8 <Directory::~Directory()>:
c000aee8:	83 ec 0c             	sub    esp,0xc
c000aeeb:	83 ec 0c             	sub    esp,0xc
c000aeee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000aef2:	e8 cd ff ff ff       	call   c000aec4 <Directory::~Directory()>
c000aef7:	83 c4 10             	add    esp,0x10
c000aefa:	83 ec 08             	sub    esp,0x8
c000aefd:	68 14 01 00 00       	push   0x114
c000af02:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000af06:	e8 ef fb ff ff       	call   c000aafa <operator delete(void*, unsigned long)>
c000af0b:	83 c4 10             	add    esp,0x10
c000af0e:	83 c4 0c             	add    esp,0xc
c000af11:	c3                   	ret    

c000af12 <Filesystem::Filesystem()>:
c000af12:	ba d4 dc 01 c0       	mov    edx,0xc001dcd4
c000af17:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000af1b:	89 10                	mov    DWORD PTR [eax],edx
c000af1d:	8b 15 34 09 02 c0    	mov    edx,DWORD PTR ds:0xc0020934
c000af23:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000af27:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000af2a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000af2e:	a3 34 09 02 c0       	mov    ds:0xc0020934,eax
c000af33:	90                   	nop
c000af34:	c3                   	ret    
c000af35:	90                   	nop

c000af36 <Filesystem::~Filesystem()>:
c000af36:	ba d4 dc 01 c0       	mov    edx,0xc001dcd4
c000af3b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000af3f:	89 10                	mov    DWORD PTR [eax],edx
c000af41:	90                   	nop
c000af42:	c3                   	ret    
c000af43:	90                   	nop

c000af44 <Filesystem::~Filesystem()>:
c000af44:	83 ec 0c             	sub    esp,0xc
c000af47:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000af4b:	e8 e6 ff ff ff       	call   c000af36 <Filesystem::~Filesystem()>
c000af50:	83 c4 04             	add    esp,0x4
c000af53:	83 ec 08             	sub    esp,0x8
c000af56:	6a 08                	push   0x8
c000af58:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000af5c:	e8 99 fb ff ff       	call   c000aafa <operator delete(void*, unsigned long)>
c000af61:	83 c4 10             	add    esp,0x10
c000af64:	83 c4 0c             	add    esp,0xc
c000af67:	c3                   	ret    

c000af68 <Fs::getcwd(Process*, char*, int)>:
c000af68:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000af6c:	31 c0                	xor    eax,eax
c000af6e:	8d 0c 02             	lea    ecx,[edx+eax*1]
c000af71:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000af75:	7d 15                	jge    c000af8c <Fs::getcwd(Process*, char*, int)+0x24>
c000af77:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000af7b:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c000af82:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c000af85:	84 c9                	test   cl,cl
c000af87:	74 06                	je     c000af8f <Fs::getcwd(Process*, char*, int)+0x27>
c000af89:	40                   	inc    eax
c000af8a:	eb e2                	jmp    c000af6e <Fs::getcwd(Process*, char*, int)+0x6>
c000af8c:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000af8f:	31 c0                	xor    eax,eax
c000af91:	c3                   	ret    

c000af92 <Fs::initVFS()>:
c000af92:	83 ec 18             	sub    esp,0x18
c000af95:	6a 08                	push   0x8
c000af97:	e8 c5 ce ff ff       	call   c0007e61 <malloc>
c000af9c:	89 04 24             	mov    DWORD PTR [esp],eax
c000af9f:	e8 a4 c2 00 00       	call   c0017248 <FAT::FAT()>
c000afa4:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000afab:	e8 b1 ce ff ff       	call   c0007e61 <malloc>
c000afb0:	89 04 24             	mov    DWORD PTR [esp],eax
c000afb3:	e8 1a ce 00 00       	call   c0017dd2 <ISO9660::ISO9660()>
c000afb8:	83 c4 1c             	add    esp,0x1c
c000afbb:	c3                   	ret    

c000afbc <Fs::standardiseFiles(char*, char const*, char const*)>:
c000afbc:	55                   	push   ebp
c000afbd:	57                   	push   edi
c000afbe:	56                   	push   esi
c000afbf:	53                   	push   ebx
c000afc0:	81 ec 10 04 00 00    	sub    esp,0x410
c000afc6:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c000afcd:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c000afd4:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c000afdb:	68 00 04 00 00       	push   0x400
c000afe0:	6a 00                	push   0x0
c000afe2:	8d 74 24 0c          	lea    esi,[esp+0xc]
c000afe6:	56                   	push   esi
c000afe7:	e8 04 55 ff ff       	call   c00004f0 <memset>
c000afec:	83 c4 10             	add    esp,0x10
c000afef:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c000aff3:	75 0b                	jne    c000b000 <Fs::standardiseFiles(char*, char const*, char const*)+0x44>
c000aff5:	50                   	push   eax
c000aff6:	50                   	push   eax
c000aff7:	57                   	push   edi
c000aff8:	56                   	push   esi
c000aff9:	e8 22 56 ff ff       	call   c0000620 <strcpy>
c000affe:	eb 41                	jmp    c000b041 <Fs::standardiseFiles(char*, char const*, char const*)+0x85>
c000b000:	8a 07                	mov    al,BYTE PTR [edi]
c000b002:	3c 5c                	cmp    al,0x5c
c000b004:	74 04                	je     c000b00a <Fs::standardiseFiles(char*, char const*, char const*)+0x4e>
c000b006:	3c 2f                	cmp    al,0x2f
c000b008:	75 18                	jne    c000b022 <Fs::standardiseFiles(char*, char const*, char const*)+0x66>
c000b00a:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000b00d:	3c 60                	cmp    al,0x60
c000b00f:	7e 03                	jle    c000b014 <Fs::standardiseFiles(char*, char const*, char const*)+0x58>
c000b011:	83 e8 20             	sub    eax,0x20
c000b014:	88 04 24             	mov    BYTE PTR [esp],al
c000b017:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000b01e:	50                   	push   eax
c000b01f:	50                   	push   eax
c000b020:	eb 18                	jmp    c000b03a <Fs::standardiseFiles(char*, char const*, char const*)+0x7e>
c000b022:	50                   	push   eax
c000b023:	50                   	push   eax
c000b024:	55                   	push   ebp
c000b025:	56                   	push   esi
c000b026:	e8 f5 55 ff ff       	call   c0000620 <strcpy>
c000b02b:	5a                   	pop    edx
c000b02c:	59                   	pop    ecx
c000b02d:	68 7f e9 01 c0       	push   0xc001e97f
c000b032:	56                   	push   esi
c000b033:	e8 a8 57 ff ff       	call   c00007e0 <strcat>
c000b038:	5d                   	pop    ebp
c000b039:	58                   	pop    eax
c000b03a:	57                   	push   edi
c000b03b:	56                   	push   esi
c000b03c:	e8 9f 57 ff ff       	call   c00007e0 <strcat>
c000b041:	83 c4 10             	add    esp,0x10
c000b044:	8a 04 24             	mov    al,BYTE PTR [esp]
c000b047:	3c 60                	cmp    al,0x60
c000b049:	7e 03                	jle    c000b04e <Fs::standardiseFiles(char*, char const*, char const*)+0x92>
c000b04b:	83 e8 20             	sub    eax,0x20
c000b04e:	88 04 24             	mov    BYTE PTR [esp],al
c000b051:	88 03                	mov    BYTE PTR [ebx],al
c000b053:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000b05a:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c000b060:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c000b064:	bf 03 00 00 00       	mov    edi,0x3
c000b069:	b8 03 00 00 00       	mov    eax,0x3
c000b06e:	8a 14 3c             	mov    dl,BYTE PTR [esp+edi*1]
c000b071:	84 d2                	test   dl,dl
c000b073:	0f 84 91 00 00 00    	je     c000b10a <Fs::standardiseFiles(char*, char const*, char const*)+0x14e>
c000b079:	8d 4f 01             	lea    ecx,[edi+0x1]
c000b07c:	80 fa 5c             	cmp    dl,0x5c
c000b07f:	74 05                	je     c000b086 <Fs::standardiseFiles(char*, char const*, char const*)+0xca>
c000b081:	80 fa 2f             	cmp    dl,0x2f
c000b084:	75 12                	jne    c000b098 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c000b086:	89 c5                	mov    ebp,eax
c000b088:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000b08d:	74 09                	je     c000b098 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c000b08f:	40                   	inc    eax
c000b090:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c000b094:	89 cf                	mov    edi,ecx
c000b096:	eb d6                	jmp    c000b06e <Fs::standardiseFiles(char*, char const*, char const*)+0xb2>
c000b098:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c000b09d:	75 5b                	jne    c000b0fa <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c000b09f:	80 fa 2e             	cmp    dl,0x2e
c000b0a2:	75 56                	jne    c000b0fa <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c000b0a4:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c000b0a8:	74 19                	je     c000b0c3 <Fs::standardiseFiles(char*, char const*, char const*)+0x107>
c000b0aa:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c000b0af:	74 53                	je     c000b104 <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c000b0b1:	89 f9                	mov    ecx,edi
c000b0b3:	41                   	inc    ecx
c000b0b4:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c000b0b7:	80 fa 2f             	cmp    dl,0x2f
c000b0ba:	74 f7                	je     c000b0b3 <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c000b0bc:	80 fa 5c             	cmp    dl,0x5c
c000b0bf:	74 f2                	je     c000b0b3 <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c000b0c1:	eb d1                	jmp    c000b094 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000b0c3:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c000b0c8:	74 3a                	je     c000b104 <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c000b0ca:	83 f8 03             	cmp    eax,0x3
c000b0cd:	74 c5                	je     c000b094 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000b0cf:	41                   	inc    ecx
c000b0d0:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c000b0d3:	80 fa 2f             	cmp    dl,0x2f
c000b0d6:	74 f7                	je     c000b0cf <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c000b0d8:	80 fa 5c             	cmp    dl,0x5c
c000b0db:	74 f2                	je     c000b0cf <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c000b0dd:	48                   	dec    eax
c000b0de:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000b0e2:	75 06                	jne    c000b0ea <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c000b0e4:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000b0e8:	eb f3                	jmp    c000b0dd <Fs::standardiseFiles(char*, char const*, char const*)+0x121>
c000b0ea:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000b0ee:	74 07                	je     c000b0f7 <Fs::standardiseFiles(char*, char const*, char const*)+0x13b>
c000b0f0:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000b0f4:	48                   	dec    eax
c000b0f5:	eb f3                	jmp    c000b0ea <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c000b0f7:	40                   	inc    eax
c000b0f8:	eb 9a                	jmp    c000b094 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000b0fa:	80 fa 2f             	cmp    dl,0x2f
c000b0fd:	74 95                	je     c000b094 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000b0ff:	80 fa 5c             	cmp    dl,0x5c
c000b102:	74 90                	je     c000b094 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000b104:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c000b107:	40                   	inc    eax
c000b108:	eb 8a                	jmp    c000b094 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000b10a:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000b10e:	83 ec 0c             	sub    esp,0xc
c000b111:	53                   	push   ebx
c000b112:	e8 49 54 ff ff       	call   c0000560 <strlen>
c000b117:	83 c4 10             	add    esp,0x10
c000b11a:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c000b11f:	75 26                	jne    c000b147 <Fs::standardiseFiles(char*, char const*, char const*)+0x18b>
c000b121:	83 ec 0c             	sub    esp,0xc
c000b124:	53                   	push   ebx
c000b125:	e8 36 54 ff ff       	call   c0000560 <strlen>
c000b12a:	83 c4 10             	add    esp,0x10
c000b12d:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c000b132:	74 26                	je     c000b15a <Fs::standardiseFiles(char*, char const*, char const*)+0x19e>
c000b134:	83 ec 0c             	sub    esp,0xc
c000b137:	53                   	push   ebx
c000b138:	e8 23 54 ff ff       	call   c0000560 <strlen>
c000b13d:	83 c4 10             	add    esp,0x10
c000b140:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c000b145:	eb c7                	jmp    c000b10e <Fs::standardiseFiles(char*, char const*, char const*)+0x152>
c000b147:	83 ec 0c             	sub    esp,0xc
c000b14a:	53                   	push   ebx
c000b14b:	e8 10 54 ff ff       	call   c0000560 <strlen>
c000b150:	83 c4 10             	add    esp,0x10
c000b153:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000b158:	74 c7                	je     c000b121 <Fs::standardiseFiles(char*, char const*, char const*)+0x165>
c000b15a:	81 c4 0c 04 00 00    	add    esp,0x40c
c000b160:	5b                   	pop    ebx
c000b161:	5e                   	pop    esi
c000b162:	5f                   	pop    edi
c000b163:	5d                   	pop    ebp
c000b164:	c3                   	ret    
c000b165:	90                   	nop

c000b166 <File::File(char const*, Process*)>:
c000b166:	83 ec 0c             	sub    esp,0xc
c000b169:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b16d:	83 ec 08             	sub    esp,0x8
c000b170:	6a 00                	push   0x0
c000b172:	50                   	push   eax
c000b173:	e8 e2 e3 ff ff       	call   c000955a <UnixFile::UnixFile(int)>
c000b178:	83 c4 10             	add    esp,0x10
c000b17b:	ba 3c dd 01 c0       	mov    edx,0xc001dd3c
c000b180:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b184:	89 10                	mov    DWORD PTR [eax],edx
c000b186:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000b18a:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000b190:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b194:	83 c0 0d             	add    eax,0xd
c000b197:	83 ec 04             	sub    esp,0x4
c000b19a:	52                   	push   edx
c000b19b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b19f:	50                   	push   eax
c000b1a0:	e8 17 fe ff ff       	call   c000afbc <Fs::standardiseFiles(char*, char const*, char const*)>
c000b1a5:	83 c4 10             	add    esp,0x10
c000b1a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b1ac:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000b1af:	8d 50 bf             	lea    edx,[eax-0x41]
c000b1b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b1b6:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000b1bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b1c0:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000b1c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b1c8:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b1ce:	25 ff 00 00 00       	and    eax,0xff
c000b1d3:	8b 04 85 a0 2d 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd260]
c000b1da:	85 c0                	test   eax,eax
c000b1dc:	74 42                	je     c000b220 <File::File(char const*, Process*)+0xba>
c000b1de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b1e2:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b1e8:	25 ff 00 00 00       	and    eax,0xff
c000b1ed:	8b 04 85 a0 2d 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd260]
c000b1f4:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000b1fa:	85 c0                	test   eax,eax
c000b1fc:	75 22                	jne    c000b220 <File::File(char const*, Process*)+0xba>
c000b1fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b202:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b208:	25 ff 00 00 00       	and    eax,0xff
c000b20d:	8b 04 85 a0 2d 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd260]
c000b214:	83 ec 0c             	sub    esp,0xc
c000b217:	50                   	push   eax
c000b218:	e8 f9 1f 00 00       	call   c000d216 <LogicalDisk::mount()>
c000b21d:	83 c4 10             	add    esp,0x10
c000b220:	90                   	nop
c000b221:	83 c4 0c             	add    esp,0xc
c000b224:	c3                   	ret    
c000b225:	90                   	nop

c000b226 <File::open(FileOpenMode)>:
c000b226:	53                   	push   ebx
c000b227:	b8 0b 00 00 00       	mov    eax,0xb
c000b22c:	83 ec 08             	sub    esp,0x8
c000b22f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b233:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000b23a:	80 fa 19             	cmp    dl,0x19
c000b23d:	77 40                	ja     c000b27f <File::open(FileOpenMode)+0x59>
c000b23f:	8b 14 95 a0 2d 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdd260]
c000b246:	85 d2                	test   edx,edx
c000b248:	74 35                	je     c000b27f <File::open(FileOpenMode)+0x59>
c000b24a:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000b250:	85 d2                	test   edx,edx
c000b252:	74 2b                	je     c000b27f <File::open(FileOpenMode)+0x59>
c000b254:	b8 06 00 00 00       	mov    eax,0x6
c000b259:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000b25d:	75 20                	jne    c000b27f <File::open(FileOpenMode)+0x59>
c000b25f:	8b 02                	mov    eax,DWORD PTR [edx]
c000b261:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000b267:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b26b:	51                   	push   ecx
c000b26c:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000b26f:	51                   	push   ecx
c000b270:	52                   	push   edx
c000b271:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000b274:	83 c4 10             	add    esp,0x10
c000b277:	85 c0                	test   eax,eax
c000b279:	75 04                	jne    c000b27f <File::open(FileOpenMode)+0x59>
c000b27b:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000b27f:	83 c4 08             	add    esp,0x8
c000b282:	5b                   	pop    ebx
c000b283:	c3                   	ret    

c000b284 <File::close()>:
c000b284:	53                   	push   ebx
c000b285:	b8 0b 00 00 00       	mov    eax,0xb
c000b28a:	83 ec 08             	sub    esp,0x8
c000b28d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000b291:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000b298:	80 fa 19             	cmp    dl,0x19
c000b29b:	77 41                	ja     c000b2de <File::close()+0x5a>
c000b29d:	8b 1c 95 a0 2d 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffdd260]
c000b2a4:	85 db                	test   ebx,ebx
c000b2a6:	74 36                	je     c000b2de <File::close()+0x5a>
c000b2a8:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c000b2af:	74 2d                	je     c000b2de <File::close()+0x5a>
c000b2b1:	b8 05 00 00 00       	mov    eax,0x5
c000b2b6:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000b2ba:	74 22                	je     c000b2de <File::close()+0x5a>
c000b2bc:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c000b2c0:	8b 04 95 a0 2d 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdd260]
c000b2c7:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000b2cd:	53                   	push   ebx
c000b2ce:	53                   	push   ebx
c000b2cf:	8b 10                	mov    edx,DWORD PTR [eax]
c000b2d1:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000b2d7:	50                   	push   eax
c000b2d8:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c000b2db:	83 c4 10             	add    esp,0x10
c000b2de:	83 c4 08             	add    esp,0x8
c000b2e1:	5b                   	pop    ebx
c000b2e2:	c3                   	ret    
c000b2e3:	90                   	nop

c000b2e4 <File::seek(unsigned long long)>:
c000b2e4:	56                   	push   esi
c000b2e5:	53                   	push   ebx
c000b2e6:	b8 0b 00 00 00       	mov    eax,0xb
c000b2eb:	51                   	push   ecx
c000b2ec:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000b2f0:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000b2f4:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c000b2fb:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000b2ff:	80 fa 19             	cmp    dl,0x19
c000b302:	77 31                	ja     c000b335 <File::seek(unsigned long long)+0x51>
c000b304:	8b 14 95 a0 2d 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdd260]
c000b30b:	85 d2                	test   edx,edx
c000b30d:	74 26                	je     c000b335 <File::seek(unsigned long long)+0x51>
c000b30f:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000b315:	85 d2                	test   edx,edx
c000b317:	74 1c                	je     c000b335 <File::seek(unsigned long long)+0x51>
c000b319:	b8 05 00 00 00       	mov    eax,0x5
c000b31e:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c000b322:	74 11                	je     c000b335 <File::seek(unsigned long long)+0x51>
c000b324:	8b 02                	mov    eax,DWORD PTR [edx]
c000b326:	53                   	push   ebx
c000b327:	51                   	push   ecx
c000b328:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c000b32e:	52                   	push   edx
c000b32f:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000b332:	83 c4 10             	add    esp,0x10
c000b335:	5a                   	pop    edx
c000b336:	5b                   	pop    ebx
c000b337:	5e                   	pop    esi
c000b338:	c3                   	ret    
c000b339:	90                   	nop

c000b33a <File::tell(unsigned long long*)>:
c000b33a:	83 ec 0c             	sub    esp,0xc
c000b33d:	b8 0b 00 00 00       	mov    eax,0xb
c000b342:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000b346:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000b34d:	80 fa 19             	cmp    dl,0x19
c000b350:	77 34                	ja     c000b386 <File::tell(unsigned long long*)+0x4c>
c000b352:	8b 14 95 a0 2d 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdd260]
c000b359:	85 d2                	test   edx,edx
c000b35b:	74 29                	je     c000b386 <File::tell(unsigned long long*)+0x4c>
c000b35d:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000b363:	85 d2                	test   edx,edx
c000b365:	74 1f                	je     c000b386 <File::tell(unsigned long long*)+0x4c>
c000b367:	b8 05 00 00 00       	mov    eax,0x5
c000b36c:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000b370:	74 14                	je     c000b386 <File::tell(unsigned long long*)+0x4c>
c000b372:	50                   	push   eax
c000b373:	8b 02                	mov    eax,DWORD PTR [edx]
c000b375:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b379:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000b37f:	52                   	push   edx
c000b380:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000b383:	83 c4 10             	add    esp,0x10
c000b386:	83 c4 0c             	add    esp,0xc
c000b389:	c3                   	ret    

c000b38a <File::rewind()>:
c000b38a:	83 ec 10             	sub    esp,0x10
c000b38d:	6a 00                	push   0x0
c000b38f:	6a 00                	push   0x0
c000b391:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b395:	e8 4a ff ff ff       	call   c000b2e4 <File::seek(unsigned long long)>
c000b39a:	83 c4 1c             	add    esp,0x1c
c000b39d:	c3                   	ret    

c000b39e <File::unlink()>:
c000b39e:	83 ec 0c             	sub    esp,0xc
c000b3a1:	b8 0b 00 00 00       	mov    eax,0xb
c000b3a6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b3aa:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b3b1:	80 f9 19             	cmp    cl,0x19
c000b3b4:	77 2f                	ja     c000b3e5 <File::unlink()+0x47>
c000b3b6:	8b 0c 8d a0 2d 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdd260]
c000b3bd:	85 c9                	test   ecx,ecx
c000b3bf:	74 24                	je     c000b3e5 <File::unlink()+0x47>
c000b3c1:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000b3c7:	85 c9                	test   ecx,ecx
c000b3c9:	74 1a                	je     c000b3e5 <File::unlink()+0x47>
c000b3cb:	b8 06 00 00 00       	mov    eax,0x6
c000b3d0:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b3d4:	75 0f                	jne    c000b3e5 <File::unlink()+0x47>
c000b3d6:	83 c2 0d             	add    edx,0xd
c000b3d9:	50                   	push   eax
c000b3da:	50                   	push   eax
c000b3db:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b3dd:	52                   	push   edx
c000b3de:	51                   	push   ecx
c000b3df:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000b3e2:	83 c4 10             	add    esp,0x10
c000b3e5:	83 c4 0c             	add    esp,0xc
c000b3e8:	c3                   	ret    
c000b3e9:	90                   	nop

c000b3ea <File::rename(char const*)>:
c000b3ea:	83 ec 0c             	sub    esp,0xc
c000b3ed:	b8 0b 00 00 00       	mov    eax,0xb
c000b3f2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b3f6:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b3fd:	80 f9 19             	cmp    cl,0x19
c000b400:	77 32                	ja     c000b434 <File::rename(char const*)+0x4a>
c000b402:	8b 0c 8d a0 2d 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdd260]
c000b409:	85 c9                	test   ecx,ecx
c000b40b:	74 27                	je     c000b434 <File::rename(char const*)+0x4a>
c000b40d:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000b413:	85 c9                	test   ecx,ecx
c000b415:	74 1d                	je     c000b434 <File::rename(char const*)+0x4a>
c000b417:	b8 06 00 00 00       	mov    eax,0x6
c000b41c:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b420:	75 12                	jne    c000b434 <File::rename(char const*)+0x4a>
c000b422:	83 c2 0d             	add    edx,0xd
c000b425:	50                   	push   eax
c000b426:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b428:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b42c:	52                   	push   edx
c000b42d:	51                   	push   ecx
c000b42e:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000b431:	83 c4 10             	add    esp,0x10
c000b434:	83 c4 0c             	add    esp,0xc
c000b437:	c3                   	ret    

c000b438 <File::chfatattr(unsigned char, unsigned char)>:
c000b438:	57                   	push   edi
c000b439:	b8 0b 00 00 00       	mov    eax,0xb
c000b43e:	56                   	push   esi
c000b43f:	53                   	push   ebx
c000b440:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b444:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000b448:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b44f:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000b453:	80 f9 19             	cmp    cl,0x19
c000b456:	77 37                	ja     c000b48f <File::chfatattr(unsigned char, unsigned char)+0x57>
c000b458:	8b 0c 8d a0 2d 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdd260]
c000b45f:	85 c9                	test   ecx,ecx
c000b461:	74 2c                	je     c000b48f <File::chfatattr(unsigned char, unsigned char)+0x57>
c000b463:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000b469:	85 c9                	test   ecx,ecx
c000b46b:	74 22                	je     c000b48f <File::chfatattr(unsigned char, unsigned char)+0x57>
c000b46d:	b8 06 00 00 00       	mov    eax,0x6
c000b472:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b476:	75 17                	jne    c000b48f <File::chfatattr(unsigned char, unsigned char)+0x57>
c000b478:	8b 39                	mov    edi,DWORD PTR [ecx]
c000b47a:	89 f0                	mov    eax,esi
c000b47c:	83 c2 0d             	add    edx,0xd
c000b47f:	0f b6 f0             	movzx  esi,al
c000b482:	0f b6 db             	movzx  ebx,bl
c000b485:	56                   	push   esi
c000b486:	53                   	push   ebx
c000b487:	52                   	push   edx
c000b488:	51                   	push   ecx
c000b489:	ff 57 34             	call   DWORD PTR [edi+0x34]
c000b48c:	83 c4 10             	add    esp,0x10
c000b48f:	5b                   	pop    ebx
c000b490:	5e                   	pop    esi
c000b491:	5f                   	pop    edi
c000b492:	c3                   	ret    
c000b493:	90                   	nop

c000b494 <File::exists()>:
c000b494:	83 ec 0c             	sub    esp,0xc
c000b497:	31 c0                	xor    eax,eax
c000b499:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b49d:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b4a4:	80 f9 19             	cmp    cl,0x19
c000b4a7:	77 24                	ja     c000b4cd <File::exists()+0x39>
c000b4a9:	8b 0c 8d a0 2d 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdd260]
c000b4b0:	85 c9                	test   ecx,ecx
c000b4b2:	74 19                	je     c000b4cd <File::exists()+0x39>
c000b4b4:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000b4ba:	85 c9                	test   ecx,ecx
c000b4bc:	74 0f                	je     c000b4cd <File::exists()+0x39>
c000b4be:	83 c2 0d             	add    edx,0xd
c000b4c1:	50                   	push   eax
c000b4c2:	50                   	push   eax
c000b4c3:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b4c5:	52                   	push   edx
c000b4c6:	51                   	push   ecx
c000b4c7:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000b4ca:	83 c4 10             	add    esp,0x10
c000b4cd:	83 c4 0c             	add    esp,0xc
c000b4d0:	c3                   	ret    
c000b4d1:	90                   	nop

c000b4d2 <File::stat(unsigned long long*, bool*)>:
c000b4d2:	56                   	push   esi
c000b4d3:	53                   	push   ebx
c000b4d4:	50                   	push   eax
c000b4d5:	b8 0b 00 00 00       	mov    eax,0xb
c000b4da:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b4de:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000b4e2:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b4e9:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000b4ed:	80 f9 19             	cmp    cl,0x19
c000b4f0:	77 3d                	ja     c000b52f <File::stat(unsigned long long*, bool*)+0x5d>
c000b4f2:	8b 0c 8d a0 2d 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdd260]
c000b4f9:	85 c9                	test   ecx,ecx
c000b4fb:	74 32                	je     c000b52f <File::stat(unsigned long long*, bool*)+0x5d>
c000b4fd:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000b503:	85 c9                	test   ecx,ecx
c000b505:	74 28                	je     c000b52f <File::stat(unsigned long long*, bool*)+0x5d>
c000b507:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b509:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b50d:	74 13                	je     c000b522 <File::stat(unsigned long long*, bool*)+0x50>
c000b50f:	83 ec 04             	sub    esp,0x4
c000b512:	56                   	push   esi
c000b513:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000b519:	51                   	push   ecx
c000b51a:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c000b51d:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000b520:	eb 0a                	jmp    c000b52c <File::stat(unsigned long long*, bool*)+0x5a>
c000b522:	53                   	push   ebx
c000b523:	83 c2 0d             	add    edx,0xd
c000b526:	56                   	push   esi
c000b527:	52                   	push   edx
c000b528:	51                   	push   ecx
c000b529:	ff 50 30             	call   DWORD PTR [eax+0x30]
c000b52c:	83 c4 10             	add    esp,0x10
c000b52f:	5a                   	pop    edx
c000b530:	5b                   	pop    ebx
c000b531:	5e                   	pop    esi
c000b532:	c3                   	ret    

c000b533 <Fs::setcwd(Process*, char*)>:
c000b533:	55                   	push   ebp
c000b534:	57                   	push   edi
c000b535:	56                   	push   esi
c000b536:	53                   	push   ebx
c000b537:	81 ec 20 02 00 00    	sub    esp,0x220
c000b53d:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c000b544:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c000b54a:	57                   	push   edi
c000b54b:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c000b552:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c000b556:	56                   	push   esi
c000b557:	e8 60 fa ff ff       	call   c000afbc <Fs::standardiseFiles(char*, char const*, char const*)>
c000b55c:	89 34 24             	mov    DWORD PTR [esp],esi
c000b55f:	e8 fc 4f ff ff       	call   c0000560 <strlen>
c000b564:	83 c4 10             	add    esp,0x10
c000b567:	83 f8 02             	cmp    eax,0x2
c000b56a:	77 15                	ja     c000b581 <Fs::setcwd(Process*, char*)+0x4e>
c000b56c:	0f be 5c 24 10       	movsx  ebx,BYTE PTR [esp+0x10]
c000b571:	83 eb 41             	sub    ebx,0x41
c000b574:	8b 04 9d a0 2d 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffdd260]
c000b57b:	85 c0                	test   eax,eax
c000b57d:	75 1c                	jne    c000b59b <Fs::setcwd(Process*, char*)+0x68>
c000b57f:	eb 2f                	jmp    c000b5b0 <Fs::setcwd(Process*, char*)+0x7d>
c000b581:	83 ec 0c             	sub    esp,0xc
c000b584:	56                   	push   esi
c000b585:	e8 d6 4f ff ff       	call   c0000560 <strlen>
c000b58a:	83 c4 10             	add    esp,0x10
c000b58d:	83 f8 03             	cmp    eax,0x3
c000b590:	75 57                	jne    c000b5e9 <Fs::setcwd(Process*, char*)+0xb6>
c000b592:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c000b597:	75 50                	jne    c000b5e9 <Fs::setcwd(Process*, char*)+0xb6>
c000b599:	eb d1                	jmp    c000b56c <Fs::setcwd(Process*, char*)+0x39>
c000b59b:	83 b8 70 01 00 00 00 	cmp    DWORD PTR [eax+0x170],0x0
c000b5a2:	75 0c                	jne    c000b5b0 <Fs::setcwd(Process*, char*)+0x7d>
c000b5a4:	83 ec 0c             	sub    esp,0xc
c000b5a7:	50                   	push   eax
c000b5a8:	e8 69 1c 00 00       	call   c000d216 <LogicalDisk::mount()>
c000b5ad:	83 c4 10             	add    esp,0x10
c000b5b0:	b8 03 00 00 00       	mov    eax,0x3
c000b5b5:	83 fb 19             	cmp    ebx,0x19
c000b5b8:	0f 87 c6 00 00 00    	ja     c000b684 <Fs::setcwd(Process*, char*)+0x151>
c000b5be:	8b 14 9d a0 2d 02 c0 	mov    edx,DWORD PTR [ebx*4-0x3ffdd260]
c000b5c5:	b8 05 00 00 00       	mov    eax,0x5
c000b5ca:	85 d2                	test   edx,edx
c000b5cc:	0f 84 b2 00 00 00    	je     c000b684 <Fs::setcwd(Process*, char*)+0x151>
c000b5d2:	b8 06 00 00 00       	mov    eax,0x6
c000b5d7:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c000b5de:	0f 85 92 00 00 00    	jne    c000b676 <Fs::setcwd(Process*, char*)+0x143>
c000b5e4:	e9 9b 00 00 00       	jmp    c000b684 <Fs::setcwd(Process*, char*)+0x151>
c000b5e9:	83 ec 0c             	sub    esp,0xc
c000b5ec:	68 14 01 00 00       	push   0x114
c000b5f1:	e8 6b c8 ff ff       	call   c0007e61 <malloc>
c000b5f6:	83 c4 0c             	add    esp,0xc
c000b5f9:	89 c3                	mov    ebx,eax
c000b5fb:	55                   	push   ebp
c000b5fc:	56                   	push   esi
c000b5fd:	50                   	push   eax
c000b5fe:	e8 63 fb ff ff       	call   c000b166 <File::File(char const*, Process*)>
c000b603:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c000b608:	83 c4 0c             	add    esp,0xc
c000b60b:	8d 44 24 0b          	lea    eax,[esp+0xb]
c000b60f:	50                   	push   eax
c000b610:	8d 44 24 10          	lea    eax,[esp+0x10]
c000b614:	50                   	push   eax
c000b615:	53                   	push   ebx
c000b616:	e8 b7 fe ff ff       	call   c000b4d2 <File::stat(unsigned long long*, bool*)>
c000b61b:	83 c4 10             	add    esp,0x10
c000b61e:	83 f8 02             	cmp    eax,0x2
c000b621:	74 04                	je     c000b627 <Fs::setcwd(Process*, char*)+0xf4>
c000b623:	85 c0                	test   eax,eax
c000b625:	74 1c                	je     c000b643 <Fs::setcwd(Process*, char*)+0x110>
c000b627:	b8 01 00 00 00       	mov    eax,0x1
c000b62c:	85 db                	test   ebx,ebx
c000b62e:	74 54                	je     c000b684 <Fs::setcwd(Process*, char*)+0x151>
c000b630:	83 ec 0c             	sub    esp,0xc
c000b633:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b635:	53                   	push   ebx
c000b636:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b639:	83 c4 10             	add    esp,0x10
c000b63c:	b8 01 00 00 00       	mov    eax,0x1
c000b641:	eb 41                	jmp    c000b684 <Fs::setcwd(Process*, char*)+0x151>
c000b643:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000b648:	75 1c                	jne    c000b666 <Fs::setcwd(Process*, char*)+0x133>
c000b64a:	b8 02 00 00 00       	mov    eax,0x2
c000b64f:	85 db                	test   ebx,ebx
c000b651:	74 31                	je     c000b684 <Fs::setcwd(Process*, char*)+0x151>
c000b653:	83 ec 0c             	sub    esp,0xc
c000b656:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b658:	53                   	push   ebx
c000b659:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b65c:	83 c4 10             	add    esp,0x10
c000b65f:	b8 02 00 00 00       	mov    eax,0x2
c000b664:	eb 1e                	jmp    c000b684 <Fs::setcwd(Process*, char*)+0x151>
c000b666:	85 db                	test   ebx,ebx
c000b668:	74 0c                	je     c000b676 <Fs::setcwd(Process*, char*)+0x143>
c000b66a:	83 ec 0c             	sub    esp,0xc
c000b66d:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b66f:	53                   	push   ebx
c000b670:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b673:	83 c4 10             	add    esp,0x10
c000b676:	50                   	push   eax
c000b677:	50                   	push   eax
c000b678:	56                   	push   esi
c000b679:	57                   	push   edi
c000b67a:	e8 a1 4f ff ff       	call   c0000620 <strcpy>
c000b67f:	83 c4 10             	add    esp,0x10
c000b682:	31 c0                	xor    eax,eax
c000b684:	81 c4 1c 02 00 00    	add    esp,0x21c
c000b68a:	5b                   	pop    ebx
c000b68b:	5e                   	pop    esi
c000b68c:	5f                   	pop    edi
c000b68d:	5d                   	pop    ebp
c000b68e:	c3                   	ret    
c000b68f:	90                   	nop

c000b690 <Directory::Directory(char const*, Process*)>:
c000b690:	83 ec 0c             	sub    esp,0xc
c000b693:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b697:	83 ec 08             	sub    esp,0x8
c000b69a:	6a 00                	push   0x0
c000b69c:	50                   	push   eax
c000b69d:	e8 b8 de ff ff       	call   c000955a <UnixFile::UnixFile(int)>
c000b6a2:	83 c4 10             	add    esp,0x10
c000b6a5:	ba 58 dd 01 c0       	mov    edx,0xc001dd58
c000b6aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b6ae:	89 10                	mov    DWORD PTR [eax],edx
c000b6b0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000b6b4:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000b6ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b6be:	83 c0 0d             	add    eax,0xd
c000b6c1:	83 ec 04             	sub    esp,0x4
c000b6c4:	52                   	push   edx
c000b6c5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b6c9:	50                   	push   eax
c000b6ca:	e8 ed f8 ff ff       	call   c000afbc <Fs::standardiseFiles(char*, char const*, char const*)>
c000b6cf:	83 c4 10             	add    esp,0x10
c000b6d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b6d6:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000b6d9:	8d 50 bf             	lea    edx,[eax-0x41]
c000b6dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b6e0:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000b6e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b6ea:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000b6ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b6f2:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b6f8:	25 ff 00 00 00       	and    eax,0xff
c000b6fd:	8b 04 85 a0 2d 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd260]
c000b704:	85 c0                	test   eax,eax
c000b706:	74 42                	je     c000b74a <Directory::Directory(char const*, Process*)+0xba>
c000b708:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b70c:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b712:	25 ff 00 00 00       	and    eax,0xff
c000b717:	8b 04 85 a0 2d 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd260]
c000b71e:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000b724:	85 c0                	test   eax,eax
c000b726:	75 22                	jne    c000b74a <Directory::Directory(char const*, Process*)+0xba>
c000b728:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b72c:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b732:	25 ff 00 00 00       	and    eax,0xff
c000b737:	8b 04 85 a0 2d 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd260]
c000b73e:	83 ec 0c             	sub    esp,0xc
c000b741:	50                   	push   eax
c000b742:	e8 cf 1a 00 00       	call   c000d216 <LogicalDisk::mount()>
c000b747:	83 c4 10             	add    esp,0x10
c000b74a:	90                   	nop
c000b74b:	83 c4 0c             	add    esp,0xc
c000b74e:	c3                   	ret    
c000b74f:	90                   	nop

c000b750 <Directory::open()>:
c000b750:	53                   	push   ebx
c000b751:	b8 0b 00 00 00       	mov    eax,0xb
c000b756:	83 ec 08             	sub    esp,0x8
c000b759:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b75d:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000b764:	80 fa 19             	cmp    dl,0x19
c000b767:	77 3d                	ja     c000b7a6 <Directory::open()+0x56>
c000b769:	8b 14 95 a0 2d 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdd260]
c000b770:	85 d2                	test   edx,edx
c000b772:	74 32                	je     c000b7a6 <Directory::open()+0x56>
c000b774:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000b77a:	85 d2                	test   edx,edx
c000b77c:	74 28                	je     c000b7a6 <Directory::open()+0x56>
c000b77e:	b8 06 00 00 00       	mov    eax,0x6
c000b783:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000b787:	75 1d                	jne    c000b7a6 <Directory::open()+0x56>
c000b789:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000b78f:	50                   	push   eax
c000b790:	8b 02                	mov    eax,DWORD PTR [edx]
c000b792:	51                   	push   ecx
c000b793:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000b796:	51                   	push   ecx
c000b797:	52                   	push   edx
c000b798:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c000b79b:	83 c4 10             	add    esp,0x10
c000b79e:	85 c0                	test   eax,eax
c000b7a0:	75 04                	jne    c000b7a6 <Directory::open()+0x56>
c000b7a2:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000b7a6:	83 c4 08             	add    esp,0x8
c000b7a9:	5b                   	pop    ebx
c000b7aa:	c3                   	ret    
c000b7ab:	90                   	nop

c000b7ac <Directory::close()>:
c000b7ac:	53                   	push   ebx
c000b7ad:	b8 0b 00 00 00       	mov    eax,0xb
c000b7b2:	83 ec 08             	sub    esp,0x8
c000b7b5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000b7b9:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000b7c0:	80 fa 19             	cmp    dl,0x19
c000b7c3:	77 41                	ja     c000b806 <Directory::close()+0x5a>
c000b7c5:	8b 1c 95 a0 2d 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffdd260]
c000b7cc:	85 db                	test   ebx,ebx
c000b7ce:	74 36                	je     c000b806 <Directory::close()+0x5a>
c000b7d0:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c000b7d7:	74 2d                	je     c000b806 <Directory::close()+0x5a>
c000b7d9:	b8 05 00 00 00       	mov    eax,0x5
c000b7de:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000b7e2:	74 22                	je     c000b806 <Directory::close()+0x5a>
c000b7e4:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c000b7e8:	8b 04 95 a0 2d 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdd260]
c000b7ef:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000b7f5:	53                   	push   ebx
c000b7f6:	53                   	push   ebx
c000b7f7:	8b 10                	mov    edx,DWORD PTR [eax]
c000b7f9:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000b7ff:	50                   	push   eax
c000b800:	ff 52 20             	call   DWORD PTR [edx+0x20]
c000b803:	83 c4 10             	add    esp,0x10
c000b806:	83 c4 08             	add    esp,0x8
c000b809:	5b                   	pop    ebx
c000b80a:	c3                   	ret    
c000b80b:	90                   	nop

c000b80c <Directory::unlink()>:
c000b80c:	83 ec 0c             	sub    esp,0xc
c000b80f:	b8 0b 00 00 00       	mov    eax,0xb
c000b814:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b818:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b81f:	80 f9 19             	cmp    cl,0x19
c000b822:	77 2f                	ja     c000b853 <Directory::unlink()+0x47>
c000b824:	8b 0c 8d a0 2d 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdd260]
c000b82b:	85 c9                	test   ecx,ecx
c000b82d:	74 24                	je     c000b853 <Directory::unlink()+0x47>
c000b82f:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000b835:	85 c9                	test   ecx,ecx
c000b837:	74 1a                	je     c000b853 <Directory::unlink()+0x47>
c000b839:	b8 06 00 00 00       	mov    eax,0x6
c000b83e:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b842:	75 0f                	jne    c000b853 <Directory::unlink()+0x47>
c000b844:	83 c2 0d             	add    edx,0xd
c000b847:	50                   	push   eax
c000b848:	50                   	push   eax
c000b849:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b84b:	52                   	push   edx
c000b84c:	51                   	push   ecx
c000b84d:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000b850:	83 c4 10             	add    esp,0x10
c000b853:	83 c4 0c             	add    esp,0xc
c000b856:	c3                   	ret    
c000b857:	90                   	nop

c000b858 <Directory::rename(char const*)>:
c000b858:	83 ec 0c             	sub    esp,0xc
c000b85b:	b8 0b 00 00 00       	mov    eax,0xb
c000b860:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b864:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b86b:	80 f9 19             	cmp    cl,0x19
c000b86e:	77 32                	ja     c000b8a2 <Directory::rename(char const*)+0x4a>
c000b870:	8b 0c 8d a0 2d 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdd260]
c000b877:	85 c9                	test   ecx,ecx
c000b879:	74 27                	je     c000b8a2 <Directory::rename(char const*)+0x4a>
c000b87b:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000b881:	85 c9                	test   ecx,ecx
c000b883:	74 1d                	je     c000b8a2 <Directory::rename(char const*)+0x4a>
c000b885:	b8 06 00 00 00       	mov    eax,0x6
c000b88a:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b88e:	75 12                	jne    c000b8a2 <Directory::rename(char const*)+0x4a>
c000b890:	83 c2 0d             	add    edx,0xd
c000b893:	50                   	push   eax
c000b894:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b896:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b89a:	52                   	push   edx
c000b89b:	51                   	push   ecx
c000b89c:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000b89f:	83 c4 10             	add    esp,0x10
c000b8a2:	83 c4 0c             	add    esp,0xc
c000b8a5:	c3                   	ret    

c000b8a6 <Directory::exists()>:
c000b8a6:	83 ec 0c             	sub    esp,0xc
c000b8a9:	31 c0                	xor    eax,eax
c000b8ab:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b8af:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b8b6:	80 f9 19             	cmp    cl,0x19
c000b8b9:	77 24                	ja     c000b8df <Directory::exists()+0x39>
c000b8bb:	8b 0c 8d a0 2d 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdd260]
c000b8c2:	85 c9                	test   ecx,ecx
c000b8c4:	74 19                	je     c000b8df <Directory::exists()+0x39>
c000b8c6:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000b8cc:	85 c9                	test   ecx,ecx
c000b8ce:	74 0f                	je     c000b8df <Directory::exists()+0x39>
c000b8d0:	83 c2 0d             	add    edx,0xd
c000b8d3:	50                   	push   eax
c000b8d4:	50                   	push   eax
c000b8d5:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b8d7:	52                   	push   edx
c000b8d8:	51                   	push   ecx
c000b8d9:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000b8dc:	83 c4 10             	add    esp,0x10
c000b8df:	83 c4 0c             	add    esp,0xc
c000b8e2:	c3                   	ret    
c000b8e3:	90                   	nop

c000b8e4 <Directory::read(dirent*)>:
c000b8e4:	83 ec 1c             	sub    esp,0x1c
c000b8e7:	b8 0b 00 00 00       	mov    eax,0xb
c000b8ec:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b8f0:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000b8f7:	80 fa 19             	cmp    dl,0x19
c000b8fa:	77 30                	ja     c000b92c <Directory::read(dirent*)+0x48>
c000b8fc:	8b 14 95 a0 2d 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdd260]
c000b903:	85 d2                	test   edx,edx
c000b905:	74 25                	je     c000b92c <Directory::read(dirent*)+0x48>
c000b907:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c000b90e:	74 1c                	je     c000b92c <Directory::read(dirent*)+0x48>
c000b910:	83 ec 0c             	sub    esp,0xc
c000b913:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b915:	8d 54 24 18          	lea    edx,[esp+0x18]
c000b919:	52                   	push   edx
c000b91a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b91e:	6a 00                	push   0x0
c000b920:	68 10 01 00 00       	push   0x110
c000b925:	51                   	push   ecx
c000b926:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000b929:	83 c4 20             	add    esp,0x20
c000b92c:	83 c4 1c             	add    esp,0x1c
c000b92f:	c3                   	ret    

c000b930 <Directory::create()>:
c000b930:	83 ec 0c             	sub    esp,0xc
c000b933:	b8 0b 00 00 00       	mov    eax,0xb
c000b938:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b93c:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b943:	80 f9 19             	cmp    cl,0x19
c000b946:	77 2f                	ja     c000b977 <Directory::create()+0x47>
c000b948:	8b 0c 8d a0 2d 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdd260]
c000b94f:	85 c9                	test   ecx,ecx
c000b951:	74 24                	je     c000b977 <Directory::create()+0x47>
c000b953:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000b959:	85 c9                	test   ecx,ecx
c000b95b:	74 1a                	je     c000b977 <Directory::create()+0x47>
c000b95d:	b8 06 00 00 00       	mov    eax,0x6
c000b962:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b966:	75 0f                	jne    c000b977 <Directory::create()+0x47>
c000b968:	83 c2 0d             	add    edx,0xd
c000b96b:	50                   	push   eax
c000b96c:	50                   	push   eax
c000b96d:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b96f:	52                   	push   edx
c000b970:	51                   	push   ecx
c000b971:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c000b974:	83 c4 10             	add    esp,0x10
c000b977:	83 c4 0c             	add    esp,0xc
c000b97a:	c3                   	ret    
c000b97b:	90                   	nop

c000b97c <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c000b97c:	b8 0a 00 00 00       	mov    eax,0xa
c000b981:	c3                   	ret    
c000b982:	66 90                	xchg   ax,ax

c000b984 <Bus::Bus(char const*)>:
c000b984:	83 ec 0c             	sub    esp,0xc
c000b987:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b98b:	83 ec 08             	sub    esp,0x8
c000b98e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b992:	50                   	push   eax
c000b993:	e8 30 08 00 00       	call   c000c1c8 <Device::Device(char const*)>
c000b998:	83 c4 10             	add    esp,0x10
c000b99b:	ba 74 dd 01 c0       	mov    edx,0xc001dd74
c000b9a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b9a4:	89 10                	mov    DWORD PTR [eax],edx
c000b9a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b9aa:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000b9b4:	90                   	nop
c000b9b5:	83 c4 0c             	add    esp,0xc
c000b9b8:	c3                   	ret    
c000b9b9:	90                   	nop
c000b9ba:	66 90                	xchg   ax,ax

c000b9bc <Bus::~Bus()>:
c000b9bc:	83 ec 0c             	sub    esp,0xc
c000b9bf:	ba 74 dd 01 c0       	mov    edx,0xc001dd74
c000b9c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b9c8:	89 10                	mov    DWORD PTR [eax],edx
c000b9ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b9ce:	83 ec 0c             	sub    esp,0xc
c000b9d1:	50                   	push   eax
c000b9d2:	e8 5b 05 00 00       	call   c000bf32 <Device::~Device()>
c000b9d7:	83 c4 10             	add    esp,0x10
c000b9da:	90                   	nop
c000b9db:	83 c4 0c             	add    esp,0xc
c000b9de:	c3                   	ret    
c000b9df:	90                   	nop

c000b9e0 <Bus::~Bus()>:
c000b9e0:	83 ec 0c             	sub    esp,0xc
c000b9e3:	83 ec 0c             	sub    esp,0xc
c000b9e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b9ea:	e8 cd ff ff ff       	call   c000b9bc <Bus::~Bus()>
c000b9ef:	83 c4 10             	add    esp,0x10
c000b9f2:	83 ec 08             	sub    esp,0x8
c000b9f5:	68 58 01 00 00       	push   0x158
c000b9fa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b9fe:	e8 f7 f0 ff ff       	call   c000aafa <operator delete(void*, unsigned long)>
c000ba03:	83 c4 10             	add    esp,0x10
c000ba06:	83 c4 0c             	add    esp,0xc
c000ba09:	c3                   	ret    

c000ba0a <beepThread(void*)>:
c000ba0a:	83 ec 0c             	sub    esp,0xc
c000ba0d:	a1 08 3d 02 c0       	mov    eax,ds:0xc0023d08
c000ba12:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ba16:	48                   	dec    eax
c000ba17:	a3 08 3d 02 c0       	mov    ds:0xc0023d08,eax
c000ba1c:	75 01                	jne    c000ba1f <beepThread(void*)+0x15>
c000ba1e:	fb                   	sti    
c000ba1f:	83 ec 0c             	sub    esp,0xc
c000ba22:	6b c2 0a             	imul   eax,edx,0xa
c000ba25:	50                   	push   eax
c000ba26:	e8 69 83 00 00       	call   c0013d94 <milliTenthSleep(unsigned int)>
c000ba2b:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000ba32:	e8 a5 9f 00 00       	call   c00159dc <HalMakeBeep(int)>
c000ba37:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c000ba3f:	83 c4 1c             	add    esp,0x1c
c000ba42:	e9 49 82 00 00       	jmp    c0013c90 <blockTask(TaskState)>

c000ba47 <Krnl::beep(int, int, bool)>:
c000ba47:	56                   	push   esi
c000ba48:	53                   	push   ebx
c000ba49:	83 ec 10             	sub    esp,0x10
c000ba4c:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000ba50:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000ba54:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ba58:	e8 7f 9f 00 00       	call   c00159dc <HalMakeBeep(int)>
c000ba5d:	83 c4 10             	add    esp,0x10
c000ba60:	89 f0                	mov    eax,esi
c000ba62:	84 c0                	test   al,al
c000ba64:	74 1e                	je     c000ba84 <Krnl::beep(int, int, bool)+0x3d>
c000ba66:	83 ec 0c             	sub    esp,0xc
c000ba69:	6b db 0a             	imul   ebx,ebx,0xa
c000ba6c:	53                   	push   ebx
c000ba6d:	e8 22 83 00 00       	call   c0013d94 <milliTenthSleep(unsigned int)>
c000ba72:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c000ba7a:	83 c4 14             	add    esp,0x14
c000ba7d:	5b                   	pop    ebx
c000ba7e:	5e                   	pop    esi
c000ba7f:	e9 58 9f 00 00       	jmp    c00159dc <HalMakeBeep(int)>
c000ba84:	68 e6 00 00 00       	push   0xe6
c000ba89:	53                   	push   ebx
c000ba8a:	68 0a ba 00 c0       	push   0xc000ba0a
c000ba8f:	ff 35 30 3d 02 c0    	push   DWORD PTR ds:0xc0023d30
c000ba95:	e8 da 7d 00 00       	call   c0013874 <Process::createThread(void (*)(void*), void*, int)>
c000ba9a:	83 c4 14             	add    esp,0x14
c000ba9d:	5b                   	pop    ebx
c000ba9e:	5e                   	pop    esi
c000ba9f:	c3                   	ret    

c000baa0 <User::loadClockSettings(int)>:
c000baa0:	53                   	push   ebx
c000baa1:	83 ec 14             	sub    esp,0x14
c000baa4:	68 14 01 00 00       	push   0x114
c000baa9:	e8 b3 c3 ff ff       	call   c0007e61 <malloc>
c000baae:	83 c4 0c             	add    esp,0xc
c000bab1:	89 c3                	mov    ebx,eax
c000bab3:	ff 35 30 3d 02 c0    	push   DWORD PTR ds:0xc0023d30
c000bab9:	68 98 dd 01 c0       	push   0xc001dd98
c000babe:	50                   	push   eax
c000babf:	e8 a2 f6 ff ff       	call   c000b166 <File::File(char const*, Process*)>
c000bac4:	58                   	pop    eax
c000bac5:	5a                   	pop    edx
c000bac6:	6a 01                	push   0x1
c000bac8:	53                   	push   ebx
c000bac9:	e8 58 f7 ff ff       	call   c000b226 <File::open(FileOpenMode)>
c000bace:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000bad1:	e8 ae f7 ff ff       	call   c000b284 <File::close()>
c000bad6:	83 c4 10             	add    esp,0x10
c000bad9:	85 db                	test   ebx,ebx
c000badb:	74 0f                	je     c000baec <User::loadClockSettings(int)+0x4c>
c000badd:	8b 03                	mov    eax,DWORD PTR [ebx]
c000badf:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000bae3:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000bae6:	83 c4 08             	add    esp,0x8
c000bae9:	5b                   	pop    ebx
c000baea:	ff e0                	jmp    eax
c000baec:	83 c4 08             	add    esp,0x8
c000baef:	5b                   	pop    ebx
c000baf0:	c3                   	ret    
c000baf1:	90                   	nop

c000baf2 <Clock::Clock(char const*)>:
c000baf2:	83 ec 0c             	sub    esp,0xc
c000baf5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000baf9:	83 ec 08             	sub    esp,0x8
c000bafc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bb00:	50                   	push   eax
c000bb01:	e8 c2 06 00 00       	call   c000c1c8 <Device::Device(char const*)>
c000bb06:	83 c4 10             	add    esp,0x10
c000bb09:	ba c0 dd 01 c0       	mov    edx,0xc001ddc0
c000bb0e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bb12:	89 10                	mov    DWORD PTR [eax],edx
c000bb14:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bb18:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c000bb22:	90                   	nop
c000bb23:	83 c4 0c             	add    esp,0xc
c000bb26:	c3                   	ret    
c000bb27:	90                   	nop

c000bb28 <Clock::~Clock()>:
c000bb28:	83 ec 0c             	sub    esp,0xc
c000bb2b:	ba c0 dd 01 c0       	mov    edx,0xc001ddc0
c000bb30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bb34:	89 10                	mov    DWORD PTR [eax],edx
c000bb36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bb3a:	83 ec 0c             	sub    esp,0xc
c000bb3d:	50                   	push   eax
c000bb3e:	e8 ef 03 00 00       	call   c000bf32 <Device::~Device()>
c000bb43:	83 c4 10             	add    esp,0x10
c000bb46:	90                   	nop
c000bb47:	83 c4 0c             	add    esp,0xc
c000bb4a:	c3                   	ret    
c000bb4b:	90                   	nop

c000bb4c <Clock::~Clock()>:
c000bb4c:	83 ec 0c             	sub    esp,0xc
c000bb4f:	83 ec 0c             	sub    esp,0xc
c000bb52:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bb56:	e8 cd ff ff ff       	call   c000bb28 <Clock::~Clock()>
c000bb5b:	83 c4 10             	add    esp,0x10
c000bb5e:	83 ec 08             	sub    esp,0x8
c000bb61:	68 58 01 00 00       	push   0x158
c000bb66:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bb6a:	e8 8b ef ff ff       	call   c000aafa <operator delete(void*, unsigned long)>
c000bb6f:	83 c4 10             	add    esp,0x10
c000bb72:	83 c4 0c             	add    esp,0xc
c000bb75:	c3                   	ret    

c000bb76 <Clock::timeInSecondsLocal()>:
c000bb76:	53                   	push   ebx
c000bb77:	83 ec 14             	sub    esp,0x14
c000bb7a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000bb7e:	8b 10                	mov    edx,DWORD PTR [eax]
c000bb80:	50                   	push   eax
c000bb81:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000bb84:	0f b6 0d 38 09 02 c0 	movzx  ecx,BYTE PTR ds:0xc0020938
c000bb8b:	03 0d 3c 09 02 c0    	add    ecx,DWORD PTR ds:0xc002093c
c000bb91:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000bb97:	89 cb                	mov    ebx,ecx
c000bb99:	c1 fb 1f             	sar    ebx,0x1f
c000bb9c:	01 c8                	add    eax,ecx
c000bb9e:	11 da                	adc    edx,ebx
c000bba0:	83 c4 10             	add    esp,0x10
c000bba3:	31 c9                	xor    ecx,ecx
c000bba5:	80 3d 39 09 02 c0 00 	cmp    BYTE PTR ds:0xc0020939,0x0
c000bbac:	74 05                	je     c000bbb3 <Clock::timeInSecondsLocal()+0x3d>
c000bbae:	b9 08 07 00 00       	mov    ecx,0x708
c000bbb3:	31 db                	xor    ebx,ebx
c000bbb5:	01 c8                	add    eax,ecx
c000bbb7:	11 da                	adc    edx,ebx
c000bbb9:	83 c4 08             	add    esp,0x8
c000bbbc:	5b                   	pop    ebx
c000bbbd:	c3                   	ret    

c000bbbe <Clock::setTimeInSecondsLocal(unsigned long long)>:
c000bbbe:	57                   	push   edi
c000bbbf:	56                   	push   esi
c000bbc0:	53                   	push   ebx
c000bbc1:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000bbc5:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000bbc9:	8b 01                	mov    eax,DWORD PTR [ecx]
c000bbcb:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000bbcf:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c000bbd2:	0f b6 05 38 09 02 c0 	movzx  eax,BYTE PTR ds:0xc0020938
c000bbd9:	03 05 3c 09 02 c0    	add    eax,DWORD PTR ds:0xc002093c
c000bbdf:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c000bbe5:	99                   	cdq    
c000bbe6:	29 c6                	sub    esi,eax
c000bbe8:	19 d7                	sbb    edi,edx
c000bbea:	89 f0                	mov    eax,esi
c000bbec:	89 fa                	mov    edx,edi
c000bbee:	31 f6                	xor    esi,esi
c000bbf0:	80 3d 39 09 02 c0 00 	cmp    BYTE PTR ds:0xc0020939,0x0
c000bbf7:	74 05                	je     c000bbfe <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c000bbf9:	be 08 07 00 00       	mov    esi,0x708
c000bbfe:	31 ff                	xor    edi,edi
c000bc00:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000bc04:	29 f0                	sub    eax,esi
c000bc06:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000bc0a:	19 fa                	sbb    edx,edi
c000bc0c:	89 d8                	mov    eax,ebx
c000bc0e:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000bc12:	5b                   	pop    ebx
c000bc13:	5e                   	pop    esi
c000bc14:	5f                   	pop    edi
c000bc15:	ff e0                	jmp    eax

c000bc17 <datetimeToSeconds(datetime_t)>:
c000bc17:	55                   	push   ebp
c000bc18:	57                   	push   edi
c000bc19:	56                   	push   esi
c000bc1a:	53                   	push   ebx
c000bc1b:	83 ec 14             	sub    esp,0x14
c000bc1e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000bc22:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000bc26:	89 d3                	mov    ebx,edx
c000bc28:	0f b6 c6             	movzx  eax,dh
c000bc2b:	c1 eb 10             	shr    ebx,0x10
c000bc2e:	48                   	dec    eax
c000bc2f:	66 81 eb 6c 07       	sub    bx,0x76c
c000bc34:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c000bc38:	0f b6 f5             	movzx  esi,ch
c000bc3b:	89 cf                	mov    edi,ecx
c000bc3d:	6b f6 3c             	imul   esi,esi,0x3c
c000bc40:	c1 ef 10             	shr    edi,0x10
c000bc43:	0f b6 c9             	movzx  ecx,cl
c000bc46:	89 f8                	mov    eax,edi
c000bc48:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000bc4e:	0f b6 f8             	movzx  edi,al
c000bc51:	0f b6 d2             	movzx  edx,dl
c000bc54:	01 fe                	add    esi,edi
c000bc56:	01 f1                	add    ecx,esi
c000bc58:	0f b7 f3             	movzx  esi,bx
c000bc5b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000bc5f:	c1 f9 1f             	sar    ecx,0x1f
c000bc62:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c000bc67:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000bc6b:	0f b6 4c 24 07       	movzx  ecx,BYTE PTR [esp+0x7]
c000bc70:	8b 0c 8d 00 de 01 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffe2200]
c000bc77:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c000bc7b:	76 29                	jbe    c000bca6 <datetimeToSeconds(datetime_t)+0x8f>
c000bc7d:	f6 c3 03             	test   bl,0x3
c000bc80:	75 24                	jne    c000bca6 <datetimeToSeconds(datetime_t)+0x8f>
c000bc82:	31 d2                	xor    edx,edx
c000bc84:	bf 64 00 00 00       	mov    edi,0x64
c000bc89:	89 d8                	mov    eax,ebx
c000bc8b:	66 f7 f7             	div    di
c000bc8e:	66 85 d2             	test   dx,dx
c000bc91:	75 12                	jne    c000bca5 <datetimeToSeconds(datetime_t)+0x8e>
c000bc93:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c000bc99:	bf 90 01 00 00       	mov    edi,0x190
c000bc9e:	99                   	cdq    
c000bc9f:	f7 ff                	idiv   edi
c000bca1:	85 d2                	test   edx,edx
c000bca3:	75 01                	jne    c000bca6 <datetimeToSeconds(datetime_t)+0x8f>
c000bca5:	41                   	inc    ecx
c000bca6:	66 83 fb 46          	cmp    bx,0x46
c000bcaa:	76 45                	jbe    c000bcf1 <datetimeToSeconds(datetime_t)+0xda>
c000bcac:	bb 46 00 00 00       	mov    ebx,0x46
c000bcb1:	bf 64 00 00 00       	mov    edi,0x64
c000bcb6:	bd 90 01 00 00       	mov    ebp,0x190
c000bcbb:	b8 6d 01 00 00       	mov    eax,0x16d
c000bcc0:	f6 c3 03             	test   bl,0x3
c000bcc3:	75 23                	jne    c000bce8 <datetimeToSeconds(datetime_t)+0xd1>
c000bcc5:	89 d8                	mov    eax,ebx
c000bcc7:	99                   	cdq    
c000bcc8:	f7 ff                	idiv   edi
c000bcca:	b8 6e 01 00 00       	mov    eax,0x16e
c000bccf:	85 d2                	test   edx,edx
c000bcd1:	75 15                	jne    c000bce8 <datetimeToSeconds(datetime_t)+0xd1>
c000bcd3:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c000bcd9:	99                   	cdq    
c000bcda:	f7 fd                	idiv   ebp
c000bcdc:	31 c0                	xor    eax,eax
c000bcde:	85 d2                	test   edx,edx
c000bce0:	0f 94 c0             	sete   al
c000bce3:	05 6d 01 00 00       	add    eax,0x16d
c000bce8:	01 c1                	add    ecx,eax
c000bcea:	43                   	inc    ebx
c000bceb:	39 f3                	cmp    ebx,esi
c000bced:	7c cc                	jl     c000bcbb <datetimeToSeconds(datetime_t)+0xa4>
c000bcef:	eb 3b                	jmp    c000bd2c <datetimeToSeconds(datetime_t)+0x115>
c000bcf1:	74 39                	je     c000bd2c <datetimeToSeconds(datetime_t)+0x115>
c000bcf3:	b8 45 00 00 00       	mov    eax,0x45
c000bcf8:	89 c2                	mov    edx,eax
c000bcfa:	83 e2 03             	and    edx,0x3
c000bcfd:	39 f0                	cmp    eax,esi
c000bcff:	7e 13                	jle    c000bd14 <datetimeToSeconds(datetime_t)+0xfd>
c000bd01:	85 d2                	test   edx,edx
c000bd03:	0f 94 c2             	sete   dl
c000bd06:	48                   	dec    eax
c000bd07:	0f b6 d2             	movzx  edx,dl
c000bd0a:	81 c2 6d 01 00 00    	add    edx,0x16d
c000bd10:	29 d1                	sub    ecx,edx
c000bd12:	eb e4                	jmp    c000bcf8 <datetimeToSeconds(datetime_t)+0xe1>
c000bd14:	b8 6d 01 00 00       	mov    eax,0x16d
c000bd19:	85 d2                	test   edx,edx
c000bd1b:	75 0d                	jne    c000bd2a <datetimeToSeconds(datetime_t)+0x113>
c000bd1d:	31 c0                	xor    eax,eax
c000bd1f:	66 85 db             	test   bx,bx
c000bd22:	0f 95 c0             	setne  al
c000bd25:	05 6d 01 00 00       	add    eax,0x16d
c000bd2a:	29 c1                	sub    ecx,eax
c000bd2c:	b8 80 51 01 00       	mov    eax,0x15180
c000bd31:	f7 e9                	imul   ecx
c000bd33:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000bd37:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000bd3b:	83 c4 14             	add    esp,0x14
c000bd3e:	5b                   	pop    ebx
c000bd3f:	5e                   	pop    esi
c000bd40:	5f                   	pop    edi
c000bd41:	5d                   	pop    ebp
c000bd42:	c3                   	ret    
c000bd43:	90                   	nop

c000bd44 <Clock::setTimeInDatetimeLocal(datetime_t)>:
c000bd44:	57                   	push   edi
c000bd45:	56                   	push   esi
c000bd46:	53                   	push   ebx
c000bd47:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000bd4b:	8b 06                	mov    eax,DWORD PTR [esi]
c000bd4d:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c000bd50:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bd54:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bd58:	e8 ba fe ff ff       	call   c000bc17 <datetimeToSeconds(datetime_t)>
c000bd5d:	59                   	pop    ecx
c000bd5e:	0f b6 0d 38 09 02 c0 	movzx  ecx,BYTE PTR ds:0xc0020938
c000bd65:	5b                   	pop    ebx
c000bd66:	03 0d 3c 09 02 c0    	add    ecx,DWORD PTR ds:0xc002093c
c000bd6c:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000bd72:	89 cb                	mov    ebx,ecx
c000bd74:	c1 fb 1f             	sar    ebx,0x1f
c000bd77:	29 c8                	sub    eax,ecx
c000bd79:	19 da                	sbb    edx,ebx
c000bd7b:	31 c9                	xor    ecx,ecx
c000bd7d:	80 3d 39 09 02 c0 00 	cmp    BYTE PTR ds:0xc0020939,0x0
c000bd84:	74 05                	je     c000bd8b <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c000bd86:	b9 08 07 00 00       	mov    ecx,0x708
c000bd8b:	31 db                	xor    ebx,ebx
c000bd8d:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c000bd91:	29 c8                	sub    eax,ecx
c000bd93:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000bd97:	19 da                	sbb    edx,ebx
c000bd99:	89 f8                	mov    eax,edi
c000bd9b:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000bd9f:	5b                   	pop    ebx
c000bda0:	5e                   	pop    esi
c000bda1:	5f                   	pop    edi
c000bda2:	ff e0                	jmp    eax

c000bda4 <secondsToDatetime(unsigned long long)>:
c000bda4:	55                   	push   ebp
c000bda5:	57                   	push   edi
c000bda6:	56                   	push   esi
c000bda7:	53                   	push   ebx
c000bda8:	83 ec 1c             	sub    esp,0x1c
c000bdab:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000bdaf:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000bdb3:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000bdb7:	6a 00                	push   0x0
c000bdb9:	68 80 51 01 00       	push   0x15180
c000bdbe:	55                   	push   ebp
c000bdbf:	57                   	push   edi
c000bdc0:	e8 9b 02 01 00       	call   c001c060 <__udivdi3>
c000bdc5:	83 c4 10             	add    esp,0x10
c000bdc8:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c000bdce:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bdd2:	6a 00                	push   0x0
c000bdd4:	68 80 51 01 00       	push   0x15180
c000bdd9:	55                   	push   ebp
c000bdda:	57                   	push   edi
c000bddb:	bf 10 0e 00 00       	mov    edi,0xe10
c000bde0:	e8 7b 03 01 00       	call   c001c160 <__umoddi3>
c000bde5:	83 c4 10             	add    esp,0x10
c000bde8:	99                   	cdq    
c000bde9:	f7 ff                	idiv   edi
c000bdeb:	bf 3c 00 00 00       	mov    edi,0x3c
c000bdf0:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c000bdf3:	89 d0                	mov    eax,edx
c000bdf5:	99                   	cdq    
c000bdf6:	f7 ff                	idiv   edi
c000bdf8:	85 db                	test   ebx,ebx
c000bdfa:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c000bdfd:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c000be00:	79 11                	jns    c000be13 <secondsToDatetime(unsigned long long)+0x6f>
c000be02:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000be06:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c000be0c:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000be11:	eb 07                	jmp    c000be1a <secondsToDatetime(unsigned long long)+0x76>
c000be13:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000be18:	89 d8                	mov    eax,ebx
c000be1a:	bf b4 05 00 00       	mov    edi,0x5b4
c000be1f:	99                   	cdq    
c000be20:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c000be25:	f7 f9                	idiv   ecx
c000be27:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c000be2c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000be30:	31 d2                	xor    edx,edx
c000be32:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c000be3a:	01 c3                	add    ebx,eax
c000be3c:	89 d8                	mov    eax,ebx
c000be3e:	f7 f1                	div    ecx
c000be40:	31 d2                	xor    edx,edx
c000be42:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c000be45:	89 d8                	mov    eax,ebx
c000be47:	f7 f7                	div    edi
c000be49:	31 d2                	xor    edx,edx
c000be4b:	29 c1                	sub    ecx,eax
c000be4d:	89 d8                	mov    eax,ebx
c000be4f:	f7 f5                	div    ebp
c000be51:	bd 6d 01 00 00       	mov    ebp,0x16d
c000be56:	29 c1                	sub    ecx,eax
c000be58:	31 d2                	xor    edx,edx
c000be5a:	89 c8                	mov    eax,ecx
c000be5c:	f7 f5                	div    ebp
c000be5e:	bd 94 8e 00 00       	mov    ebp,0x8e94
c000be63:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000be67:	31 d2                	xor    edx,edx
c000be69:	89 c8                	mov    eax,ecx
c000be6b:	f7 f5                	div    ebp
c000be6d:	31 d2                	xor    edx,edx
c000be6f:	01 c3                	add    ebx,eax
c000be71:	89 c8                	mov    eax,ecx
c000be73:	f7 f7                	div    edi
c000be75:	bf 99 00 00 00       	mov    edi,0x99
c000be7a:	29 c3                	sub    ebx,eax
c000be7c:	31 d2                	xor    edx,edx
c000be7e:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c000be86:	29 c3                	sub    ebx,eax
c000be88:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000be8b:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c000be8e:	bb 05 00 00 00       	mov    ebx,0x5
c000be93:	83 c1 02             	add    ecx,0x2
c000be96:	89 c8                	mov    eax,ecx
c000be98:	f7 f7                	div    edi
c000be9a:	31 d2                	xor    edx,edx
c000be9c:	89 c7                	mov    edi,eax
c000be9e:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c000bea4:	83 c0 02             	add    eax,0x2
c000bea7:	f7 f3                	div    ebx
c000bea9:	89 eb                	mov    ebx,ebp
c000beab:	29 c3                	sub    ebx,eax
c000bead:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c000beb3:	88 1e                	mov    BYTE PTR [esi],bl
c000beb5:	19 c0                	sbb    eax,eax
c000beb7:	31 d2                	xor    edx,edx
c000beb9:	83 e0 0c             	and    eax,0xc
c000bebc:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c000bec0:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c000bec8:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000becc:	83 f9 01             	cmp    ecx,0x1
c000becf:	0f 96 c2             	setbe  dl
c000bed2:	41                   	inc    ecx
c000bed3:	01 d0                	add    eax,edx
c000bed5:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c000bed8:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c000bedc:	83 c4 1c             	add    esp,0x1c
c000bedf:	89 f0                	mov    eax,esi
c000bee1:	5b                   	pop    ebx
c000bee2:	5e                   	pop    esi
c000bee3:	5f                   	pop    edi
c000bee4:	5d                   	pop    ebp
c000bee5:	c2 04 00             	ret    0x4

c000bee8 <Clock::timeInDatetimeLocal()>:
c000bee8:	53                   	push   ebx
c000bee9:	83 ec 14             	sub    esp,0x14
c000beec:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000bef0:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000bef4:	e8 7d fc ff ff       	call   c000bb76 <Clock::timeInSecondsLocal()>
c000bef9:	83 c4 0c             	add    esp,0xc
c000befc:	52                   	push   edx
c000befd:	50                   	push   eax
c000befe:	53                   	push   ebx
c000beff:	e8 a0 fe ff ff       	call   c000bda4 <secondsToDatetime(unsigned long long)>
c000bf04:	89 d8                	mov    eax,ebx
c000bf06:	83 c4 14             	add    esp,0x14
c000bf09:	5b                   	pop    ebx
c000bf0a:	c2 04 00             	ret    0x4
c000bf0d:	90                   	nop

c000bf0e <Device::hibernate()>:
c000bf0e:	c3                   	ret    
c000bf0f:	90                   	nop

c000bf10 <Device::wake()>:
c000bf10:	c3                   	ret    
c000bf11:	90                   	nop

c000bf12 <Device::detect()>:
c000bf12:	c3                   	ret    
c000bf13:	90                   	nop

c000bf14 <Device::disableLegacy()>:
c000bf14:	c3                   	ret    
c000bf15:	90                   	nop

c000bf16 <Device::powerSaving(PowerSavingLevel)>:
c000bf16:	c3                   	ret    
c000bf17:	90                   	nop

c000bf18 <DriverlessDevice::close(int, int, void*)>:
c000bf18:	31 c0                	xor    eax,eax
c000bf1a:	c3                   	ret    
c000bf1b:	90                   	nop

c000bf1c <DriverlessDevice::detect()>:
c000bf1c:	c3                   	ret    
c000bf1d:	90                   	nop

c000bf1e <DriverlessDevice::open(int, int, void*)>:
c000bf1e:	83 ec 18             	sub    esp,0x18
c000bf21:	68 30 de 01 c0       	push   0xc001de30
c000bf26:	e8 14 48 00 00       	call   c001073f <Krnl::panic(char const*)>
c000bf2b:	83 c8 ff             	or     eax,0xffffffff
c000bf2e:	83 c4 1c             	add    esp,0x1c
c000bf31:	c3                   	ret    

c000bf32 <Device::~Device()>:
c000bf32:	ba 90 de 01 c0       	mov    edx,0xc001de90
c000bf37:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bf3b:	89 10                	mov    DWORD PTR [eax],edx
c000bf3d:	90                   	nop
c000bf3e:	c3                   	ret    
c000bf3f:	90                   	nop

c000bf40 <Device::~Device()>:
c000bf40:	83 ec 0c             	sub    esp,0xc
c000bf43:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000bf47:	e8 e6 ff ff ff       	call   c000bf32 <Device::~Device()>
c000bf4c:	83 c4 04             	add    esp,0x4
c000bf4f:	83 ec 08             	sub    esp,0x8
c000bf52:	68 58 01 00 00       	push   0x158
c000bf57:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf5b:	e8 9a eb ff ff       	call   c000aafa <operator delete(void*, unsigned long)>
c000bf60:	83 c4 10             	add    esp,0x10
c000bf63:	83 c4 0c             	add    esp,0xc
c000bf66:	c3                   	ret    
c000bf67:	90                   	nop

c000bf68 <Device::findAndLoadDriver()>:
c000bf68:	c7 44 24 04 4e de 01 c0 	mov    DWORD PTR [esp+0x4],0xc001de4e
c000bf70:	e9 7b ec ff ff       	jmp    c000abf0 <Dbg::kprintf(char const*, ...)>
c000bf75:	90                   	nop

c000bf76 <Device::preOpenPCI(PCIDeviceInfo)>:
c000bf76:	57                   	push   edi
c000bf77:	b9 09 00 00 00       	mov    ecx,0x9
c000bf7c:	56                   	push   esi
c000bf7d:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000bf81:	8d 74 24 10          	lea    esi,[esp+0x10]
c000bf85:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c000bf8f:	81 c7 18 01 00 00    	add    edi,0x118
c000bf95:	fc                   	cld    
c000bf96:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000bf98:	5e                   	pop    esi
c000bf99:	5f                   	pop    edi
c000bf9a:	c3                   	ret    
c000bf9b:	90                   	nop

c000bf9c <Device::preOpenACPI(void*, char*, char*)>:
c000bf9c:	57                   	push   edi
c000bf9d:	b9 1e 00 00 00       	mov    ecx,0x1e
c000bfa2:	56                   	push   esi
c000bfa3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000bfa7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bfab:	c7 80 14 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x114],0x3
c000bfb5:	89 90 18 01 00 00    	mov    DWORD PTR [eax+0x118],edx
c000bfbb:	8d b8 1c 01 00 00    	lea    edi,[eax+0x11c]
c000bfc1:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000bfc5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000bfc7:	b9 0e 00 00 00       	mov    ecx,0xe
c000bfcc:	8d b8 3a 01 00 00    	lea    edi,[eax+0x13a]
c000bfd2:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000bfd6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000bfd8:	5e                   	pop    esi
c000bfd9:	5f                   	pop    edi
c000bfda:	c3                   	ret    
c000bfdb:	90                   	nop

c000bfdc <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000bfdc:	53                   	push   ebx
c000bfdd:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000bfe1:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000bfe5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000bfe9:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000bfed:	0f b6 c0             	movzx  eax,al
c000bff0:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000bff4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bff8:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000bffc:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000c000:	5b                   	pop    ebx
c000c001:	e9 a6 05 00 00       	jmp    c000c5ac <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>

c000c006 <Device::getParent()>:
c000c006:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c00a:	8b 80 c8 00 00 00    	mov    eax,DWORD PTR [eax+0xc8]
c000c010:	c3                   	ret    
c000c011:	90                   	nop

c000c012 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c000c012:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c016:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c01a:	0f b6 4c 24 10       	movzx  ecx,BYTE PTR [esp+0x10]
c000c01f:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000c023:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000c027:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000c02b:	e9 e8 06 00 00       	jmp    c000c718 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>

c000c030 <Device::addChild(Device*)>:
c000c030:	53                   	push   ebx
c000c031:	83 ec 08             	sub    esp,0x8
c000c034:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c038:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000c03c:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c000c042:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c000c048:	8b 13                	mov    edx,DWORD PTR [ebx]
c000c04a:	85 d2                	test   edx,edx
c000c04c:	74 04                	je     c000c052 <Device::addChild(Device*)+0x22>
c000c04e:	89 d3                	mov    ebx,edx
c000c050:	eb f6                	jmp    c000c048 <Device::addChild(Device*)+0x18>
c000c052:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000c055:	83 ec 0c             	sub    esp,0xc
c000c058:	6a 08                	push   0x8
c000c05a:	e8 02 be ff ff       	call   c0007e61 <malloc>
c000c05f:	89 03                	mov    DWORD PTR [ebx],eax
c000c061:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000c067:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000c06e:	83 c4 18             	add    esp,0x18
c000c071:	5b                   	pop    ebx
c000c072:	c3                   	ret    
c000c073:	90                   	nop

c000c074 <Device::removeAllChildren()>:
c000c074:	56                   	push   esi
c000c075:	53                   	push   ebx
c000c076:	52                   	push   edx
c000c077:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000c07b:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c000c081:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c084:	74 17                	je     c000c09d <Device::removeAllChildren()+0x29>
c000c086:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000c089:	85 c0                	test   eax,eax
c000c08b:	74 0c                	je     c000c099 <Device::removeAllChildren()+0x25>
c000c08d:	83 ec 0c             	sub    esp,0xc
c000c090:	8b 10                	mov    edx,DWORD PTR [eax]
c000c092:	50                   	push   eax
c000c093:	ff 52 04             	call   DWORD PTR [edx+0x4]
c000c096:	83 c4 10             	add    esp,0x10
c000c099:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c09b:	eb e4                	jmp    c000c081 <Device::removeAllChildren()+0xd>
c000c09d:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000c0a3:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000c0a9:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000c0af:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000c0b6:	58                   	pop    eax
c000c0b7:	5b                   	pop    ebx
c000c0b8:	5e                   	pop    esi
c000c0b9:	c3                   	ret    

c000c0ba <Device::hibernateAll()>:
c000c0ba:	53                   	push   ebx
c000c0bb:	83 ec 14             	sub    esp,0x14
c000c0be:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000c0c2:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c0c4:	53                   	push   ebx
c000c0c5:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000c0c8:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000c0ce:	83 c4 10             	add    esp,0x10
c000c0d1:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c0d4:	74 0f                	je     c000c0e5 <Device::hibernateAll()+0x2b>
c000c0d6:	83 ec 0c             	sub    esp,0xc
c000c0d9:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c0dc:	e8 d9 ff ff ff       	call   c000c0ba <Device::hibernateAll()>
c000c0e1:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c0e3:	eb e9                	jmp    c000c0ce <Device::hibernateAll()+0x14>
c000c0e5:	83 c4 08             	add    esp,0x8
c000c0e8:	5b                   	pop    ebx
c000c0e9:	c3                   	ret    

c000c0ea <Device::wakeAll()>:
c000c0ea:	53                   	push   ebx
c000c0eb:	83 ec 14             	sub    esp,0x14
c000c0ee:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000c0f2:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c0f4:	53                   	push   ebx
c000c0f5:	ff 50 14             	call   DWORD PTR [eax+0x14]
c000c0f8:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000c0fe:	83 c4 10             	add    esp,0x10
c000c101:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c104:	74 0f                	je     c000c115 <Device::wakeAll()+0x2b>
c000c106:	83 ec 0c             	sub    esp,0xc
c000c109:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c10c:	e8 d9 ff ff ff       	call   c000c0ea <Device::wakeAll()>
c000c111:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c113:	eb e9                	jmp    c000c0fe <Device::wakeAll()+0x14>
c000c115:	83 c4 08             	add    esp,0x8
c000c118:	5b                   	pop    ebx
c000c119:	c3                   	ret    

c000c11a <Device::detectAll()>:
c000c11a:	53                   	push   ebx
c000c11b:	83 ec 14             	sub    esp,0x14
c000c11e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000c122:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c124:	53                   	push   ebx
c000c125:	ff 50 18             	call   DWORD PTR [eax+0x18]
c000c128:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000c12e:	83 c4 10             	add    esp,0x10
c000c131:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c134:	74 0f                	je     c000c145 <Device::detectAll()+0x2b>
c000c136:	83 ec 0c             	sub    esp,0xc
c000c139:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c13c:	e8 d9 ff ff ff       	call   c000c11a <Device::detectAll()>
c000c141:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c143:	eb e9                	jmp    c000c12e <Device::detectAll()+0x14>
c000c145:	83 c4 08             	add    esp,0x8
c000c148:	5b                   	pop    ebx
c000c149:	c3                   	ret    

c000c14a <Device::disableLegacyAll()>:
c000c14a:	c3                   	ret    
c000c14b:	90                   	nop

c000c14c <Device::loadDriversForAll()>:
c000c14c:	c3                   	ret    
c000c14d:	90                   	nop

c000c14e <Device::closeAll()>:
c000c14e:	53                   	push   ebx
c000c14f:	83 ec 08             	sub    esp,0x8
c000c152:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c156:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c158:	6a 00                	push   0x0
c000c15a:	6a 00                	push   0x0
c000c15c:	6a 00                	push   0x0
c000c15e:	53                   	push   ebx
c000c15f:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000c162:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000c168:	83 c4 10             	add    esp,0x10
c000c16b:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c16e:	74 0f                	je     c000c17f <Device::closeAll()+0x31>
c000c170:	83 ec 0c             	sub    esp,0xc
c000c173:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c176:	e8 d3 ff ff ff       	call   c000c14e <Device::closeAll()>
c000c17b:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c17d:	eb e9                	jmp    c000c168 <Device::closeAll()+0x1a>
c000c17f:	83 c4 08             	add    esp,0x8
c000c182:	5b                   	pop    ebx
c000c183:	c3                   	ret    

c000c184 <Device::powerSavingAll(PowerSavingLevel)>:
c000c184:	56                   	push   esi
c000c185:	53                   	push   ebx
c000c186:	83 ec 0c             	sub    esp,0xc
c000c189:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000c18d:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000c191:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c193:	56                   	push   esi
c000c194:	53                   	push   ebx
c000c195:	ff 50 20             	call   DWORD PTR [eax+0x20]
c000c198:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000c19e:	83 c4 10             	add    esp,0x10
c000c1a1:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c1a4:	74 0f                	je     c000c1b5 <Device::powerSavingAll(PowerSavingLevel)+0x31>
c000c1a6:	52                   	push   edx
c000c1a7:	52                   	push   edx
c000c1a8:	56                   	push   esi
c000c1a9:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c1ac:	e8 d3 ff ff ff       	call   c000c184 <Device::powerSavingAll(PowerSavingLevel)>
c000c1b1:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c1b3:	eb e9                	jmp    c000c19e <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c000c1b5:	58                   	pop    eax
c000c1b6:	5b                   	pop    ebx
c000c1b7:	5e                   	pop    esi
c000c1b8:	c3                   	ret    
c000c1b9:	90                   	nop

c000c1ba <Device::setName(char const*)>:
c000c1ba:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c000c1c2:	e9 59 44 ff ff       	jmp    c0000620 <strcpy>
c000c1c7:	90                   	nop

c000c1c8 <Device::Device(char const*)>:
c000c1c8:	83 ec 1c             	sub    esp,0x1c
c000c1cb:	ba 90 de 01 c0       	mov    edx,0xc001de90
c000c1d0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c1d4:	89 10                	mov    DWORD PTR [eax],edx
c000c1d6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c1da:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c000c1e4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c1e8:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000c1f2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c1f6:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000c200:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c204:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000c20e:	83 ec 08             	sub    esp,0x8
c000c211:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c215:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c219:	e8 9c ff ff ff       	call   c000c1ba <Device::setName(char const*)>
c000c21e:	83 c4 10             	add    esp,0x10
c000c221:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c000c229:	83 ec 0c             	sub    esp,0xc
c000c22c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c230:	e8 2c bc ff ff       	call   c0007e61 <malloc>
c000c235:	83 c4 10             	add    esp,0x10
c000c238:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000c23e:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000c245:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000c249:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c000c24f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c253:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000c259:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000c25f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c263:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000c269:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000c270:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c274:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c000c27b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c27f:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c000c286:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c28a:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000c294:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c298:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000c2a2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c2a6:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000c2b0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c2b4:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c000c2be:	90                   	nop
c000c2bf:	83 c4 1c             	add    esp,0x1c
c000c2c2:	c3                   	ret    
c000c2c3:	90                   	nop

c000c2c4 <Device::getName()>:
c000c2c4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c2c8:	05 d0 00 00 00       	add    eax,0xd0
c000c2cd:	c3                   	ret    

c000c2ce <DriverlessDevice::DriverlessDevice(char const*)>:
c000c2ce:	83 ec 0c             	sub    esp,0xc
c000c2d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c2d5:	83 ec 08             	sub    esp,0x8
c000c2d8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c2dc:	50                   	push   eax
c000c2dd:	e8 e6 fe ff ff       	call   c000c1c8 <Device::Device(char const*)>
c000c2e2:	83 c4 10             	add    esp,0x10
c000c2e5:	ba bc de 01 c0       	mov    edx,0xc001debc
c000c2ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c2ee:	89 10                	mov    DWORD PTR [eax],edx
c000c2f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c2f4:	c7 80 10 01 00 00 12 00 00 00 	mov    DWORD PTR [eax+0x110],0x12
c000c2fe:	90                   	nop
c000c2ff:	83 c4 0c             	add    esp,0xc
c000c302:	c3                   	ret    
c000c303:	90                   	nop

c000c304 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c000c304:	57                   	push   edi
c000c305:	56                   	push   esi
c000c306:	53                   	push   ebx
c000c307:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c30b:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000c30f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000c313:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c000c319:	75 0c                	jne    c000c327 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c000c31b:	52                   	push   edx
c000c31c:	52                   	push   edx
c000c31d:	53                   	push   ebx
c000c31e:	56                   	push   esi
c000c31f:	e8 ee 01 01 00       	call   c001c512 <LinkedList<Device>::addElement(Device*)>
c000c324:	83 c4 10             	add    esp,0x10
c000c327:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000c32d:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c330:	74 12                	je     c000c344 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c000c332:	50                   	push   eax
c000c333:	57                   	push   edi
c000c334:	56                   	push   esi
c000c335:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c338:	e8 c7 ff ff ff       	call   c000c304 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000c33d:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c33f:	83 c4 10             	add    esp,0x10
c000c342:	eb e9                	jmp    c000c32d <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c000c344:	5b                   	pop    ebx
c000c345:	5e                   	pop    esi
c000c346:	5f                   	pop    edi
c000c347:	c3                   	ret    

c000c348 <getDevicesOfType(DeviceType)>:
c000c348:	53                   	push   ebx
c000c349:	83 ec 14             	sub    esp,0x14
c000c34c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000c350:	53                   	push   ebx
c000c351:	e8 98 02 01 00       	call   c001c5ee <LinkedList<Device>::LinkedList()>
c000c356:	83 c4 0c             	add    esp,0xc
c000c359:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c35d:	53                   	push   ebx
c000c35e:	ff 35 44 08 02 c0    	push   DWORD PTR ds:0xc0020844
c000c364:	e8 9b ff ff ff       	call   c000c304 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000c369:	89 d8                	mov    eax,ebx
c000c36b:	83 c4 18             	add    esp,0x18
c000c36e:	5b                   	pop    ebx
c000c36f:	c2 04 00             	ret    0x4
c000c372:	66 90                	xchg   ax,ax

c000c374 <HardDiskController::HardDiskController(char const*)>:
c000c374:	83 ec 0c             	sub    esp,0xc
c000c377:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c37b:	83 ec 08             	sub    esp,0x8
c000c37e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c382:	50                   	push   eax
c000c383:	e8 40 fe ff ff       	call   c000c1c8 <Device::Device(char const*)>
c000c388:	83 c4 10             	add    esp,0x10
c000c38b:	ba e8 de 01 c0       	mov    edx,0xc001dee8
c000c390:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c394:	89 10                	mov    DWORD PTR [eax],edx
c000c396:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c39a:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c000c3a4:	90                   	nop
c000c3a5:	83 c4 0c             	add    esp,0xc
c000c3a8:	c3                   	ret    
c000c3a9:	90                   	nop
c000c3aa:	66 90                	xchg   ax,ax

c000c3ac <HardDiskController::~HardDiskController()>:
c000c3ac:	83 ec 0c             	sub    esp,0xc
c000c3af:	ba e8 de 01 c0       	mov    edx,0xc001dee8
c000c3b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c3b8:	89 10                	mov    DWORD PTR [eax],edx
c000c3ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c3be:	83 ec 0c             	sub    esp,0xc
c000c3c1:	50                   	push   eax
c000c3c2:	e8 6b fb ff ff       	call   c000bf32 <Device::~Device()>
c000c3c7:	83 c4 10             	add    esp,0x10
c000c3ca:	90                   	nop
c000c3cb:	83 c4 0c             	add    esp,0xc
c000c3ce:	c3                   	ret    
c000c3cf:	90                   	nop

c000c3d0 <HardDiskController::~HardDiskController()>:
c000c3d0:	83 ec 0c             	sub    esp,0xc
c000c3d3:	83 ec 0c             	sub    esp,0xc
c000c3d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c3da:	e8 cd ff ff ff       	call   c000c3ac <HardDiskController::~HardDiskController()>
c000c3df:	83 c4 10             	add    esp,0x10
c000c3e2:	83 ec 08             	sub    esp,0x8
c000c3e5:	68 58 01 00 00       	push   0x158
c000c3ea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c3ee:	e8 07 e7 ff ff       	call   c000aafa <operator delete(void*, unsigned long)>
c000c3f3:	83 c4 10             	add    esp,0x10
c000c3f6:	83 c4 0c             	add    esp,0xc
c000c3f9:	c3                   	ret    

c000c3fa <PhysicalDisk::eject()>:
c000c3fa:	83 c8 ff             	or     eax,0xffffffff
c000c3fd:	c3                   	ret    

c000c3fe <PhysicalDisk::PhysicalDisk(char const*, int)>:
c000c3fe:	83 ec 0c             	sub    esp,0xc
c000c401:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c405:	83 ec 08             	sub    esp,0x8
c000c408:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c40c:	50                   	push   eax
c000c40d:	e8 b6 fd ff ff       	call   c000c1c8 <Device::Device(char const*)>
c000c412:	83 c4 10             	add    esp,0x10
c000c415:	ba 14 df 01 c0       	mov    edx,0xc001df14
c000c41a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c41e:	89 10                	mov    DWORD PTR [eax],edx
c000c420:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c424:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000c42b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c42f:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c000c436:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c43a:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c000c444:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c448:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000c44c:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c000c452:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c456:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000c460:	90                   	nop
c000c461:	83 c4 0c             	add    esp,0xc
c000c464:	c3                   	ret    
c000c465:	90                   	nop

c000c466 <PhysicalDisk::startCache()>:
c000c466:	56                   	push   esi
c000c467:	53                   	push   ebx
c000c468:	83 ec 10             	sub    esp,0x10
c000c46b:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000c46f:	6a 44                	push   0x44
c000c471:	e8 eb b9 ff ff       	call   c0007e61 <malloc>
c000c476:	89 c6                	mov    esi,eax
c000c478:	58                   	pop    eax
c000c479:	5a                   	pop    edx
c000c47a:	53                   	push   ebx
c000c47b:	56                   	push   esi
c000c47c:	e8 ab 15 00 00       	call   c000da2c <VCache::VCache(PhysicalDisk*)>
c000c481:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c000c487:	83 c4 14             	add    esp,0x14
c000c48a:	5b                   	pop    ebx
c000c48b:	5e                   	pop    esi
c000c48c:	c3                   	ret    
c000c48d:	90                   	nop

c000c48e <PhysicalDisk::~PhysicalDisk()>:
c000c48e:	83 ec 0c             	sub    esp,0xc
c000c491:	ba 14 df 01 c0       	mov    edx,0xc001df14
c000c496:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c49a:	89 10                	mov    DWORD PTR [eax],edx
c000c49c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c4a0:	83 ec 0c             	sub    esp,0xc
c000c4a3:	50                   	push   eax
c000c4a4:	e8 89 fa ff ff       	call   c000bf32 <Device::~Device()>
c000c4a9:	83 c4 10             	add    esp,0x10
c000c4ac:	90                   	nop
c000c4ad:	83 c4 0c             	add    esp,0xc
c000c4b0:	c3                   	ret    
c000c4b1:	90                   	nop

c000c4b2 <PhysicalDisk::~PhysicalDisk()>:
c000c4b2:	83 ec 0c             	sub    esp,0xc
c000c4b5:	83 ec 0c             	sub    esp,0xc
c000c4b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c4bc:	e8 cd ff ff ff       	call   c000c48e <PhysicalDisk::~PhysicalDisk()>
c000c4c1:	83 c4 10             	add    esp,0x10
c000c4c4:	83 ec 08             	sub    esp,0x8
c000c4c7:	68 6c 01 00 00       	push   0x16c
c000c4cc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c4d0:	e8 25 e6 ff ff       	call   c000aafa <operator delete(void*, unsigned long)>
c000c4d5:	83 c4 10             	add    esp,0x10
c000c4d8:	83 c4 0c             	add    esp,0xc
c000c4db:	c3                   	ret    

c000c4dc <int_handler>:
c000c4dc:	55                   	push   ebp
c000c4dd:	57                   	push   edi
c000c4de:	56                   	push   esi
c000c4df:	53                   	push   ebx
c000c4e0:	83 ec 0c             	sub    esp,0xc
c000c4e3:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000c4e7:	80 3d c0 32 02 c0 00 	cmp    BYTE PTR ds:0xc00232c0,0x0
c000c4ee:	74 0b                	je     c000c4fb <int_handler+0x1f>
c000c4f0:	fa                   	cli    
c000c4f1:	f4                   	hlt    
c000c4f2:	80 3d c0 32 02 c0 00 	cmp    BYTE PTR ds:0xc00232c0,0x0
c000c4f9:	75 f5                	jne    c000c4f0 <int_handler+0x14>
c000c4fb:	8b 77 30             	mov    esi,DWORD PTR [edi+0x30]
c000c4fe:	8d 46 e0             	lea    eax,[esi-0x20]
c000c501:	83 f8 17             	cmp    eax,0x17
c000c504:	76 3e                	jbe    c000c544 <int_handler+0x68>
c000c506:	c1 e6 04             	shl    esi,0x4
c000c509:	31 db                	xor    ebx,ebx
c000c50b:	8d ae 40 19 02 c0    	lea    ebp,[esi-0x3ffde6c0]
c000c511:	81 c6 40 09 02 c0    	add    esi,0xc0020940
c000c517:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c000c51b:	85 c0                	test   eax,eax
c000c51d:	74 13                	je     c000c532 <int_handler+0x56>
c000c51f:	8b 14 9e             	mov    edx,DWORD PTR [esi+ebx*4]
c000c522:	83 7f 30 60          	cmp    DWORD PTR [edi+0x30],0x60
c000c526:	74 2a                	je     c000c552 <int_handler+0x76>
c000c528:	83 ec 08             	sub    esp,0x8
c000c52b:	52                   	push   edx
c000c52c:	57                   	push   edi
c000c52d:	ff d0                	call   eax
c000c52f:	83 c4 10             	add    esp,0x10
c000c532:	43                   	inc    ebx
c000c533:	83 fb 04             	cmp    ebx,0x4
c000c536:	75 df                	jne    c000c517 <int_handler+0x3b>
c000c538:	83 c4 0c             	add    esp,0xc
c000c53b:	31 c0                	xor    eax,eax
c000c53d:	5b                   	pop    ebx
c000c53e:	31 d2                	xor    edx,edx
c000c540:	5e                   	pop    esi
c000c541:	5f                   	pop    edi
c000c542:	5d                   	pop    ebp
c000c543:	c3                   	ret    
c000c544:	83 ec 0c             	sub    esp,0xc
c000c547:	50                   	push   eax
c000c548:	e8 cc 94 00 00       	call   c0015a19 <HalEndOfInterrupt(int)>
c000c54d:	83 c4 10             	add    esp,0x10
c000c550:	eb b4                	jmp    c000c506 <int_handler+0x2a>
c000c552:	83 ec 08             	sub    esp,0x8
c000c555:	52                   	push   edx
c000c556:	57                   	push   edi
c000c557:	ff d0                	call   eax
c000c559:	83 c4 10             	add    esp,0x10
c000c55c:	83 c4 0c             	add    esp,0xc
c000c55f:	5b                   	pop    ebx
c000c560:	5e                   	pop    esi
c000c561:	5f                   	pop    edi
c000c562:	5d                   	pop    ebp
c000c563:	c3                   	ret    

c000c564 <installISRHandler(int, void (*)(regs*, void*), void*)>:
c000c564:	56                   	push   esi
c000c565:	31 c0                	xor    eax,eax
c000c567:	53                   	push   ebx
c000c568:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000c56c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c570:	89 ca                	mov    edx,ecx
c000c572:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000c576:	c1 e2 04             	shl    edx,0x4
c000c579:	83 bc 82 40 19 02 c0 00 	cmp    DWORD PTR [edx+eax*4-0x3ffde6c0],0x0
c000c581:	74 15                	je     c000c598 <installISRHandler(int, void (*)(regs*, void*), void*)+0x34>
c000c583:	40                   	inc    eax
c000c584:	83 f8 04             	cmp    eax,0x4
c000c587:	75 f0                	jne    c000c579 <installISRHandler(int, void (*)(regs*, void*), void*)+0x15>
c000c589:	c7 44 24 0c 44 df 01 c0 	mov    DWORD PTR [esp+0xc],0xc001df44
c000c591:	5b                   	pop    ebx
c000c592:	5e                   	pop    esi
c000c593:	e9 a7 41 00 00       	jmp    c001073f <Krnl::panic(char const*)>
c000c598:	8d 04 88             	lea    eax,[eax+ecx*4]
c000c59b:	89 1c 85 40 19 02 c0 	mov    DWORD PTR [eax*4-0x3ffde6c0],ebx
c000c5a2:	89 34 85 40 09 02 c0 	mov    DWORD PTR [eax*4-0x3ffdf6c0],esi
c000c5a9:	5b                   	pop    ebx
c000c5aa:	5e                   	pop    esi
c000c5ab:	c3                   	ret    

c000c5ac <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000c5ac:	57                   	push   edi
c000c5ad:	8b 15 44 08 02 c0    	mov    edx,DWORD PTR ds:0xc0020844
c000c5b3:	56                   	push   esi
c000c5b4:	53                   	push   ebx
c000c5b5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000c5b9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c5bd:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c000c5c4:	74 5b                	je     c000c621 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x75>
c000c5c6:	89 c7                	mov    edi,eax
c000c5c8:	84 c0                	test   al,al
c000c5ca:	74 24                	je     c000c5f0 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x44>
c000c5cc:	83 fe 0f             	cmp    esi,0xf
c000c5cf:	0f 8f d9 00 00 00    	jg     c000c6ae <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x102>
c000c5d5:	8a 86 c0 f7 01 c0    	mov    al,BYTE PTR [esi-0x3ffe0840]
c000c5db:	25 ff 00 00 00       	and    eax,0xff
c000c5e0:	66 8b bc 00 e0 30 02 c0 	mov    di,WORD PTR [eax+eax*1-0x3ffdcf20]
c000c5e8:	89 c6                	mov    esi,eax
c000c5ea:	66 d1 ef             	shr    di,1
c000c5ed:	83 e7 01             	and    edi,0x1
c000c5f0:	83 ec 08             	sub    esp,0x8
c000c5f3:	a1 00 47 02 c0       	mov    eax,ds:0xc0024700
c000c5f8:	31 db                	xor    ebx,ebx
c000c5fa:	50                   	push   eax
c000c5fb:	68 51 df 01 c0       	push   0xc001df51
c000c600:	e8 eb e5 ff ff       	call   c000abf0 <Dbg::kprintf(char const*, ...)>
c000c605:	83 c4 10             	add    esp,0x10
c000c608:	a1 00 47 02 c0       	mov    eax,ds:0xc0024700
c000c60d:	85 c0                	test   eax,eax
c000c60f:	7f 51                	jg     c000c662 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xb6>
c000c611:	83 ec 0c             	sub    esp,0xc
c000c614:	68 68 df 01 c0       	push   0xc001df68
c000c619:	e8 21 41 00 00       	call   c001073f <Krnl::panic(char const*)>
c000c61e:	83 c4 10             	add    esp,0x10
c000c621:	8d 4e 20             	lea    ecx,[esi+0x20]
c000c624:	31 d2                	xor    edx,edx
c000c626:	89 c8                	mov    eax,ecx
c000c628:	c1 e0 04             	shl    eax,0x4
c000c62b:	8b 9c 90 40 19 02 c0 	mov    ebx,DWORD PTR [eax+edx*4-0x3ffde6c0]
c000c632:	85 db                	test   ebx,ebx
c000c634:	0f 84 8b 00 00 00    	je     c000c6c5 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x119>
c000c63a:	42                   	inc    edx
c000c63b:	83 fa 04             	cmp    edx,0x4
c000c63e:	75 eb                	jne    c000c62b <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x7f>
c000c640:	83 ec 0c             	sub    esp,0xc
c000c643:	68 bc df 01 c0       	push   0xc001dfbc
c000c648:	e8 f2 40 00 00       	call   c001073f <Krnl::panic(char const*)>
c000c64d:	83 c4 10             	add    esp,0x10
c000c650:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000c655:	5b                   	pop    ebx
c000c656:	5e                   	pop    esi
c000c657:	5f                   	pop    edi
c000c658:	c3                   	ret    
c000c659:	43                   	inc    ebx
c000c65a:	39 1d 00 47 02 c0    	cmp    DWORD PTR ds:0xc0024700,ebx
c000c660:	7e af                	jle    c000c611 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x65>
c000c662:	83 ec 08             	sub    esp,0x8
c000c665:	8b 04 9d 20 47 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffdb8e0]
c000c66c:	56                   	push   esi
c000c66d:	50                   	push   eax
c000c66e:	e8 cb ee 00 00       	call   c001b53e <IOAPIC::handlesGSIWithNumber(unsigned int)>
c000c673:	83 c4 10             	add    esp,0x10
c000c676:	84 c0                	test   al,al
c000c678:	74 df                	je     c000c659 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xad>
c000c67a:	81 e7 ff 00 00 00    	and    edi,0xff
c000c680:	50                   	push   eax
c000c681:	8d 46 20             	lea    eax,[esi+0x20]
c000c684:	57                   	push   edi
c000c685:	25 ff 00 00 00       	and    eax,0xff
c000c68a:	6a 00                	push   0x0
c000c68c:	50                   	push   eax
c000c68d:	89 f0                	mov    eax,esi
c000c68f:	6a 00                	push   0x0
c000c691:	25 ff 00 00 00       	and    eax,0xff
c000c696:	6a 00                	push   0x0
c000c698:	50                   	push   eax
c000c699:	8b 04 9d 20 47 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffdb8e0]
c000c6a0:	50                   	push   eax
c000c6a1:	e8 12 f0 00 00       	call   c001b6b8 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c000c6a6:	83 c4 20             	add    esp,0x20
c000c6a9:	e9 73 ff ff ff       	jmp    c000c621 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x75>
c000c6ae:	83 ec 0c             	sub    esp,0xc
c000c6b1:	31 ff                	xor    edi,edi
c000c6b3:	68 84 df 01 c0       	push   0xc001df84
c000c6b8:	e8 82 40 00 00       	call   c001073f <Krnl::panic(char const*)>
c000c6bd:	83 c4 10             	add    esp,0x10
c000c6c0:	e9 2b ff ff ff       	jmp    c000c5f0 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x44>
c000c6c5:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000c6c8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c6cc:	89 14 85 40 19 02 c0 	mov    DWORD PTR [eax*4-0x3ffde6c0],edx
c000c6d3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c6d7:	5b                   	pop    ebx
c000c6d8:	89 14 85 40 09 02 c0 	mov    DWORD PTR [eax*4-0x3ffdf6c0],edx
c000c6df:	89 f0                	mov    eax,esi
c000c6e1:	5e                   	pop    esi
c000c6e2:	5f                   	pop    edi
c000c6e3:	c3                   	ret    

c000c6e4 <uninstallISRHandler(int, void (*)(regs*, void*))>:
c000c6e4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c6e8:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000c6ec:	c1 e0 04             	shl    eax,0x4
c000c6ef:	8d 50 10             	lea    edx,[eax+0x10]
c000c6f2:	39 88 40 19 02 c0    	cmp    DWORD PTR [eax-0x3ffde6c0],ecx
c000c6f8:	74 08                	je     c000c702 <uninstallISRHandler(int, void (*)(regs*, void*))+0x1e>
c000c6fa:	83 c0 04             	add    eax,0x4
c000c6fd:	39 d0                	cmp    eax,edx
c000c6ff:	75 f1                	jne    c000c6f2 <uninstallISRHandler(int, void (*)(regs*, void*))+0xe>
c000c701:	c3                   	ret    
c000c702:	c7 80 40 19 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffde6c0],0x0
c000c70c:	c7 80 40 09 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdf6c0],0x0
c000c716:	eb e2                	jmp    c000c6fa <uninstallISRHandler(int, void (*)(regs*, void*))+0x16>

c000c718 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c000c718:	53                   	push   ebx
c000c719:	83 ec 08             	sub    esp,0x8
c000c71c:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000c720:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c000c725:	74 0e                	je     c000c735 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c000c727:	a1 44 08 02 c0       	mov    eax,ds:0xc0020844
c000c72c:	f6 80 6c 01 00 00 01 	test   BYTE PTR [eax+0x16c],0x1
c000c733:	75 37                	jne    c000c76c <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x54>
c000c735:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c739:	83 c0 20             	add    eax,0x20
c000c73c:	c1 e0 04             	shl    eax,0x4
c000c73f:	8d 50 10             	lea    edx,[eax+0x10]
c000c742:	39 98 40 19 02 c0    	cmp    DWORD PTR [eax-0x3ffde6c0],ebx
c000c748:	74 0c                	je     c000c756 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x3e>
c000c74a:	83 c0 04             	add    eax,0x4
c000c74d:	39 d0                	cmp    eax,edx
c000c74f:	75 f1                	jne    c000c742 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2a>
c000c751:	83 c4 08             	add    esp,0x8
c000c754:	5b                   	pop    ebx
c000c755:	c3                   	ret    
c000c756:	c7 80 40 19 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffde6c0],0x0
c000c760:	c7 80 40 09 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdf6c0],0x0
c000c76a:	eb de                	jmp    c000c74a <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x32>
c000c76c:	83 7c 24 10 0f       	cmp    DWORD PTR [esp+0x10],0xf
c000c771:	7f 12                	jg     c000c785 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x6d>
c000c773:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000c777:	31 c0                	xor    eax,eax
c000c779:	8a 81 c0 f7 01 c0    	mov    al,BYTE PTR [ecx-0x3ffe0840]
c000c77f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c783:	eb b0                	jmp    c000c735 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c000c785:	83 ec 0c             	sub    esp,0xc
c000c788:	68 75 df 01 c0       	push   0xc001df75
c000c78d:	e8 ad 3f 00 00       	call   c001073f <Krnl::panic(char const*)>
c000c792:	83 c4 10             	add    esp,0x10
c000c795:	eb 9e                	jmp    c000c735 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>

c000c797 <setupINTS()>:
c000c797:	31 c0                	xor    eax,eax
c000c799:	c7 80 40 19 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffde6c0],0x0
c000c7a3:	c7 80 40 09 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdf6c0],0x0
c000c7ad:	c7 80 44 19 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffde6bc],0x0
c000c7b7:	c7 80 44 09 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdf6bc],0x0
c000c7c1:	c7 80 48 19 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffde6b8],0x0
c000c7cb:	c7 80 48 09 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdf6b8],0x0
c000c7d5:	c7 80 4c 19 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffde6b4],0x0
c000c7df:	c7 80 4c 09 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdf6b4],0x0
c000c7e9:	83 c0 10             	add    eax,0x10
c000c7ec:	3d 00 10 00 00       	cmp    eax,0x1000
c000c7f1:	75 a6                	jne    c000c799 <setupINTS()+0x2>
c000c7f3:	c3                   	ret    

c000c7f4 <convertLegacyIRQNumber(int)>:
c000c7f4:	83 ec 0c             	sub    esp,0xc
c000c7f7:	8b 15 44 08 02 c0    	mov    edx,DWORD PTR ds:0xc0020844
c000c7fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c801:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c000c808:	74 0f                	je     c000c819 <convertLegacyIRQNumber(int)+0x25>
c000c80a:	83 f8 0f             	cmp    eax,0xf
c000c80d:	7f 0e                	jg     c000c81d <convertLegacyIRQNumber(int)+0x29>
c000c80f:	31 c9                	xor    ecx,ecx
c000c811:	8a 88 c0 f7 01 c0    	mov    cl,BYTE PTR [eax-0x3ffe0840]
c000c817:	89 c8                	mov    eax,ecx
c000c819:	83 c4 0c             	add    esp,0xc
c000c81c:	c3                   	ret    
c000c81d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c821:	83 ec 0c             	sub    esp,0xc
c000c824:	68 84 df 01 c0       	push   0xc001df84
c000c829:	e8 11 3f 00 00       	call   c001073f <Krnl::panic(char const*)>
c000c82e:	83 c4 10             	add    esp,0x10
c000c831:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c835:	83 c4 0c             	add    esp,0xc
c000c838:	c3                   	ret    
c000c839:	90                   	nop

c000c83a <startGUI(void*)>:
c000c83a:	55                   	push   ebp
c000c83b:	89 e5                	mov    ebp,esp
c000c83d:	53                   	push   ebx
c000c83e:	83 ec 04             	sub    esp,0x4
c000c841:	a1 08 3d 02 c0       	mov    eax,ds:0xc0023d08
c000c846:	48                   	dec    eax
c000c847:	a3 08 3d 02 c0       	mov    ds:0xc0023d08,eax
c000c84c:	a1 08 3d 02 c0       	mov    eax,ds:0xc0023d08
c000c851:	85 c0                	test   eax,eax
c000c853:	75 01                	jne    c000c856 <startGUI(void*)+0x1c>
c000c855:	fb                   	sti    
c000c856:	8b 1d 44 08 02 c0    	mov    ebx,DWORD PTR ds:0xc0020844
c000c85c:	83 ec 08             	sub    esp,0x8
c000c85f:	6a 01                	push   0x1
c000c861:	68 e1 df 01 c0       	push   0xc001dfe1
c000c866:	e8 37 68 00 00       	call   c00130a2 <Thr::loadDLL(char const*, bool)>
c000c86b:	83 c4 10             	add    esp,0x10
c000c86e:	83 ec 08             	sub    esp,0x8
c000c871:	53                   	push   ebx
c000c872:	50                   	push   eax
c000c873:	e8 5b 6a 00 00       	call   c00132d3 <Thr::executeDLL(unsigned long, void*)>
c000c878:	83 c4 10             	add    esp,0x10
c000c87b:	8b 1d 44 08 02 c0    	mov    ebx,DWORD PTR ds:0xc0020844
c000c881:	83 ec 08             	sub    esp,0x8
c000c884:	6a 01                	push   0x1
c000c886:	68 fb df 01 c0       	push   0xc001dffb
c000c88b:	e8 12 68 00 00       	call   c00130a2 <Thr::loadDLL(char const*, bool)>
c000c890:	83 c4 10             	add    esp,0x10
c000c893:	83 ec 08             	sub    esp,0x8
c000c896:	53                   	push   ebx
c000c897:	50                   	push   eax
c000c898:	e8 36 6a 00 00       	call   c00132d3 <Thr::executeDLL(unsigned long, void*)>
c000c89d:	83 c4 10             	add    esp,0x10
c000c8a0:	90                   	nop
c000c8a1:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000c8a4:	c9                   	leave  
c000c8a5:	c3                   	ret    

c000c8a6 <startGUIVESA(void*)>:
c000c8a6:	55                   	push   ebp
c000c8a7:	89 e5                	mov    ebp,esp
c000c8a9:	53                   	push   ebx
c000c8aa:	83 ec 04             	sub    esp,0x4
c000c8ad:	a1 08 3d 02 c0       	mov    eax,ds:0xc0023d08
c000c8b2:	48                   	dec    eax
c000c8b3:	a3 08 3d 02 c0       	mov    ds:0xc0023d08,eax
c000c8b8:	a1 08 3d 02 c0       	mov    eax,ds:0xc0023d08
c000c8bd:	85 c0                	test   eax,eax
c000c8bf:	75 01                	jne    c000c8c2 <startGUIVESA(void*)+0x1c>
c000c8c1:	fb                   	sti    
c000c8c2:	8b 1d 44 08 02 c0    	mov    ebx,DWORD PTR ds:0xc0020844
c000c8c8:	83 ec 08             	sub    esp,0x8
c000c8cb:	6a 01                	push   0x1
c000c8cd:	68 19 e0 01 c0       	push   0xc001e019
c000c8d2:	e8 cb 67 00 00       	call   c00130a2 <Thr::loadDLL(char const*, bool)>
c000c8d7:	83 c4 10             	add    esp,0x10
c000c8da:	83 ec 08             	sub    esp,0x8
c000c8dd:	53                   	push   ebx
c000c8de:	50                   	push   eax
c000c8df:	e8 ef 69 00 00       	call   c00132d3 <Thr::executeDLL(unsigned long, void*)>
c000c8e4:	83 c4 10             	add    esp,0x10
c000c8e7:	8b 1d 44 08 02 c0    	mov    ebx,DWORD PTR ds:0xc0020844
c000c8ed:	83 ec 08             	sub    esp,0x8
c000c8f0:	6a 01                	push   0x1
c000c8f2:	68 fb df 01 c0       	push   0xc001dffb
c000c8f7:	e8 a6 67 00 00       	call   c00130a2 <Thr::loadDLL(char const*, bool)>
c000c8fc:	83 c4 10             	add    esp,0x10
c000c8ff:	83 ec 08             	sub    esp,0x8
c000c902:	53                   	push   ebx
c000c903:	50                   	push   eax
c000c904:	e8 ca 69 00 00       	call   c00132d3 <Thr::executeDLL(unsigned long, void*)>
c000c909:	83 c4 10             	add    esp,0x10
c000c90c:	90                   	nop
c000c90d:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000c910:	c9                   	leave  
c000c911:	c3                   	ret    

c000c912 <sendKeyToTerminal(unsigned char)>:
c000c912:	55                   	push   ebp
c000c913:	89 e5                	mov    ebp,esp
c000c915:	83 ec 28             	sub    esp,0x28
c000c918:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c91b:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c000c91e:	8b 15 90 08 02 c0    	mov    edx,DWORD PTR ds:0xc0020890
c000c924:	8a 45 e4             	mov    al,BYTE PTR [ebp-0x1c]
c000c927:	25 ff 00 00 00       	and    eax,0xff
c000c92c:	83 ec 08             	sub    esp,0x8
c000c92f:	50                   	push   eax
c000c930:	52                   	push   edx
c000c931:	e8 aa c8 ff ff       	call   c00091e0 <VgaText::receiveKey(unsigned char)>
c000c936:	83 c4 10             	add    esp,0x10
c000c939:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c000c93d:	0f 85 8f 00 00 00    	jne    c000c9d2 <sendKeyToTerminal(unsigned char)+0xc0>
c000c943:	fa                   	cli    
c000c944:	a1 08 3d 02 c0       	mov    eax,ds:0xc0023d08
c000c949:	40                   	inc    eax
c000c94a:	a3 08 3d 02 c0       	mov    ds:0xc0023d08,eax
c000c94f:	a1 04 3d 02 c0       	mov    eax,ds:0xc0023d04
c000c954:	40                   	inc    eax
c000c955:	a3 04 3d 02 c0       	mov    ds:0xc0023d04,eax
c000c95a:	a1 40 29 02 c0       	mov    eax,ds:0xc0022940
c000c95f:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000c962:	c7 05 40 29 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0022940,0x0
c000c96c:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c000c970:	74 1f                	je     c000c991 <sendKeyToTerminal(unsigned char)+0x7f>
c000c972:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000c975:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c000c978:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000c97b:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000c97e:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000c981:	83 ec 0c             	sub    esp,0xc
c000c984:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000c987:	e8 cc 75 00 00       	call   c0013f58 <unblockTask(ThreadControlBlock*)>
c000c98c:	83 c4 10             	add    esp,0x10
c000c98f:	eb db                	jmp    c000c96c <sendKeyToTerminal(unsigned char)+0x5a>
c000c991:	a1 04 3d 02 c0       	mov    eax,ds:0xc0023d04
c000c996:	48                   	dec    eax
c000c997:	a3 04 3d 02 c0       	mov    ds:0xc0023d04,eax
c000c99c:	a1 04 3d 02 c0       	mov    eax,ds:0xc0023d04
c000c9a1:	85 c0                	test   eax,eax
c000c9a3:	75 18                	jne    c000c9bd <sendKeyToTerminal(unsigned char)+0xab>
c000c9a5:	a1 00 3d 02 c0       	mov    eax,ds:0xc0023d00
c000c9aa:	85 c0                	test   eax,eax
c000c9ac:	74 0f                	je     c000c9bd <sendKeyToTerminal(unsigned char)+0xab>
c000c9ae:	c7 05 00 3d 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023d00,0x0
c000c9b8:	e8 d7 70 00 00       	call   c0013a94 <schedule()>
c000c9bd:	a1 08 3d 02 c0       	mov    eax,ds:0xc0023d08
c000c9c2:	48                   	dec    eax
c000c9c3:	a3 08 3d 02 c0       	mov    ds:0xc0023d08,eax
c000c9c8:	a1 08 3d 02 c0       	mov    eax,ds:0xc0023d08
c000c9cd:	85 c0                	test   eax,eax
c000c9cf:	75 01                	jne    c000c9d2 <sendKeyToTerminal(unsigned char)+0xc0>
c000c9d1:	fb                   	sti    
c000c9d2:	90                   	nop
c000c9d3:	c9                   	leave  
c000c9d4:	c3                   	ret    

c000c9d5 <sendKeyboardToken(KeyboardToken)>:
c000c9d5:	55                   	push   ebp
c000c9d6:	89 e5                	mov    ebp,esp
c000c9d8:	83 ec 18             	sub    esp,0x18
c000c9db:	e8 ab 3e 00 00       	call   c001088b <Krnl::userIOReceived()>
c000c9e0:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c000c9e3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c9e6:	25 ff ff 00 00       	and    eax,0xffff
c000c9eb:	83 f2 01             	xor    edx,0x1
c000c9ee:	88 90 60 29 02 c0    	mov    BYTE PTR [eax-0x3ffdd6a0],dl
c000c9f4:	a1 48 29 02 c0       	mov    eax,ds:0xc0022948
c000c9f9:	85 c0                	test   eax,eax
c000c9fb:	74 24                	je     c000ca21 <sendKeyboardToken(KeyboardToken)+0x4c>
c000c9fd:	8b 0d 48 29 02 c0    	mov    ecx,DWORD PTR ds:0xc0022948
c000ca03:	83 ec 04             	sub    esp,0x4
c000ca06:	68 60 29 02 c0       	push   0xc0022960
c000ca0b:	83 ec 08             	sub    esp,0x8
c000ca0e:	89 e2                	mov    edx,esp
c000ca10:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ca13:	89 02                	mov    DWORD PTR [edx],eax
c000ca15:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000ca18:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c000ca1c:	ff d1                	call   ecx
c000ca1e:	83 c4 10             	add    esp,0x10
c000ca21:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c000ca25:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c000ca28:	a0 68 2d 02 c0       	mov    al,ds:0xc0022d68
c000ca2d:	38 c2                	cmp    dl,al
c000ca2f:	74 1e                	je     c000ca4f <sendKeyboardToken(KeyboardToken)+0x7a>
c000ca31:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c000ca34:	a2 68 2d 02 c0       	mov    ds:0xc0022d68,al
c000ca39:	a0 68 2d 02 c0       	mov    al,ds:0xc0022d68
c000ca3e:	25 ff 00 00 00       	and    eax,0xff
c000ca43:	83 ec 0c             	sub    esp,0xc
c000ca46:	50                   	push   eax
c000ca47:	e8 e6 be ff ff       	call   c0008932 <setTerminalScrollLock(bool)>
c000ca4c:	83 c4 10             	add    esp,0x10
c000ca4f:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c000ca52:	84 c0                	test   al,al
c000ca54:	0f 84 ae 00 00 00    	je     c000cb08 <sendKeyboardToken(KeyboardToken)+0x133>
c000ca5a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ca5d:	66 3d 10 03          	cmp    ax,0x310
c000ca61:	75 06                	jne    c000ca69 <sendKeyboardToken(KeyboardToken)+0x94>
c000ca63:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c000ca69:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ca6c:	66 3d 11 03          	cmp    ax,0x311
c000ca70:	75 06                	jne    c000ca78 <sendKeyboardToken(KeyboardToken)+0xa3>
c000ca72:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c000ca78:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ca7b:	66 3d 12 03          	cmp    ax,0x312
c000ca7f:	75 06                	jne    c000ca87 <sendKeyboardToken(KeyboardToken)+0xb2>
c000ca81:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c000ca87:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ca8a:	66 3d 13 03          	cmp    ax,0x313
c000ca8e:	75 06                	jne    c000ca96 <sendKeyboardToken(KeyboardToken)+0xc1>
c000ca90:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c000ca96:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ca99:	66 3d 14 03          	cmp    ax,0x314
c000ca9d:	75 06                	jne    c000caa5 <sendKeyboardToken(KeyboardToken)+0xd0>
c000ca9f:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c000caa5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000caa8:	66 3d 15 03          	cmp    ax,0x315
c000caac:	75 06                	jne    c000cab4 <sendKeyboardToken(KeyboardToken)+0xdf>
c000caae:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000cab4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cab7:	66 3d 16 03          	cmp    ax,0x316
c000cabb:	75 06                	jne    c000cac3 <sendKeyboardToken(KeyboardToken)+0xee>
c000cabd:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c000cac3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cac6:	66 3d 17 03          	cmp    ax,0x317
c000caca:	75 06                	jne    c000cad2 <sendKeyboardToken(KeyboardToken)+0xfd>
c000cacc:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c000cad2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cad5:	66 3d 18 03          	cmp    ax,0x318
c000cad9:	75 06                	jne    c000cae1 <sendKeyboardToken(KeyboardToken)+0x10c>
c000cadb:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c000cae1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cae4:	66 3d 19 03          	cmp    ax,0x319
c000cae8:	75 06                	jne    c000caf0 <sendKeyboardToken(KeyboardToken)+0x11b>
c000caea:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c000caf0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000caf3:	66 3d 1a 03          	cmp    ax,0x31a
c000caf7:	0f 85 c9 00 00 00    	jne    c000cbc6 <sendKeyboardToken(KeyboardToken)+0x1f1>
c000cafd:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c000cb03:	e9 be 00 00 00       	jmp    c000cbc6 <sendKeyboardToken(KeyboardToken)+0x1f1>
c000cb08:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cb0b:	66 3d 10 03          	cmp    ax,0x310
c000cb0f:	75 0a                	jne    c000cb1b <sendKeyboardToken(KeyboardToken)+0x146>
c000cb11:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c000cb17:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000cb1b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cb1e:	66 3d 11 03          	cmp    ax,0x311
c000cb22:	75 0a                	jne    c000cb2e <sendKeyboardToken(KeyboardToken)+0x159>
c000cb24:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c000cb2a:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000cb2e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cb31:	66 3d 12 03          	cmp    ax,0x312
c000cb35:	75 0a                	jne    c000cb41 <sendKeyboardToken(KeyboardToken)+0x16c>
c000cb37:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c000cb3d:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000cb41:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cb44:	66 3d 13 03          	cmp    ax,0x313
c000cb48:	75 0a                	jne    c000cb54 <sendKeyboardToken(KeyboardToken)+0x17f>
c000cb4a:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c000cb50:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000cb54:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cb57:	66 3d 14 03          	cmp    ax,0x314
c000cb5b:	75 0a                	jne    c000cb67 <sendKeyboardToken(KeyboardToken)+0x192>
c000cb5d:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c000cb63:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000cb67:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cb6a:	66 3d 15 03          	cmp    ax,0x315
c000cb6e:	75 0a                	jne    c000cb7a <sendKeyboardToken(KeyboardToken)+0x1a5>
c000cb70:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000cb76:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000cb7a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cb7d:	66 3d 16 03          	cmp    ax,0x316
c000cb81:	75 0a                	jne    c000cb8d <sendKeyboardToken(KeyboardToken)+0x1b8>
c000cb83:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c000cb89:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000cb8d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cb90:	66 3d 17 03          	cmp    ax,0x317
c000cb94:	75 0a                	jne    c000cba0 <sendKeyboardToken(KeyboardToken)+0x1cb>
c000cb96:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c000cb9c:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000cba0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cba3:	66 3d 18 03          	cmp    ax,0x318
c000cba7:	75 0a                	jne    c000cbb3 <sendKeyboardToken(KeyboardToken)+0x1de>
c000cba9:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c000cbaf:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000cbb3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cbb6:	66 3d 19 03          	cmp    ax,0x319
c000cbba:	75 0a                	jne    c000cbc6 <sendKeyboardToken(KeyboardToken)+0x1f1>
c000cbbc:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c000cbc2:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000cbc6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cbc9:	66 3d 00 02          	cmp    ax,0x200
c000cbcd:	75 2c                	jne    c000cbfb <sendKeyboardToken(KeyboardToken)+0x226>
c000cbcf:	a0 60 2d 02 c0       	mov    al,ds:0xc0022d60
c000cbd4:	83 f0 01             	xor    eax,0x1
c000cbd7:	84 c0                	test   al,al
c000cbd9:	74 20                	je     c000cbfb <sendKeyboardToken(KeyboardToken)+0x226>
c000cbdb:	a1 30 3d 02 c0       	mov    eax,ds:0xc0023d30
c000cbe0:	6a 01                	push   0x1
c000cbe2:	6a 00                	push   0x0
c000cbe4:	68 3a c8 00 c0       	push   0xc000c83a
c000cbe9:	50                   	push   eax
c000cbea:	e8 85 6c 00 00       	call   c0013874 <Process::createThread(void (*)(void*), void*, int)>
c000cbef:	83 c4 10             	add    esp,0x10
c000cbf2:	c6 05 60 2d 02 c0 01 	mov    BYTE PTR ds:0xc0022d60,0x1
c000cbf9:	eb 33                	jmp    c000cc2e <sendKeyboardToken(KeyboardToken)+0x259>
c000cbfb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cbfe:	66 3d 01 02          	cmp    ax,0x201
c000cc02:	75 2a                	jne    c000cc2e <sendKeyboardToken(KeyboardToken)+0x259>
c000cc04:	a0 60 2d 02 c0       	mov    al,ds:0xc0022d60
c000cc09:	83 f0 01             	xor    eax,0x1
c000cc0c:	84 c0                	test   al,al
c000cc0e:	74 1e                	je     c000cc2e <sendKeyboardToken(KeyboardToken)+0x259>
c000cc10:	a1 30 3d 02 c0       	mov    eax,ds:0xc0023d30
c000cc15:	6a 01                	push   0x1
c000cc17:	6a 00                	push   0x0
c000cc19:	68 a6 c8 00 c0       	push   0xc000c8a6
c000cc1e:	50                   	push   eax
c000cc1f:	e8 50 6c 00 00       	call   c0013874 <Process::createThread(void (*)(void*), void*, int)>
c000cc24:	83 c4 10             	add    esp,0x10
c000cc27:	c6 05 60 2d 02 c0 01 	mov    BYTE PTR ds:0xc0022d60,0x1
c000cc2e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cc31:	66 3d 1d 03          	cmp    ax,0x31d
c000cc35:	75 06                	jne    c000cc3d <sendKeyboardToken(KeyboardToken)+0x268>
c000cc37:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c000cc3d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cc40:	66 3d 1c 03          	cmp    ax,0x31c
c000cc44:	75 06                	jne    c000cc4c <sendKeyboardToken(KeyboardToken)+0x277>
c000cc46:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c000cc4c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cc4f:	66 3d 1b 03          	cmp    ax,0x31b
c000cc53:	75 06                	jne    c000cc5b <sendKeyboardToken(KeyboardToken)+0x286>
c000cc55:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c000cc5b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cc5e:	66 3d 1e 03          	cmp    ax,0x31e
c000cc62:	75 06                	jne    c000cc6a <sendKeyboardToken(KeyboardToken)+0x295>
c000cc64:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c000cc6a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cc6d:	66 3d 1f 03          	cmp    ax,0x31f
c000cc71:	75 06                	jne    c000cc79 <sendKeyboardToken(KeyboardToken)+0x2a4>
c000cc73:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c000cc79:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cc7c:	66 3d 1a 03          	cmp    ax,0x31a
c000cc80:	75 06                	jne    c000cc88 <sendKeyboardToken(KeyboardToken)+0x2b3>
c000cc82:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c000cc88:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c000cc8c:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000cc8f:	83 f0 01             	xor    eax,0x1
c000cc92:	84 c0                	test   al,al
c000cc94:	74 7b                	je     c000cd11 <sendKeyboardToken(KeyboardToken)+0x33c>
c000cc96:	a0 61 2a 02 c0       	mov    al,ds:0xc0022a61
c000cc9b:	84 c0                	test   al,al
c000cc9d:	74 43                	je     c000cce2 <sendKeyboardToken(KeyboardToken)+0x30d>
c000cc9f:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000cca3:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c000cca7:	74 2d                	je     c000ccd6 <sendKeyboardToken(KeyboardToken)+0x301>
c000cca9:	8b 15 64 2d 02 c0    	mov    edx,DWORD PTR ds:0xc0022d64
c000ccaf:	89 d0                	mov    eax,edx
c000ccb1:	c1 e0 02             	shl    eax,0x2
c000ccb4:	01 d0                	add    eax,edx
c000ccb6:	01 c0                	add    eax,eax
c000ccb8:	a3 64 2d 02 c0       	mov    ds:0xc0022d64,eax
c000ccbd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ccc0:	25 ff ff 00 00       	and    eax,0xffff
c000ccc5:	8d 50 d0             	lea    edx,[eax-0x30]
c000ccc8:	a1 64 2d 02 c0       	mov    eax,ds:0xc0022d64
c000cccd:	01 d0                	add    eax,edx
c000cccf:	a3 64 2d 02 c0       	mov    ds:0xc0022d64,eax
c000ccd4:	eb 71                	jmp    c000cd47 <sendKeyboardToken(KeyboardToken)+0x372>
c000ccd6:	c7 05 64 2d 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0022d64,0x0
c000cce0:	eb 65                	jmp    c000cd47 <sendKeyboardToken(KeyboardToken)+0x372>
c000cce2:	a1 64 2d 02 c0       	mov    eax,ds:0xc0022d64
c000cce7:	85 c0                	test   eax,eax
c000cce9:	74 1a                	je     c000cd05 <sendKeyboardToken(KeyboardToken)+0x330>
c000cceb:	a1 64 2d 02 c0       	mov    eax,ds:0xc0022d64
c000ccf0:	25 ff 00 00 00       	and    eax,0xff
c000ccf5:	83 ec 0c             	sub    esp,0xc
c000ccf8:	50                   	push   eax
c000ccf9:	e8 14 fc ff ff       	call   c000c912 <sendKeyToTerminal(unsigned char)>
c000ccfe:	83 c4 10             	add    esp,0x10
c000cd01:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000cd05:	c7 05 64 2d 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0022d64,0x0
c000cd0f:	eb 36                	jmp    c000cd47 <sendKeyboardToken(KeyboardToken)+0x372>
c000cd11:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cd14:	66 3d 01 01          	cmp    ax,0x101
c000cd18:	75 2d                	jne    c000cd47 <sendKeyboardToken(KeyboardToken)+0x372>
c000cd1a:	a1 64 2d 02 c0       	mov    eax,ds:0xc0022d64
c000cd1f:	85 c0                	test   eax,eax
c000cd21:	74 1a                	je     c000cd3d <sendKeyboardToken(KeyboardToken)+0x368>
c000cd23:	a1 64 2d 02 c0       	mov    eax,ds:0xc0022d64
c000cd28:	25 ff 00 00 00       	and    eax,0xff
c000cd2d:	83 ec 0c             	sub    esp,0xc
c000cd30:	50                   	push   eax
c000cd31:	e8 dc fb ff ff       	call   c000c912 <sendKeyToTerminal(unsigned char)>
c000cd36:	83 c4 10             	add    esp,0x10
c000cd39:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000cd3d:	c7 05 64 2d 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0022d64,0x0
c000cd47:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000cd4a:	83 f0 01             	xor    eax,0x1
c000cd4d:	84 c0                	test   al,al
c000cd4f:	74 4e                	je     c000cd9f <sendKeyboardToken(KeyboardToken)+0x3ca>
c000cd51:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000cd54:	83 f0 01             	xor    eax,0x1
c000cd57:	84 c0                	test   al,al
c000cd59:	74 44                	je     c000cd9f <sendKeyboardToken(KeyboardToken)+0x3ca>
c000cd5b:	a0 60 2a 02 c0       	mov    al,ds:0xc0022a60
c000cd60:	83 f0 01             	xor    eax,0x1
c000cd63:	84 c0                	test   al,al
c000cd65:	74 38                	je     c000cd9f <sendKeyboardToken(KeyboardToken)+0x3ca>
c000cd67:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cd6a:	66 83 f8 1f          	cmp    ax,0x1f
c000cd6e:	76 09                	jbe    c000cd79 <sendKeyboardToken(KeyboardToken)+0x3a4>
c000cd70:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cd73:	66 83 f8 7e          	cmp    ax,0x7e
c000cd77:	76 12                	jbe    c000cd8b <sendKeyboardToken(KeyboardToken)+0x3b6>
c000cd79:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cd7c:	66 83 f8 0a          	cmp    ax,0xa
c000cd80:	74 09                	je     c000cd8b <sendKeyboardToken(KeyboardToken)+0x3b6>
c000cd82:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cd85:	66 83 f8 08          	cmp    ax,0x8
c000cd89:	75 14                	jne    c000cd9f <sendKeyboardToken(KeyboardToken)+0x3ca>
c000cd8b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cd8e:	25 ff 00 00 00       	and    eax,0xff
c000cd93:	83 ec 0c             	sub    esp,0xc
c000cd96:	50                   	push   eax
c000cd97:	e8 76 fb ff ff       	call   c000c912 <sendKeyToTerminal(unsigned char)>
c000cd9c:	83 c4 10             	add    esp,0x10
c000cd9f:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000cda2:	83 f0 01             	xor    eax,0x1
c000cda5:	84 c0                	test   al,al
c000cda7:	74 51                	je     c000cdfa <sendKeyboardToken(KeyboardToken)+0x425>
c000cda9:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000cdac:	83 f0 01             	xor    eax,0x1
c000cdaf:	84 c0                	test   al,al
c000cdb1:	74 47                	je     c000cdfa <sendKeyboardToken(KeyboardToken)+0x425>
c000cdb3:	a0 60 2a 02 c0       	mov    al,ds:0xc0022a60
c000cdb8:	84 c0                	test   al,al
c000cdba:	74 3e                	je     c000cdfa <sendKeyboardToken(KeyboardToken)+0x425>
c000cdbc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cdbf:	66 83 f8 3f          	cmp    ax,0x3f
c000cdc3:	76 35                	jbe    c000cdfa <sendKeyboardToken(KeyboardToken)+0x425>
c000cdc5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cdc8:	66 83 f8 7f          	cmp    ax,0x7f
c000cdcc:	77 2c                	ja     c000cdfa <sendKeyboardToken(KeyboardToken)+0x425>
c000cdce:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cdd1:	88 c2                	mov    dl,al
c000cdd3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cdd6:	66 83 f8 5f          	cmp    ax,0x5f
c000cdda:	76 04                	jbe    c000cde0 <sendKeyboardToken(KeyboardToken)+0x40b>
c000cddc:	b0 20                	mov    al,0x20
c000cdde:	eb 02                	jmp    c000cde2 <sendKeyboardToken(KeyboardToken)+0x40d>
c000cde0:	b0 00                	mov    al,0x0
c000cde2:	29 c2                	sub    edx,eax
c000cde4:	88 d0                	mov    al,dl
c000cde6:	83 e8 40             	sub    eax,0x40
c000cde9:	25 ff 00 00 00       	and    eax,0xff
c000cdee:	83 ec 0c             	sub    esp,0xc
c000cdf1:	50                   	push   eax
c000cdf2:	e8 1b fb ff ff       	call   c000c912 <sendKeyToTerminal(unsigned char)>
c000cdf7:	83 c4 10             	add    esp,0x10
c000cdfa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cdfd:	66 3d 00 03          	cmp    ax,0x300
c000ce01:	75 0f                	jne    c000ce12 <sendKeyboardToken(KeyboardToken)+0x43d>
c000ce03:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000ce06:	83 f0 01             	xor    eax,0x1
c000ce09:	84 c0                	test   al,al
c000ce0b:	74 05                	je     c000ce12 <sendKeyboardToken(KeyboardToken)+0x43d>
c000ce0d:	e8 21 bb ff ff       	call   c0008933 <doTerminalCycle()>
c000ce12:	90                   	nop
c000ce13:	c9                   	leave  
c000ce14:	c3                   	ret    

c000ce15 <clearInternalKeybuffer(VgaText*)>:
c000ce15:	55                   	push   ebp
c000ce16:	89 e5                	mov    ebp,esp
c000ce18:	83 ec 08             	sub    esp,0x8
c000ce1b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ce1e:	05 b2 00 00 00       	add    eax,0xb2
c000ce23:	83 ec 0c             	sub    esp,0xc
c000ce26:	50                   	push   eax
c000ce27:	e8 34 37 ff ff       	call   c0000560 <strlen>
c000ce2c:	83 c4 10             	add    esp,0x10
c000ce2f:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000ce32:	81 c2 b2 00 00 00    	add    edx,0xb2
c000ce38:	83 ec 04             	sub    esp,0x4
c000ce3b:	50                   	push   eax
c000ce3c:	6a 00                	push   0x0
c000ce3e:	52                   	push   edx
c000ce3f:	e8 ac 36 ff ff       	call   c00004f0 <memset>
c000ce44:	83 c4 10             	add    esp,0x10
c000ce47:	90                   	nop
c000ce48:	c9                   	leave  
c000ce49:	c3                   	ret    

c000ce4a <readKeyboard(VgaText*, char*, unsigned long)>:
c000ce4a:	55                   	push   ebp
c000ce4b:	89 e5                	mov    ebp,esp
c000ce4d:	83 ec 18             	sub    esp,0x18
c000ce50:	a1 48 29 02 c0       	mov    eax,ds:0xc0022948
c000ce55:	85 c0                	test   eax,eax
c000ce57:	74 2a                	je     c000ce83 <readKeyboard(VgaText*, char*, unsigned long)+0x39>
c000ce59:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c000ce5f:	8b 0d 48 29 02 c0    	mov    ecx,DWORD PTR ds:0xc0022948
c000ce65:	83 ec 04             	sub    esp,0x4
c000ce68:	68 60 29 02 c0       	push   0xc0022960
c000ce6d:	83 ec 08             	sub    esp,0x8
c000ce70:	89 e2                	mov    edx,esp
c000ce72:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c000ce75:	89 02                	mov    DWORD PTR [edx],eax
c000ce77:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000ce7a:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c000ce7e:	ff d1                	call   ecx
c000ce80:	83 c4 10             	add    esp,0x10
c000ce83:	fb                   	sti    
c000ce84:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c000ce8b:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c000ce8f:	0f 84 a1 00 00 00    	je     c000cf36 <readKeyboard(VgaText*, char*, unsigned long)+0xec>
c000ce95:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ce98:	8a 80 b2 00 00 00    	mov    al,BYTE PTR [eax+0xb2]
c000ce9e:	84 c0                	test   al,al
c000cea0:	75 28                	jne    c000ceca <readKeyboard(VgaText*, char*, unsigned long)+0x80>
c000cea2:	fa                   	cli    
c000cea3:	a1 08 3d 02 c0       	mov    eax,ds:0xc0023d08
c000cea8:	40                   	inc    eax
c000cea9:	a3 08 3d 02 c0       	mov    ds:0xc0023d08,eax
c000ceae:	e8 e1 6b 00 00       	call   c0013a94 <schedule()>
c000ceb3:	a1 08 3d 02 c0       	mov    eax,ds:0xc0023d08
c000ceb8:	48                   	dec    eax
c000ceb9:	a3 08 3d 02 c0       	mov    ds:0xc0023d08,eax
c000cebe:	a1 08 3d 02 c0       	mov    eax,ds:0xc0023d08
c000cec3:	85 c0                	test   eax,eax
c000cec5:	75 ce                	jne    c000ce95 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000cec7:	fb                   	sti    
c000cec8:	eb cb                	jmp    c000ce95 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000ceca:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000cecd:	8d 50 01             	lea    edx,[eax+0x1]
c000ced0:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000ced3:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000ced6:	8a 92 b2 00 00 00    	mov    dl,BYTE PTR [edx+0xb2]
c000cedc:	88 10                	mov    BYTE PTR [eax],dl
c000cede:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cee1:	8a 80 b2 00 00 00    	mov    al,BYTE PTR [eax+0xb2]
c000cee7:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c000ceea:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ceed:	05 b2 00 00 00       	add    eax,0xb2
c000cef2:	83 ec 0c             	sub    esp,0xc
c000cef5:	50                   	push   eax
c000cef6:	e8 65 36 ff ff       	call   c0000560 <strlen>
c000cefb:	83 c4 10             	add    esp,0x10
c000cefe:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000cf01:	81 c2 b2 00 00 00    	add    edx,0xb2
c000cf07:	8d 4a 01             	lea    ecx,[edx+0x1]
c000cf0a:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000cf0d:	81 c2 b2 00 00 00    	add    edx,0xb2
c000cf13:	83 ec 04             	sub    esp,0x4
c000cf16:	50                   	push   eax
c000cf17:	51                   	push   ecx
c000cf18:	52                   	push   edx
c000cf19:	e8 e2 34 ff ff       	call   c0000400 <memmove>
c000cf1e:	83 c4 10             	add    esp,0x10
c000cf21:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c000cf24:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000cf27:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c000cf2b:	0f 85 5a ff ff ff    	jne    c000ce8b <readKeyboard(VgaText*, char*, unsigned long)+0x41>
c000cf31:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000cf34:	eb 03                	jmp    c000cf39 <readKeyboard(VgaText*, char*, unsigned long)+0xef>
c000cf36:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000cf39:	c9                   	leave  
c000cf3a:	c3                   	ret    
c000cf3b:	90                   	nop

c000cf3c <Keyboard::Keyboard(char const*)>:
c000cf3c:	83 ec 0c             	sub    esp,0xc
c000cf3f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cf43:	83 ec 08             	sub    esp,0x8
c000cf46:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf4a:	50                   	push   eax
c000cf4b:	e8 78 f2 ff ff       	call   c000c1c8 <Device::Device(char const*)>
c000cf50:	83 c4 10             	add    esp,0x10
c000cf53:	ba 3c e0 01 c0       	mov    edx,0xc001e03c
c000cf58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cf5c:	89 10                	mov    DWORD PTR [eax],edx
c000cf5e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cf62:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c000cf6c:	c6 05 44 29 02 c0 01 	mov    BYTE PTR ds:0xc0022944,0x1
c000cf73:	90                   	nop
c000cf74:	83 c4 0c             	add    esp,0xc
c000cf77:	c3                   	ret    

c000cf78 <Keyboard::~Keyboard()>:
c000cf78:	83 ec 0c             	sub    esp,0xc
c000cf7b:	ba 3c e0 01 c0       	mov    edx,0xc001e03c
c000cf80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cf84:	89 10                	mov    DWORD PTR [eax],edx
c000cf86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cf8a:	83 ec 0c             	sub    esp,0xc
c000cf8d:	50                   	push   eax
c000cf8e:	e8 9f ef ff ff       	call   c000bf32 <Device::~Device()>
c000cf93:	83 c4 10             	add    esp,0x10
c000cf96:	90                   	nop
c000cf97:	83 c4 0c             	add    esp,0xc
c000cf9a:	c3                   	ret    
c000cf9b:	90                   	nop

c000cf9c <Keyboard::~Keyboard()>:
c000cf9c:	83 ec 0c             	sub    esp,0xc
c000cf9f:	83 ec 0c             	sub    esp,0xc
c000cfa2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cfa6:	e8 cd ff ff ff       	call   c000cf78 <Keyboard::~Keyboard()>
c000cfab:	83 c4 10             	add    esp,0x10
c000cfae:	83 ec 08             	sub    esp,0x8
c000cfb1:	68 5c 01 00 00       	push   0x15c
c000cfb6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cfba:	e8 3b db ff ff       	call   c000aafa <operator delete(void*, unsigned long)>
c000cfbf:	83 c4 10             	add    esp,0x10
c000cfc2:	83 c4 0c             	add    esp,0xc
c000cfc5:	c3                   	ret    

c000cfc6 <LogicalDisk::close(int, int, void*)>:
c000cfc6:	83 c8 ff             	or     eax,0xffffffff
c000cfc9:	c3                   	ret    

c000cfca <LogicalDisk::~LogicalDisk()>:
c000cfca:	83 ec 0c             	sub    esp,0xc
c000cfcd:	ba b4 e0 01 c0       	mov    edx,0xc001e0b4
c000cfd2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cfd6:	89 10                	mov    DWORD PTR [eax],edx
c000cfd8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cfdc:	83 ec 0c             	sub    esp,0xc
c000cfdf:	50                   	push   eax
c000cfe0:	e8 4d ef ff ff       	call   c000bf32 <Device::~Device()>
c000cfe5:	83 c4 10             	add    esp,0x10
c000cfe8:	90                   	nop
c000cfe9:	83 c4 0c             	add    esp,0xc
c000cfec:	c3                   	ret    
c000cfed:	90                   	nop

c000cfee <LogicalDisk::~LogicalDisk()>:
c000cfee:	83 ec 0c             	sub    esp,0xc
c000cff1:	83 ec 0c             	sub    esp,0xc
c000cff4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cff8:	e8 cd ff ff ff       	call   c000cfca <LogicalDisk::~LogicalDisk()>
c000cffd:	83 c4 10             	add    esp,0x10
c000d000:	83 ec 08             	sub    esp,0x8
c000d003:	68 74 01 00 00       	push   0x174
c000d008:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d00c:	e8 e9 da ff ff       	call   c000aafa <operator delete(void*, unsigned long)>
c000d011:	83 c4 10             	add    esp,0x10
c000d014:	83 c4 0c             	add    esp,0xc
c000d017:	c3                   	ret    

c000d018 <LogicalDisk::open(int, int, void*)>:
c000d018:	83 ec 18             	sub    esp,0x18
c000d01b:	68 68 e0 01 c0       	push   0xc001e068
c000d020:	e8 1a 37 00 00       	call   c001073f <Krnl::panic(char const*)>
c000d025:	83 c8 ff             	or     eax,0xffffffff
c000d028:	83 c4 1c             	add    esp,0x1c
c000d02b:	c3                   	ret    

c000d02c <LogicalDisk::absoluteToRelative(unsigned long long)>:
c000d02c:	53                   	push   ebx
c000d02d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000d031:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d035:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d039:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c000d03f:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c000d045:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c000d04b:	77 10                	ja     c000d05d <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c000d04d:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c000d053:	89 d3                	mov    ebx,edx
c000d055:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c000d05b:	72 05                	jb     c000d062 <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c000d05d:	83 c8 ff             	or     eax,0xffffffff
c000d060:	89 c2                	mov    edx,eax
c000d062:	5b                   	pop    ebx
c000d063:	c3                   	ret    

c000d064 <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c000d064:	56                   	push   esi
c000d065:	83 c8 ff             	or     eax,0xffffffff
c000d068:	53                   	push   ebx
c000d069:	89 c2                	mov    edx,eax
c000d06b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000d06f:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000d073:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000d077:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000d07d:	77 27                	ja     c000d0a6 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000d07f:	89 d8                	mov    eax,ebx
c000d081:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c000d087:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c000d08d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000d092:	89 c2                	mov    edx,eax
c000d094:	73 10                	jae    c000d0a6 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000d096:	89 c8                	mov    eax,ecx
c000d098:	89 da                	mov    edx,ebx
c000d09a:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c000d0a0:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c000d0a6:	5b                   	pop    ebx
c000d0a7:	5e                   	pop    esi
c000d0a8:	c3                   	ret    
c000d0a9:	90                   	nop

c000d0aa <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c000d0aa:	83 ec 1c             	sub    esp,0x1c
c000d0ad:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d0b1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d0b5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d0b9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000d0bd:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000d0c1:	89 04 24             	mov    DWORD PTR [esp],eax
c000d0c4:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000d0c8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000d0cc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d0d0:	83 ec 08             	sub    esp,0x8
c000d0d3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d0d7:	50                   	push   eax
c000d0d8:	e8 eb f0 ff ff       	call   c000c1c8 <Device::Device(char const*)>
c000d0dd:	83 c4 10             	add    esp,0x10
c000d0e0:	ba b4 e0 01 c0       	mov    edx,0xc001e0b4
c000d0e5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d0e9:	89 10                	mov    DWORD PTR [eax],edx
c000d0eb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d0ef:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000d0f6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d0fa:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000d101:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d105:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c000d10f:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000d113:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d117:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d11b:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c000d121:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c000d127:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000d12b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000d12e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000d132:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c000d138:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c000d13e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d142:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000d146:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c000d14c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d150:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c000d15a:	90                   	nop
c000d15b:	83 c4 1c             	add    esp,0x1c
c000d15e:	c3                   	ret    
c000d15f:	90                   	nop

c000d160 <LogicalDisk::assignDriveLetter()>:
c000d160:	55                   	push   ebp
c000d161:	57                   	push   edi
c000d162:	56                   	push   esi
c000d163:	53                   	push   ebx
c000d164:	83 ec 14             	sub    esp,0x14
c000d167:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000d16b:	8b 3d 80 2d 02 c0    	mov    edi,DWORD PTR ds:0xc0022d80
c000d171:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c000d177:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000d17b:	8a 83 69 01 00 00    	mov    al,BYTE PTR [ebx+0x169]
c000d181:	8b 3d 84 2d 02 c0    	mov    edi,DWORD PTR ds:0xc0022d84
c000d187:	3c 01                	cmp    al,0x1
c000d189:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c000d18d:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000d191:	19 c0                	sbb    eax,eax
c000d193:	83 e0 02             	and    eax,0x2
c000d196:	83 c0 41             	add    eax,0x41
c000d199:	0f be e8             	movsx  ebp,al
c000d19c:	3c 43                	cmp    al,0x43
c000d19e:	75 10                	jne    c000d1b0 <LogicalDisk::assignDriveLetter()+0x50>
c000d1a0:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c000d1a7:	75 5d                	jne    c000d206 <LogicalDisk::assignDriveLetter()+0xa6>
c000d1a9:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c000d1ae:	75 56                	jne    c000d206 <LogicalDisk::assignDriveLetter()+0xa6>
c000d1b0:	8d 75 bf             	lea    esi,[ebp-0x41]
c000d1b3:	ba 01 00 00 00       	mov    edx,0x1
c000d1b8:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c000d1bc:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c000d1c0:	d3 e2                	shl    edx,cl
c000d1c2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000d1c6:	89 d7                	mov    edi,edx
c000d1c8:	89 d6                	mov    esi,edx
c000d1ca:	c1 ff 1f             	sar    edi,0x1f
c000d1cd:	23 54 24 08          	and    edx,DWORD PTR [esp+0x8]
c000d1d1:	21 f9                	and    ecx,edi
c000d1d3:	09 d1                	or     ecx,edx
c000d1d5:	75 2f                	jne    c000d206 <LogicalDisk::assignDriveLetter()+0xa6>
c000d1d7:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c000d1db:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000d1df:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c000d1e5:	09 f2                	or     edx,esi
c000d1e7:	89 15 80 2d 02 c0    	mov    DWORD PTR ds:0xc0022d80,edx
c000d1ed:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d1f1:	09 fa                	or     edx,edi
c000d1f3:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c000d1f7:	89 15 84 2d 02 c0    	mov    DWORD PTR ds:0xc0022d84,edx
c000d1fd:	89 1c bd a0 2d 02 c0 	mov    DWORD PTR [edi*4-0x3ffdd260],ebx
c000d204:	eb 08                	jmp    c000d20e <LogicalDisk::assignDriveLetter()+0xae>
c000d206:	45                   	inc    ebp
c000d207:	40                   	inc    eax
c000d208:	3c 5b                	cmp    al,0x5b
c000d20a:	75 90                	jne    c000d19c <LogicalDisk::assignDriveLetter()+0x3c>
c000d20c:	31 c0                	xor    eax,eax
c000d20e:	83 c4 14             	add    esp,0x14
c000d211:	5b                   	pop    ebx
c000d212:	5e                   	pop    esi
c000d213:	5f                   	pop    edi
c000d214:	5d                   	pop    ebp
c000d215:	c3                   	ret    

c000d216 <LogicalDisk::mount()>:
c000d216:	56                   	push   esi
c000d217:	53                   	push   ebx
c000d218:	53                   	push   ebx
c000d219:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000d21d:	8b 1d 34 09 02 c0    	mov    ebx,DWORD PTR ds:0xc0020934
c000d223:	c7 86 70 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x170],0x0
c000d22d:	85 db                	test   ebx,ebx
c000d22f:	74 27                	je     c000d258 <LogicalDisk::mount()+0x42>
c000d231:	51                   	push   ecx
c000d232:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c000d239:	8b 13                	mov    edx,DWORD PTR [ebx]
c000d23b:	83 e8 41             	sub    eax,0x41
c000d23e:	50                   	push   eax
c000d23f:	56                   	push   esi
c000d240:	53                   	push   ebx
c000d241:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000d244:	83 c4 10             	add    esp,0x10
c000d247:	84 c0                	test   al,al
c000d249:	74 08                	je     c000d253 <LogicalDisk::mount()+0x3d>
c000d24b:	89 9e 70 01 00 00    	mov    DWORD PTR [esi+0x170],ebx
c000d251:	eb 07                	jmp    c000d25a <LogicalDisk::mount()+0x44>
c000d253:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c000d256:	eb d5                	jmp    c000d22d <LogicalDisk::mount()+0x17>
c000d258:	31 c0                	xor    eax,eax
c000d25a:	5a                   	pop    edx
c000d25b:	5b                   	pop    ebx
c000d25c:	5e                   	pop    esi
c000d25d:	c3                   	ret    

c000d25e <LogicalDisk::unmount()>:
c000d25e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d262:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c000d26c:	c3                   	ret    
c000d26d:	90                   	nop

c000d26e <LogicalDisk::eject()>:
c000d26e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d272:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000d278:	8b 10                	mov    edx,DWORD PTR [eax]
c000d27a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000d27e:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c000d281:	90                   	nop

c000d282 <LogicalDisk::unassignDriveLetter()>:
c000d282:	57                   	push   edi
c000d283:	56                   	push   esi
c000d284:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d288:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c000d28f:	84 c9                	test   cl,cl
c000d291:	75 0f                	jne    c000d2a2 <LogicalDisk::unassignDriveLetter()+0x20>
c000d293:	c7 44 24 0c 8c e0 01 c0 	mov    DWORD PTR [esp+0xc],0xc001e08c
c000d29b:	5e                   	pop    esi
c000d29c:	5f                   	pop    edi
c000d29d:	e9 9d 34 00 00       	jmp    c001073f <Krnl::panic(char const*)>
c000d2a2:	83 e9 41             	sub    ecx,0x41
c000d2a5:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c000d2ac:	b8 01 00 00 00       	mov    eax,0x1
c000d2b1:	c7 04 8d a0 2d 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffdd260],0x0
c000d2bc:	d3 e0                	shl    eax,cl
c000d2be:	89 c7                	mov    edi,eax
c000d2c0:	f7 d0                	not    eax
c000d2c2:	c1 ff 1f             	sar    edi,0x1f
c000d2c5:	21 05 80 2d 02 c0    	and    DWORD PTR ds:0xc0022d80,eax
c000d2cb:	89 fe                	mov    esi,edi
c000d2cd:	f7 d6                	not    esi
c000d2cf:	21 35 84 2d 02 c0    	and    DWORD PTR ds:0xc0022d84,esi
c000d2d5:	5e                   	pop    esi
c000d2d6:	5f                   	pop    edi
c000d2d7:	c3                   	ret    

c000d2d8 <LogicalDisk::read(unsigned long long, int, void*)>:
c000d2d8:	57                   	push   edi
c000d2d9:	56                   	push   esi
c000d2da:	53                   	push   ebx
c000d2db:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000d2df:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000d2e3:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000d2e7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000d2eb:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000d2f1:	77 41                	ja     c000d334 <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c000d2f3:	99                   	cdq    
c000d2f4:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000d2fa:	01 c8                	add    eax,ecx
c000d2fc:	11 da                	adc    edx,ebx
c000d2fe:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000d304:	19 d7                	sbb    edi,edx
c000d306:	72 33                	jb     c000d33b <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c000d308:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000d30e:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000d314:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000d318:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000d31c:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000d322:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000d328:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d32c:	5b                   	pop    ebx
c000d32d:	5e                   	pop    esi
c000d32e:	5f                   	pop    edi
c000d32f:	e9 32 0a 00 00       	jmp    c000dd66 <VCache::read(unsigned long long, int, void*)>
c000d334:	b8 05 00 00 00       	mov    eax,0x5
c000d339:	eb 05                	jmp    c000d340 <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c000d33b:	b8 07 00 00 00       	mov    eax,0x7
c000d340:	5b                   	pop    ebx
c000d341:	5e                   	pop    esi
c000d342:	5f                   	pop    edi
c000d343:	c3                   	ret    

c000d344 <LogicalDisk::write(unsigned long long, int, void*)>:
c000d344:	57                   	push   edi
c000d345:	56                   	push   esi
c000d346:	53                   	push   ebx
c000d347:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000d34b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000d34f:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000d353:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000d357:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000d35d:	77 41                	ja     c000d3a0 <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c000d35f:	99                   	cdq    
c000d360:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000d366:	01 c8                	add    eax,ecx
c000d368:	11 da                	adc    edx,ebx
c000d36a:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000d370:	19 d7                	sbb    edi,edx
c000d372:	72 33                	jb     c000d3a7 <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c000d374:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000d37a:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000d380:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000d384:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000d388:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000d38e:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000d394:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d398:	5b                   	pop    ebx
c000d399:	5e                   	pop    esi
c000d39a:	5f                   	pop    edi
c000d39b:	e9 cc 08 00 00       	jmp    c000dc6c <VCache::write(unsigned long long, int, void*)>
c000d3a0:	b8 05 00 00 00       	mov    eax,0x5
c000d3a5:	eb 05                	jmp    c000d3ac <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c000d3a7:	b8 07 00 00 00       	mov    eax,0x7
c000d3ac:	5b                   	pop    ebx
c000d3ad:	5e                   	pop    esi
c000d3ae:	5f                   	pop    edi
c000d3af:	c3                   	ret    

c000d3b0 <Mouse::Mouse(char const*)>:
c000d3b0:	83 ec 0c             	sub    esp,0xc
c000d3b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d3b7:	83 ec 08             	sub    esp,0x8
c000d3ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d3be:	50                   	push   eax
c000d3bf:	e8 04 ee ff ff       	call   c000c1c8 <Device::Device(char const*)>
c000d3c4:	83 c4 10             	add    esp,0x10
c000d3c7:	ba e0 e0 01 c0       	mov    edx,0xc001e0e0
c000d3cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d3d0:	89 10                	mov    DWORD PTR [eax],edx
c000d3d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d3d6:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c000d3e0:	90                   	nop
c000d3e1:	83 c4 0c             	add    esp,0xc
c000d3e4:	c3                   	ret    
c000d3e5:	90                   	nop
c000d3e6:	66 90                	xchg   ax,ax

c000d3e8 <Mouse::~Mouse()>:
c000d3e8:	83 ec 0c             	sub    esp,0xc
c000d3eb:	ba e0 e0 01 c0       	mov    edx,0xc001e0e0
c000d3f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d3f4:	89 10                	mov    DWORD PTR [eax],edx
c000d3f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d3fa:	83 ec 0c             	sub    esp,0xc
c000d3fd:	50                   	push   eax
c000d3fe:	e8 2f eb ff ff       	call   c000bf32 <Device::~Device()>
c000d403:	83 c4 10             	add    esp,0x10
c000d406:	90                   	nop
c000d407:	83 c4 0c             	add    esp,0xc
c000d40a:	c3                   	ret    
c000d40b:	90                   	nop

c000d40c <Mouse::~Mouse()>:
c000d40c:	83 ec 0c             	sub    esp,0xc
c000d40f:	83 ec 0c             	sub    esp,0xc
c000d412:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d416:	e8 cd ff ff ff       	call   c000d3e8 <Mouse::~Mouse()>
c000d41b:	83 c4 10             	add    esp,0x10
c000d41e:	83 ec 08             	sub    esp,0x8
c000d421:	68 58 01 00 00       	push   0x158
c000d426:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d42a:	e8 cb d6 ff ff       	call   c000aafa <operator delete(void*, unsigned long)>
c000d42f:	83 c4 10             	add    esp,0x10
c000d432:	83 c4 0c             	add    esp,0xc
c000d435:	c3                   	ret    

c000d436 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c000d436:	55                   	push   ebp
c000d437:	57                   	push   edi
c000d438:	56                   	push   esi
c000d439:	53                   	push   ebx
c000d43a:	81 ec 28 01 00 00    	sub    esp,0x128
c000d440:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c000d447:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c000d44e:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c000d455:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c000d45c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000d460:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000d464:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000d46b:	e8 54 ee ff ff       	call   c000c2c4 <Device::getName()>
c000d470:	5a                   	pop    edx
c000d471:	59                   	pop    ecx
c000d472:	50                   	push   eax
c000d473:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c000d477:	55                   	push   ebp
c000d478:	e8 a3 31 ff ff       	call   c0000620 <strcpy>
c000d47d:	5b                   	pop    ebx
c000d47e:	58                   	pop    eax
c000d47f:	68 04 e1 01 c0       	push   0xc001e104
c000d484:	55                   	push   ebp
c000d485:	e8 56 33 ff ff       	call   c00007e0 <strcat>
c000d48a:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c000d491:	e8 cb a9 ff ff       	call   c0007e61 <malloc>
c000d496:	83 c4 0c             	add    esp,0xc
c000d499:	89 c3                	mov    ebx,eax
c000d49b:	57                   	push   edi
c000d49c:	56                   	push   esi
c000d49d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d4a1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d4a5:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c000d4ac:	55                   	push   ebp
c000d4ad:	50                   	push   eax
c000d4ae:	e8 f7 fb ff ff       	call   c000d0aa <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c000d4b3:	83 c4 14             	add    esp,0x14
c000d4b6:	53                   	push   ebx
c000d4b7:	e8 a4 fc ff ff       	call   c000d160 <LogicalDisk::assignDriveLetter()>
c000d4bc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000d4bf:	e8 52 fd ff ff       	call   c000d216 <LogicalDisk::mount()>
c000d4c4:	58                   	pop    eax
c000d4c5:	5a                   	pop    edx
c000d4c6:	53                   	push   ebx
c000d4c7:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000d4ce:	e8 5d eb ff ff       	call   c000c030 <Device::addChild(Device*)>
c000d4d3:	81 c4 2c 01 00 00    	add    esp,0x12c
c000d4d9:	5b                   	pop    ebx
c000d4da:	5e                   	pop    esi
c000d4db:	5f                   	pop    edi
c000d4dc:	5d                   	pop    ebp
c000d4dd:	c3                   	ret    

c000d4de <createPartitionsForDisk(PhysicalDisk*)>:
c000d4de:	55                   	push   ebp
c000d4df:	57                   	push   edi
c000d4e0:	56                   	push   esi
c000d4e1:	53                   	push   ebx
c000d4e2:	81 ec 5c 02 00 00    	sub    esp,0x25c
c000d4e8:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c000d4ef:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c000d4f5:	3d 00 02 00 00       	cmp    eax,0x200
c000d4fa:	74 27                	je     c000d523 <createPartitionsForDisk(PhysicalDisk*)+0x45>
c000d4fc:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c000d502:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c000d508:	83 ec 10             	sub    esp,0x10
c000d50b:	0f a4 f7 0a          	shld   edi,esi,0xa
c000d50f:	99                   	cdq    
c000d510:	c1 e6 0a             	shl    esi,0xa
c000d513:	52                   	push   edx
c000d514:	89 fd                	mov    ebp,edi
c000d516:	50                   	push   eax
c000d517:	55                   	push   ebp
c000d518:	56                   	push   esi
c000d519:	e8 42 eb 00 00       	call   c001c060 <__udivdi3>
c000d51e:	e9 b1 00 00 00       	jmp    c000d5d4 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c000d523:	83 ec 0c             	sub    esp,0xc
c000d526:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d528:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c000d52c:	56                   	push   esi
c000d52d:	6a 01                	push   0x1
c000d52f:	6a 00                	push   0x0
c000d531:	6a 00                	push   0x0
c000d533:	53                   	push   ebx
c000d534:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000d537:	83 c4 20             	add    esp,0x20
c000d53a:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c000d542:	75 0a                	jne    c000d54e <createPartitionsForDisk(PhysicalDisk*)+0x70>
c000d544:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c000d54c:	74 2c                	je     c000d57a <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c000d54e:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000d554:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000d55a:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000d560:	83 ec 10             	sub    esp,0x10
c000d563:	0f a4 c2 0a          	shld   edx,eax,0xa
c000d567:	89 f7                	mov    edi,esi
c000d569:	c1 e0 0a             	shl    eax,0xa
c000d56c:	c1 ff 1f             	sar    edi,0x1f
c000d56f:	57                   	push   edi
c000d570:	56                   	push   esi
c000d571:	52                   	push   edx
c000d572:	50                   	push   eax
c000d573:	e8 e8 ea 00 00       	call   c001c060 <__udivdi3>
c000d578:	eb 5a                	jmp    c000d5d4 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c000d57a:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c000d581:	8a 84 24 1e 02 00 00 	mov    al,BYTE PTR [esp+0x21e]
c000d588:	83 e1 7f             	and    ecx,0x7f
c000d58b:	83 e0 7f             	and    eax,0x7f
c000d58e:	01 c1                	add    ecx,eax
c000d590:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c000d597:	83 e0 7f             	and    eax,0x7f
c000d59a:	01 c1                	add    ecx,eax
c000d59c:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c000d5a3:	83 e0 7f             	and    eax,0x7f
c000d5a6:	00 c1                	add    cl,al
c000d5a8:	74 41                	je     c000d5eb <createPartitionsForDisk(PhysicalDisk*)+0x10d>
c000d5aa:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000d5b0:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000d5b6:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000d5bc:	83 ec 10             	sub    esp,0x10
c000d5bf:	0f a4 c2 0a          	shld   edx,eax,0xa
c000d5c3:	89 f7                	mov    edi,esi
c000d5c5:	c1 e0 0a             	shl    eax,0xa
c000d5c8:	c1 ff 1f             	sar    edi,0x1f
c000d5cb:	57                   	push   edi
c000d5cc:	56                   	push   esi
c000d5cd:	52                   	push   edx
c000d5ce:	50                   	push   eax
c000d5cf:	e8 8c ea 00 00       	call   c001c060 <__udivdi3>
c000d5d4:	83 c4 14             	add    esp,0x14
c000d5d7:	52                   	push   edx
c000d5d8:	50                   	push   eax
c000d5d9:	6a 00                	push   0x0
c000d5db:	6a 00                	push   0x0
c000d5dd:	53                   	push   ebx
c000d5de:	e8 53 fe ff ff       	call   c000d436 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000d5e3:	83 c4 20             	add    esp,0x20
c000d5e6:	e9 79 01 00 00       	jmp    c000d764 <createPartitionsForDisk(PhysicalDisk*)+0x286>
c000d5eb:	89 f0                	mov    eax,esi
c000d5ed:	31 f6                	xor    esi,esi
c000d5ef:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c000d5f6:	75 02                	jne    c000d5fa <createPartitionsForDisk(PhysicalDisk*)+0x11c>
c000d5f8:	89 f1                	mov    ecx,esi
c000d5fa:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c000d601:	0f b6 b8 c8 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c8]
c000d608:	c1 e2 08             	shl    edx,0x8
c000d60b:	c1 e7 10             	shl    edi,0x10
c000d60e:	c7 44 f4 14 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x14],0x0
c000d616:	09 fa                	or     edx,edi
c000d618:	c7 44 f4 34 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x34],0x0
c000d620:	0f b6 b8 c6 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c6]
c000d627:	83 c0 10             	add    eax,0x10
c000d62a:	09 fa                	or     edx,edi
c000d62c:	0f b6 b8 b9 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b9]
c000d633:	c1 e7 18             	shl    edi,0x18
c000d636:	09 fa                	or     edx,edi
c000d638:	0f b6 b8 bc 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bc]
c000d63f:	89 54 f4 10          	mov    DWORD PTR [esp+esi*8+0x10],edx
c000d643:	c1 e7 10             	shl    edi,0x10
c000d646:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c000d64d:	c1 e2 08             	shl    edx,0x8
c000d650:	09 fa                	or     edx,edi
c000d652:	0f b6 b8 ba 01 00 00 	movzx  edi,BYTE PTR [eax+0x1ba]
c000d659:	09 fa                	or     edx,edi
c000d65b:	0f b6 b8 bd 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bd]
c000d662:	c1 e7 18             	shl    edi,0x18
c000d665:	09 fa                	or     edx,edi
c000d667:	89 54 f4 30          	mov    DWORD PTR [esp+esi*8+0x30],edx
c000d66b:	46                   	inc    esi
c000d66c:	83 fe 04             	cmp    esi,0x4
c000d66f:	0f 85 7a ff ff ff    	jne    c000d5ef <createPartitionsForDisk(PhysicalDisk*)+0x111>
c000d675:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d679:	83 f0 01             	xor    eax,0x1
c000d67c:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000d680:	75 57                	jne    c000d6d9 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000d682:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d686:	83 f0 01             	xor    eax,0x1
c000d689:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c000d68d:	75 4a                	jne    c000d6d9 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000d68f:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c000d693:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000d69b:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000d6a3:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000d6a9:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000d6af:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000d6b5:	0f a4 c2 0a          	shld   edx,eax,0xa
c000d6b9:	89 f7                	mov    edi,esi
c000d6bb:	c1 e0 0a             	shl    eax,0xa
c000d6be:	c1 ff 1f             	sar    edi,0x1f
c000d6c1:	57                   	push   edi
c000d6c2:	56                   	push   esi
c000d6c3:	52                   	push   edx
c000d6c4:	50                   	push   eax
c000d6c5:	e8 96 e9 00 00       	call   c001c060 <__udivdi3>
c000d6ca:	83 c4 10             	add    esp,0x10
c000d6cd:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d6d1:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d6d5:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c000d6d9:	84 c9                	test   cl,cl
c000d6db:	74 53                	je     c000d730 <createPartitionsForDisk(PhysicalDisk*)+0x252>
c000d6dd:	0f b6 c9             	movzx  ecx,cl
c000d6e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d6e4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d6e8:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000d6ec:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000d6f0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d6f4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d6f8:	8b 44 cc 10          	mov    eax,DWORD PTR [esp+ecx*8+0x10]
c000d6fc:	8b 54 cc 14          	mov    edx,DWORD PTR [esp+ecx*8+0x14]
c000d700:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d704:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d708:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d70c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d710:	89 44 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],eax
c000d714:	89 54 cc 14          	mov    DWORD PTR [esp+ecx*8+0x14],edx
c000d718:	8b 44 cc 30          	mov    eax,DWORD PTR [esp+ecx*8+0x30]
c000d71c:	8b 54 cc 34          	mov    edx,DWORD PTR [esp+ecx*8+0x34]
c000d720:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d724:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d728:	89 74 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],esi
c000d72c:	89 7c cc 34          	mov    DWORD PTR [esp+ecx*8+0x34],edi
c000d730:	31 ed                	xor    ebp,ebp
c000d732:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000d736:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000d73a:	89 f8                	mov    eax,edi
c000d73c:	09 f0                	or     eax,esi
c000d73e:	74 1e                	je     c000d75e <createPartitionsForDisk(PhysicalDisk*)+0x280>
c000d740:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000d744:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000d748:	89 d1                	mov    ecx,edx
c000d74a:	09 c1                	or     ecx,eax
c000d74c:	74 10                	je     c000d75e <createPartitionsForDisk(PhysicalDisk*)+0x280>
c000d74e:	83 ec 0c             	sub    esp,0xc
c000d751:	57                   	push   edi
c000d752:	56                   	push   esi
c000d753:	52                   	push   edx
c000d754:	50                   	push   eax
c000d755:	53                   	push   ebx
c000d756:	e8 db fc ff ff       	call   c000d436 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000d75b:	83 c4 20             	add    esp,0x20
c000d75e:	45                   	inc    ebp
c000d75f:	83 fd 04             	cmp    ebp,0x4
c000d762:	75 ce                	jne    c000d732 <createPartitionsForDisk(PhysicalDisk*)+0x254>
c000d764:	81 c4 5c 02 00 00    	add    esp,0x25c
c000d76a:	5b                   	pop    ebx
c000d76b:	5e                   	pop    esi
c000d76c:	5f                   	pop    edi
c000d76d:	5d                   	pop    ebp
c000d76e:	c3                   	ret    
c000d76f:	90                   	nop

c000d770 <Serial::Serial(char const*)>:
c000d770:	83 ec 0c             	sub    esp,0xc
c000d773:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d777:	83 ec 08             	sub    esp,0x8
c000d77a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d77e:	50                   	push   eax
c000d77f:	e8 44 ea ff ff       	call   c000c1c8 <Device::Device(char const*)>
c000d784:	83 c4 10             	add    esp,0x10
c000d787:	ba 18 e1 01 c0       	mov    edx,0xc001e118
c000d78c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d790:	89 10                	mov    DWORD PTR [eax],edx
c000d792:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d796:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c000d7a0:	90                   	nop
c000d7a1:	83 c4 0c             	add    esp,0xc
c000d7a4:	c3                   	ret    
c000d7a5:	90                   	nop
c000d7a6:	66 90                	xchg   ax,ax

c000d7a8 <Serial::~Serial()>:
c000d7a8:	83 ec 0c             	sub    esp,0xc
c000d7ab:	ba 18 e1 01 c0       	mov    edx,0xc001e118
c000d7b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d7b4:	89 10                	mov    DWORD PTR [eax],edx
c000d7b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d7ba:	83 ec 0c             	sub    esp,0xc
c000d7bd:	50                   	push   eax
c000d7be:	e8 6f e7 ff ff       	call   c000bf32 <Device::~Device()>
c000d7c3:	83 c4 10             	add    esp,0x10
c000d7c6:	90                   	nop
c000d7c7:	83 c4 0c             	add    esp,0xc
c000d7ca:	c3                   	ret    
c000d7cb:	90                   	nop

c000d7cc <Serial::~Serial()>:
c000d7cc:	83 ec 0c             	sub    esp,0xc
c000d7cf:	83 ec 0c             	sub    esp,0xc
c000d7d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d7d6:	e8 cd ff ff ff       	call   c000d7a8 <Serial::~Serial()>
c000d7db:	83 c4 10             	add    esp,0x10
c000d7de:	83 ec 08             	sub    esp,0x8
c000d7e1:	68 58 01 00 00       	push   0x158
c000d7e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d7ea:	e8 0b d3 ff ff       	call   c000aafa <operator delete(void*, unsigned long)>
c000d7ef:	83 c4 10             	add    esp,0x10
c000d7f2:	83 c4 0c             	add    esp,0xc
c000d7f5:	c3                   	ret    
c000d7f6:	66 90                	xchg   ax,ax

c000d7f8 <Timer::Timer(char const*)>:
c000d7f8:	83 ec 0c             	sub    esp,0xc
c000d7fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d7ff:	83 ec 08             	sub    esp,0x8
c000d802:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d806:	50                   	push   eax
c000d807:	e8 bc e9 ff ff       	call   c000c1c8 <Device::Device(char const*)>
c000d80c:	83 c4 10             	add    esp,0x10
c000d80f:	ba 5c e1 01 c0       	mov    edx,0xc001e15c
c000d814:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d818:	89 10                	mov    DWORD PTR [eax],edx
c000d81a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d81e:	c7 80 10 01 00 00 0e 00 00 00 	mov    DWORD PTR [eax+0x110],0xe
c000d828:	90                   	nop
c000d829:	83 c4 0c             	add    esp,0xc
c000d82c:	c3                   	ret    
c000d82d:	90                   	nop
c000d82e:	66 90                	xchg   ax,ax

c000d830 <Timer::~Timer()>:
c000d830:	83 ec 0c             	sub    esp,0xc
c000d833:	ba 5c e1 01 c0       	mov    edx,0xc001e15c
c000d838:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d83c:	89 10                	mov    DWORD PTR [eax],edx
c000d83e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d842:	83 ec 0c             	sub    esp,0xc
c000d845:	50                   	push   eax
c000d846:	e8 e7 e6 ff ff       	call   c000bf32 <Device::~Device()>
c000d84b:	83 c4 10             	add    esp,0x10
c000d84e:	90                   	nop
c000d84f:	83 c4 0c             	add    esp,0xc
c000d852:	c3                   	ret    
c000d853:	90                   	nop

c000d854 <Timer::~Timer()>:
c000d854:	83 ec 0c             	sub    esp,0xc
c000d857:	83 ec 0c             	sub    esp,0xc
c000d85a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d85e:	e8 cd ff ff ff       	call   c000d830 <Timer::~Timer()>
c000d863:	83 c4 10             	add    esp,0x10
c000d866:	83 ec 08             	sub    esp,0x8
c000d869:	68 5c 01 00 00       	push   0x15c
c000d86e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d872:	e8 83 d2 ff ff       	call   c000aafa <operator delete(void*, unsigned long)>
c000d877:	83 c4 10             	add    esp,0x10
c000d87a:	83 c4 0c             	add    esp,0xc
c000d87d:	c3                   	ret    

c000d87e <Timer::read()>:
c000d87e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d882:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000d888:	c3                   	ret    

c000d889 <setupTimer(int)>:
c000d889:	53                   	push   ebx
c000d88a:	83 ec 14             	sub    esp,0x14
c000d88d:	68 5c 01 00 00       	push   0x15c
c000d892:	e8 ca a5 ff ff       	call   c0007e61 <malloc>
c000d897:	89 04 24             	mov    DWORD PTR [esp],eax
c000d89a:	89 c3                	mov    ebx,eax
c000d89c:	e8 37 e1 00 00       	call   c001b9d8 <PIT::PIT()>
c000d8a1:	58                   	pop    eax
c000d8a2:	5a                   	pop    edx
c000d8a3:	53                   	push   ebx
c000d8a4:	ff 35 44 08 02 c0    	push   DWORD PTR ds:0xc0020844
c000d8aa:	e8 81 e7 ff ff       	call   c000c030 <Device::addChild(Device*)>
c000d8af:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d8b1:	6a 00                	push   0x0
c000d8b3:	6a 00                	push   0x0
c000d8b5:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000d8b9:	53                   	push   ebx
c000d8ba:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000d8bd:	89 d8                	mov    eax,ebx
c000d8bf:	83 c4 28             	add    esp,0x28
c000d8c2:	5b                   	pop    ebx
c000d8c3:	c3                   	ret    

c000d8c4 <timerHandler(unsigned int)>:
c000d8c4:	56                   	push   esi
c000d8c5:	53                   	push   ebx
c000d8c6:	51                   	push   ecx
c000d8c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d8cb:	01 05 0c 2e 02 c0    	add    DWORD PTR ds:0xc0022e0c,eax
c000d8d1:	80 3d 49 08 02 c0 00 	cmp    BYTE PTR ds:0xc0020849,0x0
c000d8d8:	0f 84 4a 01 00 00    	je     c000da28 <timerHandler(unsigned int)+0x164>
c000d8de:	fa                   	cli    
c000d8df:	ff 05 08 3d 02 c0    	inc    DWORD PTR ds:0xc0023d08
c000d8e5:	83 ec 0c             	sub    esp,0xc
c000d8e8:	ff 05 04 3d 02 c0    	inc    DWORD PTR ds:0xc0023d04
c000d8ee:	68 18 3d 02 c0       	push   0xc0023d18
c000d8f3:	e8 38 ed 00 00       	call   c001c630 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000d8f8:	83 c4 10             	add    esp,0x10
c000d8fb:	84 c0                	test   al,al
c000d8fd:	0f 85 a1 00 00 00    	jne    c000d9a4 <timerHandler(unsigned int)+0xe0>
c000d903:	83 ec 0c             	sub    esp,0xc
c000d906:	68 18 3d 02 c0       	push   0xc0023d18
c000d90b:	e8 3c ed 00 00       	call   c001c64c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000d910:	83 c4 10             	add    esp,0x10
c000d913:	89 c6                	mov    esi,eax
c000d915:	8d 76 00             	lea    esi,[esi+0x0]
c000d918:	83 ec 0c             	sub    esp,0xc
c000d91b:	68 18 3d 02 c0       	push   0xc0023d18
c000d920:	e8 27 ed 00 00       	call   c001c64c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000d925:	c7 04 24 18 3d 02 c0 	mov    DWORD PTR [esp],0xc0023d18
c000d92c:	89 c3                	mov    ebx,eax
c000d92e:	e8 21 ed 00 00       	call   c001c654 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c000d933:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000d936:	83 c4 10             	add    esp,0x10
c000d939:	3b 05 0c 2e 02 c0    	cmp    eax,DWORD PTR ds:0xc0022e0c
c000d93f:	77 23                	ja     c000d964 <timerHandler(unsigned int)+0xa0>
c000d941:	83 ec 0c             	sub    esp,0xc
c000d944:	53                   	push   ebx
c000d945:	e8 0e 66 00 00       	call   c0013f58 <unblockTask(ThreadControlBlock*)>
c000d94a:	83 c4 10             	add    esp,0x10
c000d94d:	39 de                	cmp    esi,ebx
c000d94f:	75 27                	jne    c000d978 <timerHandler(unsigned int)+0xb4>
c000d951:	83 ec 0c             	sub    esp,0xc
c000d954:	68 18 3d 02 c0       	push   0xc0023d18
c000d959:	e8 ee ec 00 00       	call   c001c64c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000d95e:	89 c6                	mov    esi,eax
c000d960:	eb 12                	jmp    c000d974 <timerHandler(unsigned int)+0xb0>
c000d962:	66 90                	xchg   ax,ax
c000d964:	52                   	push   edx
c000d965:	52                   	push   edx
c000d966:	53                   	push   ebx
c000d967:	68 18 3d 02 c0       	push   0xc0023d18
c000d96c:	e8 9b ed 00 00       	call   c001c70c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c000d971:	8d 76 00             	lea    esi,[esi+0x0]
c000d974:	83 c4 10             	add    esp,0x10
c000d977:	90                   	nop
c000d978:	83 ec 0c             	sub    esp,0xc
c000d97b:	68 18 3d 02 c0       	push   0xc0023d18
c000d980:	e8 ab ec 00 00       	call   c001c630 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000d985:	83 c4 10             	add    esp,0x10
c000d988:	84 c0                	test   al,al
c000d98a:	75 18                	jne    c000d9a4 <timerHandler(unsigned int)+0xe0>
c000d98c:	83 ec 0c             	sub    esp,0xc
c000d98f:	68 18 3d 02 c0       	push   0xc0023d18
c000d994:	e8 b3 ec 00 00       	call   c001c64c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000d999:	83 c4 10             	add    esp,0x10
c000d99c:	39 f0                	cmp    eax,esi
c000d99e:	0f 85 74 ff ff ff    	jne    c000d918 <timerHandler(unsigned int)+0x54>
c000d9a4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000d9a9:	83 78 34 00          	cmp    DWORD PTR [eax+0x34],0x0
c000d9ad:	74 41                	je     c000d9f0 <timerHandler(unsigned int)+0x12c>
c000d9af:	80 3d 48 08 02 c0 00 	cmp    BYTE PTR ds:0xc0020848,0x0
c000d9b6:	74 38                	je     c000d9f0 <timerHandler(unsigned int)+0x12c>
c000d9b8:	fa                   	cli    
c000d9b9:	ff 05 08 3d 02 c0    	inc    DWORD PTR ds:0xc0023d08
c000d9bf:	a1 0c 2e 02 c0       	mov    eax,ds:0xc0022e0c
c000d9c4:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000d9ca:	29 42 34             	sub    DWORD PTR [edx+0x34],eax
c000d9cd:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000d9d3:	3b 42 34             	cmp    eax,DWORD PTR [edx+0x34]
c000d9d6:	72 08                	jb     c000d9e0 <timerHandler(unsigned int)+0x11c>
c000d9d8:	e8 b7 60 00 00       	call   c0013a94 <schedule()>
c000d9dd:	8d 76 00             	lea    esi,[esi+0x0]
c000d9e0:	a1 08 3d 02 c0       	mov    eax,ds:0xc0023d08
c000d9e5:	48                   	dec    eax
c000d9e6:	a3 08 3d 02 c0       	mov    ds:0xc0023d08,eax
c000d9eb:	75 03                	jne    c000d9f0 <timerHandler(unsigned int)+0x12c>
c000d9ed:	fb                   	sti    
c000d9ee:	66 90                	xchg   ax,ax
c000d9f0:	a1 04 3d 02 c0       	mov    eax,ds:0xc0023d04
c000d9f5:	48                   	dec    eax
c000d9f6:	a3 04 3d 02 c0       	mov    ds:0xc0023d04,eax
c000d9fb:	75 1b                	jne    c000da18 <timerHandler(unsigned int)+0x154>
c000d9fd:	83 3d 00 3d 02 c0 00 	cmp    DWORD PTR ds:0xc0023d00,0x0
c000da04:	74 12                	je     c000da18 <timerHandler(unsigned int)+0x154>
c000da06:	c7 05 00 3d 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023d00,0x0
c000da10:	e8 7f 60 00 00       	call   c0013a94 <schedule()>
c000da15:	8d 76 00             	lea    esi,[esi+0x0]
c000da18:	a1 08 3d 02 c0       	mov    eax,ds:0xc0023d08
c000da1d:	48                   	dec    eax
c000da1e:	a3 08 3d 02 c0       	mov    ds:0xc0023d08,eax
c000da23:	75 03                	jne    c000da28 <timerHandler(unsigned int)+0x164>
c000da25:	fb                   	sti    
c000da26:	66 90                	xchg   ax,ax
c000da28:	58                   	pop    eax
c000da29:	5b                   	pop    ebx
c000da2a:	5e                   	pop    esi
c000da2b:	c3                   	ret    

c000da2c <VCache::VCache(PhysicalDisk*)>:
c000da2c:	53                   	push   ebx
c000da2d:	83 ec 18             	sub    esp,0x18
c000da30:	ba 8c e1 01 c0       	mov    edx,0xc001e18c
c000da35:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da39:	89 10                	mov    DWORD PTR [eax],edx
c000da3b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da3f:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c000da46:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da4a:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c000da51:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da55:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c000da5c:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c000da63:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da67:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c000da6e:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c000da75:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da79:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c000da80:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da84:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000da88:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da8c:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c000da93:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c000da9a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da9e:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000daa2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000daa6:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c000daaa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000daae:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000dab2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dab6:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000dabd:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c000dac5:	83 ec 0c             	sub    esp,0xc
c000dac8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000dacc:	e8 90 a3 ff ff       	call   c0007e61 <malloc>
c000dad1:	83 c4 10             	add    esp,0x10
c000dad4:	89 c3                	mov    ebx,eax
c000dad6:	83 ec 0c             	sub    esp,0xc
c000dad9:	53                   	push   ebx
c000dada:	e8 81 5d 00 00       	call   c0013860 <Mutex::Mutex()>
c000dadf:	83 c4 10             	add    esp,0x10
c000dae2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dae6:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000dae9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000daed:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000daf1:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000daf4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000daf8:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c000daff:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000db03:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000db09:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000db0d:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000db10:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000db14:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c000db1a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000db20:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000db24:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c000db27:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c000db2a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000db2e:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000db32:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000db36:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000db3c:	05 00 01 00 00       	add    eax,0x100
c000db41:	c1 e0 04             	shl    eax,0x4
c000db44:	83 ec 0c             	sub    esp,0xc
c000db47:	50                   	push   eax
c000db48:	e8 14 a3 ff ff       	call   c0007e61 <malloc>
c000db4d:	83 c4 10             	add    esp,0x10
c000db50:	89 c2                	mov    edx,eax
c000db52:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000db56:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000db59:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000db5d:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000db64:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000db68:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000db6c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000db70:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000db76:	c1 e0 06             	shl    eax,0x6
c000db79:	83 ec 0c             	sub    esp,0xc
c000db7c:	50                   	push   eax
c000db7d:	e8 df a2 ff ff       	call   c0007e61 <malloc>
c000db82:	83 c4 10             	add    esp,0x10
c000db85:	89 c2                	mov    edx,eax
c000db87:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000db8b:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000db8e:	90                   	nop
c000db8f:	83 c4 18             	add    esp,0x18
c000db92:	5b                   	pop    ebx
c000db93:	c3                   	ret    

c000db94 <VCache::invalidateReadBuffer()>:
c000db94:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000db98:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c000db9e:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000dba2:	c3                   	ret    
c000dba3:	90                   	nop

c000dba4 <VCache::writeWriteBuffer()>:
c000dba4:	53                   	push   ebx
c000dba5:	83 ec 08             	sub    esp,0x8
c000dba8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000dbac:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000dbb0:	74 1e                	je     c000dbd0 <VCache::writeWriteBuffer()+0x2c>
c000dbb2:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000dbb5:	83 ec 0c             	sub    esp,0xc
c000dbb8:	8b 10                	mov    edx,DWORD PTR [eax]
c000dbba:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c000dbbd:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c000dbc0:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c000dbc3:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000dbc6:	50                   	push   eax
c000dbc7:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c000dbca:	83 c4 20             	add    esp,0x20
c000dbcd:	8d 76 00             	lea    esi,[esi+0x0]
c000dbd0:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000dbd7:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c000dbde:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c000dbe2:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c000dbe9:	83 c4 08             	add    esp,0x8
c000dbec:	5b                   	pop    ebx
c000dbed:	c3                   	ret    
c000dbee:	66 90                	xchg   ax,ax

c000dbf0 <VCache::~VCache()>:
c000dbf0:	83 ec 0c             	sub    esp,0xc
c000dbf3:	ba 8c e1 01 c0       	mov    edx,0xc001e18c
c000dbf8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dbfc:	89 10                	mov    DWORD PTR [eax],edx
c000dbfe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dc02:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c000dc05:	84 c0                	test   al,al
c000dc07:	74 0f                	je     c000dc18 <VCache::~VCache()+0x28>
c000dc09:	83 ec 0c             	sub    esp,0xc
c000dc0c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc10:	e8 8f ff ff ff       	call   c000dba4 <VCache::writeWriteBuffer()>
c000dc15:	83 c4 10             	add    esp,0x10
c000dc18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dc1c:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000dc1f:	83 ec 0c             	sub    esp,0xc
c000dc22:	50                   	push   eax
c000dc23:	e8 49 a2 ff ff       	call   c0007e71 <free>
c000dc28:	83 c4 10             	add    esp,0x10
c000dc2b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dc2f:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000dc32:	83 ec 0c             	sub    esp,0xc
c000dc35:	50                   	push   eax
c000dc36:	e8 36 a2 ff ff       	call   c0007e71 <free>
c000dc3b:	83 c4 10             	add    esp,0x10
c000dc3e:	90                   	nop
c000dc3f:	83 c4 0c             	add    esp,0xc
c000dc42:	c3                   	ret    
c000dc43:	90                   	nop

c000dc44 <VCache::~VCache()>:
c000dc44:	83 ec 0c             	sub    esp,0xc
c000dc47:	83 ec 0c             	sub    esp,0xc
c000dc4a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc4e:	e8 9d ff ff ff       	call   c000dbf0 <VCache::~VCache()>
c000dc53:	83 c4 10             	add    esp,0x10
c000dc56:	83 ec 08             	sub    esp,0x8
c000dc59:	6a 44                	push   0x44
c000dc5b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc5f:	e8 96 ce ff ff       	call   c000aafa <operator delete(void*, unsigned long)>
c000dc64:	83 c4 10             	add    esp,0x10
c000dc67:	83 c4 0c             	add    esp,0xc
c000dc6a:	c3                   	ret    
c000dc6b:	90                   	nop

c000dc6c <VCache::write(unsigned long long, int, void*)>:
c000dc6c:	55                   	push   ebp
c000dc6d:	31 c0                	xor    eax,eax
c000dc6f:	57                   	push   edi
c000dc70:	56                   	push   esi
c000dc71:	53                   	push   ebx
c000dc72:	83 ec 0c             	sub    esp,0xc
c000dc75:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000dc79:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000dc7d:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c000dc81:	8d 76 00             	lea    esi,[esi+0x0]
c000dc84:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c000dc88:	7d 1a                	jge    c000dca4 <VCache::write(unsigned long long, int, void*)+0x38>
c000dc8a:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000dc8d:	8b 8a 5c 01 00 00    	mov    ecx,DWORD PTR [edx+0x15c]
c000dc93:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000dc97:	0f af c8             	imul   ecx,eax
c000dc9a:	01 ca                	add    edx,ecx
c000dc9c:	8b 0a                	mov    ecx,DWORD PTR [edx]
c000dc9e:	40                   	inc    eax
c000dc9f:	eb e3                	jmp    c000dc84 <VCache::write(unsigned long long, int, void*)+0x18>
c000dca1:	8d 76 00             	lea    esi,[esi+0x0]
c000dca4:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c000dca8:	74 0a                	je     c000dcb4 <VCache::write(unsigned long long, int, void*)+0x48>
c000dcaa:	53                   	push   ebx
c000dcab:	e8 e4 fe ff ff       	call   c000db94 <VCache::invalidateReadBuffer()>
c000dcb0:	58                   	pop    eax
c000dcb1:	8d 76 00             	lea    esi,[esi+0x0]
c000dcb4:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000dcb8:	74 5e                	je     c000dd18 <VCache::write(unsigned long long, int, void*)+0xac>
c000dcba:	8b 6b 24             	mov    ebp,DWORD PTR [ebx+0x24]
c000dcbd:	89 e8                	mov    eax,ebp
c000dcbf:	99                   	cdq    
c000dcc0:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c000dcc3:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c000dcc6:	89 c1                	mov    ecx,eax
c000dcc8:	89 d0                	mov    eax,edx
c000dcca:	31 f1                	xor    ecx,esi
c000dccc:	31 f8                	xor    eax,edi
c000dcce:	09 c1                	or     ecx,eax
c000dcd0:	75 3a                	jne    c000dd0c <VCache::write(unsigned long long, int, void*)+0xa0>
c000dcd2:	83 7c 24 2c 01       	cmp    DWORD PTR [esp+0x2c],0x1
c000dcd7:	75 33                	jne    c000dd0c <VCache::write(unsigned long long, int, void*)+0xa0>
c000dcd9:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000dcdc:	89 ef                	mov    edi,ebp
c000dcde:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000dce4:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000dce8:	0f af f9             	imul   edi,ecx
c000dceb:	03 7b 28             	add    edi,DWORD PTR [ebx+0x28]
c000dcee:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000dcf0:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c000dcf3:	40                   	inc    eax
c000dcf4:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000dcf7:	83 f8 40             	cmp    eax,0x40
c000dcfa:	75 60                	jne    c000dd5c <VCache::write(unsigned long long, int, void*)+0xf0>
c000dcfc:	83 ec 0c             	sub    esp,0xc
c000dcff:	53                   	push   ebx
c000dd00:	e8 9f fe ff ff       	call   c000dba4 <VCache::writeWriteBuffer()>
c000dd05:	83 c4 10             	add    esp,0x10
c000dd08:	eb 52                	jmp    c000dd5c <VCache::write(unsigned long long, int, void*)+0xf0>
c000dd0a:	66 90                	xchg   ax,ax
c000dd0c:	83 ec 0c             	sub    esp,0xc
c000dd0f:	53                   	push   ebx
c000dd10:	e8 8f fe ff ff       	call   c000dba4 <VCache::writeWriteBuffer()>
c000dd15:	83 c4 10             	add    esp,0x10
c000dd18:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000dd1b:	83 7c 24 2c 3f       	cmp    DWORD PTR [esp+0x2c],0x3f
c000dd20:	7f 22                	jg     c000dd44 <VCache::write(unsigned long long, int, void*)+0xd8>
c000dd22:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c000dd25:	89 7b 20             	mov    DWORD PTR [ebx+0x20],edi
c000dd28:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000dd2c:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c000dd30:	89 53 24             	mov    DWORD PTR [ebx+0x24],edx
c000dd33:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c000dd36:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000dd3c:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000dd40:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000dd42:	eb 18                	jmp    c000dd5c <VCache::write(unsigned long long, int, void*)+0xf0>
c000dd44:	83 ec 0c             	sub    esp,0xc
c000dd47:	8b 10                	mov    edx,DWORD PTR [eax]
c000dd49:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000dd4d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000dd51:	57                   	push   edi
c000dd52:	56                   	push   esi
c000dd53:	50                   	push   eax
c000dd54:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c000dd57:	83 c4 20             	add    esp,0x20
c000dd5a:	66 90                	xchg   ax,ax
c000dd5c:	83 c4 0c             	add    esp,0xc
c000dd5f:	31 c0                	xor    eax,eax
c000dd61:	5b                   	pop    ebx
c000dd62:	5e                   	pop    esi
c000dd63:	5f                   	pop    edi
c000dd64:	5d                   	pop    ebp
c000dd65:	c3                   	ret    

c000dd66 <VCache::read(unsigned long long, int, void*)>:
c000dd66:	55                   	push   ebp
c000dd67:	31 c0                	xor    eax,eax
c000dd69:	57                   	push   edi
c000dd6a:	56                   	push   esi
c000dd6b:	53                   	push   ebx
c000dd6c:	83 ec 1c             	sub    esp,0x1c
c000dd6f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000dd73:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c000dd77:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000dd7b:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000dd7f:	90                   	nop
c000dd80:	39 e8                	cmp    eax,ebp
c000dd82:	7d 18                	jge    c000dd9c <VCache::read(unsigned long long, int, void*)+0x36>
c000dd84:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000dd87:	8b 8a 5c 01 00 00    	mov    ecx,DWORD PTR [edx+0x15c]
c000dd8d:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000dd91:	0f af c8             	imul   ecx,eax
c000dd94:	01 ca                	add    edx,ecx
c000dd96:	8b 0a                	mov    ecx,DWORD PTR [edx]
c000dd98:	40                   	inc    eax
c000dd99:	eb e5                	jmp    c000dd80 <VCache::read(unsigned long long, int, void*)+0x1a>
c000dd9b:	90                   	nop
c000dd9c:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000dda0:	74 0e                	je     c000ddb0 <VCache::read(unsigned long long, int, void*)+0x4a>
c000dda2:	83 ec 0c             	sub    esp,0xc
c000dda5:	53                   	push   ebx
c000dda6:	e8 f9 fd ff ff       	call   c000dba4 <VCache::writeWriteBuffer()>
c000ddab:	83 c4 10             	add    esp,0x10
c000ddae:	66 90                	xchg   ax,ax
c000ddb0:	83 fd 01             	cmp    ebp,0x1
c000ddb3:	0f 85 87 00 00 00    	jne    c000de40 <VCache::read(unsigned long long, int, void*)+0xda>
c000ddb9:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000ddbc:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000ddc0:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c000ddc7:	75 77                	jne    c000de40 <VCache::read(unsigned long long, int, void*)+0xda>
c000ddc9:	8b 6b 40             	mov    ebp,DWORD PTR [ebx+0x40]
c000ddcc:	89 e9                	mov    ecx,ebp
c000ddce:	f7 d9                	neg    ecx
c000ddd0:	89 c8                	mov    eax,ecx
c000ddd2:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000ddd6:	c1 f8 1f             	sar    eax,0x1f
c000ddd9:	21 f1                	and    ecx,esi
c000dddb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000dddf:	89 c8                	mov    eax,ecx
c000dde1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000dde5:	21 f9                	and    ecx,edi
c000dde7:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c000ddeb:	89 ca                	mov    edx,ecx
c000dded:	74 0d                	je     c000ddfc <VCache::read(unsigned long long, int, void*)+0x96>
c000ddef:	39 4b 34             	cmp    DWORD PTR [ebx+0x34],ecx
c000ddf2:	75 08                	jne    c000ddfc <VCache::read(unsigned long long, int, void*)+0x96>
c000ddf4:	39 43 30             	cmp    DWORD PTR [ebx+0x30],eax
c000ddf7:	74 27                	je     c000de20 <VCache::read(unsigned long long, int, void*)+0xba>
c000ddf9:	8d 76 00             	lea    esi,[esi+0x0]
c000ddfc:	83 ec 0c             	sub    esp,0xc
c000ddff:	c6 43 3c 01          	mov    BYTE PTR [ebx+0x3c],0x1
c000de03:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000de07:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000de0a:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000de0d:	8b 09                	mov    ecx,DWORD PTR [ecx]
c000de0f:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000de12:	55                   	push   ebp
c000de13:	52                   	push   edx
c000de14:	50                   	push   eax
c000de15:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000de19:	ff 51 28             	call   DWORD PTR [ecx+0x28]
c000de1c:	83 c4 20             	add    esp,0x20
c000de1f:	90                   	nop
c000de20:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000de23:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000de27:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000de2d:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000de30:	48                   	dec    eax
c000de31:	21 c6                	and    esi,eax
c000de33:	0f af f1             	imul   esi,ecx
c000de36:	03 73 38             	add    esi,DWORD PTR [ebx+0x38]
c000de39:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000de3b:	eb 23                	jmp    c000de60 <VCache::read(unsigned long long, int, void*)+0xfa>
c000de3d:	8d 76 00             	lea    esi,[esi+0x0]
c000de40:	83 ec 0c             	sub    esp,0xc
c000de43:	53                   	push   ebx
c000de44:	e8 4b fd ff ff       	call   c000db94 <VCache::invalidateReadBuffer()>
c000de49:	5a                   	pop    edx
c000de4a:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000de4d:	8b 10                	mov    edx,DWORD PTR [eax]
c000de4f:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000de53:	55                   	push   ebp
c000de54:	57                   	push   edi
c000de55:	56                   	push   esi
c000de56:	50                   	push   eax
c000de57:	ff 52 28             	call   DWORD PTR [edx+0x28]
c000de5a:	83 c4 20             	add    esp,0x20
c000de5d:	8d 76 00             	lea    esi,[esi+0x0]
c000de60:	83 c4 1c             	add    esp,0x1c
c000de63:	31 c0                	xor    eax,eax
c000de65:	5b                   	pop    ebx
c000de66:	5e                   	pop    esi
c000de67:	5f                   	pop    edi
c000de68:	5d                   	pop    ebp
c000de69:	c3                   	ret    

c000de6a <Video::putrect(int, int, int, int, unsigned int)>:
c000de6a:	55                   	push   ebp
c000de6b:	57                   	push   edi
c000de6c:	56                   	push   esi
c000de6d:	53                   	push   ebx
c000de6e:	83 ec 1c             	sub    esp,0x1c
c000de71:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000de75:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000de79:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000de7d:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c000de81:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000de85:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000de89:	01 df                	add    edi,ebx
c000de8b:	39 fb                	cmp    ebx,edi
c000de8d:	7d 1f                	jge    c000deae <Video::putrect(int, int, int, int, unsigned int)+0x44>
c000de8f:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000de93:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c000de97:	7d 12                	jge    c000deab <Video::putrect(int, int, int, int, unsigned int)+0x41>
c000de99:	8b 16                	mov    edx,DWORD PTR [esi]
c000de9b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000de9f:	53                   	push   ebx
c000dea0:	55                   	push   ebp
c000dea1:	45                   	inc    ebp
c000dea2:	56                   	push   esi
c000dea3:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000dea6:	83 c4 10             	add    esp,0x10
c000dea9:	eb e8                	jmp    c000de93 <Video::putrect(int, int, int, int, unsigned int)+0x29>
c000deab:	43                   	inc    ebx
c000deac:	eb dd                	jmp    c000de8b <Video::putrect(int, int, int, int, unsigned int)+0x21>
c000deae:	83 c4 1c             	add    esp,0x1c
c000deb1:	5b                   	pop    ebx
c000deb2:	5e                   	pop    esi
c000deb3:	5f                   	pop    edi
c000deb4:	5d                   	pop    ebp
c000deb5:	c3                   	ret    

c000deb6 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c000deb6:	55                   	push   ebp
c000deb7:	57                   	push   edi
c000deb8:	31 ff                	xor    edi,edi
c000deba:	56                   	push   esi
c000debb:	53                   	push   ebx
c000debc:	83 ec 1c             	sub    esp,0x1c
c000debf:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c000dec3:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000dec7:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c000dece:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c000ded3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ded7:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c000dedb:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000dedf:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c000dee2:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000dee6:	01 f9                	add    ecx,edi
c000dee8:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c000deec:	7d 2f                	jge    c000df1d <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c000deee:	31 f6                	xor    esi,esi
c000def0:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000def4:	01 f2                	add    edx,esi
c000def6:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c000defa:	7d 1a                	jge    c000df16 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c000defc:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000deff:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c000df02:	46                   	inc    esi
c000df03:	51                   	push   ecx
c000df04:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000df08:	52                   	push   edx
c000df09:	55                   	push   ebp
c000df0a:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000df0d:	83 c4 10             	add    esp,0x10
c000df10:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000df14:	eb da                	jmp    c000def0 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c000df16:	47                   	inc    edi
c000df17:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c000df1b:	eb c5                	jmp    c000dee2 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c000df1d:	83 c4 1c             	add    esp,0x1c
c000df20:	5b                   	pop    ebx
c000df21:	5e                   	pop    esi
c000df22:	5f                   	pop    edi
c000df23:	5d                   	pop    ebp
c000df24:	c3                   	ret    
c000df25:	90                   	nop

c000df26 <Video::blit(unsigned int*, int, int, int, int)>:
c000df26:	55                   	push   ebp
c000df27:	57                   	push   edi
c000df28:	56                   	push   esi
c000df29:	53                   	push   ebx
c000df2a:	83 ec 1c             	sub    esp,0x1c
c000df2d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000df31:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000df35:	85 c0                	test   eax,eax
c000df37:	79 02                	jns    c000df3b <Video::blit(unsigned int*, int, int, int, int)+0x15>
c000df39:	31 c0                	xor    eax,eax
c000df3b:	c1 e0 02             	shl    eax,0x2
c000df3e:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000df42:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000df46:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000df4a:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c000df4e:	39 d8                	cmp    eax,ebx
c000df50:	7e 49                	jle    c000df9b <Video::blit(unsigned int*, int, int, int, int)+0x75>
c000df52:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000df58:	7c 41                	jl     c000df9b <Video::blit(unsigned int*, int, int, int, int)+0x75>
c000df5a:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000df5e:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000df62:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000df66:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c000df6a:	39 f9                	cmp    ecx,edi
c000df6c:	7e 22                	jle    c000df90 <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c000df6e:	83 c5 04             	add    ebp,0x4
c000df71:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000df77:	7c 14                	jl     c000df8d <Video::blit(unsigned int*, int, int, int, int)+0x67>
c000df79:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000df7b:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c000df7e:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000df82:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000df86:	56                   	push   esi
c000df87:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c000df8a:	83 c4 10             	add    esp,0x10
c000df8d:	47                   	inc    edi
c000df8e:	eb d2                	jmp    c000df62 <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c000df90:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000df94:	43                   	inc    ebx
c000df95:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000df99:	eb ab                	jmp    c000df46 <Video::blit(unsigned int*, int, int, int, int)+0x20>
c000df9b:	83 c4 1c             	add    esp,0x1c
c000df9e:	5b                   	pop    ebx
c000df9f:	5e                   	pop    esi
c000dfa0:	5f                   	pop    edi
c000dfa1:	5d                   	pop    ebp
c000dfa2:	c3                   	ret    
c000dfa3:	90                   	nop

c000dfa4 <Video::clearScreen(unsigned int)>:
c000dfa4:	57                   	push   edi
c000dfa5:	56                   	push   esi
c000dfa6:	53                   	push   ebx
c000dfa7:	31 db                	xor    ebx,ebx
c000dfa9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000dfad:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000dfb3:	7e 1f                	jle    c000dfd4 <Video::clearScreen(unsigned int)+0x30>
c000dfb5:	31 ff                	xor    edi,edi
c000dfb7:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000dfbd:	7e 12                	jle    c000dfd1 <Video::clearScreen(unsigned int)+0x2d>
c000dfbf:	8b 06                	mov    eax,DWORD PTR [esi]
c000dfc1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dfc5:	53                   	push   ebx
c000dfc6:	57                   	push   edi
c000dfc7:	47                   	inc    edi
c000dfc8:	56                   	push   esi
c000dfc9:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000dfcc:	83 c4 10             	add    esp,0x10
c000dfcf:	eb e6                	jmp    c000dfb7 <Video::clearScreen(unsigned int)+0x13>
c000dfd1:	43                   	inc    ebx
c000dfd2:	eb d9                	jmp    c000dfad <Video::clearScreen(unsigned int)+0x9>
c000dfd4:	5b                   	pop    ebx
c000dfd5:	5e                   	pop    esi
c000dfd6:	5f                   	pop    edi
c000dfd7:	c3                   	ret    

c000dfd8 <Video::putpixel(int, int, unsigned int)>:
c000dfd8:	c7 44 24 04 94 e1 01 c0 	mov    DWORD PTR [esp+0x4],0xc001e194
c000dfe0:	e9 5a 27 00 00       	jmp    c001073f <Krnl::panic(char const*)>
c000dfe5:	90                   	nop

c000dfe6 <Video::Video(char const*)>:
c000dfe6:	83 ec 0c             	sub    esp,0xc
c000dfe9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dfed:	83 ec 08             	sub    esp,0x8
c000dff0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dff4:	50                   	push   eax
c000dff5:	e8 ce e1 ff ff       	call   c000c1c8 <Device::Device(char const*)>
c000dffa:	83 c4 10             	add    esp,0x10
c000dffd:	ba 04 e2 01 c0       	mov    edx,0xc001e204
c000e002:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e006:	89 10                	mov    DWORD PTR [eax],edx
c000e008:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e00c:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c000e016:	90                   	nop
c000e017:	83 c4 0c             	add    esp,0xc
c000e01a:	c3                   	ret    
c000e01b:	90                   	nop

c000e01c <Video::~Video()>:
c000e01c:	83 ec 0c             	sub    esp,0xc
c000e01f:	ba 04 e2 01 c0       	mov    edx,0xc001e204
c000e024:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e028:	89 10                	mov    DWORD PTR [eax],edx
c000e02a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e02e:	83 ec 0c             	sub    esp,0xc
c000e031:	50                   	push   eax
c000e032:	e8 fb de ff ff       	call   c000bf32 <Device::~Device()>
c000e037:	83 c4 10             	add    esp,0x10
c000e03a:	90                   	nop
c000e03b:	83 c4 0c             	add    esp,0xc
c000e03e:	c3                   	ret    
c000e03f:	90                   	nop

c000e040 <Video::~Video()>:
c000e040:	83 ec 0c             	sub    esp,0xc
c000e043:	83 ec 0c             	sub    esp,0xc
c000e046:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e04a:	e8 cd ff ff ff       	call   c000e01c <Video::~Video()>
c000e04f:	83 c4 10             	add    esp,0x10
c000e052:	83 ec 08             	sub    esp,0x8
c000e055:	68 64 01 00 00       	push   0x164
c000e05a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e05e:	e8 97 ca ff ff       	call   c000aafa <operator delete(void*, unsigned long)>
c000e063:	83 c4 10             	add    esp,0x10
c000e066:	83 c4 0c             	add    esp,0xc
c000e069:	c3                   	ret    

c000e06a <Video::isMonochrome()>:
c000e06a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e06e:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c000e074:	c3                   	ret    
c000e075:	90                   	nop

c000e076 <Video::getWidth()>:
c000e076:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e07a:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000e080:	c3                   	ret    
c000e081:	90                   	nop

c000e082 <Video::getHeight()>:
c000e082:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e086:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000e08c:	c3                   	ret    
c000e08d:	90                   	nop

c000e08e <Video::drawCursor(int, int, unsigned char*, int)>:
c000e08e:	55                   	push   ebp
c000e08f:	57                   	push   edi
c000e090:	56                   	push   esi
c000e091:	53                   	push   ebx
c000e092:	83 ec 2c             	sub    esp,0x2c
c000e095:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000e099:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000e09d:	83 f8 01             	cmp    eax,0x1
c000e0a0:	19 c9                	sbb    ecx,ecx
c000e0a2:	31 db                	xor    ebx,ebx
c000e0a4:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000e0a8:	89 cd                	mov    ebp,ecx
c000e0aa:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c000e0b2:	f7 d5                	not    ebp
c000e0b4:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c000e0ba:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000e0be:	01 d8                	add    eax,ebx
c000e0c0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e0c4:	56                   	push   esi
c000e0c5:	e8 b8 ff ff ff       	call   c000e082 <Video::getHeight()>
c000e0ca:	59                   	pop    ecx
c000e0cb:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000e0cf:	7e 70                	jle    c000e141 <Video::drawCursor(int, int, unsigned char*, int)+0xb3>
c000e0d1:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000e0d5:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c000e0d9:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c000e0dc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000e0e0:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000e0e4:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c000e0eb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e0ef:	89 f8                	mov    eax,edi
c000e0f1:	83 c0 20             	add    eax,0x20
c000e0f4:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e0f8:	56                   	push   esi
c000e0f9:	e8 78 ff ff ff       	call   c000e076 <Video::getWidth()>
c000e0fe:	5a                   	pop    edx
c000e0ff:	39 c7                	cmp    edi,eax
c000e101:	7d 34                	jge    c000e137 <Video::drawCursor(int, int, unsigned char*, int)+0xa9>
c000e103:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c000e108:	74 05                	je     c000e10f <Video::drawCursor(int, int, unsigned char*, int)+0x81>
c000e10a:	8b 06                	mov    eax,DWORD PTR [esi]
c000e10c:	55                   	push   ebp
c000e10d:	eb 0d                	jmp    c000e11c <Video::drawCursor(int, int, unsigned char*, int)+0x8e>
c000e10f:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c000e114:	74 12                	je     c000e128 <Video::drawCursor(int, int, unsigned char*, int)+0x9a>
c000e116:	8b 06                	mov    eax,DWORD PTR [esi]
c000e118:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e11c:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000e120:	57                   	push   edi
c000e121:	56                   	push   esi
c000e122:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000e125:	83 c4 10             	add    esp,0x10
c000e128:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c000e12c:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c000e130:	47                   	inc    edi
c000e131:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c000e135:	75 c1                	jne    c000e0f8 <Video::drawCursor(int, int, unsigned char*, int)+0x6a>
c000e137:	43                   	inc    ebx
c000e138:	83 fb 20             	cmp    ebx,0x20
c000e13b:	0f 85 79 ff ff ff    	jne    c000e0ba <Video::drawCursor(int, int, unsigned char*, int)+0x2c>
c000e141:	83 c4 2c             	add    esp,0x2c
c000e144:	5b                   	pop    ebx
c000e145:	5e                   	pop    esi
c000e146:	5f                   	pop    edi
c000e147:	5d                   	pop    ebp
c000e148:	c3                   	ret    
c000e149:	90                   	nop

c000e14a <Video::tgaParse(unsigned char*, int, int*, int*)>:
c000e14a:	55                   	push   ebp
c000e14b:	57                   	push   edi
c000e14c:	56                   	push   esi
c000e14d:	53                   	push   ebx
c000e14e:	83 ec 28             	sub    esp,0x28
c000e151:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000e155:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c000e159:	0f b6 73 0d          	movzx  esi,BYTE PTR [ebx+0xd]
c000e15d:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c000e161:	c1 e6 08             	shl    esi,0x8
c000e164:	01 c6                	add    esi,eax
c000e166:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c000e16a:	c1 e0 08             	shl    eax,0x8
c000e16d:	01 d0                	add    eax,edx
c000e16f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e173:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e177:	0f af c6             	imul   eax,esi
c000e17a:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c000e181:	50                   	push   eax
c000e182:	e8 da 9c ff ff       	call   c0007e61 <malloc>
c000e187:	83 c4 10             	add    esp,0x10
c000e18a:	89 c7                	mov    edi,eax
c000e18c:	85 c0                	test   eax,eax
c000e18e:	75 10                	jne    c000e1a0 <Video::tgaParse(unsigned char*, int, int*, int*)+0x56>
c000e190:	83 ec 0c             	sub    esp,0xc
c000e193:	68 b5 e1 01 c0       	push   0xc001e1b5
c000e198:	e8 a2 25 00 00       	call   c001073f <Krnl::panic(char const*)>
c000e19d:	83 c4 10             	add    esp,0x10
c000e1a0:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000e1a3:	ba 12 00 00 00       	mov    edx,0x12
c000e1a8:	84 c0                	test   al,al
c000e1aa:	74 11                	je     c000e1bd <Video::tgaParse(unsigned char*, int, int*, int*)+0x73>
c000e1ac:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c000e1b0:	0f b7 4b 05          	movzx  ecx,WORD PTR [ebx+0x5]
c000e1b4:	c1 fa 03             	sar    edx,0x3
c000e1b7:	0f af d1             	imul   edx,ecx
c000e1ba:	83 c2 12             	add    edx,0x12
c000e1bd:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c000e1c1:	74 04                	je     c000e1c7 <Video::tgaParse(unsigned char*, int, int*, int*)+0x7d>
c000e1c3:	85 f6                	test   esi,esi
c000e1c5:	75 12                	jne    c000e1d9 <Video::tgaParse(unsigned char*, int, int*, int*)+0x8f>
c000e1c7:	83 ec 0c             	sub    esp,0xc
c000e1ca:	68 c5 e1 01 c0       	push   0xc001e1c5
c000e1cf:	e8 1c ca ff ff       	call   c000abf0 <Dbg::kprintf(char const*, ...)>
c000e1d4:	e9 b8 00 00 00       	jmp    c000e291 <Video::tgaParse(unsigned char*, int, int*, int*)+0x147>
c000e1d9:	0f b6 4b 02          	movzx  ecx,BYTE PTR [ebx+0x2]
c000e1dd:	80 f9 02             	cmp    cl,0x2
c000e1e0:	0f 85 96 00 00 00    	jne    c000e27c <Video::tgaParse(unsigned char*, int, int*, int*)+0x132>
c000e1e6:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c000e1eb:	75 0e                	jne    c000e1fb <Video::tgaParse(unsigned char*, int, int*, int*)+0xb1>
c000e1ed:	84 c0                	test   al,al
c000e1ef:	75 0a                	jne    c000e1fb <Video::tgaParse(unsigned char*, int, int*, int*)+0xb1>
c000e1f1:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000e1f4:	83 e8 18             	sub    eax,0x18
c000e1f7:	a8 f7                	test   al,0xf7
c000e1f9:	74 0a                	je     c000e205 <Video::tgaParse(unsigned char*, int, int*, int*)+0xbb>
c000e1fb:	83 ec 0c             	sub    esp,0xc
c000e1fe:	68 da e1 01 c0       	push   0xc001e1da
c000e203:	eb 7f                	jmp    c000e284 <Video::tgaParse(unsigned char*, int, int*, int*)+0x13a>
c000e205:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000e20d:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000e215:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c000e219:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000e221:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c000e225:	75 0c                	jne    c000e233 <Video::tgaParse(unsigned char*, int, int*, int*)+0xe9>
c000e227:	0f b6 44 13 03       	movzx  eax,BYTE PTR [ebx+edx*1+0x3]
c000e22c:	c1 e0 18             	shl    eax,0x18
c000e22f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e233:	45                   	inc    ebp
c000e234:	0f b6 4c 13 02       	movzx  ecx,BYTE PTR [ebx+edx*1+0x2]
c000e239:	c1 e1 10             	shl    ecx,0x10
c000e23c:	89 c8                	mov    eax,ecx
c000e23e:	0f b6 4c 13 01       	movzx  ecx,BYTE PTR [ebx+edx*1+0x1]
c000e243:	c1 e1 08             	shl    ecx,0x8
c000e246:	09 c1                	or     ecx,eax
c000e248:	0f b6 04 13          	movzx  eax,BYTE PTR [ebx+edx*1]
c000e24c:	09 c1                	or     ecx,eax
c000e24e:	0b 4c 24 08          	or     ecx,DWORD PTR [esp+0x8]
c000e252:	89 4c af fc          	mov    DWORD PTR [edi+ebp*4-0x4],ecx
c000e256:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c000e25a:	c1 f8 03             	sar    eax,0x3
c000e25d:	01 c2                	add    edx,eax
c000e25f:	89 e8                	mov    eax,ebp
c000e261:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c000e265:	39 c6                	cmp    esi,eax
c000e267:	7f b0                	jg     c000e219 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcf>
c000e269:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000e26d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000e271:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c000e274:	7e 22                	jle    c000e298 <Video::tgaParse(unsigned char*, int, int*, int*)+0x14e>
c000e276:	89 6c 24 04          	mov    DWORD PTR [esp+0x4],ebp
c000e27a:	eb 99                	jmp    c000e215 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c000e27c:	50                   	push   eax
c000e27d:	50                   	push   eax
c000e27e:	51                   	push   ecx
c000e27f:	68 e8 e1 01 c0       	push   0xc001e1e8
c000e284:	e8 67 c9 ff ff       	call   c000abf0 <Dbg::kprintf(char const*, ...)>
c000e289:	89 3c 24             	mov    DWORD PTR [esp],edi
c000e28c:	e8 e0 9b ff ff       	call   c0007e71 <free>
c000e291:	83 c4 10             	add    esp,0x10
c000e294:	31 ff                	xor    edi,edi
c000e296:	eb 0f                	jmp    c000e2a7 <Video::tgaParse(unsigned char*, int, int*, int*)+0x15d>
c000e298:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000e29c:	89 30                	mov    DWORD PTR [eax],esi
c000e29e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e2a2:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000e2a5:	89 30                	mov    DWORD PTR [eax],esi
c000e2a7:	83 c4 1c             	add    esp,0x1c
c000e2aa:	89 f8                	mov    eax,edi
c000e2ac:	5b                   	pop    ebx
c000e2ad:	5e                   	pop    esi
c000e2ae:	5f                   	pop    edi
c000e2af:	5d                   	pop    ebp
c000e2b0:	c3                   	ret    
c000e2b1:	90                   	nop

c000e2b2 <Video::putTGA(int, int, unsigned char*, int)>:
c000e2b2:	55                   	push   ebp
c000e2b3:	57                   	push   edi
c000e2b4:	56                   	push   esi
c000e2b5:	53                   	push   ebx
c000e2b6:	83 ec 28             	sub    esp,0x28
c000e2b9:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c000e2bd:	8d 44 24 18          	lea    eax,[esp+0x18]
c000e2c1:	50                   	push   eax
c000e2c2:	8d 44 24 18          	lea    eax,[esp+0x18]
c000e2c6:	50                   	push   eax
c000e2c7:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000e2cb:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000e2cf:	56                   	push   esi
c000e2d0:	e8 75 fe ff ff       	call   c000e14a <Video::tgaParse(unsigned char*, int, int*, int*)>
c000e2d5:	83 c4 20             	add    esp,0x20
c000e2d8:	85 c0                	test   eax,eax
c000e2da:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000e2de:	74 35                	je     c000e315 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000e2e0:	89 c7                	mov    edi,eax
c000e2e2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000e2e6:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000e2ea:	39 d8                	cmp    eax,ebx
c000e2ec:	7e 27                	jle    c000e315 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000e2ee:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000e2f2:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e2f6:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000e2fa:	39 e8                	cmp    eax,ebp
c000e2fc:	7e 14                	jle    c000e312 <Video::putTGA(int, int, unsigned char*, int)+0x60>
c000e2fe:	8b 06                	mov    eax,DWORD PTR [esi]
c000e300:	83 c7 04             	add    edi,0x4
c000e303:	ff 77 fc             	push   DWORD PTR [edi-0x4]
c000e306:	53                   	push   ebx
c000e307:	55                   	push   ebp
c000e308:	45                   	inc    ebp
c000e309:	56                   	push   esi
c000e30a:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000e30d:	83 c4 10             	add    esp,0x10
c000e310:	eb e0                	jmp    c000e2f2 <Video::putTGA(int, int, unsigned char*, int)+0x40>
c000e312:	43                   	inc    ebx
c000e313:	eb cd                	jmp    c000e2e2 <Video::putTGA(int, int, unsigned char*, int)+0x30>
c000e315:	83 c4 1c             	add    esp,0x1c
c000e318:	5b                   	pop    ebx
c000e319:	5e                   	pop    esi
c000e31a:	5f                   	pop    edi
c000e31b:	5d                   	pop    ebp
c000e31c:	c3                   	ret    
c000e31d:	66 90                	xchg   ax,ax
c000e31f:	90                   	nop

c000e320 <ACPI::close(int, int, void*)>:
c000e320:	83 ec 1c             	sub    esp,0x1c
c000e323:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c000e32b:	74 0b                	je     c000e338 <ACPI::close(int, int, void*)+0x18>
c000e32d:	b8 00 00 00 00       	mov    eax,0x0
c000e332:	e9 9d 00 00 00       	jmp    c000e3d4 <ACPI::close(int, int, void*)+0xb4>
c000e337:	90                   	nop
c000e338:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000e33d:	75 29                	jne    c000e368 <ACPI::close(int, int, void*)+0x48>
c000e33f:	a1 28 2e 02 c0       	mov    eax,ds:0xc0022e28
c000e344:	85 c0                	test   eax,eax
c000e346:	74 08                	je     c000e350 <ACPI::close(int, int, void*)+0x30>
c000e348:	a1 28 2e 02 c0       	mov    eax,ds:0xc0022e28
c000e34d:	ff d0                	call   eax
c000e34f:	90                   	nop
c000e350:	83 ec 0c             	sub    esp,0xc
c000e353:	68 44 e2 01 c0       	push   0xc001e244
c000e358:	e8 e2 23 00 00       	call   c001073f <Krnl::panic(char const*)>
c000e35d:	83 c4 10             	add    esp,0x10
c000e360:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000e365:	eb 6d                	jmp    c000e3d4 <ACPI::close(int, int, void*)+0xb4>
c000e367:	90                   	nop
c000e368:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c000e36d:	75 5d                	jne    c000e3cc <ACPI::close(int, int, void*)+0xac>
c000e36f:	a1 24 2e 02 c0       	mov    eax,ds:0xc0022e24
c000e374:	85 c0                	test   eax,eax
c000e376:	74 08                	je     c000e380 <ACPI::close(int, int, void*)+0x60>
c000e378:	a1 24 2e 02 c0       	mov    eax,ds:0xc0022e24
c000e37d:	ff d0                	call   eax
c000e37f:	90                   	nop
c000e380:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c000e385:	8d 76 00             	lea    esi,[esi+0x0]
c000e388:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000e38c:	25 ff 00 00 00       	and    eax,0xff
c000e391:	83 e0 02             	and    eax,0x2
c000e394:	74 1e                	je     c000e3b4 <ACPI::close(int, int, void*)+0x94>
c000e396:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c000e39d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e3a1:	89 c2                	mov    edx,eax
c000e3a3:	ec                   	in     al,dx
c000e3a4:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000e3a8:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c000e3ac:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000e3b0:	eb d6                	jmp    c000e388 <ACPI::close(int, int, void*)+0x68>
c000e3b2:	66 90                	xchg   ax,ax
c000e3b4:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c000e3bb:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c000e3c0:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c000e3c4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000e3c8:	ee                   	out    dx,al
c000e3c9:	8d 76 00             	lea    esi,[esi+0x0]
c000e3cc:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000e3d1:	8d 76 00             	lea    esi,[esi+0x0]
c000e3d4:	83 c4 1c             	add    esp,0x1c
c000e3d7:	c3                   	ret    

c000e3d8 <findRSDP()>:
c000e3d8:	83 ec 1c             	sub    esp,0x1c
c000e3db:	a1 44 08 02 c0       	mov    eax,ds:0xc0020844
c000e3e0:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000e3e6:	83 e0 04             	and    eax,0x4
c000e3e9:	84 c0                	test   al,al
c000e3eb:	75 07                	jne    c000e3f4 <findRSDP()+0x1c>
c000e3ed:	b8 00 00 00 00       	mov    eax,0x0
c000e3f2:	eb 70                	jmp    c000e464 <findRSDP()+0x8c>
c000e3f4:	a1 74 08 02 c0       	mov    eax,ds:0xc0020874
c000e3f9:	3d ff 07 00 00       	cmp    eax,0x7ff
c000e3fe:	7f 1c                	jg     c000e41c <findRSDP()+0x44>
c000e400:	a1 44 08 02 c0       	mov    eax,ds:0xc0020844
c000e405:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000e40b:	83 e2 fb             	and    edx,0xfffffffb
c000e40e:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e414:	b8 00 00 00 00       	mov    eax,0x0
c000e419:	eb 49                	jmp    c000e464 <findRSDP()+0x8c>
c000e41b:	90                   	nop
c000e41c:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c000e424:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c000e42c:	77 2e                	ja     c000e45c <findRSDP()+0x84>
c000e42e:	83 ec 04             	sub    esp,0x4
c000e431:	6a 08                	push   0x8
c000e433:	68 df e2 01 c0       	push   0xc001e2df
c000e438:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e43c:	e8 6f 1f ff ff       	call   c00003b0 <memcmp>
c000e441:	83 c4 10             	add    esp,0x10
c000e444:	85 c0                	test   eax,eax
c000e446:	0f 94 c0             	sete   al
c000e449:	84 c0                	test   al,al
c000e44b:	74 07                	je     c000e454 <findRSDP()+0x7c>
c000e44d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e451:	eb 11                	jmp    c000e464 <findRSDP()+0x8c>
c000e453:	90                   	nop
c000e454:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c000e459:	eb c9                	jmp    c000e424 <findRSDP()+0x4c>
c000e45b:	90                   	nop
c000e45c:	b8 00 00 00 00       	mov    eax,0x0
c000e461:	8d 76 00             	lea    esi,[esi+0x0]
c000e464:	83 c4 1c             	add    esp,0x1c
c000e467:	c3                   	ret    

c000e468 <loadACPITables(unsigned char*)>:
c000e468:	57                   	push   edi
c000e469:	56                   	push   esi
c000e46a:	53                   	push   ebx
c000e46b:	83 ec 60             	sub    esp,0x60
c000e46e:	a1 44 08 02 c0       	mov    eax,ds:0xc0020844
c000e473:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000e479:	83 e0 04             	and    eax,0x4
c000e47c:	84 c0                	test   al,al
c000e47e:	0f 84 3c 02 00 00    	je     c000e6c0 <loadACPITables(unsigned char*)+0x258>
c000e484:	a0 40 30 02 c0       	mov    al,ds:0xc0023040
c000e489:	84 c0                	test   al,al
c000e48b:	74 77                	je     c000e504 <loadACPITables(unsigned char*)+0x9c>
c000e48d:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000e491:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000e495:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000e499:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e49c:	83 e8 24             	sub    eax,0x24
c000e49f:	c1 e8 03             	shr    eax,0x3
c000e4a2:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000e4a6:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c000e4ae:	66 90                	xchg   ax,ax
c000e4b0:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000e4b4:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
c000e4b8:	0f 8d b6 00 00 00    	jge    c000e574 <loadACPITables(unsigned char*)+0x10c>
c000e4be:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000e4c2:	83 c0 24             	add    eax,0x24
c000e4c5:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000e4c9:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000e4cd:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000e4d1:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000e4d5:	c1 e0 03             	shl    eax,0x3
c000e4d8:	01 44 24 44          	add    DWORD PTR [esp+0x44],eax
c000e4dc:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000e4e0:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000e4e3:	8b 00                	mov    eax,DWORD PTR [eax]
c000e4e5:	89 c1                	mov    ecx,eax
c000e4e7:	a1 2c 2e 02 c0       	mov    eax,ds:0xc0022e2c
c000e4ec:	8d 50 01             	lea    edx,[eax+0x1]
c000e4ef:	89 15 2c 2e 02 c0    	mov    DWORD PTR ds:0xc0022e2c,edx
c000e4f5:	89 ca                	mov    edx,ecx
c000e4f7:	89 14 c5 44 2e 02 c0 	mov    DWORD PTR [eax*8-0x3ffdd1bc],edx
c000e4fe:	ff 44 24 5c          	inc    DWORD PTR [esp+0x5c]
c000e502:	eb ac                	jmp    c000e4b0 <loadACPITables(unsigned char*)+0x48>
c000e504:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000e508:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000e50c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e510:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e513:	83 e8 24             	sub    eax,0x24
c000e516:	c1 e8 02             	shr    eax,0x2
c000e519:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000e51d:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c000e525:	8d 76 00             	lea    esi,[esi+0x0]
c000e528:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000e52c:	3b 44 24 3c          	cmp    eax,DWORD PTR [esp+0x3c]
c000e530:	7d 42                	jge    c000e574 <loadACPITables(unsigned char*)+0x10c>
c000e532:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000e536:	83 c0 24             	add    eax,0x24
c000e539:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000e53d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000e541:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000e545:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000e549:	c1 e0 02             	shl    eax,0x2
c000e54c:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000e550:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e554:	8b 08                	mov    ecx,DWORD PTR [eax]
c000e556:	a1 2c 2e 02 c0       	mov    eax,ds:0xc0022e2c
c000e55b:	8d 50 01             	lea    edx,[eax+0x1]
c000e55e:	89 15 2c 2e 02 c0    	mov    DWORD PTR ds:0xc0022e2c,edx
c000e564:	89 ca                	mov    edx,ecx
c000e566:	89 14 c5 44 2e 02 c0 	mov    DWORD PTR [eax*8-0x3ffdd1bc],edx
c000e56d:	ff 44 24 58          	inc    DWORD PTR [esp+0x58]
c000e571:	eb b5                	jmp    c000e528 <loadACPITables(unsigned char*)+0xc0>
c000e573:	90                   	nop
c000e574:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000e57c:	a1 2c 2e 02 c0       	mov    eax,ds:0xc0022e2c
c000e581:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c000e585:	0f 8d 39 01 00 00    	jge    c000e6c4 <loadACPITables(unsigned char*)+0x25c>
c000e58b:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000e58f:	8b 04 c5 44 2e 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffdd1bc]
c000e596:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000e59a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e59e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000e5a2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e5a6:	25 ff 0f 00 00       	and    eax,0xfff
c000e5ab:	89 c6                	mov    esi,eax
c000e5ad:	8b 1d 30 09 02 c0    	mov    ebx,DWORD PTR ds:0xc0020930
c000e5b3:	83 ec 0c             	sub    esp,0xc
c000e5b6:	6a 01                	push   0x1
c000e5b8:	e8 e0 b3 ff ff       	call   c000999d <Virt::allocateKernelVirtualPages(int)>
c000e5bd:	83 c4 10             	add    esp,0x10
c000e5c0:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000e5c4:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000e5ca:	83 ec 0c             	sub    esp,0xc
c000e5cd:	6a 01                	push   0x1
c000e5cf:	6a 01                	push   0x1
c000e5d1:	50                   	push   eax
c000e5d2:	52                   	push   edx
c000e5d3:	53                   	push   ebx
c000e5d4:	e8 53 bd ff ff       	call   c000a32c <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e5d9:	83 c4 20             	add    esp,0x20
c000e5dc:	09 f0                	or     eax,esi
c000e5de:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000e5e2:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000e5e6:	c1 e0 03             	shl    eax,0x3
c000e5e9:	05 40 2e 02 c0       	add    eax,0xc0022e40
c000e5ee:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e5f2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e5f6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e5fa:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c000e602:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000e606:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e60a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000e60e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000e612:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000e616:	89 c6                	mov    esi,eax
c000e618:	89 d7                	mov    edi,edx
c000e61a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e61c:	89 c8                	mov    eax,ecx
c000e61e:	89 fa                	mov    edx,edi
c000e620:	89 f3                	mov    ebx,esi
c000e622:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000e626:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000e62a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000e62e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e632:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e635:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000e639:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e63d:	05 00 10 00 00       	add    eax,0x1000
c000e642:	c1 e8 0c             	shr    eax,0xc
c000e645:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000e649:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e64d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e651:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e655:	25 ff 0f 00 00       	and    eax,0xfff
c000e65a:	89 c6                	mov    esi,eax
c000e65c:	8b 1d 30 09 02 c0    	mov    ebx,DWORD PTR ds:0xc0020930
c000e662:	83 ec 0c             	sub    esp,0xc
c000e665:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000e669:	e8 2f b3 ff ff       	call   c000999d <Virt::allocateKernelVirtualPages(int)>
c000e66e:	83 c4 10             	add    esp,0x10
c000e671:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000e675:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000e67b:	83 ec 0c             	sub    esp,0xc
c000e67e:	6a 01                	push   0x1
c000e680:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000e684:	50                   	push   eax
c000e685:	52                   	push   edx
c000e686:	53                   	push   ebx
c000e687:	e8 a0 bc ff ff       	call   c000a32c <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e68c:	83 c4 20             	add    esp,0x20
c000e68f:	09 f0                	or     eax,esi
c000e691:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000e695:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e699:	83 ec 0c             	sub    esp,0xc
c000e69c:	50                   	push   eax
c000e69d:	e8 2b b6 ff ff       	call   c0009ccd <Virt::freeKernelVirtualPages(unsigned long)>
c000e6a2:	83 c4 10             	add    esp,0x10
c000e6a5:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000e6a9:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000e6ad:	89 14 c5 44 2e 02 c0 	mov    DWORD PTR [eax*8-0x3ffdd1bc],edx
c000e6b4:	ff 44 24 54          	inc    DWORD PTR [esp+0x54]
c000e6b8:	e9 bf fe ff ff       	jmp    c000e57c <loadACPITables(unsigned char*)+0x114>
c000e6bd:	8d 76 00             	lea    esi,[esi+0x0]
c000e6c0:	90                   	nop
c000e6c1:	8d 76 00             	lea    esi,[esi+0x0]
c000e6c4:	83 c4 60             	add    esp,0x60
c000e6c7:	5b                   	pop    ebx
c000e6c8:	5e                   	pop    esi
c000e6c9:	5f                   	pop    edi
c000e6ca:	c3                   	ret    
c000e6cb:	90                   	nop

c000e6cc <findRSDT(unsigned char*)>:
c000e6cc:	57                   	push   edi
c000e6cd:	56                   	push   esi
c000e6ce:	53                   	push   ebx
c000e6cf:	83 ec 50             	sub    esp,0x50
c000e6d2:	a1 44 08 02 c0       	mov    eax,ds:0xc0020844
c000e6d7:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000e6dd:	83 e0 04             	and    eax,0x4
c000e6e0:	84 c0                	test   al,al
c000e6e2:	75 0c                	jne    c000e6f0 <findRSDT(unsigned char*)+0x24>
c000e6e4:	b8 00 00 00 00       	mov    eax,0x0
c000e6e9:	e9 26 01 00 00       	jmp    c000e814 <findRSDT(unsigned char*)+0x148>
c000e6ee:	66 90                	xchg   ax,ax
c000e6f0:	89 e0                	mov    eax,esp
c000e6f2:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000e6f6:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000e6fa:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000e6fe:	c7 44 24 34 24 00 00 00 	mov    DWORD PTR [esp+0x34],0x24
c000e706:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000e70a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000e70e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000e712:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000e716:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000e71a:	89 c6                	mov    esi,eax
c000e71c:	89 d7                	mov    edi,edx
c000e71e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e720:	89 c8                	mov    eax,ecx
c000e722:	89 fa                	mov    edx,edi
c000e724:	89 f3                	mov    ebx,esi
c000e726:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c000e72a:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000e72e:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000e732:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000e736:	88 44 24 4b          	mov    BYTE PTR [esp+0x4b],al
c000e73a:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000e742:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000e746:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000e74a:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000e74e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e752:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000e756:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000e75a:	25 ff 0f 00 00       	and    eax,0xfff
c000e75f:	89 c6                	mov    esi,eax
c000e761:	8b 1d 30 09 02 c0    	mov    ebx,DWORD PTR ds:0xc0020930
c000e767:	83 ec 0c             	sub    esp,0xc
c000e76a:	6a 02                	push   0x2
c000e76c:	e8 2c b2 ff ff       	call   c000999d <Virt::allocateKernelVirtualPages(int)>
c000e771:	83 c4 10             	add    esp,0x10
c000e774:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000e778:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000e77e:	83 ec 0c             	sub    esp,0xc
c000e781:	6a 01                	push   0x1
c000e783:	6a 02                	push   0x2
c000e785:	50                   	push   eax
c000e786:	52                   	push   edx
c000e787:	53                   	push   ebx
c000e788:	e8 9f bb ff ff       	call   c000a32c <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e78d:	83 c4 20             	add    esp,0x20
c000e790:	09 f0                	or     eax,esi
c000e792:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000e796:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e79a:	25 ff 0f 00 00       	and    eax,0xfff
c000e79f:	89 c6                	mov    esi,eax
c000e7a1:	8b 1d 30 09 02 c0    	mov    ebx,DWORD PTR ds:0xc0020930
c000e7a7:	83 ec 0c             	sub    esp,0xc
c000e7aa:	6a 02                	push   0x2
c000e7ac:	e8 ec b1 ff ff       	call   c000999d <Virt::allocateKernelVirtualPages(int)>
c000e7b1:	83 c4 10             	add    esp,0x10
c000e7b4:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000e7b8:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000e7be:	83 ec 0c             	sub    esp,0xc
c000e7c1:	6a 01                	push   0x1
c000e7c3:	6a 02                	push   0x2
c000e7c5:	50                   	push   eax
c000e7c6:	52                   	push   edx
c000e7c7:	53                   	push   ebx
c000e7c8:	e8 5f bb ff ff       	call   c000a32c <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e7cd:	83 c4 20             	add    esp,0x20
c000e7d0:	09 f0                	or     eax,esi
c000e7d2:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000e7d6:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c000e7db:	75 13                	jne    c000e7f0 <findRSDT(unsigned char*)+0x124>
c000e7dd:	c6 05 40 30 02 c0 00 	mov    BYTE PTR ds:0xc0023040,0x0
c000e7e4:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e7e8:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000e7ec:	eb 22                	jmp    c000e810 <findRSDT(unsigned char*)+0x144>
c000e7ee:	66 90                	xchg   ax,ax
c000e7f0:	80 7c 24 4b 02       	cmp    BYTE PTR [esp+0x4b],0x2
c000e7f5:	75 11                	jne    c000e808 <findRSDT(unsigned char*)+0x13c>
c000e7f7:	c6 05 40 30 02 c0 01 	mov    BYTE PTR ds:0xc0023040,0x1
c000e7fe:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000e802:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000e806:	eb 08                	jmp    c000e810 <findRSDT(unsigned char*)+0x144>
c000e808:	b8 00 00 00 00       	mov    eax,0x0
c000e80d:	eb 05                	jmp    c000e814 <findRSDT(unsigned char*)+0x148>
c000e80f:	90                   	nop
c000e810:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000e814:	83 c4 50             	add    esp,0x50
c000e817:	5b                   	pop    ebx
c000e818:	5e                   	pop    esi
c000e819:	5f                   	pop    edi
c000e81a:	c3                   	ret    
c000e81b:	90                   	nop

c000e81c <findDataTable(unsigned char*, char*)>:
c000e81c:	83 ec 1c             	sub    esp,0x1c
c000e81f:	a1 44 08 02 c0       	mov    eax,ds:0xc0020844
c000e824:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000e82a:	83 e0 04             	and    eax,0x4
c000e82d:	84 c0                	test   al,al
c000e82f:	75 07                	jne    c000e838 <findDataTable(unsigned char*, char*)+0x1c>
c000e831:	b8 00 00 00 00       	mov    eax,0x0
c000e836:	eb 58                	jmp    c000e890 <findDataTable(unsigned char*, char*)+0x74>
c000e838:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000e840:	a1 2c 2e 02 c0       	mov    eax,ds:0xc0022e2c
c000e845:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c000e849:	7d 3d                	jge    c000e888 <findDataTable(unsigned char*, char*)+0x6c>
c000e84b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e84f:	c1 e0 03             	shl    eax,0x3
c000e852:	05 40 2e 02 c0       	add    eax,0xc0022e40
c000e857:	83 ec 04             	sub    esp,0x4
c000e85a:	6a 04                	push   0x4
c000e85c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e860:	50                   	push   eax
c000e861:	e8 4a 1b ff ff       	call   c00003b0 <memcmp>
c000e866:	83 c4 10             	add    esp,0x10
c000e869:	85 c0                	test   eax,eax
c000e86b:	0f 94 c0             	sete   al
c000e86e:	84 c0                	test   al,al
c000e870:	74 0e                	je     c000e880 <findDataTable(unsigned char*, char*)+0x64>
c000e872:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e876:	8b 04 c5 44 2e 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffdd1bc]
c000e87d:	eb 11                	jmp    c000e890 <findDataTable(unsigned char*, char*)+0x74>
c000e87f:	90                   	nop
c000e880:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000e884:	eb ba                	jmp    c000e840 <findDataTable(unsigned char*, char*)+0x24>
c000e886:	66 90                	xchg   ax,ax
c000e888:	b8 00 00 00 00       	mov    eax,0x0
c000e88d:	8d 76 00             	lea    esi,[esi+0x0]
c000e890:	83 c4 1c             	add    esp,0x1c
c000e893:	c3                   	ret    

c000e894 <scanMADT()>:
c000e894:	53                   	push   ebx
c000e895:	83 ec 38             	sub    esp,0x38
c000e898:	a1 5c 08 02 c0       	mov    eax,ds:0xc002085c
c000e89d:	25 00 04 00 00       	and    eax,0x400
c000e8a2:	74 14                	je     c000e8b8 <scanMADT()+0x24>
c000e8a4:	a1 44 08 02 c0       	mov    eax,ds:0xc0020844
c000e8a9:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000e8af:	83 e2 fb             	and    edx,0xfffffffb
c000e8b2:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e8b8:	a1 44 08 02 c0       	mov    eax,ds:0xc0020844
c000e8bd:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000e8c3:	83 e0 04             	and    eax,0x4
c000e8c6:	84 c0                	test   al,al
c000e8c8:	0f 84 8a 04 00 00    	je     c000ed58 <scanMADT()+0x4c4>
c000e8ce:	e8 05 fb ff ff       	call   c000e3d8 <findRSDP()>
c000e8d3:	a3 4c 30 02 c0       	mov    ds:0xc002304c,eax
c000e8d8:	a1 4c 30 02 c0       	mov    eax,ds:0xc002304c
c000e8dd:	85 c0                	test   eax,eax
c000e8df:	75 1b                	jne    c000e8fc <scanMADT()+0x68>
c000e8e1:	a1 44 08 02 c0       	mov    eax,ds:0xc0020844
c000e8e6:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000e8ec:	83 e2 fb             	and    edx,0xfffffffb
c000e8ef:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e8f5:	e9 66 04 00 00       	jmp    c000ed60 <scanMADT()+0x4cc>
c000e8fa:	66 90                	xchg   ax,ax
c000e8fc:	a1 4c 30 02 c0       	mov    eax,ds:0xc002304c
c000e901:	83 ec 0c             	sub    esp,0xc
c000e904:	50                   	push   eax
c000e905:	e8 c2 fd ff ff       	call   c000e6cc <findRSDT(unsigned char*)>
c000e90a:	83 c4 10             	add    esp,0x10
c000e90d:	a3 48 30 02 c0       	mov    ds:0xc0023048,eax
c000e912:	a1 48 30 02 c0       	mov    eax,ds:0xc0023048
c000e917:	85 c0                	test   eax,eax
c000e919:	75 19                	jne    c000e934 <scanMADT()+0xa0>
c000e91b:	a1 44 08 02 c0       	mov    eax,ds:0xc0020844
c000e920:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000e926:	83 e2 fb             	and    edx,0xfffffffb
c000e929:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e92f:	e9 2c 04 00 00       	jmp    c000ed60 <scanMADT()+0x4cc>
c000e934:	a1 48 30 02 c0       	mov    eax,ds:0xc0023048
c000e939:	83 ec 0c             	sub    esp,0xc
c000e93c:	50                   	push   eax
c000e93d:	e8 26 fb ff ff       	call   c000e468 <loadACPITables(unsigned char*)>
c000e942:	83 c4 10             	add    esp,0x10
c000e945:	a1 48 30 02 c0       	mov    eax,ds:0xc0023048
c000e94a:	83 ec 08             	sub    esp,0x8
c000e94d:	68 e8 e2 01 c0       	push   0xc001e2e8
c000e952:	50                   	push   eax
c000e953:	e8 c4 fe ff ff       	call   c000e81c <findDataTable(unsigned char*, char*)>
c000e958:	83 c4 10             	add    esp,0x10
c000e95b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000e95f:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c000e964:	75 1a                	jne    c000e980 <scanMADT()+0xec>
c000e966:	a1 44 08 02 c0       	mov    eax,ds:0xc0020844
c000e96b:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000e971:	83 e2 fe             	and    edx,0xfffffffe
c000e974:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e97a:	e9 e1 03 00 00       	jmp    c000ed60 <scanMADT()+0x4cc>
c000e97f:	90                   	nop
c000e980:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000e988:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e98c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e98f:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c000e993:	0f 87 c7 03 00 00    	ja     c000ed60 <scanMADT()+0x4cc>
c000e999:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c000e9a1:	0f 87 b9 03 00 00    	ja     c000ed60 <scanMADT()+0x4cc>
c000e9a7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e9ab:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000e9af:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e9b3:	8d 50 01             	lea    edx,[eax+0x1]
c000e9b6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e9ba:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e9be:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000e9c2:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c000e9c6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e9ca:	8d 50 01             	lea    edx,[eax+0x1]
c000e9cd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e9d1:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e9d5:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000e9d9:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c000e9dd:	80 7c 24 22 02       	cmp    BYTE PTR [esp+0x22],0x2
c000e9e2:	0f 86 74 03 00 00    	jbe    c000ed5c <scanMADT()+0x4c8>
c000e9e8:	80 7c 24 23 00       	cmp    BYTE PTR [esp+0x23],0x0
c000e9ed:	75 5d                	jne    c000ea4c <scanMADT()+0x1b8>
c000e9ef:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e9f3:	8d 50 01             	lea    edx,[eax+0x1]
c000e9f6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e9fa:	8a 15 40 32 02 c0    	mov    dl,BYTE PTR ds:0xc0023240
c000ea00:	81 e2 ff 00 00 00    	and    edx,0xff
c000ea06:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000ea0a:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000ea0e:	88 82 80 32 02 c0    	mov    BYTE PTR [edx-0x3ffdcd80],al
c000ea14:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000ea18:	8d 42 01             	lea    eax,[edx+0x1]
c000ea1b:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000ea1f:	a0 40 32 02 c0       	mov    al,ds:0xc0023240
c000ea24:	8d 48 01             	lea    ecx,[eax+0x1]
c000ea27:	88 0d 40 32 02 c0    	mov    BYTE PTR ds:0xc0023240,cl
c000ea2d:	25 ff 00 00 00       	and    eax,0xff
c000ea32:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000ea36:	8a 54 11 2c          	mov    dl,BYTE PTR [ecx+edx*1+0x2c]
c000ea3a:	88 90 60 32 02 c0    	mov    BYTE PTR [eax-0x3ffdcda0],dl
c000ea40:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000ea45:	e9 f6 02 00 00       	jmp    c000ed40 <scanMADT()+0x4ac>
c000ea4a:	66 90                	xchg   ax,ax
c000ea4c:	80 7c 24 23 01       	cmp    BYTE PTR [esp+0x23],0x1
c000ea51:	0f 85 29 01 00 00    	jne    c000eb80 <scanMADT()+0x2ec>
c000ea57:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ea5b:	8d 50 01             	lea    edx,[eax+0x1]
c000ea5e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ea62:	8a 15 00 31 02 c0    	mov    dl,BYTE PTR ds:0xc0023100
c000ea68:	81 e2 ff 00 00 00    	and    edx,0xff
c000ea6e:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000ea72:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000ea76:	88 82 20 31 02 c0    	mov    BYTE PTR [edx-0x3ffdcee0],al
c000ea7c:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
c000ea80:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000ea84:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ea88:	01 d0                	add    eax,edx
c000ea8a:	83 c0 2c             	add    eax,0x2c
c000ea8d:	8a 00                	mov    al,BYTE PTR [eax]
c000ea8f:	31 d2                	xor    edx,edx
c000ea91:	88 c2                	mov    dl,al
c000ea93:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ea97:	8d 48 01             	lea    ecx,[eax+0x1]
c000ea9a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ea9e:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000eaa2:	25 ff 00 00 00       	and    eax,0xff
c000eaa7:	c1 e0 08             	shl    eax,0x8
c000eaaa:	89 d1                	mov    ecx,edx
c000eaac:	09 c1                	or     ecx,eax
c000eaae:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000eab2:	8d 50 02             	lea    edx,[eax+0x2]
c000eab5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000eab9:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000eabd:	25 ff 00 00 00       	and    eax,0xff
c000eac2:	c1 e0 10             	shl    eax,0x10
c000eac5:	09 c1                	or     ecx,eax
c000eac7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000eacb:	8d 50 03             	lea    edx,[eax+0x3]
c000eace:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ead2:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000ead6:	25 ff 00 00 00       	and    eax,0xff
c000eadb:	c1 e0 18             	shl    eax,0x18
c000eade:	09 c1                	or     ecx,eax
c000eae0:	89 ca                	mov    edx,ecx
c000eae2:	a0 00 31 02 c0       	mov    al,ds:0xc0023100
c000eae7:	25 ff 00 00 00       	and    eax,0xff
c000eaec:	89 14 85 40 31 02 c0 	mov    DWORD PTR [eax*4-0x3ffdcec0],edx
c000eaf3:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000eaf8:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000eafc:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000eb00:	01 d0                	add    eax,edx
c000eb02:	83 c0 2c             	add    eax,0x2c
c000eb05:	8a 00                	mov    al,BYTE PTR [eax]
c000eb07:	31 d2                	xor    edx,edx
c000eb09:	88 c2                	mov    dl,al
c000eb0b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000eb0f:	8d 48 01             	lea    ecx,[eax+0x1]
c000eb12:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000eb16:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000eb1a:	25 ff 00 00 00       	and    eax,0xff
c000eb1f:	c1 e0 08             	shl    eax,0x8
c000eb22:	89 d1                	mov    ecx,edx
c000eb24:	09 c1                	or     ecx,eax
c000eb26:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000eb2a:	8d 50 02             	lea    edx,[eax+0x2]
c000eb2d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000eb31:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000eb35:	25 ff 00 00 00       	and    eax,0xff
c000eb3a:	c1 e0 10             	shl    eax,0x10
c000eb3d:	09 c1                	or     ecx,eax
c000eb3f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000eb43:	8d 50 03             	lea    edx,[eax+0x3]
c000eb46:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000eb4a:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000eb4e:	25 ff 00 00 00       	and    eax,0xff
c000eb53:	c1 e0 18             	shl    eax,0x18
c000eb56:	09 c1                	or     ecx,eax
c000eb58:	89 ca                	mov    edx,ecx
c000eb5a:	a0 00 31 02 c0       	mov    al,ds:0xc0023100
c000eb5f:	25 ff 00 00 00       	and    eax,0xff
c000eb64:	89 14 85 c0 31 02 c0 	mov    DWORD PTR [eax*4-0x3ffdce40],edx
c000eb6b:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000eb70:	a0 00 31 02 c0       	mov    al,ds:0xc0023100
c000eb75:	40                   	inc    eax
c000eb76:	a2 00 31 02 c0       	mov    ds:0xc0023100,al
c000eb7b:	e9 c0 01 00 00       	jmp    c000ed40 <scanMADT()+0x4ac>
c000eb80:	80 7c 24 23 02       	cmp    BYTE PTR [esp+0x23],0x2
c000eb85:	0f 85 fd 00 00 00    	jne    c000ec88 <scanMADT()+0x3f4>
c000eb8b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000eb8f:	8d 50 01             	lea    edx,[eax+0x1]
c000eb92:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000eb96:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000eb9a:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000eb9e:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c000eba2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000eba6:	8d 50 01             	lea    edx,[eax+0x1]
c000eba9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ebad:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000ebb1:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000ebb5:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c000ebb9:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000ebbd:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ebc1:	01 d0                	add    eax,edx
c000ebc3:	83 c0 2c             	add    eax,0x2c
c000ebc6:	8a 00                	mov    al,BYTE PTR [eax]
c000ebc8:	31 d2                	xor    edx,edx
c000ebca:	88 c2                	mov    dl,al
c000ebcc:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ebd0:	8d 48 01             	lea    ecx,[eax+0x1]
c000ebd3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ebd7:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000ebdb:	25 ff 00 00 00       	and    eax,0xff
c000ebe0:	c1 e0 08             	shl    eax,0x8
c000ebe3:	89 d1                	mov    ecx,edx
c000ebe5:	09 c1                	or     ecx,eax
c000ebe7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ebeb:	8d 50 02             	lea    edx,[eax+0x2]
c000ebee:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ebf2:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000ebf6:	25 ff 00 00 00       	and    eax,0xff
c000ebfb:	c1 e0 10             	shl    eax,0x10
c000ebfe:	09 c1                	or     ecx,eax
c000ec00:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ec04:	8d 50 03             	lea    edx,[eax+0x3]
c000ec07:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ec0b:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000ec0f:	25 ff 00 00 00       	and    eax,0xff
c000ec14:	c1 e0 18             	shl    eax,0x18
c000ec17:	09 c8                	or     eax,ecx
c000ec19:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000ec1d:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000ec22:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000ec26:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ec2a:	01 d0                	add    eax,edx
c000ec2c:	83 c0 2c             	add    eax,0x2c
c000ec2f:	8a 00                	mov    al,BYTE PTR [eax]
c000ec31:	25 ff 00 00 00       	and    eax,0xff
c000ec36:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000ec3a:	8d 4a 01             	lea    ecx,[edx+0x1]
c000ec3d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000ec41:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c000ec45:	81 e2 ff 00 00 00    	and    edx,0xff
c000ec4b:	c1 e2 08             	shl    edx,0x8
c000ec4e:	09 d0                	or     eax,edx
c000ec50:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c000ec55:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000ec5a:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c000ec5e:	25 ff 00 00 00       	and    eax,0xff
c000ec63:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000ec67:	88 90 c0 f7 01 c0    	mov    BYTE PTR [eax-0x3ffe0840],dl
c000ec6d:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c000ec71:	31 d2                	xor    edx,edx
c000ec73:	88 c2                	mov    dl,al
c000ec75:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c000ec7a:	66 89 84 12 e0 30 02 c0 	mov    WORD PTR [edx+edx*1-0x3ffdcf20],ax
c000ec82:	e9 b9 00 00 00       	jmp    c000ed40 <scanMADT()+0x4ac>
c000ec87:	90                   	nop
c000ec88:	80 7c 24 23 04       	cmp    BYTE PTR [esp+0x23],0x4
c000ec8d:	0f 85 a1 00 00 00    	jne    c000ed34 <scanMADT()+0x4a0>
c000ec93:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ec97:	8d 50 01             	lea    edx,[eax+0x1]
c000ec9a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ec9e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000eca2:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000eca6:	25 ff 00 00 00       	and    eax,0xff
c000ecab:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000ecaf:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000ecb3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ecb7:	01 d0                	add    eax,edx
c000ecb9:	83 c0 2c             	add    eax,0x2c
c000ecbc:	8a 00                	mov    al,BYTE PTR [eax]
c000ecbe:	31 d2                	xor    edx,edx
c000ecc0:	88 c2                	mov    dl,al
c000ecc2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ecc6:	8d 48 01             	lea    ecx,[eax+0x1]
c000ecc9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000eccd:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000ecd1:	25 ff 00 00 00       	and    eax,0xff
c000ecd6:	c1 e0 08             	shl    eax,0x8
c000ecd9:	09 d0                	or     eax,edx
c000ecdb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ecdf:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000ece4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ece8:	8d 50 01             	lea    edx,[eax+0x1]
c000eceb:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ecef:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000ecf3:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000ecf7:	25 ff 00 00 00       	and    eax,0xff
c000ecfc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000ed00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ed04:	c1 e0 08             	shl    eax,0x8
c000ed07:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000ed0b:	89 c1                	mov    ecx,eax
c000ed0d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ed11:	c1 e0 18             	shl    eax,0x18
c000ed14:	89 c3                	mov    ebx,eax
c000ed16:	a1 50 30 02 c0       	mov    eax,ds:0xc0023050
c000ed1b:	8d 50 01             	lea    edx,[eax+0x1]
c000ed1e:	89 15 50 30 02 c0    	mov    DWORD PTR ds:0xc0023050,edx
c000ed24:	09 d9                	or     ecx,ebx
c000ed26:	89 ca                	mov    edx,ecx
c000ed28:	89 14 85 60 30 02 c0 	mov    DWORD PTR [eax*4-0x3ffdcfa0],edx
c000ed2f:	eb 0f                	jmp    c000ed40 <scanMADT()+0x4ac>
c000ed31:	8d 76 00             	lea    esi,[esi+0x0]
c000ed34:	80 7c 24 23 05       	cmp    BYTE PTR [esp+0x23],0x5
c000ed39:	75 05                	jne    c000ed40 <scanMADT()+0x4ac>
c000ed3b:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c000ed40:	8a 44 24 22          	mov    al,BYTE PTR [esp+0x22]
c000ed44:	31 d2                	xor    edx,edx
c000ed46:	88 c2                	mov    dl,al
c000ed48:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ed4c:	01 d0                	add    eax,edx
c000ed4e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000ed52:	e9 31 fc ff ff       	jmp    c000e988 <scanMADT()+0xf4>
c000ed57:	90                   	nop
c000ed58:	90                   	nop
c000ed59:	eb 05                	jmp    c000ed60 <scanMADT()+0x4cc>
c000ed5b:	90                   	nop
c000ed5c:	90                   	nop
c000ed5d:	8d 76 00             	lea    esi,[esi+0x0]
c000ed60:	83 c4 38             	add    esp,0x38
c000ed63:	5b                   	pop    ebx
c000ed64:	c3                   	ret    
c000ed65:	90                   	nop
c000ed66:	66 90                	xchg   ax,ax

c000ed68 <ACPI::ACPI()>:
c000ed68:	83 ec 0c             	sub    esp,0xc
c000ed6b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ed6f:	83 ec 08             	sub    esp,0x8
c000ed72:	68 ed e2 01 c0       	push   0xc001e2ed
c000ed77:	50                   	push   eax
c000ed78:	e8 4b d4 ff ff       	call   c000c1c8 <Device::Device(char const*)>
c000ed7d:	83 c4 10             	add    esp,0x10
c000ed80:	ba 24 e4 01 c0       	mov    edx,0xc001e424
c000ed85:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ed89:	89 10                	mov    DWORD PTR [eax],edx
c000ed8b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ed8f:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c000ed96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ed9a:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c000eda4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eda8:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c000edb2:	e8 dd fa ff ff       	call   c000e894 <scanMADT()>
c000edb7:	90                   	nop
c000edb8:	83 c4 0c             	add    esp,0xc
c000edbb:	c3                   	ret    

c000edbc <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c000edbc:	83 ec 2c             	sub    esp,0x2c
c000edbf:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000edc3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000edc7:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000edcb:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c000edcf:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c000edd4:	88 d0                	mov    al,dl
c000edd6:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000edda:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000eddf:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000ede7:	90                   	nop
c000ede8:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000edec:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000edf2:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c000edf6:	0f 8d 9c 00 00 00    	jge    c000ee98 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xdc>
c000edfc:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000ee00:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000ee04:	83 c2 2a             	add    edx,0x2a
c000ee07:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c000ee0b:	66 39 44 24 08       	cmp    WORD PTR [esp+0x8],ax
c000ee10:	75 7a                	jne    c000ee8c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd0>
c000ee12:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000ee16:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000ee1a:	83 c2 2a             	add    edx,0x2a
c000ee1d:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c000ee21:	38 44 24 04          	cmp    BYTE PTR [esp+0x4],al
c000ee25:	75 65                	jne    c000ee8c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd0>
c000ee27:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c000ee2c:	74 3a                	je     c000ee68 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xac>
c000ee2e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000ee32:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000ee36:	83 c2 2a             	add    edx,0x2a
c000ee39:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c000ee3d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ee41:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ee44:	39 c2                	cmp    edx,eax
c000ee46:	74 10                	je     c000ee58 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x9c>
c000ee48:	83 ec 0c             	sub    esp,0xc
c000ee4b:	68 68 e2 01 c0       	push   0xc001e268
c000ee50:	e8 ea 18 00 00       	call   c001073f <Krnl::panic(char const*)>
c000ee55:	83 c4 10             	add    esp,0x10
c000ee58:	83 ec 0c             	sub    esp,0xc
c000ee5b:	68 f2 e2 01 c0       	push   0xc001e2f2
c000ee60:	e8 da 18 00 00       	call   c001073f <Krnl::panic(char const*)>
c000ee65:	83 c4 10             	add    esp,0x10
c000ee68:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000ee6c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000ee70:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000ee74:	83 c2 2a             	add    edx,0x2a
c000ee77:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c000ee7b:	8b 02                	mov    eax,DWORD PTR [edx]
c000ee7d:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c000ee80:	89 01                	mov    DWORD PTR [ecx],eax
c000ee82:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000ee85:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000ee8a:	66 90                	xchg   ax,ax
c000ee8c:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000ee90:	e9 53 ff ff ff       	jmp    c000ede8 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2c>
c000ee95:	8d 76 00             	lea    esi,[esi+0x0]
c000ee98:	90                   	nop
c000ee99:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ee9d:	83 c4 2c             	add    esp,0x2c
c000eea0:	c2 04 00             	ret    0x4
c000eea3:	90                   	nop

c000eea4 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c000eea4:	83 ec 1c             	sub    esp,0x1c
c000eea7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000eeab:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000eeaf:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000eeb3:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c000eeb8:	88 c8                	mov    al,cl
c000eeba:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000eebe:	88 d0                	mov    al,dl
c000eec0:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000eec4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000eec8:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000eece:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000eed2:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000eed5:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c000eed9:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c000eedd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000eee1:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000eee7:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000eeeb:	8d 48 2a             	lea    ecx,[eax+0x2a]
c000eeee:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000eef2:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c000eef7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000eefb:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000ef01:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c000ef05:	8d 48 01             	lea    ecx,[eax+0x1]
c000ef08:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ef0c:	83 c2 2a             	add    edx,0x2a
c000ef0f:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c000ef13:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ef17:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000ef1d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ef21:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000ef24:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000ef28:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c000ef2c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ef30:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000ef36:	8d 50 01             	lea    edx,[eax+0x1]
c000ef39:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ef3d:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c000ef43:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ef47:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000ef4d:	3d 00 02 00 00       	cmp    eax,0x200
c000ef52:	75 10                	jne    c000ef64 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc0>
c000ef54:	83 ec 0c             	sub    esp,0xc
c000ef57:	68 01 e3 01 c0       	push   0xc001e301
c000ef5c:	e8 de 17 00 00       	call   c001073f <Krnl::panic(char const*)>
c000ef61:	83 c4 10             	add    esp,0x10
c000ef64:	90                   	nop
c000ef65:	83 c4 1c             	add    esp,0x1c
c000ef68:	c3                   	ret    
c000ef69:	90                   	nop
c000ef6a:	66 90                	xchg   ax,ax

c000ef6c <ACPI::setScreenBrightnessLevel(void*, int)>:
c000ef6c:	b8 00 00 00 00       	mov    eax,0x0
c000ef71:	c3                   	ret    
c000ef72:	66 90                	xchg   ax,ax

c000ef74 <ACPI::detectPCI()>:
c000ef74:	53                   	push   ebx
c000ef75:	83 ec 28             	sub    esp,0x28
c000ef78:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000ef7d:	c6 44 24 1e 00       	mov    BYTE PTR [esp+0x1e],0x0
c000ef82:	a1 44 08 02 c0       	mov    eax,ds:0xc0020844
c000ef87:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000ef8d:	83 e0 04             	and    eax,0x4
c000ef90:	84 c0                	test   al,al
c000ef92:	74 2c                	je     c000efc0 <ACPI::detectPCI()+0x4c>
c000ef94:	a1 48 30 02 c0       	mov    eax,ds:0xc0023048
c000ef99:	83 ec 08             	sub    esp,0x8
c000ef9c:	68 1e e3 01 c0       	push   0xc001e31e
c000efa1:	50                   	push   eax
c000efa2:	e8 75 f8 ff ff       	call   c000e81c <findDataTable(unsigned char*, char*)>
c000efa7:	83 c4 10             	add    esp,0x10
c000efaa:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000efae:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000efb3:	74 0b                	je     c000efc0 <ACPI::detectPCI()+0x4c>
c000efb5:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000efba:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000efbf:	90                   	nop
c000efc0:	c7 44 24 14 5f 0c 00 00 	mov    DWORD PTR [esp+0x14],0xc5f
c000efc8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000efcc:	8a 00                	mov    al,BYTE PTR [eax]
c000efce:	3c 01                	cmp    al,0x1
c000efd0:	75 0e                	jne    c000efe0 <ACPI::detectPCI()+0x6c>
c000efd2:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000efd7:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000efdc:	eb 2a                	jmp    c000f008 <ACPI::detectPCI()+0x94>
c000efde:	66 90                	xchg   ax,ax
c000efe0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000efe4:	8a 00                	mov    al,BYTE PTR [eax]
c000efe6:	3c 02                	cmp    al,0x2
c000efe8:	75 1e                	jne    c000f008 <ACPI::detectPCI()+0x94>
c000efea:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000efef:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c000eff4:	74 12                	je     c000f008 <ACPI::detectPCI()+0x94>
c000eff6:	83 ec 0c             	sub    esp,0xc
c000eff9:	68 98 e2 01 c0       	push   0xc001e298
c000effe:	e8 3c 17 00 00       	call   c001073f <Krnl::panic(char const*)>
c000f003:	83 c4 10             	add    esp,0x10
c000f006:	66 90                	xchg   ax,ax
c000f008:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c000f00c:	83 f0 01             	xor    eax,0x1
c000f00f:	84 c0                	test   al,al
c000f011:	74 41                	je     c000f054 <ACPI::detectPCI()+0xe0>
c000f013:	e8 38 11 ff ff       	call   c0000150 <manualPCIProbe>
c000f018:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000f01c:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000f021:	75 0d                	jne    c000f030 <ACPI::detectPCI()+0xbc>
c000f023:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000f028:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000f02d:	eb 25                	jmp    c000f054 <ACPI::detectPCI()+0xe0>
c000f02f:	90                   	nop
c000f030:	83 7c 24 10 02       	cmp    DWORD PTR [esp+0x10],0x2
c000f035:	75 1d                	jne    c000f054 <ACPI::detectPCI()+0xe0>
c000f037:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000f03c:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c000f041:	74 11                	je     c000f054 <ACPI::detectPCI()+0xe0>
c000f043:	83 ec 0c             	sub    esp,0xc
c000f046:	68 98 e2 01 c0       	push   0xc001e298
c000f04b:	e8 ef 16 00 00       	call   c001073f <Krnl::panic(char const*)>
c000f050:	83 c4 10             	add    esp,0x10
c000f053:	90                   	nop
c000f054:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c000f059:	0f 84 85 00 00 00    	je     c000f0e4 <ACPI::detectPCI()+0x170>
c000f05f:	83 ec 0c             	sub    esp,0xc
c000f062:	68 23 e3 01 c0       	push   0xc001e323
c000f067:	e8 4f 8e ff ff       	call   c0007ebb <Krnl::setBootMessage(char const*)>
c000f06c:	83 c4 10             	add    esp,0x10
c000f06f:	c7 44 24 04 5c 01 00 00 	mov    DWORD PTR [esp+0x4],0x15c
c000f077:	83 ec 0c             	sub    esp,0xc
c000f07a:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000f07e:	e8 de 8d ff ff       	call   c0007e61 <malloc>
c000f083:	83 c4 10             	add    esp,0x10
c000f086:	89 c3                	mov    ebx,eax
c000f088:	83 ec 0c             	sub    esp,0xc
c000f08b:	53                   	push   ebx
c000f08c:	e8 6d 93 00 00       	call   c00183fe <PCI::PCI()>
c000f091:	83 c4 10             	add    esp,0x10
c000f094:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000f098:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f09c:	83 ec 08             	sub    esp,0x8
c000f09f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000f0a3:	50                   	push   eax
c000f0a4:	e8 87 cf ff ff       	call   c000c030 <Device::addChild(Device*)>
c000f0a9:	83 c4 10             	add    esp,0x10
c000f0ac:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f0b0:	8b 00                	mov    eax,DWORD PTR [eax]
c000f0b2:	83 c0 08             	add    eax,0x8
c000f0b5:	8b 00                	mov    eax,DWORD PTR [eax]
c000f0b7:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c000f0bc:	74 0a                	je     c000f0c8 <ACPI::detectPCI()+0x154>
c000f0be:	ba 01 00 00 00       	mov    edx,0x1
c000f0c3:	eb 0b                	jmp    c000f0d0 <ACPI::detectPCI()+0x15c>
c000f0c5:	8d 76 00             	lea    esi,[esi+0x0]
c000f0c8:	ba 02 00 00 00       	mov    edx,0x2
c000f0cd:	8d 76 00             	lea    esi,[esi+0x0]
c000f0d0:	6a 00                	push   0x0
c000f0d2:	6a 00                	push   0x0
c000f0d4:	52                   	push   edx
c000f0d5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f0d9:	ff d0                	call   eax
c000f0db:	83 c4 10             	add    esp,0x10
c000f0de:	e9 91 00 00 00       	jmp    c000f174 <ACPI::detectPCI()+0x200>
c000f0e3:	90                   	nop
c000f0e4:	83 ec 0c             	sub    esp,0xc
c000f0e7:	68 3b e3 01 c0       	push   0xc001e33b
c000f0ec:	e8 ca 8d ff ff       	call   c0007ebb <Krnl::setBootMessage(char const*)>
c000f0f1:	83 c4 10             	add    esp,0x10
c000f0f4:	c7 04 24 70 02 00 00 	mov    DWORD PTR [esp],0x270
c000f0fb:	83 ec 0c             	sub    esp,0xc
c000f0fe:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000f102:	e8 5a 8d ff ff       	call   c0007e61 <malloc>
c000f107:	83 c4 10             	add    esp,0x10
c000f10a:	89 c3                	mov    ebx,eax
c000f10c:	83 ec 0c             	sub    esp,0xc
c000f10f:	53                   	push   ebx
c000f110:	e8 15 9e 00 00       	call   c0018f2a <IDE::IDE()>
c000f115:	83 c4 10             	add    esp,0x10
c000f118:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000f11c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f120:	83 ec 08             	sub    esp,0x8
c000f123:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000f127:	50                   	push   eax
c000f128:	e8 03 cf ff ff       	call   c000c030 <Device::addChild(Device*)>
c000f12d:	83 c4 10             	add    esp,0x10
c000f130:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f134:	c7 80 14 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x114],0x1
c000f13e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f142:	66 c7 80 18 01 00 00 f0 01 	mov    WORD PTR [eax+0x118],0x1f0
c000f14b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f14f:	66 c7 80 1a 01 00 00 70 01 	mov    WORD PTR [eax+0x11a],0x170
c000f158:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f15c:	8b 00                	mov    eax,DWORD PTR [eax]
c000f15e:	83 c0 08             	add    eax,0x8
c000f161:	8b 00                	mov    eax,DWORD PTR [eax]
c000f163:	6a 00                	push   0x0
c000f165:	6a 00                	push   0x0
c000f167:	6a 00                	push   0x0
c000f169:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000f16d:	ff d0                	call   eax
c000f16f:	83 c4 10             	add    esp,0x10
c000f172:	66 90                	xchg   ax,ax
c000f174:	90                   	nop
c000f175:	83 c4 28             	add    esp,0x28
c000f178:	5b                   	pop    ebx
c000f179:	c3                   	ret    
c000f17a:	66 90                	xchg   ax,ax

c000f17c <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c000f17c:	83 ec 1c             	sub    esp,0x1c
c000f17f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f183:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000f186:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000f18a:	8b 15 44 08 02 c0    	mov    edx,DWORD PTR ds:0xc0020844
c000f190:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000f194:	25 ff 00 00 00       	and    eax,0xff
c000f199:	83 ec 08             	sub    esp,0x8
c000f19c:	50                   	push   eax
c000f19d:	52                   	push   edx
c000f19e:	e8 af 83 ff ff       	call   c0007552 <Computer::readCMOS(unsigned char)>
c000f1a3:	83 c4 10             	add    esp,0x10
c000f1a6:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c000f1aa:	8b 15 44 08 02 c0    	mov    edx,DWORD PTR ds:0xc0020844
c000f1b0:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000f1b4:	25 ff 00 00 00       	and    eax,0xff
c000f1b9:	83 ec 04             	sub    esp,0x4
c000f1bc:	6a 01                	push   0x1
c000f1be:	50                   	push   eax
c000f1bf:	52                   	push   edx
c000f1c0:	e8 a3 84 ff ff       	call   c0007668 <Computer::writeCMOS(unsigned char, unsigned char)>
c000f1c5:	83 c4 10             	add    esp,0x10
c000f1c8:	90                   	nop
c000f1c9:	83 c4 1c             	add    esp,0x1c
c000f1cc:	c3                   	ret    
c000f1cd:	90                   	nop
c000f1ce:	66 90                	xchg   ax,ax

c000f1d0 <ACPI::sleep()>:
c000f1d0:	83 ec 0c             	sub    esp,0xc
c000f1d3:	a1 20 2e 02 c0       	mov    eax,ds:0xc0022e20
c000f1d8:	85 c0                	test   eax,eax
c000f1da:	74 08                	je     c000f1e4 <ACPI::sleep()+0x14>
c000f1dc:	a1 20 2e 02 c0       	mov    eax,ds:0xc0022e20
c000f1e1:	ff d0                	call   eax
c000f1e3:	90                   	nop
c000f1e4:	90                   	nop
c000f1e5:	83 c4 0c             	add    esp,0xc
c000f1e8:	c3                   	ret    
c000f1e9:	90                   	nop
c000f1ea:	66 90                	xchg   ax,ax

c000f1ec <ACPI::open(int, int, void*)>:
c000f1ec:	57                   	push   edi
c000f1ed:	56                   	push   esi
c000f1ee:	53                   	push   ebx
c000f1ef:	81 ec 70 01 00 00    	sub    esp,0x170
c000f1f5:	83 ec 0c             	sub    esp,0xc
c000f1f8:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c000f1ff:	e8 70 fd ff ff       	call   c000ef74 <ACPI::detectPCI()>
c000f204:	83 c4 10             	add    esp,0x10
c000f207:	83 ec 0c             	sub    esp,0xc
c000f20a:	68 c0 e2 01 c0       	push   0xc001e2c0
c000f20f:	e8 a7 8c ff ff       	call   c0007ebb <Krnl::setBootMessage(char const*)>
c000f214:	83 c4 10             	add    esp,0x10
c000f217:	83 ec 0c             	sub    esp,0xc
c000f21a:	68 50 e3 01 c0       	push   0xc001e350
c000f21f:	e8 07 34 00 00       	call   c001262b <Thr::loadKernelSymbolTable(char const*)>
c000f224:	83 c4 10             	add    esp,0x10
c000f227:	c6 84 24 6f 01 00 00 00 	mov    BYTE PTR [esp+0x16f],0x0
c000f22f:	c7 84 24 44 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x144],0x114
c000f23a:	83 ec 0c             	sub    esp,0xc
c000f23d:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c000f244:	e8 18 8c ff ff       	call   c0007e61 <malloc>
c000f249:	83 c4 10             	add    esp,0x10
c000f24c:	89 c3                	mov    ebx,eax
c000f24e:	a1 30 3d 02 c0       	mov    eax,ds:0xc0023d30
c000f253:	83 ec 04             	sub    esp,0x4
c000f256:	50                   	push   eax
c000f257:	68 6e e3 01 c0       	push   0xc001e36e
c000f25c:	53                   	push   ebx
c000f25d:	e8 04 bf ff ff       	call   c000b166 <File::File(char const*, Process*)>
c000f262:	83 c4 10             	add    esp,0x10
c000f265:	89 9c 24 68 01 00 00 	mov    DWORD PTR [esp+0x168],ebx
c000f26c:	83 ec 08             	sub    esp,0x8
c000f26f:	6a 01                	push   0x1
c000f271:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000f278:	e8 a9 bf ff ff       	call   c000b226 <File::open(FileOpenMode)>
c000f27d:	83 c4 10             	add    esp,0x10
c000f280:	89 84 24 64 01 00 00 	mov    DWORD PTR [esp+0x164],eax
c000f287:	83 bc 24 64 01 00 00 00 	cmp    DWORD PTR [esp+0x164],0x0
c000f28f:	75 17                	jne    c000f2a8 <ACPI::open(int, int, void*)+0xbc>
c000f291:	83 ec 0c             	sub    esp,0xc
c000f294:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000f29b:	e8 e4 bf ff ff       	call   c000b284 <File::close()>
c000f2a0:	83 c4 10             	add    esp,0x10
c000f2a3:	eb 0b                	jmp    c000f2b0 <ACPI::open(int, int, void*)+0xc4>
c000f2a5:	8d 76 00             	lea    esi,[esi+0x0]
c000f2a8:	c6 84 24 6f 01 00 00 01 	mov    BYTE PTR [esp+0x16f],0x1
c000f2b0:	83 bc 24 68 01 00 00 00 	cmp    DWORD PTR [esp+0x168],0x0
c000f2b8:	74 1e                	je     c000f2d8 <ACPI::open(int, int, void*)+0xec>
c000f2ba:	8b 84 24 68 01 00 00 	mov    eax,DWORD PTR [esp+0x168]
c000f2c1:	8b 00                	mov    eax,DWORD PTR [eax]
c000f2c3:	83 c0 08             	add    eax,0x8
c000f2c6:	8b 00                	mov    eax,DWORD PTR [eax]
c000f2c8:	83 ec 0c             	sub    esp,0xc
c000f2cb:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000f2d2:	ff d0                	call   eax
c000f2d4:	83 c4 10             	add    esp,0x10
c000f2d7:	90                   	nop
c000f2d8:	8a 84 24 6f 01 00 00 	mov    al,BYTE PTR [esp+0x16f]
c000f2df:	83 f0 01             	xor    eax,0x1
c000f2e2:	84 c0                	test   al,al
c000f2e4:	74 42                	je     c000f328 <ACPI::open(int, int, void*)+0x13c>
c000f2e6:	83 ec 0c             	sub    esp,0xc
c000f2e9:	68 8c e3 01 c0       	push   0xc001e38c
c000f2ee:	e8 c8 8b ff ff       	call   c0007ebb <Krnl::setBootMessage(char const*)>
c000f2f3:	83 c4 10             	add    esp,0x10
c000f2f6:	83 ec 04             	sub    esp,0x4
c000f2f9:	6a 0c                	push   0xc
c000f2fb:	68 a7 e3 01 c0       	push   0xc001e3a7
c000f300:	68 b8 e3 01 c0       	push   0xc001e3b8
c000f305:	e8 20 1b 00 00       	call   c0010e2a <Reg::readIntWithDefault(char*, char*, int)>
c000f30a:	83 c4 10             	add    esp,0x10
c000f30d:	89 84 24 60 01 00 00 	mov    DWORD PTR [esp+0x160],eax
c000f314:	83 ec 0c             	sub    esp,0xc
c000f317:	ff b4 24 6c 01 00 00 	push   DWORD PTR [esp+0x16c]
c000f31e:	e8 84 a8 ff ff       	call   c0009ba7 <Virt::setupPageSwapping(int)>
c000f323:	83 c4 10             	add    esp,0x10
c000f326:	66 90                	xchg   ax,ax
c000f328:	83 ec 0c             	sub    esp,0xc
c000f32b:	68 40 d4 01 c0       	push   0xc001d440
c000f330:	e8 86 8b ff ff       	call   c0007ebb <Krnl::setBootMessage(char const*)>
c000f335:	83 c4 10             	add    esp,0x10
c000f338:	8d 84 24 30 01 00 00 	lea    eax,[esp+0x130]
c000f33f:	83 ec 08             	sub    esp,0x8
c000f342:	6a 12                	push   0x12
c000f344:	50                   	push   eax
c000f345:	e8 fe cf ff ff       	call   c000c348 <getDevicesOfType(DeviceType)>
c000f34a:	83 c4 0c             	add    esp,0xc
c000f34d:	8d 76 00             	lea    esi,[esi+0x0]
c000f350:	83 ec 0c             	sub    esp,0xc
c000f353:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000f35a:	50                   	push   eax
c000f35b:	e8 dc d4 00 00       	call   c001c83c <LinkedList<Device>::isEmpty()>
c000f360:	83 c4 10             	add    esp,0x10
c000f363:	83 f0 01             	xor    eax,0x1
c000f366:	84 c0                	test   al,al
c000f368:	0f 84 46 01 00 00    	je     c000f4b4 <ACPI::open(int, int, void*)+0x2c8>
c000f36e:	83 ec 0c             	sub    esp,0xc
c000f371:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000f378:	50                   	push   eax
c000f379:	e8 da d4 00 00       	call   c001c858 <LinkedList<Device>::getFirstElement()>
c000f37e:	83 c4 10             	add    esp,0x10
c000f381:	89 84 24 5c 01 00 00 	mov    DWORD PTR [esp+0x15c],eax
c000f388:	83 ec 0c             	sub    esp,0xc
c000f38b:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000f392:	50                   	push   eax
c000f393:	e8 c8 d4 00 00       	call   c001c860 <LinkedList<Device>::removeFirst()>
c000f398:	83 c4 10             	add    esp,0x10
c000f39b:	8b 84 24 5c 01 00 00 	mov    eax,DWORD PTR [esp+0x15c]
c000f3a2:	89 84 24 58 01 00 00 	mov    DWORD PTR [esp+0x158],eax
c000f3a9:	8b 94 24 58 01 00 00 	mov    edx,DWORD PTR [esp+0x158]
c000f3b0:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f3b4:	8d 9a 18 01 00 00    	lea    ebx,[edx+0x118]
c000f3ba:	ba 09 00 00 00       	mov    edx,0x9
c000f3bf:	fc                   	cld    
c000f3c0:	89 c7                	mov    edi,eax
c000f3c2:	89 de                	mov    esi,ebx
c000f3c4:	89 d1                	mov    ecx,edx
c000f3c6:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000f3c8:	83 ec 08             	sub    esp,0x8
c000f3cb:	8d 44 24 38          	lea    eax,[esp+0x38]
c000f3cf:	50                   	push   eax
c000f3d0:	83 ec 24             	sub    esp,0x24
c000f3d3:	89 e0                	mov    eax,esp
c000f3d5:	89 c3                	mov    ebx,eax
c000f3d7:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c000f3db:	ba 09 00 00 00       	mov    edx,0x9
c000f3e0:	89 df                	mov    edi,ebx
c000f3e2:	89 c6                	mov    esi,eax
c000f3e4:	89 d1                	mov    ecx,edx
c000f3e6:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000f3e8:	e8 f3 94 00 00       	call   c00188e0 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>
c000f3ed:	83 c4 30             	add    esp,0x30
c000f3f0:	89 84 24 54 01 00 00 	mov    DWORD PTR [esp+0x154],eax
c000f3f7:	83 bc 24 54 01 00 00 00 	cmp    DWORD PTR [esp+0x154],0x0
c000f3ff:	0f 84 4b ff ff ff    	je     c000f350 <ACPI::open(int, int, void*)+0x164>
c000f405:	c7 84 24 40 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x140],0x114
c000f410:	83 ec 0c             	sub    esp,0xc
c000f413:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c000f41a:	e8 42 8a ff ff       	call   c0007e61 <malloc>
c000f41f:	83 c4 10             	add    esp,0x10
c000f422:	89 c3                	mov    ebx,eax
c000f424:	a1 30 3d 02 c0       	mov    eax,ds:0xc0023d30
c000f429:	83 ec 04             	sub    esp,0x4
c000f42c:	50                   	push   eax
c000f42d:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000f434:	53                   	push   ebx
c000f435:	e8 2c bd ff ff       	call   c000b166 <File::File(char const*, Process*)>
c000f43a:	83 c4 10             	add    esp,0x10
c000f43d:	89 9c 24 50 01 00 00 	mov    DWORD PTR [esp+0x150],ebx
c000f444:	83 ec 0c             	sub    esp,0xc
c000f447:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000f44e:	e8 41 c0 ff ff       	call   c000b494 <File::exists()>
c000f453:	83 c4 10             	add    esp,0x10
c000f456:	84 c0                	test   al,al
c000f458:	74 2a                	je     c000f484 <ACPI::open(int, int, void*)+0x298>
c000f45a:	83 ec 08             	sub    esp,0x8
c000f45d:	6a 01                	push   0x1
c000f45f:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c000f466:	e8 37 3c 00 00       	call   c00130a2 <Thr::loadDLL(char const*, bool)>
c000f46b:	83 c4 10             	add    esp,0x10
c000f46e:	83 ec 08             	sub    esp,0x8
c000f471:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c000f478:	50                   	push   eax
c000f479:	e8 55 3e 00 00       	call   c00132d3 <Thr::executeDLL(unsigned long, void*)>
c000f47e:	83 c4 10             	add    esp,0x10
c000f481:	8d 76 00             	lea    esi,[esi+0x0]
c000f484:	83 bc 24 50 01 00 00 00 	cmp    DWORD PTR [esp+0x150],0x0
c000f48c:	0f 84 be fe ff ff    	je     c000f350 <ACPI::open(int, int, void*)+0x164>
c000f492:	8b 84 24 50 01 00 00 	mov    eax,DWORD PTR [esp+0x150]
c000f499:	8b 00                	mov    eax,DWORD PTR [eax]
c000f49b:	83 c0 08             	add    eax,0x8
c000f49e:	8b 00                	mov    eax,DWORD PTR [eax]
c000f4a0:	83 ec 0c             	sub    esp,0xc
c000f4a3:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000f4aa:	ff d0                	call   eax
c000f4ac:	83 c4 10             	add    esp,0x10
c000f4af:	e9 9c fe ff ff       	jmp    c000f350 <ACPI::open(int, int, void*)+0x164>
c000f4b4:	83 ec 0c             	sub    esp,0xc
c000f4b7:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000f4be:	50                   	push   eax
c000f4bf:	e8 74 d3 00 00       	call   c001c838 <LinkedList<Device>::~LinkedList()>
c000f4c4:	83 c4 10             	add    esp,0x10
c000f4c7:	8b 1d 44 08 02 c0    	mov    ebx,DWORD PTR ds:0xc0020844
c000f4cd:	83 ec 08             	sub    esp,0x8
c000f4d0:	6a 01                	push   0x1
c000f4d2:	68 bf e3 01 c0       	push   0xc001e3bf
c000f4d7:	e8 c6 3b 00 00       	call   c00130a2 <Thr::loadDLL(char const*, bool)>
c000f4dc:	83 c4 10             	add    esp,0x10
c000f4df:	83 ec 08             	sub    esp,0x8
c000f4e2:	53                   	push   ebx
c000f4e3:	50                   	push   eax
c000f4e4:	e8 ea 3d 00 00       	call   c00132d3 <Thr::executeDLL(unsigned long, void*)>
c000f4e9:	83 c4 10             	add    esp,0x10
c000f4ec:	a1 44 08 02 c0       	mov    eax,ds:0xc0020844
c000f4f1:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000f4f7:	83 e0 04             	and    eax,0x4
c000f4fa:	84 c0                	test   al,al
c000f4fc:	0f 84 16 01 00 00    	je     c000f618 <ACPI::open(int, int, void*)+0x42c>
c000f502:	83 ec 0c             	sub    esp,0xc
c000f505:	68 dc e3 01 c0       	push   0xc001e3dc
c000f50a:	e8 ac 89 ff ff       	call   c0007ebb <Krnl::setBootMessage(char const*)>
c000f50f:	83 c4 10             	add    esp,0x10
c000f512:	c7 84 24 3c 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x13c],0x114
c000f51d:	83 ec 0c             	sub    esp,0xc
c000f520:	ff b4 24 48 01 00 00 	push   DWORD PTR [esp+0x148]
c000f527:	e8 35 89 ff ff       	call   c0007e61 <malloc>
c000f52c:	83 c4 10             	add    esp,0x10
c000f52f:	89 c3                	mov    ebx,eax
c000f531:	a1 30 3d 02 c0       	mov    eax,ds:0xc0023d30
c000f536:	83 ec 04             	sub    esp,0x4
c000f539:	50                   	push   eax
c000f53a:	68 f9 e3 01 c0       	push   0xc001e3f9
c000f53f:	53                   	push   ebx
c000f540:	e8 21 bc ff ff       	call   c000b166 <File::File(char const*, Process*)>
c000f545:	83 c4 10             	add    esp,0x10
c000f548:	89 9c 24 4c 01 00 00 	mov    DWORD PTR [esp+0x14c],ebx
c000f54f:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000f557:	74 1b                	je     c000f574 <ACPI::open(int, int, void*)+0x388>
c000f559:	83 ec 0c             	sub    esp,0xc
c000f55c:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c000f563:	e8 2c bf ff ff       	call   c000b494 <File::exists()>
c000f568:	83 c4 10             	add    esp,0x10
c000f56b:	84 c0                	test   al,al
c000f56d:	74 05                	je     c000f574 <ACPI::open(int, int, void*)+0x388>
c000f56f:	b0 01                	mov    al,0x1
c000f571:	eb 05                	jmp    c000f578 <ACPI::open(int, int, void*)+0x38c>
c000f573:	90                   	nop
c000f574:	b0 00                	mov    al,0x0
c000f576:	66 90                	xchg   ax,ax
c000f578:	84 c0                	test   al,al
c000f57a:	74 28                	je     c000f5a4 <ACPI::open(int, int, void*)+0x3b8>
c000f57c:	83 ec 08             	sub    esp,0x8
c000f57f:	6a 01                	push   0x1
c000f581:	68 f9 e3 01 c0       	push   0xc001e3f9
c000f586:	e8 17 3b 00 00       	call   c00130a2 <Thr::loadDLL(char const*, bool)>
c000f58b:	83 c4 10             	add    esp,0x10
c000f58e:	83 ec 08             	sub    esp,0x8
c000f591:	ff b4 24 88 01 00 00 	push   DWORD PTR [esp+0x188]
c000f598:	50                   	push   eax
c000f599:	e8 35 3d 00 00       	call   c00132d3 <Thr::executeDLL(unsigned long, void*)>
c000f59e:	83 c4 10             	add    esp,0x10
c000f5a1:	8d 76 00             	lea    esi,[esi+0x0]
c000f5a4:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000f5ac:	74 2a                	je     c000f5d8 <ACPI::open(int, int, void*)+0x3ec>
c000f5ae:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000f5b6:	74 20                	je     c000f5d8 <ACPI::open(int, int, void*)+0x3ec>
c000f5b8:	8b 84 24 4c 01 00 00 	mov    eax,DWORD PTR [esp+0x14c]
c000f5bf:	8b 00                	mov    eax,DWORD PTR [eax]
c000f5c1:	83 c0 08             	add    eax,0x8
c000f5c4:	8b 00                	mov    eax,DWORD PTR [eax]
c000f5c6:	83 ec 0c             	sub    esp,0xc
c000f5c9:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c000f5d0:	ff d0                	call   eax
c000f5d2:	83 c4 10             	add    esp,0x10
c000f5d5:	8d 76 00             	lea    esi,[esi+0x0]
c000f5d8:	a1 48 30 02 c0       	mov    eax,ds:0xc0023048
c000f5dd:	83 ec 08             	sub    esp,0x8
c000f5e0:	68 16 e4 01 c0       	push   0xc001e416
c000f5e5:	50                   	push   eax
c000f5e6:	e8 31 f2 ff ff       	call   c000e81c <findDataTable(unsigned char*, char*)>
c000f5eb:	83 c4 10             	add    esp,0x10
c000f5ee:	89 84 24 48 01 00 00 	mov    DWORD PTR [esp+0x148],eax
c000f5f5:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c000f5fd:	74 19                	je     c000f618 <ACPI::open(int, int, void*)+0x42c>
c000f5ff:	83 ec 08             	sub    esp,0x8
c000f602:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c000f609:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c000f610:	e8 67 fb ff ff       	call   c000f17c <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c000f615:	83 c4 10             	add    esp,0x10
c000f618:	b8 00 00 00 00       	mov    eax,0x0
c000f61d:	81 c4 70 01 00 00    	add    esp,0x170
c000f623:	5b                   	pop    ebx
c000f624:	5e                   	pop    esi
c000f625:	5f                   	pop    edi
c000f626:	c3                   	ret    
c000f627:	90                   	nop

c000f628 <CPU::close(int, int, void*)>:
c000f628:	31 c0                	xor    eax,eax
c000f62a:	c3                   	ret    
c000f62b:	90                   	nop

c000f62c <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c000f62c:	60                   	pusha  
c000f62d:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f631:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f635:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000f639:	9c                   	pushf  
c000f63a:	fa                   	cli    
c000f63b:	0f 09                	wbinvd 
c000f63d:	0f 30                	wrmsr  
c000f63f:	9d                   	popf   
c000f640:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000f644:	89 02                	mov    DWORD PTR [edx],eax
c000f646:	61                   	popa   
c000f647:	c3                   	ret    

c000f648 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c000f648:	60                   	pusha  
c000f649:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f64d:	9c                   	pushf  
c000f64e:	fa                   	cli    
c000f64f:	0f 09                	wbinvd 
c000f651:	31 c0                	xor    eax,eax
c000f653:	31 d2                	xor    edx,edx
c000f655:	0f 32                	rdmsr  
c000f657:	9d                   	popf   
c000f658:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000f65c:	89 02                	mov    DWORD PTR [edx],eax
c000f65e:	61                   	popa   
c000f65f:	c3                   	ret    

c000f660 <CPU::AMD_K6_writeback(int, int, int)>:
c000f660:	56                   	push   esi
c000f661:	53                   	push   ebx
c000f662:	83 ec 10             	sub    esp,0x10
c000f665:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f669:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c000f66e:	75 5d                	jne    c000f6cd <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000f670:	83 f8 08             	cmp    eax,0x8
c000f673:	75 09                	jne    c000f67e <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c000f675:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c000f67a:	7e 13                	jle    c000f68f <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c000f67c:	eb 30                	jmp    c000f6ae <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c000f67e:	83 f8 06             	cmp    eax,0x6
c000f681:	7c 4a                	jl     c000f6cd <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000f683:	83 f8 07             	cmp    eax,0x7
c000f686:	7e 07                	jle    c000f68f <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c000f688:	83 f8 09             	cmp    eax,0x9
c000f68b:	74 21                	je     c000f6ae <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c000f68d:	eb 3e                	jmp    c000f6cd <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000f68f:	89 e6                	mov    esi,esp
c000f691:	8b 1d 68 08 02 c0    	mov    ebx,DWORD PTR ds:0xc0020868
c000f697:	56                   	push   esi
c000f698:	c1 eb 15             	shr    ebx,0x15
c000f69b:	68 82 00 00 c0       	push   0xc0000082
c000f6a0:	83 e3 7e             	and    ebx,0x7e
c000f6a3:	e8 a0 ff ff ff       	call   c000f648 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c000f6a8:	56                   	push   esi
c000f6a9:	6a 00                	push   0x0
c000f6ab:	53                   	push   ebx
c000f6ac:	eb 12                	jmp    c000f6c0 <CPU::AMD_K6_writeback(int, int, int)+0x60>
c000f6ae:	89 e3                	mov    ebx,esp
c000f6b0:	53                   	push   ebx
c000f6b1:	68 82 00 00 c0       	push   0xc0000082
c000f6b6:	e8 8d ff ff ff       	call   c000f648 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c000f6bb:	53                   	push   ebx
c000f6bc:	6a 00                	push   0x0
c000f6be:	6a 00                	push   0x0
c000f6c0:	68 82 00 00 c0       	push   0xc0000082
c000f6c5:	e8 62 ff ff ff       	call   c000f62c <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c000f6ca:	83 c4 18             	add    esp,0x18
c000f6cd:	83 c4 10             	add    esp,0x10
c000f6d0:	5b                   	pop    ebx
c000f6d1:	5e                   	pop    esi
c000f6d2:	c3                   	ret    
c000f6d3:	90                   	nop

c000f6d4 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c000f6d4:	55                   	push   ebp
c000f6d5:	57                   	push   edi
c000f6d6:	56                   	push   esi
c000f6d7:	53                   	push   ebx
c000f6d8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f6dc:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000f6e0:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000f6e4:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c000f6e8:	39 05 d0 f7 01 c0    	cmp    DWORD PTR ds:0xc001f7d0,eax
c000f6ee:	75 23                	jne    c000f713 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c000f6f0:	a1 ac 32 02 c0       	mov    eax,ds:0xc00232ac
c000f6f5:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000f6f9:	89 06                	mov    DWORD PTR [esi],eax
c000f6fb:	a1 a8 32 02 c0       	mov    eax,ds:0xc00232a8
c000f700:	89 07                	mov    DWORD PTR [edi],eax
c000f702:	a1 a4 32 02 c0       	mov    eax,ds:0xc00232a4
c000f707:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000f70a:	a1 a0 32 02 c0       	mov    eax,ds:0xc00232a0
c000f70f:	89 02                	mov    DWORD PTR [edx],eax
c000f711:	eb 3f                	jmp    c000f752 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c000f713:	31 c9                	xor    ecx,ecx
c000f715:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f719:	0f a2                	cpuid  
c000f71b:	89 06                	mov    DWORD PTR [esi],eax
c000f71d:	89 1f                	mov    DWORD PTR [edi],ebx
c000f71f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f723:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c000f726:	89 10                	mov    DWORD PTR [eax],edx
c000f728:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f72c:	a3 d0 f7 01 c0       	mov    ds:0xc001f7d0,eax
c000f731:	8b 06                	mov    eax,DWORD PTR [esi]
c000f733:	a3 ac 32 02 c0       	mov    ds:0xc00232ac,eax
c000f738:	8b 07                	mov    eax,DWORD PTR [edi]
c000f73a:	a3 a8 32 02 c0       	mov    ds:0xc00232a8,eax
c000f73f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000f742:	a3 a4 32 02 c0       	mov    ds:0xc00232a4,eax
c000f747:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f74b:	8b 00                	mov    eax,DWORD PTR [eax]
c000f74d:	a3 a0 32 02 c0       	mov    ds:0xc00232a0,eax
c000f752:	5b                   	pop    ebx
c000f753:	5e                   	pop    esi
c000f754:	5f                   	pop    edi
c000f755:	5d                   	pop    ebp
c000f756:	c3                   	ret    
c000f757:	90                   	nop

c000f758 <CPU::cpuidCheckEDX(unsigned int)>:
c000f758:	83 ec 10             	sub    esp,0x10
c000f75b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f75f:	50                   	push   eax
c000f760:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f764:	50                   	push   eax
c000f765:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f769:	50                   	push   eax
c000f76a:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f76e:	50                   	push   eax
c000f76f:	6a 01                	push   0x1
c000f771:	e8 5e ff ff ff       	call   c000f6d4 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f776:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f77a:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c000f77e:	0f 95 c0             	setne  al
c000f781:	83 c4 24             	add    esp,0x24
c000f784:	c3                   	ret    
c000f785:	90                   	nop

c000f786 <CPU::cpuidCheckECX(unsigned int)>:
c000f786:	83 ec 10             	sub    esp,0x10
c000f789:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f78d:	50                   	push   eax
c000f78e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f792:	50                   	push   eax
c000f793:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f797:	50                   	push   eax
c000f798:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f79c:	50                   	push   eax
c000f79d:	6a 01                	push   0x1
c000f79f:	e8 30 ff ff ff       	call   c000f6d4 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f7a4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f7a8:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c000f7ac:	0f 95 c0             	setne  al
c000f7af:	83 c4 24             	add    esp,0x24
c000f7b2:	c3                   	ret    
c000f7b3:	90                   	nop

c000f7b4 <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c000f7b4:	83 ec 10             	sub    esp,0x10
c000f7b7:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f7bb:	50                   	push   eax
c000f7bc:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f7c0:	50                   	push   eax
c000f7c1:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f7c5:	50                   	push   eax
c000f7c6:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f7ca:	50                   	push   eax
c000f7cb:	6a 07                	push   0x7
c000f7cd:	e8 02 ff ff ff       	call   c000f6d4 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f7d2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f7d6:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c000f7da:	0f 95 c0             	setne  al
c000f7dd:	83 c4 24             	add    esp,0x24
c000f7e0:	c3                   	ret    
c000f7e1:	90                   	nop

c000f7e2 <CPU::cpuidCheckExtendedECX(unsigned int)>:
c000f7e2:	83 ec 10             	sub    esp,0x10
c000f7e5:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f7e9:	50                   	push   eax
c000f7ea:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f7ee:	50                   	push   eax
c000f7ef:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f7f3:	50                   	push   eax
c000f7f4:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f7f8:	50                   	push   eax
c000f7f9:	6a 07                	push   0x7
c000f7fb:	e8 d4 fe ff ff       	call   c000f6d4 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f800:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f804:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c000f808:	0f 95 c0             	setne  al
c000f80b:	83 c4 24             	add    esp,0x24
c000f80e:	c3                   	ret    
c000f80f:	90                   	nop

c000f810 <CPU::CPU()>:
c000f810:	83 ec 0c             	sub    esp,0xc
c000f813:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f817:	83 ec 08             	sub    esp,0x8
c000f81a:	68 39 e5 01 c0       	push   0xc001e539
c000f81f:	50                   	push   eax
c000f820:	e8 a3 c9 ff ff       	call   c000c1c8 <Device::Device(char const*)>
c000f825:	83 c4 10             	add    esp,0x10
c000f828:	ba c0 e5 01 c0       	mov    edx,0xc001e5c0
c000f82d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f831:	89 10                	mov    DWORD PTR [eax],edx
c000f833:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f837:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c000f841:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f845:	05 78 01 00 00       	add    eax,0x178
c000f84a:	83 ec 0c             	sub    esp,0xc
c000f84d:	50                   	push   eax
c000f84e:	e8 d3 7e ff ff       	call   c0007726 <GDT::GDT()>
c000f853:	83 c4 10             	add    esp,0x10
c000f856:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f85a:	05 7c 09 00 00       	add    eax,0x97c
c000f85f:	83 ec 0c             	sub    esp,0xc
c000f862:	50                   	push   eax
c000f863:	e8 f4 80 ff ff       	call   c000795c <IDT::IDT()>
c000f868:	83 c4 10             	add    esp,0x10
c000f86b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f86f:	05 7c 11 00 00       	add    eax,0x117c
c000f874:	83 ec 0c             	sub    esp,0xc
c000f877:	50                   	push   eax
c000f878:	e8 63 9a ff ff       	call   c00092e0 <TSS::TSS()>
c000f87d:	83 c4 10             	add    esp,0x10
c000f880:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f884:	c6 80 90 11 00 00 00 	mov    BYTE PTR [eax+0x1190],0x0
c000f88b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f88f:	c7 80 10 01 00 00 10 00 00 00 	mov    DWORD PTR [eax+0x110],0x10
c000f899:	90                   	nop
c000f89a:	83 c4 0c             	add    esp,0xc
c000f89d:	c3                   	ret    

c000f89e <CPU::displayFeatures()>:
c000f89e:	c3                   	ret    
c000f89f:	90                   	nop

c000f8a0 <CPU::detectFeatures()>:
c000f8a0:	55                   	push   ebp
c000f8a1:	57                   	push   edi
c000f8a2:	56                   	push   esi
c000f8a3:	53                   	push   ebx
c000f8a4:	83 ec 30             	sub    esp,0x30
c000f8a7:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c000f8ab:	81 a3 8c 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x118c],0xfff80700
c000f8b5:	c6 83 90 11 00 00 01 	mov    BYTE PTR [ebx+0x1190],0x1
c000f8bc:	8d ab 5f 01 00 00    	lea    ebp,[ebx+0x15f]
c000f8c2:	6a 0d                	push   0xd
c000f8c4:	6a 00                	push   0x0
c000f8c6:	55                   	push   ebp
c000f8c7:	e8 24 0c ff ff       	call   c00004f0 <memset>
c000f8cc:	83 c4 10             	add    esp,0x10
c000f8cf:	a1 44 08 02 c0       	mov    eax,ds:0xc0020844
c000f8d4:	f6 80 6c 01 00 00 02 	test   BYTE PTR [eax+0x16c],0x2
c000f8db:	0f 84 d5 05 00 00    	je     c000feb6 <CPU::detectFeatures()+0x616>
c000f8e1:	83 ec 0c             	sub    esp,0xc
c000f8e4:	89 ef                	mov    edi,ebp
c000f8e6:	6a 10                	push   0x10
c000f8e8:	e8 6b fe ff ff       	call   c000f758 <CPU::cpuidCheckEDX(unsigned int)>
c000f8ed:	83 e0 01             	and    eax,0x1
c000f8f0:	8d 14 00             	lea    edx,[eax+eax*1]
c000f8f3:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f8f9:	83 e0 fd             	and    eax,0xfffffffd
c000f8fc:	09 d0                	or     eax,edx
c000f8fe:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f904:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c000f90b:	e8 48 fe ff ff       	call   c000f758 <CPU::cpuidCheckEDX(unsigned int)>
c000f910:	83 e0 01             	and    eax,0x1
c000f913:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000f91a:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f920:	83 e0 fb             	and    eax,0xfffffffb
c000f923:	09 d0                	or     eax,edx
c000f925:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f92b:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000f932:	e8 21 fe ff ff       	call   c000f758 <CPU::cpuidCheckEDX(unsigned int)>
c000f937:	83 e0 01             	and    eax,0x1
c000f93a:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000f941:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f947:	83 e0 f7             	and    eax,0xfffffff7
c000f94a:	09 d0                	or     eax,edx
c000f94c:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f952:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c000f959:	e8 fa fd ff ff       	call   c000f758 <CPU::cpuidCheckEDX(unsigned int)>
c000f95e:	83 e0 01             	and    eax,0x1
c000f961:	c1 e0 04             	shl    eax,0x4
c000f964:	88 c2                	mov    dl,al
c000f966:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f96c:	83 e0 ef             	and    eax,0xffffffef
c000f96f:	09 d0                	or     eax,edx
c000f971:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f977:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c000f97e:	e8 d5 fd ff ff       	call   c000f758 <CPU::cpuidCheckEDX(unsigned int)>
c000f983:	83 e0 01             	and    eax,0x1
c000f986:	c1 e0 05             	shl    eax,0x5
c000f989:	88 c2                	mov    dl,al
c000f98b:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f991:	83 e0 df             	and    eax,0xffffffdf
c000f994:	09 d0                	or     eax,edx
c000f996:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f99c:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c000f9a3:	e8 b0 fd ff ff       	call   c000f758 <CPU::cpuidCheckEDX(unsigned int)>
c000f9a8:	83 e0 01             	and    eax,0x1
c000f9ab:	8d 14 00             	lea    edx,[eax+eax*1]
c000f9ae:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000f9b4:	83 e0 fd             	and    eax,0xfffffffd
c000f9b7:	09 d0                	or     eax,edx
c000f9b9:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000f9bf:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c000f9c6:	e8 8d fd ff ff       	call   c000f758 <CPU::cpuidCheckEDX(unsigned int)>
c000f9cb:	83 e0 01             	and    eax,0x1
c000f9ce:	c1 e0 06             	shl    eax,0x6
c000f9d1:	88 c2                	mov    dl,al
c000f9d3:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000f9d9:	83 e0 bf             	and    eax,0xffffffbf
c000f9dc:	09 d0                	or     eax,edx
c000f9de:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000f9e4:	58                   	pop    eax
c000f9e5:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f9e9:	50                   	push   eax
c000f9ea:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f9ee:	50                   	push   eax
c000f9ef:	8d 74 24 28          	lea    esi,[esp+0x28]
c000f9f3:	56                   	push   esi
c000f9f4:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f9f8:	50                   	push   eax
c000f9f9:	6a 00                	push   0x0
c000f9fb:	e8 d4 fc ff ff       	call   c000f6d4 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000fa00:	b8 04 00 00 00       	mov    eax,0x4
c000fa05:	89 c1                	mov    ecx,eax
c000fa07:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fa09:	8d bb 63 01 00 00    	lea    edi,[ebx+0x163]
c000fa0f:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c000fa13:	89 c1                	mov    ecx,eax
c000fa15:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fa17:	8d bb 67 01 00 00    	lea    edi,[ebx+0x167]
c000fa1d:	8d 74 24 38          	lea    esi,[esp+0x38]
c000fa21:	89 c1                	mov    ecx,eax
c000fa23:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fa25:	83 c4 18             	add    esp,0x18
c000fa28:	68 48 e4 01 c0       	push   0xc001e448
c000fa2d:	55                   	push   ebp
c000fa2e:	e8 cd 0c ff ff       	call   c0000700 <strcmp>
c000fa33:	83 c4 10             	add    esp,0x10
c000fa36:	85 c0                	test   eax,eax
c000fa38:	75 0f                	jne    c000fa49 <CPU::detectFeatures()+0x1a9>
c000fa3a:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c000fa44:	e9 22 02 00 00       	jmp    c000fc6b <CPU::detectFeatures()+0x3cb>
c000fa49:	50                   	push   eax
c000fa4a:	50                   	push   eax
c000fa4b:	68 55 e4 01 c0       	push   0xc001e455
c000fa50:	55                   	push   ebp
c000fa51:	e8 aa 0c ff ff       	call   c0000700 <strcmp>
c000fa56:	83 c4 10             	add    esp,0x10
c000fa59:	85 c0                	test   eax,eax
c000fa5b:	74 dd                	je     c000fa3a <CPU::detectFeatures()+0x19a>
c000fa5d:	50                   	push   eax
c000fa5e:	50                   	push   eax
c000fa5f:	68 62 e4 01 c0       	push   0xc001e462
c000fa64:	55                   	push   ebp
c000fa65:	e8 96 0c ff ff       	call   c0000700 <strcmp>
c000fa6a:	83 c4 10             	add    esp,0x10
c000fa6d:	85 c0                	test   eax,eax
c000fa6f:	74 2a                	je     c000fa9b <CPU::detectFeatures()+0x1fb>
c000fa71:	50                   	push   eax
c000fa72:	50                   	push   eax
c000fa73:	68 6f e4 01 c0       	push   0xc001e46f
c000fa78:	55                   	push   ebp
c000fa79:	e8 82 0c ff ff       	call   c0000700 <strcmp>
c000fa7e:	83 c4 10             	add    esp,0x10
c000fa81:	85 c0                	test   eax,eax
c000fa83:	74 16                	je     c000fa9b <CPU::detectFeatures()+0x1fb>
c000fa85:	50                   	push   eax
c000fa86:	50                   	push   eax
c000fa87:	68 7c e4 01 c0       	push   0xc001e47c
c000fa8c:	55                   	push   ebp
c000fa8d:	e8 6e 0c ff ff       	call   c0000700 <strcmp>
c000fa92:	83 c4 10             	add    esp,0x10
c000fa95:	85 c0                	test   eax,eax
c000fa97:	74 48                	je     c000fae1 <CPU::detectFeatures()+0x241>
c000fa99:	eb 0f                	jmp    c000faaa <CPU::detectFeatures()+0x20a>
c000fa9b:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c000faa5:	e9 c1 01 00 00       	jmp    c000fc6b <CPU::detectFeatures()+0x3cb>
c000faaa:	50                   	push   eax
c000faab:	50                   	push   eax
c000faac:	68 89 e4 01 c0       	push   0xc001e489
c000fab1:	55                   	push   ebp
c000fab2:	e8 49 0c ff ff       	call   c0000700 <strcmp>
c000fab7:	83 c4 10             	add    esp,0x10
c000faba:	85 c0                	test   eax,eax
c000fabc:	74 23                	je     c000fae1 <CPU::detectFeatures()+0x241>
c000fabe:	57                   	push   edi
c000fabf:	57                   	push   edi
c000fac0:	68 96 e4 01 c0       	push   0xc001e496
c000fac5:	55                   	push   ebp
c000fac6:	e8 35 0c ff ff       	call   c0000700 <strcmp>
c000facb:	83 c4 10             	add    esp,0x10
c000face:	85 c0                	test   eax,eax
c000fad0:	75 1e                	jne    c000faf0 <CPU::detectFeatures()+0x250>
c000fad2:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c000fadc:	e9 8a 01 00 00       	jmp    c000fc6b <CPU::detectFeatures()+0x3cb>
c000fae1:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c000faeb:	e9 7b 01 00 00       	jmp    c000fc6b <CPU::detectFeatures()+0x3cb>
c000faf0:	56                   	push   esi
c000faf1:	56                   	push   esi
c000faf2:	68 a3 e4 01 c0       	push   0xc001e4a3
c000faf7:	55                   	push   ebp
c000faf8:	e8 03 0c ff ff       	call   c0000700 <strcmp>
c000fafd:	83 c4 10             	add    esp,0x10
c000fb00:	85 c0                	test   eax,eax
c000fb02:	75 0f                	jne    c000fb13 <CPU::detectFeatures()+0x273>
c000fb04:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c000fb0e:	e9 58 01 00 00       	jmp    c000fc6b <CPU::detectFeatures()+0x3cb>
c000fb13:	51                   	push   ecx
c000fb14:	51                   	push   ecx
c000fb15:	68 62 e4 01 c0       	push   0xc001e462
c000fb1a:	55                   	push   ebp
c000fb1b:	e8 e0 0b ff ff       	call   c0000700 <strcmp>
c000fb20:	83 c4 10             	add    esp,0x10
c000fb23:	85 c0                	test   eax,eax
c000fb25:	75 0f                	jne    c000fb36 <CPU::detectFeatures()+0x296>
c000fb27:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c000fb31:	e9 35 01 00 00       	jmp    c000fc6b <CPU::detectFeatures()+0x3cb>
c000fb36:	52                   	push   edx
c000fb37:	52                   	push   edx
c000fb38:	68 b0 e4 01 c0       	push   0xc001e4b0
c000fb3d:	55                   	push   ebp
c000fb3e:	e8 bd 0b ff ff       	call   c0000700 <strcmp>
c000fb43:	83 c4 10             	add    esp,0x10
c000fb46:	85 c0                	test   eax,eax
c000fb48:	75 0f                	jne    c000fb59 <CPU::detectFeatures()+0x2b9>
c000fb4a:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c000fb54:	e9 12 01 00 00       	jmp    c000fc6b <CPU::detectFeatures()+0x3cb>
c000fb59:	50                   	push   eax
c000fb5a:	50                   	push   eax
c000fb5b:	68 bd e4 01 c0       	push   0xc001e4bd
c000fb60:	55                   	push   ebp
c000fb61:	e8 9a 0b ff ff       	call   c0000700 <strcmp>
c000fb66:	83 c4 10             	add    esp,0x10
c000fb69:	85 c0                	test   eax,eax
c000fb6b:	75 0f                	jne    c000fb7c <CPU::detectFeatures()+0x2dc>
c000fb6d:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c000fb77:	e9 ef 00 00 00       	jmp    c000fc6b <CPU::detectFeatures()+0x3cb>
c000fb7c:	50                   	push   eax
c000fb7d:	50                   	push   eax
c000fb7e:	68 ca e4 01 c0       	push   0xc001e4ca
c000fb83:	55                   	push   ebp
c000fb84:	e8 77 0b ff ff       	call   c0000700 <strcmp>
c000fb89:	83 c4 10             	add    esp,0x10
c000fb8c:	85 c0                	test   eax,eax
c000fb8e:	75 0f                	jne    c000fb9f <CPU::detectFeatures()+0x2ff>
c000fb90:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c000fb9a:	e9 cc 00 00 00       	jmp    c000fc6b <CPU::detectFeatures()+0x3cb>
c000fb9f:	50                   	push   eax
c000fba0:	50                   	push   eax
c000fba1:	68 d7 e4 01 c0       	push   0xc001e4d7
c000fba6:	55                   	push   ebp
c000fba7:	e8 54 0b ff ff       	call   c0000700 <strcmp>
c000fbac:	83 c4 10             	add    esp,0x10
c000fbaf:	85 c0                	test   eax,eax
c000fbb1:	75 0f                	jne    c000fbc2 <CPU::detectFeatures()+0x322>
c000fbb3:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c000fbbd:	e9 a9 00 00 00       	jmp    c000fc6b <CPU::detectFeatures()+0x3cb>
c000fbc2:	50                   	push   eax
c000fbc3:	50                   	push   eax
c000fbc4:	68 e4 e4 01 c0       	push   0xc001e4e4
c000fbc9:	55                   	push   ebp
c000fbca:	e8 31 0b ff ff       	call   c0000700 <strcmp>
c000fbcf:	83 c4 10             	add    esp,0x10
c000fbd2:	85 c0                	test   eax,eax
c000fbd4:	75 0f                	jne    c000fbe5 <CPU::detectFeatures()+0x345>
c000fbd6:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c000fbe0:	e9 86 00 00 00       	jmp    c000fc6b <CPU::detectFeatures()+0x3cb>
c000fbe5:	50                   	push   eax
c000fbe6:	50                   	push   eax
c000fbe7:	68 f1 e4 01 c0       	push   0xc001e4f1
c000fbec:	55                   	push   ebp
c000fbed:	e8 0e 0b ff ff       	call   c0000700 <strcmp>
c000fbf2:	83 c4 10             	add    esp,0x10
c000fbf5:	85 c0                	test   eax,eax
c000fbf7:	75 0c                	jne    c000fc05 <CPU::detectFeatures()+0x365>
c000fbf9:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c000fc03:	eb 66                	jmp    c000fc6b <CPU::detectFeatures()+0x3cb>
c000fc05:	50                   	push   eax
c000fc06:	50                   	push   eax
c000fc07:	68 fe e4 01 c0       	push   0xc001e4fe
c000fc0c:	55                   	push   ebp
c000fc0d:	e8 ee 0a ff ff       	call   c0000700 <strcmp>
c000fc12:	83 c4 10             	add    esp,0x10
c000fc15:	85 c0                	test   eax,eax
c000fc17:	75 0c                	jne    c000fc25 <CPU::detectFeatures()+0x385>
c000fc19:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c000fc23:	eb 46                	jmp    c000fc6b <CPU::detectFeatures()+0x3cb>
c000fc25:	57                   	push   edi
c000fc26:	57                   	push   edi
c000fc27:	68 0b e5 01 c0       	push   0xc001e50b
c000fc2c:	55                   	push   ebp
c000fc2d:	e8 ce 0a ff ff       	call   c0000700 <strcmp>
c000fc32:	83 c4 10             	add    esp,0x10
c000fc35:	85 c0                	test   eax,eax
c000fc37:	74 e0                	je     c000fc19 <CPU::detectFeatures()+0x379>
c000fc39:	56                   	push   esi
c000fc3a:	56                   	push   esi
c000fc3b:	68 18 e5 01 c0       	push   0xc001e518
c000fc40:	55                   	push   ebp
c000fc41:	e8 ba 0a ff ff       	call   c0000700 <strcmp>
c000fc46:	83 c4 10             	add    esp,0x10
c000fc49:	85 c0                	test   eax,eax
c000fc4b:	74 cc                	je     c000fc19 <CPU::detectFeatures()+0x379>
c000fc4d:	51                   	push   ecx
c000fc4e:	51                   	push   ecx
c000fc4f:	68 25 e5 01 c0       	push   0xc001e525
c000fc54:	55                   	push   ebp
c000fc55:	e8 a6 0a ff ff       	call   c0000700 <strcmp>
c000fc5a:	83 c4 10             	add    esp,0x10
c000fc5d:	85 c0                	test   eax,eax
c000fc5f:	74 b8                	je     c000fc19 <CPU::detectFeatures()+0x379>
c000fc61:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c000fc6b:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c000fc70:	0f 86 be 00 00 00    	jbe    c000fd34 <CPU::detectFeatures()+0x494>
c000fc76:	83 ec 0c             	sub    esp,0xc
c000fc79:	68 80 00 00 00       	push   0x80
c000fc7e:	e8 31 fb ff ff       	call   c000f7b4 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c000fc83:	83 e0 01             	and    eax,0x1
c000fc86:	c1 e0 06             	shl    eax,0x6
c000fc89:	88 c2                	mov    dl,al
c000fc8b:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000fc91:	83 e0 bf             	and    eax,0xffffffbf
c000fc94:	09 d0                	or     eax,edx
c000fc96:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000fc9c:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c000fca3:	e8 0c fb ff ff       	call   c000f7b4 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c000fca8:	83 e0 01             	and    eax,0x1
c000fcab:	c1 e0 04             	shl    eax,0x4
c000fcae:	88 c2                	mov    dl,al
c000fcb0:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000fcb6:	83 e0 ef             	and    eax,0xffffffef
c000fcb9:	09 d0                	or     eax,edx
c000fcbb:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000fcc1:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c000fcc8:	e8 e7 fa ff ff       	call   c000f7b4 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c000fccd:	c1 e0 07             	shl    eax,0x7
c000fcd0:	88 c2                	mov    dl,al
c000fcd2:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000fcd8:	83 e0 7f             	and    eax,0x7f
c000fcdb:	09 d0                	or     eax,edx
c000fcdd:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000fce3:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c000fcea:	e8 f3 fa ff ff       	call   c000f7e2 <CPU::cpuidCheckExtendedECX(unsigned int)>
c000fcef:	83 e0 01             	and    eax,0x1
c000fcf2:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000fcf9:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000fcff:	83 e0 f7             	and    eax,0xfffffff7
c000fd02:	09 d0                	or     eax,edx
c000fd04:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000fd0a:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c000fd11:	e8 cc fa ff ff       	call   c000f7e2 <CPU::cpuidCheckExtendedECX(unsigned int)>
c000fd16:	83 c4 10             	add    esp,0x10
c000fd19:	83 e0 01             	and    eax,0x1
c000fd1c:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000fd23:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000fd29:	83 e0 fb             	and    eax,0xfffffffb
c000fd2c:	09 d0                	or     eax,edx
c000fd2e:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000fd34:	83 ec 0c             	sub    esp,0xc
c000fd37:	8d 44 24 28          	lea    eax,[esp+0x28]
c000fd3b:	50                   	push   eax
c000fd3c:	8d 44 24 28          	lea    eax,[esp+0x28]
c000fd40:	50                   	push   eax
c000fd41:	8d 74 24 28          	lea    esi,[esp+0x28]
c000fd45:	56                   	push   esi
c000fd46:	8d 44 24 28          	lea    eax,[esp+0x28]
c000fd4a:	50                   	push   eax
c000fd4b:	6a 01                	push   0x1
c000fd4d:	e8 82 f9 ff ff       	call   c000f6d4 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000fd52:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000fd56:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c000fd5c:	88 ca                	mov    dl,cl
c000fd5e:	83 e0 f0             	and    eax,0xfffffff0
c000fd61:	83 e2 0f             	and    edx,0xf
c000fd64:	09 d0                	or     eax,edx
c000fd66:	88 ca                	mov    dl,cl
c000fd68:	88 83 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],al
c000fd6e:	c0 ea 04             	shr    dl,0x4
c000fd71:	88 54 24 2f          	mov    BYTE PTR [esp+0x2f],dl
c000fd75:	0f b6 c2             	movzx  eax,dl
c000fd78:	83 c4 20             	add    esp,0x20
c000fd7b:	c1 e0 06             	shl    eax,0x6
c000fd7e:	89 c7                	mov    edi,eax
c000fd80:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c000fd86:	66 25 3f c0          	and    ax,0xc03f
c000fd8a:	09 f8                	or     eax,edi
c000fd8c:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c000fd93:	89 c8                	mov    eax,ecx
c000fd95:	0f b6 ab 5d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15d]
c000fd9c:	c1 e8 08             	shr    eax,0x8
c000fd9f:	83 e5 3f             	and    ebp,0x3f
c000fda2:	83 e0 0f             	and    eax,0xf
c000fda5:	89 c7                	mov    edi,eax
c000fda7:	c1 e7 06             	shl    edi,0x6
c000fdaa:	09 ef                	or     edi,ebp
c000fdac:	0f b6 ab 5e 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15e]
c000fdb3:	89 fa                	mov    edx,edi
c000fdb5:	83 e5 c0             	and    ebp,0xffffffc0
c000fdb8:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c000fdbe:	88 c2                	mov    dl,al
c000fdc0:	c0 ea 02             	shr    dl,0x2
c000fdc3:	89 d7                	mov    edi,edx
c000fdc5:	09 ef                	or     edi,ebp
c000fdc7:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c000fdcd:	89 fa                	mov    edx,edi
c000fdcf:	83 e5 cf             	and    ebp,0xffffffcf
c000fdd2:	88 93 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],dl
c000fdd8:	89 cf                	mov    edi,ecx
c000fdda:	c1 ef 0c             	shr    edi,0xc
c000fddd:	83 e7 03             	and    edi,0x3
c000fde0:	c1 e7 04             	shl    edi,0x4
c000fde3:	09 ef                	or     edi,ebp
c000fde5:	3c 06                	cmp    al,0x6
c000fde7:	89 fa                	mov    edx,edi
c000fde9:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c000fdef:	74 04                	je     c000fdf5 <CPU::detectFeatures()+0x555>
c000fdf1:	3c 0f                	cmp    al,0xf
c000fdf3:	75 5c                	jne    c000fe51 <CPU::detectFeatures()+0x5b1>
c000fdf5:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000fdf9:	89 cf                	mov    edi,ecx
c000fdfb:	c1 ef 10             	shr    edi,0x10
c000fdfe:	c1 e7 04             	shl    edi,0x4
c000fe01:	09 fa                	or     edx,edi
c000fe03:	8b bb 5c 01 00 00    	mov    edi,DWORD PTR [ebx+0x15c]
c000fe09:	0f b6 d2             	movzx  edx,dl
c000fe0c:	66 81 e7 3f c0       	and    di,0xc03f
c000fe11:	c1 e2 06             	shl    edx,0x6
c000fe14:	09 fa                	or     edx,edi
c000fe16:	3c 0f                	cmp    al,0xf
c000fe18:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c000fe1f:	75 30                	jne    c000fe51 <CPU::detectFeatures()+0x5b1>
c000fe21:	8a 83 5d 01 00 00    	mov    al,BYTE PTR [ebx+0x15d]
c000fe27:	c1 e9 14             	shr    ecx,0x14
c000fe2a:	83 e0 3f             	and    eax,0x3f
c000fe2d:	83 c1 0f             	add    ecx,0xf
c000fe30:	88 ca                	mov    dl,cl
c000fe32:	c0 e9 02             	shr    cl,0x2
c000fe35:	c1 e2 06             	shl    edx,0x6
c000fe38:	09 d0                	or     eax,edx
c000fe3a:	88 83 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],al
c000fe40:	8a 83 5e 01 00 00    	mov    al,BYTE PTR [ebx+0x15e]
c000fe46:	83 e0 c0             	and    eax,0xffffffc0
c000fe49:	09 c1                	or     ecx,eax
c000fe4b:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c000fe51:	83 ec 0c             	sub    esp,0xc
c000fe54:	80 8b 8d 11 00 00 07 	or     BYTE PTR [ebx+0x118d],0x7
c000fe5b:	8d 44 24 28          	lea    eax,[esp+0x28]
c000fe5f:	50                   	push   eax
c000fe60:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c000fe64:	55                   	push   ebp
c000fe65:	56                   	push   esi
c000fe66:	8d 7c 24 28          	lea    edi,[esp+0x28]
c000fe6a:	57                   	push   edi
c000fe6b:	68 00 00 00 80       	push   0x80000000
c000fe70:	e8 5f f8 ff ff       	call   c000f6d4 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000fe75:	83 c4 20             	add    esp,0x20
c000fe78:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c000fe80:	76 22                	jbe    c000fea4 <CPU::detectFeatures()+0x604>
c000fe82:	83 ec 0c             	sub    esp,0xc
c000fe85:	8d 44 24 28          	lea    eax,[esp+0x28]
c000fe89:	50                   	push   eax
c000fe8a:	55                   	push   ebp
c000fe8b:	56                   	push   esi
c000fe8c:	57                   	push   edi
c000fe8d:	68 01 00 00 80       	push   0x80000001
c000fe92:	e8 3d f8 ff ff       	call   c000f6d4 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000fe97:	81 a3 8c 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x118c],0xfffe5fff
c000fea1:	83 c4 20             	add    esp,0x20
c000fea4:	52                   	push   edx
c000fea5:	52                   	push   edx
c000fea6:	68 31 e5 01 c0       	push   0xc001e531
c000feab:	53                   	push   ebx
c000feac:	e8 09 c3 ff ff       	call   c000c1ba <Device::setName(char const*)>
c000feb1:	83 c4 10             	add    esp,0x10
c000feb4:	eb 67                	jmp    c000ff1d <CPU::detectFeatures()+0x67d>
c000feb6:	50                   	push   eax
c000feb7:	50                   	push   eax
c000feb8:	68 96 e4 01 c0       	push   0xc001e496
c000febd:	55                   	push   ebp
c000febe:	e8 5d 07 ff ff       	call   c0000620 <strcpy>
c000fec3:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c000fecd:	e8 11 03 ff ff       	call   c00001e3 <is486>
c000fed2:	83 c4 10             	add    esp,0x10
c000fed5:	85 c0                	test   eax,eax
c000fed7:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000fedd:	74 1d                	je     c000fefc <CPU::detectFeatures()+0x65c>
c000fedf:	83 c8 07             	or     eax,0x7
c000fee2:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000fee8:	0f 20 c0             	mov    eax,cr0
c000feeb:	83 e0 14             	and    eax,0x14
c000feee:	83 f8 04             	cmp    eax,0x4
c000fef1:	75 0e                	jne    c000ff01 <CPU::detectFeatures()+0x661>
c000fef3:	80 a3 8e 11 00 00 fd 	and    BYTE PTR [ebx+0x118e],0xfd
c000fefa:	eb 21                	jmp    c000ff1d <CPU::detectFeatures()+0x67d>
c000fefc:	83 e0 f8             	and    eax,0xfffffff8
c000feff:	eb e1                	jmp    c000fee2 <CPU::detectFeatures()+0x642>
c000ff01:	e8 b8 02 ff ff       	call   c00001be <hasLegacyFPU>
c000ff06:	83 e0 01             	and    eax,0x1
c000ff09:	8d 14 00             	lea    edx,[eax+eax*1]
c000ff0c:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000ff12:	83 e0 fd             	and    eax,0xfffffffd
c000ff15:	09 d0                	or     eax,edx
c000ff17:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000ff1d:	f6 83 8e 11 00 00 02 	test   BYTE PTR [ebx+0x118e],0x2
c000ff24:	74 0e                	je     c000ff34 <CPU::detectFeatures()+0x694>
c000ff26:	a1 44 08 02 c0       	mov    eax,ds:0xc0020844
c000ff2b:	80 88 6c 01 00 00 10 	or     BYTE PTR [eax+0x16c],0x10
c000ff32:	eb 20                	jmp    c000ff54 <CPU::detectFeatures()+0x6b4>
c000ff34:	e8 85 02 ff ff       	call   c00001be <hasLegacyFPU>
c000ff39:	83 e0 01             	and    eax,0x1
c000ff3c:	8d 14 00             	lea    edx,[eax+eax*1]
c000ff3f:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000ff45:	83 e0 fd             	and    eax,0xfffffffd
c000ff48:	09 d0                	or     eax,edx
c000ff4a:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000ff50:	a8 02                	test   al,0x2
c000ff52:	75 d2                	jne    c000ff26 <CPU::detectFeatures()+0x686>
c000ff54:	c6 83 90 11 00 00 00 	mov    BYTE PTR [ebx+0x1190],0x0
c000ff5b:	83 c4 2c             	add    esp,0x2c
c000ff5e:	5b                   	pop    ebx
c000ff5f:	5e                   	pop    esi
c000ff60:	5f                   	pop    edi
c000ff61:	5d                   	pop    ebp
c000ff62:	c3                   	ret    
c000ff63:	90                   	nop

c000ff64 <CPU::setupSMEP()>:
c000ff64:	0f 20 e0             	mov    eax,cr4
c000ff67:	0d 00 00 10 00       	or     eax,0x100000
c000ff6c:	0f 22 e0             	mov    cr4,eax
c000ff6f:	c3                   	ret    

c000ff70 <CPU::setupUMIP()>:
c000ff70:	0f 20 e0             	mov    eax,cr4
c000ff73:	80 cc 08             	or     ah,0x8
c000ff76:	0f 22 e0             	mov    cr4,eax
c000ff79:	c3                   	ret    

c000ff7a <CPU::setupTSC()>:
c000ff7a:	0f 20 e0             	mov    eax,cr4
c000ff7d:	83 c8 04             	or     eax,0x4
c000ff80:	0f 22 e0             	mov    cr4,eax
c000ff83:	c3                   	ret    

c000ff84 <CPU::setupLargePages()>:
c000ff84:	0f 20 e0             	mov    eax,cr4
c000ff87:	83 c8 10             	or     eax,0x10
c000ff8a:	0f 22 e0             	mov    cr4,eax
c000ff8d:	c3                   	ret    

c000ff8e <CPU::setupPAT()>:
c000ff8e:	a1 44 08 02 c0       	mov    eax,ds:0xc0020844
c000ff93:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c000ff9a:	74 2c                	je     c000ffc8 <CPU::setupPAT()+0x3a>
c000ff9c:	53                   	push   ebx
c000ff9d:	83 ec 10             	sub    esp,0x10
c000ffa0:	68 77 02 00 00       	push   0x277
c000ffa5:	50                   	push   eax
c000ffa6:	e8 f3 74 ff ff       	call   c000749e <Computer::rdmsr(unsigned int)>
c000ffab:	83 e2 f8             	and    edx,0xfffffff8
c000ffae:	83 ca 01             	or     edx,0x1
c000ffb1:	52                   	push   edx
c000ffb2:	50                   	push   eax
c000ffb3:	68 77 02 00 00       	push   0x277
c000ffb8:	ff 35 44 08 02 c0    	push   DWORD PTR ds:0xc0020844
c000ffbe:	e8 07 75 ff ff       	call   c00074ca <Computer::wrmsr(unsigned int, unsigned long long)>
c000ffc3:	83 c4 28             	add    esp,0x28
c000ffc6:	5b                   	pop    ebx
c000ffc7:	c3                   	ret    
c000ffc8:	c3                   	ret    
c000ffc9:	90                   	nop

c000ffca <CPU::setupMTRR()>:
c000ffca:	c3                   	ret    
c000ffcb:	90                   	nop

c000ffcc <CPU::setupGlobalPages()>:
c000ffcc:	0f 20 e0             	mov    eax,cr4
c000ffcf:	0c 80                	or     al,0x80
c000ffd1:	0f 22 e0             	mov    cr4,eax
c000ffd4:	c3                   	ret    
c000ffd5:	90                   	nop

c000ffd6 <CPU::allowUsermodeDataAccess()>:
c000ffd6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ffda:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c000ffe1:	74 03                	je     c000ffe6 <CPU::allowUsermodeDataAccess()+0x10>
c000ffe3:	0f 01 cb             	stac   
c000ffe6:	c3                   	ret    
c000ffe7:	90                   	nop

c000ffe8 <CPU::prohibitUsermodeDataAccess()>:
c000ffe8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ffec:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c000fff3:	74 03                	je     c000fff8 <CPU::prohibitUsermodeDataAccess()+0x10>
c000fff5:	0f 01 ca             	clac   
c000fff8:	c3                   	ret    
c000fff9:	90                   	nop

c000fffa <CPU::setupSMAP()>:
c000fffa:	0f 20 e0             	mov    eax,cr4
c000fffd:	0d 00 00 20 00       	or     eax,0x200000
c0010002:	0f 22 e0             	mov    cr4,eax
c0010005:	eb e1                	jmp    c000ffe8 <CPU::prohibitUsermodeDataAccess()>
c0010007:	90                   	nop

c0010008 <CPU::setupFeatures()>:
c0010008:	53                   	push   ebx
c0010009:	83 ec 08             	sub    esp,0x8
c001000c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010010:	f6 83 8d 11 00 00 08 	test   BYTE PTR [ebx+0x118d],0x8
c0010017:	74 18                	je     c0010031 <CPU::setupFeatures()+0x29>
c0010019:	83 ec 0c             	sub    esp,0xc
c001001c:	68 3d e5 01 c0       	push   0xc001e53d
c0010021:	e8 ca ab ff ff       	call   c000abf0 <Dbg::kprintf(char const*, ...)>
c0010026:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010029:	e8 42 ff ff ff       	call   c000ff70 <CPU::setupUMIP()>
c001002e:	83 c4 10             	add    esp,0x10
c0010031:	f6 83 8c 11 00 00 02 	test   BYTE PTR [ebx+0x118c],0x2
c0010038:	74 18                	je     c0010052 <CPU::setupFeatures()+0x4a>
c001003a:	83 ec 0c             	sub    esp,0xc
c001003d:	68 47 e5 01 c0       	push   0xc001e547
c0010042:	e8 a9 ab ff ff       	call   c000abf0 <Dbg::kprintf(char const*, ...)>
c0010047:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001004a:	e8 2b ff ff ff       	call   c000ff7a <CPU::setupTSC()>
c001004f:	83 c4 10             	add    esp,0x10
c0010052:	f6 83 8c 11 00 00 08 	test   BYTE PTR [ebx+0x118c],0x8
c0010059:	74 18                	je     c0010073 <CPU::setupFeatures()+0x6b>
c001005b:	83 ec 0c             	sub    esp,0xc
c001005e:	68 50 e5 01 c0       	push   0xc001e550
c0010063:	e8 88 ab ff ff       	call   c000abf0 <Dbg::kprintf(char const*, ...)>
c0010068:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001006b:	e8 14 ff ff ff       	call   c000ff84 <CPU::setupLargePages()>
c0010070:	83 c4 10             	add    esp,0x10
c0010073:	f6 83 8c 11 00 00 10 	test   BYTE PTR [ebx+0x118c],0x10
c001007a:	74 18                	je     c0010094 <CPU::setupFeatures()+0x8c>
c001007c:	83 ec 0c             	sub    esp,0xc
c001007f:	68 59 e5 01 c0       	push   0xc001e559
c0010084:	e8 67 ab ff ff       	call   c000abf0 <Dbg::kprintf(char const*, ...)>
c0010089:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001008c:	e8 3b ff ff ff       	call   c000ffcc <CPU::setupGlobalPages()>
c0010091:	83 c4 10             	add    esp,0x10
c0010094:	f6 83 8c 11 00 00 20 	test   BYTE PTR [ebx+0x118c],0x20
c001009b:	74 18                	je     c00100b5 <CPU::setupFeatures()+0xad>
c001009d:	83 ec 0c             	sub    esp,0xc
c00100a0:	68 6b e5 01 c0       	push   0xc001e56b
c00100a5:	e8 46 ab ff ff       	call   c000abf0 <Dbg::kprintf(char const*, ...)>
c00100aa:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00100ad:	e8 dc fe ff ff       	call   c000ff8e <CPU::setupPAT()>
c00100b2:	83 c4 10             	add    esp,0x10
c00100b5:	f6 83 8e 11 00 00 01 	test   BYTE PTR [ebx+0x118e],0x1
c00100bc:	74 11                	je     c00100cf <CPU::setupFeatures()+0xc7>
c00100be:	c7 44 24 10 74 e5 01 c0 	mov    DWORD PTR [esp+0x10],0xc001e574
c00100c6:	83 c4 08             	add    esp,0x8
c00100c9:	5b                   	pop    ebx
c00100ca:	e9 21 ab ff ff       	jmp    c000abf0 <Dbg::kprintf(char const*, ...)>
c00100cf:	83 c4 08             	add    esp,0x8
c00100d2:	5b                   	pop    ebx
c00100d3:	c3                   	ret    

c00100d4 <CPU::open(int, int, void*)>:
c00100d4:	57                   	push   edi
c00100d5:	56                   	push   esi
c00100d6:	53                   	push   ebx
c00100d7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00100db:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00100df:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c00100e5:	83 ec 0c             	sub    esp,0xc
c00100e8:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c00100ee:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c00100f4:	50                   	push   eax
c00100f5:	e8 8e 76 ff ff       	call   c0007788 <GDT::setup()>
c00100fa:	83 c4 0c             	add    esp,0xc
c00100fd:	6a 00                	push   0x0
c00100ff:	68 ef be ad de       	push   0xdeadbeef
c0010104:	57                   	push   edi
c0010105:	e8 1a 92 ff ff       	call   c0009324 <TSS::setup(unsigned long, unsigned long)>
c001010a:	89 3c 24             	mov    DWORD PTR [esp],edi
c001010d:	e8 f2 91 ff ff       	call   c0009304 <TSS::flush()>
c0010112:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c0010118:	89 04 24             	mov    DWORD PTR [esp],eax
c001011b:	e8 b2 78 ff ff       	call   c00079d2 <IDT::setup()>
c0010120:	b8 00 04 00 00       	mov    eax,0x400
c0010125:	0f 23 f8             	mov    db7,eax
c0010128:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c0010132:	e8 f7 80 ff ff       	call   c000822e <Phys::allocatePage()>
c0010137:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001013d:	89 30                	mov    DWORD PTR [eax],esi
c001013f:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0010145:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0010148:	58                   	pop    eax
c0010149:	5a                   	pop    edx
c001014a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0010150:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0010154:	e8 b5 a1 ff ff       	call   c000a30e <VAS::setCPUSpecific(unsigned long)>
c0010159:	c7 04 24 7e e5 01 c0 	mov    DWORD PTR [esp],0xc001e57e
c0010160:	e8 56 7d ff ff       	call   c0007ebb <Krnl::setBootMessage(char const*)>
c0010165:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010168:	e8 33 f7 ff ff       	call   c000f8a0 <CPU::detectFeatures()>
c001016d:	c7 04 24 a1 e5 01 c0 	mov    DWORD PTR [esp],0xc001e5a1
c0010174:	e8 42 7d ff ff       	call   c0007ebb <Krnl::setBootMessage(char const*)>
c0010179:	e8 b8 56 00 00       	call   c0015836 <HalInitialise()>
c001017e:	a1 5c 08 02 c0       	mov    eax,ds:0xc002085c
c0010183:	83 e0 10             	and    eax,0x10
c0010186:	83 f8 01             	cmp    eax,0x1
c0010189:	19 c0                	sbb    eax,eax
c001018b:	83 e0 46             	and    eax,0x46
c001018e:	83 c0 1e             	add    eax,0x1e
c0010191:	89 04 24             	mov    DWORD PTR [esp],eax
c0010194:	e8 f0 d6 ff ff       	call   c000d889 <setupTimer(int)>
c0010199:	83 c4 10             	add    esp,0x10
c001019c:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c00101a2:	f6 05 5c 08 02 c0 20 	test   BYTE PTR ds:0xc002085c,0x20
c00101a9:	74 0c                	je     c00101b7 <CPU::open(int, int, void*)+0xe3>
c00101ab:	83 ec 0c             	sub    esp,0xc
c00101ae:	53                   	push   ebx
c00101af:	e8 54 fe ff ff       	call   c0010008 <CPU::setupFeatures()>
c00101b4:	83 c4 10             	add    esp,0x10
c00101b7:	5b                   	pop    ebx
c00101b8:	31 c0                	xor    eax,eax
c00101ba:	5e                   	pop    esi
c00101bb:	5f                   	pop    edi
c00101bc:	c3                   	ret    
c00101bd:	90                   	nop

c00101be <EnvVarContainer::getEnv(char const*)>:
c00101be:	57                   	push   edi
c00101bf:	56                   	push   esi
c00101c0:	53                   	push   ebx
c00101c1:	31 db                	xor    ebx,ebx
c00101c3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00101c7:	39 1e                	cmp    DWORD PTR [esi],ebx
c00101c9:	7e 2b                	jle    c00101f6 <EnvVarContainer::getEnv(char const*)+0x38>
c00101cb:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c00101d2:	50                   	push   eax
c00101d3:	50                   	push   eax
c00101d4:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00101d7:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c00101da:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00101de:	e8 1d 05 ff ff       	call   c0000700 <strcmp>
c00101e3:	83 c4 10             	add    esp,0x10
c00101e6:	85 c0                	test   eax,eax
c00101e8:	75 09                	jne    c00101f3 <EnvVarContainer::getEnv(char const*)+0x35>
c00101ea:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00101ed:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c00101f1:	eb 05                	jmp    c00101f8 <EnvVarContainer::getEnv(char const*)+0x3a>
c00101f3:	43                   	inc    ebx
c00101f4:	eb d1                	jmp    c00101c7 <EnvVarContainer::getEnv(char const*)+0x9>
c00101f6:	31 c0                	xor    eax,eax
c00101f8:	5b                   	pop    ebx
c00101f9:	5e                   	pop    esi
c00101fa:	5f                   	pop    edi
c00101fb:	c3                   	ret    

c00101fc <EnvVarContainer::setEnv(char const*, char const*)>:
c00101fc:	55                   	push   ebp
c00101fd:	57                   	push   edi
c00101fe:	56                   	push   esi
c00101ff:	53                   	push   ebx
c0010200:	83 ec 28             	sub    esp,0x28
c0010203:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0010207:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c001020b:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001020f:	56                   	push   esi
c0010210:	e8 4b 03 ff ff       	call   c0000560 <strlen>
c0010215:	40                   	inc    eax
c0010216:	89 04 24             	mov    DWORD PTR [esp],eax
c0010219:	e8 43 7c ff ff       	call   c0007e61 <malloc>
c001021e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010221:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0010225:	e8 36 03 ff ff       	call   c0000560 <strlen>
c001022a:	40                   	inc    eax
c001022b:	89 04 24             	mov    DWORD PTR [esp],eax
c001022e:	e8 2e 7c ff ff       	call   c0007e61 <malloc>
c0010233:	89 34 24             	mov    DWORD PTR [esp],esi
c0010236:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001023a:	e8 21 03 ff ff       	call   c0000560 <strlen>
c001023f:	83 c4 0c             	add    esp,0xc
c0010242:	40                   	inc    eax
c0010243:	50                   	push   eax
c0010244:	6a 00                	push   0x0
c0010246:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001024a:	e8 a1 02 ff ff       	call   c00004f0 <memset>
c001024f:	89 34 24             	mov    DWORD PTR [esp],esi
c0010252:	e8 09 03 ff ff       	call   c0000560 <strlen>
c0010257:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001025b:	8d 48 01             	lea    ecx,[eax+0x1]
c001025e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010260:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010263:	89 de                	mov    esi,ebx
c0010265:	e8 f6 02 ff ff       	call   c0000560 <strlen>
c001026a:	83 c4 0c             	add    esp,0xc
c001026d:	40                   	inc    eax
c001026e:	50                   	push   eax
c001026f:	6a 00                	push   0x0
c0010271:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010275:	e8 76 02 ff ff       	call   c00004f0 <memset>
c001027a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001027d:	e8 de 02 ff ff       	call   c0000560 <strlen>
c0010282:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0010286:	8d 48 01             	lea    ecx,[eax+0x1]
c0010289:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001028b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001028e:	40                   	inc    eax
c001028f:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0010292:	c1 e0 03             	shl    eax,0x3
c0010295:	5a                   	pop    edx
c0010296:	59                   	pop    ecx
c0010297:	50                   	push   eax
c0010298:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001029b:	e8 ad 7b ff ff       	call   c0007e4d <realloc>
c00102a0:	8d 74 24 18          	lea    esi,[esp+0x18]
c00102a4:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c00102a7:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c00102aa:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c00102ae:	b9 08 00 00 00       	mov    ecx,0x8
c00102b3:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00102b5:	83 c4 2c             	add    esp,0x2c
c00102b8:	5b                   	pop    ebx
c00102b9:	5e                   	pop    esi
c00102ba:	5f                   	pop    edi
c00102bb:	5d                   	pop    ebp
c00102bc:	c3                   	ret    
c00102bd:	90                   	nop

c00102be <EnvVarContainer::deleteEnv(char const*)>:
c00102be:	c3                   	ret    
c00102bf:	90                   	nop

c00102c0 <EnvVarContainer::loadFrom(char const*, char const*)>:
c00102c0:	55                   	push   ebp
c00102c1:	57                   	push   edi
c00102c2:	56                   	push   esi
c00102c3:	53                   	push   ebx
c00102c4:	81 ec 38 01 00 00    	sub    esp,0x138
c00102ca:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c00102d1:	8b b4 24 54 01 00 00 	mov    esi,DWORD PTR [esp+0x154]
c00102d8:	68 14 01 00 00       	push   0x114
c00102dd:	e8 7f 7b ff ff       	call   c0007e61 <malloc>
c00102e2:	83 c4 0c             	add    esp,0xc
c00102e5:	89 c3                	mov    ebx,eax
c00102e7:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00102ea:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c00102f1:	50                   	push   eax
c00102f2:	e8 6f ae ff ff       	call   c000b166 <File::File(char const*, Process*)>
c00102f7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00102fa:	e8 95 b1 ff ff       	call   c000b494 <File::exists()>
c00102ff:	83 c4 10             	add    esp,0x10
c0010302:	84 c0                	test   al,al
c0010304:	75 31                	jne    c0010337 <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c0010306:	50                   	push   eax
c0010307:	50                   	push   eax
c0010308:	6a 12                	push   0x12
c001030a:	53                   	push   ebx
c001030b:	e8 16 af ff ff       	call   c000b226 <File::open(FileOpenMode)>
c0010310:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010312:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0010315:	89 34 24             	mov    DWORD PTR [esp],esi
c0010318:	e8 43 02 ff ff       	call   c0000560 <strlen>
c001031d:	5a                   	pop    edx
c001031e:	31 d2                	xor    edx,edx
c0010320:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0010324:	51                   	push   ecx
c0010325:	56                   	push   esi
c0010326:	52                   	push   edx
c0010327:	50                   	push   eax
c0010328:	53                   	push   ebx
c0010329:	ff d7                	call   edi
c001032b:	83 c4 14             	add    esp,0x14
c001032e:	53                   	push   ebx
c001032f:	e8 50 af ff ff       	call   c000b284 <File::close()>
c0010334:	83 c4 10             	add    esp,0x10
c0010337:	56                   	push   esi
c0010338:	31 f6                	xor    esi,esi
c001033a:	68 00 01 00 00       	push   0x100
c001033f:	6a 00                	push   0x0
c0010341:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0010345:	50                   	push   eax
c0010346:	e8 a5 01 ff ff       	call   c00004f0 <memset>
c001034b:	5f                   	pop    edi
c001034c:	58                   	pop    eax
c001034d:	6a 01                	push   0x1
c001034f:	53                   	push   ebx
c0010350:	e8 d1 ae ff ff       	call   c000b226 <File::open(FileOpenMode)>
c0010355:	83 c4 10             	add    esp,0x10
c0010358:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0010360:	83 ec 0c             	sub    esp,0xc
c0010363:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010365:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0010369:	51                   	push   ecx
c001036a:	8d 54 24 23          	lea    edx,[esp+0x23]
c001036e:	52                   	push   edx
c001036f:	6a 00                	push   0x0
c0010371:	6a 01                	push   0x1
c0010373:	53                   	push   ebx
c0010374:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0010377:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c001037b:	83 c4 20             	add    esp,0x20
c001037e:	3c 0d                	cmp    al,0xd
c0010380:	0f 84 09 01 00 00    	je     c001048f <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c0010386:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001038b:	0f 84 ef 00 00 00    	je     c0010480 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c0>
c0010391:	3c 0a                	cmp    al,0xa
c0010393:	74 13                	je     c00103a8 <EnvVarContainer::loadFrom(char const*, char const*)+0xe8>
c0010395:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001039a:	74 0c                	je     c00103a8 <EnvVarContainer::loadFrom(char const*, char const*)+0xe8>
c001039c:	81 fe fe 00 00 00    	cmp    esi,0xfe
c00103a2:	0f 8e d8 00 00 00    	jle    c0010480 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c0>
c00103a8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00103ac:	83 ec 0c             	sub    esp,0xc
c00103af:	8d 78 01             	lea    edi,[eax+0x1]
c00103b2:	57                   	push   edi
c00103b3:	e8 a9 7a ff ff       	call   c0007e61 <malloc>
c00103b8:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c00103bc:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00103c0:	8d 56 04             	lea    edx,[esi+0x4]
c00103c3:	89 14 24             	mov    DWORD PTR [esp],edx
c00103c6:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00103ca:	e8 92 7a ff ff       	call   c0007e61 <malloc>
c00103cf:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00103d3:	83 c4 0c             	add    esp,0xc
c00103d6:	57                   	push   edi
c00103d7:	6a 00                	push   0x0
c00103d9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00103dd:	e8 0e 01 ff ff       	call   c00004f0 <memset>
c00103e2:	8d 74 24 30          	lea    esi,[esp+0x30]
c00103e6:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00103ea:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00103ee:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00103f0:	83 c4 0c             	add    esp,0xc
c00103f3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00103f7:	52                   	push   edx
c00103f8:	6a 00                	push   0x0
c00103fa:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00103fe:	e8 ed 00 ff ff       	call   c00004f0 <memset>
c0010403:	8d 74 24 30          	lea    esi,[esp+0x30]
c0010407:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c001040b:	89 34 24             	mov    DWORD PTR [esp],esi
c001040e:	e8 4d 01 ff ff       	call   c0000560 <strlen>
c0010413:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c0010417:	89 c1                	mov    ecx,eax
c0010419:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001041b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001041e:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0010421:	40                   	inc    eax
c0010422:	83 c4 10             	add    esp,0x10
c0010425:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0010428:	85 d2                	test   edx,edx
c001042a:	75 0c                	jne    c0010438 <EnvVarContainer::loadFrom(char const*, char const*)+0x178>
c001042c:	83 ec 0c             	sub    esp,0xc
c001042f:	6a 08                	push   0x8
c0010431:	e8 2b 7a ff ff       	call   c0007e61 <malloc>
c0010436:	eb 0c                	jmp    c0010444 <EnvVarContainer::loadFrom(char const*, char const*)+0x184>
c0010438:	c1 e0 03             	shl    eax,0x3
c001043b:	51                   	push   ecx
c001043c:	51                   	push   ecx
c001043d:	50                   	push   eax
c001043e:	52                   	push   edx
c001043f:	e8 09 7a ff ff       	call   c0007e4d <realloc>
c0010444:	83 c4 10             	add    esp,0x10
c0010447:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c001044a:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001044d:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c0010450:	8d 74 24 18          	lea    esi,[esp+0x18]
c0010454:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c0010458:	b9 08 00 00 00       	mov    ecx,0x8
c001045d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001045f:	31 f6                	xor    esi,esi
c0010461:	50                   	push   eax
c0010462:	68 00 01 00 00       	push   0x100
c0010467:	6a 00                	push   0x0
c0010469:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c001046d:	50                   	push   eax
c001046e:	e8 7d 00 ff ff       	call   c00004f0 <memset>
c0010473:	83 c4 10             	add    esp,0x10
c0010476:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001047e:	eb 0f                	jmp    c001048f <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c0010480:	3c 3d                	cmp    al,0x3d
c0010482:	74 07                	je     c001048b <EnvVarContainer::loadFrom(char const*, char const*)+0x1cb>
c0010484:	88 44 34 20          	mov    BYTE PTR [esp+esi*1+0x20],al
c0010488:	46                   	inc    esi
c0010489:	eb 04                	jmp    c001048f <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c001048b:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c001048f:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0010494:	0f 85 c6 fe ff ff    	jne    c0010360 <EnvVarContainer::loadFrom(char const*, char const*)+0xa0>
c001049a:	81 c4 2c 01 00 00    	add    esp,0x12c
c00104a0:	5b                   	pop    ebx
c00104a1:	5e                   	pop    esi
c00104a2:	5f                   	pop    edi
c00104a3:	5d                   	pop    ebp
c00104a4:	c3                   	ret    
c00104a5:	90                   	nop

c00104a6 <EnvVarContainer::__loadSystem()>:
c00104a6:	83 ec 10             	sub    esp,0x10
c00104a9:	68 e0 f7 01 c0       	push   0xc001f7e0
c00104ae:	68 e4 e5 01 c0       	push   0xc001e5e4
c00104b3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00104b7:	e8 04 fe ff ff       	call   c00102c0 <EnvVarContainer::loadFrom(char const*, char const*)>
c00104bc:	83 c4 1c             	add    esp,0x1c
c00104bf:	c3                   	ret    

c00104c0 <EnvVarContainer::__loadUser()>:
c00104c0:	c3                   	ret    
c00104c1:	90                   	nop

c00104c2 <EnvVarContainer::EnvVarContainer(Process*)>:
c00104c2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00104c6:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00104cc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00104d0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00104d4:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00104d7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00104db:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00104e2:	90                   	nop
c00104e3:	c3                   	ret    

c00104e4 <EnvVarContainer::~EnvVarContainer()>:
c00104e4:	83 ec 0c             	sub    esp,0xc
c00104e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104eb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00104ee:	85 c0                	test   eax,eax
c00104f0:	74 1d                	je     c001050f <EnvVarContainer::~EnvVarContainer()+0x2b>
c00104f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104f6:	8b 00                	mov    eax,DWORD PTR [eax]
c00104f8:	85 c0                	test   eax,eax
c00104fa:	74 13                	je     c001050f <EnvVarContainer::~EnvVarContainer()+0x2b>
c00104fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010500:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010503:	83 ec 0c             	sub    esp,0xc
c0010506:	50                   	push   eax
c0010507:	e8 65 79 ff ff       	call   c0007e71 <free>
c001050c:	83 c4 10             	add    esp,0x10
c001050f:	90                   	nop
c0010510:	83 c4 0c             	add    esp,0xc
c0010513:	c3                   	ret    

c0010514 <Krnl::getEnv(Process*, char const*)>:
c0010514:	53                   	push   ebx
c0010515:	83 ec 08             	sub    esp,0x8
c0010518:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001051c:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0010520:	39 05 30 3d 02 c0    	cmp    DWORD PTR ds:0xc0023d30,eax
c0010526:	74 04                	je     c001052c <Krnl::getEnv(Process*, char const*)+0x18>
c0010528:	85 c0                	test   eax,eax
c001052a:	75 0b                	jne    c0010537 <Krnl::getEnv(Process*, char const*)+0x23>
c001052c:	a1 b0 32 02 c0       	mov    eax,ds:0xc00232b0
c0010531:	85 c0                	test   eax,eax
c0010533:	75 19                	jne    c001054e <Krnl::getEnv(Process*, char const*)+0x3a>
c0010535:	eb 27                	jmp    c001055e <Krnl::getEnv(Process*, char const*)+0x4a>
c0010537:	52                   	push   edx
c0010538:	52                   	push   edx
c0010539:	53                   	push   ebx
c001053a:	ff b0 1a 07 00 00    	push   DWORD PTR [eax+0x71a]
c0010540:	e8 79 fc ff ff       	call   c00101be <EnvVarContainer::getEnv(char const*)>
c0010545:	83 c4 10             	add    esp,0x10
c0010548:	85 c0                	test   eax,eax
c001054a:	75 28                	jne    c0010574 <Krnl::getEnv(Process*, char const*)+0x60>
c001054c:	eb de                	jmp    c001052c <Krnl::getEnv(Process*, char const*)+0x18>
c001054e:	52                   	push   edx
c001054f:	52                   	push   edx
c0010550:	53                   	push   ebx
c0010551:	50                   	push   eax
c0010552:	e8 67 fc ff ff       	call   c00101be <EnvVarContainer::getEnv(char const*)>
c0010557:	83 c4 10             	add    esp,0x10
c001055a:	85 c0                	test   eax,eax
c001055c:	75 16                	jne    c0010574 <Krnl::getEnv(Process*, char const*)+0x60>
c001055e:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c0010562:	a1 b4 32 02 c0       	mov    eax,ds:0xc00232b4
c0010567:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001056b:	83 c4 08             	add    esp,0x8
c001056e:	5b                   	pop    ebx
c001056f:	e9 4a fc ff ff       	jmp    c00101be <EnvVarContainer::getEnv(char const*)>
c0010574:	83 c4 08             	add    esp,0x8
c0010577:	5b                   	pop    ebx
c0010578:	c3                   	ret    

c0010579 <Krnl::setEnvSystem(char const*, char const*)>:
c0010579:	83 ec 10             	sub    esp,0x10
c001057c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010580:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010584:	ff 35 b4 32 02 c0    	push   DWORD PTR ds:0xc00232b4
c001058a:	e8 6d fc ff ff       	call   c00101fc <EnvVarContainer::setEnv(char const*, char const*)>
c001058f:	83 c4 1c             	add    esp,0x1c
c0010592:	c3                   	ret    

c0010593 <Krnl::setEnvUser(char const*, char const*)>:
c0010593:	a1 b0 32 02 c0       	mov    eax,ds:0xc00232b0
c0010598:	85 c0                	test   eax,eax
c001059a:	74 15                	je     c00105b1 <Krnl::setEnvUser(char const*, char const*)+0x1e>
c001059c:	83 ec 10             	sub    esp,0x10
c001059f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00105a3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00105a7:	50                   	push   eax
c00105a8:	e8 4f fc ff ff       	call   c00101fc <EnvVarContainer::setEnv(char const*, char const*)>
c00105ad:	83 c4 1c             	add    esp,0x1c
c00105b0:	c3                   	ret    
c00105b1:	c3                   	ret    

c00105b2 <Krnl::setEnvProcess(Process*, char const*, char const*)>:
c00105b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00105b6:	8b 80 1a 07 00 00    	mov    eax,DWORD PTR [eax+0x71a]
c00105bc:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00105c0:	e9 37 fc ff ff       	jmp    c00101fc <EnvVarContainer::setEnv(char const*, char const*)>

c00105c5 <Krnl::deleteEnvSystem(char const*)>:
c00105c5:	c3                   	ret    

c00105c6 <Krnl::deleteEnvUser(char const*)>:
c00105c6:	c3                   	ret    

c00105c7 <Krnl::deleteEnvProcess(Process*, char const*)>:
c00105c7:	c3                   	ret    

c00105c8 <Krnl::newProcessEnv(Process*)>:
c00105c8:	83 ec 28             	sub    esp,0x28
c00105cb:	6a 0c                	push   0xc
c00105cd:	e8 8f 78 ff ff       	call   c0007e61 <malloc>
c00105d2:	5a                   	pop    edx
c00105d3:	59                   	pop    ecx
c00105d4:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00105d8:	50                   	push   eax
c00105d9:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00105dd:	e8 e0 fe ff ff       	call   c00104c2 <EnvVarContainer::EnvVarContainer(Process*)>
c00105e2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00105e6:	83 c4 2c             	add    esp,0x2c
c00105e9:	c3                   	ret    

c00105ea <Krnl::copyProcessEnv(Process*, Process*)>:
c00105ea:	57                   	push   edi
c00105eb:	56                   	push   esi
c00105ec:	53                   	push   ebx
c00105ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00105f1:	83 ec 0c             	sub    esp,0xc
c00105f4:	8b b8 1a 07 00 00    	mov    edi,DWORD PTR [eax+0x71a]
c00105fa:	6a 0c                	push   0xc
c00105fc:	e8 60 78 ff ff       	call   c0007e61 <malloc>
c0010601:	89 c3                	mov    ebx,eax
c0010603:	58                   	pop    eax
c0010604:	5a                   	pop    edx
c0010605:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010609:	53                   	push   ebx
c001060a:	e8 b3 fe ff ff       	call   c00104c2 <EnvVarContainer::EnvVarContainer(Process*)>
c001060f:	8b 07                	mov    eax,DWORD PTR [edi]
c0010611:	89 03                	mov    DWORD PTR [ebx],eax
c0010613:	c1 e0 03             	shl    eax,0x3
c0010616:	89 04 24             	mov    DWORD PTR [esp],eax
c0010619:	e8 43 78 ff ff       	call   c0007e61 <malloc>
c001061e:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0010621:	8b 0f                	mov    ecx,DWORD PTR [edi]
c0010623:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
c0010626:	c1 e1 03             	shl    ecx,0x3
c0010629:	89 c7                	mov    edi,eax
c001062b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001062d:	83 c4 10             	add    esp,0x10
c0010630:	89 d8                	mov    eax,ebx
c0010632:	5b                   	pop    ebx
c0010633:	5e                   	pop    esi
c0010634:	5f                   	pop    edi
c0010635:	c3                   	ret    

c0010636 <Krnl::loadSystemEnv()>:
c0010636:	53                   	push   ebx
c0010637:	83 ec 14             	sub    esp,0x14
c001063a:	6a 0c                	push   0xc
c001063c:	e8 20 78 ff ff       	call   c0007e61 <malloc>
c0010641:	89 c3                	mov    ebx,eax
c0010643:	58                   	pop    eax
c0010644:	5a                   	pop    edx
c0010645:	ff 35 30 3d 02 c0    	push   DWORD PTR ds:0xc0023d30
c001064b:	53                   	push   ebx
c001064c:	e8 71 fe ff ff       	call   c00104c2 <EnvVarContainer::EnvVarContainer(Process*)>
c0010651:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010654:	89 1d b4 32 02 c0    	mov    DWORD PTR ds:0xc00232b4,ebx
c001065a:	e8 47 fe ff ff       	call   c00104a6 <EnvVarContainer::__loadSystem()>
c001065f:	83 c4 18             	add    esp,0x18
c0010662:	5b                   	pop    ebx
c0010663:	c3                   	ret    

c0010664 <Krnl::loadUserEnv()>:
c0010664:	53                   	push   ebx
c0010665:	83 ec 14             	sub    esp,0x14
c0010668:	6a 0c                	push   0xc
c001066a:	e8 f2 77 ff ff       	call   c0007e61 <malloc>
c001066f:	89 c3                	mov    ebx,eax
c0010671:	58                   	pop    eax
c0010672:	5a                   	pop    edx
c0010673:	ff 35 30 3d 02 c0    	push   DWORD PTR ds:0xc0023d30
c0010679:	53                   	push   ebx
c001067a:	e8 43 fe ff ff       	call   c00104c2 <EnvVarContainer::EnvVarContainer(Process*)>
c001067f:	89 1d b0 32 02 c0    	mov    DWORD PTR ds:0xc00232b0,ebx
c0010685:	83 c4 18             	add    esp,0x18
c0010688:	5b                   	pop    ebx
c0010689:	c3                   	ret    

c001068a <Krnl::flushEnv()>:
c001068a:	c3                   	ret    

c001068b <Krnl::getProcessTotalEnvCount(Process*)>:
c001068b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001068f:	8b 15 b0 32 02 c0    	mov    edx,DWORD PTR ds:0xc00232b0
c0010695:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c001069b:	a1 b4 32 02 c0       	mov    eax,ds:0xc00232b4
c00106a0:	8b 00                	mov    eax,DWORD PTR [eax]
c00106a2:	03 01                	add    eax,DWORD PTR [ecx]
c00106a4:	85 d2                	test   edx,edx
c00106a6:	74 02                	je     c00106aa <Krnl::getProcessTotalEnvCount(Process*)+0x1f>
c00106a8:	03 02                	add    eax,DWORD PTR [edx]
c00106aa:	c3                   	ret    

c00106ab <Krnl::getProcessEnvPair(Process*, int)>:
c00106ab:	57                   	push   edi
c00106ac:	56                   	push   esi
c00106ad:	8b 35 b0 32 02 c0    	mov    esi,DWORD PTR ds:0xc00232b0
c00106b3:	53                   	push   ebx
c00106b4:	85 f6                	test   esi,esi
c00106b6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00106ba:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00106be:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c00106c4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00106c8:	8b 01                	mov    eax,DWORD PTR [ecx]
c00106ca:	75 16                	jne    c00106e2 <Krnl::getProcessEnvPair(Process*, int)+0x37>
c00106cc:	39 c2                	cmp    edx,eax
c00106ce:	7c 16                	jl     c00106e6 <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c00106d0:	8b 0d b4 32 02 c0    	mov    ecx,DWORD PTR ds:0xc00232b4
c00106d6:	8b 31                	mov    esi,DWORD PTR [ecx]
c00106d8:	01 c6                	add    esi,eax
c00106da:	39 d6                	cmp    esi,edx
c00106dc:	7e 3c                	jle    c001071a <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c00106de:	29 c2                	sub    edx,eax
c00106e0:	eb 04                	jmp    c00106e6 <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c00106e2:	39 c2                	cmp    edx,eax
c00106e4:	7d 05                	jge    c00106eb <Krnl::getProcessEnvPair(Process*, int)+0x40>
c00106e6:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00106e9:	eb 20                	jmp    c001070b <Krnl::getProcessEnvPair(Process*, int)+0x60>
c00106eb:	8b 3e                	mov    edi,DWORD PTR [esi]
c00106ed:	8d 0c 07             	lea    ecx,[edi+eax*1]
c00106f0:	39 d1                	cmp    ecx,edx
c00106f2:	7e 04                	jle    c00106f8 <Krnl::getProcessEnvPair(Process*, int)+0x4d>
c00106f4:	29 c2                	sub    edx,eax
c00106f6:	eb 10                	jmp    c0010708 <Krnl::getProcessEnvPair(Process*, int)+0x5d>
c00106f8:	8b 35 b4 32 02 c0    	mov    esi,DWORD PTR ds:0xc00232b4
c00106fe:	03 0e                	add    ecx,DWORD PTR [esi]
c0010700:	39 d1                	cmp    ecx,edx
c0010702:	7e 16                	jle    c001071a <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c0010704:	29 c2                	sub    edx,eax
c0010706:	29 fa                	sub    edx,edi
c0010708:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001070b:	8d 14 d0             	lea    edx,[eax+edx*8]
c001070e:	8b 02                	mov    eax,DWORD PTR [edx]
c0010710:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c0010713:	89 03                	mov    DWORD PTR [ebx],eax
c0010715:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0010718:	eb 1d                	jmp    c0010737 <Krnl::getProcessEnvPair(Process*, int)+0x8c>
c001071a:	83 ec 0c             	sub    esp,0xc
c001071d:	68 06 e6 01 c0       	push   0xc001e606
c0010722:	e8 18 00 00 00       	call   c001073f <Krnl::panic(char const*)>
c0010727:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001072d:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0010734:	83 c4 10             	add    esp,0x10
c0010737:	89 d8                	mov    eax,ebx
c0010739:	5b                   	pop    ebx
c001073a:	5e                   	pop    esi
c001073b:	5f                   	pop    edi
c001073c:	c2 04 00             	ret    0x4

c001073f <Krnl::panic(char const*)>:
c001073f:	53                   	push   ebx
c0010740:	83 ec 10             	sub    esp,0x10
c0010743:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0010747:	fa                   	cli    
c0010748:	c6 05 c0 32 02 c0 01 	mov    BYTE PTR ds:0xc00232c0,0x1
c001074f:	53                   	push   ebx
c0010750:	68 20 e6 01 c0       	push   0xc001e620
c0010755:	e8 96 a4 ff ff       	call   c000abf0 <Dbg::kprintf(char const*, ...)>
c001075a:	83 c4 0c             	add    esp,0xc
c001075d:	a1 90 08 02 c0       	mov    eax,ds:0xc0020890
c0010762:	6a 01                	push   0x1
c0010764:	6a 0f                	push   0xf
c0010766:	50                   	push   eax
c0010767:	e8 78 82 ff ff       	call   c00089e4 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001076c:	5a                   	pop    edx
c001076d:	8b 0d 90 08 02 c0    	mov    ecx,DWORD PTR ds:0xc0020890
c0010773:	51                   	push   ecx
c0010774:	e8 63 84 ff ff       	call   c0008bdc <VgaText::clearScreen()>
c0010779:	58                   	pop    eax
c001077a:	8b 0d 90 08 02 c0    	mov    ecx,DWORD PTR ds:0xc0020890
c0010780:	5a                   	pop    edx
c0010781:	68 51 e6 01 c0       	push   0xc001e651
c0010786:	51                   	push   ecx
c0010787:	e8 90 82 ff ff       	call   c0008a1c <VgaText::setTitle(char*)>
c001078c:	83 c4 0c             	add    esp,0xc
c001078f:	a1 90 08 02 c0       	mov    eax,ds:0xc0020890
c0010794:	6a 01                	push   0x1
c0010796:	6a 0f                	push   0xf
c0010798:	50                   	push   eax
c0010799:	e8 46 82 ff ff       	call   c00089e4 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001079e:	58                   	pop    eax
c001079f:	8b 0d 90 08 02 c0    	mov    ecx,DWORD PTR ds:0xc0020890
c00107a5:	5a                   	pop    edx
c00107a6:	68 39 e6 01 c0       	push   0xc001e639
c00107ab:	51                   	push   ecx
c00107ac:	e8 1f 87 ff ff       	call   c0008ed0 <VgaText::puts(char const*)>
c00107b1:	83 c4 0c             	add    esp,0xc
c00107b4:	a1 90 08 02 c0       	mov    eax,ds:0xc0020890
c00107b9:	6a 0f                	push   0xf
c00107bb:	6a 01                	push   0x1
c00107bd:	50                   	push   eax
c00107be:	e8 21 82 ff ff       	call   c00089e4 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c00107c3:	58                   	pop    eax
c00107c4:	8b 0d 90 08 02 c0    	mov    ecx,DWORD PTR ds:0xc0020890
c00107ca:	5a                   	pop    edx
c00107cb:	68 42 e6 01 c0       	push   0xc001e642
c00107d0:	51                   	push   ecx
c00107d1:	e8 fa 86 ff ff       	call   c0008ed0 <VgaText::puts(char const*)>
c00107d6:	83 c4 0c             	add    esp,0xc
c00107d9:	a1 90 08 02 c0       	mov    eax,ds:0xc0020890
c00107de:	6a 01                	push   0x1
c00107e0:	6a 0f                	push   0xf
c00107e2:	50                   	push   eax
c00107e3:	e8 fc 81 ff ff       	call   c00089e4 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c00107e8:	58                   	pop    eax
c00107e9:	8b 0d 90 08 02 c0    	mov    ecx,DWORD PTR ds:0xc0020890
c00107ef:	5a                   	pop    edx
c00107f0:	68 4f e6 01 c0       	push   0xc001e64f
c00107f5:	51                   	push   ecx
c00107f6:	e8 d5 86 ff ff       	call   c0008ed0 <VgaText::puts(char const*)>
c00107fb:	58                   	pop    eax
c00107fc:	8b 0d 90 08 02 c0    	mov    ecx,DWORD PTR ds:0xc0020890
c0010802:	5a                   	pop    edx
c0010803:	68 60 e6 01 c0       	push   0xc001e660
c0010808:	51                   	push   ecx
c0010809:	e8 c2 86 ff ff       	call   c0008ed0 <VgaText::puts(char const*)>
c001080e:	58                   	pop    eax
c001080f:	8b 0d 90 08 02 c0    	mov    ecx,DWORD PTR ds:0xc0020890
c0010815:	5a                   	pop    edx
c0010816:	68 52 e6 01 c0       	push   0xc001e652
c001081b:	51                   	push   ecx
c001081c:	e8 af 86 ff ff       	call   c0008ed0 <VgaText::puts(char const*)>
c0010821:	58                   	pop    eax
c0010822:	8b 0d 90 08 02 c0    	mov    ecx,DWORD PTR ds:0xc0020890
c0010828:	5a                   	pop    edx
c0010829:	53                   	push   ebx
c001082a:	51                   	push   ecx
c001082b:	e8 a0 86 ff ff       	call   c0008ed0 <VgaText::puts(char const*)>
c0010830:	5b                   	pop    ebx
c0010831:	58                   	pop    eax
c0010832:	a1 90 08 02 c0       	mov    eax,ds:0xc0020890
c0010837:	68 4f e6 01 c0       	push   0xc001e64f
c001083c:	50                   	push   eax
c001083d:	e8 8e 86 ff ff       	call   c0008ed0 <VgaText::puts(char const*)>
c0010842:	83 c4 10             	add    esp,0x10
c0010845:	eb fe                	jmp    c0010845 <Krnl::panic(char const*)+0x106>

c0010847 <Krnl::powerThread(void*)>:
c0010847:	83 ec 0c             	sub    esp,0xc
c001084a:	a1 08 3d 02 c0       	mov    eax,ds:0xc0023d08
c001084f:	48                   	dec    eax
c0010850:	a3 08 3d 02 c0       	mov    ds:0xc0023d08,eax
c0010855:	75 01                	jne    c0010858 <Krnl::powerThread(void*)+0x11>
c0010857:	fb                   	sti    
c0010858:	83 ec 0c             	sub    esp,0xc
c001085b:	c6 05 e0 32 02 c0 00 	mov    BYTE PTR ds:0xc00232e0,0x0
c0010862:	6a 0a                	push   0xa
c0010864:	e8 3b 35 00 00       	call   c0013da4 <sleep(unsigned int)>
c0010869:	83 05 24 33 02 c0 0a 	add    DWORD PTR ds:0xc0023324,0xa
c0010870:	83 c4 10             	add    esp,0x10
c0010873:	eb e3                	jmp    c0010858 <Krnl::powerThread(void*)+0x11>

c0010875 <Krnl::changePowerSettings(Krnl::PowerSettings)>:
c0010875:	57                   	push   edi
c0010876:	b9 09 00 00 00       	mov    ecx,0x9
c001087b:	56                   	push   esi
c001087c:	bf 00 33 02 c0       	mov    edi,0xc0023300
c0010881:	fc                   	cld    
c0010882:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0010886:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0010888:	5e                   	pop    esi
c0010889:	5f                   	pop    edi
c001088a:	c3                   	ret    

c001088b <Krnl::userIOReceived()>:
c001088b:	c7 05 24 33 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023324,0x0
c0010895:	c3                   	ret    

c0010896 <Krnl::handlePowerButton()>:
c0010896:	83 ec 0c             	sub    esp,0xc
c0010899:	a1 00 33 02 c0       	mov    eax,ds:0xc0023300
c001089e:	83 f8 02             	cmp    eax,0x2
c00108a1:	75 10                	jne    c00108b3 <Krnl::handlePowerButton()+0x1d>
c00108a3:	83 ec 0c             	sub    esp,0xc
c00108a6:	ff 35 44 08 02 c0    	push   DWORD PTR ds:0xc0020844
c00108ac:	e8 51 6c ff ff       	call   c0007502 <Computer::shutdown()>
c00108b1:	eb 11                	jmp    c00108c4 <Krnl::handlePowerButton()+0x2e>
c00108b3:	48                   	dec    eax
c00108b4:	75 11                	jne    c00108c7 <Krnl::handlePowerButton()+0x31>
c00108b6:	83 ec 0c             	sub    esp,0xc
c00108b9:	ff 35 44 08 02 c0    	push   DWORD PTR ds:0xc0020844
c00108bf:	e8 6e 6c ff ff       	call   c0007532 <Computer::sleep()>
c00108c4:	83 c4 10             	add    esp,0x10
c00108c7:	83 c4 0c             	add    esp,0xc
c00108ca:	c3                   	ret    

c00108cb <Krnl::handleSleepButton()>:
c00108cb:	83 ec 0c             	sub    esp,0xc
c00108ce:	a1 04 33 02 c0       	mov    eax,ds:0xc0023304
c00108d3:	83 f8 02             	cmp    eax,0x2
c00108d6:	75 10                	jne    c00108e8 <Krnl::handleSleepButton()+0x1d>
c00108d8:	83 ec 0c             	sub    esp,0xc
c00108db:	ff 35 44 08 02 c0    	push   DWORD PTR ds:0xc0020844
c00108e1:	e8 1c 6c ff ff       	call   c0007502 <Computer::shutdown()>
c00108e6:	eb 11                	jmp    c00108f9 <Krnl::handleSleepButton()+0x2e>
c00108e8:	48                   	dec    eax
c00108e9:	75 11                	jne    c00108fc <Krnl::handleSleepButton()+0x31>
c00108eb:	83 ec 0c             	sub    esp,0xc
c00108ee:	ff 35 44 08 02 c0    	push   DWORD PTR ds:0xc0020844
c00108f4:	e8 39 6c ff ff       	call   c0007532 <Computer::sleep()>
c00108f9:	83 c4 10             	add    esp,0x10
c00108fc:	83 c4 0c             	add    esp,0xc
c00108ff:	c3                   	ret    

c0010900 <Krnl::setupPowerManager()>:
c0010900:	83 ec 0c             	sub    esp,0xc
c0010903:	c7 05 24 33 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023324,0x0
c001090d:	68 f0 00 00 00       	push   0xf0
c0010912:	c6 05 e0 32 02 c0 00 	mov    BYTE PTR ds:0xc00232e0,0x0
c0010919:	6a 00                	push   0x0
c001091b:	68 47 08 01 c0       	push   0xc0010847
c0010920:	ff 35 30 3d 02 c0    	push   DWORD PTR ds:0xc0023d30
c0010926:	e8 49 2f 00 00       	call   c0013874 <Process::createThread(void (*)(void*), void*, int)>
c001092b:	c7 05 00 33 02 c0 02 00 00 00 	mov    DWORD PTR ds:0xc0023300,0x2
c0010935:	c7 05 04 33 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0023304,0x1
c001093f:	c7 05 08 33 02 c0 03 00 00 00 	mov    DWORD PTR ds:0xc0023308,0x3
c0010949:	c7 05 0c 33 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002330c,0x0
c0010953:	c7 05 18 33 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023318,0x0
c001095d:	c7 05 10 33 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023310,0x0
c0010967:	c7 05 1c 33 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002331c,0x0
c0010971:	c7 05 14 33 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc0023314,0x3c
c001097b:	c7 05 20 33 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc0023320,0x3c
c0010985:	83 c4 1c             	add    esp,0x1c
c0010988:	c3                   	ret    

c0010989 <Reg::findLineFromLoadedData(char*, char*, char*)>:
c0010989:	55                   	push   ebp
c001098a:	57                   	push   edi
c001098b:	56                   	push   esi
c001098c:	53                   	push   ebx
c001098d:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0010993:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c001099a:	8a 1e                	mov    bl,BYTE PTR [esi]
c001099c:	8d 6e 01             	lea    ebp,[esi+0x1]
c001099f:	80 fb 40             	cmp    bl,0x40
c00109a2:	75 1b                	jne    c00109bf <Reg::findLineFromLoadedData(char*, char*, char*)+0x36>
c00109a4:	8a 16                	mov    dl,BYTE PTR [esi]
c00109a6:	84 d2                	test   dl,dl
c00109a8:	0f 84 f1 00 00 00    	je     c0010a9f <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c00109ae:	8d 46 01             	lea    eax,[esi+0x1]
c00109b1:	80 fa 3a             	cmp    dl,0x3a
c00109b4:	74 04                	je     c00109ba <Reg::findLineFromLoadedData(char*, char*, char*)+0x31>
c00109b6:	89 c6                	mov    esi,eax
c00109b8:	eb ea                	jmp    c00109a4 <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c00109ba:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00109bd:	89 c6                	mov    esi,eax
c00109bf:	50                   	push   eax
c00109c0:	6a 40                	push   0x40
c00109c2:	6a 00                	push   0x0
c00109c4:	8d 44 24 24          	lea    eax,[esp+0x24]
c00109c8:	50                   	push   eax
c00109c9:	e8 22 fb fe ff       	call   c00004f0 <memset>
c00109ce:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c00109d5:	31 c0                	xor    eax,eax
c00109d7:	83 c4 10             	add    esp,0x10
c00109da:	8a 0f                	mov    cl,BYTE PTR [edi]
c00109dc:	84 c9                	test   cl,cl
c00109de:	0f 84 bb 00 00 00    	je     c0010a9f <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c00109e4:	3d c7 00 00 00       	cmp    eax,0xc7
c00109e9:	0f 8f b0 00 00 00    	jg     c0010a9f <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c00109ef:	80 f9 0a             	cmp    cl,0xa
c00109f2:	0f 85 98 00 00 00    	jne    c0010a90 <Reg::findLineFromLoadedData(char*, char*, char*)+0x107>
c00109f8:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c00109fd:	8a 44 24 58          	mov    al,BYTE PTR [esp+0x58]
c0010a01:	a8 df                	test   al,0xdf
c0010a03:	0f 94 c1             	sete   cl
c0010a06:	3c 23                	cmp    al,0x23
c0010a08:	0f 94 c2             	sete   dl
c0010a0b:	08 d1                	or     cl,dl
c0010a0d:	75 4a                	jne    c0010a59 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0010a0f:	8d 50 f7             	lea    edx,[eax-0x9]
c0010a12:	80 fa 01             	cmp    dl,0x1
c0010a15:	76 42                	jbe    c0010a59 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0010a17:	3c 5b                	cmp    al,0x5b
c0010a19:	75 42                	jne    c0010a5d <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c0010a1b:	80 fb 40             	cmp    bl,0x40
c0010a1e:	75 39                	jne    c0010a59 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0010a20:	83 ec 0c             	sub    esp,0xc
c0010a23:	8d 54 24 65          	lea    edx,[esp+0x65]
c0010a27:	52                   	push   edx
c0010a28:	e8 33 fb fe ff       	call   c0000560 <strlen>
c0010a2d:	83 c4 10             	add    esp,0x10
c0010a30:	83 f8 3f             	cmp    eax,0x3f
c0010a33:	77 6a                	ja     c0010a9f <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0010a35:	50                   	push   eax
c0010a36:	50                   	push   eax
c0010a37:	8d 54 24 61          	lea    edx,[esp+0x61]
c0010a3b:	52                   	push   edx
c0010a3c:	8d 54 24 24          	lea    edx,[esp+0x24]
c0010a40:	52                   	push   edx
c0010a41:	e8 da fb fe ff       	call   c0000620 <strcpy>
c0010a46:	58                   	pop    eax
c0010a47:	8d 54 24 24          	lea    edx,[esp+0x24]
c0010a4b:	52                   	push   edx
c0010a4c:	e8 0f fb fe ff       	call   c0000560 <strlen>
c0010a51:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c0010a56:	83 c4 10             	add    esp,0x10
c0010a59:	31 d2                	xor    edx,edx
c0010a5b:	eb 3a                	jmp    c0010a97 <Reg::findLineFromLoadedData(char*, char*, char*)+0x10e>
c0010a5d:	80 fb 40             	cmp    bl,0x40
c0010a60:	74 06                	je     c0010a68 <Reg::findLineFromLoadedData(char*, char*, char*)+0xdf>
c0010a62:	8d 44 24 58          	lea    eax,[esp+0x58]
c0010a66:	eb 20                	jmp    c0010a88 <Reg::findLineFromLoadedData(char*, char*, char*)+0xff>
c0010a68:	50                   	push   eax
c0010a69:	50                   	push   eax
c0010a6a:	55                   	push   ebp
c0010a6b:	8d 44 24 24          	lea    eax,[esp+0x24]
c0010a6f:	50                   	push   eax
c0010a70:	e8 8b fc fe ff       	call   c0000700 <strcmp>
c0010a75:	83 c4 10             	add    esp,0x10
c0010a78:	85 c0                	test   eax,eax
c0010a7a:	75 dd                	jne    c0010a59 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0010a7c:	eb e4                	jmp    c0010a62 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd9>
c0010a7e:	8d 50 01             	lea    edx,[eax+0x1]
c0010a81:	80 f9 3d             	cmp    cl,0x3d
c0010a84:	74 1d                	je     c0010aa3 <Reg::findLineFromLoadedData(char*, char*, char*)+0x11a>
c0010a86:	89 d0                	mov    eax,edx
c0010a88:	8a 08                	mov    cl,BYTE PTR [eax]
c0010a8a:	84 c9                	test   cl,cl
c0010a8c:	75 f0                	jne    c0010a7e <Reg::findLineFromLoadedData(char*, char*, char*)+0xf5>
c0010a8e:	eb 0f                	jmp    c0010a9f <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0010a90:	8d 50 01             	lea    edx,[eax+0x1]
c0010a93:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c0010a97:	47                   	inc    edi
c0010a98:	89 d0                	mov    eax,edx
c0010a9a:	e9 3b ff ff ff       	jmp    c00109da <Reg::findLineFromLoadedData(char*, char*, char*)+0x51>
c0010a9f:	31 c0                	xor    eax,eax
c0010aa1:	eb 33                	jmp    c0010ad6 <Reg::findLineFromLoadedData(char*, char*, char*)+0x14d>
c0010aa3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0010aa7:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0010aaa:	50                   	push   eax
c0010aab:	50                   	push   eax
c0010aac:	8d 44 24 60          	lea    eax,[esp+0x60]
c0010ab0:	50                   	push   eax
c0010ab1:	56                   	push   esi
c0010ab2:	e8 49 fc fe ff       	call   c0000700 <strcmp>
c0010ab7:	83 c4 10             	add    esp,0x10
c0010aba:	85 c0                	test   eax,eax
c0010abc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010ac0:	75 97                	jne    c0010a59 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0010ac2:	51                   	push   ecx
c0010ac3:	51                   	push   ecx
c0010ac4:	52                   	push   edx
c0010ac5:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c0010acc:	e8 4f fb fe ff       	call   c0000620 <strcpy>
c0010ad1:	83 c4 10             	add    esp,0x10
c0010ad4:	b0 01                	mov    al,0x1
c0010ad6:	81 c4 2c 01 00 00    	add    esp,0x12c
c0010adc:	5b                   	pop    ebx
c0010add:	5e                   	pop    esi
c0010ade:	5f                   	pop    edi
c0010adf:	5d                   	pop    ebp
c0010ae0:	c3                   	ret    

c0010ae1 <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c0010ae1:	57                   	push   edi
c0010ae2:	56                   	push   esi
c0010ae3:	53                   	push   ebx
c0010ae4:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0010aea:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c0010af1:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c0010af8:	53                   	push   ebx
c0010af9:	e8 62 fa fe ff       	call   c0000560 <strlen>
c0010afe:	89 34 24             	mov    DWORD PTR [esp],esi
c0010b01:	89 c7                	mov    edi,eax
c0010b03:	e8 58 fa fe ff       	call   c0000560 <strlen>
c0010b08:	83 c4 10             	add    esp,0x10
c0010b0b:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c0010b0f:	3d ff 00 00 00       	cmp    eax,0xff
c0010b14:	0f 87 d3 00 00 00    	ja     c0010bed <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c0010b1a:	57                   	push   edi
c0010b1b:	57                   	push   edi
c0010b1c:	56                   	push   esi
c0010b1d:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0010b21:	56                   	push   esi
c0010b22:	e8 f9 fa fe ff       	call   c0000620 <strcpy>
c0010b27:	58                   	pop    eax
c0010b28:	5a                   	pop    edx
c0010b29:	68 7f e9 01 c0       	push   0xc001e97f
c0010b2e:	56                   	push   esi
c0010b2f:	e8 ac fc fe ff       	call   c00007e0 <strcat>
c0010b34:	59                   	pop    ecx
c0010b35:	5f                   	pop    edi
c0010b36:	53                   	push   ebx
c0010b37:	56                   	push   esi
c0010b38:	e8 a3 fc fe ff       	call   c00007e0 <strcat>
c0010b3d:	58                   	pop    eax
c0010b3e:	5a                   	pop    edx
c0010b3f:	68 9a e6 01 c0       	push   0xc001e69a
c0010b44:	56                   	push   esi
c0010b45:	e8 96 fc fe ff       	call   c00007e0 <strcat>
c0010b4a:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0010b51:	e8 0b 73 ff ff       	call   c0007e61 <malloc>
c0010b56:	83 c4 0c             	add    esp,0xc
c0010b59:	89 c3                	mov    ebx,eax
c0010b5b:	ff 35 30 3d 02 c0    	push   DWORD PTR ds:0xc0023d30
c0010b61:	56                   	push   esi
c0010b62:	50                   	push   eax
c0010b63:	e8 fe a5 ff ff       	call   c000b166 <File::File(char const*, Process*)>
c0010b68:	83 c4 10             	add    esp,0x10
c0010b6b:	85 db                	test   ebx,ebx
c0010b6d:	74 7e                	je     c0010bed <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c0010b6f:	51                   	push   ecx
c0010b70:	51                   	push   ecx
c0010b71:	6a 01                	push   0x1
c0010b73:	53                   	push   ebx
c0010b74:	e8 ad a6 ff ff       	call   c000b226 <File::open(FileOpenMode)>
c0010b79:	83 c4 10             	add    esp,0x10
c0010b7c:	85 c0                	test   eax,eax
c0010b7e:	74 08                	je     c0010b88 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c0010b80:	83 ec 0c             	sub    esp,0xc
c0010b83:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010b85:	53                   	push   ebx
c0010b86:	eb 5f                	jmp    c0010be7 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c0010b88:	52                   	push   edx
c0010b89:	8d 44 24 17          	lea    eax,[esp+0x17]
c0010b8d:	50                   	push   eax
c0010b8e:	8d 44 24 20          	lea    eax,[esp+0x20]
c0010b92:	50                   	push   eax
c0010b93:	53                   	push   ebx
c0010b94:	e8 39 a9 ff ff       	call   c000b4d2 <File::stat(unsigned long long*, bool*)>
c0010b99:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0010b9d:	83 c4 10             	add    esp,0x10
c0010ba0:	89 c1                	mov    ecx,eax
c0010ba2:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c0010ba6:	74 31                	je     c0010bd9 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c0010ba8:	83 ec 0c             	sub    esp,0xc
c0010bab:	50                   	push   eax
c0010bac:	e8 b0 72 ff ff       	call   c0007e61 <malloc>
c0010bb1:	89 c6                	mov    esi,eax
c0010bb3:	58                   	pop    eax
c0010bb4:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010bb6:	8d 54 24 20          	lea    edx,[esp+0x20]
c0010bba:	52                   	push   edx
c0010bbb:	56                   	push   esi
c0010bbc:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0010bc0:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0010bc4:	53                   	push   ebx
c0010bc5:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0010bc8:	83 c4 20             	add    esp,0x20
c0010bcb:	85 c0                	test   eax,eax
c0010bcd:	75 0a                	jne    c0010bd9 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c0010bcf:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010bd3:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0010bd7:	74 18                	je     c0010bf1 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c0010bd9:	83 ec 0c             	sub    esp,0xc
c0010bdc:	53                   	push   ebx
c0010bdd:	e8 a2 a6 ff ff       	call   c000b284 <File::close()>
c0010be2:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010be4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010be7:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0010bea:	83 c4 10             	add    esp,0x10
c0010bed:	31 c0                	xor    eax,eax
c0010bef:	eb 3b                	jmp    c0010c2c <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c0010bf1:	83 ec 0c             	sub    esp,0xc
c0010bf4:	53                   	push   ebx
c0010bf5:	e8 8a a6 ff ff       	call   c000b284 <File::close()>
c0010bfa:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010bfc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010bff:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0010c02:	83 c4 0c             	add    esp,0xc
c0010c05:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0010c0c:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0010c13:	56                   	push   esi
c0010c14:	e8 70 fd ff ff       	call   c0010989 <Reg::findLineFromLoadedData(char*, char*, char*)>
c0010c19:	89 34 24             	mov    DWORD PTR [esp],esi
c0010c1c:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0010c20:	e8 4c 72 ff ff       	call   c0007e71 <free>
c0010c25:	83 c4 10             	add    esp,0x10
c0010c28:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0010c2c:	81 c4 20 01 00 00    	add    esp,0x120
c0010c32:	5b                   	pop    ebx
c0010c33:	5e                   	pop    esi
c0010c34:	5f                   	pop    edi
c0010c35:	c3                   	ret    

c0010c36 <Reg::getLine(char*, char*, char*)>:
c0010c36:	57                   	push   edi
c0010c37:	56                   	push   esi
c0010c38:	53                   	push   ebx
c0010c39:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010c3d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0010c41:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0010c45:	57                   	push   edi
c0010c46:	56                   	push   esi
c0010c47:	53                   	push   ebx
c0010c48:	68 9f e6 01 c0       	push   0xc001e69f
c0010c4d:	e8 8f fe ff ff       	call   c0010ae1 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0010c52:	83 c4 10             	add    esp,0x10
c0010c55:	84 c0                	test   al,al
c0010c57:	75 10                	jne    c0010c69 <Reg::getLine(char*, char*, char*)+0x33>
c0010c59:	57                   	push   edi
c0010c5a:	56                   	push   esi
c0010c5b:	53                   	push   ebx
c0010c5c:	68 c4 e6 01 c0       	push   0xc001e6c4
c0010c61:	e8 7b fe ff ff       	call   c0010ae1 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0010c66:	83 c4 10             	add    esp,0x10
c0010c69:	5b                   	pop    ebx
c0010c6a:	5e                   	pop    esi
c0010c6b:	5f                   	pop    edi
c0010c6c:	c3                   	ret    

c0010c6d <Reg::readInt(char*, char*, int*)>:
c0010c6d:	55                   	push   ebp
c0010c6e:	57                   	push   edi
c0010c6f:	56                   	push   esi
c0010c70:	53                   	push   ebx
c0010c71:	81 ec f0 00 00 00    	sub    esp,0xf0
c0010c77:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c0010c7b:	57                   	push   edi
c0010c7c:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0010c83:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0010c8a:	e8 a7 ff ff ff       	call   c0010c36 <Reg::getLine(char*, char*, char*)>
c0010c8f:	83 c4 10             	add    esp,0x10
c0010c92:	84 c0                	test   al,al
c0010c94:	0f 84 b3 00 00 00    	je     c0010d4d <Reg::readInt(char*, char*, int*)+0xe0>
c0010c9a:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0010c9e:	80 fa 2b             	cmp    dl,0x2b
c0010ca1:	74 0c                	je     c0010caf <Reg::readInt(char*, char*, int*)+0x42>
c0010ca3:	80 fa 2d             	cmp    dl,0x2d
c0010ca6:	75 0e                	jne    c0010cb6 <Reg::readInt(char*, char*, int*)+0x49>
c0010ca8:	ba 01 00 00 00       	mov    edx,0x1
c0010cad:	eb 0b                	jmp    c0010cba <Reg::readInt(char*, char*, int*)+0x4d>
c0010caf:	ba 01 00 00 00       	mov    edx,0x1
c0010cb4:	eb 02                	jmp    c0010cb8 <Reg::readInt(char*, char*, int*)+0x4b>
c0010cb6:	31 d2                	xor    edx,edx
c0010cb8:	31 c0                	xor    eax,eax
c0010cba:	be 0a 00 00 00       	mov    esi,0xa
c0010cbf:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c0010cc4:	75 20                	jne    c0010ce6 <Reg::readInt(char*, char*, int*)+0x79>
c0010cc6:	8a 4c 14 19          	mov    cl,BYTE PTR [esp+edx*1+0x19]
c0010cca:	80 f9 78             	cmp    cl,0x78
c0010ccd:	75 0a                	jne    c0010cd9 <Reg::readInt(char*, char*, int*)+0x6c>
c0010ccf:	83 c2 02             	add    edx,0x2
c0010cd2:	be 10 00 00 00       	mov    esi,0x10
c0010cd7:	eb 0d                	jmp    c0010ce6 <Reg::readInt(char*, char*, int*)+0x79>
c0010cd9:	80 f9 62             	cmp    cl,0x62
c0010cdc:	75 08                	jne    c0010ce6 <Reg::readInt(char*, char*, int*)+0x79>
c0010cde:	83 c2 02             	add    edx,0x2
c0010ce1:	be 02 00 00 00       	mov    esi,0x2
c0010ce6:	01 d7                	add    edi,edx
c0010ce8:	31 d2                	xor    edx,edx
c0010cea:	8a 1f                	mov    bl,BYTE PTR [edi]
c0010cec:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
c0010cf0:	80 fb 0d             	cmp    bl,0xd
c0010cf3:	0f 94 c3             	sete   bl
c0010cf6:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0010cfb:	0f 94 c1             	sete   cl
c0010cfe:	08 cb                	or     bl,cl
c0010d00:	75 3a                	jne    c0010d3c <Reg::readInt(char*, char*, int*)+0xcf>
c0010d02:	0f af d6             	imul   edx,esi
c0010d05:	0f be 5c 24 0f       	movsx  ebx,BYTE PTR [esp+0xf]
c0010d0a:	83 fe 10             	cmp    esi,0x10
c0010d0d:	75 26                	jne    c0010d35 <Reg::readInt(char*, char*, int*)+0xc8>
c0010d0f:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0010d13:	8d 69 bf             	lea    ebp,[ecx-0x41]
c0010d16:	89 e9                	mov    ecx,ebp
c0010d18:	80 f9 05             	cmp    cl,0x5
c0010d1b:	77 06                	ja     c0010d23 <Reg::readInt(char*, char*, int*)+0xb6>
c0010d1d:	8d 54 1a c9          	lea    edx,[edx+ebx*1-0x37]
c0010d21:	eb 16                	jmp    c0010d39 <Reg::readInt(char*, char*, int*)+0xcc>
c0010d23:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0010d27:	83 e9 61             	sub    ecx,0x61
c0010d2a:	80 f9 05             	cmp    cl,0x5
c0010d2d:	77 06                	ja     c0010d35 <Reg::readInt(char*, char*, int*)+0xc8>
c0010d2f:	8d 54 1a a9          	lea    edx,[edx+ebx*1-0x57]
c0010d33:	eb 04                	jmp    c0010d39 <Reg::readInt(char*, char*, int*)+0xcc>
c0010d35:	8d 54 1a d0          	lea    edx,[edx+ebx*1-0x30]
c0010d39:	47                   	inc    edi
c0010d3a:	eb ae                	jmp    c0010cea <Reg::readInt(char*, char*, int*)+0x7d>
c0010d3c:	84 c0                	test   al,al
c0010d3e:	74 02                	je     c0010d42 <Reg::readInt(char*, char*, int*)+0xd5>
c0010d40:	f7 da                	neg    edx
c0010d42:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c0010d49:	89 10                	mov    DWORD PTR [eax],edx
c0010d4b:	88 d8                	mov    al,bl
c0010d4d:	81 c4 ec 00 00 00    	add    esp,0xec
c0010d53:	5b                   	pop    ebx
c0010d54:	5e                   	pop    esi
c0010d55:	5f                   	pop    edi
c0010d56:	5d                   	pop    ebp
c0010d57:	c3                   	ret    

c0010d58 <Reg::readString(char*, char*, char*, int)>:
c0010d58:	57                   	push   edi
c0010d59:	56                   	push   esi
c0010d5a:	53                   	push   ebx
c0010d5b:	81 ec d4 00 00 00    	sub    esp,0xd4
c0010d61:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c0010d68:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c0010d6c:	57                   	push   edi
c0010d6d:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c0010d74:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c0010d7b:	e8 b6 fe ff ff       	call   c0010c36 <Reg::getLine(char*, char*, char*)>
c0010d80:	83 c4 10             	add    esp,0x10
c0010d83:	89 c6                	mov    esi,eax
c0010d85:	84 c0                	test   al,al
c0010d87:	74 44                	je     c0010dcd <Reg::readString(char*, char*, char*, int)+0x75>
c0010d89:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c0010d90:	31 c0                	xor    eax,eax
c0010d92:	4a                   	dec    edx
c0010d93:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c0010d96:	84 c9                	test   cl,cl
c0010d98:	74 0f                	je     c0010da9 <Reg::readString(char*, char*, char*, int)+0x51>
c0010d9a:	39 c2                	cmp    edx,eax
c0010d9c:	7e 0b                	jle    c0010da9 <Reg::readString(char*, char*, char*, int)+0x51>
c0010d9e:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c0010da1:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c0010da6:	40                   	inc    eax
c0010da7:	eb ea                	jmp    c0010d93 <Reg::readString(char*, char*, char*, int)+0x3b>
c0010da9:	83 ec 0c             	sub    esp,0xc
c0010dac:	53                   	push   ebx
c0010dad:	e8 ae f7 fe ff       	call   c0000560 <strlen>
c0010db2:	83 c4 10             	add    esp,0x10
c0010db5:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c0010dba:	75 11                	jne    c0010dcd <Reg::readString(char*, char*, char*, int)+0x75>
c0010dbc:	83 ec 0c             	sub    esp,0xc
c0010dbf:	53                   	push   ebx
c0010dc0:	e8 9b f7 fe ff       	call   c0000560 <strlen>
c0010dc5:	83 c4 10             	add    esp,0x10
c0010dc8:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c0010dcd:	81 c4 d0 00 00 00    	add    esp,0xd0
c0010dd3:	89 f0                	mov    eax,esi
c0010dd5:	5b                   	pop    ebx
c0010dd6:	5e                   	pop    esi
c0010dd7:	5f                   	pop    edi
c0010dd8:	c3                   	ret    

c0010dd9 <Reg::readBool(char*, char*, bool*)>:
c0010dd9:	83 ec 20             	sub    esp,0x20
c0010ddc:	8d 44 24 10          	lea    eax,[esp+0x10]
c0010de0:	50                   	push   eax
c0010de1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0010de5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0010de9:	e8 7f fe ff ff       	call   c0010c6d <Reg::readInt(char*, char*, int*)>
c0010dee:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0010df3:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0010df7:	0f 95 02             	setne  BYTE PTR [edx]
c0010dfa:	83 c4 2c             	add    esp,0x2c
c0010dfd:	c3                   	ret    

c0010dfe <Reg::readBoolWithDefault(char*, char*, bool)>:
c0010dfe:	53                   	push   ebx
c0010dff:	83 ec 1c             	sub    esp,0x1c
c0010e02:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c0010e06:	8d 44 24 13          	lea    eax,[esp+0x13]
c0010e0a:	50                   	push   eax
c0010e0b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0010e0f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0010e13:	e8 c1 ff ff ff       	call   c0010dd9 <Reg::readBool(char*, char*, bool*)>
c0010e18:	83 c4 10             	add    esp,0x10
c0010e1b:	84 c0                	test   al,al
c0010e1d:	74 04                	je     c0010e23 <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c0010e1f:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c0010e23:	88 d8                	mov    al,bl
c0010e25:	83 c4 18             	add    esp,0x18
c0010e28:	5b                   	pop    ebx
c0010e29:	c3                   	ret    

c0010e2a <Reg::readIntWithDefault(char*, char*, int)>:
c0010e2a:	53                   	push   ebx
c0010e2b:	83 ec 1c             	sub    esp,0x1c
c0010e2e:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0010e32:	8d 44 24 10          	lea    eax,[esp+0x10]
c0010e36:	50                   	push   eax
c0010e37:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0010e3b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0010e3f:	e8 29 fe ff ff       	call   c0010c6d <Reg::readInt(char*, char*, int*)>
c0010e44:	83 c4 10             	add    esp,0x10
c0010e47:	84 c0                	test   al,al
c0010e49:	74 04                	je     c0010e4f <Reg::readIntWithDefault(char*, char*, int)+0x25>
c0010e4b:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0010e4f:	89 d8                	mov    eax,ebx
c0010e51:	83 c4 18             	add    esp,0x18
c0010e54:	5b                   	pop    ebx
c0010e55:	c3                   	ret    

c0010e56 <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c0010e56:	57                   	push   edi
c0010e57:	56                   	push   esi
c0010e58:	56                   	push   esi
c0010e59:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0010e5d:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0010e61:	56                   	push   esi
c0010e62:	57                   	push   edi
c0010e63:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010e67:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010e6b:	e8 e8 fe ff ff       	call   c0010d58 <Reg::readString(char*, char*, char*, int)>
c0010e70:	83 c4 10             	add    esp,0x10
c0010e73:	84 c0                	test   al,al
c0010e75:	75 1a                	jne    c0010e91 <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x3b>
c0010e77:	51                   	push   ecx
c0010e78:	56                   	push   esi
c0010e79:	6a 00                	push   0x0
c0010e7b:	57                   	push   edi
c0010e7c:	e8 6f f6 fe ff       	call   c00004f0 <memset>
c0010e81:	8d 4e ff             	lea    ecx,[esi-0x1]
c0010e84:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0010e88:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010e8a:	83 c4 10             	add    esp,0x10
c0010e8d:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0010e91:	89 f8                	mov    eax,edi
c0010e93:	5a                   	pop    edx
c0010e94:	5e                   	pop    esi
c0010e95:	5f                   	pop    edi
c0010e96:	c3                   	ret    

c0010e97 <Sys::eject(regs*)>:
c0010e97:	83 ec 0c             	sub    esp,0xc
c0010e9a:	83 ca ff             	or     edx,0xffffffff
c0010e9d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010ea1:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0010ea4:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0010ea9:	83 e9 41             	sub    ecx,0x41
c0010eac:	83 f9 19             	cmp    ecx,0x19
c0010eaf:	77 18                	ja     c0010ec9 <Sys::eject(regs*)+0x32>
c0010eb1:	8b 0c 8d a0 2d 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdd260]
c0010eb8:	85 c9                	test   ecx,ecx
c0010eba:	74 0d                	je     c0010ec9 <Sys::eject(regs*)+0x32>
c0010ebc:	83 ec 0c             	sub    esp,0xc
c0010ebf:	51                   	push   ecx
c0010ec0:	e8 a9 c3 ff ff       	call   c000d26e <LogicalDisk::eject()>
c0010ec5:	83 c4 10             	add    esp,0x10
c0010ec8:	99                   	cdq    
c0010ec9:	83 c4 0c             	add    esp,0xc
c0010ecc:	c3                   	ret    

c0010ecd <Sys::exit(regs*)>:
c0010ecd:	83 ec 18             	sub    esp,0x18
c0010ed0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010ed4:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0010ed7:	e8 dc 34 00 00       	call   c00143b8 <terminateTask(int)>
c0010edc:	83 c8 ff             	or     eax,0xffffffff
c0010edf:	83 c4 1c             	add    esp,0x1c
c0010ee2:	89 c2                	mov    edx,eax
c0010ee4:	c3                   	ret    

c0010ee5 <Sys::getCwd(regs*)>:
c0010ee5:	83 ec 10             	sub    esp,0x10
c0010ee8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010eec:	ff 70 28             	push   DWORD PTR [eax+0x28]
c0010eef:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0010ef2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010ef7:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0010efa:	e8 69 a0 ff ff       	call   c000af68 <Fs::getcwd(Process*, char*, int)>
c0010eff:	83 c4 1c             	add    esp,0x1c
c0010f02:	99                   	cdq    
c0010f03:	c3                   	ret    

c0010f04 <Sys::getPID(regs*)>:
c0010f04:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010f09:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010f0c:	8b 00                	mov    eax,DWORD PTR [eax]
c0010f0e:	99                   	cdq    
c0010f0f:	c3                   	ret    

c0010f10 <Sys::getRAMData(regs*)>:
c0010f10:	8b 0d 74 08 02 c0    	mov    ecx,DWORD PTR ds:0xc0020874
c0010f16:	69 05 70 08 02 c0 c8 00 00 00 	imul   eax,DWORD PTR ds:0xc0020870,0xc8
c0010f20:	99                   	cdq    
c0010f21:	f7 f9                	idiv   ecx
c0010f23:	c1 e0 18             	shl    eax,0x18
c0010f26:	09 c8                	or     eax,ecx
c0010f28:	99                   	cdq    
c0010f29:	c3                   	ret    

c0010f2a <Sys::getVGAPtr(regs*)>:
c0010f2a:	55                   	push   ebp
c0010f2b:	57                   	push   edi
c0010f2c:	56                   	push   esi
c0010f2d:	53                   	push   ebx
c0010f2e:	83 ec 18             	sub    esp,0x18
c0010f31:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0010f35:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0010f38:	e8 7b 2f 00 00       	call   c0013eb8 <Thr::processFromPID(int)>
c0010f3d:	83 c4 10             	add    esp,0x10
c0010f40:	89 c1                	mov    ecx,eax
c0010f42:	b8 01 00 00 00       	mov    eax,0x1
c0010f47:	85 c9                	test   ecx,ecx
c0010f49:	74 57                	je     c0010fa2 <Sys::getVGAPtr(regs*)+0x78>
c0010f4b:	8b a9 06 05 00 00    	mov    ebp,DWORD PTR [ecx+0x506]
c0010f51:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c0010f55:	74 0c                	je     c0010f63 <Sys::getVGAPtr(regs*)+0x39>
c0010f57:	83 ec 0c             	sub    esp,0xc
c0010f5a:	55                   	push   ebp
c0010f5b:	e8 31 7c ff ff       	call   c0008b91 <setActiveTerminal(VgaText*)>
c0010f60:	83 c4 10             	add    esp,0x10
c0010f63:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c0010f66:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0010f69:	b9 a0 0f 00 00       	mov    ecx,0xfa0
c0010f6e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010f70:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0010f73:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010f76:	89 90 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],edx
c0010f7c:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010f7f:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0010f82:	89 90 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],edx
c0010f88:	50                   	push   eax
c0010f89:	50                   	push   eax
c0010f8a:	68 df e6 01 c0       	push   0xc001e6df
c0010f8f:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010f92:	05 a8 0f 00 00       	add    eax,0xfa8
c0010f97:	50                   	push   eax
c0010f98:	e8 83 f6 fe ff       	call   c0000620 <strcpy>
c0010f9d:	83 c4 10             	add    esp,0x10
c0010fa0:	31 c0                	xor    eax,eax
c0010fa2:	83 c4 0c             	add    esp,0xc
c0010fa5:	31 d2                	xor    edx,edx
c0010fa7:	5b                   	pop    ebx
c0010fa8:	5e                   	pop    esi
c0010fa9:	5f                   	pop    edi
c0010faa:	5d                   	pop    ebp
c0010fab:	c3                   	ret    

c0010fac <Sys::loadDLL(regs*)>:
c0010fac:	56                   	push   esi
c0010fad:	53                   	push   ebx
c0010fae:	31 d2                	xor    edx,edx
c0010fb0:	51                   	push   ecx
c0010fb1:	b8 01 00 00 00       	mov    eax,0x1
c0010fb6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010fba:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c0010fbe:	0f 84 8c 00 00 00    	je     c0011050 <Sys::loadDLL(regs*)+0xa4>
c0010fc4:	83 ec 0c             	sub    esp,0xc
c0010fc7:	68 14 01 00 00       	push   0x114
c0010fcc:	e8 90 6e ff ff       	call   c0007e61 <malloc>
c0010fd1:	83 c4 0c             	add    esp,0xc
c0010fd4:	89 c3                	mov    ebx,eax
c0010fd6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010fdb:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0010fde:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0010fe1:	53                   	push   ebx
c0010fe2:	e8 7f a1 ff ff       	call   c000b166 <File::File(char const*, Process*)>
c0010fe7:	83 c4 10             	add    esp,0x10
c0010fea:	31 d2                	xor    edx,edx
c0010fec:	b8 02 00 00 00       	mov    eax,0x2
c0010ff1:	85 db                	test   ebx,ebx
c0010ff3:	74 5b                	je     c0011050 <Sys::loadDLL(regs*)+0xa4>
c0010ff5:	83 ec 0c             	sub    esp,0xc
c0010ff8:	53                   	push   ebx
c0010ff9:	e8 96 a4 ff ff       	call   c000b494 <File::exists()>
c0010ffe:	83 c4 10             	add    esp,0x10
c0011001:	84 c0                	test   al,al
c0011003:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011005:	75 11                	jne    c0011018 <Sys::loadDLL(regs*)+0x6c>
c0011007:	83 ec 0c             	sub    esp,0xc
c001100a:	53                   	push   ebx
c001100b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001100e:	83 c4 10             	add    esp,0x10
c0011011:	b8 03 00 00 00       	mov    eax,0x3
c0011016:	eb 36                	jmp    c001104e <Sys::loadDLL(regs*)+0xa2>
c0011018:	83 ec 0c             	sub    esp,0xc
c001101b:	53                   	push   ebx
c001101c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001101f:	58                   	pop    eax
c0011020:	5a                   	pop    edx
c0011021:	6a 00                	push   0x0
c0011023:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0011026:	e8 77 20 00 00       	call   c00130a2 <Thr::loadDLL(char const*, bool)>
c001102b:	83 c4 10             	add    esp,0x10
c001102e:	89 c1                	mov    ecx,eax
c0011030:	31 d2                	xor    edx,edx
c0011032:	b8 04 00 00 00       	mov    eax,0x4
c0011037:	85 c9                	test   ecx,ecx
c0011039:	74 15                	je     c0011050 <Sys::loadDLL(regs*)+0xa4>
c001103b:	53                   	push   ebx
c001103c:	53                   	push   ebx
c001103d:	ff 35 44 08 02 c0    	push   DWORD PTR ds:0xc0020844
c0011043:	51                   	push   ecx
c0011044:	e8 8a 22 00 00       	call   c00132d3 <Thr::executeDLL(unsigned long, void*)>
c0011049:	83 c4 10             	add    esp,0x10
c001104c:	31 c0                	xor    eax,eax
c001104e:	31 d2                	xor    edx,edx
c0011050:	59                   	pop    ecx
c0011051:	5b                   	pop    ebx
c0011052:	5e                   	pop    esi
c0011053:	c3                   	ret    

c0011054 <Sys::read(regs*)>:
c0011054:	57                   	push   edi
c0011055:	56                   	push   esi
c0011056:	53                   	push   ebx
c0011057:	83 ec 10             	sub    esp,0x10
c001105a:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001105e:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011061:	83 f8 02             	cmp    eax,0x2
c0011064:	77 10                	ja     c0011076 <Sys::read(regs*)+0x22>
c0011066:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001106b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001106e:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c0011074:	eb 0e                	jmp    c0011084 <Sys::read(regs*)+0x30>
c0011076:	83 ec 0c             	sub    esp,0xc
c0011079:	50                   	push   eax
c001107a:	e8 c8 87 ff ff       	call   c0009847 <getFromFileDescriptor(int)>
c001107f:	83 c4 10             	add    esp,0x10
c0011082:	89 c1                	mov    ecx,eax
c0011084:	83 c8 ff             	or     eax,0xffffffff
c0011087:	85 c9                	test   ecx,ecx
c0011089:	89 c2                	mov    edx,eax
c001108b:	74 28                	je     c00110b5 <Sys::read(regs*)+0x61>
c001108d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011095:	31 ff                	xor    edi,edi
c0011097:	83 ec 0c             	sub    esp,0xc
c001109a:	8b 01                	mov    eax,DWORD PTR [ecx]
c001109c:	8d 54 24 18          	lea    edx,[esp+0x18]
c00110a0:	52                   	push   edx
c00110a1:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00110a4:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c00110a7:	57                   	push   edi
c00110a8:	56                   	push   esi
c00110a9:	51                   	push   ecx
c00110aa:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00110ad:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00110b1:	83 c4 20             	add    esp,0x20
c00110b4:	99                   	cdq    
c00110b5:	83 c4 10             	add    esp,0x10
c00110b8:	5b                   	pop    ebx
c00110b9:	5e                   	pop    esi
c00110ba:	5f                   	pop    edi
c00110bb:	c3                   	ret    

c00110bc <Sys::sbrk(regs*)>:
c00110bc:	56                   	push   esi
c00110bd:	53                   	push   ebx
c00110be:	50                   	push   eax
c00110bf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00110c4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00110c8:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00110cb:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c00110ce:	8b 88 12 05 00 00    	mov    ecx,DWORD PTR [eax+0x512]
c00110d4:	85 db                	test   ebx,ebx
c00110d6:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c00110d9:	74 02                	je     c00110dd <Sys::sbrk(regs*)+0x21>
c00110db:	79 06                	jns    c00110e3 <Sys::sbrk(regs*)+0x27>
c00110dd:	89 f0                	mov    eax,esi
c00110df:	31 d2                	xor    edx,edx
c00110e1:	eb 2a                	jmp    c001110d <Sys::sbrk(regs*)+0x51>
c00110e3:	83 c8 ff             	or     eax,0xffffffff
c00110e6:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c00110ec:	89 c2                	mov    edx,eax
c00110ee:	77 1d                	ja     c001110d <Sys::sbrk(regs*)+0x51>
c00110f0:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c00110f6:	50                   	push   eax
c00110f7:	c1 ea 0c             	shr    edx,0xc
c00110fa:	68 07 0c 00 00       	push   0xc07
c00110ff:	52                   	push   edx
c0011100:	51                   	push   ecx
c0011101:	e8 30 90 ff ff       	call   c000a136 <VAS::allocatePages(int, int)>
c0011106:	89 f0                	mov    eax,esi
c0011108:	31 d2                	xor    edx,edx
c001110a:	83 c4 10             	add    esp,0x10
c001110d:	59                   	pop    ecx
c001110e:	5b                   	pop    ebx
c001110f:	5e                   	pop    esi
c0011110:	c3                   	ret    

c0011111 <Sys::setCwd(regs*)>:
c0011111:	83 ec 14             	sub    esp,0x14
c0011114:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011118:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001111b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011120:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0011123:	e8 0b a4 ff ff       	call   c000b533 <Fs::setcwd(Process*, char*)>
c0011128:	83 c4 1c             	add    esp,0x1c
c001112b:	99                   	cdq    
c001112c:	c3                   	ret    

c001112d <Sys::setTime(regs*)>:
c001112d:	55                   	push   ebp
c001112e:	31 c9                	xor    ecx,ecx
c0011130:	57                   	push   edi
c0011131:	bd 0c 00 00 00       	mov    ebp,0xc
c0011136:	56                   	push   esi
c0011137:	53                   	push   ebx
c0011138:	31 db                	xor    ebx,ebx
c001113a:	83 ec 10             	sub    esp,0x10
c001113d:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0011141:	8b 72 20             	mov    esi,DWORD PTR [edx+0x20]
c0011144:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c0011147:	8b 7a 24             	mov    edi,DWORD PTR [edx+0x24]
c001114a:	89 c2                	mov    edx,eax
c001114c:	66 81 ef 6c 07       	sub    di,0x76c
c0011151:	83 e2 1f             	and    edx,0x1f
c0011154:	c1 e7 10             	shl    edi,0x10
c0011157:	42                   	inc    edx
c0011158:	c1 e8 05             	shr    eax,0x5
c001115b:	88 d1                	mov    cl,dl
c001115d:	31 d2                	xor    edx,edx
c001115f:	f7 f5                	div    ebp
c0011161:	89 dd                	mov    ebp,ebx
c0011163:	88 d5                	mov    ch,dl
c0011165:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c001116b:	0f b7 c1             	movzx  eax,cx
c001116e:	31 d2                	xor    edx,edx
c0011170:	09 f8                	or     eax,edi
c0011172:	bf 3c 00 00 00       	mov    edi,0x3c
c0011177:	89 c1                	mov    ecx,eax
c0011179:	89 f0                	mov    eax,esi
c001117b:	f7 f7                	div    edi
c001117d:	c1 e2 10             	shl    edx,0x10
c0011180:	09 d5                	or     ebp,edx
c0011182:	31 d2                	xor    edx,edx
c0011184:	89 eb                	mov    ebx,ebp
c0011186:	f7 f7                	div    edi
c0011188:	bf 10 0e 00 00       	mov    edi,0xe10
c001118d:	88 d7                	mov    bh,dl
c001118f:	89 f0                	mov    eax,esi
c0011191:	31 d2                	xor    edx,edx
c0011193:	f7 f7                	div    edi
c0011195:	bf 18 00 00 00       	mov    edi,0x18
c001119a:	31 d2                	xor    edx,edx
c001119c:	f7 f7                	div    edi
c001119e:	a1 44 08 02 c0       	mov    eax,ds:0xc0020844
c00111a3:	88 d3                	mov    bl,dl
c00111a5:	53                   	push   ebx
c00111a6:	51                   	push   ecx
c00111a7:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c00111ad:	e8 92 ab ff ff       	call   c000bd44 <Clock::setTimeInDatetimeLocal(datetime_t)>
c00111b2:	83 c4 1c             	add    esp,0x1c
c00111b5:	83 f0 01             	xor    eax,0x1
c00111b8:	5b                   	pop    ebx
c00111b9:	0f b6 c0             	movzx  eax,al
c00111bc:	5e                   	pop    esi
c00111bd:	31 d2                	xor    edx,edx
c00111bf:	5f                   	pop    edi
c00111c0:	5d                   	pop    ebp
c00111c1:	c3                   	ret    

c00111c2 <Sys::timezone(regs*)>:
c00111c2:	53                   	push   ebx
c00111c3:	83 ec 08             	sub    esp,0x8
c00111c6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00111ca:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c00111ce:	75 17                	jne    c00111e7 <Sys::timezone(regs*)+0x25>
c00111d0:	83 ec 0c             	sub    esp,0xc
c00111d3:	68 e9 e6 01 c0       	push   0xc001e6e9
c00111d8:	e8 13 9a ff ff       	call   c000abf0 <Dbg::kprintf(char const*, ...)>
c00111dd:	83 c8 ff             	or     eax,0xffffffff
c00111e0:	83 c4 10             	add    esp,0x10
c00111e3:	89 c2                	mov    edx,eax
c00111e5:	eb 20                	jmp    c0011207 <Sys::timezone(regs*)+0x45>
c00111e7:	83 ec 0c             	sub    esp,0xc
c00111ea:	68 fe e6 01 c0       	push   0xc001e6fe
c00111ef:	e8 fc 99 ff ff       	call   c000abf0 <Dbg::kprintf(char const*, ...)>
c00111f4:	58                   	pop    eax
c00111f5:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00111f8:	e8 a3 a8 ff ff       	call   c000baa0 <User::loadClockSettings(int)>
c00111fd:	83 c4 10             	add    esp,0x10
c0011200:	b8 01 00 00 00       	mov    eax,0x1
c0011205:	31 d2                	xor    edx,edx
c0011207:	83 c4 08             	add    esp,0x8
c001120a:	5b                   	pop    ebx
c001120b:	c3                   	ret    

c001120c <Sys::write(regs*)>:
c001120c:	57                   	push   edi
c001120d:	56                   	push   esi
c001120e:	53                   	push   ebx
c001120f:	83 ec 10             	sub    esp,0x10
c0011212:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011216:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011219:	83 f8 02             	cmp    eax,0x2
c001121c:	77 10                	ja     c001122e <Sys::write(regs*)+0x22>
c001121e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011223:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011226:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c001122c:	eb 0e                	jmp    c001123c <Sys::write(regs*)+0x30>
c001122e:	83 ec 0c             	sub    esp,0xc
c0011231:	50                   	push   eax
c0011232:	e8 10 86 ff ff       	call   c0009847 <getFromFileDescriptor(int)>
c0011237:	83 c4 10             	add    esp,0x10
c001123a:	89 c1                	mov    ecx,eax
c001123c:	83 c8 ff             	or     eax,0xffffffff
c001123f:	85 c9                	test   ecx,ecx
c0011241:	89 c2                	mov    edx,eax
c0011243:	74 28                	je     c001126d <Sys::write(regs*)+0x61>
c0011245:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001124d:	31 ff                	xor    edi,edi
c001124f:	83 ec 0c             	sub    esp,0xc
c0011252:	8b 01                	mov    eax,DWORD PTR [ecx]
c0011254:	8d 54 24 18          	lea    edx,[esp+0x18]
c0011258:	52                   	push   edx
c0011259:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001125c:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001125f:	57                   	push   edi
c0011260:	56                   	push   esi
c0011261:	51                   	push   ecx
c0011262:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0011265:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011269:	83 c4 20             	add    esp,0x20
c001126c:	99                   	cdq    
c001126d:	83 c4 10             	add    esp,0x10
c0011270:	5b                   	pop    ebx
c0011271:	5e                   	pop    esi
c0011272:	5f                   	pop    edi
c0011273:	c3                   	ret    

c0011274 <Sys::wsbe(regs*)>:
c0011274:	57                   	push   edi
c0011275:	b9 0b 00 00 00       	mov    ecx,0xb
c001127a:	56                   	push   esi
c001127b:	be 3d e7 01 c0       	mov    esi,0xc001e73d
c0011280:	53                   	push   ebx
c0011281:	83 ec 30             	sub    esp,0x30
c0011284:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0011288:	fc                   	cld    
c0011289:	83 ec 0c             	sub    esp,0xc
c001128c:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001128e:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0011292:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011297:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001129a:	8b b0 06 05 00 00    	mov    esi,DWORD PTR [eax+0x506]
c00112a0:	8b 06                	mov    eax,DWORD PTR [esi]
c00112a2:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c00112a5:	57                   	push   edi
c00112a6:	e8 b5 f2 fe ff       	call   c0000560 <strlen>
c00112ab:	5a                   	pop    edx
c00112ac:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00112b0:	52                   	push   edx
c00112b1:	31 d2                	xor    edx,edx
c00112b3:	57                   	push   edi
c00112b4:	52                   	push   edx
c00112b5:	50                   	push   eax
c00112b6:	56                   	push   esi
c00112b7:	ff d3                	call   ebx
c00112b9:	83 c4 14             	add    esp,0x14
c00112bc:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00112c0:	ff 70 24             	push   DWORD PTR [eax+0x24]
c00112c3:	e8 f0 30 00 00       	call   c00143b8 <terminateTask(int)>
c00112c8:	83 c4 40             	add    esp,0x40
c00112cb:	b8 ef be ad de       	mov    eax,0xdeadbeef
c00112d0:	5b                   	pop    ebx
c00112d1:	31 d2                	xor    edx,edx
c00112d3:	5e                   	pop    esi
c00112d4:	5f                   	pop    edi
c00112d5:	c3                   	ret    

c00112d6 <Sys::yield(regs*)>:
c00112d6:	83 ec 0c             	sub    esp,0xc
c00112d9:	fa                   	cli    
c00112da:	ff 05 08 3d 02 c0    	inc    DWORD PTR ds:0xc0023d08
c00112e0:	e8 af 27 00 00       	call   c0013a94 <schedule()>
c00112e5:	a1 08 3d 02 c0       	mov    eax,ds:0xc0023d08
c00112ea:	48                   	dec    eax
c00112eb:	a3 08 3d 02 c0       	mov    ds:0xc0023d08,eax
c00112f0:	75 01                	jne    c00112f3 <Sys::yield(regs*)+0x1d>
c00112f2:	fb                   	sti    
c00112f3:	31 c0                	xor    eax,eax
c00112f5:	31 d2                	xor    edx,edx
c00112f7:	83 c4 0c             	add    esp,0xc
c00112fa:	c3                   	ret    

c00112fb <sysCallSeekDir(regs*)>:
c00112fb:	31 c0                	xor    eax,eax
c00112fd:	31 d2                	xor    edx,edx
c00112ff:	c3                   	ret    

c0011300 <sysCallTellDir(regs*)>:
c0011300:	31 c0                	xor    eax,eax
c0011302:	31 d2                	xor    edx,edx
c0011304:	c3                   	ret    

c0011305 <sysCallVerify(regs*)>:
c0011305:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011309:	31 d2                	xor    edx,edx
c001130b:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001130e:	c3                   	ret    

c001130f <sysCallGetArgc(regs*)>:
c001130f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011314:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011317:	8b 80 16 05 00 00    	mov    eax,DWORD PTR [eax+0x516]
c001131d:	99                   	cdq    
c001131e:	c3                   	ret    

c001131f <sysCallTTYName(regs*)>:
c001131f:	b8 01 00 00 00       	mov    eax,0x1
c0011324:	31 d2                	xor    edx,edx
c0011326:	c3                   	ret    

c0011327 <sysFormatDisk(regs*)>:
c0011327:	56                   	push   esi
c0011328:	53                   	push   ebx
c0011329:	50                   	push   eax
c001132a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001132e:	8b 1d 34 09 02 c0    	mov    ebx,DWORD PTR ds:0xc0020934
c0011334:	eb 28                	jmp    c001135e <sysFormatDisk(regs*)+0x37>
c0011336:	83 ec 0c             	sub    esp,0xc
c0011339:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001133c:	8b 4e 28             	mov    ecx,DWORD PTR [esi+0x28]
c001133f:	8b 13                	mov    edx,DWORD PTR [ebx]
c0011341:	51                   	push   ecx
c0011342:	8b 4e 24             	mov    ecx,DWORD PTR [esi+0x24]
c0011345:	51                   	push   ecx
c0011346:	50                   	push   eax
c0011347:	8b 04 85 a0 2d 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd260]
c001134e:	50                   	push   eax
c001134f:	53                   	push   ebx
c0011350:	ff 52 48             	call   DWORD PTR [edx+0x48]
c0011353:	83 c4 20             	add    esp,0x20
c0011356:	83 f8 08             	cmp    eax,0x8
c0011359:	75 12                	jne    c001136d <sysFormatDisk(regs*)+0x46>
c001135b:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c001135e:	85 db                	test   ebx,ebx
c0011360:	75 d4                	jne    c0011336 <sysFormatDisk(regs*)+0xf>
c0011362:	59                   	pop    ecx
c0011363:	b8 03 00 00 00       	mov    eax,0x3
c0011368:	31 d2                	xor    edx,edx
c001136a:	5b                   	pop    ebx
c001136b:	5e                   	pop    esi
c001136c:	c3                   	ret    
c001136d:	85 c0                	test   eax,eax
c001136f:	74 1b                	je     c001138c <sysFormatDisk(regs*)+0x65>
c0011371:	83 f8 09             	cmp    eax,0x9
c0011374:	74 0b                	je     c0011381 <sysFormatDisk(regs*)+0x5a>
c0011376:	59                   	pop    ecx
c0011377:	b8 02 00 00 00       	mov    eax,0x2
c001137c:	31 d2                	xor    edx,edx
c001137e:	5b                   	pop    ebx
c001137f:	5e                   	pop    esi
c0011380:	c3                   	ret    
c0011381:	59                   	pop    ecx
c0011382:	b8 01 00 00 00       	mov    eax,0x1
c0011387:	31 d2                	xor    edx,edx
c0011389:	5b                   	pop    ebx
c001138a:	5e                   	pop    esi
c001138b:	c3                   	ret    
c001138c:	59                   	pop    ecx
c001138d:	31 c0                	xor    eax,eax
c001138f:	31 d2                	xor    edx,edx
c0011391:	5b                   	pop    ebx
c0011392:	5e                   	pop    esi
c0011393:	c3                   	ret    

c0011394 <sysSetDiskVolumeLabel(regs*)>:
c0011394:	56                   	push   esi
c0011395:	53                   	push   ebx
c0011396:	53                   	push   ebx
c0011397:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001139b:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001139e:	83 f8 19             	cmp    eax,0x19
c00113a1:	77 2d                	ja     c00113d0 <sysSetDiskVolumeLabel(regs*)+0x3c>
c00113a3:	8b 0c 85 a0 2d 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdd260]
c00113aa:	85 c9                	test   ecx,ecx
c00113ac:	74 22                	je     c00113d0 <sysSetDiskVolumeLabel(regs*)+0x3c>
c00113ae:	8b 5a 24             	mov    ebx,DWORD PTR [edx+0x24]
c00113b1:	85 db                	test   ebx,ebx
c00113b3:	74 1b                	je     c00113d0 <sysSetDiskVolumeLabel(regs*)+0x3c>
c00113b5:	8b 91 70 01 00 00    	mov    edx,DWORD PTR [ecx+0x170]
c00113bb:	85 d2                	test   edx,edx
c00113bd:	74 11                	je     c00113d0 <sysSetDiskVolumeLabel(regs*)+0x3c>
c00113bf:	8b 32                	mov    esi,DWORD PTR [edx]
c00113c1:	53                   	push   ebx
c00113c2:	50                   	push   eax
c00113c3:	51                   	push   ecx
c00113c4:	52                   	push   edx
c00113c5:	ff 56 58             	call   DWORD PTR [esi+0x58]
c00113c8:	83 c4 10             	add    esp,0x10
c00113cb:	99                   	cdq    
c00113cc:	59                   	pop    ecx
c00113cd:	5b                   	pop    ebx
c00113ce:	5e                   	pop    esi
c00113cf:	c3                   	ret    
c00113d0:	59                   	pop    ecx
c00113d1:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c00113d6:	ba ff ff ff ff       	mov    edx,0xffffffff
c00113db:	5b                   	pop    ebx
c00113dc:	5e                   	pop    esi
c00113dd:	c3                   	ret    

c00113de <sysGetDiskVolumeLabel(regs*)>:
c00113de:	57                   	push   edi
c00113df:	56                   	push   esi
c00113e0:	53                   	push   ebx
c00113e1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00113e5:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c00113e8:	83 fa 19             	cmp    edx,0x19
c00113eb:	77 38                	ja     c0011425 <sysGetDiskVolumeLabel(regs*)+0x47>
c00113ed:	8b 0c 95 a0 2d 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffdd260]
c00113f4:	85 c9                	test   ecx,ecx
c00113f6:	74 2d                	je     c0011425 <sysGetDiskVolumeLabel(regs*)+0x47>
c00113f8:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c00113fb:	85 db                	test   ebx,ebx
c00113fd:	74 26                	je     c0011425 <sysGetDiskVolumeLabel(regs*)+0x47>
c00113ff:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0011402:	85 f6                	test   esi,esi
c0011404:	74 1f                	je     c0011425 <sysGetDiskVolumeLabel(regs*)+0x47>
c0011406:	8b 81 70 01 00 00    	mov    eax,DWORD PTR [ecx+0x170]
c001140c:	85 c0                	test   eax,eax
c001140e:	74 15                	je     c0011425 <sysGetDiskVolumeLabel(regs*)+0x47>
c0011410:	83 ec 0c             	sub    esp,0xc
c0011413:	8b 38                	mov    edi,DWORD PTR [eax]
c0011415:	56                   	push   esi
c0011416:	53                   	push   ebx
c0011417:	52                   	push   edx
c0011418:	51                   	push   ecx
c0011419:	50                   	push   eax
c001141a:	ff 57 54             	call   DWORD PTR [edi+0x54]
c001141d:	83 c4 20             	add    esp,0x20
c0011420:	99                   	cdq    
c0011421:	5b                   	pop    ebx
c0011422:	5e                   	pop    esi
c0011423:	5f                   	pop    edi
c0011424:	c3                   	ret    
c0011425:	5b                   	pop    ebx
c0011426:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001142b:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011430:	5e                   	pop    esi
c0011431:	5f                   	pop    edi
c0011432:	c3                   	ret    

c0011433 <sysShutdown(regs*)>:
c0011433:	83 ec 0c             	sub    esp,0xc
c0011436:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001143a:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001143d:	85 c0                	test   eax,eax
c001143f:	74 18                	je     c0011459 <sysShutdown(regs*)+0x26>
c0011441:	83 f8 01             	cmp    eax,0x1
c0011444:	74 38                	je     c001147e <sysShutdown(regs*)+0x4b>
c0011446:	83 f8 02             	cmp    eax,0x2
c0011449:	74 24                	je     c001146f <sysShutdown(regs*)+0x3c>
c001144b:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011450:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011455:	83 c4 0c             	add    esp,0xc
c0011458:	c3                   	ret    
c0011459:	a1 44 08 02 c0       	mov    eax,ds:0xc0020844
c001145e:	8b 10                	mov    edx,DWORD PTR [eax]
c0011460:	6a 00                	push   0x0
c0011462:	6a 00                	push   0x0
c0011464:	6a 00                	push   0x0
c0011466:	50                   	push   eax
c0011467:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001146a:	83 c4 10             	add    esp,0x10
c001146d:	eb dc                	jmp    c001144b <sysShutdown(regs*)+0x18>
c001146f:	a1 44 08 02 c0       	mov    eax,ds:0xc0020844
c0011474:	8b 10                	mov    edx,DWORD PTR [eax]
c0011476:	6a 00                	push   0x0
c0011478:	6a 00                	push   0x0
c001147a:	6a 01                	push   0x1
c001147c:	eb e8                	jmp    c0011466 <sysShutdown(regs*)+0x33>
c001147e:	a1 20 2e 02 c0       	mov    eax,ds:0xc0022e20
c0011483:	85 c0                	test   eax,eax
c0011485:	74 02                	je     c0011489 <sysShutdown(regs*)+0x56>
c0011487:	ff d0                	call   eax
c0011489:	31 c0                	xor    eax,eax
c001148b:	31 d2                	xor    edx,edx
c001148d:	83 c4 0c             	add    esp,0xc
c0011490:	c3                   	ret    

c0011491 <sysCallRealpath(regs*)>:
c0011491:	83 ec 0c             	sub    esp,0xc
c0011494:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011498:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c001149b:	85 d2                	test   edx,edx
c001149d:	74 07                	je     c00114a6 <sysCallRealpath(regs*)+0x15>
c001149f:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c00114a2:	85 c0                	test   eax,eax
c00114a4:	75 0b                	jne    c00114b1 <sysCallRealpath(regs*)+0x20>
c00114a6:	b8 01 00 00 00       	mov    eax,0x1
c00114ab:	31 d2                	xor    edx,edx
c00114ad:	83 c4 0c             	add    esp,0xc
c00114b0:	c3                   	ret    
c00114b1:	51                   	push   ecx
c00114b2:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00114b8:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c00114bb:	81 c1 0c 01 00 00    	add    ecx,0x10c
c00114c1:	51                   	push   ecx
c00114c2:	52                   	push   edx
c00114c3:	50                   	push   eax
c00114c4:	e8 f3 9a ff ff       	call   c000afbc <Fs::standardiseFiles(char*, char const*, char const*)>
c00114c9:	83 c4 10             	add    esp,0x10
c00114cc:	31 c0                	xor    eax,eax
c00114ce:	31 d2                	xor    edx,edx
c00114d0:	83 c4 0c             	add    esp,0xc
c00114d3:	c3                   	ret    

c00114d4 <sysCallReadDir(regs*)>:
c00114d4:	53                   	push   ebx
c00114d5:	83 ec 18             	sub    esp,0x18
c00114d8:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00114dc:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00114df:	83 f8 02             	cmp    eax,0x2
c00114e2:	76 61                	jbe    c0011545 <sysCallReadDir(regs*)+0x71>
c00114e4:	81 7b 20 00 ff ff 0f 	cmp    DWORD PTR [ebx+0x20],0xfffff00
c00114eb:	77 49                	ja     c0011536 <sysCallReadDir(regs*)+0x62>
c00114ed:	83 ec 0c             	sub    esp,0xc
c00114f0:	50                   	push   eax
c00114f1:	e8 51 83 ff ff       	call   c0009847 <getFromFileDescriptor(int)>
c00114f6:	83 c4 10             	add    esp,0x10
c00114f9:	85 c0                	test   eax,eax
c00114fb:	74 39                	je     c0011536 <sysCallReadDir(regs*)+0x62>
c00114fd:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011505:	83 ec 0c             	sub    esp,0xc
c0011508:	8b 10                	mov    edx,DWORD PTR [eax]
c001150a:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c001150e:	51                   	push   ecx
c001150f:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0011512:	51                   	push   ecx
c0011513:	6a 00                	push   0x0
c0011515:	68 10 01 00 00       	push   0x110
c001151a:	50                   	push   eax
c001151b:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001151e:	83 c4 20             	add    esp,0x20
c0011521:	85 c0                	test   eax,eax
c0011523:	74 29                	je     c001154e <sysCallReadDir(regs*)+0x7a>
c0011525:	83 f8 07             	cmp    eax,0x7
c0011528:	74 1b                	je     c0011545 <sysCallReadDir(regs*)+0x71>
c001152a:	b8 02 00 00 00       	mov    eax,0x2
c001152f:	31 d2                	xor    edx,edx
c0011531:	83 c4 18             	add    esp,0x18
c0011534:	5b                   	pop    ebx
c0011535:	c3                   	ret    
c0011536:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001153b:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011540:	83 c4 18             	add    esp,0x18
c0011543:	5b                   	pop    ebx
c0011544:	c3                   	ret    
c0011545:	b8 01 00 00 00       	mov    eax,0x1
c001154a:	31 d2                	xor    edx,edx
c001154c:	eb e3                	jmp    c0011531 <sysCallReadDir(regs*)+0x5d>
c001154e:	31 c0                	xor    eax,eax
c0011550:	31 d2                	xor    edx,edx
c0011552:	eb dd                	jmp    c0011531 <sysCallReadDir(regs*)+0x5d>

c0011554 <sysCallIsATTY(regs*)>:
c0011554:	83 ec 0c             	sub    esp,0xc
c0011557:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001155b:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001155e:	83 f8 02             	cmp    eax,0x2
c0011561:	76 07                	jbe    c001156a <sysCallIsATTY(regs*)+0x16>
c0011563:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0011568:	75 28                	jne    c0011592 <sysCallIsATTY(regs*)+0x3e>
c001156a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001156f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011572:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0011578:	85 c0                	test   eax,eax
c001157a:	74 26                	je     c00115a2 <sysCallIsATTY(regs*)+0x4e>
c001157c:	83 ec 0c             	sub    esp,0xc
c001157f:	8b 10                	mov    edx,DWORD PTR [eax]
c0011581:	50                   	push   eax
c0011582:	ff 12                	call   DWORD PTR [edx]
c0011584:	31 d2                	xor    edx,edx
c0011586:	25 ff 00 00 00       	and    eax,0xff
c001158b:	83 c4 10             	add    esp,0x10
c001158e:	83 c4 0c             	add    esp,0xc
c0011591:	c3                   	ret    
c0011592:	83 ec 0c             	sub    esp,0xc
c0011595:	50                   	push   eax
c0011596:	e8 ac 82 ff ff       	call   c0009847 <getFromFileDescriptor(int)>
c001159b:	83 c4 10             	add    esp,0x10
c001159e:	85 c0                	test   eax,eax
c00115a0:	75 da                	jne    c001157c <sysCallIsATTY(regs*)+0x28>
c00115a2:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00115a7:	ba ff ff ff ff       	mov    edx,0xffffffff
c00115ac:	83 c4 0c             	add    esp,0xc
c00115af:	c3                   	ret    

c00115b0 <sysCallSeek(regs*)>:
c00115b0:	53                   	push   ebx
c00115b1:	83 ec 08             	sub    esp,0x8
c00115b4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00115b8:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00115bb:	8d 50 fd             	lea    edx,[eax-0x3]
c00115be:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c00115c4:	77 34                	ja     c00115fa <sysCallSeek(regs*)+0x4a>
c00115c6:	83 ec 0c             	sub    esp,0xc
c00115c9:	50                   	push   eax
c00115ca:	e8 78 82 ff ff       	call   c0009847 <getFromFileDescriptor(int)>
c00115cf:	83 c4 0c             	add    esp,0xc
c00115d2:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c00115d5:	31 db                	xor    ebx,ebx
c00115d7:	53                   	push   ebx
c00115d8:	51                   	push   ecx
c00115d9:	50                   	push   eax
c00115da:	e8 05 9d ff ff       	call   c000b2e4 <File::seek(unsigned long long)>
c00115df:	83 c4 10             	add    esp,0x10
c00115e2:	85 c0                	test   eax,eax
c00115e4:	0f 95 c0             	setne  al
c00115e7:	31 d2                	xor    edx,edx
c00115e9:	25 ff 00 00 00       	and    eax,0xff
c00115ee:	f7 d8                	neg    eax
c00115f0:	83 d2 00             	adc    edx,0x0
c00115f3:	83 c4 08             	add    esp,0x8
c00115f6:	f7 da                	neg    edx
c00115f8:	5b                   	pop    ebx
c00115f9:	c3                   	ret    
c00115fa:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00115ff:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011604:	83 c4 08             	add    esp,0x8
c0011607:	5b                   	pop    ebx
c0011608:	c3                   	ret    

c0011609 <sysCallTell(regs*)>:
c0011609:	53                   	push   ebx
c001160a:	83 ec 08             	sub    esp,0x8
c001160d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011611:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011614:	83 f8 02             	cmp    eax,0x2
c0011617:	76 50                	jbe    c0011669 <sysCallTell(regs*)+0x60>
c0011619:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001161e:	76 19                	jbe    c0011639 <sysCallTell(regs*)+0x30>
c0011620:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0011623:	31 d2                	xor    edx,edx
c0011625:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001162b:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011632:	31 c0                	xor    eax,eax
c0011634:	83 c4 08             	add    esp,0x8
c0011637:	5b                   	pop    ebx
c0011638:	c3                   	ret    
c0011639:	83 ec 0c             	sub    esp,0xc
c001163c:	50                   	push   eax
c001163d:	e8 05 82 ff ff       	call   c0009847 <getFromFileDescriptor(int)>
c0011642:	5a                   	pop    edx
c0011643:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c0011646:	59                   	pop    ecx
c0011647:	53                   	push   ebx
c0011648:	50                   	push   eax
c0011649:	e8 ec 9c ff ff       	call   c000b33a <File::tell(unsigned long long*)>
c001164e:	83 c4 10             	add    esp,0x10
c0011651:	85 c0                	test   eax,eax
c0011653:	0f 95 c0             	setne  al
c0011656:	31 d2                	xor    edx,edx
c0011658:	25 ff 00 00 00       	and    eax,0xff
c001165d:	f7 d8                	neg    eax
c001165f:	83 d2 00             	adc    edx,0x0
c0011662:	83 c4 08             	add    esp,0x8
c0011665:	f7 da                	neg    edx
c0011667:	5b                   	pop    ebx
c0011668:	c3                   	ret    
c0011669:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001166e:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011673:	83 c4 08             	add    esp,0x8
c0011676:	5b                   	pop    ebx
c0011677:	c3                   	ret    

c0011678 <sysCallSize(regs*)>:
c0011678:	53                   	push   ebx
c0011679:	83 ec 18             	sub    esp,0x18
c001167c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011680:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011683:	83 f8 02             	cmp    eax,0x2
c0011686:	76 56                	jbe    c00116de <sysCallSize(regs*)+0x66>
c0011688:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001168d:	76 19                	jbe    c00116a8 <sysCallSize(regs*)+0x30>
c001168f:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0011692:	31 d2                	xor    edx,edx
c0011694:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001169a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00116a1:	31 c0                	xor    eax,eax
c00116a3:	83 c4 18             	add    esp,0x18
c00116a6:	5b                   	pop    ebx
c00116a7:	c3                   	ret    
c00116a8:	83 ec 0c             	sub    esp,0xc
c00116ab:	50                   	push   eax
c00116ac:	e8 96 81 ff ff       	call   c0009847 <getFromFileDescriptor(int)>
c00116b1:	83 c4 0c             	add    esp,0xc
c00116b4:	8d 54 24 13          	lea    edx,[esp+0x13]
c00116b8:	52                   	push   edx
c00116b9:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00116bc:	52                   	push   edx
c00116bd:	50                   	push   eax
c00116be:	e8 0f 9e ff ff       	call   c000b4d2 <File::stat(unsigned long long*, bool*)>
c00116c3:	83 c4 10             	add    esp,0x10
c00116c6:	85 c0                	test   eax,eax
c00116c8:	0f 95 c0             	setne  al
c00116cb:	31 d2                	xor    edx,edx
c00116cd:	25 ff 00 00 00       	and    eax,0xff
c00116d2:	f7 d8                	neg    eax
c00116d4:	83 d2 00             	adc    edx,0x0
c00116d7:	83 c4 18             	add    esp,0x18
c00116da:	f7 da                	neg    edx
c00116dc:	5b                   	pop    ebx
c00116dd:	c3                   	ret    
c00116de:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00116e3:	ba ff ff ff ff       	mov    edx,0xffffffff
c00116e8:	83 c4 18             	add    esp,0x18
c00116eb:	5b                   	pop    ebx
c00116ec:	c3                   	ret    

c00116ed <sysCallSizeFromFilename(regs*)>:
c00116ed:	57                   	push   edi
c00116ee:	56                   	push   esi
c00116ef:	53                   	push   ebx
c00116f0:	83 ec 20             	sub    esp,0x20
c00116f3:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00116f7:	8b 5e 20             	mov    ebx,DWORD PTR [esi+0x20]
c00116fa:	83 fb 02             	cmp    ebx,0x2
c00116fd:	0f 86 8c 00 00 00    	jbe    c001178f <sysCallSizeFromFilename(regs*)+0xa2>
c0011703:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c0011709:	76 1b                	jbe    c0011726 <sysCallSizeFromFilename(regs*)+0x39>
c001170b:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001170e:	31 d2                	xor    edx,edx
c0011710:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0011716:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001171d:	83 c4 20             	add    esp,0x20
c0011720:	31 c0                	xor    eax,eax
c0011722:	5b                   	pop    ebx
c0011723:	5e                   	pop    esi
c0011724:	5f                   	pop    edi
c0011725:	c3                   	ret    
c0011726:	83 ec 0c             	sub    esp,0xc
c0011729:	68 14 01 00 00       	push   0x114
c001172e:	e8 2e 67 ff ff       	call   c0007e61 <malloc>
c0011733:	83 c4 0c             	add    esp,0xc
c0011736:	89 c7                	mov    edi,eax
c0011738:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001173d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011740:	50                   	push   eax
c0011741:	53                   	push   ebx
c0011742:	57                   	push   edi
c0011743:	e8 1e 9a ff ff       	call   c000b166 <File::File(char const*, Process*)>
c0011748:	83 c4 0c             	add    esp,0xc
c001174b:	8d 44 24 23          	lea    eax,[esp+0x23]
c001174f:	50                   	push   eax
c0011750:	8b 56 28             	mov    edx,DWORD PTR [esi+0x28]
c0011753:	52                   	push   edx
c0011754:	57                   	push   edi
c0011755:	e8 78 9d ff ff       	call   c000b4d2 <File::stat(unsigned long long*, bool*)>
c001175a:	83 c4 10             	add    esp,0x10
c001175d:	85 ff                	test   edi,edi
c001175f:	74 14                	je     c0011775 <sysCallSizeFromFilename(regs*)+0x88>
c0011761:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011765:	8b 17                	mov    edx,DWORD PTR [edi]
c0011767:	83 ec 0c             	sub    esp,0xc
c001176a:	57                   	push   edi
c001176b:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001176e:	83 c4 10             	add    esp,0x10
c0011771:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011775:	85 c0                	test   eax,eax
c0011777:	0f 95 c0             	setne  al
c001177a:	31 d2                	xor    edx,edx
c001177c:	25 ff 00 00 00       	and    eax,0xff
c0011781:	f7 d8                	neg    eax
c0011783:	83 d2 00             	adc    edx,0x0
c0011786:	83 c4 20             	add    esp,0x20
c0011789:	f7 da                	neg    edx
c001178b:	5b                   	pop    ebx
c001178c:	5e                   	pop    esi
c001178d:	5f                   	pop    edi
c001178e:	c3                   	ret    
c001178f:	83 c4 20             	add    esp,0x20
c0011792:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011797:	5b                   	pop    ebx
c0011798:	ba ff ff ff ff       	mov    edx,0xffffffff
c001179d:	5e                   	pop    esi
c001179e:	5f                   	pop    edi
c001179f:	c3                   	ret    

c00117a0 <sysCallClose(regs*)>:
c00117a0:	53                   	push   ebx
c00117a1:	83 ec 08             	sub    esp,0x8
c00117a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00117a8:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00117ab:	83 f8 02             	cmp    eax,0x2
c00117ae:	76 41                	jbe    c00117f1 <sysCallClose(regs*)+0x51>
c00117b0:	8d 90 00 01 00 f0    	lea    edx,[eax-0xfffff00]
c00117b6:	83 fa 01             	cmp    edx,0x1
c00117b9:	76 2d                	jbe    c00117e8 <sysCallClose(regs*)+0x48>
c00117bb:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00117c0:	77 2f                	ja     c00117f1 <sysCallClose(regs*)+0x51>
c00117c2:	83 ec 0c             	sub    esp,0xc
c00117c5:	50                   	push   eax
c00117c6:	e8 7c 80 ff ff       	call   c0009847 <getFromFileDescriptor(int)>
c00117cb:	89 c3                	mov    ebx,eax
c00117cd:	89 04 24             	mov    DWORD PTR [esp],eax
c00117d0:	e8 af 9a ff ff       	call   c000b284 <File::close()>
c00117d5:	83 c4 10             	add    esp,0x10
c00117d8:	85 db                	test   ebx,ebx
c00117da:	74 0c                	je     c00117e8 <sysCallClose(regs*)+0x48>
c00117dc:	83 ec 0c             	sub    esp,0xc
c00117df:	8b 03                	mov    eax,DWORD PTR [ebx]
c00117e1:	53                   	push   ebx
c00117e2:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00117e5:	83 c4 10             	add    esp,0x10
c00117e8:	31 c0                	xor    eax,eax
c00117ea:	31 d2                	xor    edx,edx
c00117ec:	83 c4 08             	add    esp,0x8
c00117ef:	5b                   	pop    ebx
c00117f0:	c3                   	ret    
c00117f1:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00117f6:	ba ff ff ff ff       	mov    edx,0xffffffff
c00117fb:	83 c4 08             	add    esp,0x8
c00117fe:	5b                   	pop    ebx
c00117ff:	c3                   	ret    

c0011800 <sysCallOpenDir(regs*)>:
c0011800:	56                   	push   esi
c0011801:	53                   	push   ebx
c0011802:	50                   	push   eax
c0011803:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011807:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001180a:	85 c0                	test   eax,eax
c001180c:	74 5b                	je     c0011869 <sysCallOpenDir(regs*)+0x69>
c001180e:	83 ec 0c             	sub    esp,0xc
c0011811:	68 14 01 00 00       	push   0x114
c0011816:	e8 46 66 ff ff       	call   c0007e61 <malloc>
c001181b:	83 c4 0c             	add    esp,0xc
c001181e:	89 c6                	mov    esi,eax
c0011820:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011825:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011828:	50                   	push   eax
c0011829:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001182c:	50                   	push   eax
c001182d:	56                   	push   esi
c001182e:	e8 5d 9e ff ff       	call   c000b690 <Directory::Directory(char const*, Process*)>
c0011833:	83 c4 10             	add    esp,0x10
c0011836:	85 f6                	test   esi,esi
c0011838:	74 2f                	je     c0011869 <sysCallOpenDir(regs*)+0x69>
c001183a:	83 ec 0c             	sub    esp,0xc
c001183d:	56                   	push   esi
c001183e:	e8 0d 9f ff ff       	call   c000b750 <Directory::open()>
c0011843:	83 c4 10             	add    esp,0x10
c0011846:	85 c0                	test   eax,eax
c0011848:	75 1f                	jne    c0011869 <sysCallOpenDir(regs*)+0x69>
c001184a:	83 ec 0c             	sub    esp,0xc
c001184d:	56                   	push   esi
c001184e:	e8 ff 7c ff ff       	call   c0009552 <UnixFile::getFileDescriptor()>
c0011853:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0011856:	83 c4 10             	add    esp,0x10
c0011859:	89 02                	mov    DWORD PTR [edx],eax
c001185b:	c1 f8 1f             	sar    eax,0x1f
c001185e:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0011861:	31 c0                	xor    eax,eax
c0011863:	59                   	pop    ecx
c0011864:	31 d2                	xor    edx,edx
c0011866:	5b                   	pop    ebx
c0011867:	5e                   	pop    esi
c0011868:	c3                   	ret    
c0011869:	59                   	pop    ecx
c001186a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001186f:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011874:	5b                   	pop    ebx
c0011875:	5e                   	pop    esi
c0011876:	c3                   	ret    

c0011877 <sysCallCloseDir(regs*)>:
c0011877:	53                   	push   ebx
c0011878:	83 ec 08             	sub    esp,0x8
c001187b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001187f:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011882:	8d 50 fd             	lea    edx,[eax-0x3]
c0011885:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c001188b:	77 2f                	ja     c00118bc <sysCallCloseDir(regs*)+0x45>
c001188d:	83 ec 0c             	sub    esp,0xc
c0011890:	50                   	push   eax
c0011891:	e8 b1 7f ff ff       	call   c0009847 <getFromFileDescriptor(int)>
c0011896:	89 c3                	mov    ebx,eax
c0011898:	89 04 24             	mov    DWORD PTR [esp],eax
c001189b:	e8 0c 9f ff ff       	call   c000b7ac <Directory::close()>
c00118a0:	83 c4 10             	add    esp,0x10
c00118a3:	85 db                	test   ebx,ebx
c00118a5:	74 0c                	je     c00118b3 <sysCallCloseDir(regs*)+0x3c>
c00118a7:	83 ec 0c             	sub    esp,0xc
c00118aa:	8b 03                	mov    eax,DWORD PTR [ebx]
c00118ac:	53                   	push   ebx
c00118ad:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00118b0:	83 c4 10             	add    esp,0x10
c00118b3:	31 c0                	xor    eax,eax
c00118b5:	31 d2                	xor    edx,edx
c00118b7:	83 c4 08             	add    esp,0x8
c00118ba:	5b                   	pop    ebx
c00118bb:	c3                   	ret    
c00118bc:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00118c1:	ba ff ff ff ff       	mov    edx,0xffffffff
c00118c6:	83 c4 08             	add    esp,0x8
c00118c9:	5b                   	pop    ebx
c00118ca:	c3                   	ret    

c00118cb <sysCallMakeDir(regs*)>:
c00118cb:	56                   	push   esi
c00118cc:	53                   	push   ebx
c00118cd:	83 ec 10             	sub    esp,0x10
c00118d0:	68 14 01 00 00       	push   0x114
c00118d5:	e8 87 65 ff ff       	call   c0007e61 <malloc>
c00118da:	83 c4 0c             	add    esp,0xc
c00118dd:	89 c3                	mov    ebx,eax
c00118df:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00118e4:	8b 70 3c             	mov    esi,DWORD PTR [eax+0x3c]
c00118e7:	56                   	push   esi
c00118e8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00118ec:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c00118ef:	50                   	push   eax
c00118f0:	53                   	push   ebx
c00118f1:	e8 9a 9d ff ff       	call   c000b690 <Directory::Directory(char const*, Process*)>
c00118f6:	83 c4 10             	add    esp,0x10
c00118f9:	85 db                	test   ebx,ebx
c00118fb:	74 32                	je     c001192f <sysCallMakeDir(regs*)+0x64>
c00118fd:	83 ec 0c             	sub    esp,0xc
c0011900:	53                   	push   ebx
c0011901:	e8 2a a0 ff ff       	call   c000b930 <Directory::create()>
c0011906:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011909:	89 c6                	mov    esi,eax
c001190b:	e8 9c 9e ff ff       	call   c000b7ac <Directory::close()>
c0011910:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011912:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011915:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011918:	83 c4 10             	add    esp,0x10
c001191b:	31 c0                	xor    eax,eax
c001191d:	59                   	pop    ecx
c001191e:	85 f6                	test   esi,esi
c0011920:	5b                   	pop    ebx
c0011921:	0f 95 c0             	setne  al
c0011924:	5e                   	pop    esi
c0011925:	31 d2                	xor    edx,edx
c0011927:	f7 d8                	neg    eax
c0011929:	83 d2 00             	adc    edx,0x0
c001192c:	f7 da                	neg    edx
c001192e:	c3                   	ret    
c001192f:	59                   	pop    ecx
c0011930:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011935:	ba ff ff ff ff       	mov    edx,0xffffffff
c001193a:	5b                   	pop    ebx
c001193b:	5e                   	pop    esi
c001193c:	c3                   	ret    

c001193d <sysCallWait(regs*)>:
c001193d:	83 ec 10             	sub    esp,0x10
c0011940:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011944:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0011947:	52                   	push   edx
c0011948:	8b 48 24             	mov    ecx,DWORD PTR [eax+0x24]
c001194b:	51                   	push   ecx
c001194c:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001194f:	50                   	push   eax
c0011950:	e8 6b 23 00 00       	call   c0013cc0 <waitTask(int, int*, int)>
c0011955:	83 c4 1c             	add    esp,0x1c
c0011958:	99                   	cdq    
c0011959:	c3                   	ret    

c001195a <sysCallNotImpl(regs*)>:
c001195a:	83 ec 18             	sub    esp,0x18
c001195d:	68 69 e7 01 c0       	push   0xc001e769
c0011962:	e8 d8 ed ff ff       	call   c001073f <Krnl::panic(char const*)>
c0011967:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001196c:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011971:	83 c4 1c             	add    esp,0x1c
c0011974:	c3                   	ret    

c0011975 <sysPanic(regs*)>:
c0011975:	83 ec 18             	sub    esp,0x18
c0011978:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001197c:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001197f:	50                   	push   eax
c0011980:	e8 ba ed ff ff       	call   c001073f <Krnl::panic(char const*)>
c0011985:	b8 01 00 00 00       	mov    eax,0x1
c001198a:	31 d2                	xor    edx,edx
c001198c:	83 c4 1c             	add    esp,0x1c
c001198f:	c3                   	ret    

c0011990 <sysCallRmdir(regs*)>:
c0011990:	56                   	push   esi
c0011991:	53                   	push   ebx
c0011992:	83 ec 20             	sub    esp,0x20
c0011995:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011999:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001199c:	68 14 01 00 00       	push   0x114
c00119a1:	e8 bb 64 ff ff       	call   c0007e61 <malloc>
c00119a6:	83 c4 0c             	add    esp,0xc
c00119a9:	89 c3                	mov    ebx,eax
c00119ab:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00119b0:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00119b3:	50                   	push   eax
c00119b4:	56                   	push   esi
c00119b5:	53                   	push   ebx
c00119b6:	e8 ab 97 ff ff       	call   c000b166 <File::File(char const*, Process*)>
c00119bb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00119be:	e8 db 99 ff ff       	call   c000b39e <File::unlink()>
c00119c3:	83 c4 10             	add    esp,0x10
c00119c6:	85 db                	test   ebx,ebx
c00119c8:	74 14                	je     c00119de <sysCallRmdir(regs*)+0x4e>
c00119ca:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00119ce:	8b 13                	mov    edx,DWORD PTR [ebx]
c00119d0:	83 ec 0c             	sub    esp,0xc
c00119d3:	53                   	push   ebx
c00119d4:	ff 52 08             	call   DWORD PTR [edx+0x8]
c00119d7:	83 c4 10             	add    esp,0x10
c00119da:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00119de:	85 c0                	test   eax,eax
c00119e0:	0f 95 c0             	setne  al
c00119e3:	31 d2                	xor    edx,edx
c00119e5:	25 ff 00 00 00       	and    eax,0xff
c00119ea:	f7 d8                	neg    eax
c00119ec:	83 d2 00             	adc    edx,0x0
c00119ef:	83 c4 14             	add    esp,0x14
c00119f2:	f7 da                	neg    edx
c00119f4:	5b                   	pop    ebx
c00119f5:	5e                   	pop    esi
c00119f6:	c3                   	ret    

c00119f7 <sysCallUnlink(regs*)>:
c00119f7:	56                   	push   esi
c00119f8:	53                   	push   ebx
c00119f9:	83 ec 20             	sub    esp,0x20
c00119fc:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011a00:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0011a03:	68 14 01 00 00       	push   0x114
c0011a08:	e8 54 64 ff ff       	call   c0007e61 <malloc>
c0011a0d:	83 c4 0c             	add    esp,0xc
c0011a10:	89 c3                	mov    ebx,eax
c0011a12:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011a17:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011a1a:	50                   	push   eax
c0011a1b:	56                   	push   esi
c0011a1c:	53                   	push   ebx
c0011a1d:	e8 44 97 ff ff       	call   c000b166 <File::File(char const*, Process*)>
c0011a22:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011a25:	e8 74 99 ff ff       	call   c000b39e <File::unlink()>
c0011a2a:	83 c4 10             	add    esp,0x10
c0011a2d:	85 db                	test   ebx,ebx
c0011a2f:	74 14                	je     c0011a45 <sysCallUnlink(regs*)+0x4e>
c0011a31:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011a35:	8b 13                	mov    edx,DWORD PTR [ebx]
c0011a37:	83 ec 0c             	sub    esp,0xc
c0011a3a:	53                   	push   ebx
c0011a3b:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0011a3e:	83 c4 10             	add    esp,0x10
c0011a41:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011a45:	85 c0                	test   eax,eax
c0011a47:	0f 95 c0             	setne  al
c0011a4a:	31 d2                	xor    edx,edx
c0011a4c:	25 ff 00 00 00       	and    eax,0xff
c0011a51:	f7 d8                	neg    eax
c0011a53:	83 d2 00             	adc    edx,0x0
c0011a56:	83 c4 14             	add    esp,0x14
c0011a59:	f7 da                	neg    edx
c0011a5b:	5b                   	pop    ebx
c0011a5c:	5e                   	pop    esi
c0011a5d:	c3                   	ret    

c0011a5e <sysCallGetArgv(regs*)>:
c0011a5e:	83 ec 0c             	sub    esp,0xc
c0011a61:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0011a65:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0011a68:	85 c0                	test   eax,eax
c0011a6a:	78 2c                	js     c0011a98 <sysCallGetArgv(regs*)+0x3a>
c0011a6c:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0011a72:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c0011a75:	3b 81 16 05 00 00    	cmp    eax,DWORD PTR [ecx+0x516]
c0011a7b:	7d 1b                	jge    c0011a98 <sysCallGetArgv(regs*)+0x3a>
c0011a7d:	8b 84 81 1a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x51a]
c0011a84:	85 c0                	test   eax,eax
c0011a86:	74 18                	je     c0011aa0 <sysCallGetArgv(regs*)+0x42>
c0011a88:	83 ec 08             	sub    esp,0x8
c0011a8b:	50                   	push   eax
c0011a8c:	8b 42 24             	mov    eax,DWORD PTR [edx+0x24]
c0011a8f:	50                   	push   eax
c0011a90:	e8 8b eb fe ff       	call   c0000620 <strcpy>
c0011a95:	83 c4 10             	add    esp,0x10
c0011a98:	31 c0                	xor    eax,eax
c0011a9a:	31 d2                	xor    edx,edx
c0011a9c:	83 c4 0c             	add    esp,0xc
c0011a9f:	c3                   	ret    
c0011aa0:	b8 01 00 00 00       	mov    eax,0x1
c0011aa5:	31 d2                	xor    edx,edx
c0011aa7:	83 c4 0c             	add    esp,0xc
c0011aaa:	c3                   	ret    

c0011aab <sysCallUSleep(regs*)>:
c0011aab:	83 ec 1c             	sub    esp,0x1c
c0011aae:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0011ab2:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c0011ab5:	8b 51 28             	mov    edx,DWORD PTR [ecx+0x28]
c0011ab8:	6a 00                	push   0x0
c0011aba:	6a 64                	push   0x64
c0011abc:	52                   	push   edx
c0011abd:	50                   	push   eax
c0011abe:	e8 9d a5 00 00       	call   c001c060 <__udivdi3>
c0011ac3:	83 c4 14             	add    esp,0x14
c0011ac6:	50                   	push   eax
c0011ac7:	e8 c8 22 00 00       	call   c0013d94 <milliTenthSleep(unsigned int)>
c0011acc:	31 c0                	xor    eax,eax
c0011ace:	31 d2                	xor    edx,edx
c0011ad0:	83 c4 1c             	add    esp,0x1c
c0011ad3:	c3                   	ret    

c0011ad4 <sysCallSpawn(regs*)>:
c0011ad4:	56                   	push   esi
c0011ad5:	53                   	push   ebx
c0011ad6:	50                   	push   eax
c0011ad7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011adb:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011ade:	85 c0                	test   eax,eax
c0011ae0:	75 08                	jne    c0011aea <sysCallSpawn(regs*)+0x16>
c0011ae2:	59                   	pop    ecx
c0011ae3:	31 c0                	xor    eax,eax
c0011ae5:	31 d2                	xor    edx,edx
c0011ae7:	5b                   	pop    ebx
c0011ae8:	5e                   	pop    esi
c0011ae9:	c3                   	ret    
c0011aea:	83 ec 0c             	sub    esp,0xc
c0011aed:	68 1f 07 00 00       	push   0x71f
c0011af2:	e8 6a 63 ff ff       	call   c0007e61 <malloc>
c0011af7:	83 c4 10             	add    esp,0x10
c0011afa:	89 c6                	mov    esi,eax
c0011afc:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0011aff:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011b02:	85 c0                	test   eax,eax
c0011b04:	75 33                	jne    c0011b39 <sysCallSpawn(regs*)+0x65>
c0011b06:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011b0b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011b0e:	52                   	push   edx
c0011b0f:	50                   	push   eax
c0011b10:	8b 5b 24             	mov    ebx,DWORD PTR [ebx+0x24]
c0011b13:	53                   	push   ebx
c0011b14:	56                   	push   esi
c0011b15:	e8 5e 19 00 00       	call   c0013478 <Process::Process(char const*, Process*, char**)>
c0011b1a:	83 c4 10             	add    esp,0x10
c0011b1d:	80 be 1e 07 00 00 00 	cmp    BYTE PTR [esi+0x71e],0x0
c0011b24:	75 bc                	jne    c0011ae2 <sysCallSpawn(regs*)+0xe>
c0011b26:	83 ec 0c             	sub    esp,0xc
c0011b29:	56                   	push   esi
c0011b2a:	e8 3d 1e 00 00       	call   c001396c <Process::createUserThread()>
c0011b2f:	8b 06                	mov    eax,DWORD PTR [esi]
c0011b31:	83 c4 10             	add    esp,0x10
c0011b34:	99                   	cdq    
c0011b35:	59                   	pop    ecx
c0011b36:	5b                   	pop    ebx
c0011b37:	5e                   	pop    esi
c0011b38:	c3                   	ret    
c0011b39:	31 c0                	xor    eax,eax
c0011b3b:	eb d1                	jmp    c0011b0e <sysCallSpawn(regs*)+0x3a>

c0011b3d <sysCallGetEnv(regs*)>:
c0011b3d:	57                   	push   edi
c0011b3e:	56                   	push   esi
c0011b3f:	53                   	push   ebx
c0011b40:	83 ec 1c             	sub    esp,0x1c
c0011b43:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0011b47:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011b4c:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0011b4f:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0011b52:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011b55:	50                   	push   eax
c0011b56:	e8 30 eb ff ff       	call   c001068b <Krnl::getProcessTotalEnvCount(Process*)>
c0011b5b:	83 c4 10             	add    esp,0x10
c0011b5e:	39 c7                	cmp    edi,eax
c0011b60:	7c 14                	jl     c0011b76 <sysCallGetEnv(regs*)+0x39>
c0011b62:	85 f6                	test   esi,esi
c0011b64:	75 0b                	jne    c0011b71 <sysCallGetEnv(regs*)+0x34>
c0011b66:	83 c4 10             	add    esp,0x10
c0011b69:	31 c0                	xor    eax,eax
c0011b6b:	5b                   	pop    ebx
c0011b6c:	31 d2                	xor    edx,edx
c0011b6e:	5e                   	pop    esi
c0011b6f:	5f                   	pop    edi
c0011b70:	c3                   	ret    
c0011b71:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0011b74:	eb f0                	jmp    c0011b66 <sysCallGetEnv(regs*)+0x29>
c0011b76:	8d 44 24 08          	lea    eax,[esp+0x8]
c0011b7a:	52                   	push   edx
c0011b7b:	57                   	push   edi
c0011b7c:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0011b82:	8b 4a 3c             	mov    ecx,DWORD PTR [edx+0x3c]
c0011b85:	51                   	push   ecx
c0011b86:	50                   	push   eax
c0011b87:	e8 1f eb ff ff       	call   c00106ab <Krnl::getProcessEnvPair(Process*, int)>
c0011b8c:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c0011b8f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011b93:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0011b97:	83 c4 0c             	add    esp,0xc
c0011b9a:	85 db                	test   ebx,ebx
c0011b9c:	75 23                	jne    c0011bc1 <sysCallGetEnv(regs*)+0x84>
c0011b9e:	83 ec 0c             	sub    esp,0xc
c0011ba1:	50                   	push   eax
c0011ba2:	e8 b9 e9 fe ff       	call   c0000560 <strlen>
c0011ba7:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011baa:	89 c3                	mov    ebx,eax
c0011bac:	e8 af e9 fe ff       	call   c0000560 <strlen>
c0011bb1:	31 d2                	xor    edx,edx
c0011bb3:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c0011bb7:	83 c4 10             	add    esp,0x10
c0011bba:	83 c4 10             	add    esp,0x10
c0011bbd:	5b                   	pop    ebx
c0011bbe:	5e                   	pop    esi
c0011bbf:	5f                   	pop    edi
c0011bc0:	c3                   	ret    
c0011bc1:	83 ec 08             	sub    esp,0x8
c0011bc4:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0011bc7:	50                   	push   eax
c0011bc8:	56                   	push   esi
c0011bc9:	e8 52 ea fe ff       	call   c0000620 <strcpy>
c0011bce:	58                   	pop    eax
c0011bcf:	5a                   	pop    edx
c0011bd0:	68 83 e7 01 c0       	push   0xc001e783
c0011bd5:	56                   	push   esi
c0011bd6:	e8 05 ec fe ff       	call   c00007e0 <strcat>
c0011bdb:	59                   	pop    ecx
c0011bdc:	5b                   	pop    ebx
c0011bdd:	57                   	push   edi
c0011bde:	56                   	push   esi
c0011bdf:	e8 fc eb fe ff       	call   c00007e0 <strcat>
c0011be4:	83 c4 10             	add    esp,0x10
c0011be7:	e9 7a ff ff ff       	jmp    c0011b66 <sysCallGetEnv(regs*)+0x29>

c0011bec <sysSetFatAttrib(regs*)>:
c0011bec:	57                   	push   edi
c0011bed:	56                   	push   esi
c0011bee:	53                   	push   ebx
c0011bef:	83 ec 1c             	sub    esp,0x1c
c0011bf2:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0011bf6:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c0011bf9:	68 14 01 00 00       	push   0x114
c0011bfe:	e8 5e 62 ff ff       	call   c0007e61 <malloc>
c0011c03:	83 c4 0c             	add    esp,0xc
c0011c06:	89 c3                	mov    ebx,eax
c0011c08:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011c0d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011c10:	50                   	push   eax
c0011c11:	57                   	push   edi
c0011c12:	53                   	push   ebx
c0011c13:	e8 4e 95 ff ff       	call   c000b166 <File::File(char const*, Process*)>
c0011c18:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0011c1b:	83 c4 0c             	add    esp,0xc
c0011c1e:	0f b6 d4             	movzx  edx,ah
c0011c21:	25 ff 00 00 00       	and    eax,0xff
c0011c26:	52                   	push   edx
c0011c27:	50                   	push   eax
c0011c28:	53                   	push   ebx
c0011c29:	e8 0a 98 ff ff       	call   c000b438 <File::chfatattr(unsigned char, unsigned char)>
c0011c2e:	83 c4 10             	add    esp,0x10
c0011c31:	85 db                	test   ebx,ebx
c0011c33:	74 14                	je     c0011c49 <sysSetFatAttrib(regs*)+0x5d>
c0011c35:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011c39:	8b 13                	mov    edx,DWORD PTR [ebx]
c0011c3b:	83 ec 0c             	sub    esp,0xc
c0011c3e:	53                   	push   ebx
c0011c3f:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0011c42:	83 c4 10             	add    esp,0x10
c0011c45:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011c49:	85 c0                	test   eax,eax
c0011c4b:	0f 95 c0             	setne  al
c0011c4e:	31 d2                	xor    edx,edx
c0011c50:	25 ff 00 00 00       	and    eax,0xff
c0011c55:	f7 d8                	neg    eax
c0011c57:	83 d2 00             	adc    edx,0x0
c0011c5a:	83 c4 10             	add    esp,0x10
c0011c5d:	f7 da                	neg    edx
c0011c5f:	5b                   	pop    ebx
c0011c60:	5e                   	pop    esi
c0011c61:	5f                   	pop    edi
c0011c62:	c3                   	ret    

c0011c63 <sysPipe(regs*)>:
c0011c63:	57                   	push   edi
c0011c64:	56                   	push   esi
c0011c65:	53                   	push   ebx
c0011c66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011c6a:	83 ec 0c             	sub    esp,0xc
c0011c6d:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c0011c70:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0011c73:	6a 20                	push   0x20
c0011c75:	e8 e7 61 ff ff       	call   c0007e61 <malloc>
c0011c7a:	89 c3                	mov    ebx,eax
c0011c7c:	58                   	pop    eax
c0011c7d:	5a                   	pop    edx
c0011c7e:	68 00 50 00 00       	push   0x5000
c0011c83:	53                   	push   ebx
c0011c84:	e8 cf 6b ff ff       	call   c0008858 <Pipe::Pipe(int)>
c0011c89:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011c8c:	e8 c1 78 ff ff       	call   c0009552 <UnixFile::getFileDescriptor()>
c0011c91:	89 07                	mov    DWORD PTR [edi],eax
c0011c93:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011c96:	e8 b7 78 ff ff       	call   c0009552 <UnixFile::getFileDescriptor()>
c0011c9b:	83 c4 10             	add    esp,0x10
c0011c9e:	89 06                	mov    DWORD PTR [esi],eax
c0011ca0:	31 d2                	xor    edx,edx
c0011ca2:	5b                   	pop    ebx
c0011ca3:	31 c0                	xor    eax,eax
c0011ca5:	5e                   	pop    esi
c0011ca6:	5f                   	pop    edi
c0011ca7:	c3                   	ret    

c0011ca8 <sysGetUnixTime(regs*)>:
c0011ca8:	a1 44 08 02 c0       	mov    eax,ds:0xc0020844
c0011cad:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0011cb3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011cb7:	e9 ba 9e ff ff       	jmp    c000bb76 <Clock::timeInSecondsLocal()>

c0011cbc <string_ends_with(char const*, char const*)>:
c0011cbc:	57                   	push   edi
c0011cbd:	56                   	push   esi
c0011cbe:	53                   	push   ebx
c0011cbf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011cc3:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0011cc7:	83 ec 0c             	sub    esp,0xc
c0011cca:	53                   	push   ebx
c0011ccb:	e8 90 e8 fe ff       	call   c0000560 <strlen>
c0011cd0:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011cd3:	89 c6                	mov    esi,eax
c0011cd5:	e8 86 e8 fe ff       	call   c0000560 <strlen>
c0011cda:	83 c4 10             	add    esp,0x10
c0011cdd:	39 c6                	cmp    esi,eax
c0011cdf:	7d 06                	jge    c0011ce7 <string_ends_with(char const*, char const*)+0x2b>
c0011ce1:	5b                   	pop    ebx
c0011ce2:	31 c0                	xor    eax,eax
c0011ce4:	5e                   	pop    esi
c0011ce5:	5f                   	pop    edi
c0011ce6:	c3                   	ret    
c0011ce7:	83 ec 08             	sub    esp,0x8
c0011cea:	29 c6                	sub    esi,eax
c0011cec:	57                   	push   edi
c0011ced:	01 f3                	add    ebx,esi
c0011cef:	53                   	push   ebx
c0011cf0:	e8 0b ea fe ff       	call   c0000700 <strcmp>
c0011cf5:	83 c4 10             	add    esp,0x10
c0011cf8:	85 c0                	test   eax,eax
c0011cfa:	5b                   	pop    ebx
c0011cfb:	0f 94 c0             	sete   al
c0011cfe:	5e                   	pop    esi
c0011cff:	25 ff 00 00 00       	and    eax,0xff
c0011d04:	5f                   	pop    edi
c0011d05:	c3                   	ret    

c0011d06 <sysCallOpen(regs*)>:
c0011d06:	56                   	push   esi
c0011d07:	53                   	push   ebx
c0011d08:	81 ec 04 01 00 00    	sub    esp,0x104
c0011d0e:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c0011d15:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c0011d18:	85 c9                	test   ecx,ecx
c0011d1a:	0f 84 b9 01 00 00    	je     c0011ed9 <sysCallOpen(regs*)+0x1d3>
c0011d20:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011d23:	85 c0                	test   eax,eax
c0011d25:	0f 84 ae 01 00 00    	je     c0011ed9 <sysCallOpen(regs*)+0x1d3>
c0011d2b:	52                   	push   edx
c0011d2c:	68 85 e7 01 c0       	push   0xc001e785
c0011d31:	50                   	push   eax
c0011d32:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0011d36:	56                   	push   esi
c0011d37:	e8 80 92 ff ff       	call   c000afbc <Fs::standardiseFiles(char*, char const*, char const*)>
c0011d3c:	89 34 24             	mov    DWORD PTR [esp],esi
c0011d3f:	e8 1c e8 fe ff       	call   c0000560 <strlen>
c0011d44:	83 c4 10             	add    esp,0x10
c0011d47:	48                   	dec    eax
c0011d48:	74 1d                	je     c0011d67 <sysCallOpen(regs*)+0x61>
c0011d4a:	8a 14 04             	mov    dl,BYTE PTR [esp+eax*1]
c0011d4d:	eb 0f                	jmp    c0011d5e <sysCallOpen(regs*)+0x58>
c0011d4f:	80 fa 3a             	cmp    dl,0x3a
c0011d52:	74 0f                	je     c0011d63 <sysCallOpen(regs*)+0x5d>
c0011d54:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c0011d58:	48                   	dec    eax
c0011d59:	74 0c                	je     c0011d67 <sysCallOpen(regs*)+0x61>
c0011d5b:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c0011d5e:	80 fa 2e             	cmp    dl,0x2e
c0011d61:	75 ec                	jne    c0011d4f <sysCallOpen(regs*)+0x49>
c0011d63:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c0011d67:	83 ec 08             	sub    esp,0x8
c0011d6a:	68 89 e7 01 c0       	push   0xc001e789
c0011d6f:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011d72:	50                   	push   eax
c0011d73:	e8 44 ff ff ff       	call   c0011cbc <string_ends_with(char const*, char const*)>
c0011d78:	83 c4 10             	add    esp,0x10
c0011d7b:	85 c0                	test   eax,eax
c0011d7d:	74 1d                	je     c0011d9c <sysCallOpen(regs*)+0x96>
c0011d7f:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011d82:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c0011d88:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011d8f:	81 c4 04 01 00 00    	add    esp,0x104
c0011d95:	31 c0                	xor    eax,eax
c0011d97:	31 d2                	xor    edx,edx
c0011d99:	5b                   	pop    ebx
c0011d9a:	5e                   	pop    esi
c0011d9b:	c3                   	ret    
c0011d9c:	83 ec 08             	sub    esp,0x8
c0011d9f:	68 8e e7 01 c0       	push   0xc001e78e
c0011da4:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011da7:	50                   	push   eax
c0011da8:	e8 0f ff ff ff       	call   c0011cbc <string_ends_with(char const*, char const*)>
c0011dad:	83 c4 10             	add    esp,0x10
c0011db0:	85 c0                	test   eax,eax
c0011db2:	75 cb                	jne    c0011d7f <sysCallOpen(regs*)+0x79>
c0011db4:	83 ec 08             	sub    esp,0x8
c0011db7:	68 8a e7 01 c0       	push   0xc001e78a
c0011dbc:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011dbf:	50                   	push   eax
c0011dc0:	e8 3b e9 fe ff       	call   c0000700 <strcmp>
c0011dc5:	83 c4 10             	add    esp,0x10
c0011dc8:	85 c0                	test   eax,eax
c0011dca:	74 b3                	je     c0011d7f <sysCallOpen(regs*)+0x79>
c0011dcc:	83 ec 08             	sub    esp,0x8
c0011dcf:	68 89 e7 01 c0       	push   0xc001e789
c0011dd4:	56                   	push   esi
c0011dd5:	e8 e2 fe ff ff       	call   c0011cbc <string_ends_with(char const*, char const*)>
c0011dda:	83 c4 10             	add    esp,0x10
c0011ddd:	85 c0                	test   eax,eax
c0011ddf:	75 9e                	jne    c0011d7f <sysCallOpen(regs*)+0x79>
c0011de1:	83 ec 08             	sub    esp,0x8
c0011de4:	68 93 e7 01 c0       	push   0xc001e793
c0011de9:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011dec:	50                   	push   eax
c0011ded:	e8 ca fe ff ff       	call   c0011cbc <string_ends_with(char const*, char const*)>
c0011df2:	83 c4 10             	add    esp,0x10
c0011df5:	85 c0                	test   eax,eax
c0011df7:	0f 85 ef 00 00 00    	jne    c0011eec <sysCallOpen(regs*)+0x1e6>
c0011dfd:	83 ec 08             	sub    esp,0x8
c0011e00:	68 98 e7 01 c0       	push   0xc001e798
c0011e05:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011e08:	50                   	push   eax
c0011e09:	e8 ae fe ff ff       	call   c0011cbc <string_ends_with(char const*, char const*)>
c0011e0e:	83 c4 10             	add    esp,0x10
c0011e11:	85 c0                	test   eax,eax
c0011e13:	0f 85 d3 00 00 00    	jne    c0011eec <sysCallOpen(regs*)+0x1e6>
c0011e19:	83 ec 08             	sub    esp,0x8
c0011e1c:	68 94 e7 01 c0       	push   0xc001e794
c0011e21:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0011e24:	51                   	push   ecx
c0011e25:	e8 d6 e8 fe ff       	call   c0000700 <strcmp>
c0011e2a:	83 c4 10             	add    esp,0x10
c0011e2d:	85 c0                	test   eax,eax
c0011e2f:	0f 84 b7 00 00 00    	je     c0011eec <sysCallOpen(regs*)+0x1e6>
c0011e35:	83 ec 08             	sub    esp,0x8
c0011e38:	68 93 e7 01 c0       	push   0xc001e793
c0011e3d:	56                   	push   esi
c0011e3e:	e8 79 fe ff ff       	call   c0011cbc <string_ends_with(char const*, char const*)>
c0011e43:	83 c4 10             	add    esp,0x10
c0011e46:	85 c0                	test   eax,eax
c0011e48:	0f 85 9e 00 00 00    	jne    c0011eec <sysCallOpen(regs*)+0x1e6>
c0011e4e:	83 ec 0c             	sub    esp,0xc
c0011e51:	68 14 01 00 00       	push   0x114
c0011e56:	e8 06 60 ff ff       	call   c0007e61 <malloc>
c0011e5b:	83 c4 0c             	add    esp,0xc
c0011e5e:	89 c6                	mov    esi,eax
c0011e60:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011e65:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011e68:	50                   	push   eax
c0011e69:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0011e6c:	52                   	push   edx
c0011e6d:	56                   	push   esi
c0011e6e:	e8 f3 92 ff ff       	call   c000b166 <File::File(char const*, Process*)>
c0011e73:	83 c4 10             	add    esp,0x10
c0011e76:	85 f6                	test   esi,esi
c0011e78:	74 5f                	je     c0011ed9 <sysCallOpen(regs*)+0x1d3>
c0011e7a:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0011e7d:	89 d0                	mov    eax,edx
c0011e7f:	25 ff 00 00 00       	and    eax,0xff
c0011e84:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c0011e87:	89 d0                	mov    eax,edx
c0011e89:	83 e0 01             	and    eax,0x1
c0011e8c:	f6 c2 02             	test   dl,0x2
c0011e8f:	74 03                	je     c0011e94 <sysCallOpen(regs*)+0x18e>
c0011e91:	83 c8 02             	or     eax,0x2
c0011e94:	f6 c2 04             	test   dl,0x4
c0011e97:	74 03                	je     c0011e9c <sysCallOpen(regs*)+0x196>
c0011e99:	83 c8 04             	or     eax,0x4
c0011e9c:	f6 c2 08             	test   dl,0x8
c0011e9f:	74 03                	je     c0011ea4 <sysCallOpen(regs*)+0x19e>
c0011ea1:	83 c8 0a             	or     eax,0xa
c0011ea4:	83 e2 10             	and    edx,0x10
c0011ea7:	74 03                	je     c0011eac <sysCallOpen(regs*)+0x1a6>
c0011ea9:	83 c8 12             	or     eax,0x12
c0011eac:	83 ec 08             	sub    esp,0x8
c0011eaf:	50                   	push   eax
c0011eb0:	56                   	push   esi
c0011eb1:	e8 70 93 ff ff       	call   c000b226 <File::open(FileOpenMode)>
c0011eb6:	83 c4 10             	add    esp,0x10
c0011eb9:	85 c0                	test   eax,eax
c0011ebb:	75 1c                	jne    c0011ed9 <sysCallOpen(regs*)+0x1d3>
c0011ebd:	83 ec 0c             	sub    esp,0xc
c0011ec0:	56                   	push   esi
c0011ec1:	e8 8c 76 ff ff       	call   c0009552 <UnixFile::getFileDescriptor()>
c0011ec6:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0011ec9:	83 c4 10             	add    esp,0x10
c0011ecc:	89 02                	mov    DWORD PTR [edx],eax
c0011ece:	c1 f8 1f             	sar    eax,0x1f
c0011ed1:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0011ed4:	e9 b6 fe ff ff       	jmp    c0011d8f <sysCallOpen(regs*)+0x89>
c0011ed9:	81 c4 04 01 00 00    	add    esp,0x104
c0011edf:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011ee4:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011ee9:	5b                   	pop    ebx
c0011eea:	5e                   	pop    esi
c0011eeb:	c3                   	ret    
c0011eec:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011eef:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c0011ef5:	e9 8e fe ff ff       	jmp    c0011d88 <sysCallOpen(regs*)+0x82>

c0011efa <Sys::loadSyscalls()>:
c0011efa:	c7 05 40 33 02 c0 d6 12 01 c0 	mov    DWORD PTR ds:0xc0023340,0xc00112d6
c0011f04:	c7 05 44 33 02 c0 cd 0e 01 c0 	mov    DWORD PTR ds:0xc0023344,0xc0010ecd
c0011f0e:	c7 05 48 33 02 c0 bc 10 01 c0 	mov    DWORD PTR ds:0xc0023348,0xc00110bc
c0011f18:	c7 05 4c 33 02 c0 0c 12 01 c0 	mov    DWORD PTR ds:0xc002334c,0xc001120c
c0011f22:	c7 05 50 33 02 c0 54 10 01 c0 	mov    DWORD PTR ds:0xc0023350,0xc0011054
c0011f2c:	c7 05 54 33 02 c0 04 0f 01 c0 	mov    DWORD PTR ds:0xc0023354,0xc0010f04
c0011f36:	c7 05 58 33 02 c0 e5 0e 01 c0 	mov    DWORD PTR ds:0xc0023358,0xc0010ee5
c0011f40:	c7 05 5c 33 02 c0 11 11 01 c0 	mov    DWORD PTR ds:0xc002335c,0xc0011111
c0011f4a:	c7 05 64 33 02 c0 a0 17 01 c0 	mov    DWORD PTR ds:0xc0023364,0xc00117a0
c0011f54:	c7 05 60 33 02 c0 06 1d 01 c0 	mov    DWORD PTR ds:0xc0023360,0xc0011d06
c0011f5e:	c7 05 68 33 02 c0 00 18 01 c0 	mov    DWORD PTR ds:0xc0023368,0xc0011800
c0011f68:	c7 05 6c 33 02 c0 d4 14 01 c0 	mov    DWORD PTR ds:0xc002336c,0xc00114d4
c0011f72:	c7 05 70 33 02 c0 fb 12 01 c0 	mov    DWORD PTR ds:0xc0023370,0xc00112fb
c0011f7c:	c7 05 74 33 02 c0 00 13 01 c0 	mov    DWORD PTR ds:0xc0023374,0xc0011300
c0011f86:	c7 05 78 33 02 c0 cb 18 01 c0 	mov    DWORD PTR ds:0xc0023378,0xc00118cb
c0011f90:	c7 05 7c 33 02 c0 77 18 01 c0 	mov    DWORD PTR ds:0xc002337c,0xc0011877
c0011f9a:	c7 05 80 33 02 c0 b0 15 01 c0 	mov    DWORD PTR ds:0xc0023380,0xc00115b0
c0011fa4:	c7 05 84 33 02 c0 09 16 01 c0 	mov    DWORD PTR ds:0xc0023384,0xc0011609
c0011fae:	c7 05 88 33 02 c0 78 16 01 c0 	mov    DWORD PTR ds:0xc0023388,0xc0011678
c0011fb8:	c7 05 8c 33 02 c0 05 13 01 c0 	mov    DWORD PTR ds:0xc002338c,0xc0011305
c0011fc2:	c7 05 90 33 02 c0 3d 19 01 c0 	mov    DWORD PTR ds:0xc0023390,0xc001193d
c0011fcc:	c7 05 94 33 02 c0 5a 19 01 c0 	mov    DWORD PTR ds:0xc0023394,0xc001195a
c0011fd6:	c7 05 98 33 02 c0 5a 19 01 c0 	mov    DWORD PTR ds:0xc0023398,0xc001195a
c0011fe0:	c7 05 9c 33 02 c0 90 19 01 c0 	mov    DWORD PTR ds:0xc002339c,0xc0011990
c0011fea:	c7 05 a0 33 02 c0 f7 19 01 c0 	mov    DWORD PTR ds:0xc00233a0,0xc00119f7
c0011ff4:	c7 05 a4 33 02 c0 0f 13 01 c0 	mov    DWORD PTR ds:0xc00233a4,0xc001130f
c0011ffe:	c7 05 a8 33 02 c0 5e 1a 01 c0 	mov    DWORD PTR ds:0xc00233a8,0xc0011a5e
c0012008:	c7 05 ac 33 02 c0 91 14 01 c0 	mov    DWORD PTR ds:0xc00233ac,0xc0011491
c0012012:	c7 05 b0 33 02 c0 1f 13 01 c0 	mov    DWORD PTR ds:0xc00233b0,0xc001131f
c001201c:	c7 05 b4 33 02 c0 54 15 01 c0 	mov    DWORD PTR ds:0xc00233b4,0xc0011554
c0012026:	c7 05 b8 33 02 c0 ab 1a 01 c0 	mov    DWORD PTR ds:0xc00233b8,0xc0011aab
c0012030:	c7 05 bc 33 02 c0 ed 16 01 c0 	mov    DWORD PTR ds:0xc00233bc,0xc00116ed
c001203a:	c7 05 c0 33 02 c0 d4 1a 01 c0 	mov    DWORD PTR ds:0xc00233c0,0xc0011ad4
c0012044:	c7 05 c4 33 02 c0 3d 1b 01 c0 	mov    DWORD PTR ds:0xc00233c4,0xc0011b3d
c001204e:	c7 05 cc 33 02 c0 27 13 01 c0 	mov    DWORD PTR ds:0xc00233cc,0xc0011327
c0012058:	c7 05 d0 33 02 c0 94 13 01 c0 	mov    DWORD PTR ds:0xc00233d0,0xc0011394
c0012062:	c7 05 d4 33 02 c0 de 13 01 c0 	mov    DWORD PTR ds:0xc00233d4,0xc00113de
c001206c:	c7 05 d8 33 02 c0 ec 1b 01 c0 	mov    DWORD PTR ds:0xc00233d8,0xc0011bec
c0012076:	c7 05 dc 33 02 c0 75 19 01 c0 	mov    DWORD PTR ds:0xc00233dc,0xc0011975
c0012080:	c7 05 e0 33 02 c0 33 14 01 c0 	mov    DWORD PTR ds:0xc00233e0,0xc0011433
c001208a:	c7 05 e4 33 02 c0 63 1c 01 c0 	mov    DWORD PTR ds:0xc00233e4,0xc0011c63
c0012094:	c7 05 e8 33 02 c0 a8 1c 01 c0 	mov    DWORD PTR ds:0xc00233e8,0xc0011ca8
c001209e:	c7 05 ec 33 02 c0 ac 0f 01 c0 	mov    DWORD PTR ds:0xc00233ec,0xc0010fac
c00120a8:	c7 05 f0 33 02 c0 2d 11 01 c0 	mov    DWORD PTR ds:0xc00233f0,0xc001112d
c00120b2:	c7 05 f4 33 02 c0 c2 11 01 c0 	mov    DWORD PTR ds:0xc00233f4,0xc00111c2
c00120bc:	c7 05 f8 33 02 c0 97 0e 01 c0 	mov    DWORD PTR ds:0xc00233f8,0xc0010e97
c00120c6:	c7 05 fc 33 02 c0 74 12 01 c0 	mov    DWORD PTR ds:0xc00233fc,0xc0011274
c00120d0:	c7 05 00 34 02 c0 10 0f 01 c0 	mov    DWORD PTR ds:0xc0023400,0xc0010f10
c00120da:	c7 05 04 34 02 c0 2a 0f 01 c0 	mov    DWORD PTR ds:0xc0023404,0xc0010f2a
c00120e4:	c3                   	ret    

c00120e5 <Sys::systemCall(regs*, void*)>:
c00120e5:	53                   	push   ebx
c00120e6:	83 ec 08             	sub    esp,0x8
c00120e9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00120ed:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00120f0:	83 f8 7f             	cmp    eax,0x7f
c00120f3:	77 16                	ja     c001210b <Sys::systemCall(regs*, void*)+0x26>
c00120f5:	8b 14 85 40 33 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdccc0]
c00120fc:	85 d2                	test   edx,edx
c00120fe:	74 0b                	je     c001210b <Sys::systemCall(regs*, void*)+0x26>
c0012100:	83 ec 0c             	sub    esp,0xc
c0012103:	53                   	push   ebx
c0012104:	ff d2                	call   edx
c0012106:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0012109:	eb 0d                	jmp    c0012118 <Sys::systemCall(regs*, void*)+0x33>
c001210b:	52                   	push   edx
c001210c:	52                   	push   edx
c001210d:	50                   	push   eax
c001210e:	68 9d e7 01 c0       	push   0xc001e79d
c0012113:	e8 d8 8a ff ff       	call   c000abf0 <Dbg::kprintf(char const*, ...)>
c0012118:	83 c4 10             	add    esp,0x10
c001211b:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0012120:	31 d2                	xor    edx,edx
c0012122:	83 c4 08             	add    esp,0x8
c0012125:	5b                   	pop    ebx
c0012126:	c3                   	ret    

c0012127 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c0012127:	55                   	push   ebp
c0012128:	57                   	push   edi
c0012129:	56                   	push   esi
c001212a:	53                   	push   ebx
c001212b:	81 ec 2c 10 00 00    	sub    esp,0x102c
c0012131:	83 bc 24 50 10 00 00 00 	cmp    DWORD PTR [esp+0x1050],0x0
c0012139:	0f 95 c2             	setne  dl
c001213c:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c0012144:	0f 94 c0             	sete   al
c0012147:	84 c2                	test   dl,al
c0012149:	74 34                	je     c001217f <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x58>
c001214b:	f7 84 24 4c 10 00 00 ff 0f 00 00 	test   DWORD PTR [esp+0x104c],0xfff
c0012156:	74 27                	je     c001217f <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x58>
c0012158:	8b 84 24 4c 10 00 00 	mov    eax,DWORD PTR [esp+0x104c]
c001215f:	05 00 10 00 00       	add    eax,0x1000
c0012164:	89 c1                	mov    ecx,eax
c0012166:	25 00 f0 ff ff       	and    eax,0xfffff000
c001216b:	81 c9 00 f0 ff ff    	or     ecx,0xfffff000
c0012171:	89 84 24 4c 10 00 00 	mov    DWORD PTR [esp+0x104c],eax
c0012178:	89 8c 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],ecx
c001217f:	8b 84 24 48 10 00 00 	mov    eax,DWORD PTR [esp+0x1048]
c0012186:	83 ec 0c             	sub    esp,0xc
c0012189:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c001218f:	6a 01                	push   0x1
c0012191:	e8 07 78 ff ff       	call   c000999d <Virt::allocateKernelVirtualPages(int)>
c0012196:	83 c4 10             	add    esp,0x10
c0012199:	89 c3                	mov    ebx,eax
c001219b:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c00121a1:	0f 86 25 01 00 00    	jbe    c00122cc <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1a5>
c00121a7:	c1 ee 0c             	shr    esi,0xc
c00121aa:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c00121b1:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00121b5:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00121bd:	8b bc 24 48 10 00 00 	mov    edi,DWORD PTR [esp+0x1048]
c00121c4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00121c8:	03 bc 24 4c 10 00 00 	add    edi,DWORD PTR [esp+0x104c]
c00121cf:	29 ef                	sub    edi,ebp
c00121d1:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c00121d5:	0f 83 f8 00 00 00    	jae    c00122d3 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1ac>
c00121db:	81 ff 00 10 00 00    	cmp    edi,0x1000
c00121e1:	76 05                	jbe    c00121e8 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xc1>
c00121e3:	bf 00 10 00 00       	mov    edi,0x1000
c00121e8:	83 ec 0c             	sub    esp,0xc
c00121eb:	31 d2                	xor    edx,edx
c00121ed:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c00121f4:	8b 08                	mov    ecx,DWORD PTR [eax]
c00121f6:	8d 44 24 28          	lea    eax,[esp+0x28]
c00121fa:	50                   	push   eax
c00121fb:	8d 74 24 30          	lea    esi,[esp+0x30]
c00121ff:	56                   	push   esi
c0012200:	52                   	push   edx
c0012201:	57                   	push   edi
c0012202:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c0012209:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001220c:	83 c4 20             	add    esp,0x20
c001220f:	85 c0                	test   eax,eax
c0012211:	75 06                	jne    c0012219 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xf2>
c0012213:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0012217:	74 13                	je     c001222c <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x105>
c0012219:	83 ec 0c             	sub    esp,0xc
c001221c:	53                   	push   ebx
c001221d:	e8 ab 7a ff ff       	call   c0009ccd <Virt::freeKernelVirtualPages(unsigned long)>
c0012222:	83 c4 10             	add    esp,0x10
c0012225:	31 c0                	xor    eax,eax
c0012227:	e9 7c 01 00 00       	jmp    c00123a8 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x281>
c001222c:	fa                   	cli    
c001222d:	ff 05 08 3d 02 c0    	inc    DWORD PTR ds:0xc0023d08
c0012233:	e8 f6 5f ff ff       	call   c000822e <Phys::allocatePage()>
c0012238:	6a 07                	push   0x7
c001223a:	89 c7                	mov    edi,eax
c001223c:	53                   	push   ebx
c001223d:	50                   	push   eax
c001223e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012243:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012246:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001224c:	e8 e1 7d ff ff       	call   c000a032 <VAS::mapPage(unsigned long, unsigned long, int)>
c0012251:	83 c4 0c             	add    esp,0xc
c0012254:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c001225b:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0012261:	6a 00                	push   0x0
c0012263:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012268:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001226b:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0012271:	e8 2e 7c ff ff       	call   c0009ea4 <VAS::mapOtherVASIn(bool, VAS*)>
c0012276:	58                   	pop    eax
c0012277:	5a                   	pop    edx
c0012278:	68 07 0c 00 00       	push   0xc07
c001227d:	55                   	push   ebp
c001227e:	57                   	push   edi
c001227f:	89 df                	mov    edi,ebx
c0012281:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c0012288:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001228e:	6a 00                	push   0x0
c0012290:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012295:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012298:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001229e:	e8 4f 81 ff ff       	call   c000a3f2 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c00122a3:	b9 00 10 00 00       	mov    ecx,0x1000
c00122a8:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00122aa:	a1 08 3d 02 c0       	mov    eax,ds:0xc0023d08
c00122af:	83 c4 20             	add    esp,0x20
c00122b2:	48                   	dec    eax
c00122b3:	a3 08 3d 02 c0       	mov    ds:0xc0023d08,eax
c00122b8:	85 c0                	test   eax,eax
c00122ba:	75 01                	jne    c00122bd <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x196>
c00122bc:	fb                   	sti    
c00122bd:	81 c5 00 10 00 00    	add    ebp,0x1000
c00122c3:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c00122c7:	e9 f1 fe ff ff       	jmp    c00121bd <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x96>
c00122cc:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c00122d3:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c00122da:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c00122e0:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c00122e6:	0f 86 ae 00 00 00    	jbe    c001239a <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x273>
c00122ec:	fa                   	cli    
c00122ed:	ff 05 08 3d 02 c0    	inc    DWORD PTR ds:0xc0023d08
c00122f3:	c1 ee 0c             	shr    esi,0xc
c00122f6:	51                   	push   ecx
c00122f7:	31 ff                	xor    edi,edi
c00122f9:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0012300:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0012306:	6a 00                	push   0x0
c0012308:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001230d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012310:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0012316:	e8 89 7b ff ff       	call   c0009ea4 <VAS::mapOtherVASIn(bool, VAS*)>
c001231b:	83 c4 10             	add    esp,0x10
c001231e:	e8 0b 5f ff ff       	call   c000822e <Phys::allocatePage()>
c0012323:	47                   	inc    edi
c0012324:	6a 07                	push   0x7
c0012326:	53                   	push   ebx
c0012327:	50                   	push   eax
c0012328:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001232c:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0012332:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0012335:	ff b2 12 05 00 00    	push   DWORD PTR [edx+0x512]
c001233b:	e8 f2 7c ff ff       	call   c000a032 <VAS::mapPage(unsigned long, unsigned long, int)>
c0012340:	58                   	pop    eax
c0012341:	5a                   	pop    edx
c0012342:	68 07 0c 00 00       	push   0xc07
c0012347:	55                   	push   ebp
c0012348:	81 c5 00 10 00 00    	add    ebp,0x1000
c001234e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012352:	50                   	push   eax
c0012353:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c001235a:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0012360:	6a 00                	push   0x0
c0012362:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012367:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001236a:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0012370:	e8 7d 80 ff ff       	call   c000a3f2 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c0012375:	83 c4 1c             	add    esp,0x1c
c0012378:	68 00 10 00 00       	push   0x1000
c001237d:	6a 00                	push   0x0
c001237f:	53                   	push   ebx
c0012380:	e8 6b e1 fe ff       	call   c00004f0 <memset>
c0012385:	83 c4 10             	add    esp,0x10
c0012388:	39 fe                	cmp    esi,edi
c001238a:	77 92                	ja     c001231e <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1f7>
c001238c:	a1 08 3d 02 c0       	mov    eax,ds:0xc0023d08
c0012391:	48                   	dec    eax
c0012392:	a3 08 3d 02 c0       	mov    ds:0xc0023d08,eax
c0012397:	75 01                	jne    c001239a <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x273>
c0012399:	fb                   	sti    
c001239a:	83 ec 0c             	sub    esp,0xc
c001239d:	53                   	push   ebx
c001239e:	e8 2a 79 ff ff       	call   c0009ccd <Virt::freeKernelVirtualPages(unsigned long)>
c00123a3:	83 c4 10             	add    esp,0x10
c00123a6:	b0 01                	mov    al,0x1
c00123a8:	81 c4 2c 10 00 00    	add    esp,0x102c
c00123ae:	5b                   	pop    ebx
c00123af:	5e                   	pop    esi
c00123b0:	5f                   	pop    edi
c00123b1:	5d                   	pop    ebp
c00123b2:	c3                   	ret    

c00123b3 <Thr::loadProgramIntoMemory(Process*, char const*)>:
c00123b3:	55                   	push   ebp
c00123b4:	57                   	push   edi
c00123b5:	56                   	push   esi
c00123b6:	53                   	push   ebx
c00123b7:	83 ec 48             	sub    esp,0x48
c00123ba:	68 14 01 00 00       	push   0x114
c00123bf:	e8 9d 5a ff ff       	call   c0007e61 <malloc>
c00123c4:	83 c4 0c             	add    esp,0xc
c00123c7:	89 c6                	mov    esi,eax
c00123c9:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00123cd:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00123d1:	50                   	push   eax
c00123d2:	e8 8f 8d ff ff       	call   c000b166 <File::File(char const*, Process*)>
c00123d7:	58                   	pop    eax
c00123d8:	5a                   	pop    edx
c00123d9:	6a 01                	push   0x1
c00123db:	56                   	push   esi
c00123dc:	e8 45 8e ff ff       	call   c000b226 <File::open(FileOpenMode)>
c00123e1:	83 c4 10             	add    esp,0x10
c00123e4:	85 c0                	test   eax,eax
c00123e6:	0f 85 47 01 00 00    	jne    c0012533 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c00123ec:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c00123f4:	83 ec 0c             	sub    esp,0xc
c00123f7:	6a 34                	push   0x34
c00123f9:	e8 63 5a ff ff       	call   c0007e61 <malloc>
c00123fe:	89 c3                	mov    ebx,eax
c0012400:	58                   	pop    eax
c0012401:	8b 06                	mov    eax,DWORD PTR [esi]
c0012403:	8d 7c 24 38          	lea    edi,[esp+0x38]
c0012407:	57                   	push   edi
c0012408:	53                   	push   ebx
c0012409:	6a 00                	push   0x0
c001240b:	6a 34                	push   0x34
c001240d:	56                   	push   esi
c001240e:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0012411:	83 c4 20             	add    esp,0x20
c0012414:	85 c0                	test   eax,eax
c0012416:	0f 85 17 01 00 00    	jne    c0012533 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001241c:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c0012422:	0f 85 0b 01 00 00    	jne    c0012533 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0012428:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001242b:	85 c0                	test   eax,eax
c001242d:	0f 84 00 01 00 00    	je     c0012533 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0012433:	31 d2                	xor    edx,edx
c0012435:	55                   	push   ebp
c0012436:	52                   	push   edx
c0012437:	50                   	push   eax
c0012438:	56                   	push   esi
c0012439:	e8 a6 8e ff ff       	call   c000b2e4 <File::seek(unsigned long long)>
c001243e:	83 c4 10             	add    esp,0x10
c0012441:	85 c0                	test   eax,eax
c0012443:	0f 85 ea 00 00 00    	jne    c0012533 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0012449:	83 ec 0c             	sub    esp,0xc
c001244c:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001244f:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c0012453:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0012457:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001245b:	0f af c2             	imul   eax,edx
c001245e:	50                   	push   eax
c001245f:	e8 fd 59 ff ff       	call   c0007e61 <malloc>
c0012464:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0012466:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001246a:	89 3c 24             	mov    DWORD PTR [esp],edi
c001246d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012471:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c0012475:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0012479:	0f af c2             	imul   eax,edx
c001247c:	99                   	cdq    
c001247d:	52                   	push   edx
c001247e:	50                   	push   eax
c001247f:	56                   	push   esi
c0012480:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0012483:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0012486:	83 c4 20             	add    esp,0x20
c0012489:	85 c0                	test   eax,eax
c001248b:	0f 84 a2 00 00 00    	je     c0012533 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0012491:	31 d2                	xor    edx,edx
c0012493:	51                   	push   ecx
c0012494:	52                   	push   edx
c0012495:	50                   	push   eax
c0012496:	56                   	push   esi
c0012497:	e8 48 8e ff ff       	call   c000b2e4 <File::seek(unsigned long long)>
c001249c:	83 c4 10             	add    esp,0x10
c001249f:	85 c0                	test   eax,eax
c00124a1:	0f 85 8c 00 00 00    	jne    c0012533 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c00124a7:	83 ec 0c             	sub    esp,0xc
c00124aa:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c00124ae:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c00124b2:	31 ed                	xor    ebp,ebp
c00124b4:	0f af c2             	imul   eax,edx
c00124b7:	50                   	push   eax
c00124b8:	e8 a4 59 ff ff       	call   c0007e61 <malloc>
c00124bd:	8b 0e                	mov    ecx,DWORD PTR [esi]
c00124bf:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00124c3:	89 3c 24             	mov    DWORD PTR [esp],edi
c00124c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00124ca:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c00124ce:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c00124d2:	0f af c2             	imul   eax,edx
c00124d5:	99                   	cdq    
c00124d6:	52                   	push   edx
c00124d7:	50                   	push   eax
c00124d8:	56                   	push   esi
c00124d9:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00124dc:	83 c4 20             	add    esp,0x20
c00124df:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00124e7:	66 39 6b 2c          	cmp    WORD PTR [ebx+0x2c],bp
c00124eb:	0f 86 80 00 00 00    	jbe    c0012571 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1be>
c00124f1:	0f b7 fd             	movzx  edi,bp
c00124f4:	c1 e7 05             	shl    edi,0x5
c00124f7:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c00124fb:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c00124fe:	75 6b                	jne    c001256b <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c0012500:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0012503:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0012507:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001250a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001250e:	52                   	push   edx
c001250f:	31 d2                	xor    edx,edx
c0012511:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0012514:	52                   	push   edx
c0012515:	50                   	push   eax
c0012516:	56                   	push   esi
c0012517:	e8 c8 8d ff ff       	call   c000b2e4 <File::seek(unsigned long long)>
c001251c:	83 c4 10             	add    esp,0x10
c001251f:	85 c0                	test   eax,eax
c0012521:	74 17                	je     c001253a <Thr::loadProgramIntoMemory(Process*, char const*)+0x187>
c0012523:	83 ec 0c             	sub    esp,0xc
c0012526:	68 b1 e7 01 c0       	push   0xc001e7b1
c001252b:	e8 c0 86 ff ff       	call   c000abf0 <Dbg::kprintf(char const*, ...)>
c0012530:	83 c4 10             	add    esp,0x10
c0012533:	31 c0                	xor    eax,eax
c0012535:	e9 87 00 00 00       	jmp    c00125c1 <Thr::loadProgramIntoMemory(Process*, char const*)+0x20e>
c001253a:	83 ec 0c             	sub    esp,0xc
c001253d:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0012540:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c0012543:	50                   	push   eax
c0012544:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0012548:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001254c:	56                   	push   esi
c001254d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0012551:	e8 d1 fb ff ff       	call   c0012127 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c0012556:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001255a:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c001255e:	83 c4 20             	add    esp,0x20
c0012561:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c0012565:	73 04                	jae    c001256b <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c0012567:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001256b:	45                   	inc    ebp
c001256c:	e9 76 ff ff ff       	jmp    c00124e7 <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c0012571:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0012575:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0012579:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001257d:	89 91 0e 05 00 00    	mov    DWORD PTR [ecx+0x50e],edx
c0012583:	83 ec 0c             	sub    esp,0xc
c0012586:	8b 91 12 05 00 00    	mov    edx,DWORD PTR [ecx+0x512]
c001258c:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012591:	05 00 10 00 00       	add    eax,0x1000
c0012596:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0012599:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001259d:	e8 cf 58 ff ff       	call   c0007e71 <free>
c00125a2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00125a5:	e8 c7 58 ff ff       	call   c0007e71 <free>
c00125aa:	58                   	pop    eax
c00125ab:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00125af:	e8 bd 58 ff ff       	call   c0007e71 <free>
c00125b4:	89 34 24             	mov    DWORD PTR [esp],esi
c00125b7:	e8 c8 8c ff ff       	call   c000b284 <File::close()>
c00125bc:	83 c4 10             	add    esp,0x10
c00125bf:	b0 01                	mov    al,0x1
c00125c1:	83 c4 3c             	add    esp,0x3c
c00125c4:	5b                   	pop    ebx
c00125c5:	5e                   	pop    esi
c00125c6:	5f                   	pop    edi
c00125c7:	5d                   	pop    ebp
c00125c8:	c3                   	ret    

c00125c9 <Thr::runtimeReferenceHelper()>:
c00125c9:	83 ec 18             	sub    esp,0x18
c00125cc:	68 b9 e7 01 c0       	push   0xc001e7b9
c00125d1:	e8 1a 86 ff ff       	call   c000abf0 <Dbg::kprintf(char const*, ...)>
c00125d6:	fa                   	cli    
c00125d7:	83 c4 10             	add    esp,0x10
c00125da:	eb fe                	jmp    c00125da <Thr::runtimeReferenceHelper()+0x11>

c00125dc <Thr::getAddressOfKernelSymbol(char const*)>:
c00125dc:	57                   	push   edi
c00125dd:	56                   	push   esi
c00125de:	53                   	push   ebx
c00125df:	31 db                	xor    ebx,ebx
c00125e1:	39 1d e0 3c 02 c0    	cmp    DWORD PTR ds:0xc0023ce0,ebx
c00125e7:	7e 3c                	jle    c0012625 <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c00125e9:	8b 34 9d 60 3c 02 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffdc3a0]
c00125f0:	31 ff                	xor    edi,edi
c00125f2:	39 3c 9d 60 3b 02 c0 	cmp    DWORD PTR [ebx*4-0x3ffdc4a0],edi
c00125f9:	7e 27                	jle    c0012622 <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c00125fb:	50                   	push   eax
c00125fc:	50                   	push   eax
c00125fd:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012601:	8b 06                	mov    eax,DWORD PTR [esi]
c0012603:	03 04 9d e0 3b 02 c0 	add    eax,DWORD PTR [ebx*4-0x3ffdc420]
c001260a:	50                   	push   eax
c001260b:	e8 f0 e0 fe ff       	call   c0000700 <strcmp>
c0012610:	83 c4 10             	add    esp,0x10
c0012613:	85 c0                	test   eax,eax
c0012615:	75 05                	jne    c001261c <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c0012617:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001261a:	eb 0b                	jmp    c0012627 <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c001261c:	83 c6 10             	add    esi,0x10
c001261f:	47                   	inc    edi
c0012620:	eb d0                	jmp    c00125f2 <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c0012622:	43                   	inc    ebx
c0012623:	eb bc                	jmp    c00125e1 <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c0012625:	31 c0                	xor    eax,eax
c0012627:	5b                   	pop    ebx
c0012628:	5e                   	pop    esi
c0012629:	5f                   	pop    edi
c001262a:	c3                   	ret    

c001262b <Thr::loadKernelSymbolTable(char const*)>:
c001262b:	55                   	push   ebp
c001262c:	57                   	push   edi
c001262d:	56                   	push   esi
c001262e:	53                   	push   ebx
c001262f:	83 ec 68             	sub    esp,0x68
c0012632:	8b 35 30 3d 02 c0    	mov    esi,DWORD PTR ds:0xc0023d30
c0012638:	68 14 01 00 00       	push   0x114
c001263d:	e8 1f 58 ff ff       	call   c0007e61 <malloc>
c0012642:	83 c4 0c             	add    esp,0xc
c0012645:	89 c3                	mov    ebx,eax
c0012647:	56                   	push   esi
c0012648:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c001264c:	50                   	push   eax
c001264d:	e8 14 8b ff ff       	call   c000b166 <File::File(char const*, Process*)>
c0012652:	5e                   	pop    esi
c0012653:	5f                   	pop    edi
c0012654:	6a 01                	push   0x1
c0012656:	53                   	push   ebx
c0012657:	e8 ca 8b ff ff       	call   c000b226 <File::open(FileOpenMode)>
c001265c:	83 c4 10             	add    esp,0x10
c001265f:	85 c0                	test   eax,eax
c0012661:	74 0a                	je     c001266d <Thr::loadKernelSymbolTable(char const*)+0x42>
c0012663:	83 ec 0c             	sub    esp,0xc
c0012666:	68 db e7 01 c0       	push   0xc001e7db
c001266b:	eb 34                	jmp    c00126a1 <Thr::loadKernelSymbolTable(char const*)+0x76>
c001266d:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0012675:	83 ec 0c             	sub    esp,0xc
c0012678:	6a 34                	push   0x34
c001267a:	e8 e2 57 ff ff       	call   c0007e61 <malloc>
c001267f:	59                   	pop    ecx
c0012680:	89 c7                	mov    edi,eax
c0012682:	8d 74 24 34          	lea    esi,[esp+0x34]
c0012686:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012688:	56                   	push   esi
c0012689:	57                   	push   edi
c001268a:	6a 00                	push   0x0
c001268c:	6a 34                	push   0x34
c001268e:	53                   	push   ebx
c001268f:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0012692:	83 c4 20             	add    esp,0x20
c0012695:	85 c0                	test   eax,eax
c0012697:	74 17                	je     c00126b0 <Thr::loadKernelSymbolTable(char const*)+0x85>
c0012699:	83 ec 0c             	sub    esp,0xc
c001269c:	68 f2 e7 01 c0       	push   0xc001e7f2
c00126a1:	e8 99 e0 ff ff       	call   c001073f <Krnl::panic(char const*)>
c00126a6:	83 c4 10             	add    esp,0x10
c00126a9:	31 c0                	xor    eax,eax
c00126ab:	e9 31 02 00 00       	jmp    c00128e1 <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c00126b0:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c00126b6:	75 e1                	jne    c0012699 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c00126b8:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c00126bb:	85 c0                	test   eax,eax
c00126bd:	74 da                	je     c0012699 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c00126bf:	52                   	push   edx
c00126c0:	31 d2                	xor    edx,edx
c00126c2:	52                   	push   edx
c00126c3:	50                   	push   eax
c00126c4:	53                   	push   ebx
c00126c5:	e8 1a 8c ff ff       	call   c000b2e4 <File::seek(unsigned long long)>
c00126ca:	83 c4 10             	add    esp,0x10
c00126cd:	85 c0                	test   eax,eax
c00126cf:	75 c8                	jne    c0012699 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c00126d1:	83 ec 0c             	sub    esp,0xc
c00126d4:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c00126d8:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00126dc:	31 ed                	xor    ebp,ebp
c00126de:	0f af c2             	imul   eax,edx
c00126e1:	50                   	push   eax
c00126e2:	e8 7a 57 ff ff       	call   c0007e61 <malloc>
c00126e7:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00126e9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00126ed:	89 34 24             	mov    DWORD PTR [esp],esi
c00126f0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00126f4:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c00126f8:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00126fc:	0f af c2             	imul   eax,edx
c00126ff:	99                   	cdq    
c0012700:	52                   	push   edx
c0012701:	50                   	push   eax
c0012702:	53                   	push   ebx
c0012703:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0012706:	83 c4 20             	add    esp,0x20
c0012709:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0012711:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0012719:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0012721:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0012729:	66 39 6f 30          	cmp    WORD PTR [edi+0x30],bp
c001272d:	0f 86 aa 00 00 00    	jbe    c00127dd <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c0012733:	0f b7 f5             	movzx  esi,bp
c0012736:	6b f6 28             	imul   esi,esi,0x28
c0012739:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001273d:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0012740:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0012744:	50                   	push   eax
c0012745:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0012749:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c001274d:	8b 16                	mov    edx,DWORD PTR [esi]
c001274f:	6b c0 28             	imul   eax,eax,0x28
c0012752:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c0012756:	89 d0                	mov    eax,edx
c0012758:	31 d2                	xor    edx,edx
c001275a:	52                   	push   edx
c001275b:	50                   	push   eax
c001275c:	53                   	push   ebx
c001275d:	e8 82 8b ff ff       	call   c000b2e4 <File::seek(unsigned long long)>
c0012762:	83 c4 0c             	add    esp,0xc
c0012765:	6a 20                	push   0x20
c0012767:	6a 00                	push   0x0
c0012769:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001276d:	52                   	push   edx
c001276e:	e8 7d dd fe ff       	call   c00004f0 <memset>
c0012773:	58                   	pop    eax
c0012774:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012776:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c001277a:	51                   	push   ecx
c001277b:	8d 54 24 40          	lea    edx,[esp+0x40]
c001277f:	52                   	push   edx
c0012780:	6a 00                	push   0x0
c0012782:	6a 1f                	push   0x1f
c0012784:	53                   	push   ebx
c0012785:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0012788:	83 c4 18             	add    esp,0x18
c001278b:	68 09 e8 01 c0       	push   0xc001e809
c0012790:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0012794:	52                   	push   edx
c0012795:	e8 66 df fe ff       	call   c0000700 <strcmp>
c001279a:	83 c4 10             	add    esp,0x10
c001279d:	85 c0                	test   eax,eax
c001279f:	75 0f                	jne    c00127b0 <Thr::loadKernelSymbolTable(char const*)+0x185>
c00127a1:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00127a4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00127a8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00127ac:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00127b0:	50                   	push   eax
c00127b1:	50                   	push   eax
c00127b2:	68 11 e8 01 c0       	push   0xc001e811
c00127b7:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c00127bb:	50                   	push   eax
c00127bc:	e8 3f df fe ff       	call   c0000700 <strcmp>
c00127c1:	83 c4 10             	add    esp,0x10
c00127c4:	85 c0                	test   eax,eax
c00127c6:	75 0f                	jne    c00127d7 <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c00127c8:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00127cb:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00127cf:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00127d3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00127d7:	45                   	inc    ebp
c00127d8:	e9 4c ff ff ff       	jmp    c0012729 <Thr::loadKernelSymbolTable(char const*)+0xfe>
c00127dd:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00127e2:	75 10                	jne    c00127f4 <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c00127e4:	83 ec 0c             	sub    esp,0xc
c00127e7:	68 19 e8 01 c0       	push   0xc001e819
c00127ec:	e8 4e df ff ff       	call   c001073f <Krnl::panic(char const*)>
c00127f1:	83 c4 10             	add    esp,0x10
c00127f4:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c00127f9:	75 10                	jne    c001280b <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c00127fb:	83 ec 0c             	sub    esp,0xc
c00127fe:	68 19 e8 01 c0       	push   0xc001e819
c0012803:	e8 37 df ff ff       	call   c001073f <Krnl::panic(char const*)>
c0012808:	83 c4 10             	add    esp,0x10
c001280b:	31 d2                	xor    edx,edx
c001280d:	50                   	push   eax
c001280e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012812:	52                   	push   edx
c0012813:	50                   	push   eax
c0012814:	53                   	push   ebx
c0012815:	e8 ca 8a ff ff       	call   c000b2e4 <File::seek(unsigned long long)>
c001281a:	5a                   	pop    edx
c001281b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001281f:	e8 3d 56 ff ff       	call   c0007e61 <malloc>
c0012824:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0012828:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001282c:	31 c9                	xor    ecx,ecx
c001282e:	5e                   	pop    esi
c001282f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012831:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c0012835:	55                   	push   ebp
c0012836:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001283a:	51                   	push   ecx
c001283b:	52                   	push   edx
c001283c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0012840:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c0012844:	53                   	push   ebx
c0012845:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0012848:	83 c4 14             	add    esp,0x14
c001284b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001284f:	e8 0d 56 ff ff       	call   c0007e61 <malloc>
c0012854:	89 c6                	mov    esi,eax
c0012856:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012858:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001285b:	56                   	push   esi
c001285c:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0012860:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0012864:	51                   	push   ecx
c0012865:	52                   	push   edx
c0012866:	53                   	push   ebx
c0012867:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001286a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001286e:	8b 15 e0 3c 02 c0    	mov    edx,DWORD PTR ds:0xc0023ce0
c0012874:	83 c4 1c             	add    esp,0x1c
c0012877:	c1 e8 04             	shr    eax,0x4
c001287a:	89 04 95 60 3b 02 c0 	mov    DWORD PTR [edx*4-0x3ffdc4a0],eax
c0012881:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012885:	31 d2                	xor    edx,edx
c0012887:	52                   	push   edx
c0012888:	50                   	push   eax
c0012889:	53                   	push   ebx
c001288a:	e8 55 8a ff ff       	call   c000b2e4 <File::seek(unsigned long long)>
c001288f:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0012891:	31 d2                	xor    edx,edx
c0012893:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0012896:	56                   	push   esi
c0012897:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001289b:	52                   	push   edx
c001289c:	50                   	push   eax
c001289d:	53                   	push   ebx
c001289e:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00128a1:	83 c4 14             	add    esp,0x14
c00128a4:	53                   	push   ebx
c00128a5:	e8 da 89 ff ff       	call   c000b284 <File::close()>
c00128aa:	5d                   	pop    ebp
c00128ab:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00128af:	e8 bd 55 ff ff       	call   c0007e71 <free>
c00128b4:	89 3c 24             	mov    DWORD PTR [esp],edi
c00128b7:	e8 b5 55 ff ff       	call   c0007e71 <free>
c00128bc:	a1 e0 3c 02 c0       	mov    eax,ds:0xc0023ce0
c00128c1:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00128c5:	8d 50 01             	lea    edx,[eax+0x1]
c00128c8:	89 0c 85 60 3c 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc3a0],ecx
c00128cf:	89 34 85 e0 3b 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc420],esi
c00128d6:	89 15 e0 3c 02 c0    	mov    DWORD PTR ds:0xc0023ce0,edx
c00128dc:	83 c4 10             	add    esp,0x10
c00128df:	b0 01                	mov    al,0x1
c00128e1:	83 c4 5c             	add    esp,0x5c
c00128e4:	5b                   	pop    ebx
c00128e5:	5e                   	pop    esi
c00128e6:	5f                   	pop    edi
c00128e7:	5d                   	pop    ebp
c00128e8:	c3                   	ret    

c00128e9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c00128e9:	55                   	push   ebp
c00128ea:	57                   	push   edi
c00128eb:	56                   	push   esi
c00128ec:	53                   	push   ebx
c00128ed:	81 ec 68 03 00 00    	sub    esp,0x368
c00128f3:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c00128fa:	8b 1d 30 3d 02 c0    	mov    ebx,DWORD PTR ds:0xc0023d30
c0012900:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c0012904:	68 14 01 00 00       	push   0x114
c0012909:	e8 53 55 ff ff       	call   c0007e61 <malloc>
c001290e:	83 c4 0c             	add    esp,0xc
c0012911:	89 c5                	mov    ebp,eax
c0012913:	53                   	push   ebx
c0012914:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c001291b:	50                   	push   eax
c001291c:	e8 45 88 ff ff       	call   c000b166 <File::File(char const*, Process*)>
c0012921:	5e                   	pop    esi
c0012922:	5f                   	pop    edi
c0012923:	6a 01                	push   0x1
c0012925:	55                   	push   ebp
c0012926:	e8 fb 88 ff ff       	call   c000b226 <File::open(FileOpenMode)>
c001292b:	83 c4 10             	add    esp,0x10
c001292e:	85 c0                	test   eax,eax
c0012930:	0f 85 a7 06 00 00    	jne    c0012fdd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0012936:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001293e:	83 ec 0c             	sub    esp,0xc
c0012941:	6a 34                	push   0x34
c0012943:	e8 19 55 ff ff       	call   c0007e61 <malloc>
c0012948:	5b                   	pop    ebx
c0012949:	89 c7                	mov    edi,eax
c001294b:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001294f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012952:	53                   	push   ebx
c0012953:	57                   	push   edi
c0012954:	6a 00                	push   0x0
c0012956:	6a 34                	push   0x34
c0012958:	55                   	push   ebp
c0012959:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001295c:	83 c4 20             	add    esp,0x20
c001295f:	85 c0                	test   eax,eax
c0012961:	0f 85 76 06 00 00    	jne    c0012fdd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0012967:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001296d:	0f 85 6a 06 00 00    	jne    c0012fdd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0012973:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0012976:	85 c0                	test   eax,eax
c0012978:	0f 84 5f 06 00 00    	je     c0012fdd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001297e:	31 d2                	xor    edx,edx
c0012980:	51                   	push   ecx
c0012981:	52                   	push   edx
c0012982:	50                   	push   eax
c0012983:	55                   	push   ebp
c0012984:	e8 5b 89 ff ff       	call   c000b2e4 <File::seek(unsigned long long)>
c0012989:	83 c4 10             	add    esp,0x10
c001298c:	85 c0                	test   eax,eax
c001298e:	0f 85 49 06 00 00    	jne    c0012fdd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0012994:	83 ec 0c             	sub    esp,0xc
c0012997:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c001299a:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001299e:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00129a2:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00129a6:	0f af c2             	imul   eax,edx
c00129a9:	50                   	push   eax
c00129aa:	e8 b2 54 ff ff       	call   c0007e61 <malloc>
c00129af:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c00129b2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00129b6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00129b9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00129bd:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c00129c1:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00129c5:	0f af c2             	imul   eax,edx
c00129c8:	99                   	cdq    
c00129c9:	52                   	push   edx
c00129ca:	50                   	push   eax
c00129cb:	55                   	push   ebp
c00129cc:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00129cf:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c00129d2:	83 c4 20             	add    esp,0x20
c00129d5:	85 c0                	test   eax,eax
c00129d7:	0f 84 00 06 00 00    	je     c0012fdd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c00129dd:	52                   	push   edx
c00129de:	31 d2                	xor    edx,edx
c00129e0:	52                   	push   edx
c00129e1:	50                   	push   eax
c00129e2:	55                   	push   ebp
c00129e3:	e8 fc 88 ff ff       	call   c000b2e4 <File::seek(unsigned long long)>
c00129e8:	83 c4 10             	add    esp,0x10
c00129eb:	85 c0                	test   eax,eax
c00129ed:	0f 85 ea 05 00 00    	jne    c0012fdd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c00129f3:	83 ec 0c             	sub    esp,0xc
c00129f6:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c00129fa:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c00129fe:	31 f6                	xor    esi,esi
c0012a00:	0f af c2             	imul   eax,edx
c0012a03:	50                   	push   eax
c0012a04:	e8 58 54 ff ff       	call   c0007e61 <malloc>
c0012a09:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0012a0c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0012a10:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012a13:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012a17:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c0012a1b:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c0012a1f:	0f af c2             	imul   eax,edx
c0012a22:	99                   	cdq    
c0012a23:	52                   	push   edx
c0012a24:	50                   	push   eax
c0012a25:	55                   	push   ebp
c0012a26:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0012a29:	83 c4 20             	add    esp,0x20
c0012a2c:	66 39 77 2c          	cmp    WORD PTR [edi+0x2c],si
c0012a30:	0f 86 8a 00 00 00    	jbe    c0012ac0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c0012a36:	0f b7 de             	movzx  ebx,si
c0012a39:	c1 e3 05             	shl    ebx,0x5
c0012a3c:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c0012a40:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c0012a43:	75 75                	jne    c0012aba <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c0012a45:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0012a48:	31 d2                	xor    edx,edx
c0012a4a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012a4e:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0012a51:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012a55:	50                   	push   eax
c0012a56:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0012a59:	52                   	push   edx
c0012a5a:	50                   	push   eax
c0012a5b:	55                   	push   ebp
c0012a5c:	e8 83 88 ff ff       	call   c000b2e4 <File::seek(unsigned long long)>
c0012a61:	83 c4 10             	add    esp,0x10
c0012a64:	85 c0                	test   eax,eax
c0012a66:	0f 85 71 05 00 00    	jne    c0012fdd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0012a6c:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c0012a73:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0012a76:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0012a7a:	31 d2                	xor    edx,edx
c0012a7c:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0012a80:	83 ec 0c             	sub    esp,0xc
c0012a83:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0012a87:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0012a8e:	50                   	push   eax
c0012a8f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012a93:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012a97:	52                   	push   edx
c0012a98:	50                   	push   eax
c0012a99:	55                   	push   ebp
c0012a9a:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0012a9d:	83 c4 1c             	add    esp,0x1c
c0012aa0:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0012aa3:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c0012aa6:	50                   	push   eax
c0012aa7:	6a 00                	push   0x0
c0012aa9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012aad:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0012ab1:	50                   	push   eax
c0012ab2:	e8 39 da fe ff       	call   c00004f0 <memset>
c0012ab7:	83 c4 10             	add    esp,0x10
c0012aba:	46                   	inc    esi
c0012abb:	e9 6c ff ff ff       	jmp    c0012a2c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c0012ac0:	53                   	push   ebx
c0012ac1:	31 db                	xor    ebx,ebx
c0012ac3:	68 00 01 00 00       	push   0x100
c0012ac8:	6a 00                	push   0x0
c0012aca:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c0012ace:	50                   	push   eax
c0012acf:	e8 1c da fe ff       	call   c00004f0 <memset>
c0012ad4:	83 c4 0c             	add    esp,0xc
c0012ad7:	68 00 01 00 00       	push   0x100
c0012adc:	6a 00                	push   0x0
c0012ade:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c0012ae5:	50                   	push   eax
c0012ae6:	e8 05 da fe ff       	call   c00004f0 <memset>
c0012aeb:	83 c4 10             	add    esp,0x10
c0012aee:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0012af6:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0012afe:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0012b06:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0012b0e:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0012b16:	66 39 5f 30          	cmp    WORD PTR [edi+0x30],bx
c0012b1a:	0f 86 30 01 00 00    	jbe    c0012c50 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c0012b20:	0f b7 f3             	movzx  esi,bx
c0012b23:	6b f6 28             	imul   esi,esi,0x28
c0012b26:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c0012b2a:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0012b2d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012b31:	52                   	push   edx
c0012b32:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0012b36:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c0012b3a:	8b 06                	mov    eax,DWORD PTR [esi]
c0012b3c:	6b d2 28             	imul   edx,edx,0x28
c0012b3f:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c0012b43:	31 d2                	xor    edx,edx
c0012b45:	52                   	push   edx
c0012b46:	50                   	push   eax
c0012b47:	55                   	push   ebp
c0012b48:	e8 97 87 ff ff       	call   c000b2e4 <File::seek(unsigned long long)>
c0012b4d:	83 c4 0c             	add    esp,0xc
c0012b50:	6a 20                	push   0x20
c0012b52:	6a 00                	push   0x0
c0012b54:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0012b5b:	51                   	push   ecx
c0012b5c:	e8 8f d9 fe ff       	call   c00004f0 <memset>
c0012b61:	59                   	pop    ecx
c0012b62:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012b65:	8d 54 24 58          	lea    edx,[esp+0x58]
c0012b69:	52                   	push   edx
c0012b6a:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c0012b71:	51                   	push   ecx
c0012b72:	6a 00                	push   0x0
c0012b74:	6a 1f                	push   0x1f
c0012b76:	55                   	push   ebp
c0012b77:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0012b7a:	83 c4 1c             	add    esp,0x1c
c0012b7d:	6a 09                	push   0x9
c0012b7f:	68 33 e8 01 c0       	push   0xc001e833
c0012b84:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0012b8b:	51                   	push   ecx
c0012b8c:	e8 1f d8 fe ff       	call   c00003b0 <memcmp>
c0012b91:	83 c4 10             	add    esp,0x10
c0012b94:	85 c0                	test   eax,eax
c0012b96:	75 21                	jne    c0012bb9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c0012b98:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012b9c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012ba0:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c0012ba4:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012ba8:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0012bab:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c0012bb2:	89 d0                	mov    eax,edx
c0012bb4:	40                   	inc    eax
c0012bb5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012bb9:	50                   	push   eax
c0012bba:	6a 09                	push   0x9
c0012bbc:	68 3d e8 01 c0       	push   0xc001e83d
c0012bc1:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0012bc8:	50                   	push   eax
c0012bc9:	e8 e2 d7 fe ff       	call   c00003b0 <memcmp>
c0012bce:	83 c4 10             	add    esp,0x10
c0012bd1:	85 c0                	test   eax,eax
c0012bd3:	75 21                	jne    c0012bf6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c0012bd5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012bd9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012bdd:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c0012be1:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012be5:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0012be8:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c0012bef:	89 d0                	mov    eax,edx
c0012bf1:	40                   	inc    eax
c0012bf2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012bf6:	50                   	push   eax
c0012bf7:	50                   	push   eax
c0012bf8:	68 09 e8 01 c0       	push   0xc001e809
c0012bfd:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0012c04:	50                   	push   eax
c0012c05:	e8 f6 da fe ff       	call   c0000700 <strcmp>
c0012c0a:	83 c4 10             	add    esp,0x10
c0012c0d:	85 c0                	test   eax,eax
c0012c0f:	75 0f                	jne    c0012c20 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c0012c11:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0012c14:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0012c18:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012c1c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0012c20:	50                   	push   eax
c0012c21:	50                   	push   eax
c0012c22:	68 11 e8 01 c0       	push   0xc001e811
c0012c27:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0012c2e:	50                   	push   eax
c0012c2f:	e8 cc da fe ff       	call   c0000700 <strcmp>
c0012c34:	83 c4 10             	add    esp,0x10
c0012c37:	85 c0                	test   eax,eax
c0012c39:	75 0f                	jne    c0012c4a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c0012c3b:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0012c3e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0012c42:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012c46:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0012c4a:	43                   	inc    ebx
c0012c4b:	e9 c6 fe ff ff       	jmp    c0012b16 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c0012c50:	31 d2                	xor    edx,edx
c0012c52:	50                   	push   eax
c0012c53:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012c57:	52                   	push   edx
c0012c58:	50                   	push   eax
c0012c59:	55                   	push   ebp
c0012c5a:	e8 85 86 ff ff       	call   c000b2e4 <File::seek(unsigned long long)>
c0012c5f:	58                   	pop    eax
c0012c60:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012c64:	e8 f8 51 ff ff       	call   c0007e61 <malloc>
c0012c69:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0012c6c:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0012c70:	31 d2                	xor    edx,edx
c0012c72:	58                   	pop    eax
c0012c73:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c0012c77:	53                   	push   ebx
c0012c78:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0012c7c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012c80:	52                   	push   edx
c0012c81:	50                   	push   eax
c0012c82:	55                   	push   ebp
c0012c83:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0012c86:	83 c4 14             	add    esp,0x14
c0012c89:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012c8d:	e8 cf 51 ff ff       	call   c0007e61 <malloc>
c0012c92:	31 d2                	xor    edx,edx
c0012c94:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0012c98:	83 c4 0c             	add    esp,0xc
c0012c9b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012c9f:	52                   	push   edx
c0012ca0:	50                   	push   eax
c0012ca1:	55                   	push   ebp
c0012ca2:	e8 3d 86 ff ff       	call   c000b2e4 <File::seek(unsigned long long)>
c0012ca7:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0012caa:	31 d2                	xor    edx,edx
c0012cac:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012caf:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0012cb3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012cb7:	52                   	push   edx
c0012cb8:	50                   	push   eax
c0012cb9:	55                   	push   ebp
c0012cba:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0012cbd:	83 c4 20             	add    esp,0x20
c0012cc0:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0012cc8:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0012ccc:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
c0012cd0:	0f 84 0b 03 00 00    	je     c0012fe1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f8>
c0012cd6:	8b 84 9c 50 01 00 00 	mov    eax,DWORD PTR [esp+ebx*4+0x150]
c0012cdd:	31 d2                	xor    edx,edx
c0012cdf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012ce3:	c1 e8 03             	shr    eax,0x3
c0012ce6:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0012cea:	51                   	push   ecx
c0012ceb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012cef:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c0012cf3:	52                   	push   edx
c0012cf4:	50                   	push   eax
c0012cf5:	55                   	push   ebp
c0012cf6:	e8 e9 85 ff ff       	call   c000b2e4 <File::seek(unsigned long long)>
c0012cfb:	5b                   	pop    ebx
c0012cfc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012d00:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c0012d07:	e8 55 51 ff ff       	call   c0007e61 <malloc>
c0012d0c:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0012d0f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012d13:	31 d2                	xor    edx,edx
c0012d15:	5e                   	pop    esi
c0012d16:	8d 44 24 58          	lea    eax,[esp+0x58]
c0012d1a:	50                   	push   eax
c0012d1b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012d1f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012d23:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c0012d2a:	52                   	push   edx
c0012d2b:	50                   	push   eax
c0012d2c:	55                   	push   ebp
c0012d2d:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0012d30:	83 c4 20             	add    esp,0x20
c0012d33:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0012d3b:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0012d3f:	39 74 24 20          	cmp    DWORD PTR [esp+0x20],esi
c0012d43:	0f 8d 7c 02 00 00    	jge    c0012fc5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6dc>
c0012d49:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0012d4d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012d51:	c6 44 24 24 00       	mov    BYTE PTR [esp+0x24],0x0
c0012d56:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c0012d59:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0012d5d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012d61:	8b 5c d8 04          	mov    ebx,DWORD PTR [eax+ebx*8+0x4]
c0012d65:	89 d8                	mov    eax,ebx
c0012d67:	c1 e8 08             	shr    eax,0x8
c0012d6a:	89 c6                	mov    esi,eax
c0012d6c:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0012d70:	c1 e6 04             	shl    esi,0x4
c0012d73:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c0012d77:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c0012d7a:	85 d2                	test   edx,edx
c0012d7c:	0f 85 bf 00 00 00    	jne    c0012e41 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c0012d82:	83 ec 0c             	sub    esp,0xc
c0012d85:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0012d89:	03 06                	add    eax,DWORD PTR [esi]
c0012d8b:	50                   	push   eax
c0012d8c:	e8 4b f8 ff ff       	call   c00125dc <Thr::getAddressOfKernelSymbol(char const*)>
c0012d91:	83 c4 10             	add    esp,0x10
c0012d94:	89 c2                	mov    edx,eax
c0012d96:	c6 44 24 24 01       	mov    BYTE PTR [esp+0x24],0x1
c0012d9b:	85 c0                	test   eax,eax
c0012d9d:	0f 85 9e 00 00 00    	jne    c0012e41 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c0012da3:	83 ec 0c             	sub    esp,0xc
c0012da6:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0012daa:	03 06                	add    eax,DWORD PTR [esi]
c0012dac:	50                   	push   eax
c0012dad:	e8 96 41 ff ff       	call   c0006f48 <Krnl::resolveCompatibilitySymbol(char*)>
c0012db2:	83 c4 10             	add    esp,0x10
c0012db5:	89 c2                	mov    edx,eax
c0012db7:	85 c0                	test   eax,eax
c0012db9:	0f 85 82 00 00 00    	jne    c0012e41 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c0012dbf:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0012dc3:	50                   	push   eax
c0012dc4:	50                   	push   eax
c0012dc5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012dc9:	03 06                	add    eax,DWORD PTR [esi]
c0012dcb:	50                   	push   eax
c0012dcc:	68 47 e8 01 c0       	push   0xc001e847
c0012dd1:	e8 1a 7e ff ff       	call   c000abf0 <Dbg::kprintf(char const*, ...)>
c0012dd6:	58                   	pop    eax
c0012dd7:	5a                   	pop    edx
c0012dd8:	68 61 e8 01 c0       	push   0xc001e861
c0012ddd:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0012de4:	50                   	push   eax
c0012de5:	e8 36 d8 fe ff       	call   c0000620 <strcpy>
c0012dea:	59                   	pop    ecx
c0012deb:	58                   	pop    eax
c0012dec:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012df0:	03 06                	add    eax,DWORD PTR [esi]
c0012df2:	50                   	push   eax
c0012df3:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0012dfa:	50                   	push   eax
c0012dfb:	e8 e0 d9 fe ff       	call   c00007e0 <strcat>
c0012e00:	58                   	pop    eax
c0012e01:	5a                   	pop    edx
c0012e02:	68 f7 e8 01 c0       	push   0xc001e8f7
c0012e07:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0012e0e:	50                   	push   eax
c0012e0f:	e8 cc d9 fe ff       	call   c00007e0 <strcat>
c0012e14:	83 c4 10             	add    esp,0x10
c0012e17:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0012e1c:	0f 84 5d 01 00 00    	je     c0012f7f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c0012e22:	83 ec 0c             	sub    esp,0xc
c0012e25:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0012e2c:	50                   	push   eax
c0012e2d:	e8 0d d9 ff ff       	call   c001073f <Krnl::panic(char const*)>
c0012e32:	83 c4 10             	add    esp,0x10
c0012e35:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0012e39:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0012e3d:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c0012e41:	80 fb 01             	cmp    bl,0x1
c0012e44:	0f 85 88 00 00 00    	jne    c0012ed2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e9>
c0012e4a:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c0012e51:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0012e55:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c0012e59:	01 ce                	add    esi,ecx
c0012e5b:	81 fb 01 04 00 00    	cmp    ebx,0x401
c0012e61:	0f 94 c0             	sete   al
c0012e64:	81 fb 01 01 00 00    	cmp    ebx,0x101
c0012e6a:	0f 94 c3             	sete   bl
c0012e6d:	09 c3                	or     ebx,eax
c0012e6f:	8b 06                	mov    eax,DWORD PTR [esi]
c0012e71:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c0012e76:	74 41                	je     c0012eb9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d0>
c0012e78:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0012e7b:	84 db                	test   bl,bl
c0012e7d:	75 15                	jne    c0012e94 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ab>
c0012e7f:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0012e83:	66 83 f8 0c          	cmp    ax,0xc
c0012e87:	76 05                	jbe    c0012e8e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5a5>
c0012e89:	b8 0c 00 00 00       	mov    eax,0xc
c0012e8e:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c0012e92:	76 37                	jbe    c0012ecb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0012e94:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0012e98:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0012e9d:	0f 84 dc 00 00 00    	je     c0012f7f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c0012ea3:	83 ec 0c             	sub    esp,0xc
c0012ea6:	68 78 e8 01 c0       	push   0xc001e878
c0012eab:	e8 8f d8 ff ff       	call   c001073f <Krnl::panic(char const*)>
c0012eb0:	83 c4 10             	add    esp,0x10
c0012eb3:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0012eb7:	eb 12                	jmp    c0012ecb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0012eb9:	01 c1                	add    ecx,eax
c0012ebb:	84 db                	test   bl,bl
c0012ebd:	75 0c                	jne    c0012ecb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0012ebf:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0012ec3:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c0012ec7:	77 02                	ja     c0012ecb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0012ec9:	01 d1                	add    ecx,edx
c0012ecb:	89 0e                	mov    DWORD PTR [esi],ecx
c0012ecd:	e9 ea 00 00 00       	jmp    c0012fbc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c0012ed2:	80 fb 02             	cmp    bl,0x2
c0012ed5:	75 7c                	jne    c0012f53 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x66a>
c0012ed7:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c0012ede:	2b 74 24 28          	sub    esi,DWORD PTR [esp+0x28]
c0012ee2:	03 74 24 2c          	add    esi,DWORD PTR [esp+0x2c]
c0012ee6:	81 fb 01 04 00 00    	cmp    ebx,0x401
c0012eec:	74 20                	je     c0012f0e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c0012eee:	81 fb 01 01 00 00    	cmp    ebx,0x101
c0012ef4:	74 18                	je     c0012f0e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c0012ef6:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0012efa:	b9 0a 00 00 00       	mov    ecx,0xa
c0012eff:	66 83 f8 0e          	cmp    ax,0xe
c0012f03:	77 03                	ja     c0012f08 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x61f>
c0012f05:	8d 48 fc             	lea    ecx,[eax-0x4]
c0012f08:	3b 4c 24 30          	cmp    ecx,DWORD PTR [esp+0x30]
c0012f0c:	76 1f                	jbe    c0012f2d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x644>
c0012f0e:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0012f12:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0012f17:	74 66                	je     c0012f7f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c0012f19:	83 ec 0c             	sub    esp,0xc
c0012f1c:	68 94 e8 01 c0       	push   0xc001e894
c0012f21:	e8 19 d8 ff ff       	call   c001073f <Krnl::panic(char const*)>
c0012f26:	83 c4 10             	add    esp,0x10
c0012f29:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0012f2d:	8b 06                	mov    eax,DWORD PTR [esi]
c0012f2f:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c0012f34:	74 13                	je     c0012f49 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x660>
c0012f36:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0012f3a:	2b 8c 24 74 03 00 00 	sub    ecx,DWORD PTR [esp+0x374]
c0012f41:	2b 4c 24 2c          	sub    ecx,DWORD PTR [esp+0x2c]
c0012f45:	01 c8                	add    eax,ecx
c0012f47:	eb 04                	jmp    c0012f4d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x664>
c0012f49:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c0012f4d:	01 c2                	add    edx,eax
c0012f4f:	89 16                	mov    DWORD PTR [esi],edx
c0012f51:	eb 69                	jmp    c0012fbc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c0012f53:	0f b6 db             	movzx  ebx,bl
c0012f56:	50                   	push   eax
c0012f57:	50                   	push   eax
c0012f58:	53                   	push   ebx
c0012f59:	68 b0 e8 01 c0       	push   0xc001e8b0
c0012f5e:	e8 8d 7c ff ff       	call   c000abf0 <Dbg::kprintf(char const*, ...)>
c0012f63:	83 c4 10             	add    esp,0x10
c0012f66:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0012f6b:	74 12                	je     c0012f7f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c0012f6d:	83 ec 0c             	sub    esp,0xc
c0012f70:	68 bb e8 01 c0       	push   0xc001e8bb
c0012f75:	e8 c5 d7 ff ff       	call   c001073f <Krnl::panic(char const*)>
c0012f7a:	83 c4 10             	add    esp,0x10
c0012f7d:	eb 3d                	jmp    c0012fbc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c0012f7f:	83 ec 0c             	sub    esp,0xc
c0012f82:	55                   	push   ebp
c0012f83:	e8 fc 82 ff ff       	call   c000b284 <File::close()>
c0012f88:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012f8b:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0012f8e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012f91:	59                   	pop    ecx
c0012f92:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012f96:	e8 d6 4e ff ff       	call   c0007e71 <free>
c0012f9b:	5b                   	pop    ebx
c0012f9c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012fa0:	e8 cc 4e ff ff       	call   c0007e71 <free>
c0012fa5:	89 3c 24             	mov    DWORD PTR [esp],edi
c0012fa8:	e8 c4 4e ff ff       	call   c0007e71 <free>
c0012fad:	5e                   	pop    esi
c0012fae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012fb2:	e8 ba 4e ff ff       	call   c0007e71 <free>
c0012fb7:	83 c4 10             	add    esp,0x10
c0012fba:	eb 21                	jmp    c0012fdd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0012fbc:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c0012fc0:	e9 76 fd ff ff       	jmp    c0012d3b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x452>
c0012fc5:	83 ec 0c             	sub    esp,0xc
c0012fc8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012fcc:	e8 a0 4e ff ff       	call   c0007e71 <free>
c0012fd1:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c0012fd5:	83 c4 10             	add    esp,0x10
c0012fd8:	e9 eb fc ff ff       	jmp    c0012cc8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3df>
c0012fdd:	31 c0                	xor    eax,eax
c0012fdf:	eb 33                	jmp    c0013014 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x72b>
c0012fe1:	83 ec 0c             	sub    esp,0xc
c0012fe4:	55                   	push   ebp
c0012fe5:	e8 9a 82 ff ff       	call   c000b284 <File::close()>
c0012fea:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012fed:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0012ff0:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012ff3:	58                   	pop    eax
c0012ff4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012ff8:	e8 74 4e ff ff       	call   c0007e71 <free>
c0012ffd:	89 3c 24             	mov    DWORD PTR [esp],edi
c0013000:	e8 6c 4e ff ff       	call   c0007e71 <free>
c0013005:	5a                   	pop    edx
c0013006:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001300a:	e8 62 4e ff ff       	call   c0007e71 <free>
c001300f:	83 c4 10             	add    esp,0x10
c0013012:	b0 01                	mov    al,0x1
c0013014:	81 c4 5c 03 00 00    	add    esp,0x35c
c001301a:	5b                   	pop    ebx
c001301b:	5e                   	pop    esi
c001301c:	5f                   	pop    edi
c001301d:	5d                   	pop    ebp
c001301e:	c3                   	ret    

c001301f <Thr::getDriverBaseFromAddress(unsigned long)>:
c001301f:	56                   	push   esi
c0013020:	31 d2                	xor    edx,edx
c0013022:	53                   	push   ebx
c0013023:	8b 1d 40 35 02 c0    	mov    ebx,DWORD PTR ds:0xc0023540
c0013029:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001302d:	39 d3                	cmp    ebx,edx
c001302f:	7e 1b                	jle    c001304c <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c0013031:	8b 04 95 60 37 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdc8a0]
c0013038:	39 c8                	cmp    eax,ecx
c001303a:	77 0d                	ja     c0013049 <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c001303c:	8b 34 95 60 35 02 c0 	mov    esi,DWORD PTR [edx*4-0x3ffdcaa0]
c0013043:	01 c6                	add    esi,eax
c0013045:	39 ce                	cmp    esi,ecx
c0013047:	77 05                	ja     c001304e <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c0013049:	42                   	inc    edx
c001304a:	eb e1                	jmp    c001302d <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c001304c:	31 c0                	xor    eax,eax
c001304e:	5b                   	pop    ebx
c001304f:	5e                   	pop    esi
c0013050:	c3                   	ret    

c0013051 <Thr::getDriverNameFromAddress(unsigned long)>:
c0013051:	53                   	push   ebx
c0013052:	31 c0                	xor    eax,eax
c0013054:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0013058:	8b 1d 40 35 02 c0    	mov    ebx,DWORD PTR ds:0xc0023540
c001305e:	39 c3                	cmp    ebx,eax
c0013060:	7e 22                	jle    c0013084 <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c0013062:	8b 14 85 60 37 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdc8a0]
c0013069:	39 ca                	cmp    edx,ecx
c001306b:	77 14                	ja     c0013081 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001306d:	03 14 85 60 35 02 c0 	add    edx,DWORD PTR [eax*4-0x3ffdcaa0]
c0013074:	39 ca                	cmp    edx,ecx
c0013076:	76 09                	jbe    c0013081 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0013078:	8b 04 85 60 39 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc6a0]
c001307f:	eb 05                	jmp    c0013086 <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c0013081:	40                   	inc    eax
c0013082:	eb da                	jmp    c001305e <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c0013084:	31 c0                	xor    eax,eax
c0013086:	5b                   	pop    ebx
c0013087:	c3                   	ret    

c0013088 <Thr::getDriverOffsetFromAddress(unsigned long)>:
c0013088:	53                   	push   ebx
c0013089:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001308d:	53                   	push   ebx
c001308e:	e8 8c ff ff ff       	call   c001301f <Thr::getDriverBaseFromAddress(unsigned long)>
c0013093:	5a                   	pop    edx
c0013094:	31 d2                	xor    edx,edx
c0013096:	85 c0                	test   eax,eax
c0013098:	74 04                	je     c001309e <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c001309a:	89 da                	mov    edx,ebx
c001309c:	29 c2                	sub    edx,eax
c001309e:	89 d0                	mov    eax,edx
c00130a0:	5b                   	pop    ebx
c00130a1:	c3                   	ret    

c00130a2 <Thr::loadDLL(char const*, bool)>:
c00130a2:	55                   	push   ebp
c00130a3:	57                   	push   edi
c00130a4:	56                   	push   esi
c00130a5:	53                   	push   ebx
c00130a6:	81 ec 34 01 00 00    	sub    esp,0x134
c00130ac:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c00130b3:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c00130ba:	56                   	push   esi
c00130bb:	68 d3 e8 01 c0       	push   0xc001e8d3
c00130c0:	e8 2b 7b ff ff       	call   c000abf0 <Dbg::kprintf(char const*, ...)>
c00130c5:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c00130cc:	e8 90 4d ff ff       	call   c0007e61 <malloc>
c00130d1:	83 c4 0c             	add    esp,0xc
c00130d4:	89 c3                	mov    ebx,eax
c00130d6:	ff 35 30 3d 02 c0    	push   DWORD PTR ds:0xc0023d30
c00130dc:	56                   	push   esi
c00130dd:	50                   	push   eax
c00130de:	e8 83 80 ff ff       	call   c000b166 <File::File(char const*, Process*)>
c00130e3:	83 c4 10             	add    esp,0x10
c00130e6:	85 db                	test   ebx,ebx
c00130e8:	75 3c                	jne    c0013126 <Thr::loadDLL(char const*, bool)+0x84>
c00130ea:	89 f8                	mov    eax,edi
c00130ec:	84 c0                	test   al,al
c00130ee:	0f 84 d2 01 00 00    	je     c00132c6 <Thr::loadDLL(char const*, bool)+0x224>
c00130f4:	55                   	push   ebp
c00130f5:	55                   	push   ebp
c00130f6:	68 e4 e8 01 c0       	push   0xc001e8e4
c00130fb:	8d 6c 24 2c          	lea    ebp,[esp+0x2c]
c00130ff:	55                   	push   ebp
c0013100:	e8 1b d5 fe ff       	call   c0000620 <strcpy>
c0013105:	58                   	pop    eax
c0013106:	5a                   	pop    edx
c0013107:	56                   	push   esi
c0013108:	55                   	push   ebp
c0013109:	e8 d2 d6 fe ff       	call   c00007e0 <strcat>
c001310e:	59                   	pop    ecx
c001310f:	58                   	pop    eax
c0013110:	68 f7 e8 01 c0       	push   0xc001e8f7
c0013115:	55                   	push   ebp
c0013116:	e8 c5 d6 fe ff       	call   c00007e0 <strcat>
c001311b:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001311e:	e8 1c d6 ff ff       	call   c001073f <Krnl::panic(char const*)>
c0013123:	83 c4 10             	add    esp,0x10
c0013126:	51                   	push   ecx
c0013127:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c001312b:	50                   	push   eax
c001312c:	8d 44 24 20          	lea    eax,[esp+0x20]
c0013130:	50                   	push   eax
c0013131:	53                   	push   ebx
c0013132:	e8 9b 83 ff ff       	call   c000b4d2 <File::stat(unsigned long long*, bool*)>
c0013137:	83 c4 10             	add    esp,0x10
c001313a:	85 db                	test   ebx,ebx
c001313c:	74 0c                	je     c001314a <Thr::loadDLL(char const*, bool)+0xa8>
c001313e:	83 ec 0c             	sub    esp,0xc
c0013141:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013143:	53                   	push   ebx
c0013144:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013147:	83 c4 10             	add    esp,0x10
c001314a:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c001314f:	75 0a                	jne    c001315b <Thr::loadDLL(char const*, bool)+0xb9>
c0013151:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013155:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c0013159:	75 3c                	jne    c0013197 <Thr::loadDLL(char const*, bool)+0xf5>
c001315b:	89 f8                	mov    eax,edi
c001315d:	84 c0                	test   al,al
c001315f:	0f 84 49 01 00 00    	je     c00132ae <Thr::loadDLL(char const*, bool)+0x20c>
c0013165:	51                   	push   ecx
c0013166:	51                   	push   ecx
c0013167:	68 e4 e8 01 c0       	push   0xc001e8e4
c001316c:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c0013170:	53                   	push   ebx
c0013171:	e8 aa d4 fe ff       	call   c0000620 <strcpy>
c0013176:	5d                   	pop    ebp
c0013177:	58                   	pop    eax
c0013178:	56                   	push   esi
c0013179:	53                   	push   ebx
c001317a:	e8 61 d6 fe ff       	call   c00007e0 <strcat>
c001317f:	58                   	pop    eax
c0013180:	5a                   	pop    edx
c0013181:	68 f7 e8 01 c0       	push   0xc001e8f7
c0013186:	53                   	push   ebx
c0013187:	e8 54 d6 fe ff       	call   c00007e0 <strcat>
c001318c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001318f:	e8 ab d5 ff ff       	call   c001073f <Krnl::panic(char const*)>
c0013194:	83 c4 10             	add    esp,0x10
c0013197:	52                   	push   edx
c0013198:	6a 03                	push   0x3
c001319a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001319e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00131a2:	05 ff 0f 00 00       	add    eax,0xfff
c00131a7:	83 d2 00             	adc    edx,0x0
c00131aa:	0f ac d0 0c          	shrd   eax,edx,0xc
c00131ae:	50                   	push   eax
c00131af:	ff 35 30 09 02 c0    	push   DWORD PTR ds:0xc0020930
c00131b5:	e8 7c 6f ff ff       	call   c000a136 <VAS::allocatePages(int, int)>
c00131ba:	59                   	pop    ecx
c00131bb:	89 c3                	mov    ebx,eax
c00131bd:	5d                   	pop    ebp
c00131be:	50                   	push   eax
c00131bf:	68 de d6 01 c0       	push   0xc001d6de
c00131c4:	e8 27 7a ff ff       	call   c000abf0 <Dbg::kprintf(char const*, ...)>
c00131c9:	89 34 24             	mov    DWORD PTR [esp],esi
c00131cc:	e8 8f d3 fe ff       	call   c0000560 <strlen>
c00131d1:	8b 2d 40 35 02 c0    	mov    ebp,DWORD PTR ds:0xc0023540
c00131d7:	40                   	inc    eax
c00131d8:	89 04 24             	mov    DWORD PTR [esp],eax
c00131db:	e8 81 4c ff ff       	call   c0007e61 <malloc>
c00131e0:	89 04 ad 60 39 02 c0 	mov    DWORD PTR [ebp*4-0x3ffdc6a0],eax
c00131e7:	58                   	pop    eax
c00131e8:	a1 40 35 02 c0       	mov    eax,ds:0xc0023540
c00131ed:	5a                   	pop    edx
c00131ee:	56                   	push   esi
c00131ef:	ff 34 85 60 39 02 c0 	push   DWORD PTR [eax*4-0x3ffdc6a0]
c00131f6:	e8 25 d4 fe ff       	call   c0000620 <strcpy>
c00131fb:	a1 40 35 02 c0       	mov    eax,ds:0xc0023540
c0013200:	8d 50 01             	lea    edx,[eax+0x1]
c0013203:	89 1c 85 60 37 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc8a0],ebx
c001320a:	89 15 40 35 02 c0    	mov    DWORD PTR ds:0xc0023540,edx
c0013210:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0013214:	83 c4 0c             	add    esp,0xc
c0013217:	89 14 85 60 35 02 c0 	mov    DWORD PTR [eax*4-0x3ffdcaa0],edx
c001321e:	6a 01                	push   0x1
c0013220:	53                   	push   ebx
c0013221:	56                   	push   esi
c0013222:	e8 c2 f6 ff ff       	call   c00128e9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c0013227:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001322b:	83 c4 10             	add    esp,0x10
c001322e:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0013233:	0f 85 89 00 00 00    	jne    c00132c2 <Thr::loadDLL(char const*, bool)+0x220>
c0013239:	89 f8                	mov    eax,edi
c001323b:	84 c0                	test   al,al
c001323d:	74 73                	je     c00132b2 <Thr::loadDLL(char const*, bool)+0x210>
c001323f:	83 ec 0c             	sub    esp,0xc
c0013242:	68 f9 e8 01 c0       	push   0xc001e8f9
c0013247:	e8 f3 d4 ff ff       	call   c001073f <Krnl::panic(char const*)>
c001324c:	83 c4 10             	add    esp,0x10
c001324f:	eb 61                	jmp    c00132b2 <Thr::loadDLL(char const*, bool)+0x210>
c0013251:	50                   	push   eax
c0013252:	50                   	push   eax
c0013253:	89 e8                	mov    eax,ebp
c0013255:	c1 e0 0c             	shl    eax,0xc
c0013258:	01 d8                	add    eax,ebx
c001325a:	50                   	push   eax
c001325b:	ff 35 30 09 02 c0    	push   DWORD PTR ds:0xc0020930
c0013261:	e8 48 6a ff ff       	call   c0009cae <VAS::getPageTableEntry(unsigned long)>
c0013266:	83 c4 10             	add    esp,0x10
c0013269:	8b 00                	mov    eax,DWORD PTR [eax]
c001326b:	a8 60                	test   al,0x60
c001326d:	75 11                	jne    c0013280 <Thr::loadDLL(char const*, bool)+0x1de>
c001326f:	83 ec 0c             	sub    esp,0xc
c0013272:	25 00 f0 ff ff       	and    eax,0xfffff000
c0013277:	50                   	push   eax
c0013278:	e8 4f 4f ff ff       	call   c00081cc <Phys::freePage(unsigned long)>
c001327d:	83 c4 10             	add    esp,0x10
c0013280:	45                   	inc    ebp
c0013281:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013285:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0013289:	05 ff 0f 00 00       	add    eax,0xfff
c001328e:	bf 00 00 00 00       	mov    edi,0x0
c0013293:	83 d2 00             	adc    edx,0x0
c0013296:	0f ac d0 0c          	shrd   eax,edx,0xc
c001329a:	c1 ea 0c             	shr    edx,0xc
c001329d:	39 c5                	cmp    ebp,eax
c001329f:	89 d1                	mov    ecx,edx
c00132a1:	89 f8                	mov    eax,edi
c00132a3:	19 c8                	sbb    eax,ecx
c00132a5:	72 aa                	jb     c0013251 <Thr::loadDLL(char const*, bool)+0x1af>
c00132a7:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00132ac:	75 18                	jne    c00132c6 <Thr::loadDLL(char const*, bool)+0x224>
c00132ae:	31 db                	xor    ebx,ebx
c00132b0:	eb 14                	jmp    c00132c6 <Thr::loadDLL(char const*, bool)+0x224>
c00132b2:	83 ec 0c             	sub    esp,0xc
c00132b5:	68 18 e9 01 c0       	push   0xc001e918
c00132ba:	e8 80 d4 ff ff       	call   c001073f <Krnl::panic(char const*)>
c00132bf:	83 c4 10             	add    esp,0x10
c00132c2:	31 ed                	xor    ebp,ebp
c00132c4:	eb bb                	jmp    c0013281 <Thr::loadDLL(char const*, bool)+0x1df>
c00132c6:	81 c4 2c 01 00 00    	add    esp,0x12c
c00132cc:	89 d8                	mov    eax,ebx
c00132ce:	5b                   	pop    ebx
c00132cf:	5e                   	pop    esi
c00132d0:	5f                   	pop    edi
c00132d1:	5d                   	pop    ebp
c00132d2:	c3                   	ret    

c00132d3 <Thr::executeDLL(unsigned long, void*)>:
c00132d3:	56                   	push   esi
c00132d4:	53                   	push   ebx
c00132d5:	52                   	push   edx
c00132d6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00132da:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00132de:	85 db                	test   ebx,ebx
c00132e0:	75 10                	jne    c00132f2 <Thr::executeDLL(unsigned long, void*)+0x1f>
c00132e2:	83 ec 0c             	sub    esp,0xc
c00132e5:	68 34 e9 01 c0       	push   0xc001e934
c00132ea:	e8 50 d4 ff ff       	call   c001073f <Krnl::panic(char const*)>
c00132ef:	83 c4 10             	add    esp,0x10
c00132f2:	50                   	push   eax
c00132f3:	50                   	push   eax
c00132f4:	53                   	push   ebx
c00132f5:	68 5e e9 01 c0       	push   0xc001e95e
c00132fa:	e8 f1 78 ff ff       	call   c000abf0 <Dbg::kprintf(char const*, ...)>
c00132ff:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0013303:	89 d8                	mov    eax,ebx
c0013305:	83 c4 14             	add    esp,0x14
c0013308:	5b                   	pop    ebx
c0013309:	5e                   	pop    esi
c001330a:	ff e0                	jmp    eax

c001330c <userModeEntryPoint(void*)>:
c001330c:	a1 08 3d 02 c0       	mov    eax,ds:0xc0023d08
c0013311:	48                   	dec    eax
c0013312:	a3 08 3d 02 c0       	mov    ds:0xc0023d08,eax
c0013317:	75 03                	jne    c001331c <userModeEntryPoint(void*)+0x10>
c0013319:	fb                   	sti    
c001331a:	66 90                	xchg   ax,ax
c001331c:	fb                   	sti    
c001331d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013322:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013325:	8b 80 0e 05 00 00    	mov    eax,DWORD PTR [eax+0x50e]
c001332b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001332f:	e9 2b cf fe ff       	jmp    c000025f <goToUsermode>

c0013334 <changeTSS>:
c0013334:	83 ec 14             	sub    esp,0x14
c0013337:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001333c:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c001333f:	b8 00 00 e8 01       	mov    eax,0x1e80000
c0013344:	c1 e2 15             	shl    edx,0x15
c0013347:	29 d0                	sub    eax,edx
c0013349:	50                   	push   eax
c001334a:	a1 44 08 02 c0       	mov    eax,ds:0xc0020844
c001334f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0013355:	05 7c 11 00 00       	add    eax,0x117c
c001335a:	50                   	push   eax
c001335b:	e8 90 5f ff ff       	call   c00092f0 <TSS::setESP(unsigned long)>
c0013360:	83 c4 1c             	add    esp,0x1c
c0013363:	c3                   	ret    

c0013364 <switchToThread(ThreadControlBlock*)>:
c0013364:	57                   	push   edi
c0013365:	a1 04 3d 02 c0       	mov    eax,ds:0xc0023d04
c001336a:	56                   	push   esi
c001336b:	85 c0                	test   eax,eax
c001336d:	53                   	push   ebx
c001336e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013372:	0f 85 90 00 00 00    	jne    c0013408 <switchToThread(ThreadControlBlock*)+0xa4>
c0013378:	8a 53 40             	mov    dl,BYTE PTR [ebx+0x40]
c001337b:	80 fa ff             	cmp    dl,0xff
c001337e:	0f 84 80 00 00 00    	je     c0013404 <switchToThread(ThreadControlBlock*)+0xa0>
c0013384:	81 e2 ff 00 00 00    	and    edx,0xff
c001338a:	b8 00 04 00 00       	mov    eax,0x400
c001338f:	29 d0                	sub    eax,edx
c0013391:	d1 f8                	sar    eax,1
c0013393:	03 43 34             	add    eax,DWORD PTR [ebx+0x34]
c0013396:	66 90                	xchg   ax,ax
c0013398:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c001339b:	e8 7b 24 00 00       	call   c001581b <HalQueryPerformanceCounter()>
c00133a0:	a3 48 3d 02 c0       	mov    ds:0xc0023d48,eax
c00133a5:	89 15 4c 3d 02 c0    	mov    DWORD PTR ds:0xc0023d4c,edx
c00133ab:	89 c6                	mov    esi,eax
c00133ad:	89 d7                	mov    edi,edx
c00133af:	2b 35 38 3d 02 c0    	sub    esi,DWORD PTR ds:0xc0023d38
c00133b5:	a3 38 3d 02 c0       	mov    ds:0xc0023d38,eax
c00133ba:	1b 3d 3c 3d 02 c0    	sbb    edi,DWORD PTR ds:0xc0023d3c
c00133c0:	89 35 40 3d 02 c0    	mov    DWORD PTR ds:0xc0023d40,esi
c00133c6:	89 3d 44 3d 02 c0    	mov    DWORD PTR ds:0xc0023d44,edi
c00133cc:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00133d2:	89 15 3c 3d 02 c0    	mov    DWORD PTR ds:0xc0023d3c,edx
c00133d8:	8b 41 10             	mov    eax,DWORD PTR [ecx+0x10]
c00133db:	8b 51 14             	mov    edx,DWORD PTR [ecx+0x14]
c00133de:	01 c6                	add    esi,eax
c00133e0:	11 d7                	adc    edi,edx
c00133e2:	89 71 10             	mov    DWORD PTR [ecx+0x10],esi
c00133e5:	83 ec 0c             	sub    esp,0xc
c00133e8:	89 79 14             	mov    DWORD PTR [ecx+0x14],edi
c00133eb:	53                   	push   ebx
c00133ec:	e8 a6 ce fe ff       	call   c0000297 <switchToThreadASM>
c00133f1:	0f 20 c0             	mov    eax,cr0
c00133f4:	83 c8 08             	or     eax,0x8
c00133f7:	0f 22 c0             	mov    cr0,eax
c00133fa:	83 c4 10             	add    esp,0x10
c00133fd:	5b                   	pop    ebx
c00133fe:	5e                   	pop    esi
c00133ff:	5f                   	pop    edi
c0013400:	c3                   	ret    
c0013401:	8d 76 00             	lea    esi,[esi+0x0]
c0013404:	31 c0                	xor    eax,eax
c0013406:	eb 90                	jmp    c0013398 <switchToThread(ThreadControlBlock*)+0x34>
c0013408:	5b                   	pop    ebx
c0013409:	c7 05 00 3d 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0023d00,0x1
c0013413:	5e                   	pop    esi
c0013414:	5f                   	pop    edi
c0013415:	c3                   	ret    
c0013416:	66 90                	xchg   ax,ax

c0013418 <Process::addArgs(char**)>:
c0013418:	57                   	push   edi
c0013419:	56                   	push   esi
c001341a:	53                   	push   ebx
c001341b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001341f:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0013423:	c7 86 16 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x516],0x0
c001342d:	85 ff                	test   edi,edi
c001342f:	74 43                	je     c0013474 <Process::addArgs(char**)+0x5c>
c0013431:	8b 07                	mov    eax,DWORD PTR [edi]
c0013433:	85 c0                	test   eax,eax
c0013435:	74 3d                	je     c0013474 <Process::addArgs(char**)+0x5c>
c0013437:	31 db                	xor    ebx,ebx
c0013439:	8d 76 00             	lea    esi,[esi+0x0]
c001343c:	83 ec 0c             	sub    esp,0xc
c001343f:	50                   	push   eax
c0013440:	e8 1b d1 fe ff       	call   c0000560 <strlen>
c0013445:	40                   	inc    eax
c0013446:	89 04 24             	mov    DWORD PTR [esp],eax
c0013449:	e8 13 4a ff ff       	call   c0007e61 <malloc>
c001344e:	89 84 9e 1a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x51a],eax
c0013455:	5a                   	pop    edx
c0013456:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c0013459:	59                   	pop    ecx
c001345a:	43                   	inc    ebx
c001345b:	52                   	push   edx
c001345c:	50                   	push   eax
c001345d:	e8 be d1 fe ff       	call   c0000620 <strcpy>
c0013462:	ff 86 16 05 00 00    	inc    DWORD PTR [esi+0x516]
c0013468:	83 c4 10             	add    esp,0x10
c001346b:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001346e:	85 c0                	test   eax,eax
c0013470:	75 ca                	jne    c001343c <Process::addArgs(char**)+0x24>
c0013472:	66 90                	xchg   ax,ax
c0013474:	5b                   	pop    ebx
c0013475:	5e                   	pop    esi
c0013476:	5f                   	pop    edi
c0013477:	c3                   	ret    

c0013478 <Process::Process(char const*, Process*, char**)>:
c0013478:	56                   	push   esi
c0013479:	53                   	push   ebx
c001347a:	83 ec 14             	sub    esp,0x14
c001347d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013481:	05 0c 02 00 00       	add    eax,0x20c
c0013486:	bb 07 00 00 00       	mov    ebx,0x7
c001348b:	89 c6                	mov    esi,eax
c001348d:	8d 76 00             	lea    esi,[esi+0x0]
c0013490:	85 db                	test   ebx,ebx
c0013492:	78 14                	js     c00134a8 <Process::Process(char const*, Process*, char**)+0x30>
c0013494:	83 ec 0c             	sub    esp,0xc
c0013497:	56                   	push   esi
c0013498:	e8 cf 94 00 00       	call   c001c96c <ThreadControlBlock::ThreadControlBlock()>
c001349d:	83 c4 10             	add    esp,0x10
c00134a0:	83 c6 5f             	add    esi,0x5f
c00134a3:	4b                   	dec    ebx
c00134a4:	eb ea                	jmp    c0013490 <Process::Process(char const*, Process*, char**)+0x18>
c00134a6:	66 90                	xchg   ax,ax
c00134a8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00134ac:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c00134b3:	83 ec 0c             	sub    esp,0xc
c00134b6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00134ba:	e8 09 d1 ff ff       	call   c00105c8 <Krnl::newProcessEnv(Process*)>
c00134bf:	83 c4 10             	add    esp,0x10
c00134c2:	89 c2                	mov    edx,eax
c00134c4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00134c8:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c00134ce:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00134d2:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c00134db:	a1 30 f8 01 c0       	mov    eax,ds:0xc001f830
c00134e0:	8d 50 01             	lea    edx,[eax+0x1]
c00134e3:	89 15 30 f8 01 c0    	mov    DWORD PTR ds:0xc001f830,edx
c00134e9:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00134ed:	89 02                	mov    DWORD PTR [edx],eax
c00134ef:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c00134f7:	83 ec 0c             	sub    esp,0xc
c00134fa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00134fe:	e8 5e 49 ff ff       	call   c0007e61 <malloc>
c0013503:	83 c4 10             	add    esp,0x10
c0013506:	89 c3                	mov    ebx,eax
c0013508:	83 ec 08             	sub    esp,0x8
c001350b:	6a 00                	push   0x0
c001350d:	53                   	push   ebx
c001350e:	e8 cd 6f ff ff       	call   c000a4e0 <VAS::VAS(bool)>
c0013513:	83 c4 10             	add    esp,0x10
c0013516:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001351a:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c0013520:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013524:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c001352e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013532:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0013536:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c001353c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013540:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0013546:	85 c0                	test   eax,eax
c0013548:	74 42                	je     c001358c <Process::Process(char const*, Process*, char**)+0x114>
c001354a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001354e:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0013554:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c001355a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001355e:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0013564:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013568:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c001356e:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0013574:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013578:	05 0c 01 00 00       	add    eax,0x10c
c001357d:	83 ec 08             	sub    esp,0x8
c0013580:	52                   	push   edx
c0013581:	50                   	push   eax
c0013582:	e8 99 d0 fe ff       	call   c0000620 <strcpy>
c0013587:	83 c4 10             	add    esp,0x10
c001358a:	eb 64                	jmp    c00135f0 <Process::Process(char const*, Process*, char**)+0x178>
c001358c:	c7 44 24 04 34 01 00 00 	mov    DWORD PTR [esp+0x4],0x134
c0013594:	83 ec 0c             	sub    esp,0xc
c0013597:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001359b:	e8 c1 48 ff ff       	call   c0007e61 <malloc>
c00135a0:	83 c4 10             	add    esp,0x10
c00135a3:	89 c3                	mov    ebx,eax
c00135a5:	83 ec 08             	sub    esp,0x8
c00135a8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00135ac:	53                   	push   ebx
c00135ad:	e8 e2 5a ff ff       	call   c0009094 <VgaText::VgaText(char const*)>
c00135b2:	83 c4 10             	add    esp,0x10
c00135b5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00135b9:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c00135bf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00135c3:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00135c9:	83 ec 0c             	sub    esp,0xc
c00135cc:	50                   	push   eax
c00135cd:	e8 62 53 ff ff       	call   c0008934 <addToTerminalCycle(VgaText*)>
c00135d2:	83 c4 10             	add    esp,0x10
c00135d5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00135d9:	05 0c 01 00 00       	add    eax,0x10c
c00135de:	83 ec 08             	sub    esp,0x8
c00135e1:	68 7d e9 01 c0       	push   0xc001e97d
c00135e6:	50                   	push   eax
c00135e7:	e8 34 d0 fe ff       	call   c0000620 <strcpy>
c00135ec:	83 c4 10             	add    esp,0x10
c00135ef:	90                   	nop
c00135f0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00135f4:	83 c0 0c             	add    eax,0xc
c00135f7:	83 ec 08             	sub    esp,0x8
c00135fa:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00135fe:	50                   	push   eax
c00135ff:	e8 1c d0 fe ff       	call   c0000620 <strcpy>
c0013604:	83 c4 10             	add    esp,0x10
c0013607:	83 ec 08             	sub    esp,0x8
c001360a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001360e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013612:	e8 01 fe ff ff       	call   c0013418 <Process::addArgs(char**)>
c0013617:	83 c4 10             	add    esp,0x10
c001361a:	83 ec 08             	sub    esp,0x8
c001361d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013621:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013625:	e8 89 ed ff ff       	call   c00123b3 <Thr::loadProgramIntoMemory(Process*, char const*)>
c001362a:	83 c4 10             	add    esp,0x10
c001362d:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0013631:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0013635:	83 f0 01             	xor    eax,0x1
c0013638:	88 c2                	mov    dl,al
c001363a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001363e:	88 90 1e 07 00 00    	mov    BYTE PTR [eax+0x71e],dl
c0013644:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0013648:	25 ff 00 00 00       	and    eax,0xff
c001364d:	83 ec 08             	sub    esp,0x8
c0013650:	50                   	push   eax
c0013651:	68 d4 e9 01 c0       	push   0xc001e9d4
c0013656:	e8 95 75 ff ff       	call   c000abf0 <Dbg::kprintf(char const*, ...)>
c001365b:	83 c4 10             	add    esp,0x10
c001365e:	90                   	nop
c001365f:	83 c4 14             	add    esp,0x14
c0013662:	5b                   	pop    ebx
c0013663:	5e                   	pop    esi
c0013664:	c3                   	ret    
c0013665:	90                   	nop
c0013666:	66 90                	xchg   ax,ax

c0013668 <Process::Process(bool, char const*, Process*, char**)>:
c0013668:	56                   	push   esi
c0013669:	53                   	push   ebx
c001366a:	83 ec 24             	sub    esp,0x24
c001366d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0013671:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0013675:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013679:	05 0c 02 00 00       	add    eax,0x20c
c001367e:	bb 07 00 00 00       	mov    ebx,0x7
c0013683:	89 c6                	mov    esi,eax
c0013685:	8d 76 00             	lea    esi,[esi+0x0]
c0013688:	85 db                	test   ebx,ebx
c001368a:	78 14                	js     c00136a0 <Process::Process(bool, char const*, Process*, char**)+0x38>
c001368c:	83 ec 0c             	sub    esp,0xc
c001368f:	56                   	push   esi
c0013690:	e8 d7 92 00 00       	call   c001c96c <ThreadControlBlock::ThreadControlBlock()>
c0013695:	83 c4 10             	add    esp,0x10
c0013698:	83 c6 5f             	add    esi,0x5f
c001369b:	4b                   	dec    ebx
c001369c:	eb ea                	jmp    c0013688 <Process::Process(bool, char const*, Process*, char**)+0x20>
c001369e:	66 90                	xchg   ax,ax
c00136a0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00136a4:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c00136ab:	83 ec 0c             	sub    esp,0xc
c00136ae:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00136b2:	e8 11 cf ff ff       	call   c00105c8 <Krnl::newProcessEnv(Process*)>
c00136b7:	83 c4 10             	add    esp,0x10
c00136ba:	89 c2                	mov    edx,eax
c00136bc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00136c0:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c00136c6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00136ca:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c00136d3:	a1 30 f8 01 c0       	mov    eax,ds:0xc001f830
c00136d8:	8d 50 01             	lea    edx,[eax+0x1]
c00136db:	89 15 30 f8 01 c0    	mov    DWORD PTR ds:0xc001f830,edx
c00136e1:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00136e5:	89 02                	mov    DWORD PTR [edx],eax
c00136e7:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c00136ef:	83 ec 0c             	sub    esp,0xc
c00136f2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00136f6:	e8 66 47 ff ff       	call   c0007e61 <malloc>
c00136fb:	83 c4 10             	add    esp,0x10
c00136fe:	89 c3                	mov    ebx,eax
c0013700:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0013704:	25 ff 00 00 00       	and    eax,0xff
c0013709:	83 ec 08             	sub    esp,0x8
c001370c:	50                   	push   eax
c001370d:	53                   	push   ebx
c001370e:	e8 cd 6d ff ff       	call   c000a4e0 <VAS::VAS(bool)>
c0013713:	83 c4 10             	add    esp,0x10
c0013716:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001371a:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c0013720:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013724:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c001372e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013732:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0013736:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c001373c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013740:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0013746:	85 c0                	test   eax,eax
c0013748:	74 42                	je     c001378c <Process::Process(bool, char const*, Process*, char**)+0x124>
c001374a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001374e:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0013754:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c001375a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001375e:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0013764:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013768:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c001376e:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0013774:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013778:	05 0c 01 00 00       	add    eax,0x10c
c001377d:	83 ec 08             	sub    esp,0x8
c0013780:	52                   	push   edx
c0013781:	50                   	push   eax
c0013782:	e8 99 ce fe ff       	call   c0000620 <strcpy>
c0013787:	83 c4 10             	add    esp,0x10
c001378a:	eb 64                	jmp    c00137f0 <Process::Process(bool, char const*, Process*, char**)+0x188>
c001378c:	c7 44 24 18 34 01 00 00 	mov    DWORD PTR [esp+0x18],0x134
c0013794:	83 ec 0c             	sub    esp,0xc
c0013797:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001379b:	e8 c1 46 ff ff       	call   c0007e61 <malloc>
c00137a0:	83 c4 10             	add    esp,0x10
c00137a3:	89 c3                	mov    ebx,eax
c00137a5:	83 ec 08             	sub    esp,0x8
c00137a8:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00137ac:	53                   	push   ebx
c00137ad:	e8 e2 58 ff ff       	call   c0009094 <VgaText::VgaText(char const*)>
c00137b2:	83 c4 10             	add    esp,0x10
c00137b5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00137b9:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c00137bf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00137c3:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00137c9:	83 ec 0c             	sub    esp,0xc
c00137cc:	50                   	push   eax
c00137cd:	e8 62 51 ff ff       	call   c0008934 <addToTerminalCycle(VgaText*)>
c00137d2:	83 c4 10             	add    esp,0x10
c00137d5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00137d9:	05 0c 01 00 00       	add    eax,0x10c
c00137de:	83 ec 08             	sub    esp,0x8
c00137e1:	68 7d e9 01 c0       	push   0xc001e97d
c00137e6:	50                   	push   eax
c00137e7:	e8 34 ce fe ff       	call   c0000620 <strcpy>
c00137ec:	83 c4 10             	add    esp,0x10
c00137ef:	90                   	nop
c00137f0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00137f4:	83 c0 0c             	add    eax,0xc
c00137f7:	83 ec 08             	sub    esp,0x8
c00137fa:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00137fe:	50                   	push   eax
c00137ff:	e8 1c ce fe ff       	call   c0000620 <strcpy>
c0013804:	83 c4 10             	add    esp,0x10
c0013807:	83 ec 08             	sub    esp,0x8
c001380a:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001380e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0013812:	e8 01 fc ff ff       	call   c0013418 <Process::addArgs(char**)>
c0013817:	83 c4 10             	add    esp,0x10
c001381a:	90                   	nop
c001381b:	83 c4 24             	add    esp,0x24
c001381e:	5b                   	pop    ebx
c001381f:	5e                   	pop    esi
c0013820:	c3                   	ret    
c0013821:	8d 76 00             	lea    esi,[esi+0x0]

c0013824 <taskStartupFunction>:
c0013824:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013829:	8b 40 41             	mov    eax,DWORD PTR [eax+0x41]
c001382c:	c3                   	ret    
c001382d:	90                   	nop
c001382e:	66 90                	xchg   ax,ax

c0013830 <Semaphore::Semaphore(int)>:
c0013830:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013834:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0013838:	89 10                	mov    DWORD PTR [eax],edx
c001383a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001383e:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0013845:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013849:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013850:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013854:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001385b:	90                   	nop
c001385c:	c3                   	ret    
c001385d:	90                   	nop
c001385e:	66 90                	xchg   ax,ax

c0013860 <Mutex::Mutex()>:
c0013860:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013864:	6a 01                	push   0x1
c0013866:	50                   	push   eax
c0013867:	e8 c4 ff ff ff       	call   c0013830 <Semaphore::Semaphore(int)>
c001386c:	83 c4 08             	add    esp,0x8
c001386f:	90                   	nop
c0013870:	c3                   	ret    
c0013871:	90                   	nop
c0013872:	66 90                	xchg   ax,ax

c0013874 <Process::createThread(void (*)(void*), void*, int)>:
c0013874:	57                   	push   edi
c0013875:	31 c9                	xor    ecx,ecx
c0013877:	56                   	push   esi
c0013878:	53                   	push   ebx
c0013879:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001387d:	66 8b b3 04 05 00 00 	mov    si,WORD PTR [ebx+0x504]
c0013884:	89 f2                	mov    edx,esi
c0013886:	66 90                	xchg   ax,ax
c0013888:	31 c0                	xor    eax,eax
c001388a:	66 89 d0             	mov    ax,dx
c001388d:	83 e2 01             	and    edx,0x1
c0013890:	74 12                	je     c00138a4 <Process::createThread(void (*)(void*), void*, int)+0x30>
c0013892:	d1 f8                	sar    eax,1
c0013894:	41                   	inc    ecx
c0013895:	89 c2                	mov    edx,eax
c0013897:	83 f9 10             	cmp    ecx,0x10
c001389a:	75 ec                	jne    c0013888 <Process::createThread(void (*)(void*), void*, int)+0x14>
c001389c:	31 db                	xor    ebx,ebx
c001389e:	89 d8                	mov    eax,ebx
c00138a0:	5b                   	pop    ebx
c00138a1:	5e                   	pop    esi
c00138a2:	5f                   	pop    edi
c00138a3:	c3                   	ret    
c00138a4:	b8 01 00 00 00       	mov    eax,0x1
c00138a9:	d3 e0                	shl    eax,cl
c00138ab:	09 c6                	or     esi,eax
c00138ad:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c00138b0:	66 89 b3 04 05 00 00 	mov    WORD PTR [ebx+0x504],si
c00138b7:	01 c0                	add    eax,eax
c00138b9:	01 c8                	add    eax,ecx
c00138bb:	8d 04 80             	lea    eax,[eax+eax*4]
c00138be:	01 d8                	add    eax,ebx
c00138c0:	80 b8 6a 02 00 00 00 	cmp    BYTE PTR [eax+0x26a],0x0
c00138c7:	75 0b                	jne    c00138d4 <Process::createThread(void (*)(void*), void*, int)+0x60>
c00138c9:	c7 80 61 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x261],0x0
c00138d3:	90                   	nop
c00138d4:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c00138da:	83 ec 08             	sub    esp,0x8
c00138dd:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00138e0:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c00138e3:	01 c0                	add    eax,eax
c00138e5:	01 c8                	add    eax,ecx
c00138e7:	8d 3c 80             	lea    edi,[eax+eax*4]
c00138ea:	8d 04 3b             	lea    eax,[ebx+edi*1]
c00138ed:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c00138f3:	89 98 48 02 00 00    	mov    DWORD PTR [eax+0x248],ebx
c00138f9:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00138fd:	89 88 44 02 00 00    	mov    DWORD PTR [eax+0x244],ecx
c0013903:	89 90 4d 02 00 00    	mov    DWORD PTR [eax+0x24d],edx
c0013909:	8d 9c 3b 0c 02 00 00 	lea    ebx,[ebx+edi*1+0x20c]
c0013910:	89 ca                	mov    edx,ecx
c0013912:	f7 da                	neg    edx
c0013914:	c1 e2 15             	shl    edx,0x15
c0013917:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c001391d:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c0013923:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0013927:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c0013931:	88 90 4c 02 00 00    	mov    BYTE PTR [eax+0x24c],dl
c0013937:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001393b:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c0013941:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c001394b:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c0013955:	53                   	push   ebx
c0013956:	68 24 3d 02 c0       	push   0xc0023d24
c001395b:	e8 ac 8d 00 00       	call   c001c70c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0013960:	83 c4 10             	add    esp,0x10
c0013963:	89 d8                	mov    eax,ebx
c0013965:	5b                   	pop    ebx
c0013966:	5e                   	pop    esi
c0013967:	5f                   	pop    edi
c0013968:	c3                   	ret    
c0013969:	90                   	nop
c001396a:	66 90                	xchg   ax,ax

c001396c <Process::createUserThread()>:
c001396c:	83 ec 0c             	sub    esp,0xc
c001396f:	68 80 00 00 00       	push   0x80
c0013974:	6a 00                	push   0x0
c0013976:	68 0c 33 01 c0       	push   0xc001330c
c001397b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001397f:	50                   	push   eax
c0013980:	e8 ef fe ff ff       	call   c0013874 <Process::createThread(void (*)(void*), void*, int)>
c0013985:	83 c4 1c             	add    esp,0x1c
c0013988:	c3                   	ret    
c0013989:	8d 76 00             	lea    esi,[esi+0x0]

c001398c <setupMultitasking(void (*)())>:
c001398c:	56                   	push   esi
c001398d:	53                   	push   ebx
c001398e:	53                   	push   ebx
c001398f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013993:	eb 13                	jmp    c00139a8 <setupMultitasking(void (*)())+0x1c>
c0013995:	8d 76 00             	lea    esi,[esi+0x0]
c0013998:	83 ec 0c             	sub    esp,0xc
c001399b:	68 24 3d 02 c0       	push   0xc0023d24
c00139a0:	e8 af 8c 00 00       	call   c001c654 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00139a5:	83 c4 10             	add    esp,0x10
c00139a8:	83 ec 0c             	sub    esp,0xc
c00139ab:	68 24 3d 02 c0       	push   0xc0023d24
c00139b0:	e8 7b 8c 00 00       	call   c001c630 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00139b5:	83 c4 10             	add    esp,0x10
c00139b8:	84 c0                	test   al,al
c00139ba:	74 dc                	je     c0013998 <setupMultitasking(void (*)())+0xc>
c00139bc:	83 ec 0c             	sub    esp,0xc
c00139bf:	68 1f 07 00 00       	push   0x71f
c00139c4:	e8 98 44 ff ff       	call   c0007e61 <malloc>
c00139c9:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00139d0:	89 c3                	mov    ebx,eax
c00139d2:	6a 00                	push   0x0
c00139d4:	68 81 e9 01 c0       	push   0xc001e981
c00139d9:	6a 01                	push   0x1
c00139db:	50                   	push   eax
c00139dc:	e8 87 fc ff ff       	call   c0013668 <Process::Process(bool, char const*, Process*, char**)>
c00139e1:	83 c4 14             	add    esp,0x14
c00139e4:	8b 83 06 05 00 00    	mov    eax,DWORD PTR [ebx+0x506]
c00139ea:	89 1d 30 3d 02 c0    	mov    DWORD PTR ds:0xc0023d30,ebx
c00139f0:	50                   	push   eax
c00139f1:	e8 9b 51 ff ff       	call   c0008b91 <setActiveTerminal(VgaText*)>
c00139f6:	66 83 8b 04 05 00 00 01 	or     WORD PTR [ebx+0x504],0x1
c00139fe:	c7 83 61 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x261],0x0
c0013a08:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c0013a0e:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0013a11:	c7 83 44 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x244],0x0
c0013a1b:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c0013a21:	89 9b 48 02 00 00    	mov    DWORD PTR [ebx+0x248],ebx
c0013a27:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c0013a31:	c7 83 40 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x240],0x2faf080
c0013a3b:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c0013a45:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c0013a4b:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c0013a51:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c0013a5b:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c0013a61:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c0013a6b:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0013a71:	5a                   	pop    edx
c0013a72:	59                   	pop    ecx
c0013a73:	68 7d e9 01 c0       	push   0xc001e97d
c0013a78:	50                   	push   eax
c0013a79:	e8 a2 cb fe ff       	call   c0000620 <strcpy>
c0013a7e:	c6 83 4c 02 00 00 80 	mov    BYTE PTR [ebx+0x24c],0x80
c0013a85:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0013a89:	83 c4 14             	add    esp,0x14
c0013a8c:	5b                   	pop    ebx
c0013a8d:	5e                   	pop    esi
c0013a8e:	e9 f6 c7 fe ff       	jmp    c0000289 <switchToThreadASMFirstTime>
c0013a93:	90                   	nop

c0013a94 <schedule()>:
c0013a94:	8b 15 04 3d 02 c0    	mov    edx,DWORD PTR ds:0xc0023d04
c0013a9a:	85 d2                	test   edx,edx
c0013a9c:	74 0e                	je     c0013aac <schedule()+0x18>
c0013a9e:	c7 05 00 3d 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0023d00,0x1
c0013aa8:	c3                   	ret    
c0013aa9:	8d 76 00             	lea    esi,[esi+0x0]
c0013aac:	53                   	push   ebx
c0013aad:	83 ec 14             	sub    esp,0x14
c0013ab0:	68 24 3d 02 c0       	push   0xc0023d24
c0013ab5:	e8 76 8b 00 00       	call   c001c630 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0013aba:	83 c4 10             	add    esp,0x10
c0013abd:	84 c0                	test   al,al
c0013abf:	75 3b                	jne    c0013afc <schedule()+0x68>
c0013ac1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013ac6:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0013ac9:	4a                   	dec    edx
c0013aca:	74 38                	je     c0013b04 <schedule()+0x70>
c0013acc:	83 ec 0c             	sub    esp,0xc
c0013acf:	68 24 3d 02 c0       	push   0xc0023d24
c0013ad4:	e8 73 8b 00 00       	call   c001c64c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013ad9:	c7 04 24 24 3d 02 c0 	mov    DWORD PTR [esp],0xc0023d24
c0013ae0:	89 c3                	mov    ebx,eax
c0013ae2:	e8 6d 8b 00 00       	call   c001c654 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0013ae7:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c0013aee:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013af1:	e8 6e f8 ff ff       	call   c0013364 <switchToThread(ThreadControlBlock*)>
c0013af6:	83 c4 10             	add    esp,0x10
c0013af9:	8d 76 00             	lea    esi,[esi+0x0]
c0013afc:	83 c4 08             	add    esp,0x8
c0013aff:	5b                   	pop    ebx
c0013b00:	c3                   	ret    
c0013b01:	8d 76 00             	lea    esi,[esi+0x0]
c0013b04:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0013b0b:	83 ec 08             	sub    esp,0x8
c0013b0e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013b13:	50                   	push   eax
c0013b14:	68 24 3d 02 c0       	push   0xc0023d24
c0013b19:	e8 ee 8b 00 00       	call   c001c70c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0013b1e:	83 c4 10             	add    esp,0x10
c0013b21:	eb a9                	jmp    c0013acc <schedule()+0x38>
c0013b23:	90                   	nop

c0013b24 <Semaphore::tryAcquire()>:
c0013b24:	53                   	push   ebx
c0013b25:	83 ec 08             	sub    esp,0x8
c0013b28:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0013b2c:	fa                   	cli    
c0013b2d:	a1 08 3d 02 c0       	mov    eax,ds:0xc0023d08
c0013b32:	8d 50 01             	lea    edx,[eax+0x1]
c0013b35:	89 15 08 3d 02 c0    	mov    DWORD PTR ds:0xc0023d08,edx
c0013b3b:	8b 15 04 3d 02 c0    	mov    edx,DWORD PTR ds:0xc0023d04
c0013b41:	8d 5a 01             	lea    ebx,[edx+0x1]
c0013b44:	89 1d 04 3d 02 c0    	mov    DWORD PTR ds:0xc0023d04,ebx
c0013b4a:	8b 59 0c             	mov    ebx,DWORD PTR [ecx+0xc]
c0013b4d:	3b 19                	cmp    ebx,DWORD PTR [ecx]
c0013b4f:	7c 33                	jl     c0013b84 <Semaphore::tryAcquire()+0x60>
c0013b51:	89 15 04 3d 02 c0    	mov    DWORD PTR ds:0xc0023d04,edx
c0013b57:	85 d2                	test   edx,edx
c0013b59:	75 0d                	jne    c0013b68 <Semaphore::tryAcquire()+0x44>
c0013b5b:	8b 15 00 3d 02 c0    	mov    edx,DWORD PTR ds:0xc0023d00
c0013b61:	85 d2                	test   edx,edx
c0013b63:	75 6b                	jne    c0013bd0 <Semaphore::tryAcquire()+0xac>
c0013b65:	8d 76 00             	lea    esi,[esi+0x0]
c0013b68:	a3 08 3d 02 c0       	mov    ds:0xc0023d08,eax
c0013b6d:	85 c0                	test   eax,eax
c0013b6f:	74 0b                	je     c0013b7c <Semaphore::tryAcquire()+0x58>
c0013b71:	8d 76 00             	lea    esi,[esi+0x0]
c0013b74:	31 c0                	xor    eax,eax
c0013b76:	83 c4 08             	add    esp,0x8
c0013b79:	5b                   	pop    ebx
c0013b7a:	c3                   	ret    
c0013b7b:	90                   	nop
c0013b7c:	fb                   	sti    
c0013b7d:	83 c4 08             	add    esp,0x8
c0013b80:	5b                   	pop    ebx
c0013b81:	c3                   	ret    
c0013b82:	66 90                	xchg   ax,ax
c0013b84:	43                   	inc    ebx
c0013b85:	89 15 04 3d 02 c0    	mov    DWORD PTR ds:0xc0023d04,edx
c0013b8b:	89 59 0c             	mov    DWORD PTR [ecx+0xc],ebx
c0013b8e:	85 d2                	test   edx,edx
c0013b90:	75 22                	jne    c0013bb4 <Semaphore::tryAcquire()+0x90>
c0013b92:	8b 0d 00 3d 02 c0    	mov    ecx,DWORD PTR ds:0xc0023d00
c0013b98:	85 c9                	test   ecx,ecx
c0013b9a:	74 18                	je     c0013bb4 <Semaphore::tryAcquire()+0x90>
c0013b9c:	c7 05 00 3d 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023d00,0x0
c0013ba6:	e8 e9 fe ff ff       	call   c0013a94 <schedule()>
c0013bab:	a1 08 3d 02 c0       	mov    eax,ds:0xc0023d08
c0013bb0:	48                   	dec    eax
c0013bb1:	8d 76 00             	lea    esi,[esi+0x0]
c0013bb4:	a3 08 3d 02 c0       	mov    ds:0xc0023d08,eax
c0013bb9:	85 c0                	test   eax,eax
c0013bbb:	75 0b                	jne    c0013bc8 <Semaphore::tryAcquire()+0xa4>
c0013bbd:	fb                   	sti    
c0013bbe:	b0 01                	mov    al,0x1
c0013bc0:	83 c4 08             	add    esp,0x8
c0013bc3:	5b                   	pop    ebx
c0013bc4:	c3                   	ret    
c0013bc5:	8d 76 00             	lea    esi,[esi+0x0]
c0013bc8:	b0 01                	mov    al,0x1
c0013bca:	83 c4 08             	add    esp,0x8
c0013bcd:	5b                   	pop    ebx
c0013bce:	c3                   	ret    
c0013bcf:	90                   	nop
c0013bd0:	c7 05 00 3d 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023d00,0x0
c0013bda:	e8 b5 fe ff ff       	call   c0013a94 <schedule()>
c0013bdf:	a1 08 3d 02 c0       	mov    eax,ds:0xc0023d08
c0013be4:	48                   	dec    eax
c0013be5:	a3 08 3d 02 c0       	mov    ds:0xc0023d08,eax
c0013bea:	85 c0                	test   eax,eax
c0013bec:	75 86                	jne    c0013b74 <Semaphore::tryAcquire()+0x50>
c0013bee:	eb 8c                	jmp    c0013b7c <Semaphore::tryAcquire()+0x58>

c0013bf0 <Semaphore::assertLocked(char const*)>:
c0013bf0:	83 ec 0c             	sub    esp,0xc
c0013bf3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013bf7:	fa                   	cli    
c0013bf8:	ff 05 08 3d 02 c0    	inc    DWORD PTR ds:0xc0023d08
c0013bfe:	a1 04 3d 02 c0       	mov    eax,ds:0xc0023d04
c0013c03:	8d 48 01             	lea    ecx,[eax+0x1]
c0013c06:	89 0d 04 3d 02 c0    	mov    DWORD PTR ds:0xc0023d04,ecx
c0013c0c:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0013c0e:	39 4a 0c             	cmp    DWORD PTR [edx+0xc],ecx
c0013c11:	7c 29                	jl     c0013c3c <Semaphore::assertLocked(char const*)+0x4c>
c0013c13:	90                   	nop
c0013c14:	a3 04 3d 02 c0       	mov    ds:0xc0023d04,eax
c0013c19:	85 c0                	test   eax,eax
c0013c1b:	75 0b                	jne    c0013c28 <Semaphore::assertLocked(char const*)+0x38>
c0013c1d:	a1 00 3d 02 c0       	mov    eax,ds:0xc0023d00
c0013c22:	85 c0                	test   eax,eax
c0013c24:	75 2e                	jne    c0013c54 <Semaphore::assertLocked(char const*)+0x64>
c0013c26:	66 90                	xchg   ax,ax
c0013c28:	a1 08 3d 02 c0       	mov    eax,ds:0xc0023d08
c0013c2d:	48                   	dec    eax
c0013c2e:	a3 08 3d 02 c0       	mov    ds:0xc0023d08,eax
c0013c33:	75 03                	jne    c0013c38 <Semaphore::assertLocked(char const*)+0x48>
c0013c35:	fb                   	sti    
c0013c36:	66 90                	xchg   ax,ax
c0013c38:	83 c4 0c             	add    esp,0xc
c0013c3b:	c3                   	ret    
c0013c3c:	83 ec 0c             	sub    esp,0xc
c0013c3f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0013c43:	52                   	push   edx
c0013c44:	e8 f6 ca ff ff       	call   c001073f <Krnl::panic(char const*)>
c0013c49:	a1 04 3d 02 c0       	mov    eax,ds:0xc0023d04
c0013c4e:	83 c4 10             	add    esp,0x10
c0013c51:	48                   	dec    eax
c0013c52:	eb c0                	jmp    c0013c14 <Semaphore::assertLocked(char const*)+0x24>
c0013c54:	c7 05 00 3d 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023d00,0x0
c0013c5e:	e8 31 fe ff ff       	call   c0013a94 <schedule()>
c0013c63:	eb c3                	jmp    c0013c28 <Semaphore::assertLocked(char const*)+0x38>
c0013c65:	8d 76 00             	lea    esi,[esi+0x0]

c0013c68 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c0013c68:	83 ec 0c             	sub    esp,0xc
c0013c6b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013c70:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013c74:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0013c77:	e8 18 fe ff ff       	call   c0013a94 <schedule()>
c0013c7c:	a1 08 3d 02 c0       	mov    eax,ds:0xc0023d08
c0013c81:	48                   	dec    eax
c0013c82:	a3 08 3d 02 c0       	mov    ds:0xc0023d08,eax
c0013c87:	75 03                	jne    c0013c8c <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x24>
c0013c89:	fb                   	sti    
c0013c8a:	66 90                	xchg   ax,ax
c0013c8c:	83 c4 0c             	add    esp,0xc
c0013c8f:	c3                   	ret    

c0013c90 <blockTask(TaskState)>:
c0013c90:	83 ec 0c             	sub    esp,0xc
c0013c93:	fa                   	cli    
c0013c94:	ff 05 08 3d 02 c0    	inc    DWORD PTR ds:0xc0023d08
c0013c9a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013c9e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013ca3:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0013ca6:	e8 e9 fd ff ff       	call   c0013a94 <schedule()>
c0013cab:	a1 08 3d 02 c0       	mov    eax,ds:0xc0023d08
c0013cb0:	48                   	dec    eax
c0013cb1:	a3 08 3d 02 c0       	mov    ds:0xc0023d08,eax
c0013cb6:	75 04                	jne    c0013cbc <blockTask(TaskState)+0x2c>
c0013cb8:	fb                   	sti    
c0013cb9:	8d 76 00             	lea    esi,[esi+0x0]
c0013cbc:	83 c4 0c             	add    esp,0xc
c0013cbf:	c3                   	ret    

c0013cc0 <waitTask(int, int*, int)>:
c0013cc0:	83 ec 18             	sub    esp,0x18
c0013cc3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013cc8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0013ccc:	89 50 45             	mov    DWORD PTR [eax+0x45],edx
c0013ccf:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0013cd3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013cd8:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c0013cdb:	6a 07                	push   0x7
c0013cdd:	e8 ae ff ff ff       	call   c0013c90 <blockTask(TaskState)>
c0013ce2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013ce7:	83 c4 10             	add    esp,0x10
c0013cea:	8b 50 49             	mov    edx,DWORD PTR [eax+0x49]
c0013ced:	85 d2                	test   edx,edx
c0013cef:	74 0b                	je     c0013cfc <waitTask(int, int*, int)+0x3c>
c0013cf1:	8b 40 4d             	mov    eax,DWORD PTR [eax+0x4d]
c0013cf4:	89 02                	mov    DWORD PTR [edx],eax
c0013cf6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013cfb:	90                   	nop
c0013cfc:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c0013cff:	83 c4 0c             	add    esp,0xc
c0013d02:	c3                   	ret    
c0013d03:	90                   	nop

c0013d04 <milliTenthSleepUntil(unsigned int)>:
c0013d04:	83 ec 0c             	sub    esp,0xc
c0013d07:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013d0b:	39 05 0c 2e 02 c0    	cmp    DWORD PTR ds:0xc0022e0c,eax
c0013d11:	76 05                	jbe    c0013d18 <milliTenthSleepUntil(unsigned int)+0x14>
c0013d13:	90                   	nop
c0013d14:	83 c4 0c             	add    esp,0xc
c0013d17:	c3                   	ret    
c0013d18:	fa                   	cli    
c0013d19:	ff 05 08 3d 02 c0    	inc    DWORD PTR ds:0xc0023d08
c0013d1f:	83 ec 08             	sub    esp,0x8
c0013d22:	ff 05 04 3d 02 c0    	inc    DWORD PTR ds:0xc0023d04
c0013d28:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0013d2e:	89 42 2c             	mov    DWORD PTR [edx+0x2c],eax
c0013d31:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0013d37:	52                   	push   edx
c0013d38:	68 18 3d 02 c0       	push   0xc0023d18
c0013d3d:	e8 ca 89 00 00       	call   c001c70c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0013d42:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0013d49:	e8 42 ff ff ff       	call   c0013c90 <blockTask(TaskState)>
c0013d4e:	a1 04 3d 02 c0       	mov    eax,ds:0xc0023d04
c0013d53:	83 c4 10             	add    esp,0x10
c0013d56:	48                   	dec    eax
c0013d57:	a3 04 3d 02 c0       	mov    ds:0xc0023d04,eax
c0013d5c:	85 c0                	test   eax,eax
c0013d5e:	75 0c                	jne    c0013d6c <milliTenthSleepUntil(unsigned int)+0x68>
c0013d60:	a1 00 3d 02 c0       	mov    eax,ds:0xc0023d00
c0013d65:	85 c0                	test   eax,eax
c0013d67:	75 17                	jne    c0013d80 <milliTenthSleepUntil(unsigned int)+0x7c>
c0013d69:	8d 76 00             	lea    esi,[esi+0x0]
c0013d6c:	a1 08 3d 02 c0       	mov    eax,ds:0xc0023d08
c0013d71:	48                   	dec    eax
c0013d72:	a3 08 3d 02 c0       	mov    ds:0xc0023d08,eax
c0013d77:	75 9b                	jne    c0013d14 <milliTenthSleepUntil(unsigned int)+0x10>
c0013d79:	fb                   	sti    
c0013d7a:	83 c4 0c             	add    esp,0xc
c0013d7d:	c3                   	ret    
c0013d7e:	66 90                	xchg   ax,ax
c0013d80:	c7 05 00 3d 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023d00,0x0
c0013d8a:	e8 05 fd ff ff       	call   c0013a94 <schedule()>
c0013d8f:	eb db                	jmp    c0013d6c <milliTenthSleepUntil(unsigned int)+0x68>
c0013d91:	8d 76 00             	lea    esi,[esi+0x0]

c0013d94 <milliTenthSleep(unsigned int)>:
c0013d94:	a1 0c 2e 02 c0       	mov    eax,ds:0xc0022e0c
c0013d99:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c0013d9d:	e9 62 ff ff ff       	jmp    c0013d04 <milliTenthSleepUntil(unsigned int)>
c0013da2:	66 90                	xchg   ax,ax

c0013da4 <sleep(unsigned int)>:
c0013da4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013da8:	8d 04 80             	lea    eax,[eax+eax*4]
c0013dab:	8d 04 80             	lea    eax,[eax+eax*4]
c0013dae:	8d 04 80             	lea    eax,[eax+eax*4]
c0013db1:	8d 04 80             	lea    eax,[eax+eax*4]
c0013db4:	c1 e0 04             	shl    eax,0x4
c0013db7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013dbb:	eb d7                	jmp    c0013d94 <milliTenthSleep(unsigned int)>
c0013dbd:	90                   	nop
c0013dbe:	66 90                	xchg   ax,ax

c0013dc0 <Semaphore::acquire()>:
c0013dc0:	83 ec 0c             	sub    esp,0xc
c0013dc3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013dc7:	fa                   	cli    
c0013dc8:	a1 04 3d 02 c0       	mov    eax,ds:0xc0023d04
c0013dcd:	ff 05 08 3d 02 c0    	inc    DWORD PTR ds:0xc0023d08
c0013dd3:	8d 48 01             	lea    ecx,[eax+0x1]
c0013dd6:	89 0d 04 3d 02 c0    	mov    DWORD PTR ds:0xc0023d04,ecx
c0013ddc:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0013ddf:	3b 0a                	cmp    ecx,DWORD PTR [edx]
c0013de1:	7d 2d                	jge    c0013e10 <Semaphore::acquire()+0x50>
c0013de3:	41                   	inc    ecx
c0013de4:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c0013de7:	90                   	nop
c0013de8:	a3 04 3d 02 c0       	mov    ds:0xc0023d04,eax
c0013ded:	85 c0                	test   eax,eax
c0013def:	75 0b                	jne    c0013dfc <Semaphore::acquire()+0x3c>
c0013df1:	a1 00 3d 02 c0       	mov    eax,ds:0xc0023d00
c0013df6:	85 c0                	test   eax,eax
c0013df8:	75 62                	jne    c0013e5c <Semaphore::acquire()+0x9c>
c0013dfa:	66 90                	xchg   ax,ax
c0013dfc:	a1 08 3d 02 c0       	mov    eax,ds:0xc0023d08
c0013e01:	48                   	dec    eax
c0013e02:	a3 08 3d 02 c0       	mov    ds:0xc0023d08,eax
c0013e07:	75 03                	jne    c0013e0c <Semaphore::acquire()+0x4c>
c0013e09:	fb                   	sti    
c0013e0a:	66 90                	xchg   ax,ax
c0013e0c:	83 c4 0c             	add    esp,0xc
c0013e0f:	c3                   	ret    
c0013e10:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013e15:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0013e1c:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0013e1f:	85 c9                	test   ecx,ecx
c0013e21:	74 4d                	je     c0013e70 <Semaphore::acquire()+0xb0>
c0013e23:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c0013e26:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0013e2c:	89 48 20             	mov    DWORD PTR [eax+0x20],ecx
c0013e2f:	90                   	nop
c0013e30:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013e35:	83 ec 0c             	sub    esp,0xc
c0013e38:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0013e3b:	68 fc e9 01 c0       	push   0xc001e9fc
c0013e40:	e8 ab 6d ff ff       	call   c000abf0 <Dbg::kprintf(char const*, ...)>
c0013e45:	c7 04 24 05 00 00 00 	mov    DWORD PTR [esp],0x5
c0013e4c:	e8 3f fe ff ff       	call   c0013c90 <blockTask(TaskState)>
c0013e51:	a1 04 3d 02 c0       	mov    eax,ds:0xc0023d04
c0013e56:	83 c4 10             	add    esp,0x10
c0013e59:	48                   	dec    eax
c0013e5a:	eb 8c                	jmp    c0013de8 <Semaphore::acquire()+0x28>
c0013e5c:	c7 05 00 3d 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023d00,0x0
c0013e66:	e8 29 fc ff ff       	call   c0013a94 <schedule()>
c0013e6b:	eb 8f                	jmp    c0013dfc <Semaphore::acquire()+0x3c>
c0013e6d:	8d 76 00             	lea    esi,[esi+0x0]
c0013e70:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013e75:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0013e78:	eb b6                	jmp    c0013e30 <Semaphore::acquire()+0x70>
c0013e7a:	66 90                	xchg   ax,ax

c0013e7c <taskReturned>:
c0013e7c:	83 ec 18             	sub    esp,0x18
c0013e7f:	68 1c ea 01 c0       	push   0xc001ea1c
c0013e84:	e8 b6 c8 ff ff       	call   c001073f <Krnl::panic(char const*)>
c0013e89:	83 c4 10             	add    esp,0x10
c0013e8c:	83 ec 0c             	sub    esp,0xc
c0013e8f:	6a 02                	push   0x2
c0013e91:	e8 fa fd ff ff       	call   c0013c90 <blockTask(TaskState)>
c0013e96:	fa                   	cli    
c0013e97:	ff 05 08 3d 02 c0    	inc    DWORD PTR ds:0xc0023d08
c0013e9d:	e8 f2 fb ff ff       	call   c0013a94 <schedule()>
c0013ea2:	a1 08 3d 02 c0       	mov    eax,ds:0xc0023d08
c0013ea7:	83 c4 10             	add    esp,0x10
c0013eaa:	48                   	dec    eax
c0013eab:	a3 08 3d 02 c0       	mov    ds:0xc0023d08,eax
c0013eb0:	85 c0                	test   eax,eax
c0013eb2:	75 d8                	jne    c0013e8c <taskReturned+0x10>
c0013eb4:	fb                   	sti    
c0013eb5:	eb d5                	jmp    c0013e8c <taskReturned+0x10>
c0013eb7:	90                   	nop

c0013eb8 <Thr::processFromPID(int)>:
c0013eb8:	57                   	push   edi
c0013eb9:	56                   	push   esi
c0013eba:	53                   	push   ebx
c0013ebb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013ebf:	fa                   	cli    
c0013ec0:	ff 05 08 3d 02 c0    	inc    DWORD PTR ds:0xc0023d08
c0013ec6:	83 ec 0c             	sub    esp,0xc
c0013ec9:	68 24 3d 02 c0       	push   0xc0023d24
c0013ece:	e8 79 87 00 00       	call   c001c64c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013ed3:	83 c4 10             	add    esp,0x10
c0013ed6:	89 c7                	mov    edi,eax
c0013ed8:	eb 16                	jmp    c0013ef0 <Thr::processFromPID(int)+0x38>
c0013eda:	66 90                	xchg   ax,ax
c0013edc:	83 ec 0c             	sub    esp,0xc
c0013edf:	68 24 3d 02 c0       	push   0xc0023d24
c0013ee4:	e8 63 87 00 00       	call   c001c64c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013ee9:	83 c4 10             	add    esp,0x10
c0013eec:	39 f8                	cmp    eax,edi
c0013eee:	74 4c                	je     c0013f3c <Thr::processFromPID(int)+0x84>
c0013ef0:	83 ec 0c             	sub    esp,0xc
c0013ef3:	68 24 3d 02 c0       	push   0xc0023d24
c0013ef8:	e8 4f 87 00 00       	call   c001c64c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013efd:	c7 04 24 24 3d 02 c0 	mov    DWORD PTR [esp],0xc0023d24
c0013f04:	89 c3                	mov    ebx,eax
c0013f06:	e8 49 87 00 00       	call   c001c654 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0013f0b:	58                   	pop    eax
c0013f0c:	5a                   	pop    edx
c0013f0d:	53                   	push   ebx
c0013f0e:	68 24 3d 02 c0       	push   0xc0023d24
c0013f13:	e8 f4 87 00 00       	call   c001c70c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0013f18:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0013f1b:	83 c4 10             	add    esp,0x10
c0013f1e:	39 30                	cmp    DWORD PTR [eax],esi
c0013f20:	75 ba                	jne    c0013edc <Thr::processFromPID(int)+0x24>
c0013f22:	a1 08 3d 02 c0       	mov    eax,ds:0xc0023d08
c0013f27:	48                   	dec    eax
c0013f28:	a3 08 3d 02 c0       	mov    ds:0xc0023d08,eax
c0013f2d:	74 09                	je     c0013f38 <Thr::processFromPID(int)+0x80>
c0013f2f:	90                   	nop
c0013f30:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0013f33:	5b                   	pop    ebx
c0013f34:	5e                   	pop    esi
c0013f35:	5f                   	pop    edi
c0013f36:	c3                   	ret    
c0013f37:	90                   	nop
c0013f38:	fb                   	sti    
c0013f39:	eb f5                	jmp    c0013f30 <Thr::processFromPID(int)+0x78>
c0013f3b:	90                   	nop
c0013f3c:	a1 08 3d 02 c0       	mov    eax,ds:0xc0023d08
c0013f41:	48                   	dec    eax
c0013f42:	a3 08 3d 02 c0       	mov    ds:0xc0023d08,eax
c0013f47:	75 07                	jne    c0013f50 <Thr::processFromPID(int)+0x98>
c0013f49:	fb                   	sti    
c0013f4a:	5b                   	pop    ebx
c0013f4b:	5e                   	pop    esi
c0013f4c:	5f                   	pop    edi
c0013f4d:	c3                   	ret    
c0013f4e:	66 90                	xchg   ax,ax
c0013f50:	5b                   	pop    ebx
c0013f51:	31 c0                	xor    eax,eax
c0013f53:	5e                   	pop    esi
c0013f54:	5f                   	pop    edi
c0013f55:	c3                   	ret    
c0013f56:	66 90                	xchg   ax,ax

c0013f58 <unblockTask(ThreadControlBlock*)>:
c0013f58:	53                   	push   ebx
c0013f59:	83 ec 08             	sub    esp,0x8
c0013f5c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013f60:	fa                   	cli    
c0013f61:	ff 05 08 3d 02 c0    	inc    DWORD PTR ds:0xc0023d08
c0013f67:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0013f6a:	85 c0                	test   eax,eax
c0013f6c:	74 66                	je     c0013fd4 <unblockTask(ThreadControlBlock*)+0x7c>
c0013f6e:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0013f71:	48                   	dec    eax
c0013f72:	74 38                	je     c0013fac <unblockTask(ThreadControlBlock*)+0x54>
c0013f74:	83 ec 0c             	sub    esp,0xc
c0013f77:	68 24 3d 02 c0       	push   0xc0023d24
c0013f7c:	e8 cb 86 00 00       	call   c001c64c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013f81:	83 c4 10             	add    esp,0x10
c0013f84:	85 c0                	test   eax,eax
c0013f86:	75 1c                	jne    c0013fa4 <unblockTask(ThreadControlBlock*)+0x4c>
c0013f88:	eb 5e                	jmp    c0013fe8 <unblockTask(ThreadControlBlock*)+0x90>
c0013f8a:	66 90                	xchg   ax,ax
c0013f8c:	83 ec 08             	sub    esp,0x8
c0013f8f:	50                   	push   eax
c0013f90:	68 24 3d 02 c0       	push   0xc0023d24
c0013f95:	e8 62 8a 00 00       	call   c001c9fc <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0013f9a:	83 c4 10             	add    esp,0x10
c0013f9d:	85 c0                	test   eax,eax
c0013f9f:	74 47                	je     c0013fe8 <unblockTask(ThreadControlBlock*)+0x90>
c0013fa1:	8d 76 00             	lea    esi,[esi+0x0]
c0013fa4:	39 c3                	cmp    ebx,eax
c0013fa6:	75 e4                	jne    c0013f8c <unblockTask(ThreadControlBlock*)+0x34>
c0013fa8:	eb 12                	jmp    c0013fbc <unblockTask(ThreadControlBlock*)+0x64>
c0013faa:	66 90                	xchg   ax,ax
c0013fac:	83 ec 0c             	sub    esp,0xc
c0013faf:	68 9f e9 01 c0       	push   0xc001e99f
c0013fb4:	e8 37 6c ff ff       	call   c000abf0 <Dbg::kprintf(char const*, ...)>
c0013fb9:	83 c4 10             	add    esp,0x10
c0013fbc:	a1 08 3d 02 c0       	mov    eax,ds:0xc0023d08
c0013fc1:	48                   	dec    eax
c0013fc2:	a3 08 3d 02 c0       	mov    ds:0xc0023d08,eax
c0013fc7:	75 03                	jne    c0013fcc <unblockTask(ThreadControlBlock*)+0x74>
c0013fc9:	fb                   	sti    
c0013fca:	66 90                	xchg   ax,ax
c0013fcc:	83 c4 08             	add    esp,0x8
c0013fcf:	5b                   	pop    ebx
c0013fd0:	c3                   	ret    
c0013fd1:	8d 76 00             	lea    esi,[esi+0x0]
c0013fd4:	83 ec 0c             	sub    esp,0xc
c0013fd7:	68 88 e9 01 c0       	push   0xc001e988
c0013fdc:	e8 0f 6c ff ff       	call   c000abf0 <Dbg::kprintf(char const*, ...)>
c0013fe1:	83 c4 10             	add    esp,0x10
c0013fe4:	eb d6                	jmp    c0013fbc <unblockTask(ThreadControlBlock*)+0x64>
c0013fe6:	66 90                	xchg   ax,ax
c0013fe8:	83 ec 08             	sub    esp,0x8
c0013feb:	53                   	push   ebx
c0013fec:	68 24 3d 02 c0       	push   0xc0023d24
c0013ff1:	e8 16 87 00 00       	call   c001c70c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0013ff6:	83 c4 10             	add    esp,0x10
c0013ff9:	eb c1                	jmp    c0013fbc <unblockTask(ThreadControlBlock*)+0x64>
c0013ffb:	90                   	nop

c0013ffc <cleanupTerminatedTask(ThreadControlBlock*)>:
c0013ffc:	55                   	push   ebp
c0013ffd:	57                   	push   edi
c0013ffe:	56                   	push   esi
c0013fff:	53                   	push   ebx
c0014000:	83 ec 1c             	sub    esp,0x1c
c0014003:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0014007:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001400a:	8b a8 16 05 00 00    	mov    ebp,DWORD PTR [eax+0x516]
c0014010:	85 ed                	test   ebp,ebp
c0014012:	7e 24                	jle    c0014038 <cleanupTerminatedTask(ThreadControlBlock*)+0x3c>
c0014014:	31 f6                	xor    esi,esi
c0014016:	66 90                	xchg   ax,ax
c0014018:	83 ec 0c             	sub    esp,0xc
c001401b:	8b bc b0 1a 05 00 00 	mov    edi,DWORD PTR [eax+esi*4+0x51a]
c0014022:	46                   	inc    esi
c0014023:	57                   	push   edi
c0014024:	e8 48 3e ff ff       	call   c0007e71 <free>
c0014029:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001402c:	83 c4 10             	add    esp,0x10
c001402f:	39 b0 16 05 00 00    	cmp    DWORD PTR [eax+0x516],esi
c0014035:	7f e1                	jg     c0014018 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c>
c0014037:	90                   	nop
c0014038:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0014042:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0014047:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c001404a:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c001404d:	d3 c0                	rol    eax,cl
c001404f:	66 21 82 04 05 00 00 	and    WORD PTR [edx+0x504],ax
c0014056:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0014059:	89 f7                	mov    edi,esi
c001405b:	66 83 be 04 05 00 00 00 	cmp    WORD PTR [esi+0x504],0x0
c0014063:	0f 85 77 01 00 00    	jne    c00141e0 <cleanupTerminatedTask(ThreadControlBlock*)+0x1e4>
c0014069:	8b ae 1a 07 00 00    	mov    ebp,DWORD PTR [esi+0x71a]
c001406f:	85 ed                	test   ebp,ebp
c0014071:	74 1d                	je     c0014090 <cleanupTerminatedTask(ThreadControlBlock*)+0x94>
c0014073:	83 ec 0c             	sub    esp,0xc
c0014076:	55                   	push   ebp
c0014077:	e8 68 c4 ff ff       	call   c00104e4 <EnvVarContainer::~EnvVarContainer()>
c001407c:	59                   	pop    ecx
c001407d:	5e                   	pop    esi
c001407e:	6a 0c                	push   0xc
c0014080:	55                   	push   ebp
c0014081:	e8 74 6a ff ff       	call   c000aafa <operator delete(void*, unsigned long)>
c0014086:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0014089:	83 c4 10             	add    esp,0x10
c001408c:	89 f7                	mov    edi,esi
c001408e:	66 90                	xchg   ax,ax
c0014090:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0014096:	85 c0                	test   eax,eax
c0014098:	0f 84 b6 00 00 00    	je     c0014154 <cleanupTerminatedTask(ThreadControlBlock*)+0x158>
c001409e:	8b 4b 51             	mov    ecx,DWORD PTR [ebx+0x51]
c00140a1:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00140a5:	31 c9                	xor    ecx,ecx
c00140a7:	eb 17                	jmp    c00140c0 <cleanupTerminatedTask(ThreadControlBlock*)+0xc4>
c00140a9:	8d 76 00             	lea    esi,[esi+0x0]
c00140ac:	41                   	inc    ecx
c00140ad:	83 f9 10             	cmp    ecx,0x10
c00140b0:	0f 84 9e 00 00 00    	je     c0014154 <cleanupTerminatedTask(ThreadControlBlock*)+0x158>
c00140b6:	66 90                	xchg   ax,ax
c00140b8:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c00140be:	66 90                	xchg   ax,ax
c00140c0:	31 d2                	xor    edx,edx
c00140c2:	66 8b 90 04 05 00 00 	mov    dx,WORD PTR [eax+0x504]
c00140c9:	d3 fa                	sar    edx,cl
c00140cb:	83 e2 01             	and    edx,0x1
c00140ce:	74 dc                	je     c00140ac <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c00140d0:	8d 14 c9             	lea    edx,[ecx+ecx*8]
c00140d3:	01 d2                	add    edx,edx
c00140d5:	01 ca                	add    edx,ecx
c00140d7:	8d 14 92             	lea    edx,[edx+edx*4]
c00140da:	01 d0                	add    eax,edx
c00140dc:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c00140e2:	83 fd 07             	cmp    ebp,0x7
c00140e5:	75 c5                	jne    c00140ac <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c00140e7:	05 40 02 00 00       	add    eax,0x240
c00140ec:	8b 68 11             	mov    ebp,DWORD PTR [eax+0x11]
c00140ef:	83 fd ff             	cmp    ebp,0xffffffff
c00140f2:	0f 8c f0 00 00 00    	jl     c00141e8 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ec>
c00140f8:	0f 84 ae 01 00 00    	je     c00142ac <cleanupTerminatedTask(ThreadControlBlock*)+0x2b0>
c00140fe:	85 ed                	test   ebp,ebp
c0014100:	0f 84 92 01 00 00    	je     c0014298 <cleanupTerminatedTask(ThreadControlBlock*)+0x29c>
c0014106:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c0014108:	75 a2                	jne    c00140ac <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c001410a:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0014110:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0014114:	01 d0                	add    eax,edx
c0014116:	66 90                	xchg   ax,ax
c0014118:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c001411c:	83 ec 0c             	sub    esp,0xc
c001411f:	89 b8 59 02 00 00    	mov    DWORD PTR [eax+0x259],edi
c0014125:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0014128:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c001412e:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c0014135:	50                   	push   eax
c0014136:	e8 1d fe ff ff       	call   c0013f58 <unblockTask(ThreadControlBlock*)>
c001413b:	83 c4 10             	add    esp,0x10
c001413e:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0014141:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0014145:	89 f7                	mov    edi,esi
c0014147:	41                   	inc    ecx
c0014148:	83 f9 10             	cmp    ecx,0x10
c001414b:	0f 85 67 ff ff ff    	jne    c00140b8 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0014151:	8d 76 00             	lea    esi,[esi+0x0]
c0014154:	8b 86 06 05 00 00    	mov    eax,DWORD PTR [esi+0x506]
c001415a:	85 c0                	test   eax,eax
c001415c:	74 62                	je     c00141c0 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c4>
c001415e:	8b 96 0a 05 00 00    	mov    edx,DWORD PTR [esi+0x50a]
c0014164:	3b 82 06 05 00 00    	cmp    eax,DWORD PTR [edx+0x506]
c001416a:	74 54                	je     c00141c0 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c4>
c001416c:	83 ec 0c             	sub    esp,0xc
c001416f:	68 24 3d 02 c0       	push   0xc0023d24
c0014174:	e8 d3 84 00 00       	call   c001c64c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0014179:	c7 04 24 24 3d 02 c0 	mov    DWORD PTR [esp],0xc0023d24
c0014180:	89 c7                	mov    edi,eax
c0014182:	e8 a9 84 00 00       	call   c001c630 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0014187:	83 c4 10             	add    esp,0x10
c001418a:	84 c0                	test   al,al
c001418c:	0f 84 ce 00 00 00    	je     c0014260 <cleanupTerminatedTask(ThreadControlBlock*)+0x264>
c0014192:	66 90                	xchg   ax,ax
c0014194:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0014197:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c001419d:	85 d2                	test   edx,edx
c001419f:	74 0f                	je     c00141b0 <cleanupTerminatedTask(ThreadControlBlock*)+0x1b4>
c00141a1:	83 ec 0c             	sub    esp,0xc
c00141a4:	8b 02                	mov    eax,DWORD PTR [edx]
c00141a6:	52                   	push   edx
c00141a7:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00141aa:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00141ad:	83 c4 10             	add    esp,0x10
c00141b0:	c7 80 06 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x506],0x0
c00141ba:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c00141bd:	8d 76 00             	lea    esi,[esi+0x0]
c00141c0:	8b 9f 12 05 00 00    	mov    ebx,DWORD PTR [edi+0x512]
c00141c6:	85 db                	test   ebx,ebx
c00141c8:	74 16                	je     c00141e0 <cleanupTerminatedTask(ThreadControlBlock*)+0x1e4>
c00141ca:	83 ec 0c             	sub    esp,0xc
c00141cd:	53                   	push   ebx
c00141ce:	e8 fb 5c ff ff       	call   c0009ece <VAS::~VAS()>
c00141d3:	58                   	pop    eax
c00141d4:	5a                   	pop    edx
c00141d5:	6a 14                	push   0x14
c00141d7:	53                   	push   ebx
c00141d8:	e8 1d 69 ff ff       	call   c000aafa <operator delete(void*, unsigned long)>
c00141dd:	83 c4 10             	add    esp,0x10
c00141e0:	83 c4 1c             	add    esp,0x1c
c00141e3:	5b                   	pop    ebx
c00141e4:	5e                   	pop    esi
c00141e5:	5f                   	pop    edi
c00141e6:	5d                   	pop    ebp
c00141e7:	c3                   	ret    
c00141e8:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00141ec:	83 ec 0c             	sub    esp,0xc
c00141ef:	68 50 ea 01 c0       	push   0xc001ea50
c00141f4:	e8 46 c5 ff ff       	call   c001073f <Krnl::panic(char const*)>
c00141f9:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c00141fc:	83 c4 10             	add    esp,0x10
c00141ff:	89 f7                	mov    edi,esi
c0014201:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0014205:	e9 a2 fe ff ff       	jmp    c00140ac <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c001420a:	66 90                	xchg   ax,ax
c001420c:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014212:	39 82 06 05 00 00    	cmp    DWORD PTR [edx+0x506],eax
c0014218:	75 1e                	jne    c0014238 <cleanupTerminatedTask(ThreadControlBlock*)+0x23c>
c001421a:	83 ec 0c             	sub    esp,0xc
c001421d:	68 b8 ea 01 c0       	push   0xc001eab8
c0014222:	e8 c9 69 ff ff       	call   c000abf0 <Dbg::kprintf(char const*, ...)>
c0014227:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001422e:	e8 5d fa ff ff       	call   c0013c90 <blockTask(TaskState)>
c0014233:	83 c4 10             	add    esp,0x10
c0014236:	66 90                	xchg   ax,ax
c0014238:	83 ec 08             	sub    esp,0x8
c001423b:	56                   	push   esi
c001423c:	68 24 3d 02 c0       	push   0xc0023d24
c0014241:	e8 c6 84 00 00       	call   c001c70c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0014246:	c7 04 24 24 3d 02 c0 	mov    DWORD PTR [esp],0xc0023d24
c001424d:	e8 fa 83 00 00       	call   c001c64c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0014252:	83 c4 10             	add    esp,0x10
c0014255:	39 f8                	cmp    eax,edi
c0014257:	0f 84 37 ff ff ff    	je     c0014194 <cleanupTerminatedTask(ThreadControlBlock*)+0x198>
c001425d:	8d 76 00             	lea    esi,[esi+0x0]
c0014260:	83 ec 0c             	sub    esp,0xc
c0014263:	68 24 3d 02 c0       	push   0xc0023d24
c0014268:	e8 df 83 00 00       	call   c001c64c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001426d:	c7 04 24 24 3d 02 c0 	mov    DWORD PTR [esp],0xc0023d24
c0014274:	89 c6                	mov    esi,eax
c0014276:	e8 d9 83 00 00       	call   c001c654 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001427b:	83 c4 10             	add    esp,0x10
c001427e:	39 f3                	cmp    ebx,esi
c0014280:	74 b6                	je     c0014238 <cleanupTerminatedTask(ThreadControlBlock*)+0x23c>
c0014282:	8b 56 3c             	mov    edx,DWORD PTR [esi+0x3c]
c0014285:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0014288:	39 82 0a 05 00 00    	cmp    DWORD PTR [edx+0x50a],eax
c001428e:	75 a8                	jne    c0014238 <cleanupTerminatedTask(ThreadControlBlock*)+0x23c>
c0014290:	e9 77 ff ff ff       	jmp    c001420c <cleanupTerminatedTask(ThreadControlBlock*)+0x210>
c0014295:	8d 76 00             	lea    esi,[esi+0x0]
c0014298:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001429c:	83 ec 0c             	sub    esp,0xc
c001429f:	68 84 ea 01 c0       	push   0xc001ea84
c00142a4:	e9 4b ff ff ff       	jmp    c00141f4 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f8>
c00142a9:	8d 76 00             	lea    esi,[esi+0x0]
c00142ac:	8b 36                	mov    esi,DWORD PTR [esi]
c00142ae:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00142b2:	89 70 11             	mov    DWORD PTR [eax+0x11],esi
c00142b5:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00142b8:	8b b8 0a 05 00 00    	mov    edi,DWORD PTR [eax+0x50a]
c00142be:	01 d7                	add    edi,edx
c00142c0:	89 f8                	mov    eax,edi
c00142c2:	e9 51 fe ff ff       	jmp    c0014118 <cleanupTerminatedTask(ThreadControlBlock*)+0x11c>
c00142c7:	90                   	nop

c00142c8 <cleanerTaskFunction(void*)>:
c00142c8:	53                   	push   ebx
c00142c9:	83 ec 08             	sub    esp,0x8
c00142cc:	a1 08 3d 02 c0       	mov    eax,ds:0xc0023d08
c00142d1:	48                   	dec    eax
c00142d2:	a3 08 3d 02 c0       	mov    ds:0xc0023d08,eax
c00142d7:	75 03                	jne    c00142dc <cleanerTaskFunction(void*)+0x14>
c00142d9:	fb                   	sti    
c00142da:	66 90                	xchg   ax,ax
c00142dc:	fa                   	cli    
c00142dd:	a1 08 3d 02 c0       	mov    eax,ds:0xc0023d08
c00142e2:	80 3d ec 3c 02 c0 00 	cmp    BYTE PTR ds:0xc0023cec,0x0
c00142e9:	8d 50 01             	lea    edx,[eax+0x1]
c00142ec:	89 15 08 3d 02 c0    	mov    DWORD PTR ds:0xc0023d08,edx
c00142f2:	0f 84 ac 00 00 00    	je     c00143a4 <cleanerTaskFunction(void*)+0xdc>
c00142f8:	a3 08 3d 02 c0       	mov    ds:0xc0023d08,eax
c00142fd:	85 c0                	test   eax,eax
c00142ff:	75 03                	jne    c0014304 <cleanerTaskFunction(void*)+0x3c>
c0014301:	fb                   	sti    
c0014302:	66 90                	xchg   ax,ax
c0014304:	c6 05 ec 3c 02 c0 00 	mov    BYTE PTR ds:0xc0023cec,0x0
c001430b:	fa                   	cli    
c001430c:	ff 05 08 3d 02 c0    	inc    DWORD PTR ds:0xc0023d08
c0014312:	ff 05 04 3d 02 c0    	inc    DWORD PTR ds:0xc0023d04
c0014318:	fa                   	cli    
c0014319:	ff 05 08 3d 02 c0    	inc    DWORD PTR ds:0xc0023d08
c001431f:	eb 2b                	jmp    c001434c <cleanerTaskFunction(void*)+0x84>
c0014321:	8d 76 00             	lea    esi,[esi+0x0]
c0014324:	83 ec 0c             	sub    esp,0xc
c0014327:	68 0c 3d 02 c0       	push   0xc0023d0c
c001432c:	e8 1b 83 00 00       	call   c001c64c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0014331:	c7 04 24 0c 3d 02 c0 	mov    DWORD PTR [esp],0xc0023d0c
c0014338:	89 c3                	mov    ebx,eax
c001433a:	e8 15 83 00 00       	call   c001c654 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001433f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014342:	e8 b5 fc ff ff       	call   c0013ffc <cleanupTerminatedTask(ThreadControlBlock*)>
c0014347:	83 c4 10             	add    esp,0x10
c001434a:	66 90                	xchg   ax,ax
c001434c:	83 ec 0c             	sub    esp,0xc
c001434f:	68 0c 3d 02 c0       	push   0xc0023d0c
c0014354:	e8 d7 82 00 00       	call   c001c630 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0014359:	83 c4 10             	add    esp,0x10
c001435c:	84 c0                	test   al,al
c001435e:	74 c4                	je     c0014324 <cleanerTaskFunction(void*)+0x5c>
c0014360:	a1 08 3d 02 c0       	mov    eax,ds:0xc0023d08
c0014365:	48                   	dec    eax
c0014366:	a3 08 3d 02 c0       	mov    ds:0xc0023d08,eax
c001436b:	75 03                	jne    c0014370 <cleanerTaskFunction(void*)+0xa8>
c001436d:	fb                   	sti    
c001436e:	66 90                	xchg   ax,ax
c0014370:	a1 04 3d 02 c0       	mov    eax,ds:0xc0023d04
c0014375:	48                   	dec    eax
c0014376:	a3 04 3d 02 c0       	mov    ds:0xc0023d04,eax
c001437b:	0f 85 4b ff ff ff    	jne    c00142cc <cleanerTaskFunction(void*)+0x4>
c0014381:	a1 00 3d 02 c0       	mov    eax,ds:0xc0023d00
c0014386:	85 c0                	test   eax,eax
c0014388:	0f 84 3e ff ff ff    	je     c00142cc <cleanerTaskFunction(void*)+0x4>
c001438e:	c7 05 00 3d 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023d00,0x0
c0014398:	e8 f7 f6 ff ff       	call   c0013a94 <schedule()>
c001439d:	e9 2a ff ff ff       	jmp    c00142cc <cleanerTaskFunction(void*)+0x4>
c00143a2:	66 90                	xchg   ax,ax
c00143a4:	83 ec 0c             	sub    esp,0xc
c00143a7:	6a 02                	push   0x2
c00143a9:	e8 ba f8 ff ff       	call   c0013c68 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c00143ae:	83 c4 10             	add    esp,0x10
c00143b1:	e9 4e ff ff ff       	jmp    c0014304 <cleanerTaskFunction(void*)+0x3c>
c00143b6:	66 90                	xchg   ax,ax

c00143b8 <terminateTask(int)>:
c00143b8:	83 ec 14             	sub    esp,0x14
c00143bb:	fa                   	cli    
c00143bc:	ff 05 08 3d 02 c0    	inc    DWORD PTR ds:0xc0023d08
c00143c2:	ff 05 04 3d 02 c0    	inc    DWORD PTR ds:0xc0023d04
c00143c8:	fa                   	cli    
c00143c9:	ff 05 08 3d 02 c0    	inc    DWORD PTR ds:0xc0023d08
c00143cf:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00143d3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00143d8:	89 50 51             	mov    DWORD PTR [eax+0x51],edx
c00143db:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00143e0:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c00143e3:	50                   	push   eax
c00143e4:	68 0c 3d 02 c0       	push   0xc0023d0c
c00143e9:	e8 1e 83 00 00       	call   c001c70c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00143ee:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00143f3:	83 c4 10             	add    esp,0x10
c00143f6:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c00143fd:	a1 e8 3c 02 c0       	mov    eax,ds:0xc0023ce8
c0014402:	85 c0                	test   eax,eax
c0014404:	74 5e                	je     c0014464 <terminateTask(int)+0xac>
c0014406:	83 ec 0c             	sub    esp,0xc
c0014409:	c6 05 ec 3c 02 c0 01 	mov    BYTE PTR ds:0xc0023cec,0x1
c0014410:	50                   	push   eax
c0014411:	e8 42 fb ff ff       	call   c0013f58 <unblockTask(ThreadControlBlock*)>
c0014416:	83 c4 10             	add    esp,0x10
c0014419:	8d 76 00             	lea    esi,[esi+0x0]
c001441c:	a1 08 3d 02 c0       	mov    eax,ds:0xc0023d08
c0014421:	48                   	dec    eax
c0014422:	a3 08 3d 02 c0       	mov    ds:0xc0023d08,eax
c0014427:	75 03                	jne    c001442c <terminateTask(int)+0x74>
c0014429:	fb                   	sti    
c001442a:	66 90                	xchg   ax,ax
c001442c:	a1 04 3d 02 c0       	mov    eax,ds:0xc0023d04
c0014431:	48                   	dec    eax
c0014432:	a3 04 3d 02 c0       	mov    ds:0xc0023d04,eax
c0014437:	75 0b                	jne    c0014444 <terminateTask(int)+0x8c>
c0014439:	83 3d 00 3d 02 c0 00 	cmp    DWORD PTR ds:0xc0023d00,0x0
c0014440:	75 36                	jne    c0014478 <terminateTask(int)+0xc0>
c0014442:	66 90                	xchg   ax,ax
c0014444:	a1 08 3d 02 c0       	mov    eax,ds:0xc0023d08
c0014449:	48                   	dec    eax
c001444a:	a3 08 3d 02 c0       	mov    ds:0xc0023d08,eax
c001444f:	75 03                	jne    c0014454 <terminateTask(int)+0x9c>
c0014451:	fb                   	sti    
c0014452:	66 90                	xchg   ax,ax
c0014454:	fa                   	cli    
c0014455:	ff 05 08 3d 02 c0    	inc    DWORD PTR ds:0xc0023d08
c001445b:	90                   	nop
c001445c:	e8 33 f6 ff ff       	call   c0013a94 <schedule()>
c0014461:	eb e1                	jmp    c0014444 <terminateTask(int)+0x8c>
c0014463:	90                   	nop
c0014464:	83 ec 0c             	sub    esp,0xc
c0014467:	68 b6 e9 01 c0       	push   0xc001e9b6
c001446c:	e8 7f 67 ff ff       	call   c000abf0 <Dbg::kprintf(char const*, ...)>
c0014471:	83 c4 10             	add    esp,0x10
c0014474:	eb a6                	jmp    c001441c <terminateTask(int)+0x64>
c0014476:	66 90                	xchg   ax,ax
c0014478:	c7 05 00 3d 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023d00,0x0
c0014482:	eb d8                	jmp    c001445c <terminateTask(int)+0xa4>

c0014484 <Thr::terminateFromIRQ(int)>:
c0014484:	83 ec 18             	sub    esp,0x18
c0014487:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001448b:	50                   	push   eax
c001448c:	e8 27 ff ff ff       	call   c00143b8 <terminateTask(int)>
c0014491:	90                   	nop
c0014492:	66 90                	xchg   ax,ax

c0014494 <Semaphore::release()>:
c0014494:	83 ec 0c             	sub    esp,0xc
c0014497:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001449b:	fa                   	cli    
c001449c:	a1 04 3d 02 c0       	mov    eax,ds:0xc0023d04
c00144a1:	ff 05 08 3d 02 c0    	inc    DWORD PTR ds:0xc0023d08
c00144a7:	8d 48 01             	lea    ecx,[eax+0x1]
c00144aa:	89 0d 04 3d 02 c0    	mov    DWORD PTR ds:0xc0023d04,ecx
c00144b0:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c00144b3:	85 c9                	test   ecx,ecx
c00144b5:	74 41                	je     c00144f8 <Semaphore::release()+0x64>
c00144b7:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c00144ba:	83 ec 0c             	sub    esp,0xc
c00144bd:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00144c0:	51                   	push   ecx
c00144c1:	e8 92 fa ff ff       	call   c0013f58 <unblockTask(ThreadControlBlock*)>
c00144c6:	a1 04 3d 02 c0       	mov    eax,ds:0xc0023d04
c00144cb:	83 c4 10             	add    esp,0x10
c00144ce:	48                   	dec    eax
c00144cf:	90                   	nop
c00144d0:	a3 04 3d 02 c0       	mov    ds:0xc0023d04,eax
c00144d5:	85 c0                	test   eax,eax
c00144d7:	75 0b                	jne    c00144e4 <Semaphore::release()+0x50>
c00144d9:	a1 00 3d 02 c0       	mov    eax,ds:0xc0023d00
c00144de:	85 c0                	test   eax,eax
c00144e0:	75 1e                	jne    c0014500 <Semaphore::release()+0x6c>
c00144e2:	66 90                	xchg   ax,ax
c00144e4:	a1 08 3d 02 c0       	mov    eax,ds:0xc0023d08
c00144e9:	48                   	dec    eax
c00144ea:	a3 08 3d 02 c0       	mov    ds:0xc0023d08,eax
c00144ef:	75 03                	jne    c00144f4 <Semaphore::release()+0x60>
c00144f1:	fb                   	sti    
c00144f2:	66 90                	xchg   ax,ax
c00144f4:	83 c4 0c             	add    esp,0xc
c00144f7:	c3                   	ret    
c00144f8:	ff 4a 0c             	dec    DWORD PTR [edx+0xc]
c00144fb:	eb d3                	jmp    c00144d0 <Semaphore::release()+0x3c>
c00144fd:	8d 76 00             	lea    esi,[esi+0x0]
c0014500:	c7 05 00 3d 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023d00,0x0
c001450a:	e8 85 f5 ff ff       	call   c0013a94 <schedule()>
c001450f:	eb d3                	jmp    c00144e4 <Semaphore::release()+0x50>
c0014511:	8d 76 00             	lea    esi,[esi+0x0]

c0014514 <__static_initialization_and_destruction_0(int, int)>:
c0014514:	83 ec 0c             	sub    esp,0xc
c0014517:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001451c:	0f 85 8e 00 00 00    	jne    c00145b0 <__static_initialization_and_destruction_0(int, int)+0x9c>
c0014522:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001452a:	0f 85 80 00 00 00    	jne    c00145b0 <__static_initialization_and_destruction_0(int, int)+0x9c>
c0014530:	83 ec 0c             	sub    esp,0xc
c0014533:	68 24 3d 02 c0       	push   0xc0023d24
c0014538:	e8 7b 84 00 00       	call   c001c9b8 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001453d:	83 c4 10             	add    esp,0x10
c0014540:	83 ec 04             	sub    esp,0x4
c0014543:	68 c4 f5 01 c0       	push   0xc001f5c4
c0014548:	68 24 3d 02 c0       	push   0xc0023d24
c001454d:	68 68 c9 01 c0       	push   0xc001c968
c0014552:	e8 53 65 ff ff       	call   c000aaaa <__cxa_atexit>
c0014557:	83 c4 10             	add    esp,0x10
c001455a:	83 ec 0c             	sub    esp,0xc
c001455d:	68 18 3d 02 c0       	push   0xc0023d18
c0014562:	e8 51 84 00 00       	call   c001c9b8 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0014567:	83 c4 10             	add    esp,0x10
c001456a:	83 ec 04             	sub    esp,0x4
c001456d:	68 c4 f5 01 c0       	push   0xc001f5c4
c0014572:	68 18 3d 02 c0       	push   0xc0023d18
c0014577:	68 68 c9 01 c0       	push   0xc001c968
c001457c:	e8 29 65 ff ff       	call   c000aaaa <__cxa_atexit>
c0014581:	83 c4 10             	add    esp,0x10
c0014584:	83 ec 0c             	sub    esp,0xc
c0014587:	68 0c 3d 02 c0       	push   0xc0023d0c
c001458c:	e8 27 84 00 00       	call   c001c9b8 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0014591:	83 c4 10             	add    esp,0x10
c0014594:	83 ec 04             	sub    esp,0x4
c0014597:	68 c4 f5 01 c0       	push   0xc001f5c4
c001459c:	68 0c 3d 02 c0       	push   0xc0023d0c
c00145a1:	68 68 c9 01 c0       	push   0xc001c968
c00145a6:	e8 ff 64 ff ff       	call   c000aaaa <__cxa_atexit>
c00145ab:	83 c4 10             	add    esp,0x10
c00145ae:	66 90                	xchg   ax,ax
c00145b0:	90                   	nop
c00145b1:	83 c4 0c             	add    esp,0xc
c00145b4:	c3                   	ret    
c00145b5:	8d 76 00             	lea    esi,[esi+0x0]

c00145b8 <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c00145b8:	83 ec 0c             	sub    esp,0xc
c00145bb:	83 ec 08             	sub    esp,0x8
c00145be:	68 ff ff 00 00       	push   0xffff
c00145c3:	6a 01                	push   0x1
c00145c5:	e8 4a ff ff ff       	call   c0014514 <__static_initialization_and_destruction_0(int, int)>
c00145ca:	83 c4 10             	add    esp,0x10
c00145cd:	83 c4 0c             	add    esp,0xc
c00145d0:	c3                   	ret    

c00145d1 <Vm::inbv(unsigned short)>:
c00145d1:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00145d5:	66 81 fa fe fe       	cmp    dx,0xfefe
c00145da:	75 06                	jne    c00145e2 <Vm::inbv(unsigned short)+0x11>
c00145dc:	a0 6c 3d 02 c0       	mov    al,ds:0xc0023d6c
c00145e1:	c3                   	ret    
c00145e2:	ec                   	in     al,dx
c00145e3:	c3                   	ret    

c00145e4 <Vm::outbv(unsigned short, unsigned char)>:
c00145e4:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00145e8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00145ec:	66 81 fa fe fe       	cmp    dx,0xfefe
c00145f1:	75 25                	jne    c0014618 <Vm::outbv(unsigned short, unsigned char)+0x34>
c00145f3:	8b 0d 6c 3d 02 c0    	mov    ecx,DWORD PTR ds:0xc0023d6c
c00145f9:	8d 51 01             	lea    edx,[ecx+0x1]
c00145fc:	88 81 80 3d 02 c0    	mov    BYTE PTR [ecx-0x3ffdc280],al
c0014602:	89 15 6c 3d 02 c0    	mov    DWORD PTR ds:0xc0023d6c,edx
c0014608:	83 fa 20             	cmp    edx,0x20
c001460b:	75 0c                	jne    c0014619 <Vm::outbv(unsigned short, unsigned char)+0x35>
c001460d:	c7 05 6c 3d 02 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc0023d6c,0x1f
c0014617:	c3                   	ret    
c0014618:	ee                   	out    dx,al
c0014619:	c3                   	ret    

c001461a <Vm::realToLinear(unsigned short, unsigned short)>:
c001461a:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001461f:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0014624:	c1 e0 04             	shl    eax,0x4
c0014627:	01 d0                	add    eax,edx
c0014629:	c3                   	ret    

c001462a <Vm::getSegment(unsigned int)>:
c001462a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001462e:	c1 e8 10             	shr    eax,0x10
c0014631:	c3                   	ret    

c0014632 <Vm::getOffset(unsigned int)>:
c0014632:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014636:	c3                   	ret    

c0014637 <Vm::mainloop2()>:
c0014637:	83 ec 18             	sub    esp,0x18
c001463a:	fa                   	cli    
c001463b:	ff 05 08 3d 02 c0    	inc    DWORD PTR ds:0xc0023d08
c0014641:	6a 02                	push   0x2
c0014643:	c6 05 65 3d 02 c0 01 	mov    BYTE PTR ds:0xc0023d65,0x1
c001464a:	e8 19 f6 ff ff       	call   c0013c68 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001464f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014654:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c0014658:	52                   	push   edx
c0014659:	0f b7 50 59          	movzx  edx,WORD PTR [eax+0x59]
c001465d:	52                   	push   edx
c001465e:	0f b7 50 57          	movzx  edx,WORD PTR [eax+0x57]
c0014662:	52                   	push   edx
c0014663:	0f b7 40 55          	movzx  eax,WORD PTR [eax+0x55]
c0014667:	50                   	push   eax
c0014668:	e8 c2 bb fe ff       	call   c000022f <goToVM86>
c001466d:	83 c4 2c             	add    esp,0x2c
c0014670:	c3                   	ret    

c0014671 <Vm::mainVm8086Loop(void*)>:
c0014671:	a1 08 3d 02 c0       	mov    eax,ds:0xc0023d08
c0014676:	48                   	dec    eax
c0014677:	a3 08 3d 02 c0       	mov    ds:0xc0023d08,eax
c001467c:	75 01                	jne    c001467f <Vm::mainVm8086Loop(void*)+0xe>
c001467e:	fb                   	sti    
c001467f:	eb b6                	jmp    c0014637 <Vm::mainloop2()>

c0014681 <Vm::mainloop3(unsigned long)>:
c0014681:	83 ec 18             	sub    esp,0x18
c0014684:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014688:	fa                   	cli    
c0014689:	ff 05 08 3d 02 c0    	inc    DWORD PTR ds:0xc0023d08
c001468f:	6a 02                	push   0x2
c0014691:	c6 05 64 3d 02 c0 01 	mov    BYTE PTR ds:0xc0023d64,0x1
c0014698:	a3 60 3d 02 c0       	mov    ds:0xc0023d60,eax
c001469d:	e8 c6 f5 ff ff       	call   c0013c68 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c00146a2:	83 c4 1c             	add    esp,0x1c
c00146a5:	eb 90                	jmp    c0014637 <Vm::mainloop2()>

c00146a7 <Vm::initialise8086()>:
c00146a7:	83 ec 0c             	sub    esp,0xc
c00146aa:	68 80 00 00 00       	push   0x80
c00146af:	6a 00                	push   0x0
c00146b1:	68 71 46 01 c0       	push   0xc0014671
c00146b6:	ff 35 30 3d 02 c0    	push   DWORD PTR ds:0xc0023d30
c00146bc:	e8 b3 f1 ff ff       	call   c0013874 <Process::createThread(void (*)(void*), void*, int)>
c00146c1:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c00146c8:	a3 68 3d 02 c0       	mov    ds:0xc0023d68,eax
c00146cd:	68 00 01 00 00       	push   0x100
c00146d2:	a1 30 3d 02 c0       	mov    eax,ds:0xc0023d30
c00146d7:	6a 00                	push   0x0
c00146d9:	6a 00                	push   0x0
c00146db:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00146e1:	e8 46 5c ff ff       	call   c000a32c <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00146e6:	83 c4 2c             	add    esp,0x2c
c00146e9:	c3                   	ret    

c00146ea <Vm::finish8086()>:
c00146ea:	53                   	push   ebx
c00146eb:	83 ec 08             	sub    esp,0x8
c00146ee:	fa                   	cli    
c00146ef:	ff 05 08 3d 02 c0    	inc    DWORD PTR ds:0xc0023d08
c00146f5:	80 3d 64 3d 02 c0 00 	cmp    BYTE PTR ds:0xc0023d64,0x0
c00146fc:	75 15                	jne    c0014713 <Vm::finish8086()+0x29>
c00146fe:	e8 91 f3 ff ff       	call   c0013a94 <schedule()>
c0014703:	a1 08 3d 02 c0       	mov    eax,ds:0xc0023d08
c0014708:	48                   	dec    eax
c0014709:	a3 08 3d 02 c0       	mov    ds:0xc0023d08,eax
c001470e:	75 de                	jne    c00146ee <Vm::finish8086()+0x4>
c0014710:	fb                   	sti    
c0014711:	eb db                	jmp    c00146ee <Vm::finish8086()+0x4>
c0014713:	83 ec 0c             	sub    esp,0xc
c0014716:	8b 1d 60 3d 02 c0    	mov    ebx,DWORD PTR ds:0xc0023d60
c001471c:	ff 35 68 3d 02 c0    	push   DWORD PTR ds:0xc0023d68
c0014722:	c6 05 64 3d 02 c0 00 	mov    BYTE PTR ds:0xc0023d64,0x0
c0014729:	e8 2a f8 ff ff       	call   c0013f58 <unblockTask(ThreadControlBlock*)>
c001472e:	a1 08 3d 02 c0       	mov    eax,ds:0xc0023d08
c0014733:	83 c4 10             	add    esp,0x10
c0014736:	8d 50 ff             	lea    edx,[eax-0x1]
c0014739:	89 15 08 3d 02 c0    	mov    DWORD PTR ds:0xc0023d08,edx
c001473f:	85 d2                	test   edx,edx
c0014741:	75 01                	jne    c0014744 <Vm::finish8086()+0x5a>
c0014743:	fb                   	sti    
c0014744:	89 d8                	mov    eax,ebx
c0014746:	83 c4 08             	add    esp,0x8
c0014749:	5b                   	pop    ebx
c001474a:	c3                   	ret    

c001474b <Vm::getOutput8086(unsigned char*)>:
c001474b:	57                   	push   edi
c001474c:	8b 0d 6c 3d 02 c0    	mov    ecx,DWORD PTR ds:0xc0023d6c
c0014752:	56                   	push   esi
c0014753:	be 80 3d 02 c0       	mov    esi,0xc0023d80
c0014758:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001475c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001475e:	a1 6c 3d 02 c0       	mov    eax,ds:0xc0023d6c
c0014763:	5e                   	pop    esi
c0014764:	c7 05 6c 3d 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023d6c,0x0
c001476e:	5f                   	pop    edi
c001476f:	c3                   	ret    

c0014770 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0014770:	55                   	push   ebp
c0014771:	57                   	push   edi
c0014772:	56                   	push   esi
c0014773:	53                   	push   ebx
c0014774:	83 ec 0c             	sub    esp,0xc
c0014777:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001477b:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001477f:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0014783:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0014787:	fa                   	cli    
c0014788:	ff 05 08 3d 02 c0    	inc    DWORD PTR ds:0xc0023d08
c001478e:	80 3d 65 3d 02 c0 00 	cmp    BYTE PTR ds:0xc0023d65,0x0
c0014795:	75 15                	jne    c00147ac <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x3c>
c0014797:	e8 f8 f2 ff ff       	call   c0013a94 <schedule()>
c001479c:	a1 08 3d 02 c0       	mov    eax,ds:0xc0023d08
c00147a1:	48                   	dec    eax
c00147a2:	a3 08 3d 02 c0       	mov    ds:0xc0023d08,eax
c00147a7:	75 de                	jne    c0014787 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c00147a9:	fb                   	sti    
c00147aa:	eb db                	jmp    c0014787 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c00147ac:	a1 68 3d 02 c0       	mov    eax,ds:0xc0023d68
c00147b1:	c7 05 6c 3d 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023d6c,0x0
c00147bb:	66 89 78 55          	mov    WORD PTR [eax+0x55],di
c00147bf:	66 89 70 57          	mov    WORD PTR [eax+0x57],si
c00147c3:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c00147c7:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c00147cb:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c00147cf:	0f b7 ff             	movzx  edi,di
c00147d2:	0f b7 f6             	movzx  esi,si
c00147d5:	50                   	push   eax
c00147d6:	6a 20                	push   0x20
c00147d8:	6a 00                	push   0x0
c00147da:	68 80 3d 02 c0       	push   0xc0023d80
c00147df:	e8 0c bd fe ff       	call   c00004f0 <memset>
c00147e4:	5a                   	pop    edx
c00147e5:	59                   	pop    ecx
c00147e6:	57                   	push   edi
c00147e7:	56                   	push   esi
c00147e8:	e8 2d fe ff ff       	call   c001461a <Vm::realToLinear(unsigned short, unsigned short)>
c00147ed:	83 c4 10             	add    esp,0x10
c00147f0:	89 c7                	mov    edi,eax
c00147f2:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00147f6:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00147fa:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00147fc:	a1 08 3d 02 c0       	mov    eax,ds:0xc0023d08
c0014801:	c6 05 65 3d 02 c0 00 	mov    BYTE PTR ds:0xc0023d65,0x0
c0014808:	48                   	dec    eax
c0014809:	a3 08 3d 02 c0       	mov    ds:0xc0023d08,eax
c001480e:	75 01                	jne    c0014811 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0xa1>
c0014810:	fb                   	sti    
c0014811:	83 ec 0c             	sub    esp,0xc
c0014814:	ff 35 68 3d 02 c0    	push   DWORD PTR ds:0xc0023d68
c001481a:	e8 39 f7 ff ff       	call   c0013f58 <unblockTask(ThreadControlBlock*)>
c001481f:	83 c4 1c             	add    esp,0x1c
c0014822:	b0 01                	mov    al,0x1
c0014824:	5b                   	pop    ebx
c0014825:	5e                   	pop    esi
c0014826:	5f                   	pop    edi
c0014827:	5d                   	pop    ebp
c0014828:	c3                   	ret    

c0014829 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0014829:	55                   	push   ebp
c001482a:	57                   	push   edi
c001482b:	56                   	push   esi
c001482c:	53                   	push   ebx
c001482d:	83 ec 2c             	sub    esp,0x2c
c0014830:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0014834:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0014838:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c001483c:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0014840:	fa                   	cli    
c0014841:	ff 05 08 3d 02 c0    	inc    DWORD PTR ds:0xc0023d08
c0014847:	0f b6 35 65 3d 02 c0 	movzx  esi,BYTE PTR ds:0xc0023d65
c001484e:	89 f0                	mov    eax,esi
c0014850:	84 c0                	test   al,al
c0014852:	75 1d                	jne    c0014871 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x48>
c0014854:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0014858:	e8 37 f2 ff ff       	call   c0013a94 <schedule()>
c001485d:	a1 08 3d 02 c0       	mov    eax,ds:0xc0023d08
c0014862:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014866:	48                   	dec    eax
c0014867:	a3 08 3d 02 c0       	mov    ds:0xc0023d08,eax
c001486c:	75 d2                	jne    c0014840 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c001486e:	fb                   	sti    
c001486f:	eb cf                	jmp    c0014840 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0014871:	a1 68 3d 02 c0       	mov    eax,ds:0xc0023d68
c0014876:	c7 05 6c 3d 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023d6c,0x0
c0014880:	66 89 50 59          	mov    WORD PTR [eax+0x59],dx
c0014884:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c0014888:	66 89 68 55          	mov    WORD PTR [eax+0x55],bp
c001488c:	66 89 78 57          	mov    WORD PTR [eax+0x57],di
c0014890:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c0014894:	50                   	push   eax
c0014895:	6a 20                	push   0x20
c0014897:	6a 00                	push   0x0
c0014899:	68 80 3d 02 c0       	push   0xc0023d80
c001489e:	e8 4d bc fe ff       	call   c00004f0 <memset>
c00148a3:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c00148aa:	e8 b2 35 ff ff       	call   c0007e61 <malloc>
c00148af:	83 c4 0c             	add    esp,0xc
c00148b2:	89 c3                	mov    ebx,eax
c00148b4:	ff 35 30 3d 02 c0    	push   DWORD PTR ds:0xc0023d30
c00148ba:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00148be:	50                   	push   eax
c00148bf:	e8 a2 68 ff ff       	call   c000b166 <File::File(char const*, Process*)>
c00148c4:	83 c4 10             	add    esp,0x10
c00148c7:	85 db                	test   ebx,ebx
c00148c9:	75 0a                	jne    c00148d5 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xac>
c00148cb:	83 ec 0c             	sub    esp,0xc
c00148ce:	68 e0 ea 01 c0       	push   0xc001eae0
c00148d3:	eb 3e                	jmp    c0014913 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c00148d5:	50                   	push   eax
c00148d6:	8d 44 24 17          	lea    eax,[esp+0x17]
c00148da:	50                   	push   eax
c00148db:	8d 44 24 20          	lea    eax,[esp+0x20]
c00148df:	50                   	push   eax
c00148e0:	53                   	push   ebx
c00148e1:	e8 ec 6b ff ff       	call   c000b4d2 <File::stat(unsigned long long*, bool*)>
c00148e6:	83 c4 10             	add    esp,0x10
c00148e9:	80 7c 24 13 00       	cmp    BYTE PTR [esp+0x13],0x0
c00148ee:	74 0a                	je     c00148fa <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd1>
c00148f0:	83 ec 0c             	sub    esp,0xc
c00148f3:	68 f4 ea 01 c0       	push   0xc001eaf4
c00148f8:	eb 19                	jmp    c0014913 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c00148fa:	51                   	push   ecx
c00148fb:	51                   	push   ecx
c00148fc:	6a 01                	push   0x1
c00148fe:	53                   	push   ebx
c00148ff:	e8 22 69 ff ff       	call   c000b226 <File::open(FileOpenMode)>
c0014904:	83 c4 10             	add    esp,0x10
c0014907:	85 c0                	test   eax,eax
c0014909:	74 24                	je     c001492f <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x106>
c001490b:	83 ec 0c             	sub    esp,0xc
c001490e:	68 0d eb 01 c0       	push   0xc001eb0d
c0014913:	e8 27 be ff ff       	call   c001073f <Krnl::panic(char const*)>
c0014918:	a1 08 3d 02 c0       	mov    eax,ds:0xc0023d08
c001491d:	83 c4 10             	add    esp,0x10
c0014920:	48                   	dec    eax
c0014921:	a3 08 3d 02 c0       	mov    ds:0xc0023d08,eax
c0014926:	85 c0                	test   eax,eax
c0014928:	75 01                	jne    c001492b <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x102>
c001492a:	fb                   	sti    
c001492b:	31 f6                	xor    esi,esi
c001492d:	eb 58                	jmp    c0014987 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x15e>
c001492f:	0f b7 ed             	movzx  ebp,bp
c0014932:	50                   	push   eax
c0014933:	0f b7 ff             	movzx  edi,di
c0014936:	50                   	push   eax
c0014937:	55                   	push   ebp
c0014938:	57                   	push   edi
c0014939:	e8 dc fc ff ff       	call   c001461a <Vm::realToLinear(unsigned short, unsigned short)>
c001493e:	5a                   	pop    edx
c001493f:	8b 13                	mov    edx,DWORD PTR [ebx]
c0014941:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0014945:	51                   	push   ecx
c0014946:	50                   	push   eax
c0014947:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001494b:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001494f:	53                   	push   ebx
c0014950:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0014953:	83 c4 14             	add    esp,0x14
c0014956:	53                   	push   ebx
c0014957:	e8 28 69 ff ff       	call   c000b284 <File::close()>
c001495c:	a1 08 3d 02 c0       	mov    eax,ds:0xc0023d08
c0014961:	83 c4 10             	add    esp,0x10
c0014964:	48                   	dec    eax
c0014965:	c6 05 65 3d 02 c0 00 	mov    BYTE PTR ds:0xc0023d65,0x0
c001496c:	a3 08 3d 02 c0       	mov    ds:0xc0023d08,eax
c0014971:	85 c0                	test   eax,eax
c0014973:	75 01                	jne    c0014976 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x14d>
c0014975:	fb                   	sti    
c0014976:	83 ec 0c             	sub    esp,0xc
c0014979:	ff 35 68 3d 02 c0    	push   DWORD PTR ds:0xc0023d68
c001497f:	e8 d4 f5 ff ff       	call   c0013f58 <unblockTask(ThreadControlBlock*)>
c0014984:	83 c4 10             	add    esp,0x10
c0014987:	83 c4 2c             	add    esp,0x2c
c001498a:	89 f0                	mov    eax,esi
c001498c:	5b                   	pop    ebx
c001498d:	5e                   	pop    esi
c001498e:	5f                   	pop    edi
c001498f:	5d                   	pop    ebp
c0014990:	c3                   	ret    

c0014991 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c0014991:	57                   	push   edi
c0014992:	56                   	push   esi
c0014993:	53                   	push   ebx
c0014994:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0014998:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001499c:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00149a0:	83 e8 06             	sub    eax,0x6
c00149a3:	0f b7 c0             	movzx  eax,ax
c00149a6:	50                   	push   eax
c00149a7:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c00149ac:	50                   	push   eax
c00149ad:	e8 68 fc ff ff       	call   c001461a <Vm::realToLinear(unsigned short, unsigned short)>
c00149b2:	5a                   	pop    edx
c00149b3:	5e                   	pop    esi
c00149b4:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c00149b7:	8d 56 fa             	lea    edx,[esi-0x6]
c00149ba:	81 e2 ff ff 00 00    	and    edx,0xffff
c00149c0:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c00149c3:	8b 51 38             	mov    edx,DWORD PTR [ecx+0x38]
c00149c6:	83 c2 02             	add    edx,0x2
c00149c9:	66 89 10             	mov    WORD PTR [eax],dx
c00149cc:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c00149cf:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c00149d3:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c00149d6:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c00149da:	89 d6                	mov    esi,edx
c00149dc:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c00149e2:	66 81 e6 ff fd       	and    si,0xfdff
c00149e7:	80 7f 5d 00          	cmp    BYTE PTR [edi+0x5d],0x0
c00149eb:	74 07                	je     c00149f4 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x63>
c00149ed:	89 d6                	mov    esi,edx
c00149ef:	66 81 ce 00 02       	or     si,0x200
c00149f4:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c00149f8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00149fd:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c0014a01:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c0014a09:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c0014a0c:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c0014a14:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c0014a17:	5b                   	pop    ebx
c0014a18:	5e                   	pop    esi
c0014a19:	5f                   	pop    edi
c0014a1a:	c3                   	ret    

c0014a1b <Vm::readByteFromReal(unsigned short, unsigned short)>:
c0014a1b:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0014a20:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0014a25:	c1 e0 04             	shl    eax,0x4
c0014a28:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c0014a2b:	c3                   	ret    

c0014a2c <Vm::readWordFromReal(unsigned short, unsigned short)>:
c0014a2c:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0014a31:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0014a36:	c1 e0 04             	shl    eax,0x4
c0014a39:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c0014a3d:	c3                   	ret    

c0014a3e <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c0014a3e:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0014a43:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0014a48:	c1 e0 04             	shl    eax,0x4
c0014a4b:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c0014a4e:	c3                   	ret    

c0014a4f <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c0014a4f:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0014a54:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0014a59:	c1 e0 04             	shl    eax,0x4
c0014a5c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0014a60:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c0014a63:	c3                   	ret    

c0014a64 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c0014a64:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0014a69:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0014a6e:	c1 e0 04             	shl    eax,0x4
c0014a71:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0014a75:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c0014a79:	c3                   	ret    

c0014a7a <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c0014a7a:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0014a7f:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0014a84:	c1 e0 04             	shl    eax,0x4
c0014a87:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0014a8b:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c0014a8e:	c3                   	ret    

c0014a8f <Vm::faultHandler(regs*)>:
c0014a8f:	55                   	push   ebp
c0014a90:	57                   	push   edi
c0014a91:	56                   	push   esi
c0014a92:	53                   	push   ebx
c0014a93:	83 ec 1c             	sub    esp,0x1c
c0014a96:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0014a9a:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0014a9d:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c0014aa1:	0f b7 f8             	movzx  edi,ax
c0014aa4:	52                   	push   edx
c0014aa5:	0f b7 c0             	movzx  eax,ax
c0014aa8:	50                   	push   eax
c0014aa9:	e8 6c fb ff ff       	call   c001461a <Vm::realToLinear(unsigned short, unsigned short)>
c0014aae:	5a                   	pop    edx
c0014aaf:	8b 6b 48             	mov    ebp,DWORD PTR [ebx+0x48]
c0014ab2:	59                   	pop    ecx
c0014ab3:	89 c1                	mov    ecx,eax
c0014ab5:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0014ab8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014abc:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0014ac1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0014ac5:	0f b7 c5             	movzx  eax,bp
c0014ac8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014acc:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0014ad0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0014ad4:	e8 41 fb ff ff       	call   c001461a <Vm::realToLinear(unsigned short, unsigned short)>
c0014ad9:	5e                   	pop    esi
c0014ada:	be 06 00 00 00       	mov    esi,0x6
c0014adf:	5a                   	pop    edx
c0014ae0:	c6 44 24 03 00       	mov    BYTE PTR [esp+0x3],0x0
c0014ae5:	c6 44 24 02 00       	mov    BYTE PTR [esp+0x2],0x0
c0014aea:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0014aed:	80 fa 9d             	cmp    dl,0x9d
c0014af0:	0f 84 2c 02 00 00    	je     c0014d22 <Vm::faultHandler(regs*)+0x293>
c0014af6:	0f 87 91 00 00 00    	ja     c0014b8d <Vm::faultHandler(regs*)+0xfe>
c0014afc:	80 fa 66             	cmp    dl,0x66
c0014aff:	0f 84 98 01 00 00    	je     c0014c9d <Vm::faultHandler(regs*)+0x20e>
c0014b05:	77 47                	ja     c0014b4e <Vm::faultHandler(regs*)+0xbf>
c0014b07:	80 fa 36             	cmp    dl,0x36
c0014b0a:	0f 84 80 01 00 00    	je     c0014c90 <Vm::faultHandler(regs*)+0x201>
c0014b10:	77 1a                	ja     c0014b2c <Vm::faultHandler(regs*)+0x9d>
c0014b12:	80 fa 26             	cmp    dl,0x26
c0014b15:	0f 84 4e 01 00 00    	je     c0014c69 <Vm::faultHandler(regs*)+0x1da>
c0014b1b:	80 fa 2e             	cmp    dl,0x2e
c0014b1e:	0f 85 e2 05 00 00    	jne    c0015106 <Vm::faultHandler(regs*)+0x677>
c0014b24:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0014b27:	31 f6                	xor    esi,esi
c0014b29:	41                   	inc    ecx
c0014b2a:	eb be                	jmp    c0014aea <Vm::faultHandler(regs*)+0x5b>
c0014b2c:	80 fa 64             	cmp    dl,0x64
c0014b2f:	0f 84 41 01 00 00    	je     c0014c76 <Vm::faultHandler(regs*)+0x1e7>
c0014b35:	0f 87 48 01 00 00    	ja     c0014c83 <Vm::faultHandler(regs*)+0x1f4>
c0014b3b:	80 fa 3e             	cmp    dl,0x3e
c0014b3e:	0f 85 c2 05 00 00    	jne    c0015106 <Vm::faultHandler(regs*)+0x677>
c0014b44:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0014b47:	be 01 00 00 00       	mov    esi,0x1
c0014b4c:	eb db                	jmp    c0014b29 <Vm::faultHandler(regs*)+0x9a>
c0014b4e:	80 fa 6d             	cmp    dl,0x6d
c0014b51:	0f 84 ec 02 00 00    	je     c0014e43 <Vm::faultHandler(regs*)+0x3b4>
c0014b57:	77 17                	ja     c0014b70 <Vm::faultHandler(regs*)+0xe1>
c0014b59:	80 fa 67             	cmp    dl,0x67
c0014b5c:	0f 84 48 01 00 00    	je     c0014caa <Vm::faultHandler(regs*)+0x21b>
c0014b62:	80 fa 6c             	cmp    dl,0x6c
c0014b65:	0f 84 69 02 00 00    	je     c0014dd4 <Vm::faultHandler(regs*)+0x345>
c0014b6b:	e9 96 05 00 00       	jmp    c0015106 <Vm::faultHandler(regs*)+0x677>
c0014b70:	80 fa 6f             	cmp    dl,0x6f
c0014b73:	0f 84 f4 03 00 00    	je     c0014f6d <Vm::faultHandler(regs*)+0x4de>
c0014b79:	0f 82 59 03 00 00    	jb     c0014ed8 <Vm::faultHandler(regs*)+0x449>
c0014b7f:	80 fa 9c             	cmp    dl,0x9c
c0014b82:	0f 84 2f 01 00 00    	je     c0014cb7 <Vm::faultHandler(regs*)+0x228>
c0014b88:	e9 79 05 00 00       	jmp    c0015106 <Vm::faultHandler(regs*)+0x677>
c0014b8d:	80 fa ec             	cmp    dl,0xec
c0014b90:	0f 84 14 05 00 00    	je     c00150aa <Vm::faultHandler(regs*)+0x61b>
c0014b96:	77 7b                	ja     c0014c13 <Vm::faultHandler(regs*)+0x184>
c0014b98:	80 fa e4             	cmp    dl,0xe4
c0014b9b:	0f 84 93 04 00 00    	je     c0015034 <Vm::faultHandler(regs*)+0x5a5>
c0014ba1:	77 53                	ja     c0014bf6 <Vm::faultHandler(regs*)+0x167>
c0014ba3:	80 fa cd             	cmp    dl,0xcd
c0014ba6:	0f 84 d9 01 00 00    	je     c0014d85 <Vm::faultHandler(regs*)+0x2f6>
c0014bac:	80 fa cf             	cmp    dl,0xcf
c0014baf:	0f 85 51 05 00 00    	jne    c0015106 <Vm::faultHandler(regs*)+0x677>
c0014bb5:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0014bb8:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c0014bbb:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0014bbf:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c0014bc2:	0f b7 50 04          	movzx  edx,WORD PTR [eax+0x4]
c0014bc6:	81 ca 00 02 02 00    	or     edx,0x20200
c0014bcc:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0014bcf:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c0014bd3:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0014bd9:	66 c1 e8 09          	shr    ax,0x9
c0014bdd:	83 e0 01             	and    eax,0x1
c0014be0:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0014be3:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0014be6:	83 c0 06             	add    eax,0x6
c0014be9:	25 ff ff 00 00       	and    eax,0xffff
c0014bee:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0014bf1:	e9 0c 05 00 00       	jmp    c0015102 <Vm::faultHandler(regs*)+0x673>
c0014bf6:	80 fa e6             	cmp    dl,0xe6
c0014bf9:	0f 84 7f 04 00 00    	je     c001507e <Vm::faultHandler(regs*)+0x5ef>
c0014bff:	0f 82 4b 04 00 00    	jb     c0015050 <Vm::faultHandler(regs*)+0x5c1>
c0014c05:	80 fa e7             	cmp    dl,0xe7
c0014c08:	0f 84 87 04 00 00    	je     c0015095 <Vm::faultHandler(regs*)+0x606>
c0014c0e:	e9 f3 04 00 00       	jmp    c0015106 <Vm::faultHandler(regs*)+0x677>
c0014c13:	80 fa ef             	cmp    dl,0xef
c0014c16:	0f 84 d1 04 00 00    	je     c00150ed <Vm::faultHandler(regs*)+0x65e>
c0014c1c:	77 28                	ja     c0014c46 <Vm::faultHandler(regs*)+0x1b7>
c0014c1e:	80 fa ed             	cmp    dl,0xed
c0014c21:	0f 84 9f 04 00 00    	je     c00150c6 <Vm::faultHandler(regs*)+0x637>
c0014c27:	80 fa ee             	cmp    dl,0xee
c0014c2a:	0f 85 d6 04 00 00    	jne    c0015106 <Vm::faultHandler(regs*)+0x677>
c0014c30:	50                   	push   eax
c0014c31:	50                   	push   eax
c0014c32:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0014c36:	50                   	push   eax
c0014c37:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0014c3b:	50                   	push   eax
c0014c3c:	e8 a3 f9 ff ff       	call   c00145e4 <Vm::outbv(unsigned short, unsigned char)>
c0014c41:	e9 9f 04 00 00       	jmp    c00150e5 <Vm::faultHandler(regs*)+0x656>
c0014c46:	80 fa fa             	cmp    dl,0xfa
c0014c49:	0f 84 69 01 00 00    	je     c0014db8 <Vm::faultHandler(regs*)+0x329>
c0014c4f:	80 fa fb             	cmp    dl,0xfb
c0014c52:	0f 84 6e 01 00 00    	je     c0014dc6 <Vm::faultHandler(regs*)+0x337>
c0014c58:	80 fa f3             	cmp    dl,0xf3
c0014c5b:	0f 85 a5 04 00 00    	jne    c0015106 <Vm::faultHandler(regs*)+0x677>
c0014c61:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0014c64:	e9 c0 fe ff ff       	jmp    c0014b29 <Vm::faultHandler(regs*)+0x9a>
c0014c69:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0014c6c:	be 02 00 00 00       	mov    esi,0x2
c0014c71:	e9 b3 fe ff ff       	jmp    c0014b29 <Vm::faultHandler(regs*)+0x9a>
c0014c76:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0014c79:	be 03 00 00 00       	mov    esi,0x3
c0014c7e:	e9 a6 fe ff ff       	jmp    c0014b29 <Vm::faultHandler(regs*)+0x9a>
c0014c83:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0014c86:	be 04 00 00 00       	mov    esi,0x4
c0014c8b:	e9 99 fe ff ff       	jmp    c0014b29 <Vm::faultHandler(regs*)+0x9a>
c0014c90:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0014c93:	be 05 00 00 00       	mov    esi,0x5
c0014c98:	e9 8c fe ff ff       	jmp    c0014b29 <Vm::faultHandler(regs*)+0x9a>
c0014c9d:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0014ca0:	c6 44 24 02 01       	mov    BYTE PTR [esp+0x2],0x1
c0014ca5:	e9 7f fe ff ff       	jmp    c0014b29 <Vm::faultHandler(regs*)+0x9a>
c0014caa:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0014cad:	c6 44 24 03 01       	mov    BYTE PTR [esp+0x3],0x1
c0014cb2:	e9 72 fe ff ff       	jmp    c0014b29 <Vm::faultHandler(regs*)+0x9a>
c0014cb7:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0014cba:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0014cbe:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0014cc3:	74 30                	je     c0014cf5 <Vm::faultHandler(regs*)+0x266>
c0014cc5:	83 e9 04             	sub    ecx,0x4
c0014cc8:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0014cce:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0014cd4:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0014cd7:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0014cda:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0014ce0:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c0014ce4:	0f 84 15 04 00 00    	je     c00150ff <Vm::faultHandler(regs*)+0x670>
c0014cea:	80 ce 02             	or     dh,0x2
c0014ced:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0014cf0:	e9 0a 04 00 00       	jmp    c00150ff <Vm::faultHandler(regs*)+0x670>
c0014cf5:	83 e9 02             	sub    ecx,0x2
c0014cf8:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0014cfe:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0014d01:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0014d05:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0014d0b:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c0014d0f:	74 05                	je     c0014d16 <Vm::faultHandler(regs*)+0x287>
c0014d11:	80 ce 02             	or     dh,0x2
c0014d14:	eb 03                	jmp    c0014d19 <Vm::faultHandler(regs*)+0x28a>
c0014d16:	80 e6 fd             	and    dh,0xfd
c0014d19:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0014d1d:	e9 dd 03 00 00       	jmp    c00150ff <Vm::faultHandler(regs*)+0x670>
c0014d22:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0014d27:	74 2a                	je     c0014d53 <Vm::faultHandler(regs*)+0x2c4>
c0014d29:	8b 10                	mov    edx,DWORD PTR [eax]
c0014d2b:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0014d31:	81 ca 00 02 02 00    	or     edx,0x20200
c0014d37:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0014d3a:	8b 00                	mov    eax,DWORD PTR [eax]
c0014d3c:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0014d42:	c1 e8 09             	shr    eax,0x9
c0014d45:	83 e0 01             	and    eax,0x1
c0014d48:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0014d4b:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0014d4e:	83 c0 04             	add    eax,0x4
c0014d51:	eb 25                	jmp    c0014d78 <Vm::faultHandler(regs*)+0x2e9>
c0014d53:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0014d56:	81 ca 00 02 02 00    	or     edx,0x20200
c0014d5c:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0014d5f:	66 8b 00             	mov    ax,WORD PTR [eax]
c0014d62:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0014d68:	66 c1 e8 09          	shr    ax,0x9
c0014d6c:	83 e0 01             	and    eax,0x1
c0014d6f:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0014d72:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0014d75:	83 c0 02             	add    eax,0x2
c0014d78:	25 ff ff 00 00       	and    eax,0xffff
c0014d7d:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0014d80:	e9 7a 03 00 00       	jmp    c00150ff <Vm::faultHandler(regs*)+0x670>
c0014d85:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0014d89:	3c ee                	cmp    al,0xee
c0014d8b:	75 10                	jne    c0014d9d <Vm::faultHandler(regs*)+0x30e>
c0014d8d:	83 ec 0c             	sub    esp,0xc
c0014d90:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c0014d93:	e8 e9 f8 ff ff       	call   c0014681 <Vm::mainloop3(unsigned long)>
c0014d98:	e9 4b 03 00 00       	jmp    c00150e8 <Vm::faultHandler(regs*)+0x659>
c0014d9d:	83 ec 0c             	sub    esp,0xc
c0014da0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0014da4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014da8:	51                   	push   ecx
c0014da9:	50                   	push   eax
c0014daa:	53                   	push   ebx
c0014dab:	e8 e1 fb ff ff       	call   c0014991 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c0014db0:	83 c4 20             	add    esp,0x20
c0014db3:	e9 4a 03 00 00       	jmp    c0015102 <Vm::faultHandler(regs*)+0x673>
c0014db8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014dbd:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c0014dc1:	e9 39 03 00 00       	jmp    c00150ff <Vm::faultHandler(regs*)+0x670>
c0014dc6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014dcb:	c6 40 5d 01          	mov    BYTE PTR [eax+0x5d],0x1
c0014dcf:	e9 2b 03 00 00       	jmp    c00150ff <Vm::faultHandler(regs*)+0x670>
c0014dd4:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0014dd7:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0014ddc:	74 2b                	je     c0014e09 <Vm::faultHandler(regs*)+0x37a>
c0014dde:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c0014de5:	76 22                	jbe    c0014e09 <Vm::faultHandler(regs*)+0x37a>
c0014de7:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0014deb:	50                   	push   eax
c0014dec:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0014df0:	50                   	push   eax
c0014df1:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0014df5:	50                   	push   eax
c0014df6:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0014dfa:	50                   	push   eax
c0014dfb:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0014dff:	50                   	push   eax
c0014e00:	6a 6c                	push   0x6c
c0014e02:	6a 6c                	push   0x6c
c0014e04:	e9 b9 01 00 00       	jmp    c0014fc2 <Vm::faultHandler(regs*)+0x533>
c0014e09:	83 ec 0c             	sub    esp,0xc
c0014e0c:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0014e10:	0f b7 f6             	movzx  esi,si
c0014e13:	50                   	push   eax
c0014e14:	e8 b8 f7 ff ff       	call   c00145d1 <Vm::inbv(unsigned short)>
c0014e19:	83 c4 0c             	add    esp,0xc
c0014e1c:	0f b6 c0             	movzx  eax,al
c0014e1f:	50                   	push   eax
c0014e20:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c0014e24:	50                   	push   eax
c0014e25:	56                   	push   esi
c0014e26:	e8 24 fc ff ff       	call   c0014a4f <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c0014e2b:	83 c4 10             	add    esp,0x10
c0014e2e:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0014e31:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0014e35:	74 03                	je     c0014e3a <Vm::faultHandler(regs*)+0x3ab>
c0014e37:	48                   	dec    eax
c0014e38:	eb 01                	jmp    c0014e3b <Vm::faultHandler(regs*)+0x3ac>
c0014e3a:	40                   	inc    eax
c0014e3b:	0f b7 c0             	movzx  eax,ax
c0014e3e:	e9 8d 00 00 00       	jmp    c0014ed0 <Vm::faultHandler(regs*)+0x441>
c0014e43:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0014e46:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0014e49:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0014e4e:	74 29                	je     c0014e79 <Vm::faultHandler(regs*)+0x3ea>
c0014e50:	3d ff ff 00 00       	cmp    eax,0xffff
c0014e55:	76 22                	jbe    c0014e79 <Vm::faultHandler(regs*)+0x3ea>
c0014e57:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0014e5b:	50                   	push   eax
c0014e5c:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0014e60:	50                   	push   eax
c0014e61:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0014e65:	50                   	push   eax
c0014e66:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0014e6a:	50                   	push   eax
c0014e6b:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0014e6f:	50                   	push   eax
c0014e70:	6a 6d                	push   0x6d
c0014e72:	6a 6d                	push   0x6d
c0014e74:	e9 49 01 00 00       	jmp    c0014fc2 <Vm::faultHandler(regs*)+0x533>
c0014e79:	0f b7 c8             	movzx  ecx,ax
c0014e7c:	0f b7 f6             	movzx  esi,si
c0014e7f:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0014e82:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0014e87:	74 20                	je     c0014ea9 <Vm::faultHandler(regs*)+0x41a>
c0014e89:	ed                   	in     eax,dx
c0014e8a:	55                   	push   ebp
c0014e8b:	50                   	push   eax
c0014e8c:	51                   	push   ecx
c0014e8d:	56                   	push   esi
c0014e8e:	e8 e7 fb ff ff       	call   c0014a7a <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c0014e93:	83 c4 10             	add    esp,0x10
c0014e96:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0014e99:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0014e9d:	74 05                	je     c0014ea4 <Vm::faultHandler(regs*)+0x415>
c0014e9f:	83 e8 04             	sub    eax,0x4
c0014ea2:	eb 27                	jmp    c0014ecb <Vm::faultHandler(regs*)+0x43c>
c0014ea4:	83 c0 04             	add    eax,0x4
c0014ea7:	eb 22                	jmp    c0014ecb <Vm::faultHandler(regs*)+0x43c>
c0014ea9:	66 ed                	in     ax,dx
c0014eab:	0f b7 c0             	movzx  eax,ax
c0014eae:	57                   	push   edi
c0014eaf:	50                   	push   eax
c0014eb0:	51                   	push   ecx
c0014eb1:	56                   	push   esi
c0014eb2:	e8 ad fb ff ff       	call   c0014a64 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c0014eb7:	83 c4 10             	add    esp,0x10
c0014eba:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0014ebd:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0014ec1:	74 05                	je     c0014ec8 <Vm::faultHandler(regs*)+0x439>
c0014ec3:	83 e8 02             	sub    eax,0x2
c0014ec6:	eb 03                	jmp    c0014ecb <Vm::faultHandler(regs*)+0x43c>
c0014ec8:	83 c0 02             	add    eax,0x2
c0014ecb:	25 ff ff 00 00       	and    eax,0xffff
c0014ed0:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0014ed3:	e9 27 02 00 00       	jmp    c00150ff <Vm::faultHandler(regs*)+0x670>
c0014ed8:	8d 46 ff             	lea    eax,[esi-0x1]
c0014edb:	3c 05                	cmp    al,0x5
c0014edd:	77 24                	ja     c0014f03 <Vm::faultHandler(regs*)+0x474>
c0014edf:	0f b6 c0             	movzx  eax,al
c0014ee2:	ff 24 85 80 eb 01 c0 	jmp    DWORD PTR [eax*4-0x3ffe1480]
c0014ee9:	0f b7 fd             	movzx  edi,bp
c0014eec:	eb 15                	jmp    c0014f03 <Vm::faultHandler(regs*)+0x474>
c0014eee:	0f b7 7b 0c          	movzx  edi,WORD PTR [ebx+0xc]
c0014ef2:	eb 0f                	jmp    c0014f03 <Vm::faultHandler(regs*)+0x474>
c0014ef4:	0f b7 7b 08          	movzx  edi,WORD PTR [ebx+0x8]
c0014ef8:	eb 09                	jmp    c0014f03 <Vm::faultHandler(regs*)+0x474>
c0014efa:	0f b7 7b 04          	movzx  edi,WORD PTR [ebx+0x4]
c0014efe:	eb 03                	jmp    c0014f03 <Vm::faultHandler(regs*)+0x474>
c0014f00:	0f b7 3b             	movzx  edi,WORD PTR [ebx]
c0014f03:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0014f06:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0014f0b:	74 29                	je     c0014f36 <Vm::faultHandler(regs*)+0x4a7>
c0014f0d:	3d ff ff 00 00       	cmp    eax,0xffff
c0014f12:	76 22                	jbe    c0014f36 <Vm::faultHandler(regs*)+0x4a7>
c0014f14:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0014f18:	50                   	push   eax
c0014f19:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0014f1d:	50                   	push   eax
c0014f1e:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0014f22:	50                   	push   eax
c0014f23:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0014f27:	50                   	push   eax
c0014f28:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0014f2c:	50                   	push   eax
c0014f2d:	6a 6e                	push   0x6e
c0014f2f:	6a 6e                	push   0x6e
c0014f31:	e9 8c 00 00 00       	jmp    c0014fc2 <Vm::faultHandler(regs*)+0x533>
c0014f36:	0f b7 c0             	movzx  eax,ax
c0014f39:	52                   	push   edx
c0014f3a:	52                   	push   edx
c0014f3b:	50                   	push   eax
c0014f3c:	57                   	push   edi
c0014f3d:	e8 d9 fa ff ff       	call   c0014a1b <Vm::readByteFromReal(unsigned short, unsigned short)>
c0014f42:	59                   	pop    ecx
c0014f43:	0f b6 c0             	movzx  eax,al
c0014f46:	5e                   	pop    esi
c0014f47:	50                   	push   eax
c0014f48:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0014f4c:	50                   	push   eax
c0014f4d:	e8 92 f6 ff ff       	call   c00145e4 <Vm::outbv(unsigned short, unsigned char)>
c0014f52:	83 c4 10             	add    esp,0x10
c0014f55:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0014f58:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0014f5c:	74 03                	je     c0014f61 <Vm::faultHandler(regs*)+0x4d2>
c0014f5e:	48                   	dec    eax
c0014f5f:	eb 01                	jmp    c0014f62 <Vm::faultHandler(regs*)+0x4d3>
c0014f61:	40                   	inc    eax
c0014f62:	0f b7 c0             	movzx  eax,ax
c0014f65:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0014f68:	e9 92 01 00 00       	jmp    c00150ff <Vm::faultHandler(regs*)+0x670>
c0014f6d:	8d 46 ff             	lea    eax,[esi-0x1]
c0014f70:	3c 05                	cmp    al,0x5
c0014f72:	77 1f                	ja     c0014f93 <Vm::faultHandler(regs*)+0x504>
c0014f74:	0f b6 c0             	movzx  eax,al
c0014f77:	ff 24 85 98 eb 01 c0 	jmp    DWORD PTR [eax*4-0x3ffe1468]
c0014f7e:	89 ef                	mov    edi,ebp
c0014f80:	eb 11                	jmp    c0014f93 <Vm::faultHandler(regs*)+0x504>
c0014f82:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0014f85:	eb 0c                	jmp    c0014f93 <Vm::faultHandler(regs*)+0x504>
c0014f87:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c0014f8a:	eb 07                	jmp    c0014f93 <Vm::faultHandler(regs*)+0x504>
c0014f8c:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0014f8f:	eb 02                	jmp    c0014f93 <Vm::faultHandler(regs*)+0x504>
c0014f91:	8b 3b                	mov    edi,DWORD PTR [ebx]
c0014f93:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c0014f96:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0014f9b:	74 37                	je     c0014fd4 <Vm::faultHandler(regs*)+0x545>
c0014f9d:	81 fe ff ff 00 00    	cmp    esi,0xffff
c0014fa3:	76 2f                	jbe    c0014fd4 <Vm::faultHandler(regs*)+0x545>
c0014fa5:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0014fa9:	50                   	push   eax
c0014faa:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0014fae:	50                   	push   eax
c0014faf:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0014fb3:	50                   	push   eax
c0014fb4:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0014fb8:	50                   	push   eax
c0014fb9:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0014fbd:	50                   	push   eax
c0014fbe:	6a 6f                	push   0x6f
c0014fc0:	6a 6f                	push   0x6f
c0014fc2:	68 26 eb 01 c0       	push   0xc001eb26
c0014fc7:	e8 24 5c ff ff       	call   c000abf0 <Dbg::kprintf(char const*, ...)>
c0014fcc:	83 c4 20             	add    esp,0x20
c0014fcf:	e9 86 01 00 00       	jmp    c001515a <Vm::faultHandler(regs*)+0x6cb>
c0014fd4:	0f b7 d7             	movzx  edx,di
c0014fd7:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0014fda:	0f b7 c6             	movzx  eax,si
c0014fdd:	81 e1 00 04 00 00    	and    ecx,0x400
c0014fe3:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c0014fe6:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0014feb:	74 1d                	je     c001500a <Vm::faultHandler(regs*)+0x57b>
c0014fed:	55                   	push   ebp
c0014fee:	55                   	push   ebp
c0014fef:	50                   	push   eax
c0014ff0:	52                   	push   edx
c0014ff1:	e8 48 fa ff ff       	call   c0014a3e <Vm::readDwordFromReal(unsigned short, unsigned short)>
c0014ff6:	83 c4 10             	add    esp,0x10
c0014ff9:	89 fa                	mov    edx,edi
c0014ffb:	ef                   	out    dx,eax
c0014ffc:	85 c9                	test   ecx,ecx
c0014ffe:	74 05                	je     c0015005 <Vm::faultHandler(regs*)+0x576>
c0015000:	83 ee 04             	sub    esi,0x4
c0015003:	eb 21                	jmp    c0015026 <Vm::faultHandler(regs*)+0x597>
c0015005:	83 c6 04             	add    esi,0x4
c0015008:	eb 1c                	jmp    c0015026 <Vm::faultHandler(regs*)+0x597>
c001500a:	55                   	push   ebp
c001500b:	55                   	push   ebp
c001500c:	50                   	push   eax
c001500d:	52                   	push   edx
c001500e:	e8 19 fa ff ff       	call   c0014a2c <Vm::readWordFromReal(unsigned short, unsigned short)>
c0015013:	83 c4 10             	add    esp,0x10
c0015016:	89 fa                	mov    edx,edi
c0015018:	66 ef                	out    dx,ax
c001501a:	85 c9                	test   ecx,ecx
c001501c:	74 05                	je     c0015023 <Vm::faultHandler(regs*)+0x594>
c001501e:	83 ee 02             	sub    esi,0x2
c0015021:	eb 03                	jmp    c0015026 <Vm::faultHandler(regs*)+0x597>
c0015023:	83 c6 02             	add    esi,0x2
c0015026:	81 e6 ff ff 00 00    	and    esi,0xffff
c001502c:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c001502f:	e9 cb 00 00 00       	jmp    c00150ff <Vm::faultHandler(regs*)+0x670>
c0015034:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c001503b:	83 ec 0c             	sub    esp,0xc
c001503e:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0015042:	50                   	push   eax
c0015043:	e8 89 f5 ff ff       	call   c00145d1 <Vm::inbv(unsigned short)>
c0015048:	0f b6 c0             	movzx  eax,al
c001504b:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c001504e:	eb 3f                	jmp    c001508f <Vm::faultHandler(regs*)+0x600>
c0015050:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0015055:	74 07                	je     c001505e <Vm::faultHandler(regs*)+0x5cf>
c0015057:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c001505b:	ed                   	in     eax,dx
c001505c:	eb 14                	jmp    c0015072 <Vm::faultHandler(regs*)+0x5e3>
c001505e:	8b 73 2c             	mov    esi,DWORD PTR [ebx+0x2c]
c0015061:	66 31 f6             	xor    si,si
c0015064:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0015067:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c001506b:	66 ed                	in     ax,dx
c001506d:	0f b7 c0             	movzx  eax,ax
c0015070:	09 f0                	or     eax,esi
c0015072:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0015075:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0015079:	e9 84 00 00 00       	jmp    c0015102 <Vm::faultHandler(regs*)+0x673>
c001507e:	52                   	push   edx
c001507f:	52                   	push   edx
c0015080:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0015084:	50                   	push   eax
c0015085:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0015089:	50                   	push   eax
c001508a:	e8 55 f5 ff ff       	call   c00145e4 <Vm::outbv(unsigned short, unsigned char)>
c001508f:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0015093:	eb 53                	jmp    c00150e8 <Vm::faultHandler(regs*)+0x659>
c0015095:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0015098:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c001509c:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c00150a1:	74 03                	je     c00150a6 <Vm::faultHandler(regs*)+0x617>
c00150a3:	ef                   	out    dx,eax
c00150a4:	eb cf                	jmp    c0015075 <Vm::faultHandler(regs*)+0x5e6>
c00150a6:	66 ef                	out    dx,ax
c00150a8:	eb cb                	jmp    c0015075 <Vm::faultHandler(regs*)+0x5e6>
c00150aa:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c00150b1:	83 ec 0c             	sub    esp,0xc
c00150b4:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c00150b8:	50                   	push   eax
c00150b9:	e8 13 f5 ff ff       	call   c00145d1 <Vm::inbv(unsigned short)>
c00150be:	0f b6 c0             	movzx  eax,al
c00150c1:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c00150c4:	eb 1f                	jmp    c00150e5 <Vm::faultHandler(regs*)+0x656>
c00150c6:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c00150c9:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c00150ce:	74 03                	je     c00150d3 <Vm::faultHandler(regs*)+0x644>
c00150d0:	ed                   	in     eax,dx
c00150d1:	eb 0d                	jmp    c00150e0 <Vm::faultHandler(regs*)+0x651>
c00150d3:	66 ed                	in     ax,dx
c00150d5:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00150d8:	0f b7 c0             	movzx  eax,ax
c00150db:	66 31 d2             	xor    dx,dx
c00150de:	09 d0                	or     eax,edx
c00150e0:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00150e3:	eb 1a                	jmp    c00150ff <Vm::faultHandler(regs*)+0x670>
c00150e5:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00150e8:	83 c4 10             	add    esp,0x10
c00150eb:	eb 15                	jmp    c0015102 <Vm::faultHandler(regs*)+0x673>
c00150ed:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00150f0:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c00150f3:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c00150f8:	74 03                	je     c00150fd <Vm::faultHandler(regs*)+0x66e>
c00150fa:	ef                   	out    dx,eax
c00150fb:	eb 02                	jmp    c00150ff <Vm::faultHandler(regs*)+0x670>
c00150fd:	66 ef                	out    dx,ax
c00150ff:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0015102:	b0 01                	mov    al,0x1
c0015104:	eb 56                	jmp    c001515c <Vm::faultHandler(regs*)+0x6cd>
c0015106:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001510a:	50                   	push   eax
c001510b:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001510f:	50                   	push   eax
c0015110:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0015114:	50                   	push   eax
c0015115:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0015119:	50                   	push   eax
c001511a:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001511e:	50                   	push   eax
c001511f:	52                   	push   edx
c0015120:	52                   	push   edx
c0015121:	68 53 eb 01 c0       	push   0xc001eb53
c0015126:	e8 c5 5a ff ff       	call   c000abf0 <Dbg::kprintf(char const*, ...)>
c001512b:	83 c4 20             	add    esp,0x20
c001512e:	83 ec 0c             	sub    esp,0xc
c0015131:	6a 60                	push   0x60
c0015133:	e8 99 f4 ff ff       	call   c00145d1 <Vm::inbv(unsigned short)>
c0015138:	83 c4 10             	add    esp,0x10
c001513b:	3c 1c                	cmp    al,0x1c
c001513d:	74 04                	je     c0015143 <Vm::faultHandler(regs*)+0x6b4>
c001513f:	3c 5a                	cmp    al,0x5a
c0015141:	75 eb                	jne    c001512e <Vm::faultHandler(regs*)+0x69f>
c0015143:	3c 5a                	cmp    al,0x5a
c0015145:	74 04                	je     c001514b <Vm::faultHandler(regs*)+0x6bc>
c0015147:	3c 1c                	cmp    al,0x1c
c0015149:	75 0f                	jne    c001515a <Vm::faultHandler(regs*)+0x6cb>
c001514b:	83 ec 0c             	sub    esp,0xc
c001514e:	6a 60                	push   0x60
c0015150:	e8 7c f4 ff ff       	call   c00145d1 <Vm::inbv(unsigned short)>
c0015155:	83 c4 10             	add    esp,0x10
c0015158:	eb e9                	jmp    c0015143 <Vm::faultHandler(regs*)+0x6b4>
c001515a:	31 c0                	xor    eax,eax
c001515c:	83 c4 1c             	add    esp,0x1c
c001515f:	5b                   	pop    ebx
c0015160:	5e                   	pop    esi
c0015161:	5f                   	pop    edi
c0015162:	5d                   	pop    ebp
c0015163:	c3                   	ret    

c0015164 <noCopro(unsigned long)>:
c0015164:	c3                   	ret    

c0015165 <nmiHandler(regs*, void*)>:
c0015165:	83 ec 0c             	sub    esp,0xc
c0015168:	a1 44 08 02 c0       	mov    eax,ds:0xc0020844
c001516d:	83 ec 0c             	sub    esp,0xc
c0015170:	50                   	push   eax
c0015171:	e8 10 25 ff ff       	call   c0007686 <Computer::handleNMI()>
c0015176:	83 c4 10             	add    esp,0x10
c0015179:	90                   	nop
c001517a:	83 c4 0c             	add    esp,0xc
c001517d:	c3                   	ret    

c001517e <doubleFault(regs*, void*)>:
c001517e:	55                   	push   ebp
c001517f:	89 e5                	mov    ebp,esp
c0015181:	83 ec 08             	sub    esp,0x8
c0015184:	83 ec 0c             	sub    esp,0xc
c0015187:	68 b0 eb 01 c0       	push   0xc001ebb0
c001518c:	e8 ae b5 ff ff       	call   c001073f <Krnl::panic(char const*)>
c0015191:	83 c4 10             	add    esp,0x10
c0015194:	90                   	nop
c0015195:	c9                   	leave  
c0015196:	c3                   	ret    

c0015197 <displayDebugInfo(regs*)>:
c0015197:	83 ec 1c             	sub    esp,0x1c
c001519a:	0f 20 c0             	mov    eax,cr0
c001519d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00151a1:	0f 20 d0             	mov    eax,cr2
c00151a4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00151a8:	0f 20 d8             	mov    eax,cr3
c00151ab:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00151af:	0f 20 e0             	mov    eax,cr4
c00151b2:	89 04 24             	mov    DWORD PTR [esp],eax
c00151b5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00151b9:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c00151bc:	83 ec 08             	sub    esp,0x8
c00151bf:	50                   	push   eax
c00151c0:	68 cc eb 01 c0       	push   0xc001ebcc
c00151c5:	e8 26 5a ff ff       	call   c000abf0 <Dbg::kprintf(char const*, ...)>
c00151ca:	83 c4 10             	add    esp,0x10
c00151cd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00151d1:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00151d4:	83 ec 08             	sub    esp,0x8
c00151d7:	50                   	push   eax
c00151d8:	68 bd eb 01 c0       	push   0xc001ebbd
c00151dd:	e8 0e 5a ff ff       	call   c000abf0 <Dbg::kprintf(char const*, ...)>
c00151e2:	83 c4 10             	add    esp,0x10
c00151e5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00151e9:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c00151ec:	83 ec 08             	sub    esp,0x8
c00151ef:	50                   	push   eax
c00151f0:	68 c8 eb 01 c0       	push   0xc001ebc8
c00151f5:	e8 f6 59 ff ff       	call   c000abf0 <Dbg::kprintf(char const*, ...)>
c00151fa:	83 c4 10             	add    esp,0x10
c00151fd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015201:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015204:	83 ec 08             	sub    esp,0x8
c0015207:	50                   	push   eax
c0015208:	68 d7 eb 01 c0       	push   0xc001ebd7
c001520d:	e8 de 59 ff ff       	call   c000abf0 <Dbg::kprintf(char const*, ...)>
c0015212:	83 c4 10             	add    esp,0x10
c0015215:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015219:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c001521c:	83 ec 08             	sub    esp,0x8
c001521f:	50                   	push   eax
c0015220:	68 e2 eb 01 c0       	push   0xc001ebe2
c0015225:	e8 c6 59 ff ff       	call   c000abf0 <Dbg::kprintf(char const*, ...)>
c001522a:	83 c4 10             	add    esp,0x10
c001522d:	83 ec 08             	sub    esp,0x8
c0015230:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0015234:	68 ed eb 01 c0       	push   0xc001ebed
c0015239:	e8 b2 59 ff ff       	call   c000abf0 <Dbg::kprintf(char const*, ...)>
c001523e:	83 c4 10             	add    esp,0x10
c0015241:	83 ec 08             	sub    esp,0x8
c0015244:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0015248:	68 f8 eb 01 c0       	push   0xc001ebf8
c001524d:	e8 9e 59 ff ff       	call   c000abf0 <Dbg::kprintf(char const*, ...)>
c0015252:	83 c4 10             	add    esp,0x10
c0015255:	a1 30 3d 02 c0       	mov    eax,ds:0xc0023d30
c001525a:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015260:	83 ec 0c             	sub    esp,0xc
c0015263:	50                   	push   eax
c0015264:	e8 28 39 ff ff       	call   c0008b91 <setActiveTerminal(VgaText*)>
c0015269:	83 c4 10             	add    esp,0x10
c001526c:	a1 30 3d 02 c0       	mov    eax,ds:0xc0023d30
c0015271:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015277:	83 ec 08             	sub    esp,0x8
c001527a:	68 03 ec 01 c0       	push   0xc001ec03
c001527f:	50                   	push   eax
c0015280:	e8 4b 3c ff ff       	call   c0008ed0 <VgaText::puts(char const*)>
c0015285:	83 c4 10             	add    esp,0x10
c0015288:	a1 30 3d 02 c0       	mov    eax,ds:0xc0023d30
c001528d:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015293:	ba 00 20 00 c2       	mov    edx,0xc2002000
c0015298:	8b 12                	mov    edx,DWORD PTR [edx]
c001529a:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c001529d:	83 c2 0c             	add    edx,0xc
c00152a0:	83 ec 08             	sub    esp,0x8
c00152a3:	52                   	push   edx
c00152a4:	50                   	push   eax
c00152a5:	e8 26 3c ff ff       	call   c0008ed0 <VgaText::puts(char const*)>
c00152aa:	83 c4 10             	add    esp,0x10
c00152ad:	a1 30 3d 02 c0       	mov    eax,ds:0xc0023d30
c00152b2:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00152b8:	83 ec 08             	sub    esp,0x8
c00152bb:	68 0c ec 01 c0       	push   0xc001ec0c
c00152c0:	50                   	push   eax
c00152c1:	e8 0a 3c ff ff       	call   c0008ed0 <VgaText::puts(char const*)>
c00152c6:	83 c4 10             	add    esp,0x10
c00152c9:	a1 30 3d 02 c0       	mov    eax,ds:0xc0023d30
c00152ce:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00152d4:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00152d8:	8b 52 38             	mov    edx,DWORD PTR [edx+0x38]
c00152db:	83 ec 08             	sub    esp,0x8
c00152de:	52                   	push   edx
c00152df:	50                   	push   eax
c00152e0:	e8 a5 3b ff ff       	call   c0008e8a <VgaText::putx(unsigned int)>
c00152e5:	83 c4 10             	add    esp,0x10
c00152e8:	a1 30 3d 02 c0       	mov    eax,ds:0xc0023d30
c00152ed:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00152f3:	83 ec 08             	sub    esp,0x8
c00152f6:	68 14 ec 01 c0       	push   0xc001ec14
c00152fb:	50                   	push   eax
c00152fc:	e8 cf 3b ff ff       	call   c0008ed0 <VgaText::puts(char const*)>
c0015301:	83 c4 10             	add    esp,0x10
c0015304:	a1 30 3d 02 c0       	mov    eax,ds:0xc0023d30
c0015309:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001530f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015313:	8b 52 1c             	mov    edx,DWORD PTR [edx+0x1c]
c0015316:	83 ec 08             	sub    esp,0x8
c0015319:	52                   	push   edx
c001531a:	50                   	push   eax
c001531b:	e8 6a 3b ff ff       	call   c0008e8a <VgaText::putx(unsigned int)>
c0015320:	83 c4 10             	add    esp,0x10
c0015323:	a1 30 3d 02 c0       	mov    eax,ds:0xc0023d30
c0015328:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001532e:	83 ec 08             	sub    esp,0x8
c0015331:	68 1c ec 01 c0       	push   0xc001ec1c
c0015336:	50                   	push   eax
c0015337:	e8 94 3b ff ff       	call   c0008ed0 <VgaText::puts(char const*)>
c001533c:	83 c4 10             	add    esp,0x10
c001533f:	a1 30 3d 02 c0       	mov    eax,ds:0xc0023d30
c0015344:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001534a:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001534e:	8b 52 44             	mov    edx,DWORD PTR [edx+0x44]
c0015351:	83 ec 08             	sub    esp,0x8
c0015354:	52                   	push   edx
c0015355:	50                   	push   eax
c0015356:	e8 2f 3b ff ff       	call   c0008e8a <VgaText::putx(unsigned int)>
c001535b:	83 c4 10             	add    esp,0x10
c001535e:	a1 30 3d 02 c0       	mov    eax,ds:0xc0023d30
c0015363:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015369:	83 ec 08             	sub    esp,0x8
c001536c:	68 24 ec 01 c0       	push   0xc001ec24
c0015371:	50                   	push   eax
c0015372:	e8 59 3b ff ff       	call   c0008ed0 <VgaText::puts(char const*)>
c0015377:	83 c4 10             	add    esp,0x10
c001537a:	a1 30 3d 02 c0       	mov    eax,ds:0xc0023d30
c001537f:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015385:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015389:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c001538c:	83 ec 08             	sub    esp,0x8
c001538f:	52                   	push   edx
c0015390:	50                   	push   eax
c0015391:	e8 f4 3a ff ff       	call   c0008e8a <VgaText::putx(unsigned int)>
c0015396:	83 c4 10             	add    esp,0x10
c0015399:	a1 30 3d 02 c0       	mov    eax,ds:0xc0023d30
c001539e:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00153a4:	83 ec 08             	sub    esp,0x8
c00153a7:	68 2c ec 01 c0       	push   0xc001ec2c
c00153ac:	50                   	push   eax
c00153ad:	e8 1e 3b ff ff       	call   c0008ed0 <VgaText::puts(char const*)>
c00153b2:	83 c4 10             	add    esp,0x10
c00153b5:	a1 30 3d 02 c0       	mov    eax,ds:0xc0023d30
c00153ba:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00153c0:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00153c4:	8b 52 34             	mov    edx,DWORD PTR [edx+0x34]
c00153c7:	83 ec 08             	sub    esp,0x8
c00153ca:	52                   	push   edx
c00153cb:	50                   	push   eax
c00153cc:	e8 b9 3a ff ff       	call   c0008e8a <VgaText::putx(unsigned int)>
c00153d1:	83 c4 10             	add    esp,0x10
c00153d4:	a1 30 3d 02 c0       	mov    eax,ds:0xc0023d30
c00153d9:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00153df:	83 ec 08             	sub    esp,0x8
c00153e2:	68 34 ec 01 c0       	push   0xc001ec34
c00153e7:	50                   	push   eax
c00153e8:	e8 e3 3a ff ff       	call   c0008ed0 <VgaText::puts(char const*)>
c00153ed:	83 c4 10             	add    esp,0x10
c00153f0:	a1 30 3d 02 c0       	mov    eax,ds:0xc0023d30
c00153f5:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00153fb:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00153ff:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c0015402:	83 ec 08             	sub    esp,0x8
c0015405:	52                   	push   edx
c0015406:	50                   	push   eax
c0015407:	e8 7e 3a ff ff       	call   c0008e8a <VgaText::putx(unsigned int)>
c001540c:	83 c4 10             	add    esp,0x10
c001540f:	a1 30 3d 02 c0       	mov    eax,ds:0xc0023d30
c0015414:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001541a:	83 ec 08             	sub    esp,0x8
c001541d:	68 3c ec 01 c0       	push   0xc001ec3c
c0015422:	50                   	push   eax
c0015423:	e8 a8 3a ff ff       	call   c0008ed0 <VgaText::puts(char const*)>
c0015428:	83 c4 10             	add    esp,0x10
c001542b:	a1 30 3d 02 c0       	mov    eax,ds:0xc0023d30
c0015430:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015436:	83 ec 08             	sub    esp,0x8
c0015439:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001543d:	50                   	push   eax
c001543e:	e8 47 3a ff ff       	call   c0008e8a <VgaText::putx(unsigned int)>
c0015443:	83 c4 10             	add    esp,0x10
c0015446:	a1 30 3d 02 c0       	mov    eax,ds:0xc0023d30
c001544b:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015451:	83 ec 08             	sub    esp,0x8
c0015454:	68 45 ec 01 c0       	push   0xc001ec45
c0015459:	50                   	push   eax
c001545a:	e8 71 3a ff ff       	call   c0008ed0 <VgaText::puts(char const*)>
c001545f:	83 c4 10             	add    esp,0x10
c0015462:	a1 30 3d 02 c0       	mov    eax,ds:0xc0023d30
c0015467:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001546d:	83 ec 08             	sub    esp,0x8
c0015470:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0015474:	50                   	push   eax
c0015475:	e8 10 3a ff ff       	call   c0008e8a <VgaText::putx(unsigned int)>
c001547a:	83 c4 10             	add    esp,0x10
c001547d:	a1 30 3d 02 c0       	mov    eax,ds:0xc0023d30
c0015482:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015488:	83 ec 08             	sub    esp,0x8
c001548b:	68 4d ec 01 c0       	push   0xc001ec4d
c0015490:	50                   	push   eax
c0015491:	e8 3a 3a ff ff       	call   c0008ed0 <VgaText::puts(char const*)>
c0015496:	83 c4 10             	add    esp,0x10
c0015499:	a1 30 3d 02 c0       	mov    eax,ds:0xc0023d30
c001549e:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00154a4:	83 ec 08             	sub    esp,0x8
c00154a7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00154ab:	50                   	push   eax
c00154ac:	e8 d9 39 ff ff       	call   c0008e8a <VgaText::putx(unsigned int)>
c00154b1:	83 c4 10             	add    esp,0x10
c00154b4:	fa                   	cli    
c00154b5:	f4                   	hlt    
c00154b6:	eb fe                	jmp    c00154b6 <displayDebugInfo(regs*)+0x31f>

c00154b8 <displayProgramFault(char const*)>:
c00154b8:	83 ec 0c             	sub    esp,0xc
c00154bb:	83 ec 0c             	sub    esp,0xc
c00154be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00154c2:	e8 29 57 ff ff       	call   c000abf0 <Dbg::kprintf(char const*, ...)>
c00154c7:	83 c4 10             	add    esp,0x10
c00154ca:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00154cf:	8b 00                	mov    eax,DWORD PTR [eax]
c00154d1:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00154d4:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00154da:	85 c0                	test   eax,eax
c00154dc:	74 21                	je     c00154ff <displayProgramFault(char const*)+0x47>
c00154de:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00154e3:	8b 00                	mov    eax,DWORD PTR [eax]
c00154e5:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00154e8:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00154ee:	6a 04                	push   0x4
c00154f0:	6a 0f                	push   0xf
c00154f2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00154f6:	50                   	push   eax
c00154f7:	e8 46 3a ff ff       	call   c0008f42 <VgaText::puts(char const*, VgaColour, VgaColour)>
c00154fc:	83 c4 10             	add    esp,0x10
c00154ff:	90                   	nop
c0015500:	83 c4 0c             	add    esp,0xc
c0015503:	c3                   	ret    

c0015504 <gpFault(regs*, void*)>:
c0015504:	83 ec 1c             	sub    esp,0x1c
c0015507:	c7 05 b0 3d 02 c0 8f 4a 01 c0 	mov    DWORD PTR ds:0xc0023db0,0xc0014a8f
c0015511:	a1 b0 3d 02 c0       	mov    eax,ds:0xc0023db0
c0015516:	85 c0                	test   eax,eax
c0015518:	74 1c                	je     c0015536 <gpFault(regs*, void*)+0x32>
c001551a:	a1 b0 3d 02 c0       	mov    eax,ds:0xc0023db0
c001551f:	83 ec 0c             	sub    esp,0xc
c0015522:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015526:	ff d0                	call   eax
c0015528:	83 c4 10             	add    esp,0x10
c001552b:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001552f:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0015534:	75 2e                	jne    c0015564 <gpFault(regs*, void*)+0x60>
c0015536:	83 ec 0c             	sub    esp,0xc
c0015539:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001553d:	e8 55 fc ff ff       	call   c0015197 <displayDebugInfo(regs*)>
c0015542:	83 c4 10             	add    esp,0x10
c0015545:	83 ec 0c             	sub    esp,0xc
c0015548:	68 55 ec 01 c0       	push   0xc001ec55
c001554d:	e8 66 ff ff ff       	call   c00154b8 <displayProgramFault(char const*)>
c0015552:	83 c4 10             	add    esp,0x10
c0015555:	83 ec 0c             	sub    esp,0xc
c0015558:	6a 00                	push   0x0
c001555a:	e8 25 ef ff ff       	call   c0014484 <Thr::terminateFromIRQ(int)>
c001555f:	83 c4 10             	add    esp,0x10
c0015562:	eb 01                	jmp    c0015565 <gpFault(regs*, void*)+0x61>
c0015564:	90                   	nop
c0015565:	83 c4 1c             	add    esp,0x1c
c0015568:	c3                   	ret    

c0015569 <pgFault(regs*, void*)>:
c0015569:	83 ec 1c             	sub    esp,0x1c
c001556c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015570:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0015573:	0f 20 d0             	mov    eax,cr2
c0015576:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001557a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001557e:	83 ec 04             	sub    esp,0x4
c0015581:	52                   	push   edx
c0015582:	50                   	push   eax
c0015583:	68 c0 ec 01 c0       	push   0xc001ecc0
c0015588:	e8 63 56 ff ff       	call   c000abf0 <Dbg::kprintf(char const*, ...)>
c001558d:	83 c4 10             	add    esp,0x10
c0015590:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0015595:	8b 00                	mov    eax,DWORD PTR [eax]
c0015597:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001559a:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c00155a0:	0f 20 d2             	mov    edx,cr2
c00155a3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00155a7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00155ab:	83 ec 08             	sub    esp,0x8
c00155ae:	52                   	push   edx
c00155af:	50                   	push   eax
c00155b0:	e8 6d 52 ff ff       	call   c000a822 <VAS::tryLoadBackOffDisk(unsigned long)>
c00155b5:	83 c4 10             	add    esp,0x10
c00155b8:	84 c0                	test   al,al
c00155ba:	75 2e                	jne    c00155ea <pgFault(regs*, void*)+0x81>
c00155bc:	83 ec 0c             	sub    esp,0xc
c00155bf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00155c3:	e8 cf fb ff ff       	call   c0015197 <displayDebugInfo(regs*)>
c00155c8:	83 c4 10             	add    esp,0x10
c00155cb:	83 ec 0c             	sub    esp,0xc
c00155ce:	68 6e ec 01 c0       	push   0xc001ec6e
c00155d3:	e8 e0 fe ff ff       	call   c00154b8 <displayProgramFault(char const*)>
c00155d8:	83 c4 10             	add    esp,0x10
c00155db:	83 ec 0c             	sub    esp,0xc
c00155de:	6a 00                	push   0x0
c00155e0:	e8 9f ee ff ff       	call   c0014484 <Thr::terminateFromIRQ(int)>
c00155e5:	83 c4 10             	add    esp,0x10
c00155e8:	eb 01                	jmp    c00155eb <pgFault(regs*, void*)+0x82>
c00155ea:	90                   	nop
c00155eb:	83 c4 1c             	add    esp,0x1c
c00155ee:	c3                   	ret    

c00155ef <otherISRHandler(regs*, void*)>:
c00155ef:	83 ec 0c             	sub    esp,0xc
c00155f2:	83 ec 0c             	sub    esp,0xc
c00155f5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00155f9:	e8 99 fb ff ff       	call   c0015197 <displayDebugInfo(regs*)>
c00155fe:	83 c4 10             	add    esp,0x10
c0015601:	83 ec 0c             	sub    esp,0xc
c0015604:	68 e8 ec 01 c0       	push   0xc001ece8
c0015609:	e8 aa fe ff ff       	call   c00154b8 <displayProgramFault(char const*)>
c001560e:	83 c4 10             	add    esp,0x10
c0015611:	83 ec 0c             	sub    esp,0xc
c0015614:	6a 00                	push   0x0
c0015616:	e8 69 ee ff ff       	call   c0014484 <Thr::terminateFromIRQ(int)>
c001561b:	83 c4 10             	add    esp,0x10
c001561e:	90                   	nop
c001561f:	83 c4 0c             	add    esp,0xc
c0015622:	c3                   	ret    

c0015623 <opcodeFault(regs*, void*)>:
c0015623:	55                   	push   ebp
c0015624:	89 e5                	mov    ebp,esp
c0015626:	83 ec 08             	sub    esp,0x8
c0015629:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001562c:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001562f:	83 ec 08             	sub    esp,0x8
c0015632:	50                   	push   eax
c0015633:	68 79 ec 01 c0       	push   0xc001ec79
c0015638:	e8 b3 55 ff ff       	call   c000abf0 <Dbg::kprintf(char const*, ...)>
c001563d:	83 c4 10             	add    esp,0x10
c0015640:	a1 44 08 02 c0       	mov    eax,ds:0xc0020844
c0015645:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001564b:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0015651:	84 c0                	test   al,al
c0015653:	74 21                	je     c0015676 <opcodeFault(regs*, void*)+0x53>
c0015655:	83 ec 0c             	sub    esp,0xc
c0015658:	68 10 ed 01 c0       	push   0xc001ed10
c001565d:	e8 8e 55 ff ff       	call   c000abf0 <Dbg::kprintf(char const*, ...)>
c0015662:	83 c4 10             	add    esp,0x10
c0015665:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015668:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001566b:	8d 50 19             	lea    edx,[eax+0x19]
c001566e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015671:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015674:	eb 2b                	jmp    c00156a1 <opcodeFault(regs*, void*)+0x7e>
c0015676:	83 ec 0c             	sub    esp,0xc
c0015679:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001567c:	e8 16 fb ff ff       	call   c0015197 <displayDebugInfo(regs*)>
c0015681:	83 c4 10             	add    esp,0x10
c0015684:	83 ec 0c             	sub    esp,0xc
c0015687:	68 87 ec 01 c0       	push   0xc001ec87
c001568c:	e8 27 fe ff ff       	call   c00154b8 <displayProgramFault(char const*)>
c0015691:	83 c4 10             	add    esp,0x10
c0015694:	83 ec 0c             	sub    esp,0xc
c0015697:	6a 00                	push   0x0
c0015699:	e8 e6 ed ff ff       	call   c0014484 <Thr::terminateFromIRQ(int)>
c001569e:	83 c4 10             	add    esp,0x10
c00156a1:	c9                   	leave  
c00156a2:	c3                   	ret    

c00156a3 <i386SaveCoprocessor(void*)>:
c00156a3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00156a7:	83 c0 3f             	add    eax,0x3f
c00156aa:	83 e0 c0             	and    eax,0xffffffc0
c00156ad:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00156b1:	ff 25 ac 3d 02 c0    	jmp    DWORD PTR ds:0xc0023dac

c00156b7 <i386LoadCoprocessor(void*)>:
c00156b7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00156bb:	83 c0 3f             	add    eax,0x3f
c00156be:	83 e0 c0             	and    eax,0xffffffc0
c00156c1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00156c5:	ff 25 a8 3d 02 c0    	jmp    DWORD PTR ds:0xc0023da8

c00156cb <x87EmulHandler(regs*, void*)>:
c00156cb:	53                   	push   ebx
c00156cc:	83 ec 08             	sub    esp,0x8
c00156cf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00156d4:	80 78 5e 00          	cmp    BYTE PTR [eax+0x5e],0x0
c00156d8:	74 10                	je     c00156ea <x87EmulHandler(regs*, void*)+0x1f>
c00156da:	83 ec 0c             	sub    esp,0xc
c00156dd:	68 94 ec 01 c0       	push   0xc001ec94
c00156e2:	e8 58 b0 ff ff       	call   c001073f <Krnl::panic(char const*)>
c00156e7:	83 c4 10             	add    esp,0x10
c00156ea:	0f 20 c0             	mov    eax,cr0
c00156ed:	a8 08                	test   al,0x8
c00156ef:	74 59                	je     c001574a <x87EmulHandler(regs*, void*)+0x7f>
c00156f1:	0f 06                	clts   
c00156f3:	a1 a4 3d 02 c0       	mov    eax,ds:0xc0023da4
c00156f8:	85 c0                	test   eax,eax
c00156fa:	74 0e                	je     c001570a <x87EmulHandler(regs*, void*)+0x3f>
c00156fc:	83 ec 0c             	sub    esp,0xc
c00156ff:	ff 70 55             	push   DWORD PTR [eax+0x55]
c0015702:	e8 9c ff ff ff       	call   c00156a3 <i386SaveCoprocessor(void*)>
c0015707:	83 c4 10             	add    esp,0x10
c001570a:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c0015710:	83 7b 55 00          	cmp    DWORD PTR [ebx+0x55],0x0
c0015714:	75 12                	jne    c0015728 <x87EmulHandler(regs*, void*)+0x5d>
c0015716:	83 ec 0c             	sub    esp,0xc
c0015719:	68 40 02 00 00       	push   0x240
c001571e:	e8 3e 27 ff ff       	call   c0007e61 <malloc>
c0015723:	89 43 55             	mov    DWORD PTR [ebx+0x55],eax
c0015726:	eb 10                	jmp    c0015738 <x87EmulHandler(regs*, void*)+0x6d>
c0015728:	83 ec 0c             	sub    esp,0xc
c001572b:	a1 a4 3d 02 c0       	mov    eax,ds:0xc0023da4
c0015730:	ff 70 55             	push   DWORD PTR [eax+0x55]
c0015733:	e8 7f ff ff ff       	call   c00156b7 <i386LoadCoprocessor(void*)>
c0015738:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001573d:	83 c4 10             	add    esp,0x10
c0015740:	a3 a4 3d 02 c0       	mov    ds:0xc0023da4,eax
c0015745:	83 c4 08             	add    esp,0x8
c0015748:	5b                   	pop    ebx
c0015749:	c3                   	ret    
c001574a:	83 ec 0c             	sub    esp,0xc
c001574d:	68 a8 ec 01 c0       	push   0xc001eca8
c0015752:	e8 99 54 ff ff       	call   c000abf0 <Dbg::kprintf(char const*, ...)>
c0015757:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001575f:	83 c4 18             	add    esp,0x18
c0015762:	5b                   	pop    ebx
c0015763:	e9 1c ed ff ff       	jmp    c0014484 <Thr::terminateFromIRQ(int)>

c0015768 <HalInitialiseCoprocessor()>:
c0015768:	83 ec 10             	sub    esp,0x10
c001576b:	c7 05 a4 3d 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023da4,0x0
c0015775:	6a 00                	push   0x0
c0015777:	68 cb 56 01 c0       	push   0xc00156cb
c001577c:	6a 07                	push   0x7
c001577e:	e8 e1 6d ff ff       	call   c000c564 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0015783:	e8 d8 62 00 00       	call   c001ba60 <avxDetect>
c0015788:	83 c4 10             	add    esp,0x10
c001578b:	85 c0                	test   eax,eax
c001578d:	74 1c                	je     c00157ab <HalInitialiseCoprocessor()+0x43>
c001578f:	c7 05 ac 3d 02 c0 8a ba 01 c0 	mov    DWORD PTR ds:0xc0023dac,0xc001ba8a
c0015799:	c7 05 a8 3d 02 c0 9b ba 01 c0 	mov    DWORD PTR ds:0xc0023da8,0xc001ba9b
c00157a3:	83 c4 0c             	add    esp,0xc
c00157a6:	e9 01 63 00 00       	jmp    c001baac <avxInit>
c00157ab:	e8 30 65 00 00       	call   c001bce0 <absolutelyNoChanceInHell>
c00157b0:	85 c0                	test   eax,eax
c00157b2:	74 1c                	je     c00157d0 <HalInitialiseCoprocessor()+0x68>
c00157b4:	c7 05 ac 3d 02 c0 f8 bc 01 c0 	mov    DWORD PTR ds:0xc0023dac,0xc001bcf8
c00157be:	c7 05 a8 3d 02 c0 00 bd 01 c0 	mov    DWORD PTR ds:0xc0023da8,0xc001bd00
c00157c8:	83 c4 0c             	add    esp,0xc
c00157cb:	e9 38 65 00 00       	jmp    c001bd08 <sseInit>
c00157d0:	e8 51 65 00 00       	call   c001bd26 <x87Detect>
c00157d5:	85 c0                	test   eax,eax
c00157d7:	74 1c                	je     c00157f5 <HalInitialiseCoprocessor()+0x8d>
c00157d9:	c7 05 ac 3d 02 c0 41 bd 01 c0 	mov    DWORD PTR ds:0xc0023dac,0xc001bd41
c00157e3:	c7 05 a8 3d 02 c0 48 bd 01 c0 	mov    DWORD PTR ds:0xc0023da8,0xc001bd48
c00157ed:	83 c4 0c             	add    esp,0xc
c00157f0:	e9 5a 65 00 00       	jmp    c001bd4f <x87Init>
c00157f5:	c7 05 ac 3d 02 c0 64 51 01 c0 	mov    DWORD PTR ds:0xc0023dac,0xc0015164
c00157ff:	c7 05 a8 3d 02 c0 64 51 01 c0 	mov    DWORD PTR ds:0xc0023da8,0xc0015164
c0015809:	0f 20 c0             	mov    eax,cr0
c001580c:	83 c8 04             	or     eax,0x4
c001580f:	0f 22 c0             	mov    cr0,eax
c0015812:	83 c4 0c             	add    esp,0xc
c0015815:	c3                   	ret    

c0015816 <HalPanic(char const*)>:
c0015816:	e9 24 af ff ff       	jmp    c001073f <Krnl::panic(char const*)>

c001581b <HalQueryPerformanceCounter()>:
c001581b:	a1 44 08 02 c0       	mov    eax,ds:0xc0020844
c0015820:	31 d2                	xor    edx,edx
c0015822:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c0015828:	31 c0                	xor    eax,eax
c001582a:	f6 81 8c 11 00 00 02 	test   BYTE PTR [ecx+0x118c],0x2
c0015831:	74 02                	je     c0015835 <HalQueryPerformanceCounter()+0x1a>
c0015833:	0f 31                	rdtsc  
c0015835:	c3                   	ret    

c0015836 <HalInitialise()>:
c0015836:	53                   	push   ebx
c0015837:	83 ec 08             	sub    esp,0x8
c001583a:	e8 58 6f ff ff       	call   c000c797 <setupINTS()>
c001583f:	80 3d 00 31 02 c0 00 	cmp    BYTE PTR ds:0xc0023100,0x0
c0015846:	a1 44 08 02 c0       	mov    eax,ds:0xc0020844
c001584b:	75 07                	jne    c0015854 <HalInitialise()+0x1e>
c001584d:	80 a0 6c 01 00 00 fe 	and    BYTE PTR [eax+0x16c],0xfe
c0015854:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c001585a:	83 e0 01             	and    eax,0x1
c001585d:	a2 a0 3d 02 c0       	mov    ds:0xc0023da0,al
c0015862:	e8 a9 02 00 00       	call   c0015b10 <picOpen()>
c0015867:	80 3d a0 3d 02 c0 00 	cmp    BYTE PTR ds:0xc0023da0,0x0
c001586e:	74 0a                	je     c001587a <HalInitialise()+0x44>
c0015870:	e8 e3 01 00 00       	call   c0015a58 <picDisable()>
c0015875:	e8 5e 5b 00 00       	call   c001b3d8 <apicOpen()>
c001587a:	bb 0f 00 00 00       	mov    ebx,0xf
c001587f:	50                   	push   eax
c0015880:	6a 00                	push   0x0
c0015882:	68 ef 55 01 c0       	push   0xc00155ef
c0015887:	6a 00                	push   0x0
c0015889:	e8 d6 6c ff ff       	call   c000c564 <installISRHandler(int, void (*)(regs*, void*), void*)>
c001588e:	83 c4 0c             	add    esp,0xc
c0015891:	6a 00                	push   0x0
c0015893:	68 ef 55 01 c0       	push   0xc00155ef
c0015898:	6a 01                	push   0x1
c001589a:	e8 c5 6c ff ff       	call   c000c564 <installISRHandler(int, void (*)(regs*, void*), void*)>
c001589f:	83 c4 0c             	add    esp,0xc
c00158a2:	6a 00                	push   0x0
c00158a4:	68 65 51 01 c0       	push   0xc0015165
c00158a9:	6a 02                	push   0x2
c00158ab:	e8 b4 6c ff ff       	call   c000c564 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00158b0:	83 c4 0c             	add    esp,0xc
c00158b3:	6a 00                	push   0x0
c00158b5:	68 ef 55 01 c0       	push   0xc00155ef
c00158ba:	6a 03                	push   0x3
c00158bc:	e8 a3 6c ff ff       	call   c000c564 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00158c1:	83 c4 0c             	add    esp,0xc
c00158c4:	6a 00                	push   0x0
c00158c6:	68 ef 55 01 c0       	push   0xc00155ef
c00158cb:	6a 04                	push   0x4
c00158cd:	e8 92 6c ff ff       	call   c000c564 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00158d2:	83 c4 0c             	add    esp,0xc
c00158d5:	6a 00                	push   0x0
c00158d7:	68 ef 55 01 c0       	push   0xc00155ef
c00158dc:	6a 05                	push   0x5
c00158de:	e8 81 6c ff ff       	call   c000c564 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00158e3:	83 c4 0c             	add    esp,0xc
c00158e6:	6a 00                	push   0x0
c00158e8:	68 23 56 01 c0       	push   0xc0015623
c00158ed:	6a 06                	push   0x6
c00158ef:	e8 70 6c ff ff       	call   c000c564 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00158f4:	83 c4 0c             	add    esp,0xc
c00158f7:	6a 00                	push   0x0
c00158f9:	68 7e 51 01 c0       	push   0xc001517e
c00158fe:	6a 08                	push   0x8
c0015900:	e8 5f 6c ff ff       	call   c000c564 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0015905:	83 c4 0c             	add    esp,0xc
c0015908:	6a 00                	push   0x0
c001590a:	68 ef 55 01 c0       	push   0xc00155ef
c001590f:	6a 09                	push   0x9
c0015911:	e8 4e 6c ff ff       	call   c000c564 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0015916:	83 c4 0c             	add    esp,0xc
c0015919:	6a 00                	push   0x0
c001591b:	68 ef 55 01 c0       	push   0xc00155ef
c0015920:	6a 0a                	push   0xa
c0015922:	e8 3d 6c ff ff       	call   c000c564 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0015927:	83 c4 0c             	add    esp,0xc
c001592a:	6a 00                	push   0x0
c001592c:	68 ef 55 01 c0       	push   0xc00155ef
c0015931:	6a 0b                	push   0xb
c0015933:	e8 2c 6c ff ff       	call   c000c564 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0015938:	83 c4 0c             	add    esp,0xc
c001593b:	6a 00                	push   0x0
c001593d:	68 04 55 01 c0       	push   0xc0015504
c0015942:	6a 0d                	push   0xd
c0015944:	e8 1b 6c ff ff       	call   c000c564 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0015949:	83 c4 0c             	add    esp,0xc
c001594c:	6a 00                	push   0x0
c001594e:	68 69 55 01 c0       	push   0xc0015569
c0015953:	6a 0e                	push   0xe
c0015955:	e8 0a 6c ff ff       	call   c000c564 <installISRHandler(int, void (*)(regs*, void*), void*)>
c001595a:	83 c4 10             	add    esp,0x10
c001595d:	50                   	push   eax
c001595e:	6a 00                	push   0x0
c0015960:	68 ef 55 01 c0       	push   0xc00155ef
c0015965:	53                   	push   ebx
c0015966:	43                   	inc    ebx
c0015967:	e8 f8 6b ff ff       	call   c000c564 <installISRHandler(int, void (*)(regs*, void*), void*)>
c001596c:	83 c4 10             	add    esp,0x10
c001596f:	83 fb 1e             	cmp    ebx,0x1e
c0015972:	75 e9                	jne    c001595d <HalInitialise()+0x127>
c0015974:	50                   	push   eax
c0015975:	6a 00                	push   0x0
c0015977:	68 e5 20 01 c0       	push   0xc00120e5
c001597c:	6a 60                	push   0x60
c001597e:	e8 e1 6b ff ff       	call   c000c564 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0015983:	a1 44 08 02 c0       	mov    eax,ds:0xc0020844
c0015988:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c0015992:	c7 04 24 60 01 00 00 	mov    DWORD PTR [esp],0x160
c0015999:	e8 c3 24 ff ff       	call   c0007e61 <malloc>
c001599e:	89 04 24             	mov    DWORD PTR [esp],eax
c00159a1:	89 c3                	mov    ebx,eax
c00159a3:	e8 30 09 00 00       	call   c00162d8 <RTC::RTC()>
c00159a8:	c7 83 14 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x114],0x1
c00159b2:	5a                   	pop    edx
c00159b3:	59                   	pop    ecx
c00159b4:	53                   	push   ebx
c00159b5:	ff 35 44 08 02 c0    	push   DWORD PTR ds:0xc0020844
c00159bb:	e8 70 66 ff ff       	call   c000c030 <Device::addChild(Device*)>
c00159c0:	8b 03                	mov    eax,DWORD PTR [ebx]
c00159c2:	6a 00                	push   0x0
c00159c4:	6a 00                	push   0x0
c00159c6:	6a 00                	push   0x0
c00159c8:	53                   	push   ebx
c00159c9:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00159cc:	a1 44 08 02 c0       	mov    eax,ds:0xc0020844
c00159d1:	89 98 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],ebx
c00159d7:	83 c4 28             	add    esp,0x28
c00159da:	5b                   	pop    ebx
c00159db:	c3                   	ret    

c00159dc <HalMakeBeep(int)>:
c00159dc:	53                   	push   ebx
c00159dd:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c00159e1:	85 db                	test   ebx,ebx
c00159e3:	75 07                	jne    c00159ec <HalMakeBeep(int)+0x10>
c00159e5:	e4 61                	in     al,0x61
c00159e7:	83 e0 fc             	and    eax,0xfffffffc
c00159ea:	eb 26                	jmp    c0015a12 <HalMakeBeep(int)+0x36>
c00159ec:	b8 dc 34 12 00       	mov    eax,0x1234dc
c00159f1:	99                   	cdq    
c00159f2:	f7 fb                	idiv   ebx
c00159f4:	89 c1                	mov    ecx,eax
c00159f6:	b0 b6                	mov    al,0xb6
c00159f8:	e6 43                	out    0x43,al
c00159fa:	88 c8                	mov    al,cl
c00159fc:	e6 42                	out    0x42,al
c00159fe:	89 c8                	mov    eax,ecx
c0015a00:	c1 e8 08             	shr    eax,0x8
c0015a03:	e6 42                	out    0x42,al
c0015a05:	e4 61                	in     al,0x61
c0015a07:	88 c2                	mov    dl,al
c0015a09:	83 ca 03             	or     edx,0x3
c0015a0c:	38 c2                	cmp    dl,al
c0015a0e:	74 04                	je     c0015a14 <HalMakeBeep(int)+0x38>
c0015a10:	88 d0                	mov    al,dl
c0015a12:	e6 61                	out    0x61,al
c0015a14:	5b                   	pop    ebx
c0015a15:	c3                   	ret    

c0015a16 <HalGetRand()>:
c0015a16:	31 c0                	xor    eax,eax
c0015a18:	c3                   	ret    

c0015a19 <HalEndOfInterrupt(int)>:
c0015a19:	80 3d a0 3d 02 c0 00 	cmp    BYTE PTR ds:0xc0023da0,0x0
c0015a20:	74 23                	je     c0015a45 <HalEndOfInterrupt(int)+0x2c>
c0015a22:	83 ec 14             	sub    esp,0x14
c0015a25:	6a 1b                	push   0x1b
c0015a27:	ff 35 44 08 02 c0    	push   DWORD PTR ds:0xc0020844
c0015a2d:	e8 6c 1a ff ff       	call   c000749e <Computer::rdmsr(unsigned int)>
c0015a32:	25 00 f0 ff ff       	and    eax,0xfffff000
c0015a37:	c7 80 b0 00 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xb0],0x1
c0015a41:	83 c4 1c             	add    esp,0x1c
c0015a44:	c3                   	ret    
c0015a45:	e9 56 02 00 00       	jmp    c0015ca0 <picEOI(int)>

c0015a4a <HalRestart()>:
c0015a4a:	c3                   	ret    

c0015a4b <HalShutdown()>:
c0015a4b:	c3                   	ret    

c0015a4c <HalSleep()>:
c0015a4c:	c3                   	ret    
c0015a4d:	66 90                	xchg   ax,ax
c0015a4f:	90                   	nop

c0015a50 <picIoWait()>:
c0015a50:	eb 00                	jmp    c0015a52 <picIoWait()+0x2>
c0015a52:	eb 00                	jmp    c0015a54 <picIoWait()+0x4>
c0015a54:	90                   	nop
c0015a55:	c3                   	ret    
c0015a56:	66 90                	xchg   ax,ax

c0015a58 <picDisable()>:
c0015a58:	83 ec 10             	sub    esp,0x10
c0015a5b:	66 c7 44 24 0a a1 00 	mov    WORD PTR [esp+0xa],0xa1
c0015a62:	c6 44 24 09 ff       	mov    BYTE PTR [esp+0x9],0xff
c0015a67:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0015a6b:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0015a70:	ee                   	out    dx,al
c0015a71:	66 c7 44 24 0e 21 00 	mov    WORD PTR [esp+0xe],0x21
c0015a78:	c6 44 24 0d ff       	mov    BYTE PTR [esp+0xd],0xff
c0015a7d:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0015a81:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c0015a86:	ee                   	out    dx,al
c0015a87:	90                   	nop
c0015a88:	83 c4 10             	add    esp,0x10
c0015a8b:	c3                   	ret    

c0015a8c <picGetIRQReg(int)>:
c0015a8c:	83 ec 10             	sub    esp,0x10
c0015a8f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015a93:	25 ff 00 00 00       	and    eax,0xff
c0015a98:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c0015a9f:	88 44 24 01          	mov    BYTE PTR [esp+0x1],al
c0015aa3:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0015aa7:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0015aac:	ee                   	out    dx,al
c0015aad:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015ab1:	25 ff 00 00 00       	and    eax,0xff
c0015ab6:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c0015abd:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0015ac1:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0015ac5:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0015aca:	ee                   	out    dx,al
c0015acb:	66 c7 44 24 0a a0 00 	mov    WORD PTR [esp+0xa],0xa0
c0015ad2:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0015ad7:	89 c2                	mov    edx,eax
c0015ad9:	ec                   	in     al,dx
c0015ada:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0015ade:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0015ae2:	25 ff 00 00 00       	and    eax,0xff
c0015ae7:	c1 e0 08             	shl    eax,0x8
c0015aea:	89 c1                	mov    ecx,eax
c0015aec:	66 c7 44 24 0e 20 00 	mov    WORD PTR [esp+0xe],0x20
c0015af3:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c0015af8:	89 c2                	mov    edx,eax
c0015afa:	ec                   	in     al,dx
c0015afb:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0015aff:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0015b03:	25 ff 00 00 00       	and    eax,0xff
c0015b08:	09 c8                	or     eax,ecx
c0015b0a:	83 c4 10             	add    esp,0x10
c0015b0d:	c3                   	ret    
c0015b0e:	66 90                	xchg   ax,ax

c0015b10 <picOpen()>:
c0015b10:	83 ec 50             	sub    esp,0x50
c0015b13:	66 c7 44 24 10 21 00 	mov    WORD PTR [esp+0x10],0x21
c0015b1a:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0015b1f:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0015b23:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015b27:	ee                   	out    dx,al
c0015b28:	66 c7 44 24 14 a1 00 	mov    WORD PTR [esp+0x14],0xa1
c0015b2f:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0015b34:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c0015b38:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0015b3c:	ee                   	out    dx,al
c0015b3d:	c7 44 24 4c 20 00 00 00 	mov    DWORD PTR [esp+0x4c],0x20
c0015b45:	c7 44 24 48 28 00 00 00 	mov    DWORD PTR [esp+0x48],0x28
c0015b4d:	66 c7 44 24 18 21 00 	mov    WORD PTR [esp+0x18],0x21
c0015b54:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015b58:	89 c2                	mov    edx,eax
c0015b5a:	ec                   	in     al,dx
c0015b5b:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c0015b5f:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c0015b63:	88 44 24 47          	mov    BYTE PTR [esp+0x47],al
c0015b67:	66 c7 44 24 1c a1 00 	mov    WORD PTR [esp+0x1c],0xa1
c0015b6e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015b72:	89 c2                	mov    edx,eax
c0015b74:	ec                   	in     al,dx
c0015b75:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0015b79:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0015b7d:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c0015b81:	66 c7 44 24 20 20 00 	mov    WORD PTR [esp+0x20],0x20
c0015b88:	c6 44 24 1f 11       	mov    BYTE PTR [esp+0x1f],0x11
c0015b8d:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0015b91:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015b95:	ee                   	out    dx,al
c0015b96:	e8 b5 fe ff ff       	call   c0015a50 <picIoWait()>
c0015b9b:	66 c7 44 24 24 a0 00 	mov    WORD PTR [esp+0x24],0xa0
c0015ba2:	c6 44 24 23 11       	mov    BYTE PTR [esp+0x23],0x11
c0015ba7:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0015bab:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0015baf:	ee                   	out    dx,al
c0015bb0:	e8 9b fe ff ff       	call   c0015a50 <picIoWait()>
c0015bb5:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0015bb9:	25 ff 00 00 00       	and    eax,0xff
c0015bbe:	66 c7 44 24 28 21 00 	mov    WORD PTR [esp+0x28],0x21
c0015bc5:	88 44 24 27          	mov    BYTE PTR [esp+0x27],al
c0015bc9:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c0015bcd:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0015bd1:	ee                   	out    dx,al
c0015bd2:	e8 79 fe ff ff       	call   c0015a50 <picIoWait()>
c0015bd7:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0015bdb:	25 ff 00 00 00       	and    eax,0xff
c0015be0:	66 c7 44 24 2c a1 00 	mov    WORD PTR [esp+0x2c],0xa1
c0015be7:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c0015beb:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c0015bef:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0015bf3:	ee                   	out    dx,al
c0015bf4:	e8 57 fe ff ff       	call   c0015a50 <picIoWait()>
c0015bf9:	66 c7 44 24 30 21 00 	mov    WORD PTR [esp+0x30],0x21
c0015c00:	c6 44 24 2f 04       	mov    BYTE PTR [esp+0x2f],0x4
c0015c05:	8a 44 24 2f          	mov    al,BYTE PTR [esp+0x2f]
c0015c09:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0015c0d:	ee                   	out    dx,al
c0015c0e:	e8 3d fe ff ff       	call   c0015a50 <picIoWait()>
c0015c13:	66 c7 44 24 34 a1 00 	mov    WORD PTR [esp+0x34],0xa1
c0015c1a:	c6 44 24 33 02       	mov    BYTE PTR [esp+0x33],0x2
c0015c1f:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c0015c23:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0015c27:	ee                   	out    dx,al
c0015c28:	e8 23 fe ff ff       	call   c0015a50 <picIoWait()>
c0015c2d:	66 c7 44 24 38 21 00 	mov    WORD PTR [esp+0x38],0x21
c0015c34:	c6 44 24 37 01       	mov    BYTE PTR [esp+0x37],0x1
c0015c39:	8a 44 24 37          	mov    al,BYTE PTR [esp+0x37]
c0015c3d:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0015c41:	ee                   	out    dx,al
c0015c42:	e8 09 fe ff ff       	call   c0015a50 <picIoWait()>
c0015c47:	66 c7 44 24 3c a1 00 	mov    WORD PTR [esp+0x3c],0xa1
c0015c4e:	c6 44 24 3b 01       	mov    BYTE PTR [esp+0x3b],0x1
c0015c53:	8a 44 24 3b          	mov    al,BYTE PTR [esp+0x3b]
c0015c57:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0015c5b:	ee                   	out    dx,al
c0015c5c:	e8 ef fd ff ff       	call   c0015a50 <picIoWait()>
c0015c61:	8a 44 24 47          	mov    al,BYTE PTR [esp+0x47]
c0015c65:	25 ff 00 00 00       	and    eax,0xff
c0015c6a:	66 c7 44 24 40 21 00 	mov    WORD PTR [esp+0x40],0x21
c0015c71:	88 44 24 3f          	mov    BYTE PTR [esp+0x3f],al
c0015c75:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c0015c79:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0015c7d:	ee                   	out    dx,al
c0015c7e:	8a 44 24 46          	mov    al,BYTE PTR [esp+0x46]
c0015c82:	25 ff 00 00 00       	and    eax,0xff
c0015c87:	66 c7 44 24 44 a1 00 	mov    WORD PTR [esp+0x44],0xa1
c0015c8e:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0015c92:	8a 44 24 43          	mov    al,BYTE PTR [esp+0x43]
c0015c96:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0015c9a:	ee                   	out    dx,al
c0015c9b:	90                   	nop
c0015c9c:	83 c4 50             	add    esp,0x50
c0015c9f:	c3                   	ret    

c0015ca0 <picEOI(int)>:
c0015ca0:	83 ec 10             	sub    esp,0x10
c0015ca3:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c0015ca8:	75 22                	jne    c0015ccc <picEOI(int)+0x2c>
c0015caa:	6a 0b                	push   0xb
c0015cac:	e8 db fd ff ff       	call   c0015a8c <picGetIRQReg(int)>
c0015cb1:	83 c4 04             	add    esp,0x4
c0015cb4:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c0015cb9:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c0015cbe:	25 ff ff 00 00       	and    eax,0xffff
c0015cc3:	25 80 00 00 00       	and    eax,0x80
c0015cc8:	74 72                	je     c0015d3c <picEOI(int)+0x9c>
c0015cca:	66 90                	xchg   ax,ax
c0015ccc:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c0015cd1:	75 31                	jne    c0015d04 <picEOI(int)+0x64>
c0015cd3:	6a 0b                	push   0xb
c0015cd5:	e8 b2 fd ff ff       	call   c0015a8c <picGetIRQReg(int)>
c0015cda:	83 c4 04             	add    esp,0x4
c0015cdd:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0015ce2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015ce6:	66 85 c0             	test   ax,ax
c0015ce9:	78 19                	js     c0015d04 <picEOI(int)+0x64>
c0015ceb:	66 c7 44 24 0a 20 00 	mov    WORD PTR [esp+0xa],0x20
c0015cf2:	c6 44 24 09 20       	mov    BYTE PTR [esp+0x9],0x20
c0015cf7:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0015cfb:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0015d00:	ee                   	out    dx,al
c0015d01:	eb 3d                	jmp    c0015d40 <picEOI(int)+0xa0>
c0015d03:	90                   	nop
c0015d04:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c0015d09:	7e 19                	jle    c0015d24 <picEOI(int)+0x84>
c0015d0b:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c0015d12:	c6 44 24 05 20       	mov    BYTE PTR [esp+0x5],0x20
c0015d17:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0015d1b:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0015d20:	ee                   	out    dx,al
c0015d21:	8d 76 00             	lea    esi,[esi+0x0]
c0015d24:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c0015d2b:	c6 44 24 01 20       	mov    BYTE PTR [esp+0x1],0x20
c0015d30:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0015d34:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0015d39:	ee                   	out    dx,al
c0015d3a:	eb 04                	jmp    c0015d40 <picEOI(int)+0xa0>
c0015d3c:	90                   	nop
c0015d3d:	8d 76 00             	lea    esi,[esi+0x0]
c0015d40:	83 c4 10             	add    esp,0x10
c0015d43:	c3                   	ret    

c0015d44 <RTC::open(int, int, void*)>:
c0015d44:	31 c0                	xor    eax,eax
c0015d46:	c3                   	ret    
c0015d47:	90                   	nop

c0015d48 <RTC::close(int, int, void*)>:
c0015d48:	31 c0                	xor    eax,eax
c0015d4a:	c3                   	ret    
c0015d4b:	90                   	nop

c0015d4c <RTC::timeInSecondsUTC()>:
c0015d4c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015d50:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0015d56:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0015d5c:	c3                   	ret    
c0015d5d:	90                   	nop

c0015d5e <RTC::timeInDatetimeUTC()>:
c0015d5e:	53                   	push   ebx
c0015d5f:	83 ec 14             	sub    esp,0x14
c0015d62:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0015d66:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015d6a:	8b 10                	mov    edx,DWORD PTR [eax]
c0015d6c:	50                   	push   eax
c0015d6d:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0015d70:	83 c4 0c             	add    esp,0xc
c0015d73:	52                   	push   edx
c0015d74:	50                   	push   eax
c0015d75:	53                   	push   ebx
c0015d76:	e8 29 60 ff ff       	call   c000bda4 <secondsToDatetime(unsigned long long)>
c0015d7b:	89 d8                	mov    eax,ebx
c0015d7d:	83 c4 14             	add    esp,0x14
c0015d80:	5b                   	pop    ebx
c0015d81:	c2 04 00             	ret    0x4

c0015d84 <RTC::setTimeInSecondsUTC(unsigned long long)>:
c0015d84:	56                   	push   esi
c0015d85:	53                   	push   ebx
c0015d86:	83 ec 14             	sub    esp,0x14
c0015d89:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0015d8d:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015d8f:	8b 70 30             	mov    esi,DWORD PTR [eax+0x30]
c0015d92:	8d 44 24 08          	lea    eax,[esp+0x8]
c0015d96:	52                   	push   edx
c0015d97:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015d9b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015d9f:	50                   	push   eax
c0015da0:	e8 ff 5f ff ff       	call   c000bda4 <secondsToDatetime(unsigned long long)>
c0015da5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015da9:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0015dad:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0015db1:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c0015db5:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0015db9:	89 f0                	mov    eax,esi
c0015dbb:	83 c4 20             	add    esp,0x20
c0015dbe:	5b                   	pop    ebx
c0015dbf:	5e                   	pop    esi
c0015dc0:	ff e0                	jmp    eax

c0015dc2 <RTC::~RTC()>:
c0015dc2:	83 ec 0c             	sub    esp,0xc
c0015dc5:	ba 50 ed 01 c0       	mov    edx,0xc001ed50
c0015dca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015dce:	89 10                	mov    DWORD PTR [eax],edx
c0015dd0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015dd4:	83 ec 0c             	sub    esp,0xc
c0015dd7:	50                   	push   eax
c0015dd8:	e8 4b 5d ff ff       	call   c000bb28 <Clock::~Clock()>
c0015ddd:	83 c4 10             	add    esp,0x10
c0015de0:	90                   	nop
c0015de1:	83 c4 0c             	add    esp,0xc
c0015de4:	c3                   	ret    
c0015de5:	90                   	nop

c0015de6 <RTC::~RTC()>:
c0015de6:	83 ec 0c             	sub    esp,0xc
c0015de9:	83 ec 0c             	sub    esp,0xc
c0015dec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015df0:	e8 cd ff ff ff       	call   c0015dc2 <RTC::~RTC()>
c0015df5:	83 c4 10             	add    esp,0x10
c0015df8:	83 ec 08             	sub    esp,0x8
c0015dfb:	68 60 01 00 00       	push   0x160
c0015e00:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015e04:	e8 f1 4c ff ff       	call   c000aafa <operator delete(void*, unsigned long)>
c0015e09:	83 c4 10             	add    esp,0x10
c0015e0c:	83 c4 0c             	add    esp,0xc
c0015e0f:	c3                   	ret    

c0015e10 <RTC::get_update_in_progress_flag()>:
c0015e10:	83 ec 14             	sub    esp,0x14
c0015e13:	6a 0a                	push   0xa
c0015e15:	ff 35 44 08 02 c0    	push   DWORD PTR ds:0xc0020844
c0015e1b:	e8 32 17 ff ff       	call   c0007552 <Computer::readCMOS(unsigned char)>
c0015e20:	83 c4 1c             	add    esp,0x1c
c0015e23:	c0 e8 07             	shr    al,0x7
c0015e26:	c3                   	ret    
c0015e27:	90                   	nop

c0015e28 <RTC::completeRTCRefresh()>:
c0015e28:	55                   	push   ebp
c0015e29:	57                   	push   edi
c0015e2a:	56                   	push   esi
c0015e2b:	53                   	push   ebx
c0015e2c:	83 ec 2c             	sub    esp,0x2c
c0015e2f:	8b 1d 0c 2e 02 c0    	mov    ebx,DWORD PTR ds:0xc0022e0c
c0015e35:	83 ec 0c             	sub    esp,0xc
c0015e38:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0015e3c:	e8 cf ff ff ff       	call   c0015e10 <RTC::get_update_in_progress_flag()>
c0015e41:	83 c4 10             	add    esp,0x10
c0015e44:	84 c0                	test   al,al
c0015e46:	74 0e                	je     c0015e56 <RTC::completeRTCRefresh()+0x2e>
c0015e48:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c0015e4e:	3b 05 0c 2e 02 c0    	cmp    eax,DWORD PTR ds:0xc0022e0c
c0015e54:	73 df                	jae    c0015e35 <RTC::completeRTCRefresh()+0xd>
c0015e56:	55                   	push   ebp
c0015e57:	55                   	push   ebp
c0015e58:	6a 00                	push   0x0
c0015e5a:	ff 35 44 08 02 c0    	push   DWORD PTR ds:0xc0020844
c0015e60:	e8 ed 16 ff ff       	call   c0007552 <Computer::readCMOS(unsigned char)>
c0015e65:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c0015e69:	58                   	pop    eax
c0015e6a:	5a                   	pop    edx
c0015e6b:	6a 02                	push   0x2
c0015e6d:	ff 35 44 08 02 c0    	push   DWORD PTR ds:0xc0020844
c0015e73:	e8 da 16 ff ff       	call   c0007552 <Computer::readCMOS(unsigned char)>
c0015e78:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c0015e7c:	59                   	pop    ecx
c0015e7d:	5b                   	pop    ebx
c0015e7e:	6a 04                	push   0x4
c0015e80:	ff 35 44 08 02 c0    	push   DWORD PTR ds:0xc0020844
c0015e86:	e8 c7 16 ff ff       	call   c0007552 <Computer::readCMOS(unsigned char)>
c0015e8b:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c0015e8f:	5e                   	pop    esi
c0015e90:	5f                   	pop    edi
c0015e91:	6a 07                	push   0x7
c0015e93:	ff 35 44 08 02 c0    	push   DWORD PTR ds:0xc0020844
c0015e99:	e8 b4 16 ff ff       	call   c0007552 <Computer::readCMOS(unsigned char)>
c0015e9e:	88 44 24 2e          	mov    BYTE PTR [esp+0x2e],al
c0015ea2:	5d                   	pop    ebp
c0015ea3:	58                   	pop    eax
c0015ea4:	6a 08                	push   0x8
c0015ea6:	ff 35 44 08 02 c0    	push   DWORD PTR ds:0xc0020844
c0015eac:	e8 a1 16 ff ff       	call   c0007552 <Computer::readCMOS(unsigned char)>
c0015eb1:	88 44 24 2f          	mov    BYTE PTR [esp+0x2f],al
c0015eb5:	58                   	pop    eax
c0015eb6:	5a                   	pop    edx
c0015eb7:	6a 09                	push   0x9
c0015eb9:	ff 35 44 08 02 c0    	push   DWORD PTR ds:0xc0020844
c0015ebf:	e8 8e 16 ff ff       	call   c0007552 <Computer::readCMOS(unsigned char)>
c0015ec4:	83 c4 10             	add    esp,0x10
c0015ec7:	0f b6 e8             	movzx  ebp,al
c0015eca:	8b 1d 0c 2e 02 c0    	mov    ebx,DWORD PTR ds:0xc0022e0c
c0015ed0:	83 ec 0c             	sub    esp,0xc
c0015ed3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0015ed7:	e8 34 ff ff ff       	call   c0015e10 <RTC::get_update_in_progress_flag()>
c0015edc:	83 c4 10             	add    esp,0x10
c0015edf:	84 c0                	test   al,al
c0015ee1:	74 0e                	je     c0015ef1 <RTC::completeRTCRefresh()+0xc9>
c0015ee3:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c0015ee9:	3b 05 0c 2e 02 c0    	cmp    eax,DWORD PTR ds:0xc0022e0c
c0015eef:	73 df                	jae    c0015ed0 <RTC::completeRTCRefresh()+0xa8>
c0015ef1:	50                   	push   eax
c0015ef2:	50                   	push   eax
c0015ef3:	6a 00                	push   0x0
c0015ef5:	ff 35 44 08 02 c0    	push   DWORD PTR ds:0xc0020844
c0015efb:	e8 52 16 ff ff       	call   c0007552 <Computer::readCMOS(unsigned char)>
c0015f00:	88 44 24 2a          	mov    BYTE PTR [esp+0x2a],al
c0015f04:	58                   	pop    eax
c0015f05:	5a                   	pop    edx
c0015f06:	6a 02                	push   0x2
c0015f08:	ff 35 44 08 02 c0    	push   DWORD PTR ds:0xc0020844
c0015f0e:	e8 3f 16 ff ff       	call   c0007552 <Computer::readCMOS(unsigned char)>
c0015f13:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0015f17:	59                   	pop    ecx
c0015f18:	5b                   	pop    ebx
c0015f19:	6a 04                	push   0x4
c0015f1b:	ff 35 44 08 02 c0    	push   DWORD PTR ds:0xc0020844
c0015f21:	e8 2c 16 ff ff       	call   c0007552 <Computer::readCMOS(unsigned char)>
c0015f26:	5e                   	pop    esi
c0015f27:	88 c3                	mov    bl,al
c0015f29:	5f                   	pop    edi
c0015f2a:	6a 07                	push   0x7
c0015f2c:	ff 35 44 08 02 c0    	push   DWORD PTR ds:0xc0020844
c0015f32:	e8 1b 16 ff ff       	call   c0007552 <Computer::readCMOS(unsigned char)>
c0015f37:	89 c6                	mov    esi,eax
c0015f39:	58                   	pop    eax
c0015f3a:	5a                   	pop    edx
c0015f3b:	6a 08                	push   0x8
c0015f3d:	ff 35 44 08 02 c0    	push   DWORD PTR ds:0xc0020844
c0015f43:	e8 0a 16 ff ff       	call   c0007552 <Computer::readCMOS(unsigned char)>
c0015f48:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c0015f4c:	59                   	pop    ecx
c0015f4d:	5f                   	pop    edi
c0015f4e:	6a 09                	push   0x9
c0015f50:	ff 35 44 08 02 c0    	push   DWORD PTR ds:0xc0020844
c0015f56:	e8 f7 15 ff ff       	call   c0007552 <Computer::readCMOS(unsigned char)>
c0015f5b:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c0015f5f:	0f b6 f8             	movzx  edi,al
c0015f62:	83 c4 10             	add    esp,0x10
c0015f65:	8a 4c 24 1a          	mov    cl,BYTE PTR [esp+0x1a]
c0015f69:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0015f6d:	38 4c 24 1b          	cmp    BYTE PTR [esp+0x1b],cl
c0015f71:	89 f1                	mov    ecx,esi
c0015f73:	0f 94 c0             	sete   al
c0015f76:	38 54 24 1c          	cmp    BYTE PTR [esp+0x1c],dl
c0015f7a:	0f 94 c2             	sete   dl
c0015f7d:	21 d0                	and    eax,edx
c0015f7f:	38 5c 24 1d          	cmp    BYTE PTR [esp+0x1d],bl
c0015f83:	0f 94 c2             	sete   dl
c0015f86:	21 c2                	and    edx,eax
c0015f88:	38 4c 24 1e          	cmp    BYTE PTR [esp+0x1e],cl
c0015f8c:	0f 94 c0             	sete   al
c0015f8f:	21 d0                	and    eax,edx
c0015f91:	8a 54 24 10          	mov    dl,BYTE PTR [esp+0x10]
c0015f95:	38 54 24 1f          	cmp    BYTE PTR [esp+0x1f],dl
c0015f99:	0f 94 c1             	sete   cl
c0015f9c:	84 c8                	test   al,cl
c0015f9e:	75 29                	jne    c0015fc9 <RTC::completeRTCRefresh()+0x1a1>
c0015fa0:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0015fa4:	89 fd                	mov    ebp,edi
c0015fa6:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0015faa:	88 5c 24 1d          	mov    BYTE PTR [esp+0x1d],bl
c0015fae:	89 f0                	mov    eax,esi
c0015fb0:	88 44 24 1e          	mov    BYTE PTR [esp+0x1e],al
c0015fb4:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0015fb8:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0015fbc:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c0015fc0:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0015fc4:	e9 01 ff ff ff       	jmp    c0015eca <RTC::completeRTCRefresh()+0xa2>
c0015fc9:	39 fd                	cmp    ebp,edi
c0015fcb:	75 d3                	jne    c0015fa0 <RTC::completeRTCRefresh()+0x178>
c0015fcd:	55                   	push   ebp
c0015fce:	55                   	push   ebp
c0015fcf:	6a 0b                	push   0xb
c0015fd1:	ff 35 44 08 02 c0    	push   DWORD PTR ds:0xc0020844
c0015fd7:	e8 76 15 ff ff       	call   c0007552 <Computer::readCMOS(unsigned char)>
c0015fdc:	83 c4 10             	add    esp,0x10
c0015fdf:	89 c5                	mov    ebp,eax
c0015fe1:	a8 04                	test   al,0x4
c0015fe3:	75 78                	jne    c001605d <RTC::completeRTCRefresh()+0x235>
c0015fe5:	b1 0a                	mov    cl,0xa
c0015fe7:	8a 54 24 1a          	mov    dl,BYTE PTR [esp+0x1a]
c0015feb:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c0015fef:	83 e2 0f             	and    edx,0xf
c0015ff2:	c0 e8 04             	shr    al,0x4
c0015ff5:	c1 ef 04             	shr    edi,0x4
c0015ff8:	f6 e1                	mul    cl
c0015ffa:	6b ff 0a             	imul   edi,edi,0xa
c0015ffd:	01 d0                	add    eax,edx
c0015fff:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0016003:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c0016007:	83 e2 0f             	and    edx,0xf
c001600a:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001600e:	c0 e8 04             	shr    al,0x4
c0016011:	f6 e1                	mul    cl
c0016013:	01 d0                	add    eax,edx
c0016015:	88 da                	mov    dl,bl
c0016017:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001601b:	83 e2 0f             	and    edx,0xf
c001601e:	88 d8                	mov    al,bl
c0016020:	83 e3 80             	and    ebx,0xffffff80
c0016023:	c0 e8 04             	shr    al,0x4
c0016026:	83 e0 07             	and    eax,0x7
c0016029:	f6 e1                	mul    cl
c001602b:	01 d0                	add    eax,edx
c001602d:	89 f2                	mov    edx,esi
c001602f:	09 c3                	or     ebx,eax
c0016031:	83 e2 0f             	and    edx,0xf
c0016034:	89 f0                	mov    eax,esi
c0016036:	c0 e8 04             	shr    al,0x4
c0016039:	f6 e1                	mul    cl
c001603b:	8d 34 02             	lea    esi,[edx+eax*1]
c001603e:	8a 54 24 10          	mov    dl,BYTE PTR [esp+0x10]
c0016042:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0016046:	83 e2 0f             	and    edx,0xf
c0016049:	c0 e8 04             	shr    al,0x4
c001604c:	f6 e1                	mul    cl
c001604e:	01 d0                	add    eax,edx
c0016050:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c0016054:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0016058:	83 e0 0f             	and    eax,0xf
c001605b:	01 c7                	add    edi,eax
c001605d:	83 e5 02             	and    ebp,0x2
c0016060:	75 14                	jne    c0016076 <RTC::completeRTCRefresh()+0x24e>
c0016062:	84 db                	test   bl,bl
c0016064:	79 10                	jns    c0016076 <RTC::completeRTCRefresh()+0x24e>
c0016066:	83 e3 7f             	and    ebx,0x7f
c0016069:	b9 18 00 00 00       	mov    ecx,0x18
c001606e:	8d 43 0c             	lea    eax,[ebx+0xc]
c0016071:	99                   	cdq    
c0016072:	f7 f9                	idiv   ecx
c0016074:	88 d3                	mov    bl,dl
c0016076:	8d af d0 07 00 00    	lea    ebp,[edi+0x7d0]
c001607c:	81 fd e3 07 00 00    	cmp    ebp,0x7e3
c0016082:	77 06                	ja     c001608a <RTC::completeRTCRefresh()+0x262>
c0016084:	8d af 34 08 00 00    	lea    ebp,[edi+0x834]
c001608a:	0f b6 4c 24 1a       	movzx  ecx,BYTE PTR [esp+0x1a]
c001608f:	31 d2                	xor    edx,edx
c0016091:	c1 e1 10             	shl    ecx,0x10
c0016094:	89 d7                	mov    edi,edx
c0016096:	c1 e5 10             	shl    ebp,0x10
c0016099:	31 c0                	xor    eax,eax
c001609b:	81 e7 ff ff 00 ff    	and    edi,0xff00ffff
c00160a1:	09 cf                	or     edi,ecx
c00160a3:	89 fa                	mov    edx,edi
c00160a5:	8a 74 24 0c          	mov    dh,BYTE PTR [esp+0xc]
c00160a9:	88 da                	mov    dl,bl
c00160ab:	89 f3                	mov    ebx,esi
c00160ad:	88 5c 24 1a          	mov    BYTE PTR [esp+0x1a],bl
c00160b1:	88 d8                	mov    al,bl
c00160b3:	8a 64 24 10          	mov    ah,BYTE PTR [esp+0x10]
c00160b7:	0f b7 c8             	movzx  ecx,ax
c00160ba:	09 e9                	or     ecx,ebp
c00160bc:	89 c8                	mov    eax,ecx
c00160be:	51                   	push   ecx
c00160bf:	51                   	push   ecx
c00160c0:	52                   	push   edx
c00160c1:	50                   	push   eax
c00160c2:	e8 50 5b ff ff       	call   c000bc17 <datetimeToSeconds(datetime_t)>
c00160c7:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c00160cb:	89 86 58 01 00 00    	mov    DWORD PTR [esi+0x158],eax
c00160d1:	89 96 5c 01 00 00    	mov    DWORD PTR [esi+0x15c],edx
c00160d7:	83 c4 3c             	add    esp,0x3c
c00160da:	5b                   	pop    ebx
c00160db:	5e                   	pop    esi
c00160dc:	5f                   	pop    edi
c00160dd:	5d                   	pop    ebp
c00160de:	c3                   	ret    
c00160df:	90                   	nop

c00160e0 <RTC::setTimeInDatetimeUTC(datetime_t)>:
c00160e0:	55                   	push   ebp
c00160e1:	57                   	push   edi
c00160e2:	56                   	push   esi
c00160e3:	53                   	push   ebx
c00160e4:	83 ec 30             	sub    esp,0x30
c00160e7:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00160eb:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c00160ef:	6a 00                	push   0x0
c00160f1:	6a 00                	push   0x0
c00160f3:	ff 35 44 08 02 c0    	push   DWORD PTR ds:0xc0020844
c00160f9:	e8 6a 15 ff ff       	call   c0007668 <Computer::writeCMOS(unsigned char, unsigned char)>
c00160fe:	83 c4 0c             	add    esp,0xc
c0016101:	6a 00                	push   0x0
c0016103:	6a 02                	push   0x2
c0016105:	ff 35 44 08 02 c0    	push   DWORD PTR ds:0xc0020844
c001610b:	e8 58 15 ff ff       	call   c0007668 <Computer::writeCMOS(unsigned char, unsigned char)>
c0016110:	31 d2                	xor    edx,edx
c0016112:	89 f9                	mov    ecx,edi
c0016114:	89 f8                	mov    eax,edi
c0016116:	c1 e9 10             	shr    ecx,0x10
c0016119:	0f b6 c4             	movzx  eax,ah
c001611c:	88 4c 24 27          	mov    BYTE PTR [esp+0x27],cl
c0016120:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c0016124:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0016128:	b9 64 00 00 00       	mov    ecx,0x64
c001612d:	89 f0                	mov    eax,esi
c001612f:	88 44 24 28          	mov    BYTE PTR [esp+0x28],al
c0016133:	89 f0                	mov    eax,esi
c0016135:	0f b6 c4             	movzx  eax,ah
c0016138:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001613c:	89 f0                	mov    eax,esi
c001613e:	c1 e8 10             	shr    eax,0x10
c0016141:	66 f7 f1             	div    cx
c0016144:	66 89 54 24 2a       	mov    WORD PTR [esp+0x2a],dx
c0016149:	0f b6 6c 24 2a       	movzx  ebp,BYTE PTR [esp+0x2a]
c001614e:	59                   	pop    ecx
c001614f:	5b                   	pop    ebx
c0016150:	89 fb                	mov    ebx,edi
c0016152:	6a 0b                	push   0xb
c0016154:	ff 35 44 08 02 c0    	push   DWORD PTR ds:0xc0020844
c001615a:	e8 f3 13 ff ff       	call   c0007552 <Computer::readCMOS(unsigned char)>
c001615f:	88 44 24 29          	mov    BYTE PTR [esp+0x29],al
c0016163:	83 c4 10             	add    esp,0x10
c0016166:	f6 44 24 19 04       	test   BYTE PTR [esp+0x19],0x4
c001616b:	75 74                	jne    c00161e1 <RTC::setTimeInDatetimeUTC(datetime_t)+0x101>
c001616d:	b2 0a                	mov    dl,0xa
c001616f:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0016173:	0f b6 c1             	movzx  eax,cl
c0016176:	f6 f2                	div    dl
c0016178:	88 c3                	mov    bl,al
c001617a:	88 e0                	mov    al,ah
c001617c:	c1 e3 04             	shl    ebx,0x4
c001617f:	09 c3                	or     ebx,eax
c0016181:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0016186:	88 5c 24 17          	mov    BYTE PTR [esp+0x17],bl
c001618a:	f6 f2                	div    dl
c001618c:	88 c1                	mov    cl,al
c001618e:	88 e0                	mov    al,ah
c0016190:	c1 e1 04             	shl    ecx,0x4
c0016193:	09 c1                	or     ecx,eax
c0016195:	89 f8                	mov    eax,edi
c0016197:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c001619b:	0f b6 c0             	movzx  eax,al
c001619e:	f6 f2                	div    dl
c00161a0:	88 c3                	mov    bl,al
c00161a2:	88 e0                	mov    al,ah
c00161a4:	c1 e3 04             	shl    ebx,0x4
c00161a7:	09 c3                	or     ebx,eax
c00161a9:	89 f0                	mov    eax,esi
c00161ab:	0f b6 c0             	movzx  eax,al
c00161ae:	f6 f2                	div    dl
c00161b0:	88 c1                	mov    cl,al
c00161b2:	88 e0                	mov    al,ah
c00161b4:	c1 e1 04             	shl    ecx,0x4
c00161b7:	09 c1                	or     ecx,eax
c00161b9:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c00161be:	88 4c 24 18          	mov    BYTE PTR [esp+0x18],cl
c00161c2:	f6 f2                	div    dl
c00161c4:	88 c1                	mov    cl,al
c00161c6:	88 e0                	mov    al,ah
c00161c8:	c1 e1 04             	shl    ecx,0x4
c00161cb:	09 c1                	or     ecx,eax
c00161cd:	0f b6 44 24 1a       	movzx  eax,BYTE PTR [esp+0x1a]
c00161d2:	88 4c 24 10          	mov    BYTE PTR [esp+0x10],cl
c00161d6:	f6 f2                	div    dl
c00161d8:	89 c5                	mov    ebp,eax
c00161da:	88 e0                	mov    al,ah
c00161dc:	c1 e5 04             	shl    ebp,0x4
c00161df:	09 c5                	or     ebp,eax
c00161e1:	f6 44 24 19 02       	test   BYTE PTR [esp+0x19],0x2
c00161e6:	75 17                	jne    c00161ff <RTC::setTimeInDatetimeUTC(datetime_t)+0x11f>
c00161e8:	80 fb 0b             	cmp    bl,0xb
c00161eb:	76 0c                	jbe    c00161f9 <RTC::setTimeInDatetimeUTC(datetime_t)+0x119>
c00161ed:	80 eb 0c             	sub    bl,0xc
c00161f0:	75 02                	jne    c00161f4 <RTC::setTimeInDatetimeUTC(datetime_t)+0x114>
c00161f2:	b3 0c                	mov    bl,0xc
c00161f4:	83 cb 80             	or     ebx,0xffffff80
c00161f7:	eb 06                	jmp    c00161ff <RTC::setTimeInDatetimeUTC(datetime_t)+0x11f>
c00161f9:	84 db                	test   bl,bl
c00161fb:	75 02                	jne    c00161ff <RTC::setTimeInDatetimeUTC(datetime_t)+0x11f>
c00161fd:	b3 0c                	mov    bl,0xc
c00161ff:	0f b6 db             	movzx  ebx,bl
c0016202:	50                   	push   eax
c0016203:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c0016208:	50                   	push   eax
c0016209:	6a 00                	push   0x0
c001620b:	ff 35 44 08 02 c0    	push   DWORD PTR ds:0xc0020844
c0016211:	e8 52 14 ff ff       	call   c0007668 <Computer::writeCMOS(unsigned char, unsigned char)>
c0016216:	83 c4 0c             	add    esp,0xc
c0016219:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c001621e:	50                   	push   eax
c001621f:	6a 02                	push   0x2
c0016221:	ff 35 44 08 02 c0    	push   DWORD PTR ds:0xc0020844
c0016227:	e8 3c 14 ff ff       	call   c0007668 <Computer::writeCMOS(unsigned char, unsigned char)>
c001622c:	83 c4 0c             	add    esp,0xc
c001622f:	53                   	push   ebx
c0016230:	6a 04                	push   0x4
c0016232:	ff 35 44 08 02 c0    	push   DWORD PTR ds:0xc0020844
c0016238:	e8 2b 14 ff ff       	call   c0007668 <Computer::writeCMOS(unsigned char, unsigned char)>
c001623d:	83 c4 0c             	add    esp,0xc
c0016240:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0016245:	50                   	push   eax
c0016246:	6a 07                	push   0x7
c0016248:	ff 35 44 08 02 c0    	push   DWORD PTR ds:0xc0020844
c001624e:	e8 15 14 ff ff       	call   c0007668 <Computer::writeCMOS(unsigned char, unsigned char)>
c0016253:	83 c4 0c             	add    esp,0xc
c0016256:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001625b:	50                   	push   eax
c001625c:	6a 08                	push   0x8
c001625e:	ff 35 44 08 02 c0    	push   DWORD PTR ds:0xc0020844
c0016264:	e8 ff 13 ff ff       	call   c0007668 <Computer::writeCMOS(unsigned char, unsigned char)>
c0016269:	83 c4 0c             	add    esp,0xc
c001626c:	89 e8                	mov    eax,ebp
c001626e:	0f b6 e8             	movzx  ebp,al
c0016271:	55                   	push   ebp
c0016272:	6a 09                	push   0x9
c0016274:	ff 35 44 08 02 c0    	push   DWORD PTR ds:0xc0020844
c001627a:	e8 e9 13 ff ff       	call   c0007668 <Computer::writeCMOS(unsigned char, unsigned char)>
c001627f:	5a                   	pop    edx
c0016280:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0016284:	e8 9f fb ff ff       	call   c0015e28 <RTC::completeRTCRefresh()>
c0016289:	83 c4 3c             	add    esp,0x3c
c001628c:	b0 01                	mov    al,0x1
c001628e:	5b                   	pop    ebx
c001628f:	5e                   	pop    esi
c0016290:	5f                   	pop    edi
c0016291:	5d                   	pop    ebp
c0016292:	c3                   	ret    

c0016293 <rtcIRQHandler(regs*, void*)>:
c0016293:	53                   	push   ebx
c0016294:	83 ec 10             	sub    esp,0x10
c0016297:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001629b:	6a 0c                	push   0xc
c001629d:	ff 35 44 08 02 c0    	push   DWORD PTR ds:0xc0020844
c00162a3:	e8 aa 12 ff ff       	call   c0007552 <Computer::readCMOS(unsigned char)>
c00162a8:	83 c4 10             	add    esp,0x10
c00162ab:	84 c0                	test   al,al
c00162ad:	79 24                	jns    c00162d3 <rtcIRQHandler(regs*, void*)+0x40>
c00162af:	83 83 58 01 00 00 01 	add    DWORD PTR [ebx+0x158],0x1
c00162b6:	83 93 5c 01 00 00 00 	adc    DWORD PTR [ebx+0x15c],0x0
c00162bd:	66 ff 05 b4 3d 02 c0 	inc    WORD PTR ds:0xc0023db4
c00162c4:	75 0d                	jne    c00162d3 <rtcIRQHandler(regs*, void*)+0x40>
c00162c6:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00162ca:	83 c4 08             	add    esp,0x8
c00162cd:	5b                   	pop    ebx
c00162ce:	e9 55 fb ff ff       	jmp    c0015e28 <RTC::completeRTCRefresh()>
c00162d3:	83 c4 08             	add    esp,0x8
c00162d6:	5b                   	pop    ebx
c00162d7:	c3                   	ret    

c00162d8 <RTC::RTC()>:
c00162d8:	83 ec 1c             	sub    esp,0x1c
c00162db:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00162df:	83 ec 08             	sub    esp,0x8
c00162e2:	68 33 ed 01 c0       	push   0xc001ed33
c00162e7:	50                   	push   eax
c00162e8:	e8 05 58 ff ff       	call   c000baf2 <Clock::Clock(char const*)>
c00162ed:	83 c4 10             	add    esp,0x10
c00162f0:	ba 50 ed 01 c0       	mov    edx,0xc001ed50
c00162f5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00162f9:	89 10                	mov    DWORD PTR [eax],edx
c00162fb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00162ff:	83 ec 0c             	sub    esp,0xc
c0016302:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016306:	6a 01                	push   0x1
c0016308:	68 93 62 01 c0       	push   0xc0016293
c001630d:	6a 08                	push   0x8
c001630f:	50                   	push   eax
c0016310:	e8 c7 5c ff ff       	call   c000bfdc <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0016315:	83 c4 20             	add    esp,0x20
c0016318:	89 c2                	mov    edx,eax
c001631a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001631e:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0016324:	fa                   	cli    
c0016325:	a1 08 3d 02 c0       	mov    eax,ds:0xc0023d08
c001632a:	40                   	inc    eax
c001632b:	a3 08 3d 02 c0       	mov    ds:0xc0023d08,eax
c0016330:	a1 44 08 02 c0       	mov    eax,ds:0xc0020844
c0016335:	83 ec 08             	sub    esp,0x8
c0016338:	6a 0b                	push   0xb
c001633a:	50                   	push   eax
c001633b:	e8 12 12 ff ff       	call   c0007552 <Computer::readCMOS(unsigned char)>
c0016340:	83 c4 10             	add    esp,0x10
c0016343:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0016347:	a1 44 08 02 c0       	mov    eax,ds:0xc0020844
c001634c:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0016350:	83 ca 10             	or     edx,0x10
c0016353:	81 e2 ff 00 00 00    	and    edx,0xff
c0016359:	83 ec 04             	sub    esp,0x4
c001635c:	52                   	push   edx
c001635d:	6a 0b                	push   0xb
c001635f:	50                   	push   eax
c0016360:	e8 03 13 ff ff       	call   c0007668 <Computer::writeCMOS(unsigned char, unsigned char)>
c0016365:	83 c4 10             	add    esp,0x10
c0016368:	83 ec 0c             	sub    esp,0xc
c001636b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001636f:	e8 b4 fa ff ff       	call   c0015e28 <RTC::completeRTCRefresh()>
c0016374:	83 c4 10             	add    esp,0x10
c0016377:	a1 08 3d 02 c0       	mov    eax,ds:0xc0023d08
c001637c:	48                   	dec    eax
c001637d:	a3 08 3d 02 c0       	mov    ds:0xc0023d08,eax
c0016382:	a1 08 3d 02 c0       	mov    eax,ds:0xc0023d08
c0016387:	85 c0                	test   eax,eax
c0016389:	75 01                	jne    c001638c <RTC::RTC()+0xb4>
c001638b:	fb                   	sti    
c001638c:	90                   	nop
c001638d:	83 c4 1c             	add    esp,0x1c
c0016390:	c3                   	ret    
c0016391:	66 90                	xchg   ax,ax
c0016393:	90                   	nop

c0016394 <HalConsoleScroll(int, int)>:
c0016394:	83 ec 10             	sub    esp,0x10
c0016397:	c7 44 24 04 00 80 0b c2 	mov    DWORD PTR [esp+0x4],0xc20b8000
c001639f:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c00163a7:	90                   	nop
c00163a8:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c00163ad:	0f 8f e1 00 00 00    	jg     c0016494 <HalConsoleScroll(int, int)+0x100>
c00163b3:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00163bb:	90                   	nop
c00163bc:	81 7c 24 08 9f 00 00 00 	cmp    DWORD PTR [esp+0x8],0x9f
c00163c4:	0f 8f be 00 00 00    	jg     c0016488 <HalConsoleScroll(int, int)+0xf4>
c00163ca:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00163ce:	89 d0                	mov    eax,edx
c00163d0:	c1 e0 02             	shl    eax,0x2
c00163d3:	01 d0                	add    eax,edx
c00163d5:	c1 e0 05             	shl    eax,0x5
c00163d8:	89 c2                	mov    edx,eax
c00163da:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00163de:	01 d0                	add    eax,edx
c00163e0:	89 c2                	mov    edx,eax
c00163e2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00163e6:	8d 0c 02             	lea    ecx,[edx+eax*1]
c00163e9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00163ed:	89 d0                	mov    eax,edx
c00163ef:	c1 e0 02             	shl    eax,0x2
c00163f2:	01 d0                	add    eax,edx
c00163f4:	c1 e0 05             	shl    eax,0x5
c00163f7:	89 c2                	mov    edx,eax
c00163f9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00163fd:	01 d0                	add    eax,edx
c00163ff:	8d 90 60 ff ff ff    	lea    edx,[eax-0xa0]
c0016405:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016409:	01 c2                	add    edx,eax
c001640b:	8a 01                	mov    al,BYTE PTR [ecx]
c001640d:	88 02                	mov    BYTE PTR [edx],al
c001640f:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c0016414:	75 66                	jne    c001647c <HalConsoleScroll(int, int)+0xe8>
c0016416:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001641a:	83 e0 01             	and    eax,0x1
c001641d:	74 39                	je     c0016458 <HalConsoleScroll(int, int)+0xc4>
c001641f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0016423:	83 e0 0f             	and    eax,0xf
c0016426:	88 c2                	mov    dl,al
c0016428:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001642c:	c1 e0 04             	shl    eax,0x4
c001642f:	88 d1                	mov    cl,dl
c0016431:	09 c1                	or     ecx,eax
c0016433:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016437:	89 d0                	mov    eax,edx
c0016439:	c1 e0 02             	shl    eax,0x2
c001643c:	01 d0                	add    eax,edx
c001643e:	c1 e0 05             	shl    eax,0x5
c0016441:	89 c2                	mov    edx,eax
c0016443:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016447:	01 d0                	add    eax,edx
c0016449:	89 c2                	mov    edx,eax
c001644b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001644f:	01 d0                	add    eax,edx
c0016451:	88 ca                	mov    dl,cl
c0016453:	88 10                	mov    BYTE PTR [eax],dl
c0016455:	eb 25                	jmp    c001647c <HalConsoleScroll(int, int)+0xe8>
c0016457:	90                   	nop
c0016458:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001645c:	89 d0                	mov    eax,edx
c001645e:	c1 e0 02             	shl    eax,0x2
c0016461:	01 d0                	add    eax,edx
c0016463:	c1 e0 05             	shl    eax,0x5
c0016466:	89 c2                	mov    edx,eax
c0016468:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001646c:	01 d0                	add    eax,edx
c001646e:	89 c2                	mov    edx,eax
c0016470:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016474:	01 d0                	add    eax,edx
c0016476:	c6 00 20             	mov    BYTE PTR [eax],0x20
c0016479:	8d 76 00             	lea    esi,[esi+0x0]
c001647c:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0016480:	e9 37 ff ff ff       	jmp    c00163bc <HalConsoleScroll(int, int)+0x28>
c0016485:	8d 76 00             	lea    esi,[esi+0x0]
c0016488:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001648c:	e9 17 ff ff ff       	jmp    c00163a8 <HalConsoleScroll(int, int)+0x14>
c0016491:	8d 76 00             	lea    esi,[esi+0x0]
c0016494:	90                   	nop
c0016495:	83 c4 10             	add    esp,0x10
c0016498:	c3                   	ret    
c0016499:	8d 76 00             	lea    esi,[esi+0x0]

c001649c <HalConsoleWriteCharacter(char, int, int, int, int)>:
c001649c:	83 ec 14             	sub    esp,0x14
c001649f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00164a3:	88 04 24             	mov    BYTE PTR [esp],al
c00164a6:	8a 04 24             	mov    al,BYTE PTR [esp]
c00164a9:	25 ff 00 00 00       	and    eax,0xff
c00164ae:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00164b2:	89 d1                	mov    ecx,edx
c00164b4:	83 e1 0f             	and    ecx,0xf
c00164b7:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00164bb:	c1 e2 04             	shl    edx,0x4
c00164be:	81 e2 ff 00 00 00    	and    edx,0xff
c00164c4:	09 ca                	or     edx,ecx
c00164c6:	c1 e2 08             	shl    edx,0x8
c00164c9:	09 d0                	or     eax,edx
c00164cb:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00164d0:	c7 44 24 0c 00 80 0b c2 	mov    DWORD PTR [esp+0xc],0xc20b8000
c00164d8:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00164dc:	89 d0                	mov    eax,edx
c00164de:	c1 e0 02             	shl    eax,0x2
c00164e1:	01 d0                	add    eax,edx
c00164e3:	c1 e0 04             	shl    eax,0x4
c00164e6:	89 c2                	mov    edx,eax
c00164e8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00164ec:	01 d0                	add    eax,edx
c00164ee:	01 c0                	add    eax,eax
c00164f0:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c00164f4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00164f8:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c00164fd:	66 89 02             	mov    WORD PTR [edx],ax
c0016500:	90                   	nop
c0016501:	83 c4 14             	add    esp,0x14
c0016504:	c3                   	ret    
c0016505:	8d 76 00             	lea    esi,[esi+0x0]

c0016508 <HalConsoleCursorUpdate(int, int)>:
c0016508:	83 ec 20             	sub    esp,0x20
c001650b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001650f:	89 c2                	mov    edx,eax
c0016511:	89 d0                	mov    eax,edx
c0016513:	c1 e0 02             	shl    eax,0x2
c0016516:	01 d0                	add    eax,edx
c0016518:	c1 e0 04             	shl    eax,0x4
c001651b:	89 c2                	mov    edx,eax
c001651d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016521:	01 d0                	add    eax,edx
c0016523:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c0016528:	66 c7 44 24 10 d4 03 	mov    WORD PTR [esp+0x10],0x3d4
c001652f:	c6 44 24 0f 0f       	mov    BYTE PTR [esp+0xf],0xf
c0016534:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0016538:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001653c:	ee                   	out    dx,al
c001653d:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0016542:	25 ff 00 00 00       	and    eax,0xff
c0016547:	66 c7 44 24 14 d5 03 	mov    WORD PTR [esp+0x14],0x3d5
c001654e:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c0016552:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c0016556:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001655a:	ee                   	out    dx,al
c001655b:	66 c7 44 24 18 d4 03 	mov    WORD PTR [esp+0x18],0x3d4
c0016562:	c6 44 24 17 0e       	mov    BYTE PTR [esp+0x17],0xe
c0016567:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c001656b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001656f:	ee                   	out    dx,al
c0016570:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0016575:	66 c1 e8 08          	shr    ax,0x8
c0016579:	25 ff 00 00 00       	and    eax,0xff
c001657e:	66 c7 44 24 1c d5 03 	mov    WORD PTR [esp+0x1c],0x3d5
c0016585:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0016589:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c001658d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0016591:	ee                   	out    dx,al
c0016592:	90                   	nop
c0016593:	83 c4 20             	add    esp,0x20
c0016596:	c3                   	ret    
c0016597:	90                   	nop

c0016598 <FAT::getName()>:
c0016598:	b8 84 ed 01 c0       	mov    eax,0xc001ed84
c001659d:	c3                   	ret    
c001659e:	66 90                	xchg   ax,ax

c00165a0 <FAT::tell(void*, unsigned long long*)>:
c00165a0:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00165a5:	75 09                	jne    c00165b0 <FAT::tell(void*, unsigned long long*)+0x10>
c00165a7:	b8 04 00 00 00       	mov    eax,0x4
c00165ac:	c3                   	ret    
c00165ad:	8d 76 00             	lea    esi,[esi+0x0]
c00165b0:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00165b5:	75 09                	jne    c00165c0 <FAT::tell(void*, unsigned long long*)+0x20>
c00165b7:	b8 04 00 00 00       	mov    eax,0x4
c00165bc:	c3                   	ret    
c00165bd:	8d 76 00             	lea    esi,[esi+0x0]
c00165c0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00165c4:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00165c7:	ba 00 00 00 00       	mov    edx,0x0
c00165cc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00165d0:	89 01                	mov    DWORD PTR [ecx],eax
c00165d2:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00165d5:	b8 00 00 00 00       	mov    eax,0x0
c00165da:	c3                   	ret    
c00165db:	90                   	nop

c00165dc <FAT::stat(void*, unsigned long long*)>:
c00165dc:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00165e1:	75 09                	jne    c00165ec <FAT::stat(void*, unsigned long long*)+0x10>
c00165e3:	b8 04 00 00 00       	mov    eax,0x4
c00165e8:	c3                   	ret    
c00165e9:	8d 76 00             	lea    esi,[esi+0x0]
c00165ec:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00165f1:	75 09                	jne    c00165fc <FAT::stat(void*, unsigned long long*)+0x20>
c00165f3:	b8 04 00 00 00       	mov    eax,0x4
c00165f8:	c3                   	ret    
c00165f9:	8d 76 00             	lea    esi,[esi+0x0]
c00165fc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016600:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0016603:	ba 00 00 00 00       	mov    edx,0x0
c0016608:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001660c:	89 01                	mov    DWORD PTR [ecx],eax
c001660e:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0016611:	b8 00 00 00 00       	mov    eax,0x0
c0016616:	c3                   	ret    
c0016617:	90                   	nop

c0016618 <FAT::~FAT()>:
c0016618:	83 ec 0c             	sub    esp,0xc
c001661b:	ba d0 ed 01 c0       	mov    edx,0xc001edd0
c0016620:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016624:	89 10                	mov    DWORD PTR [eax],edx
c0016626:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001662a:	83 ec 0c             	sub    esp,0xc
c001662d:	50                   	push   eax
c001662e:	e8 03 49 ff ff       	call   c000af36 <Filesystem::~Filesystem()>
c0016633:	83 c4 10             	add    esp,0x10
c0016636:	90                   	nop
c0016637:	83 c4 0c             	add    esp,0xc
c001663a:	c3                   	ret    
c001663b:	90                   	nop

c001663c <FAT::~FAT()>:
c001663c:	83 ec 0c             	sub    esp,0xc
c001663f:	83 ec 0c             	sub    esp,0xc
c0016642:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016646:	e8 cd ff ff ff       	call   c0016618 <FAT::~FAT()>
c001664b:	83 c4 10             	add    esp,0x10
c001664e:	83 ec 08             	sub    esp,0x8
c0016651:	6a 08                	push   0x8
c0016653:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016657:	e8 9e 44 ff ff       	call   c000aafa <operator delete(void*, unsigned long)>
c001665c:	83 c4 10             	add    esp,0x10
c001665f:	83 c4 0c             	add    esp,0xc
c0016662:	c3                   	ret    
c0016663:	90                   	nop

c0016664 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0016664:	83 ec 1c             	sub    esp,0x1c
c0016667:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c001666e:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c0016673:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0016677:	8b 04 85 e0 3d 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc220]
c001667e:	83 f8 ff             	cmp    eax,0xffffffff
c0016681:	75 35                	jne    c00166b8 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x54>
c0016683:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0016687:	88 c2                	mov    dl,al
c0016689:	a1 c0 3d 02 c0       	mov    eax,ds:0xc0023dc0
c001668e:	01 d0                	add    eax,edx
c0016690:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0016694:	8b 15 c0 3d 02 c0    	mov    edx,DWORD PTR ds:0xc0023dc0
c001669a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001669e:	89 14 85 e0 3d 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc220],edx
c00166a5:	a1 c0 3d 02 c0       	mov    eax,ds:0xc0023dc0
c00166aa:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00166ae:	89 14 85 60 3e 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc1a0],edx
c00166b5:	eb 19                	jmp    c00166d0 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6c>
c00166b7:	90                   	nop
c00166b8:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00166bc:	88 c2                	mov    dl,al
c00166be:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00166c2:	8b 04 85 e0 3d 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc220]
c00166c9:	01 d0                	add    eax,edx
c00166cb:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c00166cf:	90                   	nop
c00166d0:	83 ec 04             	sub    esp,0x4
c00166d3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00166d7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00166db:	8d 44 24 15          	lea    eax,[esp+0x15]
c00166df:	50                   	push   eax
c00166e0:	e8 8f e7 fe ff       	call   c0004e74 <f_getlabel>
c00166e5:	83 c4 10             	add    esp,0x10
c00166e8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00166ec:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00166f1:	75 09                	jne    c00166fc <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x98>
c00166f3:	b8 00 00 00 00       	mov    eax,0x0
c00166f8:	eb 0a                	jmp    c0016704 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0xa0>
c00166fa:	66 90                	xchg   ax,ax
c00166fc:	b8 01 00 00 00       	mov    eax,0x1
c0016701:	8d 76 00             	lea    esi,[esi+0x0]
c0016704:	83 c4 1c             	add    esp,0x1c
c0016707:	c3                   	ret    

c0016708 <FAT::setlabel(LogicalDisk*, int, char*)>:
c0016708:	57                   	push   edi
c0016709:	83 ec 58             	sub    esp,0x58
c001670c:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c0016714:	8d 54 24 10          	lea    edx,[esp+0x10]
c0016718:	b8 00 00 00 00       	mov    eax,0x0
c001671d:	b9 0f 00 00 00       	mov    ecx,0xf
c0016722:	fc                   	cld    
c0016723:	89 d7                	mov    edi,edx
c0016725:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0016727:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001672b:	8b 04 85 e0 3d 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc220]
c0016732:	83 f8 ff             	cmp    eax,0xffffffff
c0016735:	75 35                	jne    c001676c <FAT::setlabel(LogicalDisk*, int, char*)+0x64>
c0016737:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001673b:	88 c2                	mov    dl,al
c001673d:	a1 c0 3d 02 c0       	mov    eax,ds:0xc0023dc0
c0016742:	01 d0                	add    eax,edx
c0016744:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0016748:	8b 15 c0 3d 02 c0    	mov    edx,DWORD PTR ds:0xc0023dc0
c001674e:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0016752:	89 14 85 e0 3d 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc220],edx
c0016759:	a1 c0 3d 02 c0       	mov    eax,ds:0xc0023dc0
c001675e:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c0016762:	89 14 85 60 3e 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc1a0],edx
c0016769:	eb 19                	jmp    c0016784 <FAT::setlabel(LogicalDisk*, int, char*)+0x7c>
c001676b:	90                   	nop
c001676c:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0016770:	88 c2                	mov    dl,al
c0016772:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0016776:	8b 04 85 e0 3d 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc220]
c001677d:	01 d0                	add    eax,edx
c001677f:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0016783:	90                   	nop
c0016784:	83 ec 08             	sub    esp,0x8
c0016787:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c001678b:	8d 44 24 18          	lea    eax,[esp+0x18]
c001678f:	50                   	push   eax
c0016790:	e8 4b a0 fe ff       	call   c00007e0 <strcat>
c0016795:	83 c4 10             	add    esp,0x10
c0016798:	83 ec 0c             	sub    esp,0xc
c001679b:	8d 44 24 18          	lea    eax,[esp+0x18]
c001679f:	50                   	push   eax
c00167a0:	e8 20 e8 fe ff       	call   c0004fc5 <f_setlabel>
c00167a5:	83 c4 10             	add    esp,0x10
c00167a8:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c00167ac:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c00167b1:	75 09                	jne    c00167bc <FAT::setlabel(LogicalDisk*, int, char*)+0xb4>
c00167b3:	b8 00 00 00 00       	mov    eax,0x0
c00167b8:	eb 0a                	jmp    c00167c4 <FAT::setlabel(LogicalDisk*, int, char*)+0xbc>
c00167ba:	66 90                	xchg   ax,ax
c00167bc:	b8 01 00 00 00       	mov    eax,0x1
c00167c1:	8d 76 00             	lea    esi,[esi+0x0]
c00167c4:	83 c4 58             	add    esp,0x58
c00167c7:	5f                   	pop    edi
c00167c8:	c3                   	ret    
c00167c9:	90                   	nop
c00167ca:	66 90                	xchg   ax,ax

c00167cc <FAT::format(LogicalDisk*, int, char const*, int)>:
c00167cc:	83 ec 2c             	sub    esp,0x2c
c00167cf:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00167d7:	83 ec 08             	sub    esp,0x8
c00167da:	68 a8 ed 01 c0       	push   0xc001eda8
c00167df:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00167e3:	e8 18 9f fe ff       	call   c0000700 <strcmp>
c00167e8:	83 c4 10             	add    esp,0x10
c00167eb:	85 c0                	test   eax,eax
c00167ed:	0f 94 c0             	sete   al
c00167f0:	84 c0                	test   al,al
c00167f2:	74 10                	je     c0016804 <FAT::format(LogicalDisk*, int, char const*, int)+0x38>
c00167f4:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c00167fc:	e9 b3 00 00 00       	jmp    c00168b4 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c0016801:	8d 76 00             	lea    esi,[esi+0x0]
c0016804:	83 ec 08             	sub    esp,0x8
c0016807:	68 9a ed 01 c0       	push   0xc001ed9a
c001680c:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0016810:	e8 eb 9e fe ff       	call   c0000700 <strcmp>
c0016815:	83 c4 10             	add    esp,0x10
c0016818:	85 c0                	test   eax,eax
c001681a:	0f 94 c0             	sete   al
c001681d:	84 c0                	test   al,al
c001681f:	74 0f                	je     c0016830 <FAT::format(LogicalDisk*, int, char const*, int)+0x64>
c0016821:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0016829:	e9 86 00 00 00       	jmp    c00168b4 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c001682e:	66 90                	xchg   ax,ax
c0016830:	83 ec 08             	sub    esp,0x8
c0016833:	68 a0 ed 01 c0       	push   0xc001eda0
c0016838:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001683c:	e8 bf 9e fe ff       	call   c0000700 <strcmp>
c0016841:	83 c4 10             	add    esp,0x10
c0016844:	85 c0                	test   eax,eax
c0016846:	0f 94 c0             	sete   al
c0016849:	84 c0                	test   al,al
c001684b:	74 0b                	je     c0016858 <FAT::format(LogicalDisk*, int, char const*, int)+0x8c>
c001684d:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0016855:	eb 5d                	jmp    c00168b4 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c0016857:	90                   	nop
c0016858:	83 ec 08             	sub    esp,0x8
c001685b:	68 5c ce 01 c0       	push   0xc001ce5c
c0016860:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0016864:	e8 97 9e fe ff       	call   c0000700 <strcmp>
c0016869:	83 c4 10             	add    esp,0x10
c001686c:	85 c0                	test   eax,eax
c001686e:	0f 94 c0             	sete   al
c0016871:	84 c0                	test   al,al
c0016873:	74 0b                	je     c0016880 <FAT::format(LogicalDisk*, int, char const*, int)+0xb4>
c0016875:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c001687d:	eb 35                	jmp    c00168b4 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c001687f:	90                   	nop
c0016880:	83 ec 08             	sub    esp,0x8
c0016883:	68 a6 ed 01 c0       	push   0xc001eda6
c0016888:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001688c:	e8 6f 9e fe ff       	call   c0000700 <strcmp>
c0016891:	83 c4 10             	add    esp,0x10
c0016894:	85 c0                	test   eax,eax
c0016896:	0f 94 c0             	sete   al
c0016899:	84 c0                	test   al,al
c001689b:	74 0b                	je     c00168a8 <FAT::format(LogicalDisk*, int, char const*, int)+0xdc>
c001689d:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c00168a5:	eb 0d                	jmp    c00168b4 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c00168a7:	90                   	nop
c00168a8:	b8 08 00 00 00       	mov    eax,0x8
c00168ad:	e9 ea 00 00 00       	jmp    c001699c <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c00168b2:	66 90                	xchg   ax,ax
c00168b4:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c00168bb:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c00168c0:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00168c4:	8b 04 85 e0 3d 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc220]
c00168cb:	83 f8 ff             	cmp    eax,0xffffffff
c00168ce:	75 34                	jne    c0016904 <FAT::format(LogicalDisk*, int, char const*, int)+0x138>
c00168d0:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c00168d4:	88 c2                	mov    dl,al
c00168d6:	a1 c0 3d 02 c0       	mov    eax,ds:0xc0023dc0
c00168db:	01 d0                	add    eax,edx
c00168dd:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c00168e1:	8b 15 c0 3d 02 c0    	mov    edx,DWORD PTR ds:0xc0023dc0
c00168e7:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00168eb:	89 14 85 e0 3d 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc220],edx
c00168f2:	a1 c0 3d 02 c0       	mov    eax,ds:0xc0023dc0
c00168f7:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00168fb:	89 14 85 60 3e 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc1a0],edx
c0016902:	eb 18                	jmp    c001691c <FAT::format(LogicalDisk*, int, char const*, int)+0x150>
c0016904:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0016908:	88 c2                	mov    dl,al
c001690a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001690e:	8b 04 85 e0 3d 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc220]
c0016915:	01 d0                	add    eax,edx
c0016917:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001691b:	90                   	nop
c001691c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016920:	88 04 24             	mov    BYTE PTR [esp],al
c0016923:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0016927:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001692b:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0016933:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c0016938:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0016940:	83 ec 0c             	sub    esp,0xc
c0016943:	68 00 20 00 00       	push   0x2000
c0016948:	e8 14 15 ff ff       	call   c0007e61 <malloc>
c001694d:	83 c4 10             	add    esp,0x10
c0016950:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0016954:	68 00 20 00 00       	push   0x2000
c0016959:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001695d:	8d 44 24 08          	lea    eax,[esp+0x8]
c0016961:	50                   	push   eax
c0016962:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c0016966:	50                   	push   eax
c0016967:	e8 49 e9 fe ff       	call   c00052b5 <f_mkfs>
c001696c:	83 c4 10             	add    esp,0x10
c001696f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016973:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0016978:	75 0a                	jne    c0016984 <FAT::format(LogicalDisk*, int, char const*, int)+0x1b8>
c001697a:	b8 00 00 00 00       	mov    eax,0x0
c001697f:	eb 1b                	jmp    c001699c <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c0016981:	8d 76 00             	lea    esi,[esi+0x0]
c0016984:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c0016989:	75 09                	jne    c0016994 <FAT::format(LogicalDisk*, int, char const*, int)+0x1c8>
c001698b:	b8 09 00 00 00       	mov    eax,0x9
c0016990:	eb 0a                	jmp    c001699c <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c0016992:	66 90                	xchg   ax,ax
c0016994:	b8 01 00 00 00       	mov    eax,0x1
c0016999:	8d 76 00             	lea    esi,[esi+0x0]
c001699c:	83 c4 2c             	add    esp,0x2c
c001699f:	c3                   	ret    

c00169a0 <FAT::tryMount(LogicalDisk*, int)>:
c00169a0:	81 ec 4c 03 00 00    	sub    esp,0x34c
c00169a6:	a1 c0 3d 02 c0       	mov    eax,ds:0xc0023dc0
c00169ab:	83 f8 14             	cmp    eax,0x14
c00169ae:	75 18                	jne    c00169c8 <FAT::tryMount(LogicalDisk*, int)+0x28>
c00169b0:	83 ec 0c             	sub    esp,0xc
c00169b3:	68 ac ed 01 c0       	push   0xc001edac
c00169b8:	e8 82 9d ff ff       	call   c001073f <Krnl::panic(char const*)>
c00169bd:	83 c4 10             	add    esp,0x10
c00169c0:	b0 00                	mov    al,0x0
c00169c2:	e9 e9 01 00 00       	jmp    c0016bb0 <FAT::tryMount(LogicalDisk*, int)+0x210>
c00169c7:	90                   	nop
c00169c8:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c00169cf:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c00169d5:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00169db:	3d 00 02 00 00       	cmp    eax,0x200
c00169e0:	74 0a                	je     c00169ec <FAT::tryMount(LogicalDisk*, int)+0x4c>
c00169e2:	b0 00                	mov    al,0x0
c00169e4:	e9 c7 01 00 00       	jmp    c0016bb0 <FAT::tryMount(LogicalDisk*, int)+0x210>
c00169e9:	8d 76 00             	lea    esi,[esi+0x0]
c00169ec:	c6 84 24 3f 03 00 00 00 	mov    BYTE PTR [esp+0x33f],0x0
c00169f4:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c00169fb:	8b 04 85 e0 3d 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc220]
c0016a02:	83 f8 ff             	cmp    eax,0xffffffff
c0016a05:	74 09                	je     c0016a10 <FAT::tryMount(LogicalDisk*, int)+0x70>
c0016a07:	b0 01                	mov    al,0x1
c0016a09:	e9 a2 01 00 00       	jmp    c0016bb0 <FAT::tryMount(LogicalDisk*, int)+0x210>
c0016a0e:	66 90                	xchg   ax,ax
c0016a10:	66 c7 84 24 31 03 00 00 30 3a 	mov    WORD PTR [esp+0x331],0x3a30
c0016a1a:	c6 84 24 33 03 00 00 00 	mov    BYTE PTR [esp+0x333],0x0
c0016a22:	8a 84 24 31 03 00 00 	mov    al,BYTE PTR [esp+0x331]
c0016a29:	88 c2                	mov    dl,al
c0016a2b:	a1 c0 3d 02 c0       	mov    eax,ds:0xc0023dc0
c0016a30:	01 d0                	add    eax,edx
c0016a32:	88 84 24 31 03 00 00 	mov    BYTE PTR [esp+0x331],al
c0016a39:	8b 15 c0 3d 02 c0    	mov    edx,DWORD PTR ds:0xc0023dc0
c0016a3f:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c0016a46:	89 14 85 e0 3d 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc220],edx
c0016a4d:	a1 c0 3d 02 c0       	mov    eax,ds:0xc0023dc0
c0016a52:	8b 94 24 58 03 00 00 	mov    edx,DWORD PTR [esp+0x358]
c0016a59:	89 14 85 60 3e 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc1a0],edx
c0016a60:	83 ec 0c             	sub    esp,0xc
c0016a63:	68 34 02 00 00       	push   0x234
c0016a68:	e8 f4 13 ff ff       	call   c0007e61 <malloc>
c0016a6d:	83 c4 10             	add    esp,0x10
c0016a70:	89 84 24 38 03 00 00 	mov    DWORD PTR [esp+0x338],eax
c0016a77:	83 ec 04             	sub    esp,0x4
c0016a7a:	6a 00                	push   0x0
c0016a7c:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c0016a83:	50                   	push   eax
c0016a84:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c0016a8b:	e8 4b d0 fe ff       	call   c0003adb <f_mount>
c0016a90:	83 c4 10             	add    esp,0x10
c0016a93:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c0016a9a:	83 bc 24 34 03 00 00 00 	cmp    DWORD PTR [esp+0x334],0x0
c0016aa2:	74 1c                	je     c0016ac0 <FAT::tryMount(LogicalDisk*, int)+0x120>
c0016aa4:	83 ec 0c             	sub    esp,0xc
c0016aa7:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c0016aae:	e8 ce 13 ff ff       	call   c0007e81 <rfree>
c0016ab3:	83 c4 10             	add    esp,0x10
c0016ab6:	b0 00                	mov    al,0x0
c0016ab8:	e9 f3 00 00 00       	jmp    c0016bb0 <FAT::tryMount(LogicalDisk*, int)+0x210>
c0016abd:	8d 76 00             	lea    esi,[esi+0x0]
c0016ac0:	83 ec 04             	sub    esp,0x4
c0016ac3:	68 00 01 00 00       	push   0x100
c0016ac8:	6a 00                	push   0x0
c0016aca:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0016ad1:	50                   	push   eax
c0016ad2:	e8 19 9a fe ff       	call   c00004f0 <memset>
c0016ad7:	83 c4 10             	add    esp,0x10
c0016ada:	83 ec 08             	sub    esp,0x8
c0016add:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c0016ae4:	50                   	push   eax
c0016ae5:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0016aec:	50                   	push   eax
c0016aed:	e8 ee 9c fe ff       	call   c00007e0 <strcat>
c0016af2:	83 c4 10             	add    esp,0x10
c0016af5:	83 ec 08             	sub    esp,0x8
c0016af8:	68 ba ed 01 c0       	push   0xc001edba
c0016afd:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0016b04:	50                   	push   eax
c0016b05:	e8 d6 9c fe ff       	call   c00007e0 <strcat>
c0016b0a:	83 c4 10             	add    esp,0x10
c0016b0d:	83 ec 04             	sub    esp,0x4
c0016b10:	6a 01                	push   0x1
c0016b12:	8d 84 24 39 02 00 00 	lea    eax,[esp+0x239]
c0016b19:	50                   	push   eax
c0016b1a:	8d 44 24 14          	lea    eax,[esp+0x14]
c0016b1e:	50                   	push   eax
c0016b1f:	e8 19 d0 fe ff       	call   c0003b3d <f_open>
c0016b24:	83 c4 10             	add    esp,0x10
c0016b27:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c0016b2e:	8b 84 24 34 03 00 00 	mov    eax,DWORD PTR [esp+0x334]
c0016b35:	85 c0                	test   eax,eax
c0016b37:	74 0b                	je     c0016b44 <FAT::tryMount(LogicalDisk*, int)+0x1a4>
c0016b39:	78 31                	js     c0016b6c <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c0016b3b:	83 e8 04             	sub    eax,0x4
c0016b3e:	83 f8 01             	cmp    eax,0x1
c0016b41:	77 29                	ja     c0016b6c <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c0016b43:	90                   	nop
c0016b44:	c6 84 24 3f 03 00 00 01 	mov    BYTE PTR [esp+0x33f],0x1
c0016b4c:	83 ec 0c             	sub    esp,0xc
c0016b4f:	8d 44 24 14          	lea    eax,[esp+0x14]
c0016b53:	50                   	push   eax
c0016b54:	e8 97 d7 fe ff       	call   c00042f0 <f_close>
c0016b59:	83 c4 10             	add    esp,0x10
c0016b5c:	90                   	nop
c0016b5d:	80 bc 24 3f 03 00 00 00 	cmp    BYTE PTR [esp+0x33f],0x0
c0016b65:	74 41                	je     c0016ba8 <FAT::tryMount(LogicalDisk*, int)+0x208>
c0016b67:	eb 33                	jmp    c0016b9c <FAT::tryMount(LogicalDisk*, int)+0x1fc>
c0016b69:	8d 76 00             	lea    esi,[esi+0x0]
c0016b6c:	83 ec 0c             	sub    esp,0xc
c0016b6f:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c0016b76:	e8 06 13 ff ff       	call   c0007e81 <rfree>
c0016b7b:	83 c4 10             	add    esp,0x10
c0016b7e:	83 ec 04             	sub    esp,0x4
c0016b81:	6a 00                	push   0x0
c0016b83:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c0016b8a:	50                   	push   eax
c0016b8b:	6a 00                	push   0x0
c0016b8d:	e8 49 cf fe ff       	call   c0003adb <f_mount>
c0016b92:	83 c4 10             	add    esp,0x10
c0016b95:	b0 00                	mov    al,0x0
c0016b97:	eb 17                	jmp    c0016bb0 <FAT::tryMount(LogicalDisk*, int)+0x210>
c0016b99:	8d 76 00             	lea    esi,[esi+0x0]
c0016b9c:	a1 c0 3d 02 c0       	mov    eax,ds:0xc0023dc0
c0016ba1:	40                   	inc    eax
c0016ba2:	a3 c0 3d 02 c0       	mov    ds:0xc0023dc0,eax
c0016ba7:	90                   	nop
c0016ba8:	8a 84 24 3f 03 00 00 	mov    al,BYTE PTR [esp+0x33f]
c0016baf:	90                   	nop
c0016bb0:	81 c4 4c 03 00 00    	add    esp,0x34c
c0016bb6:	c3                   	ret    
c0016bb7:	90                   	nop

c0016bb8 <FAT::allocateSwapfile(char const*, int)>:
c0016bb8:	55                   	push   ebp
c0016bb9:	57                   	push   edi
c0016bba:	56                   	push   esi
c0016bbb:	53                   	push   ebx
c0016bbc:	81 ec 3c 04 00 00    	sub    esp,0x43c
c0016bc2:	c7 84 24 20 04 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x420],0x114
c0016bcd:	83 ec 0c             	sub    esp,0xc
c0016bd0:	ff b4 24 2c 04 00 00 	push   DWORD PTR [esp+0x42c]
c0016bd7:	e8 85 12 ff ff       	call   c0007e61 <malloc>
c0016bdc:	83 c4 10             	add    esp,0x10
c0016bdf:	89 c7                	mov    edi,eax
c0016be1:	a1 30 3d 02 c0       	mov    eax,ds:0xc0023d30
c0016be6:	83 ec 04             	sub    esp,0x4
c0016be9:	50                   	push   eax
c0016bea:	ff b4 24 5c 04 00 00 	push   DWORD PTR [esp+0x45c]
c0016bf1:	57                   	push   edi
c0016bf2:	e8 6f 45 ff ff       	call   c000b166 <File::File(char const*, Process*)>
c0016bf7:	83 c4 10             	add    esp,0x10
c0016bfa:	89 bc 24 2c 04 00 00 	mov    DWORD PTR [esp+0x42c],edi
c0016c01:	83 ec 04             	sub    esp,0x4
c0016c04:	8d 44 24 13          	lea    eax,[esp+0x13]
c0016c08:	50                   	push   eax
c0016c09:	8d 44 24 18          	lea    eax,[esp+0x18]
c0016c0d:	50                   	push   eax
c0016c0e:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0016c15:	e8 b8 48 ff ff       	call   c000b4d2 <File::stat(unsigned long long*, bool*)>
c0016c1a:	83 c4 10             	add    esp,0x10
c0016c1d:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c0016c24:	c1 e0 14             	shl    eax,0x14
c0016c27:	89 c7                	mov    edi,eax
c0016c29:	89 c5                	mov    ebp,eax
c0016c2b:	c1 fd 1f             	sar    ebp,0x1f
c0016c2e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c32:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0016c36:	89 f9                	mov    ecx,edi
c0016c38:	31 c1                	xor    ecx,eax
c0016c3a:	89 cb                	mov    ebx,ecx
c0016c3c:	89 e9                	mov    ecx,ebp
c0016c3e:	31 d1                	xor    ecx,edx
c0016c40:	89 ce                	mov    esi,ecx
c0016c42:	89 f0                	mov    eax,esi
c0016c44:	09 d8                	or     eax,ebx
c0016c46:	0f 84 9c 00 00 00    	je     c0016ce8 <FAT::allocateSwapfile(char const*, int)+0x130>
c0016c4c:	83 ec 0c             	sub    esp,0xc
c0016c4f:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0016c56:	e8 43 47 ff ff       	call   c000b39e <File::unlink()>
c0016c5b:	83 c4 10             	add    esp,0x10
c0016c5e:	83 ec 08             	sub    esp,0x8
c0016c61:	6a 12                	push   0x12
c0016c63:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0016c6a:	e8 b7 45 ff ff       	call   c000b226 <File::open(FileOpenMode)>
c0016c6f:	83 c4 10             	add    esp,0x10
c0016c72:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0016c79:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0016c7f:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c0016c86:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c0016c8d:	c1 e0 14             	shl    eax,0x14
c0016c90:	83 ec 04             	sub    esp,0x4
c0016c93:	6a 01                	push   0x1
c0016c95:	50                   	push   eax
c0016c96:	ff b4 24 34 04 00 00 	push   DWORD PTR [esp+0x434]
c0016c9d:	e8 b3 e4 fe ff       	call   c0005155 <f_expand>
c0016ca2:	83 c4 10             	add    esp,0x10
c0016ca5:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0016cac:	8b 00                	mov    eax,DWORD PTR [eax]
c0016cae:	83 c0 10             	add    eax,0x10
c0016cb1:	8b 00                	mov    eax,DWORD PTR [eax]
c0016cb3:	83 ec 0c             	sub    esp,0xc
c0016cb6:	8d 54 24 24          	lea    edx,[esp+0x24]
c0016cba:	52                   	push   edx
c0016cbb:	8d 54 24 30          	lea    edx,[esp+0x30]
c0016cbf:	52                   	push   edx
c0016cc0:	6a 00                	push   0x0
c0016cc2:	68 00 04 00 00       	push   0x400
c0016cc7:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c0016cce:	ff d0                	call   eax
c0016cd0:	83 c4 20             	add    esp,0x20
c0016cd3:	83 ec 0c             	sub    esp,0xc
c0016cd6:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0016cdd:	e8 a2 45 ff ff       	call   c000b284 <File::close()>
c0016ce2:	83 c4 10             	add    esp,0x10
c0016ce5:	8d 76 00             	lea    esi,[esi+0x0]
c0016ce8:	83 ec 08             	sub    esp,0x8
c0016ceb:	6a 01                	push   0x1
c0016ced:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0016cf4:	e8 2d 45 ff ff       	call   c000b226 <File::open(FileOpenMode)>
c0016cf9:	83 c4 10             	add    esp,0x10
c0016cfc:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0016d03:	8b 00                	mov    eax,DWORD PTR [eax]
c0016d05:	83 c0 0c             	add    eax,0xc
c0016d08:	8b 00                	mov    eax,DWORD PTR [eax]
c0016d0a:	83 ec 0c             	sub    esp,0xc
c0016d0d:	8d 54 24 24          	lea    edx,[esp+0x24]
c0016d11:	52                   	push   edx
c0016d12:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c0016d16:	52                   	push   edx
c0016d17:	6a 00                	push   0x0
c0016d19:	6a 04                	push   0x4
c0016d1b:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c0016d22:	ff d0                	call   eax
c0016d24:	83 c4 20             	add    esp,0x20
c0016d27:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0016d2e:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0016d34:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c0016d3b:	8b 84 24 28 04 00 00 	mov    eax,DWORD PTR [esp+0x428]
c0016d42:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0016d45:	89 84 24 24 04 00 00 	mov    DWORD PTR [esp+0x424],eax
c0016d4c:	83 ec 0c             	sub    esp,0xc
c0016d4f:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0016d56:	e8 29 45 ff ff       	call   c000b284 <File::close()>
c0016d5b:	83 c4 10             	add    esp,0x10
c0016d5e:	8b 84 24 24 04 00 00 	mov    eax,DWORD PTR [esp+0x424]
c0016d65:	ba 00 00 00 00       	mov    edx,0x0
c0016d6a:	81 c4 3c 04 00 00    	add    esp,0x43c
c0016d70:	5b                   	pop    ebx
c0016d71:	5e                   	pop    esi
c0016d72:	5f                   	pop    edi
c0016d73:	5d                   	pop    ebp
c0016d74:	c3                   	ret    
c0016d75:	90                   	nop
c0016d76:	66 90                	xchg   ax,ax

c0016d78 <FAT::readDir(void*, unsigned long, void*, int*)>:
c0016d78:	57                   	push   edi
c0016d79:	56                   	push   esi
c0016d7a:	53                   	push   ebx
c0016d7b:	81 ec 50 02 00 00    	sub    esp,0x250
c0016d81:	83 bc 24 64 02 00 00 00 	cmp    DWORD PTR [esp+0x264],0x0
c0016d89:	74 0d                	je     c0016d98 <FAT::readDir(void*, unsigned long, void*, int*)+0x20>
c0016d8b:	83 bc 24 70 02 00 00 00 	cmp    DWORD PTR [esp+0x270],0x0
c0016d93:	75 0f                	jne    c0016da4 <FAT::readDir(void*, unsigned long, void*, int*)+0x2c>
c0016d95:	8d 76 00             	lea    esi,[esi+0x0]
c0016d98:	b8 04 00 00 00       	mov    eax,0x4
c0016d9d:	e9 36 01 00 00       	jmp    c0016ed8 <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c0016da2:	66 90                	xchg   ax,ax
c0016da4:	83 ec 08             	sub    esp,0x8
c0016da7:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c0016dae:	50                   	push   eax
c0016daf:	ff b4 24 70 02 00 00 	push   DWORD PTR [esp+0x270]
c0016db6:	e8 f8 d7 fe ff       	call   c00045b3 <f_readdir>
c0016dbb:	83 c4 10             	add    esp,0x10
c0016dbe:	89 84 24 4c 02 00 00 	mov    DWORD PTR [esp+0x24c],eax
c0016dc5:	66 c7 44 24 08 00 00 	mov    WORD PTR [esp+0x8],0x0
c0016dcc:	83 ec 0c             	sub    esp,0xc
c0016dcf:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c0016dd6:	83 c0 16             	add    eax,0x16
c0016dd9:	50                   	push   eax
c0016dda:	e8 81 97 fe ff       	call   c0000560 <strlen>
c0016ddf:	83 c4 10             	add    esp,0x10
c0016de2:	ba 00 00 00 00       	mov    edx,0x0
c0016de7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016deb:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0016def:	8a 84 24 20 01 00 00 	mov    al,BYTE PTR [esp+0x120]
c0016df6:	25 ff 00 00 00       	and    eax,0xff
c0016dfb:	83 e0 10             	and    eax,0x10
c0016dfe:	74 08                	je     c0016e08 <FAT::readDir(void*, unsigned long, void*, int*)+0x90>
c0016e00:	b8 02 00 00 00       	mov    eax,0x2
c0016e05:	eb 09                	jmp    c0016e10 <FAT::readDir(void*, unsigned long, void*, int*)+0x98>
c0016e07:	90                   	nop
c0016e08:	b8 01 00 00 00       	mov    eax,0x1
c0016e0d:	8d 76 00             	lea    esi,[esi+0x0]
c0016e10:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016e14:	83 ec 08             	sub    esp,0x8
c0016e17:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c0016e1e:	83 c0 16             	add    eax,0x16
c0016e21:	50                   	push   eax
c0016e22:	8d 44 24 14          	lea    eax,[esp+0x14]
c0016e26:	83 c0 10             	add    eax,0x10
c0016e29:	50                   	push   eax
c0016e2a:	e8 f1 97 fe ff       	call   c0000620 <strcpy>
c0016e2f:	83 c4 10             	add    esp,0x10
c0016e32:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
c0016e39:	89 84 24 48 02 00 00 	mov    DWORD PTR [esp+0x248],eax
c0016e40:	8d 44 24 08          	lea    eax,[esp+0x8]
c0016e44:	89 84 24 44 02 00 00 	mov    DWORD PTR [esp+0x244],eax
c0016e4b:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
c0016e52:	89 84 24 40 02 00 00 	mov    DWORD PTR [esp+0x240],eax
c0016e59:	8b 84 24 48 02 00 00 	mov    eax,DWORD PTR [esp+0x248]
c0016e60:	89 84 24 3c 02 00 00 	mov    DWORD PTR [esp+0x23c],eax
c0016e67:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c0016e6e:	8b 94 24 48 02 00 00 	mov    edx,DWORD PTR [esp+0x248]
c0016e75:	8b 8c 24 40 02 00 00 	mov    ecx,DWORD PTR [esp+0x240]
c0016e7c:	89 c6                	mov    esi,eax
c0016e7e:	89 d7                	mov    edi,edx
c0016e80:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016e82:	89 c8                	mov    eax,ecx
c0016e84:	89 fa                	mov    edx,edi
c0016e86:	89 f3                	mov    ebx,esi
c0016e88:	89 9c 24 38 02 00 00 	mov    DWORD PTR [esp+0x238],ebx
c0016e8f:	89 94 24 34 02 00 00 	mov    DWORD PTR [esp+0x234],edx
c0016e96:	89 84 24 30 02 00 00 	mov    DWORD PTR [esp+0x230],eax
c0016e9d:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
c0016ea4:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c0016eaa:	8a 84 24 2e 01 00 00 	mov    al,BYTE PTR [esp+0x12e]
c0016eb1:	84 c0                	test   al,al
c0016eb3:	75 07                	jne    c0016ebc <FAT::readDir(void*, unsigned long, void*, int*)+0x144>
c0016eb5:	b8 07 00 00 00       	mov    eax,0x7
c0016eba:	eb 1c                	jmp    c0016ed8 <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c0016ebc:	8b 84 24 4c 02 00 00 	mov    eax,DWORD PTR [esp+0x24c]
c0016ec3:	85 c0                	test   eax,eax
c0016ec5:	75 09                	jne    c0016ed0 <FAT::readDir(void*, unsigned long, void*, int*)+0x158>
c0016ec7:	b8 00 00 00 00       	mov    eax,0x0
c0016ecc:	eb 0a                	jmp    c0016ed8 <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c0016ece:	66 90                	xchg   ax,ax
c0016ed0:	b8 01 00 00 00       	mov    eax,0x1
c0016ed5:	8d 76 00             	lea    esi,[esi+0x0]
c0016ed8:	81 c4 50 02 00 00    	add    esp,0x250
c0016ede:	5b                   	pop    ebx
c0016edf:	5e                   	pop    esi
c0016ee0:	5f                   	pop    edi
c0016ee1:	c3                   	ret    
c0016ee2:	66 90                	xchg   ax,ax

c0016ee4 <FAT::read(void*, unsigned long, void*, int*)>:
c0016ee4:	83 ec 1c             	sub    esp,0x1c
c0016ee7:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0016eec:	74 0a                	je     c0016ef8 <FAT::read(void*, unsigned long, void*, int*)+0x14>
c0016eee:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0016ef3:	75 0b                	jne    c0016f00 <FAT::read(void*, unsigned long, void*, int*)+0x1c>
c0016ef5:	8d 76 00             	lea    esi,[esi+0x0]
c0016ef8:	b8 04 00 00 00       	mov    eax,0x4
c0016efd:	eb 41                	jmp    c0016f40 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c0016eff:	90                   	nop
c0016f00:	8d 44 24 08          	lea    eax,[esp+0x8]
c0016f04:	50                   	push   eax
c0016f05:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016f09:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0016f0d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016f11:	e8 f2 ce fe ff       	call   c0003e08 <f_read>
c0016f16:	83 c4 10             	add    esp,0x10
c0016f19:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016f1d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016f21:	89 c2                	mov    edx,eax
c0016f23:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016f27:	89 10                	mov    DWORD PTR [eax],edx
c0016f29:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016f2d:	85 c0                	test   eax,eax
c0016f2f:	75 07                	jne    c0016f38 <FAT::read(void*, unsigned long, void*, int*)+0x54>
c0016f31:	b8 00 00 00 00       	mov    eax,0x0
c0016f36:	eb 08                	jmp    c0016f40 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c0016f38:	b8 01 00 00 00       	mov    eax,0x1
c0016f3d:	8d 76 00             	lea    esi,[esi+0x0]
c0016f40:	83 c4 1c             	add    esp,0x1c
c0016f43:	c3                   	ret    

c0016f44 <FAT::write(void*, unsigned long, void*, int*)>:
c0016f44:	83 ec 1c             	sub    esp,0x1c
c0016f47:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0016f4c:	74 0a                	je     c0016f58 <FAT::write(void*, unsigned long, void*, int*)+0x14>
c0016f4e:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0016f53:	75 0b                	jne    c0016f60 <FAT::write(void*, unsigned long, void*, int*)+0x1c>
c0016f55:	8d 76 00             	lea    esi,[esi+0x0]
c0016f58:	b8 04 00 00 00       	mov    eax,0x4
c0016f5d:	eb 41                	jmp    c0016fa0 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c0016f5f:	90                   	nop
c0016f60:	8d 44 24 08          	lea    eax,[esp+0x8]
c0016f64:	50                   	push   eax
c0016f65:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016f69:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0016f6d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016f71:	e8 91 d0 fe ff       	call   c0004007 <f_write>
c0016f76:	83 c4 10             	add    esp,0x10
c0016f79:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016f7d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016f81:	89 c2                	mov    edx,eax
c0016f83:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016f87:	89 10                	mov    DWORD PTR [eax],edx
c0016f89:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016f8d:	85 c0                	test   eax,eax
c0016f8f:	75 07                	jne    c0016f98 <FAT::write(void*, unsigned long, void*, int*)+0x54>
c0016f91:	b8 00 00 00 00       	mov    eax,0x0
c0016f96:	eb 08                	jmp    c0016fa0 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c0016f98:	b8 01 00 00 00       	mov    eax,0x1
c0016f9d:	8d 76 00             	lea    esi,[esi+0x0]
c0016fa0:	83 c4 1c             	add    esp,0x1c
c0016fa3:	c3                   	ret    

c0016fa4 <FAT::close(void*)>:
c0016fa4:	83 ec 1c             	sub    esp,0x1c
c0016fa7:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0016fac:	75 0a                	jne    c0016fb8 <FAT::close(void*)+0x14>
c0016fae:	b8 04 00 00 00       	mov    eax,0x4
c0016fb3:	eb 3f                	jmp    c0016ff4 <FAT::close(void*)+0x50>
c0016fb5:	8d 76 00             	lea    esi,[esi+0x0]
c0016fb8:	83 ec 0c             	sub    esp,0xc
c0016fbb:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016fbf:	e8 2c d3 fe ff       	call   c00042f0 <f_close>
c0016fc4:	83 c4 10             	add    esp,0x10
c0016fc7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016fcb:	83 ec 0c             	sub    esp,0xc
c0016fce:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016fd2:	e8 9a 0e ff ff       	call   c0007e71 <free>
c0016fd7:	83 c4 10             	add    esp,0x10
c0016fda:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016fde:	85 c0                	test   eax,eax
c0016fe0:	75 0a                	jne    c0016fec <FAT::close(void*)+0x48>
c0016fe2:	b8 00 00 00 00       	mov    eax,0x0
c0016fe7:	eb 0b                	jmp    c0016ff4 <FAT::close(void*)+0x50>
c0016fe9:	8d 76 00             	lea    esi,[esi+0x0]
c0016fec:	b8 01 00 00 00       	mov    eax,0x1
c0016ff1:	8d 76 00             	lea    esi,[esi+0x0]
c0016ff4:	83 c4 1c             	add    esp,0x1c
c0016ff7:	c3                   	ret    

c0016ff8 <FAT::closeDir(void*)>:
c0016ff8:	83 ec 1c             	sub    esp,0x1c
c0016ffb:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0017000:	75 0a                	jne    c001700c <FAT::closeDir(void*)+0x14>
c0017002:	b8 04 00 00 00       	mov    eax,0x4
c0017007:	eb 3f                	jmp    c0017048 <FAT::closeDir(void*)+0x50>
c0017009:	8d 76 00             	lea    esi,[esi+0x0]
c001700c:	83 ec 0c             	sub    esp,0xc
c001700f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0017013:	e8 79 d5 fe ff       	call   c0004591 <f_closedir>
c0017018:	83 c4 10             	add    esp,0x10
c001701b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001701f:	83 ec 0c             	sub    esp,0xc
c0017022:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0017026:	e8 46 0e ff ff       	call   c0007e71 <free>
c001702b:	83 c4 10             	add    esp,0x10
c001702e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017032:	85 c0                	test   eax,eax
c0017034:	75 0a                	jne    c0017040 <FAT::closeDir(void*)+0x48>
c0017036:	b8 00 00 00 00       	mov    eax,0x0
c001703b:	eb 0b                	jmp    c0017048 <FAT::closeDir(void*)+0x50>
c001703d:	8d 76 00             	lea    esi,[esi+0x0]
c0017040:	b8 01 00 00 00       	mov    eax,0x1
c0017045:	8d 76 00             	lea    esi,[esi+0x0]
c0017048:	83 c4 1c             	add    esp,0x1c
c001704b:	c3                   	ret    

c001704c <FAT::seek(void*, unsigned long long)>:
c001704c:	83 ec 2c             	sub    esp,0x2c
c001704f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0017053:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017057:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001705b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001705f:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0017064:	75 0a                	jne    c0017070 <FAT::seek(void*, unsigned long long)+0x24>
c0017066:	b8 04 00 00 00       	mov    eax,0x4
c001706b:	eb 33                	jmp    c00170a0 <FAT::seek(void*, unsigned long long)+0x54>
c001706d:	8d 76 00             	lea    esi,[esi+0x0]
c0017070:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017074:	83 ec 08             	sub    esp,0x8
c0017077:	50                   	push   eax
c0017078:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001707c:	e8 9e d2 fe ff       	call   c000431f <f_lseek>
c0017081:	83 c4 10             	add    esp,0x10
c0017084:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017088:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001708c:	85 c0                	test   eax,eax
c001708e:	75 08                	jne    c0017098 <FAT::seek(void*, unsigned long long)+0x4c>
c0017090:	b8 00 00 00 00       	mov    eax,0x0
c0017095:	eb 09                	jmp    c00170a0 <FAT::seek(void*, unsigned long long)+0x54>
c0017097:	90                   	nop
c0017098:	b8 01 00 00 00       	mov    eax,0x1
c001709d:	8d 76 00             	lea    esi,[esi+0x0]
c00170a0:	83 c4 2c             	add    esp,0x2c
c00170a3:	c3                   	ret    

c00170a4 <fatWrapperReadDisk>:
c00170a4:	53                   	push   ebx
c00170a5:	83 ec 18             	sub    esp,0x18
c00170a8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00170ac:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00170b0:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00170b4:	25 ff 00 00 00       	and    eax,0xff
c00170b9:	8b 0c 85 a0 2d 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdd260]
c00170c0:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00170c4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00170c8:	ba 00 00 00 00       	mov    edx,0x0
c00170cd:	83 ec 0c             	sub    esp,0xc
c00170d0:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00170d4:	53                   	push   ebx
c00170d5:	52                   	push   edx
c00170d6:	50                   	push   eax
c00170d7:	51                   	push   ecx
c00170d8:	e8 fb 61 ff ff       	call   c000d2d8 <LogicalDisk::read(unsigned long long, int, void*)>
c00170dd:	83 c4 20             	add    esp,0x20
c00170e0:	83 c4 18             	add    esp,0x18
c00170e3:	5b                   	pop    ebx
c00170e4:	c3                   	ret    
c00170e5:	8d 76 00             	lea    esi,[esi+0x0]

c00170e8 <fatWrapperWriteDisk>:
c00170e8:	53                   	push   ebx
c00170e9:	83 ec 18             	sub    esp,0x18
c00170ec:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00170f0:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00170f4:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00170f8:	25 ff 00 00 00       	and    eax,0xff
c00170fd:	8b 0c 85 a0 2d 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdd260]
c0017104:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0017108:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001710c:	ba 00 00 00 00       	mov    edx,0x0
c0017111:	83 ec 0c             	sub    esp,0xc
c0017114:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0017118:	53                   	push   ebx
c0017119:	52                   	push   edx
c001711a:	50                   	push   eax
c001711b:	51                   	push   ecx
c001711c:	e8 23 62 ff ff       	call   c000d344 <LogicalDisk::write(unsigned long long, int, void*)>
c0017121:	83 c4 20             	add    esp,0x20
c0017124:	83 c4 18             	add    esp,0x18
c0017127:	5b                   	pop    ebx
c0017128:	c3                   	ret    
c0017129:	8d 76 00             	lea    esi,[esi+0x0]

c001712c <fatWrapperIoctl>:
c001712c:	53                   	push   ebx
c001712d:	83 ec 28             	sub    esp,0x28
c0017130:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0017134:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017138:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001713c:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0017140:	80 7c 24 08 02       	cmp    BYTE PTR [esp+0x8],0x2
c0017145:	75 35                	jne    c001717c <fatWrapperIoctl+0x50>
c0017147:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001714b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001714f:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0017153:	25 ff 00 00 00       	and    eax,0xff
c0017158:	8b 04 85 a0 2d 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd260]
c001715f:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0017165:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001716b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001716f:	66 89 02             	mov    WORD PTR [edx],ax
c0017172:	b8 00 00 00 00       	mov    eax,0x0
c0017177:	e9 c4 00 00 00       	jmp    c0017240 <fatWrapperIoctl+0x114>
c001717c:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0017181:	75 75                	jne    c00171f8 <fatWrapperIoctl+0xcc>
c0017183:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0017187:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001718b:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001718f:	25 ff 00 00 00       	and    eax,0xff
c0017194:	8b 04 85 a0 2d 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd260]
c001719b:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c00171a1:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c00171a7:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c00171ad:	89 c8                	mov    eax,ecx
c00171af:	89 da                	mov    edx,ebx
c00171b1:	0f a4 c2 0a          	shld   edx,eax,0xa
c00171b5:	c1 e0 0a             	shl    eax,0xa
c00171b8:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c00171bc:	81 e1 ff 00 00 00    	and    ecx,0xff
c00171c2:	8b 0c 8d a0 2d 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdd260]
c00171c9:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c00171cf:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c00171d5:	89 cb                	mov    ebx,ecx
c00171d7:	c1 fb 1f             	sar    ebx,0x1f
c00171da:	53                   	push   ebx
c00171db:	51                   	push   ecx
c00171dc:	52                   	push   edx
c00171dd:	50                   	push   eax
c00171de:	e8 7d 4e 00 00       	call   c001c060 <__udivdi3>
c00171e3:	83 c4 10             	add    esp,0x10
c00171e6:	89 c2                	mov    edx,eax
c00171e8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00171ec:	89 10                	mov    DWORD PTR [eax],edx
c00171ee:	b8 00 00 00 00       	mov    eax,0x0
c00171f3:	eb 4b                	jmp    c0017240 <fatWrapperIoctl+0x114>
c00171f5:	8d 76 00             	lea    esi,[esi+0x0]
c00171f8:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c00171fd:	75 09                	jne    c0017208 <fatWrapperIoctl+0xdc>
c00171ff:	b8 00 00 00 00       	mov    eax,0x0
c0017204:	eb 3a                	jmp    c0017240 <fatWrapperIoctl+0x114>
c0017206:	66 90                	xchg   ax,ax
c0017208:	80 7c 24 08 03       	cmp    BYTE PTR [esp+0x8],0x3
c001720d:	75 19                	jne    c0017228 <fatWrapperIoctl+0xfc>
c001720f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0017213:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017217:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001721b:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0017221:	b8 00 00 00 00       	mov    eax,0x0
c0017226:	eb 18                	jmp    c0017240 <fatWrapperIoctl+0x114>
c0017228:	80 7c 24 08 04       	cmp    BYTE PTR [esp+0x8],0x4
c001722d:	75 09                	jne    c0017238 <fatWrapperIoctl+0x10c>
c001722f:	b8 00 00 00 00       	mov    eax,0x0
c0017234:	eb 0a                	jmp    c0017240 <fatWrapperIoctl+0x114>
c0017236:	66 90                	xchg   ax,ax
c0017238:	b8 04 00 00 00       	mov    eax,0x4
c001723d:	8d 76 00             	lea    esi,[esi+0x0]
c0017240:	83 c4 28             	add    esp,0x28
c0017243:	5b                   	pop    ebx
c0017244:	c3                   	ret    
c0017245:	90                   	nop
c0017246:	66 90                	xchg   ax,ax

c0017248 <FAT::FAT()>:
c0017248:	83 ec 1c             	sub    esp,0x1c
c001724b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001724f:	83 ec 0c             	sub    esp,0xc
c0017252:	50                   	push   eax
c0017253:	e8 ba 3c ff ff       	call   c000af12 <Filesystem::Filesystem()>
c0017258:	83 c4 10             	add    esp,0x10
c001725b:	ba d0 ed 01 c0       	mov    edx,0xc001edd0
c0017260:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017264:	89 10                	mov    DWORD PTR [eax],edx
c0017266:	c7 05 c0 3d 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023dc0,0x0
c0017270:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0017278:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c001727d:	7f 15                	jg     c0017294 <FAT::FAT()+0x4c>
c001727f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017283:	c7 04 85 e0 3d 02 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffdc220],0xffffffff
c001728e:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0017292:	eb e4                	jmp    c0017278 <FAT::FAT()+0x30>
c0017294:	90                   	nop
c0017295:	83 c4 1c             	add    esp,0x1c
c0017298:	c3                   	ret    
c0017299:	90                   	nop
c001729a:	66 90                	xchg   ax,ax

c001729c <FAT::fixFilepath(char*)>:
c001729c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00172a0:	8a 00                	mov    al,BYTE PTR [eax]
c00172a2:	3c 40                	cmp    al,0x40
c00172a4:	7e 2e                	jle    c00172d4 <FAT::fixFilepath(char*)+0x38>
c00172a6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00172aa:	8a 00                	mov    al,BYTE PTR [eax]
c00172ac:	83 e8 41             	sub    eax,0x41
c00172af:	88 c2                	mov    dl,al
c00172b1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00172b5:	88 10                	mov    BYTE PTR [eax],dl
c00172b7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00172bb:	8a 00                	mov    al,BYTE PTR [eax]
c00172bd:	0f be c0             	movsx  eax,al
c00172c0:	8b 04 85 e0 3d 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc220]
c00172c7:	83 c0 30             	add    eax,0x30
c00172ca:	88 c2                	mov    dl,al
c00172cc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00172d0:	88 10                	mov    BYTE PTR [eax],dl
c00172d2:	66 90                	xchg   ax,ax
c00172d4:	90                   	nop
c00172d5:	c3                   	ret    
c00172d6:	66 90                	xchg   ax,ax

c00172d8 <FAT::open(char const*, void**, FileOpenMode)>:
c00172d8:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00172de:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c00172e6:	74 0c                	je     c00172f4 <FAT::open(char const*, void**, FileOpenMode)+0x1c>
c00172e8:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c00172f0:	75 0e                	jne    c0017300 <FAT::open(char const*, void**, FileOpenMode)+0x28>
c00172f2:	66 90                	xchg   ax,ax
c00172f4:	b8 04 00 00 00       	mov    eax,0x4
c00172f9:	e9 0a 01 00 00       	jmp    c0017408 <FAT::open(char const*, void**, FileOpenMode)+0x130>
c00172fe:	66 90                	xchg   ax,ax
c0017300:	83 ec 08             	sub    esp,0x8
c0017303:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001730a:	8d 44 24 14          	lea    eax,[esp+0x14]
c001730e:	50                   	push   eax
c001730f:	e8 0c 93 fe ff       	call   c0000620 <strcpy>
c0017314:	83 c4 10             	add    esp,0x10
c0017317:	83 ec 08             	sub    esp,0x8
c001731a:	8d 44 24 10          	lea    eax,[esp+0x10]
c001731e:	50                   	push   eax
c001731f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0017326:	e8 71 ff ff ff       	call   c001729c <FAT::fixFilepath(char*)>
c001732b:	83 c4 10             	add    esp,0x10
c001732e:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c0017336:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001733d:	83 e0 01             	and    eax,0x1
c0017340:	74 0a                	je     c001734c <FAT::open(char const*, void**, FileOpenMode)+0x74>
c0017342:	80 8c 24 0f 01 00 00 01 	or     BYTE PTR [esp+0x10f],0x1
c001734a:	66 90                	xchg   ax,ax
c001734c:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0017353:	83 e0 04             	and    eax,0x4
c0017356:	74 10                	je     c0017368 <FAT::open(char const*, void**, FileOpenMode)+0x90>
c0017358:	80 8c 24 0f 01 00 00 30 	or     BYTE PTR [esp+0x10f],0x30
c0017360:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c0017368:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001736f:	83 e0 02             	and    eax,0x2
c0017372:	74 08                	je     c001737c <FAT::open(char const*, void**, FileOpenMode)+0xa4>
c0017374:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c001737c:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0017383:	83 e0 08             	and    eax,0x8
c0017386:	74 08                	je     c0017390 <FAT::open(char const*, void**, FileOpenMode)+0xb8>
c0017388:	80 8c 24 0f 01 00 00 04 	or     BYTE PTR [esp+0x10f],0x4
c0017390:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0017397:	83 e0 10             	and    eax,0x10
c001739a:	74 08                	je     c00173a4 <FAT::open(char const*, void**, FileOpenMode)+0xcc>
c001739c:	80 8c 24 0f 01 00 00 08 	or     BYTE PTR [esp+0x10f],0x8
c00173a4:	83 ec 0c             	sub    esp,0xc
c00173a7:	68 28 02 00 00       	push   0x228
c00173ac:	e8 b0 0a ff ff       	call   c0007e61 <malloc>
c00173b1:	83 c4 10             	add    esp,0x10
c00173b4:	89 c2                	mov    edx,eax
c00173b6:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c00173bd:	89 10                	mov    DWORD PTR [eax],edx
c00173bf:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c00173c6:	31 d2                	xor    edx,edx
c00173c8:	88 c2                	mov    dl,al
c00173ca:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c00173d1:	8b 00                	mov    eax,DWORD PTR [eax]
c00173d3:	83 ec 04             	sub    esp,0x4
c00173d6:	52                   	push   edx
c00173d7:	8d 54 24 10          	lea    edx,[esp+0x10]
c00173db:	52                   	push   edx
c00173dc:	50                   	push   eax
c00173dd:	e8 5b c7 fe ff       	call   c0003b3d <f_open>
c00173e2:	83 c4 10             	add    esp,0x10
c00173e5:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c00173ec:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c00173f4:	74 0a                	je     c0017400 <FAT::open(char const*, void**, FileOpenMode)+0x128>
c00173f6:	b8 01 00 00 00       	mov    eax,0x1
c00173fb:	eb 0b                	jmp    c0017408 <FAT::open(char const*, void**, FileOpenMode)+0x130>
c00173fd:	8d 76 00             	lea    esi,[esi+0x0]
c0017400:	b8 00 00 00 00       	mov    eax,0x0
c0017405:	8d 76 00             	lea    esi,[esi+0x0]
c0017408:	81 c4 1c 01 00 00    	add    esp,0x11c
c001740e:	c3                   	ret    
c001740f:	90                   	nop

c0017410 <FAT::openDir(char const*, void**)>:
c0017410:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0017416:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001741e:	74 0c                	je     c001742c <FAT::openDir(char const*, void**)+0x1c>
c0017420:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0017428:	75 0e                	jne    c0017438 <FAT::openDir(char const*, void**)+0x28>
c001742a:	66 90                	xchg   ax,ax
c001742c:	b8 04 00 00 00       	mov    eax,0x4
c0017431:	e9 82 00 00 00       	jmp    c00174b8 <FAT::openDir(char const*, void**)+0xa8>
c0017436:	66 90                	xchg   ax,ax
c0017438:	83 ec 08             	sub    esp,0x8
c001743b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0017442:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017446:	50                   	push   eax
c0017447:	e8 d4 91 fe ff       	call   c0000620 <strcpy>
c001744c:	83 c4 10             	add    esp,0x10
c001744f:	83 ec 08             	sub    esp,0x8
c0017452:	8d 44 24 14          	lea    eax,[esp+0x14]
c0017456:	50                   	push   eax
c0017457:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001745e:	e8 39 fe ff ff       	call   c001729c <FAT::fixFilepath(char*)>
c0017463:	83 c4 10             	add    esp,0x10
c0017466:	83 ec 0c             	sub    esp,0xc
c0017469:	6a 30                	push   0x30
c001746b:	e8 f1 09 ff ff       	call   c0007e61 <malloc>
c0017470:	83 c4 10             	add    esp,0x10
c0017473:	89 c2                	mov    edx,eax
c0017475:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001747c:	89 10                	mov    DWORD PTR [eax],edx
c001747e:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0017485:	8b 00                	mov    eax,DWORD PTR [eax]
c0017487:	83 ec 08             	sub    esp,0x8
c001748a:	8d 54 24 14          	lea    edx,[esp+0x14]
c001748e:	52                   	push   edx
c001748f:	50                   	push   eax
c0017490:	e8 31 d0 fe ff       	call   c00044c6 <f_opendir>
c0017495:	83 c4 10             	add    esp,0x10
c0017498:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001749f:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c00174a7:	74 07                	je     c00174b0 <FAT::openDir(char const*, void**)+0xa0>
c00174a9:	b8 01 00 00 00       	mov    eax,0x1
c00174ae:	eb 08                	jmp    c00174b8 <FAT::openDir(char const*, void**)+0xa8>
c00174b0:	b8 00 00 00 00       	mov    eax,0x0
c00174b5:	8d 76 00             	lea    esi,[esi+0x0]
c00174b8:	81 c4 1c 01 00 00    	add    esp,0x11c
c00174be:	c3                   	ret    
c00174bf:	90                   	nop

c00174c0 <FAT::stat(char const*, unsigned long long*, bool*)>:
c00174c0:	81 ec 2c 02 00 00    	sub    esp,0x22c
c00174c6:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c00174ce:	75 0c                	jne    c00174dc <FAT::stat(char const*, unsigned long long*, bool*)+0x1c>
c00174d0:	b8 04 00 00 00       	mov    eax,0x4
c00174d5:	e9 d6 00 00 00       	jmp    c00175b0 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c00174da:	66 90                	xchg   ax,ax
c00174dc:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c00174e4:	75 0a                	jne    c00174f0 <FAT::stat(char const*, unsigned long long*, bool*)+0x30>
c00174e6:	b8 04 00 00 00       	mov    eax,0x4
c00174eb:	e9 c0 00 00 00       	jmp    c00175b0 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c00174f0:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c00174f8:	75 0a                	jne    c0017504 <FAT::stat(char const*, unsigned long long*, bool*)+0x44>
c00174fa:	b8 04 00 00 00       	mov    eax,0x4
c00174ff:	e9 ac 00 00 00       	jmp    c00175b0 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0017504:	83 ec 08             	sub    esp,0x8
c0017507:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001750e:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0017515:	50                   	push   eax
c0017516:	e8 05 91 fe ff       	call   c0000620 <strcpy>
c001751b:	83 c4 10             	add    esp,0x10
c001751e:	83 ec 08             	sub    esp,0x8
c0017521:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c0017528:	50                   	push   eax
c0017529:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0017530:	e8 67 fd ff ff       	call   c001729c <FAT::fixFilepath(char*)>
c0017535:	83 c4 10             	add    esp,0x10
c0017538:	83 ec 08             	sub    esp,0x8
c001753b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001753f:	50                   	push   eax
c0017540:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0017547:	50                   	push   eax
c0017548:	e8 f8 d0 fe ff       	call   c0004645 <f_stat>
c001754d:	83 c4 10             	add    esp,0x10
c0017550:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0017557:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001755e:	85 c0                	test   eax,eax
c0017560:	74 0a                	je     c001756c <FAT::stat(char const*, unsigned long long*, bool*)+0xac>
c0017562:	83 f8 04             	cmp    eax,0x4
c0017565:	74 39                	je     c00175a0 <FAT::stat(char const*, unsigned long long*, bool*)+0xe0>
c0017567:	eb 3f                	jmp    c00175a8 <FAT::stat(char const*, unsigned long long*, bool*)+0xe8>
c0017569:	8d 76 00             	lea    esi,[esi+0x0]
c001756c:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0017570:	25 ff 00 00 00       	and    eax,0xff
c0017575:	83 e0 10             	and    eax,0x10
c0017578:	0f 95 c2             	setne  dl
c001757b:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c0017582:	88 10                	mov    BYTE PTR [eax],dl
c0017584:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017588:	ba 00 00 00 00       	mov    edx,0x0
c001758d:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c0017594:	89 01                	mov    DWORD PTR [ecx],eax
c0017596:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0017599:	b8 00 00 00 00       	mov    eax,0x0
c001759e:	eb 10                	jmp    c00175b0 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c00175a0:	b8 02 00 00 00       	mov    eax,0x2
c00175a5:	eb 09                	jmp    c00175b0 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c00175a7:	90                   	nop
c00175a8:	b8 01 00 00 00       	mov    eax,0x1
c00175ad:	8d 76 00             	lea    esi,[esi+0x0]
c00175b0:	81 c4 2c 02 00 00    	add    esp,0x22c
c00175b6:	c3                   	ret    
c00175b7:	90                   	nop

c00175b8 <FAT::unlink(char const*)>:
c00175b8:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00175be:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c00175c6:	75 08                	jne    c00175d0 <FAT::unlink(char const*)+0x18>
c00175c8:	b8 04 00 00 00       	mov    eax,0x4
c00175cd:	eb 61                	jmp    c0017630 <FAT::unlink(char const*)+0x78>
c00175cf:	90                   	nop
c00175d0:	83 ec 08             	sub    esp,0x8
c00175d3:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00175da:	8d 44 24 18          	lea    eax,[esp+0x18]
c00175de:	50                   	push   eax
c00175df:	e8 3c 90 fe ff       	call   c0000620 <strcpy>
c00175e4:	83 c4 10             	add    esp,0x10
c00175e7:	83 ec 08             	sub    esp,0x8
c00175ea:	8d 44 24 14          	lea    eax,[esp+0x14]
c00175ee:	50                   	push   eax
c00175ef:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00175f6:	e8 a1 fc ff ff       	call   c001729c <FAT::fixFilepath(char*)>
c00175fb:	83 c4 10             	add    esp,0x10
c00175fe:	83 ec 0c             	sub    esp,0xc
c0017601:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017605:	50                   	push   eax
c0017606:	e8 9f d2 fe ff       	call   c00048aa <f_unlink>
c001760b:	83 c4 10             	add    esp,0x10
c001760e:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0017615:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001761c:	85 c0                	test   eax,eax
c001761e:	75 08                	jne    c0017628 <FAT::unlink(char const*)+0x70>
c0017620:	b8 00 00 00 00       	mov    eax,0x0
c0017625:	eb 09                	jmp    c0017630 <FAT::unlink(char const*)+0x78>
c0017627:	90                   	nop
c0017628:	b8 01 00 00 00       	mov    eax,0x1
c001762d:	8d 76 00             	lea    esi,[esi+0x0]
c0017630:	81 c4 1c 01 00 00    	add    esp,0x11c
c0017636:	c3                   	ret    
c0017637:	90                   	nop

c0017638 <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c0017638:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001763e:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c0017645:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c001764c:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0017650:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0017654:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c001765c:	75 0a                	jne    c0017668 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c001765e:	b8 04 00 00 00       	mov    eax,0x4
c0017663:	e9 54 01 00 00       	jmp    c00177bc <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x184>
c0017668:	83 ec 08             	sub    esp,0x8
c001766b:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0017672:	8d 44 24 24          	lea    eax,[esp+0x24]
c0017676:	50                   	push   eax
c0017677:	e8 a4 8f fe ff       	call   c0000620 <strcpy>
c001767c:	83 c4 10             	add    esp,0x10
c001767f:	83 ec 08             	sub    esp,0x8
c0017682:	8d 44 24 20          	lea    eax,[esp+0x20]
c0017686:	50                   	push   eax
c0017687:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001768e:	e8 09 fc ff ff       	call   c001729c <FAT::fixFilepath(char*)>
c0017693:	83 c4 10             	add    esp,0x10
c0017696:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c001769e:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c00176a6:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c00176aa:	25 ff 00 00 00       	and    eax,0xff
c00176af:	83 e0 01             	and    eax,0x1
c00176b2:	74 08                	je     c00176bc <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x84>
c00176b4:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c00176bc:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c00176c0:	25 ff 00 00 00       	and    eax,0xff
c00176c5:	83 e0 02             	and    eax,0x2
c00176c8:	74 0a                	je     c00176d4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x9c>
c00176ca:	80 8c 24 1f 01 00 00 20 	or     BYTE PTR [esp+0x11f],0x20
c00176d2:	66 90                	xchg   ax,ax
c00176d4:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c00176d8:	25 ff 00 00 00       	and    eax,0xff
c00176dd:	83 e0 04             	and    eax,0x4
c00176e0:	74 0a                	je     c00176ec <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xb4>
c00176e2:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c00176ea:	66 90                	xchg   ax,ax
c00176ec:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c00176f0:	25 ff 00 00 00       	and    eax,0xff
c00176f5:	83 e0 08             	and    eax,0x8
c00176f8:	74 0a                	je     c0017704 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xcc>
c00176fa:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c0017702:	66 90                	xchg   ax,ax
c0017704:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0017708:	25 ff 00 00 00       	and    eax,0xff
c001770d:	83 e0 01             	and    eax,0x1
c0017710:	74 0a                	je     c001771c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xe4>
c0017712:	80 8c 24 1e 01 00 00 01 	or     BYTE PTR [esp+0x11e],0x1
c001771a:	66 90                	xchg   ax,ax
c001771c:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0017720:	25 ff 00 00 00       	and    eax,0xff
c0017725:	83 e0 02             	and    eax,0x2
c0017728:	74 0a                	je     c0017734 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfc>
c001772a:	80 8c 24 1e 01 00 00 20 	or     BYTE PTR [esp+0x11e],0x20
c0017732:	66 90                	xchg   ax,ax
c0017734:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0017738:	25 ff 00 00 00       	and    eax,0xff
c001773d:	83 e0 04             	and    eax,0x4
c0017740:	74 0a                	je     c001774c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x114>
c0017742:	80 8c 24 1e 01 00 00 04 	or     BYTE PTR [esp+0x11e],0x4
c001774a:	66 90                	xchg   ax,ax
c001774c:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0017750:	25 ff 00 00 00       	and    eax,0xff
c0017755:	83 e0 08             	and    eax,0x8
c0017758:	74 0a                	je     c0017764 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x12c>
c001775a:	80 8c 24 1e 01 00 00 02 	or     BYTE PTR [esp+0x11e],0x2
c0017762:	66 90                	xchg   ax,ax
c0017764:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001776b:	08 84 24 1e 01 00 00 	or     BYTE PTR [esp+0x11e],al
c0017772:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c0017779:	31 d2                	xor    edx,edx
c001777b:	88 c2                	mov    dl,al
c001777d:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0017784:	25 ff 00 00 00       	and    eax,0xff
c0017789:	83 ec 04             	sub    esp,0x4
c001778c:	52                   	push   edx
c001778d:	50                   	push   eax
c001778e:	8d 44 24 24          	lea    eax,[esp+0x24]
c0017792:	50                   	push   eax
c0017793:	e8 85 d5 fe ff       	call   c0004d1d <f_chmod>
c0017798:	83 c4 10             	add    esp,0x10
c001779b:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c00177a2:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c00177a9:	85 c0                	test   eax,eax
c00177ab:	75 07                	jne    c00177b4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x17c>
c00177ad:	b8 00 00 00 00       	mov    eax,0x0
c00177b2:	eb 08                	jmp    c00177bc <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x184>
c00177b4:	b8 01 00 00 00       	mov    eax,0x1
c00177b9:	8d 76 00             	lea    esi,[esi+0x0]
c00177bc:	81 c4 2c 01 00 00    	add    esp,0x12c
c00177c2:	c3                   	ret    
c00177c3:	90                   	nop

c00177c4 <FAT::rename(char const*, char const*)>:
c00177c4:	81 ec 1c 02 00 00    	sub    esp,0x21c
c00177ca:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c00177d2:	74 0c                	je     c00177e0 <FAT::rename(char const*, char const*)+0x1c>
c00177d4:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c00177dc:	75 0e                	jne    c00177ec <FAT::rename(char const*, char const*)+0x28>
c00177de:	66 90                	xchg   ax,ax
c00177e0:	b8 04 00 00 00       	mov    eax,0x4
c00177e5:	e9 9e 00 00 00       	jmp    c0017888 <FAT::rename(char const*, char const*)+0xc4>
c00177ea:	66 90                	xchg   ax,ax
c00177ec:	83 ec 08             	sub    esp,0x8
c00177ef:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c00177f6:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c00177fd:	50                   	push   eax
c00177fe:	e8 1d 8e fe ff       	call   c0000620 <strcpy>
c0017803:	83 c4 10             	add    esp,0x10
c0017806:	83 ec 08             	sub    esp,0x8
c0017809:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c0017810:	50                   	push   eax
c0017811:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0017818:	e8 7f fa ff ff       	call   c001729c <FAT::fixFilepath(char*)>
c001781d:	83 c4 10             	add    esp,0x10
c0017820:	83 ec 08             	sub    esp,0x8
c0017823:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c001782a:	8d 44 24 18          	lea    eax,[esp+0x18]
c001782e:	50                   	push   eax
c001782f:	e8 ec 8d fe ff       	call   c0000620 <strcpy>
c0017834:	83 c4 10             	add    esp,0x10
c0017837:	83 ec 08             	sub    esp,0x8
c001783a:	8d 44 24 14          	lea    eax,[esp+0x14]
c001783e:	50                   	push   eax
c001783f:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0017846:	e8 51 fa ff ff       	call   c001729c <FAT::fixFilepath(char*)>
c001784b:	83 c4 10             	add    esp,0x10
c001784e:	83 ec 08             	sub    esp,0x8
c0017851:	8d 44 24 14          	lea    eax,[esp+0x14]
c0017855:	50                   	push   eax
c0017856:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001785d:	50                   	push   eax
c001785e:	e8 04 d3 fe ff       	call   c0004b67 <f_rename>
c0017863:	83 c4 10             	add    esp,0x10
c0017866:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c001786d:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c0017874:	85 c0                	test   eax,eax
c0017876:	75 08                	jne    c0017880 <FAT::rename(char const*, char const*)+0xbc>
c0017878:	b8 00 00 00 00       	mov    eax,0x0
c001787d:	eb 09                	jmp    c0017888 <FAT::rename(char const*, char const*)+0xc4>
c001787f:	90                   	nop
c0017880:	b8 01 00 00 00       	mov    eax,0x1
c0017885:	8d 76 00             	lea    esi,[esi+0x0]
c0017888:	81 c4 1c 02 00 00    	add    esp,0x21c
c001788e:	c3                   	ret    
c001788f:	90                   	nop

c0017890 <FAT::mkdir(char const*)>:
c0017890:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0017896:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001789e:	75 08                	jne    c00178a8 <FAT::mkdir(char const*)+0x18>
c00178a0:	b8 04 00 00 00       	mov    eax,0x4
c00178a5:	eb 61                	jmp    c0017908 <FAT::mkdir(char const*)+0x78>
c00178a7:	90                   	nop
c00178a8:	83 ec 08             	sub    esp,0x8
c00178ab:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00178b2:	8d 44 24 18          	lea    eax,[esp+0x18]
c00178b6:	50                   	push   eax
c00178b7:	e8 64 8d fe ff       	call   c0000620 <strcpy>
c00178bc:	83 c4 10             	add    esp,0x10
c00178bf:	83 ec 08             	sub    esp,0x8
c00178c2:	8d 44 24 14          	lea    eax,[esp+0x14]
c00178c6:	50                   	push   eax
c00178c7:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00178ce:	e8 c9 f9 ff ff       	call   c001729c <FAT::fixFilepath(char*)>
c00178d3:	83 c4 10             	add    esp,0x10
c00178d6:	83 ec 0c             	sub    esp,0xc
c00178d9:	8d 44 24 18          	lea    eax,[esp+0x18]
c00178dd:	50                   	push   eax
c00178de:	e8 e9 d0 fe ff       	call   c00049cc <f_mkdir>
c00178e3:	83 c4 10             	add    esp,0x10
c00178e6:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c00178ed:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c00178f4:	85 c0                	test   eax,eax
c00178f6:	75 08                	jne    c0017900 <FAT::mkdir(char const*)+0x70>
c00178f8:	b8 00 00 00 00       	mov    eax,0x0
c00178fd:	eb 09                	jmp    c0017908 <FAT::mkdir(char const*)+0x78>
c00178ff:	90                   	nop
c0017900:	b8 01 00 00 00       	mov    eax,0x1
c0017905:	8d 76 00             	lea    esi,[esi+0x0]
c0017908:	81 c4 1c 01 00 00    	add    esp,0x11c
c001790e:	c3                   	ret    
c001790f:	90                   	nop

c0017910 <FAT::exists(char const*)>:
c0017910:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0017916:	83 ec 08             	sub    esp,0x8
c0017919:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0017920:	8d 44 24 10          	lea    eax,[esp+0x10]
c0017924:	50                   	push   eax
c0017925:	e8 f6 8c fe ff       	call   c0000620 <strcpy>
c001792a:	83 c4 10             	add    esp,0x10
c001792d:	83 ec 08             	sub    esp,0x8
c0017930:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0017934:	50                   	push   eax
c0017935:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001793c:	e8 5b f9 ff ff       	call   c001729c <FAT::fixFilepath(char*)>
c0017941:	83 c4 10             	add    esp,0x10
c0017944:	83 ec 08             	sub    esp,0x8
c0017947:	8d 84 24 0c 01 00 00 	lea    eax,[esp+0x10c]
c001794e:	50                   	push   eax
c001794f:	8d 44 24 10          	lea    eax,[esp+0x10]
c0017953:	50                   	push   eax
c0017954:	e8 ec cc fe ff       	call   c0004645 <f_stat>
c0017959:	83 c4 10             	add    esp,0x10
c001795c:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0017963:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001796a:	85 c0                	test   eax,eax
c001796c:	75 06                	jne    c0017974 <FAT::exists(char const*)+0x64>
c001796e:	b0 01                	mov    al,0x1
c0017970:	eb 06                	jmp    c0017978 <FAT::exists(char const*)+0x68>
c0017972:	66 90                	xchg   ax,ax
c0017974:	b0 00                	mov    al,0x0
c0017976:	66 90                	xchg   ax,ax
c0017978:	81 c4 2c 02 00 00    	add    esp,0x22c
c001797e:	c3                   	ret    
c001797f:	90                   	nop

c0017980 <isoReadDiscSectorHelper>:
c0017980:	83 ec 2c             	sub    esp,0x2c
c0017983:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017987:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001798b:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c0017990:	83 e8 41             	sub    eax,0x41
c0017993:	8b 0c 85 a0 2d 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdd260]
c001799a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001799e:	ba 00 00 00 00       	mov    edx,0x0
c00179a3:	83 ec 0c             	sub    esp,0xc
c00179a6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00179aa:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00179ae:	52                   	push   edx
c00179af:	50                   	push   eax
c00179b0:	51                   	push   ecx
c00179b1:	e8 22 59 ff ff       	call   c000d2d8 <LogicalDisk::read(unsigned long long, int, void*)>
c00179b6:	83 c4 20             	add    esp,0x20
c00179b9:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00179bd:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00179c2:	74 0c                	je     c00179d0 <isoReadDiscSectorHelper+0x50>
c00179c4:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00179c8:	c1 e0 0b             	shl    eax,0xb
c00179cb:	eb 0b                	jmp    c00179d8 <isoReadDiscSectorHelper+0x58>
c00179cd:	8d 76 00             	lea    esi,[esi+0x0]
c00179d0:	b8 00 00 00 00       	mov    eax,0x0
c00179d5:	8d 76 00             	lea    esi,[esi+0x0]
c00179d8:	83 c4 2c             	add    esp,0x2c
c00179db:	c3                   	ret    

c00179dc <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c00179dc:	b8 08 00 00 00       	mov    eax,0x8
c00179e1:	c3                   	ret    

c00179e2 <ISO9660::getName()>:
c00179e2:	b8 30 ee 01 c0       	mov    eax,0xc001ee30
c00179e7:	c3                   	ret    

c00179e8 <ISO9660::closeDir(void*)>:
c00179e8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00179ec:	8b 00                	mov    eax,DWORD PTR [eax]
c00179ee:	ff 60 1c             	jmp    DWORD PTR [eax+0x1c]
c00179f1:	90                   	nop

c00179f2 <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c00179f2:	b8 01 00 00 00       	mov    eax,0x1
c00179f7:	c3                   	ret    

c00179f8 <ISO9660::unlink(char const*)>:
c00179f8:	b8 01 00 00 00       	mov    eax,0x1
c00179fd:	c3                   	ret    

c00179fe <ISO9660::write(void*, unsigned long, void*, int*)>:
c00179fe:	b8 03 00 00 00       	mov    eax,0x3
c0017a03:	c3                   	ret    

c0017a04 <ISO9660::rename(char const*, char const*)>:
c0017a04:	b8 01 00 00 00       	mov    eax,0x1
c0017a09:	c3                   	ret    

c0017a0a <ISO9660::mkdir(char const*)>:
c0017a0a:	b8 01 00 00 00       	mov    eax,0x1
c0017a0f:	c3                   	ret    

c0017a10 <ISO9660::~ISO9660()>:
c0017a10:	83 ec 0c             	sub    esp,0xc
c0017a13:	ba fc ee 01 c0       	mov    edx,0xc001eefc
c0017a18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017a1c:	89 10                	mov    DWORD PTR [eax],edx
c0017a1e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017a22:	83 ec 0c             	sub    esp,0xc
c0017a25:	50                   	push   eax
c0017a26:	e8 0b 35 ff ff       	call   c000af36 <Filesystem::~Filesystem()>
c0017a2b:	83 c4 10             	add    esp,0x10
c0017a2e:	90                   	nop
c0017a2f:	83 c4 0c             	add    esp,0xc
c0017a32:	c3                   	ret    
c0017a33:	90                   	nop

c0017a34 <ISO9660::~ISO9660()>:
c0017a34:	83 ec 0c             	sub    esp,0xc
c0017a37:	83 ec 0c             	sub    esp,0xc
c0017a3a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017a3e:	e8 cd ff ff ff       	call   c0017a10 <ISO9660::~ISO9660()>
c0017a43:	83 c4 10             	add    esp,0x10
c0017a46:	83 ec 08             	sub    esp,0x8
c0017a49:	6a 08                	push   0x8
c0017a4b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017a4f:	e8 a6 30 ff ff       	call   c000aafa <operator delete(void*, unsigned long)>
c0017a54:	83 c4 10             	add    esp,0x10
c0017a57:	83 c4 0c             	add    esp,0xc
c0017a5a:	c3                   	ret    
c0017a5b:	90                   	nop

c0017a5c <ISO9660::exists(char const*)>:
c0017a5c:	83 ec 18             	sub    esp,0x18
c0017a5f:	68 4b ee 01 c0       	push   0xc001ee4b
c0017a64:	e8 ad dd ff ff       	call   c0015816 <HalPanic(char const*)>
c0017a69:	31 c0                	xor    eax,eax
c0017a6b:	83 c4 1c             	add    esp,0x1c
c0017a6e:	c3                   	ret    
c0017a6f:	90                   	nop

c0017a70 <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c0017a70:	53                   	push   ebx
c0017a71:	83 ec 08             	sub    esp,0x8
c0017a74:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017a78:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017a7c:	85 c0                	test   eax,eax
c0017a7e:	0f 94 c3             	sete   bl
c0017a81:	85 d2                	test   edx,edx
c0017a83:	0f 94 c1             	sete   cl
c0017a86:	08 cb                	or     bl,cl
c0017a88:	75 2e                	jne    c0017ab8 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x48>
c0017a8a:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0017a8f:	74 27                	je     c0017ab8 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x48>
c0017a91:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0017a94:	83 ec 0c             	sub    esp,0xc
c0017a97:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0017a9d:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0017aa4:	68 69 ee 01 c0       	push   0xc001ee69
c0017aa9:	e8 68 dd ff ff       	call   c0015816 <HalPanic(char const*)>
c0017aae:	83 c4 10             	add    esp,0x10
c0017ab1:	b8 01 00 00 00       	mov    eax,0x1
c0017ab6:	eb 05                	jmp    c0017abd <ISO9660::stat(char const*, unsigned long long*, bool*)+0x4d>
c0017ab8:	b8 04 00 00 00       	mov    eax,0x4
c0017abd:	83 c4 08             	add    esp,0x8
c0017ac0:	5b                   	pop    ebx
c0017ac1:	c3                   	ret    

c0017ac2 <ISO9660::openDir(char const*, void**)>:
c0017ac2:	83 ec 0c             	sub    esp,0xc
c0017ac5:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0017aca:	74 1b                	je     c0017ae7 <ISO9660::openDir(char const*, void**)+0x25>
c0017acc:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0017ad1:	74 14                	je     c0017ae7 <ISO9660::openDir(char const*, void**)+0x25>
c0017ad3:	83 ec 0c             	sub    esp,0xc
c0017ad6:	68 89 ee 01 c0       	push   0xc001ee89
c0017adb:	e8 36 dd ff ff       	call   c0015816 <HalPanic(char const*)>
c0017ae0:	83 c4 10             	add    esp,0x10
c0017ae3:	31 c0                	xor    eax,eax
c0017ae5:	eb 05                	jmp    c0017aec <ISO9660::openDir(char const*, void**)+0x2a>
c0017ae7:	b8 04 00 00 00       	mov    eax,0x4
c0017aec:	83 c4 0c             	add    esp,0xc
c0017aef:	c3                   	ret    

c0017af0 <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c0017af0:	83 ec 0c             	sub    esp,0xc
c0017af3:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c0017af8:	74 1b                	je     c0017b15 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x25>
c0017afa:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0017aff:	74 14                	je     c0017b15 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x25>
c0017b01:	83 ec 0c             	sub    esp,0xc
c0017b04:	68 a8 ee 01 c0       	push   0xc001eea8
c0017b09:	e8 08 dd ff ff       	call   c0015816 <HalPanic(char const*)>
c0017b0e:	83 c4 10             	add    esp,0x10
c0017b11:	31 c0                	xor    eax,eax
c0017b13:	eb 05                	jmp    c0017b1a <ISO9660::readDir(void*, unsigned long, void*, int*)+0x2a>
c0017b15:	b8 04 00 00 00       	mov    eax,0x4
c0017b1a:	83 c4 0c             	add    esp,0xc
c0017b1d:	c3                   	ret    

c0017b1e <ISO9660::open(char const*, void**, FileOpenMode)>:
c0017b1e:	56                   	push   esi
c0017b1f:	53                   	push   ebx
c0017b20:	51                   	push   ecx
c0017b21:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0017b25:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0017b29:	85 db                	test   ebx,ebx
c0017b2b:	0f 84 80 00 00 00    	je     c0017bb1 <ISO9660::open(char const*, void**, FileOpenMode)+0x93>
c0017b31:	85 f6                	test   esi,esi
c0017b33:	74 7c                	je     c0017bb1 <ISO9660::open(char const*, void**, FileOpenMode)+0x93>
c0017b35:	ba 03 00 00 00       	mov    edx,0x3
c0017b3a:	83 7c 24 1c 01       	cmp    DWORD PTR [esp+0x1c],0x1
c0017b3f:	75 75                	jne    c0017bb6 <ISO9660::open(char const*, void**, FileOpenMode)+0x98>
c0017b41:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0017b44:	3a 05 c0 3e 02 c0    	cmp    al,BYTE PTR ds:0xc0023ec0
c0017b4a:	74 43                	je     c0017b8f <ISO9660::open(char const*, void**, FileOpenMode)+0x71>
c0017b4c:	83 ec 0c             	sub    esp,0xc
c0017b4f:	50                   	push   eax
c0017b50:	e8 3f f1 fe ff       	call   c0006c94 <init_percd>
c0017b55:	83 c4 10             	add    esp,0x10
c0017b58:	ba 0b 00 00 00       	mov    edx,0xb
c0017b5d:	40                   	inc    eax
c0017b5e:	74 56                	je     c0017bb6 <ISO9660::open(char const*, void**, FileOpenMode)+0x98>
c0017b60:	83 ec 0c             	sub    esp,0xc
c0017b63:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0017b66:	50                   	push   eax
c0017b67:	e8 38 f2 fe ff       	call   c0006da4 <fs_iso9660_init>
c0017b6c:	83 c4 10             	add    esp,0x10
c0017b6f:	80 3d c0 3e 02 c0 00 	cmp    BYTE PTR ds:0xc0023ec0,0x0
c0017b76:	74 10                	je     c0017b88 <ISO9660::open(char const*, void**, FileOpenMode)+0x6a>
c0017b78:	83 ec 0c             	sub    esp,0xc
c0017b7b:	68 c7 ee 01 c0       	push   0xc001eec7
c0017b80:	e8 91 dc ff ff       	call   c0015816 <HalPanic(char const*)>
c0017b85:	83 c4 10             	add    esp,0x10
c0017b88:	8a 03                	mov    al,BYTE PTR [ebx]
c0017b8a:	a2 c0 3e 02 c0       	mov    ds:0xc0023ec0,al
c0017b8f:	83 ec 0c             	sub    esp,0xc
c0017b92:	83 c3 03             	add    ebx,0x3
c0017b95:	53                   	push   ebx
c0017b96:	e8 63 e9 fe ff       	call   c00064fe <iso_open>
c0017b9b:	83 c4 10             	add    esp,0x10
c0017b9e:	ba 01 00 00 00       	mov    edx,0x1
c0017ba3:	83 f8 ff             	cmp    eax,0xffffffff
c0017ba6:	74 0e                	je     c0017bb6 <ISO9660::open(char const*, void**, FileOpenMode)+0x98>
c0017ba8:	83 c0 64             	add    eax,0x64
c0017bab:	31 d2                	xor    edx,edx
c0017bad:	89 06                	mov    DWORD PTR [esi],eax
c0017baf:	eb 05                	jmp    c0017bb6 <ISO9660::open(char const*, void**, FileOpenMode)+0x98>
c0017bb1:	ba 04 00 00 00       	mov    edx,0x4
c0017bb6:	89 d0                	mov    eax,edx
c0017bb8:	5a                   	pop    edx
c0017bb9:	5b                   	pop    ebx
c0017bba:	5e                   	pop    esi
c0017bbb:	c3                   	ret    

c0017bbc <ISO9660::read(void*, unsigned long, void*, int*)>:
c0017bbc:	53                   	push   ebx
c0017bbd:	83 ec 08             	sub    esp,0x8
c0017bc0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017bc4:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0017bc8:	85 c0                	test   eax,eax
c0017bca:	74 25                	je     c0017bf1 <ISO9660::read(void*, unsigned long, void*, int*)+0x35>
c0017bcc:	85 db                	test   ebx,ebx
c0017bce:	74 21                	je     c0017bf1 <ISO9660::read(void*, unsigned long, void*, int*)+0x35>
c0017bd0:	83 e8 64             	sub    eax,0x64
c0017bd3:	52                   	push   edx
c0017bd4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017bd8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0017bdc:	50                   	push   eax
c0017bdd:	e8 07 ea fe ff       	call   c00065e9 <iso_read>
c0017be2:	83 c4 10             	add    esp,0x10
c0017be5:	89 03                	mov    DWORD PTR [ebx],eax
c0017be7:	09 d0                	or     eax,edx
c0017be9:	0f 94 c0             	sete   al
c0017bec:	0f b6 c0             	movzx  eax,al
c0017bef:	eb 05                	jmp    c0017bf6 <ISO9660::read(void*, unsigned long, void*, int*)+0x3a>
c0017bf1:	b8 04 00 00 00       	mov    eax,0x4
c0017bf6:	83 c4 08             	add    esp,0x8
c0017bf9:	5b                   	pop    ebx
c0017bfa:	c3                   	ret    
c0017bfb:	90                   	nop

c0017bfc <ISO9660::seek(void*, unsigned long long)>:
c0017bfc:	57                   	push   edi
c0017bfd:	56                   	push   esi
c0017bfe:	b8 04 00 00 00       	mov    eax,0x4
c0017c03:	51                   	push   ecx
c0017c04:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0017c08:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0017c0c:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0017c10:	85 d2                	test   edx,edx
c0017c12:	74 1c                	je     c0017c30 <ISO9660::seek(void*, unsigned long long)+0x34>
c0017c14:	6a 00                	push   0x0
c0017c16:	83 ea 64             	sub    edx,0x64
c0017c19:	57                   	push   edi
c0017c1a:	56                   	push   esi
c0017c1b:	52                   	push   edx
c0017c1c:	e8 c6 eb fe ff       	call   c00067e7 <iso_seek>
c0017c21:	83 c4 10             	add    esp,0x10
c0017c24:	31 f0                	xor    eax,esi
c0017c26:	31 fa                	xor    edx,edi
c0017c28:	09 d0                	or     eax,edx
c0017c2a:	0f 95 c0             	setne  al
c0017c2d:	0f b6 c0             	movzx  eax,al
c0017c30:	5a                   	pop    edx
c0017c31:	5e                   	pop    esi
c0017c32:	5f                   	pop    edi
c0017c33:	c3                   	ret    

c0017c34 <ISO9660::tell(void*, unsigned long long*)>:
c0017c34:	53                   	push   ebx
c0017c35:	83 ec 08             	sub    esp,0x8
c0017c38:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017c3c:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0017c40:	85 c0                	test   eax,eax
c0017c42:	74 1c                	je     c0017c60 <ISO9660::tell(void*, unsigned long long*)+0x2c>
c0017c44:	85 db                	test   ebx,ebx
c0017c46:	74 18                	je     c0017c60 <ISO9660::tell(void*, unsigned long long*)+0x2c>
c0017c48:	83 ec 0c             	sub    esp,0xc
c0017c4b:	83 e8 64             	sub    eax,0x64
c0017c4e:	50                   	push   eax
c0017c4f:	e8 71 ec fe ff       	call   c00068c5 <iso_tell>
c0017c54:	83 c4 10             	add    esp,0x10
c0017c57:	89 03                	mov    DWORD PTR [ebx],eax
c0017c59:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0017c5c:	31 c0                	xor    eax,eax
c0017c5e:	eb 05                	jmp    c0017c65 <ISO9660::tell(void*, unsigned long long*)+0x31>
c0017c60:	b8 04 00 00 00       	mov    eax,0x4
c0017c65:	83 c4 08             	add    esp,0x8
c0017c68:	5b                   	pop    ebx
c0017c69:	c3                   	ret    

c0017c6a <ISO9660::stat(void*, unsigned long long*)>:
c0017c6a:	53                   	push   ebx
c0017c6b:	83 ec 08             	sub    esp,0x8
c0017c6e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017c72:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0017c76:	85 c0                	test   eax,eax
c0017c78:	74 20                	je     c0017c9a <ISO9660::stat(void*, unsigned long long*)+0x30>
c0017c7a:	85 db                	test   ebx,ebx
c0017c7c:	74 1c                	je     c0017c9a <ISO9660::stat(void*, unsigned long long*)+0x30>
c0017c7e:	83 ec 0c             	sub    esp,0xc
c0017c81:	83 e8 64             	sub    eax,0x64
c0017c84:	50                   	push   eax
c0017c85:	e8 98 ec fe ff       	call   c0006922 <iso_total>
c0017c8a:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0017c91:	89 03                	mov    DWORD PTR [ebx],eax
c0017c93:	83 c4 10             	add    esp,0x10
c0017c96:	31 c0                	xor    eax,eax
c0017c98:	eb 05                	jmp    c0017c9f <ISO9660::stat(void*, unsigned long long*)+0x35>
c0017c9a:	b8 04 00 00 00       	mov    eax,0x4
c0017c9f:	83 c4 08             	add    esp,0x8
c0017ca2:	5b                   	pop    ebx
c0017ca3:	c3                   	ret    

c0017ca4 <ISO9660::close(void*)>:
c0017ca4:	83 ec 0c             	sub    esp,0xc
c0017ca7:	b8 04 00 00 00       	mov    eax,0x4
c0017cac:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0017cb0:	85 d2                	test   edx,edx
c0017cb2:	74 11                	je     c0017cc5 <ISO9660::close(void*)+0x21>
c0017cb4:	83 ec 0c             	sub    esp,0xc
c0017cb7:	83 ea 64             	sub    edx,0x64
c0017cba:	52                   	push   edx
c0017cbb:	e8 0e e9 fe ff       	call   c00065ce <iso_close>
c0017cc0:	83 c4 10             	add    esp,0x10
c0017cc3:	31 c0                	xor    eax,eax
c0017cc5:	83 c4 0c             	add    esp,0xc
c0017cc8:	c3                   	ret    

c0017cc9 <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c0017cc9:	57                   	push   edi
c0017cca:	56                   	push   esi
c0017ccb:	53                   	push   ebx
c0017ccc:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0017cd0:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0017cd4:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0017cd8:	39 35 c4 3e 02 c0    	cmp    DWORD PTR ds:0xc0023ec4,esi
c0017cde:	75 08                	jne    c0017ce8 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1f>
c0017ce0:	38 1d 34 f8 01 c0    	cmp    BYTE PTR ds:0xc001f834,bl
c0017ce6:	74 59                	je     c0017d41 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x78>
c0017ce8:	83 ec 0c             	sub    esp,0xc
c0017ceb:	31 d2                	xor    edx,edx
c0017ced:	68 e0 3e 02 c0       	push   0xc0023ee0
c0017cf2:	0f be c3             	movsx  eax,bl
c0017cf5:	6a 01                	push   0x1
c0017cf7:	52                   	push   edx
c0017cf8:	56                   	push   esi
c0017cf9:	ff 34 85 9c 2c 02 c0 	push   DWORD PTR [eax*4-0x3ffdd364]
c0017d00:	e8 d3 55 ff ff       	call   c000d2d8 <LogicalDisk::read(unsigned long long, int, void*)>
c0017d05:	83 c4 20             	add    esp,0x20
c0017d08:	85 c0                	test   eax,eax
c0017d0a:	75 0e                	jne    c0017d1a <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x51>
c0017d0c:	89 35 c4 3e 02 c0    	mov    DWORD PTR ds:0xc0023ec4,esi
c0017d12:	88 1d 34 f8 01 c0    	mov    BYTE PTR ds:0xc001f834,bl
c0017d18:	eb 27                	jmp    c0017d41 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x78>
c0017d1a:	83 ec 0c             	sub    esp,0xc
c0017d1d:	68 d7 ee 01 c0       	push   0xc001eed7
c0017d22:	e8 c9 2e ff ff       	call   c000abf0 <Dbg::kprintf(char const*, ...)>
c0017d27:	83 c4 0c             	add    esp,0xc
c0017d2a:	68 00 08 00 00       	push   0x800
c0017d2f:	6a 00                	push   0x0
c0017d31:	57                   	push   edi
c0017d32:	e8 b9 87 fe ff       	call   c00004f0 <memset>
c0017d37:	83 c4 10             	add    esp,0x10
c0017d3a:	b8 01 00 00 00       	mov    eax,0x1
c0017d3f:	eb 0e                	jmp    c0017d4f <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x86>
c0017d41:	be e0 3e 02 c0       	mov    esi,0xc0023ee0
c0017d46:	b9 00 08 00 00       	mov    ecx,0x800
c0017d4b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0017d4d:	31 c0                	xor    eax,eax
c0017d4f:	5b                   	pop    ebx
c0017d50:	5e                   	pop    esi
c0017d51:	5f                   	pop    edi
c0017d52:	c3                   	ret    
c0017d53:	90                   	nop

c0017d54 <ISO9660::tryMount(LogicalDisk*, int)>:
c0017d54:	53                   	push   ebx
c0017d55:	81 ec 0c 08 00 00    	sub    esp,0x80c
c0017d5b:	c7 05 c4 3e 02 c0 ef be ad de 	mov    DWORD PTR ds:0xc0023ec4,0xdeadbeef
c0017d65:	8a 84 24 1c 08 00 00 	mov    al,BYTE PTR [esp+0x81c]
c0017d6c:	8d 58 41             	lea    ebx,[eax+0x41]
c0017d6f:	0f be db             	movsx  ebx,bl
c0017d72:	53                   	push   ebx
c0017d73:	8d 44 24 08          	lea    eax,[esp+0x8]
c0017d77:	50                   	push   eax
c0017d78:	6a 10                	push   0x10
c0017d7a:	e8 4a ff ff ff       	call   c0017cc9 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0017d7f:	83 c4 10             	add    esp,0x10
c0017d82:	85 c0                	test   eax,eax
c0017d84:	74 04                	je     c0017d8a <ISO9660::tryMount(LogicalDisk*, int)+0x36>
c0017d86:	31 c0                	xor    eax,eax
c0017d88:	eb 40                	jmp    c0017dca <ISO9660::tryMount(LogicalDisk*, int)+0x76>
c0017d8a:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c0017d8f:	75 f5                	jne    c0017d86 <ISO9660::tryMount(LogicalDisk*, int)+0x32>
c0017d91:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c0017d96:	75 ee                	jne    c0017d86 <ISO9660::tryMount(LogicalDisk*, int)+0x32>
c0017d98:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c0017d9d:	75 e7                	jne    c0017d86 <ISO9660::tryMount(LogicalDisk*, int)+0x32>
c0017d9f:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c0017da4:	75 e0                	jne    c0017d86 <ISO9660::tryMount(LogicalDisk*, int)+0x32>
c0017da6:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c0017dab:	75 d9                	jne    c0017d86 <ISO9660::tryMount(LogicalDisk*, int)+0x32>
c0017dad:	83 ec 0c             	sub    esp,0xc
c0017db0:	53                   	push   ebx
c0017db1:	e8 de ee fe ff       	call   c0006c94 <init_percd>
c0017db6:	83 c4 10             	add    esp,0x10
c0017db9:	40                   	inc    eax
c0017dba:	74 ca                	je     c0017d86 <ISO9660::tryMount(LogicalDisk*, int)+0x32>
c0017dbc:	83 ec 0c             	sub    esp,0xc
c0017dbf:	53                   	push   ebx
c0017dc0:	e8 df ef fe ff       	call   c0006da4 <fs_iso9660_init>
c0017dc5:	83 c4 10             	add    esp,0x10
c0017dc8:	b0 01                	mov    al,0x1
c0017dca:	81 c4 08 08 00 00    	add    esp,0x808
c0017dd0:	5b                   	pop    ebx
c0017dd1:	c3                   	ret    

c0017dd2 <ISO9660::ISO9660()>:
c0017dd2:	83 ec 0c             	sub    esp,0xc
c0017dd5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017dd9:	83 ec 0c             	sub    esp,0xc
c0017ddc:	50                   	push   eax
c0017ddd:	e8 30 31 ff ff       	call   c000af12 <Filesystem::Filesystem()>
c0017de2:	83 c4 10             	add    esp,0x10
c0017de5:	ba fc ee 01 c0       	mov    edx,0xc001eefc
c0017dea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017dee:	89 10                	mov    DWORD PTR [eax],edx
c0017df0:	90                   	nop
c0017df1:	83 c4 0c             	add    esp,0xc
c0017df4:	c3                   	ret    
c0017df5:	90                   	nop

c0017df6 <SoundCard::beginPlayback()>:
c0017df6:	c7 44 24 04 5c ef 01 c0 	mov    DWORD PTR [esp+0x4],0xc001ef5c
c0017dfe:	e9 3c 89 ff ff       	jmp    c001073f <Krnl::panic(char const*)>
c0017e03:	90                   	nop

c0017e04 <SoundCard::stopPlayback()>:
c0017e04:	c7 44 24 04 5c ef 01 c0 	mov    DWORD PTR [esp+0x4],0xc001ef5c
c0017e0c:	e9 2e 89 ff ff       	jmp    c001073f <Krnl::panic(char const*)>
c0017e11:	90                   	nop

c0017e12 <SoundCard::SoundCard(char const*)>:
c0017e12:	83 ec 1c             	sub    esp,0x1c
c0017e15:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017e19:	83 ec 08             	sub    esp,0x8
c0017e1c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017e20:	50                   	push   eax
c0017e21:	e8 a2 43 ff ff       	call   c000c1c8 <Device::Device(char const*)>
c0017e26:	83 c4 10             	add    esp,0x10
c0017e29:	ba a8 ef 01 c0       	mov    edx,0xc001efa8
c0017e2e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017e32:	89 10                	mov    DWORD PTR [eax],edx
c0017e34:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017e38:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c0017e3f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017e43:	c7 80 dc 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1dc],0x0
c0017e4d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017e51:	c7 80 e0 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e0],0x0
c0017e5b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017e5f:	c7 80 e4 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e4],0x0
c0017e69:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017e6d:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c0017e77:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0017e7f:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c0017e84:	7f 19                	jg     c0017e9f <SoundCard::SoundCard(char const*)+0x8d>
c0017e86:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017e8a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017e8e:	83 c2 54             	add    edx,0x54
c0017e91:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0017e99:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0017e9d:	eb e0                	jmp    c0017e7f <SoundCard::SoundCard(char const*)+0x6d>
c0017e9f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017ea3:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c0017eaa:	90                   	nop
c0017eab:	83 c4 1c             	add    esp,0x1c
c0017eae:	c3                   	ret    
c0017eaf:	90                   	nop

c0017eb0 <SoundCard::~SoundCard()>:
c0017eb0:	83 ec 0c             	sub    esp,0xc
c0017eb3:	ba a8 ef 01 c0       	mov    edx,0xc001efa8
c0017eb8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017ebc:	89 10                	mov    DWORD PTR [eax],edx
c0017ebe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017ec2:	83 ec 0c             	sub    esp,0xc
c0017ec5:	50                   	push   eax
c0017ec6:	e8 67 40 ff ff       	call   c000bf32 <Device::~Device()>
c0017ecb:	83 c4 10             	add    esp,0x10
c0017ece:	90                   	nop
c0017ecf:	83 c4 0c             	add    esp,0xc
c0017ed2:	c3                   	ret    
c0017ed3:	90                   	nop

c0017ed4 <SoundCard::~SoundCard()>:
c0017ed4:	83 ec 0c             	sub    esp,0xc
c0017ed7:	83 ec 0c             	sub    esp,0xc
c0017eda:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017ede:	e8 cd ff ff ff       	call   c0017eb0 <SoundCard::~SoundCard()>
c0017ee3:	83 c4 10             	add    esp,0x10
c0017ee6:	83 ec 08             	sub    esp,0x8
c0017ee9:	68 e8 01 00 00       	push   0x1e8
c0017eee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017ef2:	e8 03 2c ff ff       	call   c000aafa <operator delete(void*, unsigned long)>
c0017ef7:	83 c4 10             	add    esp,0x10
c0017efa:	83 c4 0c             	add    esp,0xc
c0017efd:	c3                   	ret    

c0017efe <SoundCard::configureRates(int, int, int)>:
c0017efe:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0017f02:	31 c0                	xor    eax,eax
c0017f04:	80 ba d8 01 00 00 00 	cmp    BYTE PTR [edx+0x1d8],0x0
c0017f0b:	75 20                	jne    c0017f2d <SoundCard::configureRates(int, int, int)+0x2f>
c0017f0d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017f11:	89 82 e0 01 00 00    	mov    DWORD PTR [edx+0x1e0],eax
c0017f17:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017f1b:	89 82 dc 01 00 00    	mov    DWORD PTR [edx+0x1dc],eax
c0017f21:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017f25:	89 82 e4 01 00 00    	mov    DWORD PTR [edx+0x1e4],eax
c0017f2b:	b0 01                	mov    al,0x1
c0017f2d:	c3                   	ret    

c0017f2e <SoundCard::getSamples16(int, short*)>:
c0017f2e:	55                   	push   ebp
c0017f2f:	57                   	push   edi
c0017f30:	31 ff                	xor    edi,edi
c0017f32:	56                   	push   esi
c0017f33:	53                   	push   ebx
c0017f34:	31 db                	xor    ebx,ebx
c0017f36:	83 ec 10             	sub    esp,0x10
c0017f39:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0017f3d:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c0017f41:	8d 04 36             	lea    eax,[esi+esi*1]
c0017f44:	50                   	push   eax
c0017f45:	6a 00                	push   0x0
c0017f47:	55                   	push   ebp
c0017f48:	e8 a3 85 fe ff       	call   c00004f0 <memset>
c0017f4d:	83 c4 10             	add    esp,0x10
c0017f50:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017f54:	8b 84 98 58 01 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x158]
c0017f5b:	85 c0                	test   eax,eax
c0017f5d:	74 1b                	je     c0017f7a <SoundCard::getSamples16(int, short*)+0x4c>
c0017f5f:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c0017f63:	75 15                	jne    c0017f7a <SoundCard::getSamples16(int, short*)+0x4c>
c0017f65:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0017f69:	55                   	push   ebp
c0017f6a:	56                   	push   esi
c0017f6b:	50                   	push   eax
c0017f6c:	e8 ef 02 00 00       	call   c0018260 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>
c0017f71:	83 c4 10             	add    esp,0x10
c0017f74:	39 c7                	cmp    edi,eax
c0017f76:	7d 02                	jge    c0017f7a <SoundCard::getSamples16(int, short*)+0x4c>
c0017f78:	89 c7                	mov    edi,eax
c0017f7a:	43                   	inc    ebx
c0017f7b:	83 fb 20             	cmp    ebx,0x20
c0017f7e:	75 d0                	jne    c0017f50 <SoundCard::getSamples16(int, short*)+0x22>
c0017f80:	83 c4 0c             	add    esp,0xc
c0017f83:	89 f8                	mov    eax,edi
c0017f85:	5b                   	pop    ebx
c0017f86:	5e                   	pop    esi
c0017f87:	5f                   	pop    edi
c0017f88:	5d                   	pop    ebp
c0017f89:	c3                   	ret    

c0017f8a <SoundCard::getSamples32(int, int*)>:
c0017f8a:	55                   	push   ebp
c0017f8b:	57                   	push   edi
c0017f8c:	31 ff                	xor    edi,edi
c0017f8e:	56                   	push   esi
c0017f8f:	31 f6                	xor    esi,esi
c0017f91:	53                   	push   ebx
c0017f92:	83 ec 10             	sub    esp,0x10
c0017f95:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017f99:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c0017f9d:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c0017fa1:	c1 e0 02             	shl    eax,0x2
c0017fa4:	50                   	push   eax
c0017fa5:	6a 00                	push   0x0
c0017fa7:	55                   	push   ebp
c0017fa8:	e8 43 85 fe ff       	call   c00004f0 <memset>
c0017fad:	83 c4 10             	add    esp,0x10
c0017fb0:	8b 84 bb 58 01 00 00 	mov    eax,DWORD PTR [ebx+edi*4+0x158]
c0017fb7:	85 c0                	test   eax,eax
c0017fb9:	74 1b                	je     c0017fd6 <SoundCard::getSamples32(int, int*)+0x4c>
c0017fbb:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c0017fbf:	75 15                	jne    c0017fd6 <SoundCard::getSamples32(int, int*)+0x4c>
c0017fc1:	53                   	push   ebx
c0017fc2:	55                   	push   ebp
c0017fc3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017fc7:	50                   	push   eax
c0017fc8:	e8 57 03 00 00       	call   c0018324 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>
c0017fcd:	83 c4 10             	add    esp,0x10
c0017fd0:	39 c6                	cmp    esi,eax
c0017fd2:	7d 02                	jge    c0017fd6 <SoundCard::getSamples32(int, int*)+0x4c>
c0017fd4:	89 c6                	mov    esi,eax
c0017fd6:	47                   	inc    edi
c0017fd7:	83 ff 20             	cmp    edi,0x20
c0017fda:	75 d4                	jne    c0017fb0 <SoundCard::getSamples32(int, int*)+0x26>
c0017fdc:	8a 83 d8 01 00 00    	mov    al,BYTE PTR [ebx+0x1d8]
c0017fe2:	85 f6                	test   esi,esi
c0017fe4:	75 0f                	jne    c0017ff5 <SoundCard::getSamples32(int, int*)+0x6b>
c0017fe6:	84 c0                	test   al,al
c0017fe8:	74 1b                	je     c0018005 <SoundCard::getSamples32(int, int*)+0x7b>
c0017fea:	83 ec 0c             	sub    esp,0xc
c0017fed:	8b 03                	mov    eax,DWORD PTR [ebx]
c0017fef:	53                   	push   ebx
c0017ff0:	ff 50 28             	call   DWORD PTR [eax+0x28]
c0017ff3:	eb 0d                	jmp    c0018002 <SoundCard::getSamples32(int, int*)+0x78>
c0017ff5:	84 c0                	test   al,al
c0017ff7:	75 0c                	jne    c0018005 <SoundCard::getSamples32(int, int*)+0x7b>
c0017ff9:	83 ec 0c             	sub    esp,0xc
c0017ffc:	8b 03                	mov    eax,DWORD PTR [ebx]
c0017ffe:	53                   	push   ebx
c0017fff:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0018002:	83 c4 10             	add    esp,0x10
c0018005:	83 c4 0c             	add    esp,0xc
c0018008:	89 f0                	mov    eax,esi
c001800a:	5b                   	pop    ebx
c001800b:	5e                   	pop    esi
c001800c:	5f                   	pop    edi
c001800d:	5d                   	pop    ebp
c001800e:	c3                   	ret    
c001800f:	90                   	nop

c0018010 <SoundCard::addChannel(SoundPort*)>:
c0018010:	83 ec 0c             	sub    esp,0xc
c0018013:	31 c0                	xor    eax,eax
c0018015:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018019:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c0018021:	74 1b                	je     c001803e <SoundCard::addChannel(SoundPort*)+0x2e>
c0018023:	40                   	inc    eax
c0018024:	83 f8 20             	cmp    eax,0x20
c0018027:	75 f0                	jne    c0018019 <SoundCard::addChannel(SoundPort*)+0x9>
c0018029:	83 ec 0c             	sub    esp,0xc
c001802c:	68 81 ef 01 c0       	push   0xc001ef81
c0018031:	e8 09 87 ff ff       	call   c001073f <Krnl::panic(char const*)>
c0018036:	83 c4 10             	add    esp,0x10
c0018039:	83 c8 ff             	or     eax,0xffffffff
c001803c:	eb 0b                	jmp    c0018049 <SoundCard::addChannel(SoundPort*)+0x39>
c001803e:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0018042:	89 8c 82 58 01 00 00 	mov    DWORD PTR [edx+eax*4+0x158],ecx
c0018049:	83 c4 0c             	add    esp,0xc
c001804c:	c3                   	ret    
c001804d:	90                   	nop

c001804e <SoundCard::removeChannel(int)>:
c001804e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018052:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018056:	c7 84 90 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x158],0x0
c0018061:	c3                   	ret    
c0018062:	66 90                	xchg   ax,ax

c0018064 <SoundPort::SoundPort(int, int, int, int)>:
c0018064:	83 ec 0c             	sub    esp,0xc
c0018067:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001806b:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0018072:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018076:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001807a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001807e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0018082:	89 10                	mov    DWORD PTR [eax],edx
c0018084:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018088:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001808c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001808f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018093:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018097:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001809a:	83 7c 24 20 ff       	cmp    DWORD PTR [esp+0x20],0xffffffff
c001809f:	75 13                	jne    c00180b4 <SoundPort::SoundPort(int, int, int, int)+0x50>
c00180a1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00180a5:	8b 00                	mov    eax,DWORD PTR [eax]
c00180a7:	05 a0 0f 00 00       	add    eax,0xfa0
c00180ac:	01 c0                	add    eax,eax
c00180ae:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00180b2:	66 90                	xchg   ax,ax
c00180b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00180b8:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00180bc:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00180bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00180c3:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c00180ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00180ce:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00180d1:	c1 e0 02             	shl    eax,0x2
c00180d4:	83 ec 0c             	sub    esp,0xc
c00180d7:	50                   	push   eax
c00180d8:	e8 84 fd fe ff       	call   c0007e61 <malloc>
c00180dd:	83 c4 10             	add    esp,0x10
c00180e0:	89 c2                	mov    edx,eax
c00180e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00180e6:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00180e9:	90                   	nop
c00180ea:	83 c4 0c             	add    esp,0xc
c00180ed:	c3                   	ret    
c00180ee:	66 90                	xchg   ax,ax

c00180f0 <SoundPort::~SoundPort()>:
c00180f0:	83 ec 0c             	sub    esp,0xc
c00180f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00180f7:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00180fa:	85 c0                	test   eax,eax
c00180fc:	74 1e                	je     c001811c <SoundPort::~SoundPort()+0x2c>
c00180fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018102:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0018105:	83 ec 0c             	sub    esp,0xc
c0018108:	50                   	push   eax
c0018109:	e8 63 fd fe ff       	call   c0007e71 <free>
c001810e:	83 c4 10             	add    esp,0x10
c0018111:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018115:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001811c:	90                   	nop
c001811d:	83 c4 0c             	add    esp,0xc
c0018120:	c3                   	ret    
c0018121:	90                   	nop
c0018122:	66 90                	xchg   ax,ax

c0018124 <SoundPort::unpause()>:
c0018124:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018128:	c6 40 18 00          	mov    BYTE PTR [eax+0x18],0x0
c001812c:	c3                   	ret    
c001812d:	90                   	nop
c001812e:	66 90                	xchg   ax,ax

c0018130 <SoundPort::pause()>:
c0018130:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018134:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c0018138:	c3                   	ret    
c0018139:	90                   	nop
c001813a:	66 90                	xchg   ax,ax

c001813c <SoundPort::getBufferUsed()>:
c001813c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018140:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0018143:	c3                   	ret    

c0018144 <SoundPort::getBufferSize()>:
c0018144:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018148:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001814b:	c3                   	ret    

c001814c <SoundPort::buffer16(short*, int)>:
c001814c:	55                   	push   ebp
c001814d:	57                   	push   edi
c001814e:	56                   	push   esi
c001814f:	53                   	push   ebx
c0018150:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0018154:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c0018158:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c001815b:	3b 42 10             	cmp    eax,DWORD PTR [edx+0x10]
c001815e:	74 68                	je     c00181c8 <SoundPort::buffer16(short*, int)+0x7c>
c0018160:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0018164:	85 c9                	test   ecx,ecx
c0018166:	7e 60                	jle    c00181c8 <SoundPort::buffer16(short*, int)+0x7c>
c0018168:	0f bf 4d 00          	movsx  ecx,WORD PTR [ebp+0x0]
c001816c:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001816f:	c1 e1 0f             	shl    ecx,0xf
c0018172:	8d 70 01             	lea    esi,[eax+0x1]
c0018175:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c0018178:	89 0c 83             	mov    DWORD PTR [ebx+eax*4],ecx
c001817b:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001817e:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c0018181:	74 4d                	je     c00181d0 <SoundPort::buffer16(short*, int)+0x84>
c0018183:	31 f6                	xor    esi,esi
c0018185:	eb 21                	jmp    c00181a8 <SoundPort::buffer16(short*, int)+0x5c>
c0018187:	90                   	nop
c0018188:	0f bf 5c 45 00       	movsx  ebx,WORD PTR [ebp+eax*2+0x0]
c001818d:	8d 79 01             	lea    edi,[ecx+0x1]
c0018190:	c1 e3 0f             	shl    ebx,0xf
c0018193:	89 7a 14             	mov    DWORD PTR [edx+0x14],edi
c0018196:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0018199:	89 1c 8f             	mov    DWORD PTR [edi+ecx*4],ebx
c001819c:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001819f:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c00181a2:	74 1c                	je     c00181c0 <SoundPort::buffer16(short*, int)+0x74>
c00181a4:	89 c6                	mov    esi,eax
c00181a6:	66 90                	xchg   ax,ax
c00181a8:	8d 46 01             	lea    eax,[esi+0x1]
c00181ab:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c00181af:	75 d7                	jne    c0018188 <SoundPort::buffer16(short*, int)+0x3c>
c00181b1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00181b5:	8d 76 00             	lea    esi,[esi+0x0]
c00181b8:	5b                   	pop    ebx
c00181b9:	5e                   	pop    esi
c00181ba:	5f                   	pop    edi
c00181bb:	5d                   	pop    ebp
c00181bc:	c3                   	ret    
c00181bd:	8d 76 00             	lea    esi,[esi+0x0]
c00181c0:	5b                   	pop    ebx
c00181c1:	8d 46 02             	lea    eax,[esi+0x2]
c00181c4:	5e                   	pop    esi
c00181c5:	5f                   	pop    edi
c00181c6:	5d                   	pop    ebp
c00181c7:	c3                   	ret    
c00181c8:	5b                   	pop    ebx
c00181c9:	31 c0                	xor    eax,eax
c00181cb:	5e                   	pop    esi
c00181cc:	5f                   	pop    edi
c00181cd:	5d                   	pop    ebp
c00181ce:	c3                   	ret    
c00181cf:	90                   	nop
c00181d0:	b8 01 00 00 00       	mov    eax,0x1
c00181d5:	eb e1                	jmp    c00181b8 <SoundPort::buffer16(short*, int)+0x6c>
c00181d7:	90                   	nop

c00181d8 <SoundPort::buffer32(int*, int)>:
c00181d8:	55                   	push   ebp
c00181d9:	57                   	push   edi
c00181da:	56                   	push   esi
c00181db:	53                   	push   ebx
c00181dc:	51                   	push   ecx
c00181dd:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00181e1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00181e5:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c00181e8:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00181ec:	89 04 24             	mov    DWORD PTR [esp],eax
c00181ef:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c00181f2:	74 5c                	je     c0018250 <SoundPort::buffer32(int*, int)+0x78>
c00181f4:	85 c0                	test   eax,eax
c00181f6:	7e 58                	jle    c0018250 <SoundPort::buffer32(int*, int)+0x78>
c00181f8:	8d 71 01             	lea    esi,[ecx+0x1]
c00181fb:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c00181fe:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c0018201:	8b 37                	mov    esi,DWORD PTR [edi]
c0018203:	89 34 8b             	mov    DWORD PTR [ebx+ecx*4],esi
c0018206:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0018209:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001820c:	74 4a                	je     c0018258 <SoundPort::buffer32(int*, int)+0x80>
c001820e:	31 f6                	xor    esi,esi
c0018210:	eb 1e                	jmp    c0018230 <SoundPort::buffer32(int*, int)+0x58>
c0018212:	66 90                	xchg   ax,ax
c0018214:	8d 69 01             	lea    ebp,[ecx+0x1]
c0018217:	89 6a 14             	mov    DWORD PTR [edx+0x14],ebp
c001821a:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c001821d:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c0018220:	89 44 8d 00          	mov    DWORD PTR [ebp+ecx*4+0x0],eax
c0018224:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0018227:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001822a:	74 18                	je     c0018244 <SoundPort::buffer32(int*, int)+0x6c>
c001822c:	89 de                	mov    esi,ebx
c001822e:	66 90                	xchg   ax,ax
c0018230:	8d 5e 01             	lea    ebx,[esi+0x1]
c0018233:	39 1c 24             	cmp    DWORD PTR [esp],ebx
c0018236:	75 dc                	jne    c0018214 <SoundPort::buffer32(int*, int)+0x3c>
c0018238:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001823b:	90                   	nop
c001823c:	5a                   	pop    edx
c001823d:	5b                   	pop    ebx
c001823e:	5e                   	pop    esi
c001823f:	5f                   	pop    edi
c0018240:	5d                   	pop    ebp
c0018241:	c3                   	ret    
c0018242:	66 90                	xchg   ax,ax
c0018244:	5a                   	pop    edx
c0018245:	8d 46 02             	lea    eax,[esi+0x2]
c0018248:	5b                   	pop    ebx
c0018249:	5e                   	pop    esi
c001824a:	5f                   	pop    edi
c001824b:	5d                   	pop    ebp
c001824c:	c3                   	ret    
c001824d:	8d 76 00             	lea    esi,[esi+0x0]
c0018250:	5a                   	pop    edx
c0018251:	31 c0                	xor    eax,eax
c0018253:	5b                   	pop    ebx
c0018254:	5e                   	pop    esi
c0018255:	5f                   	pop    edi
c0018256:	5d                   	pop    ebp
c0018257:	c3                   	ret    
c0018258:	b8 01 00 00 00       	mov    eax,0x1
c001825d:	eb dd                	jmp    c001823c <SoundPort::buffer32(int*, int)+0x64>
c001825f:	90                   	nop

c0018260 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>:
c0018260:	57                   	push   edi
c0018261:	56                   	push   esi
c0018262:	53                   	push   ebx
c0018263:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0018267:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001826b:	8b 86 e0 01 00 00    	mov    eax,DWORD PTR [esi+0x1e0]
c0018271:	39 03                	cmp    DWORD PTR [ebx],eax
c0018273:	74 13                	je     c0018288 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x28>
c0018275:	83 ec 0c             	sub    esp,0xc
c0018278:	68 d4 ef 01 c0       	push   0xc001efd4
c001827d:	e8 bd 84 ff ff       	call   c001073f <Krnl::panic(char const*)>
c0018282:	83 c4 10             	add    esp,0x10
c0018285:	8d 76 00             	lea    esi,[esi+0x0]
c0018288:	8b 86 dc 01 00 00    	mov    eax,DWORD PTR [esi+0x1dc]
c001828e:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c0018291:	74 11                	je     c00182a4 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x44>
c0018293:	83 ec 0c             	sub    esp,0xc
c0018296:	68 13 f0 01 c0       	push   0xc001f013
c001829b:	e8 9f 84 ff ff       	call   c001073f <Krnl::panic(char const*)>
c00182a0:	83 c4 10             	add    esp,0x10
c00182a3:	90                   	nop
c00182a4:	8b 86 e4 01 00 00    	mov    eax,DWORD PTR [esi+0x1e4]
c00182aa:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c00182ad:	74 11                	je     c00182c0 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x60>
c00182af:	83 ec 0c             	sub    esp,0xc
c00182b2:	68 13 f0 01 c0       	push   0xc001f013
c00182b7:	e8 83 84 ff ff       	call   c001073f <Krnl::panic(char const*)>
c00182bc:	83 c4 10             	add    esp,0x10
c00182bf:	90                   	nop
c00182c0:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c00182c3:	3b 74 24 14          	cmp    esi,DWORD PTR [esp+0x14]
c00182c7:	7e 07                	jle    c00182d0 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x70>
c00182c9:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00182cd:	8d 76 00             	lea    esi,[esi+0x0]
c00182d0:	85 f6                	test   esi,esi
c00182d2:	7e 2c                	jle    c0018300 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0xa0>
c00182d4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00182d8:	8d 3c 36             	lea    edi,[esi+esi*1]
c00182db:	31 c9                	xor    ecx,ecx
c00182dd:	01 d7                	add    edi,edx
c00182df:	90                   	nop
c00182e0:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00182e3:	8b 04 08             	mov    eax,DWORD PTR [eax+ecx*1]
c00182e6:	85 c0                	test   eax,eax
c00182e8:	79 06                	jns    c00182f0 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x90>
c00182ea:	05 ff 7f 00 00       	add    eax,0x7fff
c00182ef:	90                   	nop
c00182f0:	c1 f8 0f             	sar    eax,0xf
c00182f3:	83 c1 04             	add    ecx,0x4
c00182f6:	66 01 02             	add    WORD PTR [edx],ax
c00182f9:	83 c2 02             	add    edx,0x2
c00182fc:	39 d7                	cmp    edi,edx
c00182fe:	75 e0                	jne    c00182e0 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x80>
c0018300:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0018303:	50                   	push   eax
c0018304:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0018307:	29 f0                	sub    eax,esi
c0018309:	c1 e0 02             	shl    eax,0x2
c001830c:	50                   	push   eax
c001830d:	8d 04 b2             	lea    eax,[edx+esi*4]
c0018310:	50                   	push   eax
c0018311:	52                   	push   edx
c0018312:	e8 e9 80 fe ff       	call   c0000400 <memmove>
c0018317:	29 73 14             	sub    DWORD PTR [ebx+0x14],esi
c001831a:	83 c4 10             	add    esp,0x10
c001831d:	89 f0                	mov    eax,esi
c001831f:	5b                   	pop    ebx
c0018320:	5e                   	pop    esi
c0018321:	5f                   	pop    edi
c0018322:	c3                   	ret    
c0018323:	90                   	nop

c0018324 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>:
c0018324:	57                   	push   edi
c0018325:	56                   	push   esi
c0018326:	53                   	push   ebx
c0018327:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001832b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001832f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0018333:	8b 87 e0 01 00 00    	mov    eax,DWORD PTR [edi+0x1e0]
c0018339:	39 06                	cmp    DWORD PTR [esi],eax
c001833b:	74 13                	je     c0018350 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x2c>
c001833d:	83 ec 0c             	sub    esp,0xc
c0018340:	68 f4 ef 01 c0       	push   0xc001eff4
c0018345:	e8 f5 83 ff ff       	call   c001073f <Krnl::panic(char const*)>
c001834a:	83 c4 10             	add    esp,0x10
c001834d:	8d 76 00             	lea    esi,[esi+0x0]
c0018350:	8b 87 dc 01 00 00    	mov    eax,DWORD PTR [edi+0x1dc]
c0018356:	39 46 04             	cmp    DWORD PTR [esi+0x4],eax
c0018359:	74 11                	je     c001836c <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x48>
c001835b:	83 ec 0c             	sub    esp,0xc
c001835e:	68 2f f0 01 c0       	push   0xc001f02f
c0018363:	e8 d7 83 ff ff       	call   c001073f <Krnl::panic(char const*)>
c0018368:	83 c4 10             	add    esp,0x10
c001836b:	90                   	nop
c001836c:	8b 87 e4 01 00 00    	mov    eax,DWORD PTR [edi+0x1e4]
c0018372:	39 46 08             	cmp    DWORD PTR [esi+0x8],eax
c0018375:	74 11                	je     c0018388 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x64>
c0018377:	83 ec 0c             	sub    esp,0xc
c001837a:	68 2f f0 01 c0       	push   0xc001f02f
c001837f:	e8 bb 83 ff ff       	call   c001073f <Krnl::panic(char const*)>
c0018384:	83 c4 10             	add    esp,0x10
c0018387:	90                   	nop
c0018388:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c001838b:	3b 7c 24 14          	cmp    edi,DWORD PTR [esp+0x14]
c001838f:	7e 07                	jle    c0018398 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x74>
c0018391:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0018395:	8d 76 00             	lea    esi,[esi+0x0]
c0018398:	85 ff                	test   edi,edi
c001839a:	7e 1c                	jle    c00183b8 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x94>
c001839c:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c00183a3:	31 c0                	xor    eax,eax
c00183a5:	8d 76 00             	lea    esi,[esi+0x0]
c00183a8:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c00183ab:	8b 14 02             	mov    edx,DWORD PTR [edx+eax*1]
c00183ae:	01 14 03             	add    DWORD PTR [ebx+eax*1],edx
c00183b1:	83 c0 04             	add    eax,0x4
c00183b4:	39 c1                	cmp    ecx,eax
c00183b6:	75 f0                	jne    c00183a8 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x84>
c00183b8:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c00183bb:	50                   	push   eax
c00183bc:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c00183bf:	29 f8                	sub    eax,edi
c00183c1:	c1 e0 02             	shl    eax,0x2
c00183c4:	50                   	push   eax
c00183c5:	8d 04 ba             	lea    eax,[edx+edi*4]
c00183c8:	50                   	push   eax
c00183c9:	52                   	push   edx
c00183ca:	e8 31 80 fe ff       	call   c0000400 <memmove>
c00183cf:	29 7e 14             	sub    DWORD PTR [esi+0x14],edi
c00183d2:	83 c4 10             	add    esp,0x10
c00183d5:	89 f8                	mov    eax,edi
c00183d7:	5b                   	pop    ebx
c00183d8:	5e                   	pop    esi
c00183d9:	5f                   	pop    edi
c00183da:	c3                   	ret    
c00183db:	90                   	nop

c00183dc <PCI::open(int, int, void*)>:
c00183dc:	83 ec 18             	sub    esp,0x18
c00183df:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00183e3:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00183e7:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c00183ed:	8b 10                	mov    edx,DWORD PTR [eax]
c00183ef:	50                   	push   eax
c00183f0:	ff 52 18             	call   DWORD PTR [edx+0x18]
c00183f3:	31 c0                	xor    eax,eax
c00183f5:	83 c4 1c             	add    esp,0x1c
c00183f8:	c3                   	ret    
c00183f9:	90                   	nop

c00183fa <PCI::close(int, int, void*)>:
c00183fa:	31 c0                	xor    eax,eax
c00183fc:	c3                   	ret    
c00183fd:	90                   	nop

c00183fe <PCI::PCI()>:
c00183fe:	83 ec 0c             	sub    esp,0xc
c0018401:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018405:	83 ec 08             	sub    esp,0x8
c0018408:	68 4b f0 01 c0       	push   0xc001f04b
c001840d:	50                   	push   eax
c001840e:	e8 71 35 ff ff       	call   c000b984 <Bus::Bus(char const*)>
c0018413:	83 c4 10             	add    esp,0x10
c0018416:	ba f4 f0 01 c0       	mov    edx,0xc001f0f4
c001841b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001841f:	89 10                	mov    DWORD PTR [eax],edx
c0018421:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018425:	c7 80 58 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x158],0x1
c001842f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018433:	a3 e0 46 02 c0       	mov    ds:0xc00246e0,eax
c0018438:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001843c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0018442:	31 d2                	xor    edx,edx
c0018444:	88 c2                	mov    dl,al
c0018446:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001844a:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c0018451:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018455:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001845b:	31 d2                	xor    edx,edx
c001845d:	88 c2                	mov    dl,al
c001845f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018463:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c0018468:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001846c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0018472:	8d 50 01             	lea    edx,[eax+0x1]
c0018475:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0018479:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c001847f:	31 d2                	xor    edx,edx
c0018481:	88 c2                	mov    dl,al
c0018483:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018487:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001848b:	83 c9 c0             	or     ecx,0xffffffc0
c001848e:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0018492:	90                   	nop
c0018493:	83 c4 0c             	add    esp,0xc
c0018496:	c3                   	ret    
c0018497:	90                   	nop

c0018498 <PCI::readBAR8(unsigned int, int)>:
c0018498:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001849c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00184a0:	f6 c2 01             	test   dl,0x1
c00184a3:	74 07                	je     c00184ac <PCI::readBAR8(unsigned int, int)+0x14>
c00184a5:	83 e2 fc             	and    edx,0xfffffffc
c00184a8:	01 c2                	add    edx,eax
c00184aa:	ec                   	in     al,dx
c00184ab:	c3                   	ret    
c00184ac:	83 e2 f0             	and    edx,0xfffffff0
c00184af:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c00184b2:	c3                   	ret    
c00184b3:	90                   	nop

c00184b4 <PCI::readBAR16(unsigned int, int)>:
c00184b4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00184b8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00184bc:	f6 c2 01             	test   dl,0x1
c00184bf:	74 08                	je     c00184c9 <PCI::readBAR16(unsigned int, int)+0x15>
c00184c1:	83 e2 fc             	and    edx,0xfffffffc
c00184c4:	01 c2                	add    edx,eax
c00184c6:	66 ed                	in     ax,dx
c00184c8:	c3                   	ret    
c00184c9:	83 e2 f0             	and    edx,0xfffffff0
c00184cc:	66 8b 04 02          	mov    ax,WORD PTR [edx+eax*1]
c00184d0:	c3                   	ret    
c00184d1:	90                   	nop

c00184d2 <PCI::readBAR32(unsigned int, int)>:
c00184d2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00184d6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00184da:	f6 c2 01             	test   dl,0x1
c00184dd:	74 07                	je     c00184e6 <PCI::readBAR32(unsigned int, int)+0x14>
c00184df:	83 e2 fc             	and    edx,0xfffffffc
c00184e2:	01 c2                	add    edx,eax
c00184e4:	ed                   	in     eax,dx
c00184e5:	c3                   	ret    
c00184e6:	83 e2 f0             	and    edx,0xfffffff0
c00184e9:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c00184ec:	c3                   	ret    
c00184ed:	90                   	nop

c00184ee <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c00184ee:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00184f2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00184f6:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00184fa:	f6 c2 01             	test   dl,0x1
c00184fd:	74 07                	je     c0018506 <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c00184ff:	83 e2 fc             	and    edx,0xfffffffc
c0018502:	01 ca                	add    edx,ecx
c0018504:	ee                   	out    dx,al
c0018505:	c3                   	ret    
c0018506:	83 e2 f0             	and    edx,0xfffffff0
c0018509:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c001850c:	c3                   	ret    
c001850d:	90                   	nop

c001850e <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c001850e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018512:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018516:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001851a:	f6 c2 01             	test   dl,0x1
c001851d:	74 08                	je     c0018527 <PCI::writeBAR16(unsigned int, unsigned short, int)+0x19>
c001851f:	83 e2 fc             	and    edx,0xfffffffc
c0018522:	01 ca                	add    edx,ecx
c0018524:	66 ef                	out    dx,ax
c0018526:	c3                   	ret    
c0018527:	83 e2 f0             	and    edx,0xfffffff0
c001852a:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c001852e:	c3                   	ret    
c001852f:	90                   	nop

c0018530 <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c0018530:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018534:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018538:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001853c:	f6 c2 01             	test   dl,0x1
c001853f:	74 07                	je     c0018548 <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c0018541:	83 e2 fc             	and    edx,0xfffffffc
c0018544:	01 ca                	add    edx,ecx
c0018546:	ef                   	out    dx,eax
c0018547:	c3                   	ret    
c0018548:	83 e2 f0             	and    edx,0xfffffff0
c001854b:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c001854e:	c3                   	ret    
c001854f:	90                   	nop

c0018550 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0018550:	55                   	push   ebp
c0018551:	57                   	push   edi
c0018552:	56                   	push   esi
c0018553:	53                   	push   ebx
c0018554:	83 ec 0c             	sub    esp,0xc
c0018557:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001855b:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c001855f:	89 f0                	mov    eax,esi
c0018561:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0018565:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0018569:	3c 07                	cmp    al,0x7
c001856b:	76 10                	jbe    c001857d <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x2d>
c001856d:	83 ec 0c             	sub    esp,0xc
c0018570:	68 53 f0 01 c0       	push   0xc001f053
c0018575:	e8 c5 81 ff ff       	call   c001073f <Krnl::panic(char const*)>
c001857a:	83 c4 10             	add    esp,0x10
c001857d:	80 fb 0f             	cmp    bl,0xf
c0018580:	76 10                	jbe    c0018592 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x42>
c0018582:	83 ec 0c             	sub    esp,0xc
c0018585:	68 83 f0 01 c0       	push   0xc001f083
c001858a:	e8 b0 81 ff ff       	call   c001073f <Krnl::panic(char const*)>
c001858f:	83 c4 10             	add    esp,0x10
c0018592:	8d 04 36             	lea    eax,[esi+esi*1]
c0018595:	ba f8 0c 00 00       	mov    edx,0xcf8
c001859a:	83 c8 f0             	or     eax,0xfffffff0
c001859d:	ee                   	out    dx,al
c001859e:	ba fa 0c 00 00       	mov    edx,0xcfa
c00185a3:	89 e8                	mov    eax,ebp
c00185a5:	ee                   	out    dx,al
c00185a6:	83 c4 0c             	add    esp,0xc
c00185a9:	89 d8                	mov    eax,ebx
c00185ab:	66 81 e7 fc 00       	and    di,0xfc
c00185b0:	5b                   	pop    ebx
c00185b1:	c1 e0 08             	shl    eax,0x8
c00185b4:	5e                   	pop    esi
c00185b5:	09 f8                	or     eax,edi
c00185b7:	5f                   	pop    edi
c00185b8:	66 0d 00 c0          	or     ax,0xc000
c00185bc:	5d                   	pop    ebp
c00185bd:	c3                   	ret    

c00185be <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c00185be:	57                   	push   edi
c00185bf:	56                   	push   esi
c00185c0:	53                   	push   ebx
c00185c1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00185c5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00185c9:	8b be 58 01 00 00    	mov    edi,DWORD PTR [esi+0x158]
c00185cf:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00185d3:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00185d7:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00185db:	83 ff 01             	cmp    edi,0x1
c00185de:	75 3e                	jne    c001861e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x60>
c00185e0:	89 de                	mov    esi,ebx
c00185e2:	0f b6 c0             	movzx  eax,al
c00185e5:	81 e6 fc 00 00 00    	and    esi,0xfc
c00185eb:	c1 e0 10             	shl    eax,0x10
c00185ee:	0f b6 c9             	movzx  ecx,cl
c00185f1:	09 f0                	or     eax,esi
c00185f3:	c1 e1 08             	shl    ecx,0x8
c00185f6:	0f b6 d2             	movzx  edx,dl
c00185f9:	09 c8                	or     eax,ecx
c00185fb:	c1 e2 0b             	shl    edx,0xb
c00185fe:	09 d0                	or     eax,edx
c0018600:	ba f8 0c 00 00       	mov    edx,0xcf8
c0018605:	0d 00 00 00 80       	or     eax,0x80000000
c001860a:	ef                   	out    dx,eax
c001860b:	ba fc 0c 00 00       	mov    edx,0xcfc
c0018610:	ed                   	in     eax,dx
c0018611:	83 e3 02             	and    ebx,0x2
c0018614:	0f b6 cb             	movzx  ecx,bl
c0018617:	c1 e1 03             	shl    ecx,0x3
c001861a:	d3 e8                	shr    eax,cl
c001861c:	eb 43                	jmp    c0018661 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa3>
c001861e:	83 ff 02             	cmp    edi,0x2
c0018621:	75 2c                	jne    c001864f <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x91>
c0018623:	83 ec 0c             	sub    esp,0xc
c0018626:	0f b6 c9             	movzx  ecx,cl
c0018629:	0f b6 d2             	movzx  edx,dl
c001862c:	0f b6 fb             	movzx  edi,bl
c001862f:	0f b6 c0             	movzx  eax,al
c0018632:	57                   	push   edi
c0018633:	51                   	push   ecx
c0018634:	52                   	push   edx
c0018635:	50                   	push   eax
c0018636:	56                   	push   esi
c0018637:	e8 14 ff ff ff       	call   c0018550 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001863c:	89 c2                	mov    edx,eax
c001863e:	ed                   	in     eax,dx
c001863f:	83 e3 02             	and    ebx,0x2
c0018642:	83 c4 20             	add    esp,0x20
c0018645:	0f b6 cb             	movzx  ecx,bl
c0018648:	c1 e1 03             	shl    ecx,0x3
c001864b:	d3 e8                	shr    eax,cl
c001864d:	eb 12                	jmp    c0018661 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa3>
c001864f:	83 ec 0c             	sub    esp,0xc
c0018652:	68 b3 f0 01 c0       	push   0xc001f0b3
c0018657:	e8 e3 80 ff ff       	call   c001073f <Krnl::panic(char const*)>
c001865c:	83 c4 10             	add    esp,0x10
c001865f:	31 c0                	xor    eax,eax
c0018661:	5b                   	pop    ebx
c0018662:	5e                   	pop    esi
c0018663:	5f                   	pop    edi
c0018664:	c3                   	ret    
c0018665:	90                   	nop

c0018666 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c0018666:	83 ec 18             	sub    esp,0x18
c0018669:	6a 00                	push   0x0
c001866b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018670:	50                   	push   eax
c0018671:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018676:	50                   	push   eax
c0018677:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001867c:	50                   	push   eax
c001867d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018681:	e8 38 ff ff ff       	call   c00185be <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018686:	83 c4 2c             	add    esp,0x2c
c0018689:	c3                   	ret    

c001868a <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c001868a:	83 ec 18             	sub    esp,0x18
c001868d:	6a 0e                	push   0xe
c001868f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018694:	50                   	push   eax
c0018695:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001869a:	50                   	push   eax
c001869b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00186a0:	50                   	push   eax
c00186a1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00186a5:	e8 14 ff ff ff       	call   c00185be <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00186aa:	83 c4 2c             	add    esp,0x2c
c00186ad:	0f b6 c0             	movzx  eax,al
c00186b0:	c3                   	ret    
c00186b1:	90                   	nop

c00186b2 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c00186b2:	55                   	push   ebp
c00186b3:	57                   	push   edi
c00186b4:	56                   	push   esi
c00186b5:	53                   	push   ebx
c00186b6:	83 ec 18             	sub    esp,0x18
c00186b9:	0f b6 74 24 38       	movzx  esi,BYTE PTR [esp+0x38]
c00186be:	0f b6 6c 24 34       	movzx  ebp,BYTE PTR [esp+0x34]
c00186c3:	0f b6 7c 24 30       	movzx  edi,BYTE PTR [esp+0x30]
c00186c8:	6a 0a                	push   0xa
c00186ca:	56                   	push   esi
c00186cb:	55                   	push   ebp
c00186cc:	57                   	push   edi
c00186cd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00186d1:	e8 e8 fe ff ff       	call   c00185be <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00186d6:	83 c4 14             	add    esp,0x14
c00186d9:	89 c3                	mov    ebx,eax
c00186db:	6a 0a                	push   0xa
c00186dd:	0f b6 db             	movzx  ebx,bl
c00186e0:	56                   	push   esi
c00186e1:	55                   	push   ebp
c00186e2:	57                   	push   edi
c00186e3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00186e7:	e8 d2 fe ff ff       	call   c00185be <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00186ec:	83 c4 2c             	add    esp,0x2c
c00186ef:	25 00 ff 00 00       	and    eax,0xff00
c00186f4:	09 d8                	or     eax,ebx
c00186f6:	5b                   	pop    ebx
c00186f7:	5e                   	pop    esi
c00186f8:	5f                   	pop    edi
c00186f9:	5d                   	pop    ebp
c00186fa:	c3                   	ret    
c00186fb:	90                   	nop

c00186fc <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c00186fc:	83 ec 18             	sub    esp,0x18
c00186ff:	6a 08                	push   0x8
c0018701:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018706:	50                   	push   eax
c0018707:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001870c:	50                   	push   eax
c001870d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018712:	50                   	push   eax
c0018713:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018717:	e8 a2 fe ff ff       	call   c00185be <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001871c:	83 c4 2c             	add    esp,0x2c
c001871f:	0f b6 c4             	movzx  eax,ah
c0018722:	c3                   	ret    
c0018723:	90                   	nop

c0018724 <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c0018724:	83 ec 18             	sub    esp,0x18
c0018727:	6a 08                	push   0x8
c0018729:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001872e:	50                   	push   eax
c001872f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018734:	50                   	push   eax
c0018735:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001873a:	50                   	push   eax
c001873b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001873f:	e8 7a fe ff ff       	call   c00185be <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018744:	83 c4 2c             	add    esp,0x2c
c0018747:	c3                   	ret    

c0018748 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c0018748:	83 ec 18             	sub    esp,0x18
c001874b:	6a 3c                	push   0x3c
c001874d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018752:	50                   	push   eax
c0018753:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018758:	50                   	push   eax
c0018759:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001875e:	50                   	push   eax
c001875f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018763:	e8 56 fe ff ff       	call   c00185be <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018768:	83 c4 2c             	add    esp,0x2c
c001876b:	c3                   	ret    

c001876c <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c001876c:	83 ec 18             	sub    esp,0x18
c001876f:	6a 18                	push   0x18
c0018771:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018776:	50                   	push   eax
c0018777:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001877c:	50                   	push   eax
c001877d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018782:	50                   	push   eax
c0018783:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018787:	e8 32 fe ff ff       	call   c00185be <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001878c:	83 c4 2c             	add    esp,0x2c
c001878f:	0f b6 c4             	movzx  eax,ah
c0018792:	c3                   	ret    
c0018793:	90                   	nop

c0018794 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0018794:	55                   	push   ebp
c0018795:	57                   	push   edi
c0018796:	56                   	push   esi
c0018797:	53                   	push   ebx
c0018798:	83 ec 28             	sub    esp,0x28
c001879b:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c001879f:	0f b6 7c 24 48       	movzx  edi,BYTE PTR [esp+0x48]
c00187a4:	0f b6 6c 24 44       	movzx  ebp,BYTE PTR [esp+0x44]
c00187a9:	0f b6 4c 24 4c       	movzx  ecx,BYTE PTR [esp+0x4c]
c00187ae:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c00187b5:	8d 43 12             	lea    eax,[ebx+0x12]
c00187b8:	83 c3 10             	add    ebx,0x10
c00187bb:	0f b6 c0             	movzx  eax,al
c00187be:	0f b6 db             	movzx  ebx,bl
c00187c1:	50                   	push   eax
c00187c2:	51                   	push   ecx
c00187c3:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c00187c7:	57                   	push   edi
c00187c8:	55                   	push   ebp
c00187c9:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00187cd:	e8 ec fd ff ff       	call   c00185be <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00187d2:	83 c4 14             	add    esp,0x14
c00187d5:	89 c6                	mov    esi,eax
c00187d7:	53                   	push   ebx
c00187d8:	c1 e6 10             	shl    esi,0x10
c00187db:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00187df:	51                   	push   ecx
c00187e0:	57                   	push   edi
c00187e1:	55                   	push   ebp
c00187e2:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00187e6:	e8 d3 fd ff ff       	call   c00185be <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00187eb:	83 c4 3c             	add    esp,0x3c
c00187ee:	0f b7 c0             	movzx  eax,ax
c00187f1:	5b                   	pop    ebx
c00187f2:	09 f0                	or     eax,esi
c00187f4:	5e                   	pop    esi
c00187f5:	5f                   	pop    edi
c00187f6:	5d                   	pop    ebp
c00187f7:	c3                   	ret    

c00187f8 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c00187f8:	55                   	push   ebp
c00187f9:	57                   	push   edi
c00187fa:	56                   	push   esi
c00187fb:	53                   	push   ebx
c00187fc:	83 ec 0c             	sub    esp,0xc
c00187ff:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0018803:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0018807:	89 f5                	mov    ebp,esi
c0018809:	8b 8f 58 01 00 00    	mov    ecx,DWORD PTR [edi+0x158]
c001880f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018813:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018817:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001881b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001881f:	83 f9 01             	cmp    ecx,0x1
c0018822:	75 5d                	jne    c0018881 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x89>
c0018824:	0f b6 c8             	movzx  ecx,al
c0018827:	0f b6 d2             	movzx  edx,dl
c001882a:	c1 e1 10             	shl    ecx,0x10
c001882d:	c1 e2 0b             	shl    edx,0xb
c0018830:	89 f0                	mov    eax,esi
c0018832:	25 fc 00 00 00       	and    eax,0xfc
c0018837:	09 c1                	or     ecx,eax
c0018839:	89 e8                	mov    eax,ebp
c001883b:	0f b6 c0             	movzx  eax,al
c001883e:	c1 e0 08             	shl    eax,0x8
c0018841:	09 c1                	or     ecx,eax
c0018843:	09 d1                	or     ecx,edx
c0018845:	ba f8 0c 00 00       	mov    edx,0xcf8
c001884a:	81 c9 00 00 00 80    	or     ecx,0x80000000
c0018850:	89 c8                	mov    eax,ecx
c0018852:	ef                   	out    dx,eax
c0018853:	ba fc 0c 00 00       	mov    edx,0xcfc
c0018858:	ed                   	in     eax,dx
c0018859:	0f b7 db             	movzx  ebx,bx
c001885c:	83 e6 02             	and    esi,0x2
c001885f:	74 0a                	je     c001886b <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x73>
c0018861:	0f b7 d0             	movzx  edx,ax
c0018864:	c1 e3 10             	shl    ebx,0x10
c0018867:	09 d3                	or     ebx,edx
c0018869:	eb 05                	jmp    c0018870 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x78>
c001886b:	66 31 c0             	xor    ax,ax
c001886e:	09 c3                	or     ebx,eax
c0018870:	ba f8 0c 00 00       	mov    edx,0xcf8
c0018875:	89 c8                	mov    eax,ecx
c0018877:	ef                   	out    dx,eax
c0018878:	ba fc 0c 00 00       	mov    edx,0xcfc
c001887d:	89 d8                	mov    eax,ebx
c001887f:	eb 41                	jmp    c00188c2 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c0018881:	83 f9 02             	cmp    ecx,0x2
c0018884:	75 45                	jne    c00188cb <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xd3>
c0018886:	83 ec 0c             	sub    esp,0xc
c0018889:	0f b6 d2             	movzx  edx,dl
c001888c:	89 f1                	mov    ecx,esi
c001888e:	0f b6 c0             	movzx  eax,al
c0018891:	0f b6 f1             	movzx  esi,cl
c0018894:	89 e9                	mov    ecx,ebp
c0018896:	56                   	push   esi
c0018897:	0f b6 c9             	movzx  ecx,cl
c001889a:	51                   	push   ecx
c001889b:	52                   	push   edx
c001889c:	50                   	push   eax
c001889d:	57                   	push   edi
c001889e:	e8 ad fc ff ff       	call   c0018550 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c00188a3:	89 c2                	mov    edx,eax
c00188a5:	ed                   	in     eax,dx
c00188a6:	83 c4 20             	add    esp,0x20
c00188a9:	0f b7 db             	movzx  ebx,bx
c00188ac:	f6 c2 02             	test   dl,0x2
c00188af:	74 0c                	je     c00188bd <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc5>
c00188b1:	0f b7 c8             	movzx  ecx,ax
c00188b4:	89 d8                	mov    eax,ebx
c00188b6:	c1 e0 10             	shl    eax,0x10
c00188b9:	09 c8                	or     eax,ecx
c00188bb:	eb 05                	jmp    c00188c2 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c00188bd:	66 31 c0             	xor    ax,ax
c00188c0:	09 d8                	or     eax,ebx
c00188c2:	ef                   	out    dx,eax
c00188c3:	83 c4 0c             	add    esp,0xc
c00188c6:	5b                   	pop    ebx
c00188c7:	5e                   	pop    esi
c00188c8:	5f                   	pop    edi
c00188c9:	5d                   	pop    ebp
c00188ca:	c3                   	ret    
c00188cb:	c7 44 24 20 b3 f0 01 c0 	mov    DWORD PTR [esp+0x20],0xc001f0b3
c00188d3:	83 c4 0c             	add    esp,0xc
c00188d6:	5b                   	pop    ebx
c00188d7:	5e                   	pop    esi
c00188d8:	5f                   	pop    edi
c00188d9:	5d                   	pop    ebp
c00188da:	e9 60 7e ff ff       	jmp    c001073f <Krnl::panic(char const*)>
c00188df:	90                   	nop

c00188e0 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>:
c00188e0:	55                   	push   ebp
c00188e1:	57                   	push   edi
c00188e2:	56                   	push   esi
c00188e3:	53                   	push   ebx
c00188e4:	81 ec 2c 01 00 00    	sub    esp,0x12c
c00188ea:	80 3d ec 46 02 c0 00 	cmp    BYTE PTR ds:0xc00246ec,0x0
c00188f1:	0f 85 84 00 00 00    	jne    c001897b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x9b>
c00188f7:	83 ec 0c             	sub    esp,0xc
c00188fa:	68 14 01 00 00       	push   0x114
c00188ff:	e8 5d f5 fe ff       	call   c0007e61 <malloc>
c0018904:	83 c4 0c             	add    esp,0xc
c0018907:	89 c3                	mov    ebx,eax
c0018909:	ff 35 30 3d 02 c0    	push   DWORD PTR ds:0xc0023d30
c001890f:	68 b9 f0 01 c0       	push   0xc001f0b9
c0018914:	50                   	push   eax
c0018915:	e8 4c 28 ff ff       	call   c000b166 <File::File(char const*, Process*)>
c001891a:	5a                   	pop    edx
c001891b:	59                   	pop    ecx
c001891c:	6a 01                	push   0x1
c001891e:	53                   	push   ebx
c001891f:	e8 02 29 ff ff       	call   c000b226 <File::open(FileOpenMode)>
c0018924:	83 c4 0c             	add    esp,0xc
c0018927:	8d 44 24 1f          	lea    eax,[esp+0x1f]
c001892b:	50                   	push   eax
c001892c:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018930:	50                   	push   eax
c0018931:	53                   	push   ebx
c0018932:	e8 9b 2b ff ff       	call   c000b4d2 <File::stat(unsigned long long*, bool*)>
c0018937:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001893b:	40                   	inc    eax
c001893c:	89 04 24             	mov    DWORD PTR [esp],eax
c001893f:	e8 1d f5 fe ff       	call   c0007e61 <malloc>
c0018944:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0018948:	a3 e8 46 02 c0       	mov    ds:0xc00246e8,eax
c001894d:	c6 04 10 00          	mov    BYTE PTR [eax+edx*1],0x0
c0018951:	5e                   	pop    esi
c0018952:	8b 13                	mov    edx,DWORD PTR [ebx]
c0018954:	8d 4c 24 28          	lea    ecx,[esp+0x28]
c0018958:	51                   	push   ecx
c0018959:	50                   	push   eax
c001895a:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c001895e:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0018962:	53                   	push   ebx
c0018963:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0018966:	83 c4 14             	add    esp,0x14
c0018969:	53                   	push   ebx
c001896a:	e8 15 29 ff ff       	call   c000b284 <File::close()>
c001896f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018973:	83 c4 10             	add    esp,0x10
c0018976:	a3 e4 46 02 c0       	mov    ds:0xc00246e4,eax
c001897b:	a1 e4 46 02 c0       	mov    eax,ds:0xc00246e4
c0018980:	8b 15 e8 46 02 c0    	mov    edx,DWORD PTR ds:0xc00246e8
c0018986:	89 04 24             	mov    DWORD PTR [esp],eax
c0018989:	31 ff                	xor    edi,edi
c001898b:	66 8b 84 24 42 01 00 00 	mov    ax,WORD PTR [esp+0x142]
c0018993:	31 f6                	xor    esi,esi
c0018995:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c001899a:	31 db                	xor    ebx,ebx
c001899c:	66 8b 84 24 62 01 00 00 	mov    ax,WORD PTR [esp+0x162]
c00189a4:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c00189a9:	8a 84 24 40 01 00 00 	mov    al,BYTE PTR [esp+0x140]
c00189b0:	88 44 24 0a          	mov    BYTE PTR [esp+0xa],al
c00189b4:	8a 84 24 41 01 00 00 	mov    al,BYTE PTR [esp+0x141]
c00189bb:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c00189bf:	39 3c 24             	cmp    DWORD PTR [esp],edi
c00189c2:	0f 8e 6b 01 00 00    	jle    c0018b33 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x253>
c00189c8:	8a 04 3a             	mov    al,BYTE PTR [edx+edi*1]
c00189cb:	d4 40                	aam    0x40
c00189cd:	d5 39                	aad    0x39
c00189cf:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00189d3:	8a 44 3a 01          	mov    al,BYTE PTR [edx+edi*1+0x1]
c00189d7:	d4 40                	aam    0x40
c00189d9:	d5 39                	aad    0x39
c00189db:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c00189df:	8a 44 3a 03          	mov    al,BYTE PTR [edx+edi*1+0x3]
c00189e3:	d4 40                	aam    0x40
c00189e5:	d5 39                	aad    0x39
c00189e7:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c00189eb:	8a 44 3a 04          	mov    al,BYTE PTR [edx+edi*1+0x4]
c00189ef:	d4 40                	aam    0x40
c00189f1:	d5 39                	aad    0x39
c00189f3:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00189f7:	8a 44 3a 06          	mov    al,BYTE PTR [edx+edi*1+0x6]
c00189fb:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c00189ff:	3c 56                	cmp    al,0x56
c0018a01:	74 45                	je     c0018a48 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x168>
c0018a03:	d4 40                	aam    0x40
c0018a05:	d5 39                	aad    0x39
c0018a07:	8d 48 d0             	lea    ecx,[eax-0x30]
c0018a0a:	8a 44 3a 07          	mov    al,BYTE PTR [edx+edi*1+0x7]
c0018a0e:	0f b6 c9             	movzx  ecx,cl
c0018a11:	c1 e1 04             	shl    ecx,0x4
c0018a14:	d4 40                	aam    0x40
c0018a16:	d5 39                	aad    0x39
c0018a18:	8d 58 d0             	lea    ebx,[eax-0x30]
c0018a1b:	8a 44 3a 08          	mov    al,BYTE PTR [edx+edi*1+0x8]
c0018a1f:	0f b6 db             	movzx  ebx,bl
c0018a22:	09 cb                	or     ebx,ecx
c0018a24:	c1 e3 04             	shl    ebx,0x4
c0018a27:	d4 40                	aam    0x40
c0018a29:	d5 39                	aad    0x39
c0018a2b:	8d 48 d0             	lea    ecx,[eax-0x30]
c0018a2e:	8a 44 3a 09          	mov    al,BYTE PTR [edx+edi*1+0x9]
c0018a32:	0f b6 c9             	movzx  ecx,cl
c0018a35:	09 cb                	or     ebx,ecx
c0018a37:	c1 e3 04             	shl    ebx,0x4
c0018a3a:	89 d9                	mov    ecx,ebx
c0018a3c:	d4 40                	aam    0x40
c0018a3e:	d5 39                	aad    0x39
c0018a40:	8d 58 d0             	lea    ebx,[eax-0x30]
c0018a43:	0f b6 db             	movzx  ebx,bl
c0018a46:	09 cb                	or     ebx,ecx
c0018a48:	8a 4c 3a 0b          	mov    cl,BYTE PTR [edx+edi*1+0xb]
c0018a4c:	80 f9 44             	cmp    cl,0x44
c0018a4f:	74 47                	je     c0018a98 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1b8>
c0018a51:	88 c8                	mov    al,cl
c0018a53:	d4 40                	aam    0x40
c0018a55:	d5 39                	aad    0x39
c0018a57:	83 e8 30             	sub    eax,0x30
c0018a5a:	0f b6 e8             	movzx  ebp,al
c0018a5d:	8a 44 3a 0c          	mov    al,BYTE PTR [edx+edi*1+0xc]
c0018a61:	c1 e5 04             	shl    ebp,0x4
c0018a64:	d4 40                	aam    0x40
c0018a66:	d5 39                	aad    0x39
c0018a68:	83 e8 30             	sub    eax,0x30
c0018a6b:	0f b6 f0             	movzx  esi,al
c0018a6e:	8a 44 3a 0d          	mov    al,BYTE PTR [edx+edi*1+0xd]
c0018a72:	09 ee                	or     esi,ebp
c0018a74:	c1 e6 04             	shl    esi,0x4
c0018a77:	d4 40                	aam    0x40
c0018a79:	d5 39                	aad    0x39
c0018a7b:	83 e8 30             	sub    eax,0x30
c0018a7e:	0f b6 e8             	movzx  ebp,al
c0018a81:	8a 44 3a 0e          	mov    al,BYTE PTR [edx+edi*1+0xe]
c0018a85:	09 ee                	or     esi,ebp
c0018a87:	c1 e6 04             	shl    esi,0x4
c0018a8a:	89 f5                	mov    ebp,esi
c0018a8c:	d4 40                	aam    0x40
c0018a8e:	d5 39                	aad    0x39
c0018a90:	83 e8 30             	sub    eax,0x30
c0018a93:	0f b6 f0             	movzx  esi,al
c0018a96:	09 ee                	or     esi,ebp
c0018a98:	83 c7 10             	add    edi,0x10
c0018a9b:	8d 6c 24 20          	lea    ebp,[esp+0x20]
c0018a9f:	8a 04 3a             	mov    al,BYTE PTR [edx+edi*1]
c0018aa2:	3c 0a                	cmp    al,0xa
c0018aa4:	74 09                	je     c0018aaf <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1cf>
c0018aa6:	45                   	inc    ebp
c0018aa7:	39 3c 24             	cmp    DWORD PTR [esp],edi
c0018aaa:	75 16                	jne    c0018ac2 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1e2>
c0018aac:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0018aaf:	3c 0a                	cmp    al,0xa
c0018ab1:	0f 94 c0             	sete   al
c0018ab4:	0f b6 c0             	movzx  eax,al
c0018ab7:	01 c7                	add    edi,eax
c0018ab9:	80 7c 24 05 56       	cmp    BYTE PTR [esp+0x5],0x56
c0018abe:	75 0c                	jne    c0018acc <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1ec>
c0018ac0:	eb 15                	jmp    c0018ad7 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1f7>
c0018ac2:	47                   	inc    edi
c0018ac3:	88 45 ff             	mov    BYTE PTR [ebp-0x1],al
c0018ac6:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c0018aca:	eb d3                	jmp    c0018a9f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1bf>
c0018acc:	66 39 5c 24 06       	cmp    WORD PTR [esp+0x6],bx
c0018ad1:	0f 85 e8 fe ff ff    	jne    c00189bf <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c0018ad7:	80 f9 44             	cmp    cl,0x44
c0018ada:	74 0b                	je     c0018ae7 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x207>
c0018adc:	66 39 74 24 08       	cmp    WORD PTR [esp+0x8],si
c0018ae1:	0f 85 d8 fe ff ff    	jne    c00189bf <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c0018ae7:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c0018aeb:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0018aef:	c1 e1 04             	shl    ecx,0x4
c0018af2:	83 e8 30             	sub    eax,0x30
c0018af5:	09 c8                	or     eax,ecx
c0018af7:	38 44 24 0a          	cmp    BYTE PTR [esp+0xa],al
c0018afb:	0f 85 be fe ff ff    	jne    c00189bf <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c0018b01:	8a 4c 24 0e          	mov    cl,BYTE PTR [esp+0xe]
c0018b05:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0018b09:	c1 e1 04             	shl    ecx,0x4
c0018b0c:	83 e8 30             	sub    eax,0x30
c0018b0f:	09 c8                	or     eax,ecx
c0018b11:	38 44 24 0b          	cmp    BYTE PTR [esp+0xb],al
c0018b15:	0f 85 a4 fe ff ff    	jne    c00189bf <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c0018b1b:	50                   	push   eax
c0018b1c:	50                   	push   eax
c0018b1d:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018b21:	50                   	push   eax
c0018b22:	ff b4 24 70 01 00 00 	push   DWORD PTR [esp+0x170]
c0018b29:	e8 f2 7a fe ff       	call   c0000620 <strcpy>
c0018b2e:	83 c4 10             	add    esp,0x10
c0018b31:	eb 15                	jmp    c0018b48 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x268>
c0018b33:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c0018b3a:	c7 84 24 64 01 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x164],0x0
c0018b45:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0018b48:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c0018b4f:	81 c4 2c 01 00 00    	add    esp,0x12c
c0018b55:	5b                   	pop    ebx
c0018b56:	5e                   	pop    esi
c0018b57:	5f                   	pop    edi
c0018b58:	5d                   	pop    ebp
c0018b59:	c3                   	ret    

c0018b5a <PCI::checkBus(unsigned char)>:
c0018b5a:	56                   	push   esi
c0018b5b:	53                   	push   ebx
c0018b5c:	31 f6                	xor    esi,esi
c0018b5e:	51                   	push   ecx
c0018b5f:	8a 5c 24 14          	mov    bl,BYTE PTR [esp+0x14]
c0018b63:	0f b6 c3             	movzx  eax,bl
c0018b66:	52                   	push   edx
c0018b67:	56                   	push   esi
c0018b68:	46                   	inc    esi
c0018b69:	50                   	push   eax
c0018b6a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018b6e:	e8 f3 02 00 00       	call   c0018e66 <PCI::checkDevice(unsigned char, unsigned char)>
c0018b73:	83 c4 10             	add    esp,0x10
c0018b76:	83 fe 20             	cmp    esi,0x20
c0018b79:	75 e8                	jne    c0018b63 <PCI::checkBus(unsigned char)+0x9>
c0018b7b:	58                   	pop    eax
c0018b7c:	5b                   	pop    ebx
c0018b7d:	5e                   	pop    esi
c0018b7e:	c3                   	ret    
c0018b7f:	90                   	nop

c0018b80 <PCI::foundDevice(PCIDeviceInfo)>:
c0018b80:	55                   	push   ebp
c0018b81:	57                   	push   edi
c0018b82:	56                   	push   esi
c0018b83:	53                   	push   ebx
c0018b84:	83 ec 1c             	sub    esp,0x1c
c0018b87:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0018b8b:	66 83 7c 24 36 ff    	cmp    WORD PTR [esp+0x36],0xffff
c0018b91:	0f 84 52 01 00 00    	je     c0018ce9 <PCI::foundDevice(PCIDeviceInfo)+0x169>
c0018b97:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0018b9b:	66 81 f9 06 04       	cmp    cx,0x406
c0018ba0:	75 2c                	jne    c0018bce <PCI::foundDevice(PCIDeviceInfo)+0x4e>
c0018ba2:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c0018ba7:	50                   	push   eax
c0018ba8:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c0018bad:	50                   	push   eax
c0018bae:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c0018bb3:	50                   	push   eax
c0018bb4:	56                   	push   esi
c0018bb5:	e8 b2 fb ff ff       	call   c001876c <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c0018bba:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c0018bbe:	0f b6 c0             	movzx  eax,al
c0018bc1:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0018bc5:	83 c4 2c             	add    esp,0x2c
c0018bc8:	5b                   	pop    ebx
c0018bc9:	5e                   	pop    esi
c0018bca:	5f                   	pop    edi
c0018bcb:	5d                   	pop    ebp
c0018bcc:	eb 8c                	jmp    c0018b5a <PCI::checkBus(unsigned char)>
c0018bce:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0018bd2:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0018bd8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0018bdc:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0018be0:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c0018be4:	88 d3                	mov    bl,dl
c0018be6:	85 c0                	test   eax,eax
c0018be8:	74 33                	je     c0018c1d <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c0018bea:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0018bed:	85 d2                	test   edx,edx
c0018bef:	74 28                	je     c0018c19 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0018bf1:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c0018bf7:	31 ef                	xor    edi,ebp
c0018bf9:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c0018bff:	75 18                	jne    c0018c19 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0018c01:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0018c05:	39 ba 20 01 00 00    	cmp    DWORD PTR [edx+0x120],edi
c0018c0b:	75 0c                	jne    c0018c19 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0018c0d:	38 9a 38 01 00 00    	cmp    BYTE PTR [edx+0x138],bl
c0018c13:	0f 84 d0 00 00 00    	je     c0018ce9 <PCI::foundDevice(PCIDeviceInfo)+0x169>
c0018c19:	8b 00                	mov    eax,DWORD PTR [eax]
c0018c1b:	eb c9                	jmp    c0018be6 <PCI::foundDevice(PCIDeviceInfo)+0x66>
c0018c1d:	66 81 f9 01 06       	cmp    cx,0x601
c0018c22:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c0018c26:	75 19                	jne    c0018c41 <PCI::foundDevice(PCIDeviceInfo)+0xc1>
c0018c28:	83 ec 0c             	sub    esp,0xc
c0018c2b:	68 64 01 00 00       	push   0x164
c0018c30:	e8 2c f2 fe ff       	call   c0007e61 <malloc>
c0018c35:	89 c5                	mov    ebp,eax
c0018c37:	89 04 24             	mov    DWORD PTR [esp],eax
c0018c3a:	e8 47 0e 00 00       	call   c0019a86 <SATABus::SATABus()>
c0018c3f:	eb 1e                	jmp    c0018c5f <PCI::foundDevice(PCIDeviceInfo)+0xdf>
c0018c41:	66 81 f9 01 01       	cmp    cx,0x101
c0018c46:	75 60                	jne    c0018ca8 <PCI::foundDevice(PCIDeviceInfo)+0x128>
c0018c48:	83 ec 0c             	sub    esp,0xc
c0018c4b:	68 70 02 00 00       	push   0x270
c0018c50:	e8 0c f2 fe ff       	call   c0007e61 <malloc>
c0018c55:	89 c5                	mov    ebp,eax
c0018c57:	89 04 24             	mov    DWORD PTR [esp],eax
c0018c5a:	e8 cb 02 00 00       	call   c0018f2a <IDE::IDE()>
c0018c5f:	58                   	pop    eax
c0018c60:	5a                   	pop    edx
c0018c61:	55                   	push   ebp
c0018c62:	56                   	push   esi
c0018c63:	e8 c8 33 ff ff       	call   c000c030 <Device::addChild(Device*)>
c0018c68:	83 ec 1c             	sub    esp,0x1c
c0018c6b:	b9 09 00 00 00       	mov    ecx,0x9
c0018c70:	fc                   	cld    
c0018c71:	89 e7                	mov    edi,esp
c0018c73:	89 de                	mov    esi,ebx
c0018c75:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0018c77:	55                   	push   ebp
c0018c78:	e8 f9 32 ff ff       	call   c000bf76 <Device::preOpenPCI(PCIDeviceInfo)>
c0018c7d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0018c80:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c0018c84:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c0018c8c:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c0018c94:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c0018c9c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0018c9f:	83 c4 4c             	add    esp,0x4c
c0018ca2:	5b                   	pop    ebx
c0018ca3:	5e                   	pop    esi
c0018ca4:	5f                   	pop    edi
c0018ca5:	5d                   	pop    ebp
c0018ca6:	ff e0                	jmp    eax
c0018ca8:	83 ec 0c             	sub    esp,0xc
c0018cab:	68 58 01 00 00       	push   0x158
c0018cb0:	e8 ac f1 fe ff       	call   c0007e61 <malloc>
c0018cb5:	89 c5                	mov    ebp,eax
c0018cb7:	58                   	pop    eax
c0018cb8:	5a                   	pop    edx
c0018cb9:	68 d2 f0 01 c0       	push   0xc001f0d2
c0018cbe:	55                   	push   ebp
c0018cbf:	e8 0a 36 ff ff       	call   c000c2ce <DriverlessDevice::DriverlessDevice(char const*)>
c0018cc4:	59                   	pop    ecx
c0018cc5:	5f                   	pop    edi
c0018cc6:	55                   	push   ebp
c0018cc7:	56                   	push   esi
c0018cc8:	e8 63 33 ff ff       	call   c000c030 <Device::addChild(Device*)>
c0018ccd:	b9 09 00 00 00       	mov    ecx,0x9
c0018cd2:	fc                   	cld    
c0018cd3:	89 df                	mov    edi,ebx
c0018cd5:	89 de                	mov    esi,ebx
c0018cd7:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0018cd9:	89 6c 24 40          	mov    DWORD PTR [esp+0x40],ebp
c0018cdd:	83 c4 2c             	add    esp,0x2c
c0018ce0:	5b                   	pop    ebx
c0018ce1:	5e                   	pop    esi
c0018ce2:	5f                   	pop    edi
c0018ce3:	5d                   	pop    ebp
c0018ce4:	e9 8d 32 ff ff       	jmp    c000bf76 <Device::preOpenPCI(PCIDeviceInfo)>
c0018ce9:	83 c4 1c             	add    esp,0x1c
c0018cec:	5b                   	pop    ebx
c0018ced:	5e                   	pop    esi
c0018cee:	5f                   	pop    edi
c0018cef:	5d                   	pop    ebp
c0018cf0:	c3                   	ret    
c0018cf1:	90                   	nop

c0018cf2 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c0018cf2:	55                   	push   ebp
c0018cf3:	57                   	push   edi
c0018cf4:	56                   	push   esi
c0018cf5:	53                   	push   ebx
c0018cf6:	83 ec 68             	sub    esp,0x68
c0018cf9:	8b 6c 24 7c          	mov    ebp,DWORD PTR [esp+0x7c]
c0018cfd:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0018d04:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0018d08:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0018d0f:	0f b6 74 24 1c       	movzx  esi,BYTE PTR [esp+0x1c]
c0018d14:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0018d18:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0018d1f:	0f b6 5c 24 20       	movzx  ebx,BYTE PTR [esp+0x20]
c0018d24:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0018d28:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c0018d2d:	6a 0c                	push   0xc
c0018d2f:	57                   	push   edi
c0018d30:	53                   	push   ebx
c0018d31:	56                   	push   esi
c0018d32:	55                   	push   ebp
c0018d33:	e8 86 f8 ff ff       	call   c00185be <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018d38:	83 c4 20             	add    esp,0x20
c0018d3b:	57                   	push   edi
c0018d3c:	53                   	push   ebx
c0018d3d:	56                   	push   esi
c0018d3e:	55                   	push   ebp
c0018d3f:	e8 6e f9 ff ff       	call   c00186b2 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c0018d44:	66 89 44 24 2e       	mov    WORD PTR [esp+0x2e],ax
c0018d49:	57                   	push   edi
c0018d4a:	53                   	push   ebx
c0018d4b:	56                   	push   esi
c0018d4c:	55                   	push   ebp
c0018d4d:	e8 f6 f9 ff ff       	call   c0018748 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c0018d52:	88 44 24 3d          	mov    BYTE PTR [esp+0x3d],al
c0018d56:	83 c4 14             	add    esp,0x14
c0018d59:	6a 3c                	push   0x3c
c0018d5b:	57                   	push   edi
c0018d5c:	53                   	push   ebx
c0018d5d:	56                   	push   esi
c0018d5e:	55                   	push   ebp
c0018d5f:	e8 5a f8 ff ff       	call   c00185be <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018d64:	0f b6 c4             	movzx  eax,ah
c0018d67:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0018d6b:	8a 44 24 2c          	mov    al,BYTE PTR [esp+0x2c]
c0018d6f:	88 44 24 6d          	mov    BYTE PTR [esp+0x6d],al
c0018d73:	a1 44 08 02 c0       	mov    eax,ds:0xc0020844
c0018d78:	8b 90 68 01 00 00    	mov    edx,DWORD PTR [eax+0x168]
c0018d7e:	8b 82 5c 11 00 00    	mov    eax,DWORD PTR [edx+0x115c]
c0018d84:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0018d88:	83 c4 20             	add    esp,0x20
c0018d8b:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0018d90:	74 30                	je     c0018dc2 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c0018d92:	31 c0                	xor    eax,eax
c0018d94:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c0018d98:	7e 28                	jle    c0018dc2 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c0018d9a:	0f b7 8c c2 5c 01 00 00 	movzx  ecx,WORD PTR [edx+eax*8+0x15c]
c0018da2:	39 cb                	cmp    ebx,ecx
c0018da4:	75 19                	jne    c0018dbf <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c0018da6:	0f b6 8c c2 5e 01 00 00 	movzx  ecx,BYTE PTR [edx+eax*8+0x15e]
c0018dae:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c0018db2:	75 0b                	jne    c0018dbf <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c0018db4:	8a 8c c2 5f 01 00 00 	mov    cl,BYTE PTR [edx+eax*8+0x15f]
c0018dbb:	88 4c 24 1d          	mov    BYTE PTR [esp+0x1d],cl
c0018dbf:	40                   	inc    eax
c0018dc0:	eb d2                	jmp    c0018d94 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xa2>
c0018dc2:	31 d2                	xor    edx,edx
c0018dc4:	83 ec 0c             	sub    esp,0xc
c0018dc7:	57                   	push   edi
c0018dc8:	53                   	push   ebx
c0018dc9:	56                   	push   esi
c0018dca:	52                   	push   edx
c0018dcb:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0018dcf:	55                   	push   ebp
c0018dd0:	e8 bf f9 ff ff       	call   c0018794 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018dd5:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018dd9:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c0018ddd:	42                   	inc    edx
c0018dde:	83 c4 20             	add    esp,0x20
c0018de1:	83 fa 06             	cmp    edx,0x6
c0018de4:	75 de                	jne    c0018dc4 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd2>
c0018de6:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0018deb:	83 ec 0c             	sub    esp,0xc
c0018dee:	86 e0                	xchg   al,ah
c0018df0:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c0018df5:	6a 02                	push   0x2
c0018df7:	57                   	push   edi
c0018df8:	53                   	push   ebx
c0018df9:	56                   	push   esi
c0018dfa:	55                   	push   ebp
c0018dfb:	e8 be f7 ff ff       	call   c00185be <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018e00:	66 89 44 24 6e       	mov    WORD PTR [esp+0x6e],ax
c0018e05:	83 c4 20             	add    esp,0x20
c0018e08:	57                   	push   edi
c0018e09:	53                   	push   ebx
c0018e0a:	56                   	push   esi
c0018e0b:	55                   	push   ebp
c0018e0c:	e8 eb f8 ff ff       	call   c00186fc <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c0018e11:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0018e15:	57                   	push   edi
c0018e16:	53                   	push   ebx
c0018e17:	56                   	push   esi
c0018e18:	55                   	push   ebp
c0018e19:	e8 48 f8 ff ff       	call   c0018666 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0018e1e:	b9 09 00 00 00       	mov    ecx,0x9
c0018e23:	66 89 44 24 4e       	mov    WORD PTR [esp+0x4e],ax
c0018e28:	8a 44 24 3d          	mov    al,BYTE PTR [esp+0x3d]
c0018e2c:	88 44 24 6c          	mov    BYTE PTR [esp+0x6c],al
c0018e30:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c0018e34:	88 44 24 50          	mov    BYTE PTR [esp+0x50],al
c0018e38:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c0018e3c:	88 44 24 51          	mov    BYTE PTR [esp+0x51],al
c0018e40:	8a 44 24 38          	mov    al,BYTE PTR [esp+0x38]
c0018e44:	88 44 24 52          	mov    BYTE PTR [esp+0x52],al
c0018e48:	83 ec 0c             	sub    esp,0xc
c0018e4b:	fc                   	cld    
c0018e4c:	89 e7                	mov    edi,esp
c0018e4e:	8d 74 24 58          	lea    esi,[esp+0x58]
c0018e52:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0018e54:	55                   	push   ebp
c0018e55:	e8 26 fd ff ff       	call   c0018b80 <PCI::foundDevice(PCIDeviceInfo)>
c0018e5a:	81 c4 8c 00 00 00    	add    esp,0x8c
c0018e60:	5b                   	pop    ebx
c0018e61:	5e                   	pop    esi
c0018e62:	5f                   	pop    edi
c0018e63:	5d                   	pop    ebp
c0018e64:	c3                   	ret    
c0018e65:	90                   	nop

c0018e66 <PCI::checkDevice(unsigned char, unsigned char)>:
c0018e66:	55                   	push   ebp
c0018e67:	57                   	push   edi
c0018e68:	56                   	push   esi
c0018e69:	53                   	push   ebx
c0018e6a:	83 ec 0c             	sub    esp,0xc
c0018e6d:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0018e71:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c0018e76:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c0018e7b:	6a 00                	push   0x0
c0018e7d:	56                   	push   esi
c0018e7e:	57                   	push   edi
c0018e7f:	55                   	push   ebp
c0018e80:	e8 e1 f7 ff ff       	call   c0018666 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0018e85:	6a 00                	push   0x0
c0018e87:	56                   	push   esi
c0018e88:	57                   	push   edi
c0018e89:	55                   	push   ebp
c0018e8a:	e8 63 fe ff ff       	call   c0018cf2 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0018e8f:	83 c4 20             	add    esp,0x20
c0018e92:	6a 00                	push   0x0
c0018e94:	56                   	push   esi
c0018e95:	57                   	push   edi
c0018e96:	55                   	push   ebp
c0018e97:	e8 ee f7 ff ff       	call   c001868a <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0018e9c:	83 c4 10             	add    esp,0x10
c0018e9f:	84 c0                	test   al,al
c0018ea1:	79 27                	jns    c0018eca <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c0018ea3:	bb 01 00 00 00       	mov    ebx,0x1
c0018ea8:	53                   	push   ebx
c0018ea9:	56                   	push   esi
c0018eaa:	57                   	push   edi
c0018eab:	55                   	push   ebp
c0018eac:	e8 b5 f7 ff ff       	call   c0018666 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0018eb1:	83 c4 10             	add    esp,0x10
c0018eb4:	66 40                	inc    ax
c0018eb6:	74 0c                	je     c0018ec4 <PCI::checkDevice(unsigned char, unsigned char)+0x5e>
c0018eb8:	53                   	push   ebx
c0018eb9:	56                   	push   esi
c0018eba:	57                   	push   edi
c0018ebb:	55                   	push   ebp
c0018ebc:	e8 31 fe ff ff       	call   c0018cf2 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0018ec1:	83 c4 10             	add    esp,0x10
c0018ec4:	43                   	inc    ebx
c0018ec5:	83 fb 08             	cmp    ebx,0x8
c0018ec8:	75 de                	jne    c0018ea8 <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c0018eca:	83 c4 0c             	add    esp,0xc
c0018ecd:	5b                   	pop    ebx
c0018ece:	5e                   	pop    esi
c0018ecf:	5f                   	pop    edi
c0018ed0:	5d                   	pop    ebp
c0018ed1:	c3                   	ret    

c0018ed2 <PCI::detect()>:
c0018ed2:	56                   	push   esi
c0018ed3:	53                   	push   ebx
c0018ed4:	53                   	push   ebx
c0018ed5:	31 db                	xor    ebx,ebx
c0018ed7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0018edb:	6a 00                	push   0x0
c0018edd:	6a 00                	push   0x0
c0018edf:	6a 00                	push   0x0
c0018ee1:	56                   	push   esi
c0018ee2:	e8 a3 f7 ff ff       	call   c001868a <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0018ee7:	83 c4 10             	add    esp,0x10
c0018eea:	a8 80                	test   al,0x80
c0018eec:	75 21                	jne    c0018f0f <PCI::detect()+0x3d>
c0018eee:	51                   	push   ecx
c0018eef:	51                   	push   ecx
c0018ef0:	6a 00                	push   0x0
c0018ef2:	56                   	push   esi
c0018ef3:	e8 62 fc ff ff       	call   c0018b5a <PCI::checkBus(unsigned char)>
c0018ef8:	83 c4 10             	add    esp,0x10
c0018efb:	eb 24                	jmp    c0018f21 <PCI::detect()+0x4f>
c0018efd:	52                   	push   edx
c0018efe:	52                   	push   edx
c0018eff:	53                   	push   ebx
c0018f00:	43                   	inc    ebx
c0018f01:	56                   	push   esi
c0018f02:	e8 53 fc ff ff       	call   c0018b5a <PCI::checkBus(unsigned char)>
c0018f07:	83 c4 10             	add    esp,0x10
c0018f0a:	83 fb 08             	cmp    ebx,0x8
c0018f0d:	74 12                	je     c0018f21 <PCI::detect()+0x4f>
c0018f0f:	53                   	push   ebx
c0018f10:	6a 00                	push   0x0
c0018f12:	6a 00                	push   0x0
c0018f14:	56                   	push   esi
c0018f15:	e8 4c f7 ff ff       	call   c0018666 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0018f1a:	83 c4 10             	add    esp,0x10
c0018f1d:	66 40                	inc    ax
c0018f1f:	74 dc                	je     c0018efd <PCI::detect()+0x2b>
c0018f21:	58                   	pop    eax
c0018f22:	5b                   	pop    ebx
c0018f23:	5e                   	pop    esi
c0018f24:	c3                   	ret    
c0018f25:	90                   	nop

c0018f26 <IDE::close(int, int, void*)>:
c0018f26:	83 c8 ff             	or     eax,0xffffffff
c0018f29:	c3                   	ret    

c0018f2a <IDE::IDE()>:
c0018f2a:	83 ec 0c             	sub    esp,0xc
c0018f2d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018f31:	83 ec 08             	sub    esp,0x8
c0018f34:	68 18 f1 01 c0       	push   0xc001f118
c0018f39:	50                   	push   eax
c0018f3a:	e8 35 34 ff ff       	call   c000c374 <HardDiskController::HardDiskController(char const*)>
c0018f3f:	83 c4 10             	add    esp,0x10
c0018f42:	ba a8 f1 01 c0       	mov    edx,0xc001f1a8
c0018f47:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018f4b:	89 10                	mov    DWORD PTR [eax],edx
c0018f4d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018f51:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c0018f58:	90                   	nop
c0018f59:	83 c4 0c             	add    esp,0xc
c0018f5c:	c3                   	ret    
c0018f5d:	90                   	nop

c0018f5e <IDE::prepareInterrupt(unsigned char)>:
c0018f5e:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0018f63:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0018f67:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c0018f6f:	c3                   	ret    

c0018f70 <selectDrive(unsigned char, unsigned char)>:
c0018f70:	c3                   	ret    
c0018f71:	90                   	nop

c0018f72 <IDE::getBase(unsigned char)>:
c0018f72:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0018f77:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018f7b:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c0018f83:	c3                   	ret    

c0018f84 <IDE::write(unsigned char, unsigned char, unsigned char)>:
c0018f84:	55                   	push   ebp
c0018f85:	57                   	push   edi
c0018f86:	56                   	push   esi
c0018f87:	53                   	push   ebx
c0018f88:	83 ec 1c             	sub    esp,0x1c
c0018f8b:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0018f8f:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0018f93:	8d 4b f8             	lea    ecx,[ebx-0x8]
c0018f96:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0018f9a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0018f9e:	80 f9 03             	cmp    cl,0x3
c0018fa1:	77 51                	ja     c0018ff4 <IDE::write(unsigned char, unsigned char, unsigned char)+0x70>
c0018fa3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018fa7:	0f b6 f2             	movzx  esi,dl
c0018faa:	0f b6 db             	movzx  ebx,bl
c0018fad:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c0018fb0:	8a 54 ef 10          	mov    dl,BYTE PTR [edi+ebp*8+0x10]
c0018fb4:	83 ca 80             	or     edx,0xffffff80
c0018fb7:	0f b6 d2             	movzx  edx,dl
c0018fba:	52                   	push   edx
c0018fbb:	6a 0c                	push   0xc
c0018fbd:	56                   	push   esi
c0018fbe:	57                   	push   edi
c0018fbf:	e8 c0 ff ff ff       	call   c0018f84 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0018fc4:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c0018fc9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018fcd:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c0018fd1:	ee                   	out    dx,al
c0018fd2:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c0018fd7:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c0018fdb:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c0018fdf:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0018fe3:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c0018feb:	83 c4 2c             	add    esp,0x2c
c0018fee:	5b                   	pop    ebx
c0018fef:	5e                   	pop    esi
c0018ff0:	5f                   	pop    edi
c0018ff1:	5d                   	pop    ebp
c0018ff2:	eb 90                	jmp    c0018f84 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0018ff4:	80 fb 07             	cmp    bl,0x7
c0018ff7:	77 12                	ja     c001900b <IDE::write(unsigned char, unsigned char, unsigned char)+0x87>
c0018ff9:	0f b6 d2             	movzx  edx,dl
c0018ffc:	0f b6 db             	movzx  ebx,bl
c0018fff:	66 03 9c d7 5a 01 00 00 	add    bx,WORD PTR [edi+edx*8+0x15a]
c0019007:	89 da                	mov    edx,ebx
c0019009:	eb 2f                	jmp    c001903a <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c001900b:	80 fb 0d             	cmp    bl,0xd
c001900e:	77 13                	ja     c0019023 <IDE::write(unsigned char, unsigned char, unsigned char)+0x9f>
c0019010:	0f b6 d2             	movzx  edx,dl
c0019013:	0f b6 db             	movzx  ebx,bl
c0019016:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c001901d:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c0019021:	eb 17                	jmp    c001903a <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c0019023:	80 fb 15             	cmp    bl,0x15
c0019026:	77 13                	ja     c001903b <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c0019028:	0f b6 d2             	movzx  edx,dl
c001902b:	0f b6 db             	movzx  ebx,bl
c001902e:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c0019036:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c001903a:	ee                   	out    dx,al
c001903b:	83 c4 1c             	add    esp,0x1c
c001903e:	5b                   	pop    ebx
c001903f:	5e                   	pop    esi
c0019040:	5f                   	pop    edi
c0019041:	5d                   	pop    ebp
c0019042:	c3                   	ret    
c0019043:	90                   	nop

c0019044 <IDE::read(unsigned char, unsigned char)>:
c0019044:	55                   	push   ebp
c0019045:	57                   	push   edi
c0019046:	56                   	push   esi
c0019047:	53                   	push   ebx
c0019048:	83 ec 1c             	sub    esp,0x1c
c001904b:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001904f:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0019053:	8d 43 f8             	lea    eax,[ebx-0x8]
c0019056:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001905a:	3c 03                	cmp    al,0x3
c001905c:	77 43                	ja     c00190a1 <IDE::read(unsigned char, unsigned char)+0x5d>
c001905e:	0f b6 f2             	movzx  esi,dl
c0019061:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c0019064:	8a 44 ef 10          	mov    al,BYTE PTR [edi+ebp*8+0x10]
c0019068:	83 c8 80             	or     eax,0xffffff80
c001906b:	0f b6 c0             	movzx  eax,al
c001906e:	50                   	push   eax
c001906f:	6a 0c                	push   0xc
c0019071:	56                   	push   esi
c0019072:	57                   	push   edi
c0019073:	e8 0c ff ff ff       	call   c0018f84 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019078:	66 8b 4c ef 0a       	mov    cx,WORD PTR [edi+ebp*8+0xa]
c001907d:	0f b6 c3             	movzx  eax,bl
c0019080:	8d 54 01 fa          	lea    edx,[ecx+eax*1-0x6]
c0019084:	ec                   	in     al,dx
c0019085:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0019089:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c001908e:	52                   	push   edx
c001908f:	6a 0c                	push   0xc
c0019091:	56                   	push   esi
c0019092:	57                   	push   edi
c0019093:	e8 ec fe ff ff       	call   c0018f84 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019098:	83 c4 20             	add    esp,0x20
c001909b:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001909f:	eb 49                	jmp    c00190ea <IDE::read(unsigned char, unsigned char)+0xa6>
c00190a1:	80 fb 07             	cmp    bl,0x7
c00190a4:	77 12                	ja     c00190b8 <IDE::read(unsigned char, unsigned char)+0x74>
c00190a6:	0f b6 d2             	movzx  edx,dl
c00190a9:	0f b6 c3             	movzx  eax,bl
c00190ac:	66 03 84 d7 5a 01 00 00 	add    ax,WORD PTR [edi+edx*8+0x15a]
c00190b4:	89 c2                	mov    edx,eax
c00190b6:	eb 31                	jmp    c00190e9 <IDE::read(unsigned char, unsigned char)+0xa5>
c00190b8:	80 fb 0d             	cmp    bl,0xd
c00190bb:	77 13                	ja     c00190d0 <IDE::read(unsigned char, unsigned char)+0x8c>
c00190bd:	0f b6 d2             	movzx  edx,dl
c00190c0:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c00190c7:	0f b6 d3             	movzx  edx,bl
c00190ca:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c00190ce:	eb 19                	jmp    c00190e9 <IDE::read(unsigned char, unsigned char)+0xa5>
c00190d0:	31 c0                	xor    eax,eax
c00190d2:	80 fb 15             	cmp    bl,0x15
c00190d5:	77 13                	ja     c00190ea <IDE::read(unsigned char, unsigned char)+0xa6>
c00190d7:	0f b6 d2             	movzx  edx,dl
c00190da:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c00190e2:	0f b6 d3             	movzx  edx,bl
c00190e5:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c00190e9:	ec                   	in     al,dx
c00190ea:	83 c4 1c             	add    esp,0x1c
c00190ed:	5b                   	pop    ebx
c00190ee:	5e                   	pop    esi
c00190ef:	5f                   	pop    edi
c00190f0:	5d                   	pop    ebp
c00190f1:	c3                   	ret    

c00190f2 <IDE::waitInterrupt(unsigned char)>:
c00190f2:	57                   	push   edi
c00190f3:	56                   	push   esi
c00190f4:	31 f6                	xor    esi,esi
c00190f6:	53                   	push   ebx
c00190f7:	83 ec 10             	sub    esp,0x10
c00190fa:	8a 44 24 24          	mov    al,BYTE PTR [esp+0x24]
c00190fe:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0019102:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0019106:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001910b:	8a 9c 07 6c 02 00 00 	mov    bl,BYTE PTR [edi+eax*1+0x26c]
c0019112:	84 db                	test   bl,bl
c0019114:	75 33                	jne    c0019149 <IDE::waitInterrupt(unsigned char)+0x57>
c0019116:	52                   	push   edx
c0019117:	6a 0c                	push   0xc
c0019119:	50                   	push   eax
c001911a:	57                   	push   edi
c001911b:	e8 24 ff ff ff       	call   c0019044 <IDE::read(unsigned char, unsigned char)>
c0019120:	83 c4 10             	add    esp,0x10
c0019123:	a8 01                	test   al,0x1
c0019125:	75 2a                	jne    c0019151 <IDE::waitInterrupt(unsigned char)+0x5f>
c0019127:	f7 c6 04 00 00 00    	test   esi,0x4
c001912d:	75 12                	jne    c0019141 <IDE::waitInterrupt(unsigned char)+0x4f>
c001912f:	83 fe 32             	cmp    esi,0x32
c0019132:	7e 0d                	jle    c0019141 <IDE::waitInterrupt(unsigned char)+0x4f>
c0019134:	83 ec 0c             	sub    esp,0xc
c0019137:	6a 64                	push   0x64
c0019139:	e8 56 ac ff ff       	call   c0013d94 <milliTenthSleep(unsigned int)>
c001913e:	83 c4 10             	add    esp,0x10
c0019141:	83 fe 3c             	cmp    esi,0x3c
c0019144:	74 0b                	je     c0019151 <IDE::waitInterrupt(unsigned char)+0x5f>
c0019146:	46                   	inc    esi
c0019147:	eb bd                	jmp    c0019106 <IDE::waitInterrupt(unsigned char)+0x14>
c0019149:	c6 84 07 6c 02 00 00 00 	mov    BYTE PTR [edi+eax*1+0x26c],0x0
c0019151:	83 c4 10             	add    esp,0x10
c0019154:	88 d8                	mov    al,bl
c0019156:	5b                   	pop    ebx
c0019157:	5e                   	pop    esi
c0019158:	5f                   	pop    edi
c0019159:	c3                   	ret    

c001915a <ideChannel0IRQHandler(regs*, void*)>:
c001915a:	83 ec 10             	sub    esp,0x10
c001915d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0019161:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c0019168:	6a 07                	push   0x7
c001916a:	6a 00                	push   0x0
c001916c:	50                   	push   eax
c001916d:	e8 d2 fe ff ff       	call   c0019044 <IDE::read(unsigned char, unsigned char)>
c0019172:	83 c4 1c             	add    esp,0x1c
c0019175:	c3                   	ret    

c0019176 <ideChannel1IRQHandler(regs*, void*)>:
c0019176:	83 ec 10             	sub    esp,0x10
c0019179:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001917d:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c0019184:	6a 07                	push   0x7
c0019186:	6a 01                	push   0x1
c0019188:	50                   	push   eax
c0019189:	e8 b6 fe ff ff       	call   c0019044 <IDE::read(unsigned char, unsigned char)>
c001918e:	83 c4 1c             	add    esp,0x1c
c0019191:	c3                   	ret    

c0019192 <IDE::enableIRQs(unsigned char, bool)>:
c0019192:	57                   	push   edi
c0019193:	56                   	push   esi
c0019194:	be 04 00 00 00       	mov    esi,0x4
c0019199:	53                   	push   ebx
c001919a:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001919f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00191a3:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c00191a8:	0f 94 c0             	sete   al
c00191ab:	01 c0                	add    eax,eax
c00191ad:	88 84 fb 60 01 00 00 	mov    BYTE PTR [ebx+edi*8+0x160],al
c00191b4:	0f b6 c0             	movzx  eax,al
c00191b7:	50                   	push   eax
c00191b8:	6a 0c                	push   0xc
c00191ba:	57                   	push   edi
c00191bb:	53                   	push   ebx
c00191bc:	e8 c3 fd ff ff       	call   c0018f84 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00191c1:	83 c4 10             	add    esp,0x10
c00191c4:	50                   	push   eax
c00191c5:	6a 0c                	push   0xc
c00191c7:	57                   	push   edi
c00191c8:	53                   	push   ebx
c00191c9:	e8 76 fe ff ff       	call   c0019044 <IDE::read(unsigned char, unsigned char)>
c00191ce:	83 c4 10             	add    esp,0x10
c00191d1:	4e                   	dec    esi
c00191d2:	75 f0                	jne    c00191c4 <IDE::enableIRQs(unsigned char, bool)+0x32>
c00191d4:	5b                   	pop    ebx
c00191d5:	5e                   	pop    esi
c00191d6:	5f                   	pop    edi
c00191d7:	c3                   	ret    

c00191d8 <IDE::open(int, int, void*)>:
c00191d8:	55                   	push   ebp
c00191d9:	57                   	push   edi
c00191da:	56                   	push   esi
c00191db:	53                   	push   ebx
c00191dc:	83 ec 1c             	sub    esp,0x1c
c00191df:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00191e3:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c00191ec:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c00191f5:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c00191fc:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c0019203:	0f 85 b0 02 00 00    	jne    c00194b9 <IDE::open(int, int, void*)+0x2e1>
c0019209:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c001920f:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c0019213:	83 e0 7f             	and    eax,0x7f
c0019216:	3c 05                	cmp    al,0x5
c0019218:	74 04                	je     c001921e <IDE::open(int, int, void*)+0x46>
c001921a:	3c 0f                	cmp    al,0xf
c001921c:	75 32                	jne    c0019250 <IDE::open(int, int, void*)+0x78>
c001921e:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c0019224:	83 e0 fc             	and    eax,0xfffffffc
c0019227:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001922e:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c0019234:	83 e0 fc             	and    eax,0xfffffffc
c0019237:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001923e:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c0019244:	83 e0 fc             	and    eax,0xfffffffc
c0019247:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001924e:	eb 14                	jmp    c0019264 <IDE::open(int, int, void*)+0x8c>
c0019250:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c001925a:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c0019264:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c001926b:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c0019272:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0019276:	89 c6                	mov    esi,eax
c0019278:	bf f8 0c 00 00       	mov    edi,0xcf8
c001927d:	c1 e6 10             	shl    esi,0x10
c0019280:	89 e8                	mov    eax,ebp
c0019282:	89 fa                	mov    edx,edi
c0019284:	c1 e0 0b             	shl    eax,0xb
c0019287:	09 f0                	or     eax,esi
c0019289:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c0019290:	c1 e6 08             	shl    esi,0x8
c0019293:	09 c6                	or     esi,eax
c0019295:	89 f0                	mov    eax,esi
c0019297:	0d 08 00 00 80       	or     eax,0x80000008
c001929c:	ef                   	out    dx,eax
c001929d:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c00192a2:	89 ca                	mov    edx,ecx
c00192a4:	ed                   	in     eax,dx
c00192a5:	c1 e8 10             	shr    eax,0x10
c00192a8:	3d ff ff 00 00       	cmp    eax,0xffff
c00192ad:	0f 84 f5 00 00 00    	je     c00193a8 <IDE::open(int, int, void*)+0x1d0>
c00192b3:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c00192b9:	89 fa                	mov    edx,edi
c00192bb:	89 f0                	mov    eax,esi
c00192bd:	ef                   	out    dx,eax
c00192be:	b0 fe                	mov    al,0xfe
c00192c0:	89 ca                	mov    edx,ecx
c00192c2:	ee                   	out    dx,al
c00192c3:	89 f0                	mov    eax,esi
c00192c5:	89 fa                	mov    edx,edi
c00192c7:	ef                   	out    dx,eax
c00192c8:	89 ca                	mov    edx,ecx
c00192ca:	ed                   	in     eax,dx
c00192cb:	3c fe                	cmp    al,0xfe
c00192cd:	0f 85 a9 00 00 00    	jne    c001937c <IDE::open(int, int, void*)+0x1a4>
c00192d3:	8b 15 44 08 02 c0    	mov    edx,DWORD PTR ds:0xc0020844
c00192d9:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c00192e0:	74 33                	je     c0019315 <IDE::open(int, int, void*)+0x13d>
c00192e2:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c00192e8:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c00192ec:	40                   	inc    eax
c00192ed:	83 ec 0c             	sub    esp,0xc
c00192f0:	0f b6 c0             	movzx  eax,al
c00192f3:	50                   	push   eax
c00192f4:	55                   	push   ebp
c00192f5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00192f9:	ff b2 68 01 00 00    	push   DWORD PTR [edx+0x168]
c00192ff:	51                   	push   ecx
c0019300:	e8 b7 5a ff ff       	call   c000edbc <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c0019305:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c001930a:	83 c4 1c             	add    esp,0x1c
c001930d:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c0019313:	eb 0a                	jmp    c001931f <IDE::open(int, int, void*)+0x147>
c0019315:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c001931f:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c0019326:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001932d:	c1 e1 10             	shl    ecx,0x10
c0019330:	c1 e0 08             	shl    eax,0x8
c0019333:	bf f8 0c 00 00       	mov    edi,0xcf8
c0019338:	09 c1                	or     ecx,eax
c001933a:	89 fa                	mov    edx,edi
c001933c:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c0019343:	c1 e0 0b             	shl    eax,0xb
c0019346:	09 c1                	or     ecx,eax
c0019348:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c001934e:	89 c8                	mov    eax,ecx
c0019350:	ef                   	out    dx,eax
c0019351:	be fc 0c 00 00       	mov    esi,0xcfc
c0019356:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c001935c:	89 f2                	mov    edx,esi
c001935e:	ee                   	out    dx,al
c001935f:	89 c8                	mov    eax,ecx
c0019361:	89 fa                	mov    edx,edi
c0019363:	ef                   	out    dx,eax
c0019364:	89 f2                	mov    edx,esi
c0019366:	ed                   	in     eax,dx
c0019367:	0f b6 c0             	movzx  eax,al
c001936a:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c0019370:	74 46                	je     c00193b8 <IDE::open(int, int, void*)+0x1e0>
c0019372:	83 ec 0c             	sub    esp,0xc
c0019375:	68 30 f1 01 c0       	push   0xc001f130
c001937a:	eb 34                	jmp    c00193b0 <IDE::open(int, int, void*)+0x1d8>
c001937c:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c0019385:	75 17                	jne    c001939e <IDE::open(int, int, void*)+0x1c6>
c0019387:	80 7c 24 03 80       	cmp    BYTE PTR [esp+0x3],0x80
c001938c:	74 07                	je     c0019395 <IDE::open(int, int, void*)+0x1bd>
c001938e:	80 7c 24 03 8a       	cmp    BYTE PTR [esp+0x3],0x8a
c0019393:	75 09                	jne    c001939e <IDE::open(int, int, void*)+0x1c6>
c0019395:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001939c:	eb 1a                	jmp    c00193b8 <IDE::open(int, int, void*)+0x1e0>
c001939e:	83 ec 0c             	sub    esp,0xc
c00193a1:	68 38 f1 01 c0       	push   0xc001f138
c00193a6:	eb 08                	jmp    c00193b0 <IDE::open(int, int, void*)+0x1d8>
c00193a8:	83 ec 0c             	sub    esp,0xc
c00193ab:	68 69 f1 01 c0       	push   0xc001f169
c00193b0:	e8 8a 73 ff ff       	call   c001073f <Krnl::panic(char const*)>
c00193b5:	83 c4 10             	add    esp,0x10
c00193b8:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c00193bf:	79 1a                	jns    c00193db <IDE::open(int, int, void*)+0x203>
c00193c1:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c00193c7:	83 e0 fc             	and    eax,0xfffffffc
c00193ca:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c00193d1:	83 c0 08             	add    eax,0x8
c00193d4:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c00193db:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00193e1:	89 c2                	mov    edx,eax
c00193e3:	83 e2 0f             	and    edx,0xf
c00193e6:	66 83 fa 08          	cmp    dx,0x8
c00193ea:	75 0a                	jne    c00193f6 <IDE::open(int, int, void*)+0x21e>
c00193ec:	83 e8 02             	sub    eax,0x2
c00193ef:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c00193f6:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c00193fc:	89 c2                	mov    edx,eax
c00193fe:	83 e2 0f             	and    edx,0xf
c0019401:	66 83 fa 08          	cmp    dx,0x8
c0019405:	75 0a                	jne    c0019411 <IDE::open(int, int, void*)+0x239>
c0019407:	83 e8 02             	sub    eax,0x2
c001940a:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c0019411:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c0019418:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c001941f:	89 d0                	mov    eax,edx
c0019421:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0019424:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0019428:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c001942c:	8d 4a 01             	lea    ecx,[edx+0x1]
c001942f:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0019434:	0f b6 c9             	movzx  ecx,cl
c0019437:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c001943e:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c0019441:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c0019445:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c0019449:	8d 50 02             	lea    edx,[eax+0x2]
c001944c:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c0019451:	0f b6 d2             	movzx  edx,dl
c0019454:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001945a:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001945d:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0019461:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c0019465:	8d 48 03             	lea    ecx,[eax+0x3]
c0019468:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001946d:	0f b6 c9             	movzx  ecx,cl
c0019470:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c0019476:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c0019479:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001947d:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c0019481:	8d 50 04             	lea    edx,[eax+0x4]
c0019484:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c001948a:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c001948f:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c0019496:	66 85 f6             	test   si,si
c0019499:	74 5b                	je     c00194f6 <IDE::open(int, int, void*)+0x31e>
c001949b:	0f b6 d2             	movzx  edx,dl
c001949e:	83 c0 05             	add    eax,0x5
c00194a1:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c00194a4:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c00194a8:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c00194ac:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c00194b2:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c00194b7:	eb 3d                	jmp    c00194f6 <IDE::open(int, int, void*)+0x31e>
c00194b9:	8b 83 18 01 00 00    	mov    eax,DWORD PTR [ebx+0x118]
c00194bf:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c00194c6:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c00194cd:	66 05 06 02          	add    ax,0x206
c00194d1:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c00194d8:	66 8b 83 1a 01 00 00 	mov    ax,WORD PTR [ebx+0x11a]
c00194df:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c00194e6:	66 05 06 02          	add    ax,0x206
c00194ea:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c00194f1:	e9 e5 fe ff ff       	jmp    c00193db <IDE::open(int, int, void*)+0x203>
c00194f6:	50                   	push   eax
c00194f7:	50                   	push   eax
c00194f8:	6a 00                	push   0x0
c00194fa:	53                   	push   ebx
c00194fb:	e8 5e fa ff ff       	call   c0018f5e <IDE::prepareInterrupt(unsigned char)>
c0019500:	5a                   	pop    edx
c0019501:	59                   	pop    ecx
c0019502:	6a 01                	push   0x1
c0019504:	53                   	push   ebx
c0019505:	e8 54 fa ff ff       	call   c0018f5e <IDE::prepareInterrupt(unsigned char)>
c001950a:	83 c4 0c             	add    esp,0xc
c001950d:	6a 00                	push   0x0
c001950f:	6a 00                	push   0x0
c0019511:	53                   	push   ebx
c0019512:	e8 7b fc ff ff       	call   c0019192 <IDE::enableIRQs(unsigned char, bool)>
c0019517:	83 c4 0c             	add    esp,0xc
c001951a:	6a 00                	push   0x0
c001951c:	6a 01                	push   0x1
c001951e:	53                   	push   ebx
c001951f:	e8 6e fc ff ff       	call   c0019192 <IDE::enableIRQs(unsigned char, bool)>
c0019524:	83 c4 10             	add    esp,0x10
c0019527:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c001952e:	74 34                	je     c0019564 <IDE::open(int, int, void*)+0x38c>
c0019530:	83 ec 0c             	sub    esp,0xc
c0019533:	53                   	push   ebx
c0019534:	6a 01                	push   0x1
c0019536:	68 5a 91 01 c0       	push   0xc001915a
c001953b:	6a 0e                	push   0xe
c001953d:	53                   	push   ebx
c001953e:	e8 99 2a ff ff       	call   c000bfdc <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0019543:	83 c4 14             	add    esp,0x14
c0019546:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001954c:	53                   	push   ebx
c001954d:	6a 01                	push   0x1
c001954f:	68 76 91 01 c0       	push   0xc0019176
c0019554:	6a 0f                	push   0xf
c0019556:	53                   	push   ebx
c0019557:	e8 80 2a ff ff       	call   c000bfdc <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001955c:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c0019562:	eb 38                	jmp    c001959c <IDE::open(int, int, void*)+0x3c4>
c0019564:	83 ec 0c             	sub    esp,0xc
c0019567:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c0019571:	53                   	push   ebx
c0019572:	6a 00                	push   0x0
c0019574:	68 5a 91 01 c0       	push   0xc001915a
c0019579:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c001957f:	53                   	push   ebx
c0019580:	e8 57 2a ff ff       	call   c000bfdc <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0019585:	83 c4 14             	add    esp,0x14
c0019588:	53                   	push   ebx
c0019589:	6a 00                	push   0x0
c001958b:	68 76 91 01 c0       	push   0xc0019176
c0019590:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c0019596:	53                   	push   ebx
c0019597:	e8 40 2a ff ff       	call   c000bfdc <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001959c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001959e:	83 c4 20             	add    esp,0x20
c00195a1:	83 ec 0c             	sub    esp,0xc
c00195a4:	53                   	push   ebx
c00195a5:	ff 50 18             	call   DWORD PTR [eax+0x18]
c00195a8:	83 c4 0c             	add    esp,0xc
c00195ab:	6a 07                	push   0x7
c00195ad:	6a 00                	push   0x0
c00195af:	53                   	push   ebx
c00195b0:	e8 8f fa ff ff       	call   c0019044 <IDE::read(unsigned char, unsigned char)>
c00195b5:	83 c4 0c             	add    esp,0xc
c00195b8:	6a 07                	push   0x7
c00195ba:	6a 01                	push   0x1
c00195bc:	53                   	push   ebx
c00195bd:	e8 82 fa ff ff       	call   c0019044 <IDE::read(unsigned char, unsigned char)>
c00195c2:	83 c4 0c             	add    esp,0xc
c00195c5:	6a 01                	push   0x1
c00195c7:	6a 00                	push   0x0
c00195c9:	53                   	push   ebx
c00195ca:	e8 c3 fb ff ff       	call   c0019192 <IDE::enableIRQs(unsigned char, bool)>
c00195cf:	83 c4 0c             	add    esp,0xc
c00195d2:	6a 01                	push   0x1
c00195d4:	6a 01                	push   0x1
c00195d6:	53                   	push   ebx
c00195d7:	e8 b6 fb ff ff       	call   c0019192 <IDE::enableIRQs(unsigned char, bool)>
c00195dc:	83 c4 2c             	add    esp,0x2c
c00195df:	31 c0                	xor    eax,eax
c00195e1:	5b                   	pop    ebx
c00195e2:	5e                   	pop    esi
c00195e3:	5f                   	pop    edi
c00195e4:	5d                   	pop    ebp
c00195e5:	c3                   	ret    

c00195e6 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c00195e6:	55                   	push   ebp
c00195e7:	57                   	push   edi
c00195e8:	56                   	push   esi
c00195e9:	53                   	push   ebx
c00195ea:	83 ec 1c             	sub    esp,0x1c
c00195ed:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00195f1:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00195f5:	8d 50 f8             	lea    edx,[eax-0x8]
c00195f8:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00195fc:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0019600:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0019604:	80 fa 03             	cmp    dl,0x3
c0019607:	77 5d                	ja     c0019666 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x80>
c0019609:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001960d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0019611:	0f b6 db             	movzx  ebx,bl
c0019614:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c0019617:	8a 54 ee 10          	mov    dl,BYTE PTR [esi+ebp*8+0x10]
c001961b:	83 ca 80             	or     edx,0xffffff80
c001961e:	0f b6 d2             	movzx  edx,dl
c0019621:	52                   	push   edx
c0019622:	6a 0c                	push   0xc
c0019624:	53                   	push   ebx
c0019625:	56                   	push   esi
c0019626:	e8 59 f9 ff ff       	call   c0018f84 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001962b:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c0019630:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0019634:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0019638:	0f b6 c0             	movzx  eax,al
c001963b:	8d 54 02 fa          	lea    edx,[edx+eax*1-0x6]
c001963f:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c0019641:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c0019646:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c001964a:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001964e:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0019652:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001965a:	83 c4 2c             	add    esp,0x2c
c001965d:	5b                   	pop    ebx
c001965e:	5e                   	pop    esi
c001965f:	5f                   	pop    edi
c0019660:	5d                   	pop    ebp
c0019661:	e9 1e f9 ff ff       	jmp    c0018f84 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019666:	3c 07                	cmp    al,0x7
c0019668:	77 10                	ja     c001967a <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x94>
c001966a:	0f b6 db             	movzx  ebx,bl
c001966d:	0f b6 d0             	movzx  edx,al
c0019670:	66 03 94 de 5a 01 00 00 	add    dx,WORD PTR [esi+ebx*8+0x15a]
c0019678:	eb 2d                	jmp    c00196a7 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c001967a:	3c 0d                	cmp    al,0xd
c001967c:	77 13                	ja     c0019691 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xab>
c001967e:	0f b6 db             	movzx  ebx,bl
c0019681:	0f b6 c0             	movzx  eax,al
c0019684:	8b 94 de 5c 01 00 00 	mov    edx,DWORD PTR [esi+ebx*8+0x15c]
c001968b:	8d 54 02 f4          	lea    edx,[edx+eax*1-0xc]
c001968f:	eb 16                	jmp    c00196a7 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c0019691:	3c 15                	cmp    al,0x15
c0019693:	77 14                	ja     c00196a9 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc3>
c0019695:	0f b6 db             	movzx  ebx,bl
c0019698:	0f b6 c0             	movzx  eax,al
c001969b:	66 8b 94 de 5e 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15e]
c00196a3:	8d 54 02 f2          	lea    edx,[edx+eax*1-0xe]
c00196a7:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c00196a9:	83 c4 1c             	add    esp,0x1c
c00196ac:	5b                   	pop    ebx
c00196ad:	5e                   	pop    esi
c00196ae:	5f                   	pop    edi
c00196af:	5d                   	pop    ebp
c00196b0:	c3                   	ret    
c00196b1:	90                   	nop

c00196b2 <IDE::detect()>:
c00196b2:	55                   	push   ebp
c00196b3:	57                   	push   edi
c00196b4:	56                   	push   esi
c00196b5:	53                   	push   ebx
c00196b6:	81 ec 1c 02 00 00    	sub    esp,0x21c
c00196bc:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c00196c3:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c00196ca:	0f 85 97 02 00 00    	jne    c0019967 <IDE::detect()+0x2b5>
c00196d0:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c00196d7:	31 f6                	xor    esi,esi
c00196d9:	31 ed                	xor    ebp,ebp
c00196db:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00196e3:	89 e8                	mov    eax,ebp
c00196e5:	c1 e0 06             	shl    eax,0x6
c00196e8:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c00196f0:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c00196f4:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00196f8:	c1 e0 04             	shl    eax,0x4
c00196fb:	83 c8 a0             	or     eax,0xffffffa0
c00196fe:	0f b6 c0             	movzx  eax,al
c0019701:	50                   	push   eax
c0019702:	6a 06                	push   0x6
c0019704:	56                   	push   esi
c0019705:	53                   	push   ebx
c0019706:	e8 79 f8 ff ff       	call   c0018f84 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001970b:	83 c4 0c             	add    esp,0xc
c001970e:	6a 0c                	push   0xc
c0019710:	56                   	push   esi
c0019711:	53                   	push   ebx
c0019712:	e8 2d f9 ff ff       	call   c0019044 <IDE::read(unsigned char, unsigned char)>
c0019717:	83 c4 0c             	add    esp,0xc
c001971a:	6a 0c                	push   0xc
c001971c:	56                   	push   esi
c001971d:	53                   	push   ebx
c001971e:	e8 21 f9 ff ff       	call   c0019044 <IDE::read(unsigned char, unsigned char)>
c0019723:	83 c4 0c             	add    esp,0xc
c0019726:	6a 0c                	push   0xc
c0019728:	56                   	push   esi
c0019729:	53                   	push   ebx
c001972a:	e8 15 f9 ff ff       	call   c0019044 <IDE::read(unsigned char, unsigned char)>
c001972f:	83 c4 0c             	add    esp,0xc
c0019732:	6a 0c                	push   0xc
c0019734:	56                   	push   esi
c0019735:	53                   	push   ebx
c0019736:	e8 09 f9 ff ff       	call   c0019044 <IDE::read(unsigned char, unsigned char)>
c001973b:	68 ec 00 00 00       	push   0xec
c0019740:	6a 07                	push   0x7
c0019742:	56                   	push   esi
c0019743:	53                   	push   ebx
c0019744:	e8 3b f8 ff ff       	call   c0018f84 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019749:	83 c4 1c             	add    esp,0x1c
c001974c:	6a 0c                	push   0xc
c001974e:	56                   	push   esi
c001974f:	53                   	push   ebx
c0019750:	e8 ef f8 ff ff       	call   c0019044 <IDE::read(unsigned char, unsigned char)>
c0019755:	83 c4 0c             	add    esp,0xc
c0019758:	6a 0c                	push   0xc
c001975a:	56                   	push   esi
c001975b:	53                   	push   ebx
c001975c:	e8 e3 f8 ff ff       	call   c0019044 <IDE::read(unsigned char, unsigned char)>
c0019761:	83 c4 0c             	add    esp,0xc
c0019764:	6a 0c                	push   0xc
c0019766:	56                   	push   esi
c0019767:	53                   	push   ebx
c0019768:	e8 d7 f8 ff ff       	call   c0019044 <IDE::read(unsigned char, unsigned char)>
c001976d:	83 c4 0c             	add    esp,0xc
c0019770:	6a 0c                	push   0xc
c0019772:	56                   	push   esi
c0019773:	53                   	push   ebx
c0019774:	e8 cb f8 ff ff       	call   c0019044 <IDE::read(unsigned char, unsigned char)>
c0019779:	83 c4 0c             	add    esp,0xc
c001977c:	6a 0c                	push   0xc
c001977e:	56                   	push   esi
c001977f:	53                   	push   ebx
c0019780:	e8 bf f8 ff ff       	call   c0019044 <IDE::read(unsigned char, unsigned char)>
c0019785:	83 c4 10             	add    esp,0x10
c0019788:	84 c0                	test   al,al
c001978a:	0f 84 5f 01 00 00    	je     c00198ef <IDE::detect()+0x23d>
c0019790:	31 ff                	xor    edi,edi
c0019792:	50                   	push   eax
c0019793:	6a 0c                	push   0xc
c0019795:	56                   	push   esi
c0019796:	53                   	push   ebx
c0019797:	e8 a8 f8 ff ff       	call   c0019044 <IDE::read(unsigned char, unsigned char)>
c001979c:	83 c4 10             	add    esp,0x10
c001979f:	a8 01                	test   al,0x1
c00197a1:	0f 85 69 01 00 00    	jne    c0019910 <IDE::detect()+0x25e>
c00197a7:	84 c0                	test   al,al
c00197a9:	78 04                	js     c00197af <IDE::detect()+0xfd>
c00197ab:	a8 08                	test   al,0x8
c00197ad:	75 23                	jne    c00197d2 <IDE::detect()+0x120>
c00197af:	47                   	inc    edi
c00197b0:	81 ff 17 01 00 00    	cmp    edi,0x117
c00197b6:	7e da                	jle    c0019792 <IDE::detect()+0xe0>
c00197b8:	83 ec 0c             	sub    esp,0xc
c00197bb:	6a 32                	push   0x32
c00197bd:	e8 d2 a5 ff ff       	call   c0013d94 <milliTenthSleep(unsigned int)>
c00197c2:	83 c4 10             	add    esp,0x10
c00197c5:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c00197cb:	75 c5                	jne    c0019792 <IDE::detect()+0xe0>
c00197cd:	e9 3e 01 00 00       	jmp    c0019910 <IDE::detect()+0x25e>
c00197d2:	31 c9                	xor    ecx,ecx
c00197d4:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c00197d8:	8d 7c 24 10          	lea    edi,[esp+0x10]
c00197dc:	83 ec 0c             	sub    esp,0xc
c00197df:	68 80 00 00 00       	push   0x80
c00197e4:	57                   	push   edi
c00197e5:	6a 00                	push   0x0
c00197e7:	56                   	push   esi
c00197e8:	53                   	push   ebx
c00197e9:	e8 f8 fd ff ff       	call   c00195e6 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c00197ee:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c00197f3:	89 e8                	mov    eax,ebp
c00197f5:	89 d1                	mov    ecx,edx
c00197f7:	c1 e0 06             	shl    eax,0x6
c00197fa:	01 d8                	add    eax,ebx
c00197fc:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c0019803:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c001980a:	89 f2                	mov    edx,esi
c001980c:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c0019812:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c0019816:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c001981c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0019820:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c0019827:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c001982f:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c0019836:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c001983e:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c0019844:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c001984b:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c0019851:	8d 54 24 58          	lea    edx,[esp+0x58]
c0019855:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0019859:	83 c4 20             	add    esp,0x20
c001985c:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c001985f:	83 c0 02             	add    eax,0x2
c0019862:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c0019868:	83 c7 02             	add    edi,0x2
c001986b:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c001986e:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c0019874:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c0019878:	75 e2                	jne    c001985c <IDE::detect()+0x1aa>
c001987a:	89 e8                	mov    eax,ebp
c001987c:	c1 e0 06             	shl    eax,0x6
c001987f:	01 d8                	add    eax,ebx
c0019881:	8b 90 74 01 00 00    	mov    edx,DWORD PTR [eax+0x174]
c0019887:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c001988e:	66 c1 ea 09          	shr    dx,0x9
c0019892:	83 e2 01             	and    edx,0x1
c0019895:	84 c9                	test   cl,cl
c0019897:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c001989d:	75 22                	jne    c00198c1 <IDE::detect()+0x20f>
c001989f:	83 b8 7c 01 00 00 00 	cmp    DWORD PTR [eax+0x17c],0x0
c00198a6:	74 46                	je     c00198ee <IDE::detect()+0x23c>
c00198a8:	83 ec 0c             	sub    esp,0xc
c00198ab:	68 7c 01 00 00       	push   0x17c
c00198b0:	e8 ac e5 fe ff       	call   c0007e61 <malloc>
c00198b5:	89 c7                	mov    edi,eax
c00198b7:	89 04 24             	mov    DWORD PTR [esp],eax
c00198ba:	e8 11 05 00 00       	call   c0019dd0 <ATA::ATA()>
c00198bf:	eb 17                	jmp    c00198d8 <IDE::detect()+0x226>
c00198c1:	83 ec 0c             	sub    esp,0xc
c00198c4:	68 84 01 00 00       	push   0x184
c00198c9:	e8 93 e5 fe ff       	call   c0007e61 <malloc>
c00198ce:	89 c7                	mov    edi,eax
c00198d0:	89 04 24             	mov    DWORD PTR [esp],eax
c00198d3:	e8 f0 0a 00 00       	call   c001a3c8 <ATAPI::ATAPI()>
c00198d8:	5a                   	pop    edx
c00198d9:	59                   	pop    ecx
c00198da:	57                   	push   edi
c00198db:	53                   	push   ebx
c00198dc:	e8 4f 27 ff ff       	call   c000c030 <Device::addChild(Device*)>
c00198e1:	8b 07                	mov    eax,DWORD PTR [edi]
c00198e3:	53                   	push   ebx
c00198e4:	55                   	push   ebp
c00198e5:	6a 00                	push   0x0
c00198e7:	57                   	push   edi
c00198e8:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00198eb:	83 c4 20             	add    esp,0x20
c00198ee:	45                   	inc    ebp
c00198ef:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c00198f4:	74 0d                	je     c0019903 <IDE::detect()+0x251>
c00198f6:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c00198fe:	e9 e0 fd ff ff       	jmp    c00196e3 <IDE::detect()+0x31>
c0019903:	4e                   	dec    esi
c0019904:	74 61                	je     c0019967 <IDE::detect()+0x2b5>
c0019906:	be 01 00 00 00       	mov    esi,0x1
c001990b:	e9 cb fd ff ff       	jmp    c00196db <IDE::detect()+0x29>
c0019910:	50                   	push   eax
c0019911:	6a 04                	push   0x4
c0019913:	56                   	push   esi
c0019914:	53                   	push   ebx
c0019915:	e8 2a f7 ff ff       	call   c0019044 <IDE::read(unsigned char, unsigned char)>
c001991a:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001991e:	83 c4 0c             	add    esp,0xc
c0019921:	6a 05                	push   0x5
c0019923:	56                   	push   esi
c0019924:	53                   	push   ebx
c0019925:	e8 1a f7 ff ff       	call   c0019044 <IDE::read(unsigned char, unsigned char)>
c001992a:	83 c4 10             	add    esp,0x10
c001992d:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0019931:	80 fa 14             	cmp    dl,0x14
c0019934:	75 04                	jne    c001993a <IDE::detect()+0x288>
c0019936:	3c eb                	cmp    al,0xeb
c0019938:	eb 07                	jmp    c0019941 <IDE::detect()+0x28f>
c001993a:	3c 96                	cmp    al,0x96
c001993c:	75 b1                	jne    c00198ef <IDE::detect()+0x23d>
c001993e:	80 fa 69             	cmp    dl,0x69
c0019941:	75 ac                	jne    c00198ef <IDE::detect()+0x23d>
c0019943:	68 a1 00 00 00       	push   0xa1
c0019948:	6a 07                	push   0x7
c001994a:	56                   	push   esi
c001994b:	53                   	push   ebx
c001994c:	e8 33 f6 ff ff       	call   c0018f84 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019951:	c7 04 24 0a 00 00 00 	mov    DWORD PTR [esp],0xa
c0019958:	e8 37 a4 ff ff       	call   c0013d94 <milliTenthSleep(unsigned int)>
c001995d:	83 c4 10             	add    esp,0x10
c0019960:	b1 01                	mov    cl,0x1
c0019962:	e9 6d fe ff ff       	jmp    c00197d4 <IDE::detect()+0x122>
c0019967:	81 c4 1c 02 00 00    	add    esp,0x21c
c001996d:	5b                   	pop    ebx
c001996e:	5e                   	pop    esi
c001996f:	5f                   	pop    edi
c0019970:	5d                   	pop    ebp
c0019971:	c3                   	ret    

c0019972 <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c0019972:	55                   	push   ebp
c0019973:	57                   	push   edi
c0019974:	56                   	push   esi
c0019975:	53                   	push   ebx
c0019976:	83 ec 1c             	sub    esp,0x1c
c0019979:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001997d:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0019981:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0019985:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0019989:	88 c3                	mov    bl,al
c001998b:	84 c0                	test   al,al
c001998d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019991:	0f 84 81 00 00 00    	je     c0019a18 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0019997:	83 ec 0c             	sub    esp,0xc
c001999a:	68 93 f1 01 c0       	push   0xc001f193
c001999f:	e8 4c 12 ff ff       	call   c000abf0 <Dbg::kprintf(char const*, ...)>
c00199a4:	83 c4 10             	add    esp,0x10
c00199a7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00199ab:	3c 01                	cmp    al,0x1
c00199ad:	74 63                	je     c0019a12 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa0>
c00199af:	3c 02                	cmp    al,0x2
c00199b1:	75 53                	jne    c0019a06 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x94>
c00199b3:	01 f6                	add    esi,esi
c00199b5:	09 ee                	or     esi,ebp
c00199b7:	50                   	push   eax
c00199b8:	89 f0                	mov    eax,esi
c00199ba:	6a 01                	push   0x1
c00199bc:	0f b6 f0             	movzx  esi,al
c00199bf:	c1 e6 06             	shl    esi,0x6
c00199c2:	0f b6 84 37 6d 01 00 00 	movzx  eax,BYTE PTR [edi+esi*1+0x16d]
c00199ca:	50                   	push   eax
c00199cb:	57                   	push   edi
c00199cc:	e8 73 f6 ff ff       	call   c0019044 <IDE::read(unsigned char, unsigned char)>
c00199d1:	83 c4 10             	add    esp,0x10
c00199d4:	a8 01                	test   al,0x1
c00199d6:	74 02                	je     c00199da <IDE::printError(unsigned char, unsigned char, unsigned char)+0x68>
c00199d8:	b3 07                	mov    bl,0x7
c00199da:	a8 02                	test   al,0x2
c00199dc:	74 02                	je     c00199e0 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x6e>
c00199de:	b3 03                	mov    bl,0x3
c00199e0:	a8 04                	test   al,0x4
c00199e2:	74 02                	je     c00199e6 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x74>
c00199e4:	b3 14                	mov    bl,0x14
c00199e6:	a8 08                	test   al,0x8
c00199e8:	74 02                	je     c00199ec <IDE::printError(unsigned char, unsigned char, unsigned char)+0x7a>
c00199ea:	b3 03                	mov    bl,0x3
c00199ec:	a8 10                	test   al,0x10
c00199ee:	74 02                	je     c00199f2 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x80>
c00199f0:	b3 15                	mov    bl,0x15
c00199f2:	a8 20                	test   al,0x20
c00199f4:	74 02                	je     c00199f8 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x86>
c00199f6:	b3 03                	mov    bl,0x3
c00199f8:	a8 40                	test   al,0x40
c00199fa:	74 02                	je     c00199fe <IDE::printError(unsigned char, unsigned char, unsigned char)+0x8c>
c00199fc:	b3 16                	mov    bl,0x16
c00199fe:	84 c0                	test   al,al
c0019a00:	79 16                	jns    c0019a18 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0019a02:	b3 0d                	mov    bl,0xd
c0019a04:	eb 12                	jmp    c0019a18 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0019a06:	3c 03                	cmp    al,0x3
c0019a08:	74 0c                	je     c0019a16 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa4>
c0019a0a:	3c 04                	cmp    al,0x4
c0019a0c:	75 0a                	jne    c0019a18 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0019a0e:	b3 08                	mov    bl,0x8
c0019a10:	eb 06                	jmp    c0019a18 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0019a12:	b3 13                	mov    bl,0x13
c0019a14:	eb 02                	jmp    c0019a18 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0019a16:	b3 17                	mov    bl,0x17
c0019a18:	83 c4 1c             	add    esp,0x1c
c0019a1b:	88 d8                	mov    al,bl
c0019a1d:	5b                   	pop    ebx
c0019a1e:	5e                   	pop    esi
c0019a1f:	5f                   	pop    edi
c0019a20:	5d                   	pop    ebp
c0019a21:	c3                   	ret    

c0019a22 <IDE::polling(unsigned char, unsigned int)>:
c0019a22:	55                   	push   ebp
c0019a23:	bd 04 00 00 00       	mov    ebp,0x4
c0019a28:	57                   	push   edi
c0019a29:	56                   	push   esi
c0019a2a:	53                   	push   ebx
c0019a2b:	83 ec 0c             	sub    esp,0xc
c0019a2e:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0019a32:	8a 5c 24 24          	mov    bl,BYTE PTR [esp+0x24]
c0019a36:	0f b6 f3             	movzx  esi,bl
c0019a39:	52                   	push   edx
c0019a3a:	6a 0c                	push   0xc
c0019a3c:	56                   	push   esi
c0019a3d:	57                   	push   edi
c0019a3e:	e8 01 f6 ff ff       	call   c0019044 <IDE::read(unsigned char, unsigned char)>
c0019a43:	83 c4 10             	add    esp,0x10
c0019a46:	4d                   	dec    ebp
c0019a47:	75 ed                	jne    c0019a36 <IDE::polling(unsigned char, unsigned int)+0x14>
c0019a49:	bb a0 86 01 00       	mov    ebx,0x186a0
c0019a4e:	50                   	push   eax
c0019a4f:	6a 0c                	push   0xc
c0019a51:	56                   	push   esi
c0019a52:	57                   	push   edi
c0019a53:	e8 ec f5 ff ff       	call   c0019044 <IDE::read(unsigned char, unsigned char)>
c0019a58:	83 c4 10             	add    esp,0x10
c0019a5b:	a8 01                	test   al,0x1
c0019a5d:	75 17                	jne    c0019a76 <IDE::polling(unsigned char, unsigned int)+0x54>
c0019a5f:	a8 20                	test   al,0x20
c0019a61:	75 0f                	jne    c0019a72 <IDE::polling(unsigned char, unsigned int)+0x50>
c0019a63:	4b                   	dec    ebx
c0019a64:	74 10                	je     c0019a76 <IDE::polling(unsigned char, unsigned int)+0x54>
c0019a66:	84 c0                	test   al,al
c0019a68:	78 e4                	js     c0019a4e <IDE::polling(unsigned char, unsigned int)+0x2c>
c0019a6a:	a8 08                	test   al,0x8
c0019a6c:	74 e0                	je     c0019a4e <IDE::polling(unsigned char, unsigned int)+0x2c>
c0019a6e:	31 c0                	xor    eax,eax
c0019a70:	eb 06                	jmp    c0019a78 <IDE::polling(unsigned char, unsigned int)+0x56>
c0019a72:	b0 01                	mov    al,0x1
c0019a74:	eb 02                	jmp    c0019a78 <IDE::polling(unsigned char, unsigned int)+0x56>
c0019a76:	b0 02                	mov    al,0x2
c0019a78:	83 c4 0c             	add    esp,0xc
c0019a7b:	5b                   	pop    ebx
c0019a7c:	5e                   	pop    esi
c0019a7d:	5f                   	pop    edi
c0019a7e:	5d                   	pop    ebp
c0019a7f:	c3                   	ret    

c0019a80 <SATABus::close(int, int, void*)>:
c0019a80:	31 c0                	xor    eax,eax
c0019a82:	c3                   	ret    
c0019a83:	90                   	nop

c0019a84 <SATABus::detect()>:
c0019a84:	c3                   	ret    
c0019a85:	90                   	nop

c0019a86 <SATABus::SATABus()>:
c0019a86:	83 ec 0c             	sub    esp,0xc
c0019a89:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019a8d:	83 ec 08             	sub    esp,0x8
c0019a90:	68 cc f1 01 c0       	push   0xc001f1cc
c0019a95:	50                   	push   eax
c0019a96:	e8 d9 28 ff ff       	call   c000c374 <HardDiskController::HardDiskController(char const*)>
c0019a9b:	83 c4 10             	add    esp,0x10
c0019a9e:	ba f8 f1 01 c0       	mov    edx,0xc001f1f8
c0019aa3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019aa7:	89 10                	mov    DWORD PTR [eax],edx
c0019aa9:	83 ec 0c             	sub    esp,0xc
c0019aac:	6a 50                	push   0x50
c0019aae:	e8 39 e8 fe ff       	call   c00082ec <Phys::allocateContiguousPages(int)>
c0019ab3:	83 c4 10             	add    esp,0x10
c0019ab6:	89 c2                	mov    edx,eax
c0019ab8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019abc:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0019ac2:	83 ec 0c             	sub    esp,0xc
c0019ac5:	6a 50                	push   0x50
c0019ac7:	e8 d1 fe fe ff       	call   c000999d <Virt::allocateKernelVirtualPages(int)>
c0019acc:	83 c4 10             	add    esp,0x10
c0019acf:	89 c2                	mov    edx,eax
c0019ad1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019ad5:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0019adb:	a1 30 09 02 c0       	mov    eax,ds:0xc0020930
c0019ae0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019ae4:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c0019aea:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019aee:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c0019af4:	83 ec 0c             	sub    esp,0xc
c0019af7:	6a 03                	push   0x3
c0019af9:	6a 50                	push   0x50
c0019afb:	51                   	push   ecx
c0019afc:	52                   	push   edx
c0019afd:	50                   	push   eax
c0019afe:	e8 29 08 ff ff       	call   c000a32c <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0019b03:	83 c4 20             	add    esp,0x20
c0019b06:	90                   	nop
c0019b07:	83 c4 0c             	add    esp,0xc
c0019b0a:	c3                   	ret    
c0019b0b:	90                   	nop

c0019b0c <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c0019b0c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019b10:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c0019b13:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0019b16:	09 c2                	or     edx,eax
c0019b18:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019b1c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0019b22:	8b 08                	mov    ecx,DWORD PTR [eax]
c0019b24:	31 c0                	xor    eax,eax
c0019b26:	c1 e9 08             	shr    ecx,0x8
c0019b29:	83 e1 0f             	and    ecx,0xf
c0019b2c:	39 c8                	cmp    eax,ecx
c0019b2e:	74 0a                	je     c0019b3a <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x2e>
c0019b30:	f6 c2 01             	test   dl,0x1
c0019b33:	74 08                	je     c0019b3d <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c0019b35:	d1 ea                	shr    edx,1
c0019b37:	40                   	inc    eax
c0019b38:	eb f2                	jmp    c0019b2c <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x20>
c0019b3a:	83 c8 ff             	or     eax,0xffffffff
c0019b3d:	c3                   	ret    

c0019b3e <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c0019b3e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0019b42:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c0019b45:	89 c2                	mov    edx,eax
c0019b47:	c1 ea 08             	shr    edx,0x8
c0019b4a:	83 e2 0f             	and    edx,0xf
c0019b4d:	fe ca                	dec    dl
c0019b4f:	75 31                	jne    c0019b82 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c0019b51:	83 e0 0f             	and    eax,0xf
c0019b54:	3c 03                	cmp    al,0x3
c0019b56:	75 2a                	jne    c0019b82 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c0019b58:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c0019b5b:	b8 02 00 00 00       	mov    eax,0x2
c0019b60:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c0019b66:	74 1c                	je     c0019b84 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c0019b68:	b8 04 00 00 00       	mov    eax,0x4
c0019b6d:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c0019b73:	74 0f                	je     c0019b84 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c0019b75:	31 c0                	xor    eax,eax
c0019b77:	83 fa 03             	cmp    edx,0x3
c0019b7a:	0f 94 c0             	sete   al
c0019b7d:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c0019b81:	c3                   	ret    
c0019b82:	31 c0                	xor    eax,eax
c0019b84:	c3                   	ret    
c0019b85:	90                   	nop

c0019b86 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c0019b86:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019b8a:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0019b8d:	0f ba e2 0f          	bt     edx,0xf
c0019b91:	72 f7                	jb     c0019b8a <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c0019b93:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0019b96:	83 ca 10             	or     edx,0x10
c0019b99:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0019b9c:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0019b9f:	83 ca 01             	or     edx,0x1
c0019ba2:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0019ba5:	c3                   	ret    

c0019ba6 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c0019ba6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019baa:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0019bad:	83 e2 fe             	and    edx,0xfffffffe
c0019bb0:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0019bb3:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0019bb6:	83 e2 ef             	and    edx,0xffffffef
c0019bb9:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0019bbc:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0019bbf:	0f ba e2 0e          	bt     edx,0xe
c0019bc3:	72 f7                	jb     c0019bbc <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c0019bc5:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0019bc8:	0f ba e2 0f          	bt     edx,0xf
c0019bcc:	72 ee                	jb     c0019bbc <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c0019bce:	c3                   	ret    
c0019bcf:	90                   	nop

c0019bd0 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c0019bd0:	55                   	push   ebp
c0019bd1:	57                   	push   edi
c0019bd2:	56                   	push   esi
c0019bd3:	53                   	push   ebx
c0019bd4:	83 ec 1c             	sub    esp,0x1c
c0019bd7:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0019bdb:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0019bdf:	53                   	push   ebx
c0019be0:	56                   	push   esi
c0019be1:	e8 c0 ff ff ff       	call   c0019ba6 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c0019be6:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0019bea:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c0019bf0:	83 ec 0c             	sub    esp,0xc
c0019bf3:	c1 e5 0a             	shl    ebp,0xa
c0019bf6:	01 e8                	add    eax,ebp
c0019bf8:	89 03                	mov    DWORD PTR [ebx],eax
c0019bfa:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019bfc:	68 00 04 00 00       	push   0x400
c0019c01:	6a 00                	push   0x0
c0019c03:	50                   	push   eax
c0019c04:	e8 e7 68 fe ff       	call   c00004f0 <memset>
c0019c09:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c0019c0f:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0019c13:	01 e8                	add    eax,ebp
c0019c15:	83 c4 1c             	add    esp,0x1c
c0019c18:	89 03                	mov    DWORD PTR [ebx],eax
c0019c1a:	c1 e2 08             	shl    edx,0x8
c0019c1d:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0019c24:	8d ba 00 80 00 00    	lea    edi,[edx+0x8000]
c0019c2a:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c0019c30:	01 f8                	add    eax,edi
c0019c32:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0019c35:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0019c38:	68 00 01 00 00       	push   0x100
c0019c3d:	6a 00                	push   0x0
c0019c3f:	50                   	push   eax
c0019c40:	e8 ab 68 fe ff       	call   c00004f0 <memset>
c0019c45:	8b 96 5c 01 00 00    	mov    edx,DWORD PTR [esi+0x15c]
c0019c4b:	01 fa                	add    edx,edi
c0019c4d:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0019c51:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0019c54:	c1 e7 0d             	shl    edi,0xd
c0019c57:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0019c5e:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c0019c64:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c0019c6a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019c6e:	31 ff                	xor    edi,edi
c0019c70:	83 c4 10             	add    esp,0x10
c0019c73:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c0019c79:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019c7d:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0019c83:	83 c5 20             	add    ebp,0x20
c0019c86:	01 f8                	add    eax,edi
c0019c88:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0019c8b:	52                   	push   edx
c0019c8c:	68 00 01 00 00       	push   0x100
c0019c91:	6a 00                	push   0x0
c0019c93:	50                   	push   eax
c0019c94:	e8 57 68 fe ff       	call   c00004f0 <memset>
c0019c99:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019c9d:	83 c4 10             	add    esp,0x10
c0019ca0:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c0019ca6:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0019cad:	01 f8                	add    eax,edi
c0019caf:	81 c7 00 01 00 00    	add    edi,0x100
c0019cb5:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0019cb8:	81 ff 00 20 00 00    	cmp    edi,0x2000
c0019cbe:	75 b3                	jne    c0019c73 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa3>
c0019cc0:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c0019cc7:	50                   	push   eax
c0019cc8:	50                   	push   eax
c0019cc9:	53                   	push   ebx
c0019cca:	56                   	push   esi
c0019ccb:	e8 b6 fe ff ff       	call   c0019b86 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c0019cd0:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c0019cd7:	83 c4 2c             	add    esp,0x2c
c0019cda:	5b                   	pop    ebx
c0019cdb:	5e                   	pop    esi
c0019cdc:	5f                   	pop    edi
c0019cdd:	5d                   	pop    ebp
c0019cde:	c3                   	ret    
c0019cdf:	90                   	nop

c0019ce0 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c0019ce0:	55                   	push   ebp
c0019ce1:	57                   	push   edi
c0019ce2:	56                   	push   esi
c0019ce3:	53                   	push   ebx
c0019ce4:	31 db                	xor    ebx,ebx
c0019ce6:	83 ec 0c             	sub    esp,0xc
c0019ce9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0019ced:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0019cf1:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c0019cf4:	f7 c7 01 00 00 00    	test   edi,0x1
c0019cfa:	74 7a                	je     c0019d76 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c0019cfc:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0019d00:	89 d8                	mov    eax,ebx
c0019d02:	c1 e0 07             	shl    eax,0x7
c0019d05:	8d ac 01 00 01 00 00 	lea    ebp,[ecx+eax*1+0x100]
c0019d0c:	55                   	push   ebp
c0019d0d:	56                   	push   esi
c0019d0e:	e8 2b fe ff ff       	call   c0019b3e <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c0019d13:	5a                   	pop    edx
c0019d14:	83 f8 01             	cmp    eax,0x1
c0019d17:	59                   	pop    ecx
c0019d18:	75 21                	jne    c0019d3b <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x5b>
c0019d1a:	50                   	push   eax
c0019d1b:	53                   	push   ebx
c0019d1c:	55                   	push   ebp
c0019d1d:	56                   	push   esi
c0019d1e:	e8 ad fe ff ff       	call   c0019bd0 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0019d23:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c0019d2a:	e8 32 e1 fe ff       	call   c0007e61 <malloc>
c0019d2f:	89 c5                	mov    ebp,eax
c0019d31:	89 04 24             	mov    DWORD PTR [esp],eax
c0019d34:	e8 43 0d 00 00       	call   c001aa7c <SATA::SATA()>
c0019d39:	eb 24                	jmp    c0019d5f <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x7f>
c0019d3b:	83 f8 04             	cmp    eax,0x4
c0019d3e:	75 36                	jne    c0019d76 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c0019d40:	51                   	push   ecx
c0019d41:	53                   	push   ebx
c0019d42:	55                   	push   ebp
c0019d43:	56                   	push   esi
c0019d44:	e8 87 fe ff ff       	call   c0019bd0 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0019d49:	c7 04 24 84 01 00 00 	mov    DWORD PTR [esp],0x184
c0019d50:	e8 0c e1 fe ff       	call   c0007e61 <malloc>
c0019d55:	89 c5                	mov    ebp,eax
c0019d57:	89 04 24             	mov    DWORD PTR [esp],eax
c0019d5a:	e8 71 11 00 00       	call   c001aed0 <SATAPI::SATAPI()>
c0019d5f:	58                   	pop    eax
c0019d60:	5a                   	pop    edx
c0019d61:	55                   	push   ebp
c0019d62:	56                   	push   esi
c0019d63:	e8 c8 22 ff ff       	call   c000c030 <Device::addChild(Device*)>
c0019d68:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0019d6b:	56                   	push   esi
c0019d6c:	6a 00                	push   0x0
c0019d6e:	53                   	push   ebx
c0019d6f:	55                   	push   ebp
c0019d70:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0019d73:	83 c4 20             	add    esp,0x20
c0019d76:	d1 ef                	shr    edi,1
c0019d78:	43                   	inc    ebx
c0019d79:	83 fb 20             	cmp    ebx,0x20
c0019d7c:	0f 85 72 ff ff ff    	jne    c0019cf4 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c0019d82:	83 c4 0c             	add    esp,0xc
c0019d85:	5b                   	pop    ebx
c0019d86:	5e                   	pop    esi
c0019d87:	5f                   	pop    edi
c0019d88:	5d                   	pop    ebp
c0019d89:	c3                   	ret    

c0019d8a <SATABus::open(int, int, void*)>:
c0019d8a:	83 ec 14             	sub    esp,0x14
c0019d8d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0019d91:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c0019d97:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c0019d9d:	52                   	push   edx
c0019d9e:	50                   	push   eax
c0019d9f:	e8 3c ff ff ff       	call   c0019ce0 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c0019da4:	31 c0                	xor    eax,eax
c0019da6:	83 c4 1c             	add    esp,0x1c
c0019da9:	c3                   	ret    

c0019daa <ATA::close(int, int, void*)>:
c0019daa:	83 ec 0c             	sub    esp,0xc
c0019dad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019db1:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0019db7:	85 c0                	test   eax,eax
c0019db9:	74 0c                	je     c0019dc7 <ATA::close(int, int, void*)+0x1d>
c0019dbb:	83 ec 0c             	sub    esp,0xc
c0019dbe:	8b 10                	mov    edx,DWORD PTR [eax]
c0019dc0:	50                   	push   eax
c0019dc1:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0019dc4:	83 c4 10             	add    esp,0x10
c0019dc7:	31 c0                	xor    eax,eax
c0019dc9:	83 c4 0c             	add    esp,0xc
c0019dcc:	c3                   	ret    
c0019dcd:	90                   	nop

c0019dce <ATA::powerSaving(PowerSavingLevel)>:
c0019dce:	c3                   	ret    
c0019dcf:	90                   	nop

c0019dd0 <ATA::ATA()>:
c0019dd0:	83 ec 0c             	sub    esp,0xc
c0019dd3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019dd7:	83 ec 04             	sub    esp,0x4
c0019dda:	68 00 02 00 00       	push   0x200
c0019ddf:	68 c5 f2 01 c0       	push   0xc001f2c5
c0019de4:	50                   	push   eax
c0019de5:	e8 14 26 ff ff       	call   c000c3fe <PhysicalDisk::PhysicalDisk(char const*, int)>
c0019dea:	83 c4 10             	add    esp,0x10
c0019ded:	ba 38 f2 01 c0       	mov    edx,0xc001f238
c0019df2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019df6:	89 10                	mov    DWORD PTR [eax],edx
c0019df8:	90                   	nop
c0019df9:	83 c4 0c             	add    esp,0xc
c0019dfc:	c3                   	ret    
c0019dfd:	90                   	nop

c0019dfe <ATA::flush(bool)>:
c0019dfe:	53                   	push   ebx
c0019dff:	83 ec 08             	sub    esp,0x8
c0019e02:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c0019e07:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019e0b:	19 c0                	sbb    eax,eax
c0019e0d:	83 e0 fd             	and    eax,0xfffffffd
c0019e10:	05 ea 00 00 00       	add    eax,0xea
c0019e15:	50                   	push   eax
c0019e16:	6a 07                	push   0x7
c0019e18:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0019e1f:	50                   	push   eax
c0019e20:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019e26:	e8 59 f1 ff ff       	call   c0018f84 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019e2b:	83 c4 0c             	add    esp,0xc
c0019e2e:	6a 00                	push   0x0
c0019e30:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0019e37:	50                   	push   eax
c0019e38:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019e3e:	e8 df fb ff ff       	call   c0019a22 <IDE::polling(unsigned char, unsigned int)>
c0019e43:	83 c4 18             	add    esp,0x18
c0019e46:	5b                   	pop    ebx
c0019e47:	c3                   	ret    

c0019e48 <ATA::readyForCommand()>:
c0019e48:	56                   	push   esi
c0019e49:	53                   	push   ebx
c0019e4a:	53                   	push   ebx
c0019e4b:	31 db                	xor    ebx,ebx
c0019e4d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0019e51:	51                   	push   ecx
c0019e52:	6a 0c                	push   0xc
c0019e54:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c0019e5b:	50                   	push   eax
c0019e5c:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c0019e62:	e8 dd f1 ff ff       	call   c0019044 <IDE::read(unsigned char, unsigned char)>
c0019e67:	83 c4 10             	add    esp,0x10
c0019e6a:	a8 88                	test   al,0x88
c0019e6c:	74 1f                	je     c0019e8d <ATA::readyForCommand()+0x45>
c0019e6e:	43                   	inc    ebx
c0019e6f:	83 fb 63             	cmp    ebx,0x63
c0019e72:	7e dd                	jle    c0019e51 <ATA::readyForCommand()+0x9>
c0019e74:	83 ec 0c             	sub    esp,0xc
c0019e77:	6a 0a                	push   0xa
c0019e79:	e8 16 9f ff ff       	call   c0013d94 <milliTenthSleep(unsigned int)>
c0019e7e:	83 c4 10             	add    esp,0x10
c0019e81:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c0019e87:	75 c8                	jne    c0019e51 <ATA::readyForCommand()+0x9>
c0019e89:	31 c0                	xor    eax,eax
c0019e8b:	eb 02                	jmp    c0019e8f <ATA::readyForCommand()+0x47>
c0019e8d:	b0 01                	mov    al,0x1
c0019e8f:	5a                   	pop    edx
c0019e90:	5b                   	pop    ebx
c0019e91:	5e                   	pop    esi
c0019e92:	c3                   	ret    
c0019e93:	90                   	nop

c0019e94 <ATA::access(unsigned long long, int, void*, bool)>:
c0019e94:	55                   	push   ebp
c0019e95:	57                   	push   edi
c0019e96:	56                   	push   esi
c0019e97:	53                   	push   ebx
c0019e98:	83 ec 2c             	sub    esp,0x2c
c0019e9b:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0019e9f:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0019ea3:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0019ea7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0019eab:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0019eaf:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0019eb3:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0019eb7:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0019ebd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0019ec1:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c0019ec7:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0019ecb:	c1 e0 06             	shl    eax,0x6
c0019ece:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c0019ed6:	74 5d                	je     c0019f35 <ATA::access(unsigned long long, int, void*, bool)+0xa1>
c0019ed8:	89 fa                	mov    edx,edi
c0019eda:	89 f0                	mov    eax,esi
c0019edc:	0f ac d0 1c          	shrd   eax,edx,0x1c
c0019ee0:	c1 ea 1c             	shr    edx,0x1c
c0019ee3:	89 d1                	mov    ecx,edx
c0019ee5:	09 c1                	or     ecx,eax
c0019ee7:	74 25                	je     c0019f0e <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c0019ee9:	31 ed                	xor    ebp,ebp
c0019eeb:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c0019ef2:	89 fa                	mov    edx,edi
c0019ef4:	89 f0                	mov    eax,esi
c0019ef6:	0f ad d0             	shrd   eax,edx,cl
c0019ef9:	d3 ea                	shr    edx,cl
c0019efb:	f6 c1 20             	test   cl,0x20
c0019efe:	74 02                	je     c0019f02 <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c0019f00:	89 d0                	mov    eax,edx
c0019f02:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c0019f06:	45                   	inc    ebp
c0019f07:	83 fd 06             	cmp    ebp,0x6
c0019f0a:	75 df                	jne    c0019eeb <ATA::access(unsigned long long, int, void*, bool)+0x57>
c0019f0c:	eb 76                	jmp    c0019f84 <ATA::access(unsigned long long, int, void*, bool)+0xf0>
c0019f0e:	89 f0                	mov    eax,esi
c0019f10:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c0019f15:	89 fa                	mov    edx,edi
c0019f17:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c0019f1e:	0f ac d0 10          	shrd   eax,edx,0x10
c0019f22:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0019f27:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0019f2b:	c1 ee 18             	shr    esi,0x18
c0019f2e:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c0019f33:	eb 56                	jmp    c0019f8b <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c0019f35:	6a 00                	push   0x0
c0019f37:	6a 3f                	push   0x3f
c0019f39:	57                   	push   edi
c0019f3a:	56                   	push   esi
c0019f3b:	e8 20 22 00 00       	call   c001c160 <__umoddi3>
c0019f40:	83 c4 10             	add    esp,0x10
c0019f43:	40                   	inc    eax
c0019f44:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c0019f48:	6a 00                	push   0x0
c0019f4a:	68 f0 03 00 00       	push   0x3f0
c0019f4f:	57                   	push   edi
c0019f50:	56                   	push   esi
c0019f51:	e8 0a 21 00 00       	call   c001c060 <__udivdi3>
c0019f56:	83 c4 10             	add    esp,0x10
c0019f59:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c0019f5e:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c0019f65:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0019f6a:	6a 00                	push   0x0
c0019f6c:	6a 3f                	push   0x3f
c0019f6e:	57                   	push   edi
c0019f6f:	56                   	push   esi
c0019f70:	e8 eb 20 00 00       	call   c001c060 <__udivdi3>
c0019f75:	83 c4 10             	add    esp,0x10
c0019f78:	89 c6                	mov    esi,eax
c0019f7a:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c0019f7f:	83 e6 0f             	and    esi,0xf
c0019f82:	eb 07                	jmp    c0019f8b <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c0019f84:	31 f6                	xor    esi,esi
c0019f86:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c0019f8b:	bf 01 00 00 00       	mov    edi,0x1
c0019f90:	50                   	push   eax
c0019f91:	6a 00                	push   0x0
c0019f93:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0019f9a:	50                   	push   eax
c0019f9b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0019f9f:	e8 ee f1 ff ff       	call   c0019192 <IDE::enableIRQs(unsigned char, bool)>
c0019fa4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019fa7:	e8 9c fe ff ff       	call   c0019e48 <ATA::readyForCommand()>
c0019fac:	83 c4 10             	add    esp,0x10
c0019faf:	84 c0                	test   al,al
c0019fb1:	0f 84 4e 02 00 00    	je     c001a205 <ATA::access(unsigned long long, int, void*, bool)+0x371>
c0019fb7:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c0019fbd:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0019fc3:	c1 e0 04             	shl    eax,0x4
c0019fc6:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c0019fcd:	09 c6                	or     esi,eax
c0019fcf:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c0019fd4:	75 05                	jne    c0019fdb <ATA::access(unsigned long long, int, void*, bool)+0x147>
c0019fd6:	83 ce a0             	or     esi,0xffffffa0
c0019fd9:	eb 03                	jmp    c0019fde <ATA::access(unsigned long long, int, void*, bool)+0x14a>
c0019fdb:	83 ce e0             	or     esi,0xffffffe0
c0019fde:	89 f0                	mov    eax,esi
c0019fe0:	0f b6 f0             	movzx  esi,al
c0019fe3:	56                   	push   esi
c0019fe4:	6a 06                	push   0x6
c0019fe6:	51                   	push   ecx
c0019fe7:	52                   	push   edx
c0019fe8:	e8 97 ef ff ff       	call   c0018f84 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019fed:	83 c4 10             	add    esp,0x10
c0019ff0:	6a 00                	push   0x0
c0019ff2:	6a 01                	push   0x1
c0019ff4:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0019ffb:	50                   	push   eax
c0019ffc:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a002:	e8 7d ef ff ff       	call   c0018f84 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a007:	83 c4 10             	add    esp,0x10
c001a00a:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c001a00f:	75 6e                	jne    c001a07f <ATA::access(unsigned long long, int, void*, bool)+0x1eb>
c001a011:	6a 00                	push   0x0
c001a013:	6a 08                	push   0x8
c001a015:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a01c:	50                   	push   eax
c001a01d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a023:	e8 5c ef ff ff       	call   c0018f84 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a028:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c001a02d:	50                   	push   eax
c001a02e:	6a 09                	push   0x9
c001a030:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a037:	50                   	push   eax
c001a038:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a03e:	e8 41 ef ff ff       	call   c0018f84 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a043:	83 c4 20             	add    esp,0x20
c001a046:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c001a04b:	50                   	push   eax
c001a04c:	6a 0a                	push   0xa
c001a04e:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a055:	50                   	push   eax
c001a056:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a05c:	e8 23 ef ff ff       	call   c0018f84 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a061:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c001a066:	50                   	push   eax
c001a067:	6a 0b                	push   0xb
c001a069:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a070:	50                   	push   eax
c001a071:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a077:	e8 08 ef ff ff       	call   c0018f84 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a07c:	83 c4 20             	add    esp,0x20
c001a07f:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c001a084:	50                   	push   eax
c001a085:	6a 02                	push   0x2
c001a087:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a08e:	50                   	push   eax
c001a08f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a095:	e8 ea ee ff ff       	call   c0018f84 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a09a:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c001a09f:	50                   	push   eax
c001a0a0:	6a 03                	push   0x3
c001a0a2:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a0a9:	50                   	push   eax
c001a0aa:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a0b0:	e8 cf ee ff ff       	call   c0018f84 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a0b5:	83 c4 20             	add    esp,0x20
c001a0b8:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c001a0bd:	50                   	push   eax
c001a0be:	6a 04                	push   0x4
c001a0c0:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a0c7:	50                   	push   eax
c001a0c8:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a0ce:	e8 b1 ee ff ff       	call   c0018f84 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a0d3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a0d8:	50                   	push   eax
c001a0d9:	6a 05                	push   0x5
c001a0db:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a0e2:	50                   	push   eax
c001a0e3:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a0e9:	e8 96 ee ff ff       	call   c0018f84 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a0ee:	83 c4 20             	add    esp,0x20
c001a0f1:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c001a0f6:	0f 94 c0             	sete   al
c001a0f9:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001a0fe:	74 09                	je     c001a109 <ATA::access(unsigned long long, int, void*, bool)+0x275>
c001a100:	8d 04 85 30 00 00 00 	lea    eax,[eax*4+0x30]
c001a107:	eb 07                	jmp    c001a110 <ATA::access(unsigned long long, int, void*, bool)+0x27c>
c001a109:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c001a110:	0f b6 c0             	movzx  eax,al
c001a113:	50                   	push   eax
c001a114:	6a 07                	push   0x7
c001a116:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a11d:	50                   	push   eax
c001a11e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a124:	e8 5b ee ff ff       	call   c0018f84 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a129:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c001a12d:	83 c4 10             	add    esp,0x10
c001a130:	85 f6                	test   esi,esi
c001a132:	0f 84 ae 00 00 00    	je     c001a1e6 <ATA::access(unsigned long long, int, void*, bool)+0x352>
c001a138:	50                   	push   eax
c001a139:	6a 01                	push   0x1
c001a13b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a142:	50                   	push   eax
c001a143:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a149:	e8 d4 f8 ff ff       	call   c0019a22 <IDE::polling(unsigned char, unsigned int)>
c001a14e:	83 c4 10             	add    esp,0x10
c001a151:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001a157:	84 c0                	test   al,al
c001a159:	74 20                	je     c001a17b <ATA::access(unsigned long long, int, void*, bool)+0x2e7>
c001a15b:	0f b6 f8             	movzx  edi,al
c001a15e:	0f b6 d2             	movzx  edx,dl
c001a161:	57                   	push   edi
c001a162:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c001a169:	50                   	push   eax
c001a16a:	52                   	push   edx
c001a16b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a171:	e8 fc f7 ff ff       	call   c0019972 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001a176:	e9 87 00 00 00       	jmp    c001a202 <ATA::access(unsigned long long, int, void*, bool)+0x36e>
c001a17b:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001a180:	74 33                	je     c001a1b5 <ATA::access(unsigned long long, int, void*, bool)+0x321>
c001a182:	31 ed                	xor    ebp,ebp
c001a184:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001a188:	66 8b 3c 68          	mov    di,WORD PTR [eax+ebp*2]
c001a18c:	50                   	push   eax
c001a18d:	50                   	push   eax
c001a18e:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a195:	50                   	push   eax
c001a196:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a19c:	e8 d1 ed ff ff       	call   c0018f72 <IDE::getBase(unsigned char)>
c001a1a1:	89 c2                	mov    edx,eax
c001a1a3:	89 f8                	mov    eax,edi
c001a1a5:	66 ef                	out    dx,ax
c001a1a7:	45                   	inc    ebp
c001a1a8:	83 c4 10             	add    esp,0x10
c001a1ab:	81 fd 00 01 00 00    	cmp    ebp,0x100
c001a1b1:	75 d1                	jne    c001a184 <ATA::access(unsigned long long, int, void*, bool)+0x2f0>
c001a1b3:	eb 23                	jmp    c001a1d8 <ATA::access(unsigned long long, int, void*, bool)+0x344>
c001a1b5:	0f b6 d2             	movzx  edx,dl
c001a1b8:	51                   	push   ecx
c001a1b9:	51                   	push   ecx
c001a1ba:	52                   	push   edx
c001a1bb:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a1c1:	e8 ac ed ff ff       	call   c0018f72 <IDE::getBase(unsigned char)>
c001a1c6:	b9 00 01 00 00       	mov    ecx,0x100
c001a1cb:	89 c2                	mov    edx,eax
c001a1cd:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c001a1d1:	fc                   	cld    
c001a1d2:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c001a1d5:	83 c4 10             	add    esp,0x10
c001a1d8:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c001a1e0:	4e                   	dec    esi
c001a1e1:	e9 4a ff ff ff       	jmp    c001a130 <ATA::access(unsigned long long, int, void*, bool)+0x29c>
c001a1e6:	31 ff                	xor    edi,edi
c001a1e8:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001a1ed:	74 16                	je     c001a205 <ATA::access(unsigned long long, int, void*, bool)+0x371>
c001a1ef:	50                   	push   eax
c001a1f0:	50                   	push   eax
c001a1f1:	31 c0                	xor    eax,eax
c001a1f3:	80 7c 24 16 02       	cmp    BYTE PTR [esp+0x16],0x2
c001a1f8:	0f 94 c0             	sete   al
c001a1fb:	50                   	push   eax
c001a1fc:	53                   	push   ebx
c001a1fd:	e8 fc fb ff ff       	call   c0019dfe <ATA::flush(bool)>
c001a202:	83 c4 10             	add    esp,0x10
c001a205:	83 c4 2c             	add    esp,0x2c
c001a208:	89 f8                	mov    eax,edi
c001a20a:	5b                   	pop    ebx
c001a20b:	5e                   	pop    esi
c001a20c:	5f                   	pop    edi
c001a20d:	5d                   	pop    ebp
c001a20e:	c3                   	ret    
c001a20f:	90                   	nop

c001a210 <ATA::read(unsigned long long, int, void*)>:
c001a210:	57                   	push   edi
c001a211:	b8 04 00 00 00       	mov    eax,0x4
c001a216:	56                   	push   esi
c001a217:	53                   	push   ebx
c001a218:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a21c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001a220:	8d 7a ff             	lea    edi,[edx-0x1]
c001a223:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a227:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001a22b:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001a231:	77 25                	ja     c001a258 <ATA::read(unsigned long long, int, void*)+0x48>
c001a233:	b8 06 00 00 00       	mov    eax,0x6
c001a238:	85 f6                	test   esi,esi
c001a23a:	74 1c                	je     c001a258 <ATA::read(unsigned long long, int, void*)+0x48>
c001a23c:	50                   	push   eax
c001a23d:	50                   	push   eax
c001a23e:	6a 00                	push   0x0
c001a240:	56                   	push   esi
c001a241:	52                   	push   edx
c001a242:	53                   	push   ebx
c001a243:	51                   	push   ecx
c001a244:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a248:	e8 47 fc ff ff       	call   c0019e94 <ATA::access(unsigned long long, int, void*, bool)>
c001a24d:	83 c4 20             	add    esp,0x20
c001a250:	85 c0                	test   eax,eax
c001a252:	0f 95 c0             	setne  al
c001a255:	0f b6 c0             	movzx  eax,al
c001a258:	5b                   	pop    ebx
c001a259:	5e                   	pop    esi
c001a25a:	5f                   	pop    edi
c001a25b:	c3                   	ret    

c001a25c <ATA::write(unsigned long long, int, void*)>:
c001a25c:	57                   	push   edi
c001a25d:	b8 04 00 00 00       	mov    eax,0x4
c001a262:	56                   	push   esi
c001a263:	53                   	push   ebx
c001a264:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a268:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001a26c:	8d 7a ff             	lea    edi,[edx-0x1]
c001a26f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a273:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001a277:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001a27d:	77 25                	ja     c001a2a4 <ATA::write(unsigned long long, int, void*)+0x48>
c001a27f:	b8 06 00 00 00       	mov    eax,0x6
c001a284:	85 f6                	test   esi,esi
c001a286:	74 1c                	je     c001a2a4 <ATA::write(unsigned long long, int, void*)+0x48>
c001a288:	50                   	push   eax
c001a289:	50                   	push   eax
c001a28a:	6a 01                	push   0x1
c001a28c:	56                   	push   esi
c001a28d:	52                   	push   edx
c001a28e:	53                   	push   ebx
c001a28f:	51                   	push   ecx
c001a290:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a294:	e8 fb fb ff ff       	call   c0019e94 <ATA::access(unsigned long long, int, void*, bool)>
c001a299:	83 c4 20             	add    esp,0x20
c001a29c:	85 c0                	test   eax,eax
c001a29e:	0f 95 c0             	setne  al
c001a2a1:	0f b6 c0             	movzx  eax,al
c001a2a4:	5b                   	pop    ebx
c001a2a5:	5e                   	pop    esi
c001a2a6:	5f                   	pop    edi
c001a2a7:	c3                   	ret    

c001a2a8 <ATA::detectCHS()>:
c001a2a8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001a2ac:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c001a2b2:	c1 e0 06             	shl    eax,0x6
c001a2b5:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c001a2bb:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c001a2c5:	c7 44 24 04 1c f2 01 c0 	mov    DWORD PTR [esp+0x4],0xc001f21c
c001a2cd:	e9 6d 64 ff ff       	jmp    c001073f <Krnl::panic(char const*)>

c001a2d2 <ATA::open(int, int, void*)>:
c001a2d2:	53                   	push   ebx
c001a2d3:	83 ec 08             	sub    esp,0x8
c001a2d6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001a2da:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a2de:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001a2e2:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001a2e8:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001a2ee:	c1 e0 06             	shl    eax,0x6
c001a2f1:	01 d0                	add    eax,edx
c001a2f3:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c001a2fa:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c001a300:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c001a307:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001a311:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c001a317:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001a31e:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c001a325:	75 0c                	jne    c001a333 <ATA::open(int, int, void*)+0x61>
c001a327:	83 ec 0c             	sub    esp,0xc
c001a32a:	53                   	push   ebx
c001a32b:	e8 78 ff ff ff       	call   c001a2a8 <ATA::detectCHS()>
c001a330:	83 c4 10             	add    esp,0x10
c001a333:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001a339:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001a33f:	c1 e0 06             	shl    eax,0x6
c001a342:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c001a349:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001a353:	d1 e8                	shr    eax,1
c001a355:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c001a35b:	6a 04                	push   0x4
c001a35d:	6a 0c                	push   0xc
c001a35f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a366:	50                   	push   eax
c001a367:	52                   	push   edx
c001a368:	e8 17 ec ff ff       	call   c0018f84 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a36d:	90                   	nop
c001a36e:	90                   	nop
c001a36f:	6a 00                	push   0x0
c001a371:	6a 0c                	push   0xc
c001a373:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a37a:	50                   	push   eax
c001a37b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a381:	e8 fe eb ff ff       	call   c0018f84 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a386:	83 c4 14             	add    esp,0x14
c001a389:	53                   	push   ebx
c001a38a:	e8 d7 20 ff ff       	call   c000c466 <PhysicalDisk::startCache()>
c001a38f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a392:	e8 47 31 ff ff       	call   c000d4de <createPartitionsForDisk(PhysicalDisk*)>
c001a397:	31 c0                	xor    eax,eax
c001a399:	83 c4 18             	add    esp,0x18
c001a39c:	5b                   	pop    ebx
c001a39d:	c3                   	ret    

c001a39e <ATAPI::write(unsigned long long, int, void*)>:
c001a39e:	b8 03 00 00 00       	mov    eax,0x3
c001a3a3:	c3                   	ret    

c001a3a4 <ATAPI::close(int, int, void*)>:
c001a3a4:	83 ec 0c             	sub    esp,0xc
c001a3a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a3ab:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001a3b1:	85 c0                	test   eax,eax
c001a3b3:	74 0c                	je     c001a3c1 <ATAPI::close(int, int, void*)+0x1d>
c001a3b5:	83 ec 0c             	sub    esp,0xc
c001a3b8:	8b 10                	mov    edx,DWORD PTR [eax]
c001a3ba:	50                   	push   eax
c001a3bb:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001a3be:	83 c4 10             	add    esp,0x10
c001a3c1:	31 c0                	xor    eax,eax
c001a3c3:	83 c4 0c             	add    esp,0xc
c001a3c6:	c3                   	ret    
c001a3c7:	90                   	nop

c001a3c8 <ATAPI::ATAPI()>:
c001a3c8:	83 ec 0c             	sub    esp,0xc
c001a3cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a3cf:	83 ec 04             	sub    esp,0x4
c001a3d2:	68 00 08 00 00       	push   0x800
c001a3d7:	68 89 f3 01 c0       	push   0xc001f389
c001a3dc:	50                   	push   eax
c001a3dd:	e8 1c 20 ff ff       	call   c000c3fe <PhysicalDisk::PhysicalDisk(char const*, int)>
c001a3e2:	83 c4 10             	add    esp,0x10
c001a3e5:	ba 80 f2 01 c0       	mov    edx,0xc001f280
c001a3ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a3ee:	89 10                	mov    DWORD PTR [eax],edx
c001a3f0:	90                   	nop
c001a3f1:	83 c4 0c             	add    esp,0xc
c001a3f4:	c3                   	ret    
c001a3f5:	90                   	nop

c001a3f6 <ATAPI::readyForCommand()>:
c001a3f6:	56                   	push   esi
c001a3f7:	53                   	push   ebx
c001a3f8:	53                   	push   ebx
c001a3f9:	31 db                	xor    ebx,ebx
c001a3fb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a3ff:	51                   	push   ecx
c001a400:	6a 0c                	push   0xc
c001a402:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001a409:	50                   	push   eax
c001a40a:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001a410:	e8 2f ec ff ff       	call   c0019044 <IDE::read(unsigned char, unsigned char)>
c001a415:	83 c4 10             	add    esp,0x10
c001a418:	a8 88                	test   al,0x88
c001a41a:	74 25                	je     c001a441 <ATAPI::readyForCommand()+0x4b>
c001a41c:	43                   	inc    ebx
c001a41d:	81 fb 9f 05 00 00    	cmp    ebx,0x59f
c001a423:	7e da                	jle    c001a3ff <ATAPI::readyForCommand()+0x9>
c001a425:	83 ec 0c             	sub    esp,0xc
c001a428:	68 5e 01 00 00       	push   0x15e
c001a42d:	e8 62 99 ff ff       	call   c0013d94 <milliTenthSleep(unsigned int)>
c001a432:	83 c4 10             	add    esp,0x10
c001a435:	81 fb dc 05 00 00    	cmp    ebx,0x5dc
c001a43b:	75 c2                	jne    c001a3ff <ATAPI::readyForCommand()+0x9>
c001a43d:	31 c0                	xor    eax,eax
c001a43f:	eb 02                	jmp    c001a443 <ATAPI::readyForCommand()+0x4d>
c001a441:	b0 01                	mov    al,0x1
c001a443:	5a                   	pop    edx
c001a444:	5b                   	pop    ebx
c001a445:	5e                   	pop    esi
c001a446:	c3                   	ret    
c001a447:	90                   	nop

c001a448 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c001a448:	55                   	push   ebp
c001a449:	57                   	push   edi
c001a44a:	56                   	push   esi
c001a44b:	53                   	push   ebx
c001a44c:	83 ec 20             	sub    esp,0x20
c001a44f:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001a453:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c001a457:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001a45b:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001a45f:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001a463:	6a 01                	push   0x1
c001a465:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a46c:	50                   	push   eax
c001a46d:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a473:	e8 1a ed ff ff       	call   c0019192 <IDE::enableIRQs(unsigned char, bool)>
c001a478:	5e                   	pop    esi
c001a479:	58                   	pop    eax
c001a47a:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a481:	50                   	push   eax
c001a482:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a488:	e8 d1 ea ff ff       	call   c0018f5e <IDE::prepareInterrupt(unsigned char)>
c001a48d:	89 3c 24             	mov    DWORD PTR [esp],edi
c001a490:	e8 61 ff ff ff       	call   c001a3f6 <ATAPI::readyForCommand()>
c001a495:	83 c4 10             	add    esp,0x10
c001a498:	84 c0                	test   al,al
c001a49a:	75 0a                	jne    c001a4a6 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c001a49c:	bb 01 00 00 00       	mov    ebx,0x1
c001a4a1:	e9 57 02 00 00       	jmp    c001a6fd <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001a4a6:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c001a4ac:	c1 e0 04             	shl    eax,0x4
c001a4af:	0f b6 c0             	movzx  eax,al
c001a4b2:	50                   	push   eax
c001a4b3:	6a 06                	push   0x6
c001a4b5:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a4bc:	50                   	push   eax
c001a4bd:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a4c3:	e8 bc ea ff ff       	call   c0018f84 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a4c8:	6a 00                	push   0x0
c001a4ca:	6a 01                	push   0x1
c001a4cc:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a4d3:	50                   	push   eax
c001a4d4:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a4da:	e8 a5 ea ff ff       	call   c0018f84 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a4df:	83 c4 20             	add    esp,0x20
c001a4e2:	0f b6 c3             	movzx  eax,bl
c001a4e5:	0f b6 df             	movzx  ebx,bh
c001a4e8:	50                   	push   eax
c001a4e9:	6a 04                	push   0x4
c001a4eb:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a4f2:	50                   	push   eax
c001a4f3:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a4f9:	e8 86 ea ff ff       	call   c0018f84 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a4fe:	53                   	push   ebx
c001a4ff:	6a 05                	push   0x5
c001a501:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a508:	50                   	push   eax
c001a509:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a50f:	e8 70 ea ff ff       	call   c0018f84 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a514:	83 c4 20             	add    esp,0x20
c001a517:	68 a0 00 00 00       	push   0xa0
c001a51c:	6a 07                	push   0x7
c001a51e:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a525:	50                   	push   eax
c001a526:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a52c:	e8 53 ea ff ff       	call   c0018f84 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a531:	83 c4 0c             	add    esp,0xc
c001a534:	6a 01                	push   0x1
c001a536:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a53d:	50                   	push   eax
c001a53e:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a544:	e8 d9 f4 ff ff       	call   c0019a22 <IDE::polling(unsigned char, unsigned int)>
c001a549:	83 c4 10             	add    esp,0x10
c001a54c:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c001a552:	84 c0                	test   al,al
c001a554:	74 23                	je     c001a579 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c001a556:	0f b6 d8             	movzx  ebx,al
c001a559:	0f b6 d2             	movzx  edx,dl
c001a55c:	53                   	push   ebx
c001a55d:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c001a564:	50                   	push   eax
c001a565:	52                   	push   edx
c001a566:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a56c:	e8 01 f4 ff ff       	call   c0019972 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001a571:	83 c4 10             	add    esp,0x10
c001a574:	e9 84 01 00 00       	jmp    c001a6fd <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001a579:	0f b6 d2             	movzx  edx,dl
c001a57c:	53                   	push   ebx
c001a57d:	53                   	push   ebx
c001a57e:	52                   	push   edx
c001a57f:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a585:	e8 e8 e9 ff ff       	call   c0018f72 <IDE::getBase(unsigned char)>
c001a58a:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001a58e:	b9 06 00 00 00       	mov    ecx,0x6
c001a593:	89 c2                	mov    edx,eax
c001a595:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c001a598:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001a59c:	83 c4 10             	add    esp,0x10
c001a59f:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001a5a5:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001a5ac:	85 db                	test   ebx,ebx
c001a5ae:	0f 84 ec 00 00 00    	je     c001a6a0 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c001a5b4:	51                   	push   ecx
c001a5b5:	51                   	push   ecx
c001a5b6:	52                   	push   edx
c001a5b7:	50                   	push   eax
c001a5b8:	e8 35 eb ff ff       	call   c00190f2 <IDE::waitInterrupt(unsigned char)>
c001a5bd:	83 c4 10             	add    esp,0x10
c001a5c0:	84 c0                	test   al,al
c001a5c2:	0f 84 d4 fe ff ff    	je     c001a49c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001a5c8:	56                   	push   esi
c001a5c9:	56                   	push   esi
c001a5ca:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a5d1:	50                   	push   eax
c001a5d2:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a5d8:	e8 81 e9 ff ff       	call   c0018f5e <IDE::prepareInterrupt(unsigned char)>
c001a5dd:	83 c4 0c             	add    esp,0xc
c001a5e0:	6a 04                	push   0x4
c001a5e2:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a5e9:	50                   	push   eax
c001a5ea:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a5f0:	e8 4f ea ff ff       	call   c0019044 <IDE::read(unsigned char, unsigned char)>
c001a5f5:	83 c4 0c             	add    esp,0xc
c001a5f8:	89 c6                	mov    esi,eax
c001a5fa:	6a 05                	push   0x5
c001a5fc:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a603:	50                   	push   eax
c001a604:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a60a:	e8 35 ea ff ff       	call   c0019044 <IDE::read(unsigned char, unsigned char)>
c001a60f:	89 f1                	mov    ecx,esi
c001a611:	0f b6 c0             	movzx  eax,al
c001a614:	0f b6 f1             	movzx  esi,cl
c001a617:	c1 e0 08             	shl    eax,0x8
c001a61a:	09 c6                	or     esi,eax
c001a61c:	d1 fe                	sar    esi,1
c001a61e:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c001a622:	83 c4 10             	add    esp,0x10
c001a625:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c001a62a:	74 41                	je     c001a66d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x225>
c001a62c:	31 c9                	xor    ecx,ecx
c001a62e:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001a634:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001a63b:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c001a63f:	75 0a                	jne    c001a64b <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x203>
c001a641:	01 c9                	add    ecx,ecx
c001a643:	01 cd                	add    ebp,ecx
c001a645:	4b                   	dec    ebx
c001a646:	e9 54 ff ff ff       	jmp    c001a59f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c001a64b:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c001a650:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001a654:	51                   	push   ecx
c001a655:	51                   	push   ecx
c001a656:	52                   	push   edx
c001a657:	50                   	push   eax
c001a658:	e8 15 e9 ff ff       	call   c0018f72 <IDE::getBase(unsigned char)>
c001a65d:	89 c2                	mov    edx,eax
c001a65f:	89 f0                	mov    eax,esi
c001a661:	66 ef                	out    dx,ax
c001a663:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001a667:	83 c4 10             	add    esp,0x10
c001a66a:	41                   	inc    ecx
c001a66b:	eb c1                	jmp    c001a62e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e6>
c001a66d:	31 f6                	xor    esi,esi
c001a66f:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001a675:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001a67c:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c001a680:	75 06                	jne    c001a688 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x240>
c001a682:	01 f6                	add    esi,esi
c001a684:	01 f5                	add    ebp,esi
c001a686:	eb bd                	jmp    c001a645 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fd>
c001a688:	51                   	push   ecx
c001a689:	51                   	push   ecx
c001a68a:	52                   	push   edx
c001a68b:	50                   	push   eax
c001a68c:	e8 e1 e8 ff ff       	call   c0018f72 <IDE::getBase(unsigned char)>
c001a691:	89 c2                	mov    edx,eax
c001a693:	66 ed                	in     ax,dx
c001a695:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c001a69a:	83 c4 10             	add    esp,0x10
c001a69d:	46                   	inc    esi
c001a69e:	eb cf                	jmp    c001a66f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x227>
c001a6a0:	51                   	push   ecx
c001a6a1:	51                   	push   ecx
c001a6a2:	52                   	push   edx
c001a6a3:	50                   	push   eax
c001a6a4:	e8 49 ea ff ff       	call   c00190f2 <IDE::waitInterrupt(unsigned char)>
c001a6a9:	83 c4 10             	add    esp,0x10
c001a6ac:	84 c0                	test   al,al
c001a6ae:	0f 84 e8 fd ff ff    	je     c001a49c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001a6b4:	bb a0 86 01 00       	mov    ebx,0x186a0
c001a6b9:	52                   	push   edx
c001a6ba:	52                   	push   edx
c001a6bb:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a6c2:	50                   	push   eax
c001a6c3:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a6c9:	e8 90 e8 ff ff       	call   c0018f5e <IDE::prepareInterrupt(unsigned char)>
c001a6ce:	83 c4 10             	add    esp,0x10
c001a6d1:	50                   	push   eax
c001a6d2:	50                   	push   eax
c001a6d3:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a6da:	50                   	push   eax
c001a6db:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a6e1:	e8 8c e8 ff ff       	call   c0018f72 <IDE::getBase(unsigned char)>
c001a6e6:	8d 50 07             	lea    edx,[eax+0x7]
c001a6e9:	ec                   	in     al,dx
c001a6ea:	83 c4 10             	add    esp,0x10
c001a6ed:	a8 88                	test   al,0x88
c001a6ef:	74 0a                	je     c001a6fb <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c001a6f1:	4b                   	dec    ebx
c001a6f2:	75 dd                	jne    c001a6d1 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c001a6f4:	bb 02 00 00 00       	mov    ebx,0x2
c001a6f9:	eb 02                	jmp    c001a6fd <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001a6fb:	31 db                	xor    ebx,ebx
c001a6fd:	83 c4 1c             	add    esp,0x1c
c001a700:	89 d8                	mov    eax,ebx
c001a702:	5b                   	pop    ebx
c001a703:	5e                   	pop    esi
c001a704:	5f                   	pop    edi
c001a705:	5d                   	pop    ebp
c001a706:	c3                   	ret    
c001a707:	90                   	nop

c001a708 <ATAPI::diskRemoved()>:
c001a708:	53                   	push   ebx
c001a709:	83 ec 14             	sub    esp,0x14
c001a70c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001a710:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001a717:	ff b3 80 01 00 00    	push   DWORD PTR [ebx+0x180]
c001a71d:	e8 3c 2b ff ff       	call   c000d25e <LogicalDisk::unmount()>
c001a722:	58                   	pop    eax
c001a723:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001a729:	e8 76 34 ff ff       	call   c000dba4 <VCache::writeWriteBuffer()>
c001a72e:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c001a734:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001a738:	83 c4 18             	add    esp,0x18
c001a73b:	5b                   	pop    ebx
c001a73c:	e9 53 34 ff ff       	jmp    c000db94 <VCache::invalidateReadBuffer()>
c001a741:	90                   	nop

c001a742 <ATAPI::eject()>:
c001a742:	57                   	push   edi
c001a743:	b9 03 00 00 00       	mov    ecx,0x3
c001a748:	53                   	push   ebx
c001a749:	83 ec 14             	sub    esp,0x14
c001a74c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001a750:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001a754:	fc                   	cld    
c001a755:	31 c0                	xor    eax,eax
c001a757:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001a759:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001a75e:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001a763:	50                   	push   eax
c001a764:	50                   	push   eax
c001a765:	6a 00                	push   0x0
c001a767:	6a 00                	push   0x0
c001a769:	6a 00                	push   0x0
c001a76b:	6a 02                	push   0x2
c001a76d:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001a771:	50                   	push   eax
c001a772:	53                   	push   ebx
c001a773:	e8 d0 fc ff ff       	call   c001a448 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001a778:	83 c4 14             	add    esp,0x14
c001a77b:	53                   	push   ebx
c001a77c:	e8 87 ff ff ff       	call   c001a708 <ATAPI::diskRemoved()>
c001a781:	83 c4 24             	add    esp,0x24
c001a784:	31 c0                	xor    eax,eax
c001a786:	5b                   	pop    ebx
c001a787:	5f                   	pop    edi
c001a788:	c3                   	ret    
c001a789:	90                   	nop

c001a78a <ATAPI::diskInserted()>:
c001a78a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a78e:	c6 80 7c 01 00 00 01 	mov    BYTE PTR [eax+0x17c],0x1
c001a795:	c3                   	ret    

c001a796 <ATAPI::detectMedia()>:
c001a796:	56                   	push   esi
c001a797:	53                   	push   ebx
c001a798:	83 ec 28             	sub    esp,0x28
c001a79b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001a79f:	6a 0c                	push   0xc
c001a7a1:	6a 00                	push   0x0
c001a7a3:	8d 74 24 0e          	lea    esi,[esp+0xe]
c001a7a7:	56                   	push   esi
c001a7a8:	e8 43 5d fe ff       	call   c00004f0 <memset>
c001a7ad:	58                   	pop    eax
c001a7ae:	5a                   	pop    edx
c001a7af:	6a 00                	push   0x0
c001a7b1:	6a 00                	push   0x0
c001a7b3:	6a 00                	push   0x0
c001a7b5:	6a 00                	push   0x0
c001a7b7:	56                   	push   esi
c001a7b8:	53                   	push   ebx
c001a7b9:	e8 8a fc ff ff       	call   c001a448 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001a7be:	83 c4 1c             	add    esp,0x1c
c001a7c1:	6a 0c                	push   0xc
c001a7c3:	6a 00                	push   0x0
c001a7c5:	56                   	push   esi
c001a7c6:	e8 25 5d fe ff       	call   c00004f0 <memset>
c001a7cb:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c001a7d0:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c001a7d5:	59                   	pop    ecx
c001a7d6:	58                   	pop    eax
c001a7d7:	6a 01                	push   0x1
c001a7d9:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c001a7dd:	50                   	push   eax
c001a7de:	6a 00                	push   0x0
c001a7e0:	6a 12                	push   0x12
c001a7e2:	56                   	push   esi
c001a7e3:	53                   	push   ebx
c001a7e4:	e8 5f fc ff ff       	call   c001a448 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001a7e9:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c001a7ed:	83 c4 20             	add    esp,0x20
c001a7f0:	83 e0 7f             	and    eax,0x7f
c001a7f3:	3c 70                	cmp    al,0x70
c001a7f5:	74 15                	je     c001a80c <ATAPI::detectMedia()+0x76>
c001a7f7:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001a7fe:	75 0c                	jne    c001a80c <ATAPI::detectMedia()+0x76>
c001a800:	83 ec 0c             	sub    esp,0xc
c001a803:	53                   	push   ebx
c001a804:	e8 81 ff ff ff       	call   c001a78a <ATAPI::diskInserted()>
c001a809:	83 c4 10             	add    esp,0x10
c001a80c:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001a810:	83 e0 0f             	and    eax,0xf
c001a813:	3c 02                	cmp    al,0x2
c001a815:	75 1b                	jne    c001a832 <ATAPI::detectMedia()+0x9c>
c001a817:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c001a81c:	75 2d                	jne    c001a84b <ATAPI::detectMedia()+0xb5>
c001a81e:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001a825:	74 24                	je     c001a84b <ATAPI::detectMedia()+0xb5>
c001a827:	83 ec 0c             	sub    esp,0xc
c001a82a:	53                   	push   ebx
c001a82b:	e8 d8 fe ff ff       	call   c001a708 <ATAPI::diskRemoved()>
c001a830:	eb 16                	jmp    c001a848 <ATAPI::detectMedia()+0xb2>
c001a832:	84 c0                	test   al,al
c001a834:	75 15                	jne    c001a84b <ATAPI::detectMedia()+0xb5>
c001a836:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001a83d:	75 0c                	jne    c001a84b <ATAPI::detectMedia()+0xb5>
c001a83f:	83 ec 0c             	sub    esp,0xc
c001a842:	53                   	push   ebx
c001a843:	e8 42 ff ff ff       	call   c001a78a <ATAPI::diskInserted()>
c001a848:	83 c4 10             	add    esp,0x10
c001a84b:	83 c4 24             	add    esp,0x24
c001a84e:	5b                   	pop    ebx
c001a84f:	5e                   	pop    esi
c001a850:	c3                   	ret    
c001a851:	90                   	nop

c001a852 <ATAPI::open(int, int, void*)>:
c001a852:	56                   	push   esi
c001a853:	53                   	push   ebx
c001a854:	50                   	push   eax
c001a855:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001a859:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001a85d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a861:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001a867:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001a86d:	c1 e0 06             	shl    eax,0x6
c001a870:	01 d0                	add    eax,edx
c001a872:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c001a879:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c001a87f:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c001a886:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001a890:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001a896:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001a89d:	6a 04                	push   0x4
c001a89f:	6a 0c                	push   0xc
c001a8a1:	51                   	push   ecx
c001a8a2:	52                   	push   edx
c001a8a3:	e8 dc e6 ff ff       	call   c0018f84 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a8a8:	90                   	nop
c001a8a9:	90                   	nop
c001a8aa:	6a 00                	push   0x0
c001a8ac:	6a 0c                	push   0xc
c001a8ae:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a8b5:	50                   	push   eax
c001a8b6:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a8bc:	e8 c3 e6 ff ff       	call   c0018f84 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a8c1:	83 c4 14             	add    esp,0x14
c001a8c4:	68 74 01 00 00       	push   0x174
c001a8c9:	e8 93 d5 fe ff       	call   c0007e61 <malloc>
c001a8ce:	83 c4 0c             	add    esp,0xc
c001a8d1:	89 c6                	mov    esi,eax
c001a8d3:	6a 00                	push   0x0
c001a8d5:	68 ff ff ff 7f       	push   0x7fffffff
c001a8da:	6a 00                	push   0x0
c001a8dc:	6a 00                	push   0x0
c001a8de:	53                   	push   ebx
c001a8df:	68 7b f3 01 c0       	push   0xc001f37b
c001a8e4:	50                   	push   eax
c001a8e5:	e8 c0 27 ff ff       	call   c000d0aa <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001a8ea:	83 c4 14             	add    esp,0x14
c001a8ed:	56                   	push   esi
c001a8ee:	e8 6d 28 ff ff       	call   c000d160 <LogicalDisk::assignDriveLetter()>
c001a8f3:	5a                   	pop    edx
c001a8f4:	0f be c0             	movsx  eax,al
c001a8f7:	59                   	pop    ecx
c001a8f8:	50                   	push   eax
c001a8f9:	68 68 f2 01 c0       	push   0xc001f268
c001a8fe:	e8 ed 02 ff ff       	call   c000abf0 <Dbg::kprintf(char const*, ...)>
c001a903:	58                   	pop    eax
c001a904:	5a                   	pop    edx
c001a905:	56                   	push   esi
c001a906:	53                   	push   ebx
c001a907:	e8 24 17 ff ff       	call   c000c030 <Device::addChild(Device*)>
c001a90c:	89 b3 80 01 00 00    	mov    DWORD PTR [ebx+0x180],esi
c001a912:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a915:	e8 4c 1b ff ff       	call   c000c466 <PhysicalDisk::startCache()>
c001a91a:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001a921:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a924:	e8 6d fe ff ff       	call   c001a796 <ATAPI::detectMedia()>
c001a929:	83 c4 14             	add    esp,0x14
c001a92c:	31 c0                	xor    eax,eax
c001a92e:	5b                   	pop    ebx
c001a92f:	5e                   	pop    esi
c001a930:	c3                   	ret    
c001a931:	90                   	nop

c001a932 <ATAPI::read(unsigned long long, int, void*)>:
c001a932:	55                   	push   ebp
c001a933:	57                   	push   edi
c001a934:	56                   	push   esi
c001a935:	53                   	push   ebx
c001a936:	83 ec 1c             	sub    esp,0x1c
c001a939:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001a93d:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001a941:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001a945:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001a94c:	74 3c                	je     c001a98a <ATAPI::read(unsigned long long, int, void*)+0x58>
c001a94e:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001a952:	b9 03 00 00 00       	mov    ecx,0x3
c001a957:	fc                   	cld    
c001a958:	31 c0                	xor    eax,eax
c001a95a:	0f ce                	bswap  esi
c001a95c:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001a95e:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c001a963:	89 74 24 06          	mov    DWORD PTR [esp+0x6],esi
c001a967:	89 e8                	mov    eax,ebp
c001a969:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001a96d:	50                   	push   eax
c001a96e:	50                   	push   eax
c001a96f:	55                   	push   ebp
c001a970:	c1 e5 0b             	shl    ebp,0xb
c001a973:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001a977:	6a 00                	push   0x0
c001a979:	55                   	push   ebp
c001a97a:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001a97e:	50                   	push   eax
c001a97f:	53                   	push   ebx
c001a980:	e8 c3 fa ff ff       	call   c001a448 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001a985:	83 c4 20             	add    esp,0x20
c001a988:	eb 1a                	jmp    c001a9a4 <ATAPI::read(unsigned long long, int, void*)+0x72>
c001a98a:	83 ec 0c             	sub    esp,0xc
c001a98d:	53                   	push   ebx
c001a98e:	e8 03 fe ff ff       	call   c001a796 <ATAPI::detectMedia()>
c001a993:	83 c4 10             	add    esp,0x10
c001a996:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001a99d:	75 af                	jne    c001a94e <ATAPI::read(unsigned long long, int, void*)+0x1c>
c001a99f:	b8 02 00 00 00       	mov    eax,0x2
c001a9a4:	83 c4 1c             	add    esp,0x1c
c001a9a7:	5b                   	pop    ebx
c001a9a8:	5e                   	pop    esi
c001a9a9:	5f                   	pop    edi
c001a9aa:	5d                   	pop    ebp
c001a9ab:	c3                   	ret    

c001a9ac <SATA::close(int, int, void*)>:
c001a9ac:	83 ec 0c             	sub    esp,0xc
c001a9af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a9b3:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001a9b9:	85 c0                	test   eax,eax
c001a9bb:	74 0c                	je     c001a9c9 <SATA::close(int, int, void*)+0x1d>
c001a9bd:	83 ec 0c             	sub    esp,0xc
c001a9c0:	8b 10                	mov    edx,DWORD PTR [eax]
c001a9c2:	50                   	push   eax
c001a9c3:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001a9c6:	83 c4 10             	add    esp,0x10
c001a9c9:	31 c0                	xor    eax,eax
c001a9cb:	83 c4 0c             	add    esp,0xc
c001a9ce:	c3                   	ret    
c001a9cf:	90                   	nop

c001a9d0 <SATA::powerSaving(PowerSavingLevel)>:
c001a9d0:	c3                   	ret    
c001a9d1:	90                   	nop

c001a9d2 <SATA::open(int, int, void*)>:
c001a9d2:	56                   	push   esi
c001a9d3:	53                   	push   ebx
c001a9d4:	50                   	push   eax
c001a9d5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001a9d9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a9dd:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001a9e7:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001a9ed:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001a9f7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a9fb:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001aa05:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001aa0b:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001aa12:	e8 17 d8 fe ff       	call   c000822e <Phys::allocatePage()>
c001aa17:	89 c6                	mov    esi,eax
c001aa19:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001aa1f:	81 c6 00 10 00 00    	add    esi,0x1000
c001aa25:	e8 04 d8 fe ff       	call   c000822e <Phys::allocatePage()>
c001aa2a:	39 c6                	cmp    esi,eax
c001aa2c:	74 10                	je     c001aa3e <SATA::open(int, int, void*)+0x6c>
c001aa2e:	83 ec 0c             	sub    esp,0xc
c001aa31:	68 b0 f2 01 c0       	push   0xc001f2b0
c001aa36:	e8 04 5d ff ff       	call   c001073f <Krnl::panic(char const*)>
c001aa3b:	83 c4 10             	add    esp,0x10
c001aa3e:	83 ec 0c             	sub    esp,0xc
c001aa41:	6a 02                	push   0x2
c001aa43:	e8 55 ef fe ff       	call   c000999d <Virt::allocateKernelVirtualPages(int)>
c001aa48:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001aa4e:	6a 03                	push   0x3
c001aa50:	50                   	push   eax
c001aa51:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c001aa57:	ff 35 30 09 02 c0    	push   DWORD PTR ds:0xc0020930
c001aa5d:	e8 d0 f5 fe ff       	call   c000a032 <VAS::mapPage(unsigned long, unsigned long, int)>
c001aa62:	83 c4 14             	add    esp,0x14
c001aa65:	53                   	push   ebx
c001aa66:	e8 fb 19 ff ff       	call   c000c466 <PhysicalDisk::startCache()>
c001aa6b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001aa6e:	e8 6b 2a ff ff       	call   c000d4de <createPartitionsForDisk(PhysicalDisk*)>
c001aa73:	83 c4 14             	add    esp,0x14
c001aa76:	31 c0                	xor    eax,eax
c001aa78:	5b                   	pop    ebx
c001aa79:	5e                   	pop    esi
c001aa7a:	c3                   	ret    
c001aa7b:	90                   	nop

c001aa7c <SATA::SATA()>:
c001aa7c:	83 ec 0c             	sub    esp,0xc
c001aa7f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aa83:	83 ec 04             	sub    esp,0x4
c001aa86:	68 00 02 00 00       	push   0x200
c001aa8b:	68 c4 f2 01 c0       	push   0xc001f2c4
c001aa90:	50                   	push   eax
c001aa91:	e8 68 19 ff ff       	call   c000c3fe <PhysicalDisk::PhysicalDisk(char const*, int)>
c001aa96:	83 c4 10             	add    esp,0x10
c001aa99:	ba 34 f3 01 c0       	mov    edx,0xc001f334
c001aa9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aaa2:	89 10                	mov    DWORD PTR [eax],edx
c001aaa4:	90                   	nop
c001aaa5:	83 c4 0c             	add    esp,0xc
c001aaa8:	c3                   	ret    
c001aaa9:	90                   	nop

c001aaaa <SATA::access(unsigned long long, int, void*, bool)>:
c001aaaa:	55                   	push   ebp
c001aaab:	57                   	push   edi
c001aaac:	56                   	push   esi
c001aaad:	53                   	push   ebx
c001aaae:	83 ec 2c             	sub    esp,0x2c
c001aab1:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001aab5:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001aab9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001aabd:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001aac1:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001aac5:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c001aaca:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001aace:	7e 10                	jle    c001aae0 <SATA::access(unsigned long long, int, void*, bool)+0x36>
c001aad0:	83 ec 0c             	sub    esp,0xc
c001aad3:	68 d4 f2 01 c0       	push   0xc001f2d4
c001aad8:	e8 62 5c ff ff       	call   c001073f <Krnl::panic(char const*)>
c001aadd:	83 c4 10             	add    esp,0x10
c001aae0:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001aae6:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c001aaec:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001aaf2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001aaf6:	89 d0                	mov    eax,edx
c001aaf8:	c1 e0 07             	shl    eax,0x7
c001aafb:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001aaff:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001ab09:	51                   	push   ecx
c001ab0a:	8d 42 02             	lea    eax,[edx+0x2]
c001ab0d:	51                   	push   ecx
c001ab0e:	c1 e0 07             	shl    eax,0x7
c001ab11:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001ab15:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001ab19:	50                   	push   eax
c001ab1a:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c001ab20:	e8 e7 ef ff ff       	call   c0019b0c <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001ab25:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001ab29:	83 c4 10             	add    esp,0x10
c001ab2c:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c001ab31:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ab35:	0f 84 4f 01 00 00    	je     c001ac8a <SATA::access(unsigned long long, int, void*, bool)+0x1e0>
c001ab3b:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001ab3f:	c1 e0 09             	shl    eax,0x9
c001ab42:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001ab47:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001ab4b:	74 0e                	je     c001ab5b <SATA::access(unsigned long long, int, void*, bool)+0xb1>
c001ab4d:	8b bb 78 01 00 00    	mov    edi,DWORD PTR [ebx+0x178]
c001ab53:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c001ab57:	89 c1                	mov    ecx,eax
c001ab59:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001ab5b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001ab5f:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001ab65:	8d 42 02             	lea    eax,[edx+0x2]
c001ab68:	c1 e0 07             	shl    eax,0x7
c001ab6b:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001ab6f:	8b 00                	mov    eax,DWORD PTR [eax]
c001ab71:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001ab77:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001ab7d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001ab81:	c1 e1 05             	shl    ecx,0x5
c001ab84:	01 c8                	add    eax,ecx
c001ab86:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c001ab8a:	83 e1 01             	and    ecx,0x1
c001ab8d:	89 ce                	mov    esi,ecx
c001ab8f:	8a 08                	mov    cl,BYTE PTR [eax]
c001ab91:	c1 e6 06             	shl    esi,0x6
c001ab94:	83 e1 bf             	and    ecx,0xffffffbf
c001ab97:	09 f1                	or     ecx,esi
c001ab99:	88 08                	mov    BYTE PTR [eax],cl
c001ab9b:	8b 08                	mov    ecx,DWORD PTR [eax]
c001ab9d:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c001aba3:	81 c9 05 00 01 00    	or     ecx,0x10005
c001aba9:	89 08                	mov    DWORD PTR [eax],ecx
c001abab:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001abb1:	8b b1 58 01 00 00    	mov    esi,DWORD PTR [ecx+0x158]
c001abb7:	2b b1 5c 01 00 00    	sub    esi,DWORD PTR [ecx+0x15c]
c001abbd:	03 70 08             	add    esi,DWORD PTR [eax+0x8]
c001abc0:	50                   	push   eax
c001abc1:	68 90 00 00 00       	push   0x90
c001abc6:	6a 00                	push   0x0
c001abc8:	56                   	push   esi
c001abc9:	e8 22 59 fe ff       	call   c00004f0 <memset>
c001abce:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001abd4:	66 89 6e 04          	mov    WORD PTR [esi+0x4],bp
c001abd8:	89 86 80 00 00 00    	mov    DWORD PTR [esi+0x80],eax
c001abde:	c6 46 07 40          	mov    BYTE PTR [esi+0x7],0x40
c001abe2:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001abe6:	83 c4 10             	add    esp,0x10
c001abe9:	48                   	dec    eax
c001abea:	25 ff ff 3f 00       	and    eax,0x3fffff
c001abef:	89 c1                	mov    ecx,eax
c001abf1:	8b 86 8c 00 00 00    	mov    eax,DWORD PTR [esi+0x8c]
c001abf7:	25 00 00 c0 ff       	and    eax,0xffc00000
c001abfc:	09 c8                	or     eax,ecx
c001abfe:	89 86 8c 00 00 00    	mov    DWORD PTR [esi+0x8c],eax
c001ac04:	66 8b 06             	mov    ax,WORD PTR [esi]
c001ac07:	80 8e 8f 00 00 00 80 	or     BYTE PTR [esi+0x8f],0x80
c001ac0e:	66 25 00 7f          	and    ax,0x7f00
c001ac12:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001ac16:	66 0d 27 80          	or     ax,0x8027
c001ac1a:	80 7c 24 0c 01       	cmp    BYTE PTR [esp+0xc],0x1
c001ac1f:	66 89 06             	mov    WORD PTR [esi],ax
c001ac22:	19 c0                	sbb    eax,eax
c001ac24:	83 e0 f0             	and    eax,0xfffffff0
c001ac27:	83 c0 35             	add    eax,0x35
c001ac2a:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c001ac2d:	89 e8                	mov    eax,ebp
c001ac2f:	c1 e8 10             	shr    eax,0x10
c001ac32:	88 46 06             	mov    BYTE PTR [esi+0x6],al
c001ac35:	89 e8                	mov    eax,ebp
c001ac37:	c1 e8 18             	shr    eax,0x18
c001ac3a:	88 46 08             	mov    BYTE PTR [esi+0x8],al
c001ac3d:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c001ac41:	88 46 09             	mov    BYTE PTR [esi+0x9],al
c001ac44:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ac48:	88 66 0a             	mov    BYTE PTR [esi+0xa],ah
c001ac4b:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001ac4f:	66 89 46 0c          	mov    WORD PTR [esi+0xc],ax
c001ac53:	89 d6                	mov    esi,edx
c001ac55:	31 c0                	xor    eax,eax
c001ac57:	c1 e6 07             	shl    esi,0x7
c001ac5a:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001ac5e:	8b 8e 20 01 00 00    	mov    ecx,DWORD PTR [esi+0x120]
c001ac64:	80 e1 88             	and    cl,0x88
c001ac67:	74 0a                	je     c001ac73 <SATA::access(unsigned long long, int, void*, bool)+0x1c9>
c001ac69:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001ac6e:	74 0a                	je     c001ac7a <SATA::access(unsigned long long, int, void*, bool)+0x1d0>
c001ac70:	40                   	inc    eax
c001ac71:	eb eb                	jmp    c001ac5e <SATA::access(unsigned long long, int, void*, bool)+0x1b4>
c001ac73:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001ac78:	75 17                	jne    c001ac91 <SATA::access(unsigned long long, int, void*, bool)+0x1e7>
c001ac7a:	83 ec 0c             	sub    esp,0xc
c001ac7d:	68 0d f3 01 c0       	push   0xc001f30d
c001ac82:	e8 69 ff fe ff       	call   c000abf0 <Dbg::kprintf(char const*, ...)>
c001ac87:	83 c4 10             	add    esp,0x10
c001ac8a:	b8 01 00 00 00       	mov    eax,0x1
c001ac8f:	eb 5d                	jmp    c001acee <SATA::access(unsigned long long, int, void*, bool)+0x244>
c001ac91:	b8 01 00 00 00       	mov    eax,0x1
c001ac96:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c001ac9a:	c1 e2 07             	shl    edx,0x7
c001ac9d:	d3 e0                	shl    eax,cl
c001ac9f:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c001aca3:	89 86 38 01 00 00    	mov    DWORD PTR [esi+0x138],eax
c001aca9:	8b 8a 38 01 00 00    	mov    ecx,DWORD PTR [edx+0x138]
c001acaf:	85 c8                	test   eax,ecx
c001acb1:	74 16                	je     c001acc9 <SATA::access(unsigned long long, int, void*, bool)+0x21f>
c001acb3:	8b 8a 10 01 00 00    	mov    ecx,DWORD PTR [edx+0x110]
c001acb9:	0f ba e1 1e          	bt     ecx,0x1e
c001acbd:	73 ea                	jae    c001aca9 <SATA::access(unsigned long long, int, void*, bool)+0x1ff>
c001acbf:	83 ec 0c             	sub    esp,0xc
c001acc2:	68 1b f3 01 c0       	push   0xc001f31b
c001acc7:	eb b9                	jmp    c001ac82 <SATA::access(unsigned long long, int, void*, bool)+0x1d8>
c001acc9:	8b 82 10 01 00 00    	mov    eax,DWORD PTR [edx+0x110]
c001accf:	0f ba e0 1e          	bt     eax,0x1e
c001acd3:	72 b5                	jb     c001ac8a <SATA::access(unsigned long long, int, void*, bool)+0x1e0>
c001acd5:	31 c0                	xor    eax,eax
c001acd7:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001acdc:	75 10                	jne    c001acee <SATA::access(unsigned long long, int, void*, bool)+0x244>
c001acde:	8b b3 78 01 00 00    	mov    esi,DWORD PTR [ebx+0x178]
c001ace4:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c001ace8:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001acec:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001acee:	83 c4 2c             	add    esp,0x2c
c001acf1:	5b                   	pop    ebx
c001acf2:	5e                   	pop    esi
c001acf3:	5f                   	pop    edi
c001acf4:	5d                   	pop    ebp
c001acf5:	c3                   	ret    

c001acf6 <SATA::read(unsigned long long, int, void*)>:
c001acf6:	57                   	push   edi
c001acf7:	b8 04 00 00 00       	mov    eax,0x4
c001acfc:	56                   	push   esi
c001acfd:	53                   	push   ebx
c001acfe:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001ad02:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001ad06:	8d 7a ff             	lea    edi,[edx-0x1]
c001ad09:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001ad0d:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001ad11:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001ad17:	77 25                	ja     c001ad3e <SATA::read(unsigned long long, int, void*)+0x48>
c001ad19:	b8 06 00 00 00       	mov    eax,0x6
c001ad1e:	85 f6                	test   esi,esi
c001ad20:	74 1c                	je     c001ad3e <SATA::read(unsigned long long, int, void*)+0x48>
c001ad22:	50                   	push   eax
c001ad23:	50                   	push   eax
c001ad24:	6a 00                	push   0x0
c001ad26:	56                   	push   esi
c001ad27:	52                   	push   edx
c001ad28:	53                   	push   ebx
c001ad29:	51                   	push   ecx
c001ad2a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ad2e:	e8 77 fd ff ff       	call   c001aaaa <SATA::access(unsigned long long, int, void*, bool)>
c001ad33:	83 c4 20             	add    esp,0x20
c001ad36:	85 c0                	test   eax,eax
c001ad38:	0f 95 c0             	setne  al
c001ad3b:	0f b6 c0             	movzx  eax,al
c001ad3e:	5b                   	pop    ebx
c001ad3f:	5e                   	pop    esi
c001ad40:	5f                   	pop    edi
c001ad41:	c3                   	ret    

c001ad42 <SATA::write(unsigned long long, int, void*)>:
c001ad42:	55                   	push   ebp
c001ad43:	b8 04 00 00 00       	mov    eax,0x4
c001ad48:	57                   	push   edi
c001ad49:	56                   	push   esi
c001ad4a:	53                   	push   ebx
c001ad4b:	83 ec 0c             	sub    esp,0xc
c001ad4e:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001ad52:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001ad56:	8d 73 ff             	lea    esi,[ebx-0x1]
c001ad59:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001ad5d:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001ad61:	81 fe fe 00 00 00    	cmp    esi,0xfe
c001ad67:	77 3d                	ja     c001ada6 <SATA::write(unsigned long long, int, void*)+0x64>
c001ad69:	b8 06 00 00 00       	mov    eax,0x6
c001ad6e:	85 ed                	test   ebp,ebp
c001ad70:	74 34                	je     c001ada6 <SATA::write(unsigned long long, int, void*)+0x64>
c001ad72:	c1 e3 09             	shl    ebx,0x9
c001ad75:	01 eb                	add    ebx,ebp
c001ad77:	89 d6                	mov    esi,edx
c001ad79:	89 cf                	mov    edi,ecx
c001ad7b:	83 c6 01             	add    esi,0x1
c001ad7e:	83 d7 00             	adc    edi,0x0
c001ad81:	50                   	push   eax
c001ad82:	50                   	push   eax
c001ad83:	6a 01                	push   0x1
c001ad85:	55                   	push   ebp
c001ad86:	81 c5 00 02 00 00    	add    ebp,0x200
c001ad8c:	6a 01                	push   0x1
c001ad8e:	51                   	push   ecx
c001ad8f:	52                   	push   edx
c001ad90:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001ad94:	e8 11 fd ff ff       	call   c001aaaa <SATA::access(unsigned long long, int, void*, bool)>
c001ad99:	83 c4 20             	add    esp,0x20
c001ad9c:	89 f2                	mov    edx,esi
c001ad9e:	89 f9                	mov    ecx,edi
c001ada0:	39 dd                	cmp    ebp,ebx
c001ada2:	75 d3                	jne    c001ad77 <SATA::write(unsigned long long, int, void*)+0x35>
c001ada4:	31 c0                	xor    eax,eax
c001ada6:	83 c4 0c             	add    esp,0xc
c001ada9:	5b                   	pop    ebx
c001adaa:	5e                   	pop    esi
c001adab:	5f                   	pop    edi
c001adac:	5d                   	pop    ebp
c001adad:	c3                   	ret    

c001adae <SATAPI::write(unsigned long long, int, void*)>:
c001adae:	b8 03 00 00 00       	mov    eax,0x3
c001adb3:	c3                   	ret    

c001adb4 <SATAPI::close(int, int, void*)>:
c001adb4:	83 ec 0c             	sub    esp,0xc
c001adb7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001adbb:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001adc1:	85 c0                	test   eax,eax
c001adc3:	74 0c                	je     c001add1 <SATAPI::close(int, int, void*)+0x1d>
c001adc5:	83 ec 0c             	sub    esp,0xc
c001adc8:	8b 10                	mov    edx,DWORD PTR [eax]
c001adca:	50                   	push   eax
c001adcb:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001adce:	83 c4 10             	add    esp,0x10
c001add1:	31 c0                	xor    eax,eax
c001add3:	83 c4 0c             	add    esp,0xc
c001add6:	c3                   	ret    
c001add7:	90                   	nop

c001add8 <SATAPI::open(int, int, void*)>:
c001add8:	56                   	push   esi
c001add9:	53                   	push   ebx
c001adda:	51                   	push   ecx
c001addb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001addf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ade3:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001aded:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001adf3:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001adfd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ae01:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001ae0b:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001ae11:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001ae18:	e8 11 d4 fe ff       	call   c000822e <Phys::allocatePage()>
c001ae1d:	89 c6                	mov    esi,eax
c001ae1f:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c001ae25:	81 c6 00 10 00 00    	add    esi,0x1000
c001ae2b:	e8 fe d3 fe ff       	call   c000822e <Phys::allocatePage()>
c001ae30:	39 c6                	cmp    esi,eax
c001ae32:	74 10                	je     c001ae44 <SATAPI::open(int, int, void*)+0x6c>
c001ae34:	83 ec 0c             	sub    esp,0xc
c001ae37:	68 64 f3 01 c0       	push   0xc001f364
c001ae3c:	e8 fe 58 ff ff       	call   c001073f <Krnl::panic(char const*)>
c001ae41:	83 c4 10             	add    esp,0x10
c001ae44:	83 ec 0c             	sub    esp,0xc
c001ae47:	6a 02                	push   0x2
c001ae49:	e8 4f eb fe ff       	call   c000999d <Virt::allocateKernelVirtualPages(int)>
c001ae4e:	89 83 80 01 00 00    	mov    DWORD PTR [ebx+0x180],eax
c001ae54:	6a 03                	push   0x3
c001ae56:	50                   	push   eax
c001ae57:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c001ae5d:	ff 35 30 09 02 c0    	push   DWORD PTR ds:0xc0020930
c001ae63:	e8 ca f1 fe ff       	call   c000a032 <VAS::mapPage(unsigned long, unsigned long, int)>
c001ae68:	83 c4 14             	add    esp,0x14
c001ae6b:	68 74 01 00 00       	push   0x174
c001ae70:	e8 ec cf fe ff       	call   c0007e61 <malloc>
c001ae75:	83 c4 0c             	add    esp,0xc
c001ae78:	89 c6                	mov    esi,eax
c001ae7a:	6a 00                	push   0x0
c001ae7c:	68 ff ff ff 7f       	push   0x7fffffff
c001ae81:	6a 00                	push   0x0
c001ae83:	6a 00                	push   0x0
c001ae85:	53                   	push   ebx
c001ae86:	68 7a f3 01 c0       	push   0xc001f37a
c001ae8b:	50                   	push   eax
c001ae8c:	e8 19 22 ff ff       	call   c000d0aa <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001ae91:	83 c4 14             	add    esp,0x14
c001ae94:	56                   	push   esi
c001ae95:	e8 c6 22 ff ff       	call   c000d160 <LogicalDisk::assignDriveLetter()>
c001ae9a:	5a                   	pop    edx
c001ae9b:	0f be c0             	movsx  eax,al
c001ae9e:	59                   	pop    ecx
c001ae9f:	50                   	push   eax
c001aea0:	68 68 f2 01 c0       	push   0xc001f268
c001aea5:	e8 46 fd fe ff       	call   c000abf0 <Dbg::kprintf(char const*, ...)>
c001aeaa:	58                   	pop    eax
c001aeab:	5a                   	pop    edx
c001aeac:	56                   	push   esi
c001aead:	53                   	push   ebx
c001aeae:	e8 7d 11 ff ff       	call   c000c030 <Device::addChild(Device*)>
c001aeb3:	89 b3 78 01 00 00    	mov    DWORD PTR [ebx+0x178],esi
c001aeb9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001aebc:	e8 a5 15 ff ff       	call   c000c466 <PhysicalDisk::startCache()>
c001aec1:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c001aec8:	31 c0                	xor    eax,eax
c001aeca:	83 c4 14             	add    esp,0x14
c001aecd:	5b                   	pop    ebx
c001aece:	5e                   	pop    esi
c001aecf:	c3                   	ret    

c001aed0 <SATAPI::SATAPI()>:
c001aed0:	83 ec 0c             	sub    esp,0xc
c001aed3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aed7:	83 ec 04             	sub    esp,0x4
c001aeda:	68 00 08 00 00       	push   0x800
c001aedf:	68 88 f3 01 c0       	push   0xc001f388
c001aee4:	50                   	push   eax
c001aee5:	e8 14 15 ff ff       	call   c000c3fe <PhysicalDisk::PhysicalDisk(char const*, int)>
c001aeea:	83 c4 10             	add    esp,0x10
c001aeed:	ba c4 f4 01 c0       	mov    edx,0xc001f4c4
c001aef2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aef6:	89 10                	mov    DWORD PTR [eax],edx
c001aef8:	90                   	nop
c001aef9:	83 c4 0c             	add    esp,0xc
c001aefc:	c3                   	ret    
c001aefd:	90                   	nop

c001aefe <SATAPI::diskRemoved()>:
c001aefe:	c3                   	ret    
c001aeff:	90                   	nop

c001af00 <SATAPI::diskInserted()>:
c001af00:	83 ec 18             	sub    esp,0x18
c001af03:	68 94 f3 01 c0       	push   0xc001f394
c001af08:	e8 e3 fc fe ff       	call   c000abf0 <Dbg::kprintf(char const*, ...)>
c001af0d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001af11:	c6 80 74 01 00 00 01 	mov    BYTE PTR [eax+0x174],0x1
c001af18:	83 c4 1c             	add    esp,0x1c
c001af1b:	c3                   	ret    

c001af1c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c001af1c:	55                   	push   ebp
c001af1d:	57                   	push   edi
c001af1e:	56                   	push   esi
c001af1f:	53                   	push   ebx
c001af20:	83 ec 38             	sub    esp,0x38
c001af23:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c001af27:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c001af2b:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c001af2f:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001af33:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001af37:	68 ac f3 01 c0       	push   0xc001f3ac
c001af3c:	e8 af fc fe ff       	call   c000abf0 <Dbg::kprintf(char const*, ...)>
c001af41:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c001af47:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001af4d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001af51:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
c001af57:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001af5b:	c1 e0 07             	shl    eax,0x7
c001af5e:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c001af62:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001af66:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001af70:	58                   	pop    eax
c001af71:	5a                   	pop    edx
c001af72:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001af76:	8d 58 02             	lea    ebx,[eax+0x2]
c001af79:	c1 e3 07             	shl    ebx,0x7
c001af7c:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c001af80:	53                   	push   ebx
c001af81:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001af87:	e8 80 eb ff ff       	call   c0019b0c <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001af8c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001af90:	83 c4 10             	add    esp,0x10
c001af93:	b8 01 00 00 00       	mov    eax,0x1
c001af98:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c001af9d:	0f 84 4c 02 00 00    	je     c001b1ef <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d3>
c001afa3:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001afa9:	8b 03                	mov    eax,DWORD PTR [ebx]
c001afab:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001afb1:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001afb7:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001afbb:	c1 e1 05             	shl    ecx,0x5
c001afbe:	01 c8                	add    eax,ecx
c001afc0:	8b 08                	mov    ecx,DWORD PTR [eax]
c001afc2:	81 e1 80 ff 00 00    	and    ecx,0xff80
c001afc8:	81 c9 25 00 01 00    	or     ecx,0x10025
c001afce:	89 08                	mov    DWORD PTR [eax],ecx
c001afd0:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001afd6:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c001afdc:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c001afe2:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c001afe5:	8d 7b 40             	lea    edi,[ebx+0x40]
c001afe8:	50                   	push   eax
c001afe9:	68 90 00 00 00       	push   0x90
c001afee:	6a 00                	push   0x0
c001aff0:	53                   	push   ebx
c001aff1:	e8 fa 54 fe ff       	call   c00004f0 <memset>
c001aff6:	b9 0c 00 00 00       	mov    ecx,0xc
c001affb:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c001afff:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001b001:	8b 85 7c 01 00 00    	mov    eax,DWORD PTR [ebp+0x17c]
c001b007:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c001b00b:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c001b011:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c001b015:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001b019:	48                   	dec    eax
c001b01a:	25 ff ff 3f 00       	and    eax,0x3fffff
c001b01f:	89 c1                	mov    ecx,eax
c001b021:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c001b027:	25 00 00 c0 ff       	and    eax,0xffc00000
c001b02c:	09 c8                	or     eax,ecx
c001b02e:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c001b034:	66 8b 03             	mov    ax,WORD PTR [ebx]
c001b037:	80 8b 8f 00 00 00 80 	or     BYTE PTR [ebx+0x8f],0x80
c001b03e:	66 25 00 7f          	and    ax,0x7f00
c001b042:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001b046:	66 0d 27 80          	or     ax,0x8027
c001b04a:	66 89 53 04          	mov    WORD PTR [ebx+0x4],dx
c001b04e:	66 89 03             	mov    WORD PTR [ebx],ax
c001b051:	89 d0                	mov    eax,edx
c001b053:	c1 ea 18             	shr    edx,0x18
c001b056:	c1 e8 10             	shr    eax,0x10
c001b059:	88 53 08             	mov    BYTE PTR [ebx+0x8],dl
c001b05c:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c001b05f:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c001b063:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c001b066:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001b06a:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c001b06d:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001b071:	83 c4 10             	add    esp,0x10
c001b074:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c001b078:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001b07c:	31 c0                	xor    eax,eax
c001b07e:	8b 8a 20 01 00 00    	mov    ecx,DWORD PTR [edx+0x120]
c001b084:	80 e1 88             	and    cl,0x88
c001b087:	74 0a                	je     c001b093 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x177>
c001b089:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001b08e:	74 0a                	je     c001b09a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x17e>
c001b090:	40                   	inc    eax
c001b091:	eb eb                	jmp    c001b07e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x162>
c001b093:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001b098:	75 16                	jne    c001b0b0 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x194>
c001b09a:	83 ec 0c             	sub    esp,0xc
c001b09d:	68 c6 f3 01 c0       	push   0xc001f3c6
c001b0a2:	e8 49 fb fe ff       	call   c000abf0 <Dbg::kprintf(char const*, ...)>
c001b0a7:	5f                   	pop    edi
c001b0a8:	5d                   	pop    ebp
c001b0a9:	68 db f3 01 c0       	push   0xc001f3db
c001b0ae:	eb 4f                	jmp    c001b0ff <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1e3>
c001b0b0:	be 01 00 00 00       	mov    esi,0x1
c001b0b5:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c001b0b9:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001b0bd:	d3 e6                	shl    esi,cl
c001b0bf:	c1 e7 07             	shl    edi,0x7
c001b0c2:	89 b2 38 01 00 00    	mov    DWORD PTR [edx+0x138],esi
c001b0c8:	bb a8 e4 ff ff       	mov    ebx,0xffffe4a8
c001b0cd:	03 7c 24 08          	add    edi,DWORD PTR [esp+0x8]
c001b0d1:	8b 87 38 01 00 00    	mov    eax,DWORD PTR [edi+0x138]
c001b0d7:	85 c6                	test   esi,eax
c001b0d9:	8b 87 10 01 00 00    	mov    eax,DWORD PTR [edi+0x110]
c001b0df:	0f 84 cb 00 00 00    	je     c001b1b0 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x294>
c001b0e5:	0f ba e0 1e          	bt     eax,0x1e
c001b0e9:	73 2c                	jae    c001b117 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1fb>
c001b0eb:	83 ec 0c             	sub    esp,0xc
c001b0ee:	68 ed f3 01 c0       	push   0xc001f3ed
c001b0f3:	e8 f8 fa fe ff       	call   c000abf0 <Dbg::kprintf(char const*, ...)>
c001b0f8:	5b                   	pop    ebx
c001b0f9:	5e                   	pop    esi
c001b0fa:	68 00 f4 01 c0       	push   0xc001f400
c001b0ff:	ff 35 90 08 02 c0    	push   DWORD PTR ds:0xc0020890
c001b105:	e8 c6 dd fe ff       	call   c0008ed0 <VgaText::puts(char const*)>
c001b10a:	83 c4 10             	add    esp,0x10
c001b10d:	b8 01 00 00 00       	mov    eax,0x1
c001b112:	e9 d8 00 00 00       	jmp    c001b1ef <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d3>
c001b117:	8d 83 70 17 00 00    	lea    eax,[ebx+0x1770]
c001b11d:	83 f8 0d             	cmp    eax,0xd
c001b120:	77 0a                	ja     c001b12c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x210>
c001b122:	83 ec 0c             	sub    esp,0xc
c001b125:	68 c8 00 00 00       	push   0xc8
c001b12a:	eb 28                	jmp    c001b154 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x238>
c001b12c:	8d 83 88 13 00 00    	lea    eax,[ebx+0x1388]
c001b132:	83 f8 0d             	cmp    eax,0xd
c001b135:	77 0a                	ja     c001b141 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x225>
c001b137:	83 ec 0c             	sub    esp,0xc
c001b13a:	68 58 02 00 00       	push   0x258
c001b13f:	eb 13                	jmp    c001b154 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x238>
c001b141:	8d 83 a0 0f 00 00    	lea    eax,[ebx+0xfa0]
c001b147:	83 f8 06             	cmp    eax,0x6
c001b14a:	77 10                	ja     c001b15c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x240>
c001b14c:	83 ec 0c             	sub    esp,0xc
c001b14f:	68 dc 05 00 00       	push   0x5dc
c001b154:	e8 3b 8c ff ff       	call   c0013d94 <milliTenthSleep(unsigned int)>
c001b159:	83 c4 10             	add    esp,0x10
c001b15c:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001b160:	80 38 1b             	cmp    BYTE PTR [eax],0x1b
c001b163:	75 06                	jne    c001b16b <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x24f>
c001b165:	80 78 04 01          	cmp    BYTE PTR [eax+0x4],0x1
c001b169:	74 15                	je     c001b180 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x264>
c001b16b:	83 fb 06             	cmp    ebx,0x6
c001b16e:	77 10                	ja     c001b180 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x264>
c001b170:	83 ec 0c             	sub    esp,0xc
c001b173:	68 c4 09 00 00       	push   0x9c4
c001b178:	e8 17 8c ff ff       	call   c0013d94 <milliTenthSleep(unsigned int)>
c001b17d:	83 c4 10             	add    esp,0x10
c001b180:	43                   	inc    ebx
c001b181:	81 fb b9 0b 00 00    	cmp    ebx,0xbb9
c001b187:	0f 85 44 ff ff ff    	jne    c001b0d1 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1b5>
c001b18d:	51                   	push   ecx
c001b18e:	51                   	push   ecx
c001b18f:	68 11 f4 01 c0       	push   0xc001f411
c001b194:	ff 35 90 08 02 c0    	push   DWORD PTR ds:0xc0020890
c001b19a:	e8 31 dd fe ff       	call   c0008ed0 <VgaText::puts(char const*)>
c001b19f:	c7 04 24 21 f4 01 c0 	mov    DWORD PTR [esp],0xc001f421
c001b1a6:	e8 45 fa fe ff       	call   c000abf0 <Dbg::kprintf(char const*, ...)>
c001b1ab:	e9 5a ff ff ff       	jmp    c001b10a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1ee>
c001b1b0:	0f ba e0 1e          	bt     eax,0x1e
c001b1b4:	73 19                	jae    c001b1cf <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2b3>
c001b1b6:	83 ec 0c             	sub    esp,0xc
c001b1b9:	68 35 f4 01 c0       	push   0xc001f435
c001b1be:	e8 2d fa fe ff       	call   c000abf0 <Dbg::kprintf(char const*, ...)>
c001b1c3:	58                   	pop    eax
c001b1c4:	5a                   	pop    edx
c001b1c5:	68 4a f4 01 c0       	push   0xc001f44a
c001b1ca:	e9 30 ff ff ff       	jmp    c001b0ff <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1e3>
c001b1cf:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
c001b1d4:	74 17                	je     c001b1ed <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d1>
c001b1d6:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c001b1db:	74 10                	je     c001b1ed <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d1>
c001b1dd:	8b b5 80 01 00 00    	mov    esi,DWORD PTR [ebp+0x180]
c001b1e3:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c001b1e7:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c001b1eb:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001b1ed:	31 c0                	xor    eax,eax
c001b1ef:	83 c4 2c             	add    esp,0x2c
c001b1f2:	5b                   	pop    ebx
c001b1f3:	5e                   	pop    esi
c001b1f4:	5f                   	pop    edi
c001b1f5:	5d                   	pop    ebp
c001b1f6:	c3                   	ret    
c001b1f7:	90                   	nop

c001b1f8 <SATAPI::eject()>:
c001b1f8:	57                   	push   edi
c001b1f9:	b9 03 00 00 00       	mov    ecx,0x3
c001b1fe:	83 ec 18             	sub    esp,0x18
c001b201:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001b205:	fc                   	cld    
c001b206:	31 c0                	xor    eax,eax
c001b208:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001b20a:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001b20f:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001b214:	50                   	push   eax
c001b215:	6a 00                	push   0x0
c001b217:	6a 00                	push   0x0
c001b219:	6a 00                	push   0x0
c001b21b:	6a 00                	push   0x0
c001b21d:	6a 02                	push   0x2
c001b21f:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001b223:	50                   	push   eax
c001b224:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001b228:	e8 ef fc ff ff       	call   c001af1c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001b22d:	31 c0                	xor    eax,eax
c001b22f:	83 c4 38             	add    esp,0x38
c001b232:	5f                   	pop    edi
c001b233:	c3                   	ret    

c001b234 <SATAPI::read(unsigned long long, int, void*)>:
c001b234:	57                   	push   edi
c001b235:	56                   	push   esi
c001b236:	53                   	push   ebx
c001b237:	83 ec 3c             	sub    esp,0x3c
c001b23a:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001b23e:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c001b242:	8b 74 24 58          	mov    esi,DWORD PTR [esp+0x58]
c001b246:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c001b24a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001b24e:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001b252:	68 5d f4 01 c0       	push   0xc001f45d
c001b257:	e8 94 f9 fe ff       	call   c000abf0 <Dbg::kprintf(char const*, ...)>
c001b25c:	83 c4 10             	add    esp,0x10
c001b25f:	83 fe 04             	cmp    esi,0x4
c001b262:	7e 10                	jle    c001b274 <SATAPI::read(unsigned long long, int, void*)+0x40>
c001b264:	83 ec 0c             	sub    esp,0xc
c001b267:	68 6e f4 01 c0       	push   0xc001f46e
c001b26c:	e8 ce 54 ff ff       	call   c001073f <Krnl::panic(char const*)>
c001b271:	83 c4 10             	add    esp,0x10
c001b274:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001b27a:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001b280:	51                   	push   ecx
c001b281:	50                   	push   eax
c001b282:	83 c0 02             	add    eax,0x2
c001b285:	c1 e0 07             	shl    eax,0x7
c001b288:	03 82 60 01 00 00    	add    eax,DWORD PTR [edx+0x160]
c001b28e:	50                   	push   eax
c001b28f:	52                   	push   edx
c001b290:	e8 3b e9 ff ff       	call   c0019bd0 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001b295:	8d 7c 24 28          	lea    edi,[esp+0x28]
c001b299:	b9 03 00 00 00       	mov    ecx,0x3
c001b29e:	fc                   	cld    
c001b29f:	31 c0                	xor    eax,eax
c001b2a1:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001b2a3:	c6 44 24 28 1b       	mov    BYTE PTR [esp+0x28],0x1b
c001b2a8:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c001b2ad:	83 c4 0c             	add    esp,0xc
c001b2b0:	6a 00                	push   0x0
c001b2b2:	6a 00                	push   0x0
c001b2b4:	6a 00                	push   0x0
c001b2b6:	6a 00                	push   0x0
c001b2b8:	6a 02                	push   0x2
c001b2ba:	8d 44 24 30          	lea    eax,[esp+0x30]
c001b2be:	50                   	push   eax
c001b2bf:	53                   	push   ebx
c001b2c0:	e8 57 fc ff ff       	call   c001af1c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001b2c5:	83 c4 20             	add    esp,0x20
c001b2c8:	85 c0                	test   eax,eax
c001b2ca:	74 1f                	je     c001b2eb <SATAPI::read(unsigned long long, int, void*)+0xb7>
c001b2cc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001b2d0:	50                   	push   eax
c001b2d1:	50                   	push   eax
c001b2d2:	68 98 f4 01 c0       	push   0xc001f498
c001b2d7:	ff 35 90 08 02 c0    	push   DWORD PTR ds:0xc0020890
c001b2dd:	e8 ee db fe ff       	call   c0008ed0 <VgaText::puts(char const*)>
c001b2e2:	58                   	pop    eax
c001b2e3:	5a                   	pop    edx
c001b2e4:	68 a0 f4 01 c0       	push   0xc001f4a0
c001b2e9:	eb 61                	jmp    c001b34c <SATAPI::read(unsigned long long, int, void*)+0x118>
c001b2eb:	8d 7c 24 24          	lea    edi,[esp+0x24]
c001b2ef:	b9 03 00 00 00       	mov    ecx,0x3
c001b2f4:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001b2f6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b2fa:	c6 44 24 24 a8       	mov    BYTE PTR [esp+0x24],0xa8
c001b2ff:	0f c8                	bswap  eax
c001b301:	89 44 24 26          	mov    DWORD PTR [esp+0x26],eax
c001b305:	89 f0                	mov    eax,esi
c001b307:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c001b30b:	57                   	push   edi
c001b30c:	56                   	push   esi
c001b30d:	c1 e6 0b             	shl    esi,0xb
c001b310:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001b314:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b318:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b31c:	56                   	push   esi
c001b31d:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001b321:	50                   	push   eax
c001b322:	53                   	push   ebx
c001b323:	e8 f4 fb ff ff       	call   c001af1c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001b328:	83 c4 20             	add    esp,0x20
c001b32b:	85 c0                	test   eax,eax
c001b32d:	74 2f                	je     c001b35e <SATAPI::read(unsigned long long, int, void*)+0x12a>
c001b32f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001b333:	50                   	push   eax
c001b334:	50                   	push   eax
c001b335:	68 aa f4 01 c0       	push   0xc001f4aa
c001b33a:	ff 35 90 08 02 c0    	push   DWORD PTR ds:0xc0020890
c001b340:	e8 8b db fe ff       	call   c0008ed0 <VgaText::puts(char const*)>
c001b345:	5a                   	pop    edx
c001b346:	59                   	pop    ecx
c001b347:	68 b2 f4 01 c0       	push   0xc001f4b2
c001b34c:	ff 35 90 08 02 c0    	push   DWORD PTR ds:0xc0020890
c001b352:	e8 79 db fe ff       	call   c0008ed0 <VgaText::puts(char const*)>
c001b357:	83 c4 10             	add    esp,0x10
c001b35a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b35e:	83 c4 30             	add    esp,0x30
c001b361:	5b                   	pop    ebx
c001b362:	5e                   	pop    esi
c001b363:	5f                   	pop    edi
c001b364:	c3                   	ret    
c001b365:	90                   	nop

c001b366 <SATAPI::detectMedia()>:
c001b366:	c3                   	ret    
c001b367:	90                   	nop

c001b368 <IOAPIC::close(int, int, void*)>:
c001b368:	b8 00 00 00 00       	mov    eax,0x0
c001b36d:	c3                   	ret    

c001b36e <apicGetBase()>:
c001b36e:	55                   	push   ebp
c001b36f:	89 e5                	mov    ebp,esp
c001b371:	83 ec 18             	sub    esp,0x18
c001b374:	a1 44 08 02 c0       	mov    eax,ds:0xc0020844
c001b379:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c001b37f:	83 e0 08             	and    eax,0x8
c001b382:	84 c0                	test   al,al
c001b384:	75 07                	jne    c001b38d <apicGetBase()+0x1f>
c001b386:	b8 00 00 00 00       	mov    eax,0x0
c001b38b:	eb 21                	jmp    c001b3ae <apicGetBase()+0x40>
c001b38d:	a1 44 08 02 c0       	mov    eax,ds:0xc0020844
c001b392:	83 ec 08             	sub    esp,0x8
c001b395:	6a 1b                	push   0x1b
c001b397:	50                   	push   eax
c001b398:	e8 01 c1 fe ff       	call   c000749e <Computer::rdmsr(unsigned int)>
c001b39d:	83 c4 10             	add    esp,0x10
c001b3a0:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001b3a3:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c001b3a6:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001b3a9:	25 00 00 ff ff       	and    eax,0xffff0000
c001b3ae:	c9                   	leave  
c001b3af:	c3                   	ret    

c001b3b0 <IOAPIC::IOAPIC()>:
c001b3b0:	83 ec 0c             	sub    esp,0xc
c001b3b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b3b7:	83 ec 08             	sub    esp,0x8
c001b3ba:	68 f4 f4 01 c0       	push   0xc001f4f4
c001b3bf:	50                   	push   eax
c001b3c0:	e8 03 0e ff ff       	call   c000c1c8 <Device::Device(char const*)>
c001b3c5:	83 c4 10             	add    esp,0x10
c001b3c8:	ba 04 f5 01 c0       	mov    edx,0xc001f504
c001b3cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b3d1:	89 10                	mov    DWORD PTR [eax],edx
c001b3d3:	90                   	nop
c001b3d4:	83 c4 0c             	add    esp,0xc
c001b3d7:	c3                   	ret    

c001b3d8 <apicOpen()>:
c001b3d8:	55                   	push   ebp
c001b3d9:	89 e5                	mov    ebp,esp
c001b3db:	53                   	push   ebx
c001b3dc:	83 ec 34             	sub    esp,0x34
c001b3df:	a0 40 47 02 c0       	mov    al,ds:0xc0024740
c001b3e4:	83 f0 01             	xor    eax,0x1
c001b3e7:	84 c0                	test   al,al
c001b3e9:	0f 84 9d 00 00 00    	je     c001b48c <apicOpen()+0xb4>
c001b3ef:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c001b3f3:	a0 00 31 02 c0       	mov    al,ds:0xc0023100
c001b3f8:	38 45 f7             	cmp    BYTE PTR [ebp-0x9],al
c001b3fb:	0f 83 84 00 00 00    	jae    c001b485 <apicOpen()+0xad>
c001b401:	c7 45 d0 68 01 00 00 	mov    DWORD PTR [ebp-0x30],0x168
c001b408:	83 ec 0c             	sub    esp,0xc
c001b40b:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c001b40e:	e8 4e ca fe ff       	call   c0007e61 <malloc>
c001b413:	83 c4 10             	add    esp,0x10
c001b416:	89 c3                	mov    ebx,eax
c001b418:	83 ec 0c             	sub    esp,0xc
c001b41b:	53                   	push   ebx
c001b41c:	e8 8f ff ff ff       	call   c001b3b0 <IOAPIC::IOAPIC()>
c001b421:	83 c4 10             	add    esp,0x10
c001b424:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c001b427:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c001b42a:	25 ff 00 00 00       	and    eax,0xff
c001b42f:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001b432:	89 14 85 20 47 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb8e0],edx
c001b439:	a1 00 47 02 c0       	mov    eax,ds:0xc0024700
c001b43e:	40                   	inc    eax
c001b43f:	a3 00 47 02 c0       	mov    ds:0xc0024700,eax
c001b444:	a1 44 08 02 c0       	mov    eax,ds:0xc0020844
c001b449:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c001b44f:	83 ec 08             	sub    esp,0x8
c001b452:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001b455:	50                   	push   eax
c001b456:	e8 d5 0b ff ff       	call   c000c030 <Device::addChild(Device*)>
c001b45b:	83 c4 10             	add    esp,0x10
c001b45e:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001b461:	8b 00                	mov    eax,DWORD PTR [eax]
c001b463:	83 c0 08             	add    eax,0x8
c001b466:	8b 10                	mov    edx,DWORD PTR [eax]
c001b468:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c001b46b:	25 ff 00 00 00       	and    eax,0xff
c001b470:	6a 00                	push   0x0
c001b472:	6a 00                	push   0x0
c001b474:	50                   	push   eax
c001b475:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001b478:	ff d2                	call   edx
c001b47a:	83 c4 10             	add    esp,0x10
c001b47d:	fe 45 f7             	inc    BYTE PTR [ebp-0x9]
c001b480:	e9 6e ff ff ff       	jmp    c001b3f3 <apicOpen()+0x1b>
c001b485:	c6 05 40 47 02 c0 01 	mov    BYTE PTR ds:0xc0024740,0x1
c001b48c:	e8 dd fe ff ff       	call   c001b36e <apicGetBase()>
c001b491:	05 f0 00 00 00       	add    eax,0xf0
c001b496:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001b499:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001b49c:	8b 00                	mov    eax,DWORD PTR [eax]
c001b49e:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c001b4a1:	81 4d e4 00 01 00 00 	or     DWORD PTR [ebp-0x1c],0x100
c001b4a8:	81 4d e4 ff 00 00 00 	or     DWORD PTR [ebp-0x1c],0xff
c001b4af:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001b4b2:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c001b4b5:	89 10                	mov    DWORD PTR [eax],edx
c001b4b7:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
c001b4be:	a1 50 30 02 c0       	mov    eax,ds:0xc0023050
c001b4c3:	39 45 f0             	cmp    DWORD PTR [ebp-0x10],eax
c001b4c6:	7d 70                	jge    c001b538 <apicOpen()+0x160>
c001b4c8:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001b4cb:	8b 04 85 60 30 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdcfa0]
c001b4d2:	88 45 e3             	mov    BYTE PTR [ebp-0x1d],al
c001b4d5:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001b4d8:	8b 04 85 60 30 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdcfa0]
c001b4df:	c1 e8 08             	shr    eax,0x8
c001b4e2:	66 89 45 e0          	mov    WORD PTR [ebp-0x20],ax
c001b4e6:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001b4e9:	8b 04 85 60 30 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdcfa0]
c001b4f0:	c1 e8 18             	shr    eax,0x18
c001b4f3:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c001b4f6:	80 7d e3 ff          	cmp    BYTE PTR [ebp-0x1d],0xff
c001b4fa:	75 37                	jne    c001b533 <apicOpen()+0x15b>
c001b4fc:	e8 6d fe ff ff       	call   c001b36e <apicGetBase()>
c001b501:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c001b505:	75 07                	jne    c001b50e <apicOpen()+0x136>
c001b507:	ba 60 03 00 00       	mov    edx,0x360
c001b50c:	eb 05                	jmp    c001b513 <apicOpen()+0x13b>
c001b50e:	ba 50 03 00 00       	mov    edx,0x350
c001b513:	01 d0                	add    eax,edx
c001b515:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001b518:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001b51b:	8b 00                	mov    eax,DWORD PTR [eax]
c001b51d:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c001b520:	81 65 d4 00 ff ff ff 	and    DWORD PTR [ebp-0x2c],0xffffff00
c001b527:	83 4d d4 02          	or     DWORD PTR [ebp-0x2c],0x2
c001b52b:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001b52e:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c001b531:	89 10                	mov    DWORD PTR [eax],edx
c001b533:	ff 45 f0             	inc    DWORD PTR [ebp-0x10]
c001b536:	eb 86                	jmp    c001b4be <apicOpen()+0xe6>
c001b538:	90                   	nop
c001b539:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001b53c:	c9                   	leave  
c001b53d:	c3                   	ret    

c001b53e <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c001b53e:	55                   	push   ebp
c001b53f:	89 e5                	mov    ebp,esp
c001b541:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b544:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001b54a:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001b54d:	72 1d                	jb     c001b56c <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001b54f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b552:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c001b558:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b55b:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c001b561:	01 d0                	add    eax,edx
c001b563:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001b566:	73 04                	jae    c001b56c <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001b568:	b0 01                	mov    al,0x1
c001b56a:	eb 02                	jmp    c001b56e <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c001b56c:	b0 00                	mov    al,0x0
c001b56e:	5d                   	pop    ebp
c001b56f:	c3                   	ret    

c001b570 <IOAPIC::read(int)>:
c001b570:	55                   	push   ebp
c001b571:	89 e5                	mov    ebp,esp
c001b573:	83 ec 10             	sub    esp,0x10
c001b576:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b579:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001b57f:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001b582:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001b585:	31 d2                	xor    edx,edx
c001b587:	88 c2                	mov    dl,al
c001b589:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001b58c:	89 10                	mov    DWORD PTR [eax],edx
c001b58e:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001b591:	83 c0 10             	add    eax,0x10
c001b594:	8b 00                	mov    eax,DWORD PTR [eax]
c001b596:	c9                   	leave  
c001b597:	c3                   	ret    

c001b598 <IOAPIC::open(int, int, void*)>:
c001b598:	55                   	push   ebp
c001b599:	89 e5                	mov    ebp,esp
c001b59b:	57                   	push   edi
c001b59c:	56                   	push   esi
c001b59d:	53                   	push   ebx
c001b59e:	83 ec 04             	sub    esp,0x4
c001b5a1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b5a4:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001b5a7:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001b5ad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b5b0:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001b5b6:	8b 14 85 40 31 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdcec0]
c001b5bd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b5c0:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001b5c6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b5c9:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001b5cf:	8b 14 85 c0 31 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdce40]
c001b5d6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b5d9:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001b5df:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b5e2:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001b5e8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b5eb:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001b5f1:	89 c6                	mov    esi,eax
c001b5f3:	81 e6 ff 00 00 00    	and    esi,0xff
c001b5f9:	89 d0                	mov    eax,edx
c001b5fb:	ba 00 00 00 00       	mov    edx,0x0
c001b600:	89 c7                	mov    edi,eax
c001b602:	83 e7 ff             	and    edi,0xffffffff
c001b605:	89 f9                	mov    ecx,edi
c001b607:	89 d0                	mov    eax,edx
c001b609:	25 ff 00 00 00       	and    eax,0xff
c001b60e:	89 c3                	mov    ebx,eax
c001b610:	89 c8                	mov    eax,ecx
c001b612:	89 da                	mov    edx,ebx
c001b614:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001b617:	8d 5e 08             	lea    ebx,[esi+0x8]
c001b61a:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c001b61e:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c001b622:	83 e0 00             	and    eax,0x0
c001b625:	09 d0                	or     eax,edx
c001b627:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c001b62b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b62e:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001b634:	8d 50 01             	lea    edx,[eax+0x1]
c001b637:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001b63a:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c001b640:	31 d2                	xor    edx,edx
c001b642:	88 c2                	mov    dl,al
c001b644:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b647:	83 c2 08             	add    edx,0x8
c001b64a:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c001b64e:	81 e1 ff 00 00 00    	and    ecx,0xff
c001b654:	81 c9 00 ad de 00    	or     ecx,0xdead00
c001b65a:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c001b65e:	6a 01                	push   0x1
c001b660:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001b663:	e8 08 ff ff ff       	call   c001b570 <IOAPIC::read(int)>
c001b668:	83 c4 08             	add    esp,0x8
c001b66b:	c1 f8 10             	sar    eax,0x10
c001b66e:	25 ff 00 00 00       	and    eax,0xff
c001b673:	8d 50 01             	lea    edx,[eax+0x1]
c001b676:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b679:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c001b67f:	b8 00 00 00 00       	mov    eax,0x0
c001b684:	8d 65 f4             	lea    esp,[ebp-0xc]
c001b687:	5b                   	pop    ebx
c001b688:	5e                   	pop    esi
c001b689:	5f                   	pop    edi
c001b68a:	5d                   	pop    ebp
c001b68b:	c3                   	ret    

c001b68c <IOAPIC::write(int, int)>:
c001b68c:	55                   	push   ebp
c001b68d:	89 e5                	mov    ebp,esp
c001b68f:	83 ec 10             	sub    esp,0x10
c001b692:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b695:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001b69b:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001b69e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001b6a1:	31 d2                	xor    edx,edx
c001b6a3:	88 c2                	mov    dl,al
c001b6a5:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001b6a8:	89 10                	mov    DWORD PTR [eax],edx
c001b6aa:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001b6ad:	8d 50 10             	lea    edx,[eax+0x10]
c001b6b0:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001b6b3:	89 02                	mov    DWORD PTR [edx],eax
c001b6b5:	90                   	nop
c001b6b6:	c9                   	leave  
c001b6b7:	c3                   	ret    

c001b6b8 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c001b6b8:	55                   	push   ebp
c001b6b9:	89 e5                	mov    ebp,esp
c001b6bb:	53                   	push   ebx
c001b6bc:	83 ec 2c             	sub    esp,0x2c
c001b6bf:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001b6c2:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c001b6c5:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c001b6c8:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c001b6cb:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c001b6ce:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001b6d1:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001b6d4:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c001b6d7:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c001b6da:	88 d8                	mov    al,bl
c001b6dc:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c001b6df:	88 c8                	mov    al,cl
c001b6e1:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c001b6e4:	88 d0                	mov    al,dl
c001b6e6:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c001b6e9:	8a 45 e4             	mov    al,BYTE PTR [ebp-0x1c]
c001b6ec:	25 ff 00 00 00       	and    eax,0xff
c001b6f1:	83 c0 08             	add    eax,0x8
c001b6f4:	01 c0                	add    eax,eax
c001b6f6:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001b6f9:	8a 45 e4             	mov    al,BYTE PTR [ebp-0x1c]
c001b6fc:	25 ff 00 00 00       	and    eax,0xff
c001b701:	83 c0 08             	add    eax,0x8
c001b704:	01 c0                	add    eax,eax
c001b706:	40                   	inc    eax
c001b707:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001b70a:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001b70d:	50                   	push   eax
c001b70e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001b711:	e8 5a fe ff ff       	call   c001b570 <IOAPIC::read(int)>
c001b716:	83 c4 08             	add    esp,0x8
c001b719:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001b71c:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c001b723:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001b726:	c1 e0 18             	shl    eax,0x18
c001b729:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c001b72c:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c001b72f:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001b732:	52                   	push   edx
c001b733:	50                   	push   eax
c001b734:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001b737:	e8 50 ff ff ff       	call   c001b68c <IOAPIC::write(int, int)>
c001b73c:	83 c4 0c             	add    esp,0xc
c001b73f:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001b742:	50                   	push   eax
c001b743:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001b746:	e8 25 fe ff ff       	call   c001b570 <IOAPIC::read(int)>
c001b74b:	83 c4 08             	add    esp,0x8
c001b74e:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001b751:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c001b758:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c001b75f:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c001b766:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c001b76a:	74 09                	je     c001b775 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xbd>
c001b76c:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c001b773:	eb 07                	jmp    c001b77c <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xc4>
c001b775:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c001b77c:	80 7d d0 00          	cmp    BYTE PTR [ebp-0x30],0x0
c001b780:	74 09                	je     c001b78b <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd3>
c001b782:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c001b789:	eb 07                	jmp    c001b792 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xda>
c001b78b:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c001b792:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c001b799:	8a 45 e0             	mov    al,BYTE PTR [ebp-0x20]
c001b79c:	25 ff 00 00 00       	and    eax,0xff
c001b7a1:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c001b7a4:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c001b7a7:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001b7aa:	52                   	push   edx
c001b7ab:	50                   	push   eax
c001b7ac:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001b7af:	e8 d8 fe ff ff       	call   c001b68c <IOAPIC::write(int, int)>
c001b7b4:	83 c4 0c             	add    esp,0xc
c001b7b7:	90                   	nop
c001b7b8:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001b7bb:	c9                   	leave  
c001b7bc:	c3                   	ret    
c001b7bd:	66 90                	xchg   ax,ax
c001b7bf:	90                   	nop

c001b7c0 <APICTimer::close(int, int, void*)>:
c001b7c0:	b8 00 00 00 00       	mov    eax,0x0
c001b7c5:	c3                   	ret    
c001b7c6:	66 90                	xchg   ax,ax

c001b7c8 <apicTimerHandler(regs*, void*)>:
c001b7c8:	83 ec 0c             	sub    esp,0xc
c001b7cb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b7cf:	8b 08                	mov    ecx,DWORD PTR [eax]
c001b7d1:	b8 10 27 00 00       	mov    eax,0x2710
c001b7d6:	ba 00 00 00 00       	mov    edx,0x0
c001b7db:	f7 f1                	div    ecx
c001b7dd:	83 ec 0c             	sub    esp,0xc
c001b7e0:	50                   	push   eax
c001b7e1:	e8 de 20 ff ff       	call   c000d8c4 <timerHandler(unsigned int)>
c001b7e6:	83 c4 10             	add    esp,0x10
c001b7e9:	90                   	nop
c001b7ea:	83 c4 0c             	add    esp,0xc
c001b7ed:	c3                   	ret    
c001b7ee:	66 90                	xchg   ax,ax

c001b7f0 <APICTimer::open(int, int, void*)>:
c001b7f0:	83 ec 0c             	sub    esp,0xc
c001b7f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b7f7:	8b 00                	mov    eax,DWORD PTR [eax]
c001b7f9:	83 c0 24             	add    eax,0x24
c001b7fc:	8b 00                	mov    eax,DWORD PTR [eax]
c001b7fe:	83 ec 08             	sub    esp,0x8
c001b801:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b805:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b809:	ff d0                	call   eax
c001b80b:	83 c4 10             	add    esp,0x10
c001b80e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b812:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001b816:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001b81c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b820:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b824:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c001b82a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b82e:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001b834:	83 ec 0c             	sub    esp,0xc
c001b837:	51                   	push   ecx
c001b838:	6a 01                	push   0x1
c001b83a:	68 c8 b7 01 c0       	push   0xc001b7c8
c001b83f:	52                   	push   edx
c001b840:	50                   	push   eax
c001b841:	e8 96 07 ff ff       	call   c000bfdc <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001b846:	83 c4 20             	add    esp,0x20
c001b849:	89 c2                	mov    edx,eax
c001b84b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b84f:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001b855:	b8 00 00 00 00       	mov    eax,0x0
c001b85a:	83 c4 0c             	add    esp,0xc
c001b85d:	c3                   	ret    
c001b85e:	66 90                	xchg   ax,ax

c001b860 <APICTimer::write(int)>:
c001b860:	83 ec 0c             	sub    esp,0xc
c001b863:	83 ec 0c             	sub    esp,0xc
c001b866:	68 28 f5 01 c0       	push   0xc001f528
c001b86b:	e8 cf 4e ff ff       	call   c001073f <Krnl::panic(char const*)>
c001b870:	83 c4 10             	add    esp,0x10
c001b873:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b877:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001b87b:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001b881:	90                   	nop
c001b882:	83 c4 0c             	add    esp,0xc
c001b885:	c3                   	ret    
c001b886:	66 90                	xchg   ax,ax

c001b888 <APICTimer::APICTimer()>:
c001b888:	83 ec 0c             	sub    esp,0xc
c001b88b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b88f:	83 ec 08             	sub    esp,0x8
c001b892:	68 38 f5 01 c0       	push   0xc001f538
c001b897:	50                   	push   eax
c001b898:	e8 5b 1f ff ff       	call   c000d7f8 <Timer::Timer(char const*)>
c001b89d:	83 c4 10             	add    esp,0x10
c001b8a0:	ba 4c f5 01 c0       	mov    edx,0xc001f54c
c001b8a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b8a9:	89 10                	mov    DWORD PTR [eax],edx
c001b8ab:	90                   	nop
c001b8ac:	83 c4 0c             	add    esp,0xc
c001b8af:	c3                   	ret    

c001b8b0 <PIT::write(int)>:
c001b8b0:	83 ec 10             	sub    esp,0x10
c001b8b3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b8b7:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001b8bb:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001b8c1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b8c5:	a3 44 47 02 c0       	mov    ds:0xc0024744,eax
c001b8ca:	b8 dc 34 12 00       	mov    eax,0x1234dc
c001b8cf:	99                   	cdq    
c001b8d0:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c001b8d4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b8d8:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c001b8df:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c001b8e4:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c001b8e8:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c001b8ed:	ee                   	out    dx,al
c001b8ee:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b8f2:	25 ff 00 00 00       	and    eax,0xff
c001b8f7:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c001b8fe:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c001b902:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001b906:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c001b90b:	ee                   	out    dx,al
c001b90c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b910:	c1 f8 08             	sar    eax,0x8
c001b913:	25 ff 00 00 00       	and    eax,0xff
c001b918:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c001b91f:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001b923:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001b927:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c001b92c:	ee                   	out    dx,al
c001b92d:	90                   	nop
c001b92e:	83 c4 10             	add    esp,0x10
c001b931:	c3                   	ret    
c001b932:	66 90                	xchg   ax,ax

c001b934 <pitHandler(regs*, void*)>:
c001b934:	83 ec 0c             	sub    esp,0xc
c001b937:	8b 0d 44 47 02 c0    	mov    ecx,DWORD PTR ds:0xc0024744
c001b93d:	b8 10 27 00 00       	mov    eax,0x2710
c001b942:	99                   	cdq    
c001b943:	f7 f9                	idiv   ecx
c001b945:	83 ec 0c             	sub    esp,0xc
c001b948:	50                   	push   eax
c001b949:	e8 76 1f ff ff       	call   c000d8c4 <timerHandler(unsigned int)>
c001b94e:	83 c4 10             	add    esp,0x10
c001b951:	90                   	nop
c001b952:	83 c4 0c             	add    esp,0xc
c001b955:	c3                   	ret    
c001b956:	66 90                	xchg   ax,ax

c001b958 <PIT::open(int, int, void*)>:
c001b958:	83 ec 0c             	sub    esp,0xc
c001b95b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b95f:	8b 00                	mov    eax,DWORD PTR [eax]
c001b961:	83 c0 24             	add    eax,0x24
c001b964:	8b 00                	mov    eax,DWORD PTR [eax]
c001b966:	83 ec 08             	sub    esp,0x8
c001b969:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b96d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b971:	ff d0                	call   eax
c001b973:	83 c4 10             	add    esp,0x10
c001b976:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b97a:	83 ec 0c             	sub    esp,0xc
c001b97d:	6a 00                	push   0x0
c001b97f:	6a 01                	push   0x1
c001b981:	68 34 b9 01 c0       	push   0xc001b934
c001b986:	6a 00                	push   0x0
c001b988:	50                   	push   eax
c001b989:	e8 4e 06 ff ff       	call   c000bfdc <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001b98e:	83 c4 20             	add    esp,0x20
c001b991:	89 c2                	mov    edx,eax
c001b993:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b997:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001b99d:	b8 00 00 00 00       	mov    eax,0x0
c001b9a2:	83 c4 0c             	add    esp,0xc
c001b9a5:	c3                   	ret    
c001b9a6:	66 90                	xchg   ax,ax

c001b9a8 <PIT::close(int, int, void*)>:
c001b9a8:	83 ec 0c             	sub    esp,0xc
c001b9ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b9af:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c001b9b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b9bd:	6a 01                	push   0x1
c001b9bf:	68 34 b9 01 c0       	push   0xc001b934
c001b9c4:	6a 00                	push   0x0
c001b9c6:	50                   	push   eax
c001b9c7:	e8 46 06 ff ff       	call   c000c012 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c001b9cc:	83 c4 10             	add    esp,0x10
c001b9cf:	b8 00 00 00 00       	mov    eax,0x0
c001b9d4:	83 c4 0c             	add    esp,0xc
c001b9d7:	c3                   	ret    

c001b9d8 <PIT::PIT()>:
c001b9d8:	83 ec 0c             	sub    esp,0xc
c001b9db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b9df:	83 ec 08             	sub    esp,0x8
c001b9e2:	68 74 f5 01 c0       	push   0xc001f574
c001b9e7:	50                   	push   eax
c001b9e8:	e8 0b 1e ff ff       	call   c000d7f8 <Timer::Timer(char const*)>
c001b9ed:	83 c4 10             	add    esp,0x10
c001b9f0:	ba 9c f5 01 c0       	mov    edx,0xc001f59c
c001b9f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b9f9:	89 10                	mov    DWORD PTR [eax],edx
c001b9fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b9ff:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001ba05:	31 d2                	xor    edx,edx
c001ba07:	88 c2                	mov    dl,al
c001ba09:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba0d:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c001ba14:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba18:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001ba1e:	31 d2                	xor    edx,edx
c001ba20:	88 c2                	mov    dl,al
c001ba22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba26:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c001ba2b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba2f:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001ba35:	8d 50 01             	lea    edx,[eax+0x1]
c001ba38:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001ba3c:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c001ba42:	31 d2                	xor    edx,edx
c001ba44:	88 c2                	mov    dl,al
c001ba46:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba4a:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001ba4e:	83 e1 3f             	and    ecx,0x3f
c001ba51:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001ba55:	90                   	nop
c001ba56:	83 c4 0c             	add    esp,0xc
c001ba59:	c3                   	ret    
c001ba5a:	66 90                	xchg   ax,ax
c001ba5c:	66 90                	xchg   ax,ax
c001ba5e:	66 90                	xchg   ax,ax

c001ba60 <avxDetect>:
c001ba60:	b8 01 00 00 00       	mov    eax,0x1
c001ba65:	0f a2                	cpuid  
c001ba67:	f7 c1 00 00 00 10    	test   ecx,0x10000000
c001ba6d:	74 15                	je     c001ba84 <avxDetect.noAVX>
c001ba6f:	b8 01 00 00 00       	mov    eax,0x1
c001ba74:	0f a2                	cpuid  
c001ba76:	f7 c1 00 00 00 04    	test   ecx,0x4000000
c001ba7c:	74 06                	je     c001ba84 <avxDetect.noAVX>
c001ba7e:	b8 01 00 00 00       	mov    eax,0x1
c001ba83:	c3                   	ret    

c001ba84 <avxDetect.noAVX>:
c001ba84:	b8 00 00 00 00       	mov    eax,0x0
c001ba89:	c3                   	ret    

c001ba8a <avxSave>:
c001ba8a:	53                   	push   ebx
c001ba8b:	52                   	push   edx
c001ba8c:	31 c0                	xor    eax,eax
c001ba8e:	48                   	dec    eax
c001ba8f:	89 c2                	mov    edx,eax
c001ba91:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001ba95:	0f ae 23             	xsave  [ebx]
c001ba98:	5a                   	pop    edx
c001ba99:	5b                   	pop    ebx
c001ba9a:	c3                   	ret    

c001ba9b <avxLoad>:
c001ba9b:	53                   	push   ebx
c001ba9c:	52                   	push   edx
c001ba9d:	31 c0                	xor    eax,eax
c001ba9f:	48                   	dec    eax
c001baa0:	89 c2                	mov    edx,eax
c001baa2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001baa6:	0f ae 2b             	xrstor [ebx]
c001baa9:	5a                   	pop    edx
c001baaa:	5b                   	pop    ebx
c001baab:	c3                   	ret    

c001baac <avxInit>:
c001baac:	e8 57 02 00 00       	call   c001bd08 <sseInit>
c001bab1:	50                   	push   eax
c001bab2:	51                   	push   ecx
c001bab3:	0f 20 e0             	mov    eax,cr4
c001bab6:	0d 00 00 04 00       	or     eax,0x40000
c001babb:	0f 22 e0             	mov    cr4,eax
c001babe:	31 c9                	xor    ecx,ecx
c001bac0:	0f 01 d0             	xgetbv 
c001bac3:	0d 07 00 00 00       	or     eax,0x7
c001bac8:	0f 01 d1             	xsetbv 
c001bacb:	59                   	pop    ecx
c001bacc:	58                   	pop    eax
c001bacd:	c3                   	ret    

c001bace <avxClose>:
c001bace:	c3                   	ret    

c001bacf <wouldSheSayYes>:
c001bacf:	c3                   	ret    
c001bad0:	49                   	dec    ecx
c001bad1:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c001bad5:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c001bad9:	75 20                	jne    c001bafb <isr0+0xb>
c001badb:	4e                   	dec    esi
c001badc:	79 61                	jns    c001bb3f <isr7+0x3>
c001bade:	68 2e 2e 2e 00       	push   0x2e2e2e
c001bae3:	66 90                	xchg   ax,ax
c001bae5:	66 90                	xchg   ax,ax
c001bae7:	66 90                	xchg   ax,ax
c001bae9:	66 90                	xchg   ax,ax
c001baeb:	66 90                	xchg   ax,ax
c001baed:	66 90                	xchg   ax,ax
c001baef:	90                   	nop

c001baf0 <isr0>:
c001baf0:	fa                   	cli    
c001baf1:	68 00 00 00 00       	push   0x0
c001baf6:	68 00 00 00 00       	push   0x0
c001bafb:	e9 44 01 00 00       	jmp    c001bc44 <int_common_stub>

c001bb00 <isr1>:
c001bb00:	fa                   	cli    
c001bb01:	6a 00                	push   0x0
c001bb03:	6a 01                	push   0x1
c001bb05:	e9 3a 01 00 00       	jmp    c001bc44 <int_common_stub>

c001bb0a <isr2>:
c001bb0a:	fa                   	cli    
c001bb0b:	6a 00                	push   0x0
c001bb0d:	6a 02                	push   0x2
c001bb0f:	e9 30 01 00 00       	jmp    c001bc44 <int_common_stub>

c001bb14 <isr3>:
c001bb14:	fa                   	cli    
c001bb15:	6a 00                	push   0x0
c001bb17:	6a 03                	push   0x3
c001bb19:	e9 26 01 00 00       	jmp    c001bc44 <int_common_stub>

c001bb1e <isr4>:
c001bb1e:	fa                   	cli    
c001bb1f:	6a 00                	push   0x0
c001bb21:	6a 04                	push   0x4
c001bb23:	e9 1c 01 00 00       	jmp    c001bc44 <int_common_stub>

c001bb28 <isr5>:
c001bb28:	fa                   	cli    
c001bb29:	6a 00                	push   0x0
c001bb2b:	6a 05                	push   0x5
c001bb2d:	e9 12 01 00 00       	jmp    c001bc44 <int_common_stub>

c001bb32 <isr6>:
c001bb32:	fa                   	cli    
c001bb33:	6a 00                	push   0x0
c001bb35:	6a 06                	push   0x6
c001bb37:	e9 08 01 00 00       	jmp    c001bc44 <int_common_stub>

c001bb3c <isr7>:
c001bb3c:	fa                   	cli    
c001bb3d:	6a 00                	push   0x0
c001bb3f:	6a 07                	push   0x7
c001bb41:	e9 fe 00 00 00       	jmp    c001bc44 <int_common_stub>

c001bb46 <isr8>:
c001bb46:	fa                   	cli    
c001bb47:	6a 08                	push   0x8
c001bb49:	e9 f6 00 00 00       	jmp    c001bc44 <int_common_stub>

c001bb4e <isr9>:
c001bb4e:	fa                   	cli    
c001bb4f:	6a 00                	push   0x0
c001bb51:	6a 09                	push   0x9
c001bb53:	e9 ec 00 00 00       	jmp    c001bc44 <int_common_stub>

c001bb58 <isr10>:
c001bb58:	fa                   	cli    
c001bb59:	6a 0a                	push   0xa
c001bb5b:	e9 e4 00 00 00       	jmp    c001bc44 <int_common_stub>

c001bb60 <isr11>:
c001bb60:	fa                   	cli    
c001bb61:	6a 0b                	push   0xb
c001bb63:	e9 dc 00 00 00       	jmp    c001bc44 <int_common_stub>

c001bb68 <isr12>:
c001bb68:	fa                   	cli    
c001bb69:	6a 0c                	push   0xc
c001bb6b:	e9 d4 00 00 00       	jmp    c001bc44 <int_common_stub>

c001bb70 <isr13>:
c001bb70:	fa                   	cli    
c001bb71:	6a 0d                	push   0xd
c001bb73:	e9 cc 00 00 00       	jmp    c001bc44 <int_common_stub>

c001bb78 <isr14>:
c001bb78:	fa                   	cli    
c001bb79:	6a 0e                	push   0xe
c001bb7b:	e9 c4 00 00 00       	jmp    c001bc44 <int_common_stub>

c001bb80 <isr15>:
c001bb80:	fa                   	cli    
c001bb81:	6a 00                	push   0x0
c001bb83:	6a 0f                	push   0xf
c001bb85:	e9 ba 00 00 00       	jmp    c001bc44 <int_common_stub>

c001bb8a <isr16>:
c001bb8a:	fa                   	cli    
c001bb8b:	6a 00                	push   0x0
c001bb8d:	6a 10                	push   0x10
c001bb8f:	e9 b0 00 00 00       	jmp    c001bc44 <int_common_stub>

c001bb94 <isr17>:
c001bb94:	fa                   	cli    
c001bb95:	6a 00                	push   0x0
c001bb97:	6a 11                	push   0x11
c001bb99:	e9 a6 00 00 00       	jmp    c001bc44 <int_common_stub>

c001bb9e <isr18>:
c001bb9e:	fa                   	cli    
c001bb9f:	6a 00                	push   0x0
c001bba1:	6a 12                	push   0x12
c001bba3:	e9 9c 00 00 00       	jmp    c001bc44 <int_common_stub>

c001bba8 <irq3>:
c001bba8:	fa                   	cli    
c001bba9:	6a 00                	push   0x0
c001bbab:	6a 23                	push   0x23
c001bbad:	e9 92 00 00 00       	jmp    c001bc44 <int_common_stub>

c001bbb2 <irq4>:
c001bbb2:	fa                   	cli    
c001bbb3:	6a 00                	push   0x0
c001bbb5:	6a 24                	push   0x24
c001bbb7:	e9 88 00 00 00       	jmp    c001bc44 <int_common_stub>

c001bbbc <irq5>:
c001bbbc:	fa                   	cli    
c001bbbd:	6a 00                	push   0x0
c001bbbf:	6a 25                	push   0x25
c001bbc1:	e9 7e 00 00 00       	jmp    c001bc44 <int_common_stub>

c001bbc6 <irq6>:
c001bbc6:	fa                   	cli    
c001bbc7:	6a 00                	push   0x0
c001bbc9:	6a 26                	push   0x26
c001bbcb:	e9 74 00 00 00       	jmp    c001bc44 <int_common_stub>

c001bbd0 <irq7>:
c001bbd0:	fa                   	cli    
c001bbd1:	6a 00                	push   0x0
c001bbd3:	6a 27                	push   0x27
c001bbd5:	e9 6a 00 00 00       	jmp    c001bc44 <int_common_stub>

c001bbda <irq8>:
c001bbda:	fa                   	cli    
c001bbdb:	6a 00                	push   0x0
c001bbdd:	6a 28                	push   0x28
c001bbdf:	e9 60 00 00 00       	jmp    c001bc44 <int_common_stub>

c001bbe4 <irq9>:
c001bbe4:	fa                   	cli    
c001bbe5:	6a 00                	push   0x0
c001bbe7:	6a 29                	push   0x29
c001bbe9:	e9 56 00 00 00       	jmp    c001bc44 <int_common_stub>

c001bbee <irq10>:
c001bbee:	fa                   	cli    
c001bbef:	6a 00                	push   0x0
c001bbf1:	6a 2a                	push   0x2a
c001bbf3:	e9 4c 00 00 00       	jmp    c001bc44 <int_common_stub>

c001bbf8 <irq11>:
c001bbf8:	fa                   	cli    
c001bbf9:	6a 00                	push   0x0
c001bbfb:	6a 2b                	push   0x2b
c001bbfd:	e9 42 00 00 00       	jmp    c001bc44 <int_common_stub>

c001bc02 <irq12>:
c001bc02:	fa                   	cli    
c001bc03:	6a 00                	push   0x0
c001bc05:	6a 2c                	push   0x2c
c001bc07:	e9 38 00 00 00       	jmp    c001bc44 <int_common_stub>

c001bc0c <irq13>:
c001bc0c:	fa                   	cli    
c001bc0d:	6a 00                	push   0x0
c001bc0f:	6a 2d                	push   0x2d
c001bc11:	e9 2e 00 00 00       	jmp    c001bc44 <int_common_stub>

c001bc16 <irq14>:
c001bc16:	fa                   	cli    
c001bc17:	6a 00                	push   0x0
c001bc19:	6a 2e                	push   0x2e
c001bc1b:	e9 24 00 00 00       	jmp    c001bc44 <int_common_stub>

c001bc20 <irq15>:
c001bc20:	fa                   	cli    
c001bc21:	6a 00                	push   0x0
c001bc23:	6a 2f                	push   0x2f
c001bc25:	e9 1a 00 00 00       	jmp    c001bc44 <int_common_stub>

c001bc2a <irq1>:
c001bc2a:	fa                   	cli    
c001bc2b:	6a 00                	push   0x0
c001bc2d:	6a 21                	push   0x21
c001bc2f:	eb 13                	jmp    c001bc44 <int_common_stub>

c001bc31 <irq2>:
c001bc31:	fa                   	cli    
c001bc32:	6a 00                	push   0x0
c001bc34:	6a 22                	push   0x22
c001bc36:	eb 0c                	jmp    c001bc44 <int_common_stub>

c001bc38 <isr96>:
c001bc38:	6a 00                	push   0x0
c001bc3a:	6a 60                	push   0x60
c001bc3c:	fb                   	sti    
c001bc3d:	eb 05                	jmp    c001bc44 <int_common_stub>

c001bc3f <irq0>:
c001bc3f:	fa                   	cli    
c001bc40:	6a 00                	push   0x0
c001bc42:	6a 20                	push   0x20

c001bc44 <int_common_stub>:
c001bc44:	60                   	pusha  
c001bc45:	1e                   	push   ds
c001bc46:	06                   	push   es
c001bc47:	0f a0                	push   fs
c001bc49:	0f a8                	push   gs
c001bc4b:	66 b8 10 00          	mov    ax,0x10
c001bc4f:	66 8e d8             	mov    ds,ax
c001bc52:	66 8e c0             	mov    es,ax
c001bc55:	66 8e e0             	mov    fs,ax
c001bc58:	66 8e e8             	mov    gs,ax
c001bc5b:	54                   	push   esp
c001bc5c:	fc                   	cld    
c001bc5d:	e8 7a 08 ff ff       	call   c000c4dc <int_handler>
c001bc62:	81 c4 04 00 00 00    	add    esp,0x4
c001bc68:	0f a9                	pop    gs
c001bc6a:	0f a1                	pop    fs
c001bc6c:	07                   	pop    es
c001bc6d:	1f                   	pop    ds
c001bc6e:	61                   	popa   
c001bc6f:	81 c4 08 00 00 00    	add    esp,0x8
c001bc75:	cf                   	iret   

c001bc76 <irq16>:
c001bc76:	fa                   	cli    
c001bc77:	6a 00                	push   0x0
c001bc79:	6a 30                	push   0x30
c001bc7b:	e9 c4 ff ff ff       	jmp    c001bc44 <int_common_stub>

c001bc80 <irq17>:
c001bc80:	fa                   	cli    
c001bc81:	6a 00                	push   0x0
c001bc83:	6a 31                	push   0x31
c001bc85:	e9 ba ff ff ff       	jmp    c001bc44 <int_common_stub>

c001bc8a <irq18>:
c001bc8a:	fa                   	cli    
c001bc8b:	6a 00                	push   0x0
c001bc8d:	6a 32                	push   0x32
c001bc8f:	e9 b0 ff ff ff       	jmp    c001bc44 <int_common_stub>

c001bc94 <irq19>:
c001bc94:	fa                   	cli    
c001bc95:	6a 00                	push   0x0
c001bc97:	6a 33                	push   0x33
c001bc99:	e9 a6 ff ff ff       	jmp    c001bc44 <int_common_stub>

c001bc9e <irq20>:
c001bc9e:	fa                   	cli    
c001bc9f:	6a 00                	push   0x0
c001bca1:	6a 34                	push   0x34
c001bca3:	e9 9c ff ff ff       	jmp    c001bc44 <int_common_stub>

c001bca8 <irq21>:
c001bca8:	fa                   	cli    
c001bca9:	6a 00                	push   0x0
c001bcab:	6a 35                	push   0x35
c001bcad:	e9 92 ff ff ff       	jmp    c001bc44 <int_common_stub>

c001bcb2 <irq22>:
c001bcb2:	fa                   	cli    
c001bcb3:	6a 00                	push   0x0
c001bcb5:	6a 36                	push   0x36
c001bcb7:	e9 88 ff ff ff       	jmp    c001bc44 <int_common_stub>

c001bcbc <irq23>:
c001bcbc:	fa                   	cli    
c001bcbd:	6a 00                	push   0x0
c001bcbf:	6a 37                	push   0x37
c001bcc1:	e9 7e ff ff ff       	jmp    c001bc44 <int_common_stub>
c001bcc6:	66 90                	xchg   ax,ax
c001bcc8:	66 90                	xchg   ax,ax
c001bcca:	66 90                	xchg   ax,ax
c001bccc:	66 90                	xchg   ax,ax
c001bcce:	66 90                	xchg   ax,ax

c001bcd0 <i386GetRDRAND>:
c001bcd0:	b9 64 00 00 00       	mov    ecx,0x64

c001bcd5 <retry>:
c001bcd5:	0f c7 f0             	rdrand eax
c001bcd8:	72 05                	jb     c001bcdf <retry.done>
c001bcda:	e2 f9                	loop   c001bcd5 <retry>

c001bcdc <retry.fail>:
c001bcdc:	31 c0                	xor    eax,eax
c001bcde:	c3                   	ret    

c001bcdf <retry.done>:
c001bcdf:	c3                   	ret    

c001bce0 <absolutelyNoChanceInHell>:
c001bce0:	b8 01 00 00 00       	mov    eax,0x1
c001bce5:	0f a2                	cpuid  
c001bce7:	f7 c2 00 00 00 02    	test   edx,0x2000000
c001bced:	74 06                	je     c001bcf5 <sseDetect.noSSE>
c001bcef:	b8 01 00 00 00       	mov    eax,0x1
c001bcf4:	c3                   	ret    

c001bcf5 <sseDetect.noSSE>:
c001bcf5:	31 c0                	xor    eax,eax
c001bcf7:	c3                   	ret    

c001bcf8 <sseSave>:
c001bcf8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bcfc:	0f ae 00             	fxsave [eax]
c001bcff:	c3                   	ret    

c001bd00 <sseLoad>:
c001bd00:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bd04:	0f ae 08             	fxrstor [eax]
c001bd07:	c3                   	ret    

c001bd08 <sseInit>:
c001bd08:	e8 42 00 00 00       	call   c001bd4f <x87Init>
c001bd0d:	0f 20 e0             	mov    eax,cr4
c001bd10:	66 0d 00 06          	or     ax,0x600
c001bd14:	0f 22 e0             	mov    cr4,eax
c001bd17:	c3                   	ret    

c001bd18 <sseClose>:
c001bd18:	c3                   	ret    
c001bd19:	66 90                	xchg   ax,ax
c001bd1b:	66 90                	xchg   ax,ax
c001bd1d:	66 90                	xchg   ax,ax
c001bd1f:	90                   	nop

c001bd20 <value_37F>:
c001bd20:	7f 03                	jg     c001bd25 <value_37A+0x1>

c001bd22 <value_37E>:
c001bd22:	7e 03                	jle    c001bd27 <x87Detect+0x1>

c001bd24 <value_37A>:
c001bd24:	7a 03                	jp     c001bd29 <x87Detect+0x3>

c001bd26 <x87Detect>:
c001bd26:	b8 01 00 00 00       	mov    eax,0x1
c001bd2b:	0f a2                	cpuid  
c001bd2d:	f7 c2 01 00 00 00    	test   edx,0x1
c001bd33:	74 06                	je     c001bd3b <x87Detect.nox87>
c001bd35:	b8 01 00 00 00       	mov    eax,0x1
c001bd3a:	c3                   	ret    

c001bd3b <x87Detect.nox87>:
c001bd3b:	b8 00 00 00 00       	mov    eax,0x0
c001bd40:	c3                   	ret    

c001bd41 <x87Save>:
c001bd41:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bd45:	dd 30                	fnsave [eax]
c001bd47:	c3                   	ret    

c001bd48 <x87Load>:
c001bd48:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bd4c:	dd 20                	frstor [eax]
c001bd4e:	c3                   	ret    

c001bd4f <x87Init>:
c001bd4f:	0f 20 c0             	mov    eax,cr0
c001bd52:	66 25 fb ff          	and    ax,0xfffb
c001bd56:	66 0d 22 00          	or     ax,0x22
c001bd5a:	0f 22 c0             	mov    cr0,eax
c001bd5d:	db e3                	fninit 
c001bd5f:	0f 06                	clts   
c001bd61:	d9 2d 24 bd 01 c0    	fldcw  WORD PTR ds:0xc001bd24
c001bd67:	c3                   	ret    

c001bd68 <x87Close>:
c001bd68:	c3                   	ret    
c001bd69:	66 90                	xchg   ax,ax
c001bd6b:	90                   	nop

c001bd6c <__do_global_ctors_aux>:
c001bd6c:	a1 1c cd 01 c0       	mov    eax,ds:0xc001cd1c
c001bd71:	83 f8 ff             	cmp    eax,0xffffffff
c001bd74:	74 1a                	je     c001bd90 <__do_global_ctors_aux+0x24>
c001bd76:	55                   	push   ebp
c001bd77:	89 e5                	mov    ebp,esp
c001bd79:	53                   	push   ebx
c001bd7a:	52                   	push   edx
c001bd7b:	bb 1c cd 01 c0       	mov    ebx,0xc001cd1c
c001bd80:	ff d0                	call   eax
c001bd82:	83 eb 04             	sub    ebx,0x4
c001bd85:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bd87:	83 f8 ff             	cmp    eax,0xffffffff
c001bd8a:	75 f4                	jne    c001bd80 <__do_global_ctors_aux+0x14>
c001bd8c:	58                   	pop    eax
c001bd8d:	5b                   	pop    ebx
c001bd8e:	5d                   	pop    ebp
c001bd8f:	c3                   	ret    
c001bd90:	c3                   	ret    
c001bd91:	66 90                	xchg   ax,ax
c001bd93:	90                   	nop

c001bd94 <__divdi3>:
c001bd94:	55                   	push   ebp
c001bd95:	57                   	push   edi
c001bd96:	56                   	push   esi
c001bd97:	53                   	push   ebx
c001bd98:	83 ec 1c             	sub    esp,0x1c
c001bd9b:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001bd9f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001bda3:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001bda6:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001bdaa:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001bdae:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001bdb2:	85 db                	test   ebx,ebx
c001bdb4:	0f 88 8e 00 00 00    	js     c001be48 <__divdi3+0xb4>
c001bdba:	89 dd                	mov    ebp,ebx
c001bdbc:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001bdc4:	89 d3                	mov    ebx,edx
c001bdc6:	85 d2                	test   edx,edx
c001bdc8:	79 0d                	jns    c001bdd7 <__divdi3+0x43>
c001bdca:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c001bdce:	f7 d8                	neg    eax
c001bdd0:	83 d2 00             	adc    edx,0x0
c001bdd3:	f7 da                	neg    edx
c001bdd5:	89 d3                	mov    ebx,edx
c001bdd7:	89 c7                	mov    edi,eax
c001bdd9:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001bddc:	85 db                	test   ebx,ebx
c001bdde:	75 48                	jne    c001be28 <__divdi3+0x94>
c001bde0:	39 ef                	cmp    edi,ebp
c001bde2:	76 24                	jbe    c001be08 <__divdi3+0x74>
c001bde4:	89 ea                	mov    edx,ebp
c001bde6:	f7 f7                	div    edi
c001bde8:	89 c1                	mov    ecx,eax
c001bdea:	31 f6                	xor    esi,esi
c001bdec:	89 c8                	mov    eax,ecx
c001bdee:	89 f2                	mov    edx,esi
c001bdf0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001bdf4:	85 c9                	test   ecx,ecx
c001bdf6:	74 07                	je     c001bdff <__divdi3+0x6b>
c001bdf8:	f7 d8                	neg    eax
c001bdfa:	83 d2 00             	adc    edx,0x0
c001bdfd:	f7 da                	neg    edx
c001bdff:	83 c4 1c             	add    esp,0x1c
c001be02:	5b                   	pop    ebx
c001be03:	5e                   	pop    esi
c001be04:	5f                   	pop    edi
c001be05:	5d                   	pop    ebp
c001be06:	c3                   	ret    
c001be07:	90                   	nop
c001be08:	85 ff                	test   edi,edi
c001be0a:	75 0b                	jne    c001be17 <__divdi3+0x83>
c001be0c:	b8 01 00 00 00       	mov    eax,0x1
c001be11:	31 d2                	xor    edx,edx
c001be13:	f7 f3                	div    ebx
c001be15:	89 c7                	mov    edi,eax
c001be17:	31 d2                	xor    edx,edx
c001be19:	89 e8                	mov    eax,ebp
c001be1b:	f7 f7                	div    edi
c001be1d:	89 c6                	mov    esi,eax
c001be1f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001be22:	f7 f7                	div    edi
c001be24:	89 c1                	mov    ecx,eax
c001be26:	eb c4                	jmp    c001bdec <__divdi3+0x58>
c001be28:	39 eb                	cmp    ebx,ebp
c001be2a:	77 3c                	ja     c001be68 <__divdi3+0xd4>
c001be2c:	0f bd f3             	bsr    esi,ebx
c001be2f:	83 f6 1f             	xor    esi,0x1f
c001be32:	75 40                	jne    c001be74 <__divdi3+0xe0>
c001be34:	39 eb                	cmp    ebx,ebp
c001be36:	72 09                	jb     c001be41 <__divdi3+0xad>
c001be38:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c001be3b:	0f 87 97 00 00 00    	ja     c001bed8 <__divdi3+0x144>
c001be41:	b9 01 00 00 00       	mov    ecx,0x1
c001be46:	eb a4                	jmp    c001bdec <__divdi3+0x58>
c001be48:	f7 d9                	neg    ecx
c001be4a:	83 d3 00             	adc    ebx,0x0
c001be4d:	f7 db                	neg    ebx
c001be4f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001be52:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001be56:	89 dd                	mov    ebp,ebx
c001be58:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c001be60:	e9 5f ff ff ff       	jmp    c001bdc4 <__divdi3+0x30>
c001be65:	8d 76 00             	lea    esi,[esi+0x0]
c001be68:	31 f6                	xor    esi,esi
c001be6a:	31 c9                	xor    ecx,ecx
c001be6c:	e9 7b ff ff ff       	jmp    c001bdec <__divdi3+0x58>
c001be71:	8d 76 00             	lea    esi,[esi+0x0]
c001be74:	b8 20 00 00 00       	mov    eax,0x20
c001be79:	29 f0                	sub    eax,esi
c001be7b:	89 f1                	mov    ecx,esi
c001be7d:	d3 e3                	shl    ebx,cl
c001be7f:	89 fa                	mov    edx,edi
c001be81:	88 c1                	mov    cl,al
c001be83:	d3 ea                	shr    edx,cl
c001be85:	09 da                	or     edx,ebx
c001be87:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001be8b:	89 f1                	mov    ecx,esi
c001be8d:	d3 e7                	shl    edi,cl
c001be8f:	89 eb                	mov    ebx,ebp
c001be91:	88 c1                	mov    cl,al
c001be93:	d3 eb                	shr    ebx,cl
c001be95:	89 f1                	mov    ecx,esi
c001be97:	d3 e5                	shl    ebp,cl
c001be99:	8b 14 24             	mov    edx,DWORD PTR [esp]
c001be9c:	88 c1                	mov    cl,al
c001be9e:	d3 ea                	shr    edx,cl
c001bea0:	09 d5                	or     ebp,edx
c001bea2:	89 e8                	mov    eax,ebp
c001bea4:	89 da                	mov    edx,ebx
c001bea6:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c001beaa:	89 d3                	mov    ebx,edx
c001beac:	89 c5                	mov    ebp,eax
c001beae:	f7 e7                	mul    edi
c001beb0:	39 d3                	cmp    ebx,edx
c001beb2:	72 18                	jb     c001becc <__divdi3+0x138>
c001beb4:	74 0a                	je     c001bec0 <__divdi3+0x12c>
c001beb6:	89 e9                	mov    ecx,ebp
c001beb8:	31 f6                	xor    esi,esi
c001beba:	e9 2d ff ff ff       	jmp    c001bdec <__divdi3+0x58>
c001bebf:	90                   	nop
c001bec0:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c001bec3:	89 f1                	mov    ecx,esi
c001bec5:	d3 e7                	shl    edi,cl
c001bec7:	39 c7                	cmp    edi,eax
c001bec9:	73 eb                	jae    c001beb6 <__divdi3+0x122>
c001becb:	90                   	nop
c001becc:	8d 4d ff             	lea    ecx,[ebp-0x1]
c001becf:	31 f6                	xor    esi,esi
c001bed1:	e9 16 ff ff ff       	jmp    c001bdec <__divdi3+0x58>
c001bed6:	66 90                	xchg   ax,ax
c001bed8:	31 c9                	xor    ecx,ecx
c001beda:	e9 0d ff ff ff       	jmp    c001bdec <__divdi3+0x58>
c001bedf:	90                   	nop

c001bee0 <__moddi3>:
c001bee0:	55                   	push   ebp
c001bee1:	57                   	push   edi
c001bee2:	56                   	push   esi
c001bee3:	53                   	push   ebx
c001bee4:	83 ec 2c             	sub    esp,0x2c
c001bee7:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001beeb:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c001beef:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001bef3:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c001bef7:	85 db                	test   ebx,ebx
c001bef9:	0f 88 85 00 00 00    	js     c001bf84 <__moddi3+0xa4>
c001beff:	89 de                	mov    esi,ebx
c001bf01:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001bf09:	89 d7                	mov    edi,edx
c001bf0b:	85 d2                	test   edx,edx
c001bf0d:	79 09                	jns    c001bf18 <__moddi3+0x38>
c001bf0f:	f7 d8                	neg    eax
c001bf11:	83 d2 00             	adc    edx,0x0
c001bf14:	f7 da                	neg    edx
c001bf16:	89 d7                	mov    edi,edx
c001bf18:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bf1c:	89 cd                	mov    ebp,ecx
c001bf1e:	85 ff                	test   edi,edi
c001bf20:	75 52                	jne    c001bf74 <__moddi3+0x94>
c001bf22:	89 c3                	mov    ebx,eax
c001bf24:	39 f0                	cmp    eax,esi
c001bf26:	76 24                	jbe    c001bf4c <__moddi3+0x6c>
c001bf28:	89 c8                	mov    eax,ecx
c001bf2a:	89 f2                	mov    edx,esi
c001bf2c:	f7 f3                	div    ebx
c001bf2e:	89 d6                	mov    esi,edx
c001bf30:	89 f0                	mov    eax,esi
c001bf32:	31 d2                	xor    edx,edx
c001bf34:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001bf38:	85 c9                	test   ecx,ecx
c001bf3a:	74 07                	je     c001bf43 <__moddi3+0x63>
c001bf3c:	f7 d8                	neg    eax
c001bf3e:	83 d2 00             	adc    edx,0x0
c001bf41:	f7 da                	neg    edx
c001bf43:	83 c4 2c             	add    esp,0x2c
c001bf46:	5b                   	pop    ebx
c001bf47:	5e                   	pop    esi
c001bf48:	5f                   	pop    edi
c001bf49:	5d                   	pop    ebp
c001bf4a:	c3                   	ret    
c001bf4b:	90                   	nop
c001bf4c:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001bf50:	85 db                	test   ebx,ebx
c001bf52:	75 0d                	jne    c001bf61 <__moddi3+0x81>
c001bf54:	b8 01 00 00 00       	mov    eax,0x1
c001bf59:	31 d2                	xor    edx,edx
c001bf5b:	f7 f7                	div    edi
c001bf5d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bf61:	89 f0                	mov    eax,esi
c001bf63:	31 d2                	xor    edx,edx
c001bf65:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001bf69:	f7 f7                	div    edi
c001bf6b:	89 e8                	mov    eax,ebp
c001bf6d:	f7 f7                	div    edi
c001bf6f:	89 d6                	mov    esi,edx
c001bf71:	eb bd                	jmp    c001bf30 <__moddi3+0x50>
c001bf73:	90                   	nop
c001bf74:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001bf78:	39 f7                	cmp    edi,esi
c001bf7a:	76 20                	jbe    c001bf9c <__moddi3+0xbc>
c001bf7c:	89 c8                	mov    eax,ecx
c001bf7e:	89 f2                	mov    edx,esi
c001bf80:	eb b2                	jmp    c001bf34 <__moddi3+0x54>
c001bf82:	66 90                	xchg   ax,ax
c001bf84:	f7 d9                	neg    ecx
c001bf86:	83 d3 00             	adc    ebx,0x0
c001bf89:	f7 db                	neg    ebx
c001bf8b:	89 de                	mov    esi,ebx
c001bf8d:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c001bf95:	e9 6f ff ff ff       	jmp    c001bf09 <__moddi3+0x29>
c001bf9a:	66 90                	xchg   ax,ax
c001bf9c:	0f bd c7             	bsr    eax,edi
c001bf9f:	83 f0 1f             	xor    eax,0x1f
c001bfa2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001bfa6:	75 24                	jne    c001bfcc <__moddi3+0xec>
c001bfa8:	39 f7                	cmp    edi,esi
c001bfaa:	72 06                	jb     c001bfb2 <__moddi3+0xd2>
c001bfac:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c001bfb0:	77 0c                	ja     c001bfbe <__moddi3+0xde>
c001bfb2:	89 e9                	mov    ecx,ebp
c001bfb4:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c001bfb8:	19 fe                	sbb    esi,edi
c001bfba:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001bfbe:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001bfc2:	89 f2                	mov    edx,esi
c001bfc4:	e9 6b ff ff ff       	jmp    c001bf34 <__moddi3+0x54>
c001bfc9:	8d 76 00             	lea    esi,[esi+0x0]
c001bfcc:	b8 20 00 00 00       	mov    eax,0x20
c001bfd1:	89 c2                	mov    edx,eax
c001bfd3:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001bfd7:	29 da                	sub    edx,ebx
c001bfd9:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001bfdd:	88 d9                	mov    cl,bl
c001bfdf:	d3 e7                	shl    edi,cl
c001bfe1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bfe5:	88 d1                	mov    cl,dl
c001bfe7:	d3 e8                	shr    eax,cl
c001bfe9:	09 c7                	or     edi,eax
c001bfeb:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c001bfef:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001bff3:	89 d8                	mov    eax,ebx
c001bff5:	88 d9                	mov    cl,bl
c001bff7:	d3 e7                	shl    edi,cl
c001bff9:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001bffd:	89 f3                	mov    ebx,esi
c001bfff:	88 d1                	mov    cl,dl
c001c001:	d3 eb                	shr    ebx,cl
c001c003:	89 c7                	mov    edi,eax
c001c005:	88 c1                	mov    cl,al
c001c007:	d3 e6                	shl    esi,cl
c001c009:	89 e8                	mov    eax,ebp
c001c00b:	88 d1                	mov    cl,dl
c001c00d:	d3 e8                	shr    eax,cl
c001c00f:	09 f0                	or     eax,esi
c001c011:	89 f9                	mov    ecx,edi
c001c013:	d3 e5                	shl    ebp,cl
c001c015:	89 da                	mov    edx,ebx
c001c017:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c001c01b:	89 d3                	mov    ebx,edx
c001c01d:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001c021:	89 c6                	mov    esi,eax
c001c023:	89 d1                	mov    ecx,edx
c001c025:	39 d3                	cmp    ebx,edx
c001c027:	72 27                	jb     c001c050 <__moddi3+0x170>
c001c029:	74 21                	je     c001c04c <__moddi3+0x16c>
c001c02b:	29 f5                	sub    ebp,esi
c001c02d:	19 cb                	sbb    ebx,ecx
c001c02f:	89 de                	mov    esi,ebx
c001c031:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c001c035:	d3 e6                	shl    esi,cl
c001c037:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001c03b:	89 f9                	mov    ecx,edi
c001c03d:	d3 ed                	shr    ebp,cl
c001c03f:	09 ee                	or     esi,ebp
c001c041:	89 f0                	mov    eax,esi
c001c043:	d3 eb                	shr    ebx,cl
c001c045:	89 da                	mov    edx,ebx
c001c047:	e9 e8 fe ff ff       	jmp    c001bf34 <__moddi3+0x54>
c001c04c:	39 c5                	cmp    ebp,eax
c001c04e:	73 db                	jae    c001c02b <__moddi3+0x14b>
c001c050:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001c054:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c001c058:	89 d1                	mov    ecx,edx
c001c05a:	89 c6                	mov    esi,eax
c001c05c:	eb cd                	jmp    c001c02b <__moddi3+0x14b>
c001c05e:	66 90                	xchg   ax,ax

c001c060 <__udivdi3>:
c001c060:	55                   	push   ebp
c001c061:	57                   	push   edi
c001c062:	56                   	push   esi
c001c063:	53                   	push   ebx
c001c064:	83 ec 1c             	sub    esp,0x1c
c001c067:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001c06b:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001c06f:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001c073:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001c077:	85 d2                	test   edx,edx
c001c079:	75 41                	jne    c001c0bc <__udivdi3+0x5c>
c001c07b:	39 f7                	cmp    edi,esi
c001c07d:	76 15                	jbe    c001c094 <__udivdi3+0x34>
c001c07f:	89 e8                	mov    eax,ebp
c001c081:	89 f2                	mov    edx,esi
c001c083:	f7 f7                	div    edi
c001c085:	31 db                	xor    ebx,ebx
c001c087:	89 da                	mov    edx,ebx
c001c089:	83 c4 1c             	add    esp,0x1c
c001c08c:	5b                   	pop    ebx
c001c08d:	5e                   	pop    esi
c001c08e:	5f                   	pop    edi
c001c08f:	5d                   	pop    ebp
c001c090:	c3                   	ret    
c001c091:	8d 76 00             	lea    esi,[esi+0x0]
c001c094:	89 f9                	mov    ecx,edi
c001c096:	85 ff                	test   edi,edi
c001c098:	75 0b                	jne    c001c0a5 <__udivdi3+0x45>
c001c09a:	b8 01 00 00 00       	mov    eax,0x1
c001c09f:	31 d2                	xor    edx,edx
c001c0a1:	f7 f7                	div    edi
c001c0a3:	89 c1                	mov    ecx,eax
c001c0a5:	31 d2                	xor    edx,edx
c001c0a7:	89 f0                	mov    eax,esi
c001c0a9:	f7 f1                	div    ecx
c001c0ab:	89 c3                	mov    ebx,eax
c001c0ad:	89 e8                	mov    eax,ebp
c001c0af:	f7 f1                	div    ecx
c001c0b1:	89 da                	mov    edx,ebx
c001c0b3:	83 c4 1c             	add    esp,0x1c
c001c0b6:	5b                   	pop    ebx
c001c0b7:	5e                   	pop    esi
c001c0b8:	5f                   	pop    edi
c001c0b9:	5d                   	pop    ebp
c001c0ba:	c3                   	ret    
c001c0bb:	90                   	nop
c001c0bc:	39 f2                	cmp    edx,esi
c001c0be:	77 1c                	ja     c001c0dc <__udivdi3+0x7c>
c001c0c0:	0f bd da             	bsr    ebx,edx
c001c0c3:	83 f3 1f             	xor    ebx,0x1f
c001c0c6:	75 24                	jne    c001c0ec <__udivdi3+0x8c>
c001c0c8:	39 f2                	cmp    edx,esi
c001c0ca:	72 08                	jb     c001c0d4 <__udivdi3+0x74>
c001c0cc:	39 ef                	cmp    edi,ebp
c001c0ce:	0f 87 84 00 00 00    	ja     c001c158 <__udivdi3+0xf8>
c001c0d4:	b8 01 00 00 00       	mov    eax,0x1
c001c0d9:	eb ac                	jmp    c001c087 <__udivdi3+0x27>
c001c0db:	90                   	nop
c001c0dc:	31 db                	xor    ebx,ebx
c001c0de:	31 c0                	xor    eax,eax
c001c0e0:	89 da                	mov    edx,ebx
c001c0e2:	83 c4 1c             	add    esp,0x1c
c001c0e5:	5b                   	pop    ebx
c001c0e6:	5e                   	pop    esi
c001c0e7:	5f                   	pop    edi
c001c0e8:	5d                   	pop    ebp
c001c0e9:	c3                   	ret    
c001c0ea:	66 90                	xchg   ax,ax
c001c0ec:	b8 20 00 00 00       	mov    eax,0x20
c001c0f1:	29 d8                	sub    eax,ebx
c001c0f3:	88 d9                	mov    cl,bl
c001c0f5:	d3 e2                	shl    edx,cl
c001c0f7:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001c0fb:	89 fa                	mov    edx,edi
c001c0fd:	88 c1                	mov    cl,al
c001c0ff:	d3 ea                	shr    edx,cl
c001c101:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001c105:	09 d1                	or     ecx,edx
c001c107:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001c10b:	88 d9                	mov    cl,bl
c001c10d:	d3 e7                	shl    edi,cl
c001c10f:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001c113:	89 f7                	mov    edi,esi
c001c115:	88 c1                	mov    cl,al
c001c117:	d3 ef                	shr    edi,cl
c001c119:	88 d9                	mov    cl,bl
c001c11b:	d3 e6                	shl    esi,cl
c001c11d:	89 ea                	mov    edx,ebp
c001c11f:	88 c1                	mov    cl,al
c001c121:	d3 ea                	shr    edx,cl
c001c123:	09 d6                	or     esi,edx
c001c125:	89 f0                	mov    eax,esi
c001c127:	89 fa                	mov    edx,edi
c001c129:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001c12d:	89 d7                	mov    edi,edx
c001c12f:	89 c6                	mov    esi,eax
c001c131:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001c135:	39 d7                	cmp    edi,edx
c001c137:	72 13                	jb     c001c14c <__udivdi3+0xec>
c001c139:	74 09                	je     c001c144 <__udivdi3+0xe4>
c001c13b:	89 f0                	mov    eax,esi
c001c13d:	31 db                	xor    ebx,ebx
c001c13f:	e9 43 ff ff ff       	jmp    c001c087 <__udivdi3+0x27>
c001c144:	88 d9                	mov    cl,bl
c001c146:	d3 e5                	shl    ebp,cl
c001c148:	39 c5                	cmp    ebp,eax
c001c14a:	73 ef                	jae    c001c13b <__udivdi3+0xdb>
c001c14c:	8d 46 ff             	lea    eax,[esi-0x1]
c001c14f:	31 db                	xor    ebx,ebx
c001c151:	e9 31 ff ff ff       	jmp    c001c087 <__udivdi3+0x27>
c001c156:	66 90                	xchg   ax,ax
c001c158:	31 c0                	xor    eax,eax
c001c15a:	e9 28 ff ff ff       	jmp    c001c087 <__udivdi3+0x27>
c001c15f:	90                   	nop

c001c160 <__umoddi3>:
c001c160:	55                   	push   ebp
c001c161:	57                   	push   edi
c001c162:	56                   	push   esi
c001c163:	53                   	push   ebx
c001c164:	83 ec 1c             	sub    esp,0x1c
c001c167:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001c16b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001c16f:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001c173:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001c177:	89 da                	mov    edx,ebx
c001c179:	85 c0                	test   eax,eax
c001c17b:	75 37                	jne    c001c1b4 <__umoddi3+0x54>
c001c17d:	39 df                	cmp    edi,ebx
c001c17f:	76 13                	jbe    c001c194 <__umoddi3+0x34>
c001c181:	89 f0                	mov    eax,esi
c001c183:	f7 f7                	div    edi
c001c185:	89 d0                	mov    eax,edx
c001c187:	31 d2                	xor    edx,edx
c001c189:	83 c4 1c             	add    esp,0x1c
c001c18c:	5b                   	pop    ebx
c001c18d:	5e                   	pop    esi
c001c18e:	5f                   	pop    edi
c001c18f:	5d                   	pop    ebp
c001c190:	c3                   	ret    
c001c191:	8d 76 00             	lea    esi,[esi+0x0]
c001c194:	89 fd                	mov    ebp,edi
c001c196:	85 ff                	test   edi,edi
c001c198:	75 0b                	jne    c001c1a5 <__umoddi3+0x45>
c001c19a:	b8 01 00 00 00       	mov    eax,0x1
c001c19f:	31 d2                	xor    edx,edx
c001c1a1:	f7 f7                	div    edi
c001c1a3:	89 c5                	mov    ebp,eax
c001c1a5:	89 d8                	mov    eax,ebx
c001c1a7:	31 d2                	xor    edx,edx
c001c1a9:	f7 f5                	div    ebp
c001c1ab:	89 f0                	mov    eax,esi
c001c1ad:	f7 f5                	div    ebp
c001c1af:	89 d0                	mov    eax,edx
c001c1b1:	eb d4                	jmp    c001c187 <__umoddi3+0x27>
c001c1b3:	90                   	nop
c001c1b4:	89 f1                	mov    ecx,esi
c001c1b6:	39 d8                	cmp    eax,ebx
c001c1b8:	76 0a                	jbe    c001c1c4 <__umoddi3+0x64>
c001c1ba:	89 f0                	mov    eax,esi
c001c1bc:	83 c4 1c             	add    esp,0x1c
c001c1bf:	5b                   	pop    ebx
c001c1c0:	5e                   	pop    esi
c001c1c1:	5f                   	pop    edi
c001c1c2:	5d                   	pop    ebp
c001c1c3:	c3                   	ret    
c001c1c4:	0f bd e8             	bsr    ebp,eax
c001c1c7:	83 f5 1f             	xor    ebp,0x1f
c001c1ca:	75 1c                	jne    c001c1e8 <__umoddi3+0x88>
c001c1cc:	39 d8                	cmp    eax,ebx
c001c1ce:	72 04                	jb     c001c1d4 <__umoddi3+0x74>
c001c1d0:	39 f7                	cmp    edi,esi
c001c1d2:	77 08                	ja     c001c1dc <__umoddi3+0x7c>
c001c1d4:	89 da                	mov    edx,ebx
c001c1d6:	29 fe                	sub    esi,edi
c001c1d8:	19 c2                	sbb    edx,eax
c001c1da:	89 f1                	mov    ecx,esi
c001c1dc:	89 c8                	mov    eax,ecx
c001c1de:	83 c4 1c             	add    esp,0x1c
c001c1e1:	5b                   	pop    ebx
c001c1e2:	5e                   	pop    esi
c001c1e3:	5f                   	pop    edi
c001c1e4:	5d                   	pop    ebp
c001c1e5:	c3                   	ret    
c001c1e6:	66 90                	xchg   ax,ax
c001c1e8:	ba 20 00 00 00       	mov    edx,0x20
c001c1ed:	29 ea                	sub    edx,ebp
c001c1ef:	89 e9                	mov    ecx,ebp
c001c1f1:	d3 e0                	shl    eax,cl
c001c1f3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c1f7:	89 f8                	mov    eax,edi
c001c1f9:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001c1fd:	88 d1                	mov    cl,dl
c001c1ff:	d3 e8                	shr    eax,cl
c001c201:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001c205:	09 c1                	or     ecx,eax
c001c207:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001c20b:	89 e9                	mov    ecx,ebp
c001c20d:	d3 e7                	shl    edi,cl
c001c20f:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001c213:	89 d8                	mov    eax,ebx
c001c215:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001c219:	88 d1                	mov    cl,dl
c001c21b:	d3 e8                	shr    eax,cl
c001c21d:	89 c7                	mov    edi,eax
c001c21f:	89 e9                	mov    ecx,ebp
c001c221:	d3 e3                	shl    ebx,cl
c001c223:	89 f0                	mov    eax,esi
c001c225:	88 d1                	mov    cl,dl
c001c227:	d3 e8                	shr    eax,cl
c001c229:	09 d8                	or     eax,ebx
c001c22b:	89 e9                	mov    ecx,ebp
c001c22d:	d3 e6                	shl    esi,cl
c001c22f:	89 f3                	mov    ebx,esi
c001c231:	89 fa                	mov    edx,edi
c001c233:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001c237:	89 d1                	mov    ecx,edx
c001c239:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001c23d:	89 c6                	mov    esi,eax
c001c23f:	89 d7                	mov    edi,edx
c001c241:	39 d1                	cmp    ecx,edx
c001c243:	72 27                	jb     c001c26c <__umoddi3+0x10c>
c001c245:	74 21                	je     c001c268 <__umoddi3+0x108>
c001c247:	89 ca                	mov    edx,ecx
c001c249:	29 f3                	sub    ebx,esi
c001c24b:	19 fa                	sbb    edx,edi
c001c24d:	89 d0                	mov    eax,edx
c001c24f:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c001c253:	d3 e0                	shl    eax,cl
c001c255:	89 e9                	mov    ecx,ebp
c001c257:	d3 eb                	shr    ebx,cl
c001c259:	09 d8                	or     eax,ebx
c001c25b:	d3 ea                	shr    edx,cl
c001c25d:	83 c4 1c             	add    esp,0x1c
c001c260:	5b                   	pop    ebx
c001c261:	5e                   	pop    esi
c001c262:	5f                   	pop    edi
c001c263:	5d                   	pop    ebp
c001c264:	c3                   	ret    
c001c265:	8d 76 00             	lea    esi,[esi+0x0]
c001c268:	39 c3                	cmp    ebx,eax
c001c26a:	73 db                	jae    c001c247 <__umoddi3+0xe7>
c001c26c:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001c270:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c001c274:	89 d7                	mov    edi,edx
c001c276:	89 c6                	mov    esi,eax
c001c278:	eb cd                	jmp    c001c247 <__umoddi3+0xe7>

Disassembly of section .init:

c001c27a <_init>:
c001c27a:	55                   	push   ebp
c001c27b:	89 e5                	mov    ebp,esp
c001c27d:	e8 96 3e fe ff       	call   c0000118 <frame_dummy>
c001c282:	e8 e5 fa ff ff       	call   c001bd6c <__do_global_ctors_aux>
c001c287:	5d                   	pop    ebp
c001c288:	c3                   	ret    

Disassembly of section .fini:

c001c289 <_fini>:
c001c289:	55                   	push   ebp
c001c28a:	89 e5                	mov    ebp,esp
c001c28c:	e8 17 3e fe ff       	call   c00000a8 <__do_global_dtors_aux>
c001c291:	5d                   	pop    ebp
c001c292:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c001c294 <Computer::~Computer()>:
c001c294:	83 ec 0c             	sub    esp,0xc
c001c297:	ba a0 d5 01 c0       	mov    edx,0xc001d5a0
c001c29c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c2a0:	89 10                	mov    DWORD PTR [eax],edx
c001c2a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c2a6:	83 ec 0c             	sub    esp,0xc
c001c2a9:	50                   	push   eax
c001c2aa:	e8 83 fc fe ff       	call   c000bf32 <Device::~Device()>
c001c2af:	83 c4 10             	add    esp,0x10
c001c2b2:	90                   	nop
c001c2b3:	83 c4 0c             	add    esp,0xc
c001c2b6:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c001c2b8 <Computer::~Computer()>:
c001c2b8:	83 ec 0c             	sub    esp,0xc
c001c2bb:	83 ec 0c             	sub    esp,0xc
c001c2be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c2c2:	e8 cd ff ff ff       	call   c001c294 <Computer::~Computer()>
c001c2c7:	83 c4 10             	add    esp,0x10
c001c2ca:	83 ec 08             	sub    esp,0x8
c001c2cd:	68 70 01 00 00       	push   0x170
c001c2d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c2d6:	e8 1f e8 fe ff       	call   c000aafa <operator delete(void*, unsigned long)>
c001c2db:	83 c4 10             	add    esp,0x10
c001c2de:	83 c4 0c             	add    esp,0xc
c001c2e1:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c001c2e2 <idleCommon()>:
c001c2e2:	83 ec 0c             	sub    esp,0xc
c001c2e5:	fa                   	cli    
c001c2e6:	ff 05 08 3d 02 c0    	inc    DWORD PTR ds:0xc0023d08
c001c2ec:	e8 a3 77 ff ff       	call   c0013a94 <schedule()>
c001c2f1:	a1 08 3d 02 c0       	mov    eax,ds:0xc0023d08
c001c2f6:	48                   	dec    eax
c001c2f7:	a3 08 3d 02 c0       	mov    ds:0xc0023d08,eax
c001c2fc:	75 01                	jne    c001c2ff <idleCommon()+0x1d>
c001c2fe:	fb                   	sti    
c001c2ff:	83 c4 0c             	add    esp,0xc
c001c302:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c001c304 <LinkedList<UnixFile>::~LinkedList()>:
c001c304:	90                   	nop
c001c305:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c001c306 <LinkedList<UnixFile>::LinkedList()>:
c001c306:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c30a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001c310:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c314:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c31b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c31f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001c326:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c32a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001c330:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c334:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c33b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c33f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001c346:	90                   	nop
c001c347:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c001c348 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c001c348:	83 ec 0c             	sub    esp,0xc
c001c34b:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001c350:	75 10                	jne    c001c362 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c001c352:	83 ec 0c             	sub    esp,0xc
c001c355:	68 f4 d7 01 c0       	push   0xc001d7f4
c001c35a:	e8 e0 43 ff ff       	call   c001073f <Krnl::panic(char const*)>
c001c35f:	83 c4 10             	add    esp,0x10
c001c362:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c366:	8b 00                	mov    eax,DWORD PTR [eax]
c001c368:	85 c0                	test   eax,eax
c001c36a:	74 34                	je     c001c3a0 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001c36c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c370:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c373:	85 c0                	test   eax,eax
c001c375:	74 29                	je     c001c3a0 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001c377:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c37b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c37e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c382:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001c385:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c389:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c38d:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001c390:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c394:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c397:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001c39e:	eb 65                	jmp    c001c405 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001c3a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c3a4:	8b 00                	mov    eax,DWORD PTR [eax]
c001c3a6:	85 c0                	test   eax,eax
c001c3a8:	75 4b                	jne    c001c3f5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001c3aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c3ae:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c3b1:	85 c0                	test   eax,eax
c001c3b3:	75 40                	jne    c001c3f5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001c3b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c3b9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c3bd:	89 10                	mov    DWORD PTR [eax],edx
c001c3bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c3c3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c3c7:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001c3ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c3ce:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c3d1:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001c3d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c3dc:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c3df:	85 c0                	test   eax,eax
c001c3e1:	74 22                	je     c001c405 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001c3e3:	83 ec 0c             	sub    esp,0xc
c001c3e6:	68 16 d8 01 c0       	push   0xc001d816
c001c3eb:	e8 4f 43 ff ff       	call   c001073f <Krnl::panic(char const*)>
c001c3f0:	83 c4 10             	add    esp,0x10
c001c3f3:	eb 10                	jmp    c001c405 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001c3f5:	83 ec 0c             	sub    esp,0xc
c001c3f8:	68 20 d8 01 c0       	push   0xc001d820
c001c3fd:	e8 3d 43 ff ff       	call   c001073f <Krnl::panic(char const*)>
c001c402:	83 c4 10             	add    esp,0x10
c001c405:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c409:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c40c:	8d 50 01             	lea    edx,[eax+0x1]
c001c40f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c413:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001c416:	90                   	nop
c001c417:	83 c4 0c             	add    esp,0xc
c001c41a:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c001c41c <LinkedList<UnixFile>::getFirstElement()>:
c001c41c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c420:	8b 00                	mov    eax,DWORD PTR [eax]
c001c422:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c001c424 <LinkedList<UnixFile>::removeFirst()>:
c001c424:	83 ec 0c             	sub    esp,0xc
c001c427:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c42b:	8b 00                	mov    eax,DWORD PTR [eax]
c001c42d:	85 c0                	test   eax,eax
c001c42f:	75 12                	jne    c001c443 <LinkedList<UnixFile>::removeFirst()+0x1f>
c001c431:	83 ec 0c             	sub    esp,0xc
c001c434:	68 2c d8 01 c0       	push   0xc001d82c
c001c439:	e8 01 43 ff ff       	call   c001073f <Krnl::panic(char const*)>
c001c43e:	83 c4 10             	add    esp,0x10
c001c441:	eb 7e                	jmp    c001c4c1 <LinkedList<UnixFile>::removeFirst()+0x9d>
c001c443:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c447:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c44a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c44d:	85 c0                	test   eax,eax
c001c44f:	74 10                	je     c001c461 <LinkedList<UnixFile>::removeFirst()+0x3d>
c001c451:	83 ec 0c             	sub    esp,0xc
c001c454:	68 77 d8 01 c0       	push   0xc001d877
c001c459:	e8 e1 42 ff ff       	call   c001073f <Krnl::panic(char const*)>
c001c45e:	83 c4 10             	add    esp,0x10
c001c461:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c465:	8b 00                	mov    eax,DWORD PTR [eax]
c001c467:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c46a:	85 c0                	test   eax,eax
c001c46c:	75 33                	jne    c001c4a1 <LinkedList<UnixFile>::removeFirst()+0x7d>
c001c46e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c472:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001c478:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c47c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c483:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c487:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c48a:	83 f8 01             	cmp    eax,0x1
c001c48d:	74 21                	je     c001c4b0 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001c48f:	83 ec 0c             	sub    esp,0xc
c001c492:	68 50 d8 01 c0       	push   0xc001d850
c001c497:	e8 a3 42 ff ff       	call   c001073f <Krnl::panic(char const*)>
c001c49c:	83 c4 10             	add    esp,0x10
c001c49f:	eb 0f                	jmp    c001c4b0 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001c4a1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c4a5:	8b 00                	mov    eax,DWORD PTR [eax]
c001c4a7:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c001c4aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c4ae:	89 10                	mov    DWORD PTR [eax],edx
c001c4b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c4b4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c4b7:	8d 50 ff             	lea    edx,[eax-0x1]
c001c4ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c4be:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001c4c1:	83 c4 0c             	add    esp,0xc
c001c4c4:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c001c4c6 <LinkedList<UnixFile>::getNext(UnixFile*)>:
c001c4c6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c4ca:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c4cd:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c001c4ce <DriverlessDevice::~DriverlessDevice()>:
c001c4ce:	ba bc de 01 c0       	mov    edx,0xc001debc
c001c4d3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c4d7:	89 10                	mov    DWORD PTR [eax],edx
c001c4d9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c4dd:	50                   	push   eax
c001c4de:	e8 4f fa fe ff       	call   c000bf32 <Device::~Device()>
c001c4e3:	83 c4 04             	add    esp,0x4
c001c4e6:	90                   	nop
c001c4e7:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c001c4e8 <DriverlessDevice::~DriverlessDevice()>:
c001c4e8:	83 ec 0c             	sub    esp,0xc
c001c4eb:	83 ec 0c             	sub    esp,0xc
c001c4ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c4f2:	e8 d7 ff ff ff       	call   c001c4ce <DriverlessDevice::~DriverlessDevice()>
c001c4f7:	83 c4 10             	add    esp,0x10
c001c4fa:	83 ec 08             	sub    esp,0x8
c001c4fd:	68 58 01 00 00       	push   0x158
c001c502:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c506:	e8 ef e5 fe ff       	call   c000aafa <operator delete(void*, unsigned long)>
c001c50b:	83 c4 10             	add    esp,0x10
c001c50e:	83 c4 0c             	add    esp,0xc
c001c511:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c001c512 <LinkedList<Device>::addElement(Device*)>:
c001c512:	83 ec 0c             	sub    esp,0xc
c001c515:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001c51a:	75 10                	jne    c001c52c <LinkedList<Device>::addElement(Device*)+0x1a>
c001c51c:	83 ec 0c             	sub    esp,0xc
c001c51f:	68 f4 d7 01 c0       	push   0xc001d7f4
c001c524:	e8 16 42 ff ff       	call   c001073f <Krnl::panic(char const*)>
c001c529:	83 c4 10             	add    esp,0x10
c001c52c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c530:	8b 00                	mov    eax,DWORD PTR [eax]
c001c532:	85 c0                	test   eax,eax
c001c534:	74 3a                	je     c001c570 <LinkedList<Device>::addElement(Device*)+0x5e>
c001c536:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c53a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c53d:	85 c0                	test   eax,eax
c001c53f:	74 2f                	je     c001c570 <LinkedList<Device>::addElement(Device*)+0x5e>
c001c541:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c545:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c548:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c54c:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c001c552:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c556:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c55a:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001c55d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c561:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c564:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001c56e:	eb 68                	jmp    c001c5d8 <LinkedList<Device>::addElement(Device*)+0xc6>
c001c570:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c574:	8b 00                	mov    eax,DWORD PTR [eax]
c001c576:	85 c0                	test   eax,eax
c001c578:	75 4e                	jne    c001c5c8 <LinkedList<Device>::addElement(Device*)+0xb6>
c001c57a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c57e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c581:	85 c0                	test   eax,eax
c001c583:	75 43                	jne    c001c5c8 <LinkedList<Device>::addElement(Device*)+0xb6>
c001c585:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c589:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c58d:	89 10                	mov    DWORD PTR [eax],edx
c001c58f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c593:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c597:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001c59a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c59e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c5a1:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001c5ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c5af:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c5b2:	85 c0                	test   eax,eax
c001c5b4:	74 22                	je     c001c5d8 <LinkedList<Device>::addElement(Device*)+0xc6>
c001c5b6:	83 ec 0c             	sub    esp,0xc
c001c5b9:	68 16 d8 01 c0       	push   0xc001d816
c001c5be:	e8 7c 41 ff ff       	call   c001073f <Krnl::panic(char const*)>
c001c5c3:	83 c4 10             	add    esp,0x10
c001c5c6:	eb 10                	jmp    c001c5d8 <LinkedList<Device>::addElement(Device*)+0xc6>
c001c5c8:	83 ec 0c             	sub    esp,0xc
c001c5cb:	68 20 d8 01 c0       	push   0xc001d820
c001c5d0:	e8 6a 41 ff ff       	call   c001073f <Krnl::panic(char const*)>
c001c5d5:	83 c4 10             	add    esp,0x10
c001c5d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c5dc:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c5df:	8d 50 01             	lea    edx,[eax+0x1]
c001c5e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c5e6:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001c5e9:	90                   	nop
c001c5ea:	83 c4 0c             	add    esp,0xc
c001c5ed:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c001c5ee <LinkedList<Device>::LinkedList()>:
c001c5ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c5f2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001c5f8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c5fc:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c603:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c607:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001c60e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c612:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001c618:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c61c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c623:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c627:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001c62e:	90                   	nop
c001c62f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c001c630 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c001c630:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c634:	8b 00                	mov    eax,DWORD PTR [eax]
c001c636:	85 c0                	test   eax,eax
c001c638:	75 0e                	jne    c001c648 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001c63a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c63e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c641:	85 c0                	test   eax,eax
c001c643:	75 03                	jne    c001c648 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001c645:	b0 01                	mov    al,0x1
c001c647:	c3                   	ret    
c001c648:	b0 00                	mov    al,0x0
c001c64a:	90                   	nop
c001c64b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c001c64c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c001c64c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c650:	8b 00                	mov    eax,DWORD PTR [eax]
c001c652:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c001c654 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c001c654:	83 ec 0c             	sub    esp,0xc
c001c657:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c65b:	8b 00                	mov    eax,DWORD PTR [eax]
c001c65d:	85 c0                	test   eax,eax
c001c65f:	75 17                	jne    c001c678 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x24>
c001c661:	83 ec 0c             	sub    esp,0xc
c001c664:	68 2c d8 01 c0       	push   0xc001d82c
c001c669:	e8 d1 40 ff ff       	call   c001073f <Krnl::panic(char const*)>
c001c66e:	83 c4 10             	add    esp,0x10
c001c671:	e9 92 00 00 00       	jmp    c001c708 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xb4>
c001c676:	66 90                	xchg   ax,ax
c001c678:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c67c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c67f:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001c682:	85 c0                	test   eax,eax
c001c684:	0f 95 c0             	setne  al
c001c687:	84 c0                	test   al,al
c001c689:	74 11                	je     c001c69c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x48>
c001c68b:	83 ec 0c             	sub    esp,0xc
c001c68e:	68 77 d8 01 c0       	push   0xc001d877
c001c693:	e8 a7 40 ff ff       	call   c001073f <Krnl::panic(char const*)>
c001c698:	83 c4 10             	add    esp,0x10
c001c69b:	90                   	nop
c001c69c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c6a0:	8b 00                	mov    eax,DWORD PTR [eax]
c001c6a2:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001c6a5:	85 c0                	test   eax,eax
c001c6a7:	0f 94 c0             	sete   al
c001c6aa:	84 c0                	test   al,al
c001c6ac:	74 36                	je     c001c6e4 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x90>
c001c6ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c6b2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001c6b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c6bc:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c6c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c6c7:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c6ca:	83 f8 01             	cmp    eax,0x1
c001c6cd:	74 25                	je     c001c6f4 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa0>
c001c6cf:	83 ec 0c             	sub    esp,0xc
c001c6d2:	68 50 d8 01 c0       	push   0xc001d850
c001c6d7:	e8 63 40 ff ff       	call   c001073f <Krnl::panic(char const*)>
c001c6dc:	83 c4 10             	add    esp,0x10
c001c6df:	eb 13                	jmp    c001c6f4 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa0>
c001c6e1:	8d 76 00             	lea    esi,[esi+0x0]
c001c6e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c6e8:	8b 00                	mov    eax,DWORD PTR [eax]
c001c6ea:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001c6ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c6f1:	89 10                	mov    DWORD PTR [eax],edx
c001c6f3:	90                   	nop
c001c6f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c6f8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c6fb:	8d 50 ff             	lea    edx,[eax-0x1]
c001c6fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c702:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001c705:	8d 76 00             	lea    esi,[esi+0x0]
c001c708:	83 c4 0c             	add    esp,0xc
c001c70b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c001c70c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c001c70c:	83 ec 0c             	sub    esp,0xc
c001c70f:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001c714:	75 12                	jne    c001c728 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1c>
c001c716:	83 ec 0c             	sub    esp,0xc
c001c719:	68 f4 d7 01 c0       	push   0xc001d7f4
c001c71e:	e8 1c 40 ff ff       	call   c001073f <Krnl::panic(char const*)>
c001c723:	83 c4 10             	add    esp,0x10
c001c726:	66 90                	xchg   ax,ax
c001c728:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c72c:	8b 00                	mov    eax,DWORD PTR [eax]
c001c72e:	85 c0                	test   eax,eax
c001c730:	74 36                	je     c001c768 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c001c732:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c736:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c739:	85 c0                	test   eax,eax
c001c73b:	74 2b                	je     c001c768 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c001c73d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c741:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c744:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c748:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c001c74b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c74f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c753:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001c756:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c75a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c75d:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001c764:	eb 6a                	jmp    c001c7d0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001c766:	66 90                	xchg   ax,ax
c001c768:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c76c:	8b 00                	mov    eax,DWORD PTR [eax]
c001c76e:	85 c0                	test   eax,eax
c001c770:	75 4e                	jne    c001c7c0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c001c772:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c776:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c779:	85 c0                	test   eax,eax
c001c77b:	75 43                	jne    c001c7c0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c001c77d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c781:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c785:	89 10                	mov    DWORD PTR [eax],edx
c001c787:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c78b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c78f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001c792:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c796:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c799:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001c7a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c7a4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c7a7:	85 c0                	test   eax,eax
c001c7a9:	74 25                	je     c001c7d0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001c7ab:	83 ec 0c             	sub    esp,0xc
c001c7ae:	68 16 d8 01 c0       	push   0xc001d816
c001c7b3:	e8 87 3f ff ff       	call   c001073f <Krnl::panic(char const*)>
c001c7b8:	83 c4 10             	add    esp,0x10
c001c7bb:	eb 13                	jmp    c001c7d0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001c7bd:	8d 76 00             	lea    esi,[esi+0x0]
c001c7c0:	83 ec 0c             	sub    esp,0xc
c001c7c3:	68 20 d8 01 c0       	push   0xc001d820
c001c7c8:	e8 72 3f ff ff       	call   c001073f <Krnl::panic(char const*)>
c001c7cd:	83 c4 10             	add    esp,0x10
c001c7d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c7d4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c7d7:	8d 50 01             	lea    edx,[eax+0x1]
c001c7da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c7de:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001c7e1:	90                   	nop
c001c7e2:	83 c4 0c             	add    esp,0xc
c001c7e5:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c001c7e8 <ACPI::~ACPI()>:
c001c7e8:	83 ec 0c             	sub    esp,0xc
c001c7eb:	ba 24 e4 01 c0       	mov    edx,0xc001e424
c001c7f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c7f4:	89 10                	mov    DWORD PTR [eax],edx
c001c7f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c7fa:	83 ec 0c             	sub    esp,0xc
c001c7fd:	50                   	push   eax
c001c7fe:	e8 2f f7 fe ff       	call   c000bf32 <Device::~Device()>
c001c803:	83 c4 10             	add    esp,0x10
c001c806:	90                   	nop
c001c807:	83 c4 0c             	add    esp,0xc
c001c80a:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c001c80c <ACPI::~ACPI()>:
c001c80c:	83 ec 0c             	sub    esp,0xc
c001c80f:	83 ec 0c             	sub    esp,0xc
c001c812:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c816:	e8 cd ff ff ff       	call   c001c7e8 <ACPI::~ACPI()>
c001c81b:	83 c4 10             	add    esp,0x10
c001c81e:	83 ec 08             	sub    esp,0x8
c001c821:	68 64 12 00 00       	push   0x1264
c001c826:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c82a:	e8 cb e2 fe ff       	call   c000aafa <operator delete(void*, unsigned long)>
c001c82f:	83 c4 10             	add    esp,0x10
c001c832:	83 c4 0c             	add    esp,0xc
c001c835:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c001c838 <LinkedList<Device>::~LinkedList()>:
c001c838:	90                   	nop
c001c839:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c001c83c <LinkedList<Device>::isEmpty()>:
c001c83c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c840:	8b 00                	mov    eax,DWORD PTR [eax]
c001c842:	85 c0                	test   eax,eax
c001c844:	75 0e                	jne    c001c854 <LinkedList<Device>::isEmpty()+0x18>
c001c846:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c84a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c84d:	85 c0                	test   eax,eax
c001c84f:	75 03                	jne    c001c854 <LinkedList<Device>::isEmpty()+0x18>
c001c851:	b0 01                	mov    al,0x1
c001c853:	c3                   	ret    
c001c854:	b0 00                	mov    al,0x0
c001c856:	90                   	nop
c001c857:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c001c858 <LinkedList<Device>::getFirstElement()>:
c001c858:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c85c:	8b 00                	mov    eax,DWORD PTR [eax]
c001c85e:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c001c860 <LinkedList<Device>::removeFirst()>:
c001c860:	83 ec 0c             	sub    esp,0xc
c001c863:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c867:	8b 00                	mov    eax,DWORD PTR [eax]
c001c869:	85 c0                	test   eax,eax
c001c86b:	75 17                	jne    c001c884 <LinkedList<Device>::removeFirst()+0x24>
c001c86d:	83 ec 0c             	sub    esp,0xc
c001c870:	68 2c d8 01 c0       	push   0xc001d82c
c001c875:	e8 c5 3e ff ff       	call   c001073f <Krnl::panic(char const*)>
c001c87a:	83 c4 10             	add    esp,0x10
c001c87d:	e9 92 00 00 00       	jmp    c001c914 <LinkedList<Device>::removeFirst()+0xb4>
c001c882:	66 90                	xchg   ax,ax
c001c884:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c888:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c88b:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c001c891:	85 c0                	test   eax,eax
c001c893:	74 13                	je     c001c8a8 <LinkedList<Device>::removeFirst()+0x48>
c001c895:	83 ec 0c             	sub    esp,0xc
c001c898:	68 77 d8 01 c0       	push   0xc001d877
c001c89d:	e8 9d 3e ff ff       	call   c001073f <Krnl::panic(char const*)>
c001c8a2:	83 c4 10             	add    esp,0x10
c001c8a5:	8d 76 00             	lea    esi,[esi+0x0]
c001c8a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c8ac:	8b 00                	mov    eax,DWORD PTR [eax]
c001c8ae:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c001c8b4:	85 c0                	test   eax,eax
c001c8b6:	75 34                	jne    c001c8ec <LinkedList<Device>::removeFirst()+0x8c>
c001c8b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c8bc:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001c8c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c8c6:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c8cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c8d1:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c8d4:	83 f8 01             	cmp    eax,0x1
c001c8d7:	74 27                	je     c001c900 <LinkedList<Device>::removeFirst()+0xa0>
c001c8d9:	83 ec 0c             	sub    esp,0xc
c001c8dc:	68 50 d8 01 c0       	push   0xc001d850
c001c8e1:	e8 59 3e ff ff       	call   c001073f <Krnl::panic(char const*)>
c001c8e6:	83 c4 10             	add    esp,0x10
c001c8e9:	eb 15                	jmp    c001c900 <LinkedList<Device>::removeFirst()+0xa0>
c001c8eb:	90                   	nop
c001c8ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c8f0:	8b 00                	mov    eax,DWORD PTR [eax]
c001c8f2:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c001c8f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c8fc:	89 10                	mov    DWORD PTR [eax],edx
c001c8fe:	66 90                	xchg   ax,ax
c001c900:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c904:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c907:	8d 50 ff             	lea    edx,[eax-0x1]
c001c90a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c90e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001c911:	8d 76 00             	lea    esi,[esi+0x0]
c001c914:	83 c4 0c             	add    esp,0xc
c001c917:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c001c918 <CPU::~CPU()>:
c001c918:	83 ec 0c             	sub    esp,0xc
c001c91b:	ba c0 e5 01 c0       	mov    edx,0xc001e5c0
c001c920:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c924:	89 10                	mov    DWORD PTR [eax],edx
c001c926:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c92a:	83 ec 0c             	sub    esp,0xc
c001c92d:	50                   	push   eax
c001c92e:	e8 ff f5 fe ff       	call   c000bf32 <Device::~Device()>
c001c933:	83 c4 10             	add    esp,0x10
c001c936:	90                   	nop
c001c937:	83 c4 0c             	add    esp,0xc
c001c93a:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c001c93c <CPU::~CPU()>:
c001c93c:	83 ec 0c             	sub    esp,0xc
c001c93f:	83 ec 0c             	sub    esp,0xc
c001c942:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c946:	e8 cd ff ff ff       	call   c001c918 <CPU::~CPU()>
c001c94b:	83 c4 10             	add    esp,0x10
c001c94e:	83 ec 08             	sub    esp,0x8
c001c951:	68 94 11 00 00       	push   0x1194
c001c956:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c95a:	e8 9b e1 fe ff       	call   c000aafa <operator delete(void*, unsigned long)>
c001c95f:	83 c4 10             	add    esp,0x10
c001c962:	83 c4 0c             	add    esp,0xc
c001c965:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c001c968 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c001c968:	90                   	nop
c001c969:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c001c96c <ThreadControlBlock::ThreadControlBlock()>:
c001c96c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c970:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001c977:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c97b:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c001c982:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c986:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c001c98d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c991:	c7 40 3c 00 00 00 00 	mov    DWORD PTR [eax+0x3c],0x0
c001c998:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c99c:	c7 40 55 00 00 00 00 	mov    DWORD PTR [eax+0x55],0x0
c001c9a3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c9a7:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c001c9ab:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c9af:	c6 40 5e 00          	mov    BYTE PTR [eax+0x5e],0x0
c001c9b3:	90                   	nop
c001c9b4:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c001c9b8 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c001c9b8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c9bc:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001c9c2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c9c6:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c9cd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c9d1:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001c9d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c9dc:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001c9e2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c9e6:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c9ed:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c9f1:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001c9f8:	90                   	nop
c001c9f9:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c001c9fc <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c001c9fc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ca00:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001ca03:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c001ca04 <PCI::~PCI()>:
c001ca04:	83 ec 0c             	sub    esp,0xc
c001ca07:	ba f4 f0 01 c0       	mov    edx,0xc001f0f4
c001ca0c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ca10:	89 10                	mov    DWORD PTR [eax],edx
c001ca12:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ca16:	83 ec 0c             	sub    esp,0xc
c001ca19:	50                   	push   eax
c001ca1a:	e8 9d ef fe ff       	call   c000b9bc <Bus::~Bus()>
c001ca1f:	83 c4 10             	add    esp,0x10
c001ca22:	90                   	nop
c001ca23:	83 c4 0c             	add    esp,0xc
c001ca26:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c001ca28 <PCI::~PCI()>:
c001ca28:	83 ec 0c             	sub    esp,0xc
c001ca2b:	83 ec 0c             	sub    esp,0xc
c001ca2e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ca32:	e8 cd ff ff ff       	call   c001ca04 <PCI::~PCI()>
c001ca37:	83 c4 10             	add    esp,0x10
c001ca3a:	83 ec 08             	sub    esp,0x8
c001ca3d:	68 5c 01 00 00       	push   0x15c
c001ca42:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ca46:	e8 af e0 fe ff       	call   c000aafa <operator delete(void*, unsigned long)>
c001ca4b:	83 c4 10             	add    esp,0x10
c001ca4e:	83 c4 0c             	add    esp,0xc
c001ca51:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c001ca52 <IDE::~IDE()>:
c001ca52:	83 ec 0c             	sub    esp,0xc
c001ca55:	ba a8 f1 01 c0       	mov    edx,0xc001f1a8
c001ca5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ca5e:	89 10                	mov    DWORD PTR [eax],edx
c001ca60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ca64:	83 ec 0c             	sub    esp,0xc
c001ca67:	50                   	push   eax
c001ca68:	e8 3f f9 fe ff       	call   c000c3ac <HardDiskController::~HardDiskController()>
c001ca6d:	83 c4 10             	add    esp,0x10
c001ca70:	90                   	nop
c001ca71:	83 c4 0c             	add    esp,0xc
c001ca74:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c001ca76 <IDE::~IDE()>:
c001ca76:	83 ec 0c             	sub    esp,0xc
c001ca79:	83 ec 0c             	sub    esp,0xc
c001ca7c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ca80:	e8 cd ff ff ff       	call   c001ca52 <IDE::~IDE()>
c001ca85:	83 c4 10             	add    esp,0x10
c001ca88:	83 ec 08             	sub    esp,0x8
c001ca8b:	68 70 02 00 00       	push   0x270
c001ca90:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ca94:	e8 61 e0 fe ff       	call   c000aafa <operator delete(void*, unsigned long)>
c001ca99:	83 c4 10             	add    esp,0x10
c001ca9c:	83 c4 0c             	add    esp,0xc
c001ca9f:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c001caa0 <SATABus::~SATABus()>:
c001caa0:	83 ec 0c             	sub    esp,0xc
c001caa3:	ba f8 f1 01 c0       	mov    edx,0xc001f1f8
c001caa8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001caac:	89 10                	mov    DWORD PTR [eax],edx
c001caae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cab2:	83 ec 0c             	sub    esp,0xc
c001cab5:	50                   	push   eax
c001cab6:	e8 f1 f8 fe ff       	call   c000c3ac <HardDiskController::~HardDiskController()>
c001cabb:	83 c4 10             	add    esp,0x10
c001cabe:	90                   	nop
c001cabf:	83 c4 0c             	add    esp,0xc
c001cac2:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c001cac4 <SATABus::~SATABus()>:
c001cac4:	83 ec 0c             	sub    esp,0xc
c001cac7:	83 ec 0c             	sub    esp,0xc
c001caca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cace:	e8 cd ff ff ff       	call   c001caa0 <SATABus::~SATABus()>
c001cad3:	83 c4 10             	add    esp,0x10
c001cad6:	83 ec 08             	sub    esp,0x8
c001cad9:	68 64 01 00 00       	push   0x164
c001cade:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cae2:	e8 13 e0 fe ff       	call   c000aafa <operator delete(void*, unsigned long)>
c001cae7:	83 c4 10             	add    esp,0x10
c001caea:	83 c4 0c             	add    esp,0xc
c001caed:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c001caee <ATA::~ATA()>:
c001caee:	83 ec 0c             	sub    esp,0xc
c001caf1:	ba 38 f2 01 c0       	mov    edx,0xc001f238
c001caf6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cafa:	89 10                	mov    DWORD PTR [eax],edx
c001cafc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cb00:	83 ec 0c             	sub    esp,0xc
c001cb03:	50                   	push   eax
c001cb04:	e8 85 f9 fe ff       	call   c000c48e <PhysicalDisk::~PhysicalDisk()>
c001cb09:	83 c4 10             	add    esp,0x10
c001cb0c:	90                   	nop
c001cb0d:	83 c4 0c             	add    esp,0xc
c001cb10:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c001cb12 <ATA::~ATA()>:
c001cb12:	83 ec 0c             	sub    esp,0xc
c001cb15:	83 ec 0c             	sub    esp,0xc
c001cb18:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cb1c:	e8 cd ff ff ff       	call   c001caee <ATA::~ATA()>
c001cb21:	83 c4 10             	add    esp,0x10
c001cb24:	83 ec 08             	sub    esp,0x8
c001cb27:	68 7c 01 00 00       	push   0x17c
c001cb2c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cb30:	e8 c5 df fe ff       	call   c000aafa <operator delete(void*, unsigned long)>
c001cb35:	83 c4 10             	add    esp,0x10
c001cb38:	83 c4 0c             	add    esp,0xc
c001cb3b:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c001cb3c <ATAPI::~ATAPI()>:
c001cb3c:	83 ec 0c             	sub    esp,0xc
c001cb3f:	ba 80 f2 01 c0       	mov    edx,0xc001f280
c001cb44:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cb48:	89 10                	mov    DWORD PTR [eax],edx
c001cb4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cb4e:	83 ec 0c             	sub    esp,0xc
c001cb51:	50                   	push   eax
c001cb52:	e8 37 f9 fe ff       	call   c000c48e <PhysicalDisk::~PhysicalDisk()>
c001cb57:	83 c4 10             	add    esp,0x10
c001cb5a:	90                   	nop
c001cb5b:	83 c4 0c             	add    esp,0xc
c001cb5e:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c001cb60 <ATAPI::~ATAPI()>:
c001cb60:	83 ec 0c             	sub    esp,0xc
c001cb63:	83 ec 0c             	sub    esp,0xc
c001cb66:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cb6a:	e8 cd ff ff ff       	call   c001cb3c <ATAPI::~ATAPI()>
c001cb6f:	83 c4 10             	add    esp,0x10
c001cb72:	83 ec 08             	sub    esp,0x8
c001cb75:	68 84 01 00 00       	push   0x184
c001cb7a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cb7e:	e8 77 df fe ff       	call   c000aafa <operator delete(void*, unsigned long)>
c001cb83:	83 c4 10             	add    esp,0x10
c001cb86:	83 c4 0c             	add    esp,0xc
c001cb89:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c001cb8a <SATA::~SATA()>:
c001cb8a:	83 ec 0c             	sub    esp,0xc
c001cb8d:	ba 34 f3 01 c0       	mov    edx,0xc001f334
c001cb92:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cb96:	89 10                	mov    DWORD PTR [eax],edx
c001cb98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cb9c:	83 ec 0c             	sub    esp,0xc
c001cb9f:	50                   	push   eax
c001cba0:	e8 e9 f8 fe ff       	call   c000c48e <PhysicalDisk::~PhysicalDisk()>
c001cba5:	83 c4 10             	add    esp,0x10
c001cba8:	90                   	nop
c001cba9:	83 c4 0c             	add    esp,0xc
c001cbac:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c001cbae <SATA::~SATA()>:
c001cbae:	83 ec 0c             	sub    esp,0xc
c001cbb1:	83 ec 0c             	sub    esp,0xc
c001cbb4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cbb8:	e8 cd ff ff ff       	call   c001cb8a <SATA::~SATA()>
c001cbbd:	83 c4 10             	add    esp,0x10
c001cbc0:	83 ec 08             	sub    esp,0x8
c001cbc3:	68 7c 01 00 00       	push   0x17c
c001cbc8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cbcc:	e8 29 df fe ff       	call   c000aafa <operator delete(void*, unsigned long)>
c001cbd1:	83 c4 10             	add    esp,0x10
c001cbd4:	83 c4 0c             	add    esp,0xc
c001cbd7:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c001cbd8 <SATAPI::~SATAPI()>:
c001cbd8:	83 ec 0c             	sub    esp,0xc
c001cbdb:	ba c4 f4 01 c0       	mov    edx,0xc001f4c4
c001cbe0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cbe4:	89 10                	mov    DWORD PTR [eax],edx
c001cbe6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cbea:	83 ec 0c             	sub    esp,0xc
c001cbed:	50                   	push   eax
c001cbee:	e8 9b f8 fe ff       	call   c000c48e <PhysicalDisk::~PhysicalDisk()>
c001cbf3:	83 c4 10             	add    esp,0x10
c001cbf6:	90                   	nop
c001cbf7:	83 c4 0c             	add    esp,0xc
c001cbfa:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c001cbfc <SATAPI::~SATAPI()>:
c001cbfc:	83 ec 0c             	sub    esp,0xc
c001cbff:	83 ec 0c             	sub    esp,0xc
c001cc02:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cc06:	e8 cd ff ff ff       	call   c001cbd8 <SATAPI::~SATAPI()>
c001cc0b:	83 c4 10             	add    esp,0x10
c001cc0e:	83 ec 08             	sub    esp,0x8
c001cc11:	68 84 01 00 00       	push   0x184
c001cc16:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cc1a:	e8 db de fe ff       	call   c000aafa <operator delete(void*, unsigned long)>
c001cc1f:	83 c4 10             	add    esp,0x10
c001cc22:	83 c4 0c             	add    esp,0xc
c001cc25:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c001cc26 <IOAPIC::~IOAPIC()>:
c001cc26:	83 ec 0c             	sub    esp,0xc
c001cc29:	ba 04 f5 01 c0       	mov    edx,0xc001f504
c001cc2e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc32:	89 10                	mov    DWORD PTR [eax],edx
c001cc34:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc38:	83 ec 0c             	sub    esp,0xc
c001cc3b:	50                   	push   eax
c001cc3c:	e8 f1 f2 fe ff       	call   c000bf32 <Device::~Device()>
c001cc41:	83 c4 10             	add    esp,0x10
c001cc44:	90                   	nop
c001cc45:	83 c4 0c             	add    esp,0xc
c001cc48:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c001cc4a <IOAPIC::~IOAPIC()>:
c001cc4a:	83 ec 0c             	sub    esp,0xc
c001cc4d:	83 ec 0c             	sub    esp,0xc
c001cc50:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cc54:	e8 cd ff ff ff       	call   c001cc26 <IOAPIC::~IOAPIC()>
c001cc59:	83 c4 10             	add    esp,0x10
c001cc5c:	83 ec 08             	sub    esp,0x8
c001cc5f:	68 68 01 00 00       	push   0x168
c001cc64:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cc68:	e8 8d de fe ff       	call   c000aafa <operator delete(void*, unsigned long)>
c001cc6d:	83 c4 10             	add    esp,0x10
c001cc70:	83 c4 0c             	add    esp,0xc
c001cc73:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c001cc74 <APICTimer::~APICTimer()>:
c001cc74:	83 ec 0c             	sub    esp,0xc
c001cc77:	ba 4c f5 01 c0       	mov    edx,0xc001f54c
c001cc7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc80:	89 10                	mov    DWORD PTR [eax],edx
c001cc82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc86:	83 ec 0c             	sub    esp,0xc
c001cc89:	50                   	push   eax
c001cc8a:	e8 a1 0b ff ff       	call   c000d830 <Timer::~Timer()>
c001cc8f:	83 c4 10             	add    esp,0x10
c001cc92:	90                   	nop
c001cc93:	83 c4 0c             	add    esp,0xc
c001cc96:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c001cc98 <APICTimer::~APICTimer()>:
c001cc98:	83 ec 0c             	sub    esp,0xc
c001cc9b:	83 ec 0c             	sub    esp,0xc
c001cc9e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cca2:	e8 cd ff ff ff       	call   c001cc74 <APICTimer::~APICTimer()>
c001cca7:	83 c4 10             	add    esp,0x10
c001ccaa:	83 ec 08             	sub    esp,0x8
c001ccad:	68 60 01 00 00       	push   0x160
c001ccb2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ccb6:	e8 3f de fe ff       	call   c000aafa <operator delete(void*, unsigned long)>
c001ccbb:	83 c4 10             	add    esp,0x10
c001ccbe:	83 c4 0c             	add    esp,0xc
c001ccc1:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c001ccc4 <PIT::~PIT()>:
c001ccc4:	83 ec 0c             	sub    esp,0xc
c001ccc7:	ba 9c f5 01 c0       	mov    edx,0xc001f59c
c001cccc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ccd0:	89 10                	mov    DWORD PTR [eax],edx
c001ccd2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ccd6:	83 ec 0c             	sub    esp,0xc
c001ccd9:	50                   	push   eax
c001ccda:	e8 51 0b ff ff       	call   c000d830 <Timer::~Timer()>
c001ccdf:	83 c4 10             	add    esp,0x10
c001cce2:	90                   	nop
c001cce3:	83 c4 0c             	add    esp,0xc
c001cce6:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c001cce8 <PIT::~PIT()>:
c001cce8:	83 ec 0c             	sub    esp,0xc
c001cceb:	83 ec 0c             	sub    esp,0xc
c001ccee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ccf2:	e8 cd ff ff ff       	call   c001ccc4 <PIT::~PIT()>
c001ccf7:	83 c4 10             	add    esp,0x10
c001ccfa:	83 ec 08             	sub    esp,0x8
c001ccfd:	68 5c 01 00 00       	push   0x15c
c001cd02:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cd06:	e8 ef dd fe ff       	call   c000aafa <operator delete(void*, unsigned long)>
c001cd0b:	83 c4 10             	add    esp,0x10
c001cd0e:	83 c4 0c             	add    esp,0xc
c001cd11:	c3                   	ret    
